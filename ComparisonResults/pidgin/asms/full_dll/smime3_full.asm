;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	80996EB5DF8227D8609D9CEC6F86BE88
; Input	CRC32 :	C4AF69A7

; File Name   :	C:\compspace\compare\pidgin\dlls\full\smime3_full.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 0001185A (  71770.)
; Section size in file		: 00011A00 (  72192.)
; Offset to raw	data for section: 00000400
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_10001000	proc near		; CODE XREF: sub_10001250+5Fp
					; sub_100014D0+3Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_4]
		test	edi, edi
		jnz	short loc_1000100E
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000100E:				; CODE XREF: sub_10001000+7j
		mov	ecx, [edi]
		push	esi
		test	ecx, ecx
		jnz	short loc_10001028
		mov	eax, [esp+8+arg_0]
		push	8
		push	eax
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		xor	esi, esi
		jmp	short loc_10001057
; ---------------------------------------------------------------------------

loc_10001028:				; CODE XREF: sub_10001000+13j
		xor	esi, esi
		mov	eax, ecx
		cmp	[eax], esi
		jz	short loc_10001039

loc_10001030:				; CODE XREF: sub_10001000+37j
		add	eax, 4
		inc	esi
		cmp	dword ptr [eax], 0
		jnz	short loc_10001030

loc_10001039:				; CODE XREF: sub_10001000+2Ej
		lea	edx, ds:8[esi*4]
		push	edx
		lea	eax, ds:4[esi*4]
		push	eax
		push	ecx
		mov	ecx, [esp+14h+arg_0]
		push	ecx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_10001057:				; CODE XREF: sub_10001000+26j
		test	eax, eax
		jnz	short loc_10001061
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10001061:				; CODE XREF: sub_10001000+59j
		mov	edx, [esp+8+arg_8]
		mov	[eax+esi*4], edx
		mov	dword ptr [eax+esi*4+4], 0
		mov	[edi], eax
		pop	esi
		xor	eax, eax
		pop	edi
		retn
sub_10001000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001080	proc near		; CODE XREF: sub_10002DA0+Dp
					; NSS_CMSMessage_IsSigned+25p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_10001090
		cmp	dword ptr [eax], 0
		jz	short loc_10001090
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10001090:				; CODE XREF: sub_10001080+6j
					; sub_10001080+Bj
		mov	eax, 1
		retn
sub_10001080	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100010A0	proc near		; CODE XREF: NSS_CMSDigestContext_StartMultiple+14p
					; sub_10003C80+Dp ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		test	ecx, ecx
		jnz	short loc_100010AB
		retn
; ---------------------------------------------------------------------------

loc_100010AB:				; CODE XREF: sub_100010A0+8j
		cmp	[ecx], eax
		jz	short locret_100010B9
		nop

loc_100010B0:				; CODE XREF: sub_100010A0+17j
		add	ecx, 4
		inc	eax
		cmp	dword ptr [ecx], 0
		jnz	short loc_100010B0

locret_100010B9:			; CODE XREF: sub_100010A0+Dj
		retn
sub_100010A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100010C0	proc near		; CODE XREF: sub_100055B0+2A4p
					; sub_100075E0+C7p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		sub	esp, 10h
		push	esi
		xor	esi, esi
		xor	edx, edx
		mov	ecx, eax
		cmp	eax, esi
		jz	loc_100011AC
		cmp	[eax], esi
		jz	loc_100011AC
		mov	edi, edi

loc_100010E0:				; CODE XREF: sub_100010C0+26j
		add	ecx, 4
		inc	edx
		cmp	[ecx], esi
		jnz	short loc_100010E0
		cmp	edx, 1
		jle	loc_100011AC
		push	ebx
		dec	edx
		push	ebp
		mov	[esp+1Ch+var_C], edx
		push	edi
		lea	esp, [esp+0]

loc_10001100:				; CODE XREF: sub_100010C0+E4j
		mov	[esp+20h+var_8], esi
		mov	[esp+20h+var_10], esi
		cmp	[esp+20h+var_C], esi
		jle	loc_100011A9
		mov	edi, [esp+20h+arg_C]
		mov	ebp, [esp+20h+arg_8]
		mov	ebx, ebp
		mov	ecx, edi
		sub	ecx, eax
		sub	ebx, eax
		lea	esi, [eax+4]
		mov	[esp+20h+var_4], ecx
		sub	ebp, edi
		jmp	short loc_10001130
; ---------------------------------------------------------------------------
		align 10h

loc_10001130:				; CODE XREF: sub_100010C0+6Bj
					; sub_100010C0+D0j
		mov	eax, [esi]
		mov	ecx, [esi-4]
		push	eax
		push	ecx
		call	[esp+28h+arg_4]
		add	esp, 8
		test	eax, eax
		jle	short loc_1000117D
		cmp	[esp+20h+arg_8], 0
		mov	eax, [esi]
		mov	edx, [esi-4]
		mov	[esi], edx
		mov	[esi-4], eax
		jz	short loc_1000115F
		mov	eax, [ebx+esi]
		mov	ecx, [edi+ebp]
		mov	[ebx+esi], ecx
		mov	[edi+ebp], eax

loc_1000115F:				; CODE XREF: sub_100010C0+91j
		cmp	[esp+20h+arg_C], 0
		jz	short loc_10001174
		mov	ecx, [esp+20h+var_4]
		mov	eax, [ecx+esi]
		mov	edx, [edi]
		mov	[ecx+esi], edx
		mov	[edi], eax

loc_10001174:				; CODE XREF: sub_100010C0+A4j
		mov	eax, [esp+20h+var_10]
		inc	eax
		mov	[esp+20h+var_8], eax

loc_1000117D:				; CODE XREF: sub_100010C0+80j
		mov	eax, [esp+20h+var_10]
		inc	eax
		add	esi, 4
		add	edi, 4
		mov	[esp+20h+var_10], eax
		cmp	eax, [esp+20h+var_C]
		jl	short loc_10001130
		mov	eax, [esp+20h+var_8]
		test	eax, eax
		jz	short loc_100011A9
		mov	[esp+20h+var_C], eax
		mov	eax, [esp+20h+arg_0]
		xor	esi, esi
		jmp	loc_10001100
; ---------------------------------------------------------------------------

loc_100011A9:				; CODE XREF: sub_100010C0+4Cj
					; sub_100010C0+D8j
		pop	edi
		pop	ebp
		pop	ebx

loc_100011AC:				; CODE XREF: sub_100010C0+10j
					; sub_100010C0+18j ...
		pop	esi
		add	esp, 10h
		retn
sub_100010C0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 101. NSS_Get_NSSCMSGenericWrapperDataTemplate

; =============== S U B	R O U T	I N E =======================================


		public NSS_Get_NSSCMSGenericWrapperDataTemplate
NSS_Get_NSSCMSGenericWrapperDataTemplate proc near ; DATA XREF:	.rdata:off_10016AC8o
		mov	eax, offset dword_10013B08
		retn
NSS_Get_NSSCMSGenericWrapperDataTemplate endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 102. NSS_Get_NSS_PointerToCMSGenericWrapperDataTemplate

; =============== S U B	R O U T	I N E =======================================


		public NSS_Get_NSS_PointerToCMSGenericWrapperDataTemplate
NSS_Get_NSS_PointerToCMSGenericWrapperDataTemplate proc	near
					; DATA XREF: .rdata:off_10016AC8o
		mov	eax, offset dword_10013B18
		retn
NSS_Get_NSS_PointerToCMSGenericWrapperDataTemplate endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100011E0	proc near		; DATA XREF: .rdata:off_100133C4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_100011E9
		retn
; ---------------------------------------------------------------------------

loc_100011E9:				; CODE XREF: sub_100011E0+6j
		push	eax
		call	NSS_CMSContentInfo_GetContentTypeTag
		lea	ecx, [eax-19h]
		add	esp, 4
		cmp	ecx, 5		; switch 6 cases
		ja	short loc_1000122E ; jumptable 100011FA	default	case
		jmp	ds:off_10001238[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10001201:				; CODE XREF: sub_100011E0+1Aj
					; DATA XREF: .text:off_10001238o
		mov	[esp+arg_4], 0	; jumptable 100011FA case 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToOctetStringTemplate_Util
; ---------------------------------------------------------------------------

loc_10001216:				; CODE XREF: sub_100011E0+1Aj
					; DATA XREF: .text:off_10001238o
		mov	eax, offset dword_100135F8 ; jumptable 100011FA	case 1
		retn
; ---------------------------------------------------------------------------

loc_1000121C:				; CODE XREF: sub_100011E0+1Aj
					; DATA XREF: .text:off_10001238o
		mov	eax, offset dword_10013A28 ; jumptable 100011FA	case 2
		retn
; ---------------------------------------------------------------------------

loc_10001222:				; CODE XREF: sub_100011E0+1Aj
					; DATA XREF: .text:off_10001238o
		mov	eax, offset dword_10013A98 ; jumptable 100011FA	case 4
		retn
; ---------------------------------------------------------------------------

loc_10001228:				; CODE XREF: sub_100011E0+1Aj
					; DATA XREF: .text:off_10001238o
		mov	eax, offset dword_10013AF8 ; jumptable 100011FA	case 5
		retn
; ---------------------------------------------------------------------------

loc_1000122E:				; CODE XREF: sub_100011E0+18j
					; sub_100011E0+1Aj
					; DATA XREF: ...
		push	eax		; jumptable 100011FA default case
		call	sub_10006D70
		add	esp, 4
		retn
sub_100011E0	endp

; ---------------------------------------------------------------------------
off_10001238	dd offset loc_10001201	; DATA XREF: sub_100011E0+1Ar
		dd offset loc_10001216	; jump table for switch	statement
		dd offset loc_1000121C
		dd offset loc_1000122E
		dd offset loc_10001222
		dd offset loc_10001228

; =============== S U B	R O U T	I N E =======================================


sub_10001250	proc near		; CODE XREF: sub_10001540+36p
					; NSS_CMSSignerInfo_AddSigningTime+3Fp	...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	18h
		push	esi
		mov	ebx, eax
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_100012BB
		mov	eax, [esp+0Ch+arg_4]
		push	eax
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		mov	[edi+10h], eax
		test	eax, eax
		jz	short loc_100012BB
		push	eax
		push	edi
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100012BB
		mov	eax, [esp+0Ch+arg_8]
		test	eax, eax
		jz	short loc_100012CB
		push	eax
		push	esi
		call	SECITEM_ArenaDupItem_Util
		add	esp, 8
		test	eax, eax
		jz	short loc_100012BB
		push	eax
		lea	ecx, [edi+0Ch]
		push	ecx
		push	esi
		call	sub_10001000
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100012CB

loc_100012BB:				; CODE XREF: sub_10001250+1Ej
					; sub_10001250+32j ...
		push	ebx
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100012CB:				; CODE XREF: sub_10001250+49j
					; sub_10001250+69j
		mov	edx, [esp+0Ch+arg_C]
		push	ebx
		push	esi
		mov	[edi+14h], edx
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10001250	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100012F0	proc near		; CODE XREF: NSS_CMSSignerInfo_Verify+BCp
					; NSS_CMSSignerInfo_Verify+E9p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_100012F9
		retn
; ---------------------------------------------------------------------------

loc_100012F9:				; CODE XREF: sub_100012F0+6j
		mov	ecx, [eax+0Ch]
		mov	eax, [ecx]
		push	esi
		test	eax, eax
		jz	short loc_10001367
		mov	esi, [eax+4]
		test	esi, esi
		jz	short loc_10001367
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_10001367
		cmp	dword ptr [ecx+4], 0
		jnz	short loc_10001367
		mov	ecx, [esp+4+arg_4]
		cmp	eax, [ecx+8]
		jnz	short loc_10001367
		mov	ecx, [ecx+4]
		cmp	eax, 4
		jb	short loc_1000133C

loc_10001328:				; CODE XREF: sub_100012F0+4Aj
		mov	edx, [esi]
		cmp	edx, [ecx]
		jnz	short loc_10001367
		sub	eax, 4
		add	ecx, 4
		add	esi, 4
		cmp	eax, 4
		jnb	short loc_10001328

loc_1000133C:				; CODE XREF: sub_100012F0+36j
		test	eax, eax
		jz	short loc_10001360
		mov	dl, [ecx]
		cmp	dl, [esi]
		jnz	short loc_10001367
		cmp	eax, 1
		jbe	short loc_10001360
		mov	dl, [ecx+1]
		cmp	dl, [esi+1]
		jnz	short loc_10001367
		cmp	eax, 2
		jbe	short loc_10001360
		mov	al, [ecx+2]
		cmp	al, [esi+2]
		jnz	short loc_10001367

loc_10001360:				; CODE XREF: sub_100012F0+4Ej
					; sub_100012F0+59j ...
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001367:				; CODE XREF: sub_100012F0+11j
					; sub_100012F0+18j ...
		xor	eax, eax
		pop	esi
		retn
sub_100012F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001370	proc near		; DATA XREF: .rdata:off_10013B28o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_1000137D
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000137D:				; CODE XREF: sub_10001370+7j
		push	ebx
		mov	ebx, [esp+8+arg_4]
		test	ebx, ebx
		jz	short loc_100013AF
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_10001398
		cmp	dword ptr [eax], 0
		jz	short loc_10001398
		cmp	dword ptr [edi+14h], 0
		jz	short loc_100013AF

loc_10001398:				; CODE XREF: sub_10001370+1Bj
					; sub_10001370+20j
		pop	ebx
		pop	edi
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_100013AF:				; CODE XREF: sub_10001370+14j
					; sub_10001370+26j
		mov	eax, [edi+10h]
		push	esi
		test	eax, eax
		jnz	short loc_100013C7
		push	edi
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[edi+10h], eax
		test	eax, eax
		jz	short loc_1000140C ; jumptable 100013D9	default	case

loc_100013C7:				; CODE XREF: sub_10001370+45j
		mov	eax, [eax+0Ch]
		add	eax, 0FFFFFFE1h	; switch 69 cases
		cmp	eax, 44h
		ja	short loc_1000140C ; jumptable 100013D9	default	case
		movzx	eax, ds:byte_1000143C[eax]
		jmp	ds:off_10001428[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100013E0:				; CODE XREF: sub_10001370+69j
					; DATA XREF: .text:off_10001428o
		xor	esi, esi	; jumptable 100013D9 cases 31,32,99
		push	esi
		push	esi
		call	NSS_Get_SEC_IA5StringTemplate_Util
		jmp	short loc_1000141A
; ---------------------------------------------------------------------------

loc_100013EB:				; CODE XREF: sub_10001370+69j
					; DATA XREF: .text:off_10001428o
		xor	esi, esi	; jumptable 100013D9 case 33
		push	esi
		push	esi
		call	NSS_Get_SEC_ObjectIDTemplate_Util
		jmp	short loc_1000141A
; ---------------------------------------------------------------------------

loc_100013F6:				; CODE XREF: sub_10001370+69j
					; DATA XREF: .text:off_10001428o
		xor	esi, esi	; jumptable 100013D9 case 34
		push	esi
		push	esi
		call	NSS_Get_SEC_OctetStringTemplate_Util
		jmp	short loc_1000141A
; ---------------------------------------------------------------------------

loc_10001401:				; CODE XREF: sub_10001370+69j
					; DATA XREF: .text:off_10001428o
		xor	esi, esi	; jumptable 100013D9 case 35
		push	esi
		push	esi
		call	NSS_Get_CERT_TimeChoiceTemplate
		jmp	short loc_1000141A
; ---------------------------------------------------------------------------

loc_1000140C:				; CODE XREF: sub_10001370+55j
					; sub_10001370+60j ...
		push	0		; jumptable 100013D9 default case
		push	0
		mov	esi, 1
		call	NSS_Get_SEC_AnyTemplate_Util

loc_1000141A:				; CODE XREF: sub_10001370+79j
					; sub_10001370+84j ...
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_10001424
		mov	[edi+14h], esi

loc_10001424:				; CODE XREF: sub_10001370+AFj
		pop	esi
		pop	ebx
		pop	edi
		retn
sub_10001370	endp

; ---------------------------------------------------------------------------
off_10001428	dd offset loc_100013E0,	offset loc_100013EB, offset loc_100013F6
					; DATA XREF: sub_10001370+69r
		dd offset loc_10001401,	offset loc_1000140C ; jump table for switch statement
byte_1000143C	db	0,     0,     1,     2 ; DATA XREF: sub_10001370+62r
		db	3,     4,     4,     4 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	0
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001490	proc near		; CODE XREF: sub_10006500+158p
					; NSS_CMSSignerInfo_Verify+12Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_8]
		mov	edx, [esp+arg_0]
		push	offset dword_10013B70
		push	eax
		push	ecx
		push	edx
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		retn
sub_10001490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100014B0	proc near		; CODE XREF: sub_10006500+135p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0
		push	offset dword_10013B30
		push	eax
		call	sub_100075E0
		add	esp, 0Ch
		retn
sub_100014B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100014D0	proc near		; CODE XREF: NSS_CMSSignerInfo_AddSigningTime+87p
					; NSS_CMSSignerInfo_AddSMIMECaps+55p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		mov	ebx, [esp+14h+arg_8]
		push	ebx
		mov	ebp, eax
		call	SECOID_FindOID_Util
		add	esp, 8
		test	eax, eax
		jz	short loc_100014F4
		mov	eax, [eax+0Ch]

loc_100014F4:				; CODE XREF: sub_100014D0+1Fj
		mov	edi, [esp+10h+arg_4]
		push	0
		push	eax
		mov	eax, [edi]
		push	eax
		call	sub_100112A0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10001519
		push	ebx
		push	edi
		push	esi
		call	sub_10001000
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000152B

loc_10001519:				; CODE XREF: sub_100014D0+38j
		push	ebp
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000152B:				; CODE XREF: sub_100014D0+47j
		push	ebp
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_100014D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001540	proc near		; CODE XREF: sub_10006500+D9p
					; sub_10006500+FBp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		mov	edi, [esp+14h+arg_8]
		mov	ebx, [esp+14h+arg_4]
		push	0
		mov	ebp, eax
		mov	eax, [ebx]
		push	edi
		push	eax
		call	sub_100112A0
		mov	edx, [esp+20h+arg_C]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_100015A3
		mov	ecx, [esp+10h+arg_10]
		push	ecx
		push	edx
		push	edi
		push	esi
		call	sub_10001250
		add	esp, 10h
		test	eax, eax
		jz	short loc_10001591
		push	eax
		push	ebx
		push	esi
		call	sub_10001000
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100015AF

loc_10001591:				; CODE XREF: sub_10001540+40j
		push	ebp
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100015A3:				; CODE XREF: sub_10001540+2Cj
		mov	ecx, [eax+0Ch]
		mov	[ecx], edx
		mov	ecx, [esp+10h+arg_10]
		mov	[eax+14h], ecx

loc_100015AF:				; CODE XREF: sub_10001540+4Fj
		push	ebp
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10001540	endp


; =============== S U B	R O U T	I N E =======================================


sub_100015C0	proc near		; CODE XREF: sub_10002840+9p
					; sub_100028D0+14p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+3Ch], 0
		jz	short loc_100015CF
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100015CF:				; CODE XREF: sub_100015C0+9j
		push	0Ch
		call	PORT_ZAlloc_Util
		mov	[esi+3Ch], eax
		add	esp, 4
		neg	eax
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	esi
		retn
sub_100015C0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. NSS_CMSContentInfo_SetDontStream

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_SetDontStream
NSS_CMSContentInfo_SetDontStream proc near ; DATA XREF:	.rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+3Ch], 0
		jnz	short loc_1000161B
		push	0Ch
		call	PORT_ZAlloc_Util
		mov	[esi+3Ch], eax
		add	esp, 4
		neg	eax
		sbb	eax, eax
		neg	eax
		dec	eax
		jz	short loc_1000161B
		mov	eax, [esp+4+arg_4]
		neg	eax
		sbb	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000161B:				; CODE XREF: NSS_CMSContentInfo_SetDontStream+9j
					; NSS_CMSContentInfo_SetDontStream+1Fj
		mov	eax, [esi+3Ch]
		mov	ecx, [esp+4+arg_4]
		mov	[eax+8], ecx
		xor	eax, eax
		pop	esi
		retn
NSS_CMSContentInfo_SetDontStream endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. NSS_CMSContentInfo_SetContent

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_SetContent
NSS_CMSContentInfo_SetContent proc near	; CODE XREF: NSS_CMSContentInfo_SetContent_Data+12p
					; NSS_CMSContentInfo_SetContent_SignedData+11p	...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	esi
		push	ebx
		call	SECOID_FindOIDByTag_Util
		mov	esi, [esp+0Ch+arg_4]
		add	esp, 4
		mov	[esi+10h], eax
		test	eax, eax
		jnz	short loc_10001650
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001650:				; CODE XREF: NSS_CMSContentInfo_SetContent+18j
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	eax
		mov	eax, [ebp+44h]
		push	esi
		push	eax
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000166E
		pop	ebp
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000166E:				; CODE XREF: NSS_CMSContentInfo_SetContent+35j
		push	edi
		mov	edi, [esp+10h+arg_C]
		push	ebx
		mov	[esi+0Ch], edi
		call	sub_10006D40
		add	esp, 4
		test	eax, eax
		jz	short loc_10001691
		test	edi, edi
		jz	short loc_10001691
		mov	[esi+2Ch], edi

loc_1000168A:				; CODE XREF: NSS_CMSContentInfo_SetContent+76j
		pop	edi
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001691:				; CODE XREF: NSS_CMSContentInfo_SetContent+51j
					; NSS_CMSContentInfo_SetContent+55j
		mov	ecx, [ebp+44h]
		push	1
		push	0
		push	ecx
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		mov	[esi+2Ch], eax
		test	eax, eax
		jnz	short loc_1000168A
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
NSS_CMSContentInfo_SetContent endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  14. NSS_CMSContentInfo_SetContent_Data

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_SetContent_Data
NSS_CMSContentInfo_SetContent_Data proc	near
					; CODE XREF: NSS_CMSSignedData_CreateCertsOnly+5Cp
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		push	eax
		push	19h
		push	esi
		push	ecx
		call	NSS_CMSContentInfo_SetContent
		add	esp, 10h
		test	eax, eax
		jz	short loc_100016E3
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100016E3:				; CODE XREF: NSS_CMSContentInfo_SetContent_Data+1Cj
		cmp	[esp+4+arg_C], 0
		jz	short loc_100016F1
		mov	dword ptr [esi+2Ch], 0

loc_100016F1:				; CODE XREF: NSS_CMSContentInfo_SetContent_Data+28j
		xor	eax, eax
		pop	esi
		retn
NSS_CMSContentInfo_SetContent_Data endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  18. NSS_CMSContentInfo_SetContent_SignedData

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_SetContent_SignedData
NSS_CMSContentInfo_SetContent_SignedData proc near ; DATA XREF:	.rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	eax
		push	1Ah
		push	ecx
		push	edx
		call	NSS_CMSContentInfo_SetContent
		add	esp, 10h
		retn
NSS_CMSContentInfo_SetContent_SignedData endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. NSS_CMSContentInfo_SetContent_EnvelopedData

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_SetContent_EnvelopedData
NSS_CMSContentInfo_SetContent_EnvelopedData proc near ;	DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	eax
		push	1Bh
		push	ecx
		push	edx
		call	NSS_CMSContentInfo_SetContent
		add	esp, 10h
		retn
NSS_CMSContentInfo_SetContent_EnvelopedData endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. NSS_CMSContentInfo_SetContent_DigestedData

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_SetContent_DigestedData
NSS_CMSContentInfo_SetContent_DigestedData proc	near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	eax
		push	1Dh
		push	ecx
		push	edx
		call	NSS_CMSContentInfo_SetContent
		add	esp, 10h
		retn
NSS_CMSContentInfo_SetContent_DigestedData endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. NSS_CMSContentInfo_SetContent_EncryptedData

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_SetContent_EncryptedData
NSS_CMSContentInfo_SetContent_EncryptedData proc near ;	DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	eax
		push	1Eh
		push	ecx
		push	edx
		call	NSS_CMSContentInfo_SetContent
		add	esp, 10h
		retn
NSS_CMSContentInfo_SetContent_EncryptedData endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. NSS_CMSContentInfo_GetContent

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_GetContent
NSS_CMSContentInfo_GetContent proc near	; CODE XREF: NSS_CMSMessage_GetContent_0+5Dj
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_10001796
		mov	eax, [edi+10h]
		test	eax, eax
		jz	short loc_10001796
		mov	esi, [eax+0Ch]
		jmp	short loc_10001798
; ---------------------------------------------------------------------------

loc_10001796:				; CODE XREF: NSS_CMSContentInfo_GetContent+8j
					; NSS_CMSContentInfo_GetContent+Fj
		xor	esi, esi

loc_10001798:				; CODE XREF: NSS_CMSContentInfo_GetContent+14j
		lea	eax, [esi-19h]	; switch 6 cases
		cmp	eax, 5
		ja	short loc_100017B4 ; jumptable 100017A7	default	case
		movzx	eax, ds:byte_100017E4[eax]
		jmp	ds:off_100017DC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100017AE:				; CODE XREF: NSS_CMSContentInfo_GetContent+27j
					; NSS_CMSContentInfo_GetContent+3Fj
					; DATA XREF: ...
		mov	eax, [edi+0Ch]	; jumptable 100017A7 cases 25-27,29,30
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100017B4:				; CODE XREF: NSS_CMSContentInfo_GetContent+1Ej
					; NSS_CMSContentInfo_GetContent+27j
					; DATA XREF: ...
		push	esi		; jumptable 100017A7 default case
		call	sub_10006CB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100017AE ; jumptable 100017A7	cases 25-27,29,30
		push	esi
		call	sub_10006D40
		add	esp, 4
		test	eax, eax
		jz	short loc_100017D4
		mov	eax, [edi+2Ch]
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100017D4:				; CODE XREF: NSS_CMSContentInfo_GetContent+4Cj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
NSS_CMSContentInfo_GetContent endp

; ---------------------------------------------------------------------------
		align 4
off_100017DC	dd offset loc_100017AE	; DATA XREF: NSS_CMSContentInfo_GetContent+27r
		dd offset loc_100017B4	; jump table for switch	statement
byte_100017E4	db	0,     0,     0,     1
					; DATA XREF: NSS_CMSContentInfo_GetContent+20r
		db	0,     0	; indirect table for switch statement
		align 10h
; Exported entry  10. NSS_CMSContentInfo_GetContentTypeTag

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_GetContentTypeTag
NSS_CMSContentInfo_GetContentTypeTag proc near ; CODE XREF: sub_100011E0+Ap
					; sub_10001E80+118p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+10h], 0
		jnz	short loc_10001807
		push	esi
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+10h], eax

loc_10001807:				; CODE XREF: NSS_CMSContentInfo_GetContentTypeTag+9j
		mov	eax, [esi+10h]
		pop	esi
		test	eax, eax
		jnz	short loc_10001810
		retn
; ---------------------------------------------------------------------------

loc_10001810:				; CODE XREF: NSS_CMSContentInfo_GetContentTypeTag+1Dj
		mov	eax, [eax+0Ch]
		retn
NSS_CMSContentInfo_GetContentTypeTag endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001820	proc near		; CODE XREF: sub_100055B0+B7p
					; NSS_CMSSignedData_VerifySignerInfo+5Fp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+10h], 0
		jnz	short loc_10001837
		push	esi
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+10h], eax

loc_10001837:				; CODE XREF: sub_10001820+9j
		mov	eax, [esi+10h]
		pop	esi
		retn
sub_10001820	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. NSS_CMSContentInfo_GetContentEncAlgTag

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_GetContentEncAlgTag
NSS_CMSContentInfo_GetContentEncAlgTag proc near ; CODE	XREF: sub_10003A10+8Bp
					; sub_10003C80+9Bp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+38h], 0
		jnz	short loc_1000185A
		lea	eax, [esi+14h]
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		mov	[esi+38h], eax

loc_1000185A:				; CODE XREF: NSS_CMSContentInfo_GetContentEncAlgTag+9j
		mov	eax, [esi+38h]
		pop	esi
		retn
NSS_CMSContentInfo_GetContentEncAlgTag endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  44. NSS_CMSEnvelopedData_GetContentInfo

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEnvelopedData_GetContentInfo
NSS_CMSEnvelopedData_GetContentInfo proc near ;	CODE XREF: sub_10002DA0+44p
					; sub_10002E20+22p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 14h
		retn
NSS_CMSEnvelopedData_GetContentInfo endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. NSS_CMSContentInfo_SetContentEncAlg

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_SetContentEncAlg
NSS_CMSContentInfo_SetContentEncAlg proc near ;	CODE XREF: NSS_CMSEncryptedData_Create+47p
					; NSS_CMSEnvelopedData_Create+38p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_C]
		mov	ecx, [esp+arg_8]
		push	esi
		mov	esi, [esp+4+arg_4]
		push	eax
		mov	eax, [esp+8+arg_0]
		push	ecx
		lea	edx, [esi+14h]
		push	edx
		push	eax
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10001899
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001899:				; CODE XREF: NSS_CMSContentInfo_SetContentEncAlg+22j
		mov	ecx, [esp+4+arg_10]
		mov	[esi+34h], ecx
		xor	eax, eax
		pop	esi
		retn
NSS_CMSContentInfo_SetContentEncAlg endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100018B0	proc near		; CODE XREF: NSS_CMSEncryptedData_Create+71p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		push	eax
		lea	ecx, [esi+14h]
		push	ecx
		push	edx
		call	SECOID_CopyAlgorithmID_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100018D4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100018D4:				; CODE XREF: sub_100018B0+1Dj
		mov	eax, [esp+4+arg_C]
		test	eax, eax
		js	short loc_100018DF
		mov	[esi+34h], eax

loc_100018DF:				; CODE XREF: sub_100018B0+2Aj
		xor	eax, eax
		pop	esi
		retn
sub_100018B0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. NSS_CMSContentInfo_SetBulkKey

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_SetBulkKey
NSS_CMSContentInfo_SetBulkKey proc near	; CODE XREF: sub_10002DA0+62p
					; sub_10002EA0+39p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		push	eax
		call	PK11_ReferenceSymKey
		mov	esi, [esp+8+arg_0]
		lea	ecx, [esi+14h]
		push	ecx
		push	eax
		mov	[esi+30h], eax
		call	PK11_GetKeyStrength
		add	esp, 0Ch
		mov	[esi+34h], eax
		pop	esi
		retn
NSS_CMSContentInfo_SetBulkKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. NSS_CMSContentInfo_GetBulkKey

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_GetBulkKey
NSS_CMSContentInfo_GetBulkKey proc near	; CODE XREF: sub_10002E20+Bp
					; sub_10003BD0+Bp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+30h]
		test	eax, eax
		jnz	short loc_1000192C
		retn
; ---------------------------------------------------------------------------

loc_1000192C:				; CODE XREF: NSS_CMSContentInfo_GetBulkKey+9j
		mov	[esp+arg_0], eax
		jmp	PK11_ReferenceSymKey
NSS_CMSContentInfo_GetBulkKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. NSS_CMSContentInfo_GetBulkKeySize

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSContentInfo_GetBulkKeySize
NSS_CMSContentInfo_GetBulkKeySize proc near ; CODE XREF: sub_10003A10+EFp
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+34h]
		retn
NSS_CMSContentInfo_GetBulkKeySize endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001950	proc near		; CODE XREF: NSS_CMSDigestedData_Destroy+Bj
					; NSS_CMSEncryptedData_Destroy+Bj ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		cmp	dword ptr [edi+10h], 0
		jnz	short loc_10001967
		push	edi
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[edi+10h], eax

loc_10001967:				; CODE XREF: sub_10001950+9j
		mov	eax, [edi+10h]
		test	eax, eax
		jz	short loc_10001971
		mov	eax, [eax+0Ch]

loc_10001971:				; CODE XREF: sub_10001950+1Cj
		lea	ecx, [eax-1Ah]	; switch 5 cases
		cmp	ecx, 4
		ja	short loc_100019B8 ; jumptable 10001979	default	case
		jmp	ds:off_10001A1C[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10001980:				; CODE XREF: sub_10001950+29j
					; DATA XREF: .text:off_10001A1Co
		mov	eax, [edi+0Ch]	; jumptable 10001979 case 27
		push	eax
		call	NSS_CMSEnvelopedData_Destroy
		add	esp, 4
		jmp	short loc_100019C5
; ---------------------------------------------------------------------------

loc_1000198E:				; CODE XREF: sub_10001950+29j
					; DATA XREF: .text:off_10001A1Co
		mov	ecx, [edi+0Ch]	; jumptable 10001979 case 26
		push	ecx
		call	NSS_CMSSignedData_Destroy
		add	esp, 4
		jmp	short loc_100019C5
; ---------------------------------------------------------------------------

loc_1000199C:				; CODE XREF: sub_10001950+29j
					; DATA XREF: .text:off_10001A1Co
		mov	edx, [edi+0Ch]	; jumptable 10001979 case 30
		push	edx
		call	NSS_CMSEncryptedData_Destroy
		add	esp, 4
		jmp	short loc_100019C5
; ---------------------------------------------------------------------------

loc_100019AA:				; CODE XREF: sub_10001950+29j
					; DATA XREF: .text:off_10001A1Co
		mov	eax, [edi+0Ch]	; jumptable 10001979 case 29
		push	eax
		call	NSS_CMSDigestedData_Destroy
		add	esp, 4
		jmp	short loc_100019C5
; ---------------------------------------------------------------------------

loc_100019B8:				; CODE XREF: sub_10001950+27j
					; sub_10001950+29j
					; DATA XREF: ...
		mov	ecx, [edi+0Ch]	; jumptable 10001979 default case
		push	ecx
		push	eax
		call	sub_10006E30
		add	esp, 8

loc_100019C5:				; CODE XREF: sub_10001950+3Cj
					; sub_10001950+4Aj ...
		push	esi
		mov	esi, [edi+3Ch]
		test	esi, esi
		jz	short loc_10001A09
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_100019E4
		push	eax
		call	NSS_CMSDigestContext_Cancel
		add	esp, 4
		mov	dword ptr [esi+4], 0

loc_100019E4:				; CODE XREF: sub_10001950+82j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100019F9
		push	eax
		call	sub_10010E10
		add	esp, 4
		mov	dword ptr [esi], 0

loc_100019F9:				; CODE XREF: sub_10001950+98j
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		mov	dword ptr [edi+3Ch], 0

loc_10001A09:				; CODE XREF: sub_10001950+7Bj
		mov	edi, [edi+30h]
		pop	esi
		test	edi, edi
		jz	short loc_10001A1A
		push	edi
		call	PK11_FreeSymKey
		add	esp, 4

loc_10001A1A:				; CODE XREF: sub_10001950+BFj
		pop	edi
		retn
sub_10001950	endp

; ---------------------------------------------------------------------------
off_10001A1C	dd offset loc_1000198E	; DATA XREF: sub_10001950+29r
		dd offset loc_10001980	; jump table for switch	statement
		dd offset loc_100019B8
		dd offset loc_100019AA
		dd offset loc_1000199C

; =============== S U B	R O U T	I N E =======================================


sub_10001A30	proc near		; CODE XREF: NSS_CMSMessage_GetContent_0+4Ap
					; NSS_CMSMessage_ContentLevelCount+12p	...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		cmp	[esi+10h], edi
		jnz	short loc_10001A49
		push	esi
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+10h], eax

loc_10001A49:				; CODE XREF: sub_10001A30+Bj
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_10001A53
		mov	eax, [eax+0Ch]

loc_10001A53:				; CODE XREF: sub_10001A30+1Ej
		lea	ecx, [eax-1Ah]	; switch 5 cases
		cmp	ecx, 4
		ja	short loc_10001A92 ; jumptable 10001A5B	default	case
		jmp	ds:off_10001AC4[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10001A62:				; CODE XREF: sub_10001A30+2Bj
					; DATA XREF: .text:off_10001AC4o
		mov	esi, [esi+0Ch]	; jumptable 10001A5B case 26
		test	esi, esi
		jz	short loc_10001ABF
		lea	edi, [esi+10h]
		jmp	short loc_10001AA8
; ---------------------------------------------------------------------------

loc_10001A6E:				; CODE XREF: sub_10001A30+2Bj
					; DATA XREF: .text:off_10001AC4o
		mov	esi, [esi+0Ch]	; jumptable 10001A5B case 27
		test	esi, esi
		jz	short loc_10001ABF
		lea	edi, [esi+14h]
		jmp	short loc_10001AA8
; ---------------------------------------------------------------------------

loc_10001A7A:				; CODE XREF: sub_10001A30+2Bj
					; DATA XREF: .text:off_10001AC4o
		mov	esi, [esi+0Ch]	; jumptable 10001A5B case 29
		test	esi, esi
		jz	short loc_10001ABF
		lea	edi, [esi+24h]
		jmp	short loc_10001AA8
; ---------------------------------------------------------------------------

loc_10001A86:				; CODE XREF: sub_10001A30+2Bj
					; DATA XREF: .text:off_10001AC4o
		mov	esi, [esi+0Ch]	; jumptable 10001A5B case 30
		test	esi, esi
		jz	short loc_10001ABF
		lea	edi, [esi+0Ch]
		jmp	short loc_10001AA8
; ---------------------------------------------------------------------------

loc_10001A92:				; CODE XREF: sub_10001A30+29j
					; sub_10001A30+2Bj
					; DATA XREF: ...
		push	eax		; jumptable 10001A5B default case
		call	sub_10006CB0
		add	esp, 4
		test	eax, eax
		jz	short loc_10001ABF
		mov	esi, [esi+0Ch]
		test	esi, esi
		jz	short loc_10001ABF
		mov	edi, esi

loc_10001AA8:				; CODE XREF: sub_10001A30+3Cj
					; sub_10001A30+48j ...
		test	edi, edi
		jz	short loc_10001ABF
		cmp	dword ptr [edi+3Ch], 0
		jnz	short loc_10001ABF
		push	0Ch
		call	PORT_ZAlloc_Util
		add	esp, 4
		mov	[edi+3Ch], eax

loc_10001ABF:				; CODE XREF: sub_10001A30+37j
					; sub_10001A30+43j ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_10001A30	endp

; ---------------------------------------------------------------------------
off_10001AC4	dd offset loc_10001A62	; DATA XREF: sub_10001A30+2Br
		dd offset loc_10001A6E	; jump table for switch	statement
		dd offset loc_10001A92
		dd offset loc_10001A7A
		dd offset loc_10001A86
		align 10h

; =============== S U B	R O U T	I N E =======================================


NSS_CMSMessage_GetContent_0 proc near	; CODE XREF: NSS_CMSMessage_GetContentj

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebx, ebx
		push	edi
		cmp	[esi+10h], ebx
		jnz	short loc_10001AFA
		push	esi
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+10h], eax

loc_10001AFA:				; CODE XREF: NSS_CMSMessage_GetContent_0+Cj
		mov	eax, [esi+10h]
		test	eax, eax
		jnz	short loc_10001B05
		xor	edi, edi
		jmp	short loc_10001B08
; ---------------------------------------------------------------------------

loc_10001B05:				; CODE XREF: NSS_CMSMessage_GetContent_0+1Fj
		mov	edi, [eax+0Ch]

loc_10001B08:				; CODE XREF: NSS_CMSMessage_GetContent_0+23j
		push	edi
		call	sub_10006D40
		add	esp, 4
		test	eax, eax
		jz	short loc_10001B1C
		mov	eax, [esi+0Ch]
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001B1C:				; CODE XREF: NSS_CMSMessage_GetContent_0+33j
		push	edi
		call	sub_10006CB0
		add	esp, 4
		test	eax, eax
		jz	short loc_10001B42
		push	esi
		call	sub_10001A30
		add	esp, 4
		test	eax, eax
		jz	short loc_10001B42
		pop	edi
		pop	esi
		pop	ebx
		mov	[esp+arg_0], eax
		jmp	NSS_CMSContentInfo_GetContent
; ---------------------------------------------------------------------------

loc_10001B42:				; CODE XREF: NSS_CMSMessage_GetContent_0+47j
					; NSS_CMSMessage_GetContent_0+54j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
NSS_CMSMessage_GetContent_0 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001B50	proc near		; CODE XREF: sub_10002EA0+4Fp
					; sub_10003C80+F2p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		push	esi
		mov	[esp+14h+var_4], 0
		call	SECOID_GetAlgorithmTag_Util
		push	esi
		mov	edi, eax
		call	SEC_PKCS5IsAlgorithmPBEAlg
		mov	ebp, [esp+18h+arg_0]
		add	esp, 8
		test	eax, eax
		jz	short loc_10001BB2
		push	ebp
		call	PK11_GetSymKeyUserData
		add	esp, 4
		test	eax, eax
		jz	short loc_10001BAB
		push	eax
		lea	eax, [esp+14h+var_4]
		push	eax
		push	esi
		call	PK11_GetPBECryptoMechanism
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_10001BCB
		mov	ecx, [esp+10h+var_4]
		push	1
		push	ecx
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_10001BAB:				; CODE XREF: sub_10001B50+34j
					; sub_10001B50+79j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001BB2:				; CODE XREF: sub_10001B50+27j
		push	edi
		call	PK11_AlgtagToMechanism
		push	esi
		mov	edi, eax
		call	PK11_ParamFromAlgid
		add	esp, 8
		mov	[esp+10h+var_4], eax
		test	eax, eax
		jz	short loc_10001BAB

loc_10001BCB:				; CODE XREF: sub_10001B50+4Aj
		push	101Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10001BF4
		mov	edx, [esp+10h+var_4]
		push	1
		push	edx
		call	SECITEM_FreeItem_Util
		add	esp, 8
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001BF4:				; CODE XREF: sub_10001B50+8Cj
		mov	eax, [esp+10h+var_4]
		push	ebx
		push	eax
		push	edi
		call	PK11_GetBlockSize
		push	ebp
		mov	[esi+14h], eax
		call	PK11_GetSlotFromKey
		mov	ebx, eax
		push	ebx
		call	PK11_IsHW
		add	esp, 10h
		test	eax, eax
		mov	eax, 1000h
		jnz	short loc_10001C20
		mov	eax, [esi+14h]

loc_10001C20:				; CODE XREF: sub_10001B50+CBj
		push	ebx
		mov	[esi+10h], eax
		call	PK11_FreeSlot
		mov	ecx, [esp+18h+var_4]
		push	ecx
		push	ebp
		push	105h
		push	edi
		call	PK11_CreateContextBySymKey
		mov	edx, [esp+28h+var_4]
		push	1
		push	edx
		mov	edi, eax
		call	SECITEM_FreeItem_Util
		add	esp, 1Ch
		xor	eax, eax
		pop	ebx
		cmp	edi, eax
		jnz	short loc_10001C62
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001C62:				; CODE XREF: sub_10001B50+100j
		mov	[esi], edi
		mov	[esi+0Ch], eax
		mov	[esi+18h], eax
		pop	edi
		mov	dword ptr [esi+4], offset PK11_CipherOp
		mov	dword ptr [esi+8], offset PK11_DestroyContext
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ecx
		retn
sub_10001B50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001C80	proc near		; CODE XREF: sub_10002E20+4Ep
					; sub_10003BD0+4Ep

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+1Ch+arg_8]
		xor	ebp, ebp
		push	edi
		mov	[esp+20h+var_C], ebp
		mov	[esp+20h+var_8], ebp
		call	SECOID_GetAlgorithmTag_Util
		mov	esi, eax
		push	edi
		mov	[esp+24h+var_4], esi
		call	SEC_PKCS5IsAlgorithmPBEAlg
		add	esp, 8
		test	eax, eax
		jz	short loc_10001CEE
		mov	ebx, [esp+1Ch+arg_4]
		push	ebx
		call	PK11_GetSymKeyUserData
		add	esp, 4
		cmp	eax, ebp
		jz	short loc_10001CE4
		push	eax
		lea	eax, [esp+20h+var_C]
		push	eax
		push	edi
		call	PK11_GetPBECryptoMechanism
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_10001D14
		mov	ecx, [esp+1Ch+var_C]
		push	1
		push	ecx
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_10001CE4:				; CODE XREF: sub_10001C80+3Dj
					; sub_10001C80+8Aj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10001CEE:				; CODE XREF: sub_10001C80+2Cj
		push	esi
		call	PK11_AlgtagToMechanism
		mov	ebx, [esp+20h+arg_4]
		mov	edi, eax
		push	ebx
		push	edi
		call	PK11_GenerateNewParam
		add	esp, 0Ch
		mov	[esp+1Ch+var_C], eax
		cmp	eax, ebp
		jz	short loc_10001CE4
		mov	[esp+1Ch+var_8], 1

loc_10001D14:				; CODE XREF: sub_10001C80+53j
		push	101Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jz	loc_10001DCB
		mov	edx, [esp+1Ch+var_C]
		push	edx
		push	edi
		call	PK11_GetBlockSize
		push	ebx
		mov	[esi+14h], eax
		call	PK11_GetSlotFromKey
		mov	ebp, eax
		push	ebp
		call	PK11_IsHW
		add	esp, 10h
		test	eax, eax
		mov	eax, 1000h
		jnz	short loc_10001D56
		mov	eax, [esi+14h]

loc_10001D56:				; CODE XREF: sub_10001C80+D1j
		push	ebp
		mov	[esi+10h], eax
		call	PK11_FreeSlot
		mov	eax, [esp+20h+var_C]
		push	eax
		push	ebx
		push	104h
		push	edi
		call	PK11_CreateContextBySymKey
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_10001D86

loc_10001D79:				; CODE XREF: sub_10001C80+12Bj
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		xor	esi, esi
		jmp	short loc_10001DCB
; ---------------------------------------------------------------------------

loc_10001D86:				; CODE XREF: sub_10001C80+F7j
		cmp	[esp+1Ch+var_8], 0
		jz	short loc_10001DAD
		mov	ecx, [esp+1Ch+arg_8]
		mov	edx, [esp+1Ch+arg_0]
		mov	eax, [esp+1Ch+var_C]
		push	ecx
		mov	ecx, [esp+20h+var_4]
		push	edx
		push	eax
		push	ecx
		call	PK11_ParamToAlgid
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10001D79

loc_10001DAD:				; CODE XREF: sub_10001C80+10Bj
		mov	[esi], edi
		mov	dword ptr [esi+4], offset PK11_CipherOp
		mov	dword ptr [esi+8], offset PK11_DestroyContext
		mov	dword ptr [esi+0Ch], 1
		mov	dword ptr [esi+18h], 0

loc_10001DCB:				; CODE XREF: sub_10001C80+A5j
					; sub_10001C80+104j
		mov	edx, [esp+1Ch+var_C]
		push	1
		push	edx
		call	SECITEM_FreeItem_Util
		add	esp, 8
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10001C80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001DF0	proc near		; CODE XREF: NSS_CMSDecoder_Finish+1Ep
					; sub_10002350+56p ...
		mov	edx, [ecx+8]
		push	esi
		lea	esi, [edx-19h]
		xor	eax, eax
		cmp	esi, 5		; switch 6 cases
		ja	short loc_10001E4D ; jumptable 10001DFE	default	case
		jmp	ds:off_10001E5C[esi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10001E05:				; CODE XREF: sub_10001DF0+Ej
					; DATA XREF: .text:off_10001E5Co
		mov	ecx, [ecx+0Ch]	; jumptable 10001DFE case 1
		test	ecx, ecx
		jz	short loc_10001E5A ; jumptable 10001DFE	case 0
		push	ecx
		call	sub_10004EB0
		add	esp, 4
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001E17:				; CODE XREF: sub_10001DF0+Ej
					; DATA XREF: .text:off_10001E5Co
		mov	ecx, [ecx+0Ch]	; jumptable 10001DFE case 2
		test	ecx, ecx
		jz	short loc_10001E5A ; jumptable 10001DFE	case 0
		push	ecx
		call	sub_10002960
		add	esp, 4
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001E29:				; CODE XREF: sub_10001DF0+Ej
					; DATA XREF: .text:off_10001E5Co
		mov	ecx, [ecx+0Ch]	; jumptable 10001DFE case 4
		test	ecx, ecx
		jz	short loc_10001E5A ; jumptable 10001DFE	case 0
		push	ecx
		call	sub_10002960
		add	esp, 4
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001E3B:				; CODE XREF: sub_10001DF0+Ej
					; DATA XREF: .text:off_10001E5Co
		mov	ecx, [ecx+0Ch]	; jumptable 10001DFE case 5
		test	ecx, ecx
		jz	short loc_10001E5A ; jumptable 10001DFE	case 0
		push	ecx
		call	sub_10002960
		add	esp, 4
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001E4D:				; CODE XREF: sub_10001DF0+Cj
					; sub_10001DF0+Ej
					; DATA XREF: ...
		mov	eax, [ecx+0Ch]	; jumptable 10001DFE default case
		push	eax
		push	edx
		call	sub_10006F10
		add	esp, 8

loc_10001E5A:				; CODE XREF: sub_10001DF0+Ej
					; sub_10001DF0+1Aj ...
		pop	esi		; jumptable 10001DFE case 0
		retn
sub_10001DF0	endp

; ---------------------------------------------------------------------------
off_10001E5C	dd offset loc_10001E5A	; DATA XREF: sub_10001DF0+Er
		dd offset loc_10001E05	; jump table for switch	statement
		dd offset loc_10001E17
		dd offset loc_10001E4D
		dd offset loc_10001E29
		dd offset loc_10001E3B
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001E80	proc near		; CODE XREF: .text:10002052p
					; sub_10002350+Cp

Src		= dword	ptr -0Ch
Size		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		mov	ecx, [ebx+0Ch]
		push	ebp
		mov	ebp, [esp+14h+arg_8]
		push	esi
		push	edi
		mov	edi, eax
		mov	eax, [ebx+8]
		push	eax
		push	ecx
		mov	[esp+24h+Src], 0
		call	sub_10007440
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10001EBE
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [ebx+18h], 0FFFFE001h
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10001EBE:				; CODE XREF: sub_10001E80+2Dj
		mov	eax, [esi+3Ch]
		test	eax, eax
		jz	loc_10001F5E
		cmp	dword ptr [eax], 0
		jz	loc_10001F5E
		push	ebp
		mov	[esp+20h+Size],	0
		mov	edx, [eax]
		push	edi
		push	edx
		call	sub_10010E30
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_10001F2A
		test	edi, edi
		jz	loc_10002025

loc_10001EF5:				; CODE XREF: sub_10001E80+B9j
		mov	ecx, [esp+1Ch+arg_4]
		mov	eax, [esi+3Ch]
		push	ebp
		push	edi
		mov	edi, [esp+24h+Src]
		push	ecx
		mov	ecx, [eax]
		push	ebx
		lea	edx, [esp+2Ch+Size]
		push	edx
		push	edi
		push	ecx
		call	sub_10010EA0
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_10001F4E
		call	PORT_GetError_Util
		mov	edx, [esp+1Ch+arg_0]
		mov	[edx+18h], eax
		jmp	loc_10002014
; ---------------------------------------------------------------------------

loc_10001F2A:				; CODE XREF: sub_10001E80+6Bj
		push	ebx
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esp+1Ch+Src], eax
		test	eax, eax
		jnz	short loc_10001EF5
		mov	eax, [esp+1Ch+arg_0]
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax+18h], 0FFFFE013h
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10001F4E:				; CODE XREF: sub_10001E80+97j
		mov	ebx, [esp+1Ch+arg_0]
		mov	ebp, edi
		mov	edi, [esp+1Ch+Size]
		mov	[esp+1Ch+arg_4], ebp
		jmp	short loc_10001F62
; ---------------------------------------------------------------------------

loc_10001F5E:				; CODE XREF: sub_10001E80+43j
					; sub_10001E80+4Cj
		mov	ebp, [esp+1Ch+arg_4]

loc_10001F62:				; CODE XREF: sub_10001E80+DCj
		test	edi, edi
		jz	loc_10002014
		mov	eax, [esi+3Ch]
		test	eax, eax
		jz	short loc_10001F83
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_10001F83
		push	edi
		push	ebp
		push	eax
		call	NSS_CMSDigestContext_Update
		add	esp, 0Ch

loc_10001F83:				; CODE XREF: sub_10001E80+EFj
					; sub_10001E80+F6j
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jz	short loc_10001F97
		mov	ecx, [ebx+20h]
		push	edi
		push	ebp
		push	ecx
		call	eax
		add	esp, 0Ch
		jmp	short loc_10002014
; ---------------------------------------------------------------------------

loc_10001F97:				; CODE XREF: sub_10001E80+108j
		push	esi
		call	NSS_CMSContentInfo_GetContentTypeTag
		add	esp, 4
		cmp	eax, 19h
		jnz	short loc_10002014
		mov	esi, [esi+0Ch]
		mov	eax, [esi+8]
		mov	[esp+1Ch+var_4], eax
		add	eax, edi
		cmp	eax, [esi+0Ch]
		jbe	short loc_10001FFF
		mov	edx, [esp+1Ch+arg_0]
		lea	ebp, [eax+eax]
		mov	eax, [edx+4]
		mov	ecx, [eax+44h]
		push	ebp
		push	ecx
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_10001FE0
		mov	edx, [esp+1Ch+arg_0]
		mov	dword ptr [edx+18h], 0FFFFE013h
		jmp	short loc_10002014
; ---------------------------------------------------------------------------

loc_10001FE0:				; CODE XREF: sub_10001E80+151j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_10001FF5
		push	eax		; Size
		mov	eax, [esi+4]
		push	eax		; Src
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10001FF5:				; CODE XREF: sub_10001E80+165j
		mov	[esi+0Ch], ebp
		mov	ebp, [esp+1Ch+arg_4]
		mov	[esi+4], ebx

loc_10001FFF:				; CODE XREF: sub_10001E80+134j
		mov	ecx, [esi+4]
		add	ecx, [esp+1Ch+var_4]
		push	edi		; Size
		push	ebp		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch
		add	[esi+8], edi

loc_10002014:				; CODE XREF: sub_10001E80+A5j
					; sub_10001E80+E4j ...
		mov	eax, [esp+1Ch+Src]
		test	eax, eax
		jz	short loc_10002025
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_10002025:				; CODE XREF: sub_10001E80+6Fj
					; sub_10001E80+19Aj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10001E80	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10002030:				; DATA XREF: sub_10002450+74o
					; sub_10002450+155o
		mov	eax, [esp+0Ch]
		test	eax, eax
		jz	short locret_1000205A
		cmp	dword ptr [esp+14h], 2
		mov	ecx, [esp+4]
		mov	dword ptr [ecx+14h], 1
		jnz	short locret_1000205A
		mov	edx, [esp+8]
		push	0
		push	edx
		push	ecx
		call	sub_10001E80
		add	esp, 0Ch

locret_1000205A:			; CODE XREF: .text:10002036j
					; .text:10002048j
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. NSS_CMSDecoder_Update

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDecoder_Update
NSS_CMSDecoder_Update proc near		; CODE XREF: sub_10002350+2Ep
					; NSS_CMSMessage_CreateFromDER+3Fp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, [esi]
		xor	eax, eax
		test	ecx, ecx
		jz	short loc_100020B5
		cmp	[esi+18h], eax
		jnz	short loc_100020B5
		cmp	dword ptr [esi+8], 1Ah
		push	edi
		mov	edi, [esp+8+arg_4]
		jnz	short loc_100020A3
		cmp	dword ptr [esi+24h], 1
		jnz	short loc_100020A3
		cmp	byte ptr [edi],	2
		jnz	short loc_100020A3
		push	2
		push	offset dword_10013B84
		push	ecx
		call	SEC_ASN1DecoderUpdate_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100020B4
		mov	dword ptr [esi+28h], 1

loc_100020A3:				; CODE XREF: NSS_CMSDecoder_Update+1Bj
					; NSS_CMSDecoder_Update+21j ...
		mov	eax, [esp+8+arg_8]
		mov	ecx, [esi]
		push	eax
		push	edi
		push	ecx
		call	SEC_ASN1DecoderUpdate_Util
		add	esp, 0Ch

loc_100020B4:				; CODE XREF: NSS_CMSDecoder_Update+3Aj
		pop	edi

loc_100020B5:				; CODE XREF: NSS_CMSDecoder_Update+Bj
					; NSS_CMSDecoder_Update+10j
		mov	dword ptr [esi+24h], 0
		test	eax, eax
		jz	short loc_100020D3
		call	PORT_GetError_Util
		mov	[esi+18h], eax
		test	eax, eax
		jnz	short loc_100020D3
		mov	dword ptr [esi+18h], 0FFFFFFFFh

loc_100020D3:				; CODE XREF: NSS_CMSDecoder_Update+5Ej
					; NSS_CMSDecoder_Update+6Aj
		cmp	dword ptr [esi+18h], 0
		jnz	short loc_100020DD
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100020DD:				; CODE XREF: NSS_CMSDecoder_Update+77j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100020F2
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [esi], 0

loc_100020F2:				; CODE XREF: NSS_CMSDecoder_Update+81j
		mov	edx, [esi+18h]
		push	edx
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
NSS_CMSDecoder_Update endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. NSS_CMSDecoder_Cancel

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDecoder_Cancel
NSS_CMSDecoder_Cancel proc near		; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10002124
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4

loc_10002124:				; CODE XREF: NSS_CMSDecoder_Cancel+9j
		mov	eax, [esi+4]
		push	eax
		call	NSS_CMSMessage_Destroy
		push	esi
		call	PORT_Free_Util
		add	esp, 8
		pop	esi
		retn
NSS_CMSDecoder_Cancel endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. NSS_CMSDecoder_Finish

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDecoder_Finish
NSS_CMSDecoder_Finish proc near		; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		push	edi
		mov	edi, [esi+4]
		test	eax, eax
		jz	short loc_10002167
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_10002167
		mov	ecx, esi
		call	sub_10001DF0
		test	eax, eax
		jz	short loc_10002172

loc_10002167:				; CODE XREF: NSS_CMSDecoder_Finish+Dj
					; NSS_CMSDecoder_Finish+1Aj
		push	edi
		call	NSS_CMSMessage_Destroy
		add	esp, 4
		xor	edi, edi

loc_10002172:				; CODE XREF: NSS_CMSDecoder_Finish+25j
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
NSS_CMSDecoder_Finish endp


; =============== S U B	R O U T	I N E =======================================


sub_10002180	proc near		; CODE XREF: sub_10002450+165p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		mov	eax, [edi+4]
		sub	esp, 0Ch
		push	ebp
		mov	ebp, [eax+44h]
		mov	eax, [edi+8]
		lea	ecx, [eax-1Ah]	; switch 5 cases
		cmp	ecx, 4
		ja	short loc_100021D4 ; jumptable 10002195	default	case
		jmp	ds:off_10002338[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000219C:				; CODE XREF: sub_10002180+15j
					; DATA XREF: .text:off_10002338o
		mov	ecx, [edi+0Ch]	; jumptable 10002195 case 26
		push	ecx
		call	sub_10004DA0
		add	esp, 4
		jmp	short loc_100021E1
; ---------------------------------------------------------------------------

loc_100021AA:				; CODE XREF: sub_10002180+15j
					; DATA XREF: .text:off_10002338o
		mov	edx, [edi+0Ch]	; jumptable 10002195 case 29
		push	edx
		call	sub_100028D0
		add	esp, 4
		jmp	short loc_100021E1
; ---------------------------------------------------------------------------

loc_100021B8:				; CODE XREF: sub_10002180+15j
					; DATA XREF: .text:off_10002338o
		mov	eax, [edi+0Ch]	; jumptable 10002195 case 27
		push	eax
		call	sub_10003C80
		add	esp, 4
		jmp	short loc_100021E1
; ---------------------------------------------------------------------------

loc_100021C6:				; CODE XREF: sub_10002180+15j
					; DATA XREF: .text:off_10002338o
		mov	ecx, [edi+0Ch]	; jumptable 10002195 case 30
		push	ecx
		call	sub_10002EA0
		add	esp, 4
		jmp	short loc_100021E1
; ---------------------------------------------------------------------------

loc_100021D4:				; CODE XREF: sub_10002180+13j
					; sub_10002180+15j
					; DATA XREF: ...
		mov	edx, [edi+0Ch]	; jumptable 10002195 default case
		push	edx
		push	eax
		call	sub_10006E90
		add	esp, 8

loc_100021E1:				; CODE XREF: sub_10002180+28j
					; sub_10002180+36j ...
		test	eax, eax
		jz	short loc_100021ED
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100021ED:				; CODE XREF: sub_10002180+63j
		mov	eax, [edi+8]
		mov	ecx, [edi+0Ch]
		push	ebx
		push	esi
		push	eax
		push	ecx
		call	sub_10007440
		mov	esi, eax
		push	esi
		mov	[esp+24h+var_8], esi
		call	NSS_CMSContentInfo_GetContentTypeTag
		mov	ebx, eax
		push	ebx
		call	sub_10006D40
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000224C
		push	10h
		push	ebp
		call	PORT_ArenaAlloc_Util
		xor	ecx, ecx
		add	esp, 8
		cmp	eax, ecx
		jnz	short loc_1000222C
		xor	eax, eax
		jmp	short loc_10002235
; ---------------------------------------------------------------------------

loc_1000222C:				; CODE XREF: sub_10002180+A6j
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx

loc_10002235:				; CODE XREF: sub_10002180+AAj
		mov	[esi+0Ch], eax
		cmp	eax, ecx
		jz	loc_100022CF
		pop	esi
		pop	ebx
		mov	[edi+10h], ecx
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000224C:				; CODE XREF: sub_10002180+95j
		push	ebx
		call	sub_100073A0
		add	esp, 4
		mov	[esp+18h+var_4], eax
		test	eax, eax
		jz	short loc_100022CF
		push	2Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_100022CF
		push	ebp
		call	PORT_ArenaMark_Util
		push	ebx
		mov	[esp+20h+var_C], eax
		call	sub_100073F0
		push	eax
		push	ebp
		call	PORT_ArenaZAlloc_Util
		add	esp, 10h
		mov	[esi+0Ch], eax
		test	eax, eax
		jz	short loc_100022AD
		mov	edx, [esp+18h+var_8]
		mov	[edx+0Ch], eax
		mov	eax, [esp+18h+var_4]
		mov	ecx, [esi+0Ch]
		push	eax
		push	ecx
		push	ebp
		call	SEC_ASN1DecoderStart_Util
		add	esp, 0Ch
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_100022D9

loc_100022AD:				; CODE XREF: sub_10002180+10Cj
		mov	eax, [esp+18h+var_C]
		test	eax, eax
		jz	short loc_100022BF
		push	eax
		push	ebp
		call	PORT_ArenaRelease_Util
		add	esp, 8

loc_100022BF:				; CODE XREF: sub_10002180+133j
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		mov	dword ptr [edi+10h], 0

loc_100022CF:				; CODE XREF: sub_10002180+BAj
					; sub_10002180+DBj ...
		pop	esi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100022D9:				; CODE XREF: sub_10002180+12Bj
		push	esi
		push	offset sub_10002450
		push	eax
		call	SEC_ASN1DecoderSetNotifyProc_Util
		mov	[edi+10h], esi
		mov	[esi+8], ebx
		mov	edx, [edi+4]
		mov	[esi+4], edx
		mov	eax, [edi+1Ch]
		mov	[esi+1Ch], eax
		mov	ecx, [edi+20h]
		xor	eax, eax
		add	esp, 0Ch
		mov	[esi+20h], ecx
		mov	[esi+24h], eax
		mov	[esi+28h], eax
		cmp	ebx, 1Ah
		jnz	short loc_10002314
		mov	dword ptr [esi+24h], 1

loc_10002314:				; CODE XREF: sub_10002180+18Bj
		mov	edx, [esp+18h+var_C]
		push	edx
		push	ebp
		mov	dword ptr [edi+1Ch], offset NSS_CMSDecoder_Update
		mov	[edi+20h], esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
sub_10002180	endp

; ---------------------------------------------------------------------------
		align 4
off_10002338	dd offset loc_1000219C	; DATA XREF: sub_10002180+15r
		dd offset loc_100021B8	; jump table for switch	statement
		dd offset loc_100021D4
		dd offset loc_100021AA
		dd offset loc_100021C6
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002350	proc near		; CODE XREF: sub_10002450+18Fp
		push	ebx
		push	edi
		push	1
		push	0
		push	esi
		xor	eax, eax
		or	ebx, 0FFFFFFFFh
		call	sub_10001E80
		mov	edi, [esi+10h]
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_100023C4
		cmp	dword ptr [edi], 0
		jz	short loc_100023B1
		cmp	dword ptr [edi+28h], 0
		jz	short loc_1000238D
		push	2
		push	offset dword_10013B80
		push	edi
		call	NSS_CMSDecoder_Update
		add	esp, 0Ch
		mov	dword ptr [edi+28h], 0

loc_1000238D:				; CODE XREF: sub_10002350+24j
		mov	eax, [edi]
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		test	eax, eax
		jz	short loc_100023A4
		or	ebx, 0FFFFFFFFh
		pop	edi
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100023A4:				; CODE XREF: sub_10002350+4Aj
		mov	ecx, edi
		call	sub_10001DF0
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_10002429 ; jumptable 100023CF	case 25

loc_100023B1:				; CODE XREF: sub_10002350+1Ej
		mov	ecx, [esi+10h]
		push	ecx
		call	PORT_Free_Util
		add	esp, 4
		mov	dword ptr [esi+10h], 0

loc_100023C4:				; CODE XREF: sub_10002350+19j
		mov	eax, [esi+8]
		lea	ecx, [eax-19h]	; switch 6 cases
		cmp	ecx, 5
		ja	short loc_1000241A ; jumptable 100023CF	default	case
		jmp	ds:off_10002430[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100023D6:				; CODE XREF: sub_10002350+7Fj
					; DATA XREF: .text:off_10002430o
		mov	edx, [esi+0Ch]	; jumptable 100023CF case 26
		push	edx
		call	sub_10004E60
		add	esp, 4
		pop	edi
		mov	ebx, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100023E7:				; CODE XREF: sub_10002350+7Fj
					; DATA XREF: .text:off_10002430o
		mov	eax, [esi+0Ch]	; jumptable 100023CF case 27
		push	eax
		call	sub_10003DB0
		add	esp, 4
		pop	edi
		mov	ebx, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100023F8:				; CODE XREF: sub_10002350+7Fj
					; DATA XREF: .text:off_10002430o
		mov	ecx, [esi+0Ch]	; jumptable 100023CF case 29
		push	ecx
		call	sub_10002920
		add	esp, 4
		pop	edi
		mov	ebx, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002409:				; CODE XREF: sub_10002350+7Fj
					; DATA XREF: .text:off_10002430o
		mov	edx, [esi+0Ch]	; jumptable 100023CF case 30
		push	edx
		call	sub_10002F20
		add	esp, 4
		pop	edi
		mov	ebx, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000241A:				; CODE XREF: sub_10002350+7Dj
					; sub_10002350+7Fj
					; DATA XREF: ...
		mov	ecx, [esi+0Ch]	; jumptable 100023CF default case
		push	ecx
		push	eax
		call	sub_10006ED0
		add	esp, 8
		mov	ebx, eax

loc_10002429:				; CODE XREF: sub_10002350+5Fj
					; sub_10002350+7Fj
					; DATA XREF: ...
		pop	edi		; jumptable 100023CF case 25
		mov	eax, ebx
		pop	ebx
		retn
sub_10002350	endp

; ---------------------------------------------------------------------------
		align 10h
off_10002430	dd offset loc_10002429	; DATA XREF: sub_10002350+7Fr
		dd offset loc_100023D6	; jump table for switch	statement
		dd offset loc_100023E7
		dd offset loc_1000241A
		dd offset loc_100023F8
		dd offset loc_10002409
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002450	proc near		; DATA XREF: sub_10002180+15Ao
					; NSS_CMSDecoder_Start:loc_1000269Fo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	ebx, [esi+4]
		xor	eax, eax
		push	edi
		mov	edi, [esp+10h+arg_4]
		test	edi, edi
		setz	al
		mov	ebp, eax
		mov	eax, [esi+8]
		mov	[esp+10h+arg_4], ebp
		test	eax, eax
		jnz	short loc_1000249C
		test	ebp, ebp
		jz	loc_10002607
		cmp	[esp+10h+arg_8], ebx
		jnz	loc_10002607
		push	ebx
		call	NSS_CMSContentInfo_GetContentTypeTag
		add	esp, 4
		mov	[esi+8], eax
		mov	ecx, [ebx+0Ch]
		pop	edi
		mov	[esi+0Ch], ecx
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000249C:				; CODE XREF: sub_10002450+21j
		push	eax
		call	sub_10006D40
		add	esp, 4
		test	eax, eax
		jz	short loc_100024FA
		mov	eax, [esp+10h+arg_8]
		test	edi, edi
		jz	short loc_100024D7
		lea	edx, [ebx+0Ch]
		cmp	eax, edx
		jnz	short loc_100024D7
		mov	ecx, [esi]
		xor	eax, eax
		cmp	[esi+1Ch], eax
		setnz	al
		push	eax
		push	esi
		push	offset loc_10002030
		push	ecx
		call	SEC_ASN1DecoderSetFilterProc_Util
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100024D7:				; CODE XREF: sub_10002450+5Fj
					; sub_10002450+66j
		test	ebp, ebp
		jz	loc_10002607
		add	ebx, 0Ch
		cmp	eax, ebx
		jnz	loc_10002607
		mov	edx, [esi]
		push	edx
		call	SEC_ASN1DecoderClearFilterProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100024FA:				; CODE XREF: sub_10002450+57j
		mov	eax, [esi+8]
		push	eax
		call	sub_10006CB0
		add	esp, 4
		test	eax, eax
		jz	loc_10002600
		mov	ebp, [esp+10h+arg_8]
		test	edi, edi
		jz	short loc_10002521
		lea	ecx, [ebx+0Ch]
		cmp	ebp, ecx
		jz	loc_10002607

loc_10002521:				; CODE XREF: sub_10002450+C4j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000252D
		mov	edx, [ebx+0Ch]
		mov	[esi+0Ch], edx

loc_1000252D:				; CODE XREF: sub_10002450+D5j
		mov	eax, [esi+8]
		mov	ecx, [esi+0Ch]
		push	eax
		push	ecx
		call	sub_10007440
		add	esp, 8
		mov	ebx, eax
		test	edi, edi
		jz	loc_100025D1
		cmp	ebp, ebx
		jnz	short loc_10002592
		mov	eax, [esi+8]
		add	eax, 0FFFFFFE6h	; switch 5 cases
		cmp	eax, 4
		ja	short loc_10002589 ; jumptable 10002556	default	case
		jmp	ds:off_1000260C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000255D:				; CODE XREF: sub_10002450+106j
					; DATA XREF: .text:off_1000260Co
		mov	edx, [esi+0Ch]	; jumptable 10002556 case 26
		mov	eax, [esi+4]
		mov	[edx+60h], eax
		jmp	short loc_10002592
; ---------------------------------------------------------------------------

loc_10002568:				; CODE XREF: sub_10002450+106j
					; DATA XREF: .text:off_1000260Co
		mov	ecx, [esi+0Ch]	; jumptable 10002556 case 29
		mov	edx, [esi+4]
		mov	[ecx+74h], edx
		jmp	short loc_10002592
; ---------------------------------------------------------------------------

loc_10002573:				; CODE XREF: sub_10002450+106j
					; DATA XREF: .text:off_1000260Co
		mov	eax, [esi+0Ch]	; jumptable 10002556 case 27
		mov	ecx, [esi+4]
		mov	[eax+5Ch], ecx
		jmp	short loc_10002592
; ---------------------------------------------------------------------------

loc_1000257E:				; CODE XREF: sub_10002450+106j
					; DATA XREF: .text:off_1000260Co
		mov	edx, [esi+0Ch]	; jumptable 10002556 case 30
		mov	eax, [esi+4]
		mov	[edx+54h], eax
		jmp	short loc_10002592
; ---------------------------------------------------------------------------

loc_10002589:				; CODE XREF: sub_10002450+104j
					; sub_10002450+106j
					; DATA XREF: ...
		mov	ecx, [esi+0Ch]	; jumptable 10002556 default case
		mov	edx, [esi+4]
		mov	[ecx+44h], edx

loc_10002592:				; CODE XREF: sub_10002450+F9j
					; sub_10002450+116j ...
		lea	eax, [ebx+2Ch]
		cmp	ebp, eax
		jnz	short loc_100025D1
		mov	edx, [esi]
		xor	ecx, ecx
		cmp	[esi+1Ch], ecx
		setnz	cl
		push	ecx
		push	esi
		push	offset loc_10002030
		push	edx
		call	SEC_ASN1DecoderSetFilterProc_Util
		add	esp, 10h
		mov	edi, esi
		call	sub_10002180
		test	eax, eax
		jz	short loc_100025D1
		mov	eax, [esi]
		push	eax
		call	SEC_ASN1DecoderClearFilterProc_Util
		add	esp, 4
		call	PORT_GetError_Util
		mov	[esi+18h], eax

loc_100025D1:				; CODE XREF: sub_10002450+F1j
					; sub_10002450+147j ...
		cmp	[esp+10h+arg_4], 0
		jz	short loc_10002607
		add	ebx, 2Ch
		cmp	ebp, ebx
		jnz	short loc_10002607
		call	sub_10002350
		test	eax, eax
		jz	short loc_100025F0
		call	PORT_GetError_Util
		mov	[esi+18h], eax

loc_100025F0:				; CODE XREF: sub_10002450+196j
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1DecoderClearFilterProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002600:				; CODE XREF: sub_10002450+B8j
		mov	dword ptr [esi+18h], 0FFFFE086h

loc_10002607:				; CODE XREF: sub_10002450+25j
					; sub_10002450+2Fj ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10002450	endp

; ---------------------------------------------------------------------------
off_1000260C	dd offset loc_1000255D	; DATA XREF: sub_10002450+106r
		dd offset loc_10002573	; jump table for switch	statement
		dd offset loc_10002589
		dd offset loc_10002568
		dd offset loc_1000257E
; Exported entry  23. NSS_CMSDecoder_Start

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDecoder_Start
NSS_CMSDecoder_Start proc near		; CODE XREF: NSS_CMSMessage_CreateFromDER+21p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, [esp+arg_0]
		push	edi
		push	eax
		call	NSS_CMSMessage_Create
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10002636
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10002636:				; CODE XREF: NSS_CMSDecoder_Start+12j
		mov	ecx, [esp+4+arg_18]
		mov	edx, [esp+4+arg_14]
		mov	eax, [esp+4+arg_10]
		push	esi
		push	0
		push	0
		push	ecx
		mov	ecx, [esp+14h+arg_C]
		push	edx
		push	eax
		push	ecx
		push	edi
		call	sub_10003E80
		push	2Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 20h
		test	esi, esi
		jnz	short loc_10002673
		push	edi
		call	NSS_CMSMessage_Destroy
		add	esp, 4
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10002673:				; CODE XREF: NSS_CMSDecoder_Start+43j
		mov	edx, [edi+44h]
		push	offset dword_100133C8
		push	edi
		push	edx
		call	SEC_ASN1DecoderStart_Util
		add	esp, 0Ch
		mov	[esi], eax
		push	esi
		test	eax, eax
		jnz	short loc_1000269F
		call	PORT_Free_Util
		push	edi
		call	NSS_CMSMessage_Destroy
		add	esp, 8
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000269F:				; CODE XREF: NSS_CMSDecoder_Start+6Aj
		push	offset sub_10002450
		push	eax
		call	SEC_ASN1DecoderSetNotifyProc_Util
		mov	eax, [esp+14h+arg_4]
		mov	ecx, [esp+14h+arg_8]
		add	esp, 0Ch
		mov	[esi+1Ch], eax
		mov	[esi+4], edi
		mov	dword ptr [esi+8], 0
		mov	[esi+20h], ecx
		mov	dword ptr [esi+24h], 0
		mov	dword ptr [esi+28h], 0
		mov	eax, esi
		pop	esi
		pop	edi
		retn
NSS_CMSDecoder_Start endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  49. NSS_CMSMessage_CreateFromDER

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSMessage_CreateFromDER
NSS_CMSMessage_CreateFromDER proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, [esp+arg_18]
		mov	ecx, [esp+arg_14]
		mov	edx, [esp+arg_10]
		push	esi
		push	eax
		mov	eax, [esp+8+arg_C]
		push	ecx
		mov	ecx, [esp+0Ch+arg_8]
		push	edx
		mov	edx, [esp+10h+arg_4]
		push	eax
		push	ecx
		push	edx
		push	0
		call	NSS_CMSDecoder_Start
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		jnz	short loc_10002711
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002711:				; CODE XREF: NSS_CMSMessage_CreateFromDER+2Dj
		mov	eax, [esp+4+arg_0]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	edi
		push	ecx
		push	edx
		push	esi
		call	NSS_CMSDecoder_Update
		mov	eax, [esi]
		mov	edi, [esi+4]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10002748
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_10002748
		mov	ecx, esi
		call	sub_10001DF0
		test	eax, eax
		jz	short loc_10002753

loc_10002748:				; CODE XREF: NSS_CMSMessage_CreateFromDER+4Ej
					; NSS_CMSMessage_CreateFromDER+5Bj
		push	edi
		call	NSS_CMSMessage_Destroy
		add	esp, 4
		xor	edi, edi

loc_10002753:				; CODE XREF: NSS_CMSMessage_CreateFromDER+66j
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
NSS_CMSMessage_CreateFromDER endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. NSS_CMSDigestedData_Create

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDigestedData_Create
NSS_CMSDigestedData_Create proc	near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [ebp+44h]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	84h
		push	esi
		mov	ebx, eax
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_100027B0
		mov	eax, [esp+10h+arg_4]
		push	eax
		lea	ecx, [edi+0Ch]
		push	ecx
		push	esi
		mov	[edi+74h], ebp
		call	SECOID_CopyAlgorithmID_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100027C1

loc_100027B0:				; CODE XREF: NSS_CMSDigestedData_Create+25j
		push	ebx
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100027C1:				; CODE XREF: NSS_CMSDigestedData_Create+3Ej
		push	ebx
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
NSS_CMSDigestedData_Create endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  32. NSS_CMSDigestedData_Destroy

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDigestedData_Destroy
NSS_CMSDigestedData_Destroy proc near	; CODE XREF: sub_10001950+5Ep
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 24h
		mov	[esp+arg_0], eax
		jmp	sub_10001950
NSS_CMSDigestedData_Destroy endp

; Exported entry  33. NSS_CMSDigestedData_GetContentInfo

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDigestedData_GetContentInfo
NSS_CMSDigestedData_GetContentInfo proc	near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 24h
		retn
NSS_CMSDigestedData_GetContentInfo endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002800	proc near		; CODE XREF: sub_100033F0+116p
					; NSS_CMSEncoder_Start+B6p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		lea	eax, [esi+24h]
		push	eax
		xor	edi, edi
		call	NSS_CMSContentInfo_GetContentTypeTag
		push	eax
		call	sub_10006D40
		add	esp, 8
		test	eax, eax
		jnz	short loc_10002823
		mov	edi, 2

loc_10002823:				; CODE XREF: sub_10002800+1Cj
		mov	ecx, [esi+74h]
		mov	edx, [ecx+44h]
		push	edi
		push	esi
		push	edx
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		dec	eax
		pop	esi
		retn
sub_10002800	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002840	proc near		; CODE XREF: sub_100033F0+24p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		lea	eax, [esi+24h]
		push	eax
		call	sub_100015C0
		add	esp, 4
		test	eax, eax
		jz	short loc_1000285A

loc_10002855:				; CODE XREF: sub_10002840+3Fj
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000285A:				; CODE XREF: sub_10002840+13j
		cmp	dword ptr [esi+14h], 0
		jz	short loc_10002881
		cmp	dword ptr [esi+70h], 0
		jnz	short loc_10002881
		lea	ecx, [esi+0Ch]
		push	ecx
		call	NSS_CMSDigestContext_StartSingle
		mov	edx, [esi+60h]
		mov	[edx+4], eax
		mov	eax, [esi+60h]
		add	esp, 4
		cmp	dword ptr [eax+4], 0
		jz	short loc_10002855

loc_10002881:				; CODE XREF: sub_10002840+1Ej
					; sub_10002840+24j
		xor	eax, eax
		pop	esi
		retn
sub_10002840	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002890	proc near		; CODE XREF: sub_10002FD0+30p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, [esi+60h]
		xor	eax, eax
		test	ecx, ecx
		jz	short loc_100028C3
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short loc_100028C3
		mov	edx, [esi+74h]
		lea	eax, [esi+68h]
		push	eax
		mov	eax, [edx+44h]
		push	eax
		push	ecx
		call	NSS_CMSDigestContext_FinishSingle
		mov	ecx, [esi+60h]
		add	esp, 0Ch
		mov	dword ptr [ecx+4], 0

loc_100028C3:				; CODE XREF: sub_10002890+Cj
					; sub_10002890+13j
		pop	esi
		retn
sub_10002890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100028D0	proc near		; CODE XREF: sub_10002180+2Ep

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_100028E0

loc_100028DB:				; CODE XREF: sub_100028D0+1Ej
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100028E0:				; CODE XREF: sub_100028D0+9j
		lea	eax, [esi+24h]
		push	eax
		call	sub_100015C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100028DB
		lea	ecx, [esi+0Ch]
		push	ecx
		call	NSS_CMSDigestContext_StartSingle
		mov	edx, [esi+60h]
		mov	[edx+4], eax
		mov	eax, [esi+60h]
		mov	eax, [eax+4]
		add	esp, 4
		neg	eax
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	esi
		retn
sub_100028D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002920	proc near		; CODE XREF: sub_10002350+ACp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, [esi+60h]
		xor	eax, eax
		test	ecx, ecx
		jz	short loc_10002953
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short loc_10002953
		mov	edx, [esi+74h]
		lea	eax, [esi+78h]
		push	eax
		mov	eax, [edx+44h]
		push	eax
		push	ecx
		call	NSS_CMSDigestContext_FinishSingle
		mov	ecx, [esi+60h]
		add	esp, 0Ch
		mov	dword ptr [ecx+4], 0

loc_10002953:				; CODE XREF: sub_10002920+Cj
					; sub_10002920+13j
		pop	esi
		retn
sub_10002920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002960	proc near		; CODE XREF: sub_10001DF0+2Fp
					; sub_10001DF0+41p ...
		xor	eax, eax
		retn
sub_10002960	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  28. NSS_CMSDigestContext_StartMultiple

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDigestContext_StartMultiple
NSS_CMSDigestContext_StartMultiple proc	near
					; CODE XREF: NSS_CMSDigestContext_StartSingle+17p
					; sub_10004D30+4Dp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		mov	eax, [esp+4+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		cmp	eax, edi
		jnz	short loc_10002983
		mov	[esp+0Ch+var_4], edi
		jmp	short loc_10002990
; ---------------------------------------------------------------------------

loc_10002983:				; CODE XREF: NSS_CMSDigestContext_StartMultiple+Bj
		push	eax
		call	sub_100010A0
		add	esp, 4
		mov	[esp+0Ch+var_4], eax

loc_10002990:				; CODE XREF: NSS_CMSDigestContext_StartMultiple+11j
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jnz	short loc_100029A9
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100029A9:				; CODE XREF: NSS_CMSDigestContext_StartMultiple+31j
		push	ebx
		push	ebp
		push	10h
		push	esi
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jz	short loc_100029E0
		mov	ebp, [esp+14h+var_4]
		lea	eax, ds:0[ebp*8]
		push	eax
		push	esi
		mov	[ebx], edi
		mov	[ebx+4], esi
		mov	[ebx+8], ebp
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[ebx+0Ch], eax
		cmp	eax, edi
		jnz	short loc_100029F2

loc_100029E0:				; CODE XREF: NSS_CMSDigestContext_StartMultiple+4Aj
		push	edi
		push	esi
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	ebp
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100029F2:				; CODE XREF: NSS_CMSDigestContext_StartMultiple+6Ej
		test	ebp, ebp
		jle	short loc_10002A34

loc_100029F6:				; CODE XREF: NSS_CMSDigestContext_StartMultiple+C2j
		mov	ecx, [esp+14h+arg_0]
		mov	edx, [ecx+edi*4]
		push	edx
		call	sub_10007380
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10002A2D
		mov	eax, [esi+4]
		call	eax
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_10002A2D
		mov	ecx, [esi+10h]
		push	ebp
		call	ecx
		mov	edx, [ebx+0Ch]
		mov	[edx+edi*8], esi
		mov	eax, [ebx+0Ch]
		add	esp, 4
		mov	[eax+edi*8+4], ebp

loc_10002A2D:				; CODE XREF: NSS_CMSDigestContext_StartMultiple+9Aj
					; NSS_CMSDigestContext_StartMultiple+A5j
		inc	edi
		cmp	edi, [esp+14h+var_4]
		jl	short loc_100029F6

loc_10002A34:				; CODE XREF: NSS_CMSDigestContext_StartMultiple+84j
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		pop	ecx
		retn
NSS_CMSDigestContext_StartMultiple endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  29. NSS_CMSDigestContext_StartSingle

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDigestContext_StartSingle
NSS_CMSDigestContext_StartSingle proc near ; CODE XREF:	sub_10002840+2Ap
					; sub_100028D0+24p
					; DATA XREF: ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 8
		mov	eax, [esp+8+arg_0]
		lea	ecx, [esp+8+var_8]
		push	ecx
		mov	[esp+0Ch+var_4], 0
		mov	[esp+0Ch+var_8], eax
		call	NSS_CMSDigestContext_StartMultiple
		add	esp, 0Ch
		retn
NSS_CMSDigestContext_StartSingle endp

; Exported entry  30. NSS_CMSDigestContext_Update

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDigestContext_Update
NSS_CMSDigestContext_Update proc near	; CODE XREF: sub_10001E80+FBp
					; sub_10003050+52p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		mov	esi, [ebx+0Ch]
		push	edi
		xor	edi, edi
		mov	dword ptr [ebx], 1
		cmp	[ebx+8], edi
		jle	short loc_10002AA2
		push	ebp
		mov	ebp, [esp+10h+arg_8]
		lea	esp, [esp+0]

loc_10002A80:				; CODE XREF: NSS_CMSDigestContext_Update+3Fj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_10002A98
		mov	edx, [esp+10h+arg_4]
		mov	ecx, [esi]
		push	ebp
		push	edx
		push	eax
		mov	eax, [ecx+14h]
		call	eax
		add	esp, 0Ch

loc_10002A98:				; CODE XREF: NSS_CMSDigestContext_Update+25j
		inc	edi
		add	esi, 8
		cmp	edi, [ebx+8]
		jl	short loc_10002A80
		pop	ebp

loc_10002AA2:				; CODE XREF: NSS_CMSDigestContext_Update+15j
		pop	edi
		pop	esi
		pop	ebx
		retn
NSS_CMSDigestContext_Update endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. NSS_CMSDigestContext_Cancel

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDigestContext_Cancel
NSS_CMSDigestContext_Cancel proc near	; CODE XREF: sub_10001950+85p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		mov	esi, [ebx+0Ch]
		push	edi
		xor	edi, edi
		cmp	[ebx+8], edi
		jle	short loc_10002ADE

loc_10002AC1:				; CODE XREF: NSS_CMSDigestContext_Cancel+2Cj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_10002AD5
		mov	ecx, [esi]
		mov	edx, [ecx+0Ch]
		push	1
		push	eax
		call	edx
		add	esp, 8

loc_10002AD5:				; CODE XREF: NSS_CMSDigestContext_Cancel+16j
		inc	edi
		add	esi, 8
		cmp	edi, [ebx+8]
		jl	short loc_10002AC1

loc_10002ADE:				; CODE XREF: NSS_CMSDigestContext_Cancel+Fj
		mov	eax, [ebx+4]
		push	0
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		retn
NSS_CMSDigestContext_Cancel endp

; Exported entry  26. NSS_CMSDigestContext_FinishMultiple

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDigestContext_FinishMultiple
NSS_CMSDigestContext_FinishMultiple proc near
					; CODE XREF: NSS_CMSDigestContext_FinishSingle+24p
					; sub_10004E60+37p ...

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 60h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+60h+var_4], eax
		mov	eax, [esp+60h+arg_8]
		push	ebx
		mov	ebx, [esp+64h+arg_0]
		push	ebp
		mov	ebp, [esp+68h+arg_4]
		push	esi
		xor	esi, esi
		push	edi
		mov	[esp+70h+var_5C], ebx
		mov	[esp+70h+var_54], eax
		mov	[esp+70h+var_60], esi
		cmp	eax, esi
		jz	loc_10002BF0
		cmp	[ebx], esi
		jz	loc_10002BF0
		push	ebp
		call	PORT_ArenaMark_Util
		mov	[esp+74h+var_58], eax
		mov	eax, [ebx+8]
		lea	ecx, ds:4[eax*4]
		push	ecx
		push	ebp
		call	PORT_ArenaAlloc_Util
		mov	ebx, [ebx+0Ch]
		add	esp, 0Ch
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		neg	esi
		xor	edi, edi
		dec	esi
		mov	[esp+70h+var_60], eax
		jnz	short loc_10002BC6
		mov	edi, edi

loc_10002B60:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+D4j
		mov	edx, [esp+70h+var_5C]
		cmp	edi, [edx+8]
		jge	short loc_10002BC6
		mov	edx, [ebx+4]
		test	edx, edx
		jnz	short loc_10002B75
		mov	[eax+edi*4], edx
		jmp	short loc_10002BBA
; ---------------------------------------------------------------------------

loc_10002B75:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+7Ej
		lea	eax, [esp+70h+var_44]
		mov	[esp+70h+var_4C], eax
		mov	eax, [ebx]
		mov	[esp+70h+var_50], 0
		mov	ecx, [eax]
		push	ecx
		mov	[esp+74h+var_48], ecx
		lea	ecx, [esp+74h+var_48]
		push	ecx
		lea	ecx, [esp+78h+var_44]
		push	ecx
		push	edx
		mov	edx, [eax+18h]
		call	edx
		lea	eax, [esp+80h+var_50]
		push	eax
		push	ebp
		call	SECITEM_ArenaDupItem_Util
		mov	ecx, [esp+88h+var_60]
		add	esp, 18h
		mov	[ecx+edi*4], eax
		test	eax, eax
		jnz	short loc_10002BBA
		or	esi, 0FFFFFFFFh

loc_10002BBA:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+83j
					; NSS_CMSDigestContext_FinishMultiple+C5j
		mov	eax, [esp+70h+var_60]
		inc	edi
		add	ebx, 8
		test	esi, esi
		jz	short loc_10002B60

loc_10002BC6:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+6Cj
					; NSS_CMSDigestContext_FinishMultiple+77j
		mov	dword ptr [eax+edi*4], 0
		test	esi, esi
		jnz	short loc_10002BDE
		mov	edx, [esp+70h+var_58]
		push	edx
		push	ebp
		call	PORT_ArenaUnmark_Util
		jmp	short loc_10002BE9
; ---------------------------------------------------------------------------

loc_10002BDE:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+DFj
		mov	eax, [esp+70h+var_58]
		push	eax
		push	ebp
		call	PORT_ArenaRelease_Util

loc_10002BE9:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+ECj
		mov	ebx, [esp+78h+var_5C]
		add	esp, 8

loc_10002BF0:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+2Ej
					; NSS_CMSDigestContext_FinishMultiple+36j
		mov	edi, [ebx+0Ch]
		xor	ebp, ebp
		cmp	[ebx+8], ebp
		jle	short loc_10002C1D
		lea	ebx, [ebx+0]

loc_10002C00:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+12Bj
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_10002C14
		mov	ecx, [edi]
		mov	edx, [ecx+0Ch]
		push	1
		push	eax
		call	edx
		add	esp, 8

loc_10002C14:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+115j
		inc	ebp
		add	edi, 8
		cmp	ebp, [ebx+8]
		jl	short loc_10002C00

loc_10002C1D:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+108j
		mov	eax, [ebx+4]
		push	0
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		test	esi, esi
		jnz	short loc_10002C41
		mov	ecx, [esp+70h+var_54]
		test	ecx, ecx
		jz	short loc_10002C41
		mov	eax, [esp+70h+var_60]
		test	eax, eax
		jz	short loc_10002C41
		mov	[ecx], eax

loc_10002C41:				; CODE XREF: NSS_CMSDigestContext_FinishMultiple+13Dj
					; NSS_CMSDigestContext_FinishMultiple+145j ...
		mov	ecx, [esp+70h+var_4]
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
NSS_CMSDigestContext_FinishMultiple endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. NSS_CMSDigestContext_FinishSingle

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDigestContext_FinishSingle
NSS_CMSDigestContext_FinishSingle proc near ; CODE XREF: sub_10002890+21p
					; sub_10002920+21p
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		push	edi
		push	400h
		or	edi, 0FFFFFFFFh
		call	PORT_NewArena_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10002CB8
		mov	ecx, [esp+0Ch+arg_0]
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	esi
		push	ecx
		call	NSS_CMSDigestContext_FinishMultiple
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10002CAD
		mov	edx, [esp+0Ch+var_4]
		mov	eax, [edx]
		mov	ecx, [esp+0Ch+arg_8]
		mov	edx, [esp+0Ch+arg_4]
		push	eax
		push	ecx
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		mov	edi, eax

loc_10002CAD:				; CODE XREF: NSS_CMSDigestContext_FinishSingle+30j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		add	esp, 8

loc_10002CB8:				; CODE XREF: NSS_CMSDigestContext_FinishSingle+17j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ecx
		retn
NSS_CMSDigestContext_FinishSingle endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  38. NSS_CMSEncryptedData_Create

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEncryptedData_Create
NSS_CMSEncryptedData_Create proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		mov	esi, [ebx+44h]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	58h
		push	esi
		mov	[esp+1Ch+arg_0], eax
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_10002D47
		mov	[edi+54h], ebx
		mov	ebx, [esp+10h+arg_4]
		push	ebx
		call	SEC_PKCS5IsAlgorithmPBEAlgTag
		add	esp, 4
		test	eax, eax
		jnz	short loc_10002D13
		mov	eax, [esp+10h+arg_8]
		push	eax
		push	0
		push	ebx
		lea	ecx, [edi+0Ch]
		push	ecx
		push	esi
		call	NSS_CMSContentInfo_SetContentEncAlg
		add	esp, 14h
		mov	ebp, eax
		jmp	short loc_10002D43
; ---------------------------------------------------------------------------

loc_10002D13:				; CODE XREF: NSS_CMSEncryptedData_Create+38j
		push	0
		push	1
		push	ebx
		call	PK11_CreatePBEAlgorithmID
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_10002D47
		mov	edx, [esp+10h+arg_8]
		push	edx
		push	ebx
		lea	eax, [edi+0Ch]
		push	eax
		push	esi
		call	sub_100018B0
		push	1
		push	ebx
		mov	ebp, eax
		call	SECOID_DestroyAlgorithmID_Util
		add	esp, 18h

loc_10002D43:				; CODE XREF: NSS_CMSEncryptedData_Create+51j
		test	ebp, ebp
		jz	short loc_10002D5C

loc_10002D47:				; CODE XREF: NSS_CMSEncryptedData_Create+24j
					; NSS_CMSEncryptedData_Create+64j
		mov	ecx, [esp+10h+arg_0]
		push	ecx
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002D5C:				; CODE XREF: NSS_CMSEncryptedData_Create+85j
		mov	edx, [esp+10h+arg_0]
		push	edx
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
NSS_CMSEncryptedData_Create endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  39. NSS_CMSEncryptedData_Destroy

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEncryptedData_Destroy
NSS_CMSEncryptedData_Destroy proc near	; CODE XREF: sub_10001950+50p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 0Ch
		mov	[esp+arg_0], eax
		jmp	sub_10001950
NSS_CMSEncryptedData_Destroy endp

; Exported entry  40. NSS_CMSEncryptedData_GetContentInfo

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEncryptedData_GetContentInfo
NSS_CMSEncryptedData_GetContentInfo proc near ;	DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 0Ch
		retn
NSS_CMSEncryptedData_GetContentInfo endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002DA0	proc near		; CODE XREF: sub_100033F0+124p
					; NSS_CMSEncoder_Start+C4p

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	eax, [esi+50h]
		push	eax
		lea	ebx, [esi+0Ch]
		call	sub_10001080
		mov	ecx, [esi+54h]
		mov	edx, [ecx+44h]
		neg	eax
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		add	eax, 2
		push	eax
		push	esi
		push	edx
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10002DD7

loc_10002DD1:				; CODE XREF: sub_10002DA0+3Ej
					; sub_10002DA0+5Ej
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002DD7:				; CODE XREF: sub_10002DA0+2Fj
		mov	eax, [esi+54h]
		cmp	dword ptr [eax+5Ch], 0
		jz	short loc_10002DD1
		push	edi
		push	ebx
		mov	edi, eax
		call	NSS_CMSEnvelopedData_GetContentInfo
		mov	ecx, [esi+54h]
		mov	edx, [ecx+60h]
		push	eax
		mov	eax, [edi+5Ch]
		push	edx
		call	eax
		add	esp, 0Ch
		mov	esi, eax
		pop	edi
		test	esi, esi
		jz	short loc_10002DD1
		push	esi
		push	ebx
		call	NSS_CMSContentInfo_SetBulkKey
		push	esi
		call	PK11_FreeSymKey
		add	esp, 0Ch
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_10002DA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002E20	proc near		; CODE XREF: sub_100033F0+40p

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		push	edi
		lea	esi, [ebp+0Ch]
		push	esi
		call	NSS_CMSContentInfo_GetBulkKey
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10002E40
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10002E40:				; CODE XREF: sub_10002E20+17j
		push	ebx
		push	esi
		call	NSS_CMSEnvelopedData_GetContentInfo
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_10002E5D
		push	esi
		call	sub_100015C0
		add	esp, 4
		test	eax, eax
		jz	short loc_10002E65

loc_10002E5D:				; CODE XREF: sub_10002E20+2Ej
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10002E65:				; CODE XREF: sub_10002E20+3Bj
		mov	eax, [ebp+54h]
		mov	ecx, [eax+44h]
		push	ebx
		push	edi
		push	ecx
		call	sub_10001C80
		mov	edx, [esi+3Ch]
		push	edi
		mov	[edx], eax
		call	PK11_FreeSymKey
		mov	eax, [esi+3Ch]
		mov	eax, [eax]
		add	esp, 10h
		neg	eax
		pop	ebx
		sbb	eax, eax
		pop	edi
		neg	eax
		pop	esi
		dec	eax
		pop	ebp
		retn
sub_10002E20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002EA0	proc near		; CODE XREF: sub_10002180+4Ap

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		lea	esi, [edi+0Ch]
		push	esi
		or	ebp, 0FFFFFFFFh
		call	NSS_CMSEnvelopedData_GetContentInfo
		mov	ebx, eax
		mov	eax, [edi+54h]
		add	esp, 4
		cmp	dword ptr [eax+5Ch], 0
		jz	short loc_10002F14
		mov	edi, eax
		mov	ecx, [edi+60h]
		mov	edx, [edi+5Ch]
		push	ebx
		push	ecx
		call	edx
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10002F14
		push	edi
		push	esi
		call	NSS_CMSContentInfo_SetBulkKey
		push	esi
		call	sub_100015C0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10002F16
		push	ebx
		push	edi
		or	ebp, ebp
		call	sub_10001B50
		mov	ecx, [esi+3Ch]
		mov	[ecx], eax
		mov	edx, [esi+3Ch]
		add	esp, 8
		cmp	dword ptr [edx], 0
		jz	short loc_10002F14
		push	edi
		call	PK11_FreeSymKey
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002F14:				; CODE XREF: sub_10002EA0+20j
					; sub_10002EA0+35j ...
		mov	eax, ebp

loc_10002F16:				; CODE XREF: sub_10002EA0+49j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10002EA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002F20	proc near		; CODE XREF: sub_10002350+BDp
					; sub_10002FD0+3Dp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+48h]
		test	eax, eax
		jz	short loc_10002F45
		cmp	dword ptr [eax], 0
		jz	short loc_10002F45
		mov	eax, [eax]
		push	eax
		call	sub_10010E10
		mov	ecx, [esi+48h]
		add	esp, 4
		mov	dword ptr [ecx], 0

loc_10002F45:				; CODE XREF: sub_10002F20+Aj
					; sub_10002F20+Fj
		xor	eax, eax
		pop	esi
		retn
sub_10002F20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002F50(int,	void *Src, size_t Size)
sub_10002F50	proc near		; DATA XREF: sub_100033F0+146o
					; NSS_CMSEncoder_Start+F0o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+Src]
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	eax, [esi]
		push	edi
		mov	edi, [esp+0Ch+Size]
		test	eax, eax
		jz	short loc_10002F70
		mov	ecx, [esi+4]
		push	edi
		push	ebp
		push	ecx
		call	eax
		add	esp, 0Ch

loc_10002F70:				; CODE XREF: sub_10002F50+13j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_10002FCA
		push	ebx
		mov	ebx, [eax+8]
		test	ebx, ebx
		jnz	short loc_10002F8E
		mov	edx, [esi+8]
		push	edi
		push	edx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		jmp	short loc_10002FA6
; ---------------------------------------------------------------------------

loc_10002F8E:				; CODE XREF: sub_10002F50+2Dj
		mov	ecx, [eax+8]
		mov	eax, [eax+4]
		lea	edx, [ecx+edi]
		push	edx
		push	ecx
		mov	ecx, [esi+8]
		push	eax
		push	ecx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_10002FA6:				; CODE XREF: sub_10002F50+3Cj
		test	eax, eax
		jz	short loc_10002FC9
		mov	edx, [esi+0Ch]
		mov	[edx+4], eax
		mov	eax, [esi+0Ch]
		add	[eax+8], edi
		mov	eax, [esi+0Ch]
		mov	ecx, [eax+4]
		push	edi		; Size
		add	ecx, ebx
		push	ebp		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10002FC9:				; CODE XREF: sub_10002F50+58j
		pop	ebx

loc_10002FCA:				; CODE XREF: sub_10002F50+25j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10002F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002FD0	proc near		; CODE XREF: sub_100035F0+148p
		mov	ecx, [esi+0Ch]
		lea	eax, [ecx-1Ah]	; switch 5 cases
		cmp	eax, 4
		ja	short loc_10003016 ; jumptable 10002FDB	default	case
		jmp	ds:off_10003038[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10002FE2:				; CODE XREF: sub_10002FD0+Bj
					; DATA XREF: .text:off_10003038o
		mov	eax, [esi+10h]	; jumptable 10002FDB case 26
		push	eax
		call	sub_100055B0
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10002FEF:				; CODE XREF: sub_10002FD0+Bj
					; DATA XREF: .text:off_10003038o
		mov	ecx, [esi+10h]	; jumptable 10002FDB case 27
		push	ecx
		call	sub_10003C50
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10002FFC:				; CODE XREF: sub_10002FD0+Bj
					; DATA XREF: .text:off_10003038o
		mov	edx, [esi+10h]	; jumptable 10002FDB case 29
		push	edx
		call	sub_10002890
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10003009:				; CODE XREF: sub_10002FD0+Bj
					; DATA XREF: .text:off_10003038o
		mov	eax, [esi+10h]	; jumptable 10002FDB case 30
		push	eax
		call	sub_10002F20
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10003016:				; CODE XREF: sub_10002FD0+9j
					; sub_10002FD0+Bj
					; DATA XREF: ...
		push	ecx		; jumptable 10002FDB default case
		call	sub_10006CB0
		add	esp, 4
		test	eax, eax
		jz	short loc_10003034
		mov	ecx, [esi+10h]
		mov	edx, [esi+0Ch]
		push	ecx
		push	edx
		call	sub_10006FD0
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10003034:				; CODE XREF: sub_10002FD0+51j
		or	eax, 0FFFFFFFFh
		retn
sub_10002FD0	endp

; ---------------------------------------------------------------------------
off_10003038	dd offset loc_10002FE2	; DATA XREF: sub_10002FD0+Br
		dd offset loc_10002FEF	; jump table for switch	statement
		dd offset loc_10003016
		dd offset loc_10002FFC
		dd offset loc_10003009
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003050	proc near		; CODE XREF: .text:100031E4p
					; NSS_CMSEncoder_Update+A0p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, eax
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [eax+10h]
		push	edi
		push	ecx
		push	edx
		xor	ebp, ebp
		xor	ebx, ebx
		call	sub_10007440
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_10003089
		mov	eax, [esp+14h+arg_0]
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax+24h], 0FFFFE001h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10003089:				; CODE XREF: sub_10003050+23j
		test	esi, esi
		jz	short loc_100030AA
		mov	eax, [edi+3Ch]
		test	eax, eax
		jz	short loc_100030AA
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_100030AA
		mov	ecx, [esp+14h+arg_8]
		push	esi
		push	ecx
		push	eax
		call	NSS_CMSDigestContext_Update
		add	esp, 0Ch

loc_100030AA:				; CODE XREF: sub_10003050+3Bj
					; sub_10003050+42j ...
		mov	eax, [edi+3Ch]
		test	eax, eax
		jz	loc_1000316A
		cmp	[eax], ebx
		jz	loc_1000316A
		mov	edx, [esp+14h+arg_C]
		mov	eax, [eax]
		push	edx
		push	esi
		push	eax
		call	sub_10010E60
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_10003103
		mov	ecx, [esp+14h+arg_C]
		mov	edx, [esp+14h+arg_8]
		push	ecx
		push	esi
		push	edx
		push	eax
		push	eax
		push	eax
		mov	eax, [edi+3Ch]
		mov	ecx, [eax]
		push	ecx
		call	sub_100110A0
		add	esp, 1Ch
		mov	ebx, eax
		cmp	[esp+14h+arg_C], ebp
		jz	loc_100031C7
		xor	esi, esi
		jmp	loc_10003198
; ---------------------------------------------------------------------------

loc_10003103:				; CODE XREF: sub_10003050+82j
		push	ebx
		cmp	[esp+18h+arg_4], ebp
		jz	short loc_1000311F
		mov	edx, [esp+18h+arg_0]
		mov	eax, [edx+8]
		mov	ecx, [eax+44h]
		push	ecx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		jmp	short loc_10003127
; ---------------------------------------------------------------------------

loc_1000311F:				; CODE XREF: sub_10003050+B8j
		call	PORT_Alloc_Util
		add	esp, 4

loc_10003127:				; CODE XREF: sub_10003050+CDj
		mov	ebp, eax
		test	ebp, ebp
		jnz	short loc_10003138
		pop	edi
		pop	esi
		or	ebx, 0FFFFFFFFh
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10003138:				; CODE XREF: sub_10003050+DBj
		mov	edx, [esp+14h+arg_C]
		mov	eax, [esp+14h+arg_8]
		push	edx
		mov	edx, [edi+3Ch]
		push	esi
		push	eax
		mov	eax, [edx]
		push	ebx
		lea	ecx, [esp+24h+var_4]
		push	ecx
		push	ebp
		push	eax
		call	sub_100110A0
		mov	esi, [esp+30h+var_4]
		mov	ebx, eax
		add	esp, 1Ch
		mov	ecx, ebp
		test	ebx, ebx
		jz	short loc_1000316E
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000316A:				; CODE XREF: sub_10003050+5Fj
					; sub_10003050+67j
		mov	ecx, [esp+14h+arg_8]

loc_1000316E:				; CODE XREF: sub_10003050+112j
		mov	edx, [esp+14h+arg_0]
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_10003198
		test	esi, esi
		jz	short loc_10003198
		cmp	[esp+14h+arg_10], 0
		jz	short loc_1000318B
		mov	edx, [edi+2Ch]
		cmp	edx, [edi+0Ch]
		jz	short loc_10003198

loc_1000318B:				; CODE XREF: sub_10003050+131j
		push	esi
		push	ecx
		push	eax
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 0Ch
		mov	ebx, eax

loc_10003198:				; CODE XREF: sub_10003050+AEj
					; sub_10003050+126j ...
		mov	edi, [edi+3Ch]
		test	edi, edi
		jz	short loc_100031C7
		cmp	dword ptr [edi], 0
		jz	short loc_100031C7
		mov	eax, [esp+14h+arg_4]
		test	eax, eax
		jz	short loc_100031BA
		pop	edi
		mov	[eax+8], esi
		pop	esi
		mov	[eax+4], ebp
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100031BA:				; CODE XREF: sub_10003050+15Aj
		test	ebp, ebp
		jz	short loc_100031C7
		push	ebp
		call	PORT_Free_Util
		add	esp, 4

loc_100031C7:				; CODE XREF: sub_10003050+A6j
					; sub_10003050+14Dj ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
sub_10003050	endp

; ---------------------------------------------------------------------------
		align 10h

loc_100031D0:				; DATA XREF: sub_100033F0+B9o
		mov	eax, [esp+8]
		mov	ecx, [esp+4]
		push	0
		push	0
		push	eax
		mov	eax, [esp+18h]
		push	0
		push	ecx
		call	sub_10003050
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  37. NSS_CMSEncoder_Update

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEncoder_Update
NSS_CMSEncoder_Update proc near		; CODE XREF: NSS_CMSEncoder_Update+49p
					; NSS_CMSDEREncode+61p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+24h], 0
		jz	short loc_10003200
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10003200:				; CODE XREF: NSS_CMSEncoder_Update+9j
		mov	eax, [esi+28h]
		push	edi
		test	eax, eax
		jz	short loc_10003244
		cmp	dword ptr [eax+4], 0
		jnz	short loc_1000322B
		mov	dword ptr [eax+4], 1
		mov	eax, [esi+28h]
		mov	ecx, [eax]
		push	0
		push	0
		push	ecx
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10003261

loc_1000322B:				; CODE XREF: NSS_CMSEncoder_Update+1Cj
		mov	edx, [esp+8+arg_8]
		mov	eax, [esp+8+arg_4]
		mov	ecx, [esi+28h]
		push	edx
		push	eax
		push	ecx
		call	NSS_CMSEncoder_Update
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10003244:				; CODE XREF: NSS_CMSEncoder_Update+16j
		mov	edx, [esi+0Ch]
		mov	eax, [esi+10h]
		push	edx
		push	eax
		call	sub_10007440
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_10003267
		mov	dword ptr [esi+24h], 0FFFFE001h

loc_10003261:				; CODE XREF: NSS_CMSEncoder_Update+39j
					; NSS_CMSEncoder_Update+88j ...
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10003267:				; CODE XREF: NSS_CMSEncoder_Update+68j
		push	edi
		call	NSS_CMSContentInfo_GetContentTypeTag
		push	eax
		call	sub_10006D40
		add	esp, 8
		test	eax, eax
		jz	short loc_10003261
		cmp	dword ptr [edi+0Ch], 0
		jnz	short loc_10003261
		mov	ecx, [esp+8+arg_4]
		mov	eax, [esp+8+arg_8]
		push	1
		push	0
		push	ecx
		push	0
		push	esi
		call	sub_10003050
		add	esp, 14h
		pop	edi
		pop	esi
		retn
NSS_CMSEncoder_Update endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  34. NSS_CMSEncoder_Cancel

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEncoder_Cancel
NSS_CMSEncoder_Cancel proc near		; CODE XREF: NSS_CMSEncoder_Cancel+Ep
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+28h]
		push	edi
		test	eax, eax
		jz	short loc_100032B6
		push	eax
		call	NSS_CMSEncoder_Cancel
		add	esp, 4

loc_100032B6:				; CODE XREF: NSS_CMSEncoder_Cancel+Bj
		xor	eax, eax
		cmp	[esi+28h], eax
		setz	al
		push	eax
		push	1
		push	0
		push	0
		push	esi
		xor	eax, eax
		call	sub_10003050
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_100032F8
		mov	ecx, [esi]
		push	ecx
		mov	[esi+28h], eax
		call	SEC_ASN1EncoderClearTakeFromBuf_Util
		mov	edx, [esi]
		push	edx
		call	SEC_ASN1EncoderClearStreaming_Util
		mov	eax, [esi]
		push	edi
		push	edi
		push	eax
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 14h
		mov	edi, eax

loc_100032F8:				; CODE XREF: NSS_CMSEncoder_Cancel+34j
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1EncoderFinish_Util
		push	esi
		call	PORT_Free_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		retn
NSS_CMSEncoder_Cancel endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  35. NSS_CMSEncoder_Finish

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEncoder_Finish
NSS_CMSEncoder_Finish proc near		; CODE XREF: NSS_CMSEncoder_Finish+36p
					; NSS_CMSEncoder_Finish+44p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+28h]
		push	edi
		test	eax, eax
		jz	short loc_10003362
		cmp	dword ptr [eax+4], 0
		jnz	short loc_10003350
		mov	dword ptr [eax+4], 1
		mov	eax, [esi+28h]
		mov	ecx, [eax]
		push	0
		push	0
		push	ecx
		call	SEC_ASN1EncoderUpdate_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_10003350
		mov	edx, [esi+28h]
		push	edx
		call	NSS_CMSEncoder_Finish
		add	esp, 4
		jmp	short loc_100033CC
; ---------------------------------------------------------------------------

loc_10003350:				; CODE XREF: NSS_CMSEncoder_Finish+11j
					; NSS_CMSEncoder_Finish+30j
		mov	eax, [esi+28h]
		push	eax
		call	NSS_CMSEncoder_Finish
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_100033CC

loc_10003362:				; CODE XREF: NSS_CMSEncoder_Finish+Bj
		xor	ecx, ecx
		cmp	[esi+28h], ecx
		setz	cl
		xor	eax, eax
		push	ecx
		push	1
		push	0
		push	0
		push	esi
		call	sub_10003050
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_100033CC
		mov	edx, [esi+0Ch]
		mov	[esi+28h], eax
		mov	eax, [esi+10h]
		push	edx
		push	eax
		call	sub_10007440
		add	esp, 8
		test	eax, eax
		jnz	short loc_100033A2
		mov	dword ptr [esi+24h], 0FFFFE001h
		jmp	short loc_100033C9
; ---------------------------------------------------------------------------

loc_100033A2:				; CODE XREF: NSS_CMSEncoder_Finish+87j
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1EncoderClearTakeFromBuf_Util
		mov	edx, [esi]
		push	edx
		call	SEC_ASN1EncoderClearStreaming_Util
		mov	eax, [esi]
		push	0
		push	0
		push	eax
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 14h
		cmp	dword ptr [esi+24h], 0
		mov	edi, eax
		jz	short loc_100033CC

loc_100033C9:				; CODE XREF: NSS_CMSEncoder_Finish+90j
		or	edi, 0FFFFFFFFh

loc_100033CC:				; CODE XREF: NSS_CMSEncoder_Finish+3Ej
					; NSS_CMSEncoder_Finish+50j ...
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1EncoderFinish_Util
		push	esi
		call	PORT_Free_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		retn
NSS_CMSEncoder_Finish endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100033F0	proc near		; CODE XREF: sub_100035F0+D3p
		mov	ecx, [ebx+0Ch]
		lea	eax, [ecx-1Ah]	; switch 5 cases
		cmp	eax, 4
		ja	short loc_1000343A ; jumptable 100033FB	default	case
		jmp	ds:off_100035C8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10003402:				; CODE XREF: sub_100033F0+Bj
					; DATA XREF: .text:off_100035C8o
		mov	eax, [ebx+10h]	; jumptable 100033FB case 26
		push	eax
		call	sub_10004D30
		add	esp, 4
		jmp	short loc_10003457
; ---------------------------------------------------------------------------

loc_10003410:				; CODE XREF: sub_100033F0+Bj
					; DATA XREF: .text:off_100035C8o
		mov	ecx, [ebx+10h]	; jumptable 100033FB case 29
		push	ecx
		call	sub_10002840
		add	esp, 4
		jmp	short loc_10003457
; ---------------------------------------------------------------------------

loc_1000341E:				; CODE XREF: sub_100033F0+Bj
					; DATA XREF: .text:off_100035C8o
		mov	edx, [ebx+10h]	; jumptable 100033FB case 27
		push	edx
		call	sub_10003BD0
		add	esp, 4
		jmp	short loc_10003457
; ---------------------------------------------------------------------------

loc_1000342C:				; CODE XREF: sub_100033F0+Bj
					; DATA XREF: .text:off_100035C8o
		mov	eax, [ebx+10h]	; jumptable 100033FB case 30
		push	eax
		call	sub_10002E20
		add	esp, 4
		jmp	short loc_10003457
; ---------------------------------------------------------------------------

loc_1000343A:				; CODE XREF: sub_100033F0+9j
					; sub_100033F0+Bj
					; DATA XREF: ...
		push	ecx		; jumptable 100033FB default case
		call	sub_10006CB0
		add	esp, 4
		test	eax, eax
		jz	short loc_1000345B
		mov	ecx, [ebx+10h]
		mov	edx, [ebx+0Ch]
		push	ecx
		push	edx
		call	sub_10006F90
		add	esp, 8

loc_10003457:				; CODE XREF: sub_100033F0+1Ej
					; sub_100033F0+2Cj ...
		test	eax, eax
		jz	short loc_1000345F

loc_1000345B:				; CODE XREF: sub_100033F0+55j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000345F:				; CODE XREF: sub_100033F0+69j
		mov	eax, [ebx+0Ch]
		mov	ecx, [ebx+10h]
		push	ebp
		push	esi
		push	edi
		push	eax
		push	ecx
		call	sub_10007440
		mov	edi, eax
		push	edi
		call	NSS_CMSContentInfo_GetContentTypeTag
		mov	ebp, eax
		push	ebp
		call	sub_10006CB0
		add	esp, 10h
		test	eax, eax
		jz	loc_100035A1
		push	2Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		xor	eax, eax
		add	esp, 4
		cmp	esi, eax
		jz	loc_1000356A
		mov	[esi+0Ch], ebp
		mov	edx, [edi+0Ch]
		mov	[esi+10h], edx
		mov	dword ptr [esi+14h], offset loc_100031D0
		mov	[esi+18h], ebx
		mov	[esi+1Ch], eax
		mov	[esi+20h], eax
		mov	ecx, [ebx+8]
		push	ebp
		mov	[esi+8], ecx
		mov	[esi+4], eax
		mov	[esi+28h], eax
		call	sub_100073A0
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	short loc_1000354B
		mov	eax, [esi+0Ch]
		lea	ecx, [eax-1Ah]	; switch 5 cases
		cmp	ecx, 4
		ja	short loc_1000351E ; jumptable 100034DF	default	case
		jmp	ds:off_100035DC[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100034E6:				; CODE XREF: sub_100033F0+EFj
					; DATA XREF: .text:off_100035DCo
		mov	edx, [edi+0Ch]	; jumptable 100034DF case 26
		push	edx
		call	sub_10005480
		add	esp, 4
		jmp	short loc_1000352B
; ---------------------------------------------------------------------------

loc_100034F4:				; CODE XREF: sub_100033F0+EFj
					; DATA XREF: .text:off_100035DCo
		mov	eax, [edi+0Ch]	; jumptable 100034DF case 27
		push	eax
		call	sub_10003A10
		add	esp, 4
		jmp	short loc_1000352B
; ---------------------------------------------------------------------------

loc_10003502:				; CODE XREF: sub_100033F0+EFj
					; DATA XREF: .text:off_100035DCo
		mov	ecx, [edi+0Ch]	; jumptable 100034DF case 29
		push	ecx
		call	sub_10002800
		add	esp, 4
		jmp	short loc_1000352B
; ---------------------------------------------------------------------------

loc_10003510:				; CODE XREF: sub_100033F0+EFj
					; DATA XREF: .text:off_100035DCo
		mov	edx, [edi+0Ch]	; jumptable 100034DF case 30
		push	edx
		call	sub_10002DA0
		add	esp, 4
		jmp	short loc_1000352B
; ---------------------------------------------------------------------------

loc_1000351E:				; CODE XREF: sub_100033F0+EDj
					; sub_100033F0+EFj
					; DATA XREF: ...
		mov	ecx, [edi+0Ch]	; jumptable 100034DF default case
		push	ecx
		push	eax
		call	sub_10006F50
		add	esp, 8

loc_1000352B:				; CODE XREF: sub_100033F0+102j
					; sub_100033F0+110j ...
		test	eax, eax
		jnz	short loc_1000354B
		mov	edx, [edi+0Ch]
		lea	eax, [esi+14h]
		push	eax
		push	offset sub_10002F50
		push	ebp
		push	edx
		call	SEC_ASN1EncoderStart_Util
		add	esp, 10h
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_10003571

loc_1000354B:				; CODE XREF: sub_100033F0+E2j
					; sub_100033F0+13Dj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000355A
		push	eax
		call	SEC_ASN1EncoderFinish_Util
		add	esp, 4

loc_1000355A:				; CODE XREF: sub_100033F0+15Fj
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		mov	dword ptr [ebx+28h], 0

loc_1000356A:				; CODE XREF: sub_100033F0+AAj
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10003571:				; CODE XREF: sub_100033F0+159j
		mov	edi, [edi+3Ch]
		test	edi, edi
		jz	short loc_1000357E
		cmp	dword ptr [edi+8], 0
		jnz	short loc_10003587

loc_1000357E:				; CODE XREF: sub_100033F0+186j
		push	eax
		call	SEC_ASN1EncoderSetStreaming_Util
		add	esp, 4

loc_10003587:				; CODE XREF: sub_100033F0+18Cj
		push	esi
		mov	[ebx+28h], esi
		mov	eax, [esi]
		push	offset sub_100035F0
		push	eax
		call	SEC_ASN1EncoderSetNotifyProc_Util
		add	esp, 0Ch
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100035A1:				; CODE XREF: sub_100033F0+94j
		push	ebp
		call	sub_10006D40
		add	esp, 4
		test	eax, eax
		jz	short loc_100035BB
		pop	edi
		pop	esi
		mov	dword ptr [ebx+28h], 0
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100035BB:				; CODE XREF: sub_100033F0+1BCj
		pop	edi
		pop	esi
		mov	dword ptr [ebx+24h], 0FFFFE009h
		xor	eax, eax
		pop	ebp
		retn
sub_100033F0	endp

; ---------------------------------------------------------------------------
off_100035C8	dd offset loc_10003402	; DATA XREF: sub_100033F0+Br
		dd offset loc_1000341E	; jump table for switch	statement
		dd offset loc_1000343A
		dd offset loc_10003410
		dd offset loc_1000342C
off_100035DC	dd offset loc_100034E6	; DATA XREF: sub_100033F0+EFr
		dd offset loc_100034F4	; jump table for switch	statement
		dd offset loc_1000351E
		dd offset loc_10003502
		dd offset loc_10003510

; =============== S U B	R O U T	I N E =======================================


sub_100035F0	proc near		; DATA XREF: sub_100033F0+19Do
					; NSS_CMSEncoder_Start+129o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		xor	ebx, ebx
		test	ebp, ebp
		setz	bl
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	eax, [esi+0Ch]
		push	edi
		mov	edi, [esi+8]
		push	eax
		mov	[esp+14h+arg_4], ebx
		call	sub_10006D40
		add	esp, 4
		test	eax, eax
		jz	short loc_10003687
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+10h]
		push	ecx
		push	edx
		call	sub_10007440
		add	esp, 8
		test	ebp, ebp
		jz	loc_10003775
		lea	ecx, [eax+2Ch]
		cmp	[esp+10h+arg_8], ecx
		jnz	loc_10003775
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_1000366C
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		push	1
		push	1
		push	edx
		push	0
		push	esi
		call	sub_10003050
		mov	ecx, [esi]
		add	esp, 14h
		push	ecx
		call	SEC_ASN1EncoderClearNotifyProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000366C:				; CODE XREF: sub_100035F0+54j
		mov	eax, [esi]
		push	eax
		call	SEC_ASN1EncoderSetTakeFromBuf_Util
		mov	ecx, [esi]
		add	esp, 4
		push	ecx
		call	SEC_ASN1EncoderClearNotifyProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003687:				; CODE XREF: sub_100035F0+28j
		mov	edx, [esi+0Ch]
		push	edx
		call	sub_10006CB0
		add	esp, 4
		test	eax, eax
		jz	loc_10003759
		mov	eax, [esi+0Ch]
		mov	ecx, [esi+10h]
		push	eax
		push	ecx
		call	sub_10007440
		mov	edi, eax
		push	edi
		call	NSS_CMSContentInfo_GetContentTypeTag
		add	esp, 0Ch
		mov	[esp+10h+arg_0], eax
		test	ebx, ebx
		jz	short loc_100036D8
		cmp	[esp+10h+arg_8], edi
		jnz	short loc_100036D8
		mov	ebx, esi
		call	sub_100033F0
		test	eax, eax
		jz	short loc_100036D4
		call	PORT_GetError_Util
		mov	[esi+24h], eax

loc_100036D4:				; CODE XREF: sub_100035F0+DAj
		mov	ebx, [esp+10h+arg_4]

loc_100036D8:				; CODE XREF: sub_100035F0+C9j
					; sub_100035F0+CFj
		test	ebp, ebp
		jz	short loc_1000372B
		lea	edx, [edi+2Ch]
		cmp	[esp+10h+arg_8], edx
		jnz	short loc_1000372B
		cmp	dword ptr [esi+28h], 0
		jnz	short loc_10003720
		mov	eax, [esp+10h+arg_0]
		push	eax
		call	sub_10006D40
		add	esp, 4
		test	eax, eax
		jz	short loc_1000371B
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_1000371B
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		push	1
		push	1
		push	ecx
		push	0
		push	esi
		call	sub_10003050
		add	esp, 14h
		jmp	short loc_1000372B
; ---------------------------------------------------------------------------

loc_1000371B:				; CODE XREF: sub_100035F0+10Aj
					; sub_100035F0+111j
		mov	edx, [esi]
		push	edx
		jmp	short loc_10003723
; ---------------------------------------------------------------------------

loc_10003720:				; CODE XREF: sub_100035F0+F9j
		mov	eax, [esi]
		push	eax

loc_10003723:				; CODE XREF: sub_100035F0+12Ej
		call	SEC_ASN1EncoderSetTakeFromBuf_Util
		add	esp, 4

loc_1000372B:				; CODE XREF: sub_100035F0+EAj
					; sub_100035F0+F3j ...
		test	ebx, ebx
		jz	short loc_10003775
		add	edi, 2Ch
		cmp	[esp+10h+arg_8], edi
		jnz	short loc_10003775
		call	sub_10002FD0
		test	eax, eax
		jz	short loc_10003749
		call	PORT_GetError_Util
		mov	[esi+24h], eax

loc_10003749:				; CODE XREF: sub_100035F0+14Fj
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1EncoderClearNotifyProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003759:				; CODE XREF: sub_100035F0+A5j
		test	ebx, ebx
		jz	short loc_10003775
		cmp	[esp+10h+arg_8], edi
		jnz	short loc_10003775
		push	edi
		call	NSS_CMSContentInfo_GetContentTypeTag
		mov	[esi+0Ch], eax
		mov	edx, [edi+0Ch]
		mov	[esi+10h], edx
		add	esp, 4

loc_10003775:				; CODE XREF: sub_100035F0+3Cj
					; sub_100035F0+49j ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100035F0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. NSS_CMSEncoder_Start

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEncoder_Start
NSS_CMSEncoder_Start proc near		; CODE XREF: NSS_CMSDEREncode+2Fp
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		mov	eax, [esp+arg_28]
		mov	ecx, [esp+arg_24]
		mov	edx, [esp+arg_20]
		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		push	eax
		mov	eax, [esp+0Ch+arg_1C]
		push	ecx
		mov	ecx, [esp+10h+arg_18]
		push	edx
		mov	edx, [esp+14h+arg_14]
		push	eax
		push	ecx
		push	edx
		push	ebp
		call	sub_10003E80
		push	2Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 20h
		test	esi, esi
		jnz	short loc_100037CC
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100037CC:				; CODE XREF: NSS_CMSEncoder_Start+38j
		mov	eax, [esp+8+arg_4]
		mov	ecx, [esp+8+arg_8]
		mov	edx, [esp+8+arg_C]
		push	ebx
		mov	[esi+14h], eax
		mov	eax, [esp+0Ch+arg_10]
		push	edi
		push	ebp
		mov	[esi+8], ebp
		mov	[esi+18h], ecx
		mov	[esi+20h], edx
		mov	[esi+1Ch], eax
		mov	dword ptr [esi+0Ch], 0
		call	NSS_CMSMessage_GetContentInfo
		mov	edi, eax
		push	edi
		call	NSS_CMSContentInfo_GetContentTypeTag
		mov	ebx, eax
		lea	eax, [ebx-1Ah]
		add	esp, 8
		cmp	eax, 4		; switch 5 cases
		ja	short loc_1000384E ; jumptable 1000380F	default	case
		jmp	ds:off_100038E8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10003816:				; CODE XREF: NSS_CMSEncoder_Start+8Fj
					; DATA XREF: .text:off_100038E8o
		mov	ecx, [edi+0Ch]	; jumptable 1000380F case 0
		push	ecx
		call	sub_10005480
		add	esp, 4
		jmp	short loc_10003868
; ---------------------------------------------------------------------------

loc_10003824:				; CODE XREF: NSS_CMSEncoder_Start+8Fj
					; DATA XREF: .text:off_100038E8o
		mov	edx, [edi+0Ch]	; jumptable 1000380F case 1
		push	edx
		call	sub_10003A10
		add	esp, 4
		jmp	short loc_10003868
; ---------------------------------------------------------------------------

loc_10003832:				; CODE XREF: NSS_CMSEncoder_Start+8Fj
					; DATA XREF: .text:off_100038E8o
		mov	eax, [edi+0Ch]	; jumptable 1000380F case 3
		push	eax
		call	sub_10002800
		add	esp, 4
		jmp	short loc_10003868
; ---------------------------------------------------------------------------

loc_10003840:				; CODE XREF: NSS_CMSEncoder_Start+8Fj
					; DATA XREF: .text:off_100038E8o
		mov	ecx, [edi+0Ch]	; jumptable 1000380F case 4
		push	ecx
		call	sub_10002DA0
		add	esp, 4
		jmp	short loc_10003868
; ---------------------------------------------------------------------------

loc_1000384E:				; CODE XREF: NSS_CMSEncoder_Start+8Dj
					; NSS_CMSEncoder_Start+8Fj
					; DATA XREF: ...
		push	ebx		; jumptable 1000380F default case
		call	sub_10006CB0
		add	esp, 4
		test	eax, eax
		jz	short loc_100038CE
		mov	edx, [esi+10h]
		push	edx
		push	ebx
		call	sub_10006F50
		add	esp, 8

loc_10003868:				; CODE XREF: NSS_CMSEncoder_Start+A2j
					; NSS_CMSEncoder_Start+B0j ...
		test	eax, eax
		jnz	short loc_100038CE
		lea	eax, [esi+14h]
		push	eax
		push	offset sub_10002F50
		push	offset dword_100133C8
		push	ebp
		call	SEC_ASN1EncoderStart_Util
		add	esp, 10h
		mov	[esi], eax
		test	eax, eax
		jz	short loc_100038CE
		mov	dword ptr [esi+4], 0
		mov	edi, [edi+3Ch]
		test	edi, edi
		jz	short loc_1000389D
		cmp	dword ptr [edi+8], 0
		jnz	short loc_100038A6

loc_1000389D:				; CODE XREF: NSS_CMSEncoder_Start+115j
		push	eax
		call	SEC_ASN1EncoderSetStreaming_Util
		add	esp, 4

loc_100038A6:				; CODE XREF: NSS_CMSEncoder_Start+11Bj
		mov	eax, [esi]
		push	esi
		push	offset sub_100035F0
		push	eax
		call	SEC_ASN1EncoderSetNotifyProc_Util
		mov	ecx, [esi]
		push	0
		push	0
		push	ecx
		mov	dword ptr [esi+4], 1
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 18h
		test	eax, eax
		jz	short loc_100038DE

loc_100038CE:				; CODE XREF: NSS_CMSEncoder_Start+D9j
					; NSS_CMSEncoder_Start+EAj ...
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100038DE:				; CODE XREF: NSS_CMSEncoder_Start+14Cj
		pop	edi
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
NSS_CMSEncoder_Start endp

; ---------------------------------------------------------------------------
		align 4
off_100038E8	dd offset loc_10003816	; DATA XREF: NSS_CMSEncoder_Start+8Fr
		dd offset loc_10003824	; jump table for switch	statement
		dd offset loc_1000384E
		dd offset loc_10003832
		dd offset loc_10003840
		align 10h
; Exported entry  42. NSS_CMSEnvelopedData_Create

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEnvelopedData_Create
NSS_CMSEnvelopedData_Create proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		mov	esi, [ebx+44h]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	60h
		push	esi
		mov	ebp, eax
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_10003944
		mov	eax, [esp+10h+arg_8]
		mov	ecx, [esp+10h+arg_4]
		push	eax
		push	0
		push	ecx
		lea	edx, [edi+14h]
		push	edx
		push	esi
		mov	[edi+5Ch], ebx
		call	NSS_CMSContentInfo_SetContentEncAlg
		add	esp, 14h
		test	eax, eax
		jz	short loc_10003955

loc_10003944:				; CODE XREF: NSS_CMSEnvelopedData_Create+22j
		push	ebp
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003955:				; CODE XREF: NSS_CMSEnvelopedData_Create+42j
		push	ebp
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
NSS_CMSEnvelopedData_Create endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  43. NSS_CMSEnvelopedData_Destroy

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEnvelopedData_Destroy
NSS_CMSEnvelopedData_Destroy proc near	; CODE XREF: sub_10001950+34p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_100039A6
		push	esi
		mov	esi, [edi+10h]
		test	esi, esi
		jz	short loc_100039A5
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10003999

loc_10003987:				; CODE XREF: NSS_CMSEnvelopedData_Destroy+27j
		push	eax
		add	esi, 4
		call	NSS_CMSRecipientInfo_Destroy
		mov	eax, [esi]
		add	esp, 4
		test	eax, eax
		jnz	short loc_10003987

loc_10003999:				; CODE XREF: NSS_CMSEnvelopedData_Destroy+15j
		add	edi, 14h
		push	edi
		call	sub_10001950
		add	esp, 4

loc_100039A5:				; CODE XREF: NSS_CMSEnvelopedData_Destroy+Fj
		pop	esi

loc_100039A6:				; CODE XREF: NSS_CMSEnvelopedData_Destroy+7j
		pop	edi
		retn
NSS_CMSEnvelopedData_Destroy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  41. NSS_CMSEnvelopedData_AddRecipient

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSEnvelopedData_AddRecipient
NSS_CMSEnvelopedData_AddRecipient proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+5Ch]
		mov	ecx, [eax+44h]
		push	edi
		push	ecx
		call	PORT_ArenaMark_Util
		mov	edx, [esp+0Ch+arg_4]
		mov	ecx, [esi+5Ch]
		push	edx
		mov	edx, [ecx+44h]
		mov	edi, eax
		lea	eax, [esi+10h]
		push	eax
		push	edx
		call	sub_10001000
		add	esp, 10h
		push	edi
		test	eax, eax
		jz	short loc_100039F6
		mov	eax, [esi+5Ch]
		mov	ecx, [eax+44h]
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100039F6:				; CODE XREF: NSS_CMSEnvelopedData_AddRecipient+2Fj
		mov	edx, [esi+5Ch]
		mov	eax, [edx+44h]
		push	eax
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		xor	eax, eax
		pop	esi
		retn
NSS_CMSEnvelopedData_AddRecipient endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003A10	proc near		; CODE XREF: sub_100033F0+108p
					; NSS_CMSEncoder_Start+A8p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_0]
		mov	eax, [ebp+5Ch]
		mov	ecx, [eax+44h]
		push	esi
		push	edi
		mov	edi, [ebp+10h]
		lea	edx, [ebp+14h]
		mov	[esp+1Ch+arg_0], ecx
		mov	[esp+1Ch+var_8], edx
		test	edi, edi
		jnz	short loc_10003A4B
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10003A4B:				; CODE XREF: sub_10003A10+21j
		xor	ebx, ebx
		cmp	[ebp+0Ch], ebx
		jnz	short loc_10003A7A
		cmp	[ebp+58h], ebx
		jnz	short loc_10003A7A
		xor	esi, esi
		cmp	[edi], ebx
		jz	short loc_10003A7F
		mov	eax, edi
		nop

loc_10003A60:				; CODE XREF: sub_10003A10+66j
		mov	eax, [eax]
		push	eax
		call	sub_10004590
		add	esp, 4
		test	eax, eax
		jnz	short loc_10003A7A
		inc	esi
		cmp	[edi+esi*4], ebx
		lea	eax, [edi+esi*4]
		jnz	short loc_10003A60
		jmp	short loc_10003A7F
; ---------------------------------------------------------------------------

loc_10003A7A:				; CODE XREF: sub_10003A10+40j
					; sub_10003A10+45j ...
		mov	ebx, 2

loc_10003A7F:				; CODE XREF: sub_10003A10+4Bj
					; sub_10003A10+68j
		push	ebx
		mov	ebx, [esp+20h+arg_0]
		push	ebp
		push	ebx
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10003B97
		mov	esi, [esp+1Ch+var_8]
		push	esi
		call	NSS_CMSContentInfo_GetContentEncAlgTag
		add	esp, 4
		mov	[esp+1Ch+var_C], eax
		test	eax, eax
		jnz	short loc_10003AD1
		push	0A8h
		push	eax
		push	7
		push	esi
		push	ebx
		call	NSS_CMSContentInfo_SetContentEncAlg
		add	esp, 14h
		test	eax, eax
		jnz	loc_10003B97
		mov	[esp+1Ch+var_C], 7
		mov	eax, [esp+1Ch+var_C]

loc_10003AD1:				; CODE XREF: sub_10003A10+99j
		push	eax
		call	PK11_AlgtagToMechanism
		mov	ecx, [ebp+5Ch]
		mov	edx, [ecx+58h]
		mov	ebx, eax
		push	edx
		push	ebx
		call	PK11_GetBestSlot
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_10003B97
		mov	eax, [ebp+5Ch]
		mov	ecx, [eax+58h]
		mov	edx, [esp+1Ch+var_8]
		push	ecx
		push	edx
		call	NSS_CMSContentInfo_GetBulkKeySize
		cdq
		and	edx, 7
		add	esp, 4
		add	eax, edx
		sar	eax, 3
		push	eax
		push	0
		push	ebx
		push	esi
		call	PK11_KeyGen
		push	esi
		mov	ebx, eax
		call	PK11_FreeSlot
		add	esp, 18h
		test	ebx, ebx
		jz	short loc_10003B97
		mov	eax, [esp+1Ch+arg_0]
		push	eax
		call	PORT_ArenaMark_Util
		xor	esi, esi
		add	esp, 4
		mov	[esp+1Ch+var_4], eax
		cmp	[edi], esi
		jz	short loc_10003B61
		mov	eax, edi

loc_10003B42:				; CODE XREF: sub_10003A10+14Fj
		mov	ecx, [esp+1Ch+var_C]
		mov	edx, [eax]
		push	ecx
		push	ebx
		push	edx
		call	NSS_CMSRecipientInfo_WrapBulkKey
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10003B78
		inc	esi
		cmp	dword ptr [edi+esi*4], 0
		lea	eax, [edi+esi*4]
		jnz	short loc_10003B42

loc_10003B61:				; CODE XREF: sub_10003A10+12Ej
		mov	eax, [ebp+10h]
		push	0
		push	offset dword_10013968
		push	eax
		call	sub_100075E0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10003BA2

loc_10003B78:				; CODE XREF: sub_10003A10+145j
		mov	eax, [esp+1Ch+var_4]
		test	eax, eax
		jz	short loc_10003B8E
		mov	ecx, [esp+1Ch+arg_0]
		push	eax
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 8

loc_10003B8E:				; CODE XREF: sub_10003A10+16Ej
		push	ebx
		call	PK11_FreeSymKey
		add	esp, 4

loc_10003B97:				; CODE XREF: sub_10003A10+80j
					; sub_10003A10+AFj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10003BA2:				; CODE XREF: sub_10003A10+166j
		mov	edx, [esp+1Ch+var_8]
		push	ebx
		push	edx
		call	NSS_CMSContentInfo_SetBulkKey
		mov	eax, [esp+24h+var_4]
		mov	ecx, [esp+24h+arg_0]
		push	eax
		push	ecx
		call	PORT_ArenaUnmark_Util
		push	ebx
		call	PK11_FreeSymKey
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
sub_10003A10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003BD0	proc near		; CODE XREF: sub_100033F0+32p

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		push	edi
		lea	esi, [ebp+14h]
		push	esi
		call	NSS_CMSContentInfo_GetBulkKey
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10003BF0
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10003BF0:				; CODE XREF: sub_10003BD0+17j
		push	ebx
		push	esi
		call	NSS_CMSEnvelopedData_GetContentInfo
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_10003C0D
		push	esi
		call	sub_100015C0
		add	esp, 4
		test	eax, eax
		jz	short loc_10003C15

loc_10003C0D:				; CODE XREF: sub_10003BD0+2Ej
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10003C15:				; CODE XREF: sub_10003BD0+3Bj
		mov	eax, [ebp+5Ch]
		mov	ecx, [eax+44h]
		push	ebx
		push	edi
		push	ecx
		call	sub_10001C80
		mov	edx, [esi+3Ch]
		push	edi
		mov	[edx], eax
		call	PK11_FreeSymKey
		mov	eax, [esi+3Ch]
		mov	eax, [eax]
		add	esp, 10h
		neg	eax
		pop	ebx
		sbb	eax, eax
		pop	edi
		neg	eax
		pop	esi
		dec	eax
		pop	ebp
		retn
sub_10003BD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003C50	proc near		; CODE XREF: sub_10002FD0+23p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+50h]
		test	eax, eax
		jz	short loc_10003C75
		cmp	dword ptr [eax], 0
		jz	short loc_10003C75
		mov	eax, [eax]
		push	eax
		call	sub_10010E10
		mov	ecx, [esi+50h]
		add	esp, 4
		mov	dword ptr [ecx], 0

loc_10003C75:				; CODE XREF: sub_10003C50+Aj
					; sub_10003C50+Fj
		xor	eax, eax
		pop	esi
		retn
sub_10003C50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003C80	proc near		; CODE XREF: sub_10002180+3Cp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	eax, [esi+10h]
		push	eax
		or	ebx, 0FFFFFFFFh
		call	sub_100010A0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10003CAB
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003CAB:				; CODE XREF: sub_10003C80+17j
		mov	ecx, [esi+10h]
		push	ebp
		push	ecx
		call	sub_10004BC0
		mov	ebp, eax
		add	esp, 4
		mov	[esp+0Ch+arg_0], ebp
		test	ebp, ebp
		jz	loc_10003DA0
		mov	edx, [esi+5Ch]
		mov	eax, [edx+58h]
		push	eax
		push	ebp
		call	PK11_FindCertAndKeyByRecipientListNew
		add	esp, 8
		test	eax, eax
		jns	short loc_10003CF6
		push	0FFFFE02Dh
		call	PORT_SetError_Util
		add	esp, 4
		push	ebp
		call	sub_10004B40
		add	esp, 4
		pop	ebp
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003CF6:				; CODE XREF: sub_10003C80+58j
		push	edi
		mov	edi, [ebp+eax*4+0]
		cmp	dword ptr [edi+10h], 0
		jz	loc_10003D96
		cmp	dword ptr [edi+14h], 0
		jz	loc_10003D96
		mov	edx, [esi+10h]
		mov	ecx, [edi]
		mov	ebp, [edx+ecx*4]
		add	esi, 14h
		push	esi
		call	NSS_CMSContentInfo_GetContentEncAlgTag
		add	esp, 4
		test	eax, eax
		jnz	short loc_10003D33
		push	0FFFFE006h
		call	PORT_SetError_Util
		jmp	short loc_10003D8F
; ---------------------------------------------------------------------------

loc_10003D33:				; CODE XREF: sub_10003C80+A5j
		mov	ecx, [edi+10h]
		mov	edx, [edi+4]
		push	eax
		mov	eax, [edi+14h]
		push	eax
		push	ecx
		push	edx
		push	ebp
		call	NSS_CMSRecipientInfo_UnwrapBulkKey
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	short loc_10003D92
		push	edi
		push	esi
		call	NSS_CMSContentInfo_SetBulkKey
		push	esi
		call	NSS_CMSEnvelopedData_GetContentInfo
		push	esi
		mov	ebp, eax
		call	sub_100015C0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_10003D89
		push	ebp
		push	edi
		or	ebx, 0FFFFFFFFh
		call	sub_10001B50
		mov	ecx, [esi+3Ch]
		mov	[ecx], eax
		mov	edx, [esi+3Ch]
		add	esp, 8
		cmp	dword ptr [edx], 0
		jz	short loc_10003D89
		xor	ebx, ebx

loc_10003D89:				; CODE XREF: sub_10003C80+EBj
					; sub_10003C80+105j
		push	edi
		call	PK11_FreeSymKey

loc_10003D8F:				; CODE XREF: sub_10003C80+B1j
		add	esp, 4

loc_10003D92:				; CODE XREF: sub_10003C80+CDj
		mov	ebp, [esp+10h+arg_0]

loc_10003D96:				; CODE XREF: sub_10003C80+7Fj
					; sub_10003C80+89j
		pop	edi
		push	ebp
		call	sub_10004B40
		add	esp, 4

loc_10003DA0:				; CODE XREF: sub_10003C80+40j
		pop	ebp
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
sub_10003C80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003DB0	proc near		; CODE XREF: sub_10002350+9Bp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10003DD9
		mov	eax, [esi+50h]
		test	eax, eax
		jz	short loc_10003DD9
		cmp	dword ptr [eax], 0
		jz	short loc_10003DD9
		mov	eax, [eax]
		push	eax
		call	sub_10010E10
		mov	ecx, [esi+50h]
		add	esp, 4
		mov	dword ptr [ecx], 0

loc_10003DD9:				; CODE XREF: sub_10003DB0+7j
					; sub_10003DB0+Ej ...
		xor	eax, eax
		pop	esi
		retn
sub_10003DB0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  48. NSS_CMSMessage_Create

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSMessage_Create
NSS_CMSMessage_Create proc near		; CODE XREF: NSS_CMSDecoder_Start+6p
					; sub_10004140+13p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		xor	ebx, ebx
		xor	ebp, ebp
		test	edi, edi
		jnz	short loc_10003E0D
		push	400h
		call	PORT_NewArena_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10003E06
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003E06:				; CODE XREF: NSS_CMSMessage_Create+20j
		mov	ebp, 1
		jmp	short loc_10003E18
; ---------------------------------------------------------------------------

loc_10003E0D:				; CODE XREF: NSS_CMSMessage_Create+Dj
		push	edi
		call	PORT_ArenaMark_Util
		add	esp, 4
		mov	ebx, eax

loc_10003E18:				; CODE XREF: NSS_CMSMessage_Create+2Bj
		push	esi
		push	64h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10003E55
		test	ebp, ebp
		jnz	short loc_10003E43
		test	ebx, ebx
		jz	short loc_10003E4E
		push	ebx
		push	edi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003E43:				; CODE XREF: NSS_CMSMessage_Create+4Cj
		push	0
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 8

loc_10003E4E:				; CODE XREF: NSS_CMSMessage_Create+50j
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003E55:				; CODE XREF: NSS_CMSMessage_Create+48j
		push	esi
		call	sub_100015C0
		add	esp, 4
		mov	[esi+44h], edi
		mov	[esi+48h], ebp
		mov	dword ptr [esi+4Ch], 1
		test	ebx, ebx
		jz	short loc_10003E79
		push	ebx
		push	edi
		call	PORT_ArenaUnmark_Util
		add	esp, 8

loc_10003E79:				; CODE XREF: NSS_CMSMessage_Create+8Dj
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn
NSS_CMSMessage_Create endp


; =============== S U B	R O U T	I N E =======================================


sub_10003E80	proc near		; CODE XREF: NSS_CMSDecoder_Start+30p
					; NSS_CMSEncoder_Start+25p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_10003E91
		push	eax
		call	PK11_SetPasswordFunc
		add	esp, 4

loc_10003E91:				; CODE XREF: sub_10003E80+6j
		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_8]
		mov	edx, [esp+arg_C]
		mov	[eax+58h], ecx
		mov	ecx, [esp+arg_10]
		mov	[eax+5Ch], edx
		mov	edx, [esp+arg_14]
		mov	[eax+60h], ecx
		mov	ecx, [esp+arg_18]
		mov	[eax+50h], edx
		mov	[eax+54h], ecx
		retn
sub_10003E80	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  50. NSS_CMSMessage_Destroy

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSMessage_Destroy
NSS_CMSMessage_Destroy proc near	; CODE XREF: NSS_CMSDecoder_Cancel+18p
					; NSS_CMSDecoder_Finish+28p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+4Ch]
		test	eax, eax
		jle	short loc_10003EF1
		dec	eax
		mov	[esi+4Ch], eax
		test	eax, eax
		jg	short loc_10003EF1
		push	esi
		call	sub_10001950
		add	esp, 4
		cmp	dword ptr [esi+48h], 0
		jz	short loc_10003EF1
		mov	eax, [esi+44h]
		push	0
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8

loc_10003EF1:				; CODE XREF: NSS_CMSMessage_Destroy+Aj
					; NSS_CMSMessage_Destroy+12j ...
		pop	esi
		retn
NSS_CMSMessage_Destroy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  47. NSS_CMSMessage_Copy

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSMessage_Copy
NSS_CMSMessage_Copy proc near		; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10003F09
		retn
; ---------------------------------------------------------------------------

loc_10003F09:				; CODE XREF: NSS_CMSMessage_Copy+6j
		inc	dword ptr [eax+4Ch]
		retn
NSS_CMSMessage_Copy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  51. NSS_CMSMessage_GetContent
; [00000005 BYTES: COLLAPSED FUNCTION NSS_CMSMessage_GetContent]
		align 10h
; Exported entry  46. NSS_CMSMessage_ContentLevelCount

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSMessage_ContentLevelCount
NSS_CMSMessage_ContentLevelCount proc near ; DATA XREF:	.rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		xor	esi, esi
		test	eax, eax
		jz	short loc_10003F3E
		jmp	short loc_10003F30
; ---------------------------------------------------------------------------
		align 10h

loc_10003F30:				; CODE XREF: NSS_CMSMessage_ContentLevelCount+Bj
					; NSS_CMSMessage_ContentLevelCount+1Cj
		push	eax
		inc	esi
		call	sub_10001A30
		add	esp, 4
		test	eax, eax
		jnz	short loc_10003F30

loc_10003F3E:				; CODE XREF: NSS_CMSMessage_ContentLevelCount+9j
		mov	eax, esi
		pop	esi
		retn
NSS_CMSMessage_ContentLevelCount endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. NSS_CMSMessage_ContentLevel

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSMessage_ContentLevel
NSS_CMSMessage_ContentLevel proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		xor	esi, esi
		test	eax, eax
		jz	short loc_10003F73
		push	edi
		mov	edi, [esp+8+arg_4]

loc_10003F60:				; CODE XREF: NSS_CMSMessage_ContentLevel+20j
		cmp	esi, edi
		jge	short loc_10003F72
		push	eax
		inc	esi
		call	sub_10001A30
		add	esp, 4
		test	eax, eax
		jnz	short loc_10003F60

loc_10003F72:				; CODE XREF: NSS_CMSMessage_ContentLevel+12j
		pop	edi

loc_10003F73:				; CODE XREF: NSS_CMSMessage_ContentLevel+9j
		pop	esi
		retn
NSS_CMSMessage_ContentLevel endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  53. NSS_CMSMessage_IsEncrypted

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSMessage_IsEncrypted
NSS_CMSMessage_IsEncrypted proc	near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10003FB2
		lea	esp, [esp+0]

loc_10003F90:				; CODE XREF: NSS_CMSMessage_IsEncrypted+30j
		push	esi
		call	NSS_CMSContentInfo_GetContentTypeTag
		add	esp, 4
		cmp	eax, 1Bh
		jz	short loc_10003FB6
		cmp	eax, 1Eh
		jz	short loc_10003FB6
		push	esi
		call	sub_10001A30
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10003F90

loc_10003FB2:				; CODE XREF: NSS_CMSMessage_IsEncrypted+7j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10003FB6:				; CODE XREF: NSS_CMSMessage_IsEncrypted+1Cj
					; NSS_CMSMessage_IsEncrypted+21j
		mov	eax, 1
		pop	esi
		retn
NSS_CMSMessage_IsEncrypted endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  54. NSS_CMSMessage_IsSigned

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSMessage_IsSigned
NSS_CMSMessage_IsSigned	proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10004000
		lea	esp, [esp+0]

loc_10003FD0:				; CODE XREF: NSS_CMSMessage_IsSigned+3Ej
		push	esi
		call	NSS_CMSContentInfo_GetContentTypeTag
		add	esp, 4
		cmp	eax, 1Ah
		jnz	short loc_10003FF1
		mov	eax, [esi+0Ch]
		mov	ecx, [eax+5Ch]
		push	ecx
		call	sub_10001080
		add	esp, 4
		test	eax, eax
		jz	short loc_10004004

loc_10003FF1:				; CODE XREF: NSS_CMSMessage_IsSigned+1Cj
		push	esi
		call	sub_10001A30
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10003FD0

loc_10004000:				; CODE XREF: NSS_CMSMessage_IsSigned+7j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004004:				; CODE XREF: NSS_CMSMessage_IsSigned+2Fj
		mov	eax, 1
		pop	esi
		retn
NSS_CMSMessage_IsSigned	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004010	proc near		; CODE XREF: sub_10004100+2Ap
					; NSS_CMSRecipientInfo_WrapBulkKey+125p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		push	edi
		call	PORT_ArenaMark_Util
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	short loc_10004082
		mov	ebx, [esp+0Ch+arg_4]
		push	ebx
		call	SECKEY_GetPublicKeyType
		add	esp, 4
		cmp	eax, 1
		jnz	short loc_10004078
		push	esi
		push	ebx
		call	SECKEY_PublicKeyStrength
		mov	esi, eax
		push	esi
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	ecx, [esp+1Ch+arg_C]
		add	esp, 0Ch
		mov	[ecx+8], esi
		mov	[ecx+4], eax
		pop	esi
		test	eax, eax
		jz	short loc_10004078
		mov	eax, [esp+0Ch+arg_8]
		push	ecx
		push	eax
		push	ebx
		push	10h
		call	PK11_AlgtagToMechanism
		add	esp, 4
		push	eax
		call	PK11_PubWrapSymKey
		add	esp, 10h
		test	eax, eax
		jz	short loc_10004089

loc_10004078:				; CODE XREF: sub_10004010+26j
					; sub_10004010+48j
		push	ebp
		push	edi
		call	PORT_ArenaRelease_Util
		add	esp, 8

loc_10004082:				; CODE XREF: sub_10004010+14j
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10004089:				; CODE XREF: sub_10004010+66j
		push	ebp
		push	edi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10004010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100040A0	proc near		; CODE XREF: NSS_CMSRecipientInfo_UnwrapBulkKey+8Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	esi
		call	PK11_AlgtagToMechanism
		add	esp, 4
		test	esi, esi
		pop	esi
		jz	short loc_100040D3
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100040D3
		mov	ecx, [esp+arg_0]
		push	0
		push	105h
		push	eax
		mov	eax, [esp+0Ch+arg_4]
		push	eax
		push	ecx
		call	PK11_PubUnwrapSymKey
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_100040D3:				; CODE XREF: sub_100040A0+11j
					; sub_100040A0+16j
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
sub_100040A0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100040F0	proc near		; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+ECp
		or	eax, 0FFFFFFFFh
		retn
sub_100040F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004100	proc near		; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+109p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	esi
		push	eax
		call	CERT_ExtractPublicKey
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10004119
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004119:				; CODE XREF: sub_10004100+12j
		mov	ecx, [esp+4+arg_C]
		mov	edx, [esp+4+arg_8]
		mov	eax, [esp+4+arg_0]
		push	edi
		push	ecx
		push	edx
		push	esi
		push	eax
		call	sub_10004010
		push	esi
		mov	edi, eax
		call	SECKEY_DestroyPublicKey
		add	esp, 14h
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_10004100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004140	proc near		; CODE XREF: NSS_CMSRecipientInfo_Create+14p
					; NSS_CMSRecipientInfo_CreateNew+11p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 14h
		cmp	[esp+14h+arg_0], 0
		mov	[esp+14h+var_14], 0
		jnz	short loc_1000416D
		push	0
		call	NSS_CMSMessage_Create
		mov	ecx, [esp+18h+arg_14]
		add	esp, 4
		mov	[esp+14h+arg_0], eax
		mov	[eax+58h], ecx
		mov	dword ptr [eax+10h], offset dword_10013B88

loc_1000416D:				; CODE XREF: sub_10004140+Fj
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	edi, [ebx+44h]
		push	edi
		call	PORT_ArenaMark_Util
		push	60h
		push	edi
		mov	[esp+30h+var_10], eax
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	loc_100043FF
		mov	eax, [esp+24h+arg_18]
		mov	[esi+58h], ebx
		test	eax, eax
		jz	short loc_100041D5
		push	eax
		lea	edx, [esp+28h+var_C]
		push	edx
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_100043DA
		lea	eax, [esp+24h+var_C]
		push	eax
		push	offset dword_10013968
		push	esi
		push	edi
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_100043DA

loc_100041D5:				; CODE XREF: sub_10004140+60j
		mov	ebx, [esp+24h+arg_4]
		mov	ebp, [esp+24h+arg_8]
		mov	eax, ebx
		sub	eax, 0
		jz	short loc_1000422A
		dec	eax
		jz	short loc_10004217
		dec	eax
		jnz	loc_100043DA

loc_100041EE:				; CODE XREF: sub_10004140+1A8j
					; sub_10004140+275j ...
		mov	edx, [esp+24h+var_10]
		push	edx
		push	edi
		call	PORT_ArenaUnmark_Util
		mov	eax, [esp+2Ch+var_14]
		add	esp, 8
		test	eax, eax
		jz	short loc_1000420D
		push	eax
		call	SECKEY_DestroySubjectPublicKeyInfo
		add	esp, 4

loc_1000420D:				; CODE XREF: sub_10004140+C2j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10004217:				; CODE XREF: sub_10004140+A5j
		mov	ecx, [esp+24h+arg_C]
		push	ecx
		call	SECKEY_CreateSubjectPublicKeyInfo
		add	esp, 4
		mov	[esp+24h+var_14], eax
		jmp	short loc_10004244
; ---------------------------------------------------------------------------

loc_1000422A:				; CODE XREF: sub_10004140+A2j
		push	ebp
		call	CERT_DupCertificate
		add	esp, 4
		mov	[esi+5Ch], eax
		test	eax, eax
		jz	loc_100043DA
		lea	eax, [ebp+0D4h]

loc_10004244:				; CODE XREF: sub_10004140+E8j
		add	eax, 4
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		cmp	eax, 10h
		jz	loc_100042F9
		cmp	eax, 0AEh
		jz	short loc_10004272
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_100043DA
; ---------------------------------------------------------------------------

loc_10004272:				; CODE XREF: sub_10004140+11Ej
		test	ebx, ebx
		jnz	loc_100043DA
		mov	dword ptr [esi], 1
		cmp	[esi+14h], ebx
		jz	loc_100043DA
		push	edi
		call	sub_10004BB0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	loc_100043DA
		push	ebp
		push	edi
		mov	dword ptr [ebx], 0
		call	CERT_GetCertIssuerAndSN
		add	esp, 8
		mov	[ebx+4], eax
		test	eax, eax
		jz	loc_100043DA
		push	ebx
		lea	edx, [esi+54h]
		push	edx
		push	edi
		mov	dword ptr [esi+10h], 2
		call	sub_10001000
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_100043DA

loc_100042D5:				; CODE XREF: sub_10004140+1D3j
					; sub_10004140+23Ej
		mov	eax, [esi]
		sub	eax, 0
		jz	loc_100043BA
		dec	eax
		jz	loc_100043A2
		dec	eax
		jnz	loc_100041EE
		push	4
		lea	ecx, [esi+4]
		push	ecx
		jmp	loc_100043A8
; ---------------------------------------------------------------------------

loc_100042F9:				; CODE XREF: sub_10004140+113j
		mov	dword ptr [esi], 0
		mov	[esi+10h], ebx
		test	ebx, ebx
		jnz	short loc_10004315
		push	ebp
		push	edi
		call	CERT_GetCertIssuerAndSN
		add	esp, 8
		mov	[esi+14h], eax
		jmp	short loc_100042D5
; ---------------------------------------------------------------------------

loc_10004315:				; CODE XREF: sub_10004140+1C4j
		cmp	ebx, 1
		jnz	short loc_10004393
		push	0Ch
		push	edi
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		mov	[esi+14h], eax
		test	eax, eax
		jnz	short loc_1000433E
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_100043DA
; ---------------------------------------------------------------------------

loc_1000433E:				; CODE XREF: sub_10004140+1EAj
		mov	ecx, [esp+24h+arg_10]
		push	ecx
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		mov	edx, [esi+14h]
		add	esp, 0Ch
		cmp	dword ptr [edx+4], 0
		jnz	short loc_10004365
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_100043DA
; ---------------------------------------------------------------------------

loc_10004365:				; CODE XREF: sub_10004140+214j
		mov	eax, [esp+24h+arg_C]
		push	eax
		mov	dword ptr [esi+3Ch], 0
		call	SECKEY_CopyPublicKey
		add	esp, 4
		mov	[esi+40h], eax
		test	eax, eax
		jnz	loc_100042D5
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_100043DA
; ---------------------------------------------------------------------------

loc_10004393:				; CODE XREF: sub_10004140+1D8j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_100043DA
; ---------------------------------------------------------------------------

loc_100043A2:				; CODE XREF: sub_10004140+1A1j
		push	3
		lea	edx, [esi+4]
		push	edx

loc_100043A8:				; CODE XREF: sub_10004140+1B4j
		push	edi
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100043DA
		jmp	loc_100041EE
; ---------------------------------------------------------------------------

loc_100043BA:				; CODE XREF: sub_10004140+19Aj
		mov	eax, [esi+10h]
		neg	eax
		sbb	eax, eax
		and	eax, 2
		push	eax
		lea	eax, [esi+4]
		push	eax
		push	edi
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_100041EE

loc_100043DA:				; CODE XREF: sub_10004140+73j
					; sub_10004140+8Fj ...
		mov	esi, [esi+5Ch]
		test	esi, esi
		jz	short loc_100043EA
		push	esi
		call	CERT_DestroyCertificate
		add	esp, 4

loc_100043EA:				; CODE XREF: sub_10004140+29Fj
		mov	eax, [esp+24h+var_14]
		test	eax, eax
		jz	short loc_100043FB
		push	eax
		call	SECKEY_DestroySubjectPublicKeyInfo
		add	esp, 4

loc_100043FB:				; CODE XREF: sub_10004140+2B0j
		mov	ebx, [esp+24h+arg_0]

loc_100043FF:				; CODE XREF: sub_10004140+51j
		mov	ecx, [esp+24h+var_10]
		push	ecx
		push	edi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		cmp	dword ptr [ebx+10h], offset dword_10013B88
		jnz	short loc_1000441F
		push	ebx
		call	NSS_CMSMessage_Destroy
		add	esp, 4

loc_1000441F:				; CODE XREF: sub_10004140+2D4j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
sub_10004140	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  55. NSS_CMSRecipientInfo_Create

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_Create
NSS_CMSRecipientInfo_Create proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		push	0
		push	0
		push	0
		push	0
		push	eax
		push	0
		push	ecx
		call	sub_10004140
		add	esp, 1Ch
		retn
NSS_CMSRecipientInfo_Create endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  57. NSS_CMSRecipientInfo_CreateNew

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_CreateNew
NSS_CMSRecipientInfo_CreateNew proc near ; DATA	XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0
		push	eax
		push	0
		push	0
		push	0
		push	2
		push	0
		call	sub_10004140
		add	esp, 1Ch
		retn
NSS_CMSRecipientInfo_CreateNew endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  56. NSS_CMSRecipientInfo_CreateFromDER

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_CreateFromDER
NSS_CMSRecipientInfo_CreateFromDER proc	near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		push	eax
		push	ecx
		push	0
		push	0
		push	0
		push	2
		push	0
		call	sub_10004140
		add	esp, 1Ch
		retn
NSS_CMSRecipientInfo_CreateFromDER endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  58. NSS_CMSRecipientInfo_CreateWithSubjKeyID

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_CreateWithSubjKeyID
NSS_CMSRecipientInfo_CreateWithSubjKeyID proc near
					; CODE XREF: NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert+53p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_8]
		mov	edx, [esp+arg_0]
		push	0
		push	0
		push	eax
		push	ecx
		push	0
		push	1
		push	edx
		call	sub_10004140
		add	esp, 1Ch
		retn
NSS_CMSRecipientInfo_CreateWithSubjKeyID endp

; Exported entry  59. NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert
NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert proc near ; DATA XREF:	.rdata:off_10016AC8o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		push	ebp
		xor	ebp, ebp
		push	edi
		mov	[esp+18h+var_C], ebp
		mov	[esp+18h+var_8], ebp
		mov	[esp+18h+var_4], ebp
		cmp	ebx, ebp
		jz	short loc_10004536
		mov	edi, [esp+18h+arg_4]
		cmp	edi, ebp
		jz	short loc_10004536
		push	esi
		push	edi
		call	CERT_ExtractPublicKey
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10004516
		lea	eax, [esp+1Ch+var_C]
		push	eax
		push	edi
		call	CERT_FindSubjectKeyIDExtension
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000450D
		cmp	[esp+1Ch+var_8], ebp
		jz	short loc_1000450D
		push	esi
		lea	ecx, [esp+20h+var_C]
		push	ecx
		push	ebx
		call	NSS_CMSRecipientInfo_CreateWithSubjKeyID
		add	esp, 0Ch
		mov	ebp, eax

loc_1000450D:				; CODE XREF: NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert+44j
					; NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert+4Aj
		push	esi
		call	SECKEY_DestroyPublicKey
		add	esp, 4

loc_10004516:				; CODE XREF: NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert+32j
		cmp	[esp+1Ch+var_8], 0
		pop	esi
		jz	short loc_1000452D
		lea	edx, [esp+18h+var_C]
		push	0
		push	edx
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1000452D:				; CODE XREF: NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert+6Cj
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10004536:				; CODE XREF: NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert+1Aj
					; NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert+22j
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  60. NSS_CMSRecipientInfo_Destroy

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_Destroy
NSS_CMSRecipientInfo_Destroy proc near	; CODE XREF: NSS_CMSEnvelopedData_Destroy+1Bp
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000458D
		mov	eax, [esi+5Ch]
		test	eax, eax
		jz	short loc_10004559
		push	eax
		call	CERT_DestroyCertificate
		add	esp, 4

loc_10004559:				; CODE XREF: NSS_CMSRecipientInfo_Destroy+Ej
		cmp	dword ptr [esi], 0
		jnz	short loc_10004574
		cmp	dword ptr [esi+10h], 1
		jnz	short loc_10004574
		mov	eax, [esi+40h]
		test	eax, eax
		jz	short loc_10004574
		push	eax
		call	SECKEY_DestroyPublicKey
		add	esp, 4

loc_10004574:				; CODE XREF: NSS_CMSRecipientInfo_Destroy+1Cj
					; NSS_CMSRecipientInfo_Destroy+22j ...
		mov	esi, [esi+58h]
		test	esi, esi
		jz	short loc_1000458D
		cmp	dword ptr [esi+10h], offset dword_10013B88
		jnz	short loc_1000458D
		push	esi
		call	NSS_CMSMessage_Destroy
		add	esp, 4

loc_1000458D:				; CODE XREF: NSS_CMSRecipientInfo_Destroy+7j
					; NSS_CMSRecipientInfo_Destroy+39j ...
		pop	esi
		retn
NSS_CMSRecipientInfo_Destroy endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004590	proc near		; CODE XREF: sub_10003A10+53p

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		mov	eax, [ecx]
		sub	eax, 0
		jz	short loc_100045A1
		dec	eax
		jz	short loc_100045A1
		dec	eax
		jnz	short loc_100045A8

loc_100045A1:				; CODE XREF: sub_10004590+9j
					; sub_10004590+Cj
		lea	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_100045AB

loc_100045A8:				; CODE XREF: sub_10004590+Fj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100045AB:				; CODE XREF: sub_10004590+16j
		lea	ecx, [esp+arg_0]
		push	ecx
		push	eax
		call	SEC_ASN1DecodeInteger_Util
		add	esp, 8
		neg	eax
		sbb	eax, eax
		not	eax
		and	eax, [esp+arg_0]
		retn
sub_10004590	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  64. NSS_CMSRecipientInfo_WrapBulkKey

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_WrapBulkKey
NSS_CMSRecipientInfo_WrapBulkKey proc near ; CODE XREF:	sub_10003A10+13Bp
					; DATA XREF: .rdata:off_10016AC8o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		mov	eax, [esi+58h]
		mov	ebx, [eax+44h]
		xor	ecx, ecx
		push	edi
		mov	edi, [esi+5Ch]
		xor	ebp, ebp
		mov	[esp+18h+var_4], ecx
		mov	[esp+18h+var_8], edi
		cmp	[esi], ecx
		jnz	short loc_10004602
		mov	eax, 1
		mov	[esp+18h+arg_0], eax
		cmp	[esi+10h], eax
		jz	short loc_10004606

loc_10004602:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+22j
		mov	[esp+18h+arg_0], ecx

loc_10004606:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+30j
		cmp	edi, ecx
		jz	short loc_1000461B
		add	edi, 0D8h
		push	edi
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		jmp	short loc_10004649
; ---------------------------------------------------------------------------

loc_1000461B:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+38j
		cmp	[esp+18h+arg_0], ecx
		jz	loc_10004731
		mov	eax, [esi+40h]
		lea	ebp, [esi+4]
		cmp	eax, ecx
		jz	loc_10004731
		push	eax
		call	SECKEY_CreateSubjectPublicKeyInfo
		lea	edi, [eax+4]
		push	edi
		mov	[esp+20h+var_4], eax
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 8

loc_10004649:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+49j
		push	edi
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		cmp	eax, 10h
		jz	short loc_100046C6
		cmp	eax, 0AEh
		jz	short loc_10004673
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		or	edi, 0FFFFFFFFh
		jmp	loc_10004716
; ---------------------------------------------------------------------------

loc_10004673:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+8Cj
		mov	ecx, [esi+54h]
		mov	edi, [ecx]
		test	edi, edi
		jnz	short loc_10004684
		or	edi, 0FFFFFFFFh
		jmp	loc_10004716
; ---------------------------------------------------------------------------

loc_10004684:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+AAj
		push	0
		push	0AEh
		lea	edx, [esi+14h]
		push	edx
		push	ebx
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_100046A1
		or	edi, 0FFFFFFFFh
		jmp	short loc_10004716
; ---------------------------------------------------------------------------

loc_100046A1:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+CAj
		mov	edx, [esp+18h+arg_4]
		lea	eax, [esi+2Ch]
		push	eax
		mov	eax, [esp+1Ch+var_8]
		lea	ecx, [esi+3Ch]
		push	ecx
		add	esi, 38h
		push	esi
		add	edi, 10h
		push	edi
		push	edx
		push	eax
		push	ebx
		call	sub_100040F0
		add	esp, 1Ch
		jmp	short loc_10004714
; ---------------------------------------------------------------------------

loc_100046C6:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+85j
		mov	eax, [esp+18h+var_8]
		test	eax, eax
		jz	short loc_100046E0
		mov	edx, [esp+18h+arg_4]
		lea	ecx, [esi+30h]
		push	ecx
		push	edx
		push	eax
		push	ebx
		call	sub_10004100
		jmp	short loc_100046FA
; ---------------------------------------------------------------------------

loc_100046E0:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+FCj
		cmp	[esp+18h+arg_0], 0
		jz	short loc_10004703
		mov	ecx, [esp+18h+arg_4]
		mov	edx, [ebp+3Ch]
		lea	eax, [esi+30h]
		push	eax
		push	ecx
		push	edx
		push	ebx
		call	sub_10004010

loc_100046FA:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+10Ej
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_10004716

loc_10004703:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+115j
		push	0
		push	10h
		add	esi, 18h
		push	esi
		push	ebx
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h

loc_10004714:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+F4j
		mov	edi, eax

loc_10004716:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+9Ej
					; NSS_CMSRecipientInfo_WrapBulkKey+AFj	...
		mov	eax, [esp+18h+var_4]
		test	eax, eax
		jz	short loc_10004727
		push	eax
		call	SECKEY_DestroySubjectPublicKeyInfo
		add	esp, 4

loc_10004727:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+14Cj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10004731:				; CODE XREF: NSS_CMSRecipientInfo_WrapBulkKey+4Fj
					; NSS_CMSRecipientInfo_WrapBulkKey+5Dj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
NSS_CMSRecipientInfo_WrapBulkKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  63. NSS_CMSRecipientInfo_UnwrapBulkKey

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_UnwrapBulkKey
NSS_CMSRecipientInfo_UnwrapBulkKey proc	near ; CODE XREF: sub_10003C80+C1p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_8]
		push	esi
		push	eax
		xor	esi, esi
		call	CERT_DupCertificate
		mov	ecx, [esp+8+arg_0]
		mov	[ecx+5Ch], eax
		mov	eax, [ecx]
		add	esp, 4
		sub	eax, esi
		jz	short loc_100047AD
		dec	eax
		jz	short loc_10004790
		dec	eax
		jnz	short loc_100047E7
		add	ecx, 24h
		push	ecx
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		push	0FFFFE030h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004790:				; CODE XREF: NSS_CMSRecipientInfo_UnwrapBulkKey+1Ej
		add	ecx, 3Ch
		push	ecx
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		push	0FFFFE030h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100047AD:				; CODE XREF: NSS_CMSRecipientInfo_UnwrapBulkKey+1Bj
		lea	esi, [ecx+30h]
		add	ecx, 18h
		push	ecx
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		cmp	eax, 10h
		jz	short loc_100047D2
		push	0FFFFE030h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100047D2:				; CODE XREF: NSS_CMSRecipientInfo_UnwrapBulkKey+6Fj
		mov	ecx, [esp+4+arg_10]
		mov	edx, [esp+4+arg_C]
		push	ecx
		push	esi
		push	edx
		call	sub_100040A0
		add	esp, 0Ch
		mov	esi, eax

loc_100047E7:				; CODE XREF: NSS_CMSRecipientInfo_UnwrapBulkKey+21j
		mov	eax, esi
		pop	esi
		retn
NSS_CMSRecipientInfo_UnwrapBulkKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  62. NSS_CMSRecipientInfo_GetCertAndKey

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_GetCertAndKey
NSS_CMSRecipientInfo_GetCertAndKey proc	near ; DATA XREF: .rdata:off_10016AC8o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		push	ebx
		mov	ebx, [esp+14h+arg_0]
		push	edi
		xor	edi, edi
		mov	[esp+18h+var_C], edi
		mov	[esp+18h+var_10], edi
		cmp	ebx, edi
		jnz	short loc_10004810
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10004810:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+15j
		push	ebp
		mov	ebp, [esp+1Ch+arg_8]
		push	esi
		mov	esi, [esp+20h+arg_4]
		cmp	esi, edi
		jnz	short loc_1000482C
		cmp	ebp, edi
		jnz	short loc_10004832
		pop	esi
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000482C:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+2Cj
		mov	[esi], edi
		cmp	ebp, edi
		jz	short loc_10004835

loc_10004832:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+30j
		mov	[ebp+0], edi

loc_10004835:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+40j
		mov	eax, [ebx+5Ch]
		cmp	eax, edi
		jz	short loc_1000485C
		push	eax
		call	CERT_DupCertificate
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	loc_100048DE
		mov	[esp+20h+var_C], 0FFFFFFFFh
		jmp	loc_100048FD
; ---------------------------------------------------------------------------

loc_1000485C:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+4Aj
		lea	eax, [esp+20h+var_8]
		push	eax
		mov	[esp+24h+var_8], ebx
		mov	[esp+24h+var_4], edi
		call	sub_10004BC0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_100048D0
		mov	ecx, [ebx+58h]
		mov	edx, [ecx+58h]
		push	edx
		push	esi
		call	PK11_FindCertAndKeyByRecipientListNew
		add	esp, 8
		test	eax, eax
		jnz	short loc_100048B9
		mov	eax, [esi]
		mov	ecx, [eax+10h]
		push	ecx
		call	CERT_DupCertificate
		mov	edx, [esi]
		mov	edi, eax
		mov	eax, [edx+14h]
		push	eax
		call	SECKEY_CopyPrivateKey
		add	esp, 8
		push	esi
		mov	[esp+24h+var_10], eax
		call	sub_10004B40
		mov	esi, [esp+24h+arg_4]
		add	esp, 4
		jmp	short loc_100048FD
; ---------------------------------------------------------------------------

loc_100048B9:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+99j
		push	esi
		mov	[esp+24h+var_C], 0FFFFFFFFh
		call	sub_10004B40
		mov	esi, [esp+24h+arg_4]
		add	esp, 4
		jmp	short loc_100048FD
; ---------------------------------------------------------------------------

loc_100048D0:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+85j
		mov	esi, [esp+20h+arg_4]
		mov	[esp+20h+var_C], 0FFFFFFFFh
		jmp	short loc_100048FD
; ---------------------------------------------------------------------------

loc_100048DE:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+59j
		test	ebp, ebp
		jz	short loc_100048FD
		mov	ecx, [ebx+58h]
		mov	edx, [ecx+58h]
		mov	eax, [edi+17Ch]
		push	edx
		push	edi
		push	eax
		call	PK11_FindPrivateKeyFromCert
		add	esp, 0Ch
		mov	[esp+20h+var_10], eax

loc_100048FD:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+67j
					; NSS_CMSRecipientInfo_GetCertAndKey+C7j ...
		test	esi, esi
		jz	short loc_10004905
		mov	[esi], edi
		jmp	short loc_10004912
; ---------------------------------------------------------------------------

loc_10004905:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+10Fj
		test	edi, edi
		jz	short loc_10004912
		push	edi
		call	CERT_DestroyCertificate
		add	esp, 4

loc_10004912:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+113j
					; NSS_CMSRecipientInfo_GetCertAndKey+117j
		test	ebp, ebp
		jz	short loc_10004929
		mov	ecx, [esp+20h+var_10]
		mov	eax, [esp+20h+var_C]
		pop	esi
		mov	[ebp+0], ecx
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10004929:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+124j
		mov	eax, [esp+20h+var_10]
		test	eax, eax
		jz	short loc_1000493A
		push	eax
		call	SECKEY_DestroyPrivateKey
		add	esp, 4

loc_1000493A:				; CODE XREF: NSS_CMSRecipientInfo_GetCertAndKey+13Fj
		mov	eax, [esp+20h+var_C]
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
NSS_CMSRecipientInfo_GetCertAndKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  61. NSS_CMSRecipientInfo_Encode

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSRecipientInfo_Encode
NSS_CMSRecipientInfo_Encode proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		push	esi
		or	esi, 0FFFFFFFFh
		test	ecx, ecx
		jz	short loc_10004980
		mov	eax, [esp+4+arg_8]
		test	eax, eax
		jz	short loc_10004980
		push	offset dword_10013968
		push	ecx
		push	eax
		mov	eax, [esp+10h+arg_0]
		push	eax
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000498D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004980:				; CODE XREF: NSS_CMSRecipientInfo_Encode+Aj
					; NSS_CMSRecipientInfo_Encode+12j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000498D:				; CODE XREF: NSS_CMSRecipientInfo_Encode+2Aj
		mov	eax, esi
		pop	esi
		retn
NSS_CMSRecipientInfo_Encode endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100049A0	proc near		; CODE XREF: sub_10004BC0+8p
					; sub_10004BC0+3Ep

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		mov	eax, [esp+8+arg_0]
		push	ebx
		push	ebp
		xor	ebp, ebp
		push	esi
		push	edi
		mov	[esp+18h+var_4], 0
		mov	[esp+18h+var_8], 0
		cmp	[eax], ebp
		jz	loc_10004AF3

loc_100049C5:				; CODE XREF: sub_100049A0+14Dj
		mov	ebx, [eax]
		mov	eax, [ebx]
		sub	eax, 0
		jz	loc_10004A69
		dec	eax
		jnz	loc_10004AE1
		mov	eax, [ebx+54h]
		test	eax, eax
		jz	loc_10004AE1
		xor	edi, edi
		cmp	[eax], edi
		jz	loc_10004AE1
		mov	edi, edi

loc_100049F0:				; CODE XREF: sub_100049A0+C5j
		cmp	[esp+18h+arg_4], 0
		jz	short loc_10004A59
		mov	esi, [eax+edi*4]
		push	1Ch
		call	PORT_ZAlloc_Util
		add	esp, 4
		test	eax, eax
		jz	loc_10004B1D
		mov	[eax], ebp
		mov	[eax+4], edi
		mov	ecx, [esi]
		sub	ecx, 0
		jz	short loc_10004A3A
		dec	ecx
		jnz	short loc_10004A47
		mov	edx, [esp+18h+arg_4]
		mov	dword ptr [eax+8], 1
		mov	ecx, [esi+4]
		mov	[eax+0Ch], ecx
		mov	ecx, [esp+18h+var_8]
		mov	[edx+ecx*4], eax
		inc	ecx
		mov	[esp+18h+var_8], ecx
		jmp	short loc_10004A5D
; ---------------------------------------------------------------------------

loc_10004A3A:				; CODE XREF: sub_100049A0+76j
		mov	dword ptr [eax+8], 0
		mov	edx, [esi+4]
		mov	[eax+0Ch], edx

loc_10004A47:				; CODE XREF: sub_100049A0+79j
		mov	ecx, [esp+18h+var_8]
		mov	edx, [esp+18h+arg_4]
		mov	[edx+ecx*4], eax
		inc	ecx
		mov	[esp+18h+var_8], ecx
		jmp	short loc_10004A5D
; ---------------------------------------------------------------------------

loc_10004A59:				; CODE XREF: sub_100049A0+55j
		inc	[esp+18h+var_4]

loc_10004A5D:				; CODE XREF: sub_100049A0+98j
					; sub_100049A0+B7j
		mov	eax, [ebx+54h]
		inc	edi
		cmp	dword ptr [eax+edi*4], 0
		jnz	short loc_100049F0
		jmp	short loc_10004AE1
; ---------------------------------------------------------------------------

loc_10004A69:				; CODE XREF: sub_100049A0+2Cj
		mov	esi, [esp+18h+arg_4]
		test	esi, esi
		jz	short loc_10004ADD
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_10004A81
		cmp	eax, 1
		jnz	loc_10004B10

loc_10004A81:				; CODE XREF: sub_100049A0+D6j
		push	1Ch
		call	PORT_ZAlloc_Util
		add	esp, 4
		test	eax, eax
		jz	loc_10004B1D
		mov	[eax], ebp
		mov	dword ptr [eax+4], 0FFFFFFFFh
		mov	ecx, [ebx+10h]
		sub	ecx, 0
		jz	short loc_10004AC2
		dec	ecx
		jnz	short loc_10004ACF
		mov	dword ptr [eax+8], 1
		mov	ecx, [ebx+14h]
		mov	[eax+0Ch], ecx
		mov	ecx, [esp+18h+var_8]
		mov	[esi+ecx*4], eax
		inc	ecx
		mov	[esp+18h+var_8], ecx
		jmp	short loc_10004AE1
; ---------------------------------------------------------------------------

loc_10004AC2:				; CODE XREF: sub_100049A0+102j
		mov	dword ptr [eax+8], 0
		mov	edx, [ebx+14h]
		mov	[eax+0Ch], edx

loc_10004ACF:				; CODE XREF: sub_100049A0+105j
		mov	ecx, [esp+18h+var_8]
		mov	[esi+ecx*4], eax
		inc	ecx
		mov	[esp+18h+var_8], ecx
		jmp	short loc_10004AE1
; ---------------------------------------------------------------------------

loc_10004ADD:				; CODE XREF: sub_100049A0+CFj
		inc	[esp+18h+var_4]

loc_10004AE1:				; CODE XREF: sub_100049A0+33j
					; sub_100049A0+3Ej ...
		mov	eax, [esp+18h+arg_0]
		inc	ebp
		cmp	dword ptr [eax+ebp*4], 0
		lea	eax, [eax+ebp*4]
		jnz	loc_100049C5

loc_10004AF3:				; CODE XREF: sub_100049A0+1Fj
		mov	eax, [esp+18h+arg_4]
		test	eax, eax
		jz	short loc_10004B28
		mov	ecx, [esp+18h+var_8]
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax+ecx*4], 0
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10004B10:				; CODE XREF: sub_100049A0+DBj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_10004B1D:				; CODE XREF: sub_100049A0+66j
					; sub_100049A0+EDj
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10004B28:				; CODE XREF: sub_100049A0+159j
		mov	eax, [esp+18h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
sub_100049A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004B40	proc near		; CODE XREF: sub_10003C80+68p
					; sub_10003C80+118p ...

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		cmp	[ebx], edi
		jz	short loc_10004B95
		mov	eax, ebx
		push	esi
		nop

loc_10004B50:				; CODE XREF: sub_10004B40+52j
		mov	esi, [eax]
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_10004B62
		push	eax
		call	CERT_DestroyCertificate
		add	esp, 4

loc_10004B62:				; CODE XREF: sub_10004B40+17j
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_10004B72
		push	eax
		call	SECKEY_DestroyPrivateKey
		add	esp, 4

loc_10004B72:				; CODE XREF: sub_10004B40+27j
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_10004B82
		push	eax
		call	PK11_FreeSlot
		add	esp, 4

loc_10004B82:				; CODE XREF: sub_10004B40+37j
		push	esi
		call	PORT_Free_Util
		inc	edi
		lea	eax, [ebx+edi*4]
		add	esp, 4
		cmp	dword ptr [eax], 0
		jnz	short loc_10004B50
		pop	esi

loc_10004B95:				; CODE XREF: sub_10004B40+Aj
		push	ebx
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		pop	ebx
		retn
sub_10004B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004BB0	proc near		; CODE XREF: sub_10004140+14Ap

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	1Ch
		push	eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		retn
sub_10004BB0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004BC0	proc near		; CODE XREF: sub_10003C80+30p
					; NSS_CMSRecipientInfo_GetCertAndKey+79p

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		push	0
		push	edi
		call	sub_100049A0
		add	esp, 8
		test	eax, eax
		jg	short loc_10004BE5
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10004BE5:				; CODE XREF: sub_10004BC0+12j
		lea	eax, ds:4[eax*4]
		push	esi
		push	eax
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10004C13
		push	esi
		push	edi
		call	sub_100049A0
		add	esp, 8
		test	eax, eax
		jns	short loc_10004C18
		push	esi
		call	sub_10004B40
		add	esp, 4

loc_10004C13:				; CODE XREF: sub_10004BC0+3Aj
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10004C18:				; CODE XREF: sub_10004BC0+48j
		mov	eax, esi
		pop	esi
		pop	edi
		retn
sub_10004BC0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  70. NSS_CMSSignedData_Create

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_Create
NSS_CMSSignedData_Create proc near	; CODE XREF: NSS_CMSSignedData_CreateCertsOnly+2Ap
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		test	ebp, ebp
		jnz	short loc_10004C3A
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10004C3A:				; CODE XREF: NSS_CMSSignedData_Create+7j
		push	ebx
		push	esi
		mov	esi, [ebp+44h]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	74h
		push	esi
		mov	ebx, eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 0Ch
		mov	edi, eax
		push	ebx
		push	esi
		test	edi, edi
		jnz	short loc_10004C6A
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10004C6A:				; CODE XREF: NSS_CMSSignedData_Create+39j
		mov	[edi+60h], ebp
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
NSS_CMSSignedData_Create endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  72. NSS_CMSSignedData_Destroy

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_Destroy
NSS_CMSSignedData_Destroy proc near	; CODE XREF: sub_10001950+42p
					; NSS_CMSSignedData_CreateCertsOnly+69p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	locret_10004D2E
		push	ebx
		mov	ebx, [ecx+6Ch]
		push	ebp
		mov	ebp, [ecx+5Ch]
		push	esi
		mov	esi, [ecx+68h]
		push	edi
		mov	edi, [ecx+70h]
		test	esi, esi
		jz	short loc_10004CBC
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10004CBC

loc_10004CA6:				; CODE XREF: NSS_CMSSignedData_Destroy+36j
		push	eax
		add	esi, 4
		call	CERT_DestroyCertificate
		mov	eax, [esi]
		add	esp, 4
		test	eax, eax
		jnz	short loc_10004CA6
		mov	ecx, [esp+10h+arg_0]

loc_10004CBC:				; CODE XREF: NSS_CMSSignedData_Destroy+1Ej
					; NSS_CMSSignedData_Destroy+24j
		test	edi, edi
		jz	short loc_10004CDC
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_10004CDC

loc_10004CC6:				; CODE XREF: NSS_CMSSignedData_Destroy+56j
		push	eax
		add	edi, 4
		call	CERT_DestroyCertificate
		mov	eax, [edi]
		add	esp, 4
		test	eax, eax
		jnz	short loc_10004CC6
		mov	ecx, [esp+10h+arg_0]

loc_10004CDC:				; CODE XREF: NSS_CMSSignedData_Destroy+3Ej
					; NSS_CMSSignedData_Destroy+44j
		test	ebx, ebx
		jz	short loc_10004CFC
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_10004CFC

loc_10004CE6:				; CODE XREF: NSS_CMSSignedData_Destroy+76j
		push	eax
		add	ebx, 4
		call	CERT_DestroyCertificateList
		mov	eax, [ebx]
		add	esp, 4
		test	eax, eax
		jnz	short loc_10004CE6
		mov	ecx, [esp+10h+arg_0]

loc_10004CFC:				; CODE XREF: NSS_CMSSignedData_Destroy+5Ej
					; NSS_CMSSignedData_Destroy+64j
		test	ebp, ebp
		jz	short loc_10004D1E
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_10004D1E

loc_10004D07:				; CODE XREF: NSS_CMSSignedData_Destroy+98j
		push	eax
		add	ebp, 4
		call	NSS_CMSSignerInfo_Destroy
		mov	eax, [ebp+0]
		add	esp, 4
		test	eax, eax
		jnz	short loc_10004D07
		mov	ecx, [esp+10h+arg_0]

loc_10004D1E:				; CODE XREF: NSS_CMSSignedData_Destroy+7Ej
					; NSS_CMSSignedData_Destroy+85j
		pop	edi
		pop	esi
		pop	ebp
		add	ecx, 10h
		pop	ebx
		mov	[esp+arg_0], ecx
		jmp	sub_10001950
; ---------------------------------------------------------------------------

locret_10004D2E:			; CODE XREF: NSS_CMSSignedData_Destroy+6j
		retn
NSS_CMSSignedData_Destroy endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004D30	proc near		; CODE XREF: sub_100033F0+16p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10004D4B
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_10004D46:				; CODE XREF: sub_10004D30+29j
					; sub_10004D30+62j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004D4B:				; CODE XREF: sub_10004D30+7j
		lea	eax, [esi+10h]
		push	eax
		call	sub_100015C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10004D46
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_10004D75
		cmp	dword ptr [eax], 0
		jz	short loc_10004D75
		mov	ecx, [esi+4Ch]
		mov	dword ptr [ecx+4], 0
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004D75:				; CODE XREF: sub_10004D30+30j
					; sub_10004D30+35j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_10004D94
		push	eax
		call	NSS_CMSDigestContext_StartMultiple
		mov	edx, [esi+4Ch]
		mov	[edx+4], eax
		mov	eax, [esi+4Ch]
		add	esp, 4
		cmp	dword ptr [eax+4], 0
		jz	short loc_10004D46

loc_10004D94:				; CODE XREF: sub_10004D30+4Aj
		xor	eax, eax
		pop	esi
		retn
sub_10004D30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004DA0	proc near		; CODE XREF: sub_10002180+20p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10004DBB
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_10004DB6:				; CODE XREF: sub_10004DA0+29j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004DBB:				; CODE XREF: sub_10004DA0+7j
		lea	eax, [esi+10h]
		push	eax
		call	sub_100015C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10004DB6
		mov	eax, [esi+0Ch]
		push	ebx
		push	ebp
		push	edi
		test	eax, eax
		jz	short loc_10004E24
		xor	ebp, ebp
		cmp	[eax], ebp
		jz	short loc_10004E24
		xor	ecx, ecx
		lea	ecx, [ecx+0]

loc_10004DE0:				; CODE XREF: sub_10004DA0+82j
		mov	edi, [ecx+eax]
		push	edi
		call	SECOID_FindOIDTag_Util
		mov	ebx, eax
		push	ebx
		call	sub_100071E0
		add	esp, 8
		cmp	eax, ebx
		jz	short loc_10004E13
		push	eax
		call	SECOID_FindOIDByTag_Util
		mov	ecx, [esi+60h]
		mov	edx, [ecx+44h]
		push	eax
		push	edi
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10004E53

loc_10004E13:				; CODE XREF: sub_10004DA0+56j
		mov	eax, [esi+0Ch]
		inc	ebp
		lea	ecx, ds:0[ebp*4]
		cmp	dword ptr [ecx+eax], 0
		jnz	short loc_10004DE0

loc_10004E24:				; CODE XREF: sub_10004DA0+33j
					; sub_10004DA0+39j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_10004E51
		cmp	dword ptr [esi+64h], 0
		jnz	short loc_10004E51
		push	eax
		call	NSS_CMSDigestContext_StartMultiple
		mov	ecx, [esi+4Ch]
		mov	[ecx+4], eax
		mov	edx, [esi+4Ch]
		add	esp, 4
		cmp	dword ptr [edx+4], 0
		jnz	short loc_10004E51
		pop	edi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004E51:				; CODE XREF: sub_10004DA0+89j
					; sub_10004DA0+8Fj ...
		xor	eax, eax

loc_10004E53:				; CODE XREF: sub_10004DA0+71j
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
sub_10004DA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004E60	proc near		; CODE XREF: sub_10002350+8Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		xor	eax, eax
		test	esi, esi
		jnz	short loc_10004E7D
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004E7D:				; CODE XREF: sub_10004E60+9j
		mov	ecx, [esi+4Ch]
		test	ecx, ecx
		jz	short loc_10004EA9
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short loc_10004EA9
		mov	edx, [esi+60h]
		lea	eax, [esi+64h]
		push	eax
		mov	eax, [edx+44h]
		push	eax
		push	ecx
		call	NSS_CMSDigestContext_FinishMultiple
		mov	ecx, [esi+4Ch]
		add	esp, 0Ch
		mov	dword ptr [ecx+4], 0

loc_10004EA9:				; CODE XREF: sub_10004E60+22j
					; sub_10004E60+29j
		pop	esi
		retn
sub_10004E60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004EB0	proc near		; CODE XREF: sub_10001DF0+1Dp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10004ECB
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004ECB:				; CODE XREF: sub_10004EB0+7j
		mov	edx, [esi+5Ch]
		test	edx, edx
		jz	short loc_10004EEF
		mov	eax, [edx]
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_10004EEF
		push	edi
		jmp	short loc_10004EE0
; ---------------------------------------------------------------------------
		align 10h

loc_10004EE0:				; CODE XREF: sub_10004EB0+2Bj
					; sub_10004EB0+3Cj
		mov	edi, [esi+60h]
		inc	ecx
		mov	[eax+58h], edi
		mov	eax, [edx+ecx*4]
		test	eax, eax
		jnz	short loc_10004EE0
		pop	edi

loc_10004EEF:				; CODE XREF: sub_10004EB0+20j
					; sub_10004EB0+28j
		xor	eax, eax
		pop	esi
		retn
sub_10004EB0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  80. NSS_CMSSignedData_SignerInfoCount

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_SignerInfoCount
NSS_CMSSignedData_SignerInfoCount proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10004F18
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10004F18:				; CODE XREF: NSS_CMSSignedData_SignerInfoCount+6j
		mov	eax, [eax+5Ch]
		mov	[esp+arg_0], eax
		jmp	sub_100010A0
NSS_CMSSignedData_SignerInfoCount endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  75. NSS_CMSSignedData_GetSignerInfo

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_GetSignerInfo
NSS_CMSSignedData_GetSignerInfo	proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10004F48
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10004F48:				; CODE XREF: NSS_CMSSignedData_GetSignerInfo+6j
		mov	eax, [eax+5Ch]
		mov	ecx, [esp+arg_4]
		mov	eax, [eax+ecx*4]
		retn
NSS_CMSSignedData_GetSignerInfo	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  74. NSS_CMSSignedData_GetDigestAlgs

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_GetDigestAlgs
NSS_CMSSignedData_GetDigestAlgs	proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10004F78
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10004F78:				; CODE XREF: NSS_CMSSignedData_GetDigestAlgs+6j
		mov	eax, [eax+0Ch]
		retn
NSS_CMSSignedData_GetDigestAlgs	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  73. NSS_CMSSignedData_GetContentInfo

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_GetContentInfo
NSS_CMSSignedData_GetContentInfo proc near ; DATA XREF:	.rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10004F98
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10004F98:				; CODE XREF: NSS_CMSSignedData_GetContentInfo+6j
		add	eax, 10h
		retn
NSS_CMSSignedData_GetContentInfo endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  81. NSS_CMSSignedData_VerifyCertsOnly

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_VerifyCertsOnly
NSS_CMSSignedData_VerifyCertsOnly proc near ; DATA XREF: .rdata:off_10016AC8o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [esp+14h+arg_0]
		push	edi
		xor	edi, edi
		mov	[esp+18h+var_C], edi
		cmp	esi, edi
		jz	loc_10005075
		mov	ebx, [esp+18h+arg_4]
		cmp	ebx, edi
		jz	loc_10005075
		mov	eax, [esi+54h]
		cmp	eax, edi
		jz	loc_10005075
		push	ebp
		push	eax
		call	sub_100010A0
		add	esp, 4
		mov	ebp, eax
		call	ds:PR_Now
		mov	[esp+1Ch+var_8], eax
		mov	[esp+1Ch+var_4], edx
		test	ebp, ebp
		jle	short loc_10005069
		jmp	short loc_10004FF4
; ---------------------------------------------------------------------------
		align 10h

loc_10004FF0:				; CODE XREF: NSS_CMSSignedData_VerifyCertsOnly+B3j
		mov	esi, [esp+1Ch+arg_0]

loc_10004FF4:				; CODE XREF: NSS_CMSSignedData_VerifyCertsOnly+4Dj
		mov	eax, [esi+68h]
		test	eax, eax
		jz	short loc_10005011
		cmp	dword ptr [eax+edi*4], 0
		jz	short loc_10005011
		mov	eax, [eax+edi*4]
		push	eax
		call	CERT_DupCertificate
		add	esp, 4
		mov	esi, eax
		jmp	short loc_10005027
; ---------------------------------------------------------------------------

loc_10005011:				; CODE XREF: NSS_CMSSignedData_VerifyCertsOnly+59j
					; NSS_CMSSignedData_VerifyCertsOnly+5Fj
		mov	ecx, [esi+54h]
		mov	edx, [ecx+edi*4]
		push	edx
		push	ebx
		call	CERT_FindCertByDERCert
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10005061

loc_10005027:				; CODE XREF: NSS_CMSSignedData_VerifyCertsOnly+6Fj
		mov	eax, [esp+1Ch+var_4]
		mov	ecx, [esp+1Ch+var_8]
		mov	edx, [esp+1Ch+arg_8]
		push	0
		push	0
		push	eax
		push	ecx
		push	edx
		push	1
		push	esi
		push	ebx
		call	CERT_VerifyCert
		or	[esp+3Ch+var_C], eax
		push	esi
		call	CERT_DestroyCertificate
		inc	edi
		add	esp, 24h
		cmp	edi, ebp
		jl	short loc_10004FF0
		mov	eax, [esp+1Ch+var_C]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10005061:				; CODE XREF: NSS_CMSSignedData_VerifyCertsOnly+85j
		mov	[esp+1Ch+var_C], 0FFFFFFFFh

loc_10005069:				; CODE XREF: NSS_CMSSignedData_VerifyCertsOnly+4Bj
		mov	eax, [esp+1Ch+var_C]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10005075:				; CODE XREF: NSS_CMSSignedData_VerifyCertsOnly+12j
					; NSS_CMSSignedData_VerifyCertsOnly+1Ej ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
NSS_CMSSignedData_VerifyCertsOnly endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  76. NSS_CMSSignedData_HasDigests

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_HasDigests
NSS_CMSSignedData_HasDigests proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_100050A8
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100050A8:				; CODE XREF: NSS_CMSSignedData_HasDigests+6j
		xor	ecx, ecx
		cmp	[eax+64h], ecx
		setnz	cl
		mov	eax, ecx
		retn
NSS_CMSSignedData_HasDigests endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  66. NSS_CMSSignedData_AddCertList

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_AddCertList
NSS_CMSSignedData_AddCertList proc near	; CODE XREF: NSS_CMSSignedData_AddCertChain+24p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_100050E5
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_100050E5
		mov	edx, [eax+60h]
		push	ecx
		lea	ecx, [eax+6Ch]
		mov	eax, [edx+44h]
		push	ecx
		push	eax
		call	sub_10001000
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100050E5:				; CODE XREF: NSS_CMSSignedData_AddCertList+6j
					; NSS_CMSSignedData_AddCertList+Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
NSS_CMSSignedData_AddCertList endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  65. NSS_CMSSignedData_AddCertChain

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_AddCertChain
NSS_CMSSignedData_AddCertChain proc near ; CODE	XREF: NSS_CMSSignedData_CreateCertsOnly+41p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000512E
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_1000512E
		push	0
		push	4
		push	eax
		call	CERT_CertChainFromCert
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000513B
		push	eax
		push	esi
		call	NSS_CMSSignedData_AddCertList
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000512E:				; CODE XREF: NSS_CMSSignedData_AddCertChain+7j
					; NSS_CMSSignedData_AddCertChain+Fj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000513B:				; CODE XREF: NSS_CMSSignedData_AddCertChain+20j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
NSS_CMSSignedData_AddCertChain endp

; Exported entry  67. NSS_CMSSignedData_AddCertificate

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_AddCertificate
NSS_CMSSignedData_AddCertificate proc near
					; CODE XREF: NSS_CMSSignedData_CreateCertsOnly:loc_10005418p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000516D
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_1000516D
		push	eax
		call	CERT_DupCertificate
		mov	ecx, [esi+60h]
		mov	edx, [ecx+44h]
		push	eax
		lea	eax, [esi+68h]
		push	eax
		push	edx
		call	sub_10001000
		add	esp, 10h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000516D:				; CODE XREF: NSS_CMSSignedData_AddCertificate+7j
					; NSS_CMSSignedData_AddCertificate+Fj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
NSS_CMSSignedData_AddCertificate endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  79. NSS_CMSSignedData_SetDigests

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_SetDigests
NSS_CMSSignedData_SetDigests proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000519E
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000519E
		cmp	[esp+4+arg_8], 0
		jz	short loc_1000519E
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_100051B0

loc_1000519E:				; CODE XREF: NSS_CMSSignedData_SetDigests+7j
					; NSS_CMSSignedData_SetDigests+Ej ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100051B0:				; CODE XREF: NSS_CMSSignedData_SetDigests+1Cj
		cmp	dword ptr [esi+64h], 0
		jz	short loc_100051C8
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100051C8:				; CODE XREF: NSS_CMSSignedData_SetDigests+34j
		push	eax
		call	sub_100010A0
		mov	ecx, [esi+60h]
		mov	edx, [ecx+44h]
		lea	eax, ds:4[eax*4]
		push	eax
		push	edx
		call	PORT_ArenaZAlloc_Util
		add	esp, 0Ch
		mov	[esi+64h], eax
		test	eax, eax
		jnz	short loc_100051FE
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100051FE:				; CODE XREF: NSS_CMSSignedData_SetDigests+6Aj
		mov	eax, [esi+0Ch]
		push	ebx
		push	ebp
		xor	ebp, ebp
		push	edi
		cmp	[eax], ebp
		jz	short loc_10005284
		xor	edi, edi
		lea	esp, [esp+0]

loc_10005210:				; CODE XREF: NSS_CMSSignedData_SetDigests+102j
		mov	ecx, [esi+0Ch]
		mov	edx, [ecx+edi]
		mov	eax, [esp+10h+arg_4]
		push	edx
		push	eax
		call	sub_10007120
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_1000528B
		mov	ecx, [esp+10h+arg_8]
		cmp	dword ptr [ecx+ebx*4], 0
		jz	short loc_10005273
		mov	edx, [esi+60h]
		mov	eax, [edx+44h]
		push	0
		push	0
		push	eax
		call	SECITEM_AllocItem_Util
		mov	ecx, [esi+64h]
		add	esp, 0Ch
		mov	[edi+ecx], eax
		test	eax, eax
		jz	short loc_100052A0
		mov	edx, [esp+10h+arg_8]
		mov	eax, [edx+ebx*4]
		mov	ecx, [esi+64h]
		mov	edx, [ecx+edi]
		push	eax
		mov	eax, [esi+60h]
		mov	ecx, [eax+44h]
		push	edx
		push	ecx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100052A0

loc_10005273:				; CODE XREF: NSS_CMSSignedData_SetDigests+B2j
		mov	edx, [esi+0Ch]
		inc	ebp
		lea	edi, ds:0[ebp*4]
		cmp	dword ptr [edi+edx], 0
		jnz	short loc_10005210

loc_10005284:				; CODE XREF: NSS_CMSSignedData_SetDigests+88j
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000528B:				; CODE XREF: NSS_CMSSignedData_SetDigests+A8j
		push	0FFFFE085h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100052A0:				; CODE XREF: NSS_CMSSignedData_SetDigests+CFj
					; NSS_CMSSignedData_SetDigests+F1j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
NSS_CMSSignedData_SetDigests endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  68. NSS_CMSSignedData_AddDigest

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_AddDigest
NSS_CMSSignedData_AddDigest proc near	; CODE XREF: sub_10005480+D3p
					; NSS_CMSSignedData_SetDigestValue+B4p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		mov	ebp, [esp+4+arg_4]
		push	esi
		test	ebp, ebp
		jz	loc_10005351
		mov	esi, [esp+8+arg_0]
		test	esi, esi
		jz	short loc_10005351
		push	ebx
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	18h
		push	esi
		mov	ebx, eax
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000533F
		mov	eax, [esp+10h+arg_8]
		push	0
		push	eax
		push	edi
		push	esi
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000533F
		push	edi
		lea	ecx, [ebp+0Ch]
		push	ecx
		push	esi
		call	sub_10001000
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000533F
		mov	edx, [esp+10h+arg_C]
		push	edx
		add	ebp, 64h
		push	ebp
		push	esi
		call	sub_10001000
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000533F
		push	ebx
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000533F:				; CODE XREF: NSS_CMSSignedData_AddDigest+2Fj
					; NSS_CMSSignedData_AddDigest+44j ...
		push	ebx
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10005351:				; CODE XREF: NSS_CMSSignedData_AddDigest+8j
					; NSS_CMSSignedData_AddDigest+14j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
NSS_CMSSignedData_AddDigest endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10005370	proc near		; CODE XREF: NSS_CMSSignedData_VerifySignerInfo+57p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1000538A
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000538A:				; CODE XREF: sub_10005370+7j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_100053B1
		cmp	dword ptr [esi+64h], 0
		jz	short loc_100053B1
		mov	ecx, [esp+4+arg_4]
		push	ecx
		push	eax
		call	sub_10007170
		add	esp, 8
		test	eax, eax
		js	short loc_100053BE
		mov	edx, [esi+64h]
		mov	eax, [edx+eax*4]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100053B1:				; CODE XREF: sub_10005370+1Fj
					; sub_10005370+25j
		push	0FFFFE085h
		call	PORT_SetError_Util
		add	esp, 4

loc_100053BE:				; CODE XREF: sub_10005370+37j
		xor	eax, eax
		pop	esi
		retn
sub_10005370	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  71. NSS_CMSSignedData_CreateCertsOnly

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_CreateCertsOnly
NSS_CMSSignedData_CreateCertsOnly proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	loc_1000546B
		mov	ebp, [esp+8+arg_4]
		test	ebp, ebp
		jz	loc_1000546B
		push	ebx
		mov	ebx, [edi+44h]
		push	esi
		push	ebx
		call	PORT_ArenaMark_Util
		push	edi
		mov	[esp+18h+arg_0], eax
		call	NSS_CMSSignedData_Create
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10005441
		cmp	[esp+10h+arg_8], 0
		push	ebp
		push	esi
		jz	short loc_10005418
		call	NSS_CMSSignedData_AddCertChain
		jmp	short loc_1000541D
; ---------------------------------------------------------------------------

loc_10005418:				; CODE XREF: NSS_CMSSignedData_CreateCertsOnly+3Fj
		call	NSS_CMSSignedData_AddCertificate

loc_1000541D:				; CODE XREF: NSS_CMSSignedData_CreateCertsOnly+46j
		add	esp, 8
		test	eax, eax
		jnz	short loc_10005438
		push	1
		push	eax
		lea	eax, [esi+10h]
		push	eax
		push	edi
		call	NSS_CMSContentInfo_SetContent_Data
		add	esp, 10h
		test	eax, eax
		jz	short loc_10005456

loc_10005438:				; CODE XREF: NSS_CMSSignedData_CreateCertsOnly+52j
		push	esi
		call	NSS_CMSSignedData_Destroy
		add	esp, 4

loc_10005441:				; CODE XREF: NSS_CMSSignedData_CreateCertsOnly+36j
		mov	ecx, [esp+10h+arg_0]
		push	ecx
		push	ebx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10005456:				; CODE XREF: NSS_CMSSignedData_CreateCertsOnly+66j
		mov	edx, [esp+10h+arg_0]
		push	edx
		push	ebx
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000546B:				; CODE XREF: NSS_CMSSignedData_CreateCertsOnly+8j
					; NSS_CMSSignedData_CreateCertsOnly+14j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
NSS_CMSSignedData_CreateCertsOnly endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10005480	proc near		; CODE XREF: sub_100033F0+FAp
					; NSS_CMSEncoder_Start+9Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		xor	ebx, ebx
		mov	[esp+0Ch+var_4], ebx
		cmp	esi, ebx
		jnz	short loc_100054A5
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100054A5:				; CODE XREF: sub_10005480+Fj
		mov	eax, [esi+60h]
		mov	edx, [esi+0Ch]
		mov	ecx, [eax+44h]
		push	edi
		mov	[esp+10h+arg_0], ecx
		cmp	edx, ebx
		jz	short loc_100054E5
		mov	edi, [esi+64h]
		cmp	edi, ebx
		jz	short loc_100054E5
		xor	ecx, ecx
		cmp	[edx], ebx
		jz	short loc_100054D8
		xor	eax, eax

loc_100054C6:				; CODE XREF: sub_10005480+56j
		cmp	[eax+edi], ebx
		jz	short loc_100054D8
		inc	ecx
		lea	eax, ds:0[ecx*4]
		cmp	[eax+edx], ebx
		jnz	short loc_100054C6

loc_100054D8:				; CODE XREF: sub_10005480+42j
					; sub_10005480+49j
		cmp	[edx+ecx*4], ebx
		jnz	short loc_100054E5
		mov	[esp+10h+var_4], 1

loc_100054E5:				; CODE XREF: sub_10005480+35j
					; sub_10005480+3Cj ...
		push	ebp
		lea	edx, [esi+10h]
		push	edx
		mov	ebp, 1
		call	NSS_CMSContentInfo_GetContentTypeTag
		add	esp, 4
		cmp	eax, 19h
		jz	short loc_10005501
		mov	ebp, 3

loc_10005501:				; CODE XREF: sub_10005480+7Aj
					; sub_10005480+E0j
		mov	eax, [esi+5Ch]
		push	eax
		call	sub_100010A0
		add	esp, 4
		cmp	ebx, eax
		jge	short loc_10005562
		mov	ecx, [esi+5Ch]
		mov	edi, [ecx+ebx*4]
		push	edi
		call	NSS_CMSSignerInfo_GetVersion
		add	esp, 4
		cmp	eax, 1
		jz	short loc_1000552A
		mov	ebp, 3

loc_1000552A:				; CODE XREF: sub_10005480+A3j
		push	edi
		call	sub_10005E50
		mov	edx, [esi+0Ch]
		mov	edi, eax
		push	edi
		push	edx
		call	sub_10007170
		add	esp, 0Ch
		test	eax, eax
		jns	short loc_1000555F
		cmp	[esp+14h+var_4], 0
		jnz	short loc_10005575
		mov	eax, [esp+14h+arg_0]
		push	0
		push	edi
		push	esi
		push	eax
		call	NSS_CMSSignedData_AddDigest
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10005575

loc_1000555F:				; CODE XREF: sub_10005480+C1j
		inc	ebx
		jmp	short loc_10005501
; ---------------------------------------------------------------------------

loc_10005562:				; CODE XREF: sub_10005480+8Fj
		mov	ecx, [esp+14h+arg_0]
		push	ebp
		push	esi
		push	ecx
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000557E

loc_10005575:				; CODE XREF: sub_10005480+C8j
					; sub_10005480+DDj
		pop	ebp
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000557E:				; CODE XREF: sub_10005480+F3j
		mov	edx, [esi+64h]
		push	edx
		push	0
		push	0
		call	NSS_Get_SECOID_AlgorithmIDTemplate_Util
		add	esp, 8
		push	eax
		mov	eax, [esi+0Ch]
		push	eax
		call	sub_100075E0
		add	esp, 0Ch
		pop	ebp
		pop	edi
		neg	eax
		pop	esi
		sbb	eax, eax
		pop	ebx
		pop	ecx
		retn
sub_10005480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100055B0	proc near		; CODE XREF: sub_10002FD0+16p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		push	esi
		mov	esi, [esp+10h+arg_0]
		mov	[esp+10h+var_8], 0FFFFFFFFh
		test	esi, esi
		jnz	short loc_100055D9
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100055D9:				; CODE XREF: sub_100055B0+12j
		mov	eax, [esi+60h]
		mov	ecx, [eax+44h]
		mov	eax, [esi+4Ch]
		push	ebx
		push	ebp
		push	edi
		mov	[esp+1Ch+var_4], ecx
		test	eax, eax
		jz	short loc_10005614
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_10005614
		lea	edx, [esi+64h]
		push	edx
		push	ecx
		push	eax
		call	NSS_CMSDigestContext_FinishMultiple
		mov	ecx, [esi+4Ch]
		add	esp, 0Ch
		mov	dword ptr [ecx+4], 0
		test	eax, eax
		jnz	loc_10005864

loc_10005614:				; CODE XREF: sub_100055B0+3Bj
					; sub_100055B0+42j
		mov	edi, [esi+5Ch]
		xor	ebp, ebp
		xor	ebx, ebx
		mov	[esp+1Ch+var_C], edi
		mov	[esp+1Ch+arg_0], ebx

loc_10005623:				; CODE XREF: sub_100055B0+FCj
		mov	edx, [esi+5Ch]
		push	edx
		call	sub_100010A0
		add	esp, 4
		cmp	ebx, eax
		jge	loc_100056CA
		mov	eax, [esi+5Ch]
		mov	ebx, [eax+ebx*4]
		push	ebx
		call	sub_10005E50
		mov	ecx, [esi+0Ch]
		push	eax
		push	ecx
		call	sub_10007170
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	short loc_100056B1
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_100056B1
		cmp	dword ptr [eax+edi*4], 0
		jz	short loc_100056B1
		lea	eax, [esi+10h]
		push	eax
		call	sub_10001820
		add	esp, 4
		test	eax, eax
		jz	loc_10005864
		mov	edx, [esi+64h]
		push	eax
		mov	eax, [edx+edi*4]
		push	eax
		push	ebx
		call	sub_10006500
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10005864
		push	ebx
		call	NSS_CMSSignerInfo_GetCertList
		add	esp, 4
		test	eax, eax
		jz	short loc_100056A0
		add	ebp, [eax+4]

loc_100056A0:				; CODE XREF: sub_100055B0+EBj
		inc	[esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+var_C]
		mov	ebx, [esp+1Ch+arg_0]
		jmp	loc_10005623
; ---------------------------------------------------------------------------

loc_100056B1:				; CODE XREF: sub_100055B0+A4j
					; sub_100055B0+ABj ...
		push	0FFFFE085h
		call	PORT_SetError_Util
		mov	eax, [esp+20h+var_8]
		add	esp, 4
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100056CA:				; CODE XREF: sub_100055B0+81j
		push	0
		push	offset dword_100134E8
		push	edi
		call	sub_100075E0
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10005864
		mov	eax, [esi+68h]
		test	eax, eax
		jz	short loc_100056F9
		cmp	dword ptr [eax], 0
		jz	short loc_100056F9
		mov	edi, edi

loc_100056F0:				; CODE XREF: sub_100055B0+147j
		add	eax, 4
		inc	ebp
		cmp	dword ptr [eax], 0
		jnz	short loc_100056F0

loc_100056F9:				; CODE XREF: sub_100055B0+137j
					; sub_100055B0+13Cj
		mov	edx, [esi+6Ch]
		test	edx, edx
		jz	short loc_10005724
		xor	ecx, ecx
		cmp	[edx], ecx
		jz	short loc_10005724
		xor	eax, eax
		mov	ebx, edx
		lea	ebx, [ebx+0]

loc_10005710:				; CODE XREF: sub_100055B0+172j
		mov	eax, [eax+edx]
		add	ebp, [eax+4]
		inc	ecx
		cmp	dword ptr [ebx+ecx*4], 0
		lea	eax, ds:0[ecx*4]
		jnz	short loc_10005710

loc_10005724:				; CODE XREF: sub_100055B0+14Ej
					; sub_100055B0+154j
		test	ebp, ebp
		jnz	short loc_10005739
		pop	edi
		mov	[esi+54h], ebp
		mov	[esp+18h+var_8], ebp
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10005739:				; CODE XREF: sub_100055B0+176j
		mov	edx, [esp+1Ch+var_4]
		lea	ecx, ds:4[ebp*4]
		push	ecx
		push	edx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		mov	[esi+54h], eax
		test	eax, eax
		jnz	short loc_10005760
		pop	edi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10005760:				; CODE XREF: sub_100055B0+1A3j
		xor	eax, eax
		test	edi, edi
		jz	short loc_100057AE
		mov	[esp+1Ch+arg_0], eax
		cmp	[edi], eax
		jz	short loc_100057AE
		mov	ecx, edi

loc_10005770:				; CODE XREF: sub_100055B0+1FCj
		mov	ebx, [ecx]
		mov	ecx, [ebx+60h]
		xor	edx, edx
		cmp	[ecx+4], edx
		jle	short loc_1000579C
		xor	edi, edi
		mov	edi, edi

loc_10005780:				; CODE XREF: sub_100055B0+1E6j
		mov	ecx, [ecx]
		mov	ebp, [esi+54h]
		add	ecx, edi
		mov	[ebp+eax*4+0], ecx
		mov	ecx, [ebx+60h]
		inc	edx
		inc	eax
		add	edi, 0Ch
		cmp	edx, [ecx+4]
		jl	short loc_10005780
		mov	edi, [esp+1Ch+var_C]

loc_1000579C:				; CODE XREF: sub_100055B0+1CAj
		mov	ecx, [esp+1Ch+arg_0]
		inc	ecx
		cmp	dword ptr [edi+ecx*4], 0
		mov	[esp+1Ch+arg_0], ecx
		lea	ecx, [edi+ecx*4]
		jnz	short loc_10005770

loc_100057AE:				; CODE XREF: sub_100055B0+1B4j
					; sub_100055B0+1BCj
		mov	ecx, [esi+68h]
		test	ecx, ecx
		jz	short loc_100057E1
		xor	edx, edx
		cmp	[ecx], edx
		jz	short loc_100057E1
		xor	ecx, ecx
		lea	ecx, [ecx+0]

loc_100057C0:				; CODE XREF: sub_100055B0+22Fj
		mov	edi, [esi+68h]
		mov	ecx, [ecx+edi]
		mov	edi, [esi+54h]
		add	ecx, 3Ch
		mov	[edi+eax*4], ecx
		mov	edi, [esi+68h]
		inc	edx
		lea	ecx, ds:0[edx*4]
		inc	eax
		cmp	dword ptr [ecx+edi], 0
		jnz	short loc_100057C0

loc_100057E1:				; CODE XREF: sub_100055B0+203j
					; sub_100055B0+209j
		mov	ecx, [esi+6Ch]
		test	ecx, ecx
		jz	short loc_1000583D
		cmp	dword ptr [ecx], 0
		mov	[esp+1Ch+arg_0], 0
		jz	short loc_1000583D
		xor	ecx, ecx

loc_100057F7:				; CODE XREF: sub_100055B0+28Bj
		mov	edi, [esi+6Ch]
		mov	edi, [edi+ecx]
		xor	edx, edx
		cmp	[edi+4], edx
		jle	short loc_10005827
		xor	edi, edi

loc_10005806:				; CODE XREF: sub_100055B0+275j
		mov	ebx, [esi+6Ch]
		mov	ebx, [ecx+ebx]
		mov	ebx, [ebx]
		mov	ebp, [esi+54h]
		add	ebx, edi
		mov	[ebp+eax*4+0], ebx
		mov	ebx, [esi+6Ch]
		mov	ebx, [ebx+ecx]
		inc	edx
		inc	eax
		add	edi, 0Ch
		cmp	edx, [ebx+4]
		jl	short loc_10005806

loc_10005827:				; CODE XREF: sub_100055B0+252j
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [esi+6Ch]
		inc	ecx
		mov	[esp+1Ch+arg_0], ecx
		add	ecx, ecx
		add	ecx, ecx
		cmp	dword ptr [ecx+edx], 0
		jnz	short loc_100057F7

loc_1000583D:				; CODE XREF: sub_100055B0+236j
					; sub_100055B0+243j
		mov	ecx, [esi+54h]
		push	0
		push	0
		mov	dword ptr [ecx+eax*4], 0
		mov	edx, [esi+54h]
		push	offset loc_100070D0
		push	edx
		call	sub_100010C0
		add	esp, 10h
		mov	[esp+1Ch+var_8], 0

loc_10005864:				; CODE XREF: sub_100055B0+5Ej
					; sub_100055B0+C1j ...
		mov	eax, [esp+1Ch+var_8]
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 0Ch
		retn
sub_100055B0	endp

; Exported entry  77. NSS_CMSSignedData_ImportCerts

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_ImportCerts
NSS_CMSSignedData_ImportCerts proc near	; DATA XREF: .rdata:off_10016AC8o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 14h
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		push	esi
		xor	esi, esi
		mov	[esp+1Ch+var_14], esi
		mov	[esp+1Ch+var_C], esi
		cmp	ebx, esi
		jnz	short loc_1000589D
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000589D:				; CODE XREF: NSS_CMSSignedData_ImportCerts+15j
		mov	eax, [ebx+54h]
		push	ebp
		push	edi
		push	eax
		call	sub_100010A0
		mov	edx, [ebx+54h]
		mov	ebp, [esp+28h+arg_8]
		push	esi
		push	esi
		push	esi
		lea	ecx, [esp+34h+var_14]
		push	ecx
		push	edx
		push	eax
		mov	[esp+40h+var_10], eax
		mov	eax, [esp+40h+arg_4]
		push	ebp
		push	eax
		call	CERT_ImportCerts
		mov	edi, eax
		add	esp, 24h
		cmp	edi, esi
		jnz	loc_10005A7C
		cmp	[esp+24h+var_10], esi
		jle	short loc_1000590C
		jmp	short loc_100058E0
; ---------------------------------------------------------------------------
		align 10h

loc_100058E0:				; CODE XREF: NSS_CMSSignedData_ImportCerts+6Bj
					; NSS_CMSSignedData_ImportCerts+9Aj
		mov	ecx, [esp+24h+var_14]
		mov	eax, [ecx+esi*4]
		test	eax, eax
		jz	short loc_10005905
		push	eax
		call	CERT_DupCertificate
		push	eax
		mov	eax, [ebx+60h]
		mov	ecx, [eax+44h]
		lea	edx, [ebx+70h]
		push	edx
		push	ecx
		call	sub_10001000
		add	esp, 10h

loc_10005905:				; CODE XREF: NSS_CMSSignedData_ImportCerts+79j
		inc	esi
		cmp	esi, [esp+24h+var_10]
		jl	short loc_100058E0

loc_1000590C:				; CODE XREF: NSS_CMSSignedData_ImportCerts+69j
		cmp	[esp+24h+arg_C], 0
		jz	loc_10005A50
		call	CERT_NewCertList
		mov	edi, eax
		mov	[esp+24h+var_C], edi
		test	edi, edi
		jnz	short loc_1000592E
		or	edi, 0FFFFFFFFh
		jmp	loc_10005A7C
; ---------------------------------------------------------------------------

loc_1000592E:				; CODE XREF: NSS_CMSSignedData_ImportCerts+B4j
		mov	ebx, [esp+24h+var_10]
		xor	esi, esi
		test	ebx, ebx
		jle	short loc_10005967
		jmp	short loc_10005940
; ---------------------------------------------------------------------------
		align 10h

loc_10005940:				; CODE XREF: NSS_CMSSignedData_ImportCerts+C8j
					; NSS_CMSSignedData_ImportCerts+F5j
		mov	edx, [esp+24h+var_14]
		mov	eax, [edx+esi*4]
		test	eax, eax
		jz	short loc_10005962
		push	eax
		call	CERT_DupCertificate
		add	esp, 4
		test	eax, eax
		jz	short loc_10005962
		push	eax
		push	edi
		call	CERT_AddCertToListTail
		add	esp, 8

loc_10005962:				; CODE XREF: NSS_CMSSignedData_ImportCerts+D9j
					; NSS_CMSSignedData_ImportCerts+E6j
		inc	esi
		cmp	esi, ebx
		jl	short loc_10005940

loc_10005967:				; CODE XREF: NSS_CMSSignedData_ImportCerts+C6j
		push	0
		push	ebp
		push	edi
		call	CERT_FilterCertListByUsage
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_10005A7C
		call	ds:PR_Now
		mov	[esp+24h+var_8], eax
		mov	eax, [esp+24h+var_C]
		mov	ebx, [eax]
		mov	[esp+24h+var_4], edx
		cmp	ebx, eax
		jz	loc_10005A4A
		lea	esp, [esp+0]

loc_100059A0:				; CODE XREF: NSS_CMSSignedData_ImportCerts+1D4j
		mov	eax, [esp+24h+var_4]
		mov	ecx, [esp+24h+var_8]
		mov	edx, [ebx+8]
		push	0
		push	0
		push	eax
		mov	eax, [esp+30h+arg_4]
		push	ecx
		push	ebp
		push	1
		push	edx
		push	eax
		call	CERT_VerifyCert
		add	esp, 20h
		test	eax, eax
		jnz	short loc_10005A3E
		mov	ecx, [ebx+8]
		push	eax
		push	ebp
		push	ecx
		call	CERT_CertChainFromCert
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_10005A3E
		mov	edx, [esi+4]
		add	edx, edx
		add	edx, edx
		push	edx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_100059FB
		push	esi
		call	CERT_DestroyCertificateList
		add	esp, 4
		jmp	short loc_10005A3E
; ---------------------------------------------------------------------------

loc_100059FB:				; CODE XREF: NSS_CMSSignedData_ImportCerts+17Ej
		xor	eax, eax
		cmp	[esi+4], eax
		jle	short loc_10005A14
		xor	ecx, ecx

loc_10005A04:				; CODE XREF: NSS_CMSSignedData_ImportCerts+1A2j
		mov	edx, [esi]
		add	edx, ecx
		mov	[edi+eax*4], edx
		inc	eax
		add	ecx, 0Ch
		cmp	eax, [esi+4]
		jl	short loc_10005A04

loc_10005A14:				; CODE XREF: NSS_CMSSignedData_ImportCerts+190j
		mov	eax, [esp+24h+arg_C]
		mov	ecx, [esi+4]
		mov	edx, [esp+24h+arg_4]
		push	0
		push	0
		push	eax
		push	0
		push	edi
		push	ecx
		push	ebp
		push	edx
		call	CERT_ImportCerts
		push	edi
		call	PORT_Free_Util
		push	esi
		call	CERT_DestroyCertificateList
		add	esp, 28h

loc_10005A3E:				; CODE XREF: NSS_CMSSignedData_ImportCerts+154j
					; NSS_CMSSignedData_ImportCerts+168j ...
		mov	ebx, [ebx]
		cmp	ebx, [esp+24h+var_C]
		jnz	loc_100059A0

loc_10005A4A:				; CODE XREF: NSS_CMSSignedData_ImportCerts+123j
		mov	ebx, [esp+24h+arg_0]
		xor	edi, edi

loc_10005A50:				; CODE XREF: NSS_CMSSignedData_ImportCerts+A1j
		mov	eax, [ebx+5Ch]
		test	eax, eax
		jz	short loc_10005A7C
		xor	esi, esi
		cmp	[eax], esi
		jz	short loc_10005A7C
		lea	ecx, [ecx+0]

loc_10005A60:				; CODE XREF: NSS_CMSSignedData_ImportCerts+20Aj
		mov	ecx, [esp+24h+arg_4]
		mov	edx, [eax]
		push	ecx
		push	edx
		call	NSS_CMSSignerInfo_GetSigningCertificate
		mov	eax, [ebx+5Ch]
		inc	esi
		lea	eax, [eax+esi*4]
		add	esp, 8
		cmp	dword ptr [eax], 0
		jnz	short loc_10005A60

loc_10005A7C:				; CODE XREF: NSS_CMSSignedData_ImportCerts+5Fj
					; NSS_CMSSignedData_ImportCerts+B9j ...
		mov	eax, [esp+24h+var_14]
		test	eax, eax
		jz	short loc_10005A92
		mov	ecx, [esp+24h+var_10]
		push	ecx
		push	eax
		call	CERT_DestroyCertArray
		add	esp, 8

loc_10005A92:				; CODE XREF: NSS_CMSSignedData_ImportCerts+212j
		mov	eax, [esp+24h+var_C]
		test	eax, eax
		jz	short loc_10005AA3
		push	eax
		call	CERT_DestroyCertList
		add	esp, 4

loc_10005AA3:				; CODE XREF: NSS_CMSSignedData_ImportCerts+228j
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		add	esp, 14h
		retn
NSS_CMSSignedData_ImportCerts endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  82. NSS_CMSSignedData_VerifySignerInfo

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_VerifySignerInfo
NSS_CMSSignedData_VerifySignerInfo proc	near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_10005ACB
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10005ACB:				; CODE XREF: NSS_CMSSignedData_VerifySignerInfo+7j
		mov	eax, [edi+5Ch]
		mov	ecx, [esp+4+arg_4]
		mov	edx, [esp+4+arg_C]
		push	ebx
		push	esi
		mov	esi, [eax+ecx*4]
		mov	eax, [esp+0Ch+arg_8]
		push	edx
		push	eax
		push	esi
		lea	ebx, [edi+10h]
		call	sub_10006770
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10005B1F
		push	esi
		call	sub_10005E10
		add	esp, 4
		test	eax, eax
		jz	short loc_10005B03
		mov	eax, [eax+0Ch]
		jmp	short loc_10005B05
; ---------------------------------------------------------------------------

loc_10005B03:				; CODE XREF: NSS_CMSSignedData_VerifySignerInfo+4Cj
		xor	eax, eax

loc_10005B05:				; CODE XREF: NSS_CMSSignedData_VerifySignerInfo+51j
		push	eax
		push	edi
		call	sub_10005370
		push	ebx
		mov	edi, eax
		call	sub_10001820
		push	eax
		push	edi
		push	esi
		call	NSS_CMSSignerInfo_Verify
		add	esp, 18h

loc_10005B1F:				; CODE XREF: NSS_CMSSignedData_VerifySignerInfo+3Fj
		pop	esi
		pop	ebx
		pop	edi
		retn
NSS_CMSSignedData_VerifySignerInfo endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  78. NSS_CMSSignedData_SetDigestValue

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_SetDigestValue
NSS_CMSSignedData_SetDigestValue proc near ; CODE XREF:	NSS_CMSSignedData_AddSignerInfo+3Ep
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebp, ebp
		test	esi, esi
		jnz	short loc_10005B4F
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10005B4F:				; CODE XREF: NSS_CMSSignedData_SetDigestValue+Aj
		mov	eax, [esi+60h]
		push	ebx
		push	edi
		mov	edi, [eax+44h]
		push	edi
		call	PORT_ArenaMark_Util
		mov	ebx, [esp+14h+arg_8]
		add	esp, 4
		mov	[esp+10h+arg_0], eax
		test	ebx, ebx
		jz	short loc_10005B85
		push	0Ch
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	ebp, eax
		push	ebx
		push	ebp
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10005BF0

loc_10005B85:				; CODE XREF: NSS_CMSSignedData_SetDigestValue+3Aj
		cmp	dword ptr [esi+64h], 0
		jnz	short loc_10005BC7
		mov	ecx, [esi+0Ch]
		push	ecx
		call	sub_100010A0
		lea	edx, ds:4[eax*4]
		mov	eax, [esi+60h]
		mov	ecx, [eax+44h]
		push	edx
		push	ecx
		call	PORT_ArenaZAlloc_Util
		add	esp, 0Ch
		mov	[esi+64h], eax
		test	eax, eax
		jnz	short loc_10005BC7
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10005BC7:				; CODE XREF: NSS_CMSSignedData_SetDigestValue+59j
					; NSS_CMSSignedData_SetDigestValue+80j
		mov	eax, [esi+0Ch]
		mov	ebx, [esp+10h+arg_4]
		test	eax, eax
		jz	short loc_10005BE0
		push	ebx
		push	eax
		call	sub_10007170
		add	esp, 8
		test	eax, eax
		jns	short loc_10005C06

loc_10005BE0:				; CODE XREF: NSS_CMSSignedData_SetDigestValue+A0j
		push	ebp
		push	ebx
		push	esi
		push	edi
		call	NSS_CMSSignedData_AddDigest
		add	esp, 10h
		test	eax, eax
		jz	short loc_10005C0C

loc_10005BF0:				; CODE XREF: NSS_CMSSignedData_SetDigestValue+53j
		mov	edx, [esp+10h+arg_0]
		push	edx
		push	edi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10005C06:				; CODE XREF: NSS_CMSSignedData_SetDigestValue+AEj
		mov	ecx, [esi+64h]
		mov	[ecx+eax*4], ebp

loc_10005C0C:				; CODE XREF: NSS_CMSSignedData_SetDigestValue+BEj
		mov	edx, [esp+10h+arg_0]
		push	edx
		push	edi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
NSS_CMSSignedData_SetDigestValue endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  69. NSS_CMSSignedData_AddSignerInfo

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignedData_AddSignerInfo
NSS_CMSSignedData_AddSignerInfo	proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_10005C9D
		mov	ebx, [esp+8+arg_4]
		test	ebx, ebx
		jz	short loc_10005C9D
		mov	eax, [edi+60h]
		push	ebp
		push	esi
		mov	esi, [eax+44h]
		push	esi
		call	PORT_ArenaMark_Util
		push	ebx
		lea	ecx, [edi+5Ch]
		push	ecx
		push	esi
		mov	ebp, eax
		call	sub_10001000
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10005C7A
		push	ebx
		call	sub_10005E50
		push	0
		push	eax
		push	edi
		call	NSS_CMSSignedData_SetDigestValue
		add	esp, 10h
		test	eax, eax
		jz	short loc_10005C8C

loc_10005C7A:				; CODE XREF: NSS_CMSSignedData_AddSignerInfo+32j
		push	ebp
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	esi
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10005C8C:				; CODE XREF: NSS_CMSSignedData_AddSignerInfo+48j
		push	ebp
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	esi
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10005C9D:				; CODE XREF: NSS_CMSSignedData_AddSignerInfo+8j
					; NSS_CMSSignedData_AddSignerInfo+10j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
NSS_CMSSignedData_AddSignerInfo	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005CB0	proc near		; CODE XREF: NSS_CMSSignerInfo_CreateWithSubjKeyID+1Dp
					; NSS_CMSSignerInfo_Create+17p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	edi, [ebx+44h]
		push	edi
		call	PORT_ArenaMark_Util
		mov	ebp, eax
		push	80h
		push	edi
		mov	[esp+1Ch+arg_0], ebp
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_10005CEC
		push	ebp
		push	edi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10005CEC:				; CODE XREF: sub_10005CB0+29j
		mov	eax, [esp+10h+arg_4]
		sub	eax, 0
		mov	[esi+58h], ebx
		mov	ebp, 1
		jz	short loc_10005D4D
		sub	eax, ebp
		jnz	loc_10005DA5
		mov	ebx, [esp+10h+arg_C]
		mov	[esi+0Ch], ebp
		test	ebx, ebx
		jz	loc_10005DA5
		push	0Ch
		push	edi
		call	PORT_ArenaAlloc_Util
		push	ebx
		push	eax
		push	edi
		mov	[esi+10h], eax
		call	SECITEM_CopyItem_Util
		mov	eax, [esp+24h+arg_14]
		push	eax
		call	SECKEY_CopyPrivateKey
		add	esp, 18h
		mov	[esi+74h], eax
		test	eax, eax
		jz	short loc_10005DA5
		mov	ecx, [esp+10h+arg_10]
		push	ecx
		call	SECKEY_CopyPublicKey
		add	esp, 4
		mov	[esi+78h], eax
		jmp	short loc_10005D75
; ---------------------------------------------------------------------------

loc_10005D4D:				; CODE XREF: sub_10005CB0+4Bj
		mov	ebx, [esp+10h+arg_8]
		push	ebx
		mov	dword ptr [esi+0Ch], 0
		call	CERT_DupCertificate
		add	esp, 4
		mov	[esi+5Ch], eax
		test	eax, eax
		jz	short loc_10005DA5
		push	ebx
		push	edi
		call	CERT_GetCertIssuerAndSN
		add	esp, 8
		mov	[esi+10h], eax

loc_10005D75:				; CODE XREF: sub_10005CB0+9Bj
		test	eax, eax
		jz	short loc_10005DA5
		mov	eax, ebp
		cmp	[esi+0Ch], ebp
		jnz	short loc_10005D85
		mov	eax, 3

loc_10005D85:				; CODE XREF: sub_10005CB0+CEj
		push	eax
		push	esi
		push	edi
		call	SEC_ASN1EncodeInteger_Util
		mov	edx, [esp+1Ch+arg_18]
		push	0
		push	edx
		lea	eax, [esi+14h]
		push	eax
		push	edi
		call	SECOID_SetAlgorithmID_Util
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_10005DBA

loc_10005DA5:				; CODE XREF: sub_10005CB0+4Fj
					; sub_10005CB0+5Ej ...
		mov	ecx, [esp+10h+arg_0]
		push	ecx
		push	edi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10005DBA:				; CODE XREF: sub_10005CB0+F3j
		mov	edx, [esp+10h+arg_0]
		push	edx
		push	edi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10005CB0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  89. NSS_CMSSignerInfo_Destroy

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_Destroy
NSS_CMSSignerInfo_Destroy proc near	; CODE XREF: NSS_CMSSignedData_Destroy+8Bp
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+5Ch]
		test	eax, eax
		jz	short loc_10005DE5
		push	eax
		call	CERT_DestroyCertificate
		add	esp, 4

loc_10005DE5:				; CODE XREF: NSS_CMSSignerInfo_Destroy+Aj
		mov	eax, [esi+60h]
		pop	esi
		test	eax, eax
		jz	short locret_10005DF6
		mov	[esp+arg_0], eax
		jmp	CERT_DestroyCertificateList
; ---------------------------------------------------------------------------

locret_10005DF6:			; CODE XREF: NSS_CMSSignerInfo_Destroy+1Bj
		retn
NSS_CMSSignerInfo_Destroy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  95. NSS_CMSSignerInfo_GetVerificationStatus

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_GetVerificationStatus
NSS_CMSSignerInfo_GetVerificationStatus	proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+70h]
		retn
NSS_CMSSignerInfo_GetVerificationStatus	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10005E10	proc near		; CODE XREF: NSS_CMSSignedData_VerifySignerInfo+42p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 14h
		push	esi
		push	eax
		call	SECOID_FindOID_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10005E29
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005E29:				; CODE XREF: sub_10005E10+15j
		mov	ecx, [esi+0Ch]
		push	ecx
		call	sub_100071E0
		add	esp, 4
		cmp	eax, [esi+0Ch]
		jz	short loc_10005E45
		push	eax
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		mov	esi, eax

loc_10005E45:				; CODE XREF: sub_10005E10+28j
		mov	eax, esi
		pop	esi
		retn
sub_10005E10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10005E50	proc near		; CODE XREF: sub_10005480+ABp
					; sub_100055B0+8Ep ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10005E68
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10005E68:				; CODE XREF: sub_10005E50+6j
		add	eax, 14h
		push	esi
		push	eax
		call	SECOID_FindOID_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10005EA0
		mov	eax, [esi+0Ch]
		push	eax
		call	sub_100071E0
		add	esp, 4
		cmp	eax, [esi+0Ch]
		jz	short loc_10005E97
		push	eax
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		mov	esi, eax

loc_10005E97:				; CODE XREF: sub_10005E50+3Aj
		test	esi, esi
		jz	short loc_10005EA0
		mov	eax, [esi+0Ch]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005EA0:				; CODE XREF: sub_10005E50+29j
					; sub_10005E50+49j
		xor	eax, eax
		pop	esi
		retn
sub_10005E50	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  90. NSS_CMSSignerInfo_GetCertList

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_GetCertList
NSS_CMSSignerInfo_GetCertList proc near	; CODE XREF: sub_100055B0+E1p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+60h]
		retn
NSS_CMSSignerInfo_GetCertList endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  96. NSS_CMSSignerInfo_GetVersion

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_GetVersion
NSS_CMSSignerInfo_GetVersion proc near	; CODE XREF: sub_10005480+98p
					; DATA XREF: .rdata:off_10016AC8o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		mov	ecx, [esp+4+arg_0]
		lea	eax, [esp+4+var_4]
		push	eax
		push	ecx
		call	SEC_ASN1DecodeInteger_Util
		neg	eax
		sbb	eax, eax
		not	eax
		and	eax, [esp+0Ch+var_4]
		add	esp, 0Ch
		retn
NSS_CMSSignerInfo_GetVersion endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  94. NSS_CMSSignerInfo_GetSigningTime

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_GetSigningTime
NSS_CMSSignerInfo_GetSigningTime proc near ; CODE XREF:	sub_10006770+61p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10005EEE

loc_10005EE9:				; CODE XREF: NSS_CMSSignerInfo_GetSigningTime+39j
					; NSS_CMSSignerInfo_GetSigningTime+46j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005EEE:				; CODE XREF: NSS_CMSSignerInfo_GetSigningTime+7j
		mov	eax, [esi+68h]
		mov	ecx, [esi+6Ch]
		mov	edx, eax
		or	edx, ecx
		jz	short loc_10005F07
		mov	edx, [esp+4+arg_4]
		mov	[edx], eax
		mov	[edx+4], ecx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005F07:				; CODE XREF: NSS_CMSSignerInfo_GetSigningTime+18j
		mov	eax, [esi+2Ch]
		push	1
		push	23h
		push	eax
		call	sub_100112A0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005EE9
		push	eax
		call	sub_100113C0
		add	esp, 4
		test	eax, eax
		jz	short loc_10005EE9
		push	edi
		mov	edi, [esp+8+arg_4]
		push	eax
		push	edi
		call	DER_DecodeTimeChoice_Util
		add	esp, 8
		test	eax, eax
		jz	short loc_10005F41
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005F41:				; CODE XREF: NSS_CMSSignerInfo_GetSigningTime+59j
		mov	ecx, [edi]
		mov	[esi+68h], ecx
		mov	edx, [edi+4]
		pop	edi
		mov	[esi+6Ch], edx
		xor	eax, eax
		pop	esi
		retn
NSS_CMSSignerInfo_GetSigningTime endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  93. NSS_CMSSignerInfo_GetSigningCertificate

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_GetSigningCertificate
NSS_CMSSignerInfo_GetSigningCertificate	proc near
					; CODE XREF: NSS_CMSSignedData_ImportCerts+1F8p
					; NSS_SMIMESignerInfo_SaveSMIMEProfile+77p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+5Ch]
		test	eax, eax
		jnz	short loc_10005FAA
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jnz	short loc_10005F76
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005F76:				; CODE XREF: NSS_CMSSignerInfo_GetSigningCertificate+12j
		mov	eax, [esi+0Ch]
		sub	eax, 0
		jz	short loc_10005F9A
		dec	eax
		jz	short loc_10005F88
		xor	eax, eax
		mov	[esi+5Ch], eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005F88:				; CODE XREF: NSS_CMSSignerInfo_GetSigningCertificate+1Fj
		mov	eax, [esi+10h]
		push	eax
		push	ecx
		call	CERT_FindCertBySubjectKeyID
		add	esp, 8
		mov	[esi+5Ch], eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005F9A:				; CODE XREF: NSS_CMSSignerInfo_GetSigningCertificate+1Cj
		mov	edx, [esi+10h]
		push	edx
		push	ecx
		call	CERT_FindCertByIssuerAndSN
		add	esp, 8
		mov	[esi+5Ch], eax

loc_10005FAA:				; CODE XREF: NSS_CMSSignerInfo_GetSigningCertificate+Aj
		pop	esi
		retn
NSS_CMSSignerInfo_GetSigningCertificate	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  91. NSS_CMSSignerInfo_GetSignerCommonName

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_GetSignerCommonName
NSS_CMSSignerInfo_GetSignerCommonName proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+5Ch]
		test	eax, eax
		jnz	short loc_10005FBC
		retn
; ---------------------------------------------------------------------------

loc_10005FBC:				; CODE XREF: NSS_CMSSignerInfo_GetSignerCommonName+9j
		add	eax, 0CCh
		mov	[esp+arg_0], eax
		jmp	CERT_GetCommonName
NSS_CMSSignerInfo_GetSignerCommonName endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  92. NSS_CMSSignerInfo_GetSignerEmailAddress

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_GetSignerEmailAddress
NSS_CMSSignerInfo_GetSignerEmailAddress	proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+5Ch]
		test	eax, eax
		jz	short loc_10005FF3
		mov	eax, [eax+118h]
		test	eax, eax
		jz	short loc_10005FF3
		cmp	byte ptr [eax],	0
		jz	short loc_10005FF3
		mov	[esp+arg_0], eax
		jmp	PORT_Strdup_Util
; ---------------------------------------------------------------------------

loc_10005FF3:				; CODE XREF: NSS_CMSSignerInfo_GetSignerEmailAddress+9j
					; NSS_CMSSignerInfo_GetSignerEmailAddress+13j ...
		xor	eax, eax
		retn
NSS_CMSSignerInfo_GetSignerEmailAddress	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  86. NSS_CMSSignerInfo_AddSigningTime

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_AddSigningTime
NSS_CMSSignerInfo_AddSigningTime proc near ; DATA XREF:	.rdata:off_10016AC8o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		mov	eax, [ebx+58h]
		push	ebp
		push	esi
		mov	esi, [eax+44h]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		mov	ecx, [esp+20h+arg_8]
		mov	edx, [esp+20h+arg_4]
		push	ecx
		mov	ebp, eax
		push	edx
		lea	eax, [esp+28h+var_C]
		push	eax
		push	0
		call	DER_EncodeTimeChoice_Util
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10006093
		push	eax
		lea	ecx, [esp+20h+var_C]
		push	ecx
		push	23h
		push	esi
		call	sub_10001250
		add	esp, 10h
		mov	edi, eax
		push	0
		test	edi, edi
		jnz	short loc_10006071
		lea	edx, [esp+20h+var_C]
		push	edx
		call	SECITEM_FreeItem_Util
		add	esp, 8
		push	ebp
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10006071:				; CODE XREF: NSS_CMSSignerInfo_AddSigningTime+4Dj
		lea	eax, [esp+20h+var_C]
		push	eax
		call	SECITEM_FreeItem_Util
		mov	edx, [ebx+58h]
		mov	eax, [edx+44h]
		push	edi
		lea	ecx, [ebx+2Ch]
		push	ecx
		push	eax
		call	sub_100014D0
		add	esp, 14h
		test	eax, eax
		jz	short loc_100060A8

loc_10006093:				; CODE XREF: NSS_CMSSignerInfo_AddSigningTime+34j
		push	ebp
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100060A8:				; CODE XREF: NSS_CMSSignerInfo_AddSigningTime+91j
		push	ebp
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
NSS_CMSSignerInfo_AddSigningTime endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  84. NSS_CMSSignerInfo_AddSMIMECaps

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_AddSMIMECaps
NSS_CMSSignerInfo_AddSMIMECaps proc near ; DATA	XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, [ebx+58h]
		push	ebp
		push	esi
		mov	esi, [eax+44h]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	0
		push	0
		push	esi
		mov	ebp, eax
		call	SECITEM_AllocItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10006121
		push	edi
		push	esi
		call	sub_10007BA0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10006121
		push	1
		push	edi
		push	28h
		push	esi
		call	sub_10001250
		add	esp, 10h
		test	eax, eax
		jz	short loc_10006121
		mov	edx, [ebx+58h]
		push	eax
		mov	eax, [edx+44h]
		lea	ecx, [ebx+2Ch]
		push	ecx
		push	eax
		call	sub_100014D0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10006133

loc_10006121:				; CODE XREF: NSS_CMSSignerInfo_AddSMIMECaps+27j
					; NSS_CMSSignerInfo_AddSMIMECaps+35j ...
		push	ebp
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10006133:				; CODE XREF: NSS_CMSSignerInfo_AddSMIMECaps+5Fj
		push	ebp
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
NSS_CMSSignerInfo_AddSMIMECaps endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  85. NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs
NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, [ebx+58h]
		mov	ecx, [eax+58h]
		push	ebp
		push	0
		push	ecx
		call	ds:PR_Now
		mov	ebp, [esp+10h+arg_4]
		push	edx
		mov	edx, [esp+14h+arg_8]
		push	eax
		push	5
		push	1
		push	ebp
		push	edx
		call	CERT_VerifyCert
		add	esp, 20h
		test	eax, eax
		jz	short loc_10006187
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10006187:				; CODE XREF: NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs+2Fj
		mov	eax, [ebx+58h]
		push	esi
		mov	esi, [eax+44h]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	0
		push	0
		push	esi
		mov	[esp+20h+arg_0], eax
		call	SECITEM_AllocItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_100061E8
		push	ebp
		push	edi
		push	esi
		call	sub_10007C90
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100061E8
		push	1
		push	edi
		push	0B6h
		push	esi
		call	sub_10001250
		add	esp, 10h
		test	eax, eax
		jz	short loc_100061E8
		mov	edx, [ebx+58h]
		push	eax
		mov	eax, [edx+44h]
		lea	ecx, [ebx+2Ch]
		push	ecx
		push	eax
		call	sub_100014D0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100061FE

loc_100061E8:				; CODE XREF: NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs+5Aj
					; NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs+69j ...
		mov	ecx, [esp+10h+arg_0]
		push	ecx
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100061FE:				; CODE XREF: NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs+96j
		mov	edx, [esp+10h+arg_0]
		push	edx
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  83. NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs
NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs	proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, [ebx+58h]
		mov	ecx, [eax+58h]
		push	ebp
		push	0
		push	ecx
		call	ds:PR_Now
		mov	ebp, [esp+10h+arg_4]
		push	edx
		mov	edx, [esp+14h+arg_8]
		push	eax
		push	5
		push	1
		push	ebp
		push	edx
		call	CERT_VerifyCert
		add	esp, 20h
		test	eax, eax
		jz	short loc_10006257
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10006257:				; CODE XREF: NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs+2Fj
		mov	eax, [ebx+58h]
		push	esi
		mov	esi, [eax+44h]
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	0
		push	0
		push	esi
		mov	[esp+20h+arg_0], eax
		call	SECITEM_AllocItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_100062B8
		push	ebp
		push	edi
		push	esi
		call	NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100062B8
		push	1
		push	edi
		push	0BEh
		push	esi
		call	sub_10001250
		add	esp, 10h
		test	eax, eax
		jz	short loc_100062B8
		mov	edx, [ebx+58h]
		push	eax
		mov	eax, [edx+44h]
		lea	ecx, [ebx+2Ch]
		push	ecx
		push	eax
		call	sub_100014D0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100062CE

loc_100062B8:				; CODE XREF: NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs+5Aj
					; NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs+69j ...
		mov	ecx, [esp+10h+arg_0]
		push	ecx
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100062CE:				; CODE XREF: NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs+96j
		mov	edx, [esp+10h+arg_0]
		push	edx
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 103. NSS_SMIMESignerInfo_SaveSMIMEProfile

; =============== S U B	R O U T	I N E =======================================


		public NSS_SMIMESignerInfo_SaveSMIMEProfile
NSS_SMIMESignerInfo_SaveSMIMEProfile proc near ; DATA XREF: .rdata:off_10016AC8o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	ebx
		push	ebp
		push	esi
		xor	ebp, ebp
		push	edi
		xor	ebx, ebx
		mov	[esp+14h+var_4], ebp
		call	CERT_GetDefaultCertDB
		mov	esi, [esp+14h+arg_0]
		cmp	dword ptr [esi+70h], 1
		mov	edi, eax
		jz	short loc_10006317

loc_1000630E:				; CODE XREF: NSS_SMIMESignerInfo_SaveSMIMEProfile+59j
					; NSS_SMIMESignerInfo_SaveSMIMEProfile+69j ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10006317:				; CODE XREF: NSS_SMIMESignerInfo_SaveSMIMEProfile+1Cj
		mov	eax, [esi+2Ch]
		push	eax
		call	sub_10001080
		add	esp, 4
		test	eax, eax
		jnz	short loc_10006365
		mov	ecx, [esi+2Ch]
		push	1
		push	0B6h
		push	ecx
		call	sub_100112A0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10006365
		push	eax
		call	sub_100113C0
		add	esp, 4
		test	eax, eax
		jz	short loc_1000630E
		push	eax
		push	edi
		call	sub_10007D70
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_1000630E
		mov	[esp+14h+var_4], 1
		jmp	short loc_10006383
; ---------------------------------------------------------------------------

loc_10006365:				; CODE XREF: NSS_SMIMESignerInfo_SaveSMIMEProfile+35j
					; NSS_SMIMESignerInfo_SaveSMIMEProfile+4Cj
		push	edi
		push	esi
		call	NSS_CMSSignerInfo_GetSigningCertificate
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_1000630E
		mov	eax, [edi+118h]
		test	eax, eax
		jz	short loc_1000630E
		cmp	[eax], bl
		jz	short loc_1000630E

loc_10006383:				; CODE XREF: NSS_SMIMESignerInfo_SaveSMIMEProfile+73j
		call	PORT_GetError_Util
		mov	edx, [esi+2Ch]
		push	edx
		mov	[esp+18h+arg_0], eax
		call	sub_10001080
		add	esp, 4
		test	eax, eax
		jnz	short loc_100063C9
		mov	eax, [esi+2Ch]
		push	1
		push	28h
		push	eax
		call	sub_100112A0
		push	eax
		call	sub_100113C0
		mov	ecx, [esi+2Ch]
		push	1
		push	23h
		push	ecx
		mov	ebx, eax
		call	sub_100112A0
		push	eax
		call	sub_100113C0
		add	esp, 20h
		mov	ebp, eax

loc_100063C9:				; CODE XREF: NSS_SMIMESignerInfo_SaveSMIMEProfile+AAj
		push	ebp
		push	ebx
		push	edi
		call	CERT_SaveSMimeProfile
		add	esp, 0Ch
		cmp	[esp+14h+var_4], 0
		mov	esi, eax
		jz	short loc_100063E6
		push	edi
		call	CERT_DestroyCertificate
		add	esp, 4

loc_100063E6:				; CODE XREF: NSS_SMIMESignerInfo_SaveSMIMEProfile+EBj
		mov	edx, [esp+14h+arg_0]
		push	edx
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
NSS_SMIMESignerInfo_SaveSMIMEProfile endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  97. NSS_CMSSignerInfo_IncludeCerts

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_IncludeCerts
NSS_CMSSignerInfo_IncludeCerts proc near ; DATA	XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+5Ch], 0
		jnz	short loc_10006410

loc_1000640B:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+8Bj
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10006410:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+9j
		mov	eax, [esi+60h]
		test	eax, eax
		jz	short loc_10006427
		push	eax
		call	CERT_DestroyCertificateList
		add	esp, 4
		mov	dword ptr [esi+60h], 0

loc_10006427:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+15j
		mov	eax, [esp+4+arg_4]
		cmp	eax, 3		; switch 4 cases
		ja	short loc_10006483 ; jumptable 10006430	default	case
		jmp	ds:off_10006498[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10006437:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+30j
					; DATA XREF: .text:off_10006498o
		mov	dword ptr [esi+60h], 0 ; jumptable 10006430 case 0
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10006442:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+30j
					; DATA XREF: .text:off_10006498o
		mov	eax, [esi+5Ch]	; jumptable 10006430 case 1
		push	eax
		call	CERT_CertListFromCert
		add	esp, 4
		mov	[esi+60h], eax
		jmp	short loc_10006487
; ---------------------------------------------------------------------------

loc_10006453:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+30j
					; DATA XREF: .text:off_10006498o
		mov	ecx, [esp+4+arg_8] ; jumptable 10006430	case 2
		mov	edx, [esi+5Ch]
		push	0
		push	ecx
		push	edx
		call	CERT_CertChainFromCert
		add	esp, 0Ch
		mov	[esi+60h], eax
		jmp	short loc_10006487
; ---------------------------------------------------------------------------

loc_1000646B:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+30j
					; DATA XREF: .text:off_10006498o
		mov	eax, [esp+4+arg_8] ; jumptable 10006430	case 3
		mov	ecx, [esi+5Ch]
		push	1
		push	eax
		push	ecx
		call	CERT_CertChainFromCert
		add	esp, 0Ch
		mov	[esi+60h], eax
		jmp	short loc_10006487
; ---------------------------------------------------------------------------

loc_10006483:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+2Ej
		test	eax, eax	; jumptable 10006430 default case
		jz	short loc_10006491

loc_10006487:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+51j
					; NSS_CMSSignerInfo_IncludeCerts+69j ...
		cmp	dword ptr [esi+60h], 0
		jz	loc_1000640B

loc_10006491:				; CODE XREF: NSS_CMSSignerInfo_IncludeCerts+85j
		xor	eax, eax
		pop	esi
		retn
NSS_CMSSignerInfo_IncludeCerts endp

; ---------------------------------------------------------------------------
		align 4
off_10006498	dd offset loc_10006437	; DATA XREF: NSS_CMSSignerInfo_IncludeCerts+30r
		dd offset loc_10006442	; jump table for switch	statement
		dd offset loc_10006453
		dd offset loc_1000646B
		align 10h
; Exported entry  88. NSS_CMSSignerInfo_CreateWithSubjKeyID

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_CreateWithSubjKeyID
NSS_CMSSignerInfo_CreateWithSubjKeyID proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		mov	ecx, [esp+arg_C]
		mov	edx, [esp+arg_8]
		push	eax
		mov	eax, [esp+4+arg_4]
		push	ecx
		mov	ecx, [esp+8+arg_0]
		push	edx
		push	eax
		push	0
		push	1
		push	ecx
		call	sub_10005CB0
		add	esp, 1Ch
		retn
NSS_CMSSignerInfo_CreateWithSubjKeyID endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  87. NSS_CMSSignerInfo_Create

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_Create
NSS_CMSSignerInfo_Create proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	eax
		push	0
		push	0
		push	0
		push	ecx
		push	0
		push	edx
		call	sub_10005CB0
		add	esp, 1Ch
		retn
NSS_CMSSignerInfo_Create endp


; =============== S U B	R O U T	I N E =======================================


sub_10006500	proc near		; CODE XREF: sub_100055B0+D0p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 3Ch
		push	ebx
		push	ebp
		xor	eax, eax
		push	esi
		mov	esi, [esp+48h+arg_0]
		xor	ebp, ebp
		mov	[esp+48h+var_2C], eax
		mov	[esp+48h+var_28], eax
		mov	eax, [esi+58h]
		mov	[esp+48h+var_30], ebp
		mov	ecx, [eax+44h]
		mov	[esp+48h+arg_0], ecx
		mov	ecx, [esi+0Ch]
		push	edi
		xor	edi, edi
		sub	ecx, ebp
		mov	[esp+4Ch+var_3C], ebp
		jz	short loc_10006574
		dec	ecx
		jnz	loc_1000671C
		mov	edx, [esi+78h]
		mov	edi, [esi+74h]
		push	edx
		mov	[esi+74h], ebp
		call	SECKEY_CreateSubjectPublicKeyInfo
		mov	ebx, eax
		mov	eax, [esi+78h]
		push	eax
		call	SECKEY_DestroyPublicKey
		lea	ecx, [ebx+4]
		push	ecx
		lea	edx, [esp+58h+var_18]
		push	edx
		push	ebp
		mov	[esi+78h], ebp
		call	SECOID_CopyAlgorithmID_Util
		push	ebx
		call	SECKEY_DestroySubjectPublicKeyInfo
		add	esp, 18h
		lea	ebx, [esp+4Ch+var_18]
		jmp	short loc_10006594
; ---------------------------------------------------------------------------

loc_10006574:				; CODE XREF: sub_10006500+30j
		mov	eax, [eax+58h]
		mov	ebx, [esi+5Ch]
		push	eax
		push	ebx
		call	PK11_FindKeyByAnyCert
		mov	edi, eax
		add	esp, 8
		cmp	edi, ebp
		jz	loc_1000671C
		add	ebx, 0D8h

loc_10006594:				; CODE XREF: sub_10006500+72j
		push	esi
		call	sub_10005E50
		push	ebx
		mov	[esp+54h+var_38], eax
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 8
		cmp	dword ptr [esi+0Ch], 1
		mov	[esp+4Ch+var_34], eax
		jnz	short loc_100065BF
		lea	ecx, [esp+4Ch+var_18]
		push	ebp
		push	ecx
		call	SECOID_DestroyAlgorithmID_Util
		add	esp, 8

loc_100065BF:				; CODE XREF: sub_10006500+AFj
		mov	edx, [esp+4Ch+arg_4]
		cmp	[esi+2Ch], ebp
		lea	ebx, [esi+2Ch]
		jz	loc_100066BB
		mov	eax, [esp+4Ch+arg_0]
		push	ebp
		push	edx
		push	22h
		push	ebx
		push	eax
		call	sub_10001540
		add	esp, 14h
		test	eax, eax
		jnz	loc_1000671C
		mov	eax, [esp+4Ch+arg_8]
		cmp	eax, ebp
		jz	short loc_1000660B
		mov	ecx, [esp+4Ch+arg_0]
		push	ebp
		push	eax
		push	21h
		push	ebx
		push	ecx
		call	sub_10001540
		add	esp, 14h
		test	eax, eax
		jnz	loc_1000671C

loc_1000660B:				; CODE XREF: sub_10006500+EFj
		push	400h
		call	PORT_NewArena_Util
		add	esp, 4
		mov	[esp+4Ch+var_3C], eax
		cmp	eax, ebp
		jnz	short loc_10006632
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000671C
; ---------------------------------------------------------------------------

loc_10006632:				; CODE XREF: sub_10006500+11Ej
		mov	edx, [ebx]
		push	edx
		call	sub_100014B0
		add	esp, 4
		test	eax, eax
		jnz	loc_1000671C
		mov	ecx, [esp+4Ch+var_3C]
		lea	eax, [esp+4Ch+var_24]
		push	eax
		push	ebx
		push	ecx
		mov	[esp+58h+var_20], ebp
		mov	[esp+58h+var_1C], ebp
		call	sub_10001490
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1000671C
		mov	edx, [esp+4Ch+var_38]
		mov	eax, [edi+4]
		push	edx
		push	eax
		call	SEC_GetSignatureAlgorithmOidTag
		add	esp, 8
		cmp	eax, ebp
		jnz	short loc_1000668F
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000671C
; ---------------------------------------------------------------------------

loc_1000668F:				; CODE XREF: sub_10006500+17Bj
		mov	ecx, [esp+4Ch+var_1C]
		mov	edx, [esp+4Ch+var_20]
		push	eax
		push	edi
		push	ecx
		push	edx
		lea	eax, [esp+5Ch+var_30]
		push	eax
		call	SEC_SignData
		mov	ecx, [esp+60h+var_3C]
		push	ebp
		push	ecx
		mov	ebx, eax
		call	PORT_FreeArena_Util
		add	esp, 1Ch
		mov	[esp+4Ch+var_3C], ebp
		jmp	short loc_100066D1
; ---------------------------------------------------------------------------

loc_100066BB:				; CODE XREF: sub_10006500+C9j
		mov	ecx, [esp+4Ch+var_38]
		push	edx
		lea	eax, [esp+50h+var_30]
		push	eax
		push	ecx
		push	edi
		call	SGN_Digest
		add	esp, 10h
		mov	ebx, eax

loc_100066D1:				; CODE XREF: sub_10006500+1B9j
		push	edi
		call	SECKEY_DestroyPrivateKey
		add	esp, 4
		xor	edi, edi
		cmp	ebx, ebp
		jnz	short loc_1000671C
		mov	ebx, [esp+4Ch+arg_0]
		lea	edx, [esp+4Ch+var_30]
		push	edx
		lea	eax, [esi+48h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000671C
		lea	ecx, [esp+4Ch+var_30]
		push	ebp
		push	ecx
		call	SECITEM_FreeItem_Util
		mov	edx, [esp+54h+var_34]
		push	ebp
		push	edx
		add	esi, 30h
		push	esi
		push	ebx
		call	SECOID_SetAlgorithmID_Util
		add	esp, 18h
		test	eax, eax
		jz	short loc_1000675A

loc_1000671C:				; CODE XREF: sub_10006500+33j
					; sub_10006500+88j ...
		cmp	[esp+4Ch+var_28], ebp
		jz	short loc_10006730
		lea	eax, [esp+4Ch+var_30]
		push	ebp
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_10006730:				; CODE XREF: sub_10006500+220j
		cmp	edi, ebp
		jz	short loc_1000673D
		push	edi
		call	SECKEY_DestroyPrivateKey
		add	esp, 4

loc_1000673D:				; CODE XREF: sub_10006500+232j
		mov	eax, [esp+4Ch+var_3C]
		cmp	eax, ebp
		jz	short loc_1000674F
		push	ebp
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8

loc_1000674F:				; CODE XREF: sub_10006500+243j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000675A:				; CODE XREF: sub_10006500+21Aj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 3Ch
		retn
sub_10006500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006770	proc near		; CODE XREF: NSS_CMSSignedData_VerifySignerInfo+35p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		push	esi
		mov	esi, [esp+10h+arg_0]
		mov	eax, [esi+5Ch]
		push	edi
		test	eax, eax
		jnz	short loc_100067B4
		test	ebx, ebx
		jz	short loc_100067BA
		mov	eax, [esi+0Ch]
		sub	eax, 0
		jz	short loc_100067A4
		dec	eax
		jz	short loc_10006798
		xor	eax, eax
		jmp	short loc_100067B1
; ---------------------------------------------------------------------------

loc_10006798:				; CODE XREF: sub_10006770+22j
		mov	eax, [esi+10h]
		push	eax
		push	ebx
		call	CERT_FindCertBySubjectKeyID
		jmp	short loc_100067AE
; ---------------------------------------------------------------------------

loc_100067A4:				; CODE XREF: sub_10006770+1Fj
		mov	ecx, [esi+10h]
		push	ecx
		push	ebx
		call	CERT_FindCertByIssuerAndSN

loc_100067AE:				; CODE XREF: sub_10006770+32j
		add	esp, 8

loc_100067B1:				; CODE XREF: sub_10006770+26j
		mov	[esi+5Ch], eax

loc_100067B4:				; CODE XREF: sub_10006770+13j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_100067CB

loc_100067BA:				; CODE XREF: sub_10006770+17j
		pop	edi
		mov	dword ptr [esi+70h], 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_100067CB:				; CODE XREF: sub_10006770+48j
		lea	edx, [esp+14h+var_8]
		push	edx
		push	esi
		call	NSS_CMSSignerInfo_GetSigningTime
		add	esp, 8
		test	eax, eax
		jz	short loc_100067EB
		call	ds:PR_Now
		mov	[esp+14h+var_8], eax
		mov	[esp+14h+var_4], edx

loc_100067EB:				; CODE XREF: sub_10006770+6Bj
		mov	eax, [esi+58h]
		mov	ecx, [eax+58h]
		mov	edx, [esp+14h+var_4]
		mov	eax, [esp+14h+var_8]
		push	0
		push	ecx
		mov	ecx, [esp+1Ch+arg_8]
		push	edx
		push	eax
		push	ecx
		push	1
		push	edi
		push	ebx
		call	CERT_VerifyCert
		add	esp, 20h
		test	eax, eax
		jz	short loc_10006824
		pop	edi
		mov	dword ptr [esi+70h], 5
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10006824:				; CODE XREF: sub_10006770+A1j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_10006770	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  98. NSS_CMSSignerInfo_Verify

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSSignerInfo_Verify
NSS_CMSSignerInfo_Verify proc near	; CODE XREF: NSS_CMSSignedData_VerifySignerInfo+67p
					; DATA XREF: .rdata:off_10016AC8o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 14h
		push	edi
		mov	edi, [esp+18h+arg_0]
		mov	[esp+18h+var_14], 0
		test	edi, edi
		jnz	short loc_1000684C
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000684C:				; CODE XREF: NSS_CMSSignerInfo_Verify+12j
		mov	eax, [edi+5Ch]
		push	ebx
		push	ebp
		push	esi
		test	eax, eax
		jnz	short loc_10006863
		mov	[esp+24h+var_14], 4
		jmp	loc_10006A60
; ---------------------------------------------------------------------------

loc_10006863:				; CODE XREF: NSS_CMSSignerInfo_Verify+24j
		push	eax
		call	CERT_ExtractPublicKey
		add	esp, 4
		mov	[esp+24h+arg_0], eax
		test	eax, eax
		jnz	short loc_10006881
		mov	[esp+24h+var_14], 9
		jmp	loc_10006A60
; ---------------------------------------------------------------------------

loc_10006881:				; CODE XREF: NSS_CMSSignerInfo_Verify+42j
		push	edi
		call	sub_10005E50
		mov	ebx, eax
		lea	eax, [edi+30h]
		push	eax
		mov	[esp+2Ch+var_10], ebx
		call	SECOID_GetAlgorithmTag_Util
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	loc_10006A4B
		test	ebx, ebx
		jz	loc_10006A4B
		mov	ecx, [edi+2Ch]
		lea	esi, [edi+2Ch]
		push	ecx
		call	sub_10001080
		add	esp, 4
		test	eax, eax
		jnz	loc_100069D3
		mov	ebx, [esp+24h+arg_8]
		test	ebx, ebx
		jz	short loc_100068F8
		mov	edx, [esi]
		push	1
		push	21h
		push	edx
		call	sub_100112A0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100068EA

loc_100068DD:				; CODE XREF: NSS_CMSSignerInfo_Verify+C6j
					; NSS_CMSSignerInfo_Verify+D9j
		mov	[esp+24h+var_14], 8
		jmp	loc_10006A53
; ---------------------------------------------------------------------------

loc_100068EA:				; CODE XREF: NSS_CMSSignerInfo_Verify+ABj
		push	ebx
		push	eax
		call	sub_100012F0
		add	esp, 8
		test	eax, eax
		jz	short loc_100068DD

loc_100068F8:				; CODE XREF: NSS_CMSSignerInfo_Verify+98j
		mov	eax, [esi]
		push	1
		push	22h
		push	eax
		call	sub_100112A0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100068DD
		mov	ecx, [esp+24h+arg_4]
		test	ecx, ecx
		jz	loc_100069C6
		push	ecx
		push	eax
		call	sub_100012F0
		add	esp, 8
		test	eax, eax
		jz	loc_100069C6
		push	400h
		call	PORT_NewArena_Util
		mov	ebx, eax
		xor	eax, eax
		add	esp, 4
		cmp	ebx, eax
		jnz	short loc_1000694B

loc_1000693E:				; CODE XREF: NSS_CMSSignerInfo_Verify+134j
					; NSS_CMSSignerInfo_Verify+13Cj ...
		mov	[esp+24h+var_14], 9
		jmp	loc_10006A53
; ---------------------------------------------------------------------------

loc_1000694B:				; CODE XREF: NSS_CMSSignerInfo_Verify+10Cj
		lea	ecx, [esp+24h+var_C]
		push	ecx
		push	esi
		push	ebx
		mov	[esp+30h+var_8], eax
		mov	[esp+30h+var_4], eax
		call	sub_10001490
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000693E
		mov	ecx, [esp+24h+var_8]
		test	ecx, ecx
		jz	short loc_1000693E
		mov	eax, [esp+24h+var_4]
		test	eax, eax
		jz	short loc_1000693E
		mov	edx, [edi+58h]
		mov	edx, [edx+58h]
		push	edx
		mov	edx, [esp+28h+var_10]
		push	0
		push	edx
		push	ebp
		lea	edx, [edi+48h]
		push	edx
		mov	edx, [esp+38h+arg_0]
		push	edx
		push	eax
		push	ecx
		call	VFY_VerifyDataDirect
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		push	0
		neg	esi
		push	ebx
		inc	esi
		call	PORT_FreeArena_Util
		add	esp, 28h
		cmp	esi, 2
		jnz	short loc_10006A2C

loc_100069AE:				; CODE XREF: NSS_CMSSignerInfo_Verify+1DAj
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE00Ah
		jnz	short loc_10006A0C
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		jmp	short loc_10006A29
; ---------------------------------------------------------------------------

loc_100069C6:				; CODE XREF: NSS_CMSSignerInfo_Verify+E1j
					; NSS_CMSSignerInfo_Verify+F3j
		mov	[esp+24h+var_14], 3
		jmp	loc_10006A53
; ---------------------------------------------------------------------------

loc_100069D3:				; CODE XREF: NSS_CMSSignerInfo_Verify+8Cj
		cmp	dword ptr [edi+50h], 0
		lea	eax, [edi+48h]
		jz	short loc_10006A53
		mov	ecx, [esp+24h+arg_4]
		test	ecx, ecx
		jz	short loc_10006A05
		mov	edx, [edi+58h]
		mov	edx, [edx+58h]
		push	edx
		push	ebx
		push	ebp
		push	eax
		mov	eax, [esp+34h+arg_0]
		push	eax
		push	ecx
		call	VFY_VerifyDigestDirect
		add	esp, 18h
		test	eax, eax
		jnz	short loc_10006A05
		lea	esi, [eax+1]
		jmp	short loc_10006A2C
; ---------------------------------------------------------------------------

loc_10006A05:				; CODE XREF: NSS_CMSSignerInfo_Verify+1B2j
					; NSS_CMSSignerInfo_Verify+1CEj
		mov	esi, 2
		jmp	short loc_100069AE
; ---------------------------------------------------------------------------

loc_10006A0C:				; CODE XREF: NSS_CMSSignerInfo_Verify+188j
		cmp	eax, 0FFFFE02Eh
		jz	short loc_10006A1A
		cmp	eax, 0FFFFE006h
		jnz	short loc_10006A2C

loc_10006A1A:				; CODE XREF: NSS_CMSSignerInfo_Verify+1E1j
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		mov	esi, 7

loc_10006A29:				; CODE XREF: NSS_CMSSignerInfo_Verify+194j
		add	esp, 4

loc_10006A2C:				; CODE XREF: NSS_CMSSignerInfo_Verify+17Cj
					; NSS_CMSSignerInfo_Verify+1D3j ...
		mov	ecx, [esp+24h+arg_0]
		push	ecx
		call	SECKEY_DestroyPublicKey
		add	esp, 4
		mov	[edi+70h], esi
		lea	eax, [esi-1]
		pop	esi
		pop	ebp
		neg	eax
		pop	ebx
		sbb	eax, eax
		pop	edi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10006A4B:				; CODE XREF: NSS_CMSSignerInfo_Verify+6Dj
					; NSS_CMSSignerInfo_Verify+75j
		mov	[esp+24h+var_14], 6

loc_10006A53:				; CODE XREF: NSS_CMSSignerInfo_Verify+B5j
					; NSS_CMSSignerInfo_Verify+116j ...
		mov	edx, [esp+24h+arg_0]
		push	edx
		call	SECKEY_DestroyPublicKey
		add	esp, 4

loc_10006A60:				; CODE XREF: NSS_CMSSignerInfo_Verify+2Ej
					; NSS_CMSSignerInfo_Verify+4Cj
		mov	eax, [esp+24h+var_14]
		push	0FFFFE02Fh
		mov	[edi+70h], eax
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 14h
		retn
NSS_CMSSignerInfo_Verify endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006A80	proc near		; CODE XREF: .text:10006BD8p
					; DATA XREF: .text:10006BC0o

arg_0		= dword	ptr  4

		mov	eax, dword_10019504
		test	eax, eax
		jz	short loc_10006A93
		push	eax
		call	ds:PR_Lock
		add	esp, 4

loc_10006A93:				; CODE XREF: sub_10006A80+7j
		mov	eax, dword_100194F4
		test	eax, eax
		jz	short loc_10006AAF
		push	eax
		call	PL_HashTableDestroy
		add	esp, 4
		mov	dword_100194F4,	0

loc_10006AAF:				; CODE XREF: sub_10006A80+1Aj
		mov	eax, dword_100194F0
		test	eax, eax
		jz	short loc_10006ACD
		push	0
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	dword_100194F0,	0

loc_10006ACD:				; CODE XREF: sub_10006A80+36j
		mov	eax, dword_10019514
		push	esi
		push	edi
		mov	edi, ds:PR_DestroyLock
		test	eax, eax
		jz	short loc_10006AE4
		push	eax
		call	edi ; PR_DestroyLock
		add	esp, 4

loc_10006AE4:				; CODE XREF: sub_10006A80+5Cj
		mov	esi, dword_10019504
		test	esi, esi
		jz	short loc_10006B05
		push	esi
		mov	dword_10019504,	0
		call	ds:PR_Unlock
		push	esi
		call	edi ; PR_DestroyLock
		add	esp, 8

loc_10006B05:				; CODE XREF: sub_10006A80+6Cj
		cmp	[esp+8+arg_0], 0
		pop	edi
		pop	esi
		jnz	short loc_10006B30
		mov	eax, dword_10019508
		mov	ecx, dword_1001950C
		mov	edx, dword_10019510
		mov	dword_100194F8,	eax
		mov	dword_100194FC,	ecx
		mov	dword_10019500,	edx

loc_10006B30:				; CODE XREF: sub_10006A80+8Cj
		xor	eax, eax
		retn
sub_10006A80	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  52. NSS_CMSMessage_GetContentInfo

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSMessage_GetContentInfo
NSS_CMSMessage_GetContentInfo proc near	; CODE XREF: NSS_CMSEncoder_Start+75p
					; DATA XREF: .text:10006B90o ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
NSS_CMSMessage_GetContentInfo endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006B50	proc near		; DATA XREF: .text:10006B8Bo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		cmp	ecx, [esp+arg_4]
		setz	al
		retn
sub_10006B50	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10006B60:				; DATA XREF: NSS_CMSType_RegisterContentTypeo
		push	esi
		mov	esi, ds:PR_NewLock
		call	esi ; PR_NewLock
		mov	dword_10019504,	eax
		test	eax, eax
		jz	short loc_10006BE0
		call	esi ; PR_NewLock
		cmp	dword_10019504,	0
		mov	dword_10019514,	eax
		jz	short loc_10006BD1
		push	0
		push	0
		push	offset PL_CompareValues
		push	offset sub_10006B50
		push	offset NSS_CMSMessage_GetContentInfo
		push	40h
		call	PL_NewHashTable
		add	esp, 18h
		mov	dword_100194F4,	eax
		test	eax, eax
		jz	short loc_10006BD1
		push	800h
		call	PORT_NewArena_Util
		add	esp, 4
		mov	dword_100194F0,	eax
		test	eax, eax
		jz	short loc_10006BD1
		push	0
		push	offset sub_10006A80
		call	NSS_RegisterShutdown
		add	esp, 8
		test	eax, eax
		jz	short loc_10006BE5

loc_10006BD1:				; CODE XREF: .text:10006B80j
					; .text:10006BA6j ...
		push	0
		push	offset dword_100194F8
		call	sub_10006A80
		add	esp, 8

loc_10006BE0:				; CODE XREF: .text:10006B70j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10006BE5:				; CODE XREF: .text:10006BCFj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006BF0	proc near		; CODE XREF: sub_10006D40+Ap
					; sub_10006E90+Dp ...

arg_0		= dword	ptr  4

		push	esi
		xor	esi, esi
		cmp	dword_100194F4,	esi
		jnz	short loc_10006BFF
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10006BFF:				; CODE XREF: sub_10006BF0+9j
		mov	eax, dword_10019504
		push	eax
		call	ds:PR_Lock
		mov	eax, dword_100194F4
		add	esp, 4
		test	eax, eax
		jz	short loc_10006C27
		mov	ecx, [esp+4+arg_0]
		push	ecx
		push	eax
		call	PL_HashTableLookupConst
		add	esp, 8
		mov	esi, eax

loc_10006C27:				; CODE XREF: sub_10006BF0+25j
		mov	edx, dword_10019504
		push	edx
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, esi
		pop	esi
		retn
sub_10006BF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006C40	proc near		; CODE XREF: NSS_CMSType_RegisterContentType+A5p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	dword_100194F4,	0
		jz	short loc_10006C71
		mov	eax, dword_10019504
		push	eax
		call	ds:PR_Lock
		mov	eax, dword_100194F4
		add	esp, 4
		test	eax, eax
		jnz	short loc_10006C75
		mov	ecx, dword_10019504
		push	ecx
		call	ds:PR_Unlock
		add	esp, 4

loc_10006C71:				; CODE XREF: sub_10006C40+7j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10006C75:				; CODE XREF: sub_10006C40+1Fj
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		push	esi
		push	edx
		push	ecx
		push	eax
		call	PL_HashTableAdd
		mov	edx, dword_10019504
		push	edx
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 10h
		neg	esi
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	esi
		retn
sub_10006C40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006CB0	proc near		; CODE XREF: NSS_CMSContentInfo_GetContent+35p
					; sub_10001A30+63p ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		lea	eax, [edi-1Ah]	; switch 5 cases
		cmp	eax, 4
		ja	short loc_10006CCB ; jumptable 10006CBD	default	case
		jmp	ds:off_10006D24[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10006CC4:				; CODE XREF: sub_10006CB0+Dj
					; DATA XREF: .text:off_10006D24o
		mov	eax, 1		; jumptable 10006CBD cases 26,27,29,30
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10006CCB:				; CODE XREF: sub_10006CB0+Bj
					; sub_10006CB0+Dj
					; DATA XREF: ...
		push	esi		; jumptable 10006CBD default case
		xor	esi, esi
		cmp	dword_100194F4,	esi
		jz	short loc_10006D1C
		mov	eax, dword_10019504
		push	eax
		call	ds:PR_Lock
		mov	eax, dword_100194F4
		add	esp, 4
		test	eax, eax
		jz	short loc_10006CFA
		push	edi
		push	eax
		call	PL_HashTableLookupConst
		add	esp, 8
		mov	esi, eax

loc_10006CFA:				; CODE XREF: sub_10006CB0+3Cj
		mov	ecx, dword_10019504
		push	ecx
		call	ds:PR_Unlock
		add	esp, 4
		test	esi, esi
		jz	short loc_10006D1C
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_10006D1C
		pop	esi
		mov	eax, 1
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10006D1C:				; CODE XREF: sub_10006CB0+24j
					; sub_10006CB0+5Cj ...
		pop	esi
		xor	eax, eax
		pop	edi
		retn
sub_10006CB0	endp

; ---------------------------------------------------------------------------
		align 4
off_10006D24	dd offset loc_10006CC4	; DATA XREF: sub_10006CB0+Dr
		dd offset loc_10006CC4	; jump table for switch	statement
		dd offset loc_10006CCB
		dd offset loc_10006CC4
		dd offset loc_10006CC4
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006D40	proc near		; CODE XREF: NSS_CMSContentInfo_SetContent+47p
					; NSS_CMSContentInfo_GetContent+42p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 19h
		jz	short loc_10006D5F
		push	eax
		call	sub_10006BF0
		add	esp, 4
		test	eax, eax
		jz	short loc_10006D5C
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_10006D5F

loc_10006D5C:				; CODE XREF: sub_10006D40+14j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10006D5F:				; CODE XREF: sub_10006D40+7j
					; sub_10006D40+1Aj
		mov	eax, 1
		retn
sub_10006D40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006D70	proc near		; CODE XREF: sub_100011E0+4Fp
					; sub_100073A0+2Fj

arg_0		= dword	ptr  4

		push	esi
		xor	esi, esi
		cmp	dword_100194F4,	esi
		jz	short loc_10006DBE
		mov	eax, dword_10019504
		push	eax
		call	ds:PR_Lock
		mov	eax, dword_100194F4
		add	esp, 4
		test	eax, eax
		jz	short loc_10006DA3
		mov	ecx, [esp+4+arg_0]
		push	ecx
		push	eax
		call	PL_HashTableLookupConst
		add	esp, 8
		mov	esi, eax

loc_10006DA3:				; CODE XREF: sub_10006D70+21j
		mov	edx, dword_10019504
		push	edx
		call	ds:PR_Unlock
		add	esp, 4
		test	esi, esi
		jz	short loc_10006DBE
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_10006DCA

loc_10006DBE:				; CODE XREF: sub_10006D70+9j
					; sub_10006D70+45j
		push	0
		push	0
		call	NSS_Get_SEC_PointerToOctetStringTemplate_Util
		add	esp, 8

loc_10006DCA:				; CODE XREF: sub_10006D70+4Cj
		pop	esi
		retn
sub_10006D70	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_100073F0

loc_10006DD0:				; CODE XREF: sub_100073F0+2Fj
		push	esi
		xor	esi, esi
		cmp	dword_100194F4,	esi
		jz	short loc_10006E1C
		mov	eax, dword_10019504
		push	eax
		call	ds:PR_Lock
		mov	eax, dword_100194F4
		add	esp, 4
		test	eax, eax
		jz	short loc_10006E03
		mov	ecx, [esp+4+arg_0]
		push	ecx
		push	eax
		call	PL_HashTableLookupConst
		add	esp, 8
		mov	esi, eax

loc_10006E03:				; CODE XREF: sub_100073F0-5FFj
		mov	edx, dword_10019504
		push	edx
		call	ds:PR_Unlock
		add	esp, 4
		test	esi, esi
		jz	short loc_10006E1C
		mov	eax, [esi+8]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10006E1C:				; CODE XREF: sub_100073F0-617j
					; sub_100073F0-5DBj
		mov	eax, 4
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_100073F0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006E30	proc near		; CODE XREF: sub_10001950+6Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		xor	esi, esi
		cmp	dword_100194F4,	esi
		jz	short loc_10006E88
		mov	eax, dword_10019504
		push	eax
		call	ds:PR_Lock
		mov	eax, dword_100194F4
		add	esp, 4
		test	eax, eax
		jz	short loc_10006E63
		mov	ecx, [esp+4+arg_0]
		push	ecx
		push	eax
		call	PL_HashTableLookupConst
		add	esp, 8
		mov	esi, eax

loc_10006E63:				; CODE XREF: sub_10006E30+21j
		mov	edx, dword_10019504
		push	edx
		call	ds:PR_Unlock
		add	esp, 4
		test	esi, esi
		jz	short loc_10006E88
		mov	esi, [esi+10h]
		test	esi, esi
		jz	short loc_10006E88
		mov	eax, [esp+4+arg_4]
		push	eax
		call	esi
		add	esp, 4

loc_10006E88:				; CODE XREF: sub_10006E30+9j
					; sub_10006E30+45j ...
		pop	esi
		retn
sub_10006E30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006E90	proc near		; CODE XREF: sub_10002180+59p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	eax, 19h
		jnz	short loc_10006E9C

loc_10006E99:				; CODE XREF: sub_10006E90+2Fj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10006E9C:				; CODE XREF: sub_10006E90+7j
		push	eax
		call	sub_10006BF0
		add	esp, 4
		test	eax, eax
		jz	short loc_10006EC1
		mov	ecx, [eax+14h]
		test	ecx, ecx
		jz	short loc_10006EBB
		mov	eax, [esp+arg_4]
		push	eax
		call	ecx
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10006EBB:				; CODE XREF: sub_10006E90+1Ej
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_10006E99

loc_10006EC1:				; CODE XREF: sub_10006E90+17j
		or	eax, 0FFFFFFFFh
		retn
sub_10006E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006ED0	proc near		; CODE XREF: sub_10002350+CFp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	eax, 19h
		jnz	short loc_10006EDC

loc_10006ED9:				; CODE XREF: sub_10006ED0+2Fj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10006EDC:				; CODE XREF: sub_10006ED0+7j
		push	eax
		call	sub_10006BF0
		add	esp, 4
		test	eax, eax
		jz	short loc_10006F01
		mov	ecx, [eax+18h]
		test	ecx, ecx
		jz	short loc_10006EFB
		mov	eax, [esp+arg_4]
		push	eax
		call	ecx
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10006EFB:				; CODE XREF: sub_10006ED0+1Ej
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_10006ED9

loc_10006F01:				; CODE XREF: sub_10006ED0+17j
		or	eax, 0FFFFFFFFh
		retn
sub_10006ED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006F10	proc near		; CODE XREF: sub_10001DF0+62p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	eax, 19h
		jnz	short loc_10006F1C

loc_10006F19:				; CODE XREF: sub_10006F10+2Fj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10006F1C:				; CODE XREF: sub_10006F10+7j
		push	eax
		call	sub_10006BF0
		add	esp, 4
		test	eax, eax
		jz	short loc_10006F41
		mov	ecx, [eax+1Ch]
		test	ecx, ecx
		jz	short loc_10006F3B
		mov	eax, [esp+arg_4]
		push	eax
		call	ecx
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10006F3B:				; CODE XREF: sub_10006F10+1Ej
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_10006F19

loc_10006F41:				; CODE XREF: sub_10006F10+17j
		or	eax, 0FFFFFFFFh
		retn
sub_10006F10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006F50	proc near		; CODE XREF: sub_100033F0+133p
					; NSS_CMSEncoder_Start+E0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	eax, 19h
		jnz	short loc_10006F5C

loc_10006F59:				; CODE XREF: sub_10006F50+2Fj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10006F5C:				; CODE XREF: sub_10006F50+7j
		push	eax
		call	sub_10006BF0
		add	esp, 4
		test	eax, eax
		jz	short loc_10006F81
		mov	ecx, [eax+20h]
		test	ecx, ecx
		jz	short loc_10006F7B
		mov	eax, [esp+arg_4]
		push	eax
		call	ecx
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10006F7B:				; CODE XREF: sub_10006F50+1Ej
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_10006F59

loc_10006F81:				; CODE XREF: sub_10006F50+17j
		or	eax, 0FFFFFFFFh
		retn
sub_10006F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006F90	proc near		; CODE XREF: sub_100033F0+5Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	eax, 19h
		jnz	short loc_10006F9C

loc_10006F99:				; CODE XREF: sub_10006F90+2Fj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10006F9C:				; CODE XREF: sub_10006F90+7j
		push	eax
		call	sub_10006BF0
		add	esp, 4
		test	eax, eax
		jz	short loc_10006FC1
		mov	ecx, [eax+24h]
		test	ecx, ecx
		jz	short loc_10006FBB
		mov	eax, [esp+arg_4]
		push	eax
		call	ecx
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10006FBB:				; CODE XREF: sub_10006F90+1Ej
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_10006F99

loc_10006FC1:				; CODE XREF: sub_10006F90+17j
		or	eax, 0FFFFFFFFh
		retn
sub_10006F90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006FD0	proc near		; CODE XREF: sub_10002FD0+5Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	eax, 19h
		jnz	short loc_10006FDC

loc_10006FD9:				; CODE XREF: sub_10006FD0+2Fj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10006FDC:				; CODE XREF: sub_10006FD0+7j
		push	eax
		call	sub_10006BF0
		add	esp, 4
		test	eax, eax
		jz	short loc_10007001
		mov	ecx, [eax+28h]
		test	ecx, ecx
		jz	short loc_10006FFB
		mov	eax, [esp+arg_4]
		push	eax
		call	ecx
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10006FFB:				; CODE XREF: sub_10006FD0+1Ej
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_10006FD9

loc_10007001:				; CODE XREF: sub_10006FD0+17j
		or	eax, 0FFFFFFFFh
		retn
sub_10006FD0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  99. NSS_CMSType_RegisterContentType

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSType_RegisterContentType
NSS_CMSType_RegisterContentType	proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		push	offset loc_10006B60
		push	offset dword_100194F8
		call	ds:PR_CallOnce
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000702B
		or	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000702B:				; CODE XREF: NSS_CMSType_RegisterContentType+16j
		mov	eax, dword_10019514
		push	esi
		push	eax
		call	ds:PR_Lock
		mov	esi, [esp+8+arg_0]
		push	esi
		call	sub_10006BF0
		add	esp, 8
		test	eax, eax
		jz	short loc_1000705D
		mov	ecx, dword_10019514
		push	ecx
		call	ds:PR_Unlock
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000705D:				; CODE XREF: NSS_CMSType_RegisterContentType+37j
		mov	edx, dword_100194F0
		push	2Ch
		push	edx
		call	PORT_ArenaAlloc_Util
		mov	ecx, [esp+0Ch+arg_8]
		mov	edx, [esp+0Ch+arg_28]
		mov	[eax+8], ecx
		mov	ecx, [esp+0Ch+arg_4]
		mov	[eax+0Ch], edx
		mov	edx, [esp+0Ch+arg_C]
		mov	[eax+4], ecx
		mov	ecx, [esp+0Ch+arg_10]
		mov	[eax+10h], edx
		mov	edx, [esp+0Ch+arg_14]
		mov	[eax+14h], ecx
		mov	ecx, [esp+0Ch+arg_18]
		mov	[eax+18h], edx
		mov	edx, [esp+0Ch+arg_1C]
		mov	[eax+1Ch], ecx
		mov	ecx, [esp+0Ch+arg_20]
		mov	[eax+20h], edx
		mov	edx, [esp+0Ch+arg_24]
		push	eax
		push	esi
		mov	[eax], esi
		mov	[eax+24h], ecx
		mov	[eax+28h], edx
		call	sub_10006C40
		mov	esi, eax
		mov	eax, dword_10019514
		push	eax
		call	ds:PR_Unlock
		add	esp, 14h
		mov	eax, esi
		pop	esi
		retn
NSS_CMSType_RegisterContentType	endp

; ---------------------------------------------------------------------------
		align 10h

loc_100070D0:				; DATA XREF: sub_100055B0+29Eo
					; sub_100075E0+BAo
		mov	edx, [esp+4]
		mov	ecx, [edx+8]
		push	esi
		mov	esi, [esp+0Ch]
		mov	eax, [esi+8]
		cmp	ecx, eax
		jz	short loc_100070EB
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		inc	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100070EB:				; CODE XREF: .text:100070E1j
		xor	eax, eax
		push	edi
		test	ecx, ecx
		jz	short loc_10007105
		mov	esi, [esi+4]
		mov	edi, [edx+4]

loc_100070F8:				; CODE XREF: .text:10007103j
		mov	dl, [edi+eax]
		cmp	dl, [esi+eax]
		jnz	short loc_1000710A
		inc	eax
		cmp	eax, ecx
		jb	short loc_100070F8

loc_10007105:				; CODE XREF: .text:100070F0j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000710A:				; CODE XREF: .text:100070FEj
		sbb	eax, eax
		and	eax, 0FFFFFFFEh
		pop	edi
		inc	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007120	proc near		; CODE XREF: NSS_CMSSignedData_SetDigests+9Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_10007165
		cmp	dword ptr [edi], 0
		jz	short loc_10007165
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	esi
		xor	esi, esi
		mov	eax, edi

loc_10007138:				; CODE XREF: sub_10007120+30j
		mov	eax, [eax]
		push	ebx
		push	eax
		call	SECOID_CompareAlgorithmID_Util
		add	esp, 8
		test	eax, eax
		jz	short loc_10007152
		inc	esi
		cmp	dword ptr [edi+esi*4], 0
		lea	eax, [edi+esi*4]
		jnz	short loc_10007138

loc_10007152:				; CODE XREF: sub_10007120+26j
		cmp	dword ptr [edi+esi*4], 0
		jnz	short loc_1000715F
		pop	esi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000715F:				; CODE XREF: sub_10007120+36j
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10007165:				; CODE XREF: sub_10007120+7j
					; sub_10007120+Cj
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
sub_10007120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007170	proc near		; CODE XREF: sub_10005370+2Dp
					; sub_10005480+B7p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_100071CE
		cmp	dword ptr [edi], 0
		jz	short loc_100071CE
		mov	eax, [esp+4+arg_4]
		push	ebx
		push	eax
		call	SECOID_FindOIDByTag_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_10007198
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10007198:				; CODE XREF: sub_10007170+20j
		push	esi
		xor	esi, esi
		cmp	[edi], esi
		jz	short loc_100071BB
		mov	eax, edi

loc_100071A1:				; CODE XREF: sub_10007170+49j
		mov	ecx, [eax]
		push	ebx
		push	ecx
		call	SECITEM_ItemsAreEqual_Util
		add	esp, 8
		test	eax, eax
		jnz	short loc_100071BB
		inc	esi
		cmp	dword ptr [edi+esi*4], 0
		lea	eax, [edi+esi*4]
		jnz	short loc_100071A1

loc_100071BB:				; CODE XREF: sub_10007170+2Dj
					; sub_10007170+3Fj
		cmp	dword ptr [edi+esi*4], 0
		jnz	short loc_100071C8
		pop	esi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100071C8:				; CODE XREF: sub_10007170+4Fj
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100071CE:				; CODE XREF: sub_10007170+7j
					; sub_10007170+Cj
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
sub_10007170	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100071E0	proc near		; CODE XREF: sub_10004DA0+4Cp
					; sub_10005E10+1Dp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0C3h
		jg	short loc_10007212
		jz	short loc_10007237 ; jumptable 10007224	case 279
		lea	ecx, [eax-11h]	; switch 178 cases
		cmp	ecx, 0B1h
		ja	short locret_10007242 ;	jumptable 100071FF default case
		movzx	ecx, ds:byte_10007258[ecx]
		jmp	ds:off_10007244[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10007206:				; CODE XREF: sub_100071E0+1Fj
					; DATA XREF: .text:off_10007244o
		mov	eax, 1		; jumptable 100071FF case 17
		retn
; ---------------------------------------------------------------------------

loc_1000720C:				; CODE XREF: sub_100071E0+1Fj
					; DATA XREF: .text:off_10007244o
		mov	eax, 3		; jumptable 100071FF case 19
		retn
; ---------------------------------------------------------------------------

loc_10007212:				; CODE XREF: sub_100071E0+9j
		lea	ecx, [eax-0C4h]	; switch 85 cases
		cmp	ecx, 54h
		ja	short locret_10007242 ;	jumptable 100071FF default case
		movzx	edx, ds:byte_10007320[ecx]
		jmp	ds:off_1000730C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000722B:				; CODE XREF: sub_100071E0+1Fj
					; sub_100071E0+44j
					; DATA XREF: ...
		mov	eax, 4		; jumptable 100071FF cases 20,125
					; jumptable 10007224 case 201
		retn
; ---------------------------------------------------------------------------

loc_10007231:				; CODE XREF: sub_100071E0+1Fj
					; sub_100071E0+44j
					; DATA XREF: ...
		mov	eax, 0BFh	; jumptable 100071FF case 194
					; jumptable 10007224 case 278
		retn
; ---------------------------------------------------------------------------

loc_10007237:				; CODE XREF: sub_100071E0+Bj
					; sub_100071E0+44j
					; DATA XREF: ...
		mov	eax, 0C0h	; jumptable 10007224 case 279
		retn
; ---------------------------------------------------------------------------

loc_1000723D:				; CODE XREF: sub_100071E0+44j
					; DATA XREF: .text:off_1000730Co
		mov	eax, 0C1h	; jumptable 10007224 cases 196,280

locret_10007242:			; CODE XREF: sub_100071E0+16j
					; sub_100071E0+1Fj ...
		retn			; jumptable 100071FF default case
sub_100071E0	endp

; ---------------------------------------------------------------------------
		align 4
off_10007244	dd offset loc_10007206,	offset loc_1000720C, offset loc_1000722B
					; DATA XREF: sub_100071E0+1Fr
		dd offset loc_10007231,	offset locret_10007242 ; jump table for	switch statement
byte_10007258	db	0,     4,     1,     2 ; DATA XREF: sub_100071E0+18r
		db	4,     4,     4,     4 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	2,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     3
		align 4
off_1000730C	dd offset loc_1000723D,	offset loc_1000722B, offset loc_10007231
					; DATA XREF: sub_100071E0+44r
		dd offset loc_10007237,	offset locret_10007242 ; jump table for	switch statement
byte_10007320	db	0,     4,     4,     4 ; DATA XREF: sub_100071E0+3Dr
		db	4,     1,     4,     4 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     2,     3
		db	0
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007380	proc near		; CODE XREF: NSS_CMSDigestContext_StartMultiple+8Ep

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		mov	[esp+arg_0], eax
		jmp	HASH_GetHashObjectByOidTag
sub_10007380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100073A0	proc near		; CODE XREF: sub_10002180+CDp
					; sub_100033F0+D6p

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		lea	eax, [ecx-1Ah]	; switch 5 cases
		cmp	eax, 4
		ja	short loc_100073CB ; jumptable 100073AC	default	case
		jmp	ds:off_100073D4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100073B3:				; CODE XREF: sub_100073A0+Cj
					; DATA XREF: .text:off_100073D4o
		mov	eax, offset dword_10013578 ; jumptable 100073AC	case 26
		retn
; ---------------------------------------------------------------------------

loc_100073B9:				; CODE XREF: sub_100073A0+Cj
					; DATA XREF: .text:off_100073D4o
		mov	eax, offset dword_100139B8 ; jumptable 100073AC	case 27
		retn
; ---------------------------------------------------------------------------

loc_100073BF:				; CODE XREF: sub_100073A0+Cj
					; DATA XREF: .text:off_100073D4o
		mov	eax, offset dword_10013AA8 ; jumptable 100073AC	case 30
		retn
; ---------------------------------------------------------------------------

loc_100073C5:				; CODE XREF: sub_100073A0+Cj
					; DATA XREF: .text:off_100073D4o
		mov	eax, offset dword_10013A38 ; jumptable 100073AC	case 29
		retn
; ---------------------------------------------------------------------------

loc_100073CB:				; CODE XREF: sub_100073A0+Aj
					; sub_100073A0+Cj
					; DATA XREF: ...
		mov	[esp+arg_0], ecx ; jumptable 100073AC default case
		jmp	sub_10006D70
sub_100073A0	endp

; ---------------------------------------------------------------------------
off_100073D4	dd offset loc_100073B3	; DATA XREF: sub_100073A0+Cr
		dd offset loc_100073B9	; jump table for switch	statement
		dd offset loc_100073CB
		dd offset loc_100073C5
		dd offset loc_100073BF
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100073F0	proc near		; CODE XREF: sub_10002180+F8p

arg_0		= dword	ptr  4

; FUNCTION CHUNK AT 10006DD0 SIZE 00000053 BYTES

		mov	ecx, [esp+arg_0]
		lea	eax, [ecx-1Ah]	; switch 5 cases
		cmp	eax, 4
		ja	short loc_1000741B ; jumptable 100073FC	default	case
		jmp	ds:off_10007424[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10007403:				; CODE XREF: sub_100073F0+Cj
					; DATA XREF: .text:off_10007424o
		mov	eax, 74h	; jumptable 100073FC case 26
		retn
; ---------------------------------------------------------------------------

loc_10007409:				; CODE XREF: sub_100073F0+Cj
					; DATA XREF: .text:off_10007424o
		mov	eax, 60h	; jumptable 100073FC case 27
		retn
; ---------------------------------------------------------------------------

loc_1000740F:				; CODE XREF: sub_100073F0+Cj
					; DATA XREF: .text:off_10007424o
		mov	eax, 58h	; jumptable 100073FC case 30
		retn
; ---------------------------------------------------------------------------

loc_10007415:				; CODE XREF: sub_100073F0+Cj
					; DATA XREF: .text:off_10007424o
		mov	eax, 84h	; jumptable 100073FC case 29
		retn
; ---------------------------------------------------------------------------

loc_1000741B:				; CODE XREF: sub_100073F0+Aj
					; sub_100073F0+Cj
					; DATA XREF: ...
		mov	[esp+arg_0], ecx ; jumptable 100073FC default case
		jmp	loc_10006DD0
sub_100073F0	endp

; ---------------------------------------------------------------------------
off_10007424	dd offset loc_10007403	; DATA XREF: sub_100073F0+Cr
		dd offset loc_10007409	; jump table for switch	statement
		dd offset loc_1000741B
		dd offset loc_10007415
		dd offset loc_1000740F
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007440	proc near		; CODE XREF: sub_10001E80+21p
					; sub_10002180+77p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_1000744D
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000744D:				; CODE XREF: sub_10007440+7j
		mov	ecx, [esp+4+arg_4]
		lea	eax, [ecx-1Ah]
		push	esi
		cmp	eax, 4		; switch 5 cases
		ja	short loc_10007481 ; jumptable 1000745A	default	case
		jmp	ds:off_10007498[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10007461:				; CODE XREF: sub_10007440+1Aj
					; DATA XREF: .text:off_10007498o
		lea	esi, [edi+10h]	; jumptable 1000745A case 0
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10007469:				; CODE XREF: sub_10007440+1Aj
					; DATA XREF: .text:off_10007498o
		lea	esi, [edi+14h]	; jumptable 1000745A case 1
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10007471:				; CODE XREF: sub_10007440+1Aj
					; DATA XREF: .text:off_10007498o
		lea	esi, [edi+0Ch]	; jumptable 1000745A case 4
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10007479:				; CODE XREF: sub_10007440+1Aj
					; DATA XREF: .text:off_10007498o
		lea	esi, [edi+24h]	; jumptable 1000745A case 3
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10007481:				; CODE XREF: sub_10007440+18j
					; sub_10007440+1Aj
					; DATA XREF: ...
		push	ecx		; jumptable 1000745A default case
		xor	esi, esi
		call	sub_10006CB0
		add	esp, 4
		test	eax, eax
		jz	short loc_10007492
		mov	esi, edi

loc_10007492:				; CODE XREF: sub_10007440+4Ej
		mov	eax, esi
		pop	esi
		pop	edi
		retn
sub_10007440	endp

; ---------------------------------------------------------------------------
		align 4
off_10007498	dd offset loc_10007461	; DATA XREF: sub_10007440+1Ar
		dd offset loc_10007469	; jump table for switch	statement
		dd offset loc_10007481
		dd offset loc_10007479
		dd offset loc_10007471
		align 10h
; Exported entry 100. NSS_CMSUtil_VerificationStatusToString

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSUtil_VerificationStatusToString
NSS_CMSUtil_VerificationStatusToString proc near ; DATA	XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 9		; switch 10 cases
		ja	short loc_100074FC ; jumptable 100074B9	default	case
		jmp	ds:off_10007504[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100074C0:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aUnverified	; jumptable 100074B9 case 0
		retn
; ---------------------------------------------------------------------------

loc_100074C6:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aGoodsignature ; jumptable 100074B9	case 1
		retn
; ---------------------------------------------------------------------------

loc_100074CC:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aBadsignature ; jumptable 100074B9 case 2
		retn
; ---------------------------------------------------------------------------

loc_100074D2:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aDigestmismatch ; jumptable	100074B9 case 3
		retn
; ---------------------------------------------------------------------------

loc_100074D8:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aSigningcertnot ; jumptable	100074B9 case 4
		retn
; ---------------------------------------------------------------------------

loc_100074DE:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aSigningcertn_0 ; jumptable	100074B9 case 5
		retn
; ---------------------------------------------------------------------------

loc_100074E4:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aSignaturealgor ; jumptable	100074B9 case 6
		retn
; ---------------------------------------------------------------------------

loc_100074EA:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aSignaturealg_0 ; jumptable	100074B9 case 7
		retn
; ---------------------------------------------------------------------------

loc_100074F0:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aMalformedsigna ; jumptable	100074B9 case 8
		retn
; ---------------------------------------------------------------------------

loc_100074F6:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+9j
					; DATA XREF: .text:off_10007504o
		mov	eax, offset aProcessingerro ; jumptable	100074B9 case 9
		retn
; ---------------------------------------------------------------------------

loc_100074FC:				; CODE XREF: NSS_CMSUtil_VerificationStatusToString+7j
		mov	eax, offset aUnknown ; jumptable 100074B9 default case
		retn
NSS_CMSUtil_VerificationStatusToString endp

; ---------------------------------------------------------------------------
		align 4
off_10007504	dd offset loc_100074C0	; DATA XREF: NSS_CMSUtil_VerificationStatusToString+9r
		dd offset loc_100074C6	; jump table for switch	statement
		dd offset loc_100074CC
		dd offset loc_100074D2
		dd offset loc_100074D8
		dd offset loc_100074DE
		dd offset loc_100074E4
		dd offset loc_100074EA
		dd offset loc_100074F0
		dd offset loc_100074F6
		align 10h
; Exported entry  20. NSS_CMSDEREncode

; =============== S U B	R O U T	I N E =======================================


		public NSS_CMSDEREncode
NSS_CMSDEREncode proc near		; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_0]
		push	edi
		xor	edi, edi
		test	edx, edx
		jz	loc_100075CB
		mov	ecx, [esp+4+arg_8]
		test	ecx, ecx
		jz	loc_100075CB
		mov	eax, [esp+4+arg_C]
		test	eax, eax
		jz	short loc_100075CB
		push	esi
		push	edi
		push	edi
		push	edi
		push	edi
		push	edi
		push	edi
		push	eax
		push	ecx
		push	edi
		push	edi
		push	edx
		call	NSS_CMSEncoder_Start
		mov	esi, eax
		add	esp, 2Ch
		test	esi, esi
		jnz	short loc_10007580
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10007580:				; CODE XREF: NSS_CMSDEREncode+3Bj
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jz	short loc_100075AC
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		push	esi
		call	NSS_CMSEncoder_Update
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_100075AC
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4

loc_100075AC:				; CODE XREF: NSS_CMSDEREncode+56j
					; NSS_CMSDEREncode+6Dj
		push	esi
		call	NSS_CMSEncoder_Finish
		add	esp, 4
		or	edi, eax
		jz	short loc_100075C6
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4

loc_100075C6:				; CODE XREF: NSS_CMSDEREncode+87j
		pop	esi
		mov	eax, edi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100075CB:				; CODE XREF: NSS_CMSDEREncode+9j
					; NSS_CMSDEREncode+15j	...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
NSS_CMSDEREncode endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100075E0	proc near		; CODE XREF: sub_100014B0+Cp
					; sub_10003A10+15Cp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		mov	[esp+10h+var_8], 0FFFFFFFFh
		test	ebp, ebp
		jnz	short loc_100075FB
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100075FB:				; CODE XREF: sub_100075E0+12j
		push	edi
		push	ebp
		call	sub_100010A0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_100076E9
		cmp	edi, 1
		jz	loc_100076E9
		push	esi
		push	400h
		call	PORT_NewArena_Util
		mov	esi, eax
		add	esp, 4
		mov	[esp+18h+var_C], esi
		test	esi, esi
		jnz	short loc_1000763A
		pop	esi
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000763A:				; CODE XREF: sub_100075E0+4Ej
		lea	eax, ds:4[edi*4]
		push	eax
		push	esi
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[esp+18h+var_4], eax
		test	eax, eax
		jz	loc_100076D3
		push	ebx
		xor	ebx, ebx
		test	edi, edi
		jle	short loc_10007694
		mov	esi, eax
		sub	ebp, eax

loc_10007662:				; CODE XREF: sub_100075E0+A6j
		mov	ecx, [esp+1Ch+arg_4]
		mov	edx, [esi+ebp]
		mov	eax, [esp+1Ch+var_C]
		push	ecx
		push	edx
		push	0
		push	eax
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		mov	[esi], eax
		test	eax, eax
		jz	short loc_100076CE
		inc	ebx
		add	esi, 4
		cmp	ebx, edi
		jl	short loc_10007662
		mov	ebp, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+var_C]
		mov	eax, [esp+1Ch+var_4]

loc_10007694:				; CODE XREF: sub_100075E0+7Cj
		mov	ecx, [esp+1Ch+arg_8]
		push	ecx
		push	ebp
		push	offset loc_100070D0
		push	eax
		mov	dword ptr [eax+edi*4], 0
		call	sub_100010C0
		add	esp, 10h
		pop	ebx
		push	0
		push	esi
		mov	[esp+20h+var_8], 0
		call	PORT_FreeArena_Util
		mov	eax, [esp+20h+var_8]
		add	esp, 8
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100076CE:				; CODE XREF: sub_100075E0+9Ej
		mov	esi, [esp+1Ch+var_C]
		pop	ebx

loc_100076D3:				; CODE XREF: sub_100075E0+71j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		mov	eax, [esp+20h+var_8]
		add	esp, 8
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100076E9:				; CODE XREF: sub_100075E0+29j
					; sub_100075E0+32j
		pop	edi
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
sub_100075E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007700	proc near		; CODE XREF: sub_100077F0+17Fp
		xor	eax, eax
		mov	ecx, offset dword_10019030

loc_10007707:				; CODE XREF: sub_10007700+15j
		cmp	[ecx], edx
		jz	short locret_1000771A
		add	ecx, 14h
		inc	eax
		cmp	ecx, offset dword_100190BC
		jl	short loc_10007707
		or	eax, 0FFFFFFFFh

locret_1000771A:			; CODE XREF: sub_10007700+9j
		retn
sub_10007700	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007720	proc near		; CODE XREF: sub_100077F0+175p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	edi
		push	ebp
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		mov	[esp+10h+var_4], eax
		xor	ebx, ebx
		mov	edi, offset off_10019038
		push	esi
		lea	ecx, [ecx+0]

loc_10007740:				; CODE XREF: sub_10007720+A6j
		mov	eax, [esp+14h+var_4]
		cmp	[edi-4], eax
		jnz	short loc_100077BC
		mov	edx, [edi]
		test	edx, edx
		jnz	short loc_1000776D
		mov	edx, [ebp+10h]
		test	edx, edx
		jz	short loc_100077CC
		mov	ecx, [ebp+14h]
		test	ecx, ecx
		jz	short loc_100077CC
		cmp	ecx, 2
		jnz	short loc_100077BC
		cmp	byte ptr [edx],	5
		jnz	short loc_100077BC
		cmp	byte ptr [edx+1], 0
		jmp	short loc_100077BA
; ---------------------------------------------------------------------------

loc_1000776D:				; CODE XREF: sub_10007720+2Dj
		mov	esi, [ebp+10h]
		test	esi, esi
		jz	short loc_100077BC
		mov	ecx, [ebp+14h]
		cmp	ecx, [edx+8]
		jnz	short loc_100077BC
		mov	edx, [edx+4]
		cmp	ecx, 4
		jb	short loc_10007798

loc_10007784:				; CODE XREF: sub_10007720+76j
		mov	eax, [esi]
		cmp	eax, [edx]
		jnz	short loc_100077BC
		sub	ecx, 4
		add	edx, 4
		add	esi, 4
		cmp	ecx, 4
		jnb	short loc_10007784

loc_10007798:				; CODE XREF: sub_10007720+62j
		test	ecx, ecx
		jz	short loc_100077CC
		mov	al, [edx]
		cmp	al, [esi]
		jnz	short loc_100077BC
		cmp	ecx, 1
		jbe	short loc_100077CC
		mov	al, [edx+1]
		cmp	al, [esi+1]
		jnz	short loc_100077BC
		cmp	ecx, 2
		jbe	short loc_100077CC
		mov	cl, [edx+2]
		cmp	cl, [esi+2]

loc_100077BA:				; CODE XREF: sub_10007720+4Bj
		jz	short loc_100077CC

loc_100077BC:				; CODE XREF: sub_10007720+27j
					; sub_10007720+40j ...
		add	edi, 14h
		inc	ebx
		cmp	edi, offset dword_100190C4
		jl	loc_10007740

loc_100077CC:				; CODE XREF: sub_10007720+34j
					; sub_10007720+3Bj ...
		pop	esi
		cmp	ebx, 7
		jnz	short loc_100077D9
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100077D9:				; CODE XREF: sub_10007720+B0j
		pop	edi
		lea	edx, [ebx+ebx*4]
		mov	eax, dword_10019030[edx*4]
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10007720	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100077F0	proc near		; CODE XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+5p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		push	ebx
		push	ebp
		mov	ebp, 10001h
		mov	[esp+34h+var_20], ebp
		xor	ecx, ecx
		mov	eax, offset dword_10019030

loc_10007805:				; CODE XREF: sub_100077F0+26j
		cmp	[eax], ebp
		jz	loc_10007996
		add	eax, 14h
		inc	ecx
		cmp	eax, offset dword_100190BC
		jl	short loc_10007805
		or	edx, 0FFFFFFFFh
		mov	[esp+34h+var_14], edx

loc_1000781F:				; CODE XREF: sub_100077F0+1ADj
		xor	ecx, ecx
		mov	eax, offset dword_10019030
		jmp	short loc_10007830
; ---------------------------------------------------------------------------
		align 10h

loc_10007830:				; CODE XREF: sub_100077F0+36j
					; sub_100077F0+55j
		cmp	dword ptr [eax], 1000Bh
		jz	loc_100079A2
		add	eax, 14h
		inc	ecx
		cmp	eax, offset dword_100190BC
		jl	short loc_10007830
		mov	[esp+34h+var_18], edx

loc_1000784B:				; CODE XREF: sub_100077F0+1B6j
		xor	ecx, ecx
		mov	eax, offset dword_10019030

loc_10007852:				; CODE XREF: sub_100077F0+77j
		cmp	dword ptr [eax], 1000Ch
		jz	loc_100079AB
		add	eax, 14h
		inc	ecx
		cmp	eax, offset dword_100190BC
		jl	short loc_10007852
		mov	[esp+34h+var_1C], edx

loc_1000786D:				; CODE XREF: sub_100077F0+1BFj
		push	400h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		mov	[esp+34h+var_10], ebx
		test	ebx, ebx
		jz	loc_10007AC1
		push	esi
		push	edi
		push	1Ch
		push	ebx
		call	PORT_ArenaZAlloc_Util
		push	1Ch
		push	ebx
		mov	edi, eax
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_10007AB4
		test	edi, edi
		jz	loc_10007AB4
		xor	ecx, ecx
		mov	eax, offset dword_10019030
		jmp	short loc_100078C0
; ---------------------------------------------------------------------------
		align 10h

loc_100078C0:				; CODE XREF: sub_100077F0+C8j
					; sub_100077F0+E5j
		cmp	dword ptr [eax], 1000Ah
		jz	loc_100079B4
		add	eax, 14h
		inc	ecx
		cmp	eax, offset dword_100190BC
		jl	short loc_100078C0
		mov	[esp+3Ch+var_28], 0FFFFFFFFh

loc_100078DF:				; CODE XREF: sub_100077F0+1C8j
		mov	ebp, [esp+3Ch+arg_0]
		xor	ebx, ebx
		mov	[esp+3Ch+var_24], ebx
		cmp	[ebp+0], ebx
		jz	loc_10007A77

loc_100078F2:				; CODE XREF: sub_100077F0+27Fj
		mov	eax, [ebp+0]
		push	eax
		mov	ebx, 7
		call	CERT_FindSMimeProfile
		add	esp, 4
		mov	[esp+3Ch+var_4], eax
		test	eax, eax
		jz	loc_100079BD
		cmp	dword ptr [eax+4], 0
		jz	loc_100079BD
		cmp	dword ptr [eax+8], 0
		jbe	loc_100079BD
		mov	edx, [esp+3Ch+var_10]
		push	eax
		push	offset dword_10013CC0
		lea	ecx, [esp+44h+var_2C]
		push	ecx
		push	edx
		mov	[esp+4Ch+var_2C], 0
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10007A48
		mov	ecx, [esp+3Ch+var_2C]
		test	ecx, ecx
		jz	loc_10007A48
		xor	ebp, ebp
		cmp	[ecx], ebp
		jz	loc_10007A48

loc_10007961:				; CODE XREF: sub_100077F0+19Fj
		mov	eax, [eax+ecx]
		push	eax
		call	sub_10007720
		add	esp, 4
		mov	edx, eax
		call	sub_10007700
		test	eax, eax
		js	short loc_1000797F
		inc	dword ptr [edi+eax*4]
		add	[esi+eax*4], ebx
		dec	ebx

loc_1000797F:				; CODE XREF: sub_100077F0+186j
		mov	ecx, [esp+3Ch+var_2C]
		inc	ebp
		lea	eax, ds:0[ebp*4]
		cmp	dword ptr [eax+ecx], 0
		jnz	short loc_10007961
		jmp	loc_10007A48
; ---------------------------------------------------------------------------

loc_10007996:				; CODE XREF: sub_100077F0+17j
		mov	[esp+34h+var_14], ecx
		or	edx, 0FFFFFFFFh
		jmp	loc_1000781F
; ---------------------------------------------------------------------------

loc_100079A2:				; CODE XREF: sub_100077F0+46j
		mov	[esp+34h+var_18], ecx
		jmp	loc_1000784B
; ---------------------------------------------------------------------------

loc_100079AB:				; CODE XREF: sub_100077F0+68j
		mov	[esp+34h+var_1C], ecx
		jmp	loc_1000786D
; ---------------------------------------------------------------------------

loc_100079B4:				; CODE XREF: sub_100077F0+D6j
		mov	[esp+3Ch+var_28], ecx
		jmp	loc_100078DF
; ---------------------------------------------------------------------------

loc_100079BD:				; CODE XREF: sub_100077F0+119j
					; sub_100077F0+123j ...
		mov	ecx, [ebp+0]
		push	ecx
		call	CERT_ExtractPublicKey
		mov	ebp, eax
		add	esp, 4
		xor	eax, eax
		test	ebp, ebp
		jz	short loc_100079F2
		push	ebp
		call	SECKEY_PublicKeyStrengthInBits
		push	ebp
		mov	[esp+44h+var_C], eax
		call	SECKEY_GetPublicKeyType
		push	ebp
		mov	[esp+48h+var_8], eax
		call	SECKEY_DestroyPublicKey
		mov	eax, [esp+48h+var_C]
		add	esp, 0Ch

loc_100079F2:				; CODE XREF: sub_100077F0+1DFj
		cmp	[esp+3Ch+var_8], 6
		jnz	short loc_10007A28
		mov	[esp+3Ch+var_20], 1000Ah
		cmp	eax, 100h
		jbe	short loc_10007A17
		mov	eax, [esp+3Ch+var_1C]
		inc	dword ptr [edi+eax*4]
		add	[esi+eax*4], ebx
		mov	ebx, 6

loc_10007A17:				; CODE XREF: sub_100077F0+216j
		mov	eax, [esp+3Ch+var_18]
		inc	dword ptr [edi+eax*4]
		add	[esi+eax*4], ebx
		mov	eax, [esp+3Ch+var_28]
		dec	ebx
		jmp	short loc_10007A42
; ---------------------------------------------------------------------------

loc_10007A28:				; CODE XREF: sub_100077F0+207j
		cmp	eax, 200h
		jbe	short loc_10007A3E
		mov	eax, [esp+3Ch+var_28]
		inc	dword ptr [edi+eax*4]
		add	[esi+eax*4], ebx
		mov	ebx, 6

loc_10007A3E:				; CODE XREF: sub_100077F0+23Dj
		mov	eax, [esp+3Ch+var_14]

loc_10007A42:				; CODE XREF: sub_100077F0+236j
		inc	dword ptr [edi+eax*4]
		add	[esi+eax*4], ebx

loc_10007A48:				; CODE XREF: sub_100077F0+155j
					; sub_100077F0+161j ...
		mov	eax, [esp+3Ch+var_4]
		test	eax, eax
		jz	short loc_10007A5B
		push	1
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_10007A5B:				; CODE XREF: sub_100077F0+25Ej
		mov	eax, [esp+3Ch+var_24]
		mov	edx, [esp+3Ch+arg_0]
		inc	eax
		cmp	dword ptr [edx+eax*4], 0
		lea	ebp, [edx+eax*4]
		mov	[esp+3Ch+var_24], eax
		jnz	loc_100078F2
		mov	ebx, eax

loc_10007A77:				; CODE XREF: sub_100077F0+FCj
		xor	edx, edx
		mov	eax, offset dword_10019040
		sub	edi, esi

loc_10007A80:				; CODE XREF: sub_100077F0+2BAj
		cmp	[edi+esi], ebx
		jnz	short loc_10007A9F
		cmp	dword ptr [eax-4], 0
		jz	short loc_10007A9F
		cmp	dword ptr [eax], 0
		jz	short loc_10007A9F
		mov	ecx, [esi]
		cmp	ecx, edx
		jl	short loc_10007A9F
		mov	edx, [eax-10h]
		mov	[esp+3Ch+var_20], edx
		mov	edx, ecx

loc_10007A9F:				; CODE XREF: sub_100077F0+293j
					; sub_100077F0+299j ...
		add	eax, 14h
		add	esi, 4
		cmp	eax, offset dword_100190CC
		jl	short loc_10007A80
		mov	ebp, [esp+3Ch+var_20]
		mov	ebx, [esp+3Ch+var_10]

loc_10007AB4:				; CODE XREF: sub_100077F0+B3j
					; sub_100077F0+BBj
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	edi
		pop	esi

loc_10007AC1:				; CODE XREF: sub_100077F0+92j
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
sub_100077F0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 105. NSS_SMIMEUtil_FindBulkAlgForRecipients

; =============== S U B	R O U T	I N E =======================================


		public NSS_SMIMEUtil_FindBulkAlgForRecipients
NSS_SMIMEUtil_FindBulkAlgForRecipients proc near ; DATA	XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	eax
		call	sub_100077F0
		add	esp, 4
		mov	edx, eax
		xor	eax, eax
		mov	ecx, offset dword_10019030

loc_10007AE6:				; CODE XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+24j
		cmp	[ecx], edx
		jz	short loc_10007AF9
		add	ecx, 14h
		inc	eax
		cmp	ecx, offset dword_100190BC
		jl	short loc_10007AE6
		or	eax, 0FFFFFFFFh

loc_10007AF9:				; CODE XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+18j
		mov	edx, [esp+arg_4]
		lea	eax, [eax+eax*4]
		add	eax, eax
		mov	ecx, dword_10019034[eax+eax]
		add	eax, eax
		mov	[edx], ecx
		mov	eax, dword_10019030[eax]
		add	eax, 0FFFEFFFFh	; switch 12 cases
		cmp	eax, 0Bh
		ja	short loc_10007B6C ; jumptable 10007B24	default	case
		movzx	eax, ds:byte_10007B90[eax]
		jmp	ds:off_10007B78[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10007B2B:				; CODE XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+54j
					; DATA XREF: .text:off_10007B78o
		mov	ecx, [esp+arg_8] ; jumptable 10007B24 case 65537
		mov	eax, 28h
		mov	[ecx], eax
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10007B39:				; CODE XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+54j
					; DATA XREF: .text:off_10007B78o
		mov	ecx, [esp+arg_8] ; jumptable 10007B24 case 65538
		mov	eax, 40h
		mov	[ecx], eax
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10007B47:				; CODE XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+54j
					; DATA XREF: .text:off_10007B78o
		mov	ecx, [esp+arg_8] ; jumptable 10007B24 cases 65539,65547
		mov	eax, 80h
		mov	[ecx], eax
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10007B55:				; CODE XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+54j
					; DATA XREF: .text:off_10007B78o
		mov	ecx, [esp+arg_8] ; jumptable 10007B24 case 65548
		mov	eax, 100h
		mov	[ecx], eax
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10007B63:				; CODE XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+54j
					; DATA XREF: .text:off_10007B78o
		mov	ecx, [esp+arg_8] ; jumptable 10007B24 cases 65545,65546
		xor	eax, eax
		mov	[ecx], eax
		retn
; ---------------------------------------------------------------------------

loc_10007B6C:				; CODE XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+4Bj
					; NSS_SMIMEUtil_FindBulkAlgForRecipients+54j
					; DATA XREF: ...
		mov	ecx, [esp+arg_8] ; jumptable 10007B24 default case
		or	eax, 0FFFFFFFFh
		mov	[ecx], eax
		xor	eax, eax
		retn
NSS_SMIMEUtil_FindBulkAlgForRecipients endp

; ---------------------------------------------------------------------------
off_10007B78	dd offset loc_10007B2B	; DATA XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+54r
		dd offset loc_10007B39	; jump table for switch	statement
		dd offset loc_10007B47
		dd offset loc_10007B63
		dd offset loc_10007B55
		dd offset loc_10007B6C
byte_10007B90	db	0,     1,     2,     5
					; DATA XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+4Dr
		db	5,     5,     5,     5 ; indirect table	for switch statement
		db	3,     3,     2,     4
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007BA0	proc near		; CODE XREF: NSS_CMSSignerInfo_AddSMIMECaps+2Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	20h
		call	PORT_ZAlloc_Util
		add	esp, 4
		mov	[esp+4+var_4], eax
		test	eax, eax
		jnz	short loc_10007BB7
		or	eax, 0FFFFFFFFh
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10007BB7:				; CODE XREF: sub_10007BA0+10j
		push	ebx
		push	esi
		push	edi
		xor	ebx, ebx
		mov	edi, offset dword_100190B0

loc_10007BC1:				; CODE XREF: sub_10007BA0+8Aj
		cmp	dword ptr [edi+4], 0
		jz	short loc_10007C21
		push	1Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10007C2C
		mov	eax, [esp+10h+var_4]
		mov	[eax+ebx*4], esi
		mov	ecx, [edi-4]
		push	ecx
		inc	ebx
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		test	eax, eax
		jz	short loc_10007C2C
		mov	edx, [eax+4]
		mov	[esi+4], edx
		mov	eax, [eax+8]
		mov	[esi+8], eax
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_10007C06
		mov	eax, [eax+4]
		jmp	short loc_10007C08
; ---------------------------------------------------------------------------

loc_10007C06:				; CODE XREF: sub_10007BA0+5Fj
		xor	eax, eax

loc_10007C08:				; CODE XREF: sub_10007BA0+64j
		mov	[esi+10h], eax
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_10007C16
		mov	eax, [eax+8]
		jmp	short loc_10007C18
; ---------------------------------------------------------------------------

loc_10007C16:				; CODE XREF: sub_10007BA0+6Fj
		xor	eax, eax

loc_10007C18:				; CODE XREF: sub_10007BA0+74j
		mov	[esi+14h], eax
		mov	ecx, [edi-8]
		mov	[esi+18h], ecx

loc_10007C21:				; CODE XREF: sub_10007BA0+25j
		sub	edi, 14h
		cmp	edi, offset off_10019038
		jge	short loc_10007BC1

loc_10007C2C:				; CODE XREF: sub_10007BA0+35j
					; sub_10007BA0+4Dj
		mov	edx, [esp+10h+var_4]
		mov	ecx, [esp+10h+arg_4]
		push	offset dword_10013CC0
		lea	eax, [esp+14h+var_4]
		push	eax
		mov	dword ptr [edx+ebx*4], 0
		mov	edx, [esp+18h+arg_0]
		push	ecx
		push	edx
		call	SEC_ASN1EncodeItem_Util
		mov	ecx, [esp+20h+var_4]
		xor	esi, esi
		add	esp, 10h
		mov	edi, eax
		cmp	[ecx], esi
		jz	short loc_10007C79
		mov	eax, ecx

loc_10007C61:				; CODE XREF: sub_10007BA0+D7j
		mov	eax, [eax]
		push	eax
		call	PORT_Free_Util
		mov	ecx, [esp+14h+var_4]
		inc	esi
		lea	eax, [ecx+esi*4]
		add	esp, 4
		cmp	dword ptr [eax], 0
		jnz	short loc_10007C61

loc_10007C79:				; CODE XREF: sub_10007BA0+BDj
		push	ecx
		call	PORT_Free_Util
		add	esp, 4
		neg	edi
		sbb	eax, eax
		pop	edi
		neg	eax
		pop	esi
		dec	eax
		pop	ebx
		pop	ecx
		retn
sub_10007BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007C90	proc near		; CODE XREF: NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs+5Fp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		push	ebx
		push	edi
		mov	edi, [esp+10h+arg_8]
		xor	ebx, ebx
		test	edi, edi
		jz	short loc_10007CF3
		push	esi
		push	400h
		call	PORT_NewArena_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10007CF2
		push	edi
		push	esi
		mov	[esp+1Ch+var_8], ebx
		call	CERT_GetCertIssuerAndSN
		add	esp, 8
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jz	short loc_10007CE7
		mov	ecx, [esp+14h+arg_4]
		mov	edx, [esp+14h+arg_0]
		push	offset dword_10013CD0
		lea	eax, [esp+18h+var_8]
		push	eax
		push	ecx
		push	edx
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		mov	ebx, eax

loc_10007CE7:				; CODE XREF: sub_10007C90+37j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		add	esp, 8

loc_10007CF2:				; CODE XREF: sub_10007C90+21j
		pop	esi

loc_10007CF3:				; CODE XREF: sub_10007C90+Dj
		neg	ebx
		sbb	eax, eax
		neg	eax
		pop	edi
		dec	eax
		pop	ebx
		add	esp, 8
		retn
sub_10007C90	endp

; Exported entry 104. NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs

; =============== S U B	R O U T	I N E =======================================


		public NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs
NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs proc near
					; CODE XREF: NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs+5Fp
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		xor	ebx, ebx
		test	esi, esi
		jz	short loc_10007D59
		push	edi
		push	400h
		call	PORT_NewArena_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_10007D58
		push	esi
		push	edi
		call	CERT_GetCertIssuerAndSN
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10007D4D
		push	ebx
		push	ebx
		call	NSS_Get_CERT_IssuerAndSNTemplate
		mov	ecx, [esp+14h+arg_0]
		push	eax
		mov	eax, [esp+18h+arg_4]
		push	esi
		push	eax
		push	ecx
		call	SEC_ASN1EncodeItem_Util
		add	esp, 18h
		mov	ebx, eax

loc_10007D4D:				; CODE XREF: NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs+2Ej
		push	0
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 8

loc_10007D58:				; CODE XREF: NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs+1Ej
		pop	edi

loc_10007D59:				; CODE XREF: NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs+Aj
		neg	ebx
		sbb	eax, eax
		neg	eax
		pop	esi
		dec	eax
		pop	ebx
		retn
NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007D70	proc near		; CODE XREF: NSS_SMIMESignerInfo_SaveSMIMEProfile+5Dp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		push	esi
		push	edi
		push	400h
		xor	edi, edi
		call	PORT_NewArena_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10007D90
		pop	edi
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10007D90:				; CODE XREF: sub_10007D70+18j
		mov	eax, [esp+10h+arg_4]
		push	eax
		push	offset dword_10013CD0
		lea	ecx, [esp+18h+var_8]
		push	ecx
		push	esi
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10007DC6
		cmp	[esp+10h+var_8], edi
		jnz	short loc_10007DC6
		mov	edx, [esp+10h+var_4]
		mov	eax, [esp+10h+arg_0]
		push	edx
		push	eax
		call	CERT_FindCertByIssuerAndSN
		add	esp, 8
		mov	edi, eax

loc_10007DC6:				; CODE XREF: sub_10007D70+3Aj
					; sub_10007D70+40j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 8
		retn
sub_10007D70	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. NSSSMIME_VersionCheck

; =============== S U B	R O U T	I N E =======================================


		public NSSSMIME_VersionCheck
NSSSMIME_VersionCheck proc near		; DATA XREF: .rdata:off_10016AC8o

var_1		= byte ptr -1

		push	ecx
		movsx	eax, ds:byte_10013D70
		movsx	ecx, ds:byte_10013D38
		add	eax, ecx
		mov	[esp+4+var_1], al
		add	esp, 4
		jmp	NSS_VersionCheck
NSSSMIME_VersionCheck endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. NSSSMIME_GetVersion

; =============== S U B	R O U T	I N E =======================================


		public NSSSMIME_GetVersion
NSSSMIME_GetVersion proc near		; DATA XREF: .rdata:off_10016AC8o
		mov	eax, offset a3_17_1BasicEcc ; "3.17.1 Basic ECC"
		retn
NSSSMIME_GetVersion endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007E10	proc near		; CODE XREF: sub_10009770+245p
					; sub_1000A850+F3p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0BFh
		jg	short loc_10007E40
		jz	short loc_10007E3A
		dec	eax
		jz	short loc_10007E34
		sub	eax, 2
		jz	short loc_10007E2E
		dec	eax
		jnz	short loc_10007E4F
		mov	eax, 221h
		retn
; ---------------------------------------------------------------------------

loc_10007E2E:				; CODE XREF: sub_10007E10+13j
		mov	eax, 211h
		retn
; ---------------------------------------------------------------------------

loc_10007E34:				; CODE XREF: sub_10007E10+Ej
		mov	eax, 201h
		retn
; ---------------------------------------------------------------------------

loc_10007E3A:				; CODE XREF: sub_10007E10+Bj
		mov	eax, 251h
		retn
; ---------------------------------------------------------------------------

loc_10007E40:				; CODE XREF: sub_10007E10+9j
		sub	eax, 0C0h
		jz	short loc_10007E5F
		dec	eax
		jz	short loc_10007E59
		sub	eax, 74h
		jz	short loc_10007E53

loc_10007E4F:				; CODE XREF: sub_10007E10+16j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10007E53:				; CODE XREF: sub_10007E10+3Dj
		mov	eax, 256h
		retn
; ---------------------------------------------------------------------------

loc_10007E59:				; CODE XREF: sub_10007E10+38j
		mov	eax, 271h
		retn
; ---------------------------------------------------------------------------

loc_10007E5F:				; CODE XREF: sub_10007E10+35j
		mov	eax, 261h
		retn
sub_10007E10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007E70	proc near		; DATA XREF: .rdata:off_10014090o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10007E7D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007E7D:				; CODE XREF: sub_10007E70+7j
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_10007E93
		lea	eax, [esi+8]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+4], eax

loc_10007E93:				; CODE XREF: sub_10007E70+12j
		mov	eax, [eax+0Ch]
		sub	eax, 6Eh
		jz	short loc_10007EC5
		dec	eax
		jz	short loc_10007EBE
		dec	eax
		jz	short loc_10007EB7
		pop	esi
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToAnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10007EB7:				; CODE XREF: sub_10007E70+2Fj
		mov	eax, offset dword_10014590
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007EBE:				; CODE XREF: sub_10007E70+2Cj
		mov	eax, offset dword_10014570
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007EC5:				; CODE XREF: sub_10007E70+29j
		mov	eax, offset dword_10014560
		pop	esi
		retn
sub_10007E70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007ED0	proc near		; DATA XREF: .rdata:off_10013DACo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10007EDD
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007EDD:				; CODE XREF: sub_10007ED0+7j
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_10007EF3
		lea	eax, [esi+8]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+4], eax

loc_10007EF3:				; CODE XREF: sub_10007ED0+12j
		mov	eax, [eax+0Ch]
		sub	eax, 6Eh
		jz	short loc_10007F25
		dec	eax
		jz	short loc_10007F1E
		dec	eax
		jz	short loc_10007F17
		pop	esi
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10007F17:				; CODE XREF: sub_10007ED0+2Fj
		mov	eax, offset dword_100143A0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007F1E:				; CODE XREF: sub_10007ED0+2Cj
		mov	eax, offset dword_10014290
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007F25:				; CODE XREF: sub_10007ED0+29j
		mov	eax, offset dword_10014138
		pop	esi
		retn
sub_10007ED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007F30	proc near		; DATA XREF: .rdata:off_10014094o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10007F3D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007F3D:				; CODE XREF: sub_10007F30+7j
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_10007F53
		lea	eax, [esi+8]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+4], eax

loc_10007F53:				; CODE XREF: sub_10007F30+12j
		mov	eax, [eax+0Ch]
		sub	eax, 71h
		jz	short loc_10007F7B
		dec	eax
		jz	short loc_10007F74
		pop	esi
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToAnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10007F74:				; CODE XREF: sub_10007F30+2Cj
		mov	eax, offset dword_100145C0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007F7B:				; CODE XREF: sub_10007F30+29j
		mov	eax, offset dword_100145A0
		pop	esi
		retn
sub_10007F30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007F90	proc near		; DATA XREF: .rdata:off_10014208o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10007F9D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007F9D:				; CODE XREF: sub_10007F90+7j
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_10007FB3
		lea	eax, [esi+8]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+4], eax

loc_10007FB3:				; CODE XREF: sub_10007F90+12j
		mov	eax, [eax+0Ch]
		sub	eax, 71h
		jz	short loc_10007FDB
		dec	eax
		jz	short loc_10007FD4
		pop	esi
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToAnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10007FD4:				; CODE XREF: sub_10007F90+2Cj
		mov	eax, offset dword_100145C0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007FDB:				; CODE XREF: sub_10007F90+29j
		mov	eax, offset dword_100145B0
		pop	esi
		retn
sub_10007F90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007FF0	proc near		; DATA XREF: .rdata:off_10013DA8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10007FFD
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007FFD:				; CODE XREF: sub_10007FF0+7j
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_10008013
		lea	eax, [esi+8]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+4], eax

loc_10008013:				; CODE XREF: sub_10007FF0+12j
		cmp	dword ptr [eax+0Ch], 6Dh
		pop	esi
		jz	short loc_1000802F
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToAnyTemplate_Util
; ---------------------------------------------------------------------------

loc_1000802F:				; CODE XREF: sub_10007FF0+28j
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SECKEY_PointerToEncryptedPrivateKeyInfoTemplate
sub_10007FF0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008050	proc near		; CODE XREF: sub_10009770+13Dp
		push	esi
		push	0Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10008072
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008072:				; CODE XREF: sub_10008050+Fj
		push	10h
		call	PORT_ZAlloc_Util
		add	esp, 4
		mov	[esi+4], eax
		mov	dword ptr [esi+8], 10h
		test	eax, eax
		jnz	short loc_100080A3
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	esi
		call	SECITEM_ZfreeItem_Util
		add	esp, 0Ch
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100080A3:				; CODE XREF: sub_10008050+38j
		push	10h
		push	eax
		call	PK11_GenerateRandom
		add	esp, 8
		mov	eax, esi
		pop	esi
		retn
sub_10008050	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100080C0	proc near		; CODE XREF: SEC_PKCS12AddCertOrChainAndKey+44p

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		xor	ebp, ebp
		test	ebx, ebx
		jnz	short loc_100080D1
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100080D1:				; CODE XREF: sub_100080C0+Aj
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_100080E9
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100080E9:				; CODE XREF: sub_100080C0+23j
		push	esi
		push	14h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10008133
		mov	eax, [ebx+8]
		mov	ecx, [ebx+4]
		push	eax
		push	ecx
		push	esi
		push	4
		call	PK11_HashBuf
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10008133
		push	14h
		push	esi
		push	4
		call	SGN_CreateDigestInfo_Util
		add	esp, 0Ch
		push	1
		push	edi
		mov	ebp, eax
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10008133:				; CODE XREF: sub_100080C0+39j
					; sub_100080C0+50j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		push	1
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
sub_100080C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008160	proc near		; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+AAp
					; sub_10008DF0+CFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		mov	ebp, [esp+4+arg_8]
		push	edi
		test	ebp, ebp
		jz	loc_10008276
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	loc_10008276
		mov	eax, [ebp+8]
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	esi
		lea	eax, [eax+eax*2+2]
		lea	esi, [edi+8]
		mov	[esi], eax
		push	eax
		test	ebx, ebx
		jz	short loc_1000819C
		push	ebx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		jmp	short loc_100081A4
; ---------------------------------------------------------------------------

loc_1000819C:				; CODE XREF: sub_10008160+2Fj
		call	PORT_ZAlloc_Util
		add	esp, 4

loc_100081A4:				; CODE XREF: sub_10008160+3Aj
		mov	[edi+4], eax
		test	eax, eax
		jz	short loc_10008201
		cmp	[esp+10h+arg_10], 0
		jnz	short loc_100081CE
		mov	ecx, [esi]
		mov	edx, [ebp+8]
		push	esi
		push	ecx
		mov	ecx, [esp+18h+arg_14]
		push	eax
		mov	eax, [ebp+4]
		push	edx
		push	eax
		push	ecx
		call	PORT_UCS2_UTF8Conversion_Util
		add	esp, 18h
		jmp	short loc_100081EA
; ---------------------------------------------------------------------------

loc_100081CE:				; CODE XREF: sub_10008160+50j
		mov	edx, [esi]
		mov	ecx, [ebp+4]
		push	1
		push	esi
		push	edx
		mov	edx, [esp+1Ch+arg_14]
		push	eax
		mov	eax, [ebp+8]
		push	eax
		push	ecx
		push	edx
		call	PORT_UCS2_ASCIIConversion_Util
		add	esp, 1Ch

loc_100081EA:				; CODE XREF: sub_10008160+6Cj
		test	eax, eax
		jnz	short loc_1000820E
		test	ebx, ebx
		jnz	short loc_10008207
		mov	eax, [edi+4]
		push	eax
		call	PORT_Free_Util
		add	esp, 4
		mov	[edi+4], ebx

loc_10008201:				; CODE XREF: sub_10008160+49j
		mov	dword ptr [esi], 0

loc_10008207:				; CODE XREF: sub_10008160+90j
					; sub_10008160+F6j
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000820E:				; CODE XREF: sub_10008160+8Cj
		mov	ecx, [esi]
		mov	eax, [edi+4]
		cmp	byte ptr [eax+ecx-1], 0
		jnz	short loc_10008221
		cmp	byte ptr [eax+ecx-2], 0
		jz	short loc_1000826C

loc_10008221:				; CODE XREF: sub_10008160+B8j
		cmp	[esp+10h+arg_C], 0
		jz	short loc_1000826C
		mov	ebp, [ebp+8]
		lea	edx, [ecx+2]
		lea	ebp, [ebp+ebp*2+0]
		cmp	edx, ebp
		jbe	short loc_10008258
		push	edx
		test	ebx, ebx
		jz	short loc_10008248
		push	ecx
		push	eax
		push	ebx
		call	PORT_ArenaGrow_Util
		add	esp, 10h
		jmp	short loc_10008251
; ---------------------------------------------------------------------------

loc_10008248:				; CODE XREF: sub_10008160+D9j
		push	eax
		call	PORT_Realloc_Util
		add	esp, 8

loc_10008251:				; CODE XREF: sub_10008160+E6j
		mov	[edi+4], eax
		test	eax, eax
		jz	short loc_10008207

loc_10008258:				; CODE XREF: sub_10008160+D4j
		add	dword ptr [esi], 2
		mov	ecx, [esi]
		mov	byte ptr [ecx+eax-2], 0
		mov	ecx, [esi]
		mov	edx, [edi+4]
		mov	byte ptr [ecx+edx-1], 0

loc_1000826C:				; CODE XREF: sub_10008160+BFj
					; sub_10008160+C6j
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, 1
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10008276:				; CODE XREF: sub_10008160+8j
					; sub_10008160+14j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
sub_10008160	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 123. SEC_PKCS12DecryptionAllowed

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecryptionAllowed
SEC_PKCS12DecryptionAllowed proc near	; CODE XREF: sub_1000A1C0+5p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	esi
		call	SEC_PKCS5GetCryptoAlgorithm
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_100082E1
		push	esi
		call	SEC_PKCS5GetKeyLength
		mov	esi, dword_100190C0
		add	eax, eax
		add	eax, eax
		add	esp, 4
		add	eax, eax
		xor	edx, edx
		test	esi, esi
		jz	short loc_100082E1
		xor	ecx, ecx

loc_100082C2:				; CODE XREF: SEC_PKCS12DecryptionAllowed+4Fj
		cmp	esi, edi
		jnz	short loc_100082CE
		cmp	dword_100190C4[ecx], eax
		jz	short loc_100082E6

loc_100082CE:				; CODE XREF: SEC_PKCS12DecryptionAllowed+34j
		inc	edx
		lea	ecx, [edx+edx*4]
		add	ecx, ecx
		mov	esi, dword_100190C0[ecx+ecx]
		add	ecx, ecx
		test	esi, esi
		jnz	short loc_100082C2

loc_100082E1:				; CODE XREF: SEC_PKCS12DecryptionAllowed+13j
					; SEC_PKCS12DecryptionAllowed+2Ej
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100082E6:				; CODE XREF: SEC_PKCS12DecryptionAllowed+3Cj
		lea	eax, [edx+edx*4]
		mov	eax, dword_100190CC[eax*4]
		pop	edi
		pop	esi
		retn
SEC_PKCS12DecryptionAllowed endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 127. SEC_PKCS12IsEncryptionAllowed

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12IsEncryptionAllowed
SEC_PKCS12IsEncryptionAllowed proc near	; DATA XREF: .rdata:off_10016AC8o
		xor	edx, edx
		cmp	dword_100190C0,	edx
		jz	short loc_1000832B
		xor	ecx, ecx
		mov	eax, 1

loc_10008311:				; CODE XREF: SEC_PKCS12IsEncryptionAllowed+29j
		cmp	dword_100190CC[ecx], eax
		jz	short locret_1000832D
		add	edx, eax
		lea	ecx, [edx+edx*4]
		add	ecx, ecx
		add	ecx, ecx
		cmp	dword_100190C0[ecx], 0
		jnz	short loc_10008311

loc_1000832B:				; CODE XREF: SEC_PKCS12IsEncryptionAllowed+8j
		xor	eax, eax

locret_1000832D:			; CODE XREF: SEC_PKCS12IsEncryptionAllowed+17j
		retn
SEC_PKCS12IsEncryptionAllowed endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 125. SEC_PKCS12EnableCipher

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12EnableCipher
SEC_PKCS12EnableCipher proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		xor	eax, eax
		cmp	dword_100190C8,	eax
		jz	short loc_1000835C
		mov	edx, [esp+arg_0]
		mov	ecx, offset dword_100190C8

loc_10008343:				; CODE XREF: SEC_PKCS12EnableCipher+2Aj
		cmp	[ecx], edx
		jz	short loc_10008360
		inc	eax
		lea	ecx, [eax+eax*4]
		cmp	dword_100190C8[ecx*4], 0
		lea	ecx, dword_100190C8[ecx*4]
		jnz	short loc_10008343

loc_1000835C:				; CODE XREF: SEC_PKCS12EnableCipher+8j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10008360:				; CODE XREF: SEC_PKCS12EnableCipher+15j
		cmp	[esp+arg_4], 0
		jz	short loc_10008378
		lea	eax, [eax+eax*4]
		mov	dword_100190CC[eax*4], 1
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10008378:				; CODE XREF: SEC_PKCS12EnableCipher+35j
		lea	ecx, [eax+eax*4]
		mov	dword_100190CC[ecx*4], 0
		xor	eax, eax
		retn
SEC_PKCS12EnableCipher endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 128. SEC_PKCS12SetPreferredCipher

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12SetPreferredCipher
SEC_PKCS12SetPreferredCipher proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	ebx
		push	edi
		xor	ecx, ecx
		xor	edi, edi
		xor	ebx, ebx
		cmp	dword_100190C8,	ecx
		jz	short loc_100083F9
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	esi
		mov	edx, offset dword_100190C8
		xor	eax, eax
		mov	esi, 1

loc_100083B2:				; CODE XREF: SEC_PKCS12SetPreferredCipher+58j
		cmp	dword_100190D0[eax], esi
		jnz	short loc_100083C6
		mov	dword_100190D0[eax], 0
		mov	edi, esi

loc_100083C6:				; CODE XREF: SEC_PKCS12SetPreferredCipher+28j
		cmp	[edx], ebp
		jnz	short loc_100083D2
		mov	dword_100190D0[eax], esi
		mov	ebx, esi

loc_100083D2:				; CODE XREF: SEC_PKCS12SetPreferredCipher+38j
		add	ecx, esi
		lea	eax, [ecx+ecx*4]
		add	eax, eax
		add	eax, eax
		cmp	dword_100190C8[eax], 0
		lea	edx, dword_100190C8[eax]
		jnz	short loc_100083B2
		pop	esi
		pop	ebp
		test	ebx, ebx
		jz	short loc_100083F9
		test	edi, edi
		jz	short loc_100083F9
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100083F9:				; CODE XREF: SEC_PKCS12SetPreferredCipher+Ej
					; SEC_PKCS12SetPreferredCipher+5Ej ...
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
SEC_PKCS12SetPreferredCipher endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008400	proc near		; DATA XREF: .rdata:off_100145F0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10008409
		retn
; ---------------------------------------------------------------------------

loc_10008409:				; CODE XREF: sub_10008400+6j
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_10008423
		mov	[esp+arg_4], eax
		mov	[esp+arg_0], eax
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10008423:				; CODE XREF: sub_10008400+14j
		mov	eax, [eax+0Ch]
		add	eax, 0FFFFFF5Eh	; switch 6 cases
		cmp	eax, 5
		ja	short loc_10008495 ; jumptable 10008430	default	case
		jmp	ds:off_100084AC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10008437:				; CODE XREF: sub_10008400+30j
					; DATA XREF: .text:off_100084ACo
		mov	[esp+arg_4], 0	; jumptable 10008430 case 162
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SECKEY_PointerToPrivateKeyInfoTemplate
; ---------------------------------------------------------------------------

loc_1000844C:				; CODE XREF: sub_10008400+30j
					; DATA XREF: .text:off_100084ACo
		mov	eax, offset dword_10014638 ; jumptable 10008430	case 164
		retn
; ---------------------------------------------------------------------------

loc_10008452:				; CODE XREF: sub_10008400+30j
					; DATA XREF: .text:off_100084ACo
		mov	eax, offset dword_10014688 ; jumptable 10008430	case 165
		retn
; ---------------------------------------------------------------------------

loc_10008458:				; CODE XREF: sub_10008400+30j
					; DATA XREF: .text:off_100084ACo
		mov	eax, offset dword_100146D8 ; jumptable 10008430	case 166
		retn
; ---------------------------------------------------------------------------

loc_1000845E:				; CODE XREF: sub_10008400+30j
					; DATA XREF: .text:off_100084ACo
		mov	[esp+arg_4], 0	; jumptable 10008430 case 163
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SECKEY_PointerToEncryptedPrivateKeyInfoTemplate
; ---------------------------------------------------------------------------

loc_10008473:				; CODE XREF: sub_10008400+30j
					; DATA XREF: .text:off_100084ACo
		cmp	[esp+arg_4], 0	; jumptable 10008430 case 167
		jz	short loc_10008480
		mov	eax, offset dword_10014788
		retn
; ---------------------------------------------------------------------------

loc_10008480:				; CODE XREF: sub_10008400+78j
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToAnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10008495:				; CODE XREF: sub_10008400+2Ej
		mov	[esp+arg_4], 0	; jumptable 10008430 default case
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_AnyTemplate_Util
sub_10008400	endp

; ---------------------------------------------------------------------------
		align 4
off_100084AC	dd offset loc_10008437	; DATA XREF: sub_10008400+30r
		dd offset loc_1000845E	; jump table for switch	statement
		dd offset loc_1000844C
		dd offset loc_10008452
		dd offset loc_10008458
		dd offset loc_10008473
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100084D0	proc near		; DATA XREF: .rdata:off_100145E8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_100084D9
		retn
; ---------------------------------------------------------------------------

loc_100084D9:				; CODE XREF: sub_100084D0+6j
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_100084F3
		mov	[esp+arg_4], eax
		mov	[esp+arg_0], eax
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_100084F3:				; CODE XREF: sub_100084D0+14j
		cmp	dword ptr [eax+0Ch], 0AAh
		jz	short loc_10008511
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10008511:				; CODE XREF: sub_100084D0+2Aj
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_OctetStringTemplate_Util
sub_100084D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008530	proc near		; DATA XREF: .rdata:off_100145ECo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10008539
		retn
; ---------------------------------------------------------------------------

loc_10008539:				; CODE XREF: sub_10008530+6j
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_10008553
		mov	[esp+arg_4], eax
		mov	[esp+arg_0], eax
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10008553:				; CODE XREF: sub_10008530+14j
		mov	eax, [eax+0Ch]
		sub	eax, 0A8h
		jz	short loc_1000858A
		dec	eax
		jz	short loc_10008575
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10008575:				; CODE XREF: sub_10008530+2Ej
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_IA5StringTemplate_Util
; ---------------------------------------------------------------------------

loc_1000858A:				; CODE XREF: sub_10008530+2Bj
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_OctetStringTemplate_Util
sub_10008530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100085A0	proc near		; DATA XREF: .rdata:off_100145F4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_100085A9
		retn
; ---------------------------------------------------------------------------

loc_100085A9:				; CODE XREF: sub_100085A0+6j
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_100085C3
		mov	[esp+arg_4], eax
		mov	[esp+arg_0], eax
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_100085C3:				; CODE XREF: sub_100085A0+14j
		mov	eax, [eax+0Ch]
		sub	eax, 51h
		jz	short loc_10008612
		sub	eax, 5Ah
		jz	short loc_100085FD
		dec	eax
		jz	short loc_100085E8
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_100085E8:				; CODE XREF: sub_100085A0+31j
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_OctetStringTemplate_Util
; ---------------------------------------------------------------------------

loc_100085FD:				; CODE XREF: sub_100085A0+2Ej
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_BMPStringTemplate_Util
; ---------------------------------------------------------------------------

loc_10008612:				; CODE XREF: sub_100085A0+29j
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_BitStringTemplate_Util
sub_100085A0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 110. SEC_PKCS12CreateExportContext

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12CreateExportContext
SEC_PKCS12CreateExportContext proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	1000h
		call	PORT_NewArena_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10008655
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10008655:				; CODE XREF: SEC_PKCS12CreateExportContext+12j
		push	esi
		push	50h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10008681
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10008681:				; CODE XREF: SEC_PKCS12CreateExportContext+35j
		mov	eax, [esp+8+arg_0]
		mov	ecx, [esp+8+arg_4]
		mov	edx, [esp+8+arg_C]
		mov	[esi+24h], eax
		mov	eax, [esp+8+arg_8]
		mov	[esi+28h], ecx
		mov	dword ptr [esi+0Ch], 0
		mov	[esi], edi
		mov	[esi+8], edx
		test	eax, eax
		jz	short loc_100086B8
		push	eax
		call	PK11_ReferenceSlot
		add	esp, 4
		mov	[esi+4], eax
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100086B8:				; CODE XREF: SEC_PKCS12CreateExportContext+75j
		call	PK11_GetInternalSlot
		mov	[esi+4], eax
		mov	eax, esi
		pop	esi
		pop	edi
		retn
SEC_PKCS12CreateExportContext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 109. SEC_PKCS12AddPasswordIntegrity

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12AddPasswordIntegrity
SEC_PKCS12AddPasswordIntegrity proc near ; DATA	XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10008707
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_10008707
		mov	eax, [esi]
		push	0Ch
		push	eax
		mov	dword ptr [esi+10h], 1
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[esi+14h], eax
		test	eax, eax
		jnz	short loc_1000870C

loc_100086FA:				; CODE XREF: SEC_PKCS12AddPasswordIntegrity+4Fj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_10008707:				; CODE XREF: SEC_PKCS12AddPasswordIntegrity+7j
					; SEC_PKCS12AddPasswordIntegrity+Dj
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000870C:				; CODE XREF: SEC_PKCS12AddPasswordIntegrity+28j
		mov	ecx, [esp+4+arg_4]
		mov	edx, [esi]
		push	ecx
		push	eax
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100086FA
		mov	eax, [esp+4+arg_8]
		mov	[esi+18h], eax
		mov	dword ptr [esi+0Ch], 1
		xor	eax, eax
		pop	esi
		retn
SEC_PKCS12AddPasswordIntegrity endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008740	proc near		; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+13Ep
					; SEC_PKCS12CreateUnencryptedSafe+6Bp

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		test	esi, esi
		jz	loc_1000884F
		test	ebp, ebp
		jz	loc_1000884F
		mov	eax, [esi]
		push	ebx
		push	edi
		push	eax
		call	PORT_ArenaMark_Util
		mov	ebx, eax
		mov	eax, [esi+30h]
		add	esp, 4
		test	eax, eax
		jnz	short loc_10008789
		mov	ecx, [esi]
		push	8
		push	ecx
		call	PORT_ArenaZAlloc_Util
		mov	edx, [esi]
		push	8
		push	edx
		mov	[esi+2Ch], eax
		mov	edi, eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 10h
		jmp	short loc_100087CC
; ---------------------------------------------------------------------------

loc_10008789:				; CODE XREF: sub_10008740+29j
		lea	ecx, ds:8[eax*4]
		push	ecx
		mov	ecx, [esi]
		lea	edx, ds:4[eax*4]
		mov	eax, [esi+2Ch]
		push	edx
		push	eax
		push	ecx
		call	PORT_ArenaGrow_Util
		mov	ecx, [esi+38h]
		mov	edi, eax
		mov	eax, [esi+3Ch]
		lea	edx, ds:8[eax*4]
		push	edx
		mov	edx, [esi]
		lea	eax, ds:4[eax*4]
		push	eax
		push	ecx
		push	edx
		mov	[esi+2Ch], edi
		call	PORT_ArenaGrow_Util
		add	esp, 20h

loc_100087CC:				; CODE XREF: sub_10008740+47j
		mov	[esi+38h], eax
		test	edi, edi
		jz	short loc_1000882F
		test	eax, eax
		jz	short loc_1000882F
		mov	eax, [esi+30h]
		mov	ecx, [esi+2Ch]
		mov	[ecx+eax*4], ebp
		inc	dword ptr [esi+30h]
		mov	eax, [esi+30h]
		mov	edx, [esi+2Ch]
		mov	dword ptr [edx+eax*4], 0
		mov	eax, [esi]
		push	0Ch
		push	eax
		call	PORT_ArenaZAlloc_Util
		mov	ecx, [esi+3Ch]
		mov	edx, [esi+38h]
		mov	[edx+ecx*4], eax
		mov	eax, [esi+3Ch]
		mov	ecx, [esi+38h]
		add	esp, 8
		cmp	dword ptr [ecx+eax*4], 0
		jz	short loc_1000882F
		inc	eax
		mov	[esi+3Ch], eax
		mov	dword ptr [ecx+eax*4], 0
		mov	eax, [esi]
		push	ebx
		push	eax
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000882F:				; CODE XREF: sub_10008740+91j
					; sub_10008740+95j ...
		push	0FFFFE013h
		call	PORT_SetError_Util
		mov	ecx, [esi]
		add	esp, 4
		push	ebx
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000884F:				; CODE XREF: sub_10008740+7j
					; sub_10008740+Fj
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
sub_10008740	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 111. SEC_PKCS12CreatePasswordPrivSafe

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12CreatePasswordPrivSafe
SEC_PKCS12CreatePasswordPrivSafe proc near ; DATA XREF:	.rdata:off_10016AC8o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebp
		xor	ebp, ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		mov	[esp+14h+var_C], ebp
		mov	[esp+14h+var_8], ebp
		mov	[esp+14h+var_4], ebp
		cmp	esi, ebp
		jnz	short loc_10008883
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10008883:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+19j
		mov	eax, [esi]
		push	ebx
		push	edi
		push	eax
		call	PORT_ArenaMark_Util
		mov	ecx, [esi]
		mov	ebx, eax
		push	24h
		push	ecx
		mov	[esp+28h+arg_0], ebx
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, ebp
		jnz	short loc_100088C6
		push	0FFFFE013h
		call	PORT_SetError_Util
		mov	edx, [esi]
		push	ebx
		push	edx
		call	PORT_ArenaRelease_Util
		add	esp, 0Ch
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100088C6:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+44j
		mov	edx, [esp+1Ch+arg_8]
		mov	[edi+18h], ebp
		mov	eax, [esi+28h]
		mov	ecx, [esi+24h]
		push	eax
		push	ecx
		push	ebp
		push	edx
		call	SEC_PKCS7CreateEncryptedData
		add	esp, 10h
		mov	[edi+1Ch], eax
		cmp	eax, ebp
		jnz	short loc_100088F5
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	loc_100089B4
; ---------------------------------------------------------------------------

loc_100088F5:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+84j
		mov	ecx, [esp+1Ch+arg_4]
		mov	eax, [esi]
		push	1
		push	1
		push	1
		push	ecx
		lea	edx, [esp+2Ch+var_C]
		push	edx
		push	ebp
		mov	[edi], eax
		call	sub_10008160
		add	esp, 18h
		test	eax, eax
		jnz	short loc_10008925
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	loc_100089B4
; ---------------------------------------------------------------------------

loc_10008925:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+B4j
		mov	edx, [esi]
		lea	eax, [esp+1Ch+var_C]
		push	eax
		lea	ecx, [edi+4]
		push	ecx
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008949
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_100089B4
; ---------------------------------------------------------------------------

loc_10008949:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+DBj
		mov	eax, [esi+4]
		push	eax
		call	PK11_ReferenceSlot
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jnz	short loc_10008972
		call	PK11_GetInternalKeySlot
		mov	ebx, eax
		cmp	ebx, ebp
		jnz	short loc_10008972
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_100089B4
; ---------------------------------------------------------------------------

loc_10008972:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+F9j
					; SEC_PKCS12CreatePasswordPrivSafe+104j
		mov	ecx, [edi+1Ch]
		push	ecx
		call	SEC_PKCS7GetEncryptionAlgorithm
		mov	edx, [esi+8]
		push	edx
		push	ebp
		lea	ecx, [esp+28h+var_C]
		push	ecx
		push	eax
		push	ebx
		call	PK11_PBEKeyGen
		add	esp, 18h
		mov	[edi+14h], eax
		cmp	eax, ebp
		jz	short loc_100089AA
		mov	edx, [esi]
		push	edi
		mov	[edi], edx
		mov	[edi+20h], ebp
		call	sub_10008740
		add	esp, 4
		test	eax, eax
		jz	short loc_100089F5

loc_100089AA:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+134j
		cmp	ebx, ebp
		jz	short loc_100089B7
		push	ebx
		call	PK11_FreeSlot

loc_100089B4:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+90j
					; SEC_PKCS12CreatePasswordPrivSafe+C0j	...
		add	esp, 4

loc_100089B7:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+14Cj
		mov	edi, [edi+1Ch]
		cmp	edi, ebp
		jz	short loc_100089C7
		push	edi
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4

loc_100089C7:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+15Cj
		cmp	[esp+1Ch+var_8], ebp
		jz	short loc_100089DB
		lea	eax, [esp+1Ch+var_C]
		push	ebp
		push	eax
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_100089DB:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+16Bj
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [esi]
		push	ecx
		push	edx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100089F5:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+148j
		cmp	[esp+1Ch+var_8], ebp
		jz	short loc_10008A09
		lea	eax, [esp+1Ch+var_C]
		push	ebp
		push	eax
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_10008A09:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+199j
		mov	ecx, [esp+1Ch+arg_0]
		mov	edx, [esi]
		push	ecx
		push	edx
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		cmp	ebx, ebp
		jz	short loc_10008A26
		push	ebx
		call	PK11_FreeSlot
		add	esp, 4

loc_10008A26:				; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+1BBj
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
SEC_PKCS12CreatePasswordPrivSafe endp

; Exported entry 112. SEC_PKCS12CreateUnencryptedSafe

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12CreateUnencryptedSafe
SEC_PKCS12CreateUnencryptedSafe	proc near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10008A3D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008A3D:				; CODE XREF: SEC_PKCS12CreateUnencryptedSafe+7j
		mov	eax, [esi]
		push	ebx
		push	edi
		push	eax
		call	PORT_ArenaMark_Util
		mov	ecx, [esi]
		push	24h
		push	ecx
		mov	ebx, eax
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10008A78
		mov	edx, [esi]
		push	ebx
		push	edx
		call	PORT_ArenaRelease_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 0Ch
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008A78:				; CODE XREF: SEC_PKCS12CreateUnencryptedSafe+2Aj
		mov	dword ptr [edi+18h], 0
		call	SEC_PKCS7CreateData
		mov	[edi+1Ch], eax
		test	eax, eax
		jnz	short loc_10008A9A
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10008AA7
; ---------------------------------------------------------------------------

loc_10008A9A:				; CODE XREF: SEC_PKCS12CreateUnencryptedSafe+59j
		push	edi
		call	sub_10008740
		add	esp, 4
		test	eax, eax
		jz	short loc_10008AC9

loc_10008AA7:				; CODE XREF: SEC_PKCS12CreateUnencryptedSafe+68j
		mov	edi, [edi+1Ch]
		test	edi, edi
		jz	short loc_10008AB7
		push	edi
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4

loc_10008AB7:				; CODE XREF: SEC_PKCS12CreateUnencryptedSafe+7Cj
		mov	eax, [esi]
		push	ebx
		push	eax
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008AC9:				; CODE XREF: SEC_PKCS12CreateUnencryptedSafe+75j
		mov	ecx, [esi]
		push	ebx
		push	ecx
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	esi
		retn
SEC_PKCS12CreateUnencryptedSafe	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008AE0	proc near		; CODE XREF: sub_10008C00+24p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10008B05
		push	10h
		push	esi
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		test	eax, eax
		jnz	short loc_10008B09
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_10008B05:				; CODE XREF: sub_10008AE0+7j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008B09:				; CODE XREF: sub_10008AE0+16j
		mov	[eax+8], esi
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+0Ch], 0
		pop	esi
		retn
sub_10008AE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008B20	proc near		; CODE XREF: sub_10008C00+3Bp
					; sub_10008FF0+260p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		test	edi, edi
		jz	loc_10008BEB
		mov	ebp, [esp+0Ch+arg_8]
		test	ebp, ebp
		jz	loc_10008BEB
		mov	esi, [esp+0Ch+arg_4]
		test	esi, esi
		jz	loc_10008BEB
		push	ebx
		push	edi
		call	PORT_ArenaMark_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_10008B6C
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10008B6C:				; CODE XREF: sub_10008B20+35j
		mov	ecx, [esi]
		test	ecx, ecx
		jnz	short loc_10008B86
		push	8
		push	edi
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	dword ptr [esi+0Ch], 0
		jmp	short loc_10008BA3
; ---------------------------------------------------------------------------

loc_10008B86:				; CODE XREF: sub_10008B20+50j
		mov	eax, [esi+0Ch]
		lea	edx, ds:8[eax*4]
		push	edx
		lea	eax, ds:4[eax*4]
		push	eax
		push	ecx
		push	edi
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_10008BA3:				; CODE XREF: sub_10008B20+64j
		push	ebx
		mov	[esi], eax
		push	edi
		test	eax, eax
		jnz	short loc_10008BC5
		call	PORT_ArenaRelease_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 0Ch
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10008BC5:				; CODE XREF: sub_10008B20+89j
		mov	ecx, [esi+0Ch]
		mov	edx, [esi]
		mov	[edx+ecx*4], ebp
		inc	dword ptr [esi+0Ch]
		mov	eax, [esi+0Ch]
		mov	ecx, [esi]
		mov	dword ptr [ecx+eax*4], 0
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10008BEB:				; CODE XREF: sub_10008B20+9j
					; sub_10008B20+15j ...
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
sub_10008B20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008C00	proc near		; CODE XREF: sub_10008FF0+26Dp
					; sub_100092B0+28Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		test	edi, edi
		jz	short loc_10008C4E
		mov	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	short loc_10008C4E
		mov	esi, [esp+0Ch+arg_4]
		test	esi, esi
		jz	short loc_10008C4E
		cmp	dword ptr [esi+20h], 0
		jnz	short loc_10008C33
		mov	eax, [edi]
		push	eax
		call	sub_10008AE0
		add	esp, 4
		mov	[esi+20h], eax
		test	eax, eax
		jz	short loc_10008C4E

loc_10008C33:				; CODE XREF: sub_10008C00+1Fj
		mov	eax, [esi+20h]
		mov	ecx, [edi]
		push	ebx
		push	eax
		push	ecx
		call	sub_10008B20
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008C51
		inc	dword ptr [esi+18h]
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10008C4E:				; CODE XREF: sub_10008C00+9j
					; sub_10008C00+11j ...
		or	eax, 0FFFFFFFFh

loc_10008C51:				; CODE XREF: sub_10008C00+45j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10008C00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008C60	proc near		; CODE XREF: sub_10008FF0+20Ap
					; sub_100092B0+20Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_10008C6D
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10008C6D:				; CODE XREF: sub_10008C60+7j
		mov	eax, [edi]
		push	ebx
		push	eax
		call	PORT_ArenaMark_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_10008C91
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10008C91:				; CODE XREF: sub_10008C60+1Dj
		mov	ecx, [edi]
		push	esi
		push	50h
		push	ecx
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10008CC1
		mov	edx, [edi]
		push	ebx
		push	edx
		call	PORT_ArenaRelease_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 0Ch
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10008CC1:				; CODE XREF: sub_10008C60+43j
		mov	ecx, [esp+0Ch+arg_4]
		lea	eax, [ecx-0A2h]	; switch 6 cases
		cmp	eax, 5
		ja	short loc_10008D12 ; jumptable 10008CD0	default	case
		jmp	ds:off_10008D3C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10008CD7:				; CODE XREF: sub_10008C60+70j
					; DATA XREF: .text:off_10008D3Co
		mov	eax, [esp+0Ch+arg_8] ; jumptable 10008CD0 cases	162,163,165
		mov	[esi+0Ch], eax
		jmp	short loc_10008CE7
; ---------------------------------------------------------------------------

loc_10008CE0:				; CODE XREF: sub_10008C60+70j
					; DATA XREF: .text:off_10008D3Co
		mov	edx, [esp+0Ch+arg_8] ; jumptable 10008CD0 cases	164,166,167
		mov	[esi+0Ch], edx

loc_10008CE7:				; CODE XREF: sub_10008C60+7Ej
		push	ecx
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		test	eax, eax
		jz	short loc_10008D12 ; jumptable 10008CD0	default	case
		push	eax
		mov	eax, [edi]
		push	esi
		push	eax
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008D24
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_10008D12:				; CODE XREF: sub_10008C60+6Ej
					; sub_10008C60+92j
		mov	eax, [edi]	; jumptable 10008CD0 default case
		push	ebx
		push	eax
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10008D24:				; CODE XREF: sub_10008C60+A3j
		mov	ecx, [edi]
		mov	[esi+18h], ecx
		mov	edx, [edi]
		push	ebx
		push	edx
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		retn
sub_10008C60	endp

; ---------------------------------------------------------------------------
		align 4
off_10008D3C	dd offset loc_10008CD7	; DATA XREF: sub_10008C60+70r
		dd offset loc_10008CD7	; jump table for switch	statement
		dd offset loc_10008CE0
		dd offset loc_10008CD7
		dd offset loc_10008CE0
		dd offset loc_10008CE0
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008D60	proc near		; CODE XREF: sub_10008FF0+43p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10008D6D
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008D6D:				; CODE XREF: sub_10008D60+7j
		push	ebx
		push	edi
		push	esi
		call	PORT_ArenaMark_Util
		push	18h
		push	esi
		mov	ebx, eax
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10008DA2
		push	ebx
		push	esi
		call	PORT_ArenaRelease_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 0Ch
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008DA2:				; CODE XREF: sub_10008D60+26j
		mov	eax, [esp+0Ch+arg_4]
		push	eax
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		test	eax, eax
		jz	short loc_10008DC2
		push	eax
		push	edi
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008DDF

loc_10008DC2:				; CODE XREF: sub_10008D60+51j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		push	ebx
		push	esi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008DDF:				; CODE XREF: sub_10008D60+60j
		push	ebx
		push	esi
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	esi
		retn
sub_10008D60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008DF0	proc near		; CODE XREF: sub_10008FF0+22Ap
					; sub_10008FF0+246p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		push	ebp
		xor	ebp, ebp
		push	esi
		mov	esi, [esp+14h+arg_4]
		push	edi
		mov	[esp+18h+var_C], ebp
		mov	[esp+18h+var_8], ebp
		mov	[esp+18h+var_4], ebp
		cmp	esi, ebp
		jz	loc_10008FDC
		mov	edi, [esp+18h+arg_0]
		cmp	edi, ebp
		jz	loc_10008FDC
		mov	eax, [esi+18h]
		push	ebx
		push	eax
		call	PORT_ArenaMark_Util
		mov	ecx, [esi+18h]
		push	10h
		push	ecx
		mov	[esp+28h+arg_4], eax
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		add	esp, 0Ch
		cmp	ebx, ebp
		jnz	short loc_10008E50
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10008F8A
; ---------------------------------------------------------------------------

loc_10008E50:				; CODE XREF: sub_10008DF0+4Cj
		mov	ebp, [esp+1Ch+arg_8]
		push	ebp
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_10008E73
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10008F8A
; ---------------------------------------------------------------------------

loc_10008E73:				; CODE XREF: sub_10008DF0+6Fj
		mov	edx, [edi]
		push	eax
		push	ebx
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008E96
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10008F8A
; ---------------------------------------------------------------------------

loc_10008E96:				; CODE XREF: sub_10008DF0+92j
		mov	eax, ebp
		sub	eax, 0ABh
		jz	short loc_10008EAC
		dec	eax
		jnz	loc_10008F8A
		mov	ebp, [esp+1Ch+arg_C]
		jmp	short loc_10008ED3
; ---------------------------------------------------------------------------

loc_10008EAC:				; CODE XREF: sub_10008DF0+ADj
		mov	eax, [esp+1Ch+arg_C]
		mov	edx, [edi]
		push	1
		push	0
		push	0
		push	eax
		lea	ecx, [esp+2Ch+var_C]
		push	ecx
		push	edx
		call	sub_10008160
		add	esp, 18h
		test	eax, eax
		jz	loc_10008F8A
		lea	ebp, [esp+1Ch+var_C]

loc_10008ED3:				; CODE XREF: sub_10008DF0+BAj
		mov	eax, [edi]
		push	8
		push	eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[ebx+0Ch], eax
		test	eax, eax
		jnz	short loc_10008EF9
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10008F8A
; ---------------------------------------------------------------------------

loc_10008EF9:				; CODE XREF: sub_10008DF0+F5j
		mov	ecx, [edi]
		push	0Ch
		push	ecx
		call	PORT_ArenaZAlloc_Util
		mov	edx, [ebx+0Ch]
		mov	[edx], eax
		mov	eax, [ebx+0Ch]
		add	esp, 8
		cmp	dword ptr [eax], 0
		jnz	short loc_10008F22
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10008F8A
; ---------------------------------------------------------------------------

loc_10008F22:				; CODE XREF: sub_10008DF0+121j
		mov	dword ptr [eax+4], 0
		mov	eax, [ebx+0Ch]
		mov	ecx, [eax]
		mov	edx, [edi]
		push	ebp
		push	ecx
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008F4E
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10008F8A
; ---------------------------------------------------------------------------

loc_10008F4E:				; CODE XREF: sub_10008DF0+14Dj
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_10008F76
		lea	ecx, ds:8[eax*4]
		push	ecx
		mov	ecx, [edi]
		lea	edx, ds:4[eax*4]
		mov	eax, [esi+10h]
		push	edx
		push	eax
		push	ecx
		call	PORT_ArenaGrow_Util
		add	esp, 10h
		jmp	short loc_10008F83
; ---------------------------------------------------------------------------

loc_10008F76:				; CODE XREF: sub_10008DF0+163j
		mov	edx, [edi]
		push	8
		push	edx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8

loc_10008F83:				; CODE XREF: sub_10008DF0+184j
		mov	[esi+10h], eax
		test	eax, eax
		jnz	short loc_10008FA9

loc_10008F8A:				; CODE XREF: sub_10008DF0+5Bj
					; sub_10008DF0+7Ej ...
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_10008F9E
		push	eax
		mov	eax, [edi]
		push	eax
		call	PORT_ArenaRelease_Util
		add	esp, 8

loc_10008F9E:				; CODE XREF: sub_10008DF0+1A0j
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10008FA9:				; CODE XREF: sub_10008DF0+198j
		mov	ecx, [esi+1Ch]
		mov	edx, [esi+10h]
		mov	[edx+ecx*4], ebx
		inc	dword ptr [esi+1Ch]
		mov	eax, [esi+1Ch]
		mov	ecx, [esi+10h]
		mov	edx, [esp+1Ch+arg_4]
		mov	dword ptr [ecx+eax*4], 0
		mov	eax, [edi]
		push	edx
		push	eax
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10008FDC:				; CODE XREF: sub_10008DF0+1Aj
					; sub_10008DF0+26j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
sub_10008DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008FF0	proc near		; CODE XREF: sub_10008FF0+103p
					; SEC_PKCS12AddCertOrChainAndKey+80p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 14h
		push	ebx
		xor	ebx, ebx
		push	ebp
		mov	ebp, [esp+1Ch+arg_0]
		push	esi
		mov	[esp+20h+var_C], ebx
		mov	[esp+20h+var_8], ebx
		mov	[esp+20h+var_4], ebx
		cmp	ebp, ebx
		jz	loc_100092A4
		mov	esi, [esp+20h+arg_C]
		cmp	esi, ebx
		jz	loc_100092A4
		mov	eax, [ebp+0]
		push	edi
		push	eax
		call	PORT_ArenaMark_Util
		mov	ecx, [ebp+0]
		push	0A8h
		push	ecx
		mov	[esp+30h+var_14], eax
		call	sub_10008D60
		mov	edi, eax
		add	esp, 0Ch
		mov	[esp+24h+var_10], edi
		cmp	edi, ebx
		jz	loc_10009269
		lea	eax, [esi+3Ch]
		push	eax
		mov	eax, [ebp+0]
		lea	edx, [edi+0Ch]
		push	edx
		push	eax
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10009073
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10009269
; ---------------------------------------------------------------------------

loc_10009073:				; CODE XREF: sub_10008FF0+6Fj
		cmp	[esp+24h+arg_18], ebx
		jz	loc_1000912C
		push	1
		push	ebx
		push	esi
		call	CERT_CertChainFromCert
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, ebx
		jnz	short loc_100090A1
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10009269
; ---------------------------------------------------------------------------

loc_100090A1:				; CODE XREF: sub_10008FF0+9Dj
		cmp	[edi+4], ebx
		jbe	short loc_1000911D
		xor	ebp, ebp

loc_100090A8:				; CODE XREF: sub_10008FF0+127j
		mov	ecx, [edi]
		lea	eax, [esi+3Ch]
		push	eax
		add	ecx, ebp
		push	ecx
		call	SECITEM_CompareItem_Util
		add	esp, 8
		test	eax, eax
		jz	short loc_10009110
		mov	edx, [edi]
		add	edx, ebp
		push	edx
		call	CERT_GetDefaultCertDB
		push	eax
		call	CERT_FindCertByDERCert
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_10009189
		mov	eax, [esp+24h+arg_10]
		mov	ecx, [esp+24h+arg_8]
		mov	edx, [esp+24h+arg_4]
		push	0
		push	0
		push	eax
		mov	eax, [esp+30h+arg_0]
		push	esi
		push	ecx
		push	edx
		push	eax
		call	sub_10008FF0
		add	esp, 1Ch
		push	esi
		test	eax, eax
		jnz	loc_1000919B
		call	CERT_DestroyCertificate
		mov	esi, [esp+28h+arg_C]
		add	esp, 4

loc_10009110:				; CODE XREF: sub_10008FF0+CBj
		inc	ebx
		add	ebp, 0Ch
		cmp	ebx, [edi+4]
		jb	short loc_100090A8
		mov	ebp, [esp+24h+arg_0]

loc_1000911D:				; CODE XREF: sub_10008FF0+B4j
		push	edi
		call	CERT_DestroyCertificateList
		mov	edi, [esp+28h+var_10]
		add	esp, 4
		xor	ebx, ebx

loc_1000912C:				; CODE XREF: sub_10008FF0+87j
		cmp	[esi+154h], ebx
		jz	loc_100091F3
		mov	eax, [esi+17Ch]
		cmp	eax, ebx
		jz	loc_100091D9
		push	eax
		call	PK11_IsInternal
		add	esp, 4
		test	eax, eax
		jnz	loc_100091D9
		mov	ecx, [esi+154h]
		push	3Ah		; Val
		push	ecx		; Str
		call	ds:strchr
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jnz	short loc_100091B2
		mov	edx, [esp+24h+arg_C]
		mov	eax, [edx+154h]
		mov	[esp+24h+var_8], eax
		lea	edx, [eax+1]

loc_10009180:				; CODE XREF: sub_10008FF0+195j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10009180
		jmp	short loc_100091ED
; ---------------------------------------------------------------------------

loc_10009189:				; CODE XREF: sub_10008FF0+E4j
		push	edi
		call	CERT_DestroyCertificateList
		mov	ebp, [esp+28h+arg_0]
		add	esp, 4
		jmp	loc_10009269
; ---------------------------------------------------------------------------

loc_1000919B:				; CODE XREF: sub_10008FF0+10Ej
		call	CERT_DestroyCertificate
		push	edi
		call	CERT_DestroyCertificateList
		mov	ebp, [esp+2Ch+arg_0]
		add	esp, 8
		jmp	loc_10009269
; ---------------------------------------------------------------------------

loc_100091B2:				; CODE XREF: sub_10008FF0+17Dj
		mov	eax, [ebp+0]
		inc	esi
		push	esi
		push	eax
		call	PORT_ArenaStrdup_Util
		mov	[esp+2Ch+var_8], eax
		mov	eax, esi
		add	esp, 8
		lea	edx, [eax+1]
		lea	esp, [esp+0]

loc_100091D0:				; CODE XREF: sub_10008FF0+1E5j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100091D0
		jmp	short loc_100091ED
; ---------------------------------------------------------------------------

loc_100091D9:				; CODE XREF: sub_10008FF0+150j
					; sub_10008FF0+161j
		mov	eax, [esi+154h]
		mov	[esp+24h+var_8], eax
		lea	edx, [eax+1]

loc_100091E6:				; CODE XREF: sub_10008FF0+1FBj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100091E6

loc_100091ED:				; CODE XREF: sub_10008FF0+197j
					; sub_10008FF0+1E7j
		sub	eax, edx
		mov	[esp+24h+var_4], eax

loc_100091F3:				; CODE XREF: sub_10008FF0+142j
		push	edi
		push	0A4h
		push	ebp
		call	sub_10008C60
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jz	short loc_10009269
		cmp	[esp+24h+var_8], ebx
		jz	short loc_10009226
		lea	ecx, [esp+24h+var_C]
		push	ecx
		push	0ABh
		push	esi
		push	ebp
		call	sub_10008DF0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10009269

loc_10009226:				; CODE XREF: sub_10008FF0+21Cj
		mov	eax, [esp+24h+arg_14]
		cmp	eax, ebx
		jz	short loc_10009242
		push	eax
		push	0ACh
		push	esi
		push	ebp
		call	sub_10008DF0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10009269

loc_10009242:				; CODE XREF: sub_10008FF0+23Cj
		mov	eax, [esp+24h+arg_8]
		push	esi
		cmp	eax, ebx
		jz	short loc_10009257
		mov	edx, [ebp+0]
		push	eax
		push	edx
		call	sub_10008B20
		jmp	short loc_10009262
; ---------------------------------------------------------------------------

loc_10009257:				; CODE XREF: sub_10008FF0+259j
		mov	eax, [esp+28h+arg_4]
		push	eax
		push	ebp
		call	sub_10008C00

loc_10009262:				; CODE XREF: sub_10008FF0+265j
		add	esp, 0Ch
		cmp	eax, ebx
		jz	short loc_10009289

loc_10009269:				; CODE XREF: sub_10008FF0+53j
					; sub_10008FF0+7Ej ...
		mov	eax, [esp+24h+var_14]
		test	eax, eax
		jz	short loc_1000927E
		mov	ecx, [ebp+0]
		push	eax
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 8

loc_1000927E:				; CODE XREF: sub_10008FF0+27Fj
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10009289:				; CODE XREF: sub_10008FF0+277j
		mov	edx, [esp+24h+var_14]
		mov	eax, [ebp+0]
		push	edx
		push	eax
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_100092A4:				; CODE XREF: sub_10008FF0+1Aj
					; sub_10008FF0+26j
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
sub_10008FF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100092B0	proc near		; CODE XREF: SEC_PKCS12AddCertOrChainAndKey+A9p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 20h
		push	ebx
		xor	ebx, ebx
		push	esi
		mov	esi, [esp+28h+arg_0]
		or	eax, 0FFFFFFFFh
		push	edi
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_18], ebx
		mov	[esp+2Ch+var_14], ebx
		mov	[esp+2Ch+var_10], ebx
		mov	[esp+2Ch+var_C], ebx
		mov	[esp+2Ch+var_8], ebx
		mov	[esp+2Ch+var_4], ebx
		cmp	esi, ebx
		jz	loc_1000957C
		mov	edi, [esp+2Ch+arg_C]
		cmp	edi, ebx
		jz	loc_1000957C
		cmp	[esp+2Ch+arg_4], ebx
		jz	loc_1000957C
		mov	eax, [esi]
		push	ebp
		push	eax
		call	PORT_ArenaMark_Util
		add	esp, 4
		mov	ebp, eax
		mov	[esp+30h+var_1C], ebp
		cmp	[esp+30h+arg_10], ebx
		jnz	short loc_1000937F
		mov	ecx, [esi+8]
		push	ecx
		push	edi
		call	PK11_ExportPrivateKeyInfo
		mov	edi, eax
		add	esp, 8
		cmp	edi, ebx
		jnz	short loc_10009345
		mov	edx, [esi]
		push	ebp
		push	edx
		call	PORT_ArenaRelease_Util
		push	0FFFFE060h
		call	PORT_SetError_Util
		add	esp, 0Ch
		pop	ebp
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10009345:				; CODE XREF: sub_100092B0+72j
		mov	eax, [esi]
		push	38h
		push	eax
		call	PORT_ArenaZAlloc_Util
		mov	ebp, eax
		add	esp, 8
		cmp	ebp, ebx
		jz	loc_1000942E
		mov	ecx, [esi]
		push	edi
		push	ebp
		push	ecx
		call	SECKEY_CopyPrivateKeyInfo
		push	1
		push	edi
		mov	[esp+44h+var_20], eax
		mov	[esp+44h+arg_0], 0A2h
		call	SECKEY_DestroyPrivateKeyInfo
		jmp	loc_10009475
; ---------------------------------------------------------------------------

loc_1000937F:				; CODE XREF: sub_100092B0+5Fj
		mov	edx, [esp+30h+arg_18]
		mov	ecx, [esi]
		push	1
		push	1
		push	1
		push	edx
		lea	eax, [esp+40h+var_C]
		push	eax
		push	ecx
		call	sub_10008160
		add	esp, 18h
		test	eax, eax
		jz	loc_1000942E
		mov	edx, [esi+4]
		push	edx
		call	PK11_IsInternal
		add	esp, 4
		test	eax, eax
		jz	short loc_100093B9
		call	PK11_GetInternalKeySlot
		jmp	short loc_100093C5
; ---------------------------------------------------------------------------

loc_100093B9:				; CODE XREF: sub_100092B0+100j
		mov	eax, [esi+4]
		push	eax
		call	PK11_ReferenceSlot
		add	esp, 4

loc_100093C5:				; CODE XREF: sub_100092B0+107j
		mov	ecx, [esi+8]
		mov	edx, ds:dword_1001499C
		push	ecx
		mov	ecx, [esp+34h+arg_14]
		push	edx
		mov	ebp, eax
		push	edi
		lea	eax, [esp+3Ch+var_C]
		push	eax
		push	ecx
		push	ebp
		call	PK11_ExportEncryptedPrivateKeyInfo
		push	ebp
		mov	edi, eax
		call	PK11_FreeSlot
		add	esp, 1Ch
		cmp	edi, ebx
		jnz	short loc_1000941B
		push	0FFFFE060h
		call	PORT_SetError_Util
		mov	ecx, [esp+34h+var_1C]
		mov	edx, [esi]
		add	esp, 4
		push	ecx
		push	edx
		call	PORT_ArenaRelease_Util
		mov	eax, [esp+38h+var_20]
		add	esp, 8
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000941B:				; CODE XREF: sub_100092B0+140j
		mov	edx, [esi]
		push	28h
		push	edx
		call	PORT_ArenaZAlloc_Util
		mov	ebp, eax
		add	esp, 8
		cmp	ebp, ebx
		jnz	short loc_10009457

loc_1000942E:				; CODE XREF: sub_100092B0+A6j
					; sub_100092B0+ECj
		push	0FFFFE013h
		call	PORT_SetError_Util
		mov	ecx, [esp+34h+var_1C]
		mov	edx, [esi]
		add	esp, 4
		push	ecx
		push	edx
		call	PORT_ArenaRelease_Util
		mov	eax, [esp+38h+var_20]
		add	esp, 8
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10009457:				; CODE XREF: sub_100092B0+17Cj
		mov	eax, [esi]
		push	edi
		push	ebp
		push	eax
		call	SECKEY_CopyEncryptedPrivateKeyInfo
		push	1
		push	edi
		mov	[esp+44h+var_20], eax
		mov	[esp+44h+arg_0], 0A3h
		call	SECKEY_DestroyEncryptedPrivateKeyInfo

loc_10009475:				; CODE XREF: sub_100092B0+CAj
		add	esp, 14h
		cmp	[esp+30h+var_20], ebx
		jnz	loc_1000954B
		mov	ebx, [esp+30h+arg_20]
		test	ebx, ebx
		jnz	short loc_100094B4
		mov	eax, [esp+30h+arg_C]
		cmp	[eax+154h], ebx
		jz	short loc_100094B4
		mov	eax, [eax+154h]
		mov	[esp+30h+var_14], eax
		lea	edx, [eax+1]

loc_100094A3:				; CODE XREF: sub_100092B0+1F8j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100094A3
		sub	eax, edx
		mov	[esp+30h+var_10], eax
		lea	ebx, [esp+30h+var_18]

loc_100094B4:				; CODE XREF: sub_100092B0+1D8j
					; sub_100092B0+1E4j
		mov	ecx, [esp+30h+arg_0]
		push	ebp
		push	ecx
		push	esi
		call	sub_10008C60
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_100094ED
		mov	ecx, [esp+30h+var_1C]
		mov	edx, [esi]
		push	ecx
		push	edx
		mov	[esp+38h+var_20], 0FFFFFFFFh
		call	PORT_ArenaRelease_Util
		mov	eax, [esp+38h+var_20]
		add	esp, 8
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_100094ED:				; CODE XREF: sub_100092B0+217j
		test	ebx, ebx
		jz	short loc_10009505
		push	ebx
		push	0ABh
		push	edi
		push	esi
		call	sub_10008DF0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10009567

loc_10009505:				; CODE XREF: sub_100092B0+23Fj
		mov	eax, [esp+30h+arg_1C]
		test	eax, eax
		jz	short loc_10009521
		push	eax
		push	0ACh
		push	edi
		push	esi
		call	sub_10008DF0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10009567

loc_10009521:				; CODE XREF: sub_100092B0+25Bj
		mov	eax, [esp+30h+arg_8]
		push	edi
		test	eax, eax
		jz	short loc_10009535
		mov	edx, [esi]
		push	eax
		push	edx
		call	sub_10008B20
		jmp	short loc_10009540
; ---------------------------------------------------------------------------

loc_10009535:				; CODE XREF: sub_100092B0+278j
		mov	eax, [esp+34h+arg_4]
		push	eax
		push	esi
		call	sub_10008C00

loc_10009540:				; CODE XREF: sub_100092B0+283j
		add	esp, 0Ch
		mov	[esp+30h+var_20], eax
		test	eax, eax
		jz	short loc_10009567

loc_1000954B:				; CODE XREF: sub_100092B0+1CCj
		mov	ecx, [esp+30h+var_1C]
		mov	edx, [esi]
		push	ecx
		push	edx
		call	PORT_ArenaRelease_Util
		mov	eax, [esp+38h+var_20]
		add	esp, 8
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10009567:				; CODE XREF: sub_100092B0+253j
					; sub_100092B0+26Fj ...
		mov	eax, [esp+30h+var_1C]
		mov	ecx, [esi]
		push	eax
		push	ecx
		call	PORT_ArenaUnmark_Util
		mov	eax, [esp+38h+var_20]
		add	esp, 8
		pop	ebp

loc_1000957C:				; CODE XREF: sub_100092B0+2Dj
					; sub_100092B0+39j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
sub_100092B0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 108. SEC_PKCS12AddCertOrChainAndKey

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12AddCertOrChainAndKey
SEC_PKCS12AddCertOrChainAndKey proc near ; CODE	XREF: SEC_PKCS12AddCertAndKey+34p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		test	esi, esi
		jz	loc_10009680
		cmp	[esp+8+arg_4], 0
		jz	loc_10009680
		cmp	[esp+8+arg_14],	0
		jz	loc_10009680
		mov	ebx, [esp+8+arg_C]
		test	ebx, ebx
		jz	loc_10009680
		mov	eax, [esi]
		push	ebp
		push	edi
		push	eax
		call	PORT_ArenaMark_Util
		lea	ecx, [ebx+3Ch]
		mov	ebp, eax
		push	ecx
		mov	[esp+18h+arg_0], ebp
		call	sub_100080C0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_100095F6
		mov	edx, [esi]
		push	ebp
		push	edx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	edi
		pop	ebp
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100095F6:				; CODE XREF: SEC_PKCS12AddCertOrChainAndKey+50j
		mov	eax, [esp+10h+arg_28]
		mov	ecx, [esp+10h+arg_10]
		mov	edx, [esp+10h+arg_8]
		push	eax
		mov	eax, [esp+14h+arg_4]
		lea	ebp, [edi+1Ch]
		push	ebp
		push	ecx
		push	ebx
		push	edx
		push	eax
		push	esi
		call	sub_10008FF0
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_10009645
		mov	ecx, [esp+10h+arg_20]
		mov	edx, [esp+10h+arg_24]
		push	eax
		mov	eax, [esp+14h+arg_1C]
		push	ebp
		push	ecx
		mov	ecx, [esp+1Ch+arg_18]
		push	edx
		mov	edx, [esp+20h+arg_14]
		push	eax
		push	ebx
		push	ecx
		push	edx
		push	esi
		call	sub_100092B0
		add	esp, 24h
		test	eax, eax
		jz	short loc_10009663

loc_10009645:				; CODE XREF: SEC_PKCS12AddCertOrChainAndKey+8Aj
		push	edi
		call	SGN_DestroyDigestInfo_Util
		mov	eax, [esp+14h+arg_0]
		mov	ecx, [esi]
		push	eax
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 0Ch
		pop	edi
		pop	ebp
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10009663:				; CODE XREF: SEC_PKCS12AddCertOrChainAndKey+B3j
		push	edi
		call	SGN_DestroyDigestInfo_Util
		mov	edx, [esp+14h+arg_0]
		mov	eax, [esi]
		push	edx
		push	eax
		call	PORT_ArenaUnmark_Util
		add	esp, 0Ch
		pop	edi
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10009680:				; CODE XREF: SEC_PKCS12AddCertOrChainAndKey+8j
					; SEC_PKCS12AddCertOrChainAndKey+13j ...
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
SEC_PKCS12AddCertOrChainAndKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 107. SEC_PKCS12AddCertAndKey

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12AddCertAndKey
SEC_PKCS12AddCertAndKey	proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		mov	eax, [esp+arg_24]
		mov	ecx, [esp+arg_20]
		mov	edx, [esp+arg_1C]
		push	1
		push	eax
		mov	eax, [esp+8+arg_18]
		push	ecx
		mov	ecx, [esp+0Ch+arg_14]
		push	edx
		mov	edx, [esp+10h+arg_10]
		push	eax
		mov	eax, [esp+14h+arg_C]
		push	ecx
		mov	ecx, [esp+18h+arg_8]
		push	edx
		mov	edx, [esp+1Ch+arg_4]
		push	eax
		mov	eax, [esp+20h+arg_0]
		push	ecx
		push	edx
		push	eax
		call	SEC_PKCS12AddCertOrChainAndKey
		add	esp, 2Ch
		retn
SEC_PKCS12AddCertAndKey	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100096D0	proc near		; CODE XREF: sub_10009770:loc_10009A09p
					; SEC_PKCS12Encode+77p	...
		push	edi
		xor	edi, edi
		cmp	esi, edi
		jz	loc_1000975F
		mov	eax, [esi+8]
		cmp	eax, edi
		jz	short loc_100096EE
		push	eax
		call	SEC_ASN1EncoderFinish_Util
		add	esp, 4
		mov	[esi+8], edi

loc_100096EE:				; CODE XREF: sub_100096D0+10j
		mov	eax, [esi+0C0h]
		cmp	eax, edi
		jz	short loc_10009707
		push	eax
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4
		mov	[esi+0C0h], edi

loc_10009707:				; CODE XREF: sub_100096D0+26j
		mov	ecx, [esi+0C4h]
		cmp	ecx, edi
		jz	short loc_1000972B
		mov	eax, [esi+4]
		mov	edx, [eax+28h]
		mov	eax, [eax+24h]
		push	edx
		push	eax
		push	ecx
		call	SEC_PKCS7EncoderFinish
		add	esp, 0Ch
		mov	[esi+0C4h], edi

loc_1000972B:				; CODE XREF: sub_100096D0+3Fj
		mov	eax, [esi+0C8h]
		cmp	eax, edi
		jz	short loc_10009744
		push	eax
		call	SEC_ASN1EncoderFinish_Util
		add	esp, 4
		mov	[esi+0C8h], edi

loc_10009744:				; CODE XREF: sub_100096D0+63j
		mov	eax, [esi+0D0h]
		cmp	eax, edi
		jz	short loc_1000975F
		push	1
		push	eax
		call	PK11_DestroyContext
		add	esp, 8
		mov	[esi+0D0h], edi

loc_1000975F:				; CODE XREF: sub_100096D0+5j
					; sub_100096D0+7Cj
		pop	edi
		retn
sub_100096D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009770	proc near		; CODE XREF: SEC_PKCS12Encode+23p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 1Ch
		push	ebp
		push	edi
		mov	edi, eax
		xor	ebp, ebp
		xor	eax, eax
		mov	[esp+24h+var_C], ebp
		mov	[esp+24h+var_8], eax
		mov	[esp+24h+var_4], eax
		cmp	edi, ebp
		jz	loc_10009A46
		mov	edx, [edi+2Ch]
		cmp	edx, ebp
		jz	loc_10009A46
		push	esi
		xor	esi, esi
		xor	ecx, ecx
		cmp	[edx], ebp
		jz	short loc_100097EF
		mov	eax, edx

loc_100097A5:				; CODE XREF: sub_10009770+44j
		mov	eax, [eax]
		cmp	[eax+18h], ebp
		jz	short loc_100097AD
		inc	esi

loc_100097AD:				; CODE XREF: sub_10009770+3Aj
		inc	ecx
		cmp	[edx+ecx*4], ebp
		lea	eax, [edx+ecx*4]
		jnz	short loc_100097A5
		cmp	esi, ebp
		jz	short loc_100097EF
		mov	ecx, [edi+38h]
		mov	[ecx+esi*4], ebp
		mov	edx, [edi]
		push	edx
		call	PORT_ArenaMark_Util
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [edi]
		push	40F4h
		push	eax
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jnz	short loc_100097F8
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_100097EF:				; CODE XREF: sub_10009770+31j
					; sub_10009770+48j
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_100097F8:				; CODE XREF: sub_10009770+70j
		mov	ecx, [edi]
		push	ebx
		push	68h		; Size
		lea	ebx, [esi+18h]
		push	ebp		; Val
		push	ebx		; Dst
		mov	[esi], ecx
		mov	[esi+4], edi
		call	memset
		mov	edx, [edi]
		push	3
		push	ebx
		push	edx
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 18h
		test	eax, eax
		jnz	short loc_10009830
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10009A09
; ---------------------------------------------------------------------------

loc_10009830:				; CODE XREF: sub_10009770+ACj
		cmp	[edi+0Ch], ebp
		jz	short loc_1000988D
		cmp	[edi+10h], ebp
		jnz	short loc_1000988D
		mov	eax, [edi+28h]
		mov	ecx, [edi+24h]
		mov	edx, [edi+1Ch]
		push	eax
		mov	eax, [edi+18h]
		push	ecx
		mov	ecx, [edi+14h]
		push	ebp
		push	edx
		push	eax
		push	4
		push	ecx
		call	SEC_PKCS7CreateSignedData
		add	esp, 1Ch
		mov	[esi+0C0h], eax
		cmp	eax, ebp
		jz	loc_10009A09
		push	ebp
		push	eax
		call	SEC_PKCS7IncludeCertChain
		add	esp, 8
		test	eax, eax
		jnz	loc_10009A09
		mov	edx, [esi+0C0h]
		push	edx
		call	SEC_PKCS7AddSigningTime
		add	esp, 4
		jmp	loc_10009A00
; ---------------------------------------------------------------------------

loc_1000988D:				; CODE XREF: sub_10009770+C3j
					; sub_10009770+C8j
		call	SEC_PKCS7CreateData
		mov	[esi+0C0h], eax
		cmp	[edi+0Ch], ebp
		jz	loc_10009A00
		mov	[esp+2Ch+var_18], ebp
		mov	[esp+2Ch+var_14], ebp
		mov	[esp+2Ch+var_10], ebp
		call	sub_10008050
		push	40h		; Size
		mov	ebx, eax
		lea	eax, [esi+80h]
		push	ebp		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		cmp	ebx, ebp
		jnz	short loc_100098DC
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10009A09
; ---------------------------------------------------------------------------

loc_100098DC:				; CODE XREF: sub_10009770+158j
		mov	edx, [edi]
		push	ebx
		lea	ecx, [esi+0A8h]
		push	ecx
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10009905
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10009A09
; ---------------------------------------------------------------------------

loc_10009905:				; CODE XREF: sub_10009770+181j
		mov	eax, ds:dword_1001499C
		mov	edx, [edi]
		push	eax
		lea	ecx, [esi+0B4h]
		push	ecx
		push	edx
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10009A09
		mov	eax, [edi+14h]
		push	1
		push	1
		push	1
		push	eax
		lea	ecx, [esp+3Ch+var_18]
		push	ecx
		push	ebp
		call	sub_10008160
		add	esp, 18h
		test	eax, eax
		jz	loc_10009A09
		mov	edx, ds:dword_1001499C
		push	edx
		lea	eax, [esp+30h+var_18]
		push	eax
		push	ebx
		call	PK11_CreatePBEParams
		push	1
		push	ebx
		mov	ebp, eax
		call	SECITEM_ZfreeItem_Util
		lea	ecx, [esp+40h+var_18]
		push	0
		push	ecx
		call	SECITEM_ZfreeItem_Util
		mov	eax, [edi+18h]
		add	esp, 1Ch
		dec	eax
		jz	short loc_10009990
		sub	eax, 2
		jz	short loc_10009989
		dec	eax
		jnz	loc_10009A09
		mov	eax, 3C0h
		jmp	short loc_10009995
; ---------------------------------------------------------------------------

loc_10009989:				; CODE XREF: sub_10009770+209j
		mov	eax, 8000000Ah
		jmp	short loc_10009995
; ---------------------------------------------------------------------------

loc_10009990:				; CODE XREF: sub_10009770+204j
		mov	eax, 8000000Bh

loc_10009995:				; CODE XREF: sub_10009770+217j
					; sub_10009770+21Ej
		push	0
		push	14h
		push	ebp
		push	eax
		push	0
		call	PK11_KeyGen
		push	ebp
		mov	ebx, eax
		call	PK11_DestroyPBEParams
		add	esp, 18h
		test	ebx, ebx
		jz	short loc_10009A09
		mov	edx, [edi+18h]
		push	edx
		call	sub_10007E10
		lea	ecx, [esp+30h+var_C]
		push	ecx
		push	ebx
		push	108h
		push	eax
		call	PK11_CreateContextBySymKey
		push	ebx
		mov	[esi+0D0h], eax
		call	PK11_FreeSymKey
		mov	eax, [esi+0D0h]
		add	esp, 18h
		test	eax, eax
		jnz	short loc_100099F3
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10009A09
; ---------------------------------------------------------------------------

loc_100099F3:				; CODE XREF: sub_10009770+272j
		push	eax
		call	PK11_DigestBegin
		add	esp, 4
		test	eax, eax
		jnz	short loc_10009A09

loc_10009A00:				; CODE XREF: sub_10009770+118j
					; sub_10009770+12Bj
		cmp	dword ptr [esi+0C0h], 0
		jnz	short loc_10009A2C

loc_10009A09:				; CODE XREF: sub_10009770+BBj
					; sub_10009770+F1j ...
		call	sub_100096D0
		mov	edi, [edi]
		test	edi, edi
		jz	short loc_10009A22
		mov	edx, [esp+2Ch+var_1C]
		push	edx
		push	edi
		call	PORT_ArenaRelease_Util
		add	esp, 8

loc_10009A22:				; CODE XREF: sub_10009770+2A2j
		pop	ebx
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10009A2C:				; CODE XREF: sub_10009770+297j
		mov	eax, [esp+2Ch+var_1C]
		mov	ecx, [edi]
		push	eax
		push	ecx
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10009A46:				; CODE XREF: sub_10009770+19j
					; sub_10009770+24j
		pop	edi
		xor	eax, eax
		pop	ebp
		add	esp, 1Ch
		retn
sub_10009770	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10009A50:				; DATA XREF: SEC_PKCS12Encode+42o
					; SEC_PKCS7EncoderStart+26o ...
		mov	eax, [esp+0Ch]
		mov	ecx, [esp+8]
		push	eax
		mov	eax, [esp+8]
		mov	edx, [eax+4]
		mov	eax, [eax]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10009A70(int,	void *Src, size_t Size)
sub_10009A70	proc near		; DATA XREF: sub_10009B90+83o
					; SEC_PKCS12Encode+108o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+Src]
		test	ebp, ebp
		jz	loc_10009B3E
		push	edi
		mov	edi, [esp+8+Size]
		test	edi, edi
		jz	loc_10009B3D
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_10009AA1
		push	edi
		push	ebp
		push	eax
		call	PK11_DigestOp
		add	esp, 0Ch

loc_10009AA1:				; CODE XREF: sub_10009A70+24j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_10009B17
		mov	ecx, [esi+0Ch]
		lea	edx, [eax+edi]
		cmp	edx, ecx
		ja	short loc_10009AE7
		push	edi		; Size
		lea	eax, [eax+esi+10h]
		push	ebp		; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esi+0Ch]
		add	[esi+8], edi
		add	esp, 0Ch
		cmp	[esi+8], eax
		jb	short loc_10009B3C
		mov	edx, [esi]
		push	eax
		lea	ecx, [esi+10h]
		push	ecx
		push	edx
		call	SEC_PKCS7EncoderUpdate
		add	esp, 0Ch
		mov	dword ptr [esi+8], 0
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009AE7:				; CODE XREF: sub_10009A70+40j
		push	ebx
		sub	ecx, eax
		mov	ebx, ecx
		push	ebx		; Size
		lea	eax, [eax+esi+10h]
		push	ebp		; Src
		push	eax		; Dst
		call	memcpy
		mov	ecx, [esi+0Ch]
		mov	eax, [esi]
		push	ecx
		lea	edx, [esi+10h]
		push	edx
		push	eax
		call	SEC_PKCS7EncoderUpdate
		add	esp, 18h
		sub	edi, ebx
		add	ebp, ebx
		mov	dword ptr [esi+8], 0
		pop	ebx

loc_10009B17:				; CODE XREF: sub_10009A70+36j
		push	edi		; Size
		push	ebp		; Src
		cmp	edi, [esi+0Ch]
		jb	short loc_10009B2D
		mov	ecx, [esi]
		push	ecx
		call	SEC_PKCS7EncoderUpdate
		add	esp, 0Ch
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009B2D:				; CODE XREF: sub_10009A70+ACj
		lea	edx, [esi+10h]
		push	edx		; Dst
		call	memcpy
		mov	[esi+8], edi
		add	esp, 0Ch

loc_10009B3C:				; CODE XREF: sub_10009A70+5Aj
		pop	esi

loc_10009B3D:				; CODE XREF: sub_10009A70+14j
		pop	edi

loc_10009B3E:				; CODE XREF: sub_10009A70+7j
		pop	ebp
		retn
sub_10009A70	endp


; =============== S U B	R O U T	I N E =======================================


sub_10009B40	proc near		; CODE XREF: sub_10009B90+CCp
					; SEC_PKCS12Encode+1ACp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_10009B63
		mov	ecx, [esi]
		push	eax
		lea	eax, [esi+10h]
		push	eax
		push	ecx
		call	SEC_PKCS7EncoderUpdate
		add	esp, 0Ch
		mov	dword ptr [esi+8], 0

loc_10009B63:				; CODE XREF: sub_10009B40+Aj
		pop	esi
		retn
sub_10009B40	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10009B70:				; DATA XREF: sub_10009B90+62o
					; SEC_PKCS12Encode+B8o
		mov	ecx, [esp+8]
		test	ecx, ecx
		jz	short locret_10009B8D
		mov	eax, [esp+0Ch]
		test	eax, eax
		jz	short locret_10009B8D
		mov	[esp+0Ch], eax
		mov	[esp+8], ecx
		jmp	SEC_ASN1EncoderUpdate_Util
; ---------------------------------------------------------------------------

locret_10009B8D:			; CODE XREF: .text:10009B76j
					; .text:10009B7Ej
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009B90	proc near		; CODE XREF: SEC_PKCS12Encode+156p

var_4		= dword	ptr -4

		push	ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, eax
		mov	eax, [esi+4]
		mov	ecx, [esi+0CCh]
		xor	ebx, ebx
		push	edi
		cmp	ecx, [eax+3Ch]
		jnb	loc_10009CC0
		mov	eax, [eax+2Ch]
		mov	edi, [eax+ecx*4]
		cmp	[edi+18h], ebx
		jz	loc_10009CD6
		mov	ebp, [edi+1Ch]
		push	ebp
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 19h
		jz	short loc_10009BEA
		sub	eax, 2
		jz	short loc_10009BEA
		sub	eax, 3
		jnz	loc_10009CA3
		mov	ebx, [edi+14h]
		push	eax
		lea	ecx, [edi+4]
		push	ecx
		push	ebx
		call	PK11_SetSymKeyUserData
		add	esp, 0Ch

loc_10009BEA:				; CODE XREF: sub_10009B90+39j
					; sub_10009B90+3Ej
		mov	edx, [esi+0C8h]
		push	ebx
		push	edx
		push	offset loc_10009B70
		push	ebp
		call	SEC_PKCS7EncoderStart
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jz	loc_10009C8D
		lea	ebx, [esi+20E4h]
		xor	eax, eax
		push	ebx
		push	offset sub_10009A70
		mov	[ebx], ebp
		mov	[esi+20E8h], eax
		mov	[esi+20ECh], eax
		mov	dword ptr [esi+20F0h], 2000h
		mov	eax, [edi+20h]
		push	offset dword_10014778
		push	eax
		call	SEC_ASN1EncoderStart_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10009C6C
		push	0
		push	0
		push	edi
		call	SEC_ASN1EncoderUpdate_Util
		push	edi
		mov	[esp+24h+var_4], eax
		call	SEC_ASN1EncoderFinish_Util
		push	ebx
		call	sub_10009B40
		xor	edi, edi
		add	esp, 14h
		cmp	[esp+14h+var_4], edi
		jz	short loc_10009CAC

loc_10009C6C:				; CODE XREF: sub_10009B90+B5j
		mov	eax, [esi+4]
		mov	ecx, [eax+28h]
		mov	edx, [eax+24h]
		push	ecx
		push	edx
		push	ebp
		call	SEC_PKCS7EncoderFinish
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_10009C8D
		push	edi
		call	SEC_ASN1EncoderFinish_Util
		add	esp, 4

loc_10009C8D:				; CODE XREF: sub_10009B90+74j
					; sub_10009B90+F2j
		push	2010h		; Size
		push	0		; Val
		add	esi, 20E4h
		push	esi		; Dst
		call	memset
		add	esp, 0Ch

loc_10009CA3:				; CODE XREF: sub_10009B90+43j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10009CAC:				; CODE XREF: sub_10009B90+DAj
		mov	eax, [esi+4]
		mov	ecx, [eax+28h]
		mov	edx, [eax+24h]
		push	ecx
		push	edx
		push	ebp
		call	SEC_PKCS7EncoderFinish
		add	esp, 0Ch

loc_10009CC0:				; CODE XREF: sub_10009B90+15j
		push	2010h		; Size
		push	0		; Val
		add	esi, 20E4h
		push	esi		; Dst
		call	memset
		add	esp, 0Ch

loc_10009CD6:				; CODE XREF: sub_10009B90+24j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
sub_10009B90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009CE0	proc near		; CODE XREF: SEC_PKCS12Encode+1E9p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 0Ch
		push	ebx
		xor	ebx, ebx
		mov	[esp+10h+var_C], ebx
		mov	[esp+10h+var_8], ebx
		mov	[esp+10h+var_4], ebx
		cmp	esi, ebx
		jz	short loc_10009D29
		mov	eax, [esi+4]
		cmp	[eax+0Ch], ebx
		jnz	short loc_10009D05

loc_10009CFE:				; CODE XREF: sub_10009CE0+28j
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10009D05:				; CODE XREF: sub_10009CE0+1Cj
		cmp	[eax+10h], ebx
		jz	short loc_10009CFE
		push	14h
		call	PORT_ZAlloc_Util
		add	esp, 4
		mov	[esp+10h+var_8], eax
		cmp	eax, ebx
		jnz	short loc_10009D31
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_10009D29:				; CODE XREF: sub_10009CE0+14j
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10009D31:				; CODE XREF: sub_10009CE0+3Aj
		mov	edx, [esi+0D0h]
		push	edi
		push	14h
		lea	ecx, [esp+18h+var_4]
		push	ecx
		push	eax
		push	edx
		call	PK11_DigestFinal
		mov	edi, eax
		add	esp, 10h
		cmp	edi, ebx
		jz	short loc_10009D61
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10009DF0
; ---------------------------------------------------------------------------

loc_10009D61:				; CODE XREF: sub_10009CE0+6Dj
		mov	eax, [esp+14h+var_4]
		mov	ecx, [esp+14h+var_8]
		mov	edx, [esi+4]
		push	ebp
		push	eax
		mov	eax, [edx+18h]
		push	ecx
		push	eax
		call	SGN_CreateDigestInfo_Util
		mov	ebp, eax
		add	esp, 0Ch
		cmp	ebp, ebx
		jnz	short loc_10009D93
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	edi, 0FFFFFFFFh
		jmp	short loc_10009DEF
; ---------------------------------------------------------------------------

loc_10009D93:				; CODE XREF: sub_10009CE0+9Fj
		mov	ecx, [esi]
		push	ebp
		lea	ebx, [esi+80h]
		push	ebx
		push	ecx
		call	SGN_CopyDigestInfo_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_10009DBB
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10009DE4
; ---------------------------------------------------------------------------

loc_10009DBB:				; CODE XREF: sub_10009CE0+CAj
		mov	eax, [esi]
		push	offset dword_100147E8
		push	ebx
		lea	edx, [esi+74h]
		push	edx
		push	eax
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10009DE4
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	edi, 0FFFFFFFFh

loc_10009DE4:				; CODE XREF: sub_10009CE0+D9j
					; sub_10009CE0+F2j
		push	ebp
		call	SGN_DestroyDigestInfo_Util
		add	esp, 4
		xor	ebx, ebx

loc_10009DEF:				; CODE XREF: sub_10009CE0+B1j
		pop	ebp

loc_10009DF0:				; CODE XREF: sub_10009CE0+7Cj
		cmp	[esp+14h+var_8], ebx
		jz	short loc_10009E04
		lea	ecx, [esp+14h+var_C]
		push	ebx
		push	ecx
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_10009E04:				; CODE XREF: sub_10009CE0+114j
		mov	edx, [esi+0D0h]
		push	1
		push	edx
		call	PK11_DestroyContext
		add	esp, 8
		mov	eax, edi
		pop	edi
		mov	[esi+0D0h], ebx
		pop	ebx
		add	esp, 0Ch
		retn
sub_10009CE0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10009E30:				; DATA XREF: SEC_PKCS12Encode+90o
		cmp	dword ptr [esp+8], 0
		jz	short locret_10009E64
		push	esi
		mov	esi, [esp+8]
		lea	eax, [esi+28h]
		cmp	[esp+10h], eax
		jnz	short loc_10009E63
		mov	ecx, [esi+8]
		push	ecx
		call	SEC_ASN1EncoderSetTakeFromBuf_Util
		mov	edx, [esi+8]
		push	edx
		call	SEC_ASN1EncoderSetStreaming_Util
		mov	eax, [esi+8]
		push	eax
		call	SEC_ASN1EncoderClearNotifyProc_Util
		add	esp, 0Ch

loc_10009E63:				; CODE XREF: .text:10009E43j
		pop	esi

locret_10009E64:			; CODE XREF: .text:10009E35j
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry 126. SEC_PKCS12Encode

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12Encode
SEC_PKCS12Encode proc near		; DATA XREF: .rdata:off_10016AC8o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		xor	ebx, ebx
		push	edi
		cmp	ebp, ebx
		jz	loc_1000A08F
		mov	edi, [esp+14h+arg_4]
		cmp	edi, ebx
		jz	loc_1000A08F
		push	esi
		mov	eax, ebp
		call	sub_10009770
		mov	esi, eax
		cmp	esi, ebx
		jnz	short loc_10009EA9
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10009EA9:				; CODE XREF: SEC_PKCS12Encode+2Cj
		mov	eax, [esp+18h+arg_8]
		lea	ecx, [esp+18h+var_8]
		push	ecx
		push	offset loc_10009A50
		lea	edx, [esi+18h]
		push	offset dword_10014798
		push	edx
		mov	[esp+28h+var_8], edi
		mov	[esp+28h+var_4], eax
		call	SEC_ASN1EncoderStart_Util
		add	esp, 10h
		mov	[esi+8], eax
		cmp	eax, ebx
		jnz	short loc_10009EF6
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_10009EE4:				; CODE XREF: SEC_PKCS12Encode+ABj
					; SEC_PKCS12Encode+CEj	...
		or	edi, 0FFFFFFFFh
		call	sub_100096D0
		pop	esi
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10009EF6:				; CODE XREF: SEC_PKCS12Encode+65j
		push	eax
		call	SEC_ASN1EncoderSetStreaming_Util
		mov	eax, [esi+8]
		push	esi
		push	offset loc_10009E30
		push	eax
		call	SEC_ASN1EncoderSetNotifyProc_Util
		mov	ecx, [esi+8]
		push	ebx
		push	ebx
		push	ecx
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_10009EE4
		mov	edx, [esi+8]
		mov	eax, [esi+0C0h]
		push	ebx
		push	edx
		push	offset loc_10009B70
		push	eax
		call	SEC_PKCS7EncoderStart
		add	esp, 10h
		mov	[esi+0C4h], eax
		cmp	eax, ebx
		jz	short loc_10009EE4
		lea	edi, [esi+0D4h]
		mov	[edi], eax
		mov	eax, [esi+4]
		mov	[esi+0D8h], ebx
		mov	[esi+0DCh], ebx
		mov	dword ptr [esi+0E0h], 2000h
		cmp	[eax+0Ch], ebx
		jz	short loc_10009F77
		cmp	[eax+10h], ebx
		jz	short loc_10009F77
		mov	ecx, [esi+0D0h]
		mov	[esi+0D8h], ecx

loc_10009F77:				; CODE XREF: SEC_PKCS12Encode+F4j
					; SEC_PKCS12Encode+F9j
		push	edi
		push	offset sub_10009A70
		add	eax, 34h
		push	offset dword_10014838
		push	eax
		call	SEC_ASN1EncoderStart_Util
		add	esp, 10h
		mov	[esi+0C8h], eax
		cmp	eax, ebx
		jz	loc_10009EE4
		push	eax
		call	SEC_ASN1EncoderSetStreaming_Util
		mov	edx, [esi+0C8h]
		push	edx
		call	SEC_ASN1EncoderSetTakeFromBuf_Util
		mov	eax, [esi+4]
		mov	ecx, [esi+0CCh]
		add	esp, 8
		cmp	ecx, [eax+30h]
		jz	short loc_10009FE3
		mov	ebp, 1

loc_10009FC4:				; CODE XREF: SEC_PKCS12Encode+16Dj
		mov	eax, esi
		call	sub_10009B90
		add	[esi+0CCh], ebp
		mov	edx, [esi+4]
		mov	eax, [esi+0CCh]
		cmp	eax, [edx+30h]
		jnz	short loc_10009FC4
		mov	ebp, [esp+18h+arg_0]

loc_10009FE3:				; CODE XREF: SEC_PKCS12Encode+14Dj
		mov	ecx, [esi+0C8h]
		push	ecx
		call	SEC_ASN1EncoderClearTakeFromBuf_Util
		mov	edx, [esi+0C8h]
		push	edx
		call	SEC_ASN1EncoderClearStreaming_Util
		mov	eax, [esi+0C8h]
		push	ebx
		push	ebx
		push	eax
		call	SEC_ASN1EncoderUpdate_Util
		mov	ecx, [esi+0C8h]
		push	ecx
		call	SEC_ASN1EncoderFinish_Util
		push	edi
		mov	[esi+0C8h], ebx
		call	sub_10009B40
		mov	edx, [ebp+28h]
		mov	eax, [ebp+24h]
		mov	ecx, [esi+0C4h]
		push	edx
		push	eax
		push	ecx
		call	SEC_PKCS7EncoderFinish
		mov	edi, eax
		add	esp, 28h
		mov	[esi+0C4h], ebx
		cmp	edi, ebx
		jnz	short loc_1000A080
		mov	edx, [esi+8]
		push	edx
		call	SEC_ASN1EncoderClearTakeFromBuf_Util
		mov	eax, [esi+8]
		push	eax
		call	SEC_ASN1EncoderClearStreaming_Util
		add	esp, 8
		call	sub_10009CE0
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_1000A080
		mov	ecx, [esi+8]
		push	ebx
		push	ebx
		push	ecx
		call	SEC_ASN1EncoderUpdate_Util
		mov	edx, [esi+8]
		push	edx
		mov	edi, eax
		call	SEC_ASN1EncoderFinish_Util
		add	esp, 10h
		mov	[esi+8], ebx

loc_1000A080:				; CODE XREF: SEC_PKCS12Encode+1D2j
					; SEC_PKCS12Encode+1F2j
		call	sub_100096D0
		pop	esi
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000A08F:				; CODE XREF: SEC_PKCS12Encode+Ej
					; SEC_PKCS12Encode+1Aj
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
SEC_PKCS12Encode endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 124. SEC_PKCS12DestroyExportContext

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DestroyExportContext
SEC_PKCS12DestroyExportContext proc near ; DATA	XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_1000A112
		mov	eax, [edi+2Ch]
		test	eax, eax
		jz	short loc_1000A0FC
		push	ebx
		xor	ebx, ebx
		cmp	[eax], ebx
		jz	short loc_1000A0FB
		push	esi
		xor	esi, esi
		lea	ebx, [ebx+0]

loc_1000A0C0:				; CODE XREF: SEC_PKCS12DestroyExportContext+58j
		mov	eax, [esi+eax]
		mov	eax, [eax+14h]
		test	eax, eax
		jz	short loc_1000A0D3
		push	eax
		call	PK11_FreeSymKey
		add	esp, 4

loc_1000A0D3:				; CODE XREF: SEC_PKCS12DestroyExportContext+28j
		mov	ecx, [edi+2Ch]
		mov	edx, [ecx+esi]
		mov	eax, [edx+1Ch]
		test	eax, eax
		jz	short loc_1000A0E9
		push	eax
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4

loc_1000A0E9:				; CODE XREF: SEC_PKCS12DestroyExportContext+3Ej
		mov	eax, [edi+2Ch]
		inc	ebx
		lea	esi, ds:0[ebx*4]
		cmp	dword ptr [esi+eax], 0
		jnz	short loc_1000A0C0
		pop	esi

loc_1000A0FB:				; CODE XREF: SEC_PKCS12DestroyExportContext+15j
		pop	ebx

loc_1000A0FC:				; CODE XREF: SEC_PKCS12DestroyExportContext+Ej
		mov	eax, [edi+4]
		push	eax
		call	PK11_FreeSlot
		mov	ecx, [edi]
		push	1
		push	ecx
		call	PORT_FreeArena_Util
		add	esp, 0Ch

loc_1000A112:				; CODE XREF: SEC_PKCS12DestroyExportContext+7j
		pop	edi
		retn
SEC_PKCS12DestroyExportContext endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A120	proc near		; DATA XREF: sub_1000C6F0+43o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_1000A12D
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000A12D:				; CODE XREF: sub_1000A120+7j
		mov	eax, [edi+4]
		push	ebx
		push	ebp
		push	esi
		test	eax, eax
		jz	short loc_1000A142
		push	eax
		call	PK11_ReferenceSlot
		add	esp, 4
		jmp	short loc_1000A147
; ---------------------------------------------------------------------------

loc_1000A142:				; CODE XREF: sub_1000A120+15j
		call	PK11_GetInternalKeySlot

loc_1000A147:				; CODE XREF: sub_1000A120+20j
		mov	ecx, [edi+14h]
		mov	ebp, [esp+10h+arg_4]
		mov	esi, eax
		mov	eax, [edi+8]
		push	eax
		push	0
		push	ecx
		push	ebp
		push	esi
		call	PK11_PBEKeyGen
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_1000A196
		push	esi
		call	PK11_IsInternal
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000A196
		push	esi
		call	PK11_FreeSlot
		call	PK11_GetInternalKeySlot
		mov	edx, [edi+8]
		push	edx
		mov	esi, eax
		mov	eax, [edi+14h]
		push	ebx
		push	eax
		push	ebp
		push	esi
		call	PK11_PBEKeyGen
		add	esp, 18h
		mov	ebx, eax

loc_1000A196:				; CODE XREF: sub_1000A120+45j
					; sub_1000A120+52j
		push	esi
		call	PK11_FreeSlot
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1000A1B2
		mov	ecx, [edi+14h]
		push	0
		push	ecx
		push	ebx
		call	PK11_SetSymKeyUserData
		add	esp, 0Ch

loc_1000A1B2:				; CODE XREF: sub_1000A120+81j
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	edi
		retn
sub_1000A120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A1C0	proc near		; DATA XREF: sub_1000C6F0+3Do

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	eax
		call	SEC_PKCS12DecryptionAllowed
		add	esp, 4
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
sub_1000A1C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A1E0	proc near		; CODE XREF: .text:loc_1000C52Fp
		push	esi
		test	edi, edi
		jz	loc_1000A300
		mov	esi, [edi]
		test	esi, esi
		jz	loc_1000A300
		cmp	dword ptr [esi+0Ch], 0
		jnz	loc_1000A300
		mov	eax, [esi]
		push	ebx
		push	eax
		call	PORT_ArenaMark_Util
		mov	ebx, eax
		mov	eax, [esi+88h]
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000A224
		mov	ecx, [esi]
		push	8
		push	ecx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		jmp	short loc_1000A246
; ---------------------------------------------------------------------------

loc_1000A224:				; CODE XREF: sub_1000A1E0+33j
		mov	ecx, [esi+84h]
		lea	edx, ds:8[eax*4]
		push	edx
		mov	edx, [esi]
		lea	eax, ds:4[eax*4]
		push	eax
		push	ecx
		push	edx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_1000A246:				; CODE XREF: sub_1000A1E0+42j
		mov	[esi+84h], eax
		test	eax, eax
		jz	short loc_1000A275
		mov	eax, [esi]
		push	50h
		push	eax
		call	PORT_ArenaZAlloc_Util
		mov	[edi+20h], eax
		mov	ecx, [esi+88h]
		mov	edx, [esi+84h]
		add	esp, 8
		mov	[edx+ecx*4], eax
		cmp	dword ptr [edi+20h], 0
		jnz	short loc_1000A29A

loc_1000A275:				; CODE XREF: sub_1000A1E0+6Ej
		call	PORT_GetError_Util
		mov	[esi+10h], eax
		test	ebx, ebx
		jz	short loc_1000A28D
		mov	eax, [esi]
		push	ebx
		push	eax
		call	PORT_ArenaRelease_Util
		add	esp, 8

loc_1000A28D:				; CODE XREF: sub_1000A1E0+9Fj
		pop	ebx
		mov	dword ptr [esi+0Ch], 1
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A29A:				; CODE XREF: sub_1000A1E0+93j
		inc	dword ptr [esi+88h]
		mov	eax, [esi+88h]
		mov	ecx, [esi+84h]
		mov	dword ptr [ecx+eax*4], 0
		mov	edx, [edi]
		mov	ecx, [edx+4]
		mov	eax, [edi+20h]
		mov	[eax+40h], ecx
		mov	edx, [edi]
		mov	ecx, [edx+14h]
		mov	eax, [edi+20h]
		mov	[eax+44h], ecx
		mov	edx, [edi]
		mov	ecx, [edx+12Ch]
		mov	eax, [edi+20h]
		mov	[eax+3Ch], ecx
		mov	edx, [edi]
		mov	ecx, [edx]
		mov	eax, [edi+20h]
		mov	[eax+18h], ecx
		mov	edx, [edi]
		mov	ecx, [edx+144h]
		mov	eax, [edi+20h]
		mov	[eax+4Ch], ecx
		mov	edx, [esi]
		push	ebx
		push	edx
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A300:				; CODE XREF: sub_1000A1E0+3j
					; sub_1000A1E0+Dj ...
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_1000A1E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A310	proc near		; DATA XREF: .text:1000C5A3o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000A369
		push	edi
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_1000A368
		cmp	dword ptr [edi+0Ch], 0
		jnz	short loc_1000A368
		cmp	dword ptr [esi+24h], 0
		jnz	short loc_1000A368
		mov	eax, [esp+8+arg_8]
		mov	ecx, [esp+8+arg_4]
		mov	edx, [esi+1Ch]
		push	eax
		push	ecx
		push	edx
		call	SEC_ASN1DecoderUpdate_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000A368
		call	PORT_GetError_Util
		mov	[edi+10h], eax
		mov	dword ptr [edi+0Ch], 1
		mov	eax, [esi+1Ch]
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [esi+1Ch], 0

loc_1000A368:				; CODE XREF: sub_1000A310+Ej
					; sub_1000A310+14j ...
		pop	edi

loc_1000A369:				; CODE XREF: sub_1000A310+7j
		pop	esi
		retn
sub_1000A310	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000A370:				; DATA XREF: sub_1000A3E0+3Ao
		push	edi
		mov	edi, [esp+8]
		test	edi, edi
		jz	short loc_1000A3D3
		push	esi
		mov	esi, [edi]
		test	esi, esi
		jz	short loc_1000A3D2
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000A3D2
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_1000A3D2
		mov	edx, [esp+14h]
		test	edx, edx
		jz	short loc_1000A3D2
		mov	ecx, [esp+10h]
		test	ecx, ecx
		jz	short loc_1000A3D2
		push	edx
		push	ecx
		push	eax
		call	SEC_ASN1DecoderUpdate_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000A3D2
		call	PORT_GetError_Util
		mov	[esi+10h], eax
		mov	dword ptr [esi+0Ch], 1
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_1000A3D2
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [edi+8], 0

loc_1000A3D2:				; CODE XREF: .text:1000A37Ej
					; .text:1000A384j ...
		pop	esi

loc_1000A3D3:				; CODE XREF: .text:1000A377j
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A3E0	proc near		; CODE XREF: .text:1000C4ABp
		test	esi, esi
		jz	short loc_1000A42B
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000A42B
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_1000A42B
		push	1
		push	eax
		call	sub_1000C5C0
		add	esp, 8
		mov	[esi+28h], eax
		test	eax, eax
		jz	short loc_1000A42B
		push	eax
		mov	eax, [eax+8]
		push	offset loc_1000C4E0
		push	eax
		call	SEC_ASN1DecoderSetNotifyProc_Util
		mov	ecx, [esi+28h]
		mov	edx, [esi+1Ch]
		push	1
		push	ecx
		push	offset loc_1000A370
		push	edx
		call	SEC_ASN1DecoderSetFilterProc_Util
		add	esp, 1Ch
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000A42B:				; CODE XREF: sub_1000A3E0+2j
					; sub_1000A3E0+8j ...
		or	eax, 0FFFFFFFFh
		retn
sub_1000A3E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A430	proc near		; CODE XREF: .text:1000C4BFp
		test	esi, esi
		jz	short loc_1000A478
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000A478
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_1000A478
		mov	eax, [esi+1Ch]
		push	eax
		call	SEC_ASN1DecoderClearFilterProc_Util
		mov	ecx, [esi+28h]
		mov	edx, [ecx+8]
		push	edx
		call	SEC_ASN1DecoderClearNotifyProc_Util
		mov	eax, [esi+28h]
		mov	ecx, [eax+8]
		push	ecx
		call	SEC_ASN1DecoderFinish_Util
		mov	edx, [esi+28h]
		add	esp, 0Ch
		mov	dword ptr [edx+8], 0
		mov	dword ptr [esi+28h], 0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000A478:				; CODE XREF: sub_1000A430+2j
					; sub_1000A430+8j ...
		or	eax, 0FFFFFFFFh
		retn
sub_1000A430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A480	proc near		; DATA XREF: sub_1000C6F0+4Bo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_1000A4F8
		push	esi
		mov	esi, [edi]
		test	esi, esi
		jz	short loc_1000A4F7
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000A4F7
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_1000A4F7
		mov	ecx, [esp+8+arg_8]
		mov	edx, [esp+8+arg_4]
		push	ecx
		push	edx
		push	eax
		call	SEC_ASN1DecoderUpdate_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000A4F7
		push	0FFFFE00Fh
		call	PORT_SetError_Util
		mov	eax, [esi+8Ch]
		push	0FFFFE00Fh
		push	eax
		mov	dword ptr [esi+10h], 0FFFFE052h
		call	SEC_PKCS7DecoderAbort
		mov	dword ptr [esi+0Ch], 1
		mov	eax, [edi+8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000A4F7
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [edi+8], 0

loc_1000A4F7:				; CODE XREF: sub_1000A480+Ej
					; sub_1000A480+14j ...
		pop	esi

loc_1000A4F8:				; CODE XREF: sub_1000A480+7j
		pop	edi
		retn
sub_1000A480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A500	proc near		; DATA XREF: sub_1000C6F0+6Bo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	eax
		push	ecx
		push	edx
		call	SEC_PKCS7DecoderUpdate
		add	esp, 0Ch
		retn
sub_1000A500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A520	proc near		; DATA XREF: sub_1000C7E0+54o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000A5A2
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000A5A2
		mov	eax, [esi+90h]
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		push	edi
		push	ebx
		push	eax
		call	SEC_ASN1DecoderUpdate_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000A55C
		call	PORT_GetError_Util
		mov	dword ptr [esi+0Ch], 1
		jmp	short loc_1000A57D
; ---------------------------------------------------------------------------

loc_1000A55C:				; CODE XREF: sub_1000A520+2Cj
		mov	eax, [esi+118h]
		test	eax, eax
		jz	short loc_1000A5A0
		mov	ecx, [esi+11Ch]
		push	edi
		push	ebx
		push	ecx
		call	eax
		add	esp, 0Ch
		cmp	eax, edi
		jz	short loc_1000A5A0
		call	PORT_GetError_Util

loc_1000A57D:				; CODE XREF: sub_1000A520+3Aj
		mov	edx, [esi+90h]
		push	edx
		mov	[esi+10h], eax
		mov	dword ptr [esi+0Ch], 1
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [esi+90h], 0

loc_1000A5A0:				; CODE XREF: sub_1000A520+44j
					; sub_1000A520+56j
		pop	edi
		pop	ebx

loc_1000A5A2:				; CODE XREF: sub_1000A520+7j
					; sub_1000A520+Dj
		pop	esi
		retn
sub_1000A520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A5B0	proc near		; DATA XREF: .text:1000C93Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000A603
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000A603
		mov	eax, [esp+4+arg_8]
		mov	ecx, [esp+4+arg_4]
		mov	edx, [esi+94h]
		push	eax
		push	ecx
		push	edx
		call	SEC_PKCS7DecoderUpdate
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000A603
		mov	eax, [esi+94h]
		push	eax
		mov	dword ptr [esi+10h], 0FFFFE052h
		call	SEC_PKCS7DecoderFinish
		add	esp, 4
		mov	dword ptr [esi+94h], 0
		mov	dword ptr [esi+0Ch], 1

loc_1000A603:				; CODE XREF: sub_1000A5B0+7j
					; sub_1000A5B0+Dj ...
		pop	esi
		retn
sub_1000A5B0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000A610:				; DATA XREF: SEC_PKCS12DecoderStart+5Eo
		xor	eax, eax
		push	esi
		mov	esi, [esp+8]
		mov	[esi+140h], eax
		cmp	[esp+0Ch], eax
		jnz	short loc_1000A64A
		push	1000h
		mov	[esi+138h], eax
		mov	dword ptr [esi+13Ch], 1000h
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esi+134h], eax

loc_1000A646:				; CODE XREF: .text:1000A650j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A64A:				; CODE XREF: .text:1000A621j
		cmp	[esi+134h], eax
		jnz	short loc_1000A646
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000A660:				; DATA XREF: SEC_PKCS12DecoderStart+63o
		push	esi
		mov	esi, [esp+8]
		push	edi
		xor	edi, edi
		cmp	esi, edi
		jnz	short loc_1000A672

loc_1000A66C:				; CODE XREF: .text:1000A687j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A672:				; CODE XREF: .text:1000A66Aj
		cmp	dword ptr [esp+10h], 1
		mov	[esi+140h], edi
		jnz	short loc_1000A6A4
		mov	eax, [esi+134h]
		cmp	eax, edi
		jz	short loc_1000A66C
		push	eax
		call	PORT_Free_Util
		add	esp, 4
		mov	[esi+134h], edi
		mov	[esi+13Ch], edi
		mov	[esi+138h], edi

loc_1000A6A4:				; CODE XREF: .text:1000A67Dj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A6B0(int,	void *Dst, size_t Size)
sub_1000A6B0	proc near		; DATA XREF: SEC_PKCS12DecoderStart+68o

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+Dst]
		push	esi
		push	edi
		mov	edi, [esp+0Ch+Size]
		test	ebx, ebx
		jz	short loc_1000A6FE
		test	edi, edi
		jz	short loc_1000A6FE
		mov	esi, [esp+0Ch+arg_0]
		mov	edx, [esi+134h]
		test	edx, edx
		jz	short loc_1000A6FE
		mov	ecx, [esi+140h]
		mov	eax, [esi+138h]
		sub	eax, ecx
		cmp	eax, edi
		jge	short loc_1000A6E5
		mov	edi, eax

loc_1000A6E5:				; CODE XREF: sub_1000A6B0+31j
		push	edi		; Size
		add	ecx, edx
		push	ecx		; Src
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch
		add	[esi+140h], edi
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A6FE:				; CODE XREF: sub_1000A6B0+Dj
					; sub_1000A6B0+11j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1000A6B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A720(int,	void *Src, size_t Size)
sub_1000A720	proc near		; DATA XREF: SEC_PKCS12DecoderStart+70o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+Src]
		test	ebp, ebp
		jz	loc_1000A7C3
		mov	ebx, [esp+8+Size]
		test	ebx, ebx
		jz	loc_1000A7C3
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	eax, [esi+140h]
		lea	ecx, [ebx+eax]
		mov	eax, [esi+138h]
		cmp	ecx, eax
		jle	short loc_1000A75A
		mov	[esi+138h], ecx
		jmp	short loc_1000A762
; ---------------------------------------------------------------------------

loc_1000A75A:				; CODE XREF: sub_1000A720+30j
		add	eax, ebx
		mov	[esi+138h], eax

loc_1000A762:				; CODE XREF: sub_1000A720+38j
		mov	eax, [esi+138h]
		push	edi
		cmp	eax, [esi+13Ch]
		jle	short loc_1000A79F
		mov	ecx, [esi+134h]
		lea	edi, [eax+1000h]
		push	edi
		push	ecx
		call	PORT_Realloc_Util
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000A793
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A793:				; CODE XREF: sub_1000A720+69j
		mov	[esi+134h], eax
		mov	[esi+13Ch], edi

loc_1000A79F:				; CODE XREF: sub_1000A720+4Fj
		mov	edx, [esi+134h]
		add	edx, [esi+140h]
		push	ebx		; Size
		push	ebp		; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch
		add	[esi+140h], ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A7C3:				; CODE XREF: sub_1000A720+8j
					; sub_1000A720+14j
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1000A720	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 118. SEC_PKCS12DecoderSetTargetTokenCAs

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderSetTargetTokenCAs
SEC_PKCS12DecoderSetTargetTokenCAs proc	near ; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_1000A7EB
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_1000A7EB
		mov	ecx, [esp+arg_4]
		mov	[eax+144h], ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000A7EB:				; CODE XREF: SEC_PKCS12DecoderSetTargetTokenCAs+6j
					; SEC_PKCS12DecoderSetTargetTokenCAs+Cj
		or	eax, 0FFFFFFFFh
		retn
SEC_PKCS12DecoderSetTargetTokenCAs endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 120. SEC_PKCS12DecoderUpdate

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderUpdate
SEC_PKCS12DecoderUpdate	proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000A830
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000A830
		mov	eax, [esp+4+arg_8]
		mov	ecx, [esp+4+arg_4]
		mov	edx, [esi+18h]
		push	eax
		push	ecx
		push	edx
		call	SEC_ASN1DecoderUpdate_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000A82C
		mov	dword ptr [esi+10h], 0FFFFE052h
		mov	dword ptr [esi+0Ch], 1
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A82C:				; CODE XREF: SEC_PKCS12DecoderUpdate+27j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A830:				; CODE XREF: SEC_PKCS12DecoderUpdate+7j
					; SEC_PKCS12DecoderUpdate+Dj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
SEC_PKCS12DecoderUpdate	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A850	proc near		; CODE XREF: SEC_PKCS12DecoderVerify+5Fp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 28h
		push	ebp
		xor	ebp, ebp
		xor	eax, eax
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_20], 0FFFFFFFFh
		mov	[esp+2Ch+var_18], ebp
		mov	[esp+2Ch+var_14], eax
		mov	[esp+2Ch+var_10], eax
		cmp	esi, ebp
		jz	loc_1000AABB
		cmp	[esi+0Ch], ebp
		jnz	loc_1000AABB
		push	ebx
		push	480h
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jnz	short loc_1000A89E
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000A89E:				; CODE XREF: sub_1000A850+43j
		cmp	[esi+104h], ebp
		jz	short loc_1000A8B7
		lea	eax, [esi+100h]
		push	eax
		call	DER_GetInteger_Util
		add	esp, 4
		jmp	short loc_1000A8BC
; ---------------------------------------------------------------------------

loc_1000A8B7:				; CODE XREF: sub_1000A850+54j
		mov	eax, 1

loc_1000A8BC:				; CODE XREF: sub_1000A850+65j
		mov	ecx, [esi+14h]
		push	edi
		push	eax
		push	ecx
		lea	edx, [esi+0F4h]
		push	edx
		call	PK11_CreatePBEParams
		mov	[esp+40h+var_28], eax
		lea	eax, [esi+0D0h]
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 10h
		mov	edi, eax
		dec	eax
		jz	short loc_1000A900
		sub	eax, 2
		jz	short loc_1000A8F9
		dec	eax
		jnz	loc_1000AA34
		mov	eax, 80000009h
		jmp	short loc_1000A905
; ---------------------------------------------------------------------------

loc_1000A8F9:				; CODE XREF: sub_1000A850+99j
		mov	eax, 8000000Ah
		jmp	short loc_1000A905
; ---------------------------------------------------------------------------

loc_1000A900:				; CODE XREF: sub_1000A850+94j
		mov	eax, 8000000Bh

loc_1000A905:				; CODE XREF: sub_1000A850+A7j
					; sub_1000A850+AEj
		mov	ecx, [esp+34h+var_28]
		push	0
		push	14h
		push	ecx
		push	eax
		push	0
		call	PK11_KeyGen
		mov	edx, [esp+48h+var_28]
		push	edx
		mov	[esp+4Ch+var_24], eax
		call	PK11_DestroyPBEParams
		mov	eax, [esp+4Ch+var_24]
		add	esp, 18h
		mov	[esp+34h+var_28], ebp
		test	eax, eax
		jz	loc_1000AA34
		lea	ecx, [esp+34h+var_18]
		push	ecx
		push	eax
		push	108h
		push	edi
		call	sub_10007E10
		add	esp, 4
		push	eax
		call	PK11_CreateContextBySymKey
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jz	loc_1000AA34
		push	ebp
		call	PK11_DigestBegin
		add	esp, 4
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000AA34
		mov	eax, [esi+10Ch]
		test	eax, eax
		jz	short loc_1000A990
		mov	edx, [esi+11Ch]
		push	1
		push	edx
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	loc_1000AA34

loc_1000A990:				; CODE XREF: sub_1000A850+128j
					; sub_1000A850+188j
		mov	eax, [esi+11Ch]
		mov	ecx, [esi+114h]
		push	400h
		push	ebx
		push	eax
		call	ecx
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_1000AAA0
		cmp	edi, 400h
		jg	loc_1000AAAC
		test	edi, edi
		jz	short loc_1000A9D2
		push	edi
		push	ebx
		push	ebp
		call	PK11_DigestOp
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000AA34

loc_1000A9D2:				; CODE XREF: sub_1000A850+170j
		cmp	edi, 400h
		jz	short loc_1000A990
		push	400h
		lea	edx, [esp+38h+var_1C]
		push	edx
		push	ebx
		push	ebp
		call	PK11_DigestFinal
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000AA34
		mov	eax, [esp+34h+var_1C]
		lea	ecx, [esi+0E8h]
		push	ecx
		lea	edx, [esp+38h+var_C]
		push	edx
		mov	[esp+3Ch+var_8], ebx
		mov	[esp+3Ch+var_4], eax
		mov	[esp+3Ch+var_20], 0
		call	SECITEM_CompareItem_Util
		add	esp, 8
		test	eax, eax
		jz	short loc_1000AA34
		push	0FFFFE04Fh
		call	PORT_SetError_Util
		mov	[esp+38h+var_20], 0FFFFFFFFh

loc_1000AA31:				; CODE XREF: sub_1000A850+25Aj
					; sub_1000A850+266j
		add	esp, 4

loc_1000AA34:				; CODE XREF: sub_1000A850+9Cj
					; sub_1000A850+E1j ...
		mov	eax, [esi+110h]
		pop	edi
		test	eax, eax
		jz	short loc_1000AA57
		mov	ecx, [esi+11Ch]
		push	1
		push	ecx
		call	eax
		add	esp, 8
		mov	dword ptr [esi+120h], 0

loc_1000AA57:				; CODE XREF: sub_1000A850+1EDj
		test	ebp, ebp
		jz	short loc_1000AA66
		push	1
		push	ebp
		call	PK11_DestroyContext
		add	esp, 8

loc_1000AA66:				; CODE XREF: sub_1000A850+209j
		mov	eax, [esp+30h+var_28]
		test	eax, eax
		jz	short loc_1000AA77
		push	eax
		call	PK11_DestroyPBEParams
		add	esp, 4

loc_1000AA77:				; CODE XREF: sub_1000A850+21Cj
		mov	eax, [esp+30h+var_24]
		test	eax, eax
		jz	short loc_1000AA88
		push	eax
		call	PK11_FreeSymKey
		add	esp, 4

loc_1000AA88:				; CODE XREF: sub_1000A850+22Dj
		push	480h
		push	ebx
		call	PORT_ZFree_Util
		mov	eax, [esp+38h+var_20]
		add	esp, 8
		pop	ebx
		pop	ebp
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000AAA0:				; CODE XREF: sub_1000A850+15Cj
		push	0FFFFE062h
		call	PORT_SetError_Util
		jmp	short loc_1000AA31
; ---------------------------------------------------------------------------

loc_1000AAAC:				; CODE XREF: sub_1000A850+168j
		push	0FFFFE004h
		call	PORT_SetError_Util
		jmp	loc_1000AA31
; ---------------------------------------------------------------------------

loc_1000AABB:				; CODE XREF: sub_1000A850+22j
					; sub_1000A850+2Bj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 28h
		retn
sub_1000A850	endp

; Exported entry 122. SEC_PKCS12DecoderVerify

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderVerify
SEC_PKCS12DecoderVerify	proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1000AAEB
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AAEB:				; CODE XREF: SEC_PKCS12DecoderVerify+7j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000AB5E
		mov	eax, [esi+18h]
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [esi+18h], 0
		test	eax, eax
		jnz	short loc_1000AB61
		cmp	[esi+80h], eax
		jz	short loc_1000AB36
		mov	eax, [esi]
		lea	ecx, [esi+78h]
		push	ecx
		push	offset dword_100147E8
		lea	edx, [esi+0CCh]
		push	edx
		push	eax
		call	SEC_ASN1DecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000AB61
		call	sub_1000A850
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AB36:				; CODE XREF: SEC_PKCS12DecoderVerify+3Ej
		mov	ecx, [esi+98h]
		push	0
		push	4
		push	ecx
		call	SEC_PKCS7VerifySignature
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000AB51
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AB51:				; CODE XREF: SEC_PKCS12DecoderVerify+7Bj
		push	0FFFFE04Fh
		call	PORT_SetError_Util
		add	esp, 4

loc_1000AB5E:				; CODE XREF: SEC_PKCS12DecoderVerify+1Fj
		or	eax, 0FFFFFFFFh

loc_1000AB61:				; CODE XREF: SEC_PKCS12DecoderVerify+36j
					; SEC_PKCS12DecoderVerify+5Dj
		pop	esi
		retn
SEC_PKCS12DecoderVerify	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 113. SEC_PKCS12DecoderFinish

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderFinish
SEC_PKCS12DecoderFinish	proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	ebp, ebp
		cmp	edi, ebp
		jnz	short loc_1000AB8B
		pop	edi
		pop	ebp
		mov	[esp+arg_0], 0FFFFE005h
		jmp	PORT_SetError_Util
; ---------------------------------------------------------------------------

loc_1000AB8B:				; CODE XREF: SEC_PKCS12DecoderFinish+Aj
		mov	eax, [edi+18h]
		cmp	eax, ebp
		jz	short loc_1000AB9E
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	[edi+18h], ebp

loc_1000AB9E:				; CODE XREF: SEC_PKCS12DecoderFinish+20j
		mov	eax, [edi+90h]
		cmp	eax, ebp
		jz	short loc_1000ABB7
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	[edi+90h], ebp

loc_1000ABB7:				; CODE XREF: SEC_PKCS12DecoderFinish+36j
		xor	eax, eax
		mov	[esp+8+arg_0], eax
		cmp	[edi+0C4h], ebp
		jbe	short loc_1000AC24
		push	ebx
		push	esi
		jmp	short loc_1000ABD0
; ---------------------------------------------------------------------------
		align 10h

loc_1000ABD0:				; CODE XREF: SEC_PKCS12DecoderFinish+57j
					; SEC_PKCS12DecoderFinish+B0j
		mov	ecx, [edi+0C8h]
		mov	ebx, [ecx+eax*4]
		cmp	ebx, ebp
		jz	short loc_1000AC11
		mov	esi, [ebx+28h]
		cmp	esi, ebp
		jz	short loc_1000ABFE

loc_1000ABE4:				; CODE XREF: SEC_PKCS12DecoderFinish+8Cj
		mov	eax, [esi+8]
		cmp	eax, ebp
		jz	short loc_1000ABF7
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	[esi+8], ebp

loc_1000ABF7:				; CODE XREF: SEC_PKCS12DecoderFinish+79j
		mov	esi, [esi+28h]
		cmp	esi, ebp
		jnz	short loc_1000ABE4

loc_1000ABFE:				; CODE XREF: SEC_PKCS12DecoderFinish+72j
		mov	eax, [ebx+8]
		cmp	eax, ebp
		jz	short loc_1000AC11
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	[ebx+8], ebp

loc_1000AC11:				; CODE XREF: SEC_PKCS12DecoderFinish+6Bj
					; SEC_PKCS12DecoderFinish+93j
		mov	eax, [esp+10h+arg_0]
		inc	eax
		mov	[esp+10h+arg_0], eax
		cmp	eax, [edi+0C4h]
		jb	short loc_1000ABD0
		pop	esi
		pop	ebx

loc_1000AC24:				; CODE XREF: SEC_PKCS12DecoderFinish+53j
		mov	eax, [edi+8Ch]
		cmp	eax, ebp
		jz	short loc_1000AC4C
		cmp	eax, [edi+94h]
		jz	short loc_1000AC4C
		push	eax
		call	SEC_PKCS7DecoderFinish
		add	esp, 4
		cmp	eax, ebp
		jz	short loc_1000AC4C
		push	eax
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4

loc_1000AC4C:				; CODE XREF: SEC_PKCS12DecoderFinish+BCj
					; SEC_PKCS12DecoderFinish+C4j ...
		mov	eax, [edi+94h]
		mov	[edi+8Ch], ebp
		cmp	eax, ebp
		jz	short loc_1000AC78
		push	eax
		call	SEC_PKCS7DecoderFinish
		add	esp, 4
		cmp	eax, ebp
		jz	short loc_1000AC72
		push	eax
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4

loc_1000AC72:				; CODE XREF: SEC_PKCS12DecoderFinish+F7j
		mov	[edi+94h], ebp

loc_1000AC78:				; CODE XREF: SEC_PKCS12DecoderFinish+EAj
		mov	eax, [edi+98h]
		cmp	eax, ebp
		jz	short loc_1000AC91
		push	eax
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4
		mov	[edi+98h], ebp

loc_1000AC91:				; CODE XREF: SEC_PKCS12DecoderFinish+110j
		cmp	[edi+154h], ebp
		jz	short loc_1000ACAE
		mov	eax, [edi+150h]
		cmp	eax, ebp
		jz	short loc_1000ACAE
		push	1
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1000ACAE:				; CODE XREF: SEC_PKCS12DecoderFinish+127j
					; SEC_PKCS12DecoderFinish+131j
		mov	eax, [edi+15Ch]
		cmp	eax, ebp
		jz	short loc_1000ACC3
		push	1
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1000ACC3:				; CODE XREF: SEC_PKCS12DecoderFinish+146j
		mov	eax, [edi+4]
		cmp	eax, ebp
		jz	short loc_1000ACD6
		push	eax
		call	PK11_FreeSlot
		add	esp, 4
		mov	[edi+4], ebp

loc_1000ACD6:				; CODE XREF: SEC_PKCS12DecoderFinish+158j
		cmp	[edi+120h], ebp
		jz	short loc_1000ACFC
		mov	eax, [edi+110h]
		cmp	eax, ebp
		jz	short loc_1000ACFC
		mov	edx, [edi+11Ch]
		push	1
		push	edx
		call	eax
		add	esp, 8
		mov	[edi+120h], ebp

loc_1000ACFC:				; CODE XREF: SEC_PKCS12DecoderFinish+16Cj
					; SEC_PKCS12DecoderFinish+176j
		mov	edi, [edi]
		cmp	edi, ebp
		jz	short loc_1000AD0D
		push	1
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 8

loc_1000AD0D:				; CODE XREF: SEC_PKCS12DecoderFinish+190j
		pop	edi
		pop	ebp
		retn
SEC_PKCS12DecoderFinish	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000AD10	proc near		; CODE XREF: sub_1000B1D0+8Cp

arg_0		= dword	ptr  4

		push	edi
		xor	edi, edi
		test	esi, esi
		jz	loc_1000AE06
		cmp	[esp+4+arg_0], edi
		jz	loc_1000AE06
		push	ebp
		push	eax
		call	SECOID_FindOIDByTag_Util
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	loc_1000ADC3
		mov	ecx, [esi+10h]
		test	ecx, ecx
		jnz	short loc_1000AD50
		mov	ecx, [esi+18h]
		push	8
		push	ecx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		jmp	short loc_1000AD7C
; ---------------------------------------------------------------------------

loc_1000AD50:				; CODE XREF: sub_1000AD10+2Ej
		cmp	[ecx], edi
		jz	short loc_1000AD5F
		mov	eax, ecx

loc_1000AD56:				; CODE XREF: sub_1000AD10+4Dj
		add	eax, 4
		inc	edi
		cmp	dword ptr [eax], 0
		jnz	short loc_1000AD56

loc_1000AD5F:				; CODE XREF: sub_1000AD10+42j
		lea	edx, ds:8[edi*4]
		push	edx
		lea	eax, ds:4[edi*4]
		push	eax
		push	ecx
		mov	ecx, [esi+18h]
		push	ecx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_1000AD7C:				; CODE XREF: sub_1000AD10+3Ej
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_1000ADC3
		mov	edx, [esi+18h]
		push	10h
		push	edx
		call	PORT_ArenaZAlloc_Util
		mov	ecx, [esi+10h]
		add	esp, 8
		mov	[ecx+edi*4], eax
		cmp	dword ptr [esi+10h], 0
		jz	short loc_1000ADC3
		mov	edx, [esi+18h]
		push	8
		push	edx
		call	PORT_ArenaZAlloc_Util
		mov	ecx, [esi+10h]
		mov	edx, [ecx+edi*4]
		mov	[edx+0Ch], eax
		mov	eax, [esi+10h]
		mov	ecx, [eax+edi*4]
		lea	eax, [eax+edi*4]
		add	esp, 8
		cmp	dword ptr [ecx+0Ch], 0
		jnz	short loc_1000ADC9

loc_1000ADC3:				; CODE XREF: sub_1000AD10+23j
					; sub_1000AD10+71j ...
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000ADC9:				; CODE XREF: sub_1000AD10+B1j
		mov	dword ptr [eax+4], 0
		mov	edx, [esi+10h]
		mov	eax, [edx+edi*4]
		mov	ecx, [eax+0Ch]
		mov	edx, [esp+8+arg_0]
		mov	[ecx], edx
		mov	eax, [esi+10h]
		mov	ecx, [eax+edi*4]
		mov	edx, [ecx+0Ch]
		mov	dword ptr [edx+4], 0
		mov	eax, [esi+10h]
		mov	ecx, [eax+edi*4]
		mov	edx, [esi+18h]
		push	ebp
		push	ecx
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		pop	ebp
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000AE06:				; CODE XREF: sub_1000AD10+5j
					; sub_1000AD10+Fj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
sub_1000AD10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AE20	proc near		; CODE XREF: sub_1000AF40+1Ep
					; sub_1000B1D0:loc_1000B243p ...
		mov	eax, [edi+10h]
		test	eax, eax
		jnz	short loc_1000AE37
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000AE37:				; CODE XREF: sub_1000AE20+5j
		push	esi
		xor	esi, esi
		cmp	[eax], esi
		jz	short loc_1000AE61
		xor	ecx, ecx

loc_1000AE40:				; CODE XREF: sub_1000AE20+3Fj
		mov	eax, [ecx+eax]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, ebx
		jz	short loc_1000AE65
		mov	eax, [edi+10h]
		inc	esi
		lea	ecx, ds:0[esi*4]
		cmp	dword ptr [ecx+eax], 0
		jnz	short loc_1000AE40

loc_1000AE61:				; CODE XREF: sub_1000AE20+1Cj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AE65:				; CODE XREF: sub_1000AE20+2Ej
		mov	ecx, [edi+10h]
		mov	edx, [ecx+esi*4]
		mov	eax, [edx+0Ch]
		mov	eax, [eax]
		pop	esi
		retn
sub_1000AE20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AE80	proc near		; CODE XREF: sub_1000AF40+8Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		mov	ebx, [eax+4]
		push	ebp
		push	3Ah		; Val
		push	ebx		; Str
		call	ds:strchr
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	loc_1000AF2F
		push	esi
		mov	esi, ebp
		sub	esi, ebx
		lea	ecx, [esi+1]
		push	edi
		push	ecx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_1000AF2D
		push	esi		; Size
		push	ebx		; Src
		push	edi		; Dst
		call	memcpy
		mov	edx, [esp+1Ch+arg_0]
		mov	byte ptr [edi+esi], 0
		push	edx
		mov	esi, edi
		call	PK11_GetTokenName
		add	esp, 10h

loc_1000AED2:				; CODE XREF: sub_1000AE80+6Cj
		mov	cl, [eax]
		cmp	cl, [esi]
		jnz	short loc_1000AEF2
		test	cl, cl
		jz	short loc_1000AEEE
		mov	cl, [eax+1]
		cmp	cl, [esi+1]
		jnz	short loc_1000AEF2
		add	eax, 2
		add	esi, 2
		test	cl, cl
		jnz	short loc_1000AED2

loc_1000AEEE:				; CODE XREF: sub_1000AE80+5Aj
		xor	eax, eax
		jmp	short loc_1000AEF7
; ---------------------------------------------------------------------------

loc_1000AEF2:				; CODE XREF: sub_1000AE80+56j
					; sub_1000AE80+62j
		sbb	eax, eax
		sbb	eax, 0FFFFFFFFh

loc_1000AEF7:				; CODE XREF: sub_1000AE80+70j
		test	eax, eax
		jnz	short loc_1000AF24
		lea	edx, [ebp+1]
		mov	eax, edx
		lea	esi, [eax+1]

loc_1000AF03:				; CODE XREF: sub_1000AE80+88j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_1000AF03
		sub	eax, esi
		mov	esi, eax
		lea	eax, [esi+1]
		push	eax		; Size
		push	edx		; Src
		push	ebx		; Dst
		call	ds:memmove
		mov	ecx, [esp+1Ch+arg_4]
		add	esp, 0Ch
		mov	[ecx+8], esi

loc_1000AF24:				; CODE XREF: sub_1000AE80+79j
		push	edi
		call	PORT_Free_Util
		add	esp, 4

loc_1000AF2D:				; CODE XREF: sub_1000AE80+35j
		pop	edi
		pop	esi

loc_1000AF2F:				; CODE XREF: sub_1000AE80+19j
		pop	ebp
		pop	ebx
		retn
sub_1000AE80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AF40	proc near		; CODE XREF: sub_1000B2B0+19p
					; sub_1000B2B0+2Ap ...
		push	edi
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1000AF58
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000AF58:				; CODE XREF: sub_1000AF40+5j
		push	ebx
		mov	ebx, 0ABh
		call	sub_1000AE20
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_1000AFDB
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_1000AFDB
		cmp	dword ptr [ebx+8], 2
		jb	short loc_1000AFDB
		cmp	byte ptr [eax],	0
		jnz	short loc_1000AF81
		cmp	byte ptr [eax+1], 0
		jz	short loc_1000AFDB

loc_1000AF81:				; CODE XREF: sub_1000AF40+39j
		push	esi
		push	0Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1000AFB3
		push	0
		push	0
		push	0
		push	ebx
		push	esi
		push	0
		call	sub_10008160
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1000AFC8
		push	1
		push	esi
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_1000AFB3:				; CODE XREF: sub_1000AF40+50j
		mov	dword ptr [edi+20h], 1
		call	PORT_GetError_Util
		pop	esi
		mov	[edi+38h], eax
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000AFC8:				; CODE XREF: sub_1000AF40+66j
		mov	eax, [edi+40h]
		push	esi
		push	eax
		call	sub_1000AE80
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000AFDB:				; CODE XREF: sub_1000AF40+27j
					; sub_1000AF40+2Ej ...
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
sub_1000AF40	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000AFE0	proc near		; CODE XREF: sub_1000B2B0+36p
					; sub_1000B310+11p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	edi
		push	0ABh
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		mov	edi, eax
		mov	[esp+8+var_4], edi
		test	esi, esi
		jz	loc_1000B1BC
		mov	ecx, [esi+18h]
		test	ecx, ecx
		jz	loc_1000B1BC
		cmp	[esp+8+arg_0], 0
		jz	loc_1000B1BC
		mov	eax, [esi+10h]
		push	ebp
		test	eax, eax
		jnz	short loc_1000B073
		test	edi, edi
		jz	loc_1000B1A0
		push	8
		push	ecx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_1000B1A0
		mov	eax, [esi+18h]
		push	10h
		push	eax
		call	PORT_ArenaZAlloc_Util
		mov	ecx, [esi+10h]
		mov	[ecx], eax
		mov	eax, [esi+10h]
		add	esp, 8
		cmp	dword ptr [eax], 0
		jz	loc_1000B1A0
		mov	dword ptr [eax+4], 0
		mov	edx, [esi+10h]
		mov	eax, [esp+0Ch+var_4]
		mov	edi, [edx]
		mov	ecx, [esi+18h]
		push	eax
		push	edi
		push	ecx
		jmp	loc_1000B124
; ---------------------------------------------------------------------------

loc_1000B073:				; CODE XREF: sub_1000AFE0+39j
		xor	ebp, ebp
		cmp	[eax], ebp
		jz	short loc_1000B0B7
		xor	eax, eax
		jmp	short loc_1000B080
; ---------------------------------------------------------------------------
		align 10h

loc_1000B080:				; CODE XREF: sub_1000AFE0+9Bj
					; sub_1000AFE0+C5j
		mov	edx, [esi+10h]
		mov	eax, [edx+eax]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0ABh
		jz	short loc_1000B0A9
		mov	ecx, [esi+10h]
		inc	ebp
		lea	eax, ds:0[ebp*4]
		cmp	dword ptr [eax+ecx], 0
		jnz	short loc_1000B080
		jmp	short loc_1000B0B7
; ---------------------------------------------------------------------------

loc_1000B0A9:				; CODE XREF: sub_1000AFE0+B4j
		mov	edx, [esi+10h]
		mov	edi, [edx+ebp*4]
		test	edi, edi
		jnz	short loc_1000B130
		mov	edi, [esp+0Ch+var_4]

loc_1000B0B7:				; CODE XREF: sub_1000AFE0+97j
					; sub_1000AFE0+C7j
		test	edi, edi
		jz	loc_1000B1A0
		mov	edx, [esi+10h]
		lea	eax, ds:8[ebp*4]
		push	eax
		mov	eax, [esi+18h]
		lea	ecx, ds:4[ebp*4]
		push	ecx
		push	edx
		push	eax
		call	PORT_ArenaGrow_Util
		add	esp, 10h
		mov	[esi+10h], eax
		test	eax, eax
		jz	loc_1000B1A0
		mov	ecx, [esi+18h]
		push	10h
		push	ecx
		call	PORT_ArenaZAlloc_Util
		mov	edx, [esi+10h]
		mov	[edx+ebp*4], eax
		mov	eax, [esi+10h]
		lea	eax, [eax+ebp*4]
		add	esp, 8
		cmp	dword ptr [eax], 0
		jz	loc_1000B1A0
		mov	edx, [esp+0Ch+var_4]
		mov	dword ptr [eax+4], 0
		mov	ecx, [esi+10h]
		mov	edi, [ecx+ebp*4]
		mov	eax, [esi+18h]
		push	edx
		push	edi
		push	eax

loc_1000B124:				; CODE XREF: sub_1000AFE0+8Ej
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000B1A0

loc_1000B130:				; CODE XREF: sub_1000AFE0+D1j
		cmp	dword ptr [edi+0Ch], 0
		jnz	short loc_1000B16D
		mov	ecx, [esi+18h]
		push	8
		push	ecx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[edi+0Ch], eax
		test	eax, eax
		jz	short loc_1000B1A0
		mov	edx, [esi+18h]
		push	0Ch
		push	edx
		call	PORT_ArenaZAlloc_Util
		mov	ecx, [edi+0Ch]
		mov	[ecx], eax
		mov	eax, [edi+0Ch]
		add	esp, 8
		cmp	dword ptr [eax], 0
		jz	short loc_1000B1A0
		mov	dword ptr [eax+4], 0

loc_1000B16D:				; CODE XREF: sub_1000AFE0+154j
		mov	ebp, [esp+0Ch+arg_0]
		mov	eax, [ebp+4]
		lea	edx, [eax+1]

loc_1000B177:				; CODE XREF: sub_1000AFE0+19Cj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_1000B177
		push	1
		sub	eax, edx
		push	0
		mov	[ebp+8], eax
		mov	edx, [edi+0Ch]
		mov	eax, [edx]
		mov	ecx, [esi+18h]
		push	0
		push	ebp
		push	eax
		push	ecx
		call	sub_10008160
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1000B1B6

loc_1000B1A0:				; CODE XREF: sub_1000AFE0+3Dj
					; sub_1000AFE0+53j ...
		mov	dword ptr [esi+20h], 1
		call	PORT_GetError_Util
		pop	ebp
		mov	[esi+38h], eax
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000B1B6:				; CODE XREF: sub_1000AFE0+1BEj
		pop	ebp
		xor	eax, eax
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000B1BC:				; CODE XREF: sub_1000AFE0+17j
					; sub_1000AFE0+22j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ecx
		retn
sub_1000AFE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B1D0	proc near		; CODE XREF: sub_1000BD70+7Dp

var_4		= dword	ptr -4

		push	ecx
		push	esi
		push	edi
		xor	esi, esi
		mov	edi, eax
		mov	[esp+0Ch+var_4], esi
		cmp	edi, esi
		jnz	short loc_1000B1F3
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000B1F3:				; CODE XREF: sub_1000B1D0+Dj
		push	edi
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A2h
		jz	short loc_1000B209
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000B209:				; CODE XREF: sub_1000B1D0+31j
		push	ebp
		mov	ebp, [edi+0Ch]
		cmp	ebp, esi
		jz	loc_1000B2A1
		mov	eax, [ebp+34h]
		cmp	eax, esi
		jz	loc_1000B2A1
		push	ebx
		cmp	[eax], esi
		jz	short loc_1000B281

loc_1000B225:				; CODE XREF: sub_1000B1D0+AFj
		mov	eax, [esi+eax]
		push	eax
		call	SECOID_FindOIDTag_Util
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, 0ACh
		jz	short loc_1000B243
		cmp	ebx, 0ABh
		jnz	short loc_1000B268

loc_1000B243:				; CODE XREF: sub_1000B1D0+69j
		call	sub_1000AE20
		test	eax, eax
		jnz	short loc_1000B268
		mov	ecx, [ebp+34h]
		mov	edx, [ecx+esi]
		mov	eax, [edx+0Ch]
		mov	ecx, [eax]
		push	ecx
		mov	eax, ebx
		mov	esi, edi
		call	sub_1000AD10
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000B289

loc_1000B268:				; CODE XREF: sub_1000B1D0+71j
					; sub_1000B1D0+7Aj
		mov	eax, [esp+14h+var_4]
		inc	eax
		lea	esi, ds:0[eax*4]
		mov	[esp+14h+var_4], eax
		mov	eax, [ebp+34h]
		cmp	dword ptr [esi+eax], 0
		jnz	short loc_1000B225

loc_1000B281:				; CODE XREF: sub_1000B1D0+53j
		pop	ebx
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000B289:				; CODE XREF: sub_1000B1D0+96j
		mov	dword ptr [edi+20h], 1
		call	PORT_GetError_Util
		pop	ebx
		pop	ebp
		mov	[edi+38h], eax
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000B2A1:				; CODE XREF: sub_1000B1D0+3Fj
					; sub_1000B1D0+4Aj
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
sub_1000B1D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B2B0	proc near		; CODE XREF: sub_1000B6D0+69p
					; sub_1000CC50+9Cp
		push	esi
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1000B2C8
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000B2C8:				; CODE XREF: sub_1000B2B0+5j
		push	edi
		call	sub_1000AF40
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1000B304
		test	ebx, ebx
		jz	short loc_1000B302
		mov	eax, ebx
		call	sub_1000AF40
		mov	edi, eax
		test	edi, edi
		jz	short loc_1000B302
		push	edi
		call	sub_1000AFE0
		add	esp, 4
		test	eax, eax
		jz	short loc_1000B302
		push	1
		push	edi
		call	SECITEM_ZfreeItem_Util
		add	esp, 8
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000B302:				; CODE XREF: sub_1000B2B0+26j
					; sub_1000B2B0+33j ...
		mov	eax, edi

loc_1000B304:				; CODE XREF: sub_1000B2B0+22j
		pop	edi
		pop	esi
		retn
sub_1000B2B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B310	proc near		; CODE XREF: sub_1000B6D0+A4p
					; sub_1000B6D0+111p

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_1000B358
		test	ebx, ebx
		jz	short loc_1000B358
		push	esi
		push	edi
		mov	esi, ebx
		call	sub_1000AFE0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000B34D
		test	ebp, ebp
		jz	short loc_1000B353
		push	edi
		mov	esi, ebp
		call	sub_1000AFE0
		add	esp, 4
		test	eax, eax
		jz	short loc_1000B353
		mov	dword ptr [ebx+20h], 1
		mov	eax, [ebp+38h]
		mov	[ebx+38h], eax

loc_1000B34D:				; CODE XREF: sub_1000B310+1Bj
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000B353:				; CODE XREF: sub_1000B310+1Fj
					; sub_1000B310+2Ej
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000B358:				; CODE XREF: sub_1000B310+7j
					; sub_1000B310+Bj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
sub_1000B310	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B370	proc near		; CODE XREF: SEC_PKCS12DecoderGetCerts+49p
					; SEC_PKCS12DecoderIterateNext:loc_1000C2C2p
		test	esi, esi
		jnz	short loc_1000B384
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000B381:				; CODE XREF: sub_1000B370+22j
					; sub_1000B370+35j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000B384:				; CODE XREF: sub_1000B370+2j
		push	esi
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A4h
		jnz	short loc_1000B381
		mov	eax, [esi+0Ch]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A8h
		jnz	short loc_1000B381
		mov	ecx, [esi+0Ch]
		add	ecx, 0Ch
		push	ecx
		call	SECITEM_DupItem_Util
		add	esp, 4
		retn
sub_1000B370	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000B3C0:				; DATA XREF: sub_1000B520+D4o
		mov	eax, [esp+4]
		sub	esp, 0Ch
		push	esi
		test	eax, eax
		jz	loc_1000B507
		mov	esi, [esp+18h]
		test	esi, esi
		jz	loc_1000B507
		cmp	dword ptr [esi+0Ch], 0
		jnz	loc_1000B507
		cmp	dword ptr [eax+154h], 0
		jnz	short loc_1000B3F6
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000B3F6:				; CODE XREF: .text:1000B3EDj
		mov	eax, [eax+154h]
		mov	[esp+8], eax
		lea	edx, [eax+1]

loc_1000B403:				; CODE XREF: .text:1000B408j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_1000B403
		sub	eax, edx
		inc	eax
		mov	[esp+0Ch], eax
		mov	eax, [esi+4]
		push	edi
		test	eax, eax
		jz	short loc_1000B464
		cmp	dword ptr [esi+8], 0
		jnz	short loc_1000B43C
		push	0FFFFE005h
		mov	dword ptr [esi+0Ch], 0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000B43C:				; CODE XREF: .text:1000B41Dj
		xor	edi, edi
		test	eax, eax
		jz	short loc_1000B464

loc_1000B442:				; CODE XREF: .text:1000B462j
		mov	ecx, [esi+8]
		mov	edx, [ecx+edi*4]
		lea	eax, [esp+8]
		push	eax
		push	edx
		call	SECITEM_CompareItem_Util
		add	esp, 8
		test	eax, eax
		jz	loc_1000B4FF
		inc	edi
		cmp	edi, [esi+4]
		jb	short loc_1000B442

loc_1000B464:				; CODE XREF: .text:1000B417j
					; .text:1000B440j
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_1000B47A
		mov	eax, [esi]
		push	8
		push	eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		jmp	short loc_1000B499
; ---------------------------------------------------------------------------

loc_1000B47A:				; CODE XREF: .text:1000B469j
		lea	ecx, ds:8[eax*4]
		push	ecx
		mov	ecx, [esi]
		lea	edx, ds:4[eax*4]
		mov	eax, [esi+8]
		push	edx
		push	eax
		push	ecx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_1000B499:				; CODE XREF: .text:1000B478j
		mov	[esi+8], eax
		test	eax, eax
		jnz	short loc_1000B4B0
		pop	edi
		mov	dword ptr [esi+0Ch], 0FFFFE013h
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000B4B0:				; CODE XREF: .text:1000B49Ej
		mov	edx, [esi]
		push	0Ch
		push	edx
		call	PORT_ArenaZAlloc_Util
		mov	ecx, [esi+4]
		mov	edx, [esi+8]
		mov	[edx+ecx*4], eax
		mov	eax, [esi+4]
		mov	ecx, [esi+8]
		lea	eax, [ecx+eax*4]
		add	esp, 8
		cmp	dword ptr [eax], 0
		jz	short loc_1000B4EB
		mov	eax, [eax]
		mov	ecx, [esi]
		lea	edx, [esp+8]
		push	edx
		push	eax
		push	ecx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000B4FC

loc_1000B4EB:				; CODE XREF: .text:1000B4D2j
		call	PORT_GetError_Util
		mov	[esi+0Ch], eax
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000B4FC:				; CODE XREF: .text:1000B4E9j
		inc	dword ptr [esi+4]

loc_1000B4FF:				; CODE XREF: .text:1000B458j
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000B507:				; CODE XREF: .text:1000B3CAj
					; .text:1000B3D6j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B520	proc near		; CODE XREF: sub_1000B6D0+72p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 8
		test	edi, edi
		jnz	short loc_1000B53A
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000B53A:				; CODE XREF: sub_1000B520+5j
		push	ebx
		push	edi
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A4h
		jnz	short loc_1000B577
		mov	eax, [edi+0Ch]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A8h
		jnz	short loc_1000B577
		mov	ecx, [edi+0Ch]
		add	ecx, 0Ch
		push	ecx
		call	SECITEM_DupItem_Util
		mov	ebx, eax
		add	esp, 4
		mov	[esp+0Ch+var_4], ebx
		test	ebx, ebx
		jnz	short loc_1000B57E

loc_1000B577:				; CODE XREF: sub_1000B520+29j
					; sub_1000B520+3Cj
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000B57E:				; CODE XREF: sub_1000B520+55j
		push	esi
		push	0
		push	0
		push	ebx
		call	__CERT_DecodeDERCertificate
		add	esp, 0Ch
		mov	[esp+10h+var_8], eax
		test	eax, eax
		jnz	short loc_1000B5A9
		push	1
		push	ebx
		xor	esi, esi
		call	SECITEM_FreeItem_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000B5A9:				; CODE XREF: sub_1000B520+72j
		push	400h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_1000B5C0
		xor	esi, esi
		jmp	short loc_1000B62C
; ---------------------------------------------------------------------------

loc_1000B5C0:				; CODE XREF: sub_1000B520+9Aj
		push	10h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1000B5D5

loc_1000B5D1:				; CODE XREF: sub_1000B520+E5j
					; sub_1000B520+EAj ...
		xor	esi, esi
		jmp	short loc_1000B621
; ---------------------------------------------------------------------------

loc_1000B5D5:				; CODE XREF: sub_1000B520+AFj
		mov	eax, [esp+10h+var_8]
		push	esi
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 0
		mov	[esi], ebx
		mov	edx, [edi+40h]
		push	offset loc_1000B3C0
		push	edx
		push	eax
		call	PK11_TraverseCertsForSubjectInSlot
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000B5D1
		cmp	[esi+0Ch], eax
		jnz	short loc_1000B5D1
		cmp	[esi+4], eax
		jz	short loc_1000B5D1
		mov	ecx, [esi+8]
		mov	edx, [ecx]
		push	edx
		call	SECITEM_DupItem_Util
		add	esp, 4
		mov	esi, eax

loc_1000B621:				; CODE XREF: sub_1000B520+B3j
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8

loc_1000B62C:				; CODE XREF: sub_1000B520+9Ej
		mov	eax, [esp+10h+var_8]
		push	eax
		call	CERT_DestroyCertificate
		mov	ebx, [esp+14h+var_4]
		add	esp, 4
		push	1
		push	ebx
		call	SECITEM_FreeItem_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
sub_1000B520	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000B650	proc near		; DATA XREF: sub_1000B680+14o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		jz	short loc_1000B664
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_1000B664
		inc	dword ptr [eax]
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000B664:				; CODE XREF: sub_1000B650+5j
					; sub_1000B650+Dj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
sub_1000B650	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B680	proc near		; CODE XREF: sub_1000B6D0+C4p

var_4		= dword	ptr -4

		push	ecx
		mov	[esp+4+var_4], 0
		test	ecx, ecx
		jz	short loc_1000B6AD
		test	eax, eax
		jz	short loc_1000B6AD
		lea	edx, [esp+4+var_4]
		push	edx
		push	offset sub_1000B650
		push	eax
		push	ecx
		call	PK11_TraverseCertsForNicknameInSlot
		xor	eax, eax
		add	esp, 10h
		cmp	[esp+4+var_4], eax
		setnz	al
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000B6AD:				; CODE XREF: sub_1000B680+Aj
					; sub_1000B680+Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		mov	eax, 1
		pop	ecx
		retn
sub_1000B680	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B6D0	proc near		; CODE XREF: sub_1000B840+98p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		mov	[esp+8+arg_0], 0
		test	ebp, ebp
		jz	short loc_1000B6FD
		cmp	dword ptr [ebp+2Ch], 0
		jz	short loc_1000B6FD
		cmp	[esp+8+arg_8], 0
		jnz	short loc_1000B70D
		mov	dword ptr [ebp+20h], 1
		mov	dword ptr [ebp+38h], 0FFFFE005h

loc_1000B6FD:				; CODE XREF: sub_1000B6D0+10j
					; sub_1000B6D0+16j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000B70D:				; CODE XREF: sub_1000B6D0+1Dj
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jnz	short loc_1000B735
		push	0FFFFE005h
		mov	dword ptr [ebp+20h], 1
		mov	dword ptr [ebp+38h], 0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000B735:				; CODE XREF: sub_1000B6D0+44j
		push	esi
		push	edi
		mov	eax, ebp
		call	sub_1000B2B0
		mov	edi, ebp
		mov	esi, eax
		call	sub_1000B520
		mov	ebx, eax
		mov	[esp+14h+var_4], ebx
		test	esi, esi
		jz	short loc_1000B767
		test	ebx, ebx
		jz	short loc_1000B783
		push	ebx
		push	esi
		call	SECITEM_CompareItem_Util
		add	esp, 8
		test	eax, eax
		jz	loc_1000B80E

loc_1000B767:				; CODE XREF: sub_1000B6D0+7Fj
		test	ebx, ebx
		jz	short loc_1000B783
		mov	eax, [esp+14h+arg_4]
		mov	edi, ebx
		push	eax
		mov	ebx, ebp
		call	sub_1000B310
		add	esp, 4
		mov	ebx, edi
		jmp	loc_1000B80E
; ---------------------------------------------------------------------------

loc_1000B783:				; CODE XREF: sub_1000B6D0+83j
					; sub_1000B6D0+99j
		xor	edi, edi

loc_1000B785:				; CODE XREF: sub_1000B6D0+102j
		test	esi, esi
		jz	short loc_1000B79D
		cmp	dword ptr [esi+4], 0
		jz	short loc_1000B79D
		mov	eax, [ebp+40h]
		mov	ecx, esi
		call	sub_1000B680
		test	eax, eax
		jz	short loc_1000B7D4

loc_1000B79D:				; CODE XREF: sub_1000B6D0+B7j
					; sub_1000B6D0+BDj
		mov	ecx, [esp+14h+arg_C]
		push	ecx
		lea	edx, [esp+18h+arg_0]
		push	edx
		push	esi
		call	[esp+20h+arg_8]
		add	esp, 0Ch
		cmp	[esp+14h+arg_0], 0
		mov	edi, eax
		jnz	short loc_1000B7EF
		test	edi, edi
		jz	short loc_1000B7FF
		test	esi, esi
		jz	short loc_1000B7CB
		push	1
		push	esi
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_1000B7CB:				; CODE XREF: sub_1000B6D0+EEj
		mov	esi, edi
		mov	edi, 1
		jmp	short loc_1000B785
; ---------------------------------------------------------------------------

loc_1000B7D4:				; CODE XREF: sub_1000B6D0+CBj
		test	edi, edi
		jz	short loc_1000B80E
		mov	eax, [esp+14h+arg_4]
		push	eax
		mov	edi, esi
		mov	ebx, ebp
		call	sub_1000B310
		mov	ebx, [esp+18h+var_4]
		add	esp, 4
		jmp	short loc_1000B80E
; ---------------------------------------------------------------------------

loc_1000B7EF:				; CODE XREF: sub_1000B6D0+E6j
		mov	dword ptr [ebp+20h], 1
		mov	dword ptr [ebp+38h], 0FFFFE057h
		jmp	short loc_1000B80E
; ---------------------------------------------------------------------------

loc_1000B7FF:				; CODE XREF: sub_1000B6D0+EAj
		mov	dword ptr [ebp+20h], 1
		call	PORT_GetError_Util
		mov	[ebp+38h], eax

loc_1000B80E:				; CODE XREF: sub_1000B6D0+91j
					; sub_1000B6D0+AEj ...
		test	esi, esi
		jz	short loc_1000B81D
		push	1
		push	esi
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_1000B81D:				; CODE XREF: sub_1000B6D0+140j
		pop	edi
		pop	esi
		test	ebx, ebx
		jz	short loc_1000B82E
		push	1
		push	ebx
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_1000B82E:				; CODE XREF: sub_1000B6D0+151j
		pop	ebx
		pop	ebp
		pop	ecx
		retn
sub_1000B6D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B840	proc near		; CODE XREF: sub_1000BD70+C2p
					; sub_1000BD70+139p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		xor	ebx, ebx
		cmp	esi, ebx
		jnz	short loc_1000B856
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000B856:				; CODE XREF: sub_1000B840+5j
		push	ebp
		mov	ebp, 1
		mov	[esi+28h], ebp
		cmp	[esp+8+arg_4], ebx
		jnz	short loc_1000B882
		push	0FFFFE005h
		mov	[esi+24h], ebp
		mov	[esi+20h], ebp
		mov	dword ptr [esi+38h], 0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000B882:				; CODE XREF: sub_1000B840+23j
		mov	eax, [esi+0Ch]
		cmp	eax, ebx
		jnz	short loc_1000B899
		mov	[esi+24h], ebp
		mov	[esi+20h], ebp
		pop	ebp
		mov	dword ptr [esi+38h], 0FFFFE052h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000B899:				; CODE XREF: sub_1000B840+47j
		push	edi
		push	ebx
		add	eax, 0Ch
		push	ebx
		push	eax
		mov	[esi+24h], ebx
		mov	[esi+30h], ebx
		mov	[esi+20h], ebx
		mov	[esi+38h], ebx
		call	__CERT_DecodeDERCertificate
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, ebx
		jnz	short loc_1000B8CC
		mov	[esi+24h], ebp
		mov	[esi+20h], ebp
		call	PORT_GetError_Util
		pop	edi
		pop	ebp
		mov	[esi+38h], eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000B8CC:				; CODE XREF: sub_1000B840+78j
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_0]
		push	edi
		push	eax
		push	ecx
		push	esi
		call	sub_1000B6D0
		push	edi
		call	CERT_DestroyCertificate
		add	esp, 14h
		pop	edi
		pop	ebp
		pop	ebx
		retn
sub_1000B840	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B8F0	proc near		; CODE XREF: sub_1000BD70+93p
		test	esi, esi
		jnz	short loc_1000B902
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_1000B902:				; CODE XREF: sub_1000B8F0+2j
		push	ebp
		mov	ebp, 1
		mov	[esi+28h], ebp
		test	eax, eax
		jnz	short loc_1000B91E
		mov	[esi+20h], ebp
		mov	[esi+24h], ebp
		mov	dword ptr [esi+38h], 0FFFFE05Dh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000B91E:				; CODE XREF: sub_1000B8F0+1Dj
		mov	eax, [eax+0Ch]
		push	edi
		push	0
		add	eax, 0Ch
		push	0
		push	eax
		call	__CERT_DecodeDERCertificate
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_1000B949
		mov	[esi+20h], ebp
		mov	[esi+24h], ebp
		call	PORT_GetError_Util
		pop	edi
		mov	[esi+38h], eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000B949:				; CODE XREF: sub_1000B8F0+46j
		mov	ecx, [esi+40h]
		push	ebx
		push	edi
		push	ecx
		call	PK11_FindPrivateKeyFromCert
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000B96D
		mov	edx, [esi+40h]
		push	ebx
		push	edi
		push	edx
		call	PK11_FindKeyByDERCert
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000B979

loc_1000B96D:				; CODE XREF: sub_1000B8F0+69j
		push	eax
		call	SECKEY_DestroyPrivateKey
		add	esp, 4
		mov	[esi+24h], ebp

loc_1000B979:				; CODE XREF: sub_1000B8F0+7Bj
		push	edi
		call	CERT_DestroyCertificate
		add	esp, 4
		pop	edi
		pop	ebp
		retn
sub_1000B8F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B990	proc near		; CODE XREF: sub_1000CC50+16Bp
					; sub_1000CC50+1E3p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		push	ebx
		xor	ebx, ebx
		test	esi, esi
		jnz	short loc_1000B9AF
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000B9AF:				; CODE XREF: sub_1000B990+8j
		cmp	[esi+20h], ebx
		jnz	loc_1000BAF0
		cmp	[esi+24h], ebx
		jnz	loc_1000BAF0
		cmp	[esi+34h], ebx
		jnz	loc_1000BAF0
		push	ebp
		push	edi
		mov	edi, [esi+0Ch]
		mov	eax, esi
		add	edi, 0Ch
		call	sub_1000AF40
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_1000B9E2
		mov	ebx, [ebp+4]

loc_1000B9E2:				; CODE XREF: sub_1000B990+4Dj
		push	0
		push	edi
		call	CERT_IsCADERCert
		add	esp, 8
		test	eax, eax
		jz	short loc_1000BA03
		push	edi
		call	CERT_IsRootDERCert
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000BA03
		lea	ecx, [eax+1]
		jmp	short loc_1000BA05
; ---------------------------------------------------------------------------

loc_1000BA03:				; CODE XREF: sub_1000B990+5Fj
					; sub_1000B990+6Cj
		xor	ecx, ecx

loc_1000BA05:				; CODE XREF: sub_1000B990+71j
		cmp	[esp+14h+arg_0], 0
		jz	short loc_1000BA6E
		push	0
		push	0
		push	0
		push	edi
		call	CERT_GetDefaultCertDB
		push	eax
		call	CERT_NewTempCertificate
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_1000BA4F
		test	ebp, ebp
		jz	short loc_1000BA36
		push	1
		push	ebp
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_1000BA36:				; CODE XREF: sub_1000B990+99j
		call	PORT_GetError_Util
		pop	edi
		pop	ebp
		mov	[esi+38h], eax
		mov	dword ptr [esi+20h], 1
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000BA4F:				; CODE XREF: sub_1000B990+95j
		mov	eax, [esp+14h+arg_4]
		mov	ecx, [esi+40h]
		push	eax
		push	1
		push	ebx
		push	edi
		push	ecx
		call	PK11_ImportCertForKeyToSlot
		push	edi
		mov	ebx, eax
		call	CERT_DestroyCertificate
		add	esp, 18h
		jmp	short loc_1000BABE
; ---------------------------------------------------------------------------

loc_1000BA6E:				; CODE XREF: sub_1000B990+7Aj
		mov	eax, [esi+4Ch]
		test	eax, eax
		jz	short loc_1000BA92
		cmp	eax, 1
		jnz	short loc_1000BA7E
		test	ecx, ecx
		jz	short loc_1000BA92

loc_1000BA7E:				; CODE XREF: sub_1000B990+E8j
		mov	edx, [esi+40h]
		push	0
		push	ebx
		push	0
		push	edi
		push	edx
		call	PK11_ImportDERCert
		add	esp, 14h
		jmp	short loc_1000BABC
; ---------------------------------------------------------------------------

loc_1000BA92:				; CODE XREF: sub_1000B990+E3j
					; sub_1000B990+ECj
		push	ebx
		push	0
		push	1
		push	0
		lea	eax, [esp+24h+var_8]
		push	eax
		push	1
		push	7
		mov	[esp+30h+var_8], edi
		mov	[esp+30h+var_4], 0
		call	CERT_GetDefaultCertDB
		push	eax
		call	CERT_ImportCerts
		add	esp, 20h

loc_1000BABC:				; CODE XREF: sub_1000B990+100j
		mov	ebx, eax

loc_1000BABE:				; CODE XREF: sub_1000B990+DCj
		test	ebx, ebx
		jz	short loc_1000BAD1
		mov	dword ptr [esi+20h], 1
		call	PORT_GetError_Util
		mov	[esi+38h], eax

loc_1000BAD1:				; CODE XREF: sub_1000B990+130j
		mov	dword ptr [esi+34h], 1
		test	ebp, ebp
		jz	short loc_1000BAE7
		push	1
		push	ebp
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_1000BAE7:				; CODE XREF: sub_1000B990+14Aj
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000BAF0:				; CODE XREF: sub_1000B990+22j
					; sub_1000B990+2Bj ...
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_1000B990	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BB00	proc near		; CODE XREF: sub_1000BB90+6Dp
					; sub_1000BCF0+3Bp
		push	esi
		xor	esi, esi
		test	ebx, ebx
		jz	short loc_1000BB74
		test	edi, edi
		jz	short loc_1000BB74
		mov	ecx, [ebx]
		test	ecx, ecx
		jnz	short loc_1000BB21
		mov	eax, [edi+18h]
		push	8
		push	eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		jmp	short loc_1000BB4D
; ---------------------------------------------------------------------------

loc_1000BB21:				; CODE XREF: sub_1000BB00+Fj
		cmp	[ecx], esi
		jz	short loc_1000BB30
		mov	eax, ecx

loc_1000BB27:				; CODE XREF: sub_1000BB00+2Ej
		add	eax, 4
		inc	esi
		cmp	dword ptr [eax], 0
		jnz	short loc_1000BB27

loc_1000BB30:				; CODE XREF: sub_1000BB00+23j
		lea	edx, ds:8[esi*4]
		push	edx
		lea	eax, ds:4[esi*4]
		push	eax
		push	ecx
		mov	ecx, [edi+18h]
		push	ecx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_1000BB4D:				; CODE XREF: sub_1000BB00+1Fj
		test	eax, eax
		jnz	short loc_1000BB63
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000BB63:				; CODE XREF: sub_1000BB00+4Fj
		mov	[eax+esi*4], edi
		mov	dword ptr [eax+esi*4+4], 0
		mov	[ebx], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000BB74:				; CODE XREF: sub_1000BB00+5j
					; sub_1000BB00+9j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_1000BB00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BB90	proc near		; CODE XREF: sub_1000BD70+59p
					; sub_1000CC50+75p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 8
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		xor	ebp, ebp
		mov	[esp+10h+var_8], ebp
		cmp	esi, ebp
		jz	loc_1000BC2A
		cmp	[esi], ebp
		jz	short loc_1000BC2A
		push	ebx
		push	edi
		mov	ebx, 0ACh
		mov	edi, eax
		call	sub_1000AE20
		mov	[esp+18h+var_4], eax
		cmp	eax, ebp
		jz	short loc_1000BC20
		cmp	[esi], ebp
		jz	short loc_1000BC14

loc_1000BBC5:				; CODE XREF: sub_1000BB90+82j
		mov	eax, [esi]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A4h
		jnz	short loc_1000BC06
		mov	edi, [esi]
		lea	ebx, [eax+8]
		call	sub_1000AE20
		test	eax, eax
		jz	short loc_1000BC06
		mov	ecx, [esp+18h+var_4]
		push	ecx
		push	eax
		call	SECITEM_CompareItem_Util
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000BC06
		mov	edi, [esi]
		lea	ebx, [esp+18h+var_8]
		call	sub_1000BB00
		test	eax, eax
		jnz	short loc_1000BC20

loc_1000BC06:				; CODE XREF: sub_1000BB90+45j
					; sub_1000BB90+53j ...
		mov	edx, [esp+18h+arg_0]
		inc	ebp
		cmp	dword ptr [edx+ebp*4], 0
		lea	esi, [edx+ebp*4]
		jnz	short loc_1000BBC5

loc_1000BC14:				; CODE XREF: sub_1000BB90+33j
		mov	eax, [esp+18h+var_8]
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000BC20:				; CODE XREF: sub_1000BB90+2Fj
					; sub_1000BB90+74j
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000BC2A:				; CODE XREF: sub_1000BB90+11j
					; sub_1000BB90+19j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 8
		retn
sub_1000BB90	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 114. SEC_PKCS12DecoderGetCerts

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderGetCerts
SEC_PKCS12DecoderGetCerts proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	ebx
		test	eax, eax
		jz	loc_1000BCD3
		mov	ebx, [eax+84h]
		test	ebx, ebx
		jz	short loc_1000BCD3
		cmp	dword ptr [ebx], 0
		jz	short loc_1000BCD3
		push	ebp
		call	CERT_NewCertList
		mov	ebp, eax
		test	ebp, ebp
		jnz	short loc_1000BC6B
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000BC6B:				; CODE XREF: SEC_PKCS12DecoderGetCerts+26j
		push	edi
		xor	edi, edi
		cmp	[ebx], edi
		jz	short loc_1000BCCD
		push	esi
		mov	esi, ebx

loc_1000BC75:				; CODE XREF: SEC_PKCS12DecoderGetCerts+8Aj
		mov	eax, [esi]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A4h
		jnz	short loc_1000BCC2
		mov	esi, [esi]
		call	sub_1000B370
		mov	esi, eax
		test	esi, esi
		jz	short loc_1000BCC2
		push	1
		push	0
		push	0
		push	esi
		call	CERT_GetDefaultCertDB
		push	eax
		call	CERT_NewTempCertificate
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000BCB7
		push	eax
		push	ebp
		call	CERT_AddCertToListTail
		add	esp, 8

loc_1000BCB7:				; CODE XREF: SEC_PKCS12DecoderGetCerts+6Bj
		push	1
		push	esi
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1000BCC2:				; CODE XREF: SEC_PKCS12DecoderGetCerts+45j
					; SEC_PKCS12DecoderGetCerts+52j
		inc	edi
		cmp	dword ptr [ebx+edi*4], 0
		lea	esi, [ebx+edi*4]
		jnz	short loc_1000BC75
		pop	esi

loc_1000BCCD:				; CODE XREF: SEC_PKCS12DecoderGetCerts+30j
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000BCD3:				; CODE XREF: SEC_PKCS12DecoderGetCerts+7j
					; SEC_PKCS12DecoderGetCerts+15j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	ebx
		retn
SEC_PKCS12DecoderGetCerts endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BCF0	proc near		; CODE XREF: sub_1000BD70+2Dp
					; SEC_PKCS12DecoderIterateNext+96p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		xor	ebp, ebp
		mov	[esp+0Ch+var_4], ebp
		cmp	edi, ebp
		jz	short loc_1000BD54
		cmp	[edi], ebp
		jz	short loc_1000BD54
		push	esi
		mov	esi, edi
		push	ebx
		lea	esp, [esp+0]

loc_1000BD10:				; CODE XREF: sub_1000BCF0+50j
		mov	eax, [esi]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	eax, 0FFFFFF5Eh
		add	esp, 4
		cmp	eax, 1
		ja	short loc_1000BD38
		mov	edi, [esi]
		lea	ebx, [esp+14h+var_4]
		call	sub_1000BB00
		test	eax, eax
		jnz	short loc_1000BD4C
		mov	edi, [esp+14h+arg_0]

loc_1000BD38:				; CODE XREF: sub_1000BCF0+33j
		inc	ebp
		cmp	dword ptr [edi+ebp*4], 0
		lea	esi, [edi+ebp*4]
		jnz	short loc_1000BD10
		mov	eax, [esp+14h+var_4]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000BD4C:				; CODE XREF: sub_1000BCF0+42j
		pop	ebx
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000BD54:				; CODE XREF: sub_1000BCF0+Fj
					; sub_1000BCF0+13j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
sub_1000BCF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BD70	proc near		; CODE XREF: SEC_PKCS12DecoderValidateBags+25p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		push	ebp
		test	ebx, ebx
		jz	loc_1000BEED
		mov	ebp, [esp+10h+arg_4]
		test	ebp, ebp
		jz	loc_1000BEED
		cmp	dword ptr [ebx], 0
		jnz	short loc_1000BD9A
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000BD9A:				; CODE XREF: sub_1000BD70+20j
		push	esi
		push	edi
		push	ebx
		call	sub_1000BCF0
		mov	esi, eax
		add	esp, 4
		mov	[esp+18h+var_8], esi
		test	esi, esi
		jz	loc_1000BE78
		cmp	dword ptr [esi], 0
		mov	[esp+18h+var_4], 0
		jz	loc_1000BE78

loc_1000BDC4:				; CODE XREF: sub_1000BD70+FEj
		mov	edi, [eax]
		push	ebx
		mov	eax, edi
		call	sub_1000BB90
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	loc_1000BE5E
		push	edi
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A2h
		jnz	short loc_1000BDFA
		mov	eax, edi
		call	sub_1000B1D0
		test	eax, eax
		jnz	loc_1000BEB3

loc_1000BDFA:				; CODE XREF: sub_1000BD70+79j
		mov	ebx, [esp+18h+arg_8]
		mov	eax, [ebp+0]
		mov	esi, edi
		call	sub_1000B8F0
		xor	ebx, ebx
		cmp	[ebp+0], ebx
		jz	short loc_1000BE56
		mov	eax, ebp

loc_1000BE11:				; CODE XREF: sub_1000BD70+E4j
		mov	esi, [eax]
		mov	eax, 1
		mov	[esi+2Ch], eax
		cmp	dword ptr [edi+20h], 0
		jz	short loc_1000BE2C
		mov	[esi+20h], eax
		mov	eax, [edi+38h]
		mov	[esi+38h], eax
		jmp	short loc_1000BE4A
; ---------------------------------------------------------------------------

loc_1000BE2C:				; CODE XREF: sub_1000BD70+AFj
		mov	ecx, [esp+18h+arg_4]
		push	ecx
		push	edi
		call	sub_1000B840
		mov	eax, [esi+20h]
		add	esp, 8
		test	eax, eax
		jz	short loc_1000BE4A
		mov	[edi+20h], eax
		mov	edx, [esi+38h]
		mov	[edi+38h], edx

loc_1000BE4A:				; CODE XREF: sub_1000BD70+BAj
					; sub_1000BD70+CFj
		inc	ebx
		cmp	dword ptr [ebp+ebx*4+0], 0
		lea	eax, [ebp+ebx*4+0]
		jnz	short loc_1000BE11

loc_1000BE56:				; CODE XREF: sub_1000BD70+9Dj
		mov	esi, [esp+18h+var_8]
		mov	ebx, [esp+18h+arg_0]

loc_1000BE5E:				; CODE XREF: sub_1000BD70+65j
		mov	eax, [esp+18h+var_4]
		inc	eax
		cmp	dword ptr [esi+eax*4], 0
		mov	[esp+18h+var_4], eax
		lea	eax, [esi+eax*4]
		jnz	loc_1000BDC4
		mov	ebp, [esp+18h+arg_4]

loc_1000BE78:				; CODE XREF: sub_1000BD70+3Dj
					; sub_1000BD70+4Ej
		xor	edi, edi
		cmp	[ebx], edi
		jz	short loc_1000BEE3
		mov	eax, ebx

loc_1000BE80:				; CODE XREF: sub_1000BD70+171j
		mov	esi, [eax]
		cmp	dword ptr [esi+28h], 0
		jnz	short loc_1000BED9
		push	esi
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A2h
		jl	short loc_1000BED2
		cmp	eax, 0A3h
		jle	short loc_1000BEBE
		cmp	eax, 0A4h
		jnz	short loc_1000BED2
		push	ebp
		push	0
		call	sub_1000B840
		add	esp, 8
		jmp	short loc_1000BED9
; ---------------------------------------------------------------------------

loc_1000BEB3:				; CODE XREF: sub_1000BD70+84j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000BEBE:				; CODE XREF: sub_1000BD70+12Dj
		mov	eax, 1
		mov	[esi+24h], eax
		mov	[esi+20h], eax
		mov	dword ptr [esi+38h], 0FFFFE05Dh
		jmp	short loc_1000BED9
; ---------------------------------------------------------------------------

loc_1000BED2:				; CODE XREF: sub_1000BD70+126j
					; sub_1000BD70+134j
		mov	dword ptr [esi+24h], 1

loc_1000BED9:				; CODE XREF: sub_1000BD70+116j
					; sub_1000BD70+141j ...
		inc	edi
		cmp	dword ptr [ebx+edi*4], 0
		lea	eax, [ebx+edi*4]
		jnz	short loc_1000BE80

loc_1000BEE3:				; CODE XREF: sub_1000BD70+10Cj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000BEED:				; CODE XREF: sub_1000BD70+Bj
					; sub_1000BD70+17j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
sub_1000BD70	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 121. SEC_PKCS12DecoderValidateBags

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderValidateBags
SEC_PKCS12DecoderValidateBags proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebp, ebp
		test	esi, esi
		jz	short loc_1000BF90
		cmp	[esi+0Ch], ebp
		jnz	short loc_1000BF90
		mov	eax, [esi+84h]
		test	eax, eax
		jz	short loc_1000BF90
		mov	ecx, [esi+8]
		mov	edx, [esp+8+arg_4]
		push	ecx
		push	edx
		push	eax
		call	sub_1000BD70
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BF4B
		mov	dword ptr [esi+130h], 1

loc_1000BF4B:				; CODE XREF: SEC_PKCS12DecoderValidateBags+2Fj
		push	ebx
		push	edi
		mov	edi, [esi+84h]
		xor	edx, edx
		xor	ebx, ebx
		cmp	[edi], edx
		jz	short loc_1000BF8B
		xor	ecx, ecx
		mov	esi, edi
		nop

loc_1000BF60:				; CODE XREF: SEC_PKCS12DecoderValidateBags+69j
		mov	ecx, [ecx+edi]
		cmp	dword ptr [ecx+20h], 0
		jz	short loc_1000BF6D
		mov	ebp, [ecx+38h]
		inc	ebx

loc_1000BF6D:				; CODE XREF: SEC_PKCS12DecoderValidateBags+57j
		inc	edx
		cmp	dword ptr [esi+edx*4], 0
		lea	ecx, ds:0[edx*4]
		jnz	short loc_1000BF60
		test	ebx, ebx
		jz	short loc_1000BF8B
		push	ebp
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh

loc_1000BF8B:				; CODE XREF: SEC_PKCS12DecoderValidateBags+49j
					; SEC_PKCS12DecoderValidateBags+6Dj
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000BF90:				; CODE XREF: SEC_PKCS12DecoderValidateBags+Aj
					; SEC_PKCS12DecoderValidateBags+Fj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
SEC_PKCS12DecoderValidateBags endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BFB0	proc near		; CODE XREF: sub_1000CC50+91p
		push	edi
		mov	edi, ecx
		test	eax, eax
		jz	short loc_1000BFFC
		test	edi, edi
		jz	short loc_1000BFFC
		push	esi
		mov	dword ptr [edi], 0
		mov	eax, [eax+0Ch]
		push	0
		add	eax, 0Ch
		push	0
		push	eax
		call	__CERT_DecodeDERCertificate
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1000BFDE
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000BFDE:				; CODE XREF: sub_1000BFB0+29j
		mov	ecx, [esi+130h]
		push	esi
		mov	[edi], ecx
		call	CERT_ExtractPublicKey
		push	esi
		mov	edi, eax
		call	CERT_DestroyCertificate
		add	esp, 8
		pop	esi
		mov	eax, edi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000BFFC:				; CODE XREF: sub_1000BFB0+5j
					; sub_1000BFB0+9j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		retn
sub_1000BFB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C010	proc near		; CODE XREF: sub_1000CB30+33p
		test	ecx, ecx
		jz	short loc_1000C03D
		test	eax, eax
		jz	short loc_1000C03D
		mov	edx, [eax+4]
		mov	[ecx], edx
		mov	ecx, [eax+4]
		dec	ecx
		cmp	ecx, 5		; switch 6 cases
		ja	short loc_1000C04A ; jumptable 1000C026	default	case
		jmp	ds:off_1000C050[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000C02D:				; CODE XREF: sub_1000C010+16j
					; DATA XREF: .text:off_1000C050o
		add	eax, 38h	; jumptable 1000C026 case 1
		retn
; ---------------------------------------------------------------------------

loc_1000C031:				; CODE XREF: sub_1000C010+16j
					; DATA XREF: .text:off_1000C050o
		add	eax, 2Ch	; jumptable 1000C026 case 3
		retn
; ---------------------------------------------------------------------------

loc_1000C035:				; CODE XREF: sub_1000C010+16j
					; DATA XREF: .text:off_1000C050o
		add	eax, 14h	; jumptable 1000C026 case 0
		retn
; ---------------------------------------------------------------------------

loc_1000C039:				; CODE XREF: sub_1000C010+16j
					; DATA XREF: .text:off_1000C050o
		add	eax, 20h	; jumptable 1000C026 case 5
		retn
; ---------------------------------------------------------------------------

loc_1000C03D:				; CODE XREF: sub_1000C010+2j
					; sub_1000C010+6j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000C04A:				; CODE XREF: sub_1000C010+14j
					; sub_1000C010+16j
					; DATA XREF: ...
		xor	eax, eax	; jumptable 1000C026 default case
		retn
sub_1000C010	endp

; ---------------------------------------------------------------------------
		align 10h
off_1000C050	dd offset loc_1000C035	; DATA XREF: sub_1000C010+16r
		dd offset loc_1000C02D	; jump table for switch	statement
		dd offset loc_1000C04A
		dd offset loc_1000C031
		dd offset loc_1000C04A
		dd offset loc_1000C039
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C070	proc near		; CODE XREF: SEC_PKCS12DecoderIterateNext+127p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ebx
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	ebx, 0ACh
		call	sub_1000AE20
		mov	[esp+0Ch+var_4], eax
		test	eax, eax
		jnz	short loc_1000C08D
		pop	edi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000C08D:				; CODE XREF: sub_1000C070+17j
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		mov	eax, [ebp+148h]
		push	esi
		test	eax, eax
		jz	short loc_1000C11B
		xor	ebx, ebx
		nop

loc_1000C0A0:				; CODE XREF: sub_1000C070+A9j
		cmp	dword ptr [ebx+eax], 0
		jz	short loc_1000C11B
		mov	edi, [ebx+eax]
		mov	eax, [edi+10h]
		test	eax, eax
		jnz	short loc_1000C0BF
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1000C10E
; ---------------------------------------------------------------------------

loc_1000C0BF:				; CODE XREF: sub_1000C070+3Ej
		xor	esi, esi
		cmp	[eax], esi
		jz	short loc_1000C10E
		xor	ecx, ecx

loc_1000C0C7:				; CODE XREF: sub_1000C070+79j
		mov	eax, [ecx+eax]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0ACh
		jz	short loc_1000C0ED
		mov	eax, [edi+10h]
		inc	esi
		lea	ecx, ds:0[esi*4]
		cmp	dword ptr [ecx+eax], 0
		jnz	short loc_1000C0C7
		jmp	short loc_1000C10E
; ---------------------------------------------------------------------------

loc_1000C0ED:				; CODE XREF: sub_1000C070+68j
		mov	ecx, [edi+10h]
		mov	edx, [ecx+esi*4]
		mov	eax, [edx+0Ch]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_1000C10E
		mov	ecx, [esp+14h+var_4]
		push	eax
		push	ecx
		call	SECITEM_CompareItem_Util
		add	esp, 8
		test	eax, eax
		jz	short loc_1000C123

loc_1000C10E:				; CODE XREF: sub_1000C070+4Dj
					; sub_1000C070+53j ...
		mov	eax, [ebp+148h]
		add	ebx, 4
		test	eax, eax
		jnz	short loc_1000C0A0

loc_1000C11B:				; CODE XREF: sub_1000C070+2Bj
					; sub_1000C070+34j
		pop	esi
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000C123:				; CODE XREF: sub_1000C070+9Cj
		pop	esi
		pop	ebp
		pop	edi
		mov	eax, 1
		pop	ebx
		pop	ecx
		retn
sub_1000C070	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C130	proc near		; CODE XREF: SEC_PKCS12DecoderIterateNext+11Ap
					; SEC_PKCS12DecoderIterateNext+15Dp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ebx, 0ABh
		call	sub_1000AE20
		push	0Ch
		mov	edi, eax
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1000C17C
		push	0
		push	0
		push	1
		push	edi
		push	esi
		push	0
		call	sub_10008160
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1000C17A
		push	1
		push	esi
		call	SECITEM_FreeItem_Util
		add	esp, 8
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C17A:				; CODE XREF: sub_1000C130+37j
		mov	eax, esi

loc_1000C17C:				; CODE XREF: sub_1000C130+21j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000C130	endp

; Exported entry 116. SEC_PKCS12DecoderIterateInit

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderIterateInit
SEC_PKCS12DecoderIterateInit proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_1000C19B
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_1000C19B
		mov	dword ptr [eax+14Ch], 0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000C19B:				; CODE XREF: SEC_PKCS12DecoderIterateInit+6j
					; SEC_PKCS12DecoderIterateInit+Cj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
SEC_PKCS12DecoderIterateInit endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 117. SEC_PKCS12DecoderIterateNext

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderIterateNext
SEC_PKCS12DecoderIterateNext proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	ebp, ebp
		cmp	edi, ebp
		jz	loc_1000C342
		cmp	[edi+0Ch], ebp
		jnz	loc_1000C342
		cmp	[edi+154h], ebp
		jz	short loc_1000C1E6
		mov	eax, [edi+150h]
		cmp	eax, ebp
		jz	short loc_1000C1E6
		push	1
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1000C1E6:				; CODE XREF: SEC_PKCS12DecoderIterateNext+1Fj
					; SEC_PKCS12DecoderIterateNext+29j
		mov	eax, [edi+160h]
		cmp	eax, ebp
		jz	short loc_1000C1FB
		push	1
		push	eax
		call	SECOID_DestroyAlgorithmID_Util
		add	esp, 8

loc_1000C1FB:				; CODE XREF: SEC_PKCS12DecoderIterateNext+3Ej
		mov	eax, [edi+15Ch]
		cmp	eax, ebp
		jz	short loc_1000C210
		push	1
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1000C210:				; CODE XREF: SEC_PKCS12DecoderIterateNext+53j
		mov	eax, [esp+8+arg_4]
		push	ebx
		lea	ebx, [edi+150h]
		mov	[edi+154h], ebp
		mov	[ebx], ebp
		mov	[edi+160h], ebp
		mov	[edi+15Ch], ebp
		mov	[edi+158h], ebp
		mov	[eax], ebp
		cmp	[edi+148h], ebp
		jnz	short loc_1000C254
		mov	ecx, [edi+84h]
		push	ecx
		call	sub_1000BCF0
		add	esp, 4
		mov	[edi+148h], eax

loc_1000C254:				; CODE XREF: SEC_PKCS12DecoderIterateNext+8Dj
		mov	edx, [edi+14Ch]
		cmp	edx, [edi+88h]
		jnb	loc_1000C328
		push	esi
		jmp	short loc_1000C270
; ---------------------------------------------------------------------------
		align 10h

loc_1000C270:				; CODE XREF: SEC_PKCS12DecoderIterateNext+B7j
					; SEC_PKCS12DecoderIterateNext+10Ej
		mov	eax, [edi+14Ch]
		mov	ecx, [edi+84h]
		mov	esi, [ecx+eax*4]
		cmp	esi, ebp
		jz	short loc_1000C2AC ; jumptable 1000C2A5	case 0
		cmp	[esi+20h], ebp
		jnz	short loc_1000C2AC ; jumptable 1000C2A5	case 0
		push	esi
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		mov	[edi+154h], eax
		cmp	eax, 0A4h	; switch 165 cases
		ja	short loc_1000C31B ; jumptable 1000C2A5	default	case
		movzx	edx, ds:byte_1000C36C[eax]
		jmp	ds:off_1000C358[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000C2AC:				; CODE XREF: SEC_PKCS12DecoderIterateNext+D1j
					; SEC_PKCS12DecoderIterateNext+D6j ...
		inc	dword ptr [edi+14Ch] ; jumptable 1000C2A5 case 0
		mov	eax, [edi+14Ch]
		cmp	eax, [edi+88h]
		jb	short loc_1000C270
		jmp	short loc_1000C327
; ---------------------------------------------------------------------------

loc_1000C2C2:				; CODE XREF: SEC_PKCS12DecoderIterateNext+F5j
					; DATA XREF: .text:off_1000C358o
		call	sub_1000B370	; jumptable 1000C2A5 case 164
		push	esi
		mov	[ebx], eax
		call	sub_1000C130
		push	esi
		push	edi
		mov	[edi+15Ch], eax
		call	sub_1000C070
		add	esp, 0Ch
		mov	[edi+158h], eax
		jmp	short loc_1000C31B ; jumptable 1000C2A5	default	case
; ---------------------------------------------------------------------------

loc_1000C2E7:				; CODE XREF: SEC_PKCS12DecoderIterateNext+F5j
					; DATA XREF: .text:off_1000C358o
		push	18h		; jumptable 1000C2A5 case 163
		call	PORT_ZAlloc_Util
		add	esp, 4
		mov	[edi+160h], eax
		cmp	eax, ebp
		jz	short loc_1000C30C ; jumptable 1000C2A5	case 162
		mov	ecx, [esi+0Ch]
		add	ecx, 4
		push	ecx
		push	eax
		push	ebp
		call	SECOID_CopyAlgorithmID_Util
		add	esp, 0Ch

loc_1000C30C:				; CODE XREF: SEC_PKCS12DecoderIterateNext+F5j
					; SEC_PKCS12DecoderIterateNext+149j
					; DATA XREF: ...
		push	esi		; jumptable 1000C2A5 case 162
		call	sub_1000C130
		add	esp, 4
		mov	[edi+15Ch], eax

loc_1000C31B:				; CODE XREF: SEC_PKCS12DecoderIterateNext+ECj
					; SEC_PKCS12DecoderIterateNext+F5j ...
		mov	edx, [esp+10h+arg_4] ; jumptable 1000C2A5 default case
		mov	[edx], ebx
		inc	dword ptr [edi+14Ch]

loc_1000C327:				; CODE XREF: SEC_PKCS12DecoderIterateNext+110j
		pop	esi

loc_1000C328:				; CODE XREF: SEC_PKCS12DecoderIterateNext+B0j
		push	ebp
		call	PORT_SetError_Util
		mov	eax, [edi+154h]
		add	esp, 4
		neg	eax
		sbb	eax, eax
		pop	ebx
		neg	eax
		pop	edi
		dec	eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000C342:				; CODE XREF: SEC_PKCS12DecoderIterateNext+Aj
					; SEC_PKCS12DecoderIterateNext+13j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
SEC_PKCS12DecoderIterateNext endp

; ---------------------------------------------------------------------------
		align 4
off_1000C358	dd offset loc_1000C2AC,	offset loc_1000C30C, offset loc_1000C2E7
					; DATA XREF: SEC_PKCS12DecoderIterateNext+F5r
		dd offset loc_1000C2C2,	offset loc_1000C31B ; jump table for switch statement
byte_1000C36C	db	0,     4,     4,     4 ; DATA XREF: SEC_PKCS12DecoderIterateNext+EEr
		db	4,     4,     4,     4 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     1,     2
		db	3
		align 10h

loc_1000C420:				; DATA XREF: .text:1000C592o
		push	esi
		mov	esi, [esp+8]
		test	esi, esi
		jz	loc_1000C4D1
		push	ebx
		mov	ebx, [esi]
		test	ebx, ebx
		jz	loc_1000C4D0
		cmp	dword ptr [ebx+0Ch], 0
		jnz	loc_1000C4D0
		mov	ecx, [esp+10h]
		xor	edx, edx
		push	edi
		mov	edi, [esi+20h]
		mov	eax, [edi+14h]
		test	ecx, ecx
		setz	dl
		test	eax, eax
		jnz	short loc_1000C484
		test	edx, edx
		jz	short loc_1000C4CF
		cmp	[esp+18h], edi
		jnz	short loc_1000C4CF
		push	edi
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[edi+14h], eax
		test	eax, eax
		jnz	short loc_1000C4CF
		pop	edi
		mov	dword ptr [ebx+0Ch], 1
		mov	dword ptr [ebx+10h], 0FFFFE052h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C484:				; CODE XREF: .text:1000C456j
		mov	eax, [eax+0Ch]
		cmp	eax, 0A2h
		jl	short loc_1000C4C8
		cmp	eax, 0A4h
		jle	short loc_1000C4CF
		cmp	eax, 0A7h
		jnz	short loc_1000C4C8
		mov	eax, [esp+18h]
		test	ecx, ecx
		jz	short loc_1000C4B4
		lea	ecx, [edi+0Ch]
		cmp	eax, ecx
		jnz	short loc_1000C4B4
		call	sub_1000A3E0
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C4B4:				; CODE XREF: .text:1000C4A2j
					; .text:1000C4A9j
		test	edx, edx
		jz	short loc_1000C4CF
		add	edi, 0Ch
		cmp	eax, edi
		jnz	short loc_1000C4CF
		call	sub_1000A430
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C4C8:				; CODE XREF: .text:1000C48Cj
					; .text:1000C49Aj
		mov	dword ptr [esi+24h], 1

loc_1000C4CF:				; CODE XREF: .text:1000C45Aj
					; .text:1000C460j ...
		pop	edi

loc_1000C4D0:				; CODE XREF: .text:1000C432j
					; .text:1000C43Cj
		pop	ebx

loc_1000C4D1:				; CODE XREF: .text:1000C427j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000C4E0:				; DATA XREF: sub_1000A3E0+26o
					; sub_1000C5C0+10Eo
		push	edi
		mov	edi, [esp+8]
		test	edi, edi
		jz	loc_1000C5B2
		push	esi
		mov	esi, [edi]
		test	esi, esi
		jz	loc_1000C5B1
		cmp	dword ptr [esi+0Ch], 0
		jnz	loc_1000C5B1
		cmp	dword ptr [esp+10h], 0
		jnz	short loc_1000C52F
		mov	eax, [edi+8]
		push	eax
		call	SEC_ASN1DecoderClearFilterProc_Util
		mov	ecx, [edi+1Ch]
		push	ecx
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 8
		pop	esi
		mov	dword ptr [edi+1Ch], 0
		mov	dword ptr [edi+24h], 0
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000C52F:				; CODE XREF: .text:1000C507j
		call	sub_1000A1E0
		test	eax, eax
		jnz	short loc_1000C55B
		mov	edx, [edi+20h]
		mov	eax, [esi]
		push	offset dword_10014728
		push	edx
		push	eax
		call	SEC_ASN1DecoderStart_Util
		add	esp, 0Ch
		mov	[edi+1Ch], eax
		test	eax, eax
		jnz	short loc_1000C591
		call	PORT_GetError_Util
		mov	[esi+10h], eax

loc_1000C55B:				; CODE XREF: .text:1000C536j
		mov	dword ptr [esi+0Ch], 1
		mov	eax, [edi+1Ch]
		test	eax, eax
		jz	short loc_1000C579
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [edi+1Ch], 0

loc_1000C579:				; CODE XREF: .text:1000C567j
		mov	ecx, [edi+8]
		push	ecx
		call	SEC_ASN1DecoderClearNotifyProc_Util
		mov	edx, [edi+8]
		push	edx
		call	SEC_ASN1DecoderClearFilterProc_Util
		add	esp, 8
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000C591:				; CODE XREF: .text:1000C551j
		push	edi
		push	offset loc_1000C420
		push	eax
		call	SEC_ASN1DecoderSetNotifyProc_Util
		mov	eax, [edi+8]
		push	1
		push	edi
		push	offset sub_1000A310
		push	eax
		call	SEC_ASN1DecoderSetFilterProc_Util
		add	esp, 1Ch

loc_1000C5B1:				; CODE XREF: .text:1000C4F2j
					; .text:1000C4FCj
		pop	esi

loc_1000C5B2:				; CODE XREF: .text:1000C4E7j
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C5C0	proc near		; CODE XREF: sub_1000A3E0+13p
					; sub_1000C6F0+21p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	loc_1000C6E1
		cmp	dword ptr [esi+0Ch], 0
		jnz	loc_1000C6E1
		mov	eax, [esi+0C4h]
		test	eax, eax
		jnz	short loc_1000C5F0
		mov	eax, [esi]
		push	8
		push	eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		jmp	short loc_1000C612
; ---------------------------------------------------------------------------

loc_1000C5F0:				; CODE XREF: sub_1000C5C0+1Fj
		lea	ecx, ds:8[eax*4]
		push	ecx
		mov	ecx, [esi]
		lea	edx, ds:4[eax*4]
		mov	eax, [esi+0C8h]
		push	edx
		push	eax
		push	ecx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_1000C612:				; CODE XREF: sub_1000C5C0+2Ej
		push	edi
		mov	[esi+0C8h], eax
		test	eax, eax
		jnz	short loc_1000C631
		call	PORT_GetError_Util
		mov	[esi+10h], eax
		pop	edi
		mov	dword ptr [esi+0Ch], 1
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C631:				; CODE XREF: sub_1000C5C0+5Bj
		mov	edx, [esi]
		push	2Ch
		push	edx
		call	PORT_ArenaZAlloc_Util
		mov	ecx, [esi+0C8h]
		mov	edi, eax
		mov	eax, [esi+0C4h]
		mov	[ecx+eax*4], edi
		mov	eax, [esi+0C4h]
		mov	ecx, [esi+0C8h]
		add	esp, 8
		cmp	dword ptr [ecx+eax*4], 0
		jz	short loc_1000C69E
		inc	eax
		cmp	[esp+8+arg_4], 1
		mov	[esi+0C4h], eax
		mov	dword ptr [ecx+eax*4], 0
		mov	[edi], esi
		mov	edx, [esi]
		mov	[edi+4], edx
		mov	eax, offset dword_10014858
		jz	short loc_1000C687
		mov	eax, offset dword_10014868

loc_1000C687:				; CODE XREF: sub_1000C5C0+C0j
		mov	ecx, [esi]
		push	eax
		lea	eax, [edi+0Ch]
		push	eax
		push	ecx
		call	SEC_ASN1DecoderStart_Util
		add	esp, 0Ch
		mov	[edi+8], eax
		test	eax, eax
		jnz	short loc_1000C6CD

loc_1000C69E:				; CODE XREF: sub_1000C5C0+9Fj
		call	PORT_GetError_Util
		mov	[esi+10h], eax
		test	edi, edi
		jz	short loc_1000C6C1
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_1000C6C1
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [edi+8], 0

loc_1000C6C1:				; CODE XREF: sub_1000C5C0+E8j
					; sub_1000C5C0+EFj
		pop	edi
		mov	dword ptr [esi+0Ch], 1
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C6CD:				; CODE XREF: sub_1000C5C0+DCj
		push	edi
		push	offset loc_1000C4E0
		push	eax
		call	SEC_ASN1DecoderSetNotifyProc_Util
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C6E1:				; CODE XREF: sub_1000C5C0+7j
					; sub_1000C5C0+11j
		xor	eax, eax
		pop	esi
		retn
sub_1000C5C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C6F0	proc near		; DATA XREF: sub_1000C7E0+34o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	loc_1000C7D4
		cmp	dword ptr [esi+0Ch], 0
		jnz	loc_1000C7D4
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000C76B
		push	0
		push	esi
		call	sub_1000C5C0
		add	esp, 8
		test	eax, eax
		jz	loc_1000C7C2
		mov	ecx, [esi+128h]
		mov	edx, [esi+124h]
		push	offset sub_1000A1C0
		push	esi
		push	offset sub_1000A120
		push	ecx
		push	edx
		push	eax
		push	offset sub_1000A480
		call	SEC_PKCS7DecoderStart
		add	esp, 1Ch
		mov	[esi+8Ch], eax
		test	eax, eax
		jz	short loc_1000C7BA
		push	1
		push	eax
		mov	eax, [esi+90h]
		push	offset sub_1000A500
		push	eax
		call	SEC_ASN1DecoderSetFilterProc_Util
		add	esp, 10h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C76B:				; CODE XREF: sub_1000C6F0+1Cj
		cmp	dword ptr [esi+8Ch], 0
		jz	short loc_1000C7D4
		mov	ecx, [esi+0C4h]
		mov	edx, [esi+0C8h]
		push	edi
		mov	edi, [edx+ecx*4-4]
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_1000C79C
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [edi+8], 0

loc_1000C79C:				; CODE XREF: sub_1000C6F0+9Aj
		mov	eax, [esi+8Ch]
		push	eax
		call	SEC_PKCS7DecoderFinish
		add	esp, 4
		mov	dword ptr [esi+8Ch], 0
		pop	edi
		test	eax, eax
		jnz	short loc_1000C7CB

loc_1000C7BA:				; CODE XREF: sub_1000C6F0+60j
		call	PORT_GetError_Util
		mov	[esi+10h], eax

loc_1000C7C2:				; CODE XREF: sub_1000C6F0+2Bj
		mov	dword ptr [esi+0Ch], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C7CB:				; CODE XREF: sub_1000C6F0+C8j
		push	eax
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4

loc_1000C7D4:				; CODE XREF: sub_1000C6F0+7j
					; sub_1000C6F0+11j ...
		pop	esi
		retn
sub_1000C6F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C7E0	proc near		; CODE XREF: .text:loc_1000C92Dp
		test	esi, esi
		jz	loc_1000C8B0
		cmp	dword ptr [esi+0Ch], 0
		jnz	loc_1000C8B0
		mov	ecx, [esi]
		push	offset dword_10014838
		lea	eax, [esi+9Ch]
		push	eax
		push	ecx
		call	SEC_ASN1DecoderStart_Util
		add	esp, 0Ch
		mov	[esi+90h], eax
		test	eax, eax
		jz	short loc_1000C867
		push	esi
		push	offset sub_1000C6F0
		push	eax
		call	SEC_ASN1DecoderSetNotifyProc_Util
		mov	edx, [esi+128h]
		mov	eax, [esi+124h]
		push	0
		push	0
		push	0
		push	edx
		push	eax
		push	esi
		push	offset sub_1000A520
		call	SEC_PKCS7DecoderStart
		add	esp, 28h
		mov	[esi+94h], eax
		test	eax, eax
		jz	short loc_1000C867
		mov	eax, [esi+10Ch]
		test	eax, eax
		jz	short loc_1000C8B4
		mov	ecx, [esi+11Ch]
		push	0
		push	ecx
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1000C8B4

loc_1000C867:				; CODE XREF: sub_1000C7E0+31j
					; sub_1000C7E0+69j
		call	PORT_GetError_Util
		mov	[esi+10h], eax
		mov	eax, [esi+90h]
		mov	dword ptr [esi+0Ch], 1
		test	eax, eax
		jz	short loc_1000C893
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [esi+90h], 0

loc_1000C893:				; CODE XREF: sub_1000C7E0+9Ej
		mov	eax, [esi+94h]
		test	eax, eax
		jz	short loc_1000C8B0
		push	eax
		call	SEC_PKCS7DecoderFinish
		add	esp, 4
		mov	dword ptr [esi+94h], 0

loc_1000C8B0:				; CODE XREF: sub_1000C7E0+2j
					; sub_1000C7E0+Cj ...
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000C8B4:				; CODE XREF: sub_1000C7E0+73j
					; sub_1000C7E0+85j
		mov	dword ptr [esi+120h], 1
		xor	eax, eax
		retn
sub_1000C7E0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000C8D0:				; DATA XREF: SEC_PKCS12DecoderStart+100o
		push	esi
		mov	esi, [esp+8]
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_1000C8F2
		mov	eax, [esi+18h]
		push	eax
		call	SEC_ASN1DecoderClearNotifyProc_Util
		mov	ecx, [esi+18h]
		push	ecx
		call	SEC_ASN1DecoderClearFilterProc_Util
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C8F2:				; CODE XREF: .text:1000C8D9j
		cmp	dword ptr [esp+0Ch], 0
		jz	short loc_1000C94C
		lea	edx, [esi+2Ch]
		cmp	[esp+10h], edx
		jnz	loc_1000C9AF
		cmp	dword ptr [esi+24h], 0
		lea	eax, [esi+1Ch]
		jz	short loc_1000C91D
		push	eax
		call	DER_GetInteger_Util
		add	esp, 4
		cmp	eax, 3
		jle	short loc_1000C92D

loc_1000C91D:				; CODE XREF: .text:1000C90Dj
		mov	dword ptr [esi+10h], 0FFFFE054h
		mov	dword ptr [esi+0Ch], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C92D:				; CODE XREF: .text:1000C91Bj
		call	sub_1000C7E0
		test	eax, eax
		jnz	short loc_1000C9A8
		mov	eax, [esi+18h]
		push	1
		push	esi
		push	offset sub_1000A5B0
		push	eax
		call	SEC_ASN1DecoderSetFilterProc_Util
		add	esp, 10h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C94C:				; CODE XREF: .text:1000C8F7j
		lea	ecx, [esi+2Ch]
		cmp	[esp+10h], ecx
		jnz	short loc_1000C9AF
		mov	edx, [esi+94h]
		push	edx
		call	SEC_PKCS7DecoderFinish
		add	esp, 4
		mov	[esi+98h], eax
		mov	dword ptr [esi+94h], 0
		test	eax, eax
		jz	short loc_1000C9A0
		mov	eax, [esi+18h]
		push	eax
		call	SEC_ASN1DecoderClearFilterProc_Util
		mov	eax, [esi+110h]
		add	esp, 4
		test	eax, eax
		jz	short loc_1000C9AF
		mov	ecx, [esi+11Ch]
		push	0
		push	ecx
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1000C9AF

loc_1000C9A0:				; CODE XREF: .text:1000C976j
		call	PORT_GetError_Util
		mov	[esi+10h], eax

loc_1000C9A8:				; CODE XREF: .text:1000C934j
		mov	dword ptr [esi+0Ch], 1

loc_1000C9AF:				; CODE XREF: .text:1000C900j
					; .text:1000C953j ...
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry 119. SEC_PKCS12DecoderStart

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderStart
SEC_PKCS12DecoderStart proc near	; DATA XREF: .rdata:off_10016AC8o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	ecx
		push	ebx
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		xor	edi, edi
		add	esp, 4
		mov	[esp+0Ch+var_4], ebx
		cmp	ebx, edi
		jnz	short loc_1000C9E2
		pop	edi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000C9E2:				; CODE XREF: SEC_PKCS12DecoderStart+1Aj
		push	ebp
		push	esi
		push	164h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jz	loc_1000CAAC
		mov	ebp, [esp+14h+arg_C]
		mov	ebx, [esp+14h+arg_10]
		cmp	ebp, edi
		jnz	short loc_1000CA3C
		cmp	ebx, edi
		jnz	short loc_1000CA3C
		cmp	[esp+14h+arg_14], edi
		jnz	short loc_1000CA3C
		cmp	[esp+14h+arg_18], edi
		jnz	short loc_1000CA3C
		cmp	[esp+14h+arg_1C], edi
		jnz	short loc_1000CA3C
		mov	ebp, offset loc_1000A610
		mov	ebx, offset loc_1000A660
		mov	[esp+14h+arg_14], offset sub_1000A6B0
		mov	[esp+14h+arg_18], offset sub_1000A720
		mov	[esp+14h+arg_1C], esi

loc_1000CA3C:				; CODE XREF: SEC_PKCS12DecoderStart+46j
					; SEC_PKCS12DecoderStart+4Aj ...
		mov	eax, [esp+14h+var_4]
		mov	ecx, [esp+14h+arg_0]
		mov	[esi], eax
		mov	eax, [esp+14h+arg_4]
		mov	[esi+14h], ecx
		cmp	eax, edi
		jz	short loc_1000CA5C
		push	eax
		call	PK11_ReferenceSlot
		add	esp, 4
		jmp	short loc_1000CA61
; ---------------------------------------------------------------------------

loc_1000CA5C:				; CODE XREF: SEC_PKCS12DecoderStart+8Fj
		call	PK11_GetInternalKeySlot

loc_1000CA61:				; CODE XREF: SEC_PKCS12DecoderStart+9Aj
		mov	ecx, [esi]
		mov	edx, [esp+14h+arg_8]
		mov	[esi+4], eax
		push	offset dword_10014798
		lea	eax, [esi+1Ch]
		push	eax
		push	ecx
		mov	[esi+8], edx
		mov	[esi+144h], edi
		mov	dword ptr [esi+12Ch], 1
		mov	[esi+10h], edi
		mov	[esi+0Ch], edi
		call	SEC_ASN1DecoderStart_Util
		add	esp, 0Ch
		mov	[esi+18h], eax
		cmp	eax, edi
		jnz	short loc_1000CABF
		mov	edx, [esi+4]
		push	edx
		call	PK11_FreeSlot
		mov	ebx, [esp+18h+var_4]
		add	esp, 4

loc_1000CAAC:				; CODE XREF: SEC_PKCS12DecoderStart+36j
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000CABF:				; CODE XREF: SEC_PKCS12DecoderStart+DAj
		push	esi
		push	offset loc_1000C8D0
		push	eax
		call	SEC_ASN1DecoderSetNotifyProc_Util
		mov	eax, [esp+20h+arg_18]
		mov	ecx, [esp+20h+arg_14]
		mov	edx, [esp+20h+arg_1C]
		add	esp, 0Ch
		mov	[esi+118h], eax
		mov	[esi+10Ch], ebp
		mov	[esi+110h], ebx
		mov	[esi+120h], edi
		mov	[esi+148h], edi
		mov	[esi+154h], edi
		mov	[esi+150h], edi
		mov	[esi+158h], edi
		mov	[esi+15Ch], edi
		mov	[esi+14Ch], edi
		mov	[esi+114h], ecx
		mov	[esi+11Ch], edx
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		pop	ecx
		retn
SEC_PKCS12DecoderStart endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CB30	proc near		; CODE XREF: sub_1000CC50+F1p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebp
		mov	ebp, [esp+8+arg_8]
		test	esi, esi
		jz	loc_1000CC3A
		mov	eax, [esp+8+arg_0]
		test	eax, eax
		jz	loc_1000CC3A
		cmp	dword ptr [esi+20h], 0
		jnz	loc_1000CC35
		cmp	dword ptr [esi+24h], 0
		jnz	loc_1000CC35
		push	edi
		lea	ecx, [esp+0Ch+var_4]
		call	sub_1000C010
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1000CB83
		mov	dword ptr [esi+38h], 0FFFFE05Dh
		mov	dword ptr [esi+20h], 1

loc_1000CB7C:				; CODE XREF: sub_1000CB30+76j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000CB83:				; CODE XREF: sub_1000CB30+3Cj
		push	esi
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		sub	eax, 0A2h
		jz	short loc_1000CBE1
		dec	eax
		jz	short loc_1000CBBA
		mov	dword ptr [esi+38h], 0FFFFE054h
		mov	dword ptr [esi+20h], 1
		test	ebx, ebx
		jz	short loc_1000CB7C
		push	1
		push	ebx
		call	SECITEM_ZfreeItem_Util
		add	esp, 8
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000CBBA:				; CODE XREF: sub_1000CB30+64j
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+var_4]
		mov	edx, [esi+44h]
		push	ebp
		push	eax
		mov	eax, [esi+0Ch]
		push	ecx
		mov	ecx, [esi+40h]
		push	1
		push	1
		push	edi
		push	ebx
		push	edx
		push	eax
		push	ecx
		call	PK11_ImportEncryptedPrivateKeyInfo
		add	esp, 28h
		jmp	short loc_1000CBFD
; ---------------------------------------------------------------------------

loc_1000CBE1:				; CODE XREF: sub_1000CB30+61j
		mov	edx, [esp+0Ch+arg_4]
		mov	eax, [esi+0Ch]
		mov	ecx, [esi+40h]
		push	ebp
		push	edx
		push	1
		push	1
		push	edi
		push	ebx
		push	eax
		push	ecx
		call	PK11_ImportPrivateKeyInfo
		add	esp, 20h

loc_1000CBFD:				; CODE XREF: sub_1000CB30+AFj
		mov	edi, eax
		test	edi, edi
		jz	short loc_1000CC15
		pop	edi
		mov	dword ptr [esi+38h], 0FFFFE05Dh
		mov	dword ptr [esi+20h], 1
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000CC15:				; CODE XREF: sub_1000CB30+D1j
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [esi+40h]
		push	1
		push	edx
		push	eax
		call	PK11_ImportPublicKey
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		mov	dword ptr [esi+34h], 1
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000CC35:				; CODE XREF: sub_1000CB30+1Ej
					; sub_1000CB30+28j
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000CC3A:				; CODE XREF: sub_1000CB30+8j
					; sub_1000CB30+14j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ecx
		retn
sub_1000CB30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CC50	proc near		; CODE XREF: SEC_PKCS12DecoderImportBags+22p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 18h
		push	ebx
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_18], 0
		test	ebx, ebx
		jnz	short loc_1000CC79
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000CC79:				; CODE XREF: sub_1000CC50+12j
		cmp	dword ptr [ebx], 0
		jnz	short loc_1000CC85
		xor	eax, eax
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000CC85:				; CODE XREF: sub_1000CC50+2Cj
		push	ebp
		push	esi
		push	edi
		push	ebx
		call	sub_1000BCF0
		mov	ecx, eax
		add	esp, 4
		mov	[esp+28h+var_C], ecx
		test	ecx, ecx
		jz	loc_1000CDFE
		cmp	dword ptr [ecx], 0
		mov	[esp+28h+var_8], 0
		jz	loc_1000CDFE

loc_1000CCB0:				; CODE XREF: sub_1000CC50+1A1j
		mov	edi, [eax]
		xor	ebp, ebp
		cmp	[edi+20h], ebp
		jz	short loc_1000CCC2
		inc	[esp+28h+var_18]
		jmp	loc_1000CDE1
; ---------------------------------------------------------------------------

loc_1000CCC2:				; CODE XREF: sub_1000CC50+67j
		push	ebx
		mov	eax, edi
		call	sub_1000BB90
		mov	esi, eax
		add	esp, 4
		mov	[esp+28h+var_10], esi
		test	esi, esi
		jz	short loc_1000CCF3
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000CCF3
		lea	ecx, [esp+28h+var_4]
		call	sub_1000BFB0
		mov	ebp, eax
		mov	eax, [esi]
		mov	ebx, edi
		call	sub_1000B2B0
		jmp	short loc_1000CCFA
; ---------------------------------------------------------------------------

loc_1000CCF3:				; CODE XREF: sub_1000CC50+85j
					; sub_1000CC50+8Bj
		mov	eax, edi
		call	sub_1000AF40

loc_1000CCFA:				; CODE XREF: sub_1000CC50+A1j
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_1000CD18
		mov	dword ptr [edi+38h], 0FFFFE067h
		mov	dword ptr [edi+20h], 1
		mov	[esp+28h+var_14], 0FFFFFFFFh
		jmp	short loc_1000CD51
; ---------------------------------------------------------------------------

loc_1000CD18:				; CODE XREF: sub_1000CC50+AEj
		test	ebp, ebp
		jnz	short loc_1000CD34
		mov	dword ptr [edi+38h], 0FFFFE05Dh
		mov	dword ptr [edi+20h], 1
		mov	[esp+28h+var_14], 0FFFFFFFFh
		jmp	short loc_1000CD5E
; ---------------------------------------------------------------------------

loc_1000CD34:				; CODE XREF: sub_1000CC50+CAj
		mov	eax, [esp+28h+arg_4]
		mov	ecx, [esp+28h+var_4]
		push	eax
		push	ecx
		push	ebp
		mov	esi, edi
		call	sub_1000CB30
		mov	esi, [esp+34h+var_10]
		add	esp, 0Ch
		mov	[esp+28h+var_14], eax

loc_1000CD51:				; CODE XREF: sub_1000CC50+C6j
		test	ebp, ebp
		jz	short loc_1000CD5E
		push	ebp
		call	SECKEY_DestroyPublicKey
		add	esp, 4

loc_1000CD5E:				; CODE XREF: sub_1000CC50+E2j
					; sub_1000CC50+103j
		test	ebx, ebx
		jz	short loc_1000CD6D
		push	1
		push	ebx
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1000CD6D:				; CODE XREF: sub_1000CC50+110j
		cmp	[esp+28h+var_14], 0
		jz	short loc_1000CD84
		mov	edx, [edi+38h]
		push	edx
		call	PORT_SetError_Util
		add	esp, 4
		inc	[esp+28h+var_18]

loc_1000CD84:				; CODE XREF: sub_1000CC50+122j
		test	esi, esi
		jz	short loc_1000CDD9
		xor	ebx, ebx
		cmp	[esi], ebx
		jz	short loc_1000CDD9
		mov	eax, esi

loc_1000CD90:				; CODE XREF: sub_1000CC50+187j
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_1000CDCB
		cmp	[esp+28h+var_14], 0
		jz	short loc_1000CDB2
		mov	eax, [edi+20h]
		mov	[esi+20h], eax
		mov	ecx, [edi+38h]
		mov	[esi+38h], ecx
		mov	dword ptr [esi+24h], 1
		jmp	short loc_1000CDCB
; ---------------------------------------------------------------------------

loc_1000CDB2:				; CODE XREF: sub_1000CC50+14Bj
		mov	edx, [esp+28h+arg_4]
		mov	eax, [esi+2Ch]
		push	edx
		push	eax
		call	sub_1000B990
		add	esp, 8
		test	eax, eax
		jnz	loc_1000CE53

loc_1000CDCB:				; CODE XREF: sub_1000CC50+144j
					; sub_1000CC50+160j
		mov	ecx, [esp+28h+var_10]
		inc	ebx
		cmp	dword ptr [ecx+ebx*4], 0
		lea	eax, [ecx+ebx*4]
		jnz	short loc_1000CD90

loc_1000CDD9:				; CODE XREF: sub_1000CC50+136j
					; sub_1000CC50+13Cj
		mov	ecx, [esp+28h+var_C]
		mov	ebx, [esp+28h+arg_0]

loc_1000CDE1:				; CODE XREF: sub_1000CC50+6Dj
		mov	eax, [esp+28h+var_8]
		inc	eax
		cmp	dword ptr [ecx+eax*4], 0
		mov	[esp+28h+var_8], eax
		lea	eax, [ecx+eax*4]
		jnz	loc_1000CCB0
		cmp	[esp+28h+var_18], 0
		jnz	short loc_1000CE6B

loc_1000CDFE:				; CODE XREF: sub_1000CC50+49j
					; sub_1000CC50+5Aj
		xor	edi, edi
		cmp	[ebx], edi
		jz	short loc_1000CE49
		mov	eax, ebx

loc_1000CE06:				; CODE XREF: sub_1000CC50+1F7j
		mov	esi, [eax]
		cmp	dword ptr [esi+34h], 0
		jnz	short loc_1000CE3F
		cmp	dword ptr [esi+20h], 0
		jnz	short loc_1000CE3F
		cmp	dword ptr [esi+24h], 0
		jnz	short loc_1000CE3F
		push	esi
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, 0A4h
		jnz	short loc_1000CE3F
		mov	edx, [esp+28h+arg_4]
		mov	eax, [esi+2Ch]
		push	edx
		push	eax
		call	sub_1000B990
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000CE5F

loc_1000CE3F:				; CODE XREF: sub_1000CC50+1BCj
					; sub_1000CC50+1C2j ...
		inc	edi
		cmp	dword ptr [ebx+edi*4], 0
		lea	eax, [ebx+edi*4]
		jnz	short loc_1000CE06

loc_1000CE49:				; CODE XREF: sub_1000CC50+1B2j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000CE53:				; CODE XREF: sub_1000CC50+175j
		mov	edx, [esi+20h]
		mov	[edi+20h], edx
		mov	eax, [esi+38h]
		mov	[edi+38h], eax

loc_1000CE5F:				; CODE XREF: sub_1000CC50+1EDj
		mov	ecx, [esi+38h]
		push	ecx
		call	PORT_SetError_Util
		add	esp, 4

loc_1000CE6B:				; CODE XREF: sub_1000CC50+1ACj
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 18h
		retn
sub_1000CC50	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 115. SEC_PKCS12DecoderImportBags

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS12DecoderImportBags
SEC_PKCS12DecoderImportBags proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_1000CEAB
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_1000CEAB
		cmp	dword ptr [eax+130h], 0
		jz	short loc_1000CEB8
		mov	ecx, [eax+8]
		mov	edx, [eax+84h]
		push	ecx
		push	edx
		call	sub_1000CC50
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000CEAB:				; CODE XREF: SEC_PKCS12DecoderImportBags+6j
					; SEC_PKCS12DecoderImportBags+Cj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000CEB8:				; CODE XREF: SEC_PKCS12DecoderImportBags+15j
		or	eax, 0FFFFFFFFh
		retn
SEC_PKCS12DecoderImportBags endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CEC0	proc near		; DATA XREF: .rdata:off_10014880o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1000CECD
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000CECD:				; CODE XREF: sub_1000CEC0+7j
		cmp	dword ptr [esi], 0
		jnz	short loc_1000CEE0
		lea	eax, [esi+4]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		mov	[esi], eax

loc_1000CEE0:				; CODE XREF: sub_1000CEC0+10j
		mov	esi, [esi]
		sub	esi, 19h
		jz	short loc_1000CF07
		dec	esi
		jz	short loc_1000CF00
		pop	esi
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToAnyTemplate_Util
; ---------------------------------------------------------------------------

loc_1000CF00:				; CODE XREF: sub_1000CEC0+28j
		mov	eax, offset dword_10014960
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000CF07:				; CODE XREF: sub_1000CEC0+25j
		pop	esi
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToOctetStringTemplate_Util
sub_1000CEC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CF20	proc near		; CODE XREF: CERT_DecodeCertPackage+1B7p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 14h
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1000CF3F
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000CF3F:				; CODE XREF: sub_1000CF20+15j
		xor	eax, eax
		push	esi
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_10], eax
		mov	[esp+1Ch+var_C], eax
		mov	[esp+1Ch+var_8], eax
		mov	[esp+1Ch+var_4], eax
		mov	eax, [esp+1Ch+arg_0]
		push	eax
		push	offset dword_100148A0
		lea	ecx, [esp+24h+var_14]
		push	ecx
		push	edi
		call	SEC_ASN1DecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000CF90
		mov	eax, [esp+1Ch+var_14]
		test	eax, eax
		jnz	short loc_1000CF8B
		lea	edx, [esp+1Ch+var_10]
		push	edx
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		mov	[esp+1Ch+var_14], eax

loc_1000CF8B:				; CODE XREF: sub_1000CF20+58j
		cmp	eax, 1Ah
		jz	short loc_1000CFA6

loc_1000CF90:				; CODE XREF: sub_1000CF20+50j
		push	0
		push	edi
		or	esi, 0FFFFFFFFh
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	edi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000CFA6:				; CODE XREF: sub_1000CF20+6Ej
		mov	eax, [esp+1Ch+var_4]
		mov	edx, [eax+24h]
		mov	eax, edx
		test	eax, eax
		jz	short loc_1000CFD7
		xor	ecx, ecx
		cmp	[eax], ecx
		jz	short loc_1000CFC9
		lea	esp, [esp+0]

loc_1000CFC0:				; CODE XREF: sub_1000CF20+A7j
		add	eax, 4
		inc	ecx
		cmp	dword ptr [eax], 0
		jnz	short loc_1000CFC0

loc_1000CFC9:				; CODE XREF: sub_1000CF20+97j
		push	ecx
		mov	ecx, [esp+20h+arg_8]
		push	edx
		push	ecx
		call	[esp+28h+arg_4]
		add	esp, 0Ch

loc_1000CFD7:				; CODE XREF: sub_1000CF20+91j
		xor	esi, esi
		push	esi
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	edi
		add	esp, 14h
		retn
sub_1000CF20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CFF0	proc near		; CODE XREF: CERT_DecodeCertPackage+199p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		push	edi
		push	800h
		mov	[esp+20h+var_18], 0
		call	PORT_NewArena_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1000D017
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D017:				; CODE XREF: sub_1000CFF0+1Dj
		xor	eax, eax
		push	esi
		mov	[esp+20h+var_14], eax
		mov	[esp+20h+var_10], eax
		mov	[esp+20h+var_C], eax
		mov	[esp+20h+var_8], eax
		mov	[esp+20h+var_4], eax
		mov	eax, [esp+20h+arg_0]
		push	eax
		push	offset dword_100148A0
		lea	ecx, [esp+28h+var_14]
		push	ecx
		push	edi
		call	SEC_ASN1DecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000D084
		mov	eax, [esp+20h+var_14]
		test	eax, eax
		jnz	short loc_1000D063
		lea	edx, [esp+20h+var_10]
		push	edx
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		mov	[esp+20h+var_14], eax

loc_1000D063:				; CODE XREF: sub_1000CFF0+60j
		cmp	eax, 35h
		jnz	short loc_1000D084
		mov	eax, [esp+20h+var_4]
		push	eax
		push	offset dword_10014970
		lea	ecx, [esp+28h+var_18]
		push	ecx
		push	edi
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000D09A

loc_1000D084:				; CODE XREF: sub_1000CFF0+58j
					; sub_1000CFF0+76j
		push	0
		push	edi
		or	esi, 0FFFFFFFFh
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	edi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D09A:				; CODE XREF: sub_1000CFF0+92j
		mov	edx, [esp+20h+var_18]
		mov	eax, edx
		test	edx, edx
		jz	short loc_1000D0C7
		xor	ecx, ecx
		cmp	[edx], ecx
		jz	short loc_1000D0B9
		lea	ebx, [ebx+0]

loc_1000D0B0:				; CODE XREF: sub_1000CFF0+C7j
		add	eax, 4
		inc	ecx
		cmp	dword ptr [eax], 0
		jnz	short loc_1000D0B0

loc_1000D0B9:				; CODE XREF: sub_1000CFF0+B8j
		push	ecx
		push	edx
		mov	edx, [esp+28h+arg_8]
		push	edx
		call	[esp+2Ch+arg_4]
		add	esp, 0Ch

loc_1000D0C7:				; CODE XREF: sub_1000CFF0+B2j
		xor	esi, esi
		push	esi
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	edi
		add	esp, 18h
		retn
sub_1000CFF0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. CERT_ConvertAndDecodeCertificate

; =============== S U B	R O U T	I N E =======================================


		public CERT_ConvertAndDecodeCertificate
CERT_ConvertAndDecodeCertificate proc near ; DATA XREF:	.rdata:off_10016AC8o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sub	esp, 0Ch
		push	eax
		lea	ecx, [esp+10h+var_C]
		push	ecx
		call	ATOB_ConvertAsciiToItem_Util
		add	esp, 8
		test	eax, eax
		jz	short loc_1000D0FF
		xor	eax, eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000D0FF:				; CODE XREF: CERT_ConvertAndDecodeCertificate+17j
		push	esi
		push	1
		push	0
		lea	edx, [esp+18h+var_C]
		push	0
		push	edx
		call	CERT_GetDefaultCertDB
		push	eax
		call	CERT_NewTempCertificate
		mov	esi, eax
		mov	eax, [esp+24h+var_8]
		push	eax
		call	PORT_Free_Util
		add	esp, 18h
		mov	eax, esi
		pop	esi
		add	esp, 0Ch
		retn
CERT_ConvertAndDecodeCertificate endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. CERT_DecodeCertPackage

; =============== S U B	R O U T	I N E =======================================


; int __cdecl CERT_DecodeCertPackage(void *Src,	size_t Size, int, int)
		public CERT_DecodeCertPackage
CERT_DecodeCertPackage proc near	; CODE XREF: CERT_DecodeCertPackage+322p
					; CERT_DecodeCertFromPackage+28p
					; DATA XREF: ...

var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 18h
		push	esi
		mov	esi, [esp+1Ch+Src]
		test	esi, esi
		jnz	short loc_1000D151
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D151:				; CODE XREF: CERT_DecodeCertPackage+Aj
		push	edi
		mov	edi, [esp+20h+Size]
		cmp	edi, 11h
		jge	short loc_1000D171
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D171:				; CODE XREF: CERT_DecodeCertPackage+29j
		mov	al, [esi]
		and	al, 1Fh
		push	ebx
		cmp	al, 10h
		jnz	loc_1000D231	; jumptable 1000D19F default case
		mov	al, [esi+1]
		lea	ecx, [esp+24h+var_18]
		mov	[esp+24h+Src], ecx
		lea	ecx, [esi+1]
		test	al, al
		jns	short loc_1000D20C
		movzx	edx, al
		and	edx, 7Fh
		cmp	edx, 4		; switch 5 cases
		ja	loc_1000D231	; jumptable 1000D19F default case
		jmp	ds:off_1000D478[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000D1A6:				; CODE XREF: CERT_DecodeCertPackage+6Fj
					; DATA XREF: .text:off_1000D478o
		movzx	eax, byte ptr [ecx+1] ;	jumptable 1000D19F case	4
		movzx	ebx, byte ptr [ecx+2]
		shl	eax, 8
		or	eax, ebx
		movzx	ebx, byte ptr [ecx+3]
		shl	eax, 8
		or	eax, ebx
		movzx	ebx, byte ptr [ecx+4]
		shl	eax, 8
		or	eax, ebx
		lea	ecx, [ecx+edx+1]
		jmp	short loc_1000D212
; ---------------------------------------------------------------------------

loc_1000D1CB:				; CODE XREF: CERT_DecodeCertPackage+6Fj
					; DATA XREF: .text:off_1000D478o
		movzx	eax, byte ptr [ecx+1] ;	jumptable 1000D19F case	3
		movzx	ebx, byte ptr [ecx+2]
		shl	eax, 8
		or	eax, ebx
		movzx	ebx, byte ptr [ecx+3]
		shl	eax, 8
		or	eax, ebx
		lea	ecx, [ecx+edx+1]
		jmp	short loc_1000D212
; ---------------------------------------------------------------------------

loc_1000D1E7:				; CODE XREF: CERT_DecodeCertPackage+6Fj
					; DATA XREF: .text:off_1000D478o
		movzx	eax, byte ptr [ecx+1] ;	jumptable 1000D19F case	2
		movzx	ebx, byte ptr [ecx+2]
		shl	eax, 8
		or	eax, ebx
		lea	ecx, [ecx+edx+1]
		jmp	short loc_1000D212
; ---------------------------------------------------------------------------

loc_1000D1FA:				; CODE XREF: CERT_DecodeCertPackage+6Fj
					; DATA XREF: .text:off_1000D478o
		movzx	eax, byte ptr [ecx+1] ;	jumptable 1000D19F case	1
		lea	ecx, [ecx+edx+1]
		jmp	short loc_1000D212
; ---------------------------------------------------------------------------

loc_1000D204:				; CODE XREF: CERT_DecodeCertPackage+6Fj
					; DATA XREF: .text:off_1000D478o
		xor	eax, eax	; jumptable 1000D19F case 0
		lea	ecx, [ecx+edx+1]
		jmp	short loc_1000D212
; ---------------------------------------------------------------------------

loc_1000D20C:				; CODE XREF: CERT_DecodeCertPackage+5Ej
		xor	edx, edx
		movzx	eax, al
		inc	ecx

loc_1000D212:				; CODE XREF: CERT_DecodeCertPackage+99j
					; CERT_DecodeCertPackage+B5j ...
		test	eax, eax
		jnz	short loc_1000D21A
		test	edx, edx
		jz	short loc_1000D25C

loc_1000D21A:				; CODE XREF: CERT_DecodeCertPackage+E4j
		lea	eax, [eax+edx+2]
		cmp	edi, eax
		jz	short loc_1000D25C
		jle	short loc_1000D255
		push	0FFFFE08Ch

loc_1000D229:				; CODE XREF: CERT_DecodeCertPackage+12Aj
		call	PORT_SetError_Util
		add	esp, 4

loc_1000D231:				; CODE XREF: CERT_DecodeCertPackage+48j
					; CERT_DecodeCertPackage+69j ...
		lea	edx, [edi+1]	; jumptable 1000D19F default case
		push	ebp
		push	edx
		call	PORT_Alloc_Util
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	loc_1000D318
		pop	ebp
		or	edi, 0FFFFFFFFh
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D255:				; CODE XREF: CERT_DecodeCertPackage+F2j
		push	0FFFFE004h
		jmp	short loc_1000D229
; ---------------------------------------------------------------------------

loc_1000D25C:				; CODE XREF: CERT_DecodeCertPackage+E8j
					; CERT_DecodeCertPackage+F0j
		cmp	byte ptr [ecx],	6
		jnz	loc_1000D2F6
		movzx	eax, byte ptr [ecx+1]
		mov	[esp+24h+var_4], eax
		cmp	eax, 9
		jbe	short loc_1000D289
		push	0FFFFE08Fh
		call	PORT_SetError_Util
		add	esp, 4

loc_1000D27F:				; CODE XREF: CERT_DecodeCertPackage+16Fj
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D289:				; CODE XREF: CERT_DecodeCertPackage+140j
		lea	edx, [esp+24h+var_C]
		add	ecx, 2
		push	edx
		mov	[esp+28h+var_8], ecx
		call	SECOID_FindOID_Util
		add	esp, 4
		test	eax, eax
		jz	short loc_1000D27F
		mov	[esp+24h+var_14], esi
		mov	[esp+24h+var_10], edi
		mov	eax, [eax+0Ch]
		cmp	eax, 1Ah
		jz	short loc_1000D2D8
		cmp	eax, 35h
		jnz	loc_1000D231	; jumptable 1000D19F default case
		mov	eax, [esp+24h+arg_C]
		mov	ecx, [esp+24h+arg_8]
		push	eax
		push	ecx
		lea	edx, [esp+2Ch+var_18]
		push	edx
		call	sub_1000CFF0
		add	esp, 0Ch
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D2D8:				; CODE XREF: CERT_DecodeCertPackage+17Fj
		mov	eax, [esp+24h+arg_C]
		mov	ecx, [esp+24h+arg_8]
		push	eax
		push	ecx
		lea	edx, [esp+2Ch+var_18]
		push	edx
		call	sub_1000CF20
		add	esp, 0Ch
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D2F6:				; CODE XREF: CERT_DecodeCertPackage+12Fj
		mov	ecx, [esp+24h+arg_C]
		push	1
		lea	eax, [esp+28h+Src]
		push	eax
		push	ecx
		mov	[esp+30h+var_14], esi
		mov	[esp+30h+var_10], edi
		call	[esp+30h+arg_8]
		add	esp, 0Ch
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D318:				; CODE XREF: CERT_DecodeCertPackage+112j
		push	edi		; Size
		push	esi		; Src
		push	ebp		; Dst
		call	memcpy
		mov	esi, ds:strchr
		push	0Ah		; Val
		push	ebp		; Str
		mov	byte ptr [edi+ebp], 0
		call	esi ; strchr
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000D355
		cmp	byte ptr [ebp+0], 0
		mov	eax, ebp
		jz	short loc_1000D355
		mov	edi, edi

loc_1000D340:				; CODE XREF: CERT_DecodeCertPackage+223j
		push	0Dh		; Val
		push	eax		; Str
		call	esi ; strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_1000D355
		mov	byte ptr [eax],	0Ah
		inc	eax
		cmp	byte ptr [eax],	0
		jnz	short loc_1000D340

loc_1000D355:				; CODE XREF: CERT_DecodeCertPackage+204j
					; CERT_DecodeCertPackage+20Cj ...
		mov	esi, ebp
		cmp	edi, 1Bh
		jbe	short loc_1000D38C
		lea	esp, [esp+0]

loc_1000D360:				; CODE XREF: CERT_DecodeCertPackage+29Ej
		push	1Bh
		push	offset aBeginCertifica ; "-----BEGIN CERTIFICATE-----"
		push	esi
		xor	ebx, ebx
		call	PL_strncasecmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000D37F
		sub	edi, 1Bh
		add	esi, 1Bh
		lea	ebx, [eax+1]

loc_1000D37F:				; CODE XREF: CERT_DecodeCertPackage+244j
		test	edi, edi
		jz	short loc_1000D3CB

loc_1000D383:				; CODE XREF: CERT_DecodeCertPackage+25Aj
		cmp	byte ptr [esi],	0Ah
		jz	short loc_1000D3AF
		inc	esi
		dec	edi
		jnz	short loc_1000D383

loc_1000D38C:				; CODE XREF: CERT_DecodeCertPackage+22Aj
					; CERT_DecodeCertPackage+291j ...
		push	0FFFFE009h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000D399:				; CODE XREF: CERT_DecodeCertPackage+30Cj
		push	ebp
		or	edi, 0FFFFFFFFh
		call	PORT_Free_Util
		add	esp, 4
		pop	ebp
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D3AF:				; CODE XREF: CERT_DecodeCertPackage+256j
		test	edi, edi
		jz	short loc_1000D3CB

loc_1000D3B3:				; CODE XREF: CERT_DecodeCertPackage+28Fj
		mov	al, [esi]
		cmp	al, 0Ah
		jz	short loc_1000D3BD
		cmp	al, 0Dh
		jnz	short loc_1000D3C3

loc_1000D3BD:				; CODE XREF: CERT_DecodeCertPackage+287j
		inc	esi
		dec	edi
		jnz	short loc_1000D3B3
		jmp	short loc_1000D38C
; ---------------------------------------------------------------------------

loc_1000D3C3:				; CODE XREF: CERT_DecodeCertPackage+28Bj
		test	edi, edi
		jz	short loc_1000D3CB
		test	ebx, ebx
		jnz	short loc_1000D3D2

loc_1000D3CB:				; CODE XREF: CERT_DecodeCertPackage+251j
					; CERT_DecodeCertPackage+281j ...
		cmp	edi, 1Bh
		ja	short loc_1000D360
		jmp	short loc_1000D38C
; ---------------------------------------------------------------------------

loc_1000D3D2:				; CODE XREF: CERT_DecodeCertPackage+299j
		mov	ebx, esi
		cmp	edi, 19h
		jb	short loc_1000D38C
		lea	esp, [esp+0]

loc_1000D3E0:				; CODE XREF: CERT_DecodeCertPackage+2E8j
		push	19h
		push	offset aEndCertificate ; "-----END CERTIFICATE-----"
		push	esi
		call	PL_strncasecmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000D41F
		test	edi, edi
		jz	short loc_1000D415

loc_1000D3F8:				; CODE XREF: CERT_DecodeCertPackage+2CFj
		cmp	byte ptr [esi],	0Ah
		jz	short loc_1000D403
		inc	esi
		dec	edi
		jnz	short loc_1000D3F8
		jmp	short loc_1000D38C
; ---------------------------------------------------------------------------

loc_1000D403:				; CODE XREF: CERT_DecodeCertPackage+2CBj
		test	edi, edi
		jz	short loc_1000D415

loc_1000D407:				; CODE XREF: CERT_DecodeCertPackage+2E3j
		mov	al, [esi]
		cmp	al, 0Ah
		jz	short loc_1000D411
		cmp	al, 0Dh
		jnz	short loc_1000D415

loc_1000D411:				; CODE XREF: CERT_DecodeCertPackage+2DBj
		inc	esi
		dec	edi
		jnz	short loc_1000D407

loc_1000D415:				; CODE XREF: CERT_DecodeCertPackage+2C6j
					; CERT_DecodeCertPackage+2D5j ...
		cmp	edi, 19h
		jnb	short loc_1000D3E0
		jmp	loc_1000D38C
; ---------------------------------------------------------------------------

loc_1000D41F:				; CODE XREF: CERT_DecodeCertPackage+2C2j
		test	esi, esi
		jz	loc_1000D38C
		lea	eax, [esp+28h+Src]
		push	eax
		push	ebx
		mov	byte ptr [esi],	0
		call	ATOB_AsciiToData_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_1000D399
		mov	ecx, [esp+28h+arg_C]
		mov	edx, [esp+28h+arg_8]
		mov	eax, [esp+28h+Src]
		push	ecx		; int
		push	edx		; int
		push	eax		; Size
		push	esi		; Src
		call	CERT_DecodeCertPackage
		add	esp, 10h
		push	esi
		mov	edi, eax
		call	PORT_Free_Util
		add	esp, 4
		push	ebp
		call	PORT_Free_Util
		add	esp, 4
		pop	ebp
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 18h
		retn
CERT_DecodeCertPackage endp

; ---------------------------------------------------------------------------
off_1000D478	dd offset loc_1000D204	; DATA XREF: CERT_DecodeCertPackage+6Fr
		dd offset loc_1000D1FA	; jump table for switch	statement
		dd offset loc_1000D1E7
		dd offset loc_1000D1CB
		dd offset loc_1000D1A6
		align 10h

loc_1000D490:				; DATA XREF: CERT_DecodeCertFromPackage+21o
		mov	eax, [esp+8]
		mov	ecx, [eax]
		mov	[esp+0Ch], ecx
		mov	eax, [esp+4]
		lea	edx, [eax+4]
		mov	[esp+8], edx
		mov	eax, [eax]
		mov	[esp+4], eax
		jmp	SECITEM_CopyItem_Util
; Exported entry   2. CERT_DecodeCertFromPackage

; =============== S U B	R O U T	I N E =======================================


; int __cdecl CERT_DecodeCertFromPackage(void *Src, size_t Size)
		public CERT_DecodeCertFromPackage
CERT_DecodeCertFromPackage proc	near	; DATA XREF: .rdata:off_10016AC8o

var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
Src		= dword	ptr  4
Size		= dword	ptr  8

		sub	esp, 10h
		push	esi
		push	800h
		xor	esi, esi
		call	PORT_NewArena_Util
		mov	ecx, [esp+18h+Size]
		mov	edx, [esp+18h+Src]
		mov	[esp+18h+var_10], eax
		lea	eax, [esp+18h+var_10]
		push	eax		; int
		push	offset loc_1000D490 ; int
		push	ecx		; Size
		push	edx		; Src
		call	CERT_DecodeCertPackage
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000D4FD
		push	1
		push	eax
		push	eax
		lea	eax, [esp+20h+var_C]
		push	eax
		call	CERT_GetDefaultCertDB
		push	eax
		call	CERT_NewTempCertificate
		add	esp, 14h
		mov	esi, eax

loc_1000D4FD:				; CODE XREF: CERT_DecodeCertFromPackage+32j
		mov	ecx, [esp+14h+var_10]
		push	0
		push	ecx
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		add	esp, 10h
		retn
CERT_DecodeCertFromPackage endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 135. SEC_PKCS7ContentType

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7ContentType
SEC_PKCS7ContentType proc near		; CODE XREF: sub_10009B90+2Ep
					; sub_1000DCC0+Ap ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000D53A
		lea	eax, [esi+18h]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+0Ch], eax

loc_1000D53A:				; CODE XREF: SEC_PKCS7ContentType+9j
		mov	eax, [esi+0Ch]
		pop	esi
		test	eax, eax
		jnz	short loc_1000D543
		retn
; ---------------------------------------------------------------------------

loc_1000D543:				; CODE XREF: SEC_PKCS7ContentType+20j
		mov	eax, [eax+0Ch]
		retn
SEC_PKCS7ContentType endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 148. SEC_PKCS7DestroyContentInfo

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7DestroyContentInfo
SEC_PKCS7DestroyContentInfo proc near	; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+15Fp
					; SEC_PKCS12CreateUnencryptedSafe+7Fp ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		mov	eax, [edi+8]
		test	eax, eax
		jle	loc_1000D695
		dec	eax
		mov	[edi+8], eax
		test	eax, eax
		jg	loc_1000D695
		push	ebx
		push	ebp
		xor	ebx, ebx
		xor	ebp, ebp
		push	esi
		cmp	[edi+0Ch], ebx
		jnz	short loc_1000D587
		lea	eax, [edi+18h]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[edi+0Ch], eax

loc_1000D587:				; CODE XREF: SEC_PKCS7DestroyContentInfo+26j
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_1000D591
		mov	eax, [eax+0Ch]

loc_1000D591:				; CODE XREF: SEC_PKCS7DestroyContentInfo+3Cj
		sub	eax, 1Ah
		jz	short loc_1000D5D9
		dec	eax
		jz	short loc_1000D5C9
		dec	eax
		jnz	loc_1000D629
		mov	eax, [edi+24h]
		test	eax, eax
		jz	loc_1000D681
		mov	esi, [eax+6Ch]
		mov	edi, [eax+70h]
		mov	ebx, [eax+0Ch]
		mov	ebp, [eax+64h]
		mov	eax, [eax+74h]
		test	eax, eax
		jz	short loc_1000D5ED
		push	eax
		call	PK11_FreeSymKey
		add	esp, 4
		jmp	short loc_1000D5ED
; ---------------------------------------------------------------------------

loc_1000D5C9:				; CODE XREF: SEC_PKCS7DestroyContentInfo+47j
		mov	eax, [edi+24h]
		test	eax, eax
		jz	loc_1000D681
		mov	ebx, [eax+0Ch]
		jmp	short loc_1000D629
; ---------------------------------------------------------------------------

loc_1000D5D9:				; CODE XREF: SEC_PKCS7DestroyContentInfo+44j
		mov	eax, [edi+24h]
		test	eax, eax
		jz	loc_1000D681
		mov	esi, [eax+48h]
		mov	edi, [eax+4Ch]
		mov	ebp, [eax+40h]

loc_1000D5ED:				; CODE XREF: SEC_PKCS7DestroyContentInfo+6Cj
					; SEC_PKCS7DestroyContentInfo+77j
		test	esi, esi
		jz	short loc_1000D609
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000D609

loc_1000D5F7:				; CODE XREF: SEC_PKCS7DestroyContentInfo+B7j
		push	eax
		add	esi, 4
		call	CERT_DestroyCertificate
		mov	eax, [esi]
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000D5F7

loc_1000D609:				; CODE XREF: SEC_PKCS7DestroyContentInfo+9Fj
					; SEC_PKCS7DestroyContentInfo+A5j
		test	edi, edi
		jz	short loc_1000D625
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_1000D625

loc_1000D613:				; CODE XREF: SEC_PKCS7DestroyContentInfo+D3j
		push	eax
		add	edi, 4
		call	CERT_DestroyCertificateList
		mov	eax, [edi]
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000D613

loc_1000D625:				; CODE XREF: SEC_PKCS7DestroyContentInfo+BBj
					; SEC_PKCS7DestroyContentInfo+C1j
		mov	edi, [esp+10h+arg_0]

loc_1000D629:				; CODE XREF: SEC_PKCS7DestroyContentInfo+4Aj
					; SEC_PKCS7DestroyContentInfo+87j
		test	ebx, ebx
		jz	short loc_1000D64C
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_1000D64C

loc_1000D633:				; CODE XREF: SEC_PKCS7DestroyContentInfo+FAj
		mov	eax, [eax+34h]
		add	ebx, 4
		test	eax, eax
		jz	short loc_1000D646
		push	eax
		call	CERT_DestroyCertificate
		add	esp, 4

loc_1000D646:				; CODE XREF: SEC_PKCS7DestroyContentInfo+EBj
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_1000D633

loc_1000D64C:				; CODE XREF: SEC_PKCS7DestroyContentInfo+DBj
					; SEC_PKCS7DestroyContentInfo+E1j
		test	ebp, ebp
		jz	short loc_1000D681
		mov	esi, [ebp+0]
		test	esi, esi
		jz	short loc_1000D681

loc_1000D657:				; CODE XREF: SEC_PKCS7DestroyContentInfo+12Fj
		mov	eax, [esi+54h]
		add	ebp, 4
		test	eax, eax
		jz	short loc_1000D66A
		push	eax
		call	CERT_DestroyCertificate
		add	esp, 4

loc_1000D66A:				; CODE XREF: SEC_PKCS7DestroyContentInfo+10Fj
		mov	esi, [esi+58h]
		test	esi, esi
		jz	short loc_1000D67A
		push	esi
		call	CERT_DestroyCertificateList
		add	esp, 4

loc_1000D67A:				; CODE XREF: SEC_PKCS7DestroyContentInfo+11Fj
		mov	esi, [ebp+0]
		test	esi, esi
		jnz	short loc_1000D657

loc_1000D681:				; CODE XREF: SEC_PKCS7DestroyContentInfo+55j
					; SEC_PKCS7DestroyContentInfo+7Ej ...
		mov	eax, [edi]
		pop	esi
		pop	ebp
		pop	ebx
		test	eax, eax
		jz	short loc_1000D695
		push	0
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8

loc_1000D695:				; CODE XREF: SEC_PKCS7DestroyContentInfo+Aj
					; SEC_PKCS7DestroyContentInfo+16j ...
		pop	edi
		retn
SEC_PKCS7DestroyContentInfo endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 136. SEC_PKCS7CopyContentInfo

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7CopyContentInfo
SEC_PKCS7CopyContentInfo proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1000D6A9
		retn
; ---------------------------------------------------------------------------

loc_1000D6A9:				; CODE XREF: SEC_PKCS7CopyContentInfo+6j
		inc	dword ptr [eax+8]
		retn
SEC_PKCS7CopyContentInfo endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 156. SEC_PKCS7GetContent

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7GetContent
SEC_PKCS7GetContent proc near		; CODE XREF: sub_100109D0+22p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]

loc_1000D6B5:				; CODE XREF: SEC_PKCS7GetContent+3Dj
					; SEC_PKCS7GetContent+49j
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000D6CA
		lea	eax, [esi+18h]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+0Ch], eax

loc_1000D6CA:				; CODE XREF: SEC_PKCS7GetContent+9j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1000D6D4
		mov	eax, [eax+0Ch]

loc_1000D6D4:				; CODE XREF: SEC_PKCS7GetContent+1Fj
		add	eax, 0FFFFFFE7h	; switch 6 cases
		cmp	eax, 5
		ja	short loc_1000D724 ; jumptable 1000D6DC	default	case
		jmp	ds:off_1000D728[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000D6E3:				; CODE XREF: SEC_PKCS7GetContent+2Cj
					; DATA XREF: .text:off_1000D728o
		mov	esi, [esi+24h]	; jumptable 1000D6DC case 29
		test	esi, esi
		jz	short loc_1000D724 ; jumptable 1000D6DC	default	case
		add	esi, 24h
		jmp	short loc_1000D6B5
; ---------------------------------------------------------------------------

loc_1000D6EF:				; CODE XREF: SEC_PKCS7GetContent+2Cj
					; DATA XREF: .text:off_1000D728o
		mov	esi, [esi+24h]	; jumptable 1000D6DC case 26
		test	esi, esi
		jz	short loc_1000D724 ; jumptable 1000D6DC	default	case
		add	esi, 10h
		jmp	short loc_1000D6B5
; ---------------------------------------------------------------------------

loc_1000D6FB:				; CODE XREF: SEC_PKCS7GetContent+2Cj
					; DATA XREF: .text:off_1000D728o
		mov	eax, [esi+24h]	; jumptable 1000D6DC case 25
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D700:				; CODE XREF: SEC_PKCS7GetContent+2Cj
					; DATA XREF: .text:off_1000D728o
		mov	esi, [esi+24h]	; jumptable 1000D6DC case 30
		test	esi, esi
		jz	short loc_1000D724 ; jumptable 1000D6DC	default	case
		lea	eax, [esi+40h]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D70C:				; CODE XREF: SEC_PKCS7GetContent+2Cj
					; DATA XREF: .text:off_1000D728o
		mov	esi, [esi+24h]	; jumptable 1000D6DC case 27
		test	esi, esi
		jz	short loc_1000D724 ; jumptable 1000D6DC	default	case
		lea	eax, [esi+44h]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D718:				; CODE XREF: SEC_PKCS7GetContent+2Cj
					; DATA XREF: .text:off_1000D728o
		mov	esi, [esi+24h]	; jumptable 1000D6DC case 28
		test	esi, esi
		jz	short loc_1000D724 ; jumptable 1000D6DC	default	case
		lea	eax, [esi+48h]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D724:				; CODE XREF: SEC_PKCS7GetContent+2Aj
					; SEC_PKCS7GetContent+38j ...
		xor	eax, eax	; jumptable 1000D6DC default case
		pop	esi
		retn
SEC_PKCS7GetContent endp

; ---------------------------------------------------------------------------
off_1000D728	dd offset loc_1000D6FB	; DATA XREF: SEC_PKCS7GetContent+2Cr
		dd offset loc_1000D6EF	; jump table for switch	statement
		dd offset loc_1000D70C
		dd offset loc_1000D718
		dd offset loc_1000D6E3
		dd offset loc_1000D700
; Exported entry 157. SEC_PKCS7GetEncryptionAlgorithm

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7GetEncryptionAlgorithm
SEC_PKCS7GetEncryptionAlgorithm	proc near ; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+116p
					; SEC_PKCS7DecryptContents+51p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000D75A
		lea	eax, [esi+18h]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+0Ch], eax

loc_1000D75A:				; CODE XREF: SEC_PKCS7GetEncryptionAlgorithm+9j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1000D764
		mov	eax, [eax+0Ch]

loc_1000D764:				; CODE XREF: SEC_PKCS7GetEncryptionAlgorithm+1Fj
		sub	eax, 1Bh
		jz	short loc_1000D785
		dec	eax
		jz	short loc_1000D77D
		sub	eax, 2
		jz	short loc_1000D775
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D775:				; CODE XREF: SEC_PKCS7GetEncryptionAlgorithm+2Fj
		mov	eax, [esi+24h]
		add	eax, 1Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D77D:				; CODE XREF: SEC_PKCS7GetEncryptionAlgorithm+2Aj
		mov	eax, [esi+24h]
		add	eax, 24h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D785:				; CODE XREF: SEC_PKCS7GetEncryptionAlgorithm+27j
		mov	eax, [esi+24h]
		add	eax, 20h
		pop	esi
		retn
SEC_PKCS7GetEncryptionAlgorithm	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 163. SEC_PKCS7SetContent

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7SetContent
SEC_PKCS7SetContent proc near		; DATA XREF: .rdata:off_10016AC8o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	edi
		xor	edi, edi
		mov	[esp+14h+var_C], edi
		mov	[esp+14h+var_8], eax
		mov	[esp+14h+var_4], ecx
		cmp	[esi+0Ch], edi
		jnz	short loc_1000D7C3
		lea	edx, [esi+18h]
		push	edx
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+0Ch], eax

loc_1000D7C3:				; CODE XREF: SEC_PKCS7SetContent+22j
		mov	eax, [esi+0Ch]
		cmp	eax, edi
		jnz	short loc_1000D7CE
		xor	eax, eax
		jmp	short loc_1000D7D1
; ---------------------------------------------------------------------------

loc_1000D7CE:				; CODE XREF: SEC_PKCS7SetContent+38j
		mov	eax, [eax+0Ch]

loc_1000D7D1:				; CODE XREF: SEC_PKCS7SetContent+3Cj
		sub	eax, 19h
		jz	loc_1000D8B2
		dec	eax
		jz	loc_1000D866
		sub	eax, 4
		jnz	loc_1000D8EA
		push	19h
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		cmp	eax, edi
		jz	loc_1000D8EA
		mov	ecx, [esi]
		push	eax
		mov	eax, [esi+24h]
		add	eax, 10h
		push	eax
		push	ecx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000D8EA
		cmp	[esp+14h+var_4], edi
		jbe	short loc_1000D846
		mov	eax, [esi+24h]
		mov	ecx, [esi]
		lea	edx, [esp+14h+var_C]
		push	edx
		add	eax, 40h
		push	eax
		push	ecx

loc_1000D82D:				; CODE XREF: SEC_PKCS7SetContent+106j
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000D8EA

loc_1000D83E:				; CODE XREF: SEC_PKCS7SetContent+13Aj
					; SEC_PKCS7SetContent+154j
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000D846:				; CODE XREF: SEC_PKCS7SetContent+8Cj
		mov	edx, [esi+24h]
		mov	[edx+44h], edi
		mov	eax, [esi+24h]
		mov	[eax+38h], edi
		mov	ecx, [esi+24h]
		mov	[ecx+48h], edi
		mov	edx, [esi+24h]
		mov	[edx+3Ch], edi
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000D866:				; CODE XREF: SEC_PKCS7SetContent+4Bj
		cmp	[esp+14h+var_4], edi
		jbe	short loc_1000D898
		mov	eax, [esi+24h]
		cmp	[eax+34h], edi
		jnz	short loc_1000D887
		mov	ecx, [esi]
		push	edi
		push	edi
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	edx, [esi+24h]
		add	esp, 0Ch
		mov	[edx+34h], eax

loc_1000D887:				; CODE XREF: SEC_PKCS7SetContent+E2j
		mov	ecx, [esi+24h]
		mov	edx, [ecx+34h]
		lea	eax, [esp+14h+var_C]
		push	eax
		mov	eax, [esi]
		push	edx
		push	eax
		jmp	short loc_1000D82D
; ---------------------------------------------------------------------------

loc_1000D898:				; CODE XREF: SEC_PKCS7SetContent+DAj
		mov	ecx, [esi+24h]
		mov	edx, [ecx+34h]
		mov	[edx+4], edi
		mov	eax, [esi+24h]
		mov	ecx, [eax+34h]
		mov	[ecx+8], edi
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000D8B2:				; CODE XREF: SEC_PKCS7SetContent+44j
		mov	edx, [esi]
		push	0Ch
		push	edx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[esi+24h], eax
		cmp	eax, edi
		jz	short loc_1000D8EA
		cmp	[esp+14h+var_4], edi
		jbe	loc_1000D83E
		mov	edx, [esi]
		lea	ecx, [esp+14h+var_C]
		push	ecx
		push	eax
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	loc_1000D83E

loc_1000D8EA:				; CODE XREF: SEC_PKCS7SetContent+54j
					; SEC_PKCS7SetContent+66j ...
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
SEC_PKCS7SetContent endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 147. SEC_PKCS7DecryptContents

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7DecryptContents
SEC_PKCS7DecryptContents proc near	; DATA XREF: .rdata:off_10016AC8o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, [esp+18h+arg_4]
		push	edi
		xor	edi, edi
		mov	[esp+1Ch+var_8], edi
		mov	[esp+1Ch+var_4], edi
		mov	[esp+1Ch+var_10], edi
		cmp	esi, edi
		jz	short loc_1000D945
		mov	ebx, [esp+1Ch+arg_8]
		cmp	ebx, edi
		jz	short loc_1000D945
		cmp	[esi+0Ch], edi
		jnz	short loc_1000D938
		lea	eax, [esi+18h]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+0Ch], eax

loc_1000D938:				; CODE XREF: SEC_PKCS7DecryptContents+27j
		mov	eax, [esi+0Ch]
		cmp	eax, edi
		jz	short loc_1000D945
		cmp	dword ptr [eax+0Ch], 1Eh
		jz	short loc_1000D94F

loc_1000D945:				; CODE XREF: SEC_PKCS7DecryptContents+1Aj
					; SEC_PKCS7DecryptContents+22j	...
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000D94F:				; CODE XREF: SEC_PKCS7DecryptContents+43j
		push	ebp
		push	esi
		call	SEC_PKCS7GetEncryptionAlgorithm
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, edi
		jnz	short loc_1000D96A
		pop	ebp
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000D96A:				; CODE XREF: SEC_PKCS7DecryptContents+5Dj
		mov	edi, [esp+20h+arg_0]
		test	edi, edi
		jnz	short loc_1000D97A
		mov	ecx, [esi]
		mov	[esp+20h+arg_0], ecx
		mov	edi, ecx

loc_1000D97A:				; CODE XREF: SEC_PKCS7DecryptContents+70j
		push	edi
		call	PORT_ArenaMark_Util
		mov	esi, [esi+24h]
		mov	edx, [esi+3Ch]
		add	edx, 40h
		push	edx
		push	edi
		mov	[esp+2Ch+var_C], eax
		call	PORT_ArenaZAlloc_Util
		mov	[esi+44h], eax
		mov	ecx, [esi+3Ch]
		add	ecx, 40h
		add	esp, 0Ch
		lea	edi, [esi+48h]
		mov	[edi], ecx
		test	eax, eax
		jnz	short loc_1000D9C5

loc_1000D9A9:				; CODE XREF: SEC_PKCS7DecryptContents+1CEj
					; SEC_PKCS7DecryptContents+1D6j
		mov	eax, [esp+20h+var_C]
		mov	ecx, [esp+20h+arg_0]
		push	eax
		push	ecx
		mov	[esp+28h+arg_4], 0FFFFFFFFh
		call	PORT_ArenaRelease_Util
		jmp	loc_1000DB07
; ---------------------------------------------------------------------------

loc_1000D9C5:				; CODE XREF: SEC_PKCS7DecryptContents+A7j
		call	PK11_GetInternalKeySlot
		mov	[esp+20h+var_4], eax
		test	eax, eax
		jnz	short loc_1000D9EE
		mov	eax, [esp+20h+var_C]
		mov	ecx, [esp+20h+arg_0]
		push	eax
		push	ecx
		mov	[esp+28h+arg_4], 0FFFFFFFFh
		call	PORT_ArenaRelease_Util
		jmp	loc_1000DB07
; ---------------------------------------------------------------------------

loc_1000D9EE:				; CODE XREF: SEC_PKCS7DecryptContents+D0j
		mov	edx, [esp+20h+arg_C]
		push	edx
		push	0
		push	ebx
		push	ebp
		push	eax
		call	PK11_PBEKeyGen
		mov	ebx, eax
		add	esp, 14h
		mov	[esp+20h+var_8], ebx
		test	ebx, ebx
		jnz	short loc_1000DA26
		mov	eax, [esp+20h+var_C]
		mov	ecx, [esp+20h+arg_0]
		push	eax
		push	ecx
		mov	[esp+28h+arg_4], 0FFFFFFFFh
		call	PORT_ArenaRelease_Util
		jmp	loc_1000DB07
; ---------------------------------------------------------------------------

loc_1000DA26:				; CODE XREF: SEC_PKCS7DecryptContents+108j
		mov	eax, [esp+20h+arg_8]
		push	eax
		lea	ecx, [esp+24h+var_10]
		push	ecx
		push	ebp
		call	PK11_GetPBECryptoMechanism
		mov	ebp, eax
		add	esp, 0Ch
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_1000DA58
		mov	ecx, [esp+20h+arg_0]
		mov	[esp+20h+arg_4], eax
		mov	eax, [esp+20h+var_C]
		push	eax
		push	ecx
		call	PORT_ArenaRelease_Util
		jmp	loc_1000DB07
; ---------------------------------------------------------------------------

loc_1000DA58:				; CODE XREF: SEC_PKCS7DecryptContents+13Ej
		mov	edx, [esp+20h+var_10]
		push	edx
		push	ebx
		push	105h
		push	ebp
		call	PK11_CreateContextBySymKey
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_1000DA8B
		mov	eax, [esp+20h+var_C]
		mov	ecx, [esp+20h+arg_0]
		push	eax
		push	ecx
		mov	[esp+28h+arg_4], 0FFFFFFFFh
		call	PORT_ArenaRelease_Util
		jmp	short loc_1000DB07
; ---------------------------------------------------------------------------

loc_1000DA8B:				; CODE XREF: SEC_PKCS7DecryptContents+170j
		mov	eax, [esi+3Ch]
		mov	ecx, [esi+38h]
		mov	edx, [esi+44h]
		push	eax
		push	ecx
		add	eax, 40h
		push	eax
		push	edi
		push	edx
		push	ebx
		call	PK11_CipherOp
		push	1
		push	ebx
		mov	[esp+40h+arg_4], eax
		call	PK11_DestroyContext
		mov	eax, [esp+40h+var_10]
		push	eax
		push	ebp
		call	PK11_GetBlockSize
		add	esp, 28h
		test	eax, eax
		jz	short loc_1000DAE0
		mov	edx, [esi+44h]
		mov	ecx, [edi]
		mov	dl, [ecx+edx-1]
		movzx	esi, dl
		cmp	esi, eax
		jg	loc_1000D9A9
		test	dl, dl
		jz	loc_1000D9A9
		sub	ecx, esi
		mov	[edi], ecx

loc_1000DAE0:				; CODE XREF: SEC_PKCS7DecryptContents+1BEj
		cmp	[esp+20h+arg_4], 0FFFFFFFFh
		jnz	short loc_1000DAF8
		mov	eax, [esp+20h+var_C]
		mov	ecx, [esp+20h+arg_0]
		push	eax
		push	ecx
		call	PORT_ArenaRelease_Util
		jmp	short loc_1000DB07
; ---------------------------------------------------------------------------

loc_1000DAF8:				; CODE XREF: SEC_PKCS7DecryptContents+1E5j
		mov	edx, [esp+20h+var_C]
		mov	eax, [esp+20h+arg_0]
		push	edx
		push	eax
		call	PORT_ArenaUnmark_Util

loc_1000DB07:				; CODE XREF: SEC_PKCS7DecryptContents+C0j
					; SEC_PKCS7DecryptContents+E9j	...
		mov	eax, [esp+28h+var_8]
		add	esp, 8
		test	eax, eax
		jz	short loc_1000DB1B
		push	eax
		call	PK11_FreeSymKey
		add	esp, 4

loc_1000DB1B:				; CODE XREF: SEC_PKCS7DecryptContents+210j
		mov	eax, [esp+20h+var_4]
		test	eax, eax
		jz	short loc_1000DB2C
		push	eax
		call	PK11_FreeSlot
		add	esp, 4

loc_1000DB2C:				; CODE XREF: SEC_PKCS7DecryptContents+221j
		mov	eax, [esp+20h+var_10]
		test	eax, eax
		jz	short loc_1000DB3F
		push	1
		push	eax
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_1000DB3F:				; CODE XREF: SEC_PKCS7DecryptContents+232j
		mov	eax, [esp+20h+arg_4]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
SEC_PKCS7DecryptContents endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 155. SEC_PKCS7GetCertificateList

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7GetCertificateList
SEC_PKCS7GetCertificateList proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+0Ch], 0
		jnz	short loc_1000DB6A
		lea	eax, [esi+18h]
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[esi+0Ch], eax

loc_1000DB6A:				; CODE XREF: SEC_PKCS7GetCertificateList+9j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1000DB77
		cmp	dword ptr [eax+0Ch], 1Ah
		jz	short loc_1000DB7B

loc_1000DB77:				; CODE XREF: SEC_PKCS7GetCertificateList+1Fj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000DB7B:				; CODE XREF: SEC_PKCS7GetCertificateList+25j
		mov	ecx, [esi+24h]
		mov	eax, [ecx+38h]
		pop	esi
		retn
SEC_PKCS7GetCertificateList endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DB90	proc near		; CODE XREF: sub_1000DC50+48p

arg_0		= dword	ptr  4

		test	esi, esi
		jz	loc_1000DC37
		test	edi, edi
		jz	loc_1000DC37
		push	ebx
		call	SECOID_FindOIDByTag_Util
		push	eax
		mov	[esi+0Ch], eax
		lea	eax, [esi+18h]
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short locret_1000DC3A
		cmp	[esp+arg_0], eax
		jz	short loc_1000DBC4

loc_1000DBC1:				; CODE XREF: sub_1000DB90+96j
					; sub_1000DB90+A5j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000DBC4:				; CODE XREF: sub_1000DB90+2Fj
		lea	eax, [ebx-1Ah]	; switch 5 cases
		cmp	eax, 4
		ja	short loc_1000DC0D ; jumptable 1000DBCC	default	case
		jmp	ds:off_1000DC3C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000DBD3:				; CODE XREF: sub_1000DB90+3Cj
					; DATA XREF: .text:off_1000DC3Co
		push	58h		; jumptable 1000DBCC cases 27,29
		push	edi
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	ecx, eax
		xor	edx, edx
		jmp	short loc_1000DC1D
; ---------------------------------------------------------------------------

loc_1000DBE4:				; CODE XREF: sub_1000DB90+3Cj
					; DATA XREF: .text:off_1000DC3Co
		push	54h		; jumptable 1000DBCC case 30
		push	edi
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	ecx, eax
		xor	edx, edx
		jmp	short loc_1000DC1D
; ---------------------------------------------------------------------------

loc_1000DBF5:				; CODE XREF: sub_1000DB90+3Cj
					; DATA XREF: .text:off_1000DC3Co
		push	50h		; jumptable 1000DBCC case 26

loc_1000DBF7:				; CODE XREF: sub_1000DB90+7Bj
		push	edi
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	ecx, eax
		mov	edx, 1
		jmp	short loc_1000DC1D
; ---------------------------------------------------------------------------

loc_1000DC09:				; CODE XREF: sub_1000DB90+3Cj
					; DATA XREF: .text:off_1000DC3Co
		push	78h		; jumptable 1000DBCC case 28
		jmp	short loc_1000DBF7
; ---------------------------------------------------------------------------

loc_1000DC0D:				; CODE XREF: sub_1000DB90+3Aj
		push	0Ch		; jumptable 1000DBCC default case
		push	edi
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		xor	ecx, ecx
		or	edx, 0FFFFFFFFh

loc_1000DC1D:				; CODE XREF: sub_1000DB90+52j
					; sub_1000DB90+63j ...
		mov	[esi+24h], eax
		test	eax, eax
		jz	short loc_1000DC37
		test	ecx, ecx
		jz	short loc_1000DBC1
		push	edx
		push	ecx
		push	edi
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000DBC1

loc_1000DC37:				; CODE XREF: sub_1000DB90+2j
					; sub_1000DB90+Aj ...
		or	eax, 0FFFFFFFFh

locret_1000DC3A:			; CODE XREF: sub_1000DB90+29j
		retn
sub_1000DB90	endp

; ---------------------------------------------------------------------------
		align 4
off_1000DC3C	dd offset loc_1000DBF5	; DATA XREF: sub_1000DB90+3Cr
		dd offset loc_1000DBD3	; jump table for switch	statement
		dd offset loc_1000DC09
		dd offset loc_1000DBD3
		dd offset loc_1000DBE4

; =============== S U B	R O U T	I N E =======================================


sub_1000DC50	proc near		; CODE XREF: sub_1000DF40+Bp
					; SEC_PKCS7CreateCertsOnly+Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	400h
		call	PORT_NewArena_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1000DC66
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000DC66:				; CODE XREF: sub_1000DC50+12j
		push	esi
		push	28h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1000DCA4
		mov	eax, [esp+8+arg_4]
		mov	edx, [esp+8+arg_0]
		mov	ecx, [esp+8+arg_8]
		mov	[esi+10h], eax
		mov	eax, 1
		push	edx
		mov	[esi], edi
		mov	[esi+14h], ecx
		mov	[esi+4], eax
		mov	[esi+8], eax
		call	sub_1000DB90
		add	esp, 4
		test	eax, eax
		jz	short loc_1000DCB4

loc_1000DCA4:				; CODE XREF: sub_1000DC50+26j
		push	0
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000DCB4:				; CODE XREF: sub_1000DC50+52j
		mov	eax, esi
		pop	esi
		pop	edi
		retn
sub_1000DC50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DCC0	proc near		; CODE XREF: SEC_PKCS7CreateSignedData+2Bp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 14h
		push	ebx
		push	edi
		push	esi
		mov	edi, eax
		mov	ebx, ecx
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_1000DCF3
		sub	eax, 2
		jz	short loc_1000DCE5

loc_1000DCDC:				; CODE XREF: sub_1000DCC0+58j
					; sub_1000DCC0+7Bj ...
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DCE5:				; CODE XREF: sub_1000DCC0+1Aj
		mov	eax, [esi+24h]
		lea	ecx, [eax+10h]
		lea	edx, [eax+68h]
		add	eax, 64h
		jmp	short loc_1000DCFF
; ---------------------------------------------------------------------------

loc_1000DCF3:				; CODE XREF: sub_1000DCC0+15j
		mov	eax, [esi+24h]
		lea	ecx, [eax+0Ch]
		lea	edx, [eax+44h]
		add	eax, 40h

loc_1000DCFF:				; CODE XREF: sub_1000DCC0+31j
		mov	[esp+1Ch+var_10], eax
		mov	[esp+1Ch+var_8], edx
		mov	[esp+1Ch+var_C], ecx
		test	edi, edi
		jnz	short loc_1000DD1A
		call	CERT_GetDefaultCertDB
		mov	edi, eax
		test	edi, edi
		jz	short loc_1000DCDC

loc_1000DD1A:				; CODE XREF: sub_1000DCC0+4Dj
		mov	eax, [esi+14h]
		push	0
		push	eax
		call	ds:PR_Now
		mov	ecx, [esp+24h+arg_0]
		push	edx
		push	eax
		push	ecx
		push	1
		push	ebx
		push	edi
		call	CERT_VerifyCert
		add	esp, 20h
		test	eax, eax
		jnz	short loc_1000DCDC
		mov	edx, [esp+1Ch+var_10]
		cmp	[edx], eax
		jnz	short loc_1000DCDC
		mov	eax, [esp+1Ch+var_C]
		cmp	dword ptr [eax], 0
		jnz	short loc_1000DCDC
		mov	ecx, [esp+1Ch+var_8]
		cmp	dword ptr [ecx], 0
		jnz	short loc_1000DCDC
		mov	edx, [esi]
		push	ebp
		push	edx
		call	PORT_ArenaMark_Util
		mov	ebp, eax
		mov	eax, [esi]
		push	5Ch
		push	eax
		mov	[esp+2Ch+var_14], ebp
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000DDDC
		mov	edx, [esi]
		push	1
		push	edi
		push	edx
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000DE05
		push	ebx
		call	CERT_DupCertificate
		add	esp, 4
		mov	[edi+54h], eax
		test	eax, eax
		jz	short loc_1000DDDC
		mov	edx, [esi]
		push	ebx
		push	edx
		call	CERT_GetCertIssuerAndSN
		add	esp, 8
		mov	[edi+0Ch], eax
		test	eax, eax
		mov	eax, [esi]
		jnz	short loc_1000DDC4
		push	ebp
		push	eax
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DDC4:				; CODE XREF: sub_1000DCC0+EEj
		mov	ecx, [esp+20h+arg_4]
		push	0
		push	ecx
		lea	edx, [edi+10h]
		push	edx
		push	eax
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000DDF2

loc_1000DDDC:				; CODE XREF: sub_1000DCC0+B7j
					; sub_1000DCC0+D9j
		mov	ecx, [esi]
		push	ebp
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DDF2:				; CODE XREF: sub_1000DCC0+11Aj
		mov	edx, [esi]
		push	8
		push	edx
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_1000DE1B

loc_1000DE05:				; CODE XREF: sub_1000DCC0+C9j
		mov	eax, [esi]
		push	ebp
		push	eax
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DE1B:				; CODE XREF: sub_1000DCC0+143j
		mov	[ebx], edi
		mov	dword ptr [ebx+4], 0
		mov	ecx, [esi]
		push	18h
		push	ecx
		call	PORT_ArenaZAlloc_Util
		mov	edx, [esi]
		push	8
		push	edx
		mov	edi, eax
		call	PORT_ArenaAlloc_Util
		add	esp, 10h
		mov	ebp, eax
		test	edi, edi
		jz	loc_1000DF1A
		test	ebp, ebp
		jz	loc_1000DF1A
		mov	eax, [esp+20h+arg_4]
		mov	ecx, [esi]
		push	0
		push	eax
		push	edi
		push	ecx
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000DE80
		mov	edx, [esp+20h+var_14]
		mov	eax, [esi]
		push	edx
		push	eax
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DE80:				; CODE XREF: sub_1000DCC0+1A4j
		mov	[ebp+0], edi
		xor	edi, edi
		mov	[ebp+4], edi
		cmp	[esp+20h+arg_8], edi
		jz	short loc_1000DED5
		mov	ecx, [esi]
		push	0Ch
		push	ecx
		call	PORT_ArenaAlloc_Util
		mov	edx, [esi]
		push	8
		push	edx
		mov	[esp+30h+var_4], eax
		call	PORT_ArenaAlloc_Util
		mov	edi, eax
		mov	eax, [esp+30h+var_4]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000DF00
		test	edi, edi
		jz	short loc_1000DF00
		mov	ecx, [esp+20h+arg_8]
		mov	edx, [esi]
		push	ecx
		push	eax
		push	edx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000DF00
		mov	edx, [esp+20h+var_4]
		mov	[edi], edx
		mov	[edi+4], eax

loc_1000DED5:				; CODE XREF: sub_1000DCC0+1CCj
		mov	edx, [esp+20h+var_10]
		mov	eax, [esp+20h+var_C]
		mov	ecx, [esp+20h+var_8]
		mov	[edx], ebx
		mov	edx, [esp+20h+var_14]
		mov	[eax], ebp
		mov	[ecx], edi
		mov	eax, [esi]
		push	edx
		push	eax
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DF00:				; CODE XREF: sub_1000DCC0+1F1j
					; sub_1000DCC0+1F5j ...
		mov	eax, [esp+20h+var_14]
		mov	ecx, [esi]
		push	eax
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DF1A:				; CODE XREF: sub_1000DCC0+181j
					; sub_1000DCC0+189j
		mov	ecx, [esp+20h+var_14]
		mov	edx, [esi]
		push	ecx
		push	edx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
sub_1000DCC0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DF40	proc near		; CODE XREF: SEC_PKCS7CreateSignedData+9p
		push	ebx
		push	edi
		push	eax
		push	ecx
		push	0
		mov	ebx, 1Ah
		call	sub_1000DC50
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_1000DF5C
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000DF5C:				; CODE XREF: sub_1000DF40+17j
		mov	ebx, [edi]
		push	esi
		mov	esi, [edi+24h]
		add	esi, 10h
		jz	short loc_1000DF87
		test	ebx, ebx
		jz	short loc_1000DF87
		push	19h
		call	SECOID_FindOIDByTag_Util
		mov	[esi+0Ch], eax
		push	eax
		add	esi, 18h
		push	esi
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000DF96

loc_1000DF87:				; CODE XREF: sub_1000DF40+25j
					; sub_1000DF40+29j
		push	edi
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000DF96:				; CODE XREF: sub_1000DF40+45j
		pop	esi
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
sub_1000DF40	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 141. SEC_PKCS7CreateSignedData

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7CreateSignedData
SEC_PKCS7CreateSignedData proc near	; CODE XREF: sub_10009770+E1p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, [esp+arg_18]
		mov	ecx, [esp+arg_14]
		push	esi
		call	sub_1000DF40
		mov	esi, eax
		test	esi, esi
		jz	short loc_1000DFE0
		mov	eax, [esp+4+arg_10]
		mov	ecx, [esp+4+arg_C]
		mov	edx, [esp+4+arg_4]
		push	eax
		mov	eax, [esp+8+arg_8]
		push	ecx
		mov	ecx, [esp+0Ch+arg_0]
		push	edx
		call	sub_1000DCC0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000DFE4
		push	esi
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4

loc_1000DFE0:				; CODE XREF: SEC_PKCS7CreateSignedData+12j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000DFE4:				; CODE XREF: SEC_PKCS7CreateSignedData+35j
		mov	eax, esi
		pop	esi
		retn
SEC_PKCS7CreateSignedData endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DFF0	proc near		; CODE XREF: sub_1000E0C0+92p
					; sub_1000E0C0+A1p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		push	ebp
		push	esi
		push	edi
		call	PORT_ArenaMark_Util
		push	18h
		push	edi
		mov	[esp+1Ch+var_4], eax
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1000E06E
		mov	eax, [esp+10h+arg_0]
		push	eax
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_1000E06E
		push	eax
		push	esi
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000E06E
		push	8
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_1000E06E
		cmp	[esp+10h+arg_4], 0
		jz	short loc_1000E087
		push	0Ch
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	short loc_1000E06E
		mov	ecx, [esp+10h+arg_4]
		push	ecx
		push	ebp
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000E083

loc_1000E06E:				; CODE XREF: sub_1000DFF0+1Dj
					; sub_1000DFF0+31j ...
		mov	edx, [esp+10h+var_4]
		push	edx
		push	edi
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000E083:				; CODE XREF: sub_1000DFF0+7Cj
		mov	[esp+10h+arg_4], ebp

loc_1000E087:				; CODE XREF: sub_1000DFF0+58j
		mov	edx, [esp+10h+var_4]
		mov	eax, [esp+10h+arg_4]
		mov	ecx, [esp+10h+arg_8]
		push	edx
		mov	[ebx], eax
		mov	dword ptr [ebx+4], 0
		push	edi
		mov	[esi+0Ch], ebx
		mov	[esi+14h], ecx
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1000DFF0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E0C0	proc near		; CODE XREF: SEC_PKCS7AddSigningTime+B8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		call	SEC_PKCS7ContentType
		add	esp, 4
		cmp	eax, 1Ah
		jz	short loc_1000E0D2
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E0D2:				; CODE XREF: sub_1000E0C0+Cj
		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_1000E121
		xor	esi, esi
		cmp	[eax], esi
		jz	short loc_1000E0EB

loc_1000E0E4:				; CODE XREF: sub_1000E0C0+29j
		inc	esi
		cmp	dword ptr [eax+esi*4], 0
		jnz	short loc_1000E0E4

loc_1000E0EB:				; CODE XREF: sub_1000E0C0+22j
		lea	ecx, ds:8[esi*4]
		push	ecx
		lea	edx, ds:4[esi*4]
		push	edx
		push	eax
		mov	eax, [ebx]
		push	eax
		call	PORT_ArenaGrow_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000E134
		mov	ecx, [esp+8+arg_4]
		mov	[eax+esi*4], ecx
		mov	dword ptr [eax+esi*4+4], 0
		mov	[edi], eax
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000E121:				; CODE XREF: sub_1000E0C0+1Cj
		mov	edx, [ebx]
		push	10h
		push	edx
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1000E13A

loc_1000E134:				; CODE XREF: sub_1000E0C0+49j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000E13A:				; CODE XREF: sub_1000E0C0+72j
		mov	eax, [ebx]
		push	ebp
		push	eax
		call	PORT_ArenaMark_Util
		mov	edi, [ebx]
		mov	ebp, eax
		mov	eax, [ebx+24h]
		add	eax, 28h
		push	0
		push	eax
		push	21h
		call	sub_1000DFF0
		push	0
		mov	[esi], eax
		mov	edi, [ebx]
		push	0
		push	22h
		call	sub_1000DFF0
		add	esp, 1Ch
		cmp	dword ptr [esi], 0
		mov	[esi+4], eax
		jz	short loc_1000E19B
		test	eax, eax
		jz	short loc_1000E19B
		mov	ecx, [esp+0Ch+arg_4]
		mov	edx, [esp+0Ch+arg_0]
		mov	[esi+8], ecx
		mov	dword ptr [esi+0Ch], 0
		mov	[edx], esi
		mov	eax, [ebx]
		push	ebp
		push	eax
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000E19B:				; CODE XREF: sub_1000E0C0+AFj
					; sub_1000E0C0+B3j
		mov	ecx, [ebx]
		push	ebp
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_1000E0C0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 131. SEC_PKCS7AddSigningTime

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7AddSigningTime
SEC_PKCS7AddSigningTime	proc near	; CODE XREF: sub_10009770+110p
					; DATA XREF: .rdata:off_10016AC8o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4

		sub	esp, 14h
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	esi
		call	SEC_PKCS7ContentType
		add	esp, 4
		cmp	eax, 1Ah
		jz	short loc_1000E1CE
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000E1CE:				; CODE XREF: SEC_PKCS7AddSigningTime+14j
		mov	eax, [esi+24h]
		push	ebx
		mov	ebx, [eax+40h]
		mov	[esp+1Ch+var_10], ebx
		test	ebx, ebx
		jz	loc_1000E28E
		cmp	dword ptr [ebx], 0
		jz	loc_1000E28E
		call	ds:PR_Now
		push	edx
		push	eax
		lea	ecx, [esp+24h+var_C]
		push	ecx
		push	0
		call	DER_EncodeTimeChoice_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000E232
		push	edi
		mov	edi, [esi]
		push	eax
		lea	edx, [esp+24h+var_C]
		push	edx
		push	23h
		call	sub_1000DFF0
		mov	esi, eax
		lea	eax, [esp+2Ch+var_C]
		push	0
		push	eax
		mov	[esp+34h+var_14], esi
		call	SECITEM_FreeItem_Util
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000E238
		or	eax, 0FFFFFFFFh
		pop	edi

loc_1000E232:				; CODE XREF: SEC_PKCS7AddSigningTime+53j
		pop	ebx
		pop	esi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000E238:				; CODE XREF: SEC_PKCS7AddSigningTime+7Cj
		push	ebp
		xor	edi, edi
		xor	ebp, ebp
		cmp	[ebx], edi
		jz	short loc_1000E284
		mov	esi, ebx

loc_1000E243:				; CODE XREF: SEC_PKCS7AddSigningTime+D2j
		mov	ecx, [esi]
		mov	edx, [ecx+28h]
		push	0
		push	23h
		push	edx
		call	sub_100112A0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000E27A
		mov	eax, [esp+24h+var_14]
		mov	ecx, [esi]
		mov	ebx, [esp+24h+arg_0]
		push	eax
		add	ecx, 28h
		push	ecx
		call	sub_1000E0C0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1000E284
		mov	ebx, [esp+24h+var_10]

loc_1000E27A:				; CODE XREF: SEC_PKCS7AddSigningTime+A7j
		inc	ebp
		cmp	dword ptr [ebx+ebp*4], 0
		lea	esi, [ebx+ebp*4]
		jnz	short loc_1000E243

loc_1000E284:				; CODE XREF: SEC_PKCS7AddSigningTime+8Fj
					; SEC_PKCS7AddSigningTime+C4j
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	esi
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000E28E:				; CODE XREF: SEC_PKCS7AddSigningTime+2Bj
					; SEC_PKCS7AddSigningTime+34j
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 14h
		retn
SEC_PKCS7AddSigningTime	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 161. SEC_PKCS7IncludeCertChain

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7IncludeCertChain
SEC_PKCS7IncludeCertChain proc near	; CODE XREF: sub_10009770+F9p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	esi
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_1000E2C1
		sub	eax, 2
		jnz	short loc_1000E2E8
		mov	eax, [esi+24h]
		mov	edi, [eax+64h]
		jmp	short loc_1000E2C7
; ---------------------------------------------------------------------------

loc_1000E2C1:				; CODE XREF: SEC_PKCS7IncludeCertChain+12j
		mov	ecx, [esi+24h]
		mov	edi, [ecx+40h]

loc_1000E2C7:				; CODE XREF: SEC_PKCS7IncludeCertChain+1Fj
		test	edi, edi
		jz	short loc_1000E2E8
		cmp	[esp+8+arg_4], 0
		jnz	short loc_1000E2EE
		call	CERT_GetDefaultCertDB
		test	eax, eax
		jnz	short loc_1000E2EE
		push	0FFFFE012h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000E2E8:				; CODE XREF: SEC_PKCS7IncludeCertChain+17j
					; SEC_PKCS7IncludeCertChain+29j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000E2EE:				; CODE XREF: SEC_PKCS7IncludeCertChain+30j
					; SEC_PKCS7IncludeCertChain+39j
		mov	esi, [edi]
		test	esi, esi
		jz	short loc_1000E314

loc_1000E2F4:				; CODE XREF: SEC_PKCS7IncludeCertChain+72j
		mov	eax, [esi+54h]
		add	edi, 4
		test	eax, eax
		jz	short loc_1000E30E
		push	0
		push	4
		push	eax
		call	CERT_CertChainFromCert
		add	esp, 0Ch
		mov	[esi+58h], eax

loc_1000E30E:				; CODE XREF: SEC_PKCS7IncludeCertChain+5Cj
		mov	esi, [edi]
		test	esi, esi
		jnz	short loc_1000E2F4

loc_1000E314:				; CODE XREF: SEC_PKCS7IncludeCertChain+52j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
SEC_PKCS7IncludeCertChain endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E320	proc near		; CODE XREF: SEC_PKCS7CreateCertsOnly+66p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	ebx
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_1000E33C
		sub	eax, 2
		jnz	short loc_1000E35F
		mov	edi, [ebx+24h]
		add	edi, 70h
		jmp	short loc_1000E342
; ---------------------------------------------------------------------------

loc_1000E33C:				; CODE XREF: sub_1000E320+Dj
		mov	edi, [ebx+24h]
		add	edi, 4Ch

loc_1000E342:				; CODE XREF: sub_1000E320+1Aj
		cmp	[esp+4+arg_4], 0
		jnz	short loc_1000E364
		call	CERT_GetDefaultCertDB
		test	eax, eax
		jnz	short loc_1000E364
		push	0FFFFE012h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000E35F:				; CODE XREF: sub_1000E320+12j
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000E364:				; CODE XREF: sub_1000E320+27j
					; sub_1000E320+30j
		mov	eax, [esp+4+arg_0]
		push	ebp
		push	0
		push	4
		push	eax
		call	CERT_CertChainFromCert
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	short loc_1000E382
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000E382:				; CODE XREF: sub_1000E320+5Aj
		mov	eax, [edi]
		push	esi
		xor	esi, esi
		test	eax, eax
		jnz	short loc_1000E39A
		mov	ecx, [ebx]
		push	8
		push	ecx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		jmp	short loc_1000E3C3
; ---------------------------------------------------------------------------

loc_1000E39A:				; CODE XREF: sub_1000E320+69j
		cmp	[eax], esi
		jz	short loc_1000E3A7
		mov	edi, edi

loc_1000E3A0:				; CODE XREF: sub_1000E320+85j
		inc	esi
		cmp	dword ptr [eax+esi*4], 0
		jnz	short loc_1000E3A0

loc_1000E3A7:				; CODE XREF: sub_1000E320+7Cj
		lea	edx, ds:8[esi*4]
		push	edx
		mov	edx, [ebx]
		lea	ecx, ds:4[esi*4]
		push	ecx
		push	eax
		push	edx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_1000E3C3:				; CODE XREF: sub_1000E320+78j
		test	eax, eax
		jnz	short loc_1000E3D7
		push	ebp
		call	CERT_DestroyCertificateList
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000E3D7:				; CODE XREF: sub_1000E320+A5j
		mov	[eax+esi*4], ebp
		mov	dword ptr [eax+esi*4+4], 0
		pop	esi
		mov	[edi], eax
		pop	ebp
		xor	eax, eax
		pop	edi
		retn
sub_1000E320	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E3F0	proc near		; CODE XREF: SEC_PKCS7CreateCertsOnly+75p
					; SEC_PKCS7AddCertificate+22p

arg_0		= dword	ptr  4

		push	edi
		push	ebx
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_1000E411
		sub	eax, 2
		jz	short loc_1000E409
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000E409:				; CODE XREF: sub_1000E3F0+12j
		mov	edi, [ebx+24h]
		add	edi, 6Ch
		jmp	short loc_1000E417
; ---------------------------------------------------------------------------

loc_1000E411:				; CODE XREF: sub_1000E3F0+Dj
		mov	edi, [ebx+24h]
		add	edi, 48h

loc_1000E417:				; CODE XREF: sub_1000E3F0+1Fj
		mov	eax, [esp+4+arg_0]
		push	ebp
		push	eax
		call	CERT_DupCertificate
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_1000E431
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000E431:				; CODE XREF: sub_1000E3F0+39j
		mov	eax, [edi]
		push	esi
		xor	esi, esi
		test	eax, eax
		jnz	short loc_1000E449
		mov	ecx, [ebx]
		push	8
		push	ecx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		jmp	short loc_1000E473
; ---------------------------------------------------------------------------

loc_1000E449:				; CODE XREF: sub_1000E3F0+48j
		cmp	[eax], esi
		jz	short loc_1000E457
		lea	ecx, [ecx+0]

loc_1000E450:				; CODE XREF: sub_1000E3F0+65j
		inc	esi
		cmp	dword ptr [eax+esi*4], 0
		jnz	short loc_1000E450

loc_1000E457:				; CODE XREF: sub_1000E3F0+5Bj
		lea	edx, ds:8[esi*4]
		push	edx
		mov	edx, [ebx]
		lea	ecx, ds:4[esi*4]
		push	ecx
		push	eax
		push	edx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_1000E473:				; CODE XREF: sub_1000E3F0+57j
		test	eax, eax
		jnz	short loc_1000E487
		push	ebp
		call	CERT_DestroyCertificate
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000E487:				; CODE XREF: sub_1000E3F0+85j
		mov	[eax+esi*4], ebp
		mov	dword ptr [eax+esi*4+4], 0
		pop	esi
		mov	[edi], eax
		pop	ebp
		xor	eax, eax
		pop	edi
		retn
sub_1000E3F0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 137. SEC_PKCS7CreateCertsOnly

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7CreateCertsOnly
SEC_PKCS7CreateCertsOnly proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		push	0
		push	0
		push	0
		mov	ebx, 1Ah
		call	sub_1000DC50
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_1000E4EF
		mov	esi, [ebx+24h]
		add	esi, 10h
		mov	edi, [ebx]
		jz	short loc_1000E4E6
		test	edi, edi
		jz	short loc_1000E4E6
		push	19h
		call	SECOID_FindOIDByTag_Util
		mov	[esi+0Ch], eax
		push	eax
		add	esi, 18h
		push	esi
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000E4F5

loc_1000E4E6:				; CODE XREF: SEC_PKCS7CreateCertsOnly+24j
					; SEC_PKCS7CreateCertsOnly+28j	...
		push	ebx
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4

loc_1000E4EF:				; CODE XREF: SEC_PKCS7CreateCertsOnly+1Aj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E4F5:				; CODE XREF: SEC_PKCS7CreateCertsOnly+44j
		cmp	[esp+0Ch+arg_4], 0
		jz	short loc_1000E510
		mov	eax, [esp+0Ch+arg_8]
		mov	ecx, [esp+0Ch+arg_0]
		push	eax
		push	ecx
		call	sub_1000E320
		add	esp, 8
		jmp	short loc_1000E51D
; ---------------------------------------------------------------------------

loc_1000E510:				; CODE XREF: SEC_PKCS7CreateCertsOnly+5Aj
		mov	edx, [esp+0Ch+arg_0]
		push	edx
		call	sub_1000E3F0
		add	esp, 4

loc_1000E51D:				; CODE XREF: SEC_PKCS7CreateCertsOnly+6Ej
		test	eax, eax
		jnz	short loc_1000E4E6
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
SEC_PKCS7CreateCertsOnly endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 129. SEC_PKCS7AddCertificate

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7AddCertificate
SEC_PKCS7AddCertificate	proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebx
		call	SEC_PKCS7ContentType
		add	esp, 4
		cmp	eax, 1Ah
		jz	short loc_1000E54D
		cmp	eax, 1Ch
		jz	short loc_1000E54D
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E54D:				; CODE XREF: SEC_PKCS7AddCertificate+11j
					; SEC_PKCS7AddCertificate+16j
		mov	eax, [esp+4+arg_4]
		push	eax
		call	sub_1000E3F0
		add	esp, 4
		pop	ebx
		retn
SEC_PKCS7AddCertificate	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E560	proc near		; CODE XREF: SEC_PKCS7CreateEnvelopedData+2Fp
					; SEC_PKCS7AddRecipient+13p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	esi
		push	edi
		mov	esi, eax
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Bh
		jz	short loc_1000E585
		dec	eax
		jz	short loc_1000E585

loc_1000E57C:				; CODE XREF: sub_1000E560+3Cj
					; sub_1000E560+5Fj
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000E585:				; CODE XREF: sub_1000E560+17j
					; sub_1000E560+1Aj
		mov	eax, [edi+24h]
		add	eax, 0Ch
		mov	[esp+10h+var_8], eax
		test	esi, esi
		jnz	short loc_1000E59E
		call	CERT_GetDefaultCertDB
		mov	esi, eax
		test	esi, esi
		jz	short loc_1000E57C

loc_1000E59E:				; CODE XREF: sub_1000E560+31j
		mov	eax, [edi+14h]
		push	0
		push	eax
		call	ds:PR_Now
		mov	ecx, [esp+18h+arg_4]
		push	edx
		push	eax
		push	ecx
		push	1
		push	ebp
		push	esi
		call	CERT_VerifyCert
		add	esp, 20h
		test	eax, eax
		jnz	short loc_1000E57C
		mov	edx, [edi]
		push	ebx
		push	edx
		call	PORT_ArenaMark_Util
		mov	esi, eax
		mov	eax, [edi]
		push	38h
		push	eax
		mov	[esp+20h+var_4], esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_1000E605
		mov	edx, [edi]
		push	0
		push	ebx
		push	edx
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000E62E
		push	ebp
		call	CERT_DupCertificate
		add	esp, 4
		mov	[ebx+34h], eax
		test	eax, eax
		jnz	short loc_1000E61B

loc_1000E605:				; CODE XREF: sub_1000E560+81j
		mov	ecx, [edi]
		push	esi
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000E61B:				; CODE XREF: sub_1000E560+A3j
		mov	edx, [edi]
		push	ebp
		push	edx
		call	CERT_GetCertIssuerAndSN
		add	esp, 8
		mov	[ebx+0Ch], eax
		test	eax, eax
		jnz	short loc_1000E644

loc_1000E62E:				; CODE XREF: sub_1000E560+93j
		mov	eax, [edi]
		push	esi
		push	eax
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000E644:				; CODE XREF: sub_1000E560+CCj
		mov	ebp, [esp+14h+var_8]
		mov	eax, [ebp+0]
		xor	esi, esi
		test	eax, eax
		jnz	short loc_1000E660
		mov	ecx, [edi]
		push	8
		push	ecx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		jmp	short loc_1000E687
; ---------------------------------------------------------------------------

loc_1000E660:				; CODE XREF: sub_1000E560+EFj
		cmp	[eax], esi
		jz	short loc_1000E66B

loc_1000E664:				; CODE XREF: sub_1000E560+109j
		inc	esi
		cmp	dword ptr [eax+esi*4], 0
		jnz	short loc_1000E664

loc_1000E66B:				; CODE XREF: sub_1000E560+102j
		lea	edx, ds:8[esi*4]
		push	edx
		mov	edx, [edi]
		lea	ecx, ds:4[esi*4]
		push	ecx
		push	eax
		push	edx
		call	PORT_ArenaGrow_Util
		add	esp, 10h

loc_1000E687:				; CODE XREF: sub_1000E560+FEj
		test	eax, eax
		jnz	short loc_1000E6A5
		mov	eax, [esp+14h+var_4]
		mov	ecx, [edi]
		push	eax
		push	ecx
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000E6A5:				; CODE XREF: sub_1000E560+129j
		mov	edx, [esp+14h+var_4]
		mov	[eax+esi*4], ebx
		mov	dword ptr [eax+esi*4+4], 0
		mov	[ebp+0], eax
		mov	eax, [edi]
		push	edx
		push	eax
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 8
		retn
sub_1000E560	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 140. SEC_PKCS7CreateEnvelopedData

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7CreateEnvelopedData
SEC_PKCS7CreateEnvelopedData proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	eax, [esp+arg_18]
		mov	ecx, [esp+arg_14]
		push	ebx
		push	edi
		push	eax
		push	ecx
		push	0
		mov	ebx, 1Bh
		call	sub_1000DC50
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000E714
		mov	edx, [esp+8+arg_4]
		mov	eax, [esp+8+arg_0]
		push	edx
		push	eax
		mov	eax, [esp+10h+arg_8]
		call	sub_1000E560
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E719
		push	edi
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4

loc_1000E714:				; CODE XREF: SEC_PKCS7CreateEnvelopedData+1Fj
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E719:				; CODE XREF: SEC_PKCS7CreateEnvelopedData+39j
		mov	ebx, [edi]
		push	esi
		mov	esi, [edi+24h]
		add	esi, 10h
		jz	short loc_1000E757
		test	ebx, ebx
		jz	short loc_1000E757
		push	19h
		call	SECOID_FindOIDByTag_Util
		push	eax
		lea	ecx, [esi+4]
		push	ecx
		push	ebx
		mov	[esi], eax
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000E757
		mov	eax, [esp+0Ch+arg_C]
		mov	edx, [esp+0Ch+arg_10]
		mov	[esi+44h], eax
		mov	[esi+40h], edx
		pop	esi
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E757:				; CODE XREF: SEC_PKCS7CreateEnvelopedData+52j
					; SEC_PKCS7CreateEnvelopedData+56j ...
		push	edi
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
SEC_PKCS7CreateEnvelopedData endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 130. SEC_PKCS7AddRecipient

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7AddRecipient
SEC_PKCS7AddRecipient proc near		; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		push	edi
		mov	edi, [esp+4+arg_0]
		push	eax
		mov	eax, [esp+8+arg_C]
		push	ecx
		call	sub_1000E560
		add	esp, 8
		pop	edi
		retn
SEC_PKCS7AddRecipient endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 138. SEC_PKCS7CreateData

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7CreateData
SEC_PKCS7CreateData proc near		; CODE XREF: SEC_PKCS12CreateUnencryptedSafe+4Fp
					; sub_10009770:loc_1000988Dp
					; DATA XREF: ...
		push	ebx
		push	0
		push	0
		push	0
		mov	ebx, 19h
		call	sub_1000DC50
		add	esp, 0Ch
		pop	ebx
		retn
SEC_PKCS7CreateData endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 139. SEC_PKCS7CreateEncryptedData

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7CreateEncryptedData
SEC_PKCS7CreateEncryptedData proc near	; CODE XREF: SEC_PKCS12CreatePasswordPrivSafe+77p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		mov	ecx, [esp+arg_8]
		push	ebx
		push	edi
		push	eax
		push	ecx
		push	0
		mov	ebx, 1Eh
		call	sub_1000DC50
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_1000E7D4
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E7D4:				; CODE XREF: SEC_PKCS7CreateEncryptedData+1Fj
		push	ebp
		mov	ebp, [edi+24h]
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	esi
		lea	ebx, [ebp+1Ch]
		call	SEC_PKCS5IsAlgorithmPBEAlgTag
		add	esp, 4
		push	0
		test	eax, eax
		jnz	short loc_1000E800
		mov	edx, [edi]
		push	esi
		push	ebx
		push	edx
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h
		mov	ebx, eax
		jmp	short loc_1000E82B
; ---------------------------------------------------------------------------

loc_1000E800:				; CODE XREF: SEC_PKCS7CreateEncryptedData+3Dj
		push	7D0h
		push	esi
		call	PK11_CreatePBEAlgorithmID
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1000E86C
		mov	eax, [edi]
		push	esi
		push	ebx
		push	eax
		call	SECOID_CopyAlgorithmID_Util
		push	1
		push	esi
		mov	ebx, eax
		call	SECOID_DestroyAlgorithmID_Util
		add	esp, 14h

loc_1000E82B:				; CODE XREF: SEC_PKCS7CreateEncryptedData+4Ej
		test	ebx, ebx
		jnz	short loc_1000E86C
		mov	ebx, [edi]
		lea	esi, [ebp+0Ch]
		test	esi, esi
		jz	short loc_1000E86C
		test	ebx, ebx
		jz	short loc_1000E86C
		push	19h
		call	SECOID_FindOIDByTag_Util
		push	eax
		lea	ecx, [esi+4]
		push	ecx
		push	ebx
		mov	[esi], eax
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000E86C
		mov	eax, [esp+10h+arg_0]
		mov	edx, [esp+10h+arg_4]
		mov	[esi+44h], eax
		mov	[esi+40h], edx
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E86C:				; CODE XREF: SEC_PKCS7CreateEncryptedData+62j
					; SEC_PKCS7CreateEncryptedData+7Dj ...
		push	edi
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4
		pop	esi
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
SEC_PKCS7CreateEncryptedData endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E880	proc near		; CODE XREF: sub_1000EA20+27p
					; sub_1000EF10+19p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [edi+10h]
		sub	esp, 8
		push	ebx
		push	ebp
		xor	ebx, ebx
		push	esi
		test	eax, eax
		jz	loc_1000E9B0
		mov	ebx, [esp+14h+arg_C]
		mov	esi, [esp+14h+arg_8]
		push	ebx
		push	esi
		push	eax
		call	sub_10010E30
		mov	ebp, eax
		add	esp, 0Ch
		mov	[esp+14h+var_8], ebp
		test	ebp, ebp
		jnz	short loc_1000E8E9
		test	esi, esi
		jz	loc_1000EA0E
		mov	eax, [esp+14h+arg_4]
		mov	ecx, [edi+10h]
		push	ebx
		push	esi
		push	eax
		push	ebp
		push	ebp
		push	ebp
		push	ecx
		call	sub_10010EA0
		add	esp, 1Ch
		test	eax, eax
		jz	loc_1000EA0E
		call	PORT_GetError_Util
		mov	edx, [esp+14h+arg_0]
		pop	esi
		pop	ebp
		mov	[edx+34h], eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000E8E9:				; CODE XREF: sub_1000E880+2Ej
		mov	eax, [esp+14h+arg_0]
		cmp	dword ptr [eax+8], 0
		jz	short loc_1000E902
		push	ebp
		call	PORT_Alloc_Util
		add	esp, 4
		mov	ebx, eax
		xor	esi, esi
		jmp	short loc_1000E94C
; ---------------------------------------------------------------------------

loc_1000E902:				; CODE XREF: sub_1000E880+71j
		mov	eax, [eax+4]
		mov	esi, [eax+24h]
		mov	ebp, [esi+4Ch]
		add	esi, 44h
		test	ebp, ebp
		jnz	short loc_1000E926
		mov	ecx, [esp+14h+var_8]
		mov	edx, [eax]
		push	ecx
		push	edx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		mov	ebx, eax
		jmp	short loc_1000E945
; ---------------------------------------------------------------------------

loc_1000E926:				; CODE XREF: sub_1000E880+90j
		mov	edx, [esp+14h+var_8]
		mov	ecx, [esi+4]
		add	edx, ebp
		push	edx
		mov	edx, [eax]
		push	ebp
		push	ecx
		push	edx
		call	PORT_ArenaGrow_Util
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_1000E945
		add	ebx, ebp

loc_1000E945:				; CODE XREF: sub_1000E880+A4j
					; sub_1000E880+C1j
		mov	ebp, [esp+14h+var_8]
		mov	[esi+4], ebx

loc_1000E94C:				; CODE XREF: sub_1000E880+80j
		test	ebx, ebx
		jnz	short loc_1000E962
		mov	eax, [esp+14h+arg_0]
		pop	esi
		pop	ebp
		mov	dword ptr [eax+34h], 0FFFFE013h
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000E962:				; CODE XREF: sub_1000E880+CEj
		mov	ecx, [esp+14h+arg_C]
		mov	edx, [esp+14h+arg_8]
		mov	eax, [esp+14h+arg_4]
		push	ecx
		push	edx
		mov	edx, [edi+10h]
		push	eax
		push	ebp
		lea	ecx, [esp+24h+var_4]
		push	ecx
		push	ebx
		push	edx
		call	sub_10010EA0
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000E99B
		call	PORT_GetError_Util
		mov	ecx, [esp+14h+arg_0]
		pop	esi
		pop	ebp
		mov	[ecx+34h], eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000E99B:				; CODE XREF: sub_1000E880+106j
		test	esi, esi
		jz	short loc_1000E9A6
		mov	edx, [esp+14h+var_4]
		add	[esi+8], edx

loc_1000E9A6:				; CODE XREF: sub_1000E880+11Dj
		mov	ebp, [esp+14h+var_4]
		mov	[esp+14h+arg_4], ebx
		jmp	short loc_1000E9B4
; ---------------------------------------------------------------------------

loc_1000E9B0:				; CODE XREF: sub_1000E880+Dj
		mov	ebp, [esp+14h+arg_8]

loc_1000E9B4:				; CODE XREF: sub_1000E880+12Ej
		test	ebp, ebp
		jz	short loc_1000E9E1
		xor	esi, esi
		cmp	[edi+4], esi
		jle	short loc_1000E9E1
		nop

loc_1000E9C0:				; CODE XREF: sub_1000E880+15Fj
		mov	eax, [edi+0Ch]
		mov	ecx, [eax+esi*4]
		mov	edx, [esp+14h+arg_4]
		mov	eax, [edi+8]
		push	ebp
		push	edx
		mov	edx, [eax+esi*4]
		mov	eax, [ecx+14h]
		push	edx
		call	eax
		inc	esi
		add	esp, 0Ch
		cmp	esi, [edi+4]
		jl	short loc_1000E9C0

loc_1000E9E1:				; CODE XREF: sub_1000E880+136j
					; sub_1000E880+13Dj
		mov	ecx, [esp+14h+arg_0]
		mov	eax, [ecx+8]
		test	eax, eax
		jz	short loc_1000EA0E
		test	ebp, ebp
		jz	short loc_1000E9FF
		mov	edx, [esp+14h+arg_4]
		mov	ecx, [ecx+0Ch]
		push	ebp
		push	edx
		push	ecx
		call	eax
		add	esp, 0Ch

loc_1000E9FF:				; CODE XREF: sub_1000E880+16Ej
		cmp	dword ptr [edi+10h], 0
		jz	short loc_1000EA0E
		push	ebx
		call	PORT_Free_Util
		add	esp, 4

loc_1000EA0E:				; CODE XREF: sub_1000E880+32j
					; sub_1000E880+50j ...
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
sub_1000E880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EA20	proc near		; DATA XREF: sub_1000EA60+DEo
					; sub_1000EE10+CEo ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h

		cmp	[esp+arg_10], 2
		jnz	short locret_1000EA50
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	short locret_1000EA50
		mov	eax, [esp+arg_0]
		push	edi
		push	0
		push	ecx
		mov	ecx, [esp+0Ch+arg_4]
		push	ecx
		lea	edi, [eax+18h]
		push	eax
		mov	dword ptr [edi+14h], 1
		call	sub_1000E880
		add	esp, 10h
		pop	edi

locret_1000EA50:			; CODE XREF: sub_1000EA20+5j
					; sub_1000EA20+Dj
		retn
sub_1000EA20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EA60	proc near		; CODE XREF: .text:1000EFFFp
					; .text:1000F123p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_4]
		test	ebx, ebx
		jnz	short loc_1000EA6F
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000EA6F:				; CODE XREF: sub_1000EA60+8j
		push	ebp
		xor	ebp, ebp
		cmp	[ebx], ebp
		jz	short loc_1000EA81

loc_1000EA76:				; CODE XREF: sub_1000EA60+1Bj
		inc	ebp
		cmp	dword ptr [ebx+ebp*4], 0
		jnz	short loc_1000EA76
		test	ebp, ebp
		jnz	short loc_1000EA87

loc_1000EA81:				; CODE XREF: sub_1000EA60+14j
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000EA87:				; CODE XREF: sub_1000EA60+1Fj
		mov	eax, [esi+30h]
		push	edi
		lea	edi, ds:0[ebp*4]
		push	edi
		push	eax
		call	PORT_ArenaAlloc_Util
		mov	ecx, [esi+30h]
		push	edi
		push	ecx
		mov	[esi+20h], eax
		call	PORT_ArenaAlloc_Util
		xor	ecx, ecx
		add	esp, 10h
		mov	[esi+24h], eax
		cmp	[esi+20h], ecx
		jz	loc_1000EB53
		cmp	eax, ecx
		jz	loc_1000EB53
		mov	edx, [esp+10h+arg_0]
		mov	[esi+18h], edx
		mov	[esi+1Ch], ecx
		mov	[esp+10h+var_4], ecx
		cmp	ebp, ecx
		jle	short loc_1000EB2C

loc_1000EAD1:				; CODE XREF: sub_1000EA60+CAj
		mov	eax, [esp+10h+var_4]
		mov	eax, [ebx+eax*4]
		push	eax
		call	SECOID_FindOIDTag_Util
		push	eax
		call	HASH_GetHashObjectByOidTag
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1000EAF2
		dec	dword ptr [esi+1Ch]
		jmp	short loc_1000EB1F
; ---------------------------------------------------------------------------

loc_1000EAF2:				; CODE XREF: sub_1000EA60+8Bj
		mov	ecx, [edi+4]
		call	ecx
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_1000EB1B
		mov	edx, [edi+10h]
		push	ebx
		call	edx
		mov	eax, [esi+1Ch]
		mov	ecx, [esi+24h]
		mov	[ecx+eax*4], edi
		mov	edx, [esi+1Ch]
		mov	eax, [esi+20h]
		add	esp, 4
		mov	[eax+edx*4], ebx
		inc	dword ptr [esi+1Ch]

loc_1000EB1B:				; CODE XREF: sub_1000EA60+9Bj
		mov	ebx, [esp+10h+arg_4]

loc_1000EB1F:				; CODE XREF: sub_1000EA60+90j
		mov	eax, [esp+10h+var_4]
		inc	eax
		mov	[esp+10h+var_4], eax
		cmp	eax, ebp
		jl	short loc_1000EAD1

loc_1000EB2C:				; CODE XREF: sub_1000EA60+6Fj
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_1000EB4C
		mov	edx, [esi]
		xor	ecx, ecx
		cmp	[esi+8], ecx
		setnz	cl
		push	ecx
		push	esi
		push	offset sub_1000EA20
		push	edx
		call	SEC_ASN1DecoderSetFilterProc_Util
		add	esp, 10h

loc_1000EB4C:				; CODE XREF: sub_1000EA60+D0j
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000EB53:				; CODE XREF: sub_1000EA60+51j
					; sub_1000EA60+59j
		pop	edi
		pop	ebp
		mov	dword ptr [esi+34h], 0FFFFE013h
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
sub_1000EA60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EB70	proc near		; CODE XREF: .text:1000F026p
					; .text:1000F156p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		cmp	dword ptr [esi+1Ch], 0
		jnz	short loc_1000EB7F
		xor	eax, eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000EB7F:				; CODE XREF: sub_1000EB70+7j
		mov	eax, [esi]
		push	edi
		push	eax
		call	SEC_ASN1DecoderClearFilterProc_Util
		add	esp, 4
		cmp	dword ptr [esi+2Ch], 0
		jnz	short loc_1000EBC4
		xor	edi, edi
		cmp	[esi+1Ch], edi
		jle	short loc_1000EBBD
		jmp	short loc_1000EBA0
; ---------------------------------------------------------------------------
		align 10h

loc_1000EBA0:				; CODE XREF: sub_1000EB70+28j
					; sub_1000EB70+4Bj
		mov	ecx, [esi+24h]
		mov	edx, [ecx+edi*4]
		mov	eax, [esi+20h]
		mov	ecx, [eax+edi*4]
		mov	edx, [edx+0Ch]
		push	1
		push	ecx
		call	edx
		inc	edi
		add	esp, 8
		cmp	edi, [esi+1Ch]
		jl	short loc_1000EBA0

loc_1000EBBD:				; CODE XREF: sub_1000EB70+26j
		xor	eax, eax
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000EBC4:				; CODE XREF: sub_1000EB70+1Fj
		push	ebx
		mov	ebx, [esp+14h+arg_0]
		push	ebp
		push	ebx
		call	PORT_ArenaMark_Util
		mov	edi, eax
		mov	eax, [esi+1Ch]
		lea	ecx, ds:4[eax*4]
		push	ecx
		push	ebx
		mov	[esp+24h+var_4], edi
		call	PORT_ArenaAlloc_Util
		mov	ebp, eax
		mov	eax, [esi+1Ch]
		lea	edx, [eax+eax*2]
		add	edx, edx
		add	edx, edx
		push	edx
		push	ebx
		mov	[esp+2Ch+var_8], ebp
		call	PORT_ArenaAlloc_Util
		add	esp, 14h
		test	ebp, ebp
		jz	loc_1000ECCB
		test	eax, eax
		jz	loc_1000ECCB
		xor	edi, edi
		cmp	[esi+1Ch], edi
		jle	short loc_1000EC82
		lea	ebx, [eax+8]
		jmp	short loc_1000EC20
; ---------------------------------------------------------------------------
		align 10h

loc_1000EC20:				; CODE XREF: sub_1000EB70+ABj
					; sub_1000EB70+10Aj
		mov	eax, [esi+20h]
		mov	edx, [esi+24h]
		mov	ecx, [eax+edi*4]
		mov	ebp, [edx+edi*4]
		mov	eax, [ebp+0]
		mov	[esp+18h+var_C], ecx
		mov	ecx, [esp+18h+arg_0]
		push	eax
		push	ecx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		mov	[ebx-4], eax
		test	eax, eax
		jz	short loc_1000ECA7
		mov	ecx, [ebp+0]
		mov	edx, [esp+18h+var_C]
		push	ecx
		push	ebx
		push	eax
		mov	[ebx], ecx
		mov	eax, [ebp+18h]
		push	edx
		call	eax
		mov	ecx, [esp+28h+var_C]
		mov	edx, [ebp+0Ch]
		push	1
		push	ecx
		call	edx
		mov	ecx, [esp+30h+var_8]
		lea	eax, [ebx-8]
		mov	[ecx+edi*4], eax
		inc	edi
		add	esp, 18h
		add	ebx, 0Ch
		cmp	edi, [esi+1Ch]
		jl	short loc_1000EC20
		mov	ebx, [esp+18h+arg_0]
		mov	ebp, ecx

loc_1000EC82:				; CODE XREF: sub_1000EB70+A6j
		mov	edx, [esp+18h+var_4]
		mov	ecx, [esp+18h+arg_4]
		push	edx
		mov	dword ptr [ebp+edi*4+0], 0
		push	ebx
		mov	[ecx], ebp
		call	PORT_ArenaUnmark_Util
		add	esp, 8
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000ECA7:				; CODE XREF: sub_1000EB70+D6j
		call	PORT_GetError_Util
		mov	edx, [esp+18h+var_4]
		mov	[esi+34h], eax
		mov	eax, [esp+18h+arg_0]
		push	edx
		push	eax
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000ECCB:				; CODE XREF: sub_1000EB70+93j
					; sub_1000EB70+9Bj
		call	PORT_GetError_Util
		push	edi
		push	ebx
		mov	[esi+34h], eax
		call	PORT_ArenaRelease_Util
		add	esp, 8
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 0Ch
		retn
sub_1000EB70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000ECF0	proc near		; CODE XREF: sub_1000EE10+41p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		push	ebx
		xor	ebx, ebx
		push	ebp
		mov	ebp, [esp+14h+arg_0]
		mov	[esp+14h+var_8], ebx
		mov	[esp+14h+var_4], ebx
		cmp	eax, ebx
		jz	loc_1000EDFB
		cmp	[eax], ebx
		jz	loc_1000EDFB
		mov	ecx, [ebp+14h]
		push	ecx
		lea	edx, [esp+18h+var_8]
		push	edx
		lea	ecx, [esp+1Ch+var_C]
		push	ecx
		push	eax
		lea	edx, [esp+24h+var_4]
		push	edx
		call	PK11_FindCertAndKeyByRecipientList
		add	esp, 14h
		cmp	eax, ebx
		jnz	short loc_1000ED3C
		mov	dword ptr [ebp+34h], 0FFFFE02Dh
		jmp	short loc_1000ED71
; ---------------------------------------------------------------------------

loc_1000ED3C:				; CODE XREF: sub_1000ECF0+41j
		mov	ecx, [esp+14h+var_C]
		push	esi
		mov	[ecx+34h], eax
		add	eax, 0D8h
		push	edi
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		mov	edx, [esp+20h+var_C]
		add	edx, 10h
		push	edx
		mov	edi, eax
		call	SECOID_GetAlgorithmTag_Util
		mov	esi, eax
		add	esp, 8
		cmp	edi, esi
		jz	short loc_1000ED9B
		mov	dword ptr [ebp+34h], 0FFFFE02Eh

loc_1000ED6F:				; CODE XREF: sub_1000ECF0+C7j
					; sub_1000ECF0+F3j ...
		pop	edi
		pop	esi

loc_1000ED71:				; CODE XREF: sub_1000ECF0+4Aj
		mov	eax, [esp+14h+var_8]
		test	eax, eax
		jz	short loc_1000ED82
		push	eax
		call	SECKEY_DestroyPrivateKey
		add	esp, 4

loc_1000ED82:				; CODE XREF: sub_1000ECF0+87j
		mov	eax, [esp+14h+var_4]
		test	eax, eax
		jz	short loc_1000ED93
		push	eax
		call	PK11_FreeSlot
		add	esp, 4

loc_1000ED93:				; CODE XREF: sub_1000ECF0+98j
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000ED9B:				; CODE XREF: sub_1000ECF0+76j
		mov	eax, [esp+1Ch+arg_4]
		add	eax, 10h
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		cmp	esi, 10h
		jz	short loc_1000EDB9
		mov	dword ptr [ebp+34h], 0FFFFE030h
		jmp	short loc_1000ED6F
; ---------------------------------------------------------------------------

loc_1000EDB9:				; CODE XREF: sub_1000ECF0+BEj
		push	0
		push	105h
		push	eax
		call	PK11_AlgtagToMechanism
		mov	ecx, [esp+28h+var_C]
		mov	edx, [esp+28h+var_8]
		add	esp, 4
		push	eax
		add	ecx, 28h
		push	ecx
		push	edx
		call	PK11_PubUnwrapSymKey
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_1000ED6F
		call	PORT_GetError_Util
		push	ebx
		mov	[ebp+34h], eax
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000ED6F
; ---------------------------------------------------------------------------

loc_1000EDFB:				; CODE XREF: sub_1000ECF0+15j
					; sub_1000ECF0+1Dj
		mov	dword ptr [ebp+34h], 0FFFFE02Dh
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000ECF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EE10	proc near		; CODE XREF: .text:1000F08Dp
					; .text:1000F112p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_8]
		mov	ebx, eax
		mov	eax, [esi+4]
		push	edi
		push	eax
		xor	edi, edi
		call	SEC_PKCS7ContentType
		add	esp, 4
		cmp	eax, 1Eh
		jnz	short loc_1000EE4B
		mov	eax, [esi+38h]
		test	eax, eax
		jz	short loc_1000EE42
		mov	edx, [esi+3Ch]
		lea	ecx, [ebx+10h]
		push	ecx
		push	edx
		call	eax
		add	esp, 8
		mov	edi, eax

loc_1000EE42:				; CODE XREF: sub_1000EE10+21j
		mov	dword ptr [ebx+40h], 0
		jmp	short loc_1000EE73
; ---------------------------------------------------------------------------

loc_1000EE4B:				; CODE XREF: sub_1000EE10+1Aj
		mov	eax, [esp+0Ch+arg_4]
		push	ebx
		push	esi
		call	sub_1000ECF0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_1000EF03
		lea	eax, [ebx+10h]
		push	eax
		push	edi
		call	PK11_GetKeyStrength
		add	esp, 8
		mov	[ebx+40h], eax

loc_1000EE73:				; CODE XREF: sub_1000EE10+39j
		test	edi, edi
		jz	loc_1000EF03
		mov	eax, [esi+40h]
		test	eax, eax
		jz	short loc_1000EEFC
		add	ebx, 10h
		push	edi
		push	ebx
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1000EEFC
		test	ebp, ebp
		jz	short loc_1000EEA0
		push	edi
		call	PK11_ReferenceSymKey
		add	esp, 4
		mov	[ebp+0], eax

loc_1000EEA0:				; CODE XREF: sub_1000EE10+82j
		push	ebx
		push	edi
		call	sub_10010B40
		push	edi
		mov	ebx, eax
		call	PK11_FreeSymKey
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_1000EED2
		call	PORT_GetError_Util
		push	ebx
		mov	[esi+34h], eax
		call	PORT_SetError_Util
		mov	eax, [esi+8]
		add	esp, 4
		pop	edi
		neg	eax
		pop	ebp
		sbb	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000EED2:				; CODE XREF: sub_1000EE10+A4j
		mov	edx, [esi]
		xor	ecx, ecx
		cmp	[esi+8], ecx
		setnz	cl
		push	ecx
		push	esi
		push	offset sub_1000EA20
		push	edx
		call	SEC_ASN1DecoderSetFilterProc_Util
		mov	eax, [esp+1Ch+arg_0]
		add	esp, 10h
		pop	edi
		pop	ebp
		mov	[esi+18h], eax
		mov	[esi+28h], ebx
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000EEFC:				; CODE XREF: sub_1000EE10+70j
					; sub_1000EE10+7Ej
		mov	dword ptr [esi+34h], 0FFFFE031h

loc_1000EF03:				; CODE XREF: sub_1000EE10+4Dj
					; sub_1000EE10+65j
		mov	eax, [esi+8]
		pop	edi
		neg	eax
		pop	ebp
		sbb	eax, eax
		pop	ebx
		retn
sub_1000EE10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EF10	proc near		; CODE XREF: .text:1000F0B3p
					; .text:1000F14Ap ...
		cmp	dword ptr [esi+28h], 0
		push	edi
		lea	edi, [esi+18h]
		jz	short loc_1000EF41
		mov	eax, [esi]
		push	eax
		call	SEC_ASN1DecoderClearFilterProc_Util
		push	1
		push	0
		push	0
		push	esi
		call	sub_1000E880
		mov	ecx, [edi+10h]
		push	ecx
		call	sub_10010E10
		add	esp, 18h
		mov	dword ptr [edi+10h], 0

loc_1000EF41:				; CODE XREF: sub_1000EF10+8j
		xor	eax, eax
		pop	edi
		retn
sub_1000EF10	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000EF50:				; DATA XREF: SEC_PKCS7DecoderStart+D9o
		mov	eax, [esp+8]
		push	ebx
		push	esi
		mov	esi, [esp+0Ch]
		mov	ebx, [esi+4]
		mov	ecx, [ebx+0Ch]
		xor	edx, edx
		test	eax, eax
		setz	dl
		test	ecx, ecx
		jnz	short loc_1000EF8F
		test	edx, edx
		jz	loc_1000F0F0
		lea	eax, [ebx+18h]
		cmp	[esp+14h], eax
		jnz	loc_1000F0F0
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		pop	esi
		mov	[ebx+0Ch], eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000EF8F:				; CODE XREF: .text:1000EF69j
		mov	ecx, [ecx+0Ch]
		add	ecx, 0FFFFFFE7h
		push	edi
		cmp	ecx, 5		; switch 6 cases
		ja	loc_1000F1DB	; jumptable 1000EF9F default case
		jmp	ds:off_1000F268[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000EFA6:				; CODE XREF: .text:1000EF9Fj
					; DATA XREF: .text:off_1000F268o
		mov	edi, [ebx+24h]	; jumptable 1000EF9F case 1
		test	edi, edi
		jz	loc_1000F0EF
		mov	ecx, [edi+1Ch]
		test	ecx, ecx
		jnz	short loc_1000EFDD
		test	edx, edx
		jz	loc_1000F0EF
		lea	eax, [edi+28h]
		cmp	[esp+18h], eax
		jnz	loc_1000F0EF
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[edi+1Ch], eax
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000EFDD:				; CODE XREF: .text:1000EFB6j
		cmp	dword ptr [ecx+0Ch], 19h
		jnz	loc_1000F1DB	; jumptable 1000EF9F default case
		test	eax, eax
		mov	eax, [esp+18h]
		jz	short loc_1000F00C
		lea	ecx, [edi+34h]
		cmp	eax, ecx
		jnz	short loc_1000F00C
		mov	edx, [edi+0Ch]
		mov	eax, [esp+1Ch]
		push	edx
		push	eax
		call	sub_1000EA60
		add	esp, 8
		jmp	loc_1000F095
; ---------------------------------------------------------------------------

loc_1000F00C:				; CODE XREF: .text:1000EFEDj
					; .text:1000EFF4j
		test	edx, edx
		jz	loc_1000F0EF
		lea	edx, [edi+34h]
		cmp	eax, edx
		jnz	loc_1000F0EF
		mov	eax, [ebx]
		add	edi, 44h
		push	edi
		push	eax
		call	sub_1000EB70
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1DecoderClearNotifyProc_Util
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F03A:				; CODE XREF: .text:1000EF9Fj
					; DATA XREF: .text:off_1000F268o
		mov	ebx, [ebx+24h]	; jumptable 1000EF9F case 2
		test	ebx, ebx
		jz	loc_1000F0EF
		cmp	dword ptr [ebx+10h], 0
		jnz	short loc_1000F070
		test	edx, edx
		jz	loc_1000F0EF
		lea	eax, [ebx+14h]
		cmp	[esp+18h], eax
		jnz	loc_1000F0EF
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		pop	edi
		pop	esi
		mov	[ebx+10h], eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F070:				; CODE XREF: .text:1000F049j
		test	eax, eax
		mov	eax, [esp+18h]
		jz	short loc_1000F0A8
		lea	ecx, [ebx+38h]
		cmp	eax, ecx
		jnz	short loc_1000F0A8
		mov	edx, [ebx+0Ch]
		mov	eax, [esp+1Ch]
		push	0
		push	edx
		push	eax
		lea	eax, [ebx+10h]
		call	sub_1000EE10
		add	esp, 0Ch

loc_1000F095:				; CODE XREF: .text:1000F007j
		test	eax, eax
		jz	short loc_1000F0EF
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1DecoderClearNotifyProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F0A8:				; CODE XREF: .text:1000F076j
					; .text:1000F07Dj
		test	edx, edx
		jz	short loc_1000F0EF
		add	ebx, 38h
		cmp	eax, ebx
		jnz	short loc_1000F0EF
		call	sub_1000EF10
		mov	edx, [esi]
		push	edx
		call	SEC_ASN1DecoderClearNotifyProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F0C7:				; CODE XREF: .text:1000EF9Fj
					; DATA XREF: .text:off_1000F268o
		mov	edi, [ebx+24h]	; jumptable 1000EF9F case 3
		test	edi, edi
		jz	short loc_1000F0EF
		cmp	dword ptr [edi+14h], 0
		push	ebp
		jnz	short loc_1000F0F3
		test	edx, edx
		jz	short loc_1000F0EE
		lea	eax, [edi+18h]
		cmp	[esp+1Ch], eax
		jnz	short loc_1000F0EE
		push	eax
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[edi+14h], eax

loc_1000F0EE:				; CODE XREF: .text:1000F0D7j
					; .text:1000F0E0j ...
		pop	ebp

loc_1000F0EF:				; CODE XREF: .text:1000EFABj
					; .text:1000EFBAj ...
		pop	edi

loc_1000F0F0:				; CODE XREF: .text:1000EF6Dj
					; .text:1000EF7Aj
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F0F3:				; CODE XREF: .text:1000F0D3j
		test	eax, eax
		mov	eax, [esp+1Ch]
		jz	short loc_1000F13F
		lea	ecx, [edi+3Ch]
		cmp	eax, ecx
		jnz	short loc_1000F13F
		mov	eax, [edi+0Ch]
		mov	ebx, [esp+20h]
		lea	edx, [edi+74h]
		push	edx
		push	eax
		push	ebx
		lea	eax, [edi+14h]
		call	sub_1000EE10
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F12F
		mov	ecx, [edi+10h]
		push	ecx
		push	ebx
		call	sub_1000EA60
		add	esp, 8
		test	eax, eax
		jz	short loc_1000F0EE

loc_1000F12F:				; CODE XREF: .text:1000F11Cj
		mov	edx, [esi]
		push	edx
		call	SEC_ASN1DecoderClearNotifyProc_Util
		add	esp, 4
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F13F:				; CODE XREF: .text:1000F0F9j
					; .text:1000F100j
		test	edx, edx
		jz	short loc_1000F0EE
		lea	ecx, [edi+3Ch]
		cmp	eax, ecx
		jnz	short loc_1000F0EE
		call	sub_1000EF10
		mov	edx, [ebx]
		add	edi, 68h
		push	edi
		push	edx
		call	sub_1000EB70
		mov	eax, [esi]
		push	eax
		call	SEC_ASN1DecoderClearNotifyProc_Util
		add	esp, 0Ch
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F16B:				; CODE XREF: .text:1000EF9Fj
					; DATA XREF: .text:off_1000F268o
		mov	ebx, [ebx+24h]	; jumptable 1000EF9F case 4
		test	eax, eax
		mov	eax, [esp+18h]
		jz	short loc_1000F181
		lea	ecx, [ebx+48h]
		cmp	eax, ecx
		jz	loc_1000F220

loc_1000F181:				; CODE XREF: .text:1000F174j
		test	edx, edx
		jz	loc_1000F0EF
		add	ebx, 48h
		cmp	eax, ebx
		jnz	loc_1000F0EF
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1DecoderClearFilterProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F1A3:				; CODE XREF: .text:1000EF9Fj
					; DATA XREF: .text:off_1000F268o
		mov	ebx, [ebx+24h]	; jumptable 1000EF9F case 5
		test	eax, eax
		mov	eax, [esp+18h]
		jz	short loc_1000F1EA
		lea	ecx, [ebx+34h]
		cmp	eax, ecx
		jnz	short loc_1000F1EA
		cmp	dword ptr [esi+38h], 0
		jz	loc_1000F0EF
		mov	edx, [esp+1Ch]
		push	0
		push	0
		lea	eax, [ebx+0Ch]
		push	edx
		call	sub_1000EE10
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1000F0EF

loc_1000F1DB:				; CODE XREF: .text:1000EF99j
					; .text:1000EFE1j
		mov	eax, [esi]	; jumptable 1000EF9F default case
		push	eax
		call	SEC_ASN1DecoderClearNotifyProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F1EA:				; CODE XREF: .text:1000F1ACj
					; .text:1000F1B3j
		test	edx, edx
		jz	loc_1000F0EF
		add	ebx, 34h
		cmp	eax, ebx
		jnz	loc_1000F0EF
		call	sub_1000EF10
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1DecoderClearNotifyProc_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F211:				; CODE XREF: .text:1000EF9Fj
					; DATA XREF: .text:off_1000F268o
		test	eax, eax	; jumptable 1000EF9F case 0
		mov	eax, [esp+18h]
		jz	short loc_1000F23E
		lea	ecx, [ebx+24h]
		cmp	eax, ecx
		jnz	short loc_1000F23E

loc_1000F220:				; CODE XREF: .text:1000F17Bj
		mov	eax, [esi]
		xor	edx, edx
		cmp	[esi+8], edx
		setnz	dl
		push	edx
		push	esi
		push	offset sub_1000EA20
		push	eax
		call	SEC_ASN1DecoderSetFilterProc_Util
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F23E:				; CODE XREF: .text:1000F217j
					; .text:1000F21Ej
		test	edx, edx
		jz	loc_1000F0EF
		add	ebx, 24h
		cmp	eax, ebx
		jnz	loc_1000F0EF
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1DecoderClearNotifyProc_Util
		mov	edx, [esi]
		push	edx
		call	SEC_ASN1DecoderClearFilterProc_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------
off_1000F268	dd offset loc_1000F211	; DATA XREF: .text:1000EF9Fr
		dd offset loc_1000EFA6	; jump table for switch	statement
		dd offset loc_1000F03A
		dd offset loc_1000F0C7
		dd offset loc_1000F16B
		dd offset loc_1000F1A3
; Exported entry 145. SEC_PKCS7DecoderStart

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7DecoderStart
SEC_PKCS7DecoderStart proc near		; CODE XREF: sub_1000C6F0+50p
					; sub_1000C7E0+59p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebx
		push	400h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_1000F296
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F296:				; CODE XREF: SEC_PKCS7DecoderStart+12j
		push	edi
		push	28h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1000F2B7
		push	eax
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F2B7:				; CODE XREF: SEC_PKCS7DecoderStart+26j
		mov	eax, [esp+8+arg_8]
		mov	ecx, [esp+8+arg_C]
		push	esi
		push	44h
		mov	[edi], ebx
		mov	[edi+10h], eax
		mov	[edi+14h], ecx
		mov	dword ptr [edi+4], 0
		mov	dword ptr [edi+8], 1
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1000F2F6
		push	eax
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F2F6:				; CODE XREF: SEC_PKCS7DecoderStart+64j
		push	400h
		call	PORT_NewArena_Util
		add	esp, 4
		mov	[esi+30h], eax
		test	eax, eax
		jnz	short loc_1000F321
		push	esi
		call	PORT_Free_Util
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F321:				; CODE XREF: SEC_PKCS7DecoderStart+88j
		push	ebp
		push	offset dword_10014A10
		push	edi
		push	ebx
		call	SEC_ASN1DecoderStart_Util
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	short loc_1000F358
		mov	edx, [esi+30h]
		push	eax
		push	edx
		call	PORT_FreeArena_Util
		push	esi
		call	PORT_Free_Util
		push	ebp
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 14h
		pop	ebp
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F358:				; CODE XREF: SEC_PKCS7DecoderStart+B5j
		push	esi
		push	offset loc_1000EF50
		push	ebp
		call	SEC_ASN1DecoderSetNotifyProc_Util
		mov	eax, [esp+1Ch+arg_0]
		mov	ecx, [esp+1Ch+arg_4]
		mov	edx, [esp+1Ch+arg_8]
		mov	[esi+8], eax
		mov	eax, [esp+1Ch+arg_C]
		add	esp, 0Ch
		mov	[esi+14h], eax
		mov	eax, [esp+10h+arg_18]
		mov	[esi+0Ch], ecx
		mov	ecx, [esp+10h+arg_10]
		mov	[esi+10h], edx
		mov	edx, [esp+10h+arg_14]
		mov	[esi], ebp
		pop	ebp
		mov	[esi+40h], eax
		mov	[esi+4], edi
		mov	[esi+38h], ecx
		mov	[esi+3Ch], edx
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebx
		retn
SEC_PKCS7DecoderStart endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 146. SEC_PKCS7DecoderUpdate

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7DecoderUpdate
SEC_PKCS7DecoderUpdate proc near	; CODE XREF: sub_1000A500+Fp
					; sub_1000A5B0+20p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+4], 0
		jz	short loc_1000F3F1
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000F3F1
		cmp	dword ptr [esi+34h], 0
		jnz	short loc_1000F3F7
		mov	ecx, [esp+4+arg_8]
		mov	edx, [esp+4+arg_4]
		push	ecx
		push	edx
		push	eax
		call	SEC_ASN1DecoderUpdate_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000F3F1
		call	PORT_GetError_Util
		mov	[esi+34h], eax
		test	eax, eax
		jnz	short loc_1000F3F1
		mov	dword ptr [esi+34h], 0FFFFFFFFh

loc_1000F3F1:				; CODE XREF: SEC_PKCS7DecoderUpdate+9j
					; SEC_PKCS7DecoderUpdate+Fj ...
		cmp	dword ptr [esi+34h], 0
		jz	short loc_1000F434

loc_1000F3F7:				; CODE XREF: SEC_PKCS7DecoderUpdate+15j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000F40C
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		mov	dword ptr [esi], 0

loc_1000F40C:				; CODE XREF: SEC_PKCS7DecoderUpdate+4Bj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1000F423
		push	eax
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4
		mov	dword ptr [esi+4], 0

loc_1000F423:				; CODE XREF: SEC_PKCS7DecoderUpdate+61j
		mov	eax, [esi+34h]
		push	eax
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F434:				; CODE XREF: SEC_PKCS7DecoderUpdate+45j
		xor	eax, eax
		pop	esi
		retn
SEC_PKCS7DecoderUpdate endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 144. SEC_PKCS7DecoderFinish

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7DecoderFinish
SEC_PKCS7DecoderFinish proc near	; CODE XREF: sub_1000A5B0+3Ap
					; SEC_PKCS12DecoderFinish+C7p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		push	edi
		mov	edi, [esi+4]
		test	eax, eax
		jz	short loc_1000F467
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		test	eax, eax
		jz	short loc_1000F467
		push	edi
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4
		xor	edi, edi

loc_1000F467:				; CODE XREF: SEC_PKCS7DecoderFinish+Dj
					; SEC_PKCS7DecoderFinish+1Aj
		mov	eax, [esi+28h]
		test	eax, eax
		jz	short loc_1000F477
		push	eax
		call	sub_10010E10
		add	esp, 4

loc_1000F477:				; CODE XREF: SEC_PKCS7DecoderFinish+2Cj
		mov	eax, [esi+30h]
		push	0
		push	eax
		call	PORT_FreeArena_Util
		push	esi
		call	PORT_Free_Util
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		pop	esi
		retn
SEC_PKCS7DecoderFinish endp

; Exported entry 142. SEC_PKCS7DecodeItem

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7DecodeItem
SEC_PKCS7DecodeItem proc near		; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, [esp+arg_1C]
		mov	ecx, [esp+arg_18]
		mov	edx, [esp+arg_14]
		push	esi
		push	eax
		mov	eax, [esp+8+arg_10]
		push	ecx
		mov	ecx, [esp+0Ch+arg_C]
		push	edx
		mov	edx, [esp+10h+arg_8]
		push	eax
		mov	eax, [esp+14h+arg_4]
		push	ecx
		push	edx
		push	eax
		call	SEC_PKCS7DecoderStart
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		jnz	short loc_1000F4C4
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F4C4:				; CODE XREF: SEC_PKCS7DecodeItem+30j
		mov	eax, [esp+4+arg_0]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	edi
		push	ecx
		push	edx
		push	esi
		call	SEC_PKCS7DecoderUpdate
		mov	eax, [esi]
		mov	edi, [esi+4]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000F4FB
		push	eax
		call	SEC_ASN1DecoderFinish_Util
		add	esp, 4
		test	eax, eax
		jz	short loc_1000F4FB
		push	edi
		call	SEC_PKCS7DestroyContentInfo
		add	esp, 4
		xor	edi, edi

loc_1000F4FB:				; CODE XREF: SEC_PKCS7DecodeItem+51j
					; SEC_PKCS7DecodeItem+5Ej
		mov	eax, [esi+28h]
		test	eax, eax
		jz	short loc_1000F50B
		push	eax
		call	sub_10010E10
		add	esp, 4

loc_1000F50B:				; CODE XREF: SEC_PKCS7DecodeItem+70j
		mov	eax, [esi+30h]
		push	0
		push	eax
		call	PORT_FreeArena_Util
		push	esi
		call	PORT_Free_Util
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		pop	esi
		retn
SEC_PKCS7DecodeItem endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 143. SEC_PKCS7DecoderAbort

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7DecoderAbort
SEC_PKCS7DecoderAbort proc near		; CODE XREF: sub_1000A480+51p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		mov	edx, [ecx]
		mov	[esp+arg_0], edx
		jmp	SEC_ASN1DecoderAbort_Util
SEC_PKCS7DecoderAbort endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 132. SEC_PKCS7ContainsCertsOrCrls

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7ContainsCertsOrCrls
SEC_PKCS7ContainsCertsOrCrls proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_1000F563
		sub	eax, 2
		jnz	short loc_1000F585
		mov	eax, [esi+24h]
		mov	ecx, [eax+5Ch]
		mov	eax, [eax+60h]
		jmp	short loc_1000F56C
; ---------------------------------------------------------------------------

loc_1000F563:				; CODE XREF: SEC_PKCS7ContainsCertsOrCrls+11j
		mov	eax, [esi+24h]
		mov	ecx, [eax+38h]
		mov	eax, [eax+3Ch]

loc_1000F56C:				; CODE XREF: SEC_PKCS7ContainsCertsOrCrls+21j
		test	ecx, ecx
		jz	short loc_1000F57C
		cmp	dword ptr [ecx], 0
		jz	short loc_1000F57C

loc_1000F575:				; CODE XREF: SEC_PKCS7ContainsCertsOrCrls+43j
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F57C:				; CODE XREF: SEC_PKCS7ContainsCertsOrCrls+2Ej
					; SEC_PKCS7ContainsCertsOrCrls+33j
		test	eax, eax
		jz	short loc_1000F585
		cmp	dword ptr [eax], 0
		jnz	short loc_1000F575

loc_1000F585:				; CODE XREF: SEC_PKCS7ContainsCertsOrCrls+16j
					; SEC_PKCS7ContainsCertsOrCrls+3Ej
		xor	eax, eax
		pop	esi
		retn
SEC_PKCS7ContainsCertsOrCrls endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 162. SEC_PKCS7IsContentEmpty

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7IsContentEmpty
SEC_PKCS7IsContentEmpty	proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1000F5A0

loc_1000F599:				; CODE XREF: SEC_PKCS7IsContentEmpty+34j
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F5A0:				; CODE XREF: SEC_PKCS7IsContentEmpty+7j
		push	esi
		call	SEC_PKCS7ContentType
		add	esp, 4
		cmp	eax, 19h
		jz	short loc_1000F5BF
		cmp	eax, 1Eh
		jz	short loc_1000F5B7
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F5B7:				; CODE XREF: SEC_PKCS7IsContentEmpty+21j
		mov	eax, [esi+24h]
		add	eax, 34h
		jmp	short loc_1000F5C2
; ---------------------------------------------------------------------------

loc_1000F5BF:				; CODE XREF: SEC_PKCS7IsContentEmpty+1Cj
		mov	eax, [esi+24h]

loc_1000F5C2:				; CODE XREF: SEC_PKCS7IsContentEmpty+2Dj
		test	eax, eax
		jz	short loc_1000F599
		mov	ecx, [esp+4+arg_4]
		cmp	ecx, [eax+8]
		pop	esi
		sbb	eax, eax
		inc	eax
		retn
SEC_PKCS7IsContentEmpty	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 133. SEC_PKCS7ContentIsEncrypted

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7ContentIsEncrypted
SEC_PKCS7ContentIsEncrypted proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	eax
		call	SEC_PKCS7ContentType
		add	esp, 4
		cmp	eax, 1Bh
		jl	short loc_1000F602
		cmp	eax, 1Ch
		jle	short loc_1000F5FC
		cmp	eax, 1Eh
		jnz	short loc_1000F602

loc_1000F5FC:				; CODE XREF: SEC_PKCS7ContentIsEncrypted+15j
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_1000F602:				; CODE XREF: SEC_PKCS7ContentIsEncrypted+10j
					; SEC_PKCS7ContentIsEncrypted+1Aj
		xor	eax, eax
		retn
SEC_PKCS7ContentIsEncrypted endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 134. SEC_PKCS7ContentIsSigned

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7ContentIsSigned
SEC_PKCS7ContentIsSigned proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_1000F630
		sub	eax, 2
		jnz	short loc_1000F646
		mov	eax, [esi+24h]
		mov	eax, [eax+64h]
		jmp	short loc_1000F636
; ---------------------------------------------------------------------------

loc_1000F630:				; CODE XREF: SEC_PKCS7ContentIsSigned+11j
		mov	ecx, [esi+24h]
		mov	eax, [ecx+40h]

loc_1000F636:				; CODE XREF: SEC_PKCS7ContentIsSigned+1Ej
		test	eax, eax
		jz	short loc_1000F646
		cmp	dword ptr [eax], 0
		jz	short loc_1000F646
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F646:				; CODE XREF: SEC_PKCS7ContentIsSigned+16j
					; SEC_PKCS7ContentIsSigned+28j	...
		xor	eax, eax
		pop	esi
		retn
SEC_PKCS7ContentIsSigned endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 160. SEC_PKCS7GetSigningTime

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7GetSigningTime
SEC_PKCS7GetSigningTime	proc near	; CODE XREF: sub_1000F6A0+151p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	SEC_PKCS7ContentType
		add	esp, 4
		cmp	eax, 1Ah
		jnz	short loc_1000F693
		mov	eax, [esi+24h]
		mov	eax, [eax+40h]
		test	eax, eax
		jz	short loc_1000F693
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_1000F693
		cmp	dword ptr [eax+4], 0
		jnz	short loc_1000F693
		mov	ecx, [ecx+28h]
		push	1
		push	23h
		push	ecx
		call	sub_100112A0
		add	esp, 0Ch
		pop	esi
		mov	[esp+arg_0], eax
		jmp	sub_100113C0
; ---------------------------------------------------------------------------

loc_1000F693:				; CODE XREF: SEC_PKCS7GetSigningTime+11j
					; SEC_PKCS7GetSigningTime+1Bj ...
		xor	eax, eax
		pop	esi
		retn
SEC_PKCS7GetSigningTime	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F6A0	proc near		; CODE XREF: SEC_PKCS7VerifySignature+15p
					; SEC_PKCS7VerifyDetachedSignature+1Bp	...

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 44h
		push	ebx
		push	ebp
		push	esi
		xor	ebx, ebx
		push	edi
		mov	edi, [esp+54h+arg_0]
		xor	ebp, ebp
		mov	[esp+54h+var_40], ebp
		mov	[esp+54h+var_28], ebx
		mov	[esp+54h+var_18], ebx
		call	CERT_GetDefaultCertDB
		push	edi
		mov	esi, eax
		mov	[esp+58h+var_30], ebx
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_1000F6E1
		sub	eax, 2
		jnz	short loc_1000F6EF
		mov	eax, [edi+24h]
		mov	ecx, [eax+64h]
		jmp	short loc_1000F6E7
; ---------------------------------------------------------------------------

loc_1000F6E1:				; CODE XREF: sub_1000F6A0+32j
		mov	eax, [edi+24h]
		mov	ecx, [eax+40h]

loc_1000F6E7:				; CODE XREF: sub_1000F6A0+3Fj
		cmp	ecx, ebx
		jz	short loc_1000F6EF
		cmp	[ecx], ebx
		jnz	short loc_1000F701

loc_1000F6EF:				; CODE XREF: sub_1000F6A0+37j
					; sub_1000F6A0+49j ...
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000FC7E
; ---------------------------------------------------------------------------

loc_1000F701:				; CODE XREF: sub_1000F6A0+4Dj
		mov	ecx, [edi+0Ch]
		mov	ecx, [ecx+0Ch]
		sub	ecx, 1Ah
		jz	short loc_1000F73A
		sub	ecx, 2
		jnz	short loc_1000F73A
		mov	edx, [eax+68h]
		mov	edi, [eax+10h]
		mov	ecx, [eax+5Ch]
		lea	ebx, [eax+18h]
		mov	[esp+54h+var_24], ebx
		mov	ebx, [eax+74h]
		mov	[esp+54h+var_2C], edx
		mov	edx, [eax+64h]
		add	eax, 24h
		mov	[esp+54h+var_3C], ebx
		mov	[esp+54h+var_20], eax
		xor	ebx, ebx
		jmp	short loc_1000F759
; ---------------------------------------------------------------------------

loc_1000F73A:				; CODE XREF: sub_1000F6A0+6Aj
					; sub_1000F6A0+6Fj
		mov	ecx, [eax+44h]
		mov	edi, [eax+0Ch]
		mov	edx, [eax+40h]
		mov	[esp+54h+var_2C], ecx
		mov	ecx, [eax+38h]
		add	eax, 28h
		mov	[esp+54h+var_24], eax
		mov	[esp+54h+var_3C], ebx
		mov	[esp+54h+var_20], ebx

loc_1000F759:				; CODE XREF: sub_1000F6A0+98j
		cmp	edx, ebx
		jz	short loc_1000F6EF
		mov	eax, [edx]
		mov	[esp+54h+var_44], eax
		cmp	eax, ebx
		jz	short loc_1000F6EF
		cmp	[edx+4], ebx
		jz	short loc_1000F77E
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000FC7E
; ---------------------------------------------------------------------------

loc_1000F77E:				; CODE XREF: sub_1000F6A0+CAj
		cmp	esi, ebx
		jz	loc_1000FC7E
		xor	eax, eax
		mov	[esp+54h+var_28], eax
		test	ecx, ecx
		jz	short loc_1000F79E
		cmp	[ecx], eax
		jz	short loc_1000F79E

loc_1000F794:				; CODE XREF: sub_1000F6A0+F8j
		inc	eax
		cmp	[ecx+eax*4], ebp
		jnz	short loc_1000F794
		mov	[esp+54h+var_28], eax

loc_1000F79E:				; CODE XREF: sub_1000F6A0+EEj
					; sub_1000F6A0+F2j
		mov	edx, [esp+54h+arg_10]
		push	0
		push	0
		push	edx
		lea	edx, [esp+60h+var_18]
		push	edx
		push	ecx
		push	eax
		mov	eax, [esp+6Ch+arg_4]
		push	eax
		push	esi
		call	CERT_ImportCerts
		add	esp, 20h
		test	eax, eax
		jnz	loc_1000FC7E
		mov	ecx, [esp+54h+var_44]
		mov	edx, [ecx+0Ch]
		push	edx
		push	esi
		call	CERT_FindCertByIssuerAndSN
		add	esp, 8
		mov	[esp+54h+var_38], eax
		test	eax, eax
		jz	loc_1000FC7E
		mov	edx, [esp+54h+arg_0]
		mov	eax, [esp+54h+var_44]
		mov	ecx, [esp+54h+var_38]
		push	edx
		mov	[eax+54h], ecx
		call	SEC_PKCS7GetSigningTime
		mov	ebx, eax
		add	esp, 4
		mov	[esp+54h+var_1C], ebx
		test	ebx, ebx
		jz	short loc_1000F81B
		lea	eax, [esp+54h+var_14]
		push	ebx
		push	eax
		call	DER_DecodeTimeChoice_Util
		add	esp, 8
		test	eax, eax
		jz	short loc_1000F81B
		xor	ebx, ebx
		mov	[esp+54h+var_1C], ebx

loc_1000F81B:				; CODE XREF: sub_1000F6A0+161j
					; sub_1000F6A0+173j
		mov	ecx, [esp+54h+arg_14]
		test	ecx, ecx
		jz	short loc_1000F82A
		mov	eax, [ecx]
		mov	edx, [ecx+4]
		jmp	short loc_1000F83E
; ---------------------------------------------------------------------------

loc_1000F82A:				; CODE XREF: sub_1000F6A0+181j
		test	ebx, ebx
		jz	short loc_1000F838
		mov	eax, [esp+54h+var_14]
		mov	edx, [esp+54h+var_10]
		jmp	short loc_1000F83E
; ---------------------------------------------------------------------------

loc_1000F838:				; CODE XREF: sub_1000F6A0+18Cj
		call	ds:PR_Now

loc_1000F83E:				; CODE XREF: sub_1000F6A0+188j
					; sub_1000F6A0+196j
		mov	ecx, [esp+54h+arg_0]
		mov	ecx, [ecx+14h]
		push	0
		push	ecx
		push	edx
		mov	edx, [esp+60h+arg_4]
		push	eax
		mov	eax, [esp+64h+var_38]
		push	edx
		push	1
		push	eax
		push	esi
		call	CERT_VerifyCert
		add	esp, 20h
		test	eax, eax
		jnz	loc_1000FC08
		mov	ecx, [esp+54h+var_38]
		push	ecx
		call	CERT_ExtractPublicKey
		add	esp, 4
		mov	[esp+54h+var_30], eax
		test	eax, eax
		jz	loc_1000FC7E
		mov	eax, [esp+54h+var_2C]
		test	eax, eax
		jz	short loc_1000F88C
		cmp	[eax], ebp
		jnz	short loc_1000F8A3

loc_1000F88C:				; CODE XREF: sub_1000F6A0+1E6j
		mov	ebx, [esp+54h+arg_8]
		test	ebx, ebx
		jz	loc_1000FC7E
		cmp	[ebx+4], ebp
		jz	loc_1000FC7E
		jmp	short loc_1000F8A7
; ---------------------------------------------------------------------------

loc_1000F8A3:				; CODE XREF: sub_1000F6A0+1EAj
		mov	ebx, [esp+54h+arg_8]

loc_1000F8A7:				; CODE XREF: sub_1000F6A0+201j
		mov	edx, [esp+54h+var_44]
		add	edx, 10h
		push	edx
		call	SECOID_FindOIDTag_Util
		push	eax
		mov	[esp+5Ch+var_34], eax
		call	HASH_GetHashTypeByOidTag
		add	esp, 8
		mov	esi, eax
		cmp	[esp+54h+var_34], ebp
		jz	loc_1000F6EF
		test	esi, esi
		jz	loc_1000F6EF
		test	ebx, ebx
		jz	short loc_1000F8FB
		push	esi
		call	HASH_ResultLen
		add	esp, 4
		cmp	[esp+54h+arg_C], esi
		jnz	loc_1000F6EF
		cmp	[ebx+8], eax
		jnz	loc_1000F6EF
		mov	ebx, [esp+54h+arg_8]
		jmp	short loc_1000F948
; ---------------------------------------------------------------------------

loc_1000F8FB:				; CODE XREF: sub_1000F6A0+237j
		test	edi, edi
		jz	loc_1000F6EF
		cmp	[edi], ebp
		jz	loc_1000F6EF
		xor	esi, esi
		mov	eax, edi
		nop

loc_1000F910:				; CODE XREF: sub_1000F6A0+288j
		mov	eax, [eax]
		push	eax
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		cmp	eax, [esp+54h+var_34]
		jz	short loc_1000F92A
		inc	esi
		cmp	[edi+esi*4], ebp
		lea	eax, [edi+esi*4]
		jnz	short loc_1000F910

loc_1000F92A:				; CODE XREF: sub_1000F6A0+27Fj
		cmp	[edi+esi*4], ebp
		jnz	short loc_1000F941
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000FC7E
; ---------------------------------------------------------------------------

loc_1000F941:				; CODE XREF: sub_1000F6A0+28Dj
		mov	ecx, [esp+54h+var_2C]
		mov	ebx, [ecx+esi*4]

loc_1000F948:				; CODE XREF: sub_1000F6A0+259j
		mov	esi, [esp+54h+var_44]
		lea	edx, [esi+2Ch]
		push	edx
		call	SECOID_FindOIDTag_Util
		add	esp, 4
		mov	[esp+54h+var_2C], eax
		test	eax, eax
		jnz	short loc_1000F972
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000FC7E
; ---------------------------------------------------------------------------

loc_1000F972:				; CODE XREF: sub_1000F6A0+2BEj
		mov	eax, [esi+28h]
		lea	edi, [esi+28h]
		test	eax, eax
		jz	loc_1000FB12
		cmp	[esp+54h+var_3C], ebp
		jz	short loc_1000F998
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000FC7E
; ---------------------------------------------------------------------------

loc_1000F998:				; CODE XREF: sub_1000F6A0+2E4j
		push	1
		push	21h
		push	eax
		call	sub_100112A0
		push	eax
		call	sub_100113C0
		add	esp, 10h
		test	eax, eax
		jz	loc_1000F6EF
		mov	ecx, [eax+8]
		mov	edx, [esp+54h+var_24]
		cmp	ecx, [edx+8]
		jnz	loc_1000F6EF
		mov	edx, [edx+4]
		mov	esi, [eax+4]
		cmp	ecx, 4
		jb	short loc_1000F9E4
		mov	edi, edi

loc_1000F9D0:				; CODE XREF: sub_1000F6A0+342j
		mov	eax, [esi]
		cmp	eax, [edx]
		jnz	short loc_1000FA08
		sub	ecx, 4
		add	edx, 4
		add	esi, 4
		cmp	ecx, 4
		jnb	short loc_1000F9D0

loc_1000F9E4:				; CODE XREF: sub_1000F6A0+32Cj
		test	ecx, ecx
		jz	short loc_1000FA1A
		mov	al, [edx]
		cmp	al, [esi]
		jnz	short loc_1000FA08
		cmp	ecx, 1
		jbe	short loc_1000FA1A
		mov	al, [edx+1]
		cmp	al, [esi+1]
		jnz	short loc_1000FA08
		cmp	ecx, 2
		jbe	short loc_1000FA1A
		mov	cl, [edx+2]
		cmp	cl, [esi+2]
		jz	short loc_1000FA1A

loc_1000FA08:				; CODE XREF: sub_1000F6A0+334j
					; sub_1000F6A0+34Cj ...
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000FC7E
; ---------------------------------------------------------------------------

loc_1000FA1A:				; CODE XREF: sub_1000F6A0+346j
					; sub_1000F6A0+351j ...
		mov	edx, [edi]
		push	1
		push	22h
		push	edx
		call	sub_100112A0
		push	eax
		call	sub_100113C0
		add	esp, 10h
		test	eax, eax
		jz	loc_1000F6EF
		mov	ecx, [eax+8]
		cmp	ecx, [ebx+8]
		jnz	loc_1000F6EF
		mov	edx, [ebx+4]
		mov	esi, [eax+4]
		cmp	ecx, 4
		jb	short loc_1000FA64
		mov	edi, edi

loc_1000FA50:				; CODE XREF: sub_1000F6A0+3C2j
		mov	eax, [esi]
		cmp	eax, [edx]
		jnz	short loc_1000FA8A
		sub	ecx, 4
		add	edx, 4
		add	esi, 4
		cmp	ecx, 4
		jnb	short loc_1000FA50

loc_1000FA64:				; CODE XREF: sub_1000F6A0+3ACj
		xor	eax, eax
		cmp	ecx, eax
		jz	short loc_1000FA9C
		mov	bl, [edx]
		cmp	bl, [esi]
		jnz	short loc_1000FA8A
		cmp	ecx, 1
		jbe	short loc_1000FA9C
		mov	bl, [edx+1]
		cmp	bl, [esi+1]
		jnz	short loc_1000FA8A
		cmp	ecx, 2
		jbe	short loc_1000FA9C
		mov	cl, [edx+2]
		cmp	cl, [esi+2]
		jz	short loc_1000FA9C

loc_1000FA8A:				; CODE XREF: sub_1000F6A0+3B4j
					; sub_1000F6A0+3CEj ...
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000FC7E
; ---------------------------------------------------------------------------

loc_1000FA9C:				; CODE XREF: sub_1000F6A0+3C8j
					; sub_1000F6A0+3D3j ...
		push	edi
		lea	edx, [esp+58h+var_C]
		push	edx
		push	eax
		mov	[esp+60h+var_8], eax
		mov	[esp+60h+var_4], eax
		call	sub_10011500
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1000FC7E
		mov	ecx, [esp+54h+var_8]
		test	ecx, ecx
		jz	loc_1000F6EF
		mov	eax, [esp+54h+var_4]
		test	eax, eax
		jz	loc_1000F6EF
		mov	edx, [esp+54h+arg_0]
		mov	edx, [edx+14h]
		push	edx
		mov	edx, [esp+58h+var_34]
		push	0
		push	edx
		mov	edx, [esp+60h+var_2C]
		push	edx
		mov	edx, [esp+64h+var_44]
		add	edx, 44h
		push	edx
		mov	edx, [esp+68h+var_30]
		push	edx
		push	eax
		push	ecx
		call	VFY_VerifyDataDirect
		neg	eax
		sbb	ebp, ebp
		mov	eax, [esp+74h+var_8]
		push	eax
		inc	ebp
		call	PORT_Free_Util
		add	esp, 24h
		jmp	loc_1000FBEB
; ---------------------------------------------------------------------------

loc_1000FB12:				; CODE XREF: sub_1000F6A0+2DAj
		add	esi, 44h
		cmp	[esi+8], ebp
		jnz	short loc_1000FB2C
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1000FC7E
; ---------------------------------------------------------------------------

loc_1000FB2C:				; CODE XREF: sub_1000F6A0+478j
		cmp	[esp+54h+var_3C], ebp
		jz	short loc_1000FBAA
		mov	ecx, [esp+54h+var_20]
		mov	edx, [esp+54h+var_3C]
		push	ecx
		push	edx
		call	sub_10010B40
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_1000FC7E
		mov	eax, [esi+8]
		push	1
		push	eax
		push	edi
		call	sub_10010E30
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_1000FC71
		push	ebp
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esp+54h+var_8], eax
		test	eax, eax
		jz	loc_1000FC71
		mov	ecx, [esi+8]
		mov	edx, [esi+4]
		push	1
		push	ecx
		push	edx
		push	ebp
		lea	ecx, [esp+64h+var_4]
		push	ecx
		push	eax
		push	edi
		call	sub_10010EA0
		push	edi
		mov	esi, eax
		call	sub_10010E10
		add	esp, 20h
		test	esi, esi
		jnz	loc_1000FC7A
		lea	esi, [esp+54h+var_C]

loc_1000FBAA:				; CODE XREF: sub_1000F6A0+490j
		mov	edx, [esp+54h+arg_0]
		mov	eax, [edx+14h]
		mov	ecx, [esp+54h+var_34]
		mov	edx, [esp+54h+var_2C]
		push	eax
		mov	eax, [esp+58h+var_30]
		push	ecx
		push	edx
		push	esi
		push	eax
		push	ebx
		call	VFY_VerifyDigestDirect
		add	esp, 18h
		mov	ebp, eax
		neg	ebp
		sbb	ebp, ebp
		inc	ebp
		cmp	[esp+54h+var_3C], 0
		jz	short loc_1000FBEB
		mov	ecx, [esp+54h+var_4]
		mov	edx, [esp+54h+var_8]
		push	ecx
		push	edx
		call	PORT_ZFree_Util
		add	esp, 8

loc_1000FBEB:				; CODE XREF: sub_1000F6A0+46Dj
					; sub_1000F6A0+537j
		test	ebp, ebp
		jnz	short loc_1000FC08
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE00Ah
		jnz	short loc_1000FC08
		push	0FFFFE02Fh
		call	PORT_SetError_Util
		add	esp, 4

loc_1000FC08:				; CODE XREF: sub_1000F6A0+1C1j
					; sub_1000F6A0+54Dj ...
		mov	eax, [esp+54h+var_38]
		mov	eax, [eax+118h]
		test	eax, eax
		jz	short loc_1000FC7E
		cmp	byte ptr [eax],	0
		jz	short loc_1000FC7E
		mov	eax, [esp+54h+arg_4]
		cmp	eax, 4
		jz	short loc_1000FC29
		cmp	eax, 5
		jnz	short loc_1000FC7E

loc_1000FC29:				; CODE XREF: sub_1000F6A0+582j
		xor	esi, esi
		call	PORT_GetError_Util
		mov	edi, eax
		test	ebp, ebp
		jz	short loc_1000FC56
		mov	ecx, [esp+54h+var_44]
		mov	eax, [ecx+28h]
		test	eax, eax
		jz	short loc_1000FC56
		push	1
		push	28h
		push	eax
		call	sub_100112A0
		push	eax
		call	sub_100113C0
		add	esp, 10h
		mov	esi, eax

loc_1000FC56:				; CODE XREF: sub_1000F6A0+594j
					; sub_1000F6A0+59Fj
		mov	edx, [esp+54h+var_1C]
		mov	eax, [esp+54h+var_38]
		push	edx
		push	esi
		push	eax
		call	CERT_SaveSMimeProfile
		push	edi
		call	PORT_SetError_Util
		add	esp, 10h
		jmp	short loc_1000FC7E
; ---------------------------------------------------------------------------

loc_1000FC71:				; CODE XREF: sub_1000F6A0+4C1j
					; sub_1000F6A0+4D6j
		push	edi
		call	sub_10010E10
		add	esp, 4

loc_1000FC7A:				; CODE XREF: sub_1000F6A0+500j
		mov	ebp, [esp+54h+var_40]

loc_1000FC7E:				; CODE XREF: sub_1000F6A0+5Cj
					; sub_1000F6A0+D9j ...
		mov	eax, [esp+54h+var_18]
		test	eax, eax
		jz	short loc_1000FC94
		mov	ecx, [esp+54h+var_28]
		push	ecx
		push	eax
		call	CERT_DestroyCertArray
		add	esp, 8

loc_1000FC94:				; CODE XREF: sub_1000F6A0+5E4j
		mov	eax, [esp+54h+var_30]
		test	eax, eax
		jz	short loc_1000FCA5
		push	eax
		call	SECKEY_DestroyPublicKey
		add	esp, 4

loc_1000FCA5:				; CODE XREF: sub_1000F6A0+5FAj
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
sub_1000F6A0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 166. SEC_PKCS7VerifySignature

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7VerifySignature
SEC_PKCS7VerifySignature proc near	; CODE XREF: SEC_PKCS12DecoderVerify+71p
					; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	0
		push	eax
		push	0
		push	0
		push	ecx
		push	edx
		call	sub_1000F6A0
		add	esp, 18h
		retn
SEC_PKCS7VerifySignature endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 164. SEC_PKCS7VerifyDetachedSignature

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7VerifyDetachedSignature
SEC_PKCS7VerifyDetachedSignature proc near ; DATA XREF:	.rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		mov	ecx, [esp+arg_C]
		mov	edx, [esp+arg_8]
		push	0
		push	eax
		mov	eax, [esp+8+arg_4]
		push	ecx
		mov	ecx, [esp+0Ch+arg_0]
		push	edx
		push	eax
		push	ecx
		call	sub_1000F6A0
		add	esp, 18h
		retn
SEC_PKCS7VerifyDetachedSignature endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 165. SEC_PKCS7VerifyDetachedSignatureAtTime

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7VerifyDetachedSignatureAtTime
SEC_PKCS7VerifyDetachedSignatureAtTime proc near ; DATA	XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= byte ptr  18h

		mov	ecx, [esp+arg_10]
		mov	edx, [esp+arg_C]
		lea	eax, [esp+arg_14]
		push	eax
		mov	eax, [esp+4+arg_8]
		push	ecx
		mov	ecx, [esp+8+arg_4]
		push	edx
		mov	edx, [esp+0Ch+arg_0]
		push	eax
		push	ecx
		push	edx
		call	sub_1000F6A0
		add	esp, 18h
		retn
SEC_PKCS7VerifyDetachedSignatureAtTime endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 158. SEC_PKCS7GetSignerCommonName

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7GetSignerCommonName
SEC_PKCS7GetSignerCommonName proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_1000FD51
		sub	eax, 2
		jnz	short loc_1000FD90
		mov	eax, [edi+24h]
		mov	esi, [eax+64h]
		jmp	short loc_1000FD57
; ---------------------------------------------------------------------------

loc_1000FD51:				; CODE XREF: SEC_PKCS7GetSignerCommonName+12j
		mov	ecx, [edi+24h]
		mov	esi, [ecx+40h]

loc_1000FD57:				; CODE XREF: SEC_PKCS7GetSignerCommonName+1Fj
		test	esi, esi
		jz	short loc_1000FD90
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000FD90
		mov	eax, [eax+54h]
		test	eax, eax
		jnz	short loc_1000FD80
		push	eax
		push	eax
		push	eax
		push	eax
		push	4
		push	edi
		call	sub_1000F6A0
		mov	edx, [esi]
		mov	eax, [edx+54h]
		add	esp, 18h
		test	eax, eax
		jz	short loc_1000FD90

loc_1000FD80:				; CODE XREF: SEC_PKCS7GetSignerCommonName+36j
		pop	edi
		add	eax, 0CCh
		pop	esi
		mov	[esp+arg_0], eax
		jmp	CERT_GetCommonName
; ---------------------------------------------------------------------------

loc_1000FD90:				; CODE XREF: SEC_PKCS7GetSignerCommonName+17j
					; SEC_PKCS7GetSignerCommonName+29j ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
SEC_PKCS7GetSignerCommonName endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 159. SEC_PKCS7GetSignerEmailAddress

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7GetSignerEmailAddress
SEC_PKCS7GetSignerEmailAddress proc near ; DATA	XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_1000FDC1
		sub	eax, 2
		jnz	short loc_1000FE0A
		mov	eax, [edi+24h]
		mov	esi, [eax+64h]
		jmp	short loc_1000FDC7
; ---------------------------------------------------------------------------

loc_1000FDC1:				; CODE XREF: SEC_PKCS7GetSignerEmailAddress+12j
		mov	ecx, [edi+24h]
		mov	esi, [ecx+40h]

loc_1000FDC7:				; CODE XREF: SEC_PKCS7GetSignerEmailAddress+1Fj
		test	esi, esi
		jz	short loc_1000FE0A
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000FE0A
		mov	eax, [eax+54h]
		test	eax, eax
		jnz	short loc_1000FDF0
		push	eax
		push	eax
		push	eax
		push	eax
		push	4
		push	edi
		call	sub_1000F6A0
		mov	edx, [esi]
		mov	eax, [edx+54h]
		add	esp, 18h
		test	eax, eax
		jz	short loc_1000FE0A

loc_1000FDF0:				; CODE XREF: SEC_PKCS7GetSignerEmailAddress+36j
		mov	eax, [eax+118h]
		test	eax, eax
		jz	short loc_1000FE0A
		cmp	byte ptr [eax],	0
		jz	short loc_1000FE0A
		pop	edi
		pop	esi
		mov	[esp+arg_0], eax
		jmp	PORT_Strdup_Util
; ---------------------------------------------------------------------------

loc_1000FE0A:				; CODE XREF: SEC_PKCS7GetSignerEmailAddress+17j
					; SEC_PKCS7GetSignerEmailAddress+29j ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
SEC_PKCS7GetSignerEmailAddress endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FE10	proc near		; CODE XREF: sub_100100D0+5Dp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 10h
		push	ebx
		push	ebp
		mov	ebp, [esp+18h+arg_0]
		push	ebp
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Bh
		jz	short loc_1000FE60
		dec	eax
		jz	short loc_1000FE51
		sub	eax, 2
		jnz	short loc_1000FE35
		cmp	[esp+18h+arg_4], eax
		jnz	short loc_1000FE3D

loc_1000FE35:				; CODE XREF: sub_1000FE10+1Dj
					; sub_1000FE10+65j
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000FE3D:				; CODE XREF: sub_1000FE10+23j
		mov	ebx, [ebp+24h]
		add	ebx, 0Ch
		mov	[esp+18h+var_C], 0
		mov	[esp+18h+arg_0], ebx
		jmp	short loc_1000FE73
; ---------------------------------------------------------------------------

loc_1000FE51:				; CODE XREF: sub_1000FE10+18j
		mov	eax, [ebp+24h]
		mov	ecx, [eax+0Ch]
		mov	[esp+18h+var_C], ecx
		add	eax, 14h
		jmp	short loc_1000FE6D
; ---------------------------------------------------------------------------

loc_1000FE60:				; CODE XREF: sub_1000FE10+15j
		mov	eax, [ebp+24h]
		mov	edx, [eax+0Ch]
		mov	[esp+18h+var_C], edx
		add	eax, 10h

loc_1000FE6D:				; CODE XREF: sub_1000FE10+4Ej
		mov	ebx, eax
		mov	[esp+18h+arg_0], eax

loc_1000FE73:				; CODE XREF: sub_1000FE10+3Fj
		test	ebx, ebx
		jz	short loc_1000FE35
		mov	eax, [esp+18h+arg_4]
		push	esi
		push	edi
		mov	[esp+20h+var_10], eax
		test	eax, eax
		jnz	short loc_1000FEDA
		mov	eax, [ebx+44h]
		push	eax
		call	PK11_AlgtagToMechanism
		mov	ecx, [ebp+14h]
		mov	edi, eax
		push	ecx
		push	edi
		call	PK11_GetBestSlot
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1000FED0
		mov	edx, [ebp+14h]
		mov	eax, [ebx+40h]
		push	edx
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		push	eax
		push	0
		push	edi
		push	esi
		call	PK11_KeyGen
		mov	edi, eax
		push	esi
		mov	[esp+38h+var_10], edi
		call	PK11_FreeSlot
		add	esp, 18h
		test	edi, edi
		jnz	short loc_1000FEDA

loc_1000FED0:				; CODE XREF: sub_1000FE10+91j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000FEDA:				; CODE XREF: sub_1000FE10+73j
					; sub_1000FE10+BEj
		mov	eax, [ebp+0]
		push	eax
		mov	[esp+24h+var_4], 0
		call	PORT_ArenaMark_Util
		mov	[esp+24h+var_8], eax
		mov	eax, [esp+24h+var_C]
		add	esp, 4
		test	eax, eax
		jz	loc_1000FFC3
		mov	[esp+20h+var_C], eax

loc_1000FF02:				; CODE XREF: sub_1000FE10+1A2j
		mov	ecx, [esp+20h+var_C]
		mov	esi, [ecx]
		test	esi, esi
		jz	loc_1000FFC3
		mov	edi, [esi+34h]
		test	edi, edi
		jz	loc_1000FFAD
		lea	edx, [edi+0D8h]
		push	edx
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		cmp	eax, 10h
		jnz	loc_1000FFB7
		push	edi
		call	CERT_ExtractPublicKey
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_10010001
		push	edi
		call	SECKEY_PublicKeyStrength
		mov	ebx, eax
		mov	eax, [ebp+0]
		push	ebx
		push	eax
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+2Ch], eax
		mov	[esi+30h], ebx
		test	eax, eax
		jz	loc_1000FFF4
		mov	edx, [esp+20h+var_10]
		lea	ecx, [esi+28h]
		push	ecx
		push	edx
		push	edi
		push	10h
		call	PK11_AlgtagToMechanism
		add	esp, 4
		push	eax
		call	PK11_PubWrapSymKey
		push	edi
		mov	ebx, eax
		call	SECKEY_DestroyPublicKey
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_10010001
		mov	eax, [ebp+0]
		push	ebx
		push	10h
		add	esi, 10h
		push	esi
		push	eax
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10010001
		mov	ebx, [esp+20h+arg_0]

loc_1000FFAD:				; CODE XREF: sub_1000FE10+105j
		add	[esp+20h+var_C], 4
		jmp	loc_1000FF02
; ---------------------------------------------------------------------------

loc_1000FFB7:				; CODE XREF: sub_1000FE10+11Dj
		push	0FFFFE006h
		call	PORT_SetError_Util
		jmp	short loc_1000FFFE
; ---------------------------------------------------------------------------

loc_1000FFC3:				; CODE XREF: sub_1000FE10+E8j
					; sub_1000FE10+FAj
		mov	edx, [ebx+44h]
		mov	eax, [esp+20h+var_10]
		lea	ecx, [ebx+10h]
		push	ecx
		mov	ecx, [ebp+0]
		push	edx
		push	eax
		push	ecx
		call	sub_10010C70
		add	esp, 10h
		mov	[esp+20h+var_4], eax
		test	eax, eax
		jz	short loc_10010001
		mov	edx, [esp+20h+var_8]
		mov	eax, [ebp+0]
		push	edx
		push	eax
		call	PORT_ArenaUnmark_Util
		jmp	short loc_10010013
; ---------------------------------------------------------------------------

loc_1000FFF4:				; CODE XREF: sub_1000FE10+153j
		test	edi, edi
		jz	short loc_10010001
		push	edi
		call	SECKEY_DestroyPublicKey

loc_1000FFFE:				; CODE XREF: sub_1000FE10+1B1j
		add	esp, 4

loc_10010001:				; CODE XREF: sub_1000FE10+130j
					; sub_1000FE10+180j ...
		mov	eax, [esp+20h+var_8]
		test	eax, eax
		jz	short loc_10010016
		mov	ecx, [ebp+0]
		push	eax
		push	ecx
		call	PORT_ArenaRelease_Util

loc_10010013:				; CODE XREF: sub_1000FE10+1E2j
		add	esp, 8

loc_10010016:				; CODE XREF: sub_1000FE10+1F7j
		cmp	[esp+20h+arg_4], 0
		jnz	short loc_1001002E
		mov	eax, [esp+20h+var_10]
		test	eax, eax
		jz	short loc_1001002E
		push	eax
		call	PK11_FreeSymKey
		add	esp, 4

loc_1001002E:				; CODE XREF: sub_1000FE10+20Bj
					; sub_1000FE10+213j
		mov	eax, [esp+20h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_1000FE10	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10010040:				; DATA XREF: SEC_PKCS7EncoderStart+5Bo
		cmp	dword ptr [esp+8], 0
		jz	short locret_100100B6
		push	esi
		push	edi
		mov	edi, [esp+0Ch]
		mov	esi, [edi+4]
		push	esi
		call	SEC_PKCS7ContentType
		add	eax, 0FFFFFFE6h
		add	esp, 4
		cmp	eax, 4		; switch 5 cases
		ja	short loc_10010098 ; jumptable 10010061	default	case
		jmp	ds:off_100100B8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10010068:				; CODE XREF: .text:10010061j
					; DATA XREF: .text:off_100100B8o
		mov	esi, [esi+24h]	; jumptable 10010061 case 3
		test	esi, esi
		jz	short loc_100100B4
		add	esi, 48h
		jmp	short loc_1001009B
; ---------------------------------------------------------------------------

loc_10010074:				; CODE XREF: .text:10010061j
					; DATA XREF: .text:off_100100B8o
		mov	esi, [esi+24h]	; jumptable 10010061 cases 0,4
		test	esi, esi
		jz	short loc_100100B4
		add	esi, 34h
		jmp	short loc_1001009B
; ---------------------------------------------------------------------------

loc_10010080:				; CODE XREF: .text:10010061j
					; DATA XREF: .text:off_100100B8o
		mov	esi, [esi+24h]	; jumptable 10010061 case 1
		test	esi, esi
		jz	short loc_100100B4
		add	esi, 38h
		jmp	short loc_1001009B
; ---------------------------------------------------------------------------

loc_1001008C:				; CODE XREF: .text:10010061j
					; DATA XREF: .text:off_100100B8o
		mov	esi, [esi+24h]	; jumptable 10010061 case 2
		test	esi, esi
		jz	short loc_100100B4
		add	esi, 3Ch
		jmp	short loc_1001009B
; ---------------------------------------------------------------------------

loc_10010098:				; CODE XREF: .text:1001005Fj
		add	esi, 24h	; jumptable 10010061 default case

loc_1001009B:				; CODE XREF: .text:10010072j
					; .text:1001007Ej ...
		cmp	[esp+14h], esi
		jnz	short loc_100100B4
		mov	eax, [edi]
		push	eax
		call	SEC_ASN1EncoderSetTakeFromBuf_Util
		mov	ecx, [edi]
		push	ecx
		call	SEC_ASN1EncoderClearNotifyProc_Util
		add	esp, 8

loc_100100B4:				; CODE XREF: .text:1001006Dj
					; .text:10010079j ...
		pop	edi
		pop	esi

locret_100100B6:			; CODE XREF: .text:10010045j
		retn
; ---------------------------------------------------------------------------
		align 4
off_100100B8	dd offset loc_10010074	; DATA XREF: .text:10010061r
		dd offset loc_10010080	; jump table for switch	statement
		dd offset loc_1001008C
		dd offset loc_10010068
		dd offset loc_10010074
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100100D0	proc near		; CODE XREF: SEC_PKCS7EncoderStart+Cp
					; sub_100109D0+Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		push	1Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_100100E9
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100100E9:				; CODE XREF: sub_100100D0+14j
		push	ebx
		push	edi
		push	ebp
		xor	ebx, ebx
		xor	edi, edi
		call	SEC_PKCS7ContentType
		add	eax, 0FFFFFFE6h
		add	esp, 4
		cmp	eax, 4		; switch 5 cases
		ja	loc_100101A3	; jumptable 10010104 default case
		jmp	ds:off_100101B0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001010B:				; CODE XREF: sub_100100D0+34j
					; DATA XREF: .text:off_100101B0o
		mov	eax, [ebp+24h]	; jumptable 10010104 case 3
		add	eax, 0Ch
		jmp	short loc_10010146
; ---------------------------------------------------------------------------

loc_10010113:				; CODE XREF: sub_100100D0+34j
					; DATA XREF: .text:off_100101B0o
		mov	eax, [ebp+24h]	; jumptable 10010104 case 0
		mov	ebx, [eax+44h]
		mov	edi, [eax+0Ch]
		jmp	short loc_1001013C
; ---------------------------------------------------------------------------

loc_1001011E:				; CODE XREF: sub_100100D0+34j
					; DATA XREF: .text:off_100101B0o
		mov	eax, [ebp+24h]	; jumptable 10010104 case 2
		mov	ebx, [eax+68h]
		mov	edi, [eax+10h]

loc_10010127:				; CODE XREF: sub_100100D0+34j
					; DATA XREF: .text:off_100101B0o
		mov	eax, [esp+10h+arg_4] ; jumptable 10010104 cases	1,4
		push	eax
		push	ebp
		call	sub_1000FE10
		add	esp, 8
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_10010193

loc_1001013C:				; CODE XREF: sub_100100D0+4Cj
		test	edi, edi
		jz	short loc_100101A3 ; jumptable 10010104	default	case
		test	ebx, ebx
		jnz	short loc_100101A3 ; jumptable 10010104	default	case
		mov	eax, [edi]

loc_10010146:				; CODE XREF: sub_100100D0+41j
		test	eax, eax
		jz	short loc_100101A3 ; jumptable 10010104	default	case
		push	eax
		call	SECOID_FindOIDTag_Util
		push	eax
		call	HASH_GetHashObjectByOidTag
		add	esp, 8
		mov	[esi+14h], eax
		test	eax, eax
		jz	short loc_1001017D
		mov	ecx, [eax+4]
		call	ecx
		mov	[esi+18h], eax
		test	eax, eax
		jnz	short loc_10010171
		mov	[esi+14h], eax
		jmp	short loc_1001017D
; ---------------------------------------------------------------------------

loc_10010171:				; CODE XREF: sub_100100D0+9Aj
		mov	edx, [esi+14h]
		push	eax
		mov	eax, [edx+10h]
		call	eax
		add	esp, 4

loc_1001017D:				; CODE XREF: sub_100100D0+8Ej
					; sub_100100D0+9Fj
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_100101A3 ; jumptable 10010104	default	case
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_10010193
		push	eax
		call	sub_10010E10
		add	esp, 4

loc_10010193:				; CODE XREF: sub_100100D0+6Aj
					; sub_100100D0+B8j
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100101A3:				; CODE XREF: sub_100100D0+2Ej
					; sub_100100D0+6Ej ...
		pop	edi		; jumptable 10010104 default case
		pop	ebx
		mov	[esi+4], ebp
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_100100D0	endp

; ---------------------------------------------------------------------------
		align 10h
off_100101B0	dd offset loc_10010113	; DATA XREF: sub_100100D0+34r
		dd offset loc_10010127	; jump table for switch	statement
		dd offset loc_1001011E
		dd offset loc_1001010B
		dd offset loc_10010127
		align 10h
; Exported entry 153. SEC_PKCS7EncoderStart

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7EncoderStart
SEC_PKCS7EncoderStart proc near		; CODE XREF: sub_10009B90+68p
					; SEC_PKCS12Encode+BEp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	eax
		push	edi
		call	sub_100100D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1001021D
		mov	ecx, [esp+8+arg_4]
		mov	edx, [esp+8+arg_8]
		lea	eax, [esi+8]
		push	eax
		push	offset loc_10009A50
		push	offset dword_10014A10
		push	edi
		mov	[eax], ecx
		mov	[esi+0Ch], edx
		call	SEC_ASN1EncoderStart_Util
		add	esp, 10h
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_10010222

loc_10010214:				; CODE XREF: SEC_PKCS7EncoderStart+77j
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1001021D:				; CODE XREF: SEC_PKCS7EncoderStart+18j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010222:				; CODE XREF: SEC_PKCS7EncoderStart+42j
		push	eax
		call	SEC_ASN1EncoderSetStreaming_Util
		mov	eax, [esi]
		push	esi
		push	offset loc_10010040
		push	eax
		call	SEC_ASN1EncoderSetNotifyProc_Util
		mov	ecx, [esi]
		push	0
		push	0
		push	ecx
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_10010214
		pop	edi
		mov	eax, esi
		pop	esi
		retn
SEC_PKCS7EncoderStart endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010250	proc near		; CODE XREF: SEC_PKCS7EncoderFinish+Ep
					; sub_100109D0+9Fp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		xor	ebx, ebx
		push	edi
		mov	edi, eax
		mov	[esp+18h+var_C], ebx
		mov	[esp+18h+var_8], ebx
		cmp	edi, ebx
		jz	short loc_1001027F
		mov	eax, [esi+14h]
		cmp	eax, ebx
		jz	short loc_1001027F
		mov	ecx, [esi+18h]
		mov	edx, [eax+14h]
		push	edi
		push	ebp
		push	ecx
		call	edx
		add	esp, 0Ch

loc_1001027F:				; CODE XREF: sub_10010250+18j
					; sub_10010250+1Fj
		mov	eax, [esi+10h]
		cmp	eax, ebx
		jz	loc_1001033A
		mov	ecx, [esp+18h+arg_8]
		push	ecx
		push	edi
		push	eax
		call	sub_10010E60
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_100102C8
		mov	ebx, [esp+18h+arg_8]
		mov	edx, [esi+10h]
		push	ebx
		push	edi
		push	ebp
		push	eax
		push	eax
		push	eax
		push	edx
		call	sub_100110A0
		add	esp, 1Ch
		mov	[esp+18h+var_8], eax
		test	ebx, ebx
		jz	loc_1001046A
		xor	edi, edi
		jmp	loc_10010353
; ---------------------------------------------------------------------------

loc_100102C8:				; CODE XREF: sub_10010250+4Dj
		cmp	[esp+18h+arg_0], 0
		push	ebx
		jz	short loc_100102E4
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	ecx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		mov	[esp+18h+var_C], eax
		jmp	short loc_100102F0
; ---------------------------------------------------------------------------

loc_100102E4:				; CODE XREF: sub_10010250+7Ej
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esp+18h+var_C], eax

loc_100102F0:				; CODE XREF: sub_10010250+92j
		test	eax, eax
		jnz	short loc_100102FE
		mov	[esp+18h+var_8], 0FFFFFFFFh
		jmp	short loc_10010328
; ---------------------------------------------------------------------------

loc_100102FE:				; CODE XREF: sub_10010250+A2j
		mov	edx, [esp+18h+arg_8]
		push	edx
		mov	edx, [esi+10h]
		push	edi
		push	ebp
		push	ebx
		lea	ecx, [esp+28h+var_4]
		push	ecx
		push	eax
		push	edx
		call	sub_100110A0
		mov	ebp, [esp+34h+var_C]
		mov	edi, [esp+34h+var_4]
		add	esp, 1Ch
		mov	[esp+18h+var_8], eax
		test	eax, eax
		jz	short loc_1001033A

loc_10010328:				; CODE XREF: sub_10010250+ACj
		cmp	[esp+18h+arg_8], 0
		jnz	short loc_10010353
		mov	eax, [esp+18h+var_8]
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001033A:				; CODE XREF: sub_10010250+34j
					; sub_10010250+D6j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10010353
		test	edi, edi
		jz	short loc_10010353
		push	edi
		push	ebp
		push	eax
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 0Ch
		mov	[esp+18h+var_8], eax

loc_10010353:				; CODE XREF: sub_10010250+73j
					; sub_10010250+DDj ...
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1001038F
		cmp	[esp+18h+arg_8], 0
		jz	short loc_1001036A
		push	eax
		call	sub_10010E10
		add	esp, 4

loc_1001036A:				; CODE XREF: sub_10010250+10Fj
		mov	eax, [esp+18h+arg_0]
		test	eax, eax
		jz	short loc_1001037E
		mov	ecx, [esp+18h+var_C]
		mov	[eax+4], ecx
		mov	[eax+8], edi
		jmp	short loc_1001038F
; ---------------------------------------------------------------------------

loc_1001037E:				; CODE XREF: sub_10010250+120j
		mov	eax, [esp+18h+var_C]
		test	eax, eax
		jz	short loc_1001038F
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_1001038F:				; CODE XREF: sub_10010250+108j
					; sub_10010250+12Cj ...
		cmp	[esp+18h+arg_8], 0
		jz	loc_10010466
		cmp	dword ptr [esi+14h], 0
		jz	loc_10010466
		mov	edx, [esi+4]
		push	edx
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_100103E1
		sub	eax, 2
		jz	short loc_100103D4
		dec	eax
		jz	short loc_100103C7

loc_100103BD:				; CODE XREF: sub_10010250+1B1j
					; sub_10010250+1D8j ...
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100103C7:				; CODE XREF: sub_10010250+16Bj
		mov	eax, [esi+4]
		mov	edi, [eax+24h]
		add	edi, 4Ch
		xor	ebx, ebx
		jmp	short loc_100103EC
; ---------------------------------------------------------------------------

loc_100103D4:				; CODE XREF: sub_10010250+168j
		mov	eax, [esi+4]
		mov	ebx, [eax+24h]
		xor	edi, edi
		add	ebx, 68h
		jmp	short loc_100103EC
; ---------------------------------------------------------------------------

loc_100103E1:				; CODE XREF: sub_10010250+163j
		mov	eax, [esi+4]
		mov	ebx, [eax+24h]
		xor	edi, edi
		add	ebx, 44h

loc_100103EC:				; CODE XREF: sub_10010250+182j
					; sub_10010250+18Fj
		mov	ecx, [esi+14h]
		mov	edx, [ecx]
		mov	eax, [eax]
		push	edx
		push	eax
		call	PORT_ArenaAlloc_Util
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	short loc_100103BD
		test	ebx, ebx
		jz	short loc_10010439
		mov	ecx, [esi+4]
		mov	edx, [ecx]
		push	0Ch
		push	edx
		call	PORT_ArenaAlloc_Util
		mov	edi, eax
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	8
		push	ecx
		call	PORT_ArenaAlloc_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_100103BD
		test	edi, edi
		jz	short loc_100103BD
		mov	[eax], edi
		mov	dword ptr [eax+4], 0
		mov	[ebx], eax

loc_10010439:				; CODE XREF: sub_10010250+1B5j
		mov	[edi+4], ebp
		mov	edx, [esi+14h]
		mov	ecx, [edx]
		push	ecx
		lea	eax, [edi+8]
		push	eax
		mov	[eax], ecx
		mov	edx, [esi+14h]
		mov	eax, [esi+18h]
		mov	ecx, [edx+18h]
		push	ebp
		push	eax
		call	ecx
		mov	edx, [esi+14h]
		mov	eax, [esi+18h]
		mov	ecx, [edx+0Ch]
		push	1
		push	eax
		call	ecx
		add	esp, 18h

loc_10010466:				; CODE XREF: sub_10010250+144j
					; sub_10010250+14Ej
		mov	eax, [esp+18h+var_8]

loc_1001046A:				; CODE XREF: sub_10010250+6Bj
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10010250	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 154. SEC_PKCS7EncoderUpdate

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7EncoderUpdate
SEC_PKCS7EncoderUpdate proc near	; CODE XREF: sub_10009A70+64p
					; sub_10009A70+93p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		mov	ecx, [esp+4+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	esi
		mov	esi, [esp+10h+arg_8]
		push	edi
		xor	edi, edi
		xor	ebx, ebx
		mov	eax, esi
		mov	[esp+14h+arg_8], ecx
		test	esi, esi
		jz	short loc_100104B6
		mov	edx, [ebp+14h]
		test	edx, edx
		jz	short loc_100104B6
		mov	eax, [ebp+18h]
		push	esi
		push	ecx
		mov	ecx, [edx+14h]
		push	eax
		call	ecx
		add	esp, 0Ch
		mov	eax, esi

loc_100104B6:				; CODE XREF: SEC_PKCS7EncoderUpdate+1Dj
					; SEC_PKCS7EncoderUpdate+24j
		mov	ecx, [ebp+10h]
		test	ecx, ecx
		jz	short loc_1001052E
		push	0
		push	esi
		push	ecx
		call	sub_10010E60
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_100104EB
		mov	edx, [esp+14h+arg_4]
		push	eax
		push	esi
		push	edx
		push	eax
		push	eax
		push	eax
		mov	eax, [ebp+10h]
		push	eax
		call	sub_100110A0
		add	esp, 1Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100104EB:				; CODE XREF: SEC_PKCS7EncoderUpdate+4Dj
		push	ebx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10010505
		pop	edi
		pop	esi
		or	ebx, 0FFFFFFFFh
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10010505:				; CODE XREF: SEC_PKCS7EncoderUpdate+78j
		mov	ecx, [esp+14h+arg_4]
		mov	eax, [ebp+10h]
		push	0
		push	esi
		push	ecx
		push	ebx
		lea	edx, [esp+24h+arg_0]
		push	edx
		push	edi
		push	eax
		call	sub_100110A0
		mov	ebx, eax
		mov	eax, [esp+30h+arg_0]
		add	esp, 1Ch
		mov	[esp+14h+arg_8], edi
		test	ebx, ebx
		jnz	short loc_1001055D

loc_1001052E:				; CODE XREF: SEC_PKCS7EncoderUpdate+3Bj
		mov	ecx, [ebp+0]
		test	ecx, ecx
		jz	short loc_1001054A
		test	eax, eax
		jz	short loc_1001054A
		mov	edx, [esp+14h+arg_8]
		push	eax
		push	edx
		push	ecx
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 0Ch
		mov	ebx, eax

loc_1001054A:				; CODE XREF: SEC_PKCS7EncoderUpdate+B3j
					; SEC_PKCS7EncoderUpdate+B7j
		cmp	dword ptr [ebp+10h], 0
		jz	short loc_1001055D
		test	edi, edi
		jz	short loc_1001055D
		push	edi
		call	PORT_Free_Util
		add	esp, 4

loc_1001055D:				; CODE XREF: SEC_PKCS7EncoderUpdate+ACj
					; SEC_PKCS7EncoderUpdate+CEj ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
SEC_PKCS7EncoderUpdate endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010570	proc near		; CODE XREF: SEC_PKCS7EncoderFinish+34p
					; sub_100109D0+B4p

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4

		sub	esp, 44h
		push	ebx
		push	ebp
		push	esi
		mov	esi, eax
		push	edi
		push	esi
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Ah
		jz	short loc_100105B7
		sub	eax, 2
		jnz	loc_100108FE
		mov	eax, [esi+24h]
		mov	ebx, [eax+6Ch]
		mov	ecx, [eax+70h]
		mov	edi, [eax+10h]
		mov	ebp, [eax+64h]
		mov	edx, [eax+68h]
		mov	[esp+54h+var_38], ebx
		mov	[esp+54h+var_44], ecx
		mov	[esp+54h+var_34], edi
		mov	[esp+54h+var_40], ebp
		add	eax, 5Ch
		jmp	short loc_100105E6
; ---------------------------------------------------------------------------

loc_100105B7:				; CODE XREF: sub_10010570+15j
		mov	eax, [esi+24h]
		mov	ecx, [eax+48h]
		mov	edx, [eax+4Ch]
		mov	[esp+54h+var_38], ecx
		mov	ecx, [eax+0Ch]
		mov	ebx, [esp+54h+var_38]
		mov	[esp+54h+var_34], ecx
		mov	ecx, [eax+40h]
		mov	edi, [esp+54h+var_34]
		mov	[esp+54h+var_44], edx
		mov	edx, [eax+44h]
		mov	[esp+54h+var_40], ecx
		add	eax, 38h
		mov	ebp, ecx

loc_100105E6:				; CODE XREF: sub_10010570+45j
		mov	[esp+54h+var_30], edx
		xor	edx, edx
		mov	[esp+54h+var_20], eax
		cmp	ebx, edx
		jnz	short loc_10010602
		cmp	[esp+54h+var_44], edx
		jnz	short loc_10010602
		cmp	ebp, edx
		jz	loc_100108FE

loc_10010602:				; CODE XREF: sub_10010570+82j
					; sub_10010570+88j
		mov	eax, [esi]
		mov	[esp+54h+var_24], eax
		mov	[esp+54h+var_2C], edx
		cmp	ebp, edx
		jz	loc_100107DF
		mov	[esp+54h+var_3C], edx
		cmp	[ebp+0], edx
		jz	loc_100107DF
		mov	eax, ebp
		jmp	short loc_10010629
; ---------------------------------------------------------------------------

loc_10010625:				; CODE XREF: sub_10010570+25Fj
		mov	edi, [esp+54h+var_34]

loc_10010629:				; CODE XREF: sub_10010570+B3j
		mov	ebp, [eax]
		lea	ecx, [ebp+10h]
		push	ecx
		call	SECOID_GetAlgorithmTag_Util
		xor	esi, esi
		add	esp, 4
		mov	ebx, eax
		mov	[esp+54h+var_28], ebx
		cmp	[edi], esi
		jz	short loc_1001065E
		mov	eax, edi

loc_10010645:				; CODE XREF: sub_10010570+ECj
		mov	edx, [eax]
		push	edx
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		cmp	ebx, eax
		jz	short loc_1001065E
		inc	esi
		cmp	dword ptr [edi+esi*4], 0
		lea	eax, [edi+esi*4]
		jnz	short loc_10010645

loc_1001065E:				; CODE XREF: sub_10010570+D1j
					; sub_10010570+E2j
		cmp	dword ptr [edi+esi*4], 0
		jz	loc_10010911
		mov	eax, [esp+54h+arg_0]
		mov	ebx, [ebp+54h]
		push	eax
		push	ebx
		call	PK11_FindKeyByAnyCert
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_10010911
		add	ebx, 0D8h
		push	ebx
		call	SECOID_GetAlgorithmTag_Util
		lea	ebx, [ebp+28h]
		mov	[esp+58h+var_1C], eax
		mov	eax, [ebx]
		add	esp, 4
		test	eax, eax
		jz	loc_1001073A
		push	1
		push	22h
		push	eax
		call	sub_100112A0
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10010908
		mov	ecx, [eax+0Ch]
		mov	edx, [esp+54h+var_30]
		mov	eax, [edx+esi*4]
		mov	[ecx], eax
		mov	ecx, [ebx]
		push	ecx
		call	sub_10011520
		add	esp, 4
		test	eax, eax
		jnz	loc_10010908
		push	ebx
		lea	edx, [esp+58h+var_18]
		xor	esi, esi
		push	edx
		push	esi
		mov	[esp+60h+var_14], esi
		mov	[esp+60h+var_10], esi
		call	sub_10011500
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10010908
		mov	eax, [esp+54h+var_28]
		mov	ecx, [edi+4]
		push	eax
		push	ecx
		call	SEC_GetSignatureAlgorithmOidTag
		add	esp, 8
		cmp	eax, esi
		jz	loc_1001091C
		mov	edx, [esp+54h+var_10]
		push	eax
		mov	eax, [esp+58h+var_14]
		push	edi
		push	edx
		push	eax
		lea	ecx, [esp+64h+var_C]
		push	ecx
		call	SEC_SignData
		lea	edx, [esp+68h+var_18]
		push	0
		push	edx
		mov	esi, eax
		call	SECITEM_FreeItem_Util
		add	esp, 1Ch
		jmp	short loc_10010757
; ---------------------------------------------------------------------------

loc_1001073A:				; CODE XREF: sub_10010570+12Dj
		mov	eax, [esp+54h+var_30]
		mov	ecx, [eax+esi*4]
		mov	eax, [esp+54h+var_28]
		push	ecx
		lea	edx, [esp+58h+var_C]
		push	edx
		push	eax
		push	edi
		call	SGN_Digest
		add	esp, 10h
		mov	esi, eax

loc_10010757:				; CODE XREF: sub_10010570+1C8j
		push	edi
		call	SECKEY_DestroyPrivateKey
		add	esp, 4
		test	esi, esi
		jnz	loc_1001093A
		mov	esi, [esp+54h+var_24]
		lea	ecx, [esp+54h+var_C]
		push	ecx
		lea	edx, [ebp+44h]
		push	edx
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10010900
		push	eax
		lea	eax, [esp+58h+var_C]
		push	eax
		call	SECITEM_FreeItem_Util
		mov	ecx, [esp+5Ch+var_1C]
		push	0
		push	ecx
		lea	edx, [ebp+2Ch]
		push	edx
		push	esi
		call	SECOID_SetAlgorithmID_Util
		add	esp, 18h
		test	eax, eax
		jnz	loc_10010911
		mov	ebp, [ebp+58h]
		test	ebp, ebp
		jz	short loc_100107BB
		mov	eax, [ebp+4]
		add	[esp+54h+var_2C], eax

loc_100107BB:				; CODE XREF: sub_10010570+242j
		mov	eax, [esp+54h+var_3C]
		mov	ecx, [esp+54h+var_40]
		inc	eax
		cmp	dword ptr [ecx+eax*4], 0
		mov	[esp+54h+var_3C], eax
		lea	eax, [ecx+eax*4]
		jnz	loc_10010625
		mov	edx, [esp+54h+var_2C]
		mov	ebx, [esp+54h+var_38]
		mov	ebp, ecx

loc_100107DF:				; CODE XREF: sub_10010570+9Ej
					; sub_10010570+ABj
		test	ebx, ebx
		jz	short loc_100107F9
		cmp	dword ptr [ebx], 0
		jz	short loc_100107F9
		mov	eax, ebx
		lea	ebx, [ebx+0]

loc_100107F0:				; CODE XREF: sub_10010570+287j
		add	eax, 4
		inc	edx
		cmp	dword ptr [eax], 0
		jnz	short loc_100107F0

loc_100107F9:				; CODE XREF: sub_10010570+271j
					; sub_10010570+276j
		cmp	[esp+54h+var_44], 0
		jz	short loc_10010820
		mov	eax, [esp+54h+var_44]
		mov	eax, [eax]
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_10010820
		lea	esp, [esp+0]

loc_10010810:				; CODE XREF: sub_10010570+2AEj
		add	edx, [eax+4]
		mov	eax, [esp+54h+var_44]
		mov	eax, [eax+ecx*4+4]
		inc	ecx
		test	eax, eax
		jnz	short loc_10010810

loc_10010820:				; CODE XREF: sub_10010570+28Ej
					; sub_10010570+29Aj
		test	edx, edx
		jz	loc_100108FE
		lea	ecx, ds:4[edx*4]
		mov	edx, [esp+54h+var_24]
		push	ecx
		push	edx
		call	PORT_ArenaAlloc_Util
		xor	ecx, ecx
		add	esp, 8
		cmp	eax, ecx
		jz	loc_10010911
		cmp	ebp, ecx
		jz	short loc_10010894
		mov	[esp+54h+var_3C], ecx
		cmp	[ebp+0], ecx
		jz	short loc_10010894
		mov	edx, ebp

loc_10010856:				; CODE XREF: sub_10010570+31Ej
		mov	ebx, [edx]
		mov	edx, [ebx+58h]
		xor	esi, esi
		cmp	[edx+4], esi
		jle	short loc_1001087C
		xor	edi, edi

loc_10010864:				; CODE XREF: sub_10010570+306j
		mov	edx, [edx]
		add	edx, edi
		mov	[eax+ecx*4], edx
		mov	edx, [ebx+58h]
		inc	esi
		inc	ecx
		add	edi, 0Ch
		cmp	esi, [edx+4]
		jl	short loc_10010864
		mov	ebp, [esp+54h+var_40]

loc_1001087C:				; CODE XREF: sub_10010570+2F0j
		mov	edx, [esp+54h+var_3C]
		inc	edx
		cmp	dword ptr [ebp+edx*4+0], 0
		mov	[esp+54h+var_3C], edx
		lea	edx, [ebp+edx*4+0]
		jnz	short loc_10010856
		mov	ebx, [esp+54h+var_38]

loc_10010894:				; CODE XREF: sub_10010570+2D9j
					; sub_10010570+2E2j
		test	ebx, ebx
		jz	short loc_100108AF
		mov	edx, [ebx]
		xor	esi, esi
		test	edx, edx
		jz	short loc_100108AF

loc_100108A0:				; CODE XREF: sub_10010570+33Dj
		add	edx, 3Ch
		inc	esi
		mov	[eax+ecx*4], edx
		mov	edx, [ebx+esi*4]
		inc	ecx
		test	edx, edx
		jnz	short loc_100108A0

loc_100108AF:				; CODE XREF: sub_10010570+326j
					; sub_10010570+32Ej
		mov	ebx, [esp+54h+var_44]
		test	ebx, ebx
		jz	short loc_100108F1
		mov	edx, [ebx]
		xor	ebp, ebp
		test	edx, edx
		jz	short loc_100108F1
		nop

loc_100108C0:				; CODE XREF: sub_10010570+37Fj
		xor	esi, esi
		cmp	[edx+4], esi
		jle	short loc_100108E3
		xor	edi, edi
		lea	esp, [esp+0]

loc_100108D0:				; CODE XREF: sub_10010570+371j
		mov	edx, [edx]
		add	edx, edi
		mov	[eax+ecx*4], edx
		mov	edx, [ebx]
		inc	esi
		inc	ecx
		add	edi, 0Ch
		cmp	esi, [edx+4]
		jl	short loc_100108D0

loc_100108E3:				; CODE XREF: sub_10010570+355j
		mov	edx, [esp+54h+var_44]
		inc	ebp
		lea	ebx, [edx+ebp*4]
		mov	edx, [ebx]
		test	edx, edx
		jnz	short loc_100108C0

loc_100108F1:				; CODE XREF: sub_10010570+345j
					; sub_10010570+34Dj
		mov	dword ptr [eax+ecx*4], 0
		mov	ecx, [esp+54h+var_20]
		mov	[ecx], eax

loc_100108FE:				; CODE XREF: sub_10010570+1Aj
					; sub_10010570+8Cj ...
		xor	eax, eax

loc_10010900:				; CODE XREF: sub_10010570+210j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10010908:				; CODE XREF: sub_10010570+142j
					; sub_10010570+161j ...
		push	edi
		call	SECKEY_DestroyPrivateKey
		add	esp, 4

loc_10010911:				; CODE XREF: sub_10010570+F2j
					; sub_10010570+10Dj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_1001091C:				; CODE XREF: sub_10010570+19Bj
		push	0FFFFE006h
		call	PORT_SetError_Util
		push	edi
		call	SECKEY_DestroyPrivateKey
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_1001093A:				; CODE XREF: sub_10010570+1F2j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
sub_10010570	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 152. SEC_PKCS7EncoderFinish

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7EncoderFinish
SEC_PKCS7EncoderFinish proc near	; CODE XREF: sub_100096D0+4Dp
					; sub_10009B90+E8p ...

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	1
		push	0
		push	0
		xor	eax, eax
		call	sub_10010250
		mov	edi, eax
		mov	eax, [esi]
		push	eax
		call	SEC_ASN1EncoderClearTakeFromBuf_Util
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1EncoderClearStreaming_Util
		add	esp, 14h
		test	edi, edi
		jnz	short loc_100109A1
		mov	edx, [esp+8+arg_8]
		mov	eax, [esi+4]
		push	edx
		call	sub_10010570
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_100109A1
		push	eax
		push	eax
		mov	eax, [esi]
		push	eax
		call	SEC_ASN1EncoderUpdate_Util
		add	esp, 0Ch
		mov	edi, eax

loc_100109A1:				; CODE XREF: SEC_PKCS7EncoderFinish+2Aj
					; SEC_PKCS7EncoderFinish+40j
		mov	ecx, [esi]
		push	ecx
		call	SEC_ASN1EncoderFinish_Util
		push	esi
		call	PORT_Free_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		retn
SEC_PKCS7EncoderFinish endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 151. SEC_PKCS7EncoderAbort

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7EncoderAbort
SEC_PKCS7EncoderAbort proc near		; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		mov	edx, [ecx]
		mov	[esp+arg_0], edx
		jmp	SEC_ASN1EncoderAbort_Util
SEC_PKCS7EncoderAbort endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100109D0	proc near		; CODE XREF: SEC_PKCS7Encode+18p
					; SEC_PKCS7EncodeItem+15p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	eax
		push	ebx
		call	sub_100100D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_100109F0
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100109F0:				; CODE XREF: sub_100109D0+18j
		push	edi
		push	ebx
		call	SEC_PKCS7GetContent
		add	esp, 4
		cmp	dword ptr [esi+10h], 0
		mov	edi, eax
		jz	short loc_10010A57
		mov	ecx, [esi+4]
		push	ecx
		call	SEC_PKCS7ContentType
		add	esp, 4
		sub	eax, 1Bh
		jz	short loc_10010A49
		dec	eax
		jz	short loc_10010A3B
		sub	eax, 2
		jz	short loc_10010A2D
		push	esi
		or	edi, 0FFFFFFFFh
		call	PORT_Free_Util
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10010A2D:				; CODE XREF: sub_100109D0+49j
		mov	edx, [esi+4]
		mov	eax, [edx+24h]
		add	eax, 0Ch
		lea	edx, [eax+28h]
		jmp	short loc_10010A59
; ---------------------------------------------------------------------------

loc_10010A3B:				; CODE XREF: sub_100109D0+44j
		mov	eax, [esi+4]
		mov	eax, [eax+24h]
		add	eax, 14h
		lea	edx, [eax+28h]
		jmp	short loc_10010A59
; ---------------------------------------------------------------------------

loc_10010A49:				; CODE XREF: sub_100109D0+41j
		mov	ecx, [esi+4]
		mov	eax, [ecx+24h]
		add	eax, 10h
		lea	edx, [eax+28h]
		jmp	short loc_10010A59
; ---------------------------------------------------------------------------

loc_10010A57:				; CODE XREF: sub_100109D0+30j
		xor	edx, edx

loc_10010A59:				; CODE XREF: sub_100109D0+69j
					; sub_100109D0+77j ...
		test	edi, edi
		jz	short loc_10010A7D
		mov	ecx, [edi+4]
		test	ecx, ecx
		jz	short loc_10010A7D
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_10010A7D
		push	1
		push	ecx
		push	edx
		call	sub_10010250
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10010A8E

loc_10010A7D:				; CODE XREF: sub_100109D0+8Bj
					; sub_100109D0+92j ...
		mov	edx, [esp+0Ch+arg_C]
		push	edx
		mov	eax, ebx
		call	sub_10010570
		add	esp, 4
		mov	edi, eax

loc_10010A8E:				; CODE XREF: sub_100109D0+ABj
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_100109D0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 149. SEC_PKCS7Encode

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7Encode
SEC_PKCS7Encode	proc near		; DATA XREF: .rdata:off_10016AC8o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_14]
		mov	ecx, [esp+arg_10]
		mov	edx, [esp+arg_C]
		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	eax
		push	ecx
		push	edx
		push	esi
		call	sub_100109D0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10010AEC
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		lea	edx, [esp+0Ch+var_8]
		push	edx
		push	offset loc_10009A50
		push	offset dword_10014A10
		push	esi
		mov	[esp+1Ch+var_8], eax
		mov	[esp+1Ch+var_4], ecx
		call	SEC_ASN1Encode_Util
		add	esp, 10h

loc_10010AEC:				; CODE XREF: SEC_PKCS7Encode+22j
		pop	esi
		add	esp, 8
		retn
SEC_PKCS7Encode	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 150. SEC_PKCS7EncodeItem

; =============== S U B	R O U T	I N E =======================================


		public SEC_PKCS7EncodeItem
SEC_PKCS7EncodeItem proc near		; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_14]
		mov	ecx, [esp+arg_10]
		mov	edx, [esp+arg_C]
		push	esi
		mov	esi, [esp+4+arg_8]
		push	eax
		push	ecx
		push	edx
		push	esi
		call	sub_100109D0
		add	esp, 10h
		test	eax, eax
		jz	short loc_10010B25
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010B25:				; CODE XREF: SEC_PKCS7EncodeItem+1Fj
		mov	eax, [esp+4+arg_4]
		mov	ecx, [esp+4+arg_0]
		push	offset dword_10014A10
		push	esi
		push	eax
		push	ecx
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		pop	esi
		retn
SEC_PKCS7EncodeItem endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010B40	proc near		; CODE XREF: sub_1000EE10+92p
					; sub_1000F6A0+49Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	esi
		push	101Ch
		mov	[esp+0Ch+var_4], 0
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10010B60
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10010B60:				; CODE XREF: sub_10010B40+1Bj
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		push	ebp
		push	edi
		push	ebx
		call	SECOID_GetAlgorithmTag_Util
		push	ebx
		mov	edi, eax
		call	SEC_PKCS5IsAlgorithmPBEAlg
		mov	ebp, [esp+1Ch+arg_0]
		add	esp, 8
		test	eax, eax
		jz	short loc_10010BC0
		push	ebp
		call	PK11_GetSymKeyUserData
		add	esp, 4
		test	eax, eax
		jz	short loc_10010BD9
		push	eax
		lea	eax, [esp+18h+var_4]
		push	eax
		push	ebx
		call	PK11_GetPBECryptoMechanism
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_10010BEA
		push	esi
		call	PORT_Free_Util
		mov	ecx, [esp+18h+var_4]
		push	1
		push	ecx
		call	SECITEM_FreeItem_Util
		add	esp, 0Ch
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10010BC0:				; CODE XREF: sub_10010B40+3Ej
		push	edi
		call	PK11_AlgtagToMechanism
		push	ebx
		mov	edi, eax
		call	PK11_ParamFromAlgid
		add	esp, 8
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jnz	short loc_10010BEE

loc_10010BD9:				; CODE XREF: sub_10010B40+4Bj
					; sub_10010B40+104j
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10010BEA:				; CODE XREF: sub_10010B40+61j
		mov	eax, [esp+14h+var_4]

loc_10010BEE:				; CODE XREF: sub_10010B40+97j
		push	eax
		push	edi
		call	PK11_GetBlockSize
		push	ebp
		mov	[esi+14h], eax
		call	PK11_GetSlotFromKey
		mov	ebx, eax
		push	ebx
		call	PK11_IsHW
		add	esp, 10h
		test	eax, eax
		mov	eax, 1000h
		jnz	short loc_10010C15
		mov	eax, [esi+14h]

loc_10010C15:				; CODE XREF: sub_10010B40+D0j
		push	ebx
		mov	[esi+10h], eax
		call	PK11_FreeSlot
		mov	edx, [esp+18h+var_4]
		push	edx
		push	ebp
		push	105h
		push	edi
		call	PK11_CreateContextBySymKey
		mov	edi, eax
		mov	eax, [esp+28h+var_4]
		push	1
		push	eax
		call	SECITEM_FreeItem_Util
		xor	eax, eax
		add	esp, 1Ch
		cmp	edi, eax
		jz	short loc_10010BD9
		mov	[esi], edi
		pop	edi
		pop	ebp
		mov	[esi+0Ch], eax
		mov	[esi+18h], eax
		pop	ebx
		mov	dword ptr [esi+4], offset PK11_CipherOp
		mov	dword ptr [esi+8], offset PK11_DestroyContext
		mov	eax, esi
		pop	esi
		pop	ecx
		retn
sub_10010B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010C70	proc near		; CODE XREF: sub_1000FE10+1C4p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		push	ebx
		push	esi
		xor	ebx, ebx
		push	101Ch
		mov	[esp+14h+var_8], ebx
		mov	[esp+14h+var_4], ebx
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jnz	short loc_10010C9A
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10010C9A:				; CODE XREF: sub_10010C70+20j
		push	ebp
		push	edi
		mov	edi, [esp+18h+arg_C]
		push	edi
		call	SEC_PKCS5IsAlgorithmPBEAlg
		add	esp, 4
		test	eax, eax
		jz	short loc_10010CF3
		mov	ebp, [esp+18h+arg_4]
		push	ebp
		call	PK11_GetSymKeyUserData
		add	esp, 4
		cmp	eax, ebx
		jz	short loc_10010D15
		push	eax
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	edi
		call	PK11_GetPBECryptoMechanism
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_10010D32

loc_10010CD4:				; CODE XREF: sub_10010C70+10Ej
		push	esi
		call	PORT_Free_Util
		mov	ecx, [esp+1Ch+var_8]
		push	1
		push	ecx
		call	SECITEM_FreeItem_Util
		add	esp, 0Ch
		pop	edi
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10010CF3:				; CODE XREF: sub_10010C70+3Bj
		mov	edx, [esp+18h+arg_8]
		push	edx
		call	PK11_AlgtagToMechanism
		mov	ebp, [esp+1Ch+arg_4]
		mov	edi, eax
		push	ebp
		push	edi
		call	PK11_GenerateNewParam
		add	esp, 0Ch
		mov	[esp+18h+var_8], eax
		cmp	eax, ebx
		jnz	short loc_10010D28

loc_10010D15:				; CODE XREF: sub_10010C70+4Cj
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10010D28:				; CODE XREF: sub_10010C70+A3j
		mov	[esp+18h+var_4], 1
		jmp	short loc_10010D36
; ---------------------------------------------------------------------------

loc_10010D32:				; CODE XREF: sub_10010C70+62j
		mov	eax, [esp+18h+var_8]

loc_10010D36:				; CODE XREF: sub_10010C70+C0j
		push	eax
		push	edi
		call	PK11_GetBlockSize
		push	ebp
		mov	[esi+14h], eax
		call	PK11_GetSlotFromKey
		mov	ebx, eax
		push	ebx
		call	PK11_IsHW
		add	esp, 10h
		test	eax, eax
		mov	eax, 1000h
		jnz	short loc_10010D5D
		mov	eax, [esi+14h]

loc_10010D5D:				; CODE XREF: sub_10010C70+E8j
		push	ebx
		mov	[esi+10h], eax
		call	PK11_FreeSlot
		mov	eax, [esp+1Ch+var_8]
		push	eax
		push	ebp
		push	104h
		push	edi
		call	PK11_CreateContextBySymKey
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	loc_10010CD4
		cmp	[esp+18h+var_4], 0
		jz	short loc_10010DCA
		mov	edx, [esp+18h+arg_C]
		mov	eax, [esp+18h+arg_0]
		mov	ecx, [esp+18h+var_8]
		push	edx
		mov	edx, [esp+1Ch+arg_8]
		push	eax
		push	ecx
		push	edx
		call	PK11_ParamToAlgid
		add	esp, 10h
		test	eax, eax
		jz	short loc_10010DCA
		push	esi
		call	PORT_Free_Util
		mov	eax, [esp+1Ch+var_8]
		push	1
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 0Ch
		pop	edi
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10010DCA:				; CODE XREF: sub_10010C70+119j
					; sub_10010C70+139j
		mov	ecx, [esp+18h+var_8]
		push	1
		push	ecx
		call	SECITEM_FreeItem_Util
		add	esp, 8
		mov	[esi], edi
		pop	edi
		pop	ebp
		mov	dword ptr [esi+4], offset PK11_CipherOp
		mov	dword ptr [esi+8], offset PK11_DestroyContext
		mov	dword ptr [esi+0Ch], 1
		mov	dword ptr [esi+18h], 0
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 8
		retn
sub_10010C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010E10	proc near		; CODE XREF: sub_10001950+9Bp
					; sub_10002F20+14p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10010E2C
		mov	eax, [esi]
		mov	ecx, [esi+8]
		push	1
		push	eax
		call	ecx
		push	esi
		call	PORT_Free_Util
		add	esp, 0Ch

loc_10010E2C:				; CODE XREF: sub_10010E10+7j
		pop	esi
		retn
sub_10010E10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010E30	proc near		; CODE XREF: sub_10001E80+5Fp
					; sub_1000E880+1Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+10h]
		test	ecx, ecx
		jnz	short loc_10010E40
		mov	eax, [esp+arg_4]
		retn
; ---------------------------------------------------------------------------

loc_10010E40:				; CODE XREF: sub_10010E30+9j
		cmp	[esp+arg_8], 0
		mov	eax, [eax+18h]
		jz	short loc_10010E4F
		add	eax, [esp+arg_4]
		retn
; ---------------------------------------------------------------------------

loc_10010E4F:				; CODE XREF: sub_10010E30+18j
		mov	edx, [esp+arg_4]
		lea	eax, [eax+edx-1]
		xor	edx, edx
		div	ecx
		imul	eax, ecx
		retn
sub_10010E30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010E60	proc near		; CODE XREF: sub_10003050+76p
					; sub_10010250+41p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+10h]
		push	esi
		mov	esi, [eax+14h]
		test	ecx, ecx
		jnz	short loc_10010E75
		mov	eax, [esp+4+arg_4]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010E75:				; CODE XREF: sub_10010E60+Dj
		mov	eax, [eax+18h]
		add	eax, [esp+4+arg_4]
		cmp	[esp+4+arg_8], 0
		jz	short loc_10010E91
		test	esi, esi
		jz	short loc_10010E98
		xor	edx, edx
		div	esi
		inc	eax
		imul	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010E91:				; CODE XREF: sub_10010E60+21j
		xor	edx, edx
		div	ecx
		imul	eax, ecx

loc_10010E98:				; CODE XREF: sub_10010E60+25j
		pop	esi
		retn
sub_10010E60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010EA0	proc near		; CODE XREF: sub_10001E80+8Dp
					; sub_1000E880+46p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_14]
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_0]
		mov	esi, [edi+10h]
		mov	[esp+18h+var_4], esi
		test	esi, esi
		jnz	short loc_10010EBD
		mov	eax, ebx
		jmp	short loc_10010ED6
; ---------------------------------------------------------------------------

loc_10010EBD:				; CODE XREF: sub_10010EA0+17j
		cmp	[esp+18h+arg_18], 0
		mov	eax, [edi+18h]
		jz	short loc_10010ECB
		add	eax, ebx
		jmp	short loc_10010ED6
; ---------------------------------------------------------------------------

loc_10010ECB:				; CODE XREF: sub_10010EA0+25j
		lea	eax, [eax+ebx-1]
		xor	edx, edx
		div	esi
		imul	eax, esi

loc_10010ED6:				; CODE XREF: sub_10010EA0+1Bj
					; sub_10010EA0+29j
		mov	ecx, [esp+18h+arg_C]
		cmp	ecx, eax
		jnb	short loc_10010EE8
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10010EE8:				; CODE XREF: sub_10010EA0+3Cj
		mov	edx, [edi+14h]
		mov	[esp+18h+arg_0], edx
		test	esi, esi
		jnz	short loc_10010F16
		mov	eax, [esp+18h+arg_10]
		mov	edx, [esp+18h+arg_4]
		push	ebx
		push	eax
		mov	eax, [edi]
		push	ecx
		mov	ecx, [esp+24h+arg_8]
		push	ecx
		mov	ecx, [edi+4]
		push	edx
		push	eax
		call	ecx
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10010F16:				; CODE XREF: sub_10010EA0+51j
		mov	ecx, [edi+18h]
		push	ebp
		lea	ebp, [edi+1Ch]
		mov	[esp+1Ch+var_C], 0
		test	ecx, ecx
		jz	loc_10010FBD
		test	ebx, ebx
		jz	short loc_10010F51

loc_10010F31:				; CODE XREF: sub_10010EA0+A9j
		cmp	ecx, esi
		jge	short loc_10010F4D
		mov	esi, [esp+1Ch+arg_10]
		mov	dl, [esi]
		inc	esi
		mov	[ecx+ebp], dl
		inc	ecx
		dec	ebx
		mov	[esp+1Ch+arg_10], esi
		mov	esi, [esp+1Ch+var_4]
		jnz	short loc_10010F31
		jmp	short loc_10010F51
; ---------------------------------------------------------------------------

loc_10010F4D:				; CODE XREF: sub_10010EA0+93j
		test	ebx, ebx
		jnz	short loc_10010F77

loc_10010F51:				; CODE XREF: sub_10010EA0+8Fj
					; sub_10010EA0+ABj
		cmp	[esp+1Ch+arg_18], 0
		jnz	short loc_10010F77
		mov	eax, [esp+1Ch+arg_8]
		mov	[edi+18h], ecx
		test	eax, eax
		jz	loc_10011095
		pop	ebp
		pop	edi
		pop	esi
		mov	dword ptr [eax], 0
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10010F77:				; CODE XREF: sub_10010EA0+AFj
					; sub_10010EA0+B6j
		cmp	[esp+1Ch+arg_0], 0
		jz	short loc_10010F89
		mov	eax, ecx
		cdq
		idiv	[esp+1Ch+arg_0]
		test	edx, edx
		jnz	short loc_10010FDE

loc_10010F89:				; CODE XREF: sub_10010EA0+DCj
		mov	eax, [esp+1Ch+arg_C]
		mov	edx, [esp+1Ch+arg_4]
		push	ecx
		push	ebp
		push	eax
		mov	eax, [edi]
		lea	ecx, [esp+28h+var_8]
		push	ecx
		mov	ecx, [edi+4]
		push	edx
		push	eax
		call	ecx
		add	esp, 18h
		test	eax, eax
		jnz	loc_10011097
		mov	eax, [esp+1Ch+var_8]
		sub	[esp+1Ch+arg_C], eax
		add	[esp+1Ch+arg_4], eax
		mov	[esp+1Ch+var_C], eax

loc_10010FBD:				; CODE XREF: sub_10010EA0+87j
		cmp	[esp+1Ch+arg_18], 0
		jz	short loc_10010FFA
		cmp	[esp+1Ch+arg_0], 0
		jz	short loc_10010FF6
		xor	edx, edx
		mov	eax, ebx
		div	[esp+1Ch+arg_0]
		mov	esi, eax
		imul	esi, [esp+1Ch+arg_0]
		cmp	esi, ebx
		jz	short loc_1001101F

loc_10010FDE:				; CODE XREF: sub_10010EA0+E7j
					; sub_10010EA0+1ADj ...
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebp
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10010FF6:				; CODE XREF: sub_10010EA0+129j
		mov	esi, ebx
		jmp	short loc_1001101F
; ---------------------------------------------------------------------------

loc_10010FFA:				; CODE XREF: sub_10010EA0+122j
		xor	edx, edx
		lea	eax, [ebx-1]
		div	esi
		mov	edx, [esp+1Ch+arg_10]
		mov	esi, eax
		imul	esi, [esp+1Ch+var_4]
		sub	ebx, esi
		push	ebx		; Size
		lea	eax, [esi+edx]
		push	eax		; Src
		push	ebp		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	[edi+18h], ebx

loc_1001101F:				; CODE XREF: sub_10010EA0+13Cj
					; sub_10010EA0+158j
		test	esi, esi
		jz	short loc_10011055
		mov	ecx, [esp+1Ch+arg_10]
		mov	edx, [esp+1Ch+arg_C]
		push	esi
		push	ecx
		mov	ecx, [esp+24h+arg_4]
		push	edx
		mov	edx, [edi]
		lea	eax, [esp+28h+var_8]
		push	eax
		mov	eax, [edi+4]
		push	ecx
		push	edx
		call	eax
		add	esp, 18h
		test	eax, eax
		jnz	short loc_10011097
		mov	eax, [esp+1Ch+var_8]
		cmp	esi, eax
		jnz	short loc_10010FDE
		add	[esp+1Ch+var_C], eax
		jmp	short loc_1001105B
; ---------------------------------------------------------------------------

loc_10011055:				; CODE XREF: sub_10010EA0+181j
		xor	eax, eax
		mov	[esp+1Ch+var_8], eax

loc_1001105B:				; CODE XREF: sub_10010EA0+1B3j
		cmp	[esp+1Ch+arg_18], 0
		jz	short loc_10011087
		mov	ecx, [esp+1Ch+arg_0]
		test	ecx, ecx
		jz	short loc_10011087
		mov	edx, [esp+1Ch+arg_4]
		movzx	eax, byte ptr [eax+edx-1]
		test	eax, eax
		jz	loc_10010FDE
		cmp	eax, ecx
		ja	loc_10010FDE
		sub	[esp+1Ch+var_C], eax

loc_10011087:				; CODE XREF: sub_10010EA0+1C0j
					; sub_10010EA0+1C8j
		mov	eax, [esp+1Ch+arg_8]
		test	eax, eax
		jz	short loc_10011095
		mov	ecx, [esp+1Ch+var_C]
		mov	[eax], ecx

loc_10011095:				; CODE XREF: sub_10010EA0+C1j
					; sub_10010EA0+1EDj
		xor	eax, eax

loc_10011097:				; CODE XREF: sub_10010EA0+107j
					; sub_10010EA0+1A5j
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
sub_10010EA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100110A0	proc near		; CODE XREF: sub_10003050+98p
					; sub_10003050+100p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 0Ch
		push	ebx
		push	edi
		mov	edi, [esp+14h+arg_0]
		mov	ebx, [edi+10h]
		mov	ecx, [edi+14h]
		mov	[esp+14h+var_4], ebx
		mov	[esp+14h+var_8], ecx
		test	ebx, ebx
		jnz	short loc_100110C1
		mov	eax, [esp+14h+arg_14]
		jmp	short loc_100110E4
; ---------------------------------------------------------------------------

loc_100110C1:				; CODE XREF: sub_100110A0+19j
		mov	eax, [edi+18h]
		add	eax, [esp+14h+arg_14]
		cmp	[esp+14h+arg_18], 0
		jz	short loc_100110DD
		test	ecx, ecx
		jz	short loc_100110E4
		xor	edx, edx
		div	ecx
		inc	eax
		imul	eax, ecx
		jmp	short loc_100110E4
; ---------------------------------------------------------------------------

loc_100110DD:				; CODE XREF: sub_100110A0+2Dj
		xor	edx, edx
		div	ebx
		imul	eax, ebx

loc_100110E4:				; CODE XREF: sub_100110A0+1Fj
					; sub_100110A0+31j ...
		mov	edx, [esp+14h+arg_C]
		cmp	edx, eax
		jnb	short loc_100110F5
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100110F5:				; CODE XREF: sub_100110A0+4Aj
		test	ebx, ebx
		jnz	short loc_1001111F
		mov	eax, [esp+14h+arg_14]
		mov	ecx, [esp+14h+arg_10]
		push	eax
		mov	eax, [esp+18h+arg_4]
		push	ecx
		mov	ecx, [edi]
		push	edx
		mov	edx, [esp+20h+arg_8]
		push	edx
		mov	edx, [edi+4]
		push	eax
		push	ecx
		call	edx
		add	esp, 18h
		pop	edi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001111F:				; CODE XREF: sub_100110A0+57j
		push	ebp
		push	esi
		mov	esi, [edi+18h]
		lea	ebp, [edi+1Ch]
		mov	[esp+1Ch+arg_0], 0
		test	esi, esi
		jz	loc_100111CA
		cmp	[esp+1Ch+arg_14], 0
		jz	short loc_10011159
		mov	edi, edi

loc_10011140:				; CODE XREF: sub_100110A0+B7j
		cmp	esi, ebx
		jge	short loc_10011183
		mov	eax, [esp+1Ch+arg_10]
		mov	dl, [eax]
		mov	[esi+ebp], dl
		inc	eax
		inc	esi
		dec	[esp+1Ch+arg_14]
		mov	[esp+1Ch+arg_10], eax
		jnz	short loc_10011140

loc_10011159:				; CODE XREF: sub_100110A0+9Cj
		cmp	esi, ebx
		jge	short loc_10011183
		cmp	[esp+1Ch+arg_18], 0
		jnz	short loc_10011183
		mov	eax, [esp+1Ch+arg_8]
		mov	[edi+18h], esi
		test	eax, eax
		jz	loc_10011291
		pop	esi
		pop	ebp
		pop	edi
		mov	dword ptr [eax], 0
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011183:				; CODE XREF: sub_100110A0+A2j
					; sub_100110A0+BBj ...
		test	ecx, ecx
		jz	short loc_10011190
		mov	eax, esi
		cdq
		idiv	ecx
		test	edx, edx
		jnz	short loc_100111CA

loc_10011190:				; CODE XREF: sub_100110A0+E5j
		mov	eax, [esp+1Ch+arg_C]
		mov	edx, [edi]
		push	esi
		push	ebp
		mov	ebp, [esp+24h+arg_4]
		push	eax
		mov	eax, [edi+4]
		lea	ecx, [esp+28h+var_C]
		push	ecx
		push	ebp
		push	edx
		call	eax
		add	esp, 18h
		test	eax, eax
		jnz	loc_10011293
		mov	eax, [esp+1Ch+var_C]
		sub	[esp+1Ch+arg_C], eax
		mov	ecx, [esp+1Ch+var_8]
		add	ebp, eax
		mov	[esp+1Ch+arg_0], eax
		xor	esi, esi
		jmp	short loc_100111CE
; ---------------------------------------------------------------------------

loc_100111CA:				; CODE XREF: sub_100110A0+91j
					; sub_100110A0+EEj
		mov	ebp, [esp+1Ch+arg_4]

loc_100111CE:				; CODE XREF: sub_100110A0+128j
		mov	eax, [esp+1Ch+arg_14]
		test	eax, eax
		jz	short loc_10011239
		xor	edx, edx
		div	ebx
		mov	ebx, eax
		imul	ebx, [esp+1Ch+var_4]
		test	ebx, ebx
		jz	short loc_1001121B
		mov	ecx, [esp+1Ch+arg_10]
		mov	edx, [esp+1Ch+arg_C]
		push	ebx
		push	ecx
		mov	ecx, [edi]
		push	edx
		mov	edx, [edi+4]
		lea	eax, [esp+28h+var_C]
		push	eax
		push	ebp
		push	ecx
		call	edx
		add	esp, 18h
		test	eax, eax
		jnz	loc_10011293
		mov	eax, [esp+1Ch+var_C]
		sub	[esp+1Ch+arg_C], eax
		add	[esp+1Ch+arg_0], eax
		mov	ecx, [esp+1Ch+var_8]
		add	ebp, eax

loc_1001121B:				; CODE XREF: sub_100110A0+143j
		mov	esi, [esp+1Ch+arg_14]
		sub	esi, ebx
		jz	short loc_10011239
		add	ebx, [esp+1Ch+arg_10]
		push	esi		; Size
		lea	eax, [edi+1Ch]
		push	ebx		; Src
		push	eax		; Dst
		call	memcpy
		mov	ecx, [esp+28h+var_8]
		add	esp, 0Ch

loc_10011239:				; CODE XREF: sub_100110A0+134j
					; sub_100110A0+181j
		cmp	[esp+1Ch+arg_18], 0
		jz	short loc_10011280
		mov	eax, esi
		cdq
		idiv	ecx
		sub	ecx, edx
		mov	ebx, ecx
		push	ebx		; Size
		lea	ecx, [edi+esi+1Ch]
		push	ebx		; Val
		push	ecx		; Dst
		call	memset
		mov	edx, [esp+28h+arg_C]
		mov	ecx, [edi]
		add	ebx, esi
		push	ebx
		lea	eax, [edi+1Ch]
		push	eax
		push	edx
		mov	edx, [edi+4]
		lea	eax, [esp+34h+var_C]
		push	eax
		push	ebp
		push	ecx
		call	edx
		add	esp, 24h
		test	eax, eax
		jnz	short loc_10011293
		mov	eax, [esp+1Ch+var_C]
		add	[esp+1Ch+arg_0], eax
		jmp	short loc_10011283
; ---------------------------------------------------------------------------

loc_10011280:				; CODE XREF: sub_100110A0+19Ej
		mov	[edi+18h], esi

loc_10011283:				; CODE XREF: sub_100110A0+1DEj
		mov	eax, [esp+1Ch+arg_8]
		test	eax, eax
		jz	short loc_10011291
		mov	ecx, [esp+1Ch+arg_0]
		mov	[eax], ecx

loc_10011291:				; CODE XREF: sub_100110A0+CDj
					; sub_100110A0+1E9j
		xor	eax, eax

loc_10011293:				; CODE XREF: sub_100110A0+10Ej
					; sub_100110A0+163j ...
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 0Ch
		retn
sub_100110A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100112A0	proc near		; CODE XREF: sub_100014D0+2Ep
					; sub_10001540+1Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jnz	short loc_100112AD

loc_100112A9:				; CODE XREF: sub_100112A0+20j
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100112AD:				; CODE XREF: sub_100112A0+7j
		mov	eax, [esp+4+arg_4]
		push	eax
		call	SECOID_FindOIDByTag_Util
		add	esp, 4
		mov	[esp+4+arg_0], eax
		test	eax, eax
		jz	short loc_100112A9
		push	ebp
		mov	ebp, [ebx]
		push	esi
		push	edi
		test	ebp, ebp
		jz	short loc_1001132E
		mov	edi, [eax+8]
		jmp	short loc_100112D4
; ---------------------------------------------------------------------------

loc_100112D0:				; CODE XREF: sub_100112A0+8Cj
		mov	eax, [esp+10h+arg_0]

loc_100112D4:				; CODE XREF: sub_100112A0+2Ej
		add	ebx, 4
		cmp	[ebp+8], edi
		jnz	short loc_10011328
		mov	edx, [eax+4]
		mov	esi, [ebp+4]
		mov	ecx, edi
		cmp	ecx, 4
		jb	short loc_10011304
		lea	esp, [esp+0]

loc_100112F0:				; CODE XREF: sub_100112A0+62j
		mov	eax, [esi]
		cmp	eax, [edx]
		jnz	short loc_10011328
		sub	ecx, 4
		add	edx, 4
		add	esi, 4
		cmp	ecx, 4
		jnb	short loc_100112F0

loc_10011304:				; CODE XREF: sub_100112A0+47j
		test	ecx, ecx
		jz	short loc_10011331
		mov	al, [edx]
		cmp	al, [esi]
		jnz	short loc_10011328
		cmp	ecx, 1
		jbe	short loc_10011331
		mov	al, [edx+1]
		cmp	al, [esi+1]
		jnz	short loc_10011328
		cmp	ecx, 2
		jbe	short loc_10011331
		mov	cl, [edx+2]
		cmp	cl, [esi+2]
		jz	short loc_10011331

loc_10011328:				; CODE XREF: sub_100112A0+3Aj
					; sub_100112A0+54j ...
		mov	ebp, [ebx]
		test	ebp, ebp
		jnz	short loc_100112D0

loc_1001132E:				; CODE XREF: sub_100112A0+29j
		add	ebx, 4

loc_10011331:				; CODE XREF: sub_100112A0+66j
					; sub_100112A0+71j ...
		test	ebp, ebp
		jz	loc_100113B5
		cmp	[esp+10h+arg_8], 0
		jz	short loc_100113AE
		mov	esi, [ebx]
		test	esi, esi
		jz	short loc_100113AE
		mov	edx, [esp+10h+arg_0]
		mov	edi, [edx+8]
		lea	ecx, [ecx+0]

loc_10011350:				; CODE XREF: sub_100112A0+10Cj
		add	ebx, 4
		cmp	[esi+8], edi
		jnz	short loc_100113A8
		mov	eax, [esp+10h+arg_0]
		mov	edx, [eax+4]
		mov	esi, [esi+4]
		mov	ecx, edi
		cmp	ecx, 4
		jb	short loc_10011384
		lea	esp, [esp+0]

loc_10011370:				; CODE XREF: sub_100112A0+E2j
		mov	eax, [esi]
		cmp	eax, [edx]
		jnz	short loc_100113A8
		sub	ecx, 4
		add	edx, 4
		add	esi, 4
		cmp	ecx, 4
		jnb	short loc_10011370

loc_10011384:				; CODE XREF: sub_100112A0+C7j
		test	ecx, ecx
		jz	short loc_100113B5
		mov	al, [edx]
		cmp	al, [esi]
		jnz	short loc_100113A8
		cmp	ecx, 1
		jbe	short loc_100113B5
		mov	al, [edx+1]
		cmp	al, [esi+1]
		jnz	short loc_100113A8
		cmp	ecx, 2
		jbe	short loc_100113B5
		mov	cl, [edx+2]
		cmp	cl, [esi+2]
		jz	short loc_100113B5

loc_100113A8:				; CODE XREF: sub_100112A0+B6j
					; sub_100112A0+D4j ...
		mov	esi, [ebx]
		test	esi, esi
		jnz	short loc_10011350

loc_100113AE:				; CODE XREF: sub_100112A0+9Ej
					; sub_100112A0+A4j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100113B5:				; CODE XREF: sub_100112A0+93j
					; sub_100112A0+E6j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_100112A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100113C0	proc near		; CODE XREF: NSS_CMSSignerInfo_GetSigningTime+3Cp
					; NSS_SMIMESignerInfo_SaveSMIMEProfile+4Fp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_100113E9
		mov	eax, [eax+0Ch]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_100113E9
		cmp	dword ptr [ecx+4], 0
		jz	short loc_100113E9
		cmp	dword ptr [ecx+8], 0
		jz	short loc_100113E9
		mov	eax, [eax+4]
		neg	eax
		sbb	eax, eax
		not	eax
		and	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_100113E9:				; CODE XREF: sub_100113C0+6j
					; sub_100113C0+Fj ...
		xor	eax, eax
		retn
sub_100113C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100113F0	proc near		; DATA XREF: .rdata:off_100149B4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_100113FD
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100113FD:				; CODE XREF: sub_100113F0+7j
		push	ebx
		mov	ebx, [esp+8+arg_4]
		test	ebx, ebx
		jz	short loc_10011423
		cmp	dword ptr [edi+14h], 0
		jz	short loc_10011423
		pop	ebx
		pop	edi
		mov	[esp+arg_4], 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_AnyTemplate_Util
; ---------------------------------------------------------------------------

loc_10011423:				; CODE XREF: sub_100113F0+14j
					; sub_100113F0+1Aj
		mov	eax, [edi+10h]
		push	esi
		test	eax, eax
		jnz	short loc_1001143B
		push	edi
		call	SECOID_FindOID_Util
		add	esp, 4
		mov	[edi+10h], eax
		test	eax, eax
		jz	short loc_10011480 ; jumptable 1001144D	default	case

loc_1001143B:				; CODE XREF: sub_100113F0+39j
		mov	eax, [eax+0Ch]
		add	eax, 0FFFFFFE1h	; switch 69 cases
		cmp	eax, 44h
		ja	short loc_10011480 ; jumptable 1001144D	default	case
		movzx	eax, ds:byte_100114B0[eax]
		jmp	ds:off_1001149C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10011454:				; CODE XREF: sub_100113F0+5Dj
					; DATA XREF: .text:off_1001149Co
		xor	esi, esi	; jumptable 1001144D cases 31,32,99
		push	esi
		push	esi
		call	NSS_Get_SEC_IA5StringTemplate_Util
		jmp	short loc_1001148E
; ---------------------------------------------------------------------------

loc_1001145F:				; CODE XREF: sub_100113F0+5Dj
					; DATA XREF: .text:off_1001149Co
		xor	esi, esi	; jumptable 1001144D case 33
		push	esi
		push	esi
		call	NSS_Get_SEC_ObjectIDTemplate_Util
		jmp	short loc_1001148E
; ---------------------------------------------------------------------------

loc_1001146A:				; CODE XREF: sub_100113F0+5Dj
					; DATA XREF: .text:off_1001149Co
		xor	esi, esi	; jumptable 1001144D case 34
		push	esi
		push	esi
		call	NSS_Get_SEC_OctetStringTemplate_Util
		jmp	short loc_1001148E
; ---------------------------------------------------------------------------

loc_10011475:				; CODE XREF: sub_100113F0+5Dj
					; DATA XREF: .text:off_1001149Co
		xor	esi, esi	; jumptable 1001144D case 35
		push	esi
		push	esi
		call	NSS_Get_CERT_TimeChoiceTemplate
		jmp	short loc_1001148E
; ---------------------------------------------------------------------------

loc_10011480:				; CODE XREF: sub_100113F0+49j
					; sub_100113F0+54j ...
		push	0		; jumptable 1001144D default case
		push	0
		mov	esi, 1
		call	NSS_Get_SEC_AnyTemplate_Util

loc_1001148E:				; CODE XREF: sub_100113F0+6Dj
					; sub_100113F0+78j ...
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_10011498
		mov	[edi+14h], esi

loc_10011498:				; CODE XREF: sub_100113F0+A3j
		pop	esi
		pop	ebx
		pop	edi
		retn
sub_100113F0	endp

; ---------------------------------------------------------------------------
off_1001149C	dd offset loc_10011454,	offset loc_1001145F, offset loc_1001146A
					; DATA XREF: sub_100113F0+5Dr
		dd offset loc_10011475,	offset loc_10011480 ; jump table for switch statement
byte_100114B0	db	0,     0,     1,     2 ; DATA XREF: sub_100113F0+56r
		db	3,     4,     4,     4 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	0
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011500	proc near		; CODE XREF: sub_1000F6A0+40Bp
					; sub_10010570+178p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	offset dword_100149F8
		push	eax
		push	ecx
		push	edx
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		retn
sub_10011500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011520	proc near		; CODE XREF: sub_10010570+157p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sub	esp, 1Ch
		test	eax, eax
		jnz	short loc_1001152F
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1001152F:				; CODE XREF: sub_10011520+9j
		push	ebp
		xor	ebp, ebp
		cmp	[eax], ebp
		jz	loc_1001171D
		lea	ebx, [ebx+0]

loc_10011540:				; CODE XREF: sub_10011520+25j
		inc	ebp
		cmp	dword ptr [eax+ebp*4], 0
		jnz	short loc_10011540
		mov	[esp+20h+var_C], ebp
		test	ebp, ebp
		jz	loc_1001171D
		cmp	ebp, 1
		jz	loc_1001171D
		push	ebx
		push	400h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		mov	[esp+24h+var_10], ebx
		test	ebx, ebx
		jnz	short loc_1001157D
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1001157D:				; CODE XREF: sub_10011520+52j
		push	esi
		push	edi
		lea	esi, ds:0[ebp*4]
		push	esi
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		push	esi
		push	ebx
		mov	[esp+3Ch+var_1C], edi
		call	PORT_ArenaZAlloc_Util
		add	esp, 10h
		mov	edx, eax
		mov	[esp+2Ch+var_8], edx
		test	edi, edi
		jz	loc_10011707
		test	edx, edx
		jz	loc_10011707
		xor	ebx, ebx
		test	ebp, ebp
		jle	short loc_100115FE
		mov	eax, [esp+2Ch+arg_0]
		sub	eax, edi
		mov	esi, edi
		mov	[esp+2Ch+var_4], eax
		jmp	short loc_100115D4
; ---------------------------------------------------------------------------
		jmp	short loc_100115D0
; ---------------------------------------------------------------------------
		align 10h

loc_100115D0:				; CODE XREF: sub_10011520+A7j
					; sub_10011520+D8j
		mov	eax, [esp+2Ch+var_4]

loc_100115D4:				; CODE XREF: sub_10011520+A5j
		mov	eax, [eax+esi]
		mov	ecx, [esp+2Ch+var_10]
		push	offset dword_100149B8
		push	eax
		push	0
		push	ecx
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1001165C
		inc	ebx
		add	esi, 4
		cmp	ebx, ebp
		jl	short loc_100115D0
		mov	edx, [esp+2Ch+var_8]

loc_100115FE:				; CODE XREF: sub_10011520+97j
		xor	esi, esi
		mov	[esp+2Ch+var_4], esi
		test	ebp, ebp
		jle	loc_100116EE
		lea	esp, [esp+0]

loc_10011610:				; CODE XREF: sub_10011520+1B1j
		xor	ecx, ecx

loc_10011612:				; CODE XREF: sub_10011520+FBj
		cmp	dword ptr [edi+ecx*4], 0
		jnz	short loc_1001161D
		inc	ecx
		cmp	ecx, ebp
		jl	short loc_10011612

loc_1001161D:				; CODE XREF: sub_10011520+F6j
		mov	eax, ecx
		inc	ecx
		mov	[esp+2Ch+var_14], eax
		cmp	ecx, ebp
		jge	loc_100116B9
		add	eax, eax
		add	eax, eax
		lea	ebx, ds:0[ecx*4]
		mov	[esp+2Ch+var_18], eax
		jmp	short loc_10011640
; ---------------------------------------------------------------------------
		align 10h

loc_10011640:				; CODE XREF: sub_10011520+11Bj
					; sub_10011520+18Bj
		mov	edx, [ebx+edi]
		test	edx, edx
		jz	short loc_100116A5
		mov	eax, [esp+2Ch+var_18]
		mov	edi, [eax+edi]
		mov	eax, [edi+8]
		mov	esi, [edx+8]
		cmp	esi, eax
		jz	short loc_10011676
		jnb	short loc_100116A1
		jmp	short loc_10011699
; ---------------------------------------------------------------------------

loc_1001165C:				; CODE XREF: sub_10011520+D0j
		mov	edx, [esp+2Ch+var_10]
		push	0
		push	edx
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10011676:				; CODE XREF: sub_10011520+136j
		xor	eax, eax
		test	esi, esi
		jz	short loc_100116A1
		mov	edi, [edi+4]
		mov	ebp, [edx+4]

loc_10011682:				; CODE XREF: sub_10011520+16Dj
		mov	dl, [eax+ebp]
		cmp	dl, [edi+eax]
		jb	short loc_10011695
		inc	eax
		cmp	eax, esi
		jb	short loc_10011682
		mov	ebp, [esp+2Ch+var_C]
		jmp	short loc_100116A1
; ---------------------------------------------------------------------------

loc_10011695:				; CODE XREF: sub_10011520+168j
		mov	ebp, [esp+2Ch+var_C]

loc_10011699:				; CODE XREF: sub_10011520+13Aj
		mov	[esp+2Ch+var_18], ebx
		mov	[esp+2Ch+var_14], ecx

loc_100116A1:				; CODE XREF: sub_10011520+138j
					; sub_10011520+15Aj ...
		mov	edi, [esp+2Ch+var_1C]

loc_100116A5:				; CODE XREF: sub_10011520+125j
		inc	ecx
		add	ebx, 4
		cmp	ecx, ebp
		jl	short loc_10011640
		mov	edx, [esp+2Ch+var_8]
		mov	esi, [esp+2Ch+var_4]
		mov	eax, [esp+2Ch+var_14]

loc_100116B9:				; CODE XREF: sub_10011520+106j
		mov	ecx, [esp+2Ch+arg_0]
		mov	ecx, [ecx+eax*4]
		mov	[edx+esi*4], ecx
		inc	esi
		mov	dword ptr [edi+eax*4], 0
		mov	[esp+2Ch+var_4], esi
		cmp	esi, ebp
		jl	loc_10011610
		test	ebp, ebp
		jle	short loc_100116EE
		mov	eax, [esp+2Ch+arg_0]
		mov	ecx, edx
		sub	ecx, eax

loc_100116E3:				; CODE XREF: sub_10011520+1CCj
		mov	edx, [ecx+eax]
		mov	[eax], edx
		add	eax, 4
		dec	ebp
		jnz	short loc_100116E3

loc_100116EE:				; CODE XREF: sub_10011520+E6j
					; sub_10011520+1B9j
		mov	eax, [esp+2Ch+var_10]
		push	0
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10011707:				; CODE XREF: sub_10011520+85j
					; sub_10011520+8Dj
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1001171D:				; CODE XREF: sub_10011520+14j
					; sub_10011520+2Dj ...
		xor	eax, eax
		pop	ebp
		add	esp, 1Ch
		retn
sub_10011520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011730	proc near		; DATA XREF: .rdata:off_10014A08o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10011739
		retn
; ---------------------------------------------------------------------------

loc_10011739:				; CODE XREF: sub_10011730+6j
		push	eax
		call	SEC_PKCS7ContentType
		add	eax, 0FFFFFFE7h
		add	esp, 4
		cmp	eax, 5		; switch 6 cases
		ja	short loc_10011784 ; jumptable 1001174A	default	case
		jmp	ds:off_1001179C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10011751:				; CODE XREF: sub_10011730+1Aj
					; DATA XREF: .text:off_1001179Co
		mov	[esp+arg_4], 0	; jumptable 1001174A case 0
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToOctetStringTemplate_Util
; ---------------------------------------------------------------------------

loc_10011766:				; CODE XREF: sub_10011730+1Aj
					; DATA XREF: .text:off_1001179Co
		mov	eax, offset dword_10014B60 ; jumptable 1001174A	case 1
		retn
; ---------------------------------------------------------------------------

loc_1001176C:				; CODE XREF: sub_10011730+1Aj
					; DATA XREF: .text:off_1001179Co
		mov	eax, offset dword_10014C70 ; jumptable 1001174A	case 2
		retn
; ---------------------------------------------------------------------------

loc_10011772:				; CODE XREF: sub_10011730+1Aj
					; DATA XREF: .text:off_1001179Co
		mov	eax, offset dword_10014D10 ; jumptable 1001174A	case 3
		retn
; ---------------------------------------------------------------------------

loc_10011778:				; CODE XREF: sub_10011730+1Aj
					; DATA XREF: .text:off_1001179Co
		mov	eax, offset dword_10014D80 ; jumptable 1001174A	case 4
		retn
; ---------------------------------------------------------------------------

loc_1001177E:				; CODE XREF: sub_10011730+1Aj
					; DATA XREF: .text:off_1001179Co
		mov	eax, offset dword_10014DD0 ; jumptable 1001174A	case 5
		retn
; ---------------------------------------------------------------------------

loc_10011784:				; CODE XREF: sub_10011730+18j
		mov	[esp+arg_4], 0	; jumptable 1001174A default case
		mov	[esp+arg_0], 0
		jmp	NSS_Get_SEC_PointerToAnyTemplate_Util
sub_10011730	endp

; ---------------------------------------------------------------------------
		align 4
off_1001179C	dd offset loc_10011751	; DATA XREF: sub_10011730+1Ar
		dd offset loc_10011766	; jump table for switch	statement
		dd offset loc_1001176C
		dd offset loc_10011772
		dd offset loc_10011778
		dd offset loc_1001177E
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100117C0	proc near		; CODE XREF: SECMIME_DecryptionAllowed+Ap

arg_0		= dword	ptr  4

		push	esi
		call	SECOID_GetAlgorithmTag_Util
		add	esp, 4
		sub	eax, 5
		jz	short loc_100117E4
		sub	eax, 2
		jz	short loc_100117DE
		sub	eax, 3
		jnz	short loc_10011801
		mov	eax, 10009h
		retn
; ---------------------------------------------------------------------------

loc_100117DE:				; CODE XREF: sub_100117C0+11j
		mov	eax, 1000Ah
		retn
; ---------------------------------------------------------------------------

loc_100117E4:				; CODE XREF: sub_100117C0+Cj
		mov	eax, [esp+arg_0]
		push	esi
		push	eax
		call	PK11_GetKeyStrength
		add	esp, 8
		sub	eax, 28h
		jz	short loc_10011811
		sub	eax, 18h
		jz	short loc_1001180B
		sub	eax, 40h
		jz	short loc_10011805

loc_10011801:				; CODE XREF: sub_100117C0+16j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10011805:				; CODE XREF: sub_100117C0+3Fj
		mov	eax, 10003h
		retn
; ---------------------------------------------------------------------------

loc_1001180B:				; CODE XREF: sub_100117C0+3Aj
		mov	eax, 10002h
		retn
; ---------------------------------------------------------------------------

loc_10011811:				; CODE XREF: sub_100117C0+35j
		mov	eax, 10001h
		retn
sub_100117C0	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 106. SECMIME_DecryptionAllowed

; =============== S U B	R O U T	I N E =======================================


		public SECMIME_DecryptionAllowed
SECMIME_DecryptionAllowed proc near	; DATA XREF: .rdata:off_10016AC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		push	eax
		call	sub_100117C0
		add	esp, 4
		pop	esi
		test	eax, eax
		jns	short loc_1001183A

loc_10011837:				; CODE XREF: SECMIME_DecryptionAllowed+20j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1001183A:				; CODE XREF: SECMIME_DecryptionAllowed+15j
		movzx	ecx, ax
		cmp	ecx, 20h
		jnb	short loc_10011837
		mov	eax, 1
		shl	eax, cl
		and	eax, dword_10019530
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
SECMIME_DecryptionAllowed endp

; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_CERT_SetOfSignedCrlTemplate]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_CERT_IssuerAndSNTemplate]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_CERT_TimeChoiceTemplate]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GetKeyStrength]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ReferenceSymKey]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_FreeSymKey]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_DestroyContext]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_CipherOp]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_CreateContextBySymKey]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_FreeSlot]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_IsHW]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GetSlotFromKey]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GetBlockSize]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ParamFromAlgid]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_AlgtagToMechanism]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GetPBECryptoMechanism]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GetSymKeyUserData]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_PKCS5IsAlgorithmPBEAlg]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ParamToAlgid]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GenerateNewParam]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_CreatePBEAlgorithmID]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_PKCS5IsAlgorithmPBEAlgTag]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_KeyGen]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GetBestSlot]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_FindCertAndKeyByRecipientListNew]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_SetPasswordFunc]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_PubWrapSymKey]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_PublicKeyStrength]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_GetPublicKeyType]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_PubUnwrapSymKey]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_DestroyPublicKey]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_ExtractPublicKey]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_DestroyCertificate]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_CopyPublicKey]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_GetCertIssuerAndSN]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_DupCertificate]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_CreateSubjectPublicKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_DestroySubjectPublicKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_FindSubjectKeyIDExtension]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_DestroyPrivateKey]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_FindPrivateKeyFromCert]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_CopyPrivateKey]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_DestroyCertificateList]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_VerifyCert]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_FindCertByDERCert]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_CertChainFromCert]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_DestroyCertList]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_DestroyCertArray]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_FilterCertListByUsage]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_AddCertToListTail]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_NewCertList]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_ImportCerts]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_FindCertByIssuerAndSN]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_FindCertBySubjectKeyID]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_GetCommonName]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_SaveSMimeProfile]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_GetDefaultCertDB]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_CertListFromCert]
; [00000006 BYTES: COLLAPSED FUNCTION SGN_Digest]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_SignData]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_GetSignatureAlgorithmOidTag]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_FindKeyByAnyCert]
; [00000006 BYTES: COLLAPSED FUNCTION VFY_VerifyDigestDirect]
; [00000006 BYTES: COLLAPSED FUNCTION VFY_VerifyDataDirect]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_RegisterShutdown]
; [00000006 BYTES: COLLAPSED FUNCTION HASH_GetHashObjectByOidTag]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_PublicKeyStrengthInBits]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_FindSMimeProfile]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_VersionCheck]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SECKEY_PrivateKeyInfoTemplate]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SECKEY_PointerToEncryptedPrivateKeyInfoTemplate]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GenerateRandom]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_HashBuf]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_DigestFinal]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_DigestOp]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_DigestBegin]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_PKCS5GetKeyLength]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_PKCS5GetCryptoAlgorithm]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SECKEY_PointerToPrivateKeyInfoTemplate]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GetInternalSlot]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ReferenceSlot]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_PBEKeyGen]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GetInternalKeySlot]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_IsInternal]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_DestroyEncryptedPrivateKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_CopyEncryptedPrivateKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ExportEncryptedPrivateKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_DestroyPrivateKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION SECKEY_CopyPrivateKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ExportPrivateKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_DestroyPBEParams]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_CreatePBEParams]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_SetSymKeyUserData]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_GetTokenName]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_TraverseCertsForSubjectInSlot]
; [00000006 BYTES: COLLAPSED FUNCTION __CERT_DecodeDERCertificate]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_TraverseCertsForNicknameInSlot]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_FindKeyByDERCert]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ImportDERCert]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ImportCertForKeyToSlot]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_NewTempCertificate]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_IsRootDERCert]
; [00000006 BYTES: COLLAPSED FUNCTION CERT_IsCADERCert]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ImportPublicKey]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ImportPrivateKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_ImportEncryptedPrivateKeyInfo]
; [00000006 BYTES: COLLAPSED FUNCTION PK11_FindCertAndKeyByRecipientList]
; [00000006 BYTES: COLLAPSED FUNCTION HASH_ResultLen]
; [00000006 BYTES: COLLAPSED FUNCTION HASH_GetHashTypeByOidTag]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaGrow_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_SetOfAnyTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_PointerToOctetStringTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_OctetStringTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_BitStringTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SECOID_AlgorithmIDTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaUnmark_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaRelease_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_ArenaDupItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CopyItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_FindOIDByTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaMark_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_SetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_FindOID_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_ObjectIDTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_IA5StringTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_AnyTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncodeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Free_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_AllocItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_GetAlgorithmTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_SetAlgorithmID_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_CopyAlgorithmID_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_FreeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Alloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_GetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecoderFinish_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecoderUpdate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecoderSetNotifyProc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecoderStart_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecoderClearFilterProc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecoderSetFilterProc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncodeInteger_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_FreeArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_NewArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_DestroyAlgorithmID_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderUpdate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderFinish_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderClearStreaming_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderClearTakeFromBuf_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderSetNotifyProc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderSetStreaming_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderStart_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderSetTakeFromBuf_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderClearNotifyProc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_QuickDERDecodeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecodeInteger_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_FindOIDTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION DER_DecodeTimeChoice_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Strdup_Util]
; [00000006 BYTES: COLLAPSED FUNCTION DER_EncodeTimeChoice_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_CompareAlgorithmID_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_ItemsAreEqual_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_sgn_DigestInfoTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_PointerToAnyTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_ZfreeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SGN_CreateDigestInfo_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_UCS2_ASCIIConversion_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SGN_DestroyDigestInfo_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CompareItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Realloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_UCS2_UTF8Conversion_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SGN_CopyDigestInfo_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecodeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION DER_GetInteger_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_BMPStringTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaStrdup_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecoderClearNotifyProc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ZFree_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_DupItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION ATOB_ConvertAsciiToItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION ATOB_AsciiToData_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1DecoderAbort_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncoderAbort_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1Encode_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PL_strncasecmp]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableDestroy]
; [00000006 BYTES: COLLAPSED FUNCTION PL_NewHashTable]
; [00000006 BYTES: COLLAPSED FUNCTION PL_CompareValues]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableLookupConst]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableAdd]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
; [00000006 BYTES: COLLAPSED FUNCTION memset]
; [00000010 BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011D00	proc near		; CODE XREF: sub_10011D90+2Dp
					; .text:10011DE6p ...

var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		push	ebp
		push	edx
		push	eax
		push	ecx
		push	ecx
		push	offset sub_10011D90
		push	large dword ptr	fs:0
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_20], eax
		mov	large fs:0, esp

loc_10011D32:				; CODE XREF: sub_10011D00+64j
					; sub_10011D00+80j
		mov	eax, [esp+28h+arg_4]
		mov	ebx, [eax+8]
		mov	ecx, [esp+28h+arg_0]
		xor	ebx, [ecx]
		mov	esi, [eax+0Ch]
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10011D82
		mov	edx, [esp+28h+arg_8]
		cmp	edx, 0FFFFFFFEh
		jz	short loc_10011D54
		cmp	esi, edx
		jbe	short loc_10011D82

loc_10011D54:				; CODE XREF: sub_10011D00+4Ej
		lea	esi, [esi+esi*2]
		lea	ebx, [ebx+esi*4+10h]
		mov	ecx, [ebx]
		mov	[eax+0Ch], ecx
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_10011D32
		push	101h
		mov	eax, [ebx+8]
		call	sub_100125D1
		mov	ecx, 1
		mov	eax, [ebx+8]
		call	sub_100125F0
		jmp	short loc_10011D32
; ---------------------------------------------------------------------------

loc_10011D82:				; CODE XREF: sub_10011D00+45j
					; sub_10011D00+52j
		pop	large dword ptr	fs:0
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10011D00	endp


; =============== S U B	R O U T	I N E =======================================


sub_10011D90	proc near		; DATA XREF: sub_10011D00+14o
					; .rdata:___safe_se_handler_tableo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		test	dword ptr [ecx+4], 6
		mov	eax, 1
		jz	short locret_10011DD5
		mov	eax, [esp+arg_4]
		mov	ecx, [eax+8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		push	ebp
		mov	ebp, [eax+18h]
		push	dword ptr [eax+0Ch]
		push	dword ptr [eax+10h]
		push	dword ptr [eax+14h]
		call	sub_10011D00
		add	esp, 0Ch
		pop	ebp
		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_C]
		mov	[edx], eax
		mov	eax, 3

locret_10011DD5:			; CODE XREF: sub_10011D90+10j
		retn
sub_10011D90	endp

; ---------------------------------------------------------------------------
		push	ebp
		mov	ecx, [esp+8]
		mov	ebp, [ecx]
		push	dword ptr [ecx+1Ch]
		push	dword ptr [ecx+18h]
		push	dword ptr [ecx+28h]
		call	sub_10011D00
		add	esp, 0Ch
		pop	ebp
		retn	4

; =============== S U B	R O U T	I N E =======================================


sub_10011DF2	proc near		; CODE XREF: sub_10011E60+89p
		push	ebp
		push	esi
		push	edi
		push	ebx
		mov	ebp, edx
		xor	eax, eax
		xor	ebx, ebx
		xor	edx, edx
		xor	esi, esi
		xor	edi, edi
		call	ecx
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10011DF2	endp


; =============== S U B	R O U T	I N E =======================================


sub_10011E09	proc near		; CODE XREF: sub_10011E60+15Ep
		mov	ebp, edx
		mov	esi, ecx
		mov	eax, ecx
		push	1
		call	sub_100125D1
		xor	eax, eax
		xor	ebx, ebx
		xor	ecx, ecx
		xor	edx, edx
		xor	edi, edi
		jmp	esi
sub_10011E09	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_10011E22(PVOID TargetFrame)
sub_10011E22	proc near		; CODE XREF: sub_10011E60+112p
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	0		; ReturnValue
		push	0		; ExceptionRecord
		push	offset loc_10011E37 ; TargetIp
		push	ecx		; TargetFrame
		call	RtlUnwind

loc_10011E37:				; DATA XREF: sub_10011E22+Ao
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10011E22	endp


; =============== S U B	R O U T	I N E =======================================


sub_10011E3C	proc near		; CODE XREF: sub_10011E60+128p
					; sub_10011E60+178p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	edx
		push	ecx
		push	[esp+0Ch+arg_4]
		call	sub_10011D00
		add	esp, 0Ch
		pop	ebp
		retn	8
sub_10011E3C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10011E60(int,	int, int, PVOID	TargetFrame, int)
sub_10011E60	proc near		; CODE XREF: sub_10012761+1Bp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
TargetFrame	= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+TargetFrame]
		push	esi
		mov	esi, [ebx+8]
		xor	esi, [eax]
		push	edi
		mov	eax, [esi]
		mov	[ebp+var_1], 0
		mov	[ebp+var_C], 1
		lea	edi, [ebx+10h]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_10011E96
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_10011E96:				; CODE XREF: sub_10011E60+29j
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]
		mov	eax, [ebp+arg_8]
		test	byte ptr [eax+4], 66h
		jnz	loc_10011FC3
		lea	ecx, [ebp+var_18]
		mov	[ebx-4], ecx
		mov	ebx, [ebx+0Ch]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_14], eax
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_10011F28
		jmp	short loc_10011ED0
; ---------------------------------------------------------------------------
		align 10h

loc_10011ED0:				; CODE XREF: sub_10011E60+68j
					; sub_10011E60+A0j
		lea	edx, [ebx+ebx*2]
		mov	ecx, [esi+edx*4+14h]
		lea	eax, [esi+edx*4+10h]
		mov	[ebp+var_10], eax
		mov	eax, [eax]
		mov	[ebp+var_8], eax
		test	ecx, ecx
		jz	short loc_10011EFB
		mov	edx, edi
		call	sub_10011DF2
		mov	[ebp+var_1], 1
		test	eax, eax
		jl	short loc_10011F32
		jg	short loc_10011F3B
		mov	eax, [ebp+var_8]

loc_10011EFB:				; CODE XREF: sub_10011E60+85j
		mov	ebx, eax
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_10011ED0
		cmp	[ebp+var_1], 0
		jz	short loc_10011F28

loc_10011F08:				; CODE XREF: sub_10011E60+D9j
					; sub_10011E60+17Dj
		mov	eax, [esi]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_10011F1A
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_10011F1A:				; CODE XREF: sub_10011E60+ADj
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]

loc_10011F28:				; CODE XREF: sub_10011E60+66j
					; sub_10011E60+A6j ...
		mov	eax, [ebp+var_C]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10011F32:				; CODE XREF: sub_10011E60+94j
		mov	[ebp+var_C], 0
		jmp	short loc_10011F08
; ---------------------------------------------------------------------------

loc_10011F3B:				; CODE XREF: sub_10011E60+96j
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_10011F6F
		cmp	dword_10019874,	0
		jz	short loc_10011F6F
		push	offset dword_10019874
		call	sub_10012684
		add	esp, 4
		test	eax, eax
		jz	short loc_10011F6F
		mov	ecx, [ebp+arg_8]
		push	1
		push	ecx
		call	dword_10019874
		add	esp, 8

loc_10011F6F:				; CODE XREF: sub_10011E60+E4j
					; sub_10011E60+EDj ...
		mov	ecx, [ebp+TargetFrame] ; TargetFrame
		call	sub_10011E22
		mov	eax, [ebp+TargetFrame]
		cmp	[eax+0Ch], ebx
		jz	short loc_10011F90
		mov	edx, [ebp+arg_0]
		push	edx
		push	edi
		mov	edx, ebx
		mov	ecx, eax
		call	sub_10011E3C
		mov	eax, [ebp+TargetFrame]

loc_10011F90:				; CODE XREF: sub_10011E60+11Dj
		mov	ecx, [ebp+var_8]
		mov	[eax+0Ch], ecx
		mov	eax, [esi]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_10011FA8
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_10011FA8:				; CODE XREF: sub_10011E60+13Bj
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+8]
		mov	edx, edi
		call	sub_10011E09

loc_10011FC3:				; CODE XREF: sub_10011E60+4Bj
		mov	edx, 0FFFFFFFEh
		cmp	[ebx+0Ch], edx
		jz	loc_10011F28
		mov	ecx, [ebp+arg_0]
		push	ecx
		push	edi
		mov	ecx, ebx
		call	sub_10011E3C
		jmp	loc_10011F08
sub_10011E60	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10011FE2	proc near		; CODE XREF: sub_10012230+Cp
					; sub_10012272+Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, 0E06D7363h
		cmp	[ebp+arg_0], eax
		jnz	short loc_10011FFE
		push	[ebp+arg_4]
		push	eax
		call	_XcptFilter
		pop	ecx
		pop	ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10011FFE:				; CODE XREF: sub_10011FE2+Dj
		xor	eax, eax
		pop	ebp
		retn
sub_10011FE2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012002	proc near		; CODE XREF: sub_10012048+A5p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		xor	eax, eax
		jmp	short loc_1001201E
; ---------------------------------------------------------------------------

loc_1001200F:				; CODE XREF: sub_10012002+1Fj
		test	eax, eax
		jnz	short loc_10012023
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_1001201B
		call	ecx

loc_1001201B:				; CODE XREF: sub_10012002+15j
		add	esi, 4

loc_1001201E:				; CODE XREF: sub_10012002+Bj
		cmp	esi, [ebp+arg_4]
		jb	short loc_1001200F

loc_10012023:				; CODE XREF: sub_10012002+Fj
		pop	esi
		pop	ebp
		retn
sub_10012002	endp


; =============== S U B	R O U T	I N E =======================================


sub_10012026	proc near		; DATA XREF: .rdata:1001339Co
		push	80h		; Size
		call	ds:malloc
		pop	ecx
		mov	Memory,	eax
		mov	dword_10019864,	eax
		test	eax, eax
		jnz	short loc_10012042
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_10012042:				; CODE XREF: sub_10012026+18j
		and	dword ptr [eax], 0
		xor	eax, eax
		retn
sub_10012026	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012048	proc near		; CODE XREF: DllEntryPoint-1C3p
					; DllEntryPoint-109p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		xor	eax, eax
		push	esi
		push	edi
		cmp	[ebp+arg_4], eax
		jnz	short loc_1001207D
		cmp	dword_10019534,	eax
		jle	short loc_10012076
		dec	dword_10019534
		mov	edi, ds:InterlockedCompareExchange
		push	eax
		mov	esi, offset Target
		jmp	loc_1001215B
; ---------------------------------------------------------------------------

loc_10012076:				; CODE XREF: sub_10012048+15j
					; sub_10012048+AEj
		xor	eax, eax
		jmp	loc_100121C8
; ---------------------------------------------------------------------------

loc_1001207D:				; CODE XREF: sub_10012048+Dj
		cmp	[ebp+arg_4], 1
		jnz	loc_100121C5
		mov	ecx, large fs:18h
		mov	ebx, [ecx+4]
		mov	edi, ds:InterlockedCompareExchange
		mov	[ebp+arg_4], eax
		push	eax
		mov	esi, offset Target
		jmp	short loc_100120B3
; ---------------------------------------------------------------------------

loc_100120A2:				; CODE XREF: sub_10012048+71j
		cmp	eax, ebx
		jz	short loc_100120BD
		push	3E8h		; dwMilliseconds
		call	ds:Sleep
		push	0		; Comperand

loc_100120B3:				; CODE XREF: sub_10012048+58j
		push	ebx		; Exchange
		push	esi		; Destination
		call	edi ; InterlockedCompareExchange
		test	eax, eax
		jnz	short loc_100120A2
		jmp	short loc_100120C4
; ---------------------------------------------------------------------------

loc_100120BD:				; CODE XREF: sub_10012048+5Cj
		mov	[ebp+arg_4], 1

loc_100120C4:				; CODE XREF: sub_10012048+73j
		mov	eax, dword_1001985C
		push	2
		pop	edi
		test	eax, eax
		jz	short loc_100120D9
		push	1Fh
		call	_amsg_exit
		jmp	short loc_10012112
; ---------------------------------------------------------------------------

loc_100120D9:				; CODE XREF: sub_10012048+86j
		push	offset dword_100133A0
		push	offset dword_10013398
		mov	dword_1001985C,	1
		call	sub_10012002
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_10012076
		push	offset dword_10013394
		push	offset dword_10013390
		call	_initterm
		pop	ecx
		mov	dword_1001985C,	edi

loc_10012112:				; CODE XREF: sub_10012048+8Fj
		xor	ebx, ebx
		pop	ecx
		cmp	[ebp+arg_4], ebx
		jnz	short loc_10012122
		push	ebx		; Value
		push	esi		; Target
		call	ds:InterlockedExchange

loc_10012122:				; CODE XREF: sub_10012048+D0j
		cmp	dword_10019870,	ebx
		jz	short loc_10012146
		push	offset dword_10019870
		call	sub_10012684
		pop	ecx
		test	eax, eax
		jz	short loc_10012146
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_10019870

loc_10012146:				; CODE XREF: sub_10012048+E0j
					; sub_10012048+EFj
		inc	dword_10019534
		jmp	short loc_100121C5
; ---------------------------------------------------------------------------

loc_1001214E:				; CODE XREF: sub_10012048+11Aj
		push	3E8h		; dwMilliseconds
		call	ds:Sleep
		push	0		; Comperand

loc_1001215B:				; CODE XREF: sub_10012048+29j
		push	1		; Exchange
		push	esi		; Destination
		call	edi ; InterlockedCompareExchange
		test	eax, eax
		jnz	short loc_1001214E
		mov	eax, dword_1001985C
		cmp	eax, 2
		jz	short loc_10012178
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	short loc_100121C5
; ---------------------------------------------------------------------------

loc_10012178:				; CODE XREF: sub_10012048+124j
		mov	ebx, Memory
		test	ebx, ebx
		jz	short loc_100121B2
		mov	edi, dword_10019864
		add	edi, 0FFFFFFFCh
		jmp	short loc_10012198
; ---------------------------------------------------------------------------

loc_1001218D:				; CODE XREF: sub_10012048+152j
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_10012195
		call	eax

loc_10012195:				; CODE XREF: sub_10012048+149j
		sub	edi, 4

loc_10012198:				; CODE XREF: sub_10012048+143j
		cmp	edi, ebx
		jnb	short loc_1001218D
		push	ebx		; Memory
		call	ds:free
		and	dword_10019864,	0
		and	Memory,	0
		pop	ecx

loc_100121B2:				; CODE XREF: sub_10012048+138j
		push	0		; Value
		push	esi		; Target
		mov	dword_1001985C,	0
		call	ds:InterlockedExchange

loc_100121C5:				; CODE XREF: sub_10012048+39j
					; sub_10012048+104j ...
		xor	eax, eax
		inc	eax

loc_100121C8:				; CODE XREF: sub_10012048+30j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	0Ch
sub_10012048	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_100121CF:				; CODE XREF: DllEntryPoint+11j
		push	2Ch
		push	offset dword_10014EF8
		call	__SEH_prolog4
		mov	ecx, [ebp+arg_4]
		xor	edx, edx
		inc	edx
		mov	[ebp+var_1C], edx
		xor	esi, esi
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	dword_100191F0,	ecx
		cmp	ecx, esi
		jnz	short loc_10012203
		cmp	dword_10019534,	esi
		jnz	short loc_10012203
		mov	[ebp+var_1C], esi
		jmp	loc_10012409
; ---------------------------------------------------------------------------

loc_10012203:				; CODE XREF: DllEntryPoint-23Aj
					; DllEntryPoint-232j
		cmp	ecx, edx
		jz	short loc_10012210
		cmp	ecx, 2
		jnz	loc_1001229D

loc_10012210:				; CODE XREF: DllEntryPoint-226j
		mov	eax, dword_1001986C
		cmp	eax, esi
		jz	short loc_1001224F
		mov	[ebp+ms_exc.registration.TryLevel], edx
		mov	dword_10019538,	edx
		push	[ebp+arg_8]
		push	ecx
		push	[ebp+arg_0]
		call	eax ; dword_1001986C
		mov	[ebp+var_1C], eax
		jmp	short loc_1001224C
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10012230	proc near		; DATA XREF: .rdata:10014F18o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-20h], ecx
		push	eax
		push	ecx
		call	sub_10011FE2
		pop	ecx
		pop	ecx
		retn
sub_10012230	endp


; =============== S U B	R O U T	I N E =======================================


sub_10012244	proc near		; DATA XREF: .rdata:10014F1Co
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10012244	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_1001224C:				; CODE XREF: DllEntryPoint-1FDj
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_1001224F:				; CODE XREF: DllEntryPoint-214j
		cmp	[ebp+var_1C], esi
		jz	loc_10012409
		mov	[ebp+ms_exc.registration.TryLevel], 2
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10012048
		mov	[ebp+var_1C], eax
		jmp	short loc_1001228E
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10012272	proc near		; DATA XREF: .rdata:10014F24o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-24h], ecx
		push	eax
		push	ecx
		call	sub_10011FE2
		pop	ecx
		pop	ecx
		retn
sub_10012272	endp


; =============== S U B	R O U T	I N E =======================================


sub_10012286	proc near		; DATA XREF: .rdata:10014F28o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10012286	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_1001228E:				; CODE XREF: DllEntryPoint-1BBj
		mov	[ebp+ms_exc.registration.TryLevel], esi
		cmp	[ebp+var_1C], esi
		jz	loc_10012409
		mov	ecx, [ebp+arg_4]

loc_1001229D:				; CODE XREF: DllEntryPoint-221j
		mov	[ebp+ms_exc.registration.TryLevel], 3
		push	[ebp+arg_8]
		push	ecx
		push	[ebp+arg_0]
		call	sub_10012702
		mov	[ebp+var_1C], eax
		jmp	short loc_100122D1
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100122B5	proc near		; DATA XREF: .rdata:10014F30o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-28h], ecx
		push	eax
		push	ecx
		call	sub_10011FE2
		pop	ecx
		pop	ecx
		retn
sub_100122B5	endp


; =============== S U B	R O U T	I N E =======================================


sub_100122C9	proc near		; DATA XREF: .rdata:10014F34o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_100122C9	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_100122D1:				; CODE XREF: DllEntryPoint-178j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		cmp	[ebp+arg_4], 1
		jnz	loc_1001237A
		cmp	[ebp+var_1C], esi
		jnz	loc_1001237A
		mov	[ebp+ms_exc.registration.TryLevel], 4
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	sub_10012702
		jmp	short loc_10012313
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100122FA	proc near		; DATA XREF: .rdata:10014F3Co
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-2Ch], ecx
		push	eax
		push	ecx
		call	sub_10011FE2
		pop	ecx
		pop	ecx
		retn
sub_100122FA	endp


; =============== S U B	R O U T	I N E =======================================


sub_1001230E	proc near		; DATA XREF: .rdata:10014F40o
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_1001230E	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10012313:				; CODE XREF: DllEntryPoint-133j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	[ebp+ms_exc.registration.TryLevel], 5
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	sub_10012048
		jmp	short loc_10012342
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10012329	proc near		; DATA XREF: .rdata:10014F48o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-30h], ecx
		push	eax
		push	ecx
		call	sub_10011FE2
		pop	ecx
		pop	ecx
		retn
sub_10012329	endp


; =============== S U B	R O U T	I N E =======================================


sub_1001233D	proc near		; DATA XREF: .rdata:10014F4Co
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_1001233D	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10012342:				; CODE XREF: DllEntryPoint-104j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	eax, dword_1001986C
		cmp	eax, esi
		jz	short loc_1001237A
		mov	[ebp+ms_exc.registration.TryLevel], 6
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	eax ; dword_1001986C
		jmp	short loc_10012377
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_1001235E	proc near		; DATA XREF: .rdata:10014F54o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-34h], ecx
		push	eax
		push	ecx
		call	sub_10011FE2
		pop	ecx
		pop	ecx
		retn
sub_1001235E	endp


; =============== S U B	R O U T	I N E =======================================


sub_10012372	proc near		; DATA XREF: .rdata:10014F58o
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_10012372	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10012377:				; CODE XREF: DllEntryPoint-CFj
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_1001237A:				; CODE XREF: DllEntryPoint-153j
					; DllEntryPoint-14Aj ...
		cmp	[ebp+arg_4], esi
		jz	short loc_10012389
		cmp	[ebp+arg_4], 3
		jnz	loc_10012409

loc_10012389:				; CODE XREF: DllEntryPoint-AEj
		mov	[ebp+ms_exc.registration.TryLevel], 7
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10012048
		mov	[ebp+var_1C], eax
		jmp	short loc_100123BF
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100123A3	proc near		; DATA XREF: .rdata:10014F60o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-38h], ecx
		push	eax
		push	ecx
		call	sub_10011FE2
		pop	ecx
		pop	ecx
		retn
sub_100123A3	endp


; =============== S U B	R O U T	I N E =======================================


sub_100123B7	proc near		; DATA XREF: .rdata:10014F64o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_100123B7	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_100123BF:				; CODE XREF: DllEntryPoint-8Aj
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	eax, dword_1001986C
		cmp	eax, esi
		jz	short loc_10012409
		cmp	dword_10019538,	esi
		jz	short loc_10012409
		mov	[ebp+ms_exc.registration.TryLevel], 8
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	eax ; dword_1001986C
		mov	[ebp+var_1C], eax
		jmp	short loc_10012406
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100123EA	proc near		; DATA XREF: .rdata:10014F6Co
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-3Ch], ecx
		push	eax
		push	ecx
		call	sub_10011FE2
		pop	ecx
		pop	ecx
		retn
sub_100123EA	endp


; =============== S U B	R O U T	I N E =======================================


sub_100123FE	proc near		; DATA XREF: .rdata:10014F70o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_100123FE	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10012406:				; CODE XREF: DllEntryPoint-43j
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_10012409:				; CODE XREF: DllEntryPoint-22Dj
					; DllEntryPoint-1D9j ...
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	sub_10012420
		mov	eax, [ebp+var_1C]
		call	__SEH_epilog4
		retn	0Ch
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10012420	proc near		; CODE XREF: DllEntryPoint-1Bp
					; DATA XREF: .rdata:10014F10o
		mov	dword_100191F0,	0FFFFFFFFh
		retn
sub_10012420	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

; FUNCTION CHUNK AT 100121CF SIZE 00000061 BYTES
; FUNCTION CHUNK AT 1001224C SIZE 00000026 BYTES
; FUNCTION CHUNK AT 1001228E SIZE 00000027 BYTES
; FUNCTION CHUNK AT 100122D1 SIZE 00000029 BYTES
; FUNCTION CHUNK AT 10012313 SIZE 00000016 BYTES
; FUNCTION CHUNK AT 10012342 SIZE 0000001C BYTES
; FUNCTION CHUNK AT 10012377 SIZE 0000002C BYTES
; FUNCTION CHUNK AT 100123BF SIZE 0000002B BYTES
; FUNCTION CHUNK AT 10012406 SIZE 0000001A BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 1
		jnz	short loc_1001243B
		call	sub_10012786

loc_1001243B:				; CODE XREF: DllEntryPoint+9j
		pop	ebp
		jmp	loc_100121CF
DllEntryPoint	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012441	proc near		; CODE XREF: __security_check_cookie(x):$failure$3j

var_328		= dword	ptr -328h
var_324		= dword	ptr -324h
var_320		= dword	ptr -320h
var_s0		= dword	ptr  0
arg_0		= byte ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 328h
		mov	dword_10019640,	eax
		mov	dword_1001963C,	ecx
		mov	dword_10019638,	edx
		mov	dword_10019634,	ebx
		mov	dword_10019630,	esi
		mov	dword_1001962C,	edi
		mov	word_10019658, ss
		mov	word_1001964C, cs
		mov	word_10019628, ds
		mov	word_10019624, es
		mov	word_10019620, fs
		mov	word_1001961C, gs
		pushf
		pop	dword_10019650
		mov	eax, [ebp+var_s0]
		mov	dword_10019644,	eax
		mov	eax, [ebp+4]
		mov	dword_10019648,	eax
		lea	eax, [ebp+arg_0]
		mov	dword_10019654,	eax
		mov	eax, [ebp+var_320]
		mov	dword_10019590,	10001h
		mov	eax, dword_10019648
		mov	dword_1001954C,	eax
		mov	dword_10019540,	0C0000409h
		mov	dword_10019544,	1
		mov	eax, ___security_cookie
		mov	[ebp+var_328], eax
		mov	eax, dword_100191D4
		mov	[ebp+var_324], eax
		push	0		; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		push	offset ExceptionInfo ; ExceptionInfo
		call	ds:UnhandledExceptionFilter
		push	0C0000409h	; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess
		leave
		retn
sub_10012441	endp

; ---------------------------------------------------------------------------
		align 10h
		push	esi
		mov	eax, [esp+14h]
		or	eax, eax
		jnz	short loc_10012561
		mov	ecx, [esp+10h]
		mov	eax, [esp+0Ch]
		xor	edx, edx
		div	ecx
		mov	ebx, eax
		mov	eax, [esp+8]
		div	ecx
		mov	esi, eax
		mov	eax, ebx
		mul	dword ptr [esp+10h]
		mov	ecx, eax
		mov	eax, esi
		mul	dword ptr [esp+10h]
		add	edx, ecx
		jmp	short loc_100125A8
; ---------------------------------------------------------------------------

loc_10012561:				; CODE XREF: .text:10012537j
		mov	ecx, eax
		mov	ebx, [esp+10h]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+8]

loc_1001256F:				; CODE XREF: .text:10012579j
		shr	ecx, 1
		rcr	ebx, 1
		shr	edx, 1
		rcr	eax, 1
		or	ecx, ecx
		jnz	short loc_1001256F
		div	ebx
		mov	esi, eax
		mul	dword ptr [esp+14h]
		mov	ecx, eax
		mov	eax, [esp+10h]
		mul	esi
		add	edx, ecx
		jb	short loc_1001259D
		cmp	edx, [esp+0Ch]
		ja	short loc_1001259D
		jb	short loc_100125A6
		cmp	eax, [esp+8]
		jbe	short loc_100125A6

loc_1001259D:				; CODE XREF: .text:1001258Dj
					; .text:10012593j
		dec	esi
		sub	eax, [esp+10h]
		sbb	edx, [esp+14h]

loc_100125A6:				; CODE XREF: .text:10012595j
					; .text:1001259Bj
		xor	ebx, ebx

loc_100125A8:				; CODE XREF: .text:1001255Fj
		sub	eax, [esp+8]
		sbb	edx, [esp+0Ch]
		neg	edx
		neg	eax
		sbb	edx, 0
		mov	ecx, edx
		mov	edx, ebx
		mov	ebx, ecx
		mov	ecx, eax
		mov	eax, esi
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------
		align 4
		push	ebx
		push	ecx
		mov	ebx, offset dword_100191E0
		jmp	short loc_100125DC

; =============== S U B	R O U T	I N E =======================================


sub_100125D1	proc near		; CODE XREF: sub_10011D00+6Ep
					; sub_10011E09+8p

arg_0		= dword	ptr  4

		push	ebx
		push	ecx
		mov	ebx, offset dword_100191E0
		mov	ecx, [esp+8+arg_0]

loc_100125DC:				; CODE XREF: .text:100125CFj
		mov	[ebx+8], ecx
		mov	[ebx+4], eax
		mov	[ebx+0Ch], ebp
		push	ebp
		push	ecx
		push	eax
		pop	eax
		pop	ecx
		pop	ebp
		pop	ecx
		pop	ebx
		retn	4
sub_100125D1	endp


; =============== S U B	R O U T	I N E =======================================


sub_100125F0	proc near		; CODE XREF: sub_10011D00+7Bp
		call	eax
		retn
sub_100125F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012600	proc near		; CODE XREF: sub_10012684+16p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, 5A4Dh
		cmp	[ecx], ax
		jz	short loc_10012616

loc_10012612:				; CODE XREF: sub_10012600+21j
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10012616:				; CODE XREF: sub_10012600+10j
		mov	eax, [ecx+3Ch]
		add	eax, ecx
		cmp	dword ptr [eax], 4550h
		jnz	short loc_10012612
		xor	edx, edx
		mov	ecx, 10Bh
		cmp	[eax+18h], cx
		setz	dl
		mov	eax, edx
		pop	ebp
		retn
sub_10012600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012640	proc near		; CODE XREF: sub_10012684+27p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		push	ebx
		push	esi
		movzx	esi, word ptr [ecx+6]
		xor	edx, edx
		push	edi
		lea	eax, [eax+ecx+18h]
		test	esi, esi
		jbe	short loc_1001267D
		mov	edi, [ebp+arg_4]

loc_10012665:				; CODE XREF: sub_10012640+3Bj
		mov	ecx, [eax+0Ch]
		cmp	edi, ecx
		jb	short loc_10012675
		mov	ebx, [eax+8]
		add	ebx, ecx
		cmp	edi, ebx
		jb	short loc_1001267F

loc_10012675:				; CODE XREF: sub_10012640+2Aj
		inc	edx
		add	eax, 28h
		cmp	edx, esi
		jb	short loc_10012665

loc_1001267D:				; CODE XREF: sub_10012640+20j
		xor	eax, eax

loc_1001267F:				; CODE XREF: sub_10012640+33j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10012640	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012684	proc near		; CODE XREF: sub_10011E60+F4p
					; sub_10012048+E7p

ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	8
		push	offset stru_10014F78
		call	__SEH_prolog4
		and	[ebp+ms_exc.registration.TryLevel], 0
		mov	esi, 10000000h
		push	esi
		call	sub_10012600
		pop	ecx
		test	eax, eax
		jz	short loc_100126E1
		mov	eax, [ebp+arg_0]
		sub	eax, esi
		push	eax
		push	esi
		call	sub_10012640
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100126E1
		mov	eax, [eax+24h]
		shr	eax, 1Fh
		not	eax
		and	eax, 1
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		jmp	short loc_100126EA
; ---------------------------------------------------------------------------

loc_100126CA:				; DATA XREF: .rdata:stru_10014F78o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 10012684
		mov	eax, [eax]
		mov	eax, [eax]
		xor	ecx, ecx
		cmp	eax, 0C0000005h
		setz	cl
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_100126DE:				; DATA XREF: .rdata:stru_10014F78o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 10012684

loc_100126E1:				; CODE XREF: sub_10012684+1Ej
					; sub_10012684+30j
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		xor	eax, eax

loc_100126EA:				; CODE XREF: sub_10012684+44j
		call	__SEH_epilog4
		retn
sub_10012684	endp

; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]

; =============== S U B	R O U T	I N E =======================================


sub_10012702	proc near		; CODE XREF: DllEntryPoint-180p
					; DllEntryPoint-138p
		xor	eax, eax
		inc	eax
		retn	0Ch
sub_10012702	endp

; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10012761(int,	PVOID TargetFrame, int,	int)
sub_10012761	proc near		; DATA XREF: __SEH_prolog4o
					; .rdata:10014EF4o

arg_0		= dword	ptr  8
TargetFrame	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_8]	; int
		push	[ebp+TargetFrame] ; TargetFrame
		push	[ebp+arg_0]	; int
		push	offset @__security_check_cookie@4 ; int
		push	offset ___security_cookie ; int
		call	sub_10011E60
		add	esp, 18h
		pop	ebp
		retn
sub_10012761	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012786	proc near		; CODE XREF: DllEntryPoint+Bp

PerformanceCount= LARGE_INTEGER	ptr -10h
SystemTimeAsFileTime= _FILETIME	ptr -8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, ___security_cookie
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		push	ebx
		push	edi
		mov	edi, 0BB40E64Eh
		mov	ebx, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_100127B8
		test	ebx, eax
		jz	short loc_100127B8
		not	eax
		mov	dword_100191D4,	eax
		jmp	short loc_10012813
; ---------------------------------------------------------------------------

loc_100127B8:				; CODE XREF: sub_10012786+23j
					; sub_10012786+27j
		push	esi
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	esi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		call	ds:GetCurrentProcessId
		xor	esi, eax
		call	ds:GetCurrentThreadId
		xor	esi, eax
		call	ds:GetTickCount
		xor	esi, eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	eax, dword ptr [ebp+PerformanceCount+4]
		xor	eax, dword ptr [ebp+PerformanceCount]
		xor	esi, eax
		cmp	esi, edi
		jz	short loc_100127FF
		test	___security_cookie, ebx
		jnz	short loc_10012804

loc_100127FF:				; CODE XREF: sub_10012786+6Fj
		mov	esi, 0BB40E64Fh

loc_10012804:				; CODE XREF: sub_10012786+77j
		mov	___security_cookie, esi
		not	esi
		mov	dword_100191D4,	esi
		pop	esi

loc_10012813:				; CODE XREF: sub_10012786+30j
		pop	edi
		pop	ebx
		leave
		retn
sub_10012786	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	ecx, [esp+10h]
		or	ecx, eax
		mov	ecx, [esp+0Ch]
		jnz	short loc_10012839
		mov	eax, [esp+4]
		mul	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_10012839:				; CODE XREF: .text:1001282Ej
		push	ebx
		mul	ecx
		mov	ebx, eax
		mov	eax, [esp+8]
		mul	dword ptr [esp+14h]
		add	ebx, eax
		mov	eax, [esp+8]
		mul	ecx
		add	edx, ebx
		pop	ebx
		retn	10h
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind]
		align 200h
		dd 180h	dup(?)
_text		ends

; Section 2. (virtual address 00013000)
; Virtual size			: 0000546A (  21610.)
; Section size in file		: 00005600 (  22016.)
; Offset to raw	data for section: 00011E00
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10012786+43p
					; DATA XREF: sub_10012786+43r ...
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10012786+4Bp
					; DATA XREF: sub_10012786+4Br
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_10012786+53p
					; DATA XREF: sub_10012786+53r
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10012786+5Fp
					; DATA XREF: sub_10012786+5Fr
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_10012441+BDp
					; DATA XREF: sub_10012441+BDr
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: sub_10012441+C8p
					; DATA XREF: sub_10012441+C8r
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: sub_10012441+D3p
					; DATA XREF: sub_10012441+D3r
; void __stdcall RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD	ExceptionRecord, PVOID ReturnValue)
		extrn __imp_RtlUnwind:dword ; DATA XREF: RtlUnwindr
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn InterlockedExchange:dword	; CODE XREF: sub_10012048+D4p
					; sub_10012048+177p
					; DATA XREF: ...
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_10012048+63p
					; sub_10012048+10Bp
					; DATA XREF: ...
; LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination,	LONG Exchange, LONG Comperand)
		extrn InterlockedCompareExchange:dword ; CODE XREF: sub_10012048+6Dp
					; sub_10012048+116p
					; DATA XREF: ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: sub_10012441+DAp
					; DATA XREF: sub_10012441+DAr
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_10012786+37p
					; DATA XREF: sub_10012786+37r

;
; Imports from libnspr4.dll
;
		extrn PR_CallOnce:dword	; CODE XREF: NSS_CMSType_RegisterContentType+Ap
					; DATA XREF: NSS_CMSType_RegisterContentType+Ar ...
		extrn PR_NewLock:dword	; CODE XREF: .text:10006B67p
					; .text:10006B72p
					; DATA XREF: ...
		extrn PR_Lock:dword	; CODE XREF: sub_10006A80+Ap
					; sub_10006BF0+15p ...
		extrn PR_DestroyLock:dword ; CODE XREF:	sub_10006A80+5Fp
					; sub_10006A80+80p
					; DATA XREF: ...
		extrn PR_Unlock:dword	; CODE XREF: sub_10006A80+79p
					; sub_10006BF0+3Ep ...
		extrn PR_Now:dword	; CODE XREF: NSS_CMSSignedData_VerifyCertsOnly+3Bp
					; NSS_CMSSignedData_ImportCerts+10Dp ...

;
; Imports from libplc4.dll
;
		extrn __imp_PL_strncasecmp:dword ; DATA	XREF: PL_strncasecmpr
					; .rdata:10014FCCo

;
; Imports from libplds4.dll
;
		extrn __imp_PL_HashTableDestroy:dword ;	DATA XREF: PL_HashTableDestroyr
					; .rdata:10014FE0o
		extrn __imp_PL_CompareValues:dword ; DATA XREF:	PL_CompareValuesr
		extrn __imp_PL_HashTableLookupConst:dword
					; DATA XREF: PL_HashTableLookupConstr
		extrn __imp_PL_HashTableAdd:dword ; DATA XREF: PL_HashTableAddr
		extrn __imp_PL_NewHashTable:dword ; DATA XREF: PL_NewHashTabler

;
; Imports from msvcrt.dll
;
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr .rdata:10015008o
; char *__cdecl	strchr(const char *Str,	int Val)
		extrn strchr:dword	; CODE XREF: sub_10008FF0+170p
					; sub_1000AE80+Cp ...
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn memmove:dword	; CODE XREF: sub_1000AE80+94p
					; DATA XREF: sub_1000AE80+94r
		extrn __imp__XcptFilter:dword ;	DATA XREF: _XcptFilterr
; void *__cdecl	malloc(size_t Size)
		extrn malloc:dword	; CODE XREF: sub_10012026+5p
					; DATA XREF: sub_10012026+5r
; void __cdecl free(void *Memory)
		extrn free:dword	; CODE XREF: sub_10012048+155p
					; DATA XREF: sub_10012048+155r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr

;
; Imports from nss3.dll
;
		extrn __imp_PK11_GetInternalKeySlot:dword
					; DATA XREF: PK11_GetInternalKeySlotr
					; .rdata:10014FA4o
		extrn __imp_PK11_IsInternal:dword ; DATA XREF: PK11_IsInternalr
		extrn __imp_SECKEY_DestroyEncryptedPrivateKeyInfo:dword
					; DATA XREF: SECKEY_DestroyEncryptedPrivateKeyInfor
		extrn __imp_SECKEY_CopyEncryptedPrivateKeyInfo:dword
					; DATA XREF: SECKEY_CopyEncryptedPrivateKeyInfor
		extrn __imp_PK11_ExportEncryptedPrivateKeyInfo:dword
					; DATA XREF: PK11_ExportEncryptedPrivateKeyInfor
		extrn __imp_SECKEY_DestroyPrivateKeyInfo:dword
					; DATA XREF: SECKEY_DestroyPrivateKeyInfor
		extrn __imp_SECKEY_CopyPrivateKeyInfo:dword
					; DATA XREF: SECKEY_CopyPrivateKeyInfor
		extrn __imp_PK11_ExportPrivateKeyInfo:dword
					; DATA XREF: PK11_ExportPrivateKeyInfor
		extrn __imp_PK11_DestroyPBEParams:dword	; DATA XREF: PK11_DestroyPBEParamsr
		extrn __imp_PK11_CreatePBEParams:dword ; DATA XREF: PK11_CreatePBEParamsr
		extrn __imp_PK11_SetSymKeyUserData:dword
					; DATA XREF: PK11_SetSymKeyUserDatar
		extrn __imp_PK11_GetTokenName:dword ; DATA XREF: PK11_GetTokenNamer
		extrn __imp_PK11_TraverseCertsForSubjectInSlot:dword
					; DATA XREF: PK11_TraverseCertsForSubjectInSlotr
		extrn __imp___CERT_DecodeDERCertificate:dword
					; DATA XREF: __CERT_DecodeDERCertificater
		extrn __imp_PK11_FindCertAndKeyByRecipientListNew:dword
					; DATA XREF: PK11_FindCertAndKeyByRecipientListNewr
		extrn __imp_PK11_FindKeyByDERCert:dword	; DATA XREF: PK11_FindKeyByDERCertr
		extrn __imp_PK11_ImportDERCert:dword ; DATA XREF: PK11_ImportDERCertr
		extrn __imp_PK11_ImportCertForKeyToSlot:dword
					; DATA XREF: PK11_ImportCertForKeyToSlotr
		extrn __imp_CERT_NewTempCertificate:dword
					; DATA XREF: CERT_NewTempCertificater
		extrn __imp_CERT_IsRootDERCert:dword ; DATA XREF: CERT_IsRootDERCertr
		extrn __imp_CERT_IsCADERCert:dword ; DATA XREF:	CERT_IsCADERCertr
		extrn __imp_PK11_ImportPublicKey:dword ; DATA XREF: PK11_ImportPublicKeyr
		extrn __imp_PK11_PBEKeyGen:dword ; DATA	XREF: PK11_PBEKeyGenr
		extrn __imp_PK11_ImportEncryptedPrivateKeyInfo:dword
					; DATA XREF: PK11_ImportEncryptedPrivateKeyInfor
		extrn __imp_SECKEY_DestroyPublicKey:dword
					; DATA XREF: SECKEY_DestroyPublicKeyr
		extrn __imp_HASH_ResultLen:dword ; DATA	XREF: HASH_ResultLenr
		extrn __imp_HASH_GetHashTypeByOidTag:dword
					; DATA XREF: HASH_GetHashTypeByOidTagr
		extrn __imp_PK11_GetBestSlot:dword ; DATA XREF:	PK11_GetBestSlotr
		extrn __imp_PK11_KeyGen:dword ;	DATA XREF: PK11_KeyGenr
		extrn __imp_SEC_PKCS5IsAlgorithmPBEAlgTag:dword
					; DATA XREF: SEC_PKCS5IsAlgorithmPBEAlgTagr
		extrn __imp_PK11_CreatePBEAlgorithmID:dword
					; DATA XREF: PK11_CreatePBEAlgorithmIDr
		extrn __imp_PK11_GenerateNewParam:dword	; DATA XREF: PK11_GenerateNewParamr
		extrn __imp_PK11_ParamToAlgid:dword ; DATA XREF: PK11_ParamToAlgidr
		extrn __imp_SEC_PKCS5IsAlgorithmPBEAlg:dword
					; DATA XREF: SEC_PKCS5IsAlgorithmPBEAlgr
		extrn __imp_PK11_GetSymKeyUserData:dword
					; DATA XREF: PK11_GetSymKeyUserDatar
		extrn __imp_PK11_GetPBECryptoMechanism:dword
					; DATA XREF: PK11_GetPBECryptoMechanismr
		extrn __imp_PK11_AlgtagToMechanism:dword
					; DATA XREF: PK11_AlgtagToMechanismr
		extrn __imp_PK11_ParamFromAlgid:dword ;	DATA XREF: PK11_ParamFromAlgidr
		extrn __imp_PK11_GetBlockSize:dword ; DATA XREF: PK11_GetBlockSizer
		extrn __imp_PK11_GetSlotFromKey:dword ;	DATA XREF: PK11_GetSlotFromKeyr
		extrn __imp_PK11_IsHW:dword ; DATA XREF: PK11_IsHWr
		extrn __imp_PK11_FreeSlot:dword	; DATA XREF: PK11_FreeSlotr
		extrn __imp_PK11_ReferenceSlot:dword ; DATA XREF: PK11_ReferenceSlotr
		extrn __imp_PK11_GetInternalSlot:dword ; DATA XREF: PK11_GetInternalSlotr
		extrn __imp_NSS_Get_SECKEY_PointerToPrivateKeyInfoTemplate:dword
					; DATA XREF: NSS_Get_SECKEY_PointerToPrivateKeyInfoTemplater
		extrn __imp_SEC_PKCS5GetCryptoAlgorithm:dword
					; DATA XREF: SEC_PKCS5GetCryptoAlgorithmr
		extrn __imp_SEC_PKCS5GetKeyLength:dword	; DATA XREF: SEC_PKCS5GetKeyLengthr
		extrn __imp_PK11_DigestBegin:dword ; DATA XREF:	PK11_DigestBeginr
		extrn __imp_PK11_DigestOp:dword	; DATA XREF: PK11_DigestOpr
		extrn __imp_PK11_DigestFinal:dword ; DATA XREF:	PK11_DigestFinalr
		extrn __imp_PK11_HashBuf:dword ; DATA XREF: PK11_HashBufr
		extrn __imp_PK11_GenerateRandom:dword ;	DATA XREF: PK11_GenerateRandomr
		extrn __imp_NSS_Get_CERT_SetOfSignedCrlTemplate:dword
					; DATA XREF: NSS_Get_CERT_SetOfSignedCrlTemplater
		extrn __imp_NSS_Get_SECKEY_PointerToEncryptedPrivateKeyInfoTemplate:dword
					; DATA XREF: NSS_Get_SECKEY_PointerToEncryptedPrivateKeyInfoTemplater
		extrn __imp_NSS_Get_SECKEY_PrivateKeyInfoTemplate:dword
					; DATA XREF: NSS_Get_SECKEY_PrivateKeyInfoTemplater
		extrn __imp_NSS_VersionCheck:dword ; DATA XREF:	NSS_VersionCheckr
		extrn __imp_CERT_FindSMimeProfile:dword	; DATA XREF: CERT_FindSMimeProfiler
		extrn __imp_SECKEY_PublicKeyStrengthInBits:dword
					; DATA XREF: SECKEY_PublicKeyStrengthInBitsr
		extrn __imp_HASH_GetHashObjectByOidTag:dword
					; DATA XREF: HASH_GetHashObjectByOidTagr
		extrn __imp_NSS_RegisterShutdown:dword ; DATA XREF: NSS_RegisterShutdownr
		extrn __imp_VFY_VerifyDataDirect:dword ; DATA XREF: VFY_VerifyDataDirectr
		extrn __imp_VFY_VerifyDigestDirect:dword
					; DATA XREF: VFY_VerifyDigestDirectr
		extrn __imp_PK11_FindKeyByAnyCert:dword	; DATA XREF: PK11_FindKeyByAnyCertr
		extrn __imp_SEC_GetSignatureAlgorithmOidTag:dword
					; DATA XREF: SEC_GetSignatureAlgorithmOidTagr
		extrn __imp_SEC_SignData:dword ; DATA XREF: SEC_SignDatar
		extrn __imp_SGN_Digest:dword ; DATA XREF: SGN_Digestr
		extrn __imp_CERT_CertListFromCert:dword	; DATA XREF: CERT_CertListFromCertr
		extrn __imp_CERT_GetDefaultCertDB:dword	; DATA XREF: CERT_GetDefaultCertDBr
		extrn __imp_CERT_SaveSMimeProfile:dword	; DATA XREF: CERT_SaveSMimeProfiler
		extrn __imp_CERT_GetCommonName:dword ; DATA XREF: CERT_GetCommonNamer
		extrn __imp_CERT_FindCertBySubjectKeyID:dword
					; DATA XREF: CERT_FindCertBySubjectKeyIDr
		extrn __imp_CERT_FindCertByIssuerAndSN:dword
					; DATA XREF: CERT_FindCertByIssuerAndSNr
		extrn __imp_CERT_ImportCerts:dword ; DATA XREF:	CERT_ImportCertsr
		extrn __imp_CERT_NewCertList:dword ; DATA XREF:	CERT_NewCertListr
		extrn __imp_CERT_AddCertToListTail:dword
					; DATA XREF: CERT_AddCertToListTailr
		extrn __imp_CERT_FilterCertListByUsage:dword
					; DATA XREF: CERT_FilterCertListByUsager
		extrn __imp_CERT_DestroyCertArray:dword	; DATA XREF: CERT_DestroyCertArrayr
		extrn __imp_CERT_DestroyCertList:dword ; DATA XREF: CERT_DestroyCertListr
		extrn __imp_CERT_CertChainFromCert:dword
					; DATA XREF: CERT_CertChainFromCertr
		extrn __imp_CERT_FindCertByDERCert:dword
					; DATA XREF: CERT_FindCertByDERCertr
		extrn __imp_CERT_VerifyCert:dword ; DATA XREF: CERT_VerifyCertr
		extrn __imp_CERT_DestroyCertificateList:dword
					; DATA XREF: CERT_DestroyCertificateListr
		extrn __imp_SECKEY_CopyPrivateKey:dword	; DATA XREF: SECKEY_CopyPrivateKeyr
		extrn __imp_PK11_FindPrivateKeyFromCert:dword
					; DATA XREF: PK11_FindPrivateKeyFromCertr
		extrn __imp_SECKEY_DestroyPrivateKey:dword
					; DATA XREF: SECKEY_DestroyPrivateKeyr
		extrn __imp_CERT_FindSubjectKeyIDExtension:dword
					; DATA XREF: CERT_FindSubjectKeyIDExtensionr
		extrn __imp_SECKEY_DestroySubjectPublicKeyInfo:dword
					; DATA XREF: SECKEY_DestroySubjectPublicKeyInfor
		extrn __imp_SECKEY_CreateSubjectPublicKeyInfo:dword
					; DATA XREF: SECKEY_CreateSubjectPublicKeyInfor
		extrn __imp_CERT_DupCertificate:dword ;	DATA XREF: CERT_DupCertificater
		extrn __imp_CERT_GetCertIssuerAndSN:dword
					; DATA XREF: CERT_GetCertIssuerAndSNr
		extrn __imp_SECKEY_CopyPublicKey:dword ; DATA XREF: SECKEY_CopyPublicKeyr
		extrn __imp_CERT_DestroyCertificate:dword
					; DATA XREF: CERT_DestroyCertificater
		extrn __imp_PK11_ImportPrivateKeyInfo:dword
					; DATA XREF: PK11_ImportPrivateKeyInfor
		extrn __imp_CERT_ExtractPublicKey:dword	; DATA XREF: CERT_ExtractPublicKeyr
		extrn __imp_PK11_CreateContextBySymKey:dword
					; DATA XREF: PK11_CreateContextBySymKeyr
		extrn __imp_PK11_CipherOp:dword	; DATA XREF: PK11_CipherOpr
		extrn __imp_PK11_DestroyContext:dword ;	DATA XREF: PK11_DestroyContextr
		extrn __imp_PK11_FreeSymKey:dword ; DATA XREF: PK11_FreeSymKeyr
		extrn __imp_PK11_ReferenceSymKey:dword ; DATA XREF: PK11_ReferenceSymKeyr
		extrn __imp_PK11_GetKeyStrength:dword ;	DATA XREF: PK11_GetKeyStrengthr
		extrn __imp_NSS_Get_CERT_TimeChoiceTemplate:dword
					; DATA XREF: NSS_Get_CERT_TimeChoiceTemplater
		extrn __imp_PK11_PubUnwrapSymKey:dword ; DATA XREF: PK11_PubUnwrapSymKeyr
		extrn __imp_SECKEY_GetPublicKeyType:dword
					; DATA XREF: SECKEY_GetPublicKeyTyper
		extrn __imp_SECKEY_PublicKeyStrength:dword
					; DATA XREF: SECKEY_PublicKeyStrengthr
		extrn __imp_PK11_PubWrapSymKey:dword ; DATA XREF: PK11_PubWrapSymKeyr
		extrn __imp_PK11_FindCertAndKeyByRecipientList:dword
					; DATA XREF: PK11_FindCertAndKeyByRecipientListr
		extrn __imp_PK11_SetPasswordFunc:dword ; DATA XREF: PK11_SetPasswordFuncr
		extrn __imp_NSS_Get_CERT_IssuerAndSNTemplate:dword
					; DATA XREF: NSS_Get_CERT_IssuerAndSNTemplater
		extrn __imp_PK11_TraverseCertsForNicknameInSlot:dword
					; DATA XREF: PK11_TraverseCertsForNicknameInSlotr

;
; Imports from nssutil3.dll
;
		extrn __imp_SEC_ASN1Encode_Util:dword ;	DATA XREF: SEC_ASN1Encode_Utilr
					; .rdata:10014FB8o
		extrn __imp_SEC_ASN1EncoderAbort_Util:dword
					; DATA XREF: SEC_ASN1EncoderAbort_Utilr
		extrn __imp_SEC_ASN1DecoderAbort_Util:dword
					; DATA XREF: SEC_ASN1DecoderAbort_Utilr
		extrn __imp_ATOB_AsciiToData_Util:dword	; DATA XREF: ATOB_AsciiToData_Utilr
		extrn __imp_ATOB_ConvertAsciiToItem_Util:dword
					; DATA XREF: ATOB_ConvertAsciiToItem_Utilr
		extrn __imp_SECITEM_DupItem_Util:dword ; DATA XREF: SECITEM_DupItem_Utilr
		extrn __imp_PORT_ZFree_Util:dword ; DATA XREF: PORT_ZFree_Utilr
		extrn __imp_SEC_ASN1DecoderClearNotifyProc_Util:dword
					; DATA XREF: SEC_ASN1DecoderClearNotifyProc_Utilr
		extrn __imp_PORT_ArenaStrdup_Util:dword	; DATA XREF: PORT_ArenaStrdup_Utilr
		extrn __imp_NSS_Get_SEC_BMPStringTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_BMPStringTemplate_Utilr
		extrn __imp_DER_GetInteger_Util:dword ;	DATA XREF: DER_GetInteger_Utilr
		extrn __imp_SEC_ASN1DecodeItem_Util:dword
					; DATA XREF: SEC_ASN1DecodeItem_Utilr
		extrn __imp_SGN_CopyDigestInfo_Util:dword
					; DATA XREF: SGN_CopyDigestInfo_Utilr
		extrn __imp_PORT_UCS2_UTF8Conversion_Util:dword
					; DATA XREF: PORT_UCS2_UTF8Conversion_Utilr
		extrn __imp_PORT_Realloc_Util:dword ; DATA XREF: PORT_Realloc_Utilr
		extrn __imp_SECITEM_CompareItem_Util:dword
					; DATA XREF: SECITEM_CompareItem_Utilr
		extrn __imp_SGN_DestroyDigestInfo_Util:dword
					; DATA XREF: SGN_DestroyDigestInfo_Utilr
		extrn __imp_PORT_UCS2_ASCIIConversion_Util:dword
					; DATA XREF: PORT_UCS2_ASCIIConversion_Utilr
		extrn __imp_SGN_CreateDigestInfo_Util:dword
					; DATA XREF: SGN_CreateDigestInfo_Utilr
		extrn __imp_SECITEM_ZfreeItem_Util:dword
					; DATA XREF: SECITEM_ZfreeItem_Utilr
		extrn __imp_NSS_Get_SEC_PointerToAnyTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_PointerToAnyTemplate_Utilr
		extrn __imp_NSS_Get_sgn_DigestInfoTemplate_Util:dword
					; DATA XREF: NSS_Get_sgn_DigestInfoTemplate_Utilr
		extrn __imp_SECITEM_ItemsAreEqual_Util:dword
					; DATA XREF: SECITEM_ItemsAreEqual_Utilr
		extrn __imp_SECOID_CompareAlgorithmID_Util:dword
					; DATA XREF: SECOID_CompareAlgorithmID_Utilr
		extrn __imp_DER_EncodeTimeChoice_Util:dword
					; DATA XREF: DER_EncodeTimeChoice_Utilr
		extrn __imp_PORT_Strdup_Util:dword ; DATA XREF:	PORT_Strdup_Utilr
		extrn __imp_DER_DecodeTimeChoice_Util:dword
					; DATA XREF: DER_DecodeTimeChoice_Utilr
		extrn __imp_SECOID_FindOIDTag_Util:dword
					; DATA XREF: SECOID_FindOIDTag_Utilr
		extrn __imp_SEC_ASN1DecodeInteger_Util:dword
					; DATA XREF: SEC_ASN1DecodeInteger_Utilr
		extrn __imp_SEC_QuickDERDecodeItem_Util:dword
					; DATA XREF: SEC_QuickDERDecodeItem_Utilr
		extrn __imp_SEC_ASN1EncoderClearNotifyProc_Util:dword
					; DATA XREF: SEC_ASN1EncoderClearNotifyProc_Utilr
		extrn __imp_SEC_ASN1EncoderSetTakeFromBuf_Util:dword
					; DATA XREF: SEC_ASN1EncoderSetTakeFromBuf_Utilr
		extrn __imp_SEC_ASN1EncoderStart_Util:dword
					; DATA XREF: SEC_ASN1EncoderStart_Utilr
		extrn __imp_SEC_ASN1EncoderSetStreaming_Util:dword
					; DATA XREF: SEC_ASN1EncoderSetStreaming_Utilr
		extrn __imp_SEC_ASN1EncoderSetNotifyProc_Util:dword
					; DATA XREF: SEC_ASN1EncoderSetNotifyProc_Utilr
		extrn __imp_SEC_ASN1EncoderClearTakeFromBuf_Util:dword
					; DATA XREF: SEC_ASN1EncoderClearTakeFromBuf_Utilr
		extrn __imp_SEC_ASN1EncoderClearStreaming_Util:dword
					; DATA XREF: SEC_ASN1EncoderClearStreaming_Utilr
		extrn __imp_SEC_ASN1EncoderFinish_Util:dword
					; DATA XREF: SEC_ASN1EncoderFinish_Utilr
		extrn __imp_SEC_ASN1EncoderUpdate_Util:dword
					; DATA XREF: SEC_ASN1EncoderUpdate_Utilr
		extrn __imp_SECOID_DestroyAlgorithmID_Util:dword
					; DATA XREF: SECOID_DestroyAlgorithmID_Utilr
		extrn __imp_PORT_NewArena_Util:dword ; DATA XREF: PORT_NewArena_Utilr
		extrn __imp_PORT_FreeArena_Util:dword ;	DATA XREF: PORT_FreeArena_Utilr
		extrn __imp_SEC_ASN1EncodeInteger_Util:dword
					; DATA XREF: SEC_ASN1EncodeInteger_Utilr
		extrn __imp_SEC_ASN1DecoderSetFilterProc_Util:dword
					; DATA XREF: SEC_ASN1DecoderSetFilterProc_Utilr
		extrn __imp_SEC_ASN1DecoderClearFilterProc_Util:dword
					; DATA XREF: SEC_ASN1DecoderClearFilterProc_Utilr
		extrn __imp_SEC_ASN1DecoderStart_Util:dword
					; DATA XREF: SEC_ASN1DecoderStart_Utilr
		extrn __imp_SEC_ASN1DecoderSetNotifyProc_Util:dword
					; DATA XREF: SEC_ASN1DecoderSetNotifyProc_Utilr
		extrn __imp_SEC_ASN1DecoderUpdate_Util:dword
					; DATA XREF: SEC_ASN1DecoderUpdate_Utilr
		extrn __imp_SEC_ASN1DecoderFinish_Util:dword
					; DATA XREF: SEC_ASN1DecoderFinish_Utilr
		extrn __imp_PORT_GetError_Util:dword ; DATA XREF: PORT_GetError_Utilr
		extrn __imp_PORT_Alloc_Util:dword ; DATA XREF: PORT_Alloc_Utilr
		extrn __imp_SECOID_CopyAlgorithmID_Util:dword
					; DATA XREF: SECOID_CopyAlgorithmID_Utilr
		extrn __imp_SECOID_SetAlgorithmID_Util:dword
					; DATA XREF: SECOID_SetAlgorithmID_Utilr
		extrn __imp_SECOID_GetAlgorithmTag_Util:dword
					; DATA XREF: SECOID_GetAlgorithmTag_Utilr
		extrn __imp_SECITEM_AllocItem_Util:dword
					; DATA XREF: SECITEM_AllocItem_Utilr
		extrn __imp_PORT_Free_Util:dword ; DATA	XREF: PORT_Free_Utilr
		extrn __imp_PORT_ZAlloc_Util:dword ; DATA XREF:	PORT_ZAlloc_Utilr
		extrn __imp_SEC_ASN1EncodeItem_Util:dword
					; DATA XREF: SEC_ASN1EncodeItem_Utilr
		extrn __imp_NSS_Get_SEC_AnyTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_AnyTemplate_Utilr
		extrn __imp_NSS_Get_SEC_IA5StringTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_IA5StringTemplate_Utilr
		extrn __imp_NSS_Get_SEC_ObjectIDTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_ObjectIDTemplate_Utilr
		extrn __imp_SECOID_FindOID_Util:dword ;	DATA XREF: SECOID_FindOID_Utilr
		extrn __imp_PORT_SetError_Util:dword ; DATA XREF: PORT_SetError_Utilr
		extrn __imp_PORT_ArenaMark_Util:dword ;	DATA XREF: PORT_ArenaMark_Utilr
		extrn __imp_SECOID_FindOIDByTag_Util:dword
					; DATA XREF: SECOID_FindOIDByTag_Utilr
		extrn __imp_SECITEM_CopyItem_Util:dword	; DATA XREF: SECITEM_CopyItem_Utilr
		extrn __imp_SECITEM_ArenaDupItem_Util:dword
					; DATA XREF: SECITEM_ArenaDupItem_Utilr
		extrn __imp_PORT_ArenaRelease_Util:dword
					; DATA XREF: PORT_ArenaRelease_Utilr
		extrn __imp_PORT_ArenaUnmark_Util:dword	; DATA XREF: PORT_ArenaUnmark_Utilr
		extrn __imp_NSS_Get_SECOID_AlgorithmIDTemplate_Util:dword
					; DATA XREF: NSS_Get_SECOID_AlgorithmIDTemplate_Utilr
		extrn __imp_NSS_Get_SEC_BitStringTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_BitStringTemplate_Utilr
		extrn __imp_NSS_Get_SEC_OctetStringTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_OctetStringTemplate_Utilr
		extrn __imp_NSS_Get_SEC_PointerToOctetStringTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_PointerToOctetStringTemplate_Utilr
		extrn __imp_NSS_Get_SEC_SetOfAnyTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_SetOfAnyTemplate_Utilr
		extrn __imp_PORT_ArenaAlloc_Util:dword ; DATA XREF: PORT_ArenaAlloc_Utilr
		extrn __imp_PORT_ArenaGrow_Util:dword ;	DATA XREF: PORT_ArenaGrow_Utilr
		extrn __imp_PORT_ArenaZAlloc_Util:dword	; DATA XREF: PORT_ArenaZAlloc_Utilr
		extrn __imp_SECITEM_FreeItem_Util:dword	; DATA XREF: SECITEM_FreeItem_Utilr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10013390h
dword_10013390	dd 0			; DATA XREF: sub_10012048+B9o
dword_10013394	dd 0			; DATA XREF: sub_10012048+B4o
dword_10013398	dd 0			; DATA XREF: sub_10012048+96o
		dd offset sub_10012026
dword_100133A0	dd 2 dup(0)		; DATA XREF: sub_10012048:loc_100120D9o
off_100133A8	dd offset NSS_Get_CERT_IssuerAndSNTemplate ; DATA XREF:	.rdata:100134D0o
					; .rdata:100136A0o ...
off_100133AC	dd offset NSS_Get_CERT_SetOfSignedCrlTemplate ;	DATA XREF: .rdata:100135D0o
					; .rdata:10013630o
off_100133B0	dd offset NSS_Get_SECOID_AlgorithmIDTemplate_Util
					; DATA XREF: .rdata:10013480o
					; .rdata:10013520o ...
off_100133B4	dd offset NSS_Get_SEC_BitStringTemplate_Util ; DATA XREF: .rdata:10013670o
					; .rdata:10013790o
off_100133B8	dd offset NSS_Get_SEC_OctetStringTemplate_Util ; DATA XREF: .rdata:10013490o
					; .rdata:100134C0o ...
off_100133BC	dd offset NSS_Get_SEC_PointerToOctetStringTemplate_Util
					; DATA XREF: .rdata:10013440o
					; .rdata:100136B0o
off_100133C0	dd offset NSS_Get_SEC_SetOfAnyTemplate_Util ; DATA XREF: .rdata:100135C0o
					; .rdata:10013620o
off_100133C4	dd offset sub_100011E0	; DATA XREF: .rdata:100133F0o
dword_100133C8	dd 40010h, 2 dup(0)	; DATA XREF: NSS_CMSDecoder_Start+56o
					; NSS_CMSEncoder_Start+F5o ...
		dd 64h,	6, 3 dup(0)
		dd 443A0h, 0Ch
		dd offset off_100133C4
		dd 5 dup(0)
		dd 1000h, 0
		dd offset dword_100133C8
		align 8
dword_10013418	dd 40010h, 2 dup(0)	; DATA XREF: .rdata:100135B0o
					; .rdata:10013A70o ...
		dd 44h,	6, 3 dup(0)
		dd 443A0h, 2Ch
		dd offset off_100133BC
		dd 5 dup(0)
dword_10013458	dd 40010h, 2 dup(0)	; DATA XREF: .rdata:10013A00o
					; .rdata:10013AD0o
		dd 44h,	6, 3 dup(0)
		dd 4800h, 14h
		dd offset off_100133B0
		align 8
		dd 45180h, 2Ch
		dd offset off_100133B8
		dd 5 dup(0)
dword_100134A8	dd 100000h, 2 dup(0)	; DATA XREF: .rdata:10013510o
		dd 8, 5080h, 4
		dd offset off_100133B8
		dd 1, 5000h, 4
		dd offset off_100133A8
		dd 5 dup(0)
dword_100134E8	dd 10h,	2 dup(0)	; DATA XREF: sub_100055B0+11Co
					; .rdata:100135E0o
		dd 80h,	2, 3 dup(0)
		dd 800h, 0Ch
		dd offset dword_100134A8
		dd 0
		dd 4800h, 14h
		dd offset off_100133B0
		align 8
		dd 1A0h, 2Ch
		dd offset dword_10013B70
		dd 0
		dd 4800h, 30h
		dd offset off_100133B0
		align 8
		dd 4, 48h, 2 dup(0)
		dd 1A1h, 54h
		dd offset dword_10013B70
		dd 5 dup(0)
dword_10013578	dd 40010h, 2 dup(0)	; DATA XREF: sub_100073A0:loc_100073B3o
					; .rdata:10013600o
		dd 74h,	2, 3 dup(0)
		dd 6011h, 0Ch
		dd offset off_100133B0
		dd 0
		dd 800h, 10h
		dd offset dword_10013418
		align 8
		dd 41A0h, 54h
		dd offset off_100133C0
		align 8
		dd 41A1h, 58h
		dd offset off_100133AC
		align 8
		dd 2011h, 5Ch
		dd offset dword_100134E8
		dd 5 dup(0)
dword_100135F8	dd 1000h, 0		; DATA XREF: sub_100011E0:loc_10001216o
		dd offset dword_10013578
		align 8
dword_10013608	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100139E0o
		dd 0Ch,	41A0h, 0
		dd offset off_100133C0
		align 8
		dd 41A1h, 4
		dd offset off_100133AC
		dd 5 dup(0)
dword_10013648	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100136C0o
		dd 24h,	4800h, 0
		dd offset off_100133B0
		dd 0
		dd 4800h, 18h
		dd offset off_100133B4
		dd 5 dup(0)
dword_10013688	dd 100000h, 2 dup(0)	; DATA XREF: .rdata:100137D0o
		dd 28h,	5000h, 4
		dd offset off_100133A8
		align 8
		dd 42A1h, 4
		dd offset off_100133BC
		dd 1, 2A2h, 4
		dd offset dword_10013648
		dd 2, 4	dup(0)
dword_100136D8	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013750o
					; .rdata:10013CF8o
		dd 0Ch,	4, 3 dup(0)
		dd 104h, 4, 2 dup(0)
		dd 104h, 8, 6 dup(0)
dword_10013728	dd 100000h, 2 dup(0)	; DATA XREF: .rdata:10013780o
		dd 10h,	5000h, 4
		dd offset off_100133A8
		align 8
		dd 0A0h, 4
		dd offset dword_100136D8
		dd 1, 4	dup(0)
dword_10013768	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013800o
		dd 1Ch,	800h, 0
		dd offset dword_10013728
		dd 0
		dd 4800h, 10h
		dd offset off_100133B4
		dd 5 dup(0)
dword_100137A8	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013980o
		dd 54h,	2, 3 dup(0)
		dd 2A0h, 0Ch
		dd offset dword_10013688
		align 8
		dd 43A1h, 34h
		dd offset off_100133B8
		dd 0
		dd 4800h, 38h
		dd offset off_100133B0
		align 8
		dd 2010h, 50h
		dd offset dword_10013768
		dd 5 dup(0)
dword_10013818	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013890o
		dd 14h,	4, 3 dup(0)
		dd 104h, 0Ch, 2	dup(0)
		dd 104h, 10h, 6	dup(0)
dword_10013868	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013990o
		dd 44h,	2, 3 dup(0)
		dd 800h, 0Ch
		dd offset dword_10013818
		dd 0
		dd 4800h, 20h
		dd offset off_100133B0
		align 8
		dd 4, 38h, 6 dup(0)
dword_100138C8	dd 100000h, 2 dup(0)	; DATA XREF: .rdata:10013930o
		dd 8, 5080h, 4
		dd offset off_100133B8
		dd 1, 5000h, 4
		dd offset off_100133A8
		dd 5 dup(0)
dword_10013908	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100139A0o
		dd 38h,	2, 3 dup(0)
		dd 800h, 0Ch
		dd offset dword_100138C8
		dd 0
		dd 4800h, 14h
		dd offset off_100133B0
		align 8
		dd 4, 2Ch, 6 dup(0)
dword_10013968	dd 100000h, 2 dup(0)	; DATA XREF: sub_10003A10+156o
					; sub_10004140+7Eo ...
		dd 60h,	2A1h, 4
		dd offset dword_100137A8
		dd 1, 2A2h, 4
		dd offset dword_10013868
		dd 2, 800h, 4
		dd offset dword_10013908
		dd 5 dup(0)
dword_100139B8	dd 40010h, 2 dup(0)	; DATA XREF: sub_100073A0:loc_100073B9o
					; .rdata:10013A30o
		dd 60h,	2, 3 dup(0)
		dd 11A0h, 0Ch
		dd offset dword_10013608
		align 8
		dd 2011h, 10h
		dd offset dword_10013968
		dd 0
		dd 800h, 14h
		dd offset dword_10013458
		align 8
		dd 1A1h, 58h
		dd offset dword_10013B70
		dd 5 dup(0)
dword_10013A28	dd 1000h, 0		; DATA XREF: sub_100011E0:loc_1000121Co
		dd offset dword_100139B8
		align 8
dword_10013A38	dd 40010h, 2 dup(0)	; DATA XREF: sub_100073A0:loc_100073C5o
					; .rdata:10013AA0o
		dd 84h,	2, 3 dup(0)
		dd 4800h, 0Ch
		dd offset off_100133B0
		dd 0
		dd 800h, 24h
		dd offset dword_10013418
		align 8
		dd 4, 68h, 6 dup(0)
dword_10013A98	dd 1000h, 0		; DATA XREF: sub_100011E0:loc_10001222o
		dd offset dword_10013A38
		align 8
dword_10013AA8	dd 40010h, 2 dup(0)	; DATA XREF: sub_100073A0:loc_100073BFo
					; .rdata:10013B00o
		dd 58h,	2, 3 dup(0)
		dd 800h, 0Ch
		dd offset dword_10013458
		align 8
		dd 1A1h, 50h
		dd offset dword_10013B70
		dd 5 dup(0)
dword_10013AF8	dd 1000h, 0		; DATA XREF: sub_100011E0:loc_10001228o
		dd offset dword_10013AA8
		align 8
dword_10013B08	dd 800h, 0		; DATA XREF: NSS_Get_NSSCMSGenericWrapperDataTemplateo
					; .rdata:10013B20o
		dd offset dword_10013418
		align 8
dword_10013B18	dd 1000h, 0		; DATA XREF: NSS_Get_NSS_PointerToCMSGenericWrapperDataTemplateo
		dd offset dword_10013B08
		align 8
off_10013B28	dd offset sub_10001370	; DATA XREF: .rdata:10013B58o
		align 10h
dword_10013B30	dd 10h,	2 dup(0)	; DATA XREF: sub_100014B0+6o
					; .rdata:10013B78o
		dd 18h,	6, 3 dup(0)
		dd 6011h, 0Ch
		dd offset off_10013B28
		dd 5 dup(0)
dword_10013B70	dd 2011h, 0		; DATA XREF: sub_10001490+Co
					; .rdata:10013530o ...
		dd offset dword_10013B30
		align 10h
dword_10013B80	dd 0			; DATA XREF: sub_10002350+28o
dword_10013B84	dd 8030h		; DATA XREF: NSS_CMSDecoder_Update+2Ao
dword_10013B88	dd 7 dup(0)		; DATA XREF: sub_10004140+26o
					; sub_10004140+2CDo ...
aUnknown	db 'Unknown',0          ; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074FCo
aProcessingerro	db 'ProcessingError',0  ; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074F6o
aMalformedsigna	db 'MalformedSignature',0
					; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074F0o
		align 10h
aSignaturealg_0	db 'SignatureAlgorithmUnsupported',0
					; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074EAo
		align 10h
aSignaturealgor	db 'SignatureAlgorithmUnknown',0
					; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074E4o
		align 4
aSigningcertn_0	db 'SigningCertNotTrusted',0
					; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074DEo
		align 4
aSigningcertnot	db 'SigningCertNotFound',0
					; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074D8o
aDigestmismatch	db 'DigestMismatch',0   ; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074D2o
		align 4
aBadsignature	db 'BadSignature',0     ; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074CCo
		align 4
aGoodsignature	db 'GoodSignature',0    ; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074C6o
		align 4
aUnverified	db 'Unverified',0       ; DATA XREF: NSS_CMSUtil_VerificationStatusToString:loc_100074C0o
		align 8
off_10013C78	dd offset NSS_Get_CERT_IssuerAndSNTemplate ; DATA XREF:	.rdata:10013CE8o
off_10013C7C	dd offset NSS_Get_SEC_OctetStringTemplate_Util ; DATA XREF: .rdata:10013D08o
dword_10013C80	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013CC8o
		dd 1Ch,	6, 3 dup(0)
		dd 500h, 0Ch, 6	dup(0)
dword_10013CC0	dd 2010h, 0		; DATA XREF: sub_100077F0+138o
					; sub_10007BA0+94o
		dd offset dword_10013C80
		align 10h
dword_10013CD0	dd 100000h, 2 dup(0)	; DATA XREF: sub_10007C90+41o
					; sub_10007D70+25o
		dd 8, 50A0h, 4
		dd offset off_10013C78
		align 10h
		dd 10A1h, 4
		dd offset dword_100136D8
		dd 1, 50A2h, 4
		dd offset off_10013C7C
		dd 2, 4	dup(0)
		dd 7
a3_17_1BasicEcc	db '3.17.1 Basic ECC',0 ; DATA XREF: NSSSMIME_GetVersiono
		align 4
byte_10013D38	db 24h			; DATA XREF: NSSSMIME_VersionCheck+8r
aHeaderNss3_17_	db 'Header: NSS 3.17.1 Basic ECC  Sep 27 2014 21:03:57 $',0
		align 10h
byte_10013D70	db 40h			; DATA XREF: NSSSMIME_VersionCheck+1r
aNss3_17_1Basic	db '(#)NSS 3.17.1 Basic ECC  Sep 27 2014 21:03:57',0
		align 10h
off_10013DA0	dd offset NSS_Get_SECKEY_PrivateKeyInfoTemplate
					; DATA XREF: .rdata:10014120o
off_10013DA4	dd offset NSS_Get_sgn_DigestInfoTemplate_Util ;	DATA XREF: .rdata:10013E58o
					; .rdata:10013F08o ...
off_10013DA8	dd offset sub_10007FF0	; DATA XREF: .rdata:10013ED8o
					; .rdata:10013F88o
off_10013DAC	dd offset sub_10007ED0	; DATA XREF: .rdata:10014008o
		dd 10h,	2 dup(0)
		dd 3Ch,	6, 8, 2	dup(0)
		dd 400h, 18h, 6	dup(0)
dword_10013DF0	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013E38o
		dd 34h,	6, 8, 2	dup(0)
		dd 400h, 18h, 6	dup(0)
		dd 2011h, 4
		dd offset dword_10013DF0
		align 10h
dword_10013E40	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013EC8o
		dd 5Ch,	6011h, 4
		dd offset off_10013DA4
		align 10h
		dd 101h, 8, 2 dup(0)
		dd 13h,	14h, 2 dup(0)
		dd 500h, 40h, 6	dup(0)
dword_10013EA0	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014088o
		dd 90h,	6, 8, 2	dup(0)
		dd 800h, 14h
		dd offset dword_10013E40
		align 10h
		dd 42A0h, 70h
		dd offset off_10013DA8
		dd 5 dup(0)
dword_10013EF0	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013F78o
					; .rdata:10014110o
		dd 5Ch,	6011h, 4
		dd offset off_10013DA4
		align 10h
		dd 101h, 8, 2 dup(0)
		dd 1Eh,	4Ch, 2 dup(0)
		dd 500h, 40h, 6	dup(0)
dword_10013F50	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014048o
		dd 90h,	6, 8, 2	dup(0)
		dd 800h, 14h
		dd offset dword_10013EF0
		align 10h
		dd 42A0h, 70h
		dd offset off_10013DA8
		align 20h
		dd 10h,	2 dup(0)
		dd 20h,	6, 8, 2	dup(0)
		dd 0A0h, 14h, 6	dup(0)
dword_10013FE0	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014058o
					; .rdata:100140F0o ...
		dd 3Ch,	6, 8, 2	dup(0)
		dd 5000h, 14h
		dd offset off_10013DAC
		align 10h
		dd 11Eh, 30h, 6	dup(0)
dword_10014030	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014078o
					; .rdata:100144C8o
		dd 14h,	2011h, 4
		dd offset dword_10013F50
		align 10h
		dd 2011h, 8
		dd offset dword_10013FE0
		dd 5 dup(0)
		dd 2011h, 4
		dd offset dword_10014030
		align 10h
dword_10014080	dd 2011h, 4		; DATA XREF: .rdata:10014538o
		dd offset dword_10013EA0
		align 10h
off_10014090	dd offset sub_10007E70	; DATA XREF: .rdata:100140C0o
off_10014094	dd offset sub_10007F30	; DATA XREF: .rdata:10014238o
dword_10014098	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100140E0o
		dd 3Ch,	6, 8, 2	dup(0)
		dd 42A0h, 14h
		dd offset off_10014090
		dd 5 dup(0)
		dd 2011h, 4
		dd offset dword_10014098
		align 8
		dd 2011h, 4
		dd offset dword_10013FE0
		align 8
dword_100140F8	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014150o
		dd 0B4h, 800h, 4
		dd offset dword_10013EF0
		dd 0
		dd 4800h, 60h
		dd offset off_10013DA0
		dd 5 dup(0)
dword_10014138	dd 10h,	2 dup(0)	; DATA XREF: sub_10007ED0:loc_10007F25o
					; .rdata:10014568o
		dd 0Ch,	2011h, 4
		dd offset dword_100140F8
		dd 5 dup(0)
dword_10014168	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100145A8o
		dd 58h,	800h, 4
		dd offset dword_10014A10
		dd 0
		dd 4800h, 2Ch
		dd offset off_10013DA4
		dd 5 dup(0)
dword_100141A8	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100145B8o
		dd 58h,	800h, 4
		dd offset dword_10014A10
		dd 5 dup(0)
dword_100141D8	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100145C8o
		dd 58h,	16h, 4,	6 dup(0)
off_10014208	dd offset sub_10007F90	; DATA XREF: .rdata:10014278o
		align 10h
dword_10014210	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100142B8o
		dd 34h,	6, 8, 2	dup(0)
		dd 42A0h, 14h
		dd offset off_10014094
		dd 5 dup(0)
dword_10014250	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014298o
		dd 34h,	6, 8, 2	dup(0)
		dd 42A0h, 14h
		dd offset off_10014208
		dd 5 dup(0)
dword_10014290	dd 2011h, 4		; DATA XREF: sub_10007ED0:loc_10007F1Eo
					; .rdata:10014588o
		dd offset dword_10014250
		align 10h
dword_100142A0	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014578o
		dd 0Ch,	2011h, 4
		dd offset dword_10014210
		dd 5 dup(0)
dword_100142D0	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014348o
		dd 20h,	6, 8, 2	dup(0)
		dd 280h, 14h, 6	dup(0)
dword_10014310	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014378o
		dd 48h,	1Eh, 3Ch, 2 dup(0)
		dd 400h, 10h, 2	dup(0)
		dd 900h, 1Ch
		dd offset dword_100142D0
		align 20h
dword_10014360	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100143A8o
		dd 48h,	880h, 4
		dd offset dword_10014310
		align 10h
		dd 881h, 4Ch
		dd offset dword_10013FE0
		align 20h
dword_100143A0	dd 2011h, 4		; DATA XREF: sub_10007ED0:loc_10007F17o
					; .rdata:10014598o
		dd offset dword_10014360
		align 10h
dword_100143B0	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014408o
		dd 9Ch,	4800h, 0
		dd offset off_10013DA4
		align 10h
		dd 3, 28h, 6 dup(0)
		dd 10h,	2 dup(0)
		dd 9Ch,	1A0h, 4
		dd offset dword_100143B0
		align 10h
		dd 0A1h, 38h
		dd offset dword_10014A10
		dd 5 dup(0)
		dd 10h,	2 dup(0)
		dd 9Ch,	41A0h, 64h
		dd offset off_10013DA4
		align 10h
		dd 103h, 8Ch, 2	dup(0)
		dd 0A1h, 38h
		dd offset dword_10014A10
		align 20h
		dd 10h,	2 dup(0)
		dd 7Ch,	102h, 4, 2 dup(0)
		dd 106h, 14h, 2	dup(0)
		dd 103h, 20h, 2	dup(0)
		dd 2111h, 30h
		dd offset dword_10014030
		dd 0
		dd 1000h, 38h
		dd offset dword_10014A10
		dd 5 dup(0)
		dd 10h,	2 dup(0)
		dd 7Ch,	102h, 4, 2 dup(0)
		dd 102h, 14h, 2	dup(0)
		dd 3, 20h, 2 dup(0)
		dd 1A0h, 44h
		dd offset dword_10014080
		align 10h
		dd 0A1h, 50h
		dd offset dword_10014A10
		align 20h
dword_10014560	dd 1000h, 0		; DATA XREF: sub_10007E70:loc_10007EC5o
		dd offset dword_10014138
		align 10h
dword_10014570	dd 1000h, 0		; DATA XREF: sub_10007E70:loc_10007EBEo
		dd offset dword_100142A0
		dd 0
		dd 1000h, 0
		dd offset dword_10014290
		align 10h
dword_10014590	dd 1000h, 0		; DATA XREF: sub_10007E70:loc_10007EB7o
		dd offset dword_100143A0
		align 10h
dword_100145A0	dd 1000h, 0		; DATA XREF: sub_10007F30:loc_10007F7Bo
		dd offset dword_10014168
		align 10h
dword_100145B0	dd 1000h, 0		; DATA XREF: sub_10007F90:loc_10007FDBo
		dd offset dword_100141A8
		align 10h
dword_100145C0	dd 1000h, 0		; DATA XREF: sub_10007F30:loc_10007F74o
					; sub_10007F90:loc_10007FD4o
		dd offset dword_100141D8
		align 10h
off_100145D0	dd offset NSS_Get_SEC_AnyTemplate_Util ; DATA XREF: .rdata:10014840o
					; .rdata:10014850o ...
off_100145D4	dd offset NSS_Get_sgn_DigestInfoTemplate_Util ;	DATA XREF: .rdata:10014800o
		dd 41000h, 0
		dd offset dword_10014A10
		align 8
off_100145E8	dd offset sub_100084D0	; DATA XREF: .rdata:10014670o
off_100145EC	dd offset sub_10008530	; DATA XREF: .rdata:10014620o
off_100145F0	dd offset sub_10008400	; DATA XREF: .rdata:10014750o
off_100145F4	dd offset sub_100085A0	; DATA XREF: .rdata:10014710o
dword_100145F8	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014640o
		dd 18h,	6, 3 dup(0)
		dd 42A0h, 0Ch
		dd offset off_100145EC
		dd 5 dup(0)
dword_10014638	dd 1000h, 0		; DATA XREF: sub_10008400:loc_1000844Co
		dd offset dword_100145F8
		align 8
dword_10014648	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014690o
		dd 18h,	6, 3 dup(0)
		dd 5000h, 0Ch
		dd offset off_100145E8
		dd 5 dup(0)
dword_10014688	dd 1000h, 0		; DATA XREF: sub_10008400:loc_10008452o
		dd offset dword_10014648
		align 8
dword_10014698	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100146E0o
		dd 18h,	6, 3 dup(0)
		dd 400h, 0Ch, 6	dup(0)
dword_100146D8	dd 1000h, 0		; DATA XREF: sub_10008400:loc_10008458o
		dd offset dword_10014698
		align 8
dword_100146E8	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014760o
		dd 10h,	6, 3 dup(0)
		dd 6011h, 0Ch
		dd offset off_100145F4
		dd 5 dup(0)
dword_10014728	dd 40010h, 2 dup(0)	; DATA XREF: .text:1000C53Do
					; .rdata:10014780o
		dd 50h,	6, 3 dup(0)
		dd 442A0h, 0Ch
		dd offset off_100145F0
		align 8
		dd 2111h, 10h
		dd offset dword_100146E8
		dd 5 dup(0)
dword_10014778	dd 42010h, 0		; DATA XREF: sub_10009B90+A3o
					; .rdata:10014790o
		dd offset dword_10014728
		align 8
dword_10014788	dd 1000h, 0		; DATA XREF: sub_10008400+7Ao
		dd offset dword_10014778
		align 8
dword_10014798	dd 40010h, 2 dup(0)	; DATA XREF: SEC_PKCS12Encode+4Ao
					; SEC_PKCS12DecoderStart+AAo
		dd 68h,	102h, 3	dup(0)
		dd 40400h, 10h,	2 dup(0)
		dd 40400h, 5Ch,	6 dup(0)
dword_100147E8	dd 10h,	2 dup(0)	; DATA XREF: sub_10009CE0+DDo
					; SEC_PKCS12DecoderVerify+46o
		dd 40h,	4800h, 0
		dd offset off_100145D4
		align 8
		dd 4, 28h, 2 dup(0)
		dd 102h, 34h, 6	dup(0)
dword_10014838	dd 46010h, 4		; DATA XREF: SEC_PKCS12Encode+110o
					; sub_1000C7E0+14o
		dd offset off_100145D0
		align 8
dword_10014848	dd 46010h, 0		; DATA XREF: .rdata:10014860o
		dd offset off_100145D0
		align 8
dword_10014858	dd 2A0h, 4		; DATA XREF: sub_1000C5C0+BBo
		dd offset dword_10014848
		align 8
dword_10014868	dd 46010h, 4		; DATA XREF: sub_1000C5C0+C2o
		dd offset off_100145D0
		align 8
off_10014878	dd offset NSS_Get_SEC_AnyTemplate_Util ; DATA XREF: .rdata:10014908o
					; .rdata:10014948o ...
off_1001487C	dd offset NSS_Get_SEC_SetOfAnyTemplate_Util ; DATA XREF: .rdata:10014928o
					; .rdata:10014938o
off_10014880	dd offset sub_1000CEC0	; DATA XREF: .rdata:100148C8o
aBeginCertifica	db '-----BEGIN CERTIFICATE-----',0 ; DATA XREF: CERT_DecodeCertPackage+232o
dword_100148A0	dd 10h,	2 dup(0)	; DATA XREF: sub_1000CF20+3Bo
					; sub_1000CFF0+43o ...
		dd 14h,	6, 4, 2	dup(0)
		dd 43A0h, 10h
		dd offset off_10014880
		align 20h
dword_100148E0	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014968o
		dd 30h,	2, 3 dup(0)
		dd 6011h, 0Ch
		dd offset off_10014878
		dd 0
		dd 800h, 10h
		dd offset dword_100148A0
		align 10h
		dd 41A0h, 24h
		dd offset off_1001487C
		align 10h
		dd 41A1h, 28h
		dd offset off_1001487C
		align 10h
		dd 6011h, 2Ch
		dd offset off_10014878
		align 20h
dword_10014960	dd 1000h, 0		; DATA XREF: sub_1000CEC0:loc_1000CF00o
		dd offset dword_100148E0
		align 10h
dword_10014970	dd 6010h, 0		; DATA XREF: sub_1000CFF0+7Do
		dd offset off_10014878
		align 10h
aEndCertificate	db '-----END CERTIFICATE-----',0 ; DATA XREF: CERT_DecodeCertPackage+2B2o
		align 4
dword_1001499C	dd 7D0h			; DATA XREF: sub_100092B0+118r
					; sub_10009770:loc_10009905r ...
off_100149A0	dd offset NSS_Get_CERT_IssuerAndSNTemplate ; DATA XREF:	.rdata:10014A78o
					; .rdata:10014B98o
off_100149A4	dd offset NSS_Get_CERT_SetOfSignedCrlTemplate ;	DATA XREF: .rdata:10014B38o
					; .rdata:10014CE8o
off_100149A8	dd offset NSS_Get_SECOID_AlgorithmIDTemplate_Util
					; DATA XREF: .rdata:10014A88o
					; .rdata:10014AA8o ...
off_100149AC	dd offset NSS_Get_SEC_OctetStringTemplate_Util ; DATA XREF: .rdata:10014C08o
off_100149B0	dd offset NSS_Get_SEC_SetOfAnyTemplate_Util ; DATA XREF: .rdata:10014B28o
					; .rdata:10014CD8o
off_100149B4	dd offset sub_100113F0	; DATA XREF: .rdata:100149E0o
dword_100149B8	dd 10h,	2 dup(0)	; DATA XREF: sub_10011520+BBo
					; .rdata:10014A00o
		dd 18h,	6, 3 dup(0)
		dd 6011h, 0Ch
		dd offset off_100149B4
		dd 5 dup(0)
dword_100149F8	dd 2011h, 0		; DATA XREF: sub_10011500+Co
					; .rdata:10014A98o ...
		dd offset dword_100149B8
		align 8
off_10014A08	dd offset sub_10011730	; DATA XREF: .rdata:10014A38o
		align 10h
dword_10014A10	dd 40010h, 2 dup(0)	; DATA XREF: SEC_PKCS7DecoderStart+A2o
					; SEC_PKCS7EncoderStart+2Bo ...
		dd 28h,	6, 18h,	2 dup(0)
		dd 443A0h, 24h
		dd offset off_10014A08
		dd 5 dup(0)
dword_10014A50	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014B48o
					; .rdata:10014CF8o
		dd 5Ch,	2, 3 dup(0)
		dd 5000h, 0Ch
		dd offset off_100149A0
		dd 0
		dd 4800h, 10h
		dd offset off_100149A8
		align 10h
		dd 1A0h, 28h
		dd offset dword_100149F8
		dd 0
		dd 4800h, 2Ch
		dd offset off_100149A8
		align 10h
		dd 4, 44h, 2 dup(0)
		dd 1A1h, 50h
		dd offset dword_100149F8
		align 20h
dword_10014AE0	dd 40010h, 2 dup(0)	; DATA XREF: .rdata:10014B68o
		dd 50h,	2, 3 dup(0)
		dd 6011h, 0Ch
		dd offset off_100149A8
		dd 0
		dd 800h, 10h
		dd offset dword_10014A10
		align 10h
		dd 41A0h, 38h
		dd offset off_100149B0
		align 10h
		dd 41A1h, 3Ch
		dd offset off_100149A4
		align 10h
		dd 2011h, 40h
		dd offset dword_10014A50
		align 20h
dword_10014B60	dd 1000h, 0		; DATA XREF: sub_10011730:loc_10011766o
		dd offset dword_10014AE0
		align 10h
dword_10014B70	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014C48o
					; .rdata:10014CA8o
		dd 38h,	2, 3 dup(0)
		dd 5000h, 0Ch
		dd offset off_100149A0
		dd 0
		dd 4800h, 10h
		dd offset off_100149A8
		align 10h
		dd 4, 28h, 6 dup(0)
dword_10014BD0	dd 40010h, 2 dup(0)	; DATA XREF: .rdata:10014C58o
					; .rdata:10014CC8o ...
		dd 48h,	6, 4, 2	dup(0)
		dd 4800h, 10h
		dd offset off_100149A8
		align 10h
		dd 44180h, 28h
		dd offset off_100149AC
		align 20h
dword_10014C20	dd 40010h, 2 dup(0)	; DATA XREF: .rdata:10014C78o
		dd 58h,	2, 3 dup(0)
		dd 2011h, 0Ch
		dd offset dword_10014B70
		dd 0
		dd 800h, 10h
		dd offset dword_10014BD0
		dd 5 dup(0)
dword_10014C70	dd 1000h, 0		; DATA XREF: sub_10011730:loc_1001176Co
		dd offset dword_10014C20
		align 10h
dword_10014C80	dd 40010h, 2 dup(0)	; DATA XREF: .rdata:10014D18o
		dd 78h,	2, 3 dup(0)
		dd 2011h, 0Ch
		dd offset dword_10014B70
		align 10h
		dd 6011h, 10h
		dd offset off_100149A8
		dd 0
		dd 800h, 14h
		dd offset dword_10014BD0
		align 10h
		dd 41A0h, 5Ch
		dd offset off_100149B0
		align 10h
		dd 41A1h, 60h
		dd offset off_100149A4
		align 10h
		dd 2011h, 64h
		dd offset dword_10014A50
		dd 5 dup(0)
dword_10014D10	dd 1000h, 0		; DATA XREF: sub_10011730:loc_10011772o
		dd offset dword_10014C80
		align 10h
dword_10014D20	dd 40010h, 2 dup(0)	; DATA XREF: .rdata:10014D88o
		dd 58h,	2, 3 dup(0)
		dd 4800h, 0Ch
		dd offset off_100149A8
		dd 0
		dd 800h, 24h
		dd offset dword_10014A10
		align 10h
		dd 4, 4Ch, 6 dup(0)
dword_10014D80	dd 1000h, 0		; DATA XREF: sub_10011730:loc_10011778o
		dd offset dword_10014D20
		align 10h
dword_10014D90	dd 40010h, 2 dup(0)	; DATA XREF: .rdata:10014DD8o
		dd 54h,	2, 3 dup(0)
		dd 800h, 0Ch
		dd offset dword_10014BD0
		dd 5 dup(0)
dword_10014DD0	dd 1000h, 0		; DATA XREF: sub_10011730:loc_1001177Eo
		dd offset dword_10014D90
		align 10h
		dd 5, 0
dword_10014DE8	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10014E30o
		dd 20h,	6, 8, 2	dup(0)
		dd 500h, 14h, 6	dup(0)
		dd 2010h, 0
		dd offset dword_10014DE8
		dd 2 dup(0)
; struct _EXCEPTION_POINTERS ExceptionInfo
ExceptionInfo	_EXCEPTION_POINTERS <offset dword_10019540, offset dword_10019590>
					; DATA XREF: sub_10012441+C3o
		align 8
		dd 86808006h, 808180h, 86031000h, 80828680h, 45050514h
		dd 85854545h, 585h, 50803030h, 8008080h, 38272800h, 805750h
		dd 30370007h, 88505030h, 20000000h, 80888028h, 80h
aHhhXppwpp	db '```hhh',8,8,7,'xppwpp',8,8,0
		dw 800h
		dd 7000800h, 8,	0
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 2			; SEHandlerCount
___safe_se_handler_table dd rva	sub_10011D90 ; DATA XREF: .rdata:10014EE8o
		dd rva sub_10012761
dword_10014EF8	dd 0FFFFFFFEh, 0	; DATA XREF: DllEntryPoint-25Ao
		dd 0FFFFFFB4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_10012420
		align 8
		dd offset sub_10012230
		dd offset sub_10012244
		dd 0
		dd offset sub_10012272
		dd offset sub_10012286
		align 10h
		dd offset sub_100122B5
		dd offset sub_100122C9
		dd 0
		dd offset sub_100122FA
		dd offset sub_1001230E
		align 8
		dd offset sub_10012329
		dd offset sub_1001233D
		dd 0
		dd offset sub_1001235E
		dd offset sub_10012372
		align 10h
		dd offset sub_100123A3
		dd offset sub_100123B7
		dd 0
		dd offset sub_100123EA
		dd offset sub_100123FE
		align 8
stru_10014F78	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_10012684+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10012684
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_100126CA	; ScopeRecord.FilterFunc
		dd offset loc_100126DE	; ScopeRecord.HandlerFunc
__IMPORT_DESCRIPTOR_nss3 dd rva	off_100150D0 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aNss3_dll	; DLL Name
		dd rva __imp_PK11_GetInternalKeySlot ; Import Address Table
__IMPORT_DESCRIPTOR_nssutil3 dd	rva off_10015288 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aNssutil3_dll	; DLL Name
		dd rva __imp_SEC_ASN1Encode_Util ; Import Address Table
__IMPORT_DESCRIPTOR_libplc4 dd rva off_10015088	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aLibplc4_dll	; DLL Name
		dd rva __imp_PL_strncasecmp ; Import Address Table
__IMPORT_DESCRIPTOR_libplds4 dd	rva off_10015090 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aLibplds4_dll	; DLL Name
		dd rva __imp_PL_HashTableDestroy ; Import Address Table
__IMPORT_DESCRIPTOR_libnspr4 dd	rva off_1001506C ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aLibnspr4_dll	; DLL Name
		dd rva PR_CallOnce	; Import Address Table
__IMPORT_DESCRIPTOR_msvcrt dd rva off_100150A8 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcrt_dll	; DLL Name
		dd rva __imp_memcpy	; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10015034 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva GetCurrentProcessId ; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_10015034	dd rva word_10016A56	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10016A40
		dd rva word_10016A30
		dd rva word_10016A16
		dd rva word_100169F8
		dd rva word_100169DC
		dd rva word_100169C8
		dd rva word_1001696C
		dd rva word_10016978
		dd rva word_1001698E
		dd rva word_10016996
		dd rva word_100169B4
		dd rva word_10016A6C
		dd 0
;
; Import names for libnspr4.dll
;
off_1001506C	dd rva word_100168E2	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_libnspr4o
		dd rva word_100168D4
		dd rva word_100168CA
		dd rva word_100168B8
		dd rva word_100168AC
		dd rva word_100168A2
		dd 0
;
; Import names for libplc4.dll
;
off_10015088	dd rva word_1001680E	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_libplc4o
		dd 0
;
; Import names for libplds4.dll
;
off_10015090	dd rva word_1001682C	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_libplds4o
		dd rva word_10016854
		dd rva word_10016868
		dd rva word_10016882
		dd rva word_10016842
		dd 0
;
; Import names for msvcrt.dll
;
off_100150A8	dd rva word_100168FE	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_msvcrto
		dd rva word_10016912
		dd rva word_1001691C
		dd rva word_10016932
		dd rva word_10016940
		dd rva word_1001694A
		dd rva word_10016952
		dd rva word_1001695E
		dd rva word_10016908
		dd 0
;
; Import names for nss3.dll
;
off_100150D0	dd rva word_10015C04	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_nss3o
		dd rva word_10015C1E
		dd rva word_10015C30
		dd rva word_10015C58
		dd rva word_10015C7E
		dd rva word_10015CA4
		dd rva word_10015CC4
		dd rva word_10015CE0
		dd rva word_10015CFC
		dd rva word_10015D14
		dd rva word_10015D2C
		dd rva word_10015D46
		dd rva word_10015D5A
		dd rva word_10015D80
		dd rva word_1001560A
		dd rva word_10015DC4
		dd rva word_10015DDC
		dd rva word_10015DF2
		dd rva word_10015E10
		dd rva word_10015E2A
		dd rva word_10015E40
		dd rva word_10015E54
		dd rva word_10015BF2
		dd rva word_10015E88
		dd rva word_100156AE
		dd rva word_10015ED4
		dd rva word_10015EE6
		dd rva word_100155F6
		dd rva word_100155E8
		dd rva word_100155C8
		dd rva word_100155AC
		dd rva word_10015594
		dd rva word_10015580
		dd rva word_10015562
		dd rva word_10015548
		dd rva word_1001552A
		dd rva word_10015510
		dd rva word_100154FA
		dd rva word_100154E6
		dd rva word_100154D0
		dd rva word_100154C4
		dd rva word_100154B4
		dd rva word_10015BDC
		dd rva word_10015BC4
		dd rva word_10015B92
		dd rva word_10015B74
		dd rva word_10015B5C
		dd rva word_10015B48
		dd rva word_10015B38
		dd rva word_10015B24
		dd rva word_10015B14
		dd rva word_10015AFE
		dd rva word_100153C4
		dd rva word_10015AC4
		dd rva word_10015A9C
		dd rva word_10015A88
		dd rva word_10015A70
		dd rva word_10015A4E
		dd rva word_10015A30
		dd rva word_10015A18
		dd rva word_10015A00
		dd rva word_100159E6
		dd rva word_100159CE
		dd rva word_100159AC
		dd rva word_1001599C
		dd rva word_1001598E
		dd rva word_10015976
		dd rva word_1001595E
		dd rva word_10015946
		dd rva word_10015930
		dd rva word_10015912
		dd rva word_100158F4
		dd rva word_100158E0
		dd rva word_100158CC
		dd rva word_100158B2
		dd rva word_10015894
		dd rva word_1001587C
		dd rva word_10015864
		dd rva word_1001584A
		dd rva word_10015830
		dd rva word_1001581E
		dd rva word_10015800
		dd rva word_100157E8
		dd rva word_100157CA
		dd rva word_100157AE
		dd rva word_1001578C
		dd rva word_10015766
		dd rva word_10015742
		dd rva word_1001572C
		dd rva word_10015712
		dd rva word_100156FA
		dd rva word_100156E0
		dd rva word_10015E6C
		dd rva word_100156C8
		dd rva word_10015496
		dd rva word_10015486
		dd rva word_10015470
		dd rva word_1001545E
		dd rva word_10015446
		dd rva word_10015430
		dd rva word_1001540E
		dd rva word_10015696
		dd rva word_1001567C
		dd rva word_10015660
		dd rva word_1001564A
		dd rva word_10015EAE
		dd rva word_10015632
		dd rva word_100153EA
		dd rva word_10015D9E
		dd 0
;
; Import names for nssutil3.dll
;
off_10015288	dd rva word_100167EA	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_nssutil3o
		dd rva word_100167CE
		dd rva word_100167B2
		dd rva word_1001679A
		dd rva word_1001677A
		dd rva word_10016762
		dd rva word_10016750
		dd rva word_1001672A
		dd rva word_10016712
		dd rva word_100166EC
		dd rva word_100166D6
		dd rva word_100166BC
		dd rva word_100166A2
		dd rva word_10016682
		dd rva word_1001666E
		dd rva word_10016652
		dd rva word_10016634
		dd rva word_10016612
		dd rva word_100165F6
		dd rva word_100165DC
		dd rva word_100165B4
		dd rva word_1001658E
		dd rva word_10016570
		dd rva word_1001654E
		dd rva word_10016532
		dd rva word_1001651E
		dd rva word_10016502
		dd rva word_100164E8
		dd rva word_100164CA
		dd rva word_100164AC
		dd rva word_10016486
		dd rva word_10016460
		dd rva word_10016444
		dd rva word_10016420
		dd rva word_100163FC
		dd rva word_100163D4
		dd rva word_100163AE
		dd rva word_10016390
		dd rva word_10016372
		dd rva word_10016350
		dd rva word_1001633A
		dd rva word_10016324
		dd rva word_10016306
		dd rva word_100162E2
		dd rva word_100162BC
		dd rva word_100162A0
		dd rva word_1001627C
		dd rva word_1001625E
		dd rva word_10016240
		dd rva word_1001622A
		dd rva word_10016218
		dd rva word_100161E2
		dd rva word_100161C4
		dd rva word_100161A6
		dd rva word_1001618C
		dd rva word_1001617A
		dd rva word_10016166
		dd rva word_1001614C
		dd rva word_1001612C
		dd rva word_10016106
		dd rva word_100160E2
		dd rva word_100160CC
		dd rva word_100160B6
		dd rva word_100160A0
		dd rva word_10016084
		dd rva word_1001606C
		dd rva word_10016050
		dd rva word_10016036
		dd rva word_1001601E
		dd rva word_10015FF4
		dd rva word_10015FCE
		dd rva word_10015FA6
		dd rva word_10015F76
		dd rva word_10015F52
		dd rva word_10015F3A
		dd rva word_10015F24
		dd rva word_10015F0C
		dd rva word_10016200
		dd 0
word_100153C4	dw 110h			; DATA XREF: .rdata:100151A0o
		db 'NSS_Get_CERT_SetOfSignedCrlTemplate',0
word_100153EA	dw 10Dh			; DATA XREF: .rdata:1001527Co
		db 'NSS_Get_CERT_IssuerAndSNTemplate',0
		align 2
word_1001540E	dw 114h			; DATA XREF: .rdata:10015260o
		db 'NSS_Get_CERT_TimeChoiceTemplate',0
word_10015430	dw 1A6h			; DATA XREF: .rdata:1001525Co
		db 'PK11_GetKeyStrength',0
word_10015446	dw 221h			; DATA XREF: .rdata:10015258o
		db 'PK11_ReferenceSymKey',0
		align 2
word_1001545E	dw 189h			; DATA XREF: .rdata:10015254o
		db 'PK11_FreeSymKey',0
word_10015470	dw 15Eh			; DATA XREF: .rdata:10015250o
		db 'PK11_DestroyContext',0
word_10015486	dw 146h			; DATA XREF: .rdata:1001524Co
		db 'PK11_CipherOp',0
word_10015496	dw 14Dh			; DATA XREF: .rdata:10015248o
		db 'PK11_CreateContextBySymKey',0
		align 4
word_100154B4	dw 186h			; DATA XREF: .rdata:10015174o
		db 'PK11_FreeSlot',0
word_100154C4	dw 1DFh			; DATA XREF: .rdata:10015170o
		db 'PK11_IsHW',0
word_100154D0	dw 1BAh			; DATA XREF: .rdata:1001516Co
		db 'PK11_GetSlotFromKey',0
word_100154E6	dw 199h			; DATA XREF: .rdata:10015168o
		db 'PK11_GetBlockSize',0
word_100154FA	dw 20Dh			; DATA XREF: .rdata:10015164o
		db 'PK11_ParamFromAlgid',0
word_10015510	dw 140h			; DATA XREF: .rdata:10015160o
		db 'PK11_AlgtagToMechanism',0
		align 2
word_1001552A	dw 1B2h			; DATA XREF: .rdata:1001515Co
		db 'PK11_GetPBECryptoMechanism',0
		align 4
word_10015548	dw 1C4h			; DATA XREF: .rdata:10015158o
		db 'PK11_GetSymKeyUserData',0
		align 2
word_10015562	dw 2E7h			; DATA XREF: .rdata:10015154o
		db 'SEC_PKCS5IsAlgorithmPBEAlg',0
		align 10h
word_10015580	dw 20Fh			; DATA XREF: .rdata:10015150o
		db 'PK11_ParamToAlgid',0
word_10015594	dw 18Eh			; DATA XREF: .rdata:1001514Co
		db 'PK11_GenerateNewParam',0
word_100155AC	dw 151h			; DATA XREF: .rdata:10015148o
		db 'PK11_CreatePBEAlgorithmID',0
word_100155C8	dw 2E8h			; DATA XREF: .rdata:10015144o
		db 'SEC_PKCS5IsAlgorithmPBEAlgTag',0
word_100155E8	dw 1E8h			; DATA XREF: .rdata:10015140o
		db 'PK11_KeyGen',0
word_100155F6	dw 194h			; DATA XREF: .rdata:1001513Co
		db 'PK11_GetBestSlot',0
		align 2
word_1001560A	dw 174h			; DATA XREF: .rdata:10015108o
		db 'PK11_FindCertAndKeyByRecipientListNew',0
word_10015632	dw 228h			; DATA XREF: .rdata:10015278o
		db 'PK11_SetPasswordFunc',0
		align 2
word_1001564A	dw 21Ch			; DATA XREF: .rdata:10015270o
		db 'PK11_PubWrapSymKey',0
		align 10h
word_10015660	dw 286h			; DATA XREF: .rdata:1001526Co
		db 'SECKEY_PublicKeyStrength',0
		align 4
word_1001567C	dw 282h			; DATA XREF: .rdata:10015268o
		db 'SECKEY_GetPublicKeyType',0
word_10015696	dw 219h			; DATA XREF: .rdata:10015264o
		db 'PK11_PubUnwrapSymKey',0
		align 2
word_100156AE	dw 27Ah			; DATA XREF: .rdata:10015130o
		db 'SECKEY_DestroyPublicKey',0
word_100156C8	dw 66h			; DATA XREF: .rdata:10015244o
		db 'CERT_ExtractPublicKey',0
word_100156E0	dw 43h			; DATA XREF: .rdata:1001523Co
		db 'CERT_DestroyCertificate',0
word_100156FA	dw 26Fh			; DATA XREF: .rdata:10015238o
		db 'SECKEY_CopyPublicKey',0
		align 2
word_10015712	dw 85h			; DATA XREF: .rdata:10015234o
		db 'CERT_GetCertIssuerAndSN',0
word_1001572C	dw 52h			; DATA XREF: .rdata:10015230o
		db 'CERT_DupCertificate',0
word_10015742	dw 274h			; DATA XREF: .rdata:1001522Co
		db 'SECKEY_CreateSubjectPublicKeyInfo',0
word_10015766	dw 27Ch			; DATA XREF: .rdata:10015228o
		db 'SECKEY_DestroySubjectPublicKeyInfo',0
		align 4
word_1001578C	dw 78h			; DATA XREF: .rdata:10015224o
		db 'CERT_FindSubjectKeyIDExtension',0
		align 2
word_100157AE	dw 277h			; DATA XREF: .rdata:10015220o
		db 'SECKEY_DestroyPrivateKey',0
		align 2
word_100157CA	dw 181h			; DATA XREF: .rdata:1001521Co
		db 'PK11_FindPrivateKeyFromCert',0
word_100157E8	dw 26Dh			; DATA XREF: .rdata:10015218o
		db 'SECKEY_CopyPrivateKey',0
word_10015800	dw 44h			; DATA XREF: .rdata:10015214o
		db 'CERT_DestroyCertificateList',0
word_1001581E	dw 0D0h			; DATA XREF: .rdata:10015210o
		db 'CERT_VerifyCert',0
word_10015830	dw 6Ch			; DATA XREF: .rdata:1001520Co
		db 'CERT_FindCertByDERCert',0
		align 2
word_1001584A	dw 11h			; DATA XREF: .rdata:10015208o
		db 'CERT_CertChainFromCert',0
		align 4
word_10015864	dw 42h			; DATA XREF: .rdata:10015204o
		db 'CERT_DestroyCertList',0
		align 4
word_1001587C	dw 41h			; DATA XREF: .rdata:10015200o
		db 'CERT_DestroyCertArray',0
word_10015894	dw 68h			; DATA XREF: .rdata:100151FCo
		db 'CERT_FilterCertListByUsage',0
		align 2
word_100158B2	dw 6			; DATA XREF: .rdata:100151F8o
		db 'CERT_AddCertToListTail',0
		align 4
word_100158CC	dw 0BAh			; DATA XREF: .rdata:100151F4o
		db 'CERT_NewCertList',0
		align 10h
word_100158E0	dw 0B0h			; DATA XREF: .rdata:100151F0o
		db 'CERT_ImportCerts',0
		align 4
word_100158F4	dw 6Dh			; DATA XREF: .rdata:100151ECo
		db 'CERT_FindCertByIssuerAndSN',0
		align 2
word_10015912	dw 72h			; DATA XREF: .rdata:100151E8o
		db 'CERT_FindCertBySubjectKeyID',0
word_10015930	dw 8Fh			; DATA XREF: .rdata:100151E4o
		db 'CERT_GetCommonName',0
		align 2
word_10015946	dw 0C4h			; DATA XREF: .rdata:100151E0o
		db 'CERT_SaveSMimeProfile',0
word_1001595E	dw 93h			; DATA XREF: .rdata:100151DCo
		db 'CERT_GetDefaultCertDB',0
word_10015976	dw 12h			; DATA XREF: .rdata:100151D8o
		db 'CERT_CertListFromCert',0
word_1001598E	dw 2F2h			; DATA XREF: .rdata:100151D4o
		db 'SGN_Digest',0
		align 4
word_1001599C	dw 2EBh			; DATA XREF: .rdata:100151D0o
		db 'SEC_SignData',0
		align 4
word_100159AC	dw 2E0h			; DATA XREF: .rdata:100151CCo
		db 'SEC_GetSignatureAlgorithmOidTag',0
word_100159CE	dw 17Eh			; DATA XREF: .rdata:100151C8o
		db 'PK11_FindKeyByAnyCert',0
word_100159E6	dw 302h			; DATA XREF: .rdata:100151C4o
		db 'VFY_VerifyDigestDirect',0
		align 10h
word_10015A00	dw 2FFh			; DATA XREF: .rdata:100151C0o
		db 'VFY_VerifyDataDirect',0
		align 4
word_10015A18	dw 136h			; DATA XREF: .rdata:100151BCo
		db 'NSS_RegisterShutdown',0
		align 10h
word_10015A30	dw 0F2h			; DATA XREF: .rdata:100151B8o
		db 'HASH_GetHashObjectByOidTag',0
		align 2
word_10015A4E	dw 287h			; DATA XREF: .rdata:100151B4o
		db 'SECKEY_PublicKeyStrengthInBits',0
		align 10h
word_10015A70	dw 77h			; DATA XREF: .rdata:100151B0o
		db 'CERT_FindSMimeProfile',0
word_10015A88	dw 13Ah			; DATA XREF: .rdata:100151ACo
		db 'NSS_VersionCheck',0
		align 4
word_10015A9C	dw 119h			; DATA XREF: .rdata:100151A8o
		db 'NSS_Get_SECKEY_PrivateKeyInfoTemplate',0
word_10015AC4	dw 117h			; DATA XREF: .rdata:100151A4o
		db 'NSS_Get_SECKEY_PointerToEncryptedPrivateKeyInfoTemplate',0
word_10015AFE	dw 18Fh			; DATA XREF: .rdata:1001519Co
		db 'PK11_GenerateRandom',0
word_10015B14	dw 1CAh			; DATA XREF: .rdata:10015198o
		db 'PK11_HashBuf',0
		align 4
word_10015B24	dw 166h			; DATA XREF: .rdata:10015194o
		db 'PK11_DigestFinal',0
		align 4
word_10015B38	dw 168h			; DATA XREF: .rdata:10015190o
		db 'PK11_DigestOp',0
word_10015B48	dw 165h			; DATA XREF: .rdata:1001518Co
		db 'PK11_DigestBegin',0
		align 4
word_10015B5C	dw 2E5h			; DATA XREF: .rdata:10015188o
		db 'SEC_PKCS5GetKeyLength',0
word_10015B74	dw 2E3h			; DATA XREF: .rdata:10015184o
		db 'SEC_PKCS5GetCryptoAlgorithm',0
word_10015B92	dw 118h			; DATA XREF: .rdata:10015180o
		db 'NSS_Get_SECKEY_PointerToPrivateKeyInfoTemplate',0
		align 4
word_10015BC4	dw 1A2h			; DATA XREF: .rdata:1001517Co
		db 'PK11_GetInternalSlot',0
		align 4
word_10015BDC	dw 220h			; DATA XREF: .rdata:10015178o
		db 'PK11_ReferenceSlot',0
		align 2
word_10015BF2	dw 1FEh			; DATA XREF: .rdata:10015128o
		db 'PK11_PBEKeyGen',0
		align 4
word_10015C04	dw 1A1h			; DATA XREF: .rdata:off_100150D0o
		db 'PK11_GetInternalKeySlot',0
word_10015C1E	dw 1E0h			; DATA XREF: .rdata:100150D4o
		db 'PK11_IsInternal',0
word_10015C30	dw 276h			; DATA XREF: .rdata:100150D8o
		db 'SECKEY_DestroyEncryptedPrivateKeyInfo',0
word_10015C58	dw 26Ch			; DATA XREF: .rdata:100150DCo
		db 'SECKEY_CopyEncryptedPrivateKeyInfo',0
		align 2
word_10015C7E	dw 16Dh			; DATA XREF: .rdata:100150E0o
		db 'PK11_ExportEncryptedPrivateKeyInfo',0
		align 4
word_10015CA4	dw 278h			; DATA XREF: .rdata:100150E4o
		db 'SECKEY_DestroyPrivateKeyInfo',0
		align 4
word_10015CC4	dw 26Eh			; DATA XREF: .rdata:100150E8o
		db 'SECKEY_CopyPrivateKeyInfo',0
word_10015CE0	dw 16Fh			; DATA XREF: .rdata:100150ECo
		db 'PK11_ExportPrivateKeyInfo',0
word_10015CFC	dw 163h			; DATA XREF: .rdata:100150F0o
		db 'PK11_DestroyPBEParams',0
word_10015D14	dw 152h			; DATA XREF: .rdata:100150F4o
		db 'PK11_CreatePBEParams',0
		align 4
word_10015D2C	dw 22Dh			; DATA XREF: .rdata:100150F8o
		db 'PK11_SetSymKeyUserData',0
		align 2
word_10015D46	dw 1C6h			; DATA XREF: .rdata:100150FCo
		db 'PK11_GetTokenName',0
word_10015D5A	dw 238h			; DATA XREF: .rdata:10015100o
		db 'PK11_TraverseCertsForSubjectInSlot',0
		align 10h
word_10015D80	dw 306h			; DATA XREF: .rdata:10015104o
		db '__CERT_DecodeDERCertificate',0
word_10015D9E	dw 237h			; DATA XREF: .rdata:10015280o
		db 'PK11_TraverseCertsForNicknameInSlot',0
word_10015DC4	dw 17Fh			; DATA XREF: .rdata:1001510Co
		db 'PK11_FindKeyByDERCert',0
word_10015DDC	dw 1D0h			; DATA XREF: .rdata:10015110o
		db 'PK11_ImportDERCert',0
		align 2
word_10015DF2	dw 1CFh			; DATA XREF: .rdata:10015114o
		db 'PK11_ImportCertForKeyToSlot',0
word_10015E10	dw 0BBh			; DATA XREF: .rdata:10015118o
		db 'CERT_NewTempCertificate',0
word_10015E2A	dw 0B3h			; DATA XREF: .rdata:1001511Co
		db 'CERT_IsRootDERCert',0
		align 10h
word_10015E40	dw 0B2h			; DATA XREF: .rdata:10015120o
		db 'CERT_IsCADERCert',0
		align 4
word_10015E54	dw 1D8h			; DATA XREF: .rdata:10015124o
		db 'PK11_ImportPublicKey',0
		align 4
word_10015E6C	dw 1D6h			; DATA XREF: .rdata:10015240o
		db 'PK11_ImportPrivateKeyInfo',0
word_10015E88	dw 1D4h			; DATA XREF: .rdata:1001512Co
		db 'PK11_ImportEncryptedPrivateKeyInfo',0
		align 2
word_10015EAE	dw 173h			; DATA XREF: .rdata:10015274o
		db 'PK11_FindCertAndKeyByRecipientList',0
		align 4
word_10015ED4	dw 0F6h			; DATA XREF: .rdata:10015134o
		db 'HASH_ResultLen',0
		align 2
word_10015EE6	dw 0F3h			; DATA XREF: .rdata:10015138o
		db 'HASH_GetHashTypeByOidTag',0
		align 2
aNss3_dll	db 'nss3.dll',0         ; DATA XREF: .rdata:10014FA0o
		align 4
word_10015F0C	dw 64h			; DATA XREF: .rdata:100153B8o
		db 'PORT_ArenaZAlloc_Util',0
word_10015F24	dw 5Fh			; DATA XREF: .rdata:100153B4o
		db 'PORT_ArenaGrow_Util',0
word_10015F3A	dw 5Eh			; DATA XREF: .rdata:100153B0o
		db 'PORT_ArenaAlloc_Util',0
		align 2
word_10015F52	dw 53h			; DATA XREF: .rdata:100153ACo
		db 'NSS_Get_SEC_SetOfAnyTemplate_Util',0
word_10015F76	dw 4Fh			; DATA XREF: .rdata:100153A8o
		db 'NSS_Get_SEC_PointerToOctetStringTemplate_Util',0
word_10015FA6	dw 4Bh			; DATA XREF: .rdata:100153A4o
		db 'NSS_Get_SEC_OctetStringTemplate_Util',0
		align 2
word_10015FCE	dw 43h			; DATA XREF: .rdata:100153A0o
		db 'NSS_Get_SEC_BitStringTemplate_Util',0
		align 4
word_10015FF4	dw 40h			; DATA XREF: .rdata:1001539Co
		db 'NSS_Get_SECOID_AlgorithmIDTemplate_Util',0
word_1001601E	dw 63h			; DATA XREF: .rdata:10015398o
		db 'PORT_ArenaUnmark_Util',0
word_10016036	dw 61h			; DATA XREF: .rdata:10015394o
		db 'PORT_ArenaRelease_Util',0
		align 10h
word_10016050	dw 7Bh			; DATA XREF: .rdata:10015390o
		db 'SECITEM_ArenaDupItem_Util',0
word_1001606C	dw 7Dh			; DATA XREF: .rdata:1001538Co
		db 'SECITEM_CopyItem_Util',0
word_10016084	dw 8Eh			; DATA XREF: .rdata:10015388o
		db 'SECOID_FindOIDByTag_Util',0
		align 10h
word_100160A0	dw 60h			; DATA XREF: .rdata:10015384o
		db 'PORT_ArenaMark_Util',0
word_100160B6	dw 6Fh			; DATA XREF: .rdata:10015380o
		db 'PORT_SetError_Util',0
		align 4
word_100160CC	dw 91h			; DATA XREF: .rdata:1001537Co
		db 'SECOID_FindOID_Util',0
word_100160E2	dw 4Ah			; DATA XREF: .rdata:10015378o
		db 'NSS_Get_SEC_ObjectIDTemplate_Util',0
word_10016106	dw 47h			; DATA XREF: .rdata:10015374o
		db 'NSS_Get_SEC_IA5StringTemplate_Util',0
		align 4
word_1001612C	dw 41h			; DATA XREF: .rdata:10015370o
		db 'NSS_Get_SEC_AnyTemplate_Util',0
		align 4
word_1001614C	dw 0A3h			; DATA XREF: .rdata:1001536Co
		db 'SEC_ASN1EncodeItem_Util',0
word_10016166	dw 77h			; DATA XREF: .rdata:10015368o
		db 'PORT_ZAlloc_Util',0
		align 2
word_1001617A	dw 66h			; DATA XREF: .rdata:10015364o
		db 'PORT_Free_Util',0
		align 4
word_1001618C	dw 7Ah			; DATA XREF: .rdata:10015360o
		db 'SECITEM_AllocItem_Util',0
		align 2
word_100161A6	dw 92h			; DATA XREF: .rdata:1001535Co
		db 'SECOID_GetAlgorithmTag_Util',0
word_100161C4	dw 95h			; DATA XREF: .rdata:10015358o
		db 'SECOID_SetAlgorithmID_Util',0
		align 2
word_100161E2	dw 8Bh			; DATA XREF: .rdata:10015354o
		db 'SECOID_CopyAlgorithmID_Util',0
word_10016200	dw 81h			; DATA XREF: .rdata:100153BCo
		db 'SECITEM_FreeItem_Util',0
word_10016218	dw 5Dh			; DATA XREF: .rdata:10015350o
		db 'PORT_Alloc_Util',0
word_1001622A	dw 67h			; DATA XREF: .rdata:1001534Co
		db 'PORT_GetError_Util',0
		align 10h
word_10016240	dw 9Dh			; DATA XREF: .rdata:10015348o
		db 'SEC_ASN1DecoderFinish_Util',0
		align 2
word_1001625E	dw 0A1h			; DATA XREF: .rdata:10015344o
		db 'SEC_ASN1DecoderUpdate_Util',0
		align 4
word_1001627C	dw 9Fh			; DATA XREF: .rdata:10015340o
		db 'SEC_ASN1DecoderSetNotifyProc_Util',0
word_100162A0	dw 0A0h			; DATA XREF: .rdata:1001533Co
		db 'SEC_ASN1DecoderStart_Util',0
word_100162BC	dw 9Bh			; DATA XREF: .rdata:10015338o
		db 'SEC_ASN1DecoderClearFilterProc_Util',0
word_100162E2	dw 9Eh			; DATA XREF: .rdata:10015334o
		db 'SEC_ASN1DecoderSetFilterProc_Util',0
word_10016306	dw 0A2h			; DATA XREF: .rdata:10015330o
		db 'SEC_ASN1EncodeInteger_Util',0
		align 4
word_10016324	dw 65h			; DATA XREF: .rdata:1001532Co
		db 'PORT_FreeArena_Util',0
word_1001633A	dw 6Ah			; DATA XREF: .rdata:10015328o
		db 'PORT_NewArena_Util',0
		align 10h
word_10016350	dw 8Ch			; DATA XREF: .rdata:10015324o
		db 'SECOID_DestroyAlgorithmID_Util',0
		align 2
word_10016372	dw 0AFh			; DATA XREF: .rdata:10015320o
		db 'SEC_ASN1EncoderUpdate_Util',0
		align 10h
word_10016390	dw 0AAh			; DATA XREF: .rdata:1001531Co
		db 'SEC_ASN1EncoderFinish_Util',0
		align 2
word_100163AE	dw 0A8h			; DATA XREF: .rdata:10015318o
		db 'SEC_ASN1EncoderClearStreaming_Util',0
		align 4
word_100163D4	dw 0A9h			; DATA XREF: .rdata:10015314o
		db 'SEC_ASN1EncoderClearTakeFromBuf_Util',0
		align 4
word_100163FC	dw 0ABh			; DATA XREF: .rdata:10015310o
		db 'SEC_ASN1EncoderSetNotifyProc_Util',0
word_10016420	dw 0ACh			; DATA XREF: .rdata:1001530Co
		db 'SEC_ASN1EncoderSetStreaming_Util',0
		align 4
word_10016444	dw 0AEh			; DATA XREF: .rdata:10015308o
		db 'SEC_ASN1EncoderStart_Util',0
word_10016460	dw 0ADh			; DATA XREF: .rdata:10015304o
		db 'SEC_ASN1EncoderSetTakeFromBuf_Util',0
		align 2
word_10016486	dw 0A7h			; DATA XREF: .rdata:10015300o
		db 'SEC_ASN1EncoderClearNotifyProc_Util',0
word_100164AC	dw 0B1h			; DATA XREF: .rdata:100152FCo
		db 'SEC_QuickDERDecodeItem_Util',0
word_100164CA	dw 97h			; DATA XREF: .rdata:100152F8o
		db 'SEC_ASN1DecodeInteger_Util',0
		align 4
word_100164E8	dw 90h			; DATA XREF: .rdata:100152F4o
		db 'SECOID_FindOIDTag_Util',0
		align 2
word_10016502	dw 6			; DATA XREF: .rdata:100152F0o
		db 'DER_DecodeTimeChoice_Util',0
word_1001651E	dw 73h			; DATA XREF: .rdata:100152ECo
		db 'PORT_Strdup_Util',0
		align 2
word_10016532	dw 7			; DATA XREF: .rdata:100152E8o
		db 'DER_EncodeTimeChoice_Util',0
word_1001654E	dw 8Ah			; DATA XREF: .rdata:100152E4o
		db 'SECOID_CompareAlgorithmID_Util',0
		align 10h
word_10016570	dw 84h			; DATA XREF: .rdata:100152E0o
		db 'SECITEM_ItemsAreEqual_Util',0
		align 2
word_1001658E	dw 58h			; DATA XREF: .rdata:100152DCo
		db 'NSS_Get_sgn_DigestInfoTemplate_Util',0
word_100165B4	dw 4Ch			; DATA XREF: .rdata:100152D8o
		db 'NSS_Get_SEC_PointerToAnyTemplate_Util',0
word_100165DC	dw 88h			; DATA XREF: .rdata:100152D4o
		db 'SECITEM_ZfreeItem_Util',0
		align 2
word_100165F6	dw 0B5h			; DATA XREF: .rdata:100152D0o
		db 'SGN_CreateDigestInfo_Util',0
word_10016612	dw 74h			; DATA XREF: .rdata:100152CCo
		db 'PORT_UCS2_ASCIIConversion_Util',0
		align 4
word_10016634	dw 0B7h			; DATA XREF: .rdata:100152C8o
		db 'SGN_DestroyDigestInfo_Util',0
		align 2
word_10016652	dw 7Ch			; DATA XREF: .rdata:100152C4o
		db 'SECITEM_CompareItem_Util',0
		align 2
word_1001666E	dw 6Bh			; DATA XREF: .rdata:100152C0o
		db 'PORT_Realloc_Util',0
word_10016682	dw 75h			; DATA XREF: .rdata:100152BCo
		db 'PORT_UCS2_UTF8Conversion_Util',0
word_100166A2	dw 0B4h			; DATA XREF: .rdata:100152B8o
		db 'SGN_CopyDigestInfo_Util',0
word_100166BC	dw 98h			; DATA XREF: .rdata:100152B4o
		db 'SEC_ASN1DecodeItem_Util',0
word_100166D6	dw 0Bh			; DATA XREF: .rdata:100152B0o
		db 'DER_GetInteger_Util',0
word_100166EC	dw 42h			; DATA XREF: .rdata:100152ACo
		db 'NSS_Get_SEC_BMPStringTemplate_Util',0
		align 2
word_10016712	dw 62h			; DATA XREF: .rdata:100152A8o
		db 'PORT_ArenaStrdup_Util',0
word_1001672A	dw 9Ch			; DATA XREF: .rdata:100152A4o
		db 'SEC_ASN1DecoderClearNotifyProc_Util',0
word_10016750	dw 78h			; DATA XREF: .rdata:100152A0o
		db 'PORT_ZFree_Util',0
word_10016762	dw 7Fh			; DATA XREF: .rdata:1001529Co
		db 'SECITEM_DupItem_Util',0
		align 2
word_1001677A	dw 1			; DATA XREF: .rdata:10015298o
		db 'ATOB_ConvertAsciiToItem_Util',0
		align 2
word_1001679A	dw 0			; DATA XREF: .rdata:10015294o
		db 'ATOB_AsciiToData_Util',0
word_100167B2	dw 9Ah			; DATA XREF: .rdata:10015290o
		db 'SEC_ASN1DecoderAbort_Util',0
word_100167CE	dw 0A6h			; DATA XREF: .rdata:1001528Co
		db 'SEC_ASN1EncoderAbort_Util',0
word_100167EA	dw 0A5h			; DATA XREF: .rdata:off_10015288o
		db 'SEC_ASN1Encode_Util',0
aNssutil3_dll	db 'nssutil3.dll',0     ; DATA XREF: .rdata:10014FB4o
		align 2
word_1001680E	dw 13h			; DATA XREF: .rdata:off_10015088o
		db 'PL_strncasecmp',0
		align 10h
aLibplc4_dll	db 'libplc4.dll',0      ; DATA XREF: .rdata:10014FC8o
word_1001682C	dw 0Ch			; DATA XREF: .rdata:off_10015090o
		db 'PL_HashTableDestroy',0
word_10016842	dw 17h			; DATA XREF: .rdata:100150A0o
		db 'PL_NewHashTable',0
word_10016854	dw 7			; DATA XREF: .rdata:10015094o
		db 'PL_CompareValues',0
		align 4
word_10016868	dw 10h			; DATA XREF: .rdata:10015098o
		db 'PL_HashTableLookupConst',0
word_10016882	dw 0Bh			; DATA XREF: .rdata:1001509Co
		db 'PL_HashTableAdd',0
aLibplds4_dll	db 'libplds4.dll',0     ; DATA XREF: .rdata:10014FDCo
		align 2
word_100168A2	dw 10Ch			; DATA XREF: .rdata:10015080o
		db 'PR_Now',0
		align 4
word_100168AC	dw 16Eh			; DATA XREF: .rdata:1001507Co
		db 'PR_Unlock',0
word_100168B8	dw 52h			; DATA XREF: .rdata:10015078o
		db 'PR_DestroyLock',0
		align 2
word_100168CA	dw 0E8h			; DATA XREF: .rdata:10015074o
		db 'PR_Lock',0
word_100168D4	dw 0FBh			; DATA XREF: .rdata:10015070o
		db 'PR_NewLock',0
		align 2
word_100168E2	dw 27h			; DATA XREF: .rdata:off_1001506Co
		db 'PR_CallOnce',0
aLibnspr4_dll	db 'libnspr4.dll',0     ; DATA XREF: .rdata:10014FF0o
		align 2
word_100168FE	dw 4EAh			; DATA XREF: .rdata:off_100150A8o
		db 'memcpy',0
		align 4
word_10016908	dw 4EEh			; DATA XREF: .rdata:100150C8o
		db 'memset',0
		align 2
word_10016912	dw 513h			; DATA XREF: .rdata:100150ACo
		db 'strchr',0
		align 4
word_1001691C	dw 4ECh			; DATA XREF: .rdata:100150B0o
		db 'memmove',0
aMsvcrt_dll	db 'msvcrt.dll',0       ; DATA XREF: .rdata:10015004o
		align 2
word_10016932	dw 6Ah			; DATA XREF: .rdata:100150B4o
		db '_XcptFilter',0
word_10016940	dw 4DEh			; DATA XREF: .rdata:100150B8o
		db 'malloc',0
		align 2
word_1001694A	dw 4A6h			; DATA XREF: .rdata:100150BCo
		db 'free',0
		align 2
word_10016952	dw 1D5h			; DATA XREF: .rdata:100150C0o
		db '_initterm',0
word_1001695E	dw 101h			; DATA XREF: .rdata:100150C4o
		db '_amsg_exit',0
		align 4
word_1001696C	dw 2C7h			; DATA XREF: .rdata:10015050o
		db 'RtlUnwind',0
word_10016978	dw 21Dh			; DATA XREF: .rdata:10015054o
		db 'InterlockedExchange',0
word_1001698E	dw 342h			; DATA XREF: .rdata:10015058o
		db 'Sleep',0
word_10016996	dw 21Bh			; DATA XREF: .rdata:1001505Co
		db 'InterlockedCompareExchange',0
		align 4
word_100169B4	dw 34Ah			; DATA XREF: .rdata:10015060o
		db 'TerminateProcess',0
		align 4
word_100169C8	dw 13Bh			; DATA XREF: .rdata:1001504Co
		db 'GetCurrentProcess',0
word_100169DC	dw 35Bh			; DATA XREF: .rdata:10015048o
		db 'UnhandledExceptionFilter',0
		align 4
word_100169F8	dw 336h			; DATA XREF: .rdata:10015044o
		db 'SetUnhandledExceptionFilter',0
word_10016A16	dw 294h			; DATA XREF: .rdata:10015040o
		db 'QueryPerformanceCounter',0
word_10016A30	dw 1D4h			; DATA XREF: .rdata:1001503Co
		db 'GetTickCount',0
		align 10h
word_10016A40	dw 13Eh			; DATA XREF: .rdata:10015038o
		db 'GetCurrentThreadId',0
		align 2
word_10016A56	dw 13Ch			; DATA XREF: .rdata:off_10015034o
		db 'GetCurrentProcessId',0
word_10016A6C	dw 1C0h			; DATA XREF: .rdata:10015064o
		db 'GetSystemTimeAsFileTime',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:10015018o
		align 10h
;
; Export directory for smime3.dll
;
		dd 0			; Characteristics
		dd 54275E7Eh		; TimeDateStamp: Sun Sep 28 01:03:58 2014
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aSmime3_dll	; Name
		dd 1			; Base
		dd 0A6h			; NumberOfFunctions
		dd 0A6h			; NumberOfNames
		dd rva off_10016AC8	; AddressOfFunctions
		dd rva off_10016D60	; AddressOfNames
		dd rva word_10016FF8	; AddressOfNameOrdinals
;
; Export Address Table for smime3.dll
;
off_10016AC8	dd rva CERT_ConvertAndDecodeCertificate, rva CERT_DecodeCertFromPackage
					; DATA XREF: .rdata:10016ABCo
		dd rva CERT_DecodeCertPackage, rva NSSSMIME_GetVersion
		dd rva NSSSMIME_VersionCheck, rva NSS_CMSContentInfo_GetBulkKey
		dd rva NSS_CMSContentInfo_GetBulkKeySize, rva NSS_CMSContentInfo_GetContent
		dd rva NSS_CMSContentInfo_GetContentEncAlgTag, rva NSS_CMSContentInfo_GetContentTypeTag
		dd rva NSS_CMSContentInfo_SetBulkKey, rva NSS_CMSContentInfo_SetContent
		dd rva NSS_CMSContentInfo_SetContentEncAlg, rva	NSS_CMSContentInfo_SetContent_Data
		dd rva NSS_CMSContentInfo_SetContent_DigestedData, rva NSS_CMSContentInfo_SetContent_EncryptedData
		dd rva NSS_CMSContentInfo_SetContent_EnvelopedData, rva	NSS_CMSContentInfo_SetContent_SignedData
		dd rva NSS_CMSContentInfo_SetDontStream, rva NSS_CMSDEREncode
		dd rva NSS_CMSDecoder_Cancel, rva NSS_CMSDecoder_Finish
		dd rva NSS_CMSDecoder_Start, rva NSS_CMSDecoder_Update
		dd rva NSS_CMSDigestContext_Cancel, rva	NSS_CMSDigestContext_FinishMultiple
		dd rva NSS_CMSDigestContext_FinishSingle, rva NSS_CMSDigestContext_StartMultiple
		dd rva NSS_CMSDigestContext_StartSingle, rva NSS_CMSDigestContext_Update
		dd rva NSS_CMSDigestedData_Create, rva NSS_CMSDigestedData_Destroy
		dd rva NSS_CMSDigestedData_GetContentInfo, rva NSS_CMSEncoder_Cancel
		dd rva NSS_CMSEncoder_Finish, rva NSS_CMSEncoder_Start
		dd rva NSS_CMSEncoder_Update, rva NSS_CMSEncryptedData_Create
		dd rva NSS_CMSEncryptedData_Destroy, rva NSS_CMSEncryptedData_GetContentInfo
		dd rva NSS_CMSEnvelopedData_AddRecipient, rva NSS_CMSEnvelopedData_Create
		dd rva NSS_CMSEnvelopedData_Destroy, rva NSS_CMSEnvelopedData_GetContentInfo
		dd rva NSS_CMSMessage_ContentLevel, rva	NSS_CMSMessage_ContentLevelCount
		dd rva NSS_CMSMessage_Copy, rva	NSS_CMSMessage_Create
		dd rva NSS_CMSMessage_CreateFromDER, rva NSS_CMSMessage_Destroy
		dd rva NSS_CMSMessage_GetContent, rva NSS_CMSMessage_GetContentInfo
		dd rva NSS_CMSMessage_IsEncrypted, rva NSS_CMSMessage_IsSigned
		dd rva NSS_CMSRecipientInfo_Create, rva	NSS_CMSRecipientInfo_CreateFromDER
		dd rva NSS_CMSRecipientInfo_CreateNew, rva NSS_CMSRecipientInfo_CreateWithSubjKeyID
		dd rva NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert
		dd rva NSS_CMSRecipientInfo_Destroy, rva NSS_CMSRecipientInfo_Encode
		dd rva NSS_CMSRecipientInfo_GetCertAndKey, rva NSS_CMSRecipientInfo_UnwrapBulkKey
		dd rva NSS_CMSRecipientInfo_WrapBulkKey, rva NSS_CMSSignedData_AddCertChain
		dd rva NSS_CMSSignedData_AddCertList, rva NSS_CMSSignedData_AddCertificate
		dd rva NSS_CMSSignedData_AddDigest, rva	NSS_CMSSignedData_AddSignerInfo
		dd rva NSS_CMSSignedData_Create, rva NSS_CMSSignedData_CreateCertsOnly
		dd rva NSS_CMSSignedData_Destroy, rva NSS_CMSSignedData_GetContentInfo
		dd rva NSS_CMSSignedData_GetDigestAlgs,	rva NSS_CMSSignedData_GetSignerInfo
		dd rva NSS_CMSSignedData_HasDigests, rva NSS_CMSSignedData_ImportCerts
		dd rva NSS_CMSSignedData_SetDigestValue, rva NSS_CMSSignedData_SetDigests
		dd rva NSS_CMSSignedData_SignerInfoCount, rva NSS_CMSSignedData_VerifyCertsOnly
		dd rva NSS_CMSSignedData_VerifySignerInfo, rva NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs
		dd rva NSS_CMSSignerInfo_AddSMIMECaps, rva NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs
		dd rva NSS_CMSSignerInfo_AddSigningTime, rva NSS_CMSSignerInfo_Create
		dd rva NSS_CMSSignerInfo_CreateWithSubjKeyID, rva NSS_CMSSignerInfo_Destroy
		dd rva NSS_CMSSignerInfo_GetCertList, rva NSS_CMSSignerInfo_GetSignerCommonName
		dd rva NSS_CMSSignerInfo_GetSignerEmailAddress,	rva NSS_CMSSignerInfo_GetSigningCertificate
		dd rva NSS_CMSSignerInfo_GetSigningTime, rva NSS_CMSSignerInfo_GetVerificationStatus
		dd rva NSS_CMSSignerInfo_GetVersion, rva NSS_CMSSignerInfo_IncludeCerts
		dd rva NSS_CMSSignerInfo_Verify, rva NSS_CMSType_RegisterContentType
		dd rva NSS_CMSUtil_VerificationStatusToString, rva NSS_Get_NSSCMSGenericWrapperDataTemplate
		dd rva NSS_Get_NSS_PointerToCMSGenericWrapperDataTemplate
		dd rva NSS_SMIMESignerInfo_SaveSMIMEProfile, rva NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs
		dd rva NSS_SMIMEUtil_FindBulkAlgForRecipients, rva SECMIME_DecryptionAllowed
		dd rva SEC_PKCS12AddCertAndKey,	rva SEC_PKCS12AddCertOrChainAndKey
		dd rva SEC_PKCS12AddPasswordIntegrity, rva SEC_PKCS12CreateExportContext
		dd rva SEC_PKCS12CreatePasswordPrivSafe, rva SEC_PKCS12CreateUnencryptedSafe
		dd rva SEC_PKCS12DecoderFinish,	rva SEC_PKCS12DecoderGetCerts
		dd rva SEC_PKCS12DecoderImportBags, rva	SEC_PKCS12DecoderIterateInit
		dd rva SEC_PKCS12DecoderIterateNext, rva SEC_PKCS12DecoderSetTargetTokenCAs
		dd rva SEC_PKCS12DecoderStart, rva SEC_PKCS12DecoderUpdate
		dd rva SEC_PKCS12DecoderValidateBags, rva SEC_PKCS12DecoderVerify
		dd rva SEC_PKCS12DecryptionAllowed, rva	SEC_PKCS12DestroyExportContext
		dd rva SEC_PKCS12EnableCipher, rva SEC_PKCS12Encode, rva SEC_PKCS12IsEncryptionAllowed
		dd rva SEC_PKCS12SetPreferredCipher, rva SEC_PKCS7AddCertificate
		dd rva SEC_PKCS7AddRecipient, rva SEC_PKCS7AddSigningTime
		dd rva SEC_PKCS7ContainsCertsOrCrls, rva SEC_PKCS7ContentIsEncrypted
		dd rva SEC_PKCS7ContentIsSigned, rva SEC_PKCS7ContentType
		dd rva SEC_PKCS7CopyContentInfo, rva SEC_PKCS7CreateCertsOnly
		dd rva SEC_PKCS7CreateData, rva	SEC_PKCS7CreateEncryptedData
		dd rva SEC_PKCS7CreateEnvelopedData, rva SEC_PKCS7CreateSignedData
		dd rva SEC_PKCS7DecodeItem, rva	SEC_PKCS7DecoderAbort
		dd rva SEC_PKCS7DecoderFinish, rva SEC_PKCS7DecoderStart
		dd rva SEC_PKCS7DecoderUpdate, rva SEC_PKCS7DecryptContents
		dd rva SEC_PKCS7DestroyContentInfo, rva	SEC_PKCS7Encode
		dd rva SEC_PKCS7EncodeItem, rva	SEC_PKCS7EncoderAbort
		dd rva SEC_PKCS7EncoderFinish, rva SEC_PKCS7EncoderStart
		dd rva SEC_PKCS7EncoderUpdate, rva SEC_PKCS7GetCertificateList
		dd rva SEC_PKCS7GetContent, rva	SEC_PKCS7GetEncryptionAlgorithm
		dd rva SEC_PKCS7GetSignerCommonName, rva SEC_PKCS7GetSignerEmailAddress
		dd rva SEC_PKCS7GetSigningTime,	rva SEC_PKCS7IncludeCertChain
		dd rva SEC_PKCS7IsContentEmpty,	rva SEC_PKCS7SetContent
		dd rva SEC_PKCS7VerifyDetachedSignature, rva SEC_PKCS7VerifyDetachedSignatureAtTime
		dd rva SEC_PKCS7VerifySignature
;
; Export Names Table for smime3.dll
;
off_10016D60	dd rva aCert_convertan,	rva aCert_decodecer, rva aCert_decodec_0
					; DATA XREF: .rdata:10016AC0o
		dd rva aNsssmime_getve,	rva aNsssmime_versi, rva aNss_cmscontent ; "CERT_ConvertAndDecodeCertificate"
		dd rva aNss_cmsconte_0,	rva aNss_cmsconte_1, rva aNss_cmsconte_2
		dd rva aNss_cmsconte_3,	rva aNss_cmsconte_4, rva aNss_cmsconte_5
		dd rva aNss_cmsconte_6,	rva aNss_cmsconte_7, rva aNss_cmsconte_8
		dd rva aNss_cmsconte_9,	rva aNss_cmscont_10, rva aNss_cmscont_11
		dd rva aNss_cmscont_12,	rva aNss_cmsderenco, rva aNss_cmsdecoder
		dd rva aNss_cmsdecod_0,	rva aNss_cmsdecod_1, rva aNss_cmsdecod_2
		dd rva aNss_cmsdigestc,	rva aNss_cmsdiges_0, rva aNss_cmsdiges_1
		dd rva aNss_cmsdiges_2,	rva aNss_cmsdiges_3, rva aNss_cmsdiges_4
		dd rva aNss_cmsdigeste,	rva aNss_cmsdiges_5, rva aNss_cmsdiges_6
		dd rva aNss_cmsencoder,	rva aNss_cmsencod_0, rva aNss_cmsencod_1
		dd rva aNss_cmsencod_2,	rva aNss_cmsencrypt, rva aNss_cmsencry_0
		dd rva aNss_cmsencry_1,	rva aNss_cmsenvelop, rva aNss_cmsenvel_0
		dd rva aNss_cmsenvel_1,	rva aNss_cmsenvel_2, rva aNss_cmsmessage
		dd rva aNss_cmsmessa_0,	rva aNss_cmsmessa_1, rva aNss_cmsmessa_2
		dd rva aNss_cmsmessa_3,	rva aNss_cmsmessa_4, rva aNss_cmsmessa_5
		dd rva aNss_cmsmessa_6,	rva aNss_cmsmessa_7, rva aNss_cmsmessa_8
		dd rva aNss_cmsrecipie,	rva aNss_cmsrecip_0, rva aNss_cmsrecip_1
		dd rva aNss_cmsrecip_2,	rva aNss_cmsrecip_3, rva aNss_cmsrecip_4
		dd rva aNss_cmsrecip_5,	rva aNss_cmsrecip_6, rva aNss_cmsrecip_7
		dd rva aNss_cmsrecip_8,	rva aNss_cmssignedd, rva aNss_cmssigne_0
		dd rva aNss_cmssigne_1,	rva aNss_cmssigne_2, rva aNss_cmssigne_3
		dd rva aNss_cmssigne_4,	rva aNss_cmssigne_5, rva aNss_cmssigne_6
		dd rva aNss_cmssigne_7,	rva aNss_cmssigne_8, rva aNss_cmssigne_9
		dd rva aNss_cmssign_10,	rva aNss_cmssign_11, rva aNss_cmssign_12
		dd rva aNss_cmssign_13,	rva aNss_cmssign_14, rva aNss_cmssign_15
		dd rva aNss_cmssign_16,	rva aNss_cmssigneri, rva aNss_cmssign_17
		dd rva aNss_cmssign_18,	rva aNss_cmssign_19, rva aNss_cmssign_20
		dd rva aNss_cmssign_21,	rva aNss_cmssign_22, rva aNss_cmssign_23
		dd rva aNss_cmssign_24,	rva aNss_cmssign_25, rva aNss_cmssign_26
		dd rva aNss_cmssign_27,	rva aNss_cmssign_28, rva aNss_cmssign_29
		dd rva aNss_cmssign_30,	rva aNss_cmssign_31, rva aNss_cmstype_re
		dd rva aNss_cmsutil_ve,	rva aNss_get_nsscms, rva aNss_get_nss_po
		dd rva aNss_smimesigne,	rva aNss_smimeutil_, rva aNss_smimeuti_0
		dd rva aSecmime_decryp,	rva aSec_pkcs12addc, rva aSec_pkcs12ad_0
		dd rva aSec_pkcs12addp,	rva aSec_pkcs12crea, rva aSec_pkcs12cr_0
		dd rva aSec_pkcs12cr_1,	rva aSec_pkcs12deco, rva aSec_pkcs12de_0
		dd rva aSec_pkcs12de_1,	rva aSec_pkcs12de_2, rva aSec_pkcs12de_3
		dd rva aSec_pkcs12de_4,	rva aSec_pkcs12de_5, rva aSec_pkcs12de_6
		dd rva aSec_pkcs12de_7,	rva aSec_pkcs12de_8, rva aSec_pkcs12decr
		dd rva aSec_pkcs12dest,	rva aSec_pkcs12enab, rva aSec_pkcs12enco
		dd rva aSec_pkcs12isen,	rva aSec_pkcs12setp, rva aSec_pkcs7addce
		dd rva aSec_pkcs7addre,	rva aSec_pkcs7addsi, rva aSec_pkcs7conta
		dd rva aSec_pkcs7conte,	rva aSec_pkcs7con_0, rva aSec_pkcs7con_1
		dd rva aSec_pkcs7copyc,	rva aSec_pkcs7creat, rva aSec_pkcs7cre_0
		dd rva aSec_pkcs7cre_1,	rva aSec_pkcs7cre_2, rva aSec_pkcs7cre_3
		dd rva aSec_pkcs7decod,	rva aSec_pkcs7dec_0, rva aSec_pkcs7dec_1
		dd rva aSec_pkcs7dec_2,	rva aSec_pkcs7dec_3, rva aSec_pkcs7decry
		dd rva aSec_pkcs7destr,	rva aSec_pkcs7encod, rva aSec_pkcs7enc_0
		dd rva aSec_pkcs7enc_1,	rva aSec_pkcs7enc_2, rva aSec_pkcs7enc_3
		dd rva aSec_pkcs7enc_4,	rva aSec_pkcs7getce, rva aSec_pkcs7getco
		dd rva aSec_pkcs7geten,	rva aSec_pkcs7getsi, rva aSec_pkcs7get_0
		dd rva aSec_pkcs7get_1,	rva aSec_pkcs7inclu, rva aSec_pkcs7iscon
		dd rva aSec_pkcs7setco,	rva aSec_pkcs7verif, rva aSec_pkcs7ver_0
		dd rva aSec_pkcs7ver_1
;
; Export Ordinals Table	for smime3.dll
;
word_10016FF8	dw 0, 1, 2, 3, 4, 5, 6,	7, 8, 9, 0Ah, 0Bh, 0Ch,	0Dh, 0Eh
					; DATA XREF: .rdata:10016AC4o
		dw 0Fh,	10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h,	18h, 19h
		dw 1Ah,	1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h,	23h, 24h
		dw 25h,	26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh,	2Eh, 2Fh
		dw 30h,	31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h,	39h, 3Ah
		dw 3Bh,	3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h,	44h, 45h
		dw 46h,	47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh,	4Fh, 50h
		dw 51h,	52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h,	5Ah, 5Bh
		dw 5Ch,	5Dh, 5Eh, 5Fh, 60h, 61h, 62h, 63h, 64h,	65h, 66h
		dw 67h,	68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh,	70h, 71h
		dw 72h,	73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah,	7Bh, 7Ch
		dw 7Dh,	7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h,	86h, 87h
		dw 88h,	89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h,	91h, 92h
		dw 93h,	94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh,	9Ch, 9Dh
		dw 9Eh,	9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h
aSmime3_dll	db 'smime3.dll',0       ; DATA XREF: .rdata:10016AACo
aCert_convertan	db 'CERT_ConvertAndDecodeCertificate',0 ; DATA XREF: .rdata:off_10016D60o
aCert_decodecer	db 'CERT_DecodeCertFromPackage',0 ; DATA XREF: .rdata:off_10016D60o
aCert_decodec_0	db 'CERT_DecodeCertPackage',0 ; DATA XREF: .rdata:off_10016D60o
aNsssmime_getve	db 'NSSSMIME_GetVersion',0 ; DATA XREF: .rdata:off_10016D60o
aNsssmime_versi	db 'NSSSMIME_VersionCheck',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmscontent	db 'NSS_CMSContentInfo_GetBulkKey',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_0	db 'NSS_CMSContentInfo_GetBulkKeySize',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_1	db 'NSS_CMSContentInfo_GetContent',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_2	db 'NSS_CMSContentInfo_GetContentEncAlgTag',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_3	db 'NSS_CMSContentInfo_GetContentTypeTag',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_4	db 'NSS_CMSContentInfo_SetBulkKey',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_5	db 'NSS_CMSContentInfo_SetContent',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_6	db 'NSS_CMSContentInfo_SetContentEncAlg',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_7	db 'NSS_CMSContentInfo_SetContent_Data',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_8	db 'NSS_CMSContentInfo_SetContent_DigestedData',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmsconte_9	db 'NSS_CMSContentInfo_SetContent_EncryptedData',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmscont_10	db 'NSS_CMSContentInfo_SetContent_EnvelopedData',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmscont_11	db 'NSS_CMSContentInfo_SetContent_SignedData',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmscont_12	db 'NSS_CMSContentInfo_SetDontStream',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsderenco	db 'NSS_CMSDEREncode',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdecoder	db 'NSS_CMSDecoder_Cancel',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdecod_0	db 'NSS_CMSDecoder_Finish',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdecod_1	db 'NSS_CMSDecoder_Start',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdecod_2	db 'NSS_CMSDecoder_Update',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdigestc	db 'NSS_CMSDigestContext_Cancel',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdiges_0	db 'NSS_CMSDigestContext_FinishMultiple',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdiges_1	db 'NSS_CMSDigestContext_FinishSingle',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdiges_2	db 'NSS_CMSDigestContext_StartMultiple',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdiges_3	db 'NSS_CMSDigestContext_StartSingle',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdiges_4	db 'NSS_CMSDigestContext_Update',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdigeste	db 'NSS_CMSDigestedData_Create',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdiges_5	db 'NSS_CMSDigestedData_Destroy',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsdiges_6	db 'NSS_CMSDigestedData_GetContentInfo',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsencoder	db 'NSS_CMSEncoder_Cancel',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsencod_0	db 'NSS_CMSEncoder_Finish',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsencod_1	db 'NSS_CMSEncoder_Start',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsencod_2	db 'NSS_CMSEncoder_Update',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsencrypt	db 'NSS_CMSEncryptedData_Create',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsencry_0	db 'NSS_CMSEncryptedData_Destroy',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsencry_1	db 'NSS_CMSEncryptedData_GetContentInfo',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsenvelop	db 'NSS_CMSEnvelopedData_AddRecipient',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsenvel_0	db 'NSS_CMSEnvelopedData_Create',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsenvel_1	db 'NSS_CMSEnvelopedData_Destroy',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsenvel_2	db 'NSS_CMSEnvelopedData_GetContentInfo',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessage	db 'NSS_CMSMessage_ContentLevel',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessa_0	db 'NSS_CMSMessage_ContentLevelCount',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessa_1	db 'NSS_CMSMessage_Copy',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessa_2	db 'NSS_CMSMessage_Create',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessa_3	db 'NSS_CMSMessage_CreateFromDER',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessa_4	db 'NSS_CMSMessage_Destroy',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessa_5	db 'NSS_CMSMessage_GetContent',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessa_6	db 'NSS_CMSMessage_GetContentInfo',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessa_7	db 'NSS_CMSMessage_IsEncrypted',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsmessa_8	db 'NSS_CMSMessage_IsSigned',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecipie	db 'NSS_CMSRecipientInfo_Create',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecip_0	db 'NSS_CMSRecipientInfo_CreateFromDER',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecip_1	db 'NSS_CMSRecipientInfo_CreateNew',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecip_2	db 'NSS_CMSRecipientInfo_CreateWithSubjKeyID',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecip_3	db 'NSS_CMSRecipientInfo_CreateWithSubjKeyIDFromCert',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecip_4	db 'NSS_CMSRecipientInfo_Destroy',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecip_5	db 'NSS_CMSRecipientInfo_Encode',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecip_6	db 'NSS_CMSRecipientInfo_GetCertAndKey',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecip_7	db 'NSS_CMSRecipientInfo_UnwrapBulkKey',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsrecip_8	db 'NSS_CMSRecipientInfo_WrapBulkKey',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssignedd	db 'NSS_CMSSignedData_AddCertChain',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_0	db 'NSS_CMSSignedData_AddCertList',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_1	db 'NSS_CMSSignedData_AddCertificate',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_2	db 'NSS_CMSSignedData_AddDigest',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_3	db 'NSS_CMSSignedData_AddSignerInfo',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_4	db 'NSS_CMSSignedData_Create',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_5	db 'NSS_CMSSignedData_CreateCertsOnly',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_6	db 'NSS_CMSSignedData_Destroy',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_7	db 'NSS_CMSSignedData_GetContentInfo',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_8	db 'NSS_CMSSignedData_GetDigestAlgs',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigne_9	db 'NSS_CMSSignedData_GetSignerInfo',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_10	db 'NSS_CMSSignedData_HasDigests',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_11	db 'NSS_CMSSignedData_ImportCerts',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_12	db 'NSS_CMSSignedData_SetDigestValue',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_13	db 'NSS_CMSSignedData_SetDigests',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_14	db 'NSS_CMSSignedData_SignerInfoCount',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_15	db 'NSS_CMSSignedData_VerifyCertsOnly',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_16	db 'NSS_CMSSignedData_VerifySignerInfo',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssigneri	db 'NSS_CMSSignerInfo_AddMSSMIMEEncKeyPrefs',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_17	db 'NSS_CMSSignerInfo_AddSMIMECaps',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_18	db 'NSS_CMSSignerInfo_AddSMIMEEncKeyPrefs',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_19	db 'NSS_CMSSignerInfo_AddSigningTime',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_20	db 'NSS_CMSSignerInfo_Create',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_21	db 'NSS_CMSSignerInfo_CreateWithSubjKeyID',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_22	db 'NSS_CMSSignerInfo_Destroy',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_23	db 'NSS_CMSSignerInfo_GetCertList',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_24	db 'NSS_CMSSignerInfo_GetSignerCommonName',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_25	db 'NSS_CMSSignerInfo_GetSignerEmailAddress',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_26	db 'NSS_CMSSignerInfo_GetSigningCertificate',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_27	db 'NSS_CMSSignerInfo_GetSigningTime',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_28	db 'NSS_CMSSignerInfo_GetVerificationStatus',0
					; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_29	db 'NSS_CMSSignerInfo_GetVersion',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_30	db 'NSS_CMSSignerInfo_IncludeCerts',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmssign_31	db 'NSS_CMSSignerInfo_Verify',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmstype_re	db 'NSS_CMSType_RegisterContentType',0 ; DATA XREF: .rdata:off_10016D60o
aNss_cmsutil_ve	db 'NSS_CMSUtil_VerificationStatusToString',0
					; DATA XREF: .rdata:off_10016D60o
aNss_get_nsscms	db 'NSS_Get_NSSCMSGenericWrapperDataTemplate',0
					; DATA XREF: .rdata:off_10016D60o
aNss_get_nss_po	db 'NSS_Get_NSS_PointerToCMSGenericWrapperDataTemplate',0
					; DATA XREF: .rdata:off_10016D60o
aNss_smimesigne	db 'NSS_SMIMESignerInfo_SaveSMIMEProfile',0
					; DATA XREF: .rdata:off_10016D60o
aNss_smimeutil_	db 'NSS_SMIMEUtil_CreateMSSMIMEEncKeyPrefs',0
					; DATA XREF: .rdata:off_10016D60o
aNss_smimeuti_0	db 'NSS_SMIMEUtil_FindBulkAlgForRecipients',0
					; DATA XREF: .rdata:off_10016D60o
aSecmime_decryp	db 'SECMIME_DecryptionAllowed',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12addc	db 'SEC_PKCS12AddCertAndKey',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12ad_0	db 'SEC_PKCS12AddCertOrChainAndKey',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12addp	db 'SEC_PKCS12AddPasswordIntegrity',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12crea	db 'SEC_PKCS12CreateExportContext',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12cr_0	db 'SEC_PKCS12CreatePasswordPrivSafe',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12cr_1	db 'SEC_PKCS12CreateUnencryptedSafe',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12deco	db 'SEC_PKCS12DecoderFinish',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12de_0	db 'SEC_PKCS12DecoderGetCerts',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12de_1	db 'SEC_PKCS12DecoderImportBags',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12de_2	db 'SEC_PKCS12DecoderIterateInit',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12de_3	db 'SEC_PKCS12DecoderIterateNext',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12de_4	db 'SEC_PKCS12DecoderSetTargetTokenCAs',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12de_5	db 'SEC_PKCS12DecoderStart',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12de_6	db 'SEC_PKCS12DecoderUpdate',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12de_7	db 'SEC_PKCS12DecoderValidateBags',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12de_8	db 'SEC_PKCS12DecoderVerify',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12decr	db 'SEC_PKCS12DecryptionAllowed',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12dest	db 'SEC_PKCS12DestroyExportContext',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12enab	db 'SEC_PKCS12EnableCipher',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12enco	db 'SEC_PKCS12Encode',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12isen	db 'SEC_PKCS12IsEncryptionAllowed',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs12setp	db 'SEC_PKCS12SetPreferredCipher',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7addce	db 'SEC_PKCS7AddCertificate',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7addre	db 'SEC_PKCS7AddRecipient',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7addsi	db 'SEC_PKCS7AddSigningTime',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7conta	db 'SEC_PKCS7ContainsCertsOrCrls',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7conte	db 'SEC_PKCS7ContentIsEncrypted',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7con_0	db 'SEC_PKCS7ContentIsSigned',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7con_1	db 'SEC_PKCS7ContentType',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7copyc	db 'SEC_PKCS7CopyContentInfo',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7creat	db 'SEC_PKCS7CreateCertsOnly',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7cre_0	db 'SEC_PKCS7CreateData',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7cre_1	db 'SEC_PKCS7CreateEncryptedData',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7cre_2	db 'SEC_PKCS7CreateEnvelopedData',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7cre_3	db 'SEC_PKCS7CreateSignedData',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7decod	db 'SEC_PKCS7DecodeItem',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7dec_0	db 'SEC_PKCS7DecoderAbort',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7dec_1	db 'SEC_PKCS7DecoderFinish',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7dec_2	db 'SEC_PKCS7DecoderStart',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7dec_3	db 'SEC_PKCS7DecoderUpdate',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7decry	db 'SEC_PKCS7DecryptContents',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7destr	db 'SEC_PKCS7DestroyContentInfo',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7encod	db 'SEC_PKCS7Encode',0  ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7enc_0	db 'SEC_PKCS7EncodeItem',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7enc_1	db 'SEC_PKCS7EncoderAbort',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7enc_2	db 'SEC_PKCS7EncoderFinish',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7enc_3	db 'SEC_PKCS7EncoderStart',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7enc_4	db 'SEC_PKCS7EncoderUpdate',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7getce	db 'SEC_PKCS7GetCertificateList',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7getco	db 'SEC_PKCS7GetContent',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7geten	db 'SEC_PKCS7GetEncryptionAlgorithm',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7getsi	db 'SEC_PKCS7GetSignerCommonName',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7get_0	db 'SEC_PKCS7GetSignerEmailAddress',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7get_1	db 'SEC_PKCS7GetSigningTime',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7inclu	db 'SEC_PKCS7IncludeCertChain',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7iscon	db 'SEC_PKCS7IsContentEmpty',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7setco	db 'SEC_PKCS7SetContent',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7verif	db 'SEC_PKCS7VerifyDetachedSignature',0 ; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7ver_0	db 'SEC_PKCS7VerifyDetachedSignatureAtTime',0
					; DATA XREF: .rdata:off_10016D60o
aSec_pkcs7ver_1	db 'SEC_PKCS7VerifySignature',0 ; DATA XREF: .rdata:off_10016D60o
		align 1000h
_rdata		ends

; Section 3. (virtual address 00019000)
; Virtual size			: 00000878 (   2168.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00017400
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 10019000h
dword_10019000	dd 280102h, 400102h, 80000202h ; DATA XREF: .data:10019010o
					; .data:1001901Co ...
dword_1001900C	dd 0			; DATA XREF: .data:off_10019038o
		dd offset dword_10019000
dword_10019014	dd 3, 0			; DATA XREF: .data:10019060o
		dd offset dword_10019000+4
dword_10019020	dd 3, 0			; DATA XREF: .data:10019074o
		dd offset dword_10019000+8
		dd 4
dword_10019030	dd 10001h		; DATA XREF: sub_10007700+2o
					; sub_10007720+BDr ...
dword_10019034	dd 5			; DATA XREF: NSS_SMIMEUtil_FindBulkAlgForRecipients+32r
off_10019038	dd offset dword_1001900C ; DATA	XREF: sub_10007720+17o
					; sub_10007BA0+84o
		dd 1
dword_10019040	dd 1, 10009h, 0Ah, 0	; DATA XREF: sub_100077F0+289o
		dd 2 dup(1), 10002h, 5
		dd offset dword_10019014+4
		dd 2 dup(1), 10003h, 5
		dd offset dword_10019020+4
		dd 2 dup(1), 1000Ah, 7,	0
		dd 2 dup(1), 1000Bh, 0B8h, 0
		dd 2 dup(1), 1000Ch, 0BCh
dword_100190B0	dd 0			; DATA XREF: sub_10007BA0+1Co
		dd 2 dup(1)
dword_100190BC	dd 0			; DATA XREF: sub_10007700+Fo
					; sub_100077F0+21o ...
dword_100190C0	dd 6			; DATA XREF: SEC_PKCS12DecryptionAllowed+1Br
					; SEC_PKCS12DecryptionAllowed+44r ...
dword_100190C4	dd 28h			; DATA XREF: sub_10007720+A0o
					; SEC_PKCS12DecryptionAllowed+36r
dword_100190C8	dd 20009h		; DATA XREF: SEC_PKCS12EnableCipher+2r
					; SEC_PKCS12EnableCipher+Eo ...
dword_100190CC	dd 0			; DATA XREF: sub_100077F0+2B5o
					; SEC_PKCS12DecryptionAllowed+59r ...
dword_100190D0	dd 0			; DATA XREF: SEC_PKCS12SetPreferredCipher:loc_100083B2r
					; SEC_PKCS12SetPreferredCipher+2Aw ...
		dd 6, 80h, 2000Ah, 2 dup(0)
		dd 5, 28h, 20001h, 0
		dd 1, 5, 80h, 20002h, 2	dup(0)
		dd 0Ah,	40h, 20011h, 2 dup(0)
		dd 7, 0C0h, 20012h, 0Ch	dup(0)
dword_10019160	dd 280102h, 400102h, 80000202h,	0 ; DATA XREF: .data:10019170o
					; .data:1001917Co ...
		dd offset dword_10019160
dword_10019174	dd 3, 0			; DATA XREF: .data:100191A4o
		dd offset dword_10019160+4
dword_10019180	dd 3, 0			; DATA XREF: .data:100191B0o
		dd offset dword_10019160+8
		dd 4, 10001h, 5
		dd offset dword_10019160+0Ch
		dd 10002h, 5
		dd offset dword_10019174+4
		dd 10003h, 5
		dd offset dword_10019180+4
		dd 10009h, 0Ah,	0
		dd 1000Ah, 7, 0
		dd 1
___security_cookie dd 0BB40E64Eh	; DATA XREF: NSS_CMSDigestContext_FinishMultiple+3r
					; __security_check_cookie(x)r ...
dword_100191D4	dd 44BF19B1h		; DATA XREF: sub_10012441+B0r
					; sub_10012786+2Bw ...
		align 10h
dword_100191E0	dd 19930520h, 3	dup(0)	; DATA XREF: .text:100125CAo
					; sub_100125D1+2o
dword_100191F0	dd 0FFFFFFFFh		; DATA XREF: DllEntryPoint-242w
					; sub_10012420w
		dd 0FFFFFFFFh, 400h, 0FFFFFC01h, 35h, 0Bh, 40h,	3FFh, 80h
		dd 0FFFFFF81h, 18h, 8, 20h, 7Fh, 2 dup(0)
		dd 4002A000h, 2	dup(0)
		dd 4005C800h, 2	dup(0)
		dd 4008FA00h, 2	dup(0)
		dd 400C9C40h, 2	dup(0)
		dd 400FC350h, 2	dup(0)
		dd 4012F424h, 0
		dd 80000000h, 40169896h, 0
		dd 20000000h, 4019BEBCh, 0
		dd 0C9BF0400h, 40348E1Bh, 0A1000000h, 1BCECCEDh, 404ED3C2h
		dd 0B59EF020h, 0ADA82B70h, 40699DC5h, 25FD5DD0h, 4F8E1AE5h
		dd 4083EB19h, 95D79671h, 8D050E43h, 409EAF29h, 44A0BFF9h
		dd 8F1281EDh, 40B98281h, 0A6D53CBFh, 1F49FFCFh,	40D3C278h
		dd 8CE0C66Fh, 47C980E9h, 41A893BAh, 556B85BCh, 0F78D3927h
		dd 427CE070h, 0DE8EDDBCh, 0EBFB9DF9h, 4351AA7Eh, 0E376E6A1h
		dd 2F29F2CCh, 44268184h, 0AA171028h, 0E310AEF8h, 44FAC4C5h
		dd 0F3D4A7EBh, 4AE1EBF7h, 45CF957Ah, 91C7CC65h,	0A0AEA60Eh
		dd 46A3E319h, 0C17650Dh, 75868175h, 4D48C976h, 0A7E44258h
		dd 353B3993h, 53EDB2B8h, 5DE5A74Dh, 3B5DC53Dh, 5A929E8Bh
		dd 0F0A65DFFh, 54C020A1h, 61378CA5h, 5A8BFDD1h,	5D25D88Bh
		dd 67DBF989h, 0F3F895AAh, 0C8A2BF27h, 6E80DD5Dh, 979BC94Ch
		dd 52028A20h, 7525C460h, 0
		dd 0CCCDCCCDh, 0CCCCCCCCh, 3FFBCCCCh, 0D70A3D71h, 0A3D70A3h
		dd 3FF8A3D7h, 0DF3B645Ah, 6E978D4Fh, 3FF58312h,	652CD3C3h
		dd 1758E219h, 3FF1D1B7h, 84230FD0h, 0AC471B47h,	3FEEA7C5h
		dd 69B6A640h, 0BD05AF6Ch, 3FEB8637h, 42BC3D33h,	94D5E57Ah
		dd 3FE7D6BFh, 0CEFDFDC2h, 77118461h, 3FE4ABCCh,	0E15B4C2Fh
		dd 94BEC44Dh, 3FC9E695h, 3B53C492h, 14CD4475h, 3FAF9ABEh
		dd 94BA67DEh, 1EAD4539h, 3F94CFB1h, 0E2C62324h,	313BBABCh
		dd 3F7A8B61h, 0C1595561h, 7C53B17Eh, 3F5FBB12h,	8D2FEED7h
		dd 8592BE06h, 3F44FB15h, 0E9A53F24h, 0EA27A539h, 3F2AA87Fh
		dd 0E4A1AC7Dh, 467C64BCh, 3E55DDD0h, 0CC067B63h, 83775423h
		dd 3D8191FFh, 193AFA91h, 4325637Ah, 3CACC031h, 38D18921h
		dd 0B8974782h, 3BD7FD00h, 85888DCh, 0E3E8B11Bh,	3B03A686h
		dd 424584C6h, 7599B607h, 3A2EDB37h, 0D21C7133h,	0EE32DB23h
		dd 395A9049h, 0C0BE87A6h, 82A5DA57h, 32B5A2A6h,	11B268E2h
		dd 449F52A7h, 2C10B759h, 2DE44925h, 534F3436h, 256BCEAEh
		dd 0A404598Fh, 7DC2DEC0h, 1EC6E8FBh, 5A88E79Eh,	0BF3C9157h
		dd 18228350h, 62654B4Eh, 0AF8F83FDh, 117D9406h,	9FDE2DE4h
		dd 4C8D2CEh, 0AD8A6DDh,	3 dup(0)
dword_100194F0	dd 0			; DATA XREF: sub_10006A80:loc_10006AAFr
					; sub_10006A80+43w ...
dword_100194F4	dd 0			; DATA XREF: sub_10006A80:loc_10006A93r
					; sub_10006A80+25w ...
dword_100194F8	dd 0			; DATA XREF: sub_10006A80+9Fw
					; .text:10006BD3o ...
dword_100194FC	dd 0			; DATA XREF: sub_10006A80+A4w
dword_10019500	dd 0			; DATA XREF: sub_10006A80+AAw
dword_10019504	dd 0			; DATA XREF: sub_10006A80r
					; sub_10006A80:loc_10006AE4r ...
dword_10019508	dd 0			; DATA XREF: sub_10006A80+8Er
dword_1001950C	dd 0			; DATA XREF: sub_10006A80+93r
dword_10019510	dd 0			; DATA XREF: sub_10006A80+99r
dword_10019514	dd 0			; DATA XREF: sub_10006A80:loc_10006ACDr
					; .text:10006B7Bw ...
		dd 6 dup(0)
dword_10019530	dd 0			; DATA XREF: SECMIME_DecryptionAllowed+29r
dword_10019534	dd 0			; DATA XREF: sub_10012048+Fr
					; sub_10012048+17w ...
dword_10019538	dd 0			; DATA XREF: DllEntryPoint-20Fw
					; DllEntryPoint-60r
		align 10h
dword_10019540	dd 0			; DATA XREF: sub_10012441+91w
					; .rdata:ExceptionInfoo
dword_10019544	dd 0			; DATA XREF: sub_10012441+9Bw
		dd 0
dword_1001954C	dd 0			; DATA XREF: sub_10012441+8Cw
		dd 10h dup(0)
dword_10019590	dd 0			; DATA XREF: sub_10012441+7Dw
					; .rdata:ExceptionInfoo
		dd 1Bh dup(0)
		dd 7 dup(?)
word_1001961C	dw ?			; DATA XREF: sub_10012441+51w
		align 10h
word_10019620	dw ?			; DATA XREF: sub_10012441+4Aw
		align 4
word_10019624	dw ?			; DATA XREF: sub_10012441+43w
		align 4
word_10019628	dw ?			; DATA XREF: sub_10012441+3Cw
		align 4
dword_1001962C	dd ?			; DATA XREF: sub_10012441+28w
dword_10019630	dd ?			; DATA XREF: sub_10012441+22w
dword_10019634	dd ?			; DATA XREF: sub_10012441+1Cw
dword_10019638	dd ?			; DATA XREF: sub_10012441+16w
dword_1001963C	dd ?			; DATA XREF: sub_10012441+10w
dword_10019640	dd ?			; DATA XREF: sub_10012441+Bw
dword_10019644	dd ?			; DATA XREF: sub_10012441+62w
dword_10019648	dd ?			; DATA XREF: sub_10012441+6Aw
					; sub_10012441+87r
word_1001964C	dw ?			; DATA XREF: sub_10012441+35w
		align 10h
dword_10019650	dd ?			; DATA XREF: sub_10012441+59w
dword_10019654	dd ?			; DATA XREF: sub_10012441+72w
word_10019658	dw ?			; DATA XREF: sub_10012441+2Ew
		align 4
		dd 80h dup(?)
dword_1001985C	dd ?			; DATA XREF: sub_10012048:loc_100120C4r
					; sub_10012048+9Bw ...
; volatile LONG	Target
Target		dd ?			; DATA XREF: sub_10012048+24o
					; sub_10012048+53o
dword_10019864	dd ?			; DATA XREF: sub_10012026+11w
					; sub_10012048+13Ar ...
; void *Memory
Memory		dd ?			; DATA XREF: sub_10012026+Cw
					; sub_10012048:loc_10012178r ...
dword_1001986C	dd ?			; DATA XREF: DllEntryPoint:loc_10012210r
					; DllEntryPoint-E6r ...
dword_10019870	dd ?			; DATA XREF: sub_10012048:loc_10012122r
					; sub_10012048+E2o ...
dword_10019874	dd ?			; DATA XREF: sub_10011E60+E6r
					; sub_10011E60+EFo ...
		align 800h
_data		ends


		end DllEntryPoint
