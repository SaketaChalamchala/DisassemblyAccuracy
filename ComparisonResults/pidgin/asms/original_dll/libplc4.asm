;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7B976440275BE8F373095F37608DBCFA
; Input	CRC32 :	9665704A

; File Name   :	C:\compspace\compare\pidgin\dlls\original\libplc4.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001F2A (   7978.)
; Section size in file		: 00002000 (   8192.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; Exported entry  41. libVersionPoint

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public libVersionPoint
libVersionPoint	proc near		; DATA XREF: .rdata:off_10003778o
		mov	eax, offset dword_10004000
		retn
libVersionPoint	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. PL_strlen

; =============== S U B	R O U T	I N E =======================================


		public PL_strlen
PL_strlen	proc near		; CODE XREF: PL_CreateLongOptState+B2p
					; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10001019
		retn
; ---------------------------------------------------------------------------

loc_10001019:				; CODE XREF: PL_strlen+6j
		lea	edx, [eax+1]
		lea	esp, [esp+0]

loc_10001020:				; CODE XREF: PL_strlen+15j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001020
		sub	eax, edx
		retn
PL_strlen	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  29. PL_strnlen

; =============== S U B	R O U T	I N E =======================================


		public PL_strnlen
PL_strnlen	proc near		; CODE XREF: PL_strndup+16p
					; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		test	edx, edx
		jnz	short loc_1000103B
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000103B:				; CODE XREF: PL_strnlen+6j
		mov	ecx, [esp+arg_4]
		mov	eax, edx
		test	ecx, ecx
		jz	short loc_1000104E

loc_10001045:				; CODE XREF: PL_strnlen+1Cj
		cmp	byte ptr [eax],	0
		jz	short loc_1000104E
		inc	eax
		dec	ecx
		jnz	short loc_10001045

loc_1000104E:				; CODE XREF: PL_strnlen+13j
					; PL_strnlen+18j
		sub	eax, edx
		retn
PL_strnlen	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. PL_strcpy

; =============== S U B	R O U T	I N E =======================================


		public PL_strcpy
PL_strcpy	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_10001081
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_10001081
		push	esi
		mov	esi, eax
		sub	esi, ecx

loc_10001075:				; CODE XREF: PL_strcpy+1Dj
		mov	dl, [ecx]
		mov	[esi+ecx], dl
		inc	ecx
		test	dl, dl
		jnz	short loc_10001075
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001081:				; CODE XREF: PL_strcpy+6j PL_strcpy+Ej
		xor	eax, eax
		retn
PL_strcpy	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  26. PL_strncpy

; =============== S U B	R O U T	I N E =======================================


		public PL_strncpy
PL_strncpy	proc near		; CODE XREF: PL_strncat+29p
					; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1000109B

loc_10001098:				; CODE XREF: PL_strncpy+11j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000109B:				; CODE XREF: PL_strncpy+6j
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_10001098
		push	edi
		mov	edi, [esp+4+arg_8]
		test	edi, edi
		jz	short loc_100010BF
		push	esi
		mov	esi, eax
		sub	esi, ecx

loc_100010B1:				; CODE XREF: PL_strncpy+2Cj
		mov	dl, [ecx]
		mov	[esi+ecx], dl
		test	dl, dl
		jz	short loc_100010BE
		inc	ecx
		dec	edi
		jnz	short loc_100010B1

loc_100010BE:				; CODE XREF: PL_strncpy+28j
		pop	esi

loc_100010BF:				; CODE XREF: PL_strncpy+1Aj
		pop	edi
		retn
PL_strncpy	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. PL_strncpyz

; =============== S U B	R O U T	I N E =======================================


		public PL_strncpyz
PL_strncpyz	proc near		; CODE XREF: PL_strcatn+34p
					; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_100010DB
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100010DB:				; CODE XREF: PL_strncpyz+6j
		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jnz	short loc_100010E8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100010E8:				; CODE XREF: PL_strncpyz+12j
		push	edi
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jnz	short loc_100010F6
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100010F6:				; CODE XREF: PL_strncpyz+1Fj
		dec	edi
		mov	eax, ecx
		jz	short loc_1000110D
		sub	esi, ecx
		lea	ecx, [ecx+0]

loc_10001100:				; CODE XREF: PL_strncpyz+3Bj
		mov	dl, [esi+ecx]
		mov	[ecx], dl
		test	dl, dl
		jz	short loc_1000110D
		inc	ecx
		dec	edi
		jnz	short loc_10001100

loc_1000110D:				; CODE XREF: PL_strncpyz+29j
					; PL_strncpyz+37j
		pop	edi
		mov	byte ptr [ecx],	0
		pop	esi
		retn
PL_strncpyz	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. PL_strdup

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PL_strdup(void *Src)
		public PL_strdup
PL_strdup	proc near		; DATA XREF: .rdata:off_10003778o

Src		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+Src]
		push	esi
		push	edi
		test	ebx, ebx
		jnz	short loc_10001130
		mov	ebx, offset dword_100030A8

loc_10001130:				; CODE XREF: PL_strdup+9j
		mov	eax, ebx
		lea	edx, [eax+1]

loc_10001135:				; CODE XREF: PL_strdup+1Aj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001135
		sub	eax, edx
		lea	edi, [eax+1]
		push	edi		; Size
		call	ds:malloc
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10001155
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001155:				; CODE XREF: PL_strdup+2Fj
		push	edi		; Size
		push	ebx		; Src
		push	esi		; Dst
		call	memcpy
		add	esp, 0Ch
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
PL_strdup	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  18. PL_strfree

; =============== S U B	R O U T	I N E =======================================


; void __cdecl PL_strfree(void *Memory)
		public PL_strfree
PL_strfree	proc near		; DATA XREF: .rdata:off_10003778o
		jmp	ds:free
PL_strfree	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  28. PL_strndup

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PL_strndup(void *Src, int)
		public PL_strndup
PL_strndup	proc near		; DATA XREF: .rdata:off_10003778o

Src		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+Src]
		push	esi
		push	edi
		test	ebx, ebx
		jnz	short loc_10001190
		mov	ebx, offset dword_100030A8

loc_10001190:				; CODE XREF: PL_strndup+9j
		mov	eax, [esp+0Ch+arg_4]
		push	eax
		push	ebx
		call	PL_strnlen
		mov	edi, eax
		lea	ecx, [edi+1]
		push	ecx		; Size
		call	ds:malloc
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_100011B4
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100011B4:				; CODE XREF: PL_strndup+2Ej
		push	edi		; Size
		push	ebx		; Src
		push	esi		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	byte ptr [esi+edi], 0
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
PL_strndup	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. PL_strcasecmp

; =============== S U B	R O U T	I N E =======================================


		public PL_strcasecmp
PL_strcasecmp	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		test	eax, eax
		jz	short loc_1000122C
		test	ecx, ecx
		jz	short loc_1000122C
		movzx	edx, byte ptr [eax]
		mov	dl, ds:byte_10003150[edx]
		push	esi
		movzx	esi, byte ptr [ecx]
		cmp	dl, ds:byte_10003150[esi]
		jnz	short loc_10001214
		push	ebx

loc_100011F6:				; CODE XREF: PL_strcasecmp+41j
		cmp	byte ptr [eax],	0
		jz	short loc_10001213
		movzx	esi, byte ptr [eax+1]
		movzx	edx, byte ptr [ecx+1]
		mov	bl, ds:byte_10003150[esi]
		inc	eax
		inc	ecx
		cmp	bl, ds:byte_10003150[edx]
		jz	short loc_100011F6

loc_10001213:				; CODE XREF: PL_strcasecmp+29j
		pop	ebx

loc_10001214:				; CODE XREF: PL_strcasecmp+23j
		movzx	eax, byte ptr [eax]
		movzx	ecx, byte ptr [ecx]
		movzx	edx, ds:byte_10003150[ecx]
		movzx	eax, ds:byte_10003150[eax]
		sub	eax, edx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000122C:				; CODE XREF: PL_strcasecmp+Aj
					; PL_strcasecmp+Ej
		sub	eax, ecx
		retn
PL_strcasecmp	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. PL_strncasecmp

; =============== S U B	R O U T	I N E =======================================


		public PL_strncasecmp
PL_strncasecmp	proc near		; CODE XREF: PL_strcasestr+33p
					; PL_strcaserstr+53p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, eax
		test	eax, eax
		jz	short loc_10001299
		test	esi, esi
		jz	short loc_10001299
		push	ebx
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		test	edi, edi
		jz	short loc_10001279
		lea	ecx, [ecx+0]

loc_10001250:				; CODE XREF: PL_strncasecmp+3Dj
		mov	al, [ecx]
		movzx	edx, byte ptr [esi]
		movzx	ebx, al
		mov	bl, ds:byte_10003150[ebx]
		cmp	bl, ds:byte_10003150[edx]
		jnz	short loc_10001275
		test	al, al
		jz	short loc_10001275
		inc	ecx
		inc	esi
		dec	edi
		jnz	short loc_10001250
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001275:				; CODE XREF: PL_strncasecmp+34j
					; PL_strncasecmp+38j
		test	edi, edi
		jnz	short loc_1000127F

loc_10001279:				; CODE XREF: PL_strncasecmp+1Bj
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000127F:				; CODE XREF: PL_strncasecmp+47j
		movzx	eax, byte ptr [esi]
		movzx	edx, ds:byte_10003150[eax]
		movzx	eax, byte ptr [ecx]
		movzx	eax, ds:byte_10003150[eax]
		pop	edi
		pop	ebx
		sub	eax, edx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001299:				; CODE XREF: PL_strncasecmp+Dj
					; PL_strncasecmp+11j
		sub	eax, esi
		pop	esi
		retn
PL_strncasecmp	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. PL_strcasestr

; =============== S U B	R O U T	I N E =======================================


		public PL_strcasestr
PL_strcasestr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		test	esi, esi
		jz	short loc_100012F1
		mov	ebx, [esp+8+arg_4]
		test	ebx, ebx
		jz	short loc_100012F1
		cmp	byte ptr [esi],	0
		jz	short loc_100012F1
		cmp	byte ptr [ebx],	0
		jz	short loc_100012F1
		mov	eax, ebx
		lea	edx, [eax+1]

loc_100012C1:				; CODE XREF: PL_strcasestr+26j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100012C1
		sub	eax, edx
		push	edi
		mov	edi, eax
		lea	ecx, [ecx+0]

loc_100012D0:				; CODE XREF: PL_strcasestr+43j
		push	edi
		push	ebx
		push	esi
		call	PL_strncasecmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100012EB
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_100012D0
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100012EB:				; CODE XREF: PL_strcasestr+3Dj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100012F1:				; CODE XREF: PL_strcasestr+8j
					; PL_strcasestr+10j ...
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
PL_strcasestr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. PL_strcaserstr

; =============== S U B	R O U T	I N E =======================================


		public PL_strcaserstr
PL_strcaserstr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		test	ebx, ebx
		jz	short loc_10001372
		mov	ebp, [esp+8+arg_4]
		test	ebp, ebp
		jz	short loc_10001372
		cmp	byte ptr [ebx],	0
		jz	short loc_10001372
		cmp	byte ptr [ebp+0], 0
		jz	short loc_10001372
		mov	eax, ebx
		lea	edx, [eax+1]

loc_10001322:				; CODE XREF: PL_strcaserstr+27j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001322
		sub	eax, edx
		push	esi
		mov	esi, eax
		mov	eax, ebp
		lea	edx, [eax+1]

loc_10001333:				; CODE XREF: PL_strcaserstr+38j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001333
		sub	eax, edx
		push	edi
		mov	edi, eax
		cmp	esi, edi
		jb	short loc_10001364
		sub	esi, edi
		add	esi, ebx
		cmp	esi, ebx
		jb	short loc_10001364
		jmp	short loc_10001350
; ---------------------------------------------------------------------------
		align 10h

loc_10001350:				; CODE XREF: PL_strcaserstr+4Bj
					; PL_strcaserstr+62j
		push	edi
		push	ebp
		push	esi
		call	PL_strncasecmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000136B
		dec	esi
		cmp	esi, ebx
		jnb	short loc_10001350

loc_10001364:				; CODE XREF: PL_strcaserstr+41j
					; PL_strcaserstr+49j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000136B:				; CODE XREF: PL_strcaserstr+5Dj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001372:				; CODE XREF: PL_strcaserstr+8j
					; PL_strcaserstr+10j ...
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
PL_strcaserstr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. PL_strncasestr

; =============== S U B	R O U T	I N E =======================================


		public PL_strncasestr
PL_strncasestr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_100013E8
		mov	ebp, [esp+8+arg_4]
		test	ebp, ebp
		jz	short loc_100013E8
		cmp	byte ptr [edi],	0
		jz	short loc_100013E8
		cmp	byte ptr [ebp+0], 0
		jz	short loc_100013E8
		mov	eax, ebp
		lea	edx, [eax+1]

loc_100013A2:				; CODE XREF: PL_strncasestr+27j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100013A2
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		sub	eax, edx
		push	esi
		mov	esi, eax
		cmp	esi, ebx
		ja	short loc_100013DA
		mov	eax, 1
		sub	eax, esi
		add	ebx, eax
		jz	short loc_100013DA

loc_100013C2:				; CODE XREF: PL_strncasestr+58j
		cmp	byte ptr [edi],	0
		jz	short loc_100013DA
		push	esi
		push	ebp
		push	edi
		call	PL_strncasecmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100013E1
		inc	edi
		dec	ebx
		jnz	short loc_100013C2

loc_100013DA:				; CODE XREF: PL_strncasestr+35j
					; PL_strncasestr+40j ...
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100013E1:				; CODE XREF: PL_strncasestr+54j
		pop	esi
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100013E8:				; CODE XREF: PL_strncasestr+8j
					; PL_strncasestr+10j ...
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
PL_strncasestr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. PL_strncaserstr

; =============== S U B	R O U T	I N E =======================================


		public PL_strncaserstr
PL_strncaserstr	proc near		; DATA XREF: .rdata:off_10003778o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		test	ebx, ebx
		jz	loc_100014D2
		mov	edx, [esp+8+arg_4]
		test	edx, edx
		jz	loc_100014D2
		cmp	byte ptr [ebx],	0
		jz	loc_100014D2
		cmp	byte ptr [edx],	0
		jz	loc_100014D2
		mov	eax, edx
		push	esi
		lea	esi, [eax+1]

loc_10001422:				; CODE XREF: PL_strncaserstr+37j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001422
		mov	ecx, [esp+0Ch+arg_8]
		sub	eax, esi
		push	edi
		mov	edi, eax
		mov	[esp+10h+var_4], edi
		mov	eax, ebx
		test	ecx, ecx
		jz	short loc_10001449
		lea	esp, [esp+0]

loc_10001440:				; CODE XREF: PL_strncaserstr+57j
		cmp	byte ptr [eax],	0
		jz	short loc_10001449
		inc	eax
		dec	ecx
		jnz	short loc_10001440

loc_10001449:				; CODE XREF: PL_strncaserstr+4Aj
					; PL_strncaserstr+53j
		sub	eax, edi
		cmp	eax, ebx
		jnb	short loc_10001456
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001456:				; CODE XREF: PL_strncaserstr+5Dj
		push	ebp

loc_10001457:				; CODE XREF: PL_strncaserstr+D8j
		mov	esi, eax
		mov	ecx, edx
		test	eax, eax
		jz	short loc_100014BD
		test	edi, edi
		jz	short loc_1000148F
		mov	ebp, eax
		sub	ebp, edx
		jmp	short loc_10001470
; ---------------------------------------------------------------------------
		align 10h

loc_10001470:				; CODE XREF: PL_strncaserstr+77j
					; PL_strncaserstr+9Dj
		movzx	ebx, byte ptr [esi]
		movzx	edx, byte ptr [ecx]
		mov	bl, ds:byte_10003150[ebx]
		cmp	bl, ds:byte_10003150[edx]
		jnz	short loc_10001495
		cmp	byte ptr [ecx+ebp], 0
		jz	short loc_10001495
		inc	esi
		inc	ecx
		dec	edi
		jnz	short loc_10001470

loc_1000148F:				; CODE XREF: PL_strncaserstr+71j
					; PL_strncaserstr+A7j ...
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001495:				; CODE XREF: PL_strncaserstr+92j
					; PL_strncaserstr+98j
		test	edi, edi
		jz	short loc_1000148F
		movzx	ecx, byte ptr [ecx]
		movzx	edx, ds:byte_10003150[ecx]
		movzx	ecx, byte ptr [esi]
		movzx	ecx, ds:byte_10003150[ecx]
		mov	ebx, [esp+14h+arg_0]
		mov	edi, [esp+14h+var_4]
		sub	ecx, edx
		mov	edx, [esp+14h+arg_4]
		jmp	short loc_100014C1
; ---------------------------------------------------------------------------

loc_100014BD:				; CODE XREF: PL_strncaserstr+6Dj
		mov	ecx, edx
		neg	ecx

loc_100014C1:				; CODE XREF: PL_strncaserstr+CBj
		test	ecx, ecx
		jz	short loc_1000148F
		dec	eax
		cmp	eax, ebx
		jnb	short loc_10001457
		pop	ebp
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100014D2:				; CODE XREF: PL_strncaserstr+8j
					; PL_strncaserstr+14j ...
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
PL_strncaserstr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. PL_strcat

; =============== S U B	R O U T	I N E =======================================


		public PL_strcat
PL_strcat	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_1000151D
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short locret_1000151D
		push	esi
		push	edi
		mov	esi, ecx

loc_100014F4:				; CODE XREF: PL_strcat+19j
		mov	dl, [ecx]
		inc	ecx
		test	dl, dl
		jnz	short loc_100014F4
		sub	ecx, esi
		lea	edi, [eax-1]
		mov	edx, ecx
		lea	eax, [edi+1]

loc_10001505:				; CODE XREF: PL_strcat+2Bj
		mov	cl, [edi+1]
		inc	edi
		test	cl, cl
		jnz	short loc_10001505
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		rep movsb
		pop	edi
		pop	esi

locret_1000151D:			; CODE XREF: PL_strcat+6j PL_strcat+Ej
		retn
PL_strcat	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. PL_strncat

; =============== S U B	R O U T	I N E =======================================


		public PL_strncat
PL_strncat	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_10001554
		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short locret_10001554
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	short locret_10001554
		cmp	byte ptr [eax],	0
		push	esi
		mov	esi, eax
		jz	short loc_10001546

loc_10001540:				; CODE XREF: PL_strncat+24j
		inc	eax
		cmp	byte ptr [eax],	0
		jnz	short loc_10001540

loc_10001546:				; CODE XREF: PL_strncat+1Ej
		push	ecx
		push	edx
		push	eax
		call	PL_strncpy
		add	esp, 0Ch
		mov	eax, esi
		pop	esi

locret_10001554:			; CODE XREF: PL_strncat+6j
					; PL_strncat+Ej ...
		retn
PL_strncat	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. PL_strcatn

; =============== S U B	R O U T	I N E =======================================


		public PL_strcatn
PL_strcatn	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	edi
		test	eax, eax
		jz	short loc_1000159F
		mov	edi, [esp+4+arg_8]
		test	edi, edi
		jz	short loc_1000159F
		xor	ecx, ecx
		push	esi
		mov	esi, eax
		cmp	[eax], cl
		jz	short loc_10001587
		lea	ebx, [ebx+0]

loc_10001580:				; CODE XREF: PL_strcatn+25j
		inc	eax
		inc	ecx
		cmp	byte ptr [eax],	0
		jnz	short loc_10001580

loc_10001587:				; CODE XREF: PL_strcatn+18j
		mov	edx, [esp+8+arg_4]
		cmp	edx, ecx
		jbe	short loc_1000159C
		sub	edx, ecx
		push	edx
		push	edi
		push	eax
		call	PL_strncpyz
		add	esp, 0Ch

loc_1000159C:				; CODE XREF: PL_strcatn+2Dj
		mov	eax, esi
		pop	esi

loc_1000159F:				; CODE XREF: PL_strcatn+7j
					; PL_strcatn+Fj
		pop	edi
		retn
PL_strcatn	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. PL_strcmp

; =============== S U B	R O U T	I N E =======================================


		public PL_strcmp
PL_strcmp	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		test	eax, eax
		jz	short loc_100015E5
		test	ecx, ecx
		jz	short loc_100015E5

loc_100015C0:				; CODE XREF: PL_strcmp+2Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_100015DF
		test	dl, dl
		jz	short loc_100015DC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_100015DF
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_100015C0

loc_100015DC:				; CODE XREF: PL_strcmp+18j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100015DF:				; CODE XREF: PL_strcmp+14j
					; PL_strcmp+20j
		sbb	eax, eax
		sbb	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_100015E5:				; CODE XREF: PL_strcmp+Aj PL_strcmp+Ej
		sub	eax, ecx
		retn
PL_strcmp	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. PL_strncmp

; =============== S U B	R O U T	I N E =======================================


		public PL_strncmp
PL_strncmp	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		test	eax, eax
		jz	short loc_1000160E
		test	ecx, ecx
		jz	short loc_1000160E
		mov	[esp+arg_4], ecx
		mov	[esp+arg_0], eax
		jmp	ds:strncmp
; ---------------------------------------------------------------------------

loc_1000160E:				; CODE XREF: PL_strncmp+Aj
					; PL_strncmp+Ej
		sub	eax, ecx
		retn
PL_strncmp	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  14. PL_strchr

; =============== S U B	R O U T	I N E =======================================


		public PL_strchr
PL_strchr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10001629
		retn
; ---------------------------------------------------------------------------

loc_10001629:				; CODE XREF: PL_strchr+6j
		movsx	ecx, byte ptr [esp+arg_4]
		mov	[esp+arg_4], ecx
		mov	[esp+arg_0], eax
		jmp	ds:strchr
PL_strchr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  37. PL_strrchr

; =============== S U B	R O U T	I N E =======================================


		public PL_strrchr
PL_strrchr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10001649
		retn
; ---------------------------------------------------------------------------

loc_10001649:				; CODE XREF: PL_strrchr+6j
		movsx	ecx, byte ptr [esp+arg_4]
		mov	[esp+arg_4], ecx
		mov	[esp+arg_0], eax
		jmp	ds:strrchr
PL_strrchr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. PL_strnchr

; =============== S U B	R O U T	I N E =======================================


		public PL_strnchr
PL_strnchr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10001669
		retn
; ---------------------------------------------------------------------------

loc_10001669:				; CODE XREF: PL_strnchr+6j
		mov	dl, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jz	short loc_10001684

loc_10001676:				; CODE XREF: PL_strnchr+22j
		mov	cl, [eax]
		test	cl, cl
		jz	short loc_10001684
		cmp	cl, dl
		jz	short loc_10001692
		inc	eax
		dec	esi
		jnz	short loc_10001676

loc_10001684:				; CODE XREF: PL_strnchr+14j
					; PL_strnchr+1Aj
		test	dl, dl
		jnz	short loc_10001690
		test	esi, esi
		jz	short loc_10001690
		cmp	[eax], dl
		jz	short loc_10001692

loc_10001690:				; CODE XREF: PL_strnchr+26j
					; PL_strnchr+2Aj
		xor	eax, eax

loc_10001692:				; CODE XREF: PL_strnchr+1Ej
					; PL_strnchr+2Ej
		pop	esi
		retn
PL_strnchr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  32. PL_strnrchr

; =============== S U B	R O U T	I N E =======================================


		public PL_strnrchr
PL_strnrchr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_100016DA
		mov	ecx, [esp+4+arg_8]
		mov	eax, esi
		test	ecx, ecx
		jz	short loc_100016BC

loc_100016B3:				; CODE XREF: PL_strnrchr+1Aj
		cmp	byte ptr [eax],	0
		jz	short loc_100016BC
		inc	eax
		dec	ecx
		jnz	short loc_100016B3

loc_100016BC:				; CODE XREF: PL_strnrchr+11j
					; PL_strnrchr+16j
		mov	dl, [esp+4+arg_4]
		test	dl, dl
		jnz	short loc_100016CC
		test	ecx, ecx
		jz	short loc_100016CC
		cmp	[eax], dl
		jz	short loc_100016DC

loc_100016CC:				; CODE XREF: PL_strnrchr+22j
					; PL_strnrchr+26j
		dec	eax
		cmp	eax, esi
		jb	short loc_100016DA

loc_100016D1:				; CODE XREF: PL_strnrchr+38j
		cmp	[eax], dl
		jz	short loc_100016DC
		dec	eax
		cmp	eax, esi
		jnb	short loc_100016D1

loc_100016DA:				; CODE XREF: PL_strnrchr+7j
					; PL_strnrchr+2Fj
		xor	eax, eax

loc_100016DC:				; CODE XREF: PL_strnrchr+2Aj
					; PL_strnrchr+33j
		pop	esi
		retn
PL_strnrchr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  35. PL_strpbrk

; =============== S U B	R O U T	I N E =======================================


		public PL_strpbrk
PL_strpbrk	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_100016FE
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_100016FE
		mov	[esp+arg_4], eax
		mov	[esp+arg_0], ecx
		jmp	ds:strpbrk
; ---------------------------------------------------------------------------

loc_100016FE:				; CODE XREF: PL_strpbrk+6j
					; PL_strpbrk+Ej
		xor	eax, eax
		retn
PL_strpbrk	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. PL_strprbrk

; =============== S U B	R O U T	I N E =======================================


		public PL_strprbrk
PL_strprbrk	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_1000176F
		mov	ebp, [esp+8+arg_4]
		test	ebp, ebp
		jz	short loc_1000176F
		cmp	byte ptr [edi],	0
		push	esi
		mov	esi, edi
		jz	short loc_10001736
		lea	ebx, [ebx+0]

loc_10001730:				; CODE XREF: PL_strprbrk+24j
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_10001730

loc_10001736:				; CODE XREF: PL_strprbrk+18j
		dec	esi
		push	ebx
		cmp	esi, edi
		jb	short loc_10001761
		mov	bl, [ebp+0]
		nop

loc_10001740:				; CODE XREF: PL_strprbrk+4Fj
		mov	edx, ebp
		test	bl, bl
		jz	short loc_1000175C
		mov	al, [esi]
		mov	cl, bl
		lea	ebx, [ebx+0]

loc_10001750:				; CODE XREF: PL_strprbrk+4Aj
		cmp	al, cl
		jz	short loc_10001768
		mov	cl, [edx+1]
		inc	edx
		test	cl, cl
		jnz	short loc_10001750

loc_1000175C:				; CODE XREF: PL_strprbrk+34j
		dec	esi
		cmp	esi, edi
		jnb	short loc_10001740

loc_10001761:				; CODE XREF: PL_strprbrk+2Aj
		pop	ebx
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10001768:				; CODE XREF: PL_strprbrk+42j
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000176F:				; CODE XREF: PL_strprbrk+8j
					; PL_strprbrk+10j
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
PL_strprbrk	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. PL_strnpbrk

; =============== S U B	R O U T	I N E =======================================


		public PL_strnpbrk
PL_strnpbrk	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_100017C6
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_100017C6
		push	ebx
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		test	edi, edi
		jz	short loc_100017C0
		jmp	short loc_100017A0
; ---------------------------------------------------------------------------
		align 10h

loc_100017A0:				; CODE XREF: PL_strnpbrk+1Bj
					; PL_strnpbrk+3Ej
		mov	bl, [eax]
		test	bl, bl
		jz	short loc_100017C0
		mov	cl, [esi]
		mov	edx, esi
		test	cl, cl
		jz	short loc_100017BC
		mov	edi, edi

loc_100017B0:				; CODE XREF: PL_strnpbrk+3Aj
		cmp	bl, cl
		jz	short loc_100017C2
		mov	cl, [edx+1]
		inc	edx
		test	cl, cl
		jnz	short loc_100017B0

loc_100017BC:				; CODE XREF: PL_strnpbrk+2Cj
		inc	eax
		dec	edi
		jnz	short loc_100017A0

loc_100017C0:				; CODE XREF: PL_strnpbrk+19j
					; PL_strnpbrk+24j
		xor	eax, eax

loc_100017C2:				; CODE XREF: PL_strnpbrk+32j
		pop	edi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100017C6:				; CODE XREF: PL_strnpbrk+7j
					; PL_strnpbrk+Fj
		xor	eax, eax
		pop	esi
		retn
PL_strnpbrk	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. PL_strnprbrk

; =============== S U B	R O U T	I N E =======================================


		public PL_strnprbrk
PL_strnprbrk	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_1000182F
		mov	ebp, [esp+8+arg_4]
		test	ebp, ebp
		jz	short loc_1000182F
		mov	eax, [esp+8+arg_8]
		push	esi
		mov	esi, edi
		test	eax, eax
		jz	short loc_100017F9
		lea	ecx, [ecx+0]

loc_100017F0:				; CODE XREF: PL_strnprbrk+27j
		cmp	byte ptr [esi],	0
		jz	short loc_100017F9
		inc	esi
		dec	eax
		jnz	short loc_100017F0

loc_100017F9:				; CODE XREF: PL_strnprbrk+1Bj
					; PL_strnprbrk+23j
		dec	esi
		push	ebx
		cmp	esi, edi
		jb	short loc_10001821
		mov	bl, [ebp+0]

loc_10001802:				; CODE XREF: PL_strnprbrk+4Fj
		mov	edx, ebp
		test	bl, bl
		jz	short loc_1000181C
		mov	al, [esi]
		mov	cl, bl
		lea	esp, [esp+0]

loc_10001810:				; CODE XREF: PL_strnprbrk+4Aj
		cmp	al, cl
		jz	short loc_10001828
		mov	cl, [edx+1]
		inc	edx
		test	cl, cl
		jnz	short loc_10001810

loc_1000181C:				; CODE XREF: PL_strnprbrk+36j
		dec	esi
		cmp	esi, edi
		jnb	short loc_10001802

loc_10001821:				; CODE XREF: PL_strnprbrk+2Dj
		pop	ebx
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10001828:				; CODE XREF: PL_strnprbrk+42j
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000182F:				; CODE XREF: PL_strnprbrk+8j
					; PL_strnprbrk+10j
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
PL_strnprbrk	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  39. PL_strstr

; =============== S U B	R O U T	I N E =======================================


		public PL_strstr
PL_strstr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_10001868
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_10001868
		cmp	byte ptr [ecx],	0
		jz	short loc_10001868
		cmp	byte ptr [eax],	0
		jz	short loc_10001868
		mov	[esp+arg_4], eax
		mov	[esp+arg_0], ecx
		jmp	ds:strstr
; ---------------------------------------------------------------------------

loc_10001868:				; CODE XREF: PL_strstr+6j PL_strstr+Ej ...
		xor	eax, eax
		retn
PL_strstr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  38. PL_strrstr

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PL_strrstr(int, char *Str2)
		public PL_strrstr
PL_strrstr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
Str2		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jz	short loc_100018ED
		mov	eax, [esp+4+Str2]
		test	eax, eax
		jz	short loc_100018ED
		cmp	byte ptr [ebx],	0
		jz	short loc_100018ED
		cmp	byte ptr [eax],	0
		jz	short loc_100018ED
		lea	edx, [eax+1]
		mov	edi, edi

loc_10001890:				; CODE XREF: PL_strrstr+25j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001890
		sub	eax, edx
		push	edi
		mov	edi, eax
		mov	eax, ebx
		lea	edx, [eax+1]

loc_100018A1:				; CODE XREF: PL_strrstr+36j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100018A1
		sub	eax, edx
		cmp	eax, edi
		jnb	short loc_100018B3
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100018B3:				; CODE XREF: PL_strrstr+3Cj
		push	ebp
		sub	eax, edi
		push	esi
		lea	esi, [ebx+eax]
		cmp	esi, ebx
		jb	short loc_100018DF
		mov	ebp, ds:strncmp

loc_100018C4:				; CODE XREF: PL_strrstr+6Dj
		mov	eax, [esp+10h+Str2]
		mov	cl, [eax]
		cmp	cl, [esi]
		jnz	short loc_100018DA
		push	edi		; MaxCount
		push	eax		; Str2
		push	esi		; Str1
		call	ebp ; strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100018E6

loc_100018DA:				; CODE XREF: PL_strrstr+5Cj
		dec	esi
		cmp	esi, ebx
		jnb	short loc_100018C4

loc_100018DF:				; CODE XREF: PL_strrstr+4Cj
		pop	esi
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100018E6:				; CODE XREF: PL_strrstr+68j
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100018ED:				; CODE XREF: PL_strrstr+7j
					; PL_strrstr+Fj ...
		xor	eax, eax
		pop	ebx
		retn
PL_strrstr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  34. PL_strnstr

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PL_strnstr(char *Str1, char *Str2, int)
		public PL_strnstr
PL_strnstr	proc near		; DATA XREF: .rdata:off_10003778o

Str1		= dword	ptr  4
Str2		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+Str1]
		test	esi, esi
		jz	short loc_1000196D
		mov	ebx, [esp+8+Str2]
		test	ebx, ebx
		jz	short loc_1000196D
		cmp	byte ptr [esi],	0
		jz	short loc_1000196D
		cmp	byte ptr [ebx],	0
		jz	short loc_1000196D
		mov	eax, ebx
		lea	edx, [eax+1]

loc_10001921:				; CODE XREF: PL_strnstr+26j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001921
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		sub	eax, edx
		push	edi
		mov	edi, eax
		cmp	edi, ebp
		ja	short loc_1000195F
		mov	eax, 1
		sub	eax, edi
		add	ebp, eax
		jz	short loc_1000195F

loc_10001941:				; CODE XREF: PL_strnstr+5Dj
		mov	al, [esi]
		test	al, al
		jz	short loc_1000195F
		cmp	[ebx], al
		jnz	short loc_1000195B
		push	edi		; MaxCount
		push	ebx		; Str2
		push	esi		; Str1
		call	ds:strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10001966

loc_1000195B:				; CODE XREF: PL_strnstr+49j
		inc	esi
		dec	ebp
		jnz	short loc_10001941

loc_1000195F:				; CODE XREF: PL_strnstr+34j
					; PL_strnstr+3Fj ...
		pop	edi
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001966:				; CODE XREF: PL_strnstr+59j
		pop	edi
		pop	ebp
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000196D:				; CODE XREF: PL_strnstr+8j
					; PL_strnstr+10j ...
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
PL_strnstr	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. PL_strnrstr

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PL_strnrstr(int, char *Str2, int)
		public PL_strnrstr
PL_strnrstr	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
Str2		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+arg_0]
		test	ebp, ebp
		jz	short loc_100019FC
		mov	eax, [esp+4+Str2]
		test	eax, eax
		jz	short loc_100019FC
		cmp	byte ptr [ebp+0], 0
		jz	short loc_100019FC
		cmp	byte ptr [eax],	0
		jz	short loc_100019FC
		lea	edx, [eax+1]
		nop

loc_100019A0:				; CODE XREF: PL_strnrstr+25j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100019A0
		push	esi
		sub	eax, edx
		push	edi
		mov	edi, eax
		mov	eax, [esp+0Ch+arg_8]
		mov	esi, ebp
		test	eax, eax
		jz	short loc_100019C0

loc_100019B7:				; CODE XREF: PL_strnrstr+3Ej
		cmp	byte ptr [esi],	0
		jz	short loc_100019C0
		inc	esi
		dec	eax
		jnz	short loc_100019B7

loc_100019C0:				; CODE XREF: PL_strnrstr+35j
					; PL_strnrstr+3Aj
		sub	esi, edi
		cmp	esi, ebp
		jnb	short loc_100019CC
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100019CC:				; CODE XREF: PL_strnrstr+44j
		push	ebx
		mov	ebx, ds:strncmp

loc_100019D3:				; CODE XREF: PL_strnrstr+6Cj
		mov	eax, [esp+10h+Str2]
		mov	cl, [eax]
		cmp	cl, [esi]
		jnz	short loc_100019E9
		push	edi		; MaxCount
		push	eax		; Str2
		push	esi		; Str1
		call	ebx ; strncmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100019F5

loc_100019E9:				; CODE XREF: PL_strnrstr+5Bj
		dec	esi
		cmp	esi, ebp
		jnb	short loc_100019D3
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100019F5:				; CODE XREF: PL_strnrstr+67j
		pop	ebx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100019FC:				; CODE XREF: PL_strnrstr+7j
					; PL_strnrstr+Fj ...
		xor	eax, eax
		pop	ebp
		retn
PL_strnrstr	endp

; Exported entry  40. PL_strtok_r

; =============== S U B	R O U T	I N E =======================================


		public PL_strtok_r
PL_strtok_r	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10001A17
		mov	eax, [esp+4+arg_8]
		mov	esi, [eax]
		test	esi, esi
		jnz	short loc_10001A17
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001A17:				; CODE XREF: PL_strtok_r+7j
					; PL_strtok_r+11j
		movsx	edx, byte ptr [esi]
		push	ebx
		push	ebp
		test	edx, edx
		jz	short loc_10001A41
		mov	ebx, [esp+0Ch+arg_4]
		movsx	ebp, byte ptr [ebx]

loc_10001A27:				; CODE XREF: PL_strtok_r+5Cj
		mov	eax, ebp
		mov	ecx, ebx
		test	eax, eax
		jz	short loc_10001A3D
		nop

loc_10001A30:				; CODE XREF: PL_strtok_r+3Bj
		cmp	edx, eax
		jz	short loc_10001A51
		movsx	eax, byte ptr [ecx+1]
		inc	ecx
		test	eax, eax
		jnz	short loc_10001A30

loc_10001A3D:				; CODE XREF: PL_strtok_r+2Dj
					; PL_strtok_r+53j
		test	edx, edx
		jnz	short loc_10001A6A

loc_10001A41:				; CODE XREF: PL_strtok_r+1Ej
		mov	ecx, [esp+0Ch+arg_8]
		pop	ebp
		pop	ebx
		mov	dword ptr [ecx], 0
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001A51:				; CODE XREF: PL_strtok_r+32j
		test	eax, eax
		jz	short loc_10001A3D
		movsx	edx, byte ptr [esi+1]
		inc	esi
		test	edx, edx
		jnz	short loc_10001A27
		mov	ecx, [esp+0Ch+arg_8]
		pop	ebp
		pop	ebx
		mov	[ecx], edx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001A6A:				; CODE XREF: PL_strtok_r+3Fj
		mov	eax, esi
		inc	esi
		push	edi
		movsx	edi, byte ptr [esi]
		test	edi, edi
		jz	short loc_10001A96

loc_10001A75:				; CODE XREF: PL_strtok_r+94j
		mov	ecx, ebp
		mov	edx, ebx
		test	ecx, ecx
		jz	short loc_10001A8D
		lea	ecx, [ecx+0]

loc_10001A80:				; CODE XREF: PL_strtok_r+8Bj
		cmp	edi, ecx
		jz	short loc_10001AA5
		movsx	ecx, byte ptr [edx+1]
		inc	edx
		test	ecx, ecx
		jnz	short loc_10001A80

loc_10001A8D:				; CODE XREF: PL_strtok_r+7Bj
		movsx	edi, byte ptr [esi+1]
		inc	esi
		test	edi, edi
		jnz	short loc_10001A75

loc_10001A96:				; CODE XREF: PL_strtok_r+73j
		mov	ecx, [esp+10h+arg_8]
		pop	edi
		pop	ebp
		pop	ebx
		mov	dword ptr [ecx], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001AA5:				; CODE XREF: PL_strtok_r+82j
		mov	edx, [esp+10h+arg_8]
		pop	edi
		mov	byte ptr [esi],	0
		pop	ebp
		inc	esi
		pop	ebx
		mov	[edx], esi
		pop	esi
		retn
PL_strtok_r	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001AC0	proc near		; CODE XREF: PL_Base64Encode+65p

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		push	edi
		mov	edi, off_10004040
		mov	esi, eax
		cmp	ebp, 3
		jb	short loc_10001B37
		mov	eax, 0AAAAAAABh
		mul	ebp
		shr	edx, 1
		push	ebx
		mov	edi, edi

loc_10001AE0:				; CODE XREF: sub_10001AC0+74j
		movzx	eax, byte ptr [esi]
		movzx	ebx, byte ptr [esi+1]
		shl	eax, 8
		or	eax, ebx
		movzx	ebx, byte ptr [esi+2]
		shl	eax, 8
		or	eax, ebx
		mov	ebx, eax
		shr	ebx, 12h
		and	ebx, 3Fh
		movzx	ebx, byte ptr [ebx+edi]
		mov	[ecx], bl
		mov	ebx, eax
		shr	ebx, 0Ch
		and	ebx, 3Fh
		movzx	ebx, byte ptr [ebx+edi]
		mov	[ecx+1], bl
		mov	ebx, eax
		shr	ebx, 6
		and	ebx, 3Fh
		movzx	ebx, byte ptr [ebx+edi]
		and	eax, 3Fh
		mov	[ecx+2], bl
		mov	al, [eax+edi]
		mov	[ecx+3], al
		add	esi, 3
		add	ecx, 4
		sub	ebp, 3
		dec	edx
		jnz	short loc_10001AE0
		pop	ebx

loc_10001B37:				; CODE XREF: sub_10001AC0+12j
		dec	ebp
		jz	short loc_10001B77
		dec	ebp
		jnz	short loc_10001B98
		movzx	edx, byte ptr [esi]
		shr	edx, 2
		mov	al, [edx+edi]
		mov	[ecx], al
		movzx	edx, byte ptr [esi]
		movzx	eax, byte ptr [esi+1]
		and	edx, 3
		shl	edx, 4
		shr	eax, 4
		or	edx, eax
		movzx	edx, byte ptr [edx+edi]
		mov	[ecx+1], dl
		movzx	eax, byte ptr [esi+1]
		and	eax, 0Fh
		movzx	edx, byte ptr [edi+eax*4]
		pop	edi
		pop	esi
		mov	[ecx+2], dl
		mov	byte ptr [ecx+3], 3Dh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10001B77:				; CODE XREF: sub_10001AC0+78j
		movzx	eax, byte ptr [esi]
		shr	eax, 2
		movzx	edx, byte ptr [eax+edi]
		mov	[ecx], dl
		movzx	eax, byte ptr [esi]
		and	eax, 3
		add	eax, eax
		movzx	edx, byte ptr [edi+eax*8]
		mov	[ecx+1], dl
		mov	word ptr [ecx+2], 3D3Dh

loc_10001B98:				; CODE XREF: sub_10001AC0+7Bj
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10001AC0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. PL_Base64Encode

; =============== S U B	R O U T	I N E =======================================


		public PL_Base64Encode
PL_Base64Encode	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		push	edi
		test	ebx, ebx
		jnz	short loc_10001BC0
		mov	eax, ebp
		lea	edx, [eax+1]

loc_10001BB5:				; CODE XREF: PL_Base64Encode+1Aj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001BB5
		sub	eax, edx
		mov	ebx, eax

loc_10001BC0:				; CODE XREF: PL_Base64Encode+Ej
		mov	edi, [esp+10h+arg_8]
		test	edi, edi
		jnz	short loc_10001C00
		cmp	ebx, 0BFFFFFFDh
		jbe	short loc_10001BD7

loc_10001BD0:				; CODE XREF: PL_Base64Encode+5Aj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001BD7:				; CODE XREF: PL_Base64Encode+2Ej
		lea	ecx, [ebx+2]
		mov	eax, 0AAAAAAABh
		mul	ecx
		mov	esi, edx
		shr	esi, 1
		add	esi, esi
		add	esi, esi
		lea	edx, [esi+1]
		push	edx
		call	ds:PR_Malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_10001BD0
		mov	byte ptr [esi+edi], 0

loc_10001C00:				; CODE XREF: PL_Base64Encode+26j
		push	ebx
		mov	ecx, edi
		mov	eax, ebp
		call	sub_10001AC0
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
PL_Base64Encode	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001C20	proc near		; CODE XREF: sub_10001CF0+A0p
		lea	ecx, [eax-41h]
		cmp	cl, 19h
		ja	short loc_10001C2F
		movzx	eax, al
		sub	eax, 41h
		retn
; ---------------------------------------------------------------------------

loc_10001C2F:				; CODE XREF: sub_10001C20+6j
		lea	edx, [eax-61h]
		cmp	dl, 19h
		ja	short loc_10001C3E
		movzx	eax, al
		sub	eax, 47h
		retn
; ---------------------------------------------------------------------------

loc_10001C3E:				; CODE XREF: sub_10001C20+15j
		lea	ecx, [eax-30h]
		cmp	cl, 9
		ja	short loc_10001C4D
		movzx	eax, al
		add	eax, 4
		retn
; ---------------------------------------------------------------------------

loc_10001C4D:				; CODE XREF: sub_10001C20+24j
		cmp	al, 2Bh
		jnz	short loc_10001C57
		mov	eax, 3Eh
		retn
; ---------------------------------------------------------------------------

loc_10001C57:				; CODE XREF: sub_10001C20+2Fj
		xor	edx, edx
		cmp	al, 2Fh
		setnz	dl
		lea	eax, [edx-1]
		and	eax, 40h
		dec	eax
		retn
sub_10001C20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001C70	proc near		; CODE XREF: sub_10001E90:loc_10001EA0p
		xor	edx, edx
		xor	ecx, ecx
		push	ebx

loc_10001C75:				; CODE XREF: sub_10001C70+23j
		mov	al, [ecx+esi]
		lea	ebx, [eax-41h]
		cmp	bl, 19h
		ja	short loc_10001CAB
		movzx	eax, al
		sub	eax, 41h

loc_10001C86:				; CODE XREF: sub_10001C70+49j
					; sub_10001C70+59j
		test	eax, eax
		js	short loc_10001CE1

loc_10001C8A:				; CODE XREF: sub_10001C70+64j
					; sub_10001C70+6Fj
		shl	edx, 6
		inc	ecx
		or	edx, eax
		cmp	ecx, 4
		jl	short loc_10001C75
		mov	eax, edx
		shr	eax, 10h
		mov	ecx, edx
		shr	ecx, 8
		mov	[edi], al
		mov	[edi+1], cl
		mov	[edi+2], dl
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001CAB:				; CODE XREF: sub_10001C70+Ej
		lea	ebx, [eax-61h]
		cmp	bl, 19h
		ja	short loc_10001CBB
		movzx	eax, al
		sub	eax, 47h
		jmp	short loc_10001C86
; ---------------------------------------------------------------------------

loc_10001CBB:				; CODE XREF: sub_10001C70+41j
		lea	ebx, [eax-30h]
		cmp	bl, 9
		ja	short loc_10001CCB
		movzx	eax, al
		add	eax, 4
		jmp	short loc_10001C86
; ---------------------------------------------------------------------------

loc_10001CCB:				; CODE XREF: sub_10001C70+51j
		cmp	al, 2Bh
		jnz	short loc_10001CD6
		mov	eax, 3Eh
		jmp	short loc_10001C8A
; ---------------------------------------------------------------------------

loc_10001CD6:				; CODE XREF: sub_10001C70+5Dj
		cmp	al, 2Fh
		jnz	short loc_10001CE1
		mov	eax, 3Fh
		jmp	short loc_10001C8A
; ---------------------------------------------------------------------------

loc_10001CE1:				; CODE XREF: sub_10001C70+18j
					; sub_10001C70+68j
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10001C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001CF0	proc near		; CODE XREF: sub_10001E90+43p
		mov	al, [ecx]
		lea	edx, [eax-41h]
		cmp	dl, 19h
		ja	short loc_10001D08
		movzx	eax, al
		sub	eax, 41h

loc_10001D00:				; CODE XREF: sub_10001CF0+26j
					; sub_10001CF0+36j
		test	eax, eax
		jns	short loc_10001D31

loc_10001D04:				; CODE XREF: sub_10001CF0+63j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10001D08:				; CODE XREF: sub_10001CF0+8j
		lea	edx, [eax-61h]
		cmp	dl, 19h
		ja	short loc_10001D18
		movzx	eax, al
		sub	eax, 47h
		jmp	short loc_10001D00
; ---------------------------------------------------------------------------

loc_10001D18:				; CODE XREF: sub_10001CF0+1Ej
		lea	edx, [eax-30h]
		cmp	dl, 9
		ja	short loc_10001D28
		movzx	eax, al
		add	eax, 4
		jmp	short loc_10001D00
; ---------------------------------------------------------------------------

loc_10001D28:				; CODE XREF: sub_10001CF0+2Ej
		cmp	al, 2Bh
		jnz	short loc_10001D51
		mov	eax, 3Eh

loc_10001D31:				; CODE XREF: sub_10001CF0+12j
					; sub_10001CF0+6Aj
		shl	eax, 6
		push	esi
		mov	esi, eax
		mov	al, [ecx+1]
		lea	edx, [eax-41h]
		cmp	dl, 19h
		ja	short loc_10001D5C
		movzx	eax, al
		sub	eax, 41h

loc_10001D48:				; CODE XREF: sub_10001CF0+7Aj
					; sub_10001CF0+8Aj
		test	eax, eax
		jns	short loc_10001D85

loc_10001D4C:				; CODE XREF: sub_10001CF0+B1j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001D51:				; CODE XREF: sub_10001CF0+3Aj
		cmp	al, 2Fh
		jnz	short loc_10001D04
		mov	eax, 3Fh
		jmp	short loc_10001D31
; ---------------------------------------------------------------------------

loc_10001D5C:				; CODE XREF: sub_10001CF0+50j
		lea	edx, [eax-61h]
		cmp	dl, 19h
		ja	short loc_10001D6C
		movzx	eax, al
		sub	eax, 47h
		jmp	short loc_10001D48
; ---------------------------------------------------------------------------

loc_10001D6C:				; CODE XREF: sub_10001CF0+72j
		lea	edx, [eax-30h]
		cmp	dl, 9
		ja	short loc_10001D7C
		movzx	eax, al
		add	eax, 4
		jmp	short loc_10001D48
; ---------------------------------------------------------------------------

loc_10001D7C:				; CODE XREF: sub_10001CF0+82j
		cmp	al, 2Bh
		jnz	short loc_10001D9F
		mov	eax, 3Eh

loc_10001D85:				; CODE XREF: sub_10001CF0+5Aj
					; sub_10001CF0+B8j
		or	eax, esi
		shl	eax, 4
		push	ebx
		mov	ebx, eax
		mov	al, [ecx+2]
		call	sub_10001C20
		test	eax, eax
		jns	short loc_10001DAA
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001D9F:				; CODE XREF: sub_10001CF0+8Ej
		cmp	al, 2Fh
		jnz	short loc_10001D4C
		mov	eax, 3Fh
		jmp	short loc_10001D85
; ---------------------------------------------------------------------------

loc_10001DAA:				; CODE XREF: sub_10001CF0+A7j
		shr	eax, 2
		or	ebx, eax
		mov	eax, ebx
		shr	eax, 8
		mov	[edi+1], bl
		pop	ebx
		mov	[edi], al
		xor	eax, eax
		pop	esi
		retn
sub_10001CF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001DC0	proc near		; CODE XREF: sub_10001E90+50p

arg_0		= dword	ptr  4

		mov	al, [ecx]
		lea	edx, [eax-41h]
		cmp	dl, 19h
		ja	short loc_10001DD8
		movzx	eax, al
		sub	eax, 41h

loc_10001DD0:				; CODE XREF: sub_10001DC0+26j
					; sub_10001DC0+36j
		test	eax, eax
		jns	short loc_10001E01

loc_10001DD4:				; CODE XREF: sub_10001DC0+5Bj
					; sub_10001DC0+6Dj ...
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10001DD8:				; CODE XREF: sub_10001DC0+8j
		lea	edx, [eax-61h]
		cmp	dl, 19h
		ja	short loc_10001DE8
		movzx	eax, al
		sub	eax, 47h
		jmp	short loc_10001DD0
; ---------------------------------------------------------------------------

loc_10001DE8:				; CODE XREF: sub_10001DC0+1Ej
		lea	edx, [eax-30h]
		cmp	dl, 9
		ja	short loc_10001DF8
		movzx	eax, al
		add	eax, 4
		jmp	short loc_10001DD0
; ---------------------------------------------------------------------------

loc_10001DF8:				; CODE XREF: sub_10001DC0+2Ej
		cmp	al, 2Bh
		jnz	short loc_10001E2B
		mov	eax, 3Eh

loc_10001E01:				; CODE XREF: sub_10001DC0+12j
					; sub_10001DC0+74j
		lea	edx, ds:0[eax*4]
		mov	al, [ecx+1]
		lea	ecx, [eax-41h]
		cmp	cl, 19h
		ja	short loc_10001E36
		movzx	eax, al
		sub	eax, 41h

loc_10001E19:				; CODE XREF: sub_10001DC0+84j
					; sub_10001DC0+94j
		test	eax, eax
		js	short loc_10001DD4
		shr	eax, 4
		or	al, dl
		mov	edx, [esp+arg_0]
		mov	[edx], al
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10001E2B:				; CODE XREF: sub_10001DC0+3Aj
		cmp	al, 2Fh
		jnz	short loc_10001DD4
		mov	eax, 3Fh
		jmp	short loc_10001E01
; ---------------------------------------------------------------------------

loc_10001E36:				; CODE XREF: sub_10001DC0+51j
		lea	ecx, [eax-61h]
		cmp	cl, 19h
		ja	short loc_10001E46
		movzx	eax, al
		sub	eax, 47h
		jmp	short loc_10001E19
; ---------------------------------------------------------------------------

loc_10001E46:				; CODE XREF: sub_10001DC0+7Cj
		lea	ecx, [eax-30h]
		cmp	cl, 9
		ja	short loc_10001E56
		movzx	eax, al
		add	eax, 4
		jmp	short loc_10001E19
; ---------------------------------------------------------------------------

loc_10001E56:				; CODE XREF: sub_10001DC0+8Cj
		cmp	al, 2Bh
		jnz	short loc_10001E6D
		mov	eax, 3Eh
		shr	eax, 4
		or	al, dl
		mov	edx, [esp+arg_0]
		mov	[edx], al
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10001E6D:				; CODE XREF: sub_10001DC0+98j
		cmp	al, 2Fh
		jnz	loc_10001DD4
		mov	eax, 3Fh
		shr	eax, 4
		or	al, dl
		mov	edx, [esp+arg_0]
		mov	[edx], al
		xor	eax, eax
		retn
sub_10001DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001E90	proc near		; CODE XREF: PL_Base64Decode+87p

var_4		= dword	ptr -4

		push	ecx
		push	ebx
		push	esi
		mov	ebx, ecx
		push	edi
		mov	edi, eax
		mov	esi, edx
		cmp	ebx, 4
		jb	short loc_10001EC1
		nop

loc_10001EA0:				; CODE XREF: sub_10001E90+25j
		call	sub_10001C70
		test	eax, eax
		jnz	short loc_10001EB9 ; jumptable 10001ECA	case 1
		sub	ebx, 4
		add	esi, 4
		add	edi, 3
		cmp	ebx, 4
		jnb	short loc_10001EA0
		jmp	short loc_10001EC5
; ---------------------------------------------------------------------------

loc_10001EB9:				; CODE XREF: sub_10001E90+17j
					; sub_10001E90+3Aj
					; DATA XREF: ...
		pop	edi		; jumptable 10001ECA case 1
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001EC1:				; CODE XREF: sub_10001E90+Dj
		mov	eax, [esp+10h+var_4]

loc_10001EC5:				; CODE XREF: sub_10001E90+27j
		cmp	ebx, 3		; switch 4 cases
		ja	short loc_10001EEF ; jumptable 10001ECA	default	case
		jmp	ds:off_10001EF4[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10001ED1:				; CODE XREF: sub_10001E90+3Aj
					; DATA XREF: .text:off_10001EF4o
		mov	ecx, esi	; jumptable 10001ECA case 3
		call	sub_10001CF0
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001EDD:				; CODE XREF: sub_10001E90+3Aj
					; DATA XREF: .text:off_10001EF4o
		push	edi		; jumptable 10001ECA case 2
		mov	ecx, esi
		call	sub_10001DC0
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001EED:				; CODE XREF: sub_10001E90+3Aj
					; DATA XREF: .text:off_10001EF4o
		xor	eax, eax	; jumptable 10001ECA case 0

loc_10001EEF:				; CODE XREF: sub_10001E90+38j
		pop	edi		; jumptable 10001ECA default case
		pop	esi
		pop	ebx
		pop	ecx
		retn
sub_10001E90	endp

; ---------------------------------------------------------------------------
off_10001EF4	dd offset loc_10001EED	; DATA XREF: sub_10001E90+3Ar
		dd offset loc_10001EB9	; jump table for switch	statement
		dd offset loc_10001EDD
		dd offset loc_10001ED1
		align 10h
; Exported entry   1. PL_Base64Decode

; =============== S U B	R O U T	I N E =======================================


		public PL_Base64Decode
PL_Base64Decode	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		xor	esi, esi
		test	ebp, ebp
		jnz	short loc_10001F21
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10001F21:				; CODE XREF: PL_Base64Decode+Aj
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jnz	short loc_10001F3B
		mov	edi, ebp
		lea	ecx, [edi+1]
		nop

loc_10001F30:				; CODE XREF: PL_Base64Decode+25j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_10001F30
		sub	edi, ecx
		jz	short loc_10001F57

loc_10001F3B:				; CODE XREF: PL_Base64Decode+18j
		test	edi, 3
		jnz	short loc_10001F57
		mov	al, 3Dh
		cmp	[edi+ebp-1], al
		jnz	short loc_10001F57
		cmp	[edi+ebp-2], al
		jnz	short loc_10001F56
		sub	edi, 2
		jmp	short loc_10001F57
; ---------------------------------------------------------------------------

loc_10001F56:				; CODE XREF: PL_Base64Decode+3Fj
		dec	edi

loc_10001F57:				; CODE XREF: PL_Base64Decode+29j
					; PL_Base64Decode+31j ...
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		test	ebx, ebx
		jnz	short loc_10001F91
		mov	eax, edi
		and	eax, 3
		lea	esi, [eax+eax*2]
		mov	eax, edi
		shr	eax, 2
		lea	eax, [eax+eax*2]
		shr	esi, 2
		add	esi, eax
		lea	ecx, [esi+1]
		push	ecx
		call	ds:PR_Malloc
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_10001FAF
		mov	byte ptr [esi+ebx], 0
		mov	esi, 1

loc_10001F91:				; CODE XREF: PL_Base64Decode+4Ej
		mov	eax, ebx
		mov	ecx, edi
		mov	edx, ebp
		call	sub_10001E90
		test	eax, eax
		jz	short loc_10001FB6
		cmp	esi, 1
		jnz	short loc_10001FAF
		push	ebx
		call	ds:PR_Free
		add	esp, 4

loc_10001FAF:				; CODE XREF: PL_Base64Decode+76j
					; PL_Base64Decode+93j
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10001FB6:				; CODE XREF: PL_Base64Decode+8Ej
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
PL_Base64Decode	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. PL_FPrintError

; =============== S U B	R O U T	I N E =======================================


		public PL_FPrintError
PL_FPrintError	proc near		; CODE XREF: PL_PrintError+1Fp
					; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		call	ds:PR_GetError
		mov	esi, eax
		call	ds:PR_GetOSError
		push	esi
		mov	edi, eax
		call	ds:PR_ErrorToName
		mov	ebp, [esp+14h+arg_0]
		mov	ebx, eax
		mov	eax, [esp+14h+arg_4]
		add	esp, 4
		test	eax, eax
		jz	short loc_10001FFC
		push	eax
		push	offset aS	; "%s: "
		push	ebp
		call	ds:PR_fprintf
		add	esp, 0Ch

loc_10001FFC:				; CODE XREF: PL_FPrintError+2Aj
		push	edi
		push	esi
		test	ebx, ebx
		jnz	short loc_10002016
		push	offset aDOutOfRangeOse ; " (%d)OUT OF RANGE, oserror = %d\n"
		push	ebp
		call	ds:PR_fprintf
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002016:				; CODE XREF: PL_FPrintError+40j
		push	ebx
		push	offset aSDOserrorD ; "%s(%d), oserror =	%d\n"
		push	ebp
		call	ds:PR_fprintf
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
PL_FPrintError	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. PL_PrintError

; =============== S U B	R O U T	I N E =======================================


		public PL_PrintError
PL_PrintError	proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4

		mov	eax, dword_10004360
		test	eax, eax
		jnz	short loc_10002049
		push	2
		call	ds:PR_GetSpecialFD
		add	esp, 4
		mov	dword_10004360,	eax

loc_10002049:				; CODE XREF: PL_PrintError+7j
		mov	ecx, [esp+arg_0]
		push	ecx
		push	eax
		call	PL_FPrintError
		add	esp, 8
		retn
PL_PrintError	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. PL_CreateLongOptState

; =============== S U B	R O U T	I N E =======================================


		public PL_CreateLongOptState
PL_CreateLongOptState proc near		; CODE XREF: PL_CreateOptState+11p
					; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_8]
		xor	ebx, ebx
		cmp	ebp, ebx
		jnz	short loc_10002080
		push	ebx
		push	0FFFFE89Dh
		call	ds:PR_SetError
		add	esp, 8
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002080:				; CODE XREF: PL_CreateLongOptState+Aj
		push	edi
		push	14h
		push	1
		call	ds:PR_Calloc
		mov	edi, eax
		add	esp, 8
		cmp	edi, ebx
		jnz	short loc_100020A9
		push	ebx
		push	0FFFFE890h
		call	ds:PR_SetError
		add	esp, 8
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100020A9:				; CODE XREF: PL_CreateLongOptState+32j
		push	esi
		push	24h
		call	ds:PR_Malloc
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jnz	short loc_100020D8
		push	edi
		call	ds:PR_Free
		push	ebx
		push	0FFFFE890h
		call	ds:PR_SetError
		add	esp, 0Ch
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100020D8:				; CODE XREF: PL_CreateLongOptState+59j
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_4]
		mov	edx, [esp+10h+arg_C]
		mov	[edi], bl
		mov	[edi+4], ebx
		mov	[edi+8], esi
		mov	[edi+0Ch], ebx
		mov	dword ptr [edi+10h], 0FFFFFFFFh
		push	ebp
		mov	[esi+4], eax
		mov	[esi+8], ecx
		mov	[esi+0Ch], ebx
		mov	dword ptr [esi+10h], offset dword_10004364
		mov	[esi+14h], ebx
		mov	[esi], ebp
		mov	[esi+18h], edx
		mov	[esi+1Ch], ebx
		call	PL_strlen
		add	esp, 4
		mov	[esi+20h], eax
		pop	esi
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		retn
PL_CreateLongOptState endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. PL_DestroyOptState

; =============== S U B	R O U T	I N E =======================================


		public PL_DestroyOptState
PL_DestroyOptState proc	near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+8]
		push	edi
		mov	edi, ds:PR_Free
		push	eax
		call	edi ; PR_Free
		push	esi
		mov	dword ptr [esi+8], 0
		call	edi ; PR_Free
		add	esp, 8
		pop	edi
		pop	esi
		retn
PL_DestroyOptState endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. PL_GetNextOpt

; =============== S U B	R O U T	I N E =======================================


		public PL_GetNextOpt
PL_GetNextOpt	proc near		; DATA XREF: .rdata:off_10003778o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		xor	ebp, ebp
		push	esi
		mov	esi, [ebx+8]
		mov	[ebx+0Ch], ebp
		mov	dword ptr [ebx+10h], 0FFFFFFFFh
		mov	ecx, [esi+10h]
		cmp	byte ptr [ecx],	0
		push	edi
		lea	eax, [ebp+1]
		jnz	short loc_100021D2
		mov	edx, [esi+4]

loc_10002186:				; CODE XREF: PL_GetNextOpt+70j
		add	[esi+0Ch], eax
		mov	ecx, [esi+0Ch]
		cmp	ecx, edx
		jge	short loc_100021FC
		mov	edi, [esi+8]
		mov	ecx, [edi+ecx*4]
		mov	[esi+10h], ecx
		mov	[esi+14h], ebp
		cmp	[esi+1Ch], ebp
		jnz	short loc_100021CA
		cmp	byte ptr [ecx],	2Dh
		jnz	short loc_100021CA
		inc	ecx
		mov	[esi+14h], eax
		mov	[esi+10h], ecx
		cmp	byte ptr [ecx],	2Dh
		jnz	short loc_100021CA
		cmp	[esi+18h], ebp
		jz	short loc_100021CA
		inc	ecx
		mov	dword ptr [esi+14h], 2
		mov	[esi+10h], ecx
		cmp	byte ptr [ecx],	0
		jnz	short loc_100021CA
		mov	[esi+1Ch], eax

loc_100021CA:				; CODE XREF: PL_GetNextOpt+3Fj
					; PL_GetNextOpt+44j ...
		mov	ecx, [esi+10h]
		cmp	byte ptr [ecx],	0
		jz	short loc_10002186

loc_100021D2:				; CODE XREF: PL_GetNextOpt+21j
		mov	ecx, [esi+14h]
		cmp	ecx, 2
		jnz	loc_100022DD
		mov	edx, [esi+10h]
		push	3Dh		; Val
		push	edx		; Str
		call	ds:strchr
		add	esp, 8
		mov	[esp+14h+var_4], eax
		cmp	eax, ebp
		jz	short loc_10002208
		mov	ebp, eax
		sub	ebp, [esi+10h]
		jmp	short loc_1000221B
; ---------------------------------------------------------------------------

loc_100021FC:				; CODE XREF: PL_GetNextOpt+2Ej
		pop	edi
		pop	esi
		mov	[ebx+4], ebp
		pop	ebp
		mov	byte ptr [ebx],	0
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10002208:				; CODE XREF: PL_GetNextOpt+93j
		mov	eax, [esi+10h]
		lea	edx, [eax+1]
		mov	edi, edi

loc_10002210:				; CODE XREF: PL_GetNextOpt+B5j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10002210
		sub	eax, edx
		mov	ebp, eax

loc_1000221B:				; CODE XREF: PL_GetNextOpt+9Aj
		mov	edi, [esi+18h]
		mov	byte ptr [ebx],	0
		mov	dword ptr [ebx+4], 0
		mov	eax, [edi]
		mov	[esp+14h+arg_0], 2
		test	eax, eax
		jz	loc_100022CC
		lea	ebx, [ebx+0]

loc_10002240:				; CODE XREF: PL_GetNextOpt+10Dj
		mov	ecx, [esi+10h]
		push	ebp		; MaxCount
		push	ecx		; Str2
		push	eax		; Str1
		call	ds:strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10002265
		mov	eax, [edi]
		lea	edx, [eax+1]

loc_10002258:				; CODE XREF: PL_GetNextOpt+FDj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10002258
		sub	eax, edx
		cmp	eax, ebp
		jz	short loc_10002280

loc_10002265:				; CODE XREF: PL_GetNextOpt+F1j
		mov	eax, [edi+0Ch]
		add	edi, 0Ch
		test	eax, eax
		jnz	short loc_10002240
		mov	eax, [esp+14h+arg_0]
		pop	edi
		mov	dword ptr [esi+10h], offset dword_10004364
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10002280:				; CODE XREF: PL_GetNextOpt+103j
		mov	ecx, edi
		sub	ecx, [esi+18h]
		mov	eax, 2AAAAAABh
		imul	ecx
		sar	edx, 1
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		mov	[ebx+10h], eax
		mov	eax, [esp+14h+var_4]
		mov	ecx, [edi+4]
		mov	[ebx+0Ch], ecx
		test	eax, eax
		jz	short loc_100022A9
		inc	eax
		jmp	short loc_100022C1
; ---------------------------------------------------------------------------

loc_100022A9:				; CODE XREF: PL_GetNextOpt+144j
		cmp	dword ptr [edi+8], 0
		jz	short loc_100022C4
		mov	eax, [esi+0Ch]
		inc	eax
		cmp	eax, [esi+4]
		jge	short loc_100022CC
		mov	edx, [esi+8]
		mov	[esi+0Ch], eax
		mov	eax, [edx+eax*4]

loc_100022C1:				; CODE XREF: PL_GetNextOpt+147j
		mov	[ebx+4], eax

loc_100022C4:				; CODE XREF: PL_GetNextOpt+14Dj
		mov	[esp+14h+arg_0], 0

loc_100022CC:				; CODE XREF: PL_GetNextOpt+D4j
					; PL_GetNextOpt+156j
		mov	eax, [esp+14h+arg_0]
		pop	edi
		mov	dword ptr [esi+10h], offset dword_10004364
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100022DD:				; CODE XREF: PL_GetNextOpt+78j
		cmp	ecx, ebp
		jz	loc_1000237D
		mov	edi, [esi+20h]
		xor	ecx, ecx
		cmp	edi, ebp
		jle	short loc_10002300
		mov	edx, [esi+10h]
		mov	dl, [edx]
		mov	ebp, [esi]

loc_100022F5:				; CODE XREF: PL_GetNextOpt+19Ej
		cmp	[ecx+ebp], dl
		jz	short loc_1000230E
		add	ecx, eax
		cmp	ecx, edi
		jl	short loc_100022F5

loc_10002300:				; CODE XREF: PL_GetNextOpt+18Cj
		add	[esi+10h], eax

loc_10002303:				; CODE XREF: PL_GetNextOpt+1EAj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 2
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000230E:				; CODE XREF: PL_GetNextOpt+198j
		mov	[ebx], dl
		add	[esi+10h], eax
		movzx	eax, byte ptr [ebx]
		mov	[ebx+0Ch], eax
		mov	edx, [esi]
		cmp	byte ptr [edx+ecx+1], 3Ah
		jnz	short loc_1000236E
		mov	eax, [esi+10h]
		cmp	byte ptr [eax],	0
		jz	short loc_10002343
		mov	[ebx+4], eax
		pop	edi
		mov	dword ptr [esi+10h], offset dword_10004364
		mov	dword ptr [esi+14h], 0
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10002343:				; CODE XREF: PL_GetNextOpt+1C8j
		mov	eax, [esi+0Ch]
		inc	eax
		cmp	eax, [esi+4]
		jge	short loc_10002303
		mov	ecx, [esi+8]
		mov	[esi+0Ch], eax
		mov	edx, [ecx+eax*4]
		mov	[ebx+4], edx
		pop	edi
		mov	dword ptr [esi+10h], offset dword_10004364
		mov	dword ptr [esi+14h], 0
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000236E:				; CODE XREF: PL_GetNextOpt+1C0j
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [ebx+4], 0
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000237D:				; CODE XREF: PL_GetNextOpt+17Fj
		mov	eax, [esi+0Ch]
		mov	ecx, [esi+8]
		mov	edx, [ecx+eax*4]
		pop	edi
		mov	[ebx+4], edx
		mov	dword ptr [esi+10h], offset dword_10004364
		pop	esi
		xor	eax, eax
		pop	ebp
		mov	[ebx], al
		pop	ebx
		pop	ecx
		retn
PL_GetNextOpt	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. PL_CreateOptState

; =============== S U B	R O U T	I N E =======================================


		public PL_CreateOptState
PL_CreateOptState proc near		; DATA XREF: .rdata:off_10003778o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	0
		push	eax
		push	ecx
		push	edx
		call	PL_CreateLongOptState
		add	esp, 10h
		retn
PL_CreateOptState endp

; ---------------------------------------------------------------------------
		align 10h
; [00000010 BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]

; =============== S U B	R O U T	I N E =======================================


sub_100023D0	proc near		; CODE XREF: sub_10002460+2Dp
					; .text:100024B6p ...

var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		push	ebp
		push	edx
		push	eax
		push	ecx
		push	ecx
		push	offset sub_10002460
		push	large dword ptr	fs:0
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_20], eax
		mov	large fs:0, esp

loc_10002402:				; CODE XREF: sub_100023D0+64j
					; sub_100023D0+80j
		mov	eax, [esp+28h+arg_4]
		mov	ebx, [eax+8]
		mov	ecx, [esp+28h+arg_0]
		xor	ebx, [ecx]
		mov	esi, [eax+0Ch]
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10002452
		mov	edx, [esp+28h+arg_8]
		cmp	edx, 0FFFFFFFEh
		jz	short loc_10002424
		cmp	esi, edx
		jbe	short loc_10002452

loc_10002424:				; CODE XREF: sub_100023D0+4Ej
		lea	esi, [esi+esi*2]
		lea	ebx, [ebx+esi*4+10h]
		mov	ecx, [ebx]
		mov	[eax+0Ch], ecx
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_10002402
		push	101h
		mov	eax, [ebx+8]
		call	sub_10002CA1
		mov	ecx, 1
		mov	eax, [ebx+8]
		call	sub_10002CC0
		jmp	short loc_10002402
; ---------------------------------------------------------------------------

loc_10002452:				; CODE XREF: sub_100023D0+45j
					; sub_100023D0+52j
		pop	large dword ptr	fs:0
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_100023D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002460	proc near		; DATA XREF: sub_100023D0+14o
					; .rdata:___safe_se_handler_tableo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		test	dword ptr [ecx+4], 6
		mov	eax, 1
		jz	short locret_100024A5
		mov	eax, [esp+arg_4]
		mov	ecx, [eax+8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		push	ebp
		mov	ebp, [eax+18h]
		push	dword ptr [eax+0Ch]
		push	dword ptr [eax+10h]
		push	dword ptr [eax+14h]
		call	sub_100023D0
		add	esp, 0Ch
		pop	ebp
		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_C]
		mov	[edx], eax
		mov	eax, 3

locret_100024A5:			; CODE XREF: sub_10002460+10j
		retn
sub_10002460	endp

; ---------------------------------------------------------------------------
		push	ebp
		mov	ecx, [esp+8]
		mov	ebp, [ecx]
		push	dword ptr [ecx+1Ch]
		push	dword ptr [ecx+18h]
		push	dword ptr [ecx+28h]
		call	sub_100023D0
		add	esp, 0Ch
		pop	ebp
		retn	4

; =============== S U B	R O U T	I N E =======================================


sub_100024C2	proc near		; CODE XREF: sub_10002530+89p
		push	ebp
		push	esi
		push	edi
		push	ebx
		mov	ebp, edx
		xor	eax, eax
		xor	ebx, ebx
		xor	edx, edx
		xor	esi, esi
		xor	edi, edi
		call	ecx
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_100024C2	endp


; =============== S U B	R O U T	I N E =======================================


sub_100024D9	proc near		; CODE XREF: sub_10002530+15Ep
		mov	ebp, edx
		mov	esi, ecx
		mov	eax, ecx
		push	1
		call	sub_10002CA1
		xor	eax, eax
		xor	ebx, ebx
		xor	ecx, ecx
		xor	edx, edx
		xor	edi, edi
		jmp	esi
sub_100024D9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_100024F2(PVOID TargetFrame)
sub_100024F2	proc near		; CODE XREF: sub_10002530+112p
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	0		; ReturnValue
		push	0		; ExceptionRecord
		push	offset loc_10002507 ; TargetIp
		push	ecx		; TargetFrame
		call	RtlUnwind

loc_10002507:				; DATA XREF: sub_100024F2+Ao
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100024F2	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000250C	proc near		; CODE XREF: sub_10002530+128p
					; sub_10002530+178p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	edx
		push	ecx
		push	[esp+0Ch+arg_4]
		call	sub_100023D0
		add	esp, 0Ch
		pop	ebp
		retn	8
sub_1000250C	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10002530(int,	int, int, PVOID	TargetFrame, int)
sub_10002530	proc near		; CODE XREF: sub_10002E31+1Bp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
TargetFrame	= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+TargetFrame]
		push	esi
		mov	esi, [ebx+8]
		xor	esi, [eax]
		push	edi
		mov	eax, [esi]
		mov	[ebp+var_1], 0
		mov	[ebp+var_C], 1
		lea	edi, [ebx+10h]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_10002566
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_10002566:				; CODE XREF: sub_10002530+29j
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]
		mov	eax, [ebp+arg_8]
		test	byte ptr [eax+4], 66h
		jnz	loc_10002693
		lea	ecx, [ebp+var_18]
		mov	[ebx-4], ecx
		mov	ebx, [ebx+0Ch]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_14], eax
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_100025F8
		jmp	short loc_100025A0
; ---------------------------------------------------------------------------
		align 10h

loc_100025A0:				; CODE XREF: sub_10002530+68j
					; sub_10002530+A0j
		lea	edx, [ebx+ebx*2]
		mov	ecx, [esi+edx*4+14h]
		lea	eax, [esi+edx*4+10h]
		mov	[ebp+var_10], eax
		mov	eax, [eax]
		mov	[ebp+var_8], eax
		test	ecx, ecx
		jz	short loc_100025CB
		mov	edx, edi
		call	sub_100024C2
		mov	[ebp+var_1], 1
		test	eax, eax
		jl	short loc_10002602
		jg	short loc_1000260B
		mov	eax, [ebp+var_8]

loc_100025CB:				; CODE XREF: sub_10002530+85j
		mov	ebx, eax
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_100025A0
		cmp	[ebp+var_1], 0
		jz	short loc_100025F8

loc_100025D8:				; CODE XREF: sub_10002530+D9j
					; sub_10002530+17Dj
		mov	eax, [esi]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_100025EA
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_100025EA:				; CODE XREF: sub_10002530+ADj
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]

loc_100025F8:				; CODE XREF: sub_10002530+66j
					; sub_10002530+A6j ...
		mov	eax, [ebp+var_C]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10002602:				; CODE XREF: sub_10002530+94j
		mov	[ebp+var_C], 0
		jmp	short loc_100025D8
; ---------------------------------------------------------------------------

loc_1000260B:				; CODE XREF: sub_10002530+96j
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_1000263F
		cmp	dword_100046A4,	0
		jz	short loc_1000263F
		push	offset dword_100046A4
		call	sub_10002D54
		add	esp, 4
		test	eax, eax
		jz	short loc_1000263F
		mov	ecx, [ebp+arg_8]
		push	1
		push	ecx
		call	dword_100046A4
		add	esp, 8

loc_1000263F:				; CODE XREF: sub_10002530+E4j
					; sub_10002530+EDj ...
		mov	ecx, [ebp+TargetFrame] ; TargetFrame
		call	sub_100024F2
		mov	eax, [ebp+TargetFrame]
		cmp	[eax+0Ch], ebx
		jz	short loc_10002660
		mov	edx, [ebp+arg_0]
		push	edx
		push	edi
		mov	edx, ebx
		mov	ecx, eax
		call	sub_1000250C
		mov	eax, [ebp+TargetFrame]

loc_10002660:				; CODE XREF: sub_10002530+11Dj
		mov	ecx, [ebp+var_8]
		mov	[eax+0Ch], ecx
		mov	eax, [esi]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_10002678
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_10002678:				; CODE XREF: sub_10002530+13Bj
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+8]
		mov	edx, edi
		call	sub_100024D9

loc_10002693:				; CODE XREF: sub_10002530+4Bj
		mov	edx, 0FFFFFFFEh
		cmp	[ebx+0Ch], edx
		jz	loc_100025F8
		mov	ecx, [ebp+arg_0]
		push	ecx
		push	edi
		mov	ecx, ebx
		call	sub_1000250C
		jmp	loc_100025D8
sub_10002530	endp

; [00000006 BYTES: COLLAPSED FUNCTION memcpy]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100026B8	proc near		; CODE XREF: sub_10002906+Cp
					; sub_10002948+Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, 0E06D7363h
		cmp	[ebp+arg_0], eax
		jnz	short loc_100026D4
		push	[ebp+arg_4]
		push	eax
		call	_XcptFilter
		pop	ecx
		pop	ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100026D4:				; CODE XREF: sub_100026B8+Dj
		xor	eax, eax
		pop	ebp
		retn
sub_100026B8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100026D8	proc near		; CODE XREF: sub_1000271E+A5p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		xor	eax, eax
		jmp	short loc_100026F4
; ---------------------------------------------------------------------------

loc_100026E5:				; CODE XREF: sub_100026D8+1Fj
		test	eax, eax
		jnz	short loc_100026F9
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_100026F1
		call	ecx

loc_100026F1:				; CODE XREF: sub_100026D8+15j
		add	esi, 4

loc_100026F4:				; CODE XREF: sub_100026D8+Bj
		cmp	esi, [ebp+arg_4]
		jb	short loc_100026E5

loc_100026F9:				; CODE XREF: sub_100026D8+Fj
		pop	esi
		pop	ebp
		retn
sub_100026D8	endp


; =============== S U B	R O U T	I N E =======================================


sub_100026FC	proc near		; DATA XREF: .rdata:1000309Co
		push	80h		; Size
		call	ds:malloc
		pop	ecx
		mov	Memory,	eax
		mov	dword_10004694,	eax
		test	eax, eax
		jnz	short loc_10002718
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_10002718:				; CODE XREF: sub_100026FC+18j
		and	dword ptr [eax], 0
		xor	eax, eax
		retn
sub_100026FC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000271E	proc near		; CODE XREF: DllEntryPoint-1C3p
					; DllEntryPoint-109p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		xor	eax, eax
		push	esi
		push	edi
		cmp	[ebp+arg_4], eax
		jnz	short loc_10002753
		cmp	dword_10004368,	eax
		jle	short loc_1000274C
		dec	dword_10004368
		mov	edi, ds:InterlockedCompareExchange
		push	eax
		mov	esi, offset Target
		jmp	loc_10002831
; ---------------------------------------------------------------------------

loc_1000274C:				; CODE XREF: sub_1000271E+15j
					; sub_1000271E+AEj
		xor	eax, eax
		jmp	loc_1000289E
; ---------------------------------------------------------------------------

loc_10002753:				; CODE XREF: sub_1000271E+Dj
		cmp	[ebp+arg_4], 1
		jnz	loc_1000289B
		mov	ecx, large fs:18h
		mov	ebx, [ecx+4]
		mov	edi, ds:InterlockedCompareExchange
		mov	[ebp+arg_4], eax
		push	eax
		mov	esi, offset Target
		jmp	short loc_10002789
; ---------------------------------------------------------------------------

loc_10002778:				; CODE XREF: sub_1000271E+71j
		cmp	eax, ebx
		jz	short loc_10002793
		push	3E8h		; dwMilliseconds
		call	ds:Sleep
		push	0		; Comperand

loc_10002789:				; CODE XREF: sub_1000271E+58j
		push	ebx		; Exchange
		push	esi		; Destination
		call	edi ; InterlockedCompareExchange
		test	eax, eax
		jnz	short loc_10002778
		jmp	short loc_1000279A
; ---------------------------------------------------------------------------

loc_10002793:				; CODE XREF: sub_1000271E+5Cj
		mov	[ebp+arg_4], 1

loc_1000279A:				; CODE XREF: sub_1000271E+73j
		mov	eax, dword_1000468C
		push	2
		pop	edi
		test	eax, eax
		jz	short loc_100027AF
		push	1Fh
		call	_amsg_exit
		jmp	short loc_100027E8
; ---------------------------------------------------------------------------

loc_100027AF:				; CODE XREF: sub_1000271E+86j
		push	offset dword_100030A0
		push	offset dword_10003098
		mov	dword_1000468C,	1
		call	sub_100026D8
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_1000274C
		push	offset dword_10003094
		push	offset dword_10003090
		call	_initterm
		pop	ecx
		mov	dword_1000468C,	edi

loc_100027E8:				; CODE XREF: sub_1000271E+8Fj
		xor	ebx, ebx
		pop	ecx
		cmp	[ebp+arg_4], ebx
		jnz	short loc_100027F8
		push	ebx		; Value
		push	esi		; Target
		call	ds:InterlockedExchange

loc_100027F8:				; CODE XREF: sub_1000271E+D0j
		cmp	dword_100046A0,	ebx
		jz	short loc_1000281C
		push	offset dword_100046A0
		call	sub_10002D54
		pop	ecx
		test	eax, eax
		jz	short loc_1000281C
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_100046A0

loc_1000281C:				; CODE XREF: sub_1000271E+E0j
					; sub_1000271E+EFj
		inc	dword_10004368
		jmp	short loc_1000289B
; ---------------------------------------------------------------------------

loc_10002824:				; CODE XREF: sub_1000271E+11Aj
		push	3E8h		; dwMilliseconds
		call	ds:Sleep
		push	0		; Comperand

loc_10002831:				; CODE XREF: sub_1000271E+29j
		push	1		; Exchange
		push	esi		; Destination
		call	edi ; InterlockedCompareExchange
		test	eax, eax
		jnz	short loc_10002824
		mov	eax, dword_1000468C
		cmp	eax, 2
		jz	short loc_1000284E
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	short loc_1000289B
; ---------------------------------------------------------------------------

loc_1000284E:				; CODE XREF: sub_1000271E+124j
		mov	ebx, Memory
		test	ebx, ebx
		jz	short loc_10002888
		mov	edi, dword_10004694
		add	edi, 0FFFFFFFCh
		jmp	short loc_1000286E
; ---------------------------------------------------------------------------

loc_10002863:				; CODE XREF: sub_1000271E+152j
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_1000286B
		call	eax

loc_1000286B:				; CODE XREF: sub_1000271E+149j
		sub	edi, 4

loc_1000286E:				; CODE XREF: sub_1000271E+143j
		cmp	edi, ebx
		jnb	short loc_10002863
		push	ebx		; Memory
		call	ds:free
		and	dword_10004694,	0
		and	Memory,	0
		pop	ecx

loc_10002888:				; CODE XREF: sub_1000271E+138j
		push	0		; Value
		push	esi		; Target
		mov	dword_1000468C,	0
		call	ds:InterlockedExchange

loc_1000289B:				; CODE XREF: sub_1000271E+39j
					; sub_1000271E+104j ...
		xor	eax, eax
		inc	eax

loc_1000289E:				; CODE XREF: sub_1000271E+30j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	0Ch
sub_1000271E	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_100028A5:				; CODE XREF: DllEntryPoint+11j
		push	2Ch
		push	offset dword_10003398
		call	__SEH_prolog4
		mov	ecx, [ebp+arg_4]
		xor	edx, edx
		inc	edx
		mov	[ebp+var_1C], edx
		xor	esi, esi
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	dword_10004060,	ecx
		cmp	ecx, esi
		jnz	short loc_100028D9
		cmp	dword_10004368,	esi
		jnz	short loc_100028D9
		mov	[ebp+var_1C], esi
		jmp	loc_10002ADF
; ---------------------------------------------------------------------------

loc_100028D9:				; CODE XREF: DllEntryPoint-23Aj
					; DllEntryPoint-232j
		cmp	ecx, edx
		jz	short loc_100028E6
		cmp	ecx, 2
		jnz	loc_10002973

loc_100028E6:				; CODE XREF: DllEntryPoint-226j
		mov	eax, dword_1000469C
		cmp	eax, esi
		jz	short loc_10002925
		mov	[ebp+ms_exc.registration.TryLevel], edx
		mov	dword_1000436C,	edx
		push	[ebp+arg_8]
		push	ecx
		push	[ebp+arg_0]
		call	eax ; dword_1000469C
		mov	[ebp+var_1C], eax
		jmp	short loc_10002922
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10002906	proc near		; DATA XREF: .rdata:100033B8o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-20h], ecx
		push	eax
		push	ecx
		call	sub_100026B8
		pop	ecx
		pop	ecx
		retn
sub_10002906	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000291A	proc near		; DATA XREF: .rdata:100033BCo
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_1000291A	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10002922:				; CODE XREF: DllEntryPoint-1FDj
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_10002925:				; CODE XREF: DllEntryPoint-214j
		cmp	[ebp+var_1C], esi
		jz	loc_10002ADF
		mov	[ebp+ms_exc.registration.TryLevel], 2
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000271E
		mov	[ebp+var_1C], eax
		jmp	short loc_10002964
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10002948	proc near		; DATA XREF: .rdata:100033C4o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-24h], ecx
		push	eax
		push	ecx
		call	sub_100026B8
		pop	ecx
		pop	ecx
		retn
sub_10002948	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000295C	proc near		; DATA XREF: .rdata:100033C8o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_1000295C	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10002964:				; CODE XREF: DllEntryPoint-1BBj
		mov	[ebp+ms_exc.registration.TryLevel], esi
		cmp	[ebp+var_1C], esi
		jz	loc_10002ADF
		mov	ecx, [ebp+arg_4]

loc_10002973:				; CODE XREF: DllEntryPoint-221j
		mov	[ebp+ms_exc.registration.TryLevel], 3
		push	[ebp+arg_8]
		push	ecx
		push	[ebp+arg_0]
		call	sub_10002DD2
		mov	[ebp+var_1C], eax
		jmp	short loc_100029A7
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_1000298B	proc near		; DATA XREF: .rdata:100033D0o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-28h], ecx
		push	eax
		push	ecx
		call	sub_100026B8
		pop	ecx
		pop	ecx
		retn
sub_1000298B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000299F	proc near		; DATA XREF: .rdata:100033D4o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_1000299F	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_100029A7:				; CODE XREF: DllEntryPoint-178j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		cmp	[ebp+arg_4], 1
		jnz	loc_10002A50
		cmp	[ebp+var_1C], esi
		jnz	loc_10002A50
		mov	[ebp+ms_exc.registration.TryLevel], 4
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	sub_10002DD2
		jmp	short loc_100029E9
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100029D0	proc near		; DATA XREF: .rdata:100033DCo
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-2Ch], ecx
		push	eax
		push	ecx
		call	sub_100026B8
		pop	ecx
		pop	ecx
		retn
sub_100029D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_100029E4	proc near		; DATA XREF: .rdata:100033E0o
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_100029E4	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_100029E9:				; CODE XREF: DllEntryPoint-133j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	[ebp+ms_exc.registration.TryLevel], 5
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	sub_1000271E
		jmp	short loc_10002A18
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100029FF	proc near		; DATA XREF: .rdata:100033E8o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-30h], ecx
		push	eax
		push	ecx
		call	sub_100026B8
		pop	ecx
		pop	ecx
		retn
sub_100029FF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002A13	proc near		; DATA XREF: .rdata:100033ECo
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_10002A13	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10002A18:				; CODE XREF: DllEntryPoint-104j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	eax, dword_1000469C
		cmp	eax, esi
		jz	short loc_10002A50
		mov	[ebp+ms_exc.registration.TryLevel], 6
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	eax ; dword_1000469C
		jmp	short loc_10002A4D
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10002A34	proc near		; DATA XREF: .rdata:100033F4o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-34h], ecx
		push	eax
		push	ecx
		call	sub_100026B8
		pop	ecx
		pop	ecx
		retn
sub_10002A34	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002A48	proc near		; DATA XREF: .rdata:100033F8o
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_10002A48	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10002A4D:				; CODE XREF: DllEntryPoint-CFj
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_10002A50:				; CODE XREF: DllEntryPoint-153j
					; DllEntryPoint-14Aj ...
		cmp	[ebp+arg_4], esi
		jz	short loc_10002A5F
		cmp	[ebp+arg_4], 3
		jnz	loc_10002ADF

loc_10002A5F:				; CODE XREF: DllEntryPoint-AEj
		mov	[ebp+ms_exc.registration.TryLevel], 7
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000271E
		mov	[ebp+var_1C], eax
		jmp	short loc_10002A95
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10002A79	proc near		; DATA XREF: .rdata:10003400o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-38h], ecx
		push	eax
		push	ecx
		call	sub_100026B8
		pop	ecx
		pop	ecx
		retn
sub_10002A79	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002A8D	proc near		; DATA XREF: .rdata:10003404o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10002A8D	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10002A95:				; CODE XREF: DllEntryPoint-8Aj
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	eax, dword_1000469C
		cmp	eax, esi
		jz	short loc_10002ADF
		cmp	dword_1000436C,	esi
		jz	short loc_10002ADF
		mov	[ebp+ms_exc.registration.TryLevel], 8
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	eax ; dword_1000469C
		mov	[ebp+var_1C], eax
		jmp	short loc_10002ADC
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10002AC0	proc near		; DATA XREF: .rdata:1000340Co
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-3Ch], ecx
		push	eax
		push	ecx
		call	sub_100026B8
		pop	ecx
		pop	ecx
		retn
sub_10002AC0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002AD4	proc near		; DATA XREF: .rdata:10003410o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10002AD4	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10002ADC:				; CODE XREF: DllEntryPoint-43j
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_10002ADF:				; CODE XREF: DllEntryPoint-22Dj
					; DllEntryPoint-1D9j ...
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	sub_10002AF6
		mov	eax, [ebp+var_1C]
		call	__SEH_epilog4
		retn	0Ch
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10002AF6	proc near		; CODE XREF: DllEntryPoint-1Bp
					; DATA XREF: .rdata:100033B0o
		mov	dword_10004060,	0FFFFFFFFh
		retn
sub_10002AF6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

; FUNCTION CHUNK AT 100028A5 SIZE 00000061 BYTES
; FUNCTION CHUNK AT 10002922 SIZE 00000026 BYTES
; FUNCTION CHUNK AT 10002964 SIZE 00000027 BYTES
; FUNCTION CHUNK AT 100029A7 SIZE 00000029 BYTES
; FUNCTION CHUNK AT 100029E9 SIZE 00000016 BYTES
; FUNCTION CHUNK AT 10002A18 SIZE 0000001C BYTES
; FUNCTION CHUNK AT 10002A4D SIZE 0000002C BYTES
; FUNCTION CHUNK AT 10002A95 SIZE 0000002B BYTES
; FUNCTION CHUNK AT 10002ADC SIZE 0000001A BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 1
		jnz	short loc_10002B11
		call	sub_10002E56

loc_10002B11:				; CODE XREF: DllEntryPoint+9j
		pop	ebp
		jmp	loc_100028A5
DllEntryPoint	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002B17	proc near		; CODE XREF: __security_check_cookie(x):$failure$3j

var_328		= dword	ptr -328h
var_324		= dword	ptr -324h
var_320		= dword	ptr -320h
var_s0		= dword	ptr  0
arg_0		= byte ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 328h
		mov	dword_10004470,	eax
		mov	dword_1000446C,	ecx
		mov	dword_10004468,	edx
		mov	dword_10004464,	ebx
		mov	dword_10004460,	esi
		mov	dword_1000445C,	edi
		mov	word_10004488, ss
		mov	word_1000447C, cs
		mov	word_10004458, ds
		mov	word_10004454, es
		mov	word_10004450, fs
		mov	word_1000444C, gs
		pushf
		pop	dword_10004480
		mov	eax, [ebp+var_s0]
		mov	dword_10004474,	eax
		mov	eax, [ebp+4]
		mov	dword_10004478,	eax
		lea	eax, [ebp+arg_0]
		mov	dword_10004484,	eax
		mov	eax, [ebp+var_320]
		mov	dword_100043C0,	10001h
		mov	eax, dword_10004478
		mov	dword_1000437C,	eax
		mov	dword_10004370,	0C0000409h
		mov	dword_10004374,	1
		mov	eax, ___security_cookie
		mov	[ebp+var_328], eax
		mov	eax, dword_10004048
		mov	[ebp+var_324], eax
		push	0		; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		push	offset ExceptionInfo ; ExceptionInfo
		call	ds:UnhandledExceptionFilter
		push	0C0000409h	; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess
		leave
		retn
sub_10002B17	endp

; ---------------------------------------------------------------------------
		align 10h
		push	esi
		mov	eax, [esp+14h]
		or	eax, eax
		jnz	short loc_10002C31
		mov	ecx, [esp+10h]
		mov	eax, [esp+0Ch]
		xor	edx, edx
		div	ecx
		mov	ebx, eax
		mov	eax, [esp+8]
		div	ecx
		mov	esi, eax
		mov	eax, ebx
		mul	dword ptr [esp+10h]
		mov	ecx, eax
		mov	eax, esi
		mul	dword ptr [esp+10h]
		add	edx, ecx
		jmp	short loc_10002C78
; ---------------------------------------------------------------------------

loc_10002C31:				; CODE XREF: .text:10002C07j
		mov	ecx, eax
		mov	ebx, [esp+10h]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+8]

loc_10002C3F:				; CODE XREF: .text:10002C49j
		shr	ecx, 1
		rcr	ebx, 1
		shr	edx, 1
		rcr	eax, 1
		or	ecx, ecx
		jnz	short loc_10002C3F
		div	ebx
		mov	esi, eax
		mul	dword ptr [esp+14h]
		mov	ecx, eax
		mov	eax, [esp+10h]
		mul	esi
		add	edx, ecx
		jb	short loc_10002C6D
		cmp	edx, [esp+0Ch]
		ja	short loc_10002C6D
		jb	short loc_10002C76
		cmp	eax, [esp+8]
		jbe	short loc_10002C76

loc_10002C6D:				; CODE XREF: .text:10002C5Dj
					; .text:10002C63j
		dec	esi
		sub	eax, [esp+10h]
		sbb	edx, [esp+14h]

loc_10002C76:				; CODE XREF: .text:10002C65j
					; .text:10002C6Bj
		xor	ebx, ebx

loc_10002C78:				; CODE XREF: .text:10002C2Fj
		sub	eax, [esp+8]
		sbb	edx, [esp+0Ch]
		neg	edx
		neg	eax
		sbb	edx, 0
		mov	ecx, edx
		mov	edx, ebx
		mov	ebx, ecx
		mov	ecx, eax
		mov	eax, esi
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------
		align 4
		push	ebx
		push	ecx
		mov	ebx, offset dword_10004050
		jmp	short loc_10002CAC

; =============== S U B	R O U T	I N E =======================================


sub_10002CA1	proc near		; CODE XREF: sub_100023D0+6Ep
					; sub_100024D9+8p

arg_0		= dword	ptr  4

		push	ebx
		push	ecx
		mov	ebx, offset dword_10004050
		mov	ecx, [esp+8+arg_0]

loc_10002CAC:				; CODE XREF: .text:10002C9Fj
		mov	[ebx+8], ecx
		mov	[ebx+4], eax
		mov	[ebx+0Ch], ebp
		push	ebp
		push	ecx
		push	eax
		pop	eax
		pop	ecx
		pop	ebp
		pop	ecx
		pop	ebx
		retn	4
sub_10002CA1	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002CC0	proc near		; CODE XREF: sub_100023D0+7Bp
		call	eax
		retn
sub_10002CC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002CD0	proc near		; CODE XREF: sub_10002D54+16p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, 5A4Dh
		cmp	[ecx], ax
		jz	short loc_10002CE6

loc_10002CE2:				; CODE XREF: sub_10002CD0+21j
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10002CE6:				; CODE XREF: sub_10002CD0+10j
		mov	eax, [ecx+3Ch]
		add	eax, ecx
		cmp	dword ptr [eax], 4550h
		jnz	short loc_10002CE2
		xor	edx, edx
		mov	ecx, 10Bh
		cmp	[eax+18h], cx
		setz	dl
		mov	eax, edx
		pop	ebp
		retn
sub_10002CD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002D10	proc near		; CODE XREF: sub_10002D54+27p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		push	ebx
		push	esi
		movzx	esi, word ptr [ecx+6]
		xor	edx, edx
		push	edi
		lea	eax, [eax+ecx+18h]
		test	esi, esi
		jbe	short loc_10002D4D
		mov	edi, [ebp+arg_4]

loc_10002D35:				; CODE XREF: sub_10002D10+3Bj
		mov	ecx, [eax+0Ch]
		cmp	edi, ecx
		jb	short loc_10002D45
		mov	ebx, [eax+8]
		add	ebx, ecx
		cmp	edi, ebx
		jb	short loc_10002D4F

loc_10002D45:				; CODE XREF: sub_10002D10+2Aj
		inc	edx
		add	eax, 28h
		cmp	edx, esi
		jb	short loc_10002D35

loc_10002D4D:				; CODE XREF: sub_10002D10+20j
		xor	eax, eax

loc_10002D4F:				; CODE XREF: sub_10002D10+33j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10002D10	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002D54	proc near		; CODE XREF: sub_10002530+F4p
					; sub_1000271E+E7p

ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	8
		push	offset stru_10003418
		call	__SEH_prolog4
		and	[ebp+ms_exc.registration.TryLevel], 0
		mov	esi, 10000000h
		push	esi
		call	sub_10002CD0
		pop	ecx
		test	eax, eax
		jz	short loc_10002DB1
		mov	eax, [ebp+arg_0]
		sub	eax, esi
		push	eax
		push	esi
		call	sub_10002D10
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10002DB1
		mov	eax, [eax+24h]
		shr	eax, 1Fh
		not	eax
		and	eax, 1
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		jmp	short loc_10002DBA
; ---------------------------------------------------------------------------

loc_10002D9A:				; DATA XREF: .rdata:stru_10003418o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 10002D54
		mov	eax, [eax]
		mov	eax, [eax]
		xor	ecx, ecx
		cmp	eax, 0C0000005h
		setz	cl
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_10002DAE:				; DATA XREF: .rdata:stru_10003418o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 10002D54

loc_10002DB1:				; CODE XREF: sub_10002D54+1Ej
					; sub_10002D54+30j
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		xor	eax, eax

loc_10002DBA:				; CODE XREF: sub_10002D54+44j
		call	__SEH_epilog4
		retn
sub_10002D54	endp

; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]

; =============== S U B	R O U T	I N E =======================================


sub_10002DD2	proc near		; CODE XREF: DllEntryPoint-180p
					; DllEntryPoint-138p
		xor	eax, eax
		inc	eax
		retn	0Ch
sub_10002DD2	endp

; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10002E31(int,	PVOID TargetFrame, int,	int)
sub_10002E31	proc near		; DATA XREF: __SEH_prolog4o
					; .rdata:10003394o

arg_0		= dword	ptr  8
TargetFrame	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_8]	; int
		push	[ebp+TargetFrame] ; TargetFrame
		push	[ebp+arg_0]	; int
		push	offset @__security_check_cookie@4 ; int
		push	offset ___security_cookie ; int
		call	sub_10002530
		add	esp, 18h
		pop	ebp
		retn
sub_10002E31	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002E56	proc near		; CODE XREF: DllEntryPoint+Bp

PerformanceCount= LARGE_INTEGER	ptr -10h
SystemTimeAsFileTime= _FILETIME	ptr -8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, ___security_cookie
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		push	ebx
		push	edi
		mov	edi, 0BB40E64Eh
		mov	ebx, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_10002E88
		test	ebx, eax
		jz	short loc_10002E88
		not	eax
		mov	dword_10004048,	eax
		jmp	short loc_10002EE3
; ---------------------------------------------------------------------------

loc_10002E88:				; CODE XREF: sub_10002E56+23j
					; sub_10002E56+27j
		push	esi
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	esi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		call	ds:GetCurrentProcessId
		xor	esi, eax
		call	ds:GetCurrentThreadId
		xor	esi, eax
		call	ds:GetTickCount
		xor	esi, eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	eax, dword ptr [ebp+PerformanceCount+4]
		xor	eax, dword ptr [ebp+PerformanceCount]
		xor	esi, eax
		cmp	esi, edi
		jz	short loc_10002ECF
		test	___security_cookie, ebx
		jnz	short loc_10002ED4

loc_10002ECF:				; CODE XREF: sub_10002E56+6Fj
		mov	esi, 0BB40E64Fh

loc_10002ED4:				; CODE XREF: sub_10002E56+77j
		mov	___security_cookie, esi
		not	esi
		mov	dword_10004048,	esi
		pop	esi

loc_10002EE3:				; CODE XREF: sub_10002E56+30j
		pop	edi
		pop	ebx
		leave
		retn
sub_10002E56	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	ecx, [esp+10h]
		or	ecx, eax
		mov	ecx, [esp+0Ch]
		jnz	short loc_10002F09
		mov	eax, [esp+4]
		mul	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_10002F09:				; CODE XREF: .text:10002EFEj
		push	ebx
		mul	ecx
		mov	ebx, eax
		mov	eax, [esp+8]
		mul	dword ptr [esp+14h]
		add	ebx, eax
		mov	eax, [esp+8]
		mul	ecx
		add	edx, ebx
		pop	ebx
		retn	10h
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind]
		align 100h
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000B2C (   2860.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00002400
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; void __stdcall RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD	ExceptionRecord, PVOID ReturnValue)
		extrn __imp_RtlUnwind:dword ; DATA XREF: RtlUnwindr
					; .rdata:1000346Co
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn InterlockedExchange:dword	; CODE XREF: sub_1000271E+D4p
					; sub_1000271E+177p
					; DATA XREF: ...
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_1000271E+63p
					; sub_1000271E+10Bp
					; DATA XREF: ...
; LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination,	LONG Exchange, LONG Comperand)
		extrn InterlockedCompareExchange:dword ; CODE XREF: sub_1000271E+6Dp
					; sub_1000271E+116p
					; DATA XREF: ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: sub_10002B17+DAp
					; DATA XREF: sub_10002B17+DAr
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: sub_10002B17+D3p
					; DATA XREF: sub_10002B17+D3r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: sub_10002B17+C8p
					; DATA XREF: sub_10002B17+C8r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_10002B17+BDp
					; DATA XREF: sub_10002B17+BDr
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_10002E56+37p
					; DATA XREF: sub_10002E56+37r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10002E56+43p
					; DATA XREF: sub_10002E56+43r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10002E56+4Bp
					; DATA XREF: sub_10002E56+4Br
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_10002E56+53p
					; DATA XREF: sub_10002E56+53r
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10002E56+5Fp
					; DATA XREF: sub_10002E56+5Fr

;
; Imports from libnspr4.dll
;
		extrn PR_SetError:dword	; CODE XREF: PL_CreateLongOptState+12p
					; PL_CreateLongOptState+3Ap ...
		extrn PR_Calloc:dword	; CODE XREF: PL_CreateLongOptState+25p
					; DATA XREF: PL_CreateLongOptState+25r
		extrn PR_GetSpecialFD:dword ; CODE XREF: PL_PrintError+Bp
					; DATA XREF: PL_PrintError+Br
		extrn PR_GetError:dword	; CODE XREF: PL_FPrintError+4p
					; DATA XREF: PL_FPrintError+4r
		extrn PR_GetOSError:dword ; CODE XREF: PL_FPrintError+Cp
					; DATA XREF: PL_FPrintError+Cr
		extrn PR_ErrorToName:dword ; CODE XREF:	PL_FPrintError+15p
					; DATA XREF: PL_FPrintError+15r
		extrn PR_fprintf:dword	; CODE XREF: PL_FPrintError+33p
					; PL_FPrintError+48p ...
		extrn PR_Free:dword	; CODE XREF: PL_Base64Decode+96p
					; PL_CreateLongOptState+5Cp ...
		extrn PR_Malloc:dword	; CODE XREF: PL_Base64Encode+4Dp
					; PL_Base64Decode+69p ...

;
; Imports from msvcrt.dll
;
; char *__cdecl	strchr(const char *Str,	int Val)
		extrn strchr:dword	; CODE XREF: PL_GetNextOpt+84p
					; DATA XREF: PL_strchr+16r ...
; char *__cdecl	strrchr(const char *Str, int Ch)
		extrn strrchr:dword	; DATA XREF: PL_strrchr+16r
; char *__cdecl	strpbrk(const char *Str, const char *Control)
		extrn strpbrk:dword	; DATA XREF: PL_strpbrk+18r
; char *__cdecl	strstr(const char *Str,	const char *SubStr)
		extrn strstr:dword	; DATA XREF: PL_strstr+22r
		extrn __imp__XcptFilter:dword ;	DATA XREF: _XcptFilterr
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn strncmp:dword	; CODE XREF: PL_strrstr+61p
					; PL_strnstr+4Ep ...
; void __cdecl free(void *Memory)
		extrn free:dword	; CODE XREF: sub_1000271E+155p
					; DATA XREF: PL_strfreer ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	malloc(size_t Size)
		extrn malloc:dword	; CODE XREF: PL_strdup+22p
					; PL_strndup+21p ...


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 10003090h
dword_10003090	dd 0			; DATA XREF: sub_1000271E+B9o
dword_10003094	dd 0			; DATA XREF: sub_1000271E+B4o
dword_10003098	dd 0			; DATA XREF: sub_1000271E+96o
		dd offset sub_100026FC
dword_100030A0	dd 2 dup(0)		; DATA XREF: sub_1000271E:loc_100027AFo
dword_100030A8	dd 0			; DATA XREF: PL_strdup+Bo
					; PL_strndup+Bo ...
aHttpWww_mozill	db 'http://www.mozilla.org/MPL/',0 ; DATA XREF: .data:10004034o
aCopyrightC1998	db 'Copyright (c) 1998 Netscape Communications Corporation. All Right'
					; DATA XREF: .data:10004030o
		db 's Reserved',0
aNA		db 'N/A',0              ; DATA XREF: .data:1000402Co
aPortableRuntim	db 'Portable runtime',0 ; DATA XREF: .data:10004028o
		align 4
aLibplc4_dll_0	db 'libplc4.dll',0      ; DATA XREF: .data:10004024o
a20140927210134	db '2014-09-27 21:01:34',0 ; DATA XREF: .data:10004010o
		align 10h
byte_10003150	db 0			; DATA XREF: PL_strcasecmp+13r
					; PL_strcasecmp+1Dr ...
		db 1, 2, 3
		dd 7060504h, 0B0A0908h,	0F0E0D0Ch, 13121110h, 17161514h
		dd 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h, 2B2A2928h
		dd 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h, 3F3E3D3Ch
		dd 43424140h, 47464544h, 4B4A4948h, 4F4E4D4Ch, 53525150h
		dd 57565554h, 5B5A5958h, 5F5E5D5Ch, 43424160h, 47464544h
		dd 4B4A4948h, 4F4E4D4Ch, 53525150h, 57565554h, 7B5A5958h
		dd 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h, 8F8E8D8Ch
		dd 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch, 0A3A2A1A0h
		dd 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h, 0B7B6B5B4h
		dd 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h, 0CBCAC9C8h
		dd 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h, 0DFDEDDDCh
		dd 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh, 0F3F2F1F0h
		dd 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh
aAbcdefghijklmn	db 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',0
					; DATA XREF: .data:off_10004040o
		align 4
aSDOserrorD	db '%s(%d), oserror = %d',0Ah,0 ; DATA XREF: PL_FPrintError+57o
		align 4
aDOutOfRangeOse	db ' (%d)OUT OF RANGE, oserror = %d',0Ah,0 ; DATA XREF: PL_FPrintError+42o
		align 10h
aS		db '%s: ',0             ; DATA XREF: PL_FPrintError+2Do
		align 4
		dd 0
; struct _EXCEPTION_POINTERS ExceptionInfo
ExceptionInfo	_EXCEPTION_POINTERS <offset dword_10004370, offset dword_100043C0>
					; DATA XREF: sub_10002B17+C3o
		align 8
		dd 86808006h, 808180h, 86031000h, 80828680h, 45050514h
		dd 85854545h, 585h, 50803030h, 8008080h, 38272800h, 805750h
		dd 30370007h, 88505030h, 20000000h, 80888028h, 80h
aHhhXppwpp	db '```hhh',8,8,7,'xppwpp',8,8,0
		dw 800h
		dd 7000800h, 8,	0
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 2			; SEHandlerCount
___safe_se_handler_table dd rva	sub_10002460 ; DATA XREF: .rdata:10003388o
		dd rva sub_10002E31
dword_10003398	dd 0FFFFFFFEh, 0	; DATA XREF: DllEntryPoint-25Ao
		dd 0FFFFFFB4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_10002AF6
		align 8
		dd offset sub_10002906
		dd offset sub_1000291A
		dd 0
		dd offset sub_10002948
		dd offset sub_1000295C
		align 10h
		dd offset sub_1000298B
		dd offset sub_1000299F
		dd 0
		dd offset sub_100029D0
		dd offset sub_100029E4
		align 8
		dd offset sub_100029FF
		dd offset sub_10002A13
		dd 0
		dd offset sub_10002A34
		dd offset sub_10002A48
		align 10h
		dd offset sub_10002A79
		dd offset sub_10002A8D
		dd 0
		dd offset sub_10002AC0
		dd offset sub_10002AD4
		align 8
stru_10003418	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_10002D54+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10002D54
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_10002D9A	; ScopeRecord.FilterFunc
		dd offset loc_10002DAE	; ScopeRecord.HandlerFunc
__IMPORT_DESCRIPTOR_libnspr4 dd	rva off_100034BC ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aLibnspr4_dll	; DLL Name
		dd rva PR_SetError	; Import Address Table
__IMPORT_DESCRIPTOR_msvcrt dd rva off_100034E4 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcrt_dll	; DLL Name
		dd rva strchr		; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10003484 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva __imp_RtlUnwind	; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_10003484	dd rva word_10003624	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10003630
		dd rva word_10003646
		dd rva word_1000364E
		dd rva word_1000366C
		dd rva word_10003680
		dd rva word_10003694
		dd rva word_100036B0
		dd rva word_10003724
		dd rva word_1000370E
		dd rva word_100036F8
		dd rva word_100036E8
		dd rva word_100036CE
		dd 0
;
; Import names for libnspr4.dll
;
off_100034BC	dd rva word_10003586	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_libnspr4o
		dd rva word_1000357A
		dd rva word_10003568
		dd rva word_1000355A
		dd rva word_1000354A
		dd rva word_10003538
		dd rva word_1000352A
		dd rva word_10003520
		dd rva word_10003514
		dd 0
;
; Import names for msvcrt.dll
;
off_100034E4	dd rva word_100035C8	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_msvcrto
		dd rva word_100035D2
		dd rva word_100035DC
		dd rva word_100035E6
		dd rva word_100035FC
		dd rva word_1000360A
		dd rva word_10003616
		dd rva word_100035BE
		dd rva word_100035B6
		dd rva word_100035AC
		dd rva word_100035A2
		dd 0
word_10003514	dw 0EEh			; DATA XREF: .rdata:100034DCo
		db 'PR_Malloc',0
word_10003520	dw 85h			; DATA XREF: .rdata:100034D8o
		db 'PR_Free',0
word_1000352A	dw 17Eh			; DATA XREF: .rdata:100034D4o
		db 'PR_fprintf',0
		align 4
word_10003538	dw 6Dh			; DATA XREF: .rdata:100034D0o
		db 'PR_ErrorToName',0
		align 2
word_1000354A	dw 0ABh			; DATA XREF: .rdata:100034CCo
		db 'PR_GetOSError',0
word_1000355A	dw 96h			; DATA XREF: .rdata:100034C8o
		db 'PR_GetError',0
word_10003568	dw 0BAh			; DATA XREF: .rdata:100034C4o
		db 'PR_GetSpecialFD',0
word_1000357A	dw 29h			; DATA XREF: .rdata:100034C0o
		db 'PR_Calloc',0
word_10003586	dw 143h			; DATA XREF: .rdata:off_100034BCo
		db 'PR_SetError',0
aLibnspr4_dll	db 'libnspr4.dll',0     ; DATA XREF: .rdata:10003440o
		align 2
word_100035A2	dw 4DEh			; DATA XREF: .rdata:1000350Co
		db 'malloc',0
		align 4
word_100035AC	dw 4EAh			; DATA XREF: .rdata:10003508o
		db 'memcpy',0
		align 2
word_100035B6	dw 4A6h			; DATA XREF: .rdata:10003504o
		db 'free',0
		align 2
word_100035BE	dw 51Fh			; DATA XREF: .rdata:10003500o
		db 'strncmp',0
word_100035C8	dw 513h			; DATA XREF: .rdata:off_100034E4o
		db 'strchr',0
		align 2
word_100035D2	dw 524h			; DATA XREF: .rdata:100034E8o
		db 'strrchr',0
word_100035DC	dw 523h			; DATA XREF: .rdata:100034ECo
		db 'strpbrk',0
word_100035E6	dw 526h			; DATA XREF: .rdata:100034F0o
		db 'strstr',0
		align 10h
aMsvcrt_dll	db 'msvcrt.dll',0       ; DATA XREF: .rdata:10003454o
		align 4
word_100035FC	dw 6Ah			; DATA XREF: .rdata:100034F4o
		db '_XcptFilter',0
word_1000360A	dw 1D5h			; DATA XREF: .rdata:100034F8o
		db '_initterm',0
word_10003616	dw 101h			; DATA XREF: .rdata:100034FCo
		db '_amsg_exit',0
		align 4
word_10003624	dw 2C7h			; DATA XREF: .rdata:off_10003484o
		db 'RtlUnwind',0
word_10003630	dw 21Dh			; DATA XREF: .rdata:10003488o
		db 'InterlockedExchange',0
word_10003646	dw 342h			; DATA XREF: .rdata:1000348Co
		db 'Sleep',0
word_1000364E	dw 21Bh			; DATA XREF: .rdata:10003490o
		db 'InterlockedCompareExchange',0
		align 4
word_1000366C	dw 34Ah			; DATA XREF: .rdata:10003494o
		db 'TerminateProcess',0
		align 10h
word_10003680	dw 13Bh			; DATA XREF: .rdata:10003498o
		db 'GetCurrentProcess',0
word_10003694	dw 35Bh			; DATA XREF: .rdata:1000349Co
		db 'UnhandledExceptionFilter',0
		align 10h
word_100036B0	dw 336h			; DATA XREF: .rdata:100034A0o
		db 'SetUnhandledExceptionFilter',0
word_100036CE	dw 294h			; DATA XREF: .rdata:100034B4o
		db 'QueryPerformanceCounter',0
word_100036E8	dw 1D4h			; DATA XREF: .rdata:100034B0o
		db 'GetTickCount',0
		align 4
word_100036F8	dw 13Eh			; DATA XREF: .rdata:100034ACo
		db 'GetCurrentThreadId',0
		align 2
word_1000370E	dw 13Ch			; DATA XREF: .rdata:100034A8o
		db 'GetCurrentProcessId',0
word_10003724	dw 1C0h			; DATA XREF: .rdata:100034A4o
		db 'GetSystemTimeAsFileTime',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:10003468o
		align 10h
;
; Export directory for libplc4.dll
;
		dd 0			; Characteristics
		dd 54275DEFh		; TimeDateStamp: Sun Sep 28 01:01:35 2014
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aLibplc4_dll	; Name
		dd 1			; Base
		dd 29h			; NumberOfFunctions
		dd 29h			; NumberOfNames
		dd rva off_10003778	; AddressOfFunctions
		dd rva off_1000381C	; AddressOfNames
		dd rva word_100038C0	; AddressOfNameOrdinals
;
; Export Address Table for libplc4.dll
;
off_10003778	dd rva PL_Base64Decode,	rva PL_Base64Encode, rva PL_CreateLongOptState
					; DATA XREF: .rdata:1000376Co
		dd rva PL_CreateOptState, rva PL_DestroyOptState, rva PL_FPrintError
		dd rva PL_GetNextOpt, rva PL_PrintError, rva PL_strcasecmp
		dd rva PL_strcaserstr, rva PL_strcasestr, rva PL_strcat
		dd rva PL_strcatn, rva PL_strchr, rva PL_strcmp, rva PL_strcpy
		dd rva PL_strdup, rva PL_strfree, rva PL_strlen, rva PL_strncasecmp
		dd rva PL_strncaserstr,	rva PL_strncasestr, rva	PL_strncat
		dd rva PL_strnchr, rva PL_strncmp, rva PL_strncpy, rva PL_strncpyz
		dd rva PL_strndup, rva PL_strnlen, rva PL_strnpbrk, rva	PL_strnprbrk
		dd rva PL_strnrchr, rva	PL_strnrstr, rva PL_strnstr, rva PL_strpbrk
		dd rva PL_strprbrk, rva	PL_strrchr, rva	PL_strrstr, rva	PL_strstr
		dd rva PL_strtok_r, rva	libVersionPoint
;
; Export Names Table for libplc4.dll
;
off_1000381C	dd rva aPl_base64decod,	rva aPl_base64encod, rva aPl_createlongo
					; DATA XREF: .rdata:10003770o
		dd rva aPl_createoptst,	rva aPl_destroyopts, rva aPl_fprinterror ; "PL_Base64Decode"
		dd rva aPl_getnextopt, rva aPl_printerror, rva aPl_strcasecmp
		dd rva aPl_strcaserstr,	rva aPl_strcasestr, rva	aPl_strcat
		dd rva aPl_strcatn, rva	aPl_strchr, rva	aPl_strcmp, rva	aPl_strcpy
		dd rva aPl_strdup, rva aPl_strfree, rva	aPl_strlen, rva	aPl_strncasecmp
		dd rva aPl_strncaserst,	rva aPl_strncasestr, rva aPl_strncat
		dd rva aPl_strnchr, rva	aPl_strncmp, rva aPl_strncpy, rva aPl_strncpyz
		dd rva aPl_strndup, rva	aPl_strnlen, rva aPl_strnpbrk
		dd rva aPl_strnprbrk, rva aPl_strnrchr,	rva aPl_strnrstr
		dd rva aPl_strnstr, rva	aPl_strpbrk, rva aPl_strprbrk
		dd rva aPl_strrchr, rva	aPl_strrstr, rva aPl_strstr, rva aPl_strtok_r
		dd rva aLibversionpoin
;
; Export Ordinals Table	for libplc4.dll
;
word_100038C0	dw 0, 1, 2, 3, 4, 5, 6,	7, 8, 9, 0Ah, 0Bh, 0Ch,	0Dh, 0Eh
					; DATA XREF: .rdata:10003774o
		dw 0Fh,	10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h,	18h, 19h
		dw 1Ah,	1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h,	23h, 24h
		dw 25h,	26h, 27h, 28h
aLibplc4_dll	db 'libplc4.dll',0      ; DATA XREF: .rdata:1000375Co
aPl_base64decod	db 'PL_Base64Decode',0  ; DATA XREF: .rdata:off_1000381Co
aPl_base64encod	db 'PL_Base64Encode',0  ; DATA XREF: .rdata:off_1000381Co
aPl_createlongo	db 'PL_CreateLongOptState',0 ; DATA XREF: .rdata:off_1000381Co
aPl_createoptst	db 'PL_CreateOptState',0 ; DATA XREF: .rdata:off_1000381Co
aPl_destroyopts	db 'PL_DestroyOptState',0 ; DATA XREF: .rdata:off_1000381Co
aPl_fprinterror	db 'PL_FPrintError',0   ; DATA XREF: .rdata:off_1000381Co
aPl_getnextopt	db 'PL_GetNextOpt',0    ; DATA XREF: .rdata:off_1000381Co
aPl_printerror	db 'PL_PrintError',0    ; DATA XREF: .rdata:off_1000381Co
aPl_strcasecmp	db 'PL_strcasecmp',0    ; DATA XREF: .rdata:off_1000381Co
aPl_strcaserstr	db 'PL_strcaserstr',0   ; DATA XREF: .rdata:off_1000381Co
aPl_strcasestr	db 'PL_strcasestr',0    ; DATA XREF: .rdata:off_1000381Co
aPl_strcat	db 'PL_strcat',0        ; DATA XREF: .rdata:off_1000381Co
aPl_strcatn	db 'PL_strcatn',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strchr	db 'PL_strchr',0        ; DATA XREF: .rdata:off_1000381Co
aPl_strcmp	db 'PL_strcmp',0        ; DATA XREF: .rdata:off_1000381Co
aPl_strcpy	db 'PL_strcpy',0        ; DATA XREF: .rdata:off_1000381Co
aPl_strdup	db 'PL_strdup',0        ; DATA XREF: .rdata:off_1000381Co
aPl_strfree	db 'PL_strfree',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strlen	db 'PL_strlen',0        ; DATA XREF: .rdata:off_1000381Co
aPl_strncasecmp	db 'PL_strncasecmp',0   ; DATA XREF: .rdata:off_1000381Co
aPl_strncaserst	db 'PL_strncaserstr',0  ; DATA XREF: .rdata:off_1000381Co
aPl_strncasestr	db 'PL_strncasestr',0   ; DATA XREF: .rdata:off_1000381Co
aPl_strncat	db 'PL_strncat',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strnchr	db 'PL_strnchr',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strncmp	db 'PL_strncmp',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strncpy	db 'PL_strncpy',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strncpyz	db 'PL_strncpyz',0      ; DATA XREF: .rdata:off_1000381Co
aPl_strndup	db 'PL_strndup',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strnlen	db 'PL_strnlen',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strnpbrk	db 'PL_strnpbrk',0      ; DATA XREF: .rdata:off_1000381Co
aPl_strnprbrk	db 'PL_strnprbrk',0     ; DATA XREF: .rdata:off_1000381Co
aPl_strnrchr	db 'PL_strnrchr',0      ; DATA XREF: .rdata:off_1000381Co
aPl_strnrstr	db 'PL_strnrstr',0      ; DATA XREF: .rdata:off_1000381Co
aPl_strnstr	db 'PL_strnstr',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strpbrk	db 'PL_strpbrk',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strprbrk	db 'PL_strprbrk',0      ; DATA XREF: .rdata:off_1000381Co
aPl_strrchr	db 'PL_strrchr',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strrstr	db 'PL_strrstr',0       ; DATA XREF: .rdata:off_1000381Co
aPl_strstr	db 'PL_strstr',0        ; DATA XREF: .rdata:off_1000381Co
aPl_strtok_r	db 'PL_strtok_r',0      ; DATA XREF: .rdata:off_1000381Co
aLibversionpoin	db 'libVersionPoint',0  ; DATA XREF: .rdata:off_1000381Co
		align 800h
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 000006A8 (   1704.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00003000
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10004000h
dword_10004000	dd 2, 0			; DATA XREF: libVersionPointo
		dd 0B100D780h, 50415h
		dd offset a20140927210134 ; "2014-09-27	21:01:34"
		dd 70A04h, 3 dup(0)
		dd offset aLibplc4_dll_0 ; "libplc4.dll"
		dd offset aPortableRuntim ; "Portable runtime"
		dd offset aNA		; "N/A"
		dd offset aCopyrightC1998 ; "Copyright (c) 1998	Netscape Communicati"...
		dd offset aHttpWww_mozill ; "http://www.mozilla.org/MPL/"
		dd offset dword_100030A8
		align 10h
off_10004040	dd offset aAbcdefghijklmn ; DATA XREF: sub_10001AC0+7r
					; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm"...
___security_cookie dd 0BB40E64Eh	; DATA XREF: __security_check_cookie(x)r
					; sub_100023D0+20r ...
dword_10004048	dd 44BF19B1h		; DATA XREF: sub_10002B17+B0r
					; sub_10002E56+2Bw ...
		align 10h
dword_10004050	dd 19930520h, 3	dup(0)	; DATA XREF: .text:10002C9Ao
					; sub_10002CA1+2o
dword_10004060	dd 0FFFFFFFFh		; DATA XREF: DllEntryPoint-242w
					; sub_10002AF6w
		dd 0FFFFFFFFh, 400h, 0FFFFFC01h, 35h, 0Bh, 40h,	3FFh, 80h
		dd 0FFFFFF81h, 18h, 8, 20h, 7Fh, 2 dup(0)
		dd 4002A000h, 2	dup(0)
		dd 4005C800h, 2	dup(0)
		dd 4008FA00h, 2	dup(0)
		dd 400C9C40h, 2	dup(0)
		dd 400FC350h, 2	dup(0)
		dd 4012F424h, 0
		dd 80000000h, 40169896h, 0
		dd 20000000h, 4019BEBCh, 0
		dd 0C9BF0400h, 40348E1Bh, 0A1000000h, 1BCECCEDh, 404ED3C2h
		dd 0B59EF020h, 0ADA82B70h, 40699DC5h, 25FD5DD0h, 4F8E1AE5h
		dd 4083EB19h, 95D79671h, 8D050E43h, 409EAF29h, 44A0BFF9h
		dd 8F1281EDh, 40B98281h, 0A6D53CBFh, 1F49FFCFh,	40D3C278h
		dd 8CE0C66Fh, 47C980E9h, 41A893BAh, 556B85BCh, 0F78D3927h
		dd 427CE070h, 0DE8EDDBCh, 0EBFB9DF9h, 4351AA7Eh, 0E376E6A1h
		dd 2F29F2CCh, 44268184h, 0AA171028h, 0E310AEF8h, 44FAC4C5h
		dd 0F3D4A7EBh, 4AE1EBF7h, 45CF957Ah, 91C7CC65h,	0A0AEA60Eh
		dd 46A3E319h, 0C17650Dh, 75868175h, 4D48C976h, 0A7E44258h
		dd 353B3993h, 53EDB2B8h, 5DE5A74Dh, 3B5DC53Dh, 5A929E8Bh
		dd 0F0A65DFFh, 54C020A1h, 61378CA5h, 5A8BFDD1h,	5D25D88Bh
		dd 67DBF989h, 0F3F895AAh, 0C8A2BF27h, 6E80DD5Dh, 979BC94Ch
		dd 52028A20h, 7525C460h, 0
		dd 0CCCDCCCDh, 0CCCCCCCCh, 3FFBCCCCh, 0D70A3D71h, 0A3D70A3h
		dd 3FF8A3D7h, 0DF3B645Ah, 6E978D4Fh, 3FF58312h,	652CD3C3h
		dd 1758E219h, 3FF1D1B7h, 84230FD0h, 0AC471B47h,	3FEEA7C5h
		dd 69B6A640h, 0BD05AF6Ch, 3FEB8637h, 42BC3D33h,	94D5E57Ah
		dd 3FE7D6BFh, 0CEFDFDC2h, 77118461h, 3FE4ABCCh,	0E15B4C2Fh
		dd 94BEC44Dh, 3FC9E695h, 3B53C492h, 14CD4475h, 3FAF9ABEh
		dd 94BA67DEh, 1EAD4539h, 3F94CFB1h, 0E2C62324h,	313BBABCh
		dd 3F7A8B61h, 0C1595561h, 7C53B17Eh, 3F5FBB12h,	8D2FEED7h
		dd 8592BE06h, 3F44FB15h, 0E9A53F24h, 0EA27A539h, 3F2AA87Fh
		dd 0E4A1AC7Dh, 467C64BCh, 3E55DDD0h, 0CC067B63h, 83775423h
		dd 3D8191FFh, 193AFA91h, 4325637Ah, 3CACC031h, 38D18921h
		dd 0B8974782h, 3BD7FD00h, 85888DCh, 0E3E8B11Bh,	3B03A686h
		dd 424584C6h, 7599B607h, 3A2EDB37h, 0D21C7133h,	0EE32DB23h
		dd 395A9049h, 0C0BE87A6h, 82A5DA57h, 32B5A2A6h,	11B268E2h
		dd 449F52A7h, 2C10B759h, 2DE44925h, 534F3436h, 256BCEAEh
		dd 0A404598Fh, 7DC2DEC0h, 1EC6E8FBh, 5A88E79Eh,	0BF3C9157h
		dd 18228350h, 62654B4Eh, 0AF8F83FDh, 117D9406h,	9FDE2DE4h
		dd 4C8D2CEh, 0AD8A6DDh,	3 dup(0)
dword_10004360	dd 0			; DATA XREF: PL_PrintErrorr
					; PL_PrintError+14w
dword_10004364	dd 0			; DATA XREF: PL_CreateLongOptState+A0o
					; PL_GetNextOpt+114o ...
dword_10004368	dd 0			; DATA XREF: sub_1000271E+Fr
					; sub_1000271E+17w ...
dword_1000436C	dd 0			; DATA XREF: DllEntryPoint-20Fw
					; DllEntryPoint-60r
dword_10004370	dd 0			; DATA XREF: sub_10002B17+91w
					; .rdata:ExceptionInfoo
dword_10004374	dd 0			; DATA XREF: sub_10002B17+9Bw
		dd 0
dword_1000437C	dd 0			; DATA XREF: sub_10002B17+8Cw
		dd 10h dup(0)
dword_100043C0	dd 0			; DATA XREF: sub_10002B17+7Dw
					; .rdata:ExceptionInfoo
		dd 0Fh dup(0)
		dd 13h dup(?)
word_1000444C	dw ?			; DATA XREF: sub_10002B17+51w
		align 10h
word_10004450	dw ?			; DATA XREF: sub_10002B17+4Aw
		align 4
word_10004454	dw ?			; DATA XREF: sub_10002B17+43w
		align 4
word_10004458	dw ?			; DATA XREF: sub_10002B17+3Cw
		align 4
dword_1000445C	dd ?			; DATA XREF: sub_10002B17+28w
dword_10004460	dd ?			; DATA XREF: sub_10002B17+22w
dword_10004464	dd ?			; DATA XREF: sub_10002B17+1Cw
dword_10004468	dd ?			; DATA XREF: sub_10002B17+16w
dword_1000446C	dd ?			; DATA XREF: sub_10002B17+10w
dword_10004470	dd ?			; DATA XREF: sub_10002B17+Bw
dword_10004474	dd ?			; DATA XREF: sub_10002B17+62w
dword_10004478	dd ?			; DATA XREF: sub_10002B17+6Aw
					; sub_10002B17+87r
word_1000447C	dw ?			; DATA XREF: sub_10002B17+35w
		align 10h
dword_10004480	dd ?			; DATA XREF: sub_10002B17+59w
dword_10004484	dd ?			; DATA XREF: sub_10002B17+72w
word_10004488	dw ?			; DATA XREF: sub_10002B17+2Ew
		align 4
		dd 80h dup(?)
dword_1000468C	dd ?			; DATA XREF: sub_1000271E:loc_1000279Ar
					; sub_1000271E+9Bw ...
; volatile LONG	Target
Target		dd ?			; DATA XREF: sub_1000271E+24o
					; sub_1000271E+53o
dword_10004694	dd ?			; DATA XREF: sub_100026FC+11w
					; sub_1000271E+13Ar ...
; void *Memory
Memory		dd ?			; DATA XREF: sub_100026FC+Cw
					; sub_1000271E:loc_1000284Er ...
dword_1000469C	dd ?			; DATA XREF: DllEntryPoint:loc_100028E6r
					; DllEntryPoint-E6r ...
dword_100046A0	dd ?			; DATA XREF: sub_1000271E:loc_100027F8r
					; sub_1000271E+E2o ...
dword_100046A4	dd ?			; DATA XREF: sub_10002530+E6r
					; sub_10002530+EFo ...
		align 1000h
_data		ends


		end DllEntryPoint
