;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	04EBF7D30C11F1004D93C7EC56FF4AEB
; Input	CRC32 :	8665A148

; ---------------------------------------------------------------------------
; File Name   :	C:\compspace\compare\pidgin\dlls\original\libplds4.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001ADA (   6874.)
; Section size in file		: 00001C00 (   7168.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

loc_10001000:				; DATA XREF: PL_ArenaAllocate+2Bo
					; PL_ArenaGrow+48o ...
		call	ds:PR_NewLock
		mov	dword_1000437C,	eax
		neg	eax
		sbb	eax, eax
		neg	eax
		dec	eax
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. PL_InitArenaPool

; =============== S U B	R O U T	I N E =======================================


		public PL_InitArenaPool
PL_InitArenaPool proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		push	esi
		test	eax, eax
		jnz	short loc_1000103E
		mov	esi, [esp+4+arg_0]
		mov	eax, 8
		movzx	eax, ds:byte_1000309C[eax]
		mov	[esi+18h], eax
		jmp	short loc_1000106E
; ---------------------------------------------------------------------------

loc_1000103E:				; CODE XREF: PL_InitArenaPool+7j
		cmp	eax, 21h
		jnb	short loc_10001053
		movzx	eax, ds:byte_1000309C[eax]
		mov	esi, [esp+4+arg_0]
		mov	[esi+18h], eax
		jmp	short loc_1000106E
; ---------------------------------------------------------------------------

loc_10001053:				; CODE XREF: PL_InitArenaPool+21j
		mov	esi, [esp+4+arg_0]
		push	eax
		call	ds:PR_CeilingLog2
		mov	edx, 1
		mov	ecx, eax
		shl	edx, cl
		add	esp, 4
		dec	edx
		mov	[esi+18h], edx

loc_1000106E:				; CODE XREF: PL_InitArenaPool+1Cj
					; PL_InitArenaPool+31j
		mov	ecx, [esi+18h]
		mov	edx, ecx
		not	edx
		lea	eax, [ecx+esi+10h]
		and	eax, edx
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		mov	[esi+4], eax
		mov	eax, [esp+4+arg_8]
		lea	edx, [ecx+10h]
		mov	dword ptr [esi], 0
		mov	[esi+10h], esi
		cmp	eax, edx
		jbe	short loc_1000109D
		sub	eax, ecx
		sub	eax, 10h

loc_1000109D:				; CODE XREF: PL_InitArenaPool+76j
		mov	[esi+14h], eax
		pop	esi
		retn
PL_InitArenaPool endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. PL_ArenaAllocate

; =============== S U B	R O U T	I N E =======================================


		public PL_ArenaAllocate
PL_ArenaAllocate proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	eax, [esi+18h]
		lea	ebx, [eax+ecx]
		mov	ecx, [esi+10h]
		not	eax
		and	ebx, eax

loc_100010C7:				; CODE XREF: PL_ArenaAllocate+29j
		mov	edx, [ecx+8]
		sub	edx, [ecx+0Ch]
		cmp	ebx, edx
		jbe	loc_100011A1
		mov	ecx, [ecx]
		test	ecx, ecx
		jnz	short loc_100010C7
		push	offset loc_10001000
		push	offset dword_10004370
		call	ds:PR_CallOnce
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_100011B0
		mov	eax, dword_1000437C
		push	eax
		call	ds:PR_Lock
		add	esp, 4
		push	edi
		mov	edi, dword_10004380
		xor	eax, eax
		test	edi, edi
		jz	short loc_10001129

loc_10001113:				; CODE XREF: PL_ArenaAllocate+77j
		mov	ecx, [edi+8]
		sub	ecx, [edi+4]
		cmp	ebx, ecx
		jbe	loc_100011B5
		mov	eax, edi
		mov	edi, [edi]
		test	edi, edi
		jnz	short loc_10001113

loc_10001129:				; CODE XREF: PL_ArenaAllocate+61j
		mov	eax, dword_1000437C
		push	eax
		call	ds:PR_Unlock
		mov	ecx, [esi+14h]
		add	esp, 4
		cmp	ecx, ebx
		ja	short loc_10001141
		mov	ecx, ebx

loc_10001141:				; CODE XREF: PL_ArenaAllocate+8Dj
		mov	eax, [esi+18h]
		or	edi, 0FFFFFFFFh
		lea	edx, [eax+10h]
		sub	edi, ecx
		cmp	edi, edx
		jb	loc_100011FA
		lea	edi, [ecx+eax+10h]
		push	edi
		call	ds:PR_Malloc
		add	esp, 4
		test	eax, eax
		jz	loc_100011FA
		add	edi, eax
		mov	[eax+8], edi
		mov	ecx, [esi+18h]
		lea	edx, [ecx+eax+10h]
		not	ecx
		and	edx, ecx
		mov	[eax+4], edx
		mov	ecx, edx
		lea	edx, [ecx+ebx]
		mov	[eax+0Ch], edx
		mov	edx, [esi+10h]
		mov	edx, [edx]
		mov	[eax], edx
		mov	edx, [esi+10h]
		mov	[edx], eax
		cmp	dword ptr [esi], 0
		mov	[esi+10h], eax
		jnz	short loc_1000119B
		mov	[esi], eax

loc_1000119B:				; CODE XREF: PL_ArenaAllocate+E7j
		pop	edi
		pop	esi
		mov	eax, ecx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100011A1:				; CODE XREF: PL_ArenaAllocate+1Fj
		mov	[esi+10h], ecx
		mov	eax, [ecx+0Ch]
		lea	edx, [eax+ebx]
		pop	esi
		mov	[ecx+0Ch], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100011B0:				; CODE XREF: PL_ArenaAllocate+41j
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100011B5:				; CODE XREF: PL_ArenaAllocate+6Bj
		test	eax, eax
		jnz	short loc_100011C3
		mov	edx, [edi]
		mov	dword_10004380,	edx
		jmp	short loc_100011C7
; ---------------------------------------------------------------------------

loc_100011C3:				; CODE XREF: PL_ArenaAllocate+107j
		mov	ecx, [edi]
		mov	[eax], ecx

loc_100011C7:				; CODE XREF: PL_ArenaAllocate+111j
		mov	edx, dword_1000437C
		push	edx
		call	ds:PR_Unlock
		mov	eax, [edi+4]
		lea	ecx, [eax+ebx]
		mov	[edi+0Ch], ecx
		mov	edx, [esi+10h]
		mov	ecx, [edx]
		mov	[edi], ecx
		mov	edx, [esi+10h]
		mov	[edx], edi
		add	esp, 4
		cmp	dword ptr [esi], 0
		mov	[esi+10h], edi
		jnz	short loc_100011FC
		mov	[esi], edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100011FA:				; CODE XREF: PL_ArenaAllocate+9Ej
					; PL_ArenaAllocate+B4j
		xor	eax, eax

loc_100011FC:				; CODE XREF: PL_ArenaAllocate+142j
		pop	edi
		pop	esi
		pop	ebx
		retn
PL_ArenaAllocate endp

; Exported entry   3. PL_ArenaGrow

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PL_ArenaGrow(int,	void *Src, size_t Size,	int)
		public PL_ArenaGrow
PL_ArenaGrow	proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+Size]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	edx, [esi+18h]
		mov	ecx, [esi+10h]
		mov	ebx, [ecx+0Ch]
		add	eax, edx
		add	eax, [esp+0Ch+arg_C]
		push	edi
		mov	edi, edx
		not	edi
		and	eax, edi
		lea	ebp, [ebx+eax]
		cmp	ebp, [ecx+8]
		jbe	loc_10001367
		lea	ebx, [edx+eax]
		and	ebx, edi
		mov	eax, ecx

loc_10001234:				; CODE XREF: PL_ArenaGrow+46j
		mov	ecx, [eax+8]
		sub	ecx, [eax+0Ch]
		cmp	ebx, ecx
		jbe	loc_1000130C
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_10001234
		push	offset loc_10001000
		push	offset dword_10004370
		call	ds:PR_CallOnce
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_10001361
		mov	eax, dword_1000437C
		push	eax
		call	ds:PR_Lock
		mov	edi, dword_10004380
		add	esp, 4
		xor	eax, eax
		test	edi, edi
		jz	short loc_10001296
		nop

loc_10001280:				; CODE XREF: PL_ArenaGrow+94j
		mov	ecx, [edi+8]
		sub	ecx, [edi+4]
		cmp	ebx, ecx
		jbe	loc_1000131C
		mov	eax, edi
		mov	edi, [edi]
		test	edi, edi
		jnz	short loc_10001280

loc_10001296:				; CODE XREF: PL_ArenaGrow+7Dj
		mov	eax, dword_1000437C
		push	eax
		call	ds:PR_Unlock
		mov	ecx, [esi+14h]
		add	esp, 4
		cmp	ecx, ebx
		ja	short loc_100012AE
		mov	ecx, ebx

loc_100012AE:				; CODE XREF: PL_ArenaGrow+AAj
		mov	eax, [esi+18h]
		or	edi, 0FFFFFFFFh
		lea	edx, [eax+10h]
		sub	edi, ecx
		cmp	edi, edx
		jb	loc_10001361
		lea	edi, [ecx+eax+10h]
		push	edi
		call	ds:PR_Malloc
		add	esp, 4
		test	eax, eax
		jz	loc_10001361
		add	edi, eax
		mov	[eax+8], edi
		mov	ecx, [esi+18h]
		lea	edx, [ecx+eax+10h]
		not	ecx
		and	edx, ecx
		mov	[eax+4], edx
		mov	ecx, edx
		lea	edx, [ecx+ebx]
		mov	[eax+0Ch], edx
		mov	edx, [esi+10h]
		mov	edx, [edx]
		mov	[eax], edx
		mov	edx, [esi+10h]
		mov	[edx], eax
		cmp	dword ptr [esi], 0
		mov	[esi+10h], eax
		jnz	short loc_10001363
		mov	[esi], eax
		mov	ebx, ecx
		jmp	short loc_1000136A
; ---------------------------------------------------------------------------

loc_1000130C:				; CODE XREF: PL_ArenaGrow+3Cj
		mov	[esi+10h], eax
		mov	ecx, [eax+0Ch]
		lea	edx, [ecx+ebx]
		mov	[eax+0Ch], edx
		mov	ebx, ecx
		jmp	short loc_1000136A
; ---------------------------------------------------------------------------

loc_1000131C:				; CODE XREF: PL_ArenaGrow+88j
		test	eax, eax
		jnz	short loc_1000132A
		mov	edx, [edi]
		mov	dword_10004380,	edx
		jmp	short loc_1000132E
; ---------------------------------------------------------------------------

loc_1000132A:				; CODE XREF: PL_ArenaGrow+11Ej
		mov	ecx, [edi]
		mov	[eax], ecx

loc_1000132E:				; CODE XREF: PL_ArenaGrow+128j
		mov	edx, dword_1000437C
		push	edx
		call	ds:PR_Unlock
		mov	ecx, [edi+4]
		lea	eax, [ecx+ebx]
		mov	[edi+0Ch], eax
		mov	edx, [esi+10h]
		mov	eax, [edx]
		mov	[edi], eax
		mov	edx, [esi+10h]
		mov	[edx], edi
		add	esp, 4
		cmp	dword ptr [esi], 0
		mov	[esi+10h], edi
		jnz	short loc_10001363
		mov	[esi], edi
		mov	ebx, ecx
		jmp	short loc_1000136A
; ---------------------------------------------------------------------------

loc_10001361:				; CODE XREF: PL_ArenaGrow+5Ej
					; PL_ArenaGrow+BBj ...
		xor	ecx, ecx

loc_10001363:				; CODE XREF: PL_ArenaGrow+104j
					; PL_ArenaGrow+159j
		mov	ebx, ecx
		jmp	short loc_1000136A
; ---------------------------------------------------------------------------

loc_10001367:				; CODE XREF: PL_ArenaGrow+27j
		mov	[ecx+0Ch], ebp

loc_1000136A:				; CODE XREF: PL_ArenaGrow+10Aj
					; PL_ArenaGrow+11Aj ...
		test	ebx, ebx
		jz	short loc_10001381
		mov	eax, [esp+10h+Size]
		mov	ecx, [esp+10h+Src]
		push	eax		; Size
		push	ecx		; Src
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10001381:				; CODE XREF: PL_ArenaGrow+16Cj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
PL_ArenaGrow	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. PL_ClearArenaPool

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PL_ClearArenaPool(int, int Val)
		public PL_ClearArenaPool
PL_ClearArenaPool proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
Val		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_100013BD
		push	edi
		mov	edi, [esp+8+Val]

loc_100013A0:				; CODE XREF: PL_ClearArenaPool+2Aj
		mov	eax, [esi+4]
		mov	ecx, [esi+8]
		sub	ecx, eax
		push	ecx		; Size
		push	edi		; Val
		push	eax		; Dst
		mov	[esi+0Ch], eax
		call	memset
		mov	esi, [esi]
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_100013A0
		pop	edi

loc_100013BD:				; CODE XREF: PL_ClearArenaPool+9j
		pop	esi
		retn
PL_ClearArenaPool endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100013C0	proc near		; CODE XREF: PL_FreeArenaPool+8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [edi]
		mov	ebx, edi
		test	esi, esi
		jz	loc_10001459
		cmp	[esp+8+arg_4], 0
		jz	short loc_10001400
		mov	ebx, ds:PR_Free
		jmp	short loc_100013E0
; ---------------------------------------------------------------------------
		align 10h

loc_100013E0:				; CODE XREF: sub_100013C0+1Bj
					; sub_100013C0+2Ej
		mov	eax, [esi]
		push	esi
		mov	[edi], eax
		call	ebx ; PR_Free
		mov	esi, [edi]
		add	esp, 4
		test	esi, esi
		jnz	short loc_100013E0
		mov	ecx, [esp+8+arg_0]
		pop	esi
		mov	[ecx+10h], edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10001400:				; CODE XREF: sub_100013C0+13j
					; sub_100013C0+45j
		mov	ebx, [ebx]
		cmp	dword ptr [ebx], 0
		jnz	short loc_10001400
		push	offset loc_10001000
		push	offset dword_10004370
		call	ds:PR_CallOnce
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000142F
		mov	ecx, dword_1000437C
		push	ecx
		call	ds:PR_Lock
		add	esp, 4

loc_1000142F:				; CODE XREF: sub_100013C0+5Dj
		mov	edx, dword_10004380
		mov	eax, dword_1000437C
		mov	[ebx], edx
		push	eax
		mov	dword_10004380,	esi
		mov	dword ptr [edi], 0
		call	ds:PR_Unlock
		mov	ecx, [esp+0Ch+arg_0]
		add	esp, 4
		mov	[ecx+10h], edi

loc_10001459:				; CODE XREF: sub_100013C0+8j
		pop	esi
		pop	ebx
		retn
sub_100013C0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. PL_ArenaRelease

; =============== S U B	R O U T	I N E =======================================


		public PL_ArenaRelease
PL_ArenaRelease	proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		mov	esi, ebp
		test	ebp, ebp
		jz	loc_100014FB
		mov	ecx, [esp+8+arg_4]
		push	edi

loc_10001475:				; CODE XREF: PL_ArenaRelease+29j
		mov	eax, [esi+4]
		mov	edx, [esi+0Ch]
		mov	edi, ecx
		sub	edx, eax
		sub	edi, eax
		cmp	edi, edx
		jbe	short loc_1000148F
		mov	esi, [esi]
		test	esi, esi
		jnz	short loc_10001475
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000148F:				; CODE XREF: PL_ArenaRelease+23j
		mov	eax, [ebp+18h]
		add	ecx, eax
		push	ebx
		mov	ebx, [esi]
		not	eax
		and	ecx, eax
		mov	[esi+0Ch], ecx
		mov	edi, esi
		test	ebx, ebx
		jz	short loc_100014F9

loc_100014A4:				; CODE XREF: PL_ArenaRelease+49j
		mov	edi, [edi]
		cmp	dword ptr [edi], 0
		jnz	short loc_100014A4
		push	offset loc_10001000
		push	offset dword_10004370
		call	ds:PR_CallOnce
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100014D3
		mov	edx, dword_1000437C
		push	edx
		call	ds:PR_Lock
		add	esp, 4

loc_100014D3:				; CODE XREF: PL_ArenaRelease+61j
		mov	eax, dword_10004380
		mov	ecx, dword_1000437C
		mov	[edi], eax
		push	ecx
		mov	dword_10004380,	ebx
		mov	dword ptr [esi], 0
		call	ds:PR_Unlock
		add	esp, 4
		mov	[ebp+10h], esi

loc_100014F9:				; CODE XREF: PL_ArenaRelease+42j
		pop	ebx
		pop	edi

loc_100014FB:				; CODE XREF: PL_ArenaRelease+Aj
		pop	esi
		pop	ebp
		retn
PL_ArenaRelease	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. PL_FreeArenaPool

; =============== S U B	R O U T	I N E =======================================


		public PL_FreeArenaPool
PL_FreeArenaPool proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		push	0
		push	edi
		call	sub_100013C0
		add	esp, 8
		pop	edi
		retn
PL_FreeArenaPool endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. PL_FinishArenaPool

; =============== S U B	R O U T	I N E =======================================


		public PL_FinishArenaPool
PL_FinishArenaPool proc	near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10001546
		push	edi
		mov	edi, ds:PR_Free

loc_10001532:				; CODE XREF: PL_FinishArenaPool+20j
		mov	ecx, [eax]
		push	eax
		mov	[esi], ecx
		call	edi ; PR_Free
		mov	eax, [esi]
		add	esp, 4
		test	eax, eax
		jnz	short loc_10001532
		mov	[esi+10h], esi
		pop	edi

loc_10001546:				; CODE XREF: PL_FinishArenaPool+9j
		pop	esi
		retn
PL_FinishArenaPool endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. PL_CompactArenaPool

; =============== S U B	R O U T	I N E =======================================


		public PL_CompactArenaPool
PL_CompactArenaPool proc near		; DATA XREF: .rdata:off_100035B8o
		retn
PL_CompactArenaPool endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. PL_ArenaFinish

; =============== S U B	R O U T	I N E =======================================


		public PL_ArenaFinish
PL_ArenaFinish	proc near		; DATA XREF: .rdata:off_100035B8o
		mov	eax, dword_10004380
		test	eax, eax
		jz	short loc_10001581
		push	esi
		push	edi
		mov	edi, ds:PR_Free

loc_10001571:				; CODE XREF: PL_ArenaFinish+1Dj
		mov	esi, [eax]
		push	eax
		call	edi ; PR_Free
		add	esp, 4
		mov	eax, esi
		test	esi, esi
		jnz	short loc_10001571
		pop	edi
		pop	esi

loc_10001581:				; CODE XREF: PL_ArenaFinish+7j
		mov	eax, dword_1000437C
		mov	dword_10004380,	0
		test	eax, eax
		jz	short loc_100015A8
		push	eax
		call	ds:PR_DestroyLock
		add	esp, 4
		mov	dword_1000437C,	0

loc_100015A8:				; CODE XREF: PL_ArenaFinish+32j
		mov	eax, ds:dword_10003090
		mov	ecx, ds:dword_10003094
		mov	edx, ds:dword_10003098
		mov	dword_10004370,	eax
		mov	dword_10004374,	ecx
		mov	dword_10004378,	edx
		retn
PL_ArenaFinish	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. PL_SizeOfArenaPoolExcludingPool

; =============== S U B	R O U T	I N E =======================================


		public PL_SizeOfArenaPoolExcludingPool
PL_SizeOfArenaPoolExcludingPool	proc near ; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [eax]
		push	edi
		xor	edi, edi
		test	esi, esi
		jz	short loc_100015F2
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]

loc_100015E3:				; CODE XREF: PL_SizeOfArenaPoolExcludingPool+1Fj
		push	esi
		call	ebx
		mov	esi, [esi]
		add	esp, 4
		add	edi, eax
		test	esi, esi
		jnz	short loc_100015E3
		pop	ebx

loc_100015F2:				; CODE XREF: PL_SizeOfArenaPoolExcludingPool+Cj
		mov	eax, edi
		pop	edi
		pop	esi
		retn
PL_SizeOfArenaPoolExcludingPool	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001600	proc near		; DATA XREF: .data:off_10004000o

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	eax
		call	ds:PR_Malloc
		add	esp, 4
		retn
sub_10001600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001610	proc near		; DATA XREF: .data:10004004o

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	eax
		call	ds:PR_Free
		pop	ecx
		retn
sub_10001610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001620	proc near		; DATA XREF: .data:10004008o
		push	10h
		call	ds:PR_Malloc
		add	esp, 4
		retn
sub_10001620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001630	proc near		; DATA XREF: .data:1000400Co

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		cmp	[esp+arg_8], 1
		jnz	short locret_10001643
		mov	eax, [esp+arg_4]
		push	eax
		call	ds:PR_Free
		pop	ecx

locret_10001643:			; CODE XREF: sub_10001630+5j
		retn
sub_10001630	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. PL_NewHashTable

; =============== S U B	R O U T	I N E =======================================


		public PL_NewHashTable
PL_NewHashTable	proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_0]
		cmp	eax, 10h
		ja	loc_100016DF
		mov	[esp+arg_0], 4

loc_10001665:				; CODE XREF: PL_NewHashTable+9Fj
		push	ebx
		mov	ebx, [esp+4+arg_10]
		test	ebx, ebx
		jnz	short loc_10001673
		mov	ebx, offset off_10004000

loc_10001673:				; CODE XREF: PL_NewHashTable+1Cj
		mov	eax, [ebx]
		push	ebp
		mov	ebp, [esp+8+arg_14]
		push	esi
		push	20h
		push	ebp
		call	eax
		mov	esi, eax
		add	esp, 8
		xor	eax, eax
		test	esi, esi
		jz	loc_10001722
		mov	[esi], eax
		mov	[esi+4], eax
		mov	[esi+0Ch], eax
		mov	[esi+10h], eax
		mov	[esi+14h], eax
		push	edi
		mov	[esi+18h], eax
		mov	ecx, 20h
		sub	ecx, [esp+10h+arg_0]
		mov	[esi+1Ch], eax
		mov	[esi+8], ecx
		mov	ecx, [esp+10h+arg_0]
		mov	edx, [ebx]
		mov	edi, 1
		shl	edi, cl
		add	edi, edi
		add	edi, edi
		push	edi
		push	ebp
		call	edx
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_100016F8
		mov	eax, [ebx+4]
		push	esi
		push	ebp
		call	eax
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100016DF:				; CODE XREF: PL_NewHashTable+7j
		push	eax
		call	ds:PR_CeilingLog2
		add	esp, 4
		mov	[esp+arg_0], eax
		test	eax, eax
		jns	loc_10001665
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100016F8:				; CODE XREF: PL_NewHashTable+7Cj
		push	edi		; Size
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esp+1Ch+arg_C]
		mov	ecx, [esp+1Ch+arg_4]
		mov	edx, [esp+1Ch+arg_8]
		add	esp, 0Ch
		mov	[esi+14h], eax
		mov	[esi+0Ch], ecx
		mov	[esi+10h], edx
		mov	[esi+18h], ebx
		mov	[esi+1Ch], ebp
		mov	eax, esi
		pop	edi

loc_10001722:				; CODE XREF: PL_NewHashTable+39j
		pop	esi
		pop	ebp
		pop	ebx
		retn
PL_NewHashTable	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. PL_HashTableDestroy

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableDestroy
PL_HashTableDestroy proc near		; DATA XREF: .rdata:off_100035B8o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		mov	ebx, [ebp+1Ch]
		mov	ecx, 20h
		sub	ecx, [ebp+8]
		mov	edx, 1
		shl	edx, cl
		xor	ecx, ecx
		push	edi
		mov	edi, [ebp+18h]
		mov	[esp+10h+var_4], edx
		mov	[esp+10h+arg_0], ecx
		test	edx, edx
		jz	short loc_10001796
		push	esi
		lea	esp, [esp+0]

loc_10001760:				; CODE XREF: PL_HashTableDestroy+63j
		mov	eax, [ebp+0]
		mov	eax, [eax+ecx*4]
		test	eax, eax
		jz	short loc_1000178C
		lea	ebx, [ebx+0]

loc_10001770:				; CODE XREF: PL_HashTableDestroy+52j
		mov	ecx, [edi+0Ch]
		mov	esi, [eax]
		push	1
		push	eax
		push	ebx
		call	ecx
		add	esp, 0Ch
		mov	eax, esi
		test	esi, esi
		jnz	short loc_10001770
		mov	edx, [esp+14h+var_4]
		mov	ecx, [esp+14h+arg_0]

loc_1000178C:				; CODE XREF: PL_HashTableDestroy+38j
		inc	ecx
		mov	[esp+14h+arg_0], ecx
		cmp	ecx, edx
		jb	short loc_10001760
		pop	esi

loc_10001796:				; CODE XREF: PL_HashTableDestroy+29j
		mov	edx, [ebp+0]
		mov	eax, [edi+4]
		push	edx
		push	ebx
		call	eax
		mov	ecx, [edi+4]
		push	ebp
		push	ebx
		call	ecx
		add	esp, 10h
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
PL_HashTableDestroy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. PL_HashTableRawLookup

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableRawLookup
PL_HashTableRawLookup proc near		; CODE XREF: PL_HashTableRawAdd+12Fp
					; PL_HashTableAdd+17p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		imul	eax, 9E3779B9h
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		mov	ecx, [ebp+8]
		shr	eax, cl
		mov	ecx, [ebp+0]
		push	esi
		mov	esi, [ecx+eax*4]
		push	edi
		lea	edi, [ecx+eax*4]
		mov	ebx, edi
		test	esi, esi
		jz	short loc_100017FC

loc_100017D6:				; CODE XREF: PL_HashTableRawLookup+4Aj
		mov	edx, [esp+10h+arg_4]
		cmp	[esi+4], edx
		jnz	short loc_100017F4
		mov	eax, [esi+8]
		mov	ecx, [esp+10h+arg_8]
		mov	edx, [ebp+10h]
		push	eax
		push	ecx
		call	edx
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001803

loc_100017F4:				; CODE XREF: PL_HashTableRawLookup+2Dj
		mov	ebx, esi
		mov	esi, [esi]
		test	esi, esi
		jnz	short loc_100017D6

loc_100017FC:				; CODE XREF: PL_HashTableRawLookup+24j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001803:				; CODE XREF: PL_HashTableRawLookup+42j
		cmp	ebx, edi
		jz	short loc_10001811
		mov	eax, [esi]
		mov	[ebx], eax
		mov	ecx, [edi]
		mov	[esi], ecx
		mov	[edi], esi

loc_10001811:				; CODE XREF: PL_HashTableRawLookup+55j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
PL_HashTableRawLookup endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. PL_HashTableRawLookupConst

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableRawLookupConst
PL_HashTableRawLookupConst proc	near	; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	ecx, [ebx+8]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		mov	eax, ebp
		imul	eax, 9E3779B9h
		shr	eax, cl
		mov	ecx, [ebx]
		push	esi
		mov	esi, [ecx+eax*4]
		push	edi
		lea	edi, [ecx+eax*4]
		test	esi, esi
		jz	short loc_10001867

loc_10001845:				; CODE XREF: PL_HashTableRawLookupConst+45j
		cmp	[esi+4], ebp
		jnz	short loc_1000185F
		mov	edx, [esi+8]
		mov	eax, [esp+10h+arg_8]
		mov	ecx, [ebx+10h]
		push	edx
		push	eax
		call	ecx
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001867

loc_1000185F:				; CODE XREF: PL_HashTableRawLookupConst+28j
		mov	edi, esi
		mov	esi, [esi]
		test	esi, esi
		jnz	short loc_10001845

loc_10001867:				; CODE XREF: PL_HashTableRawLookupConst+23j
					; PL_HashTableRawLookupConst+3Dj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
PL_HashTableRawLookupConst endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  18. PL_HashTableRawAdd

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableRawAdd
PL_HashTableRawAdd proc	near		; CODE XREF: PL_HashTableAdd+64p
					; DATA XREF: .rdata:off_100035B8o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+28h+arg_0]
		mov	ecx, 20h
		sub	ecx, [edi+8]
		mov	esi, 1
		shl	esi, cl
		mov	eax, esi
		shr	eax, 3
		mov	ecx, esi
		sub	ecx, eax
		mov	[esp+28h+var_8], esi
		cmp	[edi+4], ecx
		jb	loc_100019C1
		mov	edx, [edi+18h]
		mov	eax, [edi+1Ch]
		mov	ebp, [edi]
		mov	ecx, [edx]
		lea	ebx, ds:0[esi*8]
		push	ebx
		push	eax
		mov	[esp+30h+var_4], ebp
		call	ecx
		add	esp, 8
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_100018CE
		mov	[edi], ebp

loc_100018C4:				; CODE XREF: PL_HashTableRawAdd+16Bj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_100018CE:				; CODE XREF: PL_HashTableRawAdd+50j
		push	ebx		; Size
		push	0		; Val
		push	eax		; Dst
		call	memset
		dec	dword ptr [edi+8]
		xor	eax, eax
		add	esp, 0Ch
		mov	[esp+28h+var_18], eax
		test	esi, esi
		jz	loc_10001987
		jmp	short loc_100018F0
; ---------------------------------------------------------------------------
		align 10h

loc_100018F0:				; CODE XREF: PL_HashTableRawAdd+7Bj
					; PL_HashTableRawAdd+111j
		mov	ebx, [ebp+eax*4+0]
		test	ebx, ebx
		jz	loc_1000197A
		lea	esp, [esp+0]

loc_10001900:				; CODE XREF: PL_HashTableRawAdd+FCj
		mov	eax, [ebx+8]
		mov	edx, [ebx]
		mov	ecx, [edi+8]
		mov	[esp+28h+var_C], edx
		mov	[esp+28h+var_14], eax
		mov	eax, [ebx+4]
		mov	edx, eax
		imul	edx, 9E3779B9h
		shr	edx, cl
		mov	ecx, [edi]
		mov	esi, [ecx+edx*4]
		mov	[esp+28h+var_10], eax
		lea	ebp, [ecx+edx*4]
		mov	[esp+28h+arg_0], ebp
		test	esi, esi
		jz	short loc_10001959

loc_10001931:				; CODE XREF: PL_HashTableRawAdd+E7j
		cmp	[esi+4], eax
		jnz	short loc_1000194F
		mov	edx, [esi+8]
		mov	eax, [esp+28h+var_14]
		mov	ecx, [edi+10h]
		push	edx
		push	eax
		call	ecx
		add	esp, 8
		test	eax, eax
		jnz	short loc_100019AB
		mov	eax, [esp+28h+var_10]

loc_1000194F:				; CODE XREF: PL_HashTableRawAdd+C4j
		mov	[esp+28h+arg_0], esi
		mov	esi, [esi]
		test	esi, esi
		jnz	short loc_10001931

loc_10001959:				; CODE XREF: PL_HashTableRawAdd+BFj
		mov	ebp, [esp+28h+arg_0]

loc_1000195D:				; CODE XREF: PL_HashTableRawAdd+141j
					; PL_HashTableRawAdd+14Fj
		mov	dword ptr [ebx], 0
		mov	[ebp+0], ebx
		mov	ebx, [esp+28h+var_C]
		test	ebx, ebx
		jnz	short loc_10001900
		mov	esi, [esp+28h+var_8]
		mov	ebp, [esp+28h+var_4]
		mov	eax, [esp+28h+var_18]

loc_1000197A:				; CODE XREF: PL_HashTableRawAdd+86j
		inc	eax
		mov	[esp+28h+var_18], eax
		cmp	eax, esi
		jb	loc_100018F0

loc_10001987:				; CODE XREF: PL_HashTableRawAdd+75j
		mov	ecx, [edi+18h]
		mov	edx, [edi+1Ch]
		mov	eax, [ecx+4]
		push	ebp
		push	edx
		call	eax
		mov	ebx, [esp+30h+arg_C]
		mov	ecx, [esp+30h+arg_8]
		push	ebx
		push	ecx
		push	edi
		call	PL_HashTableRawLookup
		add	esp, 14h
		mov	esi, eax
		jmp	short loc_100019C9
; ---------------------------------------------------------------------------

loc_100019AB:				; CODE XREF: PL_HashTableRawAdd+D9j
		mov	eax, [esp+28h+arg_0]
		cmp	eax, ebp
		jz	short loc_1000195D
		mov	edx, [esi]
		mov	[eax], edx
		mov	eax, [ebp+0]
		mov	[esi], eax
		mov	[ebp+0], esi
		jmp	short loc_1000195D
; ---------------------------------------------------------------------------

loc_100019C1:				; CODE XREF: PL_HashTableRawAdd+2Aj
		mov	esi, [esp+28h+arg_4]
		mov	ebx, [esp+28h+arg_C]

loc_100019C9:				; CODE XREF: PL_HashTableRawAdd+139j
		mov	edx, [edi+18h]
		mov	eax, [edi+1Ch]
		mov	ecx, [edx+8]
		push	ebx
		push	eax
		call	ecx
		add	esp, 8
		test	eax, eax
		jz	loc_100018C4
		mov	edx, [esp+28h+arg_8]
		mov	ecx, [esp+28h+arg_10]
		mov	[eax+8], ebx
		mov	[eax+4], edx
		mov	[eax+0Ch], ecx
		mov	edx, [esi]
		mov	[eax], edx
		mov	[esi], eax
		inc	dword ptr [edi+4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
PL_HashTableRawAdd endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. PL_HashTableAdd

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableAdd
PL_HashTableAdd	proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	eax, [edi+0Ch]
		push	ebx
		call	eax
		mov	ebp, eax
		push	ebx
		push	ebp
		push	edi
		call	PL_HashTableRawLookup
		mov	esi, [eax]
		add	esp, 10h
		test	esi, esi
		jz	short loc_10001A6B
		mov	ebx, [esp+10h+arg_8]
		mov	ecx, [esi+0Ch]
		mov	edx, [edi+14h]
		push	ebx
		push	ecx
		call	edx
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001A64
		cmp	[esi+0Ch], eax
		jz	short loc_10001A61
		mov	eax, [edi+18h]
		mov	ecx, [edi+1Ch]
		mov	edx, [eax+0Ch]
		push	0
		push	esi
		push	ecx
		call	edx
		add	esp, 0Ch

loc_10001A61:				; CODE XREF: PL_HashTableAdd+3Dj
		mov	[esi+0Ch], ebx

loc_10001A64:				; CODE XREF: PL_HashTableAdd+38j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001A6B:				; CODE XREF: PL_HashTableAdd+23j
		mov	ecx, [esp+10h+arg_8]
		push	ecx
		push	ebx
		push	ebp
		push	eax
		push	edi
		call	PL_HashTableRawAdd
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
PL_HashTableAdd	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. PL_HashTableRawRemove

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableRawRemove
PL_HashTableRawRemove proc near		; CODE XREF: PL_HashTableRemove+29p
					; DATA XREF: .rdata:off_100035B8o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		mov	eax, [esp+10h+arg_8]
		mov	ecx, [eax]
		mov	edx, [esp+10h+arg_4]
		push	ebp
		mov	ebp, [esp+14h+arg_0]
		push	esi
		mov	[edx], ecx
		mov	ecx, [ebp+18h]
		mov	edx, [ebp+1Ch]
		push	1
		push	eax
		mov	eax, [ecx+0Ch]
		push	edx
		call	eax
		mov	ecx, 20h
		sub	ecx, [ebp+8]
		mov	esi, 1
		shl	esi, cl
		add	esp, 0Ch
		mov	[esp+18h+var_4], esi
		cmp	esi, 10h
		jbe	short loc_10001AD6
		mov	eax, esi
		shr	eax, 2
		jmp	short loc_10001AD8
; ---------------------------------------------------------------------------

loc_10001AD6:				; CODE XREF: PL_HashTableRawRemove+3Dj
		xor	eax, eax

loc_10001AD8:				; CODE XREF: PL_HashTableRawRemove+44j
		dec	dword ptr [ebp+4]
		cmp	[ebp+4], eax
		jnb	loc_10001BD9
		mov	ecx, [ebp+18h]
		mov	edx, [ebp+1Ch]
		mov	eax, [ecx]
		push	ebx
		mov	ebx, [ebp+0]
		push	edi
		lea	edi, ds:0[esi*4]
		shr	edi, 1
		push	edi
		push	edx
		mov	[esp+28h+var_8], ebx
		call	eax
		add	esp, 8
		mov	[ebp+0], eax
		test	eax, eax
		jnz	short loc_10001B17
		pop	edi
		mov	[ebp+0], ebx
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10001B17:				; CODE XREF: PL_HashTableRawRemove+7Aj
		push	edi		; Size
		push	0		; Val
		push	eax		; Dst
		call	memset
		inc	dword ptr [ebp+8]
		xor	eax, eax
		add	esp, 0Ch
		mov	[esp+20h+arg_4], eax
		test	esi, esi
		jz	loc_10001BC7

loc_10001B34:				; CODE XREF: PL_HashTableRawRemove+131j
		mov	edi, [ebx+eax*4]
		test	edi, edi
		jz	loc_10001BBA
		nop

loc_10001B40:				; CODE XREF: PL_HashTableRawRemove+11Cj
		mov	edx, [edi+8]
		mov	eax, [edi+4]
		mov	ecx, [edi]
		mov	[esp+20h+arg_0], edx
		mov	edx, eax
		imul	edx, 9E3779B9h
		mov	[esp+20h+var_C], ecx
		mov	ecx, [ebp+8]
		shr	edx, cl
		mov	ecx, [ebp+0]
		mov	esi, [ecx+edx*4]
		mov	[esp+20h+var_10], eax
		lea	ebx, [ecx+edx*4]
		mov	[esp+20h+arg_8], ebx
		test	esi, esi
		jz	short loc_10001B9A

loc_10001B72:				; CODE XREF: PL_HashTableRawRemove+108j
		cmp	[esi+4], eax
		jnz	short loc_10001B90
		mov	edx, [esi+8]
		mov	eax, [esp+20h+arg_0]
		mov	ecx, [ebp+10h]
		push	edx
		push	eax
		call	ecx
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001BDF
		mov	eax, [esp+20h+var_10]

loc_10001B90:				; CODE XREF: PL_HashTableRawRemove+E5j
		mov	[esp+20h+arg_8], esi
		mov	esi, [esi]
		test	esi, esi
		jnz	short loc_10001B72

loc_10001B9A:				; CODE XREF: PL_HashTableRawRemove+E0j
		mov	ebx, [esp+20h+arg_8]

loc_10001B9E:				; CODE XREF: PL_HashTableRawRemove+155j
					; PL_HashTableRawRemove+161j
		mov	dword ptr [edi], 0
		mov	[ebx], edi
		mov	edi, [esp+20h+var_C]
		test	edi, edi
		jnz	short loc_10001B40
		mov	ebx, [esp+20h+var_8]
		mov	esi, [esp+20h+var_4]
		mov	eax, [esp+20h+arg_4]

loc_10001BBA:				; CODE XREF: PL_HashTableRawRemove+A9j
		inc	eax
		mov	[esp+20h+arg_4], eax
		cmp	eax, esi
		jb	loc_10001B34

loc_10001BC7:				; CODE XREF: PL_HashTableRawRemove+9Ej
		mov	ecx, [ebp+18h]
		mov	edx, [ebp+1Ch]
		mov	eax, [ecx+4]
		push	ebx
		push	edx
		call	eax
		add	esp, 8
		pop	edi
		pop	ebx

loc_10001BD9:				; CODE XREF: PL_HashTableRawRemove+4Ej
		pop	esi
		pop	ebp
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10001BDF:				; CODE XREF: PL_HashTableRawRemove+FAj
		mov	eax, [esp+20h+arg_8]
		cmp	eax, ebx
		jz	short loc_10001B9E
		mov	edx, [esi]
		mov	[eax], edx
		mov	eax, [ebx]
		mov	[esi], eax
		mov	[ebx], esi
		jmp	short loc_10001B9E
PL_HashTableRawRemove endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. PL_HashTableRemove

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableRemove
PL_HashTableRemove proc	near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+0Ch]
		push	edi
		mov	edi, [esp+8+arg_4]
		push	edi
		call	eax
		push	edi
		push	eax
		push	esi
		call	PL_HashTableRawLookup
		mov	ecx, [eax]
		add	esp, 10h
		test	ecx, ecx
		jnz	short loc_10001C26
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001C26:				; CODE XREF: PL_HashTableRemove+1Fj
		push	ecx
		push	eax
		push	esi
		call	PL_HashTableRawRemove
		add	esp, 0Ch
		pop	edi
		mov	eax, 1
		pop	esi
		retn
PL_HashTableRemove endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. PL_HashTableLookup

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableLookup
PL_HashTableLookup proc	near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+0Ch]
		push	esi
		call	eax
		push	esi
		push	eax
		push	edi
		call	PL_HashTableRawLookup
		mov	eax, [eax]
		add	esp, 10h
		pop	edi
		pop	esi
		test	eax, eax
		jz	short loc_10001C67
		mov	eax, [eax+0Ch]
		retn
; ---------------------------------------------------------------------------

loc_10001C67:				; CODE XREF: PL_HashTableLookup+21j
		xor	eax, eax
		retn
PL_HashTableLookup endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. PL_HashTableLookupConst

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableLookupConst
PL_HashTableLookupConst	proc near	; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	ecx, [edi+0Ch]
		push	eax
		call	ecx
		mov	ecx, [edi+8]
		mov	ebp, eax
		mov	eax, [edi]
		mov	edx, ebp
		imul	edx, 9E3779B9h
		shr	edx, cl
		mov	esi, [eax+edx*4]
		add	esp, 4
		lea	ebx, [eax+edx*4]
		test	esi, esi
		jz	short loc_10001CC2

loc_10001CA0:				; CODE XREF: PL_HashTableLookupConst+50j
		cmp	[esi+4], ebp
		jnz	short loc_10001CBA
		mov	ecx, [esi+8]
		mov	edx, [esp+10h+arg_4]
		mov	eax, [edi+10h]
		push	ecx
		push	edx
		call	eax
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001CC2

loc_10001CBA:				; CODE XREF: PL_HashTableLookupConst+33j
		mov	ebx, esi
		mov	esi, [esi]
		test	esi, esi
		jnz	short loc_10001CA0

loc_10001CC2:				; CODE XREF: PL_HashTableLookupConst+2Ej
					; PL_HashTableLookupConst+48j
		mov	ebx, [ebx]
		test	ebx, ebx
		jz	short loc_10001CD0
		mov	eax, [ebx+0Ch]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001CD0:				; CODE XREF: PL_HashTableLookupConst+56j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
PL_HashTableLookupConst	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. PL_HashTableEnumerateEntries

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableEnumerateEntries
PL_HashTableEnumerateEntries proc near	; CODE XREF: PL_HashTableDumpj
					; DATA XREF: .rdata:off_100035B8o

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 20h
		push	ebx
		mov	ebx, [esp+24h+arg_0]
		mov	ecx, 20h
		sub	ecx, [ebx+8]
		mov	edx, 1
		shl	edx, cl
		push	ebp
		xor	eax, eax
		xor	ebp, ebp
		push	esi
		push	edi
		mov	[esp+30h+var_1C], ebp
		mov	[esp+30h+var_20], eax
		mov	[esp+30h+var_18], edx
		mov	[esp+30h+arg_0], eax
		cmp	edx, eax
		jbe	short loc_10001D68

loc_10001D12:				; CODE XREF: PL_HashTableEnumerateEntries+86j
		mov	ecx, [ebx]
		mov	esi, [ecx+eax*4]
		lea	edi, [ecx+eax*4]
		test	esi, esi
		jz	short loc_10001D5F
		mov	edi, edi

loc_10001D20:				; CODE XREF: PL_HashTableEnumerateEntries+75j
		mov	edx, [esp+30h+arg_8]
		push	edx
		push	ebp
		push	esi
		call	[esp+3Ch+arg_4]
		inc	ebp
		add	esp, 0Ch
		mov	[esp+30h+var_1C], ebp
		test	al, 6
		jz	short loc_10001D4B
		mov	ecx, [esi]
		mov	[edi], ecx
		test	al, 2
		jz	short loc_10001D4D
		mov	edx, [esp+30h+var_20]
		mov	[esi], edx
		mov	[esp+30h+var_20], esi
		jmp	short loc_10001D4D
; ---------------------------------------------------------------------------

loc_10001D4B:				; CODE XREF: PL_HashTableEnumerateEntries+55j
		mov	edi, esi

loc_10001D4D:				; CODE XREF: PL_HashTableEnumerateEntries+5Dj
					; PL_HashTableEnumerateEntries+69j
		test	al, 1
		jnz	short loc_10001D68
		mov	esi, [edi]
		test	esi, esi
		jnz	short loc_10001D20
		mov	eax, [esp+30h+arg_0]
		mov	edx, [esp+30h+var_18]

loc_10001D5F:				; CODE XREF: PL_HashTableEnumerateEntries+3Cj
		inc	eax
		mov	[esp+30h+arg_0], eax
		cmp	eax, edx
		jb	short loc_10001D12

loc_10001D68:				; CODE XREF: PL_HashTableEnumerateEntries+30j
					; PL_HashTableEnumerateEntries+6Fj
		mov	eax, [esp+30h+var_20]
		test	eax, eax
		jz	loc_10001EB7

loc_10001D74:				; CODE XREF: PL_HashTableEnumerateEntries+1D1j
		mov	ecx, [esp+30h+var_20]
		mov	edx, [ecx]
		mov	ecx, [ebx+18h]
		push	1
		mov	[esp+34h+var_20], edx
		mov	edx, [ebx+1Ch]
		push	eax
		mov	eax, [ecx+0Ch]
		push	edx
		call	eax
		mov	ecx, 20h
		sub	ecx, [ebx+8]
		mov	esi, 1
		shl	esi, cl
		add	esp, 0Ch
		mov	[esp+30h+var_8], esi
		cmp	esi, 10h
		jbe	short loc_10001DAF
		mov	eax, esi
		shr	eax, 2
		jmp	short loc_10001DB1
; ---------------------------------------------------------------------------

loc_10001DAF:				; CODE XREF: PL_HashTableEnumerateEntries+C6j
		xor	eax, eax

loc_10001DB1:				; CODE XREF: PL_HashTableEnumerateEntries+CDj
		dec	dword ptr [ebx+4]
		cmp	[ebx+4], eax
		jnb	loc_10001EAB
		mov	ecx, [ebx+18h]
		mov	edx, [ebx+1Ch]
		mov	ebp, [ebx]
		mov	eax, [ecx]
		lea	edi, ds:0[esi*4]
		shr	edi, 1
		push	edi
		push	edx
		mov	[esp+38h+var_4], ebp
		call	eax
		add	esp, 8
		mov	[ebx], eax
		test	eax, eax
		jnz	short loc_10001DE8
		mov	[ebx], ebp
		jmp	loc_10001EA7
; ---------------------------------------------------------------------------

loc_10001DE8:				; CODE XREF: PL_HashTableEnumerateEntries+FFj
		push	edi		; Size
		push	0		; Val
		push	eax		; Dst
		call	memset
		inc	dword ptr [ebx+8]
		xor	eax, eax
		add	esp, 0Ch
		mov	[esp+30h+var_18], eax
		test	esi, esi
		jz	loc_10001E97

loc_10001E05:				; CODE XREF: PL_HashTableEnumerateEntries+1B1j
		mov	edi, [ebp+eax*4+0]
		test	edi, edi
		jz	short loc_10001E8A
		lea	ecx, [ecx+0]

loc_10001E10:				; CODE XREF: PL_HashTableEnumerateEntries+19Cj
		mov	edx, [edi+8]
		mov	eax, [edi+4]
		mov	ecx, [edi]
		mov	[esp+30h+var_14], edx
		mov	edx, eax
		imul	edx, 9E3779B9h
		mov	[esp+30h+var_C], ecx
		mov	ecx, [ebx+8]
		shr	edx, cl
		mov	ecx, [ebx]
		mov	esi, [ecx+edx*4]
		mov	[esp+30h+var_10], eax
		lea	ebp, [ecx+edx*4]
		mov	[esp+30h+arg_0], ebp
		test	esi, esi
		jz	short loc_10001E69

loc_10001E41:				; CODE XREF: PL_HashTableEnumerateEntries+187j
		cmp	[esi+4], eax
		jnz	short loc_10001E5F
		mov	edx, [esi+8]
		mov	eax, [esp+30h+var_14]
		mov	ecx, [ebx+10h]
		push	edx
		push	eax
		call	ecx
		add	esp, 8
		test	eax, eax
		jnz	short loc_10001EC1
		mov	eax, [esp+30h+var_10]

loc_10001E5F:				; CODE XREF: PL_HashTableEnumerateEntries+164j
		mov	[esp+30h+arg_0], esi
		mov	esi, [esi]
		test	esi, esi
		jnz	short loc_10001E41

loc_10001E69:				; CODE XREF: PL_HashTableEnumerateEntries+15Fj
		mov	ebp, [esp+30h+arg_0]

loc_10001E6D:				; CODE XREF: PL_HashTableEnumerateEntries+1E7j
					; PL_HashTableEnumerateEntries+1F5j
		mov	dword ptr [edi], 0
		mov	[ebp+0], edi
		mov	edi, [esp+30h+var_C]
		test	edi, edi
		jnz	short loc_10001E10
		mov	esi, [esp+30h+var_8]
		mov	ebp, [esp+30h+var_4]
		mov	eax, [esp+30h+var_18]

loc_10001E8A:				; CODE XREF: PL_HashTableEnumerateEntries+12Bj
		inc	eax
		mov	[esp+30h+var_18], eax
		cmp	eax, esi
		jb	loc_10001E05

loc_10001E97:				; CODE XREF: PL_HashTableEnumerateEntries+11Fj
		mov	ecx, [ebx+18h]
		mov	edx, [ebx+1Ch]
		mov	eax, [ecx+4]
		push	ebp
		push	edx
		call	eax
		add	esp, 8

loc_10001EA7:				; CODE XREF: PL_HashTableEnumerateEntries+103j
		mov	ebp, [esp+30h+var_1C]

loc_10001EAB:				; CODE XREF: PL_HashTableEnumerateEntries+D7j
		mov	eax, [esp+30h+var_20]
		test	eax, eax
		jnz	loc_10001D74

loc_10001EB7:				; CODE XREF: PL_HashTableEnumerateEntries+8Ej
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10001EC1:				; CODE XREF: PL_HashTableEnumerateEntries+179j
		mov	eax, [esp+30h+arg_0]
		cmp	eax, ebp
		jz	short loc_10001E6D
		mov	edx, [esi]
		mov	[eax], edx
		mov	eax, [ebp+0]
		mov	[esi], eax
		mov	[ebp+0], esi
		jmp	short loc_10001E6D
PL_HashTableEnumerateEntries endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  14. PL_HashTableDump

; =============== S U B	R O U T	I N E =======================================


		public PL_HashTableDump
PL_HashTableDump proc near		; DATA XREF: .rdata:off_100035B8o
		jmp	PL_HashTableEnumerateEntries
PL_HashTableDump endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. PL_HashString

; =============== S U B	R O U T	I N E =======================================


		public PL_HashString
PL_HashString	proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	cl, [edx]
		xor	eax, eax
		test	cl, cl
		jz	short locret_10001F0F
		lea	esp, [esp+0]

loc_10001F00:				; CODE XREF: PL_HashString+1Dj
		movzx	ecx, cl
		rol	eax, 4
		inc	edx
		xor	eax, ecx
		mov	cl, [edx]
		test	cl, cl
		jnz	short loc_10001F00

locret_10001F0F:			; CODE XREF: PL_HashString+Aj
		retn
PL_HashString	endp

; Exported entry   7. PL_CompareStrings

; =============== S U B	R O U T	I N E =======================================


		public PL_CompareStrings
PL_CompareStrings proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]

loc_10001F18:				; CODE XREF: PL_CompareStrings+22j
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	short loc_10001F40
		test	al, al
		jz	short loc_10001F34
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	short loc_10001F40
		add	ecx, 2
		add	edx, 2
		test	al, al
		jnz	short loc_10001F18

loc_10001F34:				; CODE XREF: PL_CompareStrings+10j
		xor	eax, eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_10001F40:				; CODE XREF: PL_CompareStrings+Cj
					; PL_CompareStrings+18j
		sbb	eax, eax
		sbb	eax, 0FFFFFFFFh
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	eax, ecx
		retn
PL_CompareStrings endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. PL_CompareValues

; =============== S U B	R O U T	I N E =======================================


		public PL_CompareValues
PL_CompareValues proc near		; DATA XREF: .rdata:off_100035B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		cmp	ecx, [esp+arg_4]
		setz	al
		retn
PL_CompareValues endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  26. libVersionPoint

; =============== S U B	R O U T	I N E =======================================


		public libVersionPoint
libVersionPoint	proc near		; DATA XREF: .rdata:off_100035B8o
		mov	eax, offset dword_10004010
		retn
libVersionPoint	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000010 BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]

; =============== S U B	R O U T	I N E =======================================


sub_10001F80	proc near		; CODE XREF: sub_10002010+2Dp
					; .text:10002066p ...

var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		push	ebp
		push	edx
		push	eax
		push	ecx
		push	ecx
		push	offset sub_10002010
		push	large dword ptr	fs:0
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_20], eax
		mov	large fs:0, esp

loc_10001FB2:				; CODE XREF: sub_10001F80+64j
					; sub_10001F80+80j
		mov	eax, [esp+28h+arg_4]
		mov	ebx, [eax+8]
		mov	ecx, [esp+28h+arg_0]
		xor	ebx, [ecx]
		mov	esi, [eax+0Ch]
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10002002
		mov	edx, [esp+28h+arg_8]
		cmp	edx, 0FFFFFFFEh
		jz	short loc_10001FD4
		cmp	esi, edx
		jbe	short loc_10002002

loc_10001FD4:				; CODE XREF: sub_10001F80+4Ej
		lea	esi, [esi+esi*2]
		lea	ebx, [ebx+esi*4+10h]
		mov	ecx, [ebx]
		mov	[eax+0Ch], ecx
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_10001FB2
		push	101h
		mov	eax, [ebx+8]
		call	sub_10002851
		mov	ecx, 1
		mov	eax, [ebx+8]
		call	sub_10002870
		jmp	short loc_10001FB2
; ---------------------------------------------------------------------------

loc_10002002:				; CODE XREF: sub_10001F80+45j
					; sub_10001F80+52j
		pop	large dword ptr	fs:0
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10001F80	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002010	proc near		; DATA XREF: sub_10001F80+14o
					; .rdata:___safe_se_handler_tableo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		test	dword ptr [ecx+4], 6
		mov	eax, 1
		jz	short locret_10002055
		mov	eax, [esp+arg_4]
		mov	ecx, [eax+8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		push	ebp
		mov	ebp, [eax+18h]
		push	dword ptr [eax+0Ch]
		push	dword ptr [eax+10h]
		push	dword ptr [eax+14h]
		call	sub_10001F80
		add	esp, 0Ch
		pop	ebp
		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_C]
		mov	[edx], eax
		mov	eax, 3

locret_10002055:			; CODE XREF: sub_10002010+10j
		retn
sub_10002010	endp

; ---------------------------------------------------------------------------
		push	ebp
		mov	ecx, [esp+8]
		mov	ebp, [ecx]
		push	dword ptr [ecx+1Ch]
		push	dword ptr [ecx+18h]
		push	dword ptr [ecx+28h]
		call	sub_10001F80
		add	esp, 0Ch
		pop	ebp
		retn	4

; =============== S U B	R O U T	I N E =======================================


sub_10002072	proc near		; CODE XREF: sub_100020E0+89p
		push	ebp
		push	esi
		push	edi
		push	ebx
		mov	ebp, edx
		xor	eax, eax
		xor	ebx, ebx
		xor	edx, edx
		xor	esi, esi
		xor	edi, edi
		call	ecx
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10002072	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002089	proc near		; CODE XREF: sub_100020E0+15Ep
		mov	ebp, edx
		mov	esi, ecx
		mov	eax, ecx
		push	1
		call	sub_10002851
		xor	eax, eax
		xor	ebx, ebx
		xor	ecx, ecx
		xor	edx, edx
		xor	edi, edi
		jmp	esi
sub_10002089	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_100020A2(PVOID TargetFrame)
sub_100020A2	proc near		; CODE XREF: sub_100020E0+112p
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	0		; ReturnValue
		push	0		; ExceptionRecord
		push	offset loc_100020B7 ; TargetIp
		push	ecx		; TargetFrame
		call	RtlUnwind

loc_100020B7:				; DATA XREF: sub_100020A2+Ao
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100020A2	endp


; =============== S U B	R O U T	I N E =======================================


sub_100020BC	proc near		; CODE XREF: sub_100020E0+128p
					; sub_100020E0+178p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	edx
		push	ecx
		push	[esp+0Ch+arg_4]
		call	sub_10001F80
		add	esp, 0Ch
		pop	ebp
		retn	8
sub_100020BC	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100020E0(int,	int, int, PVOID	TargetFrame, int)
sub_100020E0	proc near		; CODE XREF: sub_100029E1+1Bp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
TargetFrame	= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+TargetFrame]
		push	esi
		mov	esi, [ebx+8]
		xor	esi, [eax]
		push	edi
		mov	eax, [esi]
		mov	[ebp+var_1], 0
		mov	[ebp+var_C], 1
		lea	edi, [ebx+10h]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_10002116
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_10002116:				; CODE XREF: sub_100020E0+29j
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]
		mov	eax, [ebp+arg_8]
		test	byte ptr [eax+4], 66h
		jnz	loc_10002243
		lea	ecx, [ebp+var_18]
		mov	[ebx-4], ecx
		mov	ebx, [ebx+0Ch]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_14], eax
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_100021A8
		jmp	short loc_10002150
; ---------------------------------------------------------------------------
		align 10h

loc_10002150:				; CODE XREF: sub_100020E0+68j
					; sub_100020E0+A0j
		lea	edx, [ebx+ebx*2]
		mov	ecx, [esi+edx*4+14h]
		lea	eax, [esi+edx*4+10h]
		mov	[ebp+var_10], eax
		mov	eax, [eax]
		mov	[ebp+var_8], eax
		test	ecx, ecx
		jz	short loc_1000217B
		mov	edx, edi
		call	sub_10002072
		mov	[ebp+var_1], 1
		test	eax, eax
		jl	short loc_100021B2
		jg	short loc_100021BB
		mov	eax, [ebp+var_8]

loc_1000217B:				; CODE XREF: sub_100020E0+85j
		mov	ebx, eax
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_10002150
		cmp	[ebp+var_1], 0
		jz	short loc_100021A8

loc_10002188:				; CODE XREF: sub_100020E0+D9j
					; sub_100020E0+17Dj
		mov	eax, [esi]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1000219A
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_1000219A:				; CODE XREF: sub_100020E0+ADj
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]

loc_100021A8:				; CODE XREF: sub_100020E0+66j
					; sub_100020E0+A6j ...
		mov	eax, [ebp+var_C]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100021B2:				; CODE XREF: sub_100020E0+94j
		mov	[ebp+var_C], 0
		jmp	short loc_10002188
; ---------------------------------------------------------------------------

loc_100021BB:				; CODE XREF: sub_100020E0+96j
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_100021EF
		cmp	dword_100046C4,	0
		jz	short loc_100021EF
		push	offset dword_100046C4
		call	sub_10002904
		add	esp, 4
		test	eax, eax
		jz	short loc_100021EF
		mov	ecx, [ebp+arg_8]
		push	1
		push	ecx
		call	dword_100046C4
		add	esp, 8

loc_100021EF:				; CODE XREF: sub_100020E0+E4j
					; sub_100020E0+EDj ...
		mov	ecx, [ebp+TargetFrame] ; TargetFrame
		call	sub_100020A2
		mov	eax, [ebp+TargetFrame]
		cmp	[eax+0Ch], ebx
		jz	short loc_10002210
		mov	edx, [ebp+arg_0]
		push	edx
		push	edi
		mov	edx, ebx
		mov	ecx, eax
		call	sub_100020BC
		mov	eax, [ebp+TargetFrame]

loc_10002210:				; CODE XREF: sub_100020E0+11Dj
		mov	ecx, [ebp+var_8]
		mov	[eax+0Ch], ecx
		mov	eax, [esi]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_10002228
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_10002228:				; CODE XREF: sub_100020E0+13Bj
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+8]
		mov	edx, edi
		call	sub_10002089

loc_10002243:				; CODE XREF: sub_100020E0+4Bj
		mov	edx, 0FFFFFFFEh
		cmp	[ebx+0Ch], edx
		jz	loc_100021A8
		mov	ecx, [ebp+arg_0]
		push	ecx
		push	edi
		mov	ecx, ebx
		call	sub_100020BC
		jmp	loc_10002188
sub_100020E0	endp

; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
; [00000006 BYTES: COLLAPSED FUNCTION memset]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000226E	proc near		; CODE XREF: sub_100024BC+Cp
					; sub_100024FE+Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, 0E06D7363h
		cmp	[ebp+arg_0], eax
		jnz	short loc_1000228A
		push	[ebp+arg_4]
		push	eax
		call	_XcptFilter
		pop	ecx
		pop	ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000228A:				; CODE XREF: sub_1000226E+Dj
		xor	eax, eax
		pop	ebp
		retn
sub_1000226E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000228E	proc near		; CODE XREF: sub_100022D4+A5p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		xor	eax, eax
		jmp	short loc_100022AA
; ---------------------------------------------------------------------------

loc_1000229B:				; CODE XREF: sub_1000228E+1Fj
		test	eax, eax
		jnz	short loc_100022AF
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_100022A7
		call	ecx

loc_100022A7:				; CODE XREF: sub_1000228E+15j
		add	esi, 4

loc_100022AA:				; CODE XREF: sub_1000228E+Bj
		cmp	esi, [ebp+arg_4]
		jb	short loc_1000229B

loc_100022AF:				; CODE XREF: sub_1000228E+Fj
		pop	esi
		pop	ebp
		retn
sub_1000228E	endp


; =============== S U B	R O U T	I N E =======================================


sub_100022B2	proc near		; DATA XREF: .rdata:10003088o
		push	80h		; Size
		call	ds:malloc
		pop	ecx
		mov	Memory,	eax
		mov	dword_100046B4,	eax
		test	eax, eax
		jnz	short loc_100022CE
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_100022CE:				; CODE XREF: sub_100022B2+18j
		and	dword ptr [eax], 0
		xor	eax, eax
		retn
sub_100022B2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100022D4	proc near		; CODE XREF: DllEntryPoint-1C3p
					; DllEntryPoint-109p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		xor	eax, eax
		push	esi
		push	edi
		cmp	[ebp+arg_4], eax
		jnz	short loc_10002309
		cmp	dword_10004384,	eax
		jle	short loc_10002302
		dec	dword_10004384
		mov	edi, ds:InterlockedCompareExchange
		push	eax
		mov	esi, offset Target
		jmp	loc_100023E7
; ---------------------------------------------------------------------------

loc_10002302:				; CODE XREF: sub_100022D4+15j
					; sub_100022D4+AEj
		xor	eax, eax
		jmp	loc_10002454
; ---------------------------------------------------------------------------

loc_10002309:				; CODE XREF: sub_100022D4+Dj
		cmp	[ebp+arg_4], 1
		jnz	loc_10002451
		mov	ecx, large fs:18h
		mov	ebx, [ecx+4]
		mov	edi, ds:InterlockedCompareExchange
		mov	[ebp+arg_4], eax
		push	eax
		mov	esi, offset Target
		jmp	short loc_1000233F
; ---------------------------------------------------------------------------

loc_1000232E:				; CODE XREF: sub_100022D4+71j
		cmp	eax, ebx
		jz	short loc_10002349
		push	3E8h		; dwMilliseconds
		call	ds:Sleep
		push	0		; Comperand

loc_1000233F:				; CODE XREF: sub_100022D4+58j
		push	ebx		; Exchange
		push	esi		; Destination
		call	edi ; InterlockedCompareExchange
		test	eax, eax
		jnz	short loc_1000232E
		jmp	short loc_10002350
; ---------------------------------------------------------------------------

loc_10002349:				; CODE XREF: sub_100022D4+5Cj
		mov	[ebp+arg_4], 1

loc_10002350:				; CODE XREF: sub_100022D4+73j
		mov	eax, dword_100046AC
		push	2
		pop	edi
		test	eax, eax
		jz	short loc_10002365
		push	1Fh
		call	_amsg_exit
		jmp	short loc_1000239E
; ---------------------------------------------------------------------------

loc_10002365:				; CODE XREF: sub_100022D4+86j
		push	offset dword_1000308C
		push	offset dword_10003084
		mov	dword_100046AC,	1
		call	sub_1000228E
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_10002302
		push	offset dword_10003080
		push	offset dword_1000307C
		call	_initterm
		pop	ecx
		mov	dword_100046AC,	edi

loc_1000239E:				; CODE XREF: sub_100022D4+8Fj
		xor	ebx, ebx
		pop	ecx
		cmp	[ebp+arg_4], ebx
		jnz	short loc_100023AE
		push	ebx		; Value
		push	esi		; Target
		call	ds:InterlockedExchange

loc_100023AE:				; CODE XREF: sub_100022D4+D0j
		cmp	dword_100046C0,	ebx
		jz	short loc_100023D2
		push	offset dword_100046C0
		call	sub_10002904
		pop	ecx
		test	eax, eax
		jz	short loc_100023D2
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_100046C0

loc_100023D2:				; CODE XREF: sub_100022D4+E0j
					; sub_100022D4+EFj
		inc	dword_10004384
		jmp	short loc_10002451
; ---------------------------------------------------------------------------

loc_100023DA:				; CODE XREF: sub_100022D4+11Aj
		push	3E8h		; dwMilliseconds
		call	ds:Sleep
		push	0		; Comperand

loc_100023E7:				; CODE XREF: sub_100022D4+29j
		push	1		; Exchange
		push	esi		; Destination
		call	edi ; InterlockedCompareExchange
		test	eax, eax
		jnz	short loc_100023DA
		mov	eax, dword_100046AC
		cmp	eax, 2
		jz	short loc_10002404
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	short loc_10002451
; ---------------------------------------------------------------------------

loc_10002404:				; CODE XREF: sub_100022D4+124j
		mov	ebx, Memory
		test	ebx, ebx
		jz	short loc_1000243E
		mov	edi, dword_100046B4
		add	edi, 0FFFFFFFCh
		jmp	short loc_10002424
; ---------------------------------------------------------------------------

loc_10002419:				; CODE XREF: sub_100022D4+152j
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_10002421
		call	eax

loc_10002421:				; CODE XREF: sub_100022D4+149j
		sub	edi, 4

loc_10002424:				; CODE XREF: sub_100022D4+143j
		cmp	edi, ebx
		jnb	short loc_10002419
		push	ebx		; Memory
		call	ds:free
		and	dword_100046B4,	0
		and	Memory,	0
		pop	ecx

loc_1000243E:				; CODE XREF: sub_100022D4+138j
		push	0		; Value
		push	esi		; Target
		mov	dword_100046AC,	0
		call	ds:InterlockedExchange

loc_10002451:				; CODE XREF: sub_100022D4+39j
					; sub_100022D4+104j ...
		xor	eax, eax
		inc	eax

loc_10002454:				; CODE XREF: sub_100022D4+30j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	0Ch
sub_100022D4	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_1000245B:				; CODE XREF: DllEntryPoint+11j
		push	2Ch
		push	offset dword_10003228
		call	__SEH_prolog4
		mov	ecx, [ebp+arg_4]
		xor	edx, edx
		inc	edx
		mov	[ebp+var_1C], edx
		xor	esi, esi
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	dword_10004070,	ecx
		cmp	ecx, esi
		jnz	short loc_1000248F
		cmp	dword_10004384,	esi
		jnz	short loc_1000248F
		mov	[ebp+var_1C], esi
		jmp	loc_10002695
; ---------------------------------------------------------------------------

loc_1000248F:				; CODE XREF: DllEntryPoint-23Aj
					; DllEntryPoint-232j
		cmp	ecx, edx
		jz	short loc_1000249C
		cmp	ecx, 2
		jnz	loc_10002529

loc_1000249C:				; CODE XREF: DllEntryPoint-226j
		mov	eax, dword_100046BC
		cmp	eax, esi
		jz	short loc_100024DB
		mov	[ebp+ms_exc.registration.TryLevel], edx
		mov	dword_10004388,	edx
		push	[ebp+arg_8]
		push	ecx
		push	[ebp+arg_0]
		call	eax ; dword_100046BC
		mov	[ebp+var_1C], eax
		jmp	short loc_100024D8
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100024BC	proc near		; DATA XREF: .rdata:10003248o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-20h], ecx
		push	eax
		push	ecx
		call	sub_1000226E
		pop	ecx
		pop	ecx
		retn
sub_100024BC	endp


; =============== S U B	R O U T	I N E =======================================


sub_100024D0	proc near		; DATA XREF: .rdata:1000324Co
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_100024D0	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_100024D8:				; CODE XREF: DllEntryPoint-1FDj
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_100024DB:				; CODE XREF: DllEntryPoint-214j
		cmp	[ebp+var_1C], esi
		jz	loc_10002695
		mov	[ebp+ms_exc.registration.TryLevel], 2
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100022D4
		mov	[ebp+var_1C], eax
		jmp	short loc_1000251A
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100024FE	proc near		; DATA XREF: .rdata:10003254o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-24h], ecx
		push	eax
		push	ecx
		call	sub_1000226E
		pop	ecx
		pop	ecx
		retn
sub_100024FE	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002512	proc near		; DATA XREF: .rdata:10003258o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10002512	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_1000251A:				; CODE XREF: DllEntryPoint-1BBj
		mov	[ebp+ms_exc.registration.TryLevel], esi
		cmp	[ebp+var_1C], esi
		jz	loc_10002695
		mov	ecx, [ebp+arg_4]

loc_10002529:				; CODE XREF: DllEntryPoint-221j
		mov	[ebp+ms_exc.registration.TryLevel], 3
		push	[ebp+arg_8]
		push	ecx
		push	[ebp+arg_0]
		call	sub_10002982
		mov	[ebp+var_1C], eax
		jmp	short loc_1000255D
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10002541	proc near		; DATA XREF: .rdata:10003260o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-28h], ecx
		push	eax
		push	ecx
		call	sub_1000226E
		pop	ecx
		pop	ecx
		retn
sub_10002541	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002555	proc near		; DATA XREF: .rdata:10003264o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10002555	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_1000255D:				; CODE XREF: DllEntryPoint-178j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		cmp	[ebp+arg_4], 1
		jnz	loc_10002606
		cmp	[ebp+var_1C], esi
		jnz	loc_10002606
		mov	[ebp+ms_exc.registration.TryLevel], 4
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	sub_10002982
		jmp	short loc_1000259F
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10002586	proc near		; DATA XREF: .rdata:1000326Co
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-2Ch], ecx
		push	eax
		push	ecx
		call	sub_1000226E
		pop	ecx
		pop	ecx
		retn
sub_10002586	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000259A	proc near		; DATA XREF: .rdata:10003270o
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_1000259A	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_1000259F:				; CODE XREF: DllEntryPoint-133j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	[ebp+ms_exc.registration.TryLevel], 5
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	sub_100022D4
		jmp	short loc_100025CE
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100025B5	proc near		; DATA XREF: .rdata:10003278o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-30h], ecx
		push	eax
		push	ecx
		call	sub_1000226E
		pop	ecx
		pop	ecx
		retn
sub_100025B5	endp


; =============== S U B	R O U T	I N E =======================================


sub_100025C9	proc near		; DATA XREF: .rdata:1000327Co
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_100025C9	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_100025CE:				; CODE XREF: DllEntryPoint-104j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	eax, dword_100046BC
		cmp	eax, esi
		jz	short loc_10002606
		mov	[ebp+ms_exc.registration.TryLevel], 6
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	eax ; dword_100046BC
		jmp	short loc_10002603
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100025EA	proc near		; DATA XREF: .rdata:10003284o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-34h], ecx
		push	eax
		push	ecx
		call	sub_1000226E
		pop	ecx
		pop	ecx
		retn
sub_100025EA	endp


; =============== S U B	R O U T	I N E =======================================


sub_100025FE	proc near		; DATA XREF: .rdata:10003288o
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_100025FE	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10002603:				; CODE XREF: DllEntryPoint-CFj
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_10002606:				; CODE XREF: DllEntryPoint-153j
					; DllEntryPoint-14Aj ...
		cmp	[ebp+arg_4], esi
		jz	short loc_10002615
		cmp	[ebp+arg_4], 3
		jnz	loc_10002695

loc_10002615:				; CODE XREF: DllEntryPoint-AEj
		mov	[ebp+ms_exc.registration.TryLevel], 7
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100022D4
		mov	[ebp+var_1C], eax
		jmp	short loc_1000264B
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_1000262F	proc near		; DATA XREF: .rdata:10003290o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-38h], ecx
		push	eax
		push	ecx
		call	sub_1000226E
		pop	ecx
		pop	ecx
		retn
sub_1000262F	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002643	proc near		; DATA XREF: .rdata:10003294o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10002643	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_1000264B:				; CODE XREF: DllEntryPoint-8Aj
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	eax, dword_100046BC
		cmp	eax, esi
		jz	short loc_10002695
		cmp	dword_10004388,	esi
		jz	short loc_10002695
		mov	[ebp+ms_exc.registration.TryLevel], 8
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	eax ; dword_100046BC
		mov	[ebp+var_1C], eax
		jmp	short loc_10002692
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10002676	proc near		; DATA XREF: .rdata:1000329Co
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-3Ch], ecx
		push	eax
		push	ecx
		call	sub_1000226E
		pop	ecx
		pop	ecx
		retn
sub_10002676	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000268A	proc near		; DATA XREF: .rdata:100032A0o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_1000268A	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10002692:				; CODE XREF: DllEntryPoint-43j
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_10002695:				; CODE XREF: DllEntryPoint-22Dj
					; DllEntryPoint-1D9j ...
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	sub_100026AC
		mov	eax, [ebp+var_1C]
		call	__SEH_epilog4
		retn	0Ch
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_100026AC	proc near		; CODE XREF: DllEntryPoint-1Bp
					; DATA XREF: .rdata:10003240o
		mov	dword_10004070,	0FFFFFFFFh
		retn
sub_100026AC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

; FUNCTION CHUNK AT 1000245B SIZE 00000061 BYTES
; FUNCTION CHUNK AT 100024D8 SIZE 00000026 BYTES
; FUNCTION CHUNK AT 1000251A SIZE 00000027 BYTES
; FUNCTION CHUNK AT 1000255D SIZE 00000029 BYTES
; FUNCTION CHUNK AT 1000259F SIZE 00000016 BYTES
; FUNCTION CHUNK AT 100025CE SIZE 0000001C BYTES
; FUNCTION CHUNK AT 10002603 SIZE 0000002C BYTES
; FUNCTION CHUNK AT 1000264B SIZE 0000002B BYTES
; FUNCTION CHUNK AT 10002692 SIZE 0000001A BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 1
		jnz	short loc_100026C7
		call	sub_10002A06

loc_100026C7:				; CODE XREF: DllEntryPoint+9j
		pop	ebp
		jmp	loc_1000245B
DllEntryPoint	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100026CD	proc near		; CODE XREF: __security_check_cookie(x):$failure$3j

var_328		= dword	ptr -328h
var_324		= dword	ptr -324h
var_320		= dword	ptr -320h
var_s0		= dword	ptr  0
arg_0		= byte ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 328h
		mov	dword_10004490,	eax
		mov	dword_1000448C,	ecx
		mov	dword_10004488,	edx
		mov	dword_10004484,	ebx
		mov	dword_10004480,	esi
		mov	dword_1000447C,	edi
		mov	word_100044A8, ss
		mov	word_1000449C, cs
		mov	word_10004478, ds
		mov	word_10004474, es
		mov	word_10004470, fs
		mov	word_1000446C, gs
		pushf
		pop	dword_100044A0
		mov	eax, [ebp+var_s0]
		mov	dword_10004494,	eax
		mov	eax, [ebp+4]
		mov	dword_10004498,	eax
		lea	eax, [ebp+arg_0]
		mov	dword_100044A4,	eax
		mov	eax, [ebp+var_320]
		mov	dword_100043E0,	10001h
		mov	eax, dword_10004498
		mov	dword_1000439C,	eax
		mov	dword_10004390,	0C0000409h
		mov	dword_10004394,	1
		mov	eax, ___security_cookie
		mov	[ebp+var_328], eax
		mov	eax, dword_10004054
		mov	[ebp+var_324], eax
		push	0		; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		push	offset ExceptionInfo ; ExceptionInfo
		call	ds:UnhandledExceptionFilter
		push	0C0000409h	; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess
		leave
		retn
sub_100026CD	endp

; ---------------------------------------------------------------------------
		align 10h
		push	esi
		mov	eax, [esp+14h]
		or	eax, eax
		jnz	short loc_100027E1
		mov	ecx, [esp+10h]
		mov	eax, [esp+0Ch]
		xor	edx, edx
		div	ecx
		mov	ebx, eax
		mov	eax, [esp+8]
		div	ecx
		mov	esi, eax
		mov	eax, ebx
		mul	dword ptr [esp+10h]
		mov	ecx, eax
		mov	eax, esi
		mul	dword ptr [esp+10h]
		add	edx, ecx
		jmp	short loc_10002828
; ---------------------------------------------------------------------------

loc_100027E1:				; CODE XREF: .text:100027B7j
		mov	ecx, eax
		mov	ebx, [esp+10h]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+8]

loc_100027EF:				; CODE XREF: .text:100027F9j
		shr	ecx, 1
		rcr	ebx, 1
		shr	edx, 1
		rcr	eax, 1
		or	ecx, ecx
		jnz	short loc_100027EF
		div	ebx
		mov	esi, eax
		mul	dword ptr [esp+14h]
		mov	ecx, eax
		mov	eax, [esp+10h]
		mul	esi
		add	edx, ecx
		jb	short loc_1000281D
		cmp	edx, [esp+0Ch]
		ja	short loc_1000281D
		jb	short loc_10002826
		cmp	eax, [esp+8]
		jbe	short loc_10002826

loc_1000281D:				; CODE XREF: .text:1000280Dj
					; .text:10002813j
		dec	esi
		sub	eax, [esp+10h]
		sbb	edx, [esp+14h]

loc_10002826:				; CODE XREF: .text:10002815j
					; .text:1000281Bj
		xor	ebx, ebx

loc_10002828:				; CODE XREF: .text:100027DFj
		sub	eax, [esp+8]
		sbb	edx, [esp+0Ch]
		neg	edx
		neg	eax
		sbb	edx, 0
		mov	ecx, edx
		mov	edx, ebx
		mov	ebx, ecx
		mov	ecx, eax
		mov	eax, esi
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------
		align 4
		push	ebx
		push	ecx
		mov	ebx, offset dword_10004060
		jmp	short loc_1000285C

; =============== S U B	R O U T	I N E =======================================


sub_10002851	proc near		; CODE XREF: sub_10001F80+6Ep
					; sub_10002089+8p

arg_0		= dword	ptr  4

		push	ebx
		push	ecx
		mov	ebx, offset dword_10004060
		mov	ecx, [esp+8+arg_0]

loc_1000285C:				; CODE XREF: .text:1000284Fj
		mov	[ebx+8], ecx
		mov	[ebx+4], eax
		mov	[ebx+0Ch], ebp
		push	ebp
		push	ecx
		push	eax
		pop	eax
		pop	ecx
		pop	ebp
		pop	ecx
		pop	ebx
		retn	4
sub_10002851	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002870	proc near		; CODE XREF: sub_10001F80+7Bp
		call	eax
		retn
sub_10002870	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002880	proc near		; CODE XREF: sub_10002904+16p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, 5A4Dh
		cmp	[ecx], ax
		jz	short loc_10002896

loc_10002892:				; CODE XREF: sub_10002880+21j
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10002896:				; CODE XREF: sub_10002880+10j
		mov	eax, [ecx+3Ch]
		add	eax, ecx
		cmp	dword ptr [eax], 4550h
		jnz	short loc_10002892
		xor	edx, edx
		mov	ecx, 10Bh
		cmp	[eax+18h], cx
		setz	dl
		mov	eax, edx
		pop	ebp
		retn
sub_10002880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100028C0	proc near		; CODE XREF: sub_10002904+27p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		push	ebx
		push	esi
		movzx	esi, word ptr [ecx+6]
		xor	edx, edx
		push	edi
		lea	eax, [eax+ecx+18h]
		test	esi, esi
		jbe	short loc_100028FD
		mov	edi, [ebp+arg_4]

loc_100028E5:				; CODE XREF: sub_100028C0+3Bj
		mov	ecx, [eax+0Ch]
		cmp	edi, ecx
		jb	short loc_100028F5
		mov	ebx, [eax+8]
		add	ebx, ecx
		cmp	edi, ebx
		jb	short loc_100028FF

loc_100028F5:				; CODE XREF: sub_100028C0+2Aj
		inc	edx
		add	eax, 28h
		cmp	edx, esi
		jb	short loc_100028E5

loc_100028FD:				; CODE XREF: sub_100028C0+20j
		xor	eax, eax

loc_100028FF:				; CODE XREF: sub_100028C0+33j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100028C0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002904	proc near		; CODE XREF: sub_100020E0+F4p
					; sub_100022D4+E7p

ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	8
		push	offset stru_100032A8
		call	__SEH_prolog4
		and	[ebp+ms_exc.registration.TryLevel], 0
		mov	esi, 10000000h
		push	esi
		call	sub_10002880
		pop	ecx
		test	eax, eax
		jz	short loc_10002961
		mov	eax, [ebp+arg_0]
		sub	eax, esi
		push	eax
		push	esi
		call	sub_100028C0
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10002961
		mov	eax, [eax+24h]
		shr	eax, 1Fh
		not	eax
		and	eax, 1
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		jmp	short loc_1000296A
; ---------------------------------------------------------------------------

loc_1000294A:				; DATA XREF: .rdata:stru_100032A8o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 10002904
		mov	eax, [eax]
		mov	eax, [eax]
		xor	ecx, ecx
		cmp	eax, 0C0000005h
		setz	cl
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_1000295E:				; DATA XREF: .rdata:stru_100032A8o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 10002904

loc_10002961:				; CODE XREF: sub_10002904+1Ej
					; sub_10002904+30j
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		xor	eax, eax

loc_1000296A:				; CODE XREF: sub_10002904+44j
		call	__SEH_epilog4
		retn
sub_10002904	endp

; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]

; =============== S U B	R O U T	I N E =======================================


sub_10002982	proc near		; CODE XREF: DllEntryPoint-180p
					; DllEntryPoint-138p
		xor	eax, eax
		inc	eax
		retn	0Ch
sub_10002982	endp

; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100029E1(int,	PVOID TargetFrame, int,	int)
sub_100029E1	proc near		; DATA XREF: __SEH_prolog4o
					; .rdata:10003224o

arg_0		= dword	ptr  8
TargetFrame	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_8]	; int
		push	[ebp+TargetFrame] ; TargetFrame
		push	[ebp+arg_0]	; int
		push	offset @__security_check_cookie@4 ; int
		push	offset ___security_cookie ; int
		call	sub_100020E0
		add	esp, 18h
		pop	ebp
		retn
sub_100029E1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002A06	proc near		; CODE XREF: DllEntryPoint+Bp

PerformanceCount= LARGE_INTEGER	ptr -10h
SystemTimeAsFileTime= _FILETIME	ptr -8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, ___security_cookie
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		push	ebx
		push	edi
		mov	edi, 0BB40E64Eh
		mov	ebx, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_10002A38
		test	ebx, eax
		jz	short loc_10002A38
		not	eax
		mov	dword_10004054,	eax
		jmp	short loc_10002A93
; ---------------------------------------------------------------------------

loc_10002A38:				; CODE XREF: sub_10002A06+23j
					; sub_10002A06+27j
		push	esi
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	esi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		call	ds:GetCurrentProcessId
		xor	esi, eax
		call	ds:GetCurrentThreadId
		xor	esi, eax
		call	ds:GetTickCount
		xor	esi, eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	eax, dword ptr [ebp+PerformanceCount+4]
		xor	eax, dword ptr [ebp+PerformanceCount]
		xor	esi, eax
		cmp	esi, edi
		jz	short loc_10002A7F
		test	___security_cookie, ebx
		jnz	short loc_10002A84

loc_10002A7F:				; CODE XREF: sub_10002A06+6Fj
		mov	esi, 0BB40E64Fh

loc_10002A84:				; CODE XREF: sub_10002A06+77j
		mov	___security_cookie, esi
		not	esi
		mov	dword_10004054,	esi
		pop	esi

loc_10002A93:				; CODE XREF: sub_10002A06+30j
		pop	edi
		pop	ebx
		leave
		retn
sub_10002A06	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+8]
		mov	ecx, [esp+10h]
		or	ecx, eax
		mov	ecx, [esp+0Ch]
		jnz	short loc_10002AB9
		mov	eax, [esp+4]
		mul	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_10002AB9:				; CODE XREF: .text:10002AAEj
		push	ebx
		mul	ecx
		mov	ebx, eax
		mov	eax, [esp+8]
		mul	dword ptr [esp+14h]
		add	ebx, eax
		mov	eax, [esp+8]
		mul	ecx
		add	edx, ebx
		pop	ebx
		retn	10h
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind]
		align 200h
		dd 100h	dup(?)
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 000008BC (   2236.)
; Section size in file		: 00000A00 (   2560.)
; Offset to raw	data for section: 00002000
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; void __stdcall RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD	ExceptionRecord, PVOID ReturnValue)
		extrn __imp_RtlUnwind:dword ; DATA XREF: RtlUnwindr
					; .rdata:100032FCo
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn InterlockedExchange:dword	; CODE XREF: sub_100022D4+D4p
					; sub_100022D4+177p
					; DATA XREF: ...
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_100022D4+63p
					; sub_100022D4+10Bp
					; DATA XREF: ...
; LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination,	LONG Exchange, LONG Comperand)
		extrn InterlockedCompareExchange:dword ; CODE XREF: sub_100022D4+6Dp
					; sub_100022D4+116p
					; DATA XREF: ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: sub_100026CD+DAp
					; DATA XREF: sub_100026CD+DAr
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: sub_100026CD+D3p
					; DATA XREF: sub_100026CD+D3r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: sub_100026CD+C8p
					; DATA XREF: sub_100026CD+C8r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_100026CD+BDp
					; DATA XREF: sub_100026CD+BDr
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_10002A06+37p
					; DATA XREF: sub_10002A06+37r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10002A06+43p
					; DATA XREF: sub_10002A06+43r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10002A06+4Bp
					; DATA XREF: sub_10002A06+4Br
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_10002A06+53p
					; DATA XREF: sub_10002A06+53r
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10002A06+5Fp
					; DATA XREF: sub_10002A06+5Fr

;
; Imports from libnspr4.dll
;
		extrn PR_DestroyLock:dword ; CODE XREF:	PL_ArenaFinish+35p
					; DATA XREF: PL_ArenaFinish+35r ...
		extrn PR_Free:dword	; CODE XREF: sub_100013C0+25p
					; PL_FinishArenaPool+17p ...
		extrn PR_Malloc:dword	; CODE XREF: PL_ArenaAllocate+A9p
					; PL_ArenaGrow+C6p ...
		extrn PR_CeilingLog2:dword ; CODE XREF:	PL_InitArenaPool+38p
					; PL_NewHashTable+90p
					; DATA XREF: ...
		extrn PR_Unlock:dword	; CODE XREF: PL_ArenaAllocate+7Fp
					; PL_ArenaAllocate+11Ep ...
		extrn PR_CallOnce:dword	; CODE XREF: PL_ArenaAllocate+35p
					; PL_ArenaGrow+52p ...
		extrn PR_Lock:dword	; CODE XREF: PL_ArenaAllocate+4Dp
					; PL_ArenaGrow+6Ap ...
		extrn PR_NewLock:dword	; CODE XREF: .text:loc_10001000p
					; DATA XREF: .text:loc_10001000r

;
; Imports from msvcrt.dll
;
		extrn __imp__XcptFilter:dword ;	DATA XREF: _XcptFilterr
					; .rdata:100032E8o
; void *__cdecl	malloc(size_t Size)
		extrn malloc:dword	; CODE XREF: sub_100022B2+5p
					; DATA XREF: sub_100022B2+5r
; void __cdecl free(void *Memory)
		extrn free:dword	; CODE XREF: sub_100022D4+155p
					; DATA XREF: sub_100022D4+155r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1000307Ch
dword_1000307C	dd 0			; DATA XREF: sub_100022D4+B9o
dword_10003080	dd 0			; DATA XREF: sub_100022D4+B4o
dword_10003084	dd 0			; DATA XREF: sub_100022D4+96o
		dd offset sub_100022B2
dword_1000308C	dd 0			; DATA XREF: sub_100022D4:loc_10002365o
dword_10003090	dd 0			; DATA XREF: PL_ArenaFinish:loc_100015A8r
dword_10003094	dd 0			; DATA XREF: PL_ArenaFinish+4Dr
dword_10003098	dd 0			; DATA XREF: PL_ArenaFinish+53r
byte_1000309C	db 0			; DATA XREF: PL_InitArenaPool+12r
					; PL_InitArenaPool+23r
		align 2
		dw 301h
dword_100030A0	dd 7070703h, 0F0F0F07h,	0F0F0F0Fh, 1F1F1F0Fh, 3	dup(1F1F1F1Fh)
		dd 1Fh,	70747468h, 772F2F3Ah, 6D2E7777h, 6C697A6Fh, 6F2E616Ch
		dd 4D2F6772h, 2F4C50h, 0
aCopyrightC1998	db 'Copyright (c) 1998 Netscape Communications Corporation. All Right'
					; DATA XREF: .data:10004040o
		db 's Reserved',0
aNA		db 'N/A',0              ; DATA XREF: .data:1000403Co
aPortableRuntim	db 'Portable runtime',0 ; DATA XREF: .data:10004038o
		align 4
aLibplds4_dll_0	db 'libplds4.dll',0     ; DATA XREF: .data:10004034o
		align 4
a20140927210134	db '2014-09-27 21:01:34',0 ; DATA XREF: .data:10004020o
		dd 0
; struct _EXCEPTION_POINTERS ExceptionInfo
ExceptionInfo	_EXCEPTION_POINTERS <offset dword_10004390, offset dword_100043E0>
					; DATA XREF: sub_100026CD+C3o
		align 8
		dd 86808006h, 808180h, 86031000h, 80828680h, 45050514h
		dd 85854545h, 585h, 50803030h, 8008080h, 38272800h, 805750h
		dd 30370007h, 88505030h, 20000000h, 80888028h, 80h
aHhhXppwpp	db '```hhh',8,8,7,'xppwpp',8,8,0
		dw 800h
		dd 7000800h, 8,	0
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 2			; SEHandlerCount
___safe_se_handler_table dd rva	sub_10002010 ; DATA XREF: .rdata:10003218o
		dd rva sub_100029E1
dword_10003228	dd 0FFFFFFFEh, 0	; DATA XREF: DllEntryPoint-25Ao
		dd 0FFFFFFB4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_100026AC
		align 8
		dd offset sub_100024BC
		dd offset sub_100024D0
		dd 0
		dd offset sub_100024FE
		dd offset sub_10002512
		align 10h
		dd offset sub_10002541
		dd offset sub_10002555
		dd 0
		dd offset sub_10002586
		dd offset sub_1000259A
		align 8
		dd offset sub_100025B5
		dd offset sub_100025C9
		dd 0
		dd offset sub_100025EA
		dd offset sub_100025FE
		align 10h
		dd offset sub_1000262F
		dd offset sub_10002643
		dd 0
		dd offset sub_10002676
		dd offset sub_1000268A
		align 8
stru_100032A8	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_10002904+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10002904
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_1000294A	; ScopeRecord.FilterFunc
		dd offset loc_1000295E	; ScopeRecord.HandlerFunc
__IMPORT_DESCRIPTOR_libnspr4 dd	rva off_1000334C ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aLibnspr4_dll	; DLL Name
		dd rva PR_DestroyLock	; Import Address Table
__IMPORT_DESCRIPTOR_msvcrt dd rva off_10003370 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcrt_dll	; DLL Name
		dd rva __imp__XcptFilter ; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10003314 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva __imp_RtlUnwind	; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_10003314	dd rva word_10003464	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10003470
		dd rva word_10003486
		dd rva word_1000348E
		dd rva word_100034AC
		dd rva word_100034C0
		dd rva word_100034D4
		dd rva word_100034F0
		dd rva word_10003564
		dd rva word_1000354E
		dd rva word_10003538
		dd rva word_10003528
		dd rva word_1000350E
		dd 0
;
; Import names for libnspr4.dll
;
off_1000334C	dd rva word_100033EA	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_libnspr4o
		dd rva word_100033E0
		dd rva word_100033D4
		dd rva word_100033C2
		dd rva word_100033B6
		dd rva word_100033A8
		dd rva word_1000339E
		dd rva word_10003390
		dd 0
;
; Import names for msvcrt.dll
;
off_10003370	dd rva word_1000342A	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_msvcrto
		dd rva word_10003438
		dd rva word_10003442
		dd rva word_1000344A
		dd rva word_10003456
		dd rva word_10003414
		dd rva word_1000340A
		dd 0
word_10003390	dw 0FBh			; DATA XREF: .rdata:10003368o
		db 'PR_NewLock',0
		align 2
word_1000339E	dw 0E8h			; DATA XREF: .rdata:10003364o
		db 'PR_Lock',0
word_100033A8	dw 27h			; DATA XREF: .rdata:10003360o
		db 'PR_CallOnce',0
word_100033B6	dw 16Eh			; DATA XREF: .rdata:1000335Co
		db 'PR_Unlock',0
word_100033C2	dw 2Dh			; DATA XREF: .rdata:10003358o
		db 'PR_CeilingLog2',0
		align 4
word_100033D4	dw 0EEh			; DATA XREF: .rdata:10003354o
		db 'PR_Malloc',0
word_100033E0	dw 85h			; DATA XREF: .rdata:10003350o
		db 'PR_Free',0
word_100033EA	dw 52h			; DATA XREF: .rdata:off_1000334Co
		db 'PR_DestroyLock',0
		align 4
aLibnspr4_dll	db 'libnspr4.dll',0     ; DATA XREF: .rdata:100032D0o
		align 2
word_1000340A	dw 4EAh			; DATA XREF: .rdata:10003388o
		db 'memcpy',0
		align 4
word_10003414	dw 4EEh			; DATA XREF: .rdata:10003384o
		db 'memset',0
		align 2
aMsvcrt_dll	db 'msvcrt.dll',0       ; DATA XREF: .rdata:100032E4o
		align 2
word_1000342A	dw 6Ah			; DATA XREF: .rdata:off_10003370o
		db '_XcptFilter',0
word_10003438	dw 4DEh			; DATA XREF: .rdata:10003374o
		db 'malloc',0
		align 2
word_10003442	dw 4A6h			; DATA XREF: .rdata:10003378o
		db 'free',0
		align 2
word_1000344A	dw 1D5h			; DATA XREF: .rdata:1000337Co
		db '_initterm',0
word_10003456	dw 101h			; DATA XREF: .rdata:10003380o
		db '_amsg_exit',0
		align 4
word_10003464	dw 2C7h			; DATA XREF: .rdata:off_10003314o
		db 'RtlUnwind',0
word_10003470	dw 21Dh			; DATA XREF: .rdata:10003318o
		db 'InterlockedExchange',0
word_10003486	dw 342h			; DATA XREF: .rdata:1000331Co
		db 'Sleep',0
word_1000348E	dw 21Bh			; DATA XREF: .rdata:10003320o
		db 'InterlockedCompareExchange',0
		align 4
word_100034AC	dw 34Ah			; DATA XREF: .rdata:10003324o
		db 'TerminateProcess',0
		align 10h
word_100034C0	dw 13Bh			; DATA XREF: .rdata:10003328o
		db 'GetCurrentProcess',0
word_100034D4	dw 35Bh			; DATA XREF: .rdata:1000332Co
		db 'UnhandledExceptionFilter',0
		align 10h
word_100034F0	dw 336h			; DATA XREF: .rdata:10003330o
		db 'SetUnhandledExceptionFilter',0
word_1000350E	dw 294h			; DATA XREF: .rdata:10003344o
		db 'QueryPerformanceCounter',0
word_10003528	dw 1D4h			; DATA XREF: .rdata:10003340o
		db 'GetTickCount',0
		align 4
word_10003538	dw 13Eh			; DATA XREF: .rdata:1000333Co
		db 'GetCurrentThreadId',0
		align 2
word_1000354E	dw 13Ch			; DATA XREF: .rdata:10003338o
		db 'GetCurrentProcessId',0
word_10003564	dw 1C0h			; DATA XREF: .rdata:10003334o
		db 'GetSystemTimeAsFileTime',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:100032F8o
		align 10h
;
; Export directory for libplds4.dll
;
		dd 0			; Characteristics
		dd 54275DEEh		; TimeDateStamp: Sun Sep 28 01:01:34 2014
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aLibplds4_dll	; Name
		dd 1			; Base
		dd 1Ah			; NumberOfFunctions
		dd 1Ah			; NumberOfNames
		dd rva off_100035B8	; AddressOfFunctions
		dd rva off_10003620	; AddressOfNames
		dd rva word_10003688	; AddressOfNameOrdinals
;
; Export Address Table for libplds4.dll
;
off_100035B8	dd rva PL_ArenaAllocate, rva PL_ArenaFinish, rva PL_ArenaGrow
					; DATA XREF: .rdata:100035ACo
		dd rva PL_ArenaRelease,	rva PL_ClearArenaPool, rva PL_CompactArenaPool
		dd rva PL_CompareStrings, rva PL_CompareValues,	rva PL_FinishArenaPool
		dd rva PL_FreeArenaPool, rva PL_HashString, rva	PL_HashTableAdd
		dd rva PL_HashTableDestroy, rva	PL_HashTableDump, rva PL_HashTableEnumerateEntries
		dd rva PL_HashTableLookup, rva PL_HashTableLookupConst
		dd rva PL_HashTableRawAdd, rva PL_HashTableRawLookup, rva PL_HashTableRawLookupConst
		dd rva PL_HashTableRawRemove, rva PL_HashTableRemove, rva PL_InitArenaPool
		dd rva PL_NewHashTable,	rva PL_SizeOfArenaPoolExcludingPool
		dd rva libVersionPoint
;
; Export Names Table for libplds4.dll
;
off_10003620	dd rva aPl_arenaalloca,	rva aPl_arenafinish, rva aPl_arenagrow
					; DATA XREF: .rdata:100035B0o
		dd rva aPl_arenareleas,	rva aPl_cleararenap, rva aPl_compactaren ; "PL_ArenaAllocate"
		dd rva aPl_comparestri,	rva aPl_comparevalu, rva aPl_finisharena
		dd rva aPl_freearenapo,	rva aPl_hashstring, rva	aPl_hashtablead
		dd rva aPl_hashtablede,	rva aPl_hashtabledu, rva aPl_hashtableen
		dd rva aPl_hashtablelo,	rva aPl_hashtable_0, rva aPl_hashtablera
		dd rva aPl_hashtable_1,	rva aPl_hashtable_2, rva aPl_hashtable_3
		dd rva aPl_hashtablere,	rva aPl_initarenapo, rva aPl_newhashtabl
		dd rva aPl_sizeofarena,	rva aLibversionpoin
;
; Export Ordinals Table	for libplds4.dll
;
word_10003688	dw 0, 1, 2, 3, 4, 5, 6,	7, 8, 9, 0Ah, 0Bh, 0Ch,	0Dh, 0Eh
					; DATA XREF: .rdata:100035B4o
		dw 0Fh,	10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h,	18h, 19h
aLibplds4_dll	db 'libplds4.dll',0     ; DATA XREF: .rdata:1000359Co
aPl_arenaalloca	db 'PL_ArenaAllocate',0 ; DATA XREF: .rdata:off_10003620o
aPl_arenafinish	db 'PL_ArenaFinish',0   ; DATA XREF: .rdata:off_10003620o
aPl_arenagrow	db 'PL_ArenaGrow',0     ; DATA XREF: .rdata:off_10003620o
aPl_arenareleas	db 'PL_ArenaRelease',0  ; DATA XREF: .rdata:off_10003620o
aPl_cleararenap	db 'PL_ClearArenaPool',0 ; DATA XREF: .rdata:off_10003620o
aPl_compactaren	db 'PL_CompactArenaPool',0 ; DATA XREF: .rdata:off_10003620o
aPl_comparestri	db 'PL_CompareStrings',0 ; DATA XREF: .rdata:off_10003620o
aPl_comparevalu	db 'PL_CompareValues',0 ; DATA XREF: .rdata:off_10003620o
aPl_finisharena	db 'PL_FinishArenaPool',0 ; DATA XREF: .rdata:off_10003620o
aPl_freearenapo	db 'PL_FreeArenaPool',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashstring	db 'PL_HashString',0    ; DATA XREF: .rdata:off_10003620o
aPl_hashtablead	db 'PL_HashTableAdd',0  ; DATA XREF: .rdata:off_10003620o
aPl_hashtablede	db 'PL_HashTableDestroy',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashtabledu	db 'PL_HashTableDump',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashtableen	db 'PL_HashTableEnumerateEntries',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashtablelo	db 'PL_HashTableLookup',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashtable_0	db 'PL_HashTableLookupConst',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashtablera	db 'PL_HashTableRawAdd',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashtable_1	db 'PL_HashTableRawLookup',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashtable_2	db 'PL_HashTableRawLookupConst',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashtable_3	db 'PL_HashTableRawRemove',0 ; DATA XREF: .rdata:off_10003620o
aPl_hashtablere	db 'PL_HashTableRemove',0 ; DATA XREF: .rdata:off_10003620o
aPl_initarenapo	db 'PL_InitArenaPool',0 ; DATA XREF: .rdata:off_10003620o
aPl_newhashtabl	db 'PL_NewHashTable',0  ; DATA XREF: .rdata:off_10003620o
aPl_sizeofarena	db 'PL_SizeOfArenaPoolExcludingPool',0 ; DATA XREF: .rdata:off_10003620o
aLibversionpoin	db 'libVersionPoint',0  ; DATA XREF: .rdata:off_10003620o
		align 800h
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 000006C8 (   1736.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00002A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10004000h
off_10004000	dd offset sub_10001600	; DATA XREF: PL_NewHashTable+1Eo
		dd offset sub_10001610
		dd offset sub_10001620
		dd offset sub_10001630
dword_10004010	dd 2, 0			; DATA XREF: libVersionPointo
		dd 0B100D780h, 50415h
		dd offset a20140927210134 ; "2014-09-27	21:01:34"
		dd 70A04h, 3 dup(0)
		dd offset aLibplds4_dll_0 ; "libplds4.dll"
		dd offset aPortableRuntim ; "Portable runtime"
		dd offset aNA		; "N/A"
		dd offset aCopyrightC1998 ; "Copyright (c) 1998	Netscape Communicati"...
		dd offset dword_100030A0+20h
		dd offset dword_100030A0+1Dh
		align 10h
___security_cookie dd 0BB40E64Eh	; DATA XREF: __security_check_cookie(x)r
					; sub_10001F80+20r ...
dword_10004054	dd 44BF19B1h		; DATA XREF: sub_100026CD+B0r
					; sub_10002A06+2Bw ...
		align 10h
dword_10004060	dd 19930520h, 3	dup(0)	; DATA XREF: .text:1000284Ao
					; sub_10002851+2o
dword_10004070	dd 0FFFFFFFFh		; DATA XREF: DllEntryPoint-242w
					; sub_100026ACw
		dd 0FFFFFFFFh, 400h, 0FFFFFC01h, 35h, 0Bh, 40h,	3FFh, 80h
		dd 0FFFFFF81h, 18h, 8, 20h, 7Fh, 2 dup(0)
		dd 4002A000h, 2	dup(0)
		dd 4005C800h, 2	dup(0)
		dd 4008FA00h, 2	dup(0)
		dd 400C9C40h, 2	dup(0)
		dd 400FC350h, 2	dup(0)
		dd 4012F424h, 0
		dd 80000000h, 40169896h, 0
		dd 20000000h, 4019BEBCh, 0
		dd 0C9BF0400h, 40348E1Bh, 0A1000000h, 1BCECCEDh, 404ED3C2h
		dd 0B59EF020h, 0ADA82B70h, 40699DC5h, 25FD5DD0h, 4F8E1AE5h
		dd 4083EB19h, 95D79671h, 8D050E43h, 409EAF29h, 44A0BFF9h
		dd 8F1281EDh, 40B98281h, 0A6D53CBFh, 1F49FFCFh,	40D3C278h
		dd 8CE0C66Fh, 47C980E9h, 41A893BAh, 556B85BCh, 0F78D3927h
		dd 427CE070h, 0DE8EDDBCh, 0EBFB9DF9h, 4351AA7Eh, 0E376E6A1h
		dd 2F29F2CCh, 44268184h, 0AA171028h, 0E310AEF8h, 44FAC4C5h
		dd 0F3D4A7EBh, 4AE1EBF7h, 45CF957Ah, 91C7CC65h,	0A0AEA60Eh
		dd 46A3E319h, 0C17650Dh, 75868175h, 4D48C976h, 0A7E44258h
		dd 353B3993h, 53EDB2B8h, 5DE5A74Dh, 3B5DC53Dh, 5A929E8Bh
		dd 0F0A65DFFh, 54C020A1h, 61378CA5h, 5A8BFDD1h,	5D25D88Bh
		dd 67DBF989h, 0F3F895AAh, 0C8A2BF27h, 6E80DD5Dh, 979BC94Ch
		dd 52028A20h, 7525C460h, 0
		dd 0CCCDCCCDh, 0CCCCCCCCh, 3FFBCCCCh, 0D70A3D71h, 0A3D70A3h
		dd 3FF8A3D7h, 0DF3B645Ah, 6E978D4Fh, 3FF58312h,	652CD3C3h
		dd 1758E219h, 3FF1D1B7h, 84230FD0h, 0AC471B47h,	3FEEA7C5h
		dd 69B6A640h, 0BD05AF6Ch, 3FEB8637h, 42BC3D33h,	94D5E57Ah
		dd 3FE7D6BFh, 0CEFDFDC2h, 77118461h, 3FE4ABCCh,	0E15B4C2Fh
		dd 94BEC44Dh, 3FC9E695h, 3B53C492h, 14CD4475h, 3FAF9ABEh
		dd 94BA67DEh, 1EAD4539h, 3F94CFB1h, 0E2C62324h,	313BBABCh
		dd 3F7A8B61h, 0C1595561h, 7C53B17Eh, 3F5FBB12h,	8D2FEED7h
		dd 8592BE06h, 3F44FB15h, 0E9A53F24h, 0EA27A539h, 3F2AA87Fh
		dd 0E4A1AC7Dh, 467C64BCh, 3E55DDD0h, 0CC067B63h, 83775423h
		dd 3D8191FFh, 193AFA91h, 4325637Ah, 3CACC031h, 38D18921h
		dd 0B8974782h, 3BD7FD00h, 85888DCh, 0E3E8B11Bh,	3B03A686h
		dd 424584C6h, 7599B607h, 3A2EDB37h, 0D21C7133h,	0EE32DB23h
		dd 395A9049h, 0C0BE87A6h, 82A5DA57h, 32B5A2A6h,	11B268E2h
		dd 449F52A7h, 2C10B759h, 2DE44925h, 534F3436h, 256BCEAEh
		dd 0A404598Fh, 7DC2DEC0h, 1EC6E8FBh, 5A88E79Eh,	0BF3C9157h
		dd 18228350h, 62654B4Eh, 0AF8F83FDh, 117D9406h,	9FDE2DE4h
		dd 4C8D2CEh, 0AD8A6DDh,	3 dup(0)
dword_10004370	dd 0			; DATA XREF: PL_ArenaAllocate+30o
					; PL_ArenaGrow+4Do ...
dword_10004374	dd 0			; DATA XREF: PL_ArenaFinish+5Ew
dword_10004378	dd 0			; DATA XREF: PL_ArenaFinish+64w
dword_1000437C	dd 0			; DATA XREF: .text:10001006w
					; PL_ArenaAllocate+47r	...
dword_10004380	dd 0			; DATA XREF: PL_ArenaAllocate+57r
					; PL_ArenaAllocate+10Bw ...
dword_10004384	dd 0			; DATA XREF: sub_100022D4+Fr
					; sub_100022D4+17w ...
dword_10004388	dd 0			; DATA XREF: DllEntryPoint-20Fw
					; DllEntryPoint-60r
		align 10h
dword_10004390	dd 0			; DATA XREF: sub_100026CD+91w
					; .rdata:ExceptionInfoo
dword_10004394	dd 0			; DATA XREF: sub_100026CD+9Bw
		dd 0
dword_1000439C	dd 0			; DATA XREF: sub_100026CD+8Cw
		dd 10h dup(0)
dword_100043E0	dd 0			; DATA XREF: sub_100026CD+7Dw
					; .rdata:ExceptionInfoo
		dd 7 dup(0)
		dd 1Bh dup(?)
word_1000446C	dw ?			; DATA XREF: sub_100026CD+51w
		align 10h
word_10004470	dw ?			; DATA XREF: sub_100026CD+4Aw
		align 4
word_10004474	dw ?			; DATA XREF: sub_100026CD+43w
		align 4
word_10004478	dw ?			; DATA XREF: sub_100026CD+3Cw
		align 4
dword_1000447C	dd ?			; DATA XREF: sub_100026CD+28w
dword_10004480	dd ?			; DATA XREF: sub_100026CD+22w
dword_10004484	dd ?			; DATA XREF: sub_100026CD+1Cw
dword_10004488	dd ?			; DATA XREF: sub_100026CD+16w
dword_1000448C	dd ?			; DATA XREF: sub_100026CD+10w
dword_10004490	dd ?			; DATA XREF: sub_100026CD+Bw
dword_10004494	dd ?			; DATA XREF: sub_100026CD+62w
dword_10004498	dd ?			; DATA XREF: sub_100026CD+6Aw
					; sub_100026CD+87r
word_1000449C	dw ?			; DATA XREF: sub_100026CD+35w
		align 10h
dword_100044A0	dd ?			; DATA XREF: sub_100026CD+59w
dword_100044A4	dd ?			; DATA XREF: sub_100026CD+72w
word_100044A8	dw ?			; DATA XREF: sub_100026CD+2Ew
		align 4
		dd 80h dup(?)
dword_100046AC	dd ?			; DATA XREF: sub_100022D4:loc_10002350r
					; sub_100022D4+9Bw ...
; volatile LONG	Target
Target		dd ?			; DATA XREF: sub_100022D4+24o
					; sub_100022D4+53o
dword_100046B4	dd ?			; DATA XREF: sub_100022B2+11w
					; sub_100022D4+13Ar ...
; void *Memory
Memory		dd ?			; DATA XREF: sub_100022B2+Cw
					; sub_100022D4:loc_10002404r ...
dword_100046BC	dd ?			; DATA XREF: DllEntryPoint:loc_1000249Cr
					; DllEntryPoint-E6r ...
dword_100046C0	dd ?			; DATA XREF: sub_100022D4:loc_100023AEr
					; sub_100022D4+E2o ...
dword_100046C4	dd ?			; DATA XREF: sub_100020E0+E6r
					; sub_100020E0+EFo ...
		align 1000h
_data		ends


		end DllEntryPoint
