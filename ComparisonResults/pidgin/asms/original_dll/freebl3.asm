;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4AF5471FF3F877EBC90354A8C9532394
; Input	CRC32 :	CD4624EB

; File Name   :	C:\compspace\compare\pidgin\dlls\original\freebl3.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00037010 ( 225296.)
; Section size in file		: 00037200 ( 225792.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; Exported entry   1. FREEBL_GetVector

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public FREEBL_GetVector
FREEBL_GetVector proc near		; DATA XREF: .rdata:off_10048838o

var_1		= byte ptr -1

		push	ecx
		movsx	eax, ds:byte_10039178
		movsx	ecx, ds:byte_10039140
		add	eax, ecx
		mov	[esp+4+var_1], al
		mov	eax, offset dword_100391A8
		pop	ecx
		retn
FREEBL_GetVector endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001020(void	*Dst, int Src)
sub_10001020	proc near		; CODE XREF: sub_10001120+1Bp
					; sub_10001120+1D8p

var_10		= dword	ptr -10h
Time		= dword	ptr -0Ch
PerformanceCount= LARGE_INTEGER	ptr -8
Dst		= dword	ptr  4
Src		= dword	ptr  8

		sub	esp, 10h
		push	esi
		mov	esi, [esp+14h+Src]
		test	esi, esi
		jnz	short loc_10001033
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10001033:				; CODE XREF: sub_10001020+Aj
		lea	eax, [esp+14h+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		test	eax, eax
		jz	short loc_10001052
		mov	ecx, dword ptr [esp+14h+PerformanceCount+4]
		mov	edx, dword ptr [esp+14h+PerformanceCount]
		mov	[esp+14h+var_10], ecx
		mov	[esp+14h+Src], edx

loc_10001052:				; CODE XREF: sub_10001020+20j
		push	edi
		mov	edi, esi
		cmp	esi, 4
		jb	short loc_1000105F
		mov	edi, 4

loc_1000105F:				; CODE XREF: sub_10001020+38j
		push	ebp
		mov	ebp, [esp+1Ch+Dst]
		push	edi		; Size
		lea	eax, [esp+20h+Src]
		push	eax		; Src
		push	ebp		; Dst
		call	memcpy
		add	esp, 0Ch
		sub	esi, edi
		jnz	short loc_10001080
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10001080:				; CODE XREF: sub_10001020+55j
		push	ebx
		mov	ebx, esi
		cmp	esi, 4
		jb	short loc_1000108D
		mov	ebx, 4

loc_1000108D:				; CODE XREF: sub_10001020+66j
		push	ebx		; Size
		lea	ecx, [esp+24h+var_10]
		push	ecx		; Src
		lea	edx, [edi+ebp]
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch
		add	edi, ebx
		sub	esi, ebx
		jz	short loc_100010D3
		call	ds:GetTickCount
		mov	[esp+20h+Src], eax
		mov	ebx, esi
		cmp	esi, 4
		jb	short loc_100010BB
		mov	ebx, 4

loc_100010BB:				; CODE XREF: sub_10001020+94j
		push	ebx		; Size
		lea	eax, [esp+24h+Src]
		push	eax		; Src
		lea	ecx, [edi+ebp]
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch
		add	edi, ebx
		sub	esi, ebx
		jnz	short loc_100010DD

loc_100010D3:				; CODE XREF: sub_10001020+83j
		pop	ebx
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100010DD:				; CODE XREF: sub_10001020+B1j
		lea	edx, [esp+20h+Time]
		push	edx		; Time
		call	ds:time
		add	esp, 4
		cmp	esi, 4
		jb	short loc_100010F5
		mov	esi, 4

loc_100010F5:				; CODE XREF: sub_10001020+CEj
		push	esi		; Size
		lea	eax, [esp+24h+Time]
		push	eax		; Src
		lea	ecx, [edi+ebp]
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch
		pop	ebx
		pop	ebp
		lea	eax, [esi+edi]
		pop	edi
		pop	esi
		add	esp, 10h
		retn
sub_10001020	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001120	proc near		; CODE XREF: sub_1000C930+DFp
					; sub_1000CBD0+75p
					; DATA XREF: ...

var_1C8		= dword	ptr -1C8h
SectorsPerCluster= dword ptr -1C4h
BytesPerSector	= dword	ptr -1C0h
NumberOfFreeClusters= dword ptr	-1BCh
MaximumComponentLength=	dword ptr -1B8h
TotalNumberOfClusters= dword ptr -1B4h
Src		= dword	ptr -1B0h
FileSystemFlags	= dword	ptr -1ACh
VolumeSerialNumber= dword ptr -1A8h
Buffer		= _MEMORYSTATUS	ptr -1A4h
FileSystemNameBuffer= byte ptr -184h
VolumeNameBuffer= byte ptr -84h
var_4		= dword	ptr -4

		sub	esp, 1C8h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+1C8h+var_4], eax
		lea	eax, [esp+1C8h+FileSystemNameBuffer]
		push	14h		; Src
		push	eax		; Dst
		call	sub_10001020
		push	eax		; Size
		lea	ecx, [esp+1D4h+FileSystemNameBuffer]
		push	ecx		; Src
		call	sub_1000CA80
		add	esp, 10h
		lea	edx, [esp+1C8h+Buffer]
		push	edx		; lpBuffer
		mov	[esp+1CCh+Buffer.dwLength], 20h
		call	ds:GlobalMemoryStatus
		lea	eax, [esp+1C8h+Buffer]
		push	20h		; Size
		push	eax		; Src
		call	sub_1000CA80
		add	esp, 8
		call	ds:GetLogicalDrives
		lea	ecx, [esp+1C8h+var_1C8]
		push	4		; Size
		push	ecx		; Src
		mov	[esp+1D0h+var_1C8], eax
		call	sub_1000CA80
		add	esp, 8
		lea	edx, [esp+1C8h+var_1C8]
		push	edx		; nSize
		lea	eax, [esp+1CCh+FileSystemNameBuffer]
		push	eax		; lpBuffer
		mov	[esp+1D0h+var_1C8], 100h
		call	ds:GetComputerNameA
		test	eax, eax
		jz	short loc_100011B4
		mov	ecx, [esp+1C8h+var_1C8]
		push	ecx		; Size
		lea	edx, [esp+1CCh+FileSystemNameBuffer]
		push	edx		; Src
		call	sub_1000CA80
		add	esp, 8

loc_100011B4:				; CODE XREF: sub_10001120+81j
		call	ds:GetCurrentProcess
		mov	[esp+1C8h+Src],	eax
		lea	eax, [esp+1C8h+Src]
		push	4		; Size
		push	eax		; Src
		call	sub_1000CA80
		add	esp, 8
		call	ds:GetCurrentProcessId
		lea	ecx, [esp+1C8h+var_1C8]
		push	4		; Size
		push	ecx		; Src
		mov	[esp+1D0h+var_1C8], eax
		call	sub_1000CA80
		add	esp, 8
		call	ds:GetCurrentThreadId
		lea	edx, [esp+1C8h+var_1C8]
		push	4		; Size
		push	edx		; Src
		mov	[esp+1D0h+var_1C8], eax
		call	sub_1000CA80
		add	esp, 8
		push	100h		; nFileSystemNameSize
		lea	eax, [esp+1CCh+FileSystemNameBuffer]
		push	eax		; lpFileSystemNameBuffer
		lea	ecx, [esp+1D0h+FileSystemFlags]
		push	ecx		; lpFileSystemFlags
		lea	edx, [esp+1D4h+MaximumComponentLength]
		push	edx		; lpMaximumComponentLength
		lea	eax, [esp+1D8h+VolumeSerialNumber]
		push	eax		; lpVolumeSerialNumber
		push	80h		; nVolumeNameSize
		lea	ecx, [esp+1E0h+VolumeNameBuffer]
		push	ecx		; lpVolumeNameBuffer
		push	0		; lpRootPathName
		mov	[esp+1E8h+VolumeNameBuffer], 0
		mov	[esp+1E8h+FileSystemNameBuffer], 0
		call	ds:GetVolumeInformationA
		lea	eax, [esp+1C8h+VolumeNameBuffer]
		lea	edx, [eax+1]

loc_10001242:				; CODE XREF: sub_10001120+127j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001242
		sub	eax, edx
		push	eax		; Size
		lea	edx, [esp+1CCh+VolumeNameBuffer]
		push	edx		; Src
		call	sub_1000CA80
		lea	eax, [esp+1D0h+VolumeSerialNumber]
		push	4		; Size
		push	eax		; Src
		call	sub_1000CA80
		lea	ecx, [esp+1D8h+MaximumComponentLength]
		push	4		; Size
		push	ecx		; Src
		call	sub_1000CA80
		lea	edx, [esp+1E0h+FileSystemFlags]
		push	4		; Size
		push	edx		; Src
		call	sub_1000CA80
		lea	eax, [esp+1E8h+FileSystemNameBuffer]
		add	esp, 20h
		lea	edx, [eax+1]

loc_10001287:				; CODE XREF: sub_10001120+16Cj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10001287
		sub	eax, edx
		push	eax		; Size
		lea	eax, [esp+1CCh+FileSystemNameBuffer]
		push	eax		; Src
		call	sub_1000CA80
		add	esp, 8
		lea	ecx, [esp+1C8h+TotalNumberOfClusters]
		push	ecx		; lpTotalNumberOfClusters
		lea	edx, [esp+1CCh+NumberOfFreeClusters]
		push	edx		; lpNumberOfFreeClusters
		lea	eax, [esp+1D0h+BytesPerSector]
		push	eax		; lpBytesPerSector
		lea	ecx, [esp+1D4h+SectorsPerCluster]
		push	ecx		; lpSectorsPerCluster
		push	0		; lpRootPathName
		call	ds:GetDiskFreeSpaceA
		test	eax, eax
		jz	short loc_100012F1
		lea	edx, [esp+1C8h+SectorsPerCluster]
		push	4		; Size
		push	edx		; Src
		call	sub_1000CA80
		lea	eax, [esp+1D0h+BytesPerSector]
		push	4		; Size
		push	eax		; Src
		call	sub_1000CA80
		lea	ecx, [esp+1D8h+NumberOfFreeClusters]
		push	4		; Size
		push	ecx		; Src
		call	sub_1000CA80
		lea	edx, [esp+1E0h+TotalNumberOfClusters]
		push	4		; Size
		push	edx		; Src
		call	sub_1000CA80
		add	esp, 20h

loc_100012F1:				; CODE XREF: sub_10001120+19Cj
		lea	eax, [esp+1C8h+FileSystemNameBuffer]
		push	14h		; Src
		push	eax		; Dst
		call	sub_10001020
		push	eax		; Size
		lea	ecx, [esp+1D4h+FileSystemNameBuffer]
		push	ecx		; Src
		call	sub_1000CA80
		mov	ecx, [esp+1D8h+var_4]
		add	esp, 10h
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1C8h
		retn
sub_10001120	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001320	proc near		; CODE XREF: sub_1000BBD0+3Bp
					; sub_1000C930+64p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		push	edi
		push	eax
		xor	esi, esi
		call	ds:SystemFunction036
		test	al, al
		mov	eax, edi
		jnz	short loc_1000133C
		mov	eax, esi

loc_1000133C:				; CODE XREF: sub_10001320+18j
		pop	edi
		pop	esi
		retn
sub_10001320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001340	proc near		; DATA XREF: .rdata:10039290o
					; .rdata:10039C60o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	ecx, ecx
		mov	[eax+40h], ecx
		mov	[eax+44h], ecx
		mov	dword ptr [eax+48h], 67452301h
		mov	dword ptr [eax+4Ch], 0EFCDAB89h
		mov	dword ptr [eax+50h], 98BADCFEh
		mov	dword ptr [eax+54h], 10325476h
		mov	dword ptr [eax+58h], 0C3D2E1F0h
		retn
sub_10001340	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001370	proc near		; DATA XREF: .rdata:10039C74o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [eax+48h]
		mov	ecx, [esp+arg_4]
		bswap	edx
		mov	[ecx], edx
		mov	edx, [eax+4Ch]
		bswap	edx
		mov	[ecx+4], edx
		mov	edx, [eax+50h]
		bswap	edx
		mov	[ecx+8], edx
		mov	edx, [eax+54h]
		bswap	edx
		mov	[ecx+0Ch], edx
		mov	eax, [eax+58h]
		bswap	eax
		mov	[ecx+10h], eax
		mov	eax, [esp+arg_8]
		test	eax, eax
		jz	short locret_100013AD
		mov	dword ptr [eax], 14h

locret_100013AD:			; CODE XREF: sub_10001370+35j
		retn
sub_10001370	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100013B0	proc near		; CODE XREF: sub_10002620+54p
					; sub_10002620+75p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 14h
		mov	edx, [eax-2Ch]
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [eax-28h]
		mov	esi, [eax-24h]
		mov	ebx, [eax-20h]
		mov	ebp, [eax-1Ch]
		mov	[esp+24h+var_4], ebp
		mov	ebp, [ecx]
		mov	[esp+24h+var_C], ebx
		xor	ebx, esi
		and	ebx, edi
		xor	ebx, [esp+24h+var_C]
		bswap	ebp
		mov	[eax-18h], ebp
		mov	[esp+24h+var_8], esi
		mov	esi, [eax-18h]
		add	esi, [esp+24h+var_4]
		mov	ebp, edx
		rol	ebp, 5
		add	ebp, ebx
		mov	ebx, [ecx+4]
		lea	esi, [esi+ebp+5A827999h]
		mov	ebp, [esp+24h+var_8]
		bswap	ebx
		mov	[eax-14h], ebx
		rol	edi, 1Eh
		xor	ebp, edi
		and	ebp, edx
		xor	ebp, [esp+24h+var_8]
		mov	[esp+24h+var_10], edi
		mov	edi, [eax-14h]
		add	edi, [esp+24h+var_C]
		mov	ebx, esi
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [esp+24h+var_10]
		lea	edi, [edi+ebx+5A827999h]
		mov	ebx, [ecx+8]
		rol	edx, 1Eh
		xor	ebp, edx
		and	ebp, esi
		xor	ebp, [esp+24h+var_10]
		bswap	ebx
		mov	[eax-10h], ebx
		mov	[esp+24h+var_14], edx
		mov	edx, [eax-10h]
		add	edx, [esp+24h+var_8]
		mov	ebx, edi
		rol	ebx, 5
		add	ebx, ebp
		rol	esi, 1Eh
		lea	edx, [edx+ebx+5A827999h]
		mov	ebx, [ecx+0Ch]
		mov	[esp+24h+var_4], esi
		mov	ebp, esi
		mov	esi, [esp+24h+var_14]
		xor	ebp, esi
		bswap	ebx
		mov	[eax-0Ch], ebx
		and	ebp, edi
		xor	ebp, esi
		mov	esi, [eax-0Ch]
		add	esi, [esp+24h+var_10]
		mov	ebx, edx
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [esp+24h+var_4]
		lea	esi, [esi+ebx+5A827999h]
		mov	ebx, [ecx+10h]
		rol	edi, 1Eh
		bswap	ebx
		mov	[eax-8], ebx
		xor	ebp, edi
		mov	ebx, esi
		and	ebp, edx
		rol	ebx, 5
		xor	ebp, [esp+24h+var_4]
		mov	[esp+24h+var_C], edi
		add	ebx, ebp
		mov	edi, [eax-8]
		add	edi, [esp+24h+var_14]
		mov	ebp, [esp+24h+var_C]
		lea	edi, [edi+ebx+5A827999h]
		mov	ebx, [ecx+14h]
		bswap	ebx
		mov	[eax-4], ebx
		rol	edx, 1Eh
		xor	ebp, edx
		and	ebp, esi
		xor	ebp, [esp+24h+var_C]
		mov	[esp+24h+var_8], edx
		mov	edx, [eax-4]
		add	edx, [esp+24h+var_4]
		mov	ebx, edi
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [esp+24h+var_8]
		lea	edx, [edx+ebx+5A827999h]
		mov	ebx, [ecx+18h]
		bswap	ebx
		mov	[eax], ebx
		rol	esi, 1Eh
		xor	ebp, esi
		and	ebp, edi
		xor	ebp, [esp+24h+var_8]
		mov	[esp+24h+var_10], esi
		mov	esi, [eax]
		add	esi, [esp+24h+var_C]
		mov	ebx, edx
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [esp+24h+var_10]
		lea	esi, [esi+ebx+5A827999h]
		mov	ebx, [ecx+1Ch]
		bswap	ebx
		mov	[eax+4], ebx
		rol	edi, 1Eh
		xor	ebp, edi
		and	ebp, edx
		xor	ebp, [esp+24h+var_10]
		mov	[esp+24h+var_14], edi
		mov	edi, [eax+4]
		add	edi, [esp+24h+var_8]
		mov	ebx, esi
		rol	ebx, 5
		add	ebx, ebp
		rol	edx, 1Eh
		lea	edi, [edi+ebx+5A827999h]
		mov	ebx, [ecx+20h]
		mov	[esp+24h+var_4], edx
		bswap	ebx
		mov	[eax+8], ebx
		mov	ebp, edx
		mov	edx, [esp+24h+var_14]
		xor	ebp, edx
		and	ebp, esi
		xor	ebp, edx
		mov	edx, [eax+8]
		add	edx, [esp+24h+var_10]
		mov	ebx, edi
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [esp+24h+var_4]
		rol	esi, 1Eh
		lea	edx, [edx+ebx+5A827999h]
		mov	ebx, [ecx+24h]
		xor	ebp, esi
		bswap	ebx
		mov	[eax+0Ch], ebx
		mov	[esp+24h+var_C], esi
		mov	esi, [eax+0Ch]
		add	esi, [esp+24h+var_14]
		and	ebp, edi
		xor	ebp, [esp+24h+var_4]
		mov	ebx, edx
		rol	ebx, 5
		add	ebx, ebp
		lea	esi, [esi+ebx+5A827999h]
		rol	edi, 1Eh
		mov	ebx, [ecx+28h]
		mov	ebp, [esp+24h+var_C]
		xor	ebp, edi
		and	ebp, edx
		xor	ebp, [esp+24h+var_C]
		bswap	ebx
		mov	[eax+10h], ebx
		mov	[esp+24h+var_8], edi
		mov	edi, [eax+10h]
		add	edi, [esp+24h+var_4]
		mov	ebx, esi
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [esp+24h+var_8]
		lea	edi, [edi+ebx+5A827999h]
		mov	ebx, [ecx+2Ch]
		bswap	ebx
		mov	[eax+14h], ebx
		rol	edx, 1Eh
		xor	ebp, edx
		and	ebp, esi
		xor	ebp, [esp+24h+var_8]
		mov	[esp+24h+var_10], edx
		mov	edx, [eax+14h]
		add	edx, [esp+24h+var_C]
		mov	ebx, edi
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [esp+24h+var_10]
		lea	edx, [edx+ebx+5A827999h]
		mov	ebx, [ecx+30h]
		bswap	ebx
		mov	[eax+18h], ebx
		rol	esi, 1Eh
		xor	ebp, esi
		and	ebp, edi
		xor	ebp, [esp+24h+var_10]
		mov	[esp+24h+var_14], esi
		mov	esi, [eax+18h]
		add	esi, [esp+24h+var_8]
		mov	ebx, edx
		rol	ebx, 5
		add	ebx, ebp
		lea	esi, [esi+ebx+5A827999h]
		mov	ebx, [ecx+34h]
		rol	edi, 1Eh
		bswap	ebx
		mov	[eax+1Ch], ebx
		mov	[esp+24h+var_4], edi
		mov	ebp, edi
		mov	edi, [esp+24h+var_14]
		xor	ebp, edi
		and	ebp, edx
		xor	ebp, edi
		mov	edi, [eax+1Ch]
		add	edi, [esp+24h+var_10]
		mov	ebx, esi
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [esp+24h+var_4]
		lea	edi, [edi+ebx+5A827999h]
		mov	ebx, [ecx+38h]
		rol	edx, 1Eh
		xor	ebp, edx
		bswap	ebx
		mov	[eax+20h], ebx
		and	ebp, esi
		xor	ebp, [esp+24h+var_4]
		mov	[esp+24h+var_C], edx
		mov	edx, [eax+20h]
		add	edx, [esp+24h+var_14]
		mov	ecx, [ecx+3Ch]
		mov	ebx, edi
		rol	ebx, 5
		add	ebx, ebp
		lea	edx, [edx+ebx+5A827999h]
		bswap	ecx
		mov	ebx, edx
		rol	esi, 1Eh
		mov	[eax+24h], ecx
		rol	ebx, 5
		mov	ecx, [esp+24h+var_C]
		mov	ebp, ecx
		xor	ebp, esi
		and	ebp, edi
		xor	ebp, ecx
		mov	ecx, [eax+24h]
		add	ecx, [esp+24h+var_4]
		add	ebx, ebp
		rol	edi, 1Eh
		lea	ecx, [ecx+ebx+5A827999h]
		mov	ebx, [eax+1Ch]
		mov	ebp, [eax-18h]
		xor	ebx, ebp
		mov	ebp, [eax-10h]
		xor	ebp, ebx
		mov	ebx, [eax+8]
		xor	ebx, ebp
		mov	[esp+24h+var_10], edi
		rol	ebx, 1
		mov	[eax-18h], ebx
		mov	ebp, esi
		xor	ebp, edi
		mov	edi, [eax-18h]
		add	edi, [esp+24h+var_C]
		and	ebp, edx
		xor	ebp, esi
		mov	ebx, ecx
		rol	ebx, 5
		add	ebx, ebp
		lea	ebx, [edi+ebx+5A827999h]
		mov	edi, [eax+20h]
		mov	ebp, [eax-14h]
		xor	edi, ebp
		mov	ebp, [eax-0Ch]
		xor	ebp, edi
		mov	edi, [eax+0Ch]
		xor	edi, ebp
		mov	ebp, [esp+24h+var_10]
		rol	edx, 1Eh
		xor	ebp, edx
		rol	edi, 1
		mov	[eax-14h], edi
		and	ebp, ecx
		xor	ebp, [esp+24h+var_10]
		mov	[esp+24h+var_14], edx
		mov	edx, [eax-14h]
		add	edx, esi
		mov	edi, ebx
		rol	edi, 5
		add	edi, ebp
		lea	esi, [edx+edi+5A827999h]
		mov	edx, [eax-10h]
		mov	edi, [eax+24h]
		xor	edx, edi
		mov	edi, [eax+10h]
		xor	edi, edx
		mov	edx, [eax-8]
		xor	edx, edi
		rol	ecx, 1Eh
		rol	edx, 1
		mov	[eax-10h], edx
		mov	edx, [esp+24h+var_14]
		mov	ebp, ecx
		xor	ebp, edx
		and	ebp, ebx
		xor	ebp, edx
		mov	edx, [eax-10h]
		add	edx, [esp+24h+var_10]
		mov	edi, esi
		rol	edi, 5
		add	edi, ebp
		lea	edi, [edx+edi+5A827999h]
		mov	edx, [eax-18h]
		mov	ebp, [eax+14h]
		xor	edx, ebp
		mov	ebp, [eax-0Ch]
		xor	ebp, edx
		mov	edx, [eax-4]
		rol	ebx, 1Eh
		mov	[esp+24h+var_C], ebx
		xor	edx, ebp
		rol	edx, 1
		mov	[eax-0Ch], edx
		mov	edx, edi
		rol	edx, 5
		mov	ebp, ecx
		xor	ebp, ebx
		mov	ebx, [eax-0Ch]
		add	ebx, [esp+24h+var_14]
		and	ebp, esi
		xor	ebp, ecx
		add	edx, ebp
		lea	edx, [ebx+edx+5A827999h]
		mov	ebx, [eax+18h]
		mov	ebp, [eax-14h]
		xor	ebx, ebp
		mov	ebp, [eax-8]
		xor	ebp, ebx
		mov	ebx, [eax]
		xor	ebx, ebp
		mov	ebp, [esp+24h+var_C]
		rol	esi, 1Eh
		xor	ebp, esi
		xor	ebp, edi
		rol	ebx, 1
		mov	[eax-8], ebx
		mov	ebx, edx
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [eax-8]
		add	ebp, ecx
		lea	ecx, [ebx+ebp+6ED9EBA1h]
		mov	ebx, [eax+1Ch]
		mov	ebp, [eax-10h]
		xor	ebx, ebp
		mov	ebp, [eax-4]
		xor	ebp, ebx
		mov	ebx, [eax+4]
		xor	ebx, ebp
		rol	edi, 1Eh
		rol	ebx, 1
		mov	[eax-4], ebx
		mov	ebp, esi
		xor	ebp, edi
		xor	ebp, edx
		mov	ebx, ecx
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [eax-4]
		add	ebp, [esp+24h+var_C]
		rol	edx, 1Eh
		mov	[esp+24h+var_14], edx
		mov	edx, [eax-0Ch]
		lea	ebx, [ebx+ebp+6ED9EBA1h]
		mov	ebp, [eax+20h]
		xor	edx, ebp
		mov	ebp, [eax+8]
		xor	ebp, edx
		mov	edx, [eax]
		xor	edx, ebp
		rol	edx, 1
		mov	[eax], edx
		mov	[esp+24h+var_10], edi
		mov	ebp, ecx
		xor	ebp, edi
		mov	edi, ebp
		mov	ebp, [esp+24h+var_14]
		xor	edi, ebp
		mov	edx, ebx
		rol	edx, 5
		add	edx, edi
		mov	edi, [eax]
		add	edi, esi
		lea	esi, [edi+edx+6ED9EBA1h]
		mov	edx, [eax+0Ch]
		mov	edi, [eax+24h]
		xor	edx, edi
		mov	edi, [eax-8]
		rol	ecx, 1Eh
		xor	edi, edx
		mov	edx, [eax+4]
		xor	edx, edi
		rol	edx, 1
		mov	[eax+4], edx
		mov	edi, ecx
		xor	edi, ebx
		xor	edi, ebp
		mov	edx, esi
		rol	edx, 5
		add	edx, edi
		mov	edi, [eax+4]
		add	edi, [esp+24h+var_10]
		rol	ebx, 1Eh
		lea	edi, [edi+edx+6ED9EBA1h]
		mov	edx, [eax-18h]
		mov	ebp, [eax+10h]
		xor	edx, ebp
		mov	ebp, [eax+8]
		xor	ebp, edx
		mov	edx, [eax-4]
		xor	edx, ebp
		mov	[esp+24h+var_C], ebx
		rol	edx, 1
		mov	[eax+8], edx
		mov	ebp, ecx
		xor	ebp, ebx
		mov	ebx, [eax+8]
		add	ebx, [esp+24h+var_14]
		xor	ebp, esi
		mov	edx, edi
		rol	edx, 5
		add	edx, ebp
		lea	edx, [ebx+edx+6ED9EBA1h]
		mov	ebx, [eax+14h]
		mov	ebp, [eax-14h]
		xor	ebx, ebp
		mov	ebp, [eax+0Ch]
		xor	ebp, ebx
		mov	ebx, [eax]
		xor	ebx, ebp
		mov	ebp, [esp+24h+var_C]
		rol	esi, 1Eh
		rol	ebx, 1
		mov	[eax+0Ch], ebx
		xor	ebp, esi
		xor	ebp, edi
		mov	ebx, edx
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [eax+0Ch]
		add	ebp, ecx
		lea	ecx, [ebx+ebp+6ED9EBA1h]
		mov	ebx, [eax-10h]
		mov	ebp, [eax+18h]
		xor	ebx, ebp
		mov	ebp, [eax+10h]
		xor	ebp, ebx
		mov	ebx, [eax+4]
		xor	ebx, ebp
		rol	edi, 1Eh
		rol	ebx, 1
		mov	[eax+10h], ebx
		mov	ebp, esi
		xor	ebp, edi
		xor	ebp, edx
		mov	ebx, ecx
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [eax+10h]
		add	ebp, [esp+24h+var_C]
		rol	edx, 1Eh
		mov	[esp+24h+var_14], edx
		mov	edx, [eax+1Ch]
		lea	ebx, [ebx+ebp+6ED9EBA1h]
		mov	ebp, [eax+14h]
		xor	edx, ebp
		mov	ebp, [eax-0Ch]
		xor	ebp, edx
		mov	edx, [eax+8]
		xor	edx, ebp
		mov	[esp+24h+var_10], edi
		rol	edx, 1
		mov	[eax+14h], edx
		mov	edx, ebx
		rol	edx, 5
		mov	ebp, ecx
		xor	ebp, edi
		mov	edi, ebp
		mov	ebp, [esp+24h+var_14]
		xor	edi, ebp
		add	edx, edi
		mov	edi, [eax+14h]
		add	edi, esi
		lea	esi, [edi+edx+6ED9EBA1h]
		mov	edx, [eax+18h]
		mov	edi, [eax+20h]
		xor	edx, edi
		mov	edi, [eax+0Ch]
		xor	edi, edx
		mov	edx, [eax-8]
		xor	edx, edi
		rol	ecx, 1Eh
		rol	edx, 1
		mov	[eax+18h], edx
		mov	edi, ecx
		xor	edi, ebx
		xor	edi, ebp
		mov	edx, esi
		rol	edx, 5
		add	edx, edi
		mov	edi, [eax+18h]
		add	edi, [esp+24h+var_10]
		rol	ebx, 1Eh
		lea	edi, [edi+edx+6ED9EBA1h]
		mov	edx, [eax+1Ch]
		mov	ebp, [eax+24h]
		xor	edx, ebp
		mov	ebp, [eax+10h]
		xor	ebp, edx
		mov	edx, [eax-4]
		xor	edx, ebp
		mov	[esp+24h+var_C], ebx
		rol	edx, 1
		mov	[eax+1Ch], edx
		mov	ebp, ecx
		xor	ebp, ebx
		mov	ebx, [eax+1Ch]
		add	ebx, [esp+24h+var_14]
		xor	ebp, esi
		mov	edx, edi
		rol	edx, 5
		add	edx, ebp
		lea	edx, [ebx+edx+6ED9EBA1h]
		mov	ebx, [eax-18h]
		mov	ebp, [eax+20h]
		xor	ebx, ebp
		mov	ebp, [eax+14h]
		xor	ebp, ebx
		mov	ebx, [eax]
		xor	ebx, ebp
		mov	ebp, [esp+24h+var_C]
		rol	esi, 1Eh
		rol	ebx, 1
		mov	[eax+20h], ebx
		xor	ebp, esi
		xor	ebp, edi
		mov	ebx, edx
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [eax+20h]
		add	ebp, ecx
		lea	ecx, [ebx+ebp+6ED9EBA1h]
		mov	ebx, [eax+18h]
		mov	ebp, [eax+24h]
		xor	ebx, ebp
		mov	ebp, [eax-14h]
		xor	ebp, ebx
		mov	ebx, [eax+4]
		rol	edi, 1Eh
		xor	ebx, ebp
		mov	[esp+24h+var_10], edi
		rol	ebx, 1
		mov	[eax+24h], ebx
		mov	ebp, esi
		xor	ebp, edi
		xor	ebp, edx
		mov	ebx, ecx
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [eax+24h]
		add	ebp, [esp+24h+var_C]
		rol	edx, 1Eh
		mov	[esp+24h+var_14], edx
		mov	edx, [eax+1Ch]
		lea	ebx, [ebx+ebp+6ED9EBA1h]
		mov	ebp, [eax-18h]
		xor	edx, ebp
		mov	ebp, [eax-10h]
		xor	ebp, edx
		mov	edx, [eax+8]
		xor	edx, ebp
		rol	edx, 1
		mov	[eax-18h], edx
		mov	edx, ebx
		rol	edx, 5
		mov	ebp, ecx
		xor	ebp, edi
		mov	edi, ebp
		mov	ebp, [esp+24h+var_14]
		xor	edi, ebp
		add	edx, edi
		mov	edi, [eax-18h]
		add	edi, esi
		lea	esi, [edi+edx+6ED9EBA1h]
		mov	edx, [eax+20h]
		mov	edi, [eax-14h]
		xor	edx, edi
		mov	edi, [eax-0Ch]
		xor	edi, edx
		mov	edx, [eax+0Ch]
		xor	edx, edi
		rol	ecx, 1Eh
		rol	edx, 1
		mov	[eax-14h], edx
		mov	edi, ecx
		xor	edi, ebx
		xor	edi, ebp
		mov	edx, esi
		rol	edx, 5
		add	edx, edi
		mov	edi, [eax-14h]
		add	edi, [esp+24h+var_10]
		rol	ebx, 1Eh
		lea	edi, [edi+edx+6ED9EBA1h]
		mov	edx, [eax-10h]
		mov	ebp, [eax+24h]
		xor	edx, ebp
		mov	ebp, [eax+10h]
		xor	ebp, edx
		mov	edx, [eax-8]
		xor	edx, ebp
		rol	edx, 1
		mov	[eax-10h], edx
		mov	[esp+24h+var_C], ebx
		mov	ebp, ecx
		xor	ebp, ebx
		mov	ebx, [eax-10h]
		add	ebx, [esp+24h+var_14]
		xor	ebp, esi
		mov	edx, edi
		rol	edx, 5
		add	edx, ebp
		lea	edx, [ebx+edx+6ED9EBA1h]
		mov	ebx, [eax-18h]
		mov	ebp, [eax+14h]
		xor	ebx, ebp
		mov	ebp, [eax-0Ch]
		xor	ebp, ebx
		mov	ebx, [eax-4]
		xor	ebx, ebp
		rol	esi, 1Eh
		rol	ebx, 1
		mov	ebp, [esp+24h+var_C]
		mov	[eax-0Ch], ebx
		xor	ebp, esi
		xor	ebp, edi
		mov	ebx, edx
		rol	ebx, 5
		add	ebx, ebp
		mov	ebp, [eax-0Ch]
		add	ebp, ecx
		lea	ecx, [ebx+ebp+6ED9EBA1h]
		mov	ebx, [eax+18h]
		mov	ebp, [eax-14h]
		xor	ebx, ebp
		mov	ebp, [eax-8]
		xor	ebp, ebx
		mov	ebx, [eax]
		rol	edi, 1Eh
		xor	ebx, ebp
		rol	ebx, 1
		mov	[eax-8], ebx
		mov	ebx, ecx
		rol	ebx, 5
		mov	ebp, esi
		xor	ebp, edi
		xor	ebp, edx
		add	ebx, ebp
		mov	ebp, [eax-8]
		add	ebp, [esp+24h+var_C]
		rol	edx, 1Eh
		lea	ebx, [ebx+ebp+6ED9EBA1h]
		mov	[esp+24h+var_14], edx
		mov	edx, [eax+1Ch]
		mov	ebp, [eax-10h]
		xor	edx, ebp
		mov	ebp, [eax-4]
		xor	ebp, edx
		mov	edx, [eax+4]
		xor	edx, ebp
		mov	ebp, ecx
		xor	ebp, edi
		mov	[esp+24h+var_10], edi
		rol	edx, 1
		mov	[eax-4], edx
		mov	edi, ebp
		mov	ebp, [esp+24h+var_14]
		xor	edi, ebp
		mov	edx, ebx
		rol	edx, 5
		add	edx, edi
		mov	edi, [eax-4]
		add	edi, esi
		rol	ecx, 1Eh
		lea	esi, [edi+edx+6ED9EBA1h]
		mov	edx, ecx
		mov	ecx, [eax-0Ch]
		mov	edi, [eax+20h]
		xor	ecx, edi
		mov	edi, [eax+8]
		xor	edi, ecx
		mov	ecx, [eax]
		xor	ecx, edi
		rol	ecx, 1
		mov	[eax], ecx
		mov	edi, edx
		xor	edi, ebx
		xor	edi, ebp
		mov	ecx, esi
		rol	ecx, 5
		add	ecx, edi
		mov	edi, [eax]
		add	edi, [esp+24h+var_10]
		rol	ebx, 1Eh
		lea	ecx, [edi+ecx+6ED9EBA1h]
		mov	edi, [eax+0Ch]
		mov	ebp, [eax+24h]
		xor	edi, ebp
		mov	ebp, [eax-8]
		mov	[esp+24h+var_4], edx
		mov	[esp+24h+var_C], ebx
		xor	ebp, edi
		mov	edi, [eax+4]
		xor	edi, ebp
		xor	edx, ebx
		rol	edi, 1
		mov	[eax+4], edi
		xor	edx, esi
		mov	edi, ecx
		rol	edi, 5
		add	edi, edx
		mov	edx, [eax+4]
		add	edx, [esp+24h+var_14]
		rol	esi, 1Eh
		lea	edx, [edx+edi+6ED9EBA1h]
		mov	ebp, esi
		mov	esi, [eax-18h]
		mov	edi, [eax+10h]
		xor	esi, edi
		mov	edi, [eax+8]
		xor	edi, esi
		mov	esi, [eax-4]
		xor	esi, edi
		rol	esi, 1
		mov	[eax+8], esi
		mov	edi, ebp
		or	edi, ecx
		and	edi, ebx
		mov	esi, edx
		rol	esi, 5
		mov	ebx, ebp
		and	ebx, ecx
		or	edi, ebx
		lea	esi, [esi+edi-70E44324h]
		mov	edi, [eax+8]
		add	edi, [esp+24h+var_4]
		add	esi, edi
		mov	edi, [eax+14h]
		mov	ebx, [eax-14h]
		xor	edi, ebx
		mov	ebx, [eax+0Ch]
		xor	ebx, edi
		mov	edi, [eax]
		xor	edi, ebx
		rol	ecx, 1Eh
		mov	ebx, ecx
		or	ebx, edx
		rol	edi, 1
		mov	[esp+24h+var_10], ecx
		and	ecx, edx
		mov	[eax+0Ch], edi
		and	ebx, ebp
		or	ebx, ecx
		mov	edi, esi
		rol	edi, 5
		lea	ecx, [edi+ebx-70E44324h]
		mov	edi, [eax+0Ch]
		add	edi, [esp+24h+var_C]
		add	edi, ecx
		mov	ecx, [eax-10h]
		mov	ebx, [eax+18h]
		xor	ecx, ebx
		mov	ebx, [eax+10h]
		xor	ebx, ecx
		mov	ecx, [eax+4]
		rol	edx, 1Eh
		xor	ecx, ebx
		mov	[esp+24h+var_14], edx
		mov	ebx, esi
		or	ebx, edx
		and	ebx, [esp+24h+var_10]
		rol	ecx, 1
		mov	edx, esi
		and	edx, [esp+24h+var_14]
		mov	[eax+10h], ecx
		or	ebx, edx
		mov	edx, [eax+10h]
		mov	ecx, edi
		rol	ecx, 5
		add	edx, ebp
		lea	ecx, [ecx+ebx-70E44324h]
		add	edx, ecx
		rol	esi, 1Eh
		mov	ecx, [eax+1Ch]
		mov	ebx, [eax+14h]
		xor	ecx, ebx
		mov	ebx, [eax-0Ch]
		xor	ebx, ecx
		mov	ecx, [eax+8]
		xor	ecx, ebx
		rol	ecx, 1
		mov	[eax+14h], ecx
		mov	ecx, edx
		rol	ecx, 5
		mov	ebx, esi
		or	ebx, edi
		and	ebx, [esp+24h+var_14]
		mov	ebp, esi
		and	ebp, edi
		or	ebx, ebp
		lea	ecx, [ecx+ebx-70E44324h]
		mov	ebx, [eax+14h]
		add	ebx, [esp+24h+var_10]
		add	ecx, ebx
		mov	ebx, [eax+18h]
		mov	ebp, [eax+20h]
		xor	ebx, ebp
		mov	ebp, [eax+0Ch]
		xor	ebp, ebx
		mov	ebx, [eax-8]
		rol	edi, 1Eh
		xor	ebx, ebp
		mov	ebp, edi
		or	ebp, edx
		mov	[esp+24h+var_C], edi
		and	edi, edx
		rol	ebx, 1
		mov	[eax+18h], ebx
		and	ebp, esi
		or	ebp, edi
		mov	ebx, ecx
		rol	ebx, 5
		lea	edi, [ebx+ebp-70E44324h]
		mov	ebx, [eax+18h]
		add	ebx, [esp+24h+var_14]
		add	ebx, edi
		mov	edi, [eax+1Ch]
		mov	ebp, [eax+24h]
		xor	edi, ebp
		mov	ebp, [eax+10h]
		xor	ebp, edi
		mov	edi, [eax-4]
		rol	edx, 1Eh
		xor	edi, ebp
		mov	[esp+24h+var_8], edx
		mov	ebp, [esp+24h+var_8]
		rol	edi, 1
		or	edx, ecx
		and	edx, [esp+24h+var_C]
		mov	[eax+1Ch], edi
		and	ebp, ecx
		or	edx, ebp
		mov	edi, ebx
		rol	edi, 5
		lea	edx, [edi+edx-70E44324h]
		mov	edi, [eax+1Ch]
		add	esi, edi
		add	esi, edx
		mov	edx, [eax-18h]
		mov	edi, [eax+20h]
		xor	edx, edi
		mov	edi, [eax+14h]
		xor	edi, edx
		mov	edx, [eax]
		xor	edx, edi
		rol	ecx, 1Eh
		rol	edx, 1
		mov	[eax+20h], edx
		mov	edi, ecx
		mov	edx, esi
		or	edi, ebx
		rol	edx, 5
		and	edi, [esp+24h+var_8]
		mov	ebp, ecx
		and	ebp, ebx
		or	edi, ebp
		lea	edx, [edx+edi-70E44324h]
		mov	edi, [eax+20h]
		add	edi, [esp+24h+var_C]
		add	edi, edx
		mov	edx, [eax+18h]
		mov	ebp, [eax+24h]
		xor	edx, ebp
		mov	ebp, [eax-14h]
		rol	ebx, 1Eh
		xor	ebp, edx
		mov	edx, [eax+4]
		xor	edx, ebp
		mov	[esp+24h+var_14], ebx
		mov	ebp, esi
		or	ebp, ebx
		and	ebp, ecx
		mov	ebx, esi
		and	ebx, [esp+24h+var_14]
		rol	edx, 1
		or	ebp, ebx
		mov	[eax+24h], edx
		mov	ebx, [eax+24h]
		add	ebx, [esp+24h+var_8]
		mov	edx, edi
		rol	edx, 5
		lea	edx, [edx+ebp-70E44324h]
		add	edx, ebx
		mov	ebx, [eax+1Ch]
		mov	ebp, [eax-18h]
		xor	ebx, ebp
		mov	ebp, [eax-10h]
		xor	ebp, ebx
		mov	ebx, [eax+8]
		xor	ebx, ebp
		rol	esi, 1Eh
		rol	ebx, 1
		mov	[esp+24h+var_4], esi
		mov	ebp, [esp+24h+var_4]
		mov	[eax-18h], ebx
		or	esi, edi
		and	esi, [esp+24h+var_14]
		and	ebp, edi
		or	esi, ebp
		mov	ebx, edx
		rol	ebx, 5
		lea	esi, [ebx+esi-70E44324h]
		mov	ebx, [eax-18h]
		add	ecx, ebx
		add	ecx, esi
		mov	esi, [eax+20h]
		mov	ebx, [eax-14h]
		xor	esi, ebx
		mov	ebx, [eax-0Ch]
		xor	ebx, esi
		mov	esi, [eax+0Ch]
		xor	esi, ebx
		rol	edi, 1Eh
		rol	esi, 1
		mov	[eax-14h], esi
		mov	ebx, edi
		or	ebx, edx
		and	ebx, [esp+24h+var_4]
		mov	ebp, edi
		and	ebp, edx
		or	ebx, ebp
		mov	esi, ecx
		rol	esi, 5
		lea	esi, [esi+ebx-70E44324h]
		mov	ebx, [eax-14h]
		add	ebx, [esp+24h+var_14]
		add	ebx, esi
		mov	esi, [eax-10h]
		mov	ebp, [eax+24h]
		xor	esi, ebp
		mov	ebp, [eax+10h]
		rol	edx, 1Eh
		xor	ebp, esi
		mov	esi, [eax-8]
		mov	[esp+24h+var_8], edx
		xor	esi, ebp
		mov	ebp, edx
		and	edx, ecx
		or	ebp, ecx
		and	ebp, edi
		or	ebp, edx
		rol	esi, 1
		mov	[eax-10h], esi
		mov	esi, ebx
		rol	esi, 5
		lea	edx, [esi+ebp-70E44324h]
		mov	esi, [eax-10h]
		add	esi, [esp+24h+var_4]
		add	esi, edx
		mov	edx, [eax-18h]
		mov	ebp, [eax+14h]
		rol	ecx, 1Eh
		xor	edx, ebp
		mov	ebp, [eax-0Ch]
		xor	ebp, edx
		mov	edx, [eax-4]
		mov	[esp+24h+var_10], ecx
		or	ecx, ebx
		and	ecx, [esp+24h+var_8]
		xor	edx, ebp
		mov	ebp, [esp+24h+var_10]
		and	ebp, ebx
		or	ecx, ebp
		rol	edx, 1
		mov	[eax-0Ch], edx
		mov	edx, esi
		rol	edx, 5
		lea	ecx, [edx+ecx-70E44324h]
		mov	edx, [eax-0Ch]
		add	edi, edx
		add	edi, ecx
		mov	ecx, [eax+18h]
		mov	edx, [eax-14h]
		xor	ecx, edx
		mov	edx, [eax-8]
		xor	edx, ecx
		mov	ecx, [eax]
		xor	ecx, edx
		rol	ebx, 1Eh
		rol	ecx, 1
		mov	[eax-8], ecx
		mov	[esp+24h+var_14], ebx
		mov	ecx, esi
		or	ecx, ebx
		and	ecx, [esp+24h+var_10]
		mov	ebx, esi
		and	ebx, [esp+24h+var_14]
		mov	edx, edi
		or	ecx, ebx
		rol	edx, 5
		lea	edx, [edx+ecx-70E44324h]
		mov	ecx, [eax-8]
		add	ecx, [esp+24h+var_8]
		add	edx, ecx
		mov	ecx, [eax+1Ch]
		mov	ebx, [eax-10h]
		xor	ecx, ebx
		mov	ebx, [eax-4]
		xor	ebx, ecx
		mov	ecx, [eax+4]
		xor	ecx, ebx
		rol	esi, 1Eh
		rol	ecx, 1
		mov	[eax-4], ecx
		mov	ebx, esi
		or	ebx, edi
		and	ebx, [esp+24h+var_14]
		mov	ebp, esi
		and	ebp, edi
		or	ebx, ebp
		mov	ecx, edx
		rol	ecx, 5
		lea	ecx, [ecx+ebx-70E44324h]
		mov	ebx, [eax-4]
		add	ebx, [esp+24h+var_10]
		add	ecx, ebx
		mov	ebx, [eax-0Ch]
		mov	ebp, [eax+20h]
		xor	ebx, ebp
		mov	ebp, [eax+8]
		xor	ebp, ebx
		mov	ebx, [eax]
		rol	edi, 1Eh
		xor	ebx, ebp
		mov	ebp, edi
		or	ebp, edx
		and	ebp, esi
		mov	[esp+24h+var_C], edi
		and	edi, edx
		or	ebp, edi
		rol	ebx, 1
		mov	[eax], ebx
		mov	ebx, ecx
		rol	ebx, 5
		lea	edi, [ebx+ebp-70E44324h]
		mov	ebx, [eax]
		add	ebx, [esp+24h+var_14]
		add	ebx, edi
		mov	edi, [eax+0Ch]
		mov	ebp, [eax+24h]
		xor	edi, ebp
		mov	ebp, [eax-8]
		xor	ebp, edi
		mov	edi, [eax+4]
		xor	edi, ebp
		rol	edx, 1Eh
		mov	[esp+24h+var_8], edx
		mov	ebp, [esp+24h+var_8]
		rol	edi, 1
		or	edx, ecx
		and	edx, [esp+24h+var_C]
		mov	[eax+4], edi
		and	ebp, ecx
		or	edx, ebp
		mov	edi, ebx
		rol	edi, 5
		lea	edx, [edi+edx-70E44324h]
		mov	edi, [eax+4]
		add	esi, edi
		add	esi, edx
		mov	edx, [eax-18h]
		mov	edi, [eax+10h]
		xor	edx, edi
		mov	edi, [eax+8]
		xor	edi, edx
		mov	edx, [eax-4]
		xor	edx, edi
		rol	ecx, 1Eh
		rol	edx, 1
		mov	[eax+8], edx
		mov	edi, ecx
		or	edi, ebx
		and	edi, [esp+24h+var_8]
		mov	ebp, ecx
		and	ebp, ebx
		or	edi, ebp
		mov	edx, esi
		rol	edx, 5
		lea	edx, [edx+edi-70E44324h]
		mov	edi, [eax+8]
		add	edi, [esp+24h+var_C]
		add	edi, edx
		mov	edx, [eax+14h]
		mov	ebp, [eax-14h]
		xor	edx, ebp
		mov	ebp, [eax+0Ch]
		xor	ebp, edx
		mov	edx, [eax]
		xor	edx, ebp
		rol	ebx, 1Eh
		rol	edx, 1
		mov	[eax+0Ch], edx
		mov	edx, edi
		mov	ebp, esi
		rol	edx, 5
		mov	[esp+24h+var_14], ebx
		or	ebp, ebx
		and	ebp, ecx
		mov	ebx, esi
		and	ebx, [esp+24h+var_14]
		or	ebp, ebx
		mov	ebx, [eax+0Ch]
		add	ebx, [esp+24h+var_8]
		lea	edx, [edx+ebp-70E44324h]
		add	edx, ebx
		mov	ebx, [eax-10h]
		mov	ebp, [eax+18h]
		xor	ebx, ebp
		mov	ebp, [eax+10h]
		xor	ebp, ebx
		mov	ebx, [eax+4]
		xor	ebx, ebp
		rol	esi, 1Eh
		mov	[esp+24h+var_4], esi
		mov	ebp, [esp+24h+var_4]
		or	esi, edi
		and	esi, [esp+24h+var_14]
		rol	ebx, 1
		mov	[eax+10h], ebx
		and	ebp, edi
		or	esi, ebp
		mov	ebx, edx
		rol	ebx, 5
		lea	esi, [ebx+esi-70E44324h]
		mov	ebx, [eax+10h]
		add	ecx, ebx
		add	ecx, esi
		mov	esi, [eax+1Ch]
		mov	ebx, [eax+14h]
		xor	esi, ebx
		mov	ebx, [eax-0Ch]
		xor	ebx, esi
		mov	esi, [eax+8]
		xor	esi, ebx
		rol	edi, 1Eh
		rol	esi, 1
		mov	[eax+14h], esi
		mov	ebx, edi
		or	ebx, edx
		and	ebx, [esp+24h+var_4]
		mov	ebp, edi
		and	ebp, edx
		or	ebx, ebp
		mov	esi, ecx
		rol	esi, 5
		lea	esi, [esi+ebx-70E44324h]
		mov	ebx, [eax+14h]
		add	ebx, [esp+24h+var_14]
		add	ebx, esi
		mov	esi, [eax+18h]
		mov	ebp, [eax+20h]
		xor	esi, ebp
		mov	ebp, [eax+0Ch]
		xor	ebp, esi
		mov	esi, [eax-8]
		xor	esi, ebp
		rol	edx, 1Eh
		rol	esi, 1
		mov	[eax+18h], esi
		mov	[esp+24h+var_8], edx
		mov	ebp, edi
		xor	ebp, edx
		xor	ebp, ecx
		mov	esi, ebx
		rol	esi, 5
		lea	edx, [esi+ebp-359D3E2Ah]
		mov	esi, [eax+18h]
		add	esi, [esp+24h+var_4]
		add	esi, edx
		mov	edx, [eax+1Ch]
		mov	ebp, [eax+24h]
		xor	edx, ebp
		mov	ebp, [eax+10h]
		xor	ebp, edx
		mov	edx, [eax-4]
		xor	edx, ebp
		rol	ecx, 1Eh
		rol	edx, 1
		mov	[eax+1Ch], edx
		mov	ebp, [esp+24h+var_8]
		xor	ebp, ecx
		xor	ebp, ebx
		mov	edx, esi
		rol	edx, 5
		lea	edx, [edx+ebp-359D3E2Ah]
		mov	ebp, [eax+1Ch]
		add	ebp, edi
		lea	edi, [edx+ebp]
		mov	edx, [eax-18h]
		mov	ebp, [eax+20h]
		xor	edx, ebp
		mov	ebp, [eax+14h]
		xor	ebp, edx
		mov	edx, [eax]
		xor	edx, ebp
		rol	ebx, 1Eh
		rol	edx, 1
		mov	[eax+20h], edx
		mov	[esp+24h+var_14], ebx
		mov	ebp, esi
		xor	ebp, ecx
		xor	ebp, ebx
		mov	ebx, [eax+20h]
		add	ebx, [esp+24h+var_8]
		mov	edx, edi
		rol	edx, 5
		lea	edx, [edx+ebp-359D3E2Ah]
		add	edx, ebx
		mov	ebx, [eax+18h]
		mov	ebp, [eax+24h]
		xor	ebx, ebp
		mov	ebp, [eax-14h]
		xor	ebp, ebx
		mov	ebx, [eax+4]
		xor	ebx, ebp
		rol	esi, 1Eh
		rol	ebx, 1
		mov	[eax+24h], ebx
		mov	ebx, edx
		rol	ebx, 5
		mov	ebp, esi
		xor	ebp, edi
		xor	ebp, [esp+24h+var_14]
		lea	ebx, [ebx+ebp-359D3E2Ah]
		mov	ebp, [eax+24h]
		add	ebp, ecx
		lea	ecx, [ebx+ebp]
		mov	ebx, [eax+1Ch]
		mov	ebp, [eax-18h]
		xor	ebx, ebp
		mov	ebp, [eax-10h]
		xor	ebp, ebx
		mov	ebx, [eax+8]
		xor	ebx, ebp
		rol	edi, 1Eh
		rol	ebx, 1
		mov	[eax-18h], ebx
		mov	ebp, esi
		xor	ebp, edi
		xor	ebp, edx
		mov	ebx, ecx
		rol	ebx, 5
		lea	ebx, [ebx+ebp-359D3E2Ah]
		mov	ebp, [eax-18h]
		add	ebp, [esp+24h+var_14]
		add	ebx, ebp
		rol	edx, 1Eh
		mov	[esp+24h+var_8], edx
		mov	edx, [eax+20h]
		mov	ebp, [eax-14h]
		xor	edx, ebp
		mov	ebp, [eax-0Ch]
		xor	ebp, edx
		mov	edx, [eax+0Ch]
		xor	edx, ebp
		rol	edx, 1
		mov	[eax-14h], edx
		mov	edx, ebx
		rol	edx, 5
		mov	ebp, edi
		xor	ebp, [esp+24h+var_8]
		xor	ebp, ecx
		lea	edx, [edx+ebp-359D3E2Ah]
		mov	ebp, [eax-14h]
		add	ebp, esi
		rol	ecx, 1Eh
		mov	[esp+24h+var_10], ecx
		mov	ecx, [eax-10h]
		lea	esi, [edx+ebp]
		mov	edx, [eax+24h]
		xor	ecx, edx
		mov	edx, [eax+10h]
		xor	edx, ecx
		mov	ecx, [eax-8]
		xor	ecx, edx
		rol	ecx, 1
		mov	[eax-10h], ecx
		mov	ecx, [esp+24h+var_8]
		xor	ecx, [esp+24h+var_10]
		mov	edx, esi
		xor	ecx, ebx
		rol	edx, 5
		lea	edx, [edx+ecx-359D3E2Ah]
		mov	ecx, [eax-10h]
		add	edi, ecx
		mov	ecx, [eax-18h]
		add	edi, edx
		mov	edx, [eax+14h]
		xor	ecx, edx
		mov	edx, [eax-0Ch]
		xor	edx, ecx
		mov	ecx, [eax-4]
		xor	ecx, edx
		rol	ebx, 1Eh
		rol	ecx, 1
		mov	[eax-0Ch], ecx
		mov	ecx, esi
		xor	ecx, [esp+24h+var_10]
		mov	edx, edi
		xor	ecx, ebx
		rol	edx, 5
		lea	edx, [edx+ecx-359D3E2Ah]
		mov	ecx, [eax-0Ch]
		add	ecx, [esp+24h+var_8]
		add	edx, ecx
		mov	ecx, [eax+18h]
		mov	ebp, [eax-14h]
		xor	ecx, ebp
		mov	ebp, [eax-8]
		xor	ebp, ecx
		mov	ecx, [eax]
		rol	esi, 1Eh
		xor	ecx, ebp
		mov	[esp+24h+var_4], esi
		xor	esi, edi
		rol	ecx, 1
		mov	[eax-8], ecx
		xor	esi, ebx
		mov	ecx, edx
		rol	ecx, 5
		lea	ecx, [ecx+esi-359D3E2Ah]
		mov	esi, [eax-8]
		add	esi, [esp+24h+var_10]
		add	ecx, esi
		mov	esi, [eax+1Ch]
		mov	ebp, [eax-10h]
		xor	esi, ebp
		mov	ebp, [eax-4]
		xor	ebp, esi
		mov	esi, [eax+4]
		xor	esi, ebp
		mov	ebp, [esp+24h+var_4]
		rol	edi, 1Eh
		rol	esi, 1
		mov	[eax-4], esi
		mov	esi, ecx
		rol	esi, 5
		xor	ebp, edi
		xor	ebp, edx
		lea	esi, [esi+ebp-359D3E2Ah]
		mov	ebp, [eax-4]
		add	ebp, ebx
		lea	ebx, [esi+ebp]
		mov	esi, [eax-0Ch]
		mov	ebp, [eax+20h]
		xor	esi, ebp
		mov	ebp, [eax+8]
		xor	ebp, esi
		mov	esi, [eax]
		xor	esi, ebp
		rol	edx, 1Eh
		rol	esi, 1
		mov	[eax], esi
		mov	esi, ebx
		rol	esi, 5
		mov	ebp, edi
		xor	ebp, edx
		xor	ebp, ecx
		lea	esi, [esi+ebp-359D3E2Ah]
		mov	ebp, [eax]
		add	ebp, [esp+24h+var_4]
		add	esi, ebp
		rol	ecx, 1Eh
		mov	[esp+24h+var_10], ecx
		mov	ecx, [eax+0Ch]
		mov	ebp, [eax+24h]
		xor	ecx, ebp
		mov	ebp, [eax-8]
		xor	ebp, ecx
		mov	ecx, [eax+4]
		xor	ecx, ebp
		rol	ecx, 1
		mov	[eax+4], ecx
		mov	ebp, edx
		xor	ebp, [esp+24h+var_10]
		mov	ecx, esi
		xor	ebp, ebx
		rol	ecx, 5
		lea	ecx, [ecx+ebp-359D3E2Ah]
		mov	ebp, [eax+4]
		add	ebp, edi
		rol	ebx, 1Eh
		lea	edi, [ecx+ebp]
		mov	ecx, [eax-18h]
		mov	[esp+24h+var_14], ebx
		mov	ebx, [eax+10h]
		xor	ecx, ebx
		mov	ebx, [eax+8]
		xor	ebx, ecx
		mov	ecx, [eax-4]
		mov	ebp, [esp+24h+var_14]
		xor	ecx, ebx
		rol	ecx, 1
		mov	[eax+8], ecx
		mov	ebx, esi
		xor	ebx, [esp+24h+var_10]
		mov	ecx, edi
		xor	ebx, ebp
		rol	ecx, 5
		lea	ecx, [ecx+ebx-359D3E2Ah]
		mov	ebx, [eax+8]
		add	edx, ebx
		add	edx, ecx
		mov	ecx, [eax+14h]
		mov	ebx, [eax-14h]
		xor	ecx, ebx
		mov	ebx, [eax+0Ch]
		xor	ebx, ecx
		mov	ecx, [eax]
		xor	ecx, ebx
		rol	esi, 1Eh
		rol	ecx, 1
		mov	[eax+0Ch], ecx
		mov	ebx, esi
		xor	ebx, edi
		mov	ecx, edx
		xor	ebx, ebp
		rol	ecx, 5
		lea	ecx, [ecx+ebx-359D3E2Ah]
		mov	ebx, [eax+0Ch]
		add	ebx, [esp+24h+var_10]
		add	ecx, ebx
		mov	ebx, [eax-10h]
		mov	ebp, [eax+18h]
		xor	ebx, ebp
		mov	ebp, [eax+10h]
		xor	ebp, ebx
		mov	ebx, [eax+4]
		xor	ebx, ebp
		rol	edi, 1Eh
		rol	ebx, 1
		mov	[eax+10h], ebx
		mov	[esp+24h+var_C], edi
		mov	ebp, esi
		xor	ebp, edi
		xor	ebp, edx
		mov	ebx, ecx
		rol	ebx, 5
		lea	edi, [ebx+ebp-359D3E2Ah]
		mov	ebx, [eax+10h]
		add	ebx, [esp+24h+var_14]
		add	ebx, edi
		mov	edi, [eax+1Ch]
		mov	ebp, [eax+14h]
		xor	edi, ebp
		mov	ebp, [eax-0Ch]
		xor	ebp, edi
		mov	edi, [eax+8]
		xor	edi, ebp
		mov	ebp, [esp+24h+var_C]
		rol	edx, 1Eh
		xor	ebp, edx
		xor	ebp, ecx
		rol	edi, 1
		mov	[eax+14h], edi
		mov	edi, ebx
		rol	edi, 5
		lea	edi, [edi+ebp-359D3E2Ah]
		mov	ebp, [eax+14h]
		add	ebp, esi
		lea	esi, [edi+ebp]
		mov	edi, [eax+18h]
		mov	ebp, [eax+20h]
		xor	edi, ebp
		mov	ebp, [eax+0Ch]
		xor	ebp, edi
		mov	edi, [eax-8]
		xor	edi, ebp
		rol	ecx, 1Eh
		rol	edi, 1
		mov	[eax+18h], edi
		mov	ebp, edx
		xor	ebp, ecx
		xor	ebp, ebx
		mov	edi, esi
		rol	edi, 5
		lea	edi, [edi+ebp-359D3E2Ah]
		mov	ebp, [eax+18h]
		add	ebp, [esp+24h+var_C]
		mov	[esp+24h+var_10], ecx
		add	edi, ebp
		rol	ebx, 1Eh
		mov	[esp+24h+var_14], ebx
		mov	ebx, [eax+1Ch]
		mov	ebp, [eax+24h]
		xor	ebx, ebp
		mov	ebp, [eax+10h]
		xor	ebp, ebx
		mov	ebx, [eax-4]
		xor	ebx, ebp
		rol	ebx, 1
		mov	[eax+1Ch], ebx
		mov	ebp, esi
		xor	ebp, ecx
		mov	ecx, [esp+24h+var_14]
		mov	ebx, edi
		xor	ebp, ecx
		rol	ebx, 5
		lea	ebx, [ebx+ebp-359D3E2Ah]
		mov	ebp, [eax+1Ch]
		add	ebp, edx
		lea	edx, [ebx+ebp]
		mov	ebx, [eax-18h]
		mov	ebp, [eax+20h]
		xor	ebx, ebp
		mov	ebp, [eax+14h]
		xor	ebp, ebx
		mov	ebx, [eax]
		xor	ebx, ebp
		rol	esi, 1Eh
		rol	ebx, 1
		mov	[eax+20h], ebx
		mov	ebp, esi
		xor	ebp, edi
		xor	ebp, ecx
		mov	ebx, edx
		rol	ebx, 5
		lea	ebx, [ebx+ebp-359D3E2Ah]
		mov	ebp, [eax+20h]
		add	ebp, [esp+24h+var_10]
		add	ebx, ebp
		rol	edi, 1Eh
		mov	[esp+24h+var_C], edi
		mov	edi, [eax+18h]
		mov	ebp, [eax+24h]
		xor	edi, ebp
		mov	ebp, [eax-14h]
		xor	ebp, edi
		mov	edi, [eax+4]
		xor	edi, ebp
		rol	edi, 1
		mov	[eax+24h], edi
		mov	ebp, esi
		xor	ebp, [esp+24h+var_C]
		mov	edi, ebx
		xor	ebp, edx
		rol	edi, 5
		lea	edi, [edi+ebp-359D3E2Ah]
		mov	ebp, [eax+24h]
		add	ebp, ecx
		lea	ecx, [edi+ebp]
		add	[eax-2Ch], ecx
		add	[eax-28h], ebx
		rol	edx, 1Eh
		add	[eax-24h], edx
		mov	edx, [esp+24h+var_C]
		add	[eax-20h], edx
		add	[eax-1Ch], esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_100013B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002560	proc near		; DATA XREF: .rdata:10039288o
					; .rdata:10039C54o
		push	0A0h
		call	PORT_Alloc_Util
		add	esp, 4
		retn
sub_10002560	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002570(void	*Dst, int)
sub_10002570	proc near		; DATA XREF: .rdata:1003928Co
					; .rdata:10039C5Co

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		push	0A0h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_10002595
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10002595:				; CODE XREF: sub_10002570+1Aj
		pop	esi
		retn
sub_10002570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100025A0	proc near		; DATA XREF: .rdata:100392A0o
		mov	eax, 0A0h
		retn
sub_100025A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100025B0	proc near		; DATA XREF: .rdata:100392A4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	ecx, 28h
		rep movsd
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_100025B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100025D0	proc near		; DATA XREF: .rdata:100392A8o

arg_0		= dword	ptr  4

		push	0A0h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_100025E2
		retn
; ---------------------------------------------------------------------------

loc_100025E2:				; CODE XREF: sub_100025D0+Fj
		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	ecx, 28h
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi
		retn
sub_100025D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002600	proc near		; DATA XREF: .rdata:100393BCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, 28h
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10002600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002620(void	*Dst, void *Src, int)
sub_10002620	proc near		; CODE XREF: sub_100026C0+1Fp
					; sub_10002750+63p
					; DATA XREF: ...

Dst		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_8]
		test	edi, edi
		jz	loc_100026B6
		mov	eax, [esp+4+Dst]
		push	ebx
		mov	ebx, [eax+40h]
		add	[eax+40h], edi
		push	ebp
		push	esi
		adc	dword ptr [eax+44h], 0
		and	ebx, 3Fh
		jz	short loc_100026B8
		mov	esi, 40h
		sub	esi, ebx
		cmp	edi, esi
		jnb	short loc_10002650
		mov	esi, edi

loc_10002650:				; CODE XREF: sub_10002620+2Cj
		mov	ebp, [esp+10h+Src]
		push	esi		; Size
		add	eax, ebx
		push	ebp		; Src
		push	eax		; Dst
		call	memcpy
		lea	ecx, [esi+ebx]
		add	esp, 0Ch
		sub	edi, esi
		add	ebp, esi
		test	cl, 3Fh
		jnz	short loc_10002679
		mov	ecx, [esp+10h+Dst]
		lea	eax, [ecx+74h]
		call	sub_100013B0

loc_10002679:				; CODE XREF: sub_10002620+4Bj
		mov	eax, [esp+10h+Dst]

loc_1000267D:				; CODE XREF: sub_10002620+9Cj
		cmp	edi, 40h
		jb	short loc_100026A4
		mov	esi, edi
		add	eax, 74h
		shr	esi, 6
		lea	ebx, [ebx+0]

loc_10002690:				; CODE XREF: sub_10002620+7Ej
		mov	ecx, ebp
		sub	edi, 40h
		call	sub_100013B0
		add	ebp, 40h
		dec	esi
		jnz	short loc_10002690
		mov	eax, [esp+10h+Dst]

loc_100026A4:				; CODE XREF: sub_10002620+60j
		test	edi, edi
		jz	short loc_100026B3
		push	edi		; Size
		push	ebp		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_100026B3:				; CODE XREF: sub_10002620+86j
		pop	esi
		pop	ebp
		pop	ebx

loc_100026B6:				; CODE XREF: sub_10002620+7j
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100026B8:				; CODE XREF: sub_10002620+21j
		mov	ebp, [esp+10h+Src]
		jmp	short loc_1000267D
sub_10002620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100026C0(void	*Dst, int, int)
sub_100026C0	proc near		; CODE XREF: sub_10002750+75p
					; DATA XREF: .rdata:10039298o ...

Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+Dst]
		mov	ebx, [esi+44h]
		push	edi
		mov	edi, [esi+40h]
		mov	eax, 0FFFFFFF7h
		sub	eax, edi
		and	eax, 3Fh
		inc	eax
		push	eax		; int
		push	offset dword_100394F0 ;	Src
		push	esi		; Dst
		call	sub_10002620
		shld	ebx, edi, 3
		add	edi, edi
		add	edi, edi
		add	edi, edi
		bswap	ebx
		bswap	edi
		add	esp, 0Ch
		lea	eax, [esi+74h]
		mov	ecx, esi
		mov	[esi+38h], ebx
		mov	[esi+3Ch], edi
		call	sub_100013B0
		mov	ecx, [esi+48h]
		mov	eax, [esp+0Ch+arg_4]
		bswap	ecx
		mov	[eax], ecx
		mov	edx, [esi+4Ch]
		bswap	edx
		mov	[eax+4], edx
		mov	ecx, [esi+50h]
		bswap	ecx
		mov	[eax+8], ecx
		mov	edx, [esi+54h]
		bswap	edx
		mov	[eax+0Ch], edx
		mov	ecx, [esi+58h]
		bswap	ecx
		pop	edi
		mov	[eax+10h], ecx
		mov	eax, [esp+8+arg_8]
		pop	esi
		pop	ebx
		test	eax, eax
		jz	short locret_10002741
		mov	dword ptr [eax], 14h

locret_10002741:			; CODE XREF: sub_100026C0+79j
		retn
sub_100026C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002750(int,	void *Src, int)
sub_10002750	proc near		; CODE XREF: sub_100027F0+20p
					; sub_10019470+24p
					; DATA XREF: ...

var_A8		= dword	ptr -0A8h
Dst		= byte ptr -0A4h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0A8h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0A8h+var_4], eax
		mov	eax, [esp+0A8h+Src]
		xor	ecx, ecx
		push	esi
		mov	esi, [esp+0ACh+arg_0]
		mov	[esp+0ACh+var_64], ecx
		mov	[esp+0ACh+var_60], ecx
		mov	ecx, [esp+0ACh+arg_8]
		push	ecx		; int
		push	eax		; Src
		lea	edx, [esp+0B4h+Dst]
		push	edx		; Dst
		mov	[esp+0B8h+var_5C], 67452301h
		mov	[esp+0B8h+var_58], 0EFCDAB89h
		mov	[esp+0B8h+var_54], 98BADCFEh
		mov	[esp+0B8h+var_50], 10325476h
		mov	[esp+0B8h+var_4C], 0C3D2E1F0h
		call	sub_10002620
		push	14h
		lea	eax, [esp+0BCh+var_A8]
		push	eax		; int
		lea	ecx, [esp+0C0h+Dst]
		push	esi		; int
		push	ecx		; Dst
		call	sub_100026C0
		mov	ecx, [esp+0C8h+var_4]
		add	esp, 1Ch
		pop	esi
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A8h
		retn
sub_10002750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100027F0(int,	void *Src)
sub_100027F0	proc near		; DATA XREF: .rdata:10039280o

arg_0		= dword	ptr  4
Src		= dword	ptr  8

		mov	edx, [esp+Src]
		mov	eax, edx
		push	esi
		lea	esi, [eax+1]
		lea	ebx, [ebx+0]

loc_10002800:				; CODE XREF: sub_100027F0+15j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10002800
		sub	eax, esi
		push	eax		; int
		mov	eax, [esp+8+arg_0]
		push	edx		; Src
		push	eax		; int
		call	sub_10002750
		add	esp, 0Ch
		pop	esi
		retn
sub_100027F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002820	proc near		; DATA XREF: .rdata:10039260o
					; .rdata:10039C04o
		push	41h
		call	PORT_ZAlloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short locret_1000283D
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax

locret_1000283D:			; CODE XREF: sub_10002820+Cj
		retn
sub_10002820	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002840	proc near		; DATA XREF: .rdata:10039264o
					; .rdata:10039C0Co

arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jz	short locret_10002854
		mov	[esp+arg_4], 41h
		jmp	PORT_ZFree_Util
; ---------------------------------------------------------------------------

locret_10002854:			; CODE XREF: sub_10002840+5j
		retn
sub_10002840	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002860(void	*Dst)
sub_10002860	proc near		; DATA XREF: .rdata:10039268o
					; .rdata:10039C10o

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	41h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		mov	byte ptr [esi+40h], 10h
		pop	esi
		retn
sub_10002860	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002880	proc near		; CODE XREF: sub_10003030+41p
					; sub_10003030+79p ...

var_32		= byte ptr -32h
var_31		= byte ptr -31h
var_30		= byte ptr -30h
var_2F		= byte ptr -2Fh
var_2E		= byte ptr -2Eh
var_2D		= byte ptr -2Dh
var_2C		= byte ptr -2Ch
var_2B		= byte ptr -2Bh
var_2A		= byte ptr -2Ah
var_29		= byte ptr -29h
var_28		= byte ptr -28h
var_27		= byte ptr -27h
var_26		= byte ptr -26h
var_25		= byte ptr -25h
var_24		= byte ptr -24h
var_23		= byte ptr -23h
var_22		= byte ptr -22h
var_21		= byte ptr -21h
var_20		= byte ptr -20h
var_1F		= byte ptr -1Fh
var_1E		= byte ptr -1Eh
var_1D		= byte ptr -1Dh
var_1C		= byte ptr -1Ch
var_1B		= byte ptr -1Bh
var_1A		= byte ptr -1Ah
var_19		= byte ptr -19h
var_18		= byte ptr -18h
var_17		= byte ptr -17h
var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= byte ptr -10h
var_F		= byte ptr -0Fh
var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= byte ptr -4
var_3		= byte ptr -3
var_2		= byte ptr -2
var_1		= byte ptr -1

		sub	esp, 34h
		push	ebx
		push	esi
		movzx	ecx, byte ptr [eax+20h]
		movzx	edx, byte ptr [eax+0Fh]
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax]
		mov	dl, [eax+10h]
		xor	dl, [eax+20h]
		mov	[eax], cl
		mov	[eax+30h], dl
		mov	[esp+3Ch+var_28], dl
		movzx	edx, byte ptr [eax+21h]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+1]
		mov	dl, [eax+11h]
		xor	dl, [eax+21h]
		mov	[eax+1], cl
		mov	[eax+31h], dl
		mov	[esp+3Ch+var_25], dl
		movzx	edx, byte ptr [eax+22h]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+2]
		mov	dl, [eax+12h]
		xor	dl, [eax+22h]
		mov	[eax+2], cl
		mov	[eax+32h], dl
		mov	[esp+3Ch+var_27], dl
		movzx	edx, byte ptr [eax+23h]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+3]
		mov	dl, [eax+13h]
		xor	dl, [eax+23h]
		mov	[eax+3], cl
		mov	[eax+33h], dl
		mov	[esp+3Ch+var_29], dl
		movzx	edx, byte ptr [eax+24h]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+4]
		mov	dl, [eax+14h]
		xor	dl, [eax+24h]
		mov	[eax+4], cl
		mov	[eax+34h], dl
		mov	[esp+3Ch+var_2B], dl
		movzx	edx, byte ptr [eax+25h]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+5]
		mov	dl, [eax+15h]
		xor	dl, [eax+25h]
		mov	[eax+5], cl
		mov	[eax+35h], dl
		mov	[esp+3Ch+var_2D], dl
		movzx	edx, byte ptr [eax+26h]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+6]
		mov	dl, [eax+16h]
		xor	dl, [eax+26h]
		mov	[eax+6], cl
		mov	[eax+36h], dl
		mov	[esp+3Ch+var_2F], dl
		movzx	edx, byte ptr [eax+27h]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+7]
		mov	dl, [eax+17h]
		xor	dl, [eax+27h]
		mov	[eax+7], cl
		mov	[esp+3Ch+var_30], dl
		mov	[eax+37h], dl
		movzx	edx, byte ptr [eax+28h]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+8]
		mov	dl, [eax+18h]
		xor	dl, [eax+28h]
		mov	[eax+8], cl
		mov	[eax+38h], dl
		mov	[esp+3Ch+var_31], dl
		movzx	edx, byte ptr [eax+29h]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+9]
		mov	dl, [eax+19h]
		xor	dl, [eax+29h]
		mov	[eax+9], cl
		mov	[eax+39h], dl
		mov	[esp+3Ch+var_2C], dl
		movzx	edx, byte ptr [eax+2Ah]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+0Ah]
		mov	dl, [eax+1Ah]
		xor	dl, [eax+2Ah]
		mov	[eax+0Ah], cl
		mov	[eax+3Ah], dl
		mov	[esp+3Ch+var_26], dl
		movzx	edx, byte ptr [eax+2Bh]
		movzx	ecx, cl
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+0Bh]
		mov	dl, [eax+1Bh]
		xor	dl, [eax+2Bh]
		mov	[eax+0Bh], cl
		mov	[eax+3Bh], dl
		movzx	ecx, cl
		mov	[esp+3Ch+var_2E], dl
		movzx	edx, byte ptr [eax+2Ch]
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+0Ch]
		mov	dl, [eax+1Ch]
		xor	dl, [eax+2Ch]
		mov	[eax+0Ch], cl
		mov	[eax+3Ch], dl
		mov	bl, [eax+2Fh]
		movzx	ecx, cl
		mov	[esp+3Ch+var_2A], dl
		movzx	edx, byte ptr [eax+2Dh]
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+0Dh]
		mov	dl, [eax+1Dh]
		xor	dl, [eax+2Dh]
		mov	[eax+0Dh], cl
		movzx	ecx, cl
		mov	[eax+3Dh], dl
		mov	[esp+3Ch+var_3], dl
		movzx	edx, byte ptr [eax+2Eh]
		xor	edx, ecx
		mov	cl, ds:byte_10039530[edx]
		xor	cl, [eax+0Eh]
		mov	dl, [eax+1Eh]
		xor	dl, [eax+2Eh]
		mov	[eax+0Eh], cl
		movzx	ecx, cl
		movzx	esi, bl
		xor	esi, ecx
		mov	[eax+3Eh], dl
		movzx	ecx, ds:byte_10039530[esi]
		xor	cl, [eax+0Fh]
		mov	[esp+3Ch+var_32], bl
		mov	[eax+0Fh], cl
		mov	cl, [eax+1Fh]
		xor	cl, bl
		mov	[esp+3Ch+var_2], cl
		movzx	ebx, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_12], bl
		movzx	ebx, byte ptr [eax+21h]
		mov	[esp+3Ch+var_4], bl
		movzx	ebx, byte ptr [eax+11h]
		mov	[esp+3Ch+var_7], bl
		movzx	ebx, [esp+3Ch+var_25]
		mov	[esp+3Ch+var_23], bl
		movzx	ebx, byte ptr [eax+22h]
		mov	[esp+3Ch+var_20], bl
		movzx	ebx, byte ptr [eax+12h]
		mov	[esp+3Ch+var_5], bl
		movzx	ebx, [esp+3Ch+var_27]
		mov	[esp+3Ch+var_21], bl
		movzx	ebx, byte ptr [eax+23h]
		mov	[esp+3Ch+var_10], bl
		movzx	ebx, byte ptr [eax+13h]
		mov	[esp+3Ch+var_16], bl
		movzx	ebx, [esp+3Ch+var_29]
		mov	[esp+3Ch+var_1F], bl
		movzx	ebx, byte ptr [eax+24h]
		mov	[esp+3Ch+var_1E], bl
		movzx	ebx, byte ptr [eax+14h]
		mov	[esp+3Ch+var_6], bl
		movzx	ebx, [esp+3Ch+var_2B]
		mov	[esp+3Ch+var_1D], bl
		movzx	ebx, byte ptr [eax+25h]
		mov	[esp+3Ch+var_8], bl
		movzx	ebx, byte ptr [eax+15h]
		mov	[esp+3Ch+var_14], bl
		movzx	ebx, [esp+3Ch+var_2D]
		mov	[esp+3Ch+var_1B], bl
		movzx	ebx, byte ptr [eax+26h]
		mov	[esp+3Ch+var_1C], bl
		movzx	ebx, byte ptr [eax+16h]
		mov	[esp+3Ch+var_A], bl
		movzx	ebx, [esp+3Ch+var_2F]
		mov	[esp+3Ch+var_19], bl
		movzx	ebx, byte ptr [eax+27h]
		mov	[esp+3Ch+var_E], bl
		movzx	ebx, byte ptr [eax+17h]
		mov	[esp+3Ch+var_15], bl
		movzx	ebx, [esp+3Ch+var_30]
		mov	[esp+3Ch+var_17], bl
		movzx	ebx, byte ptr [eax+28h]
		mov	[esp+3Ch+var_1A], bl
		movzx	ebx, byte ptr [eax+18h]
		mov	[esp+3Ch+var_13], bl
		movzx	ebx, [esp+3Ch+var_31]
		mov	[esp+3Ch+var_30], bl
		movzx	ebx, byte ptr [eax+29h]
		mov	[esp+3Ch+var_24], bl
		movzx	ebx, byte ptr [eax+19h]
		mov	[esp+3Ch+var_11], bl
		movzx	ebx, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_2F], bl
		movzx	ebx, byte ptr [eax+2Ah]
		mov	[esp+3Ch+var_18], bl
		movzx	ebx, byte ptr [eax+1Ah]
		mov	[esp+3Ch+var_F], bl
		movzx	ebx, [esp+3Ch+var_26]
		mov	[esp+3Ch+var_2D], bl
		movzx	ebx, byte ptr [eax+2Bh]
		mov	[esp+3Ch+var_C], bl
		movzx	ebx, byte ptr [eax+1Bh]
		mov	[esp+3Ch+var_D], bl
		movzx	ebx, [esp+3Ch+var_2E]
		mov	[esp+3Ch+var_2B], bl
		movzx	ebx, byte ptr [eax+2Ch]
		mov	[esp+3Ch+var_2E], bl
		movzx	ebx, byte ptr [eax+1Ch]
		mov	[eax+3Fh], cl
		movzx	ecx, byte ptr [eax+20h]
		mov	[esp+3Ch+var_B], bl
		movzx	ebx, [esp+3Ch+var_2A]
		mov	[esp+3Ch+var_22], cl
		mov	cl, [eax+10h]
		mov	[esp+3Ch+var_29], bl
		movzx	ebx, byte ptr [eax+2Dh]
		mov	[esp+3Ch+var_1], 0
		xor	esi, esi
		mov	[esp+3Ch+var_26], bl
		movzx	ebx, byte ptr [eax+1Dh]
		mov	[esp+3Ch+var_9], bl
		movzx	ebx, [esp+3Ch+var_3]
		mov	[esp+3Ch+var_25], dl
		movzx	edx, [esp+3Ch+var_32]
		mov	[esp+3Ch+var_27], bl
		movzx	ebx, byte ptr [eax+2Eh]
		mov	[esp+3Ch+var_31], dl
		mov	dl, [eax+1Fh]
		mov	[esp+3Ch+var_32], dl
		movzx	edx, [esp+3Ch+var_2]
		mov	[esp+3Ch+var_2C], bl
		movzx	ebx, byte ptr [eax+1Eh]
		mov	[esp+3Ch+var_28], dl
		mov	dl, [esp+3Ch+var_1]
		mov	[esp+3Ch+var_2A], bl
		jmp	short loc_10002C40
; ---------------------------------------------------------------------------
		align 10h

loc_10002C40:				; CODE XREF: sub_10002880+3B7j
					; sub_10002880+794j
		movzx	edx, dl
		movzx	edx, ds:byte_10039530[edx]
		xor	cl, dl
		mov	[eax+10h], cl
		movzx	edx, cl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_7]
		mov	[esp+3Ch+var_7], dl
		mov	[eax+11h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_5]
		mov	[esp+3Ch+var_5], dl
		mov	[eax+12h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_16]
		mov	[esp+3Ch+var_16], dl
		mov	[eax+13h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_6]
		mov	[esp+3Ch+var_6], dl
		mov	[eax+14h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_14], dl
		mov	[eax+15h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_A]
		mov	[esp+3Ch+var_A], dl
		mov	[eax+16h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_15]
		mov	[esp+3Ch+var_15], dl
		mov	[eax+17h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_13]
		mov	[esp+3Ch+var_13], dl
		mov	[eax+18h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_11]
		mov	[esp+3Ch+var_11], dl
		mov	[eax+19h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_F]
		mov	[esp+3Ch+var_F], dl
		mov	[eax+1Ah], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_D]
		mov	[esp+3Ch+var_D], dl
		mov	[eax+1Bh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_B]
		mov	[esp+3Ch+var_B], dl
		mov	[eax+1Ch], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_9]
		mov	[esp+3Ch+var_9], dl
		mov	[eax+1Dh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_2A]
		mov	[esp+3Ch+var_2A], dl
		mov	[eax+1Eh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_32]
		mov	[esp+3Ch+var_32], dl
		mov	[eax+1Fh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_22]
		mov	[esp+3Ch+var_22], dl
		mov	[eax+20h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_4]
		mov	[esp+3Ch+var_4], dl
		mov	[eax+21h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_20], dl
		mov	[eax+22h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_10], dl
		mov	[eax+23h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_1E]
		mov	[esp+3Ch+var_1E], dl
		mov	[eax+24h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_8]
		mov	[esp+3Ch+var_8], dl
		mov	[eax+25h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_1C]
		mov	[esp+3Ch+var_1C], dl
		mov	[eax+26h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_E]
		mov	[esp+3Ch+var_E], dl
		mov	[eax+27h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_1A]
		mov	[esp+3Ch+var_1A], dl
		mov	[eax+28h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_24], dl
		mov	[eax+29h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_18]
		mov	[esp+3Ch+var_18], dl
		mov	[eax+2Ah], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_C]
		mov	[esp+3Ch+var_C], dl
		mov	[eax+2Bh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_2E]
		mov	[esp+3Ch+var_2E], dl
		mov	[eax+2Ch], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_26]
		mov	[esp+3Ch+var_26], dl
		mov	[eax+2Dh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_2C], dl
		mov	[eax+2Eh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_31]
		mov	[esp+3Ch+var_31], dl
		mov	[eax+2Fh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_12]
		mov	[esp+3Ch+var_12], dl
		mov	[eax+30h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_23]
		mov	[esp+3Ch+var_23], dl
		mov	[eax+31h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_21]
		mov	[esp+3Ch+var_21], dl
		mov	[eax+32h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_1F]
		mov	[esp+3Ch+var_1F], dl
		mov	[eax+33h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_1D]
		mov	[esp+3Ch+var_1D], dl
		mov	[eax+34h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_1B]
		mov	[esp+3Ch+var_1B], dl
		mov	[eax+35h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_19]
		mov	[esp+3Ch+var_19], dl
		mov	[eax+36h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_17]
		mov	[esp+3Ch+var_17], dl
		mov	[eax+37h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_30]
		mov	[esp+3Ch+var_30], dl
		mov	[eax+38h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_2F]
		mov	[esp+3Ch+var_2F], dl
		mov	[eax+39h], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_2D]
		mov	[esp+3Ch+var_2D], dl
		mov	[eax+3Ah], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_2B]
		mov	[esp+3Ch+var_2B], dl
		mov	[eax+3Bh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_29]
		mov	[esp+3Ch+var_29], dl
		mov	[eax+3Ch], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_27]
		mov	[esp+3Ch+var_27], dl
		mov	[eax+3Dh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_25]
		mov	[esp+3Ch+var_25], dl
		mov	[eax+3Eh], dl
		movzx	edx, dl
		mov	dl, ds:byte_10039530[edx]
		xor	dl, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_28], dl
		mov	[eax+3Fh], dl
		movzx	edx, dl
		add	edx, esi
		and	edx, 800000FFh
		jns	short loc_10003010
		dec	edx
		or	edx, 0FFFFFF00h
		inc	edx

loc_10003010:				; CODE XREF: sub_10002880+786j
		inc	esi
		cmp	esi, 12h
		jl	loc_10002C40
		pop	esi
		mov	byte ptr [eax+40h], 10h
		pop	ebx
		add	esp, 34h
		retn
sub_10002880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003030(int,	void *Src, size_t Size)
sub_10003030	proc near		; CODE XREF: sub_10003200+54p
					; DATA XREF: .rdata:1003926Co ...

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+Size]
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	al, [esi+40h]
		push	edi
		cmp	al, 10h
		jz	short loc_1000307C
		movzx	eax, al
		mov	ebp, ebx
		cmp	ebx, eax
		jb	short loc_1000304E
		mov	ebp, eax

loc_1000304E:				; CODE XREF: sub_10003030+1Aj
		mov	edi, [esp+10h+Src]
		mov	ecx, esi
		push	ebp		; Size
		sub	ecx, eax
		add	ecx, 30h
		push	edi		; Src
		push	ecx		; Dst
		call	memcpy
		movzx	edx, byte ptr [esi+40h]
		add	edx, ebp
		add	esp, 0Ch
		cmp	edx, 10h
		jb	short loc_10003076
		mov	eax, esi
		call	sub_10002880

loc_10003076:				; CODE XREF: sub_10003030+3Dj
		sub	ebx, ebp
		add	edi, ebp
		jmp	short loc_10003080
; ---------------------------------------------------------------------------

loc_1000307C:				; CODE XREF: sub_10003030+11j
		mov	edi, [esp+10h+Src]

loc_10003080:				; CODE XREF: sub_10003030+4Aj
		cmp	ebx, 10h
		jb	short loc_100030B7
		mov	ebp, ebx
		shr	ebp, 4
		lea	ebx, [ebx+0]

loc_10003090:				; CODE XREF: sub_10003030+85j
		mov	eax, [edi]
		mov	[esi+20h], eax
		mov	ecx, [edi+4]
		mov	[esi+24h], ecx
		mov	edx, [edi+8]
		mov	[esi+28h], edx
		mov	eax, [edi+0Ch]
		mov	[esi+2Ch], eax
		mov	eax, esi
		call	sub_10002880
		sub	ebx, 10h
		add	edi, 10h
		dec	ebp
		jnz	short loc_10003090

loc_100030B7:				; CODE XREF: sub_10003030+53j
		test	ebx, ebx
		jz	short loc_100030C9
		push	ebx		; Size
		lea	ecx, [esi+20h]
		push	edi		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_100030C9:				; CODE XREF: sub_10003030+89j
		mov	dl, 10h
		sub	dl, bl
		pop	edi
		mov	[esi+40h], dl
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10003030	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100030E0	proc near		; DATA XREF: .rdata:10039270o
					; .rdata:10039C18o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 10h
		jnb	short loc_100030F5
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_100030F5:				; CODE XREF: sub_100030E0+5j
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	al, [esi+40h]
		movzx	ecx, al
		push	ecx		; Size
		push	ecx		; Val
		mov	cl, 10h
		sub	cl, al
		movzx	edx, cl
		lea	eax, [edx+esi+20h]
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		call	sub_10002880
		mov	ecx, [esi]
		mov	edx, [esi+4]
		mov	eax, [esi+8]
		mov	[esi+20h], ecx
		mov	ecx, [esi+0Ch]
		mov	[esi+24h], edx
		mov	[esi+28h], eax
		mov	eax, esi
		mov	[esi+2Ch], ecx
		call	sub_10002880
		mov	edx, [esp+4+arg_8]
		mov	eax, [esp+4+arg_4]
		mov	dword ptr [edx], 10h
		mov	ecx, [esi+10h]
		mov	[eax], ecx
		mov	edx, [esi+14h]
		mov	[eax+4], edx
		mov	ecx, [esi+18h]
		mov	[eax+8], ecx
		mov	edx, [esi+1Ch]
		mov	[eax+0Ch], edx
		pop	esi
		retn
sub_100030E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003170	proc near		; DATA XREF: .rdata:10039274o
		mov	eax, 41h
		retn
sub_10003170	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003180	proc near		; DATA XREF: .rdata:10039278o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	ecx, 10h
		rep movsd
		movsb
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10003180	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100031A0	proc near		; DATA XREF: .rdata:1003927Co

arg_0		= dword	ptr  4

		push	41h
		call	PORT_ZAlloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_100031BE
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100031BE:				; CODE XREF: sub_100031A0+Cj
		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	ecx, 10h
		mov	edi, eax
		rep movsd
		movsb
		pop	edi
		pop	esi
		retn
sub_100031A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100031E0	proc near		; DATA XREF: .rdata:100393B4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, 10h
		rep movsd
		movsb
		pop	edi
		pop	esi
		retn
sub_100031E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003200(int,	void *Src)
sub_10003200	proc near		; DATA XREF: .rdata:1003925Co

arg_0		= dword	ptr  4
Src		= dword	ptr  8

		push	esi
		push	41h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1000322D
		push	0FFFFE890h
		call	PORT_SetError_Util
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000322D:				; CODE XREF: sub_10003200+Fj
		push	edi
		push	41h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		mov	ecx, [esp+14h+Src]
		mov	eax, ecx
		add	esp, 0Ch
		mov	byte ptr [esi+40h], 10h
		lea	edi, [eax+1]

loc_10003248:				; CODE XREF: sub_10003200+4Dj
		mov	dl, [eax]
		inc	eax
		test	dl, dl
		jnz	short loc_10003248
		sub	eax, edi
		push	eax		; Size
		push	ecx		; Src
		push	esi		; int
		call	sub_10003030
		mov	al, [esi+40h]
		movzx	ecx, al
		push	ecx		; Size
		push	ecx		; Val
		mov	cl, 10h
		sub	cl, al
		movzx	edx, cl
		lea	eax, [edx+esi+20h]
		push	eax		; Dst
		call	memset
		mov	eax, esi
		call	sub_10002880
		mov	ecx, [esi]
		mov	edx, [esi+4]
		mov	eax, [esi+8]
		mov	[esi+20h], ecx
		mov	ecx, [esi+0Ch]
		mov	[esi+24h], edx
		mov	[esi+28h], eax
		mov	eax, esi
		mov	[esi+2Ch], ecx
		call	sub_10002880
		mov	edx, [esi+10h]
		mov	eax, [esp+20h+arg_0]
		mov	[eax], edx
		mov	ecx, [esi+14h]
		mov	[eax+4], ecx
		mov	edx, [esi+18h]
		mov	[eax+8], edx
		mov	ecx, [esi+1Ch]
		push	41h
		push	esi
		mov	[eax+0Ch], ecx
		call	PORT_ZFree_Util
		add	esp, 20h
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10003200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100032D0	proc near		; DATA XREF: .rdata:10039238o
					; .rdata:10039C2Co
		push	58h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short locret_100032ED
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax

locret_100032ED:			; CODE XREF: sub_100032D0+Cj
		retn
sub_100032D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100032F0(void	*Dst, int)
sub_100032F0	proc near		; DATA XREF: .rdata:1003923Co
					; .rdata:10039C34o

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		push	58h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_10003312
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10003312:				; CODE XREF: sub_100032F0+17j
		pop	esi
		retn
sub_100032F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003320	proc near		; DATA XREF: .rdata:10039240o
					; .rdata:10039C38o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 67452301h
		mov	dword ptr [eax+0Ch], 0EFCDAB89h
		mov	dword ptr [eax+10h], 98BADCFEh
		mov	dword ptr [eax+14h], 10325476h
		retn
sub_10003320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003350	proc near		; CODE XREF: sub_10003A80+5Ep
					; sub_10003A80+83p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		push	ebx
		mov	ecx, [esp+40h+arg_0]
		mov	edx, [ecx+14h]
		push	ebp
		push	esi
		mov	esi, [ecx+10h]
		push	edi
		mov	edi, [ecx+0Ch]
		mov	ecx, [ecx+8]
		mov	ebx, edi
		not	ebx
		and	ebx, edx
		mov	ebp, esi
		and	ebp, edi
		or	ebx, ebp
		add	ebx, [eax]
		mov	ebp, edi
		lea	ecx, [ebx+ecx-28955B88h]
		rol	ecx, 7
		add	ecx, edi
		and	ebp, ecx
		mov	ebx, ecx
		not	ebx
		and	ebx, esi
		or	ebx, ebp
		add	ebx, [eax+4]
		lea	edx, [ebx+edx-173848AAh]
		rol	edx, 0Ch
		add	edx, ecx
		mov	ebx, edx
		not	ebx
		and	ebx, edi
		mov	ebp, edx
		and	ebp, ecx
		or	ebx, ebp
		add	ebx, [eax+8]
		mov	ebp, edx
		lea	esi, [ebx+esi+242070DBh]
		ror	esi, 0Fh
		add	esi, edx
		and	ebp, esi
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		or	ebx, ebp
		add	ebx, [eax+0Ch]
		mov	ebp, esi
		lea	edi, [ebx+edi-3E423112h]
		ror	edi, 0Ah
		add	edi, esi
		mov	[esp+4Ch+var_3C], edi
		and	ebp, [esp+4Ch+var_3C]
		not	edi
		and	edi, edx
		or	edi, ebp
		add	edi, [eax+10h]
		lea	ecx, [edi+ecx-0A83F051h]
		mov	edi, [esp+4Ch+var_3C]
		rol	ecx, 7
		add	ecx, edi
		mov	ebx, ecx
		not	ebx
		and	ebx, esi
		mov	ebp, edi
		and	ebp, ecx
		or	ebx, ebp
		add	ebx, [eax+14h]
		lea	edx, [ebx+edx+4787C62Ah]
		rol	edx, 0Ch
		add	edx, ecx
		mov	ebx, edx
		not	ebx
		and	ebx, edi
		mov	ebp, edx
		and	ebp, ecx
		or	ebx, ebp
		add	ebx, [eax+18h]
		lea	esi, [ebx+esi-57CFB9EDh]
		mov	ebx, [eax+1Ch]
		ror	esi, 0Fh
		add	esi, edx
		mov	[esp+4Ch+var_38], ebx
		mov	ebp, edx
		and	ebp, esi
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		or	ebx, ebp
		add	ebx, [esp+4Ch+var_38]
		mov	ebp, esi
		lea	edi, [ebx+edi-2B96AFFh]
		ror	edi, 0Ah
		add	edi, esi
		mov	[esp+4Ch+var_3C], edi
		and	ebp, [esp+4Ch+var_3C]
		not	edi
		and	edi, edx
		or	edi, ebp
		add	edi, [eax+20h]
		lea	ecx, [edi+ecx+698098D8h]
		mov	edi, [esp+4Ch+var_3C]
		rol	ecx, 7
		add	ecx, edi
		mov	ebp, edi
		and	ebp, ecx
		mov	ebx, ecx
		not	ebx
		and	ebx, esi
		or	ebx, ebp
		add	ebx, [eax+24h]
		lea	edx, [ebx+edx-74BB0851h]
		rol	edx, 0Ch
		add	edx, ecx
		mov	ebx, edx
		not	ebx
		and	ebx, edi
		mov	ebp, edx
		and	ebp, ecx
		or	ebx, ebp
		add	ebx, [eax+28h]
		mov	ebp, edx
		lea	esi, [ebx+esi-0A44Fh]
		ror	esi, 0Fh
		add	esi, edx
		and	ebp, esi
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		or	ebx, ebp
		add	ebx, [eax+2Ch]
		mov	ebp, esi
		lea	edi, [ebx+edi-76A32842h]
		ror	edi, 0Ah
		add	edi, esi
		mov	[esp+4Ch+var_3C], edi
		and	ebp, [esp+4Ch+var_3C]
		not	edi
		and	edi, edx
		or	edi, ebp
		add	edi, [eax+30h]
		lea	ecx, [edi+ecx+6B901122h]
		mov	edi, [esp+4Ch+var_3C]
		rol	ecx, 7
		add	ecx, edi
		mov	ebx, ecx
		not	ebx
		and	ebx, esi
		mov	ebp, edi
		and	ebp, ecx
		or	ebx, ebp
		add	ebx, [eax+34h]
		lea	edx, [ebx+edx-2678E6Dh]
		rol	edx, 0Ch
		add	edx, ecx
		mov	ebx, edx
		not	ebx
		mov	ebp, ebx
		and	ebp, edi
		mov	edi, edx
		and	edi, ecx
		or	ebp, edi
		add	ebp, [eax+38h]
		lea	esi, [esi+ebp-5986BC72h]
		ror	esi, 0Fh
		add	esi, edx
		and	ebx, esi
		mov	edi, esi
		not	edi
		mov	[esp+4Ch+var_34], edi
		and	edi, ecx
		mov	ebp, edx
		and	ebp, esi
		or	edi, ebp
		add	edi, [eax+3Ch]
		mov	ebp, [esp+4Ch+var_3C]
		lea	edi, [edi+ebp+49B40821h]
		ror	edi, 0Ah
		add	edi, esi
		mov	ebp, edx
		and	ebp, edi
		or	ebx, ebp
		add	ebx, [eax+4]
		mov	ebp, esi
		lea	ecx, [ebx+ecx-9E1DA9Eh]
		mov	ebx, [esp+4Ch+var_34]
		and	ebx, edi
		rol	ecx, 5
		add	ecx, edi
		and	ebp, ecx
		or	ebx, ebp
		add	ebx, [eax+18h]
		lea	edx, [ebx+edx-3FBF4CC0h]
		rol	edx, 9
		add	edx, ecx
		mov	ebx, edi
		not	ebx
		and	ebx, ecx
		mov	ebp, edx
		and	ebp, edi
		or	ebx, ebp
		add	ebx, [eax+2Ch]
		lea	esi, [ebx+esi+265E5A51h]
		mov	ebx, ecx
		rol	esi, 0Eh
		add	esi, edx
		not	ebx
		and	ebx, edx
		mov	ebp, esi
		and	ebp, ecx
		or	ebx, ebp
		add	ebx, [eax]
		mov	ebp, edx
		lea	edi, [ebx+edi-16493856h]
		not	ebp
		and	ebp, esi
		ror	edi, 0Ch
		add	edi, esi
		mov	ebx, edx
		and	ebx, edi
		or	ebp, ebx
		mov	ebx, [eax+14h]
		add	ebp, ebx
		lea	ecx, [ecx+ebp-29D0EFA3h]
		rol	ecx, 5
		add	ecx, edi
		mov	[esp+4Ch+var_3C], ecx
		mov	ecx, esi
		not	ecx
		and	ecx, edi
		mov	ebp, esi
		and	ebp, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_24], ebx
		or	ecx, ebp
		add	ecx, [eax+28h]
		mov	ebp, edi
		lea	edx, [ecx+edx+2441453h]
		mov	ecx, [esp+4Ch+var_3C]
		rol	edx, 9
		add	edx, ecx
		not	ebp
		and	ebp, ecx
		mov	ecx, edx
		and	ecx, edi
		or	ebp, ecx
		add	ebp, [eax+3Ch]
		mov	ecx, [esp+4Ch+var_3C]
		lea	esi, [esi+ebp-275E197Fh]
		not	ecx
		and	ecx, edx
		rol	esi, 0Eh
		add	esi, edx
		mov	ebp, esi
		and	ebp, [esp+4Ch+var_3C]
		or	ecx, ebp
		add	ecx, [eax+10h]
		mov	ebp, edx
		lea	edi, [ecx+edi-182C0438h]
		ror	edi, 0Ch
		add	edi, esi
		and	ebp, edi
		mov	ecx, edx
		not	ecx
		and	ecx, esi
		or	ecx, ebp
		add	ecx, [eax+24h]
		mov	ebp, [esp+4Ch+var_3C]
		lea	ecx, [ecx+ebp+21E1CDE6h]
		rol	ecx, 5
		add	ecx, edi
		mov	[esp+4Ch+var_3C], ecx
		mov	ecx, esi
		not	ecx
		and	ecx, edi
		mov	ebp, esi
		and	ebp, [esp+4Ch+var_3C]
		or	ecx, ebp
		add	ecx, [eax+38h]
		mov	ebp, edi
		lea	edx, [ecx+edx-3CC8F82Ah]
		mov	ecx, [esp+4Ch+var_3C]
		not	ebp
		and	ebp, ecx
		rol	edx, 9
		add	edx, ecx
		mov	ecx, edx
		and	ecx, edi
		or	ebp, ecx
		add	ebp, [eax+0Ch]
		lea	esi, [esi+ebp-0B2AF279h]
		mov	ebp, [esp+4Ch+var_3C]
		not	ebp
		and	ebp, edx
		rol	esi, 0Eh
		add	esi, edx
		mov	ecx, esi
		and	ecx, [esp+4Ch+var_3C]
		or	ebp, ecx
		mov	ecx, [eax+20h]
		add	ebp, ecx
		mov	[esp+4Ch+var_34], ecx
		lea	edi, [edi+ebp+455A14EDh]
		ror	edi, 0Ch
		add	edi, esi
		mov	ecx, edx
		not	ecx
		and	ecx, esi
		mov	ebp, edx
		and	ebp, edi
		or	ecx, ebp
		add	ecx, [eax+34h]
		mov	ebp, [esp+4Ch+var_3C]
		lea	ecx, [ecx+ebp-561C16FBh]
		rol	ecx, 5
		add	ecx, edi
		mov	[esp+4Ch+var_3C], ecx
		mov	ebp, esi
		not	ebp
		mov	ecx, esi
		and	ecx, [esp+4Ch+var_3C]
		and	ebp, edi
		or	ebp, ecx
		mov	ecx, [eax+8]
		mov	[esp+4Ch+var_30], ecx
		add	ebp, ecx
		mov	ecx, [esp+4Ch+var_3C]
		lea	edx, [edx+ebp-3105C08h]
		rol	edx, 9
		add	edx, ecx
		mov	ebp, edi
		not	ebp
		and	ebp, ecx
		mov	ecx, edx
		and	ecx, edi
		or	ebp, ecx
		add	ebp, [eax+1Ch]
		mov	ecx, [esp+4Ch+var_3C]
		lea	esi, [esi+ebp+676F02D9h]
		rol	esi, 0Eh
		add	esi, edx
		not	ecx
		and	ecx, edx
		mov	ebp, esi
		and	ebp, [esp+4Ch+var_3C]
		or	ecx, ebp
		add	ecx, [eax+30h]
		lea	edi, [ecx+edi-72D5B376h]
		ror	edi, 0Ch
		add	edi, esi
		mov	ecx, edx
		xor	ecx, esi
		xor	ecx, edi
		add	ecx, ebx
		mov	ebx, [esp+4Ch+var_3C]
		lea	ecx, [ecx+ebx-5C6BEh]
		rol	ecx, 4
		add	ecx, edi
		mov	ebx, esi
		xor	ebx, edi
		xor	ebx, ecx
		add	ebx, [esp+4Ch+var_34]
		lea	edx, [ebx+edx-788E097Fh]
		mov	ebx, [eax+2Ch]
		rol	edx, 0Bh
		add	edx, ecx
		mov	ebp, edx
		xor	ebp, edi
		xor	ebp, ecx
		add	ebp, ebx
		lea	esi, [esi+ebp+6D9D6122h]
		mov	ebp, [eax+38h]
		mov	[esp+4Ch+var_8], ebx
		rol	esi, 10h
		add	esi, edx
		mov	ebx, edx
		xor	ebx, esi
		mov	[esp+4Ch+var_3C], ebx
		xor	ebx, ecx
		add	ebx, ebp
		lea	edi, [ebx+edi-21AC7F4h]
		mov	ebx, [esp+4Ch+var_3C]
		ror	edi, 9
		add	edi, esi
		xor	ebx, edi
		mov	[esp+4Ch+var_28], ebp
		mov	ebp, [eax+4]
		add	ebx, ebp
		lea	ecx, [ebx+ecx-5B4115BCh]
		mov	ebx, [eax+10h]
		mov	[esp+4Ch+var_18], ebp
		rol	ecx, 4
		add	ecx, edi
		mov	ebp, esi
		xor	ebp, edi
		xor	ebp, ecx
		add	ebp, ebx
		mov	[esp+4Ch+var_C], ebx
		lea	ebx, [edx+ebp+4BDECFA9h]
		rol	ebx, 0Bh
		add	ebx, ecx
		mov	edx, ebx
		xor	edx, edi
		xor	edx, ecx
		add	edx, [eax+1Ch]
		lea	esi, [edx+esi-944B4A0h]
		rol	esi, 10h
		add	esi, ebx
		mov	edx, ebx
		xor	edx, esi
		mov	[esp+4Ch+var_3C], edx
		mov	ebp, edx
		mov	edx, [eax+28h]
		xor	ebp, ecx
		add	ebp, edx
		mov	[esp+4Ch+var_1C], edx
		lea	edx, [edi+ebp-41404390h]
		mov	ebp, [eax+34h]
		mov	edi, [esp+4Ch+var_3C]
		ror	edx, 9
		add	edx, esi
		xor	edi, edx
		add	edi, ebp
		lea	ecx, [edi+ecx+289B7EC6h]
		mov	edi, [eax]
		mov	[esp+4Ch+var_10], ebp
		mov	ebp, esi
		xor	ebp, edx
		rol	ecx, 4
		add	ecx, edx
		xor	ebp, ecx
		add	ebp, edi
		lea	ebx, [ebx+ebp-155ED806h]
		rol	ebx, 0Bh
		add	ebx, ecx
		mov	ebp, ebx
		xor	ebp, edx
		xor	ebp, ecx
		mov	[esp+4Ch+var_2C], edi
		mov	edi, [eax+0Ch]
		add	ebp, edi
		mov	[esp+4Ch+var_20], edi
		lea	edi, [esi+ebp-2B10CF7Bh]
		rol	edi, 10h
		add	edi, ebx
		mov	esi, ebx
		xor	esi, edi
		mov	ebp, esi
		mov	[esp+4Ch+var_3C], esi
		mov	esi, [eax+18h]
		xor	ebp, ecx
		add	ebp, esi
		mov	[esp+4Ch+var_14], esi
		mov	esi, [esp+4Ch+var_3C]
		lea	edx, [edx+ebp+4881D05h]
		mov	ebp, [eax+24h]
		ror	edx, 9
		add	edx, edi
		xor	esi, edx
		add	esi, ebp
		lea	ecx, [esi+ecx-262B2FC7h]
		rol	ecx, 4
		add	ecx, edx
		mov	esi, edi
		xor	esi, edx
		xor	esi, ecx
		mov	[esp+4Ch+var_4], ebp
		mov	ebp, [eax+30h]
		mov	eax, [eax+3Ch]
		add	esi, ebp
		lea	esi, [esi+ebx-1924661Bh]
		rol	esi, 0Bh
		add	esi, ecx
		mov	ebx, esi
		xor	ebx, edx
		xor	ebx, ecx
		add	ebx, eax
		lea	edi, [ebx+edi+1FA27CF8h]
		mov	ebx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_3C], eax
		rol	edi, 10h
		add	edi, esi
		mov	eax, esi
		xor	eax, edi
		xor	eax, ecx
		add	eax, ebx
		lea	edx, [eax+edx-3B53A99Bh]
		ror	edx, 9
		add	edx, edi
		mov	eax, esi
		not	eax
		or	eax, edx
		xor	eax, edi
		add	eax, [esp+4Ch+var_2C]
		lea	ecx, [eax+ecx-0BD6DDBCh]
		rol	ecx, 6
		add	ecx, edx
		mov	eax, edi
		not	eax
		or	eax, ecx
		xor	eax, edx
		add	eax, [esp+4Ch+var_38]
		lea	esi, [eax+esi+432AFF97h]
		rol	esi, 0Ah
		add	esi, ecx
		mov	eax, edx
		not	eax
		or	eax, esi
		xor	eax, ecx
		add	eax, [esp+4Ch+var_28]
		lea	edi, [eax+edi-546BDC59h]
		rol	edi, 0Fh
		add	edi, esi
		mov	eax, ecx
		not	eax
		or	eax, edi
		xor	eax, esi
		add	eax, [esp+4Ch+var_24]
		lea	edx, [eax+edx-36C5FC7h]
		ror	edx, 0Bh
		add	edx, edi
		mov	eax, esi
		not	eax
		or	eax, edx
		xor	eax, edi
		add	eax, ebp
		lea	ecx, [eax+ecx+655B59C3h]
		rol	ecx, 6
		add	ecx, edx
		mov	eax, edi
		not	eax
		or	eax, ecx
		xor	eax, edx
		add	eax, [esp+4Ch+var_20]
		lea	esi, [eax+esi-70F3336Eh]
		rol	esi, 0Ah
		add	esi, ecx
		mov	eax, edx
		not	eax
		or	eax, esi
		xor	eax, ecx
		add	eax, [esp+4Ch+var_1C]
		lea	edi, [eax+edi-100B83h]
		rol	edi, 0Fh
		add	edi, esi
		mov	eax, ecx
		not	eax
		or	eax, edi
		xor	eax, esi
		add	eax, [esp+4Ch+var_18]
		lea	edx, [eax+edx-7A7BA22Fh]
		ror	edx, 0Bh
		add	edx, edi
		mov	eax, esi
		not	eax
		or	eax, edx
		xor	eax, edi
		add	eax, [esp+4Ch+var_34]
		lea	ecx, [eax+ecx+6FA87E4Fh]
		rol	ecx, 6
		add	ecx, edx
		mov	eax, edi
		not	eax
		or	eax, ecx
		xor	eax, edx
		add	eax, [esp+4Ch+var_3C]
		lea	eax, [eax+esi-1D31920h]
		rol	eax, 0Ah
		add	eax, ecx
		mov	esi, edx
		not	esi
		or	esi, eax
		xor	esi, ecx
		add	esi, [esp+4Ch+var_14]
		lea	esi, [esi+edi-5CFEBCECh]
		rol	esi, 0Fh
		add	esi, eax
		mov	edi, ecx
		not	edi
		or	edi, esi
		xor	edi, eax
		add	edi, [esp+4Ch+var_10]
		lea	edx, [edi+edx+4E0811A1h]
		mov	edi, eax
		not	edi
		ror	edx, 0Bh
		add	edx, esi
		or	edi, edx
		xor	edi, esi
		add	edi, [esp+4Ch+var_C]
		lea	ecx, [edi+ecx-8AC817Eh]
		rol	ecx, 6
		add	ecx, edx
		mov	edi, esi
		not	edi
		or	edi, ecx
		xor	edi, edx
		add	edi, [esp+4Ch+var_8]
		lea	edi, [edi+eax-42C50DCBh]
		rol	edi, 0Ah
		add	edi, ecx
		mov	eax, edx
		not	eax
		or	eax, edi
		xor	eax, ecx
		add	eax, ebx
		lea	esi, [eax+esi+2AD7D2BBh]
		mov	eax, ecx
		rol	esi, 0Fh
		add	esi, edi
		not	eax
		or	eax, esi
		xor	eax, edi
		add	eax, [esp+4Ch+var_4]
		lea	edx, [eax+edx-14792C6Fh]
		mov	eax, [esp+4Ch+arg_0]
		mov	ebx, [eax+8]
		add	ebx, ecx
		mov	ecx, [eax+10h]
		ror	edx, 0Bh
		add	edx, [eax+0Ch]
		add	ecx, esi
		mov	[eax+10h], ecx
		mov	ecx, [eax+14h]
		add	edx, esi
		add	ecx, edi
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax+8], ebx
		mov	[eax+0Ch], edx
		mov	[eax+14h], ecx
		pop	ebx
		add	esp, 3Ch
		retn
sub_10003350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003A80(size_t Size,	void *Src, int)
sub_10003A80	proc near		; CODE XREF: sub_10003B30+58p
					; sub_10003CB0+4Cp ...

Size		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+Size]
		mov	eax, [ebp+0]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		push	edi
		mov	edi, eax
		add	eax, esi
		and	edi, 3Fh
		mov	[ebp+0], eax
		cmp	eax, esi
		jnb	short loc_10003AA0
		inc	dword ptr [ebp+4]

loc_10003AA0:				; CODE XREF: sub_10003A80+1Bj
		test	edi, edi
		jz	short loc_10003AF0
		mov	eax, 40h
		sub	eax, edi
		mov	[esp+10h+Size],	esi
		cmp	esi, eax
		jb	short loc_10003AB7
		mov	[esp+10h+Size],	eax

loc_10003AB7:				; CODE XREF: sub_10003A80+31j
		mov	eax, [esp+10h+Size]
		mov	ebx, [esp+10h+Src]
		push	eax		; Size
		lea	ecx, [edi+ebp+18h]
		push	ebx		; Src
		push	ecx		; Dst
		call	memcpy
		mov	eax, [esp+1Ch+Size]
		lea	edx, [eax+edi]
		add	esp, 0Ch
		cmp	edx, 40h
		jb	short loc_10003AEA
		lea	eax, [ebp+18h]
		push	ebp
		call	sub_10003350
		mov	eax, [esp+14h+Size]
		add	esp, 4

loc_10003AEA:				; CODE XREF: sub_10003A80+58j
		sub	esi, eax
		add	ebx, eax
		jmp	short loc_10003AF4
; ---------------------------------------------------------------------------

loc_10003AF0:				; CODE XREF: sub_10003A80+22j
		mov	ebx, [esp+10h+Src]

loc_10003AF4:				; CODE XREF: sub_10003A80+6Ej
		cmp	esi, 40h
		jb	short loc_10003B14
		mov	edi, esi
		shr	edi, 6
		mov	edi, edi

loc_10003B00:				; CODE XREF: sub_10003A80+92j
		push	ebp
		mov	eax, ebx
		call	sub_10003350
		add	esp, 4
		sub	esi, 40h
		add	ebx, 40h
		dec	edi
		jnz	short loc_10003B00

loc_10003B14:				; CODE XREF: sub_10003A80+77j
		test	esi, esi
		jz	short loc_10003B26
		push	esi		; Size
		push	ebx		; Src
		add	ebp, 18h
		push	ebp		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10003B26:				; CODE XREF: sub_10003A80+96j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10003A80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003B30(size_t Size,	int, int, int)
sub_10003B30	proc near		; CODE XREF: sub_10003CB0+5Ep
					; sub_10003D30+72p
					; DATA XREF: ...

Size		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+Size]
		mov	ebx, [esi]
		mov	eax, ebx
		and	eax, 3Fh
		cmp	[esp+8+arg_C], 10h
		jnb	short loc_10003B54
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003B54:				; CODE XREF: sub_10003B30+12j
		push	edi
		mov	edi, [esi+4]
		add	edi, edi
		mov	ecx, ebx
		add	edi, edi
		add	ebx, ebx
		add	edi, edi
		shr	ecx, 1Dh
		add	ebx, ebx
		or	edi, ecx
		add	ebx, ebx
		cmp	eax, 38h
		jnb	short loc_10003B7A
		mov	edx, 38h
		sub	edx, eax
		push	edx
		jmp	short loc_10003B82
; ---------------------------------------------------------------------------

loc_10003B7A:				; CODE XREF: sub_10003B30+3Ej
		mov	ecx, 78h
		sub	ecx, eax
		push	ecx		; int

loc_10003B82:				; CODE XREF: sub_10003B30+48j
		push	offset dword_10039630 ;	Src
		push	esi		; Size
		call	sub_10003A80
		add	esp, 0Ch
		lea	eax, [esi+18h]
		push	esi
		mov	[esi+50h], ebx
		mov	[esi+54h], edi
		call	sub_10003350
		mov	eax, [esp+10h+arg_8]
		add	esp, 4
		pop	edi
		test	eax, eax
		jz	short loc_10003BB1
		mov	dword ptr [eax], 10h

loc_10003BB1:				; CODE XREF: sub_10003B30+79j
		mov	edx, [esi+8]
		mov	eax, [esp+8+arg_4]
		mov	[eax], edx
		mov	ecx, [esi+0Ch]
		mov	[eax+4], ecx
		mov	edx, [esi+10h]
		mov	[eax+8], edx
		mov	ecx, [esi+14h]
		pop	esi
		mov	[eax+0Ch], ecx
		pop	ebx
		retn
sub_10003B30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003BD0	proc near		; DATA XREF: .rdata:10039C4Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 10h
		jnb	short loc_10003BE5
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_10003BE5:				; CODE XREF: sub_10003BD0+5j
		mov	eax, [esp+arg_0]
		mov	edx, [eax+8]
		mov	ecx, [esp+arg_4]
		push	esi
		mov	esi, [eax+0Ch]
		push	edi
		mov	edi, [eax+10h]
		mov	eax, [eax+14h]
		mov	[ecx], edx
		mov	[ecx+4], esi
		mov	[ecx+8], edi
		mov	[ecx+0Ch], eax
		mov	eax, [esp+8+arg_8]
		pop	edi
		pop	esi
		test	eax, eax
		jz	short locret_10003C16
		mov	dword ptr [eax], 10h

locret_10003C16:			; CODE XREF: sub_10003BD0+3Ej
		retn
sub_10003BD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003C20	proc near		; DATA XREF: .rdata:1003924Co
		mov	eax, 58h
		retn
sub_10003C20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003C30	proc near		; DATA XREF: .rdata:10039250o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	ecx, 16h
		rep movsd
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10003C30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003C50	proc near		; DATA XREF: .rdata:10039254o

arg_0		= dword	ptr  4

		push	58h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jnz	short loc_10003C6E
		push	0FFFFE890h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10003C6E:				; CODE XREF: sub_10003C50+Cj
		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	ecx, 16h
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10003C50	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003C80	proc near		; DATA XREF: .rdata:100393B8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, 16h
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10003C80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003CA0	proc near		; DATA XREF: .rdata:10039258o
					; .rdata:1003929Co

arg_0		= dword	ptr  4

		mov	[esp+arg_0], 0FFFFE898h
		jmp	PORT_SetError_Util
sub_10003CA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003CB0(int,	void *Src, int)
sub_10003CB0	proc near		; DATA XREF: .rdata:10039234o

var_60		= dword	ptr -60h
Size		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 60h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+60h+var_4], eax
		mov	eax, [esp+60h+Src]
		xor	ecx, ecx
		push	esi
		mov	esi, [esp+64h+arg_0]
		mov	[esp+64h+Size],	ecx
		mov	[esp+64h+var_58], ecx
		mov	ecx, [esp+64h+arg_8]
		push	ecx		; int
		push	eax		; Src
		lea	edx, [esp+6Ch+Size]
		push	edx		; Size
		mov	[esp+70h+var_54], 67452301h
		mov	[esp+70h+var_50], 0EFCDAB89h
		mov	[esp+70h+var_4C], 98BADCFEh
		mov	[esp+70h+var_48], 10325476h
		call	sub_10003A80
		push	10h		; int
		lea	eax, [esp+74h+var_60]
		push	eax		; int
		lea	ecx, [esp+78h+Size]
		push	esi		; int
		push	ecx		; Size
		call	sub_10003B30
		mov	ecx, [esp+80h+var_4]
		add	esp, 1Ch
		pop	esi
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
sub_10003CB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003D30(int,	void *Src)
sub_10003D30	proc near		; DATA XREF: .rdata:10039230o

var_60		= dword	ptr -60h
Size		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8

		sub	esp, 60h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+60h+var_4], eax
		mov	edx, [esp+60h+Src]
		push	esi
		mov	esi, [esp+64h+arg_0]
		mov	eax, edx
		push	edi
		lea	edi, [eax+1]
		lea	ecx, [ecx+0]

loc_10003D50:				; CODE XREF: sub_10003D30+25j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10003D50
		sub	eax, edi
		push	eax		; int
		push	edx		; Src
		lea	eax, [esp+70h+Size]
		push	eax		; Size
		mov	[esp+74h+Size],	0
		mov	[esp+74h+var_58], 0
		mov	[esp+74h+var_54], 67452301h
		mov	[esp+74h+var_50], 0EFCDAB89h
		mov	[esp+74h+var_4C], 98BADCFEh
		mov	[esp+74h+var_48], 10325476h
		call	sub_10003A80
		push	10h		; int
		lea	ecx, [esp+78h+var_60]
		push	ecx		; int
		lea	edx, [esp+7Ch+Size]
		push	esi		; int
		push	edx		; Size
		call	sub_10003B30
		mov	ecx, [esp+84h+var_4]
		add	esp, 1Ch
		pop	edi
		pop	esi
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
sub_10003D30	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003DC0	proc near		; DATA XREF: .rdata:100392D4o
					; .rdata:10039468o ...
		push	128h
		call	PORT_Alloc_Util
		add	esp, 4
		retn
sub_10003DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003DD0(void	*Dst, int)
sub_10003DD0	proc near		; DATA XREF: .rdata:100392D8o
					; .rdata:1003946Co ...

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		push	128h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_10003DF5
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10003DF5:				; CODE XREF: sub_10003DD0+1Aj
		pop	esi
		retn
sub_10003DD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10003E00(void	*Dst)
sub_10003E00	proc near		; CODE XREF: sub_1000BA90+45p
					; sub_1000BD00+45p ...

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	edi
		push	128h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		lea	edi, [esi+100h]
		add	esp, 0Ch
		mov	ecx, 8
		mov	esi, offset dword_10039898
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10003E00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003E30	proc near		; CODE XREF: sub_100065B0+63p
					; sub_100065B0+97p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 58h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ecx, [eax]
		bswap	ecx
		mov	[esp+68h+var_34], ecx
		mov	[eax], ecx
		mov	ecx, [eax+0Ch]
		bswap	ecx
		mov	[esp+68h+var_58], ecx
		mov	[eax+0Ch], ecx
		mov	ecx, [eax+10h]
		bswap	ecx
		mov	[esp+68h+var_20], ecx
		mov	[eax+10h], ecx
		mov	ecx, [eax+14h]
		bswap	ecx
		mov	[esp+68h+var_1C], ecx
		mov	[eax+14h], ecx
		mov	ecx, [eax+18h]
		bswap	ecx
		mov	[esp+68h+var_18], ecx
		mov	[eax+18h], ecx
		mov	ecx, [eax+1Ch]
		bswap	ecx
		mov	[esp+68h+var_14], ecx
		mov	[eax+1Ch], ecx
		mov	ecx, [eax+20h]
		bswap	ecx
		mov	[esp+68h+var_10], ecx
		mov	[eax+20h], ecx
		mov	ecx, [eax+24h]
		bswap	ecx
		mov	[esp+68h+var_3C], ecx
		mov	[eax+24h], ecx
		mov	ecx, [eax+28h]
		bswap	ecx
		mov	edx, [eax+3Ch]
		mov	[esp+68h+var_30], ecx
		mov	[eax+28h], ecx
		mov	ecx, [eax+2Ch]
		bswap	ecx
		mov	[esp+68h+var_2C], ecx
		mov	[eax+2Ch], ecx
		mov	ecx, [eax+30h]
		mov	esi, [eax+8]
		mov	edi, [eax+4]
		bswap	edi
		bswap	ecx
		mov	[esp+68h+var_28], ecx
		mov	[eax+30h], ecx
		mov	ecx, [eax+34h]
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		bswap	ecx
		ror	ebp, 7
		xor	ebx, ebp
		mov	[esp+68h+var_40], edi
		mov	[eax+4], edi
		shr	edi, 3
		mov	[esp+68h+var_24], ecx
		mov	[eax+34h], ecx
		mov	ecx, [eax+38h]
		bswap	ecx
		xor	ebx, edi
		mov	edi, ecx
		ror	edi, 13h
		mov	ebp, ecx
		ror	ebp, 11h
		bswap	esi
		bswap	edx
		xor	edi, ebp
		mov	[esp+68h+var_54], esi
		mov	[eax+8], esi
		mov	[esp+68h+var_C], ecx
		mov	[eax+38h], ecx
		mov	[esp+68h+var_8], edx
		mov	[eax+3Ch], edx
		mov	ebp, ecx
		add	ebx, [esp+68h+var_3C]
		shr	ebp, 0Ah
		xor	edi, ebp
		add	edi, ebx
		add	edi, [esp+68h+var_34]
		mov	ebx, esi
		mov	[eax+40h], edi
		mov	edi, esi
		ror	edi, 12h
		ror	ebx, 7
		xor	edi, ebx
		mov	ebx, esi
		shr	ebx, 3
		xor	edi, ebx
		add	edi, [esp+68h+var_30]
		mov	ebx, edx
		ror	ebx, 13h
		mov	ebp, edx
		ror	ebp, 11h
		xor	ebx, ebp
		mov	ebp, edx
		shr	ebp, 0Ah
		xor	ebx, ebp
		add	ebx, edi
		add	ebx, [esp+68h+var_40]
		mov	edi, [esp+68h+var_58]
		mov	ebp, edi
		mov	[eax+44h], ebx
		mov	ebx, edi
		shr	edi, 3
		ror	ebx, 12h
		ror	ebp, 7
		xor	ebx, ebp
		xor	ebx, edi
		add	ebx, [esp+68h+var_2C]
		mov	edi, [eax+40h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+40h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [esp+68h+var_20]
		add	ebp, ebx
		add	ebp, esi
		mov	esi, [eax+44h]
		mov	[eax+48h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		shr	edi, 3
		ror	ebp, 7
		xor	ebx, ebp
		xor	ebx, edi
		add	ebx, [esp+68h+var_28]
		mov	edi, esi
		ror	edi, 13h
		mov	ebp, esi
		ror	ebp, 11h
		xor	edi, ebp
		mov	ebp, esi
		shr	ebp, 0Ah
		xor	edi, ebp
		add	edi, ebx
		add	edi, [esp+68h+var_58]
		mov	[eax+4Ch], edi
		mov	edi, [esp+68h+var_1C]
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		shr	edi, 3
		xor	ebx, ebp
		xor	ebx, edi
		mov	edi, [eax+48h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+48h]
		add	ebx, [esp+68h+var_24]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		add	ebp, [esp+68h+var_20]
		mov	edi, [esp+68h+var_18]
		mov	[eax+50h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+4Ch]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+4Ch]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [esp+68h+var_14]
		add	ebx, ecx
		add	ebp, ebx
		add	ebp, [esp+68h+var_1C]
		mov	ebx, edi
		mov	[eax+54h], ebp
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+50h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+50h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [esp+68h+var_10]
		add	ebx, edx
		add	ebp, ebx
		add	ebp, [esp+68h+var_18]
		mov	ebx, edi
		mov	[eax+58h], ebp
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+54h]
		add	ebx, [eax+40h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+54h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [esp+68h+var_3C]
		add	ebp, ebx
		add	ebp, [esp+68h+var_14]
		mov	ebx, edi
		mov	[eax+5Ch], ebp
		mov	ebp, edi
		ror	ebx, 12h
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+58h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+58h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebx, esi
		add	ebp, ebx
		add	ebp, [esp+68h+var_10]
		mov	edi, [esp+68h+var_30]
		mov	[eax+60h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+48h]
		mov	edi, [eax+5Ch]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+5Ch]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		add	ebp, [esp+68h+var_3C]
		mov	edi, [esp+68h+var_2C]
		mov	[eax+64h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+4Ch]
		mov	edi, [eax+60h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+60h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [esp+68h+var_28]
		add	ebp, ebx
		add	ebp, [esp+68h+var_30]
		mov	ebx, edi
		mov	[eax+68h], ebp
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+64h]
		add	ebx, [eax+50h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+64h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [esp+68h+var_24]
		add	ebp, ebx
		add	ebp, [esp+68h+var_2C]
		mov	ebx, edi
		mov	[eax+6Ch], ebp
		mov	ebp, edi
		ror	ebx, 12h
		ror	ebp, 7
		shr	edi, 3
		xor	ebx, ebp
		xor	ebx, edi
		mov	edi, [eax+68h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+68h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebx, [eax+54h]
		mov	edi, [eax+6Ch]
		add	ebp, ebx
		add	ebp, [esp+68h+var_28]
		mov	ebx, ecx
		mov	[eax+70h], ebp
		ror	ebx, 12h
		mov	ebp, ecx
		ror	ebp, 7
		xor	ebx, ebp
		mov	ebp, ecx
		shr	ebp, 3
		xor	ebx, ebp
		add	ebx, [eax+58h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+6Ch]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		add	ebp, [esp+68h+var_24]
		mov	edi, [eax+70h]
		mov	[eax+74h], ebp
		mov	ebx, edx
		ror	ebx, 12h
		mov	ebp, edx
		ror	ebp, 7
		xor	ebx, ebp
		mov	ebp, edx
		shr	ebp, 3
		xor	ebx, ebp
		add	ebx, [eax+5Ch]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+70h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+40h]
		add	ebp, ebx
		add	ebp, ecx
		mov	ecx, [eax+74h]
		mov	ebx, edi
		ror	ebx, 12h
		mov	[eax+78h], ebp
		mov	ebp, edi
		shr	edi, 3
		ror	ebp, 7
		xor	ebx, ebp
		xor	ebx, edi
		add	ebx, [eax+60h]
		mov	edi, ecx
		ror	edi, 13h
		mov	ebp, ecx
		ror	ebp, 11h
		xor	edi, ebp
		mov	ebp, ecx
		shr	ebp, 0Ah
		xor	edi, ebp
		add	edi, ebx
		add	edi, edx
		mov	edx, [eax+78h]
		mov	[eax+7Ch], edi
		mov	edi, esi
		ror	edi, 12h
		mov	ebx, esi
		ror	ebx, 7
		xor	edi, ebx
		mov	ebx, esi
		shr	ebx, 3
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 13h
		mov	ebp, edx
		ror	ebp, 11h
		xor	ebx, ebp
		mov	ebp, edx
		shr	ebp, 0Ah
		add	edi, [eax+64h]
		xor	ebx, ebp
		add	ebx, edi
		add	ebx, [eax+40h]
		mov	edi, [eax+48h]
		mov	ebp, edi
		mov	[eax+80h], ebx
		mov	ebx, edi
		shr	edi, 3
		ror	ebx, 12h
		ror	ebp, 7
		xor	ebx, ebp
		xor	ebx, edi
		add	ebx, [eax+68h]
		mov	edi, [eax+7Ch]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+7Ch]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		mov	edi, [eax+4Ch]
		add	ebp, esi
		mov	esi, [eax+80h]
		mov	[eax+84h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+6Ch]
		mov	edi, esi
		ror	edi, 13h
		mov	ebp, esi
		ror	ebp, 11h
		xor	edi, ebp
		mov	ebp, esi
		shr	ebp, 0Ah
		xor	edi, ebp
		add	edi, ebx
		add	edi, [eax+48h]
		mov	[eax+88h], edi
		mov	edi, [eax+50h]
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+84h]
		add	ebx, [eax+70h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+84h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+54h]
		add	ebp, ebx
		add	ebp, [eax+4Ch]
		mov	ebx, edi
		mov	[eax+8Ch], ebp
		mov	ebp, edi
		ror	ebx, 12h
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+88h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+88h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebx, ecx
		add	ebp, ebx
		add	ebp, [eax+50h]
		mov	edi, [eax+58h]
		mov	[eax+90h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+8Ch]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+8Ch]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+5Ch]
		add	ebx, edx
		add	ebp, ebx
		add	ebp, [eax+54h]
		mov	ebx, edi
		mov	[eax+94h], ebp
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+7Ch]
		mov	edi, [eax+90h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+90h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+60h]
		add	ebp, ebx
		add	ebp, [eax+58h]
		mov	ebx, edi
		mov	[eax+98h], ebp
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+94h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+94h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+64h]
		add	ebx, esi
		add	ebp, ebx
		add	ebp, [eax+5Ch]
		mov	ebx, edi
		mov	[eax+9Ch], ebp
		mov	ebp, edi
		ror	ebx, 12h
		ror	ebp, 7
		shr	edi, 3
		xor	ebx, ebp
		xor	ebx, edi
		mov	edi, [eax+98h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+98h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebx, [eax+84h]
		mov	edi, [eax+68h]
		add	ebp, ebx
		add	ebp, [eax+60h]
		mov	ebx, edi
		mov	[eax+0A0h], ebp
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+88h]
		mov	edi, [eax+9Ch]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+9Ch]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		add	ebp, [eax+64h]
		mov	edi, [eax+6Ch]
		mov	[eax+0A4h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+8Ch]
		mov	edi, [eax+0A0h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0A0h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+70h]
		add	ebp, ebx
		add	ebp, [eax+68h]
		mov	ebx, edi
		mov	[eax+0A8h], ebp
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+0A4h]
		add	ebx, [eax+90h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0A4h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+0A8h]
		add	ebp, ebx
		add	ebp, [eax+6Ch]
		mov	ebx, ecx
		mov	[eax+0ACh], ebp
		ror	ebx, 12h
		mov	ebp, ecx
		ror	ebp, 7
		xor	ebx, ebp
		mov	ebp, ecx
		shr	ebp, 3
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0A8h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebx, [eax+94h]
		add	ebp, ebx
		add	ebp, [eax+70h]
		mov	edi, [eax+0ACh]
		mov	[eax+0B0h], ebp
		mov	ebx, edx
		ror	ebx, 12h
		mov	ebp, edx
		ror	ebp, 7
		xor	ebx, ebp
		mov	ebp, edx
		shr	ebp, 3
		xor	ebx, ebp
		add	ebx, [eax+98h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0ACh]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		mov	edi, [eax+7Ch]
		add	ebp, ecx
		mov	ecx, [eax+0B0h]
		mov	ebx, edi
		ror	ebx, 12h
		mov	[eax+0B4h], ebp
		mov	ebp, edi
		shr	edi, 3
		ror	ebp, 7
		xor	ebx, ebp
		xor	ebx, edi
		add	ebx, [eax+9Ch]
		mov	edi, ecx
		ror	edi, 13h
		mov	ebp, ecx
		ror	ebp, 11h
		xor	edi, ebp
		mov	ebp, ecx
		shr	ebp, 0Ah
		xor	edi, ebp
		add	edi, ebx
		add	edi, edx
		mov	edx, [eax+0B4h]
		mov	[eax+0B8h], edi
		mov	edi, esi
		ror	edi, 12h
		mov	ebx, esi
		ror	ebx, 7
		xor	edi, ebx
		mov	ebx, esi
		shr	ebx, 3
		xor	edi, ebx
		add	edi, [eax+0A0h]
		mov	ebx, edx
		ror	ebx, 13h
		mov	ebp, edx
		ror	ebp, 11h
		xor	ebx, ebp
		mov	ebp, edx
		shr	ebp, 0Ah
		xor	ebx, ebp
		add	ebx, edi
		add	ebx, [eax+7Ch]
		mov	edi, [eax+84h]
		mov	[eax+0BCh], ebx
		mov	ebx, edi
		mov	ebp, edi
		ror	ebx, 12h
		ror	ebp, 7
		shr	edi, 3
		xor	ebx, ebp
		xor	ebx, edi
		mov	edi, [eax+0B8h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0B8h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebx, [eax+0A4h]
		mov	edi, [eax+88h]
		add	ebp, ebx
		add	ebp, esi
		mov	[eax+0C0h], ebp
		mov	esi, [eax+0BCh]
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+0A8h]
		mov	edi, esi
		ror	edi, 13h
		mov	ebp, esi
		ror	ebp, 11h
		xor	edi, ebp
		mov	ebp, esi
		shr	ebp, 0Ah
		xor	edi, ebp
		add	edi, ebx
		add	edi, [eax+84h]
		mov	[eax+0C4h], edi
		mov	edi, [eax+8Ch]
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+0ACh]
		mov	edi, [eax+0C0h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0C0h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+90h]
		add	ebp, ebx
		add	ebp, [eax+88h]
		mov	ebx, edi
		mov	[eax+0C8h], ebp
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+0C4h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0C4h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+94h]
		add	ebx, ecx
		add	ebp, ebx
		add	ebp, [eax+8Ch]
		mov	ebx, edi
		mov	[eax+0CCh], ebp
		mov	ebp, edi
		ror	ebx, 12h
		ror	ebp, 7
		shr	edi, 3
		xor	ebx, ebp
		xor	ebx, edi
		mov	edi, [eax+0C8h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0C8h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebx, edx
		add	ebp, ebx
		add	ebp, [eax+90h]
		mov	edi, [eax+98h]
		mov	[eax+0D0h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+0B8h]
		mov	edi, [eax+0CCh]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0CCh]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		add	ebp, [eax+94h]
		mov	edi, [eax+9Ch]
		mov	[eax+0D4h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+0D0h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0D0h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+0A0h]
		add	ebx, esi
		add	ebp, ebx
		add	ebp, [eax+98h]
		mov	ebx, edi
		mov	[eax+0D8h], ebp
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+0D4h]
		add	ebx, [eax+0C0h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0D4h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+0A4h]
		add	ebp, ebx
		add	ebp, [eax+9Ch]
		mov	ebx, edi
		mov	[eax+0DCh], ebp
		mov	ebp, edi
		ror	ebx, 12h
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		mov	edi, [eax+0D8h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0D8h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebx, [eax+0C4h]
		add	ebp, ebx
		add	ebp, [eax+0A0h]
		mov	edi, [eax+0A8h]
		mov	[eax+0E0h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+0C8h]
		mov	edi, [eax+0DCh]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0DCh]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		add	ebp, [eax+0A4h]
		mov	edi, [eax+0ACh]
		mov	[eax+0E4h], ebp
		mov	ebx, edi
		ror	ebx, 12h
		mov	ebp, edi
		ror	ebp, 7
		xor	ebx, ebp
		shr	edi, 3
		xor	ebx, edi
		add	ebx, [eax+0CCh]
		mov	edi, [eax+0E0h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0E0h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		add	ebp, [eax+0A8h]
		mov	edi, [eax+0E4h]
		mov	[eax+0E8h], ebp
		mov	ebx, ecx
		ror	ebx, 12h
		mov	ebp, ecx
		ror	ebp, 7
		xor	ebx, ebp
		mov	ebp, ecx
		shr	ebp, 3
		xor	ebx, ebp
		add	ebx, [eax+0D0h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0E4h]
		shr	edi, 0Ah
		xor	ebp, edi
		mov	edi, [eax+0E8h]
		add	ebp, ebx
		add	ebp, [eax+0ACh]
		mov	ebx, edx
		mov	[eax+0ECh], ebp
		ror	ebx, 12h
		mov	ebp, edx
		ror	ebp, 7
		xor	ebx, ebp
		mov	ebp, edx
		shr	ebp, 3
		xor	ebx, ebp
		add	ebx, [eax+0D4h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0E8h]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		add	ebp, ecx
		mov	ecx, [eax+0B8h]
		mov	edi, [eax+0ECh]
		mov	[eax+0F0h], ebp
		mov	ebx, ecx
		ror	ebx, 12h
		mov	ebp, ecx
		ror	ebp, 7
		xor	ebx, ebp
		mov	ebp, ecx
		shr	ebp, 3
		xor	ebx, ebp
		add	ebx, [eax+0D8h]
		mov	ebp, edi
		ror	ebp, 13h
		ror	edi, 11h
		xor	ebp, edi
		mov	edi, [eax+0ECh]
		shr	edi, 0Ah
		xor	ebp, edi
		add	ebp, ebx
		add	ebp, edx
		mov	edx, [eax+0F0h]
		mov	edi, esi
		ror	edi, 12h
		mov	ebx, esi
		ror	ebx, 7
		xor	edi, ebx
		mov	[eax+0F4h], ebp
		mov	ebx, esi
		shr	ebx, 3
		xor	edi, ebx
		add	edi, [eax+0DCh]
		mov	ebx, edx
		ror	ebx, 13h
		mov	ebp, edx
		ror	ebp, 11h
		xor	ebx, ebp
		shr	edx, 0Ah
		xor	ebx, edx
		mov	edx, [eax+0F4h]
		add	ebx, edi
		add	ebx, ecx
		mov	ecx, [eax+0C0h]
		mov	[eax+0F8h], ebx
		mov	edi, ecx
		ror	edi, 12h
		mov	ebx, ecx
		ror	ebx, 7
		xor	edi, ebx
		shr	ecx, 3
		xor	edi, ecx
		add	edi, [eax+0E0h]
		mov	ecx, edx
		ror	ecx, 13h
		mov	ebx, edx
		ror	ebx, 11h
		xor	ecx, ebx
		shr	edx, 0Ah
		xor	ecx, edx
		mov	edx, [eax+100h]
		add	ecx, edi
		mov	edi, [eax+114h]
		add	esi, ecx
		mov	ecx, [eax+110h]
		mov	ebx, ecx
		ror	ebx, 19h
		mov	ebp, ecx
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, ecx
		ror	ebp, 6
		xor	ebx, ebp
		mov	ebp, ecx
		not	ebp
		and	ebp, [eax+118h]
		mov	[esp+68h+var_4], esi
		mov	[eax+0FCh], esi
		mov	esi, [eax+104h]
		mov	[esp+68h+var_48], edx
		mov	edx, [eax+108h]
		add	ebx, [eax+11Ch]
		and	edi, ecx
		xor	ebp, edi
		add	ebp, ebx
		mov	edi, [esp+68h+var_34]
		lea	edi, [edi+ebp+428A2F98h]
		mov	ebx, [eax+10Ch]
		add	ebx, edi
		mov	[esp+68h+var_4C], ebx
		mov	[esp+68h+var_50], edi
		mov	edi, [esp+68h+var_48]
		mov	ebp, edi
		mov	ebx, esi
		xor	ebx, edi
		mov	[esp+68h+var_34], ebx
		mov	ebx, esi
		and	ebx, edi
		mov	[esp+68h+var_38], ebx
		mov	ebx, edi
		ror	ebx, 16h
		ror	ebp, 0Dh
		xor	ebx, ebp
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_34]
		and	edi, edx
		xor	edi, [esp+68h+var_38]
		add	edi, [esp+68h+var_50]
		add	edi, ebx
		mov	[esp+68h+var_50], edi
		mov	edi, [esp+68h+var_4C]
		mov	ebx, edi
		ror	ebx, 19h
		mov	ebp, edi
		ror	ebp, 0Bh
		xor	ebx, ebp
		and	ecx, edi
		mov	ebp, edi
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [esp+68h+var_40]
		mov	ebp, edi
		mov	edi, [esp+68h+var_50]
		not	ebp
		and	ebp, [eax+114h]
		xor	ebp, ecx
		mov	ecx, [eax+118h]
		add	ebp, ebx
		lea	ebx, [ecx+ebp+71374491h]
		add	edx, ebx
		mov	ebp, edi
		ror	ebp, 16h
		mov	ecx, edi
		ror	ecx, 0Dh
		xor	ebp, ecx
		mov	ecx, edi
		ror	ecx, 2
		xor	ebp, ecx
		mov	ecx, [esp+68h+var_34]
		and	ecx, edi
		xor	ecx, [esp+68h+var_38]
		mov	edi, edx
		add	ecx, ebx
		add	ecx, ebp
		mov	ebp, [esp+68h+var_4C]
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_54]
		mov	ebx, edx
		not	ebx
		and	ebx, [eax+110h]
		and	ebp, edx
		xor	ebx, ebp
		mov	[esp+68h+var_44], edx
		mov	edx, [eax+114h]
		add	ebx, edi
		lea	edx, [edx+ebx-4A3F0431h]
		add	esi, edx
		mov	[esp+68h+var_40], edx
		mov	edi, ecx
		ror	edi, 16h
		mov	edx, ecx
		ror	edx, 0Dh
		xor	edi, edx
		mov	edx, ecx
		ror	edx, 2
		xor	edi, edx
		mov	edx, [esp+68h+var_48]
		mov	ebp, [esp+68h+var_44]
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, [esp+68h+var_50]
		and	edx, ecx
		xor	edx, ebx
		add	edx, [esp+68h+var_40]
		and	ebp, esi
		add	edx, edi
		mov	edi, esi
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_58]
		mov	ebx, esi
		not	ebx
		and	ebx, [esp+68h+var_4C]
		mov	[esp+68h+var_54], esi
		xor	ebx, ebp
		add	ebx, edi
		mov	edi, [eax+110h]
		lea	edi, [edi+ebx-164A245Bh]
		add	[esp+68h+var_48], edi
		mov	[esp+68h+var_58], edi
		mov	edi, edx
		ror	edi, 16h
		mov	ebx, edx
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, [esp+68h+var_50]
		mov	ebp, ecx
		and	ebp, edx
		xor	ebx, ebp
		add	ebx, [esp+68h+var_58]
		add	ebx, edi
		mov	edi, [esp+68h+var_48]
		mov	[esp+68h+var_58], ebx
		mov	ebx, edi
		ror	ebx, 19h
		mov	ebp, edi
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [esp+68h+var_20]
		mov	ebp, edi
		not	ebp
		and	ebp, [esp+68h+var_44]
		and	esi, edi
		xor	ebp, esi
		mov	esi, [esp+68h+var_4C]
		add	ebp, ebx
		lea	esi, [esi+ebp+3956C25Bh]
		add	[esp+68h+var_50], esi
		mov	[esp+68h+var_4C], esi
		mov	esi, [esp+68h+var_58]
		mov	edi, esi
		ror	edi, 16h
		mov	ebx, esi
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, edx
		xor	ebx, esi
		and	ebx, ecx
		mov	ebp, edx
		and	ebp, esi
		xor	ebx, ebp
		add	ebx, [esp+68h+var_4C]
		mov	esi, [esp+68h+var_50]
		add	ebx, edi
		mov	[esp+68h+var_4C], ebx
		mov	edi, esi
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_1C]
		mov	ebx, esi
		and	esi, [esp+68h+var_48]
		not	ebx
		and	ebx, [esp+68h+var_54]
		xor	ebx, esi
		add	ebx, edi
		mov	esi, [esp+68h+var_44]
		lea	esi, [esi+ebx+59F111F1h]
		add	ecx, esi
		mov	[esp+68h+var_44], esi
		mov	esi, [esp+68h+var_4C]
		mov	ebx, esi
		ror	ebx, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_58]
		mov	ebp, edi
		and	edi, esi
		xor	ebp, esi
		and	ebp, edx
		xor	ebp, edi
		add	ebp, [esp+68h+var_44]
		mov	edi, ecx
		lea	esi, [ebx+ebp]
		mov	ebp, [esp+68h+var_50]
		ror	edi, 19h
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, ecx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_18]
		mov	ebx, ecx
		not	ebx
		and	ebx, [esp+68h+var_48]
		and	ebp, ecx
		xor	ebx, ebp
		add	ebx, edi
		mov	edi, [esp+68h+var_54]
		lea	edi, [edi+ebx-6DC07D5Ch]
		add	edx, edi
		mov	[esp+68h+var_54], edi
		mov	ebx, esi
		ror	ebx, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_4C]
		mov	[esp+68h+var_44], esi
		mov	ebp, edi
		xor	ebp, esi
		and	ebp, [esp+68h+var_58]
		and	edi, esi
		xor	ebp, edi
		add	ebp, [esp+68h+var_54]
		mov	edi, edx
		add	ebp, ebx
		ror	edi, 19h
		mov	[esp+68h+var_54], ebp
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_14]
		mov	ebx, edx
		not	ebx
		and	ebx, [esp+68h+var_50]
		mov	ebp, ecx
		and	ebp, edx
		xor	ebx, ebp
		add	ebx, edi
		mov	edi, [esp+68h+var_48]
		lea	edi, [edi+ebx-54E3A12Bh]
		add	[esp+68h+var_58], edi
		mov	[esp+68h+var_48], edi
		mov	edi, [esp+68h+var_54]
		mov	ebx, edi
		ror	ebx, 16h
		mov	ebp, edi
		ror	ebp, 0Dh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 2
		xor	ebx, ebp
		mov	ebp, esi
		xor	ebp, edi
		and	ebp, [esp+68h+var_4C]
		and	esi, edi
		xor	ebp, esi
		add	ebp, [esp+68h+var_48]
		mov	esi, [esp+68h+var_58]
		add	ebp, ebx
		mov	edi, esi
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	[esp+68h+var_48], ebp
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_10]
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ebp, edx
		and	ebp, esi
		xor	ebx, ebp
		mov	ebp, [esp+68h+var_54]
		add	ebx, edi
		mov	edi, [esp+68h+var_50]
		lea	edi, [edi+ebx-27F85568h]
		add	[esp+68h+var_4C], edi
		mov	[esp+68h+var_50], edi
		mov	edi, [esp+68h+var_48]
		mov	ebx, ebp
		xor	ebx, edi
		and	ebp, edi
		mov	[esp+68h+var_34], ebx
		mov	ebx, edi
		mov	[esp+68h+var_38], ebp
		ror	ebx, 16h
		mov	ebp, edi
		ror	ebp, 0Dh
		xor	ebx, ebp
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_34]
		and	edi, [esp+68h+var_44]
		xor	edi, [esp+68h+var_38]
		add	edi, [esp+68h+var_50]
		add	edi, ebx
		mov	[esp+68h+var_50], edi
		mov	edi, [esp+68h+var_4C]
		mov	ebx, edi
		ror	ebx, 19h
		mov	ebp, edi
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [esp+68h+var_3C]
		and	esi, edi
		mov	ebp, edi
		not	ebp
		and	ebp, edx
		xor	ebp, esi
		mov	esi, [esp+68h+var_50]
		add	ebp, ebx
		mov	ebx, [esp+68h+var_44]
		lea	ecx, [ecx+ebp+12835B01h]
		add	ebx, ecx
		mov	ebp, esi
		ror	ebp, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebp, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebp, edi
		mov	edi, [esp+68h+var_34]
		and	edi, esi
		xor	edi, [esp+68h+var_38]
		mov	[esp+68h+var_44], ebx
		add	ecx, edi
		add	ecx, ebp
		mov	edi, ebx
		ror	edi, 19h
		mov	ebp, ebx
		ror	ebp, 0Bh
		xor	edi, ebp
		mov	ebp, ebx
		ror	ebp, 6
		xor	edi, ebp
		add	edi, [esp+68h+var_30]
		mov	ebp, [esp+68h+var_4C]
		and	ebp, [esp+68h+var_44]
		not	ebx
		and	ebx, [esp+68h+var_58]
		xor	ebx, ebp
		add	ebx, edi
		lea	edx, [edx+ebx+243185BEh]
		add	[esp+68h+var_54], edx
		mov	[esp+68h+var_40], edx
		mov	edi, ecx
		ror	edi, 16h
		mov	edx, ecx
		ror	edx, 0Dh
		xor	edi, edx
		mov	edx, ecx
		ror	edx, 2
		xor	edi, edx
		mov	edx, [esp+68h+var_48]
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, esi
		mov	ebp, ecx
		and	ebp, edx
		mov	edx, [esp+68h+var_54]
		xor	ebx, ebp
		add	ebx, [esp+68h+var_40]
		add	ebx, edi
		mov	[esp+68h+var_40], ebx
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebp, [esp+68h+var_44]
		and	ebp, edx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_2C]
		mov	ebx, edx
		mov	edx, [esp+68h+var_58]
		not	ebx
		and	ebx, [esp+68h+var_4C]
		xor	ebx, ebp
		add	ebx, edi
		lea	edx, [edx+ebx+550C7DC3h]
		add	[esp+68h+var_48], edx
		mov	[esp+68h+var_58], edx
		mov	edx, [esp+68h+var_40]
		mov	edi, edx
		ror	edi, 16h
		mov	ebx, edx
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, esi
		mov	ebp, ecx
		and	ebp, edx
		mov	edx, [esp+68h+var_48]
		xor	ebx, ebp
		add	ebx, [esp+68h+var_58]
		mov	ebp, [esp+68h+var_54]
		add	ebx, edi
		mov	[esp+68h+var_58], ebx
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		and	ebp, edx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_28]
		mov	ebx, edx
		mov	edx, [esp+68h+var_4C]
		not	ebx
		and	ebx, [esp+68h+var_44]
		xor	ebx, ebp
		add	ebx, edi
		lea	edx, [edx+ebx+72BE5D74h]
		add	esi, edx
		mov	[esp+68h+var_4C], edx
		mov	edx, [esp+68h+var_58]
		mov	ebx, edx
		ror	ebx, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, edx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_40]
		mov	ebp, edi
		xor	ebp, edx
		and	edi, edx
		and	ebp, ecx
		xor	ebp, edi
		add	ebp, [esp+68h+var_4C]
		mov	edx, esi
		add	ebp, ebx
		ror	edx, 19h
		mov	edi, esi
		ror	edi, 0Bh
		xor	edx, edi
		mov	edi, esi
		ror	edi, 6
		xor	edx, edi
		mov	[esp+68h+var_4C], ebp
		mov	edi, esi
		add	edx, [esp+68h+var_24]
		not	edi
		and	edi, [esp+68h+var_54]
		mov	ebx, esi
		and	ebx, [esp+68h+var_48]
		xor	edi, ebx
		add	edi, edx
		mov	edx, [esp+68h+var_44]
		lea	edx, [edx+edi-7F214E02h]
		add	ecx, edx
		mov	[esp+68h+var_44], edx
		mov	edx, ebp
		mov	ebx, edx
		ror	ebx, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, edx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_58]
		mov	ebp, edi
		xor	ebp, edx
		and	ebp, [esp+68h+var_40]
		and	edi, edx
		xor	ebp, edi
		add	ebp, [esp+68h+var_44]
		mov	edi, ecx
		add	ebp, ebx
		ror	edi, 19h
		mov	[esp+68h+var_44], ebp
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, ecx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_C]
		mov	ebx, ecx
		not	ebx
		and	ebx, [esp+68h+var_48]
		mov	ebp, esi
		and	ebp, ecx
		xor	ebx, ebp
		add	ebx, edi
		mov	edi, [esp+68h+var_54]
		lea	edi, [edi+ebx-6423F959h]
		add	[esp+68h+var_40], edi
		mov	[esp+68h+var_54], edi
		mov	edi, [esp+68h+var_44]
		mov	ebx, edi
		ror	ebx, 16h
		mov	ebp, edi
		ror	ebp, 0Dh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 2
		xor	ebx, ebp
		mov	ebp, edx
		xor	ebp, edi
		and	ebp, [esp+68h+var_58]
		and	edx, edi
		xor	ebp, edx
		add	ebp, [esp+68h+var_54]
		mov	edx, [esp+68h+var_40]
		add	ebp, ebx
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		mov	[esp+68h+var_54], ebp
		mov	ebx, edx
		not	ebx
		mov	ebp, ecx
		and	ebx, esi
		and	ebp, edx
		xor	ebx, ebp
		add	edi, [esp+68h+var_8]
		mov	edx, [esp+68h+var_48]
		add	ebx, edi
		lea	edx, [edx+ebx-3E640E8Ch]
		add	[esp+68h+var_58], edx
		mov	[esp+68h+var_48], edx
		mov	edx, [esp+68h+var_54]
		mov	ebx, edx
		ror	ebx, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, edx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_44]
		mov	ebp, edi
		xor	ebp, edx
		and	ebp, [esp+68h+var_4C]
		and	edi, edx
		mov	edx, [esp+68h+var_58]
		xor	ebp, edi
		add	ebp, [esp+68h+var_48]
		mov	edi, edx
		add	ebp, ebx
		ror	edi, 19h
		mov	[esp+68h+var_48], ebp
		mov	ebp, [esp+68h+var_40]
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		and	ebp, edx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+40h]
		mov	ebx, edx
		mov	edx, [esp+68h+var_48]
		not	ebx
		and	ebx, ecx
		xor	ebx, ebp
		add	ebx, edi
		lea	esi, [esi+ebx-1B64963Fh]
		add	[esp+68h+var_4C], esi
		mov	ebx, [esp+68h+var_54]
		mov	[esp+68h+var_50], esi
		mov	esi, ebx
		xor	esi, edx
		and	ebx, edx
		mov	ebp, edx
		ror	ebp, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebp, edi
		mov	[esp+68h+var_34], esi
		mov	edi, edx
		ror	edi, 2
		xor	ebp, edi
		mov	edi, [esp+68h+var_44]
		and	esi, edi
		xor	esi, ebx
		add	esi, [esp+68h+var_50]
		mov	[esp+68h+var_38], ebx
		add	esi, ebp
		mov	[esp+68h+var_50], esi
		mov	esi, [esp+68h+var_4C]
		mov	ebx, esi
		ror	ebx, 19h
		mov	ebp, esi
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, esi
		ror	ebp, 6
		xor	ebx, ebp
		mov	ebp, [esp+68h+var_58]
		and	ebp, [esp+68h+var_4C]
		add	ebx, [eax+44h]
		not	esi
		and	esi, [esp+68h+var_40]
		xor	esi, ebp
		add	esi, ebx
		mov	ebx, [esp+68h+var_50]
		mov	ebp, ebx
		lea	ecx, [ecx+esi-1041B87Ah]
		mov	esi, ebx
		add	edi, ecx
		ror	ebp, 16h
		ror	esi, 0Dh
		xor	ebp, esi
		mov	esi, ebx
		ror	esi, 2
		xor	ebp, esi
		mov	esi, [esp+68h+var_34]
		and	esi, ebx
		xor	esi, [esp+68h+var_38]
		mov	ebx, edi
		add	ecx, esi
		add	ecx, ebp
		mov	ebp, [esp+68h+var_4C]
		mov	esi, edi
		ror	esi, 19h
		ror	ebx, 0Bh
		xor	esi, ebx
		and	ebp, edi
		mov	ebx, edi
		ror	ebx, 6
		xor	esi, ebx
		add	esi, [eax+48h]
		mov	ebx, edi
		not	ebx
		and	ebx, [esp+68h+var_58]
		mov	[esp+68h+var_44], edi
		xor	ebx, ebp
		add	ebx, esi
		mov	esi, [esp+68h+var_40]
		lea	esi, [esi+ebx+0FC19DC6h]
		add	[esp+68h+var_54], esi
		mov	[esp+68h+var_40], esi
		mov	esi, ecx
		ror	esi, 16h
		mov	ebx, ecx
		ror	ebx, 0Dh
		xor	esi, ebx
		mov	ebx, ecx
		ror	ebx, 2
		xor	esi, ebx
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, [esp+68h+var_50]
		mov	ebp, ecx
		and	ebp, edx
		xor	ebx, ebp
		add	ebx, [esp+68h+var_40]
		add	ebx, esi
		mov	esi, [esp+68h+var_54]
		mov	[esp+68h+var_40], ebx
		mov	ebx, esi
		ror	ebx, 19h
		mov	ebp, esi
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, esi
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [eax+4Ch]
		mov	ebp, esi
		and	edi, esi
		mov	esi, [esp+68h+var_58]
		not	ebp
		and	ebp, [esp+68h+var_4C]
		xor	ebp, edi
		add	ebp, ebx
		lea	esi, [esi+ebp+240CA1CCh]
		add	edx, esi
		mov	[esp+68h+var_58], esi
		mov	esi, [esp+68h+var_40]
		mov	edi, esi
		ror	edi, 16h
		mov	ebx, esi
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 2
		xor	edi, ebx
		mov	ebp, [esp+68h+var_54]
		mov	ebx, ecx
		xor	ebx, esi
		and	ebx, [esp+68h+var_50]
		and	esi, ecx
		xor	esi, ebx
		add	esi, [esp+68h+var_58]
		and	ebp, edx
		add	esi, edi
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+50h]
		mov	ebx, edx
		not	ebx
		and	ebx, [esp+68h+var_44]
		mov	[esp+68h+var_58], esi
		xor	ebx, ebp
		add	ebx, edi
		mov	edi, [esp+68h+var_4C]
		lea	edi, [edi+ebx+2DE92C6Fh]
		add	[esp+68h+var_50], edi
		mov	[esp+68h+var_4C], edi
		mov	ebx, esi
		ror	ebx, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_40]
		mov	ebp, edi
		xor	ebp, esi
		and	ebp, ecx
		and	edi, esi
		xor	ebp, edi
		add	ebp, [esp+68h+var_4C]
		mov	edi, [esp+68h+var_50]
		add	ebp, ebx
		mov	[esp+68h+var_4C], ebp
		mov	ebx, edi
		ror	ebx, 19h
		mov	ebp, edi
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [eax+54h]
		mov	ebp, edi
		not	ebp
		and	ebp, [esp+68h+var_54]
		and	edi, edx
		xor	ebp, edi
		mov	edi, [esp+68h+var_44]
		add	ebp, ebx
		lea	edi, [edi+ebp+4A7484AAh]
		add	ecx, edi
		mov	[esp+68h+var_44], edi
		mov	edi, [esp+68h+var_4C]
		mov	ebx, edi
		ror	ebx, 16h
		mov	ebp, edi
		ror	ebp, 0Dh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 2
		xor	ebx, ebp
		mov	ebp, esi
		xor	ebp, edi
		and	ebp, [esp+68h+var_40]
		and	esi, edi
		xor	ebp, esi
		add	ebp, [esp+68h+var_44]
		mov	esi, ecx
		add	ebp, ebx
		ror	esi, 19h
		mov	[esp+68h+var_44], ebp
		mov	ebp, [esp+68h+var_50]
		and	ebp, ecx
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	esi, ebx
		mov	ebx, ecx
		ror	ebx, 6
		xor	esi, ebx
		add	esi, [eax+58h]
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		xor	ebx, ebp
		add	ebx, esi
		mov	esi, [esp+68h+var_54]
		lea	esi, [esi+ebx+5CB0A9DCh]
		add	[esp+68h+var_40], esi
		mov	[esp+68h+var_54], esi
		mov	esi, [esp+68h+var_44]
		mov	ebx, esi
		ror	ebx, 16h
		mov	ebp, esi
		ror	ebp, 0Dh
		xor	ebx, ebp
		mov	ebp, esi
		ror	ebp, 2
		xor	ebx, ebp
		mov	ebp, edi
		xor	ebp, esi
		and	ebp, [esp+68h+var_58]
		and	edi, esi
		mov	esi, [esp+68h+var_40]
		xor	ebp, edi
		add	ebp, [esp+68h+var_54]
		mov	edi, esi
		add	ebp, ebx
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	[esp+68h+var_54], ebp
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+5Ch]
		mov	ebx, esi
		not	ebx
		and	ebx, [esp+68h+var_50]
		mov	ebp, ecx
		and	ebp, esi
		mov	esi, [esp+68h+var_54]
		xor	ebx, ebp
		add	ebx, edi
		mov	edi, [esp+68h+var_58]
		lea	edx, [edx+ebx+76F988DAh]
		add	edi, edx
		mov	[esp+68h+var_48], edx
		mov	ebx, esi
		ror	ebx, 16h
		mov	edx, esi
		ror	edx, 0Dh
		xor	ebx, edx
		mov	edx, esi
		ror	edx, 2
		xor	ebx, edx
		mov	edx, [esp+68h+var_44]
		mov	ebp, edx
		xor	ebp, esi
		and	ebp, [esp+68h+var_4C]
		and	edx, esi
		xor	ebp, edx
		add	ebp, [esp+68h+var_48]
		mov	[esp+68h+var_58], edi
		add	ebp, ebx
		mov	[esp+68h+var_48], ebp
		mov	edx, edi
		mov	ebp, [esp+68h+var_40]
		ror	edx, 19h
		and	ebp, edi
		mov	ebx, edi
		ror	ebx, 0Bh
		xor	edx, ebx
		mov	ebx, edi
		ror	ebx, 6
		xor	edx, ebx
		add	edx, [eax+60h]
		mov	ebx, edi
		not	ebx
		and	ebx, ecx
		xor	ebx, ebp
		add	ebx, edx
		mov	edx, [esp+68h+var_50]
		lea	edi, [edx+ebx-67C1AEAEh]
		mov	edx, [esp+68h+var_4C]
		add	edx, edi
		mov	[esp+68h+var_50], edi
		mov	edi, [esp+68h+var_48]
		mov	ebp, edi
		mov	ebx, esi
		xor	ebx, edi
		mov	[esp+68h+var_34], ebx
		mov	ebx, esi
		and	ebx, edi
		mov	[esp+68h+var_38], ebx
		mov	ebx, edi
		ror	ebx, 16h
		ror	ebp, 0Dh
		xor	ebx, ebp
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_34]
		and	edi, [esp+68h+var_44]
		mov	ebp, [esp+68h+var_58]
		xor	edi, [esp+68h+var_38]
		and	ebp, edx
		add	edi, [esp+68h+var_50]
		mov	[esp+68h+var_4C], edx
		add	edi, ebx
		mov	[esp+68h+var_50], edi
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+64h]
		mov	ebx, edx
		not	ebx
		and	ebx, [esp+68h+var_40]
		xor	ebx, ebp
		add	ebx, edi
		mov	edi, [esp+68h+var_44]
		lea	ecx, [ecx+ebx-57CE3993h]
		mov	ebx, [esp+68h+var_50]
		add	edi, ecx
		mov	ebp, ebx
		mov	[esp+68h+var_3C], ecx
		mov	ecx, ebx
		ror	ecx, 16h
		ror	ebp, 0Dh
		xor	ecx, ebp
		ror	ebx, 2
		xor	ecx, ebx
		mov	ebx, [esp+68h+var_34]
		and	ebx, [esp+68h+var_50]
		mov	ebp, edi
		xor	ebx, [esp+68h+var_38]
		mov	[esp+68h+var_44], edi
		add	ebx, [esp+68h+var_3C]
		add	ecx, ebx
		mov	ebx, edi
		ror	ebx, 19h
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, edi
		and	edx, edi
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [eax+68h]
		mov	ebp, edi
		not	ebp
		and	ebp, [esp+68h+var_58]
		mov	edi, ecx
		xor	ebp, edx
		add	ebp, ebx
		mov	edx, [esp+68h+var_40]
		lea	edx, [edx+ebp-4FFCD838h]
		add	esi, edx
		ror	edi, 16h
		mov	[esp+68h+var_40], edx
		mov	edx, ecx
		ror	edx, 0Dh
		xor	edi, edx
		mov	edx, ecx
		ror	edx, 2
		xor	edi, edx
		mov	edx, [esp+68h+var_48]
		mov	ebp, [esp+68h+var_44]
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, [esp+68h+var_50]
		and	edx, ecx
		xor	edx, ebx
		add	edx, [esp+68h+var_40]
		mov	ebx, esi
		add	edx, edi
		mov	edi, esi
		ror	edi, 19h
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+6Ch]
		and	ebp, esi
		mov	ebx, esi
		not	ebx
		and	ebx, [esp+68h+var_4C]
		mov	[esp+68h+var_40], edx
		xor	ebx, ebp
		add	ebx, edi
		mov	edi, [esp+68h+var_58]
		lea	edi, [edi+ebx-40A68039h]
		add	[esp+68h+var_48], edi
		mov	[esp+68h+var_58], edi
		mov	edi, edx
		ror	edi, 16h
		mov	ebx, edx
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, [esp+68h+var_50]
		mov	ebp, ecx
		and	ebp, edx
		mov	edx, [esp+68h+var_48]
		xor	ebx, ebp
		add	ebx, [esp+68h+var_58]
		mov	ebp, esi
		add	ebx, edi
		mov	[esp+68h+var_58], ebx
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		mov	ebx, edx
		not	ebx
		and	ebx, [esp+68h+var_44]
		and	ebp, edx
		add	edi, [eax+70h]
		xor	ebx, ebp
		add	ebx, edi
		mov	edx, [esp+68h+var_4C]
		lea	edx, [edx+ebx-391FF40Dh]
		add	[esp+68h+var_50], edx
		mov	[esp+68h+var_4C], edx
		mov	edx, [esp+68h+var_58]
		mov	ebx, edx
		ror	ebx, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, edx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_40]
		mov	ebp, edi
		xor	ebp, edx
		and	edi, edx
		mov	edx, [esp+68h+var_50]
		and	ebp, ecx
		xor	ebp, edi
		add	ebp, [esp+68h+var_4C]
		mov	edi, edx
		add	ebp, ebx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+74h]
		mov	ebx, edx
		and	edx, [esp+68h+var_48]
		not	ebx
		and	ebx, esi
		xor	ebx, edx
		mov	edx, [esp+68h+var_44]
		add	ebx, edi
		lea	edx, [edx+ebx-2A586EB9h]
		add	ecx, edx
		mov	[esp+68h+var_44], edx
		mov	edx, ebp
		mov	ebx, edx
		ror	ebx, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, edx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_58]
		mov	ebp, edi
		xor	ebp, edx
		and	ebp, [esp+68h+var_40]
		and	edi, edx
		xor	ebp, edi
		add	ebp, [esp+68h+var_44]
		mov	edi, ecx
		add	ebp, ebx
		ror	edi, 19h
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, ecx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+78h]
		mov	ebx, ecx
		not	ebx
		and	ebx, [esp+68h+var_48]
		mov	[esp+68h+var_44], ebp
		mov	ebp, [esp+68h+var_50]
		and	ebp, ecx
		xor	ebx, ebp
		add	ebx, edi
		lea	esi, [esi+ebx+6CA6351h]
		add	[esp+68h+var_40], esi
		mov	[esp+68h+var_54], esi
		mov	esi, [esp+68h+var_44]
		mov	edi, esi
		ror	edi, 16h
		mov	ebx, esi
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, edx
		xor	ebx, esi
		and	ebx, [esp+68h+var_58]
		mov	ebp, edx
		and	ebp, esi
		xor	ebx, ebp
		add	ebx, [esp+68h+var_54]
		mov	esi, [esp+68h+var_40]
		add	ebx, edi
		mov	[esp+68h+var_54], ebx
		mov	edi, esi
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+7Ch]
		mov	ebx, esi
		not	ebx
		and	ebx, [esp+68h+var_50]
		mov	ebp, ecx
		and	ebp, esi
		mov	esi, [esp+68h+var_48]
		xor	ebx, ebp
		add	ebx, edi
		lea	esi, [esi+ebx+14292967h]
		add	[esp+68h+var_58], esi
		mov	[esp+68h+var_48], esi
		mov	esi, [esp+68h+var_54]
		mov	ebx, esi
		ror	ebx, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_44]
		mov	ebp, edi
		xor	ebp, esi
		and	edi, esi
		mov	esi, [esp+68h+var_58]
		and	ebp, edx
		xor	ebp, edi
		add	ebp, [esp+68h+var_48]
		mov	edi, esi
		add	ebp, ebx
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+80h]
		mov	ebx, esi
		mov	[esp+68h+var_48], ebp
		mov	ebp, [esp+68h+var_40]
		not	ebx
		and	ebp, esi
		mov	esi, [esp+68h+var_50]
		and	ebx, ecx
		xor	ebx, ebp
		add	ebx, edi
		lea	esi, [esi+ebx+27B70A85h]
		mov	ebx, [esp+68h+var_54]
		mov	[esp+68h+var_50], esi
		add	edx, esi
		mov	esi, [esp+68h+var_48]
		mov	edi, ebx
		and	ebx, esi
		mov	[esp+68h+var_38], ebx
		xor	edi, esi
		mov	[esp+68h+var_34], edi
		and	edi, [esp+68h+var_44]
		mov	ebx, esi
		xor	edi, [esp+68h+var_38]
		ror	ebx, 16h
		add	edi, [esp+68h+var_50]
		mov	ebp, esi
		ror	ebp, 0Dh
		xor	ebx, ebp
		mov	ebp, esi
		ror	ebp, 2
		xor	ebx, ebp
		add	edi, ebx
		mov	ebp, [esp+68h+var_58]
		mov	[esp+68h+var_50], edi
		mov	edi, edx
		ror	edi, 19h
		and	ebp, edx
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+84h]
		mov	ebx, edx
		not	ebx
		and	ebx, [esp+68h+var_40]
		xor	ebx, ebp
		add	ebx, edi
		mov	edi, [esp+68h+var_44]
		lea	ecx, [ecx+ebx+2E1B2138h]
		mov	ebx, [esp+68h+var_50]
		add	edi, ecx
		mov	[esp+68h+var_3C], ecx
		mov	ebp, ebx
		ror	ebp, 16h
		mov	ecx, ebx
		ror	ecx, 0Dh
		xor	ebp, ecx
		mov	ecx, ebx
		ror	ecx, 2
		xor	ebp, ecx
		mov	ecx, [esp+68h+var_34]
		and	ecx, ebx
		xor	ecx, [esp+68h+var_38]
		mov	ebx, edi
		add	ecx, [esp+68h+var_3C]
		mov	[esp+68h+var_44], edi
		add	ecx, ebp
		mov	[esp+68h+var_3C], ecx
		mov	ecx, edi
		ror	ecx, 19h
		ror	ebx, 0Bh
		xor	ecx, ebx
		mov	ebx, edi
		ror	ebx, 6
		xor	ecx, ebx
		add	ecx, [eax+88h]
		mov	ebx, edi
		not	ebx
		and	ebx, [esp+68h+var_58]
		mov	ebp, edx
		and	ebp, edi
		xor	ebx, ebp
		add	ebx, ecx
		mov	ecx, [esp+68h+var_40]
		lea	ecx, [ecx+ebx+4D2C6DFCh]
		add	[esp+68h+var_54], ecx
		mov	[esp+68h+var_40], ecx
		mov	ecx, [esp+68h+var_3C]
		mov	ebx, ecx
		ror	ebx, 16h
		mov	ebp, ecx
		ror	ebp, 0Dh
		xor	ebx, ebp
		mov	ebp, ecx
		ror	ebp, 2
		xor	ebx, ebp
		mov	ebp, ecx
		xor	ebp, esi
		and	ebp, [esp+68h+var_50]
		and	ecx, esi
		xor	ebp, ecx
		add	ebp, [esp+68h+var_40]
		mov	ecx, [esp+68h+var_54]
		add	ebp, ebx
		mov	[esp+68h+var_40], ebp
		and	edi, ecx
		mov	ebx, ecx
		ror	ebx, 19h
		mov	ebp, ecx
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, ecx
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [eax+8Ch]
		mov	ebp, ecx
		mov	ecx, [esp+68h+var_58]
		not	ebp
		and	ebp, edx
		xor	ebp, edi
		add	ebp, ebx
		lea	ecx, [ecx+ebp+53380D13h]
		add	esi, ecx
		mov	[esp+68h+var_58], ecx
		mov	ecx, [esp+68h+var_40]
		mov	ebx, ecx
		ror	ebx, 16h
		mov	edi, ecx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, ecx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_3C]
		mov	ebp, edi
		xor	ebp, ecx
		and	ebp, [esp+68h+var_50]
		and	edi, ecx
		xor	ebp, edi
		add	ebp, [esp+68h+var_58]
		mov	edi, esi
		add	ebp, ebx
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+90h]
		mov	[esp+68h+var_58], ebp
		mov	ebp, [esp+68h+var_54]
		and	ebp, esi
		mov	ebx, esi
		not	ebx
		and	ebx, [esp+68h+var_44]
		xor	ebx, ebp
		add	ebx, edi
		lea	edx, [edx+ebx+650A7354h]
		add	[esp+68h+var_50], edx
		mov	[esp+68h+var_4C], edx
		mov	edx, [esp+68h+var_58]
		mov	edi, edx
		ror	edi, 16h
		mov	ebx, edx
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, [esp+68h+var_3C]
		mov	ebp, ecx
		and	ebp, edx
		xor	ebx, ebp
		add	ebx, [esp+68h+var_4C]
		add	ebx, edi
		mov	edi, [esp+68h+var_50]
		mov	[esp+68h+var_4C], ebx
		mov	ebx, edi
		ror	ebx, 19h
		mov	ebp, edi
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [eax+94h]
		mov	ebp, edi
		not	ebp
		and	ebp, [esp+68h+var_54]
		and	edi, esi
		xor	ebp, edi
		add	ebp, ebx
		mov	edi, [esp+68h+var_44]
		lea	edi, [edi+ebp+766A0ABBh]
		add	[esp+68h+var_3C], edi
		mov	[esp+68h+var_44], edi
		mov	edi, [esp+68h+var_4C]
		mov	ebx, edi
		ror	ebx, 16h
		mov	ebp, edi
		ror	ebp, 0Dh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 2
		xor	ebx, ebp
		mov	ebp, edx
		xor	ebp, edi
		and	edx, edi
		and	ebp, ecx
		xor	ebp, edx
		add	ebp, [esp+68h+var_44]
		mov	edx, [esp+68h+var_3C]
		add	ebp, ebx
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+98h]
		mov	[esp+68h+var_44], ebp
		mov	ebp, [esp+68h+var_50]
		and	ebp, edx
		mov	ebx, edx
		mov	edx, [esp+68h+var_54]
		not	ebx
		and	ebx, esi
		xor	ebx, ebp
		add	ebx, edi
		lea	edx, [edx+ebx-7E3D36D2h]
		add	ecx, edx
		mov	[esp+68h+var_54], edx
		mov	edx, [esp+68h+var_44]
		mov	ebx, edx
		ror	ebx, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, edx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_4C]
		mov	ebp, edi
		xor	ebp, edx
		and	ebp, [esp+68h+var_58]
		and	edi, edx
		xor	ebp, edi
		add	ebp, [esp+68h+var_54]
		mov	edi, ecx
		add	ebp, ebx
		mov	[esp+68h+var_54], ebp
		ror	edi, 19h
		mov	ebp, [esp+68h+var_3C]
		and	ebp, ecx
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, ecx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+9Ch]
		mov	ebx, ecx
		not	ebx
		and	ebx, [esp+68h+var_50]
		xor	ebx, ebp
		add	ebx, edi
		lea	esi, [esi+ebx-6D8DD37Bh]
		add	[esp+68h+var_58], esi
		mov	[esp+68h+var_48], esi
		mov	esi, [esp+68h+var_54]
		mov	edi, esi
		ror	edi, 16h
		mov	ebx, esi
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, edx
		xor	ebx, esi
		and	ebx, [esp+68h+var_4C]
		mov	ebp, edx
		and	ebp, esi
		mov	esi, [esp+68h+var_58]
		xor	ebx, ebp
		add	ebx, [esp+68h+var_48]
		mov	ebp, ecx
		add	ebx, edi
		mov	[esp+68h+var_48], ebx
		mov	edi, esi
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0A0h]
		and	ebp, esi
		mov	ebx, esi
		mov	esi, [esp+68h+var_50]
		not	ebx
		and	ebx, [esp+68h+var_3C]
		xor	ebx, ebp
		mov	ebp, [esp+68h+var_54]
		add	ebx, edi
		lea	edi, [esi+ebx-5D40175Fh]
		mov	esi, [esp+68h+var_4C]
		add	esi, edi
		mov	[esp+68h+var_50], edi
		mov	edi, [esp+68h+var_48]
		mov	ebx, ebp
		xor	ebx, edi
		and	ebp, edi
		mov	[esp+68h+var_34], ebx
		mov	ebx, edi
		ror	ebx, 16h
		mov	[esp+68h+var_38], ebp
		mov	ebp, edi
		ror	ebp, 0Dh
		xor	ebx, ebp
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_34]
		and	edi, edx
		xor	edi, [esp+68h+var_38]
		mov	[esp+68h+var_4C], esi
		add	edi, [esp+68h+var_50]
		add	edi, ebx
		mov	[esp+68h+var_50], edi
		mov	edi, esi
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebp, [esp+68h+var_58]
		and	ebp, esi
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0A4h]
		mov	ebx, esi
		mov	esi, [esp+68h+var_3C]
		not	ebx
		and	ebx, ecx
		xor	ebx, ebp
		add	ebx, edi
		lea	ebx, [esi+ebx-57E599B5h]
		mov	esi, [esp+68h+var_50]
		add	edx, ebx
		mov	ebp, esi
		ror	ebp, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebp, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebp, edi
		mov	edi, [esp+68h+var_34]
		and	edi, esi
		xor	edi, [esp+68h+var_38]
		add	edi, ebx
		add	edi, ebp
		mov	ebp, [esp+68h+var_4C]
		mov	[esp+68h+var_3C], edi
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		and	ebp, edx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0A8h]
		mov	ebx, edx
		not	ebx
		and	ebx, [esp+68h+var_58]
		xor	ebx, ebp
		add	ebx, edi
		lea	ecx, [ecx+ebx-3DB47490h]
		add	[esp+68h+var_54], ecx
		mov	[esp+68h+var_40], ecx
		mov	ecx, [esp+68h+var_3C]
		mov	ebx, ecx
		ror	ebx, 16h
		mov	edi, ecx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, ecx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_48]
		mov	ebp, ecx
		xor	ebp, edi
		and	ecx, edi
		and	ebp, esi
		xor	ebp, ecx
		add	ebp, [esp+68h+var_40]
		mov	ecx, [esp+68h+var_54]
		add	ebp, ebx
		mov	edi, ecx
		ror	edi, 19h
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, ecx
		ror	ebx, 6
		xor	edi, ebx
		mov	ebx, ecx
		not	ebx
		and	ebx, [esp+68h+var_4C]
		mov	[esp+68h+var_40], ebp
		mov	ebp, edx
		add	edi, [eax+0ACh]
		and	ebp, ecx
		xor	ebx, ebp
		add	ebx, edi
		mov	ecx, [esp+68h+var_58]
		lea	ecx, [ecx+ebx-3893AE5Dh]
		add	[esp+68h+var_48], ecx
		mov	[esp+68h+var_58], ecx
		mov	ecx, [esp+68h+var_40]
		mov	ebx, ecx
		ror	ebx, 16h
		mov	edi, ecx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, ecx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_3C]
		mov	ebp, edi
		and	edi, ecx
		xor	ebp, ecx
		mov	ecx, [esp+68h+var_48]
		and	ebp, esi
		xor	ebp, edi
		add	ebp, [esp+68h+var_58]
		mov	edi, ecx
		add	ebp, ebx
		ror	edi, 19h
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, ecx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0B0h]
		mov	ebx, ecx
		mov	[esp+68h+var_58], ebp
		mov	ebp, [esp+68h+var_54]
		and	ebp, ecx
		mov	ecx, [esp+68h+var_4C]
		not	ebx
		and	ebx, edx
		xor	ebx, ebp
		add	ebx, edi
		lea	ecx, [ecx+ebx-2E6D17E7h]
		add	esi, ecx
		mov	[esp+68h+var_4C], ecx
		mov	ecx, [esp+68h+var_58]
		mov	ebx, ecx
		ror	ebx, 16h
		mov	edi, ecx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, ecx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_40]
		mov	ebp, edi
		xor	ebp, ecx
		and	ebp, [esp+68h+var_3C]
		and	edi, ecx
		xor	ebp, edi
		add	ebp, [esp+68h+var_4C]
		mov	ecx, esi
		add	ebp, ebx
		ror	ecx, 19h
		mov	edi, esi
		ror	edi, 0Bh
		xor	ecx, edi
		mov	edi, esi
		ror	edi, 6
		xor	ecx, edi
		add	ecx, [eax+0B4h]
		mov	edi, esi
		not	edi
		and	edi, [esp+68h+var_54]
		mov	ebx, esi
		and	ebx, [esp+68h+var_48]
		xor	edi, ebx
		add	edi, ecx
		lea	edx, [edx+edi-2966F9DCh]
		mov	edi, [esp+68h+var_3C]
		add	edi, edx
		mov	[esp+68h+var_44], edx
		mov	ecx, ebp
		mov	ebx, ecx
		ror	ebx, 16h
		mov	edx, ecx
		ror	edx, 0Dh
		xor	ebx, edx
		mov	edx, ecx
		ror	edx, 2
		xor	ebx, edx
		mov	edx, [esp+68h+var_58]
		mov	ebp, edx
		xor	ebp, ecx
		and	ebp, [esp+68h+var_40]
		and	edx, ecx
		xor	ebp, edx
		add	ebp, [esp+68h+var_44]
		mov	edx, edi
		add	ebp, ebx
		ror	edx, 19h
		mov	ebx, edi
		ror	ebx, 0Bh
		xor	edx, ebx
		mov	ebx, edi
		ror	ebx, 6
		xor	edx, ebx
		add	edx, [eax+0B8h]
		mov	ebx, edi
		not	ebx
		and	ebx, [esp+68h+var_48]
		mov	[esp+68h+var_44], ebp
		mov	ebp, esi
		and	ebp, edi
		xor	ebx, ebp
		add	ebx, edx
		mov	edx, [esp+68h+var_54]
		lea	edx, [edx+ebx-0BF1CA7Bh]
		add	[esp+68h+var_40], edx
		mov	[esp+68h+var_3C], edi
		mov	[esp+68h+var_54], edx
		mov	edx, [esp+68h+var_44]
		mov	edi, edx
		ror	edi, 16h
		mov	ebx, edx
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, [esp+68h+var_58]
		mov	ebp, ecx
		and	ebp, edx
		mov	edx, [esp+68h+var_40]
		xor	ebx, ebp
		add	ebx, [esp+68h+var_54]
		mov	ebp, [esp+68h+var_3C]
		add	ebx, edi
		mov	[esp+68h+var_54], ebx
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0BCh]
		mov	ebx, edx
		not	ebx
		and	ebp, edx
		mov	edx, [esp+68h+var_48]
		and	ebx, esi
		xor	ebx, ebp
		add	ebx, edi
		lea	edx, [edx+ebx+106AA070h]
		add	[esp+68h+var_58], edx
		mov	[esp+68h+var_48], edx
		mov	edx, [esp+68h+var_54]
		mov	ebx, edx
		ror	ebx, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, edx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_44]
		mov	ebp, edi
		xor	ebp, edx
		and	ebp, ecx
		and	edi, edx
		mov	edx, [esp+68h+var_58]
		xor	ebp, edi
		add	ebp, [esp+68h+var_48]
		mov	edi, edx
		add	ebp, ebx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	[esp+68h+var_48], ebp
		mov	ebp, [esp+68h+var_40]
		and	ebp, edx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0C0h]
		mov	ebx, edx
		mov	edx, [esp+68h+var_48]
		not	ebx
		and	ebx, [esp+68h+var_3C]
		xor	ebx, ebp
		add	ebx, edi
		lea	esi, [esi+ebx+19A4C116h]
		mov	ebx, [esp+68h+var_54]
		add	ecx, esi
		mov	[esp+68h+var_50], esi
		mov	esi, ebx
		xor	esi, edx
		and	ebx, edx
		mov	ebp, edx
		ror	ebp, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebp, edi
		mov	[esp+68h+var_34], esi
		mov	edi, edx
		ror	edi, 2
		xor	ebp, edi
		mov	edi, [esp+68h+var_44]
		and	esi, edi
		xor	esi, ebx
		add	esi, [esp+68h+var_50]
		mov	[esp+68h+var_38], ebx
		add	esi, ebp
		mov	ebp, [esp+68h+var_58]
		mov	[esp+68h+var_50], esi
		mov	esi, ecx
		ror	esi, 19h
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	esi, ebx
		mov	ebx, ecx
		ror	ebx, 6
		xor	esi, ebx
		add	esi, [eax+0C4h]
		mov	ebx, ecx
		not	ebx
		and	ebx, [esp+68h+var_40]
		and	ebp, ecx
		xor	ebx, ebp
		add	ebx, esi
		mov	esi, [esp+68h+var_3C]
		lea	esi, [esi+ebx+1E376C08h]
		mov	ebx, [esp+68h+var_50]
		add	edi, esi
		mov	[esp+68h+var_3C], esi
		mov	[esp+68h+var_44], edi
		mov	ebp, ebx
		ror	ebp, 16h
		mov	esi, ebx
		ror	esi, 0Dh
		xor	ebp, esi
		mov	esi, ebx
		ror	esi, 2
		xor	ebp, esi
		mov	esi, [esp+68h+var_34]
		and	esi, ebx
		xor	esi, [esp+68h+var_38]
		mov	ebx, edi
		add	esi, [esp+68h+var_3C]
		add	esi, ebp
		mov	[esp+68h+var_3C], esi
		mov	esi, edi
		ror	esi, 19h
		ror	ebx, 0Bh
		xor	esi, ebx
		mov	ebx, edi
		ror	ebx, 6
		xor	esi, ebx
		add	esi, [eax+0C8h]
		mov	ebx, edi
		not	ebx
		and	ebx, [esp+68h+var_58]
		mov	ebp, ecx
		and	ebp, edi
		xor	ebx, ebp
		add	ebx, esi
		mov	esi, [esp+68h+var_40]
		lea	esi, [esi+ebx+2748774Ch]
		add	[esp+68h+var_54], esi
		mov	[esp+68h+var_40], esi
		mov	esi, [esp+68h+var_3C]
		mov	ebx, esi
		ror	ebx, 16h
		mov	ebp, esi
		ror	ebp, 0Dh
		xor	ebx, ebp
		mov	ebp, esi
		ror	ebp, 2
		xor	ebx, ebp
		mov	ebp, esi
		xor	ebp, edx
		and	ebp, [esp+68h+var_50]
		and	esi, edx
		xor	ebp, esi
		add	ebp, [esp+68h+var_40]
		mov	esi, [esp+68h+var_54]
		add	ebp, ebx
		mov	[esp+68h+var_40], ebp
		mov	ebx, esi
		ror	ebx, 19h
		mov	ebp, esi
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, esi
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [eax+0CCh]
		and	edi, esi
		mov	ebp, esi
		mov	esi, [esp+68h+var_58]
		not	ebp
		and	ebp, ecx
		xor	ebp, edi
		add	ebp, ebx
		lea	esi, [esi+ebp+34B0BCB5h]
		add	edx, esi
		mov	[esp+68h+var_58], esi
		mov	esi, [esp+68h+var_40]
		mov	ebx, esi
		ror	ebx, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_3C]
		mov	ebp, edi
		xor	ebp, esi
		and	ebp, [esp+68h+var_50]
		and	edi, esi
		xor	ebp, edi
		add	ebp, [esp+68h+var_58]
		mov	edi, edx
		add	ebp, ebx
		ror	edi, 19h
		mov	[esp+68h+var_58], ebp
		mov	ebp, [esp+68h+var_54]
		and	ebp, edx
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0D0h]
		mov	ebx, edx
		not	ebx
		and	ebx, [esp+68h+var_44]
		xor	ebx, ebp
		add	ebx, edi
		lea	ecx, [ecx+ebx+391C0CB3h]
		add	[esp+68h+var_50], ecx
		mov	[esp+68h+var_4C], ecx
		mov	ecx, [esp+68h+var_58]
		mov	edi, ecx
		ror	edi, 16h
		mov	ebx, ecx
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, ecx
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, esi
		xor	ebx, ecx
		and	ebx, [esp+68h+var_3C]
		mov	ebp, esi
		and	ebp, ecx
		xor	ebx, ebp
		add	ebx, [esp+68h+var_4C]
		add	ebx, edi
		mov	edi, [esp+68h+var_50]
		mov	[esp+68h+var_4C], ebx
		mov	ebx, edi
		ror	ebx, 19h
		mov	ebp, edi
		ror	ebp, 0Bh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 6
		xor	ebx, ebp
		add	ebx, [eax+0D4h]
		mov	ebp, edi
		not	ebp
		and	ebp, [esp+68h+var_54]
		and	edi, edx
		xor	ebp, edi
		mov	edi, [esp+68h+var_44]
		add	ebp, ebx
		lea	edi, [edi+ebp+4ED8AA4Ah]
		add	[esp+68h+var_3C], edi
		mov	[esp+68h+var_44], edi
		mov	edi, [esp+68h+var_4C]
		mov	ebx, edi
		ror	ebx, 16h
		mov	ebp, edi
		ror	ebp, 0Dh
		xor	ebx, ebp
		mov	ebp, edi
		ror	ebp, 2
		xor	ebx, ebp
		mov	ebp, ecx
		xor	ebp, edi
		and	ebp, esi
		and	ecx, edi
		xor	ebp, ecx
		add	ebp, [esp+68h+var_44]
		add	ebp, ebx
		mov	ecx, [esp+68h+var_3C]
		mov	edi, ecx
		ror	edi, 19h
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	[esp+68h+var_44], ebp
		mov	ebp, [esp+68h+var_50]
		and	ebp, ecx
		mov	ebx, ecx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0D8h]
		mov	ebx, ecx
		mov	ecx, [esp+68h+var_54]
		not	ebx
		and	ebx, edx
		xor	ebx, ebp
		add	ebx, edi
		lea	ecx, [ecx+ebx+5B9CCA4Fh]
		add	esi, ecx
		mov	[esp+68h+var_54], ecx
		mov	ecx, [esp+68h+var_44]
		mov	ebx, ecx
		ror	ebx, 16h
		mov	edi, ecx
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, ecx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_4C]
		mov	ebp, edi
		xor	ebp, ecx
		and	ebp, [esp+68h+var_58]
		and	edi, ecx
		xor	ebp, edi
		add	ebp, [esp+68h+var_54]
		mov	edi, esi
		add	ebp, ebx
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0DCh]
		mov	[esp+68h+var_54], ebp
		mov	ebp, [esp+68h+var_3C]
		and	ebp, esi
		mov	ebx, esi
		not	ebx
		and	ebx, [esp+68h+var_50]
		xor	ebx, ebp
		add	ebx, edi
		lea	edx, [edx+ebx+682E6FF3h]
		add	[esp+68h+var_58], edx
		mov	[esp+68h+var_48], edx
		mov	edx, [esp+68h+var_54]
		mov	edi, edx
		ror	edi, 16h
		mov	ebx, edx
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, ecx
		xor	ebx, edx
		and	ebx, [esp+68h+var_4C]
		mov	ebp, ecx
		and	ebp, edx
		mov	edx, [esp+68h+var_58]
		xor	ebx, ebp
		add	ebx, [esp+68h+var_48]
		add	ebx, edi
		mov	edi, edx
		mov	[esp+68h+var_48], ebx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0E0h]
		mov	ebx, edx
		not	ebx
		and	ebx, [esp+68h+var_3C]
		mov	ebp, esi
		and	ebp, edx
		xor	ebx, ebp
		add	ebx, edi
		mov	edx, [esp+68h+var_50]
		mov	ebp, [esp+68h+var_54]
		lea	edi, [edx+ebx+748F82EEh]
		mov	edx, [esp+68h+var_4C]
		add	edx, edi
		mov	[esp+68h+var_50], edi
		mov	edi, [esp+68h+var_48]
		mov	ebx, ebp
		xor	ebx, edi
		and	ebp, edi
		mov	[esp+68h+var_34], ebx
		mov	ebx, edi
		ror	ebx, 16h
		mov	[esp+68h+var_38], ebp
		mov	ebp, edi
		ror	ebp, 0Dh
		xor	ebx, ebp
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_34]
		and	edi, ecx
		xor	edi, [esp+68h+var_38]
		mov	ebp, [esp+68h+var_58]
		add	edi, [esp+68h+var_50]
		and	ebp, edx
		add	edi, ebx
		mov	[esp+68h+var_50], edi
		mov	edi, edx
		ror	edi, 19h
		mov	ebx, edx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, edx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0E4h]
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		xor	ebx, ebp
		add	ebx, edi
		mov	[esp+68h+var_4C], edx
		mov	edx, [esp+68h+var_3C]
		lea	ebx, [edx+ebx+78A5636Fh]
		mov	edx, [esp+68h+var_50]
		add	ecx, ebx
		mov	ebp, edx
		ror	ebp, 16h
		mov	edi, edx
		ror	edi, 0Dh
		xor	ebp, edi
		mov	edi, edx
		ror	edi, 2
		xor	ebp, edi
		mov	edi, [esp+68h+var_34]
		and	edi, edx
		xor	edi, [esp+68h+var_38]
		add	edi, ebx
		add	edi, ebp
		mov	[esp+68h+var_3C], edi
		mov	edi, ecx
		ror	edi, 19h
		mov	ebx, ecx
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, ecx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0E8h]
		mov	ebp, [esp+68h+var_4C]
		and	ebp, ecx
		mov	ebx, ecx
		not	ebx
		and	ebx, [esp+68h+var_58]
		xor	ebx, ebp
		add	ebx, edi
		lea	esi, [esi+ebx-7B3787ECh]
		add	[esp+68h+var_54], esi
		mov	[esp+68h+var_40], esi
		mov	esi, [esp+68h+var_3C]
		mov	ebx, esi
		ror	ebx, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_48]
		mov	ebp, esi
		xor	ebp, edi
		and	esi, edi
		and	ebp, edx
		xor	ebp, esi
		add	ebp, [esp+68h+var_40]
		mov	esi, [esp+68h+var_54]
		add	ebp, ebx
		mov	edi, esi
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [eax+0ECh]
		mov	[esp+68h+var_40], ebp
		mov	ebx, esi
		not	ebx
		and	ebx, [esp+68h+var_4C]
		mov	ebp, ecx
		and	ebp, esi
		mov	esi, [esp+68h+var_58]
		xor	ebx, ebp
		add	ebx, edi
		lea	esi, [esi+ebx-7338FDF8h]
		add	[esp+68h+var_48], esi
		mov	[esp+68h+var_58], esi
		mov	esi, [esp+68h+var_40]
		mov	ebx, esi
		ror	ebx, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_3C]
		mov	ebp, edi
		xor	ebp, esi
		and	edi, esi
		mov	esi, [esp+68h+var_48]
		and	ebp, edx
		xor	ebp, edi
		add	ebp, [esp+68h+var_58]
		mov	edi, esi
		add	ebp, ebx
		ror	edi, 19h
		mov	ebx, esi
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, esi
		ror	ebx, 6
		xor	edi, ebx
		mov	ebx, esi
		not	ebx
		mov	[esp+68h+var_58], ebp
		mov	ebp, [esp+68h+var_54]
		and	ebx, ecx
		add	edi, [eax+0F0h]
		and	ebp, esi
		xor	ebx, ebp
		add	ebx, edi
		mov	esi, [esp+68h+var_4C]
		lea	esi, [esi+ebx-6F410006h]
		add	edx, esi
		mov	[esp+68h+var_4C], esi
		mov	esi, [esp+68h+var_58]
		mov	ebx, esi
		ror	ebx, 16h
		mov	edi, esi
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, esi
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_40]
		mov	ebp, edi
		xor	ebp, esi
		and	ebp, [esp+68h+var_3C]
		and	edi, esi
		xor	ebp, edi
		add	ebp, [esp+68h+var_4C]
		mov	esi, edx
		add	ebp, ebx
		ror	esi, 19h
		mov	edi, edx
		ror	edi, 0Bh
		xor	esi, edi
		mov	edi, edx
		ror	edi, 6
		xor	esi, edi
		add	esi, [eax+0F4h]
		mov	edi, edx
		not	edi
		and	edi, [esp+68h+var_54]
		mov	ebx, edx
		and	ebx, [esp+68h+var_48]
		xor	edi, ebx
		add	edi, esi
		lea	ecx, [ecx+edi-5BAF9315h]
		mov	edi, [esp+68h+var_3C]
		add	edi, ecx
		mov	[esp+68h+var_44], ecx
		mov	esi, ebp
		mov	ebx, esi
		ror	ebx, 16h
		mov	ecx, esi
		ror	ecx, 0Dh
		xor	ebx, ecx
		mov	ecx, esi
		ror	ecx, 2
		xor	ebx, ecx
		mov	ecx, [esp+68h+var_58]
		mov	ebp, ecx
		xor	ebp, esi
		and	ebp, [esp+68h+var_40]
		and	ecx, esi
		xor	ebp, ecx
		add	ebp, [esp+68h+var_44]
		mov	ecx, edi
		add	ebp, ebx
		ror	ecx, 19h
		mov	ebx, edi
		ror	ebx, 0Bh
		xor	ecx, ebx
		mov	ebx, edi
		ror	ebx, 6
		xor	ecx, ebx
		mov	ebx, edi
		mov	[esp+68h+var_44], ebp
		not	ebx
		and	ebx, [esp+68h+var_48]
		mov	ebp, edx
		and	ebp, edi
		xor	ebx, ebp
		add	ecx, ebx
		add	ecx, [eax+0F8h]
		mov	[esp+68h+var_3C], edi
		mov	edi, [esp+68h+var_54]
		lea	ecx, [edi+ecx-41065C09h]
		add	[esp+68h+var_40], ecx
		mov	[esp+68h+var_54], ecx
		mov	ecx, [esp+68h+var_44]
		mov	edi, ecx
		ror	edi, 16h
		mov	ebx, ecx
		ror	ebx, 0Dh
		xor	edi, ebx
		mov	ebx, ecx
		ror	ebx, 2
		xor	edi, ebx
		mov	ebx, esi
		xor	ebx, ecx
		and	ebx, [esp+68h+var_58]
		mov	ebp, esi
		and	ebp, ecx
		mov	ecx, [esp+68h+var_40]
		xor	ebx, ebp
		add	ebx, [esp+68h+var_54]
		mov	ebp, [esp+68h+var_3C]
		add	ebx, edi
		mov	[esp+68h+var_54], ebx
		mov	edi, ecx
		mov	ebx, ecx
		ror	edi, 19h
		ror	ebx, 0Bh
		xor	edi, ebx
		mov	ebx, ecx
		and	ebp, ecx
		ror	ebx, 6
		xor	edi, ebx
		add	edi, [esp+68h+var_4]
		mov	ebx, ecx
		mov	ecx, [esp+68h+var_48]
		not	ebx
		and	ebx, edx
		xor	ebx, ebp
		add	ebx, edi
		lea	ecx, [ecx+ebx-398E870Eh]
		mov	[esp+68h+var_48], ecx
		mov	ecx, [esp+68h+var_54]
		mov	ebx, ecx
		mov	edi, ecx
		ror	ebx, 16h
		ror	edi, 0Dh
		xor	ebx, edi
		mov	edi, ecx
		ror	edi, 2
		xor	ebx, edi
		mov	edi, [esp+68h+var_44]
		add	ebx, [eax+100h]
		mov	ebp, edi
		xor	ebp, ecx
		and	edi, ecx
		and	ebp, esi
		xor	ebp, edi
		mov	edi, [esp+68h+var_48]
		add	ebp, ebx
		mov	ebx, [eax+104h]
		add	ebx, ecx
		mov	ecx, [eax+108h]
		add	ecx, [esp+68h+var_44]
		add	ebp, edi
		mov	[eax+108h], ecx
		mov	ecx, [eax+10Ch]
		add	ecx, esi
		mov	[eax+10Ch], ecx
		mov	ecx, [eax+110h]
		add	ecx, [esp+68h+var_58]
		mov	[eax+100h], ebp
		add	ecx, edi
		mov	[eax+110h], ecx
		mov	ecx, [eax+114h]
		add	ecx, [esp+68h+var_40]
		mov	[eax+104h], ebx
		mov	[eax+114h], ecx
		mov	ecx, [eax+118h]
		add	ecx, [esp+68h+var_3C]
		mov	[eax+118h], ecx
		mov	ecx, [eax+11Ch]
		pop	edi
		pop	esi
		add	ecx, edx
		pop	ebp
		mov	[eax+11Ch], ecx
		pop	ebx
		add	esp, 58h
		retn
sub_10003E30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100065B0(void	*Dst, void *Src, size_t	Size)
sub_100065B0	proc near		; CODE XREF: sub_10006670+44p
					; sub_10006810+58p ...

Dst		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+Size]
		push	ebp
		mov	ebp, [esp+8+Dst]
		mov	eax, [ebp+124h]
		push	edi
		mov	edi, eax
		and	edi, 3Fh
		test	ebx, ebx
		jz	loc_10006666
		add	eax, ebx
		mov	[ebp+124h], eax
		cmp	eax, ebx
		jnb	short loc_100065E0
		inc	dword ptr [ebp+120h]

loc_100065E0:				; CODE XREF: sub_100065B0+28j
		push	esi
		test	edi, edi
		jz	short loc_10006618
		mov	esi, 40h
		sub	esi, edi
		cmp	ebx, esi
		jnb	short loc_100065F2
		mov	esi, ebx

loc_100065F2:				; CODE XREF: sub_100065B0+3Ej
		mov	eax, [esp+10h+Src]
		push	esi		; Size
		push	eax		; Src
		lea	ecx, [edi+ebp]
		push	ecx		; Dst
		call	memcpy
		add	[esp+1Ch+Src], esi
		sub	ebx, esi
		add	esi, edi
		add	esp, 0Ch
		cmp	esi, 40h
		jnz	short loc_10006618
		mov	eax, ebp
		call	sub_10003E30

loc_10006618:				; CODE XREF: sub_100065B0+33j
					; sub_100065B0+5Fj
		cmp	ebx, 40h
		jb	short loc_10006652
		mov	eax, ebx
		shr	eax, 6
		mov	[esp+10h+Dst], eax
		jmp	short loc_10006630
; ---------------------------------------------------------------------------
		align 10h

loc_10006630:				; CODE XREF: sub_100065B0+76j
					; sub_100065B0+A0j
		mov	esi, [esp+10h+Src]
		add	[esp+10h+Src], 40h
		mov	ecx, 10h
		mov	edi, ebp
		mov	eax, ebp
		rep movsd
		sub	ebx, 40h
		call	sub_10003E30
		dec	[esp+10h+Dst]
		jnz	short loc_10006630

loc_10006652:				; CODE XREF: sub_100065B0+6Bj
		pop	esi
		test	ebx, ebx
		jz	short loc_10006666
		mov	edx, [esp+0Ch+Src]
		push	ebx		; Size
		push	edx		; Src
		push	ebp		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10006666:				; CODE XREF: sub_100065B0+18j
					; sub_100065B0+A5j
		pop	edi
		pop	ebp
		pop	ebx
		retn
sub_100065B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006670(void	*, void	*Dst, int, int)
sub_10006670	proc near		; CODE XREF: sub_10006810+6Ap
					; sub_100068A0+7Cp ...

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, [esi+124h]
		mov	edx, ecx
		and	edx, 3Fh
		mov	eax, 38h
		cmp	edx, 38h
		jb	short loc_1000668F
		mov	eax, 78h

loc_1000668F:				; CODE XREF: sub_10006670+18j
		push	ebx
		push	edi
		mov	edi, [esi+120h]
		sub	eax, edx
		add	edi, edi
		push	eax		; Size
		add	edi, edi
		mov	edx, ecx
		shr	edx, 1Dh
		push	offset dword_100396A8 ;	Src
		add	edi, edi
		push	esi		; Dst
		or	edi, edx
		lea	ebx, ds:0[ecx*8]
		call	sub_100065B0
		bswap	edi
		bswap	ebx
		add	esp, 0Ch
		mov	eax, esi
		mov	[esi+38h], edi
		mov	[esi+3Ch], ebx
		call	sub_10003E30
		mov	ecx, [esi+100h]
		mov	edx, [esi+104h]
		bswap	ecx
		lea	eax, [esi+100h]
		mov	[eax], ecx
		mov	ecx, [esi+108h]
		bswap	edx
		mov	[esi+104h], edx
		mov	edx, [esi+10Ch]
		bswap	ecx
		mov	[esi+108h], ecx
		mov	ecx, [esi+110h]
		bswap	edx
		mov	[esi+10Ch], edx
		mov	edx, [esi+114h]
		bswap	ecx
		mov	[esi+110h], ecx
		mov	ecx, [esi+118h]
		bswap	edx
		mov	[esi+114h], edx
		mov	edx, [esi+11Ch]
		bswap	ecx
		mov	[esi+118h], ecx
		mov	ecx, [esp+0Ch+arg_C]
		bswap	edx
		pop	edi
		mov	[esi+11Ch], edx
		pop	ebx
		mov	esi, 20h
		cmp	ecx, 20h
		ja	short loc_10006751
		mov	esi, ecx

loc_10006751:				; CODE XREF: sub_10006670+DDj
		push	esi		; Size
		push	eax		; Src
		mov	eax, [esp+0Ch+Dst]
		push	eax		; Dst
		call	memcpy
		mov	eax, [esp+10h+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000676A
		mov	[eax], esi

loc_1000676A:				; CODE XREF: sub_10006670+F6j
		pop	esi
		retn
sub_10006670	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006770(int,	void *Dst, int,	size_t Size)
sub_10006770	proc near		; CODE XREF: sub_100069E0+12j
					; DATA XREF: .rdata:10039C9Co

Src		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Size		= dword	ptr  10h

		sub	esp, 20h
		push	esi
		mov	esi, [esp+24h+arg_0]
		push	edi
		add	esi, 100h
		mov	ecx, 8
		lea	edi, [esp+28h+Src]
		rep movsd
		mov	eax, [esp+28h+Src]
		mov	ecx, [esp+28h+var_1C]
		mov	edx, [esp+28h+var_18]
		mov	esi, [esp+28h+Size]
		bswap	eax
		bswap	ecx
		mov	[esp+28h+Src], eax
		mov	eax, [esp+28h+var_14]
		mov	[esp+28h+var_1C], ecx
		mov	ecx, [esp+28h+var_10]
		bswap	edx
		bswap	eax
		bswap	ecx
		mov	[esp+28h+var_18], edx
		mov	edx, [esp+28h+var_C]
		mov	[esp+28h+var_14], eax
		mov	eax, [esp+28h+var_8]
		mov	[esp+28h+var_10], ecx
		mov	ecx, [esp+28h+var_4]
		bswap	edx
		bswap	eax
		bswap	ecx
		mov	[esp+28h+var_C], edx
		mov	[esp+28h+var_8], eax
		mov	[esp+28h+var_4], ecx
		cmp	esi, 20h
		jbe	short loc_100067E8
		mov	esi, 20h

loc_100067E8:				; CODE XREF: sub_10006770+71j
		mov	eax, [esp+28h+Dst]
		push	esi		; Size
		lea	edx, [esp+2Ch+Src]
		push	edx		; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esp+34h+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10006805
		mov	[eax], esi

loc_10006805:				; CODE XREF: sub_10006770+91j
		pop	edi
		pop	esi
		add	esp, 20h
		retn
sub_10006770	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006810(void	*, void	*Src, size_t Size)
sub_10006810	proc near		; CODE XREF: sub_1000BDC0+1E8p
					; sub_1000BDC0+20Dp
					; DATA XREF: ...

var_130		= dword	ptr -130h
Dst		= byte ptr -12Ch
var_2C		= byte ptr -2Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		push	ebx
		mov	ebx, [esp+134h+arg_0]
		push	ebp
		mov	ebp, [esp+138h+Src]
		push	esi
		push	edi
		push	128h		; Size
		lea	eax, [esp+144h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	ecx, 8
		mov	esi, offset dword_10039898
		lea	edi, [esp+14Ch+var_2C]
		rep movsd
		mov	ecx, [esp+14Ch+Size]
		push	ecx		; Size
		lea	edx, [esp+150h+Dst]
		push	ebp		; Src
		push	edx		; Dst
		call	sub_100065B0
		push	20h		; int
		lea	eax, [esp+15Ch+var_130]
		push	eax		; int
		lea	ecx, [esp+160h+Dst]
		push	ebx		; Dst
		push	ecx		; void *
		call	sub_10006670
		mov	ecx, [esp+168h+var_4]
		add	esp, 28h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn
sub_10006810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100068A0(int,	void *Src)
sub_100068A0	proc near		; DATA XREF: .rdata:100392ECo

var_130		= dword	ptr -130h
Dst		= byte ptr -12Ch
var_2C		= byte ptr -2Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		mov	eax, [esp+130h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+138h+Src]
		mov	[esp+138h+var_130], eax
		push	esi
		mov	eax, ebp
		push	edi
		lea	edx, [eax+1]
		nop

loc_100068D0:				; CODE XREF: sub_100068A0+35j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100068D0
		push	128h		; Size
		lea	ecx, [esp+144h+Dst]
		sub	eax, edx
		push	0		; Val
		push	ecx		; Dst
		mov	ebx, eax
		call	memset
		push	ebx		; Size
		lea	edx, [esp+150h+Dst]
		push	ebp		; Src
		mov	ecx, 8
		mov	esi, offset dword_10039898
		lea	edi, [esp+154h+var_2C]
		push	edx		; Dst
		rep movsd
		call	sub_100065B0
		mov	ecx, [esp+158h+var_130]
		push	20h		; int
		lea	eax, [esp+15Ch+var_130]
		push	eax		; int
		push	ecx		; Dst
		lea	edx, [esp+164h+Dst]
		push	edx		; void *
		call	sub_10006670
		mov	ecx, [esp+168h+var_4]
		add	esp, 28h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn
sub_100068A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006940	proc near		; DATA XREF: .rdata:100392F4o
					; .rdata:10039488o
		mov	eax, 128h
		retn
sub_10006940	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006950	proc near		; DATA XREF: .rdata:100392FCo
					; .rdata:10039490o

arg_0		= dword	ptr  4

		push	128h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jz	short locret_10006972
		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	ecx, 4Ah
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi

locret_10006972:			; CODE XREF: sub_10006950+Fj
		retn
sub_10006950	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006980(void	*Dst)
sub_10006980	proc near		; DATA XREF: .rdata:10039470o
					; .rdata:10039D00o

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	edi
		push	128h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		lea	edi, [esi+100h]
		add	esp, 0Ch
		mov	ecx, 8
		mov	esi, offset dword_100398B8
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10006980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl sub_100069B0(void	*Dst, void *Src, size_t	Size)
sub_100069B0	proc near		; DATA XREF: .rdata:10039474o
					; .rdata:10039D04o

Dst		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		jmp	sub_100065B0
sub_100069B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100069C0	proc near		; DATA XREF: .rdata:10039478o
					; .rdata:10039D08o

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		cmp	eax, 1Ch
		jb	short loc_100069CE
		mov	eax, 1Ch

loc_100069CE:				; CODE XREF: sub_100069C0+7j
		mov	[esp+arg_C], eax ; int
		jmp	sub_10006670
sub_100069C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100069E0(int,	int, int, size_t Size)
sub_100069E0	proc near		; DATA XREF: .rdata:10039D14o

Size		= dword	ptr  10h

		mov	eax, [esp+Size]
		cmp	eax, 1Ch
		jb	short loc_100069EE
		mov	eax, 1Ch

loc_100069EE:				; CODE XREF: sub_100069E0+7j
		mov	[esp+Size], eax	; Size
		jmp	sub_10006770
sub_100069E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006A00(void	*, void	*Src, size_t Size)
sub_10006A00	proc near		; DATA XREF: .rdata:1003947Co

var_130		= dword	ptr -130h
Dst		= byte ptr -12Ch
var_2C		= byte ptr -2Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		push	ebx
		mov	ebx, [esp+134h+arg_0]
		push	ebp
		mov	ebp, [esp+138h+Src]
		push	esi
		push	edi
		push	128h		; Size
		lea	eax, [esp+144h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	ecx, 8
		mov	esi, offset dword_100398B8
		lea	edi, [esp+14Ch+var_2C]
		rep movsd
		mov	ecx, [esp+14Ch+Size]
		push	ecx		; Size
		lea	edx, [esp+150h+Dst]
		push	ebp		; Src
		push	edx		; Dst
		call	sub_100065B0
		push	1Ch		; int
		lea	eax, [esp+15Ch+var_130]
		push	eax		; int
		lea	ecx, [esp+160h+Dst]
		push	ebx		; Dst
		push	ecx		; void *
		call	sub_10006670
		mov	ecx, [esp+168h+var_4]
		add	esp, 28h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn
sub_10006A00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006A90(int,	void *Src)
sub_10006A90	proc near		; DATA XREF: .rdata:10039480o

var_130		= dword	ptr -130h
Dst		= byte ptr -12Ch
var_2C		= byte ptr -2Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		mov	eax, [esp+130h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+138h+Src]
		mov	[esp+138h+var_130], eax
		push	esi
		mov	eax, ebp
		push	edi
		lea	edx, [eax+1]
		nop

loc_10006AC0:				; CODE XREF: sub_10006A90+35j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10006AC0
		push	128h		; Size
		lea	ecx, [esp+144h+Dst]
		sub	eax, edx
		push	0		; Val
		push	ecx		; Dst
		mov	ebx, eax
		call	memset
		push	ebx		; Size
		lea	edx, [esp+150h+Dst]
		push	ebp		; Src
		mov	ecx, 8
		mov	esi, offset dword_100398B8
		lea	edi, [esp+154h+var_2C]
		push	edx		; Dst
		rep movsd
		call	sub_100065B0
		mov	ecx, [esp+158h+var_130]
		push	1Ch		; int
		lea	eax, [esp+15Ch+var_130]
		push	eax		; int
		push	ecx		; Dst
		lea	edx, [esp+164h+Dst]
		push	edx		; void *
		call	sub_10006670
		mov	ecx, [esp+168h+var_4]
		add	esp, 28h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn
sub_10006A90	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006B40	proc near		; DATA XREF: .rdata:100392F8o
					; .rdata:1003948Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	ecx, 4Ah
		rep movsd
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10006B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006B60	proc near		; DATA XREF: .rdata:100393C0o
					; .rdata:10039494o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, 4Ah
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10006B60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006B80(void	*Dst)
sub_10006B80	proc near		; DATA XREF: .rdata:10039308o
					; .rdata:10039CD8o

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	edi
		push	2C8h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		lea	edi, [esi+280h]
		add	esp, 0Ch
		mov	ecx, 10h
		mov	esi, offset dword_10039B58
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10006B80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006BB0	proc near		; CODE XREF: sub_10007D30+66p
					; sub_10007D30+97p ...

var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 94h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ecx, [eax]
		mov	edx, [eax+4]
		bswap	edx
		mov	[eax], edx
		mov	edx, [eax+8]
		bswap	edx
		bswap	ecx
		mov	esi, [eax+0Ch]
		bswap	esi
		mov	[eax+8], esi
		mov	esi, [eax+14h]
		mov	[eax+0Ch], edx
		mov	edx, [eax+10h]
		bswap	edx
		bswap	esi
		mov	[eax+10h], esi
		mov	esi, [eax+1Ch]
		mov	[eax+14h], edx
		mov	edx, [eax+18h]
		bswap	edx
		bswap	esi
		mov	[eax+4], ecx
		lea	ecx, [eax+8]
		mov	[eax+18h], esi
		mov	esi, [eax+24h]
		mov	[eax+1Ch], edx
		mov	edx, [eax+20h]
		bswap	edx
		bswap	esi
		mov	[eax+20h], esi
		mov	esi, [eax+2Ch]
		mov	[eax+24h], edx
		mov	edx, [eax+28h]
		bswap	edx
		bswap	esi
		mov	[eax+28h], esi
		mov	esi, [eax+34h]
		mov	[eax+2Ch], edx
		mov	edx, [eax+30h]
		bswap	edx
		bswap	esi
		mov	[eax+30h], esi
		mov	esi, [eax+3Ch]
		mov	[eax+34h], edx
		mov	edx, [eax+38h]
		bswap	edx
		bswap	esi
		mov	[eax+38h], esi
		mov	esi, [eax+44h]
		mov	[eax+3Ch], edx
		mov	edx, [eax+40h]
		bswap	edx
		bswap	esi
		mov	[eax+40h], esi
		mov	esi, [eax+4Ch]
		mov	[eax+44h], edx
		mov	edx, [eax+48h]
		bswap	edx
		bswap	esi
		mov	[eax+48h], esi
		mov	esi, [eax+54h]
		mov	[eax+4Ch], edx
		mov	edx, [eax+50h]
		bswap	edx
		bswap	esi
		mov	[eax+50h], esi
		mov	esi, [eax+5Ch]
		mov	[eax+54h], edx
		mov	edx, [eax+58h]
		bswap	edx
		bswap	esi
		mov	[eax+58h], esi
		mov	esi, [eax+64h]
		mov	[eax+5Ch], edx
		mov	edx, [eax+60h]
		bswap	edx
		bswap	esi
		mov	[eax+60h], esi
		mov	esi, [eax+6Ch]
		mov	[eax+64h], edx
		mov	edx, [eax+68h]
		bswap	edx
		bswap	esi
		mov	[eax+68h], esi
		mov	esi, [eax+74h]
		mov	[eax+6Ch], edx
		mov	edx, [eax+70h]
		bswap	edx
		bswap	esi
		mov	[eax+70h], esi
		mov	esi, [eax+7Ch]
		mov	[eax+74h], edx
		mov	edx, [eax+78h]
		bswap	edx
		bswap	esi
		mov	[eax+78h], esi
		mov	[eax+7Ch], edx
		mov	[esp+0A4h+var_44], 40h

loc_10006CC3:				; CODE XREF: sub_10006BB0+1FFj
		mov	esi, [ecx+6Ch]
		mov	edi, [ecx+68h]
		mov	ebx, edi
		shr	ebx, 13h
		mov	edx, esi
		shl	edx, 0Dh
		or	edx, ebx
		mov	ebp, edi
		mov	ebx, esi
		shl	ebx, 1Ah
		shr	ebp, 6
		or	ebx, ebp
		xor	edx, ebx
		add	edi, edi
		add	edi, edi
		mov	ebx, esi
		add	edi, edi
		shr	ebx, 1Dh
		or	ebx, edi
		mov	edi, [ecx+40h]
		xor	edx, ebx
		add	edx, edi
		mov	[esp+0A4h+var_94], 0
		cmp	edx, edi
		jnb	short loc_10006D0B
		mov	[esp+0A4h+var_94], 1

loc_10006D0B:				; CODE XREF: sub_10006BB0+151j
		mov	edi, [ecx+4]
		mov	ebp, [ecx]
		shr	ebp, 8
		mov	ebx, edi
		shl	ebx, 18h
		or	ebx, ebp
		mov	ebp, [ecx]
		mov	[esp+0A4h+var_5C], ebx
		shr	ebp, 7
		mov	ebx, edi
		shl	ebx, 19h
		or	ebx, ebp
		xor	[esp+0A4h+var_5C], ebx
		mov	ebx, [ecx]
		shr	ebx, 1
		mov	ebp, edi
		shl	ebp, 1Fh
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_5C]
		xor	ebx, ebp
		add	edx, ebx
		cmp	edx, ebx
		jnb	short loc_10006D49
		inc	[esp+0A4h+var_94]

loc_10006D49:				; CODE XREF: sub_10006BB0+193j
		mov	ebx, [ecx-8]
		add	edx, ebx
		cmp	edx, ebx
		jnb	short loc_10006D56
		inc	[esp+0A4h+var_94]

loc_10006D56:				; CODE XREF: sub_10006BB0+1A0j
		mov	[ecx+78h], edx
		mov	edx, [ecx]
		mov	ebx, edi
		shr	ebx, 1
		mov	ebp, edx
		shl	ebp, 1Fh
		or	ebx, ebp
		mov	ebp, edi
		shr	ebp, 8
		shl	edx, 18h
		or	ebp, edx
		mov	edx, [ecx+68h]
		xor	ebx, ebp
		shr	edi, 7
		xor	ebx, edi
		mov	ebp, edx
		shr	ebp, 1Dh
		lea	edi, ds:0[esi*8]
		or	edi, ebp
		mov	ebp, esi
		shr	ebp, 13h
		shl	edx, 0Dh
		or	ebp, edx
		xor	edi, ebp
		shr	esi, 6
		xor	edi, esi
		add	ebx, edi
		add	ebx, [ecx+44h]
		add	ecx, 8
		add	ebx, [ecx-0Ch]
		add	ebx, [esp+0A4h+var_94]
		dec	[esp+0A4h+var_44]
		mov	[ecx+74h], ebx
		jnz	loc_10006CC3
		mov	edi, [eax+2BCh]
		mov	[esp+0A4h+var_4C], edi
		lea	edi, [eax+8]
		mov	[esp+0A4h+var_90], edi
		mov	edi, offset dword_100398D8
		sub	edi, eax
		mov	[esp+0A4h+var_4], edi
		mov	ecx, [eax+284h]
		mov	edi, offset dword_100398DC
		sub	edi, eax
		mov	[esp+0A4h+var_30], edi
		mov	edi, offset dword_100398E0
		sub	edi, eax
		mov	[esp+0A4h+var_38], edi
		mov	edi, offset dword_100398E4
		sub	edi, eax
		mov	[esp+0A4h+var_34], edi
		mov	edi, offset dword_100398E8
		sub	edi, eax
		mov	[esp+0A4h+var_2C], edi
		mov	edi, offset dword_100398EC
		sub	edi, eax
		mov	[esp+0A4h+var_24], edi
		mov	[esp+0A4h+var_54], ecx
		mov	ecx, [eax+288h]
		mov	edi, offset dword_100398F0
		sub	edi, eax
		mov	[esp+0A4h+var_1C], edi
		mov	[esp+0A4h+var_7C], ecx
		mov	ecx, [eax+28Ch]
		mov	ebx, [eax+2A0h]
		mov	esi, [eax+2A4h]
		mov	edi, offset dword_100398F4
		sub	edi, eax
		mov	[esp+0A4h+var_14], edi
		mov	[esp+0A4h+var_78], ecx
		mov	ecx, [eax+290h]
		mov	edx, [eax+280h]
		mov	[esp+0A4h+var_84], ecx
		mov	ecx, [eax+294h]
		mov	edi, offset dword_100398F8
		sub	edi, eax
		mov	[esp+0A4h+var_C], edi
		mov	[esp+0A4h+var_80], ecx
		mov	ecx, [eax+298h]
		mov	edi, offset dword_100398FC
		sub	edi, eax
		mov	[esp+0A4h+var_3C], edi
		mov	[esp+0A4h+var_8C], ecx
		mov	ecx, [eax+29Ch]
		mov	edi, offset dword_10039900
		sub	edi, eax
		mov	[esp+0A4h+var_18], edi
		mov	[esp+0A4h+var_88], ecx
		mov	ecx, [eax+2A8h]
		mov	edi, offset dword_10039904
		sub	edi, eax
		mov	[esp+0A4h+var_74], ecx
		mov	ecx, [eax+2ACh]
		mov	[esp+0A4h+var_28], edi
		mov	[esp+0A4h+var_70], ecx
		mov	ecx, [eax+2B0h]
		mov	edi, offset dword_10039908
		sub	edi, eax
		mov	[esp+0A4h+var_8], edi
		mov	[esp+0A4h+var_64], ecx
		mov	ecx, [eax+2B4h]
		mov	edi, offset dword_1003990C
		sub	edi, eax
		mov	[esp+0A4h+var_60], ecx
		mov	ecx, [eax+2B8h]
		mov	[esp+0A4h+var_6C], ebx
		mov	[esp+0A4h+var_68], esi
		mov	[esp+0A4h+var_5C], offset dword_100398DC
		mov	[esp+0A4h+var_20], edi
		jmp	short loc_10006F18
; ---------------------------------------------------------------------------

loc_10006F10:				; CODE XREF: sub_10006BB0+1088j
		mov	ebx, [esp+0A4h+var_6C]
		mov	esi, [esp+0A4h+var_68]

loc_10006F18:				; CODE XREF: sub_10006BB0+35Ej
		mov	ebp, [esp+0A4h+var_74]
		and	ebp, ebx
		mov	edi, ebx
		not	edi
		and	edi, [esp+0A4h+var_64]
		xor	edi, ebp
		mov	[esp+0A4h+var_48], edi
		mov	ebp, ebx
		shl	ebp, 17h
		shr	ebx, 12h
		mov	edi, esi
		shr	edi, 9
		or	edi, ebp
		mov	ebp, esi
		shl	ebp, 0Eh
		or	ebp, ebx
		xor	edi, ebp
		mov	ebp, [esp+0A4h+var_6C]
		shr	ebp, 0Eh
		mov	ebx, esi
		shl	ebx, 12h
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_5C]
		mov	ebp, [ebp-4]
		xor	edi, ebx
		mov	ebx, [esp+0A4h+var_48]
		add	edi, ebx
		cmp	edi, ebx
		sbb	ebx, ebx
		neg	ebx
		add	edi, ebp
		mov	[esp+0A4h+var_94], ebx
		cmp	edi, ebp
		jnb	short loc_10006F76
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10006F76:				; CODE XREF: sub_10006BB0+3BFj
		mov	ebp, [esp+0A4h+var_90]
		mov	ebp, [ebp-8]
		add	edi, ebp
		cmp	edi, ebp
		jnb	short loc_10006F88
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10006F88:				; CODE XREF: sub_10006BB0+3D1j
		add	ecx, edi
		cmp	ecx, edi
		jnb	short loc_10006F93
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10006F93:				; CODE XREF: sub_10006BB0+3DCj
		mov	edi, [esp+0A4h+var_6C]
		mov	ebp, edi
		shl	ebp, 12h
		shl	edi, 0Eh
		mov	ebx, esi
		shr	ebx, 0Eh
		or	ebx, ebp
		mov	ebp, esi
		shr	ebp, 12h
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_6C]
		mov	edi, esi
		shl	edi, 17h
		shr	ebp, 9
		or	edi, ebp
		mov	ebp, [esp+0A4h+var_70]
		xor	ebx, edi
		and	ebp, esi
		mov	edi, esi
		mov	esi, [esp+0A4h+var_90]
		not	edi
		and	edi, [esp+0A4h+var_60]
		xor	edi, ebp
		add	ebx, edi
		add	ebx, [esi-4]
		mov	esi, [esp+0A4h+var_5C]
		add	ebx, [esi]
		mov	edi, [esp+0A4h+var_8C]
		add	ebx, [esp+0A4h+var_94]
		mov	esi, [esp+0A4h+var_4C]
		add	esi, ebx
		mov	ebx, [esp+0A4h+var_54]
		add	edi, ecx
		cmp	edi, ecx
		mov	[esp+0A4h+var_8C], edi
		sbb	edi, edi
		neg	edi
		add	edi, esi
		add	[esp+0A4h+var_88], edi
		mov	[esp+0A4h+var_4C], esi
		mov	esi, [esp+0A4h+var_7C]
		mov	edi, esi
		xor	edi, edx
		and	edi, [esp+0A4h+var_84]
		and	esi, edx
		xor	edi, esi
		mov	esi, ebx
		shl	esi, 4
		mov	ebp, edx
		shr	ebp, 1Ch
		or	esi, ebp
		shr	ebx, 2
		mov	ebp, edx
		shl	ebp, 1Eh
		or	ebx, ebp
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_54]
		shr	ebx, 7
		mov	ebp, edx
		shl	ebp, 19h
		or	ebx, ebp
		xor	esi, ebx
		add	esi, edi
		cmp	esi, edi
		sbb	edi, edi
		neg	edi
		add	ecx, esi
		mov	[esp+0A4h+var_94], edi
		cmp	ecx, esi
		jnb	short loc_10007055
		inc	edi
		mov	[esp+0A4h+var_94], edi

loc_10007055:				; CODE XREF: sub_10006BB0+49Ej
		mov	esi, [esp+0A4h+var_54]
		mov	ebx, esi
		shl	ebx, 19h
		mov	edi, edx
		shr	edi, 7
		or	ebx, edi
		mov	edi, esi
		shl	edi, 1Eh
		mov	ebp, edx
		shr	ebp, 2
		or	edi, ebp
		xor	ebx, edi
		mov	edi, esi
		shr	edi, 1Ch
		mov	ebp, edx
		shl	ebp, 4
		or	edi, ebp
		xor	ebx, edi
		add	ebx, [esp+0A4h+var_94]
		mov	edi, [esp+0A4h+var_78]
		mov	ebp, edi
		xor	ebp, esi
		and	ebp, [esp+0A4h+var_80]
		and	edi, esi
		xor	ebp, edi
		add	ebp, ebx
		mov	ebx, [esp+0A4h+var_8C]
		add	[esp+0A4h+var_4C], ebp
		mov	edi, ebx
		mov	esi, ebx
		and	esi, [esp+0A4h+var_6C]
		not	edi
		and	edi, [esp+0A4h+var_74]
		mov	ebp, ebx
		xor	edi, esi
		mov	esi, [esp+0A4h+var_88]
		shl	ebp, 17h
		shr	esi, 9
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_88]
		shr	ebx, 12h
		shl	ebp, 0Eh
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_88]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_8C]
		shl	ebx, 12h
		shr	ebp, 0Eh
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_90]
		xor	esi, ebx
		add	esi, edi
		cmp	esi, edi
		mov	edi, [esp+0A4h+var_4]
		mov	edi, [edi+ebp]
		sbb	ebx, ebx
		neg	ebx
		add	esi, edi
		mov	[esp+0A4h+var_94], ebx
		cmp	esi, edi
		jnb	short loc_10007102
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10007102:				; CODE XREF: sub_10006BB0+54Bj
		mov	ebp, [ebp+0]
		add	esi, ebp
		cmp	esi, ebp
		jnb	short loc_10007110
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10007110:				; CODE XREF: sub_10006BB0+559j
		mov	edi, [esp+0A4h+var_64]
		add	edi, esi
		mov	[esp+0A4h+var_64], edi
		cmp	edi, esi
		jnb	short loc_10007123
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10007123:				; CODE XREF: sub_10006BB0+56Cj
		mov	esi, [esp+0A4h+var_88]
		mov	edi, [esp+0A4h+var_8C]
		mov	ebp, edi
		mov	ebx, esi
		shr	ebx, 0Eh
		shl	ebp, 12h
		or	ebx, ebp
		shl	edi, 0Eh
		mov	ebp, esi
		shr	ebp, 12h
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_8C]
		mov	edi, esi
		shl	edi, 17h
		shr	ebp, 9
		or	edi, ebp
		xor	ebx, edi
		mov	edi, esi
		and	esi, [esp+0A4h+var_68]
		not	edi
		and	edi, [esp+0A4h+var_70]
		mov	ebp, ecx
		xor	edi, esi
		mov	esi, [esp+0A4h+var_90]
		add	ebx, edi
		mov	edi, [esp+0A4h+var_30]
		add	ebx, [edi+esi]
		mov	edi, [esp+0A4h+var_60]
		add	ebx, [esi+4]
		mov	esi, [esp+0A4h+var_64]
		add	ebx, [esp+0A4h+var_94]
		add	edi, ebx
		mov	ebx, [esp+0A4h+var_84]
		add	ebx, esi
		cmp	ebx, esi
		sbb	esi, esi
		neg	esi
		add	esi, edi
		add	[esp+0A4h+var_80], esi
		mov	[esp+0A4h+var_60], edi
		mov	[esp+0A4h+var_84], ebx
		mov	ebx, [esp+0A4h+var_4C]
		mov	edi, edx
		xor	edi, ecx
		and	edi, [esp+0A4h+var_7C]
		mov	esi, edx
		and	esi, ecx
		xor	edi, esi
		mov	esi, ebx
		shr	ebp, 1Ch
		shl	esi, 4
		or	esi, ebp
		shr	ebx, 2
		mov	ebp, ecx
		shl	ebp, 1Eh
		or	ebx, ebp
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_4C]
		shr	ebx, 7
		mov	ebp, ecx
		shl	ebp, 19h
		or	ebx, ebp
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_64]
		add	esi, edi
		cmp	esi, edi
		sbb	edi, edi
		add	ebx, esi
		neg	edi
		mov	[esp+0A4h+var_94], edi
		mov	[esp+0A4h+var_64], ebx
		cmp	ebx, esi
		jnb	short loc_100071F2
		inc	edi
		mov	[esp+0A4h+var_94], edi

loc_100071F2:				; CODE XREF: sub_10006BB0+63Bj
		mov	esi, [esp+0A4h+var_4C]
		mov	ebx, esi
		shl	ebx, 19h
		mov	edi, ecx
		shr	edi, 7
		or	ebx, edi
		mov	edi, esi
		shl	edi, 1Eh
		mov	ebp, ecx
		shr	ebp, 2
		or	edi, ebp
		xor	ebx, edi
		mov	edi, esi
		shr	edi, 1Ch
		mov	ebp, ecx
		shl	ebp, 4
		or	edi, ebp
		xor	ebx, edi
		add	ebx, [esp+0A4h+var_94]
		mov	edi, [esp+0A4h+var_54]
		mov	ebp, edi
		xor	ebp, esi
		and	ebp, [esp+0A4h+var_78]
		and	edi, esi
		xor	ebp, edi
		add	ebp, ebx
		mov	ebx, [esp+0A4h+var_84]
		add	[esp+0A4h+var_60], ebp
		mov	edi, ebx
		mov	esi, ebx
		and	esi, [esp+0A4h+var_8C]
		not	edi
		and	edi, [esp+0A4h+var_6C]
		mov	ebp, ebx
		xor	edi, esi
		mov	esi, [esp+0A4h+var_80]
		shl	ebp, 17h
		shr	esi, 9
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_80]
		shr	ebx, 12h
		shl	ebp, 0Eh
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_80]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_84]
		shl	ebx, 12h
		shr	ebp, 0Eh
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_90]
		xor	esi, ebx
		add	esi, edi
		cmp	esi, edi
		mov	edi, [esp+0A4h+var_38]
		mov	edi, [edi+ebp]
		sbb	ebx, ebx
		neg	ebx
		add	esi, edi
		mov	[esp+0A4h+var_94], ebx
		cmp	esi, edi
		jnb	short loc_1000729C
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_1000729C:				; CODE XREF: sub_10006BB0+6E5j
		mov	ebp, [ebp+8]
		add	esi, ebp
		cmp	esi, ebp
		jnb	short loc_100072AA
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_100072AA:				; CODE XREF: sub_10006BB0+6F3j
		mov	edi, [esp+0A4h+var_74]
		add	edi, esi
		mov	[esp+0A4h+var_74], edi
		cmp	edi, esi
		jnb	short loc_100072BD
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_100072BD:				; CODE XREF: sub_10006BB0+706j
		mov	esi, [esp+0A4h+var_80]
		mov	edi, [esp+0A4h+var_84]
		mov	ebp, edi
		mov	ebx, esi
		shr	ebx, 0Eh
		shl	ebp, 12h
		or	ebx, ebp
		shl	edi, 0Eh
		mov	ebp, esi
		shr	ebp, 12h
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_84]
		mov	edi, esi
		shl	edi, 17h
		shr	ebp, 9
		or	edi, ebp
		xor	ebx, edi
		mov	edi, esi
		and	esi, [esp+0A4h+var_88]
		not	edi
		and	edi, [esp+0A4h+var_68]
		xor	edi, esi
		mov	esi, [esp+0A4h+var_90]
		add	ebx, edi
		mov	edi, [esp+0A4h+var_34]
		add	ebx, [edi+esi]
		mov	edi, [esp+0A4h+var_70]
		add	ebx, [esi+0Ch]
		mov	esi, [esp+0A4h+var_74]
		add	ebx, [esp+0A4h+var_94]
		add	edi, ebx
		mov	ebx, [esp+0A4h+var_7C]
		add	ebx, esi
		cmp	ebx, esi
		sbb	esi, esi
		neg	esi
		add	esi, edi
		add	[esp+0A4h+var_78], esi
		mov	[esp+0A4h+var_7C], ebx
		mov	ebx, [esp+0A4h+var_64]
		mov	[esp+0A4h+var_70], edi
		mov	edi, ecx
		xor	edi, ebx
		and	edi, edx
		mov	ebp, ebx
		mov	esi, ecx
		and	esi, ebx
		xor	edi, esi
		mov	esi, [esp+0A4h+var_60]
		shr	ebp, 1Ch
		shl	esi, 4
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_60]
		shl	ebx, 1Eh
		shr	ebp, 2
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_60]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_64]
		shr	ebx, 7
		shl	ebp, 19h
		or	ebx, ebp
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_74]
		add	esi, edi
		cmp	esi, edi
		sbb	edi, edi
		add	ebx, esi
		neg	edi
		mov	[esp+0A4h+var_94], edi
		mov	[esp+0A4h+var_74], ebx
		cmp	ebx, esi
		jnb	short loc_10007390
		inc	edi
		mov	[esp+0A4h+var_94], edi

loc_10007390:				; CODE XREF: sub_10006BB0+7D9j
		mov	esi, [esp+0A4h+var_60]
		mov	edi, [esp+0A4h+var_64]
		mov	ebp, edi
		shr	ebp, 7
		mov	ebx, esi
		shl	ebx, 19h
		or	ebx, ebp
		shr	edi, 2
		mov	ebp, esi
		shl	ebp, 1Eh
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_64]
		shl	ebp, 4
		mov	edi, esi
		shr	edi, 1Ch
		or	edi, ebp
		xor	ebx, edi
		add	ebx, [esp+0A4h+var_94]
		mov	edi, [esp+0A4h+var_4C]
		mov	ebp, edi
		xor	ebp, esi
		and	ebp, [esp+0A4h+var_54]
		and	edi, esi
		mov	esi, [esp+0A4h+var_84]
		xor	ebp, edi
		add	ebp, ebx
		mov	ebx, [esp+0A4h+var_7C]
		add	[esp+0A4h+var_70], ebp
		and	esi, ebx
		mov	edi, ebx
		not	edi
		and	edi, [esp+0A4h+var_8C]
		mov	ebp, ebx
		xor	edi, esi
		mov	esi, [esp+0A4h+var_78]
		shl	ebp, 17h
		shr	esi, 9
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_78]
		shr	ebx, 12h
		shl	ebp, 0Eh
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_78]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_7C]
		shl	ebx, 12h
		shr	ebp, 0Eh
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_90]
		xor	esi, ebx
		add	esi, edi
		cmp	esi, edi
		mov	edi, [esp+0A4h+var_2C]
		mov	edi, [edi+ebp]
		sbb	ebx, ebx
		neg	ebx
		add	esi, edi
		mov	[esp+0A4h+var_94], ebx
		cmp	esi, edi
		jnb	short loc_1000743E
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_1000743E:				; CODE XREF: sub_10006BB0+887j
		mov	ebp, [ebp+10h]
		add	esi, ebp
		cmp	esi, ebp
		jnb	short loc_1000744C
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_1000744C:				; CODE XREF: sub_10006BB0+895j
		mov	edi, [esp+0A4h+var_6C]
		add	edi, esi
		mov	[esp+0A4h+var_6C], edi
		cmp	edi, esi
		jnb	short loc_1000745F
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_1000745F:				; CODE XREF: sub_10006BB0+8A8j
		mov	esi, [esp+0A4h+var_78]
		mov	edi, [esp+0A4h+var_7C]
		mov	ebp, edi
		shl	ebp, 12h
		mov	ebx, esi
		shr	ebx, 0Eh
		or	ebx, ebp
		shl	edi, 0Eh
		mov	ebp, esi
		shr	ebp, 12h
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_7C]
		mov	edi, esi
		shl	edi, 17h
		shr	ebp, 9
		or	edi, ebp
		mov	ebp, [esp+0A4h+var_80]
		xor	ebx, edi
		and	ebp, esi
		mov	edi, esi
		mov	esi, [esp+0A4h+var_90]
		not	edi
		and	edi, [esp+0A4h+var_88]
		xor	edi, ebp
		add	ebx, edi
		mov	edi, [esp+0A4h+var_24]
		add	ebx, [edi+esi]
		mov	edi, [esp+0A4h+var_68]
		add	ebx, [esi+14h]
		mov	esi, [esp+0A4h+var_6C]
		add	ebx, [esp+0A4h+var_94]
		add	edx, esi
		add	edi, ebx
		mov	ebx, [esp+0A4h+var_74]
		cmp	edx, esi
		sbb	esi, esi
		neg	esi
		add	esi, edi
		add	[esp+0A4h+var_54], esi
		mov	esi, [esp+0A4h+var_64]
		mov	[esp+0A4h+var_68], edi
		mov	edi, esi
		and	esi, ebx
		xor	edi, ebx
		and	edi, ecx
		xor	edi, esi
		mov	esi, [esp+0A4h+var_70]
		mov	ebp, ebx
		shr	ebp, 1Ch
		shl	esi, 4
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_70]
		shl	ebx, 1Eh
		shr	ebp, 2
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_70]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_74]
		shr	ebx, 7
		shl	ebp, 19h
		or	ebx, ebp
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_6C]
		add	esi, edi
		cmp	esi, edi
		sbb	edi, edi
		add	ebx, esi
		neg	edi
		mov	[esp+0A4h+var_94], edi
		mov	[esp+0A4h+var_6C], ebx
		cmp	ebx, esi
		jnb	short loc_10007531
		inc	edi
		mov	[esp+0A4h+var_94], edi

loc_10007531:				; CODE XREF: sub_10006BB0+97Aj
		mov	esi, [esp+0A4h+var_70]
		mov	edi, [esp+0A4h+var_74]
		mov	ebx, esi
		shl	ebx, 19h
		mov	ebp, edi
		shr	ebp, 7
		or	ebx, ebp
		mov	ebp, esi
		shl	ebp, 1Eh
		shr	edi, 2
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_74]
		mov	edi, esi
		shl	ebp, 4
		shr	edi, 1Ch
		or	edi, ebp
		xor	ebx, edi
		add	ebx, [esp+0A4h+var_94]
		mov	edi, [esp+0A4h+var_60]
		mov	ebp, edi
		xor	ebp, esi
		and	ebp, [esp+0A4h+var_4C]
		and	edi, esi
		xor	ebp, edi
		mov	edi, [esp+0A4h+var_7C]
		add	ebp, ebx
		add	[esp+0A4h+var_68], ebp
		mov	esi, edx
		not	esi
		and	esi, [esp+0A4h+var_84]
		and	edi, edx
		xor	esi, edi
		mov	edi, [esp+0A4h+var_54]
		mov	[esp+0A4h+var_94], esi
		mov	esi, edi
		shr	esi, 9
		mov	ebx, edx
		shl	ebx, 17h
		or	esi, ebx
		mov	ebx, edi
		shl	ebx, 0Eh
		mov	ebp, edx
		shr	ebp, 12h
		or	ebx, ebp
		xor	esi, ebx
		mov	ebx, edi
		shl	ebx, 12h
		mov	ebp, edx
		shr	ebp, 0Eh
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_90]
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_94]
		add	esi, ebx
		cmp	esi, ebx
		sbb	ebx, ebx
		neg	ebx
		mov	[esp+0A4h+var_94], ebx
		mov	ebx, [esp+0A4h+var_1C]
		mov	ebx, [ebx+ebp]
		add	esi, ebx
		cmp	esi, ebx
		jnb	short loc_100075E3
		inc	[esp+0A4h+var_94]

loc_100075E3:				; CODE XREF: sub_10006BB0+A2Dj
		mov	ebp, [ebp+18h]
		add	esi, ebp
		cmp	esi, ebp
		jnb	short loc_100075F0
		inc	[esp+0A4h+var_94]

loc_100075F0:				; CODE XREF: sub_10006BB0+A3Aj
		mov	ebx, [esp+0A4h+var_8C]
		add	ebx, esi
		mov	[esp+0A4h+var_8C], ebx
		cmp	ebx, esi
		jnb	short loc_10007602
		inc	[esp+0A4h+var_94]

loc_10007602:				; CODE XREF: sub_10006BB0+A4Cj
		mov	ebx, edi
		shr	ebx, 0Eh
		mov	esi, edx
		shl	esi, 12h
		or	ebx, esi
		mov	esi, edi
		shr	esi, 12h
		mov	ebp, edx
		shl	ebp, 0Eh
		or	esi, ebp
		xor	ebx, esi
		mov	esi, edi
		shl	esi, 17h
		mov	ebp, edx
		shr	ebp, 9
		or	esi, ebp
		xor	ebx, esi
		mov	ebp, [esp+0A4h+var_78]
		and	ebp, edi
		mov	esi, edi
		mov	edi, [esp+0A4h+var_14]
		not	esi
		and	esi, [esp+0A4h+var_80]
		xor	esi, ebp
		add	ebx, esi
		mov	esi, [esp+0A4h+var_90]
		add	ebx, [edi+esi]
		mov	edi, [esp+0A4h+var_8C]
		add	ebx, [esi+1Ch]
		mov	esi, [esp+0A4h+var_88]
		add	ebx, [esp+0A4h+var_94]
		mov	ebp, [esp+0A4h+var_74]
		add	esi, ebx
		add	ecx, edi
		cmp	ecx, edi
		mov	edi, [esp+0A4h+var_4C]
		sbb	ebx, ebx
		neg	ebx
		add	ebx, esi
		add	edi, ebx
		mov	ebx, [esp+0A4h+var_6C]
		mov	[esp+0A4h+var_88], esi
		mov	esi, ebp
		xor	esi, ebx
		and	ebp, ebx
		mov	[esp+0A4h+var_10], esi
		and	esi, [esp+0A4h+var_64]
		mov	[esp+0A4h+var_40], ebp
		xor	esi, ebp
		mov	[esp+0A4h+var_94], esi
		mov	esi, [esp+0A4h+var_68]
		mov	ebp, ebx
		shr	ebp, 1Ch
		shl	esi, 4
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_68]
		shl	ebx, 1Eh
		shr	ebp, 2
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_68]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_6C]
		shr	ebx, 7
		shl	ebp, 19h
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_8C]
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_94]
		add	esi, ebx
		cmp	esi, ebx
		sbb	ebx, ebx
		add	ebp, esi
		neg	ebx
		mov	[esp+0A4h+var_4C], edi
		mov	[esp+0A4h+var_94], ebx
		mov	[esp+0A4h+var_8C], ebp
		cmp	ebp, esi
		jnb	short loc_100076E7
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_100076E7:				; CODE XREF: sub_10006BB0+B30j
		mov	ebx, [esp+0A4h+var_70]
		mov	esi, [esp+0A4h+var_68]
		mov	ebp, ebx
		and	ebx, esi
		xor	ebp, esi
		mov	[esp+0A4h+var_48], ebx
		mov	ebx, esi
		shl	ebx, 19h
		shl	esi, 1Eh
		mov	[esp+0A4h+var_44], ebp
		mov	ebp, [esp+0A4h+var_6C]
		shr	ebp, 7
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_6C]
		shr	ebp, 2
		or	esi, ebp
		xor	ebx, esi
		mov	esi, [esp+0A4h+var_68]
		mov	ebp, [esp+0A4h+var_6C]
		shr	esi, 1Ch
		shl	ebp, 4
		or	esi, ebp
		xor	ebx, esi
		add	ebx, [esp+0A4h+var_94]
		mov	esi, [esp+0A4h+var_44]
		and	esi, [esp+0A4h+var_60]
		mov	ebp, ecx
		xor	esi, [esp+0A4h+var_48]
		shr	ebp, 12h
		add	esi, ebx
		add	[esp+0A4h+var_88], esi
		mov	esi, ecx
		not	esi
		and	esi, [esp+0A4h+var_7C]
		mov	ebx, edx
		and	ebx, ecx
		xor	esi, ebx
		mov	[esp+0A4h+var_94], esi
		mov	esi, edi
		shr	esi, 9
		mov	ebx, ecx
		shl	ebx, 17h
		or	esi, ebx
		mov	ebx, edi
		shl	ebx, 0Eh
		or	ebx, ebp
		xor	esi, ebx
		mov	ebx, edi
		shl	ebx, 12h
		mov	ebp, ecx
		shr	ebp, 0Eh
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_90]
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_94]
		add	esi, ebx
		cmp	esi, ebx
		sbb	ebx, ebx
		neg	ebx
		mov	[esp+0A4h+var_94], ebx
		mov	ebx, [esp+0A4h+var_C]
		mov	ebx, [ebx+ebp]
		add	esi, ebx
		cmp	esi, ebx
		jnb	short loc_100077A3
		inc	[esp+0A4h+var_94]

loc_100077A3:				; CODE XREF: sub_10006BB0+BEDj
		mov	ebp, [ebp+20h]
		add	esi, ebp
		cmp	esi, ebp
		jnb	short loc_100077B0
		inc	[esp+0A4h+var_94]

loc_100077B0:				; CODE XREF: sub_10006BB0+BFAj
		mov	ebx, [esp+0A4h+var_84]
		add	ebx, esi
		mov	[esp+0A4h+var_84], ebx
		cmp	ebx, esi
		jnb	short loc_100077C2
		inc	[esp+0A4h+var_94]

loc_100077C2:				; CODE XREF: sub_10006BB0+C0Cj
		mov	ebx, edi
		shr	ebx, 0Eh
		mov	esi, ecx
		shl	esi, 12h
		or	ebx, esi
		mov	esi, edi
		shr	esi, 12h
		mov	ebp, ecx
		shl	ebp, 0Eh
		or	esi, ebp
		xor	ebx, esi
		mov	esi, edi
		shl	esi, 17h
		mov	ebp, ecx
		shr	ebp, 9
		or	esi, ebp
		xor	ebx, esi
		mov	ebp, [esp+0A4h+var_54]
		and	ebp, edi
		mov	esi, edi
		mov	edi, [esp+0A4h+var_3C]
		not	esi
		and	esi, [esp+0A4h+var_78]
		xor	esi, ebp
		add	ebx, esi
		mov	esi, [esp+0A4h+var_90]
		add	ebx, [edi+esi]
		mov	edi, [esp+0A4h+var_64]
		add	ebx, [esi+24h]
		mov	esi, [esp+0A4h+var_80]
		add	ebx, [esp+0A4h+var_94]
		add	esi, ebx
		mov	ebx, [esp+0A4h+var_84]
		add	edi, ebx
		cmp	edi, ebx
		sbb	ebx, ebx
		neg	ebx
		add	ebx, esi
		add	[esp+0A4h+var_60], ebx
		mov	ebx, [esp+0A4h+var_8C]
		mov	[esp+0A4h+var_80], esi
		mov	esi, [esp+0A4h+var_10]
		and	esi, ebx
		xor	esi, [esp+0A4h+var_40]
		mov	ebp, ebx
		mov	[esp+0A4h+var_94], esi
		mov	esi, [esp+0A4h+var_88]
		shr	ebp, 1Ch
		shl	esi, 4
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_88]
		shl	ebx, 1Eh
		shr	ebp, 2
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_88]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_8C]
		shr	ebx, 7
		shl	ebp, 19h
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_84]
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_94]
		add	esi, ebx
		cmp	esi, ebx
		sbb	ebx, ebx
		add	ebp, esi
		neg	ebx
		mov	[esp+0A4h+var_64], edi
		mov	[esp+0A4h+var_94], ebx
		mov	[esp+0A4h+var_84], ebp
		cmp	ebp, esi
		jnb	short loc_10007898
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10007898:				; CODE XREF: sub_10006BB0+CE1j
		mov	esi, [esp+0A4h+var_88]
		mov	ebp, [esp+0A4h+var_8C]
		mov	ebx, esi
		shl	ebx, 19h
		shl	esi, 1Eh
		shr	ebp, 7
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_8C]
		shr	ebp, 2
		or	esi, ebp
		xor	ebx, esi
		mov	esi, [esp+0A4h+var_88]
		mov	ebp, [esp+0A4h+var_8C]
		shr	esi, 1Ch
		shl	ebp, 4
		or	esi, ebp
		xor	ebx, esi
		add	ebx, [esp+0A4h+var_94]
		mov	esi, [esp+0A4h+var_44]
		and	esi, [esp+0A4h+var_88]
		mov	ebp, edi
		xor	esi, [esp+0A4h+var_48]
		shl	ebp, 17h
		add	esi, ebx
		add	[esp+0A4h+var_80], esi
		mov	esi, edi
		not	esi
		and	esi, edx
		mov	ebx, ecx
		and	ebx, edi
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_60]
		mov	[esp+0A4h+var_40], esi
		mov	esi, ebx
		shr	esi, 9
		or	esi, ebp
		shl	ebx, 0Eh
		mov	ebp, edi
		shr	ebp, 12h
		or	ebx, ebp
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_60]
		shl	ebx, 12h
		mov	ebp, edi
		shr	ebp, 0Eh
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_90]
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_40]
		add	esi, ebx
		cmp	esi, ebx
		sbb	ebx, ebx
		neg	ebx
		mov	[esp+0A4h+var_94], ebx
		mov	ebx, [esp+0A4h+var_18]
		mov	ebx, [ebx+ebp]
		add	esi, ebx
		cmp	esi, ebx
		jnb	short loc_10007944
		inc	[esp+0A4h+var_94]

loc_10007944:				; CODE XREF: sub_10006BB0+D8Ej
		mov	ebp, [ebp+28h]
		add	esi, ebp
		cmp	esi, ebp
		jnb	short loc_10007951
		inc	[esp+0A4h+var_94]

loc_10007951:				; CODE XREF: sub_10006BB0+D9Bj
		mov	ebx, [esp+0A4h+var_7C]
		add	ebx, esi
		mov	[esp+0A4h+var_7C], ebx
		cmp	ebx, esi
		jnb	short loc_10007963
		inc	[esp+0A4h+var_94]

loc_10007963:				; CODE XREF: sub_10006BB0+DADj
		mov	esi, [esp+0A4h+var_60]
		mov	ebx, esi
		shr	ebx, 0Eh
		mov	ebp, edi
		shl	ebp, 12h
		or	ebx, ebp
		shr	esi, 12h
		mov	ebp, edi
		shl	ebp, 0Eh
		or	esi, ebp
		xor	ebx, esi
		mov	esi, [esp+0A4h+var_60]
		shr	edi, 9
		mov	ebp, esi
		shl	ebp, 17h
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_4C]
		and	ebp, esi
		mov	edi, esi
		mov	esi, [esp+0A4h+var_90]
		not	edi
		and	edi, [esp+0A4h+var_54]
		xor	edi, ebp
		add	ebx, edi
		mov	edi, [esp+0A4h+var_28]
		add	ebx, [edi+esi]
		mov	edi, [esp+0A4h+var_78]
		add	ebx, [esi+2Ch]
		mov	esi, [esp+0A4h+var_7C]
		add	ebx, [esp+0A4h+var_94]
		mov	ebp, [esp+0A4h+var_8C]
		add	edi, ebx
		mov	ebx, [esp+0A4h+var_74]
		add	ebx, esi
		cmp	ebx, esi
		sbb	esi, esi
		neg	esi
		add	esi, edi
		add	[esp+0A4h+var_70], esi
		mov	esi, [esp+0A4h+var_6C]
		mov	[esp+0A4h+var_78], edi
		mov	edi, ebp
		and	ebp, esi
		xor	edi, esi
		mov	esi, [esp+0A4h+var_80]
		mov	[esp+0A4h+var_74], ebx
		mov	ebx, [esp+0A4h+var_84]
		and	edi, ebx
		xor	edi, ebp
		mov	ebp, ebx
		shr	ebp, 1Ch
		shl	esi, 4
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_80]
		shl	ebx, 1Eh
		shr	ebp, 2
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_80]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_84]
		shr	ebx, 7
		shl	ebp, 19h
		or	ebx, ebp
		xor	esi, ebx
		mov	ebx, [esp+0A4h+var_7C]
		add	esi, edi
		cmp	esi, edi
		sbb	edi, edi
		add	ebx, esi
		neg	edi
		mov	[esp+0A4h+var_94], edi
		mov	[esp+0A4h+var_7C], ebx
		cmp	ebx, esi
		jnb	short loc_10007A3A
		inc	edi
		mov	[esp+0A4h+var_94], edi

loc_10007A3A:				; CODE XREF: sub_10006BB0+E83j
		mov	esi, [esp+0A4h+var_80]
		mov	edi, [esp+0A4h+var_84]
		mov	ebx, esi
		mov	ebp, edi
		shr	ebp, 7
		shl	ebx, 19h
		or	ebx, ebp
		mov	ebp, esi
		shl	ebp, 1Eh
		shr	edi, 2
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_84]
		shl	ebp, 4
		mov	edi, esi
		shr	edi, 1Ch
		or	edi, ebp
		mov	ebp, [esp+0A4h+var_88]
		xor	ebx, edi
		mov	edi, [esp+0A4h+var_68]
		add	ebx, [esp+0A4h+var_94]
		xor	ebp, edi
		and	ebp, esi
		mov	esi, [esp+0A4h+var_88]
		and	esi, edi
		xor	ebp, esi
		mov	esi, [esp+0A4h+var_64]
		add	ebp, ebx
		mov	ebx, [esp+0A4h+var_74]
		add	[esp+0A4h+var_78], ebp
		and	esi, ebx
		mov	edi, ebx
		not	edi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [esp+0A4h+var_70]
		mov	ebp, ebx
		shl	ebp, 17h
		shr	esi, 9
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_70]
		shr	ebx, 12h
		shl	ebp, 0Eh
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_70]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_74]
		shl	ebx, 12h
		shr	ebp, 0Eh
		or	ebx, ebp
		mov	ebp, [esp+0A4h+var_90]
		xor	esi, ebx
		add	esi, edi
		cmp	esi, edi
		mov	edi, [esp+0A4h+var_8]
		mov	edi, [edi+ebp]
		sbb	ebx, ebx
		neg	ebx
		add	esi, edi
		mov	[esp+0A4h+var_94], ebx
		cmp	esi, edi
		jnb	short loc_10007AED
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10007AED:				; CODE XREF: sub_10006BB0+F36j
		mov	ebp, [ebp+30h]
		add	esi, ebp
		cmp	esi, ebp
		jnb	short loc_10007AFB
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10007AFB:				; CODE XREF: sub_10006BB0+F44j
		add	edx, esi
		cmp	edx, esi
		jnb	short loc_10007B06
		inc	ebx
		mov	[esp+0A4h+var_94], ebx

loc_10007B06:				; CODE XREF: sub_10006BB0+F4Fj
		mov	esi, [esp+0A4h+var_70]
		mov	edi, [esp+0A4h+var_74]
		mov	ebp, edi
		shl	ebp, 12h
		shl	edi, 0Eh
		mov	ebx, esi
		shr	ebx, 0Eh
		or	ebx, ebp
		mov	ebp, esi
		shr	ebp, 12h
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_74]
		shr	ebp, 9
		mov	edi, esi
		shl	edi, 17h
		or	edi, ebp
		mov	ebp, [esp+0A4h+var_60]
		xor	ebx, edi
		and	ebp, esi
		mov	edi, esi
		mov	esi, [esp+0A4h+var_90]
		not	edi
		and	edi, [esp+0A4h+var_4C]
		xor	edi, ebp
		add	ebx, edi
		mov	edi, [esp+0A4h+var_20]
		add	ebx, [edi+esi]
		mov	edi, [esp+0A4h+var_6C]
		add	ebx, [esi+34h]
		mov	esi, [esp+0A4h+var_54]
		add	ebx, [esp+0A4h+var_94]
		add	edi, edx
		add	esi, ebx
		mov	ebx, [esp+0A4h+var_7C]
		cmp	edi, edx
		mov	[esp+0A4h+var_6C], edi
		sbb	edi, edi
		neg	edi
		add	edi, esi
		add	[esp+0A4h+var_68], edi
		mov	[esp+0A4h+var_54], esi
		mov	esi, [esp+0A4h+var_8C]
		mov	edi, ebx
		xor	edi, esi
		and	edi, [esp+0A4h+var_84]
		mov	ebp, ebx
		and	ebp, esi
		mov	esi, [esp+0A4h+var_78]
		xor	edi, ebp
		mov	ebp, ebx
		shr	ebp, 1Ch
		shl	esi, 4
		or	esi, ebp
		mov	ebp, [esp+0A4h+var_78]
		shl	ebx, 1Eh
		shr	ebp, 2
		or	ebp, ebx
		mov	ebx, [esp+0A4h+var_78]
		xor	esi, ebp
		mov	ebp, [esp+0A4h+var_7C]
		shr	ebx, 7
		shl	ebp, 19h
		or	ebx, ebp
		xor	esi, ebx
		add	esi, edi
		cmp	esi, edi
		sbb	edi, edi
		neg	edi
		add	edx, esi
		mov	[esp+0A4h+var_94], edi
		cmp	edx, esi
		jnb	short loc_10007BD8
		inc	edi
		mov	[esp+0A4h+var_94], edi

loc_10007BD8:				; CODE XREF: sub_10006BB0+1021j
		mov	esi, [esp+0A4h+var_78]
		mov	edi, [esp+0A4h+var_7C]
		mov	ebp, edi
		shr	ebp, 7
		mov	ebx, esi
		shl	ebx, 19h
		or	ebx, ebp
		add	[esp+0A4h+var_90], 40h
		mov	ebp, esi
		shl	ebp, 1Eh
		shr	edi, 2
		or	ebp, edi
		xor	ebx, ebp
		mov	ebp, [esp+0A4h+var_7C]
		shl	ebp, 4
		mov	edi, esi
		shr	edi, 1Ch
		or	edi, ebp
		xor	ebx, edi
		mov	edi, [esp+0A4h+var_88]
		add	ebx, [esp+0A4h+var_94]
		mov	ebp, esi
		xor	ebp, edi
		and	ebp, [esp+0A4h+var_80]
		and	esi, edi
		xor	ebp, esi
		mov	esi, [esp+0A4h+var_5C]
		add	ebp, ebx
		add	[esp+0A4h+var_54], ebp
		add	esi, 40h
		mov	[esp+0A4h+var_5C], esi
		cmp	esi, offset dword_10039B5C
		jl	loc_10006F10
		add	[eax+280h], edx
		cmp	[eax+280h], edx
		sbb	edx, edx
		neg	edx
		add	edx, [esp+0A4h+var_54]
		add	[eax+284h], edx
		mov	edx, [esp+0A4h+var_7C]
		add	[eax+288h], edx
		cmp	[eax+288h], edx
		sbb	edx, edx
		neg	edx
		add	edx, [esp+0A4h+var_78]
		add	[eax+28Ch], edx
		mov	edx, [esp+0A4h+var_84]
		add	[eax+290h], edx
		cmp	[eax+290h], edx
		sbb	edx, edx
		neg	edx
		add	edx, [esp+0A4h+var_80]
		add	[eax+294h], edx
		mov	edx, [esp+0A4h+var_8C]
		add	[eax+298h], edx
		cmp	[eax+298h], edx
		sbb	edx, edx
		neg	edx
		add	edx, edi
		add	[eax+29Ch], edx
		mov	edx, [esp+0A4h+var_6C]
		add	[eax+2A0h], edx
		cmp	[eax+2A0h], edx
		pop	edi
		sbb	edx, edx
		neg	edx
		add	edx, [esp+0A0h+var_68]
		pop	esi
		add	[eax+2A4h], edx
		mov	edx, [esp+9Ch+var_74]
		add	[eax+2A8h], edx
		cmp	[eax+2A8h], edx
		pop	ebp
		sbb	edx, edx
		neg	edx
		add	edx, [esp+98h+var_70]
		pop	ebx
		add	[eax+2ACh], edx
		mov	edx, [esp+94h+var_64]
		add	[eax+2B0h], edx
		cmp	[eax+2B0h], edx
		sbb	edx, edx
		add	[eax+2B8h], ecx
		neg	edx
		add	edx, [esp+94h+var_60]
		add	[eax+2B4h], edx
		cmp	[eax+2B8h], ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, [esp+94h+var_4C]
		add	[eax+2BCh], ecx
		add	esp, 94h
		retn
sub_10006BB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007D30(void	*Dst, void *Src, size_t	Size)
sub_10007D30	proc near		; CODE XREF: sub_10007DF0+47p
					; sub_10008070+58p ...

Dst		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+Size]
		test	ebp, ebp
		jz	loc_10007DE8
		push	ebx
		mov	ebx, [esp+8+Dst]
		mov	eax, [ebx+2C0h]
		push	edi
		mov	edi, eax
		add	eax, ebp
		and	edi, 7Fh
		mov	[ebx+2C0h], eax
		cmp	eax, ebp
		jnb	short loc_10007D60
		inc	dword ptr [ebx+2C4h]

loc_10007D60:				; CODE XREF: sub_10007D30+28j
		push	esi
		test	edi, edi
		jz	short loc_10007D9B
		mov	esi, 80h
		sub	esi, edi
		cmp	ebp, esi
		jnb	short loc_10007D72
		mov	esi, ebp

loc_10007D72:				; CODE XREF: sub_10007D30+3Ej
		mov	eax, [esp+10h+Src]
		push	esi		; Size
		push	eax		; Src
		lea	ecx, [edi+ebx]
		push	ecx		; Dst
		call	memcpy
		add	[esp+1Ch+Src], esi
		sub	ebp, esi
		add	esi, edi
		add	esp, 0Ch
		cmp	esi, 80h
		jnz	short loc_10007D9B
		mov	eax, ebx
		call	sub_10006BB0

loc_10007D9B:				; CODE XREF: sub_10007D30+33j
					; sub_10007D30+62j
		cmp	ebp, 80h
		jb	short loc_10007DD2
		mov	eax, ebp
		shr	eax, 7
		mov	[esp+10h+Size],	eax
		lea	esp, [esp+0]

loc_10007DB0:				; CODE XREF: sub_10007D30+A0j
		mov	esi, [esp+10h+Src]
		sub	[esp+10h+Src], 0FFFFFF80h
		mov	ecx, 20h
		mov	edi, ebx
		mov	eax, ebx
		rep movsd
		add	ebp, 0FFFFFF80h
		call	sub_10006BB0
		dec	[esp+10h+Size]
		jnz	short loc_10007DB0

loc_10007DD2:				; CODE XREF: sub_10007D30+71j
		pop	esi
		test	ebp, ebp
		jz	short loc_10007DE6
		mov	edx, [esp+0Ch+Src]
		push	ebp		; Size
		push	edx		; Src
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10007DE6:				; CODE XREF: sub_10007D30+A5j
		pop	edi
		pop	ebx

loc_10007DE8:				; CODE XREF: sub_10007D30+7j
		pop	ebp
		retn
sub_10007D30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007DF0(void	*, void	*Dst, int, int)
sub_10007DF0	proc near		; CODE XREF: sub_10008070+6Ap
					; sub_10008100+7Cp ...

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+2C0h]
		and	eax, 7Fh
		mov	edx, 70h
		cmp	eax, 70h
		jb	short loc_10007E0D
		mov	edx, 0F0h

loc_10007E0D:				; CODE XREF: sub_10007DF0+16j
		mov	ecx, [esi+2C4h]
		push	ebx
		push	edi
		sub	edx, eax
		mov	eax, [esi+2C0h]
		push	edx		; Size
		lea	ebx, ds:0[eax*8]
		lea	edi, ds:0[ecx*8]
		shr	eax, 1Dh
		push	offset dword_100396A8 ;	Src
		push	esi		; Dst
		or	edi, eax
		call	sub_10007D30
		mov	eax, ebx
		bswap	eax
		mov	ecx, edi
		bswap	ecx
		mov	[esi+7Ch], eax
		add	esp, 0Ch
		mov	eax, esi
		mov	dword ptr [esi+70h], 0
		mov	dword ptr [esi+74h], 0
		mov	[esi+78h], ecx
		call	sub_10006BB0
		mov	eax, [esi+280h]
		mov	edx, [esi+284h]
		bswap	eax
		mov	[esi+284h], eax
		mov	eax, [esi+288h]
		bswap	edx
		mov	[esi+280h], edx
		mov	edx, [esi+28Ch]
		bswap	eax
		lea	ecx, [esi+280h]
		mov	[esi+28Ch], eax
		mov	eax, [esi+290h]
		bswap	edx
		mov	[esi+288h], edx
		mov	edx, [esi+294h]
		bswap	eax
		mov	[esi+294h], eax
		mov	eax, [esi+298h]
		bswap	edx
		mov	[esi+290h], edx
		mov	edx, [esi+29Ch]
		bswap	eax
		mov	[esi+29Ch], eax
		mov	eax, [esi+2A0h]
		bswap	edx
		mov	[esi+298h], edx
		mov	edx, [esi+2A4h]
		bswap	eax
		mov	[esi+2A4h], eax
		mov	eax, [esi+2A8h]
		bswap	edx
		mov	[esi+2A0h], edx
		mov	edx, [esi+2ACh]
		bswap	eax
		mov	[esi+2ACh], eax
		mov	eax, [esi+2B0h]
		bswap	edx
		mov	[esi+2A8h], edx
		mov	edx, [esi+2B4h]
		bswap	eax
		mov	[esi+2B4h], eax
		mov	eax, [esi+2B8h]
		bswap	edx
		mov	[esi+2B0h], edx
		mov	edx, [esi+2BCh]
		bswap	eax
		mov	[esi+2BCh], eax
		mov	eax, [esp+0Ch+arg_C]
		bswap	edx
		pop	edi
		mov	[esi+2B8h], edx
		pop	ebx
		mov	esi, 40h
		cmp	eax, 40h
		ja	short loc_10007F5A
		mov	esi, eax

loc_10007F5A:				; CODE XREF: sub_10007DF0+166j
		mov	eax, [esp+4+Dst]
		push	esi		; Size
		push	ecx		; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esp+10h+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10007F73
		mov	[eax], esi

loc_10007F73:				; CODE XREF: sub_10007DF0+17Fj
		pop	esi
		retn
sub_10007DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007F80(int,	void *Dst, int,	int)
sub_10007F80	proc near		; CODE XREF: sub_100082B0+12j
					; DATA XREF: .rdata:10039CECo

Src		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 40h
		push	esi
		mov	esi, [esp+44h+arg_0]
		push	edi
		add	esi, 280h
		mov	ecx, 10h
		lea	edi, [esp+48h+Src]
		rep movsd
		mov	eax, [esp+48h+Src]
		mov	ecx, [esp+48h+var_3C]
		bswap	eax
		mov	[esp+48h+var_3C], eax
		mov	eax, [esp+48h+var_38]
		bswap	ecx
		mov	[esp+48h+Src], ecx
		mov	ecx, [esp+48h+var_34]
		bswap	eax
		mov	[esp+48h+var_34], eax
		mov	eax, [esp+48h+var_30]
		bswap	ecx
		mov	[esp+48h+var_38], ecx
		mov	ecx, [esp+48h+var_2C]
		bswap	eax
		mov	[esp+48h+var_2C], eax
		mov	eax, [esp+48h+var_28]
		bswap	ecx
		mov	[esp+48h+var_30], ecx
		mov	ecx, [esp+48h+var_24]
		bswap	eax
		mov	[esp+48h+var_24], eax
		mov	eax, [esp+48h+var_20]
		bswap	ecx
		mov	[esp+48h+var_28], ecx
		mov	ecx, [esp+48h+var_1C]
		bswap	eax
		mov	[esp+48h+var_1C], eax
		mov	eax, [esp+48h+var_18]
		bswap	ecx
		mov	[esp+48h+var_20], ecx
		mov	ecx, [esp+48h+var_14]
		bswap	eax
		mov	[esp+48h+var_14], eax
		mov	eax, [esp+48h+var_10]
		bswap	ecx
		mov	[esp+48h+var_18], ecx
		mov	ecx, [esp+48h+var_C]
		bswap	eax
		mov	[esp+48h+var_C], eax
		mov	eax, [esp+48h+var_8]
		bswap	ecx
		mov	[esp+48h+var_10], ecx
		mov	ecx, [esp+48h+var_4]
		bswap	eax
		mov	[esp+48h+var_4], eax
		mov	eax, [esp+48h+arg_C]
		bswap	ecx
		mov	[esp+48h+var_8], ecx
		mov	esi, 40h
		cmp	eax, 40h
		ja	short loc_1000804A
		mov	esi, eax

loc_1000804A:				; CODE XREF: sub_10007F80+C6j
		mov	ecx, [esp+48h+Dst]
		push	esi		; Size
		lea	eax, [esp+4Ch+Src]
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		mov	eax, [esp+54h+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008067
		mov	[eax], esi

loc_10008067:				; CODE XREF: sub_10007F80+E3j
		pop	edi
		pop	esi
		add	esp, 40h
		retn
sub_10007F80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008070(void	*, void	*Src, size_t Size)
sub_10008070	proc near		; DATA XREF: .rdata:10039314o

var_2D0		= dword	ptr -2D0h
Dst		= byte ptr -2CCh
var_4C		= byte ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		sub	esp, 2D0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2D0h+var_4], eax
		push	ebx
		mov	ebx, [esp+2D4h+arg_0]
		push	ebp
		mov	ebp, [esp+2D8h+Src]
		push	esi
		push	edi
		push	2C8h		; Size
		lea	eax, [esp+2E4h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	ecx, 10h
		mov	esi, offset dword_10039B58
		lea	edi, [esp+2ECh+var_4C]
		rep movsd
		mov	ecx, [esp+2ECh+Size]
		push	ecx		; Size
		lea	edx, [esp+2F0h+Dst]
		push	ebp		; Src
		push	edx		; Dst
		call	sub_10007D30
		push	40h		; int
		lea	eax, [esp+2FCh+var_2D0]
		push	eax		; int
		lea	ecx, [esp+300h+Dst]
		push	ebx		; Dst
		push	ecx		; void *
		call	sub_10007DF0
		mov	ecx, [esp+308h+var_4]
		add	esp, 28h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2D0h
		retn
sub_10008070	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008100(int,	void *Src)
sub_10008100	proc near		; DATA XREF: .rdata:10039318o

var_2D0		= dword	ptr -2D0h
Dst		= byte ptr -2CCh
var_4C		= byte ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8

		sub	esp, 2D0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2D0h+var_4], eax
		mov	eax, [esp+2D0h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+2D8h+Src]
		mov	[esp+2D8h+var_2D0], eax
		push	esi
		mov	eax, ebp
		push	edi
		lea	edx, [eax+1]
		nop

loc_10008130:				; CODE XREF: sub_10008100+35j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10008130
		push	2C8h		; Size
		lea	ecx, [esp+2E4h+Dst]
		sub	eax, edx
		push	0		; Val
		push	ecx		; Dst
		mov	ebx, eax
		call	memset
		push	ebx		; Size
		lea	edx, [esp+2F0h+Dst]
		push	ebp		; Src
		mov	ecx, 10h
		mov	esi, offset dword_10039B58
		lea	edi, [esp+2F4h+var_4C]
		push	edx		; Dst
		rep movsd
		call	sub_10007D30
		mov	ecx, [esp+2F8h+var_2D0]
		push	40h		; int
		lea	eax, [esp+2FCh+var_2D0]
		push	eax		; int
		push	ecx		; Dst
		lea	edx, [esp+304h+Dst]
		push	edx		; void *
		call	sub_10007DF0
		mov	ecx, [esp+308h+var_4]
		add	esp, 28h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2D0h
		retn
sub_10008100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100081A0	proc near		; DATA XREF: .rdata:10039324o
					; .rdata:10039350o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	ecx, 0B2h
		rep movsd
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_100081A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100081C0	proc near		; DATA XREF: .rdata:10039328o
					; .rdata:10039354o

arg_0		= dword	ptr  4

		push	2C8h
		call	PORT_Alloc_Util
		add	esp, 4
		test	eax, eax
		jz	short locret_100081E2
		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	ecx, 0B2h
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi

locret_100081E2:			; CODE XREF: sub_100081C0+Fj
		retn
sub_100081C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100081F0	proc near		; DATA XREF: .rdata:100393C4o
					; .rdata:100393C8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, 0B2h
		rep movsd
		pop	edi
		pop	esi
		retn
sub_100081F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008210	proc near		; DATA XREF: .rdata:10039300o
					; .rdata:1003932Co ...
		push	2C8h
		call	PORT_Alloc_Util
		add	esp, 4
		retn
sub_10008210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008220(void	*Dst, int)
sub_10008220	proc near		; DATA XREF: .rdata:10039304o
					; .rdata:10039330o ...

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		push	2C8h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_10008245
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10008245:				; CODE XREF: sub_10008220+1Aj
		pop	esi
		retn
sub_10008220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008250(void	*Dst)
sub_10008250	proc near		; DATA XREF: .rdata:10039334o
					; .rdata:10039CB0o

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	edi
		push	2C8h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		lea	edi, [esi+280h]
		add	esp, 0Ch
		mov	ecx, 10h
		mov	esi, offset dword_10039B98
		rep movsd
		pop	edi
		pop	esi
		retn
sub_10008250	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl sub_10008280(void	*Dst, void *Src, size_t	Size)
sub_10008280	proc near		; DATA XREF: .rdata:10039338o
					; .rdata:10039CB4o

Dst		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		jmp	sub_10007D30
sub_10008280	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008290	proc near		; DATA XREF: .rdata:1003933Co
					; .rdata:10039CB8o

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		cmp	eax, 30h
		jb	short loc_1000829E
		mov	eax, 30h

loc_1000829E:				; CODE XREF: sub_10008290+7j
		mov	[esp+arg_C], eax ; int
		jmp	sub_10007DF0
sub_10008290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100082B0	proc near		; DATA XREF: .rdata:10039CC4o

arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		cmp	eax, 30h
		jb	short loc_100082BE
		mov	eax, 30h

loc_100082BE:				; CODE XREF: sub_100082B0+7j
		mov	[esp+arg_C], eax ; int
		jmp	sub_10007F80
sub_100082B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100082D0(void	*, void	*Src, size_t Size)
sub_100082D0	proc near		; DATA XREF: .rdata:10039340o

var_2D0		= dword	ptr -2D0h
Dst		= byte ptr -2CCh
var_4C		= byte ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		sub	esp, 2D0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2D0h+var_4], eax
		push	ebx
		mov	ebx, [esp+2D4h+arg_0]
		push	ebp
		mov	ebp, [esp+2D8h+Src]
		push	esi
		push	edi
		push	2C8h		; Size
		lea	eax, [esp+2E4h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	ecx, 10h
		mov	esi, offset dword_10039B98
		lea	edi, [esp+2ECh+var_4C]
		rep movsd
		mov	ecx, [esp+2ECh+Size]
		push	ecx		; Size
		lea	edx, [esp+2F0h+Dst]
		push	ebp		; Src
		push	edx		; Dst
		call	sub_10007D30
		push	30h		; int
		lea	eax, [esp+2FCh+var_2D0]
		push	eax		; int
		lea	ecx, [esp+300h+Dst]
		push	ebx		; Dst
		push	ecx		; void *
		call	sub_10007DF0
		mov	ecx, [esp+308h+var_4]
		add	esp, 28h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2D0h
		retn
sub_100082D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008360(int,	void *Src)
sub_10008360	proc near		; DATA XREF: .rdata:10039344o

var_2D0		= dword	ptr -2D0h
Dst		= byte ptr -2CCh
var_4C		= byte ptr -4Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8

		sub	esp, 2D0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2D0h+var_4], eax
		mov	eax, [esp+2D0h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+2D8h+Src]
		mov	[esp+2D8h+var_2D0], eax
		push	esi
		mov	eax, ebp
		push	edi
		lea	edx, [eax+1]
		nop

loc_10008390:				; CODE XREF: sub_10008360+35j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10008390
		push	2C8h		; Size
		lea	ecx, [esp+2E4h+Dst]
		sub	eax, edx
		push	0		; Val
		push	ecx		; Dst
		mov	ebx, eax
		call	memset
		push	ebx		; Size
		lea	edx, [esp+2F0h+Dst]
		push	ebp		; Src
		mov	ecx, 10h
		mov	esi, offset dword_10039B98
		lea	edi, [esp+2F4h+var_4C]
		push	edx		; Dst
		rep movsd
		call	sub_10007D30
		mov	ecx, [esp+2F8h+var_2D0]
		push	30h		; int
		lea	eax, [esp+2FCh+var_2D0]
		push	eax		; int
		push	ecx		; Dst
		lea	edx, [esp+304h+Dst]
		push	edx		; void *
		call	sub_10007DF0
		mov	ecx, [esp+308h+var_4]
		add	esp, 28h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2D0h
		retn
sub_10008360	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008400	proc near		; DATA XREF: .rdata:10039320o
					; .rdata:1003934Co
		mov	eax, 2C8h
		retn
sub_10008400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008410(void	*Dst, int)
sub_10008410	proc near		; CODE XREF: sub_10021900+1ADp
					; sub_10021900+1C0p
					; DATA XREF: ...

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jz	short loc_1000844A
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000843A
		mov	ecx, [esi+4]
		mov	edx, [ecx+0Ch]
		push	1
		push	eax
		call	edx
		push	10Ch		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 14h

loc_1000843A:				; CODE XREF: sub_10008410+Dj
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000844A
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000844A:				; CODE XREF: sub_10008410+7j
					; sub_10008410+2Fj
		pop	esi
		retn
sub_10008410	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008450	proc near		; CODE XREF: sub_100085B0+2Bp
					; DATA XREF: .rdata:100393D8o

Dst		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 44h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+44h+var_4], eax
		cmp	[esp+44h+arg_10], 0
		mov	eax, [esp+44h+arg_4]
		push	ebp
		mov	ebp, [esp+48h+arg_8]
		push	esi
		mov	esi, [esp+4Ch+arg_0]
		jz	short loc_1000849E
		mov	ecx, [eax]
		shr	ecx, 1
		cmp	[esp+4Ch+arg_C], ecx
		jnb	short loc_1000849E

loc_1000847D:				; CODE XREF: sub_10008450+50j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+44h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_1000849E:				; CODE XREF: sub_10008450+21j
					; sub_10008450+2Bj
		test	esi, esi
		jz	short loc_1000847D
		mov	dword ptr [esi+8], 0
		mov	[esi+4], eax
		mov	edx, [eax+4]
		push	edi
		call	edx
		mov	[esi], eax
		test	eax, eax
		jz	short loc_10008514
		mov	ecx, [esi+4]
		mov	edi, [esp+50h+arg_C]
		cmp	edi, [ecx+1Ch]
		jbe	loc_10008552
		push	eax
		mov	eax, [ecx+10h]
		call	eax
		mov	edx, [esp+54h+arg_C]
		mov	ecx, [esi+4]
		mov	eax, [esi]
		mov	ecx, [ecx+14h]
		push	edx
		push	ebp
		push	eax
		call	ecx
		mov	edx, [esi+4]
		push	40h
		lea	eax, [esp+64h+arg_C]
		push	eax
		mov	eax, [esi]
		lea	ecx, [esp+68h+Dst]
		push	ecx
		mov	ecx, [edx+18h]
		push	eax
		call	ecx
		mov	ecx, [esi+4]
		mov	edi, [esp+70h+arg_C]
		add	esp, 20h
		cmp	edi, [ecx]
		jz	short loc_1000854E
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4

loc_10008514:				; CODE XREF: sub_10008450+66j
		push	40h		; Size
		lea	edx, [esp+54h+Dst]
		push	0		; Val
		push	edx		; Dst
		call	memset
		mov	eax, [esi]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008539
		mov	ecx, [esi+4]
		mov	edx, [ecx+0Ch]
		push	1
		push	eax
		call	edx
		add	esp, 8

loc_10008539:				; CODE XREF: sub_10008450+D9j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+44h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_1000854E:				; CODE XREF: sub_10008450+B5j
		lea	ebp, [esp+50h+Dst]

loc_10008552:				; CODE XREF: sub_10008450+72j
		mov	eax, [ecx+1Ch]
		push	ebx
		push	eax		; Size
		lea	ecx, [esi+0Ch]
		push	36h		; Val
		push	ecx		; Dst
		call	memset
		mov	edx, [esi+4]
		mov	eax, [edx+1Ch]
		push	eax		; Size
		lea	ebx, [esi+8Ch]
		push	5Ch		; Val
		push	ebx		; Dst
		call	memset
		add	esp, 18h
		test	edi, edi
		jz	short loc_10008592
		mov	eax, ebx
		mov	ecx, ebp

loc_10008582:				; CODE XREF: sub_10008450+140j
		movzx	edx, byte ptr [ecx]
		xor	[eax-80h], dl
		movzx	edx, byte ptr [ecx]
		xor	[eax], dl
		inc	ecx
		inc	eax
		dec	edi
		jnz	short loc_10008582

loc_10008592:				; CODE XREF: sub_10008450+12Cj
		mov	ecx, [esp+54h+var_4]
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
sub_10008450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100085B0	proc near		; CODE XREF: sub_10021900+99p
					; DATA XREF: .rdata:100393D4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	10Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_100085C6
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100085C6:				; CODE XREF: sub_100085B0+12j
		mov	eax, [esp+4+arg_C]
		mov	ecx, [esp+4+arg_8]
		mov	edx, [esp+4+arg_4]
		push	eax
		mov	eax, [esp+8+arg_0]
		push	ecx
		push	edx
		push	eax
		push	esi
		call	sub_10008450
		add	esp, 14h
		mov	dword ptr [esi+8], 1
		test	eax, eax
		jz	short loc_100085F9
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		xor	esi, esi

loc_100085F9:				; CODE XREF: sub_100085B0+3Cj
		mov	eax, esi
		pop	esi
		retn
sub_100085B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008600	proc near		; CODE XREF: sub_10021900+ACp
					; sub_10021900+F9p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+4]
		mov	ecx, [esi]
		mov	edx, [eax+10h]
		push	ecx
		call	edx
		mov	eax, [esi+4]
		mov	ecx, [eax+1Ch]
		push	ecx
		mov	ecx, [esi]
		lea	edx, [esi+0Ch]
		push	edx
		mov	edx, [eax+14h]
		push	ecx
		call	edx
		add	esp, 10h
		pop	esi
		retn
sub_10008600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008630	proc near		; CODE XREF: sub_10021900+B4p
					; sub_10021900+C6p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+4]
		mov	eax, [eax]
		mov	ecx, [ecx+14h]
		mov	[esp+arg_0], eax
		jmp	ecx
sub_10008630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008650	proc near		; CODE XREF: sub_10021900+D8p
					; sub_10021900+13Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		mov	ebp, [esp+4+arg_C]
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	eax, [esi+4]
		cmp	ebp, [eax]
		jnb	short loc_10008674
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10008674:				; CODE XREF: sub_10008650+Fj
		mov	ecx, [esi]
		mov	edx, [eax+18h]
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		push	edi
		mov	edi, [esp+10h+arg_8]
		push	ebp
		push	edi
		push	ebx
		push	ecx
		call	edx
		mov	eax, [esi+4]
		mov	ecx, [edi]
		add	esp, 10h
		cmp	ecx, [eax]
		jz	short loc_1000869D
		pop	edi
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000869D:				; CODE XREF: sub_10008650+43j
		mov	edx, [esi]
		mov	eax, [eax+10h]
		push	edx
		call	eax
		mov	eax, [esi+4]
		mov	ecx, [eax+1Ch]
		push	ecx
		mov	ecx, [esi]
		lea	edx, [esi+8Ch]
		push	edx
		mov	edx, [eax+14h]
		push	ecx
		call	edx
		mov	ecx, [edi]
		mov	eax, [esi+4]
		mov	edx, [esi]
		mov	eax, [eax+14h]
		push	ecx
		push	ebx
		push	edx
		call	eax
		mov	ecx, [esi+4]
		mov	edx, [esi]
		mov	eax, [ecx+18h]
		push	ebp
		push	edi
		push	ebx
		push	edx
		call	eax
		add	esp, 2Ch
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
sub_10008650	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100086F0	proc near		; DATA XREF: .rdata:100393E4o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		push	10Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10008733
		mov	edi, [esp+8+arg_0]
		mov	dword ptr [esi+8], 1
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	ecx, [edi+4]
		mov	edx, [edi]
		mov	eax, [ecx+8]
		push	edx
		call	eax
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_10008738
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10008733:				; CODE XREF: sub_100086F0+13j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008738:				; CODE XREF: sub_100086F0+38j
		mov	ecx, [edi+4]
		mov	edx, [ecx+1Ch]
		push	edx		; Size
		lea	eax, [edi+0Ch]
		push	eax		; Src
		lea	ecx, [esi+0Ch]
		push	ecx		; Dst
		call	memcpy
		mov	edx, [edi+4]
		mov	eax, [edx+1Ch]
		push	eax		; Size
		add	edi, 8Ch
		lea	ecx, [esi+8Ch]
		push	edi		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 18h
		pop	edi
		mov	eax, esi
		pop	esi
		retn
sub_100086F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008770	proc near		; DATA XREF: .rdata:10039BDCo
					; .rdata:10039BE0o ...
		xor	eax, eax
		retn
sub_10008770	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008780	proc near		; DATA XREF: .rdata:10039BF0o
					; .rdata:10039BFCo

arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], 0
		retn
sub_10008780	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008790	proc near		; CODE XREF: sub_10018F70+3p
					; sub_10019630+28p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 7
		ja	short loc_100087A4
		lea	eax, [eax+eax*4]
		lea	eax, dword_10039BD8[eax*8]
		retn
; ---------------------------------------------------------------------------

loc_100087A4:				; CODE XREF: sub_10008790+7j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
sub_10008790	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100087C0	proc near		; DATA XREF: .rdata:100393ACo
		push	90h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_100087C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100087D0(void	*Dst, int)
sub_100087D0	proc near		; DATA XREF: .rdata:100391F4o

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jz	short loc_100087F9
		push	90h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_100087F9
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_100087F9:				; CODE XREF: sub_100087D0+7j
					; sub_100087D0+1Ej
		pop	esi
		retn
sub_100087D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008800	proc near		; CODE XREF: sub_10009A30+67p
					; sub_10009B80+87p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 10h
		movzx	ecx, word ptr [edx+6]
		push	ebx
		movzx	ebx, word ptr [edx+2]
		mov	[esp+14h+var_8], ebx
		push	ebp
		mov	ebp, ecx
		push	esi
		movzx	esi, word ptr [edx+4]
		not	ebp
		and	ebp, ebx
		mov	ebx, ecx
		and	ebx, esi
		add	ebp, ebx
		add	bp, [eax]
		mov	[esp+1Ch+var_10], esi
		add	bp, [edx]
		mov	[esp+1Ch+var_C], ecx
		rol	bp, 1
		movzx	edx, bp
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, ecx
		and	esi, edx
		add	ebx, esi
		add	bx, [eax+2]
		mov	[esp+1Ch+var_4], edx
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+4]
		mov	[esp+1Ch+var_8], esi
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+6]
		mov	[esp+1Ch+var_10], ecx
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+8]
		mov	[esp+1Ch+var_C], edx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, edx
		and	ecx, esi
		add	ebx, ecx
		add	bx, [eax+0Ah]
		mov	[esp+1Ch+var_4], esi
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		mov	[esp+1Ch+var_8], ecx
		add	ebx, edx
		add	bx, [eax+0Ch]
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+0Eh]
		mov	[esp+1Ch+var_10], edx
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+10h]
		mov	[esp+1Ch+var_C], esi
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, esi
		and	edx, ecx
		add	ebx, edx
		add	bx, [eax+12h]
		mov	[esp+1Ch+var_4], ecx
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+14h]
		mov	[esp+1Ch+var_8], edx
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+16h]
		mov	[esp+1Ch+var_10], esi
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+18h]
		mov	[esp+1Ch+var_C], ecx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, ecx
		and	esi, edx
		add	ebx, esi
		add	bx, [eax+1Ah]
		mov	[esp+1Ch+var_4], edx
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+1Ch]
		mov	[esp+1Ch+var_8], esi
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+1Eh]
		mov	[esp+1Ch+var_10], ecx
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+20h]
		mov	[esp+1Ch+var_C], edx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, edx
		and	ecx, esi
		add	ebx, ecx
		add	bx, [eax+22h]
		mov	[esp+1Ch+var_4], esi
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+24h]
		mov	[esp+1Ch+var_8], ecx
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	[esp+1Ch+var_10], edx
		and	edx, ecx
		add	ebx, edx
		add	bx, [eax+26h]
		mov	dx, si
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	ecx, bx
		mov	bx, word ptr [esp+1Ch+var_8]
		mov	[esp+1Ch+var_C], ecx
		and	ecx, 3Fh
		add	dx, [eax+ecx*2]
		mov	word ptr [esp+1Ch+var_4], dx
		mov	ecx, [esp+1Ch+var_4]
		and	ecx, 3Fh
		add	bx, [eax+ecx*2]
		mov	word ptr [esp+1Ch+var_8], bx
		mov	ecx, [esp+1Ch+var_8]
		mov	esi, ecx
		and	esi, 3Fh
		movzx	esi, word ptr [eax+esi*2]
		add	word ptr [esp+1Ch+var_10], si
		mov	esi, [esp+1Ch+var_10]
		and	esi, 3Fh
		movzx	esi, word ptr [eax+esi*2]
		add	word ptr [esp+1Ch+var_C], si
		mov	esi, [esp+1Ch+var_C]
		mov	ebp, esi
		not	ebp
		and	ebp, ecx
		mov	ecx, esi
		and	ecx, [esp+1Ch+var_10]
		add	ebp, ecx
		add	bp, [eax+28h]
		add	bp, dx
		rol	bp, 1
		movzx	ecx, bp
		mov	edx, ecx
		not	edx
		and	edx, [esp+1Ch+var_10]
		mov	ebp, esi
		and	ebp, ecx
		add	edx, ebp
		add	dx, [eax+2Ah]
		mov	[esp+1Ch+var_4], ecx
		add	dx, bx
		rol	dx, 2
		movzx	edx, dx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+2Ch]
		mov	[esp+1Ch+var_8], edx
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+2Eh]
		mov	[esp+1Ch+var_10], esi
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+30h]
		mov	[esp+1Ch+var_C], ecx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, ecx
		and	esi, edx
		add	ebx, esi
		add	bx, [eax+32h]
		mov	[esp+1Ch+var_4], edx
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+34h]
		mov	[esp+1Ch+var_8], esi
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	ecx, bx
		mov	[esp+1Ch+var_10], ecx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+36h]
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+38h]
		mov	[esp+1Ch+var_C], edx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, edx
		and	ecx, esi
		add	ebx, ecx
		add	bx, [eax+3Ah]
		mov	[esp+1Ch+var_4], esi
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+3Ch]
		mov	[esp+1Ch+var_8], ecx
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+3Eh]
		mov	[esp+1Ch+var_10], edx
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+40h]
		mov	[esp+1Ch+var_C], esi
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, esi
		and	edx, ecx
		add	ebx, edx
		add	bx, [eax+42h]
		mov	[esp+1Ch+var_4], ecx
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	[esp+1Ch+var_8], edx
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+44h]
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+46h]
		mov	[esp+1Ch+var_10], esi
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+48h]
		mov	[esp+1Ch+var_C], ecx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, ecx
		and	esi, edx
		add	ebx, esi
		add	bx, [eax+4Ah]
		mov	[esp+1Ch+var_4], edx
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+4Ch]
		mov	[esp+1Ch+var_8], esi
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+4Eh]
		mov	[esp+1Ch+var_10], ecx
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+50h]
		mov	[esp+1Ch+var_C], edx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, edx
		and	ecx, esi
		add	ebx, ecx
		add	bx, [eax+52h]
		mov	[esp+1Ch+var_4], esi
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+54h]
		mov	[esp+1Ch+var_8], ecx
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	edx, bx
		mov	[esp+1Ch+var_10], edx
		mov	ebx, edx
		and	edx, ecx
		not	ebx
		and	ebx, esi
		add	ebx, edx
		add	bx, [eax+56h]
		mov	dx, si
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	ecx, bx
		mov	bx, word ptr [esp+1Ch+var_8]
		mov	[esp+1Ch+var_C], ecx
		and	ecx, 3Fh
		add	dx, [eax+ecx*2]
		mov	word ptr [esp+1Ch+var_4], dx
		mov	ecx, [esp+1Ch+var_4]
		and	ecx, 3Fh
		add	bx, [eax+ecx*2]
		mov	word ptr [esp+1Ch+var_8], bx
		mov	ecx, [esp+1Ch+var_8]
		mov	esi, ecx
		and	esi, 3Fh
		movzx	esi, word ptr [eax+esi*2]
		add	word ptr [esp+1Ch+var_10], si
		mov	esi, [esp+1Ch+var_10]
		and	esi, 3Fh
		movzx	esi, word ptr [eax+esi*2]
		add	word ptr [esp+1Ch+var_C], si
		mov	esi, [esp+1Ch+var_C]
		mov	ebp, esi
		not	ebp
		and	ebp, ecx
		mov	ecx, esi
		and	ecx, [esp+1Ch+var_10]
		add	ebp, ecx
		add	bp, [eax+58h]
		add	bp, dx
		rol	bp, 1
		movzx	ecx, bp
		mov	edx, ecx
		not	edx
		and	edx, [esp+1Ch+var_10]
		mov	ebp, esi
		and	ebp, ecx
		add	edx, ebp
		add	dx, [eax+5Ah]
		mov	[esp+1Ch+var_4], ecx
		add	dx, bx
		rol	dx, 2
		movzx	edx, dx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+5Ch]
		mov	[esp+1Ch+var_8], edx
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		mov	[esp+1Ch+var_10], esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+5Eh]
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+60h]
		mov	[esp+1Ch+var_C], ecx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, ecx
		and	esi, edx
		add	ebx, esi
		add	bx, [eax+62h]
		mov	[esp+1Ch+var_4], edx
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+64h]
		mov	[esp+1Ch+var_8], esi
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+66h]
		mov	[esp+1Ch+var_10], ecx
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+68h]
		mov	[esp+1Ch+var_C], edx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, edx
		and	ecx, esi
		add	ebx, ecx
		add	bx, [eax+6Ah]
		mov	[esp+1Ch+var_4], esi
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+6Ch]
		mov	[esp+1Ch+var_8], ecx
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+6Eh]
		mov	[esp+1Ch+var_10], edx
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+70h]
		mov	[esp+1Ch+var_C], esi
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, esi
		and	edx, ecx
		add	ebx, edx
		add	bx, [eax+72h]
		mov	[esp+1Ch+var_4], ecx
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, edx
		and	esi, ecx
		add	ebx, esi
		add	bx, [eax+74h]
		mov	[esp+1Ch+var_8], edx
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	esi, bx
		mov	ebx, esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+76h]
		mov	[esp+1Ch+var_10], esi
		add	bx, word ptr [esp+1Ch+var_C]
		rol	bx, 5
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	edx, ecx
		and	edx, esi
		add	ebx, edx
		add	bx, [eax+78h]
		mov	[esp+1Ch+var_C], ecx
		add	bx, word ptr [esp+1Ch+var_4]
		rol	bx, 1
		movzx	edx, bx
		mov	ebx, edx
		not	ebx
		and	ebx, esi
		mov	esi, ecx
		and	esi, edx
		add	ebx, esi
		add	bx, [eax+7Ah]
		mov	[esp+1Ch+var_4], edx
		add	bx, word ptr [esp+1Ch+var_8]
		rol	bx, 2
		movzx	esi, bx
		mov	ebx, esi
		mov	[esp+1Ch+var_8], esi
		not	ebx
		and	ebx, ecx
		mov	ecx, esi
		and	ecx, edx
		add	ebx, ecx
		add	bx, [eax+7Ch]
		add	bx, word ptr [esp+1Ch+var_10]
		rol	bx, 3
		movzx	ecx, bx
		mov	ebx, ecx
		not	ebx
		and	ebx, edx
		mov	[esp+1Ch+var_10], ecx
		and	ecx, esi
		add	ebx, ecx
		add	bx, [eax+7Eh]
		movzx	eax, word ptr [esp+1Ch+var_4]
		add	bx, word ptr [esp+1Ch+var_C]
		mov	cx, si
		rol	bx, 5
		movzx	edx, bx
		mov	[esp+1Ch+var_C], edx
		movzx	edx, word ptr [esp+1Ch+var_10]
		mov	[edi], ax
		movzx	eax, word ptr [esp+1Ch+var_C]
		pop	esi
		pop	ebp
		mov	[edi+2], cx
		mov	[edi+4], dx
		mov	[edi+6], ax
		pop	ebx
		add	esp, 10h
		retn
sub_10008800	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100090D0	proc near		; CODE XREF: sub_10009AE0+5Cp
					; sub_10009C60+6Cp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 10h
		movzx	ecx, word ptr [edx]
		push	ebx
		push	ebp
		push	esi
		movzx	esi, word ptr [edx+2]
		push	edi
		movzx	edi, word ptr [edx+4]
		movzx	edx, word ptr [edx+6]
		mov	ebx, edi
		mov	[esp+20h+var_10], edi
		and	edi, esi
		not	ebx
		and	ebx, ecx
		ror	dx, 5
		sub	dx, bx
		sub	dx, di
		sub	dx, [eax+7Eh]
		movzx	edi, word ptr [esp+20h+var_10]
		ror	di, 3
		movzx	edx, dx
		mov	ebx, esi
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	[esp+20h+var_8], esi
		and	esi, ecx
		sub	di, si
		sub	di, [eax+7Ch]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_8]
		ror	di, 2
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	ebx, edx
		and	ebx, ecx
		sub	di, bx
		sub	di, [eax+7Ah]
		mov	[esp+20h+var_C], ecx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		mov	ebx, edx
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	[esp+20h+var_4], edx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+78h]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	[esp+20h+var_10], esi
		and	esi, ecx
		sub	di, si
		sub	di, [eax+76h]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_10]
		ror	di, 3
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	[esp+20h+var_8], ecx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+74h]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_8]
		mov	[esp+20h+var_C], edx
		mov	[esp+20h+var_4], esi
		mov	[esp+20h+var_10], ecx
		ror	di, 2
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	ebx, esi
		and	ebx, edx
		sub	di, bx
		sub	di, [eax+72h]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		not	ebx
		and	ebx, edx
		sub	di, bx
		and	esi, ecx
		sub	di, si
		sub	di, [eax+70h]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, esi
		sub	di, bx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+6Eh]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_10]
		ror	di, 3
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	[esp+20h+var_8], edx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+6Ch]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_8]
		ror	di, 2
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	ebx, ecx
		and	ebx, esi
		sub	di, bx
		sub	di, [eax+6Ah]
		mov	[esp+20h+var_C], esi
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		mov	ebx, ecx
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	[esp+20h+var_4], ecx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+68h]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	[esp+20h+var_10], edx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+66h]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_10]
		not	ebx
		ror	di, 3
		and	ebx, edx
		mov	[esp+20h+var_8], esi
		mov	[esp+20h+var_C], ecx
		mov	[esp+20h+var_4], edx
		sub	di, bx
		and	esi, ecx
		sub	di, si
		sub	di, [eax+64h]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_8]
		not	ebx
		and	ebx, esi
		ror	di, 2
		sub	di, bx
		mov	ebx, edx
		and	ebx, ecx
		sub	di, bx
		sub	di, [eax+62h]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_C]
		not	ebx
		and	ebx, ecx
		and	edx, esi
		ror	di, 1
		sub	di, bx
		sub	di, dx
		sub	di, [eax+60h]
		movzx	edx, word ptr [esp+20h+var_4]
		ror	dx, 5
		movzx	edi, di
		mov	ebx, esi
		not	ebx
		and	ebx, edi
		sub	dx, bx
		mov	[esp+20h+var_10], esi
		and	esi, ecx
		sub	dx, si
		sub	dx, [eax+5Eh]
		mov	ebx, ecx
		movzx	esi, dx
		movzx	edx, word ptr [esp+20h+var_10]
		mov	[esp+20h+var_8], ecx
		and	ecx, edi
		not	ebx
		and	ebx, esi
		ror	dx, 3
		sub	dx, bx
		sub	dx, cx
		sub	dx, [eax+5Ch]
		movzx	ecx, word ptr [esp+20h+var_8]
		ror	cx, 2
		movzx	edx, dx
		mov	ebx, edi
		not	ebx
		and	ebx, edx
		sub	cx, bx
		mov	ebx, esi
		and	ebx, edi
		sub	cx, bx
		sub	cx, [eax+5Ah]
		mov	[esp+20h+var_C], edi
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_C]
		ror	cx, 1
		mov	ebx, esi
		not	ebx
		and	ebx, edi
		sub	cx, bx
		mov	[esp+20h+var_4], esi
		and	esi, edx
		sub	cx, si
		sub	cx, [eax+58h]
		mov	[esp+20h+var_10], edx
		movzx	ebx, cx
		mov	cx, word ptr [esp+20h+var_4]
		and	edx, 3Fh
		sub	cx, [eax+edx*2]
		mov	dx, word ptr [esp+20h+var_10]
		mov	[esp+20h+var_8], edi
		and	edi, 3Fh
		sub	dx, [eax+edi*2]
		mov	[esp+20h+var_C], ebx
		mov	word ptr [esp+20h+var_4], cx
		mov	word ptr [esp+20h+var_10], dx
		mov	si, word ptr [esp+20h+var_8]
		mov	di, word ptr [esp+20h+var_C]
		and	ebx, 3Fh
		sub	si, [eax+ebx*2]
		mov	ebx, [esp+20h+var_4]
		and	ebx, 3Fh
		sub	di, [eax+ebx*2]
		mov	ebx, [esp+20h+var_10]
		mov	ebp, [esp+20h+var_10]
		mov	word ptr [esp+20h+var_C], di
		not	ebx
		and	ebx, [esp+20h+var_C]
		ror	cx, 5
		sub	cx, bx
		mov	word ptr [esp+20h+var_8], si
		mov	ebx, [esp+20h+var_8]
		and	ebp, ebx
		sub	cx, bp
		sub	cx, [eax+56h]
		mov	ebp, ebx
		ror	dx, 3
		movzx	ecx, cx
		not	ebp
		and	ebp, ecx
		sub	dx, bp
		mov	ebp, ebx
		mov	ebx, [esp+20h+var_C]
		and	ebp, ebx
		sub	dx, bp
		sub	dx, [eax+54h]
		mov	ebp, ebx
		ror	si, 2
		movzx	edx, dx
		not	ebp
		and	ebp, edx
		sub	si, bp
		mov	ebp, ecx
		and	ebp, ebx
		sub	si, bp
		sub	si, [eax+52h]
		ror	di, 1
		movzx	esi, si
		mov	ebx, ecx
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	[esp+20h+var_4], ecx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+50h]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	[esp+20h+var_10], edx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+4Eh]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_10]
		ror	di, 3
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	[esp+20h+var_8], esi
		and	esi, ecx
		sub	di, si
		sub	di, [eax+4Ch]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_8]
		not	ebx
		ror	di, 2
		mov	[esp+20h+var_C], ecx
		mov	[esp+20h+var_4], edx
		mov	[esp+20h+var_10], esi
		and	ebx, esi
		sub	di, bx
		mov	ebx, edx
		and	ebx, ecx
		sub	di, bx
		sub	di, [eax+4Ah]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		not	ebx
		and	ebx, ecx
		sub	di, bx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+48h]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, edx
		sub	di, bx
		and	esi, ecx
		sub	di, si
		sub	di, [eax+46h]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_10]
		ror	di, 3
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	[esp+20h+var_8], ecx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+44h]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_8]
		ror	di, 2
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	ebx, esi
		and	ebx, edx
		sub	di, bx
		sub	di, [eax+42h]
		mov	[esp+20h+var_C], edx
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		mov	ebx, esi
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	[esp+20h+var_4], esi
		and	esi, ecx
		sub	di, si
		sub	di, [eax+40h]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	[esp+20h+var_10], ecx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+3Eh]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_10]
		not	ebx
		ror	di, 3
		and	ebx, ecx
		mov	[esp+20h+var_8], edx
		sub	di, bx
		mov	[esp+20h+var_C], esi
		mov	[esp+20h+var_4], ecx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+3Ch]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_8]
		ror	di, 2
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	ebx, ecx
		and	ebx, esi
		sub	di, bx
		sub	di, [eax+3Ah]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		not	ebx
		and	ebx, esi
		sub	di, bx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+38h]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	[esp+20h+var_10], edx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+36h]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_10]
		ror	di, 3
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	[esp+20h+var_8], esi
		and	esi, ecx
		sub	di, si
		sub	di, [eax+34h]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_8]
		ror	di, 2
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	ebx, edx
		and	ebx, ecx
		sub	di, bx
		sub	di, [eax+32h]
		mov	ebx, edx
		mov	[esp+20h+var_C], ecx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	[esp+20h+var_4], edx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+30h]
		movzx	edx, word ptr [esp+20h+var_4]
		movzx	edi, di
		mov	ebx, esi
		ror	dx, 5
		not	ebx
		and	ebx, edi
		mov	[esp+20h+var_10], esi
		sub	dx, bx
		and	esi, ecx
		sub	dx, si
		sub	dx, [eax+2Eh]
		mov	[esp+20h+var_8], ecx
		mov	[esp+20h+var_C], edi
		movzx	esi, dx
		movzx	edx, word ptr [esp+20h+var_10]
		mov	ebx, ecx
		and	ecx, edi
		not	ebx
		and	ebx, esi
		ror	dx, 3
		sub	dx, bx
		sub	dx, cx
		sub	dx, [eax+2Ch]
		movzx	ecx, word ptr [esp+20h+var_8]
		ror	cx, 2
		movzx	edx, dx
		mov	ebx, edi
		not	ebx
		and	ebx, edx
		sub	cx, bx
		mov	ebx, esi
		and	ebx, edi
		sub	cx, bx
		sub	cx, [eax+2Ah]
		mov	ebx, esi
		movzx	edi, cx
		movzx	ecx, word ptr [esp+20h+var_C]
		ror	cx, 1
		not	ebx
		and	ebx, edi
		sub	cx, bx
		mov	[esp+20h+var_4], esi
		and	esi, edx
		sub	cx, si
		sub	cx, [eax+28h]
		mov	[esp+20h+var_10], edx
		and	edx, 3Fh
		movzx	ebx, cx
		mov	cx, word ptr [esp+20h+var_4]
		sub	cx, [eax+edx*2]
		mov	dx, word ptr [esp+20h+var_10]
		mov	[esp+20h+var_C], ebx
		and	ebx, 3Fh
		mov	[esp+20h+var_8], edi
		mov	si, word ptr [esp+20h+var_8]
		sub	si, [eax+ebx*2]
		mov	word ptr [esp+20h+var_4], cx
		mov	ebx, [esp+20h+var_4]
		and	edi, 3Fh
		sub	dx, [eax+edi*2]
		mov	di, word ptr [esp+20h+var_C]
		and	ebx, 3Fh
		sub	di, [eax+ebx*2]
		mov	word ptr [esp+20h+var_10], dx
		mov	ebx, [esp+20h+var_10]
		mov	ebp, [esp+20h+var_10]
		ror	cx, 5
		not	ebx
		mov	word ptr [esp+20h+var_C], di
		and	ebx, [esp+20h+var_C]
		mov	word ptr [esp+20h+var_8], si
		sub	cx, bx
		mov	ebx, [esp+20h+var_8]
		and	ebp, ebx
		sub	cx, bp
		sub	cx, [eax+26h]
		ror	dx, 3
		movzx	ecx, cx
		mov	ebp, ebx
		not	ebp
		and	ebp, ecx
		sub	dx, bp
		mov	ebp, ebx
		mov	ebx, [esp+20h+var_C]
		and	ebp, ebx
		sub	dx, bp
		sub	dx, [eax+24h]
		mov	ebp, ebx
		movzx	edx, dx
		not	ebp
		ror	si, 2
		mov	[esp+20h+var_4], ecx
		mov	[esp+20h+var_10], edx
		and	ebp, edx
		sub	si, bp
		mov	ebp, ecx
		and	ebp, ebx
		sub	si, bp
		sub	si, [eax+22h]
		ror	di, 1
		movzx	esi, si
		mov	ebx, ecx
		not	ebx
		and	ebx, esi
		sub	di, bx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+20h]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, ecx
		sub	di, bx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+1Eh]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_10]
		ror	di, 3
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	[esp+20h+var_8], esi
		and	esi, ecx
		sub	di, si
		sub	di, [eax+1Ch]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_8]
		ror	di, 2
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	ebx, edx
		and	ebx, ecx
		sub	di, bx
		sub	di, [eax+1Ah]
		mov	[esp+20h+var_C], ecx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		mov	ebx, edx
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	[esp+20h+var_4], edx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+18h]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	[esp+20h+var_10], esi
		and	esi, ecx
		sub	di, si
		sub	di, [eax+16h]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_10]
		not	ebx
		ror	di, 3
		and	ebx, esi
		mov	[esp+20h+var_8], ecx
		sub	di, bx
		and	ecx, edx
		mov	[esp+20h+var_C], edx
		mov	[esp+20h+var_4], esi
		sub	di, cx
		sub	di, [eax+14h]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_8]
		ror	di, 2
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	ebx, esi
		and	ebx, edx
		sub	di, bx
		sub	di, [eax+12h]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		not	ebx
		and	ebx, edx
		sub	di, bx
		and	esi, ecx
		sub	di, si
		sub	di, [eax+10h]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	[esp+20h+var_10], ecx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+0Eh]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_10]
		ror	di, 3
		not	ebx
		and	ebx, ecx
		sub	di, bx
		mov	[esp+20h+var_8], edx
		and	edx, esi
		sub	di, dx
		sub	di, [eax+0Ch]
		mov	ebx, esi
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_8]
		ror	di, 2
		not	ebx
		and	ebx, edx
		sub	di, bx
		mov	ebx, ecx
		and	ebx, esi
		sub	di, bx
		sub	di, [eax+0Ah]
		mov	[esp+20h+var_C], esi
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		mov	ebx, ecx
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	[esp+20h+var_4], ecx
		and	ecx, edx
		sub	di, cx
		sub	di, [eax+8]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_4]
		ror	di, 5
		not	ebx
		and	ebx, ecx
		mov	[esp+20h+var_10], edx
		and	edx, esi
		sub	di, bx
		sub	di, dx
		sub	di, [eax+6]
		mov	[esp+20h+var_8], esi
		mov	[esp+20h+var_C], ecx
		movzx	edx, di
		movzx	edi, word ptr [esp+20h+var_10]
		ror	di, 3
		mov	ebx, esi
		not	ebx
		and	ebx, edx
		sub	di, bx
		and	esi, ecx
		sub	di, si
		sub	di, [eax+4]
		mov	ebx, ecx
		movzx	esi, di
		movzx	edi, word ptr [esp+20h+var_8]
		ror	di, 2
		not	ebx
		and	ebx, esi
		sub	di, bx
		mov	ebx, edx
		and	ebx, ecx
		sub	di, bx
		sub	di, [eax+2]
		mov	ebx, edx
		movzx	ecx, di
		movzx	edi, word ptr [esp+20h+var_C]
		ror	di, 1
		not	ebx
		and	ebx, ecx
		mov	[esp+20h+var_4], edx
		and	edx, esi
		sub	di, bx
		sub	di, dx
		sub	di, [eax]
		mov	eax, [esp+20h+arg_0]
		movzx	edx, cx
		mov	[eax], di
		pop	edi
		mov	[esp+1Ch+var_8], ecx
		movzx	ecx, si
		mov	[esp+1Ch+var_10], esi
		mov	[eax+2], dx
		movzx	edx, word ptr [esp+1Ch+var_4]
		pop	esi
		pop	ebp
		mov	[eax+4], cx
		mov	[eax+6], dx
		pop	ebx
		add	esp, 10h
		retn
sub_100090D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009A30	proc near		; DATA XREF: sub_10009E20:loc_10009EC1o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		mov	edx, [ebp+arg_C]
		sub	esp, 14h
		push	ebx
		push	esi
		push	edi
		test	edx, edx
		jz	loc_10009ACB
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		lea	ebx, [eax+4]
		sub	eax, ecx
		add	eax, 0FFFFFFFCh
		mov	[esp+20h+var_C], eax
		lea	eax, [edx-1]
		shr	eax, 3
		inc	eax
		lea	esi, [ecx+4]
		mov	[esp+20h+var_10], eax

loc_10009A67:				; CODE XREF: sub_10009A30+99j
		mov	eax, [esp+20h+var_C]
		movzx	ecx, word ptr [eax+esi]
		movzx	edx, word ptr [ebx-2]
		movzx	eax, word ptr [ebx]
		mov	[esp+20h+var_8], cx
		movzx	ecx, word ptr [ebx+2]
		mov	[esp+20h+var_6], dx
		lea	edx, [esp+20h+var_8]
		mov	[esp+20h+var_4], ax
		mov	eax, [ebp+arg_0]
		mov	edi, edx
		mov	[esp+20h+var_2], cx
		call	sub_10008800
		movzx	edx, [esp+20h+var_8]
		movzx	eax, [esp+20h+var_6]
		movzx	ecx, [esp+20h+var_4]
		mov	[esi-4], dx
		movzx	edx, [esp+20h+var_2]
		mov	[esi-2], ax
		mov	[esi], cx
		mov	[esi+2], dx
		add	ebx, 8
		add	esi, 8
		dec	[esp+20h+var_10]
		jnz	short loc_10009A67

loc_10009ACB:				; CODE XREF: sub_10009A30+11j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10009A30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009AE0	proc near		; DATA XREF: sub_10009E20+ABo

var_C		= dword	ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ebp+arg_C]
		push	esi
		push	edi
		test	ebx, ebx
		jz	short loc_10009B70
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		lea	edi, [eax+4]
		sub	eax, ecx
		dec	ebx
		add	eax, 0FFFFFFFCh
		shr	ebx, 3
		lea	esi, [ecx+4]
		mov	[esp+18h+var_C], eax
		inc	ebx

loc_10009B0D:				; CODE XREF: sub_10009AE0+8Ej
		mov	eax, [esp+18h+var_C]
		movzx	ecx, word ptr [eax+esi]
		movzx	edx, word ptr [edi-2]
		movzx	eax, word ptr [edi]
		mov	[esp+18h+var_8], cx
		movzx	ecx, word ptr [edi+2]
		mov	[esp+18h+var_6], dx
		lea	edx, [esp+18h+var_8]
		mov	[esp+18h+var_4], ax
		mov	eax, [ebp+arg_0]
		push	edx
		mov	[esp+1Ch+var_2], cx
		call	sub_100090D0
		movzx	eax, [esp+1Ch+var_8]
		movzx	ecx, [esp+1Ch+var_6]
		movzx	edx, [esp+1Ch+var_4]
		mov	[esi-4], ax
		movzx	eax, [esp+1Ch+var_2]
		mov	[esi-2], cx
		mov	[esi], dx
		mov	[esi+2], ax
		add	esp, 4
		add	edi, 8
		add	esi, 8
		dec	ebx
		jnz	short loc_10009B0D

loc_10009B70:				; CODE XREF: sub_10009AE0+11j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10009AE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009B80	proc near		; DATA XREF: sub_10009E20+60o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 14h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_C]
		test	edi, edi
		jz	loc_10009C51
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		lea	eax, [ecx+4]
		sub	ecx, edx
		add	ecx, 0FFFFFFFCh
		mov	[esp+20h+var_C], ecx
		lea	ecx, [edi-1]
		shr	ecx, 3
		inc	ecx
		mov	[esp+20h+var_14], eax
		lea	esi, [edx+4]
		mov	[esp+20h+var_10], ecx
		jmp	short loc_10009BC4
; ---------------------------------------------------------------------------

loc_10009BC0:				; CODE XREF: sub_10009B80+CBj
		mov	eax, [esp+20h+var_14]

loc_10009BC4:				; CODE XREF: sub_10009B80+3Ej
		mov	ecx, [esp+20h+var_C]
		movzx	edx, word ptr [ecx+esi]
		movzx	ecx, word ptr [eax-2]
		mov	word ptr [esp+20h+var_8], dx
		movzx	edx, word ptr [eax]
		movzx	eax, word ptr [eax+2]
		mov	word ptr [esp+20h+var_4], dx
		mov	edx, [ebx+84h]
		mov	word ptr [esp+20h+var_4+2], ax
		xor	[esp+20h+var_4], edx
		mov	word ptr [esp+20h+var_8+2], cx
		mov	ecx, [ebx+80h]
		xor	[esp+20h+var_8], ecx
		lea	edx, [esp+20h+var_8]
		mov	edi, edx
		mov	eax, ebx
		call	sub_10008800
		mov	eax, [esp+20h+var_8]
		mov	ecx, [esp+20h+var_4]
		add	[esp+20h+var_14], 8
		movzx	edx, ax
		mov	[ebx+80h], eax
		movzx	eax, word ptr [esp+20h+var_8+2]
		mov	[ebx+84h], ecx
		mov	[esi-4], dx
		movzx	edx, word ptr [esp+20h+var_4+2]
		movzx	ecx, cx
		mov	[esi-2], ax
		mov	[esi], cx
		mov	[esi+2], dx
		add	esi, 8
		dec	[esp+20h+var_10]
		jnz	loc_10009BC0

loc_10009C51:				; CODE XREF: sub_10009B80+11j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10009B80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009C60	proc near		; DATA XREF: sub_10009E20+6Ao

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		mov	edx, [ebp+arg_C]
		sub	esp, 1Ch
		push	ebx
		push	esi
		push	edi
		test	edx, edx
		jz	loc_10009D29
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		mov	edi, [ebp+arg_0]
		lea	ebx, [eax+4]
		sub	eax, ecx
		add	eax, 0FFFFFFFCh
		mov	[esp+28h+var_14], eax
		lea	eax, [edx-1]
		shr	eax, 3
		inc	eax
		lea	esi, [ecx+4]
		mov	[esp+28h+var_18], eax

loc_10009C9A:				; CODE XREF: sub_10009C60+C3j
		mov	eax, [esp+28h+var_14]
		movzx	ecx, word ptr [eax+esi]
		mov	dx, [ebx-2]
		mov	ax, [ebx]
		mov	word ptr [esp+28h+var_10+2], dx
		mov	word ptr [esp+28h+var_10], cx
		movzx	ecx, word ptr [ebx+2]
		lea	edx, [esp+28h+var_8]
		mov	word ptr [esp+28h+var_C], ax
		push	edx
		lea	edx, [esp+2Ch+var_10]
		mov	eax, edi
		mov	word ptr [esp+2Ch+var_C+2], cx
		call	sub_100090D0
		mov	eax, [esp+2Ch+var_8]
		xor	eax, [edi+80h]
		mov	edx, [esp+2Ch+var_10]
		mov	ecx, [esp+2Ch+var_4]
		xor	ecx, [edi+84h]
		mov	[edi+80h], edx
		mov	edx, [esp+2Ch+var_C]
		mov	[edi+84h], edx
		mov	[esi-4], ax
		mov	[esi], cx
		mov	[esp+2Ch+var_8], eax
		mov	[esp+2Ch+var_4], ecx
		shr	eax, 10h
		shr	ecx, 10h
		mov	[esi-2], ax
		mov	[esi+2], cx
		add	esp, 4
		add	ebx, 8
		add	esi, 8
		dec	[esp+28h+var_18]
		jnz	loc_10009C9A

loc_10009D29:				; CODE XREF: sub_10009C60+11j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10009C60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009D40	proc near		; DATA XREF: .rdata:100391F8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_14]
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_10009D99
		test	bl, 7
		jz	short loc_10009D62
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10009D62:				; CODE XREF: sub_10009D40+Ej
		cmp	[esp+4+arg_C], ebx
		jnb	short loc_10009D7A
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10009D7A:				; CODE XREF: sub_10009D40+26j
		mov	eax, [esp+4+arg_10]
		mov	ecx, [esp+4+arg_4]
		push	ebx
		push	eax
		mov	eax, [esp+0Ch+arg_0]
		mov	edx, [eax+88h]
		push	ecx
		push	eax
		call	edx
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10009D9F

loc_10009D99:				; CODE XREF: sub_10009D40+9j
		mov	ecx, [esp+4+arg_8]
		mov	[ecx], ebx

loc_10009D9F:				; CODE XREF: sub_10009D40+57j
		pop	ebx
		retn
sub_10009D40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009DB0	proc near		; DATA XREF: .rdata:100391FCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_14]
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_10009E09
		test	bl, 7
		jz	short loc_10009DD2
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10009DD2:				; CODE XREF: sub_10009DB0+Ej
		cmp	[esp+4+arg_C], ebx
		jnb	short loc_10009DEA
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10009DEA:				; CODE XREF: sub_10009DB0+26j
		mov	eax, [esp+4+arg_10]
		mov	ecx, [esp+4+arg_4]
		push	ebx
		push	eax
		mov	eax, [esp+0Ch+arg_0]
		mov	edx, [eax+8Ch]
		push	ecx
		push	eax
		call	edx
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10009E0F

loc_10009E09:				; CODE XREF: sub_10009DB0+9j
		mov	ecx, [esp+4+arg_8]
		mov	[ecx], ebx

loc_10009E0F:				; CODE XREF: sub_10009DB0+57j
		pop	ebx
		retn
sub_10009DB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10009E20(void	*Dst, void *Src, size_t	Size, int, int,	int)
sub_10009E20	proc near		; CODE XREF: sub_10009F70+30p
					; DATA XREF: .rdata:10039398o

Dst		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	ecx, [esp+Src]
		push	ebx
		push	ebp
		push	esi
		test	ecx, ecx
		jz	loc_10009F4D
		mov	esi, [esp+0Ch+Dst]
		test	esi, esi
		jz	loc_10009F4D
		mov	ebp, [esp+0Ch+Size]
		test	ebp, ebp
		jz	loc_10009F4D
		cmp	ebp, 80h
		ja	loc_10009F4D
		mov	ebx, [esp+0Ch+arg_14]
		cmp	ebx, 80h
		ja	loc_10009F4D
		mov	eax, [esp+0Ch+arg_10]
		test	eax, eax
		jz	short loc_10009EC1
		cmp	eax, 1
		jnz	loc_10009F4D
		mov	eax, [esp+0Ch+arg_C]
		test	eax, eax
		jz	loc_10009F4D
		mov	dword ptr [esi+88h], offset sub_10009B80
		mov	dword ptr [esi+8Ch], offset sub_10009C60
		movzx	edx, word ptr [eax]
		mov	[esi+80h], dx
		movzx	edx, word ptr [eax+2]
		mov	[esi+82h], dx
		movzx	edx, word ptr [eax+4]
		mov	[esi+84h], dx
		mov	ax, [eax+6]
		mov	[esi+86h], ax
		jmp	short loc_10009ED5
; ---------------------------------------------------------------------------

loc_10009EC1:				; CODE XREF: sub_10009E20+49j
		mov	dword ptr [esi+88h], offset sub_10009A30
		mov	dword ptr [esi+8Ch], offset sub_10009AE0

loc_10009ED5:				; CODE XREF: sub_10009E20+9Fj
		push	edi
		push	ebp		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	memcpy
		mov	cl, [esi+ebp-1]
		mov	eax, 80h
		sub	eax, ebp
		add	esp, 0Ch
		mov	edi, esi
		test	eax, eax
		jle	short loc_10009F08

loc_10009EF2:				; CODE XREF: sub_10009E20+E6j
		mov	dl, [edi]
		add	dl, cl
		movzx	ecx, dl
		mov	cl, ds:byte_10039D18[ecx]
		mov	[edi+ebp], cl
		dec	eax
		inc	edi
		test	eax, eax
		jg	short loc_10009EF2

loc_10009F08:				; CODE XREF: sub_10009E20+D0j
		mov	eax, esi
		sub	eax, ebx
		movzx	edx, byte ptr [eax+80h]
		mov	cl, ds:byte_10039D18[edx]
		mov	[eax+80h], cl
		sub	eax, 0FFFFFF81h
		lea	edx, [eax+ebx]
		cmp	eax, esi
		jb	short loc_10009F46
		lea	esp, [esp+0]

loc_10009F30:				; CODE XREF: sub_10009E20+124j
		movzx	edi, byte ptr [edx]
		movzx	ecx, cl
		xor	ecx, edi
		mov	cl, ds:byte_10039D18[ecx]
		mov	[eax], cl
		dec	eax
		dec	edx
		cmp	eax, esi
		jnb	short loc_10009F30

loc_10009F46:				; CODE XREF: sub_10009E20+107j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10009F4D:				; CODE XREF: sub_10009E20+9j
					; sub_10009E20+15j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10009E20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10009F70(void	*Src, size_t Size, int,	int, int)
sub_10009F70	proc near		; DATA XREF: .rdata:100391F0o

Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	90h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10009FC8
		mov	eax, [esp+4+arg_10]
		mov	ecx, [esp+4+arg_C]
		mov	edx, [esp+4+arg_8]
		push	0
		push	eax		; int
		mov	eax, [esp+0Ch+Size]
		push	ecx		; int
		mov	ecx, [esp+10h+Src]
		push	edx		; int
		push	eax		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	sub_10009E20
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_10009FC6
		push	90h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		push	esi
		call	PORT_Free_Util
		add	esp, 10h
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10009FC6:				; CODE XREF: sub_10009F70+3Aj
		mov	eax, esi

loc_10009FC8:				; CODE XREF: sub_10009F70+12j
		pop	esi
		retn
sub_10009F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009FD0	proc near		; DATA XREF: .rdata:100393B0o
		push	102h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_10009FD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10009FE0(int,	int, size_t Size)
sub_10009FE0	proc near		; CODE XREF: sub_1000A170+27p
					; DATA XREF: .rdata:1003939Co

Src		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
Dst		= byte ptr -104h
var_103		= byte ptr -103h
var_102		= byte ptr -102h
var_101		= byte ptr -101h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Size		= dword	ptr  0Ch

		sub	esp, 114h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+114h+var_4], eax
		mov	eax, [esp+114h+arg_4]
		push	ebx
		mov	ebx, [esp+118h+Size]
		push	ebp
		mov	ebp, [esp+11Ch+arg_0]
		mov	[esp+11Ch+Src],	eax
		test	ebx, ebx
		jz	loc_1000A13D
		cmp	ebx, 100h
		jnb	loc_1000A13D
		test	ebp, ebp
		jnz	short loc_1000A031
		push	0FFFFE005h
		jmp	loc_1000A142
; ---------------------------------------------------------------------------

loc_1000A031:				; CODE XREF: sub_10009FE0+45j
		push	esi
		push	edi
		mov	ecx, 40h
		mov	esi, offset dword_10039E18
		mov	edi, ebp
		rep movsd
		mov	edi, 100h
		lea	esi, [esp+124h+Dst]
		cmp	ebx, edi
		jnb	short loc_1000A067
		mov	edi, edi

loc_1000A050:				; CODE XREF: sub_10009FE0+85j
		mov	ecx, [esp+124h+Src]
		push	ebx		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	memcpy
		sub	edi, ebx
		add	esp, 0Ch
		add	esi, ebx
		cmp	edi, ebx
		ja	short loc_1000A050

loc_1000A067:				; CODE XREF: sub_10009FE0+6Cj
		mov	edx, [esp+124h+Src]
		push	edi		; Size
		push	edx		; Src
		push	esi		; Dst
		call	memcpy
		lea	edx, [esp+130h+var_103]
		sub	edx, ebp
		mov	[esp+130h+var_108], edx
		lea	edx, [esp+130h+var_102]
		sub	edx, ebp
		mov	[esp+130h+var_110], edx
		lea	edi, [esp+130h+Dst]
		lea	edx, [esp+130h+var_101]
		add	esp, 0Ch
		xor	cl, cl
		sub	edi, ebp
		sub	edx, ebp
		mov	eax, ebp
		mov	[esp+124h+var_10C], edx
		mov	[esp+124h+Src],	40h

loc_1000A0A6:				; CODE XREF: sub_10009FE0+137j
		mov	dl, [eax]
		movzx	ebx, byte ptr [edi+eax]
		add	bl, dl
		add	cl, bl
		movzx	esi, cl
		movzx	ebx, byte ptr [esi+ebp]
		mov	[eax], bl
		mov	[esi+ebp], dl
		mov	dl, [eax+1]
		mov	esi, [esp+124h+var_108]
		movzx	ebx, byte ptr [esi+eax]
		add	bl, dl
		add	cl, bl
		movzx	esi, cl
		movzx	ebx, byte ptr [esi+ebp]
		mov	[eax+1], bl
		mov	[esi+ebp], dl
		mov	dl, [eax+2]
		mov	esi, [esp+124h+var_110]
		movzx	ebx, byte ptr [esi+eax]
		add	bl, dl
		add	cl, bl
		movzx	esi, cl
		movzx	ebx, byte ptr [esi+ebp]
		mov	[eax+2], bl
		mov	[esi+ebp], dl
		mov	esi, [esp+124h+var_10C]
		movzx	ebx, byte ptr [esi+eax]
		mov	dl, [eax+3]
		add	bl, dl
		add	cl, bl
		movzx	esi, cl
		movzx	ebx, byte ptr [esi+ebp]
		mov	[eax+3], bl
		add	eax, 4
		dec	[esp+124h+Src]
		mov	[esi+ebp], dl
		jnz	short loc_1000A0A6
		pop	edi
		pop	esi
		mov	word ptr [ebp+100h], 0
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+114h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 114h
		retn
; ---------------------------------------------------------------------------

loc_1000A13D:				; CODE XREF: sub_10009FE0+31j
					; sub_10009FE0+3Dj
		push	0FFFFE00Eh

loc_1000A142:				; CODE XREF: sub_10009FE0+4Cj
		call	PORT_SetError_Util
		mov	ecx, [esp+120h+var_4]
		add	esp, 4
		pop	ebp
		pop	ebx
		xor	ecx, esp
		or	eax, 0FFFFFFFFh
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 114h
		retn
sub_10009FE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A170(int,	size_t Size)
sub_1000A170	proc near		; DATA XREF: .rdata:100391E0o

arg_0		= dword	ptr  4
Size		= dword	ptr  8

		push	esi
		push	102h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1000A1B7
		mov	eax, [esp+4+Size]
		mov	ecx, [esp+4+arg_0]
		push	0
		push	0
		push	0
		push	0
		push	eax		; Size
		push	ecx		; int
		push	esi		; int
		call	sub_10009FE0
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000A1B5
		push	102h
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A1B5:				; CODE XREF: sub_1000A170+31j
		mov	eax, esi

loc_1000A1B7:				; CODE XREF: sub_1000A170+12j
		pop	esi
		retn
sub_1000A170	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A1C0	proc near		; DATA XREF: .rdata:100391E4o

arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jz	short locret_1000A1D4
		mov	[esp+arg_4], 102h
		jmp	PORT_ZFree_Util
; ---------------------------------------------------------------------------

locret_1000A1D4:			; CODE XREF: sub_1000A1C0+5j
		retn
sub_1000A1C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A1E0	proc near		; CODE XREF: sub_1000A290+62p

var_5		= byte ptr -5
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		push	ebx
		mov	bl, [edx+100h]
		push	esi
		mov	esi, eax
		mov	al, [edx+101h]
		mov	[esp+10h+var_5], al
		mov	eax, [esp+10h+arg_C]
		cmp	[esp+10h+arg_4], eax
		jnb	short loc_1000A217
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000A217:				; CODE XREF: sub_1000A1E0+1Fj
		test	eax, eax
		jz	short loc_1000A270
		mov	ecx, [esp+10h+arg_8]
		sub	ecx, esi
		push	ebp
		mov	[esp+14h+var_4], ecx
		mov	[esp+14h+arg_4], eax
		push	edi
		jmp	short loc_1000A230
; ---------------------------------------------------------------------------
		align 10h

loc_1000A230:				; CODE XREF: sub_1000A1E0+4Bj
					; sub_1000A1E0+88j
		mov	al, [esp+18h+var_5]
		inc	bl
		movzx	edi, bl
		mov	cl, [edi+edx]
		add	al, cl
		movzx	ebp, al
		mov	[esp+18h+var_5], al
		mov	al, [ebp+edx+0]
		mov	[edi+edx], al
		add	al, cl
		mov	[ebp+edx+0], cl
		movzx	ecx, al
		movzx	eax, byte ptr [ecx+edx]
		mov	ecx, [esp+18h+var_4]
		xor	al, [ecx+esi]
		inc	esi
		dec	[esp+18h+arg_4]
		mov	[esi-1], al
		jnz	short loc_1000A230
		mov	eax, [esp+18h+arg_C]
		pop	edi
		pop	ebp

loc_1000A270:				; CODE XREF: sub_1000A1E0+39j
		mov	ecx, [esp+10h+arg_0]
		mov	[ecx], eax
		mov	al, [esp+10h+var_5]
		pop	esi
		mov	[edx+100h], bl
		mov	[edx+101h], al
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_1000A1E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A290	proc near		; CODE XREF: sub_1000A7F0+32p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 24h
		mov	ecx, [esp+24h+arg_C]
		mov	al, [edx+101h]
		push	ebx
		mov	bl, [edx+100h]
		push	ebp
		mov	ebp, [esp+2Ch+arg_8]
		push	esi
		mov	esi, [esp+30h+arg_0]
		push	edi
		mov	edi, [esp+34h+arg_10]
		and	ecx, 3
		and	esi, 3
		mov	[esp+34h+var_8], ecx
		mov	[esp+34h+var_C], esi
		cmp	ebp, edi
		jnb	short loc_1000A2DD
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1000A2DD:				; CODE XREF: sub_1000A290+33j
		cmp	edi, 8
		jnb	short loc_1000A302
		mov	eax, [esp+34h+arg_C]
		mov	ecx, [esp+34h+arg_4]
		push	edi
		push	eax
		mov	eax, [esp+3Ch+arg_0]
		push	ebp
		push	ecx
		call	sub_1000A1E0
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1000A302:				; CODE XREF: sub_1000A290+50j
		mov	ebp, [esp+34h+arg_4]
		mov	[ebp+0], edi
		mov	edi, [esp+34h+arg_C]
		mov	ebp, [esp+34h+arg_0]
		sub	ebp, esi
		sub	edi, ecx
		mov	[esp+34h+var_1C], ebp
		cmp	ecx, esi
		ja	short loc_1000A32E
		sub	esi, ecx
		add	esi, esi
		add	esi, esi
		add	esi, esi
		mov	ecx, 20h
		sub	ecx, esi
		jmp	short loc_1000A33D
; ---------------------------------------------------------------------------

loc_1000A32E:				; CODE XREF: sub_1000A290+8Bj
		sub	ecx, esi
		add	ecx, ecx
		add	ecx, ecx
		add	ecx, ecx
		mov	esi, 20h
		sub	esi, ecx

loc_1000A33D:				; CODE XREF: sub_1000A290+9Cj
		mov	[esp+34h+var_14], esi
		mov	esi, [esp+34h+var_C]
		mov	[esp+34h+var_10], ecx
		xor	ecx, ecx
		cmp	esi, ecx
		jz	loc_1000A468
		mov	ecx, 4
		sub	ecx, esi
		mov	[esp+34h+var_18], ecx
		jz	short loc_1000A3D5
		mov	esi, [esp+34h+arg_0]
		mov	ecx, [esp+34h+arg_C]
		sub	ecx, esi
		mov	[esp+34h+var_4], ecx
		mov	ecx, [esp+34h+var_18]
		mov	[esp+34h+var_1C], esi
		mov	[esp+34h+var_20], ecx
		lea	ebx, [ebx+0]

loc_1000A380:				; CODE XREF: sub_1000A290+13Fj
		inc	bl
		movzx	esi, bl
		movzx	ecx, byte ptr [esi+edx]
		add	al, cl
		mov	byte ptr [esp+34h+arg_8], al
		movzx	eax, al
		add	eax, edx
		mov	[esp+34h+var_24], eax
		mov	al, [eax]
		mov	[esi+edx], al
		mov	esi, [esp+34h+var_24]
		mov	byte ptr [esp+34h+arg_0], cl
		add	al, byte ptr [esp+34h+arg_0]
		movzx	ecx, cl
		movzx	eax, al
		mov	[esi], cl
		movzx	ecx, byte ptr [eax+edx]
		mov	esi, [esp+34h+var_1C]
		mov	eax, [esp+34h+var_4]
		xor	cl, [eax+esi]
		mov	al, byte ptr [esp+34h+arg_8]
		mov	[esi], cl
		inc	esi
		dec	[esp+34h+var_20]
		mov	[esp+34h+var_1C], esi
		jnz	short loc_1000A380
		mov	ecx, [esp+34h+var_18]

loc_1000A3D5:				; CODE XREF: sub_1000A290+CEj
		sub	[esp+34h+arg_10], ecx
		mov	ecx, [esp+34h+var_8]
		mov	esi, [esp+34h+var_C]
		add	ebp, 4
		add	edi, 4
		mov	[esp+34h+var_1C], ebp
		cmp	ecx, esi
		jnb	short loc_1000A44B
		sub	esi, ecx
		mov	[esp+34h+arg_8], 0
		mov	[esp+34h+var_20], 0
		mov	[esp+34h+arg_0], 0
		mov	[esp+34h+var_4], esi
		jz	loc_1000A4B9
		mov	ecx, [esp+34h+var_18]
		add	ecx, [esp+34h+arg_C]
		mov	[esp+34h+arg_C], ecx
		mov	ecx, [esp+34h+arg_0]

loc_1000A423:				; CODE XREF: sub_1000A290+1B7j
		mov	esi, [esp+34h+arg_C]
		movzx	esi, byte ptr [esi+ecx]
		mov	ecx, [esp+34h+arg_8]
		add	[esp+34h+arg_8], 8
		shl	esi, cl
		mov	ecx, [esp+34h+arg_0]
		inc	ecx
		mov	[esp+34h+arg_0], ecx
		or	[esp+34h+var_20], esi
		cmp	ecx, [esp+34h+var_4]
		jb	short loc_1000A423
		jmp	short loc_1000A4B9
; ---------------------------------------------------------------------------

loc_1000A44B:				; CODE XREF: sub_1000A290+15Dj
		jbe	short loc_1000A45E
		mov	esi, [edi]
		mov	ecx, [esp+34h+var_10]
		add	edi, 4
		shr	esi, cl
		mov	[esp+34h+var_20], esi
		jmp	short loc_1000A4B9
; ---------------------------------------------------------------------------

loc_1000A45E:				; CODE XREF: sub_1000A290:loc_1000A44Bj
		mov	[esp+34h+var_20], 0
		jmp	short loc_1000A4B9
; ---------------------------------------------------------------------------

loc_1000A468:				; CODE XREF: sub_1000A290+BDj
		mov	esi, [esp+34h+var_8]
		mov	[esp+34h+var_20], ecx
		cmp	esi, ecx
		jz	short loc_1000A4B9
		mov	[esp+34h+arg_8], ecx
		mov	[esp+34h+arg_0], ecx
		mov	ecx, 4
		sub	ecx, esi
		mov	[esp+34h+var_4], ecx
		jz	short loc_1000A4B6
		mov	ecx, [esp+34h+arg_0]
		lea	ecx, [ecx+0]

loc_1000A490:				; CODE XREF: sub_1000A290+224j
		mov	esi, [esp+34h+arg_C]
		movzx	esi, byte ptr [ecx+esi]
		mov	ecx, [esp+34h+arg_8]
		add	[esp+34h+arg_8], 8
		shl	esi, cl
		mov	ecx, [esp+34h+arg_0]
		inc	ecx
		mov	[esp+34h+arg_0], ecx
		or	[esp+34h+var_20], esi
		cmp	ecx, [esp+34h+var_4]
		jb	short loc_1000A490

loc_1000A4B6:				; CODE XREF: sub_1000A290+1F7j
		add	edi, 4

loc_1000A4B9:				; CODE XREF: sub_1000A290+17Dj
					; sub_1000A290+1B9j ...
		mov	ecx, [esp+34h+var_14]
		test	ecx, ecx
		jz	loc_1000A698
		shr	ecx, 3
		lea	esi, [ecx+4]
		mov	[esp+34h+var_4], ecx
		mov	ecx, [esp+34h+arg_10]
		cmp	ecx, esi
		jb	loc_1000A627
		sub	ecx, esi
		shr	ecx, 2
		inc	ecx
		mov	[esp+34h+arg_C], ecx

loc_1000A4E5:				; CODE XREF: sub_1000A290+391j
		mov	esi, [edi]
		add	edi, 4
		mov	[esp+34h+var_8], edi
		inc	bl
		movzx	edi, bl
		movzx	ecx, byte ptr [edi+edx]
		add	al, cl
		movzx	ebp, al
		mov	byte ptr [esp+34h+arg_8], al
		mov	al, [ebp+edx+0]
		mov	[edi+edx], al
		mov	byte ptr [esp+34h+arg_0], cl
		add	al, byte ptr [esp+34h+arg_0]
		movzx	ecx, cl
		mov	[ebp+edx+0], cl
		movzx	eax, al
		movzx	edi, byte ptr [eax+edx]
		inc	bl
		movzx	ebp, bl
		movzx	eax, byte ptr [ebp+edx+0]
		mov	byte ptr [esp+34h+arg_0], al
		mov	al, byte ptr [esp+34h+arg_8]
		add	al, byte ptr [esp+34h+arg_0]
		movzx	ecx, byte ptr [esp+34h+arg_0]
		mov	byte ptr [esp+34h+arg_8], al
		movzx	eax, al
		add	eax, edx
		mov	[esp+34h+var_24], eax
		mov	al, [eax]
		mov	[ebp+edx+0], al
		add	al, byte ptr [esp+34h+arg_0]
		mov	ebp, [esp+34h+var_24]
		movzx	eax, al
		mov	[ebp+0], cl
		movzx	ecx, byte ptr [eax+edx]
		mov	al, byte ptr [esp+34h+arg_8]
		shl	ecx, 8
		or	edi, ecx
		inc	bl
		movzx	ebp, bl
		movzx	ecx, byte ptr [ebp+edx+0]
		add	al, cl
		mov	byte ptr [esp+34h+arg_8], al
		movzx	eax, al
		add	eax, edx
		mov	[esp+34h+var_24], eax
		mov	al, [eax]
		mov	[ebp+edx+0], al
		mov	ebp, [esp+34h+var_24]
		mov	byte ptr [esp+34h+arg_0], cl
		add	al, byte ptr [esp+34h+arg_0]
		movzx	ecx, cl
		movzx	eax, al
		mov	[ebp+0], cl
		movzx	ecx, byte ptr [eax+edx]
		mov	al, byte ptr [esp+34h+arg_8]
		shl	ecx, 10h
		or	edi, ecx
		inc	bl
		movzx	ebp, bl
		movzx	ecx, byte ptr [ebp+edx+0]
		add	al, cl
		mov	byte ptr [esp+34h+arg_8], al
		movzx	eax, al
		add	eax, edx
		mov	[esp+34h+var_24], eax
		mov	al, [eax]
		mov	[ebp+edx+0], al
		mov	ebp, [esp+34h+var_24]
		mov	byte ptr [esp+34h+arg_0], cl
		add	al, byte ptr [esp+34h+arg_0]
		movzx	ecx, cl
		movzx	eax, al
		mov	[ebp+0], cl
		movzx	eax, byte ptr [eax+edx]
		mov	ecx, [esp+34h+var_14]
		shl	eax, 18h
		or	eax, edi
		mov	edi, esi
		shl	edi, cl
		or	edi, [esp+34h+var_20]
		mov	ecx, [esp+34h+var_10]
		mov	ebp, [esp+34h+var_1C]
		xor	eax, edi
		mov	edi, [esp+34h+var_8]
		shr	esi, cl
		mov	ecx, [esp+34h+arg_10]
		mov	[ebp+0], eax
		mov	al, byte ptr [esp+34h+arg_8]
		add	ebp, 4
		sub	ecx, 4
		dec	[esp+34h+arg_C]
		mov	[esp+34h+var_1C], ebp
		mov	[esp+34h+var_20], esi
		mov	[esp+34h+arg_10], ecx
		jnz	loc_1000A4E5

loc_1000A627:				; CODE XREF: sub_1000A290+245j
		test	ecx, ecx
		jz	short loc_1000A682
		sub	edi, [esp+34h+var_4]
		test	ecx, ecx
		jz	short loc_1000A682

loc_1000A633:				; CODE XREF: sub_1000A290+54Cj
		mov	esi, edi
		sub	esi, ebp
		mov	[esp+34h+arg_C], esi
		mov	[esp+34h+arg_10], ecx
		nop

loc_1000A640:				; CODE XREF: sub_1000A290+3F0j
		inc	bl
		movzx	esi, bl
		movzx	ecx, byte ptr [esi+edx]
		add	al, cl
		movzx	edi, al
		mov	byte ptr [esp+34h+arg_8], al
		mov	al, [edi+edx]
		mov	[esi+edx], al
		mov	byte ptr [esp+34h+arg_0], cl
		add	al, byte ptr [esp+34h+arg_0]
		movzx	ecx, cl
		movzx	eax, al
		mov	[edi+edx], cl
		movzx	ecx, byte ptr [eax+edx]
		mov	eax, [esp+34h+arg_C]
		xor	cl, [eax+ebp]
		mov	al, byte ptr [esp+34h+arg_8]
		mov	[ebp+0], cl
		inc	ebp
		dec	[esp+34h+arg_10]
		jnz	short loc_1000A640

loc_1000A682:				; CODE XREF: sub_1000A290+399j
					; sub_1000A290+3A1j ...
		pop	edi
		pop	esi
		pop	ebp
		mov	[edx+101h], al
		mov	[edx+100h], bl
		xor	eax, eax
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1000A698:				; CODE XREF: sub_1000A290+22Fj
		mov	ecx, [esp+34h+arg_10]
		cmp	ecx, 4
		jb	loc_1000A7DA
		shr	ecx, 2
		mov	[esp+34h+arg_C], ecx
		lea	esp, [esp+0]

loc_1000A6B0:				; CODE XREF: sub_1000A290+544j
		mov	ecx, [edi]
		mov	[esp+34h+var_20], ecx
		inc	bl
		movzx	esi, bl
		movzx	ecx, byte ptr [esi+edx]
		add	al, cl
		movzx	ebp, al
		mov	byte ptr [esp+34h+arg_8], al
		mov	al, [ebp+edx+0]
		mov	[esi+edx], al
		mov	byte ptr [esp+34h+arg_0], cl
		add	al, byte ptr [esp+34h+arg_0]
		movzx	ecx, cl
		mov	[ebp+edx+0], cl
		movzx	eax, al
		movzx	esi, byte ptr [eax+edx]
		inc	bl
		movzx	ebp, bl
		movzx	eax, byte ptr [ebp+edx+0]
		mov	byte ptr [esp+34h+arg_0], al
		mov	al, byte ptr [esp+34h+arg_8]
		add	al, byte ptr [esp+34h+arg_0]
		movzx	ecx, byte ptr [esp+34h+arg_0]
		mov	byte ptr [esp+34h+arg_8], al
		movzx	eax, al
		add	eax, edx
		mov	[esp+34h+var_24], eax
		mov	al, [eax]
		mov	[ebp+edx+0], al
		add	al, byte ptr [esp+34h+arg_0]
		mov	ebp, [esp+34h+var_24]
		mov	[ebp+0], cl
		movzx	eax, al
		movzx	ecx, byte ptr [eax+edx]
		mov	al, byte ptr [esp+34h+arg_8]
		shl	ecx, 8
		or	esi, ecx
		inc	bl
		movzx	ebp, bl
		movzx	ecx, byte ptr [ebp+edx+0]
		add	al, cl
		mov	byte ptr [esp+34h+arg_8], al
		movzx	eax, al
		add	eax, edx
		mov	[esp+34h+var_24], eax
		mov	al, [eax]
		mov	[ebp+edx+0], al
		mov	ebp, [esp+34h+var_24]
		mov	byte ptr [esp+34h+arg_0], cl
		add	al, byte ptr [esp+34h+arg_0]
		movzx	ecx, cl
		mov	[ebp+0], cl
		movzx	eax, al
		movzx	ecx, byte ptr [eax+edx]
		mov	al, byte ptr [esp+34h+arg_8]
		shl	ecx, 10h
		or	esi, ecx
		inc	bl
		movzx	ebp, bl
		movzx	ecx, byte ptr [ebp+edx+0]
		add	al, cl
		mov	byte ptr [esp+34h+arg_8], al
		movzx	eax, al
		add	eax, edx
		mov	byte ptr [esp+34h+arg_0], cl
		mov	[esp+34h+var_24], eax
		mov	al, [eax]
		mov	[ebp+edx+0], al
		add	al, byte ptr [esp+34h+arg_0]
		mov	ebp, [esp+34h+var_24]
		movzx	ecx, cl
		mov	[ebp+0], cl
		mov	ebp, [esp+34h+var_1C]
		movzx	eax, al
		movzx	ecx, byte ptr [eax+edx]
		shl	ecx, 18h
		or	ecx, esi
		xor	ecx, [esp+34h+var_20]
		add	edi, 4
		mov	[ebp+0], ecx
		add	ebp, 4
		mov	ecx, [esp+34h+arg_10]
		mov	al, byte ptr [esp+34h+arg_8]
		sub	ecx, 4
		dec	[esp+34h+arg_C]
		mov	[esp+34h+var_1C], ebp
		mov	[esp+34h+arg_10], ecx
		jnz	loc_1000A6B0

loc_1000A7DA:				; CODE XREF: sub_1000A290+40Fj
		test	ecx, ecx
		jnz	loc_1000A633
		jmp	loc_1000A682
sub_1000A290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A7F0	proc near		; DATA XREF: .rdata:100391E8o
					; .rdata:100391ECo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_C]
		mov	ecx, [esp+arg_14]
		cmp	eax, ecx
		jnb	short loc_1000A80D
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000A80D:				; CODE XREF: sub_1000A7F0+Aj
		mov	edx, [esp+arg_8]
		push	ecx
		mov	ecx, [esp+4+arg_10]
		push	ecx
		push	eax
		mov	eax, [esp+0Ch+arg_4]
		push	edx
		mov	edx, [esp+10h+arg_0]
		push	eax
		call	sub_1000A290
		add	esp, 14h
		retn
sub_1000A7F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A830	proc near		; DATA XREF: .rdata:10039200o
		push	0FFFFE898h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
sub_1000A830	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A840	proc near		; DATA XREF: .rdata:10039204o
		push	0FFFFE898h
		call	PORT_SetError_Util
		pop	ecx
		retn
sub_1000A840	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000A850:				; DATA XREF: sub_1000AB70+6Eo
		push	edi
		mov	edi, [esp+14h]
		test	edi, edi
		jz	short loc_1000A889
		push	ebx
		mov	ebx, [esp+10h]
		push	ebp
		mov	ebp, [esp+10h]
		push	esi
		mov	esi, [esp+1Ch]
		sub	ebx, esi
		lea	ebx, [ebx+0]

loc_1000A870:				; CODE XREF: .text:1000A884j
		lea	eax, [ebx+esi]
		push	eax
		push	esi
		push	ebp
		call	sub_1000B0A0
		add	esp, 0Ch
		add	esi, 8
		sub	edi, 8
		jnz	short loc_1000A870
		pop	esi
		pop	ebp
		pop	ebx

loc_1000A889:				; CODE XREF: .text:1000A857j
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000A890:				; DATA XREF: sub_1000AB70+81o
		push	edi
		mov	edi, [esp+14h]
		test	edi, edi
		jz	short loc_1000A8E5
		push	ebx
		mov	ebx, [esp+0Ch]
		push	ebp
		mov	ebp, [esp+18h]
		push	esi
		mov	esi, [esp+18h]
		sub	ebp, esi
		lea	ebx, [ebx+0]

loc_1000A8B0:				; CODE XREF: .text:1000A8E0j
		push	esi
		lea	eax, [esi+ebp]
		push	eax
		push	ebx
		call	sub_1000B0A0
		push	esi
		lea	eax, [ebx+80h]
		push	esi
		push	eax
		call	sub_1000B0A0
		push	esi
		lea	eax, [ebx+100h]
		push	esi
		push	eax
		call	sub_1000B0A0
		add	esp, 24h
		add	esi, 8
		sub	edi, 8
		jnz	short loc_1000A8B0
		pop	esi
		pop	ebp
		pop	ebx

loc_1000A8E5:				; CODE XREF: .text:1000A897j
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A8F0	proc near		; DATA XREF: sub_1000AB70+106o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	eax, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		add	eax, esi
		mov	[esp+0Ch+arg_8], eax
		cmp	esi, eax
		jz	short loc_1000A961
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		push	edi
		mov	edi, [esp+18h+arg_0]
		lea	ebx, [edi+180h]
		jmp	short loc_1000A920
; ---------------------------------------------------------------------------
		align 10h

loc_1000A920:				; CODE XREF: sub_1000A8F0+27j
					; sub_1000A8F0+6Cj
		mov	ecx, [esi+4]
		xor	ecx, [edi+184h]
		mov	eax, [esi]
		xor	eax, [ebx]
		mov	[esp+18h+var_4], ecx
		push	ebx
		lea	ecx, [esp+1Ch+var_8]
		push	ecx
		push	edi
		add	esi, 8
		mov	[esp+24h+var_8], eax
		call	sub_1000B0A0
		mov	edx, [ebx]
		mov	[ebp+0], edx
		mov	eax, [edi+184h]
		mov	[ebp+4], eax
		add	esp, 0Ch
		add	ebp, 8
		cmp	esi, [esp+18h+arg_8]
		jnz	short loc_1000A920
		pop	edi
		pop	ebp
		pop	ebx

loc_1000A961:				; CODE XREF: sub_1000A8F0+14j
		pop	esi
		add	esp, 8
		retn
sub_1000A8F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A970	proc near		; DATA XREF: sub_1000AB70+10Do

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		mov	eax, [esp+10h+arg_C]
		push	esi
		mov	esi, [esp+14h+arg_8]
		add	eax, esi
		mov	[esp+14h+arg_8], eax
		cmp	esi, eax
		jz	short loc_1000A9F9
		push	ebx
		push	ebp
		mov	ebp, [esp+1Ch+arg_4]
		push	edi
		mov	edi, [esp+20h+arg_0]
		lea	ebx, [edi+180h]
		jmp	short loc_1000A9A0
; ---------------------------------------------------------------------------
		align 10h

loc_1000A9A0:				; CODE XREF: sub_1000A970+27j
					; sub_1000A970+84j
		mov	edx, [edi+184h]
		mov	ecx, [ebx]
		mov	eax, [esi]
		mov	[esp+20h+var_4], edx
		lea	edx, [esp+20h+var_10]
		push	edx
		mov	[esp+24h+var_8], ecx
		mov	[ebx], eax
		mov	ecx, [esi+4]
		push	ebx
		push	edi
		mov	[edi+184h], ecx
		add	esi, 8
		call	sub_1000B0A0
		mov	eax, [esp+2Ch+var_10]
		mov	ecx, [esp+2Ch+var_C]
		xor	eax, [esp+2Ch+var_8]
		xor	ecx, [esp+2Ch+var_4]
		mov	[ebp+0], eax
		mov	[ebp+4], ecx
		add	esp, 0Ch
		add	ebp, 8
		mov	[esp+20h+var_10], eax
		mov	[esp+20h+var_C], ecx
		cmp	esi, [esp+20h+arg_8]
		jnz	short loc_1000A9A0
		pop	edi
		pop	ebp
		pop	ebx

loc_1000A9F9:				; CODE XREF: sub_1000A970+14j
		pop	esi
		add	esp, 10h
		retn
sub_1000A970	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AA00	proc near		; DATA XREF: sub_1000AB70+14Do

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	eax, [esp+8+arg_C]
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		add	eax, edi
		mov	[esp+0Ch+arg_8], eax
		cmp	edi, eax
		jz	short loc_1000AA8D
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		push	esi
		lea	esi, [ebx+180h]
		jmp	short loc_1000AA30
; ---------------------------------------------------------------------------
		align 10h

loc_1000AA30:				; CODE XREF: sub_1000AA00+27j
					; sub_1000AA00+88j
		mov	ecx, [edi+4]
		xor	ecx, [ebx+184h]
		mov	eax, [edi]
		xor	eax, [esi]
		mov	[esp+18h+var_4], ecx
		push	esi
		lea	ecx, [esp+1Ch+var_8]
		push	ecx
		push	ebx
		add	edi, 8
		mov	[esp+24h+var_8], eax
		call	sub_1000B0A0
		push	esi
		lea	eax, [ebx+80h]
		push	esi
		push	eax
		call	sub_1000B0A0
		push	esi
		lea	eax, [ebx+100h]
		push	esi
		push	eax
		call	sub_1000B0A0
		mov	edx, [esi]
		mov	[ebp+0], edx
		mov	eax, [ebx+184h]
		mov	[ebp+4], eax
		add	esp, 24h
		add	ebp, 8
		cmp	edi, [esp+18h+arg_8]
		jnz	short loc_1000AA30
		pop	esi
		pop	ebp
		pop	ebx

loc_1000AA8D:				; CODE XREF: sub_1000AA00+14j
		pop	edi
		add	esp, 8
		retn
sub_1000AA00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000AAA0	proc near		; DATA XREF: sub_1000AB70+194o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 14h
		mov	eax, [ebp+arg_C]
		push	ebx
		push	esi
		mov	esi, [ebp+arg_8]
		add	eax, esi
		push	edi
		mov	[esp+20h+var_14], eax
		cmp	esi, eax
		jz	loc_1000AB57
		mov	edi, [ebp+arg_0]
		lea	ebx, [edi+180h]
		lea	esp, [esp+0]

loc_1000AAD0:				; CODE XREF: sub_1000AAA0+B1j
		mov	edx, [edi+184h]
		mov	ecx, [ebx]
		mov	eax, [esi]
		mov	[esp+20h+var_4], edx
		lea	edx, [esp+20h+var_10]
		push	edx
		mov	[esp+24h+var_8], ecx
		mov	[ebx], eax
		mov	ecx, [esi+4]
		push	ebx
		push	edi
		mov	[edi+184h], ecx
		add	esi, 8
		call	sub_1000B0A0
		lea	eax, [esp+2Ch+var_10]
		push	eax
		mov	ecx, eax
		push	ecx
		lea	eax, [edi+80h]
		push	eax
		call	sub_1000B0A0
		lea	edx, [esp+38h+var_10]
		push	edx
		mov	eax, edx
		push	eax
		lea	eax, [edi+100h]
		push	eax
		call	sub_1000B0A0
		mov	eax, [esp+44h+var_10]
		mov	ecx, [esp+44h+var_C]
		xor	eax, [esp+44h+var_8]
		xor	ecx, [esp+44h+var_4]
		mov	edx, [ebp+arg_4]
		mov	[edx], eax
		mov	[edx+4], ecx
		add	edx, 8
		add	esp, 24h
		mov	[esp+20h+var_10], eax
		mov	[esp+20h+var_C], ecx
		mov	[ebp+arg_4], edx
		cmp	esi, [esp+20h+var_14]
		jnz	loc_1000AAD0

loc_1000AB57:				; CODE XREF: sub_1000AAA0+1Aj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000AAA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AB60	proc near		; DATA XREF: .rdata:100393A8o
		push	190h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_1000AB60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AB70	proc near		; CODE XREF: sub_1000AD70+26p
					; DATA XREF: .rdata:10039394o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1000AB8B
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AB8B:				; CODE XREF: sub_1000AB70+7j
		mov	ecx, [esp+4+arg_14]
		mov	edx, [esp+4+arg_10]
		mov	eax, ecx
		neg	eax
		sbb	eax, eax
		push	ebx
		push	edi
		and	eax, 0FFFFAAABh
		add	eax, 0AAAAh
		mov	edi, ecx
		neg	edi
		sbb	edi, edi
		and	edi, 5555h
		add	edi, 5555h
		mov	[esi+188h], eax
		cmp	edx, 3		; switch 4 cases
		ja	loc_1000AD3E	; jumptable 1000ABC6 default case
		jmp	ds:off_1000AD54[edx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000ABCD:				; CODE XREF: sub_1000AB70+56j
					; DATA XREF: .text:off_1000AD54o
		push	eax		; jumptable 1000ABC6 case 0
		mov	eax, [esp+10h+arg_4]
		push	eax
		push	esi
		call	sub_1000AEB0
		add	esp, 0Ch
		pop	edi
		pop	ebx
		mov	dword ptr [esi+18Ch], offset loc_1000A850
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000ABEC:				; CODE XREF: sub_1000AB70+56j
					; DATA XREF: .text:off_1000AD54o
		mov	ebx, [esp+0Ch+arg_4] ; jumptable 1000ABC6 case 2
		push	eax
		mov	dword ptr [esi+18Ch], offset loc_1000A890
		push	ebx
		test	ecx, ecx
		jz	short loc_1000AC28
		push	esi
		call	sub_1000AEB0
		push	edi
		lea	ecx, [ebx+8]
		push	ecx
		lea	edx, [esi+80h]
		push	edx
		call	sub_1000AEB0
		mov	eax, [esi+188h]
		add	esi, 100h
		jmp	loc_1000AD2A
; ---------------------------------------------------------------------------

loc_1000AC28:				; CODE XREF: sub_1000AB70+8Ej
		lea	ecx, [esi+100h]
		push	ecx
		call	sub_1000AEB0
		push	edi
		lea	edx, [ebx+8]
		push	edx
		lea	eax, [esi+80h]
		push	eax
		call	sub_1000AEB0
		mov	ecx, [esi+188h]
		push	ecx
		add	ebx, 10h
		push	ebx
		push	esi
		call	sub_1000AEB0
		add	esp, 24h
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AC5F:				; CODE XREF: sub_1000AB70+56j
					; DATA XREF: .text:off_1000AD54o
		mov	edx, [esp+0Ch+arg_C] ; jumptable 1000ABC6 case 1
		mov	edi, [edx]
		mov	[esi+180h], edi
		mov	edx, [edx+4]
		test	ecx, ecx
		mov	[esi+184h], edx
		mov	ecx, offset sub_1000A8F0
		jnz	short loc_1000AC82
		mov	ecx, offset sub_1000A970

loc_1000AC82:				; CODE XREF: sub_1000AB70+10Bj
		push	eax
		mov	eax, [esp+10h+arg_4]
		push	eax
		push	esi
		mov	[esi+18Ch], ecx
		call	sub_1000AEB0
		add	esp, 0Ch
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AC9D:				; CODE XREF: sub_1000AB70+56j
					; DATA XREF: .text:off_1000AD54o
		mov	edx, [esp+0Ch+arg_C] ; jumptable 1000ABC6 case 3
		mov	ebx, [edx]
		mov	[esi+180h], ebx
		mov	edx, [edx+4]
		mov	ebx, [esp+0Ch+arg_4]
		push	eax
		mov	[esi+184h], edx
		push	ebx
		test	ecx, ecx
		jz	short loc_1000ACFD
		push	esi
		mov	dword ptr [esi+18Ch], offset sub_1000AA00
		call	sub_1000AEB0
		push	edi
		lea	eax, [ebx+8]
		push	eax
		lea	ecx, [esi+80h]
		push	ecx
		call	sub_1000AEB0
		mov	edx, [esi+188h]
		push	edx
		add	ebx, 10h
		add	esi, 100h
		push	ebx
		push	esi
		call	sub_1000AEB0
		add	esp, 24h
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000ACFD:				; CODE XREF: sub_1000AB70+14Aj
		lea	eax, [esi+100h]
		push	eax
		mov	dword ptr [esi+18Ch], offset sub_1000AAA0
		call	sub_1000AEB0
		push	edi
		lea	ecx, [ebx+8]
		push	ecx
		lea	edx, [esi+80h]
		push	edx
		call	sub_1000AEB0
		mov	eax, [esi+188h]

loc_1000AD2A:				; CODE XREF: sub_1000AB70+B3j
		push	eax
		add	ebx, 10h
		push	ebx
		push	esi
		call	sub_1000AEB0
		add	esp, 24h
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AD3E:				; CODE XREF: sub_1000AB70+50j
		push	0FFFFE005h	; jumptable 1000ABC6 default case
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_1000AB70	endp

; ---------------------------------------------------------------------------
		align 4
off_1000AD54	dd offset loc_1000ABCD	; DATA XREF: sub_1000AB70+56r
		dd offset loc_1000AC5F	; jump table for switch	statement
		dd offset loc_1000ABEC
		dd offset loc_1000AC9D
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AD70	proc near		; DATA XREF: .rdata:10039210o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	190h
		call	PORT_ZAlloc_Util
		mov	ecx, [esp+8+arg_8]
		mov	edx, [esp+8+arg_4]
		push	0
		mov	esi, eax
		mov	eax, [esp+0Ch+arg_C]
		push	eax
		mov	eax, [esp+10h+arg_0]
		push	ecx
		push	edx
		push	0
		push	eax
		push	esi
		call	sub_1000AB70
		add	esp, 20h
		test	eax, eax
		jz	short loc_1000ADB4
		push	190h
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000ADB4:				; CODE XREF: sub_1000AD70+30j
		mov	eax, esi
		pop	esi
		retn
sub_1000AD70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000ADC0(void	*Dst, int)
sub_1000ADC0	proc near		; DATA XREF: .rdata:10039214o

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jz	short loc_1000ADE9
		push	190h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000ADE9
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000ADE9:				; CODE XREF: sub_1000ADC0+7j
					; sub_1000ADC0+1Ej
		pop	esi
		retn
sub_1000ADC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000ADF0	proc near		; DATA XREF: .rdata:10039218o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_14]
		test	bl, 7
		jnz	short loc_1000AE39
		cmp	[esp+4+arg_C], ebx
		jb	short loc_1000AE39
		mov	eax, [esp+4+arg_0]
		test	eax, eax
		jz	short loc_1000AE39
		cmp	dword ptr [eax+188h], 5555h
		jnz	short loc_1000AE39
		mov	ecx, [esp+4+arg_10]
		mov	edx, [esp+4+arg_4]
		push	ebx
		push	ecx
		push	edx
		push	eax
		mov	eax, [eax+18Ch]
		call	eax
		mov	eax, [esp+14h+arg_8]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000AE35
		mov	[eax], ebx

loc_1000AE35:				; CODE XREF: sub_1000ADF0+41j
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AE39:				; CODE XREF: sub_1000ADF0+8j
					; sub_1000ADF0+Ej ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1000ADF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AE50	proc near		; DATA XREF: .rdata:1003921Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_14]
		test	bl, 7
		jnz	short loc_1000AE99
		cmp	[esp+4+arg_C], ebx
		jb	short loc_1000AE99
		mov	eax, [esp+4+arg_0]
		test	eax, eax
		jz	short loc_1000AE99
		cmp	dword ptr [eax+188h], 0AAAAh
		jnz	short loc_1000AE99
		mov	ecx, [esp+4+arg_10]
		mov	edx, [esp+4+arg_4]
		push	ebx
		push	ecx
		push	edx
		push	eax
		mov	eax, [eax+18Ch]
		call	eax
		mov	eax, [esp+14h+arg_8]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000AE95
		mov	[eax], ebx

loc_1000AE95:				; CODE XREF: sub_1000AE50+41j
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AE99:				; CODE XREF: sub_1000AE50+8j
					; sub_1000AE50+Ej ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1000AE50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AEB0	proc near		; CODE XREF: sub_1000AB70+64p
					; sub_1000AB70+91p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	eax, [esp+10h+arg_4]
		mov	esi, [eax]
		mov	eax, [eax+4]
		bswap	esi
		mov	ecx, esi
		shr	ecx, 4
		bswap	eax
		xor	ecx, eax
		and	ecx, 0F0F0F0Fh
		xor	eax, ecx
		shl	ecx, 4
		xor	esi, ecx
		mov	ecx, esi
		shr	ecx, 12h
		xor	ecx, esi
		and	ecx, 3333h
		mov	edx, ecx
		shl	edx, 12h
		or	edx, ecx
		xor	esi, edx
		mov	ecx, esi
		shr	ecx, 9
		xor	ecx, esi
		and	ecx, 550055h
		mov	edx, ecx
		shl	edx, 9
		or	edx, ecx
		xor	esi, edx
		mov	ecx, eax
		shr	ecx, 12h
		xor	ecx, eax
		and	ecx, 3333h
		mov	edx, ecx
		shl	edx, 12h
		or	edx, ecx
		xor	eax, edx
		mov	ecx, eax
		shr	ecx, 9
		xor	ecx, eax
		and	ecx, 550055h
		mov	edx, ecx
		shl	edx, 9
		or	edx, ecx
		xor	eax, edx
		bswap	eax
		and	esi, 0FFFFFFh
		mov	edx, eax
		shl	esi, 4
		and	eax, 0Fh
		shr	edx, 4
		or	esi, eax
		cmp	[esp+10h+arg_8], 5555h
		mov	edi, [esp+10h+arg_0]
		jnz	short loc_1000AF5A
		mov	[esp+10h+arg_8], 8
		jmp	short loc_1000AF65
; ---------------------------------------------------------------------------

loc_1000AF5A:				; CODE XREF: sub_1000AEB0+9Ej
		add	edi, 78h
		mov	[esp+10h+arg_8], 0FFFFFFF8h

loc_1000AF65:				; CODE XREF: sub_1000AEB0+A8j
		mov	[esp+10h+arg_4], 8103h
		lea	ecx, [ecx+0]

loc_1000AF70:				; CODE XREF: sub_1000AEB0+1D8j
		test	byte ptr [esp+10h+arg_4], 1
		mov	eax, edx
		jz	short loc_1000AF89
		shr	eax, 1Bh
		add	edx, edx
		or	edx, eax
		mov	eax, esi
		shr	eax, 1Bh
		add	esi, esi
		jmp	short loc_1000AFA1
; ---------------------------------------------------------------------------

loc_1000AF89:				; CODE XREF: sub_1000AEB0+C7j
		shr	eax, 1Ah
		lea	edx, ds:0[edx*4]
		or	edx, eax
		mov	eax, esi
		shr	eax, 1Ah
		lea	esi, ds:0[esi*4]

loc_1000AFA1:				; CODE XREF: sub_1000AEB0+D7j
		or	esi, eax
		and	edx, 0FFFFFFFh
		mov	eax, edx
		shr	eax, 7
		and	eax, 6000h
		mov	ecx, edx
		and	ecx, 1800h
		or	eax, ecx
		shr	eax, 9
		mov	ecx, edx
		and	ecx, 30h
		add	ecx, ecx
		add	ecx, ecx
		or	eax, ecx
		mov	ecx, edx
		and	ecx, 7
		add	ecx, ecx
		add	ecx, ecx
		mov	ebx, edx
		shr	ebx, 2
		and	ebx, 0E0h
		or	ebx, ecx
		mov	ecx, ds:dword_1003AA18[eax]
		or	ecx, ds:dword_1003A918[ebx]
		mov	eax, edx
		shr	eax, 14h
		and	eax, 0FCh
		or	ecx, ds:dword_1003A718[eax]
		and	esi, 0FFFFFFFh
		mov	eax, edx
		shr	eax, 0Bh
		and	eax, 0FCh
		or	ecx, ds:dword_1003A818[eax]
		mov	eax, esi
		shr	eax, 1
		and	eax, 0C0000h
		mov	ebx, esi
		and	ebx, 3C000h
		or	eax, ebx
		shr	eax, 0Ch
		mov	eax, ds:dword_1003AC18[eax]
		mov	ebx, esi
		and	ebx, 3
		add	ebx, ebx
		mov	ebp, esi
		and	ebp, 78h
		or	ebx, ebp
		or	eax, ds:dword_1003AE18[ebx*2]
		mov	ebx, esi
		shr	ebx, 14h
		and	ebx, 0FCh
		or	eax, ds:dword_1003AB18[ebx]
		mov	ebx, esi
		shr	ebx, 5
		and	ebx, 0FCh
		or	eax, ds:dword_1003AD18[ebx]
		mov	ebp, ecx
		mov	ebx, eax
		xor	eax, ecx
		shr	ebx, 10h
		shl	ebp, 10h
		and	eax, 0FFFFh
		or	ebx, ebp
		xor	eax, ecx
		mov	[edi], ebx
		mov	[edi+4], eax
		add	edi, [esp+10h+arg_8]
		shr	[esp+10h+arg_4], 1
		jnz	loc_1000AF70
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000AEB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B0A0	proc near		; CODE XREF: .text:1000A876p
					; .text:1000A8B6p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	eax, [esp+0Ch+arg_4]
		mov	edx, [eax]
		mov	esi, [eax+4]
		bswap	esi
		bswap	edx
		mov	eax, edx
		shr	eax, 4
		xor	eax, esi
		and	eax, 0F0F0F0Fh
		xor	esi, eax
		shl	eax, 4
		xor	edx, eax
		mov	eax, edx
		shr	eax, 10h
		xor	eax, esi
		and	eax, 0FFFFh
		xor	esi, eax
		shl	eax, 10h
		xor	edx, eax
		lea	eax, ds:0[edx*4]
		xor	eax, esi
		and	eax, 0CCCCCCCCh
		xor	esi, eax
		shr	eax, 2
		xor	edx, eax
		mov	eax, edx
		shl	eax, 8
		xor	eax, esi
		and	eax, 0FF00FF00h
		xor	esi, eax
		shr	eax, 8
		xor	edx, eax
		mov	ecx, edx
		shr	ecx, 1
		xor	ecx, esi
		and	ecx, 55555555h
		lea	eax, [ecx+ecx]
		xor	ecx, esi
		xor	eax, edx
		mov	edx, [esp+0Ch+arg_0]
		mov	esi, [edx]
		rol	eax, 3
		rol	ecx, 3
		xor	esi, ecx
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, ecx
		xor	eax, edi
		ror	esi, 4
		xor	esi, [edx+4]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+8]
		xor	eax, edi
		xor	esi, eax
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, eax
		xor	ecx, edi
		ror	esi, 4
		xor	esi, [edx+0Ch]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+10h]
		xor	ecx, edi
		xor	esi, ecx
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, ecx
		xor	eax, edi
		ror	esi, 4
		xor	esi, [edx+14h]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+18h]
		xor	eax, edi
		xor	esi, eax
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, eax
		xor	ecx, edi
		ror	esi, 4
		xor	esi, [edx+1Ch]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+20h]
		xor	ecx, edi
		xor	esi, ecx
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, ecx
		xor	eax, edi
		ror	esi, 4
		xor	esi, [edx+24h]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+28h]
		xor	eax, edi
		xor	esi, eax
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, eax
		xor	ecx, edi
		ror	esi, 4
		xor	esi, [edx+2Ch]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+30h]
		xor	ecx, edi
		xor	esi, ecx
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, ecx
		xor	eax, edi
		ror	esi, 4
		xor	esi, [edx+34h]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+38h]
		xor	eax, edi
		xor	esi, eax
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, eax
		xor	ecx, edi
		ror	esi, 4
		xor	esi, [edx+3Ch]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		xor	ecx, edi
		mov	esi, [edx+40h]
		xor	esi, ecx
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, ecx
		xor	eax, edi
		ror	esi, 4
		xor	esi, [edx+44h]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+48h]
		xor	eax, edi
		xor	esi, eax
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, eax
		xor	ecx, edi
		ror	esi, 4
		xor	esi, [edx+4Ch]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+50h]
		xor	ecx, edi
		xor	esi, ecx
		mov	edi, esi
		shr	edi, 18h
		mov	ebx, esi
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, ecx
		xor	eax, edi
		ror	esi, 4
		xor	esi, [edx+54h]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+58h]
		xor	eax, edi
		xor	esi, eax
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, eax
		xor	ecx, edi
		ror	esi, 4
		xor	esi, [edx+5Ch]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+60h]
		xor	ecx, edi
		xor	esi, ecx
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, ecx
		xor	eax, edi
		ror	esi, 4
		xor	esi, [edx+64h]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+68h]
		xor	eax, edi
		xor	esi, eax
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, eax
		xor	ecx, edi
		ror	esi, 4
		xor	esi, [edx+6Ch]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+70h]
		xor	ecx, edi
		xor	esi, ecx
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, ecx
		xor	eax, edi
		ror	esi, 4
		xor	esi, [edx+74h]
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_10039F18[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A118[ebx]
		mov	ebx, esi
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A318[ebx]
		and	esi, 0FCh
		xor	edi, ds:dword_1003A518[esi]
		mov	esi, [edx+78h]
		xor	eax, edi
		xor	esi, eax
		mov	edi, esi
		shr	edi, 18h
		and	edi, 0FCh
		mov	edi, ds:dword_1003A018[edi]
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A218[ebx]
		mov	ebx, esi
		and	esi, 0FCh
		shr	ebx, 8
		and	ebx, 0FCh
		xor	edi, ds:dword_1003A418[ebx]
		xor	edi, ds:dword_1003A618[esi]
		mov	esi, eax
		xor	ecx, edi
		ror	esi, 4
		xor	esi, [edx+7Ch]
		mov	edx, esi
		shr	edx, 18h
		and	edx, 0FCh
		mov	edx, ds:dword_10039F18[edx]
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FCh
		xor	edx, ds:dword_1003A118[edi]
		mov	edi, esi
		shr	edi, 8
		and	edi, 0FCh
		xor	edx, ds:dword_1003A318[edi]
		and	esi, 0FCh
		xor	edx, ds:dword_1003A518[esi]
		pop	edi
		xor	ecx, edx
		ror	eax, 3
		ror	ecx, 3
		mov	edx, ecx
		shr	edx, 1
		xor	edx, eax
		and	edx, 55555555h
		xor	eax, edx
		add	edx, edx
		xor	ecx, edx
		mov	edx, ecx
		shl	edx, 8
		xor	edx, eax
		and	edx, 0FF00FF00h
		xor	eax, edx
		shr	edx, 8
		xor	ecx, edx
		lea	edx, ds:0[ecx*4]
		xor	edx, eax
		and	edx, 0CCCCCCCCh
		xor	eax, edx
		shr	edx, 2
		xor	ecx, edx
		mov	edx, ecx
		shr	edx, 10h
		xor	edx, eax
		and	edx, 0FFFFh
		xor	eax, edx
		shl	edx, 10h
		xor	ecx, edx
		mov	edx, ecx
		shr	edx, 4
		xor	edx, eax
		and	edx, 0F0F0F0Fh
		mov	esi, edx
		shl	esi, 4
		xor	esi, ecx
		mov	ecx, [esp+8+arg_8]
		xor	edx, eax
		bswap	esi
		bswap	edx
		mov	[ecx], esi
		mov	[ecx+4], edx
		pop	esi
		pop	ebx
		retn
sub_1000B0A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_1000BA90@<eax>(int@<ecx>, void *Dst@<edx>,	void *,	size_t Size, size_t)
sub_1000BA90	proc near		; CODE XREF: sub_1000BB70+27p
					; sub_1000BB70+3Bp ...

Src		= byte ptr -135h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
Dst		= byte ptr -12Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 138h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+138h+var_4], eax
		push	ebp
		mov	ebp, [esp+13Ch+arg_0]
		push	esi
		mov	esi, ecx
		lea	eax, ds:0[esi*8]
		bswap	eax
		push	edi
		mov	edi, edx
		mov	[esp+144h+var_134], eax
		mov	[esp+144h+Src],	1
		test	esi, esi
		jz	loc_1000BB4E
		lea	esp, [esp+0]

loc_1000BAD0:				; CODE XREF: sub_1000BA90+BCj
		lea	ecx, [esp+144h+Dst]
		push	ecx		; Dst
		call	sub_10003E00
		push	1		; Size
		lea	edx, [esp+14Ch+Src]
		push	edx		; Src
		lea	eax, [esp+150h+Dst]
		push	eax		; Dst
		call	sub_100065B0
		push	4		; Size
		lea	ecx, [esp+158h+var_134]
		push	ecx		; Src
		lea	edx, [esp+15Ch+Dst]
		push	edx		; Dst
		call	sub_100065B0
		mov	eax, [esp+160h+Size]
		push	eax		; Size
		lea	ecx, [esp+164h+Dst]
		push	ebp		; Src
		push	ecx		; Dst
		call	sub_100065B0
		add	esp, 28h
		test	ebx, ebx
		jz	short loc_1000BB2C
		mov	edx, [esp+144h+arg_8]
		push	edx		; Size
		lea	eax, [esp+148h+Dst]
		push	ebx		; Src
		push	eax		; Dst
		call	sub_100065B0
		add	esp, 0Ch

loc_1000BB2C:				; CODE XREF: sub_1000BA90+84j
		push	esi		; int
		lea	ecx, [esp+148h+var_130]
		push	ecx		; int
		lea	edx, [esp+14Ch+Dst]
		push	edi		; Dst
		push	edx		; void *
		call	sub_10006670
		mov	eax, [esp+154h+var_130]
		inc	[esp+154h+Src]
		add	esp, 10h
		add	edi, eax
		sub	esi, eax
		jnz	short loc_1000BAD0

loc_1000BB4E:				; CODE XREF: sub_1000BA90+36j
		mov	ecx, [esp+144h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 138h
		retn
sub_1000BA90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BB70	proc near		; CODE XREF: sub_1000C3F0+99p
					; sub_1000C5B0+6Fp ...

arg_0		= dword	ptr  4

		cmp	eax, 37h
		jnb	short loc_1000BB86
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000BB86:				; CODE XREF: sub_1000BB70+3j
		push	ebx
		push	0		; size_t
		push	eax		; Size
		mov	eax, [esp+0Ch+arg_0]
		xor	ebx, ebx
		push	eax		; void *
		lea	edx, [esi+5]	; Dst
		lea	ecx, [ebx+37h]	; int
		call	sub_1000BA90
		push	ebx		; size_t
		lea	eax, [esi+4]
		push	38h		; Size
		push	eax		; void *
		lea	edx, [esi+3Ch]	; Dst
		lea	ecx, [ebx+37h]	; int
		mov	[eax], bl
		call	sub_1000BA90
		xor	eax, eax
		mov	[esi+0AAh], eax
		add	esp, 18h
		mov	[esi+0AEh], ax
		mov	byte ptr [esi+0B0h], 1
		pop	ebx
		retn
sub_1000BB70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_1000BBD0@<eax>(void *Src@<ecx>, size_t Size@<edx>,	int, int, size_t)
sub_1000BBD0	proc near		; CODE XREF: sub_1000C4B0+4Bp
					; sub_1000C510+30p ...

Dst		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_3C		= byte ptr -3Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 7Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+7Ch+var_4], eax
		mov	eax, [esp+7Ch+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+84h+arg_0]
		push	esi
		push	edi
		mov	esi, ecx
		lea	edi, [esp+8Ch+var_74]
		mov	ebx, edx
		mov	[esp+8Ch+var_78], eax
		mov	[esp+8Ch+Dst], edi
		test	esi, esi
		jnz	short loc_1000BC17
		lea	ecx, [esp+8Ch+var_3C]
		push	37h
		push	ecx
		call	sub_10001320
		add	esp, 8
		mov	ebx, eax
		jmp	short loc_1000BC40
; ---------------------------------------------------------------------------

loc_1000BC17:				; CODE XREF: sub_1000BBD0+32j
		cmp	ebx, 37h
		jbe	short loc_1000BC32
		lea	edx, [ebx+38h]
		push	edx
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esp+8Ch+Dst], eax
		test	eax, eax
		jz	short loc_1000BC52
		mov	edi, eax

loc_1000BC32:				; CODE XREF: sub_1000BBD0+4Aj
		push	ebx		; Size
		lea	eax, [edi+38h]
		push	esi		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_1000BC40:				; CODE XREF: sub_1000BBD0+45j
		cmp	ebx, 20h
		jnb	short loc_1000BC68
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4

loc_1000BC52:				; CODE XREF: sub_1000BBD0+5Ej
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+7Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 7Ch
		retn
; ---------------------------------------------------------------------------

loc_1000BC68:				; CODE XREF: sub_1000BBD0+73j
		mov	edx, [esp+8Ch+Dst]
		lea	esi, [ebp+4]
		mov	byte ptr [esi],	1
		mov	ecx, 0Eh
		rep movsd
		mov	ecx, [esp+8Ch+arg_8]
		push	ecx		; size_t
		lea	esi, [ebx+38h]
		mov	ebx, [esp+90h+var_78]
		push	esi		; Size
		push	edx		; void *
		lea	edx, [ebp+5]	; Dst
		mov	ecx, 37h	; int
		call	sub_1000BA90
		push	esi		; Size
		mov	esi, [esp+9Ch+Dst]
		push	0		; Val
		push	esi		; Dst
		call	memset
		push	0		; size_t
		lea	eax, [ebp+4]
		xor	ebx, ebx
		push	38h		; Size
		push	eax		; void *
		lea	edx, [ebp+3Ch]	; Dst
		lea	ecx, [ebx+37h]	; int
		mov	byte ptr [eax],	0
		call	sub_1000BA90
		xor	eax, eax
		mov	[ebp+0AAh], eax
		mov	[ebp+0AEh], ax
		lea	eax, [esp+0B0h+var_74]
		add	esp, 24h
		mov	byte ptr [ebp+0B0h], 1
		cmp	esi, eax
		jz	short loc_1000BCE6
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000BCE6:				; CODE XREF: sub_1000BBD0+10Bj
		mov	ecx, [esp+8Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 7Ch
		retn
sub_1000BBD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_1000BD00@<eax>(void *Dst@<ecx>, int, int)
sub_1000BD00	proc near		; CODE XREF: sub_1000BDC0+1F4p

var_168		= dword	ptr -168h
Dst		= byte ptr -164h
Src		= byte ptr -3Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 168h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+168h+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+170h+arg_4]
		push	esi
		mov	esi, [esp+174h+arg_0]
		push	edi
		add	esi, 5
		mov	ebx, ecx
		mov	ecx, 0Dh
		lea	edi, [esp+178h+Src]
		rep movsd
		movsw
		movsb
		test	ebp, ebp
		jz	short loc_1000BD9C

loc_1000BD40:				; CODE XREF: sub_1000BD00+83j
					; sub_1000BD00+9Aj
		lea	eax, [esp+178h+Dst]
		push	eax		; Dst
		call	sub_10003E00
		push	37h		; Size
		lea	ecx, [esp+180h+Src]
		push	ecx		; Src
		lea	edx, [esp+184h+Dst]
		push	edx		; Dst
		call	sub_100065B0
		push	ebp		; int
		lea	eax, [esp+18Ch+var_168]
		push	eax		; int
		lea	ecx, [esp+190h+Dst]
		push	ebx		; Dst
		push	ecx		; void *
		call	sub_10006670
		mov	eax, [esp+198h+var_168]
		add	esp, 20h
		add	ebx, eax
		sub	ebp, eax
		mov	ecx, 36h
		jz	short loc_1000BD9C

loc_1000BD81:				; CODE XREF: sub_1000BD00+98j
		test	ecx, ecx
		js	short loc_1000BD40
		mov	al, [esp+ecx+178h+Src]
		inc	al
		mov	[esp+ecx+178h+Src], al
		dec	ecx
		test	al, al
		jz	short loc_1000BD81
		jmp	short loc_1000BD40
; ---------------------------------------------------------------------------

loc_1000BD9C:				; CODE XREF: sub_1000BD00+3Ej
					; sub_1000BD00+7Fj
		mov	ecx, [esp+178h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 168h
		retn
sub_1000BD00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_1000BDC0@<eax>(void *@<ecx>, void *Src@<edx>, int,	int, size_t Size)
sub_1000BDC0	proc near		; CODE XREF: sub_1000C510+53p
					; sub_1000C930+D7p ...

var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
Dst		= byte ptr -14Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Size		= dword	ptr  0Ch

		sub	esp, 170h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+170h+var_4], eax
		push	ebp
		mov	ebp, [esp+174h+arg_0]
		cmp	dword ptr [ebp+20D8h], 0
		push	esi
		mov	[esp+178h+var_16C], ecx
		mov	esi, edx
		jnz	short loc_1000BE13
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+170h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 170h
		retn
; ---------------------------------------------------------------------------

loc_1000BE13:				; CODE XREF: sub_1000BDC0+2Aj
		push	ebx
		push	edi
		test	esi, esi
		jz	loc_1000BF95
		lea	eax, [esp+180h+Dst]
		lea	edi, [ebp+4]
		push	eax		; Dst
		mov	byte ptr [edi],	2
		call	sub_10003E00
		push	38h		; Size
		lea	ecx, [esp+188h+Dst]
		push	edi		; Src
		push	ecx		; Dst
		call	sub_100065B0
		mov	edx, [esp+190h+Size]
		push	edx		; Size
		lea	eax, [esp+194h+Dst]
		push	esi		; Src
		push	eax		; Dst
		call	sub_100065B0
		push	20h		; int
		push	0		; int
		lea	ecx, [esp+1A4h+var_24]
		push	ecx		; Dst
		lea	edx, [esp+1A8h+Dst]
		push	edx		; void *
		call	sub_10006670
		lea	edx, [esp+1ACh+var_24]
		dec	edx
		lea	ebx, [esp+1ACh+var_24]
		sub	ebx, edx
		mov	[esp+1ACh+var_15C], ebx
		lea	ebx, [esp+1ACh+var_24]
		sub	ebx, edx
		add	ebx, 0FFFFFFFEh
		mov	[esp+1ACh+var_158], ebx
		lea	esi, [edx+1Fh]
		lea	ebx, [esp+1ACh+var_24]
		sub	ebx, edx
		mov	edx, ebp
		sub	edx, edi
		add	edx, 3
		add	ebx, 0FFFFFFFDh
		mov	[esp+1ACh+var_168], edx
		mov	[esp+1ACh+var_160], ebx
		mov	edx, ebp
		mov	ebx, ebp
		sub	edx, edi
		add	esp, 2Ch
		xor	ecx, ecx
		sub	ebx, edi
		add	edx, 2
		lea	eax, [edi+36h]
		mov	[esp+180h+var_164], edx
		mov	[esp+180h+var_170], 8
		jmp	short loc_1000BED0
; ---------------------------------------------------------------------------
		align 10h

loc_1000BED0:				; CODE XREF: sub_1000BDC0+105j
					; sub_1000BDC0+175j
		movzx	edi, byte ptr [ebx+eax+5]
		mov	edx, [esp+180h+var_15C]
		movzx	edx, byte ptr [edx+esi]
		add	ecx, edi
		add	ecx, edx
		movzx	edx, byte ptr [esi]
		mov	[ebx+eax+5], cl
		shr	ecx, 8
		add	ecx, edx
		movzx	edx, byte ptr [eax]
		add	edx, ecx
		mov	ecx, [esp+180h+var_158]
		movzx	ecx, byte ptr [ecx+esi]
		mov	[eax], dl
		shr	edx, 8
		add	ecx, edx
		mov	edx, [esp+180h+var_168]
		movzx	edi, byte ptr [edx+eax]
		add	ecx, edi
		mov	[edx+eax], cl
		mov	edx, [esp+180h+var_160]
		movzx	edi, byte ptr [edx+esi]
		mov	edx, [esp+180h+var_164]
		shr	ecx, 8
		add	edi, ecx
		movzx	ecx, byte ptr [edx+eax]
		add	ecx, edi
		mov	[edx+eax], cl
		shr	ecx, 8
		sub	eax, 4
		sub	esi, 4
		dec	[esp+180h+var_170]
		jnz	short loc_1000BED0
		test	ecx, ecx
		jz	short loc_1000BF57
		mov	edx, 0FFFFFFFBh
		lea	ecx, [ebp+1Bh]
		sub	edx, ebp

loc_1000BF45:				; CODE XREF: sub_1000BDC0+195j
		lea	eax, [edx+ecx]
		test	eax, eax
		js	short loc_1000BF57
		mov	al, [ecx]
		inc	al
		mov	[ecx], al
		dec	ecx
		test	al, al
		jz	short loc_1000BF45

loc_1000BF57:				; CODE XREF: sub_1000BDC0+179j
					; sub_1000BDC0+18Aj
		mov	ecx, [esp+180h+var_16C]	; Dst
		xor	eax, eax
		mov	[esp+180h+var_24], eax
		mov	[esp+180h+var_20], eax
		mov	[esp+180h+var_1C], eax
		mov	[esp+180h+var_18], eax
		mov	[esp+180h+var_14], eax
		mov	[esp+180h+var_10], eax
		mov	[esp+180h+var_C], eax
		mov	[esp+180h+var_8], eax

loc_1000BF95:				; CODE XREF: sub_1000BDC0+57j
		mov	eax, [esp+180h+arg_4]
		cmp	eax, 20h
		jnz	short loc_1000BFB2
		push	37h		; Size
		lea	edx, [ebp+5]
		push	edx		; Src
		push	ecx		; void *
		call	sub_10006810
		add	esp, 0Ch
		jmp	short loc_1000BFBC
; ---------------------------------------------------------------------------

loc_1000BFB2:				; CODE XREF: sub_1000BDC0+1DFj
		push	eax		; int
		push	ebp		; int
		call	sub_1000BD00
		add	esp, 8

loc_1000BFBC:				; CODE XREF: sub_1000BDC0+1F0j
		lea	ebx, [ebp+4]
		push	38h		; Size
		lea	eax, [esp+184h+var_24]
		push	ebx		; Src
		push	eax		; void *
		mov	byte ptr [ebx],	3
		call	sub_10006810
		lea	ecx, [esp+18Ch+var_24]
		dec	ecx
		lea	edx, [esp+18Ch+var_24]
		sub	edx, ecx
		mov	[esp+18Ch+var_15C], edx
		lea	edx, [esp+18Ch+var_24]
		sub	edx, ecx
		add	edx, 0FFFFFFFEh
		mov	[esp+18Ch+var_158], edx
		lea	edx, [esp+18Ch+var_24]
		sub	edx, ecx
		add	edx, 0FFFFFFFDh
		mov	[esp+18Ch+var_160], edx
		lea	edx, [ebp+3]
		sub	edx, ebx
		lea	esi, [ebp+5]
		lea	edi, [ecx+1Fh]
		mov	[esp+18Ch+var_168], edx
		mov	ecx, esi
		sub	ecx, ebx
		lea	edx, [ebp+2]
		add	esp, 0Ch
		sub	edx, ebx
		mov	[esp+180h+var_154], 0
		lea	eax, [ebx+36h]
		mov	[esp+180h+var_170], ecx
		mov	[esp+180h+var_164], edx
		mov	[esp+180h+var_16C], 8
		jmp	short loc_1000C044
; ---------------------------------------------------------------------------
		align 10h

loc_1000C040:				; CODE XREF: sub_1000BDC0+2F9j
		mov	ecx, [esp+180h+var_170]

loc_1000C044:				; CODE XREF: sub_1000BDC0+27Dj
		movzx	ecx, byte ptr [ecx+eax]
		add	ecx, [esp+180h+var_154]
		mov	edx, [esp+180h+var_15C]
		movzx	edx, byte ptr [edx+edi]
		add	ecx, edx
		mov	edx, [esp+180h+var_170]
		mov	[edx+eax], cl
		movzx	edx, byte ptr [edi]
		shr	ecx, 8
		add	ecx, edx
		movzx	edx, byte ptr [eax]
		add	edx, ecx
		mov	ecx, [esp+180h+var_158]
		movzx	ecx, byte ptr [ecx+edi]
		mov	[eax], dl
		shr	edx, 8
		add	ecx, edx
		mov	edx, [esp+180h+var_168]
		movzx	edx, byte ptr [edx+eax]
		add	ecx, edx
		mov	edx, [esp+180h+var_168]
		mov	[edx+eax], cl
		mov	edx, [esp+180h+var_160]
		movzx	edx, byte ptr [edx+edi]
		shr	ecx, 8
		add	edx, ecx
		mov	ecx, [esp+180h+var_164]
		movzx	ecx, byte ptr [ecx+eax]
		add	ecx, edx
		mov	edx, [esp+180h+var_164]
		mov	[edx+eax], cl
		shr	ecx, 8
		sub	eax, 4
		sub	edi, 4
		dec	[esp+180h+var_16C]
		mov	[esp+180h+var_154], ecx
		jnz	short loc_1000C040
		test	ecx, ecx
		jz	short loc_1000C0E2
		mov	edx, 0FFFFFFFBh
		lea	ecx, [ebp+1Bh]
		sub	edx, ebp
		lea	esp, [esp+0]

loc_1000C0D0:				; CODE XREF: sub_1000BDC0+320j
		lea	eax, [ecx+edx]
		test	eax, eax
		js	short loc_1000C0E2
		mov	al, [ecx]
		inc	al
		mov	[ecx], al
		dec	ecx
		test	al, al
		jz	short loc_1000C0D0

loc_1000C0E2:				; CODE XREF: sub_1000BDC0+2FDj
					; sub_1000BDC0+315j
		mov	edx, ebp
		sub	edx, esi
		add	edx, 3Ch
		mov	[esp+180h+var_154], edx
		mov	edx, ebp
		sub	edx, esi
		add	edx, 3Bh
		mov	[esp+180h+var_170], edx
		mov	edx, ebp
		sub	edx, esi
		add	edx, 3Ah
		mov	[esp+180h+var_160], edx
		lea	edx, [ebp+3]
		sub	edx, esi
		mov	[esp+180h+var_158], edx
		mov	edx, ebp
		sub	edx, esi
		add	edx, 39h
		mov	[esp+180h+var_15C], edx
		lea	edx, [ebp+2]
		sub	edx, esi
		mov	[esp+180h+var_164], edx
		mov	edx, ebp
		sub	edx, esi
		add	edx, 38h
		mov	[esp+180h+var_168], edx
		mov	edx, ebp
		sub	edx, esi
		xor	ecx, ecx
		sub	ebx, esi
		inc	edx
		lea	eax, [esi+36h]
		mov	[esp+180h+var_150], edx
		mov	[esp+180h+var_16C], 0Bh

loc_1000C143:				; CODE XREF: sub_1000BDC0+402j
		movzx	edi, byte ptr [eax]
		mov	edx, [esp+180h+var_154]
		movzx	edx, byte ptr [edx+eax]
		add	edi, ecx
		mov	ecx, [esp+180h+var_170]
		add	edx, edi
		mov	[eax], dl
		movzx	ecx, byte ptr [ecx+eax]
		shr	edx, 8
		add	ecx, edx
		movzx	edx, byte ptr [ebx+eax]
		add	ecx, edx
		mov	edx, [esp+180h+var_160]
		mov	[ebx+eax], cl
		movzx	edx, byte ptr [edx+eax]
		shr	ecx, 8
		add	edx, ecx
		mov	ecx, [esp+180h+var_158]
		movzx	edi, byte ptr [ecx+eax]
		add	edx, edi
		mov	[ecx+eax], dl
		mov	ecx, [esp+180h+var_15C]
		movzx	ecx, byte ptr [ecx+eax]
		shr	edx, 8
		add	ecx, edx
		mov	edx, [esp+180h+var_164]
		movzx	edi, byte ptr [edx+eax]
		add	ecx, edi
		mov	[edx+eax], cl
		mov	edx, [esp+180h+var_168]
		movzx	edi, byte ptr [edx+eax]
		mov	edx, [esp+180h+var_150]
		shr	ecx, 8
		add	edi, ecx
		movzx	ecx, byte ptr [edx+eax]
		add	ecx, edi
		mov	[edx+eax], cl
		shr	ecx, 8
		sub	eax, 5
		dec	[esp+180h+var_16C]
		jnz	loc_1000C143
		movzx	ecx, byte ptr [ebp+0B0h]
		movzx	edx, byte ptr [ebp+3Bh]
		add	ecx, edx
		movzx	edx, byte ptr [ebp+39h]
		mov	[ebp+3Bh], cl
		movzx	eax, byte ptr [ebp+0AFh]
		shr	ecx, 8
		add	eax, ecx
		movzx	ecx, byte ptr [ebp+3Ah]
		add	eax, ecx
		mov	[ebp+3Ah], al
		movzx	ecx, byte ptr [ebp+0AEh]
		shr	eax, 8
		add	ecx, eax
		add	ecx, edx
		movzx	edx, byte ptr [ebp+37h]
		mov	[ebp+39h], cl
		movzx	eax, byte ptr [ebp+0ADh]
		shr	ecx, 8
		add	eax, ecx
		movzx	ecx, byte ptr [ebp+38h]
		add	eax, ecx
		mov	[ebp+38h], al
		movzx	ecx, byte ptr [ebp+0ACh]
		shr	eax, 8
		add	ecx, eax
		add	ecx, edx
		movzx	edx, byte ptr [ebp+35h]
		mov	[ebp+37h], cl
		movzx	eax, byte ptr [ebp+0ABh]
		shr	ecx, 8
		add	eax, ecx
		movzx	ecx, byte ptr [ebp+36h]
		add	eax, ecx
		mov	[ebp+36h], al
		movzx	ecx, byte ptr [ebp+0AAh]
		shr	eax, 8
		add	ecx, eax
		add	ecx, edx
		mov	[ebp+35h], cl
		shr	ecx, 8
		test	ecx, ecx
		jz	short loc_1000C279
		mov	edx, 0FFFFFFFBh
		lea	ecx, [ebp+34h]
		sub	edx, ebp

loc_1000C267:				; CODE XREF: sub_1000BDC0+4B7j
		lea	eax, [ecx+edx]
		test	eax, eax
		js	short loc_1000C279
		mov	al, [ecx]
		inc	al
		mov	[ecx], al
		dec	ecx
		test	al, al
		jz	short loc_1000C267

loc_1000C279:				; CODE XREF: sub_1000BDC0+49Bj
					; sub_1000BDC0+4ACj
		mov	ecx, 6
		mov	edi, edi

loc_1000C280:				; CODE XREF: sub_1000BDC0+4D7j
		test	ecx, ecx
		js	short loc_1000C299
		mov	al, [ecx+ebp+0AAh]
		inc	al
		mov	[ecx+ebp+0AAh],	al
		dec	ecx
		test	al, al
		jz	short loc_1000C280

loc_1000C299:				; CODE XREF: sub_1000BDC0+4C2j
		lea	edi, [ebp+73h]
		mov	edx, 37h
		mov	eax, edi
		mov	ecx, esi

loc_1000C2A5:				; CODE XREF: sub_1000BDC0+4F7j
		mov	ebx, [ecx]
		cmp	ebx, [eax]
		jnz	short loc_1000C2EB
		sub	edx, 4
		add	eax, 4
		add	ecx, 4
		cmp	edx, 4
		jnb	short loc_1000C2A5
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1000C2EB
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1000C2EB
		mov	al, [eax+2]
		cmp	al, [ecx+2]
		jnz	short loc_1000C2EB
		push	0FFFFE001h
		mov	dword ptr [ebp+20D8h], 0
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000C2F7
; ---------------------------------------------------------------------------

loc_1000C2EB:				; CODE XREF: sub_1000BDC0+4E9j
					; sub_1000BDC0+4FDj ...
		mov	ecx, 0Dh
		rep movsd
		movsw
		movsb
		xor	eax, eax

loc_1000C2F7:				; CODE XREF: sub_1000BDC0+529j
		mov	ecx, [esp+180h+var_4]
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 170h
		retn
sub_1000BDC0	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_1000C310(void *Dst)
sub_1000C310	proc near		; CODE XREF: sub_1000C3A0:loc_1000C3B8p

Dst		= byte ptr -74h
var_3D		= byte ptr -3Dh
var_4		= dword	ptr -4

		sub	esp, 74h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+74h+var_4], eax
		mov	eax, Dst
		push	ebx
		push	ebp
		push	esi
		mov	esi, ecx
		mov	ecx, [eax]
		push	edi
		push	ecx
		call	ds:PR_DestroyLock
		push	0		; size_t
		xor	ebx, ebx
		lea	edi, [esi+3Ch]
		push	37h		; Size
		push	edi		; void *
		lea	ecx, [ebx+37h]	; int
		lea	edx, [esp+94h+Dst] ; Dst
		call	sub_1000BA90
		push	ebx		; size_t
		lea	ebp, [esi+5]
		push	37h		; Size
		push	ebp		; void *
		lea	ecx, [ebx+37h]	; int
		lea	edx, [esp+0A0h+var_3D] ; Dst
		call	sub_1000BA90
		push	20DCh		; Size
		push	ebx		; Val
		push	esi		; Dst
		call	memset
		mov	ecx, 0Dh
		lea	esi, [esp+0ACh+Dst]
		rep movsd
		movsw
		movsb
		mov	edi, ebp
		mov	ecx, 0Dh
		lea	esi, [esp+0ACh+var_3D]
		rep movsd
		mov	ecx, [esp+0ACh+var_4]
		movsw
		add	esp, 28h
		movsb
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
sub_1000C310	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C3A0	proc near		; DATA XREF: .rdata:100392B8o
		mov	ecx, Dst	; Dst
		test	ecx, ecx
		jnz	short loc_1000C3B8
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_1000C3B8:				; CODE XREF: sub_1000C3A0+8j
		call	sub_1000C310
		mov	eax, ds:dword_1003AF18
		mov	ecx, ds:dword_1003AF1C
		mov	edx, ds:dword_1003AF20
		mov	Dst, 0
		mov	dword_10049640,	eax
		mov	dword_10049644,	ecx
		mov	dword_10049648,	edx
		retn
sub_1000C3A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C3F0(void	*Src, size_t Size, void	*, size_t, void	*, size_t)
sub_1000C3F0	proc near		; DATA XREF: .rdata:1003943Co

Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+Size]
		lea	ebx, [esi+ebp]
		add	ebx, [esp+0Ch+arg_14]
		cmp	esi, 20h
		jnb	short loc_1000C41B
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C41B:				; CODE XREF: sub_1000C3F0+15j
		push	edi
		push	ebx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1000C440
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000C438:				; CODE XREF: sub_1000C3F0+ADj
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C440:				; CODE XREF: sub_1000C3F0+39j
		mov	eax, [esp+10h+Src]
		push	esi		; Size
		push	eax		; Src
		push	edi		; Dst
		call	memcpy
		mov	eax, [esp+1Ch+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000C465
		push	ebp		; Size
		push	eax		; Src
		lea	ecx, [edi+esi]
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_1000C465:				; CODE XREF: sub_1000C3F0+65j
		mov	eax, [esp+10h+arg_10]
		test	eax, eax
		jz	short loc_1000C481
		mov	edx, [esp+10h+arg_14]
		push	edx		; Size
		push	eax		; Src
		lea	eax, [edi+esi]
		add	eax, ebp
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_1000C481:				; CODE XREF: sub_1000C3F0+7Bj
		push	edi
		mov	eax, ebx
		mov	esi, offset dword_1004BA80
		call	sub_1000BB70
		push	ebx
		push	edi
		mov	esi, eax
		call	PORT_ZFree_Util
		add	esp, 0Ch
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000C438
		pop	edi
		pop	esi
		pop	ebp
		mov	dword_1004DB58,	1
		xor	eax, eax
		pop	ebx
		retn
sub_1000C3F0	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C4B0(void	*Src, size_t Size, int,	size_t)
sub_1000C4B0	proc near		; DATA XREF: .rdata:10039440o

Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	dword_1004DB58,	0
		jnz	short loc_1000C4CA
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000C4CA:				; CODE XREF: sub_1000C4B0+7j
		mov	ecx, [esp+Src]	; Src
		mov	eax, [esp+arg_C]
		mov	edx, [esp+Size]	; Size
		push	esi
		mov	esi, [esp+4+arg_8]
		test	ecx, ecx
		jnz	short loc_1000C4F4
		test	edx, edx
		jnz	short loc_1000C4F4
		test	esi, esi
		jnz	short loc_1000C4F4
		test	eax, eax
		jnz	short loc_1000C4F4
		mov	byte_1004BB2A, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C4F4:				; CODE XREF: sub_1000C4B0+2Dj
					; sub_1000C4B0+31j ...
		push	eax		; size_t
		push	esi		; int
		push	offset dword_1004BA80 ;	int
		call	sub_1000BBD0
		add	esp, 0Ch
		pop	esi
		retn
sub_1000C4B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C510(void	*, int,	void *Src, size_t Size)
sub_1000C510	proc near		; CODE XREF: sub_1000C5B0+DDp
					; sub_1000C5B0+1AFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		cmp	dword_1004DB58,	0
		jnz	short loc_1000C52A
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000C52A:				; CODE XREF: sub_1000C510+7j
		cmp	byte_1004BB2A, 1
		jb	short loc_1000C54C
		push	0		; size_t
		push	0		; int
		push	offset dword_1004BA80 ;	int
		xor	edx, edx	; Size
		xor	ecx, ecx	; Src
		call	sub_1000BBD0
		add	esp, 0Ch
		test	eax, eax
		jnz	short locret_1000C56B

loc_1000C54C:				; CODE XREF: sub_1000C510+21j
		mov	eax, [esp+Size]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+Src]	; Src
		push	eax		; Size
		push	ecx		; int
		mov	ecx, [esp+8+arg_0] ; void *
		push	offset dword_1004BA80 ;	int
		call	sub_1000BDC0
		add	esp, 0Ch

locret_1000C56B:			; CODE XREF: sub_1000C510+3Aj
		retn
sub_1000C510	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C570	proc near		; CODE XREF: sub_1000C5B0+150p
					; sub_1000C5B0+18Bp ...
		cmp	dword_1004DB58,	0
		jnz	short loc_1000C58A
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000C58A:				; CODE XREF: sub_1000C570+7j
		push	20DCh		; Size
		push	0		; Val
		push	offset dword_1004BA80 ;	Dst
		call	memset
		add	esp, 0Ch
		xor	eax, eax
		retn
sub_1000C570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C5B0	proc near		; CODE XREF: sub_1000C8F0p
					; sub_1000CA80+26p ...

var_3C		= byte ptr -3Ch
var_4		= dword	ptr -4

		sub	esp, 3Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+3Ch+var_4], eax
		push	esi
		push	edi
		push	20h
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1000C607
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000C5DD:				; CODE XREF: sub_1000C5B0+84j
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE03Fh
		jnz	loc_1000C8CC
		push	50h
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1000C645
		push	0FFFFE013h
		jmp	loc_1000C8D1
; ---------------------------------------------------------------------------

loc_1000C607:				; CODE XREF: sub_1000C5B0+1Ej
		push	20h		; Size
		push	offset dword_1003AF30 ;	Src
		push	edi		; Dst
		call	memcpy
		push	edi
		mov	eax, 20h
		mov	esi, offset dword_1004BA80
		call	sub_1000BB70
		push	20h
		push	edi
		mov	esi, eax
		call	PORT_ZFree_Util
		add	esp, 18h
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000C5DD
		mov	dword_1004DB58,	1
		jmp	loc_1000C8CC
; ---------------------------------------------------------------------------

loc_1000C645:				; CODE XREF: sub_1000C5B0+4Bj
		push	50h		; Size
		push	offset dword_1003AF30 ;	Src
		push	edi		; Dst
		call	memcpy
		push	edi
		mov	eax, 50h
		mov	esi, offset dword_1004BA80
		call	sub_1000BB70
		push	50h
		push	edi
		mov	esi, eax
		call	PORT_ZFree_Util
		add	esp, 18h
		cmp	esi, 0FFFFFFFFh
		jz	loc_1000C8D9
		push	0		; Size
		push	0		; Src
		lea	eax, [esp+4Ch+var_3C]
		push	37h		; int
		push	eax		; void *
		mov	dword_1004DB58,	1
		call	sub_1000C510
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000C8A0
		lea	edx, [eax+37h]
		mov	eax, offset dword_1003AF80
		lea	ecx, [esp+44h+var_3C]
		lea	esp, [esp+0]

loc_1000C6B0:				; CODE XREF: sub_1000C5B0+116j
		mov	esi, [ecx]
		cmp	esi, [eax]
		jnz	loc_1000C8A0
		sub	edx, 4
		add	eax, 4
		add	ecx, 4
		cmp	edx, 4
		jnb	short loc_1000C6B0
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	loc_1000C8A0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	loc_1000C8A0
		mov	al, [eax+2]
		cmp	al, [ecx+2]
		jnz	loc_1000C8A0
		cmp	dword_1004DB58,	0
		jnz	short loc_1000C719

loc_1000C6F3:				; CODE XREF: sub_1000C5B0+211j
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		call	sub_1000C570
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000C719:				; CODE XREF: sub_1000C5B0+141j
		push	20h		; size_t
		push	offset dword_1003AFD8 ;	int
		push	offset dword_1004BA80 ;	int
		mov	edx, 20h	; Size
		mov	ecx, offset dword_1003AFB8 ; Src
		call	sub_1000BBD0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000C754
		call	sub_1000C570
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000C754:				; CODE XREF: sub_1000C5B0+189j
		push	0		; Size
		push	0		; Src
		lea	ecx, [esp+4Ch+var_3C]
		push	37h		; int
		push	ecx		; void *
		call	sub_1000C510
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000C8A0
		lea	edx, [eax+37h]
		mov	eax, offset dword_1003AFF8
		lea	ecx, [esp+44h+var_3C]
		jmp	short loc_1000C780
; ---------------------------------------------------------------------------
		align 10h

loc_1000C780:				; CODE XREF: sub_1000C5B0+1CBj
					; sub_1000C5B0+1E6j
		mov	esi, [ecx]
		cmp	esi, [eax]
		jnz	loc_1000C8A0
		sub	edx, 4
		add	eax, 4
		add	ecx, 4
		cmp	edx, 4
		jnb	short loc_1000C780
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	loc_1000C8A0
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	loc_1000C8A0
		mov	al, [eax+2]
		cmp	al, [ecx+2]
		jnz	loc_1000C8A0
		cmp	dword_1004DB58,	0
		jz	loc_1000C6F3
		push	0		; Size
		push	0		; Src
		lea	ecx, [esp+4Ch+var_3C]
		push	37h		; int
		push	ecx		; void *
		mov	byte_1004BB2A, 1
		call	sub_1000C510
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000C899
		lea	edx, [eax+37h]
		mov	eax, offset dword_1003B030
		lea	ecx, [esp+44h+var_3C]

loc_1000C7F5:				; CODE XREF: sub_1000C5B0+257j
		mov	esi, [ecx]
		cmp	esi, [eax]
		jnz	short loc_1000C81F
		sub	edx, 4
		add	eax, 4
		add	ecx, 4
		cmp	edx, 4
		jnb	short loc_1000C7F5
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1000C81F
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1000C81F
		mov	al, [eax+2]
		cmp	al, [ecx+2]
		jz	short loc_1000C899

loc_1000C81F:				; CODE XREF: sub_1000C5B0+249j
					; sub_1000C5B0+25Dj ...
		cmp	dword_1004DB58,	0
		jnz	short loc_1000C87A
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000C835:				; CODE XREF: sub_1000C5B0+2E7j
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE03Fh
		jnz	short loc_1000C899
		call	sub_1000C570
		test	eax, eax
		jnz	loc_1000C8DC
		call	sub_1000C570
		mov	esi, eax
		test	esi, esi
		jz	short loc_1000C8CC
		call	PORT_GetError_Util
		sub	eax, 0FFFFE001h
		neg	eax
		sbb	eax, eax
		pop	edi
		and	eax, esi
		pop	esi
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000C87A:				; CODE XREF: sub_1000C5B0+276j
		push	0		; size_t
		push	0		; int
		push	offset dword_1004BA80 ;	int
		mov	edx, 4		; Size
		mov	ecx, offset dword_1003AFB8 ; Src
		call	sub_1000BBD0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000C835

loc_1000C899:				; CODE XREF: sub_1000C5B0+233j
					; sub_1000C5B0+26Dj ...
		call	sub_1000C570
		jmp	short loc_1000C8CC
; ---------------------------------------------------------------------------

loc_1000C8A0:				; CODE XREF: sub_1000C5B0+E7j
					; sub_1000C5B0+104j ...
		cmp	dword_1004DB58,	0
		jnz	short loc_1000C8B8
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1000C8CC
; ---------------------------------------------------------------------------

loc_1000C8B8:				; CODE XREF: sub_1000C5B0+2F7j
		push	20DCh		; Size
		push	0		; Val
		push	offset dword_1004BA80 ;	Dst
		call	memset
		add	esp, 0Ch

loc_1000C8CC:				; CODE XREF: sub_1000C5B0+37j
					; sub_1000C5B0+90j ...
		push	0FFFFE001h

loc_1000C8D1:				; CODE XREF: sub_1000C5B0+52j
		call	PORT_SetError_Util
		add	esp, 4

loc_1000C8D9:				; CODE XREF: sub_1000C5B0+C2j
		or	eax, 0FFFFFFFFh

loc_1000C8DC:				; CODE XREF: sub_1000C5B0+298j
		mov	ecx, [esp+44h+var_4]
		pop	edi
		pop	esi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
sub_1000C5B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C8F0	proc near		; CODE XREF: sub_1000C930+9Ep

Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		call	sub_1000C5B0
		test	eax, eax
		jz	short loc_1000C907
		mov	dword ptr [esi+20D8h], 0
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000C907:				; CODE XREF: sub_1000C8F0+7j
		mov	eax, [esp+arg_C]
		mov	ecx, [esp+arg_8]
		mov	edx, [esp+Size]	; Size
		push	eax		; size_t
		push	ecx		; int
		mov	ecx, [esp+8+Src] ; Src
		push	esi		; int
		call	sub_1000BBD0
		add	esp, 0Ch
		retn
sub_1000C8F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C930	proc near		; DATA XREF: sub_1000CA60o

Dst		= byte ptr -74h
var_4		= dword	ptr -4

		sub	esp, 74h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+74h+var_4], eax
		cmp	Dst, 0
		push	edi
		jnz	loc_1000CA14
		mov	Dst, offset dword_10049650
		call	ds:PR_NewLock
		mov	ecx, Dst
		mov	[ecx], eax
		test	eax, eax
		jnz	short loc_1000C98D
		push	0FFFFE890h
		mov	Dst, eax
		call	PORT_SetError_Util
		add	esp, 4

loc_1000C97A:				; CODE XREF: sub_1000C930+BBj
		or	eax, 0FFFFFFFFh
		pop	edi
		mov	ecx, [esp+74h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_1000C98D:				; CODE XREF: sub_1000C930+36j
		lea	edx, [esp+78h+Dst]
		push	6Eh
		push	edx
		call	sub_10001320
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_1000CA26
		push	esi
		mov	esi, Dst
		cmp	byte ptr [esi+5], 0
		jnz	short loc_1000C9C4
		lea	eax, [esp+7Ch+Dst]
		push	eax
		mov	eax, edi
		call	sub_1000BB70
		add	esp, 4
		jmp	short loc_1000C9D6
; ---------------------------------------------------------------------------

loc_1000C9C4:				; CODE XREF: sub_1000C930+81j
		push	0
		push	0
		lea	ecx, [esp+84h+Dst]
		push	edi
		push	ecx
		call	sub_1000C8F0
		add	esp, 10h

loc_1000C9D6:				; CODE XREF: sub_1000C930+92j
		push	edi		; Size
		lea	edx, [esp+80h+Dst]
		push	0		; Val
		push	edx		; Dst
		mov	esi, eax
		call	memset
		add	esp, 0Ch
		test	esi, esi
		pop	esi
		jnz	short loc_1000C97A
		mov	eax, Dst
		push	0		; Size
		push	20h		; int
		push	eax		; int
		xor	edx, edx	; Src
		lea	ecx, [esp+84h+Dst] ; void *
		mov	dword ptr [eax+20D8h], 1
		call	sub_1000BDC0
		add	esp, 0Ch
		call	sub_10001120

loc_1000CA14:				; CODE XREF: sub_1000C930+16j
		xor	eax, eax
		pop	edi
		mov	ecx, [esp+74h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_1000CA26:				; CODE XREF: sub_1000C930+70j
		mov	eax, Dst
		mov	ecx, [eax]
		push	ecx
		call	ds:PR_DestroyLock
		mov	edx, Dst
		mov	ecx, [esp+7Ch+var_4]
		add	esp, 4
		pop	edi
		xor	ecx, esp
		mov	dword ptr [edx], 0
		mov	Dst, 0
		or	eax, 0FFFFFFFFh
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 74h
		retn
sub_1000C930	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CA60	proc near		; DATA XREF: .rdata:100392ACo
		push	offset sub_1000C930
		push	offset dword_10049640
		call	ds:PR_CallOnce
		mov	eax, Dst
		add	esp, 8
		neg	eax
		sbb	eax, eax
		neg	eax
		dec	eax
		retn
sub_1000CA60	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CA80(void	*Src, size_t Size)
sub_1000CA80	proc near		; CODE XREF: sub_10001120+26p
					; sub_10001120+48p ...

Src		= dword	ptr  4
Size		= dword	ptr  8

		mov	eax, Dst
		mov	ecx, [eax]
		push	ebx
		push	esi
		push	edi
		push	ecx
		call	ds:PR_Lock
		mov	ebx, [esp+10h+Size]
		mov	esi, Dst
		add	esp, 4
		cmp	ebx, 2000h
		jbe	short loc_1000CB01
		call	sub_1000C5B0
		test	eax, eax
		jz	short loc_1000CAD4
		mov	dword ptr [esi+20D8h], 0
		mov	esi, Dst
		mov	edx, [esi]
		push	edx
		or	edi, 0FFFFFFFFh
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000CAD4:				; CODE XREF: sub_1000CA80+2Dj
		mov	edx, [esp+0Ch+Src]
		push	ebx		; size_t
		push	edx		; int
		push	esi		; int
		xor	edx, edx	; Size
		xor	ecx, ecx	; Src
		call	sub_1000BBD0
		mov	esi, Dst
		mov	edx, [esi]
		add	esp, 0Ch
		push	edx
		mov	edi, eax
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000CB01:				; CODE XREF: sub_1000CA80+24j
		mov	eax, [esi+20D4h]
		mov	edi, 2000h
		sub	edi, eax
		cmp	ebx, edi
		jnb	short loc_1000CB42
		mov	ecx, [esp+0Ch+Src]
		push	ebx		; Size
		push	ecx		; Src
		lea	edx, [eax+esi+0D2h]
		push	edx		; Dst
		call	memcpy
		add	[esi+20D4h], ebx
		mov	edx, [esi]
		add	esp, 0Ch
		push	edx
		xor	edi, edi
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000CB42:				; CODE XREF: sub_1000CA80+90j
		push	ebp
		mov	ebp, [esp+10h+Src]
		test	edi, edi
		jz	short loc_1000CB61
		push	edi		; Size
		lea	eax, [eax+esi+0D2h]
		push	ebp		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		add	ebp, edi
		sub	ebx, edi

loc_1000CB61:				; CODE XREF: sub_1000CA80+C9j
		lea	edi, [esi+0D2h]
		call	sub_1000C5B0
		test	eax, eax
		jz	short loc_1000CB7F
		mov	dword ptr [esi+20D8h], 0
		or	edi, 0FFFFFFFFh
		jmp	short loc_1000CB94
; ---------------------------------------------------------------------------

loc_1000CB7F:				; CODE XREF: sub_1000CA80+EEj
		push	2000h		; size_t
		push	edi		; int
		push	esi		; int
		xor	edx, edx	; Size
		xor	ecx, ecx	; Src
		call	sub_1000BBD0
		add	esp, 0Ch
		mov	edi, eax

loc_1000CB94:				; CODE XREF: sub_1000CA80+FDj
		mov	esi, Dst
		push	ebx		; Size
		lea	ecx, [esi+0D2h]
		push	ebp		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	[esi+20D4h], ebx
		mov	edx, [esi]
		pop	ebp
		push	edx
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000CA80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CBD0	proc near		; CODE XREF: sub_1000CD60+11p

Dst		= dword	ptr  4

		test	esi, esi
		jnz	short loc_1000CBE5

loc_1000CBD4:				; CODE XREF: sub_1000CBD0+1Bj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000CBE5:				; CODE XREF: sub_1000CBD0+2j
		cmp	ebx, 10000h
		ja	short loc_1000CBD4
		mov	eax, [esi]
		push	ebp
		mov	ebp, ds:PR_Lock
		push	edi
		push	eax
		call	ebp ; PR_Lock
		add	esp, 4
		cmp	byte ptr [esi+0AAh], 1
		jb	short loc_1000CC52
		call	sub_1000C5B0
		test	eax, eax
		jz	short loc_1000CC1E
		mov	dword ptr [esi+20D8h], 0
		or	edi, 0FFFFFFFFh
		jmp	short loc_1000CC31
; ---------------------------------------------------------------------------

loc_1000CC1E:				; CODE XREF: sub_1000CBD0+3Dj
		push	0		; size_t
		push	0		; int
		push	esi		; int
		xor	edx, edx	; Size
		xor	ecx, ecx	; Src
		call	sub_1000BBD0
		add	esp, 0Ch
		mov	edi, eax

loc_1000CC31:				; CODE XREF: sub_1000CBD0+4Cj
		mov	ecx, [esi]
		push	ecx
		call	ds:PR_Unlock
		add	esp, 4
		test	edi, edi
		jnz	loc_1000CD4D
		call	sub_10001120
		mov	edx, [esi]
		push	edx
		call	ebp ; PR_Lock
		add	esp, 4

loc_1000CC52:				; CODE XREF: sub_1000CBD0+34j
		movzx	eax, byte ptr [esi+0D1h]
		cmp	ebx, eax
		ja	short loc_1000CCA9
		mov	edx, [esp+8+Dst]
		mov	ecx, esi
		sub	ecx, eax
		push	ebx		; Size
		add	ecx, 0D1h
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		movzx	eax, byte ptr [esi+0D1h]
		mov	ecx, esi
		push	ebx		; Size
		sub	ecx, eax
		add	ecx, 0D1h
		push	0		; Val
		push	ecx		; Dst
		call	memset
		mov	ecx, [esi]
		sub	[esi+0D1h], bl
		add	esp, 18h
		push	ecx
		xor	edi, edi
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000CCA9:				; CODE XREF: sub_1000CBD0+8Bj
		mov	eax, [esi+20D4h]
		cmp	ebx, 20h
		jnb	short loc_1000CD18
		test	eax, eax
		jz	short loc_1000CCC0
		lea	edx, [esi+0D2h]
		jmp	short loc_1000CCC2
; ---------------------------------------------------------------------------

loc_1000CCC0:				; CODE XREF: sub_1000CBD0+E6j
		xor	edx, edx	; Src

loc_1000CCC2:				; CODE XREF: sub_1000CBD0+EEj
		push	eax		; Size
		lea	ebp, [esi+0B1h]
		push	20h		; int
		push	esi		; int
		mov	ecx, ebp	; void *
		call	sub_1000BDC0
		mov	edi, eax
		add	esp, 0Ch
		mov	dword ptr [esi+20D4h], 0
		test	edi, edi
		jnz	short loc_1000CD41
		mov	edx, [esp+8+Dst]
		push	ebx		; Size
		push	ebp		; Src
		push	edx		; Dst
		call	memcpy
		push	ebx		; Size
		push	edi		; Val
		push	ebp		; Dst
		call	memset
		mov	ecx, [esi]
		mov	al, 20h
		add	esp, 18h
		sub	al, bl
		push	ecx
		mov	[esi+0D1h], al
		call	ds:PR_Unlock
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000CD18:				; CODE XREF: sub_1000CBD0+E2j
		test	eax, eax
		jz	short loc_1000CD24
		lea	edx, [esi+0D2h]
		jmp	short loc_1000CD26
; ---------------------------------------------------------------------------

loc_1000CD24:				; CODE XREF: sub_1000CBD0+14Aj
		xor	edx, edx	; Src

loc_1000CD26:				; CODE XREF: sub_1000CBD0+152j
		mov	ecx, [esp+8+Dst] ; void	*
		push	eax		; Size
		push	ebx		; int
		push	esi		; int
		call	sub_1000BDC0
		add	esp, 0Ch
		mov	edi, eax
		mov	dword ptr [esi+20D4h], 0

loc_1000CD41:				; CODE XREF: sub_1000CBD0+114j
		mov	ecx, [esi]
		push	ecx
		call	ds:PR_Unlock
		add	esp, 4

loc_1000CD4D:				; CODE XREF: sub_1000CBD0+6Fj
		mov	eax, edi
		pop	edi
		pop	ebp
		retn
sub_1000CBD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CD60	proc near		; CODE XREF: sub_10015F50+147p
					; sub_10015F50+1ECp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		mov	esi, Dst
		push	eax
		call	sub_1000CBD0
		add	esp, 4
		pop	esi
		pop	ebx
		retn
sub_1000CD60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CD80(int,	int, void *Src,	size_t Size)
sub_1000CD80	proc near		; CODE XREF: sub_1000F6D0+FFp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+Size]
		cmp	edi, 10h
		jbe	short loc_1000CD9B
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000CD9B:				; CODE XREF: sub_1000CD80+8j
		push	esi
		push	18h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1000CDAF
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000CDAF:				; CODE XREF: sub_1000CD80+2Aj
		mov	eax, [esp+8+Src]
		push	edi		; Size
		push	eax		; Src
		lea	ecx, [esi+8]
		push	ecx		; Dst
		call	memcpy
		mov	eax, [esp+14h+arg_0]
		mov	edx, [esp+14h+arg_4]
		add	esp, 0Ch
		mov	[esi+4], eax
		mov	[esi], edx
		mov	eax, esi
		pop	esi
		pop	edi
		retn
sub_1000CD80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CDE0	proc near		; DATA XREF: sub_1000F6D0:loc_1000F7EEo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jz	short locret_1000CDF2
		mov	eax, [esp+arg_0]
		push	eax
		call	PORT_Free_Util
		pop	ecx

locret_1000CDF2:			; CODE XREF: sub_1000CDE0+5j
		retn
sub_1000CDE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CE00	proc near		; DATA XREF: sub_1000F6D0+112o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
Dst		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 28h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		mov	ecx, [esp+28h+arg_0]
		mov	eax, [esp+28h+arg_4]
		mov	edx, [esp+28h+arg_10]
		push	ebx
		mov	ebx, [esp+2Ch+arg_8]
		push	esi
		mov	esi, [esp+30h+arg_18]
		push	edi
		mov	edi, [esp+34h+arg_14]
		mov	[esp+34h+var_20], ecx
		mov	[esp+34h+var_24], eax
		mov	[esp+34h+var_1C], ebx
		mov	[esp+34h+var_28], edx
		cmp	edi, esi
		jnb	short loc_1000CE5F
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000CE5F:				; CODE XREF: sub_1000CE00+3Bj
		cmp	[esp+34h+arg_C], edi
		jnb	short loc_1000CE89
		push	0FFFFE003h
		mov	[ebx], edi
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000CE89:				; CODE XREF: sub_1000CE00+63j
		xor	edx, edx
		mov	eax, edi
		div	esi
		mov	edx, [esp+34h+arg_C]
		push	ebp
		push	esi
		mov	ebp, eax
		mov	eax, [esp+3Ch+var_28]
		imul	ebp, esi
		push	ebp
		push	eax
		mov	eax, [esp+44h+var_24]
		push	edx
		mov	edx, [ecx+4]
		push	ebx
		push	eax
		mov	eax, [ecx]
		push	edx
		call	eax
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000CECC
		pop	ebp
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000CECC:				; CODE XREF: sub_1000CE00+B4j
		sub	edi, ebp
		mov	[ebx], ebp
		jnz	short loc_1000CEE7
		pop	ebp
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1000CEE7:				; CODE XREF: sub_1000CE00+D0j
		mov	ecx, [esp+38h+var_28]
		push	edi		; Size
		add	ecx, ebp
		mov	ebx, edi
		push	ecx		; Src
		lea	edx, [esp+40h+Dst]
		sub	ebx, esi
		push	edx		; Dst
		add	ebx, ebp
		call	memcpy
		mov	eax, esi
		sub	eax, edi
		push	eax		; Size
		lea	ecx, [esp+edi+48h+Dst]
		push	0		; Val
		push	ecx		; Dst
		call	memset
		mov	eax, [esp+50h+arg_C]
		mov	ecx, [esp+50h+var_24]
		push	esi
		push	esi
		sub	eax, ebx
		lea	edx, [esp+58h+Dst]
		push	edx
		push	eax
		lea	eax, [esp+60h+var_18]
		push	eax
		mov	eax, [esp+64h+var_20]
		mov	edx, [eax+4]
		mov	eax, [eax]
		add	ecx, ebx
		push	ecx
		push	edx
		call	eax
		add	esp, 34h
		test	eax, eax
		jnz	short loc_1000CF45
		mov	ecx, [esp+38h+var_1C]
		add	ebx, esi
		mov	[ecx], ebx

loc_1000CF45:				; CODE XREF: sub_1000CE00+13Bj
		mov	ecx, [esp+38h+var_4]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
sub_1000CE00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CF60(int,	void *Dst, int,	int, void *Src,	size_t Size, size_t)
sub_1000CF60	proc near		; DATA XREF: sub_1000F6D0+119o

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_34		= byte ptr -34h
var_24		= byte ptr -24h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
Src		= dword	ptr  14h
Size		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 58h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+58h+var_4], eax
		mov	eax, [esp+58h+arg_0]
		mov	ecx, [esp+58h+Dst]
		push	ebx
		mov	ebx, [esp+5Ch+Size]
		push	esi
		mov	esi, [esp+60h+arg_18]
		mov	[esp+60h+var_50], eax
		mov	eax, [esp+60h+arg_8]
		push	edi
		mov	edi, [esp+64h+Src]
		mov	[esp+64h+var_58], ecx
		mov	[esp+64h+var_4C], eax
		cmp	ebx, esi
		jnb	short loc_1000CFBB
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_1000CFBB:				; CODE XREF: sub_1000CF60+37j
		cmp	[esp+64h+arg_C], ebx
		jnb	short loc_1000CFE5
		push	0FFFFE003h
		mov	[eax], ebx
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_1000CFE5:				; CODE XREF: sub_1000CF60+5Fj
		xor	edx, edx
		mov	eax, ebx
		div	esi
		push	ebp
		mov	ebp, eax
		imul	ebp, esi
		mov	eax, ebx
		sub	eax, ebp
		mov	[esp+68h+var_48], eax
		jz	short loc_1000D059
		cmp	edi, ecx
		jz	short loc_1000D00E
		push	ebx		; Size
		push	edi		; Src
		push	ecx		; Dst
		call	memcpy
		mov	edi, [esp+74h+var_58]
		add	esp, 0Ch

loc_1000D00E:				; CODE XREF: sub_1000CF60+9Dj
		mov	eax, ebx
		sub	eax, esi
		mov	[esp+68h+var_54], eax
		push	esi		; Size
		add	eax, edi
		push	eax		; Src
		lea	ecx, [esp+70h+var_44]
		push	ecx		; Dst
		call	memcpy
		mov	ecx, [esp+74h+var_48]
		mov	eax, [esp+74h+var_54]
		sub	eax, ecx
		mov	[esp+74h+var_54], eax
		push	ecx		; Size
		sub	ebx, ecx
		add	ebx, [esp+78h+var_58]
		add	eax, edi
		push	eax		; Src
		push	ebx		; Dst
		call	memcpy
		mov	eax, [esp+80h+var_54]
		add	eax, [esp+80h+var_58]
		push	esi		; Size
		lea	edx, [esp+84h+var_44]
		push	edx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 24h

loc_1000D059:				; CODE XREF: sub_1000CF60+99j
		lea	ecx, [esi+esi]
		cmp	ebp, ecx
		jnb	short loc_1000D069
		mov	eax, [esp+68h+var_50]
		add	eax, 8
		jmp	short loc_1000D06F
; ---------------------------------------------------------------------------

loc_1000D069:				; CODE XREF: sub_1000CF60+FEj
		mov	eax, edi
		sub	eax, ecx
		add	eax, ebp

loc_1000D06F:				; CODE XREF: sub_1000CF60+107j
		push	esi		; Size
		push	eax		; Src
		lea	edx, [esp+70h+var_24]
		push	edx		; Dst
		call	memcpy
		mov	eax, edi
		sub	eax, esi
		push	esi		; Size
		add	eax, ebp
		push	eax		; Src
		lea	ecx, [esp+7Ch+var_34]
		push	ecx		; Dst
		call	memcpy
		mov	edx, [esp+80h+arg_C]
		mov	ebx, [esp+80h+var_4C]
		mov	eax, [esp+80h+var_58]
		push	esi
		push	ebp
		push	edi
		push	edx
		push	ebx
		push	eax
		mov	eax, [esp+98h+var_50]
		mov	ecx, [eax+4]
		mov	edx, [eax]
		push	ecx
		call	edx
		add	esp, 34h
		test	eax, eax
		jnz	loc_1000D175
		mov	[ebx], ebp
		mov	ebx, [esp+68h+var_48]
		add	edi, ebp
		test	ebx, ebx
		jz	loc_1000D1EC
		add	[esp+68h+var_58], ebp
		push	esi		; Size
		push	eax		; Val
		lea	eax, [esp+70h+var_44]
		push	eax		; Dst
		call	memset
		push	ebx		; Size
		lea	ecx, [esp+78h+var_44]
		push	edi		; Src
		push	ecx		; Dst
		call	memcpy
		push	ebx		; Size
		lea	edx, [esp+84h+var_14]
		push	edi		; Src
		push	edx		; Dst
		call	memcpy
		mov	edi, [esp+8Ch+var_58]
		add	esp, 24h
		sub	edi, esi
		xor	eax, eax
		test	esi, esi
		jz	short loc_1000D10D

loc_1000D100:				; CODE XREF: sub_1000CF60+1ABj
		mov	cl, [esp+eax+68h+var_24]
		xor	[esp+eax+68h+var_44], cl
		inc	eax
		cmp	eax, esi
		jb	short loc_1000D100

loc_1000D10D:				; CODE XREF: sub_1000CF60+19Ej
		xor	ecx, ecx
		test	esi, esi
		jz	short loc_1000D12E
		mov	ebp, edi
		lea	edx, [esp+68h+var_44]
		sub	ebp, edx
		jmp	short loc_1000D120
; ---------------------------------------------------------------------------
		align 10h

loc_1000D120:				; CODE XREF: sub_1000CF60+1BBj
					; sub_1000CF60+1CCj
		lea	eax, [esp+ecx+68h+var_44]
		mov	dl, [eax+ebp]
		xor	[eax], dl
		inc	ecx
		cmp	ecx, esi
		jb	short loc_1000D120

loc_1000D12E:				; CODE XREF: sub_1000CF60+1B1j
		mov	ecx, [esp+68h+var_58]
		push	ebx		; Size
		lea	eax, [esp+6Ch+var_44]
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		mov	eax, [esp+74h+var_4C]
		add	[eax], ebx
		push	ebx		; Size
		lea	edx, [esp+78h+var_14]
		push	edx		; Src
		lea	eax, [esp+7Ch+var_44]
		push	eax		; Dst
		call	memcpy
		mov	ebx, [esp+80h+var_50]
		mov	eax, [ebx+4]
		push	esi
		push	esi
		lea	ecx, [esp+88h+var_44]
		push	ecx
		mov	ecx, [ebx]
		push	esi
		lea	edx, [esp+90h+var_54]
		push	edx
		push	edi
		push	eax
		call	ecx
		add	esp, 34h
		test	eax, eax
		jz	short loc_1000D18B

loc_1000D175:				; CODE XREF: sub_1000CF60+153j
		pop	ebp
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_1000D18B:				; CODE XREF: sub_1000CF60+213j
		test	esi, esi
		jz	short loc_1000D1C0
		lea	ecx, [esp+68h+var_24]
		mov	eax, edi
		sub	ecx, edi
		mov	ebp, esi
		lea	esp, [esp+0]

loc_1000D1A0:				; CODE XREF: sub_1000CF60+247j
		mov	dl, [ecx+eax]
		xor	[eax], dl
		inc	eax
		dec	ebp
		jnz	short loc_1000D1A0
		test	esi, esi
		jz	short loc_1000D1C0
		lea	ecx, [esp+68h+var_34]
		mov	eax, edi
		sub	ecx, edi
		mov	edi, esi

loc_1000D1B7:				; CODE XREF: sub_1000CF60+25Ej
		mov	dl, [ecx+eax]
		xor	[eax], dl
		inc	eax
		dec	edi
		jnz	short loc_1000D1B7

loc_1000D1C0:				; CODE XREF: sub_1000CF60+22Dj
					; sub_1000CF60+24Bj
		push	esi		; Size
		lea	eax, [esp+6Ch+var_34]
		push	eax		; Src
		lea	ecx, [ebx+8]
		push	ecx		; Dst
		call	memcpy
		push	esi
		push	esi
		lea	edx, [esp+7Ch+var_34]
		push	edx
		mov	edx, [ebx+4]
		push	esi
		lea	eax, [esp+84h+var_54]
		push	eax
		mov	eax, [ebx]
		lea	ecx, [esp+88h+var_44]
		push	ecx
		push	edx
		call	eax
		add	esp, 28h

loc_1000D1EC:				; CODE XREF: sub_1000CF60+163j
		mov	ecx, [esp+68h+var_4]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
sub_1000CF60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000D210(int,	int, int, int, size_t Size)
sub_1000D210	proc near		; CODE XREF: sub_1000D4B0+28p
					; sub_1000DE70+114p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
Size		= dword	ptr  14h

		mov	edx, [esp+arg_C]
		mov	eax, [edx]
		push	esi
		test	eax, eax
		jz	short loc_1000D26F
		mov	ecx, [esp+4+Size]
		lea	esi, ds:0[ecx*8]
		cmp	eax, esi
		ja	short loc_1000D26F
		mov	eax, [esp+4+arg_0]
		mov	esi, [esp+4+arg_8]
		mov	[eax], esi
		mov	esi, [esp+4+arg_4]
		mov	[eax+2Ch], ecx
		mov	[eax+4], esi
		mov	esi, [edx]
		mov	[eax+28h], esi
		cmp	ecx, 10h
		ja	short loc_1000D25D
		push	ecx		; Size
		add	edx, 4
		push	edx		; Src
		add	eax, 8
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D25D:				; CODE XREF: sub_1000D210+36j
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D26F:				; CODE XREF: sub_1000D210+9j
					; sub_1000D210+18j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_1000D210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000D290(void	*Dst, int)
sub_1000D290	proc near		; CODE XREF: sub_1000DA90+Bp
					; sub_1000DE70+161p
					; DATA XREF: ...

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		push	30h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000D2B2
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000D2B2:				; CODE XREF: sub_1000D290+17j
		pop	esi
		retn
sub_1000D290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D2C0	proc near		; CODE XREF: sub_1000D320+151p
		lea	eax, [edx+eax-1]
		cmp	ecx, 8
		jb	short loc_1000D2E1
		lea	esp, [esp+0]

loc_1000D2D0:				; CODE XREF: sub_1000D2C0+1Fj
		inc	byte ptr [eax]
		mov	dl, [eax]
		dec	eax
		test	dl, dl
		jnz	short locret_1000D2F9
		sub	ecx, 8
		cmp	ecx, 8
		jnb	short loc_1000D2D0

loc_1000D2E1:				; CODE XREF: sub_1000D2C0+7j
		test	ecx, ecx
		jz	short locret_1000D2F9
		mov	dl, 1
		shl	dl, cl
		dec	dl
		mov	cl, dl
		not	cl
		or	cl, dl
		mov	dl, [eax]
		inc	dl
		and	cl, dl
		mov	[eax], cl

locret_1000D2F9:			; CODE XREF: sub_1000D2C0+17j
					; sub_1000D2C0+23j
		retn
sub_1000D2C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D300	proc near		; CODE XREF: sub_1000D320+177p

arg_0		= dword	ptr  4

		push	edi
		mov	edi, edx
		test	edi, edi
		jz	short loc_1000D31E
		push	esi
		mov	esi, [esp+8+arg_0]
		sub	ecx, eax
		sub	esi, eax

loc_1000D310:				; CODE XREF: sub_1000D300+1Bj
		mov	dl, [ecx+eax]
		xor	dl, [eax]
		inc	eax
		dec	edi
		mov	[esi+eax-1], dl
		jnz	short loc_1000D310
		pop	esi

loc_1000D31E:				; CODE XREF: sub_1000D300+5j
		pop	edi
		retn
sub_1000D300	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D320	proc near		; CODE XREF: sub_1000DB90+70p
					; sub_1000DC70+EAp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ecx
		mov	eax, [esp+4+arg_14]
		cmp	[esp+4+arg_C], eax
		jnb	short loc_1000D343
		mov	ecx, [esp+4+arg_8]
		push	0FFFFE003h
		mov	[ecx], eax
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000D343:				; CODE XREF: sub_1000D320+9j
		mov	edx, [esp+4+arg_8]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_18]
		push	edi
		mov	edi, [esp+14h+arg_0]
		mov	dword ptr [edx], 0
		mov	ebp, [edi+2Ch]
		cmp	ebp, esi
		jz	short loc_1000D3AC
		mov	ecx, esi
		sub	ecx, ebp
		cmp	ecx, eax
		jb	short loc_1000D36A
		mov	ecx, eax

loc_1000D36A:				; CODE XREF: sub_1000D320+46j
		xor	eax, eax
		lea	ebp, [edi+ebp+18h]
		test	ecx, ecx
		jz	short loc_1000D38B

loc_1000D374:				; CODE XREF: sub_1000D320+69j
		mov	edx, [esp+14h+arg_10]
		mov	dl, [eax+edx]
		xor	dl, [ebp+0]
		mov	ebx, [esp+14h+arg_4]
		mov	[eax+ebx], dl
		inc	eax
		inc	ebp
		cmp	eax, ecx
		jb	short loc_1000D374

loc_1000D38B:				; CODE XREF: sub_1000D320+52j
		mov	eax, [esp+14h+arg_8]
		add	[edi+2Ch], ecx
		add	[eax], ecx
		mov	eax, [esp+14h+arg_14]
		add	[esp+14h+arg_4], ecx
		add	[esp+14h+arg_10], ecx
		sub	eax, ecx
		mov	[esp+14h+arg_14], eax
		jz	loc_1000D4A8

loc_1000D3AC:				; CODE XREF: sub_1000D320+3Ej
		cmp	eax, esi
		jb	loc_1000D447
		lea	ebp, [edi+18h]

loc_1000D3B7:				; CODE XREF: sub_1000D320+121j
		mov	ecx, [edi+4]
		mov	edx, [edi]
		push	esi
		push	esi
		lea	eax, [edi+8]
		push	eax
		push	esi
		lea	eax, [esp+24h+arg_C]
		push	eax
		push	ebp
		push	ecx
		call	edx
		mov	ecx, [edi+28h]
		add	esp, 1Ch
		lea	edx, [edi+esi+7]
		cmp	ecx, 8
		jb	short loc_1000D3F1
		jmp	short loc_1000D3E0
; ---------------------------------------------------------------------------
		align 10h

loc_1000D3E0:				; CODE XREF: sub_1000D320+BBj
					; sub_1000D320+CFj
		inc	byte ptr [edx]
		mov	bl, [edx]
		dec	edx
		test	bl, bl
		jnz	short loc_1000D409
		sub	ecx, 8
		cmp	ecx, 8
		jnb	short loc_1000D3E0

loc_1000D3F1:				; CODE XREF: sub_1000D320+B9j
		test	ecx, ecx
		jz	short loc_1000D409
		mov	bl, 1
		shl	bl, cl
		dec	bl
		mov	cl, bl
		not	cl
		or	cl, bl
		mov	bl, [edx]
		inc	bl
		and	cl, bl
		mov	[edx], cl

loc_1000D409:				; CODE XREF: sub_1000D320+C7j
					; sub_1000D320+D3j
		test	eax, eax
		jnz	short loc_1000D47D
		test	esi, esi
		jz	short loc_1000D427

loc_1000D411:				; CODE XREF: sub_1000D320+105j
		mov	dl, [eax+ebp]
		mov	ecx, [esp+14h+arg_10]
		xor	dl, [eax+ecx]
		mov	ecx, [esp+14h+arg_4]
		mov	[eax+ecx], dl
		inc	eax
		cmp	eax, esi
		jb	short loc_1000D411

loc_1000D427:				; CODE XREF: sub_1000D320+EFj
		mov	eax, [esp+14h+arg_8]
		add	[eax], esi
		mov	eax, [esp+14h+arg_14]
		add	[esp+14h+arg_4], esi
		add	[esp+14h+arg_10], esi
		sub	eax, esi
		mov	[esp+14h+arg_14], eax
		cmp	eax, esi
		jnb	loc_1000D3B7

loc_1000D447:				; CODE XREF: sub_1000D320+8Ej
		test	eax, eax
		jz	short loc_1000D4A8
		mov	eax, [edi+4]
		mov	ecx, [edi]
		push	esi
		push	esi
		lea	ebp, [edi+8]
		push	ebp
		push	esi
		lea	edx, [esp+24h+arg_C]
		push	edx
		lea	ebx, [edi+18h]
		push	ebx
		push	eax
		call	ecx
		mov	ecx, [edi+28h]
		mov	[esp+30h+var_4], eax
		add	esp, 1Ch
		mov	eax, esi
		mov	edx, ebp
		call	sub_1000D2C0
		cmp	[esp+14h+var_4], 0
		jz	short loc_1000D486

loc_1000D47D:				; CODE XREF: sub_1000D320+EBj
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000D486:				; CODE XREF: sub_1000D320+15Bj
		mov	edx, [esp+14h+arg_4]
		mov	esi, [esp+14h+arg_14]
		mov	eax, [esp+14h+arg_10]
		push	edx
		mov	edx, esi
		mov	ecx, ebx
		call	sub_1000D300
		mov	eax, [esp+18h+arg_8]
		add	esp, 4
		mov	[edi+2Ch], esi
		add	[eax], esi

loc_1000D4A8:				; CODE XREF: sub_1000D320+86j
					; sub_1000D320+129j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
sub_1000D320	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000D4B0(int,	int, int, size_t Size)
sub_1000D4B0	proc near		; CODE XREF: sub_1000F6D0+D7p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	esi
		push	30h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1000D4C3
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000D4C3:				; CODE XREF: sub_1000D4B0+Fj
		mov	eax, [esp+4+Size]
		mov	ecx, [esp+4+arg_8]
		mov	edx, [esp+4+arg_4]
		push	eax		; Size
		mov	eax, [esp+8+arg_0]
		push	ecx		; int
		push	edx		; int
		push	eax		; int
		push	esi		; int
		call	sub_1000D210
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000D4F9
		push	30h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		push	esi
		call	PORT_Free_Util
		add	esp, 10h
		xor	esi, esi

loc_1000D4F9:				; CODE XREF: sub_1000D4B0+32j
		mov	eax, esi
		pop	esi
		retn
sub_1000D4B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D500	proc near		; CODE XREF: sub_1000D530+ACp
					; sub_1000DD80+59p
		xor	eax, eax
		test	esi, esi
		jz	short locret_1000D522
		lea	ecx, [ecx+esi-1]
		lea	ebx, [ebx+0]

loc_1000D510:				; CODE XREF: sub_1000D500+20j
		movzx	edx, byte ptr [eax+edi]
		mov	dl, ds:byte_1003B068[edx]
		mov	[ecx], dl
		inc	eax
		dec	ecx
		cmp	eax, esi
		jb	short loc_1000D510

locret_1000D522:			; CODE XREF: sub_1000D500+4j
		retn
sub_1000D500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D530	proc near		; CODE XREF: sub_1000D970+68p

var_18		= dword	ptr -18h
Dst		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		push	ebp
		mov	ebp, [esp+1Ch+arg_0]
		push	esi
		push	edi
		add	ebp, 10h
		push	ebp
		mov	[esp+28h+var_18], ecx
		mov	esi, edx
		call	sub_10029E60
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jg	short loc_1000D57F
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D57F:				; CODE XREF: sub_1000D530+2Bj
		push	ebx
		lea	ebx, [esp+28h+Dst]
		cmp	edi, esi
		ja	short loc_1000D5B1
		jz	short loc_1000D5A2
		mov	ebx, esi
		sub	ebx, edi
		push	ebx		; Size
		lea	edx, [esp+2Ch+Dst]
		push	0		; Val
		push	edx		; Dst
		call	memset
		add	esp, 0Ch
		lea	ebx, [esp+ebx+28h+Dst]

loc_1000D5A2:				; CODE XREF: sub_1000D530+58j
		push	edi
		push	ebx
		push	ebp
		call	sub_10029ED0
		add	esp, 0Ch
		test	eax, eax
		jns	short loc_1000D5D4

loc_1000D5B1:				; CODE XREF: sub_1000D530+56j
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D5D4:				; CODE XREF: sub_1000D530+7Fj
		mov	ecx, [esp+28h+var_18]
		lea	edi, [esp+28h+Dst]
		call	sub_1000D500
		mov	ecx, [esp+28h+var_4]
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
sub_1000D530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D600	proc near		; CODE XREF: sub_1000D6F0+56p
					; sub_1000D6F0+96p ...

var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		cmp	[esp+18h+arg_4], 0
		push	ebx
		push	ebp
		mov	[esp+20h+var_18], 0
		jbe	short loc_1000D691
		lea	ebp, [edi+20h]

loc_1000D622:				; CODE XREF: sub_1000D600+8Fj
		inc	dword ptr [edi+48h]
		xor	eax, eax
		test	esi, esi
		jz	short loc_1000D646
		lea	ecx, [esp+esi+20h+var_18+3]
		nop

loc_1000D630:				; CODE XREF: sub_1000D600+44j
		mov	edx, [esp+20h+arg_0]
		movzx	edx, byte ptr [eax+edx]
		mov	dl, ds:byte_1003B068[edx]
		mov	[ecx], dl
		inc	eax
		dec	ecx
		cmp	eax, esi
		jb	short loc_1000D630

loc_1000D646:				; CODE XREF: sub_1000D600+29j
		push	esi
		lea	eax, [esp+24h+var_14]
		push	eax
		push	ebp
		call	sub_10029D30
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1000D6A4
		push	ebp
		lea	ebx, [edi+10h]
		push	ebp
		push	ebx
		call	sub_1002CB50
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1000D6A4
		mov	ecx, [edi+30h]
		push	ebx
		push	ecx
		push	edi
		push	ebp
		call	sub_1002D5B0
		add	esp, 10h
		test	eax, eax
		js	short loc_1000D6A4
		mov	eax, [esp+20h+var_18]
		add	[esp+20h+arg_0], esi
		inc	eax
		mov	[esp+20h+var_18], eax
		cmp	eax, [esp+20h+arg_4]
		jb	short loc_1000D622

loc_1000D691:				; CODE XREF: sub_1000D600+1Dj
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+18h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000D6A4:				; CODE XREF: sub_1000D600+57j
					; sub_1000D600+69j ...
		cmp	eax, 0FFFFFFFCh
		jz	short loc_1000D6C8
		cmp	eax, 0FFFFFFFDh
		jz	short loc_1000D6C1
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1000D6BA
		push	0FFFFE001h
		jmp	short loc_1000D6CD
; ---------------------------------------------------------------------------

loc_1000D6BA:				; CODE XREF: sub_1000D600+B1j
		push	0FFFFE013h
		jmp	short loc_1000D6CD
; ---------------------------------------------------------------------------

loc_1000D6C1:				; CODE XREF: sub_1000D600+ACj
		push	0FFFFE002h
		jmp	short loc_1000D6CD
; ---------------------------------------------------------------------------

loc_1000D6C8:				; CODE XREF: sub_1000D600+A7j
		push	0FFFFE005h

loc_1000D6CD:				; CODE XREF: sub_1000D600+B8j
					; sub_1000D600+BFj ...
		call	PORT_SetError_Util
		mov	ecx, [esp+24h+var_4]
		add	esp, 4
		pop	ebp
		pop	ebx
		xor	ecx, esp
		or	eax, 0FFFFFFFFh
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
sub_1000D600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000D6F0	proc near		; CODE XREF: sub_1000DA20+42p
					; sub_1000DB90+86p ...

var_4		= dword	ptr -4
Src		= dword	ptr  4
Size		= dword	ptr  8

		push	ecx
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+Size]
		push	esi
		mov	ebx, eax
		push	edi
		mov	edi, ecx
		lea	eax, ds:0[ebx*8]
		add	[edi+60h], eax
		mov	eax, [edi+44h]
		adc	dword ptr [edi+64h], 0
		test	eax, eax
		jz	short loc_1000D770
		mov	esi, ebp
		sub	esi, eax
		cmp	ebx, esi
		jnb	short loc_1000D71C
		mov	esi, ebx

loc_1000D71C:				; CODE XREF: sub_1000D6F0+28j
		test	esi, esi
		jz	short loc_1000D733
		mov	ecx, [esp+14h+Src]
		push	esi		; Size
		push	ecx		; Src
		lea	edx, [eax+edi+34h]
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_1000D733:				; CODE XREF: sub_1000D6F0+2Ej
		add	[esp+14h+Src], esi
		add	[edi+44h], esi
		sub	ebx, esi
		jz	short loc_1000D7B8
		lea	eax, [edi+34h]
		push	1
		push	eax
		mov	esi, ebp
		call	sub_1000D600
		push	ebp		; Size
		mov	esi, eax
		lea	eax, [edi+34h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 14h
		mov	dword ptr [edi+44h], 0
		test	esi, esi
		jz	short loc_1000D770

loc_1000D767:				; CODE XREF: sub_1000D6F0+A0j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000D770:				; CODE XREF: sub_1000D6F0+20j
					; sub_1000D6F0+75j
		xor	edx, edx
		mov	eax, ebx
		div	ebp
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jz	short loc_1000D79F
		push	eax
		mov	eax, [esp+18h+Src]
		push	eax
		mov	esi, ebp
		call	sub_1000D600
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000D767
		mov	eax, [esp+14h+var_4]
		imul	eax, ebp
		add	[esp+14h+Src], eax
		sub	ebx, eax

loc_1000D79F:				; CODE XREF: sub_1000D6F0+8Cj
		test	ebx, ebx
		jz	short loc_1000D7B8
		mov	ecx, [esp+14h+Src]
		push	ebx		; Size
		push	ecx		; Src
		lea	edx, [edi+34h]
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	[edi+44h], ebx

loc_1000D7B8:				; CODE XREF: sub_1000D6F0+4Cj
					; sub_1000D6F0+B1j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
sub_1000D6F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D7C0	proc near		; CODE XREF: sub_1000D970+25p
					; sub_1000DA20:loc_1000DA76p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4

		sub	esp, 20h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+20h+var_4], eax
		mov	eax, [esi+54h]
		mov	ecx, [esi+58h]
		mov	[esi+50h], ecx
		mov	[esi+4Ch], eax
		mov	dl, [esi+67h]
		mov	[esi+54h], dl
		mov	al, [esi+66h]
		mov	[esi+55h], al
		mov	eax, [esi+60h]
		mov	edx, [esi+64h]
		push	ebx
		mov	cl, 28h
		call	sub_10037470
		mov	[esi+56h], al
		mov	eax, [esi+60h]
		mov	edx, [esi+64h]
		mov	cl, 20h
		call	sub_10037470
		mov	[esi+57h], al
		mov	ecx, [esi+60h]
		mov	edx, [esi+64h]
		shrd	ecx, edx, 18h
		mov	[esi+58h], cl
		mov	eax, [esi+60h]
		mov	ecx, [esi+64h]
		shrd	eax, ecx, 10h
		mov	[esi+59h], al
		mov	eax, [esi+64h]
		shr	edx, 18h
		mov	edx, [esi+60h]
		shrd	edx, eax, 8
		mov	[esi+5Ah], dl
		shr	ecx, 10h
		mov	cl, [esi+60h]
		mov	[esi+5Bh], cl
		shr	eax, 8
		mov	eax, [esi+44h]
		xor	ebx, ebx
		mov	[esi+60h], ebx
		mov	[esi+64h], ebx
		cmp	eax, ebx
		jz	loc_1000D959
		push	ebp
		mov	edx, edi
		sub	edx, eax
		push	edx		; Size
		lea	eax, [eax+esi+34h]
		push	ebx		; Val
		push	eax		; Dst
		call	memset
		lea	edx, [esi+34h]
		add	esp, 0Ch
		mov	[esp+28h+var_20], edx
		mov	[esp+28h+var_18], 0FFFFFFFFh
		mov	[esp+28h+var_1C], ebx
		lea	ebp, [esi+20h]
		jmp	short loc_1000D884
; ---------------------------------------------------------------------------
		align 10h

loc_1000D880:				; CODE XREF: sub_1000D7C0+12Bj
		mov	edx, [esp+28h+var_20]

loc_1000D884:				; CODE XREF: sub_1000D7C0+BAj
		inc	dword ptr [esi+48h]
		xor	eax, eax
		test	edi, edi
		jz	short loc_1000D8A3
		lea	ecx, [esp+edi+28h+var_18+3]

loc_1000D891:				; CODE XREF: sub_1000D7C0+E1j
		movzx	ebx, byte ptr [eax+edx]
		mov	bl, ds:byte_1003B068[ebx]
		mov	[ecx], bl
		inc	eax
		dec	ecx
		cmp	eax, edi
		jb	short loc_1000D891

loc_1000D8A3:				; CODE XREF: sub_1000D7C0+CBj
		push	edi
		lea	ecx, [esp+2Ch+var_14]
		push	ecx
		push	ebp
		call	sub_10029D30
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1000D8F7
		push	ebp
		lea	ebx, [esi+10h]
		push	ebp
		push	ebx
		call	sub_1002CB50
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1000D8F7
		mov	edx, [esi+30h]
		push	ebx
		push	edx
		push	esi
		push	ebp
		call	sub_1002D5B0
		add	esp, 10h
		test	eax, eax
		js	short loc_1000D8F7
		mov	eax, [esp+28h+var_1C]
		add	[esp+28h+var_20], edi
		inc	eax
		mov	[esp+28h+var_1C], eax
		cmp	eax, 1
		jb	short loc_1000D880
		mov	[esp+28h+var_18], 0
		jmp	short loc_1000D928
; ---------------------------------------------------------------------------

loc_1000D8F7:				; CODE XREF: sub_1000D7C0+F4j
					; sub_1000D7C0+106j ...
		cmp	eax, 0FFFFFFFCh
		jz	short loc_1000D91B
		cmp	eax, 0FFFFFFFDh
		jz	short loc_1000D914
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1000D90D
		push	0FFFFE001h
		jmp	short loc_1000D920
; ---------------------------------------------------------------------------

loc_1000D90D:				; CODE XREF: sub_1000D7C0+144j
		push	0FFFFE013h
		jmp	short loc_1000D920
; ---------------------------------------------------------------------------

loc_1000D914:				; CODE XREF: sub_1000D7C0+13Fj
		push	0FFFFE002h
		jmp	short loc_1000D920
; ---------------------------------------------------------------------------

loc_1000D91B:				; CODE XREF: sub_1000D7C0+13Aj
		push	0FFFFE005h

loc_1000D920:				; CODE XREF: sub_1000D7C0+14Bj
					; sub_1000D7C0+152j ...
		call	PORT_SetError_Util
		add	esp, 4

loc_1000D928:				; CODE XREF: sub_1000D7C0+135j
		push	edi		; Size
		lea	eax, [esi+34h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[esp+28h+var_18], 0
		mov	dword ptr [esi+44h], 0
		pop	ebp
		jz	short loc_1000D959
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+20h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000D959:				; CODE XREF: sub_1000D7C0+8Aj
					; sub_1000D7C0+184j
		mov	ecx, [esp+24h+var_4]
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 20h
		retn
sub_1000D7C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000D970(int,	size_t Size, int)
sub_1000D970	proc near		; CODE XREF: sub_1000DAF0+5Fp
					; sub_1000DE70+F4p

var_1C		= dword	ptr -1Ch
Dst		= dword	ptr -18h
Src		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		mov	eax, [esp+1Ch+arg_0]
		push	ebp
		mov	ebp, [esp+20h+arg_8]
		push	esi
		push	edi
		mov	edi, ebp
		mov	esi, ebx
		mov	[esp+28h+Dst], eax
		mov	[esp+28h+var_1C], ecx
		call	sub_1000D7C0
		test	eax, eax
		jz	short loc_1000D9B3

loc_1000D99E:				; CODE XREF: sub_1000D970+5Fj
					; sub_1000D970+72j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+1Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1000D9B3:				; CODE XREF: sub_1000D970+2Cj
		xor	edx, edx
		mov	eax, 10h
		div	ebp
		lea	edx, [ebx+4Ch]
		mov	esi, ebp
		mov	edi, ebx
		push	eax
		push	edx
		call	sub_1000D600
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000D99E
		push	ebx
		mov	edx, ebp
		lea	ecx, [esp+2Ch+Src]
		call	sub_1000D530
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000D99E
		mov	esi, [esp+28h+Size]
		cmp	esi, ebp
		jbe	short loc_1000D9EE
		mov	esi, ebp

loc_1000D9EE:				; CODE XREF: sub_1000D970+7Aj
		mov	ecx, [esp+28h+Dst]
		push	esi		; Size
		lea	eax, [esp+2Ch+Src]
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		mov	edx, [esp+34h+var_1C]
		mov	ecx, [esp+34h+var_4]
		add	esp, 0Ch
		pop	edi
		mov	[edx], esi
		pop	esi
		pop	ebp
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
sub_1000D970	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DA20	proc near		; CODE XREF: sub_1000DE70+152p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, eax
		xor	eax, eax
		xor	ebx, ebx
		mov	[esi+60h], ebx
		mov	[esi+64h], ebx
		mov	[esi+4Ch], eax
		mov	[esi+50h], eax
		mov	[esi+54h], eax
		mov	[esi+58h], eax
		lea	eax, [esi+10h]
		push	eax
		mov	[esi+44h], ebx
		call	sub_10028F40
		add	esp, 4
		mov	[esi+48h], ebx
		cmp	ebp, ebx
		jz	short loc_1000DA7F
		mov	ecx, [esp+10h+arg_0]
		push	edi
		push	ecx
		mov	eax, ebp
		mov	ecx, esi
		call	sub_1000D6F0
		add	esp, 8
		test	eax, eax
		jz	short loc_1000DA76

loc_1000DA6E:				; CODE XREF: sub_1000DA20+5Dj
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000DA76:				; CODE XREF: sub_1000DA20+4Cj
		call	sub_1000D7C0
		test	eax, eax
		jnz	short loc_1000DA6E

loc_1000DA7F:				; CODE XREF: sub_1000DA20+36j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000DA20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DA90	proc near		; DATA XREF: sub_1000F6D0:loc_1000F794o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		lea	eax, [esi+68h]
		push	0		; int
		push	eax		; Dst
		call	sub_1000D290
		push	esi
		call	sub_10028EF0
		lea	ecx, [esi+10h]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esi+20h]
		push	edx
		call	sub_10028EF0
		add	esp, 14h
		cmp	[esp+4+arg_4], 0
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+1Ch], 0
		mov	dword ptr [esi+2Ch], 0
		jz	short loc_1000DAE0
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000DAE0:				; CODE XREF: sub_1000DA90+45j
		pop	esi
		retn
sub_1000DA90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DAF0	proc near		; CODE XREF: sub_1000DB90+A6p
					; sub_1000DC70+89p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebx, eax
		mov	eax, [ebx+98h]
		push	esi
		lea	esi, [eax+7]
		shr	esi, 3
		lea	ebp, ds:0[esi*8]
		sub	ebp, eax
		test	edi, edi
		jnz	short loc_1000DB28
		mov	eax, [esp+0Ch+arg_0]
		push	0FFFFE003h
		mov	[eax], esi
		call	PORT_SetError_Util
		add	esp, 4

loc_1000DB21:				; CODE XREF: sub_1000DAF0+69j
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000DB28:				; CODE XREF: sub_1000DAF0+1Cj
		mov	ecx, [esp+0Ch+arg_0]
		cmp	[esp+0Ch+arg_4], esi
		jnb	short loc_1000DB48
		push	0FFFFE003h
		mov	[ecx], esi
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000DB48:				; CODE XREF: sub_1000DAF0+40j
		mov	edx, [esp+0Ch+arg_8]
		push	edx		; int
		push	esi		; Size
		push	edi		; int
		call	sub_1000D970
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000DB21
		mov	ecx, [esp+0Ch+arg_0]
		cmp	[ecx], eax
		jbe	short loc_1000DB72

loc_1000DB63:				; CODE XREF: sub_1000DAF0+80j
		mov	dl, [ebx+eax+9Ch]
		xor	[eax+edi], dl
		inc	eax
		cmp	eax, [ecx]
		jb	short loc_1000DB63

loc_1000DB72:				; CODE XREF: sub_1000DAF0+71j
		test	ebp, ebp
		jz	short loc_1000DB84
		mov	al, 1
		mov	ecx, ebp
		shl	al, cl
		dec	al
		not	al
		and	[esi+edi-1], al

loc_1000DB84:				; CODE XREF: sub_1000DAF0+84j
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000DAF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000DB90(int,	void *Dst, int,	int, int, int, int)
sub_1000DB90	proc near		; DATA XREF: sub_1000F6D0+B8o

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		mov	ecx, [esp+arg_14]
		push	ebp
		mov	ebp, [esp+4+arg_0]
		mov	eax, [ebp+98h]
		add	eax, 7
		or	edx, 0FFFFFFFFh
		shr	eax, 3
		sub	edx, ecx
		cmp	edx, eax
		jnb	short loc_1000DBC0
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000DBC0:				; CODE XREF: sub_1000DB90+1Cj
		push	edi
		mov	edi, [esp+8+arg_C]
		add	eax, ecx
		cmp	edi, eax
		jnb	short loc_1000DBE4
		mov	ecx, [esp+8+arg_8]
		push	0FFFFE003h
		mov	[ecx], eax
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000DBE4:				; CODE XREF: sub_1000DB90+39j
		mov	edx, [esp+8+arg_18]
		mov	eax, [esp+8+arg_10]
		push	ebx
		mov	ebx, [esp+0Ch+Dst]
		push	esi
		mov	esi, [esp+10h+arg_8]
		push	edx
		push	ecx
		push	eax
		push	edi
		push	esi
		lea	ecx, [ebp+68h]
		push	ebx
		push	ecx
		call	sub_1000D320
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1000DC56
		mov	edx, [esp+10h+arg_18]
		mov	eax, [esi]
		push	edx
		push	ebx
		mov	ecx, ebp
		call	sub_1000D6F0
		add	esp, 8
		test	eax, eax
		mov	eax, [esi]
		jnz	short loc_1000DC44
		mov	ecx, [esp+10h+arg_18]
		sub	edi, eax
		push	ecx
		push	edi
		lea	edx, [esp+18h+arg_0]
		lea	edi, [eax+ebx]
		push	edx
		mov	eax, ebp
		call	sub_1000DAF0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000DC5E
		mov	eax, [esi]

loc_1000DC44:				; CODE XREF: sub_1000DB90+92j
		push	eax		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi], 0

loc_1000DC56:				; CODE XREF: sub_1000DB90+7Aj
		pop	esi
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000DC5E:				; CODE XREF: sub_1000DB90+B0j
		mov	ecx, [esp+10h+arg_0]
		add	[esi], ecx
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
sub_1000DB90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DC70	proc near		; DATA XREF: sub_1000F6D0+BFo

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 24h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		mov	eax, [esp+24h+arg_4]
		mov	ecx, [esp+24h+arg_8]
		push	ebx
		mov	ebx, [esp+28h+arg_14]
		push	ebp
		mov	ebp, [esp+2Ch+arg_0]
		push	esi
		mov	esi, [ebp+98h]
		add	esi, 7
		mov	[esp+30h+var_24], eax
		mov	eax, [esp+30h+arg_10]
		shr	esi, 3
		mov	[esp+30h+var_1C], ecx
		mov	[esp+30h+var_20], eax
		cmp	ebx, esi
		jnb	short loc_1000DCD3
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+24h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1000DCD3:				; CODE XREF: sub_1000DC70+3Fj
		push	edi
		mov	edi, [esp+34h+arg_18]
		push	edi
		sub	ebx, esi
		push	eax
		mov	eax, ebx
		mov	ecx, ebp
		call	sub_1000D6F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000DD2A
		push	edi
		push	edi
		lea	edx, [esp+3Ch+var_18]
		push	edx
		lea	edi, [esp+40h+var_14]
		mov	eax, ebp
		call	sub_1000DAF0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000DD2A
		push	esi
		mov	esi, [esp+38h+var_20]
		lea	eax, [ebx+esi]
		push	eax
		mov	ecx, edi
		push	ecx
		call	NSS_SecureMemcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000DD40
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000DD2A:				; CODE XREF: sub_1000DC70+7Aj
					; sub_1000DC70+93j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+24h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1000DD40:				; CODE XREF: sub_1000DC70+ABj
		mov	edx, [esp+34h+arg_18]
		mov	eax, [esp+34h+arg_C]
		mov	ecx, [esp+34h+var_1C]
		push	edx
		mov	edx, [esp+38h+var_24]
		push	ebx
		push	esi
		push	eax
		push	ecx
		push	edx
		add	ebp, 68h
		push	ebp
		call	sub_1000D320
		mov	ecx, [esp+50h+var_4]
		add	esp, 1Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
sub_1000DC70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DD80	proc near		; CODE XREF: sub_1000DE70+7Ep

var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 14h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+14h+var_4], eax
		push	ebp
		push	esi
		xor	ebp, ebp
		push	edi
		push	ebx
		mov	esi, ecx
		mov	[ebx+0Ch], ebp
		mov	[ebx+1Ch], ebp
		mov	[ebx+2Ch], ebp
		call	sub_1002A030
		add	esp, 4
		test	eax, eax
		js	short loc_1000DE03
		lea	edi, [ebx+10h]
		push	edi
		call	sub_1002A030
		add	esp, 4
		test	eax, eax
		js	short loc_1000DE03
		lea	eax, [ebx+20h]
		push	eax
		call	sub_1002A030
		add	esp, 4
		test	eax, eax
		js	short loc_1000DE03
		push	edi
		call	sub_10028F40
		mov	edi, [esp+24h+arg_0]
		lea	ecx, [esp+24h+var_14]
		call	sub_1000D500
		push	esi
		lea	ecx, [esp+28h+var_14]
		push	ecx
		push	ebx
		call	sub_10029D30
		add	esp, 10h
		test	eax, eax
		js	short loc_1000DE03
		cmp	esi, 10h
		jz	short loc_1000DE3C
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000DE03:				; CODE XREF: sub_1000DD80+29j
					; sub_1000DD80+39j ...
		push	ebx
		call	sub_10028EF0
		lea	edx, [ebx+10h]
		push	edx
		call	sub_10028EF0
		lea	eax, [ebx+20h]
		push	eax
		call	sub_10028EF0
		add	esp, 0Ch
		pop	edi
		pop	esi
		mov	[ebx+0Ch], ebp
		mov	[ebx+1Ch], ebp
		mov	[ebx+2Ch], ebp
		or	eax, 0FFFFFFFFh
		pop	ebp
		mov	ecx, [esp+14h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000DE3C:				; CODE XREF: sub_1000DD80+74j
		mov	ecx, [esp+20h+var_4]
		xor	eax, eax
		mov	[ebx+60h], ebp
		mov	[ebx+64h], ebp
		mov	[ebx+44h], ebp
		mov	[ebx+48h], ebp
		pop	edi
		mov	dword ptr [ebx+30h], offset dword_1003B168
		mov	[ebx+4Ch], eax
		pop	esi
		mov	[ebx+50h], eax
		pop	ebp
		mov	[ebx+54h], eax
		xor	ecx, esp
		mov	[ebx+58h], eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14h
		retn
sub_1000DD80	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000DE70(int,	int, int, size_t Size)
sub_1000DE70	proc near		; CODE XREF: sub_1000F6D0+A5p

var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
Dst		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Size		= dword	ptr  10h

		sub	esp, 34h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		mov	eax, [esp+34h+arg_4]
		push	ebp
		mov	ebp, [esp+38h+arg_8]
		push	esi
		mov	esi, [esp+3Ch+Size]
		push	edi
		mov	edi, [esp+40h+arg_0]
		mov	[esp+40h+var_2C], edi
		mov	[esp+40h+var_34], eax
		cmp	esi, 10h
		ja	loc_1000E032
		push	ebx
		push	0B0h
		call	PORT_ZAlloc_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	loc_1000E008
		push	esi		; Size
		lea	ecx, [esp+48h+Dst]
		push	0		; Val
		push	ecx		; Dst
		call	memset
		push	esi
		push	esi
		lea	edx, [esp+58h+Dst]
		push	edx
		push	esi
		lea	eax, [esp+60h+var_30]
		push	eax
		mov	ecx, edx
		push	ecx
		push	edi
		call	[esp+6Ch+var_34]
		add	esp, 28h
		test	eax, eax
		jnz	loc_1000DFFF
		lea	edx, [esp+44h+Dst]
		push	edx
		mov	ecx, esi
		call	sub_1000DD80
		add	esp, 4
		test	eax, eax
		jnz	loc_1000DFFF
		mov	[esp+44h+var_28], 20h
		mov	[esp+44h+var_24], eax
		mov	[esp+44h+var_20], eax
		mov	[esp+44h+var_1C], eax
		mov	[esp+44h+var_18], eax
		cmp	esi, 10h
		jnz	short loc_1000DF3F
		cmp	dword ptr [ebp+4], 0Ch
		jnz	short loc_1000DF3F
		mov	eax, [ebp+0]
		mov	ecx, [eax]
		mov	[esp+44h+var_24], ecx
		mov	edx, [eax+4]
		mov	[esp+44h+var_20], edx
		mov	eax, [eax+8]
		mov	[esp+44h+var_1C], eax
		mov	byte ptr [esp+44h+var_18+3], 1
		jmp	short loc_1000DF70
; ---------------------------------------------------------------------------

loc_1000DF3F:				; CODE XREF: sub_1000DE70+A9j
					; sub_1000DE70+AFj
		mov	ecx, [ebp+0]
		mov	eax, [ebp+4]
		push	esi
		push	ecx
		mov	ecx, ebx
		call	sub_1000D6F0
		add	esp, 8
		test	eax, eax
		jnz	loc_1000DFD9
		push	esi		; int
		lea	edx, [esp+48h+var_24]
		push	esi		; Size
		push	edx		; int
		lea	ecx, [esp+50h+var_30]
		call	sub_1000D970
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000DFD9

loc_1000DF70:				; CODE XREF: sub_1000DE70+CDj
		mov	ecx, [esp+44h+var_34]
		mov	edx, [esp+44h+var_2C]
		push	esi		; Size
		lea	eax, [esp+48h+var_28]
		push	eax		; int
		push	ecx		; int
		push	edx		; int
		lea	edi, [ebx+68h]
		push	edi		; int
		call	sub_1000D210
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000DFD9
		mov	eax, [ebp+10h]
		push	esi
		push	esi
		mov	[ebx+98h], eax
		lea	eax, [ebx+9Ch]
		push	eax
		push	esi
		lea	ecx, [esp+54h+var_30]
		push	ecx
		push	eax
		push	edi
		call	sub_1000D320
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1000DFCE
		mov	edx, [ebp+0Ch]
		mov	eax, [ebp+8]
		push	edx
		push	eax
		mov	eax, esi
		mov	ecx, ebx
		call	sub_1000DA20
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E01D

loc_1000DFCE:				; CODE XREF: sub_1000DE70+144j
		push	0		; int
		push	edi		; Dst
		call	sub_1000D290
		add	esp, 8

loc_1000DFD9:				; CODE XREF: sub_1000DE70+E3j
					; sub_1000DE70+FEj ...
		push	ebx
		call	sub_10028EF0
		lea	ecx, [ebx+10h]
		push	ecx
		call	sub_10028EF0
		lea	edx, [ebx+20h]
		push	edx
		call	sub_10028EF0
		add	esp, 0Ch
		xor	eax, eax
		mov	[ebx+0Ch], eax
		mov	[ebx+1Ch], eax
		mov	[ebx+2Ch], eax

loc_1000DFFF:				; CODE XREF: sub_1000DE70+71j
					; sub_1000DE70+88j
		push	ebx
		call	PORT_Free_Util
		add	esp, 4

loc_1000E008:				; CODE XREF: sub_1000DE70+44j
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		mov	ecx, [esp+34h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1000E01D:				; CODE XREF: sub_1000DE70+15Cj
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+34h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1000E032:				; CODE XREF: sub_1000DE70+2Cj
		push	0FFFFE001h
		call	PORT_SetError_Util
		mov	ecx, [esp+44h+var_4]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
sub_1000DE70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E060(int,	int, int, size_t Size, int, int, int, int, int,	char)
sub_1000E060	proc near		; CODE XREF: sub_1000E5F0+41p
					; sub_1000E640+41p

var_221		= byte ptr -221h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= byte ptr -214h
var_213		= byte ptr -213h
var_212		= byte ptr -212h
var_211		= byte ptr -211h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= dword	ptr -204h
var_200		= dword	ptr -200h
var_1FC		= dword	ptr -1FCh
var_1F8		= dword	ptr -1F8h
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
Src		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
Dst		= byte ptr -1C4h
var_145		= byte ptr -145h
var_144		= byte ptr -144h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= byte ptr -0F8h
var_F7		= byte ptr -0F7h
var_84		= byte ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Size		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= byte ptr  28h

		sub	esp, 224h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+224h+var_4], eax
		mov	eax, [esp+224h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+22Ch+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+234h+arg_14]
		mov	[esp+234h+var_1D8], eax
		mov	eax, [esp+234h+arg_10]
		mov	[esp+234h+var_1E4], ecx
		mov	ecx, [esp+234h+arg_18]
		mov	[esp+234h+Src],	edx
		mov	edx, [ebp+4]
		mov	[esp+234h+var_20C], eax
		mov	[esp+234h+var_1F4], edi
		mov	[esp+234h+var_204], ecx
		call	edx
		mov	esi, [ebp+1Ch]
		xor	edx, edx
		cmp	esi, 40h
		setnz	dl
		xor	ecx, ecx
		cmp	dword ptr [ebp+20h], 2
		mov	ebx, eax
		setz	cl
		mov	eax, [ebp+0]
		mov	[esp+234h+var_208], eax
		lea	edx, ds:8[edx*8]
		mov	[esp+234h+var_200], edx
		mov	[esp+234h+var_1E0], ebx
		lea	ecx, ds:28h[ecx*8]
		mov	[esp+234h+var_1DC], ecx
		xor	ecx, ecx
		cmp	[esp+234h+arg_24], cl
		setz	cl
		lea	ecx, ds:2[ecx*4]
		mov	[esp+234h+var_1FC], ecx
		mov	ecx, edi
		sub	ecx, eax
		mov	eax, [esp+234h+arg_20]
		add	edx, ecx
		add	edx, esi
		lea	eax, [edx+eax-1]
		xor	edx, edx
		div	esi
		add	ecx, [esp+234h+arg_1C]
		xor	edx, edx
		mov	edi, eax
		mov	eax, ecx
		div	esi
		mov	[esp+234h+var_1F0], eax
		mov	eax, [esp+234h+var_200]
		mov	[esp+234h+var_1E8], edx
		xor	edx, edx
		add	eax, ecx
		div	esi
		xor	edx, edx
		mov	[esp+234h+var_1F8], eax
		xor	eax, eax
		cmp	[esp+234h+arg_24], al
		mov	[esp+234h+var_210], eax
		setnz	dl
		mov	[esp+234h+var_21C], eax
		mov	eax, [esp+234h+var_1FC]
		add	edx, eax
		cmp	edi, edx
		jbe	short loc_1000E171
		sub	edi, eax
		mov	eax, edi
		mov	[esp+234h+var_210], eax
		imul	eax, esi
		mov	[esp+234h+var_21C], eax

loc_1000E171:				; CODE XREF: sub_1000E060+100j
		mov	eax, [ebp+10h]
		lea	edi, ds:0[ecx*8]
		push	ebx
		mov	[esp+238h+var_220], edi
		call	eax
		add	esp, 4
		cmp	[esp+234h+arg_24], 0
		jnz	short loc_1000E1DF
		push	esi		; Size
		lea	edx, [esp+238h+Dst]
		lea	ecx, [edi+esi*8]
		push	0		; Val
		push	edx		; Dst
		mov	[esp+240h+var_220], ecx
		call	memset
		mov	eax, [esp+240h+Size]
		mov	ecx, [esp+240h+Src]
		push	eax		; Size
		push	ecx		; Src
		lea	edx, [esp+248h+Dst]
		push	edx		; Dst
		call	memcpy
		add	esp, 18h
		xor	eax, eax
		test	esi, esi
		jz	short loc_1000E1D0

loc_1000E1C6:				; CODE XREF: sub_1000E060+16Ej
		xor	[esp+eax+234h+Dst], 36h
		inc	eax
		cmp	eax, esi
		jb	short loc_1000E1C6

loc_1000E1D0:				; CODE XREF: sub_1000E060+164j
		mov	ecx, [ebp+14h]
		push	esi
		lea	eax, [esp+238h+Dst]
		push	eax
		push	ebx
		call	ecx
		add	esp, 0Ch

loc_1000E1DF:				; CODE XREF: sub_1000E060+12Dj
		xor	eax, eax
		xor	ecx, ecx
		cmp	[esp+234h+var_200], 10h
		mov	[esp+234h+var_1D4], eax
		mov	[esp+234h+var_1D0], eax
		mov	[esp+234h+var_1CC], eax
		mov	[esp+234h+var_1C8], eax
		jnz	short loc_1000E1FD
		lea	ecx, [eax+8]

loc_1000E1FD:				; CODE XREF: sub_1000E060+198j
		cmp	dword ptr [ebp+20h], 2
		jnz	short loc_1000E22B
		lea	edx, [esp+ecx+234h+var_1D4]
		xor	eax, eax
		xor	edi, edi
		mov	[esp+234h+var_218], edx
		nop

loc_1000E210:				; CODE XREF: sub_1000E060+1C7j
		mov	edx, [esp+234h+var_220]
		mov	ecx, edi
		shr	edx, cl
		mov	ecx, [esp+234h+var_218]
		add	edi, 8
		inc	eax
		mov	[ecx+eax-1], dl
		cmp	edi, 20h
		jb	short loc_1000E210
		jmp	short loc_1000E24E
; ---------------------------------------------------------------------------

loc_1000E22B:				; CODE XREF: sub_1000E060+1A1j
		xor	edi, edi
		lea	eax, [esp+ecx+234h+var_1D0]

loc_1000E231:				; CODE XREF: sub_1000E060+1ECj
		mov	edx, [esp+234h+var_220]
		mov	ecx, 3
		sub	ecx, edi
		add	ecx, ecx
		add	ecx, ecx
		add	ecx, ecx
		shr	edx, cl
		inc	edi
		mov	[eax+edi-1], dl
		cmp	edi, 4
		jb	short loc_1000E231

loc_1000E24E:				; CODE XREF: sub_1000E060+1C9j
		cmp	[esp+234h+var_21C], 0
		jbe	loc_1000E373
		cmp	[esp+234h+arg_24], 0
		mov	eax, [esp+234h+var_20C]
		jz	loc_1000E2F8
		mov	edi, [esp+234h+var_1F4]
		mov	ecx, [ebp+14h]
		push	esi
		push	eax
		push	ebx
		sub	edi, esi
		call	ecx
		mov	edx, [esp+240h+var_20C]
		push	edi		; Size
		add	edx, esi
		push	edx		; Src
		lea	eax, [esp+248h+var_104]
		push	eax		; Dst
		call	memcpy
		mov	edx, [esp+24Ch+var_204]
		mov	ecx, esi
		sub	ecx, edi
		push	ecx		; Size
		push	edx		; Src
		lea	eax, [esp+edi+254h+var_104]
		push	eax		; Dst
		call	memcpy
		mov	edx, [ebp+14h]
		push	esi
		lea	ecx, [esp+25Ch+var_104]
		push	ecx
		push	ebx
		call	edx
		mov	eax, [esp+264h+var_21C]
		xor	edx, edx
		div	esi
		add	esp, 30h
		lea	ecx, [eax-1]
		cmp	ecx, 1
		jbe	loc_1000E373
		mov	eax, [esp+234h+var_204]
		sub	eax, edi
		add	eax, esi
		mov	[esp+234h+var_220], eax
		lea	edi, [ecx-1]
		jmp	short loc_1000E2E4
; ---------------------------------------------------------------------------
		align 10h

loc_1000E2E0:				; CODE XREF: sub_1000E060+294j
		mov	eax, [esp+234h+var_220]

loc_1000E2E4:				; CODE XREF: sub_1000E060+27Aj
		push	esi
		push	eax
		mov	eax, [ebp+14h]
		push	ebx
		call	eax
		add	[esp+240h+var_220], esi
		add	esp, 0Ch
		dec	edi
		jnz	short loc_1000E2E0
		jmp	short loc_1000E373
; ---------------------------------------------------------------------------

loc_1000E2F8:				; CODE XREF: sub_1000E060+205j
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	edi, [esp+234h+var_204]
		mov	[esp+234h+var_104], ecx
		mov	ecx, [eax+8]
		mov	[esp+234h+var_100], edx
		mov	dl, [eax+0Ch]
		lea	eax, [esi-0Dh]
		push	eax		; Size
		mov	[esp+238h+var_FC], ecx
		lea	ecx, [esp+238h+var_F7]
		push	edi		; Src
		push	ecx		; Dst
		mov	[esp+240h+var_F8], dl
		call	memcpy
		mov	eax, [ebp+14h]
		push	esi
		lea	edx, [esp+244h+var_104]
		push	edx
		push	ebx
		call	eax
		mov	eax, [esp+24Ch+var_21C]
		xor	edx, edx
		div	esi
		add	esp, 18h
		cmp	eax, 1
		jbe	short loc_1000E373
		dec	eax
		lea	edi, [edi+esi-0Dh]
		mov	[esp+234h+var_218], eax
		lea	ecx, [ecx+0]

loc_1000E360:				; CODE XREF: sub_1000E060+311j
		mov	ecx, [ebp+14h]
		push	esi
		push	edi
		push	ebx
		call	ecx
		add	esp, 0Ch
		add	edi, esi
		dec	[esp+234h+var_218]
		jnz	short loc_1000E360

loc_1000E373:				; CODE XREF: sub_1000E060+1F3j
					; sub_1000E060+265j ...
		push	40h		; Size
		lea	edx, [esp+238h+var_144]
		push	0		; Val
		push	edx		; Dst
		call	memset
		mov	eax, [esp+240h+var_210]
		mov	ecx, [esp+240h+var_1FC]
		add	ecx, eax
		add	esp, 0Ch
		mov	[esp+234h+var_218], eax
		mov	[esp+234h+var_210], ecx
		cmp	eax, ecx
		ja	loc_1000E51A
		movzx	edx, byte ptr [esp+234h+var_1F0]
		movzx	eax, byte ptr [esp+234h+var_1F8]
		mov	[esp+234h+var_1F0], edx
		mov	[esp+234h+var_1F8], eax

loc_1000E3B3:				; CODE XREF: sub_1000E060+4B4j
		movzx	edi, byte ptr [esp+234h+var_218]
		mov	eax, [esp+234h+var_1F0]
		mov	ecx, [esp+234h+var_1F8]
		xor	eax, edi
		xor	ecx, edi
		dec	eax
		dec	ecx
		sar	eax, 1Fh
		sar	ecx, 1Fh
		mov	[esp+234h+var_213], al
		mov	[esp+234h+var_221], cl
		test	esi, esi
		jz	loc_1000E4B8
		mov	edi, [esp+234h+var_1E8]
		not	cl
		mov	[esp+234h+var_211], cl
		or	cl, al
		mov	[esp+234h+var_214], cl
		mov	ecx, esi
		sub	ecx, [esp+234h+var_200]
		neg	edi
		mov	[esp+234h+var_1FC], ecx
		mov	ecx, [esp+234h+var_200]
		sub	ecx, esi
		lea	edx, [esp+ecx+234h+var_1D4]
		mov	[esp+234h+var_220], edx
		jmp	short loc_1000E414
; ---------------------------------------------------------------------------
		jmp	short loc_1000E410
; ---------------------------------------------------------------------------
		align 10h

loc_1000E410:				; CODE XREF: sub_1000E060+3A8j
					; sub_1000E060+44Ej
		mov	al, [esp+234h+var_213]

loc_1000E414:				; CODE XREF: sub_1000E060+3A6j
		mov	ebx, [esp+234h+var_21C]
		mov	ecx, edi
		lea	edx, [edi-1]
		not	ecx
		not	edx
		sar	ecx, 1Fh
		sar	edx, 1Fh
		and	cl, al
		and	dl, al
		mov	eax, [esp+234h+var_1F4]
		mov	[esp+234h+var_212], 0
		cmp	ebx, eax
		jnb	short loc_1000E441
		mov	eax, [esp+234h+var_20C]
		mov	bl, [eax+ebx]
		jmp	short loc_1000E465
; ---------------------------------------------------------------------------

loc_1000E441:				; CODE XREF: sub_1000E060+3D6j
		mov	ebx, [esp+234h+arg_20]
		add	eax, ebx
		cmp	[esp+234h+var_21C], eax
		jnb	short loc_1000E461
		mov	eax, [esp+234h+var_204]
		sub	eax, [esp+234h+var_1F4]
		mov	ebx, [esp+234h+var_21C]
		mov	bl, [eax+ebx]
		jmp	short loc_1000E465
; ---------------------------------------------------------------------------

loc_1000E461:				; CODE XREF: sub_1000E060+3EEj
		mov	bl, [esp+234h+var_212]

loc_1000E465:				; CODE XREF: sub_1000E060+3DFj
					; sub_1000E060+3FFj
		inc	[esp+234h+var_21C]
		mov	al, cl
		not	al
		and	al, bl
		and	cl, 80h
		or	al, cl
		mov	ecx, [esp+234h+var_1E8]
		not	dl
		and	al, dl
		and	al, [esp+234h+var_214]
		lea	edx, [edi+ecx]
		cmp	edx, [esp+234h+var_1FC]
		jb	short loc_1000E49B
		mov	dl, [esp+234h+var_211]
		and	dl, al
		mov	eax, [esp+234h+var_220]
		mov	al, [eax]
		and	al, [esp+234h+var_221]
		or	al, dl

loc_1000E49B:				; CODE XREF: sub_1000E060+427j
		inc	[esp+234h+var_220]
		lea	edx, [esp+ecx+234h+var_84]
		mov	[edx+edi], al
		inc	edi
		add	ecx, edi
		cmp	ecx, esi
		jb	loc_1000E410
		mov	ebx, [esp+234h+var_1E0]

loc_1000E4B8:				; CODE XREF: sub_1000E060+376j
		mov	eax, [ebp+14h]
		push	esi
		lea	edx, [esp+238h+var_84]
		push	edx
		push	ebx
		call	eax
		mov	edi, [esp+240h+var_208]
		mov	edx, [ebp+24h]
		push	edi
		push	0
		lea	ecx, [esp+248h+var_84]
		push	ecx
		push	ebx
		call	edx
		add	esp, 1Ch
		xor	eax, eax
		test	edi, edi
		jz	short loc_1000E507
		jmp	short loc_1000E4F0
; ---------------------------------------------------------------------------
		align 10h

loc_1000E4F0:				; CODE XREF: sub_1000E060+485j
					; sub_1000E060+4A5j
		mov	cl, [esp+eax+234h+var_84]
		and	cl, [esp+234h+var_221]
		inc	eax
		or	[esp+eax+234h+var_145],	cl
		cmp	eax, edi
		jb	short loc_1000E4F0

loc_1000E507:				; CODE XREF: sub_1000E060+483j
		mov	eax, [esp+234h+var_218]
		inc	eax
		mov	[esp+234h+var_218], eax
		cmp	eax, [esp+234h+var_210]
		jbe	loc_1000E3B3

loc_1000E51A:				; CODE XREF: sub_1000E060+33Bj
		mov	edx, [ebp+10h]
		push	ebx
		call	edx
		add	esp, 4
		cmp	[esp+234h+arg_24], 0
		jz	short loc_1000E57F
		mov	esi, [esp+234h+var_1DC]
		test	esi, esi
		jz	short loc_1000E545
		push	esi		; Size
		lea	eax, [esp+238h+Dst]
		push	5Ch		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch

loc_1000E545:				; CODE XREF: sub_1000E060+4D3j
		mov	ecx, [esp+234h+Size]
		mov	edx, [esp+234h+Src]
		mov	eax, [ebp+14h]
		push	ecx
		push	edx
		push	ebx
		call	eax
		mov	edx, [ebp+14h]
		push	esi
		lea	ecx, [esp+244h+Dst]
		push	ecx
		push	ebx
		call	edx
		mov	eax, [esp+24Ch+var_208]
		mov	edx, [ebp+14h]
		push	eax
		lea	ecx, [esp+250h+var_144]
		push	ecx
		push	ebx
		call	edx
		add	esp, 24h
		jmp	short loc_1000E5B1
; ---------------------------------------------------------------------------

loc_1000E57F:				; CODE XREF: sub_1000E060+4CBj
		xor	eax, eax
		test	esi, esi
		jz	short loc_1000E58F

loc_1000E585:				; CODE XREF: sub_1000E060+52Dj
		xor	[esp+eax+234h+Dst], 6Ah
		inc	eax
		cmp	eax, esi
		jb	short loc_1000E585

loc_1000E58F:				; CODE XREF: sub_1000E060+523j
		mov	ecx, [ebp+14h]
		push	esi
		lea	eax, [esp+238h+Dst]
		push	eax
		push	ebx
		call	ecx
		mov	edx, [esp+240h+var_208]
		mov	ecx, [ebp+14h]
		push	edx
		lea	eax, [esp+244h+var_144]
		push	eax
		push	ebx
		call	ecx
		add	esp, 18h

loc_1000E5B1:				; CODE XREF: sub_1000E060+51Dj
		mov	edx, [esp+234h+arg_4]
		mov	eax, [esp+234h+var_1E4]
		mov	ecx, [esp+234h+var_1D8]
		push	edx
		mov	edx, [ebp+18h]
		push	eax
		push	ecx
		push	ebx
		call	edx
		mov	eax, [ebp+0Ch]
		push	1
		push	ebx
		call	eax
		mov	ecx, [esp+24Ch+var_4]
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 224h
		retn
sub_1000E060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E5F0(int,	int, int, int, int, size_t Size, int, int, int,	int, int)
sub_1000E5F0	proc near		; DATA XREF: .rdata:100394A4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
Size		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		mov	eax, [esp+arg_C]
		cmp	dword ptr [eax+24h], 0
		jnz	short loc_1000E5FE
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E5FE:				; CODE XREF: sub_1000E5F0+8j
		mov	ecx, [esp+arg_28]
		mov	edx, [esp+arg_24]
		push	0		; char
		push	ecx		; int
		mov	ecx, [esp+8+arg_20]
		push	edx		; int
		mov	edx, [esp+0Ch+arg_1C]
		push	ecx		; int
		mov	ecx, [esp+10h+arg_18]
		push	edx		; int
		mov	edx, [esp+14h+Size]
		push	ecx		; int
		mov	ecx, [esp+18h+arg_0]
		push	edx		; Size
		mov	edx, [esp+1Ch+arg_10]
		push	eax		; int
		mov	eax, [esp+20h+arg_8]
		push	eax		; int
		push	ecx		; int
		mov	ecx, [esp+28h+arg_4]
		call	sub_1000E060
		add	esp, 28h
		retn
sub_1000E5F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E640(int,	int, int, int, int, size_t Size, int, int, int,	int, int)
sub_1000E640	proc near		; DATA XREF: .rdata:100394A8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
Size		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		mov	eax, [esp+arg_C]
		cmp	dword ptr [eax+24h], 0
		jnz	short loc_1000E64E
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E64E:				; CODE XREF: sub_1000E640+8j
		mov	ecx, [esp+arg_28]
		mov	edx, [esp+arg_24]
		push	1		; char
		push	ecx		; int
		mov	ecx, [esp+8+arg_20]
		push	edx		; int
		mov	edx, [esp+0Ch+arg_1C]
		push	ecx		; int
		mov	ecx, [esp+10h+arg_18]
		push	edx		; int
		mov	edx, [esp+14h+Size]
		push	ecx		; int
		mov	ecx, [esp+18h+arg_0]
		push	edx		; Size
		mov	edx, [esp+1Ch+arg_10]
		push	eax		; int
		mov	eax, [esp+20h+arg_8]
		push	eax		; int
		push	ecx		; int
		mov	ecx, [esp+28h+arg_4]
		call	sub_1000E060
		add	esp, 28h
		retn
sub_1000E640	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E690	proc near		; CODE XREF: sub_1000E7B0+1Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		lea	esi, ds:0[edi*4]
		push	esi		; Size
		push	eax		; Src
		lea	ebp, [ebx+2Ch]
		push	ebp		; Dst
		call	memcpy
		mov	ecx, [ebx+4]
		inc	ecx
		imul	ecx, [ebx]
		add	esp, 0Ch
		lea	esi, [esi+ebp-4]
		cmp	edi, ecx
		jnb	loc_1000E7A7
		mov	[esp+10h+var_4], ebp

loc_1000E6C4:				; CODE XREF: sub_1000E690+111j
		xor	edx, edx
		mov	eax, edi
		div	[esp+10h+arg_0]
		mov	ecx, [esi]
		add	esi, 4
		test	edx, edx
		jnz	short loc_1000E731
		ror	ecx, 8
		mov	edx, ecx
		shr	edx, 10h
		mov	ebp, ecx
		shr	ebp, 18h
		movzx	ebp, byte ptr ds:dword_1003BE80[ebp*4]
		and	edx, 0FFh
		movzx	edx, byte ptr ds:dword_1003BE80[edx*4]
		shl	ebp, 8
		or	edx, ebp
		mov	ebp, ecx
		shr	ebp, 8
		and	ebp, 0FFh
		movzx	ebp, byte ptr ds:dword_1003BE80[ebp*4]
		shl	edx, 8
		and	ecx, 0FFh
		movzx	ecx, byte ptr ds:dword_1003BE80[ecx*4]
		or	edx, ebp
		shl	edx, 8
		or	ecx, edx
		xor	ecx, ds:dword_1003E27C[eax*4]
		jmp	short loc_1000E786
; ---------------------------------------------------------------------------

loc_1000E731:				; CODE XREF: sub_1000E690+43j
		cmp	edx, 4
		jnz	short loc_1000E786
		mov	edx, ecx
		shr	edx, 10h
		and	edx, 0FFh
		movzx	eax, byte ptr ds:dword_1003BE80[edx*4]
		mov	edx, ecx
		shr	edx, 18h
		movzx	edx, byte ptr ds:dword_1003BE80[edx*4]
		shl	edx, 8
		or	eax, edx
		mov	edx, ecx
		shr	edx, 8
		and	edx, 0FFh
		movzx	edx, byte ptr ds:dword_1003BE80[edx*4]
		shl	eax, 8
		and	ecx, 0FFh
		movzx	ecx, byte ptr ds:dword_1003BE80[ecx*4]
		or	eax, edx
		shl	eax, 8
		or	ecx, eax

loc_1000E786:				; CODE XREF: sub_1000E690+9Fj
					; sub_1000E690+A4j
		mov	eax, [esp+10h+var_4]
		mov	edx, [eax]
		add	eax, 4
		xor	edx, ecx
		mov	[esp+10h+var_4], eax
		mov	[esi], edx
		mov	eax, [ebx+4]
		inc	eax
		imul	eax, [ebx]
		inc	edi
		cmp	edi, eax
		jb	loc_1000E6C4

loc_1000E7A7:				; CODE XREF: sub_1000E690+2Aj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
sub_1000E690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E7B0	proc near		; CODE XREF: sub_1000EA90+Ap
					; sub_1000F4B0+D0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ecx+4]
		inc	ebx
		imul	ebx, [ecx]
		push	ebp
		mov	ebp, [esp+14h+arg_0]
		mov	[esp+14h+var_8], ebx
		cmp	ebp, 7
		jnz	short loc_1000E7DA
		push	ebp
		mov	ebx, ecx
		call	sub_1000E690
		add	esp, 4
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E7DA:				; CODE XREF: sub_1000E7B0+17j
		push	esi
		push	edi
		lea	esi, ds:0[ebp*4]
		push	esi		; Size
		add	ecx, 2Ch
		push	eax		; Src
		push	ecx		; Dst
		mov	[esp+28h+var_C], ecx
		call	memcpy
		mov	edx, [esp+28h+var_C]
		mov	eax, ebx
		sub	eax, ebp
		add	esp, 0Ch
		mov	edi, ebp
		lea	ecx, [esi+edx-4]
		mov	[esp+1Ch+var_4], eax
		cmp	ebp, eax
		jnb	loc_1000E955
		mov	esi, edx

loc_1000E811:				; CODE XREF: sub_1000E7B0+19Fj
		mov	eax, [ecx]
		ror	eax, 8
		mov	edx, eax
		shr	edx, 10h
		and	edx, 0FFh
		movzx	ebp, byte ptr ds:dword_1003BE80[edx*4]
		mov	edx, eax
		shr	edx, 18h
		movzx	edx, byte ptr ds:dword_1003BE80[edx*4]
		shl	edx, 8
		or	ebp, edx
		mov	edx, eax
		shr	edx, 8
		and	edx, 0FFh
		movzx	edx, byte ptr ds:dword_1003BE80[edx*4]
		shl	ebp, 8
		or	ebp, edx
		and	eax, 0FFh
		movzx	eax, byte ptr ds:dword_1003BE80[eax*4]
		shl	ebp, 8
		or	ebp, eax
		xor	edx, edx
		mov	eax, edi
		div	[esp+1Ch+arg_0]
		add	ecx, 10h
		add	edi, 4
		add	esi, 10h
		xor	ebp, ds:dword_1003E27C[eax*4]
		xor	ebp, [esi-10h]
		mov	[ecx-0Ch], ebp
		mov	edx, [esi-0Ch]
		mov	eax, ebp
		mov	ebp, [esp+1Ch+arg_0]
		xor	edx, eax
		mov	[ecx-8], edx
		mov	eax, edx
		mov	edx, [esi-8]
		xor	edx, eax
		mov	[ecx-4], edx
		mov	eax, edx
		mov	edx, [esi-4]
		xor	edx, eax
		mov	[ecx], edx
		cmp	ebp, 4
		jz	loc_1000E94B	; jumptable 1000E8B9 default case
		lea	eax, [ebp-5]	; switch 4 cases
		cmp	eax, 3
		ja	loc_1000E94B	; jumptable 1000E8B9 default case
		jmp	ds:off_1000EA80[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000E8C0:				; CODE XREF: sub_1000E7B0+109j
					; DATA XREF: .text:off_1000EA80o
		mov	eax, edx	; jumptable 1000E8B9 case 8
		shr	edx, 10h
		and	edx, 0FFh
		movzx	edx, byte ptr ds:dword_1003BE80[edx*4]
		mov	ebx, eax
		shr	ebx, 18h
		movzx	ebx, byte ptr ds:dword_1003BE80[ebx*4]
		shl	ebx, 8
		or	edx, ebx
		mov	ebx, eax
		shr	ebx, 8
		and	ebx, 0FFh
		movzx	ebx, byte ptr ds:dword_1003BE80[ebx*4]
		shl	edx, 8
		or	edx, ebx
		mov	ebx, [esp+1Ch+var_8]
		and	eax, 0FFh
		movzx	eax, byte ptr ds:dword_1003BE80[eax*4]
		shl	edx, 8
		or	edx, eax
		xor	edx, [esi]
		add	ecx, 4
		inc	edi
		mov	[ecx], edx
		add	esi, 4

loc_1000E91E:				; CODE XREF: sub_1000E7B0+109j
					; DATA XREF: .text:off_1000EA80o
		mov	eax, [ecx]	; jumptable 1000E8B9 case 7
		mov	edx, [esi]
		add	ecx, 4
		xor	edx, eax
		inc	edi
		mov	[ecx], edx
		add	esi, 4

loc_1000E92D:				; CODE XREF: sub_1000E7B0+109j
					; DATA XREF: .text:off_1000EA80o
		mov	eax, [ecx]	; jumptable 1000E8B9 case 6
		mov	edx, [esi]
		add	ecx, 4
		xor	edx, eax
		inc	edi
		mov	[ecx], edx
		add	esi, 4

loc_1000E93C:				; CODE XREF: sub_1000E7B0+109j
					; DATA XREF: .text:off_1000EA80o
		mov	eax, [ecx]	; jumptable 1000E8B9 case 5
		mov	edx, [esi]
		add	ecx, 4
		xor	edx, eax
		inc	edi
		mov	[ecx], edx
		add	esi, 4

loc_1000E94B:				; CODE XREF: sub_1000E7B0+F7j
					; sub_1000E7B0+103j
		cmp	edi, [esp+1Ch+var_4] ; jumptable 1000E8B9 default case
		jb	loc_1000E811

loc_1000E955:				; CODE XREF: sub_1000E7B0+59j
		mov	eax, [ecx]
		add	ecx, 4
		ror	eax, 8
		mov	edx, eax
		shr	edx, 10h
		and	edx, 0FFh
		movzx	esi, byte ptr ds:dword_1003BE80[edx*4]
		mov	edx, eax
		shr	edx, 18h
		movzx	edx, byte ptr ds:dword_1003BE80[edx*4]
		shl	edx, 8
		or	esi, edx
		mov	edx, eax
		shr	edx, 8
		and	edx, 0FFh
		movzx	edx, byte ptr ds:dword_1003BE80[edx*4]
		shl	esi, 8
		or	esi, edx
		and	eax, 0FFh
		movzx	eax, byte ptr ds:dword_1003BE80[eax*4]
		shl	esi, 8
		or	esi, eax
		xor	edx, edx
		mov	eax, edi
		div	ebp
		mov	edx, edi
		sub	edx, ebp
		inc	edi
		xor	esi, ds:dword_1003E27C[eax*4]
		mov	eax, [esp+1Ch+var_C]
		xor	esi, [eax+edx*4]
		mov	[ecx], esi
		cmp	ebp, 8
		jnb	short loc_1000E9FB
		cmp	edi, ebx
		jnb	loc_1000EA74
		mov	edx, edi
		sub	edx, ebp
		sub	ebx, edi
		lea	eax, [eax+edx*4]
		mov	esi, ebx
		nop

loc_1000E9E0:				; CODE XREF: sub_1000E7B0+23Fj
		mov	edx, [ecx]
		mov	edi, [eax]
		add	ecx, 4
		xor	edi, edx
		add	eax, 4
		dec	esi
		mov	[ecx], edi
		jnz	short loc_1000E9E0
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E9FB:				; CODE XREF: sub_1000E7B0+21Aj
		cmp	edi, ebx
		jnb	short loc_1000EA74
		mov	edx, edi
		sub	edx, ebp
		lea	ebx, [eax+edx*4]

loc_1000EA06:				; CODE XREF: sub_1000E7B0+2C2j
		xor	edx, edx
		mov	eax, edi
		div	ebp
		mov	esi, [ecx]
		add	ecx, 4
		cmp	edx, 4
		jnz	short loc_1000EA64
		mov	eax, esi
		shr	eax, 10h
		and	eax, 0FFh
		movzx	edx, byte ptr ds:dword_1003BE80[eax*4]
		mov	eax, esi
		shr	eax, 18h
		movzx	eax, byte ptr ds:dword_1003BE80[eax*4]
		shl	eax, 8
		or	edx, eax
		mov	eax, esi
		shr	eax, 8
		and	eax, 0FFh
		movzx	eax, byte ptr ds:dword_1003BE80[eax*4]
		shl	edx, 8
		and	esi, 0FFh
		movzx	esi, byte ptr ds:dword_1003BE80[esi*4]
		or	edx, eax
		shl	edx, 8
		or	esi, edx

loc_1000EA64:				; CODE XREF: sub_1000E7B0+264j
		mov	edx, [ebx]
		xor	edx, esi
		inc	edi
		add	ebx, 4
		mov	[ecx], edx
		cmp	edi, [esp+1Ch+var_8]
		jb	short loc_1000EA06

loc_1000EA74:				; CODE XREF: sub_1000E7B0+21Ej
					; sub_1000E7B0+24Dj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000E7B0	endp

; ---------------------------------------------------------------------------
		align 10h
off_1000EA80	dd offset loc_1000E93C	; DATA XREF: sub_1000E7B0+109r
		dd offset loc_1000E92D	; jump table for switch	statement
		dd offset loc_1000E91E
		dd offset loc_1000E8C0

; =============== S U B	R O U T	I N E =======================================


sub_1000EA90	proc near		; CODE XREF: sub_1000F4B0+FFp

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esi]
		push	eax
		mov	eax, [esp+8+arg_0]
		mov	ecx, esi
		call	sub_1000E7B0
		add	esp, 4
		test	eax, eax
		jz	short loc_1000EAAB
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000EAAB:				; CODE XREF: sub_1000EA90+14j
		mov	ecx, [esi]
		mov	edx, 1
		lea	eax, [esi+ecx*4+2Ch]
		cmp	[esi+4], edx
		jbe	loc_1000EC69
		push	ebx

loc_1000EAC0:				; CODE XREF: sub_1000EA90+1D2j
		movzx	ecx, byte ptr [eax+3]
		mov	ecx, ds:dword_1003DE80[ecx*4]
		movzx	ebx, byte ptr [eax+2]
		xor	ecx, ds:dword_1003DA80[ebx*4]
		movzx	ebx, byte ptr [eax+1]
		xor	ecx, ds:dword_1003D680[ebx*4]
		movzx	ebx, byte ptr [eax]
		xor	ecx, ds:dword_1003D280[ebx*4]
		add	eax, 10h
		mov	[eax-10h], ecx
		movzx	ecx, byte ptr [eax-9]
		mov	ecx, ds:dword_1003DE80[ecx*4]
		movzx	ebx, byte ptr [eax-0Ah]
		xor	ecx, ds:dword_1003DA80[ebx*4]
		movzx	ebx, byte ptr [eax-0Bh]
		xor	ecx, ds:dword_1003D680[ebx*4]
		movzx	ebx, byte ptr [eax-0Ch]
		xor	ecx, ds:dword_1003D280[ebx*4]
		mov	[eax-0Ch], ecx
		movzx	ecx, byte ptr [eax-5]
		mov	ecx, ds:dword_1003DE80[ecx*4]
		movzx	ebx, byte ptr [eax-6]
		xor	ecx, ds:dword_1003DA80[ebx*4]
		movzx	ebx, byte ptr [eax-7]
		xor	ecx, ds:dword_1003D680[ebx*4]
		movzx	ebx, byte ptr [eax-8]
		xor	ecx, ds:dword_1003D280[ebx*4]
		mov	[eax-8], ecx
		movzx	ecx, byte ptr [eax-1]
		movzx	ebx, byte ptr [eax-2]
		mov	ecx, ds:dword_1003DE80[ecx*4]
		xor	ecx, ds:dword_1003DA80[ebx*4]
		movzx	ebx, byte ptr [eax-3]
		xor	ecx, ds:dword_1003D680[ebx*4]
		movzx	ebx, byte ptr [eax-4]
		xor	ecx, ds:dword_1003D280[ebx*4]
		mov	[eax-4], ecx
		cmp	edi, 4
		jle	loc_1000EC5E	; jumptable 1000EB93 default case
		lea	ecx, [edi-5]	; switch 4 cases
		cmp	ecx, 3
		ja	loc_1000EC5E	; jumptable 1000EB93 default case
		jmp	ds:off_1000EC70[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000EB9A:				; CODE XREF: sub_1000EA90+103j
					; DATA XREF: .text:off_1000EC70o
		movzx	ecx, byte ptr [eax+3] ;	jumptable 1000EB93 case	8
		movzx	ebx, byte ptr [eax+2]
		mov	ecx, ds:dword_1003DE80[ecx*4]
		xor	ecx, ds:dword_1003DA80[ebx*4]
		movzx	ebx, byte ptr [eax+1]
		xor	ecx, ds:dword_1003D680[ebx*4]
		movzx	ebx, byte ptr [eax]
		xor	ecx, ds:dword_1003D280[ebx*4]
		add	eax, 4
		mov	[eax-4], ecx

loc_1000EBCB:				; CODE XREF: sub_1000EA90+103j
					; DATA XREF: .text:off_1000EC70o
		movzx	ecx, byte ptr [eax+3] ;	jumptable 1000EB93 case	7
		movzx	ebx, byte ptr [eax+2]
		mov	ecx, ds:dword_1003DE80[ecx*4]
		xor	ecx, ds:dword_1003DA80[ebx*4]
		movzx	ebx, byte ptr [eax+1]
		xor	ecx, ds:dword_1003D680[ebx*4]
		movzx	ebx, byte ptr [eax]
		xor	ecx, ds:dword_1003D280[ebx*4]
		add	eax, 4
		mov	[eax-4], ecx

loc_1000EBFC:				; CODE XREF: sub_1000EA90+103j
					; DATA XREF: .text:off_1000EC70o
		movzx	ecx, byte ptr [eax+3] ;	jumptable 1000EB93 case	6
		movzx	ebx, byte ptr [eax+2]
		mov	ecx, ds:dword_1003DE80[ecx*4]
		xor	ecx, ds:dword_1003DA80[ebx*4]
		movzx	ebx, byte ptr [eax+1]
		xor	ecx, ds:dword_1003D680[ebx*4]
		movzx	ebx, byte ptr [eax]
		xor	ecx, ds:dword_1003D280[ebx*4]
		add	eax, 4
		mov	[eax-4], ecx

loc_1000EC2D:				; CODE XREF: sub_1000EA90+103j
					; DATA XREF: .text:off_1000EC70o
		movzx	ecx, byte ptr [eax+3] ;	jumptable 1000EB93 case	5
		movzx	ebx, byte ptr [eax+2]
		mov	ecx, ds:dword_1003DE80[ecx*4]
		xor	ecx, ds:dword_1003DA80[ebx*4]
		movzx	ebx, byte ptr [eax+1]
		xor	ecx, ds:dword_1003D680[ebx*4]
		movzx	ebx, byte ptr [eax]
		xor	ecx, ds:dword_1003D280[ebx*4]
		add	eax, 4
		mov	[eax-4], ecx

loc_1000EC5E:				; CODE XREF: sub_1000EA90+F1j
					; sub_1000EA90+FDj
		inc	edx		; jumptable 1000EB93 default case
		cmp	edx, [esi+4]
		jb	loc_1000EAC0
		pop	ebx

loc_1000EC69:				; CODE XREF: sub_1000EA90+29j
		xor	eax, eax
		pop	edi
		retn
sub_1000EA90	endp

; ---------------------------------------------------------------------------
		align 10h
off_1000EC70	dd offset loc_1000EC2D	; DATA XREF: sub_1000EA90+103r
		dd offset loc_1000EBFC	; jump table for switch	statement
		dd offset loc_1000EBCB
		dd offset loc_1000EB9A

; =============== S U B	R O U T	I N E =======================================


sub_1000EC80	proc near		; CODE XREF: sub_1000F1B0+36p
					; DATA XREF: sub_1000F1B0+9o ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		mov	ecx, [esp+10h+arg_8]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [ecx+4]
		push	edi
		mov	edi, [esp+20h+arg_0]
		xor	esi, [edi+30h]
		mov	edx, [edi+2Ch]
		xor	edx, [ecx]
		lea	eax, [edi+2Ch]
		mov	edi, [edi+4]
		mov	[esp+20h+var_C], esi
		mov	esi, [ecx+8]
		xor	esi, [eax+8]
		mov	ecx, [ecx+0Ch]
		xor	ecx, [eax+0Ch]
		add	eax, 10h
		mov	[esp+20h+var_10], edx
		mov	[esp+20h+var_8], esi
		cmp	edi, 1
		jbe	loc_1000EDBB
		dec	edi
		mov	[esp+20h+arg_0], edi
		lea	esp, [esp+0]

loc_1000ECD0:				; CODE XREF: sub_1000EC80+135j
		movzx	edi, byte ptr [esp+20h+var_10+3]
		mov	ebx, ecx
		shr	ebx, 10h
		movzx	esi, bl
		mov	esi, ds:dword_1003BA80[esi*4]
		xor	esi, ds:dword_1003BE80[edi*4]
		movzx	edi, byte ptr [esp+20h+var_8+1]
		xor	esi, ds:dword_1003B680[edi*4]
		movzx	edi, byte ptr [esp+20h+var_C]
		xor	esi, ds:dword_1003B280[edi*4]
		movzx	ebp, byte ptr [esp+20h+var_C+2]
		mov	ebx, ecx
		shr	ebx, 8
		movzx	edi, bl
		movzx	ebx, byte ptr [esp+20h+var_C+3]
		mov	edi, ds:dword_1003B680[edi*4]
		xor	edi, ds:dword_1003BE80[ebx*4]
		movzx	ebx, byte ptr [esp+20h+var_10+2]
		xor	edi, ds:dword_1003BA80[ebx*4]
		movzx	ebx, byte ptr [esp+20h+var_8]
		xor	edi, ds:dword_1003B280[ebx*4]
		movzx	ebx, byte ptr [esp+20h+var_8+3]
		mov	ebx, ds:dword_1003BE80[ebx*4]
		xor	ebx, ds:dword_1003BA80[ebp*4]
		movzx	ebp, dh
		xor	ebx, ds:dword_1003B680[ebp*4]
		movzx	ebp, cl
		xor	ebx, ds:dword_1003B280[ebp*4]
		movzx	ebp, byte ptr [esp+20h+var_8+2]
		shr	ecx, 18h
		mov	ecx, ds:dword_1003BE80[ecx*4]
		xor	ecx, ds:dword_1003BA80[ebp*4]
		movzx	ebp, byte ptr [esp+20h+var_C+1]
		xor	ecx, ds:dword_1003B680[ebp*4]
		movzx	edx, dl
		xor	ecx, ds:dword_1003B280[edx*4]
		add	eax, 10h
		xor	ecx, [eax-10h]
		mov	edx, ecx
		mov	ecx, [eax-0Ch]
		xor	ecx, esi
		mov	esi, [eax-8]
		mov	[esp+20h+var_C], ecx
		mov	ecx, [eax-4]
		xor	esi, edi
		xor	ecx, ebx
		dec	[esp+20h+arg_0]
		mov	[esp+20h+var_10], edx
		mov	[esp+20h+var_8], esi
		jnz	loc_1000ECD0

loc_1000EDBB:				; CODE XREF: sub_1000EC80+3Ej
		mov	ebx, esi
		shr	ebx, 10h
		movzx	esi, bl
		mov	esi, ds:dword_1003B280[esi*4]
		mov	ebx, [esp+20h+var_C]
		shr	ebx, 8
		mov	edi, ecx
		shr	edi, 18h
		mov	edi, ds:dword_1003B680[edi*4]
		and	edi, 0FF000000h
		and	esi, 0FF0000h
		or	esi, edi
		movzx	edi, bl
		mov	edi, ds:dword_1003BE80[edi*4]
		and	edi, 0FF00h
		or	esi, edi
		movzx	edi, dl
		movzx	edi, byte ptr ds:dword_1003BA80[edi*4]
		or	esi, edi
		mov	ebx, ecx
		shr	ebx, 10h
		movzx	edi, bl
		mov	ebx, [esp+20h+var_8]
		mov	edi, ds:dword_1003B280[edi*4]
		shr	ebx, 8
		movzx	ebx, bl
		mov	ebx, ds:dword_1003BE80[ebx*4]
		and	ebx, 0FF00h
		and	edi, 0FF0000h
		or	edi, ebx
		mov	ebx, edx
		shr	ebx, 18h
		mov	ebx, ds:dword_1003B680[ebx*4]
		and	ebx, 0FF000000h
		or	edi, ebx
		movzx	ebx, byte ptr [esp+20h+var_C]
		movzx	ebx, byte ptr ds:dword_1003BA80[ebx*4]
		or	edi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		movzx	ebx, bl
		mov	ebp, ds:dword_1003B280[ebx*4]
		mov	ebx, ecx
		shr	ebx, 8
		movzx	ebx, bl
		mov	ebx, ds:dword_1003BE80[ebx*4]
		and	ebx, 0FF00h
		and	ebp, 0FF0000h
		or	ebp, ebx
		mov	ebx, [esp+20h+var_C]
		shr	ebx, 18h
		mov	ebx, ds:dword_1003B680[ebx*4]
		and	ebx, 0FF000000h
		or	ebp, ebx
		movzx	ebx, byte ptr [esp+20h+var_8]
		movzx	ebx, byte ptr ds:dword_1003BA80[ebx*4]
		or	ebp, ebx
		xor	ebp, [eax+8]
		mov	ebx, [esp+20h+var_C]
		xor	esi, [eax]
		xor	edi, [eax+4]
		shr	ebx, 10h
		movzx	ebx, bl
		mov	[esp+20h+arg_8], ebp
		mov	ebp, ds:dword_1003B280[ebx*4]
		mov	ebx, [esp+20h+var_8]
		shr	edx, 8
		shr	ebx, 18h
		mov	ebx, ds:dword_1003B680[ebx*4]
		movzx	edx, dl
		mov	edx, ds:dword_1003BE80[edx*4]
		and	ebp, 0FF0000h
		and	ebx, 0FF000000h
		or	ebp, ebx
		and	edx, 0FF00h
		movzx	ecx, cl
		or	ebp, edx
		movzx	edx, byte ptr ds:dword_1003BA80[ecx*4]
		or	ebp, edx
		xor	ebp, [eax+0Ch]
		mov	eax, [esp+20h+arg_4]
		mov	ecx, [esp+20h+arg_8]
		mov	[eax+4], edi
		pop	edi
		mov	[eax], esi
		pop	esi
		mov	[eax+0Ch], ebp
		pop	ebp
		mov	[eax+8], ecx
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
sub_1000EC80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EF30	proc near		; CODE XREF: sub_1000F320+36p
					; DATA XREF: sub_1000F320+9o ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [eax]
		push	ebx
		push	esi
		mov	esi, [esp+18h+arg_8]
		mov	ebx, [esi+0Ch]
		push	edi
		mov	edi, [eax+4]
		imul	ecx, edi
		xor	ebx, [eax+ecx*4+38h]
		mov	edx, [eax+ecx*4+2Ch]
		xor	edx, [esi]
		lea	eax, [eax+ecx*4+38h]
		mov	ecx, [esi+8]
		xor	ecx, [eax-4]
		sub	eax, 10h
		mov	[esp+1Ch+var_8], ecx
		mov	ecx, [esi+4]
		xor	ecx, [eax+8]
		mov	[esp+1Ch+var_4], ebx
		cmp	edi, 1
		jle	loc_1000F071
		dec	edi
		mov	[esp+1Ch+arg_0], edi
		push	ebp
		lea	ecx, [ecx+0]

loc_1000EF80:				; CODE XREF: sub_1000EF30+13Aj
		movzx	edi, byte ptr [esp+20h+var_8+2]
		mov	esi, ecx
		shr	esi, 18h
		mov	esi, ds:dword_1003CE80[esi*4]
		xor	esi, ds:dword_1003CA80[edi*4]
		movzx	edi, bh
		xor	esi, ds:dword_1003C680[edi*4]
		movzx	edi, dl
		xor	esi, ds:dword_1003C280[edi*4]
		mov	ebx, edx
		shr	ebx, 8
		movzx	edi, bl
		movzx	ebx, byte ptr [esp+20h+var_8+3]
		mov	edi, ds:dword_1003C680[edi*4]
		xor	edi, ds:dword_1003CE80[ebx*4]
		movzx	ebx, byte ptr [esp+20h+var_4+2]
		xor	edi, ds:dword_1003CA80[ebx*4]
		movzx	ebx, cl
		xor	edi, ds:dword_1003C280[ebx*4]
		mov	ebx, edx
		shr	ebx, 10h
		movzx	ebx, bl
		mov	ebp, ds:dword_1003CA80[ebx*4]
		movzx	ebx, byte ptr [esp+20h+var_4+3]
		mov	[esp+20h+arg_8], eax
		mov	eax, ecx
		shr	eax, 8
		movzx	eax, al
		xor	ebp, ds:dword_1003C680[eax*4]
		mov	eax, [esp+20h+arg_8]
		xor	ebp, ds:dword_1003CE80[ebx*4]
		movzx	ebx, byte ptr [esp+20h+var_8]
		xor	ebp, ds:dword_1003C280[ebx*4]
		shr	edx, 18h
		mov	ebx, ds:dword_1003CE80[edx*4]
		movzx	edx, byte ptr [esp+20h+var_8+1]
		shr	ecx, 10h
		movzx	ecx, cl
		xor	ebx, ds:dword_1003CA80[ecx*4]
		movzx	ecx, byte ptr [esp+20h+var_4]
		xor	ebx, ds:dword_1003C680[edx*4]
		mov	edx, [eax-4]
		xor	ebx, ds:dword_1003C280[ecx*4]
		mov	ecx, [eax-8]
		xor	ebx, [eax]
		xor	edx, ebp
		mov	[esp+20h+var_8], edx
		mov	edx, [eax-0Ch]
		xor	ecx, edi
		xor	edx, esi
		sub	eax, 10h
		dec	[esp+20h+arg_0]
		mov	[esp+20h+var_4], ebx
		jnz	loc_1000EF80
		pop	ebp

loc_1000F071:				; CODE XREF: sub_1000EF30+41j
		movzx	esi, dl
		movzx	ebx, ds:byte_1003B180[esi]
		mov	esi, [esp+1Ch+arg_4]
		mov	[esi], bl
		mov	ebx, [esp+1Ch+var_4]
		shr	ebx, 8
		movzx	edi, bl
		movzx	ebx, ds:byte_1003B180[edi]
		mov	[esi+1], bl
		mov	ebx, [esp+1Ch+var_8]
		shr	ebx, 10h
		movzx	edi, bl
		movzx	ebx, ds:byte_1003B180[edi]
		mov	[esi+2], bl
		mov	edi, ecx
		shr	edi, 18h
		movzx	ebx, ds:byte_1003B180[edi]
		mov	[esi+3], bl
		movzx	edi, cl
		movzx	ebx, ds:byte_1003B180[edi]
		mov	[esi+4], bl
		mov	ebx, edx
		shr	ebx, 8
		movzx	edi, bl
		movzx	ebx, ds:byte_1003B180[edi]
		mov	[esi+5], bl
		mov	ebx, [esp+1Ch+var_4]
		shr	ebx, 10h
		movzx	edi, bl
		movzx	ebx, ds:byte_1003B180[edi]
		mov	edi, [esp+1Ch+var_8]
		mov	[esi+6], bl
		shr	edi, 18h
		movzx	ebx, ds:byte_1003B180[edi]
		movzx	edi, byte ptr [esp+1Ch+var_8]
		mov	[esi+7], bl
		movzx	ebx, ds:byte_1003B180[edi]
		mov	[esi+8], bl
		mov	ebx, ecx
		shr	ebx, 8
		movzx	edi, bl
		movzx	ebx, ds:byte_1003B180[edi]
		mov	[esi+9], bl
		mov	ebx, edx
		shr	ebx, 10h
		movzx	edi, bl
		movzx	ebx, ds:byte_1003B180[edi]
		mov	edi, [esp+1Ch+var_4]
		mov	[esi+0Ah], bl
		shr	edi, 18h
		movzx	ebx, ds:byte_1003B180[edi]
		movzx	edi, byte ptr [esp+1Ch+var_4]
		mov	[esi+0Bh], bl
		movzx	ebx, ds:byte_1003B180[edi]
		mov	[esi+0Ch], bl
		mov	ebx, [esp+1Ch+var_8]
		shr	ebx, 8
		movzx	edi, bl
		movzx	ebx, ds:byte_1003B180[edi]
		shr	ecx, 10h
		mov	[esi+0Dh], bl
		movzx	ecx, cl
		mov	cl, ds:byte_1003B180[ecx]
		mov	[esi+0Eh], cl
		shr	edx, 18h
		mov	dl, ds:byte_1003B180[edx]
		mov	[esi+0Fh], dl
		mov	ecx, [eax]
		xor	[esi+0Ch], ecx
		mov	edx, [eax-4]
		xor	[esi+8], edx
		mov	ecx, [eax-8]
		xor	[esi+4], ecx
		mov	edx, [eax-0Ch]
		xor	[esi], edx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
sub_1000EF30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F1A0	proc near		; DATA XREF: sub_1000F1B0+10o
					; sub_1000F210+68o ...
		or	eax, 0FFFFFFFFh
		retn
sub_1000F1A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F1B0	proc near		; DATA XREF: sub_1000F4B0+93o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		cmp	[esp+arg_18], 10h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ebp, offset sub_1000EC80
		jz	short loc_1000F1C5
		mov	ebp, offset sub_1000F1A0

loc_1000F1C5:				; CODE XREF: sub_1000F1B0+Ej
		cmp	[esp+10h+arg_14], 0
		jbe	short loc_1000F1FB
		mov	edi, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_10]
		mov	ebx, [esp+10h+arg_0]
		sub	edi, esi
		lea	ebx, [ebx+0]

loc_1000F1E0:				; CODE XREF: sub_1000F1B0+49j
		push	esi
		lea	eax, [edi+esi]
		push	eax
		push	ebx
		call	ebp ; sub_1000EC80
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F1FD
		mov	eax, [esp+10h+arg_18]
		add	esi, eax
		sub	[esp+10h+arg_14], eax
		jnz	short loc_1000F1E0

loc_1000F1FB:				; CODE XREF: sub_1000F1B0+1Aj
		xor	eax, eax

loc_1000F1FD:				; CODE XREF: sub_1000F1B0+3Dj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000F1B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000F210(int,	int, int, int, int, int, size_t	Size)
sub_1000F210	proc near		; DATA XREF: sub_1000F4B0+80o

var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= byte ptr -104h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
Size		= dword	ptr  1Ch

		sub	esp, 118h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+118h+var_4], eax
		mov	edx, [esp+118h+arg_14]
		mov	eax, [esp+118h+arg_0]
		mov	ecx, [esp+118h+arg_4]
		push	edi
		mov	edi, [esp+11Ch+Size]
		mov	[esp+11Ch+var_114], eax
		test	edx, edx
		jnz	short loc_1000F261
		xor	eax, eax
		pop	edi
		mov	ecx, [esp+118h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 118h
		retn
; ---------------------------------------------------------------------------

loc_1000F261:				; CODE XREF: sub_1000F210+37j
		add	eax, 0Ch
		push	ebx
		mov	[esp+120h+var_10C], eax
		mov	ebx, eax
		mov	[esp+120h+var_118], offset sub_1000EC80
		cmp	edi, 10h
		jz	short loc_1000F280
		mov	[esp+120h+var_118], offset sub_1000F1A0

loc_1000F280:				; CODE XREF: sub_1000F210+66j
		push	ebp
		push	esi
		test	edx, edx
		jz	short loc_1000F2EC
		mov	esi, [esp+128h+arg_10]
		mov	eax, edi
		lea	ebp, [esp+128h+var_104]
		neg	eax
		sub	ebp, esi
		sub	ecx, esi
		mov	[esp+128h+var_110], eax
		mov	[esp+128h+var_108], ecx

loc_1000F2A1:				; CODE XREF: sub_1000F210+D6j
		test	edi, edi
		jz	short loc_1000F2BD
		mov	ecx, ebx
		mov	eax, esi
		sub	ecx, esi
		mov	ebx, edi
		lea	ecx, [ecx+0]

loc_1000F2B0:				; CODE XREF: sub_1000F210+ABj
		mov	dl, [ecx+eax]
		xor	dl, [eax]
		inc	eax
		dec	ebx
		mov	[eax+ebp-1], dl
		jnz	short loc_1000F2B0

loc_1000F2BD:				; CODE XREF: sub_1000F210+93j
		mov	ebx, [esp+128h+var_108]
		mov	edx, [esp+128h+var_114]
		lea	ecx, [esp+128h+var_104]
		push	ecx
		add	ebx, esi
		push	ebx
		push	edx
		call	[esp+134h+var_118]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F2F9
		add	ebp, [esp+128h+var_110]
		add	esi, edi
		sub	[esp+128h+arg_14], edi
		jnz	short loc_1000F2A1
		mov	eax, [esp+128h+var_10C]

loc_1000F2EC:				; CODE XREF: sub_1000F210+74j
		push	edi		; Size
		push	ebx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_1000F2F9:				; CODE XREF: sub_1000F210+C7j
		mov	ecx, [esp+128h+var_4]
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 118h
		retn
sub_1000F210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F320	proc near		; DATA XREF: sub_1000F4B0+9Ao

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		cmp	[esp+arg_18], 10h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ebp, offset sub_1000EF30
		jz	short loc_1000F335
		mov	ebp, offset sub_1000F1A0

loc_1000F335:				; CODE XREF: sub_1000F320+Ej
		cmp	[esp+10h+arg_14], 0
		jbe	short loc_1000F36B
		mov	edi, [esp+10h+arg_4]
		mov	esi, [esp+10h+arg_10]
		mov	ebx, [esp+10h+arg_0]
		sub	edi, esi
		lea	ebx, [ebx+0]

loc_1000F350:				; CODE XREF: sub_1000F320+49j
		push	esi
		lea	eax, [edi+esi]
		push	eax
		push	ebx
		call	ebp ; sub_1000EF30
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F36D
		mov	eax, [esp+10h+arg_18]
		add	esi, eax
		sub	[esp+10h+arg_14], eax
		jnz	short loc_1000F350

loc_1000F36B:				; CODE XREF: sub_1000F320+1Aj
		xor	eax, eax

loc_1000F36D:				; CODE XREF: sub_1000F320+3Dj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000F320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000F380(int,	int, int, int, int, int, size_t	Size)
sub_1000F380	proc near		; DATA XREF: sub_1000F4B0+87o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Dst		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
Size		= dword	ptr  1Ch

		sub	esp, 38h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+38h+var_4], eax
		mov	eax, [esp+38h+arg_0]
		mov	ecx, [esp+38h+arg_4]
		push	ebp
		mov	ebp, [esp+3Ch+arg_14]
		mov	[esp+3Ch+var_34], eax
		mov	eax, [esp+3Ch+arg_10]
		push	esi
		mov	esi, [esp+40h+Size]
		mov	[esp+40h+var_28], ecx
		mov	[esp+40h+var_2C], eax
		mov	[esp+40h+var_30], ebp
		test	ebp, ebp
		jnz	short loc_1000F3CB
		pop	esi
		xor	eax, eax
		pop	ebp
		mov	ecx, [esp+38h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_1000F3CB:				; CODE XREF: sub_1000F380+36j
		mov	[esp+40h+var_38], offset sub_1000EF30
		cmp	esi, 10h
		jz	short loc_1000F3E0
		mov	[esp+40h+var_38], offset sub_1000F1A0

loc_1000F3E0:				; CODE XREF: sub_1000F380+56j
		push	ebx
		push	edi
		mov	edi, ebp
		sub	edi, esi
		lea	ebx, [edi+eax]
		push	esi		; Size
		lea	edx, [esp+4Ch+Dst]
		push	ebx		; Src
		push	edx		; Dst
		call	memcpy
		add	edi, [esp+54h+var_28]
		add	esp, 0Ch
		cmp	ebp, esi
		jbe	short loc_1000F43F
		mov	ebp, ebx
		sub	ebp, esi

loc_1000F404:				; CODE XREF: sub_1000F380+BDj
		mov	ecx, [esp+48h+var_34]
		push	ebx
		push	edi
		push	ecx
		call	[esp+54h+var_38]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F486
		test	esi, esi
		jz	short loc_1000F42B
		lea	ebx, [ebx+0]

loc_1000F420:				; CODE XREF: sub_1000F380+A9j
		mov	dl, [eax+ebp]
		xor	[eax+edi], dl
		inc	eax
		cmp	eax, esi
		jb	short loc_1000F420

loc_1000F42B:				; CODE XREF: sub_1000F380+98j
		mov	eax, [esp+48h+var_30]
		sub	eax, esi
		sub	edi, esi
		sub	ebx, esi
		sub	ebp, esi
		mov	[esp+48h+var_30], eax
		cmp	eax, esi
		ja	short loc_1000F404

loc_1000F43F:				; CODE XREF: sub_1000F380+7Ej
		cmp	ebx, [esp+48h+var_2C]
		jnz	short loc_1000F46E
		push	ebx
		mov	ebx, [esp+4Ch+var_34]
		push	edi
		push	ebx
		call	[esp+54h+var_38]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F486
		test	esi, esi
		jz	short loc_1000F472
		jmp	short loc_1000F460
; ---------------------------------------------------------------------------
		align 10h

loc_1000F460:				; CODE XREF: sub_1000F380+DBj
					; sub_1000F380+EAj
		mov	cl, [ebx+eax+0Ch]
		xor	[eax+edi], cl
		inc	eax
		cmp	eax, esi
		jb	short loc_1000F460
		jmp	short loc_1000F472
; ---------------------------------------------------------------------------

loc_1000F46E:				; CODE XREF: sub_1000F380+C3j
		mov	ebx, [esp+48h+var_34]

loc_1000F472:				; CODE XREF: sub_1000F380+D9j
					; sub_1000F380+ECj
		push	esi		; Size
		lea	edx, [esp+4Ch+Dst]
		push	edx		; Src
		add	ebx, 0Ch
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_1000F486:				; CODE XREF: sub_1000F380+94j
					; sub_1000F380+D5j
		mov	ecx, [esp+48h+var_4]
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
sub_1000F380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F4A0	proc near		; DATA XREF: .rdata:100393A0o
		push	218h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_1000F4A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F4B0	proc near		; CODE XREF: sub_1000F6D0+4Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_4], 0
		push	ebp
		mov	ebp, [esp+4+Src]
		push	esi
		mov	esi, [esp+8+arg_0]
		jz	short loc_1000F4E4
		lea	eax, [ecx-10h]
		cmp	eax, 10h
		ja	short loc_1000F4E4
		test	cl, 3
		jnz	short loc_1000F4E4
		lea	eax, [edx-10h]
		cmp	eax, 10h
		ja	short loc_1000F4E4
		test	dl, 3
		jnz	short loc_1000F4E4
		test	ebx, ebx
		jz	short loc_1000F4FB
		cmp	ebx, 1
		jz	short loc_1000F4F7

loc_1000F4E4:				; CODE XREF: sub_1000F4B0+Fj
					; sub_1000F4B0+17j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000F4F7:				; CODE XREF: sub_1000F4B0+32j
		test	ebp, ebp
		jz	short loc_1000F4E4

loc_1000F4FB:				; CODE XREF: sub_1000F4B0+2Dj
		test	esi, esi
		jz	short loc_1000F4E4
		shr	ecx, 2
		mov	eax, edx
		push	edi
		shr	eax, 2
		mov	edi, ecx
		mov	[esi], eax
		cmp	edi, eax
		jbe	short loc_1000F512
		mov	eax, edi

loc_1000F512:				; CODE XREF: sub_1000F4B0+5Ej
		add	eax, 6
		mov	[esi+4], eax
		cmp	ebx, 1
		jnz	short loc_1000F53E
		push	edx		; Size
		lea	ecx, [esi+0Ch]
		push	ebp		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch
		cmp	[esp+0Ch+arg_C], 0
		mov	eax, offset sub_1000F210
		jnz	short loc_1000F54F
		mov	eax, offset sub_1000F380
		jmp	short loc_1000F54F
; ---------------------------------------------------------------------------

loc_1000F53E:				; CODE XREF: sub_1000F4B0+6Bj
		cmp	[esp+0Ch+arg_C], 0
		mov	eax, offset sub_1000F1B0
		jnz	short loc_1000F54F
		mov	eax, offset sub_1000F320

loc_1000F54F:				; CODE XREF: sub_1000F4B0+85j
					; sub_1000F4B0+8Cj ...
		mov	edx, [esi+4]
		inc	edx
		imul	edx, [esi]
		mov	[esi+8], eax
		cmp	edx, 78h
		jbe	short loc_1000F572
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000F572:				; CODE XREF: sub_1000F4B0+ACj
		cmp	[esp+0Ch+arg_C], 0
		mov	eax, [esp+0Ch+arg_4]
		jz	short loc_1000F5AC
		push	edi
		mov	ecx, esi
		call	sub_1000E7B0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000F5BB

loc_1000F58C:				; CODE XREF: sub_1000F4B0+109j
		pop	edi
		mov	[esi+210h], esi
		mov	dword ptr [esi+20Ch], 0
		mov	dword ptr [esi+214h], 1
		pop	esi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000F5AC:				; CODE XREF: sub_1000F4B0+CBj
		push	eax
		mov	eax, edi
		call	sub_1000EA90
		add	esp, 4
		test	eax, eax
		jz	short loc_1000F58C

loc_1000F5BB:				; CODE XREF: sub_1000F4B0+DAj
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
sub_1000F4B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F5D0	proc near		; CODE XREF: sub_1000F990+Fp
					; DATA XREF: .rdata:10039224o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, [esi+210h]
		test	ecx, ecx
		jz	short loc_1000F605
		mov	eax, [esi+20Ch]
		test	eax, eax
		jz	short loc_1000F605
		push	1
		push	ecx
		call	eax
		add	esp, 8
		mov	dword ptr [esi+210h], 0
		mov	dword ptr [esi+20Ch], 0

loc_1000F605:				; CODE XREF: sub_1000F5D0+Dj
					; sub_1000F5D0+17j
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000F615
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000F615:				; CODE XREF: sub_1000F5D0+3Aj
		pop	esi
		retn
sub_1000F5D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F620	proc near		; CODE XREF: sub_1000FAC0+F6p
					; sub_1000FC80+12Ap
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		test	edi, edi
		jz	loc_1000F6B3
		mov	ebp, [esp+0Ch+arg_4]
		test	ebp, ebp
		jz	short loc_1000F6B3
		mov	ebx, [esp+0Ch+arg_10]
		mov	ecx, [esp+0Ch+arg_14]
		test	ebx, ebx
		jnz	short loc_1000F647
		test	ecx, ecx
		jnz	short loc_1000F6B3

loc_1000F647:				; CODE XREF: sub_1000F620+21j
		push	esi
		mov	esi, [edi]
		add	esi, esi
		add	esi, esi
		cmp	dword ptr [edi+214h], 0
		jz	short loc_1000F676
		xor	edx, edx
		mov	eax, ecx
		div	esi
		test	edx, edx
		jz	short loc_1000F676
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F676:				; CODE XREF: sub_1000F620+35j
					; sub_1000F620+3Fj
		mov	edx, [esp+10h+arg_C]
		cmp	edx, ecx
		jnb	short loc_1000F693
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F693:				; CODE XREF: sub_1000F620+5Cj
		mov	eax, [esp+10h+arg_8]
		push	esi
		push	ecx
		push	ebx
		push	edx
		push	eax
		mov	[eax], ecx
		mov	eax, [edi+210h]
		mov	ecx, [edi+8]
		push	ebp
		push	eax
		call	ecx
		add	esp, 1Ch
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F6B3:				; CODE XREF: sub_1000F620+9j
					; sub_1000F620+15j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1000F620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000F6D0(int,	int, int, void *Src, int, int, size_t Size)
sub_1000F6D0	proc near		; CODE XREF: sub_1000F830+33p
					; sub_1000F8C0+53j ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Src		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
Size		= dword	ptr  1Ch

		mov	eax, [esp+arg_14]
		push	ebx
		mov	ebx, [esp+4+arg_10]
		push	ebp
		push	esi
		push	edi
		cmp	ebx, 2
		jz	short loc_1000F6EF
		jle	short loc_1000F6F4
		cmp	ebx, 4
		jg	short loc_1000F6F4
		xor	ebx, ebx
		lea	eax, [ebx+1]
		jmp	short loc_1000F6F4
; ---------------------------------------------------------------------------

loc_1000F6EF:				; CODE XREF: sub_1000F6D0+Fj
		mov	ebx, 1

loc_1000F6F4:				; CODE XREF: sub_1000F6D0+11j
					; sub_1000F6D0+16j ...
		mov	edi, [esp+10h+Src]
		mov	esi, [esp+10h+arg_0]
		mov	ebp, [esp+10h+Size]
		push	eax
		mov	eax, [esp+14h+arg_4]
		xor	ecx, ecx
		push	edi
		push	eax
		mov	[esi+210h], ecx
		mov	[esi+20Ch], ecx
		mov	ecx, [esp+1Ch+arg_8]
		push	esi
		mov	edx, ebp
		call	sub_1000F4B0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_1000F75B
		mov	ecx, [esi+210h]
		test	ecx, ecx
		jz	short loc_1000F754
		mov	eax, [esi+20Ch]
		test	eax, eax
		jz	short loc_1000F754
		push	1
		push	ecx
		call	eax
		add	esp, 8
		xor	eax, eax
		mov	[esi+210h], eax
		mov	[esi+20Ch], eax

loc_1000F754:				; CODE XREF: sub_1000F6D0+62j
					; sub_1000F6D0+6Cj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F75B:				; CODE XREF: sub_1000F6D0+58j
		mov	eax, [esp+10h+arg_10]
		sub	eax, 2
		jz	short loc_1000F7C8
		dec	eax
		jz	short loc_1000F7A0
		dec	eax
		jnz	loc_1000F820
		mov	ecx, [esi+8]
		push	ebp		; Size
		push	edi		; int
		push	ecx		; int
		push	esi		; int
		call	sub_1000DE70
		add	esp, 10h
		cmp	[esp+10h+arg_14], 0
		mov	[esi+210h], eax
		mov	eax, offset sub_1000DB90
		jnz	short loc_1000F794
		mov	eax, offset sub_1000DC70

loc_1000F794:				; CODE XREF: sub_1000F6D0+BDj
		mov	dword ptr [esi+20Ch], offset sub_1000DA90
		jmp	short loc_1000F7F8
; ---------------------------------------------------------------------------

loc_1000F7A0:				; CODE XREF: sub_1000F6D0+95j
		mov	edx, [esi+8]
		push	ebp		; Size
		push	edi		; int
		push	edx		; int
		push	esi		; int
		call	sub_1000D4B0
		add	esp, 10h
		mov	[esi+210h], eax
		mov	dword ptr [esi+8], offset sub_1000D320
		mov	dword ptr [esi+20Ch], offset sub_1000D290
		jmp	short loc_1000F7FB
; ---------------------------------------------------------------------------

loc_1000F7C8:				; CODE XREF: sub_1000F6D0+92j
		mov	eax, [esi+8]
		push	ebp		; Size
		push	edi		; Src
		push	eax		; int
		push	esi		; int
		call	sub_1000CD80
		add	esp, 10h
		cmp	[esp+10h+arg_14], 0
		mov	[esi+210h], eax
		mov	eax, offset sub_1000CE00
		jnz	short loc_1000F7EE
		mov	eax, offset sub_1000CF60

loc_1000F7EE:				; CODE XREF: sub_1000F6D0+117j
		mov	dword ptr [esi+20Ch], offset sub_1000CDE0

loc_1000F7F8:				; CODE XREF: sub_1000F6D0+CEj
		mov	[esi+8], eax

loc_1000F7FB:				; CODE XREF: sub_1000F6D0+F6j
		cmp	dword ptr [esi+210h], 0
		mov	dword ptr [esi+214h], 0
		jnz	short loc_1000F820
		pop	edi
		mov	dword ptr [esi+20Ch], 0
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F820:				; CODE XREF: sub_1000F6D0+98j
					; sub_1000F6D0+13Cj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000F6D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000F830(int,	void *Src, int,	int, int, size_t Size)
sub_1000F830	proc near		; DATA XREF: .rdata:10039220o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
Size		= dword	ptr  18h

		push	esi
		push	218h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1000F8AE
		mov	eax, [esp+4+Size]
		mov	ecx, [esp+4+arg_C]
		mov	edx, [esp+4+arg_8]
		push	eax		; Size
		mov	eax, [esp+8+Src]
		push	ecx		; int
		mov	ecx, [esp+0Ch+arg_10]
		push	edx		; int
		mov	edx, [esp+10h+arg_0]
		push	eax		; Src
		push	ecx		; int
		push	edx		; int
		push	esi		; int
		call	sub_1000F6D0
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000F8AC
		mov	ecx, [esi+210h]
		test	ecx, ecx
		jz	short loc_1000F89F
		mov	eax, [esi+20Ch]
		test	eax, eax
		jz	short loc_1000F89F
		push	1
		push	ecx
		call	eax
		add	esp, 8
		mov	dword ptr [esi+210h], 0
		mov	dword ptr [esi+20Ch], 0

loc_1000F89F:				; CODE XREF: sub_1000F830+47j
					; sub_1000F830+51j
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F8AC:				; CODE XREF: sub_1000F830+3Dj
		mov	eax, esi

loc_1000F8AE:				; CODE XREF: sub_1000F830+12j
		pop	esi
		retn
sub_1000F830	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000F8B0	proc near		; DATA XREF: .rdata:100393A4o
		push	220h
		call	PORT_Alloc_Util
		add	esp, 4
		retn
sub_1000F8B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F8C0	proc near		; DATA XREF: .rdata:10039390o

arg_0		= dword	ptr  4
Src		= dword	ptr  10h
arg_10		= dword	ptr  14h
Size		= dword	ptr  1Ch

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1000F8D9
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000F8D9:				; CODE XREF: sub_1000F8C0+6j
		mov	ecx, [esp+Src]
		test	ecx, ecx
		jz	short loc_1000F8EA
		mov	edx, [ecx]
		mov	[eax], edx
		mov	ecx, [ecx+4]
		jmp	short loc_1000F8F1
; ---------------------------------------------------------------------------

loc_1000F8EA:				; CODE XREF: sub_1000F8C0+1Fj
		mov	ecx, 0A6A6A6A6h
		mov	[eax], ecx

loc_1000F8F1:				; CODE XREF: sub_1000F8C0+28j
		mov	[eax+4], ecx
		add	eax, 8
		mov	[esp+Size], 10h	; Size
		mov	[esp+arg_10], 0	; int
		mov	[esp+Src], 0	; Src
		mov	[esp+arg_0], eax ; int
		jmp	sub_1000F6D0
sub_1000F8C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F920	proc near		; DATA XREF: .rdata:10039358o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	220h
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1000F936
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F936:				; CODE XREF: sub_1000F920+12j
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_1000F94A
		mov	ecx, [eax]
		mov	[esi], ecx
		mov	edx, [eax+4]
		mov	[esi+4], edx
		jmp	short loc_1000F954
; ---------------------------------------------------------------------------

loc_1000F94A:				; CODE XREF: sub_1000F920+1Cj
		mov	eax, 0A6A6A6A6h
		mov	[esi], eax
		mov	[esi+4], eax

loc_1000F954:				; CODE XREF: sub_1000F920+28j
		mov	eax, [esp+4+arg_8]
		mov	ecx, [esp+4+arg_C]
		mov	edx, [esp+4+arg_0]
		push	10h		; Size
		push	eax		; int
		push	0		; int
		push	0		; Src
		push	ecx		; int
		push	edx		; int
		lea	eax, [esi+8]
		push	eax		; int
		call	sub_1000F6D0
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000F984
		push	esi
		call	PORT_Free_Util
		add	esp, 4
		xor	esi, esi

loc_1000F984:				; CODE XREF: sub_1000F920+57j
		mov	eax, esi
		pop	esi
		retn
sub_1000F920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F990	proc near		; DATA XREF: .rdata:1003935Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000F9B7
		lea	eax, [esi+8]
		push	0
		push	eax
		call	sub_1000F5D0
		add	esp, 8
		cmp	[esp+4+arg_4], 0
		jz	short loc_1000F9B7
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_1000F9B7:				; CODE XREF: sub_1000F990+7j
					; sub_1000F990+1Cj
		pop	esi
		retn
sub_1000F990	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F9C0	proc near		; CODE XREF: sub_1000FAC0+11Bp
		mov	dl, 1
		add	[eax+7], dl
		jnz	short loc_1000F9E7
		add	[eax+6], dl
		jnz	short loc_1000F9E7
		add	[eax+5], dl
		jnz	short loc_1000F9E7
		add	[eax+4], dl
		jnz	short loc_1000F9E7
		add	[eax+3], dl
		jnz	short loc_1000F9E7
		add	[eax+2], dl
		jnz	short loc_1000F9E7
		add	[eax+1], dl
		jnz	short loc_1000F9E7
		add	[eax], dl

loc_1000F9E7:				; CODE XREF: sub_1000F9C0+5j
					; sub_1000F9C0+Aj ...
		movzx	edx, byte ptr [eax]
		xor	[ecx], dl
		movzx	edx, byte ptr [eax+1]
		xor	[ecx+1], dl
		movzx	edx, byte ptr [eax+2]
		xor	[ecx+2], dl
		movzx	edx, byte ptr [eax+3]
		xor	[ecx+3], dl
		movzx	edx, byte ptr [eax+4]
		xor	[ecx+4], dl
		movzx	edx, byte ptr [eax+5]
		xor	[ecx+5], dl
		movzx	edx, byte ptr [eax+6]
		xor	[ecx+6], dl
		mov	al, [eax+7]
		xor	[ecx+7], al
		retn
sub_1000F9C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FA20	proc near		; CODE XREF: sub_1000FC80+FEp
		movzx	edx, byte ptr [eax]
		xor	[ecx], dl
		movzx	edx, byte ptr [eax+1]
		xor	[ecx+1], dl
		movzx	edx, byte ptr [eax+2]
		xor	[ecx+2], dl
		movzx	edx, byte ptr [eax+3]
		xor	[ecx+3], dl
		movzx	edx, byte ptr [eax+4]
		xor	[ecx+4], dl
		movzx	edx, byte ptr [eax+5]
		xor	[ecx+5], dl
		movzx	edx, byte ptr [eax+6]
		xor	[ecx+6], dl
		movzx	edx, byte ptr [eax+7]
		xor	[ecx+7], dl
		mov	cl, [eax+7]
		lea	edx, [ecx-1]
		mov	[eax+7], dl
		test	cl, cl
		jnz	short locret_1000FAB3
		mov	cl, [eax+6]
		lea	edx, [ecx-1]
		mov	[eax+6], dl
		test	cl, cl
		jnz	short locret_1000FAB3
		mov	cl, [eax+5]
		lea	edx, [ecx-1]
		mov	[eax+5], dl
		test	cl, cl
		jnz	short locret_1000FAB3
		mov	cl, [eax+4]
		lea	edx, [ecx-1]
		mov	[eax+4], dl
		test	cl, cl
		jnz	short locret_1000FAB3
		mov	cl, [eax+3]
		lea	edx, [ecx-1]
		mov	[eax+3], dl
		test	cl, cl
		jnz	short locret_1000FAB3
		mov	cl, [eax+2]
		lea	edx, [ecx-1]
		mov	[eax+2], dl
		test	cl, cl
		jnz	short locret_1000FAB3
		mov	cl, [eax+1]
		lea	edx, [ecx-1]
		mov	[eax+1], dl
		test	cl, cl
		jnz	short locret_1000FAB3
		dec	byte ptr [eax]

locret_1000FAB3:			; CODE XREF: sub_1000FA20+41j
					; sub_1000FA20+4Ej ...
		retn
sub_1000FA20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000FAC0(int,	void *Dst, int,	int, void *Src,	size_t Size)
sub_1000FAC0	proc near		; DATA XREF: .rdata:10039360o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
Src		= dword	ptr  18h
Size		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 2Ch
		push	ebx
		push	esi
		mov	esi, [ebp+Size]
		lea	eax, [esi+8]
		or	ebx, 0FFFFFFFFh
		push	edi
		mov	[esp+38h+var_1C], 10h
		mov	[esp+38h+var_20], eax
		test	esi, esi
		jz	loc_1000FC69
		test	esi, 7
		jnz	loc_1000FC69
		cmp	[ebp+arg_C], eax
		jnb	short loc_1000FB10
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000FB10:				; CODE XREF: sub_1000FAC0+38j
		cmp	[ebp+arg_0], 0
		jz	loc_1000FC52
		cmp	[ebp+Dst], 0
		jz	loc_1000FC52
		cmp	[ebp+Src], 0
		jz	loc_1000FC52
		mov	eax, esi
		shr	eax, 3
		mov	[esp+38h+var_28], eax
		lea	eax, ds:8[eax*8]
		push	eax
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_1000FC76
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, [ebp+Src]
		push	esi		; Size
		mov	[esp+3Ch+var_10], ecx
		push	eax		; Src
		lea	ecx, [edi+8]
		push	ecx		; Dst
		mov	[esp+44h+var_C], edx
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax
		mov	[esp+38h+var_18], eax
		mov	[esp+38h+var_14], eax
		mov	[esp+38h+var_24], 6

loc_1000FB84:				; CODE XREF: sub_1000FAC0+12Bj
		mov	esi, 1
		cmp	[esp+38h+var_28], esi
		jb	short loc_1000FBE7

loc_1000FB8F:				; CODE XREF: sub_1000FAC0+125j
		mov	edx, [edi+esi*8]
		push	10h
		lea	ecx, [esp+3Ch+var_10]
		push	ecx
		mov	[esp+40h+var_8], edx
		mov	eax, [edi+esi*8+4]
		mov	[esp+40h+var_4], eax
		push	10h
		lea	edx, [esp+44h+var_1C]
		push	edx
		mov	eax, ecx
		push	eax
		mov	eax, [ebp+arg_0]
		add	eax, 8
		push	eax
		call	sub_1000F620
		mov	ebx, eax
		add	esp, 18h
		test	ebx, ebx
		jnz	short loc_1000FBE7
		mov	ecx, [esp+38h+var_8]
		mov	[edi+esi*8], ecx
		mov	edx, [esp+38h+var_4]
		lea	eax, [esp+38h+var_18]
		lea	ecx, [esp+38h+var_10]
		mov	[edi+esi*8+4], edx
		call	sub_1000F9C0
		inc	esi
		cmp	esi, [esp+38h+var_28]
		jbe	short loc_1000FB8F

loc_1000FBE7:				; CODE XREF: sub_1000FAC0+CDj
					; sub_1000FAC0+102j
		dec	[esp+38h+var_24]
		jnz	short loc_1000FB84
		test	ebx, ebx
		jnz	short loc_1000FC2E
		mov	eax, [esp+38h+var_10]
		mov	esi, [esp+38h+var_20]
		mov	edx, [ebp+Dst]
		push	esi		; Size
		mov	[edi], eax
		mov	ecx, [esp+3Ch+var_C]
		push	edi		; Src
		push	edx		; Dst
		mov	[edi+4], ecx
		call	memcpy
		mov	eax, [ebp+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000FC3B
		mov	[eax], esi
		mov	eax, esi
		push	eax
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000FC2E:				; CODE XREF: sub_1000FAC0+12Fj
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_1000FC3B
		mov	dword ptr [eax], 0

loc_1000FC3B:				; CODE XREF: sub_1000FAC0+155j
					; sub_1000FAC0+173j
		mov	eax, [esp+38h+var_20]
		push	eax
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000FC52:				; CODE XREF: sub_1000FAC0+54j
					; sub_1000FAC0+5Ej ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000FC69:				; CODE XREF: sub_1000FAC0+23j
					; sub_1000FAC0+2Fj
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000FC76:				; CODE XREF: sub_1000FAC0+8Bj
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000FAC0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000FC80(int,	void *Dst, int,	int, void *Src,	size_t Size)
sub_1000FC80	proc near		; DATA XREF: .rdata:10039364o

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_17		= byte ptr -17h
var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
Src		= dword	ptr  18h
Size		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 24h
		push	ebx
		push	esi
		mov	esi, [ebp+Size]
		push	edi
		mov	[esp+30h+var_1C], 10h
		mov	[esp+30h+var_24], 0FFFFFFFFh
		cmp	esi, 18h
		jb	loc_1000FEAD
		test	esi, 7
		jnz	loc_1000FEAD
		lea	eax, [esi-8]
		cmp	[ebp+arg_C], eax
		jnb	short loc_1000FCD3
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000FCD3:				; CODE XREF: sub_1000FC80+3Aj
		cmp	[ebp+arg_0], 0
		jz	loc_1000FE96
		cmp	[ebp+Dst], 0
		jz	loc_1000FE96
		cmp	[ebp+Src], 0
		jz	loc_1000FE96
		mov	ebx, esi
		shr	ebx, 3
		lea	eax, ds:0[ebx*8]
		push	eax
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_1000FEBA
		mov	ecx, [ebp+Src]
		push	esi		; Size
		push	ecx		; Src
		push	edi		; Dst
		dec	ebx
		call	memcpy
		mov	edx, [edi]
		mov	[esp+3Ch+var_10], edx
		mov	eax, [edi+4]
		mov	[esp+3Ch+var_C], eax
		lea	eax, [ebx+ebx*2]
		add	eax, eax
		mov	[esp+3Ch+var_11], al
		shr	eax, 8
		mov	[esp+3Ch+var_12], al
		shr	eax, 8
		mov	[esp+3Ch+var_13], al
		shr	eax, 8
		mov	[esp+3Ch+var_14], al
		shr	eax, 8
		mov	[esp+3Ch+var_15], al
		shr	eax, 8
		mov	[esp+3Ch+var_16], al
		shr	eax, 8
		add	esp, 0Ch
		mov	[esp+30h+var_17], al
		shr	eax, 8
		mov	[esp+30h+var_18], al
		mov	[esp+30h+var_20], 6
		mov	edi, edi

loc_1000FD70:				; CODE XREF: sub_1000FC80+151j
		mov	esi, ebx
		test	ebx, ebx
		jz	short loc_1000FDCD

loc_1000FD76:				; CODE XREF: sub_1000FC80+14Bj
		lea	eax, [esp+30h+var_18]
		lea	ecx, [esp+30h+var_10]
		call	sub_1000FA20
		mov	ecx, [edi+esi*8]
		push	10h
		lea	eax, [esp+34h+var_10]
		push	eax
		mov	[esp+38h+var_8], ecx
		mov	edx, [edi+esi*8+4]
		push	10h
		mov	[esp+3Ch+var_4], edx
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		lea	ecx, [esp+3Ch+var_1C]
		push	ecx
		push	edx
		add	eax, 8
		push	eax
		call	sub_1000F620
		add	esp, 18h
		mov	[esp+30h+var_24], eax
		test	eax, eax
		jnz	short loc_1000FDCD
		dec	esi
		mov	eax, [esp+30h+var_8]
		mov	[edi+esi*8+8], eax
		mov	ecx, [esp+30h+var_4]
		mov	[edi+esi*8+0Ch], ecx
		jnz	short loc_1000FD76

loc_1000FDCD:				; CODE XREF: sub_1000FC80+F4j
					; sub_1000FC80+138j
		dec	[esp+30h+var_20]
		jnz	short loc_1000FD70
		cmp	[esp+30h+var_24], 0
		jnz	loc_1000FE71
		mov	ecx, [ebp+arg_0]
		mov	eax, 8
		lea	edx, [esp+30h+var_10]
		lea	ebx, [ebx+0]

loc_1000FDF0:				; CODE XREF: sub_1000FC80+182j
		mov	esi, [edx]
		cmp	esi, [ecx]
		jnz	short loc_1000FE06
		sub	eax, 4
		add	ecx, 4
		add	edx, 4
		cmp	eax, 4
		jnb	short loc_1000FDF0
		jmp	short loc_1000FE3A
; ---------------------------------------------------------------------------

loc_1000FE06:				; CODE XREF: sub_1000FC80+174j
		movzx	eax, byte ptr [edx]
		movzx	esi, byte ptr [ecx]
		sub	eax, esi
		jnz	short loc_1000FE32
		movzx	eax, byte ptr [edx+1]
		movzx	esi, byte ptr [ecx+1]
		sub	eax, esi
		jnz	short loc_1000FE32
		movzx	eax, byte ptr [edx+2]
		movzx	esi, byte ptr [ecx+2]
		sub	eax, esi
		jnz	short loc_1000FE32
		movzx	eax, byte ptr [edx+3]
		movzx	edx, byte ptr [ecx+3]
		sub	eax, edx

loc_1000FE32:				; CODE XREF: sub_1000FC80+18Ej
					; sub_1000FC80+19Aj ...
		sar	eax, 1Fh
		or	eax, 1
		jnz	short loc_1000FE5C

loc_1000FE3A:				; CODE XREF: sub_1000FC80+184j
		mov	esi, [ebp+Size]
		mov	ecx, [ebp+Dst]
		add	esi, 0FFFFFFF8h
		push	esi		; Size
		lea	eax, [edi+8]
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		mov	eax, [ebp+arg_8]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000FE7E
		mov	[eax], esi
		jmp	short loc_1000FE7E
; ---------------------------------------------------------------------------

loc_1000FE5C:				; CODE XREF: sub_1000FC80+1B8j
		push	0FFFFE002h
		mov	[esp+34h+var_24], 0FFFFFFFFh
		call	PORT_SetError_Util
		add	esp, 4

loc_1000FE71:				; CODE XREF: sub_1000FC80+158j
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_1000FE7E
		mov	dword ptr [eax], 0

loc_1000FE7E:				; CODE XREF: sub_1000FC80+1D6j
					; sub_1000FC80+1DAj ...
		mov	edx, [ebp+Size]
		push	edx
		push	edi
		call	PORT_ZFree_Util
		mov	eax, [esp+38h+var_24]
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000FE96:				; CODE XREF: sub_1000FC80+57j
					; sub_1000FC80+61j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000FEAD:				; CODE XREF: sub_1000FC80+22j
					; sub_1000FC80+2Ej
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4

loc_1000FEBA:				; CODE XREF: sub_1000FC80+8Aj
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000FC80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FED0	proc near		; CODE XREF: sub_10015900+4Ap

var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0F8h
		mov	eax, [esp+0F8h+arg_0]
		push	ebx
		mov	ebx, [eax+8]
		push	ebp
		mov	ebp, [eax+0Ch]
		push	esi
		mov	esi, [eax]
		push	edi
		mov	edi, [eax+4]
		bswap	edi
		bswap	esi
		mov	edx, edi
		mov	[esp+108h+var_F8], esi
		bswap	ebx
		mov	[esp+108h+var_78], esi
		shl	esi, 0Fh
		bswap	ebp
		shr	edx, 11h
		add	edx, esi
		mov	esi, ebx
		mov	[esp+108h+var_E0], edi
		shl	edi, 0Fh
		shr	esi, 11h
		add	esi, edi
		mov	edi, ebp
		mov	eax, ebx
		shl	ebx, 0Fh
		mov	ecx, ebp
		shl	ebp, 0Fh
		shr	edi, 11h
		add	edi, ebx
		mov	ebx, [esp+108h+var_F8]
		shr	ebx, 11h
		add	ebx, ebp
		mov	[esp+108h+var_F8], edx
		mov	ebp, esi
		shr	ebp, 2
		mov	[esp+108h+var_68], edx
		shl	edx, 1Eh
		add	edx, ebp
		mov	ebp, edi
		shr	ebp, 2
		mov	[esp+108h+var_D0], esi
		shl	esi, 1Eh
		add	esi, ebp
		mov	ebp, ebx
		mov	[esp+108h+var_64], edi
		shr	ebp, 2
		shl	edi, 1Eh
		add	edi, ebp
		mov	ebp, [esp+108h+var_F8]
		mov	[esp+108h+var_CC], ebx
		shl	ebx, 1Eh
		shr	ebp, 2
		add	ebx, ebp
		mov	[esp+108h+var_F4], ebx
		mov	ebp, edi
		mov	[esp+108h+var_B4], ebx
		mov	ebx, esi
		mov	[esp+108h+var_B8], esi
		mov	[esp+108h+var_F8], edx
		shl	esi, 0Fh
		mov	[esp+108h+var_50], edx
		shl	edx, 0Fh
		shr	ebp, 11h
		add	ebp, esi
		mov	esi, [esp+108h+var_F4]
		shr	ebx, 11h
		add	ebx, edx
		mov	[esp+108h+var_4C], edi
		mov	edx, esi
		shl	edi, 0Fh
		shr	edx, 11h
		add	edx, edi
		mov	edi, [esp+108h+var_F8]
		shr	edi, 11h
		shl	esi, 0Fh
		add	edi, esi
		mov	[esp+108h+var_F4], edi
		mov	[esp+108h+var_44], edx
		mov	[esp+108h+var_AC], edi
		mov	edi, edx
		mov	esi, ebp
		shl	edx, 11h
		mov	[esp+108h+var_F8], ebx
		shl	ebp, 11h
		shr	esi, 0Fh
		shl	ebx, 11h
		add	esi, ebx
		shr	edi, 0Fh
		add	edi, ebp
		mov	ebp, [esp+108h+var_F4]
		mov	ebx, ebp
		shr	ebx, 0Fh
		add	ebx, edx
		mov	edx, [esp+108h+var_F8]
		shr	edx, 0Fh
		shl	ebp, 11h
		add	ebp, edx
		mov	[esp+108h+var_F8], esi
		mov	[esp+108h+var_38], esi
		shl	esi, 11h
		mov	edx, edi
		shr	edx, 0Fh
		add	edx, esi
		mov	esi, ebx
		mov	[esp+108h+var_A0], edi
		shr	esi, 0Fh
		shl	edi, 11h
		add	esi, edi
		mov	edi, ebp
		mov	[esp+108h+var_34], ebx
		shl	ebx, 11h
		shr	edi, 0Fh
		add	edi, ebx
		mov	ebx, [esp+108h+var_F8]
		mov	[esp+108h+var_F8], edx
		mov	[esp+108h+var_30], edx
		shl	edx, 11h
		mov	[esp+108h+var_9C], ebp
		shl	ebp, 11h
		shr	ebx, 0Fh
		add	ebx, ebp
		mov	ebp, esi
		shr	ebp, 0Fh
		add	ebp, edx
		mov	[esp+108h+var_98], esi
		shl	esi, 11h
		mov	edx, edi
		shr	edx, 0Fh
		add	edx, esi
		mov	[esp+108h+var_88], edx
		mov	edx, [esp+108h+var_F8]
		shr	edx, 0Fh
		mov	esi, ebx
		mov	[esp+108h+var_2C], edi
		shr	esi, 0Fh
		shl	edi, 11h
		add	esi, edi
		mov	[esp+108h+var_94], ebx
		shl	ebx, 11h
		add	edx, ebx
		mov	ebx, [esp+108h+var_E0]
		mov	[esp+108h+var_84], edx
		mov	[esp+108h+var_1C], esi
		mov	esi, [esp+108h+var_78]
		xor	esi, 0A09E667Fh
		xor	ebx, 3BCC908Bh
		mov	edx, ebx
		shr	edx, 10h
		mov	[esp+108h+var_F8], edx
		mov	edi, esi
		shr	edi, 10h
		mov	[esp+108h+var_20], ebp
		mov	edx, edi
		shr	edx, 8
		mov	ebp, esi
		and	edx, 0FFh
		mov	edx, ds:dword_1003E2F8[edx*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edx, ds:dword_1003EAF8[ebp*4]
		and	esi, 0FFh
		and	edi, 0FFh
		xor	edx, ds:dword_1003E6F8[edi*4]
		mov	ebp, ebx
		xor	edx, ds:dword_1003EEF8[esi*4]
		mov	esi, [esp+108h+var_F8]
		shr	ebp, 8
		mov	edi, esi
		and	ebp, 0FFh
		shr	edi, 8
		and	ebx, 0FFh
		and	esi, 0FFh
		and	edi, 0FFh
		mov	edi, ds:dword_1003E6F8[edi*4]
		xor	edi, ds:dword_1003EEF8[ebp*4]
		xor	edi, ds:dword_1003EAF8[esi*4]
		xor	edi, ds:dword_1003E2F8[ebx*4]
		mov	ebx, edx
		xor	edi, edx
		shl	ebx, 18h
		shr	edx, 8
		add	ebx, edx
		xor	ebx, edi
		mov	[esp+108h+var_EC], ebx
		xor	ebx, ecx
		xor	ebx, 4CAA73B2h
		mov	ebp, ebx
		shr	ebp, 10h
		mov	[esp+108h+var_F8], ebp
		mov	edx, edi
		xor	edx, eax
		xor	edx, 0B67AE858h
		mov	esi, edx
		shr	esi, 10h
		mov	[esp+108h+var_F4], esi
		mov	ebp, edx
		shr	ebp, 8
		shr	esi, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_1003E2F8[esi*4]
		xor	esi, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+108h+var_F4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003E6F8[ebp*4]
		and	edx, 0FFh
		xor	esi, ds:dword_1003EEF8[edx*4]
		mov	edx, [esp+108h+var_F8]
		mov	ebp, ebx
		shr	edx, 8
		shr	ebp, 8
		and	edx, 0FFh
		mov	edx, ds:dword_1003E6F8[edx*4]
		and	ebp, 0FFh
		xor	edx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, [esp+108h+var_F8]
		and	ebx, 0FFh
		and	ebp, 0FFh
		xor	edx, ds:dword_1003EAF8[ebp*4]
		xor	edx, ds:dword_1003E2F8[ebx*4]
		mov	ebx, esi
		shl	ebx, 18h
		xor	edx, esi
		shr	esi, 8
		add	ebx, esi
		xor	ebx, edx
		mov	[esp+108h+var_E8], ebx
		xor	ebx, 0E94F82BEh
		mov	esi, edx
		xor	esi, 0C6EF372Fh
		mov	[esp+108h+var_E4], ebx
		shr	ebx, 10h
		mov	ebp, esi
		shr	ebp, 10h
		mov	[esp+108h+var_F8], ebx
		mov	[esp+108h+var_F4], ebp
		shr	ebp, 8
		mov	ebx, esi
		shr	ebx, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	[esp+108h+var_F0], ebx
		mov	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+108h+var_F0]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+108h+var_F4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, [esp+108h+var_E4]
		and	esi, 0FFh
		xor	ebx, ds:dword_1003EEF8[esi*4]
		mov	esi, [esp+108h+var_F8]
		shr	ebp, 8
		shr	esi, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_1003E6F8[esi*4]
		xor	esi, ds:dword_1003EEF8[ebp*4]
		mov	ebp, [esp+108h+var_F8]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+108h+var_E4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003E2F8[ebp*4]
		mov	ebp, ebx
		xor	esi, ebx
		shr	ebx, 8
		shl	ebp, 18h
		add	ebp, ebx
		xor	ebp, esi
		xor	ebp, [esp+108h+var_EC]
		xor	esi, edi
		mov	ebx, ebp
		xor	ebx, 0F1D36F1Ch
		mov	[esp+108h+var_E4], ebx
		mov	edi, esi
		xor	edi, 54FF53A5h
		mov	ebx, edi
		shr	ebx, 10h
		mov	[esp+108h+var_F4], ebx
		mov	ebx, [esp+108h+var_E4]
		shr	ebx, 10h
		mov	[esp+108h+var_F8], ebx
		mov	ebx, [esp+108h+var_F4]
		mov	[esp+108h+var_EC], edi
		shr	edi, 8
		shr	ebx, 8
		and	edi, 0FFh
		and	ebx, 0FFh
		mov	[esp+108h+var_F0], edi
		mov	edi, ds:dword_1003E2F8[ebx*4]
		mov	ebx, [esp+108h+var_F0]
		xor	edi, ds:dword_1003EAF8[ebx*4]
		mov	ebx, [esp+108h+var_F4]
		and	ebx, 0FFh
		xor	edi, ds:dword_1003E6F8[ebx*4]
		mov	ebx, [esp+108h+var_EC]
		and	ebx, 0FFh
		xor	edi, ds:dword_1003EEF8[ebx*4]
		mov	ebx, [esp+108h+var_E4]
		mov	[esp+108h+var_EC], edi
		mov	edi, [esp+108h+var_F8]
		shr	edi, 8
		and	edi, 0FFh
		mov	edi, ds:dword_1003E6F8[edi*4]
		shr	ebx, 8
		and	ebx, 0FFh
		xor	edi, ds:dword_1003EEF8[ebx*4]
		mov	ebx, [esp+108h+var_F8]
		and	ebx, 0FFh
		xor	edi, ds:dword_1003EAF8[ebx*4]
		mov	ebx, [esp+108h+var_E4]
		and	ebx, 0FFh
		xor	edi, ds:dword_1003E2F8[ebx*4]
		mov	ebx, [esp+108h+var_EC]
		xor	edi, ebx
		mov	[esp+108h+var_F8], edi
		xor	edx, edi
		mov	edi, ebx
		shl	edi, 18h
		shr	ebx, 8
		add	edi, ebx
		xor	edi, [esp+108h+var_F8]
		mov	ebx, [esp+108h+var_E8]
		xor	ebx, edi
		mov	[esp+108h+var_F8], edx
		mov	[esp+108h+var_70], edx
		shl	edx, 0Fh
		mov	edi, ebx
		shr	edi, 11h
		add	edi, edx
		mov	edx, esi
		mov	[esp+108h+var_D8], ebx
		shr	edx, 11h
		shl	ebx, 0Fh
		add	edx, ebx
		mov	[esp+108h+var_6C], esi
		shl	esi, 0Fh
		mov	ebx, ebp
		shr	ebx, 11h
		add	ebx, esi
		mov	esi, [esp+108h+var_F8]
		shr	esi, 11h
		mov	[esp+108h+var_D4], ebp
		shl	ebp, 0Fh
		add	ebp, esi
		mov	esi, edx
		mov	[esp+108h+var_F8], edi
		mov	[esp+108h+var_60], edi
		shl	edi, 0Fh
		shr	esi, 11h
		add	esi, edi
		mov	[esp+108h+var_C8], edx
		shl	edx, 0Fh
		mov	edi, ebx
		shr	edi, 11h
		add	edi, edx
		mov	[esp+108h+var_5C], ebx
		mov	edx, ebp
		shr	edx, 11h
		shl	ebx, 0Fh
		add	edx, ebx
		mov	ebx, [esp+108h+var_F8]
		mov	[esp+108h+var_C4], ebp
		shr	ebx, 11h
		shl	ebp, 0Fh
		add	ebp, ebx
		mov	[esp+108h+var_F8], esi
		mov	[esp+108h+var_58], esi
		mov	ebx, edi
		shl	esi, 0Fh
		shr	ebx, 11h
		add	ebx, esi
		mov	esi, edx
		mov	[esp+108h+var_C0], edi
		shl	edi, 0Fh
		shr	esi, 11h
		add	esi, edi
		mov	[esp+108h+var_54], edx
		shl	edx, 0Fh
		mov	edi, ebp
		shr	edi, 11h
		add	edi, edx
		mov	edx, [esp+108h+var_F8]
		mov	[esp+108h+var_BC], ebp
		shr	edx, 11h
		shl	ebp, 0Fh
		add	edx, ebp
		mov	ebp, esi
		mov	[esp+108h+var_F4], edx
		mov	[esp+108h+var_48], ebx
		mov	[esp+108h+var_F8], ebx
		shl	ebx, 0Fh
		mov	[esp+108h+var_B0], esi
		shr	ebp, 11h
		mov	edx, edi
		shl	esi, 0Fh
		add	ebp, ebx
		mov	ebx, [esp+108h+var_F4]
		shr	edx, 11h
		add	edx, esi
		mov	esi, ebx
		shr	esi, 11h
		shl	edi, 0Fh
		add	esi, edi
		mov	edi, [esp+108h+var_F8]
		shl	ebx, 0Fh
		mov	[esp+108h+var_40], ebp
		mov	[esp+108h+var_F8], ebp
		shr	edi, 11h
		add	edi, ebx
		mov	ebp, esi
		shr	ebp, 1Eh
		mov	ebx, edx
		mov	[esp+108h+var_A8], edx
		lea	edx, [ebp+edx*4+0]
		mov	ebp, edi
		shr	ebp, 1Eh
		mov	[esp+108h+var_3C], esi
		lea	esi, [ebp+esi*4+0]
		mov	ebp, [esp+108h+var_F8]
		mov	[esp+108h+var_A4], edi
		shr	ebx, 1Eh
		shr	ebp, 1Eh
		lea	edi, [ebp+edi*4+0]
		mov	ebp, [esp+108h+var_F8]
		lea	ebx, [ebx+ebp*4]
		xor	[esp+108h+var_6C], eax
		xor	[esp+108h+var_64], eax
		xor	[esp+108h+var_5C], eax
		mov	[esp+108h+var_F4], ebx
		mov	ebx, edx
		mov	[esp+108h+var_28], edx
		mov	ebp, esi
		shl	edx, 11h
		shr	ebp, 0Fh
		add	ebp, edx
		mov	edx, edi
		xor	[esp+108h+var_D4], ecx
		xor	[esp+108h+var_CC], ecx
		xor	[esp+108h+var_C4], ecx
		mov	[esp+108h+var_90], esi
		shl	esi, 11h
		shr	edx, 0Fh
		add	edx, esi
		mov	esi, [esp+108h+var_F4]
		shr	ebx, 0Fh
		mov	[esp+108h+var_24], edi
		mov	[esp+108h+var_E8], edx
		mov	edx, esi
		shl	edi, 11h
		shl	esi, 11h
		add	ebx, esi
		mov	esi, [esp+108h+var_BC]
		shr	edx, 0Fh
		add	edx, edi
		not	esi
		mov	edi, esi
		and	edi, ecx
		xor	eax, edi
		mov	edi, [esp+108h+var_54]
		xor	[esp+108h+var_4C], eax
		xor	[esp+108h+var_44], eax
		xor	[esp+108h+var_3C], eax
		mov	[esp+108h+var_7C], ebx
		and	edi, eax
		mov	ebx, edi
		shr	ebx, 1Fh
		lea	edi, [ebx+edi*2]
		xor	ecx, edi
		mov	edi, [esp+108h+var_9C]
		xor	[esp+108h+var_B4], ecx
		xor	[esp+108h+var_AC], ecx
		xor	[esp+108h+var_A4], ecx
		not	edi
		mov	ebx, edi
		and	ebx, ecx
		xor	eax, ebx
		mov	ebx, [esp+108h+var_34]
		and	ebx, eax
		mov	[esp+108h+var_F0], ebp
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	[esp+108h+var_2C], eax
		xor	[esp+108h+var_24], eax
		xor	[esp+108h+var_1C], eax
		xor	eax, [esp+108h+var_F0]
		xor	[esp+108h+var_20], edx
		xor	[esp+108h+var_28], edx
		xor	[esp+108h+var_30], edx
		xor	ecx, ebx
		xor	[esp+108h+var_94], ecx
		xor	[esp+108h+var_84], ecx
		mov	ebx, ecx
		xor	ecx, [esp+108h+var_E8]
		xor	ebx, [esp+108h+var_F4]
		mov	[esp+108h+var_80], ecx
		mov	ecx, [esp+108h+var_7C]
		xor	[esp+108h+var_88], ecx
		xor	[esp+108h+var_90], ecx
		xor	[esp+108h+var_98], ecx
		mov	[esp+108h+var_8C], ebx
		mov	ebx, [esp+108h+var_A0]
		mov	[esp+108h+var_18], eax
		not	ebx
		mov	eax, ebx
		and	eax, ecx
		xor	eax, edx
		xor	[esp+108h+var_50], eax
		xor	[esp+108h+var_40], eax
		xor	[esp+108h+var_48], eax
		mov	edx, eax
		and	edx, [esp+108h+var_38]
		mov	ebp, edx
		shr	ebp, 1Fh
		lea	edx, [ebp+edx*2+0]
		xor	edx, ecx
		mov	ecx, [esp+108h+var_C0]
		xor	[esp+108h+var_B8], edx
		xor	[esp+108h+var_A8], edx
		xor	[esp+108h+var_B0], edx
		not	ecx
		mov	[esp+108h+var_F0], ecx
		and	ecx, edx
		xor	eax, ecx
		xor	[esp+108h+var_68], eax
		xor	[esp+108h+var_60], eax
		mov	ecx, eax
		and	ecx, [esp+108h+var_58]
		mov	ebp, ecx
		shr	ebp, 1Fh
		lea	ecx, [ebp+ecx*2+0]
		mov	ebp, [esp+108h+var_78]
		xor	edx, ecx
		xor	[esp+108h+var_C8], edx
		xor	[esp+108h+var_D0], edx
		xor	[esp+108h+var_D8], edx
		xor	[esp+108h+var_E0], edx
		mov	ecx, [esp+108h+var_70]
		xor	ecx, eax
		mov	edx, ecx
		xor	ebp, eax
		mov	eax, [esp+108h+arg_4]
		xor	edx, ebp
		mov	[eax], edx
		mov	edx, [esp+108h+var_D8]
		xor	edx, [esp+108h+var_E0]
		mov	[eax+4], edx
		mov	edx, ecx
		mov	ecx, [esp+108h+var_6C]
		xor	ecx, [esp+108h+var_64]
		xor	edx, [esp+108h+var_68]
		mov	[esp+108h+var_E4], ecx
		mov	ecx, [esp+108h+var_60]
		xor	ecx, [esp+108h+var_68]
		mov	[esp+108h+var_F4], ecx
		mov	ecx, [esp+108h+var_5C]
		xor	ecx, [esp+108h+var_64]
		mov	[esp+108h+var_F8], ecx
		mov	ecx, [esp+108h+var_F0]
		and	ecx, [esp+108h+var_B8]
		xor	ecx, [esp+108h+var_50]
		mov	[esp+108h+var_E8], ecx
		and	ecx, [esp+108h+var_58]
		mov	[esp+108h+var_EC], ecx
		mov	ecx, [esp+108h+var_E8]
		xor	ecx, [esp+108h+var_60]
		and	ebx, [esp+108h+var_98]
		mov	[eax+38h], ecx
		mov	ecx, [esp+108h+var_EC]
		mov	ebp, ecx
		shr	ebp, 1Fh
		lea	ecx, [ebp+ecx*2+0]
		xor	ecx, [esp+108h+var_C8]
		mov	ebp, [esp+108h+var_C4]
		xor	ecx, [esp+108h+var_B8]
		and	esi, ebp
		mov	[eax+3Ch], ecx
		mov	ecx, [esp+108h+var_58]
		xor	esi, [esp+108h+var_5C]
		mov	[eax+40h], ecx
		mov	ecx, [esp+108h+var_C0]
		mov	[eax+44h], ecx
		mov	ecx, [esp+108h+var_54]
		mov	[eax+48h], ecx
		mov	ecx, [esp+108h+var_BC]
		mov	[eax+4Ch], ecx
		xor	ebx, [esp+108h+var_30]
		mov	ecx, esi
		and	ecx, [esp+108h+var_54]
		xor	esi, [esp+108h+var_4C]
		and	edi, [esp+108h+var_A4]
		mov	[eax+50h], esi
		mov	esi, ecx
		shr	esi, 1Fh
		lea	ecx, [esi+ecx*2]
		xor	ecx, ebp
		xor	ecx, [esp+108h+var_B4]
		xor	edi, [esp+108h+var_3C]
		mov	[eax+54h], ecx
		mov	ecx, [esp+108h+var_44]
		xor	ecx, [esp+108h+var_4C]
		mov	esi, [esp+108h+var_48]
		mov	[esp+108h+var_F0], ecx
		mov	ecx, [esp+108h+var_40]
		xor	ecx, [esp+108h+var_48]
		mov	ebp, [esp+108h+var_3C]
		mov	[esp+108h+var_C], ecx
		mov	ecx, ebx
		and	ecx, [esp+108h+var_38]
		xor	ebx, [esp+108h+var_40]
		xor	esi, [esp+108h+var_50]
		mov	[eax+78h], ebx
		mov	ebx, ecx
		shr	ebx, 1Fh
		lea	ecx, [ebx+ecx*2]
		xor	ecx, [esp+108h+var_A8]
		mov	ebx, [esp+108h+var_34]
		xor	ecx, [esp+108h+var_98]
		xor	ebp, [esp+108h+var_44]
		mov	[eax+7Ch], ecx
		mov	ecx, [esp+108h+var_38]
		mov	[eax+80h], ecx
		mov	ecx, [esp+108h+var_A0]
		mov	[eax+84h], ecx
		mov	ecx, [esp+108h+var_9C]
		mov	[eax+8Ch], ecx
		mov	ecx, edi
		and	ecx, ebx
		xor	edi, [esp+108h+var_2C]
		mov	[eax+88h], ebx
		mov	ebx, ecx
		shr	ebx, 1Fh
		lea	ecx, [ebx+ecx*2]
		xor	ecx, [esp+108h+var_A4]
		xor	ecx, [esp+108h+var_94]
		mov	[eax+94h], ecx
		mov	ecx, [esp+108h+var_28]
		xor	ecx, [esp+108h+var_30]
		mov	[esp+108h+var_E8], ecx
		mov	ecx, [esp+108h+var_24]
		xor	ecx, [esp+108h+var_2C]
		mov	[esp+108h+var_10], ecx
		mov	ecx, [esp+108h+var_28]
		xor	ecx, [esp+108h+var_20]
		mov	ebx, [esp+108h+var_1C]
		mov	[esp+108h+var_4], ecx
		mov	ecx, [esp+108h+var_24]
		xor	ecx, ebx
		mov	[esp+108h+var_8], ecx
		mov	ecx, [esp+108h+var_18]
		xor	ecx, ebx
		mov	[eax+0C0h], ecx
		mov	ecx, [esp+108h+var_80]
		xor	ecx, [esp+108h+var_84]
		mov	[eax+0C4h], ecx
		mov	ecx, [esp+108h+var_D4]
		xor	ecx, [esp+108h+var_6C]
		mov	ebx, ecx
		shr	ecx, 18h
		shl	ebx, 8
		add	ebx, ecx
		mov	[esp+108h+var_EC], ebx
		xor	ebx, [esp+108h+var_6C]
		mov	ecx, [esp+108h+var_EC]
		mov	[eax+10h], ecx
		mov	ecx, edx
		xor	ecx, [esp+108h+var_D8]
		mov	[eax+14h], ebx
		xor	ecx, [esp+108h+var_D0]
		mov	ebx, ecx
		shr	ecx, 18h
		shl	ebx, 8
		add	ebx, ecx
		xor	edx, ebx
		mov	[eax+18h], ebx
		mov	ebx, [esp+108h+var_E4]
		mov	ecx, ebx
		xor	ecx, [esp+108h+var_D4]
		mov	[eax+1Ch], edx
		xor	ecx, [esp+108h+var_CC]
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	ebx, edx
		mov	[eax+24h], ebx
		mov	ebx, [esp+108h+var_F4]
		mov	ecx, ebx
		xor	ecx, [esp+108h+var_C8]
		mov	[eax+20h], edx
		xor	ecx, [esp+108h+var_D0]
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	ebx, edx
		mov	[eax+2Ch], ebx
		mov	ebx, [esp+108h+var_F8]
		mov	ecx, ebx
		xor	ecx, [esp+108h+var_C4]
		mov	[eax+28h], edx
		xor	ecx, [esp+108h+var_CC]
		mov	edx, ecx
		shl	edx, 8
		shr	ecx, 18h
		add	edx, ecx
		mov	ecx, [eax+3Ch]
		xor	ebx, edx
		mov	[eax+34h], ebx
		mov	ebx, [eax+38h]
		xor	ecx, ebx
		mov	[eax+30h], edx
		mov	edx, ecx
		shl	edx, 8
		shr	ecx, 18h
		add	edx, ecx
		mov	ecx, [eax+54h]
		xor	ebx, edx
		mov	[eax+3Ch], ebx
		mov	ebx, [eax+50h]
		xor	ecx, ebx
		mov	[eax+38h], edx
		mov	edx, ecx
		shl	edx, 8
		shr	ecx, 18h
		add	edx, ecx
		xor	ebx, edx
		mov	[eax+50h], edx
		mov	ecx, esi
		mov	[eax+54h], ebx
		mov	ebx, [esp+108h+var_B0]
		xor	ecx, ebx
		xor	ecx, [esp+108h+var_B8]
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	esi, edx
		mov	[eax+5Ch], esi
		mov	esi, [esp+108h+var_F0]
		mov	[eax+58h], edx
		mov	ecx, esi
		xor	ecx, [esp+108h+var_AC]
		xor	ecx, [esp+108h+var_B4]
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	esi, edx
		mov	[eax+64h], esi
		mov	esi, [esp+108h+var_C]
		mov	[eax+60h], edx
		mov	ecx, esi
		xor	ecx, [esp+108h+var_A8]
		xor	ecx, ebx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	esi, edx
		mov	[eax+68h], edx
		mov	ecx, ebp
		xor	ecx, [esp+108h+var_A4]
		mov	ebx, [esp+108h+var_90]
		xor	ecx, [esp+108h+var_AC]
		mov	[eax+6Ch], esi
		mov	esi, [eax+78h]
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, [eax+7Ch]
		xor	ecx, esi
		xor	ebp, edx
		mov	[eax+70h], edx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, [eax+94h]
		xor	esi, edx
		xor	ecx, edi
		mov	[eax+78h], edx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	[eax+7Ch], esi
		mov	esi, [esp+108h+var_E8]
		mov	ecx, esi
		xor	ecx, ebx
		xor	ecx, [esp+108h+var_98]
		xor	edi, edx
		mov	[eax+90h], edx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	esi, edx
		mov	[eax+9Ch], esi
		mov	esi, [esp+108h+var_10]
		mov	[eax+74h], ebp
		mov	ebp, [esp+108h+var_8C]
		mov	[eax+94h], edi
		mov	[eax+98h], edx
		mov	ecx, esi
		mov	edi, [esp+108h+var_4]
		xor	ecx, ebp
		xor	ecx, [esp+108h+var_94]
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	esi, edx
		mov	ecx, edi
		xor	ecx, ebx
		mov	[eax+0A0h], edx
		mov	[eax+0A4h], esi
		mov	esi, [esp+108h+var_88]
		xor	ecx, esi
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	edi, edx
		mov	[eax+0ACh], edi
		mov	edi, [esp+108h+var_8]
		mov	ecx, edi
		xor	ecx, ebp
		xor	ecx, [esp+108h+var_84]
		mov	[eax+0A8h], edx
		mov	edx, ecx
		shl	edx, 8
		shr	ecx, 18h
		add	edx, ecx
		xor	edi, edx
		mov	[eax+0B4h], edi
		mov	edi, [esp+108h+var_20]
		xor	esi, edi
		mov	[eax+0B0h], edx
		mov	edx, esi
		mov	ecx, edx
		shr	edx, 18h
		shl	ecx, 8
		add	ecx, edx
		mov	edx, ecx
		xor	edx, edi
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax+0BCh], edx
		mov	[eax+0B8h], ecx
		pop	ebx
		add	esp, 0F8h
		retn
sub_1000FED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010B90	proc near		; CODE XREF: sub_10011E80+47p
					; sub_10015900+22p

var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A4		= dword	ptr -0A4h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 158h
		mov	eax, [esp+158h+arg_0]
		mov	ecx, [eax+10h]
		mov	edx, [eax+4]
		push	ebx
		mov	ebx, [eax]
		push	ebp
		push	esi
		mov	esi, [eax+8]
		push	edi
		mov	edi, [eax+0Ch]
		bswap	ecx
		mov	[esp+168h+var_144], ecx
		mov	ecx, [eax+14h]
		bswap	edx
		bswap	esi
		bswap	edi
		bswap	ecx
		mov	[esp+168h+var_154], edx
		mov	ebp, esi
		shr	ebp, 13h
		mov	[esp+168h+var_A4], edx
		shl	edx, 0Dh
		add	edx, ebp
		mov	ebp, edi
		mov	[esp+168h+var_140], ecx
		mov	ecx, [eax+18h]
		mov	eax, [eax+1Ch]
		shr	ebp, 13h
		bswap	ebx
		bswap	eax
		mov	[esp+168h+var_148], eax
		mov	eax, esi
		shl	esi, 0Dh
		add	esi, ebp
		mov	ebp, ebx
		shr	ebp, 13h
		bswap	ecx
		mov	[esp+168h+var_138], ecx
		mov	ecx, edi
		shl	edi, 0Dh
		add	edi, ebp
		mov	ebp, [esp+168h+var_154]
		mov	[esp+168h+var_12C], ebx
		shl	ebx, 0Dh
		shr	ebp, 13h
		add	ebp, ebx
		mov	[esp+168h+var_158], edx
		mov	ebx, esi
		mov	[esp+168h+var_FC], edx
		shl	edx, 0Fh
		shr	ebx, 11h
		add	ebx, edx
		mov	edx, edi
		mov	[esp+168h+var_74], esi
		mov	[esp+168h+var_F8], edi
		shl	esi, 0Fh
		shl	edi, 0Fh
		shr	edx, 11h
		add	edx, esi
		mov	esi, ebp
		shr	esi, 11h
		add	esi, edi
		mov	edi, [esp+168h+var_158]
		shr	edi, 11h
		mov	[esp+168h+var_70], ebp
		shl	ebp, 0Fh
		add	ebp, edi
		mov	edi, edx
		shr	edi, 0Fh
		mov	[esp+168h+var_EC], ebx
		mov	[esp+168h+var_158], ebx
		shl	ebx, 11h
		add	edi, ebx
		mov	[esp+168h+var_150], edi
		mov	edi, esi
		mov	[esp+168h+var_64], edx
		shr	edi, 0Fh
		shl	edx, 11h
		mov	[esp+168h+var_E8], esi
		mov	[esp+168h+var_60], ebp
		add	edi, edx
		mov	ebx, [esp+168h+var_150]
		shl	esi, 11h
		mov	edx, ebp
		shr	edx, 0Fh
		add	edx, esi
		mov	esi, [esp+168h+var_158]
		mov	[esp+168h+var_158], ebx
		mov	[esp+168h+var_D4], ebx
		mov	ebx, edx
		shr	ebx, 1Eh
		shr	esi, 0Fh
		shl	ebp, 11h
		add	esi, ebp
		lea	ebp, [ebx+edi*4]
		mov	[esp+168h+var_D0], edx
		mov	ebx, esi
		shr	ebx, 1Eh
		lea	edx, [ebx+edx*4]
		mov	ebx, [esp+168h+var_158]
		mov	[esp+168h+var_134], edx
		mov	edx, ebx
		shr	edx, 1Eh
		mov	[esp+168h+var_48], esi
		lea	esi, [edx+esi*4]
		mov	edx, [esp+168h+var_134]
		mov	[esp+168h+var_2C], edx
		mov	[esp+168h+var_4C], edi
		shr	edi, 1Eh
		lea	edx, [edi+ebx*4]
		mov	ebx, [esp+168h+var_140]
		mov	[esp+168h+var_28], edx
		mov	edx, [esp+168h+var_144]
		mov	[esp+168h+var_B0], esi
		mov	esi, ebx
		mov	[esp+168h+var_B4], ebp
		mov	ebp, edx
		shl	edx, 0Fh
		shr	esi, 11h
		add	esi, edx
		mov	edx, [esp+168h+var_138]
		mov	edi, edx
		shl	ebx, 0Fh
		shr	edi, 11h
		add	edi, ebx
		mov	ebx, [esp+168h+var_148]
		shl	edx, 0Fh
		shr	ebx, 11h
		add	ebx, edx
		mov	edx, [esp+168h+var_148]
		shl	edx, 0Fh
		shr	ebp, 11h
		add	ebp, edx
		mov	[esp+168h+var_158], esi
		mov	edx, edi
		mov	[esp+168h+var_11C], esi
		shl	esi, 0Fh
		shr	edx, 11h
		add	edx, esi
		mov	esi, ebx
		mov	[esp+168h+var_94], edi
		shl	edi, 0Fh
		shr	esi, 11h
		add	esi, edi
		mov	edi, ebp
		mov	[esp+168h+var_118], ebx
		shl	ebx, 0Fh
		shr	edi, 11h
		add	edi, ebx
		mov	ebx, [esp+168h+var_158]
		mov	[esp+168h+var_90], ebp
		shl	ebp, 0Fh
		shr	ebx, 11h
		add	ebx, ebp
		mov	[esp+168h+var_10C], edx
		mov	[esp+168h+var_158], edx
		mov	ebp, esi
		shl	edx, 1Eh
		mov	[esp+168h+var_84], esi
		mov	[esp+168h+var_108], edi
		mov	[esp+168h+var_80], ebx
		shr	ebp, 2
		add	edx, ebp
		mov	ebp, edi
		shr	ebp, 2
		shl	esi, 1Eh
		add	esi, ebp
		mov	ebp, ebx
		shr	ebp, 2
		shl	edi, 1Eh
		add	edi, ebp
		mov	ebp, [esp+168h+var_158]
		shr	ebp, 2
		mov	[esp+168h+var_158], edx
		mov	[esp+168h+var_E4], edx
		shl	ebx, 1Eh
		add	ebx, ebp
		mov	ebp, edi
		shr	ebp, 1Eh
		mov	edx, esi
		mov	[esp+168h+var_5C], esi
		lea	esi, [ebp+esi*4+0]
		mov	ebp, ebx
		shr	ebp, 1Eh
		mov	[esp+168h+var_E0], edi
		lea	edi, [ebp+edi*4+0]
		mov	ebp, [esp+168h+var_158]
		shr	ebp, 1Eh
		shr	edx, 1Eh
		mov	[esp+168h+var_58], ebx
		lea	ebx, [ebp+ebx*4+0]
		mov	ebp, [esp+168h+var_158]
		lea	edx, [edx+ebp*4]
		mov	[esp+168h+var_158], esi
		mov	ebp, ebx
		shr	ebp, 1Eh
		mov	[esp+168h+var_C4], esi
		mov	esi, edi
		mov	[esp+168h+var_3C], edi
		lea	edi, [ebp+edi*4+0]
		mov	ebp, edx
		shr	ebp, 1Eh
		mov	[esp+168h+var_C0], ebx
		lea	ebx, [ebp+ebx*4+0]
		mov	[esp+168h+var_38], edx
		mov	[esp+168h+var_140], ebx
		mov	ebx, [esp+168h+var_158]
		mov	ebp, ebx
		shr	ebp, 1Eh
		lea	edx, [ebp+edx*4+0]
		mov	[esp+168h+var_138], edx
		shr	esi, 1Eh
		lea	edx, [esi+ebx*4]
		mov	ebx, [esp+168h+var_A4]
		xor	ebx, [esp+168h+var_140]
		mov	esi, [esp+168h+var_12C]
		xor	esi, edi
		mov	[esp+168h+var_148], edx
		mov	[esp+168h+var_144], edi
		xor	esi, 0A09E667Fh
		xor	ebx, 3BCC908Bh
		mov	edi, esi
		shr	edi, 10h
		mov	edx, ebx
		shr	edx, 10h
		mov	[esp+168h+var_158], edx
		mov	edx, edi
		shr	edx, 8
		and	edx, 0FFh
		mov	edx, ds:dword_1003E2F8[edx*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edx, ds:dword_1003EAF8[ebp*4]
		and	edi, 0FFh
		xor	edx, ds:dword_1003E6F8[edi*4]
		and	esi, 0FFh
		xor	edx, ds:dword_1003EEF8[esi*4]
		mov	esi, [esp+168h+var_158]
		mov	edi, esi
		shr	edi, 8
		and	edi, 0FFh
		mov	ebp, ebx
		mov	edi, ds:dword_1003E6F8[edi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003EEF8[ebp*4]
		and	ebx, 0FFh
		and	esi, 0FFh
		xor	edi, ds:dword_1003EAF8[esi*4]
		xor	edi, ds:dword_1003E2F8[ebx*4]
		mov	ebx, edx
		xor	edi, edx
		shl	ebx, 18h
		shr	edx, 8
		add	ebx, edx
		xor	ebx, edi
		mov	[esp+168h+var_154], ebx
		xor	ebx, ecx
		xor	ebx, [esp+168h+var_148]
		mov	edx, edi
		xor	edx, eax
		xor	edx, [esp+168h+var_138]
		xor	ebx, 4CAA73B2h
		xor	edx, 0B67AE858h
		mov	ebp, ebx
		shr	ebp, 10h
		mov	[esp+168h+var_158], ebp
		mov	esi, edx
		shr	esi, 10h
		mov	[esp+168h+var_150], esi
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		shr	esi, 8
		and	esi, 0FFh
		mov	esi, ds:dword_1003E2F8[esi*4]
		xor	esi, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+168h+var_150]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003E6F8[ebp*4]
		and	edx, 0FFh
		xor	esi, ds:dword_1003EEF8[edx*4]
		mov	edx, [esp+168h+var_158]
		mov	ebp, ebx
		shr	edx, 8
		shr	ebp, 8
		and	ebp, 0FFh
		and	edx, 0FFh
		mov	edx, ds:dword_1003E6F8[edx*4]
		xor	edx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, [esp+168h+var_158]
		and	ebx, 0FFh
		and	ebp, 0FFh
		xor	edx, ds:dword_1003EAF8[ebp*4]
		xor	edx, ds:dword_1003E2F8[ebx*4]
		mov	ebx, esi
		shl	ebx, 18h
		xor	edx, esi
		shr	esi, 8
		add	ebx, esi
		xor	ebx, edx
		xor	ebx, [esp+168h+var_140]
		xor	edx, [esp+168h+var_144]
		mov	[esp+168h+var_134], ebx
		xor	ebx, 0E94F82BEh
		mov	[esp+168h+var_14C], ebx
		shr	ebx, 10h
		mov	esi, edx
		xor	esi, 0C6EF372Fh
		mov	[esp+168h+var_158], ebx
		mov	ebp, esi
		shr	ebp, 10h
		mov	[esp+168h+var_150], ebp
		shr	ebp, 8
		mov	ebx, esi
		shr	ebx, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	[esp+168h+var_13C], ebx
		mov	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+168h+var_13C]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+168h+var_150]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, [esp+168h+var_14C]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, [esp+168h+var_138]
		and	esi, 0FFh
		xor	ebx, ds:dword_1003EEF8[esi*4]
		mov	esi, [esp+168h+var_158]
		shr	esi, 8
		and	esi, 0FFh
		mov	esi, ds:dword_1003E6F8[esi*4]
		xor	esi, ds:dword_1003EEF8[ebp*4]
		mov	ebp, [esp+168h+var_158]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+168h+var_14C]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003E2F8[ebp*4]
		mov	ebp, ebx
		shl	ebp, 18h
		xor	esi, ebx
		shr	ebx, 8
		add	ebp, ebx
		xor	ebp, esi
		xor	esi, edi
		mov	edi, [esp+168h+var_154]
		xor	edi, [esp+168h+var_148]
		mov	ebx, esi
		xor	ebp, edi
		mov	[esp+168h+var_13C], ebp
		xor	ebp, 0F1D36F1Ch
		mov	[esp+168h+var_14C], ebp
		shr	ebp, 10h
		xor	ebx, 54FF53A5h
		mov	[esp+168h+var_158], ebp
		mov	edi, ebx
		shr	edi, 10h
		mov	ebp, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	[esp+168h+var_150], edi
		shr	edi, 8
		and	edi, 0FFh
		mov	edi, ds:dword_1003E2F8[edi*4]
		xor	edi, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+168h+var_150]
		and	ebp, 0FFh
		xor	edi, ds:dword_1003E6F8[ebp*4]
		mov	ebp, [esp+168h+var_14C]
		and	ebx, 0FFh
		xor	edi, ds:dword_1003EEF8[ebx*4]
		mov	ebx, [esp+168h+var_158]
		shr	ebp, 8
		shr	ebx, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, [esp+168h+var_158]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+168h+var_14C]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edi
		xor	ebx, edi
		shl	ebp, 18h
		shr	edi, 8
		add	ebp, edi
		mov	edi, [esp+168h+var_144]
		xor	ebp, ebx
		mov	[esp+168h+var_154], ebp
		mov	ebp, [esp+168h+var_134]
		xor	ebp, [esp+168h+var_154]
		xor	edx, ebx
		mov	ebx, [esp+168h+var_140]
		xor	edi, edx
		mov	[esp+168h+var_134], ebp
		mov	[esp+168h+var_144], edi
		xor	ebx, ebp
		mov	[esp+168h+var_140], ebx
		xor	ebx, 0DE682D1Dh
		mov	[esp+168h+var_14C], ebx
		xor	edi, 10E527FAh
		shr	ebx, 10h
		mov	[esp+168h+var_158], ebx
		mov	ebp, edi
		shr	ebp, 10h
		mov	[esp+168h+var_150], ebp
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edi
		shr	ebx, 8
		and	ebx, 0FFh
		mov	[esp+168h+var_154], ebx
		mov	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+168h+var_154]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+168h+var_150]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, [esp+168h+var_14C]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003EEF8[edi*4]
		mov	edi, [esp+168h+var_158]
		shr	ebp, 8
		and	ebp, 0FFh
		mov	[esp+168h+var_154], ebp
		shr	edi, 8
		and	edi, 0FFh
		mov	ebp, ds:dword_1003E6F8[edi*4]
		mov	edi, [esp+168h+var_154]
		xor	ebp, ds:dword_1003EEF8[edi*4]
		mov	edi, [esp+168h+var_158]
		and	edi, 0FFh
		xor	ebp, ds:dword_1003EAF8[edi*4]
		mov	edi, [esp+168h+var_14C]
		and	edi, 0FFh
		xor	ebp, ds:dword_1003E2F8[edi*4]
		xor	ebp, ebx
		mov	edi, ebp
		xor	edi, [esp+168h+var_138]
		xor	edi, esi
		mov	[esp+168h+var_138], edi
		mov	edi, ebx
		shr	ebx, 8
		shl	edi, 18h
		add	edi, ebx
		mov	ebx, [esp+168h+var_138]
		xor	edi, ebp
		xor	edi, [esp+168h+var_148]
		xor	ebx, 0B05688C2h
		xor	edi, [esp+168h+var_13C]
		mov	[esp+168h+var_148], ebx
		mov	ebp, edi
		xor	ebp, 0B3E6C1FDh
		mov	[esp+168h+var_14C], ebp
		mov	ebp, ebx
		shr	ebp, 10h
		mov	[esp+168h+var_150], ebp
		mov	ebp, [esp+168h+var_14C]
		shr	ebp, 10h
		mov	[esp+168h+var_158], ebp
		mov	ebp, [esp+168h+var_150]
		shr	ebx, 8
		shr	ebp, 8
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	[esp+168h+var_154], ebx
		mov	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+168h+var_154]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+168h+var_150]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, [esp+168h+var_148]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	[esp+168h+var_154], ebx
		mov	ebx, [esp+168h+var_158]
		shr	ebx, 8
		mov	ebp, [esp+168h+var_14C]
		shr	ebp, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, [esp+168h+var_158]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, [esp+168h+var_14C]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		xor	ebx, [esp+168h+var_154]
		xor	[esp+168h+var_144], ebx
		mov	[esp+168h+var_158], ebx
		mov	ebx, [esp+168h+var_154]
		mov	ebp, ebx
		shl	ebp, 18h
		shr	ebx, 8
		add	ebp, ebx
		xor	ebp, [esp+168h+var_158]
		mov	[esp+168h+var_158], edx
		xor	[esp+168h+var_140], ebp
		mov	ebp, [esp+168h+var_134]
		mov	ebx, ebp
		shl	ebp, 0Fh
		shl	edx, 0Fh
		shr	ebx, 11h
		add	ebx, edx
		mov	edx, esi
		shr	edx, 11h
		add	edx, ebp
		mov	ebp, [esp+168h+var_13C]
		shr	ebp, 11h
		shl	esi, 0Fh
		add	ebp, esi
		mov	esi, [esp+168h+var_158]
		mov	[esp+168h+var_14C], ebp
		mov	ebp, [esp+168h+var_13C]
		shl	ebp, 0Fh
		shr	esi, 11h
		add	esi, ebp
		mov	ebp, [esp+168h+var_14C]
		mov	[esp+168h+var_110], ebp
		mov	[esp+168h+var_158], ebx
		mov	[esp+168h+var_114], ebx
		mov	ebp, edx
		shr	ebp, 2
		shl	ebx, 1Eh
		add	ebx, ebp
		mov	[esp+168h+var_150], ebx
		mov	ebx, [esp+168h+var_14C]
		mov	ebp, ebx
		shr	ebp, 2
		mov	[esp+168h+var_8C], edx
		shl	edx, 1Eh
		add	edx, ebp
		mov	ebp, esi
		shr	ebp, 2
		mov	[esp+168h+var_88], esi
		shl	ebx, 1Eh
		add	ebx, ebp
		mov	ebp, [esp+168h+var_158]
		shl	esi, 1Eh
		shr	ebp, 2
		add	esi, ebp
		mov	ebp, [esp+168h+var_150]
		mov	[esp+168h+var_13C], esi
		mov	esi, ebx
		mov	[esp+168h+var_6C], edx
		mov	[esp+168h+var_CC], edx
		mov	[esp+168h+var_154], edx
		shr	esi, 0Fh
		shl	edx, 11h
		add	esi, edx
		mov	[esp+168h+var_150], esi
		mov	esi, [esp+168h+var_13C]
		mov	[esp+168h+var_F4], ebp
		mov	[esp+168h+var_F0], ebx
		mov	[esp+168h+var_44], ebx
		mov	[esp+168h+var_40], ebp
		mov	edx, esi
		shr	edx, 0Fh
		shl	ebx, 11h
		add	edx, ebx
		mov	ebx, [esp+168h+var_140]
		mov	[esp+168h+var_134], edx
		mov	edx, ebp
		shr	edx, 0Fh
		shl	esi, 11h
		add	edx, esi
		mov	[esp+168h+var_14C], edx
		mov	edx, [esp+168h+var_154]
		shr	edx, 0Fh
		shl	ebp, 11h
		add	edx, ebp
		mov	ebp, [esp+168h+var_138]
		mov	[esp+168h+var_30], edx
		mov	edx, [esp+168h+var_144]
		mov	[esp+168h+var_158], edx
		mov	[esp+168h+var_124], edx
		shl	edx, 1Eh
		mov	esi, ebx
		shr	esi, 2
		add	edx, esi
		mov	esi, ebp
		mov	[esp+168h+var_9C], ebx
		shl	ebx, 1Eh
		shr	esi, 2
		add	ebx, esi
		mov	esi, edi
		mov	[esp+168h+var_120], ebp
		shl	ebp, 1Eh
		shr	esi, 2
		add	ebp, esi
		mov	esi, [esp+168h+var_158]
		mov	[esp+168h+var_98], edi
		shl	edi, 1Eh
		mov	[esp+168h+var_158], edx
		shr	esi, 2
		add	edi, esi
		mov	[esp+168h+var_148], edi
		mov	[esp+168h+var_104], edx
		mov	[esp+168h+var_78], edi
		shl	edx, 1Eh
		mov	edi, ebx
		shr	edi, 2
		add	edx, edi
		mov	edi, [esp+168h+var_148]
		mov	[esp+168h+var_144], edx
		mov	edx, ebp
		mov	esi, ebx
		shr	edx, 2
		shl	ebx, 1Eh
		add	ebx, edx
		mov	[esp+168h+var_100], ebp
		shl	ebp, 1Eh
		mov	edx, edi
		shr	edx, 2
		add	edx, ebp
		mov	ebp, [esp+168h+var_158]
		shr	ebp, 2
		shl	edi, 1Eh
		add	edi, ebp
		mov	[esp+168h+var_54], ebx
		mov	[esp+168h+var_154], ebx
		mov	ebp, edx
		shl	ebx, 13h
		shr	ebp, 0Dh
		add	ebp, ebx
		mov	[esp+168h+var_148], edi
		mov	edi, [esp+168h+var_144]
		mov	[esp+168h+var_144], ebp
		mov	ebp, [esp+168h+var_148]
		mov	[esp+168h+var_D8], edx
		mov	ebx, ebp
		shl	edx, 13h
		shr	ebx, 0Dh
		add	ebx, edx
		mov	[esp+168h+var_DC], edi
		mov	[esp+168h+var_140], ebx
		mov	edx, edi
		xor	[esp+168h+var_120], eax
		xor	[esp+168h+var_118], eax
		xor	[esp+168h+var_110], eax
		shl	edi, 13h
		xor	[esp+168h+var_98], ecx
		xor	[esp+168h+var_90], ecx
		xor	[esp+168h+var_88], ecx
		mov	ebx, ebp
		shl	ebx, 13h
		shr	edx, 0Dh
		add	edx, ebx
		mov	ebx, [esp+168h+var_154]
		shr	ebx, 0Dh
		add	ebx, edi
		mov	edi, [esp+168h+var_80]
		not	edi
		mov	[esp+168h+var_138], edi
		and	edi, ecx
		xor	eax, edi
		mov	edi, [esp+168h+var_108]
		and	edi, eax
		xor	[esp+168h+var_100], eax
		xor	[esp+168h+var_F8], eax
		xor	[esp+168h+var_F0], eax
		mov	[esp+168h+var_20], ebx
		mov	ebx, edi
		shr	ebx, 1Fh
		lea	edi, [ebx+edi*2]
		xor	ecx, edi
		xor	[esp+168h+var_78], ecx
		xor	[esp+168h+var_70], ecx
		mov	edi, ecx
		xor	edi, [esp+168h+var_13C]
		xor	[esp+168h+var_B4], edx
		mov	[esp+168h+var_68], edi
		mov	edi, [esp+168h+var_60]
		not	edi
		mov	[esp+168h+var_148], edi
		and	edi, ecx
		xor	eax, edi
		mov	edi, [esp+168h+var_E8]
		xor	[esp+168h+var_E0], eax
		xor	[esp+168h+var_D8], eax
		xor	[esp+168h+var_D0], eax
		and	edi, eax
		mov	ebx, edi
		shr	ebx, 1Fh
		lea	edi, [ebx+edi*2]
		mov	ebx, [esp+168h+var_40]
		xor	ecx, edi
		xor	[esp+168h+var_58], ecx
		xor	[esp+168h+var_48], ecx
		not	ebx
		mov	[esp+168h+var_130], ebx
		and	ebx, ecx
		xor	eax, ebx
		xor	[esp+168h+var_C0], eax
		xor	[esp+168h+var_B0], eax
		mov	ebx, eax
		and	ebx, [esp+168h+var_13C]
		mov	edi, ecx
		xor	edi, ebp
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		xor	[esp+168h+var_38], ecx
		xor	[esp+168h+var_30], ecx
		xor	[esp+168h+var_28], ecx
		xor	ecx, [esp+168h+var_140]
		mov	ebx, eax
		xor	eax, [esp+168h+var_144]
		xor	ebx, [esp+168h+var_14C]
		mov	[esp+168h+var_AC], eax
		mov	[esp+168h+var_24], ecx
		mov	ecx, [esp+168h+var_20]
		xor	[esp+168h+var_2C], ecx
		mov	eax, edx
		xor	eax, [esp+168h+var_150]
		mov	[esp+168h+var_B8], ebx
		mov	[esp+168h+var_BC], eax
		xor	[esp+168h+var_3C], ecx
		xor	[esp+168h+var_C4], edx
		mov	ebp, [esp+168h+var_44]
		mov	eax, ecx
		not	ebp
		and	eax, ebp
		xor	eax, edx
		xor	[esp+168h+var_D4], eax
		xor	[esp+168h+var_DC], eax
		xor	[esp+168h+var_E4], eax
		mov	ebx, ecx
		mov	[esp+168h+var_150], ebp
		mov	edx, eax
		and	edx, [esp+168h+var_CC]
		xor	ebx, [esp+168h+var_134]
		mov	ebp, edx
		shr	ebp, 1Fh
		lea	edx, [ebp+edx*2+0]
		xor	edx, ecx
		mov	ecx, [esp+168h+var_64]
		not	ecx
		xor	[esp+168h+var_4C], edx
		xor	[esp+168h+var_54], edx
		xor	[esp+168h+var_5C], edx
		mov	[esp+168h+var_154], ecx
		mov	ebp, edx
		and	ebp, ecx
		xor	eax, ebp
		xor	[esp+168h+var_F4], eax
		xor	[esp+168h+var_FC], eax
		xor	[esp+168h+var_104], eax
		mov	ecx, eax
		and	ecx, [esp+168h+var_EC]
		mov	ebp, ecx
		shr	ebp, 1Fh
		lea	ecx, [ebp+ecx*2+0]
		xor	edx, ecx
		mov	ecx, [esp+168h+var_84]
		xor	[esp+168h+var_6C], edx
		xor	[esp+168h+var_74], edx
		not	ecx
		mov	[esp+168h+var_134], ecx
		mov	ebp, edx
		and	ebp, ecx
		xor	eax, ebp
		xor	[esp+168h+var_124], eax
		xor	[esp+168h+var_11C], eax
		xor	[esp+168h+var_114], eax
		mov	ecx, eax
		and	ecx, [esp+168h+var_10C]
		xor	esi, edx
		mov	ebp, ecx
		shr	ebp, 1Fh
		lea	ecx, [ebp+ecx*2+0]
		mov	ebp, [esp+168h+var_9C]
		xor	edx, ecx
		xor	[esp+168h+var_A4], edx
		xor	[esp+168h+var_8C], edx
		xor	[esp+168h+var_94], edx
		mov	ecx, [esp+168h+var_12C]
		xor	ecx, eax
		mov	eax, [esp+168h+arg_4]
		xor	ebp, edx
		mov	edx, [esp+168h+var_124]
		xor	edx, ecx
		mov	ecx, ebp
		xor	ecx, [esp+168h+var_A4]
		mov	[eax], edx
		mov	[eax+4], ecx
		mov	ecx, [esp+168h+var_124]
		xor	ecx, [esp+168h+var_11C]
		mov	[esp+168h+var_140], ecx
		mov	ecx, [esp+168h+var_120]
		xor	ecx, [esp+168h+var_118]
		mov	[esp+168h+var_144], ecx
		mov	ecx, [esp+168h+var_114]
		xor	ecx, [esp+168h+var_11C]
		mov	[esp+168h+var_14C], ecx
		mov	ecx, [esp+168h+var_110]
		xor	ecx, [esp+168h+var_118]
		mov	[esp+168h+var_8], ecx
		mov	ecx, esi
		and	ecx, [esp+168h+var_134]
		xor	ecx, [esp+168h+var_104]
		mov	edx, ecx
		xor	ecx, [esp+168h+var_114]
		and	edx, [esp+168h+var_10C]
		mov	[eax+38h], ecx
		mov	ecx, edx
		shr	edx, 1Fh
		lea	ecx, [edx+ecx*2]
		xor	ecx, esi
		xor	ecx, [esp+168h+var_8C]
		mov	edx, [esp+168h+var_10C]
		mov	[eax+3Ch], ecx
		mov	ecx, [esp+168h+var_84]
		mov	[eax+44h], ecx
		mov	ecx, [esp+168h+var_80]
		mov	[eax+4Ch], ecx
		mov	ecx, [esp+168h+var_88]
		and	ecx, [esp+168h+var_138]
		mov	[eax+40h], edx
		xor	ecx, [esp+168h+var_110]
		mov	edx, [esp+168h+var_108]
		mov	[eax+48h], edx
		mov	edx, ecx
		xor	ecx, [esp+168h+var_100]
		and	edx, [esp+168h+var_108]
		mov	[eax+50h], ecx
		mov	ecx, edx
		shr	edx, 1Fh
		lea	ecx, [edx+ecx*2]
		xor	ecx, [esp+168h+var_78]
		xor	ecx, [esp+168h+var_88]
		mov	[eax+54h], ecx
		mov	ecx, [esp+168h+var_104]
		xor	ecx, [esp+168h+var_FC]
		mov	[esp+168h+var_134], ecx
		mov	ecx, [esp+168h+var_100]
		xor	ecx, [esp+168h+var_F8]
		mov	[esp+168h+var_138], ecx
		mov	ecx, [esp+168h+var_F4]
		xor	ecx, [esp+168h+var_FC]
		mov	[esp+168h+var_C], ecx
		mov	ecx, [esp+168h+var_F0]
		xor	ecx, [esp+168h+var_F8]
		mov	[esp+168h+var_4], ecx
		mov	ecx, [esp+168h+var_5C]
		and	ecx, [esp+168h+var_154]
		xor	ecx, [esp+168h+var_E4]
		mov	edx, ecx
		xor	ecx, [esp+168h+var_F4]
		and	edx, [esp+168h+var_EC]
		mov	[eax+78h], ecx
		mov	ecx, edx
		shr	edx, 1Fh
		lea	ecx, [edx+ecx*2]
		xor	ecx, [esp+168h+var_6C]
		mov	edx, [esp+168h+var_EC]
		xor	ecx, [esp+168h+var_5C]
		mov	[eax+80h], edx
		mov	edx, [esp+168h+var_E8]
		mov	[eax+7Ch], ecx
		mov	ecx, [esp+168h+var_64]
		mov	[eax+84h], ecx
		mov	ecx, [esp+168h+var_60]
		mov	[eax+8Ch], ecx
		mov	ecx, [esp+168h+var_68]
		and	ecx, [esp+168h+var_148]
		mov	[eax+88h], edx
		xor	ecx, [esp+168h+var_F0]
		mov	edx, ecx
		xor	ecx, [esp+168h+var_E0]
		and	edx, [esp+168h+var_E8]
		mov	[eax+90h], ecx
		mov	ecx, edx
		shr	edx, 1Fh
		lea	ecx, [edx+ecx*2]
		xor	ecx, [esp+168h+var_68]
		xor	ecx, [esp+168h+var_58]
		mov	[eax+94h], ecx
		mov	ecx, [esp+168h+var_DC]
		xor	ecx, [esp+168h+var_E4]
		mov	[esp+168h+var_154], ecx
		mov	ecx, [esp+168h+var_D8]
		xor	ecx, [esp+168h+var_E0]
		mov	[esp+168h+var_148], ecx
		mov	ecx, [esp+168h+var_DC]
		xor	ecx, [esp+168h+var_D4]
		mov	[esp+168h+var_1C], ecx
		mov	ecx, [esp+168h+var_D8]
		xor	ecx, [esp+168h+var_D0]
		mov	[esp+168h+var_10], ecx
		mov	ecx, [esp+168h+var_3C]
		and	ecx, [esp+168h+var_150]
		xor	ecx, [esp+168h+var_C4]
		mov	edx, ecx
		xor	ecx, [esp+168h+var_D4]
		and	edx, [esp+168h+var_CC]
		mov	[eax+0B8h], ecx
		mov	ecx, edx
		shr	edx, 1Fh
		lea	ecx, [edx+ecx*2]
		xor	ecx, [esp+168h+var_3C]
		mov	edx, [esp+168h+var_CC]
		xor	ecx, [esp+168h+var_4C]
		mov	[eax+0C0h], edx
		mov	[eax+0BCh], ecx
		mov	ecx, [esp+168h+var_44]
		mov	[eax+0C4h], ecx
		mov	ecx, [esp+168h+var_40]
		mov	edx, [esp+168h+var_13C]
		mov	[eax+0CCh], ecx
		mov	ecx, [esp+168h+var_130]
		and	ecx, [esp+168h+var_48]
		mov	[eax+0C8h], edx
		xor	ecx, [esp+168h+var_D0]
		mov	[esp+168h+var_130], ecx
		and	ecx, edx
		mov	[esp+168h+var_158], ecx
		mov	ecx, [esp+168h+var_130]
		xor	ecx, [esp+168h+var_C0]
		mov	[esp+168h+var_130], ecx
		mov	ecx, [esp+168h+var_158]
		mov	edx, ecx
		shr	edx, 1Fh
		lea	ecx, [edx+ecx*2]
		xor	ecx, [esp+168h+var_38]
		mov	edx, [esp+168h+var_B0]
		xor	ecx, [esp+168h+var_48]
		mov	[eax+0D4h], ecx
		mov	ecx, [esp+168h+var_BC]
		xor	ecx, [esp+168h+var_C4]
		mov	[esp+168h+var_13C], ecx
		mov	ecx, [esp+168h+var_B8]
		xor	ecx, [esp+168h+var_C0]
		mov	[esp+168h+var_150], ecx
		mov	ecx, [esp+168h+var_BC]
		xor	ecx, [esp+168h+var_B4]
		mov	[esp+168h+var_18], ecx
		mov	ecx, [esp+168h+var_B8]
		xor	ecx, edx
		mov	[esp+168h+var_14], ecx
		mov	ecx, [esp+168h+var_AC]
		xor	ecx, edx
		mov	[eax+100h], ecx
		mov	ecx, [esp+168h+var_24]
		xor	ecx, [esp+168h+var_28]
		mov	[eax+104h], ecx
		mov	ecx, [esp+168h+var_98]
		xor	ecx, [esp+168h+var_120]
		mov	edx, ecx
		shl	edx, 8
		shr	ecx, 18h
		add	edx, ecx
		mov	[esp+168h+var_158], edx
		xor	edx, [esp+168h+var_120]
		mov	[eax+14h], edx
		mov	edx, [esp+168h+var_158]
		mov	[eax+10h], edx
		mov	edx, [esp+168h+var_140]
		xor	ebp, edx
		xor	ebp, [esp+168h+var_94]
		mov	ecx, ebp
		shl	ecx, 8
		shr	ebp, 18h
		add	ecx, ebp
		mov	ebp, ecx
		xor	ebp, edx
		mov	edx, [esp+168h+var_98]
		mov	[eax+18h], ecx
		mov	[eax+1Ch], ebp
		mov	ebp, [esp+168h+var_144]
		xor	edx, ebp
		xor	edx, [esp+168h+var_90]
		mov	ecx, edx
		shl	ecx, 8
		shr	edx, 18h
		add	ecx, edx
		mov	edx, ecx
		xor	edx, ebp
		mov	ebp, [esp+168h+var_14C]
		mov	[eax+20h], ecx
		mov	[eax+24h], edx
		mov	ecx, ebp
		xor	ecx, [esp+168h+var_8C]
		xor	ecx, [esp+168h+var_94]
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, edx
		xor	ecx, ebp
		mov	ebp, [esp+168h+var_8]
		mov	[eax+2Ch], ecx
		mov	[eax+28h], edx
		mov	ecx, ebp
		xor	ecx, [esp+168h+var_88]
		xor	ecx, [esp+168h+var_90]
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, edx
		xor	ecx, ebp
		mov	ebp, [eax+38h]
		mov	[eax+34h], ecx
		mov	ecx, [eax+3Ch]
		xor	ecx, ebp
		mov	[eax+30h], edx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, [eax+54h]
		xor	ebp, edx
		mov	[eax+3Ch], ebp
		mov	ebp, [eax+50h]
		xor	ecx, ebp
		mov	[eax+38h], edx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	ebp, edx
		mov	[eax+50h], edx
		mov	edx, [esp+168h+var_134]
		xor	esi, edx
		mov	[eax+54h], ebp
		mov	ebp, [esp+168h+var_74]
		xor	esi, ebp
		mov	ecx, esi
		shr	esi, 18h
		shl	ecx, 8
		add	ecx, esi
		mov	esi, ecx
		xor	esi, edx
		mov	edx, [esp+168h+var_78]
		mov	[eax+5Ch], esi
		mov	esi, [esp+168h+var_138]
		xor	edx, esi
		xor	edx, [esp+168h+var_70]
		mov	[eax+58h], ecx
		mov	ecx, edx
		shl	ecx, 8
		shr	edx, 18h
		add	ecx, edx
		mov	edx, ecx
		xor	edx, esi
		mov	esi, [esp+168h+var_C]
		mov	[eax+60h], ecx
		mov	ecx, esi
		xor	ecx, [esp+168h+var_6C]
		mov	[eax+64h], edx
		xor	ecx, ebp
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, edx
		xor	ecx, esi
		mov	esi, [esp+168h+var_4]
		mov	[eax+6Ch], ecx
		mov	ecx, esi
		xor	ecx, [esp+168h+var_68]
		mov	[eax+68h], edx
		xor	ecx, [esp+168h+var_70]
		mov	ebp, [esp+168h+var_154]
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, edx
		xor	ecx, esi
		mov	esi, [eax+78h]
		mov	[eax+74h], ecx
		mov	ecx, [eax+7Ch]
		xor	ecx, esi
		mov	[eax+70h], edx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, [eax+94h]
		xor	esi, edx
		mov	[eax+7Ch], esi
		mov	esi, [eax+90h]
		xor	ecx, esi
		mov	[eax+78h], edx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		xor	esi, edx
		mov	[eax+90h], edx
		mov	edx, [esp+168h+var_54]
		mov	ecx, edx
		xor	ecx, ebp
		xor	ecx, [esp+168h+var_5C]
		mov	[eax+94h], esi
		mov	esi, ecx
		shr	ecx, 18h
		shl	esi, 8
		add	esi, ecx
		mov	ecx, esi
		xor	ecx, ebp
		mov	ebp, [esp+168h+var_148]
		mov	[eax+9Ch], ecx
		mov	ecx, edi
		xor	ecx, ebp
		xor	ecx, [esp+168h+var_58]
		mov	[eax+98h], esi
		mov	esi, ecx
		shr	ecx, 18h
		shl	esi, 8
		add	esi, ecx
		mov	ecx, esi
		mov	[eax+0A0h], esi
		mov	esi, [esp+168h+var_1C]
		xor	edx, esi
		xor	edx, [esp+168h+var_4C]
		xor	ecx, ebp
		mov	[eax+0A4h], ecx
		mov	ecx, edx
		shl	ecx, 8
		shr	edx, 18h
		add	ecx, edx
		mov	edx, ecx
		xor	edx, esi
		mov	[eax+0A8h], ecx
		mov	[eax+0ACh], edx
		mov	edx, [esp+168h+var_10]
		xor	edi, edx
		xor	edi, [esp+168h+var_48]
		mov	ecx, edi
		shl	ecx, 8
		shr	edi, 18h
		add	ecx, edi
		mov	esi, ecx
		mov	[eax+0B0h], ecx
		mov	ecx, [eax+0BCh]
		xor	esi, edx
		mov	[eax+0B4h], esi
		mov	esi, [eax+0B8h]
		xor	ecx, esi
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, [eax+0D4h]
		xor	esi, edx
		mov	[eax+0BCh], esi
		mov	esi, [esp+168h+var_130]
		xor	ecx, esi
		mov	[eax+0B8h], edx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	edi, [esp+168h+var_150]
		mov	ecx, edx
		xor	ecx, esi
		mov	esi, [esp+168h+var_13C]
		mov	[eax+0D4h], ecx
		mov	ecx, ebx
		xor	ecx, esi
		xor	ecx, [esp+168h+var_3C]
		mov	[eax+0D0h], edx
		mov	edx, ecx
		shr	ecx, 18h
		shl	edx, 8
		add	edx, ecx
		mov	ecx, edx
		xor	ecx, esi
		mov	[eax+0DCh], ecx
		mov	[eax+0D8h], edx
		mov	edx, [esp+168h+var_30]
		mov	ecx, edx
		xor	ecx, edi
		xor	ecx, [esp+168h+var_38]
		mov	esi, ecx
		shr	ecx, 18h
		shl	esi, 8
		add	esi, ecx
		mov	ecx, esi
		xor	ecx, edi
		mov	edi, [esp+168h+var_18]
		xor	ebx, edi
		mov	[eax+0E4h], ecx
		mov	[eax+0E0h], esi
		mov	esi, [esp+168h+var_2C]
		xor	ebx, esi
		mov	ecx, ebx
		shl	ecx, 8
		shr	ebx, 18h
		add	ecx, ebx
		mov	ebx, ecx
		xor	ebx, edi
		mov	edi, [esp+168h+var_14]
		xor	edx, edi
		xor	edx, [esp+168h+var_28]
		mov	[eax+0E8h], ecx
		mov	ecx, edx
		shl	ecx, 8
		mov	[eax+0ECh], ebx
		shr	edx, 18h
		add	ecx, edx
		mov	edx, ecx
		xor	edx, edi
		mov	[eax+0F4h], edx
		mov	edx, [esp+168h+var_B4]
		xor	esi, edx
		mov	[eax+0F0h], ecx
		mov	ecx, esi
		shr	esi, 18h
		shl	ecx, 8
		add	ecx, esi
		mov	esi, ecx
		xor	esi, edx
		pop	edi
		mov	[eax+0FCh], esi
		pop	esi
		pop	ebp
		mov	[eax+0F8h], ecx
		pop	ebx
		add	esp, 158h
		retn
sub_10010B90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011E80	proc near		; CODE XREF: sub_10015900+36p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 20h
		mov	eax, [esp+20h+arg_0]
		mov	edx, [eax+4]
		mov	ecx, [eax]
		mov	[esp+20h+var_20], ecx
		mov	ecx, [eax+8]
		mov	[esp+20h+var_1C], edx
		mov	edx, [eax+0Ch]
		mov	[esp+20h+var_18], ecx
		mov	ecx, [eax+10h]
		mov	[esp+20h+var_14], edx
		mov	edx, [eax+14h]
		mov	eax, edx
		not	eax
		mov	[esp+20h+var_10], ecx
		not	ecx
		mov	[esp+20h+var_4], eax
		mov	eax, [esp+20h+arg_4]
		mov	[esp+20h+var_8], ecx
		push	eax
		lea	ecx, [esp+24h+var_20]
		push	ecx
		mov	[esp+28h+var_C], edx
		call	sub_10010B90
		add	esp, 28h
		retn
sub_10011E80	endp

; ---------------------------------------------------------------------------
		align 20h

; =============== S U B	R O U T	I N E =======================================


sub_10011EE0	proc near		; DATA XREF: sub_10015960+Ao
					; sub_100159C0+33o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		mov	eax, [esi]
		mov	ecx, [esi+4]
		push	edi
		mov	edi, [esp+10h+arg_0]
		bswap	eax
		xor	eax, [edi]
		mov	edx, [esi+8]
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		bswap	ecx
		xor	ebx, [edi+10h]
		xor	ecx, [edi+4]
		mov	[esp+10h+arg_8], ebx
		mov	esi, [esi+0Ch]
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		mov	ebp, ecx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+14h]
		bswap	edx
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		bswap	esi
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+18h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+1Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+20h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+24h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+28h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+2Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+30h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+34h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+38h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+3Ch]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	eax, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+40h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+44h]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+4Ch]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+48h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+50h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+54h]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	edx, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+58h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+5Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+60h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+64h]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	edx, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+68h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+6Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+70h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+74h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+78h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+7Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+80h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+84h]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+8Ch]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+88h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+90h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+94h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+98h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+9Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0A0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0A4h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0A8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0ACh]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0B0h]
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		shr	ebp, 8
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0B4h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		xor	edx, [edi+0C0h]
		xor	ebx, [edi+0B8h]
		mov	ebp, esi
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		xor	esi, [edi+0C4h]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0BCh]
		mov	edi, [esp+10h+arg_4]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		bswap	esi
		xor	ecx, ebx
		bswap	eax
		bswap	edx
		bswap	ecx
		mov	[edi+4], esi
		mov	[edi+8], eax
		mov	[edi], edx
		mov	[edi+0Ch], ecx
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10011EE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10012B50	proc near		; DATA XREF: sub_10015AD0+Ao
					; sub_10015B30+46o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		mov	eax, [esi]
		mov	ecx, [esi+4]
		push	edi
		mov	edi, [esp+10h+arg_0]
		bswap	eax
		xor	eax, [edi+0C0h]
		mov	edx, [esi+8]
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		bswap	ecx
		xor	ebx, [edi+0B8h]
		xor	ecx, [edi+0C4h]
		mov	[esp+10h+arg_8], ebx
		mov	esi, [esi+0Ch]
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		mov	ebp, ecx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0BCh]
		bswap	edx
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		bswap	esi
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0B0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0B4h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0A8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0ACh]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0A0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0A4h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+98h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+9Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+90h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+94h]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	eax, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+88h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+8Ch]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+84h]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+80h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+78h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+7Ch]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	edx, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+70h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+74h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+68h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+6Ch]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	edx, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+60h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+64h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+58h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+5Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+50h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+54h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+48h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+4Ch]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+44h]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+40h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+38h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+3Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+30h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+34h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+28h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+2Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+20h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+24h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+18h]
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		shr	ebp, 8
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+1Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		xor	edx, [edi]
		xor	ebx, [edi+10h]
		mov	ebp, esi
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		xor	esi, [edi+4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+14h]
		mov	edi, [esp+10h+arg_4]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		bswap	esi
		xor	ecx, ebx
		bswap	eax
		bswap	edx
		bswap	ecx
		mov	[edi+4], esi
		mov	[edi+8], eax
		mov	[edi], edx
		mov	[edi+0Ch], ecx
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10012B50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100137C0	proc near		; DATA XREF: sub_10015960+14o
					; sub_100159C0+3Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		mov	eax, [esi]
		mov	ecx, [esi+4]
		push	edi
		mov	edi, [esp+10h+arg_0]
		bswap	eax
		xor	eax, [edi]
		mov	edx, [esi+8]
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		bswap	ecx
		xor	ebx, [edi+10h]
		xor	ecx, [edi+4]
		mov	[esp+10h+arg_8], ebx
		mov	esi, [esi+0Ch]
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		mov	ebp, ecx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+14h]
		bswap	edx
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		bswap	esi
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+18h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+1Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+20h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+24h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+28h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+2Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+30h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+34h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+38h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+3Ch]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	eax, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+40h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+44h]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+4Ch]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+48h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+50h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+54h]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	edx, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+58h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+5Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+60h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+64h]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	edx, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+68h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+6Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+70h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+74h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+78h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+7Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+80h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+84h]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+8Ch]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+88h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+90h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+94h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+98h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+9Ch]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0A0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0A4h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0A8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0ACh]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0B0h]
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		shr	ebp, 8
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0B4h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0B8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0BCh]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+0C0h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+0C4h]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+0CCh]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+0C8h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0D0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0D4h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0D8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0DCh]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0E0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0E4h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0E8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0ECh]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0F0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0F4h]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0F8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0FCh]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	eax, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, [edi+104h]
		xor	edx, [edi+100h]
		mov	edi, [esp+10h+arg_4]
		xor	ecx, ebx
		bswap	esi
		bswap	eax
		bswap	edx
		bswap	ecx
		mov	[edi+4], esi
		mov	[edi+8], eax
		mov	[edi], edx
		mov	[edi+0Ch], ecx
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_100137C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10014860	proc near		; DATA XREF: sub_10015AD0+14o
					; sub_10015B30+50o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		mov	eax, [esi]
		mov	ecx, [esi+4]
		push	edi
		mov	edi, [esp+10h+arg_0]
		bswap	eax
		xor	eax, [edi+100h]
		mov	edx, [esi+8]
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		bswap	ecx
		xor	ebx, [edi+0F8h]
		xor	ecx, [edi+104h]
		mov	[esp+10h+arg_8], ebx
		mov	esi, [esi+0Ch]
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		mov	ebp, ecx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0FCh]
		bswap	edx
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		bswap	esi
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0F0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0F4h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0E8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0ECh]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0E0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0E4h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0D8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0DCh]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0D0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0D4h]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	eax, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+0C8h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+0CCh]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+0C4h]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+0C0h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0B8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0BCh]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	edx, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0B0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0B4h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+0A8h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0ACh]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	edx, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+0A0h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+0A4h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+98h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+9Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, ebx
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+90h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+94h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+88h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+8Ch]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+84h]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+80h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+78h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+7Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+70h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+74h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+68h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+6Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+60h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+64h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, eax
		xor	ecx, ebx
		shr	ebp, 8
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+58h]
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		shr	ebp, 8
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+5Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+50h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+54h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, [edi+48h]
		and	ebx, eax
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	ecx, ebx
		mov	ebx, [edi+4Ch]
		or	ebx, ecx
		xor	eax, ebx
		mov	ebx, [edi+44h]
		or	ebx, esi
		xor	edx, ebx
		mov	ebx, [edi+40h]
		and	ebx, edx
		mov	ebp, ebx
		shr	ebp, 1Fh
		lea	ebx, [ebp+ebx*2+0]
		xor	esi, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+38h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+3Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+30h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+34h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+28h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+2Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+20h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+24h]
		xor	ebx, ebp
		xor	eax, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	ecx, ebx
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, eax
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		xor	ebx, [edi+18h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, ecx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+1Ch]
		xor	ebx, ebp
		xor	edx, ebx
		mov	[esp+10h+arg_8], ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		mov	ebp, edx
		xor	esi, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003E6F8[ebx*4]
		xor	ebx, ds:dword_1003EAF8[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, edx
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		xor	ebx, [edi+10h]
		shr	ebp, 8
		mov	[esp+10h+arg_8], ebx
		and	ebp, 0FFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_1003EAF8[ebx*4]
		xor	ebx, ds:dword_1003EEF8[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_1003E6F8[ebp*4]
		mov	ebp, esi
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003E2F8[ebp*4]
		mov	ebp, [esp+10h+arg_8]
		xor	ebx, [edi+14h]
		xor	ebx, ebp
		mov	[esp+10h+arg_8], ebx
		xor	eax, ebx
		mov	ebx, ebp
		shl	ebx, 18h
		shr	ebp, 8
		add	ebx, ebp
		xor	ebx, [esp+10h+arg_8]
		xor	esi, [edi+4]
		xor	edx, [edi]
		mov	edi, [esp+10h+arg_4]
		xor	ecx, ebx
		bswap	esi
		bswap	eax
		bswap	edx
		bswap	ecx
		mov	[edi+4], esi
		mov	[edi+8], eax
		mov	[edi], edx
		mov	[edi+0Ch], ecx
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10014860	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015900	proc near		; CODE XREF: sub_10015C80+90p
					; sub_10015D40+CDp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_0]
		mov	[ecx], eax
		cmp	eax, 10h
		jz	short loc_10015941
		cmp	eax, 18h
		jz	short loc_1001592D
		cmp	eax, 20h
		jnz	short loc_10015952
		mov	eax, [esp+arg_4]
		add	ecx, 8
		push	ecx
		push	eax
		call	sub_10010B90
		add	esp, 8
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1001592D:				; CODE XREF: sub_10015900+12j
		add	ecx, 8
		push	ecx
		mov	ecx, [esp+4+arg_4]
		push	ecx
		call	sub_10011E80
		add	esp, 8
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10015941:				; CODE XREF: sub_10015900+Dj
		mov	edx, [esp+arg_4]
		add	ecx, 8
		push	ecx
		push	edx
		call	sub_1000FED0
		add	esp, 8

loc_10015952:				; CODE XREF: sub_10015900+17j
		xor	eax, eax
		retn
sub_10015900	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015960	proc near		; DATA XREF: sub_10015C80+7Eo
					; sub_10015D40+B5o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		cmp	dword ptr [ebp+0], 10h
		push	edi
		mov	[esp+8+arg_0], offset sub_10011EE0
		jz	short loc_1001597C
		mov	[esp+8+arg_0], offset sub_100137C0

loc_1001597C:				; CODE XREF: sub_10015960+12j
		mov	edi, [esp+8+arg_14]
		test	edi, edi
		jz	short loc_100159AD
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		dec	edi
		push	esi
		mov	esi, [esp+10h+arg_10]
		shr	edi, 4
		add	ebp, 8
		sub	ebx, esi
		inc	edi

loc_10015998:				; CODE XREF: sub_10015960+49j
		push	esi
		lea	eax, [ebx+esi]
		push	eax
		push	ebp
		call	[esp+1Ch+arg_0]
		add	esp, 0Ch
		add	esi, 10h
		dec	edi
		jnz	short loc_10015998
		pop	esi
		pop	ebx

loc_100159AD:				; CODE XREF: sub_10015960+22j
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
sub_10015960	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100159C0	proc near		; DATA XREF: sub_10015C80+6Bo
					; sub_10015D40+A2o

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_13		= byte ptr -13h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 24h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		mov	edx, [esp+24h+arg_14]
		mov	eax, [esp+24h+arg_0]
		push	ebx
		mov	ebx, [esp+28h+arg_4]
		test	edx, edx
		jz	loc_10015AB6
		cmp	dword ptr [eax], 10h
		lea	ecx, [eax+118h]
		push	edi
		mov	[esp+2Ch+var_18], ecx
		mov	edi, ecx
		mov	[esp+2Ch+var_24], offset sub_10011EE0
		jz	short loc_10015A05
		mov	[esp+2Ch+var_24], offset sub_100137C0

loc_10015A05:				; CODE XREF: sub_100159C0+3Bj
		test	edx, edx
		jz	loc_10015A9F
		add	eax, 8
		push	ebp
		push	esi
		mov	[esp+34h+var_1C], eax
		mov	eax, [esp+34h+arg_10]
		lea	ecx, [edx-1]
		lea	esi, [esp+34h+var_13]
		shr	ecx, 4
		sub	esi, eax
		inc	ecx
		mov	[esp+34h+var_20], ecx
		jmp	short loc_10015A34
; ---------------------------------------------------------------------------
		align 10h

loc_10015A30:				; CODE XREF: sub_100159C0+D7j
		mov	eax, [esp+34h+arg_10]

loc_10015A34:				; CODE XREF: sub_100159C0+6Bj
		lea	ecx, [edi+2]
		sub	edi, eax
		mov	ebp, 4
		mov	edi, edi

loc_10015A40:				; CODE XREF: sub_100159C0+B2j
		movzx	edx, byte ptr [edi+eax]
		xor	dl, [eax]
		add	eax, 4
		mov	[esi+eax-5], dl
		movzx	edx, byte ptr [eax-3]
		xor	dl, [ecx-1]
		add	ecx, 4
		mov	[esi+eax-4], dl
		movzx	edx, byte ptr [eax-2]
		xor	dl, [ecx-4]
		mov	[esi+eax-3], dl
		movzx	edx, byte ptr [eax-1]
		xor	dl, [ecx-3]
		dec	ebp
		mov	[esi+eax-2], dl
		jnz	short loc_10015A40
		mov	ecx, [esp+34h+var_1C]
		lea	eax, [esp+34h+var_14]
		push	eax
		push	ebx
		push	ecx
		call	[esp+40h+var_24]
		add	[esp+40h+arg_10], 10h
		mov	edi, ebx
		add	esp, 0Ch
		sub	esi, 10h
		add	ebx, 10h
		dec	[esp+34h+var_20]
		jnz	short loc_10015A30
		mov	ecx, [esp+34h+var_18]
		pop	esi
		pop	ebp

loc_10015A9F:				; CODE XREF: sub_100159C0+47j
		mov	edx, [edi]
		mov	[ecx], edx
		mov	eax, [edi+4]
		mov	[ecx+4], eax
		mov	edx, [edi+8]
		mov	[ecx+8], edx
		mov	eax, [edi+0Ch]
		mov	[ecx+0Ch], eax
		pop	edi

loc_10015AB6:				; CODE XREF: sub_100159C0+1Dj
		mov	ecx, [esp+28h+var_4]
		pop	ebx
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
sub_100159C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015AD0	proc near		; DATA XREF: sub_10015C80+85o
					; sub_10015D40+BCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		cmp	dword ptr [ebp+0], 10h
		push	edi
		mov	[esp+8+arg_0], offset sub_10012B50
		jz	short loc_10015AEC
		mov	[esp+8+arg_0], offset sub_10014860

loc_10015AEC:				; CODE XREF: sub_10015AD0+12j
		mov	edi, [esp+8+arg_14]
		test	edi, edi
		jz	short loc_10015B1D
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		dec	edi
		push	esi
		mov	esi, [esp+10h+arg_10]
		shr	edi, 4
		add	ebp, 8
		sub	ebx, esi
		inc	edi

loc_10015B08:				; CODE XREF: sub_10015AD0+49j
		push	esi
		lea	eax, [ebx+esi]
		push	eax
		push	ebp
		call	[esp+1Ch+arg_0]
		add	esp, 0Ch
		add	esi, 10h
		dec	edi
		jnz	short loc_10015B08
		pop	esi
		pop	ebx

loc_10015B1D:				; CODE XREF: sub_10015AD0+22j
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
sub_10015AD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015B30	proc near		; DATA XREF: sub_10015C80+72o
					; sub_10015D40+A9o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_14]
		sub	esp, 14h
		test	eax, eax
		jz	loc_10015C5F
		mov	ecx, [esp+14h+arg_10]
		mov	edx, [ecx+eax-10h]
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		cmp	dword ptr [ebx], 10h
		push	esi
		lea	esi, [ecx+eax-10h]
		mov	ecx, [esi+4]
		mov	[esp+1Ch+var_10], edx
		mov	edx, [esi+8]
		mov	[esp+1Ch+var_C], ecx
		mov	ecx, [esi+0Ch]
		mov	[esp+1Ch+var_8], edx
		mov	edx, [esp+1Ch+arg_4]
		push	edi
		mov	[esp+20h+var_4], ecx
		lea	edi, [edx+eax-10h]
		mov	[esp+20h+arg_14], offset sub_10012B50
		jz	short loc_10015B88
		mov	[esp+20h+arg_14], offset sub_10014860

loc_10015B88:				; CODE XREF: sub_10015B30+4Ej
		cmp	eax, 10h
		jbe	short loc_10015BF0
		add	eax, 0FFFFFFEFh
		shr	eax, 4
		inc	eax
		mov	[esp+20h+var_14], eax
		push	ebp
		lea	esp, [esp+0]

loc_10015BA0:				; CODE XREF: sub_10015B30+BDj
		push	esi
		lea	eax, [ebx+8]
		push	edi
		push	eax
		call	[esp+30h+arg_14]
		add	esp, 0Ch
		lea	eax, [edi+1]
		lea	ecx, [esi-0Fh]
		mov	ebp, 4
		jmp	short loc_10015BC0
; ---------------------------------------------------------------------------
		align 10h

loc_10015BC0:				; CODE XREF: sub_10015B30+88j
					; sub_10015B30+B1j
		movzx	edx, byte ptr [ecx-1]
		xor	[eax-1], dl
		movzx	edx, byte ptr [ecx]
		xor	[eax], dl
		movzx	edx, byte ptr [ecx+1]
		xor	[eax+1], dl
		movzx	edx, byte ptr [ecx+2]
		xor	[eax+2], dl
		add	ecx, 4
		add	eax, 4
		dec	ebp
		jnz	short loc_10015BC0
		sub	edi, 10h
		sub	esi, 10h
		dec	[esp+24h+var_14]
		jnz	short loc_10015BA0
		pop	ebp

loc_10015BF0:				; CODE XREF: sub_10015B30+5Bj
		cmp	esi, [esp+20h+arg_10]
		jnz	short loc_10015C34
		push	esi
		lea	eax, [ebx+8]
		push	edi
		push	eax
		call	[esp+2Ch+arg_14]
		add	esp, 0Ch
		lea	eax, [edi+1]
		lea	ecx, [ebx+119h]
		mov	esi, 4

loc_10015C11:				; CODE XREF: sub_10015B30+102j
		movzx	edx, byte ptr [ecx-1]
		xor	[eax-1], dl
		movzx	edx, byte ptr [ecx]
		xor	[eax], dl
		movzx	edx, byte ptr [ecx+1]
		xor	[eax+1], dl
		movzx	edx, byte ptr [ecx+2]
		xor	[eax+2], dl
		add	ecx, 4
		add	eax, 4
		dec	esi
		jnz	short loc_10015C11

loc_10015C34:				; CODE XREF: sub_10015B30+C4j
		mov	eax, [esp+20h+var_10]
		mov	ecx, [esp+20h+var_C]
		mov	edx, [esp+20h+var_8]
		mov	[ebx+118h], eax
		mov	eax, [esp+20h+var_4]
		mov	[ebx+11Ch], ecx
		pop	edi
		mov	[ebx+120h], edx
		pop	esi
		mov	[ebx+124h], eax
		pop	ebx

loc_10015C5F:				; CODE XREF: sub_10015B30+9j
		xor	eax, eax
		add	esp, 14h
		retn
sub_10015B30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015C70	proc near		; DATA XREF: .rdata:10039400o
		push	128h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_10015C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015C80	proc near		; DATA XREF: .rdata:100393FCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	loc_10015D1F
		mov	esi, [esp+8+arg_8]
		cmp	esi, 10h
		jz	short loc_10015CA1
		cmp	esi, 18h
		jz	short loc_10015CA1
		cmp	esi, 20h
		jnz	short loc_10015D1F

loc_10015CA1:				; CODE XREF: sub_10015C80+15j
					; sub_10015C80+1Aj
		mov	edx, [esp+8+arg_10]
		mov	ecx, [esp+8+arg_C]
		test	edx, edx
		jz	short loc_10015CB6
		cmp	edx, 1
		jnz	short loc_10015D1F
		test	ecx, ecx
		jz	short loc_10015D1F

loc_10015CB6:				; CODE XREF: sub_10015C80+2Bj
		mov	eax, [esp+8+arg_0]
		test	eax, eax
		jz	short loc_10015D1F
		cmp	edx, 1
		jnz	short loc_10015CF9
		cmp	[esp+8+arg_14],	0
		mov	edx, [ecx]
		mov	[eax+118h], edx
		mov	edx, [ecx+4]
		mov	[eax+11Ch], edx
		mov	edx, [ecx+8]
		mov	[eax+120h], edx
		mov	ecx, [ecx+0Ch]
		mov	[eax+124h], ecx
		mov	ecx, offset sub_100159C0
		jnz	short loc_10015D0A
		mov	ecx, offset sub_10015B30
		jmp	short loc_10015D0A
; ---------------------------------------------------------------------------

loc_10015CF9:				; CODE XREF: sub_10015C80+41j
		cmp	[esp+8+arg_14],	0
		mov	ecx, offset sub_10015960
		jnz	short loc_10015D0A
		mov	ecx, offset sub_10015AD0

loc_10015D0A:				; CODE XREF: sub_10015C80+70j
					; sub_10015C80+77j ...
		push	esi
		push	edi
		push	eax
		mov	[eax+4], ecx
		call	sub_10015900
		add	esp, 0Ch
		neg	eax
		pop	edi
		sbb	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10015D1F:				; CODE XREF: sub_10015C80+8j
					; sub_10015C80+1Fj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_10015C80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015D40	proc near		; DATA XREF: .rdata:10039404o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		cmp	[esp+arg_0], 0
		push	ebp
		jz	loc_10015E35
		mov	ebp, [esp+4+arg_10]
		cmp	ebp, 10h
		jz	short loc_10015D63
		cmp	ebp, 18h
		jz	short loc_10015D63
		cmp	ebp, 20h
		jnz	loc_10015E35

loc_10015D63:				; CODE XREF: sub_10015D40+13j
					; sub_10015D40+18j
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		test	ebx, ebx
		jz	short loc_10015D8D
		cmp	ebx, 1
		jnz	short loc_10015D7A
		test	edi, edi
		jnz	short loc_10015D8D

loc_10015D7A:				; CODE XREF: sub_10015D40+34j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10015D8D:				; CODE XREF: sub_10015D40+2Fj
					; sub_10015D40+38j
		push	esi
		push	128h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10015DB5
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10015DB5:				; CODE XREF: sub_10015D40+5Fj
		cmp	ebx, 1
		jnz	short loc_10015DF0
		cmp	[esp+10h+arg_C], 0
		mov	eax, [edi]
		mov	[esi+118h], eax
		mov	ecx, [edi+4]
		mov	[esi+11Ch], ecx
		mov	edx, [edi+8]
		mov	[esi+120h], edx
		mov	eax, [edi+0Ch]
		mov	[esi+124h], eax
		mov	eax, offset sub_100159C0
		jnz	short loc_10015E01
		mov	eax, offset sub_10015B30
		jmp	short loc_10015E01
; ---------------------------------------------------------------------------

loc_10015DF0:				; CODE XREF: sub_10015D40+78j
		cmp	[esp+10h+arg_C], 0
		mov	eax, offset sub_10015960
		jnz	short loc_10015E01
		mov	eax, offset sub_10015AD0

loc_10015E01:				; CODE XREF: sub_10015D40+A7j
					; sub_10015D40+AEj ...
		mov	ecx, [esp+10h+arg_0]
		push	ebp
		push	ecx
		push	esi
		mov	[esi+4], eax
		mov	[esi], ebp
		call	sub_10015900
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10015E2E
		push	128h
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		pop	esi
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10015E2E:				; CODE XREF: sub_10015D40+D7j
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10015E35:				; CODE XREF: sub_10015D40+6j
					; sub_10015D40+1Dj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		pop	ebp
		retn
sub_10015D40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10015E50(void	*Dst, int)
sub_10015E50	proc near		; DATA XREF: .rdata:10039408o

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jz	short loc_10015E69
		push	128h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch

loc_10015E69:				; CODE XREF: sub_10015E50+7j
		cmp	[esp+4+arg_4], 0
		jz	short loc_10015E79
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10015E79:				; CODE XREF: sub_10015E50+1Ej
		pop	esi
		retn
sub_10015E50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015E80	proc near		; DATA XREF: .rdata:1003940Co
					; .rdata:10039410o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	edx, [esp+arg_0]
		push	ebx
		push	edi
		test	edx, edx
		jz	short loc_10015EEE
		mov	ebx, [esp+8+arg_4]
		test	ebx, ebx
		jz	short loc_10015EEE
		mov	edi, [esp+8+arg_10]
		test	edi, edi
		jz	short loc_10015EEE
		mov	ecx, [esp+8+arg_8]
		test	ecx, ecx
		jz	short loc_10015EEE
		mov	eax, [esp+8+arg_14]
		test	al, 0Fh
		jz	short loc_10015EBD
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10015EBD:				; CODE XREF: sub_10015E80+28j
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		cmp	esi, eax
		jnb	short loc_10015EDA
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10015EDA:				; CODE XREF: sub_10015E80+44j
		push	eax
		push	edi
		push	esi
		push	ecx
		mov	[ecx], eax
		mov	eax, [edx+4]
		push	ebx
		push	edx
		call	eax
		add	esp, 18h
		pop	esi
		pop	edi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10015EEE:				; CODE XREF: sub_10015E80+8j
					; sub_10015E80+10j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10015E80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015F10	proc near		; CODE XREF: sub_100163F0+16Fp
		cmp	eax, 780h
		jb	short loc_10015F1D
		mov	eax, 40h
		retn
; ---------------------------------------------------------------------------

loc_10015F1D:				; CODE XREF: sub_10015F10+5j
		cmp	eax, 3C0h
		jb	short loc_10015F2A
		mov	eax, 30h
		retn
; ---------------------------------------------------------------------------

loc_10015F2A:				; CODE XREF: sub_10015F10+12j
		cmp	eax, 180h
		jb	short loc_10015F37
		mov	eax, 20h
		retn
; ---------------------------------------------------------------------------

loc_10015F37:				; CODE XREF: sub_10015F10+1Fj
		cmp	eax, 100h
		sbb	eax, eax
		and	eax, 0FFFFFFF8h
		add	eax, 1Ch
		retn
sub_10015F10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015F50	proc near		; DATA XREF: .rdata:100391CCo

var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 74h
		push	ebx
		xor	ebx, ebx
		push	ebp
		mov	[esp+7Ch+var_70], ebx
		mov	[esp+7Ch+var_6C], ebx
		mov	[esp+7Ch+var_64], ebx
		mov	[esp+7Ch+var_74], ebx
		cmp	[esp+7Ch+arg_4], ebx
		jz	loc_100163D8
		mov	ebp, [esp+7Ch+arg_0]
		cmp	ebp, ebx
		jl	loc_100163D8
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		add	esp, 4
		mov	[esp+80h+var_68], esi
		cmp	esi, ebx
		jnz	short loc_10015FB2
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_10015FB2:				; CODE XREF: sub_10015F50+49j
		push	edi
		push	1Ch
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 8
		cmp	edi, ebx
		jnz	short loc_10015FE4
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	esi
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_10015FE4:				; CODE XREF: sub_10015F50+72j
		mov	[edi], esi
		lea	eax, [esp+84h+var_50]
		push	eax
		mov	[esp+88h+var_44], ebx
		mov	[esp+88h+var_24], ebx
		mov	[esp+88h+var_54], ebx
		mov	[esp+88h+var_4], ebx
		mov	[esp+88h+var_34], ebx
		mov	[esp+88h+var_14], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_100162E2
		lea	ecx, [esp+84h+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_100162E2
		lea	edx, [esp+84h+var_60]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_100162E2
		lea	eax, [esp+84h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_100162E2
		lea	ecx, [esp+84h+var_40]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_100162E2
		lea	edx, [esp+84h+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_100162E2
		push	ebp
		call	PORT_Alloc_Util
		push	ebp
		push	eax
		mov	[esp+90h+var_70], eax
		call	sub_1000CD60
		add	esp, 0Ch
		mov	[esp+84h+var_74], eax
		cmp	eax, ebx
		jnz	loc_100162E2
		mov	eax, [esp+84h+var_70]
		or	byte ptr [eax],	80h
		or	byte ptr [eax+ebp-1], 1
		push	ebp
		push	eax
		lea	eax, [esp+8Ch+var_50]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_100162E2
		lea	ecx, [esp+84h+var_64]
		push	ecx
		push	1
		lea	edx, ds:0[ebp*8]
		push	edx
		lea	eax, [esp+90h+var_50]
		push	eax
		call	sub_10026630
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_100162E2
		lea	ecx, [esp+84h+var_40]
		push	ecx
		lea	edx, [esp+88h+var_50]
		push	1
		push	edx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_100162E2
		lea	eax, [esp+84h+var_30]
		push	eax
		lea	ecx, [esp+88h+var_40]
		push	ecx
		call	sub_1002B6B0
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_100162E2
		push	ebp
		call	PORT_Alloc_Util
		push	ebp
		push	eax
		mov	[esp+90h+var_6C], eax
		call	sub_1000CD60
		add	esp, 0Ch
		mov	[esp+84h+var_74], eax
		cmp	eax, ebx
		jnz	loc_100162E2
		mov	edx, [esp+84h+var_6C]
		push	ebp
		push	edx
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_100162E2
		lea	ecx, [esp+84h+var_50]
		push	ecx
		lea	edx, [esp+88h+var_60]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jle	short loc_100161A2
		lea	eax, [esp+84h+var_60]
		push	eax
		lea	ecx, [esp+88h+var_50]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_100162E2

loc_100161A2:				; CODE XREF: sub_10015F50+231j
					; sub_10015F50+2D9j
		lea	eax, [esp+84h+var_60]
		push	2
		push	eax
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		js	short loc_100161CB
		lea	ecx, [esp+84h+var_40]
		push	ecx
		lea	edx, [esp+88h+var_60]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		js	short loc_100161DA

loc_100161CB:				; CODE XREF: sub_10015F50+263j
		lea	eax, [esp+84h+var_60]
		push	3
		push	eax
		call	sub_10028F70
		add	esp, 8

loc_100161DA:				; CODE XREF: sub_10015F50+279j
		lea	ecx, [esp+84h+var_20]
		push	ecx
		lea	edx, [esp+88h+var_50]
		push	edx
		lea	eax, [esp+8Ch+var_30]
		push	eax
		lea	ecx, [esp+90h+var_60]
		push	ecx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_100162E2
		lea	edx, [esp+84h+var_20]
		push	1
		push	edx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jnz	short loc_10016234
		lea	eax, [esp+84h+var_60]
		push	eax
		mov	ecx, eax
		push	1
		push	ecx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jge	loc_100161A2
		jmp	loc_100162E2
; ---------------------------------------------------------------------------

loc_10016234:				; CODE XREF: sub_10015F50+2C1j
		lea	edx, [esp+84h+var_50]
		push	edx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001624F
		mov	esi, 0FFFFFFFDh
		jmp	loc_100162E2
; ---------------------------------------------------------------------------

loc_1001624F:				; CODE XREF: sub_10015F50+2F3j
		mov	ecx, [esp+84h+var_68]
		push	eax
		lea	eax, [edi+4]
		push	eax
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+8]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001626F
		mov	esi, 0FFFFFFFEh
		jmp	short loc_100162E2
; ---------------------------------------------------------------------------

loc_1001626F:				; CODE XREF: sub_10015F50+316j
		mov	edx, [edi+0Ch]
		push	edx
		push	eax
		lea	eax, [esp+8Ch+var_50]
		push	eax
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_100162E2
		lea	ecx, [esp+84h+var_60]
		push	ecx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001629F
		mov	esi, 0FFFFFFFDh
		jmp	short loc_100162E2
; ---------------------------------------------------------------------------

loc_1001629F:				; CODE XREF: sub_10015F50+346j
		push	eax
		mov	eax, [esp+88h+var_68]
		lea	edx, [edi+10h]
		push	edx
		push	eax
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+14h]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_100162BF
		mov	esi, 0FFFFFFFEh
		jmp	short loc_100162E2
; ---------------------------------------------------------------------------

loc_100162BF:				; CODE XREF: sub_10015F50+366j
		mov	ecx, [edi+18h]
		push	ecx
		push	eax
		lea	edx, [esp+8Ch+var_60]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_100162E2
		mov	eax, [esp+84h+arg_4]
		xor	esi, esi
		mov	[eax], edi

loc_100162E2:				; CODE XREF: sub_10015F50+C2j
					; sub_10015F50+D9j ...
		lea	ecx, [esp+84h+var_50]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+88h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+90h+var_10]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+94h+var_40]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+98h+var_20]
		push	eax
		call	sub_10028EF0
		mov	eax, [esp+9Ch+var_70]
		add	esp, 18h
		cmp	eax, ebx
		jz	short loc_10016336
		push	ebp
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_10016336:				; CODE XREF: sub_10015F50+3DAj
		mov	eax, [esp+84h+var_6C]
		cmp	eax, ebx
		jz	short loc_10016348
		push	ebp
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_10016348:				; CODE XREF: sub_10015F50+3ECj
		cmp	esi, ebx
		jz	short loc_100163B7
		cmp	esi, 0FFFFFFFCh
		jz	short loc_100163A0
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10016389
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10016372
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+84h+var_74], 0FFFFFFFFh
		jmp	short loc_100163BD
; ---------------------------------------------------------------------------

loc_10016372:				; CODE XREF: sub_10015F50+409j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+84h+var_74], 0FFFFFFFFh
		jmp	short loc_100163BD
; ---------------------------------------------------------------------------

loc_10016389:				; CODE XREF: sub_10015F50+404j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+84h+var_74], 0FFFFFFFFh
		jmp	short loc_100163BD
; ---------------------------------------------------------------------------

loc_100163A0:				; CODE XREF: sub_10015F50+3FFj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+84h+var_74], 0FFFFFFFFh
		jmp	short loc_100163BD
; ---------------------------------------------------------------------------

loc_100163B7:				; CODE XREF: sub_10015F50+3FAj
		cmp	[esp+84h+var_74], ebx
		jz	short loc_100163CC

loc_100163BD:				; CODE XREF: sub_10015F50+420j
					; sub_10015F50+437j ...
		mov	ecx, [esp+84h+var_68]
		push	1
		push	ecx
		call	PORT_FreeArena_Util
		add	esp, 8

loc_100163CC:				; CODE XREF: sub_10015F50+46Bj
		mov	eax, [esp+84h+var_74]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 74h
		retn
; ---------------------------------------------------------------------------

loc_100163D8:				; CODE XREF: sub_10015F50+1Ej
					; sub_10015F50+2Dj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 74h
		retn
sub_10015F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100163F0	proc near		; DATA XREF: .rdata:100391D0o

var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 44h
		push	ebx
		xor	ebx, ebx
		mov	[esp+48h+var_44], ebx
		cmp	[esp+48h+arg_0], ebx
		jz	loc_10016741
		cmp	[esp+48h+arg_4], ebx
		jz	loc_10016741
		push	ebp
		push	800h
		call	PORT_NewArena_Util
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jnz	short loc_10016438
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10016438:				; CODE XREF: sub_100163F0+30j
		push	esi
		push	34h
		push	ebp
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jnz	short loc_10016469
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	ebp
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10016469:				; CODE XREF: sub_100163F0+58j
		mov	[esi], ebp
		lea	eax, [esp+50h+var_10]
		push	edi
		push	eax
		mov	[esp+58h+var_4], ebx
		mov	[esp+58h+var_34], ebx
		mov	[esp+58h+var_24], ebx
		mov	[esp+58h+var_14], ebx
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebx
		jl	loc_1001662E
		lea	ecx, [esp+54h+var_40]
		push	ecx
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebx
		jl	loc_1001662E
		lea	edx, [esp+54h+var_30]
		push	edx
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebx
		jl	loc_1001662E
		lea	eax, [esp+54h+var_20]
		push	eax
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebx
		jl	loc_1001662E
		mov	ecx, [esp+54h+arg_0]
		add	ecx, 4
		push	ecx
		lea	edx, [esi+4]
		push	edx
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		mov	[esp+54h+var_44], eax
		cmp	eax, ebx
		jnz	loc_1001662E
		mov	eax, [esi+0Ch]
		mov	ecx, [esi+8]
		push	eax
		push	ecx
		lea	edx, [esp+5Ch+var_30]
		push	edx
		call	sub_10029D30
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, ebx
		jl	loc_1001662E
		mov	eax, [esp+54h+arg_0]
		add	eax, 10h
		push	eax
		lea	ecx, [esi+10h]
		push	ecx
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		mov	[esp+54h+var_44], eax
		cmp	eax, ebx
		jnz	loc_1001662E
		mov	edx, [esi+18h]
		mov	eax, [esi+14h]
		push	edx
		push	eax
		lea	ecx, [esp+5Ch+var_10]
		push	ecx
		call	sub_10029D30
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, ebx
		jl	loc_1001662E
		mov	edx, [esp+54h+arg_0]
		mov	eax, [edx+0Ch]
		call	sub_10015F10
		push	eax
		lea	eax, [esi+28h]
		push	eax
		push	ebp
		call	SECITEM_AllocItem_Util
		mov	ecx, [esi+30h]
		mov	edx, [esi+2Ch]
		push	ecx
		push	edx
		call	sub_1000CD60
		mov	eax, [esi+30h]
		mov	ecx, [esi+2Ch]
		push	eax
		push	ecx
		lea	edx, [esp+70h+var_40]
		push	edx
		call	sub_10029D30
		mov	edi, eax
		add	esp, 20h
		cmp	edi, ebx
		jl	loc_1001662E
		lea	eax, [esp+54h+var_40]
		push	eax
		lea	ecx, [esp+58h+var_30]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002C150
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, ebx
		jl	short loc_1001662E
		lea	eax, [esp+54h+var_20]
		push	eax
		lea	ecx, [esp+58h+var_30]
		push	ecx
		lea	edx, [esp+5Ch+var_40]
		push	edx
		lea	eax, [esp+60h+var_10]
		push	eax
		call	sub_100288A0
		mov	edi, eax
		add	esp, 10h
		cmp	edi, ebx
		jl	short loc_1001662E
		lea	ecx, [esp+54h+var_20]
		push	ecx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_100165F0
		mov	edi, 0FFFFFFFDh
		jmp	short loc_1001662E
; ---------------------------------------------------------------------------

loc_100165F0:				; CODE XREF: sub_100163F0+1F7j
		push	eax
		mov	eax, [esi]
		lea	edx, [esi+1Ch]
		push	edx
		push	eax
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+20h]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001660E
		mov	edi, 0FFFFFFFEh
		jmp	short loc_1001662E
; ---------------------------------------------------------------------------

loc_1001660E:				; CODE XREF: sub_100163F0+215j
		mov	ecx, [esi+24h]
		push	ecx
		push	eax
		lea	edx, [esp+5Ch+var_20]
		push	edx
		call	sub_10029ED0
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, ebx
		jl	short loc_1001662E
		mov	eax, [esp+54h+arg_4]
		xor	edi, edi
		mov	[eax], esi

loc_1001662E:				; CODE XREF: sub_100163F0+9Dj
					; sub_100163F0+B4j ...
		lea	ecx, [esp+54h+var_10]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+58h+var_40]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+5Ch+var_30]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+60h+var_20]
		push	ecx
		call	sub_10028EF0
		add	esp, 10h
		cmp	edi, ebx
		jz	loc_10016724
		cmp	edi, 0FFFFFFFCh
		jz	loc_100166F8
		cmp	edi, 0FFFFFFFDh
		jz	short loc_100166CC
		cmp	edi, 0FFFFFFFEh
		jz	short loc_100166A0
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		push	1
		push	ebp
		mov	[esp+5Ch+var_44], 0FFFFFFFFh
		call	PORT_FreeArena_Util
		mov	eax, [esp+5Ch+var_44]
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_100166A0:				; CODE XREF: sub_100163F0+282j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		push	1
		push	ebp
		mov	[esp+5Ch+var_44], 0FFFFFFFFh
		call	PORT_FreeArena_Util
		mov	eax, [esp+5Ch+var_44]
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_100166CC:				; CODE XREF: sub_100163F0+27Dj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		push	1
		push	ebp
		mov	[esp+5Ch+var_44], 0FFFFFFFFh
		call	PORT_FreeArena_Util
		mov	eax, [esp+5Ch+var_44]
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_100166F8:				; CODE XREF: sub_100163F0+274j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		push	1
		push	ebp
		mov	[esp+5Ch+var_44], 0FFFFFFFFh
		call	PORT_FreeArena_Util
		mov	eax, [esp+5Ch+var_44]
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10016724:				; CODE XREF: sub_100163F0+26Bj
		cmp	[esp+54h+var_44], ebx
		jz	short loc_10016735
		push	1
		push	ebp
		call	PORT_FreeArena_Util
		add	esp, 8

loc_10016735:				; CODE XREF: sub_100163F0+338j
		mov	eax, [esp+54h+var_44]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10016741:				; CODE XREF: sub_100163F0+Ej
					; sub_100163F0+18j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 44h
		retn
sub_100163F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10016760(int,	int, int, int, size_t Size)
sub_10016760	proc near		; DATA XREF: .rdata:100391D4o

Src		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
Size		= dword	ptr  14h

		sub	esp, 54h
		push	ebx
		push	ebp
		push	edi
		xor	edi, edi
		xor	ebx, ebx
		mov	[esp+60h+Src], edi
		cmp	[esp+60h+arg_0], edi
		jz	loc_10016A43
		cmp	[esp+60h+arg_4], edi
		jz	loc_10016A43
		cmp	[esp+60h+arg_8], edi
		jz	loc_10016A43
		mov	ebp, [esp+60h+arg_C]
		cmp	ebp, edi
		jz	loc_10016A43
		xor	eax, eax
		mov	[ebp+0], eax
		mov	[ebp+4], eax
		mov	[ebp+8], eax
		lea	eax, [esp+60h+var_40]
		push	esi
		push	eax
		mov	[esp+68h+var_34], edi
		mov	[esp+68h+var_14], edi
		mov	[esp+68h+var_44], edi
		mov	[esp+68h+var_24], edi
		mov	[esp+68h+var_4], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001699E
		lea	ecx, [esp+64h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001699E
		lea	edx, [esp+64h+var_50]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001699E
		lea	eax, [esp+64h+var_30]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001699E
		lea	ecx, [esp+64h+var_10]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001699E
		mov	eax, [esp+64h+arg_0]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+6Ch+var_50]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001699E
		mov	eax, [esp+64h+arg_8]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+6Ch+var_20]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001699E
		mov	eax, [esp+64h+arg_4]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+6Ch+var_40]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001699E
		lea	edx, [esp+64h+var_10]
		push	edx
		lea	eax, [esp+68h+var_40]
		push	1
		push	eax
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001699E
		lea	ecx, [esp+64h+var_50]
		push	1
		push	ecx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jle	loc_10016999
		lea	edx, [esp+64h+var_10]
		push	edx
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_10016999
		lea	ecx, [esp+64h+var_30]
		push	ecx
		lea	edx, [esp+68h+var_40]
		push	edx
		lea	eax, [esp+6Ch+var_20]
		push	eax
		lea	ecx, [esp+70h+var_50]
		push	ecx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_1001699E
		lea	edx, [esp+64h+var_30]
		push	edx
		call	sub_10029E60
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, edi
		jle	short loc_10016999
		push	ebx
		call	PORT_Alloc_Util
		push	ebx
		push	eax
		mov	[esp+70h+Src], eax
		lea	eax, [esp+70h+var_30]
		push	eax
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	short loc_1001693D
		xor	esi, esi

loc_1001693D:				; CODE XREF: sub_10016760+1D9j
		mov	eax, [esp+64h+Size]
		cmp	eax, edi
		mov	edi, eax
		ja	short loc_10016949
		mov	edi, ebx

loc_10016949:				; CODE XREF: sub_10016760+1E5j
		push	edi
		push	ebp
		push	0
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	ebx, edi
		jnb	short loc_1001697F
		mov	ecx, [ebp+4]
		sub	edi, ebx
		push	edi		; Size
		push	0		; Val
		push	ecx		; Dst
		call	memset
		mov	edx, [esp+70h+Src]
		mov	eax, [ebp+4]
		push	ebx		; Size
		push	edx		; Src
		add	eax, edi
		push	eax		; Dst
		call	memcpy
		add	esp, 18h
		xor	edi, edi
		jmp	short loc_1001699E
; ---------------------------------------------------------------------------

loc_1001697F:				; CODE XREF: sub_10016760+1F7j
		mov	ecx, [esp+64h+Src]
		mov	edx, [ebp+4]
		sub	ecx, edi
		push	edi		; Size
		add	ecx, ebx
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch
		xor	edi, edi
		jmp	short loc_1001699E
; ---------------------------------------------------------------------------

loc_10016999:				; CODE XREF: sub_10016760+163j
					; sub_10016760+17Dj ...
		mov	esi, 0FFFFFFFCh

loc_1001699E:				; CODE XREF: sub_10016760+69j
					; sub_10016760+80j ...
		lea	eax, [esp+64h+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+68h+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+6Ch+var_50]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+70h+var_30]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+74h+var_10]
		push	ecx
		call	sub_10028EF0
		mov	eax, [esp+78h+Src]
		add	esp, 14h
		cmp	eax, edi
		jz	short loc_100169E5
		push	ebx
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_100169E5:				; CODE XREF: sub_10016760+279j
		cmp	esi, edi
		jz	short loc_10016A39
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10016A0D
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10016A06
		cmp	esi, 0FFFFFFFEh
		jz	short loc_100169FF
		push	0FFFFE001h
		jmp	short loc_10016A12
; ---------------------------------------------------------------------------

loc_100169FF:				; CODE XREF: sub_10016760+296j
		push	0FFFFE013h
		jmp	short loc_10016A12
; ---------------------------------------------------------------------------

loc_10016A06:				; CODE XREF: sub_10016760+291j
		push	0FFFFE002h
		jmp	short loc_10016A12
; ---------------------------------------------------------------------------

loc_10016A0D:				; CODE XREF: sub_10016760+28Cj
		push	0FFFFE005h

loc_10016A12:				; CODE XREF: sub_10016760+29Dj
					; sub_10016760+2A4j ...
		call	PORT_SetError_Util
		mov	eax, [ebp+4]
		add	esp, 4
		cmp	eax, edi
		jz	short loc_10016A2E
		mov	edx, [ebp+8]
		push	edx
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_10016A2E:				; CODE XREF: sub_10016760+2BFj
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_10016A39:				; CODE XREF: sub_10016760+287j
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_10016A43:				; CODE XREF: sub_10016760+12j
					; sub_10016760+1Cj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 54h
		retn
sub_10016760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10016A60	proc near		; DATA XREF: .rdata:100391D8o

Src		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 88h
		push	ebp
		push	esi
		mov	esi, [esp+90h+arg_0]
		xor	ebp, ebp
		push	edi
		mov	[esp+94h+Src], ebp
		mov	[esp+94h+var_84], ebp
		cmp	esi, ebp
		jz	loc_10016E26
		cmp	[esp+94h+arg_4], ebp
		jz	loc_10016E26
		cmp	[esp+94h+arg_8], ebp
		jz	loc_10016E26
		cmp	[esp+94h+arg_C], ebp
		jz	loc_10016E26
		cmp	[esp+94h+arg_10], ebp
		jz	loc_10016E26
		mov	edi, [esp+94h+arg_14]
		cmp	edi, ebp
		jz	loc_10016E26
		xor	eax, eax
		mov	[edi], eax
		mov	[edi+4], eax
		mov	[edi+8], eax
		lea	eax, [esp+94h+var_80]
		push	ebx
		push	eax
		mov	[esp+9Ch+var_74], ebp
		mov	[esp+9Ch+var_54], ebp
		mov	[esp+9Ch+var_34], ebp
		mov	[esp+9Ch+var_14], ebp
		mov	[esp+9Ch+var_44], ebp
		mov	[esp+9Ch+var_24], ebp
		mov	[esp+9Ch+var_4], ebp
		mov	[esp+9Ch+var_64], ebp
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	ecx, [esp+98h+var_60]
		push	ecx
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	edx, [esp+98h+var_40]
		push	edx
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	eax, [esp+98h+var_20]
		push	eax
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	ecx, [esp+98h+var_50]
		push	ecx
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	edx, [esp+98h+var_30]
		push	edx
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	eax, [esp+98h+var_10]
		push	eax
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	ecx, [esp+98h+var_70]
		push	ecx
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, ebp
		jl	loc_10016D67
		mov	edx, [esi+8]
		mov	eax, [esi+4]
		push	edx
		push	eax
		lea	ecx, [esp+0A0h+var_80]
		push	ecx
		call	sub_10029D30
		mov	ebx, eax
		add	esp, 0Ch
		cmp	ebx, ebp
		jl	loc_10016D67
		mov	eax, [esp+98h+arg_4]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+0A0h+var_60]
		push	ecx
		call	sub_10029D30
		mov	ebx, eax
		add	esp, 0Ch
		cmp	ebx, ebp
		jl	loc_10016D67
		mov	eax, [esp+98h+arg_8]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+0A0h+var_40]
		push	ecx
		call	sub_10029D30
		mov	ebx, eax
		add	esp, 0Ch
		cmp	ebx, ebp
		jl	loc_10016D67
		mov	eax, [esp+98h+arg_C]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+0A0h+var_20]
		push	ecx
		call	sub_10029D30
		mov	ebx, eax
		add	esp, 0Ch
		cmp	ebx, ebp
		jl	loc_10016D67
		mov	eax, [esp+98h+arg_10]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+0A0h+var_50]
		push	ecx
		call	sub_10029D30
		mov	ebx, eax
		add	esp, 0Ch
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	edx, [esp+98h+var_30]
		push	edx
		lea	eax, [esp+9Ch+var_80]
		push	eax
		lea	ecx, [esp+0A0h+var_20]
		push	ecx
		lea	edx, [esp+0A4h+var_60]
		push	edx
		call	sub_100288A0
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	eax, [esp+98h+var_10]
		push	eax
		lea	ecx, [esp+9Ch+var_80]
		push	ecx
		lea	edx, [esp+0A0h+var_50]
		push	edx
		lea	eax, [esp+0A4h+var_40]
		push	eax
		call	sub_100288A0
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	ecx, [esp+98h+var_70]
		push	ecx
		lea	edx, [esp+9Ch+var_80]
		push	edx
		lea	eax, [esp+0A0h+var_10]
		push	eax
		lea	ecx, [esp+0A4h+var_30]
		push	ecx
		call	sub_1002C3B0
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, ebp
		jl	loc_10016D67
		lea	edx, [esp+98h+var_70]
		push	edx
		call	sub_10029E60
		mov	esi, eax
		push	esi
		mov	[esp+0A0h+var_84], esi
		call	PORT_Alloc_Util
		push	esi
		push	eax
		mov	[esp+0A8h+Src],	eax
		lea	eax, [esp+0A8h+var_70]
		push	eax
		call	sub_10029ED0
		mov	ebx, eax
		add	esp, 14h
		cmp	ebx, ebp
		jle	short loc_10016D17
		xor	ebx, ebx

loc_10016D17:				; CODE XREF: sub_10016A60+2B3j
		push	80h
		push	edi
		push	ebp
		call	SECITEM_AllocItem_Util
		mov	ecx, [edi+8]
		mov	edx, [edi+4]
		push	ecx		; Size
		push	ebp		; Val
		push	edx		; Dst
		call	memset
		add	esp, 18h
		cmp	esi, 80h
		jb	short loc_10016D50
		mov	eax, [esp+98h+Src]
		mov	edi, [edi+4]
		lea	esi, [esi+eax-80h]
		mov	ecx, 20h
		rep movsd
		jmp	short loc_10016D67
; ---------------------------------------------------------------------------

loc_10016D50:				; CODE XREF: sub_10016A60+2DAj
		mov	edx, [edi+4]
		mov	ecx, [esp+98h+Src]
		push	esi		; Size
		sub	edx, esi
		push	ecx		; Src
		sub	edx, 0FFFFFF80h
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10016D67:				; CODE XREF: sub_10016A60+A7j
					; sub_10016A60+BEj ...
		lea	eax, [esp+98h+var_80]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+9Ch+var_60]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0A0h+var_40]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0A4h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0A8h+var_50]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0ACh+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0B0h+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0B4h+var_70]
		push	ecx
		call	sub_10028EF0
		mov	eax, [esp+0B8h+Src]
		add	esp, 20h
		cmp	eax, ebp
		jz	short loc_10016DD6
		mov	edx, [esp+98h+var_84]
		push	edx
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_10016DD6:				; CODE XREF: sub_10016A60+366j
		cmp	ebx, ebp
		jz	short loc_10016E19
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_10016DFE
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_10016DF7
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_10016DF0
		push	0FFFFE001h
		jmp	short loc_10016E03
; ---------------------------------------------------------------------------

loc_10016DF0:				; CODE XREF: sub_10016A60+387j
		push	0FFFFE013h
		jmp	short loc_10016E03
; ---------------------------------------------------------------------------

loc_10016DF7:				; CODE XREF: sub_10016A60+382j
		push	0FFFFE002h
		jmp	short loc_10016E03
; ---------------------------------------------------------------------------

loc_10016DFE:				; CODE XREF: sub_10016A60+37Dj
		push	0FFFFE005h

loc_10016E03:				; CODE XREF: sub_10016A60+38Ej
					; sub_10016A60+395j ...
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 88h
		retn
; ---------------------------------------------------------------------------

loc_10016E19:				; CODE XREF: sub_10016A60+378j
		pop	ebx
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 88h
		retn
; ---------------------------------------------------------------------------

loc_10016E26:				; CODE XREF: sub_10016A60+1Cj
					; sub_10016A60+29j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 88h
		retn
sub_10016A60	endp


; =============== S U B	R O U T	I N E =======================================


sub_10016E40	proc near		; DATA XREF: .rdata:100391DCo

var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 44h
		push	ebx
		xor	ebx, ebx
		push	ebp
		push	edi
		mov	[esp+50h+var_44], 1
		cmp	[esp+50h+arg_0], ebx
		jz	loc_10017016
		mov	edi, [esp+50h+arg_4]
		cmp	edi, ebx
		jz	loc_10017016
		mov	ebp, [esp+50h+arg_8]
		cmp	ebp, ebx
		jz	loc_10017016
		lea	eax, [esp+50h+var_40]
		push	esi
		push	eax
		mov	[esp+58h+var_34], ebx
		mov	[esp+58h+var_24], ebx
		mov	[esp+58h+var_14], ebx
		mov	[esp+58h+var_4], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10016F69
		lea	ecx, [esp+54h+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10016F69
		lea	edx, [esp+54h+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10016F69
		lea	eax, [esp+54h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10016F69
		mov	ecx, [edi+8]
		mov	edx, [edi+4]
		push	ecx
		push	edx
		lea	eax, [esp+5Ch+var_40]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_10016F69
		mov	ecx, [ebp+8]
		mov	edx, [ebp+4]
		push	ecx
		push	edx
		lea	eax, [esp+5Ch+var_30]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_10016F69
		mov	eax, [esp+54h+arg_0]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_10016F69
		lea	ecx, [esp+54h+var_10]
		push	ecx
		lea	edx, [esp+58h+var_40]
		push	edx
		lea	eax, [esp+5Ch+var_30]
		push	eax
		lea	ecx, [esp+60h+var_20]
		push	ecx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	short loc_10016F69
		lea	edx, [esp+54h+var_10]
		push	1
		push	edx
		call	sub_1002A650
		add	esp, 8
		mov	edi, eax
		jmp	short loc_10016F6D
; ---------------------------------------------------------------------------

loc_10016F69:				; CODE XREF: sub_10016E40+54j
					; sub_10016E40+6Bj ...
		mov	edi, [esp+54h+var_44]

loc_10016F6D:				; CODE XREF: sub_10016E40+127j
		lea	eax, [esp+54h+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+58h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+5Ch+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+60h+var_10]
		push	eax
		call	sub_10028EF0
		add	esp, 10h
		cmp	esi, ebx
		jz	short loc_10017007
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10016FF0
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10016FD9
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10016FC2
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10016FC2:				; CODE XREF: sub_10016E40+169j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10016FD9:				; CODE XREF: sub_10016E40+164j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10016FF0:				; CODE XREF: sub_10016E40+15Fj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10017007:				; CODE XREF: sub_10016E40+15Aj
		pop	esi
		xor	eax, eax
		cmp	edi, ebx
		pop	edi
		pop	ebp
		setz	al
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10017016:				; CODE XREF: sub_10016E40+14j
					; sub_10016E40+20j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 44h
		retn
sub_10016E40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017030	proc near		; CODE XREF: sub_10017AC0+141p
					; sub_10018220+349p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	ecx, [edx+8]
		mov	eax, 1
		cmp	ecx, eax
		jbe	short loc_1001704E
		mov	edx, [edx+4]

loc_10017043:				; CODE XREF: sub_10017030+1Cj
		cmp	byte ptr [edx+eax], 0
		jnz	short loc_10017054
		inc	eax
		cmp	eax, ecx
		jb	short loc_10017043

loc_1001704E:				; CODE XREF: sub_10017030+Ej
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_10017054:				; CODE XREF: sub_10017030+17j
		xor	eax, eax
		retn
sub_10017030	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017060	proc near		; CODE XREF: sub_100173C0+27Bp
					; sub_10017AC0+130p ...

var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 0A8h
		mov	eax, [esp+0A8h+arg_0]
		push	ebx
		mov	ebx, [esp+0ACh+arg_C]
		push	ebp
		push	edi
		mov	edi, [eax+8]
		add	edi, 7
		xor	ebp, ebp
		sar	edi, 3
		mov	[esp+0B4h+var_A8], ebp
		mov	[esp+0B4h+var_A4], 0FFFFFFFFh
		cmp	ebx, ebp
		jz	short loc_100170BD
		mov	ecx, [ebx+4]
		cmp	byte ptr [ecx],	4
		jnz	short loc_100170A3
		lea	edx, [edi+edi+1]
		cmp	[ebx+8], edx
		jz	short loc_100170BD

loc_100170A3:				; CODE XREF: sub_10017060+38j
		push	0FFFFE08Eh
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0A8h
		retn
; ---------------------------------------------------------------------------

loc_100170BD:				; CODE XREF: sub_10017060+30j
					; sub_10017060+41j
		lea	eax, [esp+0B4h+var_70]
		push	esi
		push	eax
		mov	[esp+0BCh+var_64], ebp
		mov	[esp+0BCh+var_74], ebp
		mov	[esp+0BCh+var_94], ebp
		mov	[esp+0BCh+var_84], ebp
		mov	[esp+0BCh+var_14], ebp
		mov	[esp+0BCh+var_34], ebp
		mov	[esp+0BCh+var_54], ebp
		mov	[esp+0BCh+var_44], ebp
		mov	[esp+0BCh+var_24], ebp
		mov	[esp+0BCh+var_4], ebp
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		lea	ecx, [esp+0B8h+var_80]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		lea	edx, [esp+0B8h+var_A0]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		lea	eax, [esp+0B8h+var_90]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		lea	ecx, [esp+0B8h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		lea	edx, [esp+0B8h+var_40]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		lea	eax, [esp+0B8h+var_60]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		lea	ecx, [esp+0B8h+var_50]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		lea	edx, [esp+0B8h+var_30]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		lea	eax, [esp+0B8h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10017384
		cmp	[esp+0B8h+arg_8], ebp
		jz	short loc_1001722B
		cmp	ebx, ebp
		jz	short loc_1001722B
		mov	ecx, [ebx+4]
		push	edi
		inc	ecx
		push	ecx
		lea	edx, [esp+0C0h+var_70]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10017384
		mov	eax, [ebx+4]
		push	edi
		lea	ecx, [eax+edi+1]
		push	ecx
		lea	edx, [esp+0C0h+var_80]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10017384

loc_1001722B:				; CODE XREF: sub_10017060+188j
					; sub_10017060+18Cj
		mov	eax, [esp+0B8h+arg_0]
		mov	eax, [eax+74h]
		cmp	eax, ebp
		jz	loc_100172EA
		push	eax
		call	sub_1002E430
		add	esp, 4
		mov	[esp+0B8h+var_A8], eax
		cmp	eax, ebp
		jz	loc_100172EE
		mov	ecx, [esp+0B8h+arg_8]
		cmp	ecx, ebp
		jz	short loc_10017280
		cmp	ebx, ebp
		jz	short loc_10017280
		lea	edx, [esp+0B8h+var_90]
		push	edx
		lea	edx, [esp+0BCh+var_A0]
		push	edx
		lea	edx, [esp+0C0h+var_80]
		push	edx
		lea	edx, [esp+0C4h+var_70]
		push	edx
		push	ecx
		mov	ecx, [esp+0CCh+arg_4]
		push	ecx
		jmp	short loc_10017295
; ---------------------------------------------------------------------------

loc_10017280:				; CODE XREF: sub_10017060+1FBj
					; sub_10017060+1FFj
		lea	edx, [esp+0B8h+var_90]
		push	edx
		mov	edx, [esp+0BCh+arg_4]
		lea	ecx, [esp+0BCh+var_A0]
		push	ecx
		push	ebp
		push	ebp
		push	ebp
		push	edx

loc_10017295:				; CODE XREF: sub_10017060+21Ej
		push	eax
		call	sub_1002EE10
		mov	esi, eax
		add	esp, 1Ch
		cmp	esi, ebp
		jl	short loc_100172EA
		mov	ebx, [esp+0B8h+arg_10]
		mov	eax, [ebx+4]
		mov	byte ptr [eax],	4
		mov	ecx, [ebx+4]
		push	edi		; int
		inc	ecx
		push	ecx		; Dst
		lea	edx, [esp+0C0h+var_A0]
		push	edx		; int
		call	sub_10029F70
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	short loc_100172EA
		mov	eax, [ebx+4]
		push	edi		; int
		lea	ecx, [edi+eax+1]
		push	ecx		; Dst
		lea	edx, [esp+0C0h+var_90]
		push	edx		; int
		call	sub_10029F70
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	short loc_100172EA
		mov	[esp+0B8h+var_A4], ebp

loc_100172EA:				; CODE XREF: sub_10017060+1D7j
					; sub_10017060+242j ...
		mov	eax, [esp+0B8h+var_A8]

loc_100172EE:				; CODE XREF: sub_10017060+1ECj
					; sub_10017060+326j
		push	eax		; Memory
		call	sub_1002DE30
		lea	eax, [esp+0BCh+var_70]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0C0h+var_80]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0C4h+var_A0]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0C8h+var_90]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0CCh+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0D0h+var_40]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0D4h+var_60]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0D8h+var_50]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0DCh+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0E0h+var_10]
		push	eax
		call	sub_10028EF0
		add	esp, 2Ch
		cmp	esi, ebp
		jz	short loc_100173AE
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10017399
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10017392
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001738B
		push	0FFFFE001h
		jmp	short loc_1001739E
; ---------------------------------------------------------------------------

loc_10017384:				; CODE XREF: sub_10017060+A3j
					; sub_10017060+BAj ...
		mov	eax, ebp
		jmp	loc_100172EE
; ---------------------------------------------------------------------------

loc_1001738B:				; CODE XREF: sub_10017060+31Bj
		push	0FFFFE013h
		jmp	short loc_1001739E
; ---------------------------------------------------------------------------

loc_10017392:				; CODE XREF: sub_10017060+316j
		push	0FFFFE002h
		jmp	short loc_1001739E
; ---------------------------------------------------------------------------

loc_10017399:				; CODE XREF: sub_10017060+311j
		push	0FFFFE005h

loc_1001739E:				; CODE XREF: sub_10017060+322j
					; sub_10017060+330j ...
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+0B8h+var_A4], 0FFFFFFFFh

loc_100173AE:				; CODE XREF: sub_10017060+30Cj
		mov	eax, [esp+0B8h+var_A4]
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0A8h
		retn
sub_10017060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100173C0(size_t Size,	int, void *Src,	size_t)
sub_100173C0	proc near		; CODE XREF: sub_10017690j
					; sub_10017890+3Fp

var_10		= byte ptr -10h
var_4		= dword	ptr -4
Size		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	edi
		mov	edi, [esp+14h+Size]
		mov	[esp+14h+var_4], 0
		test	edi, edi
		jz	loc_10017675
		cmp	[esp+14h+arg_4], 0
		jz	loc_10017675
		cmp	[esp+14h+Src], 0
		jz	loc_10017675
		cmp	[esp+14h+arg_C], 0
		jl	loc_10017675
		push	ebp
		push	800h
		call	PORT_NewArena_Util
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_10017416
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10017416:				; CODE XREF: sub_100173C0+4Bj
		push	esi
		push	0A8h
		push	ebp
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10017440
		push	1
		push	ebp
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10017440:				; CODE XREF: sub_100173C0+69j
		push	ebx
		push	1
		lea	eax, [esi+9Ch]
		push	eax
		push	ebp
		call	SECITEM_AllocItem_Util
		mov	ecx, [esi+0A0h]
		mov	byte ptr [ecx],	1
		mov	[esi], ebp
		mov	edx, [edi+4]
		mov	[esi+4], edx
		mov	eax, [edi+8]
		mov	[esi+8], eax
		mov	ecx, [edi+0Ch]
		add	esp, 0Ch
		mov	[esi+0Ch], ecx
		cmp	dword ptr [edi+0Ch], 1
		jnz	short loc_10017480
		lea	edx, [edi+10h]
		push	edx
		lea	eax, [esi+10h]
		push	eax
		jmp	short loc_10017488
; ---------------------------------------------------------------------------

loc_10017480:				; CODE XREF: sub_100173C0+B4j
		lea	ecx, [edi+10h]
		push	ecx
		lea	edx, [esi+10h]
		push	edx

loc_10017488:				; CODE XREF: sub_100173C0+BEj
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1001764F
		mov	eax, [edi+1Ch]
		mov	[esi+1Ch], eax
		mov	ecx, [edi+20h]
		mov	[esi+20h], ecx
		mov	edx, [edi+24h]
		lea	eax, [edi+28h]
		push	eax
		lea	ecx, [esi+28h]
		push	ecx
		push	ebp
		mov	[esi+24h], edx
		call	SECITEM_CopyItem_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1001764F
		lea	edx, [edi+34h]
		push	edx
		lea	eax, [esi+34h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1001764F
		lea	ecx, [edi+40h]
		push	ecx
		lea	edx, [esi+40h]
		push	edx
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1001764F
		lea	eax, [edi+4Ch]
		push	eax
		lea	ecx, [esi+4Ch]
		push	ecx
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1001764F
		lea	edx, [edi+58h]
		push	edx
		lea	eax, [esi+58h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1001764F
		mov	ecx, [edi+64h]
		lea	edx, [edi+68h]
		push	edx
		lea	eax, [esi+68h]
		push	eax
		push	ebp
		mov	[esi+64h], ecx
		call	SECITEM_CopyItem_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1001764F
		mov	ecx, [edi+74h]
		lea	edx, [edi+78h]
		push	edx
		lea	eax, [esi+78h]
		push	eax
		push	ebp
		mov	[esi+74h], ecx
		call	SECITEM_CopyItem_Util
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1001764F
		mov	ecx, [edi+8]
		add	ecx, 7
		sar	ecx, 3
		lea	edx, [ecx+ecx+1]
		push	edx
		lea	eax, [esi+84h]
		push	eax
		push	ebp
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+60h]
		push	eax
		mov	[esp+30h+Size],	eax
		lea	eax, [esi+90h]
		push	eax
		push	ebp
		call	SECITEM_AllocItem_Util
		mov	ecx, [esp+38h+arg_C]
		mov	eax, [esp+38h+Size]
		add	esp, 18h
		cmp	ecx, eax
		jl	short loc_100175CC
		mov	ecx, [esp+20h+Src]
		mov	edx, [esi+94h]
		push	eax		; Size
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_100175FC
; ---------------------------------------------------------------------------

loc_100175CC:				; CODE XREF: sub_100173C0+1F3j
		sub	eax, ecx
		push	eax		; Size
		mov	eax, [esi+94h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esp+2Ch+arg_C]
		mov	edx, [esp+2Ch+Size]
		mov	ecx, [esp+2Ch+Src]
		push	eax		; Size
		sub	edx, eax
		add	edx, [esi+94h]
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 18h

loc_100175FC:				; CODE XREF: sub_100173C0+20Aj
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_1002A030
		add	esp, 4
		test	eax, eax
		js	short loc_1001764F
		mov	ecx, [esp+20h+Size]
		mov	edx, [esi+94h]
		push	ecx
		push	edx
		lea	eax, [esp+28h+var_10]
		push	eax
		call	sub_10029D30
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1001764F
		lea	eax, [esi+84h]
		push	eax
		push	0
		push	0
		lea	ecx, [esp+2Ch+var_10]
		push	ecx
		push	edi
		call	sub_10017060
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_1001764F
		mov	edx, [esp+20h+arg_4]
		mov	[edx], esi

loc_1001764F:				; CODE XREF: sub_100173C0+D5j
					; sub_100173C0+102j ...
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_10028EF0
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1001766B
		push	1
		push	ebp
		call	PORT_FreeArena_Util
		add	esp, 8

loc_1001766B:				; CODE XREF: sub_100173C0+29Ej
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		pop	edi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10017675:				; CODE XREF: sub_100173C0+12j
					; sub_100173C0+1Dj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 10h
		retn
sub_100173C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl sub_10017690(size_t Size,	int, void *Src,	size_t)
sub_10017690	proc near		; DATA XREF: .rdata:10039374o

Size		= dword	ptr  4
Src		= dword	ptr  0Ch

		jmp	sub_100173C0
sub_10017690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100176A0(int,	size_t Size)
sub_100176A0	proc near		; CODE XREF: sub_10017890+29p
					; sub_100181C0+29p

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Size		= dword	ptr  8

		sub	esp, 34h
		push	ebx
		push	ebp
		mov	ebp, [esp+3Ch+Size]
		push	esi
		xor	ebx, ebx
		push	edi
		lea	eax, [esp+44h+var_30]
		push	eax
		mov	[esp+48h+var_34], ebx
		xor	edi, edi
		mov	[esp+48h+var_24], ebx
		mov	[esp+48h+var_14], ebx
		mov	[esp+48h+var_4], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_100177F3
		lea	ecx, [esp+44h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_100177F3
		lea	edx, [esp+44h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_100177F3
		lea	ebx, [ebp+ebp+0]
		push	ebx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	loc_100177F1
		push	ebx
		push	edi
		call	sub_1000CD60
		add	esp, 8
		mov	[esp+44h+var_34], eax
		test	eax, eax
		jnz	loc_100177F1
		push	ebx
		lea	eax, [esp+48h+var_30]
		push	edi
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100177F1
		mov	ecx, [esp+44h+arg_0]
		push	ebp
		push	ecx
		lea	edx, [esp+4Ch+var_20]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_100177F1
		lea	eax, [esp+44h+var_10]
		push	1
		push	eax
		call	sub_1002B2B0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_100177F1
		lea	ecx, [esp+44h+var_20]
		push	ecx
		lea	edx, [esp+48h+var_10]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100177F1
		lea	ecx, [esp+44h+var_30]
		push	ecx
		lea	edx, [esp+48h+var_20]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100177F1
		lea	ecx, [esp+44h+var_30]
		push	ecx
		lea	edx, [esp+48h+var_10]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100177F1
		push	ebp		; int
		lea	ecx, [esp+48h+var_30]
		push	edi		; Dst
		push	ecx		; int
		call	sub_10029F70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100177F1
		push	ebp		; Size
		lea	edx, [edi+ebp]
		push	0		; Val
		push	edx		; Dst
		call	memset
		add	esp, 0Ch

loc_100177F1:				; CODE XREF: sub_100176A0+75j
					; sub_100176A0+8Bj ...
		xor	ebx, ebx

loc_100177F3:				; CODE XREF: sub_100176A0+30j
					; sub_100176A0+47j ...
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+48h+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+4Ch+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 0Ch
		cmp	esi, ebx
		jge	short loc_10017863
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10017854
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10017845
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10017836
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10017869
; ---------------------------------------------------------------------------

loc_10017836:				; CODE XREF: sub_100176A0+185j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10017869
; ---------------------------------------------------------------------------

loc_10017845:				; CODE XREF: sub_100176A0+180j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10017869
; ---------------------------------------------------------------------------

loc_10017854:				; CODE XREF: sub_100176A0+17Bj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10017869
; ---------------------------------------------------------------------------

loc_10017863:				; CODE XREF: sub_100176A0+176j
		cmp	[esp+44h+var_34], ebx
		jz	short loc_10017880

loc_10017869:				; CODE XREF: sub_100176A0+194j
					; sub_100176A0+1A3j ...
		cmp	edi, ebx
		jz	short loc_10017880
		push	edi
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_10017880:				; CODE XREF: sub_100176A0+1C7j
					; sub_100176A0+1CBj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 34h
		retn
sub_100176A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10017890(size_t Size,	int)
sub_10017890	proc near		; DATA XREF: .rdata:10039370o

Size		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+Size]
		push	ebp
		or	ebp, 0FFFFFFFFh
		test	ebx, ebx
		jnz	short loc_100178AF
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, ebp
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100178AF:				; CODE XREF: sub_10017890+Bj
		mov	eax, [ebx+5Ch]
		push	esi
		mov	esi, [ebx+60h]
		push	edi
		push	esi		; Size
		push	eax		; int
		call	sub_100176A0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_100178E0
		mov	ecx, [esp+10h+arg_4]
		push	esi		; size_t
		push	edi		; Src
		push	ecx		; int
		push	ebx		; Size
		call	sub_100173C0
		push	esi
		push	edi
		mov	ebp, eax
		call	PORT_ZFree_Util
		add	esp, 18h

loc_100178E0:				; CODE XREF: sub_10017890+35j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
sub_10017890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100178F0	proc near		; DATA XREF: .rdata:10039378o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 28h
		push	ebx
		push	ebp
		mov	ebp, [esp+30h+arg_0]
		xor	eax, eax
		mov	[esp+30h+var_24], eax
		mov	[esp+30h+var_28], 0FFFFFFFFh
		cmp	ebp, eax
		jz	loc_10017AA5
		mov	ebx, [esp+30h+arg_4]
		cmp	ebx, eax
		jz	loc_10017AA5
		mov	ecx, [ebx+4]
		push	edi
		mov	edi, [ebp+8]
		add	edi, 7
		sar	edi, 3
		cmp	byte ptr [ecx],	4
		jz	short loc_10017944
		push	0FFFFE08Eh
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10017944:				; CODE XREF: sub_100178F0+3Bj
		lea	edx, [edi+edi+1]
		cmp	[ebx+8], edx
		jz	short loc_10017964
		push	0FFFFE00Eh
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10017964:				; CODE XREF: sub_100178F0+5Bj
		mov	[esp+34h+var_14], eax
		mov	[esp+34h+var_4], eax
		lea	eax, [esp+34h+var_20]
		push	esi
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017A3B
		lea	ecx, [esp+38h+var_10]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10017A3B
		mov	edx, [ebx+4]
		push	edi
		inc	edx
		push	edx
		lea	eax, [esp+40h+var_20]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10017A3B
		mov	ecx, [ebx+4]
		push	edi
		lea	edx, [ecx+edi+1]
		push	edx
		lea	eax, [esp+40h+var_10]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10017A3B
		mov	ecx, [ebp+74h]
		push	ecx
		call	sub_1002E430
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_100179FE
		mov	eax, [ebp+74h]
		test	eax, eax
		jle	short loc_100179F7
		cmp	eax, 3Ah
		jge	short loc_100179F7
		lea	esi, [edi-5]
		jmp	short loc_10017A3F
; ---------------------------------------------------------------------------

loc_100179F7:				; CODE XREF: sub_100178F0+FBj
					; sub_100178F0+100j
		mov	esi, 0FFFFFFFCh
		jmp	short loc_10017A3F
; ---------------------------------------------------------------------------

loc_100179FE:				; CODE XREF: sub_100178F0+F4j
		lea	edx, [esp+38h+var_10]
		push	edx
		lea	eax, [esp+3Ch+var_20]
		push	eax
		push	edi
		call	sub_1002DE10
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jns	short loc_10017A31
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_10017A3F
		push	0FFFFE00Eh
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+38h+var_28], esi
		xor	esi, esi
		jmp	short loc_10017A3F
; ---------------------------------------------------------------------------

loc_10017A31:				; CODE XREF: sub_100178F0+125j
		mov	[esp+38h+var_28], 0
		jmp	short loc_10017A3F
; ---------------------------------------------------------------------------

loc_10017A3B:				; CODE XREF: sub_100178F0+8Ej
					; sub_100178F0+A5j ...
		mov	edi, [esp+38h+var_24]

loc_10017A3F:				; CODE XREF: sub_100178F0+105j
					; sub_100178F0+10Cj ...
		push	edi		; Memory
		call	sub_1002DE30
		lea	ecx, [esp+3Ch+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+40h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_10017A99
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10017A84
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10017A7D
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10017A76
		push	0FFFFE001h
		jmp	short loc_10017A89
; ---------------------------------------------------------------------------

loc_10017A76:				; CODE XREF: sub_100178F0+17Dj
		push	0FFFFE013h
		jmp	short loc_10017A89
; ---------------------------------------------------------------------------

loc_10017A7D:				; CODE XREF: sub_100178F0+178j
		push	0FFFFE002h
		jmp	short loc_10017A89
; ---------------------------------------------------------------------------

loc_10017A84:				; CODE XREF: sub_100178F0+173j
		push	0FFFFE005h

loc_10017A89:				; CODE XREF: sub_100178F0+184j
					; sub_100178F0+18Bj ...
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+38h+var_28], 0FFFFFFFFh

loc_10017A99:				; CODE XREF: sub_100178F0+16Ej
		mov	eax, [esp+38h+var_28]
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10017AA5:				; CODE XREF: sub_100178F0+19j
					; sub_100178F0+25j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 28h
		retn
sub_100178F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017AC0	proc near		; DATA XREF: .rdata:1003937Co

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 34h
		xor	eax, eax
		push	ebx
		xor	ebx, ebx
		push	edi
		mov	[esp+3Ch+var_34], 0FFFFFFFFh
		mov	[esp+3Ch+var_2C], eax
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_24], eax
		cmp	[esp+3Ch+arg_0], eax
		jz	loc_10017C9E
		mov	ecx, [esp+3Ch+arg_4]
		cmp	ecx, eax
		jz	loc_10017C9E
		cmp	[esp+3Ch+arg_8], eax
		jz	loc_10017C9E
		mov	edi, [esp+3Ch+arg_10]
		cmp	edi, eax
		jz	loc_10017C9E
		mov	[edi], eax
		mov	[edi+4], eax
		push	ebp
		push	esi
		mov	[edi+8], eax
		mov	esi, [ecx+8]
		add	esi, 7
		mov	[esp+44h+var_14], eax
		sar	esi, 3
		lea	eax, [esi+esi+1]
		push	eax
		mov	[esp+48h+var_30], eax
		mov	[esp+48h+var_24], eax
		call	PORT_Alloc_Util
		mov	ebp, eax
		add	esp, 4
		mov	[esp+44h+var_28], ebp
		test	ebp, ebp
		jz	loc_10017C3E
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10017C3E
		mov	eax, [esp+44h+arg_8]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+4Ch+var_20]
		push	eax
		call	sub_10029D30
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10017C3E
		cmp	[esp+44h+arg_C], 0
		jz	short loc_10017BDA
		mov	ecx, [esp+44h+arg_4]
		cmp	dword ptr [ecx+64h], 1
		jz	short loc_10017BDA
		lea	edx, [esp+44h+var_10]
		push	edx
		mov	[esp+48h+var_4], 0
		call	sub_1002A030
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		js	loc_10017C3E
		mov	eax, [esp+44h+arg_4]
		mov	ecx, [eax+64h]
		push	ecx
		lea	edx, [esp+48h+var_10]
		push	edx
		call	sub_10028F70
		lea	eax, [esp+4Ch+var_20]
		push	eax
		lea	ecx, [esp+50h+var_10]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A260
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		js	short loc_10017C3E

loc_10017BDA:				; CODE XREF: sub_10017AC0+C2j
					; sub_10017AC0+CCj
		mov	ecx, [esp+44h+arg_0]
		lea	eax, [esp+44h+var_2C]
		push	eax
		mov	eax, [esp+48h+arg_4]
		push	ecx
		lea	edx, [esp+4Ch+var_20]
		push	edx
		push	0
		push	eax
		call	sub_10017060
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10017C3E
		lea	ecx, [esp+44h+var_2C]
		push	ecx
		call	sub_10017030
		add	esp, 4
		test	eax, eax
		jz	short loc_10017C1C
		push	0FFFFE00Eh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10017C3E
; ---------------------------------------------------------------------------

loc_10017C1C:				; CODE XREF: sub_10017AC0+14Bj
		push	esi
		push	edi
		push	0
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+4]
		push	esi		; Size
		lea	edx, [ebp+1]
		push	edx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 18h
		mov	[esp+44h+var_34], 0

loc_10017C3E:				; CODE XREF: sub_10017AC0+7Dj
					; sub_10017AC0+94j ...
		lea	ecx, [esp+44h+var_20]
		push	ecx
		call	sub_10028EF0
		add	esp, 4
		test	ebx, ebx
		jz	short loc_10017C80
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_10017C73
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_10017C6C
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_10017C65
		push	0FFFFE001h
		jmp	short loc_10017C78
; ---------------------------------------------------------------------------

loc_10017C65:				; CODE XREF: sub_10017AC0+19Cj
		push	0FFFFE013h
		jmp	short loc_10017C78
; ---------------------------------------------------------------------------

loc_10017C6C:				; CODE XREF: sub_10017AC0+197j
		push	0FFFFE002h
		jmp	short loc_10017C78
; ---------------------------------------------------------------------------

loc_10017C73:				; CODE XREF: sub_10017AC0+192j
		push	0FFFFE005h

loc_10017C78:				; CODE XREF: sub_10017AC0+1A3j
					; sub_10017AC0+1AAj ...
		call	PORT_SetError_Util
		add	esp, 4

loc_10017C80:				; CODE XREF: sub_10017AC0+18Dj
		test	ebp, ebp
		jz	short loc_10017C92
		mov	edx, [esp+44h+var_30]
		push	edx
		push	ebp
		call	PORT_ZFree_Util
		add	esp, 8

loc_10017C92:				; CODE XREF: sub_10017AC0+1C2j
		mov	eax, [esp+44h+var_34]
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_10017C9E:				; CODE XREF: sub_10017AC0+21j
					; sub_10017AC0+2Dj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 34h
		retn
sub_10017AC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017CC0	proc near		; CODE XREF: sub_100181C0+44p
					; DATA XREF: .rdata:10039388o

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 78h
		push	ebx
		mov	ebx, [esp+7Ch+arg_0]
		push	ebp
		push	esi
		push	edi
		xor	edi, edi
		xor	esi, esi
		mov	[esp+88h+var_74], 0FFFFFFFFh
		mov	[esp+88h+var_6C], edi
		mov	[esp+88h+var_68], edi
		mov	[esp+88h+var_64], edi
		mov	[esp+88h+var_78], edi
		mov	[esp+88h+var_4], edi
		mov	[esp+88h+var_24], edi
		mov	[esp+88h+var_54], edi
		mov	[esp+88h+var_14], edi
		mov	[esp+88h+var_34], edi
		mov	[esp+88h+var_44], edi
		cmp	ebx, edi
		jz	loc_100180D3
		mov	ecx, [esp+88h+arg_4]
		cmp	ecx, edi
		jz	loc_100180D3
		cmp	[esp+88h+arg_8], edi
		jz	loc_100180D3
		cmp	[esp+88h+arg_C], edi
		jz	loc_100180D3
		cmp	[esp+88h+arg_10], edi
		jl	loc_100180D3
		mov	eax, [ebx+8]
		mov	ebp, [ebx+60h]
		add	eax, 7
		sar	eax, 3
		mov	[esp+88h+var_78], eax
		mov	[esp+88h+var_70], ebp
		cmp	[ecx+4], edi
		jz	loc_100180C4
		lea	eax, [ebp+ebp+0]
		cmp	[ecx+8], eax
		jnb	short loc_10017D73
		push	0FFFFE003h
		jmp	loc_100180D8
; ---------------------------------------------------------------------------

loc_10017D73:				; CODE XREF: sub_10017CC0+A7j
		lea	ecx, [esp+88h+var_10]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100180E0
		lea	edx, [esp+88h+var_30]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100180E0
		lea	eax, [esp+88h+var_60]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100180E0
		lea	ecx, [esp+88h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100180E0
		lea	edx, [esp+88h+var_40]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100180E0
		lea	eax, [esp+88h+var_50]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100180E0
		mov	ecx, [ebx+60h]
		mov	edx, [ebx+5Ch]
		push	ecx
		push	edx
		lea	eax, [esp+90h+var_50]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100180E0
		mov	ecx, [ebx+98h]
		mov	edx, [ebx+94h]
		push	ecx
		push	edx
		lea	eax, [esp+90h+var_30]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100180E0
		mov	ecx, [esp+88h+arg_10]
		mov	edx, [esp+88h+arg_C]
		push	ecx
		push	edx
		lea	eax, [esp+90h+var_60]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100180E0
		lea	ecx, [esp+88h+var_60]
		push	ecx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jle	loc_10017F85
		lea	edx, [esp+88h+var_50]
		push	edx
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_10017F85
		lea	ecx, [esp+88h+var_60]
		push	ecx
		lea	edx, [esp+8Ch+var_50]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100180E0
		lea	ecx, [esp+88h+var_50]
		push	ecx
		call	sub_10028CE0
		lea	edx, [esp+8Ch+var_60]
		push	edx
		mov	ebp, eax
		call	sub_10028CE0
		add	esp, 8
		cmp	eax, ebp
		jg	short loc_10017EF2
		lea	eax, [esp+88h+var_60]
		push	eax
		lea	ecx, [esp+8Ch+var_50]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100180E0

loc_10017EF2:				; CODE XREF: sub_10017CC0+211j
		mov	eax, [esp+88h+var_78]
		lea	eax, [eax+eax+1]
		push	eax
		mov	[esp+8Ch+var_64], eax
		call	PORT_Alloc_Util
		mov	ebp, eax
		add	esp, 4
		mov	[esp+88h+var_68], ebp
		cmp	ebp, edi
		jz	loc_100180E0
		lea	eax, [esp+88h+var_6C]
		push	eax
		push	edi
		push	edi
		lea	ecx, [esp+94h+var_60]
		push	ecx
		push	ebx
		call	sub_10017060
		add	esp, 14h
		test	eax, eax
		jnz	loc_100180E0
		mov	edx, [esp+88h+var_78]
		push	edx
		inc	ebp
		lea	eax, [esp+8Ch+var_10]
		push	ebp
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100180E0
		lea	ecx, [esp+88h+var_20]
		push	ecx
		lea	edx, [esp+8Ch+var_50]
		push	edx
		lea	eax, [esp+90h+var_10]
		push	eax
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100180E0
		lea	ecx, [esp+88h+var_20]
		push	ecx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10017F8F

loc_10017F85:				; CODE XREF: sub_10017CC0+1B7j
					; sub_10017CC0+1D1j
		push	0FFFFE03Fh
		jmp	loc_100180D8
; ---------------------------------------------------------------------------

loc_10017F8F:				; CODE XREF: sub_10017CC0+2C3j
		mov	ebx, [esp+88h+arg_8]
		mov	edx, [ebx+8]
		mov	eax, [ebx+4]
		push	edx
		push	eax
		lea	ecx, [esp+90h+var_40]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100180E0
		lea	edx, [esp+88h+var_50]
		push	edx
		call	sub_10028CE0
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100180E0
		mov	eax, [ebx+8]
		add	eax, eax
		add	eax, eax
		add	eax, eax
		cmp	eax, esi
		jbe	short loc_10017FEC
		sub	eax, esi
		push	eax
		lea	eax, [esp+8Ch+var_40]
		push	eax
		mov	ecx, eax
		push	ecx
		call	sub_10028B10
		add	esp, 0Ch

loc_10017FEC:				; CODE XREF: sub_10017CC0+317j
		lea	edx, [esp+88h+var_60]
		push	edx
		lea	eax, [esp+8Ch+var_50]
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002CAC0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100180E0
		lea	edx, [esp+88h+var_30]
		push	edx
		lea	eax, [esp+8Ch+var_50]
		push	eax
		lea	ecx, [esp+90h+var_20]
		push	ecx
		push	edx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_100180E0
		lea	eax, [esp+88h+var_40]
		push	eax
		lea	ecx, [esp+8Ch+var_50]
		push	ecx
		lea	edx, [esp+90h+var_30]
		push	edx
		push	eax
		call	sub_1002C3B0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_100180E0
		lea	ecx, [esp+88h+var_40]
		push	ecx
		lea	edx, [esp+8Ch+var_50]
		push	edx
		lea	eax, [esp+90h+var_60]
		push	eax
		push	ecx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	short loc_100180E0
		lea	edx, [esp+88h+var_40]
		push	edx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10018085
		push	0FFFFE03Fh
		jmp	short loc_100180D8
; ---------------------------------------------------------------------------

loc_10018085:				; CODE XREF: sub_10017CC0+3BCj
		mov	ebp, [esp+88h+var_70]
		mov	ebx, [esp+88h+arg_4]
		mov	eax, [ebx+4]
		push	ebp		; int
		push	eax		; Dst
		lea	ecx, [esp+90h+var_20]
		push	ecx		; int
		call	sub_10029F70
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_100180E0
		mov	edx, [ebx+4]
		push	ebp		; int
		add	edx, ebp
		push	edx		; Dst
		lea	eax, [esp+90h+var_40]
		push	eax		; int
		call	sub_10029F70
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_100180E0
		mov	ecx, ebx

loc_100180C4:				; CODE XREF: sub_10017CC0+9Aj
		lea	edx, [ebp+ebp+0]
		mov	[ecx+8], edx
		mov	[esp+88h+var_74], edi
		xor	esi, esi
		jmp	short loc_100180E0
; ---------------------------------------------------------------------------

loc_100180D3:				; CODE XREF: sub_10017CC0+47j
					; sub_10017CC0+56j ...
		push	0FFFFE005h

loc_100180D8:				; CODE XREF: sub_10017CC0+AEj
					; sub_10017CC0+2CAj ...
		call	PORT_SetError_Util
		add	esp, 4

loc_100180E0:				; CODE XREF: sub_10017CC0+C4j
					; sub_10017CC0+DBj ...
		lea	eax, [esp+88h+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+8Ch+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+90h+var_60]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+94h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+98h+var_40]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+9Ch+var_50]
		push	edx
		call	sub_10028EF0
		mov	eax, [esp+0A0h+var_68]
		add	esp, 18h
		cmp	eax, edi
		jz	short loc_10018139
		mov	ecx, [esp+88h+var_78]
		lea	edx, [ecx+ecx+1]
		push	edx
		push	eax
		call	PORT_ZFree_Util
		add	esp, 8

loc_10018139:				; CODE XREF: sub_10017CC0+465j
		cmp	esi, edi
		jz	short loc_100181AC
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10018194
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001817C
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10018164
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 78h
		retn
; ---------------------------------------------------------------------------

loc_10018164:				; CODE XREF: sub_10017CC0+48Aj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 78h
		retn
; ---------------------------------------------------------------------------

loc_1001817C:				; CODE XREF: sub_10017CC0+485j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 78h
		retn
; ---------------------------------------------------------------------------

loc_10018194:				; CODE XREF: sub_10017CC0+480j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 78h
		retn
; ---------------------------------------------------------------------------

loc_100181AC:				; CODE XREF: sub_10017CC0+47Bj
		mov	eax, [esp+88h+var_74]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 78h
		retn
sub_10017CC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100181C0	proc near		; DATA XREF: .rdata:10039380o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		or	ebp, 0FFFFFFFFh
		test	ebx, ebx
		jnz	short loc_100181DF
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, ebp
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100181DF:				; CODE XREF: sub_100181C0+Bj
		mov	eax, [ebx+5Ch]
		push	esi
		mov	esi, [ebx+60h]
		push	edi
		push	esi		; Size
		push	eax		; int
		call	sub_100176A0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10018215
		mov	ecx, [esp+10h+arg_8]
		mov	edx, [esp+10h+arg_4]
		push	esi
		push	edi
		push	ecx
		push	edx
		push	ebx
		call	sub_10017CC0
		push	esi
		push	edi
		mov	ebp, eax
		call	PORT_ZFree_Util
		add	esp, 1Ch

loc_10018215:				; CODE XREF: sub_100181C0+35j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn
sub_100181C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018220	proc near		; DATA XREF: .rdata:10039384o

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 90h
		mov	ecx, [esp+90h+arg_0]
		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	edi, edi
		xor	esi, esi
		mov	[esp+0A0h+var_90], 0FFFFFFFFh
		mov	[esp+0A0h+var_8C], edi
		mov	[esp+0A0h+var_88], edi
		mov	[esp+0A0h+var_84], edi
		mov	[esp+0A0h+var_54], edi
		mov	[esp+0A0h+var_44], edi
		mov	[esp+0A0h+var_34], edi
		mov	[esp+0A0h+var_64], edi
		mov	[esp+0A0h+var_24], edi
		mov	[esp+0A0h+var_14], edi
		mov	[esp+0A0h+var_4], edi
		mov	[esp+0A0h+var_74], edi
		cmp	ecx, edi
		jz	loc_100185F6
		mov	eax, [esp+0A0h+arg_4]
		cmp	eax, edi
		jz	loc_100185F6
		cmp	[esp+0A0h+arg_8], edi
		jz	loc_100185F6
		mov	ebp, [ecx+8]
		mov	eax, [eax+8]
		add	ebp, 7
		sar	ebp, 3
		cmp	eax, edi
		jz	loc_100185EF
		test	al, 1
		jnz	loc_100185EF
		mov	ecx, [ecx+60h]
		add	ecx, ecx
		cmp	eax, ecx
		ja	loc_100185EF
		shr	eax, 1
		lea	edx, [ebp+ebp+1]
		mov	ebx, eax
		push	edx
		lea	eax, [esp+0A4h+var_8C]
		push	eax
		push	edi
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	[esp+0A0h+var_88], edi
		jz	loc_10018603
		lea	ecx, [esp+0A0h+var_60]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10018603
		lea	edx, [esp+0A0h+var_50]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10018603
		lea	eax, [esp+0A0h+var_40]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10018603
		lea	ecx, [esp+0A0h+var_70]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10018603
		lea	edx, [esp+0A0h+var_30]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10018603
		lea	eax, [esp+0A0h+var_20]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10018603
		lea	ecx, [esp+0A0h+var_10]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10018603
		lea	edx, [esp+0A0h+var_80]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10018603
		mov	eax, [esp+0A0h+arg_4]
		mov	ecx, [eax+4]
		push	ebx
		push	ecx
		lea	edx, [esp+0A8h+var_60]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10018603
		mov	eax, [esp+0A0h+arg_4]
		mov	ecx, [eax+4]
		push	ebx
		add	ecx, ebx
		push	ecx
		lea	edx, [esp+0A8h+var_50]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10018603
		mov	eax, [esp+0A0h+arg_0]
		mov	ecx, [eax+60h]
		mov	edx, [eax+5Ch]
		push	ecx
		push	edx
		lea	eax, [esp+0A8h+var_80]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10018603
		lea	ecx, [esp+0A0h+var_60]
		push	ecx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jle	loc_100185E8
		lea	edx, [esp+0A0h+var_50]
		push	edx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jle	loc_100185E8
		lea	eax, [esp+0A0h+var_80]
		push	eax
		lea	ecx, [esp+0A4h+var_60]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_100185E8
		lea	edx, [esp+0A0h+var_80]
		push	edx
		lea	eax, [esp+0A4h+var_50]
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_100185E8
		lea	ecx, [esp+0A0h+var_40]
		push	ecx
		lea	edx, [esp+0A4h+var_80]
		push	edx
		lea	eax, [esp+0A8h+var_50]
		push	eax
		call	sub_1002CAC0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10018603
		mov	ebx, [esp+0A0h+arg_8]
		mov	ecx, [ebx+8]
		mov	edx, [ebx+4]
		push	ecx
		push	edx
		lea	eax, [esp+0A8h+var_70]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10018603
		lea	ecx, [esp+0A0h+var_80]
		push	ecx
		call	sub_10028CE0
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10018603
		mov	eax, [ebx+8]
		add	eax, eax
		add	eax, eax
		add	eax, eax
		cmp	eax, esi
		jbe	short loc_100184E5
		sub	eax, esi
		push	eax
		lea	edx, [esp+0A4h+var_70]
		push	edx
		mov	eax, edx
		push	eax
		call	sub_10028B10
		add	esp, 0Ch

loc_100184E5:				; CODE XREF: sub_10018220+2B0j
		lea	ecx, [esp+0A0h+var_70]
		push	ecx
		lea	edx, [esp+0A4h+var_80]
		push	edx
		lea	eax, [esp+0A8h+var_40]
		push	eax
		push	ecx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10018603
		lea	edx, [esp+0A0h+var_30]
		push	edx
		lea	eax, [esp+0A4h+var_80]
		push	eax
		lea	ecx, [esp+0A8h+var_40]
		push	ecx
		lea	edx, [esp+0ACh+var_60]
		push	edx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10018603
		lea	eax, [esp+0A0h+var_8C]
		push	eax
		mov	eax, [esp+0A4h+arg_0]
		lea	ecx, [eax+84h]
		push	ecx
		lea	edx, [esp+0A8h+var_30]
		push	edx
		lea	ecx, [esp+0ACh+var_70]
		push	ecx
		push	eax
		call	sub_10017060
		add	esp, 14h
		test	eax, eax
		jz	short loc_10018564
		mov	[esp+0A0h+var_90], 0FFFFFFFFh
		jmp	loc_10018603
; ---------------------------------------------------------------------------

loc_10018564:				; CODE XREF: sub_10018220+335j
		lea	edx, [esp+0A0h+var_8C]
		push	edx
		call	sub_10017030
		add	esp, 4
		test	eax, eax
		jz	short loc_10018589

loc_10018575:				; CODE XREF: sub_10018220+3C0j
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		mov	[esp+0A4h+var_90], 0FFFFFFFFh
		jmp	short loc_10018600
; ---------------------------------------------------------------------------

loc_10018589:				; CODE XREF: sub_10018220+353j
		mov	eax, [esp+0A0h+var_88]
		push	ebp
		inc	eax
		push	eax
		lea	ecx, [esp+0A8h+var_20]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_10018603
		lea	edx, [esp+0A0h+var_10]
		push	edx
		lea	eax, [esp+0A4h+var_80]
		push	eax
		lea	ecx, [esp+0A8h+var_20]
		push	ecx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_10018603
		lea	edx, [esp+0A0h+var_60]
		push	edx
		lea	eax, [esp+0A4h+var_10]
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jnz	short loc_10018575
		mov	[esp+0A0h+var_90], edi
		jmp	short loc_10018603
; ---------------------------------------------------------------------------

loc_100185E8:				; CODE XREF: sub_10018220+1F8j
					; sub_10018220+20Dj ...
		push	0FFFFE00Ah
		jmp	short loc_100185FB
; ---------------------------------------------------------------------------

loc_100185EF:				; CODE XREF: sub_10018220+81j
					; sub_10018220+89j ...
		push	0FFFFE004h
		jmp	short loc_100185FB
; ---------------------------------------------------------------------------

loc_100185F6:				; CODE XREF: sub_10018220+51j
					; sub_10018220+60j ...
		push	0FFFFE005h

loc_100185FB:				; CODE XREF: sub_10018220+3CDj
					; sub_10018220+3D4j
		call	PORT_SetError_Util

loc_10018600:				; CODE XREF: sub_10018220+367j
		add	esp, 4

loc_10018603:				; CODE XREF: sub_10018220+B7j
					; sub_10018220+CEj ...
		lea	ecx, [esp+0A0h+var_60]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0A4h+var_50]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0A8h+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0ACh+var_70]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0B0h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0B4h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0B8h+var_10]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0BCh+var_80]
		push	edx
		call	sub_10028EF0
		add	esp, 20h
		cmp	[esp+0A0h+var_88], edi
		jz	short loc_10018673
		lea	eax, [esp+0A0h+var_8C]
		push	edi
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_10018673:				; CODE XREF: sub_10018220+443j
		cmp	esi, edi
		jz	short loc_100186F2
		cmp	esi, 0FFFFFFFCh
		jz	short loc_100186D7
		cmp	esi, 0FFFFFFFDh
		jz	short loc_100186BC
		cmp	esi, 0FFFFFFFEh
		jz	short loc_100186A1
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_100186A1:				; CODE XREF: sub_10018220+464j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_100186BC:				; CODE XREF: sub_10018220+45Fj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_100186D7:				; CODE XREF: sub_10018220+45Aj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_100186F2:				; CODE XREF: sub_10018220+455j
		mov	eax, [esp+0A0h+var_90]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 90h
		retn
sub_10018220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018710	proc near		; CODE XREF: sub_10018900+55p
					; sub_10018900+70p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	edi
		mov	eax, ebp
		xor	edi, edi
		xor	ebx, ebx
		lea	edx, [eax+1]

loc_10018720:				; CODE XREF: sub_10018710+15j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10018720
		sub	eax, edx
		mov	ecx, eax
		and	ecx, 80000001h
		jns	short loc_10018738
		dec	ecx
		or	ecx, 0FFFFFFFEh
		inc	ecx

loc_10018738:				; CODE XREF: sub_10018710+21j
		jz	short loc_10018740
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10018740:				; CODE XREF: sub_10018710:loc_10018738j
		cmp	eax, 2
		jle	short loc_1001875C

loc_10018745:				; CODE XREF: sub_10018710+4Aj
		cmp	byte ptr [ebp+0], 30h
		jnz	short loc_1001875C
		cmp	byte ptr [ebp+1], 30h
		jnz	short loc_1001875C
		sub	eax, 2
		add	ebp, 2
		cmp	eax, 2
		jg	short loc_10018745

loc_1001875C:				; CODE XREF: sub_10018710+33j
					; sub_10018710+39j ...
		cdq
		push	esi
		sub	eax, edx
		mov	edx, [esp+10h+arg_0]
		mov	esi, eax
		sar	esi, 1
		push	esi
		push	edx
		call	PORT_ArenaAlloc_Util
		mov	ecx, [esp+18h+arg_4]
		add	esp, 8
		mov	[ecx+4], eax
		test	eax, eax
		jz	short loc_100187E8
		mov	[ecx+8], esi
		cmp	[ebp+0], bl
		jz	short loc_100187E1

loc_10018785:				; CODE XREF: sub_10018710+CFj
		mov	al, [edi+ebp]
		cmp	al, 30h
		jl	short loc_10018798
		cmp	al, 39h
		jg	short loc_10018798
		movsx	eax, al
		sub	eax, 30h
		jmp	short loc_100187B6
; ---------------------------------------------------------------------------

loc_10018798:				; CODE XREF: sub_10018710+7Aj
					; sub_10018710+7Ej
		cmp	al, 61h
		jl	short loc_100187A8
		cmp	al, 66h
		jg	short loc_100187A8
		movsx	eax, al
		sub	eax, 57h
		jmp	short loc_100187B6
; ---------------------------------------------------------------------------

loc_100187A8:				; CODE XREF: sub_10018710+8Aj
					; sub_10018710+8Ej
		cmp	al, 41h
		jl	short loc_100187E8
		cmp	al, 46h
		jg	short loc_100187E8
		movsx	eax, al
		sub	eax, 37h

loc_100187B6:				; CODE XREF: sub_10018710+86j
					; sub_10018710+96j
		shl	ebx, 4
		add	ebx, eax
		mov	eax, edi
		and	eax, 80000001h
		jns	short loc_100187C9
		dec	eax
		or	eax, 0FFFFFFFEh
		inc	eax

loc_100187C9:				; CODE XREF: sub_10018710+B2j
		jz	short loc_100187DA
		mov	eax, edi
		cdq
		sub	eax, edx
		mov	edx, [ecx+4]
		sar	eax, 1
		mov	[eax+edx], bl
		xor	ebx, ebx

loc_100187DA:				; CODE XREF: sub_10018710:loc_100187C9j
		inc	edi
		cmp	byte ptr [edi+ebp], 0
		jnz	short loc_10018785

loc_100187E1:				; CODE XREF: sub_10018710+73j
		pop	esi
		pop	edi
		pop	ebp
		mov	eax, ecx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100187E8:				; CODE XREF: sub_10018710+6Bj
					; sub_10018710+9Aj ...
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10018710	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100187F0	proc near		; DATA XREF: .rdata:100394ECo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		mov	esi, [esp+8+arg_4]
		mov	[esi], ebx
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	ecx, [edi+8]
		mov	[esi+8], ecx
		mov	edx, [edi+0Ch]
		mov	[esi+0Ch], edx
		cmp	dword ptr [edi+0Ch], 1
		jnz	short loc_10018823
		lea	eax, [edi+10h]
		push	eax
		lea	ecx, [esi+10h]
		push	ecx
		jmp	short loc_1001882B
; ---------------------------------------------------------------------------

loc_10018823:				; CODE XREF: sub_100187F0+27j
		lea	edx, [edi+10h]
		push	edx
		lea	eax, [esi+10h]
		push	eax

loc_1001882B:				; CODE XREF: sub_100187F0+31j
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_100188EB
		mov	ecx, [edi+1Ch]
		mov	[esi+1Ch], ecx
		mov	edx, [edi+20h]
		mov	[esi+20h], edx
		mov	eax, [edi+24h]
		lea	ecx, [edi+28h]
		push	ecx
		lea	edx, [esi+28h]
		push	edx
		push	ebx
		mov	[esi+24h], eax
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_100188EB
		lea	eax, [edi+34h]
		push	eax
		lea	ecx, [esi+34h]
		push	ecx
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100188EB
		lea	edx, [edi+40h]
		push	edx
		lea	eax, [esi+40h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100188EB
		lea	ecx, [edi+4Ch]
		push	ecx
		lea	edx, [esi+4Ch]
		push	edx
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100188EB
		lea	eax, [edi+58h]
		push	eax
		lea	ecx, [esi+58h]
		push	ecx
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100188EB
		lea	edx, [edi+68h]
		push	edx
		lea	eax, [esi+68h]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100188EB
		mov	ecx, [edi+74h]
		lea	edx, [edi+78h]
		push	edx
		lea	eax, [esi+78h]
		push	eax
		push	ebx
		mov	[esi+74h], ecx
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100188F2

loc_100188EB:				; CODE XREF: sub_100187F0+46j
					; sub_100187F0+71j ...
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100188F2:				; CODE XREF: sub_100187F0+F9j
		mov	ecx, [edi+64h]
		pop	edi
		mov	[esi+64h], ecx
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_100187F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018900	proc near		; CODE XREF: sub_10018A60:loc_10018D0Ap

var_12C		= dword	ptr -12Ch
var_128		= word ptr -128h
var_126		= byte ptr -126h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 12Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+12Ch+var_4], eax
		mov	eax, [esp+12Ch+arg_0]
		mov	[esp+12Ch+var_12C], 0FFFFFFFFh
		cmp	eax, 3Ah
		ja	loc_10018A46
		push	ebp
		mov	[ebx+74h], eax
		mov	ebp, dword_10049000[eax*4]
		test	ebp, ebp
		jz	loc_10018A45
		mov	eax, [ebp+8]
		mov	[ebx+8], eax
		mov	eax, [ebx]
		mov	[ebx+0Ch], ecx
		cmp	ecx, 1
		mov	ecx, [ebp+0Ch]
		push	ecx
		lea	edx, [ebx+10h]
		push	edx
		push	eax
		call	sub_10018710
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10018A45
		mov	ecx, [ebp+10h]
		mov	eax, [ebx]
		push	ecx
		lea	edx, [ebx+28h]
		push	edx
		push	eax
		call	sub_10018710
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10018A45
		mov	ecx, [ebp+14h]
		mov	eax, [ebx]
		push	ecx
		lea	edx, [ebx+34h]
		push	edx
		push	eax
		call	sub_10018710
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10018A45
		mov	eax, [ebp+18h]
		push	esi
		push	edi
		mov	[esp+138h+var_128], 3430h
		mov	[esp+138h+var_126], 0
		mov	esi, eax
		mov	edi, edi

loc_100189B0:				; CODE XREF: sub_10018900+B5j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100189B0
		lea	edi, [esp+138h+var_128]
		sub	eax, esi
		dec	edi
		mov	edi, edi

loc_100189C0:				; CODE XREF: sub_10018900+C6j
		mov	cl, [edi+1]
		inc	edi
		test	cl, cl
		jnz	short loc_100189C0
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		mov	ecx, eax
		mov	eax, [ebp+1Ch]
		and	ecx, 3
		rep movsb
		mov	esi, eax
		jmp	short loc_100189E0
; ---------------------------------------------------------------------------
		align 10h

loc_100189E0:				; CODE XREF: sub_10018900+DBj
					; sub_10018900+E5j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_100189E0
		lea	edi, [esp+138h+var_128]
		sub	eax, esi
		dec	edi
		mov	edi, edi

loc_100189F0:				; CODE XREF: sub_10018900+F6j
		mov	cl, [edi+1]
		inc	edi
		test	cl, cl
		jnz	short loc_100189F0
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		mov	ecx, eax
		mov	eax, [ebx]
		and	ecx, 3
		rep movsb
		lea	ecx, [esp+138h+var_128]
		push	ecx
		lea	edx, [ebx+4Ch]
		push	edx
		push	eax
		call	sub_10018710
		add	esp, 0Ch
		pop	edi
		pop	esi
		test	eax, eax
		jz	short loc_10018A45
		mov	ecx, [ebp+20h]
		mov	eax, [ebx]
		push	ecx
		lea	edx, [ebx+58h]
		push	edx
		push	eax
		call	sub_10018710
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10018A45
		mov	ecx, [ebp+24h]
		mov	[ebx+64h], ecx
		mov	[esp+130h+var_12C], 0

loc_10018A45:				; CODE XREF: sub_10018900+38j
					; sub_10018900+5Fj ...
		pop	ebp

loc_10018A46:				; CODE XREF: sub_10018900+25j
		mov	ecx, [esp+12Ch+var_4]
		mov	eax, [esp+12Ch+var_12C]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 12Ch
		retn
sub_10018900	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018A60	proc near		; CODE XREF: sub_10018E30+55p
					; DATA XREF: .rdata:100394E4o

var_C		= dword	ptr -0Ch
Src		= dword	ptr -8
Size		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	ecx, [esp+0Ch+arg_4]
		mov	eax, [ecx+8]
		push	ebp
		xor	ebp, ebp
		push	esi
		or	esi, 0FFFFFFFFh
		mov	[esp+14h+var_C], ebp
		mov	[esp+14h+Src], ebp
		mov	[esp+14h+Size],	ebp
		cmp	eax, 0Ah
		jz	short loc_10018A9C
		cmp	eax, 7
		jz	short loc_10018A9C
		push	0FFFFE08Dh
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, esi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018A9C:				; CODE XREF: sub_10018A60+20j
					; sub_10018A60+25j
		add	eax, 0FFFFFFFEh
		mov	[esp+14h+Size],	eax
		mov	eax, [ecx+4]
		lea	ecx, [eax+2]
		mov	[esp+14h+Src], ecx
		cmp	byte ptr [eax],	6
		push	edi
		jnz	loc_10018D30
		lea	edx, [esp+18h+var_C]
		push	edx
		call	SECOID_FindOIDTag_Util
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebp
		jz	loc_10018D30
		mov	ecx, [esp+18h+Size]
		mov	eax, [esp+18h+arg_0]
		push	ebx
		mov	ebx, [esp+1Ch+arg_8]
		push	ecx
		push	eax
		mov	[ebx], eax
		mov	[ebx+64h], ebp
		mov	dword ptr [ebx+4], 1
		mov	[ebx+74h], ebp
		mov	[ebx+80h], ecx
		call	PORT_ArenaAlloc_Util
		add	esp, 8
		mov	[ebx+7Ch], eax
		cmp	eax, ebp
		jz	loc_10018D14	; jumptable 10018B27 default case
		mov	ecx, [esp+1Ch+Size]
		mov	edx, [esp+1Ch+Src]
		push	ecx		; Size
		push	edx		; Src
		push	eax		; Dst
		call	memcpy
		lea	eax, [edi-0CAh]
		add	esp, 0Ch
		cmp	eax, 39h	; switch 58 cases
		ja	loc_10018D14	; jumptable 10018B27 default case
		jmp	ds:off_10018D48[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10018B2E:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	15h		; jumptable 10018B27 case 20
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018B3A:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	16h		; jumptable 10018B27 case 21
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018B46:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	17h		; jumptable 10018B27 case 22
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018B52:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	18h		; jumptable 10018B27 case 23
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018B5E:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	19h		; jumptable 10018B27 case 24
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018B6A:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	1Ah		; jumptable 10018B27 case 25
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018B76:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	1Bh		; jumptable 10018B27 case 26
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018B82:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	1Ch		; jumptable 10018B27 case 29
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018B8E:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	1Dh		; jumptable 10018B27 case 30
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018B9A:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	1Eh		; jumptable 10018B27 case 31
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018BA6:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	1Fh		; jumptable 10018B27 case 32
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018BB2:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	20h		; jumptable 10018B27 case 35
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018BBE:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	21h		; jumptable 10018B27 case 36
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018BCA:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	22h		; jumptable 10018B27 case 37
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018BD6:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	23h		; jumptable 10018B27 case 38
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018BE2:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	24h		; jumptable 10018B27 case 39
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018BEE:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	2Fh		; jumptable 10018B27 case 40
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018BFA:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	30h		; jumptable 10018B27 case 41
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C06:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	31h		; jumptable 10018B27 case 42
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C12:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	32h		; jumptable 10018B27 case 43
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C1E:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	6		; jumptable 10018B27 case 44
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C2A:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	33h		; jumptable 10018B27 case 45
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C36:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	7		; jumptable 10018B27 case 46
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C42:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	34h		; jumptable 10018B27 case 47
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C4E:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	35h		; jumptable 10018B27 case 48
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C5A:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	8		; jumptable 10018B27 case 49
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C66:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	9		; jumptable 10018B27 case 50
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C72:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	36h		; jumptable 10018B27 case 51
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C7E:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	0Ah		; jumptable 10018B27 case 52
		mov	ecx, 2
		jmp	loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C8A:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	0Bh		; jumptable 10018B27 case 53
		mov	ecx, 2
		jmp	short loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C93:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	0Ch		; jumptable 10018B27 case 54
		mov	ecx, 2
		jmp	short loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018C9C:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	0Dh		; jumptable 10018B27 case 55
		mov	ecx, 2
		jmp	short loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018CA5:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	0Eh		; jumptable 10018B27 case 56
		mov	ecx, 2
		jmp	short loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018CAE:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	0Fh		; jumptable 10018B27 case 57
		mov	ecx, 2
		jmp	short loc_10018D0A
; ---------------------------------------------------------------------------

loc_10018CB7:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	1		; jumptable 10018B27 case 0
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CBB:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	10h		; jumptable 10018B27 case 1
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CBF:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	11h		; jumptable 10018B27 case 2
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CC3:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	12h		; jumptable 10018B27 case 3
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CC7:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	13h		; jumptable 10018B27 case 4
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CCB:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	14h		; jumptable 10018B27 case 5
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CCF:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	3		; jumptable 10018B27 case 6
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CD3:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	25h		; jumptable 10018B27 case 7
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CD7:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	26h		; jumptable 10018B27 case 8
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CDB:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	27h		; jumptable 10018B27 case 9
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CDF:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	28h		; jumptable 10018B27 case 10
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CE3:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	29h		; jumptable 10018B27 case 11
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CE7:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	2Ah		; jumptable 10018B27 case 12
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CEB:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	2Bh		; jumptable 10018B27 case 13
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CEF:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	2Ch		; jumptable 10018B27 case 14
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CF3:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	2Dh		; jumptable 10018B27 case 15
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CF7:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	2		; jumptable 10018B27 case 16
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CFB:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	2Eh		; jumptable 10018B27 case 17
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018CFF:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	4		; jumptable 10018B27 case 18
		jmp	short loc_10018D05
; ---------------------------------------------------------------------------

loc_10018D03:				; CODE XREF: sub_10018A60+C7j
					; DATA XREF: .text:off_10018D48o
		push	5		; jumptable 10018B27 case 19

loc_10018D05:				; CODE XREF: sub_10018A60+259j
					; sub_10018A60+25Dj ...
		mov	ecx, 1

loc_10018D0A:				; CODE XREF: sub_10018A60+D5j
					; sub_10018A60+E1j ...
		call	sub_10018900
		mov	esi, eax
		add	esp, 4

loc_10018D14:				; CODE XREF: sub_10018A60+9Fj
					; sub_10018A60+C1j ...
		cmp	[ebx+64h], ebp	; jumptable 10018B27 default case
		pop	ebx
		jnz	short loc_10018D27
		push	0FFFFE08Dh
		call	PORT_SetError_Util
		add	esp, 4

loc_10018D27:				; CODE XREF: sub_10018A60+2B8j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018D30:				; CODE XREF: sub_10018A60+51j
					; sub_10018A60+68j
		push	0FFFFE08Dh
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
sub_10018A60	endp

; ---------------------------------------------------------------------------
		align 4
off_10018D48	dd offset loc_10018CB7,	offset loc_10018CBB, offset loc_10018CBF
					; DATA XREF: sub_10018A60+C7r
		dd offset loc_10018CC3,	offset loc_10018CC7, offset loc_10018CCB ; jump	table for switch statement
		dd offset loc_10018CCF,	offset loc_10018CD3, offset loc_10018CD7
		dd offset loc_10018CDB,	offset loc_10018CDF, offset loc_10018CE3
		dd offset loc_10018CE7,	offset loc_10018CEB, offset loc_10018CEF
		dd offset loc_10018CF3,	offset loc_10018CF7, offset loc_10018CFB
		dd offset loc_10018CFF,	offset loc_10018D03, offset loc_10018B2E
		dd offset loc_10018B3A,	offset loc_10018B46, offset loc_10018B52
		dd offset loc_10018B5E,	offset loc_10018B6A, offset loc_10018B76
		dd offset loc_10018D14,	offset loc_10018D14, offset loc_10018B82
		dd offset loc_10018B8E,	offset loc_10018B9A, offset loc_10018BA6
		dd offset loc_10018D14,	offset loc_10018D14, offset loc_10018BB2
		dd offset loc_10018BBE,	offset loc_10018BCA, offset loc_10018BD6
		dd offset loc_10018BE2,	offset loc_10018BEE, offset loc_10018BFA
		dd offset loc_10018C06,	offset loc_10018C12, offset loc_10018C1E
		dd offset loc_10018C2A,	offset loc_10018C36, offset loc_10018C42
		dd offset loc_10018C4E,	offset loc_10018C5A, offset loc_10018C66
		dd offset loc_10018C72,	offset loc_10018C7E, offset loc_10018C8A
		dd offset loc_10018C93,	offset loc_10018C9C, offset loc_10018CA5
		dd offset loc_10018CAE

; =============== S U B	R O U T	I N E =======================================


sub_10018E30	proc near		; DATA XREF: .rdata:100394E8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10018E49
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10018E49:				; CODE XREF: sub_10018E30+12j
		push	esi
		push	84h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10018E93
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		mov	eax, [ebx+8]
		push	eax
		lea	ecx, [esi+68h]
		push	ecx
		push	edi
		call	SECITEM_AllocItem_Util
		mov	edx, [ebx+8]
		mov	eax, [ebx+4]
		mov	ecx, [esi+6Ch]
		push	edx		; Size
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		push	esi
		push	ebx
		push	edi
		call	sub_10018A60
		add	esp, 24h
		pop	ebx
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10018EA4

loc_10018E93:				; CODE XREF: sub_10018E30+2Cj
		push	1
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10018EA4:				; CODE XREF: sub_10018E30+61j
		mov	edx, [esp+8+arg_4]
		mov	[edx], esi
		pop	esi
		xor	eax, eax
		pop	edi
		retn
sub_10018E30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018EB0	proc near		; CODE XREF: sub_1001AE40+2CCp
					; sub_1001AE40+3B5p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 400h
		jz	short loc_10018ED8
		cmp	eax, 800h
		jz	short loc_10018ED2
		sub	eax, 0C00h
		neg	eax
		sbb	eax, eax
		and	eax, 0FFFFFFF2h
		add	eax, 40h
		retn
; ---------------------------------------------------------------------------

loc_10018ED2:				; CODE XREF: sub_10018EB0+10j
		mov	eax, 38h
		retn
; ---------------------------------------------------------------------------

loc_10018ED8:				; CODE XREF: sub_10018EB0+9j
		mov	eax, 28h
		retn
sub_10018EB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018EE0	proc near		; CODE XREF: sub_10019000:loc_100190A1p
					; sub_1001B880+26Bp
		cmp	eax, 400h
		jz	short loc_10018F0D
		cmp	eax, 800h
		jz	short loc_10018EFD
		cmp	eax, 0C00h
		jnz	short loc_10018F15
		cmp	ecx, 100h
		jmp	short loc_10018F13
; ---------------------------------------------------------------------------

loc_10018EFD:				; CODE XREF: sub_10018EE0+Cj
		cmp	ecx, 0E0h
		jz	short loc_10018F26
		cmp	ecx, 100h
		jmp	short loc_10018F13
; ---------------------------------------------------------------------------

loc_10018F0D:				; CODE XREF: sub_10018EE0+5j
		cmp	ecx, 0A0h

loc_10018F13:				; CODE XREF: sub_10018EE0+1Bj
					; sub_10018EE0+2Bj
		jz	short loc_10018F26

loc_10018F15:				; CODE XREF: sub_10018EE0+13j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10018F26:				; CODE XREF: sub_10018EE0+23j
					; sub_10018EE0:loc_10018F13j
		xor	eax, eax
		retn
sub_10018EE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018F30	proc near		; CODE XREF: sub_1001AE40+209p
		cmp	eax, 0E0h
		jnb	short loc_10018F3D
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_10018F3D:				; CODE XREF: sub_10018F30+5j
		cmp	eax, 100h
		jnb	short loc_10018F4A
		mov	eax, 7
		retn
; ---------------------------------------------------------------------------

loc_10018F4A:				; CODE XREF: sub_10018F30+12j
		cmp	eax, 180h
		jnb	short loc_10018F57
		mov	eax, 4
		retn
; ---------------------------------------------------------------------------

loc_10018F57:				; CODE XREF: sub_10018F30+1Fj
		cmp	eax, 200h
		sbb	eax, eax
		add	eax, 6
		retn
sub_10018F30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018F70	proc near		; CODE XREF: sub_10019400+44p
					; sub_10019630+51p ...

var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		push	eax
		call	sub_10008790
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10018F87
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10018F87:				; CODE XREF: sub_10018F70+Fj
		mov	ecx, [esi+4]
		push	edi
		call	ecx
		mov	edi, eax
		test	edi, edi
		jnz	short loc_10018F9A
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10018F9A:				; CODE XREF: sub_10018F70+21j
		mov	edx, [esi+10h]
		push	edi
		call	edx
		mov	eax, [esp+10h+arg_8]
		mov	ecx, [esp+10h+arg_4]
		mov	edx, [esi+14h]
		push	eax
		push	ecx
		push	edi
		call	edx
		mov	eax, [esi]
		mov	edx, [esp+1Ch+arg_0]
		push	eax
		mov	eax, [esi+18h]
		lea	ecx, [esp+20h+var_4]
		push	ecx
		push	edx
		push	edi
		call	eax
		mov	ecx, [esi+0Ch]
		push	1
		push	edi
		call	ecx
		add	esp, 28h
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
sub_10018F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018FE0	proc near		; CODE XREF: sub_1001C860+35p
					; sub_1001C8F0+14p ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		mov	eax, [ecx+8]
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jnz	short loc_10018FF1
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10018FF1:				; CODE XREF: sub_10018FE0+Cj
		cmp	eax, 1
		jbe	short locret_10018FFC
		cmp	byte ptr [ecx],	0
		jnz	short locret_10018FFC
		dec	eax

locret_10018FFC:			; CODE XREF: sub_10018FE0+14j
					; sub_10018FE0+19j
		retn
sub_10018FE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019000	proc near		; CODE XREF: sub_1001C860+9p

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		push	esi
		xor	esi, esi
		test	ecx, ecx
		jnz	short loc_1001901D

loc_1001900B:				; CODE XREF: sub_10019000+67j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001901D:				; CODE XREF: sub_10019000+9j
		mov	eax, [ecx+8]
		mov	edx, [ecx+0Ch]
		test	eax, eax
		jz	short loc_10019034
		cmp	edx, 1
		jbe	short loc_10019032
		cmp	byte ptr [eax],	0
		jnz	short loc_10019032
		dec	edx

loc_10019032:				; CODE XREF: sub_10019000+2Aj
					; sub_10019000+2Fj
		mov	eax, edx

loc_10019034:				; CODE XREF: sub_10019000+25j
		mov	edx, [ecx+18h]
		mov	ecx, [ecx+14h]
		add	eax, eax
		add	eax, eax
		add	eax, eax
		test	ecx, ecx
		jnz	short loc_10019048
		xor	edx, edx
		jmp	short loc_10019053
; ---------------------------------------------------------------------------

loc_10019048:				; CODE XREF: sub_10019000+42j
		cmp	edx, 1
		jbe	short loc_10019053
		cmp	byte ptr [ecx],	0
		jnz	short loc_10019053
		dec	edx

loc_10019053:				; CODE XREF: sub_10019000+46j
					; sub_10019000+4Bj ...
		lea	ecx, ds:0[edx*8]
		cmp	eax, 400h
		jnb	short loc_100190A1
		cmp	ecx, 0A0h
		jnz	short loc_1001900B
		lea	ecx, [eax-200h]
		cmp	ecx, 200h
		ja	short loc_1001908D
		test	al, 3Fh
		jnz	short loc_1001908D
		add	eax, 0FFFFFE00h
		cdq
		and	edx, 3Fh
		add	eax, edx
		sar	eax, 6
		test	eax, eax
		jns	short loc_100190A8

loc_1001908D:				; CODE XREF: sub_10019000+75j
					; sub_10019000+79j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100190A1:				; CODE XREF: sub_10019000+5Fj
		call	sub_10018EE0
		mov	esi, eax

loc_100190A8:				; CODE XREF: sub_10019000+8Bj
		mov	eax, esi
		pop	esi
		retn
sub_10019000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100190B0	proc near		; CODE XREF: sub_10021570+16Fp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_100190C8
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100190C8:				; CODE XREF: sub_100190B0+6j
		mov	ecx, [eax+18h]
		mov	eax, [eax+14h]
		test	eax, eax
		jnz	short loc_100190D6
		xor	ecx, ecx
		jmp	short loc_100190E1
; ---------------------------------------------------------------------------

loc_100190D6:				; CODE XREF: sub_100190B0+20j
		cmp	ecx, 1
		jbe	short loc_100190E1
		cmp	byte ptr [eax],	0
		jnz	short loc_100190E1
		dec	ecx

loc_100190E1:				; CODE XREF: sub_100190B0+24j
					; sub_100190B0+29j ...
		lea	eax, ds:0[ecx*8]
		cmp	eax, 0E0h
		jnb	short loc_100190F5
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_100190F5:				; CODE XREF: sub_100190B0+3Dj
		cmp	eax, 100h
		jnb	short loc_10019102
		mov	eax, 7
		retn
; ---------------------------------------------------------------------------

loc_10019102:				; CODE XREF: sub_100190B0+4Aj
		cmp	eax, 180h
		jnb	short loc_1001910F
		mov	eax, 4
		retn
; ---------------------------------------------------------------------------

loc_1001910F:				; CODE XREF: sub_100190B0+57j
		cmp	eax, 200h
		sbb	eax, eax
		add	eax, 6
		retn
sub_100190B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019120	proc near		; CODE XREF: sub_1001AE40+266p
		push	esi
		mov	esi, eax
		cmp	dword ptr [esi+4], 0
		jnz	short loc_10019139
		mov	eax, [esi+8]
		push	eax
		push	ecx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[esi+4], eax

loc_10019139:				; CODE XREF: sub_10019120+7j
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_10019152
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10019152:				; CODE XREF: sub_10019120+1Ej
		mov	edx, [esi+8]
		push	edx
		push	eax
		call	sub_1000CD60
		mov	esi, [esi+4]
		or	byte ptr [esi],	80h
		add	esp, 8
		pop	esi
		retn
sub_10019120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019170	proc near		; CODE XREF: sub_1001AE40+59Cp

arg_0		= dword	ptr  4

		mov	eax, [esi+8]
		mov	ecx, [esi+4]
		push	eax
		push	ecx
		call	sub_1000CD60
		add	esp, 8
		test	eax, eax
		jnz	short loc_100191EC
		mov	edx, [esi+8]
		mov	eax, [esi+4]
		mov	ecx, [esp+arg_0]
		push	edx
		push	eax
		push	ecx
		call	sub_10029D30
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100191F0
		cmp	eax, 0FFFFFFFCh
		jz	short loc_100191DF
		cmp	eax, 0FFFFFFFDh
		jz	short loc_100191CE
		cmp	eax, 0FFFFFFFEh
		jz	short loc_100191BD
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_100191BD:				; CODE XREF: sub_10019170+3Aj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_100191CE:				; CODE XREF: sub_10019170+35j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_100191DF:				; CODE XREF: sub_10019170+30j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_100191EC:				; CODE XREF: sub_10019170+12j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_100191F0:				; CODE XREF: sub_10019170+2Bj
		xor	eax, eax
		retn
sub_10019170	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019200	proc near		; CODE XREF: sub_10019400+23p
					; sub_10019790+1C3p ...

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 40h
		push	ebp
		mov	ebp, [esp+44h+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		lea	eax, [esp+4Ch+var_40]
		push	eax
		mov	[esp+50h+var_34], edi
		mov	[esp+50h+var_24], edi
		mov	[esp+50h+var_4], edi
		mov	[esp+50h+var_14], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001935B
		lea	ecx, [esp+4Ch+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001935B
		lea	edx, [esp+4Ch+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001935B
		mov	eax, [ebp+8]
		mov	ecx, [ebp+4]
		push	eax
		push	ecx
		lea	edx, [esp+54h+var_40]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001935B
		mov	ebp, [esp+4Ch+arg_4]
		cmp	ebp, 0FFFFFFFFh
		jnb	short loc_10019299
		lea	eax, [esp+4Ch+var_40]
		push	eax
		mov	ecx, eax
		push	ebp
		push	ecx
		call	sub_1002B360
		jmp	short loc_100192DA
; ---------------------------------------------------------------------------

loc_10019299:				; CODE XREF: sub_10019200+87j
		lea	edx, [esp+4Ch+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001935B
		lea	eax, [esp+4Ch+var_20]
		push	ebp
		push	eax
		call	sub_1002B310
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1001935B
		lea	ecx, [esp+4Ch+var_40]
		push	ecx
		lea	edx, [esp+50h+var_20]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002A130

loc_100192DA:				; CODE XREF: sub_10019200+97j
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_1001935B
		mov	edx, [esp+4Ch+arg_8]
		lea	ecx, [esp+4Ch+var_30]
		push	ecx
		push	edi
		push	edx
		lea	eax, [esp+58h+var_40]
		push	eax
		call	sub_1002A5C0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	short loc_1001935B
		cmp	[ebx+4], edi
		jz	short loc_10019310
		push	edi
		push	ebx
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_10019310:				; CODE XREF: sub_10019200+104j
		lea	ecx, [esp+4Ch+var_30]
		push	ecx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, edi
		jg	short loc_10019328
		mov	esi, 0FFFFFFFDh
		jmp	short loc_1001935B
; ---------------------------------------------------------------------------

loc_10019328:				; CODE XREF: sub_10019200+11Fj
		push	eax
		push	ebx
		push	edi
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+4]
		add	esp, 0Ch
		cmp	eax, edi
		jnz	short loc_10019341
		mov	esi, 0FFFFFFFEh
		jmp	short loc_1001935B
; ---------------------------------------------------------------------------

loc_10019341:				; CODE XREF: sub_10019200+138j
		mov	edx, [ebx+8]
		push	edx
		push	eax
		lea	eax, [esp+54h+var_30]
		push	eax
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_1001935B
		xor	esi, esi

loc_1001935B:				; CODE XREF: sub_10019200+2Dj
					; sub_10019200+44j ...
		lea	ecx, [esp+4Ch+var_40]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+50h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+54h+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+58h+var_20]
		push	ecx
		call	sub_10028EF0
		add	esp, 10h
		cmp	esi, edi
		jz	short loc_100193F5
		cmp	esi, 0FFFFFFFCh
		jz	short loc_100193DE
		cmp	esi, 0FFFFFFFDh
		jz	short loc_100193C7
		cmp	esi, 0FFFFFFFEh
		jz	short loc_100193B0
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100193B0:				; CODE XREF: sub_10019200+197j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100193C7:				; CODE XREF: sub_10019200+192j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100193DE:				; CODE XREF: sub_10019200+18Dj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100193F5:				; CODE XREF: sub_10019200+188j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 40h
		retn
sub_10019200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019400	proc near		; CODE XREF: sub_10019470+46p
					; sub_10019790+199p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		push	ebx
		push	eax
		push	ecx
		push	edx
		lea	ebx, [esp+1Ch+var_C]
		mov	[esp+1Ch+var_C], 0
		mov	[esp+1Ch+var_8], 0
		mov	[esp+1Ch+var_4], 0
		call	sub_10019200
		add	esp, 0Ch
		pop	ebx
		test	eax, eax
		jnz	short loc_10019467
		mov	eax, [esp+0Ch+var_4]
		mov	ecx, [esp+0Ch+var_8]
		mov	edx, [esp+0Ch+arg_4]
		push	edi
		push	eax
		mov	eax, [esp+14h+arg_0]
		push	ecx
		push	edx
		call	sub_10018F70
		add	esp, 0Ch
		cmp	[esp+10h+var_8], 0
		mov	edi, eax
		jz	short loc_10019464
		lea	eax, [esp+10h+var_C]
		push	0
		push	eax
		call	SECITEM_ZfreeItem_Util
		add	esp, 8

loc_10019464:				; CODE XREF: sub_10019400+53j
		mov	eax, edi
		pop	edi

loc_10019467:				; CODE XREF: sub_10019400+2Ej
		add	esp, 0Ch
		retn
sub_10019400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019470	proc near		; CODE XREF: sub_1001A280+37p
					; sub_1001A280+7Ep ...

var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 40h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+40h+var_4], eax
		mov	eax, [esi+8]
		mov	ecx, [esi+4]
		push	ebx
		push	ebp
		mov	ebp, [esp+48h+arg_4]
		push	edi
		push	eax		; int
		push	ecx		; Src
		lea	edx, [esp+54h+var_2C]
		push	edx		; int
		xor	edi, edi
		call	sub_10002750
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_10019535
		lea	eax, [esp+4Ch+var_18]
		push	eax
		mov	eax, [esp+50h+arg_0]
		push	3
		lea	ecx, [edi+1]
		mov	edx, esi
		call	sub_10019400
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_10019535
		jmp	short loc_100194D0
; ---------------------------------------------------------------------------
		align 10h

loc_100194D0:				; CODE XREF: sub_10019470+54j
					; sub_10019470+A7j
		movzx	ecx, byte ptr [esp+eax+4Ch+var_18]
		xor	cl, byte ptr [esp+eax+4Ch+var_2C]
		movzx	edx, byte ptr [esp+eax+4Ch+var_2C+1]
		xor	dl, byte ptr [esp+eax+4Ch+var_18+1]
		mov	byte ptr [esp+eax+4Ch+var_40], cl
		movzx	ecx, byte ptr [esp+eax+4Ch+var_2C+2]
		xor	cl, byte ptr [esp+eax+4Ch+var_18+2]
		mov	byte ptr [esp+eax+4Ch+var_40+1], dl
		movzx	edx, byte ptr [esp+eax+4Ch+var_2C+3]
		xor	dl, byte ptr [esp+eax+4Ch+var_18+3]
		mov	byte ptr [esp+eax+4Ch+var_40+2], cl
		movzx	ecx, byte ptr [esp+eax+4Ch+var_28]
		xor	cl, byte ptr [esp+eax+4Ch+var_14]
		mov	byte ptr [esp+eax+4Ch+var_40+3], dl
		mov	byte ptr [esp+eax+4Ch+var_3C], cl
		add	eax, 5
		cmp	eax, 14h
		jl	short loc_100194D0
		or	byte ptr [esp+4Ch+var_40], 80h
		or	[esp+4Ch+var_2D], 1
		push	14h
		lea	edx, [esp+50h+var_40]
		push	edx
		push	ebp
		call	sub_10029D30
		add	esp, 0Ch
		mov	edi, eax

loc_10019535:				; CODE XREF: sub_10019470+30j
					; sub_10019470+52j
		xor	eax, eax
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_38], eax
		mov	[esp+4Ch+var_34], eax
		mov	[esp+1Ch], eax
		mov	[esp+4Ch+var_2C], eax
		mov	[esp+4Ch+var_28], eax
		mov	[esp+4Ch+var_24], eax
		mov	[esp+4Ch+var_20], eax
		mov	[esp+4Ch+var_1C], eax
		mov	[esp+4Ch+var_18], eax
		mov	[esp+4Ch+var_14], eax
		mov	[esp+4Ch+var_10], eax
		mov	[esp+4Ch+var_C], eax
		mov	[esp+4Ch+var_8], eax
		test	edi, edi
		jz	loc_10019612
		cmp	edi, 0FFFFFFFCh
		jz	short loc_100195F0
		cmp	edi, 0FFFFFFFDh
		jz	short loc_100195CE
		cmp	edi, 0FFFFFFFEh
		jz	short loc_100195AC
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100195AC:				; CODE XREF: sub_10019470+118j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100195CE:				; CODE XREF: sub_10019470+113j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100195F0:				; CODE XREF: sub_10019470+10Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+40h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10019612:				; CODE XREF: sub_10019470+105j
		mov	ecx, [esp+4Ch+var_4]
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40h
		retn
sub_10019470	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019630	proc near		; CODE XREF: sub_1001A280+DEp
					; sub_1001AE40+2B1p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
Dst		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 4Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+4Ch+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+54h+arg_4]
		push	esi
		push	edi
		mov	edi, edx
		mov	edx, [esp+5Ch+arg_0]
		push	edx
		mov	[esp+60h+var_48], ecx
		xor	esi, esi
		xor	ebx, ebx
		shr	ebp, 3
		call	sub_10008790
		add	esp, 4
		cmp	eax, esi
		jnz	short loc_1001966A
		mov	[esp+5Ch+var_4C], esi
		jmp	short loc_10019670
; ---------------------------------------------------------------------------

loc_1001966A:				; CODE XREF: sub_10019630+32j
		mov	eax, [eax]
		mov	[esp+5Ch+var_4C], eax

loc_10019670:				; CODE XREF: sub_10019630+38j
		mov	ecx, [edi+8]
		mov	edx, [edi+4]
		push	ecx
		push	edx
		lea	eax, [esp+64h+Dst]
		push	eax
		mov	eax, [esp+68h+arg_0]
		call	sub_10018F70
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_100196BE
		mov	ecx, [esp+5Ch+var_4C]
		cmp	ecx, ebp
		jle	short loc_1001969B
		mov	esi, ecx
		sub	esi, ebp

loc_1001969B:				; CODE XREF: sub_10019630+65j
		or	[esp+esi+5Ch+Dst], 80h
		or	byte ptr [esp+ecx+5Ch+var_48+3], 1
		lea	eax, [esp+esi+5Ch+Dst]
		lea	ecx, [esp+ecx+5Ch+var_48+3]
		mov	ecx, [esp+5Ch+var_48]
		push	ebp
		push	eax
		push	ecx
		call	sub_10029D30
		add	esp, 0Ch
		mov	ebx, eax

loc_100196BE:				; CODE XREF: sub_10019630+5Dj
		push	40h		; Size
		lea	edx, [esp+60h+Dst]
		push	0		; Val
		push	edx		; Dst
		call	memset
		add	esp, 0Ch
		test	ebx, ebx
		jz	loc_10019772
		cmp	ebx, 0FFFFFFFCh
		jz	short loc_1001974F
		cmp	ebx, 0FFFFFFFDh
		jz	short loc_1001972C
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_10019709
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_10019709:				; CODE XREF: sub_10019630+B4j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1001972C:				; CODE XREF: sub_10019630+AFj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1001974F:				; CODE XREF: sub_10019630+AAj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+4Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_10019772:				; CODE XREF: sub_10019630+A1j
		mov	ecx, [esp+5Ch+var_4]
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
sub_10019630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019790	proc near		; CODE XREF: sub_10019EE0+157p
					; sub_1001AE40+4D2p ...

var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= byte ptr -240h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= byte ptr -228h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= byte ptr -214h
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F8		= dword	ptr -1F8h
var_1F4		= byte ptr -1F4h
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= byte ptr -1D4h
var_1C8		= dword	ptr -1C8h
Dst		= byte ptr -1C4h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 24Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+24Ch+var_4], eax
		mov	ecx, [esp+24Ch+arg_C]
		mov	eax, [esp+24Ch+arg_8]
		mov	edx, [esp+24Ch+arg_10]
		push	ebx
		mov	ebx, [esp+250h+arg_18]
		push	ebp
		push	esi
		mov	[esp+258h+var_1DC], ecx
		mov	ecx, [esp+258h+arg_0]
		mov	[esp+258h+var_1E4], eax
		mov	eax, [esp+258h+arg_14]
		push	edi
		push	ecx
		mov	[esp+260h+var_1E0], edx
		mov	[esp+260h+var_248], eax
		mov	[esp+260h+var_22C], ebx
		or	ebp, 0FFFFFFFFh
		call	sub_10008790
		xor	ecx, ecx
		add	esp, 4
		cmp	eax, ecx
		jnz	short loc_10019801
		mov	[esp+25Ch+var_24C], ecx
		jmp	short loc_10019807
; ---------------------------------------------------------------------------

loc_10019801:				; CODE XREF: sub_10019790+69j
		mov	edx, [eax]
		mov	[esp+25Ch+var_24C], edx

loc_10019807:				; CODE XREF: sub_10019790+6Fj
		mov	edi, [esp+25Ch+var_24C]
		add	edi, edi
		lea	eax, [esp+25Ch+var_228]
		add	edi, edi
		push	eax
		add	edi, edi
		mov	[esp+260h+var_21C], ecx
		mov	[esp+260h+var_1F8], ecx
		mov	[esp+260h+var_234], ecx
		mov	[esp+260h+var_208], ecx
		mov	[esp+260h+var_1E8], ecx
		mov	[esp+260h+var_1C8], ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019DF0
		lea	ecx, [esp+25Ch+var_204]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019DF0
		lea	edx, [esp+25Ch+var_240]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_214]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019DF0
		lea	ecx, [esp+25Ch+var_1F4]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019DF0
		lea	edx, [esp+25Ch+var_1D4]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10019DF0
		mov	eax, [esp+25Ch+arg_4]
		lea	eax, [edi+eax-1]
		xor	edx, edx
		div	edi
		mov	ecx, [ebx]
		push	1C0h		; Size
		lea	edx, [esp+260h+Dst]
		push	0		; Val
		push	edx		; Dst
		mov	[esp+268h+var_1D8], ecx
		mov	edi, eax
		mov	[esp+268h+var_218], edi
		call	memset
		add	esp, 0Ch
		xor	ebx, ebx
		test	edi, edi
		jle	short loc_10019948
		mov	ecx, [esp+25Ch+var_24C]
		mov	eax, ecx
		neg	eax
		mov	[esp+25Ch+var_230], eax
		lea	eax, [edi-1]
		imul	eax, ecx
		lea	ecx, [esp+eax+25Ch+Dst]
		mov	[esp+25Ch+var_244], ecx

loc_10019911:				; CODE XREF: sub_10019790+1B6j
		mov	edx, [esp+25Ch+var_244]
		mov	eax, [esp+25Ch+arg_0]
		push	edx
		mov	edx, [esp+260h+var_248]
		push	eax
		mov	eax, 200h
		mov	ecx, ebx
		call	sub_10019400
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	loc_10019DF0
		mov	ecx, [esp+25Ch+var_230]
		add	[esp+25Ch+var_244], ecx
		inc	ebx
		cmp	ebx, edi
		jl	short loc_10019911

loc_10019948:				; CODE XREF: sub_10019790+162j
		mov	ebx, [esp+25Ch+var_248]
		push	200h
		push	edi
		push	ebx
		call	sub_10019200
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	loc_10019DF0
		mov	ecx, [esp+25Ch+var_24C]
		mov	ebx, [esp+25Ch+arg_4]
		add	ecx, ecx
		add	ecx, ecx
		add	ecx, ecx
		mov	eax, edi
		imul	eax, ecx
		lea	ecx, [ebx-1]
		and	ecx, 7
		mov	dl, 1
		shl	dl, cl
		sub	eax, ebx
		shr	eax, 3
		lea	esi, [esp+eax+25Ch+Dst]
		lea	ecx, [edx-1]
		and	cl, [esi]
		or	cl, dl
		mov	[esi], cl
		mov	ecx, [esp+25Ch+var_24C]
		imul	ecx, edi
		mov	[esp+25Ch+var_244], ecx
		sub	ecx, eax
		push	ecx
		lea	edx, [esp+260h+var_240]
		push	esi
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		mov	ecx, [esp+25Ch+var_1DC]
		mov	edx, [esp+25Ch+var_1E4]
		lea	eax, [esp+25Ch+var_204]
		push	eax
		push	ecx
		push	edx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_204]
		push	eax
		mov	ecx, eax
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_240]
		push	eax
		lea	ecx, [esp+260h+var_204]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_240]
		push	eax
		mov	ecx, eax
		push	1
		push	ecx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		push	ebp
		lea	edx, [esp+260h+var_240]
		push	edx
		lea	eax, [esp+264h+var_204]
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002BF60
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10019DF0
		lea	edx, [ebx-1]
		push	edx
		lea	eax, [esp+260h+var_1D4]
		push	eax
		call	sub_1002A630
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10019DF0
		lea	ecx, [esp+25Ch+var_228]
		push	ecx
		lea	edx, [esp+260h+var_204]
		push	edx
		lea	eax, [esp+264h+var_240]
		push	eax
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		jmp	short loc_10019AA7
; ---------------------------------------------------------------------------
		align 10h

loc_10019AA0:				; CODE XREF: sub_10019790+639j
		mov	ebx, [esp+25Ch+arg_4]

loc_10019AA7:				; CODE XREF: sub_10019790+30Bj
		lea	ecx, [esp+25Ch+var_228]
		push	ecx
		mov	edx, ecx
		push	1
		push	edx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_228]
		push	eax
		call	sub_10028CE0
		add	esp, 4
		cmp	eax, ebx
		jbe	loc_10019B76
		lea	ecx, [esp+25Ch+var_240]
		push	ecx
		lea	edx, [esp+260h+var_204]
		push	1
		push	edx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_240]
		push	eax
		mov	ecx, eax
		push	ecx
		lea	edx, [esp+264h+var_1D4]
		push	edx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		push	0
		lea	eax, [esp+260h+var_240]
		push	eax
		lea	ecx, [esp+264h+var_204]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002BF60
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_228]
		push	eax
		lea	ecx, [esp+260h+var_204]
		push	ecx
		lea	edx, [esp+264h+var_240]
		push	edx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_228]
		push	eax
		mov	ecx, eax
		push	1
		push	ecx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0

loc_10019B76:				; CODE XREF: sub_10019790+342j
		mov	eax, [esp+25Ch+var_22C]
		inc	dword ptr [eax]
		push	1C0h		; Size
		lea	edx, [esp+260h+Dst]
		push	0		; Val
		push	edx		; Dst
		call	memset
		mov	eax, [esp+268h+var_218]
		add	esp, 0Ch
		xor	edi, edi
		test	eax, eax
		jle	short loc_10019BF5
		mov	edx, [esp+25Ch+var_24C]
		mov	ecx, edx
		neg	ecx
		lea	ebx, [eax-1]
		imul	ebx, edx
		mov	[esp+25Ch+var_230], ecx
		lea	ebx, [esp+ebx+25Ch+Dst]
		jmp	short loc_10019BC0
; ---------------------------------------------------------------------------
		align 10h

loc_10019BC0:				; CODE XREF: sub_10019790+426j
					; sub_10019790+45Fj
		mov	eax, [esp+25Ch+arg_0]
		mov	edx, [esp+25Ch+var_248]
		push	ebx
		push	eax
		mov	eax, 200h
		mov	ecx, edi
		call	sub_10019400
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	loc_10019DF0
		add	ebx, [esp+25Ch+var_230]
		inc	edi
		cmp	edi, [esp+25Ch+var_218]
		jl	short loc_10019BC0
		mov	eax, [esp+25Ch+var_218]

loc_10019BF5:				; CODE XREF: sub_10019790+40Bj
		mov	ebx, [esp+25Ch+var_248]
		push	200h
		push	eax
		push	ebx
		call	sub_10019200
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	loc_10019DF0
		mov	ecx, [esp+25Ch+var_244]
		push	ecx
		lea	edx, [esp+260h+Dst]
		push	edx
		lea	eax, [esp+264h+var_214]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	ecx, [esp+25Ch+var_1F4]
		push	ecx
		lea	edx, [esp+260h+var_228]
		push	3
		push	edx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_214]
		push	eax
		lea	ecx, [esp+260h+var_1F4]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_214]
		push	eax
		mov	ecx, eax
		push	2
		push	ecx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		mov	eax, [esp+25Ch+var_1DC]
		lea	edx, [esp+25Ch+var_1F4]
		push	edx
		push	eax
		lea	ecx, [esp+264h+var_240]
		push	ecx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	edx, [esp+25Ch+var_1F4]
		push	edx
		mov	eax, edx
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	edx, [esp+25Ch+var_1F4]
		push	edx
		lea	eax, [esp+260h+var_228]
		push	eax
		mov	ecx, edx
		push	ecx
		lea	edx, [esp+268h+var_214]
		push	edx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10019DF0
		lea	eax, [esp+25Ch+var_214]
		push	eax
		lea	ecx, [esp+260h+var_1F4]
		push	1
		push	ecx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	edx, [esp+25Ch+var_214]
		push	edx
		lea	eax, [esp+260h+var_228]
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002B820
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10019DF0
		lea	edx, [esp+25Ch+var_214]
		push	1
		push	edx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jnz	short loc_10019D7D
		mov	edx, [esp+25Ch+var_1E4]
		lea	eax, [esp+25Ch+var_214]
		push	eax
		lea	ecx, [esp+260h+var_228]
		push	ecx
		push	edx
		lea	eax, [esp+268h+var_1F4]
		push	eax
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10019DF0
		lea	ecx, [esp+25Ch+var_214]
		push	1
		push	ecx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jz	short loc_10019DD1

loc_10019D7D:				; CODE XREF: sub_10019790+5B2j
		mov	edx, [esp+25Ch+var_1D8]
		mov	eax, [esp+25Ch+arg_4]
		lea	ecx, [edx+eax*4]
		mov	edx, [esp+25Ch+var_22C]
		cmp	[edx], ecx
		jnb	short loc_10019DED
		lea	eax, [esp+25Ch+var_240]
		push	eax
		mov	ecx, eax
		push	1
		push	ecx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10019DF0
		lea	edx, [esp+25Ch+var_228]
		push	edx
		lea	eax, [esp+260h+var_204]
		push	eax
		lea	ecx, [esp+264h+var_240]
		push	ecx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jns	loc_10019AA0
		jmp	short loc_10019DF0
; ---------------------------------------------------------------------------

loc_10019DD1:				; CODE XREF: sub_10019790+5EBj
		mov	edx, [esp+25Ch+var_1E0]
		push	edx
		lea	eax, [esp+260h+var_228]
		push	eax
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_10019DF0
		xor	ebp, ebp
		jmp	short loc_10019DF0
; ---------------------------------------------------------------------------

loc_10019DED:				; CODE XREF: sub_10019790+604j
		or	ebp, 0FFFFFFFFh

loc_10019DF0:				; CODE XREF: sub_10019790+ADj
					; sub_10019790+C4j ...
		lea	ecx, [esp+25Ch+var_228]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+260h+var_204]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+264h+var_240]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+268h+var_214]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+26Ch+var_1F4]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+270h+var_1D4]
		push	eax
		call	sub_10028EF0
		add	esp, 18h
		test	esi, esi
		jz	short loc_10019E8D
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10019E7B
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10019E69
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10019E57
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_10019E92
; ---------------------------------------------------------------------------

loc_10019E57:				; CODE XREF: sub_10019790+6B3j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_10019E92
; ---------------------------------------------------------------------------

loc_10019E69:				; CODE XREF: sub_10019790+6AEj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_10019E92
; ---------------------------------------------------------------------------

loc_10019E7B:				; CODE XREF: sub_10019790+6A9j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebp, 0FFFFFFFFh
		jmp	short loc_10019E92
; ---------------------------------------------------------------------------

loc_10019E8D:				; CODE XREF: sub_10019790+6A4j
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_10019EBE

loc_10019E92:				; CODE XREF: sub_10019790+6C5j
					; sub_10019790+6D7j ...
		mov	ecx, [esp+25Ch+var_1E0]
		push	ecx
		call	sub_10028F40
		mov	eax, [esp+260h+var_248]
		add	esp, 4
		cmp	dword ptr [eax+4], 0
		jz	short loc_10019EB4
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_10019EB4:				; CODE XREF: sub_10019790+717j
		mov	edx, [esp+25Ch+var_22C]
		mov	dword ptr [edx], 0

loc_10019EBE:				; CODE XREF: sub_10019790+700j
		mov	ecx, [esp+25Ch+var_4]
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24Ch
		retn
sub_10019790	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019EE0	proc near		; CODE XREF: sub_10019EE0+127p
					; sub_1001A280+1B5p ...

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= byte ptr -0B4h
var_A8		= dword	ptr -0A8h
var_A4		= byte ptr -0A4h
var_98		= dword	ptr -98h
var_94		= byte ptr -94h
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0CCh
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0CCh+var_4], eax
		mov	eax, [esp+0CCh+arg_8]
		mov	ecx, [esp+0CCh+arg_C]
		mov	edx, [esp+0CCh+arg_14]
		push	ebx
		push	ebp
		mov	ebp, [esp+0D4h+arg_10]
		push	esi
		mov	[esp+0D8h+var_BC], eax
		mov	eax, [esp+0D8h+arg_0]
		push	edi
		push	eax
		mov	[esp+0E0h+var_C0], ecx
		mov	[esp+0E0h+var_CC], ebp
		mov	[esp+0E0h+var_C8], edx
		or	esi, 0FFFFFFFFh
		call	sub_10008790
		xor	ecx, ecx
		add	esp, 4
		cmp	eax, ecx
		jnz	short loc_10019F45
		xor	ebx, ebx
		mov	[esp+0DCh+var_C4], ebx
		jmp	short loc_10019F4D
; ---------------------------------------------------------------------------

loc_10019F45:				; CODE XREF: sub_10019EE0+5Bj
		mov	edx, [eax]
		mov	[esp+0DCh+var_C4], edx
		mov	ebx, edx

loc_10019F4D:				; CODE XREF: sub_10019EE0+63j
		lea	eax, [esp+0DCh+var_A4]
		push	eax
		mov	[esp+0E0h+var_98], ecx
		mov	[esp+0E0h+var_88], ecx
		mov	[esp+0E0h+var_A8], ecx
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_1001A1B6
		lea	ecx, [esp+0DCh+var_94]
		push	ecx
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_1001A1B6
		lea	edx, [esp+0DCh+var_B4]
		push	edx
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	loc_1001A1B6
		mov	eax, [esp+0DCh+arg_4]
		cmp	eax, 2
		jnb	short loc_10019FB2
		or	esi, 0FFFFFFFFh
		jmp	loc_1001A1B6
; ---------------------------------------------------------------------------

loc_10019FB2:				; CODE XREF: sub_10019EE0+C8j
		cmp	eax, 21h
		jb	loc_1001A046
		lea	eax, [esp+0DCh+var_B4]
		push	eax
		call	sub_10028F40
		lea	ecx, [esp+0E0h+var_B4]
		push	ecx
		mov	edx, ecx
		push	1
		push	edx
		call	sub_1002B360
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		js	loc_1001A1B6
		mov	eax, [esp+0DCh+var_C8]
		mov	ebx, [esp+0DCh+arg_4]
		mov	edx, [esp+0DCh+var_BC]
		push	eax
		push	ebp
		lea	ecx, [esp+0E4h+var_94]
		push	ecx
		mov	ecx, [esp+0E8h+arg_0]
		lea	eax, [ebx+1]
		shr	eax, 1
		push	edx
		inc	eax
		push	eax
		push	ecx
		call	sub_10019EE0
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_1001A1B6
		mov	edx, [esp+0DCh+var_C8]
		mov	eax, [esp+0DCh+var_C0]
		push	edx
		push	ebp
		push	eax
		mov	eax, [esp+0E8h+arg_0]
		lea	ecx, [esp+0E8h+var_B4]
		push	ecx
		lea	edx, [esp+0ECh+var_94]
		push	edx
		push	ebx
		push	eax
		call	sub_10019790
		add	esp, 1Ch
		mov	esi, eax
		jmp	loc_1001A1B6
; ---------------------------------------------------------------------------

loc_1001A046:				; CODE XREF: sub_10019EE0+D5j
		mov	ecx, [esp+0DCh+var_BC]
		push	ecx
		push	ebp
		push	0
		call	SECITEM_CopyItem_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1001A1B6
		mov	edx, [esp+0DCh+var_C8]
		mov	[edx], eax

loc_1001A066:				; CODE XREF: sub_10019EE0+2A6j
		mov	eax, [ebp+8]
		mov	ecx, [ebp+4]
		push	eax
		mov	eax, [esp+0E0h+arg_0]
		push	ecx
		lea	edx, [esp+0E4h+var_84]
		push	edx
		call	sub_10018F70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1001A1B6
		mov	eax, [esp+0DCh+arg_0]
		mov	edx, [esp+0DCh+var_CC]
		lea	ebp, [esp+ebx+0DCh+var_84]
		push	ebp
		push	eax
		mov	eax, 200h
		lea	ecx, [esi+1]
		call	sub_10019400
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1001A1B2
		xor	edi, edi
		test	ebx, ebx
		jle	short loc_1001A0CE
		lea	ecx, [ecx+0]

loc_1001A0C0:				; CODE XREF: sub_10019EE0+1ECj
		lea	eax, [esp+edi+0DCh+var_84]
		mov	cl, [eax+ebx]
		xor	[eax], cl
		inc	edi
		cmp	edi, ebx
		jl	short loc_1001A0C0

loc_1001A0CE:				; CODE XREF: sub_10019EE0+1DBj
		mov	ecx, [esp+0DCh+arg_4]
		lea	eax, ds:0[ebx*8]
		sub	eax, ecx
		dec	ecx
		and	ecx, 7
		mov	dl, 1
		shl	dl, cl
		shr	eax, 3
		lea	edi, [esp+eax+0DCh+var_84]
		sub	ebx, eax
		push	ebx
		push	edi
		lea	ecx, [edx-1]
		and	cl, [edi]
		or	cl, dl
		lea	edx, [esp+0E4h+var_A4]
		mov	[edi], cl
		or	byte ptr [ebp-1], 1
		push	edx
		call	sub_10029D30
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	loc_1001A1B2
		mov	ebx, [esp+0DCh+var_CC]
		mov	eax, [esp+0DCh+var_C8]
		inc	dword ptr [eax]
		push	200h
		push	2
		push	ebx
		call	sub_10019200
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1001A18E
		mov	eax, ds:dword_10040B00
		cmp	ds:dword_10040B04[eax*4], 0FFF1h
		jb	short loc_1001A18B
		mov	[esp+0DCh+var_B8], eax
		lea	eax, [esp+0DCh+var_B8]
		push	eax
		lea	ecx, [esp+0E0h+var_A4]
		push	ecx
		call	sub_100265D0
		mov	edi, eax
		add	esp, 8
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1001A192
		test	edi, edi
		jnz	short loc_1001A18E
		mov	edx, [esp+0DCh+arg_4]
		mov	ecx, [esp+0DCh+var_C8]
		lea	eax, ds:0[edx*4]
		cmp	[ecx], eax
		ja	short loc_1001A18B
		mov	ebx, [esp+0DCh+var_C4]
		mov	ebp, [esp+0DCh+var_CC]
		jmp	loc_1001A066
; ---------------------------------------------------------------------------

loc_1001A18B:				; CODE XREF: sub_10019EE0+265j
					; sub_10019EE0+29Cj
		or	esi, 0FFFFFFFFh

loc_1001A18E:				; CODE XREF: sub_10019EE0+253j
					; sub_10019EE0+286j ...
		mov	ebp, ebx
		jmp	short loc_1001A1B6
; ---------------------------------------------------------------------------

loc_1001A192:				; CODE XREF: sub_10019EE0+282j
		mov	edx, [esp+0DCh+var_C0]
		push	edx
		lea	eax, [esp+0E0h+var_A4]
		push	eax
		call	sub_10028E00
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		js	short loc_1001A18E
		xor	edi, edi
		xor	esi, esi
		mov	ebp, ebx
		jmp	short loc_1001A1B6
; ---------------------------------------------------------------------------

loc_1001A1B2:				; CODE XREF: sub_10019EE0+1D1j
					; sub_10019EE0+22Fj
		mov	ebp, [esp+0DCh+var_CC]

loc_1001A1B6:				; CODE XREF: sub_10019EE0+8Aj
					; sub_10019EE0+A1j ...
		lea	ecx, [esp+0DCh+var_A4]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0E0h+var_94]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0E4h+var_B4]
		push	eax
		call	sub_10028EF0
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1001A232
		cmp	edi, 0FFFFFFFCh
		jz	short loc_1001A220
		cmp	edi, 0FFFFFFFDh
		jz	short loc_1001A20E
		cmp	edi, 0FFFFFFFEh
		jz	short loc_1001A1FC
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001A237
; ---------------------------------------------------------------------------

loc_1001A1FC:				; CODE XREF: sub_10019EE0+308j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001A237
; ---------------------------------------------------------------------------

loc_1001A20E:				; CODE XREF: sub_10019EE0+303j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001A237
; ---------------------------------------------------------------------------

loc_1001A220:				; CODE XREF: sub_10019EE0+2FEj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001A237
; ---------------------------------------------------------------------------

loc_1001A232:				; CODE XREF: sub_10019EE0+2F9j
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_1001A25F

loc_1001A237:				; CODE XREF: sub_10019EE0+31Aj
					; sub_10019EE0+32Cj ...
		mov	ecx, [esp+0DCh+var_C0]
		push	ecx
		call	sub_10028F40
		add	esp, 4
		cmp	dword ptr [ebp+4], 0
		jz	short loc_1001A255
		push	0
		push	ebp
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001A255:				; CODE XREF: sub_10019EE0+368j
		mov	edx, [esp+0DCh+var_C8]
		mov	dword ptr [edx], 0

loc_1001A25F:				; CODE XREF: sub_10019EE0+355j
		mov	ecx, [esp+0DCh+var_4]
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0CCh
		retn
sub_10019EE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A280	proc near		; CODE XREF: sub_1001B880+3B8p

var_1C		= byte ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+arg_C]
		push	ebp
		mov	ebp, [esp+20h+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		mov	[esp+28h+var_C], edi
		mov	[esp+28h+var_8], edi
		mov	[esp+28h+var_4], edi
		mov	[esp+28h+var_18], edi
		mov	[esp+28h+var_14], edi
		mov	[esp+28h+var_10], edi
		mov	[edx], edi
		cmp	eax, 400h
		jnb	short loc_1001A2F6
		mov	esi, [esp+28h+arg_4]
		push	ebx
		push	ecx
		call	sub_10019470
		add	esp, 8
		test	eax, eax
		jnz	loc_1001A53D
		mov	eax, [esp+28h+arg_8]
		push	ebx
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jnz	loc_1001A53D

loc_1001A2DD:				; CODE XREF: sub_1001A280+9Aj
		mov	ecx, [esp+28h+arg_10]
		mov	edx, [esp+28h+arg_14]
		mov	dword ptr [ecx], 3
		mov	[edx], edi
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1001A2F6:				; CODE XREF: sub_1001A280+2Fj
		jnz	short loc_1001A31C
		mov	esi, [esp+28h+arg_4]
		push	ebx
		push	ecx
		call	sub_10019470
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001A31C
		mov	eax, [esp+28h+arg_8]
		push	ebx
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001A2DD

loc_1001A31C:				; CODE XREF: sub_1001A280:loc_1001A2F6j
					; sub_1001A280+88j
		cmp	ebp, 0E0h
		jnb	short loc_1001A32B
		mov	edi, 3
		jmp	short loc_1001A354
; ---------------------------------------------------------------------------

loc_1001A32B:				; CODE XREF: sub_1001A280+A2j
		cmp	ebp, 100h
		jnb	short loc_1001A33A
		mov	edi, 7
		jmp	short loc_1001A354
; ---------------------------------------------------------------------------

loc_1001A33A:				; CODE XREF: sub_1001A280+B1j
		cmp	ebp, 180h
		jnb	short loc_1001A349
		mov	edi, 4
		jmp	short loc_1001A354
; ---------------------------------------------------------------------------

loc_1001A349:				; CODE XREF: sub_1001A280+C0j
		cmp	ebp, 200h
		sbb	edi, edi
		add	edi, 6

loc_1001A354:				; CODE XREF: sub_1001A280+A9j
					; sub_1001A280+B8j ...
		mov	esi, [esp+28h+arg_4]
		push	ebp
		push	edi
		mov	ecx, ebx
		mov	edx, esi
		call	sub_10019630
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001A37C
		mov	eax, [esp+28h+arg_8]
		push	ebx
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001A3E1

loc_1001A37C:				; CODE XREF: sub_1001A280+E8j
		lea	eax, [edi-3]	; switch 5 cases
		cmp	eax, 4
		ja	short loc_1001A3A7 ; jumptable 1001A384	default	case
		jmp	ds:off_1001A548[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001A38B:				; CODE XREF: sub_1001A280+104j
					; DATA XREF: .text:off_1001A548o
		mov	edi, 7		; jumptable 1001A384 case 3
		jmp	short loc_1001A3AC
; ---------------------------------------------------------------------------

loc_1001A392:				; CODE XREF: sub_1001A280+104j
					; DATA XREF: .text:off_1001A548o
		mov	edi, 4		; jumptable 1001A384 case 7
		jmp	short loc_1001A3AC
; ---------------------------------------------------------------------------

loc_1001A399:				; CODE XREF: sub_1001A280+104j
					; DATA XREF: .text:off_1001A548o
		mov	edi, 5		; jumptable 1001A384 case 4
		jmp	short loc_1001A3AC
; ---------------------------------------------------------------------------

loc_1001A3A0:				; CODE XREF: sub_1001A280+104j
					; DATA XREF: .text:off_1001A548o
		mov	edi, 6		; jumptable 1001A384 case 5
		jmp	short loc_1001A3AC
; ---------------------------------------------------------------------------

loc_1001A3A7:				; CODE XREF: sub_1001A280+102j
					; sub_1001A280+104j
					; DATA XREF: ...
		mov	edi, 8		; jumptable 1001A384 default case

loc_1001A3AC:				; CODE XREF: sub_1001A280+110j
					; sub_1001A280+117j ...
		cmp	edi, 8
		jnz	short loc_1001A354
		mov	eax, [esi]
		mov	edx, [esi+8]
		mov	ecx, [esi+4]
		mov	[esp+28h+var_C], eax
		mov	[esp+28h+var_4], edx
		mov	eax, 0AAAAAAABh
		mul	edx
		shr	edx, 1
		mov	[esp+28h+var_8], ecx
		mov	[esp+28h+var_4], edx
		cmp	ebp, 0E0h
		jnb	short loc_1001A3FA
		mov	edi, 3
		jmp	short loc_1001A423
; ---------------------------------------------------------------------------

loc_1001A3E1:				; CODE XREF: sub_1001A280+FAj
		mov	ecx, [esp+28h+arg_10]
		mov	edx, [esp+28h+arg_14]
		mov	[ecx], edi
		pop	edi
		pop	esi
		mov	dword ptr [edx], 1
		xor	eax, eax
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1001A3FA:				; CODE XREF: sub_1001A280+158j
		cmp	ebp, 100h
		jnb	short loc_1001A409
		mov	edi, 7
		jmp	short loc_1001A423
; ---------------------------------------------------------------------------

loc_1001A409:				; CODE XREF: sub_1001A280+180j
		cmp	ebp, 180h
		jnb	short loc_1001A418
		mov	edi, 4
		jmp	short loc_1001A423
; ---------------------------------------------------------------------------

loc_1001A418:				; CODE XREF: sub_1001A280+18Fj
		cmp	ebp, 200h
		sbb	edi, edi
		add	edi, 6

loc_1001A423:				; CODE XREF: sub_1001A280+15Fj
					; sub_1001A280+187j ...
		lea	eax, [esp+28h+var_1C]
		push	eax
		lea	ecx, [esp+2Ch+var_18]
		push	ecx
		push	ebx
		lea	edx, [esp+34h+var_C]
		push	edx
		push	ebp
		push	edi
		call	sub_10019EE0
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1001A462
		mov	eax, [esp+28h+arg_8]
		push	ebx
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001A4A3
		lea	ecx, [esp+28h+var_18]
		push	0
		push	ecx
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001A462:				; CODE XREF: sub_1001A280+1BFj
		lea	eax, [edi-3]	; switch 5 cases
		cmp	eax, 4
		ja	short loc_1001A48D ; jumptable 1001A46A	default	case
		jmp	ds:off_1001A55C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001A471:				; CODE XREF: sub_1001A280+1EAj
					; DATA XREF: .text:off_1001A55Co
		mov	eax, 7		; jumptable 1001A46A case 3
		jmp	short loc_1001A492
; ---------------------------------------------------------------------------

loc_1001A478:				; CODE XREF: sub_1001A280+1EAj
					; DATA XREF: .text:off_1001A55Co
		mov	eax, 4		; jumptable 1001A46A case 7
		jmp	short loc_1001A492
; ---------------------------------------------------------------------------

loc_1001A47F:				; CODE XREF: sub_1001A280+1EAj
					; DATA XREF: .text:off_1001A55Co
		mov	eax, 5		; jumptable 1001A46A case 4
		jmp	short loc_1001A492
; ---------------------------------------------------------------------------

loc_1001A486:				; CODE XREF: sub_1001A280+1EAj
					; DATA XREF: .text:off_1001A55Co
		mov	eax, 6		; jumptable 1001A46A case 5
		jmp	short loc_1001A492
; ---------------------------------------------------------------------------

loc_1001A48D:				; CODE XREF: sub_1001A280+1E8j
					; sub_1001A280+1EAj
					; DATA XREF: ...
		mov	eax, 8		; jumptable 1001A46A default case

loc_1001A492:				; CODE XREF: sub_1001A280+1F6j
					; sub_1001A280+1FDj ...
		mov	edi, eax
		cmp	eax, 8
		jnz	short loc_1001A423
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1001A4A3:				; CODE XREF: sub_1001A280+1D1j
		mov	edx, [esi+8]
		mov	esi, [esp+28h+var_10]
		sub	edx, esi
		js	loc_1001A52E
		mov	eax, [esp+28h+arg_4]
		mov	eax, [eax+4]
		mov	ebp, [esp+28h+var_14]
		add	eax, edx
		mov	ecx, esi
		cmp	esi, 4
		jb	short loc_1001A4DB

loc_1001A4C6:				; CODE XREF: sub_1001A280+259j
		mov	edx, [eax]
		cmp	edx, [ebp+0]
		jnz	short loc_1001A52E
		sub	ecx, 4
		add	ebp, 4
		add	eax, 4
		cmp	ecx, 4
		jnb	short loc_1001A4C6

loc_1001A4DB:				; CODE XREF: sub_1001A280+244j
		test	ecx, ecx
		jz	short loc_1001A500
		mov	dl, [ebp+0]
		cmp	dl, [eax]
		jnz	short loc_1001A52E
		cmp	ecx, 1
		jbe	short loc_1001A500
		mov	dl, [ebp+1]
		cmp	dl, [eax+1]
		jnz	short loc_1001A52E
		cmp	ecx, 2
		jbe	short loc_1001A500
		mov	cl, [ebp+2]
		cmp	cl, [eax+2]
		jnz	short loc_1001A52E

loc_1001A500:				; CODE XREF: sub_1001A280+25Dj
					; sub_1001A280+269j ...
		mov	edx, [esp+28h+arg_C]
		mov	eax, [esp+28h+arg_10]
		mov	ecx, [esp+28h+arg_14]
		mov	[edx], esi
		lea	edx, [esp+28h+var_18]
		push	0
		mov	[eax], edi
		push	edx
		mov	dword ptr [ecx], 2
		call	SECITEM_FreeItem_Util
		add	esp, 8
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1001A52E:				; CODE XREF: sub_1001A280+22Cj
					; sub_1001A280+24Bj ...
		lea	eax, [esp+28h+var_18]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001A53D:				; CODE XREF: sub_1001A280+41j
					; sub_1001A280+57j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 1Ch
		retn
sub_1001A280	endp

; ---------------------------------------------------------------------------
		align 4
off_1001A548	dd offset loc_1001A38B	; DATA XREF: sub_1001A280+104r
		dd offset loc_1001A399	; jump table for switch	statement
		dd offset loc_1001A3A0
		dd offset loc_1001A3A7
		dd offset loc_1001A392
off_1001A55C	dd offset loc_1001A471	; DATA XREF: sub_1001A280+1EAr
		dd offset loc_1001A47F	; jump table for switch	statement
		dd offset loc_1001A486
		dd offset loc_1001A48D
		dd offset loc_1001A478

; =============== S U B	R O U T	I N E =======================================


sub_1001A570	proc near		; CODE XREF: sub_1001AE40+355p
					; sub_1001B880+5DFp

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= byte ptr -0B4h
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= byte ptr -8Ch
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 0C8h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0C8h+var_4], eax
		mov	eax, [esp+0C8h+arg_10]
		push	ebx
		push	ebp
		xor	ebx, ebx
		mov	[esp+0D0h+var_BC], eax
		lea	eax, [esp+0D0h+var_8C]
		push	esi
		push	eax
		mov	[esp+0D8h+var_A4], ecx
		mov	[esp+0D8h+var_78], edx
		xor	ebp, ebp
		mov	[esp+0D8h+var_80], ebx
		mov	[esp+0D8h+var_94], ebx
		mov	[esp+0D8h+var_68], ebx
		mov	[esp+0D8h+var_48], ebx
		mov	[esp+0D8h+var_58], ebx
		mov	[esp+0D8h+var_A8], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001A8B9
		lea	ecx, [esp+0D4h+var_A0]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001A8B9
		lea	edx, [esp+0D4h+var_74]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001A8B9
		lea	eax, [esp+0D4h+var_54]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001A8B9
		lea	ecx, [esp+0D4h+var_B4]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001A8B9
		lea	edx, [esp+0D4h+var_64]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001A8B9
		mov	eax, [esp+0D4h+arg_0]
		push	eax
		call	sub_10008790
		add	esp, 4
		cmp	eax, ebx
		jnz	short loc_1001A663
		mov	[esp+0D4h+var_C8], ebx
		jmp	short loc_1001A669
; ---------------------------------------------------------------------------

loc_1001A663:				; CODE XREF: sub_1001A570+EBj
		mov	ecx, [eax]
		mov	[esp+0D4h+var_C8], ecx

loc_1001A669:				; CODE XREF: sub_1001A570+F1j
		mov	ecx, [esp+0D4h+var_C8]
		mov	eax, [esp+0D4h+arg_4]
		add	ecx, ecx
		add	ecx, ecx
		dec	eax
		add	ecx, ecx
		xor	edx, edx
		mov	[esp+0D4h+var_7C], eax
		div	ecx
		push	edi
		xor	edi, edi
		mov	[esp+0D8h+var_B8], ecx
		mov	[esp+0D8h+var_90], edx
		mov	[esp+0D8h+var_C4], eax
		cmp	eax, ebx
		jbe	loc_1001A750
		mov	[esp+0D8h+var_C0], ebx
		mov	edi, edi

loc_1001A6A0:				; CODE XREF: sub_1001A570+1D6j
		mov	eax, [esp+0D8h+arg_8]
		lea	edx, [esp+0D8h+var_44]
		push	edx
		mov	edx, [esp+0DCh+arg_0]
		lea	ecx, [edi+eax]
		mov	eax, [esp+0DCh+arg_C]
		push	edx
		mov	edx, [esp+0E0h+var_BC]
		call	sub_10019400
		mov	ebp, eax
		add	esp, 8
		cmp	ebp, ebx
		jnz	loc_1001A8B8
		mov	eax, [esp+0D8h+var_C8]
		push	eax
		lea	ecx, [esp+0DCh+var_44]
		push	ecx
		lea	edx, [esp+0E0h+var_B4]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001A8B8
		mov	eax, [esp+0D8h+var_C0]
		push	eax
		lea	ecx, [esp+0DCh+var_B4]
		push	ecx
		mov	edx, ecx
		push	edx
		call	sub_10028B50
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001A8B8
		lea	eax, [esp+0D8h+var_8C]
		push	eax
		lea	ecx, [esp+0DCh+var_B4]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001A8B8
		mov	eax, [esp+0D8h+var_B8]
		add	[esp+0D8h+var_C0], eax
		inc	edi
		cmp	edi, [esp+0D8h+var_C4]
		jb	loc_1001A6A0
		mov	eax, [esp+0D8h+var_C4]

loc_1001A750:				; CODE XREF: sub_1001A570+124j
		mov	edx, [esp+0D8h+arg_8]
		lea	ecx, [esp+0D8h+var_44]
		push	ecx
		lea	ecx, [eax+edx]
		mov	eax, [esp+0DCh+arg_0]
		mov	edx, [esp+0DCh+var_BC]
		push	eax
		mov	eax, [esp+0E0h+arg_C]
		call	sub_10019400
		mov	ebp, eax
		add	esp, 8
		cmp	ebp, ebx
		jnz	loc_1001A8B8
		mov	ecx, [esp+0D8h+var_C8]
		push	ecx
		lea	edx, [esp+0DCh+var_44]
		push	edx
		lea	eax, [esp+0E0h+var_64]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001A8B8
		mov	edx, [esp+0D8h+var_90]
		lea	ecx, [esp+0D8h+var_B4]
		push	ecx
		push	ebx
		push	edx
		lea	eax, [esp+0E4h+var_64]
		push	eax
		call	sub_1002A5C0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_1001A8B8
		mov	eax, [esp+0D8h+var_C4]
		imul	eax, [esp+0D8h+var_B8]
		push	eax
		lea	ecx, [esp+0DCh+var_B4]
		push	ecx
		mov	edx, ecx
		push	edx
		call	sub_10028B50
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001A8B8
		lea	eax, [esp+0D8h+var_8C]
		push	eax
		lea	ecx, [esp+0DCh+var_B4]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001A8B8
		mov	eax, [esp+0D8h+var_7C]
		push	1
		push	eax
		lea	ecx, [esp+0E0h+var_A0]
		push	ecx
		call	sub_10028B90
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001A8B8
		lea	edx, [esp+0D8h+var_A0]
		push	edx
		lea	eax, [esp+0DCh+var_8C]
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_1001A8B8
		mov	eax, [esp+0D8h+var_A4]
		lea	edx, [esp+0D8h+var_54]
		push	edx
		push	eax
		call	sub_1002A0A0
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	short loc_1001A8B8
		lea	ecx, [esp+0D8h+var_74]
		push	ecx
		lea	edx, [esp+0DCh+var_54]
		push	edx
		lea	eax, [esp+0E0h+var_A0]
		push	eax
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_1001A8B8
		lea	ecx, [esp+0D8h+var_74]
		push	ecx
		mov	edx, ecx
		push	1
		push	edx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_1001A8B8
		mov	eax, [esp+0D8h+var_78]
		push	eax
		lea	ecx, [esp+0DCh+var_74]
		push	ecx
		lea	edx, [esp+0E0h+var_A0]
		push	edx
		call	sub_1002A1A0
		add	esp, 0Ch
		mov	esi, eax

loc_1001A8B8:				; CODE XREF: sub_1001A570+161j
					; sub_1001A570+185j ...
		pop	edi

loc_1001A8B9:				; CODE XREF: sub_1001A570+5Dj
					; sub_1001A570+74j ...
		lea	eax, [esp+0D4h+var_8C]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0D8h+var_A0]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0DCh+var_74]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0E0h+var_54]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0E4h+var_64]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0E8h+var_B4]
		push	edx
		call	sub_10028EF0
		add	esp, 18h
		cmp	esi, ebx
		jz	loc_1001A9B9
		cmp	esi, 0FFFFFFFCh
		jz	loc_1001A991
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001A969
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001A941
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+0C8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C8h
		retn
; ---------------------------------------------------------------------------

loc_1001A941:				; CODE XREF: sub_1001A570+3A7j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+0C8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C8h
		retn
; ---------------------------------------------------------------------------

loc_1001A969:				; CODE XREF: sub_1001A570+3A2j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+0C8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C8h
		retn
; ---------------------------------------------------------------------------

loc_1001A991:				; CODE XREF: sub_1001A570+399j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+0C8h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C8h
		retn
; ---------------------------------------------------------------------------

loc_1001A9B9:				; CODE XREF: sub_1001A570+390j
		mov	ecx, [esp+0D4h+var_4]
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0C8h
		retn
sub_1001A570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A9E0	proc near		; CODE XREF: sub_1001AE40+5CBp
					; sub_1001B880+801p

var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 24h
		mov	eax, [esp+24h+arg_8]
		lea	ecx, [esp+24h+var_10]
		push	esi
		push	ecx
		mov	[esp+2Ch+var_24], 0
		mov	dword ptr [eax], 0
		mov	[esp+2Ch+var_4], 0
		mov	[esp+2Ch+var_14], 0
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001AAEE
		lea	edx, [esp+28h+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001AAEE
		lea	eax, [esp+28h+var_20]
		push	eax
		push	1
		push	ebx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001AAEE
		lea	ecx, [esp+28h+var_20]
		push	ecx
		push	edi
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		js	short loc_1001AA75
		push	edi
		lea	edx, [esp+2Ch+var_20]
		push	edx
		push	edi
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001AAEE

loc_1001AA75:				; CODE XREF: sub_1001A9E0+7Ej
		push	1
		push	edi
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jg	short loc_1001AA8E
		mov	[esp+28h+var_24], 0FFFFFFFFh
		jmp	short loc_1001AAEE
; ---------------------------------------------------------------------------

loc_1001AA8E:				; CODE XREF: sub_1001A9E0+A2j
		mov	ecx, [esp+28h+arg_0]
		push	0
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	ecx
		lea	edx, [esp+34h+var_20]
		push	edx
		call	sub_1002BF60
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001AAEE
		mov	eax, [esp+28h+arg_4]
		push	eax
		push	ebx
		lea	ecx, [esp+30h+var_10]
		push	ecx
		push	edi
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001AAEE
		mov	edx, [esp+28h+arg_4]
		push	1
		push	edx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jg	short loc_1001AAE4
		mov	[esp+28h+var_24], 0FFFFFFFFh
		jmp	short loc_1001AAEE
; ---------------------------------------------------------------------------

loc_1001AAE4:				; CODE XREF: sub_1001A9E0+F8j
		mov	eax, [esp+28h+arg_8]
		mov	dword ptr [eax], 1

loc_1001AAEE:				; CODE XREF: sub_1001A9E0+37j
					; sub_1001A9E0+4Ej ...
		lea	ecx, [esp+28h+var_10]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+2Ch+var_20]
		push	edx
		call	sub_10028EF0
		add	esp, 8
		test	esi, esi
		jz	short loc_1001AB6C
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001AB57
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001AB42
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001AB2D
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1001AB2D:				; CODE XREF: sub_1001A9E0+136j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1001AB42:				; CODE XREF: sub_1001A9E0+131j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1001AB57:				; CODE XREF: sub_1001A9E0+12Cj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1001AB6C:				; CODE XREF: sub_1001A9E0+127j
		mov	eax, [esp+28h+var_24]
		pop	esi
		add	esp, 24h
		retn
sub_1001A9E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001AB80	proc near		; CODE XREF: sub_1001AE40+681p
					; sub_1001B880+71Fp

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
Dst		= byte ptr -44h
var_43		= byte ptr -43h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		sub	esp, 88h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+88h+var_4], eax
		mov	eax, [esp+88h+arg_4]
		push	ebx
		mov	ebx, [esp+8Ch+arg_8]
		push	ebp
		push	esi
		mov	[esp+94h+var_80], eax
		xor	esi, esi
		push	edi
		mov	edi, [esp+98h+arg_0]
		lea	eax, [esp+98h+var_74]
		push	eax
		mov	[esp+9Ch+var_78], ecx
		mov	[esp+9Ch+var_7C], edx
		mov	[esp+9Ch+var_88], esi
		mov	[esp+9Ch+var_68], esi
		mov	[esp+9Ch+var_48], esi
		mov	[esp+9Ch+var_58], esi
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001AD7E
		lea	ecx, [esp+98h+var_54]
		push	ecx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001AD7E
		lea	edx, [esp+98h+var_64]
		push	edx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001AD7E
		push	edi
		call	sub_10008790
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1001AC39
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+98h+var_88], 0FFFFFFFFh
		jmp	loc_1001AD82
; ---------------------------------------------------------------------------

loc_1001AC39:				; CODE XREF: sub_1001AB80+9Dj
		mov	eax, [edi+4]
		call	eax
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1001AC51
		mov	[esp+98h+var_88], 0FFFFFFFFh
		jmp	loc_1001AD82
; ---------------------------------------------------------------------------

loc_1001AC51:				; CODE XREF: sub_1001AB80+C2j
		mov	edx, [esp+98h+var_80]
		lea	ecx, [esp+98h+var_54]
		push	ecx
		push	1
		push	edx
		call	sub_1002B460
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	loc_1001AD82
		push	0
		lea	eax, [esp+9Ch+var_74]
		push	eax
		lea	ecx, [esp+0A0h+var_54]
		push	ebx
		push	ecx
		call	sub_1002BF60
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		js	loc_1001AD82
		mov	ebx, 1

loc_1001AC93:				; CODE XREF: sub_1001AB80+1DCj
		mov	edx, [edi+10h]
		push	esi
		call	edx
		mov	eax, [esp+9Ch+var_78]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		mov	eax, [edi+14h]
		push	ecx
		push	edx
		push	esi
		call	eax
		mov	ecx, [edi+14h]
		push	4
		push	offset aGgen	; "ggen"
		push	esi
		call	ecx
		mov	eax, [edi+14h]
		push	1
		lea	edx, [esp+0B8h+arg_C]
		push	edx
		push	esi
		call	eax
		mov	ecx, ebx
		push	2
		lea	edx, [esp+0C4h+Dst]
		shr	ecx, 8
		push	edx
		mov	[esp+0C8h+Dst],	cl
		mov	[esp+0C8h+var_43], bl
		mov	eax, [edi+14h]
		push	esi
		call	eax
		mov	eax, [edi+18h]
		push	40h
		lea	ecx, [esp+0D0h+var_84]
		push	ecx
		lea	edx, [esp+0D4h+Dst]
		push	edx
		push	esi
		call	eax
		mov	ecx, [esp+0DCh+var_84]
		add	esp, 44h
		push	ecx
		lea	edx, [esp+9Ch+Dst]
		push	edx
		lea	eax, [esp+0A0h+var_64]
		push	eax
		call	sub_10029D30
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	short loc_1001AD82
		mov	ecx, [esp+98h+var_7C]
		mov	edx, [esp+98h+var_80]
		push	ecx
		push	edx
		lea	eax, [esp+0A0h+var_74]
		push	eax
		lea	ecx, [esp+0A4h+var_64]
		push	ecx
		call	sub_100288A0
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		js	short loc_1001AD82
		mov	edx, [esp+98h+var_7C]
		push	2
		push	edx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jns	short loc_1001AD6C
		inc	ebx
		cmp	ebx, 10000h
		jb	loc_1001AC93
		mov	[esp+98h+var_88], 0FFFFFFFFh
		jmp	short loc_1001AD82
; ---------------------------------------------------------------------------

loc_1001AD6C:				; CODE XREF: sub_1001AB80+1D3j
		cmp	ebx, 10000h
		jb	short loc_1001AD82
		mov	[esp+98h+var_88], 0FFFFFFFFh
		jmp	short loc_1001AD82
; ---------------------------------------------------------------------------

loc_1001AD7E:				; CODE XREF: sub_1001AB80+5Cj
					; sub_1001AB80+73j ...
		mov	edi, [esp+98h+var_84]

loc_1001AD82:				; CODE XREF: sub_1001AB80+B4j
					; sub_1001AB80+CCj ...
		push	40h		; Size
		lea	eax, [esp+9Ch+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1001ADA2
		mov	ecx, [edi+0Ch]
		push	1
		push	esi
		call	ecx
		add	esp, 8

loc_1001ADA2:				; CODE XREF: sub_1001AB80+215j
		lea	edx, [esp+98h+var_74]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+9Ch+var_54]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0A0h+var_64]
		push	ecx
		call	sub_10028EF0
		add	esp, 0Ch
		test	ebp, ebp
		jz	short loc_1001AE1E
		cmp	ebp, 0FFFFFFFCh
		jz	short loc_1001AE0C
		cmp	ebp, 0FFFFFFFDh
		jz	short loc_1001ADFA
		cmp	ebp, 0FFFFFFFEh
		jz	short loc_1001ADE8
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001AE22
; ---------------------------------------------------------------------------

loc_1001ADE8:				; CODE XREF: sub_1001AB80+254j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001AE22
; ---------------------------------------------------------------------------

loc_1001ADFA:				; CODE XREF: sub_1001AB80+24Fj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001AE22
; ---------------------------------------------------------------------------

loc_1001AE0C:				; CODE XREF: sub_1001AB80+24Aj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001AE22
; ---------------------------------------------------------------------------

loc_1001AE1E:				; CODE XREF: sub_1001AB80+245j
		mov	eax, [esp+98h+var_88]

loc_1001AE22:				; CODE XREF: sub_1001AB80+266j
					; sub_1001AB80+278j ...
		mov	ecx, [esp+98h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 88h
		retn
sub_1001AB80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001AE40	proc near		; CODE XREF: sub_1001B720+2Fp
					; sub_1001B770+2Ep ...

var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
Src		= dword	ptr -9Ch
Size		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0B0h
		mov	eax, [esp+0B0h+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		shr	eax, 3
		or	esi, 0FFFFFFFFh
		mov	[esp+0B8h+var_4C], edi
		mov	[esp+0B8h+var_48], edi
		mov	[esp+0B8h+var_44], edi
		mov	[esp+0B8h+var_A0], edi
		mov	[esp+0B8h+Src],	edi
		mov	[esp+0B8h+Size], edi
		mov	[esp+0B8h+var_6C], edi
		mov	[esp+0B8h+var_68], edi
		mov	[esp+0B8h+var_64], edi
		mov	[esp+0B8h+var_88], edi
		mov	[esp+0B8h+var_84], edi
		mov	[esp+0B8h+var_80], edi
		mov	[esp+0B8h+var_A4], edi
		cmp	[esp+0B8h+arg_C], eax
		jb	loc_1001B6FC
		cmp	[esp+0B8h+arg_10], edi
		jz	loc_1001B6FC
		cmp	[esp+0B8h+arg_14], edi
		jz	loc_1001B6FC
		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, edi
		jnz	short loc_1001AEDF
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		pop	edi
		or	eax, esi
		pop	esi
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001AEDF:				; CODE XREF: sub_1001AE40+84j
		push	ebp
		push	28h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	ebp, eax
		add	esp, 8
		mov	[esp+0C0h+var_60], ebp
		cmp	ebp, edi
		jnz	short loc_1001AF18
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	ebx

loc_1001AF02:				; CODE XREF: sub_1001AE40+FEj
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001AF18:				; CODE XREF: sub_1001AE40+B3j
		push	800h
		mov	[ebp+0], ebx
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, edi
		jnz	short loc_1001AF40
		push	0FFFFE013h
		call	PORT_SetError_Util
		mov	ecx, [ebp+0]
		push	1
		push	ecx
		jmp	short loc_1001AF02
; ---------------------------------------------------------------------------

loc_1001AF40:				; CODE XREF: sub_1001AE40+ECj
		push	20h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[esp+0C0h+var_B0], eax
		cmp	eax, edi
		jnz	short loc_1001AF81
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		mov	edx, [ebp+0]
		push	1
		push	edx
		call	PORT_FreeArena_Util
		add	esp, 14h
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001AF81:				; CODE XREF: sub_1001AE40+111j
		mov	[eax], ebx
		lea	ebx, [eax+8]
		lea	eax, [esp+0C0h+var_5C]
		push	eax
		mov	[esp+0C4h+var_50], edi
		mov	[esp+0C4h+var_70], edi
		mov	[esp+0C4h+var_24], edi
		mov	[esp+0C4h+var_34], edi
		mov	[esp+0C4h+var_14], edi
		mov	[esp+0C4h+var_4], edi
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, edi
		jl	loc_1001B5EE
		lea	ecx, [esp+0C0h+var_7C]
		push	ecx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001B5EE
		lea	edx, [esp+0C0h+var_30]
		push	edx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001B5EE
		lea	eax, [esp+0C0h+var_40]
		push	eax
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001B5EE
		lea	ecx, [esp+0C0h+var_20]
		push	ecx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001B5EE
		lea	edx, [esp+0C0h+var_10]
		push	edx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001B5EE
		mov	edi, [esp+0C0h+arg_4]
		mov	eax, edi
		call	sub_10018F30
		push	eax
		mov	[esp+0C4h+var_AC], eax
		call	sub_10008790
		add	esp, 4
		test	eax, eax
		jnz	short loc_1001B063
		xor	ecx, ecx
		jmp	short loc_1001B065
; ---------------------------------------------------------------------------

loc_1001B063:				; CODE XREF: sub_1001AE40+21Dj
		mov	ecx, [eax]

loc_1001B065:				; CODE XREF: sub_1001AE40+221j
		mov	eax, [esp+0C0h+arg_0]
		add	ecx, ecx
		add	ecx, ecx
		dec	eax
		add	ecx, ecx
		xor	edx, edx
		div	ecx
		mov	[esp+0C0h+var_8C], eax
		jmp	short loc_1001B080
; ---------------------------------------------------------------------------
		align 10h

loc_1001B080:				; CODE XREF: sub_1001AE40+23Bj
					; sub_1001AE40+2E9j ...
		mov	eax, [esp+0C0h+var_A4]
		inc	eax
		mov	[esp+0C0h+var_A4], eax
		cmp	eax, 3E8h
		jg	loc_1001B255
		mov	edx, [esp+0C0h+arg_C]
		mov	eax, [esp+0C0h+var_B0]
		mov	[ebx+8], edx
		mov	ecx, [eax]
		mov	eax, ebx
		call	sub_10019120
		mov	esi, eax
		test	esi, esi
		jnz	loc_1001B5EE
		mov	eax, [esp+0C0h+arg_8]
		test	eax, eax
		jnz	short loc_1001B0DC
		mov	eax, [esp+0C0h+arg_C]
		add	eax, eax
		lea	ecx, [esp+0C0h+var_7C]
		add	eax, eax
		push	ecx
		add	eax, eax
		push	eax
		mov	esi, ebx
		call	sub_10019470
		jmp	short loc_1001B0F6
; ---------------------------------------------------------------------------

loc_1001B0DC:				; CODE XREF: sub_1001AE40+27Ej
		cmp	eax, 1
		jnz	loc_1001B267
		mov	edx, [esp+0C0h+var_AC]
		push	edi
		push	edx
		lea	ecx, [esp+0C8h+var_7C]
		mov	edx, ebx
		call	sub_10019630

loc_1001B0F6:				; CODE XREF: sub_1001AE40+29Aj
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1001B5EE
		mov	eax, [esp+0C0h+arg_0]
		push	edi
		push	eax
		call	sub_10018EB0
		push	eax
		lea	ecx, [esp+0CCh+var_7C]
		push	ecx
		call	sub_100262E0
		add	esp, 10h
		mov	ebp, eax
		neg	eax
		sbb	eax, eax
		mov	[esp+0C0h+var_94], eax
		jnz	loc_1001B080
		mov	edi, [esp+0C0h+arg_8]
		mov	eax, [esp+0C0h+arg_0]
		neg	edi
		sbb	edi, edi
		add	edi, 2
		cmp	eax, 400h
		jb	short loc_1001B158
		lea	edx, ds:0FFFFFFFFh[eax*4]
		mov	[esp+0C0h+var_90], edx
		jmp	short loc_1001B160
; ---------------------------------------------------------------------------

loc_1001B158:				; CODE XREF: sub_1001AE40+309j
		mov	[esp+0C0h+var_90], 0FFFh

loc_1001B160:				; CODE XREF: sub_1001AE40+316j
		mov	[esp+0C0h+var_A8], 0
		jmp	short loc_1001B170
; ---------------------------------------------------------------------------
		align 10h

loc_1001B170:				; CODE XREF: sub_1001AE40+328j
					; sub_1001AE40+3E9j
		mov	eax, [esp+0C0h+arg_C]
		mov	ecx, [esp+0C0h+var_AC]
		add	eax, eax
		add	eax, eax
		push	ebx
		add	eax, eax
		push	eax
		mov	eax, [esp+0C8h+arg_0]
		push	edi
		push	eax
		push	ecx
		lea	edx, [esp+0D4h+var_5C]
		lea	ecx, [esp+0D4h+var_7C]
		call	sub_1001A570
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1001B5EE
		mov	eax, [esp+0C0h+arg_0]
		push	1
		dec	eax
		push	eax
		lea	edx, [esp+0C8h+var_20]
		push	edx
		call	sub_10028B90
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	loc_1001B5EE
		lea	eax, [esp+0C0h+var_20]
		push	eax
		lea	ecx, [esp+0C4h+var_5C]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		js	short loc_1001B214
		mov	edx, [esp+0C0h+arg_4]
		mov	eax, [esp+0C0h+arg_0]
		push	edx
		push	eax
		call	sub_10018EB0
		push	eax
		lea	ecx, [esp+0CCh+var_5C]
		push	ecx
		call	sub_100262E0
		add	esp, 10h
		mov	ebp, eax
		neg	eax
		sbb	eax, eax
		mov	[esp+0C0h+var_94], eax
		jz	short loc_1001B23B

loc_1001B214:				; CODE XREF: sub_1001AE40+3A3j
		mov	eax, [esp+0C0h+var_A8]
		mov	edx, [esp+0C0h+var_8C]
		inc	eax
		lea	edi, [edi+edx+1]
		mov	[esp+0C0h+var_A8], eax
		cmp	eax, [esp+0C0h+var_90]
		jbe	loc_1001B170
		mov	edi, [esp+0C0h+arg_4]
		jmp	loc_1001B080
; ---------------------------------------------------------------------------

loc_1001B23B:				; CODE XREF: sub_1001AE40+3D2j
		mov	eax, [esp+0C0h+var_90]
		cmp	[esp+0C0h+var_A8], eax
		jbe	loc_1001B397
		mov	edi, [esp+0C0h+arg_4]
		jmp	loc_1001B080
; ---------------------------------------------------------------------------

loc_1001B255:				; CODE XREF: sub_1001AE40+24Ej
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1001B5EE
; ---------------------------------------------------------------------------

loc_1001B267:				; CODE XREF: sub_1001AE40+29Fj
		mov	ecx, [ebx]
		mov	[esp+0C0h+var_A0], ecx
		mov	edx, [ebx+4]
		mov	[esp+0C0h+Src],	edx
		mov	eax, [ebx+8]
		lea	ecx, [esp+0C0h+var_8C]
		push	ecx
		lea	edx, [esp+0C4h+var_6C]
		push	edx
		mov	edx, [esp+0C8h+var_AC]
		mov	[esp+0C8h+Size], eax
		lea	eax, [esp+0C8h+var_7C]
		push	eax
		lea	ecx, [esp+0CCh+var_A0]
		push	ecx
		push	edi
		push	edx
		mov	[esp+0D8h+var_8C], 0
		call	sub_10019EE0
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_1001B5EE
		mov	edi, [esp+0C0h+var_AC]
		mov	[esp+0C0h+var_A4], eax
		lea	eax, [esp+0C0h+var_A4]
		push	eax
		lea	ecx, [esp+0C4h+var_88]
		push	ecx
		mov	ecx, [esp+0C8h+arg_0]
		inc	ecx
		lea	edx, [esp+0C8h+var_10]
		push	edx
		lea	eax, [esp+0CCh+var_6C]
		shr	ecx, 1
		push	eax
		inc	ecx
		push	ecx
		push	edi
		call	sub_10019EE0
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_1001B5EE
		lea	edx, [esp+0C0h+var_A4]
		push	edx
		lea	eax, [esp+0C4h+var_88]
		push	eax
		lea	ecx, [esp+0C8h+var_5C]
		push	ecx
		mov	ecx, [esp+0CCh+arg_0]
		lea	edx, [esp+0CCh+var_7C]
		push	edx
		lea	eax, [esp+0D0h+var_10]
		push	eax
		push	ecx
		push	edi
		call	sub_10019790
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		jnz	loc_1001B5EE
		mov	eax, [esp+0C0h+var_80]
		add	eax, [esp+0C0h+var_64]
		mov	edx, [esp+0C0h+var_B0]
		add	eax, [esp+0C0h+Size]
		push	eax
		mov	[ebx+8], eax
		mov	eax, [edx]
		push	eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[ebx+4], eax
		test	eax, eax
		jz	loc_1001B5EE
		mov	ecx, [esp+0C0h+Size]
		mov	edx, [esp+0C0h+Src]
		push	ecx		; Size
		push	edx		; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esp+0CCh+var_80]
		mov	edx, [ebx+4]
		mov	ecx, [esp+0CCh+var_84]
		add	edx, [esp+0CCh+Size]
		push	eax		; Size
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		mov	edx, [ebx+4]
		mov	eax, [esp+0D8h+var_64]
		add	edx, [esp+0D8h+var_80]
		mov	ecx, [esp+0D8h+var_68]
		add	edx, [esp+0D8h+Size]
		push	eax		; Size
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 24h
		mov	[esp+0C0h+var_A8], esi

loc_1001B397:				; CODE XREF: sub_1001AE40+403j
		cmp	[esp+0C0h+arg_8], 0
		jnz	loc_1001B47F
		mov	eax, [esp+0C0h+arg_0]
		shr	eax, 3
		push	eax
		lea	eax, [esp+0C4h+var_4C]
		push	eax
		push	0
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	[esp+0C0h+var_48], 0
		jz	loc_1001B5EE
		lea	ebx, [ebx+0]

loc_1001B3D0:				; CODE XREF: sub_1001AE40+5E2j
		lea	ecx, [esp+0C0h+var_40]
		push	ecx
		lea	esi, [esp+0C4h+var_4C]
		call	sub_10019170
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	loc_1001B5EE
		lea	edx, [esp+0C0h+var_94]
		push	edx
		lea	eax, [esp+0C4h+var_30]
		push	eax
		lea	ecx, [esp+0C8h+var_7C]
		push	ecx
		lea	edi, [esp+0CCh+var_40]
		lea	ebx, [esp+0CCh+var_5C]
		call	sub_1001A9E0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1001B5EE
		cmp	[esp+0C0h+var_94], 1
		jnz	short loc_1001B3D0
		mov	edx, edi
		push	edx
		call	sub_10029E60
		add	esp, 4
		test	eax, eax
		jg	short loc_1001B43B
		lea	ebp, [esi-3]
		jmp	loc_1001B5EE
; ---------------------------------------------------------------------------

loc_1001B43B:				; CODE XREF: sub_1001AE40+5F1j
		mov	ebx, [esp+0C0h+var_B0]
		mov	ecx, [ebx]
		push	eax
		lea	eax, [ebx+14h]
		push	eax
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+18h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001B45E
		lea	ebp, [eax-2]
		jmp	loc_1001B5EE
; ---------------------------------------------------------------------------

loc_1001B45E:				; CODE XREF: sub_1001AE40+614j
		mov	edx, [ebx+1Ch]
		push	edx
		push	eax
		lea	eax, [esp+0C8h+var_40]
		push	eax
		call	sub_10029ED0
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	loc_1001B5EE
		jmp	short loc_1001B4D5
; ---------------------------------------------------------------------------

loc_1001B47F:				; CODE XREF: sub_1001AE40+55Fj
		mov	edi, [esp+0C0h+var_B0]
		mov	ecx, [edi]
		push	1
		push	ecx
		call	PORT_ArenaZAlloc_Util
		add	esp, 8
		mov	[edi+18h], eax
		test	eax, eax
		jz	loc_1001B5EE
		mov	edx, edi
		mov	dword ptr [edx+1Ch], 1
		mov	edx, [esp+0C0h+var_AC]
		mov	byte ptr [eax],	1
		push	1
		lea	eax, [esp+0C4h+var_7C]
		push	eax
		lea	ecx, [esp+0C8h+var_5C]
		push	ecx
		push	edx
		lea	edx, [esp+0D0h+var_30]
		mov	ecx, ebx
		call	sub_1001AB80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	loc_1001B5EE
		mov	ebx, edi

loc_1001B4D5:				; CODE XREF: sub_1001AE40+63Dj
		lea	eax, [esp+0C0h+var_5C]
		push	eax
		call	sub_10029E60
		add	esp, 4
		test	eax, eax
		jg	short loc_1001B4F0
		mov	ebp, 0FFFFFFFDh
		jmp	loc_1001B5EE
; ---------------------------------------------------------------------------

loc_1001B4F0:				; CODE XREF: sub_1001AE40+6A4j
		mov	edi, [esp+0C0h+var_60]
		mov	edx, [edi]
		push	eax
		lea	ecx, [edi+4]
		push	ecx
		push	edx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+8]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001B513
		lea	ebp, [eax-2]
		jmp	loc_1001B5EE
; ---------------------------------------------------------------------------

loc_1001B513:				; CODE XREF: sub_1001AE40+6C9j
		mov	ecx, [edi+0Ch]
		push	ecx
		push	eax
		lea	edx, [esp+0C8h+var_5C]
		push	edx
		call	sub_10029ED0
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	loc_1001B5EE
		lea	eax, [esp+0C0h+var_7C]
		push	eax
		call	sub_10029E60
		add	esp, 4
		test	eax, eax
		jg	short loc_1001B54A
		mov	ebp, 0FFFFFFFDh
		jmp	loc_1001B5EE
; ---------------------------------------------------------------------------

loc_1001B54A:				; CODE XREF: sub_1001AE40+6FEj
		mov	edx, [edi]
		push	eax
		lea	ecx, [edi+10h]
		push	ecx
		push	edx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+14h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001B569
		lea	ebp, [eax-2]
		jmp	loc_1001B5EE
; ---------------------------------------------------------------------------

loc_1001B569:				; CODE XREF: sub_1001AE40+71Fj
		mov	ecx, [edi+18h]
		push	ecx
		push	eax
		lea	edx, [esp+0C8h+var_7C]
		push	edx
		call	sub_10029ED0
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	short loc_1001B5EE
		lea	eax, [esp+0C0h+var_30]
		push	eax
		call	sub_10029E60
		add	esp, 4
		test	eax, eax
		jg	short loc_1001B59C
		mov	ebp, 0FFFFFFFDh
		jmp	short loc_1001B5EE
; ---------------------------------------------------------------------------

loc_1001B59C:				; CODE XREF: sub_1001AE40+753j
		mov	edx, [edi]
		push	eax
		lea	ecx, [edi+1Ch]
		push	ecx
		push	edx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+20h]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001B5B8
		lea	ebp, [eax-2]
		jmp	short loc_1001B5EE
; ---------------------------------------------------------------------------

loc_1001B5B8:				; CODE XREF: sub_1001AE40+771j
		mov	ecx, [edi+24h]
		push	ecx
		push	eax
		lea	edx, [esp+0C8h+var_30]
		push	edx
		call	sub_10029ED0
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	short loc_1001B5EE
		mov	eax, [esp+0C0h+var_A8]
		mov	ecx, [esp+0C0h+arg_10]
		mov	edx, [esp+0C0h+arg_14]
		mov	[ebx+4], eax
		mov	[ecx], edi
		xor	ebp, ebp
		mov	[edx], ebx

loc_1001B5EE:				; CODE XREF: sub_1001AE40+17Bj
					; sub_1001AE40+192j ...
		mov	eax, [esp+0C0h+var_84]
		test	eax, eax
		jz	short loc_1001B5FF
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_1001B5FF:				; CODE XREF: sub_1001AE40+7B4j
		mov	eax, [esp+0C0h+var_68]
		test	eax, eax
		jz	short loc_1001B610
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_1001B610:				; CODE XREF: sub_1001AE40+7C5j
		lea	eax, [esp+0C0h+var_5C]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0C4h+var_7C]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0C8h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0CCh+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0D0h+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0D4h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 18h
		test	ebp, ebp
		jz	short loc_1001B6B6
		cmp	ebp, 0FFFFFFFCh
		jz	short loc_1001B6A4
		cmp	ebp, 0FFFFFFFDh
		jz	short loc_1001B692
		cmp	ebp, 0FFFFFFFEh
		jz	short loc_1001B680
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001B6BA
; ---------------------------------------------------------------------------

loc_1001B680:				; CODE XREF: sub_1001AE40+82Cj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001B6BA
; ---------------------------------------------------------------------------

loc_1001B692:				; CODE XREF: sub_1001AE40+827j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001B6BA
; ---------------------------------------------------------------------------

loc_1001B6A4:				; CODE XREF: sub_1001AE40+822j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001B6BA
; ---------------------------------------------------------------------------

loc_1001B6B6:				; CODE XREF: sub_1001AE40+81Dj
		test	esi, esi
		jz	short loc_1001B6D9

loc_1001B6BA:				; CODE XREF: sub_1001AE40+83Ej
					; sub_1001AE40+850j ...
		mov	eax, [esp+0C0h+var_60]
		mov	ecx, [eax]
		push	1
		push	ecx
		call	PORT_FreeArena_Util
		mov	edx, [esp+0C8h+var_B0]
		mov	eax, [edx]
		push	1
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 10h

loc_1001B6D9:				; CODE XREF: sub_1001AE40+878j
		cmp	[esp+0C0h+var_48], 0
		jz	short loc_1001B6EF
		lea	ecx, [esp+0C0h+var_4C]
		push	0
		push	ecx
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001B6EF:				; CODE XREF: sub_1001AE40+89Ej
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, esi
		pop	esi
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001B6FC:				; CODE XREF: sub_1001AE40+52j
					; sub_1001AE40+5Fj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0B0h
		retn
sub_1001AE40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001B720	proc near		; DATA XREF: .rdata:100392BCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		cmp	eax, 8
		ja	short loc_1001B758
		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short loc_1001B758
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	short loc_1001B758
		push	ecx
		add	eax, 8
		shl	eax, 6
		push	edx
		mov	ecx, eax
		shr	ecx, 3
		push	ecx
		push	0
		push	0A0h
		push	eax
		call	sub_1001AE40
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1001B758:				; CODE XREF: sub_1001B720+7j
					; sub_1001B720+Fj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
sub_1001B720	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001B770	proc near		; DATA XREF: .rdata:100392C0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_0]
		cmp	edx, 8
		ja	short loc_1001B7A7
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	short loc_1001B7A7
		mov	eax, [esp+arg_C]
		test	eax, eax
		jz	short loc_1001B7A7
		push	eax
		mov	eax, [esp+4+arg_4]
		push	ecx
		push	eax
		push	0
		add	edx, 8
		shl	edx, 6
		push	0A0h
		push	edx
		call	sub_1001AE40
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1001B7A7:				; CODE XREF: sub_1001B770+7j
					; sub_1001B770+Fj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
sub_1001B770	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001B7C0	proc near		; DATA XREF: .rdata:1003949Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_4]
		push	edi
		mov	edi, [esp+4+arg_0]
		test	eax, eax
		jnz	short loc_1001B80D
		push	esi
		xor	esi, esi
		cmp	edi, 400h
		jz	short loc_1001B805
		cmp	edi, 800h
		jz	short loc_1001B7FE
		cmp	edi, 0C00h
		jz	short loc_1001B7F7
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001B80A
; ---------------------------------------------------------------------------

loc_1001B7F7:				; CODE XREF: sub_1001B7C0+26j
		mov	esi, 100h
		jmp	short loc_1001B80A
; ---------------------------------------------------------------------------

loc_1001B7FE:				; CODE XREF: sub_1001B7C0+1Ej
		mov	esi, 0E0h
		jmp	short loc_1001B80A
; ---------------------------------------------------------------------------

loc_1001B805:				; CODE XREF: sub_1001B7C0+16j
		mov	esi, 0A0h

loc_1001B80A:				; CODE XREF: sub_1001B7C0+35j
					; sub_1001B7C0+3Cj ...
		mov	eax, esi
		pop	esi

loc_1001B80D:				; CODE XREF: sub_1001B7C0+Bj
		mov	ecx, [esp+4+arg_8]
		test	ecx, ecx
		jnz	short loc_1001B81A
		mov	ecx, eax
		shr	ecx, 3

loc_1001B81A:				; CODE XREF: sub_1001B7C0+53j
		cmp	edi, 400h
		jz	short loc_1001B847
		cmp	edi, 800h
		jz	short loc_1001B839
		cmp	edi, 0C00h
		jnz	short loc_1001B84E
		cmp	eax, 100h
		jmp	short loc_1001B84C
; ---------------------------------------------------------------------------

loc_1001B839:				; CODE XREF: sub_1001B7C0+68j
		cmp	eax, 0E0h
		jz	short loc_1001B860
		cmp	eax, 100h
		jmp	short loc_1001B84C
; ---------------------------------------------------------------------------

loc_1001B847:				; CODE XREF: sub_1001B7C0+60j
		cmp	eax, 0A0h

loc_1001B84C:				; CODE XREF: sub_1001B7C0+77j
					; sub_1001B7C0+85j
		jz	short loc_1001B860

loc_1001B84E:				; CODE XREF: sub_1001B7C0+70j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1001B860:				; CODE XREF: sub_1001B7C0+7Ej
					; sub_1001B7C0:loc_1001B84Cj
		mov	edx, [esp+4+arg_10]
		push	edx
		mov	edx, [esp+8+arg_C]
		push	edx
		push	ecx
		push	2
		push	eax
		push	edi
		call	sub_1001AE40
		add	esp, 18h
		pop	edi
		retn
sub_1001B7C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001B880	proc near		; DATA XREF: .rdata:100392C4o

var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= byte ptr -0C0h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= byte ptr -0A8h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= byte ptr -94h
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0D0h
		push	ebx
		xor	ebx, ebx
		push	esi
		mov	esi, [esp+0D8h+arg_0]
		push	edi
		mov	[esp+0DCh+var_CC], ebx
		mov	[esp+0DCh+var_84], ebx
		mov	[esp+0DCh+var_80], ebx
		mov	[esp+0DCh+var_7C], ebx
		cmp	esi, ebx
		jz	loc_1001C18E
		mov	edi, [esp+0DCh+arg_4]
		cmp	edi, ebx
		jz	loc_1001C18E
		cmp	[esp+0DCh+arg_8], ebx
		jz	loc_1001C18E
		cmp	[esi+0Ch], ebx
		jz	loc_1001C18E
		cmp	[esi+18h], ebx
		jz	loc_1001C18E
		cmp	[edi+10h], ebx
		jz	loc_1001C18E
		cmp	[esi+24h], ebx
		jnz	short loc_1001B8F0
		cmp	dword ptr [edi+4], 0FFFFFFFFh
		jz	loc_1001C18E

loc_1001B8F0:				; CODE XREF: sub_1001B880+64j
		lea	eax, [esp+0DCh+var_20]
		push	ebp
		push	eax
		mov	[esp+0E4h+var_14], ebx
		mov	[esp+0E4h+var_B4], ebx
		mov	[esp+0E4h+var_9C], ebx
		mov	[esp+0E4h+var_88], ebx
		mov	[esp+0E4h+var_34], ebx
		mov	[esp+0E4h+var_24], ebx
		mov	[esp+0E4h+var_44], ebx
		mov	[esp+0E4h+var_4], ebx
		mov	[esp+0E4h+var_54], ebx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jl	loc_1001C0BD
		lea	ecx, [esp+0E0h+var_C0]
		push	ecx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jl	loc_1001C0BD
		lea	edx, [esp+0E0h+var_A8]
		push	edx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jl	loc_1001C0BD
		lea	eax, [esp+0E0h+var_94]
		push	eax
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jl	loc_1001C0BD
		lea	ecx, [esp+0E0h+var_40]
		push	ecx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jl	loc_1001C0BD
		lea	edx, [esp+0E0h+var_30]
		push	edx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jl	loc_1001C0BD
		lea	eax, [esp+0E0h+var_50]
		push	eax
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jl	loc_1001C0BD
		lea	ecx, [esp+0E0h+var_10]
		push	ecx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jl	loc_1001C0BD
		lea	edx, [esp+0E0h+var_60]
		push	edx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, ebx
		jl	loc_1001C0BD
		mov	eax, [esp+0E0h+arg_8]
		mov	[eax], ebx
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		push	ecx
		push	edx
		lea	eax, [esp+0E8h+var_C0]
		push	eax
		call	sub_10029D30
		mov	ebp, eax
		add	esp, 0Ch
		cmp	ebp, ebx
		jl	loc_1001C0BD
		mov	ecx, [esi+18h]
		mov	edx, [esi+14h]
		push	ecx
		push	edx
		lea	eax, [esp+0E8h+var_A8]
		push	eax
		call	sub_10029D30
		mov	ebp, eax
		add	esp, 0Ch
		cmp	ebp, ebx
		jl	loc_1001C0BD
		mov	eax, [esi+24h]
		cmp	eax, ebx
		jz	short loc_1001BA72
		mov	ecx, [esi+20h]
		push	eax
		push	ecx
		lea	edx, [esp+0E8h+var_94]
		push	edx
		call	sub_10029D30
		mov	ebp, eax
		add	esp, 0Ch
		cmp	ebp, ebx
		jl	loc_1001C0BD

loc_1001BA72:				; CODE XREF: sub_1001B880+1D4j
		lea	eax, [esp+0E0h+var_A8]
		push	eax
		call	sub_10028CE0
		lea	ecx, [esp+0E4h+var_C0]
		push	ecx
		mov	[esp+0E8h+var_C8], eax
		call	sub_10028CE0
		mov	ebx, eax
		add	esp, 8
		mov	[esp+0E0h+var_B0], ebx
		cmp	ebx, 400h
		jnb	short loc_1001BAE5
		cmp	[esp+0E0h+var_C8], 0A0h
		jnz	loc_1001C0B0
		lea	eax, [ebx-200h]
		cmp	eax, 200h
		ja	loc_1001BB8C
		test	bl, 3Fh
		jnz	loc_1001BB8C
		lea	eax, [ebx-200h]
		cdq
		and	edx, 3Fh
		add	eax, edx
		sar	eax, 6
		cmp	eax, 8
		ja	loc_1001BB8C
		mov	[esp+0E0h+var_D0], 1000h
		jmp	short loc_1001BB03
; ---------------------------------------------------------------------------

loc_1001BAE5:				; CODE XREF: sub_1001B880+219j
		mov	ecx, [esp+0E0h+var_C8]
		mov	eax, ebx
		call	sub_10018EE0
		test	eax, eax
		jnz	loc_1001C0B0
		lea	eax, ds:0[ebx*4]
		mov	[esp+0E0h+var_D0], eax

loc_1001BB03:				; CODE XREF: sub_1001B880+263j
		cmp	dword ptr [esi+24h], 0
		jz	short loc_1001BB31
		lea	ecx, [esp+0E0h+var_C0]
		push	ecx
		lea	edx, [esp+0E4h+var_94]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		js	short loc_1001BB31

loc_1001BB1F:				; CODE XREF: sub_1001B880+7ADj
					; sub_1001B880+7C7j
		mov	eax, [esp+0E0h+arg_8]
		mov	dword ptr [eax], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BB31:				; CODE XREF: sub_1001B880+287j
					; sub_1001B880+29Dj
		lea	ecx, [esp+0E0h+var_10]
		push	ecx
		lea	edx, [esp+0E4h+var_A8]
		push	edx
		lea	eax, [esp+0E8h+var_C0]
		push	eax
		call	sub_1002C150
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	loc_1001C0BD
		lea	ecx, [esp+0E0h+var_10]
		push	1
		push	ecx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jnz	loc_1001C0B0
		mov	esi, [esp+0E0h+var_C8]
		push	esi
		push	ebx
		call	sub_10018EB0
		push	eax
		lea	eax, [esp+0ECh+var_A8]
		push	eax
		call	sub_100262E0
		add	esp, 10h
		test	eax, eax
		jz	short loc_1001BB9E

loc_1001BB8C:				; CODE XREF: sub_1001B880+234j
					; sub_1001B880+23Dj ...
		mov	ecx, [esp+0E0h+arg_8]
		mov	dword ptr [ecx], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BB9E:				; CODE XREF: sub_1001B880+30Aj
		push	esi
		push	ebx
		call	sub_10018EB0
		push	eax
		lea	edx, [esp+0ECh+var_C0]
		push	edx
		call	sub_100262E0
		add	esp, 10h
		test	eax, eax
		jz	short loc_1001BBC9
		mov	eax, [esp+0E0h+arg_8]
		mov	dword ptr [eax], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BBC9:				; CODE XREF: sub_1001B880+335j
		mov	eax, [edi+4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001BBE9
		cmp	eax, [esp+0E0h+var_D0]
		jb	short loc_1001BBE9
		mov	ecx, [esp+0E0h+arg_8]
		mov	dword ptr [ecx], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BBE9:				; CODE XREF: sub_1001B880+34Fj
					; sub_1001B880+355j
		mov	esi, [edi+10h]
		add	esi, esi
		add	esi, esi
		add	esi, esi
		cmp	esi, [esp+0E0h+var_C8]
		jb	loc_1001C0B0
		mov	eax, [esp+0E0h+var_D0]
		shr	eax, 1
		cmp	esi, eax
		jnb	loc_1001C0B0
		lea	edx, [esp+0E0h+var_D0]
		push	edx
		lea	ecx, [esp+0E4h+var_C4]
		push	ecx
		lea	edx, [esp+0E8h+var_AC]
		push	edx
		mov	edx, [esp+0ECh+var_C8]
		lea	ecx, [esp+0ECh+var_A8]
		push	ecx
		lea	eax, [edi+8]
		push	eax
		mov	[esp+0F4h+var_98], eax
		mov	eax, [esp+0F4h+var_B0]
		push	edx
		lea	ebx, [esp+0F8h+var_30]
		mov	ecx, esi
		call	sub_1001A280
		add	esp, 18h
		test	eax, eax
		jz	short loc_1001BC56
		mov	eax, [esp+0E0h+arg_8]
		mov	dword ptr [eax], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BC56:				; CODE XREF: sub_1001B880+3C2j
		lea	ecx, [esp+0E0h+var_30]
		push	ecx
		lea	edx, [esp+0E4h+var_A8]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001BC81
		mov	eax, [esp+0E0h+arg_8]
		mov	dword ptr [eax], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BC81:				; CODE XREF: sub_1001B880+3EDj
		mov	eax, [esp+0E0h+var_D0]
		mov	ebx, [esp+0E0h+var_C4]
		cmp	eax, 2
		jnz	loc_1001BDF1
		mov	esi, [edi+10h]
		mov	ecx, [esp+0E0h+var_AC]
		xor	eax, eax
		mov	[esp+0E0h+var_6C], eax
		mov	[esp+0E0h+var_68], eax
		mov	[esp+0E0h+var_64], eax
		mov	[esp+0E0h+var_78], eax
		mov	[esp+0E0h+var_74], eax
		mov	[esp+0E0h+var_70], eax
		mov	[esp+0E0h+var_C4], eax
		mov	eax, 0AAAAAAABh
		mul	esi
		shr	edx, 1
		cmp	ecx, esi
		jb	short loc_1001BCD6
		mov	ecx, [esp+0E0h+arg_8]
		mov	dword ptr [ecx], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BCD6:				; CODE XREF: sub_1001B880+442j
		mov	esi, [esp+0E0h+var_C8]
		lea	eax, ds:0[edx*8]
		dec	esi
		cmp	eax, esi
		ja	short loc_1001BCF8
		mov	ecx, [esp+0E0h+arg_8]
		mov	dword ptr [ecx], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BCF8:				; CODE XREF: sub_1001B880+464j
		mov	eax, [edi+10h]
		lea	esi, [edx+ecx]
		cmp	esi, eax
		jnb	loc_1001C0B0
		mov	esi, [edi+0Ch]
		mov	edi, esi
		sub	edi, ecx
		add	edi, eax
		sub	eax, edx
		sub	eax, ecx
		mov	[esp+0E0h+var_64], ecx
		mov	[esp+0E0h+var_70], eax
		add	esi, edx
		lea	eax, [esp+0E0h+var_C4]
		push	eax
		mov	[esp+0E4h+var_74], esi
		mov	esi, [esp+0E4h+var_B0]
		lea	ecx, [esp+0E4h+var_84]
		push	ecx
		lea	edx, [esp+0E8h+var_20]
		push	edx
		lea	ecx, [esi+1]
		lea	eax, [esp+0ECh+var_6C]
		shr	ecx, 1
		push	eax
		inc	ecx
		push	ecx
		push	ebx
		mov	[esp+0F8h+var_68], edi
		call	sub_10019EE0
		add	esp, 18h
		mov	[esp+0E0h+var_CC], eax
		test	eax, eax
		jnz	loc_1001C0BD
		lea	edx, [esp+0E0h+var_C4]
		push	edx
		lea	eax, [esp+0E4h+var_84]
		push	eax
		lea	ecx, [esp+0E8h+var_40]
		push	ecx
		lea	edx, [esp+0ECh+var_30]
		push	edx
		lea	eax, [esp+0F0h+var_20]
		push	eax
		push	esi
		push	ebx
		call	sub_10019790
		add	esp, 1Ch
		mov	[esp+0E0h+var_CC], eax
		test	eax, eax
		jnz	loc_1001C0BD
		lea	ecx, [esp+0E0h+var_40]
		push	ecx
		lea	edx, [esp+0E4h+var_C0]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001BDC5
		mov	eax, [esp+0E0h+arg_8]
		mov	dword ptr [eax], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BDC5:				; CODE XREF: sub_1001B880+531j
		lea	ecx, [esp+0E0h+var_84]
		push	ecx
		lea	edx, [esp+0E4h+var_78]
		push	edx
		call	SECITEM_CompareItem_Util
		add	esp, 8
		test	eax, eax
		jz	loc_1001BE91
		mov	eax, [esp+0E0h+arg_8]
		mov	dword ptr [eax], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BDF1:				; CODE XREF: sub_1001B880+40Cj
		cmp	dword ptr [edi+4], 0FFFFFFFFh
		jnz	short loc_1001BE11
		test	eax, eax
		jnz	loc_1001BE98
		mov	ecx, [esp+0E0h+arg_8]
		mov	dword ptr [ecx], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BE11:				; CODE XREF: sub_1001B880+575j
		push	ebx
		call	sub_10008790
		add	esp, 4
		test	eax, eax
		jz	short loc_1001BE20
		mov	eax, [eax]

loc_1001BE20:				; CODE XREF: sub_1001B880+59Cj
		mov	ecx, [esp+0E0h+var_B0]
		lea	edi, ds:0[eax*8]
		xor	edx, edx
		lea	eax, [ecx-1]
		div	edi
		mov	edi, [esp+0E0h+arg_4]
		mov	edx, [esp+0E0h+var_D0]
		inc	eax
		imul	eax, [edi+4]
		neg	edx
		sbb	edx, edx
		add	edx, 2
		add	eax, edx
		mov	edx, [esp+0E0h+var_98]
		push	edx
		push	esi
		push	eax
		push	ecx
		push	ebx
		lea	edx, [esp+0F4h+var_40]
		lea	ecx, [esp+0F4h+var_A8]
		call	sub_1001A570
		add	esp, 14h
		mov	[esp+0E0h+var_CC], eax
		test	eax, eax
		jnz	loc_1001C0BD
		lea	eax, [esp+0E0h+var_40]
		push	eax
		lea	ecx, [esp+0E4h+var_C0]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001BE98
		jmp	loc_1001C0B0
; ---------------------------------------------------------------------------

loc_1001BE91:				; CODE XREF: sub_1001B880+559j
		mov	edi, [esp+0E0h+arg_4]

loc_1001BE98:				; CODE XREF: sub_1001B880+579j
					; sub_1001B880+60Aj
		mov	eax, [esp+0E0h+arg_0]
		cmp	dword ptr [eax+24h], 0
		jz	loc_1001C0BD
		push	0
		lea	ecx, [esp+0E4h+var_C0]
		push	0
		push	ecx
		call	sub_10028B90
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	loc_1001C0BD
		lea	edx, [esp+0E0h+var_94]
		push	2
		push	edx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jle	loc_1001BB8C
		lea	eax, [esp+0E0h+var_C0]
		push	eax
		lea	ecx, [esp+0E4h+var_94]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_1001BB8C
		push	1
		lea	edx, [esp+0E4h+var_C0]
		push	0
		push	edx
		call	sub_10028B90
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	loc_1001C0BD
		lea	eax, [esp+0E0h+var_60]
		push	eax
		lea	ecx, [esp+0E4h+var_C0]
		push	ecx
		lea	edx, [esp+0E8h+var_A8]
		push	edx
		lea	eax, [esp+0ECh+var_94]
		push	eax
		call	sub_100288A0
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		js	loc_1001C0BD
		lea	ecx, [esp+0E0h+var_60]
		push	1
		push	ecx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jnz	loc_1001C0B0
		mov	eax, [edi+1Ch]
		test	eax, eax
		jnz	short loc_1001BF76
		cmp	[esp+0E0h+var_D0], eax
		jz	loc_1001C0BD
		mov	eax, [esp+0E0h+arg_8]
		mov	dword ptr [eax], 0FFFFFFFEh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BF76:				; CODE XREF: sub_1001B880+6D8j
		cmp	eax, 1
		jnz	short loc_1001BFE2
		cmp	[esp+0E0h+var_D0], 0
		jz	short loc_1001BFE2
		mov	ecx, [edi+18h]
		movzx	edx, byte ptr [ecx]
		push	edx
		lea	eax, [esp+0E4h+var_A8]
		push	eax
		lea	ecx, [esp+0E8h+var_C0]
		push	ecx
		mov	ecx, [esp+0ECh+var_98]
		push	ebx
		lea	edx, [esp+0F0h+var_50]
		call	sub_1001AB80
		add	esp, 10h
		mov	[esp+0E0h+var_CC], eax
		test	eax, eax
		jnz	loc_1001C0BD
		lea	edx, [esp+0E0h+var_50]
		push	edx
		lea	eax, [esp+0E4h+var_94]
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	loc_1001C0BD
		mov	ecx, [esp+0E0h+arg_8]
		mov	dword ptr [ecx], 0FFFFFFFFh
		jmp	loc_1001C0BD
; ---------------------------------------------------------------------------

loc_1001BFE2:				; CODE XREF: sub_1001B880+6F9j
					; sub_1001B880+700j
		mov	edx, [edi+18h]
		push	eax
		push	edx
		lea	eax, [esp+0E8h+var_60]
		push	eax
		call	sub_10029D30
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	loc_1001C0BD
		push	0
		lea	ecx, [esp+0E4h+var_C0]
		push	0
		push	ecx
		call	sub_10028B90
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	loc_1001C0BD
		lea	edx, [esp+0E0h+var_94]
		push	2
		push	edx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jle	loc_1001BB1F
		lea	eax, [esp+0E0h+var_C0]
		push	eax
		lea	ecx, [esp+0E4h+var_94]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	loc_1001BB1F
		push	1
		lea	edx, [esp+0E4h+var_C0]
		push	0
		push	edx
		call	sub_10028B90
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	short loc_1001C0BD
		lea	eax, [esp+0E0h+var_AC]
		push	eax
		lea	ecx, [esp+0E4h+var_50]
		push	ecx
		lea	edx, [esp+0E8h+var_A8]
		push	edx
		lea	edi, [esp+0ECh+var_60]
		lea	ebx, [esp+0ECh+var_C0]
		call	sub_1001A9E0
		add	esp, 0Ch
		mov	[esp+0E0h+var_CC], eax
		test	eax, eax
		jnz	short loc_1001C0BD
		cmp	[esp+0E0h+var_AC], eax
		jz	short loc_1001C0B0
		lea	eax, [esp+0E0h+var_50]
		push	eax
		lea	ecx, [esp+0E4h+var_94]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001C0BD

loc_1001C0B0:				; CODE XREF: sub_1001B880+223j
					; sub_1001B880+272j ...
		mov	edx, [esp+0E0h+arg_8]
		mov	dword ptr [edx], 0FFFFFFFFh

loc_1001C0BD:				; CODE XREF: sub_1001B880+BBj
					; sub_1001B880+D2j ...
		lea	eax, [esp+0E0h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0E4h+var_C0]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0E8h+var_A8]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0ECh+var_94]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0F0h+var_40]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0F4h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0F8h+var_50]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0FCh+var_10]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+100h+var_60]
		push	edx
		call	sub_10028EF0
		add	esp, 24h
		cmp	[esp+0E0h+var_80], 0
		jz	short loc_1001C142
		lea	eax, [esp+0E0h+var_84]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001C142:				; CODE XREF: sub_1001B880+8B1j
		test	ebp, ebp
		jz	short loc_1001C17F
		cmp	ebp, 0FFFFFFFCh
		jz	short loc_1001C16A
		cmp	ebp, 0FFFFFFFDh
		jz	short loc_1001C163
		cmp	ebp, 0FFFFFFFEh
		jz	short loc_1001C15C
		push	0FFFFE001h
		jmp	short loc_1001C16F
; ---------------------------------------------------------------------------

loc_1001C15C:				; CODE XREF: sub_1001B880+8D3j
		push	0FFFFE013h
		jmp	short loc_1001C16F
; ---------------------------------------------------------------------------

loc_1001C163:				; CODE XREF: sub_1001B880+8CEj
		push	0FFFFE002h
		jmp	short loc_1001C16F
; ---------------------------------------------------------------------------

loc_1001C16A:				; CODE XREF: sub_1001B880+8C9j
		push	0FFFFE005h

loc_1001C16F:				; CODE XREF: sub_1001B880+8DAj
					; sub_1001B880+8E1j ...
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+0E0h+var_CC], 0FFFFFFFFh

loc_1001C17F:				; CODE XREF: sub_1001B880+8C4j
		mov	eax, [esp+0E0h+var_CC]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		retn
; ---------------------------------------------------------------------------

loc_1001C18E:				; CODE XREF: sub_1001B880+24j
					; sub_1001B880+33j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0D0h
		retn
sub_1001B880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C1B0	proc near		; DATA XREF: .rdata:10039414o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1001C1F4
		mov	eax, [esi]
		push	0
		test	eax, eax
		jz	short loc_1001C1CC
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001C1CC:				; CODE XREF: sub_1001C1B0+Fj
		lea	eax, [esi+4]
		push	eax
		call	SECITEM_FreeItem_Util
		lea	ecx, [esi+10h]
		push	0
		push	ecx
		call	SECITEM_FreeItem_Util
		lea	edx, [esi+1Ch]
		push	0
		push	edx
		call	SECITEM_FreeItem_Util
		push	esi
		call	PORT_Free_Util
		add	esp, 1Ch

loc_1001C1F4:				; CODE XREF: sub_1001C1B0+7j
		pop	esi
		retn
sub_1001C1B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C200	proc near		; DATA XREF: .rdata:10039418o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1001C239
		mov	eax, [esi]
		push	0
		test	eax, eax
		jz	short loc_1001C21C
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001C21C:				; CODE XREF: sub_1001C200+Fj
		lea	eax, [esi+8]
		push	eax
		call	SECITEM_FreeItem_Util
		lea	ecx, [esi+14h]
		push	0
		push	ecx
		call	SECITEM_FreeItem_Util
		push	esi
		call	PORT_Free_Util
		add	esp, 14h

loc_1001C239:				; CODE XREF: sub_1001C200+7j
		pop	esi
		retn
sub_1001C200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C240	proc near		; CODE XREF: sub_1001C390+15p
					; sub_1001C3D0+77p

var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Dst		= dword	ptr  0Ch

		sub	esp, 30h
		push	esi
		push	edi
		xor	edi, edi
		lea	eax, [esp+38h+var_30]
		push	eax
		mov	[esp+3Ch+var_24], edi
		mov	[esp+3Ch+var_14], edi
		mov	[esp+3Ch+var_4], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001C2F7
		lea	ecx, [esp+38h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	short loc_1001C2F7
		lea	edx, [esp+38h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	short loc_1001C2F7
		mov	ecx, [esp+38h+arg_0]
		lea	eax, [ebx+ebx]
		push	eax
		push	ecx
		lea	edx, [esp+40h+var_30]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_1001C2F7
		mov	eax, [esp+38h+arg_4]
		push	ebx
		push	eax
		lea	ecx, [esp+40h+var_20]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_1001C2F7
		lea	edx, [esp+38h+var_10]
		push	edx
		lea	eax, [esp+3Ch+var_20]
		push	eax
		lea	ecx, [esp+40h+var_30]
		push	ecx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_1001C2F7
		mov	edx, [esp+38h+Dst]
		push	ebx		; int
		push	edx		; Dst
		lea	eax, [esp+40h+var_10]
		push	eax		; int
		call	sub_10029F70
		add	esp, 0Ch
		mov	esi, eax

loc_1001C2F7:				; CODE XREF: sub_1001C240+24j
					; sub_1001C240+3Bj ...
		lea	ecx, [esp+38h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+3Ch+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+40h+var_10]
		push	eax
		call	sub_10028EF0
		add	esp, 0Ch
		cmp	esi, edi
		jz	short loc_1001C383
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001C36D
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001C357
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001C341
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001C341:				; CODE XREF: sub_1001C240+E9j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001C357:				; CODE XREF: sub_1001C240+E4j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001C36D:				; CODE XREF: sub_1001C240+DFj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001C383:				; CODE XREF: sub_1001C240+DAj
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 30h
		retn
sub_1001C240	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C390	proc near		; DATA XREF: .rdata:100393F8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	ebx
		push	eax
		push	ecx
		push	edx
		mov	ebx, 14h
		call	sub_1001C240
		add	esp, 0Ch
		pop	ebx
		retn
sub_1001C390	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C3B0	proc near		; DATA XREF: .rdata:10039208o
					; .rdata:1003920Co ...
		push	0FFFFE898h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
sub_1001C3B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C3D0	proc near		; CODE XREF: sub_1001C780+6Ap
					; sub_1001CDA0+5Ep

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [eax+8]
		push	esi
		mov	esi, [eax+4]
		cmp	byte ptr [esi],	0
		jnz	short loc_1001C3E2
		inc	esi
		dec	ebx

loc_1001C3E2:				; CODE XREF: sub_1001C3D0+Ej
		cmp	[esp+14h+arg_8], ebx
		jnb	short loc_1001C3FE
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1001C3F5:				; CODE XREF: sub_1001C3D0+4Bj
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001C3FE:				; CODE XREF: sub_1001C3D0+16j
		lea	eax, [ebx+ebx]
		push	eax
		lea	ecx, [esp+18h+var_C]
		push	ecx
		push	0
		mov	[esp+20h+var_8], 0
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1001C3F5
		mov	eax, [esp+14h+var_4]
		mov	ecx, [esp+14h+var_8]
		mov	edx, [esp+14h+arg_4]
		push	edi
		push	eax
		push	ecx
		mov	[edx], ebx
		call	sub_1000CD60
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1001C451
		mov	edx, [esp+18h+arg_0]
		mov	eax, [esp+18h+var_8]
		push	edx
		push	esi
		push	eax
		call	sub_1001C240
		add	esp, 0Ch
		mov	edi, eax

loc_1001C451:				; CODE XREF: sub_1001C3D0+6Aj
		lea	ecx, [esp+18h+var_C]
		push	0
		push	ecx
		call	SECITEM_FreeItem_Util
		add	esp, 8
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
sub_1001C3D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C470	proc near		; CODE XREF: sub_1001C4C0+286p
					; sub_1001C930+40Bp ...
		cmp	eax, 0FFFFFFFCh
		jz	short loc_1001C4A9
		cmp	eax, 0FFFFFFFDh
		jz	short loc_1001C49B
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1001C48D
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_1001C48D:				; CODE XREF: sub_1001C470+Dj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_1001C49B:				; CODE XREF: sub_1001C470+8j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		retn
; ---------------------------------------------------------------------------

loc_1001C4A9:				; CODE XREF: sub_1001C470+3j
		push	0FFFFE005h
		call	PORT_SetError_Util
		pop	ecx
		retn
sub_1001C470	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C4C0	proc near		; CODE XREF: sub_1001C860+60p
					; sub_1001C8F0+28p

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 40h
		push	ebp
		mov	ebp, [esp+44h+arg_0]
		push	esi
		xor	esi, esi
		cmp	ebp, esi
		jz	loc_1001C760
		cmp	[esp+48h+arg_8], esi
		jz	loc_1001C760
		mov	eax, [esp+48h+arg_4]
		cmp	eax, esi
		jz	loc_1001C760
		cmp	[eax+4], esi
		jz	loc_1001C760
		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		cmp	ebx, esi
		jnz	short loc_1001C51D
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001C51D:				; CODE XREF: sub_1001C4C0+44j
		push	edi
		push	40h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 8
		cmp	edi, esi
		jnz	short loc_1001C54F
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		pop	edi
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001C54F:				; CODE XREF: sub_1001C4C0+6Dj
		mov	[edi], ebx
		lea	eax, [esp+50h+var_30]
		push	eax
		mov	[esp+54h+var_24], esi
		mov	[esp+54h+var_14], esi
		mov	[esp+54h+var_4], esi
		mov	[esp+54h+var_34], esi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C704
		lea	ecx, [esp+50h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C704
		lea	edx, [esp+50h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C704
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001C704
		lea	ecx, [ebp+4]
		push	ecx
		lea	edx, [edi+4]
		push	edx
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001C704
		lea	eax, [ebp+10h]
		push	eax
		lea	ecx, [edi+10h]
		push	ecx
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001C704
		lea	edx, [ebp+1Ch]
		push	edx
		lea	eax, [edi+1Ch]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001C704
		mov	ecx, [ebp+0Ch]
		mov	edx, [ebp+8]
		push	ecx
		push	edx
		lea	eax, [esp+58h+var_30]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001C704
		mov	ecx, [ebp+24h]
		mov	edx, [ebp+20h]
		push	ecx
		push	edx
		lea	eax, [esp+58h+var_20]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001C704
		mov	ebp, [esp+50h+arg_4]
		mov	ecx, [ebp+8]
		mov	edx, [ebp+4]
		push	ecx
		push	edx
		lea	eax, [esp+58h+var_10]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001C704
		mov	ecx, [ebp+8]
		push	ecx
		lea	edx, [edi+34h]
		push	edx
		push	ebx
		call	SECITEM_AllocItem_Util
		mov	eax, [ebp+8]
		mov	ecx, [ebp+4]
		mov	edx, [edi+38h]
		push	eax		; Size
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		lea	eax, [esp+68h+var_40]
		push	eax
		lea	ecx, [esp+6Ch+var_30]
		push	ecx
		lea	edx, [esp+70h+var_10]
		push	edx
		lea	eax, [esp+74h+var_20]
		push	eax
		call	sub_100288A0
		mov	esi, eax
		add	esp, 28h
		test	esi, esi
		js	short loc_1001C704
		lea	ecx, [esp+50h+var_40]
		push	ecx
		call	sub_10029E60
		add	esp, 4
		test	eax, eax
		jg	short loc_1001C6C8
		mov	esi, 0FFFFFFFDh
		jmp	short loc_1001C704
; ---------------------------------------------------------------------------

loc_1001C6C8:				; CODE XREF: sub_1001C4C0+1FFj
		push	eax
		lea	edx, [edi+28h]
		push	edx
		push	ebx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+2Ch]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001C6E2
		lea	esi, [eax-2]
		jmp	short loc_1001C704
; ---------------------------------------------------------------------------

loc_1001C6E2:				; CODE XREF: sub_1001C4C0+21Bj
		mov	ecx, [edi+30h]
		push	ecx
		push	eax
		lea	edx, [esp+58h+var_40]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001C704
		mov	eax, [esp+50h+arg_8]
		xor	esi, esi
		mov	[eax], edi
		xor	edi, edi

loc_1001C704:				; CODE XREF: sub_1001C4C0+B2j
					; sub_1001C4C0+C9j ...
		lea	ecx, [esp+50h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+54h+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+58h+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+5Ch+var_40]
		push	ecx
		call	sub_10028EF0
		add	esp, 10h
		test	edi, edi
		jz	short loc_1001C740
		mov	edx, [edi]
		push	1
		push	edx
		call	PORT_FreeArena_Util
		add	esp, 8

loc_1001C740:				; CODE XREF: sub_1001C4C0+271j
		test	esi, esi
		jz	short loc_1001C756
		mov	eax, esi
		call	sub_1001C470
		pop	edi
		pop	ebx
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001C756:				; CODE XREF: sub_1001C4C0+282j
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_1001C760:				; CODE XREF: sub_1001C4C0+Dj
					; sub_1001C4C0+17j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 40h
		retn
sub_1001C4C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C780	proc near		; CODE XREF: sub_1001C860+26p
					; sub_10024BB0+3BFp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, 0Ah
		test	ebx, ebx
		jz	loc_1001C847
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jz	loc_1001C847
		mov	eax, [ebx+8]
		test	eax, eax
		jz	loc_1001C847
		cmp	byte ptr [ecx],	0
		jnz	short loc_1001C7B7
		cmp	eax, 1
		jz	loc_1001C847

loc_1001C7B7:				; CODE XREF: sub_1001C780+2Cj
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		push	eax
		mov	eax, [esp+10h+arg_0]
		push	edi
		push	eax
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001C7D6
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001C7D6:				; CODE XREF: sub_1001C780+4Dj
		push	esi
		lea	esi, [edi+8]
		lea	ebx, [ebx+0]

loc_1001C7E0:				; CODE XREF: sub_1001C780+97j
		mov	ecx, [esi]
		mov	edx, [edi+4]
		push	ecx
		push	esi
		push	edx
		mov	eax, ebx
		call	sub_1001C3D0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1001C826
		mov	ecx, [esi]
		dec	ecx
		jz	short loc_1001C80B
		mov	edx, [edi+4]
		mov	edi, edi

loc_1001C800:				; CODE XREF: sub_1001C780+89j
		cmp	byte ptr [edx+eax], 0
		jnz	short loc_1001C840
		inc	eax
		cmp	eax, ecx
		jb	short loc_1001C800

loc_1001C80B:				; CODE XREF: sub_1001C780+79j
		mov	ecx, [edi+4]
		cmp	byte ptr [eax+ecx], 1
		ja	short loc_1001C840
		dec	ebp
		test	ebp, ebp
		jg	short loc_1001C7E0
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4

loc_1001C826:				; CODE XREF: sub_1001C780+74j
		cmp	[esp+10h+arg_0], 0
		jz	short loc_1001C838
		push	0
		push	edi
		call	SECITEM_FreeItem_Util
		add	esp, 8

loc_1001C838:				; CODE XREF: sub_1001C780+ABj
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001C840:				; CODE XREF: sub_1001C780+84j
					; sub_1001C780+92j
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001C847:				; CODE XREF: sub_1001C780+Dj
					; sub_1001C780+18j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1001C780	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C860	proc near		; DATA XREF: .rdata:100391B8o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		push	ebx
		call	sub_10019000
		add	esp, 4
		test	eax, eax
		jnz	short loc_1001C8DD
		push	esi
		push	edi
		mov	[esp+18h+var_8], eax
		lea	eax, [esp+18h+var_C]
		push	eax
		lea	edi, [ebx+10h]
		push	edi
		push	0
		call	sub_1001C780
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1001C8CA
		push	edi
		call	sub_10018FE0
		add	esp, 4
		cmp	[esp+18h+var_4], eax
		jz	short loc_1001C8B5
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001C8CA
; ---------------------------------------------------------------------------

loc_1001C8B5:				; CODE XREF: sub_1001C860+41j
		mov	ecx, [esp+18h+arg_4]
		push	ecx
		lea	edx, [esp+1Ch+var_C]
		push	edx
		push	ebx
		call	sub_1001C4C0
		add	esp, 0Ch
		mov	esi, eax

loc_1001C8CA:				; CODE XREF: sub_1001C860+32j
					; sub_1001C860+53j
		lea	eax, [esp+18h+var_C]
		push	0
		push	eax
		call	SECITEM_FreeItem_Util
		add	esp, 8
		pop	edi
		mov	eax, esi
		pop	esi

loc_1001C8DD:				; CODE XREF: sub_1001C860+13j
		pop	ebx
		add	esp, 0Ch
		retn
sub_1001C860	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C8F0	proc near		; DATA XREF: .rdata:100391C4o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		push	esi
		mov	esi, [esp+10h+arg_0]
		lea	ecx, [esi+10h]
		push	ecx
		mov	[esp+14h+var_8], eax
		call	sub_10018FE0
		mov	edx, [esp+14h+arg_8]
		mov	[esp+14h+var_4], eax
		push	edx
		lea	eax, [esp+18h+var_C]
		push	eax
		push	esi
		call	sub_1001C4C0
		add	esp, 10h
		pop	esi
		add	esp, 0Ch
		retn
sub_1001C8F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C930	proc near		; CODE XREF: sub_1001CDA0+AEp
					; sub_1001CEB0+12p

var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_90		= dword	ptr -90h
var_8C		= byte ptr -8Ch
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
Dst		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0A4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0A4h+var_4], eax
		mov	eax, [esp+0A4h+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+0ACh+arg_4]
		push	edi
		xor	ebp, ebp
		mov	edi, edx
		mov	[esp+0B0h+var_A0], eax
		mov	[esp+0B0h+var_58], ecx
		mov	[esp+0B0h+var_A4], ebp
		cmp	edi, ebp
		jz	loc_1001CD77
		cmp	eax, ebp
		jz	loc_1001CD77
		cmp	esi, ebp
		jz	loc_1001CD77
		lea	edx, [edi+10h]
		push	ebx
		push	edx
		call	sub_10018FE0
		mov	ecx, [esp+0B8h+var_A0]
		mov	ebx, eax
		lea	eax, [ebx+ebx]
		add	esp, 4
		mov	[esp+0B4h+var_5C], eax
		cmp	[ecx+8], eax
		jb	loc_1001CD65
		mov	eax, [esi+8]
		cmp	eax, 40h
		ja	loc_1001CD65
		cmp	eax, 14h
		jb	loc_1001CD65
		push	ebx		; Size
		lea	edx, [esp+0B8h+Dst]
		push	ebp		; Val
		push	edx		; Dst
		call	memset
		mov	ecx, [esi+8]
		add	esp, 0Ch
		cmp	ecx, ebx
		jnb	short loc_1001C9D4
		mov	eax, ebx
		sub	eax, ecx
		jmp	short loc_1001C9D6
; ---------------------------------------------------------------------------

loc_1001C9D4:				; CODE XREF: sub_1001C930+9Cj
		xor	eax, eax

loc_1001C9D6:				; CODE XREF: sub_1001C930+A2j
		mov	edx, [esi+4]
		mov	ecx, ebx
		sub	ecx, eax
		push	ecx		; Size
		push	edx		; Src
		lea	eax, [esp+eax+0BCh+Dst]
		push	eax		; Dst
		call	memcpy
		lea	ecx, [esp+0C0h+var_34]
		push	ecx
		mov	[esp+0C4h+var_28], ebp
		mov	[esp+0C4h+var_80], ebp
		mov	[esp+0C4h+var_38], ebp
		mov	[esp+0C4h+var_48], ebp
		mov	[esp+0C4h+var_60], ebp
		mov	[esp+0C4h+var_70], ebp
		mov	[esp+0C4h+var_90], ebp
		call	sub_1002A030
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	edx, [esp+0B4h+var_8C]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	eax, [esp+0B4h+var_44]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	ecx, [esp+0B4h+var_54]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	edx, [esp+0B4h+var_6C]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	eax, [esp+0B4h+var_7C]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	ecx, [esp+0B4h+var_9C]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1001CCAF
		mov	edx, [edi+0Ch]
		mov	eax, [edi+8]
		push	edx
		push	eax
		lea	ecx, [esp+0BCh+var_34]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1001CCAF
		mov	edx, [edi+18h]
		mov	eax, [edi+14h]
		push	edx
		push	eax
		lea	ecx, [esp+0BCh+var_8C]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1001CCAF
		mov	edx, [edi+24h]
		mov	eax, [edi+20h]
		push	edx
		push	eax
		lea	ecx, [esp+0BCh+var_44]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1001CCAF
		mov	edx, [edi+3Ch]
		mov	eax, [edi+38h]
		push	edx
		push	eax
		lea	ecx, [esp+0BCh+var_54]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1001CCAF
		mov	edx, [esp+0B4h+var_58]
		push	ebx
		push	edx
		lea	eax, [esp+0BCh+var_6C]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	ecx, [esp+0B4h+var_7C]
		push	ecx
		lea	edx, [esp+0B8h+var_34]
		push	edx
		lea	eax, [esp+0BCh+var_6C]
		push	eax
		lea	ecx, [esp+0C0h+var_44]
		push	ecx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	edx, [esp+0B4h+var_7C]
		push	edx
		lea	eax, [esp+0B8h+var_8C]
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1001CCAF
		push	ebx
		lea	edx, [esp+0B8h+Dst]
		push	edx
		lea	eax, [esp+0BCh+var_9C]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	ecx, [esp+0B4h+var_6C]
		push	ecx
		lea	edx, [esp+0B8h+var_8C]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002CAC0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	ecx, [esp+0B4h+var_54]
		push	ecx
		lea	edx, [esp+0B8h+var_8C]
		push	edx
		lea	eax, [esp+0BCh+var_7C]
		push	eax
		push	ecx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	edx, [esp+0B4h+var_9C]
		push	edx
		lea	eax, [esp+0B8h+var_8C]
		push	eax
		lea	ecx, [esp+0BCh+var_54]
		push	ecx
		push	edx
		call	sub_1002C3B0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1001CCAF
		lea	eax, [esp+0B4h+var_9C]
		push	eax
		lea	ecx, [esp+0B8h+var_8C]
		push	ecx
		lea	edx, [esp+0BCh+var_6C]
		push	edx
		push	eax
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	short loc_1001CCAF
		lea	ecx, [esp+0B4h+var_7C]
		push	ecx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jz	short loc_1001CC9A
		lea	edx, [esp+0B4h+var_9C]
		push	edx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jz	short loc_1001CC9A
		mov	edi, [esp+0B4h+var_A0]
		mov	eax, [edi+4]
		push	ebx		; int
		push	eax		; Dst
		lea	ecx, [esp+0BCh+var_7C]
		push	ecx		; int
		call	sub_10029F70
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	short loc_1001CCAF
		mov	edx, [edi+4]
		push	ebx		; int
		add	edx, ebx
		push	edx		; Dst
		lea	eax, [esp+0BCh+var_9C]
		push	eax		; int
		call	sub_10029F70
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	short loc_1001CCAF
		mov	ecx, [esp+0B4h+var_5C]
		xor	esi, esi
		mov	[edi+8], ecx
		jmp	short loc_1001CCAF
; ---------------------------------------------------------------------------

loc_1001CC9A:				; CODE XREF: sub_1001C930+316j
					; sub_1001C930+327j
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+0B4h+var_A4], 0FFFFFFFFh

loc_1001CCAF:				; CODE XREF: sub_1001C930+F2j
					; sub_1001C930+109j ...
		xor	eax, eax
		lea	edx, [esp+0B4h+var_34]
		push	edx
		mov	[esp+0B8h+Dst],	eax
		mov	[esp+0B8h+var_20], eax
		mov	[esp+0B8h+var_1C], eax
		mov	[esp+0B8h+var_18], eax
		mov	[esp+0B8h+var_14], eax
		mov	[esp+0B8h+var_10], eax
		mov	[esp+0B8h+var_C], eax
		mov	[esp+0B8h+var_8], eax
		call	sub_10028EF0
		lea	eax, [esp+0B8h+var_8C]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0BCh+var_44]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0C0h+var_54]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0C4h+var_6C]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0C8h+var_7C]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0CCh+var_9C]
		push	edx
		call	sub_10028EF0
		add	esp, 1Ch
		cmp	esi, ebp
		jz	short loc_1001CD48
		mov	eax, esi
		call	sub_1001C470
		mov	[esp+0B4h+var_A4], 0FFFFFFFFh

loc_1001CD48:				; CODE XREF: sub_1001C930+407j
		mov	eax, [esp+0B4h+var_A4]

loc_1001CD4C:				; CODE XREF: sub_1001C930+445j
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		mov	ecx, [esp+0A4h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A4h
		retn
; ---------------------------------------------------------------------------

loc_1001CD65:				; CODE XREF: sub_1001C930+6Aj
					; sub_1001C930+76j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001CD4C
; ---------------------------------------------------------------------------

loc_1001CD77:				; CODE XREF: sub_1001C930+37j
					; sub_1001C930+3Fj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		mov	ecx, [esp+0B4h+var_4]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		or	eax, 0FFFFFFFFh
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A4h
		retn
sub_1001C930	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001CDA0	proc near		; DATA XREF: .rdata:100391BCo

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 34h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		mov	eax, [esp+34h+arg_4]
		mov	ecx, [esp+34h+arg_8]
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+44h+arg_0]
		lea	ebx, [edi+10h]
		push	ebx
		mov	[esp+48h+var_2C], eax
		mov	[esp+48h+var_30], ecx
		mov	ebp, 0Ah
		mov	[esp+48h+var_34], 0
		call	sub_10018FE0
		push	0
		mov	[esp+4Ch+var_28], eax
		call	PORT_SetError_Util
		add	esp, 8
		lea	ebx, [ebx+0]

loc_1001CDF0:				; CODE XREF: sub_1001CDA0+CBj
		push	20h
		lea	edx, [esp+48h+var_34]
		push	edx
		lea	eax, [esp+4Ch+var_24]
		push	eax
		mov	eax, ebx
		call	sub_1001C3D0
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1001CE94
		mov	ecx, [esp+44h+var_34]
		cmp	ecx, [esp+44h+var_28]
		jnz	short loc_1001CE82
		test	ecx, ecx
		jz	short loc_1001CE2C
		lea	esp, [esp+0]

loc_1001CE20:				; CODE XREF: sub_1001CDA0+8Aj
		cmp	[esp+eax+44h+var_24], 0
		jnz	short loc_1001CE3E
		inc	eax
		cmp	eax, ecx
		jb	short loc_1001CE20

loc_1001CE2C:				; CODE XREF: sub_1001CDA0+7Aj
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh
		jmp	short loc_1001CE5C
; ---------------------------------------------------------------------------

loc_1001CE3E:				; CODE XREF: sub_1001CDA0+85j
		mov	ecx, [esp+44h+var_30]
		mov	edx, [esp+44h+var_2C]
		push	ecx
		push	edx
		lea	ecx, [esp+4Ch+var_24]
		mov	edx, edi
		call	sub_1001C930
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1001CE92

loc_1001CE5C:				; CODE XREF: sub_1001CDA0+9Cj
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE03Fh
		jnz	short loc_1001CE92
		dec	ebp
		test	ebp, ebp
		jg	short loc_1001CDF0
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+34h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1001CE82:				; CODE XREF: sub_1001CDA0+76j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	esi, 0FFFFFFFFh

loc_1001CE92:				; CODE XREF: sub_1001CDA0+BAj
					; sub_1001CDA0+C6j
		mov	eax, esi

loc_1001CE94:				; CODE XREF: sub_1001CDA0+68j
		mov	ecx, [esp+44h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
sub_1001CDA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001CEB0	proc near		; DATA XREF: .rdata:100391C8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		push	eax
		push	ecx
		mov	ecx, [esp+8+arg_C]
		call	sub_1001C930
		add	esp, 8
		retn
sub_1001CEB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001CED0	proc near		; CODE XREF: sub_10021570+233p
					; DATA XREF: .rdata:100391C0o

var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= byte ptr -0C8h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= byte ptr -0B4h
var_A8		= dword	ptr -0A8h
var_A4		= byte ptr -0A4h
var_98		= dword	ptr -98h
var_94		= byte ptr -94h
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
Dst		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0D0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0D0h+var_4], eax
		mov	eax, [esp+0D0h+arg_8]
		push	ebx
		push	esi
		mov	esi, [esp+0D8h+arg_4]
		push	edi
		mov	edi, [esp+0DCh+arg_0]
		xor	ebx, ebx
		mov	[esp+0DCh+var_B8], esi
		mov	[esp+0DCh+var_CC], eax
		mov	[esp+0DCh+var_D0], 0FFFFFFFFh
		cmp	edi, ebx
		jz	loc_1001D3E8
		cmp	esi, ebx
		jz	loc_1001D3E8
		cmp	eax, ebx
		jz	loc_1001D3E8
		lea	eax, [edi+10h]
		push	ebp
		push	eax
		call	sub_10018FE0
		mov	ebp, eax
		lea	ecx, [ebp+ebp+0]
		add	esp, 4
		cmp	[esi+8], ecx
		jnz	loc_1001D3D6
		mov	edx, [esp+0E0h+var_CC]
		mov	esi, [edx+8]
		cmp	esi, 40h
		ja	loc_1001D3D6
		cmp	esi, 14h
		jb	loc_1001D3D6
		push	ebp		; Size
		lea	eax, [esp+0E4h+Dst]
		push	ebx		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		cmp	esi, ebp
		jnb	short loc_1001CF77
		mov	eax, ebp
		sub	eax, esi
		jmp	short loc_1001CF79
; ---------------------------------------------------------------------------

loc_1001CF77:				; CODE XREF: sub_1001CED0+9Fj
		xor	eax, eax

loc_1001CF79:				; CODE XREF: sub_1001CED0+A5j
		mov	edx, [esp+0E0h+var_CC]
		mov	ecx, ebp
		sub	ecx, eax
		push	ecx		; Size
		mov	ecx, [edx+4]
		push	ecx		; Src
		lea	edx, [esp+eax+0E8h+Dst]
		push	edx		; Dst
		call	memcpy
		lea	eax, [esp+0ECh+var_64]
		push	eax
		mov	[esp+0F0h+var_58], ebx
		mov	[esp+0F0h+var_BC], ebx
		mov	[esp+0F0h+var_98], ebx
		mov	[esp+0F0h+var_68], ebx
		mov	[esp+0F0h+var_A8], ebx
		mov	[esp+0F0h+var_48], ebx
		mov	[esp+0F0h+var_88], ebx
		mov	[esp+0F0h+var_28], ebx
		mov	[esp+0F0h+var_78], ebx
		mov	[esp+0F0h+var_38], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	ecx, [esp+0E0h+var_C8]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	edx, [esp+0E0h+var_A4]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	eax, [esp+0E0h+var_74]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	ecx, [esp+0E0h+var_B4]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	edx, [esp+0E0h+var_54]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	eax, [esp+0E0h+var_94]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	ecx, [esp+0E0h+var_34]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	edx, [esp+0E0h+var_84]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	eax, [esp+0E0h+var_44]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D33E
		mov	ecx, [edi+0Ch]
		mov	edx, [edi+8]
		push	ecx
		push	edx
		lea	eax, [esp+0E8h+var_64]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D33E
		mov	ecx, [edi+18h]
		mov	edx, [edi+14h]
		push	ecx
		push	edx
		lea	eax, [esp+0E8h+var_C8]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D33E
		mov	ecx, [edi+24h]
		mov	edx, [edi+20h]
		push	ecx
		push	edx
		lea	eax, [esp+0E8h+var_A4]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D33E
		mov	ecx, [edi+30h]
		mov	edx, [edi+2Ch]
		push	ecx
		push	edx
		lea	eax, [esp+0E8h+var_74]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D33E
		mov	edi, [esp+0E0h+var_B8]
		mov	ecx, [edi+4]
		push	ebp
		push	ecx
		lea	edx, [esp+0E8h+var_B4]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D33E
		mov	eax, [edi+4]
		push	ebp
		add	eax, ebp
		push	eax
		lea	ecx, [esp+0E8h+var_54]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	edx, [esp+0E0h+var_B4]
		push	edx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jle	loc_1001D331
		lea	eax, [esp+0E0h+var_54]
		push	eax
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jle	loc_1001D331
		lea	ecx, [esp+0E0h+var_C8]
		push	ecx
		lea	edx, [esp+0E4h+var_B4]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_1001D331
		lea	eax, [esp+0E0h+var_C8]
		push	eax
		lea	ecx, [esp+0E4h+var_54]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_1001D331
		lea	edx, [esp+0E0h+var_44]
		push	edx
		lea	eax, [esp+0E4h+var_C8]
		push	eax
		lea	ecx, [esp+0E8h+var_54]
		push	ecx
		call	sub_1002CAC0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D33E
		push	ebp
		lea	edx, [esp+0E4h+Dst]
		push	edx
		lea	eax, [esp+0E8h+var_94]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	ecx, [esp+0E0h+var_94]
		push	ecx
		lea	edx, [esp+0E4h+var_C8]
		push	edx
		lea	eax, [esp+0E8h+var_44]
		push	eax
		push	ecx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	edx, [esp+0E0h+var_34]
		push	edx
		lea	eax, [esp+0E4h+var_C8]
		push	eax
		lea	ecx, [esp+0E8h+var_44]
		push	ecx
		lea	edx, [esp+0ECh+var_B4]
		push	edx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	eax, [esp+0E0h+var_A4]
		push	eax
		lea	ecx, [esp+0E4h+var_64]
		push	ecx
		lea	edx, [esp+0E8h+var_94]
		push	edx
		push	eax
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_1001D33E
		lea	ecx, [esp+0E0h+var_74]
		push	ecx
		lea	edx, [esp+0E4h+var_64]
		push	edx
		lea	eax, [esp+0E8h+var_34]
		push	eax
		push	ecx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	short loc_1001D33E
		lea	edx, [esp+0E0h+var_84]
		push	edx
		lea	eax, [esp+0E4h+var_64]
		push	eax
		lea	ecx, [esp+0E8h+var_74]
		push	ecx
		lea	edx, [esp+0ECh+var_A4]
		push	edx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	short loc_1001D33E
		lea	eax, [esp+0E0h+var_84]
		push	eax
		lea	ecx, [esp+0E4h+var_C8]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_1001D33E
		lea	eax, [esp+0E0h+var_B4]
		push	eax
		lea	ecx, [esp+0E4h+var_84]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001D32B
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		mov	[esp+0E4h+var_D0], 0FFFFFFFFh
		jmp	short loc_1001D33B
; ---------------------------------------------------------------------------

loc_1001D32B:				; CODE XREF: sub_1001CED0+445j
		mov	[esp+0E0h+var_D0], ebx
		jmp	short loc_1001D33E
; ---------------------------------------------------------------------------

loc_1001D331:				; CODE XREF: sub_1001CED0+2BBj
					; sub_1001CED0+2D3j ...
		push	0FFFFE00Ah
		call	PORT_SetError_Util

loc_1001D33B:				; CODE XREF: sub_1001CED0+459j
		add	esp, 4

loc_1001D33E:				; CODE XREF: sub_1001CED0+10Ej
					; sub_1001CED0+125j ...
		lea	edx, [esp+0E0h+var_64]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0E4h+var_C8]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0E8h+var_A4]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0ECh+var_74]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0F0h+var_B4]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0F4h+var_54]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0F8h+var_94]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0FCh+var_34]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+100h+var_84]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+104h+var_44]
		push	edx
		call	sub_10028EF0
		add	esp, 28h
		cmp	esi, ebx
		jz	short loc_1001D3B9
		mov	eax, esi
		call	sub_1001C470

loc_1001D3B9:				; CODE XREF: sub_1001CED0+4E0j
		mov	eax, [esp+0E0h+var_D0]

loc_1001D3BD:				; CODE XREF: sub_1001CED0+516j
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+0D0h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D0h
		retn
; ---------------------------------------------------------------------------

loc_1001D3D6:				; CODE XREF: sub_1001CED0+6Cj
					; sub_1001CED0+7Cj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001D3BD
; ---------------------------------------------------------------------------

loc_1001D3E8:				; CODE XREF: sub_1001CED0+40j
					; sub_1001CED0+48j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		mov	ecx, [esp+0E0h+var_4]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		or	eax, 0FFFFFFFFh
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D0h
		retn
sub_1001CED0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1001D410	proc near		; CODE XREF: sub_1001DA90+1E1p
					; sub_1001E2F0+2D3p

var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 54h
		push	ebx
		push	ebp
		mov	ebp, [esp+5Ch+arg_C]
		xor	ebx, ebx
		lea	eax, [esp+5Ch+var_40]
		push	esi
		push	eax
		mov	[esp+64h+var_54], ebx
		mov	[esp+64h+var_34], ebx
		mov	[esp+64h+var_24], ebx
		mov	[esp+64h+var_14], ebx
		mov	[esp+64h+var_4], ebx
		mov	[esp+64h+var_44], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	ecx, [esp+60h+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	edx, [esp+60h+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	eax, [esp+60h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	ecx, [esp+60h+var_50]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001D8CC
		mov	eax, [esp+60h+arg_4]
		mov	ecx, [esp+60h+arg_0]
		lea	edx, [esp+60h+var_40]
		push	edx
		push	eax
		push	ecx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	edx, [esp+60h+var_40]
		push	edx
		call	sub_10028CE0
		add	esp, 4
		cmp	eax, [esp+60h+arg_18]
		jz	short loc_1001D4F5
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+60h+var_54], 0FFFFFFFFh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D4F5:				; CODE XREF: sub_1001D410+C9j
		mov	ecx, [esp+60h+arg_0]
		lea	eax, [esp+60h+var_20]
		push	eax
		push	1
		push	ecx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		mov	eax, [esp+60h+arg_4]
		lea	edx, [esp+60h+var_10]
		push	edx
		push	1
		push	eax
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		cmp	ebp, ebx
		jnz	short loc_1001D53F
		cmp	[esp+60h+arg_14], ebx
		jz	loc_1001D5C1

loc_1001D53F:				; CODE XREF: sub_1001D410+123j
		lea	ecx, [esp+60h+var_30]
		push	ecx
		lea	edx, [esp+64h+var_10]
		push	edx
		lea	eax, [esp+68h+var_20]
		push	eax
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		cmp	ebp, ebx
		jz	short loc_1001D57A
		mov	ecx, [esp+60h+arg_8]
		mov	ebp, [esp+60h+arg_10]
		push	ecx
		lea	edx, [esp+64h+var_30]
		push	edx
		push	ebp
		call	sub_1002CAC0
		jmp	short loc_1001D595
; ---------------------------------------------------------------------------

loc_1001D57A:				; CODE XREF: sub_1001D410+152j
		mov	eax, [esp+60h+arg_10]
		mov	edx, [esp+60h+arg_8]
		push	eax
		lea	ecx, [esp+64h+var_30]
		push	ecx
		push	edx
		call	sub_1002CAC0
		mov	ebp, [esp+6Ch+arg_10]

loc_1001D595:				; CODE XREF: sub_1001D410+168j
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jz	short loc_1001D5C5
		cmp	esi, 0FFFFFFFBh
		jnz	loc_1001D8CC
		push	0FFFFE03Fh
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+60h+var_54], 0FFFFFFFFh
		jmp	loc_1001D8CA
; ---------------------------------------------------------------------------

loc_1001D5C1:				; CODE XREF: sub_1001D410+129j
		mov	ebp, [esp+60h+arg_10]

loc_1001D5C5:				; CODE XREF: sub_1001D410+18Cj
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	ecx, [esp+64h+var_20]
		push	ecx
		push	ebp
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	edx, [esp+60h+var_50]
		push	edx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001D5FD
		mov	esi, 0FFFFFFFDh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D5FD:				; CODE XREF: sub_1001D410+1E1j
		mov	ecx, [edi]
		push	eax
		lea	eax, [edi+4Ch]
		push	eax
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+50h]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001D61E
		mov	esi, 0FFFFFFFEh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D61E:				; CODE XREF: sub_1001D410+202j
		mov	edx, [edi+54h]
		push	edx
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	ecx, [esp+60h+var_50]
		push	ecx
		lea	edx, [esp+64h+var_10]
		push	edx
		push	ebp
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001D672
		mov	esi, 0FFFFFFFDh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D672:				; CODE XREF: sub_1001D410+256j
		mov	edx, [edi]
		push	eax
		lea	ecx, [edi+58h]
		push	ecx
		push	edx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+5Ch]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001D693
		mov	esi, 0FFFFFFFEh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D693:				; CODE XREF: sub_1001D410+277j
		mov	ecx, [edi+60h]
		push	ecx
		push	eax
		lea	edx, [esp+68h+var_50]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		mov	ecx, [esp+60h+arg_0]
		mov	edx, [esp+60h+arg_4]
		lea	eax, [esp+60h+var_50]
		push	eax
		push	ecx
		push	edx
		call	sub_1002CAC0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001D6EB
		mov	esi, 0FFFFFFFDh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D6EB:				; CODE XREF: sub_1001D410+2CFj
		mov	edx, [edi]
		push	eax
		lea	ecx, [edi+64h]
		push	ecx
		push	edx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+68h]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001D70C
		mov	esi, 0FFFFFFFEh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D70C:				; CODE XREF: sub_1001D410+2F0j
		mov	ecx, [edi+6Ch]
		push	ecx
		push	eax
		lea	edx, [esp+68h+var_50]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		lea	eax, [esp+60h+var_40]
		push	eax
		mov	[edi+14h], ebx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001D746
		mov	esi, 0FFFFFFFDh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D746:				; CODE XREF: sub_1001D410+32Aj
		mov	edx, [edi]
		push	eax
		lea	ecx, [edi+10h]
		push	ecx
		push	edx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+14h]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001D767
		mov	esi, 0FFFFFFFEh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D767:				; CODE XREF: sub_1001D410+34Bj
		mov	ecx, [edi+18h]
		push	ecx
		push	eax
		lea	edx, [esp+68h+var_40]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		push	ebp
		mov	[edi+2Ch], ebx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001D79D
		mov	esi, 0FFFFFFFDh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D79D:				; CODE XREF: sub_1001D410+381j
		mov	ecx, [edi]
		push	eax
		lea	eax, [edi+28h]
		push	eax
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+2Ch]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001D7BE
		mov	esi, 0FFFFFFFEh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D7BE:				; CODE XREF: sub_1001D410+3A2j
		mov	edx, [edi+30h]
		push	edx
		push	eax
		push	ebp
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		mov	esi, [esp+60h+arg_8]
		push	esi
		mov	[edi+20h], ebx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001D7F4
		mov	esi, 0FFFFFFFDh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D7F4:				; CODE XREF: sub_1001D410+3D8j
		mov	ecx, [edi]
		push	eax
		lea	eax, [edi+1Ch]
		push	eax
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+20h]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001D815
		mov	esi, 0FFFFFFFEh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D815:				; CODE XREF: sub_1001D410+3F9j
		mov	edx, [edi+24h]
		push	edx
		push	eax
		push	esi
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001D8CC
		mov	esi, [esp+60h+arg_0]
		push	esi
		mov	[edi+38h], ebx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001D84B
		mov	esi, 0FFFFFFFDh
		jmp	loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D84B:				; CODE XREF: sub_1001D410+42Fj
		mov	ecx, [edi]
		push	eax
		lea	eax, [edi+34h]
		push	eax
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+38h]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001D869
		mov	esi, 0FFFFFFFEh
		jmp	short loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D869:				; CODE XREF: sub_1001D410+450j
		mov	edx, [edi+3Ch]
		push	edx
		push	eax
		push	esi
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_1001D8CC
		mov	esi, [esp+60h+arg_4]
		push	esi
		mov	[edi+44h], ebx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, ebx
		jg	short loc_1001D898
		mov	esi, 0FFFFFFFDh
		jmp	short loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D898:				; CODE XREF: sub_1001D410+47Fj
		mov	ecx, [edi]
		push	eax
		lea	eax, [edi+40h]
		push	eax
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+44h]
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	short loc_1001D8B6
		mov	esi, 0FFFFFFFEh
		jmp	short loc_1001D8CC
; ---------------------------------------------------------------------------

loc_1001D8B6:				; CODE XREF: sub_1001D410+49Dj
		mov	edx, [edi+48h]
		push	edx
		push	eax
		push	esi
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_1001D8CC

loc_1001D8CA:				; CODE XREF: sub_1001D410+1ACj
		xor	esi, esi

loc_1001D8CC:				; CODE XREF: sub_1001D410+35j
					; sub_1001D410+4Cj ...
		lea	eax, [esp+60h+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+64h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+68h+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+6Ch+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+70h+var_50]
		push	ecx
		call	sub_10028EF0
		add	esp, 14h
		cmp	esi, ebx
		jz	short loc_1001D970
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001D959
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001D942
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001D92B
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001D92B:				; CODE XREF: sub_1001D410+502j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001D942:				; CODE XREF: sub_1001D410+4FDj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001D959:				; CODE XREF: sub_1001D410+4F8j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001D970:				; CODE XREF: sub_1001D410+4F3j
		mov	eax, [esp+60h+var_54]
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 54h
		retn
sub_1001D410	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001D980	proc near		; CODE XREF: sub_1001DA90+182p
					; sub_1001DA90+191p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 0Ch
		push	ebp
		push	esi
		xor	ebp, ebp
		push	edi
		mov	[esp+18h+var_8], ebp
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1001D9AF
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001D9AF:				; CODE XREF: sub_1001D980+18j
		mov	[esp+14h+var_C], ebp

loc_1001D9B3:				; CODE XREF: sub_1001D980+89j
		push	edi
		push	esi
		call	sub_1000CD60
		add	esp, 8
		mov	[esp+14h+var_4], eax
		test	eax, eax
		jnz	short loc_1001DA0B
		or	byte ptr [esi],	0C0h
		or	byte ptr [esi+edi-1], 1
		push	edi
		push	esi
		push	ebx
		call	sub_10029D30
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		js	short loc_1001DA0B
		lea	eax, [esp+14h+var_8]
		push	eax
		push	0
		lea	ecx, ds:0[edi*8]
		push	ecx
		push	ebx
		call	sub_10026630
		mov	ebp, eax
		add	esp, 10h
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_1001DA0B
		mov	eax, [esp+14h+var_C]
		inc	eax
		mov	[esp+14h+var_C], eax
		cmp	eax, 0Ah
		jl	short loc_1001D9B3

loc_1001DA0B:				; CODE XREF: sub_1001D980+43j
					; sub_1001D980+5Cj ...
		push	edi
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		test	ebp, ebp
		jz	short loc_1001DA80
		cmp	ebp, 0FFFFFFFCh
		jz	short loc_1001DA6A
		cmp	ebp, 0FFFFFFFDh
		jz	short loc_1001DA54
		cmp	ebp, 0FFFFFFFEh
		jz	short loc_1001DA3E
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001DA3E:				; CODE XREF: sub_1001D980+A6j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001DA54:				; CODE XREF: sub_1001D980+A1j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001DA6A:				; CODE XREF: sub_1001D980+9Cj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001DA80:				; CODE XREF: sub_1001D980+97j
		mov	eax, [esp+14h+var_4]
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
sub_1001D980	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001DA90	proc near		; DATA XREF: .rdata:100391ACo

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		sub	esp, 4Ch
		push	ebp
		push	esi
		xor	esi, esi
		cmp	ecx, esi
		jz	loc_1001DD43
		mov	ebp, [esp+54h+arg_0]
		mov	eax, ebp
		and	eax, 8000000Fh
		jns	short loc_1001DAB5
		dec	eax
		or	eax, 0FFFFFFF0h
		inc	eax

loc_1001DAB5:				; CODE XREF: sub_1001DA90+1Ej
		jnz	loc_1001DD43
		mov	ecx, [ecx+8]
		mov	eax, ebp
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		cmp	ecx, eax
		ja	loc_1001DD43
		cmp	eax, 800h
		jg	loc_1001DD43
		cmp	ecx, 8
		ja	loc_1001DD43
		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		add	esp, 4
		mov	[esp+58h+var_44], ebx
		cmp	ebx, esi
		jnz	short loc_1001DB13
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1001DB13:				; CODE XREF: sub_1001DA90+6Bj
		push	edi
		push	70h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		add	esp, 8
		mov	[esp+5Ch+var_4C], edi
		cmp	edi, esi
		jnz	short loc_1001DB48
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		pop	edi
		pop	ebx
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1001DB48:				; CODE XREF: sub_1001DA90+97j
		mov	eax, ebp
		cdq
		and	edx, 0Fh
		mov	[edi], ebx
		add	eax, edx
		lea	ecx, [esp+5Ch+var_40]
		sar	eax, 4
		push	ecx
		mov	[esp+60h+var_48], eax
		mov	[esp+60h+var_34], esi
		mov	[esp+60h+var_24], esi
		mov	[esp+60h+var_14], esi
		mov	[esp+60h+var_4], esi
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001DCA4
		lea	edx, [esp+5Ch+var_30]
		push	edx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001DCA4
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001DCA4
		lea	ecx, [esp+5Ch+var_10]
		push	ecx
		call	sub_1002A030
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		js	loc_1001DCA4
		push	1
		lea	edx, [edi+4]
		push	edx
		push	ebx
		call	SECITEM_AllocItem_Util
		mov	eax, [edi+8]
		mov	byte ptr [eax],	0
		mov	eax, [esp+68h+arg_4]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+70h+var_20]
		push	eax
		call	sub_10029D30
		mov	ebp, eax
		add	esp, 18h
		test	ebp, ebp
		js	loc_1001DCA4
		mov	[esp+5Ch+arg_4], esi
		mov	edi, edi

loc_1001DC00:				; CODE XREF: sub_1001DA90+204j
		push	0
		call	PORT_SetError_Util
		mov	edi, [esp+60h+var_48]
		add	esp, 4
		lea	ebx, [esp+5Ch+var_40]
		call	sub_1001D980
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1001DC9C
		lea	ebx, [esp+5Ch+var_30]
		call	sub_1001D980
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1001DC9C
		mov	ecx, ebx
		push	ecx
		lea	edx, [esp+60h+var_40]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	short loc_1001DC50
		mov	eax, ebx
		push	eax
		lea	ecx, [esp+60h+var_40]
		push	ecx
		call	sub_1002A050
		add	esp, 8

loc_1001DC50:				; CODE XREF: sub_1001DA90+1AEj
		mov	edx, [esp+5Ch+arg_0]
		mov	edi, [esp+5Ch+var_4C]
		push	edx
		push	1
		lea	eax, [esp+64h+var_10]
		push	eax
		push	0
		lea	ecx, [esp+6Ch+var_20]
		push	ecx
		lea	edx, [esp+70h+var_30]
		push	edx
		lea	eax, [esp+74h+var_40]
		push	eax
		call	sub_1001D410
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		jz	short loc_1001DCA0
		inc	[esp+5Ch+arg_4]
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE03Fh
		jnz	short loc_1001DCA0
		cmp	[esp+5Ch+arg_4], 0Ah
		jl	loc_1001DC00
		jmp	short loc_1001DCA0
; ---------------------------------------------------------------------------

loc_1001DC9C:				; CODE XREF: sub_1001DA90+18Bj
					; sub_1001DA90+19Aj
		mov	edi, [esp+5Ch+var_4C]

loc_1001DCA0:				; CODE XREF: sub_1001DA90+1EDj
					; sub_1001DA90+1FDj ...
		mov	ebx, [esp+5Ch+var_44]

loc_1001DCA4:				; CODE XREF: sub_1001DA90+EAj
					; sub_1001DA90+101j ...
		lea	ecx, [esp+5Ch+var_40]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+60h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+64h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+68h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 10h
		test	ebp, ebp
		jz	short loc_1001DD1E
		cmp	ebp, 0FFFFFFFCh
		jz	short loc_1001DD0F
		cmp	ebp, 0FFFFFFFDh
		jz	short loc_1001DD00
		cmp	ebp, 0FFFFFFFEh
		jz	short loc_1001DCF1
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001DD22
; ---------------------------------------------------------------------------

loc_1001DCF1:				; CODE XREF: sub_1001DA90+250j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001DD22
; ---------------------------------------------------------------------------

loc_1001DD00:				; CODE XREF: sub_1001DA90+24Bj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001DD22
; ---------------------------------------------------------------------------

loc_1001DD0F:				; CODE XREF: sub_1001DA90+246j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_1001DD22
; ---------------------------------------------------------------------------

loc_1001DD1E:				; CODE XREF: sub_1001DA90+241j
		test	esi, esi
		jz	short loc_1001DD39

loc_1001DD22:				; CODE XREF: sub_1001DA90+25Fj
					; sub_1001DA90+26Ej ...
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		mov	[esp+64h+var_4C], 0
		mov	edi, [esp+64h+var_4C]
		add	esp, 8

loc_1001DD39:				; CODE XREF: sub_1001DA90+290j
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	esi
		pop	ebp
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------

loc_1001DD43:				; CODE XREF: sub_1001DA90+Dj
					; sub_1001DA90:loc_1001DAB5j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		xor	eax, eax
		pop	ebp
		add	esp, 4Ch
		retn
sub_1001DA90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001DD60	proc near		; CODE XREF: sub_1001DD90+2F8p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	2
		push	esi
		call	sub_10026250
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001DD7F
		push	2
		push	esi
		call	sub_100262E0
		add	esp, 8

loc_1001DD7F:				; CODE XREF: sub_1001DD60+12j
		pop	esi
		retn
sub_1001DD60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001DD90	proc near		; CODE XREF: sub_1001E2F0+27Ep

var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 74h
		push	ebx
		push	ebp
		mov	ebp, [esp+7Ch+arg_8]
		push	esi
		mov	ebx, eax
		push	edi
		xor	edi, edi
		lea	eax, [esp+84h+var_50]
		push	eax
		mov	[esp+88h+var_44], edi
		mov	[esp+88h+var_24], edi
		mov	[esp+88h+var_4], edi
		mov	[esp+88h+var_64], edi
		mov	[esp+88h+var_34], edi
		mov	[esp+88h+var_14], edi
		mov	[esp+88h+var_54], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001E290
		lea	ecx, [esp+84h+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001E290
		lea	edx, [esp+84h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001E290
		lea	eax, [esp+84h+var_70]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001E290
		lea	ecx, [esp+84h+var_40]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001E290
		lea	edx, [esp+84h+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001E290
		lea	eax, [esp+84h+var_60]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001E290
		push	ebx
		call	sub_10028CE0
		add	esp, 4
		cmp	eax, 17h
		jg	loc_1001E28B
		mov	edx, [esp+84h+arg_0]
		lea	ecx, [esp+84h+var_50]
		push	ecx
		push	edx
		push	ebx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290
		lea	eax, [esp+84h+var_50]
		push	eax
		mov	ecx, eax
		push	1
		push	ecx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290
		lea	edx, [esp+84h+var_50]
		push	edx
		call	sub_10028CE0
		mov	ecx, [esp+88h+arg_14]
		sub	eax, ecx
		dec	ecx
		mov	[esp+88h+var_74], eax
		push	ecx
		lea	eax, [esp+8Ch+var_70]
		push	eax
		call	sub_1002A630
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290
		push	edi
		lea	ecx, [esp+88h+var_70]
		push	ecx
		mov	edx, ecx
		push	edx
		lea	eax, [esp+90h+var_50]
		push	eax
		call	sub_1002BF60
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_1001E290
		lea	ecx, [esp+84h+var_70]
		push	ebx
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		js	short loc_1001DF2C
		lea	edx, [esp+84h+var_70]
		push	edx
		push	1
		push	ebx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290

loc_1001DF2C:				; CODE XREF: sub_1001DD90+180j
		cmp	[esp+84h+arg_10], edi
		jz	short loc_1001DF58
		mov	ebx, [esp+84h+arg_C]
		lea	eax, [esp+84h+var_20]
		push	eax
		push	1
		push	ebx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290
		jmp	short loc_1001DFC2
; ---------------------------------------------------------------------------

loc_1001DF58:				; CODE XREF: sub_1001DD90+1A3j
		mov	edx, [esp+84h+arg_4]
		lea	ecx, [esp+84h+var_20]
		push	ecx
		push	1
		push	edx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290
		lea	eax, [esp+84h+var_40]
		push	eax
		lea	ecx, [esp+88h+var_50]
		push	ecx
		lea	edx, [esp+8Ch+var_20]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002BF60
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_1001E290
		lea	ecx, [esp+84h+var_40]
		push	ecx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	loc_1001E28B
		push	ebp
		call	sub_10028F40
		mov	ebx, [esp+88h+arg_C]
		add	esp, 4

loc_1001DFC2:				; CODE XREF: sub_1001DD90+1C6j
		cmp	esi, edi
		jnz	loc_1001E262
		lea	ebx, [ebx+0]

loc_1001DFD0:				; CODE XREF: sub_1001DD90+48Aj
		lea	edx, [esp+84h+var_70]
		push	edx
		call	sub_10028CE0
		add	esp, 4
		cmp	eax, [esp+84h+var_74]
		jb	loc_1001E262
		lea	eax, [esp+84h+var_40]
		push	eax
		lea	ecx, [esp+88h+var_30]
		push	ecx
		lea	edx, [esp+8Ch+var_70]
		push	edx
		lea	eax, [esp+90h+var_50]
		push	eax
		call	sub_1002BF60
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_1001E290
		lea	ecx, [esp+84h+var_40]
		push	ecx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	loc_1001E204
		cmp	[esp+84h+arg_10], edi
		jnz	loc_1001E0D2
		lea	edx, [esp+84h+var_30]
		push	edx
		call	sub_10028CE0
		mov	ecx, [esp+88h+arg_14]
		shr	ecx, 1
		add	esp, 4
		cmp	eax, ecx
		jnz	loc_1001E204
		lea	edx, [esp+84h+var_30]
		push	2
		push	edx
		call	sub_100261C0
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1001E204
		lea	eax, [esp+84h+var_20]
		push	eax
		lea	ecx, [esp+88h+var_30]
		push	1
		push	ecx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290
		lea	edx, [esp+84h+var_20]
		push	edx
		call	sub_1001DD60
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jz	short loc_1001E0A4
		cmp	esi, 0FFFFFFFFh
		jnz	loc_1001E290
		jmp	loc_1001E204
; ---------------------------------------------------------------------------

loc_1001E0A4:				; CODE XREF: sub_1001DD90+304j
		push	ebp
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	loc_1001E222
		lea	eax, [esp+84h+var_20]
		push	ebp
		push	eax
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1001E290
		jmp	loc_1001E204
; ---------------------------------------------------------------------------

loc_1001E0D2:				; CODE XREF: sub_1001DD90+299j
		lea	ecx, [esp+84h+var_30]
		push	ecx
		call	sub_10028CE0
		add	esp, 4
		cmp	eax, [esp+84h+arg_14]
		jnz	loc_1001E204
		lea	edx, [esp+84h+var_30]
		push	4
		push	edx
		call	sub_100261C0
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1001E204
		lea	eax, [esp+84h+var_10]
		push	eax
		lea	ecx, [esp+88h+var_30]
		push	ecx
		lea	edx, [esp+8Ch+var_20]
		push	edx
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290
		lea	eax, [esp+84h+var_10]
		push	eax
		mov	ecx, eax
		push	ecx
		call	sub_1002B6B0
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1001E290
		lea	edx, [esp+84h+var_60]
		push	edx
		lea	eax, [esp+88h+var_10]
		push	eax
		call	sub_1002A440
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1001E290
		lea	ecx, [esp+84h+var_40]
		push	ecx
		lea	edx, [esp+88h+var_60]
		push	ebx
		push	edx
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290
		lea	eax, [esp+84h+var_60]
		push	eax
		lea	ecx, [esp+88h+var_40]
		push	ecx
		call	sub_1002C1F0
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1001E290
		lea	edx, [esp+84h+var_60]
		push	ebp
		push	edx
		call	sub_1002A440
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1001E290
		lea	eax, [esp+84h+var_40]
		push	ebp
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E229
		lea	ecx, [esp+84h+var_60]
		push	ecx
		mov	edx, ecx
		push	1
		push	edx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001E290
		lea	eax, [esp+84h+var_60]
		push	ebp
		push	eax
		call	sub_1002A440
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1001E290
		lea	ecx, [esp+84h+var_40]
		push	ebp
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001E229

loc_1001E204:				; CODE XREF: sub_1001DD90+28Cj
					; sub_1001DD90+2B7j ...
		lea	edx, [esp+84h+var_70]
		push	edx
		mov	eax, edx
		push	1
		push	eax
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jz	loc_1001DFD0
		jmp	short loc_1001E262
; ---------------------------------------------------------------------------

loc_1001E222:				; CODE XREF: sub_1001DD90+31Fj
		mov	esi, 0FFFFFFFDh
		jmp	short loc_1001E262
; ---------------------------------------------------------------------------

loc_1001E229:				; CODE XREF: sub_1001DD90+42Cj
					; sub_1001DD90+472j
		mov	ecx, [esp+84h+arg_4]
		push	ecx
		lea	edx, [esp+88h+var_60]
		push	edx
		lea	eax, [esp+8Ch+var_10]
		push	eax
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_1001E290
		push	ebp
		lea	ecx, [esp+88h+var_60]
		push	ecx
		lea	edx, [esp+8Ch+var_10]
		push	edx
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_1001E290

loc_1001E262:				; CODE XREF: sub_1001DD90+234j
					; sub_1001DD90+251j ...
		lea	eax, [esp+84h+var_70]
		push	eax
		call	sub_10028CE0
		add	esp, 4
		cmp	eax, [esp+84h+var_74]
		jnb	short loc_1001E290
		cmp	[esp+84h+arg_10], edi
		jnz	short loc_1001E28B
		push	ebp
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1001E290

loc_1001E28B:				; CODE XREF: sub_1001DD90+DEj
					; sub_1001DD90+21Cj ...
		mov	esi, 0FFFFFFFDh

loc_1001E290:				; CODE XREF: sub_1001DD90+42j
					; sub_1001DD90+59j ...
		lea	ecx, [esp+84h+var_50]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+88h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+8Ch+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+90h+var_70]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+94h+var_40]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+98h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+9Ch+var_60]
		push	ecx
		call	sub_10028EF0
		add	esp, 1Ch
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 74h
		retn
sub_1001DD90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001E2F0	proc near		; DATA XREF: .rdata:1003944Co

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 78h
		push	ebx
		push	ebp
		xor	ebx, ebx
		mov	eax, 1
		push	esi
		mov	[esp+84h+var_70], eax
		mov	[esp+84h+var_6C], eax
		lea	eax, [esp+84h+var_60]
		push	edi
		push	eax
		mov	[esp+8Ch+var_68], ebx
		xor	ebp, ebp
		mov	[esp+8Ch+var_78], ebx
		mov	[esp+8Ch+var_74], 0FFFFFFFFh
		mov	[esp+8Ch+var_54], ebx
		mov	[esp+8Ch+var_44], ebx
		mov	[esp+8Ch+var_34], ebx
		mov	[esp+8Ch+var_24], ebx
		mov	[esp+8Ch+var_14], ebx
		mov	[esp+8Ch+var_4], ebx
		call	sub_1002A030
		mov	edi, [esp+8Ch+arg_0]
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001E5CF
		lea	ecx, [esp+88h+var_50]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001E5CF
		lea	edx, [esp+88h+var_40]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001E5CF
		lea	eax, [esp+88h+var_30]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001E5CF
		lea	ecx, [esp+88h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001E5CF
		lea	edx, [esp+88h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001E5CF
		cmp	[edi], ebx
		jnz	short loc_1001E3E3
		push	800h
		call	PORT_NewArena_Util
		add	esp, 4
		mov	[esp+88h+var_68], eax
		cmp	eax, ebx
		jz	loc_1001E5CF
		mov	[edi], eax

loc_1001E3E3:				; CODE XREF: sub_1001E2F0+D6j
		mov	eax, [edi+20h]
		cmp	eax, ebx
		jz	short loc_1001E40A
		mov	ecx, [edi+24h]
		push	ecx
		push	eax
		lea	edx, [esp+90h+var_40]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001E5CF
		mov	[esp+88h+var_70], ebx

loc_1001E40A:				; CODE XREF: sub_1001E2F0+F8j
		mov	eax, [edi+2Ch]
		cmp	eax, ebx
		jz	loc_1001E4E1
		mov	ecx, [edi+30h]
		push	ecx
		push	eax
		lea	edx, [esp+90h+var_30]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001E5CF
		mov	[esp+88h+var_6C], ebx

loc_1001E435:				; CODE XREF: sub_1001E2F0+1F5j
		mov	ecx, [edi+38h]
		cmp	ecx, ebx
		jz	short loc_1001E46C
		mov	edx, [edi+3Ch]
		mov	eax, edx
		cmp	[ecx], bl
		jnz	short loc_1001E446
		dec	eax

loc_1001E446:				; CODE XREF: sub_1001E2F0+153j
		shl	eax, 4
		push	edx
		mov	ebp, eax
		push	ecx
		lea	eax, [esp+90h+var_60]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001E5CF
		mov	[esp+88h+var_78], 1

loc_1001E46C:				; CODE XREF: sub_1001E2F0+14Aj
		mov	ecx, [edi+44h]
		cmp	ecx, ebx
		jz	short loc_1001E4A9
		mov	edx, [edi+48h]
		mov	eax, edx
		cmp	[ecx], bl
		jnz	short loc_1001E47D
		dec	eax

loc_1001E47D:				; CODE XREF: sub_1001E2F0+18Aj
		shl	eax, 4
		mov	ebp, eax
		lea	eax, [esp+88h+var_50]
		cmp	[esp+88h+var_78], ebx
		jnz	short loc_1001E490
		lea	eax, [esp+88h+var_60]

loc_1001E490:				; CODE XREF: sub_1001E2F0+19Aj
		push	edx
		push	ecx
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001E5CF
		inc	[esp+88h+var_78]

loc_1001E4A9:				; CODE XREF: sub_1001E2F0+181j
		mov	eax, [edi+14h]
		cmp	eax, ebx
		jz	short loc_1001E4F5
		mov	ecx, [edi+18h]
		mov	edx, ecx
		cmp	[eax], bl
		jnz	short loc_1001E4BA
		dec	edx

loc_1001E4BA:				; CODE XREF: sub_1001E2F0+1C7j
		push	ecx
		push	eax
		lea	ecx, [esp+90h+var_20]
		push	ecx
		lea	ebp, ds:0[edx*8]
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001E5CF
		mov	eax, 1
		jmp	short loc_1001E4F7
; ---------------------------------------------------------------------------

loc_1001E4E1:				; CODE XREF: sub_1001E2F0+11Fj
		cmp	[esp+88h+var_70], ebx
		jz	loc_1001E435

loc_1001E4EB:				; CODE XREF: sub_1001E2F0+254j
					; sub_1001E2F0+25Aj ...
		mov	esi, 0FFFFFFFCh
		jmp	loc_1001E5CF
; ---------------------------------------------------------------------------

loc_1001E4F5:				; CODE XREF: sub_1001E2F0+1BEj
		mov	eax, ebx

loc_1001E4F7:				; CODE XREF: sub_1001E2F0+1EFj
		mov	ecx, [esp+88h+var_78]
		cmp	ecx, 1
		jnz	short loc_1001E53B
		cmp	eax, ebx
		jz	short loc_1001E540
		lea	edx, [esp+88h+var_10]
		push	edx
		lea	eax, [esp+8Ch+var_50]
		push	eax
		lea	ecx, [esp+90h+var_60]
		push	ecx
		lea	edx, [esp+94h+var_20]
		push	edx
		call	sub_1002BF60
		lea	eax, [esp+98h+var_10]
		push	eax
		call	sub_10028FB0
		add	esp, 14h
		test	eax, eax
		jz	short loc_1001E57C
		mov	esi, 0FFFFFFFCh
		jmp	loc_1001E5CF
; ---------------------------------------------------------------------------

loc_1001E53B:				; CODE XREF: sub_1001E2F0+20Ej
		cmp	ecx, 2
		jge	short loc_1001E57C

loc_1001E540:				; CODE XREF: sub_1001E2F0+212j
		cmp	[esp+88h+var_70], ebx
		jnz	short loc_1001E4EB
		cmp	[esp+88h+var_6C], ebx
		jnz	short loc_1001E4EB
		cmp	ecx, ebx
		jg	short loc_1001E554
		cmp	eax, ebx
		jz	short loc_1001E4EB

loc_1001E554:				; CODE XREF: sub_1001E2F0+25Ej
		push	ebp
		push	eax
		lea	ecx, [esp+90h+var_20]
		push	ecx
		lea	edx, [esp+94h+var_50]
		push	edx
		lea	eax, [esp+98h+var_60]
		push	eax
		lea	ecx, [esp+9Ch+var_30]
		push	ecx
		lea	eax, [esp+0A0h+var_40]
		call	sub_1001DD90
		mov	esi, eax
		add	esp, 18h
		cmp	esi, ebx
		jl	short loc_1001E5CF

loc_1001E57C:				; CODE XREF: sub_1001E2F0+23Fj
					; sub_1001E2F0+24Ej
		lea	edx, [esp+88h+var_50]
		push	edx
		lea	eax, [esp+8Ch+var_60]
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	short loc_1001E5A4
		lea	ecx, [esp+88h+var_50]
		push	ecx
		lea	edx, [esp+8Ch+var_60]
		push	edx
		call	sub_1002A050
		add	esp, 8

loc_1001E5A4:				; CODE XREF: sub_1001E2F0+2A0j
		mov	eax, [esp+88h+var_6C]
		mov	edx, [esp+88h+var_70]
		push	ebp
		push	eax
		lea	ecx, [esp+90h+var_30]
		push	ecx
		push	edx
		lea	eax, [esp+98h+var_40]
		push	eax
		lea	ecx, [esp+9Ch+var_50]
		push	ecx
		lea	edx, [esp+0A0h+var_60]
		push	edx
		call	sub_1001D410
		add	esp, 1Ch
		mov	[esp+88h+var_74], eax

loc_1001E5CF:				; CODE XREF: sub_1001E2F0+5Bj
					; sub_1001E2F0+72j ...
		lea	eax, [esp+88h+var_60]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+8Ch+var_50]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+90h+var_40]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+94h+var_30]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+98h+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+9Ch+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 18h
		cmp	esi, ebx
		jz	short loc_1001E680
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001E669
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001E652
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001E63B
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+88h+var_74], 0FFFFFFFFh
		jmp	short loc_1001E688
; ---------------------------------------------------------------------------

loc_1001E63B:				; CODE XREF: sub_1001E2F0+332j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+88h+var_74], 0FFFFFFFFh
		jmp	short loc_1001E688
; ---------------------------------------------------------------------------

loc_1001E652:				; CODE XREF: sub_1001E2F0+32Dj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+88h+var_74], 0FFFFFFFFh
		jmp	short loc_1001E688
; ---------------------------------------------------------------------------

loc_1001E669:				; CODE XREF: sub_1001E2F0+328j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+88h+var_74], 0FFFFFFFFh
		jmp	short loc_1001E688
; ---------------------------------------------------------------------------

loc_1001E680:				; CODE XREF: sub_1001E2F0+323j
		mov	eax, [esp+88h+var_74]
		cmp	eax, ebx
		jz	short loc_1001E6A1

loc_1001E688:				; CODE XREF: sub_1001E2F0+349j
					; sub_1001E2F0+360j ...
		mov	eax, [esp+88h+var_68]
		cmp	eax, ebx
		jz	short loc_1001E69D
		push	1
		push	eax
		call	PORT_FreeArena_Util
		add	esp, 8
		mov	[edi], ebx

loc_1001E69D:				; CODE XREF: sub_1001E2F0+39Ej
		mov	eax, [esp+88h+var_74]

loc_1001E6A1:				; CODE XREF: sub_1001E2F0+396j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 78h
		retn
sub_1001E2F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001E6B0(int,	void *Dst, int)
sub_1001E6B0	proc near		; CODE XREF: sub_10020270+42p
					; sub_10020330+2Bp ...

var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 44h
		push	ebp
		push	esi
		mov	esi, [esp+4Ch+arg_0]
		xor	ebp, ebp
		mov	[esp+4Ch+var_44], ebp
		cmp	esi, ebp
		jz	loc_1001E92A
		cmp	[esp+4Ch+Dst], ebp
		jz	loc_1001E92A
		cmp	[esp+4Ch+arg_8], ebp
		jz	loc_1001E92A
		lea	eax, [esp+4Ch+var_40]
		push	edi
		push	eax
		mov	[esp+54h+var_34], ebp
		mov	[esp+54h+var_24], ebp
		mov	[esp+54h+var_14], ebp
		mov	[esp+54h+var_4], ebp
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebp
		jl	loc_1001E8B7
		lea	ecx, [esp+50h+var_30]
		push	ecx
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebp
		jl	loc_1001E8B7
		lea	edx, [esp+50h+var_20]
		push	edx
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebp
		jl	loc_1001E8B7
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_1002A030
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebp
		jl	loc_1001E8B7
		mov	ecx, [esi+8]
		mov	eax, [esi+14h]
		xor	edx, edx
		cmp	[ecx], dl
		push	ebx
		mov	ebx, [esi+0Ch]
		setz	dl
		xor	ecx, ecx
		sub	ebx, edx
		cmp	[eax], cl
		mov	eax, [esi+18h]
		setz	cl
		sub	eax, ecx
		cmp	eax, ebx
		ja	loc_1001E8A1
		cmp	ebx, 800h
		ja	loc_1001E8A1
		cmp	eax, 8
		ja	loc_1001E8A1
		mov	edx, [esi+0Ch]
		mov	eax, [esi+8]
		push	edx
		push	eax
		lea	ecx, [esp+5Ch+var_40]
		push	ecx
		call	sub_10029D30
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, ebp
		jl	loc_1001E8B6
		mov	edx, [esi+18h]
		mov	eax, [esi+14h]
		push	edx
		push	eax
		lea	ecx, [esp+5Ch+var_30]
		push	ecx
		call	sub_10029D30
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, ebp
		jl	loc_1001E8B6
		mov	edx, [esp+54h+var_28]
		cmp	edx, [esp+54h+var_38]
		ja	loc_1001E8A1
		mov	esi, [esi+8]
		mov	edx, [esp+54h+arg_8]
		xor	ecx, ecx
		cmp	[esi], cl
		mov	ebp, ebx
		setz	cl
		add	ecx, esi
		cmp	ebx, 4
		jb	short loc_1001E7FB

loc_1001E7E7:				; CODE XREF: sub_1001E6B0+149j
		mov	eax, [edx]
		cmp	eax, [ecx]
		jnz	short loc_1001E7FF
		sub	ebp, 4
		add	ecx, 4
		add	edx, 4
		cmp	ebp, 4
		jnb	short loc_1001E7E7

loc_1001E7FB:				; CODE XREF: sub_1001E6B0+135j
		test	ebp, ebp
		jz	short loc_1001E842

loc_1001E7FF:				; CODE XREF: sub_1001E6B0+13Bj
		movzx	eax, byte ptr [edx]
		movzx	esi, byte ptr [ecx]
		sub	eax, esi
		jnz	short loc_1001E83A
		cmp	ebp, 1
		jbe	short loc_1001E842
		movzx	eax, byte ptr [edx+1]
		movzx	esi, byte ptr [ecx+1]
		sub	eax, esi
		jnz	short loc_1001E83A
		cmp	ebp, 2
		jbe	short loc_1001E842
		movzx	eax, byte ptr [edx+2]
		movzx	esi, byte ptr [ecx+2]
		sub	eax, esi
		jnz	short loc_1001E83A
		cmp	ebp, 3
		jbe	short loc_1001E842
		movzx	eax, byte ptr [edx+3]
		movzx	ecx, byte ptr [ecx+3]
		sub	eax, ecx

loc_1001E83A:				; CODE XREF: sub_1001E6B0+157j
					; sub_1001E6B0+168j ...
		sar	eax, 1Fh
		or	eax, 1
		jl	short loc_1001E849

loc_1001E842:				; CODE XREF: sub_1001E6B0+14Dj
					; sub_1001E6B0+15Cj ...
		push	0FFFFE004h
		jmp	short loc_1001E8A6
; ---------------------------------------------------------------------------

loc_1001E849:				; CODE XREF: sub_1001E6B0+190j
		mov	edx, [esp+54h+arg_8]
		push	ebx
		push	edx
		lea	eax, [esp+5Ch+var_20]
		push	eax
		call	sub_10029D30
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	short loc_1001E8B6
		lea	ecx, [esp+54h+var_10]
		push	ecx
		lea	edx, [esp+58h+var_40]
		push	edx
		lea	eax, [esp+5Ch+var_30]
		push	eax
		lea	ecx, [esp+60h+var_20]
		push	ecx
		call	sub_100288A0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		js	short loc_1001E8B6
		mov	edx, [esp+54h+Dst]
		push	ebx		; int
		push	edx		; Dst
		lea	eax, [esp+5Ch+var_10]
		push	eax		; int
		call	sub_10029F70
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	short loc_1001E8B6
		xor	edi, edi
		jmp	short loc_1001E8B6
; ---------------------------------------------------------------------------

loc_1001E8A1:				; CODE XREF: sub_1001E6B0+B9j
					; sub_1001E6B0+C5j ...
		push	0FFFFE028h

loc_1001E8A6:				; CODE XREF: sub_1001E6B0+197j
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+54h+var_44], 0FFFFFFFFh

loc_1001E8B6:				; CODE XREF: sub_1001E6B0+EDj
					; sub_1001E6B0+10Cj ...
		pop	ebx

loc_1001E8B7:				; CODE XREF: sub_1001E6B0+4Dj
					; sub_1001E6B0+64j ...
		lea	ecx, [esp+50h+var_40]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+54h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+58h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+5Ch+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 10h
		test	edi, edi
		jz	short loc_1001E91F
		cmp	edi, 0FFFFFFFCh
		jz	short loc_1001E90A
		cmp	edi, 0FFFFFFFDh
		jz	short loc_1001E903
		cmp	edi, 0FFFFFFFEh
		jz	short loc_1001E8FC
		push	0FFFFE001h
		jmp	short loc_1001E90F
; ---------------------------------------------------------------------------

loc_1001E8FC:				; CODE XREF: sub_1001E6B0+243j
		push	0FFFFE013h
		jmp	short loc_1001E90F
; ---------------------------------------------------------------------------

loc_1001E903:				; CODE XREF: sub_1001E6B0+23Ej
		push	0FFFFE002h
		jmp	short loc_1001E90F
; ---------------------------------------------------------------------------

loc_1001E90A:				; CODE XREF: sub_1001E6B0+239j
		push	0FFFFE005h

loc_1001E90F:				; CODE XREF: sub_1001E6B0+24Aj
					; sub_1001E6B0+251j ...
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+50h+var_44], 0FFFFFFFFh

loc_1001E91F:				; CODE XREF: sub_1001E6B0+234j
		mov	eax, [esp+50h+var_44]
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_1001E92A:				; CODE XREF: sub_1001E6B0+11j
					; sub_1001E6B0+1Bj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 44h
		retn
sub_1001E6B0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1001E940	proc near		; CODE XREF: sub_1001F4F0+22Cp

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		push	ebx
		lea	eax, [esp+14h+var_10]
		push	esi
		xor	ebx, ebx
		push	eax
		mov	[esp+1Ch+var_4], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	short loc_1001E997
		mov	ecx, [edi+30h]
		mov	edx, [edi+2Ch]
		push	ecx
		push	edx
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_1001E997
		mov	ecx, [esp+18h+arg_0]
		mov	edx, [esp+18h+arg_8]
		push	ecx
		mov	ecx, [esp+1Ch+arg_4]
		push	edx
		lea	eax, [esp+20h+var_10]
		push	eax
		push	ecx
		call	sub_100288A0
		add	esp, 10h
		mov	esi, eax

loc_1001E997:				; CODE XREF: sub_1001E940+1Cj
					; sub_1001E940+37j
		lea	edx, [esp+18h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4
		cmp	esi, ebx
		jz	short loc_1001EA0F
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001E9F9
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001E9E3
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001E9CD
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1001E9CD:				; CODE XREF: sub_1001E940+75j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1001E9E3:				; CODE XREF: sub_1001E940+70j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1001E9F9:				; CODE XREF: sub_1001E940+6Bj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1001EA0F:				; CODE XREF: sub_1001E940+66j
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 10h
		retn
sub_1001E940	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001EA20	proc near		; CODE XREF: sub_1001EDD0+64p
					; sub_1001F4F0+20Dp

var_90		= byte ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 90h
		push	ebx
		push	ebp
		mov	ebp, [esp+98h+arg_4]
		push	esi
		mov	ebx, eax
		push	edi
		xor	edi, edi
		lea	eax, [esp+0A0h+var_90]
		push	eax
		mov	[esp+0A4h+var_84], edi
		mov	[esp+0A4h+var_74], edi
		mov	[esp+0A4h+var_14], edi
		mov	[esp+0A4h+var_34], edi
		mov	[esp+0A4h+var_24], edi
		mov	[esp+0A4h+var_4], edi
		mov	[esp+0A4h+var_44], edi
		mov	[esp+0A4h+var_64], edi
		mov	[esp+0A4h+var_54], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	ecx, [esp+0A0h+var_80]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	edx, [esp+0A0h+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	eax, [esp+0A0h+var_40]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	ecx, [esp+0A0h+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	edx, [esp+0A0h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	eax, [esp+0A0h+var_50]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	ecx, [esp+0A0h+var_70]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	edx, [esp+0A0h+var_60]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_1001ECD1
		mov	eax, [ebx+3Ch]
		mov	ecx, [ebx+38h]
		push	eax
		push	ecx
		lea	edx, [esp+0A8h+var_90]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001ECD1
		mov	eax, [ebx+48h]
		mov	ecx, [ebx+44h]
		push	eax
		push	ecx
		lea	edx, [esp+0A8h+var_80]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001ECD1
		mov	eax, [ebx+54h]
		mov	ecx, [ebx+50h]
		push	eax
		push	ecx
		lea	edx, [esp+0A8h+var_20]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001ECD1
		mov	eax, [ebx+60h]
		mov	ecx, [ebx+5Ch]
		push	eax
		push	ecx
		lea	edx, [esp+0A8h+var_40]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001ECD1
		mov	eax, [ebx+6Ch]
		mov	ecx, [ebx+68h]
		push	eax
		push	ecx
		lea	edx, [esp+0A8h+var_30]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	eax, [esp+0A0h+var_60]
		push	eax
		lea	ecx, [esp+0A4h+var_90]
		push	ecx
		push	ebp
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	edx, [esp+0A0h+var_10]
		push	edx
		lea	eax, [esp+0A4h+var_90]
		push	eax
		lea	ecx, [esp+0A8h+var_20]
		push	ecx
		lea	edx, [esp+0ACh+var_60]
		push	edx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	eax, [esp+0A0h+var_60]
		push	eax
		lea	ecx, [esp+0A4h+var_80]
		push	ecx
		push	ebp
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_1001ECD1
		lea	edx, [esp+0A0h+var_50]
		push	edx
		lea	eax, [esp+0A4h+var_80]
		push	eax
		lea	ecx, [esp+0A8h+var_40]
		push	ecx
		lea	edx, [esp+0ACh+var_60]
		push	edx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	short loc_1001ECD1
		lea	eax, [esp+0A0h+var_70]
		push	eax
		lea	ecx, [esp+0A4h+var_90]
		push	ecx
		lea	edx, [esp+0A8h+var_50]
		push	edx
		lea	eax, [esp+0ACh+var_10]
		push	eax
		call	sub_1002C400
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	short loc_1001ECD1
		lea	ecx, [esp+0A0h+var_70]
		push	ecx
		lea	edx, [esp+0A4h+var_90]
		push	edx
		lea	eax, [esp+0A8h+var_30]
		push	eax
		push	ecx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	short loc_1001ECD1
		mov	ebx, [esp+0A0h+arg_0]
		push	ebx
		lea	edx, [esp+0A4h+var_80]
		push	edx
		lea	eax, [esp+0A8h+var_70]
		push	eax
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_1001ECD1
		push	ebx
		lea	ecx, [esp+0A4h+var_50]
		push	ecx
		push	ebx
		call	sub_1002A130
		add	esp, 0Ch
		mov	esi, eax

loc_1001ECD1:				; CODE XREF: sub_1001EA20+53j
					; sub_1001EA20+6Aj ...
		lea	edx, [esp+0A0h+var_90]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0A4h+var_80]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0A8h+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0ACh+var_40]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0B0h+var_30]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0B4h+var_10]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0B8h+var_50]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0BCh+var_70]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0C0h+var_60]
		push	ecx
		call	sub_10028EF0
		add	esp, 24h
		cmp	esi, edi
		jz	short loc_1001EDB6
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001ED9B
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001ED80
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001ED65
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_1001ED65:				; CODE XREF: sub_1001EA20+328j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_1001ED80:				; CODE XREF: sub_1001EA20+323j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_1001ED9B:				; CODE XREF: sub_1001EA20+31Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 90h
		retn
; ---------------------------------------------------------------------------

loc_1001EDB6:				; CODE XREF: sub_1001EA20+319j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 90h
		retn
sub_1001EA20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001EDD0	proc near		; CODE XREF: sub_1001F4F0+1F7p

var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 30h
		push	ebx
		xor	ebx, ebx
		lea	eax, [esp+34h+var_30]
		push	esi
		push	eax
		mov	[esp+3Ch+var_24], ebx
		mov	[esp+3Ch+var_14], ebx
		mov	[esp+3Ch+var_4], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001EEB3
		lea	ecx, [esp+38h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001EEB3
		lea	edx, [esp+38h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001EEB3
		mov	eax, [esp+38h+arg_4]
		mov	ecx, [esp+38h+arg_0]
		push	eax
		push	ecx
		mov	eax, edi
		call	sub_1001EA20
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_1001EEB3
		mov	edx, [edi+18h]
		mov	eax, [edi+14h]
		push	edx
		push	eax
		lea	ecx, [esp+40h+var_30]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001EEB3
		mov	edx, [edi+24h]
		mov	eax, [edi+20h]
		push	edx
		push	eax
		lea	ecx, [esp+40h+var_20]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001EEB3
		lea	edx, [esp+38h+var_10]
		push	edx
		mov	edx, [esp+3Ch+arg_0]
		lea	eax, [esp+3Ch+var_30]
		push	eax
		lea	ecx, [esp+40h+var_20]
		push	ecx
		push	edx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001EEB3
		mov	eax, [esp+38h+arg_4]
		push	eax
		lea	ecx, [esp+3Ch+var_10]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001EEB3
		or	ebx, 0FFFFFFFFh

loc_1001EEB3:				; CODE XREF: sub_1001EDD0+24j
					; sub_1001EDD0+3Bj ...
		lea	edx, [esp+38h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+40h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1001EF3F
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001EF29
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001EF13
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001EEFD
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001EEFD:				; CODE XREF: sub_1001EDD0+115j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001EF13:				; CODE XREF: sub_1001EDD0+110j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001EF29:				; CODE XREF: sub_1001EDD0+10Bj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1001EF3F:				; CODE XREF: sub_1001EDD0+106j
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 30h
		retn
sub_1001EDD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001EF50	proc near		; DATA XREF: sub_1001FE80o
		call	ds:PR_NewLock
		mov	dword_1004B730,	eax
		test	eax, eax
		jnz	short loc_1001EF70

loc_1001EF5F:				; CODE XREF: sub_1001EF50+31j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1001EF70:				; CODE XREF: sub_1001EF50+Dj
		push	eax
		call	ds:PR_NewCondVar
		add	esp, 4
		mov	dword_1004B734,	eax
		test	eax, eax
		jz	short loc_1001EF5F
		mov	eax, offset dword_1004B73C
		mov	dword_1004B73C,	eax
		mov	dword_1004B740,	eax
		mov	dword_1004B738,	0
		xor	eax, eax
		retn
sub_1001EF50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001EFA0	proc near		; CODE XREF: sub_1001F150+22Ap

var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 24h
		push	ebp
		mov	ebp, [esp+28h+arg_C]
		push	esi
		push	edi
		mov	edi, eax
		lea	eax, [esp+30h+var_10]
		push	eax
		mov	[esp+34h+var_24], 0
		mov	[esp+34h+var_4], 0
		mov	[esp+34h+var_14], 0
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F0B9
		lea	ecx, [esp+30h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1001F0B9
		mov	edx, [edi+24h]
		mov	eax, [edi+20h]
		push	edx
		push	eax
		lea	ecx, [esp+38h+var_10]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1001F0B9
		push	ebp
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1001F032
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1001F0B9
; ---------------------------------------------------------------------------

loc_1001F032:				; CODE XREF: sub_1001EFA0+7Ej
		push	ebp
		push	edi
		call	sub_1000CD60
		add	esp, 8
		mov	[esp+30h+var_24], eax
		test	eax, eax
		jnz	short loc_1001F0AF
		push	ebp
		lea	edx, [esp+34h+var_20]
		push	edi
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001F0AF
		mov	ecx, [esp+30h+arg_8]
		lea	eax, [esp+30h+var_20]
		push	eax
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001F0AF
		mov	eax, [esp+30h+arg_0]
		mov	ecx, [esp+30h+arg_8]
		push	eax
		push	ecx
		lea	edx, [esp+38h+var_10]
		push	edx
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001F0AF
		mov	ecx, [esp+30h+arg_4]
		mov	edx, [esp+30h+arg_8]
		push	ecx
		push	edx
		lea	eax, [esp+38h+var_20]
		push	eax
		call	sub_1002CAC0
		add	esp, 0Ch
		mov	esi, eax

loc_1001F0AF:				; CODE XREF: sub_1001EFA0+A2j
					; sub_1001EFA0+B7j ...
		push	ebp
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8

loc_1001F0B9:				; CODE XREF: sub_1001EFA0+35j
					; sub_1001EFA0+4Cj ...
		lea	ecx, [esp+30h+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+34h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 8
		test	esi, esi
		jz	short loc_1001F13F
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001F128
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001F111
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001F0FA
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1001F0FA:				; CODE XREF: sub_1001EFA0+141j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1001F111:				; CODE XREF: sub_1001EFA0+13Cj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1001F128:				; CODE XREF: sub_1001EFA0+137j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1001F13F:				; CODE XREF: sub_1001EFA0+132j
		mov	eax, [esp+30h+var_24]
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 24h
		retn
sub_1001EFA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001F150	proc near		; CODE XREF: sub_1001F4F0+19Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 8
		mov	eax, dword_1004B730
		push	ebx
		push	ebp
		push	esi
		xor	ebx, ebx
		xor	esi, esi
		push	edi
		mov	[esp+18h+var_8], ebx
		mov	[esp+18h+var_4], 0FFFFFFFFh
		cmp	eax, ebx
		jz	loc_1001F267

loc_1001F174:				; CODE XREF: sub_1001F150+111j
		push	eax
		call	ds:PR_Lock
		mov	edi, dword_1004B73C
		add	esp, 4
		cmp	edi, offset dword_1004B73C
		jz	short loc_1001F1B4
		mov	ebp, [esp+18h+arg_0]
		add	ebp, 10h

loc_1001F193:				; CODE XREF: sub_1001F150+62j
		lea	eax, [edi+8]
		push	ebp
		push	eax
		mov	esi, edi
		call	SECITEM_CompareItem_Util
		add	esp, 8
		mov	[esp+18h+var_4], eax
		cmp	eax, ebx
		jge	short loc_1001F1B4
		mov	edi, [edi]
		cmp	edi, offset dword_1004B73C
		jnz	short loc_1001F193

loc_1001F1B4:				; CODE XREF: sub_1001F150+3Aj
					; sub_1001F150+58j
		cmp	[esp+18h+var_4], ebx
		jz	short loc_1001F224
		push	33Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jz	loc_1001F27F
		lea	ebp, [esi+1Ch]
		mov	eax, ebp
		mov	[esi], esi
		mov	[esi+4], esi
		mov	edx, 14h

loc_1001F1E0:				; CODE XREF: sub_1001F150+A1j
		dec	edx
		lea	ecx, [eax+28h]
		mov	[eax], ecx
		mov	[eax+10h], ebx
		mov	[eax+20h], ebx
		mov	[eax+24h], ebx
		mov	eax, ecx
		jnz	short loc_1001F1E0
		mov	ecx, [esp+18h+arg_0]
		add	ecx, 10h
		push	ecx
		lea	edx, [esi+8]
		push	edx
		push	ebx
		mov	[esi+314h], ebx
		mov	[esi+18h], ebx
		mov	[esi+14h], ebp
		call	SECITEM_CopyItem_Util
		mov	[esi], edi
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	ecx, [edi+4]
		mov	[ecx], esi
		add	esp, 0Ch
		mov	[edi+4], esi

loc_1001F224:				; CODE XREF: sub_1001F150+68j
		mov	edi, [esi+18h]
		cmp	edi, ebx
		jnz	short loc_1001F291
		mov	edi, [esi+14h]
		cmp	edi, ebx
		jnz	loc_1001F34E
		mov	edx, dword_1004B734
		inc	dword_1004B738
		push	0FFFFFFFFh
		push	edx
		call	ds:PR_WaitCondVar
		mov	eax, dword_1004B730
		push	eax
		call	ds:PR_Unlock
		mov	eax, dword_1004B730
		add	esp, 0Ch
		cmp	eax, ebx
		jnz	loc_1001F174

loc_1001F267:				; CODE XREF: sub_1001F150+1Ej
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001F27F:				; CODE XREF: sub_1001F150+7Bj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1001F40E
; ---------------------------------------------------------------------------

loc_1001F291:				; CODE XREF: sub_1001F150+D9j
		dec	dword ptr [edi+24h]
		cmp	[edi+24h], ebx
		jle	short loc_1001F2D8
		mov	ecx, [esp+18h+arg_C]
		push	ecx
		lea	edx, [edi+4]
		push	edx
		call	sub_10028E00
		add	esp, 8
		mov	[esp+18h+var_8], eax
		cmp	eax, ebx
		jl	loc_1001F40E
		mov	eax, [esp+18h+arg_10]
		push	eax
		add	edi, 14h
		push	edi
		call	sub_10028E00
		add	esp, 8
		mov	[esp+18h+var_8], eax
		cmp	eax, ebx
		jl	loc_1001F40E
		jmp	loc_1001F4D0
; ---------------------------------------------------------------------------

loc_1001F2D8:				; CODE XREF: sub_1001F150+147j
		mov	edx, [esp+18h+arg_C]
		push	edx
		lea	ebp, [edi+4]
		push	ebp
		call	sub_1002A050
		mov	ecx, [esp+20h+arg_10]
		lea	eax, [edi+14h]
		push	ecx
		push	eax
		call	sub_1002A050
		push	ebp
		call	sub_10028EF0
		lea	eax, [edi+14h]
		push	eax
		call	sub_10028EF0
		mov	edx, [edi]
		mov	[edi+24h], ebx
		mov	eax, [esi+14h]
		mov	[esi+18h], edx
		mov	[edi], eax
		add	esp, 18h
		mov	[esi+14h], edi
		cmp	dword_1004B738,	ebx
		jle	short loc_1001F334
		mov	ecx, dword_1004B734
		push	ecx
		call	ds:PR_NotifyCondVar
		add	esp, 4
		dec	dword_1004B738

loc_1001F334:				; CODE XREF: sub_1001F150+1CCj
		mov	edx, dword_1004B730
		push	edx
		call	ds:PR_Unlock
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001F34E:				; CODE XREF: sub_1001F150+E0j
		mov	eax, [edi]
		mov	[esi+14h], eax
		mov	[edi], ebx
		mov	ecx, dword_1004B730
		push	ecx
		call	ds:PR_Unlock
		mov	edx, [esp+1Ch+arg_8]
		mov	eax, [esp+1Ch+arg_4]
		mov	ecx, [esp+1Ch+arg_10]
		push	edx
		mov	edx, [esp+20h+arg_C]
		push	eax
		mov	eax, [esp+24h+arg_0]
		push	ecx
		push	edx
		call	sub_1001EFA0
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1001F3E1
		lea	eax, [edi+4]
		push	eax
		call	sub_1002A030
		add	esp, 4
		mov	[esp+18h+var_8], eax
		cmp	eax, ebx
		jl	short loc_1001F3E1
		lea	ebp, [edi+14h]
		push	ebp
		call	sub_1002A030
		add	esp, 4
		mov	[esp+18h+var_8], eax
		cmp	eax, ebx
		jl	short loc_1001F3E1
		lea	eax, [edi+4]
		push	eax
		mov	eax, [esp+1Ch+arg_C]
		push	eax
		call	sub_10028E00
		add	esp, 8
		mov	[esp+18h+var_8], eax
		cmp	eax, ebx
		jl	short loc_1001F3E1
		mov	ecx, [esp+18h+arg_10]
		push	ebp
		push	ecx
		call	sub_10028E00
		add	esp, 8
		mov	[esp+18h+var_8], eax
		cmp	eax, ebx
		jge	loc_1001F494

loc_1001F3E1:				; CODE XREF: sub_1001F150+234j
					; sub_1001F150+248j ...
		mov	edx, dword_1004B730
		push	edx
		call	ds:PR_Lock
		lea	eax, [edi+4]
		push	eax
		call	sub_10028EF0
		lea	ecx, [edi+14h]
		push	ecx
		call	sub_10028EF0
		mov	[edi+24h], ebx
		mov	edx, [esi+14h]
		mov	[edi], edx
		add	esp, 0Ch
		mov	[esi+14h], edi

loc_1001F40E:				; CODE XREF: sub_1001F150+13Cj
					; sub_1001F150+160j ...
		mov	eax, dword_1004B730
		push	eax
		call	ds:PR_Unlock
		mov	eax, [esp+1Ch+var_8]
		add	esp, 4
		cmp	eax, ebx
		jz	short loc_1001F489
		cmp	eax, 0FFFFFFFCh
		jz	short loc_1001F47C
		cmp	eax, 0FFFFFFFDh
		jz	short loc_1001F464
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1001F44C
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001F44C:				; CODE XREF: sub_1001F150+2E2j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001F464:				; CODE XREF: sub_1001F150+2DDj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001F47C:				; CODE XREF: sub_1001F150+2D8j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4

loc_1001F489:				; CODE XREF: sub_1001F150+2D3j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001F494:				; CODE XREF: sub_1001F150+28Bj
		mov	ecx, dword_1004B730
		push	ecx
		call	ds:PR_Lock
		mov	dword ptr [edi+24h], 32h
		mov	edx, [esi+18h]
		mov	[edi], edx
		add	esp, 4
		mov	[esi+18h], edi
		cmp	dword_1004B738,	ebx
		jle	short loc_1001F4D0
		mov	eax, dword_1004B734
		push	eax
		call	ds:PR_NotifyAllCondVar
		add	esp, 4
		mov	dword_1004B738,	ebx

loc_1001F4D0:				; CODE XREF: sub_1001F150+183j
					; sub_1001F150+369j
		mov	ecx, dword_1004B730
		push	ecx
		call	ds:PR_Unlock
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_1001F150	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001F4F0(void	*Dst, int, int)
sub_1001F4F0	proc near		; CODE XREF: sub_1001F840+10p
					; sub_1001F860+10p

var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_4]
		sub	esp, 54h
		push	edi
		mov	edi, eax
		test	edi, edi
		jz	loc_1001F81C
		cmp	[esp+58h+Dst], 0
		jz	loc_1001F81C
		test	edx, edx
		jz	loc_1001F81C
		mov	eax, [edi+14h]
		xor	ecx, ecx
		cmp	[eax], cl
		push	ebx
		setz	cl
		push	ebp
		mov	ebp, [edi+18h]
		push	esi
		sub	ebp, ecx
		xor	ecx, ecx
		cmp	[eax], cl
		mov	esi, ebp
		setz	cl
		add	ecx, eax
		cmp	ebp, 4
		jb	short loc_1001F54B

loc_1001F537:				; CODE XREF: sub_1001F4F0+59j
		mov	eax, [edx]
		cmp	eax, [ecx]
		jnz	short loc_1001F54F
		sub	esi, 4
		add	ecx, 4
		add	edx, 4
		cmp	esi, 4
		jnb	short loc_1001F537

loc_1001F54B:				; CODE XREF: sub_1001F4F0+45j
		test	esi, esi
		jz	short loc_1001F596

loc_1001F54F:				; CODE XREF: sub_1001F4F0+4Bj
		movzx	eax, byte ptr [edx]
		movzx	ebx, byte ptr [ecx]
		sub	eax, ebx
		jnz	short loc_1001F58A
		cmp	esi, 1
		jbe	short loc_1001F596
		movzx	eax, byte ptr [edx+1]
		movzx	ebx, byte ptr [ecx+1]
		sub	eax, ebx
		jnz	short loc_1001F58A
		cmp	esi, 2
		jbe	short loc_1001F596
		movzx	eax, byte ptr [edx+2]
		movzx	ebx, byte ptr [ecx+2]
		sub	eax, ebx
		jnz	short loc_1001F58A
		cmp	esi, 3
		jbe	short loc_1001F596
		movzx	eax, byte ptr [edx+3]
		movzx	ecx, byte ptr [ecx+3]
		sub	eax, ecx

loc_1001F58A:				; CODE XREF: sub_1001F4F0+67j
					; sub_1001F4F0+78j ...
		sar	eax, 1Fh
		or	eax, 1
		xor	ebx, ebx
		cmp	eax, ebx
		jl	short loc_1001F5AE

loc_1001F596:				; CODE XREF: sub_1001F4F0+5Dj
					; sub_1001F4F0+6Cj ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001F5AE:				; CODE XREF: sub_1001F4F0+A4j
		lea	edx, [esp+64h+var_30]
		push	edx
		mov	[esp+68h+var_24], ebx
		mov	[esp+68h+var_44], ebx
		mov	[esp+68h+var_34], ebx
		mov	[esp+68h+var_14], ebx
		mov	[esp+68h+var_4], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001F76C
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001F76C
		lea	ecx, [esp+64h+var_40]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001F76C
		lea	edx, [esp+64h+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001F76C
		lea	eax, [esp+64h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001F76C
		mov	ecx, [edi+18h]
		mov	edx, [edi+14h]
		push	ecx
		push	edx
		lea	eax, [esp+6Ch+var_30]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001F76C
		mov	ecx, [esp+64h+arg_4]
		push	ebp
		push	ecx
		lea	edx, [esp+6Ch+var_50]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001F76C
		cmp	dword_100490EC,	ebx
		jz	short loc_1001F6BE
		lea	eax, [esp+64h+var_10]
		push	eax
		lea	ecx, [esp+68h+var_20]
		push	ecx
		push	ebp
		lea	edx, [esp+70h+var_30]
		push	edx
		push	edi
		call	sub_1001F150
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	loc_1001F76C
		lea	eax, [esp+64h+var_50]
		push	eax
		lea	ecx, [esp+68h+var_30]
		push	ecx
		lea	edx, [esp+6Ch+var_20]
		push	edx
		push	eax
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_1001F76C

loc_1001F6BE:				; CODE XREF: sub_1001F4F0+187j
		cmp	[edi+3Ch], ebx
		jz	short loc_1001F70D
		cmp	[edi+48h], ebx
		jz	short loc_1001F70D
		cmp	[edi+54h], ebx
		jz	short loc_1001F70D
		cmp	[edi+60h], ebx
		jz	short loc_1001F70D
		cmp	[edi+6Ch], ebx
		jz	short loc_1001F70D
		cmp	[esp+64h+arg_8], ebx
		jz	short loc_1001F6F1
		lea	ecx, [esp+64h+var_50]
		push	ecx
		lea	edx, [esp+68h+var_40]
		push	edx
		call	sub_1001EDD0
		add	esp, 8
		jmp	short loc_1001F724
; ---------------------------------------------------------------------------

loc_1001F6F1:				; CODE XREF: sub_1001F4F0+1EBj
		lea	eax, [esp+64h+var_50]
		push	eax
		lea	ecx, [esp+68h+var_40]
		push	ecx
		mov	eax, edi
		call	sub_1001EA20
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_1001F72A
		jmp	short loc_1001F76C
; ---------------------------------------------------------------------------

loc_1001F70D:				; CODE XREF: sub_1001F4F0+1D1j
					; sub_1001F4F0+1D6j ...
		lea	edx, [esp+64h+var_30]
		push	edx
		lea	eax, [esp+68h+var_50]
		push	eax
		lea	ecx, [esp+6Ch+var_40]
		push	ecx
		call	sub_1001E940
		add	esp, 0Ch

loc_1001F724:				; CODE XREF: sub_1001F4F0+1FFj
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_1001F76C

loc_1001F72A:				; CODE XREF: sub_1001F4F0+219j
		cmp	dword_100490EC,	0
		jz	short loc_1001F751
		lea	edx, [esp+64h+var_40]
		push	edx
		lea	eax, [esp+68h+var_30]
		push	eax
		lea	ecx, [esp+6Ch+var_10]
		push	ecx
		push	edx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_1001F76C

loc_1001F751:				; CODE XREF: sub_1001F4F0+241j
		mov	eax, [esp+64h+Dst]
		push	ebp		; int
		push	eax		; Dst
		lea	ecx, [esp+6Ch+var_40]
		push	ecx		; int
		call	sub_10029F70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1001F76C
		xor	esi, esi

loc_1001F76C:				; CODE XREF: sub_1001F4F0+E3j
					; sub_1001F4F0+FAj ...
		lea	edx, [esp+64h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+6Ch+var_40]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+70h+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+74h+var_10]
		push	eax
		call	sub_10028EF0
		add	esp, 14h
		test	esi, esi
		jz	short loc_1001F812
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001F802
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001F7E8
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001F7CE
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	ebx, 0FFFFFFFFh
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	edi
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001F7CE:				; CODE XREF: sub_1001F4F0+2C2j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	ebx, 0FFFFFFFFh
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	edi
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001F7E8:				; CODE XREF: sub_1001F4F0+2BDj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		or	ebx, 0FFFFFFFFh
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	edi
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001F802:				; CODE XREF: sub_1001F4F0+2B8j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	ebx, 0FFFFFFFFh

loc_1001F812:				; CODE XREF: sub_1001F4F0+2B3j
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	edi
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001F81C:				; CODE XREF: sub_1001F4F0+Cj
					; sub_1001F4F0+17j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		add	esp, 54h
		retn
sub_1001F4F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001F840(int,	void *Dst, int)
sub_1001F840	proc near		; CODE XREF: sub_10020400+2Bp
					; sub_10020BF0+35p
					; DATA XREF: ...

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+Dst]
		push	0		; int
		push	eax		; int
		mov	eax, [esp+8+arg_0]
		push	ecx		; Dst
		call	sub_1001F4F0
		add	esp, 0Ch
		retn
sub_1001F840	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001F860(int,	void *Dst, int)
sub_1001F860	proc near		; CODE XREF: sub_100201F0+53p
					; sub_10020A60+9Ap ...

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, [esp+Dst]
		push	1		; int
		push	eax		; int
		mov	eax, [esp+8+arg_0]
		push	ecx		; Dst
		call	sub_1001F4F0
		add	esp, 0Ch
		retn
sub_1001F860	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001F880	proc near		; DATA XREF: .rdata:100392CCo

var_B0		= byte ptr -0B0h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0B0h
		push	ebx
		xor	ebx, ebx
		push	ebp
		lea	eax, [esp+0B8h+var_80]
		push	esi
		push	eax
		xor	ebp, ebp
		mov	[esp+0C0h+var_74], ebx
		mov	[esp+0C0h+var_94], ebx
		mov	[esp+0C0h+var_14], ebx
		mov	[esp+0C0h+var_54], ebx
		mov	[esp+0C0h+var_44], ebx
		mov	[esp+0C0h+var_84], ebx
		mov	[esp+0C0h+var_64], ebx
		mov	[esp+0C0h+var_34], ebx
		mov	[esp+0C0h+var_24], ebx
		mov	[esp+0C0h+var_4], ebx
		mov	[esp+0C0h+var_A4], ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	ecx, [esp+0BCh+var_A0]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	edx, [esp+0BCh+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	eax, [esp+0BCh+var_60]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	ecx, [esp+0BCh+var_50]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	edx, [esp+0BCh+var_90]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	eax, [esp+0BCh+var_70]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	ecx, [esp+0BCh+var_40]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	edx, [esp+0BCh+var_30]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	eax, [esp+0BCh+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		lea	ecx, [esp+0BCh+var_B0]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_1001FD71
		push	edi
		mov	edi, [esp+0C0h+arg_0]
		mov	eax, [edi+14h]
		cmp	eax, ebx
		jz	loc_1001FD6B
		cmp	[edi+38h], ebx
		jz	loc_1001FD6B
		cmp	[edi+44h], ebx
		jz	loc_1001FD6B
		cmp	[edi+20h], ebx
		jz	loc_1001FD6B
		cmp	[edi+2Ch], ebx
		jz	loc_1001FD6B
		cmp	[edi+50h], ebx
		jz	loc_1001FD6B
		cmp	[edi+5Ch], ebx
		jz	loc_1001FD6B
		cmp	[edi+68h], ebx
		jz	loc_1001FD6B
		mov	edx, [edi+18h]
		push	edx
		push	eax
		lea	eax, [esp+0C8h+var_20]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		mov	ecx, [edi+3Ch]
		mov	edx, [edi+38h]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_80]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		mov	ecx, [edi+48h]
		mov	edx, [edi+44h]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_A0]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		mov	ecx, [edi+24h]
		mov	edx, [edi+20h]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_90]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		mov	ecx, [edi+30h]
		mov	edx, [edi+2Ch]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_70]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		mov	ecx, [edi+54h]
		mov	edx, [edi+50h]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_40]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		mov	ecx, [edi+60h]
		mov	edx, [edi+5Ch]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_30]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		mov	ecx, [edi+6Ch]
		mov	edx, [edi+68h]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_10]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		lea	ecx, [esp+0C0h+var_A0]
		push	ecx
		lea	edx, [esp+0C4h+var_80]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jg	short loc_1001FB3C
		or	ebp, 0FFFFFFFFh
		jmp	loc_1001FD70
; ---------------------------------------------------------------------------

loc_1001FB3C:				; CODE XREF: sub_1001F880+2B2j
		lea	eax, [esp+0C0h+var_B0]
		push	eax
		lea	ecx, [esp+0C4h+var_A0]
		push	ecx
		lea	edx, [esp+0C8h+var_80]
		push	edx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		lea	eax, [esp+0C0h+var_20]
		push	eax
		lea	ecx, [esp+0C4h+var_B0]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001FB7E
		or	ebp, 0FFFFFFFFh
		jmp	loc_1001FD70
; ---------------------------------------------------------------------------

loc_1001FB7E:				; CODE XREF: sub_1001F880+2F4j
		lea	edx, [esp+0C0h+var_60]
		push	edx
		lea	eax, [esp+0C4h+var_80]
		push	1
		push	eax
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		lea	ecx, [esp+0C0h+var_B0]
		push	ecx
		lea	edx, [esp+0C4h+var_60]
		push	edx
		lea	eax, [esp+0C8h+var_90]
		push	eax
		call	sub_1002B820
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		lea	ecx, [esp+0C0h+var_B0]
		push	1
		push	ecx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jz	short loc_1001FBD8
		or	ebp, 0FFFFFFFFh
		jmp	loc_1001FD70
; ---------------------------------------------------------------------------

loc_1001FBD8:				; CODE XREF: sub_1001F880+34Ej
		lea	edx, [esp+0C0h+var_50]
		push	edx
		lea	eax, [esp+0C4h+var_A0]
		push	1
		push	eax
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		lea	ecx, [esp+0C0h+var_B0]
		push	ecx
		lea	edx, [esp+0C4h+var_50]
		push	edx
		lea	eax, [esp+0C8h+var_90]
		push	eax
		call	sub_1002B820
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		lea	ecx, [esp+0C0h+var_B0]
		push	1
		push	ecx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jz	short loc_1001FC32
		or	ebp, 0FFFFFFFFh
		jmp	loc_1001FD70
; ---------------------------------------------------------------------------

loc_1001FC32:				; CODE XREF: sub_1001F880+3A8j
		lea	edx, [esp+0C0h+var_B0]
		push	edx
		lea	eax, [esp+0C4h+var_60]
		push	eax
		lea	ecx, [esp+0C8h+var_90]
		push	ecx
		lea	edx, [esp+0CCh+var_70]
		push	edx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_1001FD70
		lea	eax, [esp+0C0h+var_B0]
		push	1
		push	eax
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jz	short loc_1001FC73
		or	ebp, 0FFFFFFFFh
		jmp	loc_1001FD70
; ---------------------------------------------------------------------------

loc_1001FC73:				; CODE XREF: sub_1001F880+3E9j
		lea	ecx, [esp+0C0h+var_B0]
		push	ecx
		lea	edx, [esp+0C4h+var_50]
		push	edx
		lea	eax, [esp+0C8h+var_90]
		push	eax
		lea	ecx, [esp+0CCh+var_70]
		push	ecx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_1001FD70
		lea	edx, [esp+0C0h+var_B0]
		push	1
		push	edx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jz	short loc_1001FCB4
		or	ebp, 0FFFFFFFFh
		jmp	loc_1001FD70
; ---------------------------------------------------------------------------

loc_1001FCB4:				; CODE XREF: sub_1001F880+42Aj
		lea	eax, [esp+0C0h+var_B0]
		push	eax
		lea	ecx, [esp+0C4h+var_60]
		push	ecx
		lea	edx, [esp+0C8h+var_70]
		push	edx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1001FD70
		lea	eax, [esp+0C0h+var_40]
		push	eax
		lea	ecx, [esp+0C4h+var_B0]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001FCF3
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001FD70
; ---------------------------------------------------------------------------

loc_1001FCF3:				; CODE XREF: sub_1001F880+46Cj
		lea	edx, [esp+0C0h+var_B0]
		push	edx
		lea	eax, [esp+0C4h+var_50]
		push	eax
		lea	ecx, [esp+0C8h+var_70]
		push	ecx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_1001FD70
		lea	edx, [esp+0C0h+var_30]
		push	edx
		lea	eax, [esp+0C4h+var_B0]
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1001FD2E
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001FD70
; ---------------------------------------------------------------------------

loc_1001FD2E:				; CODE XREF: sub_1001F880+4A7j
		lea	ecx, [esp+0C0h+var_B0]
		push	ecx
		lea	edx, [esp+0C4h+var_80]
		push	edx
		lea	eax, [esp+0C8h+var_10]
		push	eax
		lea	ecx, [esp+0CCh+var_A0]
		push	ecx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	short loc_1001FD70
		lea	edx, [esp+0C0h+var_B0]
		push	1
		push	edx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jz	short loc_1001FD70
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001FD70
; ---------------------------------------------------------------------------

loc_1001FD6B:				; CODE XREF: sub_1001F880+158j
					; sub_1001F880+161j ...
		mov	esi, 0FFFFFFFCh

loc_1001FD70:				; CODE XREF: sub_1001F880+1B6j
					; sub_1001F880+1D5j ...
		pop	edi

loc_1001FD71:				; CODE XREF: sub_1001F880+56j
					; sub_1001F880+6Dj ...
		lea	eax, [esp+0BCh+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0C0h+var_80]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0C4h+var_A0]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0C8h+var_60]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0CCh+var_50]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0D0h+var_90]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0D4h+var_70]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0D8h+var_40]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0DCh+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0E0h+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0E4h+var_B0]
		push	ecx
		call	sub_10028EF0
		add	esp, 2Ch
		cmp	esi, ebx
		jz	short loc_1001FE69
		cmp	esi, 0FFFFFFFCh
		jz	short loc_1001FE4F
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1001FE35
		cmp	esi, 0FFFFFFFEh
		jz	short loc_1001FE1B
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001FE1B:				; CODE XREF: sub_1001F880+57Fj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001FE35:				; CODE XREF: sub_1001F880+57Aj
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001FE4F:				; CODE XREF: sub_1001F880+575j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_1001FE69:				; CODE XREF: sub_1001F880+570j
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 0B0h
		retn
sub_1001F880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001FE80	proc near		; DATA XREF: .rdata:10039434o
		push	offset sub_1001EF50
		push	offset dword_1004B744
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1001FEA8
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1001FEA8:				; CODE XREF: sub_1001FE80+15j
		xor	eax, eax
		retn
sub_1001FE80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001FEB0	proc near		; CODE XREF: sub_1001FF70j
		push	ebx
		xor	ebx, ebx
		cmp	dword_1004B744,	ebx
		jz	loc_1001FF6D
		push	esi
		mov	esi, dword_1004B73C
		cmp	esi, offset dword_1004B73C
		jz	short loc_1001FF28
		push	edi
		nop

loc_1001FED0:				; CODE XREF: sub_1001FEB0+75j
		mov	ecx, [esi+4]
		mov	edx, [esi]
		mov	[ecx], edx
		mov	ecx, [esi]
		mov	edx, [esi+4]
		mov	[ecx+4], edx
		cmp	[esi+18h], ebx
		jz	short loc_1001FF06

loc_1001FEE4:				; CODE XREF: sub_1001FEB0+54j
		mov	edi, [esi+18h]
		mov	eax, [edi]
		lea	ecx, [edi+4]
		push	ecx
		mov	[esi+18h], eax
		call	sub_10028EF0
		add	edi, 14h
		push	edi
		call	sub_10028EF0
		add	esp, 8
		cmp	[esi+18h], ebx
		jnz	short loc_1001FEE4

loc_1001FF06:				; CODE XREF: sub_1001FEB0+32j
		lea	edx, [esi+8]
		push	ebx
		push	edx
		call	SECITEM_FreeItem_Util
		push	esi
		call	PORT_Free_Util
		mov	esi, dword_1004B73C
		add	esp, 0Ch
		cmp	esi, offset dword_1004B73C
		jnz	short loc_1001FED0
		pop	edi

loc_1001FF28:				; CODE XREF: sub_1001FEB0+1Cj
		mov	eax, dword_1004B734
		pop	esi
		cmp	eax, ebx
		jz	short loc_1001FF42
		push	eax
		call	ds:PR_DestroyCondVar
		add	esp, 4
		mov	dword_1004B734,	ebx

loc_1001FF42:				; CODE XREF: sub_1001FEB0+80j
		mov	eax, dword_1004B730
		cmp	eax, ebx
		jz	short loc_1001FF5B
		push	eax
		call	ds:PR_DestroyLock
		add	esp, 4
		mov	dword_1004B730,	ebx

loc_1001FF5B:				; CODE XREF: sub_1001FEB0+99j
		mov	dword_1004B744,	ebx
		mov	dword_1004B748,	ebx
		mov	dword_1004B74C,	ebx

loc_1001FF6D:				; CODE XREF: sub_1001FEB0+9j
		pop	ebx
		retn
sub_1001FEB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_1001FF70	proc near		; DATA XREF: .rdata:100392D0o
		jmp	sub_1001FEB0
sub_1001FF70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001FF80	proc near		; DATA XREF: .rdata:10039438o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword_1004BA7C,	eax
		retn
sub_1001FF80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001FF90	proc near		; CODE XREF: sub_10020B60+3Ap
					; sub_10021200+43p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+10h+arg_0]
		push	edi
		mov	ebx, eax
		call	PORT_Alloc_Util
		mov	ebp, eax
		add	esp, 4
		mov	[esp+10h+var_4], ebp
		test	ebp, ebp
		jnz	short loc_1001FFB2
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001FFB2:				; CODE XREF: sub_1001FF90+1Bj
		push	esi
		lea	esi, [ebp+1]
		mov	byte ptr [ebp+0], 0
		mov	[esi], bl
		mov	eax, ebx
		inc	esi
		dec	eax
		jz	loc_1002008D
		dec	eax
		jnz	loc_1002009C
		mov	eax, [esp+14h+arg_4]
		mov	ebx, edi
		sub	ebx, [eax+8]
		sub	ebx, 3
		cmp	ebx, 8
		jl	loc_1002009C
		add	edi, 0FFFFFFFEh
		push	edi
		push	esi
		call	sub_1000CD60
		add	esp, 8
		test	eax, eax
		jnz	short loc_10020072
		xor	ebp, ebp
		test	ebx, ebx
		jle	short loc_10020047
		lea	esp, [esp+0]

loc_10020000:				; CODE XREF: sub_1001FF90+B5j
		cmp	byte ptr [esi+ebp], 0
		jnz	short loc_10020042
		cmp	edi, ebx
		jg	short loc_10020030
		mov	edi, [esp+14h+arg_0]
		mov	ecx, edi
		sub	ecx, ebx
		sub	ecx, 2
		push	ecx
		lea	edx, [ebx+esi]
		push	edx
		call	sub_1000CD60
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002006E
		add	edi, 0FFFFFFFEh
		lea	esp, [esp+0]

loc_10020030:				; CODE XREF: sub_1001FF90+78j
					; sub_1001FF90+ABj
		mov	al, [edi+esi-1]
		dec	edi
		test	al, al
		jnz	short loc_1002003F
		cmp	edi, ebx
		jg	short loc_10020030
		jmp	short loc_10020043
; ---------------------------------------------------------------------------

loc_1002003F:				; CODE XREF: sub_1001FF90+A7j
		mov	[esi+ebp], al

loc_10020042:				; CODE XREF: sub_1001FF90+74j
		inc	ebp

loc_10020043:				; CODE XREF: sub_1001FF90+ADj
		cmp	ebp, ebx
		jl	short loc_10020000

loc_10020047:				; CODE XREF: sub_1001FF90+67j
		mov	eax, [esp+14h+arg_4]
		add	esi, ebx
		mov	byte ptr [esi],	0
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx		; Size
		push	edx		; Src
		inc	esi
		push	esi		; Dst
		call	memcpy
		mov	ebp, [esp+20h+var_4]
		add	esp, 0Ch
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1002006E:				; CODE XREF: sub_1001FF90+94j
		mov	ebp, [esp+14h+var_4]

loc_10020072:				; CODE XREF: sub_1001FF90+61j
		push	ebp
		call	PORT_Free_Util
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 8
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1002008D:				; CODE XREF: sub_1001FF90+30j
		mov	ebx, [esp+14h+arg_4]
		sub	edi, [ebx+8]
		sub	edi, 3
		cmp	edi, 8
		jge	short loc_100200AD

loc_1002009C:				; CODE XREF: sub_1001FF90+37j
					; sub_1001FF90+4Cj
		push	ebp
		call	PORT_Free_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100200AD:				; CODE XREF: sub_1001FF90+10Aj
		push	edi		; Size
		push	0FFh		; Val
		push	esi		; Dst
		call	memset
		add	esi, edi
		mov	byte ptr [esi],	0
		mov	eax, [ebx+8]
		mov	ecx, [ebx+4]
		push	eax		; Size
		push	ecx		; Src
		inc	esi
		push	esi		; Dst
		call	memcpy
		add	esp, 18h
		pop	esi
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1001FF90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100200E0	proc near		; CODE XREF: sub_10020450+150p
					; sub_10020450+18Ep ...

var_10		= byte ptr -10h
var_F		= byte ptr -0Fh
var_E		= byte ptr -0Eh
var_D		= byte ptr -0Dh
Src		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	esi
		push	eax
		call	sub_10008790
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_100200FB
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100200FB:				; CODE XREF: sub_100200E0+11j
		mov	ecx, [esi+4]
		push	ebx
		push	ebp
		call	ecx
		mov	ecx, [esi]
		mov	edx, [esp+1Ch+arg_4]
		mov	ebp, eax
		lea	eax, [ecx+edx-1]
		xor	edx, edx
		div	ecx
		xor	ebx, ebx
		mov	[esp+1Ch+var_8], eax
		test	eax, eax
		jz	loc_100201D4
		push	edi

loc_10020121:				; CODE XREF: sub_100200E0+EDj
		mov	eax, ebx
		shr	eax, 18h
		mov	ecx, ebx
		mov	edx, ebx
		shr	ecx, 10h
		shr	edx, 8
		mov	[esp+20h+var_10], al
		mov	[esp+20h+var_F], cl
		mov	[esp+20h+var_E], dl
		mov	[esp+20h+var_D], bl
		mov	eax, [esi+10h]
		push	ebp
		call	eax
		mov	ecx, [esp+24h+arg_C]
		mov	edx, [esp+24h+arg_8]
		mov	eax, [esi+14h]
		push	ecx
		push	edx
		push	ebp
		call	eax
		mov	edx, [esi+14h]
		push	4
		lea	ecx, [esp+34h+var_10]
		push	ecx
		push	ebp
		call	edx
		mov	eax, [esi]
		mov	ecx, [esp+3Ch+var_8]
		mov	edi, eax
		imul	edi, ebx
		add	edi, [esp+3Ch+arg_0]
		add	esp, 1Ch
		dec	ecx
		push	eax
		cmp	ebx, ecx
		jz	short loc_1002018C
		mov	ecx, [esi+18h]
		lea	eax, [esp+24h+var_4]
		push	eax
		push	edi
		push	ebp
		call	ecx
		add	esp, 10h
		jmp	short loc_100201C8
; ---------------------------------------------------------------------------

loc_1002018C:				; CODE XREF: sub_100200E0+99j
		call	PORT_Alloc_Util
		mov	edx, [esi]
		push	edx
		mov	edx, [esi+18h]
		lea	ecx, [esp+28h+var_4]
		push	ecx
		push	eax
		push	ebp
		mov	[esp+34h+Src], eax
		call	edx
		mov	eax, [esi]
		mov	ecx, [esp+34h+arg_4]
		imul	eax, ebx
		mov	edx, [esp+34h+Src]
		sub	ecx, eax
		push	ecx		; Size
		push	edx		; Src
		push	edi		; Dst
		call	memcpy
		mov	eax, [esp+40h+Src]
		push	eax
		call	PORT_Free_Util
		add	esp, 24h

loc_100201C8:				; CODE XREF: sub_100200E0+AAj
		inc	ebx
		cmp	ebx, [esp+20h+var_8]
		jb	loc_10020121
		pop	edi

loc_100201D4:				; CODE XREF: sub_100200E0+3Aj
		mov	ecx, [esi+0Ch]
		push	1
		push	ebp
		call	ecx
		add	esp, 8
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
sub_100200E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100201F0(int,	void *Dst, int,	int, void *Src,	size_t Size)
sub_100201F0	proc near		; DATA XREF: .rdata:100394ACo

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
Src		= dword	ptr  14h
Size		= dword	ptr  18h

		push	ebp
		mov	ebp, [esp+4+arg_0]
		mov	eax, [ebp+14h]
		xor	ecx, ecx
		cmp	[eax], cl
		push	esi
		mov	esi, [ebp+18h]
		setz	cl
		sub	esi, ecx
		cmp	[esp+8+arg_C], esi
		jnb	short loc_10020211
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10020211:				; CODE XREF: sub_100201F0+19j
		push	ebx
		mov	ebx, [esp+0Ch+Size]
		cmp	ebx, esi
		jbe	short loc_10020223
		or	ebx, 0FFFFFFFFh
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10020223:				; CODE XREF: sub_100201F0+28j
		push	edi
		push	esi
		call	PORT_ZAlloc_Util
		mov	edx, [esp+14h+Src]
		mov	edi, eax
		push	ebx		; Size
		sub	eax, ebx
		push	edx		; Src
		add	eax, esi
		push	eax		; Dst
		call	memcpy
		mov	ecx, [esp+20h+Dst]
		push	edi		; int
		push	ecx		; Dst
		push	ebp		; int
		call	sub_1001F860
		mov	edx, [esp+2Ch+arg_8]
		add	esp, 1Ch
		mov	ebx, eax
		mov	[edx], esi
		test	edi, edi
		jz	short loc_10020261
		push	esi
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8

loc_10020261:				; CODE XREF: sub_100201F0+65j
		pop	edi
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_100201F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10020270	proc near		; DATA XREF: .rdata:100394B0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	eax, [esi+8]
		xor	ecx, ecx
		cmp	[eax], cl
		push	edi
		mov	edi, [esi+0Ch]
		setz	cl
		sub	edi, ecx
		cmp	[esp+10h+arg_8], edi
		jnz	loc_10020311
		mov	ebx, [esp+10h+arg_10]
		cmp	ebx, edi
		ja	short loc_10020311
		lea	edx, [edi+1]
		push	edx
		call	PORT_Alloc_Util
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	short loc_10020311
		mov	eax, [esp+10h+arg_4]
		push	eax		; int
		push	ebp		; Dst
		push	esi		; int
		call	sub_1001E6B0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10020308
		mov	esi, [esp+10h+arg_C]
		mov	eax, ebp
		sub	eax, ebx
		add	eax, edi
		mov	ecx, ebx
		cmp	ebx, 4
		jb	short loc_100202E4
		nop

loc_100202D0:				; CODE XREF: sub_10020270+72j
		mov	edx, [eax]
		cmp	edx, [esi]
		jnz	short loc_10020308
		sub	ecx, 4
		add	esi, 4
		add	eax, 4
		cmp	ecx, 4
		jnb	short loc_100202D0

loc_100202E4:				; CODE XREF: sub_10020270+5Dj
		test	ecx, ecx
		jz	short loc_10020319
		mov	dl, [esi]
		cmp	dl, [eax]
		jnz	short loc_10020308
		cmp	ecx, 1
		jbe	short loc_10020319
		mov	dl, [esi+1]
		cmp	dl, [eax+1]
		jnz	short loc_10020308
		cmp	ecx, 2
		jbe	short loc_10020319
		mov	cl, [esi+2]
		cmp	cl, [eax+2]
		jz	short loc_10020319

loc_10020308:				; CODE XREF: sub_10020270+4Cj
					; sub_10020270+64j ...
		push	ebp
		call	PORT_Free_Util
		add	esp, 4

loc_10020311:				; CODE XREF: sub_10020270+1Bj
					; sub_10020270+27j ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020319:				; CODE XREF: sub_10020270+76j
					; sub_10020270+81j ...
		push	ebp
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10020270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020330(int,	void *Dst, int,	int, int, int)
sub_10020330	proc near		; DATA XREF: .rdata:100394B4o

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+8]
		xor	edx, edx
		cmp	[ecx], dl
		push	esi
		mov	esi, [eax+0Ch]
		setz	dl
		sub	esi, edx
		cmp	[esp+4+arg_14],	esi
		jnz	short loc_10020367
		cmp	[esp+4+arg_C], esi
		jb	short loc_10020367
		mov	ecx, [esp+4+arg_10]
		mov	edx, [esp+4+Dst]
		push	ecx		; int
		push	edx		; Dst
		push	eax		; int
		call	sub_1001E6B0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1002036C

loc_10020367:				; CODE XREF: sub_10020330+18j
					; sub_10020330+1Ej
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002036C:				; CODE XREF: sub_10020330+35j
		mov	eax, [esp+4+arg_8]
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		retn
sub_10020330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020380(int,	void *Dst, int,	int, void *Src,	size_t Size)
sub_10020380	proc near		; DATA XREF: .rdata:100394B8o

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
Src		= dword	ptr  14h
Size		= dword	ptr  18h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		mov	eax, [ebp+8]
		xor	ecx, ecx
		cmp	[eax], cl
		push	esi
		mov	esi, [ebp+0Ch]
		setz	cl
		push	edi
		sub	esi, ecx
		cmp	[esp+10h+arg_C], esi
		jb	short loc_100203DE
		mov	ebx, [esp+10h+Size]
		cmp	ebx, esi
		ja	short loc_100203DE
		push	esi
		call	PORT_ZAlloc_Util
		mov	edx, [esp+14h+Src]
		mov	edi, eax
		push	ebx		; Size
		sub	eax, ebx
		push	edx		; Src
		add	eax, esi
		push	eax		; Dst
		call	memcpy
		mov	ecx, [esp+20h+Dst]
		push	edi		; int
		push	ecx		; Dst
		push	ebp		; int
		call	sub_1001E6B0
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_100203E6
		test	edi, edi
		jz	short loc_100203DE
		push	esi
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8

loc_100203DE:				; CODE XREF: sub_10020380+1Bj
					; sub_10020380+23j ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100203E6:				; CODE XREF: sub_10020380+4Ej
		push	esi
		push	edi
		call	PORT_ZFree_Util
		mov	edx, [esp+18h+arg_8]
		add	esp, 8
		pop	edi
		mov	[edx], esi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10020380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020400(int,	void *Dst, int,	int, int, int)
sub_10020400	proc near		; DATA XREF: .rdata:100394BCo

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+14h]
		xor	edx, edx
		cmp	[ecx], dl
		push	esi
		mov	esi, [eax+18h]
		setz	dl
		sub	esi, edx
		cmp	esi, [esp+4+arg_C]
		ja	short loc_10020437
		cmp	[esp+4+arg_14],	esi
		jnz	short loc_10020437
		mov	ecx, [esp+4+arg_10]
		mov	edx, [esp+4+Dst]
		push	ecx		; int
		push	edx		; Dst
		push	eax		; int
		call	sub_1001F840
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1002043C

loc_10020437:				; CODE XREF: sub_10020400+18j
					; sub_10020400+1Ej
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002043C:				; CODE XREF: sub_10020400+35j
		mov	eax, [esp+4+arg_8]
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		retn
sub_10020400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020450(int,	int, size_t Size, int, int, int, int)
sub_10020450	proc near		; CODE XREF: sub_10020A60+C9p

var_6D		= byte ptr -6Dh
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
Src		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
Dst		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Size		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 70h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+70h+var_4], eax
		mov	eax, [esp+70h+arg_0]
		push	ebx
		mov	ebx, [esp+74h+arg_14]
		push	ebp
		mov	ebp, [esp+78h+Size]
		mov	[esp+78h+Dst], eax
		mov	eax, [esp+78h+arg_C]
		push	esi
		push	eax
		mov	[esp+80h+var_48], ecx
		mov	[esp+80h+Src], edx
		mov	[esp+80h+var_58], 0FFFFFFFFh
		call	sub_10008790
		mov	esi, eax
		mov	eax, [esi]
		lea	ecx, [eax+eax+2]
		add	esp, 4
		cmp	ebp, ecx
		jnb	short loc_100204C5
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+70h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_100204C5:				; CODE XREF: sub_10020450+51j
		mov	edx, [esi+4]
		push	edi
		call	edx
		mov	edi, eax
		test	edi, edi
		jnz	short loc_100204F4
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+70h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_100204F4:				; CODE XREF: sub_10020450+7Fj
		mov	eax, [esi+10h]
		push	edi
		call	eax
		mov	eax, [esp+84h+arg_18]
		add	esp, 4
		test	eax, eax
		jz	short loc_10020513
		mov	ecx, [esi+14h]
		push	eax
		push	ebx
		push	edi
		call	ecx
		add	esp, 0Ch

loc_10020513:				; CODE XREF: sub_10020450+B6j
		mov	ecx, [esi+18h]
		push	40h
		lea	edx, [esp+84h+var_6C]
		push	edx
		lea	eax, [esp+88h+var_44]
		push	eax
		push	edi
		call	ecx
		mov	edx, [esi+0Ch]
		push	1
		push	edi
		call	edx
		push	ebp
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		jnz	short loc_1002054E
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_1002075C
; ---------------------------------------------------------------------------

loc_1002054E:				; CODE XREF: sub_10020450+EAj
		mov	ebx, ebp
		sub	ebx, [esi]
		dec	ebx
		push	ebx
		mov	[esp+84h+var_4C], ebx
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esp+80h+var_68], eax
		test	eax, eax
		jnz	short loc_1002057A
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	loc_10020752
; ---------------------------------------------------------------------------

loc_1002057A:				; CODE XREF: sub_10020450+116j
		mov	eax, [esp+80h+Src]
		push	ebp		; Size
		push	eax		; Src
		push	edi		; Dst
		call	memcpy
		mov	eax, [esi]
		mov	ecx, ebp
		sub	ecx, eax
		dec	ecx
		push	ecx
		lea	edx, [eax+edi+1]
		push	edx
		push	eax
		mov	eax, [esp+98h+var_68]
		push	eax
		mov	eax, [esp+9Ch+arg_10]
		call	sub_100200E0
		xor	eax, eax
		add	esp, 1Ch
		mov	[esp+80h+var_6C], eax
		cmp	[esi], eax
		jbe	short loc_100205CA

loc_100205B2:				; CODE XREF: sub_10020450+178j
		mov	ecx, [esp+80h+var_68]
		mov	dl, [eax+ecx]
		xor	[edi+eax+1], dl
		mov	eax, [esp+80h+var_6C]
		inc	eax
		mov	[esp+80h+var_6C], eax
		cmp	eax, [esi]
		jb	short loc_100205B2

loc_100205CA:				; CODE XREF: sub_10020450+160j
		mov	eax, [esi]
		mov	edx, [esp+80h+var_68]
		push	eax
		mov	eax, [esp+84h+arg_10]
		lea	ecx, [edi+1]
		push	ecx
		push	ebx
		push	edx
		call	sub_100200E0
		xor	eax, eax
		add	esp, 10h
		mov	[esp+80h+var_6C], eax
		test	ebx, ebx
		jz	short loc_10020610

loc_100205F0:				; CODE XREF: sub_10020450+1BEj
		mov	ecx, [esi]
		mov	edx, [esp+80h+var_68]
		add	ecx, eax
		mov	al, [eax+edx]
		xor	[ecx+edi+1], al
		mov	eax, [esp+80h+var_6C]
		lea	ecx, [ecx+edi+1]
		inc	eax
		mov	[esp+80h+var_6C], eax
		cmp	eax, ebx
		jb	short loc_100205F0

loc_10020610:				; CODE XREF: sub_10020450+19Ej
		mov	cl, [edi]
		mov	al, cl
		neg	al
		or	al, cl
		mov	ecx, [esi]
		not	al
		xor	dl, dl
		xor	bl, bl
		shr	al, 7
		mov	[esp+80h+var_60], 0
		mov	[esp+80h+var_5C], ecx
		lea	esi, [ecx+edi+1]
		mov	[esp+80h+var_6D], dl
		test	ecx, ecx
		jz	short loc_10020662
		lea	edx, [esp+80h+var_44]
		sub	edx, esi
		mov	[esp+80h+var_50], edx
		mov	dl, [esp+80h+var_6D]
		mov	[esp+80h+Src], ecx
		lea	ecx, [ecx+0]

loc_10020650:				; CODE XREF: sub_10020450+210j
		mov	ecx, [esp+80h+var_50]
		mov	cl, [ecx+esi]
		xor	cl, [esi]
		inc	esi
		or	dl, cl
		dec	[esp+80h+Src]
		jnz	short loc_10020650

loc_10020662:				; CODE XREF: sub_10020450+1E9j
		mov	esi, [esp+80h+var_5C]
		mov	cl, dl
		neg	cl
		or	cl, dl
		not	cl
		shr	cl, 7
		lea	esi, [esi+esi+1]
		and	al, cl
		mov	[esp+80h+var_6D], al
		mov	[esp+80h+var_6C], esi
		cmp	esi, ebp
		jnb	short loc_100206E9

loc_10020683:				; CODE XREF: sub_10020450+297j
		mov	cl, [esi+edi]
		mov	al, 1
		sub	al, cl
		lea	edx, [ecx-1]
		or	al, dl
		not	al
		shr	al, 7
		movzx	eax, al
		mov	[esp+80h+var_5C], eax
		movzx	edx, bl
		not	edx
		and	edx, eax
		dec	edx
		mov	eax, edx
		and	edx, [esp+80h+var_60]
		not	eax
		and	eax, esi
		or	eax, edx
		mov	[esp+80h+var_60], eax
		mov	al, byte ptr [esp+80h+var_5C]
		dec	al
		and	bl, al
		not	al
		and	al, 1
		mov	dl, cl
		neg	dl
		or	dl, cl
		or	bl, al
		not	dl
		shr	dl, 7
		mov	al, bl
		not	al
		not	dl
		and	dl, al
		mov	al, [esp+80h+var_6D]
		dec	dl
		inc	esi
		and	al, dl
		mov	[esp+80h+var_6D], al
		mov	[esp+80h+var_6C], esi
		cmp	esi, ebp
		jb	short loc_10020683

loc_100206E9:				; CODE XREF: sub_10020450+231j
		test	al, bl
		jnz	short loc_100206FC
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10020740
; ---------------------------------------------------------------------------

loc_100206FC:				; CODE XREF: sub_10020450+29Bj
		mov	ecx, [esp+80h+var_60]
		mov	edx, [esp+80h+var_48]
		inc	ecx
		mov	eax, ebp
		sub	eax, ecx
		mov	[edx], eax
		cmp	eax, [esp+80h+arg_4]
		jbe	short loc_10020723
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		jmp	short loc_10020740
; ---------------------------------------------------------------------------

loc_10020723:				; CODE XREF: sub_10020450+2C2j
		test	eax, eax
		jz	short loc_10020738
		push	eax		; Size
		mov	eax, [esp+84h+Dst]
		add	ecx, edi
		push	ecx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10020738:				; CODE XREF: sub_10020450+2D5j
		mov	[esp+80h+var_58], 0

loc_10020740:				; CODE XREF: sub_10020450+2AAj
					; sub_10020450+2D1j
		mov	ecx, [esp+80h+var_4C]
		mov	edx, [esp+80h+var_68]
		push	ecx
		push	edx
		call	PORT_ZFree_Util
		add	esp, 8

loc_10020752:				; CODE XREF: sub_10020450+125j
		push	ebp
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8

loc_1002075C:				; CODE XREF: sub_10020450+F9j
		mov	ecx, [esp+80h+var_4]
		mov	eax, [esp+80h+var_58]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
sub_10020450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020780(int,	void *Src, size_t Size,	int, int, int, void *, size_t)
sub_10020780	proc near		; CODE XREF: sub_10020950+B3p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 8
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	esi
		push	eax
		mov	ebx, ecx
		call	sub_10008790
		mov	esi, eax
		mov	eax, [esi]
		lea	eax, [eax+eax+2]
		add	esp, 4
		cmp	ebx, eax
		jb	loc_1002092B
		mov	ecx, ebx
		sub	ecx, eax
		mov	[esp+14h+var_4], ecx
		cmp	[esp+14h+Size],	ecx
		ja	loc_1002092B
		mov	byte ptr [ebp+0], 0
		mov	ecx, [esi+4]
		push	edi
		call	ecx
		mov	edi, eax
		test	edi, edi
		jz	loc_1002088C
		mov	edx, [esi+10h]
		push	edi
		call	edx
		mov	eax, [esp+1Ch+arg_14]
		add	esp, 4
		test	eax, eax
		jz	short loc_100207EB
		mov	ecx, [esi+14h]
		push	eax
		mov	eax, [esp+1Ch+arg_10]
		push	eax
		push	edi
		call	ecx
		add	esp, 0Ch

loc_100207EB:				; CODE XREF: sub_10020780+5Aj
		mov	eax, [esi]
		mov	ecx, [esi+18h]
		push	eax
		lea	edx, [esp+1Ch+var_8]
		push	edx
		lea	eax, [eax+ebp+1]
		push	eax
		push	edi
		call	ecx
		mov	edx, [esi+0Ch]
		push	1
		push	edi
		call	edx
		mov	eax, [esp+30h+var_4]
		mov	edi, [esp+30h+Size]
		add	esp, 18h
		sub	eax, edi
		jz	short loc_10020827
		push	eax		; Size
		mov	eax, [esi]
		lea	ecx, [ebp+eax*2+1]
		push	0		; Val
		push	ecx		; Dst
		call	memset
		add	esp, 0Ch

loc_10020827:				; CODE XREF: sub_10020780+93j
		mov	eax, ebp
		sub	eax, edi
		add	eax, ebx
		mov	byte ptr [eax-1], 1
		test	edi, edi
		jz	short loc_10020844
		mov	ecx, [esp+18h+Src]
		push	edi		; Size
		push	ecx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10020844:				; CODE XREF: sub_10020780+B3j
		mov	ecx, [esp+18h+arg_18]
		lea	eax, [ebp+1]
		mov	[esp+18h+var_4], eax
		test	ecx, ecx
		jnz	short loc_1002086B
		mov	edx, [esi]
		push	edx
		push	eax
		call	sub_1000CD60
		add	esp, 8
		test	eax, eax
		jz	short loc_1002087A
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1002086B:				; CODE XREF: sub_10020780+D1j
		mov	edx, [esp+18h+arg_1C]
		push	edx		; Size
		push	ecx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_1002087A:				; CODE XREF: sub_10020780+E1j
		sub	ebx, [esi]
		dec	ebx
		push	ebx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_100208A4

loc_1002088C:				; CODE XREF: sub_10020780+45j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_100208A4:				; CODE XREF: sub_10020780+10Aj
		mov	eax, [esi]
		mov	ecx, [esp+18h+var_4]
		push	eax
		mov	eax, [esp+1Ch+arg_C]
		push	ecx
		push	ebx
		push	edi
		call	sub_100200E0
		xor	eax, eax
		add	esp, 10h
		mov	[esp+18h+var_8], eax
		test	ebx, ebx
		jz	short loc_100208E0

loc_100208C4:				; CODE XREF: sub_10020780+15Ej
		mov	edx, [esi]
		add	edx, eax
		mov	al, [edi+eax]
		xor	[edx+ebp+1], al
		mov	eax, [esp+18h+var_8]
		lea	ecx, [edx+ebp+1]
		inc	eax
		mov	[esp+18h+var_8], eax
		cmp	eax, ebx
		jb	short loc_100208C4

loc_100208E0:				; CODE XREF: sub_10020780+142j
		mov	eax, [esi]
		push	ebx
		lea	ecx, [eax+ebp+1]
		push	ecx
		push	eax
		mov	eax, [esp+24h+arg_C]
		push	edi
		call	sub_100200E0
		xor	eax, eax
		add	esp, 10h
		mov	[esp+18h+var_8], eax
		cmp	[esi], eax
		jbe	short loc_10020917

loc_10020900:				; CODE XREF: sub_10020780+195j
		mov	dl, [edi+eax]
		mov	ebp, [esp+18h+var_4]
		xor	[eax+ebp], dl
		mov	eax, [esp+18h+var_8]
		inc	eax
		mov	[esp+18h+var_8], eax
		cmp	eax, [esi]
		jb	short loc_10020900

loc_10020917:				; CODE XREF: sub_10020780+17Ej
		push	ebx
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1002092B:				; CODE XREF: sub_10020780+1Fj
					; sub_10020780+31j
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 8
		retn
sub_10020780	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020950(int,	int, int, int, int, void *, size_t, void *Dst, int, int, void *Src, size_t Size)
sub_10020950	proc near		; DATA XREF: .rdata:100394C0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
Dst		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
Src		= dword	ptr  2Ch
Size		= dword	ptr  30h

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+8]
		xor	edx, edx
		cmp	[ecx], dl
		push	ebx
		mov	ebx, [eax+0Ch]
		setz	dl
		sub	ebx, edx
		cmp	[esp+4+arg_24],	ebx
		jnb	short loc_1002097C
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002097C:				; CODE XREF: sub_10020950+18j
		cmp	[esp+4+arg_4], 0
		jz	loc_10020A40
		cmp	[esp+4+arg_8], 0
		jz	loc_10020A40
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_10]
		test	esi, esi
		jnz	short loc_100209C9
		test	ebp, ebp
		jnz	short loc_100209CD

loc_100209A4:				; CODE XREF: sub_10020950+7Bj
		push	edi
		push	ebx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_100209E1
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100209C9:				; CODE XREF: sub_10020950+4Ej
		test	ebp, ebp
		jnz	short loc_100209A4

loc_100209CD:				; CODE XREF: sub_10020950+52j
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100209E1:				; CODE XREF: sub_10020950+62j
		mov	eax, [esp+10h+arg_18]
		mov	ecx, [esp+10h+arg_14]
		mov	edx, [esp+10h+arg_8]
		push	eax		; size_t
		mov	eax, [esp+14h+Size]
		push	ecx		; void *
		mov	ecx, [esp+18h+Src]
		push	esi		; int
		push	ebp		; int
		push	edx		; int
		push	eax		; Size
		mov	eax, [esp+28h+arg_4]
		push	ecx		; Src
		push	edi		; int
		mov	ecx, ebx
		call	sub_10020780
		mov	esi, eax
		add	esp, 20h
		test	esi, esi
		jnz	short loc_10020A30
		mov	edx, [esp+10h+Dst]
		mov	eax, [esp+10h+arg_0]
		push	edi		; int
		push	edx		; Dst
		push	eax		; int
		call	sub_1001E6B0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_10020A30
		mov	ecx, [esp+10h+arg_20]
		mov	[ecx], ebx

loc_10020A30:				; CODE XREF: sub_10020950+BFj
					; sub_10020950+D8j
		push	edi
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020A40:				; CODE XREF: sub_10020950+31j
					; sub_10020950+3Cj
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10020950	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10020A60	proc near		; DATA XREF: .rdata:100394C4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, [ebx+14h]
		xor	ecx, ecx
		cmp	[eax], cl
		push	edi
		mov	edi, [ebx+18h]
		setz	cl
		sub	edi, ecx
		cmp	[esp+8+arg_4], 0
		jz	loc_10020B44
		cmp	[esp+8+arg_8], 0
		jz	loc_10020B44
		cmp	[esp+8+arg_24],	edi
		jz	short loc_10020AA4
		push	0FFFFE004h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020AA4:				; CODE XREF: sub_10020A60+2Fj
		push	ebp
		mov	ebp, [esp+0Ch+arg_10]
		test	ebp, ebp
		jnz	short loc_10020AD8
		cmp	[esp+0Ch+arg_C], ebp
		jnz	short loc_10020ADF

loc_10020AB3:				; CODE XREF: sub_10020A60+7Dj
		push	esi
		push	edi
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10020AF3
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020AD8:				; CODE XREF: sub_10020A60+4Bj
		cmp	[esp+0Ch+arg_C], 0
		jnz	short loc_10020AB3

loc_10020ADF:				; CODE XREF: sub_10020A60+51j
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020AF3:				; CODE XREF: sub_10020A60+61j
		mov	edx, [esp+10h+arg_20]
		push	edx		; int
		push	esi		; Dst
		push	ebx		; int
		call	sub_1001F860
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_10020B33
		mov	eax, [esp+10h+arg_C]
		mov	ecx, [esp+10h+arg_8]
		mov	edx, [esp+10h+arg_4]
		push	ebp		; int
		push	eax		; int
		mov	eax, [esp+18h+arg_1C]
		push	ecx		; int
		mov	ecx, [esp+1Ch+arg_14]
		push	edx		; int
		push	edi		; Size
		push	eax		; int
		push	ecx		; int
		mov	ecx, [esp+2Ch+arg_18]
		mov	edx, esi
		call	sub_10020450
		add	esp, 1Ch
		mov	ebx, eax

loc_10020B33:				; CODE XREF: sub_10020A60+A6j
		push	edi
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		pop	esi
		pop	ebp
		pop	edi
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020B44:				; CODE XREF: sub_10020A60+1Aj
					; sub_10020A60+25j
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10020A60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020B60(int,	void *Dst, int,	int, int, int)
sub_10020B60	proc near		; DATA XREF: .rdata:100394C8o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		mov	eax, [ebx+8]
		xor	ecx, ecx
		cmp	[eax], cl
		push	esi
		mov	esi, [ebx+0Ch]
		setz	cl
		push	edi
		sub	esi, ecx
		cmp	[esp+18h+arg_C], esi
		jb	short loc_10020BC5
		mov	eax, [esp+18h+arg_10]
		mov	edx, [esp+18h+arg_14]
		lea	ecx, [esp+18h+var_C]
		push	ecx
		mov	[esp+1Ch+var_8], eax
		push	esi
		mov	eax, 2
		mov	[esp+20h+var_4], edx
		call	sub_1001FF90
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10020BC5
		mov	edx, [esp+18h+Dst]
		push	edi		; int
		push	edx		; Dst
		push	ebx		; int
		call	sub_1001E6B0
		add	esp, 0Ch
		push	esi
		push	edi
		test	eax, eax
		jz	short loc_10020BCF
		call	PORT_ZFree_Util
		add	esp, 8

loc_10020BC5:				; CODE XREF: sub_10020B60+1Dj
					; sub_10020B60+46j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020BCF:				; CODE XREF: sub_10020B60+5Bj
		call	PORT_ZFree_Util
		mov	eax, [esp+20h+arg_8]
		add	esp, 8
		pop	edi
		mov	[eax], esi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
sub_10020B60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10020BF0(int,	void *Dst, int,	int, int, int)
sub_10020BF0	proc near		; DATA XREF: .rdata:100394CCo

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, [ebx+14h]
		xor	ecx, ecx
		cmp	[eax], cl
		push	esi
		mov	esi, [ebx+18h]
		setz	cl
		push	edi
		sub	esi, ecx
		cmp	[esp+0Ch+arg_14], esi
		jnz	short loc_10020C64
		lea	edx, [esi+1]
		push	edx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_10020C64
		mov	eax, [esp+0Ch+arg_10]
		push	eax		; int
		push	edi		; Dst
		push	ebx		; int
		call	sub_1001F840
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10020C5B
		cmp	[edi], al
		jnz	short loc_10020C5B
		mov	eax, 2
		cmp	[edi+1], al
		jnz	short loc_10020C5B
		mov	ecx, [esp+0Ch+arg_8]
		mov	dword ptr [ecx], 0
		cmp	esi, eax
		jbe	short loc_10020C5B
		lea	ecx, [ecx+0]

loc_10020C50:				; CODE XREF: sub_10020BF0+69j
		cmp	byte ptr [eax+edi], 0
		jz	short loc_10020C6B
		inc	eax
		cmp	eax, esi
		jb	short loc_10020C50

loc_10020C5B:				; CODE XREF: sub_10020BF0+3Fj
					; sub_10020BF0+43j ...
		push	edi
		call	PORT_Free_Util
		add	esp, 4

loc_10020C64:				; CODE XREF: sub_10020BF0+1Aj
					; sub_10020BF0+2Cj
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10020C6B:				; CODE XREF: sub_10020BF0+64j
		mov	edx, esi
		sub	edx, eax
		lea	eax, [edx-1]
		mov	[ecx], eax
		test	eax, eax
		jz	short loc_10020C5B
		cmp	eax, [esp+0Ch+arg_C]
		ja	short loc_10020C5B
		mov	edx, [esp+0Ch+Dst]
		mov	ecx, edi
		sub	ecx, eax
		push	eax		; Size
		add	ecx, esi
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		push	edi
		call	PORT_Free_Util
		add	esp, 10h
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_10020BF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_10020CA0@<eax>(void *Src@<ecx>, void *Dst,	int, int, int, size_t Size)
sub_10020CA0	proc near		; CODE XREF: sub_10021050+76p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
Size		= dword	ptr  14h

		sub	esp, 0Ch
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+Dst]
		push	esi
		push	edi
		push	eax
		mov	ebx, ecx
		call	sub_10008790
		mov	edx, [esp+20h+arg_4]
		mov	ecx, [esp+20h+Size]
		mov	esi, eax
		mov	eax, [esi]
		mov	edi, edx
		sub	edi, eax
		lea	eax, [eax+ecx+2]
		add	esp, 4
		dec	edi
		cmp	edx, eax
		jnb	short loc_10020CE7
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020CE7:				; CODE XREF: sub_10020CA0+2Dj
		mov	eax, edi
		sub	eax, ecx
		mov	[esp+1Ch+var_4], eax
		add	eax, ebp
		push	ecx		; Size
		mov	[esp+20h+var_C], eax
		test	ebx, ebx
		jnz	short loc_10020D0F
		push	eax
		call	sub_1000CD60
		add	esp, 8
		test	eax, eax
		jz	short loc_10020D19
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020D0F:				; CODE XREF: sub_10020CA0+58j
		push	ebx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10020D19:				; CODE XREF: sub_10020CA0+65j
		mov	ecx, [esi+4]
		call	ecx
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_10020D3C

loc_10020D24:				; CODE XREF: sub_10020CA0+10Dj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020D3C:				; CODE XREF: sub_10020CA0+82j
		mov	edx, [esi+10h]
		push	ebx
		call	edx
		mov	eax, [esi+14h]
		push	8
		push	offset dword_1003FAE8
		push	ebx
		call	eax
		mov	ecx, [esi]
		mov	edx, [esp+2Ch+arg_8]
		mov	eax, [esi+14h]
		push	ecx
		push	edx
		push	ebx
		call	eax
		mov	ecx, [esp+38h+Size]
		mov	edx, [esp+38h+var_C]
		mov	eax, [esi+14h]
		push	ecx
		push	edx
		push	ebx
		call	eax
		mov	ecx, [esi]
		push	ecx
		lea	edx, [esp+48h+var_8]
		push	edx
		lea	eax, [edi+ebp]
		push	eax
		mov	eax, [esi+18h]
		push	ebx
		call	eax
		mov	ecx, [esi+0Ch]
		push	1
		push	ebx
		call	ecx
		mov	edx, [esp+5Ch+var_4]
		add	esp, 40h
		dec	edx
		push	edx		; Size
		push	0		; Val
		push	ebp		; Dst
		call	memset
		mov	eax, [esp+28h+var_C]
		push	edi
		mov	byte ptr [eax-1], 1
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	loc_10020D24
		mov	ecx, [esi]
		push	ecx
		lea	eax, [edi+ebp]
		push	eax
		mov	eax, [esp+24h+arg_C]
		push	edi
		push	ebx
		call	sub_100200E0
		xor	eax, eax
		add	esp, 10h
		mov	[esp+1Ch+var_8], eax
		test	edi, edi
		jz	short loc_10020DE5

loc_10020DD2:				; CODE XREF: sub_10020CA0+143j
		mov	dl, [ebx+eax]
		xor	[eax+ebp], dl
		mov	eax, [esp+1Ch+var_8]
		inc	eax
		mov	[esp+1Ch+var_8], eax
		cmp	eax, edi
		jb	short loc_10020DD2

loc_10020DE5:				; CODE XREF: sub_10020CA0+130j
		push	ebx
		call	PORT_Free_Util
		and	byte ptr [ebp+0], 7Fh
		mov	eax, [esp+20h+arg_4]
		add	esp, 4
		pop	edi
		pop	esi
		mov	byte ptr [eax+ebp-1], 0BCh
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
sub_10020CA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10020E10	proc near		; CODE XREF: sub_10021120+A7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		push	esi
		push	edi
		push	eax
		mov	ebx, ecx
		call	sub_10008790
		mov	ecx, [esp+20h+arg_C]
		mov	esi, eax
		mov	eax, [esi]
		mov	edi, ebx
		sub	edi, eax
		lea	edx, [eax+ecx+2]
		add	esp, 4
		dec	edi
		cmp	ebx, edx
		jb	loc_10021033
		cmp	byte ptr [ebx+ebp-1], 0BCh
		jnz	loc_10021033
		test	byte ptr [ebp+0], 80h
		jnz	loc_10021033
		push	edi
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_10020E7B
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020E7B:				; CODE XREF: sub_10020E10+51j
		mov	ecx, [esi]
		push	ecx
		lea	eax, [edi+ebp]
		push	eax
		mov	[esp+24h+var_4], eax
		mov	eax, [esp+24h+arg_8]
		push	edi
		push	ebx
		call	sub_100200E0
		xor	eax, eax
		add	esp, 10h
		mov	[esp+1Ch+var_C], eax
		test	edi, edi
		jz	short loc_10020EB3
		mov	edi, edi

loc_10020EA0:				; CODE XREF: sub_10020E10+A1j
		mov	dl, [eax+ebp]
		xor	[eax+ebx], dl
		mov	eax, [esp+1Ch+var_C]
		inc	eax
		mov	[esp+1Ch+var_C], eax
		cmp	eax, edi
		jb	short loc_10020EA0

loc_10020EB3:				; CODE XREF: sub_10020E10+8Cj
		mov	edx, [esp+1Ch+arg_C]
		and	byte ptr [ebx],	7Fh
		mov	eax, edi
		xor	ecx, ecx
		sub	eax, edx
		dec	eax
		mov	[esp+1Ch+var_C], ecx
		jz	short loc_10020ED6

loc_10020EC7:				; CODE XREF: sub_10020E10+C4j
		cmp	byte ptr [ecx+ebx], 0
		jnz	short loc_10020F15
		inc	ecx
		mov	[esp+1Ch+var_C], ecx
		cmp	ecx, eax
		jb	short loc_10020EC7

loc_10020ED6:				; CODE XREF: sub_10020E10+B5j
		mov	eax, ebx
		sub	eax, edx
		add	edi, eax
		cmp	byte ptr [edi-1], 1
		mov	[esp+1Ch+var_8], edi
		jnz	short loc_10020F15
		mov	ecx, [esi]
		push	ecx
		call	PORT_Alloc_Util
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_10020F33
		push	ebx
		call	PORT_Free_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020F15:				; CODE XREF: sub_10020E10+BBj
					; sub_10020E10+D4j
		push	ebx
		call	PORT_Free_Util
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020F33:				; CODE XREF: sub_10020E10+E5j
		mov	edx, [esi+4]
		call	edx
		mov	edi, eax
		test	edi, edi
		jnz	short loc_10020F62
		push	ebx
		call	PORT_Free_Util
		push	ebp
		call	PORT_Free_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10020F62:				; CODE XREF: sub_10020E10+12Cj
		mov	eax, [esi+10h]
		push	edi
		call	eax
		mov	ecx, [esi+14h]
		push	8
		push	offset dword_1003FAE8
		push	edi
		call	ecx
		mov	edx, [esi]
		mov	eax, [esp+2Ch+arg_0]
		mov	ecx, [esi+14h]
		push	edx
		push	eax
		push	edi
		call	ecx
		mov	edx, [esp+38h+arg_C]
		mov	eax, [esp+38h+var_8]
		mov	ecx, [esi+14h]
		push	edx
		push	eax
		push	edi
		call	ecx
		mov	edx, [esi]
		mov	ecx, [esi+18h]
		push	edx
		lea	eax, [esp+48h+var_C]
		push	eax
		push	ebp
		push	edi
		call	ecx
		mov	edx, [esi+0Ch]
		push	1
		push	edi
		call	edx
		add	esp, 40h
		push	ebx
		call	PORT_Free_Util
		mov	esi, [esi]
		mov	eax, [esp+20h+var_4]
		add	esp, 4
		mov	ecx, ebp
		cmp	esi, 4
		jb	short loc_10020FD7

loc_10020FC3:				; CODE XREF: sub_10020E10+1C5j
		mov	edx, [ecx]
		cmp	edx, [eax]
		jnz	short loc_10020FFB
		sub	esi, 4
		add	eax, 4
		add	ecx, 4
		cmp	esi, 4
		jnb	short loc_10020FC3

loc_10020FD7:				; CODE XREF: sub_10020E10+1B1j
		test	esi, esi
		jz	short loc_1002101E
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_10020FFB
		cmp	esi, 1
		jbe	short loc_1002101E
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_10020FFB
		cmp	esi, 2
		jbe	short loc_1002101E
		mov	al, [eax+2]
		cmp	al, [ecx+2]
		jz	short loc_1002101E

loc_10020FFB:				; CODE XREF: sub_10020E10+1B7j
					; sub_10020E10+1CFj ...
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4
		push	ebp
		or	esi, 0FFFFFFFFh
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1002101E:				; CODE XREF: sub_10020E10+1C9j
					; sub_10020E10+1D4j ...
		push	ebp
		xor	esi, esi
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10021033:				; CODE XREF: sub_10020E10+29j
					; sub_10020E10+34j ...
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
sub_10020E10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10021050(int,	int, int, void *Src, size_t Size, void *Dst, int, int, int)
sub_10021050	proc near		; DATA XREF: .rdata:100394D0o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Src		= dword	ptr  10h
Size		= dword	ptr  14h
Dst		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+14h]
		xor	edx, edx
		cmp	[ecx], dl
		push	esi
		mov	esi, [eax+18h]
		setz	dl
		sub	esi, edx
		cmp	[esp+4+arg_1C],	esi
		jnb	short loc_1002107C
		push	0FFFFE003h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002107C:				; CODE XREF: sub_10021050+18j
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	edi
		test	ebp, ebp
		jz	short loc_100210FF
		mov	edi, [esp+0Ch+arg_8]
		test	edi, edi
		jz	short loc_100210FF
		push	ebx
		push	esi
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_100210B3
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100210B3:				; CODE XREF: sub_10021050+4Cj
		mov	eax, [esp+10h+Size]
		mov	ecx, [esp+10h+arg_20]
		push	eax		; Size
		push	edi		; int
		push	ecx		; int
		mov	ecx, [esp+1Ch+Src] ; Src
		push	esi		; int
		push	ebx		; Dst
		mov	eax, ebp
		call	sub_10020CA0
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_100210EF
		mov	edx, [esp+10h+Dst]
		mov	eax, [esp+10h+arg_0]
		push	ebx		; int
		push	edx		; Dst
		push	eax		; int
		call	sub_1001F860
		mov	ecx, [esp+1Ch+arg_18]
		add	esp, 0Ch
		mov	edi, eax
		mov	[ecx], esi

loc_100210EF:				; CODE XREF: sub_10021050+82j
		push	ebx
		call	PORT_Free_Util
		add	esp, 4
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100210FF:				; CODE XREF: sub_10021050+34j
					; sub_10021050+3Cj
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
sub_10021050	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021120	proc near		; DATA XREF: .rdata:100394D4o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ebp
		mov	ebp, [esp+4+arg_0]
		mov	eax, [ebp+8]
		xor	ecx, ecx
		cmp	[eax], cl
		push	edi
		mov	edi, [ebp+0Ch]
		setz	cl
		sub	edi, ecx
		cmp	[esp+8+arg_14],	edi
		jz	short loc_1002114E
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1002114E:				; CODE XREF: sub_10021120+19j
		cmp	[esp+8+arg_4], 0
		push	ebx
		jz	loc_100211DE
		mov	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	short loc_100211DE
		push	esi
		push	edi
		call	PORT_Alloc_Util
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10021187
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10021187:				; CODE XREF: sub_10021120+50j
		mov	edx, [esp+10h+arg_10]
		push	edx		; int
		push	esi		; Dst
		push	ebp		; int
		call	sub_1001E6B0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100211B5
		push	esi
		call	PORT_Free_Util
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 8
		pop	esi
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100211B5:				; CODE XREF: sub_10021120+78j
		mov	eax, [esp+10h+arg_C]
		mov	ecx, [esp+10h+arg_18]
		push	eax
		mov	eax, [esp+14h+arg_4]
		push	ebx
		push	esi
		push	ecx
		mov	ecx, edi
		call	sub_10020E10
		push	esi
		mov	edi, eax
		call	PORT_Free_Util
		add	esp, 14h
		pop	esi
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100211DE:				; CODE XREF: sub_10021120+34j
					; sub_10021120+40j
		push	0FFFFE006h
		call	PORT_SetError_Util
		add	esp, 4
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
sub_10021120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10021200(int,	void *Dst, int,	int, int, int)
sub_10021200	proc near		; DATA XREF: .rdata:100394D8o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		mov	eax, [ebx+14h]
		xor	ecx, ecx
		cmp	[eax], cl
		push	esi
		mov	esi, [ebx+18h]
		setz	cl
		sub	esi, ecx
		cmp	[esp+14h+arg_C], esi
		jnb	short loc_10021227
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10021227:				; CODE XREF: sub_10021200+1Cj
		mov	eax, [esp+14h+arg_10]
		mov	edx, [esp+14h+arg_14]
		push	edi
		lea	ecx, [esp+18h+var_C]
		push	ecx
		mov	[esp+1Ch+var_8], eax
		push	esi
		mov	eax, 1
		mov	[esp+20h+var_4], edx
		call	sub_1001FF90
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1002125D
		pop	edi
		or	ebx, 0FFFFFFFFh
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1002125D:				; CODE XREF: sub_10021200+4Fj
		mov	edx, [esp+18h+Dst]
		push	edi		; int
		push	edx		; Dst
		push	ebx		; int
		call	sub_1001F860
		mov	ebx, eax
		mov	eax, [esp+24h+arg_8]
		push	esi
		push	edi
		mov	[eax], esi
		call	PORT_ZFree_Util
		add	esp, 14h
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 0Ch
		retn
sub_10021200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021290	proc near		; DATA XREF: .rdata:100394DCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	eax, [esi+8]
		xor	ecx, ecx
		cmp	[eax], cl
		push	edi
		mov	edi, [esi+0Ch]
		setz	cl
		sub	edi, ecx
		cmp	[esp+10h+arg_8], edi
		jnz	loc_10021377
		mov	ebx, [esp+10h+arg_10]
		lea	edx, [edi-0Bh]
		cmp	ebx, edx
		ja	loc_10021377
		lea	eax, [edi+1]
		push	eax
		call	PORT_Alloc_Util
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	loc_10021377
		mov	ecx, [esp+10h+arg_4]
		push	ecx		; int
		push	ebp		; Dst
		push	esi		; int
		call	sub_1001E6B0
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1002136E
		cmp	[ebp+0], al
		jnz	short loc_1002136E
		cmp	byte ptr [ebp+1], 1
		jnz	short loc_1002136E
		lea	ecx, [eax+2]
		mov	eax, edi
		sub	eax, ebx
		dec	eax
		cmp	eax, ecx
		jbe	short loc_1002130F

loc_10021304:				; CODE XREF: sub_10021290+7Dj
		cmp	byte ptr [ecx+ebp], 0FFh
		jnz	short loc_1002136E
		inc	ecx
		cmp	ecx, eax
		jb	short loc_10021304

loc_1002130F:				; CODE XREF: sub_10021290+72j
		cmp	byte ptr [ecx+ebp], 0
		jnz	short loc_1002136E
		mov	esi, [esp+10h+arg_C]
		mov	eax, ebp
		sub	eax, ebx
		add	eax, edi
		mov	ecx, ebx
		cmp	ebx, 4
		jb	short loc_1002133A

loc_10021326:				; CODE XREF: sub_10021290+A8j
		mov	edx, [eax]
		cmp	edx, [esi]
		jnz	short loc_1002136E
		sub	ecx, 4
		add	esi, 4
		add	eax, 4
		cmp	ecx, 4
		jnb	short loc_10021326

loc_1002133A:				; CODE XREF: sub_10021290+94j
		test	ecx, ecx
		jz	short loc_1002135E
		mov	dl, [esi]
		cmp	dl, [eax]
		jnz	short loc_1002136E
		cmp	ecx, 1
		jbe	short loc_1002135E
		mov	dl, [esi+1]
		cmp	dl, [eax+1]
		jnz	short loc_1002136E
		cmp	ecx, 2
		jbe	short loc_1002135E
		mov	cl, [esi+2]
		cmp	cl, [eax+2]
		jnz	short loc_1002136E

loc_1002135E:				; CODE XREF: sub_10021290+ACj
					; sub_10021290+B7j ...
		push	ebp
		call	PORT_Free_Util
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002136E:				; CODE XREF: sub_10021290+57j
					; sub_10021290+60j ...
		push	ebp
		call	PORT_Free_Util
		add	esp, 4

loc_10021377:				; CODE XREF: sub_10021290+1Bj
					; sub_10021290+2Aj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10021290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10021380(int,	void *Dst, int,	int, int, int)
sub_10021380	proc near		; DATA XREF: .rdata:100394E0o

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, [ebx+8]
		xor	ecx, ecx
		cmp	[eax], cl
		push	esi
		mov	esi, [ebx+0Ch]
		setz	cl
		push	edi
		sub	esi, ecx
		cmp	[esp+0Ch+arg_14], esi
		jnz	short loc_100213FA
		lea	edx, [esi+1]
		push	edx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_100213FA
		mov	eax, [esp+0Ch+arg_10]
		push	eax		; int
		push	edi		; Dst
		push	ebx		; int
		call	sub_1001E6B0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100213F1
		mov	edx, [esp+0Ch+arg_8]
		mov	[edx], eax
		cmp	[edi], al
		jnz	short loc_100213F1
		cmp	byte ptr [edi+1], 1
		jnz	short loc_100213F1
		mov	eax, 2
		cmp	esi, eax
		jbe	short loc_100213F1
		lea	ebx, [ebx+0]

loc_100213E0:				; CODE XREF: sub_10021380+6Fj
		mov	cl, [eax+edi]
		test	cl, cl
		jz	short loc_10021401
		cmp	cl, 0FFh
		jnz	short loc_100213F1
		inc	eax
		cmp	eax, esi
		jb	short loc_100213E0

loc_100213F1:				; CODE XREF: sub_10021380+3Fj
					; sub_10021380+49j ...
		push	edi
		call	PORT_Free_Util
		add	esp, 4

loc_100213FA:				; CODE XREF: sub_10021380+1Aj
					; sub_10021380+2Cj
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10021401:				; CODE XREF: sub_10021380+65j
		mov	ecx, esi
		sub	ecx, eax
		lea	eax, [ecx-1]
		mov	[edx], eax
		test	eax, eax
		jz	short loc_100213F1
		cmp	eax, [esp+0Ch+arg_C]
		ja	short loc_100213F1
		mov	edx, edi
		sub	edx, eax
		push	eax		; Size
		mov	eax, [esp+10h+Dst]
		add	edx, esi
		push	edx		; Src
		push	eax		; Dst
		call	memcpy
		push	edi
		call	PORT_Free_Util
		add	esp, 10h
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_10021380	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10021440(void	*Src)
sub_10021440	proc near		; CODE XREF: sub_10021570+67p

Src		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, [esp+8+Src]
		push	esi
		mov	eax, ebp
		push	edi
		lea	edx, [eax+1]
		lea	ecx, [ecx+0]

loc_10021450:				; CODE XREF: sub_10021440+15j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10021450
		sub	eax, edx
		mov	esi, eax
		lea	eax, [esi+5]
		push	eax
		call	PORT_Alloc_Util
		lea	ebx, [esi-4]
		add	esp, 4
		mov	edi, eax
		test	ebx, ebx
		jle	short loc_1002148A
		push	5		; MaxCount
		lea	ecx, [ebx+ebp]
		push	offset Str2	; ".dll"
		push	ecx		; Str1
		call	ds:strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002148A
		mov	esi, ebx

loc_1002148A:				; CODE XREF: sub_10021440+2Ej
					; sub_10021440+46j
		push	esi		; Size
		push	ebp		; Src
		push	edi		; Dst
		call	memcpy
		mov	edx, ds:dword_1003FAF0
		mov	[edi+esi], edx
		mov	al, ds:byte_1003FAF4
		add	esp, 0Ch
		mov	[edi+esi+4], al
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10021440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100214B0	proc near		; CODE XREF: sub_10021570+F5p
					; DATA XREF: sub_100218C0+10o

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		movzx	eax, byte ptr [ecx]
		movzx	edx, byte ptr [ecx+1]
		shl	eax, 8
		or	eax, edx
		movzx	edx, byte ptr [ecx+2]
		movzx	ecx, byte ptr [ecx+3]
		shl	eax, 8
		or	eax, edx
		shl	eax, 8
		or	eax, ecx
		retn
sub_100214B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100214E0	proc near		; CODE XREF: sub_10021570+10Cp
					; sub_10021570+11Dp ...

var_4		= dword	ptr -4

		push	ecx
		push	ebx
		mov	ebx, ds:PR_Read
		push	4
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	edi
		call	ebx ; PR_Read
		add	esp, 0Ch
		cmp	eax, 4
		jnz	short loc_1002155A
		mov	ecx, [esp+8+var_4]
		movzx	edx, byte ptr [esp+8+var_4+2]
		movzx	eax, cl
		shl	eax, 8
		movzx	ecx, ch
		or	eax, ecx
		movzx	ecx, byte ptr [esp+8+var_4+3]
		shl	eax, 8
		or	eax, edx
		shl	eax, 8
		or	eax, ecx
		push	eax
		mov	[esi+8], eax
		call	PORT_Alloc_Util
		add	esp, 4
		mov	[esi+4], eax
		test	eax, eax
		jz	short loc_10021553
		mov	edx, [esi+8]
		push	edx
		push	eax
		push	edi
		call	ebx ; PR_Read
		add	esp, 0Ch
		cmp	eax, [esi+8]
		jz	short loc_10021560
		mov	eax, [esi+4]
		push	eax
		call	PORT_Free_Util
		add	esp, 4
		mov	dword ptr [esi+4], 0

loc_10021553:				; CODE XREF: sub_100214E0+4Ej
		mov	dword ptr [esi+8], 0

loc_1002155A:				; CODE XREF: sub_100214E0+18j
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10021560:				; CODE XREF: sub_100214E0+5Ej
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
sub_100214E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10021570(void	*Src)
sub_10021570	proc near		; CODE XREF: sub_10021880+1Ep
					; sub_100218C0+28p
					; DATA XREF: ...

var_10A4	= dword	ptr -10A4h
var_10A0	= dword	ptr -10A0h
var_109C	= dword	ptr -109Ch
var_1098	= dword	ptr -1098h
var_1094	= dword	ptr -1094h
var_1090	= dword	ptr -1090h
var_108C	= dword	ptr -108Ch
var_1088	= byte ptr -1088h
var_1084	= dword	ptr -1084h
var_1080	= dword	ptr -1080h
var_107C	= dword	ptr -107Ch
Dst		= byte ptr -1078h
var_1074	= byte ptr -1074h
var_1070	= dword	ptr -1070h
var_1068	= byte ptr -1068h
var_1064	= dword	ptr -1064h
var_105C	= byte ptr -105Ch
var_1058	= dword	ptr -1058h
var_1050	= byte ptr -1050h
var_104C	= dword	ptr -104Ch
var_1044	= byte ptr -1044h
var_1004	= byte ptr -1004h
var_1003	= byte ptr -1003h
var_1002	= byte ptr -1002h
var_1001	= byte ptr -1001h
var_1000	= byte ptr -1000h
var_4		= dword	ptr -4
Src		= dword	ptr  4

		mov	eax, 10A4h
		call	__alloca_probe
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+10A4h+var_4], eax
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10B0h+Src]
		xor	ebx, ebx
		push	34h		; Size
		lea	eax, [esp+10B4h+Dst]
		push	ebx		; Val
		push	eax		; Dst
		mov	[esp+10BCh+var_107C], esi
		mov	[esp+10BCh+var_10A0], ebx
		xor	ebp, ebp
		mov	[esp+10BCh+var_1094], ebx
		mov	[esp+10BCh+var_1090], ebx
		mov	[esp+10BCh+var_108C], ebx
		mov	[esp+10BCh+var_109C], ebx
		call	memset
		add	esp, 0Ch
		lea	ecx, [esp+10B0h+var_1044]
		mov	[esp+10B0h+var_1084], ecx
		mov	[esp+10B0h+var_1080], 40h
		cmp	esi, ebx
		jz	loc_10021813
		push	esi		; Src
		call	sub_10021440
		add	esp, 4
		mov	[esp+10B0h+var_1098], eax
		cmp	eax, ebx
		jz	loc_10021802
		push	edi
		push	ebx
		push	1
		push	eax
		call	ds:PR_Open
		mov	edi, eax
		add	esp, 0Ch
		mov	[esp+10B4h+var_10A4], edi
		test	edi, edi
		jz	loc_100217BF
		push	0Ch
		lea	edx, [esp+10B8h+var_1004]
		push	edx
		push	edi
		call	ds:PR_Read
		add	esp, 0Ch
		cmp	eax, 0Ch
		jnz	loc_100217BF
		cmp	[esp+10B4h+var_1004], 0F1h
		jnz	loc_100217BF
		cmp	[esp+10B4h+var_1003], 0C5h
		jnz	loc_100217BF
		cmp	[esp+10B4h+var_1002], 1
		jnz	loc_100217BF
		cmp	[esp+10B4h+var_1001], 2
		jb	loc_100217BF
		lea	eax, [esp+10B4h+var_1000]
		push	ebp
		push	eax
		call	sub_100214B0
		add	esp, 4
		push	eax
		push	edi
		call	ds:PR_Seek
		add	esp, 0Ch
		lea	esi, [esp+10B4h+var_1074]
		call	sub_100214E0
		test	eax, eax
		jnz	loc_100217BB
		lea	esi, [esp+10B4h+var_1068]
		call	sub_100214E0
		test	eax, eax
		jnz	loc_100217BB
		lea	esi, [esp+10B4h+var_105C]
		call	sub_100214E0
		test	eax, eax
		jnz	loc_100217BB
		lea	esi, [esp+10B4h+var_1050]
		call	sub_100214E0
		test	eax, eax
		jnz	loc_100217BB
		lea	esi, [esp+10B4h+var_1094]
		call	sub_100214E0
		test	eax, eax
		jnz	loc_100217BB
		mov	ecx, edi
		push	ecx
		call	ds:PR_Close
		lea	edx, [esp+10B8h+Dst]
		push	edx
		mov	[esp+10BCh+var_10A4], ebx
		call	sub_100190B0
		push	eax
		call	sub_10008790
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_100217BB
		mov	eax, [esp+10B4h+var_107C]
		push	ebx
		push	1
		push	eax
		call	ds:PR_Open
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	loc_100217BB
		mov	ecx, [ebp+4]
		call	ecx
		mov	[esp+10B4h+var_10A0], eax
		test	eax, eax
		jz	loc_100217BB
		mov	edx, [ebp+10h]
		mov	esi, eax
		push	esi
		call	edx
		mov	edi, ds:PR_Read
		push	1000h
		lea	eax, [esp+10BCh+var_1004]
		push	eax
		push	ebx
		call	edi ; PR_Read
		add	esp, 10h
		test	eax, eax
		jle	short loc_10021776
		jmp	short loc_10021750
; ---------------------------------------------------------------------------
		align 10h

loc_10021750:				; CODE XREF: sub_10021570+1D8j
					; sub_10021570+204j
		mov	edx, [ebp+14h]
		push	eax
		lea	ecx, [esp+10B8h+var_1004]
		push	ecx
		push	esi
		call	edx
		push	1000h
		lea	eax, [esp+10C4h+var_1004]
		push	eax
		push	ebx
		call	edi ; PR_Read
		add	esp, 18h
		test	eax, eax
		jg	short loc_10021750

loc_10021776:				; CODE XREF: sub_10021570+1D6j
		push	ebx
		call	ds:PR_Close
		mov	ecx, [esp+10B8h+var_1080]
		mov	eax, [esp+10B8h+var_1084]
		push	ecx
		mov	ecx, [ebp+18h]
		lea	edx, [esp+10BCh+var_1080]
		push	edx
		push	eax
		push	esi
		xor	ebx, ebx
		call	ecx
		lea	edx, [esp+10C8h+var_1088]
		push	edx
		lea	eax, [esp+10CCh+var_1094]
		push	eax
		lea	ecx, [esp+10D0h+Dst]
		push	ecx
		call	sub_1001CED0
		add	esp, 20h
		mov	edi, ebx
		test	eax, eax
		jnz	short loc_100217BF
		mov	[esp+10B4h+var_109C], 1
		jmp	short loc_100217BF
; ---------------------------------------------------------------------------

loc_100217BB:				; CODE XREF: sub_10021570+113j
					; sub_10021570+124j ...
		mov	edi, [esp+10B4h+var_10A4]

loc_100217BF:				; CODE XREF: sub_10021570+91j
					; sub_10021570+AEj ...
		mov	edx, [esp+10B4h+var_1098]
		push	edx
		call	PORT_Free_Util
		add	esp, 4
		test	edi, edi
		jz	short loc_100217DA
		push	edi
		call	ds:PR_Close
		add	esp, 4

loc_100217DA:				; CODE XREF: sub_10021570+25Ej
		pop	edi
		test	ebx, ebx
		jz	short loc_100217E9
		push	ebx
		call	ds:PR_Close
		add	esp, 4

loc_100217E9:				; CODE XREF: sub_10021570+26Dj
		mov	eax, [esp+10B0h+var_10A0]
		test	eax, eax
		jz	short loc_10021800
		test	ebp, ebp
		jz	short loc_10021800
		push	1
		push	eax
		mov	eax, [ebp+0Ch]
		call	eax
		add	esp, 8

loc_10021800:				; CODE XREF: sub_10021570+27Fj
					; sub_10021570+283j
		xor	ebx, ebx

loc_10021802:				; CODE XREF: sub_10021570+75j
		mov	eax, [esp+10B0h+var_1090]
		cmp	eax, ebx
		jz	short loc_10021813
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_10021813:				; CODE XREF: sub_10021570+60j
					; sub_10021570+298j
		mov	eax, [esp+10B0h+var_1070]
		cmp	eax, ebx
		jz	short loc_10021824
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_10021824:				; CODE XREF: sub_10021570+2A9j
		mov	eax, [esp+10B0h+var_1064]
		cmp	eax, ebx
		jz	short loc_10021835
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_10021835:				; CODE XREF: sub_10021570+2BAj
		mov	eax, [esp+10B0h+var_1058]
		cmp	eax, ebx
		jz	short loc_10021846
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_10021846:				; CODE XREF: sub_10021570+2CBj
		mov	eax, [esp+10B0h+var_104C]
		pop	esi
		pop	ebp
		cmp	eax, ebx
		pop	ebx
		jz	short loc_1002185A
		push	eax
		call	PORT_Free_Util
		add	esp, 4

loc_1002185A:				; CODE XREF: sub_10021570+2DFj
		mov	ecx, [esp+10A4h+var_4]
		mov	eax, [esp+10A4h+var_109C]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10A4h
		retn
sub_10021570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021880	proc near		; DATA XREF: .rdata:10039368o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		push	esi
		push	edi
		push	eax
		push	ecx
		xor	edi, edi
		call	ds:PR_GetLibraryFilePathname
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_100218AF
		push	esi		; Src
		call	sub_10021570
		push	esi
		mov	edi, eax
		call	ds:PR_Free
		add	esp, 8

loc_100218AF:				; CODE XREF: sub_10021880+1Bj
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_10021880	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100218C0	proc near		; DATA XREF: .rdata:1003936Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_100218CE
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_100218CE:				; CODE XREF: sub_100218C0+6j
		push	esi
		push	edi
		push	offset sub_100214B0
		push	eax
		xor	edi, edi
		call	ds:PR_GetLibraryFilePathname
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_100218F9
		push	esi		; Src
		call	sub_10021570
		push	esi
		mov	edi, eax
		call	ds:PR_Free
		add	esp, 8

loc_100218F9:				; CODE XREF: sub_100218C0+25j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_100218C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021900	proc near		; CODE XREF: sub_10021AF0+7Dp
					; sub_10021AF0+A0p
					; DATA XREF: ...

var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
Dst		= dword	ptr -98h
Size		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= byte ptr -84h
Src		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0A0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0A0h+var_4], eax
		mov	eax, [esp+0A0h+arg_0]
		mov	ecx, [esp+0A0h+arg_C]
		mov	edx, [esp+0A0h+arg_14]
		push	ebx
		mov	ebx, [esp+0A4h+arg_8]
		push	ebp
		push	esi
		mov	esi, [esp+0ACh+arg_10]
		push	edi
		mov	edi, [esp+0B0h+arg_4]
		xor	ebp, ebp
		push	eax
		mov	[esp+0B4h+var_90], ecx
		mov	[esp+0B4h+var_88], edx
		mov	[esp+0B4h+var_9C], ebp
		mov	[esp+0B4h+Size], ebp
		mov	[esp+0B4h+var_8C], 0FFFFFFFFh
		call	sub_10008790
		mov	ecx, [esi+8]
		mov	edx, [esi+4]
		add	esp, 4
		mov	[esp+0B0h+var_A0], ecx
		mov	[esp+0B0h+Dst],	edx
		test	ebx, ebx
		jz	short loc_1002198B
		mov	ecx, ebx
		lea	esi, [ecx+1]
		lea	esp, [esp+0]

loc_10021980:				; CODE XREF: sub_10021900+85j
		mov	dl, [ecx]
		inc	ecx
		test	dl, dl
		jnz	short loc_10021980
		sub	ecx, esi
		mov	ebp, ecx

loc_1002198B:				; CODE XREF: sub_10021900+75j
		mov	ecx, [esp+0B0h+var_88]
		mov	edx, [edi+8]
		push	ecx
		mov	ecx, [edi+4]
		push	edx
		push	ecx
		push	eax
		call	sub_100085B0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_10021ACC
		push	esi
		call	sub_10008600
		push	ebp
		push	ebx
		push	esi
		call	sub_10008630
		mov	edi, [esp+0C0h+var_90]
		mov	edx, [edi+8]
		mov	eax, [edi+4]
		push	edx
		push	eax
		push	esi
		call	sub_10008630
		push	40h
		lea	ecx, [esp+0D0h+var_9C]
		push	ecx
		lea	edx, [esp+0D4h+var_84]
		push	edx
		push	esi
		call	sub_10008650
		add	esp, 2Ch
		test	eax, eax
		jnz	loc_10021AB9
		cmp	[esp+0B0h+var_A0], eax
		jbe	loc_10021AA8
		jmp	short loc_100219F8
; ---------------------------------------------------------------------------

loc_100219F4:				; CODE XREF: sub_10021900+1A2j
		mov	edi, [esp+0B0h+var_90]

loc_100219F8:				; CODE XREF: sub_10021900+F2j
		push	esi
		call	sub_10008600
		mov	eax, [esp+0B4h+var_9C]
		push	eax
		lea	ecx, [esp+0B8h+var_84]
		push	ecx
		push	esi
		call	sub_10008630
		add	esp, 10h
		test	ebp, ebp
		jz	short loc_10021A20
		push	ebp
		push	ebx
		push	esi
		call	sub_10008630
		add	esp, 0Ch

loc_10021A20:				; CODE XREF: sub_10021900+113j
		mov	edx, [edi+8]
		mov	eax, [edi+4]
		push	edx
		push	eax
		push	esi
		call	sub_10008630
		push	40h
		lea	ecx, [esp+0C0h+Size]
		push	ecx
		lea	edx, [esp+0C4h+Src]
		push	edx
		push	esi
		call	sub_10008650
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_10021AB9
		push	esi
		call	sub_10008600
		mov	eax, [esp+0B4h+var_9C]
		push	eax
		lea	ecx, [esp+0B8h+var_84]
		push	ecx
		push	esi
		call	sub_10008630
		push	40h
		lea	edx, [esp+0C4h+var_9C]
		push	edx
		lea	eax, [esp+0C8h+var_84]
		push	eax
		push	esi
		call	sub_10008650
		add	esp, 20h
		test	eax, eax
		jnz	short loc_10021AB9
		mov	edi, [esp+0B0h+Size]
		mov	eax, [esp+0B0h+var_A0]
		cmp	edi, eax
		jb	short loc_10021A87
		mov	edi, eax

loc_10021A87:				; CODE XREF: sub_10021900+183j
		mov	edx, [esp+0B0h+Dst]
		push	edi		; Size
		lea	ecx, [esp+0B4h+Src]
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		add	[esp+0BCh+Dst],	edi
		add	esp, 0Ch
		sub	[esp+0B0h+var_A0], edi
		jnz	loc_100219F4

loc_10021AA8:				; CODE XREF: sub_10021900+ECj
		push	1		; int
		push	esi		; Dst
		xor	edi, edi
		call	sub_10008410
		add	esp, 8
		mov	eax, edi
		jmp	short loc_10021AD0
; ---------------------------------------------------------------------------

loc_10021AB9:				; CODE XREF: sub_10021900+E2j
					; sub_10021900+148j ...
		mov	edi, [esp+0B0h+var_8C]
		push	1		; int
		push	esi		; Dst
		call	sub_10008410
		add	esp, 8
		mov	eax, edi
		jmp	short loc_10021AD0
; ---------------------------------------------------------------------------

loc_10021ACC:				; CODE XREF: sub_10021900+A5j
		mov	eax, [esp+0B0h+var_8C]

loc_10021AD0:				; CODE XREF: sub_10021900+1B7j
					; sub_10021900+1CAj
		mov	ecx, [esp+0B0h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A0h
		retn
sub_10021900	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021AF0	proc near		; DATA XREF: .rdata:100393CCo

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 24h
		mov	ecx, [esp+24h+arg_0]
		mov	edx, [ecx+8]
		mov	ecx, [ecx+4]
		push	ebx
		push	ebp
		push	esi
		mov	eax, edx
		mov	esi, edx
		shr	eax, 1
		and	esi, 1
		add	eax, esi
		mov	esi, [esp+30h+arg_C]
		mov	[esp+30h+var_14], ecx
		sub	ecx, eax
		xor	ebp, ebp
		mov	[esp+30h+var_10], eax
		mov	[esp+30h+var_4], eax
		mov	eax, [esi+8]
		push	edi
		add	ecx, edx
		push	eax
		or	ebx, 0FFFFFFFFh
		mov	[esp+38h+var_24], ebp
		mov	[esp+38h+var_1C], ebp
		mov	[esp+38h+var_18], ebp
		mov	[esp+38h+var_C], ebp
		mov	[esp+38h+var_8], ecx
		call	PORT_Alloc_Util
		mov	edi, eax
		add	esp, 4
		mov	[esp+34h+var_20], edi
		cmp	edi, ebp
		jz	short loc_10021BC8
		mov	ebp, [esp+34h+arg_10]
		mov	ecx, [esi+8]
		mov	edx, [esp+34h+arg_8]
		mov	eax, [esp+34h+arg_4]
		push	ebp
		push	esi
		push	edx
		mov	[esp+40h+var_1C], ecx
		push	eax
		lea	ecx, [esp+44h+var_18]
		push	ecx
		push	2
		call	sub_10021900
		add	esp, 18h
		test	eax, eax
		jnz	short loc_10021BB6
		mov	eax, [esp+34h+arg_8]
		mov	ecx, [esp+34h+arg_4]
		push	ebp
		lea	edx, [esp+38h+var_24]
		push	edx
		push	eax
		push	ecx
		lea	edx, [esp+44h+var_C]
		push	edx
		push	3
		call	sub_10021900
		mov	edi, [esp+4Ch+var_20]
		add	esp, 18h
		test	eax, eax
		jnz	short loc_10021BB6
		cmp	[esi+8], eax
		jbe	short loc_10021BB4

loc_10021BA5:				; CODE XREF: sub_10021AF0+C2j
		mov	dl, [eax+edi]
		mov	ecx, [esi+4]
		xor	[ecx+eax], dl
		inc	eax
		cmp	eax, [esi+8]
		jb	short loc_10021BA5

loc_10021BB4:				; CODE XREF: sub_10021AF0+B3j
		xor	ebx, ebx

loc_10021BB6:				; CODE XREF: sub_10021AF0+87j
					; sub_10021AF0+AEj
		test	edi, edi
		jz	short loc_10021BC8
		mov	eax, [esp+34h+var_1C]
		push	eax
		push	edi
		call	PORT_ZFree_Util
		add	esp, 8

loc_10021BC8:				; CODE XREF: sub_10021AF0+5Dj
					; sub_10021AF0+C8j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 24h
		retn
sub_10021AF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10021BE0	proc near		; CODE XREF: sub_10024810+4Ap
					; sub_10024810+73p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		mov	eax, [esp+4+arg_0]
		movzx	ecx, byte ptr [eax+1]
		movzx	edx, byte ptr [eax+2]
		push	ebx
		push	ebp
		push	esi
		movzx	esi, byte ptr [eax]
		shl	esi, 8
		or	esi, ecx
		movzx	ecx, byte ptr [eax+3]
		push	edi
		movzx	edi, byte ptr [eax+4]
		movzx	ebx, byte ptr [eax+0Dh]
		shl	esi, 8
		or	esi, edx
		movzx	edx, byte ptr [eax+5]
		shl	edi, 8
		or	edi, edx
		movzx	edx, byte ptr [eax+7]
		shl	esi, 8
		or	esi, ecx
		movzx	ecx, byte ptr [eax+6]
		shl	edi, 8
		or	edi, ecx
		movzx	ecx, byte ptr [eax+8]
		shl	edi, 8
		or	edi, edx
		movzx	edx, byte ptr [eax+9]
		shl	ecx, 8
		or	ecx, edx
		movzx	edx, byte ptr [eax+0Ah]
		shl	ecx, 8
		or	ecx, edx
		movzx	edx, byte ptr [eax+0Bh]
		shl	ecx, 8
		or	ecx, edx
		movzx	edx, byte ptr [eax+0Ch]
		shl	edx, 8
		or	edx, ebx
		movzx	ebx, byte ptr [eax+0Eh]
		movzx	eax, byte ptr [eax+0Fh]
		shl	edx, 8
		or	edx, ebx
		shl	edx, 8
		or	edx, eax
		mov	ebx, edi
		sub	ebx, edx
		sub	ebx, 61C88647h
		mov	[esp+14h+arg_0], ebx
		lea	eax, [ecx+esi+61C88647h]
		mov	ebx, eax
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, eax
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	eax, 0FFh
		xor	ebx, ds:dword_1003FB00[eax*4]
		mov	eax, [esp+14h+arg_4]
		mov	[eax], ebx
		mov	ebx, [esp+14h+arg_0]
		mov	ebp, ebx
		shr	ebp, 10h
		shr	ebx, 8
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		mov	[eax+4], ebp
		mov	ebp, esi
		shl	ebp, 18h
		mov	ebx, edi
		shr	edi, 8
		xor	ebp, edi
		mov	[esp+14h+arg_4], ebp
		shr	esi, 8
		shl	ebx, 18h
		xor	ebx, esi
		mov	esi, ebp
		lea	edi, [ecx+ebx-3C6EF373h]
		mov	ebp, edi
		shr	ebp, 10h
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		mov	[esp+14h+arg_0], edi
		shr	edi, 8
		and	edi, 0FFh
		xor	ebp, ds:dword_1003FF00[edi*4]
		mov	edi, [esp+14h+arg_0]
		sub	esi, edx
		shr	edi, 18h
		xor	ebp, ds:dword_10040700[edi*4]
		mov	edi, [esp+14h+arg_0]
		and	edi, 0FFh
		xor	ebp, ds:dword_1003FB00[edi*4]
		add	esi, 3C6EF373h
		mov	[eax+8], ebp
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	esi, edx
		shl	edx, 8
		mov	[eax+0Ch], edi
		mov	edi, ecx
		shl	ecx, 8
		shr	esi, 18h
		xor	esi, ecx
		mov	ecx, [esp+14h+arg_4]
		shr	edi, 18h
		xor	edi, edx
		lea	edx, [esi+ebx-78DDE6E6h]
		mov	ebp, edx
		mov	[esp+14h+arg_0], edx
		shr	ebp, 10h
		shr	edx, 8
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		and	edx, 0FFh
		xor	ebp, ds:dword_1003FF00[edx*4]
		mov	edx, [esp+14h+arg_0]
		shr	edx, 18h
		xor	ebp, ds:dword_10040700[edx*4]
		mov	edx, [esp+14h+arg_0]
		and	edx, 0FFh
		xor	ebp, ds:dword_1003FB00[edx*4]
		sub	ecx, edi
		mov	[eax+10h], ebp
		add	ecx, 78DDE6E6h
		mov	edx, ecx
		shr	edx, 10h
		and	edx, 0FFh
		mov	edx, ds:dword_10040300[edx*4]
		mov	ebp, ecx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edx, ds:dword_1003FF00[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	edx, ds:dword_10040700[ebp*4]
		and	ecx, 0FFh
		xor	edx, ds:dword_1003FB00[ecx*4]
		mov	ebp, [esp+14h+arg_4]
		mov	ecx, ebp
		mov	[eax+14h], edx
		mov	edx, ebx
		shr	ebx, 8
		shr	ebp, 8
		shl	edx, 18h
		xor	edx, ebp
		shl	ecx, 18h
		xor	ecx, ebx
		lea	ebx, [esi+ecx+0E443234h]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebx, 8
		shr	ebp, 10h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		mov	[esp+14h+arg_4], edx
		mov	[eax+18h], ebp
		sub	edx, edi
		sub	edx, 0E443234h
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edx, 0FFh
		xor	ebx, ds:dword_1003FB00[edx*4]
		mov	edx, edi
		mov	[eax+1Ch], ebx
		mov	ebx, esi
		shr	ebx, 18h
		shl	esi, 8
		shr	edx, 18h
		xor	edx, esi
		mov	esi, [esp+14h+arg_4]
		shl	edi, 8
		xor	edi, ebx
		lea	ebx, [edx+ecx+1C886467h]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebp, 10h
		shr	ebx, 8
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		sub	esi, edi
		mov	[eax+20h], ebp
		sub	esi, 1C886467h
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		mov	ebp, [esp+14h+arg_4]
		and	esi, 0FFh
		xor	ebx, ds:dword_1003FB00[esi*4]
		mov	esi, ebp
		mov	[eax+24h], ebx
		shr	ebp, 8
		mov	ebx, ecx
		shl	ebx, 18h
		xor	ebx, ebp
		mov	[esp+14h+arg_4], ebx
		shr	ecx, 8
		shl	esi, 18h
		xor	esi, ecx
		mov	ecx, ebx
		lea	ebp, [edx+esi+3910C8CDh]
		mov	ebx, ebp
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	[esp+14h+arg_0], ebp
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, [esp+14h+arg_0]
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		sub	ecx, edi
		mov	ebp, ebx
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		sub	ecx, 3910C8CDh
		mov	[eax+28h], ebp
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, ecx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	ecx, 0FFh
		xor	ebx, ds:dword_1003FB00[ecx*4]
		mov	ecx, edi
		mov	[eax+2Ch], ebx
		mov	ebx, edx
		shr	ebx, 18h
		shl	edx, 8
		shr	ecx, 18h
		xor	ecx, edx
		mov	edx, [esp+14h+arg_4]
		shl	edi, 8
		xor	edi, ebx
		lea	ebx, [ecx+esi+72219199h]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebp, 10h
		shr	ebx, 8
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		sub	edx, edi
		sub	edx, 72219199h
		mov	[eax+30h], ebp
		mov	ebx, edx
		shr	ebx, 10h
		mov	ebp, edx
		shr	ebp, 8
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edx, 0FFh
		xor	ebx, ds:dword_1003FB00[edx*4]
		mov	ebp, esi
		mov	[eax+34h], ebx
		mov	ebx, [esp+14h+arg_4]
		mov	edx, ebx
		shr	ebx, 8
		shl	ebp, 18h
		xor	ebp, ebx
		mov	[esp+14h+arg_4], ebp
		shr	esi, 8
		shl	edx, 18h
		xor	edx, esi
		mov	esi, ebp
		lea	ebx, [ecx+edx-1BBCDCCFh]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebx, 8
		and	ebx, 0FFh
		shr	ebp, 10h
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		sub	esi, edi
		mov	[eax+38h], ebp
		add	esi, 1BBCDCCFh
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	ebx, ds:dword_1003FB00[esi*4]
		mov	esi, edi
		mov	[eax+3Ch], ebx
		mov	ebx, ecx
		shr	ebx, 18h
		shl	ecx, 8
		shr	esi, 18h
		xor	esi, ecx
		mov	ecx, [esp+14h+arg_4]
		shl	edi, 8
		xor	edi, ebx
		lea	ebx, [esi+edx-3779B99Eh]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebp, 10h
		shr	ebx, 8
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		sub	ecx, edi
		add	ecx, 3779B99Eh
		mov	ebx, ecx
		shr	ebx, 10h
		mov	[eax+40h], ebp
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, ecx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	ecx, 0FFh
		xor	ebx, ds:dword_1003FB00[ecx*4]
		mov	ebp, edx
		mov	[eax+44h], ebx
		mov	ebx, [esp+14h+arg_4]
		mov	ecx, ebx
		shr	ebx, 8
		shl	ebp, 18h
		xor	ebp, ebx
		mov	[esp+14h+arg_4], ebp
		shr	edx, 8
		shl	ecx, 18h
		xor	ecx, edx
		mov	edx, ebp
		lea	ebx, [esi+ecx-6EF3733Ch]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebx, 8
		and	ebx, 0FFh
		shr	ebp, 10h
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		sub	edx, edi
		mov	[eax+48h], ebp
		add	edx, 6EF3733Ch
		mov	ebx, edx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edx, 0FFh
		xor	ebx, ds:dword_1003FB00[edx*4]
		mov	edx, edi
		mov	[eax+4Ch], ebx
		mov	ebx, esi
		shr	ebx, 18h
		shl	esi, 8
		shr	edx, 18h
		xor	edx, esi
		mov	esi, [esp+14h+arg_4]
		shl	edi, 8
		xor	edi, ebx
		lea	ebx, [edx+ecx+22191988h]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebp, 10h
		shr	ebx, 8
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		sub	esi, edi
		and	ebx, 0FFh
		sub	esi, 22191988h
		xor	ebp, ds:dword_1003FB00[ebx*4]
		mov	[eax+50h], ebp
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	ebx, ds:dword_1003FB00[esi*4]
		mov	ebp, ecx
		mov	[eax+54h], ebx
		mov	ebx, [esp+14h+arg_4]
		mov	esi, ebx
		shr	ebx, 8
		shl	ebp, 18h
		xor	ebp, ebx
		mov	[esp+14h+arg_4], ebp
		shr	ecx, 8
		shl	esi, 18h
		xor	esi, ecx
		mov	ecx, ebp
		lea	ebx, [edx+esi+4432330Fh]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebx, 8
		and	ebx, 0FFh
		shr	ebp, 10h
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		sub	ecx, edi
		mov	[eax+58h], ebp
		sub	ecx, 4432330Fh
		mov	ebx, ecx
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, ecx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, ecx
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	ecx, 0FFh
		xor	ebx, ds:dword_1003FB00[ecx*4]
		mov	ecx, edi
		mov	[eax+5Ch], ebx
		mov	ebx, edx
		shr	ebx, 18h
		shl	edx, 8
		shr	ecx, 18h
		xor	ecx, edx
		mov	edx, [esp+14h+arg_4]
		shl	edi, 8
		xor	edi, ebx
		lea	ebx, [ecx+esi-779B99E3h]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebp, 10h
		shr	ebx, 8
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		sub	edx, edi
		shr	ebx, 18h
		add	edx, 779B99E3h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		mov	ebx, edx
		mov	[eax+60h], ebp
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, edx
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edx
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edx, 0FFh
		xor	ebx, ds:dword_1003FB00[edx*4]
		mov	ebp, esi
		mov	[eax+64h], ebx
		mov	ebx, [esp+14h+arg_4]
		mov	edx, ebx
		shr	ebx, 8
		shl	ebp, 18h
		xor	ebp, ebx
		mov	[esp+14h+arg_4], ebp
		shr	esi, 8
		shl	edx, 18h
		xor	edx, esi
		mov	esi, ebp
		lea	ebx, [ecx+edx+10C8CC3Ah]
		mov	ebp, ebx
		mov	[esp+14h+arg_0], ebx
		shr	ebx, 8
		and	ebx, 0FFh
		shr	ebp, 10h
		and	ebp, 0FFh
		mov	ebp, ds:dword_10040300[ebp*4]
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		and	ebx, 0FFh
		xor	ebp, ds:dword_1003FB00[ebx*4]
		sub	esi, edi
		sub	esi, 10C8CC3Ah
		mov	[eax+68h], ebp
		mov	ebx, esi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	ebx, ds:dword_1003FB00[esi*4]
		mov	esi, edi
		mov	[eax+6Ch], ebx
		mov	ebx, ecx
		shl	ecx, 8
		shr	ebx, 18h
		shr	esi, 18h
		xor	esi, ecx
		shl	edi, 8
		xor	ebx, edi
		lea	edi, [esi+edx+21919873h]
		mov	[esp+14h+arg_0], esi
		mov	esi, [esp+14h+arg_4]
		mov	[esp+14h+var_4], ebx
		mov	ecx, esi
		sub	ecx, ebx
		mov	ebx, edi
		shr	ebx, 10h
		mov	ebp, edi
		shr	ebp, 8
		sub	ecx, 21919873h
		and	ebx, 0FFh
		and	ebp, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		and	edi, 0FFh
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		xor	ebx, ds:dword_1003FB00[edi*4]
		mov	edi, ecx
		mov	[eax+70h], ebx
		shr	edi, 10h
		mov	ebx, ecx
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		shr	ebx, 8
		and	ebx, 0FFh
		xor	edi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ecx
		and	ecx, 0FFh
		shr	ebx, 18h
		xor	edi, ds:dword_10040700[ebx*4]
		xor	edi, ds:dword_1003FB00[ecx*4]
		mov	ecx, edx
		mov	[eax+74h], edi
		mov	edi, esi
		shr	esi, 8
		shl	ecx, 18h
		xor	ecx, esi
		shl	edi, 18h
		shr	edx, 8
		xor	edi, edx
		mov	edx, ecx
		mov	ecx, [esp+14h+arg_0]
		sub	edx, [esp+14h+var_4]
		lea	ecx, [ecx+edi+432330E5h]
		mov	esi, ecx
		shr	esi, 10h
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		mov	edi, ecx
		shr	edi, 8
		and	edi, 0FFh
		xor	esi, ds:dword_1003FF00[edi*4]
		mov	edi, ecx
		and	ecx, 0FFh
		shr	edi, 18h
		xor	esi, ds:dword_10040700[edi*4]
		sub	edx, 432330E5h
		xor	esi, ds:dword_1003FB00[ecx*4]
		mov	ecx, edx
		mov	[eax+78h], esi
		shr	ecx, 10h
		and	ecx, 0FFh
		mov	ecx, ds:dword_10040300[ecx*4]
		mov	esi, edx
		shr	esi, 8
		and	esi, 0FFh
		xor	ecx, ds:dword_1003FF00[esi*4]
		mov	esi, edx
		shr	esi, 18h
		xor	ecx, ds:dword_10040700[esi*4]
		pop	edi
		and	edx, 0FFh
		xor	ecx, ds:dword_1003FB00[edx*4]
		pop	esi
		pop	ebp
		mov	[eax+7Ch], ecx
		pop	ebx
		pop	ecx
		retn
sub_10021BE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10022770	proc near		; CODE XREF: sub_10024490+BAp
					; sub_10024490+137p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		movzx	ecx, byte ptr [esi+8]
		movzx	eax, byte ptr [esi+9]
		movzx	edx, byte ptr [esi+0Ah]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Bh]
		shl	ecx, 8
		or	ecx, edx
		movzx	edx, byte ptr [esi+0Ch]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Dh]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Eh]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Fh]
		push	edi
		shl	edx, 8
		or	edx, eax
		mov	eax, [esp+14h+arg_8]
		mov	edi, [eax]
		mov	ebx, [eax+4]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	ebp, ebx
		shr	ebp, 8
		mov	[esp+14h+arg_0], edi
		mov	edi, ebx
		and	ebp, 0FFh
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	edi, ds:dword_1003FB00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		add	ebx, edi
		mov	[esp+14h+arg_0], ebx
		mov	ebp, ebx
		shr	ebp, 10h
		shr	ebx, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	[esp+14h+arg_8], ebx
		mov	ebx, ds:dword_10040300[ebp*4]
		mov	ebp, [esp+14h+arg_8]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, [esp+14h+arg_0]
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		mov	ebp, [esp+14h+arg_0]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FB00[ebp*4]
		add	edi, ebx
		mov	[esp+14h+arg_0], ebx
		mov	ebp, edi
		shr	ebp, 8
		mov	ebx, edi
		shr	ebx, 10h
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	[esp+14h+arg_8], ebp
		mov	ebp, ds:dword_10040300[ebx*4]
		mov	ebx, [esp+14h+arg_8]
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, edi
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		and	edi, 0FFh
		xor	ebp, ds:dword_1003FB00[edi*4]
		mov	[esp+14h+var_4], ebp
		movzx	edi, byte ptr [esi]
		movzx	ebx, byte ptr [esi+1]
		add	ebp, [esp+14h+arg_0]
		shl	edi, 8
		or	edi, ebx
		movzx	ebx, byte ptr [esi+2]
		shl	edi, 8
		or	edi, ebx
		movzx	ebx, byte ptr [esi+3]
		shl	edi, 8
		or	edi, ebx
		movzx	ebx, byte ptr [esi+5]
		xor	edi, ebp
		mov	[esp+14h+arg_0], edi
		movzx	edi, byte ptr [esi+4]
		shl	edi, 8
		or	edi, ebx
		movzx	ebx, byte ptr [esi+6]
		movzx	esi, byte ptr [esi+7]
		shl	edi, 8
		or	edi, ebx
		mov	ebp, [eax+0Ch]
		shl	edi, 8
		or	edi, esi
		xor	edi, [esp+14h+var_4]
		mov	[esp+14h+arg_8], edi
		mov	edi, [eax+8]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	ebx, 8
		shr	esi, 10h
		and	ebx, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebx, 10h
		shr	ebp, 8
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		and	edi, 0FFh
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+14h]
		xor	edx, edi
		mov	edi, [eax+10h]
		xor	ecx, esi
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		mov	ebp, edi
		shr	ebp, 8
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		mov	ebp, esi
		shr	ebp, 8
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+1Ch]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+18h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	ebx, 8
		shr	esi, 10h
		and	ebx, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		mov	ebp, edi
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	ebp, esi
		mov	edi, ds:dword_10040300[edi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+24h]
		xor	ecx, esi
		xor	edx, edi
		mov	edi, [eax+20h]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebx, 10h
		shr	ebp, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		mov	ebp, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+2Ch]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+28h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		shr	esi, 10h
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		mov	ebx, ebp
		shr	ebx, 8
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebp, 8
		and	ebp, 0FFh
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+34h]
		xor	edx, edi
		mov	edi, [eax+30h]
		xor	ecx, esi
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebp, 8
		shr	ebx, 10h
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		xor	[esp+14h+arg_8], esi
		mov	edi, [eax+38h]
		xor	edi, [esp+14h+arg_0]
		mov	ebp, [eax+3Ch]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	ebx, 8
		and	ebx, 0FFh
		shr	esi, 10h
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, edi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+44h]
		xor	ecx, esi
		xor	edx, edi
		mov	edi, [eax+40h]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		mov	ebp, ebx
		shr	ebp, 8
		shr	esi, 10h
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, edi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+4Ch]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+48h]
		xor	edi, [esp+14h+arg_0]
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	esi, 10h
		shr	ebx, 8
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebx, 10h
		shr	ebp, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		mov	ebp, esi
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+54h]
		xor	ecx, esi
		xor	edx, edi
		mov	edi, [eax+50h]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebp, 8
		shr	ebx, 10h
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+5Ch]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+58h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	ebx, 8
		shr	esi, 10h
		and	ebx, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebx, 10h
		shr	ebp, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		mov	ebp, esi
		shr	ebp, 8
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+64h]
		xor	ecx, esi
		xor	edx, edi
		mov	edi, [eax+60h]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		mov	ebp, ebx
		shr	ebp, 8
		shr	esi, 10h
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		mov	ebp, edi
		shr	ebp, 8
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		mov	ebp, esi
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+6Ch]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+68h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		shr	esi, 10h
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		mov	ebx, ebp
		shr	ebx, 8
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebp, edi
		mov	ebx, ds:dword_10040300[ebx*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+74h]
		xor	edx, edi
		mov	edi, [eax+70h]
		xor	ecx, esi
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebp, 8
		shr	ebx, 10h
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		and	edi, 0FFh
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+7Ch]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+78h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		mov	ebx, [esp+14h+arg_8]
		xor	ebp, ebx
		mov	esi, ebp
		mov	eax, ebp
		shr	eax, 10h
		and	eax, 0FFh
		shr	esi, 8
		and	esi, 0FFh
		mov	[esp+14h+arg_8], esi
		mov	esi, ds:dword_10040300[eax*4]
		mov	eax, [esp+14h+arg_8]
		xor	esi, ds:dword_1003FF00[eax*4]
		mov	eax, ebp
		shr	eax, 18h
		xor	esi, ds:dword_10040700[eax*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	eax, edi
		shr	eax, 10h
		and	eax, 0FFh
		mov	eax, ds:dword_10040300[eax*4]
		mov	ebp, edi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	eax, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	eax, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	eax, ds:dword_1003FB00[edi*4]
		add	esi, eax
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	esi, [esp+14h+arg_4]
		add	eax, edi
		xor	ecx, eax
		mov	eax, ecx
		shr	eax, 18h
		mov	[esi], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi+1], al
		mov	eax, ecx
		xor	edx, edi
		shr	eax, 8
		mov	[esi+3], cl
		mov	[esi+2], al
		mov	eax, edx
		mov	ecx, edx
		shr	ecx, 18h
		shr	eax, 10h
		mov	[esi+4], cl
		mov	ecx, edx
		mov	[esi+5], al
		mov	eax, [esp+14h+arg_0]
		mov	[esi+7], dl
		shr	ecx, 8
		mov	edx, eax
		shr	edx, 18h
		mov	[esi+6], cl
		mov	[esi+8], dl
		mov	ecx, eax
		mov	edx, eax
		shr	ecx, 10h
		shr	edx, 8
		mov	[esi+0Bh], al
		mov	[esi+9], cl
		mov	[esi+0Ah], dl
		mov	eax, ebx
		mov	ecx, ebx
		mov	edx, ebx
		shr	eax, 18h
		shr	ecx, 10h
		pop	edi
		shr	edx, 8
		mov	[esi+0Fh], bl
		mov	[esi+0Ch], al
		mov	[esi+0Dh], cl
		mov	[esi+0Eh], dl
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10022770	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10023600	proc near		; CODE XREF: sub_10024490+179p
					; sub_10024490+1DDp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		movzx	ecx, byte ptr [esi+8]
		movzx	eax, byte ptr [esi+9]
		movzx	edx, byte ptr [esi+0Ah]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Bh]
		shl	ecx, 8
		or	ecx, edx
		movzx	edx, byte ptr [esi+0Ch]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Dh]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Eh]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [esi+0Fh]
		push	edi
		shl	edx, 8
		or	edx, eax
		mov	eax, [esp+14h+arg_8]
		mov	edi, [eax+78h]
		mov	ebx, [eax+7Ch]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	ebp, ebx
		shr	ebp, 8
		mov	[esp+14h+arg_0], edi
		mov	edi, ebx
		and	ebp, 0FFh
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	edi, ds:dword_1003FB00[ebx*4]
		mov	ebx, [esp+14h+arg_0]
		add	ebx, edi
		mov	[esp+14h+arg_0], ebx
		mov	ebp, ebx
		shr	ebp, 10h
		shr	ebx, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	[esp+14h+arg_8], ebx
		mov	ebx, ds:dword_10040300[ebp*4]
		mov	ebp, [esp+14h+arg_8]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, [esp+14h+arg_0]
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		mov	ebp, [esp+14h+arg_0]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FB00[ebp*4]
		add	edi, ebx
		mov	[esp+14h+arg_0], ebx
		mov	ebp, edi
		shr	ebp, 8
		mov	ebx, edi
		shr	ebx, 10h
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	[esp+14h+arg_8], ebp
		mov	ebp, ds:dword_10040300[ebx*4]
		mov	ebx, [esp+14h+arg_8]
		xor	ebp, ds:dword_1003FF00[ebx*4]
		mov	ebx, edi
		shr	ebx, 18h
		xor	ebp, ds:dword_10040700[ebx*4]
		and	edi, 0FFh
		xor	ebp, ds:dword_1003FB00[edi*4]
		mov	[esp+14h+var_4], ebp
		movzx	edi, byte ptr [esi]
		movzx	ebx, byte ptr [esi+1]
		add	ebp, [esp+14h+arg_0]
		shl	edi, 8
		or	edi, ebx
		movzx	ebx, byte ptr [esi+2]
		shl	edi, 8
		or	edi, ebx
		movzx	ebx, byte ptr [esi+3]
		shl	edi, 8
		or	edi, ebx
		movzx	ebx, byte ptr [esi+5]
		xor	edi, ebp
		mov	[esp+14h+arg_0], edi
		movzx	edi, byte ptr [esi+4]
		shl	edi, 8
		or	edi, ebx
		movzx	ebx, byte ptr [esi+6]
		movzx	esi, byte ptr [esi+7]
		shl	edi, 8
		or	edi, ebx
		mov	ebp, [eax+74h]
		shl	edi, 8
		or	edi, esi
		xor	edi, [esp+14h+var_4]
		mov	[esp+14h+arg_8], edi
		mov	edi, [eax+70h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	ebx, 8
		shr	esi, 10h
		and	ebx, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebx, 10h
		shr	ebp, 8
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		and	edi, 0FFh
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+6Ch]
		xor	edx, edi
		mov	edi, [eax+68h]
		xor	ecx, esi
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		mov	ebp, edi
		shr	ebp, 8
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		mov	ebp, esi
		shr	ebp, 8
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+64h]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+60h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	ebx, 8
		shr	esi, 10h
		and	ebx, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		mov	ebp, edi
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	ebp, esi
		mov	edi, ds:dword_10040300[edi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+5Ch]
		xor	ecx, esi
		xor	edx, edi
		mov	edi, [eax+58h]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebx, 10h
		shr	ebp, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		mov	ebp, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+54h]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+50h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		shr	esi, 10h
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		mov	ebx, ebp
		shr	ebx, 8
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebp, 8
		and	ebp, 0FFh
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+4Ch]
		xor	edx, edi
		mov	edi, [eax+48h]
		xor	ecx, esi
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebp, 8
		shr	ebx, 10h
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		xor	[esp+14h+arg_8], esi
		mov	edi, [eax+40h]
		xor	edi, [esp+14h+arg_0]
		mov	ebp, [eax+44h]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	ebx, 8
		and	ebx, 0FFh
		shr	esi, 10h
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, edi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+3Ch]
		xor	ecx, esi
		xor	edx, edi
		mov	edi, [eax+38h]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		mov	ebp, ebx
		shr	ebp, 8
		shr	esi, 10h
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		mov	ebp, edi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+34h]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+30h]
		xor	edi, [esp+14h+arg_0]
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	esi, 10h
		shr	ebx, 8
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebx, 10h
		shr	ebp, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		mov	ebp, esi
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+2Ch]
		xor	ecx, esi
		xor	edx, edi
		mov	edi, [eax+28h]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebp, 8
		shr	ebx, 10h
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+24h]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+20h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		mov	ebx, ebp
		shr	ebx, 8
		shr	esi, 10h
		and	ebx, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebx, 10h
		shr	ebp, 8
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		mov	ebp, esi
		shr	ebp, 8
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+1Ch]
		xor	ecx, esi
		xor	edx, edi
		mov	edi, [eax+18h]
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		mov	ebp, ebx
		shr	ebp, 8
		shr	esi, 10h
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		mov	ebp, edi
		shr	ebp, 8
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		mov	ebp, esi
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+14h]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax+10h]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		xor	ebp, [esp+14h+arg_8]
		mov	esi, ebp
		shr	esi, 10h
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		mov	ebx, ebp
		shr	ebx, 8
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FF00[ebx*4]
		mov	ebx, ebp
		shr	ebx, 18h
		xor	esi, ds:dword_10040700[ebx*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	ebx, edi
		shr	ebx, 10h
		and	ebx, 0FFh
		mov	ebp, edi
		mov	ebx, ds:dword_10040300[ebx*4]
		shr	ebp, 8
		and	ebp, 0FFh
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		lea	esi, [edi+ebx]
		mov	ebx, [eax+0Ch]
		xor	edx, edi
		mov	edi, [eax+8]
		xor	ecx, esi
		xor	edi, ecx
		xor	ebx, edi
		xor	ebx, edx
		mov	esi, ebx
		shr	esi, 10h
		mov	ebp, ebx
		shr	ebp, 8
		and	ebp, 0FFh
		and	esi, 0FFh
		mov	esi, ds:dword_10040300[esi*4]
		xor	esi, ds:dword_1003FF00[ebp*4]
		mov	ebp, ebx
		shr	ebp, 18h
		xor	esi, ds:dword_10040700[ebp*4]
		and	ebx, 0FFh
		xor	esi, ds:dword_1003FB00[ebx*4]
		add	edi, esi
		mov	ebx, edi
		mov	ebp, edi
		shr	ebp, 8
		shr	ebx, 10h
		and	ebp, 0FFh
		and	ebx, 0FFh
		mov	ebx, ds:dword_10040300[ebx*4]
		xor	ebx, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		and	edi, 0FFh
		shr	ebp, 18h
		xor	ebx, ds:dword_10040700[ebp*4]
		xor	ebx, ds:dword_1003FB00[edi*4]
		add	esi, ebx
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		mov	ebp, [eax+4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	[esp+14h+var_4], edi
		mov	esi, [esp+14h+var_4]
		xor	[esp+14h+arg_8], esi
		add	edi, ebx
		xor	[esp+14h+arg_0], edi
		mov	edi, [eax]
		xor	edi, [esp+14h+arg_0]
		xor	ebp, edi
		mov	ebx, [esp+14h+arg_8]
		xor	ebp, ebx
		mov	esi, ebp
		mov	eax, ebp
		shr	eax, 10h
		and	eax, 0FFh
		shr	esi, 8
		and	esi, 0FFh
		mov	[esp+14h+arg_8], esi
		mov	esi, ds:dword_10040300[eax*4]
		mov	eax, [esp+14h+arg_8]
		xor	esi, ds:dword_1003FF00[eax*4]
		mov	eax, ebp
		shr	eax, 18h
		xor	esi, ds:dword_10040700[eax*4]
		and	ebp, 0FFh
		xor	esi, ds:dword_1003FB00[ebp*4]
		add	edi, esi
		mov	eax, edi
		shr	eax, 10h
		and	eax, 0FFh
		mov	eax, ds:dword_10040300[eax*4]
		mov	ebp, edi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	eax, ds:dword_1003FF00[ebp*4]
		mov	ebp, edi
		shr	ebp, 18h
		xor	eax, ds:dword_10040700[ebp*4]
		and	edi, 0FFh
		xor	eax, ds:dword_1003FB00[edi*4]
		add	esi, eax
		mov	edi, esi
		shr	edi, 10h
		and	edi, 0FFh
		mov	edi, ds:dword_10040300[edi*4]
		mov	ebp, esi
		shr	ebp, 8
		and	ebp, 0FFh
		xor	edi, ds:dword_1003FF00[ebp*4]
		mov	ebp, esi
		shr	ebp, 18h
		xor	edi, ds:dword_10040700[ebp*4]
		and	esi, 0FFh
		xor	edi, ds:dword_1003FB00[esi*4]
		mov	esi, [esp+14h+arg_4]
		add	eax, edi
		xor	ecx, eax
		mov	eax, ecx
		shr	eax, 18h
		mov	[esi], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[esi+1], al
		mov	eax, ecx
		xor	edx, edi
		shr	eax, 8
		mov	[esi+3], cl
		mov	[esi+2], al
		mov	eax, edx
		mov	ecx, edx
		shr	ecx, 18h
		shr	eax, 10h
		mov	[esi+4], cl
		mov	ecx, edx
		mov	[esi+5], al
		mov	eax, [esp+14h+arg_0]
		mov	[esi+7], dl
		shr	ecx, 8
		mov	edx, eax
		shr	edx, 18h
		mov	[esi+6], cl
		mov	[esi+8], dl
		mov	ecx, eax
		mov	edx, eax
		shr	ecx, 10h
		shr	edx, 8
		mov	[esi+0Bh], al
		mov	[esi+9], cl
		mov	[esi+0Ah], dl
		mov	eax, ebx
		mov	ecx, ebx
		mov	edx, ebx
		shr	eax, 18h
		shr	ecx, 10h
		pop	edi
		shr	edx, 8
		mov	[esi+0Fh], bl
		mov	[esi+0Ch], al
		mov	[esi+0Dh], cl
		mov	[esi+0Eh], dl
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10023600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024490	proc near		; CODE XREF: sub_10024930+47p
					; sub_100249B0+46p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 2Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2Ch+var_4], eax
		cmp	[esp+2Ch+arg_14], 0
		mov	eax, [esp+2Ch+arg_C]
		push	ebx
		push	ebp
		mov	ebp, [esp+34h+arg_10]
		push	esi
		mov	esi, [esp+38h+arg_4]
		push	edi
		mov	edi, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_24], ebp
		mov	ebx, ebp
		jz	loc_100245EA
		mov	edx, [esp+3Ch+arg_8]
		cmp	edx, 10h
		jb	loc_10024571
		shr	edx, 4
		mov	[esp+3Ch+var_2C], edx
		jmp	short loc_100244E0
; ---------------------------------------------------------------------------
		align 10h

loc_100244E0:				; CODE XREF: sub_10024490+4Bj
					; sub_10024490+D3j
		mov	edx, edi
		sub	edx, ebx
		mov	[esp+3Ch+var_20], edx
		mov	edx, esi
		mov	eax, ebx
		sub	edx, ebx
		mov	ebx, edi
		sub	ebx, esi
		lea	ebp, [edi+3]
		lea	ecx, [esi+1]
		mov	[esp+3Ch+var_18], ebx
		mov	[esp+3Ch+var_1C], 4

loc_10024504:				; CODE XREF: sub_10024490+B1j
		mov	ebx, [esp+3Ch+var_20]
		movzx	ebx, byte ptr [ebx+eax]
		xor	bl, [eax]
		add	eax, 4
		mov	[edx+eax-4], bl
		mov	ebx, [esp+3Ch+var_18]
		movzx	ebx, byte ptr [ebx+ecx]
		xor	bl, [eax-3]
		add	ecx, 4
		mov	[ecx-4], bl
		movzx	ebx, byte ptr [eax-2]
		xor	bl, [ebp-1]
		add	ebp, 4
		mov	[ecx-3], bl
		movzx	ebx, byte ptr [eax-1]
		xor	bl, [ebp-4]
		dec	[esp+3Ch+var_1C]
		mov	[ecx-2], bl
		jnz	short loc_10024504
		mov	ecx, [esp+3Ch+var_28]
		push	ecx
		push	esi
		push	esi
		call	sub_10022770
		sub	[esp+48h+arg_8], 10h
		mov	ebx, esi
		add	esp, 0Ch
		add	edi, 10h
		add	esi, 10h
		dec	[esp+3Ch+var_2C]
		jnz	loc_100244E0
		mov	edx, [esp+3Ch+arg_8]
		mov	ebp, [esp+3Ch+var_24]

loc_10024571:				; CODE XREF: sub_10024490+3Ej
		test	edx, edx
		jz	short loc_100245D1
		mov	ecx, edi
		sub	ecx, ebx
		mov	edi, esi
		mov	eax, ebx
		mov	[esp+3Ch+var_20], ecx
		sub	edi, ebx
		mov	[esp+3Ch+var_2C], edx
		jmp	short loc_10024594
; ---------------------------------------------------------------------------
		align 10h

loc_10024590:				; CODE XREF: sub_10024490+112j
		mov	ecx, [esp+3Ch+var_20]

loc_10024594:				; CODE XREF: sub_10024490+F7j
		mov	cl, [eax+ecx]
		xor	cl, [eax]
		inc	eax
		dec	[esp+3Ch+var_2C]
		mov	[eax+edi-1], cl
		jnz	short loc_10024590
		cmp	edx, 10h
		jnb	short loc_100245C0
		mov	edi, ebx
		mov	ecx, 10h
		sub	edi, esi
		lea	eax, [esi+edx]
		sub	ecx, edx

loc_100245B7:				; CODE XREF: sub_10024490+12Ej
		mov	dl, [edi+eax]
		mov	[eax], dl
		inc	eax
		dec	ecx
		jnz	short loc_100245B7

loc_100245C0:				; CODE XREF: sub_10024490+117j
		mov	eax, [esp+3Ch+var_28]
		push	eax
		push	esi
		push	esi
		call	sub_10022770
		add	esp, 0Ch
		mov	ebx, esi

loc_100245D1:				; CODE XREF: sub_10024490+E3j
		mov	ecx, [ebx]
		mov	[ebp+0], ecx
		mov	edx, [ebx+4]
		mov	[ebp+4], edx
		mov	eax, [ebx+8]
		mov	[ebp+8], eax
		mov	ecx, [ebx+0Ch]
		jmp	loc_100247DC
; ---------------------------------------------------------------------------

loc_100245EA:				; CODE XREF: sub_10024490+31j
		mov	eax, [esp+3Ch+arg_8]
		cmp	edi, esi
		jz	loc_100246C6
		cmp	eax, 10h
		jb	short loc_1002465E
		shr	eax, 4
		mov	[esp+3Ch+var_2C], eax

loc_10024602:				; CODE XREF: sub_10024490+1C4j
		mov	edx, [esp+3Ch+var_28]
		push	edx
		push	esi
		push	edi
		call	sub_10023600
		mov	ebp, ebx
		add	esp, 0Ch
		lea	ecx, [ebx+2]
		mov	eax, esi
		sub	ebp, esi
		mov	edx, 4
		nop

loc_10024620:				; CODE XREF: sub_10024490+1B1j
		movzx	ebx, byte ptr [eax+ebp]
		xor	[eax], bl
		movzx	ebx, byte ptr [ecx-1]
		xor	[eax+1], bl
		movzx	ebx, byte ptr [ecx]
		xor	[eax+2], bl
		movzx	ebx, byte ptr [ecx+1]
		xor	[eax+3], bl
		add	eax, 4
		add	ecx, 4
		dec	edx
		jnz	short loc_10024620
		sub	[esp+3Ch+arg_8], 10h
		mov	ebx, edi
		add	edi, 10h
		add	esi, 10h
		dec	[esp+3Ch+var_2C]
		jnz	short loc_10024602
		mov	ebp, [esp+3Ch+var_24]
		mov	eax, [esp+3Ch+arg_8]

loc_1002465E:				; CODE XREF: sub_10024490+169j
		test	eax, eax
		jz	short loc_1002469C
		mov	eax, [esp+3Ch+var_28]
		push	eax
		lea	ecx, [esp+40h+var_14]
		push	ecx
		push	edi
		call	sub_10023600
		xor	ecx, ecx
		add	esp, 0Ch
		cmp	[esp+3Ch+arg_8], ecx
		jbe	short loc_1002469A
		lea	edx, [esp+3Ch+var_14]
		mov	eax, edx
		sub	ebx, edx
		sub	esi, eax

loc_10024687:				; CODE XREF: sub_10024490+208j
		lea	eax, [esp+ecx+3Ch+var_14]
		mov	dl, [eax+ebx]
		xor	dl, [eax]
		inc	ecx
		mov	[eax+esi], dl
		cmp	ecx, [esp+3Ch+arg_8]
		jb	short loc_10024687

loc_1002469A:				; CODE XREF: sub_10024490+1EBj
		mov	ebx, edi

loc_1002469C:				; CODE XREF: sub_10024490+1D0j
		mov	eax, [ebx]
		mov	[ebp+0], eax
		mov	ecx, [ebx+4]
		mov	[ebp+4], ecx
		mov	edx, [ebx+8]
		mov	[ebp+8], edx
		mov	eax, [ebx+0Ch]
		pop	edi
		pop	esi
		mov	[ebp+0Ch], eax
		pop	ebp
		pop	ebx
		mov	ecx, [esp+2Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_100246C6:				; CODE XREF: sub_10024490+160j
		cmp	eax, 10h
		jb	loc_1002476A
		sub	ebx, esi
		shr	eax, 4
		mov	[esp+3Ch+var_24], eax

loc_100246D8:				; CODE XREF: sub_10024490+2D0j
		mov	edx, [edi+4]
		mov	ecx, [edi]
		mov	eax, [edi+8]
		mov	[esp+3Ch+var_10], edx
		mov	edx, [esp+3Ch+var_28]
		push	edx
		mov	[esp+40h+var_14], ecx
		mov	ecx, [edi+0Ch]
		push	esi
		push	edi
		mov	[esp+48h+var_C], eax
		mov	[esp+48h+var_8], ecx
		call	sub_10023600
		mov	eax, esi
		add	esp, 0Ch
		lea	ecx, [ebp+2]
		mov	esi, 4
		lea	esp, [esp+0]

loc_10024710:				; CODE XREF: sub_10024490+2A1j
		movzx	edx, byte ptr [ebx+eax]
		xor	[eax], dl
		movzx	edx, byte ptr [ecx-1]
		xor	[eax+1], dl
		movzx	edx, byte ptr [ecx]
		xor	[eax+2], dl
		movzx	edx, byte ptr [ecx+1]
		xor	[eax+3], dl
		add	eax, 4
		add	ecx, 4
		dec	esi
		jnz	short loc_10024710
		mov	ecx, [esp+3Ch+var_14]
		mov	edx, [esp+3Ch+var_10]
		sub	[esp+3Ch+arg_8], 10h
		mov	[ebp+0], ecx
		mov	ecx, [esp+3Ch+var_C]
		mov	[ebp+4], edx
		mov	edx, [esp+3Ch+var_8]
		add	edi, 10h
		sub	ebx, 10h
		dec	[esp+3Ch+var_24]
		mov	[ebp+8], ecx
		mov	[ebp+0Ch], edx
		mov	esi, eax
		jnz	loc_100246D8
		mov	eax, [esp+3Ch+arg_8]

loc_1002476A:				; CODE XREF: sub_10024490+239j
		test	eax, eax
		jz	short loc_100247DF
		mov	ecx, [edi+4]
		mov	eax, [edi]
		mov	edx, [edi+8]
		mov	[esp+3Ch+var_14], eax
		mov	eax, [edi+0Ch]
		mov	[esp+3Ch+var_10], ecx
		mov	ecx, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_C], edx
		push	ecx
		lea	edx, [esp+40h+var_14]
		mov	[esp+40h+var_8], eax
		push	edx
		mov	eax, edx
		push	eax
		call	sub_10023600
		mov	edx, [esp+48h+arg_8]
		add	esp, 0Ch
		xor	ecx, ecx
		test	edx, edx
		jz	short loc_100247C3
		lea	eax, [esp+3Ch+var_14]
		mov	edi, ebp
		sub	edi, eax
		sub	esi, eax

loc_100247B2:				; CODE XREF: sub_10024490+331j
		lea	eax, [esp+ecx+3Ch+var_14]
		mov	bl, [edi+eax]
		xor	bl, [eax]
		inc	ecx
		mov	[eax+esi], bl
		cmp	ecx, edx
		jb	short loc_100247B2

loc_100247C3:				; CODE XREF: sub_10024490+316j
		mov	ecx, [esp+3Ch+var_14]
		mov	edx, [esp+3Ch+var_10]
		mov	eax, [esp+3Ch+var_C]
		mov	[ebp+0], ecx
		mov	ecx, [esp+3Ch+var_8]
		mov	[ebp+4], edx
		mov	[ebp+8], eax

loc_100247DC:				; CODE XREF: sub_10024490+155j
		mov	[ebp+0Ch], ecx

loc_100247DF:				; CODE XREF: sub_10024490+2DCj
		mov	ecx, [esp+3Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2Ch
		retn
sub_10024490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024800	proc near		; DATA XREF: .rdata:10039420o
		push	98h
		call	PORT_ZAlloc_Util
		add	esp, 4
		retn
sub_10024800	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024810	proc near		; CODE XREF: sub_100248B0+26p
					; DATA XREF: .rdata:1003941Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1002482B

loc_10024819:				; CODE XREF: sub_10024810+25j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002482B:				; CODE XREF: sub_10024810+7j
		mov	eax, [esp+4+arg_10]
		sub	eax, 0
		jz	short loc_1002487A
		dec	eax
		jnz	short loc_10024819
		mov	eax, [esp+4+arg_C]
		mov	ecx, [eax]
		mov	[esi], ecx
		mov	edx, [eax+4]
		mov	[esi+4], edx
		mov	ecx, [eax+8]
		mov	[esi+8], ecx
		mov	edx, [eax+0Ch]
		mov	ecx, [esp+4+arg_4]
		lea	eax, [esi+10h]
		push	eax
		push	ecx
		mov	[esi+0Ch], edx
		call	sub_10021BE0
		mov	edx, [esp+0Ch+arg_14]
		add	esp, 8
		mov	dword ptr [esi+90h], 1
		mov	[esi+94h], edx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002487A:				; CODE XREF: sub_10024810+22j
		mov	ecx, [esp+4+arg_4]
		lea	eax, [esi+10h]
		push	eax
		push	ecx
		call	sub_10021BE0
		mov	edx, [esp+0Ch+arg_14]
		add	esp, 8
		mov	dword ptr [esi+90h], 0
		mov	[esi+94h], edx
		xor	eax, eax
		pop	esi
		retn
sub_10024810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100248B0	proc near		; DATA XREF: .rdata:10039424o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	98h
		call	PORT_ZAlloc_Util
		mov	ecx, [esp+8+arg_8]
		mov	edx, [esp+8+arg_4]
		push	0
		mov	esi, eax
		mov	eax, [esp+0Ch+arg_C]
		push	eax
		mov	eax, [esp+10h+arg_0]
		push	ecx
		push	edx
		push	10h
		push	eax
		push	esi
		call	sub_10024810
		add	esp, 20h
		test	eax, eax
		jz	short loc_100248F4
		push	98h
		push	esi
		call	PORT_ZFree_Util
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100248F4:				; CODE XREF: sub_100248B0+30j
		mov	eax, esi
		pop	esi
		retn
sub_100248B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10024900(void	*Dst, int)
sub_10024900	proc near		; DATA XREF: .rdata:10039428o

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jz	short loc_10024929
		push	98h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[esp+4+arg_4], 0
		jz	short loc_10024929
		push	esi
		call	PORT_Free_Util
		add	esp, 4

loc_10024929:				; CODE XREF: sub_10024900+7j
					; sub_10024900+1Ej
		pop	esi
		retn
sub_10024900	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024930	proc near		; DATA XREF: .rdata:1003942Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10024949

loc_10024938:				; CODE XREF: sub_10024930+20j
					; sub_10024930+2Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10024949:				; CODE XREF: sub_10024930+6j
		cmp	dword ptr [eax+94h], 0
		jz	short loc_10024938
		mov	ecx, [eax+90h]
		sub	ecx, 0
		jz	short loc_10024989
		dec	ecx
		jnz	short loc_10024938
		mov	ecx, [esp+arg_10]
		push	esi
		mov	esi, [esp+4+arg_14]
		push	1
		push	eax
		add	eax, 10h
		push	eax
		mov	eax, [esp+10h+arg_4]
		push	esi
		push	eax
		push	ecx
		call	sub_10024490
		mov	edx, [esp+1Ch+arg_8]
		add	esp, 18h
		mov	[edx], esi
		pop	esi
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10024989:				; CODE XREF: sub_10024930+2Bj
		mov	ecx, [esp+arg_10]
		add	eax, 10h
		push	eax
		mov	eax, [esp+4+arg_4]
		push	eax
		push	ecx
		call	sub_10022770
		mov	eax, [esp+0Ch+arg_8]
		mov	edx, [esp+0Ch+arg_14]
		mov	[eax], edx
		add	esp, 0Ch
		xor	eax, eax
		retn
sub_10024930	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100249B0	proc near		; DATA XREF: .rdata:10039430o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_100249C9

loc_100249B8:				; CODE XREF: sub_100249B0+20j
					; sub_100249B0+2Ej
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_100249C9:				; CODE XREF: sub_100249B0+6j
		cmp	dword ptr [eax+94h], 0
		jnz	short loc_100249B8
		mov	ecx, [eax+90h]
		sub	ecx, 0
		jz	short loc_10024A08
		dec	ecx
		jnz	short loc_100249B8
		push	esi
		mov	esi, [esp+4+arg_14]
		push	ecx
		mov	ecx, [esp+8+arg_10]
		push	eax
		add	eax, 10h
		push	eax
		mov	eax, [esp+10h+arg_4]
		push	esi
		push	eax
		push	ecx
		call	sub_10024490
		mov	edx, [esp+1Ch+arg_8]
		add	esp, 18h
		mov	[edx], esi
		pop	esi
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10024A08:				; CODE XREF: sub_100249B0+2Bj
		mov	ecx, [esp+arg_10]
		add	eax, 10h
		push	eax
		mov	eax, [esp+4+arg_4]
		push	eax
		push	ecx
		call	sub_10023600
		mov	eax, [esp+0Ch+arg_8]
		mov	edx, [esp+0Ch+arg_14]
		mov	[eax], edx
		add	esp, 0Ch
		xor	eax, eax
		retn
sub_100249B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024A30	proc near		; CODE XREF: sub_10024A80+94p
					; sub_10024A80+A3p ...

var_4		= byte ptr -4
var_3		= byte ptr -3

		push	ecx
		mov	eax, [esi+8]
		cmp	eax, 0FFFFh
		jbe	short loc_10024A42
		mov	eax, 0FFFFFFFCh
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10024A42:				; CODE XREF: sub_10024A30+9j
		mov	ecx, [edi]
		shr	eax, 8
		mov	[esp+4+var_4], al
		mov	al, [esi+8]
		mov	[esp+4+var_3], al
		mov	eax, [edi+4]
		mov	ecx, [ecx+14h]
		push	2
		lea	edx, [esp+8+var_4]
		push	edx
		push	eax
		call	ecx
		mov	eax, [esi+8]
		mov	ecx, [esi+4]
		mov	edx, [edi]
		push	eax
		mov	eax, [edi+4]
		push	ecx
		mov	ecx, [edx+14h]
		push	eax
		call	ecx
		add	esp, 18h
		xor	eax, eax
		pop	ecx
		retn
sub_10024A30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024A80	proc near		; CODE XREF: sub_10024BB0+4B0p
					; sub_10025210+3E2p

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 68h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+68h+var_4], eax
		mov	eax, [esp+68h+arg_0]
		push	ebx
		push	esi
		mov	esi, [esp+70h+arg_4]
		mov	[esp+70h+var_48], ecx
		mov	ecx, [esp+70h+arg_8]
		mov	[esp+70h+var_5C], edx
		mov	edx, [esp+70h+arg_C]
		push	eax
		mov	[esp+74h+var_58], ecx
		mov	[esp+74h+var_60], edx
		call	sub_10008790
		mov	ebx, eax
		add	esp, 4
		mov	[esp+70h+var_68], ebx
		test	ebx, ebx
		jz	loc_10024B97
		cmp	dword ptr [ebx], 40h
		ja	loc_10024B97
		mov	eax, [ebx+4]
		push	ebp
		call	eax
		mov	ebp, eax
		mov	[esp+74h+var_64], ebp
		test	ebp, ebp
		jnz	short loc_10024AF8
		lea	eax, [ebp-2]
		pop	ebp
		pop	esi
		pop	ebx
		mov	ecx, [esp+68h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 68h
		retn
; ---------------------------------------------------------------------------

loc_10024AF8:				; CODE XREF: sub_10024A80+61j
		lea	ecx, [esp+74h+var_44]
		mov	[esp+74h+var_50], ecx
		mov	edx, [ebx]
		push	edi
		mov	[esp+78h+var_4C], edx
		mov	eax, [ebx+10h]
		push	ebp
		call	eax
		add	esp, 4
		lea	edi, [esp+78h+var_68]
		call	sub_10024A30
		mov	esi, eax
		test	esi, esi
		js	short loc_10024B77
		mov	esi, [esp+78h+var_48]
		call	sub_10024A30
		mov	esi, eax
		test	esi, esi
		js	short loc_10024B77
		mov	esi, [esp+78h+var_5C]
		call	sub_10024A30
		mov	esi, eax
		test	esi, esi
		js	short loc_10024B77
		mov	esi, [esp+78h+var_58]
		call	sub_10024A30
		mov	esi, eax
		test	esi, esi
		js	short loc_10024B77
		mov	edx, [esp+78h+var_50]
		mov	eax, [ebx+18h]
		push	40h
		lea	ecx, [esp+7Ch+var_4C]
		push	ecx
		push	edx
		push	ebp
		call	eax
		mov	ecx, [esp+88h+var_4C]
		mov	edx, [esp+88h+var_50]
		mov	eax, [esp+88h+var_60]
		push	ecx
		push	edx
		push	eax
		call	sub_10029D30
		add	esp, 1Ch
		mov	esi, eax

loc_10024B77:				; CODE XREF: sub_10024A80+9Dj
					; sub_10024A80+ACj ...
		mov	ecx, [ebx+0Ch]
		push	1
		push	ebp
		call	ecx
		add	esp, 8
		pop	edi
		pop	ebp
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	ecx, [esp+68h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 68h
		retn
; ---------------------------------------------------------------------------

loc_10024B97:				; CODE XREF: sub_10024A80+44j
					; sub_10024A80+4Dj
		mov	ecx, [esp+70h+var_4]
		pop	esi
		pop	ebx
		xor	ecx, esp
		mov	eax, 0FFFFFFFCh
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 68h
		retn
sub_10024A80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10024BB0	proc near		; DATA XREF: .rdata:10039454o

var_B0		= dword	ptr -0B0h
var_AC		= byte ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		sub	esp, 0B0h
		push	ebx
		push	ebp
		push	edi
		xor	edi, edi
		mov	[esp+0BCh+var_B0], edi
		cmp	[esp+0BCh+arg_0], edi
		jz	loc_100251ED
		mov	ebp, [esp+0BCh+arg_4]
		cmp	ebp, edi
		jz	loc_100251ED
		cmp	[ebp+8], edi
		jz	loc_100251ED
		cmp	[ebp+0Ch], edi
		jz	loc_100251ED
		cmp	[ebp+14h], edi
		jz	loc_100251ED
		cmp	[ebp+18h], edi
		jz	loc_100251ED
		cmp	[ebp+20h], edi
		jz	loc_100251ED
		cmp	[ebp+24h], edi
		jz	loc_100251ED
		mov	eax, [esp+0BCh+arg_C]
		cmp	eax, edi
		jz	loc_100251ED
		cmp	[eax+4], edi
		jz	loc_100251ED
		cmp	[eax+8], edi
		jz	loc_100251ED
		mov	eax, [esp+0BCh+arg_10]
		cmp	eax, edi
		jz	loc_100251ED
		cmp	[eax+4], edi
		jz	loc_100251ED
		cmp	[eax+8], edi
		jz	loc_100251ED
		mov	eax, [esp+0BCh+arg_14]
		cmp	eax, edi
		jz	short loc_10024C70
		cmp	[eax+4], edi
		jz	loc_100251ED
		cmp	[eax+8], edi
		jz	loc_100251ED

loc_10024C70:				; CODE XREF: sub_10024BB0+ACj
		mov	eax, [esp+0BCh+arg_18]
		cmp	eax, edi
		jnz	short loc_10024C8F
		mov	ebx, [esp+0BCh+arg_1C]
		cmp	ebx, edi
		jz	loc_100251ED
		cmp	[ebx+4], edi
		jmp	short loc_10024CAA
; ---------------------------------------------------------------------------

loc_10024C8F:				; CODE XREF: sub_10024BB0+C9j
		cmp	[eax+4], edi
		jz	loc_100251ED
		cmp	[eax+8], edi
		jz	loc_100251ED
		mov	ebx, [esp+0BCh+arg_1C]
		cmp	ebx, edi

loc_10024CAA:				; CODE XREF: sub_10024BB0+DDj
		jnz	loc_100251ED
		mov	eax, [esp+0BCh+arg_20]
		cmp	eax, edi
		jz	loc_100251ED
		cmp	[eax+4], edi
		jnz	loc_100251ED
		mov	eax, [esp+0BCh+arg_24]
		cmp	eax, edi
		jz	loc_100251ED
		cmp	[eax+4], edi
		jnz	loc_100251ED
		lea	eax, [esp+0BCh+var_60]
		push	esi
		push	eax
		mov	[esp+0C4h+var_54], edi
		mov	[esp+0C4h+var_34], edi
		mov	[esp+0C4h+var_84], edi
		mov	[esp+0C4h+var_24], edi
		mov	[esp+0C4h+var_94], edi
		mov	[esp+0C4h+var_74], edi
		mov	[esp+0C4h+var_64], edi
		mov	[esp+0C4h+var_14], edi
		mov	[esp+0C4h+var_4], edi
		mov	[esp+0C4h+var_44], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		lea	ecx, [esp+0C0h+var_40]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		lea	edx, [esp+0C0h+var_90]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		lea	eax, [esp+0C0h+var_30]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		lea	ecx, [esp+0C0h+var_A0]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		lea	edx, [esp+0C0h+var_80]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		lea	eax, [esp+0C0h+var_70]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		lea	ecx, [esp+0C0h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		lea	edx, [esp+0C0h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		lea	eax, [esp+0C0h+var_50]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025125
		mov	ecx, [ebp+0Ch]
		mov	edx, [ebp+8]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_60]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025125
		mov	ecx, [ebp+18h]
		mov	edx, [ebp+14h]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_40]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025125
		mov	ecx, [ebp+24h]
		mov	edx, [ebp+20h]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_90]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025125
		mov	eax, [esp+0C0h+arg_10]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_30]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025125
		mov	eax, [esp+0C0h+arg_18]
		cmp	eax, edi
		jnz	loc_10024F30
		lea	ecx, [esp+0C0h+var_A0]
		push	ecx
		lea	edx, [esp+0C4h+var_60]
		push	edx
		lea	eax, [esp+0C8h+var_30]
		push	eax
		lea	ecx, [esp+0CCh+var_90]
		push	ecx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025125
		lea	edx, [esp+0C0h+var_A0]
		push	edx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, edi
		jg	short loc_10024EE6
		mov	esi, 0FFFFFFFDh
		jmp	loc_10025125
; ---------------------------------------------------------------------------

loc_10024EE6:				; CODE XREF: sub_10024BB0+32Aj
		push	eax
		mov	eax, [esp+0C4h+arg_0]
		push	ebx
		push	eax
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+4]
		add	esp, 0Ch
		cmp	eax, edi
		jnz	short loc_10024F09
		mov	esi, 0FFFFFFFEh
		jmp	loc_10025125
; ---------------------------------------------------------------------------

loc_10024F09:				; CODE XREF: sub_10024BB0+34Dj
		mov	ecx, [ebx+8]
		push	ecx
		push	eax
		lea	edx, [esp+0C8h+var_A0]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025125
		xor	esi, esi
		mov	[esp+0C0h+arg_18], ebx
		jmp	short loc_10024F4F
; ---------------------------------------------------------------------------

loc_10024F30:				; CODE XREF: sub_10024BB0+2ECj
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+0C8h+var_A0]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025125

loc_10024F4F:				; CODE XREF: sub_10024BB0+37Ej
		mov	eax, [esp+0C0h+arg_14]
		cmp	eax, edi
		jnz	short loc_10024F85
		mov	eax, [esp+0C0h+arg_0]
		lea	ecx, [esp+0C0h+var_AC]
		push	ecx
		lea	edx, [ebp+10h]
		push	edx
		push	eax
		mov	[esp+0CCh+var_A8], edi
		call	sub_1001C780
		add	esp, 0Ch
		mov	[esp+0C0h+var_B0], eax
		cmp	eax, edi
		jnz	loc_10025125
		jmp	short loc_10024F93
; ---------------------------------------------------------------------------

loc_10024F85:				; CODE XREF: sub_10024BB0+3A8j
		mov	ecx, [eax+4]
		mov	edx, [eax+8]
		mov	[esp+0C0h+var_A8], ecx
		mov	[esp+0C0h+var_A4], edx

loc_10024F93:				; CODE XREF: sub_10024BB0+3D3j
		mov	eax, [esp+0C0h+var_A4]
		mov	ecx, [esp+0C0h+var_A8]
		push	eax
		push	ecx
		lea	edx, [esp+0C8h+var_80]
		push	edx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025125
		lea	eax, [esp+0C0h+var_70]
		push	eax
		lea	ecx, [esp+0C4h+var_60]
		push	ecx
		lea	edx, [esp+0C8h+var_80]
		push	edx
		lea	eax, [esp+0CCh+var_90]
		push	eax
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025125
		lea	ecx, [esp+0C0h+var_70]
		push	ecx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, edi
		jg	short loc_10024FF5
		mov	esi, 0FFFFFFFDh
		jmp	loc_10025125
; ---------------------------------------------------------------------------

loc_10024FF5:				; CODE XREF: sub_10024BB0+439j
		mov	ebx, [esp+0C0h+arg_20]
		mov	edx, [esp+0C0h+arg_0]
		push	eax
		push	ebx
		push	edx
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+4]
		add	esp, 0Ch
		cmp	eax, edi
		jnz	short loc_1002501F
		mov	esi, 0FFFFFFFEh
		jmp	loc_10025125
; ---------------------------------------------------------------------------

loc_1002501F:				; CODE XREF: sub_10024BB0+463j
		mov	ecx, [ebx+8]
		push	ecx
		push	eax
		lea	edx, [esp+0C8h+var_70]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025125
		mov	ecx, [esp+0C0h+arg_C]
		mov	edx, [esp+0C0h+arg_8]
		lea	eax, [esp+0C0h+var_20]
		push	eax
		push	ecx
		add	ebp, 1Ch
		push	ebp
		push	edx
		mov	edx, [esp+0D0h+arg_18]
		mov	ecx, ebx
		call	sub_10024A80
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025125
		lea	eax, [esp+0C0h+var_10]
		push	eax
		lea	ecx, [esp+0C4h+var_40]
		push	ecx
		lea	edx, [esp+0C8h+var_20]
		push	edx
		lea	eax, [esp+0CCh+var_30]
		push	eax
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025125
		lea	ecx, [esp+0C0h+var_50]
		push	ecx
		lea	edx, [esp+0C4h+var_40]
		push	edx
		lea	eax, [esp+0C8h+var_10]
		push	eax
		lea	ecx, [esp+0CCh+var_80]
		push	ecx
		call	sub_1002C400
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	short loc_10025125
		lea	edx, [esp+0C0h+var_50]
		push	edx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, edi
		jg	short loc_100250E4
		mov	esi, 0FFFFFFFDh
		jmp	short loc_10025125
; ---------------------------------------------------------------------------

loc_100250E4:				; CODE XREF: sub_10024BB0+52Bj
		mov	esi, [esp+0C0h+arg_24]
		push	eax
		mov	eax, [esp+0C4h+arg_0]
		push	esi
		push	eax
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+4]
		add	esp, 0Ch
		cmp	eax, edi
		jnz	short loc_1002510B
		mov	esi, 0FFFFFFFEh
		jmp	short loc_10025125
; ---------------------------------------------------------------------------

loc_1002510B:				; CODE XREF: sub_10024BB0+552j
		mov	ecx, [esi+8]
		push	ecx
		push	eax
		lea	edx, [esp+0C8h+var_50]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_10025125
		xor	esi, esi

loc_10025125:				; CODE XREF: sub_10024BB0+179j
					; sub_10024BB0+193j ...
		lea	eax, [esp+0C0h+var_60]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0C4h+var_40]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0C8h+var_90]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0CCh+var_30]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0D0h+var_A0]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0D4h+var_80]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0D8h+var_70]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0DCh+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0E0h+var_10]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0E4h+var_50]
		push	eax
		call	sub_10028EF0
		add	esp, 28h
		cmp	[esp+0C0h+var_B0], edi
		jnz	short loc_100251DE
		cmp	esi, edi
		jz	short loc_100251DE
		cmp	esi, 0FFFFFFFCh
		jz	short loc_100251C9
		cmp	esi, 0FFFFFFFDh
		jz	short loc_100251C2
		cmp	esi, 0FFFFFFFEh
		jz	short loc_100251BB
		push	0FFFFE001h
		jmp	short loc_100251CE
; ---------------------------------------------------------------------------

loc_100251BB:				; CODE XREF: sub_10024BB0+602j
		push	0FFFFE013h
		jmp	short loc_100251CE
; ---------------------------------------------------------------------------

loc_100251C2:				; CODE XREF: sub_10024BB0+5FDj
		push	0FFFFE002h
		jmp	short loc_100251CE
; ---------------------------------------------------------------------------

loc_100251C9:				; CODE XREF: sub_10024BB0+5F8j
		push	0FFFFE005h

loc_100251CE:				; CODE XREF: sub_10024BB0+609j
					; sub_10024BB0+610j ...
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+0C0h+var_B0], 0FFFFFFFFh

loc_100251DE:				; CODE XREF: sub_10024BB0+5EFj
					; sub_10024BB0+5F3j
		mov	eax, [esp+0C0h+var_B0]
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0B0h
		retn
; ---------------------------------------------------------------------------

loc_100251ED:				; CODE XREF: sub_10024BB0+16j
					; sub_10024BB0+25j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0B0h
		retn
sub_10024BB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10025210	proc near		; DATA XREF: .rdata:10039458o

var_C0		= dword	ptr -0C0h
var_BC		= byte ptr -0BCh
var_B0		= dword	ptr -0B0h
var_AC		= byte ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 0C0h
		push	ebx
		push	ebp
		push	edi
		xor	edi, edi
		mov	[esp+0CCh+var_C0], edi
		cmp	[esp+0CCh+arg_0], edi
		jz	loc_100257EA
		mov	ebx, [esp+0CCh+arg_4]
		cmp	ebx, edi
		jz	loc_100257EA
		cmp	[ebx+8], edi
		jz	loc_100257EA
		cmp	[ebx+0Ch], edi
		jz	loc_100257EA
		cmp	[ebx+14h], edi
		jz	loc_100257EA
		cmp	[ebx+18h], edi
		jz	loc_100257EA
		cmp	[ebx+20h], edi
		jz	loc_100257EA
		cmp	[ebx+24h], edi
		jz	loc_100257EA
		mov	eax, [esp+0CCh+arg_C]
		cmp	eax, edi
		jz	loc_100257EA
		cmp	[eax+4], edi
		jz	loc_100257EA
		cmp	[eax+8], edi
		jz	loc_100257EA
		mov	edx, [esp+0CCh+arg_10]
		cmp	edx, edi
		jz	loc_100257EA
		cmp	[edx+4], edi
		jz	loc_100257EA
		cmp	[edx+8], edi
		jz	loc_100257EA
		mov	ecx, [esp+0CCh+arg_14]
		cmp	ecx, edi
		jz	loc_100257EA
		cmp	[ecx+4], edi
		jz	loc_100257EA
		cmp	[ecx+8], edi
		jz	loc_100257EA
		mov	ecx, [esp+0CCh+arg_18]
		cmp	ecx, edi
		jz	loc_100257EA
		cmp	[ecx+4], edi
		jz	loc_100257EA
		cmp	[ecx+8], edi
		jz	loc_100257EA
		mov	ebp, [esp+0CCh+arg_1C]
		cmp	ebp, edi
		jz	loc_100257EA
		cmp	[ebp+4], edi
		jz	loc_100257EA
		cmp	[ebp+8], edi
		jz	loc_100257EA
		push	edx
		push	eax
		call	SECITEM_CompareItem_Util
		add	esp, 8
		test	eax, eax
		jz	loc_100257EA
		lea	eax, [esp+0CCh+var_BC]
		push	esi
		push	eax
		mov	[esp+0D4h+var_B0], edi
		mov	[esp+0D4h+var_64], edi
		mov	[esp+0D4h+var_34], edi
		mov	[esp+0D4h+var_54], edi
		mov	[esp+0D4h+var_94], edi
		mov	[esp+0D4h+var_14], edi
		mov	[esp+0D4h+var_44], edi
		mov	[esp+0D4h+var_74], edi
		mov	[esp+0D4h+var_24], edi
		mov	[esp+0D4h+var_4], edi
		mov	[esp+0D4h+var_84], edi
		mov	[esp+0D4h+var_A8], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	ecx, [esp+0D0h+var_70]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	edx, [esp+0D0h+var_40]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	eax, [esp+0D0h+var_60]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	ecx, [esp+0D0h+var_A0]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	edx, [esp+0D0h+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	eax, [esp+0D0h+var_50]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	ecx, [esp+0D0h+var_80]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	edx, [esp+0D0h+var_30]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	eax, [esp+0D0h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		lea	ecx, [esp+0D0h+var_90]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025718
		mov	edx, [ebx+0Ch]
		mov	eax, [ebx+8]
		push	edx
		push	eax
		lea	ecx, [esp+0D8h+var_BC]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025718
		mov	edx, [ebx+18h]
		mov	eax, [ebx+14h]
		push	edx
		push	eax
		lea	ecx, [esp+0D8h+var_70]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025718
		mov	edx, [ebx+24h]
		mov	eax, [ebx+20h]
		push	edx
		push	eax
		lea	ecx, [esp+0D8h+var_40]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025718
		mov	eax, [esp+0D0h+arg_14]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+0D8h+var_A0]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025718
		mov	edx, [ebp+8]
		mov	eax, [ebp+4]
		push	edx
		push	eax
		lea	ecx, [esp+0D8h+var_80]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025718
		lea	edx, [esp+0D0h+var_60]
		push	edx
		lea	eax, [esp+0D4h+var_BC]
		push	1
		push	eax
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025718
		lea	ecx, [esp+0D0h+var_50]
		push	ecx
		lea	edx, [esp+0D4h+var_BC]
		push	edx
		lea	eax, [esp+0D8h+var_70]
		push	eax
		lea	ecx, [esp+0DCh+var_A0]
		push	ecx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025718
		lea	edx, [esp+0D0h+var_A0]
		push	edx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jle	loc_10025703
		lea	eax, [esp+0D0h+var_60]
		push	eax
		lea	ecx, [esp+0D4h+var_A0]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_10025703
		lea	edx, [esp+0D0h+var_70]
		push	edx
		lea	eax, [esp+0D4h+var_80]
		push	eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_10025703
		lea	ecx, [esp+0D0h+var_50]
		push	1
		push	ecx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jnz	loc_10025703
		mov	eax, [esp+0D0h+arg_10]
		mov	ecx, [esp+0D0h+arg_8]
		lea	edx, [esp+0D0h+var_20]
		push	edx
		mov	edx, [esp+0D4h+arg_14]
		push	eax
		add	ebx, 1Ch
		push	ebx
		mov	ebx, [esp+0DCh+arg_18]
		push	ecx
		mov	ecx, ebx
		call	sub_10024A80
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025718
		lea	edx, [esp+0D0h+var_30]
		push	edx
		lea	eax, [esp+0D4h+var_BC]
		push	eax
		lea	ecx, [esp+0D8h+var_80]
		push	ecx
		lea	edx, [esp+0DCh+var_40]
		push	edx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025718
		lea	eax, [esp+0D0h+var_10]
		push	eax
		lea	ecx, [esp+0D4h+var_BC]
		push	ecx
		lea	edx, [esp+0D8h+var_20]
		push	edx
		lea	eax, [esp+0DCh+var_A0]
		push	eax
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025718
		lea	ecx, [esp+0D0h+var_90]
		push	ecx
		lea	edx, [esp+0D4h+var_BC]
		push	edx
		lea	eax, [esp+0D8h+var_10]
		push	eax
		lea	ecx, [esp+0DCh+var_30]
		push	ecx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025718
		lea	edx, [esp+0D0h+var_90]
		push	edx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, edi
		jg	short loc_1002569E
		lea	esi, [edi-3]
		jmp	short loc_10025718
; ---------------------------------------------------------------------------

loc_1002569E:				; CODE XREF: sub_10025210+487j
		mov	ecx, [esp+0D0h+arg_0]
		push	eax
		lea	eax, [esp+0D4h+var_AC]
		push	eax
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	eax, [esp+0DCh+var_A8]
		add	esp, 0Ch
		cmp	eax, edi
		jnz	short loc_100256C3
		mov	esi, 0FFFFFFFEh
		jmp	short loc_10025718
; ---------------------------------------------------------------------------

loc_100256C3:				; CODE XREF: sub_10025210+4AAj
		mov	edx, [esp+0D0h+var_A4]
		push	edx
		push	eax
		lea	eax, [esp+0D8h+var_90]
		push	eax
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_10025718
		mov	eax, [esp+0D0h+var_A4]
		xor	esi, esi
		cmp	eax, [ebx+8]
		jnz	short loc_10025703
		mov	ecx, [ebx+4]
		mov	edx, [esp+0D0h+var_A8]
		push	eax
		push	ecx
		push	edx
		call	NSS_SecureMemcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10025703
		mov	[esp+0D0h+var_C0], edi
		jmp	short loc_10025718
; ---------------------------------------------------------------------------

loc_10025703:				; CODE XREF: sub_10025210+362j
					; sub_10025210+37Cj ...
		push	0FFFFE00Ah
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+0D0h+var_C0], 0FFFFFFFFh

loc_10025718:				; CODE XREF: sub_10025210+16Cj
					; sub_10025210+183j ...
		lea	eax, [esp+0D0h+var_BC]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0D4h+var_70]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0D8h+var_40]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0DCh+var_60]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0E0h+var_A0]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0E4h+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0E8h+var_50]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0ECh+var_80]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0F0h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0F4h+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0F8h+var_90]
		push	ecx
		call	sub_10028EF0
		add	esp, 2Ch
		cmp	[esp+0D0h+var_C0], edi
		jnz	short loc_100257DB
		cmp	esi, edi
		jz	short loc_100257DB
		cmp	esi, 0FFFFFFFCh
		jz	short loc_100257C6
		cmp	esi, 0FFFFFFFDh
		jz	short loc_100257BF
		cmp	esi, 0FFFFFFFEh
		jz	short loc_100257B8
		push	0FFFFE001h
		jmp	short loc_100257CB
; ---------------------------------------------------------------------------

loc_100257B8:				; CODE XREF: sub_10025210+59Fj
		push	0FFFFE013h
		jmp	short loc_100257CB
; ---------------------------------------------------------------------------

loc_100257BF:				; CODE XREF: sub_10025210+59Aj
		push	0FFFFE002h
		jmp	short loc_100257CB
; ---------------------------------------------------------------------------

loc_100257C6:				; CODE XREF: sub_10025210+595j
		push	0FFFFE005h

loc_100257CB:				; CODE XREF: sub_10025210+5A6j
					; sub_10025210+5ADj ...
		call	PORT_SetError_Util
		add	esp, 4
		mov	[esp+0D0h+var_C0], 0FFFFFFFFh

loc_100257DB:				; CODE XREF: sub_10025210+58Cj
					; sub_10025210+590j
		mov	eax, [esp+0D0h+var_C0]
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 0C0h
		retn
; ---------------------------------------------------------------------------

loc_100257EA:				; CODE XREF: sub_10025210+16j
					; sub_10025210+25j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0C0h
		retn
sub_10025210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10025810	proc near		; CODE XREF: sub_10025990+2EFp

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 40h
		push	ebp
		mov	ebp, [esp+44h+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		lea	eax, [esp+4Ch+var_10]
		push	eax
		mov	[esp+50h+var_4], edi
		mov	[esp+50h+var_24], edi
		mov	[esp+50h+var_14], edi
		mov	[esp+50h+var_34], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025956
		lea	ecx, [esp+4Ch+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025956
		lea	edx, [esp+4Ch+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025956
		lea	eax, [esp+4Ch+var_40]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025956
		mov	ecx, [ebx+8]
		mov	edx, [ebx+4]
		push	ecx
		push	edx
		lea	eax, [esp+54h+var_10]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025956
		mov	ecx, [ebp+8]
		mov	edx, [ebp+4]
		push	ecx
		push	edx
		lea	eax, [esp+54h+var_30]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025956
		mov	eax, [esp+4Ch+arg_4]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+54h+var_20]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_10025956
		lea	ecx, [esp+4Ch+var_20]
		push	ecx
		lea	edx, [esp+50h+var_30]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jnz	short loc_10025905
		lea	eax, [edi-4]
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_10025905:				; CODE XREF: sub_10025810+E9j
		lea	eax, [esp+4Ch+var_40]
		push	eax
		lea	ecx, [esp+50h+var_30]
		push	ecx
		lea	edx, [esp+54h+var_10]
		push	edx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_10025956
		lea	eax, [esp+4Ch+var_40]
		push	eax
		lea	ecx, [esp+50h+var_20]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_10025956
		mov	eax, [esp+4Ch+arg_C]
		mov	ecx, [esp+4Ch+arg_8]
		push	eax
		push	ecx
		lea	edx, [esp+54h+var_40]
		push	edx
		call	sub_1002C150
		add	esp, 0Ch
		mov	esi, eax

loc_10025956:				; CODE XREF: sub_10025810+2Dj
					; sub_10025810+44j ...
		lea	eax, [esp+4Ch+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+50h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+54h+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+58h+var_40]
		push	eax
		call	sub_10028EF0
		add	esp, 10h
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 40h
		retn
sub_10025810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10025990	proc near		; DATA XREF: .rdata:1003945Co

var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		sub	esp, 50h
		push	ebx
		push	ebp
		push	edi
		xor	edi, edi
		cmp	[esp+5Ch+arg_0], edi
		jz	loc_10025D99
		mov	eax, [esp+5Ch+arg_4]
		cmp	eax, edi
		jz	loc_10025D99
		cmp	[eax+4], edi
		jz	loc_10025D99
		cmp	[eax+8], edi
		jz	loc_10025D99
		mov	eax, [esp+5Ch+arg_8]
		cmp	eax, edi
		jz	loc_10025D99
		cmp	[eax+4], edi
		jz	loc_10025D99
		cmp	[eax+8], edi
		jz	loc_10025D99
		mov	eax, [esp+5Ch+arg_C]
		cmp	eax, edi
		jz	loc_10025D99
		cmp	[eax+4], edi
		jz	loc_10025D99
		cmp	[eax+8], edi
		jz	loc_10025D99
		mov	eax, [esp+5Ch+arg_10]
		cmp	eax, edi
		jz	loc_10025D99
		cmp	[eax+4], edi
		jz	loc_10025D99
		cmp	[eax+8], edi
		jz	loc_10025D99
		mov	eax, [esp+5Ch+arg_14]
		cmp	eax, edi
		jz	loc_10025D99
		cmp	[eax+4], edi
		jz	loc_10025D99
		cmp	[eax+8], edi
		jz	loc_10025D99
		mov	eax, [esp+5Ch+arg_18]
		cmp	eax, edi
		jz	loc_10025D99
		cmp	[eax+4], edi
		jnz	loc_10025D99
		mov	ebx, [esp+5Ch+arg_24]
		mov	ebp, [esp+5Ch+arg_1C]
		cmp	ebx, edi
		jz	short loc_10025AA0
		cmp	[ebx+4], edi
		jnz	loc_10025D99
		cmp	ebp, edi
		jz	loc_10025D99
		cmp	[ebp+4], edi
		jz	loc_10025D99
		cmp	[ebp+8], edi
		jz	loc_10025D99
		mov	eax, [esp+5Ch+arg_20]
		cmp	eax, edi
		jz	loc_10025D99
		cmp	[eax+4], edi
		jz	loc_10025D99
		cmp	[eax+8], edi
		jz	loc_10025D99

loc_10025AA0:				; CODE XREF: sub_10025990+CAj
		lea	eax, [esp+5Ch+var_20]
		push	esi
		push	eax
		mov	[esp+64h+var_14], edi
		mov	[esp+64h+var_24], edi
		mov	[esp+64h+var_4], edi
		mov	[esp+64h+var_34], edi
		mov	[esp+64h+var_44], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025CE7
		lea	ecx, [esp+60h+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025CE7
		lea	edx, [esp+60h+var_50]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025CE7
		cmp	ebx, edi
		jz	loc_10025C44
		lea	eax, [esp+60h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025CE7
		lea	ecx, [esp+60h+var_40]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10025CE7
		mov	eax, [esp+60h+arg_8]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+68h+var_30]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025CE7
		mov	edx, [ebp+8]
		mov	eax, [ebp+4]
		push	edx
		push	eax
		lea	ecx, [esp+68h+var_10]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025CE7
		mov	eax, [esp+60h+arg_20]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+68h+var_40]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025CE7
		lea	edx, [esp+60h+var_40]
		push	edx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jle	loc_10025CA5
		lea	eax, [esp+60h+var_30]
		push	eax
		lea	ecx, [esp+64h+var_40]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_10025CA5
		lea	edx, [esp+60h+var_50]
		push	edx
		lea	eax, [esp+64h+var_30]
		push	eax
		lea	ecx, [esp+68h+var_40]
		push	ecx
		lea	edx, [esp+6Ch+var_10]
		push	edx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_10025CE7
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_10029E60
		add	esp, 4
		cmp	eax, edi
		jg	short loc_10025C08
		mov	esi, 0FFFFFFFDh
		jmp	loc_10025CE7
; ---------------------------------------------------------------------------

loc_10025C08:				; CODE XREF: sub_10025990+26Cj
		mov	ecx, [esp+60h+arg_0]
		push	eax
		push	ebx
		push	ecx
		call	SECITEM_AllocItem_Util
		mov	eax, [ebx+4]
		add	esp, 0Ch
		cmp	eax, edi
		jnz	short loc_10025C28
		mov	esi, 0FFFFFFFEh
		jmp	loc_10025CE7
; ---------------------------------------------------------------------------

loc_10025C28:				; CODE XREF: sub_10025990+28Cj
		mov	edx, [ebx+8]
		push	edx
		push	eax
		lea	eax, [esp+68h+var_50]
		push	eax
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025CE7

loc_10025C44:				; CODE XREF: sub_10025990+16Cj
		mov	eax, [esp+60h+arg_4]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+68h+var_20]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_10025CE7
		mov	eax, [esp+60h+arg_14]
		mov	ebx, [esp+60h+arg_C]
		lea	ecx, [esp+60h+var_50]
		push	ecx
		mov	ecx, [esp+64h+arg_10]
		lea	edx, [esp+64h+var_20]
		push	edx
		push	eax
		push	ecx
		call	sub_10025810
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	short loc_10025CE7
		lea	edx, [esp+60h+var_50]
		push	edx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, edi
		jg	short loc_10025CAC
		mov	esi, 0FFFFFFFDh
		jmp	short loc_10025CE7
; ---------------------------------------------------------------------------

loc_10025CA5:				; CODE XREF: sub_10025990+217j
					; sub_10025990+231j
		mov	esi, 0FFFFFFFCh
		jmp	short loc_10025CE7
; ---------------------------------------------------------------------------

loc_10025CAC:				; CODE XREF: sub_10025990+30Cj
		mov	esi, [esp+60h+arg_18]
		push	eax
		mov	eax, [esp+64h+arg_0]
		push	esi
		push	eax
		call	SECITEM_AllocItem_Util
		mov	eax, [esi+4]
		add	esp, 0Ch
		cmp	eax, edi
		jnz	short loc_10025CCD
		mov	esi, 0FFFFFFFEh
		jmp	short loc_10025CE7
; ---------------------------------------------------------------------------

loc_10025CCD:				; CODE XREF: sub_10025990+334j
		mov	ecx, [esi+8]
		push	ecx
		push	eax
		lea	edx, [esp+68h+var_50]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_10025CE7
		xor	esi, esi

loc_10025CE7:				; CODE XREF: sub_10025990+136j
					; sub_10025990+14Dj ...
		lea	eax, [esp+60h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+64h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+68h+var_10]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+6Ch+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+70h+var_50]
		push	ecx
		call	sub_10028EF0
		add	esp, 14h
		cmp	esi, edi
		jz	short loc_10025D8F
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10025D77
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10025D5F
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10025D47
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10025D47:				; CODE XREF: sub_10025990+39Dj
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10025D5F:				; CODE XREF: sub_10025990+398j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10025D77:				; CODE XREF: sub_10025990+393j
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10025D8F:				; CODE XREF: sub_10025990+38Ej
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_10025D99:				; CODE XREF: sub_10025990+Cj
					; sub_10025990+18j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 50h
		retn
sub_10025990	endp


; =============== S U B	R O U T	I N E =======================================


sub_10025DB0	proc near		; DATA XREF: .rdata:10039460o

var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 60h
		push	ebx
		push	ebp
		push	edi
		xor	edi, edi
		cmp	[esp+6Ch+arg_0], edi
		jz	loc_100261A5
		mov	eax, [esp+6Ch+arg_4]
		cmp	eax, edi
		jz	loc_100261A5
		cmp	[eax+4], edi
		jz	loc_100261A5
		cmp	[eax+8], edi
		jz	loc_100261A5
		mov	eax, [esp+6Ch+arg_8]
		cmp	eax, edi
		jz	loc_100261A5
		cmp	[eax+4], edi
		jz	loc_100261A5
		cmp	[eax+8], edi
		jz	loc_100261A5
		mov	eax, [esp+6Ch+arg_C]
		cmp	eax, edi
		jz	loc_100261A5
		cmp	[eax+4], edi
		jz	loc_100261A5
		cmp	[eax+8], edi
		jz	loc_100261A5
		mov	eax, [esp+6Ch+arg_10]
		cmp	eax, edi
		jz	loc_100261A5
		cmp	[eax+4], edi
		jz	loc_100261A5
		cmp	[eax+8], edi
		jz	loc_100261A5
		mov	ebx, [esp+6Ch+arg_14]
		cmp	ebx, edi
		jz	loc_100261A5
		cmp	[ebx+4], edi
		jz	loc_100261A5
		cmp	[ebx+8], edi
		jz	loc_100261A5
		mov	eax, [esp+6Ch+arg_18]
		cmp	eax, edi
		jz	loc_100261A5
		cmp	[eax+4], edi
		jz	loc_100261A5
		cmp	[eax+8], edi
		jz	loc_100261A5
		mov	ebp, [esp+6Ch+arg_1C]
		cmp	ebp, edi
		jz	loc_100261A5
		cmp	[ebp+4], edi
		jnz	loc_100261A5
		lea	eax, [esp+6Ch+var_50]
		push	esi
		push	eax
		mov	[esp+74h+var_44], edi
		mov	[esp+74h+var_24], edi
		mov	[esp+74h+var_54], edi
		mov	[esp+74h+var_34], edi
		mov	[esp+74h+var_14], edi
		mov	[esp+74h+var_4], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100260E9
		lea	ecx, [esp+70h+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100260E9
		lea	edx, [esp+70h+var_60]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100260E9
		lea	eax, [esp+70h+var_40]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100260E9
		lea	ecx, [esp+70h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100260E9
		lea	edx, [esp+70h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100260E9
		mov	eax, [esp+70h+arg_8]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+78h+var_30]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100260E9
		mov	ecx, [ebx+8]
		mov	edx, [ebx+4]
		push	ecx
		push	edx
		lea	eax, [esp+78h+var_60]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100260E9
		lea	ecx, [esp+70h+var_40]
		push	ecx
		lea	edx, [esp+74h+var_60]
		push	edx
		lea	eax, [esp+78h+var_30]
		push	eax
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100260E9
		mov	eax, [esp+70h+arg_4]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+78h+var_50]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100260E9
		mov	eax, [esp+70h+arg_10]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+78h+var_60]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100260E9
		lea	ecx, [esp+70h+var_20]
		push	ecx
		lea	edx, [esp+74h+var_50]
		push	edx
		lea	eax, [esp+78h+var_40]
		push	eax
		lea	ecx, [esp+7Ch+var_60]
		push	ecx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_100260E9
		mov	eax, [esp+70h+arg_18]
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		push	edx
		push	eax
		lea	ecx, [esp+78h+var_60]
		push	ecx
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100260E9
		lea	edx, [esp+70h+var_10]
		push	edx
		lea	eax, [esp+74h+var_50]
		push	eax
		lea	ecx, [esp+78h+var_60]
		push	ecx
		lea	edx, [esp+7Ch+var_20]
		push	edx
		call	sub_1002C450
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_100260E9
		mov	eax, [esp+70h+arg_C]
		mov	ecx, [eax+8]
		mov	edx, [eax+4]
		push	ecx
		push	edx
		lea	eax, [esp+78h+var_40]
		push	eax
		call	sub_10029D30
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_100260E9
		lea	ecx, [esp+70h+var_60]
		push	ecx
		lea	edx, [esp+74h+var_50]
		push	edx
		lea	eax, [esp+78h+var_40]
		push	eax
		lea	ecx, [esp+7Ch+var_10]
		push	ecx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	short loc_100260E9
		lea	edx, [esp+70h+var_60]
		push	edx
		call	sub_10029E60
		add	esp, 4
		cmp	eax, edi
		jg	short loc_100260B2
		lea	esi, [edi-3]
		jmp	short loc_100260E9
; ---------------------------------------------------------------------------

loc_100260B2:				; CODE XREF: sub_10025DB0+2FBj
		push	eax
		mov	eax, [esp+74h+arg_0]
		push	ebp
		push	eax
		call	SECITEM_AllocItem_Util
		mov	eax, [ebp+4]
		add	esp, 0Ch
		cmp	eax, edi
		jnz	short loc_100260CF
		mov	esi, 0FFFFFFFEh
		jmp	short loc_100260E9
; ---------------------------------------------------------------------------

loc_100260CF:				; CODE XREF: sub_10025DB0+316j
		mov	ecx, [ebp+8]
		push	ecx
		push	eax
		lea	edx, [esp+78h+var_60]
		push	edx
		call	sub_10029ED0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	short loc_100260E9
		xor	esi, esi

loc_100260E9:				; CODE XREF: sub_10025DB0+111j
					; sub_10025DB0+128j ...
		lea	eax, [esp+70h+var_50]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+74h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+78h+var_60]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+7Ch+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+80h+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+84h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 18h
		cmp	esi, edi
		jz	short loc_1002619B
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10026183
		cmp	esi, 0FFFFFFFDh
		jz	short loc_1002616B
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10026153
		push	0FFFFE001h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10026153:				; CODE XREF: sub_10025DB0+389j
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_1002616B:				; CODE XREF: sub_10025DB0+384j
		push	0FFFFE002h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10026183:				; CODE XREF: sub_10025DB0+37Fj
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_1002619B:				; CODE XREF: sub_10025DB0+37Aj
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_100261A5:				; CODE XREF: sub_10025DB0+Cj
					; sub_10025DB0+18j ...
		push	0FFFFE005h
		call	PORT_SetError_Util
		add	esp, 4
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 60h
		retn
sub_10025DB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100261C0	proc near		; CODE XREF: sub_1001DD90+2C4p
					; sub_1001DD90+363p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_100261CE
		mov	eax, 0FFFFFFFCh
		retn
; ---------------------------------------------------------------------------

loc_100261CE:				; CODE XREF: sub_100261C0+6j
		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_100261DA
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_100261DA:				; CODE XREF: sub_100261C0+14j
		lea	edx, [esp+arg_0]
		push	edx
		push	eax
		push	ecx
		call	sub_1002B6F0
		add	esp, 0Ch
		test	eax, eax
		jnz	short locret_100261F5
		mov	eax, [esp+arg_0]
		neg	eax
		sbb	eax, eax

locret_100261F5:			; CODE XREF: sub_100261C0+2Bj
		retn
sub_100261C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026200	proc near		; CODE XREF: sub_100262E0+103p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		xor	esi, esi
		test	eax, eax
		jnz	short loc_10026210
		lea	eax, [esi-4]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10026210:				; CODE XREF: sub_10026200+9j
		push	ebp
		xor	ebp, ebp
		cmp	[eax+8], esi
		jbe	short loc_10026246
		push	ebx
		mov	ebx, ds:rand
		push	edi

loc_10026220:				; CODE XREF: sub_10026200+42j
		mov	edi, 4

loc_10026225:				; CODE XREF: sub_10026200+32j
		call	ebx ; rand
		and	eax, 0FFh
		shl	esi, 8
		or	esi, eax
		dec	edi
		jnz	short loc_10026225
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ecx+ebp*4], esi
		inc	ebp
		cmp	ebp, [eax+8]
		jb	short loc_10026220
		pop	edi
		pop	ebx

loc_10026246:				; CODE XREF: sub_10026200+16j
		pop	ebp
		xor	eax, eax
		pop	esi
		retn
sub_10026200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026250	proc near		; CODE XREF: sub_1001DD60+8p
					; sub_10026630+226p ...

var_20		= byte ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		lea	eax, [esp+var_20]
		sub	esp, 20h
		push	eax
		call	sub_1002A030
		add	esp, 4
		test	eax, eax
		jnz	short loc_100262DA
		mov	ecx, [esp+20h+arg_4]
		push	esi
		push	ecx
		lea	edx, [esp+28h+var_20]
		push	edx
		call	sub_10028F70
		lea	eax, [esp+2Ch+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_100262CA
		mov	eax, [esp+24h+arg_0]
		lea	ecx, [esp+24h+var_10]
		push	ecx
		push	eax
		push	eax
		lea	edx, [esp+30h+var_20]
		push	edx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_100262BD
		lea	eax, [esp+24h+var_10]
		push	eax
		lea	ecx, [esp+28h+var_20]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		mov	esi, eax
		neg	esi
		sbb	esi, esi

loc_100262BD:				; CODE XREF: sub_10026250+53j
		lea	edx, [esp+24h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4

loc_100262CA:				; CODE XREF: sub_10026250+35j
		lea	eax, [esp+24h+var_20]
		push	eax
		call	sub_10028EF0
		add	esp, 4
		mov	eax, esi
		pop	esi

loc_100262DA:				; CODE XREF: sub_10026250+12j
		add	esp, 20h
		retn
sub_10026250	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100262E0	proc near		; CODE XREF: sub_1001AE40+2D7p
					; sub_1001AE40+3C0p ...

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 40h
		push	ebx
		mov	ebx, [esp+44h+arg_0]
		push	edi
		xor	edi, edi
		cmp	ebx, edi
		jnz	short loc_100262F8
		lea	eax, [edi-4]
		pop	edi
		pop	ebx
		add	esp, 40h
		retn
; ---------------------------------------------------------------------------

loc_100262F8:				; CODE XREF: sub_100262E0+Dj
		lea	eax, [esp+48h+var_20]
		push	esi
		push	eax
		mov	[esp+50h+var_24], edi
		mov	[esp+50h+var_14], edi
		mov	[esp+50h+var_4], edi
		mov	[esp+50h+var_34], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100264D1
		lea	ecx, [esp+4Ch+var_20]
		push	ecx
		push	1
		push	ebx
		call	sub_1002B460
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jl	loc_100264D1
		lea	edx, [esp+4Ch+var_20]
		push	ebp
		push	edx
		call	sub_10029030
		mov	ebp, eax
		add	esp, 4
		cmp	ebp, edi
		jnz	short loc_10026356
		or	esi, 0FFFFFFFFh
		jmp	loc_100264D0
; ---------------------------------------------------------------------------

loc_10026356:				; CODE XREF: sub_100262E0+6Cj
		mov	eax, [ebx+8]
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_100264D0
		lea	edx, [esp+50h+var_40]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100264D0
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_100264D0
		push	edi
		lea	ecx, [esp+54h+var_10]
		push	ecx
		lea	edx, [esp+58h+var_20]
		push	ebp
		push	edx
		call	sub_1002A5C0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, edi
		jl	loc_100264D0
		mov	[esp+50h+arg_0], edi
		cmp	[esp+50h+arg_4], edi
		jle	loc_100264D0
		jmp	short loc_100263D0
; ---------------------------------------------------------------------------
		align 10h

loc_100263D0:				; CODE XREF: sub_100262E0+EBj
					; sub_100262E0+1EAj
		mov	eax, [ebx+8]
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		call	sub_100291A0
		lea	edx, [esp+58h+var_30]
		push	edx
		call	sub_10026200
		lea	eax, [esp+5Ch+var_30]
		push	eax
		mov	ecx, eax
		push	ebx
		push	ecx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		js	loc_100264D0
		lea	edx, [esp+50h+var_30]
		push	1
		push	edx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jg	short loc_1002641C
		dec	edi
		jmp	loc_100264C1
; ---------------------------------------------------------------------------

loc_1002641C:				; CODE XREF: sub_100262E0+134j
		lea	eax, [esp+50h+var_40]
		push	eax
		push	ebx
		lea	ecx, [esp+58h+var_10]
		push	ecx
		lea	edx, [esp+5Ch+var_30]
		push	edx
		call	sub_100288A0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_100264D0
		lea	eax, [esp+50h+var_40]
		push	1
		push	eax
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jz	short loc_100264BF
		lea	ecx, [esp+50h+var_20]
		push	ecx
		lea	edx, [esp+54h+var_40]
		push	edx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_100264BF
		or	esi, 0FFFFFFFFh
		lea	edi, [esi+2]
		cmp	ebp, edi
		jbe	short loc_100264D0

loc_10026471:				; CODE XREF: sub_100262E0+1D7j
		lea	eax, [esp+50h+var_40]
		push	eax
		mov	ecx, eax
		push	ebx
		push	ecx
		call	sub_1002C4A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100264D0
		lea	edx, [esp+50h+var_40]
		push	1
		push	edx
		or	esi, 0FFFFFFFFh
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jz	short loc_100264D0
		lea	eax, [esp+50h+var_20]
		push	eax
		lea	ecx, [esp+54h+var_40]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_100264BB
		inc	edi
		cmp	edi, ebp
		jb	short loc_10026471
		jmp	short loc_100264D0
; ---------------------------------------------------------------------------

loc_100264BB:				; CODE XREF: sub_100262E0+1D2j
		mov	edi, [esp+50h+arg_0]

loc_100264BF:				; CODE XREF: sub_100262E0+16Fj
					; sub_100262E0+185j
		xor	esi, esi

loc_100264C1:				; CODE XREF: sub_100262E0+137j
		inc	edi
		mov	[esp+50h+arg_0], edi
		cmp	edi, [esp+50h+arg_4]
		jl	loc_100263D0

loc_100264D0:				; CODE XREF: sub_100262E0+71j
					; sub_100262E0+8Bj ...
		pop	ebp

loc_100264D1:				; CODE XREF: sub_100262E0+3Aj
					; sub_100262E0+54j
		lea	edx, [esp+4Ch+var_10]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+54h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+58h+var_20]
		push	edx
		call	sub_10028EF0
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 40h
		retn
sub_100262E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10026510(int,	int, int, void *Dst, size_t Size)
sub_10026510	proc near		; CODE XREF: sub_10026630+1C9p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Dst		= dword	ptr  10h
Size		= dword	ptr  14h

		push	ecx
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+Dst]
		push	esi
		push	edi
		mov	edi, [esp+14h+Size]
		push	edi		; Size
		push	0		; Val
		push	ebp		; Dst
		call	memset
		xor	ebx, ebx
		add	esp, 0Ch
		cmp	[esp+14h+arg_8], ebx
		jbe	short loc_10026572

loc_10026531:				; CODE XREF: sub_10026510+60j
		mov	eax, [esp+14h+arg_4]
		mov	esi, [eax+ebx*4]
		mov	edx, [esp+14h+arg_0]
		lea	ecx, [esp+14h+var_4]
		push	ecx
		push	esi
		push	edx
		call	sub_1002B6F0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10026574
		mov	ecx, [esp+14h+var_4]
		test	ecx, ecx
		jz	short loc_1002655D
		shr	ecx, 1
		mov	eax, esi
		sub	eax, ecx

loc_1002655D:				; CODE XREF: sub_10026510+45j
		cmp	eax, edi
		jnb	short loc_1002656B

loc_10026561:				; CODE XREF: sub_10026510+59j
		mov	byte ptr [eax+ebp], 1
		add	eax, esi
		cmp	eax, edi
		jb	short loc_10026561

loc_1002656B:				; CODE XREF: sub_10026510+4Fj
		inc	ebx
		cmp	ebx, [esp+14h+arg_8]
		jb	short loc_10026531

loc_10026572:				; CODE XREF: sub_10026510+1Fj
		xor	eax, eax

loc_10026574:				; CODE XREF: sub_10026510+3Dj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10026510	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026580	proc near		; CODE XREF: sub_100265D0+31p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		xor	esi, esi
		push	edi
		test	ebp, ebp
		jle	short loc_100265B7
		mov	edi, [esp+10h+arg_4]
		mov	ebx, [esp+10h+arg_0]

loc_10026596:				; CODE XREF: sub_10026580+35j
		mov	ecx, [edi+esi*4]
		lea	eax, [esp+10h+arg_8]
		push	eax
		push	ecx
		push	ebx
		call	sub_1002B6F0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100265BA
		cmp	[esp+10h+arg_8], eax
		jz	short loc_100265BF
		inc	esi
		cmp	esi, ebp
		jl	short loc_10026596

loc_100265B7:				; CODE XREF: sub_10026580+Cj
		or	eax, 0FFFFFFFFh

loc_100265BA:				; CODE XREF: sub_10026580+2Aj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100265BF:				; CODE XREF: sub_10026580+30j
		mov	eax, [esp+10h+arg_C]
		test	eax, eax
		jz	short loc_100265C9
		mov	[eax], esi

loc_100265C9:				; CODE XREF: sub_10026580+45j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10026580	endp


; =============== S U B	R O U T	I N E =======================================


sub_100265D0	proc near		; CODE XREF: sub_10019EE0+275p
					; sub_10026630+2A0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	esi
		test	ecx, ecx
		jz	short loc_1002661C
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_1002661C
		mov	eax, [esi]
		cmp	eax, 198Eh
		jle	short loc_100265F1
		mov	eax, 198Eh
		jmp	short loc_100265F5
; ---------------------------------------------------------------------------

loc_100265F1:				; CODE XREF: sub_100265D0+18j
		test	eax, eax
		jle	short loc_1002661C

loc_100265F5:				; CODE XREF: sub_100265D0+1Fj
		lea	edx, [esp+4+arg_0]
		push	edx
		push	eax
		push	offset dword_10040B08
		push	ecx
		call	sub_10026580
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10026621
		mov	ecx, [esp+4+arg_0]
		mov	edx, ds:dword_10040B08[ecx*4]
		mov	[esi], edx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002661C:				; CODE XREF: sub_100265D0+7j
					; sub_100265D0+Fj ...
		mov	eax, 0FFFFFFFCh

loc_10026621:				; CODE XREF: sub_100265D0+3Bj
		pop	esi
		retn
sub_100265D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026630	proc near		; CODE XREF: sub_10015F50+194p
					; sub_1001D980+6Ep

Dst		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 28h
		push	ebp
		xor	ebp, ebp
		cmp	[esp+2Ch+arg_0], ebp
		jnz	short loc_10026644
		lea	eax, [ebp-4]
		pop	ebp
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10026644:				; CODE XREF: sub_10026630+Aj
		push	edi
		mov	edi, [esp+30h+arg_4]
		cmp	edi, 10h
		ja	short loc_10026659
		pop	edi
		mov	eax, 0FFFFFFFDh
		pop	ebp
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_10026659:				; CODE XREF: sub_10026630+1Cj
		push	ebx
		push	8000h		; Size
		call	ds:malloc
		mov	ebx, eax
		add	esp, 4
		mov	[esp+34h+Dst], ebx
		cmp	ebx, ebp
		jnz	short loc_1002667E
		pop	ebx
		pop	edi
		mov	eax, 0FFFFFFFEh
		pop	ebp
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1002667E:				; CODE XREF: sub_10026630+40j
		lea	eax, [esp+34h+var_10]
		push	esi
		push	eax
		mov	[esp+3Ch+var_4], ebp
		mov	[esp+3Ch+var_14], ebp
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002695B
		lea	ecx, [esp+38h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002695B
		cmp	edi, 514h
		jb	short loc_100266C7
		mov	ebx, 2
		jmp	loc_1002676E
; ---------------------------------------------------------------------------

loc_100266C7:				; CODE XREF: sub_10026630+8Bj
		cmp	edi, 352h
		jb	short loc_100266D9
		mov	ebx, 3
		jmp	loc_1002676E
; ---------------------------------------------------------------------------

loc_100266D9:				; CODE XREF: sub_10026630+9Dj
		cmp	edi, 28Ah
		jb	short loc_100266EB
		mov	ebx, 4
		jmp	loc_1002676E
; ---------------------------------------------------------------------------

loc_100266EB:				; CODE XREF: sub_10026630+AFj
		cmp	edi, 226h
		jb	short loc_100266FA
		mov	ebx, 5
		jmp	short loc_1002676E
; ---------------------------------------------------------------------------

loc_100266FA:				; CODE XREF: sub_10026630+C1j
		cmp	edi, 1C2h
		jb	short loc_10026709
		mov	ebx, 6
		jmp	short loc_1002676E
; ---------------------------------------------------------------------------

loc_10026709:				; CODE XREF: sub_10026630+D0j
		cmp	edi, 190h
		jb	short loc_10026718
		mov	ebx, 7
		jmp	short loc_1002676E
; ---------------------------------------------------------------------------

loc_10026718:				; CODE XREF: sub_10026630+DFj
		cmp	edi, 15Eh
		jb	short loc_10026727
		mov	ebx, 8
		jmp	short loc_1002676E
; ---------------------------------------------------------------------------

loc_10026727:				; CODE XREF: sub_10026630+EEj
		cmp	edi, 12Ch
		jb	short loc_10026736
		mov	ebx, 9
		jmp	short loc_1002676E
; ---------------------------------------------------------------------------

loc_10026736:				; CODE XREF: sub_10026630+FDj
		cmp	edi, 0FAh
		jb	short loc_10026745
		mov	ebx, 0Ch
		jmp	short loc_1002676E
; ---------------------------------------------------------------------------

loc_10026745:				; CODE XREF: sub_10026630+10Cj
		cmp	edi, 0C8h
		jb	short loc_10026754
		mov	ebx, 0Fh
		jmp	short loc_1002676E
; ---------------------------------------------------------------------------

loc_10026754:				; CODE XREF: sub_10026630+11Bj
		cmp	edi, 96h
		jb	short loc_10026763
		mov	ebx, 12h
		jmp	short loc_1002676E
; ---------------------------------------------------------------------------

loc_10026763:				; CODE XREF: sub_10026630+12Aj
		cmp	edi, 64h
		sbb	ebx, ebx
		and	ebx, 17h
		add	ebx, 1Bh

loc_1002676E:				; CODE XREF: sub_10026630+92j
					; sub_10026630+A4j ...
		cmp	[esp+38h+arg_8], ebp
		jz	short loc_10026775
		dec	edi

loc_10026775:				; CODE XREF: sub_10026630+142j
		mov	eax, [esp+38h+arg_0]
		push	1
		lea	edx, [edi-1]
		push	edx
		push	eax
		call	sub_10028B90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026957
		mov	ecx, [esp+38h+arg_0]
		push	1
		push	0
		push	ecx
		call	sub_10028B90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026957
		mov	edx, [esp+38h+arg_0]
		push	edx
		call	sub_10028CE0
		lea	ebp, [eax-1]
		add	esp, 4
		cmp	ebp, edi
		jb	short loc_100267E0

loc_100267C1:				; CODE XREF: sub_10026630+1AEj
		mov	eax, [esp+38h+arg_0]
		push	0
		push	ebp
		push	eax
		call	sub_10028B90
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026957
		dec	ebp
		cmp	ebp, edi
		jnb	short loc_100267C1

loc_100267E0:				; CODE XREF: sub_10026630+18Fj
		mov	ecx, [esp+38h+Dst]
		mov	edx, [esp+38h+arg_0]
		push	8000h		; Size
		push	ecx		; Dst
		push	198Dh		; int
		push	offset dword_10040B0C ;	int
		push	edx		; int
		call	sub_10026510
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_10026957
		or	esi, 0FFFFFFFFh
		xor	ebp, ebp
		mov	edi, 198Eh
		jmp	short loc_10026820
; ---------------------------------------------------------------------------
		align 10h

loc_10026820:				; CODE XREF: sub_10026630+1E5j
					; sub_10026630+30Bj
		mov	eax, [esp+38h+Dst]
		cmp	byte ptr [eax+ebp], 0
		jnz	loc_10026934
		mov	eax, [esp+38h+arg_0]
		lea	ecx, [esp+38h+var_10]
		push	ecx
		lea	edx, [ebp+ebp+0]
		push	edx
		push	eax
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026957
		lea	ecx, [esp+38h+var_10]
		push	2
		push	ecx
		call	sub_10026250
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002692F
		lea	edx, [esp+38h+var_10]
		push	ebx
		push	edx
		call	sub_100262E0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002692F
		cmp	[esp+38h+arg_8], eax
		jz	loc_10026945
		lea	eax, [esp+38h+var_20]
		push	eax
		lea	ecx, [esp+3Ch+var_10]
		push	ecx
		call	sub_1002A0A0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10026957
		lea	edx, [esp+38h+var_20]
		push	edx
		mov	eax, edx
		push	1
		push	eax
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10026957
		lea	ecx, [esp+38h+var_24]
		push	ecx
		lea	edx, [esp+3Ch+var_20]
		push	edx
		mov	[esp+40h+var_24], edi
		call	sub_100265D0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_100268ED
		lea	eax, [esp+38h+var_20]
		push	eax
		call	sub_10028EF0
		add	esp, 4
		jmp	short loc_10026934
; ---------------------------------------------------------------------------

loc_100268ED:				; CODE XREF: sub_10026630+2ACj
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_10026957
		lea	ecx, [esp+38h+var_20]
		push	2
		push	ecx
		call	sub_10026250
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1002690E
		lea	edx, [esp+38h+var_20]
		push	edx
		jmp	short loc_10026927
; ---------------------------------------------------------------------------

loc_1002690E:				; CODE XREF: sub_10026630+2D5j
		lea	eax, [esp+38h+var_20]
		push	ebx
		push	eax
		call	sub_100262E0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1002699D
		lea	ecx, [esp+38h+var_20]
		push	ecx

loc_10026927:				; CODE XREF: sub_10026630+2DCj
		call	sub_10028EF0
		add	esp, 4

loc_1002692F:				; CODE XREF: sub_10026630+232j
					; sub_10026630+24Aj
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_10026957

loc_10026934:				; CODE XREF: sub_10026630+1F8j
					; sub_10026630+2BBj
		inc	ebp
		cmp	ebp, 8000h
		jl	loc_10026820
		test	esi, esi
		jnz	short loc_10026957

loc_10026945:				; CODE XREF: sub_10026630+254j
					; sub_10026630+389j
		mov	edx, [esp+38h+arg_0]
		push	edx
		lea	eax, [esp+3Ch+var_10]
		push	eax
		call	sub_1002A050
		add	esp, 8

loc_10026957:				; CODE XREF: sub_10026630+15Cj
					; sub_10026630+177j ...
		mov	ebx, [esp+38h+Dst]

loc_1002695B:				; CODE XREF: sub_10026630+68j
					; sub_10026630+7Fj
		lea	ecx, [esp+38h+var_10]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+3Ch+var_20]
		push	edx
		call	sub_10028EF0
		mov	eax, [esp+40h+arg_C]
		add	esp, 8
		test	eax, eax
		jz	short loc_1002697C
		add	[eax], ebp

loc_1002697C:				; CODE XREF: sub_10026630+348j
		push	8000h		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		push	ebx		; Memory
		call	ds:free
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1002699D:				; CODE XREF: sub_10026630+2F0j
		lea	edx, [esp+38h+var_10]
		push	edx
		lea	eax, [esp+3Ch+var_20]
		push	eax
		call	sub_1002A050
		lea	ecx, [esp+40h+var_20]
		push	ecx
		call	sub_10028EF0
		add	esp, 0Ch
		jmp	short loc_10026945
sub_10026630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100269C0	proc near		; CODE XREF: sub_10026C60+E5p
					; sub_10026C60+144p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		mov	esi, [esp+8+arg_4]
		mov	eax, [esi+8]
		lea	ecx, [eax+eax+1]
		push	ecx
		push	ebx
		call	sub_100291A0
		add	esp, 8
		test	eax, eax
		js	short loc_10026A5C
		mov	eax, [esi+8]
		push	edi
		xor	edi, edi
		test	eax, eax
		jz	short loc_10026A13
		lea	esp, [esp+0]

loc_100269F0:				; CODE XREF: sub_100269C0+51j
		mov	edx, [ebx+0Ch]
		lea	ecx, [edx+edi*4]
		mov	edx, [esi+0Ch]
		push	ecx
		mov	ecx, [ecx]
		imul	ecx, [esi+10h]
		push	ecx
		push	eax
		push	edx
		call	sub_1002D730
		mov	eax, [esi+8]
		inc	edi
		add	esp, 10h
		cmp	edi, eax
		jb	short loc_100269F0

loc_10026A13:				; CODE XREF: sub_100269C0+27j
		mov	eax, [ebx+8]
		pop	edi
		cmp	eax, 1
		jbe	short loc_10026A31
		mov	ecx, [ebx+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_10026A23:				; CODE XREF: sub_100269C0+6Fj
		cmp	dword ptr [ecx], 0
		jnz	short loc_10026A31
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_10026A23

loc_10026A31:				; CODE XREF: sub_100269C0+5Aj
					; sub_100269C0+66j
		mov	[ebx+8], eax
		mov	edx, [esi+8]
		push	edx
		push	ebx
		call	sub_100293C0
		push	esi
		push	ebx
		call	sub_10029C10
		add	esp, 10h
		test	eax, eax
		js	short loc_10026A5A
		push	esi
		push	ebx
		call	sub_100299B0
		add	esp, 8
		test	eax, eax
		js	short loc_10026A5C

loc_10026A5A:				; CODE XREF: sub_100269C0+8Aj
		xor	eax, eax

loc_10026A5C:				; CODE XREF: sub_100269C0+1Dj
					; sub_100269C0+98j
		pop	esi
		pop	ebx
		retn
sub_100269C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026A60	proc near		; CODE XREF: sub_10026C60+3F7p
					; sub_10026C60+496p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		push	edi
		test	ebp, ebp
		jz	loc_10026C14
		mov	eax, [esp+10h+arg_4]
		test	eax, eax
		jz	loc_10026C14
		mov	edi, [esp+10h+arg_8]
		test	edi, edi
		jz	loc_10026C14
		mov	ecx, [ebp+8]
		cmp	ecx, [eax+8]
		jnb	short loc_10026A9B
		mov	[esp+10h+arg_4], ebp
		mov	[esp+10h+arg_0], eax
		mov	ebp, eax

loc_10026A9B:				; CODE XREF: sub_10026A60+2Fj
		mov	edx, [edi+0Ch]
		push	ebx
		push	esi
		mov	esi, [esp+18h+arg_C]
		mov	dword ptr [edi+8], 1
		mov	dword ptr [edx], 0
		mov	ebx, [esi+8]
		lea	ebx, [ebx+ebx+1]
		push	ebx
		push	edi
		call	sub_100291A0
		add	esp, 8
		test	eax, eax
		jnz	loc_10026C0C
		mov	eax, [esp+18h+arg_4]
		mov	eax, [eax+0Ch]
		mov	ecx, [edi+0Ch]
		mov	ebp, [ebp+8]
		mov	edx, [esp+18h+arg_0]
		mov	[esp+18h+var_8], eax
		mov	eax, [eax]
		push	ecx
		push	eax
		mov	eax, [edx+0Ch]
		push	ebp
		push	eax
		call	sub_1002D600
		mov	edx, [edi+0Ch]
		add	[esp+28h+var_8], 4
		sub	ebx, ebp
		lea	ecx, ds:0FFFFFFFCh[ebx*4]
		push	ecx		; Size
		lea	eax, [edx+ebp*4+4]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [edi+0Ch]
		mov	ecx, [eax]
		imul	ecx, [esi+10h]
		mov	edx, [esi+8]
		push	eax
		mov	eax, [esi+0Ch]
		push	ecx
		push	edx
		push	eax
		call	sub_1002D730
		mov	ecx, [esp+44h+arg_4]
		mov	eax, [ecx+8]
		mov	ebx, 1
		add	esp, 2Ch
		mov	[esp+18h+var_4], eax
		cmp	eax, ebx
		jbe	short loc_10026B94
		lea	ebx, [ebx+0]

loc_10026B40:				; CODE XREF: sub_10026A60+12Ej
		mov	ecx, [esp+18h+var_8]
		mov	eax, [ecx]
		add	ecx, 4
		mov	[esp+18h+var_8], ecx
		test	eax, eax
		jz	short loc_10026B6A
		mov	edx, [edi+0Ch]
		lea	ecx, [edx+ebx*4]
		mov	edx, [esp+18h+arg_0]
		push	ecx
		push	eax
		mov	eax, [edx+0Ch]
		push	ebp
		push	eax
		call	sub_1002D730
		add	esp, 10h

loc_10026B6A:				; CODE XREF: sub_10026A60+EFj
		mov	ecx, [edi+0Ch]
		mov	edx, [esi+10h]
		imul	edx, [ecx+ebx*4]
		lea	eax, [ecx+ebx*4]
		mov	ecx, [esi+0Ch]
		push	eax
		mov	eax, [esi+8]
		push	edx
		push	eax
		push	ecx
		call	sub_1002D730
		inc	ebx
		add	esp, 10h
		cmp	ebx, [esp+18h+var_4]
		jb	short loc_10026B40
		mov	eax, [esp+18h+var_4]

loc_10026B94:				; CODE XREF: sub_10026A60+D8j
		mov	ebp, [esi+8]
		cmp	eax, ebp
		jnb	short loc_10026BC4
		cmp	ebx, ebp
		jnb	short loc_10026BC4
		nop

loc_10026BA0:				; CODE XREF: sub_10026A60+162j
		mov	edx, [edi+0Ch]
		mov	ecx, [esi+10h]
		imul	ecx, [edx+ebx*4]
		lea	eax, [edx+ebx*4]
		mov	edx, [esi+8]
		push	eax
		mov	eax, [esi+0Ch]
		push	ecx
		push	edx
		push	eax
		call	sub_1002D730
		inc	ebx
		add	esp, 10h
		cmp	ebx, ebp
		jb	short loc_10026BA0

loc_10026BC4:				; CODE XREF: sub_10026A60+139j
					; sub_10026A60+13Dj
		mov	eax, [edi+8]
		cmp	eax, 1
		jbe	short loc_10026BE1
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_10026BD3:				; CODE XREF: sub_10026A60+17Fj
		cmp	dword ptr [ecx], 0
		jnz	short loc_10026BE1
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_10026BD3

loc_10026BE1:				; CODE XREF: sub_10026A60+16Aj
					; sub_10026A60+176j
		mov	[edi+8], eax
		mov	edx, [esi+8]
		push	edx
		push	edi
		call	sub_100293C0
		push	esi
		push	edi
		call	sub_10029C10
		add	esp, 10h
		test	eax, eax
		js	short loc_10026C0A
		push	esi
		push	edi
		call	sub_100299B0
		add	esp, 8
		test	eax, eax
		js	short loc_10026C0C

loc_10026C0A:				; CODE XREF: sub_10026A60+19Aj
		xor	eax, eax

loc_10026C0C:				; CODE XREF: sub_10026A60+64j
					; sub_10026A60+1A8j
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10026C14:				; CODE XREF: sub_10026A60+Bj
					; sub_10026A60+17j ...
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	ebp
		add	esp, 8
		retn
sub_10026A60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026C20	proc near		; CODE XREF: sub_100280A0+1ACp
					; sub_100280A0+2A2p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_8]
		push	esi
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_10026C5B
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	ecx, [edi+8]
		push	ecx
		push	esi
		call	sub_10029230
		add	esp, 8
		test	eax, eax
		js	short loc_10026C5A
		push	esi
		push	0
		push	edi
		push	esi
		call	sub_1002BF60
		add	esp, 10h

loc_10026C5A:				; CODE XREF: sub_10026C20+2Bj
		pop	edi

loc_10026C5B:				; CODE XREF: sub_10026C20+15j
		pop	esi
		retn
sub_10026C20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10026C60	proc near		; CODE XREF: sub_100288A0+245p

var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= byte ptr -23Ch
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= byte ptr -224h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= byte ptr -214h
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F8		= byte ptr -1F8h
var_1F4		= byte ptr -1F4h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 244h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+244h+var_4], eax
		mov	eax, [esp+244h+arg_4]
		mov	ecx, [esp+244h+arg_C]
		push	ebx
		push	ebp
		mov	ebp, [esp+24Ch+arg_10]
		xor	edx, edx
		push	esi
		push	edi
		mov	edi, [esp+254h+arg_0]
		mov	[esp+254h+var_228], eax
		mov	[esp+254h+var_22C], ecx
		mov	[esp+254h+var_230], edx
		mov	[esp+254h+var_208], edx
		mov	[esp+254h+var_218], edx
		lea	eax, [esp+254h+var_1F8]
		mov	ecx, 20h

loc_10026CB3:				; CODE XREF: sub_10026C60+59j
		mov	[eax], edx
		add	eax, 10h
		dec	ecx
		jnz	short loc_10026CB3
		mov	eax, [esp+254h+arg_14]
		lea	esi, [eax+eax*2+2]
		lea	edx, [esp+254h+var_23C]
		push	esi
		push	edx
		call	sub_10028D30
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		lea	eax, [esp+254h+var_214]
		push	esi
		push	eax
		call	sub_10028D30
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		lea	ecx, [esp+254h+var_204]
		push	edi
		push	ecx
		call	sub_10028D90
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	edx, [edi+8]
		mov	eax, [esp+254h+arg_14]
		lea	ecx, [eax+edx*2+2]
		push	ecx
		lea	edx, [esp+258h+var_224]
		push	edx
		call	sub_10028D30
		lea	eax, [esp+25Ch+var_224]
		push	eax
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		lea	ecx, [esp+254h+var_224]
		push	ebp
		push	ecx
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	edi, 1
		cmp	[esp+254h+arg_20], edi
		jbe	short loc_10026DC3
		lea	esi, [esp+254h+var_1F4]
		lea	esp, [esp+0]

loc_10026D70:				; CODE XREF: sub_10026C60+161j
		mov	edx, [esp+254h+var_21C]
		mov	eax, [esp+254h+arg_14]
		lea	ecx, [eax+edx*2+2]
		push	ecx
		push	esi
		call	sub_10028D30
		push	esi
		lea	edx, [esp+260h+var_224]
		push	edx
		lea	eax, [esi-10h]
		push	eax
		call	sub_1002A260
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		inc	edi
		add	esi, 10h
		cmp	edi, [esp+254h+arg_20]
		jb	short loc_10026D70

loc_10026DC3:				; CODE XREF: sub_10026C60+103j
		lea	ecx, [esp+254h+var_23C]
		push	1
		push	ecx
		call	sub_10028F70
		lea	edx, [esp+25Ch+var_23C]
		push	edx
		mov	eax, edx
		push	eax
		call	sub_10028E00
		add	esp, 10h
		test	eax, eax
		js	short loc_10026E0B
		mov	ecx, [ebp+8]
		push	ecx
		lea	edx, [esp+258h+var_23C]
		push	edx
		call	sub_10029230
		add	esp, 8
		test	eax, eax
		js	short loc_10026E0B
		lea	eax, [esp+254h+var_23C]
		push	eax
		push	0
		mov	ecx, eax
		push	ebp
		push	ecx
		call	sub_1002BF60
		add	esp, 10h

loc_10026E0B:				; CODE XREF: sub_10026C60+181j
					; sub_10026C60+196j
		mov	ebx, eax
		test	eax, eax
		js	loc_10027F50
		mov	eax, [esp+254h+arg_18]
		sub	eax, [esp+254h+arg_1C]
		lea	edi, [esp+254h+var_23C]
		lea	esi, [esp+254h+var_214]
		mov	[esp+254h+var_240], eax
		js	loc_10027F39
		jmp	short loc_10026E40
; ---------------------------------------------------------------------------
		align 10h

loc_10026E40:				; CODE XREF: sub_10026C60+1D5j
					; sub_10026C60+12D3j
		mov	edx, [esp+254h+arg_1C]
		mov	eax, [esp+254h+var_240]
		mov	ecx, [esp+254h+var_228]
		push	edx
		push	eax
		push	ecx
		call	sub_10028C50
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+arg_1C]
		mov	[esp+254h+var_244], ebx
		cmp	eax, 1
		jnz	short loc_10026EE8
		test	ebx, ebx
		jnz	short loc_10026EAB

loc_10026E78:				; CODE XREF: sub_10026C60+654j
					; sub_10026C60+70Aj ...
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		add	esp, 8

loc_10026E96:				; CODE XREF: sub_10026C60+3FFj
					; sub_10026C60+DF6j
		mov	ebx, eax
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, edi
		mov	edi, esi
		mov	esi, eax
		jmp	loc_10027F28
; ---------------------------------------------------------------------------

loc_10026EAB:				; CODE XREF: sub_10026C60+216j
		test	bl, 1
		jz	loc_10027F22
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		lea	edx, [esp+25Ch+var_204]
		push	edx
		jmp	loc_1002744F
; ---------------------------------------------------------------------------

loc_10026EE8:				; CODE XREF: sub_10026C60+212j
		cmp	eax, 4
		jnz	loc_100272B9
		test	ebx, ebx
		jnz	loc_10026F9E
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10027F28
; ---------------------------------------------------------------------------

loc_10026F9E:				; CODE XREF: sub_10026C60+293j
		test	bl, 1
		jz	loc_10027064
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 1
		push	ebp
		add	eax, eax
		push	esi
		lea	eax, [esp+eax*8+25Ch+var_204]
		push	eax
		push	edi
		call	sub_10026A60
		add	esp, 10h
		jmp	loc_10026E96
; ---------------------------------------------------------------------------

loc_10027064:				; CODE XREF: sub_10026C60+341j
		test	bl, 2
		jz	loc_1002713B
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 2
		push	ebp
		add	eax, eax
		push	edi
		lea	ecx, [esp+eax*8+25Ch+var_204]
		push	ecx
		push	esi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, edi
		mov	edi, esi
		mov	esi, eax
		jmp	loc_10027F28
; ---------------------------------------------------------------------------

loc_1002713B:				; CODE XREF: sub_10026C60+407j
		test	bl, 4
		jz	loc_10027212
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 3
		push	ebp
		add	eax, eax
		push	esi
		lea	edx, [esp+eax*8+25Ch+var_204]
		push	edx
		push	edi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, edi
		mov	edi, esi
		mov	esi, eax
		jmp	loc_10027F28
; ---------------------------------------------------------------------------

loc_10027212:				; CODE XREF: sub_10026C60+4DEj
		test	bl, 8
		jz	loc_10027F22
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		push	ebp
		and	eax, 0FFFFFFF0h
		push	edi
		lea	eax, [esp+eax+25Ch+var_204]
		push	eax
		push	esi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10026E78
; ---------------------------------------------------------------------------

loc_100272B9:				; CODE XREF: sub_10026C60+28Bj
		cmp	eax, 5
		jnz	loc_1002783F
		test	ebx, ebx
		jnz	loc_1002736F
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10026E78
; ---------------------------------------------------------------------------

loc_1002736F:				; CODE XREF: sub_10026C60+664j
		test	bl, 1
		jz	loc_10027467
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 1
		push	ebp
		add	eax, eax
		push	edi
		lea	ecx, [esp+eax*8+25Ch+var_204]
		push	ecx

loc_1002744F:				; CODE XREF: sub_10026C60+283j
		push	esi
		call	sub_10026A60
		add	esp, 10h

loc_10027458:				; CODE XREF: sub_10026C60+BDAj
		mov	ebx, eax
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10027F28
; ---------------------------------------------------------------------------

loc_10027467:				; CODE XREF: sub_10026C60+712j
		test	bl, 2
		jz	loc_10027560
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 2
		push	ebp
		add	eax, eax
		push	esi
		lea	edx, [esp+eax*8+25Ch+var_204]
		push	edx
		push	edi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10027F28
; ---------------------------------------------------------------------------

loc_10027560:				; CODE XREF: sub_10026C60+80Aj
		test	bl, 4
		jz	loc_10027659
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 3
		push	ebp
		add	eax, eax
		push	edi
		lea	eax, [esp+eax*8+25Ch+var_204]
		push	eax
		push	esi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10027F28
; ---------------------------------------------------------------------------

loc_10027659:				; CODE XREF: sub_10026C60+903j
		test	bl, 8
		jz	loc_10027750
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		push	ebp
		and	eax, 0FFFFFFF0h
		push	esi
		lea	ecx, [esp+eax+25Ch+var_204]
		push	ecx
		push	edi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10027F28
; ---------------------------------------------------------------------------

loc_10027750:				; CODE XREF: sub_10026C60+9FCj
		test	bl, 10h
		jz	loc_10027F22
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 5
		push	ebp
		add	eax, eax
		push	edi
		lea	edx, [esp+eax*8+25Ch+var_204]
		push	edx
		push	esi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		add	esp, 8
		jmp	loc_10027458
; ---------------------------------------------------------------------------

loc_1002783F:				; CODE XREF: sub_10026C60+65Cj
		cmp	eax, 6
		jnz	loc_10027F22
		test	ebx, ebx
		jnz	loc_10027945
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10027F28
; ---------------------------------------------------------------------------

loc_10027945:				; CODE XREF: sub_10026C60+BEAj
		test	bl, 1
		jz	loc_10027A5B
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 1
		push	ebp
		add	eax, eax
		push	esi
		lea	eax, [esp+eax*8+25Ch+var_204]
		push	eax
		push	edi
		call	sub_10026A60
		add	esp, 10h
		jmp	loc_10026E96
; ---------------------------------------------------------------------------

loc_10027A5B:				; CODE XREF: sub_10026C60+CE8j
		test	bl, 2
		jz	loc_10027B54
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 2
		push	ebp
		add	eax, eax
		push	edi
		lea	ecx, [esp+eax*8+25Ch+var_204]
		push	ecx
		push	esi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10026E78
; ---------------------------------------------------------------------------

loc_10027B54:				; CODE XREF: sub_10026C60+DFEj
		test	bl, 4
		jz	loc_10027C4D
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 3
		push	ebp
		add	eax, eax
		push	esi
		lea	edx, [esp+eax*8+25Ch+var_204]
		push	edx
		push	edi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10026E78
; ---------------------------------------------------------------------------

loc_10027C4D:				; CODE XREF: sub_10026C60+EF7j
		test	bl, 8
		jz	loc_10027D44
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		push	ebp
		and	eax, 0FFFFFFF0h
		push	edi
		lea	eax, [esp+eax+25Ch+var_204]
		push	eax
		push	esi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10026E78
; ---------------------------------------------------------------------------

loc_10027D44:				; CODE XREF: sub_10026C60+FF0j
		test	bl, 10h
		jz	loc_10027E3D
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 5
		push	ebp
		add	eax, eax
		push	esi
		lea	ecx, [esp+eax*8+25Ch+var_204]
		push	ecx
		push	edi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		jmp	loc_10026E78
; ---------------------------------------------------------------------------

loc_10027E3D:				; CODE XREF: sub_10026C60+10E7j
		test	bl, 20h
		jz	loc_10027F22
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		mov	eax, [esp+254h+var_244]
		shr	eax, 6
		push	ebp
		add	eax, eax
		push	edi
		lea	edx, [esp+eax*8+25Ch+var_204]
		push	edx
		push	esi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10027F50
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10027F50
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10027F50
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10027F50
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_10027F50
		jmp	loc_10026E78
; ---------------------------------------------------------------------------

loc_10027F22:				; CODE XREF: sub_10026C60+24Ej
					; sub_10026C60+5B5j ...
		call	ds:abort
; ---------------------------------------------------------------------------

loc_10027F28:				; CODE XREF: sub_10026C60+246j
					; sub_10026C60+339j ...
		mov	eax, [esp+254h+arg_1C]
		sub	[esp+254h+var_240], eax
		jns	loc_10026E40

loc_10027F39:				; CODE XREF: sub_10026C60+1CFj
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ecx, [esp+25Ch+var_22C]
		push	ecx
		push	edi
		mov	ebx, eax
		call	sub_1002A050
		add	esp, 10h

loc_10027F50:				; CODE XREF: sub_10026C60+78j
					; sub_10026C60+90j ...
		lea	edx, [esp+254h+var_23C]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+258h+var_214]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+25Ch+var_224]
		push	ecx
		call	sub_10028EF0
		mov	edi, [esp+260h+arg_20]
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_10027F8F
		lea	esi, [esp+254h+var_204]

loc_10027F80:				; CODE XREF: sub_10026C60+132Dj
		push	esi
		call	sub_10028EF0
		add	esp, 4
		add	esi, 10h
		dec	edi
		jnz	short loc_10027F80

loc_10027F8F:				; CODE XREF: sub_10026C60+131Aj
		mov	ecx, [esp+254h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 244h
		retn
sub_10026C60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10027FB0	proc near		; CODE XREF: sub_100280A0+248p
					; sub_100280A0+33Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		mov	eax, [esp+4+arg_8]
		mov	ecx, [esp+4+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_C]
		imul	eax, ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		lea	edx, [ecx+eax*4]
		xor	eax, eax
		push	edi
		mov	[esp+14h+var_4], edx
		mov	[esp+14h+arg_C], eax
		add	esi, 0Ch
		jmp	short loc_10027FE0
; ---------------------------------------------------------------------------
		align 10h

loc_10027FE0:				; CODE XREF: sub_10027FB0+28j
					; sub_10027FB0+7Bj
		mov	edx, [esi-4]
		mov	ecx, [esi]
		add	eax, [esp+14h+arg_4]
		cmp	dword ptr [esi-0Ch], 0
		lea	edi, [ecx+edx*4]
		jnz	short loc_10028035
		cmp	edx, [esp+14h+arg_8]
		ja	short loc_10028035
		cmp	ecx, edi
		jnb	short loc_1002800B
		lea	esp, [esp+0]

loc_10028000:				; CODE XREF: sub_10027FB0+59j
		mov	dl, [ecx]
		mov	[eax], dl
		inc	ecx
		add	eax, ebp
		cmp	ecx, edi
		jb	short loc_10028000

loc_1002800B:				; CODE XREF: sub_10027FB0+4Aj
		mov	ecx, [esp+14h+var_4]
		cmp	eax, ecx
		jnb	short loc_1002801C

loc_10028013:				; CODE XREF: sub_10027FB0+6Aj
		mov	byte ptr [eax],	0
		add	eax, ebp
		cmp	eax, ecx
		jb	short loc_10028013

loc_1002801C:				; CODE XREF: sub_10027FB0+61j
		mov	eax, [esp+14h+arg_C]
		inc	eax
		add	esi, 10h
		mov	[esp+14h+arg_C], eax
		cmp	eax, 4
		jb	short loc_10027FE0
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10028035:				; CODE XREF: sub_10027FB0+40j
					; sub_10027FB0+46j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		pop	ecx
		retn
sub_10027FB0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10028040	proc near		; CODE XREF: sub_100280A0+3A0p
					; sub_100280A0+60Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_8]
		push	edi
		mov	edi, [esp+4+arg_0]
		mov	eax, [edi+0Ch]
		lea	ecx, [eax+edx*4]
		mov	dword ptr [edi], 0
		mov	[edi+8], edx
		cmp	eax, ecx
		jnb	short loc_10028073
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_4]

loc_10028066:				; CODE XREF: sub_10028040+2Fj
		mov	dl, [esi]
		mov	[eax], dl
		inc	eax
		add	esi, ebp
		cmp	eax, ecx
		jb	short loc_10028066
		pop	esi
		pop	ebp

loc_10028073:				; CODE XREF: sub_10028040+1Aj
		mov	eax, [edi+8]
		cmp	eax, 1
		jbe	short loc_10028090
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_10028082:				; CODE XREF: sub_10028040+4Ej
		cmp	dword ptr [ecx], 0
		jnz	short loc_10028090
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_10028082

loc_10028090:				; CODE XREF: sub_10028040+39j
					; sub_10028040+45j
		mov	[edi+8], eax
		xor	eax, eax
		pop	edi
		retn
sub_10028040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100280A0	proc near		; CODE XREF: sub_100288A0+200p

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= byte ptr -80h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_60		= dword	ptr -60h
Memory		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_48		= dword	ptr -48h
var_44		= byte ptr -44h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 98h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+98h+var_4], eax
		mov	eax, [esp+98h+arg_0]
		mov	ecx, [esp+98h+arg_C]
		push	ebx
		mov	ebx, [esp+9Ch+arg_20]
		mov	[esp+9Ch+var_84], eax
		mov	eax, [esp+9Ch+arg_14]
		lea	edx, ds:1[eax*4]
		imul	edx, ebx
		push	ebp
		mov	ebp, [esp+0A0h+arg_10]
		push	esi
		mov	esi, [esp+0A4h+arg_4]
		push	edi
		xor	edi, edi
		push	edx		; Size
		mov	[esp+0ACh+var_70], esi
		mov	[esp+0ACh+var_58], ecx
		mov	[esp+0ACh+var_8C], eax
		mov	[esp+0ACh+var_94], ebx
		mov	[esp+0ACh+var_74], edi
		mov	[esp+0ACh+var_60], edi
		mov	[esp+0ACh+var_38], edi
		mov	[esp+0ACh+var_28], edi
		mov	[esp+0ACh+var_18], edi
		mov	[esp+0ACh+var_8], edi
		mov	[esp+0ACh+var_48], edi
		call	ds:malloc
		add	esp, 4
		mov	[esp+0A8h+Memory], eax
		cmp	eax, edi
		jnz	short loc_10028141
		lea	ebx, [edi-2]
		jmp	loc_1002880D
; ---------------------------------------------------------------------------

loc_10028141:				; CODE XREF: sub_100280A0+97j
		mov	ecx, [esp+0A8h+arg_18]
		lea	eax, [ebx+eax-1]
		neg	ebx
		and	eax, ebx
		mov	[esp+0A8h+var_88], eax
		mov	eax, [esp+0A8h+arg_1C]
		push	eax
		sub	ecx, eax
		push	ecx
		push	esi
		call	sub_10028C50
		mov	ebx, eax
		add	esp, 0Ch
		cmp	ebx, edi
		jl	loc_1002880D
		mov	esi, [esp+0A8h+var_8C]
		lea	esi, [esi+esi*2+2]
		lea	edx, [esp+0A8h+var_80]
		push	esi
		push	edx
		mov	[esp+0B0h+var_90], ebx
		call	sub_10028D30
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		lea	eax, [esp+0A8h+var_6C]
		push	esi
		push	eax
		call	sub_10028D30
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		lea	ecx, [esp+0A8h+var_54]
		push	esi
		push	ecx
		call	sub_10028D30
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		cmp	[esp+0A8h+var_94], 2
		jbe	loc_10028327
		lea	edx, [esp+0A8h+var_44]
		push	esi
		push	edx
		call	sub_10028D30
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		lea	eax, [esp+0A8h+var_34]
		push	esi
		push	eax
		call	sub_10028D30
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		lea	ecx, [esp+0A8h+var_24]
		push	esi
		push	ecx
		call	sub_10028D30
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		lea	edx, [esp+0A8h+var_14]
		push	esi
		push	edx
		call	sub_10028D30
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		lea	eax, [esp+0A8h+var_44]
		push	1
		push	eax
		call	sub_10028F70
		lea	ecx, [esp+0B0h+var_44]
		push	ecx
		mov	edx, ecx
		push	ebp
		push	edx
		call	sub_10026C20
		mov	ebx, eax
		add	esp, 14h
		cmp	ebx, edi
		jl	loc_1002880D
		mov	esi, [esp+0A8h+var_84]
		lea	eax, [esp+0A8h+var_34]
		push	eax
		push	esi
		call	sub_10028E00
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		lea	ecx, [esp+0A8h+var_24]
		push	ecx
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		lea	edx, [esp+0A8h+var_24]
		push	ebp
		push	edx
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		push	ebp
		lea	eax, [esp+0ACh+var_14]
		push	eax
		lea	ecx, [esp+0B0h+var_24]
		push	esi
		push	ecx
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, edi
		jl	loc_1002880D
		mov	esi, [esp+0A8h+var_94]
		mov	edx, [esp+0A8h+var_8C]
		mov	eax, [esp+0A8h+var_88]
		push	esi
		push	edx
		push	eax
		lea	ecx, [esp+0B4h+var_44]
		push	ecx
		call	sub_10027FB0
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, edi
		jl	loc_1002880D
		mov	eax, [esp+0A8h+var_90]
		cmp	eax, 4
		jnb	short loc_10028364
		lea	edx, [esp+0A8h+var_80]
		add	eax, eax
		push	edx
		lea	eax, [esp+eax*8+0ACh+var_44]
		push	eax
		call	sub_10028E00
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		mov	[esp+0A8h+var_90], esi
		jmp	short loc_10028364
; ---------------------------------------------------------------------------

loc_10028327:				; CODE XREF: sub_100280A0+12Bj
		lea	ecx, [esp+0A8h+var_80]
		cmp	[esp+0A8h+var_90], edi
		jnz	short loc_1002834C
		push	1
		push	ecx
		call	sub_10028F70
		lea	edx, [esp+0B0h+var_80]
		push	edx
		mov	eax, edx
		push	ebp
		push	eax
		call	sub_10026C20
		add	esp, 14h
		jmp	short loc_1002835A
; ---------------------------------------------------------------------------

loc_1002834C:				; CODE XREF: sub_100280A0+28Fj
		mov	edx, [esp+0A8h+var_84]
		push	ecx
		push	edx
		call	sub_10028E00
		add	esp, 8

loc_1002835A:				; CODE XREF: sub_100280A0+2AAj
		mov	ebx, eax
		cmp	ebx, edi
		jl	loc_1002880D

loc_10028364:				; CODE XREF: sub_100280A0+261j
					; sub_100280A0+285j
		mov	eax, 4
		mov	[esp+0A8h+var_98], eax
		cmp	[esp+0A8h+var_94], eax
		jbe	loc_100284DC
		jmp	short loc_10028384
; ---------------------------------------------------------------------------
		align 10h

loc_10028380:				; CODE XREF: sub_100280A0+436j
		mov	eax, [esp+0A8h+var_98]

loc_10028384:				; CODE XREF: sub_100280A0+2D7j
		mov	esi, eax
		and	esi, 3
		test	al, 1
		jz	loc_10028425
		mov	ecx, [esp+0A8h+var_84]
		mov	eax, esi
		add	eax, eax
		lea	eax, [esp+eax*8+0A8h+var_44]
		push	ebp
		push	eax
		push	ecx
		add	eax, 0FFFFFFF0h
		push	eax
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, edi
		jl	loc_1002880D
		cmp	esi, 3
		jnz	loc_100284C9
		mov	esi, [esp+0A8h+var_94]
		mov	edx, [esp+0A8h+var_8C]
		mov	eax, [esp+0A8h+var_98]
		mov	ecx, [esp+0A8h+var_88]
		push	esi
		push	edx
		lea	edx, [eax+ecx-3]
		push	edx
		lea	eax, [esp+0B4h+var_44]
		push	eax
		call	sub_10027FB0
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, edi
		jl	loc_1002880D
		mov	eax, [esp+0A8h+var_90]
		cmp	eax, [esp+0A8h+var_98]
		ja	loc_100284C9
		and	eax, 3
		lea	ecx, [esp+0A8h+var_80]
		add	eax, eax
		push	ecx
		lea	edx, [esp+eax*8+0ACh+var_44]
		push	edx
		call	sub_10028E00
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		mov	[esp+0A8h+var_90], esi
		jmp	loc_100284C9
; ---------------------------------------------------------------------------

loc_10028425:				; CODE XREF: sub_100280A0+2EBj
		cmp	eax, 8
		jbe	short loc_10028460
		mov	ecx, [esp+0A8h+var_94]
		mov	edx, [esp+0A8h+var_8C]
		push	ecx
		shr	eax, 1
		add	eax, [esp+0ACh+var_88]
		push	edx
		push	eax
		lea	eax, [esp+0B4h+var_6C]
		push	eax
		call	sub_10028040
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, edi
		jl	loc_1002880D
		add	esi, esi
		lea	esi, [esp+esi*8+0A8h+var_44]
		push	esi
		lea	ecx, [esp+0ACh+var_6C]
		push	ecx
		jmp	short loc_100284A3
; ---------------------------------------------------------------------------

loc_10028460:				; CODE XREF: sub_100280A0+388j
		shr	eax, 1
		and	eax, 3
		cmp	eax, esi
		jnz	short loc_10028495
		lea	edx, [esp+0A8h+var_6C]
		add	eax, eax
		push	edx
		lea	eax, [esp+eax*8+0ACh+var_44]
		push	eax
		call	sub_10028E00
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		add	esi, esi
		lea	esi, [esp+esi*8+0A8h+var_44]
		push	esi
		lea	ecx, [esp+0ACh+var_6C]
		push	ecx
		jmp	short loc_100284A3
; ---------------------------------------------------------------------------

loc_10028495:				; CODE XREF: sub_100280A0+3C7j
		add	esi, esi
		lea	esi, [esp+esi*8+0A8h+var_44]
		add	eax, eax
		push	esi
		lea	edx, [esp+eax*8+0ACh+var_44]
		push	edx

loc_100284A3:				; CODE XREF: sub_100280A0+3BEj
					; sub_100280A0+3F3j
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		cmp	ebx, edi
		jl	loc_1002880D

loc_100284C9:				; CODE XREF: sub_100280A0+319j
					; sub_100280A0+355j ...
		mov	eax, [esp+0A8h+var_98]
		inc	eax
		mov	[esp+0A8h+var_98], eax
		cmp	eax, [esp+0A8h+var_94]
		jb	loc_10028380

loc_100284DC:				; CODE XREF: sub_100280A0+2D1j
		mov	eax, [esp+0A8h+arg_1C]
		lea	ecx, [eax+eax]
		mov	eax, [esp+0A8h+arg_18]
		sub	eax, ecx
		lea	edi, [esp+0A8h+var_80]
		lea	esi, [esp+0A8h+var_6C]
		mov	[esp+0A8h+var_98], eax
		js	loc_100287F6

loc_10028501:				; CODE XREF: sub_100280A0+750j
		mov	edx, [esp+0A8h+arg_1C]
		mov	eax, [esp+0A8h+var_98]
		mov	ecx, [esp+0A8h+var_70]
		push	edx
		push	eax
		push	ecx
		call	sub_10028C50
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	loc_1002880D
		mov	eax, [esp+0A8h+arg_1C]
		dec	eax
		mov	[esp+0A8h+var_90], ebx
		cmp	eax, 5		; switch 6 cases
		ja	loc_100287DF	; jumptable 1002853A default case
		jmp	ds:off_10028888[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10028541:				; CODE XREF: sub_100280A0+49Aj
					; DATA XREF: .text:off_10028888o
		test	ebx, ebx	; jumptable 1002853A case 0
		jnz	short loc_10028568
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	esi
		call	sub_100269C0
		add	esp, 8
		jmp	loc_100286CC
; ---------------------------------------------------------------------------

loc_10028568:				; CODE XREF: sub_100280A0+4A3j
		test	bl, 1
		jz	loc_100287DF	; jumptable 1002853A default case
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		mov	edx, [esp+0A8h+var_84]
		jmp	loc_100287CB
; ---------------------------------------------------------------------------

loc_100285A2:				; CODE XREF: sub_100280A0+49Aj
					; DATA XREF: .text:off_10028888o
		push	esi		; jumptable 1002853A case 5
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D

loc_100285F2:				; CODE XREF: sub_100280A0+49Aj
					; DATA XREF: .text:off_10028888o
		push	esi		; jumptable 1002853A case 3
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		mov	eax, [esp+0A8h+var_94]
		mov	ecx, [esp+0A8h+var_8C]
		mov	edx, [esp+0A8h+var_90]
		add	edx, [esp+0A8h+var_88]
		push	eax
		push	ecx
		push	edx
		lea	ecx, [esp+0B4h+var_54]
		push	ecx
		call	sub_10028040
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	esi
		lea	edx, [esp+0B0h+var_54]
		push	edx
		push	edi
		call	sub_10026A60
		add	esp, 10h

loc_100286CC:				; CODE XREF: sub_100280A0+4C3j
		mov	ebx, eax
		test	ebx, ebx
		js	loc_1002880D
		mov	eax, edi
		mov	edi, esi
		mov	esi, eax
		jmp	loc_100287E5
; ---------------------------------------------------------------------------

loc_100286E1:				; CODE XREF: sub_100280A0+49Aj
					; DATA XREF: .text:off_10028888o
		push	esi		; jumptable 1002853A case 4
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	edi
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002880D
		push	esi
		push	edi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_1002880D
		push	ebp
		push	esi
		call	sub_100269C0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_1002880D
		mov	eax, [esp+0A8h+var_94]
		mov	ecx, [esp+0A8h+var_8C]
		mov	edx, [esp+0A8h+var_90]
		add	edx, [esp+0A8h+var_88]
		push	eax
		push	ecx
		push	edx
		lea	ecx, [esp+0B4h+var_54]
		push	ecx
		call	sub_10028040
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_1002880D
		lea	edx, [esp+0A8h+var_54]

loc_100287CB:				; CODE XREF: sub_100280A0+4FDj
		push	ebp
		push	edi
		push	edx
		push	esi
		call	sub_10026A60
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		js	short loc_1002880D
		jmp	short loc_100287E5
; ---------------------------------------------------------------------------

loc_100287DF:				; CODE XREF: sub_100280A0+494j
					; sub_100280A0+49Aj ...
		call	ds:abort	; jumptable 1002853A default case
; ---------------------------------------------------------------------------

loc_100287E5:				; CODE XREF: sub_100280A0+63Cj
					; sub_100280A0+73Dj
		mov	eax, [esp+0A8h+arg_1C]
		sub	[esp+0A8h+var_98], eax
		jns	loc_10028501

loc_100287F6:				; CODE XREF: sub_100280A0+45Bj
		push	ebp
		push	edi
		call	sub_100269C0
		mov	ecx, [esp+0B0h+var_58]
		push	ecx
		push	edi
		mov	ebx, eax
		call	sub_1002A050
		add	esp, 10h

loc_1002880D:				; CODE XREF: sub_100280A0+9Cj
					; sub_100280A0+CCj ...
		lea	edx, [esp+0A8h+var_80]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0ACh+var_6C]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0B0h+var_44]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0B4h+var_34]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+0B8h+var_24]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+0BCh+var_14]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+0C0h+var_54]
		push	edx
		call	sub_10028EF0
		mov	eax, [esp+0C4h+Memory]
		push	eax		; Memory
		call	ds:free
		mov	ecx, [esp+0C8h+var_4]
		add	esp, 20h
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 98h
		retn
sub_100280A0	endp

; ---------------------------------------------------------------------------
		align 4
off_10028888	dd offset loc_10028541	; DATA XREF: sub_100280A0+49Ar
		dd offset loc_100287DF	; jump table for switch	statement
		dd offset loc_100287DF
		dd offset loc_100285F2
		dd offset loc_100286E1
		dd offset loc_100285A2

; =============== S U B	R O U T	I N E =======================================


sub_100288A0	proc near		; CODE XREF: sub_10015F50+29Ep
					; sub_100163F0+1DAp ...

var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 38h
		push	ebp
		mov	ebp, [esp+3Ch+arg_8]
		push	ebp
		call	sub_10028FE0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100288D2
		mov	eax, [esp+3Ch+arg_C]
		mov	ecx, [esp+3Ch+arg_4]
		mov	edx, [esp+3Ch+arg_0]
		push	eax
		push	ebp
		push	ecx
		push	edx
		call	sub_1002C4E0
		add	esp, 10h
		pop	ebp
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_100288D2:				; CODE XREF: sub_100288A0+13j
		push	ebx
		mov	ebx, [esp+40h+arg_0]
		push	esi
		push	edi
		xor	eax, eax
		push	ebp
		push	ebx
		mov	[esp+50h+var_28], eax
		mov	[esp+50h+var_18], eax
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	short loc_100288F5
		mov	edi, ebx
		jmp	short loc_10028927
; ---------------------------------------------------------------------------

loc_100288F5:				; CODE XREF: sub_100288A0+4Fj
		lea	eax, [esp+48h+var_24]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10028AEF
		lea	edi, [esp+48h+var_24]
		mov	ecx, edi
		push	ecx
		push	ebp
		push	ebx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10028AEF

loc_10028927:				; CODE XREF: sub_100288A0+53j
		mov	eax, [ebp+8]
		lea	edx, [eax+eax+2]
		mov	[esp+48h+var_38], eax
		push	edx
		lea	eax, [esp+4Ch+var_34]
		push	eax
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10028AEF
		mov	ecx, [ebp+0]
		mov	eax, [ebp+8]
		mov	edx, [ebp+4]
		mov	[esp+48h+var_14], ecx
		mov	ecx, [ebp+0Ch]
		mov	[esp+48h+var_10], edx
		mov	[esp+48h+var_C], eax
		mov	[esp+48h+var_8], ecx
		mov	eax, [ecx]
		push	eax
		call	sub_100290C0
		lea	ecx, [esp+4Ch+var_34]
		push	ecx
		neg	eax
		push	edi
		mov	[esp+54h+var_4], eax
		call	sub_10028E00
		add	esp, 0Ch
		test	eax, eax
		js	short loc_100289B3
		mov	edx, [esp+48h+var_C]
		push	edx
		lea	eax, [esp+4Ch+var_34]
		push	eax
		call	sub_10029230
		add	esp, 8
		test	eax, eax
		js	short loc_100289B3
		lea	ecx, [esp+48h+var_34]
		push	ecx
		push	0
		lea	edx, [esp+50h+var_14]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002BF60
		add	esp, 10h

loc_100289B3:				; CODE XREF: sub_100288A0+E4j
					; sub_100288A0+FAj
		mov	esi, eax
		test	eax, eax
		js	loc_10028AEF
		mov	ecx, [esp+48h+arg_4]
		push	ecx
		call	sub_10028CE0
		add	esp, 4
		cmp	dword_100490F0,	0
		mov	edi, eax
		jz	short loc_100289FC
		cmp	edi, 30Ch
		jbe	short loc_100289E4
		mov	esi, 6
		jmp	short loc_10028A27
; ---------------------------------------------------------------------------

loc_100289E4:				; CODE XREF: sub_100288A0+13Bj
		cmp	edi, 100h
		jbe	short loc_100289F3
		mov	esi, 5
		jmp	short loc_10028A27
; ---------------------------------------------------------------------------

loc_100289F3:				; CODE XREF: sub_100288A0+14Aj
		mov	edx, 14h
		cmp	edx, edi
		jmp	short loc_10028A21
; ---------------------------------------------------------------------------

loc_100289FC:				; CODE XREF: sub_100288A0+133j
		cmp	edi, 1E0h
		jbe	short loc_10028A0B
		mov	esi, 6
		jmp	short loc_10028A27
; ---------------------------------------------------------------------------

loc_10028A0B:				; CODE XREF: sub_100288A0+162j
		cmp	edi, 0A0h
		jbe	short loc_10028A1A
		mov	esi, 5
		jmp	short loc_10028A27
; ---------------------------------------------------------------------------

loc_10028A1A:				; CODE XREF: sub_100288A0+171j
		mov	eax, 14h
		cmp	eax, edi

loc_10028A21:				; CODE XREF: sub_100288A0+15Aj
		sbb	esi, esi
		and	esi, 3
		inc	esi

loc_10028A27:				; CODE XREF: sub_100288A0+142j
					; sub_100288A0+151j ...
		mov	eax, dword_1004B750
		test	eax, eax
		jnz	short loc_10028A48
		call	sub_1002DD00
		test	eax, eax
		jnz	short loc_10028AA7
		mov	dword_100490F0,	eax

loc_10028A3E:				; CODE XREF: sub_100288A0+20Aj
		mov	eax, 6

loc_10028A43:				; CODE XREF: sub_100288A0+216j
					; sub_100288A0+223j
		mov	dword_1004B750,	eax

loc_10028A48:				; CODE XREF: sub_100288A0+18Ej
		cmp	dword_100490F0,	0
		jz	short loc_10028A57
		cmp	esi, eax
		jbe	short loc_10028A57
		mov	esi, eax

loc_10028A57:				; CODE XREF: sub_100288A0+1AFj
					; sub_100288A0+1B3j
		xor	edx, edx
		mov	eax, edi
		div	esi
		lea	ecx, [esi-1]
		mov	ebx, 1
		shl	ebx, cl
		test	edx, edx
		jz	short loc_10028A71
		mov	ecx, esi
		sub	ecx, edx
		add	edi, ecx

loc_10028A71:				; CODE XREF: sub_100288A0+1C9j
		cmp	dword_100490F0,	0
		jz	short loc_10028AC8
		mov	eax, [esp+48h+var_38]
		mov	ecx, esi
		mov	edx, 1
		shl	edx, cl
		lea	ecx, [esp+48h+var_14]
		push	edx
		mov	edx, [esp+4Ch+arg_C]
		push	esi
		push	edi
		push	eax
		mov	eax, [esp+58h+arg_4]
		push	ecx
		push	edx
		push	ebp
		push	eax
		lea	ecx, [esp+68h+var_34]
		push	ecx
		call	sub_100280A0
		jmp	short loc_10028AEA
; ---------------------------------------------------------------------------

loc_10028AA7:				; CODE XREF: sub_100288A0+197j
		cmp	eax, 40h
		jnb	short loc_10028A3E
		cmp	eax, 20h
		jb	short loc_10028AB8
		mov	eax, 5
		jmp	short loc_10028A43
; ---------------------------------------------------------------------------

loc_10028AB8:				; CODE XREF: sub_100288A0+20Fj
		cmp	eax, 10h
		sbb	eax, eax
		and	eax, 0FFFFFFFDh
		add	eax, 4
		jmp	loc_10028A43
; ---------------------------------------------------------------------------

loc_10028AC8:				; CODE XREF: sub_100288A0+1D8j
		mov	edx, [esp+48h+var_38]
		mov	ecx, [esp+48h+arg_C]
		push	ebx
		push	esi
		push	edi
		push	edx
		mov	edx, [esp+58h+arg_4]
		lea	eax, [esp+58h+var_14]
		push	eax
		push	ecx
		push	ebp
		push	edx
		lea	eax, [esp+68h+var_34]
		push	eax
		call	sub_10026C60

loc_10028AEA:				; CODE XREF: sub_100288A0+205j
		mov	esi, eax
		add	esp, 24h

loc_10028AEF:				; CODE XREF: sub_100288A0+66j
					; sub_100288A0+81j ...
		lea	ecx, [esp+48h+var_34]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+4Ch+var_24]
		push	edx
		call	sub_10028EF0
		add	esp, 8
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 38h
		retn
sub_100288A0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10028B10	proc near		; CODE XREF: sub_10017CC0+324p
					; sub_10018220+2BDp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_10028B41
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_10028B41
		push	esi
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		jnz	short loc_10028B46
		mov	eax, [esp+4+arg_8]
		push	eax
		push	esi
		call	sub_10029570
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028B41:				; CODE XREF: sub_10028B10+7j
					; sub_10028B10+Fj
		mov	eax, 0FFFFFFFCh

loc_10028B46:				; CODE XREF: sub_10028B10+1Dj
		pop	esi
		retn
sub_10028B10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028B50	proc near		; CODE XREF: sub_1001A570+198p
					; sub_1001A570+272p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_10028B7F
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_10028B7F
		push	esi
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		jnz	short loc_10028B84
		mov	eax, [esp+4+arg_8]
		push	eax
		push	esi
		call	sub_100292D0
		add	esp, 8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028B7F:				; CODE XREF: sub_10028B50+7j
					; sub_10028B50+Fj
		mov	eax, 0FFFFFFFCh

loc_10028B84:				; CODE XREF: sub_10028B50+1Dj
		pop	esi
		retn
sub_10028B50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028B90	proc near		; CODE XREF: sub_1001A570+2AFp
					; sub_1001AE40+37Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_10028B9E
		lea	eax, [edi-4]
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10028B9E:				; CODE XREF: sub_10028B90+7j
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	esi
		mov	esi, ebx
		shr	esi, 5
		lea	eax, [esi+1]
		cmp	eax, [edi+8]
		jbe	short loc_10028BBF
		push	eax
		push	edi
		call	sub_100291A0
		add	esp, 8
		test	eax, eax
		jnz	short loc_10028C09

loc_10028BBF:				; CODE XREF: sub_10028B90+1Fj
		mov	ecx, ebx
		and	ecx, 1Fh
		mov	eax, 1
		shl	eax, cl
		cmp	[esp+0Ch+arg_8], 0
		jz	short loc_10028BDD
		mov	ecx, [edi+0Ch]
		or	[ecx+esi*4], eax
		lea	ecx, [ecx+esi*4]
		jmp	short loc_10028BE7
; ---------------------------------------------------------------------------

loc_10028BDD:				; CODE XREF: sub_10028B90+40j
		mov	edx, [edi+0Ch]
		lea	ecx, [edx+esi*4]
		not	eax
		and	[ecx], eax

loc_10028BE7:				; CODE XREF: sub_10028B90+4Bj
		mov	eax, [edi+8]
		cmp	eax, 1
		jbe	short loc_10028C04
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_10028BF6:				; CODE XREF: sub_10028B90+72j
		cmp	dword ptr [ecx], 0
		jnz	short loc_10028C04
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_10028BF6

loc_10028C04:				; CODE XREF: sub_10028B90+5Dj
					; sub_10028B90+69j
		mov	[edi+8], eax
		xor	eax, eax

loc_10028C09:				; CODE XREF: sub_10028B90+2Dj
		pop	esi
		pop	ebx
		pop	edi
		retn
sub_10028B90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028C10	proc near		; CODE XREF: sub_1002E7C0+4D8p
					; sub_1002E7C0+4FFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		test	edx, edx
		jnz	short loc_10028C1C
		lea	eax, [edx-4]
		retn
; ---------------------------------------------------------------------------

loc_10028C1C:				; CODE XREF: sub_10028C10+6j
		mov	ecx, [esp+arg_4]
		push	esi
		mov	esi, [edx+8]
		mov	eax, ecx
		dec	esi
		shr	eax, 5
		cmp	eax, esi
		pop	esi
		jbe	short loc_10028C35
		mov	eax, 0FFFFFFFDh
		retn
; ---------------------------------------------------------------------------

loc_10028C35:				; CODE XREF: sub_10028C10+1Dj
		mov	edx, [edx+0Ch]
		mov	eax, [edx+eax*4]
		and	ecx, 1Fh
		shr	eax, cl
		and	eax, 1
		retn
sub_10028C10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028C50	proc near		; CODE XREF: sub_10026C60+1F2p
					; sub_100280A0+C0p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		mov	eax, [ebp+0Ch]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	edx, edi
		shr	edx, 5
		lea	ebx, [eax+edx*4]
		mov	eax, 1
		shl	eax, cl
		mov	esi, edi
		and	esi, 1Fh
		dec	eax
		cmp	ecx, 20h
		jb	short loc_10028C87
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10028C87:				; CODE XREF: sub_10028C50+2Bj
		mov	ebp, [ebp+8]
		add	edi, 1Fh
		shr	edi, 5
		cmp	edi, ebp
		jbe	short loc_10028C9E
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFDh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10028C9E:				; CODE XREF: sub_10028C50+42j
		add	ecx, esi
		cmp	ecx, 20h
		jbe	short loc_10028CC5
		inc	edx
		cmp	edx, ebp
		jnb	short loc_10028CC5
		mov	edx, [ebx+4]
		mov	edi, [ebx]
		mov	ecx, 20h
		sub	ecx, esi
		shl	edx, cl
		mov	ecx, esi
		shr	edi, cl
		or	edx, edi
		pop	edi
		pop	esi
		pop	ebp
		and	eax, edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10028CC5:				; CODE XREF: sub_10028C50+53j
					; sub_10028C50+58j
		mov	edx, [ebx]
		mov	ecx, esi
		pop	edi
		shr	edx, cl
		pop	esi
		pop	ebp
		pop	ebx
		and	eax, edx
		retn
sub_10028C50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028CE0	proc near		; CODE XREF: sub_10017CC0+1FBp
					; sub_10017CC0+207p ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		test	ecx, ecx
		jnz	short loc_10028CEE
		lea	eax, [ecx-4]
		retn
; ---------------------------------------------------------------------------

loc_10028CEE:				; CODE XREF: sub_10028CE0+8j
		mov	edx, [ecx+8]
		test	edx, edx
		jle	short loc_10028D17
		mov	ecx, [ecx+0Ch]
		push	esi
		lea	esi, [ecx+edx*4]
		lea	esp, [esp+0]

loc_10028D00:				; CODE XREF: sub_10028CE0+2Dj
		mov	ecx, [esi-4]
		sub	esi, 4
		dec	edx
		test	ecx, ecx
		jnz	short loc_10028D11
		test	edx, edx
		jg	short loc_10028D00
		jmp	short loc_10028D16
; ---------------------------------------------------------------------------

loc_10028D11:				; CODE XREF: sub_10028CE0+29j
					; sub_10028CE0+34j
		inc	eax
		shr	ecx, 1
		jnz	short loc_10028D11

loc_10028D16:				; CODE XREF: sub_10028CE0+2Fj
		pop	esi

loc_10028D17:				; CODE XREF: sub_10028CE0+13j
		shl	edx, 5
		add	eax, edx
		jnz	short locret_10028D23
		mov	eax, 1

locret_10028D23:			; CODE XREF: sub_10028CE0+3Cj
		retn
sub_10028CE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028D30	proc near		; CODE XREF: sub_100262E0+7Fp
					; sub_10026C60+6Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_10028D85
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_10028D85
		mov	ecx, dword_10049218
		lea	eax, [ecx+eax-1]
		xor	edx, edx
		div	ecx
		push	esi
		push	4		; SizeOfElements
		mov	esi, eax
		imul	esi, ecx
		push	esi		; NumOfElements
		call	ds:calloc
		add	esp, 8
		mov	[edi+0Ch], eax
		test	eax, eax
		jnz	short loc_10028D70
		pop	esi
		mov	eax, 0FFFFFFFEh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10028D70:				; CODE XREF: sub_10028D30+36j
		mov	[edi+4], esi
		pop	esi
		mov	dword ptr [edi], 0
		mov	dword ptr [edi+8], 1
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10028D85:				; CODE XREF: sub_10028D30+7j
					; sub_10028D30+Fj
		mov	eax, 0FFFFFFFCh
		pop	edi
		retn
sub_10028D30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028D90	proc near		; CODE XREF: sub_10026C60+9Cp
					; sub_1002A260+34p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_10028DEE
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_10028DEE
		cmp	edi, esi
		jz	short loc_10028DE9
		mov	eax, [esi+4]
		push	4		; SizeOfElements
		push	eax		; NumOfElements
		call	ds:calloc
		add	esp, 8
		mov	[edi+0Ch], eax
		test	eax, eax
		jnz	short loc_10028DC4
		pop	edi
		mov	eax, 0FFFFFFFEh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028DC4:				; CODE XREF: sub_10028D90+2Aj
		mov	ecx, [esi+8]
		mov	edx, [esi+0Ch]
		add	ecx, ecx
		add	ecx, ecx
		push	ecx		; Size
		push	edx		; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esi+8]
		mov	[edi+8], eax
		mov	ecx, [esi+4]
		mov	[edi+4], ecx
		mov	edx, [esi]
		add	esp, 0Ch
		mov	[edi], edx

loc_10028DE9:				; CODE XREF: sub_10028D90+14j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028DEE:				; CODE XREF: sub_10028D90+8j
					; sub_10028D90+10j
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	esi
		retn
sub_10028D90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028E00	proc near		; CODE XREF: sub_10019790+64Bp
					; sub_10019EE0+2BCp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	loc_10028EE6
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	loc_10028EE6
		cmp	edi, esi
		jnz	short loc_10028E23
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028E23:				; CODE XREF: sub_10028E00+1Cj
		mov	eax, [esi+4]
		push	ebx
		push	ebp
		mov	ebp, [edi+8]
		cmp	eax, ebp
		jb	short loc_10028E6F
		mov	ecx, ebp
		sub	eax, ecx
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		mov	eax, [esi+0Ch]
		lea	ecx, [eax+ecx*4]
		push	0		; Val
		push	ecx		; Dst
		call	memset
		mov	edx, [edi+8]
		mov	eax, [edi+0Ch]
		mov	ecx, [esi+0Ch]
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		mov	ecx, [edi+8]
		add	esp, 18h
		pop	ebp
		mov	[esi+8], ecx
		mov	edx, [edi]
		pop	ebx
		pop	edi
		mov	[esi], edx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028E6F:				; CODE XREF: sub_10028E00+2Dj
		mov	edx, [edi+4]
		push	4		; SizeOfElements
		push	edx		; NumOfElements
		call	ds:calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_10028E8C
		pop	ebp
		lea	eax, [ebx-2]
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028E8C:				; CODE XREF: sub_10028E00+82j
		mov	ecx, [edi+0Ch]
		lea	eax, ds:0[ebp*4]
		push	eax		; Size
		push	ecx		; Src
		push	ebx		; Dst
		call	memcpy
		mov	eax, [esi+0Ch]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10028ECC
		mov	edx, [esi+4]
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esi+0Ch]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10028ECC
		push	eax		; Memory
		call	ds:free
		add	esp, 4

loc_10028ECC:				; CODE XREF: sub_10028E00+A6j
					; sub_10028E00+C0j
		mov	[esi+0Ch], ebx
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	ecx, [edi+8]
		pop	ebp
		mov	[esi+8], ecx
		mov	edx, [edi]
		pop	ebx
		pop	edi
		mov	[esi], edx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10028EE6:				; CODE XREF: sub_10028E00+8j
					; sub_10028E00+14j
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	esi
		retn
sub_10028E00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028EF0	proc near		; CODE XREF: sub_1000DA90+11p
					; sub_1000DA90+1Ap ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10028F39
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_10028F2B
		mov	ecx, [esi+4]
		add	ecx, ecx
		add	ecx, ecx
		push	ecx		; Size
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esi+0Ch]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10028F24
		push	eax		; Memory
		call	ds:free
		add	esp, 4

loc_10028F24:				; CODE XREF: sub_10028EF0+28j
		mov	dword ptr [esi+0Ch], 0

loc_10028F2B:				; CODE XREF: sub_10028EF0+Ej
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+4], 0

loc_10028F39:				; CODE XREF: sub_10028EF0+7j
		pop	esi
		retn
sub_10028EF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028F40	proc near		; CODE XREF: sub_1000DA20+29p
					; sub_1000DD80+4Cp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10028F6C
		mov	eax, [esi+4]
		mov	ecx, [esi+0Ch]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	0		; Val
		push	ecx		; Dst
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0

loc_10028F6C:				; CODE XREF: sub_10028F40+7j
		pop	esi
		retn
sub_10028F40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028F70	proc near		; CODE XREF: sub_10015F50+282p
					; sub_10017AC0+FAp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10028FA5
		mov	eax, [esi+4]
		mov	ecx, [esi+0Ch]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	0		; Val
		push	ecx		; Dst
		call	memset
		mov	edx, [esi+0Ch]
		mov	eax, [esp+10h+arg_4]
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		add	esp, 0Ch
		mov	[edx], eax

loc_10028FA5:				; CODE XREF: sub_10028F70+7j
		pop	esi
		retn
sub_10028F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028FB0	proc near		; CODE XREF: sub_10017CC0+1ADp
					; sub_10017CC0+2B9p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 1
		jnz	short loc_10028FBD
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10028FBD:				; CODE XREF: sub_10028FB0+7j
		cmp	dword ptr [eax+8], 1
		jnz	short loc_10028FCE
		mov	eax, [eax+0Ch]
		cmp	dword ptr [eax], 0
		jnz	short loc_10028FCE
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10028FCE:				; CODE XREF: sub_10028FB0+11j
					; sub_10028FB0+19j
		mov	eax, 1
		retn
sub_10028FB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10028FE0	proc near		; CODE XREF: sub_100288A0+9p
					; sub_10030BC0+421p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10028FE9
		retn
; ---------------------------------------------------------------------------

loc_10028FE9:				; CODE XREF: sub_10028FE0+6j
		mov	eax, [eax+0Ch]
		mov	eax, [eax]
		and	eax, 1
		retn
sub_10028FE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029000	proc near		; CODE XREF: sub_1002AA70+53p
					; sub_1002B820+F1p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_10029012
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_10029012:				; CODE XREF: sub_10029000+6j
		mov	eax, [eax+0Ch]
		mov	eax, [eax]
		and	eax, 1
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	eax, ecx
		retn
sub_10029000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029030	proc near		; CODE XREF: sub_100262E0+60p
					; sub_1002A6C0+C3p ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		xor	eax, eax
		test	edi, edi
		jz	short loc_100290AF
		mov	edx, [edi+0Ch]
		test	edx, edx
		jz	short loc_100290AF
		cmp	dword ptr [edi], 1
		jz	short loc_10029051
		cmp	dword ptr [edi+8], 1
		jnz	short loc_10029051
		cmp	[edx], eax
		jz	short loc_100290AF

loc_10029051:				; CODE XREF: sub_10029030+15j
					; sub_10029030+1Bj
		mov	ecx, [edx]
		push	esi
		xor	esi, esi
		test	ecx, ecx
		jnz	short loc_10029072
		mov	edi, [edi+8]
		lea	ecx, [ecx+0]

loc_10029060:				; CODE XREF: sub_10029030+40j
		cmp	esi, edi
		jnb	short loc_100290A6
		mov	ecx, [edx+4]
		add	edx, 4
		add	eax, 20h
		inc	esi
		test	ecx, ecx
		jz	short loc_10029060

loc_10029072:				; CODE XREF: sub_10029030+28j
					; sub_10029030+78j
		test	cx, cx
		jnz	short loc_1002907D
		shr	ecx, 10h
		add	eax, 10h

loc_1002907D:				; CODE XREF: sub_10029030+45j
		test	cl, cl
		jnz	short loc_10029087
		shr	ecx, 8
		add	eax, 8

loc_10029087:				; CODE XREF: sub_10029030+4Fj
		test	cl, 0Fh
		jnz	short loc_10029092
		shr	ecx, 4
		add	eax, 4

loc_10029092:				; CODE XREF: sub_10029030+5Aj
		test	cl, 3
		jnz	short loc_1002909D
		shr	ecx, 2
		add	eax, 2

loc_1002909D:				; CODE XREF: sub_10029030+65j
		test	cl, 1
		jnz	short loc_100290A3
		inc	eax

loc_100290A3:				; CODE XREF: sub_10029030+70j
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100290A6:				; CODE XREF: sub_10029030+32j
		test	ecx, ecx
		jnz	short loc_10029072
		pop	esi
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100290AF:				; CODE XREF: sub_10029030+9j
					; sub_10029030+10j ...
		xor	eax, eax
		pop	edi
		retn
sub_10029030	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100290C0	proc near		; CODE XREF: sub_100288A0+C9p
					; sub_10031F70+79p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, eax
		imul	edx, eax
		mov	ecx, 2
		sub	ecx, edx
		imul	ecx, eax
		push	esi
		mov	esi, ecx
		imul	esi, eax
		mov	edx, 2
		sub	edx, esi
		imul	edx, ecx
		mov	esi, edx
		imul	esi, eax
		mov	ecx, 2
		sub	ecx, esi
		imul	ecx, edx
		mov	edx, ecx
		imul	edx, eax
		mov	eax, 2
		sub	eax, edx
		imul	eax, ecx
		pop	esi
		retn
sub_100290C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029110	proc near		; CODE XREF: sub_100291A0+18p
					; sub_10029230+36p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		cmp	eax, [esi+4]
		jbe	short loc_1002918B
		mov	ecx, dword_10049218
		lea	eax, [ecx+eax-1]
		xor	edx, edx
		div	ecx
		push	4		; SizeOfElements
		mov	edi, eax
		imul	edi, ecx
		push	edi		; NumOfElements
		call	ds:calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_1002914C
		pop	edi
		pop	esi
		lea	eax, [ebx-2]
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002914C:				; CODE XREF: sub_10029110+33j
		mov	eax, [esi+8]
		mov	ecx, [esi+0Ch]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	ecx		; Src
		push	ebx		; Dst
		call	memcpy
		mov	edx, [esi+4]
		mov	eax, [esi+0Ch]
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esi+0Ch]
		add	esp, 18h
		test	eax, eax
		jz	short loc_10029185
		push	eax		; Memory
		call	ds:free
		add	esp, 4

loc_10029185:				; CODE XREF: sub_10029110+69j
		mov	[esi+0Ch], ebx
		mov	[esi+4], edi

loc_1002918B:				; CODE XREF: sub_10029110+Ej
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_10029110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100291A0	proc near		; CODE XREF: sub_100262E0+F9p
					; sub_100269C0+13p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+8]
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	edi, eax
		jbe	short loc_100291E4
		cmp	edi, [esi+4]
		jbe	short loc_100291C7
		push	edi
		push	esi
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jz	short loc_100291E1
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100291C7:				; CODE XREF: sub_100291A0+14j
		mov	edx, [esi+0Ch]
		mov	ecx, edi
		sub	ecx, eax
		add	ecx, ecx
		add	ecx, ecx
		push	ecx		; Size
		lea	eax, [edx+eax*4]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch

loc_100291E1:				; CODE XREF: sub_100291A0+22j
		mov	[esi+8], edi

loc_100291E4:				; CODE XREF: sub_100291A0+Fj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_100291A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100291F0	proc near		; CODE XREF: sub_1002A6C0+131p
					; sub_1002A6C0+13Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	edx, [eax]
		push	ebx
		mov	ebx, [eax+0Ch]
		push	ebp
		mov	ebp, [ecx]
		push	esi
		mov	esi, [eax+4]
		push	edi
		mov	edi, [eax+8]
		mov	[eax], ebp
		mov	ebp, [ecx+4]
		mov	[eax+4], ebp
		mov	ebp, [ecx+8]
		mov	[eax+8], ebp
		mov	ebp, [ecx+0Ch]
		mov	[eax+0Ch], ebp
		mov	[ecx], edx
		mov	[ecx+4], esi
		mov	[ecx+8], edi
		pop	edi
		pop	esi
		pop	ebp
		mov	[ecx+0Ch], ebx
		pop	ebx
		retn
sub_100291F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029230	proc near		; CODE XREF: sub_10026C20+21p
					; sub_10026C60+18Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		test	ebx, ebx
		jnz	short loc_1002923D
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002923D:				; CODE XREF: sub_10029230+7j
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	eax, [esi+8]
		cmp	eax, 1
		jnz	short loc_10029257
		mov	ecx, [esi+0Ch]
		cmp	dword ptr [ecx], 0
		jnz	short loc_10029257
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029257:				; CODE XREF: sub_10029230+18j
					; sub_10029230+20j
		push	edi
		lea	edi, [eax+ebx]
		cmp	edi, eax
		jbe	short loc_10029291
		cmp	edi, [esi+4]
		jbe	short loc_10029274
		push	edi
		push	esi
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jnz	short loc_100292C6
		jmp	short loc_1002928E
; ---------------------------------------------------------------------------

loc_10029274:				; CODE XREF: sub_10029230+32j
		mov	ecx, [esi+0Ch]
		mov	edx, edi
		sub	edx, eax
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		lea	edx, [ecx+eax*4]
		push	0		; Val
		push	edx		; Dst
		call	memset
		add	esp, 0Ch

loc_1002928E:				; CODE XREF: sub_10029230+42j
		mov	[esi+8], edi

loc_10029291:				; CODE XREF: sub_10029230+2Dj
		mov	eax, [esi+8]
		sub	eax, ebx
		dec	eax
		js	short loc_100292AF
		lea	edx, [eax+ebx]
		add	edx, edx
		add	edx, edx

loc_100292A0:				; CODE XREF: sub_10029230+7Dj
		mov	ecx, [esi+0Ch]
		mov	edi, [ecx+eax*4]
		mov	[edx+ecx], edi
		sub	edx, 4
		dec	eax
		jns	short loc_100292A0

loc_100292AF:				; CODE XREF: sub_10029230+67j
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_100292C4

loc_100292B5:				; CODE XREF: sub_10029230+92j
		mov	ecx, [esi+0Ch]
		mov	dword ptr [ecx+eax*4], 0
		inc	eax
		cmp	eax, ebx
		jb	short loc_100292B5

loc_100292C4:				; CODE XREF: sub_10029230+83j
		xor	eax, eax

loc_100292C6:				; CODE XREF: sub_10029230+40j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10029230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100292D0	proc near		; CODE XREF: sub_10028B50+25p
					; sub_10029610+27p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		test	ebx, ebx
		jnz	short loc_100292E0
		lea	eax, [ebx-4]
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100292E0:				; CODE XREF: sub_100292D0+8j
		mov	eax, [esp+8+arg_4]
		mov	ecx, [ebx+0Ch]
		push	ebp
		push	esi
		push	edi
		mov	edi, eax
		and	eax, 1Fh
		mov	ebp, eax
		mov	eax, [ebx+8]
		or	esi, 0FFFFFFFFh
		lea	edx, [ecx+eax*4]
		mov	ecx, 20h
		sub	ecx, ebp
		shl	esi, cl
		shr	edi, 5
		mov	[esp+14h+arg_0], ebp
		mov	[esp+14h+var_4], ecx
		and	esi, [edx-4]
		neg	esi
		sbb	esi, esi
		neg	esi
		add	esi, eax
		add	esi, edi
		cmp	esi, eax
		jbe	short loc_1002934F
		cmp	esi, [ebx+4]
		jbe	short loc_10029338
		push	esi
		push	ebx
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jnz	loc_100293B7
		jmp	short loc_1002934C
; ---------------------------------------------------------------------------

loc_10029338:				; CODE XREF: sub_100292D0+52j
		mov	ecx, esi
		sub	ecx, eax
		add	ecx, ecx
		add	ecx, ecx
		push	ecx		; Size
		push	0		; Val
		push	edx		; Dst
		call	memset
		add	esp, 0Ch

loc_1002934C:				; CODE XREF: sub_100292D0+66j
		mov	[ebx+8], esi

loc_1002934F:				; CODE XREF: sub_100292D0+4Dj
		test	edi, edi
		jz	short loc_10029361
		push	edi
		push	ebx
		call	sub_10029230
		add	esp, 8
		test	eax, eax
		jnz	short loc_100293B7

loc_10029361:				; CODE XREF: sub_100292D0+81j
		test	ebp, ebp
		jz	short loc_10029395
		mov	eax, [ebx+0Ch]
		mov	edx, [ebx+8]
		lea	ebp, [eax+edx*4]
		lea	edx, [eax+edi*4]
		xor	esi, esi
		cmp	edx, ebp
		jnb	short loc_10029395

loc_10029377:				; CODE XREF: sub_100292D0+C3j
		mov	eax, [edx]
		mov	ecx, [esp+14h+arg_0]
		mov	edi, eax
		shl	edi, cl
		mov	ecx, [esp+14h+var_4]
		shr	eax, cl
		add	edx, 4
		or	edi, esi
		mov	[edx-4], edi
		mov	esi, eax
		cmp	edx, ebp
		jb	short loc_10029377

loc_10029395:				; CODE XREF: sub_100292D0+93j
					; sub_100292D0+A5j
		mov	eax, [ebx+8]
		cmp	eax, 1
		jbe	short loc_100293B2
		mov	ecx, [ebx+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_100293A4:				; CODE XREF: sub_100292D0+E0j
		cmp	dword ptr [ecx], 0
		jnz	short loc_100293B2
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_100293A4

loc_100293B2:				; CODE XREF: sub_100292D0+CBj
					; sub_100292D0+D7j
		mov	[ebx+8], eax
		xor	eax, eax

loc_100293B7:				; CODE XREF: sub_100292D0+60j
					; sub_100292D0+8Fj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_100292D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100293C0	proc near		; CODE XREF: sub_100269C0+79p
					; sub_10026A60+189p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short locret_10029420
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	edx, [esi+8]
		cmp	ecx, edx
		jb	short loc_100293F9
		mov	eax, [esi+4]
		mov	ecx, [esi+0Ch]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	0		; Val
		push	ecx		; Dst
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100293F9:				; CODE XREF: sub_100293C0+12j
		sub	edx, ecx
		push	edi
		mov	edi, [esi+0Ch]
		lea	eax, [edi+ecx*4]
		jz	short loc_10029413
		push	ebx

loc_10029405:				; CODE XREF: sub_100293C0+50j
		mov	ebx, [eax]
		mov	[edi], ebx
		add	edi, 4
		add	eax, 4
		dec	edx
		jnz	short loc_10029405
		pop	ebx

loc_10029413:				; CODE XREF: sub_100293C0+42j
		sub	[esi+8], ecx
		test	ecx, ecx
		jz	short loc_1002941E
		xor	eax, eax
		rep stosd

loc_1002941E:				; CODE XREF: sub_100293C0+58j
		pop	edi
		pop	esi

locret_10029420:			; CODE XREF: sub_100293C0+6j
		retn
sub_100293C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029430	proc near		; CODE XREF: sub_1002A0A0+20p
					; sub_1002A440+E7p ...

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	ecx, [esi+0Ch]
		push	edi
		mov	edi, [esi+8]
		xor	ebx, ebx
		mov	[esp+10h+arg_0], edi
		test	edi, edi
		jle	loc_100294E9
		mov	edx, edi
		mov	edi, edi

loc_10029450:				; CODE XREF: sub_10029430+32j
		mov	eax, [ecx]
		lea	ebp, [eax+eax]
		or	ebp, ebx
		mov	[ecx], ebp
		shr	eax, 1Fh
		add	ecx, 4
		dec	edx
		mov	ebx, eax
		jnz	short loc_10029450
		test	ebx, ebx
		jz	loc_100294E9
		mov	ecx, [esi+4]
		cmp	edi, ecx
		jb	short loc_100294E0
		lea	eax, [ecx+1]
		cmp	eax, ecx
		jbe	short loc_100294E0
		mov	ecx, dword_10049218
		lea	eax, [ecx+eax-1]
		div	ecx
		push	4		; SizeOfElements
		mov	edi, eax
		imul	edi, ecx
		push	edi		; NumOfElements
		call	ds:calloc
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	short loc_100294F0
		mov	eax, [esi+8]
		mov	ecx, [esi+0Ch]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	ecx		; Src
		push	ebp		; Dst
		call	memcpy
		mov	edx, [esi+4]
		mov	eax, [esi+0Ch]
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esi+0Ch]
		add	esp, 18h
		test	eax, eax
		jz	short loc_100294D6
		push	eax		; Memory
		call	ds:free
		add	esp, 4

loc_100294D6:				; CODE XREF: sub_10029430+9Aj
		mov	[esi+4], edi
		mov	edi, [esp+10h+arg_0]
		mov	[esi+0Ch], ebp

loc_100294E0:				; CODE XREF: sub_10029430+41j
					; sub_10029430+48j
		mov	ecx, [esi+0Ch]
		mov	[ecx+edi*4], ebx
		inc	dword ptr [esi+8]

loc_100294E9:				; CODE XREF: sub_10029430+16j
					; sub_10029430+36j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100294F0:				; CODE XREF: sub_10029430+6Bj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFEh
		pop	ebx
		retn
sub_10029430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029500	proc near		; CODE XREF: sub_1002A5C0+54p
					; sub_1002AB80+EDp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	edx, [esp+arg_0]
		mov	eax, ecx
		shr	eax, 5
		cmp	eax, [edx+8]
		jnb	short locret_10029561
		push	esi
		mov	esi, [edx+0Ch]
		push	edi
		and	ecx, 1Fh
		mov	edi, 1
		shl	edi, cl
		lea	esi, [esi+eax*4]
		inc	eax
		dec	edi
		and	[esi], edi
		pop	edi
		pop	esi
		cmp	eax, [edx+8]
		jnb	short loc_10029540
		nop

loc_10029530:				; CODE XREF: sub_10029500+3Ej
		mov	ecx, [edx+0Ch]
		mov	dword ptr [ecx+eax*4], 0
		inc	eax
		cmp	eax, [edx+8]
		jb	short loc_10029530

loc_10029540:				; CODE XREF: sub_10029500+2Dj
		mov	eax, [edx+8]
		cmp	eax, 1
		jbe	short loc_1002955E
		mov	ecx, [edx+0Ch]
		lea	ecx, [ecx+eax*4-4]
		nop

loc_10029550:				; CODE XREF: sub_10029500+5Cj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002955E
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_10029550

loc_1002955E:				; CODE XREF: sub_10029500+46j
					; sub_10029500+53j
		mov	[edx+8], eax

locret_10029561:			; CODE XREF: sub_10029500+10j
		retn
sub_10029500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029570	proc near		; CODE XREF: sub_10028B10+25p
					; sub_1002A5C0+46p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	eax, edi
		shr	eax, 5
		push	eax
		push	esi
		call	sub_100293C0
		add	esp, 8
		and	edi, 1Fh
		mov	[esp+0Ch+arg_4], edi
		jz	short loc_100295DE
		push	ebx
		mov	ecx, edi
		mov	edi, [esi+8]
		mov	ebx, 1
		shl	ebx, cl
		push	ebp
		xor	ebp, ebp
		dec	ebx
		dec	edi
		js	short loc_100295DC
		mov	ecx, 20h
		sub	ecx, [esp+14h+arg_4]
		mov	[esp+14h+var_4], ecx
		jmp	short loc_100295BA
; ---------------------------------------------------------------------------

loc_100295B6:				; CODE XREF: sub_10029570+6Aj
		mov	ecx, [esp+14h+var_4]

loc_100295BA:				; CODE XREF: sub_10029570+44j
		mov	edx, [esi+0Ch]
		mov	eax, [edx+edi*4]
		lea	esi, [edx+edi*4]
		shl	ebp, cl
		mov	ecx, [esp+14h+arg_4]
		mov	edx, eax
		shr	eax, cl
		and	edx, ebx
		or	ebp, eax
		dec	edi
		mov	[esi], ebp
		mov	esi, [esp+14h+arg_0]
		mov	ebp, edx
		jns	short loc_100295B6

loc_100295DC:				; CODE XREF: sub_10029570+35j
		pop	ebp
		pop	ebx

loc_100295DE:				; CODE XREF: sub_10029570+21j
		mov	eax, [esi+8]
		cmp	eax, 1
		jbe	short loc_100295FE
		mov	ecx, [esi+0Ch]
		lea	ecx, [ecx+eax*4-4]
		lea	ecx, [ecx+0]

loc_100295F0:				; CODE XREF: sub_10029570+8Cj
		cmp	dword ptr [ecx], 0
		jnz	short loc_100295FE
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_100295F0

loc_100295FE:				; CODE XREF: sub_10029570+74j
					; sub_10029570+83j
		pop	edi
		mov	[esi+8], eax
		pop	esi
		pop	ecx
		retn
sub_10029570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029610	proc near		; CODE XREF: sub_1002BC60+A6p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	ecx, [edi+8]
		mov	edx, [edi+0Ch]
		mov	ecx, [edx+ecx*4-4]
		xor	eax, eax
		xor	esi, esi
		test	ecx, ecx
		js	short loc_10029651

loc_10029628:				; CODE XREF: sub_10029610+1Bj
		inc	esi
		add	ecx, ecx
		jns	short loc_10029628
		test	esi, esi
		jz	short loc_10029651
		mov	eax, [esp+8+arg_0]
		push	esi
		push	eax
		call	sub_100292D0
		add	esp, 8
		test	eax, eax
		js	short loc_10029657
		push	esi
		push	edi
		call	sub_100292D0
		add	esp, 8
		test	eax, eax
		js	short loc_10029657

loc_10029651:				; CODE XREF: sub_10029610+16j
					; sub_10029610+1Fj
		mov	ecx, [esp+8+arg_8]
		mov	[ecx], esi

loc_10029657:				; CODE XREF: sub_10029610+31j
					; sub_10029610+3Fj
		pop	edi
		pop	esi
		retn
sub_10029610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029660	proc near		; CODE XREF: sub_1002B360+47p
					; sub_1002B460+48p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_4]
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ecx, [edi+0Ch]
		mov	edx, [ecx]
		mov	ebp, [edi+8]
		add	edx, esi
		xor	eax, eax
		mov	[ecx], edx
		add	ecx, 4
		cmp	edx, esi
		sbb	esi, esi
		neg	esi
		jz	short loc_100296C8
		push	ebx

loc_10029685:				; CODE XREF: sub_10029660+3Ej
		dec	ebp
		test	ebp, ebp
		jle	short loc_100296A5
		mov	edx, [ecx]
		add	edx, esi
		xor	ebx, ebx
		mov	[ecx], edx
		add	ecx, 4
		test	edx, edx
		setz	bl
		mov	esi, ebx
		test	esi, esi
		jnz	short loc_10029685
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100296A5:				; CODE XREF: sub_10029660+28j
		test	esi, esi
		jz	short loc_100296C7
		test	ebp, ebp
		jnz	short loc_100296C7
		mov	ebx, [edi+8]
		lea	eax, [ebx+1]
		push	eax
		push	edi
		call	sub_100291A0
		add	esp, 8
		test	eax, eax
		js	short loc_100296C7
		mov	ecx, [edi+0Ch]
		mov	[ecx+ebx*4], esi

loc_100296C7:				; CODE XREF: sub_10029660+47j
					; sub_10029660+4Bj ...
		pop	ebx

loc_100296C8:				; CODE XREF: sub_10029660+22j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10029660	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100296D0	proc near		; CODE XREF: sub_1002B360+6Ap
					; sub_1002B460+80p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+0Ch]
		mov	edx, [eax]
		mov	ebx, [edi+8]
		mov	ecx, edx
		sub	ecx, [esp+8+arg_4]
		add	eax, 4
		mov	[eax-4], ecx
		cmp	edx, ecx
		sbb	edx, edx
		neg	edx
		jz	short loc_1002970A
		push	esi

loc_100296F3:				; CODE XREF: sub_100296D0+37j
		dec	ebx
		jz	short loc_10029709
		mov	esi, [eax]
		mov	ecx, esi
		sub	ecx, edx
		mov	[eax], ecx
		add	eax, 4
		cmp	esi, ecx
		sbb	edx, edx
		neg	edx
		jnz	short loc_100296F3

loc_10029709:				; CODE XREF: sub_100296D0+24j
		pop	esi

loc_1002970A:				; CODE XREF: sub_100296D0+20j
		mov	eax, [edi+8]
		cmp	eax, 1
		jbe	short loc_1002972E
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+eax*4-4]
		lea	esp, [esp+0]

loc_10029720:				; CODE XREF: sub_100296D0+5Cj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002972E
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_10029720

loc_1002972E:				; CODE XREF: sub_100296D0+40j
					; sub_100296D0+53j
		mov	[edi+8], eax
		test	edx, edx
		jz	short loc_10029741
		test	ebx, ebx
		jnz	short loc_10029741
		pop	edi
		mov	eax, 0FFFFFFFDh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029741:				; CODE XREF: sub_100296D0+63j
					; sub_100296D0+67j
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
sub_100296D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029750	proc near		; CODE XREF: sub_10033600+158p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		mov	eax, [ebp+8]
		push	esi
		push	edi
		mov	edi, [ebx+8]
		xor	esi, esi
		cmp	edi, eax
		jbe	short loc_1002979E
		cmp	edi, [ebp+4]
		jbe	short loc_10029781
		push	edi
		push	ebp
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jnz	loc_1002985F
		jmp	short loc_1002979B
; ---------------------------------------------------------------------------

loc_10029781:				; CODE XREF: sub_10029750+1Bj
		mov	edx, [ebp+0Ch]
		mov	ecx, edi
		sub	ecx, eax
		add	ecx, ecx
		add	ecx, ecx
		push	ecx		; Size
		lea	eax, [edx+eax*4]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch

loc_1002979B:				; CODE XREF: sub_10029750+2Fj
		mov	[ebp+8], edi

loc_1002979E:				; CODE XREF: sub_10029750+16j
		mov	eax, [ebx+8]
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebx+0Ch]
		xor	edx, edx
		test	eax, eax
		jz	short loc_100297D8
		mov	ebx, eax
		mov	[esp+10h+arg_0], eax

loc_100297B3:				; CODE XREF: sub_10029750+82j
		mov	edx, [ecx]
		mov	eax, [edi]
		add	eax, edx
		add	edi, 4
		cmp	eax, edx
		sbb	edx, edx
		add	eax, esi
		neg	edx
		mov	[ecx], eax
		add	ecx, 4
		cmp	eax, esi
		sbb	esi, esi
		neg	esi
		add	esi, edx
		dec	ebx
		jnz	short loc_100297B3
		mov	edx, [esp+10h+arg_0]

loc_100297D8:				; CODE XREF: sub_10029750+5Bj
		mov	ebx, [ebp+8]
		mov	[esp+10h+arg_0], ebx
		test	esi, esi
		jz	short loc_1002985D
		jmp	short loc_100297E9
; ---------------------------------------------------------------------------

loc_100297E5:				; CODE XREF: sub_10029750+B2j
		mov	ebx, [esp+10h+arg_0]

loc_100297E9:				; CODE XREF: sub_10029750+93j
		cmp	edx, ebx
		jnb	short loc_1002980B
		mov	eax, [ecx]
		add	eax, esi
		xor	ebx, ebx
		mov	[ecx], eax
		add	ecx, 4
		test	eax, eax
		setz	bl
		inc	edx
		mov	esi, ebx
		test	esi, esi
		jnz	short loc_100297E5
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002980B:				; CODE XREF: sub_10029750+9Bj
		test	esi, esi
		jz	short loc_1002985D
		mov	eax, [ebp+8]
		lea	edi, [ebx+1]
		cmp	edi, eax
		jbe	short loc_10029857
		cmp	edi, [ebp+4]
		jbe	short loc_1002983A
		push	edi
		push	ebp
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002985F
		mov	ecx, [ebp+0Ch]
		mov	[ebp+8], edi
		pop	edi
		mov	[ecx+ebx*4], esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002983A:				; CODE XREF: sub_10029750+CCj
		mov	edx, [ebp+0Ch]
		mov	ecx, edi
		sub	ecx, eax
		add	ecx, ecx
		add	ecx, ecx
		push	ecx		; Size
		lea	eax, [edx+eax*4]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		mov	[ebp+8], edi

loc_10029857:				; CODE XREF: sub_10029750+C7j
		mov	ecx, [ebp+0Ch]
		mov	[ecx+ebx*4], esi

loc_1002985D:				; CODE XREF: sub_10029750+91j
					; sub_10029750+BDj
		xor	eax, eax

loc_1002985F:				; CODE XREF: sub_10029750+29j
					; sub_10029750+DAj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10029750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029870	proc near		; CODE XREF: sub_1002A130+24p
					; sub_1002A1A0+43p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		mov	eax, [edx]
		push	ebp
		mov	ebp, [esp+4+arg_8]
		mov	[ebp+0], eax
		mov	ecx, [edx+8]
		mov	eax, [esp+4+arg_4]
		push	esi
		xor	esi, esi
		push	edi
		cmp	ecx, [eax+8]
		jnb	short loc_1002989C
		mov	[esp+0Ch+arg_4], edx
		mov	[esp+0Ch+arg_0], eax
		mov	edx, eax
		mov	eax, [esp+0Ch+arg_4]

loc_1002989C:				; CODE XREF: sub_10029870+1Cj
		mov	edi, [edx+8]
		mov	ecx, [ebp+8]
		cmp	edi, ecx
		jbe	short loc_100298E4
		cmp	edi, [ebp+4]
		jbe	short loc_100298BF
		push	edi
		push	ebp
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jnz	loc_100299A2
		jmp	short loc_100298D9
; ---------------------------------------------------------------------------

loc_100298BF:				; CODE XREF: sub_10029870+39j
		mov	eax, [ebp+0Ch]
		mov	edx, edi
		sub	edx, ecx
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		lea	ecx, [eax+ecx*4]
		push	0		; Val
		push	ecx		; Dst
		call	memset
		add	esp, 0Ch

loc_100298D9:				; CODE XREF: sub_10029870+4Dj
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [esp+0Ch+arg_4]
		mov	[ebp+8], edi

loc_100298E4:				; CODE XREF: sub_10029870+34j
		mov	ecx, [edx+0Ch]
		mov	edi, [ebp+0Ch]
		push	ebx
		mov	ebx, [eax+0Ch]
		mov	eax, [eax+8]
		mov	[esp+10h+arg_4], eax
		mov	[esp+10h+arg_8], esi
		test	eax, eax
		jz	short loc_10029930
		mov	[esp+10h+arg_4], eax
		mov	[esp+10h+arg_8], eax

loc_10029905:				; CODE XREF: sub_10029870+BAj
		mov	edx, [ecx]
		mov	eax, [ebx]
		add	eax, edx
		add	ecx, 4
		add	ebx, 4
		cmp	eax, edx
		sbb	edx, edx
		add	eax, esi
		neg	edx
		mov	[edi], eax
		add	edi, 4
		cmp	eax, esi
		sbb	esi, esi
		neg	esi
		add	esi, edx
		dec	[esp+10h+arg_4]
		jnz	short loc_10029905
		mov	edx, [esp+10h+arg_0]

loc_10029930:				; CODE XREF: sub_10029870+8Bj
		mov	ebx, [edx+8]
		mov	eax, [esp+10h+arg_8]
		cmp	eax, ebx
		jnb	short loc_10029954
		mov	edx, ebx
		sub	edi, ecx
		sub	edx, eax

loc_10029941:				; CODE XREF: sub_10029870+E2j
		mov	eax, [ecx]
		add	eax, esi
		mov	[edi+ecx], eax
		add	ecx, 4
		cmp	eax, esi
		sbb	esi, esi
		neg	esi
		dec	edx
		jnz	short loc_10029941

loc_10029954:				; CODE XREF: sub_10029870+C9j
		test	esi, esi
		jz	short loc_1002999C
		mov	eax, [ebp+8]
		lea	edi, [ebx+1]
		cmp	edi, eax
		jbe	short loc_10029994
		cmp	edi, [ebp+4]
		jbe	short loc_10029977
		push	edi
		push	ebp
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jnz	short loc_100299A1
		jmp	short loc_10029991
; ---------------------------------------------------------------------------

loc_10029977:				; CODE XREF: sub_10029870+F5j
		mov	edx, [ebp+0Ch]
		mov	ecx, edi
		sub	ecx, eax
		add	ecx, ecx
		add	ecx, ecx
		push	ecx		; Size
		lea	eax, [edx+eax*4]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch

loc_10029991:				; CODE XREF: sub_10029870+105j
		mov	[ebp+8], edi

loc_10029994:				; CODE XREF: sub_10029870+F0j
		mov	ecx, [ebp+0Ch]
		mov	[ecx+ebx*4], esi
		mov	ebx, edi

loc_1002999C:				; CODE XREF: sub_10029870+E6j
		mov	[ebp+8], ebx
		xor	eax, eax

loc_100299A1:				; CODE XREF: sub_10029870+103j
		pop	ebx

loc_100299A2:				; CODE XREF: sub_10029870+47j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10029870	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100299B0	proc near		; CODE XREF: sub_100269C0+8Ep
					; sub_10026A60+19Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		mov	edx, [ebp+0Ch]
		push	esi
		mov	esi, [ecx+0Ch]
		mov	ecx, [ecx+8]
		lea	ebx, [esi+ecx*4]
		xor	eax, eax
		push	edi
		cmp	esi, ebx
		jnb	short loc_100299F5
		mov	edi, edi

loc_100299D0:				; CODE XREF: sub_100299B0+43j
		mov	edi, [edx]
		mov	ecx, edi
		sub	ecx, [esi]
		add	esi, 4
		cmp	edi, ecx
		sbb	edi, edi
		neg	edi
		test	eax, eax
		jz	short loc_100299EA
		dec	ecx
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_100299EA
		inc	edi

loc_100299EA:				; CODE XREF: sub_100299B0+31j
					; sub_100299B0+37j
		mov	[edx], ecx
		add	edx, 4
		mov	eax, edi
		cmp	esi, ebx
		jb	short loc_100299D0

loc_100299F5:				; CODE XREF: sub_100299B0+1Cj
		mov	ecx, [ebp+8]
		mov	esi, [ebp+0Ch]
		lea	edi, [esi+ecx*4]
		test	eax, eax
		jz	short loc_10029A19

loc_10029A02:				; CODE XREF: sub_100299B0+67j
		cmp	edx, edi
		jnb	short loc_10029A19
		mov	esi, [edx]
		mov	ecx, esi
		sub	ecx, eax
		mov	[edx], ecx
		add	edx, 4
		cmp	esi, ecx
		sbb	eax, eax
		neg	eax
		jnz	short loc_10029A02

loc_10029A19:				; CODE XREF: sub_100299B0+50j
					; sub_100299B0+54j
		mov	ecx, [ebp+8]
		cmp	ecx, 1
		jbe	short loc_10029A36
		mov	edx, [ebp+0Ch]
		lea	edx, [edx+ecx*4-4]

loc_10029A28:				; CODE XREF: sub_100299B0+84j
		cmp	dword ptr [edx], 0
		jnz	short loc_10029A36
		dec	ecx
		sub	edx, 4
		cmp	ecx, 1
		ja	short loc_10029A28

loc_10029A36:				; CODE XREF: sub_100299B0+6Fj
					; sub_100299B0+7Bj
		pop	edi
		neg	eax
		pop	esi
		mov	[ebp+8], ecx
		sbb	eax, eax
		pop	ebp
		and	eax, 0FFFFFFFDh
		pop	ebx
		retn
sub_100299B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029A50	proc near		; CODE XREF: sub_1002A130:loc_1002A170p
					; sub_1002A1A0+72p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		mov	edx, [esp+4+arg_0]
		mov	eax, [edx]
		mov	ecx, [esp+4+arg_8]
		push	esi
		mov	[ecx], eax
		mov	esi, [edx+8]
		mov	eax, [ecx+8]
		push	edi
		xor	edi, edi
		cmp	esi, eax
		jbe	short loc_10029AAB
		cmp	esi, [ecx+4]
		jbe	short loc_10029A84
		push	esi
		push	ecx
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jnz	loc_10029B60
		jmp	short loc_10029A9E
; ---------------------------------------------------------------------------

loc_10029A84:				; CODE XREF: sub_10029A50+1Ej
		mov	ecx, [ecx+0Ch]
		mov	edx, esi
		sub	edx, eax
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		lea	edx, [ecx+eax*4]
		push	0		; Val
		push	edx		; Dst
		call	memset
		add	esp, 0Ch

loc_10029A9E:				; CODE XREF: sub_10029A50+32j
		mov	eax, [esp+0Ch+arg_8]
		mov	edx, [esp+0Ch+arg_0]
		mov	[eax+8], esi
		mov	ecx, eax

loc_10029AAB:				; CODE XREF: sub_10029A50+19j
		mov	eax, [esp+0Ch+arg_4]
		mov	edx, [edx+0Ch]
		mov	esi, [ecx+0Ch]
		push	ebx
		mov	ebx, [eax+0Ch]
		mov	eax, [eax+8]
		push	ebp
		xor	ebp, ebp
		test	eax, eax
		jle	short loc_10029AFE
		mov	[esp+14h+var_4], eax
		mov	ebp, eax
		lea	esp, [esp+0]

loc_10029AD0:				; CODE XREF: sub_10029A50+A8j
		mov	ecx, [edx]
		mov	eax, ecx
		sub	eax, [ebx]
		add	edx, 4
		add	ebx, 4
		cmp	ecx, eax
		sbb	ecx, ecx
		neg	ecx
		test	edi, edi
		jz	short loc_10029AED
		dec	eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10029AED
		inc	ecx

loc_10029AED:				; CODE XREF: sub_10029A50+94j
					; sub_10029A50+9Aj
		mov	[esi], eax
		add	esi, 4
		dec	[esp+14h+var_4]
		mov	edi, ecx
		jnz	short loc_10029AD0
		mov	ecx, [esp+14h+arg_8]

loc_10029AFE:				; CODE XREF: sub_10029A50+71j
		mov	eax, [esp+14h+arg_0]
		mov	ebx, [eax+8]
		cmp	ebp, ebx
		jge	short loc_10029B2B
		sub	ebx, ebp
		add	ebp, ebx
		lea	ecx, [ecx+0]

loc_10029B10:				; CODE XREF: sub_10029A50+D5j
		mov	ecx, [edx]
		mov	eax, ecx
		sub	eax, edi
		add	edx, 4
		mov	[esi], eax
		add	esi, 4
		cmp	ecx, eax
		sbb	edi, edi
		neg	edi
		dec	ebx
		jnz	short loc_10029B10
		mov	ecx, [esp+14h+arg_8]

loc_10029B2B:				; CODE XREF: sub_10029A50+B7j
		mov	[ecx+8], ebp
		mov	eax, ebp
		cmp	ebp, 1
		jbe	short loc_10029B52
		mov	ecx, [ecx+0Ch]
		lea	ecx, [ecx+ebp*4-4]
		lea	esp, [esp+0]

loc_10029B40:				; CODE XREF: sub_10029A50+FCj
		cmp	dword ptr [ecx], 0
		jnz	short loc_10029B4E
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_10029B40

loc_10029B4E:				; CODE XREF: sub_10029A50+F3j
		mov	ecx, [esp+14h+arg_8]

loc_10029B52:				; CODE XREF: sub_10029A50+E3j
		mov	[ecx+8], eax
		mov	eax, edi
		neg	eax
		sbb	eax, eax
		pop	ebp
		and	eax, 0FFFFFFFDh
		pop	ebx

loc_10029B60:				; CODE XREF: sub_10029A50+2Cj
		pop	edi
		pop	esi
		pop	ecx
		retn
sub_10029A50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029B70	proc near		; CODE XREF: sub_1002A630+12j
					; sub_1002AB80+16Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	ebx, eax
		and	eax, 1Fh
		shr	ebx, 5
		push	edi
		mov	ebp, eax
		test	esi, esi
		jz	short loc_10029BAD
		mov	eax, [esi+4]
		mov	ecx, [esi+0Ch]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	0		; Val
		push	ecx		; Dst
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0

loc_10029BAD:				; CODE XREF: sub_10029B70+18j
		mov	eax, [esi+8]
		lea	edi, [ebx+1]
		cmp	edi, eax
		jbe	short loc_10029BE9
		cmp	edi, [esi+4]
		jbe	short loc_10029BCC
		push	edi
		push	esi
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jnz	short loc_10029BFC
		jmp	short loc_10029BE6
; ---------------------------------------------------------------------------

loc_10029BCC:				; CODE XREF: sub_10029B70+4Aj
		mov	ecx, [esi+0Ch]
		mov	edx, edi
		sub	edx, eax
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		lea	edx, [ecx+eax*4]
		push	0		; Val
		push	edx		; Dst
		call	memset
		add	esp, 0Ch

loc_10029BE6:				; CODE XREF: sub_10029B70+5Aj
		mov	[esi+8], edi

loc_10029BE9:				; CODE XREF: sub_10029B70+45j
		mov	eax, [esi+0Ch]
		mov	edx, 1
		mov	ecx, ebp
		shl	edx, cl
		lea	eax, [eax+ebx*4]
		or	[eax], edx
		xor	eax, eax

loc_10029BFC:				; CODE XREF: sub_10029B70+58j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10029B70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029C10	proc near		; CODE XREF: sub_100269C0+80p
					; sub_10026A60+190p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, [esi+8]
		push	edi
		mov	edi, [eax+8]
		cmp	edi, ecx
		ja	short loc_10029C91
		jb	short loc_10029C9B
		mov	eax, [eax+0Ch]
		mov	esi, [esi+0Ch]
		push	ebx
		lea	ebx, ds:0[edi*4]
		xor	ecx, ecx
		xor	edx, edx
		add	eax, ebx
		add	esi, ebx
		cmp	edi, 4
		jb	short loc_10029C75

loc_10029C41:				; CODE XREF: sub_10029C10+63j
		mov	ecx, [eax-4]
		mov	edx, [esi-4]
		sub	eax, 10h
		sub	esi, 10h
		sub	edi, 4
		cmp	ecx, edx
		jnz	short loc_10029C8C
		mov	ecx, [eax+8]
		mov	edx, [esi+8]
		cmp	ecx, edx
		jnz	short loc_10029C8C
		mov	ecx, [eax+4]
		mov	edx, [esi+4]
		cmp	ecx, edx
		jnz	short loc_10029C8C
		mov	ecx, [eax]
		mov	edx, [esi]
		cmp	ecx, edx
		jnz	short loc_10029C8C
		cmp	edi, 4
		jnb	short loc_10029C41

loc_10029C75:				; CODE XREF: sub_10029C10+2Fj
		sub	esi, eax

loc_10029C77:				; CODE XREF: sub_10029C10+7Aj
		mov	ebx, edi
		dec	edi
		test	ebx, ebx
		jz	short loc_10029C8C
		mov	ecx, [eax-4]
		mov	edx, [esi+eax-4]
		sub	eax, 4
		cmp	ecx, edx
		jz	short loc_10029C77

loc_10029C8C:				; CODE XREF: sub_10029C10+42j
					; sub_10029C10+4Cj ...
		pop	ebx
		cmp	ecx, edx
		jbe	short loc_10029C99

loc_10029C91:				; CODE XREF: sub_10029C10+12j
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029C99:				; CODE XREF: sub_10029C10+7Fj
		jnb	short loc_10029CA1

loc_10029C9B:				; CODE XREF: sub_10029C10+14j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10029CA1:				; CODE XREF: sub_10029C10:loc_10029C99j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10029C10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029CB0	proc near		; CODE XREF: sub_1002A130+51p
					; sub_1002A1A0+9Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+8], 1
		jbe	short loc_10029CC0
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_10029CC0:				; CODE XREF: sub_10029CB0+8j
		mov	eax, [eax+0Ch]
		mov	eax, [eax]
		mov	ecx, [esp+arg_4]
		cmp	ecx, eax
		jbe	short loc_10029CD1
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10029CD1:				; CODE XREF: sub_10029CB0+1Bj
		sbb	eax, eax
		neg	eax
		retn
sub_10029CB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029CE0	proc near		; CODE XREF: sub_1002AE30+3Bp
					; sub_1002B5C0+25p

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_10029D29
		lea	eax, [ecx-1]
		test	ecx, eax
		jnz	short loc_10029D29
		xor	eax, eax
		test	ecx, 0FFFF0000h
		jz	short loc_10029CFE
		mov	eax, 10h

loc_10029CFE:				; CODE XREF: sub_10029CE0+17j
		test	ecx, 0FF00FF00h
		jz	short loc_10029D09
		add	eax, 8

loc_10029D09:				; CODE XREF: sub_10029CE0+24j
		test	ecx, 0F0F0F0F0h
		jz	short loc_10029D14
		add	eax, 4

loc_10029D14:				; CODE XREF: sub_10029CE0+2Fj
		test	ecx, 0CCCCCCCCh
		jz	short loc_10029D1F
		add	eax, 2

loc_10029D1F:				; CODE XREF: sub_10029CE0+3Aj
		test	ecx, 0AAAAAAAAh
		jz	short locret_10029D2C
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_10029D29:				; CODE XREF: sub_10029CE0+6j
					; sub_10029CE0+Dj
		or	eax, 0FFFFFFFFh

locret_10029D2C:			; CODE XREF: sub_10029CE0+45j
		retn
sub_10029CE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029D30	proc near		; CODE XREF: sub_1000D600+4Dp
					; sub_1000D7C0+EAp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		test	esi, esi
		jz	loc_10029E55
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jz	loc_10029E55
		mov	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	loc_10029E55
		push	esi
		call	sub_10028F40
		mov	eax, ebx
		add	esp, 4
		and	eax, 3
		jz	short loc_10029D88
		xor	ecx, ecx
		test	eax, eax
		jle	short loc_10029D83
		lea	ecx, [ecx+0]

loc_10029D70:				; CODE XREF: sub_10029D30+4Dj
		movzx	edx, byte ptr [edi]
		shl	ecx, 8
		dec	eax
		or	ecx, edx
		inc	edi
		dec	ebx
		test	eax, eax
		jg	short loc_10029D70
		mov	[esp+0Ch+arg_8], ebx

loc_10029D83:				; CODE XREF: sub_10029D30+3Bj
		mov	eax, [esi+0Ch]
		mov	[eax], ecx

loc_10029D88:				; CODE XREF: sub_10029D30+35j
		push	ebp
		test	ebx, ebx
		jz	loc_10029E4E
		lea	ebp, [edi+2]

loc_10029D94:				; CODE XREF: sub_10029D30+118j
		movzx	edi, byte ptr [ebp-2]
		movzx	ecx, byte ptr [ebp-1]
		movzx	edx, byte ptr [ebp+0]
		movzx	eax, byte ptr [ebp+1]
		shl	edi, 8
		or	edi, ecx
		shl	edi, 8
		or	edi, edx
		shl	edi, 8
		push	esi
		or	edi, eax
		add	ebp, 4
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10029DC9
		test	edi, edi
		jz	short loc_10029E41
		jmp	short loc_10029E3C
; ---------------------------------------------------------------------------

loc_10029DC9:				; CODE XREF: sub_10029D30+91j
		mov	eax, [esi+8]
		cmp	eax, 1
		jnz	short loc_10029DD9
		mov	ecx, [esi+0Ch]
		cmp	dword ptr [ecx], 0
		jz	short loc_10029E3C

loc_10029DD9:				; CODE XREF: sub_10029D30+9Fj
		lea	ebx, [eax+1]
		cmp	ebx, eax
		jbe	short loc_10029E15
		cmp	ebx, [esi+4]
		jbe	short loc_10029DF8
		push	ebx
		push	esi
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jz	short loc_10029E12
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029DF8:				; CODE XREF: sub_10029D30+B3j
		mov	ecx, [esi+0Ch]
		mov	edx, ebx
		sub	edx, eax
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		lea	edx, [ecx+eax*4]
		push	0		; Val
		push	edx		; Dst
		call	memset
		add	esp, 0Ch

loc_10029E12:				; CODE XREF: sub_10029D30+C1j
		mov	[esi+8], ebx

loc_10029E15:				; CODE XREF: sub_10029D30+AEj
		mov	eax, [esi+8]
		sub	eax, 2
		js	short loc_10029E2F
		lea	ecx, [ecx+0]

loc_10029E20:				; CODE XREF: sub_10029D30+FDj
		mov	ecx, [esi+0Ch]
		mov	edx, [ecx+eax*4]
		lea	ecx, [ecx+eax*4]
		dec	eax
		mov	[ecx+4], edx
		jns	short loc_10029E20

loc_10029E2F:				; CODE XREF: sub_10029D30+EBj
		mov	eax, [esi+0Ch]
		mov	ebx, [esp+10h+arg_8]
		mov	dword ptr [eax], 0

loc_10029E3C:				; CODE XREF: sub_10029D30+97j
					; sub_10029D30+A7j
		mov	ecx, [esi+0Ch]
		mov	[ecx], edi

loc_10029E41:				; CODE XREF: sub_10029D30+95j
		sub	ebx, 4
		mov	[esp+10h+arg_8], ebx
		jnz	loc_10029D94

loc_10029E4E:				; CODE XREF: sub_10029D30+5Bj
		pop	ebp
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10029E55:				; CODE XREF: sub_10029D30+9j
					; sub_10029D30+15j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
sub_10029D30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029E60	proc near		; CODE XREF: sub_1000D530+1Fp
					; sub_10015F50+2E9p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	edi
		xor	edi, edi
		test	edx, edx
		jnz	short loc_10029E72

loc_10029E6B:				; CODE XREF: sub_10029E60+14j
		mov	eax, 0FFFFFFFCh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10029E72:				; CODE XREF: sub_10029E60+9j
		cmp	[edx], edi
		jnz	short loc_10029E6B
		mov	ecx, [edx+8]
		lea	eax, ds:0[ecx*4]
		dec	ecx
		js	short loc_10029E9F
		mov	edx, [edx+0Ch]
		lea	edx, [edx+ecx*4]
		lea	esp, [esp+0]

loc_10029E90:				; CODE XREF: sub_10029E60+3Dj
		mov	edi, [edx]
		test	edi, edi
		jnz	short loc_10029E9F
		sub	eax, 4
		sub	edx, 4
		dec	ecx
		jns	short loc_10029E90

loc_10029E9F:				; CODE XREF: sub_10029E60+21j
					; sub_10029E60+34j
		test	eax, eax
		jnz	short loc_10029EAA
		mov	eax, 1
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10029EAA:				; CODE XREF: sub_10029E60+41j
		push	esi
		mov	esi, 18h

loc_10029EB0:				; CODE XREF: sub_10029E60+5Ej
		mov	edx, edi
		mov	ecx, esi
		shr	edx, cl
		test	dl, dl
		jnz	short loc_10029EC0
		dec	eax
		sub	esi, 8
		jns	short loc_10029EB0

loc_10029EC0:				; CODE XREF: sub_10029E60+58j
		pop	esi
		pop	edi
		retn
sub_10029E60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10029ED0	proc near		; CODE XREF: sub_1000D530+75p
					; sub_10015F50+329p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		xor	esi, esi
		push	edi
		test	ebp, ebp
		jz	loc_10029F61
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jz	short loc_10029F61
		cmp	[ebp+0], esi
		jnz	short loc_10029F61
		push	ebp
		call	sub_10029E60
		add	esp, 4
		test	eax, eax
		js	short loc_10029F61
		cmp	eax, [esp+0Ch+arg_8]
		ja	short loc_10029F61
		mov	edx, [ebp+8]
		dec	edx
		js	short loc_10029F53

loc_10029F07:				; CODE XREF: sub_10029ED0+7Dj
		mov	eax, [ebp+0Ch]
		mov	eax, [eax+edx*4]
		mov	ecx, eax
		shr	ecx, 18h
		test	esi, esi
		jnz	short loc_10029F1A
		test	cl, cl
		jz	short loc_10029F1E

loc_10029F1A:				; CODE XREF: sub_10029ED0+44j
		mov	[esi+edi], cl
		inc	esi

loc_10029F1E:				; CODE XREF: sub_10029ED0+48j
		mov	ecx, eax
		shr	ecx, 10h
		test	esi, esi
		jnz	short loc_10029F2B
		test	cl, cl
		jz	short loc_10029F2F

loc_10029F2B:				; CODE XREF: sub_10029ED0+55j
		mov	[esi+edi], cl
		inc	esi

loc_10029F2F:				; CODE XREF: sub_10029ED0+59j
		mov	ecx, eax
		shr	ecx, 8
		test	esi, esi
		jnz	short loc_10029F3C
		test	cl, cl
		jz	short loc_10029F40

loc_10029F3C:				; CODE XREF: sub_10029ED0+66j
		mov	[esi+edi], cl
		inc	esi

loc_10029F40:				; CODE XREF: sub_10029ED0+6Aj
		test	esi, esi
		jnz	short loc_10029F48
		test	al, al
		jz	short loc_10029F4C

loc_10029F48:				; CODE XREF: sub_10029ED0+72j
		mov	[esi+edi], al
		inc	esi

loc_10029F4C:				; CODE XREF: sub_10029ED0+76j
		dec	edx
		jns	short loc_10029F07
		test	esi, esi
		jnz	short loc_10029F5B

loc_10029F53:				; CODE XREF: sub_10029ED0+35j
		mov	byte ptr [edi],	0
		mov	esi, 1

loc_10029F5B:				; CODE XREF: sub_10029ED0+81j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10029F61:				; CODE XREF: sub_10029ED0+Bj
					; sub_10029ED0+17j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebp
		retn
sub_10029ED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10029F70(int,	void *Dst, int)
sub_10029F70	proc near		; CODE XREF: sub_10017060+25Cp
					; sub_10017060+278p ...

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		xor	esi, esi
		test	ebp, ebp
		jz	loc_1002A01B
		mov	ebx, [esp+0Ch+Dst]
		test	ebx, ebx
		jz	loc_1002A01B
		cmp	[ebp+0], esi
		jnz	loc_1002A01B
		push	ebp
		call	sub_10029E60
		add	esp, 4
		test	eax, eax
		js	short loc_1002A01B
		mov	ecx, [esp+0Ch+arg_8]
		cmp	ecx, eax
		jb	short loc_1002A01B
		push	edi
		jbe	short loc_10029FBF
		sub	ecx, eax
		mov	edi, ecx
		push	edi		; Size
		push	esi		; Val
		push	ebx		; Dst
		call	memset
		add	esp, 0Ch
		add	ebx, edi

loc_10029FBF:				; CODE XREF: sub_10029F70+3Cj
		mov	edi, [ebp+8]
		dec	edi
		js	short loc_1002A011

loc_10029FC5:				; CODE XREF: sub_10029F70+9Bj
		mov	eax, [ebp+0Ch]
		mov	eax, [eax+edi*4]
		mov	ecx, eax
		shr	ecx, 18h
		test	esi, esi
		jnz	short loc_10029FD8
		test	cl, cl
		jz	short loc_10029FDC

loc_10029FD8:				; CODE XREF: sub_10029F70+62j
		mov	[esi+ebx], cl
		inc	esi

loc_10029FDC:				; CODE XREF: sub_10029F70+66j
		mov	ecx, eax
		shr	ecx, 10h
		test	esi, esi
		jnz	short loc_10029FE9
		test	cl, cl
		jz	short loc_10029FED

loc_10029FE9:				; CODE XREF: sub_10029F70+73j
		mov	[esi+ebx], cl
		inc	esi

loc_10029FED:				; CODE XREF: sub_10029F70+77j
		mov	ecx, eax
		shr	ecx, 8
		test	esi, esi
		jnz	short loc_10029FFA
		test	cl, cl
		jz	short loc_10029FFE

loc_10029FFA:				; CODE XREF: sub_10029F70+84j
		mov	[esi+ebx], cl
		inc	esi

loc_10029FFE:				; CODE XREF: sub_10029F70+88j
		test	esi, esi
		jnz	short loc_1002A006
		test	al, al
		jz	short loc_1002A00A

loc_1002A006:				; CODE XREF: sub_10029F70+90j
		mov	[esi+ebx], al
		inc	esi

loc_1002A00A:				; CODE XREF: sub_10029F70+94j
		dec	edi
		jns	short loc_10029FC5
		test	esi, esi
		jnz	short loc_1002A014

loc_1002A011:				; CODE XREF: sub_10029F70+53j
		mov	byte ptr [ebx],	0

loc_1002A014:				; CODE XREF: sub_10029F70+9Fj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002A01B:				; CODE XREF: sub_10029F70+Bj
					; sub_10029F70+17j ...
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
sub_10029F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A030	proc near		; CODE XREF: sub_1000DD80+1Fp
					; sub_1000DD80+2Fp ...

arg_0		= dword	ptr  4

		mov	eax, dword_10049218
		mov	ecx, [esp+arg_0]
		push	eax
		push	ecx
		call	sub_10028D30
		add	esp, 8
		retn
sub_1002A030	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A050	proc near		; CODE XREF: sub_1001DA90+1B8p
					; sub_1001E2F0+2ACp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short locret_1002A094
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short locret_1002A094
		mov	edx, [ecx]
		push	ebx
		mov	ebx, [ecx+0Ch]
		push	ebp
		mov	ebp, [eax]
		push	esi
		mov	esi, [ecx+4]
		push	edi
		mov	edi, [ecx+8]
		mov	[ecx], ebp
		mov	ebp, [eax+4]
		mov	[ecx+4], ebp
		mov	ebp, [eax+8]
		mov	[ecx+8], ebp
		mov	ebp, [eax+0Ch]
		mov	[ecx+0Ch], ebp
		mov	[eax], edx
		mov	[eax+4], esi
		mov	[eax+8], edi
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax+0Ch], ebx
		pop	ebx

locret_1002A094:			; CODE XREF: sub_1002A050+6j
					; sub_1002A050+Ej
		retn
sub_1002A050	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A0A0	proc near		; CODE XREF: sub_1001A570+2E9p
					; sub_10026630+264p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_1002A0CA
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_1002A0CA
		push	esi
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002A0CF
		push	esi
		call	sub_10029430
		add	esp, 4
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002A0CA:				; CODE XREF: sub_1002A0A0+7j
					; sub_1002A0A0+Fj
		mov	eax, 0FFFFFFFCh

loc_1002A0CF:				; CODE XREF: sub_1002A0A0+1Dj
		pop	esi
		retn
sub_1002A0A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A0E0	proc near		; CODE XREF: sub_1002B360+86p
					; sub_1002B460+A0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_1002A125
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_1002A125
		push	esi
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002A12A
		cmp	dword ptr [esi+8], 1
		ja	short loc_1002A117
		mov	eax, [esi+0Ch]
		cmp	dword ptr [eax], 0
		ja	short loc_1002A117
		mov	dword ptr [esi], 0
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002A117:				; CODE XREF: sub_1002A0E0+23j
					; sub_1002A0E0+2Bj
		xor	ecx, ecx
		cmp	dword ptr [esi], 1
		setnz	cl
		xor	eax, eax
		mov	[esi], ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002A125:				; CODE XREF: sub_1002A0E0+7j
					; sub_1002A0E0+Fj
		mov	eax, 0FFFFFFFCh

loc_1002A12A:				; CODE XREF: sub_1002A0E0+1Dj
		pop	esi
		retn
sub_1002A0E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A130	proc near		; CODE XREF: sub_100176A0+11Fp
					; sub_10017CC0+1E4p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		test	ebx, ebx
		jz	short loc_1002A195
		mov	esi, [esp+0Ch+arg_4]
		test	esi, esi
		jz	short loc_1002A195
		mov	edi, [esp+0Ch+arg_8]
		test	edi, edi
		jz	short loc_1002A195
		mov	eax, [ebx]
		cmp	eax, [esi]
		jnz	short loc_1002A15B
		push	edi
		push	esi
		push	ebx
		call	sub_10029870
		jmp	short loc_1002A175
; ---------------------------------------------------------------------------

loc_1002A15B:				; CODE XREF: sub_1002A130+1Fj
		push	esi
		push	ebx
		call	sub_10029C10
		add	esp, 8
		push	edi
		test	eax, eax
		js	short loc_1002A16E
		push	esi
		push	ebx
		jmp	short loc_1002A170
; ---------------------------------------------------------------------------

loc_1002A16E:				; CODE XREF: sub_1002A130+38j
		push	ebx
		push	esi

loc_1002A170:				; CODE XREF: sub_1002A130+3Cj
		call	sub_10029A50

loc_1002A175:				; CODE XREF: sub_1002A130+29j
		mov	edx, eax
		add	esp, 0Ch
		test	edx, edx
		js	short loc_1002A18F
		push	0
		push	edi
		call	sub_10029CB0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002A18F
		mov	[edi], eax

loc_1002A18F:				; CODE XREF: sub_1002A130+4Cj
					; sub_1002A130+5Bj
		pop	edi
		pop	esi
		mov	eax, edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002A195:				; CODE XREF: sub_1002A130+9j
					; sub_1002A130+11j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
sub_1002A130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A1A0	proc near		; CODE XREF: sub_10015F50+240p
					; sub_100176A0+E9p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		test	esi, esi
		jz	loc_1002A252
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jz	loc_1002A252
		mov	edi, [esp+0Ch+arg_8]
		test	edi, edi
		jz	loc_1002A252
		cmp	esi, ebx
		jnz	short loc_1002A1DA
		push	edi
		call	sub_10028F40
		add	esp, 4
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002A1DA:				; CODE XREF: sub_1002A1A0+29j
		mov	eax, [esi]
		cmp	eax, [ebx]
		jz	short loc_1002A1F3
		push	edi
		push	ebx
		push	esi
		call	sub_10029870
		mov	edx, eax
		add	esp, 0Ch
		test	edx, edx
		js	short loc_1002A24C
		jmp	short loc_1002A23B
; ---------------------------------------------------------------------------

loc_1002A1F3:				; CODE XREF: sub_1002A1A0+3Ej
		push	ebx
		push	esi
		call	sub_10029C10
		add	esp, 8
		push	edi
		test	eax, eax
		jnz	short loc_1002A20E
		call	sub_10028F40
		add	esp, 4
		xor	edx, edx
		jmp	short loc_1002A23B
; ---------------------------------------------------------------------------

loc_1002A20E:				; CODE XREF: sub_1002A1A0+60j
		jle	short loc_1002A222
		push	ebx
		push	esi
		call	sub_10029A50
		mov	edx, eax
		add	esp, 0Ch
		test	edx, edx
		js	short loc_1002A24C
		jmp	short loc_1002A23B
; ---------------------------------------------------------------------------

loc_1002A222:				; CODE XREF: sub_1002A1A0:loc_1002A20Ej
		push	esi
		push	ebx
		call	sub_10029A50
		mov	edx, eax
		add	esp, 0Ch
		test	edx, edx
		js	short loc_1002A24C
		xor	ecx, ecx
		cmp	[esi], ecx
		setz	cl
		mov	[edi], ecx

loc_1002A23B:				; CODE XREF: sub_1002A1A0+51j
					; sub_1002A1A0+6Cj ...
		push	0
		push	edi
		call	sub_10029CB0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002A24C
		mov	[edi], eax

loc_1002A24C:				; CODE XREF: sub_1002A1A0+4Fj
					; sub_1002A1A0+7Ej ...
		pop	edi
		pop	esi
		mov	eax, edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002A252:				; CODE XREF: sub_1002A1A0+9j
					; sub_1002A1A0+15j ...
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebx
		retn
sub_1002A1A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A260	proc near		; CODE XREF: sub_10017AC0+10Cp
					; sub_10019790+242p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		push	ebx
		push	esi
		mov	esi, [esp+24h+arg_0]
		push	edi
		test	esi, esi
		jz	loc_1002A425
		mov	ebx, [esp+28h+arg_4]
		test	ebx, ebx
		jz	loc_1002A425
		mov	edi, [esp+28h+arg_8]
		test	edi, edi
		jz	loc_1002A425
		cmp	esi, edi
		jnz	short loc_1002A2B8
		lea	eax, [esp+28h+var_10]
		push	esi
		push	eax
		call	sub_10028D90
		add	esp, 8
		test	eax, eax
		jnz	loc_1002A42A
		cmp	esi, ebx
		jnz	short loc_1002A2B2
		lea	ecx, [esp+28h+var_10]
		mov	[esp+28h+arg_4], ecx
		mov	ebx, ecx

loc_1002A2B2:				; CODE XREF: sub_1002A260+46j
		lea	esi, [esp+28h+var_10]
		jmp	short loc_1002A2E6
; ---------------------------------------------------------------------------

loc_1002A2B8:				; CODE XREF: sub_1002A260+2Cj
		cmp	ebx, edi
		jnz	short loc_1002A2DE
		lea	edx, [esp+28h+var_10]
		push	ebx
		push	edx
		call	sub_10028D90
		add	esp, 8
		test	eax, eax
		jnz	loc_1002A42A
		lea	eax, [esp+28h+var_10]
		mov	[esp+28h+arg_4], eax
		mov	ebx, eax
		jmp	short loc_1002A2E6
; ---------------------------------------------------------------------------

loc_1002A2DE:				; CODE XREF: sub_1002A260+5Aj
		mov	[esp+28h+var_4], 0

loc_1002A2E6:				; CODE XREF: sub_1002A260+56j
					; sub_1002A260+7Cj
		mov	ecx, [esi+8]
		cmp	ecx, [ebx+8]
		jnb	short loc_1002A2F8
		mov	[esp+28h+arg_4], esi
		mov	esi, ebx
		mov	ebx, [esp+28h+arg_4]

loc_1002A2F8:				; CODE XREF: sub_1002A260+8Cj
		mov	edx, [edi+0Ch]
		mov	dword ptr [edi+8], 1
		mov	dword ptr [edx], 0
		mov	eax, [esi+8]
		add	eax, [ebx+8]
		push	eax
		push	edi
		call	sub_100291A0
		add	esp, 8
		mov	[esp+28h+var_14], eax
		test	eax, eax
		jnz	loc_1002A40D
		mov	ecx, [edi+0Ch]
		mov	edx, [esi+8]
		push	ebp
		mov	ebp, [ebx+0Ch]
		mov	eax, [ebp+0]
		push	ecx
		push	eax
		mov	eax, [esi+0Ch]
		push	edx
		push	eax
		call	sub_1002D600
		mov	ecx, [ebx+8]
		mov	edx, [esi+8]
		mov	ebx, 1
		add	esp, 10h
		add	ebp, 4
		mov	[esp+2Ch+var_1C], edx
		mov	[esp+2Ch+var_18], ecx
		cmp	ecx, ebx
		jbe	short loc_1002A3B1
		lea	eax, ds:4[edx*4]
		mov	[esp+2Ch+arg_0], eax
		jmp	short loc_1002A374
; ---------------------------------------------------------------------------
		jmp	short loc_1002A370
; ---------------------------------------------------------------------------
		align 10h

loc_1002A370:				; CODE XREF: sub_1002A260+107j
					; sub_1002A260+14Fj
		mov	edx, [esp+2Ch+var_1C]

loc_1002A374:				; CODE XREF: sub_1002A260+105j
		mov	eax, [ebp+0]
		add	ebp, 4
		test	eax, eax
		jz	short loc_1002A399
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+ebx*4]
		push	ecx
		push	eax
		push	edx
		mov	edx, [esi+0Ch]
		push	edx
		call	sub_1002D690
		mov	ecx, [esp+3Ch+var_18]
		add	esp, 10h
		jmp	short loc_1002A3A7
; ---------------------------------------------------------------------------

loc_1002A399:				; CODE XREF: sub_1002A260+11Cj
		mov	eax, [edi+0Ch]
		mov	edx, [esp+2Ch+arg_0]
		mov	dword ptr [edx+eax], 0

loc_1002A3A7:				; CODE XREF: sub_1002A260+137j
		add	[esp+2Ch+arg_0], 4
		inc	ebx
		cmp	ebx, ecx
		jb	short loc_1002A370

loc_1002A3B1:				; CODE XREF: sub_1002A260+F8j
		mov	eax, [edi+8]
		pop	ebp
		cmp	eax, 1
		jbe	short loc_1002A3CF
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_1002A3C1:				; CODE XREF: sub_1002A260+16Dj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002A3CF
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002A3C1

loc_1002A3CF:				; CODE XREF: sub_1002A260+158j
					; sub_1002A260+164j
		mov	ecx, [esp+28h+arg_4]
		mov	[edi+8], eax
		mov	edx, [esi]
		cmp	edx, [ecx]
		jz	short loc_1002A407
		cmp	eax, 1
		ja	short loc_1002A3E9
		mov	edx, [edi+0Ch]
		cmp	dword ptr [edx], 0
		jbe	short loc_1002A407

loc_1002A3E9:				; CODE XREF: sub_1002A260+17Fj
		lea	eax, [esp+28h+var_10]
		push	eax
		mov	dword ptr [edi], 1
		call	sub_10028EF0
		mov	eax, [esp+2Ch+var_14]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1002A407:				; CODE XREF: sub_1002A260+17Aj
					; sub_1002A260+187j
		mov	dword ptr [edi], 0

loc_1002A40D:				; CODE XREF: sub_1002A260+BEj
		lea	eax, [esp+28h+var_10]
		push	eax
		call	sub_10028EF0
		mov	eax, [esp+2Ch+var_14]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_1002A425:				; CODE XREF: sub_1002A260+Cj
					; sub_1002A260+18j ...
		mov	eax, 0FFFFFFFCh

loc_1002A42A:				; CODE XREF: sub_1002A260+3Ej
					; sub_1002A260+6Cj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
sub_1002A260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A440	proc near		; CODE XREF: sub_1001DD90+3B9p
					; sub_1001DD90+40Ap ...

var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
Dst		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 14h
		push	ebx
		push	ebp
		mov	ebp, [esp+1Ch+arg_0]
		push	edi
		xor	edi, edi
		cmp	ebp, edi
		jz	loc_1002A5A7
		mov	ebx, [esp+20h+arg_4]
		cmp	ebx, edi
		jz	loc_1002A5A7
		cmp	ebp, ebx
		jnz	short loc_1002A48E
		lea	eax, [esp+20h+var_10]
		push	ebp
		push	eax
		call	sub_10028D90
		add	esp, 8
		mov	[esp+20h+var_14], eax
		cmp	eax, edi
		jnz	loc_1002A5AC
		mov	edi, [esp+20h+Dst]
		lea	ecx, [esp+20h+var_10]
		mov	[esp+20h+arg_0], ecx
		mov	ebp, ecx
		jmp	short loc_1002A496
; ---------------------------------------------------------------------------

loc_1002A48E:				; CODE XREF: sub_1002A440+22j
		mov	[esp+20h+Dst], edi
		mov	[esp+20h+var_14], edi

loc_1002A496:				; CODE XREF: sub_1002A440+4Cj
		push	esi
		mov	esi, [ebp+8]
		add	esi, esi
		cmp	esi, [ebx+4]
		jbe	short loc_1002A4BE
		push	esi
		push	ebx
		mov	dword ptr [ebx+8], 1
		call	sub_10029110
		add	esp, 8
		mov	[esp+24h+var_14], eax
		test	eax, eax
		js	loc_1002A579

loc_1002A4BE:				; CODE XREF: sub_1002A440+5Fj
		mov	edx, [ebx+0Ch]
		mov	[ebx+8], esi
		mov	dword ptr [edx], 0
		mov	esi, [ebp+8]
		mov	edi, [ebp+0Ch]
		dec	esi
		test	esi, esi
		jle	short loc_1002A531
		mov	ecx, [ebx+0Ch]
		mov	eax, [edi]
		add	ecx, 4
		push	ecx
		push	eax
		add	edi, 4
		push	esi
		push	edi
		call	sub_1002D600
		dec	esi
		add	esp, 10h
		test	esi, esi
		jle	short loc_1002A518
		mov	ebp, 0Ch

loc_1002A4F6:				; CODE XREF: sub_1002A440+D2j
		mov	edx, [ebx+0Ch]
		mov	eax, [edi]
		add	edx, ebp
		push	edx
		push	eax
		add	edi, 4
		push	esi
		push	edi
		call	sub_1002D690
		dec	esi
		add	esp, 10h
		add	ebp, 8
		test	esi, esi
		jg	short loc_1002A4F6
		mov	ebp, [esp+24h+arg_0]

loc_1002A518:				; CODE XREF: sub_1002A440+AFj
		mov	eax, [ebx+8]
		mov	ecx, [ebx+0Ch]
		push	ebx
		mov	dword ptr [ecx+eax*4-4], 0
		call	sub_10029430
		add	esp, 4
		jmp	short loc_1002A53B
; ---------------------------------------------------------------------------

loc_1002A531:				; CODE XREF: sub_1002A440+93j
		mov	edx, [ebx+0Ch]
		mov	dword ptr [edx+4], 0

loc_1002A53B:				; CODE XREF: sub_1002A440+EFj
		mov	eax, [ebx+0Ch]
		mov	ecx, [ebp+8]
		mov	edx, [ebp+0Ch]
		push	eax
		push	ecx
		push	edx
		call	sub_1002D800
		mov	eax, [ebx+8]
		add	esp, 0Ch
		mov	dword ptr [ebx], 0
		cmp	eax, 1
		jbe	short loc_1002A572
		mov	ecx, [ebx+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_1002A564:				; CODE XREF: sub_1002A440+130j
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002A572
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002A564

loc_1002A572:				; CODE XREF: sub_1002A440+11Bj
					; sub_1002A440+127j
		mov	edi, [esp+24h+Dst]
		mov	[ebx+8], eax

loc_1002A579:				; CODE XREF: sub_1002A440+78j
		pop	esi
		test	edi, edi
		jz	short loc_1002A59C
		mov	edx, [esp+20h+var_C]
		lea	eax, ds:0[edx*4]
		push	eax		; Size
		push	0		; Val
		push	edi		; Dst
		call	memset
		push	edi		; Memory
		call	ds:free
		add	esp, 10h

loc_1002A59C:				; CODE XREF: sub_1002A440+13Cj
		mov	eax, [esp+20h+var_14]
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1002A5A7:				; CODE XREF: sub_1002A440+Ej
					; sub_1002A440+1Aj
		mov	eax, 0FFFFFFFCh

loc_1002A5AC:				; CODE XREF: sub_1002A440+38j
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_1002A440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A5C0	proc near		; CODE XREF: sub_10019200+F3p
					; sub_1001A570+24Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_1002A5CE
		lea	eax, [edi-4]
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1002A5CE:				; CODE XREF: sub_1002A5C0+7j
		push	esi
		mov	esi, [esp+8+arg_8]
		test	esi, esi
		jz	short loc_1002A5E5
		push	esi
		push	edi
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002A61F

loc_1002A5E5:				; CODE XREF: sub_1002A5C0+15j
		push	ebx
		mov	ebx, [esp+0Ch+arg_C]
		test	ebx, ebx
		jz	short loc_1002A5FC
		push	ebx
		push	edi
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002A61E

loc_1002A5FC:				; CODE XREF: sub_1002A5C0+2Cj
		mov	edi, [esp+0Ch+arg_4]
		test	esi, esi
		jz	short loc_1002A60E
		push	edi
		push	esi
		call	sub_10029570
		add	esp, 8

loc_1002A60E:				; CODE XREF: sub_1002A5C0+42j
		test	ebx, ebx
		jz	short loc_1002A61C
		push	edi
		push	ebx
		call	sub_10029500
		add	esp, 8

loc_1002A61C:				; CODE XREF: sub_1002A5C0+50j
		xor	eax, eax

loc_1002A61E:				; CODE XREF: sub_1002A5C0+3Aj
		pop	ebx

loc_1002A61F:				; CODE XREF: sub_1002A5C0+23j
		pop	esi
		pop	edi
		retn
sub_1002A5C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A630	proc near		; CODE XREF: sub_10019790+2D8p
					; sub_1001DD90+13Ep

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1002A63E
		mov	eax, 0FFFFFFFCh
		retn
; ---------------------------------------------------------------------------

loc_1002A63E:				; CODE XREF: sub_1002A630+6j
		mov	[esp+arg_0], eax
		jmp	sub_10029B70
sub_1002A630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A650	proc near		; CODE XREF: sub_10015F50+259p
					; sub_10015F50+2B7p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1002A659
		retn
; ---------------------------------------------------------------------------

loc_1002A659:				; CODE XREF: sub_1002A650+6j
		cmp	dword ptr [eax], 1
		jnz	short loc_1002A662

loc_1002A65E:				; CODE XREF: sub_1002A650+29j
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1002A662:				; CODE XREF: sub_1002A650+Cj
		cmp	dword ptr [eax+8], 1
		jbe	short loc_1002A66E
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_1002A66E:				; CODE XREF: sub_1002A650+16j
		mov	eax, [eax+0Ch]
		mov	eax, [eax]
		mov	ecx, [esp+arg_4]
		cmp	ecx, eax
		ja	short loc_1002A65E
		sbb	eax, eax
		neg	eax
		retn
sub_1002A650	endp


; =============== S U B	R O U T	I N E =======================================


sub_1002A680	proc near		; CODE XREF: sub_10015F50+227p
					; sub_10015F50+26Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_1002A6BC
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_1002A6BC
		push	esi
		mov	esi, [ecx]
		cmp	esi, [eax]
		jnz	short loc_1002A6AF
		push	eax
		push	ecx
		call	sub_10029C10
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002A6A7

loc_1002A6A5:				; CODE XREF: sub_1002A680+29j
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002A6A7:				; CODE XREF: sub_1002A680+23j
		test	esi, esi
		jz	short loc_1002A6A5
		neg	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002A6AF:				; CODE XREF: sub_1002A680+15j
		xor	eax, eax
		test	esi, esi
		setz	al
		pop	esi
		lea	eax, [eax+eax-1]
		retn
; ---------------------------------------------------------------------------

loc_1002A6BC:				; CODE XREF: sub_1002A680+6j
					; sub_1002A680+Ej
		xor	eax, eax
		retn
sub_1002A680	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A6C0	proc near		; CODE XREF: sub_1002AA70+BEp

var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 34h
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+40h+arg_0]
		xor	ebp, ebp
		mov	[esp+40h+var_34], ebp
		cmp	edi, ebp
		jz	loc_1002A8DE
		cmp	[esp+40h+arg_4], ebp
		jz	loc_1002A8DE
		mov	ebx, [esp+40h+arg_8]
		cmp	ebx, ebp
		jz	loc_1002A8DE
		mov	eax, dword_10049218
		push	esi
		push	eax
		lea	ecx, [esp+48h+var_20]
		push	ecx
		mov	[esp+4Ch+var_14], ebp
		mov	[esp+4Ch+var_24], ebp
		mov	[esp+4Ch+var_4], ebp
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1002A8B3
		lea	edx, [esp+44h+var_30]
		push	edi
		push	edx
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1002A8B3
		mov	eax, [esp+44h+arg_4]
		push	eax
		lea	ecx, [esp+48h+var_10]
		push	ecx
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1002A8B3
		push	1
		push	ebx
		call	sub_10028F70
		lea	edx, [esp+4Ch+var_20]
		push	edx
		call	sub_10028F40
		lea	eax, [esp+50h+var_30]
		push	eax
		call	sub_10028FB0
		add	esp, 10h
		test	eax, eax
		jz	loc_1002A883

loc_1002A773:				; CODE XREF: sub_1002A6C0+FCj
					; sub_1002A6C0+187j ...
		mov	ecx, [esp+44h+var_24]
		mov	edx, [ecx]
		and	edx, 1
		lea	eax, [esp+44h+var_30]
		jnz	short loc_1002A7BE
		push	eax
		call	sub_10029030
		mov	edi, eax
		add	esp, 4
		cmp	edi, ebp
		jz	loc_1002A883
		lea	ecx, [esp+44h+var_30]
		push	edi
		push	ecx
		call	sub_10029570
		lea	edx, [esp+4Ch+var_20]
		push	edi
		push	edx
		call	sub_100292D0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1002A8B3
		add	[esp+44h+var_34], edi
		jmp	short loc_1002A773
; ---------------------------------------------------------------------------

loc_1002A7BE:				; CODE XREF: sub_1002A6C0+C0j
		push	1
		push	eax
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jz	loc_1002A88A
		lea	ecx, [esp+44h+var_10]
		push	ecx
		lea	edx, [esp+48h+var_30]
		push	edx
		call	sub_1002A680
		add	esp, 8
		cmp	eax, ebp
		jge	short loc_1002A806
		lea	eax, [esp+44h+var_10]
		push	eax
		lea	ecx, [esp+48h+var_30]
		push	ecx
		call	sub_100291F0
		lea	edx, [esp+4Ch+var_20]
		push	edx
		push	ebx
		call	sub_100291F0
		add	esp, 10h
		jmp	short loc_1002A808
; ---------------------------------------------------------------------------

loc_1002A806:				; CODE XREF: sub_1002A6C0+125j
		jz	short loc_1002A883

loc_1002A808:				; CODE XREF: sub_1002A6C0+144j
		mov	eax, [esp+44h+var_4]
		mov	ecx, [eax]
		mov	edx, [esp+44h+var_24]
		xor	ecx, [edx]
		lea	eax, [esp+44h+var_30]
		test	cl, 3
		jnz	short loc_1002A84F
		push	eax
		lea	ecx, [esp+48h+var_10]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	short loc_1002A8B3
		push	ebx
		lea	eax, [esp+48h+var_20]
		push	eax
		push	ebx
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jge	loc_1002A773
		jmp	short loc_1002A8B3
; ---------------------------------------------------------------------------

loc_1002A84F:				; CODE XREF: sub_1002A6C0+15Bj
		lea	ecx, [esp+44h+var_30]
		push	ecx
		lea	edx, [esp+48h+var_10]
		push	edx
		push	eax
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	short loc_1002A8B3
		push	ebx
		lea	ecx, [esp+48h+var_20]
		push	ecx
		push	ebx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jge	loc_1002A773
		jmp	short loc_1002A8B3
; ---------------------------------------------------------------------------

loc_1002A883:				; CODE XREF: sub_1002A6C0+ADj
					; sub_1002A6C0+CFj ...
		mov	esi, 0FFFFFFFBh
		jmp	short loc_1002A8B3
; ---------------------------------------------------------------------------

loc_1002A88A:				; CODE XREF: sub_1002A6C0+10Bj
		mov	edi, [esp+44h+var_34]
		mov	esi, edi
		cmp	edi, ebp
		jl	short loc_1002A8B3
		cmp	[ebx], ebp
		jz	short loc_1002A8B1

loc_1002A898:				; CODE XREF: sub_1002A6C0+1EFj
		mov	edx, [esp+44h+arg_4]
		push	ebx
		push	edx
		push	ebx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	short loc_1002A8B3
		cmp	[ebx], ebp
		jnz	short loc_1002A898

loc_1002A8B1:				; CODE XREF: sub_1002A6C0+1D6j
		mov	esi, edi

loc_1002A8B3:				; CODE XREF: sub_1002A6C0+52j
					; sub_1002A6C0+6Aj ...
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+48h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+4Ch+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1002A8DE:				; CODE XREF: sub_1002A6C0+12j
					; sub_1002A6C0+1Cj ...
		pop	edi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 34h
		retn
sub_1002A6C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002A8F0	proc near		; CODE XREF: sub_1002AA70+D0p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		mov	eax, [esp+4+arg_0]
		cmp	dword ptr [eax], 1
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		mov	ebp, [esp+0Ch+arg_C]
		push	edi
		mov	[esp+10h+var_4], ebx
		push	ebp
		jnz	short loc_1002A922
		mov	edi, [esp+14h+arg_4]
		push	edi
		push	eax
		call	sub_1002A130
		add	esp, 0Ch
		test	eax, eax
		js	loc_1002AA43
		jmp	short loc_1002A937
; ---------------------------------------------------------------------------

loc_1002A922:				; CODE XREF: sub_1002A8F0+18j
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	loc_1002AA43
		mov	edi, [esp+10h+arg_4]

loc_1002A937:				; CODE XREF: sub_1002A8F0+30j
		mov	ecx, [edi+8]
		lea	eax, [ebx+1Fh]
		shr	eax, 5
		push	esi
		lea	esi, [eax+ecx+1]
		mov	eax, [ebp+8]
		cmp	esi, eax
		ja	short loc_1002A952
		mov	esi, eax
		cmp	esi, eax
		jbe	short loc_1002A975

loc_1002A952:				; CODE XREF: sub_1002A8F0+5Aj
		cmp	esi, [ebp+4]
		jbe	loc_1002AA48
		push	esi
		push	ebp
		call	sub_10029110
		add	esp, 8
		test	eax, eax
		jz	loc_1002AA62
		test	eax, eax
		js	loc_1002AA42

loc_1002A975:				; CODE XREF: sub_1002A8F0+60j
					; sub_1002A8F0+175j
		mov	eax, [edi+0Ch]
		mov	eax, [eax]
		mov	edx, eax
		imul	edx, eax
		mov	ecx, 2
		sub	ecx, edx
		imul	ecx, eax
		mov	esi, ecx
		imul	esi, eax
		mov	edx, 2
		sub	edx, esi
		imul	edx, ecx
		mov	esi, edx
		imul	esi, eax
		mov	ecx, 2
		sub	ecx, esi
		imul	ecx, edx
		mov	edx, ecx
		imul	edx, eax
		mov	esi, 2
		sub	esi, edx
		imul	esi, ecx
		neg	esi
		test	ebx, ebx
		jle	short loc_1002AA12
		mov	[esp+14h+arg_8], 0

loc_1002A9C4:				; CODE XREF: sub_1002A8F0+120j
		mov	edi, ebx
		cmp	ebx, 20h
		jb	short loc_1002A9D0
		mov	edi, 20h

loc_1002A9D0:				; CODE XREF: sub_1002A8F0+D9j
		mov	edx, [ebp+0Ch]
		add	edx, [esp+14h+arg_8]
		mov	eax, [edx]
		imul	eax, esi
		cmp	edi, 20h
		jnb	short loc_1002A9F1
		mov	ebp, 1
		mov	ecx, edi
		shl	ebp, cl
		dec	ebp
		and	eax, ebp
		mov	ebp, [esp+14h+arg_C]

loc_1002A9F1:				; CODE XREF: sub_1002A8F0+EFj
		push	edx
		push	eax
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, [eax+8]
		mov	eax, [eax+0Ch]
		push	edx
		push	eax
		call	sub_1002D730
		add	[esp+24h+arg_8], 4
		sub	ebx, edi
		add	esp, 10h
		test	ebx, ebx
		jg	short loc_1002A9C4

loc_1002AA12:				; CODE XREF: sub_1002A8F0+CAj
		mov	eax, [ebp+8]
		cmp	eax, 1
		jbe	short loc_1002AA2F
		mov	ecx, [ebp+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_1002AA21:				; CODE XREF: sub_1002A8F0+13Dj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002AA2F
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002AA21

loc_1002AA2F:				; CODE XREF: sub_1002A8F0+128j
					; sub_1002A8F0+134j
		mov	edx, [esp+14h+var_4]
		push	edx
		push	ebp
		mov	[ebp+8], eax
		call	sub_10029570
		add	esp, 8
		xor	eax, eax

loc_1002AA42:				; CODE XREF: sub_1002A8F0+7Fj
		pop	esi

loc_1002AA43:				; CODE XREF: sub_1002A8F0+2Aj
					; sub_1002A8F0+3Dj
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1002AA48:				; CODE XREF: sub_1002A8F0+65j
		mov	ecx, [ebp+0Ch]
		mov	edx, esi
		sub	edx, eax
		add	edx, edx
		add	edx, edx
		push	edx		; Size
		lea	edx, [ecx+eax*4]
		push	0		; Val
		push	edx		; Dst
		call	memset
		add	esp, 0Ch

loc_1002AA62:				; CODE XREF: sub_1002A8F0+77j
		mov	[ebp+8], esi
		jmp	loc_1002A975
sub_1002A8F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002AA70	proc near		; CODE XREF: sub_1002C760+14Ep
					; sub_1002CAC0+47p

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	edi
		test	esi, esi
		jz	loc_1002AB6C
		mov	edi, [esp+1Ch+arg_4]
		test	edi, edi
		jz	loc_1002AB6C
		mov	ebx, [esp+1Ch+arg_8]
		test	ebx, ebx
		jz	loc_1002AB6C
		cmp	dword ptr [esi], 1
		jz	short loc_1002AAB1
		cmp	dword ptr [esi+8], 1
		jnz	short loc_1002AAB1
		mov	eax, [esi+0Ch]
		cmp	dword ptr [eax], 0
		jz	loc_1002AB60

loc_1002AAB1:				; CODE XREF: sub_1002AA70+2Dj
					; sub_1002AA70+33j
		push	edi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jz	loc_1002AB60
		push	edi
		call	sub_10029000
		add	esp, 4
		test	eax, eax
		jz	short loc_1002AADB
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFBh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002AADB:				; CODE XREF: sub_1002AA70+5Dj
		mov	[esp+1Ch+var_4], 0
		cmp	esi, ebx
		jnz	short loc_1002AB07
		lea	ecx, [esp+1Ch+var_10]
		push	esi
		push	ecx
		call	sub_10028D90
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002AB71
		cmp	esi, edi
		jnz	short loc_1002AB01
		lea	edi, [esp+1Ch+var_10]

loc_1002AB01:				; CODE XREF: sub_1002AA70+8Bj
		lea	esi, [esp+1Ch+var_10]
		jmp	short loc_1002AB2B
; ---------------------------------------------------------------------------

loc_1002AB07:				; CODE XREF: sub_1002AA70+75j
		cmp	edi, ebx
		jnz	short loc_1002AB23
		lea	edx, [esp+1Ch+var_10]
		push	edi
		push	edx
		call	sub_10028D90
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002AB71
		lea	edi, [esp+1Ch+var_10]
		jmp	short loc_1002AB2B
; ---------------------------------------------------------------------------

loc_1002AB23:				; CODE XREF: sub_1002AA70+99j
		mov	[esp+1Ch+var_4], 0

loc_1002AB2B:				; CODE XREF: sub_1002AA70+95j
					; sub_1002AA70+B1j
		push	ebx
		push	edi
		push	esi
		call	sub_1002A6C0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002AB4A
		push	ebx
		push	esi
		push	edi
		push	ebx
		call	sub_1002A8F0
		add	esp, 10h
		mov	esi, eax

loc_1002AB4A:				; CODE XREF: sub_1002AA70+CAj
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10028EF0
		add	esp, 4
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002AB60:				; CODE XREF: sub_1002AA70+3Bj
					; sub_1002AA70+4Cj
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFDh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002AB6C:				; CODE XREF: sub_1002AA70+Cj
					; sub_1002AA70+18j ...
		mov	eax, 0FFFFFFFCh

loc_1002AB71:				; CODE XREF: sub_1002AA70+87j
					; sub_1002AA70+ABj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
sub_1002AA70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002AB80	proc near		; CODE XREF: sub_1002C760+21j
					; sub_1002C760+167p ...

var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		sub	esp, 50h
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+5Ch+arg_4]
		xor	ebx, ebx
		lea	ebp, [edi+4]
		cmp	ecx, ebx
		jz	short loc_1002ABA3
		mov	eax, [ecx+0Ch]
		mov	eax, [eax]
		mov	edx, eax
		and	edx, 1
		jnz	short loc_1002ABAF

loc_1002ABA3:				; CODE XREF: sub_1002AB80+15j
		pop	edi
		pop	ebp
		mov	eax, 0FFFFFFFBh
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1002ABAF:				; CODE XREF: sub_1002AB80+21j
		push	esi
		cmp	edi, 20h
		ja	loc_1002AC3B
		mov	edx, eax
		imul	edx, eax
		mov	ecx, 2
		sub	ecx, edx
		imul	ecx, eax
		mov	esi, ecx
		imul	esi, eax
		mov	edx, 2
		sub	edx, esi
		imul	edx, ecx
		mov	esi, edx
		imul	esi, eax
		mov	ecx, 2
		sub	ecx, esi
		imul	ecx, edx
		mov	edx, ecx
		imul	edx, eax
		mov	esi, 2
		sub	esi, edx
		imul	esi, ecx
		cmp	edi, 20h
		jnb	short loc_1002AC06
		mov	eax, 1
		mov	ecx, edi
		shl	eax, cl
		dec	eax
		and	esi, eax

loc_1002AC06:				; CODE XREF: sub_1002AB80+78j
		mov	edi, [esp+60h+arg_8]
		cmp	edi, ebx
		jz	short loc_1002AC31
		mov	ecx, [edi+4]
		mov	edx, [edi+0Ch]
		add	ecx, ecx
		add	ecx, ecx
		push	ecx		; Size
		push	ebx		; Val
		push	edx		; Dst
		call	memset
		mov	eax, [edi+0Ch]
		mov	dword ptr [edi+8], 1
		mov	[edi], ebx
		add	esp, 0Ch
		mov	[eax], esi

loc_1002AC31:				; CODE XREF: sub_1002AB80+8Cj
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 50h
		retn
; ---------------------------------------------------------------------------

loc_1002AC3B:				; CODE XREF: sub_1002AB80+33j
		push	ecx
		lea	ecx, [esp+64h+var_20]
		push	ecx
		mov	[esp+68h+var_24], ebx
		mov	[esp+68h+var_44], ebx
		mov	[esp+68h+var_14], ebx
		mov	[esp+68h+var_34], ebx
		mov	[esp+68h+var_4], ebx
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_1002ADE6
		lea	edx, [esp+60h+var_20]
		push	edi
		push	edx
		call	sub_10029500
		lea	eax, [esp+68h+var_20]
		push	eax
		lea	ecx, [esp+6Ch+var_30]
		push	ecx
		call	sub_10028D90
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebx
		jl	loc_1002ADE6
		lea	edx, [esp+60h+var_30]
		push	edx
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_1002ADE6
		mov	ecx, dword_10049218
		push	ecx
		lea	edx, [esp+64h+var_40]
		push	edx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_1002ADE6
		mov	eax, dword_10049218
		push	eax
		lea	ecx, [esp+64h+var_10]
		push	ecx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_1002ADE6
		lea	edx, [esp+60h+var_10]
		push	edi
		push	edx
		call	sub_10029B70
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_1002ADE6
		lea	ecx, [ecx+0]

loc_1002AD00:				; CODE XREF: sub_1002AB80+243j
		lea	eax, [esp+60h+var_40]
		push	eax
		lea	ecx, [esp+64h+var_50]
		push	ecx
		lea	edx, [esp+68h+var_20]
		push	edx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1002ADE6
		lea	eax, [esp+60h+var_40]
		push	eax
		mov	ecx, eax
		push	ecx
		push	offset dword_10047318
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1002ADE6
		lea	edx, [esp+60h+var_50]
		push	edx
		lea	eax, [esp+64h+var_40]
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	loc_1002ADE6
		lea	edx, [esp+60h+var_50]
		push	edi
		push	edx
		call	sub_10029500
		add	esp, 8
		cmp	[esp+60h+var_50], ebx
		jz	short loc_1002AD94

loc_1002AD73:				; CODE XREF: sub_1002AB80+212j
		lea	eax, [esp+60h+var_50]
		push	eax
		lea	ecx, [esp+64h+var_10]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebx
		jl	short loc_1002ADE6
		cmp	[esp+60h+var_50], ebx
		jnz	short loc_1002AD73

loc_1002AD94:				; CODE XREF: sub_1002AB80+1F1j
		lea	eax, [esp+60h+var_30]
		push	eax
		lea	ecx, [esp+64h+var_50]
		push	ecx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_1002ADC9
		lea	edx, [esp+60h+var_30]
		push	edx
		lea	eax, [esp+64h+var_50]
		push	eax
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	short loc_1002ADE6
		dec	ebp
		jnz	loc_1002AD00

loc_1002ADC9:				; CODE XREF: sub_1002AB80+228j
		cmp	ebp, ebx
		jnz	short loc_1002ADD4
		mov	esi, 0FFFFFFFBh
		jmp	short loc_1002ADE6
; ---------------------------------------------------------------------------

loc_1002ADD4:				; CODE XREF: sub_1002AB80+24Bj
		mov	edx, [esp+60h+arg_8]
		lea	ecx, [esp+60h+var_50]
		push	ecx
		push	edx
		call	sub_1002A050
		add	esp, 8

loc_1002ADE6:				; CODE XREF: sub_1002AB80+E1j
					; sub_1002AB80+108j ...
		lea	eax, [esp+60h+var_30]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+64h+var_50]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+68h+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+6Ch+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+70h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 14h
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 50h
		retn
sub_1002AB80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1002AE30(int,	int Val)
sub_1002AE30	proc near		; CODE XREF: sub_1002B570+37p
					; sub_1002BAB0+11Cp ...

arg_0		= dword	ptr  4
Val		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+Val]
		push	esi
		test	ebx, ebx
		jnz	short loc_1002AE65
		mov	esi, [esp+8+arg_0]
		test	esi, esi
		jz	short loc_1002AE60
		mov	eax, [esi+4]
		mov	ecx, [esi+0Ch]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	ebx		; Val
		push	ecx		; Dst
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	[esi], ebx

loc_1002AE60:				; CODE XREF: sub_1002AE30+10j
					; sub_1002AE30+38j
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002AE65:				; CODE XREF: sub_1002AE30+8j
		cmp	ebx, 1
		jz	short loc_1002AE60
		push	ebx
		call	sub_10029CE0
		add	esp, 4
		test	eax, eax
		js	short loc_1002AE82
		pop	esi
		pop	ebx
		mov	[esp+Val], eax
		jmp	sub_100292D0
; ---------------------------------------------------------------------------

loc_1002AE82:				; CODE XREF: sub_1002AE30+45j
		mov	esi, [esp+8+arg_0]
		push	ebp
		push	edi
		mov	edi, [esi+8]
		lea	eax, [edi+1]
		push	eax
		push	esi
		call	sub_100291A0
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		js	short loc_1002AED1
		mov	eax, [esi+0Ch]
		push	eax
		push	ebx
		push	edi
		push	eax
		call	sub_1002D600
		mov	eax, [esi+8]
		add	esp, 10h
		cmp	eax, 1
		jbe	short loc_1002AECE
		mov	ecx, [esi+0Ch]
		lea	ecx, [ecx+eax*4-4]
		lea	esp, [esp+0]

loc_1002AEC0:				; CODE XREF: sub_1002AE30+9Cj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002AECE
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002AEC0

loc_1002AECE:				; CODE XREF: sub_1002AE30+83j
					; sub_1002AE30+93j
		mov	[esi+8], eax

loc_1002AED1:				; CODE XREF: sub_1002AE30+6Cj
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	esi
		pop	ebx
		retn
sub_1002AE30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002AEE0	proc near		; CODE XREF: sub_1002B5C0+8Cp

var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 24h
		push	ebx
		push	edi
		mov	edi, [esp+2Ch+arg_4]
		xor	ebx, ebx
		cmp	edi, ebx
		jnz	short loc_1002AEF8
		pop	edi
		lea	eax, [ebx-3]
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1002AEF8:				; CODE XREF: sub_1002AEE0+Dj
		cmp	edi, 1
		jnz	short loc_1002AF0F
		mov	eax, [esp+2Ch+arg_8]
		cmp	eax, ebx
		jz	short loc_1002AF07
		mov	[eax], ebx

loc_1002AF07:				; CODE XREF: sub_1002AEE0+23j
		pop	edi
		xor	eax, eax
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1002AF0F:				; CODE XREF: sub_1002AEE0+1Bj
		push	ebp
		mov	ebp, [esp+30h+arg_0]
		mov	eax, [ebp+8]
		cmp	eax, 1
		jnz	short loc_1002AF3A
		mov	ecx, [ebp+0Ch]
		mov	eax, [ecx]
		xor	edx, edx
		div	edi
		mov	[ecx], eax
		mov	eax, [esp+30h+arg_8]
		cmp	eax, ebx
		jz	short loc_1002AF31
		mov	[eax], edx

loc_1002AF31:				; CODE XREF: sub_1002AEE0+4Dj
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1002AF3A:				; CODE XREF: sub_1002AEE0+3Aj
		push	esi
		push	eax
		lea	eax, [esp+38h+var_20]
		push	eax
		mov	[esp+3Ch+var_4], ebx
		mov	[esp+3Ch+var_14], ebx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_1002B030
		lea	ecx, [esp+34h+var_10]
		push	ebp
		push	ecx
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_1002B030
		mov	ebx, [esp+34h+var_8]
		xor	ecx, ecx
		dec	ebx
		js	short loc_1002AFF1
		mov	ebp, [esp+34h+var_4]

loc_1002AF80:				; CODE XREF: sub_1002AEE0+10Bj
		mov	eax, [ebp+ebx*4+0]
		mov	[esp+34h+arg_4], eax
		test	ecx, ecx
		jz	short loc_1002AFAD
		lea	edx, [esp+34h+arg_4]
		push	edx
		lea	edx, [esp+38h+var_24]
		push	edx
		push	edi
		push	eax
		push	ecx
		call	sub_1002D8E0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_1002B030
		jmp	short loc_1002AFC7
; ---------------------------------------------------------------------------

loc_1002AFAD:				; CODE XREF: sub_1002AEE0+AAj
		cmp	eax, edi
		jb	short loc_1002AFBF
		xor	edx, edx
		div	edi
		mov	[esp+34h+var_24], eax
		mov	[esp+34h+arg_4], edx
		jmp	short loc_1002AFC7
; ---------------------------------------------------------------------------

loc_1002AFBF:				; CODE XREF: sub_1002AEE0+CFj
		mov	[esp+34h+var_24], 0

loc_1002AFC7:				; CODE XREF: sub_1002AEE0+CBj
					; sub_1002AEE0+DDj
		lea	eax, [esp+34h+var_20]
		push	1
		push	eax
		call	sub_10029230
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_1002B030
		dec	ebx
		mov	ecx, [esp+34h+var_24]
		mov	edx, [esp+34h+var_14]
		mov	[edx], ecx
		mov	ecx, [esp+34h+arg_4]
		jns	short loc_1002AF80
		mov	ebp, [esp+34h+arg_0]

loc_1002AFF1:				; CODE XREF: sub_1002AEE0+9Aj
		mov	eax, [esp+34h+arg_8]
		test	eax, eax
		jz	short loc_1002AFFF
		mov	ecx, [esp+34h+arg_4]
		mov	[eax], ecx

loc_1002AFFF:				; CODE XREF: sub_1002AEE0+117j
		mov	eax, [esp+34h+var_18]
		cmp	eax, 1
		jbe	short loc_1002B01E
		mov	edx, [esp+34h+var_14]
		lea	ecx, [edx+eax*4-4]

loc_1002B010:				; CODE XREF: sub_1002AEE0+13Cj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002B01E
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002B010

loc_1002B01E:				; CODE XREF: sub_1002AEE0+126j
					; sub_1002AEE0+133j
		mov	[esp+34h+var_18], eax
		lea	eax, [esp+34h+var_20]
		push	ebp
		push	eax
		call	sub_1002A050
		add	esp, 8

loc_1002B030:				; CODE XREF: sub_1002AEE0+75j
					; sub_1002AEE0+8Dj ...
		lea	ecx, [esp+34h+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+38h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 24h
		retn
sub_1002AEE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B060	proc near		; CODE XREF: sub_1002C4E0+15Ap
					; sub_1002C4E0+1F8p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 10h
		push	esi
		mov	esi, [esp+14h+arg_0]
		mov	eax, [esi+8]
		add	eax, eax
		push	eax
		lea	ecx, [esp+18h+var_10]
		push	ecx
		call	sub_10028D30
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002B0F9
		push	ebx
		push	ebp
		push	edi
		lea	edx, [esp+20h+var_10]
		push	edx
		push	esi
		call	sub_1002A440
		mov	ebx, eax
		add	esp, 8
		mov	[esp+20h+arg_0], ebx
		test	ebx, ebx
		jnz	short loc_1002B0CE
		mov	edi, [esi]
		mov	eax, [esp+20h+var_10]
		mov	edx, [esp+20h+var_8]
		mov	ebp, [esi+4]
		mov	ecx, [esp+20h+var_C]
		mov	ebx, [esp+20h+var_4]
		mov	[esp+20h+var_10], edi
		mov	edi, [esi+8]
		mov	[esp+20h+var_8], edi
		mov	edi, [esi+0Ch]
		mov	[esi], eax
		mov	[esi+4], ecx
		mov	[esi+8], edx
		mov	[esi+0Ch], ebx
		mov	ebx, [esp+20h+arg_0]
		jmp	short loc_1002B0D6
; ---------------------------------------------------------------------------

loc_1002B0CE:				; CODE XREF: sub_1002B060+38j
		mov	edi, [esp+20h+var_4]
		mov	ebp, [esp+20h+var_C]

loc_1002B0D6:				; CODE XREF: sub_1002B060+6Cj
		test	edi, edi
		jz	short loc_1002B0F4
		lea	eax, ds:0[ebp*4]
		push	eax		; Size
		push	0		; Val
		push	edi		; Dst
		call	memset
		push	edi		; Memory
		call	ds:free
		add	esp, 10h

loc_1002B0F4:				; CODE XREF: sub_1002B060+78j
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx

loc_1002B0F9:				; CODE XREF: sub_1002B060+1Dj
		pop	esi
		add	esp, 10h
		retn
sub_1002B060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B100	proc near		; CODE XREF: sub_1002C4E0+141p
					; sub_1002C4E0+177p ...

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
Dst		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		push	edi
		mov	edi, [esp+14h+arg_0]
		lea	eax, [esp+14h+var_10]
		push	edi
		push	eax
		call	sub_10028D90
		add	esp, 8
		test	eax, eax
		jnz	loc_1002B22B
		push	ebx
		push	esi
		mov	esi, [esp+1Ch+arg_4]
		mov	ecx, [esi+8]
		dec	ecx
		push	ecx
		lea	edx, [esp+20h+var_10]
		push	edx
		call	sub_100293C0
		mov	ecx, [esp+24h+arg_8]
		lea	eax, [esp+24h+var_10]
		push	eax
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A260
		mov	eax, [esi+8]
		inc	eax
		push	eax
		lea	ecx, [esp+34h+var_10]
		push	ecx
		call	sub_100293C0
		mov	edx, [esi+8]
		inc	edx
		shl	edx, 5
		push	edx
		push	edi
		call	sub_10029500
		lea	eax, [esp+40h+var_10]
		push	eax
		mov	ecx, eax
		push	esi
		push	ecx
		call	sub_1002A260
		mov	edx, [esi+8]
		inc	edx
		shl	edx, 5
		push	edx
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_10029500
		push	edi
		lea	ecx, [esp+58h+var_10]
		push	ecx
		push	edi
		call	sub_1002A1A0
		mov	ebx, eax
		add	esp, 44h
		test	ebx, ebx
		jnz	short loc_1002B201
		cmp	dword ptr [edi], 1
		jnz	short loc_1002B1D5
		lea	edx, [esp+1Ch+var_10]
		push	1
		push	edx
		call	sub_10028F70
		mov	eax, [esi+8]
		inc	eax
		push	eax
		lea	ecx, [esp+28h+var_10]
		push	ecx
		call	sub_10029230
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_1002B201
		push	edi
		lea	edx, [esp+20h+var_10]
		push	edx
		push	edi
		call	sub_1002A130
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	short loc_1002B201

loc_1002B1D5:				; CODE XREF: sub_1002B100+9Aj
		push	esi
		push	edi
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		js	short loc_1002B201

loc_1002B1E3:				; CODE XREF: sub_1002B100+FFj
		push	esi
		push	edi
		call	sub_100299B0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_1002B201
		push	esi
		push	edi
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	short loc_1002B1E3

loc_1002B201:				; CODE XREF: sub_1002B100+95j
					; sub_1002B100+BEj ...
		mov	esi, [esp+1Ch+Dst]
		test	esi, esi
		jz	short loc_1002B227
		mov	eax, [esp+1Ch+var_C]
		lea	ecx, ds:0[eax*4]
		push	ecx		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		push	esi		; Memory
		call	ds:free
		add	esp, 10h

loc_1002B227:				; CODE XREF: sub_1002B100+107j
		pop	esi
		mov	eax, ebx
		pop	ebx

loc_1002B22B:				; CODE XREF: sub_1002B100+18j
		pop	edi
		add	esp, 10h
		retn
sub_1002B100	endp


; =============== S U B	R O U T	I N E =======================================


sub_1002B230	proc near		; CODE XREF: sub_1002BC60+30p
					; sub_1002C760+Ap

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+8]
		push	esi
		mov	esi, [eax+0Ch]
		mov	eax, [esi+ecx*4-4]
		dec	ecx
		test	eax, eax
		jz	short loc_1002B2A0
		lea	edx, [eax-1]
		test	eax, edx
		jnz	short loc_1002B2A0
		xor	edx, edx
		test	eax, 0FFFF0000h
		jz	short loc_1002B259
		mov	edx, 10h

loc_1002B259:				; CODE XREF: sub_1002B230+22j
		test	eax, 0FF00FF00h
		jz	short loc_1002B263
		add	edx, 8

loc_1002B263:				; CODE XREF: sub_1002B230+2Ej
		test	eax, 0F0F0F0F0h
		jz	short loc_1002B26D
		add	edx, 4

loc_1002B26D:				; CODE XREF: sub_1002B230+38j
		test	eax, 0CCCCCCCCh
		jz	short loc_1002B277
		add	edx, 2

loc_1002B277:				; CODE XREF: sub_1002B230+42j
		test	eax, 0AAAAAAAAh
		jz	short loc_1002B27F
		inc	edx

loc_1002B27F:				; CODE XREF: sub_1002B230+4Cj
		mov	eax, edx
		test	edx, edx
		js	short loc_1002B2A3
		test	ecx, ecx
		jz	short loc_1002B2A3
		dec	ecx
		js	short loc_1002B2A3
		lea	edx, [esi+ecx*4]
		nop

loc_1002B290:				; CODE XREF: sub_1002B230+6Cj
		cmp	dword ptr [edx], 0
		jnz	short loc_1002B2A0
		add	eax, 20h
		sub	edx, 4
		dec	ecx
		jns	short loc_1002B290
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002B2A0:				; CODE XREF: sub_1002B230+12j
					; sub_1002B230+19j ...
		or	eax, 0FFFFFFFFh

loc_1002B2A3:				; CODE XREF: sub_1002B230+53j
					; sub_1002B230+57j ...
		pop	esi
		retn
sub_1002B230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B2B0	proc near		; CODE XREF: sub_100176A0+CEp
					; sub_10030450+1CEp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		mov	eax, ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		cdq
		push	edi
		mov	edi, eax
		xor	edi, edx
		sub	edi, edx
		test	esi, esi
		jnz	short loc_1002B2CF
		pop	edi
		lea	eax, [esi-4]
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002B2CF:				; CODE XREF: sub_1002B2B0+16j
		mov	eax, [esi+4]
		mov	ecx, [esi+0Ch]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	0		; Val
		push	ecx		; Dst
		call	memset
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		test	ebx, ebx
		jz	short loc_1002B303
		mov	edx, [esi+0Ch]
		mov	[edx], edi
		jns	short loc_1002B303
		mov	dword ptr [esi], 1

loc_1002B303:				; CODE XREF: sub_1002B2B0+44j
					; sub_1002B2B0+4Bj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_1002B2B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B310	proc near		; CODE XREF: sub_10019200+B6p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1002B320
		mov	eax, 0FFFFFFFCh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002B320:				; CODE XREF: sub_1002B310+7j
		mov	eax, [esi+4]
		mov	ecx, [esi+0Ch]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	0		; Val
		push	ecx		; Dst
		call	memset
		mov	eax, [esp+10h+arg_4]
		add	esp, 0Ch
		mov	dword ptr [esi+8], 1
		mov	dword ptr [esi], 0
		test	eax, eax
		jz	short loc_1002B350
		mov	edx, [esi+0Ch]
		mov	[edx], eax

loc_1002B350:				; CODE XREF: sub_1002B310+39j
		xor	eax, eax
		pop	esi
		retn
sub_1002B310	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B360	proc near		; CODE XREF: sub_10015F50+2CDp
					; sub_10019200+92p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		sub	esp, 10h
		push	esi
		test	eax, eax
		jz	loc_1002B44D
		mov	esi, [esp+14h+arg_8]
		test	esi, esi
		jz	loc_1002B44D
		push	ebp
		push	eax
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10028D90
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	loc_1002B447
		push	ebx
		push	edi
		cmp	[esp+20h+var_10], eax
		jnz	short loc_1002B3AE
		mov	ecx, [esp+20h+arg_4]
		push	ecx
		lea	edx, [esp+24h+var_10]
		push	edx
		call	sub_10029660
		jmp	short loc_1002B3CF
; ---------------------------------------------------------------------------

loc_1002B3AE:				; CODE XREF: sub_1002B360+3Bj
		mov	ebx, [esp+20h+arg_4]
		lea	eax, [esp+20h+var_10]
		push	ebx
		push	eax
		call	sub_10029CB0
		add	esp, 8
		test	eax, eax
		js	short loc_1002B3DE
		lea	ecx, [esp+20h+var_10]
		push	ebx
		push	ecx
		call	sub_100296D0

loc_1002B3CF:				; CODE XREF: sub_1002B360+4Cj
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_1002B436
		mov	edi, [esp+20h+var_4]
		jmp	short loc_1002B3F6
; ---------------------------------------------------------------------------

loc_1002B3DE:				; CODE XREF: sub_1002B360+62j
		lea	edx, [esp+20h+var_10]
		push	edx
		mov	eax, edx
		push	eax
		call	sub_1002A0E0
		mov	edi, [esp+28h+var_4]
		add	esp, 8
		sub	ebx, [edi]
		mov	[edi], ebx

loc_1002B3F6:				; CODE XREF: sub_1002B360+7Cj
		mov	edx, [esp+20h+var_8]
		cmp	edx, 1
		ja	short loc_1002B408
		cmp	dword ptr [edi], 0
		ja	short loc_1002B408
		xor	eax, eax
		jmp	short loc_1002B40C
; ---------------------------------------------------------------------------

loc_1002B408:				; CODE XREF: sub_1002B360+9Dj
					; sub_1002B360+A2j
		mov	eax, [esp+20h+var_10]

loc_1002B40C:				; CODE XREF: sub_1002B360+A6j
		mov	ebx, [esi]
		mov	ecx, [esp+20h+var_C]
		mov	[esp+20h+var_10], ebx
		mov	ebx, [esi+4]
		mov	[esp+20h+var_C], ebx
		mov	ebx, [esi+8]
		mov	[esp+20h+var_8], ebx
		mov	ebx, [esi+0Ch]
		mov	[esi], eax
		mov	[esi+4], ecx
		mov	[esi+8], edx
		mov	[esp+20h+var_4], ebx
		mov	[esi+0Ch], edi

loc_1002B436:				; CODE XREF: sub_1002B360+76j
		lea	ecx, [esp+20h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 4
		pop	edi
		mov	eax, ebp
		pop	ebx

loc_1002B447:				; CODE XREF: sub_1002B360+2Fj
		pop	ebp
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002B44D:				; CODE XREF: sub_1002B360+Aj
					; sub_1002B360+16j
		mov	eax, 0FFFFFFFCh
		pop	esi
		add	esp, 10h
		retn
sub_1002B360	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B460	proc near		; CODE XREF: sub_10015F50+1B2p
					; sub_10016760+140p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		sub	esp, 10h
		push	esi
		test	eax, eax
		jz	loc_1002B566
		mov	esi, [esp+14h+arg_8]
		test	esi, esi
		jz	loc_1002B566
		push	ebp
		push	eax
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10028D90
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	loc_1002B560
		cmp	[esp+18h+var_10], 1
		push	ebx
		push	edi
		jnz	short loc_1002B4C4
		mov	ecx, [esp+20h+arg_4]
		push	ecx
		lea	edx, [esp+24h+var_10]
		push	edx
		call	sub_10029660
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	loc_1002B54F
		mov	edi, [esp+20h+var_4]
		mov	eax, [esp+20h+var_10]
		jmp	short loc_1002B515
; ---------------------------------------------------------------------------

loc_1002B4C4:				; CODE XREF: sub_1002B460+3Cj
		mov	ebx, [esp+20h+arg_4]
		lea	eax, [esp+20h+var_10]
		push	ebx
		push	eax
		call	sub_10029CB0
		add	esp, 8
		test	eax, eax
		js	short loc_1002B4F8
		lea	ecx, [esp+20h+var_10]
		push	ebx
		push	ecx
		call	sub_100296D0
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	short loc_1002B54F
		mov	edi, [esp+20h+var_4]
		mov	eax, [esp+20h+var_10]
		jmp	short loc_1002B515
; ---------------------------------------------------------------------------

loc_1002B4F8:				; CODE XREF: sub_1002B460+78j
		lea	edx, [esp+20h+var_10]
		push	edx
		mov	eax, edx
		push	eax
		call	sub_1002A0E0
		mov	edi, [esp+28h+var_4]
		add	esp, 8
		sub	ebx, [edi]
		mov	eax, 1
		mov	[edi], ebx

loc_1002B515:				; CODE XREF: sub_1002B460+62j
					; sub_1002B460+96j
		mov	edx, [esp+20h+var_8]
		cmp	edx, 1
		ja	short loc_1002B525
		cmp	dword ptr [edi], 0
		ja	short loc_1002B525
		xor	eax, eax

loc_1002B525:				; CODE XREF: sub_1002B460+BCj
					; sub_1002B460+C1j
		mov	ebx, [esi]
		mov	ecx, [esp+20h+var_C]
		mov	[esp+20h+var_10], ebx
		mov	ebx, [esi+4]
		mov	[esp+20h+var_C], ebx
		mov	ebx, [esi+8]
		mov	[esp+20h+var_8], ebx
		mov	ebx, [esi+0Ch]
		mov	[esi], eax
		mov	[esi+4], ecx
		mov	[esi+8], edx
		mov	[esp+20h+var_4], ebx
		mov	[esi+0Ch], edi

loc_1002B54F:				; CODE XREF: sub_1002B460+54j
					; sub_1002B460+8Cj
		lea	ecx, [esp+20h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 4
		pop	edi
		mov	eax, ebp
		pop	ebx

loc_1002B560:				; CODE XREF: sub_1002B460+2Fj
		pop	ebp
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002B566:				; CODE XREF: sub_1002B460+Aj
					; sub_1002B460+16j
		mov	eax, 0FFFFFFFCh
		pop	esi
		add	esp, 10h
		retn
sub_1002B460	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1002B570(int,	int Val, int)
sub_1002B570	proc near		; CODE XREF: sub_10036D70:loc_10036DD8p

arg_0		= dword	ptr  4
Val		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_1002B5B2
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jz	short loc_1002B5B2
		push	edi
		mov	edi, [esp+8+Val]
		push	esi
		test	edi, edi
		jnz	short loc_1002B598
		call	sub_10028F40
		add	esp, 4
		xor	eax, eax

loc_1002B595:				; CODE XREF: sub_1002B570+33j
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002B598:				; CODE XREF: sub_1002B570+19j
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002B595
		push	edi		; Val
		push	esi		; int
		call	sub_1002AE30
		add	esp, 8
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002B5B2:				; CODE XREF: sub_1002B570+7j
					; sub_1002B570+Fj
		mov	eax, 0FFFFFFFCh
		pop	esi
		retn
sub_1002B570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B5C0	proc near		; CODE XREF: sub_1002B6F0+2Dp
					; sub_10036C70+83p ...

var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	edx, [esp+arg_0]
		sub	esp, 10h
		test	edx, edx
		jnz	short loc_1002B5D2
		lea	eax, [edx-4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002B5D2:				; CODE XREF: sub_1002B5C0+9j
		push	esi
		mov	esi, [esp+14h+arg_4]
		test	esi, esi
		jnz	short loc_1002B5E3
		lea	eax, [esi-3]
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002B5E3:				; CODE XREF: sub_1002B5C0+19j
		push	edi
		push	esi
		call	sub_10029CE0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		js	short loc_1002B62F
		mov	eax, [edx+0Ch]
		mov	esi, 1
		mov	ecx, edi
		shl	esi, cl
		push	ebx
		mov	ebx, [esp+1Ch+arg_8]
		dec	esi
		and	esi, [eax]
		test	ebx, ebx
		jz	short loc_1002B61C
		push	ebx
		push	edx
		call	sub_10028E00
		push	edi
		push	ebx
		call	sub_10029570
		add	esp, 10h

loc_1002B61C:				; CODE XREF: sub_1002B5C0+49j
		mov	eax, [esp+1Ch+arg_C]
		pop	ebx
		test	eax, eax
		jz	short loc_1002B627
		mov	[eax], esi

loc_1002B627:				; CODE XREF: sub_1002B5C0+63j
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002B62F:				; CODE XREF: sub_1002B5C0+31j
		push	edx
		lea	ecx, [esp+1Ch+var_10]
		push	ecx
		call	sub_10028D90
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002B69F
		lea	edx, [esp+18h+arg_0]
		push	edx
		lea	eax, [esp+1Ch+var_10]
		push	esi
		push	eax
		call	sub_1002AEE0
		lea	ecx, [esp+24h+var_10]
		push	0
		push	ecx
		mov	esi, eax
		call	sub_10029CB0
		add	esp, 14h
		test	eax, eax
		mov	eax, [esp+18h+arg_8]
		jnz	short loc_1002B670
		mov	dword ptr [eax], 0

loc_1002B670:				; CODE XREF: sub_1002B5C0+A8j
		mov	ecx, [esp+18h+arg_C]
		test	ecx, ecx
		jz	short loc_1002B67E
		mov	edx, [esp+18h+arg_0]
		mov	[ecx], edx

loc_1002B67E:				; CODE XREF: sub_1002B5C0+B6j
		test	eax, eax
		jz	short loc_1002B690
		push	eax
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_100291F0
		add	esp, 8

loc_1002B690:				; CODE XREF: sub_1002B5C0+C0j
		lea	ecx, [esp+18h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 4
		mov	eax, esi

loc_1002B69F:				; CODE XREF: sub_1002B5C0+7Fj
		pop	edi
		pop	esi
		add	esp, 10h
		retn
sub_1002B5C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B6B0	proc near		; CODE XREF: sub_10015F50+1CEp
					; sub_1001DD90+39Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		test	eax, eax
		jz	short loc_1002B6DE
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_1002B6DE
		push	esi
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002B6E3
		push	1
		push	esi
		call	sub_10029570
		add	esp, 8
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002B6DE:				; CODE XREF: sub_1002B6B0+7j
					; sub_1002B6B0+Fj
		mov	eax, 0FFFFFFFCh

loc_1002B6E3:				; CODE XREF: sub_1002B6B0+1Dj
		pop	esi
		retn
sub_1002B6B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B6F0	proc near		; CODE XREF: sub_100261C0+21p
					; sub_10026510+33p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		push	esi
		test	edx, edx
		jz	short loc_1002B748
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jz	short loc_1002B748
		cmp	dword ptr [edx+8], 1
		mov	eax, [esp+4+arg_4]
		ja	short loc_1002B714
		mov	ecx, [edx+0Ch]
		mov	ecx, [ecx]
		cmp	ecx, eax
		jbe	short loc_1002B733

loc_1002B714:				; CODE XREF: sub_1002B6F0+19j
		lea	ecx, [esp+4+arg_0]
		push	ecx
		push	0
		push	eax
		push	edx
		call	sub_1002B5C0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1002B74D
		mov	eax, [esp+4+arg_0]
		mov	[esi], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002B733:				; CODE XREF: sub_1002B6F0+22j
		cmp	dword ptr [edx], 1
		jnz	short loc_1002B740
		sub	eax, ecx
		mov	[esi], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002B740:				; CODE XREF: sub_1002B6F0+46j
		mov	eax, ecx
		mov	[esi], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002B748:				; CODE XREF: sub_1002B6F0+7j
					; sub_1002B6F0+Fj
		mov	eax, 0FFFFFFFCh

loc_1002B74D:				; CODE XREF: sub_1002B6F0+37j
		pop	esi
		retn
sub_1002B6F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B750	proc near		; CODE XREF: sub_10030BC0+13Bp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Dst		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 10h
		cmp	[esp+10h+arg_0], 0
		jnz	short loc_1002B760
		xor	eax, eax
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002B760:				; CODE XREF: sub_1002B750+8j
		mov	eax, dword_10049218
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	eax
		lea	ecx, [esp+24h+var_10]
		push	ecx
		call	sub_10028D30
		mov	edi, [esp+28h+arg_4]
		mov	ebp, [esp+28h+var_C]
		mov	ebx, [esp+28h+Dst]
		mov	eax, edi
		cdq
		add	ebp, ebp
		add	ebp, ebp
		push	ebp		; Size
		mov	esi, eax
		xor	esi, edx
		push	0		; Val
		push	ebx		; Dst
		sub	esi, edx
		call	memset
		xor	eax, eax
		add	esp, 14h
		mov	[esp+20h+var_8], 1
		mov	[esp+20h+var_10], eax
		test	edi, edi
		jz	short loc_1002B7B8
		mov	[ebx], esi
		jns	short loc_1002B7B8
		mov	eax, 1
		mov	[esp+20h+var_10], eax

loc_1002B7B8:				; CODE XREF: sub_1002B750+59j
					; sub_1002B750+5Dj
		mov	ecx, [esp+20h+arg_0]
		mov	esi, [ecx]
		cmp	esi, eax
		jnz	short loc_1002B7E6
		lea	edx, [esp+20h+var_10]
		push	edx
		push	ecx
		call	sub_10029C10
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002B7D8
		xor	esi, esi
		jmp	short loc_1002B7F1
; ---------------------------------------------------------------------------

loc_1002B7D8:				; CODE XREF: sub_1002B750+82j
		test	esi, esi
		jnz	short loc_1002B7E0
		mov	esi, eax
		jmp	short loc_1002B7F1
; ---------------------------------------------------------------------------

loc_1002B7E0:				; CODE XREF: sub_1002B750+8Aj
		neg	eax
		mov	esi, eax
		jmp	short loc_1002B7F1
; ---------------------------------------------------------------------------

loc_1002B7E6:				; CODE XREF: sub_1002B750+70j
		xor	eax, eax
		test	esi, esi
		setz	al
		lea	esi, [eax+eax-1]

loc_1002B7F1:				; CODE XREF: sub_1002B750+86j
					; sub_1002B750+8Ej ...
		test	ebx, ebx
		jz	short loc_1002B808
		push	ebp		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		push	ebx		; Memory
		call	ds:free
		add	esp, 10h

loc_1002B808:				; CODE XREF: sub_1002B750+A3j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_1002B750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002B820	proc near		; CODE XREF: sub_10019790+58Fp
					; sub_1001F880+32Bp ...

var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 30h
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+3Ch+arg_0]
		xor	ebx, ebx
		push	edi
		test	esi, esi
		jz	loc_1002BAA1
		mov	edi, [esp+40h+arg_4]
		test	edi, edi
		jz	loc_1002BAA1
		mov	ebp, [esp+40h+arg_8]
		test	ebp, ebp
		jz	loc_1002BAA1
		cmp	dword ptr [esi], 1
		jz	short loc_1002B897
		mov	ecx, [esi+8]
		cmp	ecx, 1
		jnz	short loc_1002B897
		mov	eax, [esi+0Ch]
		cmp	[eax], ebx
		jnz	short loc_1002B879
		push	edi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1002B879
		pop	edi
		pop	esi
		pop	ebp
		lea	eax, [ebx-3]
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002B879:				; CODE XREF: sub_1002B820+3Fj
					; sub_1002B820+4Cj
		cmp	ecx, 1
		jnz	short loc_1002B897
		mov	ecx, [esi+0Ch]
		cmp	[ecx], ebx
		jnz	short loc_1002B897
		push	ebp
		push	edi
		call	sub_10028E00
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002B897:				; CODE XREF: sub_1002B820+30j
					; sub_1002B820+38j ...
		push	edi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1002B8B6
		push	ebp
		push	esi
		call	sub_10028E00
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002B8B6:				; CODE XREF: sub_1002B820+82j
		mov	edx, dword_10049218
		push	edx
		lea	eax, [esp+44h+var_30]
		push	eax
		call	sub_10028D30
		add	esp, 8
		test	eax, eax
		jnz	loc_1002BAA6
		lea	ecx, [esp+40h+var_10]
		push	esi
		push	ecx
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002BA8A
		lea	edx, [esp+40h+var_20]
		push	edi
		push	edx
		call	sub_10028D90
		mov	esi, eax
		xor	edi, edi
		add	esp, 8
		cmp	esi, edi
		jnz	loc_1002BA7D
		lea	eax, [esp+40h+var_10]
		push	eax
		mov	[esp+44h+var_10], edi
		mov	[esp+44h+var_20], edi
		call	sub_10029000
		add	esp, 4
		test	eax, eax
		jz	short loc_1002B95B
		lea	ecx, [ecx+0]

loc_1002B920:				; CODE XREF: sub_1002B820+139j
		lea	ecx, [esp+40h+var_20]
		push	ecx
		call	sub_10029000
		add	esp, 4
		test	eax, eax
		jz	short loc_1002B95B
		lea	edx, [esp+40h+var_10]
		push	1
		push	edx
		call	sub_10029570
		lea	eax, [esp+48h+var_20]
		push	1
		push	eax
		call	sub_10029570
		lea	ecx, [esp+50h+var_10]
		push	ecx
		inc	ebx
		call	sub_10029000
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1002B920

loc_1002B95B:				; CODE XREF: sub_1002B820+FBj
					; sub_1002B820+10Fj
		mov	edx, [esp+40h+var_4]
		mov	eax, [edx]
		and	eax, 1
		lea	ecx, [esp+40h+var_30]
		push	ecx
		jz	short loc_1002B991
		lea	edx, [esp+44h+var_20]
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jnz	loc_1002BA70
		xor	eax, eax
		cmp	[esp+40h+var_20], edi
		setz	al
		mov	[esp+40h+var_30], eax
		jmp	short loc_1002B9B0
; ---------------------------------------------------------------------------

loc_1002B991:				; CODE XREF: sub_1002B820+149j
		lea	edx, [esp+44h+var_10]
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jnz	loc_1002BA70
		jmp	short loc_1002B9B0
; ---------------------------------------------------------------------------
		align 10h

loc_1002B9B0:				; CODE XREF: sub_1002B820+16Fj
					; sub_1002B820+188j ...
		mov	eax, [esp+40h+var_24]
		mov	ecx, [eax]
		and	ecx, 1
		jnz	short loc_1002B9CC
		lea	edx, [esp+40h+var_30]
		push	1
		push	edx
		call	sub_10029570
		add	esp, 8
		jmp	short loc_1002B9B0
; ---------------------------------------------------------------------------

loc_1002B9CC:				; CODE XREF: sub_1002B820+199j
		lea	eax, [esp+40h+var_30]
		push	eax
		call	sub_10028FB0
		add	esp, 4
		cmp	eax, 1
		jnz	short loc_1002B9F8
		lea	ecx, [esp+40h+var_10]
		push	ecx
		lea	edx, [esp+44h+var_30]
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jnz	short loc_1002BA70
		jmp	short loc_1002BA1D
; ---------------------------------------------------------------------------

loc_1002B9F8:				; CODE XREF: sub_1002B820+1BCj
		lea	eax, [esp+40h+var_20]
		push	eax
		lea	ecx, [esp+44h+var_30]
		push	ecx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jnz	short loc_1002BA70
		xor	edx, edx
		cmp	[esp+40h+var_30], edi
		setz	dl
		mov	[esp+40h+var_20], edx

loc_1002BA1D:				; CODE XREF: sub_1002B820+1D6j
		lea	eax, [esp+40h+var_30]
		push	eax
		lea	ecx, [esp+44h+var_20]
		push	ecx
		lea	edx, [esp+48h+var_10]
		push	edx
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, edi
		jnz	short loc_1002BA70
		lea	eax, [esp+40h+var_30]
		push	edi
		push	eax
		call	sub_10029CB0
		add	esp, 8
		test	eax, eax
		jnz	loc_1002B9B0
		lea	ecx, [esp+40h+var_20]
		push	ebx
		push	ecx
		call	sub_10029B70
		push	ebp
		lea	edx, [esp+4Ch+var_20]
		push	edx
		lea	eax, [esp+50h+var_10]
		push	eax
		call	sub_1002A260
		add	esp, 14h
		mov	esi, eax

loc_1002BA70:				; CODE XREF: sub_1002B820+15Cj
					; sub_1002B820+182j ...
		lea	ecx, [esp+40h+var_20]
		push	ecx
		call	sub_10028EF0
		add	esp, 4

loc_1002BA7D:				; CODE XREF: sub_1002B820+DEj
		lea	edx, [esp+40h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4

loc_1002BA8A:				; CODE XREF: sub_1002B820+C4j
		lea	eax, [esp+40h+var_30]
		push	eax
		call	sub_10028EF0
		add	esp, 4
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002BAA1:				; CODE XREF: sub_1002B820+Fj
					; sub_1002B820+1Bj ...
		mov	eax, 0FFFFFFFCh

loc_1002BAA6:				; CODE XREF: sub_1002B820+ACj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 30h
		retn
sub_1002B820	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1002BAB0(int,	int, int Val)
sub_1002BAB0	proc near		; CODE XREF: sub_1002E140+BCp
					; sub_1002E140+D9p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Val		= dword	ptr  0Ch

		push	ecx
		mov	eax, [esp+4+arg_0]
		push	ebx
		push	ebp
		push	edi
		xor	edi, edi
		mov	[esp+10h+var_4], edi
		cmp	eax, edi
		jz	loc_1002BC48
		mov	ebx, [esp+10h+arg_4]
		cmp	ebx, edi
		jz	loc_1002BC48
		mov	ebp, [esp+10h+Val]
		lea	ecx, [ebp-2]
		cmp	ecx, 3Eh
		ja	loc_1002BC48
		push	esi
		push	eax
		call	sub_10028F40
		add	esp, 4
		cmp	byte ptr [ebx],	0
		jz	short loc_1002BB38

loc_1002BAF1:				; CODE XREF: sub_1002BAB0+86j
		mov	al, [edi+ebx]
		cmp	ebp, 24h
		jle	short loc_1002BAFE
		movsx	esi, al
		jmp	short loc_1002BB0D
; ---------------------------------------------------------------------------

loc_1002BAFE:				; CODE XREF: sub_1002BAB0+47j
		movsx	edx, al
		push	edx		; C
		call	ds:toupper
		add	esp, 4
		mov	esi, eax

loc_1002BB0D:				; CODE XREF: sub_1002BAB0+4Cj
		push	esi		; C
		call	ds:isdigit
		add	esp, 4
		test	eax, eax
		jz	short loc_1002BB49
		lea	eax, [esi-30h]

loc_1002BB1E:				; CODE XREF: sub_1002BAB0+AAj
					; sub_1002BAB0+BDj
		test	eax, eax
		js	short loc_1002BB26

loc_1002BB22:				; CODE XREF: sub_1002BAB0+C7j
					; sub_1002BAB0+D1j
		cmp	eax, ebp
		jl	short loc_1002BB38

loc_1002BB26:				; CODE XREF: sub_1002BAB0+70j
					; sub_1002BAB0+CCj
		mov	al, [edi+ebx]
		cmp	al, 2Dh
		jz	short loc_1002BB38
		cmp	al, 2Bh
		jz	short loc_1002BB38
		inc	edi
		cmp	byte ptr [edi+ebx], 0
		jnz	short loc_1002BAF1

loc_1002BB38:				; CODE XREF: sub_1002BAB0+3Fj
					; sub_1002BAB0+74j ...
		mov	al, [edi+ebx]
		cmp	al, 2Dh
		jnz	short loc_1002BB83
		mov	[esp+14h+var_4], 1
		jmp	short loc_1002BB8F
; ---------------------------------------------------------------------------

loc_1002BB49:				; CODE XREF: sub_1002BAB0+69j
		push	esi		; C
		call	ds:isupper
		add	esp, 4
		test	eax, eax
		jz	short loc_1002BB5C
		lea	eax, [esi-37h]
		jmp	short loc_1002BB1E
; ---------------------------------------------------------------------------

loc_1002BB5C:				; CODE XREF: sub_1002BAB0+A5j
		push	esi		; C
		call	ds:islower
		add	esp, 4
		test	eax, eax
		jz	short loc_1002BB6F
		lea	eax, [esi-3Dh]
		jmp	short loc_1002BB1E
; ---------------------------------------------------------------------------

loc_1002BB6F:				; CODE XREF: sub_1002BAB0+B8j
		cmp	esi, 2Bh
		jnz	short loc_1002BB79
		lea	eax, [esi+13h]
		jmp	short loc_1002BB22
; ---------------------------------------------------------------------------

loc_1002BB79:				; CODE XREF: sub_1002BAB0+C2j
		cmp	esi, 2Fh
		jnz	short loc_1002BB26
		lea	eax, [esi+10h]
		jmp	short loc_1002BB22
; ---------------------------------------------------------------------------

loc_1002BB83:				; CODE XREF: sub_1002BAB0+8Dj
		cmp	al, 2Bh
		jnz	short loc_1002BB90
		mov	[esp+14h+var_4], 0

loc_1002BB8F:				; CODE XREF: sub_1002BAB0+97j
		inc	edi

loc_1002BB90:				; CODE XREF: sub_1002BAB0+D5j
		add	edi, ebx

loc_1002BB92:				; CODE XREF: sub_1002BAB0+137j
		mov	al, [edi]
		cmp	ebp, 24h
		jle	short loc_1002BB9E
		movsx	esi, al
		jmp	short loc_1002BBAD
; ---------------------------------------------------------------------------

loc_1002BB9E:				; CODE XREF: sub_1002BAB0+E7j
		movsx	eax, al
		push	eax		; C
		call	ds:toupper
		add	esp, 4
		mov	esi, eax

loc_1002BBAD:				; CODE XREF: sub_1002BAB0+ECj
		push	esi		; C
		call	ds:isdigit
		add	esp, 4
		test	eax, eax
		jz	short loc_1002BBE9
		add	esi, 0FFFFFFD0h

loc_1002BBBE:				; CODE XREF: sub_1002BAB0+14Aj
					; sub_1002BAB0+15Dj
		test	esi, esi
		js	short loc_1002BC27

loc_1002BBC2:				; CODE XREF: sub_1002BAB0+169j
					; sub_1002BAB0+175j
		cmp	esi, ebp
		jge	short loc_1002BC27
		mov	ebx, [esp+14h+arg_0]
		push	ebp		; Val
		push	ebx		; int
		call	sub_1002AE30
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002BC42
		push	esi
		push	ebx
		call	sub_10029660
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002BC42
		inc	edi
		jmp	short loc_1002BB92
; ---------------------------------------------------------------------------

loc_1002BBE9:				; CODE XREF: sub_1002BAB0+109j
		push	esi		; C
		call	ds:isupper
		add	esp, 4
		test	eax, eax
		jz	short loc_1002BBFC
		add	esi, 0FFFFFFC9h
		jmp	short loc_1002BBBE
; ---------------------------------------------------------------------------

loc_1002BBFC:				; CODE XREF: sub_1002BAB0+145j
		push	esi		; C
		call	ds:islower
		add	esp, 4
		test	eax, eax
		jz	short loc_1002BC0F
		add	esi, 0FFFFFFC3h
		jmp	short loc_1002BBBE
; ---------------------------------------------------------------------------

loc_1002BC0F:				; CODE XREF: sub_1002BAB0+158j
		cmp	esi, 2Bh
		jnz	short loc_1002BC1B
		mov	esi, 3Eh
		jmp	short loc_1002BBC2
; ---------------------------------------------------------------------------

loc_1002BC1B:				; CODE XREF: sub_1002BAB0+162j
		cmp	esi, 2Fh
		jnz	short loc_1002BC27
		mov	esi, 3Fh
		jmp	short loc_1002BBC2
; ---------------------------------------------------------------------------

loc_1002BC27:				; CODE XREF: sub_1002BAB0+110j
					; sub_1002BAB0+114j ...
		mov	edx, [esp+14h+arg_0]
		push	0
		push	edx
		call	sub_10029CB0
		add	esp, 8
		neg	eax
		sbb	eax, eax
		and	eax, [esp+14h+var_4]
		mov	[edx], eax
		xor	eax, eax

loc_1002BC42:				; CODE XREF: sub_1002BAB0+126j
					; sub_1002BAB0+134j
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1002BC48:				; CODE XREF: sub_1002BAB0+10j
					; sub_1002BAB0+1Cj ...
		pop	edi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		pop	ecx
		retn
sub_1002BAB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002BC60	proc near		; CODE XREF: sub_1002BF60+143p

Val		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
Dst		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 34h
		push	ebx
		mov	ebx, [esp+38h+arg_4]
		cmp	dword ptr [ebx], 1
		jz	short loc_1002BC85
		cmp	dword ptr [ebx+8], 1
		jnz	short loc_1002BC85
		mov	eax, [ebx+0Ch]
		cmp	dword ptr [eax], 0
		jnz	short loc_1002BC85
		mov	eax, 0FFFFFFFDh
		pop	ebx
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1002BC85:				; CODE XREF: sub_1002BC60+Bj
					; sub_1002BC60+11j ...
		push	esi
		push	edi
		push	ebx
		mov	[esp+44h+Dst], 0
		call	sub_1002B230
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_1002BCD2
		mov	edi, [esp+40h+arg_8]
		mov	ebx, [esp+40h+arg_0]
		push	edi
		push	ebx
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	loc_1002BF56
		push	esi
		push	edi
		call	sub_10029570
		push	esi
		push	ebx
		call	sub_10029500
		add	esp, 10h
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1002BCD2:				; CODE XREF: sub_1002BC60+3Cj
		mov	edi, [esp+40h+arg_0]
		mov	dword ptr [edi], 0
		mov	dword ptr [ebx], 0
		mov	ecx, [edi+4]
		push	ecx
		lea	edx, [esp+44h+var_10]
		push	edx
		call	sub_10028D30
		add	esp, 8
		mov	[esp+40h+var_30], eax
		test	eax, eax
		js	loc_1002BF2C
		lea	eax, [esp+40h+var_28]
		push	eax
		push	ebx
		push	edi
		call	sub_10029610
		add	esp, 0Ch
		mov	[esp+40h+var_30], eax
		test	eax, eax
		js	loc_1002BF2C
		mov	eax, [edi+8]
		mov	ecx, [edi]
		mov	edx, [edi+4]
		mov	[esp+40h+var_18], eax
		mov	eax, [esp+40h+arg_8]
		mov	[esp+40h+var_20], ecx
		mov	ecx, [edi+0Ch]
		mov	[esp+40h+var_1C], edx
		mov	edx, [eax+4]
		mov	[esp+40h+var_14], ecx
		mov	[eax+8], edx
		push	ebp

loc_1002BD40:				; CODE XREF: sub_1002BC60+279j
		mov	esi, [edi+8]
		mov	ebp, [ebx+8]
		cmp	esi, ebp
		ja	short loc_1002BD5C
		push	ebx
		push	edi
		call	sub_10029C10
		add	esp, 8
		test	eax, eax
		js	loc_1002BEEA

loc_1002BD5C:				; CODE XREF: sub_1002BC60+E8j
		mov	ecx, [edi+0Ch]
		mov	edi, [edi+4]
		mov	edx, [esp+44h+arg_4]
		sub	esi, ebp
		mov	eax, esi
		lea	esi, [ecx+eax*4]
		sub	edi, eax
		mov	[esp+44h+var_2C], eax
		push	edx
		lea	eax, [esp+48h+var_20]
		mov	ebx, ebp
		push	eax
		mov	[esp+4Ch+var_14], esi
		mov	[esp+4Ch+var_1C], edi
		mov	[esp+4Ch+var_18], ebx
		call	sub_10029C10
		add	esp, 8
		test	eax, eax
		jns	short loc_1002BDA8
		dec	[esp+44h+var_2C]
		sub	esi, 4
		inc	ebx
		inc	edi
		mov	[esp+44h+var_14], esi
		mov	[esp+44h+var_18], ebx
		mov	[esp+44h+var_1C], edi

loc_1002BDA8:				; CODE XREF: sub_1002BC60+131j
		mov	eax, [esi+ebx*4-4]
		mov	edi, [esp+44h+arg_4]
		mov	ecx, [edi+0Ch]
		mov	[esp+44h+Val], eax
		mov	ebp, [ecx+ebp*4-4]
		cmp	eax, ebp
		jb	short loc_1002BDC9
		mov	[esp+44h+Val], 1
		jmp	short loc_1002BE02
; ---------------------------------------------------------------------------

loc_1002BDC9:				; CODE XREF: sub_1002BC60+15Dj
		cmp	ebx, 1
		jbe	loc_1002BEDE
		lea	edx, [esp+44h+var_24]
		push	edx
		mov	edx, [esi+ebx*4-8]
		lea	ecx, [esp+48h+Val]
		push	ecx
		push	ebp
		push	edx
		push	eax
		call	sub_1002D8E0
		add	esp, 14h
		mov	[esp+44h+var_30], eax
		test	eax, eax
		js	loc_1002BF2B
		cmp	[esp+44h+Val], 0
		jbe	loc_1002BEE6

loc_1002BE02:				; CODE XREF: sub_1002BC60+167j
		lea	eax, [esp+44h+var_10]
		push	eax
		push	edi
		call	sub_10028E00
		mov	ecx, [esp+4Ch+Val]
		push	ecx		; Val
		lea	edx, [esp+50h+var_10]
		push	edx		; int
		call	sub_1002AE30
		add	esp, 10h
		mov	[esp+44h+var_30], eax
		test	eax, eax
		js	loc_1002BF2B
		lea	eax, [esp+44h+var_20]
		push	eax
		lea	ecx, [esp+48h+var_10]
		push	ecx
		mov	esi, 4
		call	sub_10029C10
		add	esp, 8
		test	eax, eax
		jle	short loc_1002BE78

loc_1002BE46:				; CODE XREF: sub_1002BC60+20Ej
		test	esi, esi
		jle	short loc_1002BE72
		dec	[esp+44h+Val]
		lea	edx, [esp+44h+var_10]
		push	edi
		push	edx
		call	sub_100299B0
		lea	eax, [esp+4Ch+var_20]
		push	eax
		lea	ecx, [esp+50h+var_10]
		push	ecx
		dec	esi
		call	sub_10029C10
		add	esp, 10h
		test	eax, eax
		jg	short loc_1002BE46
		test	esi, esi

loc_1002BE72:				; CODE XREF: sub_1002BC60+1E8j
		js	loc_1002BF23

loc_1002BE78:				; CODE XREF: sub_1002BC60+1E4j
		lea	edx, [esp+44h+var_10]
		push	edx
		lea	eax, [esp+48h+var_20]
		push	eax
		call	sub_100299B0
		add	esp, 8
		mov	[esp+44h+var_30], eax
		test	eax, eax
		js	loc_1002BF2B
		mov	edx, [esp+44h+arg_0]
		mov	eax, [edx+8]
		cmp	eax, 1
		jbe	short loc_1002BEBE
		mov	ecx, [edx+0Ch]
		lea	ecx, [ecx+eax*4-4]
		lea	esp, [esp+0]

loc_1002BEB0:				; CODE XREF: sub_1002BC60+25Cj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002BEBE
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002BEB0

loc_1002BEBE:				; CODE XREF: sub_1002BC60+240j
					; sub_1002BC60+253j
		mov	ecx, [esp+44h+Val]
		mov	[edx+8], eax
		mov	edx, [esp+44h+arg_8]
		mov	eax, [edx+0Ch]
		mov	edx, [esp+44h+var_2C]
		mov	ebx, edi
		mov	edi, [esp+44h+arg_0]
		mov	[eax+edx*4], ecx
		jmp	loc_1002BD40
; ---------------------------------------------------------------------------

loc_1002BEDE:				; CODE XREF: sub_1002BC60+16Cj
		mov	[esp+44h+Val], 0

loc_1002BEE6:				; CODE XREF: sub_1002BC60+19Cj
		mov	edi, [esp+44h+arg_0]

loc_1002BEEA:				; CODE XREF: sub_1002BC60+F6j
		mov	eax, [esp+44h+var_28]
		test	eax, eax
		jz	short loc_1002BEFC
		push	eax
		push	edi
		call	sub_10029570
		add	esp, 8

loc_1002BEFC:				; CODE XREF: sub_1002BC60+290j
		mov	edx, [esp+44h+arg_8]
		mov	eax, [edx+8]
		cmp	eax, 1
		jbe	short loc_1002BF1E
		mov	ecx, [edx+0Ch]
		lea	ecx, [ecx+eax*4-4]
		nop

loc_1002BF10:				; CODE XREF: sub_1002BC60+2BCj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002BF1E
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002BF10

loc_1002BF1E:				; CODE XREF: sub_1002BC60+2A6j
					; sub_1002BC60+2B3j
		mov	[edx+8], eax
		jmp	short loc_1002BF2B
; ---------------------------------------------------------------------------

loc_1002BF23:				; CODE XREF: sub_1002BC60:loc_1002BE72j
		mov	[esp+44h+var_30], 0FFFFFFFDh

loc_1002BF2B:				; CODE XREF: sub_1002BC60+191j
					; sub_1002BC60+1C5j ...
		pop	ebp

loc_1002BF2C:				; CODE XREF: sub_1002BC60+99j
					; sub_1002BC60+B4j
		mov	esi, [esp+40h+Dst]
		test	esi, esi
		jz	short loc_1002BF52
		mov	edx, [esp+40h+var_C]
		lea	eax, ds:0[edx*4]
		push	eax		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		push	esi		; Memory
		call	ds:free
		add	esp, 10h

loc_1002BF52:				; CODE XREF: sub_1002BC60+2D2j
		mov	eax, [esp+40h+var_30]

loc_1002BF56:				; CODE XREF: sub_1002BC60+52j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 34h
		retn
sub_1002BC60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002BF60	proc near		; CODE XREF: sub_10019790+2BAp
					; sub_10019790+397p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 38h
		push	ebx
		mov	ebx, [esp+3Ch+arg_0]
		xor	ecx, ecx
		push	ebp
		cmp	ebx, ecx
		jz	loc_1002C13F
		mov	ebp, [esp+40h+arg_4]
		cmp	ebp, ecx
		jz	loc_1002C13F
		mov	eax, [ebx]
		mov	[esp+40h+var_38], eax
		mov	eax, [ebp+0]
		mov	[esp+40h+var_34], eax
		cmp	eax, 1
		jz	short loc_1002BFA7
		cmp	dword ptr [ebp+8], 1
		jnz	short loc_1002BFA7
		mov	edx, [ebp+0Ch]
		cmp	[edx], ecx
		jnz	short loc_1002BFA7
		pop	ebp
		lea	eax, [ecx-3]
		pop	ebx
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_1002BFA7:				; CODE XREF: sub_1002BF60+2Fj
					; sub_1002BF60+35j ...
		push	esi
		push	edi
		mov	edi, [esp+48h+arg_C]
		mov	[esp+48h+var_4], ecx
		mov	[esp+48h+var_14], ecx
		mov	[esp+48h+var_24], ecx
		cmp	edi, ecx
		jz	short loc_1002BFDF
		cmp	edi, ebx
		jz	short loc_1002BFDF
		cmp	edi, ebp
		jz	short loc_1002BFDF
		push	edi
		push	ebx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002C114
		mov	[esp+48h+arg_0], edi
		jmp	short loc_1002BFFF
; ---------------------------------------------------------------------------

loc_1002BFDF:				; CODE XREF: sub_1002BF60+5Bj
					; sub_1002BF60+5Fj ...
		lea	eax, [esp+48h+var_20]
		push	ebx
		push	eax
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002C114
		lea	ecx, [esp+48h+var_20]
		mov	[esp+48h+arg_0], ecx

loc_1002BFFF:				; CODE XREF: sub_1002BF60+7Dj
		mov	edi, [esp+48h+arg_8]
		test	edi, edi
		jz	short loc_1002C033
		cmp	edi, ebx
		jz	short loc_1002C033
		cmp	edi, ebp
		jz	short loc_1002C033
		mov	edx, [ebx+8]
		push	edx
		push	edi
		call	sub_100291A0
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002C114
		mov	eax, edi
		push	eax
		call	sub_10028F40
		add	esp, 4
		jmp	short loc_1002C052
; ---------------------------------------------------------------------------

loc_1002C033:				; CODE XREF: sub_1002BF60+A5j
					; sub_1002BF60+A9j ...
		mov	ecx, [ebx+8]
		push	ecx
		lea	edx, [esp+4Ch+var_10]
		push	edx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002C114
		lea	edi, [esp+48h+var_10]

loc_1002C052:				; CODE XREF: sub_1002BF60+D1j
		push	ebp
		push	ebx
		call	sub_10029C10
		add	esp, 8
		test	eax, eax
		jg	short loc_1002C084
		jz	short loc_1002C06D
		push	edi
		call	sub_10028F40
		add	esp, 4
		jmp	short loc_1002C0B1
; ---------------------------------------------------------------------------

loc_1002C06D:				; CODE XREF: sub_1002BF60+100j
		push	1
		push	edi
		call	sub_10028F70
		mov	ebx, [esp+50h+arg_0]
		push	ebx
		call	sub_10028F40
		add	esp, 0Ch
		jmp	short loc_1002C0B5
; ---------------------------------------------------------------------------

loc_1002C084:				; CODE XREF: sub_1002BF60+FEj
		lea	eax, [esp+48h+var_30]
		push	ebp
		push	eax
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_1002C114
		mov	edx, [esp+48h+arg_0]
		push	edi
		lea	ecx, [esp+4Ch+var_30]
		push	ecx
		push	edx
		call	sub_1002BC60
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002C114

loc_1002C0B1:				; CODE XREF: sub_1002BF60+10Bj
		mov	ebx, [esp+48h+arg_0]

loc_1002C0B5:				; CODE XREF: sub_1002BF60+122j
		mov	eax, [esp+48h+var_38]
		xor	ecx, ecx
		cmp	eax, [esp+48h+var_34]
		push	0
		setnz	cl
		mov	[ebx], eax
		push	edi
		mov	[edi], ecx
		call	sub_10029CB0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002C0D7
		mov	[edi], eax

loc_1002C0D7:				; CODE XREF: sub_1002BF60+173j
		push	0
		push	ebx
		call	sub_10029CB0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002C0E8
		mov	[ebx], eax

loc_1002C0E8:				; CODE XREF: sub_1002BF60+184j
		mov	eax, [esp+48h+arg_8]
		test	eax, eax
		jz	short loc_1002C0FE
		cmp	eax, edi
		jz	short loc_1002C0FE
		push	eax
		push	edi
		call	sub_100291F0
		add	esp, 8

loc_1002C0FE:				; CODE XREF: sub_1002BF60+18Ej
					; sub_1002BF60+192j
		mov	eax, [esp+48h+arg_C]
		test	eax, eax
		jz	short loc_1002C114
		cmp	eax, ebx
		jz	short loc_1002C114
		push	eax
		push	ebx
		call	sub_100291F0
		add	esp, 8

loc_1002C114:				; CODE XREF: sub_1002BF60+73j
					; sub_1002BF60+91j ...
		lea	edx, [esp+48h+var_30]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+4Ch+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+50h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 0Ch
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_1002C13F:				; CODE XREF: sub_1002BF60+Dj
					; sub_1002BF60+19j
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 38h
		retn
sub_1002BF60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C150	proc near		; CODE XREF: sub_100163F0+1B8p
					; sub_100176A0+104p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		push	edi
		test	ebx, ebx
		jz	loc_1002C1E0
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jz	short loc_1002C1E0
		mov	esi, [esp+0Ch+arg_8]
		test	esi, esi
		jz	short loc_1002C1E0
		cmp	dword ptr [edi], 1
		jnz	short loc_1002C17D
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFDh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002C17D:				; CODE XREF: sub_1002C150+22j
		push	edi
		push	ebx
		call	sub_10029C10
		add	esp, 8
		push	esi
		test	eax, eax
		jle	short loc_1002C1B4
		push	0
		push	edi
		push	ebx
		call	sub_1002BF60
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1002C1E5
		cmp	dword ptr [esi], 1
		jnz	short loc_1002C1DA

loc_1002C1A1:				; CODE XREF: sub_1002C150+80j
		push	esi
		push	edi
		push	esi
		call	sub_1002A130
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1002C1DA
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002C1B4:				; CODE XREF: sub_1002C150+3Aj
		jns	short loc_1002C1D2
		push	ebx
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002C1E5
		push	ebx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jns	short loc_1002C1DA
		jmp	short loc_1002C1A1
; ---------------------------------------------------------------------------

loc_1002C1D2:				; CODE XREF: sub_1002C150:loc_1002C1B4j
		call	sub_10028F40
		add	esp, 4

loc_1002C1DA:				; CODE XREF: sub_1002C150+4Fj
					; sub_1002C150+5Ej ...
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002C1E0:				; CODE XREF: sub_1002C150+9j
					; sub_1002C150+15j ...
		mov	eax, 0FFFFFFFCh

loc_1002C1E5:				; CODE XREF: sub_1002C150+4Aj
					; sub_1002C150+71j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1002C150	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C1F0	proc near		; CODE XREF: sub_1001DD90+3F2p

var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 20h
		push	ebp
		push	edi
		mov	edi, [esp+28h+arg_0]
		test	edi, edi
		jz	loc_1002C39D
		mov	ebp, [esp+28h+arg_4]
		test	ebp, ebp
		jz	loc_1002C39D
		push	ebx
		mov	ebx, 1
		cmp	[edi], ebx
		jnz	short loc_1002C221
		lea	eax, [ebx-4]

loc_1002C21A:				; CODE XREF: sub_1002C1F0+64j
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002C221:				; CODE XREF: sub_1002C1F0+25j
		mov	ecx, [edi+8]
		cmp	ecx, ebx
		ja	short loc_1002C244
		mov	eax, [edi+0Ch]
		mov	eax, [eax]
		cmp	eax, ebx
		jb	short loc_1002C233
		ja	short loc_1002C244

loc_1002C233:				; CODE XREF: sub_1002C1F0+3Fj
		push	ebp
		push	edi
		call	sub_10028E00
		add	esp, 8
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002C244:				; CODE XREF: sub_1002C1F0+36j
					; sub_1002C1F0+41j
		push	ecx
		lea	ecx, [esp+30h+var_20]
		push	ecx
		call	sub_10028D30
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002C21A
		push	esi
		lea	edx, [esp+30h+var_10]
		push	edi
		push	edx
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002C386
		mov	eax, [esp+30h+var_8]
		cmp	eax, ebx
		jbe	short loc_1002C287
		shr	eax, 1
		push	eax
		lea	eax, [esp+34h+var_10]
		push	eax
		call	sub_100293C0
		add	esp, 8

loc_1002C287:				; CODE XREF: sub_1002C1F0+85j
		lea	ecx, [esp+30h+var_20]
		push	ecx
		lea	edx, [esp+34h+var_10]
		push	edx
		call	sub_10028E00
		lea	eax, [esp+38h+var_20]
		push	eax
		mov	ecx, eax
		push	ecx
		call	sub_1002A440
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	loc_1002C379

loc_1002C2B0:				; CODE XREF: sub_1002C1F0+165j
		lea	edx, [esp+30h+var_20]
		push	edx
		mov	eax, edx
		push	edi
		push	eax
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002C379
		lea	ecx, [esp+30h+var_10]
		push	ecx
		call	sub_10029430
		push	esi
		lea	edx, [esp+38h+var_20]
		push	edx
		lea	eax, [esp+3Ch+var_10]
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002BF60
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1002C379
		lea	edx, [esp+30h+var_10]
		push	ebx
		push	edx
		call	sub_10029570
		add	esp, 8
		cmp	[esp+30h+var_20], ebx
		jz	short loc_1002C317
		cmp	[esp+30h+var_18], ebx
		jnz	short loc_1002C317
		mov	eax, [esp+30h+var_14]
		cmp	[eax], esi
		jz	short loc_1002C35D

loc_1002C317:				; CODE XREF: sub_1002C1F0+117j
					; sub_1002C1F0+11Dj
		lea	ecx, [esp+30h+var_10]
		push	ecx
		lea	edx, [esp+34h+var_20]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002C379
		lea	ecx, [esp+30h+var_20]
		push	ecx
		lea	edx, [esp+34h+var_10]
		push	edx
		call	sub_10028E00
		lea	eax, [esp+38h+var_20]
		push	eax
		mov	ecx, eax
		push	ecx
		call	sub_1002A440
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_1002C2B0
		jmp	short loc_1002C379
; ---------------------------------------------------------------------------

loc_1002C35D:				; CODE XREF: sub_1002C1F0+125j
		lea	edx, [esp+30h+var_10]
		push	edx
		mov	eax, edx
		push	ebx
		push	eax
		call	sub_1002B460
		lea	ecx, [esp+3Ch+var_10]
		push	ebp
		push	ecx
		call	sub_100291F0
		add	esp, 14h

loc_1002C379:				; CODE XREF: sub_1002C1F0+BAj
					; sub_1002C1F0+D5j ...
		lea	edx, [esp+30h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4

loc_1002C386:				; CODE XREF: sub_1002C1F0+79j
		lea	eax, [esp+30h+var_20]
		push	eax
		call	sub_10028EF0
		add	esp, 4
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002C39D:				; CODE XREF: sub_1002C1F0+Bj
					; sub_1002C1F0+17j
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	ebp
		add	esp, 20h
		retn
sub_1002C1F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C3B0	proc near		; CODE XREF: sub_10016A60+274p
					; sub_10017CC0+37Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		push	esi
		push	edi
		test	ecx, ecx
		jz	short loc_1002C3EF
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jz	short loc_1002C3EF
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jz	short loc_1002C3EF
		mov	esi, [esp+8+arg_C]
		test	esi, esi
		jz	short loc_1002C3EF
		push	esi
		push	eax
		push	ecx
		call	sub_1002A130
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002C3F4
		push	esi
		push	edi
		push	esi
		call	sub_1002C150
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002C3EF:				; CODE XREF: sub_1002C3B0+8j
					; sub_1002C3B0+10j ...
		mov	eax, 0FFFFFFFCh

loc_1002C3F4:				; CODE XREF: sub_1002C3B0+2Fj
		pop	edi
		pop	esi
		retn
sub_1002C3B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C400	proc near		; CODE XREF: sub_1001EA20+254p
					; sub_10024BB0+50Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		push	esi
		push	edi
		test	ecx, ecx
		jz	short loc_1002C43F
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jz	short loc_1002C43F
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jz	short loc_1002C43F
		mov	esi, [esp+8+arg_C]
		test	esi, esi
		jz	short loc_1002C43F
		push	esi
		push	eax
		push	ecx
		call	sub_1002A1A0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002C444
		push	esi
		push	edi
		push	esi
		call	sub_1002C150
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002C43F:				; CODE XREF: sub_1002C400+8j
					; sub_1002C400+10j ...
		mov	eax, 0FFFFFFFCh

loc_1002C444:				; CODE XREF: sub_1002C400+2Fj
		pop	edi
		pop	esi
		retn
sub_1002C400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C450	proc near		; CODE XREF: sub_10017CC0+35Bp
					; sub_10017CC0+39Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		push	esi
		push	edi
		test	ecx, ecx
		jz	short loc_1002C48F
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jz	short loc_1002C48F
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jz	short loc_1002C48F
		mov	esi, [esp+8+arg_C]
		test	esi, esi
		jz	short loc_1002C48F
		push	esi
		push	eax
		push	ecx
		call	sub_1002A260
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002C494
		push	esi
		push	edi
		push	esi
		call	sub_1002C150
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002C48F:				; CODE XREF: sub_1002C450+8j
					; sub_1002C450+10j ...
		mov	eax, 0FFFFFFFCh

loc_1002C494:				; CODE XREF: sub_1002C450+2Fj
		pop	edi
		pop	esi
		retn
sub_1002C450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C4A0	proc near		; CODE XREF: sub_100262E0+19Ap
					; .text:100301C2p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		test	eax, eax
		jz	short loc_1002C4D6
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	short loc_1002C4D6
		mov	esi, [esp+8+arg_8]
		test	esi, esi
		jz	short loc_1002C4D6
		push	esi
		push	eax
		call	sub_1002A440
		add	esp, 8
		test	eax, eax
		jnz	short loc_1002C4DB
		push	esi
		push	edi
		push	esi
		call	sub_1002C150
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002C4D6:				; CODE XREF: sub_1002C4A0+8j
					; sub_1002C4A0+10j ...
		mov	eax, 0FFFFFFFCh

loc_1002C4DB:				; CODE XREF: sub_1002C4A0+26j
		pop	edi
		pop	esi
		retn
sub_1002C4A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C4E0	proc near		; CODE XREF: sub_100288A0+25p

var_30		= byte ptr -30h
var_20		= byte ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 30h
		push	esi
		mov	esi, [esp+34h+arg_0]
		push	edi
		test	esi, esi
		jz	loc_1002C752
		mov	edi, [esp+38h+arg_4]
		test	edi, edi
		jz	loc_1002C752
		cmp	[esp+38h+arg_C], 0
		jz	loc_1002C752
		cmp	dword ptr [edi], 1
		push	ebp
		jz	loc_1002C746
		mov	ebp, [esp+3Ch+arg_8]
		push	ebp
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jle	loc_1002C746
		mov	eax, dword_10049218
		push	eax
		lea	ecx, [esp+40h+var_10]
		push	ecx
		call	sub_10028D30
		add	esp, 8
		test	eax, eax
		jnz	loc_1002C73F
		lea	edx, [esp+3Ch+var_20]
		push	esi
		push	edx
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002C730
		lea	eax, [esp+3Ch+var_20]
		push	eax
		mov	ecx, eax
		push	ebp
		push	ecx
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002C730
		mov	edx, dword_10049218
		push	edx
		lea	eax, [esp+40h+var_30]
		push	eax
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	loc_1002C723
		lea	ecx, [esp+3Ch+var_10]
		push	1
		push	ecx
		call	sub_10028F70
		lea	edx, [esp+44h+var_30]
		push	1
		push	edx
		call	sub_10029660
		mov	eax, [ebp+8]
		add	eax, eax
		push	eax
		lea	ecx, [esp+50h+var_30]
		push	ecx
		call	sub_10029230
		push	esi
		lea	edx, [esp+58h+var_30]
		push	edx
		mov	eax, edx
		push	ebp
		push	eax
		call	sub_1002BF60
		mov	esi, eax
		add	esp, 28h
		test	esi, esi
		jnz	loc_1002C716
		mov	ecx, [edi+8]
		dec	ecx
		push	ebx
		mov	[esp+40h+arg_0], eax
		jz	loc_1002C68A

loc_1002C5E6:				; CODE XREF: sub_1002C4E0+1A4j
		mov	edx, [edi+0Ch]
		mov	eax, [esp+40h+arg_0]
		mov	ebx, [edx+eax*4]
		xor	edi, edi

loc_1002C5F2:				; CODE XREF: sub_1002C4E0+18Dj
		test	bl, 1
		jz	short loc_1002C633
		lea	ecx, [esp+40h+var_10]
		push	ecx
		lea	edx, [esp+44h+var_20]
		push	edx
		mov	eax, ecx
		push	eax
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002C715
		lea	ecx, [esp+40h+var_30]
		push	ecx
		lea	edx, [esp+44h+var_10]
		push	ebp
		push	edx
		call	sub_1002B100
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002C715

loc_1002C633:				; CODE XREF: sub_1002C4E0+115j
		lea	eax, [esp+40h+var_20]
		push	eax
		shr	ebx, 1
		call	sub_1002B060
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	loc_1002C715
		lea	ecx, [esp+40h+var_30]
		push	ecx
		lea	edx, [esp+44h+var_20]
		push	ebp
		push	edx
		call	sub_1002B100
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	loc_1002C715
		inc	edi
		cmp	edi, 20h
		jb	short loc_1002C5F2
		mov	ecx, [esp+40h+arg_4]
		mov	eax, [esp+40h+arg_0]
		mov	edx, [ecx+8]
		inc	eax
		dec	edx
		mov	[esp+40h+arg_0], eax
		mov	edi, ecx
		cmp	eax, edx
		jb	loc_1002C5E6

loc_1002C68A:				; CODE XREF: sub_1002C4E0+100j
		mov	eax, [edi+0Ch]
		mov	ecx, [esp+40h+arg_0]
		mov	ebx, [eax+ecx*4]
		test	ebx, ebx
		jz	short loc_1002C703

loc_1002C698:				; CODE XREF: sub_1002C4E0+221j
		test	bl, 1
		jz	short loc_1002C6D1
		lea	edx, [esp+40h+var_10]
		push	edx
		lea	eax, [esp+44h+var_20]
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002C715
		lea	edx, [esp+40h+var_30]
		push	edx
		lea	eax, [esp+44h+var_10]
		push	ebp
		push	eax
		call	sub_1002B100
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002C715

loc_1002C6D1:				; CODE XREF: sub_1002C4E0+1BBj
		lea	ecx, [esp+40h+var_20]
		push	ecx
		shr	ebx, 1
		call	sub_1002B060
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1002C715
		lea	edx, [esp+40h+var_30]
		push	edx
		lea	eax, [esp+44h+var_20]
		push	ebp
		push	eax
		call	sub_1002B100
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1002C715
		test	ebx, ebx
		jnz	short loc_1002C698

loc_1002C703:				; CODE XREF: sub_1002C4E0+1B6j
		mov	ecx, [esp+40h+arg_C]
		push	ecx
		lea	edx, [esp+44h+var_10]
		push	edx
		call	sub_100291F0
		add	esp, 8

loc_1002C715:				; CODE XREF: sub_1002C4E0+130j
					; sub_1002C4E0+14Dj ...
		pop	ebx

loc_1002C716:				; CODE XREF: sub_1002C4E0+F1j
		lea	eax, [esp+3Ch+var_30]
		push	eax
		call	sub_10028EF0
		add	esp, 4

loc_1002C723:				; CODE XREF: sub_1002C4E0+ADj
		lea	ecx, [esp+3Ch+var_20]
		push	ecx
		call	sub_10028EF0
		add	esp, 4

loc_1002C730:				; CODE XREF: sub_1002C4E0+74j
					; sub_1002C4E0+8Fj
		lea	edx, [esp+3Ch+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4
		mov	eax, esi

loc_1002C73F:				; CODE XREF: sub_1002C4E0+5Cj
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002C746:				; CODE XREF: sub_1002C4E0+2Cj
					; sub_1002C4E0+41j
		pop	ebp
		pop	edi
		mov	eax, 0FFFFFFFDh
		pop	esi
		add	esp, 30h
		retn
; ---------------------------------------------------------------------------

loc_1002C752:				; CODE XREF: sub_1002C4E0+Bj
					; sub_1002C4E0+17j ...
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	esi
		add	esp, 30h
		retn
sub_1002C4E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002C760	proc near		; CODE XREF: sub_1002CAC0+6Ap

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_5C		= dword	ptr -5Ch
Dst		= dword	ptr -54h
var_50		= byte ptr -50h
var_4C		= dword	ptr -4Ch
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_3C		= dword	ptr -3Ch
Memory		= dword	ptr -34h
var_30		= byte ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 70h
		push	ebp
		mov	ebp, [esp+74h+arg_4]
		push	edi
		push	ebp
		call	sub_1002B230
		xor	edi, edi
		add	esp, 4
		cmp	eax, edi
		jl	short loc_1002C786
		pop	edi
		pop	ebp
		add	esp, 70h
		mov	[esp+arg_4], eax
		jmp	sub_1002AB80
; ---------------------------------------------------------------------------

loc_1002C786:				; CODE XREF: sub_1002C760+16j
		push	ebx
		push	esi
		lea	eax, [esp+80h+var_60]
		push	ebp
		push	eax
		mov	[esp+88h+Dst], edi
		mov	[esp+88h+Memory], edi
		mov	[esp+88h+var_44], edi
		mov	[esp+88h+var_24], edi
		mov	[esp+88h+var_14], edi
		mov	[esp+88h+var_4], edi
		mov	[esp+88h+var_64], edi
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1002C9B6
		mov	ecx, dword_10049218
		push	ecx
		lea	edx, [esp+84h+var_40]
		push	edx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1002C9B6
		mov	eax, dword_10049218
		push	eax
		lea	ecx, [esp+84h+var_50]
		push	ecx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1002C9B6
		mov	edx, dword_10049218
		push	edx
		lea	eax, [esp+84h+var_30]
		push	eax
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1002C9B6
		mov	ecx, dword_10049218
		push	ecx
		lea	edx, [esp+84h+var_20]
		push	edx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1002C9B6
		mov	eax, dword_10049218
		push	eax
		lea	ecx, [esp+84h+var_10]
		push	ecx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1002C9B6
		mov	edx, dword_10049218
		push	edx
		lea	eax, [esp+84h+var_70]
		push	eax
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		cmp	esi, edi
		jl	loc_1002C9B6
		push	ebp
		call	sub_10029030
		mov	edi, eax
		lea	ecx, [esp+84h+var_60]
		push	edi
		push	ecx
		call	sub_10029570
		lea	edx, [esp+8Ch+var_40]
		push	edi
		push	edx
		call	sub_10029B70
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_1002C9B4
		mov	ebx, [esp+80h+arg_0]
		lea	eax, [esp+80h+var_50]
		push	eax
		lea	ecx, [esp+84h+var_60]
		push	ecx
		push	ebx
		call	sub_1002AA70
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C9B4
		lea	edx, [esp+80h+var_30]
		push	edx
		push	edi
		push	ebx
		call	sub_1002AB80
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C9B4
		lea	eax, [esp+80h+var_20]
		push	eax
		lea	ecx, [esp+84h+var_60]
		push	edi
		push	ecx
		call	sub_1002AB80
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C9B4
		lea	edx, [esp+80h+var_10]
		push	edx
		lea	eax, [esp+84h+var_50]
		push	eax
		lea	ecx, [esp+88h+var_30]
		push	ecx
		call	sub_1002A1A0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C9B4
		lea	edx, [esp+80h+var_70]
		push	edx
		lea	eax, [esp+84h+var_20]
		push	eax
		lea	ecx, [esp+88h+var_10]
		push	ecx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002C9B4
		lea	edx, [esp+80h+var_70]
		push	edi
		push	edx
		call	sub_10029500
		add	esp, 8
		cmp	[esp+80h+var_70], 0
		jz	short loc_1002C972
		lea	ecx, [ecx+0]

loc_1002C950:				; CODE XREF: sub_1002C760+210j
		lea	eax, [esp+80h+var_70]
		push	eax
		lea	ecx, [esp+84h+var_40]
		push	ecx
		mov	edx, eax
		push	edx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002C9B4
		cmp	[esp+80h+var_70], 0
		jnz	short loc_1002C950

loc_1002C972:				; CODE XREF: sub_1002C760+1EBj
		mov	edi, [esp+80h+arg_8]
		push	edi
		lea	eax, [esp+84h+var_60]
		push	eax
		lea	ecx, [esp+88h+var_70]
		push	ecx
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002C9B4
		push	edi
		lea	edx, [esp+84h+var_50]
		push	edi
		push	edx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002C9B4
		push	edi
		push	ebp
		push	edi
		call	sub_1002C150
		add	esp, 0Ch
		mov	esi, eax

loc_1002C9B4:				; CODE XREF: sub_1002C760+136j
					; sub_1002C760+15Aj ...
		xor	edi, edi

loc_1002C9B6:				; CODE XREF: sub_1002C760+59j
					; sub_1002C760+77j ...
		mov	ebx, [esp+80h+Dst]
		cmp	ebx, edi
		mov	edi, ds:free
		jz	short loc_1002C9DE
		mov	eax, [esp+80h+var_5C]
		lea	ecx, ds:0[eax*4]
		push	ecx		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		push	ebx		; Memory
		call	edi ; free
		add	esp, 10h

loc_1002C9DE:				; CODE XREF: sub_1002C760+262j
		mov	ebx, [esp+80h+Memory]
		test	ebx, ebx
		jz	short loc_1002CA00
		mov	edx, [esp+80h+var_3C]
		lea	eax, ds:0[edx*4]
		push	eax		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		push	ebx		; Memory
		call	edi ; free
		add	esp, 10h

loc_1002CA00:				; CODE XREF: sub_1002C760+284j
		mov	ebx, [esp+80h+var_44]
		test	ebx, ebx
		jz	short loc_1002CA22
		mov	ecx, [esp+80h+var_4C]
		lea	edx, ds:0[ecx*4]
		push	edx		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		push	ebx		; Memory
		call	edi ; free
		add	esp, 10h

loc_1002CA22:				; CODE XREF: sub_1002C760+2A6j
		mov	ebx, [esp+80h+var_24]
		test	ebx, ebx
		jz	short loc_1002CA44
		mov	eax, [esp+80h+var_2C]
		lea	ecx, ds:0[eax*4]
		push	ecx		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		push	ebx		; Memory
		call	edi ; free
		add	esp, 10h

loc_1002CA44:				; CODE XREF: sub_1002C760+2C8j
		mov	ebx, [esp+80h+var_14]
		test	ebx, ebx
		jz	short loc_1002CA66
		mov	edx, [esp+80h+var_1C]
		lea	eax, ds:0[edx*4]
		push	eax		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		push	ebx		; Memory
		call	edi ; free
		add	esp, 10h

loc_1002CA66:				; CODE XREF: sub_1002C760+2EAj
		mov	ebx, [esp+80h+var_4]
		test	ebx, ebx
		jz	short loc_1002CA88
		mov	ecx, [esp+80h+var_C]
		lea	edx, ds:0[ecx*4]
		push	edx		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		push	ebx		; Memory
		call	edi ; free
		add	esp, 10h

loc_1002CA88:				; CODE XREF: sub_1002C760+30Cj
		mov	ebx, [esp+80h+var_64]
		test	ebx, ebx
		jz	short loc_1002CAAA
		mov	eax, [esp+80h+var_6C]
		lea	ecx, ds:0[eax*4]
		push	ecx		; Size
		push	0		; Val
		push	ebx		; Dst
		call	memset
		push	ebx		; Memory
		call	edi ; free
		add	esp, 10h

loc_1002CAAA:				; CODE XREF: sub_1002C760+32Ej
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		add	esp, 70h
		retn
sub_1002C760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CAC0	proc near		; CODE XREF: sub_10017CC0+339p
					; sub_10018220+256p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		push	esi
		push	edi
		test	edx, edx
		jz	short loc_1002CB3D
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_1002CB3D
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jz	short loc_1002CB3D
		cmp	dword ptr [edx], 1
		jz	short loc_1002CAED
		cmp	dword ptr [edx+8], 1
		jnz	short loc_1002CAED
		mov	eax, [edx+0Ch]
		cmp	dword ptr [eax], 0
		jz	short loc_1002CB35

loc_1002CAED:				; CODE XREF: sub_1002CAC0+1Dj
					; sub_1002CAC0+23j
		push	esi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jz	short loc_1002CB35
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		and	eax, 1
		jz	short loc_1002CB12
		push	edi
		push	esi
		push	edx
		call	sub_1002AA70
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002CB12:				; CODE XREF: sub_1002CAC0+42j
		push	edx
		call	sub_10029000
		add	esp, 4
		test	eax, eax
		jz	short loc_1002CB27
		pop	edi
		mov	eax, 0FFFFFFFBh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002CB27:				; CODE XREF: sub_1002CAC0+5Dj
		push	edi
		push	esi
		push	edx
		call	sub_1002C760
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002CB35:				; CODE XREF: sub_1002CAC0+2Bj
					; sub_1002CAC0+38j
		pop	edi
		mov	eax, 0FFFFFFFDh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002CB3D:				; CODE XREF: sub_1002CAC0+8j
					; sub_1002CAC0+10j ...
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	esi
		retn
sub_1002CAC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CB50	proc near		; CODE XREF: sub_1000D600+5Fp
					; sub_1000D7C0+FCp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	eax, [ecx+8]
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [edx+8]
		cmp	eax, edi
		jb	short loc_1002CB70
		mov	esi, [ecx+0Ch]
		mov	ebp, [edx+0Ch]
		mov	ebx, eax
		jmp	short loc_1002CB7A
; ---------------------------------------------------------------------------

loc_1002CB70:				; CODE XREF: sub_1002CB50+14j
		mov	esi, [edx+0Ch]
		mov	ebp, [ecx+0Ch]
		mov	ebx, edi
		mov	edi, eax

loc_1002CB7A:				; CODE XREF: sub_1002CB50+1Ej
		mov	eax, [esp+10h+arg_8]
		push	ebx
		push	eax
		call	sub_100291A0
		add	esp, 8
		mov	[esp+10h+arg_0], eax
		test	eax, eax
		js	short loc_1002CBFD
		mov	edx, [esp+10h+arg_8]
		mov	ecx, [edx+0Ch]
		xor	eax, eax
		test	edi, edi
		jz	short loc_1002CBB8
		mov	edx, ebp
		sub	edx, esi
		mov	eax, edi

loc_1002CBA3:				; CODE XREF: sub_1002CB50+62j
		mov	ebp, [edx+esi]
		xor	ebp, [esi]
		add	ecx, 4
		mov	[ecx-4], ebp
		add	esi, 4
		dec	edi
		jnz	short loc_1002CBA3
		mov	edx, [esp+10h+arg_8]

loc_1002CBB8:				; CODE XREF: sub_1002CB50+4Bj
		cmp	eax, ebx
		jnb	short loc_1002CBD1
		mov	edx, ebx
		sub	ecx, esi
		sub	edx, eax

loc_1002CBC2:				; CODE XREF: sub_1002CB50+7Bj
		mov	eax, [esi]
		mov	[ecx+esi], eax
		add	esi, 4
		dec	edx
		jnz	short loc_1002CBC2
		mov	edx, [esp+10h+arg_8]

loc_1002CBD1:				; CODE XREF: sub_1002CB50+6Aj
		mov	[edx+8], ebx
		mov	dword ptr [edx], 0
		mov	ecx, ebx
		cmp	ebx, 1
		jbe	short loc_1002CBF6
		mov	eax, [edx+0Ch]
		lea	ebx, [eax+ebx*4-4]

loc_1002CBE8:				; CODE XREF: sub_1002CB50+A4j
		cmp	dword ptr [ebx], 0
		jnz	short loc_1002CBF6
		dec	ecx
		sub	ebx, 4
		cmp	ecx, 1
		ja	short loc_1002CBE8

loc_1002CBF6:				; CODE XREF: sub_1002CB50+8Fj
					; sub_1002CB50+9Bj
		mov	eax, [esp+10h+arg_0]
		mov	[edx+8], ecx

loc_1002CBFD:				; CODE XREF: sub_1002CB50+3Ej
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1002CB50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CC10	proc near		; CODE XREF: sub_1002D0B0+CDp

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 58h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+58h+var_4], eax
		mov	eax, [esp+58h+arg_4]
		push	edi
		mov	edi, ecx
		xor	ecx, ecx
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_54], ecx
		cmp	[esp+5Ch+arg_0], ecx
		jz	loc_1002CE3F
		mov	eax, esi
		shr	eax, 3
		and	eax, 7
		lea	ecx, [esp+eax*4+5Ch+var_24]
		mov	[esp+5Ch+var_30], ecx
		mov	edx, esi
		and	edx, 7
		lea	eax, [esp+edx*4+5Ch+var_24]
		mov	[esp+5Ch+var_48], eax
		mov	ecx, esi
		shr	ecx, 6
		and	ecx, 7
		lea	edx, [esp+ecx*4+5Ch+var_24]
		mov	[esp+5Ch+var_28], edx
		mov	eax, esi
		shr	eax, 9
		and	eax, 7
		lea	ecx, [esp+eax*4+5Ch+var_24]
		mov	[esp+5Ch+var_40], ecx
		mov	edx, esi
		shr	edx, 0Ch
		and	edx, 7
		lea	eax, [esp+edx*4+5Ch+var_24]
		mov	[esp+5Ch+var_50], eax
		mov	ecx, esi
		shr	ecx, 0Fh
		and	ecx, 7
		lea	edx, [esp+ecx*4+5Ch+var_24]
		mov	[esp+5Ch+var_38], edx
		mov	eax, esi
		shr	eax, 12h
		and	eax, 7
		lea	ecx, [esp+eax*4+5Ch+var_24]
		mov	[esp+5Ch+var_4C], ecx
		mov	edx, esi
		shr	edx, 15h
		and	edx, 7
		lea	eax, [esp+edx*4+5Ch+var_24]
		mov	ecx, esi
		shr	ecx, 18h
		mov	[esp+5Ch+var_44], eax
		and	ecx, 7
		lea	edx, [esp+ecx*4+5Ch+var_24]
		mov	eax, esi
		shr	eax, 1Bh
		mov	[esp+5Ch+var_3C], edx
		and	eax, 7
		mov	edx, esi
		lea	ecx, [esp+eax*4+5Ch+var_24]
		shr	edx, 1Eh
		lea	eax, [esp+edx*4+5Ch+var_24]
		push	ebx
		mov	[esp+60h+var_34], ecx
		mov	[esp+60h+var_2C], eax
		push	ebp

loc_1002CCE5:				; CODE XREF: sub_1002CC10+215j
		mov	eax, [edi]
		mov	ebx, eax
		and	eax, 3FFFFFFFh
		lea	edx, [eax+eax]
		mov	ebp, edx
		xor	ebp, eax
		lea	ecx, [edx+edx]
		mov	[esp+64h+var_18], ebp
		mov	[esp+64h+var_14], ecx
		mov	[esp+64h+var_1C], edx
		mov	ebp, ecx
		xor	ecx, edx
		mov	edx, [esp+64h+var_48]
		xor	ebp, eax
		mov	[esp+64h+var_10], ebp
		mov	[esp+64h+var_C], ecx
		xor	ecx, eax
		mov	[esp+64h+var_8], ecx
		mov	ecx, [esp+64h+var_30]
		mov	[esp+64h+var_20], eax
		mov	[esp+64h+var_24], 0
		mov	ecx, [ecx]
		lea	eax, ds:0[ecx*8]
		xor	eax, [edx]
		mov	edx, [esp+64h+var_28]
		mov	edx, [edx]
		mov	ebp, edx
		shr	edx, 1Ah
		shl	ebp, 6
		xor	eax, ebp
		shr	ecx, 1Dh
		xor	ecx, edx
		mov	edx, [esp+64h+var_40]
		mov	edx, [edx]
		mov	ebp, edx
		shr	edx, 17h
		xor	ecx, edx
		mov	edx, [esp+64h+var_50]
		mov	edx, [edx]
		shl	ebp, 9
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 14h
		xor	ecx, edx
		mov	edx, [esp+64h+var_38]
		mov	edx, [edx]
		shl	ebp, 0Ch
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 11h
		xor	ecx, edx
		mov	edx, [esp+64h+var_4C]
		mov	edx, [edx]
		shl	ebp, 0Fh
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 0Eh
		dec	[esp+64h+arg_0]
		xor	ecx, edx
		mov	edx, [esp+64h+var_44]
		mov	edx, [edx]
		shl	ebp, 12h
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 0Bh
		xor	ecx, edx
		mov	edx, [esp+64h+var_3C]
		mov	edx, [edx]
		shl	ebp, 15h
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 8
		xor	ecx, edx
		mov	edx, [esp+64h+var_34]
		mov	edx, [edx]
		shl	ebp, 18h
		xor	eax, ebp
		mov	ebp, edx
		add	edi, 4
		shr	ebx, 1Eh
		shl	ebp, 1Bh
		shr	edx, 5
		xor	ecx, edx
		mov	edx, [esp+64h+var_2C]
		mov	edx, [edx]
		xor	eax, ebp
		mov	ebp, edx
		shl	ebp, 1Eh
		shr	edx, 2
		xor	eax, ebp
		xor	ecx, edx
		test	bl, 1
		jz	short loc_1002CDF9
		mov	edx, esi
		shl	edx, 1Eh
		xor	eax, edx
		mov	edx, esi
		shr	edx, 2
		xor	ecx, edx

loc_1002CDF9:				; CODE XREF: sub_1002CC10+1D9j
		test	bl, 2
		jz	short loc_1002CE0B
		mov	edx, esi
		shl	edx, 1Fh
		xor	eax, edx
		mov	edx, esi
		shr	edx, 1
		xor	ecx, edx

loc_1002CE0B:				; CODE XREF: sub_1002CC10+1ECj
		xor	eax, [esp+64h+var_54]
		mov	edx, [esp+64h+var_58]
		mov	[edx], eax
		add	edx, 4
		cmp	[esp+64h+arg_0], 0
		mov	[esp+64h+var_58], edx
		mov	[esp+64h+var_54], ecx
		jnz	loc_1002CCE5
		pop	ebp
		pop	ebx
		mov	[edx], ecx
		pop	edi
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_1002CE3F:				; CODE XREF: sub_1002CC10+23j
		mov	[eax], ecx
		mov	ecx, [esp+5Ch+var_4]
		pop	edi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
sub_1002CC10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002CE60	proc near		; CODE XREF: sub_1002D0B0+11Ep

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 58h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+58h+var_4], eax
		mov	eax, [esp+58h+arg_4]
		push	edi
		mov	edi, ecx
		xor	ecx, ecx
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_54], ecx
		cmp	[esp+5Ch+arg_0], ecx
		jz	loc_1002D094
		mov	eax, esi
		shr	eax, 3
		and	eax, 7
		lea	ecx, [esp+eax*4+5Ch+var_24]
		mov	[esp+5Ch+var_30], ecx
		mov	edx, esi
		and	edx, 7
		lea	eax, [esp+edx*4+5Ch+var_24]
		mov	[esp+5Ch+var_48], eax
		mov	ecx, esi
		shr	ecx, 6
		and	ecx, 7
		lea	edx, [esp+ecx*4+5Ch+var_24]
		mov	[esp+5Ch+var_28], edx
		mov	eax, esi
		shr	eax, 9
		and	eax, 7
		lea	ecx, [esp+eax*4+5Ch+var_24]
		mov	[esp+5Ch+var_40], ecx
		mov	edx, esi
		shr	edx, 0Ch
		and	edx, 7
		lea	eax, [esp+edx*4+5Ch+var_24]
		mov	[esp+5Ch+var_50], eax
		mov	ecx, esi
		shr	ecx, 0Fh
		and	ecx, 7
		lea	edx, [esp+ecx*4+5Ch+var_24]
		mov	[esp+5Ch+var_38], edx
		mov	eax, esi
		shr	eax, 12h
		and	eax, 7
		lea	ecx, [esp+eax*4+5Ch+var_24]
		mov	[esp+5Ch+var_4C], ecx
		mov	edx, esi
		shr	edx, 15h
		and	edx, 7
		lea	eax, [esp+edx*4+5Ch+var_24]
		mov	ecx, esi
		shr	ecx, 18h
		mov	[esp+5Ch+var_44], eax
		and	ecx, 7
		lea	edx, [esp+ecx*4+5Ch+var_24]
		mov	eax, esi
		shr	eax, 1Bh
		mov	[esp+5Ch+var_3C], edx
		and	eax, 7
		mov	edx, esi
		lea	ecx, [esp+eax*4+5Ch+var_24]
		shr	edx, 1Eh
		lea	eax, [esp+edx*4+5Ch+var_24]
		push	ebx
		mov	[esp+60h+var_34], ecx
		mov	[esp+60h+var_2C], eax
		push	ebp

loc_1002CF35:				; CODE XREF: sub_1002CE60+21Aj
		mov	eax, [edi]
		mov	ebx, eax
		and	eax, 3FFFFFFFh
		lea	edx, [eax+eax]
		mov	ebp, edx
		xor	ebp, eax
		lea	ecx, [edx+edx]
		mov	[esp+64h+var_18], ebp
		mov	[esp+64h+var_14], ecx
		mov	[esp+64h+var_1C], edx
		mov	ebp, ecx
		xor	ecx, edx
		mov	edx, [esp+64h+var_48]
		xor	ebp, eax
		mov	[esp+64h+var_10], ebp
		mov	[esp+64h+var_C], ecx
		xor	ecx, eax
		mov	[esp+64h+var_8], ecx
		mov	ecx, [esp+64h+var_30]
		mov	[esp+64h+var_20], eax
		mov	[esp+64h+var_24], 0
		mov	ecx, [ecx]
		lea	eax, ds:0[ecx*8]
		xor	eax, [edx]
		mov	edx, [esp+64h+var_28]
		mov	edx, [edx]
		mov	ebp, edx
		shr	edx, 1Ah
		shl	ebp, 6
		xor	eax, ebp
		shr	ecx, 1Dh
		xor	ecx, edx
		mov	edx, [esp+64h+var_40]
		mov	edx, [edx]
		mov	ebp, edx
		shr	edx, 17h
		xor	ecx, edx
		mov	edx, [esp+64h+var_50]
		mov	edx, [edx]
		shl	ebp, 9
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 14h
		xor	ecx, edx
		mov	edx, [esp+64h+var_38]
		mov	edx, [edx]
		shl	ebp, 0Ch
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 11h
		xor	ecx, edx
		mov	edx, [esp+64h+var_4C]
		mov	edx, [edx]
		shl	ebp, 0Fh
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 0Eh
		dec	[esp+64h+arg_0]
		xor	ecx, edx
		mov	edx, [esp+64h+var_44]
		mov	edx, [edx]
		shl	ebp, 12h
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 0Bh
		xor	ecx, edx
		mov	edx, [esp+64h+var_3C]
		mov	edx, [edx]
		shl	ebp, 15h
		xor	eax, ebp
		mov	ebp, edx
		shr	edx, 8
		xor	ecx, edx
		mov	edx, [esp+64h+var_34]
		mov	edx, [edx]
		shl	ebp, 18h
		xor	eax, ebp
		mov	ebp, edx
		add	edi, 4
		shr	ebx, 1Eh
		shl	ebp, 1Bh
		shr	edx, 5
		xor	ecx, edx
		mov	edx, [esp+64h+var_2C]
		mov	edx, [edx]
		xor	eax, ebp
		mov	ebp, edx
		shl	ebp, 1Eh
		shr	edx, 2
		xor	eax, ebp
		xor	ecx, edx
		test	bl, 1
		jz	short loc_1002D049
		mov	edx, esi
		shl	edx, 1Eh
		xor	eax, edx
		mov	edx, esi
		shr	edx, 2
		xor	ecx, edx

loc_1002D049:				; CODE XREF: sub_1002CE60+1D9j
		test	bl, 2
		jz	short loc_1002D05B
		mov	edx, esi
		shl	edx, 1Fh
		xor	eax, edx
		mov	edx, esi
		shr	edx, 1
		xor	ecx, edx

loc_1002D05B:				; CODE XREF: sub_1002CE60+1ECj
		mov	edx, [esp+64h+var_58]
		mov	ebx, [edx]
		xor	ebx, eax
		xor	ebx, [esp+64h+var_54]
		add	edx, 4
		cmp	[esp+64h+arg_0], 0
		mov	[edx-4], ebx
		mov	[esp+64h+var_58], edx
		mov	[esp+64h+var_54], ecx
		jnz	loc_1002CF35
		xor	[edx], ecx
		pop	ebp
		pop	ebx
		pop	edi
		mov	ecx, [esp+58h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
; ---------------------------------------------------------------------------

loc_1002D094:				; CODE XREF: sub_1002CE60+23j
		xor	[eax], ecx
		mov	ecx, [esp+5Ch+var_4]
		pop	edi
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 58h
		retn
sub_1002CE60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D0B0	proc near		; CODE XREF: sub_1002D5B0+28p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 20h
		push	ebx
		mov	ebx, [esp+24h+arg_0]
		push	ebp
		push	edi
		mov	[esp+2Ch+var_4], 0
		test	ebx, ebx
		jz	loc_1002D239
		mov	ebp, [esp+2Ch+arg_4]
		test	ebp, ebp
		jz	loc_1002D239
		mov	edi, [esp+2Ch+arg_8]
		test	edi, edi
		jz	loc_1002D239
		push	esi
		cmp	ebx, edi
		jnz	short loc_1002D10D
		lea	eax, [esp+30h+var_10]
		push	ebx
		push	eax
		call	sub_10028D90
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002D222
		cmp	ebx, ebp
		jnz	short loc_1002D107
		lea	ebp, [esp+30h+var_10]

loc_1002D107:				; CODE XREF: sub_1002D0B0+51j
		lea	ebx, [esp+30h+var_10]
		jmp	short loc_1002D12F
; ---------------------------------------------------------------------------

loc_1002D10D:				; CODE XREF: sub_1002D0B0+35j
		cmp	ebp, edi
		jnz	short loc_1002D12F
		lea	ecx, [esp+30h+var_10]
		push	ebp
		push	ecx
		call	sub_10028D90
		add	esp, 8
		mov	[esp+30h+var_1C], eax
		test	eax, eax
		js	loc_1002D21E
		lea	ebp, [esp+30h+var_10]

loc_1002D12F:				; CODE XREF: sub_1002D0B0+5Bj
					; sub_1002D0B0+5Fj
		mov	edx, [ebx+8]
		cmp	edx, [ebp+8]
		jnb	short loc_1002D13D
		mov	eax, ebp
		mov	ebp, ebx
		mov	ebx, eax

loc_1002D13D:				; CODE XREF: sub_1002D0B0+85j
		mov	eax, [edi+0Ch]
		mov	dword ptr [edi+8], 1
		mov	dword ptr [eax], 0
		mov	ecx, [ebx+8]
		add	ecx, [ebp+8]
		push	ecx
		push	edi
		call	sub_100291A0
		add	esp, 8
		mov	[esp+30h+var_1C], eax
		test	eax, eax
		js	loc_1002D21E
		mov	edx, [edi+0Ch]
		mov	ecx, [ebx+8]
		mov	eax, [ebp+0Ch]
		mov	esi, [eax]
		push	edx
		push	ecx
		mov	ecx, [ebx+0Ch]
		mov	[esp+38h+arg_0], eax
		call	sub_1002CC10
		mov	eax, [ebp+8]
		mov	ecx, [ebx+8]
		add	[esp+38h+arg_0], 4
		mov	ebp, 1
		add	esp, 8
		lea	edx, [eax+ecx]
		mov	[esp+30h+var_18], ecx
		mov	[esp+30h+var_14], eax
		mov	[edi+8], edx
		cmp	eax, ebp
		jbe	short loc_1002D1F8
		lea	edx, ds:4[ecx*4]
		mov	[esp+30h+var_20], edx

loc_1002D1B2:				; CODE XREF: sub_1002D0B0+146j
		mov	edx, [esp+30h+arg_0]
		mov	esi, [edx]
		add	edx, 4
		mov	[esp+30h+arg_0], edx
		test	esi, esi
		jz	short loc_1002D1E0
		mov	eax, [edi+0Ch]
		lea	edx, [eax+ebp*4]
		push	edx
		push	ecx
		mov	ecx, [ebx+0Ch]
		call	sub_1002CE60
		mov	ecx, [esp+38h+var_18]
		mov	eax, [esp+38h+var_14]
		add	esp, 8
		jmp	short loc_1002D1EE
; ---------------------------------------------------------------------------

loc_1002D1E0:				; CODE XREF: sub_1002D0B0+111j
		mov	edx, [edi+0Ch]
		mov	esi, [esp+30h+var_20]
		mov	dword ptr [esi+edx], 0

loc_1002D1EE:				; CODE XREF: sub_1002D0B0+12Ej
		add	[esp+30h+var_20], 4
		inc	ebp
		cmp	ebp, eax
		jb	short loc_1002D1B2

loc_1002D1F8:				; CODE XREF: sub_1002D0B0+F5j
		mov	eax, [edi+8]
		cmp	eax, 1
		jbe	short loc_1002D215
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_1002D207:				; CODE XREF: sub_1002D0B0+163j
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002D215
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002D207

loc_1002D215:				; CODE XREF: sub_1002D0B0+14Ej
					; sub_1002D0B0+15Aj
		mov	[edi+8], eax
		mov	dword ptr [edi], 0

loc_1002D21E:				; CODE XREF: sub_1002D0B0+75j
					; sub_1002D0B0+B3j
		mov	esi, [esp+30h+var_1C]

loc_1002D222:				; CODE XREF: sub_1002D0B0+49j
		lea	edx, [esp+30h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002D239:				; CODE XREF: sub_1002D0B0+14j
					; sub_1002D0B0+20j ...
		pop	edi
		pop	ebp
		mov	eax, 0FFFFFFFCh
		pop	ebx
		add	esp, 20h
		retn
sub_1002D0B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D250	proc near		; CODE XREF: sub_1002D430+125p
					; sub_1002D5B0+3Bp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	[esp+10h+var_8], 0
		cmp	eax, edi
		jz	short loc_1002D27E
		push	edi
		push	eax
		call	sub_10028E00
		add	esp, 8
		mov	[esp+10h+var_8], eax
		test	eax, eax
		js	loc_1002D387

loc_1002D27E:				; CODE XREF: sub_1002D250+16j
		push	ebx
		mov	ebx, [edi+8]
		push	ebp
		mov	ebp, [esp+18h+arg_4]
		mov	ecx, [ebp+0]
		shr	ecx, 5
		dec	ebx
		push	esi
		mov	esi, [edi+0Ch]
		mov	[esp+1Ch+arg_0], ecx
		cmp	ebx, ecx
		jle	loc_1002D35E
		mov	eax, ebx
		sub	eax, ecx
		lea	edi, [esi+eax*4]
		mov	[esp+1Ch+var_4], edi
		lea	esp, [esp+0]

loc_1002D2B0:				; CODE XREF: sub_1002D250+104j
		mov	eax, [esi+ebx*4]
		test	eax, eax
		jnz	short loc_1002D2C4
		dec	ebx
		sub	edi, 4
		mov	[esp+1Ch+var_4], edi
		jmp	loc_1002D352
; ---------------------------------------------------------------------------

loc_1002D2C4:				; CODE XREF: sub_1002D250+65j
		lea	edx, [ebp+4]
		mov	dword ptr [esi+ebx*4], 0
		cmp	dword ptr [edx], 0
		mov	[esp+1Ch+var_C], 1
		jbe	short loc_1002D326
		jmp	short loc_1002D2E0
; ---------------------------------------------------------------------------
		align 10h

loc_1002D2E0:				; CODE XREF: sub_1002D250+8Bj
					; sub_1002D250+D4j
		mov	ecx, [ebp+0]
		sub	ecx, [edx]
		mov	edi, ebx
		mov	edx, ecx
		sar	ecx, 5
		and	edx, 1Fh
		sub	edi, ecx
		mov	ebp, eax
		mov	ecx, edx
		shr	ebp, cl
		lea	edi, [esi+edi*4]
		xor	[edi], ebp
		test	edx, edx
		jz	short loc_1002D30E
		mov	ecx, 20h
		sub	ecx, edx
		mov	edx, eax
		shl	edx, cl
		xor	[edi-4], edx

loc_1002D30E:				; CODE XREF: sub_1002D250+AEj
		mov	ecx, [esp+1Ch+var_C]
		mov	ebp, [esp+1Ch+arg_4]
		inc	ecx
		cmp	dword ptr [ebp+ecx*4+0], 0
		lea	edx, [ebp+ecx*4+0]
		mov	[esp+1Ch+var_C], ecx
		ja	short loc_1002D2E0

loc_1002D326:				; CODE XREF: sub_1002D250+89j
		mov	edx, [ebp+0]
		and	edx, 1Fh
		mov	ecx, edx
		mov	edi, eax
		shr	edi, cl
		mov	[esp+1Ch+var_C], eax
		mov	ecx, edi
		mov	edi, [esp+1Ch+var_4]
		xor	[edi], ecx
		test	edx, edx
		jz	short loc_1002D34E
		mov	ecx, 20h
		sub	ecx, edx
		shl	eax, cl
		xor	[edi-4], eax

loc_1002D34E:				; CODE XREF: sub_1002D250+F0j
		mov	ecx, [esp+1Ch+arg_0]

loc_1002D352:				; CODE XREF: sub_1002D250+6Fj
		cmp	ebx, ecx
		jg	loc_1002D2B0
		mov	edi, [esp+1Ch+arg_8]

loc_1002D35E:				; CODE XREF: sub_1002D250+48j
		jz	short loc_1002D394

loc_1002D360:				; CODE XREF: sub_1002D250+155j
		mov	eax, [edi+8]
		pop	esi
		pop	ebp
		pop	ebx
		cmp	eax, 1
		jbe	short loc_1002D380
		mov	ecx, [edi+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_1002D372:				; CODE XREF: sub_1002D250+12Ej
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002D380
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002D372

loc_1002D380:				; CODE XREF: sub_1002D250+119j
					; sub_1002D250+125j
		mov	[edi+8], eax
		mov	eax, [esp+10h+var_8]

loc_1002D387:				; CODE XREF: sub_1002D250+28j
		pop	edi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1002D390:				; CODE XREF: sub_1002D250+18Bj
					; sub_1002D250+1D6j
		mov	ecx, [esp+1Ch+arg_0]

loc_1002D394:				; CODE XREF: sub_1002D250:loc_1002D35Ej
		mov	edx, [ebp+0]
		mov	ebx, [esi+ecx*4]
		and	edx, 1Fh
		mov	eax, ebx
		mov	ecx, edx
		shr	eax, cl
		test	eax, eax
		jz	short loc_1002D360
		mov	ecx, 20h
		sub	ecx, edx
		test	edx, edx
		jz	short loc_1002D3BF
		shl	ebx, cl
		shr	ebx, cl
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esi+ecx*4], ebx
		jmp	short loc_1002D3CA
; ---------------------------------------------------------------------------

loc_1002D3BF:				; CODE XREF: sub_1002D250+160j
		mov	edx, [esp+1Ch+arg_0]
		mov	dword ptr [esi+edx*4], 0

loc_1002D3CA:				; CODE XREF: sub_1002D250+16Dj
		xor	[esi], eax
		cmp	dword ptr [ebp+4], 0
		lea	ecx, [ebp+4]
		mov	[esp+1Ch+var_C], 1
		jbe	short loc_1002D390
		lea	ecx, [ecx+0]

loc_1002D3E0:				; CODE XREF: sub_1002D250+1D0j
		mov	ecx, [ecx]
		mov	edx, ecx
		and	ecx, 1Fh
		mov	ebx, eax
		shl	ebx, cl
		mov	edi, ecx
		shr	edx, 5
		mov	ecx, 20h
		xor	[esi+edx*4], ebx
		sub	ecx, edi
		mov	ebx, eax
		shr	ebx, cl
		test	edi, edi
		jz	short loc_1002D40E
		test	ebx, ebx
		jz	short loc_1002D40E
		xor	[esi+edx*4+4], ebx
		lea	edx, [esi+edx*4+4]

loc_1002D40E:				; CODE XREF: sub_1002D250+1B0j
					; sub_1002D250+1B4j
		mov	ecx, [esp+1Ch+var_C]
		inc	ecx
		cmp	dword ptr [ebp+ecx*4+0], 0
		mov	[esp+1Ch+var_C], ecx
		lea	ecx, [ebp+ecx*4+0]
		ja	short loc_1002D3E0
		mov	edi, [esp+1Ch+arg_8]
		jmp	loc_1002D390
sub_1002D250	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D430	proc near		; CODE XREF: sub_1002D5B0+17p

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_0]
		test	edi, edi
		jz	loc_1002D59F
		mov	esi, [esp+18h+arg_8]
		test	esi, esi
		jz	loc_1002D59F
		push	ebx
		mov	[esp+1Ch+var_4], 0
		cmp	edi, esi
		jnz	short loc_1002D476
		lea	eax, [esp+1Ch+var_10]
		push	edi
		push	eax
		call	sub_10028D90
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002D589
		lea	edi, [esp+1Ch+var_10]

loc_1002D476:				; CODE XREF: sub_1002D430+28j
		mov	ecx, [esi+0Ch]
		mov	dword ptr [esi+8], 1
		mov	dword ptr [ecx], 0
		mov	edx, [edi+8]
		add	edx, edx
		push	edx
		push	esi
		call	sub_100291A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_1002D589
		mov	edx, [edi+0Ch]
		mov	edi, [edi+8]
		mov	ecx, [esi+0Ch]
		lea	eax, [edi+edi]
		mov	[esi+8], eax
		test	edi, edi
		jz	loc_1002D54E
		push	ebp

loc_1002D4B7:				; CODE XREF: sub_1002D430+117j
		mov	eax, [edx]
		mov	ebx, eax
		shr	ebx, 0Ch
		and	ebx, 0Fh
		mov	ebx, ds:dword_10047328[ebx*4]
		shl	ebx, 8
		mov	ebp, eax
		shr	ebp, 8
		and	ebp, 0Fh
		or	ebx, ds:dword_10047328[ebp*4]
		mov	ebp, eax
		shr	ebp, 4
		and	ebp, 0Fh
		shl	ebx, 8
		or	ebx, ds:dword_10047328[ebp*4]
		mov	ebp, eax
		and	ebp, 0Fh
		shl	ebx, 8
		or	ebx, ds:dword_10047328[ebp*4]
		mov	ebp, eax
		mov	[ecx], ebx
		shr	ebp, 1Ch
		mov	ebp, ds:dword_10047328[ebp*4]
		mov	ebx, eax
		shr	ebx, 18h
		shl	ebp, 8
		and	ebx, 0Fh
		or	ebp, ds:dword_10047328[ebx*4]
		mov	ebx, eax
		shl	ebp, 8
		shr	ebx, 14h
		and	ebx, 0Fh
		or	ebp, ds:dword_10047328[ebx*4]
		shr	eax, 10h
		shl	ebp, 8
		and	eax, 0Fh
		or	ebp, ds:dword_10047328[eax*4]
		add	edx, 4
		mov	[ecx+4], ebp
		add	ecx, 8
		dec	edi
		jnz	loc_1002D4B7
		pop	ebp

loc_1002D54E:				; CODE XREF: sub_1002D430+80j
		mov	ecx, [esp+1Ch+arg_4]
		push	esi
		push	ecx
		push	esi
		call	sub_1002D250
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		js	short loc_1002D589
		mov	eax, [esi+8]
		cmp	eax, 1
		jbe	short loc_1002D580
		mov	edx, [esi+0Ch]
		lea	ecx, [edx+eax*4-4]

loc_1002D572:				; CODE XREF: sub_1002D430+14Ej
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002D580
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002D572

loc_1002D580:				; CODE XREF: sub_1002D430+139j
					; sub_1002D430+145j
		mov	[esi+8], eax
		mov	dword ptr [esi], 0

loc_1002D589:				; CODE XREF: sub_1002D430+3Cj
					; sub_1002D430+69j ...
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_10028EF0
		add	esp, 4
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002D59F:				; CODE XREF: sub_1002D430+Bj
					; sub_1002D430+17j
		pop	edi
		mov	eax, 0FFFFFFFCh
		pop	esi
		add	esp, 10h
		retn
sub_1002D430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D5B0	proc near		; CODE XREF: sub_1000D600+72p
					; sub_1000D7C0+10Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		cmp	eax, ecx
		jnz	short loc_1002D5D0
		mov	ecx, [esp+arg_C]
		mov	edx, [esp+arg_8]
		push	ecx
		push	edx
		push	eax
		call	sub_1002D430
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1002D5D0:				; CODE XREF: sub_1002D5B0+Aj
		push	esi
		mov	esi, [esp+4+arg_C]
		push	esi
		push	ecx
		push	eax
		call	sub_1002D0B0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002D5F3
		mov	eax, [esp+4+arg_8]
		push	esi
		push	eax
		push	esi
		call	sub_1002D250
		add	esp, 0Ch

loc_1002D5F3:				; CODE XREF: sub_1002D5B0+32j
		pop	esi
		retn
sub_1002D5B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D600	proc near		; CODE XREF: sub_10026A60+88p
					; sub_1002A260+D8p ...
		mov	eax, dword_1004921C
		cmp	eax, 0
		jz	short loc_1002D61B
		jg	short loc_1002D651
		call	sub_1002DBE0
		mov	dword_1004921C,	eax
		cmp	eax, 0
		jg	short loc_1002D651

loc_1002D61B:				; CODE XREF: sub_1002D600+8j
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	ebx, 0
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002D649
		mov	esi, [ebp+8]
		cld

loc_1002D638:				; CODE XREF: sub_1002D600+47j
		lodsd
		mov	edx, [ebp+10h]
		mul	edx
		add	eax, ebx
		adc	edx, 0
		mov	ebx, edx
		stosd
		dec	ecx
		jnz	short loc_1002D638

loc_1002D649:				; CODE XREF: sub_1002D600+32j
		mov	[edi], ebx
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1002D651:				; CODE XREF: sub_1002D600+Aj
					; sub_1002D600+19j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		psubq	mm2, mm2
		mov	ecx, [ebp+0Ch]
		movd	mm1, dword ptr [ebp+10h]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002D685
		mov	esi, [ebp+8]
		cld

loc_1002D66C:				; CODE XREF: sub_1002D600+83j
		movd	mm0, dword ptr [esi]
		add	esi, 4
		pmuludq	mm0, mm1
		paddq	mm2, mm0
		movd	dword ptr [edi], mm2
		add	edi, 4
		psrlq	mm2, 20h
		dec	ecx
		jnz	short loc_1002D66C

loc_1002D685:				; CODE XREF: sub_1002D600+66j
		movd	dword ptr [edi], mm2
		emms
		pop	esi
		pop	edi
		leave
		retn
sub_1002D600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D690	proc near		; CODE XREF: sub_1002A260+12Bp
					; sub_1002A440+C4p
		mov	eax, dword_1004921C
		cmp	eax, 0
		jz	short loc_1002D6AB
		jg	short loc_1002D6E8
		call	sub_1002DBE0
		mov	dword_1004921C,	eax
		cmp	eax, 0
		jg	short loc_1002D6E8

loc_1002D6AB:				; CODE XREF: sub_1002D690+8j
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	ebx, 0
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002D6E0
		mov	esi, [ebp+8]
		cld

loc_1002D6C8:				; CODE XREF: sub_1002D690+4Ej
		lodsd
		mov	edx, [ebp+10h]
		mul	edx
		add	eax, ebx
		adc	edx, 0
		mov	ebx, [edi]
		add	eax, ebx
		adc	edx, 0
		mov	ebx, edx
		stosd
		dec	ecx
		jnz	short loc_1002D6C8

loc_1002D6E0:				; CODE XREF: sub_1002D690+32j
		mov	[edi], ebx
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 4

loc_1002D6E8:				; CODE XREF: sub_1002D690+Aj
					; sub_1002D690+19j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		psubq	mm2, mm2
		mov	ecx, [ebp+0Ch]
		movd	mm1, dword ptr [ebp+10h]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002D722
		mov	esi, [ebp+8]
		cld

loc_1002D703:				; CODE XREF: sub_1002D690+90j
		movd	mm0, dword ptr [esi]
		add	esi, 4
		pmuludq	mm0, mm1
		paddq	mm2, mm0
		movd	mm0, dword ptr [edi]
		paddq	mm2, mm0
		movd	dword ptr [edi], mm2
		add	edi, 4
		psrlq	mm2, 20h
		dec	ecx
		jnz	short loc_1002D703

loc_1002D722:				; CODE XREF: sub_1002D690+6Dj
		movd	dword ptr [edi], mm2
		emms
		pop	esi
		pop	edi
		leave
		retn
sub_1002D690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D730	proc near		; CODE XREF: sub_100269C0+43p
					; sub_10026A60+BEp ...
		mov	eax, dword_1004921C
		cmp	eax, 0
		jz	short loc_1002D74B
		jg	short loc_1002D79A
		call	sub_1002DBE0
		mov	dword_1004921C,	eax
		cmp	eax, 0
		jg	short loc_1002D79A

loc_1002D74B:				; CODE XREF: sub_1002D730+8j
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	ebx, 0
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002D780
		cld
		mov	esi, [ebp+8]

loc_1002D768:				; CODE XREF: sub_1002D730+4Ej
		lodsd
		mov	edx, [ebp+10h]
		mul	edx
		add	eax, ebx
		adc	edx, 0
		mov	ebx, [edi]
		add	eax, ebx
		adc	edx, 0
		mov	ebx, edx
		stosd
		dec	ecx
		jnz	short loc_1002D768

loc_1002D780:				; CODE XREF: sub_1002D730+32j
		cmp	ebx, 0
		jz	short loc_1002D794
		mov	eax, [edi]
		add	eax, ebx
		stosd
		jnb	short loc_1002D794

loc_1002D78C:				; CODE XREF: sub_1002D730+62j
		mov	eax, [edi]
		adc	eax, 0
		stosd
		jb	short loc_1002D78C

loc_1002D794:				; CODE XREF: sub_1002D730+53j
					; sub_1002D730+5Aj
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 2

loc_1002D79A:				; CODE XREF: sub_1002D730+Aj
					; sub_1002D730+19j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		psubq	mm2, mm2
		mov	ecx, [ebp+0Ch]
		movd	mm1, dword ptr [ebp+10h]
		mov	edi, [ebp+14h]
		cmp	ecx, 0
		jz	short loc_1002D7D5
		mov	esi, [ebp+8]
		cld

loc_1002D7B6:				; CODE XREF: sub_1002D730+A3j
		movd	mm0, dword ptr [esi]
		movd	mm3, dword ptr [edi]
		add	esi, 4
		pmuludq	mm0, mm1
		paddq	mm2, mm0
		paddq	mm2, mm3
		movd	dword ptr [edi], mm2
		add	edi, 4
		psrlq	mm2, 20h
		dec	ecx
		jnz	short loc_1002D7B6

loc_1002D7D5:				; CODE XREF: sub_1002D730+80j
		movd	ebx, mm2
		cmp	ebx, 0
		jz	short loc_1002D7EC
		mov	eax, [edi]
		add	eax, ebx
		stosd
		jnb	short loc_1002D7EC

loc_1002D7E4:				; CODE XREF: sub_1002D730+BAj
		mov	eax, [edi]
		adc	eax, 0
		stosd
		jb	short loc_1002D7E4

loc_1002D7EC:				; CODE XREF: sub_1002D730+ABj
					; sub_1002D730+B2j
		emms
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
sub_1002D730	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D800	proc near		; CODE XREF: sub_1002A440+107p
		mov	eax, dword_1004921C
		cmp	eax, 0
		jz	short loc_1002D81B
		jg	short loc_1002D872
		call	sub_1002DBE0
		mov	dword_1004921C,	eax
		cmp	eax, 0
		jg	short loc_1002D872

loc_1002D81B:				; CODE XREF: sub_1002D800+8j
		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx
		mov	ebx, 0
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+10h]
		cmp	ecx, 0
		jz	short loc_1002D858
		cld
		mov	esi, [ebp+8]

loc_1002D838:				; CODE XREF: sub_1002D800+56j
		lodsd
		mul	eax
		add	eax, ebx
		adc	edx, 0
		mov	ebx, [edi]
		add	eax, ebx
		mov	ebx, [edi+4]
		stosd
		adc	edx, ebx
		mov	ebx, 0
		mov	eax, edx
		adc	ebx, 0
		stosd
		dec	ecx
		jnz	short loc_1002D838

loc_1002D858:				; CODE XREF: sub_1002D800+32j
		cmp	ebx, 0
		jz	short loc_1002D86C
		mov	eax, [edi]
		add	eax, ebx
		stosd
		jnb	short loc_1002D86C

loc_1002D864:				; CODE XREF: sub_1002D800+6Aj
		mov	eax, [edi]
		adc	eax, 0
		stosd
		jb	short loc_1002D864

loc_1002D86C:				; CODE XREF: sub_1002D800+5Bj
					; sub_1002D800+62j
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------
		align 2

loc_1002D872:				; CODE XREF: sub_1002D800+Aj
					; sub_1002D800+19j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		psubq	mm2, mm2
		mov	ecx, [ebp+0Ch]
		mov	edi, [ebp+10h]
		cmp	ecx, 0
		jz	short loc_1002D8B8
		mov	esi, [ebp+8]
		cld

loc_1002D88A:				; CODE XREF: sub_1002D800+B6j
		movd	mm0, dword ptr [esi]
		movd	mm3, dword ptr [edi]
		add	esi, 4
		pmuludq	mm0, mm0
		paddq	mm2, mm0
		paddq	mm2, mm3
		movd	mm3, dword ptr [edi+4]
		movd	dword ptr [edi], mm2
		psrlq	mm2, 20h
		paddq	mm2, mm3
		movd	dword ptr [edi+4], mm2
		psrlq	mm2, 20h
		add	edi, 8
		dec	ecx
		jnz	short loc_1002D88A

loc_1002D8B8:				; CODE XREF: sub_1002D800+84j
		movd	ebx, mm2
		cmp	ebx, 0
		jz	short loc_1002D8CF
		mov	eax, [edi]
		add	eax, ebx
		stosd
		jnb	short loc_1002D8CF

loc_1002D8C7:				; CODE XREF: sub_1002D800+CDj
		mov	eax, [edi]
		adc	eax, 0
		stosd
		jb	short loc_1002D8C7

loc_1002D8CF:				; CODE XREF: sub_1002D800+BEj
					; sub_1002D800+C5j
		emms
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
sub_1002D800	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D8E0	proc near		; CODE XREF: sub_1002AEE0+B9p
					; sub_1002BC60+183p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	edx, [esp+4+arg_0]
		mov	eax, [esp+4+arg_4]
		mov	ebx, [esp+4+arg_8]
		div	ebx
		mov	ebx, [esp+4+arg_C]
		mov	[ebx], eax
		mov	ebx, [esp+4+arg_10]
		mov	[ebx], edx
		xor	eax, eax
		pop	ebx
		retn
sub_1002D8E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D900	proc near		; CODE XREF: sub_1002D980+89p
					; sub_1002D980+9Cp ...
		cmp	ds:byte_10047409[eax*2], 0
		movzx	edx, ds:byte_10047408[eax*2]
		jz	short locret_1002D93F
		cmp	edx, 6
		jz	short loc_1002D961
		cmp	edx, 8
		jz	short loc_1002D961
		push	esi
		mov	esi, [ecx]
		cmp	esi, 2
		jl	short loc_1002D940
		cmp	edx, 9
		jz	short loc_1002D92E
		cmp	edx, 0Bh
		jnz	short loc_1002D940

loc_1002D92E:				; CODE XREF: sub_1002D900+27j
		mov	dword ptr [ecx], 2
		movzx	eax, ds:byte_10047409[eax*2]
		mov	[edi], eax

loc_1002D93E:				; CODE XREF: sub_1002D900+43j
					; sub_1002D900+4Dj
		pop	esi

locret_1002D93F:			; CODE XREF: sub_1002D900+10j
		retn
; ---------------------------------------------------------------------------

loc_1002D940:				; CODE XREF: sub_1002D900+22j
					; sub_1002D900+2Cj
		cmp	esi, 3
		jl	short loc_1002D93E
		cmp	edx, 0Ch
		jz	short loc_1002D94F
		cmp	edx, 0Eh
		jnz	short loc_1002D93E

loc_1002D94F:				; CODE XREF: sub_1002D900+48j
		mov	dword ptr [ecx], 3
		movzx	ecx, ds:byte_10047409[eax*2]
		mov	[edi], ecx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002D961:				; CODE XREF: sub_1002D900+15j
					; sub_1002D900+1Aj
		mov	dword ptr [ecx], 1
		movzx	edx, ds:byte_10047409[eax*2]
		mov	[edi], edx
		retn
sub_1002D900	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002D980	proc near		; CODE XREF: sub_1002DD00+EAp

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 24h
		push	ebx
		push	ebp
		xor	ebp, ebp
		cmp	[esp+2Ch+arg_0], 2
		push	esi
		push	edi
		mov	[esp+34h+var_20], 4
		mov	[esp+34h+var_24], ebp
		jge	short loc_1002D9A6
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1002D9A6:				; CODE XREF: sub_1002D980+1Aj
		pusha
		mov	eax, 2
		cpuid
		mov	[esp+54h+arg_0], eax
		mov	[esp+54h+var_18], ebx
		mov	[esp+54h+var_1C], ecx
		mov	[esp+54h+var_14], edx
		popa
		mov	eax, [esp+34h+arg_0]
		mov	ecx, [esp+34h+var_1C]
		mov	ebx, [esp+34h+var_18]
		mov	edx, [esp+34h+var_14]
		mov	esi, eax
		and	eax, 0Fh
		mov	[esp+34h+var_18], ebx
		mov	[esp+34h+arg_0], ecx
		mov	[esp+34h+var_1C], edx
		mov	[esp+34h+var_4], eax
		jle	loc_1002DB70
		lea	ebx, [ebx+0]

loc_1002D9F0:				; CODE XREF: sub_1002D980+1EAj
		test	esi, esi
		js	short loc_1002DA44
		mov	ebx, esi
		and	ebx, 0FFFFFF00h
		mov	eax, ebx
		shr	eax, 18h
		lea	edi, [esp+34h+var_24]
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		mov	eax, ebx
		shr	eax, 10h
		and	eax, 0FFh
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		movzx	eax, bl
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		mov	ebx, [esp+34h+var_18]

loc_1002DA44:				; CODE XREF: sub_1002D980+72j
		test	ebx, ebx
		js	short loc_1002DA8C
		mov	eax, ebx
		shr	eax, 18h
		lea	edi, [esp+34h+var_24]
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		mov	eax, ebx
		shr	eax, 10h
		and	eax, 0FFh
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		mov	eax, ebx
		shr	eax, 8
		and	eax, 0FFh
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		movzx	eax, bl
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900

loc_1002DA8C:				; CODE XREF: sub_1002D980+C6j
		mov	eax, [esp+34h+arg_0]
		test	eax, eax
		js	short loc_1002DADC
		shr	eax, 18h
		lea	edi, [esp+34h+var_24]
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		mov	eax, [esp+34h+arg_0]
		shr	eax, 10h
		and	eax, 0FFh
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		mov	eax, [esp+34h+arg_0]
		shr	eax, 8
		and	eax, 0FFh
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		movzx	eax, byte ptr [esp+34h+arg_0]
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900

loc_1002DADC:				; CODE XREF: sub_1002D980+112j
		mov	eax, [esp+34h+var_1C]
		test	eax, eax
		js	short loc_1002DB2C
		shr	eax, 18h
		lea	edi, [esp+34h+var_24]
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		mov	eax, [esp+34h+var_1C]
		shr	eax, 10h
		and	eax, 0FFh
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		mov	eax, [esp+34h+var_1C]
		shr	eax, 8
		and	eax, 0FFh
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900
		movzx	eax, byte ptr [esp+34h+var_1C]
		lea	ecx, [esp+34h+var_20]
		call	sub_1002D900

loc_1002DB2C:				; CODE XREF: sub_1002D980+162j
		inc	ebp
		cmp	ebp, [esp+34h+var_4]
		jz	short loc_1002DB70
		pusha
		mov	eax, 2
		cpuid
		mov	[esp+54h+var_14], eax
		mov	[esp+54h+var_10], ebx
		mov	[esp+54h+var_C], ecx
		mov	[esp+54h+var_8], edx
		popa
		mov	eax, [esp+34h+var_10]
		mov	ecx, [esp+34h+var_C]
		mov	edx, [esp+34h+var_8]
		mov	esi, [esp+34h+var_14]
		mov	[esp+34h+var_18], eax
		mov	[esp+34h+arg_0], ecx
		mov	[esp+34h+var_1C], edx
		mov	ebx, eax
		jl	loc_1002D9F0

loc_1002DB70:				; CODE XREF: sub_1002D980+64j
					; sub_1002D980+1B1j
		mov	eax, [esp+34h+var_24]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
sub_1002D980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DB80	proc near		; CODE XREF: sub_1002DD00:loc_1002DDF4p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		sub	esp, 10h
		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	ebp, ebp
		pusha
		mov	eax, 80000000h
		cpuid
		mov	[esp+40h+var_10], eax
		mov	[esp+40h+var_4], ebx
		mov	[esp+40h+var_8], ecx
		mov	[esp+40h+var_C], edx
		popa
		cmp	[esp+20h+var_10], 80000005h
		jb	short loc_1002DBD2
		pusha
		mov	eax, 80000005h
		cpuid
		mov	[esp+40h+var_4], eax
		mov	[esp+40h+var_C], ebx
		mov	[esp+40h+var_10], ecx
		mov	[esp+40h+var_8], edx
		popa
		movzx	eax, byte ptr [esp+20h+var_10]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002DBD2:				; CODE XREF: sub_1002DB80+2Aj
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_1002DB80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DBE0	proc near		; CODE XREF: sub_1002D600+Cp
					; sub_1002D690+Cp ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4

		sub	esp, 20h
		push	ebx
		push	esi
		push	edi
		push	eax
		push	ebx
		pushf
		pop	eax
		push	eax
		mov	[esp+38h+var_1C], eax
		mov	ebx, 40000h
		xor	eax, ebx
		push	eax
		popf
		pushf
		pop	eax
		popf
		mov	[esp+34h+var_20], eax
		pop	ebx
		pop	eax
		mov	eax, [esp+2Ch+var_20]
		xor	eax, [esp+2Ch+var_1C]
		jz	loc_1002DCEF
		push	eax
		push	ebx
		pushf
		pop	eax
		push	eax
		mov	[esp+38h+var_20], eax
		mov	ebx, 200000h
		xor	eax, ebx
		push	eax
		popf
		pushf
		pop	eax
		popf
		mov	[esp+34h+var_1C], eax
		pop	ebx
		pop	eax
		mov	ecx, [esp+2Ch+var_1C]
		xor	ecx, [esp+2Ch+var_20]
		jz	loc_1002DCEF
		pusha
		mov	eax, 0
		cpuid
		mov	[esp+4Ch+var_14], eax
		mov	[esp+4Ch+var_1C], ebx
		mov	[esp+4Ch+var_18], ecx
		mov	[esp+4Ch+var_20], edx
		popa
		cmp	[esp+2Ch+var_14], 0
		mov	edx, [esp+2Ch+var_1C]
		mov	eax, [esp+2Ch+var_20]
		mov	ecx, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_C], eax
		mov	[esp+2Ch+var_8], ecx
		mov	[esp+2Ch+var_4], 0
		jz	short loc_1002DCEF
		mov	esi, offset off_10047608
		lea	ebx, [ebx+0]

loc_1002DC80:				; CODE XREF: sub_1002DBE0+D8j
		mov	eax, [esi]
		lea	ecx, [esp+2Ch+var_10]

loc_1002DC86:				; CODE XREF: sub_1002DBE0+C0j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1002DCA6
		test	dl, dl
		jz	short loc_1002DCA2
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1002DCA6
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1002DC86

loc_1002DCA2:				; CODE XREF: sub_1002DBE0+AEj
		xor	eax, eax
		jmp	short loc_1002DCAB
; ---------------------------------------------------------------------------

loc_1002DCA6:				; CODE XREF: sub_1002DBE0+AAj
					; sub_1002DBE0+B6j
		sbb	eax, eax
		sbb	eax, 0FFFFFFFFh

loc_1002DCAB:				; CODE XREF: sub_1002DBE0+C4j
		test	eax, eax
		jz	short loc_1002DCBA
		add	esi, 4
		cmp	esi, offset dword_10047630
		jl	short loc_1002DC80

loc_1002DCBA:				; CODE XREF: sub_1002DBE0+CDj
		pusha
		mov	eax, 1
		cpuid
		mov	[esp+4Ch+var_18], eax
		mov	[esp+4Ch+var_20], ebx
		mov	[esp+4Ch+var_1C], ecx
		mov	[esp+4Ch+var_14], edx
		popa
		mov	edx, [esp+2Ch+var_14]
		and	edx, 4000000h
		xor	eax, eax
		cmp	edx, 4000000h
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002DCEF:				; CODE XREF: sub_1002DBE0+29j
					; sub_1002DBE0+52j ...
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 20h
		retn
sub_1002DBE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DD00	proc near		; CODE XREF: sub_100288A0+190p

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h

		sub	esp, 54h
		push	ebx
		push	esi
		push	edi
		push	eax
		push	ebx
		pushf
		pop	eax
		push	eax
		mov	[esp+6Ch+var_50], eax
		mov	ebx, 40000h
		xor	eax, ebx
		push	eax
		popf
		pushf
		pop	eax
		popf
		mov	[esp+68h+var_54], eax
		pop	ebx
		pop	eax
		mov	eax, [esp+60h+var_54]
		xor	eax, [esp+60h+var_50]
		jnz	short loc_1002DD32
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1002DD32:				; CODE XREF: sub_1002DD00+29j
		push	eax
		push	ebx
		pushf
		pop	eax
		push	eax
		mov	[esp+6Ch+var_54], eax
		mov	ebx, 200000h
		xor	eax, ebx
		push	eax
		popf
		pushf
		pop	eax
		popf
		mov	[esp+68h+var_50], eax
		pop	ebx
		pop	eax
		mov	ecx, [esp+60h+var_50]
		xor	ecx, [esp+60h+var_54]
		jz	loc_1002DDFD
		pusha
		mov	eax, 0
		cpuid
		mov	[esp+80h+var_48], eax
		mov	[esp+80h+var_50], ebx
		mov	[esp+80h+var_4C], ecx
		mov	[esp+80h+var_54], edx
		popa
		mov	edx, [esp+60h+var_50]
		mov	eax, [esp+60h+var_54]
		mov	ecx, [esp+60h+var_4C]
		mov	[esp+60h+var_44], edx
		mov	[esp+60h+var_40], eax
		mov	[esp+60h+var_3C], ecx
		mov	[esp+60h+var_38], 0
		mov	edi, 9
		xor	esi, esi
		jmp	short loc_1002DDA0
; ---------------------------------------------------------------------------
		align 10h

loc_1002DDA0:				; CODE XREF: sub_1002DD00+98j
					; sub_1002DD00+DFj
		mov	eax, ds:off_10047608[esi*4]
		lea	ecx, [esp+60h+var_44]
		jmp	short loc_1002DDB0
; ---------------------------------------------------------------------------
		align 10h

loc_1002DDB0:				; CODE XREF: sub_1002DD00+ABj
					; sub_1002DD00+CAj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1002DDD0
		test	dl, dl
		jz	short loc_1002DDCC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1002DDD0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1002DDB0

loc_1002DDCC:				; CODE XREF: sub_1002DD00+B8j
		xor	eax, eax
		jmp	short loc_1002DDD5
; ---------------------------------------------------------------------------

loc_1002DDD0:				; CODE XREF: sub_1002DD00+B4j
					; sub_1002DD00+C0j
		sbb	eax, eax
		sbb	eax, 0FFFFFFFFh

loc_1002DDD5:				; CODE XREF: sub_1002DD00+CEj
		test	eax, eax
		jnz	short loc_1002DDDB
		mov	edi, esi

loc_1002DDDB:				; CODE XREF: sub_1002DD00+D7j
		inc	esi
		cmp	esi, 0Ah
		jl	short loc_1002DDA0
		test	edi, edi
		jnz	short loc_1002DDF4
		mov	edx, [esp+60h+var_48]
		push	edx
		call	sub_1002D980
		add	esp, 4
		jmp	short loc_1002DDF9
; ---------------------------------------------------------------------------

loc_1002DDF4:				; CODE XREF: sub_1002DD00+E3j
		call	sub_1002DB80

loc_1002DDF9:				; CODE XREF: sub_1002DD00+F2j
		test	eax, eax
		jnz	short loc_1002DE02

loc_1002DDFD:				; CODE XREF: sub_1002DD00+55j
		mov	eax, 20h

loc_1002DE02:				; CODE XREF: sub_1002DD00+FBj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 54h
		retn
sub_1002DD00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DE10	proc near		; CODE XREF: sub_100178F0+119p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_8]
		mov	edx, [esp+arg_4]
		push	eax
		mov	eax, [eax+78h]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		retn
sub_1002DE10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1002DE30(void	*Memory)
sub_1002DE30	proc near		; CODE XREF: sub_10017060+28Fp
					; sub_100178F0+150p ...

Memory		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jz	short loc_1002DEA5
		mov	eax, [esi+4]
		push	eax		; Memory
		call	sub_1002EF50
		add	esp, 4
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_1002DEA5
		lea	ecx, [esi+0Ch]
		push	edi
		push	ecx
		call	sub_10028EF0
		lea	edx, [esi+1Ch]
		push	edx
		call	sub_10028EF0
		lea	eax, [esi+2Ch]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esi+3Ch]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esi+4Ch]
		push	edx
		call	sub_10028EF0
		mov	eax, [esi+8]
		mov	edi, ds:free
		add	esp, 14h
		test	eax, eax
		jz	short loc_1002DE8E
		push	eax		; Memory
		call	edi ; free
		add	esp, 4

loc_1002DE8E:				; CODE XREF: sub_1002DE30+56j
		mov	eax, [esi+84h]
		test	eax, eax
		jz	short loc_1002DE9E
		push	esi
		call	eax
		add	esp, 4

loc_1002DE9E:				; CODE XREF: sub_1002DE30+66j
		push	esi		; Memory
		call	edi ; free
		add	esp, 4
		pop	edi

loc_1002DEA5:				; CODE XREF: sub_1002DE30+7j
					; sub_1002DE30+18j
		pop	esi
		retn
sub_1002DE30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002DEB0	proc near		; CODE XREF: sub_1002DF70+1p
					; sub_1002E050+1p
		push	esi
		push	edi
		push	88h		; Size
		call	ds:malloc
		mov	esi, eax
		xor	edi, edi
		add	esp, 4
		cmp	esi, edi
		jz	loc_1002DF54
		lea	eax, [esi+0Ch]
		push	eax
		mov	[esi], edi
		mov	[esi+4], edi
		mov	[esi+8], edi
		mov	[esi+18h], edi
		mov	[esi+28h], edi
		mov	[esi+38h], edi
		mov	[esi+48h], edi
		mov	[esi+58h], edi
		mov	[esi+70h], edi
		mov	[esi+74h], edi
		mov	[esi+78h], edi
		mov	[esi+7Ch], edi
		mov	[esi+80h], edi
		mov	[esi+84h], edi
		call	sub_1002A030
		add	esp, 4
		cmp	eax, edi
		jl	short loc_1002DF4B
		lea	ecx, [esi+1Ch]
		push	ecx
		call	sub_1002A030
		add	esp, 4
		cmp	eax, edi
		jl	short loc_1002DF4B
		lea	edx, [esi+2Ch]
		push	edx
		call	sub_1002A030
		add	esp, 4
		cmp	eax, edi
		jl	short loc_1002DF4B
		lea	eax, [esi+3Ch]
		push	eax
		call	sub_1002A030
		add	esp, 4
		cmp	eax, edi
		jl	short loc_1002DF4B
		lea	ecx, [esi+4Ch]
		push	ecx
		call	sub_1002A030
		add	esp, 4
		cmp	eax, edi
		jz	short loc_1002DF59

loc_1002DF4B:				; CODE XREF: sub_1002DEB0+59j
					; sub_1002DEB0+69j ...
		push	esi		; Memory
		call	sub_1002DE30
		add	esp, 4

loc_1002DF54:				; CODE XREF: sub_1002DEB0+16j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002DF59:				; CODE XREF: sub_1002DEB0+99j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
sub_1002DEB0	endp

; ---------------------------------------------------------------------------
		db 12h dup(0CCh)

; =============== S U B	R O U T	I N E =======================================


sub_1002DF70	proc near		; CODE XREF: sub_1002E140+23Fp
					; sub_1002E140+27Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	esi
		call	sub_1002DEB0
		mov	esi, eax
		test	esi, esi
		jz	loc_1002E048
		mov	eax, [esp+4+arg_0]
		push	eax
		call	sub_100302D0
		add	esp, 4
		mov	[esi+4], eax
		test	eax, eax
		jz	loc_1002E03F
		mov	edx, [esp+4+arg_4]
		lea	ecx, [esi+0Ch]
		push	ecx
		push	edx
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	loc_1002E03D
		mov	ecx, [esp+4+arg_8]
		lea	eax, [esi+1Ch]
		push	eax
		push	ecx
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_1002E03D
		mov	eax, [esp+4+arg_C]
		lea	edx, [esi+2Ch]
		push	edx
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_1002E03D
		mov	edx, [esp+4+arg_10]
		lea	ecx, [esi+3Ch]
		push	ecx
		push	edx
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_1002E03D
		mov	ecx, [esp+4+arg_14]
		lea	eax, [esi+4Ch]
		push	eax
		push	ecx
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_1002E03D
		mov	edx, [esp+4+arg_18]
		mov	[esi+5Ch], edx
		mov	dword ptr [esi+60h], offset sub_10030450
		mov	dword ptr [esi+64h], offset sub_10030860
		mov	dword ptr [esi+68h], offset loc_100308E0
		mov	dword ptr [esi+6Ch], offset sub_100326B0
		mov	dword ptr [esi+70h], 0
		mov	dword ptr [esi+74h], offset sub_100316E0
		mov	dword ptr [esi+78h], offset sub_10030910

loc_1002E03D:				; CODE XREF: sub_1002DF70+3Bj
					; sub_1002DF70+54j ...
		jz	short loc_1002E04C

loc_1002E03F:				; CODE XREF: sub_1002DF70+22j
		push	esi		; Memory
		call	sub_1002DE30
		add	esp, 4

loc_1002E048:				; CODE XREF: sub_1002DF70+Aj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002E04C:				; CODE XREF: sub_1002DF70:loc_1002E03Dj
		mov	eax, esi
		pop	esi
		retn
sub_1002DF70	endp


; =============== S U B	R O U T	I N E =======================================


sub_1002E050	proc near		; CODE XREF: sub_1002E140+1ACp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	esi
		call	sub_1002DEB0
		mov	esi, eax
		test	esi, esi
		jz	loc_1002E135
		mov	eax, [esp+4+arg_0]
		push	eax
		call	sub_10031F70
		add	esp, 4
		mov	[esi+4], eax
		test	eax, eax
		jz	loc_1002E12C
		mov	edx, [esp+4+arg_4]
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esi+0Ch]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_1002E12A
		mov	eax, [esi+4]
		mov	edx, [esp+4+arg_8]
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esi+1Ch]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1002E12A
		mov	eax, [esi+4]
		mov	edx, [esp+4+arg_C]
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esi+2Ch]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1002E12A
		mov	eax, [esi+4]
		mov	edx, [esp+4+arg_10]
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esi+3Ch]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1002E12A
		mov	edx, [esp+4+arg_14]
		lea	ecx, [esi+4Ch]
		push	ecx
		push	edx
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_1002E12A
		mov	ecx, [esp+4+arg_18]
		mov	[esi+5Ch], ecx
		mov	dword ptr [esi+60h], offset sub_10030450
		mov	dword ptr [esi+64h], offset sub_10030860
		mov	dword ptr [esi+68h], offset loc_100308E0
		mov	dword ptr [esi+6Ch], offset sub_100326B0
		mov	dword ptr [esi+70h], 0
		mov	dword ptr [esi+74h], offset sub_100316E0
		mov	dword ptr [esi+78h], offset sub_10030910

loc_1002E12A:				; CODE XREF: sub_1002E050+3Cj
					; sub_1002E050+59j ...
		jz	short loc_1002E139

loc_1002E12C:				; CODE XREF: sub_1002E050+22j
		push	esi		; Memory
		call	sub_1002DE30
		add	esp, 4

loc_1002E135:				; CODE XREF: sub_1002E050+Aj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002E139:				; CODE XREF: sub_1002E050:loc_1002E12Aj
		mov	eax, esi
		pop	esi
		retn
sub_1002E050	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E140	proc near		; CODE XREF: sub_1002E430+1Dp

var_60		= dword	ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 60h
		push	ebx
		push	ebp
		xor	ebp, ebp
		lea	eax, [esp+68h+var_60]
		push	esi
		push	eax
		xor	ebx, ebx
		mov	[esp+70h+var_54], ebp
		mov	[esp+70h+var_44], ebp
		mov	[esp+70h+var_34], ebp
		mov	[esp+70h+var_24], ebp
		mov	[esp+70h+var_14], ebp
		mov	[esp+70h+var_4], ebp
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1002E304
		lea	ecx, [esp+6Ch+var_50]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1002E304
		lea	edx, [esp+6Ch+var_40]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1002E304
		lea	eax, [esp+6Ch+var_30]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1002E304
		lea	ecx, [esp+6Ch+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1002E304
		lea	edx, [esp+6Ch+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1002E304
		push	edi
		mov	edi, [esp+70h+arg_4]
		mov	eax, [edi+0Ch]
		push	10h		; Val
		push	eax		; int
		lea	ecx, [esp+78h+var_60]
		push	ecx		; int
		call	sub_1002BAB0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1002E303
		mov	edx, [edi+10h]
		push	10h		; Val
		push	edx		; int
		lea	eax, [esp+78h+var_50]
		push	eax		; int
		call	sub_1002BAB0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1002E303
		mov	ecx, [edi+14h]
		push	10h		; Val
		push	ecx		; int
		lea	edx, [esp+78h+var_40]
		push	edx		; int
		call	sub_1002BAB0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1002E303
		mov	eax, [edi+18h]
		push	10h		; Val
		push	eax		; int
		lea	ecx, [esp+78h+var_30]
		push	ecx		; int
		call	sub_1002BAB0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1002E303
		mov	edx, [edi+1Ch]
		push	10h		; Val
		push	edx		; int
		lea	eax, [esp+78h+var_20]
		push	eax		; int
		call	sub_1002BAB0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1002E303
		mov	ecx, [edi+20h]
		push	10h		; Val
		push	ecx		; int
		lea	edx, [esp+78h+var_10]
		push	edx		; int
		call	sub_1002BAB0
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	short loc_1002E303
		lea	eax, [esp+70h+var_60]
		push	eax
		call	sub_10028CE0
		add	esp, 4
		dec	eax
		jns	short loc_1002E2AF
		mov	esi, eax
		jmp	short loc_1002E303
; ---------------------------------------------------------------------------

loc_1002E2AF:				; CODE XREF: sub_1002E140+169j
		cmp	[edi+4], ebp
		jnz	short loc_1002E2FE
		mov	eax, [esp+70h+arg_0]
		sub	eax, 3
		jz	loc_1002E39B
		sub	eax, 2
		jz	loc_1002E35D
		mov	ecx, [edi+24h]
		push	ecx
		lea	edx, [esp+74h+var_10]
		push	edx
		lea	eax, [esp+78h+var_20]
		push	eax
		lea	ecx, [esp+7Ch+var_30]
		push	ecx
		lea	edx, [esp+80h+var_40]
		push	edx
		lea	eax, [esp+84h+var_50]
		push	eax
		lea	ecx, [esp+88h+var_60]
		push	ecx
		call	sub_1002E050
		mov	ebx, eax
		add	esp, 1Ch
		cmp	ebx, ebp
		jnz	loc_1002E3F9

loc_1002E2FE:				; CODE XREF: sub_1002E140+172j
					; sub_1002E140+24Bj ...
		mov	esi, 0FFFFFFFBh

loc_1002E303:				; CODE XREF: sub_1002E140+C8j
					; sub_1002E140+E5j ...
		pop	edi

loc_1002E304:				; CODE XREF: sub_1002E140+33j
					; sub_1002E140+4Aj ...
		lea	ecx, [esp+6Ch+var_60]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+70h+var_50]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+74h+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+78h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+7Ch+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+80h+var_10]
		push	eax
		call	sub_10028EF0
		add	esp, 18h
		cmp	esi, ebp
		jz	loc_1002E422
		push	ebx		; Memory
		call	sub_1002DE30
		add	esp, 4
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_1002E35D:				; CODE XREF: sub_1002E140+184j
		mov	edx, [edi+24h]
		push	edx
		lea	eax, [esp+74h+var_10]
		push	eax
		lea	ecx, [esp+78h+var_20]
		push	ecx
		lea	edx, [esp+7Ch+var_30]
		push	edx
		lea	eax, [esp+80h+var_40]
		push	eax
		lea	ecx, [esp+84h+var_50]
		push	ecx
		lea	edx, [esp+88h+var_60]
		push	edx
		call	sub_1002DF70
		mov	ebx, eax
		add	esp, 1Ch
		cmp	ebx, ebp
		jz	loc_1002E2FE
		push	5
		push	ebx
		call	sub_100338E0
		jmp	short loc_1002E3EC
; ---------------------------------------------------------------------------

loc_1002E39B:				; CODE XREF: sub_1002E140+17Bj
		mov	eax, [edi+24h]
		push	eax
		lea	ecx, [esp+74h+var_10]
		push	ecx
		lea	edx, [esp+78h+var_20]
		push	edx
		lea	eax, [esp+7Ch+var_30]
		push	eax
		lea	ecx, [esp+80h+var_40]
		push	ecx
		lea	edx, [esp+84h+var_50]
		push	edx
		lea	eax, [esp+88h+var_60]
		push	eax
		call	sub_1002DF70
		mov	ebx, eax
		add	esp, 1Ch
		cmp	ebx, ebp
		jz	loc_1002E2FE
		push	3
		push	ebx
		call	sub_100335D0
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1002E303
		push	3
		push	ebx
		call	sub_100373C0

loc_1002E3EC:				; CODE XREF: sub_1002E140+259j
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1002E303

loc_1002E3F9:				; CODE XREF: sub_1002E140+1B8j
		mov	edi, [edi]
		cmp	edi, ebp
		jz	loc_1002E303
		push	edi		; Src
		call	ds:_strdup
		add	esp, 4
		mov	[ebx+8], eax
		cmp	eax, ebp
		jnz	loc_1002E303
		mov	esi, 0FFFFFFFEh
		jmp	loc_1002E303
; ---------------------------------------------------------------------------

loc_1002E422:				; CODE XREF: sub_1002E140+205j
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 60h
		retn
sub_1002E140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E430	proc near		; CODE XREF: sub_10017060+1DEp
					; sub_100178F0+E8p

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		push	ebx
		xor	edi, edi
		xor	ebp, ebp
		call	sub_1002E5F0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1002E45B
		push	esi
		push	ebx
		call	sub_1002E140
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1002E460

loc_1002E45B:				; CODE XREF: sub_1002E430+19j
		mov	ebp, 0FFFFFFFBh

loc_1002E460:				; CODE XREF: sub_1002E430+29j
		push	esi		; Memory
		call	sub_1002E490
		add	esp, 4
		test	ebp, ebp
		jz	short loc_1002E47D
		push	edi		; Memory
		call	sub_1002DE30
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002E47D:				; CODE XREF: sub_1002E430+3Bj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1002E430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1002E490(void	*Memory)
sub_1002E490	proc near		; CODE XREF: sub_1002E430+31p
					; sub_1002E510+CBp

Memory		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jz	short loc_1002E501
		mov	eax, [esi]
		push	edi
		mov	edi, ds:free
		test	eax, eax
		jz	short loc_1002E4AC
		push	eax		; Memory
		call	edi ; free
		add	esp, 4

loc_1002E4AC:				; CODE XREF: sub_1002E490+14j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1002E4B9
		push	eax		; Memory
		call	edi ; free
		add	esp, 4

loc_1002E4B9:				; CODE XREF: sub_1002E490+21j
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1002E4C6
		push	eax		; Memory
		call	edi ; free
		add	esp, 4

loc_1002E4C6:				; CODE XREF: sub_1002E490+2Ej
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_1002E4D3
		push	eax		; Memory
		call	edi ; free
		add	esp, 4

loc_1002E4D3:				; CODE XREF: sub_1002E490+3Bj
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_1002E4E0
		push	eax		; Memory
		call	edi ; free
		add	esp, 4

loc_1002E4E0:				; CODE XREF: sub_1002E490+48j
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_1002E4ED
		push	eax		; Memory
		call	edi ; free
		add	esp, 4

loc_1002E4ED:				; CODE XREF: sub_1002E490+55j
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_1002E4FA
		push	eax		; Memory
		call	edi ; free
		add	esp, 4

loc_1002E4FA:				; CODE XREF: sub_1002E490+62j
		push	esi		; Memory
		call	edi ; free
		add	esp, 4
		pop	edi

loc_1002E501:				; CODE XREF: sub_1002E490+7j
		pop	esi
		retn
sub_1002E490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E510	proc near		; CODE XREF: sub_1002E5F0+1Bj

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		push	28h		; SizeOfElements
		push	1		; NumOfElements
		call	ds:calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_1002E5DA
		mov	ebx, [esp+0Ch+arg_0]
		mov	eax, [ebx]
		mov	edi, ds:_strdup
		test	eax, eax
		jz	short loc_1002E54A
		push	eax		; Src
		call	edi ; _strdup
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jz	loc_1002E5DA

loc_1002E54A:				; CODE XREF: sub_1002E510+28j
		mov	eax, [ebx+4]
		mov	[esi+4], eax
		mov	ecx, [ebx+8]
		mov	[esi+8], ecx
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_1002E56A
		push	eax		; Src
		call	edi ; _strdup
		add	esp, 4
		mov	[esi+0Ch], eax
		test	eax, eax
		jz	short loc_1002E5DA

loc_1002E56A:				; CODE XREF: sub_1002E510+4Bj
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_1002E57E
		push	eax		; Src
		call	edi ; _strdup
		add	esp, 4
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_1002E5DA

loc_1002E57E:				; CODE XREF: sub_1002E510+5Fj
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_1002E592
		push	eax		; Src
		call	edi ; _strdup
		add	esp, 4
		mov	[esi+14h], eax
		test	eax, eax
		jz	short loc_1002E5DA

loc_1002E592:				; CODE XREF: sub_1002E510+73j
		mov	eax, [ebx+18h]
		test	eax, eax
		jz	short loc_1002E5A6
		push	eax		; Src
		call	edi ; _strdup
		add	esp, 4
		mov	[esi+18h], eax
		test	eax, eax
		jz	short loc_1002E5DA

loc_1002E5A6:				; CODE XREF: sub_1002E510+87j
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jz	short loc_1002E5BA
		push	eax		; Src
		call	edi ; _strdup
		add	esp, 4
		mov	[esi+1Ch], eax
		test	eax, eax
		jz	short loc_1002E5DA

loc_1002E5BA:				; CODE XREF: sub_1002E510+9Bj
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_1002E5CE
		push	eax		; Src
		call	edi ; _strdup
		add	esp, 4
		mov	[esi+20h], eax
		test	eax, eax
		jz	short loc_1002E5DA

loc_1002E5CE:				; CODE XREF: sub_1002E510+AFj
		mov	edx, [ebx+24h]
		pop	edi
		mov	[esi+24h], edx
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002E5DA:				; CODE XREF: sub_1002E510+14j
					; sub_1002E510+34j ...
		push	esi		; Memory
		call	sub_1002E490
		add	esp, 4
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_1002E510	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E5F0	proc near		; CODE XREF: sub_1002E430+Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		lea	ecx, [eax-1]
		cmp	ecx, 38h
		ja	short loc_1002E610
		mov	eax, dword_10049220[eax*4]
		test	eax, eax
		jz	short loc_1002E610
		mov	[esp+arg_0], eax
		jmp	sub_1002E510
; ---------------------------------------------------------------------------

loc_1002E610:				; CODE XREF: sub_1002E5F0+Aj
					; sub_1002E5F0+15j
		xor	eax, eax
		retn
sub_1002E5F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E620	proc near		; CODE XREF: sub_1002E7C0+62Ep
					; sub_10030910+217p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 10h
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		push	esi
		xor	esi, esi
		push	edi
		cmp	ebp, esi
		jz	loc_1002E7AC
		mov	edi, [esp+1Ch+arg_0]
		cmp	edi, esi
		jz	loc_1002E7AC
		push	ebx
		lea	ebx, [edi+4Ch]
		push	ebx
		push	ebp
		mov	[esp+28h+var_4], esi
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jle	short loc_1002E688
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002E78C
		lea	ecx, [esp+20h+var_10]
		push	ecx
		push	ebx
		push	ebp
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002E78C
		jmp	short loc_1002E6A1
; ---------------------------------------------------------------------------

loc_1002E688:				; CODE XREF: sub_1002E620+34j
		mov	edx, [ebp+8]
		mov	eax, [ebp+4]
		mov	ecx, [ebp+0Ch]
		mov	[esp+20h+var_10], esi
		mov	[esp+20h+var_8], edx
		mov	[esp+20h+var_C], eax
		mov	[esp+20h+var_4], ecx

loc_1002E6A1:				; CODE XREF: sub_1002E620+66j
		mov	ecx, [esp+20h+arg_8]
		test	ecx, ecx
		jz	short loc_1002E727
		cmp	[esp+20h+arg_C], 0
		jz	short loc_1002E727
		mov	edx, [edi+4]
		cmp	dword ptr [edx+44h], 0
		mov	ebx, [esp+20h+arg_10]
		jz	short loc_1002E705
		mov	eax, edx
		push	eax
		mov	eax, [eax+44h]
		push	ebx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002E78C
		mov	eax, [edi+4]
		mov	ebp, [esp+20h+arg_14]
		mov	ecx, [esp+20h+arg_C]
		mov	edx, [eax+44h]
		push	eax
		push	ebp
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002E788
		mov	ecx, [edi+6Ch]
		push	edi
		push	ebp
		push	ebx
		push	ebp
		lea	eax, [esp+30h+var_10]
		push	ebx
		push	eax
		call	ecx
		jmp	short loc_1002E753
; ---------------------------------------------------------------------------

loc_1002E705:				; CODE XREF: sub_1002E620+9Bj
		mov	ebp, [esp+20h+arg_14]
		mov	edx, [esp+20h+arg_C]
		push	edi
		push	ebp
		push	ebx
		push	edx
		push	ecx
		mov	ecx, [edi+6Ch]
		lea	eax, [esp+34h+var_10]
		push	eax
		call	ecx
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jns	short loc_1002E75C
		jmp	short loc_1002E788
; ---------------------------------------------------------------------------

loc_1002E727:				; CODE XREF: sub_1002E620+87j
					; sub_1002E620+8Ej
		mov	ebp, [esp+20h+arg_14]
		mov	eax, [edi+70h]
		mov	ebx, [esp+20h+arg_10]
		push	edi
		push	ebp
		lea	edx, [esp+28h+var_10]
		push	ebx
		test	eax, eax
		jz	short loc_1002E745
		push	edx
		call	eax
		add	esp, 10h
		jmp	short loc_1002E756
; ---------------------------------------------------------------------------

loc_1002E745:				; CODE XREF: sub_1002E620+11Bj
		lea	eax, [edi+3Ch]
		push	eax
		mov	eax, [edi+6Ch]
		lea	ecx, [edi+2Ch]
		push	ecx
		push	edx
		call	eax

loc_1002E753:				; CODE XREF: sub_1002E620+E3j
		add	esp, 18h

loc_1002E756:				; CODE XREF: sub_1002E620+123j
		mov	esi, eax
		test	esi, esi
		js	short loc_1002E788

loc_1002E75C:				; CODE XREF: sub_1002E620+103j
		mov	ecx, [edi+4]
		cmp	dword ptr [ecx+48h], 0
		jz	short loc_1002E788
		mov	eax, ecx
		mov	edx, [eax+48h]
		push	eax
		push	ebx
		push	ebx
		call	edx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002E788
		mov	edi, [edi+4]
		mov	eax, [edi+48h]
		push	edi
		push	ebp
		push	ebp
		call	eax
		add	esp, 0Ch
		mov	esi, eax

loc_1002E788:				; CODE XREF: sub_1002E620+CEj
					; sub_1002E620+105j ...
		mov	ebp, [esp+20h+arg_4]

loc_1002E78C:				; CODE XREF: sub_1002E620+47j
					; sub_1002E620+60j ...
		mov	ecx, [esp+20h+var_4]
		pop	ebx
		cmp	ecx, [ebp+0Ch]
		jz	short loc_1002E7A3
		lea	edx, [esp+1Ch+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4

loc_1002E7A3:				; CODE XREF: sub_1002E620+174j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1002E7AC:				; CODE XREF: sub_1002E620+Ej
					; sub_1002E620+1Aj
		pop	edi
		pop	esi
		mov	eax, 0FFFFFFFCh
		pop	ebp
		add	esp, 10h
		retn
sub_1002E620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002E7C0	proc near		; CODE XREF: sub_1002EE10+10Dp

var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F4		= byte ptr -1F4h
var_1E8		= byte ptr -1E8h
var_1E4		= byte ptr -1E4h
var_1D4		= byte ptr -1D4h
var_1C4		= byte ptr -1C4h
var_1B4		= byte ptr -1B4h
var_1A4		= byte ptr -1A4h
var_194		= byte ptr -194h
var_184		= byte ptr -184h
var_174		= byte ptr -174h
var_164		= byte ptr -164h
var_144		= byte ptr -144h
var_124		= byte ptr -124h
var_104		= byte ptr -104h
var_F4		= byte ptr -0F4h
var_84		= byte ptr -84h
var_74		= byte ptr -74h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 224h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+224h+var_4], eax
		mov	eax, [esp+224h+arg_4]
		mov	ecx, [esp+224h+arg_8]
		mov	edx, [esp+224h+arg_C]
		push	ebx
		mov	ebx, [esp+228h+arg_10]
		push	ebp
		push	esi
		mov	esi, [esp+230h+arg_0]
		push	edi
		mov	edi, [esp+234h+arg_14]
		mov	[esp+234h+var_218], edi
		mov	edi, [esp+234h+arg_18]
		xor	ebp, ebp
		mov	[esp+234h+var_208], esi
		mov	[esp+234h+var_210], eax
		mov	[esp+234h+var_220], ecx
		mov	[esp+234h+var_224], edx
		mov	[esp+234h+var_20C], ebx
		cmp	edi, ebp
		jnz	short loc_1002E831

loc_1002E827:				; CODE XREF: sub_1002E7C0+77j
					; sub_1002E7C0+7Bj ...
		mov	eax, 0FFFFFFFCh
		jmp	loc_1002EDF6
; ---------------------------------------------------------------------------

loc_1002E831:				; CODE XREF: sub_1002E7C0+65j
		cmp	esi, ebp
		jnz	short loc_1002E84F
		cmp	eax, ebp
		jz	short loc_1002E827
		cmp	ecx, ebp
		jz	short loc_1002E827
		cmp	edx, ebp
		jz	short loc_1002E827
		mov	esi, [esp+234h+var_218]
		push	esi
		push	ebx
		push	edx
		push	ecx
		push	eax
		jmp	loc_1002EDED
; ---------------------------------------------------------------------------

loc_1002E84F:				; CODE XREF: sub_1002E7C0+73j
		cmp	eax, ebp
		jz	loc_1002EDE4
		cmp	ecx, ebp
		jz	loc_1002EDE4
		cmp	edx, ebp
		jz	loc_1002EDE4
		lea	eax, [esp+234h+var_1E8]
		mov	ecx, 4

loc_1002E870:				; CODE XREF: sub_1002E7C0+CBj
		mov	[eax-10h], ebp
		mov	[eax], ebp
		mov	[eax+10h], ebp
		mov	[eax+20h], ebp
		mov	[eax+30h], ebp
		mov	[eax+40h], ebp
		mov	[eax+50h], ebp
		mov	[eax+60h], ebp
		sub	eax, 0FFFFFF80h
		dec	ecx
		jnz	short loc_1002E870
		lea	eax, [esp+234h+var_1F4]
		mov	[esp+234h+var_214], ebp
		mov	[esp+234h+var_21C], eax
		jmp	short loc_1002E8A2
; ---------------------------------------------------------------------------
		jmp	short loc_1002E8A0
; ---------------------------------------------------------------------------
		align 10h

loc_1002E8A0:				; CODE XREF: sub_1002E7C0+DBj
					; sub_1002E7C0+12Dj
		xor	ebp, ebp

loc_1002E8A2:				; CODE XREF: sub_1002E7C0+D9j
		mov	ebx, [esp+234h+var_21C]

loc_1002E8A6:				; CODE XREF: sub_1002E7C0+11Aj
		lea	ecx, [ebx-10h]
		push	14h
		push	ecx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002EDB2
		push	14h
		push	ebx
		call	sub_10028D30
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002EDB2
		inc	ebp
		add	ebx, 20h
		cmp	ebp, 4
		jl	short loc_1002E8A6
		mov	eax, [esp+234h+var_214]
		sub	[esp+234h+var_21C], 0FFFFFF80h
		inc	eax
		mov	[esp+234h+var_214], eax
		cmp	eax, 4
		jl	short loc_1002E8A0
		mov	ebx, [esp+234h+var_210]
		push	ebx
		call	sub_10028CE0
		mov	esi, [esp+238h+var_208]
		push	esi
		mov	ebp, eax
		call	sub_10028CE0
		add	esp, 8
		cmp	eax, ebp
		jge	loc_1002E9BE
		mov	edx, [edi+4]
		cmp	dword ptr [edx+44h], 0
		mov	[esp+234h+var_21C], ebx
		mov	[esp+234h+var_210], esi
		lea	ecx, [esp+234h+var_184]
		jz	short loc_1002E95E
		mov	eax, edx
		mov	edx, [esp+234h+var_220]
		push	eax
		mov	eax, [eax+44h]
		push	ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002EDB2
		mov	eax, [edi+4]
		mov	edx, [esp+234h+var_224]
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esp+238h+var_174]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		jmp	short loc_1002E98B
; ---------------------------------------------------------------------------

loc_1002E95E:				; CODE XREF: sub_1002E7C0+166j
		mov	edx, [esp+234h+var_220]
		push	ecx
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002EDB2
		mov	ecx, [esp+234h+var_224]
		lea	eax, [esp+234h+var_174]
		push	eax
		push	ecx
		call	sub_10028E00
		add	esp, 8

loc_1002E98B:				; CODE XREF: sub_1002E7C0+19Cj
		mov	esi, eax
		test	esi, esi
		js	loc_1002EDB2
		lea	edx, [esp+234h+var_1E4]
		push	edx
		lea	eax, [edi+2Ch]
		push	eax
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002EDB2
		lea	ecx, [esp+234h+var_1D4]
		push	ecx
		lea	edx, [edi+3Ch]
		push	edx
		jmp	loc_1002EA68
; ---------------------------------------------------------------------------

loc_1002E9BE:				; CODE XREF: sub_1002E7C0+14Aj
		lea	eax, [esp+234h+var_184]
		push	eax
		lea	ecx, [edi+2Ch]
		push	ecx
		mov	[esp+23Ch+var_21C], esi
		mov	[esp+23Ch+var_210], ebx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002EDB2
		lea	edx, [esp+234h+var_174]
		push	edx
		lea	eax, [edi+3Ch]
		push	eax
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002EDB2
		mov	ecx, [edi+4]
		cmp	dword ptr [ecx+44h], 0
		jz	short loc_1002EA42
		mov	eax, ecx
		mov	ecx, [esp+234h+var_220]
		push	eax
		lea	edx, [esp+238h+var_1E4]
		push	edx
		mov	edx, [eax+44h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002EDB2
		mov	eax, [edi+4]
		mov	edx, [esp+234h+var_224]
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esp+238h+var_1D4]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		jmp	short loc_1002EA70
; ---------------------------------------------------------------------------

loc_1002EA42:				; CODE XREF: sub_1002E7C0+249j
		mov	edx, [esp+234h+var_220]
		lea	ecx, [esp+234h+var_1E4]
		push	ecx
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_1002EDB2
		mov	ecx, [esp+234h+var_224]
		lea	eax, [esp+234h+var_1D4]
		push	eax
		push	ecx

loc_1002EA68:				; CODE XREF: sub_1002E7C0+1F9j
		call	sub_10028E00
		add	esp, 8

loc_1002EA70:				; CODE XREF: sub_1002E7C0+280j
		mov	esi, eax
		test	esi, esi
		js	loc_1002EDB2
		lea	edx, [esp+234h+var_204]
		push	edx
		call	sub_10028F40
		lea	eax, [esp+238h+var_1F4]
		push	eax
		call	sub_10028F40
		push	edi
		lea	ecx, [esp+240h+var_F4]
		push	ecx
		lea	edx, [esp+244h+var_104]
		push	edx
		mov	edx, [edi+68h]
		lea	eax, [esp+248h+var_174]
		push	eax
		lea	ecx, [esp+24Ch+var_184]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_1002EDB2
		push	edi
		lea	eax, [esp+238h+var_74]
		push	eax
		lea	ecx, [esp+23Ch+var_84]
		push	ecx
		lea	edx, [esp+240h+var_F4]
		push	edx
		lea	eax, [esp+244h+var_104]
		push	eax
		mov	eax, [edi+60h]
		lea	ecx, [esp+248h+var_174]
		push	ecx
		lea	edx, [esp+24Ch+var_184]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_1002EDB2
		mov	ebp, 1
		lea	ebx, [esp+234h+var_164]

loc_1002EB10:				; CODE XREF: sub_1002E7C0+381j
		push	edi
		lea	ecx, [ebx+10h]
		push	ecx
		push	ebx
		lea	edx, [ebx-10h]
		push	edx
		lea	eax, [ebx-20h]
		push	eax
		mov	eax, [edi+60h]
		lea	ecx, [esp+248h+var_1D4]
		push	ecx
		lea	edx, [esp+24Ch+var_1E4]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_1002EDB2
		inc	ebp
		sub	ebx, 0FFFFFF80h
		cmp	ebp, 4
		jl	short loc_1002EB10
		push	edi
		lea	ecx, [esp+238h+var_1B4]
		push	ecx
		lea	edx, [esp+23Ch+var_1C4]
		push	edx
		mov	edx, [edi+68h]
		lea	eax, [esp+240h+var_1D4]
		push	eax
		lea	ecx, [esp+244h+var_1E4]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_1002EDB2
		mov	ebp, 1
		lea	ebx, [esp+234h+var_144]
		lea	esp, [esp+0]

loc_1002EB80:				; CODE XREF: sub_1002E7C0+3F7j
		push	edi
		lea	eax, [ebx+10h]
		push	eax
		push	ebx
		lea	ecx, [ebx-30h]
		push	ecx
		lea	edx, [ebx-40h]
		push	edx
		mov	edx, [edi+60h]
		lea	eax, [esp+248h+var_1B4]
		push	eax
		lea	ecx, [esp+24Ch+var_1C4]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_1002EDB2
		inc	ebp
		sub	ebx, 0FFFFFF80h
		cmp	ebp, 4
		jl	short loc_1002EB80
		push	edi
		lea	eax, [esp+238h+var_194]
		push	eax
		lea	ecx, [esp+23Ch+var_1A4]
		push	ecx
		lea	edx, [esp+240h+var_1B4]
		push	edx
		lea	eax, [esp+244h+var_1C4]
		push	eax
		mov	eax, [edi+60h]
		lea	ecx, [esp+248h+var_1D4]
		push	ecx
		lea	edx, [esp+24Ch+var_1E4]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_1002EDB2
		mov	ebp, 1
		lea	ebx, [esp+234h+var_124]

loc_1002EC02:				; CODE XREF: sub_1002E7C0+479j
		push	edi
		lea	ecx, [ebx+10h]
		push	ecx
		push	ebx
		lea	edx, [ebx-50h]
		push	edx
		lea	eax, [ebx-60h]
		push	eax
		mov	eax, [edi+60h]
		lea	ecx, [esp+248h+var_194]
		push	ecx
		lea	edx, [esp+24Ch+var_1A4]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_1002EDB2
		inc	ebp
		sub	ebx, 0FFFFFF80h
		cmp	ebp, 4
		jl	short loc_1002EC02
		mov	ecx, [esp+234h+var_21C]
		push	ecx
		call	sub_10028CE0
		mov	ebp, [esp+238h+var_20C]
		inc	eax
		cdq
		sub	eax, edx
		mov	ebx, eax
		push	ebp
		sar	ebx, 1
		call	sub_10028F40
		mov	edx, [esp+23Ch+var_218]
		push	edx
		call	sub_10028F40
		add	esp, 0Ch
		dec	ebx
		mov	[esp+234h+var_214], ebx
		js	loc_1002ED82
		lea	eax, [ebx+ebx]
		mov	[esp+234h+var_220], eax

loc_1002EC76:				; CODE XREF: sub_1002E7C0+5BCj
		mov	esi, [esp+234h+var_21C]
		mov	ebx, [esp+234h+var_220]
		push	esi
		inc	ebx
		call	sub_10028CE0
		add	esp, 4
		cmp	ebx, eax
		jl	short loc_1002EC96
		mov	[esp+234h+var_224], 0
		jmp	short loc_1002ECA4
; ---------------------------------------------------------------------------

loc_1002EC96:				; CODE XREF: sub_1002E7C0+4CAj
		push	ebx
		push	esi
		call	sub_10028C10
		add	esp, 8
		mov	[esp+234h+var_224], eax

loc_1002ECA4:				; CODE XREF: sub_1002E7C0+4D4j
		shl	[esp+234h+var_224], 1
		push	esi
		call	sub_10028CE0
		mov	ecx, [esp+238h+var_220]
		add	esp, 4
		cmp	ecx, eax
		jl	short loc_1002ECBD
		xor	eax, eax
		jmp	short loc_1002ECC7
; ---------------------------------------------------------------------------

loc_1002ECBD:				; CODE XREF: sub_1002E7C0+4F7j
		push	ecx
		push	esi
		call	sub_10028C10
		add	esp, 8

loc_1002ECC7:				; CODE XREF: sub_1002E7C0+4FBj
		mov	esi, [esp+234h+var_210]
		or	[esp+234h+var_224], eax
		push	esi
		call	sub_10028CE0
		add	esp, 4
		cmp	ebx, eax
		jl	short loc_1002ECE0
		xor	ebx, ebx
		jmp	short loc_1002ECEC
; ---------------------------------------------------------------------------

loc_1002ECE0:				; CODE XREF: sub_1002E7C0+51Aj
		push	ebx
		push	esi
		call	sub_10028C10
		add	esp, 8
		mov	ebx, eax

loc_1002ECEC:				; CODE XREF: sub_1002E7C0+51Ej
		push	esi
		add	ebx, ebx
		call	sub_10028CE0
		mov	ecx, [esp+238h+var_220]
		add	esp, 4
		cmp	ecx, eax
		jl	short loc_1002ED03
		xor	eax, eax
		jmp	short loc_1002ED0D
; ---------------------------------------------------------------------------

loc_1002ED03:				; CODE XREF: sub_1002E7C0+53Dj
		push	ecx
		push	esi
		call	sub_10028C10
		add	esp, 8

loc_1002ED0D:				; CODE XREF: sub_1002E7C0+541j
		mov	ecx, [edi+68h]
		push	edi
		or	ebx, eax
		mov	eax, [esp+238h+var_218]
		push	eax
		push	ebp
		push	eax
		push	ebp
		call	ecx
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_1002EDB2
		mov	eax, [esp+234h+var_218]
		mov	edx, [edi+68h]
		push	edi
		push	eax
		push	ebp
		push	eax
		push	ebp
		call	edx
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	short loc_1002EDB2
		mov	eax, [esp+234h+var_224]
		mov	ecx, [esp+234h+var_218]
		push	edi
		push	ecx
		lea	eax, [ebx+eax*4]
		shl	eax, 5
		push	ebp
		lea	edx, [esp+eax+240h+var_1F4]
		push	edx
		lea	eax, [esp+eax+244h+var_204]
		push	eax
		push	ecx
		mov	ecx, [edi+60h]
		push	ebp
		call	ecx
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	short loc_1002EDB2
		mov	eax, [esp+234h+var_214]
		sub	[esp+234h+var_220], 2
		dec	eax
		mov	[esp+234h+var_214], eax
		test	eax, eax
		jns	loc_1002EC76

loc_1002ED82:				; CODE XREF: sub_1002E7C0+4A9j
		mov	edx, [edi+4]
		cmp	dword ptr [edx+48h], 0
		jz	short loc_1002EDB2
		mov	eax, edx
		push	eax
		mov	eax, [eax+48h]
		push	ebp
		push	ebp
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002EDB2
		mov	edi, [edi+4]
		mov	eax, [esp+234h+var_218]
		mov	ecx, [edi+48h]
		push	edi
		push	eax
		push	eax
		call	ecx
		add	esp, 0Ch
		mov	esi, eax

loc_1002EDB2:				; CODE XREF: sub_1002E7C0+F8j
					; sub_1002E7C0+10Dj ...
		lea	edi, [esp+234h+var_1F4]
		mov	ebp, 4
		jmp	short loc_1002EDC0
; ---------------------------------------------------------------------------
		align 10h

loc_1002EDC0:				; CODE XREF: sub_1002E7C0+5FBj
					; sub_1002E7C0+61Ej
		mov	ebx, 4

loc_1002EDC5:				; CODE XREF: sub_1002E7C0+61Bj
		lea	edx, [edi-10h]
		push	edx
		call	sub_10028EF0
		push	edi
		call	sub_10028EF0
		add	esp, 8
		add	edi, 20h
		dec	ebx
		jnz	short loc_1002EDC5
		dec	ebp
		jnz	short loc_1002EDC0
		mov	eax, esi
		jmp	short loc_1002EDF6
; ---------------------------------------------------------------------------

loc_1002EDE4:				; CODE XREF: sub_1002E7C0+91j
					; sub_1002E7C0+99j ...
		mov	eax, [esp+234h+var_218]
		push	eax
		push	ebx
		push	ebp
		push	ebp
		push	esi

loc_1002EDED:				; CODE XREF: sub_1002E7C0+8Aj
		push	edi
		call	sub_1002E620
		add	esp, 18h

loc_1002EDF6:				; CODE XREF: sub_1002E7C0+6Cj
					; sub_1002E7C0+622j
		mov	ecx, [esp+234h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 224h
		retn
sub_1002E7C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002EE10	proc near		; CODE XREF: sub_10017060+236p

var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 20h
		xor	eax, eax
		push	ebp
		mov	ebp, [esp+24h+arg_0]
		mov	[esp+24h+var_14], eax
		mov	[esp+24h+var_4], eax
		cmp	ebp, eax
		jnz	short loc_1002EE30
		mov	eax, 0FFFFFFFCh
		pop	ebp
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1002EE30:				; CODE XREF: sub_1002EE10+14j
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+30h+arg_4]
		cmp	edi, eax
		jz	short loc_1002EE8C
		lea	ebx, [ebp+4Ch]
		push	ebx
		push	edi
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		js	short loc_1002EE86
		lea	eax, [esp+30h+var_20]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_1002EF27
		lea	ecx, [esp+30h+var_20]
		push	ecx
		push	ebx
		push	edi
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_1002EF27
		lea	edx, [esp+30h+var_20]
		mov	[esp+30h+arg_0], edx
		jmp	short loc_1002EE90
; ---------------------------------------------------------------------------

loc_1002EE86:				; CODE XREF: sub_1002EE10+3Aj
		mov	[esp+30h+arg_0], edi
		jmp	short loc_1002EE90
; ---------------------------------------------------------------------------

loc_1002EE8C:				; CODE XREF: sub_1002EE10+29j
		mov	[esp+30h+arg_0], eax

loc_1002EE90:				; CODE XREF: sub_1002EE10+74j
					; sub_1002EE10+7Aj
		mov	edi, [esp+30h+arg_8]
		test	edi, edi
		jz	short loc_1002EEDB
		lea	ebx, [ebp+4Ch]
		push	ebx
		push	edi
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		js	short loc_1002EED7
		lea	eax, [esp+30h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_1002EF27
		lea	ecx, [esp+30h+var_10]
		push	ecx
		push	ebx
		push	edi
		call	sub_1002C150
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1002EF27
		lea	eax, [esp+30h+var_10]
		jmp	short loc_1002EEDD
; ---------------------------------------------------------------------------

loc_1002EED7:				; CODE XREF: sub_1002EE10+97j
		mov	eax, edi
		jmp	short loc_1002EEDD
; ---------------------------------------------------------------------------

loc_1002EEDB:				; CODE XREF: sub_1002EE10+86j
		xor	eax, eax

loc_1002EEDD:				; CODE XREF: sub_1002EE10+C5j
					; sub_1002EE10+C9j
		mov	ecx, [ebp+74h]
		push	ebp
		test	ecx, ecx
		jz	short loc_1002EF03
		mov	edx, [esp+34h+arg_18]
		push	edx
		mov	edx, [esp+38h+arg_14]
		push	edx
		mov	edx, [esp+3Ch+arg_10]
		push	edx
		mov	edx, [esp+40h+arg_C]
		push	edx
		push	eax
		mov	eax, [esp+48h+arg_0]
		push	eax
		call	ecx
		jmp	short loc_1002EF22
; ---------------------------------------------------------------------------

loc_1002EF03:				; CODE XREF: sub_1002EE10+D3j
		mov	ecx, [esp+34h+arg_18]
		mov	edx, [esp+34h+arg_14]
		push	ecx
		mov	ecx, [esp+38h+arg_10]
		push	edx
		mov	edx, [esp+3Ch+arg_C]
		push	ecx
		push	edx
		push	eax
		mov	eax, [esp+48h+arg_0]
		push	eax
		call	sub_1002E7C0

loc_1002EF22:				; CODE XREF: sub_1002EE10+F1j
		mov	esi, eax
		add	esp, 1Ch

loc_1002EF27:				; CODE XREF: sub_1002EE10+4Dj
					; sub_1002EE10+66j ...
		lea	ecx, [esp+30h+var_20]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+34h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 8
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 20h
		retn
sub_1002EE10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1002EF50(void	*Memory)
sub_1002EF50	proc near		; CODE XREF: sub_1002DE30+Dp
					; sub_10031F70+8Cp

Memory		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jz	short loc_1002EF81
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_1002EF81
		lea	eax, [esi+4]
		push	eax
		call	sub_10028EF0
		mov	eax, [esi+54h]
		add	esp, 4
		test	eax, eax
		jz	short loc_1002EF77
		push	esi
		call	eax
		add	esp, 4

loc_1002EF77:				; CODE XREF: sub_1002EF50+1Fj
		push	esi		; Memory
		call	ds:free
		add	esp, 4

loc_1002EF81:				; CODE XREF: sub_1002EF50+7j
					; sub_1002EF50+Cj
		pop	esi
		retn
sub_1002EF50	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1002EF90:				; DATA XREF: sub_100302D0:loc_1003036Fo
		mov	eax, [esp+8]
		mov	ecx, [esp+4]
		push	esi
		mov	esi, [esp+10h]
		push	esi
		push	eax
		push	ecx
		call	sub_1002A130
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1002EFD3
		push	edi
		mov	edi, [esp+18h]
		add	edi, 4
		push	edi
		push	esi
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		js	short loc_1002EFD0
		push	esi
		push	edi
		push	esi
		call	sub_1002A1A0
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002EFD0:				; CODE XREF: .text:1002EFC0j
		xor	eax, eax
		pop	edi

loc_1002EFD3:				; CODE XREF: .text:1002EFAAj
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002EFE0	proc near		; CODE XREF: sub_1002F020+5Bp
					; DATA XREF: sub_100302D0+B1o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1002F003
		mov	eax, [esp+4+arg_4]
		push	eax
		call	sub_10028F40
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1002F003:				; CODE XREF: sub_1002EFE0+10j
		mov	ecx, [esp+4+arg_4]
		mov	edx, [esp+4+arg_8]
		push	ecx
		add	edx, 4
		push	esi
		push	edx
		call	sub_1002A1A0
		add	esp, 0Ch
		pop	esi
		retn
sub_1002EFE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002F020	proc near		; DATA XREF: sub_100302D0+A6o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		push	edi
		push	esi
		push	ebx
		push	ebp
		call	sub_1002A1A0
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, 0FFFFFFFDh
		jnz	short loc_1002F089
		push	esi
		push	ebp
		push	ebx
		call	sub_1002A1A0
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1002F0AF
		push	esi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jns	short loc_1002F074
		mov	eax, [esp+10h+arg_C]
		push	esi
		add	eax, 4
		push	eax
		push	esi
		call	sub_1002A130
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1002F0AF

loc_1002F074:				; CODE XREF: sub_1002F020+3Cj
		mov	ecx, [esp+10h+arg_C]
		push	ecx
		push	esi
		push	esi
		call	sub_1002EFE0
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		js	short loc_1002F0AD

loc_1002F089:				; CODE XREF: sub_1002F020+20j
		push	esi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jns	short loc_1002F0AD
		mov	edx, [esp+10h+arg_C]
		push	esi
		add	edx, 4
		push	edx
		push	esi
		call	sub_1002A130
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1002F0AD:				; CODE XREF: sub_1002F020+67j
					; sub_1002F020+74j
		mov	eax, edi

loc_1002F0AF:				; CODE XREF: sub_1002F020+2Fj
					; sub_1002F020+52j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1002F020	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002F0C0	proc near		; DATA XREF: sub_100302D0:loc_1003032Fo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		mov	esi, [esi+8]
		push	edi
		xor	eax, eax
		xor	ecx, ecx
		xor	edx, edx
		xor	ebp, ebp
		xor	edi, edi
		xor	ebx, ebx
		dec	esi
		jz	short loc_1002F0F7
		dec	esi
		jz	short loc_1002F0ED
		dec	esi
		jnz	short loc_1002F100
		mov	eax, [esp+18h+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ecx+8]

loc_1002F0ED:				; CODE XREF: sub_1002F0C0+1Ej
		mov	eax, [esp+18h+arg_0]
		mov	ecx, [eax+0Ch]
		mov	ecx, [ecx+4]

loc_1002F0F7:				; CODE XREF: sub_1002F0C0+1Bj
		mov	eax, [esp+18h+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax]

loc_1002F100:				; CODE XREF: sub_1002F0C0+21j
		mov	esi, [esp+18h+arg_4]
		mov	esi, [esi+8]
		dec	esi
		jz	short loc_1002F124
		dec	esi
		jz	short loc_1002F11A
		dec	esi
		jnz	short loc_1002F12D
		mov	esi, [esp+18h+arg_4]
		mov	esi, [esi+0Ch]
		mov	ebx, [esi+8]

loc_1002F11A:				; CODE XREF: sub_1002F0C0+4Bj
		mov	esi, [esp+18h+arg_4]
		mov	esi, [esi+0Ch]
		mov	edi, [esi+4]

loc_1002F124:				; CODE XREF: sub_1002F0C0+48j
		mov	esi, [esp+18h+arg_4]
		mov	esi, [esi+0Ch]
		mov	ebp, [esi]

loc_1002F12D:				; CODE XREF: sub_1002F0C0+4Ej
		lea	esi, [eax+ebp]
		mov	ebp, [esp+18h+arg_8]
		cmp	esi, eax
		sbb	eax, eax
		add	edi, ecx
		neg	eax
		cmp	edi, ecx
		sbb	ecx, ecx
		add	edi, eax
		neg	ecx
		cmp	edi, eax
		mov	[esp+18h+arg_0], esi
		sbb	esi, esi
		neg	esi
		add	ebx, edx
		add	esi, ecx
		cmp	ebx, edx
		sbb	eax, eax
		neg	eax
		push	3
		push	ebp
		mov	[esp+20h+var_8], eax
		add	ebx, esi
		call	sub_100291A0
		mov	edx, eax
		add	esp, 8
		mov	[esp+18h+arg_4], edx
		test	edx, edx
		js	loc_1002F236
		mov	ecx, [ebp+0Ch]
		mov	[ecx+8], ebx
		mov	eax, [ebp+0Ch]
		mov	[eax+4], edi
		mov	ecx, [ebp+0Ch]
		mov	eax, [esp+18h+arg_0]
		mov	[ecx], eax
		mov	ecx, [esp+18h+arg_C]
		cmp	ebx, esi
		mov	dword ptr [ebp+0], 0
		mov	dword ptr [ebp+8], 3
		mov	ecx, [ecx+10h]
		mov	ecx, [ecx+8]
		sbb	esi, esi
		neg	esi
		add	esi, [esp+18h+var_8]
		mov	[esp+18h+var_4], ecx
		jnz	short loc_1002F1D4
		cmp	ebx, ecx
		ja	short loc_1002F1D4
		jnz	short loc_1002F214
		mov	edx, [esp+18h+arg_C]
		add	edx, 4
		push	edx
		push	ebp
		call	sub_1002A680
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1002F210
		mov	eax, [esp+18h+arg_0]

loc_1002F1D4:				; CODE XREF: sub_1002F0C0+F2j
					; sub_1002F0C0+F6j
		mov	ecx, [esp+18h+arg_C]
		mov	edx, [ecx+10h]
		mov	ecx, edi
		sub	ecx, [edx+4]
		mov	esi, eax
		sub	esi, [edx]
		cmp	edi, ecx
		sbb	edx, edx
		neg	edx
		cmp	esi, eax
		jbe	short loc_1002F1F6
		mov	eax, ecx
		dec	ecx
		test	eax, eax
		jnz	short loc_1002F1F6
		inc	edx

loc_1002F1F6:				; CODE XREF: sub_1002F0C0+12Cj
					; sub_1002F0C0+133j
		sub	ebx, [esp+18h+var_4]
		test	edx, edx
		jz	short loc_1002F1FF
		dec	ebx

loc_1002F1FF:				; CODE XREF: sub_1002F0C0+13Cj
		mov	edx, [ebp+0Ch]
		mov	[edx+8], ebx
		mov	eax, [ebp+0Ch]
		mov	[eax+4], ecx
		mov	ecx, [ebp+0Ch]
		mov	[ecx], esi

loc_1002F210:				; CODE XREF: sub_1002F0C0+10Ej
		mov	edx, [esp+18h+arg_4]

loc_1002F214:				; CODE XREF: sub_1002F0C0+F8j
		mov	ecx, [ebp+8]
		cmp	ecx, 1
		jbe	short loc_1002F231
		mov	eax, [ebp+0Ch]
		lea	eax, [eax+ecx*4-4]

loc_1002F223:				; CODE XREF: sub_1002F0C0+16Fj
		cmp	dword ptr [eax], 0
		jnz	short loc_1002F231
		dec	ecx
		sub	eax, 4
		cmp	ecx, 1
		ja	short loc_1002F223

loc_1002F231:				; CODE XREF: sub_1002F0C0+15Aj
					; sub_1002F0C0+166j
		mov	[ebp+8], ecx
		mov	eax, edx

loc_1002F236:				; CODE XREF: sub_1002F0C0+B1j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
sub_1002F0C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002F240	proc near		; DATA XREF: sub_100302D0:loc_1003033Fo

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		mov	ebx, [ebx+8]
		push	ebp
		push	esi
		xor	eax, eax
		push	edi
		dec	ebx
		xor	ecx, ecx
		xor	edx, edx
		xor	ebp, ebp
		xor	esi, esi
		xor	edi, edi
		mov	[esp+1Ch+var_C], eax
		mov	[esp+1Ch+var_8], eax
		cmp	ebx, 3		; switch 4 cases
		ja	short loc_1002F296 ; jumptable 1002F268	default	case
		jmp	ds:off_1002F440[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F26F:				; CODE XREF: sub_1002F240+28j
					; DATA XREF: .text:off_1002F440o
		mov	eax, [esp+1Ch+arg_0] ; jumptable 1002F268 case 3
		mov	ecx, [eax+0Ch]
		mov	ebp, [ecx+0Ch]

loc_1002F279:				; CODE XREF: sub_1002F240+28j
					; DATA XREF: .text:off_1002F440o
		mov	edx, [esp+1Ch+arg_0] ; jumptable 1002F268 case 2
		mov	eax, [edx+0Ch]
		mov	edx, [eax+8]

loc_1002F283:				; CODE XREF: sub_1002F240+28j
					; DATA XREF: .text:off_1002F440o
		mov	ecx, [esp+1Ch+arg_0] ; jumptable 1002F268 case 1
		mov	eax, [ecx+0Ch]
		mov	ecx, [eax+4]

loc_1002F28D:				; CODE XREF: sub_1002F240+28j
					; DATA XREF: .text:off_1002F440o
		mov	eax, [esp+1Ch+arg_0] ; jumptable 1002F268 case 0
		mov	eax, [eax+0Ch]
		mov	eax, [eax]

loc_1002F296:				; CODE XREF: sub_1002F240+26j
		mov	ebx, [esp+1Ch+arg_4] ; jumptable 1002F268 default case
		mov	ebx, [ebx+8]
		dec	ebx
		cmp	ebx, 3		; switch 4 cases
		ja	short loc_1002F2D9 ; jumptable 1002F2A3	default	case
		jmp	ds:off_1002F450[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F2AA:				; CODE XREF: sub_1002F240+63j
					; DATA XREF: .text:off_1002F450o
		mov	esi, [esp+1Ch+arg_4] ; jumptable 1002F2A3 case 3
		mov	esi, [esi+0Ch]
		mov	esi, [esi+0Ch]
		mov	[esp+1Ch+var_8], esi

loc_1002F2B8:				; CODE XREF: sub_1002F240+63j
					; DATA XREF: .text:off_1002F450o
		mov	esi, [esp+1Ch+arg_4] ; jumptable 1002F2A3 case 2
		mov	esi, [esi+0Ch]
		mov	esi, [esi+8]
		mov	[esp+1Ch+var_C], esi

loc_1002F2C6:				; CODE XREF: sub_1002F240+63j
					; DATA XREF: .text:off_1002F450o
		mov	esi, [esp+1Ch+arg_4] ; jumptable 1002F2A3 case 1
		mov	esi, [esi+0Ch]
		mov	edi, [esi+4]

loc_1002F2D0:				; CODE XREF: sub_1002F240+63j
					; DATA XREF: .text:off_1002F450o
		mov	esi, [esp+1Ch+arg_4] ; jumptable 1002F2A3 case 0
		mov	esi, [esi+0Ch]
		mov	esi, [esi]

loc_1002F2D9:				; CODE XREF: sub_1002F240+61j
		add	esi, eax	; jumptable 1002F2A3 default case
		mov	ebx, [esp+1Ch+var_C]
		cmp	esi, eax
		sbb	eax, eax
		add	edi, ecx
		neg	eax
		cmp	edi, ecx
		sbb	ecx, ecx
		add	edi, eax
		neg	ecx
		cmp	edi, eax
		sbb	eax, eax
		neg	eax
		add	eax, ecx
		add	ebx, edx
		cmp	ebx, edx
		sbb	ecx, ecx
		add	ebx, eax
		neg	ecx
		cmp	ebx, eax
		mov	eax, [esp+1Ch+var_8]
		mov	[esp+1Ch+arg_0], esi
		sbb	esi, esi
		add	eax, ebp
		neg	esi
		add	esi, ecx
		cmp	eax, ebp
		mov	ebp, [esp+1Ch+arg_8]
		sbb	ecx, ecx
		neg	ecx
		add	eax, esi
		push	4
		push	ebp
		mov	[esp+24h+var_8], ecx
		mov	[esp+24h+arg_4], eax
		call	sub_100291A0
		add	esp, 8
		mov	[esp+1Ch+var_4], eax
		test	eax, eax
		js	loc_1002F436
		mov	ecx, [ebp+0Ch]
		mov	eax, [esp+1Ch+arg_4]
		mov	[ecx+0Ch], eax
		mov	edx, [ebp+0Ch]
		mov	[edx+8], ebx
		mov	ecx, [ebp+0Ch]
		mov	[ecx+4], edi
		mov	edx, [ebp+0Ch]
		mov	ecx, [esp+1Ch+arg_0]
		mov	[edx], ecx
		mov	ecx, [esp+1Ch+arg_C]
		cmp	eax, esi
		mov	dword ptr [ebp+0], 0
		mov	dword ptr [ebp+8], 4
		mov	edx, [ecx+10h]
		mov	edx, [edx+0Ch]
		sbb	esi, esi
		neg	esi
		add	esi, [esp+1Ch+var_8]
		mov	[esp+1Ch+var_C], edx
		jnz	short loc_1002F3A9
		cmp	eax, edx
		ja	short loc_1002F3A9
		jnz	loc_1002F412
		add	ecx, 4
		push	ecx
		push	ebp
		call	sub_1002A680
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1002F412
		mov	ecx, [esp+1Ch+arg_C]
		mov	eax, [esp+1Ch+arg_4]

loc_1002F3A9:				; CODE XREF: sub_1002F240+143j
					; sub_1002F240+147j
		mov	ecx, [ecx+10h]
		mov	edx, [ecx+8]
		mov	esi, [esp+1Ch+arg_0]
		sub	esi, [ecx]
		mov	[esp+1Ch+arg_4], edx
		mov	edx, edi
		sub	edx, [ecx+4]
		mov	[esp+1Ch+var_8], esi
		cmp	edi, edx
		sbb	ecx, ecx
		neg	ecx
		cmp	esi, [esp+1Ch+arg_0]
		jbe	short loc_1002F3D6
		mov	esi, edx
		dec	edx
		test	esi, esi
		jnz	short loc_1002F3D6
		inc	ecx

loc_1002F3D6:				; CODE XREF: sub_1002F240+18Cj
					; sub_1002F240+193j
		mov	esi, ebx
		sub	esi, [esp+1Ch+arg_4]
		cmp	ebx, esi
		sbb	edi, edi
		neg	edi
		test	ecx, ecx
		jz	short loc_1002F3EE
		mov	ecx, esi
		dec	esi
		test	ecx, ecx
		jnz	short loc_1002F3EE
		inc	edi

loc_1002F3EE:				; CODE XREF: sub_1002F240+1A4j
					; sub_1002F240+1ABj
		sub	eax, [esp+1Ch+var_C]
		test	edi, edi
		jz	short loc_1002F3F7
		dec	eax

loc_1002F3F7:				; CODE XREF: sub_1002F240+1B4j
		mov	ecx, [ebp+0Ch]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+0Ch]
		mov	[eax+8], esi
		mov	ecx, [ebp+0Ch]
		mov	eax, [esp+1Ch+var_8]
		mov	[ecx+4], edx
		mov	edx, [ebp+0Ch]
		mov	[edx], eax

loc_1002F412:				; CODE XREF: sub_1002F240+149j
					; sub_1002F240+15Fj
		mov	eax, [ebp+8]
		cmp	eax, 1
		jbe	short loc_1002F42F
		mov	ecx, [ebp+0Ch]
		lea	ecx, [ecx+eax*4-4]

loc_1002F421:				; CODE XREF: sub_1002F240+1EDj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002F42F
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_1002F421

loc_1002F42F:				; CODE XREF: sub_1002F240+1D8j
					; sub_1002F240+1E4j
		mov	[ebp+8], eax
		mov	eax, [esp+1Ch+var_4]

loc_1002F436:				; CODE XREF: sub_1002F240+F8j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_1002F240	endp

; ---------------------------------------------------------------------------
		align 10h
off_1002F440	dd offset loc_1002F28D	; DATA XREF: sub_1002F240+28r
		dd offset loc_1002F283	; jump table for switch	statement
		dd offset loc_1002F279
		dd offset loc_1002F26F
off_1002F450	dd offset loc_1002F2D0	; DATA XREF: sub_1002F240+63r
		dd offset loc_1002F2C6	; jump table for switch	statement
		dd offset loc_1002F2B8
		dd offset loc_1002F2AA

; =============== S U B	R O U T	I N E =======================================


sub_1002F460	proc near		; DATA XREF: sub_100302D0:loc_1003034Fo

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	ebx
		push	ebp
		xor	ebp, ebp
		mov	[esp+18h+var_8], ebp
		mov	[esp+18h+var_4], ebp
		mov	ebp, [esp+18h+arg_0]
		mov	ebp, [ebp+8]
		push	esi
		xor	eax, eax
		push	edi
		dec	ebp
		xor	ecx, ecx
		xor	edx, edx
		xor	esi, esi
		xor	ebx, ebx
		xor	edi, edi
		mov	[esp+20h+var_10], eax
		mov	[esp+20h+var_C], eax
		cmp	ebp, 4		; switch 5 cases
		ja	short loc_1002F4CA ; jumptable 1002F492	default	case
		jmp	ds:off_1002F6E0[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F499:				; CODE XREF: sub_1002F460+32j
					; DATA XREF: .text:off_1002F6E0o
		mov	eax, [esp+20h+arg_0] ; jumptable 1002F492 case 4
		mov	ecx, [eax+0Ch]
		mov	ebx, [ecx+10h]

loc_1002F4A3:				; CODE XREF: sub_1002F460+32j
					; DATA XREF: .text:off_1002F6E0o
		mov	edx, [esp+20h+arg_0] ; jumptable 1002F492 case 3
		mov	eax, [edx+0Ch]
		mov	esi, [eax+0Ch]

loc_1002F4AD:				; CODE XREF: sub_1002F460+32j
					; DATA XREF: .text:off_1002F6E0o
		mov	ecx, [esp+20h+arg_0] ; jumptable 1002F492 case 2
		mov	edx, [ecx+0Ch]
		mov	edx, [edx+8]

loc_1002F4B7:				; CODE XREF: sub_1002F460+32j
					; DATA XREF: .text:off_1002F6E0o
		mov	eax, [esp+20h+arg_0] ; jumptable 1002F492 case 1
		mov	ecx, [eax+0Ch]
		mov	ecx, [ecx+4]

loc_1002F4C1:				; CODE XREF: sub_1002F460+32j
					; DATA XREF: .text:off_1002F6E0o
		mov	eax, [esp+20h+arg_0] ; jumptable 1002F492 case 0
		mov	eax, [eax+0Ch]
		mov	eax, [eax]

loc_1002F4CA:				; CODE XREF: sub_1002F460+30j
		mov	ebp, [esp+20h+arg_4] ; jumptable 1002F492 default case
		mov	ebp, [ebp+8]
		dec	ebp
		cmp	ebp, 4		; switch 5 cases
		ja	short loc_1002F51F ; jumptable 1002F4D7	default	case
		jmp	ds:off_1002F6F4[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F4DE:				; CODE XREF: sub_1002F460+77j
					; DATA XREF: .text:off_1002F6F4o
		mov	edi, [esp+20h+arg_4] ; jumptable 1002F4D7 case 4
		mov	edi, [edi+0Ch]
		mov	edi, [edi+10h]
		mov	[esp+20h+var_4], edi

loc_1002F4EC:				; CODE XREF: sub_1002F460+77j
					; DATA XREF: .text:off_1002F6F4o
		mov	edi, [esp+20h+arg_4] ; jumptable 1002F4D7 case 3
		mov	edi, [edi+0Ch]
		mov	edi, [edi+0Ch]
		mov	[esp+20h+var_8], edi

loc_1002F4FA:				; CODE XREF: sub_1002F460+77j
					; DATA XREF: .text:off_1002F6F4o
		mov	edi, [esp+20h+arg_4] ; jumptable 1002F4D7 case 2
		mov	edi, [edi+0Ch]
		mov	edi, [edi+8]
		mov	[esp+20h+var_C], edi

loc_1002F508:				; CODE XREF: sub_1002F460+77j
					; DATA XREF: .text:off_1002F6F4o
		mov	edi, [esp+20h+arg_4] ; jumptable 1002F4D7 case 1
		mov	edi, [edi+0Ch]
		mov	edi, [edi+4]
		mov	[esp+20h+var_10], edi

loc_1002F516:				; CODE XREF: sub_1002F460+77j
					; DATA XREF: .text:off_1002F6F4o
		mov	edi, [esp+20h+arg_4] ; jumptable 1002F4D7 case 0
		mov	edi, [edi+0Ch]
		mov	edi, [edi]

loc_1002F51F:				; CODE XREF: sub_1002F460+75j
		add	edi, eax	; jumptable 1002F4D7 default case
		cmp	edi, eax
		sbb	eax, eax
		mov	ebp, [esp+20h+var_C]
		neg	eax
		mov	[esp+20h+arg_4], edi
		mov	edi, [esp+20h+var_10]
		add	edi, ecx
		cmp	edi, ecx
		sbb	ecx, ecx
		add	edi, eax
		neg	ecx
		cmp	edi, eax
		sbb	eax, eax
		neg	eax
		add	eax, ecx
		add	ebp, edx
		cmp	ebp, edx
		mov	edx, [esp+20h+var_8]
		sbb	ecx, ecx
		add	ebp, eax
		neg	ecx
		cmp	ebp, eax
		sbb	eax, eax
		neg	eax
		add	eax, ecx
		add	edx, esi
		cmp	edx, esi
		sbb	ecx, ecx
		add	edx, eax
		neg	ecx
		cmp	edx, eax
		mov	eax, [esp+20h+var_4]
		sbb	esi, esi
		add	eax, ebx
		neg	esi
		add	esi, ecx
		cmp	eax, ebx
		mov	ebx, [esp+20h+arg_8]
		sbb	ecx, ecx
		neg	ecx
		add	eax, esi
		push	5
		push	ebx
		mov	[esp+28h+var_8], edx
		mov	[esp+28h+var_10], ecx
		mov	[esp+28h+arg_0], eax
		call	sub_100291A0
		mov	ecx, eax
		add	esp, 8
		mov	[esp+20h+var_C], ecx
		test	ecx, ecx
		js	loc_1002F6D8
		mov	edx, [ebx+0Ch]
		mov	eax, [esp+20h+arg_0]
		mov	[edx+10h], eax
		mov	edx, [ebx+0Ch]
		mov	eax, [esp+20h+var_8]
		mov	[edx+0Ch], eax
		mov	edx, [ebx+0Ch]
		mov	[edx+8], ebp
		mov	eax, [ebx+0Ch]
		mov	[eax+4], edi
		mov	edx, [ebx+0Ch]
		mov	eax, [esp+20h+arg_4]
		mov	[edx], eax
		mov	edx, [esp+20h+arg_C]
		mov	dword ptr [ebx], 0
		mov	dword ptr [ebx+8], 5
		mov	edx, [edx+10h]
		mov	edx, [edx+10h]
		mov	[esp+20h+var_4], edx
		mov	edx, [esp+20h+arg_0]
		cmp	edx, esi
		sbb	esi, esi
		neg	esi
		add	esi, [esp+20h+var_10]
		jnz	short loc_1002F624
		mov	esi, [esp+20h+var_4]
		cmp	edx, esi
		ja	short loc_1002F624
		jnz	loc_1002F6B6
		mov	eax, [esp+20h+arg_C]
		add	eax, 4
		push	eax
		push	ebx
		call	sub_1002A680
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1002F6B2
		mov	eax, [esp+20h+arg_4]

loc_1002F624:				; CODE XREF: sub_1002F460+196j
					; sub_1002F460+19Ej
		mov	ecx, [esp+20h+arg_C]
		mov	ecx, [ecx+10h]
		mov	edx, [ecx+0Ch]
		mov	[esp+20h+var_10], edx
		mov	edx, [ecx+8]
		mov	[esp+20h+arg_4], edx
		mov	edx, edi
		sub	edx, [ecx+4]
		mov	esi, eax
		sub	esi, [ecx]
		cmp	edi, edx
		sbb	ecx, ecx
		neg	ecx
		cmp	esi, eax
		jbe	short loc_1002F654
		mov	eax, edx
		dec	edx
		test	eax, eax
		jnz	short loc_1002F654
		inc	ecx

loc_1002F654:				; CODE XREF: sub_1002F460+1EAj
					; sub_1002F460+1F1j
		mov	edi, ebp
		sub	edi, [esp+20h+arg_4]
		cmp	ebp, edi
		sbb	eax, eax
		neg	eax
		test	ecx, ecx
		jz	short loc_1002F66C
		mov	ecx, edi
		dec	edi
		test	ecx, ecx
		jnz	short loc_1002F66C
		inc	eax

loc_1002F66C:				; CODE XREF: sub_1002F460+202j
					; sub_1002F460+209j
		mov	ebp, [esp+20h+var_8]
		mov	ecx, ebp
		sub	ecx, [esp+20h+var_10]
		cmp	ebp, ecx
		sbb	ebp, ebp
		neg	ebp
		test	eax, eax
		jz	short loc_1002F688
		mov	eax, ecx
		dec	ecx
		test	eax, eax
		jnz	short loc_1002F688
		inc	ebp

loc_1002F688:				; CODE XREF: sub_1002F460+21Ej
					; sub_1002F460+225j
		mov	eax, [esp+20h+arg_0]
		sub	eax, [esp+20h+var_4]
		test	ebp, ebp
		jz	short loc_1002F695
		dec	eax

loc_1002F695:				; CODE XREF: sub_1002F460+232j
		mov	ebp, [ebx+0Ch]
		mov	[ebp+10h], eax
		mov	eax, [ebx+0Ch]
		mov	[eax+0Ch], ecx
		mov	ecx, [ebx+0Ch]
		mov	[ecx+8], edi
		mov	eax, [ebx+0Ch]
		mov	[eax+4], edx
		mov	ecx, [ebx+0Ch]
		mov	[ecx], esi

loc_1002F6B2:				; CODE XREF: sub_1002F460+1BAj
		mov	ecx, [esp+20h+var_C]

loc_1002F6B6:				; CODE XREF: sub_1002F460+1A0j
		mov	eax, [ebx+8]
		cmp	eax, 1
		jbe	short loc_1002F6D3
		mov	edx, [ebx+0Ch]
		lea	edx, [edx+eax*4-4]

loc_1002F6C5:				; CODE XREF: sub_1002F460+271j
		cmp	dword ptr [edx], 0
		jnz	short loc_1002F6D3
		dec	eax
		sub	edx, 4
		cmp	eax, 1
		ja	short loc_1002F6C5

loc_1002F6D3:				; CODE XREF: sub_1002F460+25Cj
					; sub_1002F460+268j
		mov	[ebx+8], eax
		mov	eax, ecx

loc_1002F6D8:				; CODE XREF: sub_1002F460+13Ej
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_1002F460	endp

; ---------------------------------------------------------------------------
off_1002F6E0	dd offset loc_1002F4C1	; DATA XREF: sub_1002F460+32r
		dd offset loc_1002F4B7	; jump table for switch	statement
		dd offset loc_1002F4AD
		dd offset loc_1002F4A3
		dd offset loc_1002F499
off_1002F6F4	dd offset loc_1002F516	; DATA XREF: sub_1002F460+77r
		dd offset loc_1002F508	; jump table for switch	statement
		dd offset loc_1002F4FA
		dd offset loc_1002F4EC
		dd offset loc_1002F4DE
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002F710	proc near		; DATA XREF: sub_100302D0:loc_1003035Fo

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		push	ebx
		push	ebp
		xor	ebp, ebp
		mov	[esp+24h+var_10], ebp
		mov	[esp+24h+var_C], ebp
		mov	[esp+24h+var_8], ebp
		mov	ebp, [esp+24h+arg_0]
		mov	ebp, [ebp+8]
		push	esi
		xor	eax, eax
		push	edi
		xor	ebx, ebx
		dec	ebp
		xor	ecx, ecx
		xor	edx, edx
		xor	esi, esi
		xor	edi, edi
		mov	[esp+2Ch+var_1C], ebx
		mov	[esp+2Ch+var_14], eax
		mov	[esp+2Ch+var_18], eax
		cmp	ebp, 5		; switch 6 cases
		ja	short loc_1002F790 ; jumptable 1002F74A	default	case
		jmp	ds:off_1002FA14[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F751:				; CODE XREF: sub_1002F710+3Aj
					; DATA XREF: .text:off_1002FA14o
		mov	eax, [esp+2Ch+arg_0] ; jumptable 1002F74A case 5
		mov	ecx, [eax+0Ch]
		mov	edx, [ecx+14h]
		mov	[esp+2Ch+var_1C], edx

loc_1002F75F:				; CODE XREF: sub_1002F710+3Aj
					; DATA XREF: .text:off_1002FA14o
		mov	eax, [esp+2Ch+arg_0] ; jumptable 1002F74A case 4
		mov	ecx, [eax+0Ch]
		mov	edi, [ecx+10h]

loc_1002F769:				; CODE XREF: sub_1002F710+3Aj
					; DATA XREF: .text:off_1002FA14o
		mov	edx, [esp+2Ch+arg_0] ; jumptable 1002F74A case 3
		mov	eax, [edx+0Ch]
		mov	esi, [eax+0Ch]

loc_1002F773:				; CODE XREF: sub_1002F710+3Aj
					; DATA XREF: .text:off_1002FA14o
		mov	ecx, [esp+2Ch+arg_0] ; jumptable 1002F74A case 2
		mov	edx, [ecx+0Ch]
		mov	edx, [edx+8]

loc_1002F77D:				; CODE XREF: sub_1002F710+3Aj
					; DATA XREF: .text:off_1002FA14o
		mov	eax, [esp+2Ch+arg_0] ; jumptable 1002F74A case 1
		mov	ecx, [eax+0Ch]
		mov	ecx, [ecx+4]

loc_1002F787:				; CODE XREF: sub_1002F710+3Aj
					; DATA XREF: .text:off_1002FA14o
		mov	eax, [esp+2Ch+arg_0] ; jumptable 1002F74A case 0
		mov	eax, [eax+0Ch]
		mov	eax, [eax]

loc_1002F790:				; CODE XREF: sub_1002F710+38j
		mov	ebp, [esp+2Ch+arg_4] ; jumptable 1002F74A default case
		mov	ebp, [ebp+8]
		dec	ebp
		cmp	ebp, 5		; switch 6 cases
		ja	short loc_1002F7F3 ; jumptable 1002F79D	default	case
		jmp	ds:off_1002FA2C[ebp*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002F7A4:				; CODE XREF: sub_1002F710+8Dj
					; DATA XREF: .text:off_1002FA2Co
		mov	ebx, [esp+2Ch+arg_4] ; jumptable 1002F79D case 5
		mov	ebx, [ebx+0Ch]
		mov	ebx, [ebx+14h]
		mov	[esp+2Ch+var_8], ebx

loc_1002F7B2:				; CODE XREF: sub_1002F710+8Dj
					; DATA XREF: .text:off_1002FA2Co
		mov	ebx, [esp+2Ch+arg_4] ; jumptable 1002F79D case 4
		mov	ebx, [ebx+0Ch]
		mov	ebx, [ebx+10h]
		mov	[esp+2Ch+var_C], ebx

loc_1002F7C0:				; CODE XREF: sub_1002F710+8Dj
					; DATA XREF: .text:off_1002FA2Co
		mov	ebx, [esp+2Ch+arg_4] ; jumptable 1002F79D case 3
		mov	ebx, [ebx+0Ch]
		mov	ebx, [ebx+0Ch]
		mov	[esp+2Ch+var_10], ebx

loc_1002F7CE:				; CODE XREF: sub_1002F710+8Dj
					; DATA XREF: .text:off_1002FA2Co
		mov	ebx, [esp+2Ch+arg_4] ; jumptable 1002F79D case 2
		mov	ebx, [ebx+0Ch]
		mov	ebx, [ebx+8]
		mov	[esp+2Ch+var_18], ebx

loc_1002F7DC:				; CODE XREF: sub_1002F710+8Dj
					; DATA XREF: .text:off_1002FA2Co
		mov	ebx, [esp+2Ch+arg_4] ; jumptable 1002F79D case 1
		mov	ebx, [ebx+0Ch]
		mov	ebx, [ebx+4]
		mov	[esp+2Ch+var_14], ebx

loc_1002F7EA:				; CODE XREF: sub_1002F710+8Dj
					; DATA XREF: .text:off_1002FA2Co
		mov	ebx, [esp+2Ch+arg_4] ; jumptable 1002F79D case 0
		mov	ebx, [ebx+0Ch]
		mov	ebx, [ebx]

loc_1002F7F3:				; CODE XREF: sub_1002F710+8Bj
		add	ebx, eax	; jumptable 1002F79D default case
		cmp	ebx, eax
		sbb	eax, eax
		mov	ebp, [esp+2Ch+var_18]
		neg	eax
		mov	[esp+2Ch+arg_4], ebx
		mov	ebx, [esp+2Ch+var_14]
		add	ebx, ecx
		cmp	ebx, ecx
		sbb	ecx, ecx
		add	ebx, eax
		neg	ecx
		cmp	ebx, eax
		sbb	eax, eax
		neg	eax
		add	eax, ecx
		add	ebp, edx
		cmp	ebp, edx
		sbb	ecx, ecx
		mov	edx, [esp+2Ch+var_10]
		add	ebp, eax
		neg	ecx
		cmp	ebp, eax
		sbb	eax, eax
		neg	eax
		add	eax, ecx
		add	edx, esi
		cmp	edx, esi
		sbb	ecx, ecx
		add	edx, eax
		neg	ecx
		cmp	edx, eax
		sbb	eax, eax
		neg	eax
		add	eax, ecx
		mov	[esp+2Ch+var_10], edx
		mov	edx, [esp+2Ch+var_C]
		add	edx, edi
		cmp	edx, edi
		mov	edi, [esp+2Ch+arg_8]
		sbb	ecx, ecx
		add	edx, eax
		neg	ecx
		cmp	edx, eax
		mov	eax, [esp+2Ch+var_8]
		sbb	esi, esi
		neg	esi
		add	esi, ecx
		mov	ecx, [esp+2Ch+var_1C]
		add	eax, ecx
		cmp	eax, ecx
		sbb	ecx, ecx
		neg	ecx
		add	eax, esi
		push	6
		push	edi
		mov	[esp+34h+var_C], edx
		mov	[esp+34h+var_14], ecx
		mov	[esp+34h+arg_0], eax
		call	sub_100291A0
		mov	ecx, eax
		add	esp, 8
		mov	[esp+2Ch+var_8], ecx
		test	ecx, ecx
		js	loc_1002FA09
		mov	eax, [edi+0Ch]
		mov	edx, [esp+2Ch+arg_0]
		mov	[eax+14h], edx
		mov	eax, [edi+0Ch]
		mov	edx, [esp+2Ch+var_C]
		mov	[eax+10h], edx
		mov	eax, [edi+0Ch]
		mov	edx, [esp+2Ch+var_10]
		mov	[eax+0Ch], edx
		mov	eax, [edi+0Ch]
		mov	[eax+8], ebp
		mov	edx, [edi+0Ch]
		mov	eax, [esp+2Ch+arg_4]
		mov	[edx+4], ebx
		mov	edx, [edi+0Ch]
		mov	[edx], eax
		mov	edx, [esp+2Ch+arg_C]
		mov	dword ptr [edi], 0
		mov	dword ptr [edi+8], 6
		mov	edx, [edx+10h]
		mov	edx, [edx+14h]
		mov	[esp+2Ch+var_1C], edx
		mov	edx, [esp+2Ch+arg_0]
		cmp	edx, esi
		sbb	esi, esi
		neg	esi
		add	esi, [esp+2Ch+var_14]
		jnz	short loc_1002F920
		mov	esi, [esp+2Ch+var_1C]
		cmp	edx, esi
		ja	short loc_1002F920
		jnz	loc_1002F9E7
		mov	eax, [esp+2Ch+arg_C]
		add	eax, 4
		push	eax
		push	edi
		call	sub_1002A680
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1002F9E3
		mov	eax, [esp+2Ch+arg_4]

loc_1002F920:				; CODE XREF: sub_1002F710+1E2j
					; sub_1002F710+1EAj
		mov	ecx, [esp+2Ch+arg_C]
		mov	ecx, [ecx+10h]
		mov	edx, [ecx+10h]
		mov	[esp+2Ch+var_4], edx
		mov	edx, [ecx+0Ch]
		mov	[esp+2Ch+var_14], edx
		mov	edx, [ecx+8]
		mov	[esp+2Ch+arg_4], edx
		mov	edx, ebx
		sub	edx, [ecx+4]
		mov	esi, eax
		sub	esi, [ecx]
		cmp	ebx, edx
		sbb	ecx, ecx
		neg	ecx
		cmp	esi, eax
		jbe	short loc_1002F957
		mov	eax, edx
		dec	edx
		test	eax, eax
		jnz	short loc_1002F957
		inc	ecx

loc_1002F957:				; CODE XREF: sub_1002F710+23Dj
					; sub_1002F710+244j
		mov	ebx, ebp
		sub	ebx, [esp+2Ch+arg_4]
		cmp	ebp, ebx
		sbb	eax, eax
		neg	eax
		mov	[esp+2Ch+var_18], ebx
		test	ecx, ecx
		jz	short loc_1002F977
		mov	ecx, ebx
		dec	ebx
		mov	[esp+2Ch+var_18], ebx
		test	ecx, ecx
		jnz	short loc_1002F977
		inc	eax

loc_1002F977:				; CODE XREF: sub_1002F710+259j
					; sub_1002F710+264j
		mov	ebx, [esp+2Ch+var_10]
		mov	ecx, ebx
		sub	ecx, [esp+2Ch+var_14]
		cmp	ebx, ecx
		sbb	ebx, ebx
		neg	ebx
		test	eax, eax
		jz	short loc_1002F993
		mov	eax, ecx
		dec	ecx
		test	eax, eax
		jnz	short loc_1002F993
		inc	ebx

loc_1002F993:				; CODE XREF: sub_1002F710+279j
					; sub_1002F710+280j
		mov	ebp, [esp+2Ch+var_C]
		mov	eax, ebp
		sub	eax, [esp+2Ch+var_4]
		cmp	ebp, eax
		sbb	ebp, ebp
		neg	ebp
		test	ebx, ebx
		jz	short loc_1002F9AF
		mov	ebx, eax
		dec	eax
		test	ebx, ebx
		jnz	short loc_1002F9AF
		inc	ebp

loc_1002F9AF:				; CODE XREF: sub_1002F710+295j
					; sub_1002F710+29Cj
		mov	ebx, [esp+2Ch+arg_0]
		sub	ebx, [esp+2Ch+var_1C]
		test	ebp, ebp
		jz	short loc_1002F9BC
		dec	ebx

loc_1002F9BC:				; CODE XREF: sub_1002F710+2A9j
		mov	ebp, [edi+0Ch]
		mov	[ebp+14h], ebx
		mov	ebx, [edi+0Ch]
		mov	[ebx+10h], eax
		mov	eax, [edi+0Ch]
		mov	[eax+0Ch], ecx
		mov	ecx, [edi+0Ch]
		mov	eax, [esp+2Ch+var_18]
		mov	[ecx+8], eax
		mov	ecx, [edi+0Ch]
		mov	[ecx+4], edx
		mov	edx, [edi+0Ch]
		mov	[edx], esi

loc_1002F9E3:				; CODE XREF: sub_1002F710+206j
		mov	ecx, [esp+2Ch+var_8]

loc_1002F9E7:				; CODE XREF: sub_1002F710+1ECj
		mov	eax, [edi+8]
		cmp	eax, 1
		jbe	short loc_1002FA04
		mov	edx, [edi+0Ch]
		lea	edx, [edx+eax*4-4]

loc_1002F9F6:				; CODE XREF: sub_1002F710+2F2j
		cmp	dword ptr [edx], 0
		jnz	short loc_1002FA04
		dec	eax
		sub	edx, 4
		cmp	eax, 1
		ja	short loc_1002F9F6

loc_1002FA04:				; CODE XREF: sub_1002F710+2DDj
					; sub_1002F710+2E9j
		mov	[edi+8], eax
		mov	eax, ecx

loc_1002FA09:				; CODE XREF: sub_1002F710+180j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
sub_1002F710	endp

; ---------------------------------------------------------------------------
		align 4
off_1002FA14	dd offset loc_1002F787	; DATA XREF: sub_1002F710+3Ar
		dd offset loc_1002F77D	; jump table for switch	statement
		dd offset loc_1002F773
		dd offset loc_1002F769
		dd offset loc_1002F75F
		dd offset loc_1002F751
off_1002FA2C	dd offset loc_1002F7EA	; DATA XREF: sub_1002F710+8Dr
		dd offset loc_1002F7DC	; jump table for switch	statement
		dd offset loc_1002F7CE
		dd offset loc_1002F7C0
		dd offset loc_1002F7B2
		dd offset loc_1002F7A4
		align 10h

loc_1002FA50:				; DATA XREF: sub_100302D0+66o
		push	ecx
		mov	ecx, [esp+8]
		mov	eax, [ecx+8]
		push	ebx
		push	ebp
		push	esi
		push	edi
		xor	ebp, ebp
		xor	edx, edx
		xor	edi, edi
		xor	esi, esi
		xor	ebx, ebx
		dec	eax
		mov	[esp+10h], ebp
		jz	short loc_1002FA7F
		dec	eax
		jz	short loc_1002FA79
		dec	eax
		jnz	short loc_1002FA84
		mov	eax, [ecx+0Ch]
		mov	ebp, [eax+8]

loc_1002FA79:				; CODE XREF: .text:1002FA6Ej
		mov	eax, [ecx+0Ch]
		mov	ebx, [eax+4]

loc_1002FA7F:				; CODE XREF: .text:1002FA6Bj
		mov	ecx, [ecx+0Ch]
		mov	esi, [ecx]

loc_1002FA84:				; CODE XREF: .text:1002FA71j
		mov	ecx, [esp+1Ch]
		mov	eax, [ecx+8]
		dec	eax
		jz	short loc_1002FAA4
		dec	eax
		jz	short loc_1002FA9E
		dec	eax
		jnz	short loc_1002FAA9
		mov	edx, [ecx+0Ch]
		mov	eax, [edx+8]
		mov	[esp+10h], eax

loc_1002FA9E:				; CODE XREF: .text:1002FA8Fj
		mov	edx, [ecx+0Ch]
		mov	edi, [edx+4]

loc_1002FAA4:				; CODE XREF: .text:1002FA8Cj
		mov	eax, [ecx+0Ch]
		mov	edx, [eax]

loc_1002FAA9:				; CODE XREF: .text:1002FA92j
		mov	eax, ebx
		mov	ecx, esi
		sub	ebx, edi
		sub	esi, edx
		cmp	eax, ebx
		sbb	eax, eax
		neg	eax
		cmp	esi, ecx
		jbe	short loc_1002FAC3
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jnz	short loc_1002FAC3
		inc	eax

loc_1002FAC3:				; CODE XREF: .text:1002FAB9j
					; .text:1002FAC0j
		mov	ecx, ebp
		sub	ebp, [esp+10h]
		cmp	ecx, ebp
		sbb	ecx, ecx
		neg	ecx
		test	eax, eax
		jz	short loc_1002FADB
		mov	edx, ebp
		dec	ebp
		test	edx, edx
		jnz	short loc_1002FADB
		inc	ecx

loc_1002FADB:				; CODE XREF: .text:1002FAD1j
					; .text:1002FAD8j
		test	ecx, ecx
		jz	short loc_1002FB0D
		mov	eax, [esp+24h]
		mov	edx, [eax+10h]
		mov	eax, [edx]
		mov	edi, [edx+4]
		add	esi, eax
		cmp	esi, eax
		sbb	eax, eax
		lea	ecx, [edi+ebx]
		neg	eax
		cmp	ecx, edi
		sbb	edi, edi
		add	ecx, eax
		neg	edi
		cmp	ecx, eax
		mov	ebx, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, [edx+8]
		add	ecx, edi
		add	ebp, ecx

loc_1002FB0D:				; CODE XREF: .text:1002FADDj
		mov	edi, [esp+20h]
		push	3
		push	edi
		call	sub_100291A0
		add	esp, 8
		test	eax, eax
		js	short loc_1002FB56
		mov	edx, [edi+0Ch]
		mov	[edx+8], ebp
		mov	ecx, [edi+0Ch]
		mov	[ecx+4], ebx
		mov	edx, [edi+0Ch]
		mov	[edx], esi
		mov	ecx, [edi+0Ch]
		mov	edx, 3
		mov	dword ptr [edi], 0
		mov	[edi+8], edx
		add	ecx, 8

loc_1002FB45:				; CODE XREF: .text:1002FB51j
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002FB53
		dec	edx
		sub	ecx, 4
		cmp	edx, 1
		ja	short loc_1002FB45

loc_1002FB53:				; CODE XREF: .text:1002FB48j
		mov	[edi+8], edx

loc_1002FB56:				; CODE XREF: .text:1002FB1Ej
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002FB60	proc near		; DATA XREF: sub_100302D0+76o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		mov	ecx, [esp+0Ch+arg_0]
		mov	eax, [ecx+8]
		push	ebx
		push	ebp
		push	esi
		xor	edx, edx
		push	edi
		dec	eax
		xor	edi, edi
		xor	esi, esi
		xor	ebx, ebx
		xor	ebp, ebp
		mov	[esp+1Ch+var_8], edx
		mov	[esp+1Ch+var_4], edx
		mov	[esp+1Ch+var_C], edx
		cmp	eax, 3		; switch 4 cases
		ja	short loc_1002FBAC ; jumptable 1002FB8A	default	case
		jmp	ds:off_1002FCE0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002FB91:				; CODE XREF: sub_1002FB60+2Aj
					; DATA XREF: .text:off_1002FCE0o
		mov	eax, [ecx+0Ch]	; jumptable 1002FB8A case 3
		mov	eax, [eax+0Ch]
		mov	[esp+1Ch+var_C], eax

loc_1002FB9B:				; CODE XREF: sub_1002FB60+2Aj
					; DATA XREF: .text:off_1002FCE0o
		mov	eax, [ecx+0Ch]	; jumptable 1002FB8A case 2
		mov	ebp, [eax+8]

loc_1002FBA1:				; CODE XREF: sub_1002FB60+2Aj
					; DATA XREF: .text:off_1002FCE0o
		mov	eax, [ecx+0Ch]	; jumptable 1002FB8A case 1
		mov	ebx, [eax+4]

loc_1002FBA7:				; CODE XREF: sub_1002FB60+2Aj
					; DATA XREF: .text:off_1002FCE0o
		mov	ecx, [ecx+0Ch]	; jumptable 1002FB8A case 0
		mov	esi, [ecx]

loc_1002FBAC:				; CODE XREF: sub_1002FB60+28j
		mov	eax, [esp+1Ch+arg_4] ; jumptable 1002FB8A default case
		mov	ecx, [eax+8]
		dec	ecx
		cmp	ecx, 3		; switch 4 cases
		ja	short loc_1002FBDF ; jumptable 1002FBB9	default	case
		jmp	ds:off_1002FCF0[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002FBC0:				; CODE XREF: sub_1002FB60+59j
					; DATA XREF: .text:off_1002FCF0o
		mov	edx, [eax+0Ch]	; jumptable 1002FBB9 case 3
		mov	ecx, [edx+0Ch]
		mov	[esp+1Ch+var_4], ecx

loc_1002FBCA:				; CODE XREF: sub_1002FB60+59j
					; DATA XREF: .text:off_1002FCF0o
		mov	edx, [eax+0Ch]	; jumptable 1002FBB9 case 2
		mov	ecx, [edx+8]
		mov	[esp+1Ch+var_8], ecx

loc_1002FBD4:				; CODE XREF: sub_1002FB60+59j
					; DATA XREF: .text:off_1002FCF0o
		mov	edx, [eax+0Ch]	; jumptable 1002FBB9 case 1
		mov	edi, [edx+4]

loc_1002FBDA:				; CODE XREF: sub_1002FB60+59j
					; DATA XREF: .text:off_1002FCF0o
		mov	eax, [eax+0Ch]	; jumptable 1002FBB9 case 0
		mov	edx, [eax]

loc_1002FBDF:				; CODE XREF: sub_1002FB60+57j
		mov	eax, ebx	; jumptable 1002FBB9 default case
		mov	ecx, esi
		sub	ebx, edi
		sub	esi, edx
		cmp	eax, ebx
		sbb	eax, eax
		neg	eax
		cmp	esi, ecx
		jbe	short loc_1002FBF9
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jnz	short loc_1002FBF9
		inc	eax

loc_1002FBF9:				; CODE XREF: sub_1002FB60+8Fj
					; sub_1002FB60+96j
		mov	ecx, ebp
		sub	ebp, [esp+1Ch+var_8]
		cmp	ecx, ebp
		sbb	ecx, ecx
		neg	ecx
		test	eax, eax
		jz	short loc_1002FC11
		mov	edx, ebp
		dec	ebp
		test	edx, edx
		jnz	short loc_1002FC11
		inc	ecx

loc_1002FC11:				; CODE XREF: sub_1002FB60+A7j
					; sub_1002FB60+AEj
		mov	edx, [esp+1Ch+var_C]
		mov	eax, edx
		sub	edx, [esp+1Ch+var_4]
		cmp	eax, edx
		sbb	eax, eax
		neg	eax
		mov	[esp+1Ch+var_C], edx
		test	ecx, ecx
		jz	short loc_1002FC35
		mov	ecx, edx
		dec	edx
		mov	[esp+1Ch+var_C], edx
		test	ecx, ecx
		jnz	short loc_1002FC35
		inc	eax

loc_1002FC35:				; CODE XREF: sub_1002FB60+C7j
					; sub_1002FB60+D2j
		test	eax, eax
		jz	short loc_1002FC81
		mov	edx, [esp+1Ch+arg_C]
		mov	ecx, [edx+10h]
		mov	eax, [ecx]
		mov	edi, [ecx+4]
		add	esi, eax
		cmp	esi, eax
		sbb	eax, eax
		neg	eax
		lea	edx, [edi+ebx]
		cmp	edx, edi
		sbb	edi, edi
		add	edx, eax
		neg	edi
		cmp	edx, eax
		sbb	eax, eax
		neg	eax
		add	eax, edi
		mov	edi, [ecx+8]
		mov	ebx, edx
		lea	edx, [edi+ebp]
		cmp	edx, edi
		sbb	edi, edi
		add	edx, eax
		neg	edi
		cmp	edx, eax
		sbb	eax, eax
		neg	eax
		add	eax, [ecx+0Ch]
		mov	ebp, edx
		add	eax, edi
		add	[esp+1Ch+var_C], eax

loc_1002FC81:				; CODE XREF: sub_1002FB60+D7j
		mov	edi, [esp+1Ch+arg_8]
		push	4
		push	edi
		call	sub_100291A0
		add	esp, 8
		test	eax, eax
		js	short loc_1002FCD8
		mov	ecx, [edi+0Ch]
		mov	edx, [esp+1Ch+var_C]
		mov	[ecx+0Ch], edx
		mov	ecx, [edi+0Ch]
		mov	[ecx+8], ebp
		mov	edx, [edi+0Ch]
		mov	[edx+4], ebx
		mov	ecx, [edi+0Ch]
		mov	[ecx], esi
		mov	ecx, [edi+0Ch]
		mov	dword ptr [edi], 0
		mov	dword ptr [edi+8], 4
		mov	edx, 4
		add	ecx, 0Ch

loc_1002FCC7:				; CODE XREF: sub_1002FB60+173j
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002FCD5
		dec	edx
		sub	ecx, 4
		cmp	edx, 1
		ja	short loc_1002FCC7

loc_1002FCD5:				; CODE XREF: sub_1002FB60+16Aj
		mov	[edi+8], edx

loc_1002FCD8:				; CODE XREF: sub_1002FB60+132j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_1002FB60	endp

; ---------------------------------------------------------------------------
off_1002FCE0	dd offset loc_1002FBA7	; DATA XREF: sub_1002FB60+2Ar
		dd offset loc_1002FBA1	; jump table for switch	statement
		dd offset loc_1002FB9B
		dd offset loc_1002FB91
off_1002FCF0	dd offset loc_1002FBDA	; DATA XREF: sub_1002FB60+59r
		dd offset loc_1002FBD4	; jump table for switch	statement
		dd offset loc_1002FBCA
		dd offset loc_1002FBC0

; =============== S U B	R O U T	I N E =======================================


sub_1002FD00	proc near		; DATA XREF: sub_100302D0+86o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 14h
		mov	ecx, [esp+14h+arg_0]
		mov	eax, [ecx+8]
		push	ebx
		push	ebp
		xor	edx, edx
		push	esi
		push	edi
		dec	eax
		xor	esi, esi
		xor	edi, edi
		xor	ebx, ebx
		xor	ebp, ebp
		mov	[esp+24h+var_C], edx
		mov	[esp+24h+var_8], edx
		mov	[esp+24h+var_4], edx
		mov	[esp+24h+var_14], edx
		mov	[esp+24h+var_10], edx
		cmp	eax, 4		; switch 5 cases
		ja	short loc_1002FD5E ; jumptable 1002FD32	default	case
		jmp	ds:off_1002FECC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002FD39:				; CODE XREF: sub_1002FD00+32j
					; DATA XREF: .text:off_1002FECCo
		mov	eax, [ecx+0Ch]	; jumptable 1002FD32 case 4
		mov	eax, [eax+10h]
		mov	[esp+24h+var_10], eax

loc_1002FD43:				; CODE XREF: sub_1002FD00+32j
					; DATA XREF: .text:off_1002FECCo
		mov	eax, [ecx+0Ch]	; jumptable 1002FD32 case 3
		mov	eax, [eax+0Ch]
		mov	[esp+24h+var_14], eax

loc_1002FD4D:				; CODE XREF: sub_1002FD00+32j
					; DATA XREF: .text:off_1002FECCo
		mov	eax, [ecx+0Ch]	; jumptable 1002FD32 case 2
		mov	ebp, [eax+8]

loc_1002FD53:				; CODE XREF: sub_1002FD00+32j
					; DATA XREF: .text:off_1002FECCo
		mov	eax, [ecx+0Ch]	; jumptable 1002FD32 case 1
		mov	ebx, [eax+4]

loc_1002FD59:				; CODE XREF: sub_1002FD00+32j
					; DATA XREF: .text:off_1002FECCo
		mov	ecx, [ecx+0Ch]	; jumptable 1002FD32 case 0
		mov	edi, [ecx]

loc_1002FD5E:				; CODE XREF: sub_1002FD00+30j
		mov	eax, [esp+24h+arg_4] ; jumptable 1002FD32 default case
		mov	ecx, [eax+8]
		dec	ecx
		cmp	ecx, 4		; switch 5 cases
		ja	short loc_1002FD9B ; jumptable 1002FD6B	default	case
		jmp	ds:off_1002FEE0[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002FD72:				; CODE XREF: sub_1002FD00+6Bj
					; DATA XREF: .text:off_1002FEE0o
		mov	edx, [eax+0Ch]	; jumptable 1002FD6B case 4
		mov	ecx, [edx+10h]
		mov	[esp+24h+var_4], ecx

loc_1002FD7C:				; CODE XREF: sub_1002FD00+6Bj
					; DATA XREF: .text:off_1002FEE0o
		mov	edx, [eax+0Ch]	; jumptable 1002FD6B case 3
		mov	ecx, [edx+0Ch]
		mov	[esp+24h+var_8], ecx

loc_1002FD86:				; CODE XREF: sub_1002FD00+6Bj
					; DATA XREF: .text:off_1002FEE0o
		mov	edx, [eax+0Ch]	; jumptable 1002FD6B case 2
		mov	ecx, [edx+8]
		mov	[esp+24h+var_C], ecx

loc_1002FD90:				; CODE XREF: sub_1002FD00+6Bj
					; DATA XREF: .text:off_1002FEE0o
		mov	edx, [eax+0Ch]	; jumptable 1002FD6B case 1
		mov	esi, [edx+4]

loc_1002FD96:				; CODE XREF: sub_1002FD00+6Bj
					; DATA XREF: .text:off_1002FEE0o
		mov	eax, [eax+0Ch]	; jumptable 1002FD6B case 0
		mov	edx, [eax]

loc_1002FD9B:				; CODE XREF: sub_1002FD00+69j
		mov	eax, ebx	; jumptable 1002FD6B default case
		mov	ecx, edi
		sub	ebx, esi
		sub	edi, edx
		cmp	eax, ebx
		sbb	eax, eax
		neg	eax
		cmp	edi, ecx
		jbe	short loc_1002FDB5
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jnz	short loc_1002FDB5
		inc	eax

loc_1002FDB5:				; CODE XREF: sub_1002FD00+ABj
					; sub_1002FD00+B2j
		mov	ecx, ebp
		sub	ebp, [esp+24h+var_C]
		cmp	ecx, ebp
		sbb	ecx, ecx
		neg	ecx
		test	eax, eax
		jz	short loc_1002FDCD
		mov	edx, ebp
		dec	ebp
		test	edx, edx
		jnz	short loc_1002FDCD
		inc	ecx

loc_1002FDCD:				; CODE XREF: sub_1002FD00+C3j
					; sub_1002FD00+CAj
		mov	edx, [esp+24h+var_14]
		mov	eax, edx
		sub	edx, [esp+24h+var_8]
		cmp	eax, edx
		sbb	eax, eax
		neg	eax
		mov	[esp+24h+var_14], edx
		test	ecx, ecx
		jz	short loc_1002FDF1
		mov	ecx, edx
		dec	edx
		mov	[esp+24h+var_14], edx
		test	ecx, ecx
		jnz	short loc_1002FDF1
		inc	eax

loc_1002FDF1:				; CODE XREF: sub_1002FD00+E3j
					; sub_1002FD00+EEj
		mov	edx, [esp+24h+var_10]
		mov	ecx, edx
		sub	edx, [esp+24h+var_4]
		cmp	ecx, edx
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+24h+var_10], edx
		test	eax, eax
		jz	short loc_1002FE15
		mov	eax, edx
		dec	edx
		mov	[esp+24h+var_10], edx
		test	eax, eax
		jnz	short loc_1002FE15
		inc	ecx

loc_1002FE15:				; CODE XREF: sub_1002FD00+107j
					; sub_1002FD00+112j
		test	ecx, ecx
		jz	short loc_1002FE61
		mov	ecx, [esp+24h+arg_C]
		mov	ecx, [ecx+10h]
		mov	eax, [ecx]
		mov	esi, [ecx+4]
		add	edi, eax
		cmp	edi, eax
		sbb	eax, eax
		neg	eax
		lea	edx, [esi+ebx]
		cmp	edx, esi
		sbb	esi, esi
		add	edx, eax
		neg	esi
		cmp	edx, eax
		sbb	eax, eax
		neg	eax
		add	eax, esi
		mov	esi, [ecx+8]
		mov	ebx, edx
		lea	edx, [esi+ebp]
		cmp	edx, esi
		sbb	esi, esi
		add	edx, eax
		neg	esi
		cmp	edx, eax
		mov	ebp, edx
		sbb	edx, edx
		neg	edx
		add	edx, [ecx+0Ch]
		add	edx, esi
		add	[esp+24h+var_14], edx

loc_1002FE61:				; CODE XREF: sub_1002FD00+117j
		mov	esi, [esp+24h+arg_8]
		push	5
		push	esi
		call	sub_100291A0
		add	esp, 8
		test	eax, eax
		js	short loc_1002FEC1
		mov	ecx, [esi+0Ch]
		mov	edx, [esp+24h+var_10]
		mov	[ecx+10h], edx
		mov	ecx, [esi+0Ch]
		mov	edx, [esp+24h+var_14]
		mov	[ecx+0Ch], edx
		mov	ecx, [esi+0Ch]
		mov	[ecx+8], ebp
		mov	edx, [esi+0Ch]
		mov	[edx+4], ebx
		mov	ecx, [esi+0Ch]
		mov	[ecx], edi
		mov	ecx, [esi+0Ch]
		mov	edx, 5
		mov	dword ptr [esi], 0
		mov	[esi+8], edx
		add	ecx, 10h
		lea	ecx, [ecx+0]

loc_1002FEB0:				; CODE XREF: sub_1002FD00+1BCj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1002FEBE
		dec	edx
		sub	ecx, 4
		cmp	edx, 1
		ja	short loc_1002FEB0

loc_1002FEBE:				; CODE XREF: sub_1002FD00+1B3j
		mov	[esi+8], edx

loc_1002FEC1:				; CODE XREF: sub_1002FD00+172j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_1002FD00	endp

; ---------------------------------------------------------------------------
		align 4
off_1002FECC	dd offset loc_1002FD59	; DATA XREF: sub_1002FD00+32r
		dd offset loc_1002FD53	; jump table for switch	statement
		dd offset loc_1002FD4D
		dd offset loc_1002FD43
		dd offset loc_1002FD39
off_1002FEE0	dd offset loc_1002FD96	; DATA XREF: sub_1002FD00+6Br
		dd offset loc_1002FD90	; jump table for switch	statement
		dd offset loc_1002FD86
		dd offset loc_1002FD7C
		dd offset loc_1002FD72
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1002FF00	proc near		; DATA XREF: sub_100302D0+96o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		mov	ecx, [esp+1Ch+arg_0]
		mov	eax, [ecx+8]
		push	ebx
		push	ebp
		xor	edx, edx
		push	esi
		push	edi
		dec	eax
		xor	esi, esi
		xor	edi, edi
		xor	ebx, ebx
		xor	ebp, ebp
		mov	[esp+2Ch+var_10], edx
		mov	[esp+2Ch+var_C], edx
		mov	[esp+2Ch+var_8], edx
		mov	[esp+2Ch+var_4], edx
		mov	[esp+2Ch+var_18], edx
		mov	[esp+2Ch+var_1C], edx
		mov	[esp+2Ch+var_14], edx
		cmp	eax, 5		; switch 6 cases
		ja	short loc_1002FF70 ; jumptable 1002FF3A	default	case
		jmp	ds:off_1003013C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002FF41:				; CODE XREF: sub_1002FF00+3Aj
					; DATA XREF: .text:off_1003013Co
		mov	eax, [ecx+0Ch]	; jumptable 1002FF3A case 5
		mov	eax, [eax+14h]
		mov	[esp+2Ch+var_14], eax

loc_1002FF4B:				; CODE XREF: sub_1002FF00+3Aj
					; DATA XREF: .text:off_1003013Co
		mov	eax, [ecx+0Ch]	; jumptable 1002FF3A case 4
		mov	eax, [eax+10h]
		mov	[esp+2Ch+var_1C], eax

loc_1002FF55:				; CODE XREF: sub_1002FF00+3Aj
					; DATA XREF: .text:off_1003013Co
		mov	eax, [ecx+0Ch]	; jumptable 1002FF3A case 3
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_18], eax

loc_1002FF5F:				; CODE XREF: sub_1002FF00+3Aj
					; DATA XREF: .text:off_1003013Co
		mov	eax, [ecx+0Ch]	; jumptable 1002FF3A case 2
		mov	ebp, [eax+8]

loc_1002FF65:				; CODE XREF: sub_1002FF00+3Aj
					; DATA XREF: .text:off_1003013Co
		mov	eax, [ecx+0Ch]	; jumptable 1002FF3A case 1
		mov	ebx, [eax+4]

loc_1002FF6B:				; CODE XREF: sub_1002FF00+3Aj
					; DATA XREF: .text:off_1003013Co
		mov	ecx, [ecx+0Ch]	; jumptable 1002FF3A case 0
		mov	edi, [ecx]

loc_1002FF70:				; CODE XREF: sub_1002FF00+38j
		mov	eax, [esp+2Ch+arg_4] ; jumptable 1002FF3A default case
		mov	ecx, [eax+8]
		dec	ecx
		cmp	ecx, 5		; switch 6 cases
		ja	short loc_1002FFB7 ; jumptable 1002FF7D	default	case
		jmp	ds:off_10030154[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1002FF84:				; CODE XREF: sub_1002FF00+7Dj
					; DATA XREF: .text:off_10030154o
		mov	edx, [eax+0Ch]	; jumptable 1002FF7D case 5
		mov	ecx, [edx+14h]
		mov	[esp+2Ch+var_4], ecx

loc_1002FF8E:				; CODE XREF: sub_1002FF00+7Dj
					; DATA XREF: .text:off_10030154o
		mov	edx, [eax+0Ch]	; jumptable 1002FF7D case 4
		mov	ecx, [edx+10h]
		mov	[esp+2Ch+var_8], ecx

loc_1002FF98:				; CODE XREF: sub_1002FF00+7Dj
					; DATA XREF: .text:off_10030154o
		mov	edx, [eax+0Ch]	; jumptable 1002FF7D case 3
		mov	ecx, [edx+0Ch]
		mov	[esp+2Ch+var_C], ecx

loc_1002FFA2:				; CODE XREF: sub_1002FF00+7Dj
					; DATA XREF: .text:off_10030154o
		mov	edx, [eax+0Ch]	; jumptable 1002FF7D case 2
		mov	ecx, [edx+8]
		mov	[esp+2Ch+var_10], ecx

loc_1002FFAC:				; CODE XREF: sub_1002FF00+7Dj
					; DATA XREF: .text:off_10030154o
		mov	edx, [eax+0Ch]	; jumptable 1002FF7D case 1
		mov	esi, [edx+4]

loc_1002FFB2:				; CODE XREF: sub_1002FF00+7Dj
					; DATA XREF: .text:off_10030154o
		mov	eax, [eax+0Ch]	; jumptable 1002FF7D case 0
		mov	edx, [eax]

loc_1002FFB7:				; CODE XREF: sub_1002FF00+7Bj
		mov	eax, ebx	; jumptable 1002FF7D default case
		mov	ecx, edi
		sub	ebx, esi
		sub	edi, edx
		cmp	eax, ebx
		sbb	eax, eax
		neg	eax
		cmp	edi, ecx
		jbe	short loc_1002FFD1
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jnz	short loc_1002FFD1
		inc	eax

loc_1002FFD1:				; CODE XREF: sub_1002FF00+C7j
					; sub_1002FF00+CEj
		mov	ecx, ebp
		sub	ebp, [esp+2Ch+var_10]
		cmp	ecx, ebp
		sbb	edx, edx
		neg	edx
		test	eax, eax
		jz	short loc_1002FFE9
		mov	eax, ebp
		dec	ebp
		test	eax, eax
		jnz	short loc_1002FFE9
		inc	edx

loc_1002FFE9:				; CODE XREF: sub_1002FF00+DFj
					; sub_1002FF00+E6j
		mov	eax, [esp+2Ch+var_18]
		mov	ecx, eax
		sub	eax, [esp+2Ch+var_C]
		cmp	ecx, eax
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+2Ch+var_18], eax
		test	edx, edx
		jz	short loc_1003000D
		mov	edx, eax
		dec	eax
		mov	[esp+2Ch+var_18], eax
		test	edx, edx
		jnz	short loc_1003000D
		inc	ecx

loc_1003000D:				; CODE XREF: sub_1002FF00+FFj
					; sub_1002FF00+10Aj
		mov	edx, [esp+2Ch+var_1C]
		mov	eax, edx
		sub	edx, [esp+2Ch+var_8]
		cmp	eax, edx
		sbb	eax, eax
		neg	eax
		mov	[esp+2Ch+var_1C], edx
		test	ecx, ecx
		jz	short loc_10030031
		mov	ecx, edx
		dec	edx
		mov	[esp+2Ch+var_1C], edx
		test	ecx, ecx
		jnz	short loc_10030031
		inc	eax

loc_10030031:				; CODE XREF: sub_1002FF00+123j
					; sub_1002FF00+12Ej
		mov	edx, [esp+2Ch+var_14]
		mov	ecx, edx
		sub	edx, [esp+2Ch+var_4]
		cmp	ecx, edx
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+2Ch+var_14], edx
		test	eax, eax
		jz	short loc_10030055
		mov	eax, edx
		dec	edx
		mov	[esp+2Ch+var_14], edx
		test	eax, eax
		jnz	short loc_10030055
		inc	ecx

loc_10030055:				; CODE XREF: sub_1002FF00+147j
					; sub_1002FF00+152j
		test	ecx, ecx
		jz	short loc_100300C4
		mov	ecx, [esp+2Ch+arg_C]
		mov	eax, [ecx+10h]
		mov	ecx, [eax]
		mov	esi, [eax+4]
		add	edi, ecx
		cmp	edi, ecx
		sbb	ecx, ecx
		neg	ecx
		lea	edx, [esi+ebx]
		cmp	edx, esi
		sbb	esi, esi
		add	edx, ecx
		neg	esi
		cmp	edx, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, esi
		mov	esi, [eax+8]
		mov	ebx, edx
		lea	edx, [esi+ebp]
		cmp	edx, esi
		sbb	esi, esi
		add	edx, ecx
		neg	esi
		cmp	edx, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, esi
		mov	esi, [eax+0Ch]
		mov	[esp+2Ch+arg_0], edx
		mov	edx, [esp+2Ch+var_18]
		mov	ebp, [esp+2Ch+arg_0]
		add	edx, esi
		cmp	edx, esi
		sbb	esi, esi
		add	edx, ecx
		neg	esi
		cmp	edx, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, [eax+10h]
		mov	[esp+2Ch+var_18], edx
		add	ecx, esi
		add	[esp+2Ch+var_1C], ecx

loc_100300C4:				; CODE XREF: sub_1002FF00+157j
		mov	esi, [esp+2Ch+arg_8]
		push	6
		push	esi
		call	sub_100291A0
		add	esp, 8
		test	eax, eax
		js	short loc_10030131
		mov	edx, [esi+0Ch]
		mov	ecx, [esp+2Ch+var_14]
		mov	[edx+14h], ecx
		mov	edx, [esi+0Ch]
		mov	ecx, [esp+2Ch+var_1C]
		mov	[edx+10h], ecx
		mov	edx, [esi+0Ch]
		mov	ecx, [esp+2Ch+var_18]
		mov	[edx+0Ch], ecx
		mov	edx, [esi+0Ch]
		mov	[edx+8], ebp
		mov	ecx, [esi+0Ch]
		mov	[ecx+4], ebx
		mov	edx, [esi+0Ch]
		mov	[edx], edi
		mov	ecx, [esi+0Ch]
		mov	edx, 6
		mov	dword ptr [esi], 0
		mov	[esi+8], edx
		add	ecx, 14h
		lea	ebx, [ebx+0]

loc_10030120:				; CODE XREF: sub_1002FF00+22Cj
		cmp	dword ptr [ecx], 0
		jnz	short loc_1003012E
		dec	edx
		sub	ecx, 4
		cmp	edx, 1
		ja	short loc_10030120

loc_1003012E:				; CODE XREF: sub_1002FF00+223j
		mov	[esi+8], edx

loc_10030131:				; CODE XREF: sub_1002FF00+1D5j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
sub_1002FF00	endp

; ---------------------------------------------------------------------------
		align 4
off_1003013C	dd offset loc_1002FF6B	; DATA XREF: sub_1002FF00+3Ar
		dd offset loc_1002FF65	; jump table for switch	statement
		dd offset loc_1002FF5F
		dd offset loc_1002FF55
		dd offset loc_1002FF4B
		dd offset loc_1002FF41
off_10030154	dd offset loc_1002FFB2	; DATA XREF: sub_1002FF00+7Dr
		dd offset loc_1002FFAC	; jump table for switch	statement
		dd offset loc_1002FFA2
		dd offset loc_1002FF98
		dd offset loc_1002FF8E
		dd offset loc_1002FF84
		align 10h

loc_10030170:				; DATA XREF: sub_100302D0+B8o
		mov	eax, [esp+8]
		mov	ecx, [esp+0Ch]
		mov	edx, [esp+4]
		push	eax
		add	ecx, 4
		push	ecx
		push	edx
		call	sub_1002C150
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10030190:				; DATA XREF: sub_100302D0+BFo
		mov	eax, [esp+0Ch]
		mov	ecx, [esp+10h]
		mov	edx, [esp+8]
		push	eax
		mov	eax, [esp+8]
		add	ecx, 4
		push	ecx
		push	edx
		push	eax
		call	sub_1002C450
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100301B0:				; DATA XREF: sub_100302D0+C6o
		mov	eax, [esp+8]
		mov	ecx, [esp+0Ch]
		mov	edx, [esp+4]
		push	eax
		add	ecx, 4
		push	ecx
		push	edx
		call	sub_1002C4A0
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100301D0	proc near		; CODE XREF: .text:10031F17p
					; DATA XREF: sub_100302D0+CDo

var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	ebx
		mov	ebx, [esp+14h+arg_0]
		test	ebx, ebx
		jnz	short loc_100301FB
		mov	eax, [esp+14h+arg_8]
		mov	ecx, [esp+14h+arg_C]
		mov	edx, [esp+14h+arg_4]
		push	eax
		add	ecx, 4
		push	ecx
		push	edx
		call	sub_1002CAC0
		add	esp, 0Ch
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100301FB:				; CODE XREF: sub_100301D0+Aj
		lea	eax, [esp+14h+var_10]
		push	esi
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_10030247
		mov	edx, [esp+18h+arg_4]
		push	edi
		mov	edi, [esp+1Ch+arg_C]
		lea	ecx, [esp+1Ch+var_10]
		push	ecx
		add	edi, 4
		push	edi
		push	edx
		call	sub_1002CAC0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10030246
		mov	eax, [esp+1Ch+arg_8]
		push	eax
		push	edi
		lea	ecx, [esp+24h+var_10]
		push	ecx
		push	ebx
		call	sub_1002C450
		add	esp, 10h
		mov	esi, eax

loc_10030246:				; CODE XREF: sub_100301D0+5Ej
		pop	edi

loc_10030247:				; CODE XREF: sub_100301D0+3Dj
		lea	edx, [esp+18h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 10h
		retn
sub_100301D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030260	proc near		; CODE XREF: sub_100302D0+3p
		push	esi
		push	58h		; Size
		call	ds:malloc
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10030274
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10030274:				; CODE XREF: sub_10030260+10j
		push	edi
		lea	edi, [esi+4]
		push	edi
		mov	dword ptr [esi], 0
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+54h], 0
		call	sub_1002A030
		add	esp, 4
		test	eax, eax
		jz	short loc_100302C3
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_100302BE
		push	edi
		call	sub_10028EF0
		mov	eax, [esi+54h]
		add	esp, 4
		test	eax, eax
		jz	short loc_100302B4
		push	esi
		call	eax
		add	esp, 4

loc_100302B4:				; CODE XREF: sub_10030260+4Cj
		push	esi		; Memory
		call	ds:free
		add	esp, 4

loc_100302BE:				; CODE XREF: sub_10030260+3Cj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100302C3:				; CODE XREF: sub_10030260+37j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
sub_10030260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100302D0	proc near		; CODE XREF: sub_1002DF70+15p
					; sub_10031F70+6p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	esi
		push	edi
		call	sub_10030260
		mov	esi, eax
		xor	edi, edi
		cmp	esi, edi
		jnz	short loc_100302E6
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100302E6:				; CODE XREF: sub_100302D0+Ej
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		push	ebp
		lea	ebp, [esi+4]
		push	ebp
		push	ebx
		call	sub_10028E00
		add	esp, 8
		mov	[esp+14h+var_4], eax
		cmp	eax, edi
		jl	loc_100303B7
		push	ebx
		call	sub_10028CE0
		mov	[esi+14h], eax
		mov	eax, [esi+0Ch]
		add	eax, 0FFFFFFFDh
		add	esp, 4
		mov	[esi+24h], edi
		mov	[esi+20h], edi
		mov	[esi+1Ch], edi
		mov	[esi+18h], edi
		cmp	eax, 3		; switch 4 cases
		ja	short loc_1003036F ; jumptable 10030328	default	case
		jmp	ds:off_100303EC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1003032F:				; CODE XREF: sub_100302D0+58j
					; DATA XREF: .text:off_100303ECo
		mov	dword ptr [esi+28h], offset sub_1002F0C0 ; jumptable 10030328 case 0
		mov	dword ptr [esi+30h], offset loc_1002FA50
		jmp	short loc_1003037D
; ---------------------------------------------------------------------------

loc_1003033F:				; CODE XREF: sub_100302D0+58j
					; DATA XREF: .text:off_100303ECo
		mov	dword ptr [esi+28h], offset sub_1002F240 ; jumptable 10030328 case 1
		mov	dword ptr [esi+30h], offset sub_1002FB60
		jmp	short loc_1003037D
; ---------------------------------------------------------------------------

loc_1003034F:				; CODE XREF: sub_100302D0+58j
					; DATA XREF: .text:off_100303ECo
		mov	dword ptr [esi+28h], offset sub_1002F460 ; jumptable 10030328 case 2
		mov	dword ptr [esi+30h], offset sub_1002FD00
		jmp	short loc_1003037D
; ---------------------------------------------------------------------------

loc_1003035F:				; CODE XREF: sub_100302D0+58j
					; DATA XREF: .text:off_100303ECo
		mov	dword ptr [esi+28h], offset sub_1002F710 ; jumptable 10030328 case 3
		mov	dword ptr [esi+30h], offset sub_1002FF00
		jmp	short loc_1003037D
; ---------------------------------------------------------------------------

loc_1003036F:				; CODE XREF: sub_100302D0+56j
		mov	dword ptr [esi+28h], offset loc_1002EF90 ; jumptable 10030328 default case
		mov	dword ptr [esi+30h], offset sub_1002F020

loc_1003037D:				; CODE XREF: sub_100302D0+6Dj
					; sub_100302D0+7Dj ...
		mov	eax, [esp+14h+var_4]
		mov	dword ptr [esi+2Ch], offset sub_1002EFE0
		mov	dword ptr [esi+34h], offset loc_10030170
		mov	dword ptr [esi+38h], offset loc_10030190
		mov	dword ptr [esi+3Ch], offset loc_100301B0
		mov	dword ptr [esi+40h], offset sub_100301D0
		mov	[esi+44h], edi
		mov	[esi+48h], edi
		mov	[esi+4Ch], edi
		mov	[esi+50h], edi
		mov	[esi+54h], edi
		cmp	eax, edi
		jz	short loc_100303E4

loc_100303B7:				; CODE XREF: sub_100302D0+2Fj
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_100303DC
		push	ebp
		call	sub_10028EF0
		mov	eax, [esi+54h]
		add	esp, 4
		cmp	eax, edi
		jz	short loc_100303D2
		push	esi
		call	eax
		add	esp, 4

loc_100303D2:				; CODE XREF: sub_100302D0+FAj
		push	esi		; Memory
		call	ds:free
		add	esp, 4

loc_100303DC:				; CODE XREF: sub_100302D0+EAj
		pop	ebp
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100303E4:				; CODE XREF: sub_100302D0+E5j
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ecx
		retn
sub_100302D0	endp

; ---------------------------------------------------------------------------
off_100303EC	dd offset loc_1003032F	; DATA XREF: sub_100302D0+58r
		dd offset loc_1003033F	; jump table for switch	statement
		dd offset loc_1003034F
		dd offset loc_1003035F
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030400	proc near		; CODE XREF: sub_10030450+7Fp
					; sub_10030450+CEp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	eax
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10030423
		mov	ecx, [esp+arg_4]
		push	ecx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10030423
		retn
; ---------------------------------------------------------------------------

loc_10030423:				; CODE XREF: sub_10030400+Fj
					; sub_10030400+20j
		or	eax, 0FFFFFFFFh
		retn
sub_10030400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030430	proc near		; CODE XREF: sub_10031130+7Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	eax
		call	sub_10028F40
		mov	ecx, [esp+4+arg_4]
		push	ecx
		call	sub_10028F40
		add	esp, 8
		xor	eax, eax
		retn
sub_10030430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030450	proc near		; CODE XREF: .text:100308FBp
					; DATA XREF: sub_1002DF70+9Co ...

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 40h
		push	ebp
		xor	ebp, ebp
		lea	eax, [esp+44h+var_10]
		push	esi
		push	eax
		mov	[esp+4Ch+var_4], ebp
		mov	[esp+4Ch+var_14], ebp
		mov	[esp+4Ch+var_34], ebp
		mov	[esp+4Ch+var_24], ebp
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1003081E
		lea	ecx, [esp+48h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1003081E
		lea	edx, [esp+48h+var_40]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1003081E
		lea	eax, [esp+48h+var_30]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_1003081E
		push	ebx
		mov	ebx, [esp+4Ch+arg_4]
		push	edi
		mov	edi, [esp+50h+arg_0]
		push	ebx
		push	edi
		call	sub_10030400
		mov	edx, [esp+58h+arg_8]
		add	esp, 8
		test	eax, eax
		jnz	short loc_10030518
		mov	ecx, [esp+50h+arg_10]
		push	ecx
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1003081C
		mov	eax, [esp+50h+arg_14]
		mov	ecx, [esp+50h+arg_C]
		push	eax
		push	ecx

loc_10030501:				; CODE XREF: sub_10030450+F8j
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1003081C
		jmp	loc_1003081A
; ---------------------------------------------------------------------------

loc_10030518:				; CODE XREF: sub_10030450+8Dj
		mov	esi, [esp+50h+arg_C]
		push	esi
		push	edx
		call	sub_10030400
		add	esp, 8
		test	eax, eax
		jnz	short loc_1003054A
		mov	eax, [esp+50h+arg_10]
		push	eax
		push	edi
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1003081C
		mov	ecx, [esp+50h+arg_14]
		push	ecx
		push	ebx
		jmp	short loc_10030501
; ---------------------------------------------------------------------------

loc_1003054A:				; CODE XREF: sub_10030450+D8j
		mov	edx, [esp+50h+arg_8]
		push	edx
		push	edi
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jz	short loc_100305CD
		mov	edi, [esp+50h+arg_18]
		mov	eax, [edi+4]
		mov	edx, [eax+30h]
		add	edi, 4
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		push	esi
		push	ebx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		mov	eax, [edi]
		mov	ebx, [esp+50h+arg_8]
		mov	edx, [esp+50h+arg_0]
		push	eax
		mov	eax, [eax+30h]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		push	ebx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_10]
		push	ecx
		lea	edx, [esp+58h+var_40]
		push	edx
		mov	edx, [eax+40h]
		lea	ecx, [esp+5Ch+var_30]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		jmp	loc_1003071E
; ---------------------------------------------------------------------------

loc_100305CD:				; CODE XREF: sub_10030450+10Aj
		push	esi
		push	ebx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jnz	loc_10030803
		push	esi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jz	loc_10030803
		mov	ebx, [esp+50h+arg_18]
		mov	eax, [ebx+4]
		mov	edx, [esp+50h+arg_8]
		lea	edi, [ebx+4]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1003081C
		lea	ecx, [esp+50h+var_20]
		push	3
		push	ecx
		call	sub_1002B2B0
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1003081C
		mov	edx, [edi]
		cmp	[edx+44h], ebp
		jz	short loc_10030654
		mov	eax, edx
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esp+54h+var_20]
		push	ecx
		mov	edx, ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1003081C

loc_10030654:				; CODE XREF: sub_10030450+1E5j
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_40]
		push	ecx
		lea	edx, [esp+58h+var_20]
		push	edx
		mov	edx, [eax+38h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+28h]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		add	ebx, 0Ch
		mov	edx, ecx
		push	ebx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		lea	ecx, [esp+50h+var_20]
		push	2
		push	ecx
		call	sub_1002B2B0
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_1003081C
		mov	edx, [edi]
		cmp	[edx+44h], ebp
		jz	short loc_100306D2
		mov	eax, edx
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esp+54h+var_20]
		push	ecx
		mov	edx, ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1003081C

loc_100306D2:				; CODE XREF: sub_10030450+263j
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		mov	ecx, [esp+58h+arg_C]
		lea	edx, [esp+58h+var_20]
		push	edx
		mov	edx, [eax+38h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_10]
		push	ecx
		lea	edx, [esp+58h+var_30]
		push	edx
		mov	edx, [eax+40h]
		lea	ecx, [esp+5Ch+var_40]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		mov	ebx, [esp+50h+arg_8]

loc_1003071E:				; CODE XREF: sub_10030450+178j
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		lea	edx, [esp+58h+var_10]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_1003081C
		mov	eax, [edi]
		mov	edx, [esp+50h+arg_0]
		push	eax
		lea	ecx, [esp+54h+var_40]
		push	ecx
		push	edx
		mov	edx, [eax+30h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+30h]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		mov	edx, ecx
		push	ebx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+30h]
		lea	ecx, [esp+54h+var_30]
		push	ecx
		lea	edx, [esp+58h+var_40]
		push	edx
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_1003081C
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		lea	edx, [esp+58h+var_10]
		push	edx
		mov	edx, [eax+38h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	short loc_1003081C
		mov	edi, [edi]
		mov	ecx, [esp+50h+arg_C]
		push	edi
		lea	eax, [esp+54h+var_30]
		push	eax
		mov	edx, eax
		mov	eax, [edi+30h]
		push	ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	short loc_1003081C
		mov	ecx, [esp+50h+arg_10]
		push	ecx
		lea	edx, [esp+54h+var_40]
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	short loc_1003081C
		mov	eax, [esp+50h+arg_14]
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		call	sub_10028E00
		add	esp, 8
		mov	esi, eax
		jmp	short loc_1003081C
; ---------------------------------------------------------------------------

loc_10030803:				; CODE XREF: sub_10030450+189j
					; sub_10030450+19Aj
		mov	edx, [esp+50h+arg_10]
		push	edx
		call	sub_10028F40
		mov	eax, [esp+54h+arg_14]
		push	eax
		call	sub_10028F40
		add	esp, 8

loc_1003081A:				; CODE XREF: sub_10030450+C3j
		xor	esi, esi

loc_1003081C:				; CODE XREF: sub_10030450+A1j
					; sub_10030450+BDj ...
		pop	edi
		pop	ebx

loc_1003081E:				; CODE XREF: sub_10030450+28j
					; sub_10030450+3Fj ...
		lea	ecx, [esp+48h+var_10]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+4Ch+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+54h+var_30]
		push	ecx
		call	sub_10028EF0
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 40h
		retn
sub_10030450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030860	proc near		; DATA XREF: sub_1002DF70+A3o
					; sub_1002E050+B0o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 10h
		lea	eax, [esp+10h+var_10]
		push	esi
		push	eax
		mov	[esp+18h+var_4], 0
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_100308C9
		mov	edx, [esp+14h+arg_C]
		push	edi
		mov	edi, [esp+18h+arg_18]
		mov	eax, [edi+4]
		push	eax
		mov	eax, [eax+2Ch]
		lea	ecx, [esp+1Ch+var_10]
		push	ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100308C8
		mov	ecx, [esp+18h+arg_14]
		mov	edx, [esp+18h+arg_10]
		push	edi
		push	ecx
		mov	ecx, [esp+20h+arg_8]
		push	edx
		mov	edx, [esp+24h+arg_4]
		lea	eax, [esp+24h+var_10]
		push	eax
		mov	eax, [esp+28h+arg_0]
		push	ecx
		mov	ecx, [edi+60h]
		push	edx
		push	eax
		call	ecx
		add	esp, 1Ch
		mov	esi, eax

loc_100308C8:				; CODE XREF: sub_10030860+3Dj
		pop	edi

loc_100308C9:				; CODE XREF: sub_10030860+1Cj
		lea	edx, [esp+14h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4
		mov	eax, esi
		pop	esi
		add	esp, 10h
		retn
sub_10030860	endp

; ---------------------------------------------------------------------------
		align 10h

loc_100308E0:				; DATA XREF: sub_1002DF70+AAo
					; sub_1002E050+B7o
		mov	eax, [esp+14h]
		mov	ecx, [esp+10h]
		mov	edx, [esp+0Ch]
		push	eax
		mov	eax, [esp+0Ch]
		push	ecx
		mov	ecx, [esp+0Ch]
		push	edx
		push	eax
		push	ecx
		push	eax
		push	ecx
		call	sub_10030450
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030910	proc near		; DATA XREF: sub_1002DF70+C6o
					; sub_1002E050+D3o

var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 50h
		push	esi
		push	edi
		xor	edi, edi
		lea	eax, [esp+58h+var_10]
		push	eax
		mov	[esp+5Ch+var_4], edi
		mov	[esp+5Ch+var_44], edi
		mov	[esp+5Ch+var_14], edi
		mov	[esp+5Ch+var_34], edi
		mov	[esp+5Ch+var_24], edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10030B54
		lea	ecx, [esp+58h+var_50]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10030B54
		lea	edx, [esp+58h+var_20]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10030B54
		lea	eax, [esp+58h+var_40]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10030B54
		lea	ecx, [esp+58h+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, edi
		jl	loc_10030B54
		push	ebx
		mov	ebx, [esp+5Ch+arg_4]
		push	ebp
		mov	ebp, [esp+60h+arg_0]
		push	ebx
		push	ebp
		call	sub_10030400
		add	esp, 8
		test	eax, eax
		jz	loc_10030B4F
		cmp	dword ptr [ebp+0], 1
		jz	loc_10030B4F
		mov	edi, [esp+60h+arg_8]
		mov	edx, [edi+4]
		add	edx, 4
		push	edx
		push	ebp
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_10030B4F
		cmp	dword ptr [ebx], 1
		jz	loc_10030B4F
		mov	eax, [edi+4]
		add	eax, 4
		push	eax
		push	ebx
		call	sub_1002A680
		add	esp, 8
		test	eax, eax
		jns	loc_10030B4F
		mov	ecx, [edi+4]
		cmp	dword ptr [ecx+44h], 0
		jz	short loc_10030A2C
		mov	eax, ecx
		push	eax
		mov	eax, [eax+44h]
		lea	edx, [esp+64h+var_40]
		push	edx
		push	ebp
		call	eax
		mov	eax, [edi+4]
		mov	edx, [eax+44h]
		push	eax
		lea	ecx, [esp+70h+var_30]
		push	ecx
		push	ebx
		call	edx
		add	esp, 18h
		jmp	short loc_10030A45
; ---------------------------------------------------------------------------

loc_10030A2C:				; CODE XREF: sub_10030910+F8j
		lea	eax, [esp+60h+var_40]
		push	eax
		push	ebp
		call	sub_10028E00
		lea	ecx, [esp+68h+var_30]
		push	ecx
		push	ebx
		call	sub_10028E00
		add	esp, 10h

loc_10030A45:				; CODE XREF: sub_10030910+11Aj
		mov	eax, [edi+4]
		push	eax
		lea	edx, [esp+64h+var_10]
		push	edx
		mov	edx, [eax+3Ch]
		lea	ecx, [esp+68h+var_30]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10030B52
		mov	eax, [edi+4]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+64h+var_20]
		push	ecx
		lea	edx, [esp+68h+var_40]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10030B52
		mov	eax, [edi+4]
		push	eax
		lea	ecx, [esp+64h+var_20]
		push	ecx
		lea	edx, [edi+0Ch]
		push	edx
		mov	edx, [eax+28h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B52
		mov	eax, [edi+4]
		push	eax
		lea	ecx, [esp+64h+var_50]
		push	ecx
		lea	edx, [esp+68h+var_40]
		push	edx
		mov	edx, [eax+38h]
		lea	ecx, [esp+6Ch+var_20]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	loc_10030B52
		mov	eax, [edi+4]
		push	eax
		lea	ecx, [esp+64h+var_50]
		push	ecx
		lea	edx, [edi+1Ch]
		push	edx
		mov	edx, [eax+28h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10030B52
		mov	eax, [edi+4]
		push	eax
		lea	ecx, [esp+64h+var_50]
		push	ecx
		mov	edx, ecx
		push	edx
		mov	edx, [eax+30h]
		lea	ecx, [esp+6Ch+var_10]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10030B52
		lea	eax, [esp+60h+var_50]
		push	eax
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10030B4F
		lea	ecx, [esp+60h+var_30]
		push	ecx
		lea	edx, [esp+64h+var_40]
		push	edx
		push	ebx
		push	ebp
		lea	eax, [edi+4Ch]
		push	eax
		push	edi
		call	sub_1002E620
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		js	short loc_10030B52
		lea	ecx, [esp+60h+var_30]
		push	ecx
		lea	edx, [esp+64h+var_40]
		push	edx
		call	sub_10030400
		add	esp, 8
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		jmp	short loc_10030B52
; ---------------------------------------------------------------------------

loc_10030B4F:				; CODE XREF: sub_10030910+A4j
					; sub_10030910+AEj ...
		or	esi, 0FFFFFFFFh

loc_10030B52:				; CODE XREF: sub_10030910+14Fj
					; sub_10030910+16Fj ...
		pop	ebp
		pop	ebx

loc_10030B54:				; CODE XREF: sub_10030910+2Cj
					; sub_10030910+43j ...
		lea	eax, [esp+58h+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+5Ch+var_50]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+60h+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+64h+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+68h+var_30]
		push	ecx
		call	sub_10028EF0
		add	esp, 14h
		pop	edi
		mov	eax, esi
		pop	esi
		add	esp, 50h
		retn
sub_10030910	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030BA0	proc near		; CODE XREF: sub_10032120+20p
					; sub_10032360+2Cp

arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		push	eax
		call	sub_10028FB0
		add	esp, 4
		retn
sub_10030BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10030BB0	proc near		; CODE XREF: sub_10032120+3Bp
					; sub_100326B0+2A1p

arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		push	eax
		call	sub_10028F40
		add	esp, 4
		xor	eax, eax
		retn
sub_10030BB0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10030BC0	proc near		; CODE XREF: sub_100316E0+58Ep
					; sub_100316E0+5B1p

var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 40h
		push	ebp
		xor	ebp, ebp
		lea	eax, [esp+44h+var_30]
		push	esi
		push	eax
		mov	[esp+4Ch+var_24], ebp
		mov	[esp+4Ch+var_14], ebp
		mov	[esp+4Ch+var_34], ebp
		mov	[esp+4Ch+var_4], ebp
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031073
		lea	ecx, [esp+48h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031073
		lea	edx, [esp+48h+var_40]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031073
		lea	eax, [esp+48h+var_10]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031073
		mov	esi, [esp+48h+arg_8]
		push	esi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10030C58
		mov	ecx, [esp+48h+arg_14]
		push	ecx
		call	sub_10028F40
		add	esp, 4
		xor	esi, esi
		jmp	loc_10031073
; ---------------------------------------------------------------------------

loc_10030C58:				; CODE XREF: sub_10030BC0+82j
		push	ebx
		push	edi
		push	1
		push	esi
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jnz	loc_10030CF1
		mov	ebx, [esp+50h+arg_18]
		mov	eax, [ebx+4]
		mov	ecx, [esp+50h+arg_0]
		lea	edi, [ebx+4]
		push	eax
		lea	edx, [esp+54h+var_30]
		push	edx
		mov	edx, [eax+3Ch]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_40]
		push	ecx
		lea	edx, [esp+58h+var_30]
		push	edx
		mov	ecx, edx
		mov	edx, [eax+28h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		lea	edx, [esp+58h+var_40]
		push	edx
		mov	edx, [eax+28h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+28h]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		add	ebx, 0Ch
		lea	edx, [esp+58h+var_30]
		push	ebx
		push	edx
		call	eax
		jmp	loc_10030E92
; ---------------------------------------------------------------------------

loc_10030CF1:				; CODE XREF: sub_10030BC0+A7j
		mov	esi, [esp+50h+arg_18]
		lea	ebx, [esi+0Ch]
		push	0FFFFFFFDh
		push	ebx
		call	sub_1002B750
		add	esp, 8
		lea	edi, [esi+4]
		test	eax, eax
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+3Ch]
		jnz	loc_10030DCA
		mov	edx, [esp+54h+arg_8]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		mov	ebx, [esp+50h+arg_0]
		push	eax
		mov	eax, [eax+28h]
		lea	ecx, [esp+54h+var_30]
		push	ecx
		lea	edx, [esp+58h+var_40]
		push	edx
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+30h]
		lea	ecx, [esp+54h+var_20]
		push	ecx
		lea	edx, [esp+58h+var_40]
		push	edx
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_40]
		push	ecx
		lea	edx, [esp+58h+var_20]
		push	edx
		mov	edx, [eax+38h]
		lea	ecx, [esp+5Ch+var_30]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		lea	edx, [esp+58h+var_40]
		push	edx
		mov	ecx, edx
		mov	edx, [eax+28h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		lea	ecx, [esp+50h+var_40]
		push	eax
		push	ecx
		mov	edx, ecx
		lea	ecx, [esp+58h+var_30]
		jmp	loc_10030E8B
; ---------------------------------------------------------------------------

loc_10030DCA:				; CODE XREF: sub_10030BC0+14Ej
		mov	edx, [esp+54h+arg_0]
		lea	ecx, [esp+54h+var_30]
		push	ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_40]
		push	ecx
		lea	edx, [esp+58h+var_30]
		push	edx
		mov	ecx, edx
		mov	edx, [eax+28h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		lea	edx, [esp+58h+var_40]
		push	edx
		mov	edx, [eax+28h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		mov	edx, [esp+50h+arg_8]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		mov	edx, ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+38h]
		lea	ecx, [esp+54h+var_40]
		push	ecx
		mov	edx, ecx
		push	ebx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_40]
		push	ecx
		lea	edx, [esp+58h+var_30]

loc_10030E8B:				; CODE XREF: sub_10030BC0+205j
		push	edx
		mov	edx, [eax+28h]
		push	ecx
		call	edx

loc_10030E92:				; CODE XREF: sub_10030BC0+12Cj
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	ebx, [esp+50h+arg_8]
		push	1
		push	ebx
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		mov	eax, [edi]
		push	eax
		jnz	short loc_10030EE2
		mov	ebx, [esp+54h+arg_14]
		mov	ecx, [esp+54h+arg_4]
		mov	eax, [eax+28h]
		push	ebx
		push	ecx
		push	ecx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		mov	edx, [eax+3Ch]
		push	eax
		lea	ecx, [esp+54h+var_30]
		push	ecx
		push	ebx
		call	edx
		jmp	short loc_10030F2F
; ---------------------------------------------------------------------------

loc_10030EE2:				; CODE XREF: sub_10030BC0+2F3j
		mov	edx, [eax+28h]
		lea	ecx, [esp+54h+var_30]
		push	ecx
		mov	ecx, [esp+58h+arg_4]
		push	ecx
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		mov	ecx, [esp+50h+arg_14]
		push	eax
		mov	eax, [eax+38h]
		push	ecx
		lea	edx, [esp+58h+var_30]
		push	ebx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+54h+var_30]
		push	ecx
		mov	edx, ecx
		push	edx
		call	eax

loc_10030F2F:				; CODE XREF: sub_10030BC0+320j
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_10]
		push	ecx
		mov	ecx, [esp+58h+arg_0]
		lea	edx, [esp+58h+var_30]
		push	edx
		mov	edx, [eax+38h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_20]
		push	ecx
		lea	edx, [esp+58h+var_10]
		push	edx
		mov	ecx, edx
		mov	edx, [eax+28h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		mov	ebx, [esp+50h+arg_C]
		mov	edx, [eax+3Ch]
		push	eax
		lea	ecx, [esp+54h+var_40]
		push	ebx
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		mov	edx, [eax+30h]
		push	eax
		push	ebx
		lea	ecx, [esp+58h+var_20]
		push	ecx
		push	ebx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031071
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+54h+var_20]
		push	ecx
		lea	edx, [esp+58h+var_30]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031071
		lea	ecx, [esp+50h+var_20]
		push	ecx
		call	sub_10028FE0
		add	esp, 4
		test	eax, eax
		jz	short loc_10031009
		mov	eax, [edi]
		lea	edx, [esp+50h+var_20]
		push	edx
		add	eax, 4
		push	eax
		mov	ecx, edx
		push	ecx
		call	sub_1002A130
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	short loc_10031071

loc_10031009:				; CODE XREF: sub_10030BC0+42Bj
		lea	edx, [esp+50h+var_20]
		push	edx
		mov	eax, edx
		push	eax
		call	sub_1002B6B0
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	short loc_10031071
		mov	eax, [edi]
		push	eax
		mov	eax, [eax+30h]
		lea	ecx, [esp+54h+var_10]
		push	ecx
		mov	edx, ecx
		push	ebx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	short loc_10031071
		mov	eax, [edi]
		push	eax
		lea	ecx, [esp+54h+var_40]
		push	ecx
		lea	edx, [esp+58h+var_10]
		push	edx
		mov	edx, [eax+38h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	short loc_10031071
		mov	edi, [edi]
		mov	eax, [esp+50h+arg_10]
		push	edi
		push	eax
		mov	eax, [edi+30h]
		lea	ecx, [esp+58h+var_20]
		push	ecx
		lea	edx, [esp+5Ch+var_40]
		push	edx
		call	eax
		add	esp, 10h
		mov	esi, eax

loc_10031071:				; CODE XREF: sub_10030BC0+CEj
					; sub_10030BC0+F0j ...
		pop	edi
		pop	ebx

loc_10031073:				; CODE XREF: sub_10030BC0+28j
					; sub_10030BC0+3Fj ...
		lea	ecx, [esp+48h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+4Ch+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+50h+var_40]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+54h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 10h
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 40h
		retn
sub_10030BC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100310B0	proc near		; CODE XREF: sub_100312D0+EBp
					; sub_10032360+56p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		push	edi
		push	esi
		call	sub_10030400
		add	esp, 8
		test	eax, eax
		jnz	short loc_100310DA
		mov	eax, [esp+8+arg_10]
		push	eax
		call	sub_10028F40
		add	esp, 4
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100310DA:				; CODE XREF: sub_100310B0+16j
		mov	ecx, [esp+8+arg_8]
		push	ecx
		push	esi
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_1003112B
		mov	edx, [esp+8+arg_C]
		push	edx
		push	edi
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_1003112B
		mov	esi, [esp+8+arg_10]
		push	1
		push	esi
		call	sub_1002B2B0
		add	esp, 8
		test	eax, eax
		js	short loc_1003112B
		mov	ecx, [esp+8+arg_14]
		mov	edx, [ecx+4]
		cmp	dword ptr [edx+44h], 0
		jz	short loc_1003112B
		mov	eax, edx
		push	eax
		mov	eax, [eax+44h]
		push	esi
		push	esi
		call	eax
		add	esp, 0Ch

loc_1003112B:				; CODE XREF: sub_100310B0+3Aj
					; sub_100310B0+4Cj ...
		pop	edi
		pop	esi
		retn
sub_100310B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10031130	proc near		; CODE XREF: sub_100316E0+620p
					; sub_100326B0+37Cp

var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 30h
		lea	eax, [esp+30h+var_30]
		push	esi
		push	eax
		mov	[esp+38h+var_24], 0
		mov	[esp+38h+var_14], 0
		mov	[esp+38h+var_4], 0
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031299
		lea	ecx, [esp+34h+var_20]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031299
		lea	edx, [esp+34h+var_10]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031299
		mov	esi, [esp+34h+arg_8]
		push	esi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100311BA
		mov	eax, [esp+34h+arg_10]
		mov	ecx, [esp+34h+arg_C]
		push	eax
		push	ecx
		call	sub_10030430
		add	esp, 8
		mov	esi, eax
		jmp	loc_10031299
; ---------------------------------------------------------------------------

loc_100311BA:				; CODE XREF: sub_10031130+6Fj
		push	1
		push	esi
		call	sub_1002A650
		add	esp, 8
		test	eax, eax
		jnz	short loc_100311FE
		mov	edx, [esp+34h+arg_C]
		mov	eax, [esp+34h+arg_0]
		push	edx
		push	eax
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10031299
		mov	ecx, [esp+34h+arg_10]
		mov	edx, [esp+34h+arg_4]
		push	ecx
		push	edx
		call	sub_10028E00
		add	esp, 8
		mov	esi, eax
		jmp	loc_10031299
; ---------------------------------------------------------------------------

loc_100311FE:				; CODE XREF: sub_10031130+97j
		push	edi
		mov	edi, [esp+38h+arg_14]
		mov	eax, [edi+4]
		mov	edx, [eax+40h]
		push	eax
		lea	ecx, [esp+3Ch+var_30]
		push	ecx
		push	esi
		push	0
		call	edx
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031298
		mov	eax, [edi+4]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+3Ch+var_20]
		push	ecx
		lea	edx, [esp+40h+var_30]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10031298
		mov	eax, [edi+4]
		push	eax
		lea	ecx, [esp+3Ch+var_10]
		push	ecx
		lea	edx, [esp+40h+var_20]
		push	edx
		mov	edx, [eax+38h]
		lea	ecx, [esp+44h+var_30]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031298
		mov	eax, [edi+4]
		mov	ecx, [esp+38h+arg_C]
		push	eax
		push	ecx
		mov	ecx, [esp+40h+arg_0]
		lea	edx, [esp+40h+var_20]
		push	edx
		mov	edx, [eax+38h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031298
		mov	edi, [edi+4]
		mov	eax, [esp+38h+arg_10]
		mov	edx, [esp+38h+arg_4]
		push	edi
		push	eax
		mov	eax, [edi+38h]
		lea	ecx, [esp+40h+var_10]
		push	ecx
		push	edx
		call	eax
		add	esp, 10h
		mov	esi, eax

loc_10031298:				; CODE XREF: sub_10031130+EBj
					; sub_10031130+107j ...
		pop	edi

loc_10031299:				; CODE XREF: sub_10031130+2Cj
					; sub_10031130+43j ...
		lea	ecx, [esp+34h+var_30]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+38h+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+3Ch+var_10]
		push	eax
		call	sub_10028EF0
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		add	esp, 30h
		retn
sub_10031130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100312D0	proc near		; CODE XREF: sub_100316E0+5EAp

var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 60h
		push	ebp
		xor	ebp, ebp
		lea	eax, [esp+64h+var_50]
		push	esi
		push	eax
		mov	[esp+6Ch+var_44], ebp
		mov	[esp+6Ch+var_24], ebp
		mov	[esp+6Ch+var_54], ebp
		mov	[esp+6Ch+var_14], ebp
		mov	[esp+6Ch+var_4], ebp
		mov	[esp+6Ch+var_34], ebp
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031693
		lea	ecx, [esp+68h+var_30]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031693
		lea	edx, [esp+68h+var_60]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031693
		lea	eax, [esp+68h+var_20]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031693
		lea	ecx, [esp+68h+var_10]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031693
		lea	edx, [esp+68h+var_40]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebp
		jl	loc_10031693
		push	edi
		mov	edi, [esp+6Ch+arg_8]
		push	edi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100313CA
		mov	eax, [esp+6Ch+arg_20]
		mov	ecx, [esp+6Ch+arg_1C]
		mov	edx, [esp+6Ch+arg_18]
		push	eax
		mov	eax, [esp+70h+arg_14]
		push	ecx
		mov	ecx, [esp+74h+arg_10]
		push	edx
		mov	edx, [esp+78h+arg_C]
		push	eax
		push	ecx
		push	edx
		call	sub_100310B0
		add	esp, 18h
		mov	esi, eax
		jmp	loc_10031692
; ---------------------------------------------------------------------------

loc_100313CA:				; CODE XREF: sub_100312D0+B9j
		mov	eax, [esp+6Ch+arg_10]
		push	ebx
		mov	ebx, [esp+70h+arg_C]
		push	eax
		push	ebx
		call	sub_10030400
		add	esp, 8
		test	eax, eax
		jnz	short loc_1003143B
		mov	ecx, [esp+70h+arg_14]
		mov	edx, [esp+70h+arg_0]
		push	ecx
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [esp+70h+arg_18]
		mov	ecx, [esp+70h+arg_4]
		push	eax
		push	ecx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebp
		jl	loc_10031691
		mov	edx, [esp+70h+arg_1C]
		push	edx
		push	edi
		call	sub_10028E00
		add	esp, 8
		jmp	loc_1003168F
; ---------------------------------------------------------------------------

loc_1003143B:				; CODE XREF: sub_100312D0+115j
		mov	edi, [esp+70h+arg_20]
		mov	eax, [edi+4]
		mov	edx, [esp+70h+arg_8]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+74h+var_50]
		push	ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		mov	edx, [esp+70h+arg_8]
		push	eax
		lea	ecx, [esp+74h+var_30]
		push	ecx
		push	edx
		mov	edx, [eax+38h]
		lea	ecx, [esp+7Ch+var_50]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		push	eax
		mov	eax, [eax+38h]
		lea	ecx, [esp+74h+var_50]
		push	ecx
		mov	edx, ecx
		push	ebx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		mov	edx, [esp+70h+arg_10]
		push	eax
		lea	ecx, [esp+74h+var_30]
		push	ecx
		push	edx
		mov	edx, [eax+38h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		mov	ebx, [esp+70h+arg_0]
		push	eax
		mov	eax, [eax+30h]
		lea	ecx, [esp+74h+var_60]
		push	ecx
		lea	edx, [esp+78h+var_50]
		push	ebx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		mov	edx, [esp+70h+arg_4]
		push	eax
		lea	ecx, [esp+74h+var_20]
		push	ecx
		push	edx
		mov	edx, [eax+30h]
		lea	ecx, [esp+7Ch+var_30]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+74h+var_10]
		push	ecx
		lea	edx, [esp+78h+var_60]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		push	eax
		lea	ecx, [esp+74h+var_40]
		push	ecx
		lea	edx, [esp+78h+var_10]
		push	edx
		mov	edx, [eax+38h]
		lea	ecx, [esp+7Ch+var_60]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		mov	ecx, [esp+70h+arg_1C]
		push	eax
		push	ecx
		mov	ecx, [esp+78h+arg_8]
		lea	edx, [esp+78h+var_60]
		push	edx
		mov	edx, [eax+38h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		push	eax
		mov	eax, [eax+38h]
		lea	ecx, [esp+74h+var_60]
		push	ecx
		lea	edx, [esp+78h+var_10]
		push	edx
		push	ebx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		push	eax
		mov	eax, [eax+3Ch]
		lea	ecx, [esp+74h+var_50]
		push	ecx
		lea	edx, [esp+78h+var_20]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		mov	ebx, [esp+70h+arg_14]
		push	eax
		mov	eax, [eax+28h]
		lea	ecx, [esp+74h+var_60]
		push	ebx
		push	ecx
		mov	edx, ecx
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		mov	edx, [eax+28h]
		push	eax
		push	ebx
		lea	ecx, [esp+78h+var_40]
		push	ebx
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	loc_10031691
		mov	eax, [edi+4]
		mov	edx, [eax+30h]
		push	eax
		push	ebx
		lea	ecx, [esp+78h+var_50]
		push	ebx
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	short loc_10031691
		mov	eax, [edi+4]
		push	eax
		lea	ecx, [esp+74h+var_40]
		push	ecx
		mov	edx, ecx
		mov	ecx, [esp+78h+arg_4]
		push	edx
		mov	edx, [eax+38h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		cmp	esi, ebp
		jl	short loc_10031691
		mov	eax, [edi+4]
		mov	ebp, [esp+70h+arg_18]
		mov	edx, [eax+30h]
		push	eax
		push	ebp
		lea	ecx, [esp+78h+var_60]
		push	ebx
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031691
		mov	eax, [edi+4]
		mov	edx, [eax+38h]
		push	eax
		push	ebp
		lea	ecx, [esp+78h+var_20]
		push	ebp
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031691
		mov	edi, [edi+4]
		mov	ecx, [edi+30h]
		push	edi
		push	ebp
		lea	eax, [esp+78h+var_40]
		push	eax
		push	ebp
		call	ecx
		add	esp, 10h

loc_1003168F:				; CODE XREF: sub_100312D0+166j
		mov	esi, eax

loc_10031691:				; CODE XREF: sub_100312D0+130j
					; sub_100312D0+14Fj ...
		pop	ebx

loc_10031692:				; CODE XREF: sub_100312D0+F5j
		pop	edi

loc_10031693:				; CODE XREF: sub_100312D0+30j
					; sub_100312D0+47j ...
		lea	edx, [esp+68h+var_50]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+6Ch+var_30]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+70h+var_60]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+74h+var_20]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+78h+var_10]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+7Ch+var_40]
		push	ecx
		call	sub_10028EF0
		add	esp, 18h
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 60h
		retn
sub_100312D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100316E0	proc near		; DATA XREF: sub_1002DF70+BFo
					; sub_1002E050+CCo

var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= byte ptr -218h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F4		= byte ptr -1F4h
var_1E8		= byte ptr -1E8h
var_1E4		= byte ptr -1E4h
var_1D4		= byte ptr -1D4h
var_1C4		= byte ptr -1C4h
var_1B4		= byte ptr -1B4h
var_1A4		= byte ptr -1A4h
var_194		= byte ptr -194h
var_184		= byte ptr -184h
var_174		= byte ptr -174h
var_164		= byte ptr -164h
var_144		= byte ptr -144h
var_124		= byte ptr -124h
var_104		= byte ptr -104h
var_F4		= byte ptr -0F4h
var_84		= byte ptr -84h
var_74		= byte ptr -74h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 234h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+234h+var_4], eax
		mov	eax, [esp+234h+arg_0]
		mov	edx, [esp+234h+arg_14]
		mov	ecx, [esp+234h+arg_10]
		push	ebx
		mov	ebx, [esp+238h+arg_8]
		push	ebp
		mov	ebp, [esp+23Ch+arg_C]
		push	esi
		mov	esi, [esp+240h+arg_4]
		push	edi
		mov	edi, [esp+244h+arg_18]
		mov	[esp+244h+var_220], eax
		mov	[esp+244h+var_228], edx
		mov	[esp+244h+var_208], esi
		mov	[esp+244h+var_234], ebx
		mov	[esp+244h+var_230], ebp
		mov	[esp+244h+var_21C], ecx
		lea	eax, [esp+244h+var_1E8]
		mov	edx, 4
		lea	ebx, [ebx+0]

loc_10031750:				; CODE XREF: sub_100316E0+8Dj
		xor	ecx, ecx
		mov	[eax-10h], ecx
		mov	[eax], ecx
		mov	[eax+10h], ecx
		mov	[eax+20h], ecx
		mov	[eax+30h], ecx
		mov	[eax+40h], ecx
		mov	[eax+50h], ecx
		mov	[eax+60h], ecx
		sub	eax, 0FFFFFF80h
		dec	edx
		jnz	short loc_10031750
		mov	[esp+244h+var_20C], ecx
		cmp	edi, ecx
		jnz	short loc_10031781

loc_10031777:				; CODE XREF: sub_100316E0+ABj
					; sub_100316E0+AFj ...
		mov	eax, 0FFFFFFFCh
		jmp	loc_10031D8A
; ---------------------------------------------------------------------------

loc_10031781:				; CODE XREF: sub_100316E0+95j
		mov	eax, [esp+244h+var_220]
		cmp	eax, ecx
		jnz	short loc_100317A7
		cmp	esi, ecx
		jz	short loc_10031777
		cmp	ebx, ecx
		jz	short loc_10031777
		cmp	ebp, ecx
		jz	short loc_10031777
		mov	eax, [esp+244h+var_228]
		mov	ecx, [esp+244h+var_21C]
		push	eax
		push	ecx
		push	ebp
		push	ebx
		push	esi
		jmp	loc_10031D81
; ---------------------------------------------------------------------------

loc_100317A7:				; CODE XREF: sub_100316E0+A7j
		cmp	esi, ecx
		jz	loc_10031D74
		cmp	ebx, ecx
		jz	loc_10031D74
		cmp	ebp, ecx
		jz	loc_10031D74
		lea	edx, [esp+244h+var_1F4]
		mov	[esp+244h+var_224], ecx
		mov	[esp+244h+var_22C], edx
		jmp	short loc_100317D0
; ---------------------------------------------------------------------------
		align 10h

loc_100317D0:				; CODE XREF: sub_100316E0+EBj
					; sub_100316E0+139j
		mov	ebx, [esp+244h+var_22C]
		xor	ebp, ebp

loc_100317D6:				; CODE XREF: sub_100316E0+126j
		lea	eax, [ebx-10h]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031D3A
		push	ebx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	loc_10031D3A
		inc	ebp
		add	ebx, 20h
		cmp	ebp, 4
		jl	short loc_100317D6
		mov	eax, [esp+244h+var_224]
		sub	[esp+244h+var_22C], 0FFFFFF80h
		inc	eax
		mov	[esp+244h+var_224], eax
		cmp	eax, 4
		jl	short loc_100317D0
		mov	ebx, [esp+244h+var_208]
		push	ebx
		call	sub_10028CE0
		mov	esi, [esp+248h+var_220]
		push	esi
		mov	ebp, eax
		call	sub_10028CE0
		add	esp, 8
		cmp	eax, ebp
		jge	loc_100318F1
		mov	ecx, [edi+4]
		cmp	dword ptr [ecx+44h], 0
		mov	[esp+244h+var_22C], ebx
		mov	[esp+244h+var_220], esi
		jz	short loc_1003188A
		mov	eax, ecx
		mov	ecx, [esp+244h+var_234]
		push	eax
		lea	edx, [esp+248h+var_184]
		push	edx
		mov	edx, [eax+44h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031D3A
		mov	eax, [edi+4]
		mov	edx, [esp+244h+var_230]
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esp+248h+var_174]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		jmp	short loc_100318BE
; ---------------------------------------------------------------------------

loc_1003188A:				; CODE XREF: sub_100316E0+16Bj
		mov	edx, [esp+244h+var_234]
		lea	ecx, [esp+244h+var_184]
		push	ecx
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10031D3A
		mov	ecx, [esp+244h+var_230]
		lea	eax, [esp+244h+var_174]
		push	eax
		push	ecx
		call	sub_10028E00
		add	esp, 8

loc_100318BE:				; CODE XREF: sub_100316E0+1A8j
		mov	esi, eax
		test	esi, esi
		js	loc_10031D3A
		lea	edx, [esp+244h+var_1E4]
		push	edx
		lea	eax, [edi+2Ch]
		push	eax
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10031D3A
		lea	ecx, [esp+244h+var_1D4]
		push	ecx
		lea	edx, [edi+3Ch]
		push	edx
		jmp	loc_1003199B
; ---------------------------------------------------------------------------

loc_100318F1:				; CODE XREF: sub_100316E0+156j
		lea	eax, [esp+244h+var_184]
		push	eax
		lea	ecx, [edi+2Ch]
		push	ecx
		mov	[esp+24Ch+var_22C], esi
		mov	[esp+24Ch+var_220], ebx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10031D3A
		lea	edx, [esp+244h+var_174]
		push	edx
		lea	eax, [edi+3Ch]
		push	eax
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10031D3A
		mov	ecx, [edi+4]
		cmp	dword ptr [ecx+44h], 0
		jz	short loc_10031975
		mov	eax, ecx
		mov	ecx, [esp+244h+var_234]
		push	eax
		lea	edx, [esp+248h+var_1E4]
		push	edx
		mov	edx, [eax+44h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10031D3A
		mov	eax, [edi+4]
		mov	edx, [esp+244h+var_230]
		push	eax
		mov	eax, [eax+44h]
		lea	ecx, [esp+248h+var_1D4]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		jmp	short loc_100319A3
; ---------------------------------------------------------------------------

loc_10031975:				; CODE XREF: sub_100316E0+25Cj
		mov	edx, [esp+244h+var_234]
		lea	ecx, [esp+244h+var_1E4]
		push	ecx
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10031D3A
		mov	ecx, [esp+244h+var_230]
		lea	eax, [esp+244h+var_1D4]
		push	eax
		push	ecx

loc_1003199B:				; CODE XREF: sub_100316E0+20Cj
		call	sub_10028E00
		add	esp, 8

loc_100319A3:				; CODE XREF: sub_100316E0+293j
		mov	esi, eax
		test	esi, esi
		js	loc_10031D3A
		lea	edx, [esp+244h+var_204]
		push	edx
		call	sub_10028F40
		lea	eax, [esp+248h+var_1F4]
		push	eax
		call	sub_10028F40
		push	edi
		lea	ecx, [esp+250h+var_F4]
		push	ecx
		lea	edx, [esp+254h+var_104]
		push	edx
		mov	edx, [edi+68h]
		lea	eax, [esp+258h+var_174]
		push	eax
		lea	ecx, [esp+25Ch+var_184]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_10031D3A
		push	edi
		lea	eax, [esp+248h+var_74]
		push	eax
		lea	ecx, [esp+24Ch+var_84]
		push	ecx
		lea	edx, [esp+250h+var_F4]
		push	edx
		lea	eax, [esp+254h+var_104]
		push	eax
		mov	eax, [edi+60h]
		lea	ecx, [esp+258h+var_174]
		push	ecx
		lea	edx, [esp+25Ch+var_184]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_10031D3A
		mov	ebp, 1
		lea	ebx, [esp+244h+var_164]

loc_10031A43:				; CODE XREF: sub_100316E0+397j
		push	edi
		lea	ecx, [ebx+10h]
		push	ecx
		push	ebx
		lea	edx, [ebx-10h]
		push	edx
		lea	eax, [ebx-20h]
		push	eax
		mov	eax, [edi+60h]
		lea	ecx, [esp+258h+var_1D4]
		push	ecx
		lea	edx, [esp+25Ch+var_1E4]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_10031D3A
		inc	ebp
		sub	ebx, 0FFFFFF80h
		cmp	ebp, 4
		jl	short loc_10031A43
		push	edi
		lea	ecx, [esp+248h+var_1B4]
		push	ecx
		lea	edx, [esp+24Ch+var_1C4]
		push	edx
		mov	edx, [edi+68h]
		lea	eax, [esp+250h+var_1D4]
		push	eax
		lea	ecx, [esp+254h+var_1E4]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_10031D3A
		mov	ebp, 1
		lea	ebx, [esp+244h+var_144]

loc_10031AB2:				; CODE XREF: sub_100316E0+409j
		push	edi
		lea	eax, [ebx+10h]
		push	eax
		push	ebx
		lea	ecx, [ebx-30h]
		push	ecx
		lea	edx, [ebx-40h]
		push	edx
		mov	edx, [edi+60h]
		lea	eax, [esp+258h+var_1B4]
		push	eax
		lea	ecx, [esp+25Ch+var_1C4]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_10031D3A
		inc	ebp
		sub	ebx, 0FFFFFF80h
		cmp	ebp, 4
		jl	short loc_10031AB2
		push	edi
		lea	eax, [esp+248h+var_194]
		push	eax
		lea	ecx, [esp+24Ch+var_1A4]
		push	ecx
		lea	edx, [esp+250h+var_1B4]
		push	edx
		lea	eax, [esp+254h+var_1C4]
		push	eax
		mov	eax, [edi+60h]
		lea	ecx, [esp+258h+var_1D4]
		push	ecx
		lea	edx, [esp+25Ch+var_1E4]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_10031D3A
		mov	ebp, 1
		lea	ebx, [esp+244h+var_124]

loc_10031B37:				; CODE XREF: sub_100316E0+48Ej
		push	edi
		lea	ecx, [ebx+10h]
		push	ecx
		push	ebx
		lea	edx, [ebx-50h]
		push	edx
		lea	eax, [ebx-60h]
		push	eax
		mov	eax, [edi+60h]
		lea	ecx, [esp+258h+var_194]
		push	ecx
		lea	edx, [esp+25Ch+var_1A4]
		push	edx
		call	eax
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_10031D3A
		inc	ebp
		sub	ebx, 0FFFFFF80h
		cmp	ebp, 4
		jl	short loc_10031B37
		mov	ebx, [esp+244h+var_22C]
		push	ebx
		call	sub_10028CE0
		inc	eax
		cdq
		sub	eax, edx
		lea	ecx, [esp+248h+var_218]
		mov	ebp, eax
		push	ecx
		sar	ebp, 1
		call	sub_1002A030
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10031D3A
		lea	edx, [esp+244h+var_218]
		push	edx
		call	sub_10028F40
		add	esp, 4
		dec	ebp
		mov	[esp+244h+var_224], ebp
		js	loc_10031CEE
		add	ebp, ebp
		mov	[esp+244h+var_230], ebp
		jmp	short loc_10031BC8
; ---------------------------------------------------------------------------
		align 10h

loc_10031BC0:				; CODE XREF: sub_100316E0+608j
		mov	ebx, [esp+244h+var_22C]
		mov	ebp, [esp+244h+var_230]

loc_10031BC8:				; CODE XREF: sub_100316E0+4D7j
		push	ebx
		lea	esi, [ebp+1]
		call	sub_10028CE0
		add	esp, 4
		cmp	esi, eax
		jl	short loc_10031BE2
		mov	[esp+244h+var_234], 0
		jmp	short loc_10031BF0
; ---------------------------------------------------------------------------

loc_10031BE2:				; CODE XREF: sub_100316E0+4F6j
		push	esi
		push	ebx
		call	sub_10028C10
		add	esp, 8
		mov	[esp+244h+var_234], eax

loc_10031BF0:				; CODE XREF: sub_100316E0+500j
		shl	[esp+244h+var_234], 1
		push	ebx
		call	sub_10028CE0
		add	esp, 4
		cmp	ebp, eax
		jl	short loc_10031C05
		xor	eax, eax
		jmp	short loc_10031C0F
; ---------------------------------------------------------------------------

loc_10031C05:				; CODE XREF: sub_100316E0+51Fj
		push	ebp
		push	ebx
		call	sub_10028C10
		add	esp, 8

loc_10031C0F:				; CODE XREF: sub_100316E0+523j
		mov	ebp, [esp+244h+var_220]
		or	[esp+244h+var_234], eax
		push	ebp
		call	sub_10028CE0
		add	esp, 4
		cmp	esi, eax
		jl	short loc_10031C28
		xor	ebx, ebx
		jmp	short loc_10031C34
; ---------------------------------------------------------------------------

loc_10031C28:				; CODE XREF: sub_100316E0+542j
		push	esi
		push	ebp
		call	sub_10028C10
		add	esp, 8
		mov	ebx, eax

loc_10031C34:				; CODE XREF: sub_100316E0+546j
		push	ebp
		add	ebx, ebx
		call	sub_10028CE0
		mov	ecx, [esp+248h+var_230]
		add	esp, 4
		cmp	ecx, eax
		jl	short loc_10031C4B
		xor	eax, eax
		jmp	short loc_10031C55
; ---------------------------------------------------------------------------

loc_10031C4B:				; CODE XREF: sub_100316E0+565j
		push	ecx
		push	ebp
		call	sub_10028C10
		add	esp, 8

loc_10031C55:				; CODE XREF: sub_100316E0+569j
		mov	ebp, [esp+244h+var_21C]
		push	edi
		or	ebx, eax
		lea	eax, [esp+248h+var_218]
		push	eax
		mov	eax, [esp+24Ch+var_228]
		push	eax
		push	ebp
		lea	ecx, [esp+254h+var_218]
		push	ecx
		push	eax
		push	ebp
		call	sub_10030BC0
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_10031D3A
		mov	eax, [esp+244h+var_228]
		push	edi
		lea	edx, [esp+248h+var_218]
		push	edx
		push	eax
		push	ebp
		mov	ecx, edx
		push	ecx
		push	eax
		push	ebp
		call	sub_10030BC0
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		js	loc_10031D3A
		mov	edx, [esp+244h+var_234]
		push	edi
		lea	ecx, [esp+248h+var_218]
		push	ecx
		mov	ecx, [esp+24Ch+var_228]
		push	ecx
		lea	eax, [ebx+edx*4]
		shl	eax, 5
		push	ebp
		lea	edx, [esp+eax+254h+var_1F4]
		push	edx
		lea	eax, [esp+eax+258h+var_204]
		push	eax
		lea	edx, [esp+25Ch+var_218]
		push	edx
		push	ecx
		push	ebp
		call	sub_100312D0
		mov	esi, eax
		add	esp, 24h
		test	esi, esi
		js	short loc_10031D3A
		mov	eax, [esp+244h+var_224]
		sub	[esp+244h+var_230], 2
		dec	eax
		mov	[esp+244h+var_224], eax
		test	eax, eax
		jns	loc_10031BC0

loc_10031CEE:				; CODE XREF: sub_100316E0+4CBj
		mov	ebp, [esp+244h+var_228]
		mov	ebx, [esp+244h+var_21C]
		push	edi
		push	ebp
		push	ebx
		lea	eax, [esp+250h+var_218]
		push	eax
		push	ebp
		push	ebx
		call	sub_10031130
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		js	short loc_10031D3A
		mov	ecx, [edi+4]
		cmp	dword ptr [ecx+48h], 0
		jz	short loc_10031D3A
		mov	eax, ecx
		mov	edx, [eax+48h]
		push	eax
		push	ebx
		push	ebx
		call	edx
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10031D3A
		mov	edi, [edi+4]
		mov	eax, [edi+48h]
		push	edi
		push	ebp
		push	ebp
		call	eax
		add	esp, 0Ch
		mov	esi, eax

loc_10031D3A:				; CODE XREF: sub_100316E0+106j
					; sub_100316E0+119j ...
		lea	ecx, [esp+244h+var_218]
		push	ecx
		call	sub_10028EF0
		add	esp, 4
		lea	edi, [esp+244h+var_1F4]
		mov	ebp, 4

loc_10031D50:				; CODE XREF: sub_100316E0+68Ej
		mov	ebx, 4

loc_10031D55:				; CODE XREF: sub_100316E0+68Bj
		lea	edx, [edi-10h]
		push	edx
		call	sub_10028EF0
		push	edi
		call	sub_10028EF0
		add	esp, 8
		add	edi, 20h
		dec	ebx
		jnz	short loc_10031D55
		dec	ebp
		jnz	short loc_10031D50
		mov	eax, esi
		jmp	short loc_10031D8A
; ---------------------------------------------------------------------------

loc_10031D74:				; CODE XREF: sub_100316E0+C9j
					; sub_100316E0+D1j ...
		mov	edx, [esp+244h+var_228]
		push	edx
		mov	edx, [esp+248h+var_21C]
		push	edx
		push	ecx
		push	ecx
		push	eax

loc_10031D81:				; CODE XREF: sub_100316E0+C2j
		push	edi
		call	sub_1002E620
		add	esp, 18h

loc_10031D8A:				; CODE XREF: sub_100316E0+9Cj
					; sub_100316E0+692j
		mov	ecx, [esp+244h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 234h
		retn
sub_100316E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10031DB0	proc near		; CODE XREF: .text:10031E60p
					; DATA XREF: sub_10031F70+2Bo

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	ebx
		mov	ebx, [esp+14h+arg_8]
		push	ebp
		mov	ebp, [esp+18h+arg_4]
		push	edi
		mov	edi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_4], 0
		cmp	edi, ebx
		jz	short loc_10031DEC
		cmp	ebp, ebx
		jz	short loc_10031DEC
		mov	eax, [esp+1Ch+arg_C]
		mov	ecx, [eax+4Ch]
		push	ecx
		push	ebx
		push	ebp
		push	edi
		call	sub_10026A60
		add	esp, 10h
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10031DEC:				; CODE XREF: sub_10031DB0+1Cj
					; sub_10031DB0+20j
		lea	edx, [esp+1Ch+var_10]
		push	esi
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_10031E3E
		mov	eax, [esp+20h+arg_C]
		mov	ecx, [eax+4Ch]
		push	ecx
		lea	edx, [esp+24h+var_10]
		push	edx
		push	ebp
		push	edi
		call	sub_10026A60
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		js	short loc_10031E3E
		lea	eax, [esp+20h+var_10]
		push	ebx
		push	eax
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	short loc_10031E3E
		lea	ecx, [esp+20h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 4

loc_10031E3E:				; CODE XREF: sub_10031DB0+4Ej
					; sub_10031DB0+6Bj ...
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_10031DB0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10031E50:				; DATA XREF: sub_10031F70+32o
		mov	eax, [esp+0Ch]
		mov	ecx, [esp+8]
		push	eax
		mov	eax, [esp+8]
		push	ecx
		push	eax
		push	eax
		call	sub_10031DB0
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10031E70	proc near		; CODE XREF: .text:10031F5Dp
					; DATA XREF: sub_10031F70+40o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_8]
		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [eax+4Ch]
		push	esi
		push	ecx
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_10031EAB
		mov	edx, [edi+8]
		push	edx
		push	esi
		call	sub_10029230
		add	esp, 8
		test	eax, eax
		js	short loc_10031EAB
		push	esi
		push	edi
		push	esi
		call	sub_1002C150
		add	esp, 0Ch

loc_10031EAB:				; CODE XREF: sub_10031E70+1Dj
					; sub_10031E70+2Ej
		pop	edi
		pop	esi
		retn
sub_10031E70	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10031EB0:				; DATA XREF: sub_10031F70+47o
		mov	eax, [esp+4]
		push	esi
		mov	esi, [esp+0Ch]
		cmp	eax, esi
		jz	short loc_10031ECB
		push	esi
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_10031EDC

loc_10031ECB:				; CODE XREF: .text:10031EBBj
		mov	eax, [esp+10h]
		mov	ecx, [eax+4Ch]
		push	ecx
		push	esi
		call	sub_100269C0
		add	esp, 8

loc_10031EDC:				; CODE XREF: .text:10031EC9j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10031EE0:				; DATA XREF: sub_10031F70+58o
		push	esi
		mov	esi, [esp+8]
		mov	eax, [esi+4Ch]
		test	eax, eax
		jz	short loc_10031EFD
		push	eax
		call	ds:free
		add	esp, 4
		mov	dword ptr [esi+4Ch], 0

loc_10031EFD:				; CODE XREF: .text:10031EEAj
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10031F00:				; DATA XREF: sub_10031F70+39o
		mov	eax, [esp+8]
		push	ebx
		mov	ebx, [esp+14h]
		push	ebp
		mov	ebp, [esp+0Ch]
		push	esi
		mov	esi, [esp+18h]
		push	ebx
		push	esi
		push	eax
		push	ebp
		call	sub_100301D0
		add	esp, 10h
		test	eax, eax
		js	short loc_10031F65
		push	edi
		mov	edi, [ebx+4Ch]
		push	esi
		push	esi
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	short loc_10031F51
		mov	ecx, [edi+8]
		push	ecx
		push	esi
		call	sub_10029230
		add	esp, 8
		test	eax, eax
		js	short loc_10031F51
		push	esi
		push	edi
		push	esi
		call	sub_1002C150
		add	esp, 0Ch

loc_10031F51:				; CODE XREF: .text:10031F33j
					; .text:10031F44j
		pop	edi
		test	eax, eax
		js	short loc_10031F65
		test	ebp, ebp
		jnz	short loc_10031F65
		push	ebx
		push	esi
		push	esi
		call	sub_10031E70
		add	esp, 0Ch

loc_10031F65:				; CODE XREF: .text:10031F21j
					; .text:10031F54j ...
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10031F70	proc near		; CODE XREF: sub_1002E050+15p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		push	eax
		call	sub_100302D0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_10031F86
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10031F86:				; CODE XREF: sub_10031F70+12j
		push	edi
		push	14h		; Size
		call	ds:malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_10031FFB
		mov	ecx, [esi+4]
		mov	dword ptr [esi+38h], offset sub_10031DB0
		mov	dword ptr [esi+3Ch], offset loc_10031E50
		mov	dword ptr [esi+40h], offset loc_10031F00
		mov	dword ptr [esi+44h], offset sub_10031E70
		mov	dword ptr [esi+48h], offset loc_10031EB0
		mov	[esi+4Ch], edi
		mov	dword ptr [esi+50h], 0
		mov	dword ptr [esi+54h], offset loc_10031EE0
		mov	[edi], ecx
		mov	edx, [esi+8]
		mov	[edi+4], edx
		mov	eax, [esi+0Ch]
		mov	[edi+8], eax
		mov	ecx, [esi+10h]
		mov	[edi+0Ch], ecx
		mov	edx, [esi+10h]
		mov	eax, [edx]
		push	eax
		call	sub_100290C0
		add	esp, 4
		neg	eax
		mov	[edi+10h], eax
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10031FFB:				; CODE XREF: sub_10031F70+26j
		push	esi		; Memory
		call	sub_1002EF50
		add	esp, 4
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10031F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032010	proc near		; CODE XREF: sub_100326B0+2EAp

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		sub	esp, 10h
		push	ebx
		push	ebp
		push	esi
		dec	eax
		xor	esi, esi
		mov	ebx, 1
		cmp	eax, esi
		jle	short loc_1003202B

loc_10032026:				; CODE XREF: sub_10032010+19j
		add	ebx, ebx
		dec	eax
		jnz	short loc_10032026

loc_1003202B:				; CODE XREF: sub_10032010+14j
		mov	eax, [esp+1Ch+arg_8]
		push	eax
		lea	ecx, [esp+20h+var_10]
		push	ecx
		mov	[esp+24h+var_4], esi
		call	sub_10028D90
		mov	ebp, eax
		add	esp, 8
		cmp	ebp, esi
		jl	loc_100320FD
		lea	edx, [esp+1Ch+var_10]
		push	edi
		push	edx
		call	sub_10028FB0
		mov	edi, [esp+24h+arg_0]
		add	esp, 4
		test	eax, eax
		jle	loc_100320E3

loc_10032065:				; CODE XREF: sub_10032010+D1j
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_10028FE0
		add	esp, 4
		test	eax, eax
		jz	short loc_100320C0
		mov	ecx, [esp+20h+var_4]
		mov	al, [ecx]
		lea	ecx, [ebx+ebx-1]
		and	al, cl
		movsx	edx, al
		mov	[esi+edi], al
		cmp	edx, ebx
		jl	short loc_10032095
		mov	cl, bl
		add	cl, cl
		sub	al, cl
		mov	[esi+edi], al

loc_10032095:				; CODE XREF: sub_10032010+7Aj
		mov	al, [esi+edi]
		lea	edx, [esp+20h+var_10]
		test	al, al
		mov	ecx, edx
		push	edx
		movsx	eax, al
		js	short loc_100320B2
		push	eax
		push	ecx
		call	sub_1002B460
		add	esp, 0Ch
		jmp	short loc_100320C4
; ---------------------------------------------------------------------------

loc_100320B2:				; CODE XREF: sub_10032010+94j
		neg	eax
		push	eax
		push	ecx
		call	sub_1002B360
		add	esp, 0Ch
		jmp	short loc_100320C4
; ---------------------------------------------------------------------------

loc_100320C0:				; CODE XREF: sub_10032010+64j
		mov	byte ptr [esi+edi], 0

loc_100320C4:				; CODE XREF: sub_10032010+A0j
					; sub_10032010+AEj
		lea	edx, [esp+20h+var_10]
		push	edx
		mov	eax, edx
		push	eax
		call	sub_1002B6B0
		lea	ecx, [esp+28h+var_10]
		push	ecx
		inc	esi
		call	sub_10028FB0
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_10032065

loc_100320E3:				; CODE XREF: sub_10032010+4Fj
		mov	eax, [esp+20h+arg_4]
		inc	eax
		cmp	esi, eax
		jge	short loc_100320FC
		sub	eax, esi
		push	eax		; Size
		add	edi, esi
		push	0		; Val
		push	edi		; Dst
		call	memset
		add	esp, 0Ch

loc_100320FC:				; CODE XREF: sub_10032010+DAj
		pop	edi

loc_100320FD:				; CODE XREF: sub_10032010+35j
		lea	edx, [esp+1Ch+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_10032010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032120	proc near		; CODE XREF: sub_100326B0+314p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		mov	ecx, [esp+arg_8]
		mov	edx, [esp+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	edi
		mov	edi, [esp+0Ch+arg_20]
		push	ecx
		lea	eax, [edi+20h]
		push	ebp
		push	edx
		mov	[esp+18h+arg_20], eax
		lea	ebx, [edi+30h]
		call	sub_10030BA0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10032167
		mov	eax, [esp+0Ch+arg_18]
		mov	ecx, [esp+0Ch+arg_14]
		mov	edx, [esp+0Ch+arg_10]
		push	eax
		push	ecx
		push	edx
		call	sub_10030BB0
		add	esp, 0Ch
		pop	edi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10032167:				; CODE XREF: sub_10032120+2Aj
		mov	ecx, [esp+0Ch+arg_0]
		push	esi
		mov	esi, [esp+10h+arg_24]
		mov	eax, [esi+4]
		mov	edx, [eax+3Ch]
		push	eax
		push	edi
		push	ecx
		call	edx
		add	esp, 0Ch
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		mov	ecx, [esp+10h+arg_20]
		mov	edx, [eax+28h]
		push	eax
		push	ecx
		push	edi
		push	edi
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		mov	ecx, [esp+10h+arg_20]
		mov	edx, [eax+28h]
		push	eax
		push	edi
		push	ecx
		push	edi
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		mov	ecx, [esp+10h+arg_20]
		mov	edx, [esp+10h+arg_C]
		push	eax
		mov	eax, [eax+28h]
		push	ecx
		push	edx
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		mov	ecx, [esp+10h+arg_8]
		mov	edx, [eax+38h]
		push	eax
		push	ebx
		push	ecx
		push	ebp
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		mov	ecx, [esp+10h+arg_18]
		mov	edx, [eax+28h]
		push	eax
		push	ecx
		push	ebx
		push	ebx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		push	eax
		mov	eax, [eax+3Ch]
		push	edi
		push	ebp
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		mov	ecx, [eax+28h]
		push	eax
		push	edi
		push	edi
		push	edi
		call	ecx
		add	esp, 10h
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		mov	edx, [eax+3Ch]
		push	eax
		lea	ebp, [edi+10h]
		push	ebp
		push	edi
		call	edx
		add	esp, 0Ch
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		push	eax
		mov	eax, [eax+28h]
		push	ebp
		push	ebp
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		mov	ecx, [esp+10h+arg_0]
		mov	edx, [eax+38h]
		push	eax
		push	ebx
		push	edi
		push	ecx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		push	eax
		mov	eax, [eax+28h]
		push	ebx
		push	ebx
		push	ebx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		mov	edi, [esp+10h+arg_10]
		mov	ecx, [esp+10h+arg_20]
		mov	edx, [eax+3Ch]
		push	eax
		push	edi
		push	ecx
		call	edx
		add	esp, 0Ch
		test	eax, eax
		js	loc_1003234F
		mov	eax, [esi+4]
		push	eax
		mov	eax, [eax+30h]
		push	edi
		push	ebx
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_1003234F
		mov	eax, [esi+4]
		mov	ecx, [eax+30h]
		push	eax
		push	edi
		push	ebx
		push	edi
		call	ecx
		add	esp, 10h
		test	eax, eax
		js	short loc_1003234F
		mov	eax, [esi+4]
		mov	edx, [eax+30h]
		push	eax
		push	ebx
		push	edi
		push	ebx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	short loc_1003234F
		mov	eax, [esi+4]
		mov	edi, [esp+10h+arg_14]
		mov	ecx, [esp+10h+arg_20]
		mov	edx, [eax+38h]
		push	eax
		push	edi
		push	ecx
		push	ebx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	short loc_1003234F
		mov	eax, [esi+4]
		push	eax
		mov	eax, [eax+30h]
		push	edi
		push	ebp
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_1003234F
		mov	eax, [esi+4]
		mov	edi, [esp+10h+arg_1C]
		mov	ecx, [esp+10h+arg_C]
		mov	edx, [eax+38h]
		push	eax
		push	edi
		push	ebp
		push	ecx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	short loc_1003234F
		mov	esi, [esi+4]
		mov	eax, [esi+28h]
		push	esi
		push	edi
		push	edi
		push	edi
		call	eax
		add	esp, 10h

loc_1003234F:				; CODE XREF: sub_10032120+60j
					; sub_10032120+7Bj ...
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn
sub_10032120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10032360	proc near		; CODE XREF: sub_100326B0+363p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h

		push	ecx
		mov	edx, [esp+4+arg_8]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	edi
		mov	edi, [esp+14h+arg_28]
		lea	eax, [edi+30h]
		mov	[esp+14h+var_4], eax
		mov	eax, [esp+14h+arg_4]
		push	edx
		push	eax
		lea	ecx, [edi+50h]
		push	esi
		lea	ebx, [edi+10h]
		lea	ebp, [edi+20h]
		mov	[esp+20h+arg_28], ecx
		call	sub_10030BA0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1003240E
		mov	edi, [esp+14h+arg_2C]
		mov	ebx, [esp+14h+arg_20]
		mov	ecx, [esp+14h+arg_1C]
		mov	edx, [esp+14h+arg_18]
		mov	eax, [esp+14h+arg_14]
		push	edi
		push	ebx
		push	ecx
		mov	ecx, [esp+20h+arg_10]
		push	edx
		push	eax
		push	ecx
		call	sub_100310B0
		add	esp, 18h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [edi+4]
		mov	esi, [esp+14h+arg_24]
		mov	edx, [eax+3Ch]
		push	eax
		push	esi
		push	ebx
		call	edx
		add	esp, 0Ch
		test	eax, eax
		js	loc_100326A6
		mov	eax, [edi+4]
		push	eax
		mov	eax, [eax+3Ch]
		push	esi
		push	esi
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_100326A6
		mov	eax, [edi+4]
		mov	ecx, [eax+38h]
		push	eax
		push	esi
		add	edi, 0Ch
		push	edi
		push	esi
		call	ecx
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1003240E:				; CODE XREF: sub_10032360+36j
		mov	edx, [esp+14h+arg_14]
		mov	eax, [esp+14h+arg_10]
		push	edx
		push	eax
		call	sub_10030400
		add	esp, 8
		test	eax, eax
		jnz	short loc_10032486
		mov	ecx, [esp+14h+arg_18]
		push	ecx
		push	esi
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	loc_100326A6
		mov	edx, [esp+14h+arg_1C]
		mov	eax, [esp+14h+arg_4]
		push	edx
		push	eax
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	loc_100326A6
		mov	ecx, [esp+14h+arg_20]
		mov	edx, [esp+14h+arg_8]
		push	ecx
		push	edx
		call	sub_10028E00
		add	esp, 8
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esp+14h+arg_24]
		mov	ecx, [esp+14h+arg_C]
		push	eax
		push	ecx
		call	sub_10028E00
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10032486:				; CODE XREF: sub_10032360+C2j
		mov	esi, [esp+14h+arg_2C]
		mov	eax, [esi+4]
		mov	edx, [esp+14h+arg_8]
		push	eax
		mov	eax, [eax+3Ch]
		push	edi
		push	edx
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+arg_8]
		mov	edx, [eax+38h]
		push	eax
		push	ebx
		push	ecx
		push	edi
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+arg_10]
		mov	edx, [eax+38h]
		push	eax
		push	edi
		push	ecx
		push	edi
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+arg_14]
		mov	edx, [eax+38h]
		push	eax
		push	ebx
		push	ecx
		push	ebx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+arg_0]
		mov	edx, [eax+30h]
		push	eax
		push	ebp
		push	ecx
		push	edi
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+var_4]
		mov	edx, [esp+14h+arg_4]
		push	eax
		mov	eax, [eax+30h]
		push	ecx
		push	edx
		push	ebx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [eax+3Ch]
		push	eax
		lea	ebx, [edi+40h]
		push	ebx
		push	ebp
		call	ecx
		add	esp, 0Ch
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	edx, [esp+14h+arg_28]
		push	eax
		mov	eax, [eax+38h]
		push	edx
		push	ebx
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+arg_20]
		mov	edx, [esp+14h+arg_8]
		push	eax
		mov	eax, [eax+38h]
		push	ecx
		push	ebp
		push	edx
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+arg_0]
		mov	edx, [eax+38h]
		push	eax
		push	ebp
		push	ebx
		push	ecx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+var_4]
		mov	edx, [eax+3Ch]
		push	eax
		push	edi
		push	ecx
		call	edx
		add	esp, 0Ch
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ebx, [esp+14h+arg_18]
		push	eax
		mov	eax, [eax+28h]
		push	ebx
		push	ebp
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+arg_28]
		mov	edx, [eax+28h]
		push	eax
		push	ebx
		push	ebx
		push	ecx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		push	eax
		mov	eax, [eax+30h]
		push	ebx
		push	ebx
		push	edi
		call	eax
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+arg_28]
		mov	edx, [eax+38h]
		push	eax
		push	ecx
		push	ecx
		mov	ecx, [esp+20h+arg_4]
		push	ecx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	loc_100326A6
		mov	eax, [esi+4]
		mov	edi, [esp+14h+arg_1C]
		push	eax
		mov	eax, [eax+30h]
		push	edi
		push	ebx
		push	ebp
		call	eax
		add	esp, 10h
		test	eax, eax
		js	short loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+var_4]
		mov	edx, [eax+38h]
		push	eax
		push	edi
		push	edi
		push	ecx
		call	edx
		add	esp, 10h
		test	eax, eax
		js	short loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [esp+14h+arg_28]
		mov	edx, [eax+30h]
		push	eax
		push	edi
		push	ecx
		push	edi
		call	edx
		add	esp, 10h
		test	eax, eax
		js	short loc_100326A6
		mov	eax, [esi+4]
		mov	edi, [esp+14h+arg_24]
		mov	ecx, [esp+14h+arg_20]
		mov	edx, [eax+3Ch]
		push	eax
		push	edi
		push	ecx
		call	edx
		add	esp, 0Ch
		test	eax, eax
		js	short loc_100326A6
		mov	eax, [esi+4]
		push	eax
		mov	eax, [eax+3Ch]
		push	edi
		push	edi
		call	eax
		add	esp, 0Ch
		test	eax, eax
		js	short loc_100326A6
		mov	eax, [esi+4]
		mov	ecx, [eax+38h]
		push	eax
		push	edi
		add	esi, 0Ch
		push	esi
		push	edi
		call	ecx
		add	esp, 10h

loc_100326A6:				; CODE XREF: sub_10032360+60j
					; sub_10032360+7Aj ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10032360	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100326B0	proc near		; DATA XREF: sub_1002DF70+B1o
					; sub_1002E050+BEo

var_2C0		= dword	ptr -2C0h
Memory		= dword	ptr -2BCh
var_2B8		= byte ptr -2B8h
var_2AC		= dword	ptr -2ACh
var_2A8		= dword	ptr -2A8h
var_2A4		= dword	ptr -2A4h
var_2A0		= dword	ptr -2A0h
var_29C		= dword	ptr -29Ch
var_298		= dword	ptr -298h
var_294		= byte ptr -294h
var_288		= dword	ptr -288h
var_284		= byte ptr -284h
var_278		= dword	ptr -278h
var_274		= byte ptr -274h
var_268		= dword	ptr -268h
var_264		= byte ptr -264h
var_258		= dword	ptr -258h
var_248		= dword	ptr -248h
var_238		= dword	ptr -238h
var_228		= dword	ptr -228h
var_218		= dword	ptr -218h
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_1F4		= byte ptr -1F4h
var_1E8		= byte ptr -1E8h
var_104		= byte ptr -104h
var_F4		= byte ptr -0F4h
var_E4		= byte ptr -0E4h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 2C0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+2C0h+var_4], eax
		mov	eax, [esp+2C0h+arg_C]
		mov	ecx, [esp+2C0h+arg_10]
		mov	edx, [esp+2C0h+arg_14]
		push	ebx
		push	ebp
		mov	ebp, [esp+2C8h+arg_8]
		push	esi
		mov	esi, [esp+2CCh+arg_0]
		xor	ebx, ebx
		push	edi
		mov	edi, [esp+2D0h+arg_4]
		mov	[esp+2D0h+var_2A4], eax
		mov	[esp+2D0h+var_29C], ecx
		mov	[esp+2D0h+var_2A8], esi
		mov	[esp+2D0h+var_2A0], edi
		mov	[esp+2D0h+var_298], ebp
		mov	[esp+2D0h+var_2C0], edx
		mov	[esp+2D0h+Memory], ebx
		mov	[esp+2D0h+var_2AC], ebx
		mov	[esp+2D0h+var_288], ebx
		mov	[esp+2D0h+var_268], ebx
		mov	[esp+2D0h+var_278], ebx
		lea	eax, [esp+2D0h+var_1E8]
		mov	ecx, 10h
		lea	esp, [esp+0]

loc_10032730:				; CODE XREF: sub_100326B0+89j
		mov	[eax-10h], ebx
		mov	[eax], ebx
		add	eax, 20h
		dec	ecx
		jnz	short loc_10032730
		mov	[esp+2D0h+var_258], ebx
		mov	[esp+2D0h+var_248], ebx
		mov	[esp+2D0h+var_238], ebx
		mov	[esp+2D0h+var_228], ebx
		mov	[esp+2D0h+var_218], ebx
		mov	[esp+2D0h+var_208], ebx
		cmp	edx, ebx
		jz	loc_10032AB2
		cmp	esi, ebx
		jz	loc_10032AB2
		cmp	edi, ebx
		jz	loc_10032AB2
		cmp	ebp, ebx
		jz	loc_10032AB2
		lea	edx, [esp+2D0h+var_274]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10032A36
		lea	eax, [esp+2D0h+var_284]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10032A36
		lea	ecx, [esp+2D0h+var_2B8]
		push	ecx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10032A36
		lea	edx, [esp+2D0h+var_294]
		push	edx
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10032A36
		xor	ebp, ebp
		lea	edi, [esp+2D0h+var_1F4]

loc_100327E7:				; CODE XREF: sub_100326B0+167j
		lea	eax, [edi-10h]
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10032A36
		push	edi
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10032A36
		inc	ebp
		add	edi, 20h
		cmp	ebp, 10h
		jl	short loc_100327E7
		xor	edi, edi
		lea	ebp, [esp+2D0h+var_264]
		nop

loc_10032820:				; CODE XREF: sub_100326B0+18Aj
		push	ebp
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		cmp	esi, ebx
		jl	loc_10032A36
		inc	edi
		add	ebp, 10h
		cmp	edi, 6
		jl	short loc_10032820
		mov	edx, [esp+2D0h+var_2A0]
		lea	ecx, [esp+2D0h+var_104]
		push	ecx
		push	edx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_10032A36
		mov	ecx, [esp+2D0h+var_298]
		lea	eax, [esp+2D0h+var_F4]
		push	eax
		push	ecx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		cmp	esi, ebx
		jl	loc_10032A36
		mov	eax, [esp+2D0h+var_2C0]
		push	eax
		lea	edx, [esp+2D4h+var_284]
		push	edx
		lea	ecx, [esp+2D8h+var_274]
		push	ecx
		lea	edx, [esp+2DCh+var_F4]
		push	edx
		mov	edx, [eax+68h]
		lea	ecx, [esp+2E0h+var_104]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 14h
		cmp	esi, ebx
		jl	loc_10032A36
		mov	ebp, 8
		lea	edi, [esp+2D0h+var_E4]

loc_100328B7:				; CODE XREF: sub_100326B0+23Cj
		mov	eax, [esp+2D0h+var_2C0]
		push	eax
		lea	ecx, [edi+10h]
		push	ecx
		push	edi
		lea	edx, [esp+2DCh+var_284]
		push	edx
		lea	ecx, [esp+2E0h+var_274]
		push	ecx
		lea	edx, [edi-10h]
		push	edx
		mov	edx, [eax+60h]
		lea	ecx, [edi-20h]
		push	ecx
		call	edx
		mov	esi, eax
		add	esp, 1Ch
		cmp	esi, ebx
		jl	loc_10032A36
		inc	ebp
		add	edi, 20h
		cmp	ebp, 0Fh
		jl	short loc_100328B7
		lea	edi, [esp+2D0h+var_1F4]
		lea	ebp, [esp+2D0h+var_14]
		lea	esp, [esp+0]

loc_10032900:				; CODE XREF: sub_100326B0+290j
		lea	eax, [edi-10h]
		push	eax
		lea	ecx, [ebp-10h]
		push	ecx
		call	sub_10028E00
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		js	loc_10032A36
		mov	edx, [esp+2D0h+var_2C0]
		mov	eax, [edx+4]
		push	eax
		mov	eax, [eax+2Ch]
		push	edi
		push	ebp
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10032A36
		inc	ebx
		add	edi, 20h
		sub	ebp, 20h
		cmp	ebx, 8
		jl	short loc_10032900
		mov	ebx, [esp+2D0h+var_29C]
		mov	edi, [esp+2D0h+var_2A4]
		lea	ecx, [esp+2D0h+var_2B8]
		push	ecx
		push	ebx
		push	edi
		call	sub_10030BB0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10032A36
		mov	edx, [esp+2D0h+var_2C0]
		add	edx, 4Ch
		push	edx
		call	sub_10028CE0
		mov	esi, eax
		lea	eax, [esi+1]
		push	eax		; Size
		call	ds:malloc
		mov	ebp, eax
		add	esp, 8
		mov	[esp+2D0h+Memory], ebp
		test	ebp, ebp
		jnz	short loc_10032991
		lea	esi, [eax-2]
		jmp	loc_10032A36
; ---------------------------------------------------------------------------

loc_10032991:				; CODE XREF: sub_100326B0+2D7j
		mov	ecx, [esp+2D0h+var_2A8]
		push	5
		push	ecx
		push	esi
		push	ebp
		call	sub_10032010
		add	esp, 10h
		test	esi, esi
		js	short loc_10032A1E

loc_100329A6:				; CODE XREF: sub_100326B0+36Cj
		mov	edx, [esp+2D0h+var_2C0]
		push	edx
		lea	eax, [esp+2D4h+var_264]
		push	eax
		lea	ecx, [esp+2D8h+var_294]
		push	ecx
		lea	edx, [esp+2DCh+var_2B8]
		push	edx
		push	ebx
		push	edi
		mov	eax, ecx
		push	eax
		mov	ecx, edx
		push	ecx
		push	ebx
		push	edi
		call	sub_10032120
		add	esp, 28h
		cmp	byte ptr [esi+ebp], 0
		jz	short loc_10032A1B
		movsx	eax, byte ptr [esi+ebp]
		add	eax, 0Fh
		cdq
		sub	eax, edx
		mov	edx, [esp+2D0h+var_2C0]
		push	edx
		lea	ecx, [esp+2D4h+var_264]
		push	ecx
		lea	edx, [esp+2D8h+var_294]
		push	edx
		lea	ecx, [esp+2DCh+var_2B8]
		push	ecx
		push	ebx
		sar	eax, 1
		push	edi
		shl	eax, 5
		lea	edx, [esp+eax+2E8h+var_1F4]
		push	edx
		lea	eax, [esp+eax+2ECh+var_204]
		push	eax
		lea	ecx, [esp+2F0h+var_294]
		push	ecx
		lea	edx, [esp+2F4h+var_2B8]
		push	edx
		push	ebx
		push	edi
		call	sub_10032360
		add	esp, 30h

loc_10032A1B:				; CODE XREF: sub_100326B0+320j
		dec	esi
		jns	short loc_100329A6

loc_10032A1E:				; CODE XREF: sub_100326B0+2F4j
		mov	eax, [esp+2D0h+var_2C0]
		push	eax
		push	ebx
		push	edi
		lea	ecx, [esp+2DCh+var_2B8]
		push	ecx
		push	ebx
		push	edi
		call	sub_10031130
		add	esp, 18h
		mov	esi, eax

loc_10032A36:				; CODE XREF: sub_100326B0+E3j
					; sub_100326B0+FAj ...
		lea	edi, [esp+2D0h+var_264]
		mov	ebx, 6
		nop

loc_10032A40:				; CODE XREF: sub_100326B0+39Dj
		push	edi
		call	sub_10028EF0
		add	esp, 4
		add	edi, 10h
		dec	ebx
		jnz	short loc_10032A40
		lea	edi, [esp+2D0h+var_1F4]
		mov	ebx, 10h
		jmp	short loc_10032A60
; ---------------------------------------------------------------------------
		align 10h

loc_10032A60:				; CODE XREF: sub_100326B0+3ABj
					; sub_100326B0+3C6j
		lea	edx, [edi-10h]
		push	edx
		call	sub_10028EF0
		push	edi
		call	sub_10028EF0
		add	esp, 8
		add	edi, 20h
		dec	ebx
		jnz	short loc_10032A60
		lea	eax, [esp+2D0h+var_274]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+2D4h+var_284]
		push	ecx
		call	sub_10028EF0
		lea	edx, [esp+2D8h+var_2B8]
		push	edx
		call	sub_10028EF0
		lea	eax, [esp+2DCh+var_294]
		push	eax
		call	sub_10028EF0
		mov	ecx, [esp+2E0h+Memory]
		push	ecx		; Memory
		call	ds:free
		add	esp, 14h
		mov	eax, esi
		jmp	short loc_10032AB7
; ---------------------------------------------------------------------------

loc_10032AB2:				; CODE XREF: sub_100326B0+B4j
					; sub_100326B0+BCj ...
		mov	eax, 0FFFFFFFCh

loc_10032AB7:				; CODE XREF: sub_100326B0+400j
		mov	ecx, [esp+2D0h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 2C0h
		retn
sub_100326B0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10032AD0	proc near		; CODE XREF: .text:1003358Ep
					; .text:100335C3p
					; DATA XREF: ...

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 44h
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+50h+arg_0]
		mov	eax, [esi+8]
		push	edi
		xor	edi, edi
		push	esi
		mov	[esp+58h+var_10], edi
		mov	[esp+58h+var_34], eax
		call	sub_10028CE0
		xor	edx, edx
		xor	ebx, ebx
		xor	ebp, ebp
		add	esp, 4
		mov	[esp+54h+var_14], edi
		mov	[esp+54h+var_20], edi
		mov	[esp+54h+var_1C], edi
		mov	[esp+54h+var_18], edx
		mov	[esp+54h+var_24], edi
		mov	[esp+54h+var_2C], ebx
		mov	[esp+54h+var_28], ebp
		mov	[esp+54h+var_30], edi
		cmp	eax, 100h
		jge	short loc_10032B42
		mov	eax, [esp+54h+arg_4]
		cmp	esi, eax
		jnz	short loc_10032B30
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10032B30:				; CODE XREF: sub_10032AD0+54j
		push	eax
		push	esi
		call	sub_10028E00
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10032B42:				; CODE XREF: sub_10032AD0+4Cj
		cmp	eax, 200h
		jle	short loc_10032B67
		mov	ecx, [esp+54h+arg_4]
		mov	edx, [esp+54h+arg_8]
		push	ecx
		add	edx, 4
		push	edx
		push	esi
		call	sub_1002C150
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
; ---------------------------------------------------------------------------

loc_10032B67:				; CODE XREF: sub_10032AD0+77j
		mov	eax, [esp+54h+var_34]
		add	eax, 0FFFFFFF7h	; switch 8 cases
		cmp	eax, 7
		ja	short loc_10032BCA ; jumptable 10032B73	default	case
		jmp	ds:off_10033550[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10032B7A:				; CODE XREF: sub_10032AD0+A3j
					; DATA XREF: .text:off_10033550o
		mov	eax, [esi+0Ch]	; jumptable 10032B73 case 16
		mov	ecx, [eax+3Ch]
		mov	[esp+54h+var_30], ecx

loc_10032B84:				; CODE XREF: sub_10032AD0+A3j
					; DATA XREF: .text:off_10033550o
		mov	edx, [esi+0Ch]	; jumptable 10032B73 case 15
		mov	ebp, [edx+38h]
		mov	[esp+54h+var_28], ebp

loc_10032B8E:				; CODE XREF: sub_10032AD0+A3j
					; DATA XREF: .text:off_10033550o
		mov	eax, [esi+0Ch]	; jumptable 10032B73 case 14
		mov	ebx, [eax+34h]
		mov	[esp+54h+var_2C], ebx

loc_10032B98:				; CODE XREF: sub_10032AD0+A3j
					; DATA XREF: .text:off_10033550o
		mov	ecx, [esi+0Ch]	; jumptable 10032B73 case 13
		mov	edi, [ecx+30h]
		mov	[esp+54h+var_24], edi

loc_10032BA2:				; CODE XREF: sub_10032AD0+A3j
					; DATA XREF: .text:off_10033550o
		mov	edx, [esi+0Ch]	; jumptable 10032B73 case 12
		mov	edx, [edx+2Ch]
		mov	[esp+54h+var_18], edx

loc_10032BAC:				; CODE XREF: sub_10032AD0+A3j
					; DATA XREF: .text:off_10033550o
		mov	eax, [esi+0Ch]	; jumptable 10032B73 case 11
		mov	ecx, [eax+28h]
		mov	[esp+54h+var_1C], ecx

loc_10032BB6:				; CODE XREF: sub_10032AD0+A3j
					; DATA XREF: .text:off_10033550o
		mov	eax, [esi+0Ch]	; jumptable 10032B73 case 10
		mov	ecx, [eax+24h]
		mov	[esp+54h+var_20], ecx

loc_10032BC0:				; CODE XREF: sub_10032AD0+A3j
					; DATA XREF: .text:off_10033550o
		mov	eax, [esi+0Ch]	; jumptable 10032B73 case 9
		mov	ecx, [eax+20h]
		mov	[esp+54h+var_14], ecx

loc_10032BCA:				; CODE XREF: sub_10032AD0+A1j
		mov	ecx, [esi+0Ch]	; jumptable 10032B73 default case
		mov	eax, [ecx+0Ch]
		add	edx, eax
		cmp	edx, eax
		sbb	eax, eax
		mov	esi, [ecx+10h]
		neg	eax
		mov	[esp+54h+var_34], edx
		lea	edx, [esi+edi]
		cmp	edx, esi
		sbb	esi, esi
		add	edx, eax
		mov	edi, [ecx+14h]
		neg	esi
		cmp	edx, eax
		sbb	eax, eax
		neg	eax
		add	eax, esi
		lea	esi, [edi+ebx]
		mov	ebx, [ecx+18h]
		cmp	esi, edi
		sbb	edi, edi
		add	esi, eax
		neg	edi
		cmp	esi, eax
		sbb	eax, eax
		neg	eax
		add	eax, edi
		lea	edi, [ebx+ebp]
		mov	ebp, [ecx+1Ch]
		cmp	edi, ebx
		sbb	ebx, ebx
		neg	ebx
		add	edi, eax
		cmp	edi, eax
		sbb	eax, eax
		neg	eax
		add	eax, ebx
		mov	ebx, [esp+54h+var_30]
		add	ebx, ebp
		cmp	ebx, ebp
		sbb	ebp, ebp
		add	ebx, eax
		neg	ebp
		cmp	ebx, eax
		sbb	eax, eax
		neg	eax
		add	eax, ebp
		mov	ebp, [esp+54h+var_34]
		mov	[esp+54h+var_38], ebx
		mov	ebx, [esp+54h+var_18]
		add	ebx, ebp
		cmp	ebx, ebp
		sbb	ebp, ebp
		neg	ebp
		mov	[esp+54h+var_3C], ebx
		mov	ebx, [esp+54h+var_24]
		add	ebx, edx
		cmp	ebx, edx
		sbb	edx, edx
		neg	edx
		add	ebx, ebp
		cmp	ebx, ebp
		mov	ebp, [esp+54h+var_2C]
		mov	[esp+54h+var_34], edx
		sbb	edx, edx
		neg	edx
		add	edx, [esp+54h+var_34]
		add	ebp, esi
		cmp	ebp, esi
		sbb	esi, esi
		add	ebp, edx
		neg	esi
		cmp	ebp, edx
		sbb	edx, edx
		neg	edx
		add	edx, esi
		mov	esi, [esp+54h+var_28]
		add	esi, edi
		cmp	esi, edi
		sbb	edi, edi
		add	esi, edx
		neg	edi
		cmp	esi, edx
		sbb	edx, edx
		neg	edx
		add	edx, edi
		mov	[esp+54h+var_34], edx
		mov	edx, [esp+54h+var_30]
		add	edx, [esp+54h+var_38]
		cmp	edx, [esp+54h+var_38]
		sbb	edi, edi
		neg	edi
		mov	[esp+54h+var_38], edi
		mov	edi, [esp+54h+var_34]
		add	edx, edi
		cmp	edx, edi
		mov	[esp+54h+var_40], edx
		sbb	edx, edx
		neg	edx
		add	edx, [esp+54h+var_38]
		add	eax, edx
		mov	edx, [esp+54h+var_24]
		add	edx, [esp+54h+var_3C]
		cmp	edx, [esp+54h+var_3C]
		mov	[esp+54h+var_44], edx
		sbb	edi, edi
		mov	edx, [esp+54h+var_2C]
		add	edx, ebx
		neg	edi
		cmp	edx, ebx
		sbb	ebx, ebx
		neg	ebx
		mov	[esp+54h+var_34], ebx
		add	edx, edi
		cmp	edx, edi
		sbb	ebx, ebx
		mov	edi, [esp+54h+var_28]
		neg	ebx
		add	ebx, [esp+54h+var_34]
		add	edi, ebp
		cmp	edi, ebp
		sbb	ebp, ebp
		add	edi, ebx
		neg	ebp
		cmp	edi, ebx
		sbb	ebx, ebx
		neg	ebx
		add	ebx, ebp
		mov	ebp, [esp+54h+var_30]
		add	ebp, esi
		cmp	ebp, esi
		sbb	esi, esi
		neg	esi
		add	ebp, ebx
		cmp	ebp, ebx
		sbb	ebx, ebx
		neg	ebx
		add	ebx, esi
		mov	esi, [esp+54h+var_40]
		add	esi, ebx
		cmp	esi, ebx
		mov	ebx, [esp+54h+var_14]
		mov	[esp+54h+var_3C], esi
		sbb	esi, esi
		neg	esi
		add	eax, esi
		mov	esi, [ecx]
		add	ebx, esi
		cmp	ebx, esi
		sbb	esi, esi
		neg	esi
		mov	[esp+54h+var_40], ebx
		mov	ebx, [ecx+4]
		mov	[esp+54h+var_34], esi
		mov	esi, [esp+54h+var_20]
		add	esi, ebx
		cmp	esi, ebx
		sbb	ebx, ebx
		neg	ebx
		mov	[esp+54h+var_38], ebx
		mov	ebx, [esp+54h+var_34]
		mov	ecx, [ecx+8]
		add	esi, ebx
		cmp	esi, ebx
		mov	ebx, [esp+54h+var_1C]
		mov	[esp+54h+var_C], esi
		sbb	esi, esi
		add	ebx, ecx
		neg	esi
		add	esi, [esp+54h+var_38]
		cmp	ebx, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ebx, esi
		cmp	ebx, esi
		sbb	esi, esi
		neg	esi
		add	esi, ecx
		mov	ecx, [esp+54h+var_24]
		mov	[esp+54h+var_34], esi
		mov	esi, [esp+54h+var_44]
		add	ecx, esi
		cmp	ecx, esi
		sbb	esi, esi
		neg	esi
		mov	[esp+54h+var_38], esi
		mov	esi, [esp+54h+var_34]
		add	ecx, esi
		cmp	ecx, esi
		mov	esi, [esp+54h+var_2C]
		mov	[esp+54h+var_44], ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, [esp+54h+var_38]
		add	esi, edx
		cmp	esi, edx
		sbb	edx, edx
		add	esi, ecx
		neg	edx
		cmp	esi, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, edx
		mov	edx, [esp+54h+var_28]
		add	edx, edi
		cmp	edx, edi
		sbb	edi, edi
		add	edx, ecx
		neg	edi
		cmp	edx, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, edi
		mov	edi, [esp+54h+var_30]
		add	edi, ebp
		cmp	edi, ebp
		sbb	ebp, ebp
		add	edi, ecx
		neg	ebp
		cmp	edi, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, ebp
		mov	ebp, [esp+54h+var_3C]
		mov	[esp+54h+var_34], ecx
		mov	ecx, [esp+54h+var_30]
		add	ecx, ebp
		cmp	ecx, ebp
		sbb	ebp, ebp
		neg	ebp
		mov	[esp+54h+var_38], ebp
		mov	ebp, [esp+54h+var_34]
		add	ecx, ebp
		cmp	ecx, ebp
		mov	[esp+54h+var_34], ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, [esp+54h+var_38]
		add	eax, ecx
		mov	ecx, [esp+54h+var_28]
		add	ecx, edi
		mov	[esp+54h+var_8], ecx
		cmp	ecx, edi
		sbb	ecx, ecx
		mov	edi, [esp+54h+var_34]
		neg	ecx
		add	edi, ecx
		cmp	edi, ecx
		sbb	ecx, ecx
		mov	ebp, [esp+54h+var_C]
		neg	ecx
		mov	[esp+54h+var_4], edi
		mov	edi, [esp+54h+var_40]
		add	eax, ecx
		mov	ecx, [esp+54h+var_20]
		add	ecx, edi
		cmp	ecx, edi
		sbb	edi, edi
		neg	edi
		mov	[esp+54h+var_38], ecx
		mov	ecx, [esp+54h+var_1C]
		add	ecx, ebp
		cmp	ecx, ebp
		sbb	ebp, ebp
		add	ecx, edi
		neg	ebp
		cmp	ecx, edi
		sbb	edi, edi
		neg	edi
		add	edi, ebp
		mov	[esp+54h+var_C], ebp
		mov	ebp, [esp+54h+var_18]
		add	ebp, ebx
		cmp	ebp, ebx
		sbb	ebx, ebx
		add	ebp, edi
		neg	ebx
		cmp	ebp, edi
		sbb	edi, edi
		neg	edi
		add	edi, ebx
		mov	ebx, [esp+54h+var_2C]
		mov	[esp+54h+var_3C], ebp
		mov	ebp, [esp+54h+var_44]
		add	ebx, ebp
		cmp	ebx, ebp
		sbb	ebp, ebp
		add	ebx, edi
		neg	ebp
		cmp	ebx, edi
		sbb	edi, edi
		neg	edi
		add	edi, ebp
		mov	ebp, [esp+54h+var_28]
		add	ebp, esi
		cmp	ebp, esi
		mov	[esp+54h+var_34], ebp
		mov	esi, [esp+54h+var_34]
		sbb	ebp, ebp
		add	esi, edi
		neg	ebp
		cmp	esi, edi
		mov	edi, [esp+54h+var_30]
		mov	[esp+54h+var_34], esi
		sbb	esi, esi
		neg	esi
		add	esi, ebp
		lea	ebp, [edx+edi]
		cmp	ebp, edx
		sbb	edi, edi
		add	ebp, esi
		neg	edi
		cmp	ebp, esi
		mov	esi, [esp+54h+var_8]
		sbb	edx, edx
		neg	edx
		add	edx, edi
		mov	edi, [esp+54h+var_2C]
		add	edi, esi
		cmp	edi, esi
		sbb	esi, esi
		neg	esi
		add	edi, edx
		cmp	edi, edx
		sbb	edx, edx
		neg	edx
		add	edx, esi
		mov	esi, [esp+54h+var_4]
		mov	[esp+54h+var_8], edi
		mov	edi, [esp+54h+var_14]
		add	edi, esi
		cmp	edi, esi
		sbb	esi, esi
		add	edi, edx
		neg	esi
		cmp	edi, edx
		sbb	edx, edx
		neg	edx
		add	edx, esi
		mov	esi, [esp+54h+var_38]
		sub	esi, [esp+54h+var_18]
		mov	[esp+54h+var_4], edi
		mov	edi, ecx
		sub	edi, [esp+54h+var_24]
		add	eax, edx
		cmp	ecx, edi
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+54h+var_40], ecx
		cmp	esi, [esp+54h+var_38]
		jbe	short loc_10032F4E
		mov	edx, edi
		dec	edi
		test	edx, edx
		jnz	short loc_10032F4E
		inc	ecx
		mov	[esp+54h+var_40], ecx

loc_10032F4E:				; CODE XREF: sub_10032AD0+470j
					; sub_10032AD0+477j
		mov	edx, [esp+54h+var_3C]
		sub	edx, [esp+54h+var_2C]
		cmp	[esp+54h+var_3C], edx
		mov	[esp+54h+var_38], edx
		sbb	ecx, ecx
		neg	ecx
		cmp	[esp+54h+var_40], 0
		mov	[esp+54h+var_3C], ecx
		jz	short loc_10032F7D
		mov	ecx, edx
		dec	edx
		test	ecx, ecx
		mov	ecx, [esp+54h+var_3C]
		mov	[esp+54h+var_38], edx
		jnz	short loc_10032F7D
		inc	ecx

loc_10032F7D:				; CODE XREF: sub_10032AD0+49Bj
					; sub_10032AD0+4AAj
		mov	[esp+54h+var_44], ebx
		mov	[esp+54h+var_40], 0
		test	ecx, ecx
		jz	short loc_10032FA0
		lea	edx, [ebx-1]
		mov	[esp+54h+var_44], edx
		test	ebx, ebx
		jnz	short loc_10032FA0
		mov	[esp+54h+var_40], 1

loc_10032FA0:				; CODE XREF: sub_10032AD0+4BBj
					; sub_10032AD0+4C6j
		mov	ecx, [esp+54h+var_34]
		xor	edx, edx
		mov	[esp+54h+var_3C], ecx
		cmp	[esp+54h+var_40], edx
		jz	short loc_10032FC0
		lea	ebx, [ecx-1]
		mov	[esp+54h+var_3C], ebx
		test	ecx, ecx
		jnz	short loc_10032FC0
		mov	edx, 1

loc_10032FC0:				; CODE XREF: sub_10032AD0+4DEj
					; sub_10032AD0+4E9j
		xor	ebx, ebx
		mov	[esp+54h+var_40], ebp
		test	edx, edx
		jz	short loc_10032FD8
		lea	ecx, [ebp-1]
		mov	[esp+54h+var_40], ecx
		test	ebp, ebp
		jnz	short loc_10032FD8
		lea	ebx, [ebp+1]

loc_10032FD8:				; CODE XREF: sub_10032AD0+4F8j
					; sub_10032AD0+503j
		mov	edx, [esp+54h+var_8]
		mov	ecx, edx
		sub	ecx, [esp+54h+var_14]
		cmp	edx, ecx
		sbb	ebp, ebp
		neg	ebp
		mov	[esp+54h+var_34], ecx
		test	ebx, ebx
		jz	short loc_10032FFC
		mov	edx, ecx
		dec	ecx
		mov	[esp+54h+var_34], ecx
		test	edx, edx
		jnz	short loc_10032FFC
		inc	ebp

loc_10032FFC:				; CODE XREF: sub_10032AD0+51Ej
					; sub_10032AD0+529j
		mov	ecx, [esp+54h+var_4]
		mov	ebx, ecx
		sub	ebx, [esp+54h+var_1C]
		cmp	ecx, ebx
		sbb	ecx, ecx
		neg	ecx
		test	ebp, ebp
		jz	short loc_10033018
		mov	edx, ebx
		dec	ebx
		test	edx, edx
		jnz	short loc_10033018
		inc	ecx

loc_10033018:				; CODE XREF: sub_10032AD0+53Ej
					; sub_10032AD0+545j
		sub	eax, ecx
		mov	ecx, edi
		sub	edi, [esp+54h+var_2C]
		mov	edx, esi
		sub	esi, [esp+54h+var_24]
		cmp	ecx, edi
		sbb	ecx, ecx
		neg	ecx
		cmp	esi, edx
		jbe	short loc_10033038
		mov	edx, edi
		dec	edi
		test	edx, edx
		jnz	short loc_10033038
		inc	ecx

loc_10033038:				; CODE XREF: sub_10032AD0+55Ej
					; sub_10032AD0+565j
		mov	edx, [esp+54h+var_38]
		mov	[esp+54h+var_4], edx
		sub	edx, [esp+54h+var_28]
		cmp	[esp+54h+var_4], edx
		mov	[esp+54h+var_38], edx
		sbb	ebp, ebp
		neg	ebp
		test	ecx, ecx
		jz	short loc_10033060
		mov	ecx, edx
		dec	edx
		mov	[esp+54h+var_38], edx
		test	ecx, ecx
		jnz	short loc_10033060
		inc	ebp

loc_10033060:				; CODE XREF: sub_10032AD0+582j
					; sub_10032AD0+58Dj
		mov	ecx, [esp+54h+var_44]
		mov	edx, ecx
		sub	ecx, [esp+54h+var_30]
		cmp	edx, ecx
		sbb	edx, edx
		neg	edx
		mov	[esp+54h+var_44], ecx
		test	ebp, ebp
		jz	short loc_10033084
		mov	ebp, ecx
		dec	ecx
		mov	[esp+54h+var_44], ecx
		test	ebp, ebp
		jnz	short loc_10033084
		inc	edx

loc_10033084:				; CODE XREF: sub_10032AD0+5A6j
					; sub_10032AD0+5B1j
		xor	ecx, ecx
		test	edx, edx
		jz	short loc_1003309E
		mov	edx, [esp+54h+var_3C]
		mov	ebp, edx
		dec	edx
		mov	[esp+54h+var_3C], edx
		test	ebp, ebp
		jnz	short loc_1003309E
		mov	ecx, 1

loc_1003309E:				; CODE XREF: sub_10032AD0+5B8j
					; sub_10032AD0+5C7j
		xor	edx, edx
		test	ecx, ecx
		jz	short loc_100330B6
		mov	ecx, [esp+54h+var_40]
		mov	ebp, ecx
		dec	ecx
		mov	[esp+54h+var_40], ecx
		test	ebp, ebp
		jnz	short loc_100330B6
		lea	edx, [ebp+1]

loc_100330B6:				; CODE XREF: sub_10032AD0+5D2j
					; sub_10032AD0+5E1j
		mov	ecx, [esp+54h+var_34]
		mov	ebp, ecx
		sub	ecx, [esp+54h+var_20]
		cmp	ebp, ecx
		sbb	ebp, ebp
		neg	ebp
		mov	[esp+54h+var_34], ecx
		test	edx, edx
		jz	short loc_100330DA
		mov	edx, ecx
		dec	ecx
		mov	[esp+54h+var_34], ecx
		test	edx, edx
		jnz	short loc_100330DA
		inc	ebp

loc_100330DA:				; CODE XREF: sub_10032AD0+5FCj
					; sub_10032AD0+607j
		mov	ecx, ebx
		sub	ebx, [esp+54h+var_18]
		cmp	ecx, ebx
		sbb	ecx, ecx
		neg	ecx
		test	ebp, ebp
		jz	short loc_100330F2
		mov	edx, ebx
		dec	ebx
		test	edx, edx
		jnz	short loc_100330F2
		inc	ecx

loc_100330F2:				; CODE XREF: sub_10032AD0+618j
					; sub_10032AD0+61Fj
		sub	eax, ecx
		mov	ecx, edi
		sub	edi, [esp+54h+var_28]
		mov	edx, esi
		sub	esi, [esp+54h+var_2C]
		cmp	ecx, edi
		sbb	ecx, ecx
		neg	ecx
		cmp	esi, edx
		jbe	short loc_10033112
		mov	edx, edi
		dec	edi
		test	edx, edx
		jnz	short loc_10033112
		inc	ecx

loc_10033112:				; CODE XREF: sub_10032AD0+638j
					; sub_10032AD0+63Fj
		mov	edx, [esp+54h+var_38]
		mov	[esp+54h+var_4], edx
		sub	edx, [esp+54h+var_30]
		cmp	[esp+54h+var_4], edx
		mov	[esp+54h+var_38], edx
		sbb	ebp, ebp
		neg	ebp
		test	ecx, ecx
		jz	short loc_1003313A
		mov	ecx, edx
		dec	edx
		mov	[esp+54h+var_38], edx
		test	ecx, ecx
		jnz	short loc_1003313A
		inc	ebp

loc_1003313A:				; CODE XREF: sub_10032AD0+65Cj
					; sub_10032AD0+667j
		mov	ecx, [esp+54h+var_44]
		mov	edx, ecx
		sub	ecx, [esp+54h+var_14]
		cmp	edx, ecx
		sbb	edx, edx
		neg	edx
		mov	[esp+54h+var_44], ecx
		test	ebp, ebp
		jz	short loc_1003315E
		mov	ebp, ecx
		dec	ecx
		mov	[esp+54h+var_44], ecx
		test	ebp, ebp
		jnz	short loc_1003315E
		inc	edx

loc_1003315E:				; CODE XREF: sub_10032AD0+680j
					; sub_10032AD0+68Bj
		mov	ebp, [esp+54h+var_3C]
		mov	ecx, ebp
		sub	ebp, [esp+54h+var_20]
		cmp	ecx, ebp
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+54h+var_3C], ebp
		test	edx, edx
		jz	short loc_10033182
		mov	edx, ebp
		dec	ebp
		mov	[esp+54h+var_3C], ebp
		test	edx, edx
		jnz	short loc_10033182
		inc	ecx

loc_10033182:				; CODE XREF: sub_10032AD0+6A4j
					; sub_10032AD0+6AFj
		mov	edx, [esp+54h+var_40]
		mov	ebp, edx
		sub	edx, [esp+54h+var_1C]
		cmp	ebp, edx
		sbb	ebp, ebp
		neg	ebp
		mov	[esp+54h+var_40], edx
		test	ecx, ecx
		jz	short loc_100331A6
		mov	ecx, edx
		dec	edx
		mov	[esp+54h+var_40], edx
		test	ecx, ecx
		jnz	short loc_100331A6
		inc	ebp

loc_100331A6:				; CODE XREF: sub_10032AD0+6C8j
					; sub_10032AD0+6D3j
		xor	edx, edx
		test	ebp, ebp
		jz	short loc_100331BE
		mov	ecx, [esp+54h+var_34]
		mov	ebp, ecx
		dec	ecx
		mov	[esp+54h+var_34], ecx
		test	ebp, ebp
		jnz	short loc_100331BE
		lea	edx, [ebp+1]

loc_100331BE:				; CODE XREF: sub_10032AD0+6DAj
					; sub_10032AD0+6E9j
		mov	ecx, ebx
		sub	ebx, [esp+54h+var_24]
		cmp	ecx, ebx
		sbb	ecx, ecx
		neg	ecx
		test	edx, edx
		jz	short loc_100331D6
		mov	edx, ebx
		dec	ebx
		test	edx, edx
		jnz	short loc_100331D6
		inc	ecx

loc_100331D6:				; CODE XREF: sub_10032AD0+6FCj
					; sub_10032AD0+703j
		sub	eax, ecx
		mov	ecx, edi
		sub	edi, [esp+54h+var_30]
		mov	edx, esi
		sub	esi, [esp+54h+var_28]
		cmp	ecx, edi
		sbb	ecx, ecx
		neg	ecx
		cmp	esi, edx
		jbe	short loc_100331F6
		mov	edx, edi
		dec	edi
		test	edx, edx
		jnz	short loc_100331F6
		inc	ecx

loc_100331F6:				; CODE XREF: sub_10032AD0+71Cj
					; sub_10032AD0+723j
		xor	ebp, ebp
		test	ecx, ecx
		jz	short loc_1003320E
		mov	ecx, [esp+54h+var_38]
		mov	edx, ecx
		dec	ecx
		mov	[esp+54h+var_38], ecx
		test	edx, edx
		jnz	short loc_1003320E
		lea	ebp, [edx+1]

loc_1003320E:				; CODE XREF: sub_10032AD0+72Aj
					; sub_10032AD0+739j
		mov	ecx, [esp+54h+var_44]
		mov	edx, ecx
		sub	ecx, [esp+54h+var_20]
		cmp	edx, ecx
		sbb	edx, edx
		neg	edx
		mov	[esp+54h+var_44], ecx
		test	ebp, ebp
		jz	short loc_10033232
		mov	ebp, ecx
		dec	ecx
		mov	[esp+54h+var_44], ecx
		test	ebp, ebp
		jnz	short loc_10033232
		inc	edx

loc_10033232:				; CODE XREF: sub_10032AD0+754j
					; sub_10032AD0+75Fj
		mov	ebp, [esp+54h+var_3C]
		mov	[esp+54h+var_4], ebp
		sub	ebp, [esp+54h+var_1C]
		cmp	[esp+54h+var_4], ebp
		mov	[esp+54h+var_3C], ebp
		sbb	ecx, ecx
		neg	ecx
		test	edx, edx
		jz	short loc_10033260
		mov	edx, ebp
		dec	ebp
		test	edx, edx
		mov	edx, [esp+54h+var_40]
		mov	[esp+54h+var_3C], ebp
		jnz	short loc_10033264
		inc	ecx
		jmp	short loc_10033264
; ---------------------------------------------------------------------------

loc_10033260:				; CODE XREF: sub_10032AD0+77Cj
		mov	edx, [esp+54h+var_40]

loc_10033264:				; CODE XREF: sub_10032AD0+78Bj
					; sub_10032AD0+78Ej
		mov	ebp, edx
		sub	edx, [esp+54h+var_18]
		cmp	ebp, edx
		sbb	ebp, ebp
		neg	ebp
		mov	[esp+54h+var_40], edx
		test	ecx, ecx
		jz	short loc_10033284
		mov	ecx, edx
		dec	edx
		mov	[esp+54h+var_40], edx
		test	ecx, ecx
		jnz	short loc_10033284
		inc	ebp

loc_10033284:				; CODE XREF: sub_10032AD0+7A6j
					; sub_10032AD0+7B1j
		xor	edx, edx
		test	ebp, ebp
		jz	short loc_1003329C
		mov	ecx, [esp+54h+var_34]
		mov	ebp, ecx
		dec	ecx
		mov	[esp+54h+var_34], ecx
		test	ebp, ebp
		jnz	short loc_1003329C
		lea	edx, [ebp+1]

loc_1003329C:				; CODE XREF: sub_10032AD0+7B8j
					; sub_10032AD0+7C7j
		mov	ecx, ebx
		sub	ebx, [esp+54h+var_2C]
		cmp	ecx, ebx
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+54h+var_14], ebx
		test	edx, edx
		jz	short loc_100332BC
		mov	edx, ebx
		dec	ebx
		mov	[esp+54h+var_14], ebx
		test	edx, edx
		jnz	short loc_100332BC
		inc	ecx

loc_100332BC:				; CODE XREF: sub_10032AD0+7DEj
					; sub_10032AD0+7E9j
		sub	eax, ecx
		test	eax, eax
		jle	loc_1003337D

loc_100332C6:				; CODE XREF: sub_10032AD0+8A7j
		mov	ebx, [esp+54h+var_38]
		mov	edx, [esp+54h+var_44]
		mov	ecx, esi
		add	esi, eax
		cmp	esi, ecx
		sbb	ecx, ecx
		neg	ecx
		add	edi, ecx
		cmp	edi, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ebx, ecx
		cmp	ebx, ecx
		sbb	ebp, ebp
		neg	ebp
		mov	ecx, edx
		sub	ecx, eax
		cmp	ecx, edx
		sbb	edx, edx
		add	ecx, ebp
		neg	edx
		cmp	ecx, ebp
		mov	[esp+54h+var_44], ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, edx
		mov	edx, [esp+54h+var_3C]
		lea	ebp, [edx-1]
		cmp	ebp, edx
		sbb	edx, edx
		add	ebp, ecx
		neg	edx
		cmp	ebp, ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, edx
		mov	edx, [esp+54h+var_40]
		mov	[esp+54h+var_3C], ebp
		lea	ebp, [edx-1]
		cmp	ebp, edx
		sbb	edx, edx
		add	ebp, ecx
		neg	edx
		cmp	ebp, ecx
		mov	[esp+54h+var_40], ebp
		sbb	ebp, ebp
		neg	ebp
		add	ebp, edx
		mov	edx, [esp+54h+var_34]
		mov	ecx, edx
		sub	ecx, eax
		dec	ecx
		cmp	ecx, edx
		sbb	edx, edx
		add	ecx, ebp
		neg	edx
		cmp	ecx, ebp
		mov	[esp+54h+var_34], ecx
		sbb	ecx, ecx
		neg	ecx
		add	ecx, edx
		mov	edx, [esp+54h+var_14]
		lea	eax, [eax+edx-1]
		cmp	eax, edx
		sbb	edx, edx
		add	eax, ecx
		neg	edx
		cmp	eax, ecx
		mov	[esp+54h+var_38], ebx
		mov	ebx, eax
		sbb	eax, eax
		neg	eax
		add	eax, edx
		mov	[esp+54h+var_14], ebx
		test	eax, eax
		jg	loc_100332C6

loc_1003337D:				; CODE XREF: sub_10032AD0+7F0j
		jns	loc_10033468

loc_10033383:				; CODE XREF: sub_10032AD0+992j
		mov	ecx, [esp+54h+var_44]
		neg	eax
		mov	edx, esi
		sub	esi, eax
		xor	ebp, ebp
		mov	[esp+54h+var_14], eax
		cmp	esi, edx
		jbe	short loc_100333A3
		mov	eax, edi
		dec	edi
		test	eax, eax
		jnz	short loc_100333A3
		mov	ebp, 1

loc_100333A3:				; CODE XREF: sub_10032AD0+8C5j
					; sub_10032AD0+8CCj
		xor	eax, eax
		test	ebp, ebp
		jz	short loc_100333BB
		mov	edx, [esp+54h+var_38]
		mov	ebp, edx
		dec	edx
		mov	[esp+54h+var_38], edx
		test	ebp, ebp
		jnz	short loc_100333BB
		lea	eax, [ebp+1]

loc_100333BB:				; CODE XREF: sub_10032AD0+8D7j
					; sub_10032AD0+8E6j
		mov	ebp, [esp+54h+var_14]
		mov	edx, ecx
		add	ecx, ebp
		cmp	edx, ecx
		sbb	edx, edx
		neg	edx
		mov	[esp+54h+var_44], ecx
		test	eax, eax
		jz	short loc_100333DD
		mov	eax, ecx
		dec	ecx
		mov	[esp+54h+var_44], ecx
		test	eax, eax
		jnz	short loc_100333DD
		inc	edx

loc_100333DD:				; CODE XREF: sub_10032AD0+8FFj
					; sub_10032AD0+90Aj
		mov	eax, [esp+54h+var_3C]
		mov	ecx, eax
		inc	eax
		cmp	ecx, eax
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+54h+var_3C], eax
		test	edx, edx
		jz	short loc_100333FE
		mov	edx, eax
		dec	eax
		mov	[esp+54h+var_3C], eax
		test	edx, edx
		jnz	short loc_100333FE
		inc	ecx

loc_100333FE:				; CODE XREF: sub_10032AD0+920j
					; sub_10032AD0+92Bj
		mov	eax, [esp+54h+var_40]
		mov	edx, eax
		inc	eax
		cmp	edx, eax
		sbb	edx, edx
		neg	edx
		mov	[esp+54h+var_40], eax
		test	ecx, ecx
		jz	short loc_1003341F
		mov	ecx, eax
		dec	eax
		mov	[esp+54h+var_40], eax
		test	ecx, ecx
		jnz	short loc_1003341F
		inc	edx

loc_1003341F:				; CODE XREF: sub_10032AD0+941j
					; sub_10032AD0+94Cj
		mov	ecx, [esp+54h+var_34]
		lea	eax, [ecx+ebp+1]
		cmp	ecx, eax
		sbb	ecx, ecx
		neg	ecx
		mov	[esp+54h+var_34], eax
		test	edx, edx
		jz	short loc_10033441
		mov	edx, eax
		dec	eax
		mov	[esp+54h+var_34], eax
		test	edx, edx
		jnz	short loc_10033441
		inc	ecx

loc_10033441:				; CODE XREF: sub_10032AD0+963j
					; sub_10032AD0+96Ej
		mov	eax, 1
		sub	eax, [esp+54h+var_14]
		mov	edx, ebx
		add	ebx, eax
		cmp	edx, ebx
		sbb	eax, eax
		neg	eax
		test	ecx, ecx
		jz	short loc_10033460
		mov	ecx, ebx
		dec	ebx
		test	ecx, ecx
		jnz	short loc_10033460
		inc	eax

loc_10033460:				; CODE XREF: sub_10032AD0+986j
					; sub_10032AD0+98Dj
		neg	eax
		js	loc_10033383

loc_10033468:				; CODE XREF: sub_10032AD0:loc_1003337Dj
		mov	ebp, [esp+54h+arg_4]
		cmp	[esp+54h+arg_0], ebp
		jz	short loc_10033489
		push	8
		push	ebp
		call	sub_100291A0
		add	esp, 8
		mov	[esp+54h+var_10], eax
		test	eax, eax
		js	loc_10033545

loc_10033489:				; CODE XREF: sub_10032AD0+9A0j
		mov	edx, [ebp+0Ch]
		mov	ecx, [esp+54h+var_34]
		mov	dword ptr [ebp+0], 0
		mov	dword ptr [ebp+8], 8
		mov	[edx+1Ch], ebx
		mov	eax, [ebp+0Ch]
		mov	[eax+18h], ecx
		mov	edx, [ebp+0Ch]
		mov	eax, [esp+54h+var_40]
		mov	[edx+14h], eax
		mov	edx, [ebp+0Ch]
		mov	eax, [esp+54h+var_3C]
		mov	[edx+10h], eax
		mov	edx, [ebp+0Ch]
		mov	eax, [esp+54h+var_44]
		mov	[edx+0Ch], eax
		mov	edx, [ebp+0Ch]
		mov	eax, [esp+54h+var_38]
		mov	[edx+8], eax
		mov	edx, [ebp+0Ch]
		mov	[edx+4], edi
		mov	eax, [ebp+0Ch]
		mov	[eax], esi
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_10033521
		cmp	ecx, 1
		ja	short loc_10033509
		jnz	short loc_10033521
		cmp	[esp+54h+var_40], 0
		jnz	short loc_10033509
		cmp	[esp+54h+var_3C], 0
		jnz	short loc_10033509
		cmp	[esp+54h+var_44], 0
		jnz	short loc_10033509
		cmp	[esp+54h+var_38], ebx
		jnz	short loc_10033521
		cmp	edi, ebx
		jnz	short loc_10033521
		cmp	esi, ebx
		jnz	short loc_10033521

loc_10033509:				; CODE XREF: sub_10032AD0+A12j
					; sub_10032AD0+A1Bj ...
		mov	ecx, [esp+54h+arg_8]
		push	ebp
		add	ecx, 4
		push	ecx
		push	ebp
		call	sub_1002A1A0
		add	esp, 0Ch
		test	eax, eax
		js	short loc_10033545
		jmp	short loc_10033525
; ---------------------------------------------------------------------------

loc_10033521:				; CODE XREF: sub_10032AD0+A0Dj
					; sub_10032AD0+A14j ...
		mov	eax, [esp+54h+var_10]

loc_10033525:				; CODE XREF: sub_10032AD0+A4Fj
		mov	ecx, [ebp+8]
		cmp	ecx, 1
		jbe	short loc_10033542
		mov	edx, [ebp+0Ch]
		lea	edx, [edx+ecx*4-4]

loc_10033534:				; CODE XREF: sub_10032AD0+A70j
		cmp	dword ptr [edx], 0
		jnz	short loc_10033542
		dec	ecx
		sub	edx, 4
		cmp	ecx, 1
		ja	short loc_10033534

loc_10033542:				; CODE XREF: sub_10032AD0+A5Bj
					; sub_10032AD0+A67j
		mov	[ebp+8], ecx

loc_10033545:				; CODE XREF: sub_10032AD0+9B3j
					; sub_10032AD0+A4Dj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 44h
		retn
sub_10032AD0	endp

; ---------------------------------------------------------------------------
		align 10h
off_10033550	dd offset loc_10032BC0	; DATA XREF: sub_10032AD0+A3r
		dd offset loc_10032BB6	; jump table for switch	statement
		dd offset loc_10032BAC
		dd offset loc_10032BA2
		dd offset loc_10032B98
		dd offset loc_10032B8E
		dd offset loc_10032B84
		dd offset loc_10032B7A
; ---------------------------------------------------------------------------

loc_10033570:				; DATA XREF: sub_100335D0+22o
		mov	eax, [esp+4]
		push	esi
		mov	esi, [esp+0Ch]
		push	esi
		push	eax
		call	sub_1002A440
		add	esp, 8
		test	eax, eax
		js	short loc_10033596
		mov	ecx, [esp+10h]
		push	ecx
		push	esi
		push	esi
		call	sub_10032AD0
		add	esp, 0Ch

loc_10033596:				; CODE XREF: .text:10033585j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_100335A0:				; DATA XREF: sub_100335D0+18o
		mov	eax, [esp+8]
		mov	ecx, [esp+4]
		push	esi
		mov	esi, [esp+10h]
		push	esi
		push	eax
		push	ecx
		call	sub_1002A260
		add	esp, 0Ch
		test	eax, eax
		js	short loc_100335CB
		mov	edx, [esp+14h]
		push	edx
		push	esi
		push	esi
		call	sub_10032AD0
		add	esp, 0Ch

loc_100335CB:				; CODE XREF: .text:100335BAj
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100335D0	proc near		; CODE XREF: sub_1002E140+292p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 3
		jnz	short loc_100335F9
		mov	eax, [esp+arg_0]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+34h], offset sub_10032AD0
		mov	edx, [eax+4]
		mov	dword ptr [edx+38h], offset loc_100335A0
		mov	eax, [eax+4]
		mov	dword ptr [eax+3Ch], offset loc_10033570

loc_100335F9:				; CODE XREF: sub_100335D0+5j
		xor	eax, eax
		retn
sub_100335D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033600	proc near		; CODE XREF: .text:100337FEp
					; .text:10033833p ...

var_88		= dword	ptr -88h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
Dst		= byte ptr -44h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 60h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+60h+var_4], eax
		mov	eax, [esp+60h+arg_8]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+6Ch+arg_4]
		push	edi
		mov	edi, [esp+70h+arg_0]
		push	edi
		mov	[esp+74h+var_60], eax
		call	sub_10028CE0
		xor	ebp, ebp
		push	40h		; Size
		lea	ecx, [esp+78h+Dst]
		push	ebp		; Val
		push	ecx		; Dst
		mov	ebx, eax
		mov	[esp+80h+var_48], ebp
		call	memset
		mov	[esp+80h+var_58], ebp
		mov	ebp, 11h
		add	esp, 10h
		lea	edx, [esp+70h+var_48]
		mov	[esp+70h+var_54], ebp
		mov	[esp+70h+var_50], ebp
		mov	[esp+70h+var_4C], edx
		cmp	ebx, 209h
		jge	short loc_10033697
		cmp	edi, esi
		jnz	short loc_1003367A
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+60h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_1003367A:				; CODE XREF: sub_10033600+63j
		push	esi
		push	edi
		call	sub_10028E00
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+60h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_10033697:				; CODE XREF: sub_10033600+5Fj
		cmp	ebx, 412h
		jle	short loc_100336C6
		mov	eax, [esp+70h+var_60]
		push	esi
		add	eax, 4
		push	eax
		push	edi
		call	sub_1002C150
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		mov	ebx, eax
		pop	ebx
		mov	ecx, [esp+60h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_100336C6:				; CODE XREF: sub_10033600+9Dj
		mov	ecx, [edi+8]
		mov	eax, 10h
		dec	ecx
		cmp	ecx, eax
		jbe	short loc_10033706
		mov	eax, [edi+0Ch]
		add	eax, 40h
		add	ecx, 0FFFFFFF0h
		lea	ebx, [ecx+10h]
		lea	edx, [esp+70h+var_48]
		mov	[esp+70h+var_5C], ebx

loc_100336E7:				; CODE XREF: sub_10033600+FDj
		mov	ebx, [eax]
		mov	ebp, [eax+4]
		shr	ebx, 9
		shl	ebp, 17h
		or	ebx, ebp
		mov	[edx], ebx
		add	eax, 4
		add	edx, 4
		dec	ecx
		jnz	short loc_100336E7
		mov	eax, [esp+70h+var_5C]
		lea	ebp, [ecx+11h]

loc_10033706:				; CODE XREF: sub_10033600+D1j
		mov	ecx, [edi+0Ch]
		mov	edx, [ecx+eax*4]
		shr	edx, 9
		mov	[esp+eax*4+70h+var_88],	edx
		cmp	edi, esi
		jz	short loc_10033744
		push	ebp
		push	esi
		call	sub_100291A0
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	loc_100337C9
		xor	eax, eax
		lea	ecx, [ecx+0]

loc_10033730:				; CODE XREF: sub_10033600+142j
		mov	ecx, [edi+0Ch]
		mov	ecx, [eax+ecx]
		mov	edx, [esi+0Ch]
		mov	[eax+edx], ecx
		add	eax, 4
		cmp	eax, 44h
		jb	short loc_10033730

loc_10033744:				; CODE XREF: sub_10033600+115j
		mov	eax, [esi+0Ch]
		lea	edx, [esp+70h+var_58]
		push	edx
		mov	[esi+8], ebp
		mov	edi, 1FFh
		and	[eax+40h], edi
		push	esi
		call	sub_10029750
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_100337C9
		mov	eax, [esi+0Ch]
		test	dword ptr [eax+40h], 200h
		jz	short loc_1003378B
		push	1
		push	esi
		call	sub_10029660
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		js	short loc_100337C9
		mov	eax, [esi+0Ch]
		and	[eax+40h], edi
		jmp	short loc_100337A9
; ---------------------------------------------------------------------------

loc_1003378B:				; CODE XREF: sub_10033600+170j
		mov	ecx, [esp+70h+var_60]
		add	ecx, 4
		push	ecx
		push	esi
		call	sub_10029C10
		add	esp, 8
		test	eax, eax
		jnz	short loc_100337A9
		push	esi
		call	sub_10028F40
		add	esp, 4

loc_100337A9:				; CODE XREF: sub_10033600+189j
					; sub_10033600+19Ej
		mov	eax, [esi+8]
		cmp	eax, 1
		jbe	short loc_100337C6
		mov	edx, [esi+0Ch]
		lea	ecx, [edx+eax*4-4]

loc_100337B8:				; CODE XREF: sub_10033600+1C4j
		cmp	dword ptr [ecx], 0
		jnz	short loc_100337C6
		dec	eax
		sub	ecx, 4
		cmp	eax, 1
		ja	short loc_100337B8

loc_100337C6:				; CODE XREF: sub_10033600+1AFj
					; sub_10033600+1BBj
		mov	[esi+8], eax

loc_100337C9:				; CODE XREF: sub_10033600+125j
					; sub_10033600+164j ...
		mov	ecx, [esp+70h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
sub_10033600	endp

; ---------------------------------------------------------------------------
		align 10h

loc_100337E0:				; DATA XREF: sub_100338E0+22o
		mov	eax, [esp+4]
		push	esi
		mov	esi, [esp+0Ch]
		push	esi
		push	eax
		call	sub_1002A440
		add	esp, 8
		test	eax, eax
		js	short loc_10033806
		mov	ecx, [esp+10h]
		push	ecx
		push	esi
		push	esi
		call	sub_10033600
		add	esp, 0Ch

loc_10033806:				; CODE XREF: .text:100337F5j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10033810:				; DATA XREF: sub_100338E0+18o
		mov	eax, [esp+8]
		mov	ecx, [esp+4]
		push	esi
		mov	esi, [esp+10h]
		push	esi
		push	eax
		push	ecx
		call	sub_1002A260
		add	esp, 0Ch
		test	eax, eax
		js	short loc_1003383B
		mov	edx, [esp+14h]
		push	edx
		push	esi
		push	esi
		call	sub_10033600
		add	esp, 0Ch

loc_1003383B:				; CODE XREF: .text:1003382Aj
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033840	proc near		; DATA XREF: sub_100338E0+2Co

var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	ebp
		mov	ebp, [esp+14h+arg_0]
		test	ebp, ebp
		jnz	short loc_1003386B
		mov	eax, [esp+14h+arg_8]
		mov	ecx, [esp+14h+arg_C]
		mov	edx, [esp+14h+arg_4]
		push	eax
		add	ecx, 4
		push	ecx
		push	edx
		call	sub_1002CAC0
		add	esp, 0Ch
		pop	ebp
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1003386B:				; CODE XREF: sub_10033840+Aj
		lea	eax, [esp+14h+var_10]
		push	esi
		push	eax
		call	sub_1002A030
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		js	short loc_100338C9
		mov	eax, [esp+18h+arg_4]
		push	ebx
		mov	ebx, [esp+1Ch+arg_C]
		lea	ecx, [esp+1Ch+var_10]
		push	ecx
		lea	edx, [ebx+4]
		push	edx
		push	eax
		call	sub_1002CAC0
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100338C8
		push	edi
		mov	edi, [esp+20h+arg_8]
		push	edi
		lea	ecx, [esp+24h+var_10]
		push	ecx
		push	ebp
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_100338C7
		push	ebx
		push	edi
		push	edi
		call	sub_10033600
		add	esp, 0Ch
		mov	esi, eax

loc_100338C7:				; CODE XREF: sub_10033840+78j
		pop	edi

loc_100338C8:				; CODE XREF: sub_10033840+5Ej
		pop	ebx

loc_100338C9:				; CODE XREF: sub_10033840+3Dj
		lea	edx, [esp+18h+var_10]
		push	edx
		call	sub_10028EF0
		add	esp, 4
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 10h
		retn
sub_10033840	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100338E0	proc near		; CODE XREF: sub_1002E140+254p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 5
		jnz	short loc_10033913
		mov	eax, [esp+arg_0]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+34h], offset sub_10033600
		mov	edx, [eax+4]
		mov	dword ptr [edx+38h], offset loc_10033810
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+3Ch], offset loc_100337E0
		mov	edx, [eax+4]
		mov	dword ptr [edx+40h], offset sub_10033840

loc_10033913:				; CODE XREF: sub_100338E0+5j
		xor	eax, eax
		retn
sub_100338E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033920	proc near		; CODE XREF: sub_10035570+69p
					; sub_10035570+A5p ...
		push	ebx
		push	esi
		mov	esi, eax
		push	edi
		mov	edi, edx
		mov	eax, [edi]
		add	eax, [esi]
		mov	edx, eax
		shr	edx, 1Dh
		and	eax, 1FFFFFFFh
		mov	[ecx], eax
		mov	eax, 1
		lea	esp, [esp+0]

loc_10033940:				; CODE XREF: sub_10033920+56j
		mov	ebx, [edi+eax*4]
		add	ebx, [esi+eax*4]
		add	eax, 2
		add	edx, ebx
		mov	[ecx+eax*4-8], edx
		and	dword ptr [ecx+eax*4-8], 0FFFFFFFh
		mov	ebx, [edi+eax*4-4]
		add	ebx, [esi+eax*4-4]
		shr	edx, 1Ch
		add	edx, ebx
		mov	[ecx+eax*4-4], edx
		and	dword ptr [ecx+eax*4-4], 1FFFFFFFh
		shr	edx, 1Dh
		cmp	eax, 9
		jnz	short loc_10033940
		lea	eax, [edx-1]
		lea	esi, [edx+edx]
		add	[ecx], esi
		shr	eax, 1Fh
		dec	eax
		mov	edi, edx
		shl	edi, 0Bh
		mov	esi, eax
		and	esi, 10000000h
		sub	esi, edi
		add	[ecx+0Ch], esi
		mov	edi, eax
		and	edi, 0FFFFFFFh
		add	[ecx+14h], edi
		mov	esi, eax
		mov	edi, edx
		and	esi, 1FFFFFFFh
		add	[ecx+10h], esi
		shl	edi, 16h
		sub	esi, edi
		add	[ecx+18h], esi
		pop	edi
		shl	edx, 19h
		and	eax, 1
		sub	edx, eax
		add	[ecx+1Ch], edx
		pop	esi
		pop	ebx
		retn
sub_10033920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100339D0	proc near		; CODE XREF: sub_10035570+79p
					; sub_10035570+BFp ...
		push	ebp
		push	esi
		push	edi
		mov	edi, eax
		mov	eax, [ebx]
		sub	eax, [edi]
		add	eax, 7FFFFFF8h
		mov	esi, eax
		shr	esi, 1Dh
		and	eax, 1FFFFFFFh
		mov	[ecx], eax
		mov	eax, 4
		nop

loc_100339F0:				; CODE XREF: sub_100339D0+71j
		mov	edx, [eax+ebx]
		sub	edx, [eax+edi]
		add	eax, 8
		mov	[eax+ecx-8], edx
		mov	ebp, ds:dword_10047FB0[eax]
		add	ebp, edx
		lea	edx, [esi+ebp]
		mov	[eax+ecx-8], edx
		and	dword ptr [eax+ecx-8], 0FFFFFFFh
		mov	esi, [eax+ebx-4]
		sub	esi, [eax+edi-4]
		shr	edx, 1Ch
		mov	[eax+ecx-4], esi
		mov	ebp, ds:dword_10047FB4[eax]
		add	ebp, esi
		add	edx, ebp
		mov	[eax+ecx-4], edx
		and	dword ptr [eax+ecx-4], 1FFFFFFFh
		shr	edx, 1Dh
		mov	esi, edx
		cmp	eax, 24h
		jnz	short loc_100339F0
		lea	eax, [esi-1]
		lea	edx, [esi+esi]
		add	[ecx], edx
		shr	eax, 1Fh
		dec	eax
		mov	edi, esi
		shl	edi, 0Bh
		mov	edx, eax
		and	edx, 10000000h
		sub	edx, edi
		add	[ecx+0Ch], edx
		mov	edi, eax
		and	edi, 0FFFFFFFh
		add	[ecx+14h], edi
		mov	edi, esi
		mov	edx, eax
		and	edx, 1FFFFFFFh
		add	[ecx+10h], edx
		shl	edi, 16h
		shl	esi, 19h
		and	eax, 1
		sub	edx, edi
		add	[ecx+18h], edx
		sub	esi, eax
		add	[ecx+1Ch], esi
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_100339D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10033A90	proc near		; CODE XREF: sub_10033ED0+58Ap
					; sub_10034480+9D9p

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 60h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+60h+var_4], eax
		mov	eax, [esp+60h+arg_0]
		push	ebx
		push	ebp
		push	esi
		mov	esi, ecx
		mov	edx, [esi+4]
		push	edi
		mov	edi, [esi]
		mov	ecx, edi
		and	ecx, 1FFFFFFFh
		mov	[esp+70h+var_54], eax
		mov	[esp+70h+var_4C], ecx
		mov	eax, edi
		mov	cl, 20h
		call	sub_10037470
		mov	edx, [esi+8]
		and	eax, 1FFFFFFh
		add	eax, eax
		add	eax, eax
		add	eax, eax
		shr	edi, 1Dh
		or	eax, edi
		and	edx, 0FFFFFFFh
		add	eax, edx
		mov	ebx, eax
		shr	ebx, 1Ch
		and	eax, 0FFFFFFFh
		mov	[esp+70h+var_48], eax
		mov	edi, 2
		mov	ebp, esi
		mov	[esp+70h+var_60], esi
		lea	ebx, [ebx+0]

loc_10033B00:				; CODE XREF: sub_10033A90+135j
		mov	eax, [esi+edi*8-8]
		mov	edx, [esi+edi*8-4]
		mov	cl, 20h
		call	sub_10037470
		mov	edx, [ebp+4]
		and	eax, 1FFFFFFh
		shl	eax, 4
		mov	[esp+70h+var_5C], eax
		mov	eax, [ebp+0]
		mov	cl, 20h
		call	sub_10037470
		mov	ecx, [esp+70h+var_5C]
		mov	ebp, [esp+70h+var_60]
		shr	eax, 19h
		add	ecx, eax
		mov	eax, [esi+edi*8]
		and	eax, 1FFFFFFFh
		add	eax, ebx
		mov	ebx, [esi+edi*8-8]
		shr	ebx, 1Ch
		add	eax, ecx
		add	ebx, eax
		mov	[esp+edi*4+70h+var_4C],	ebx
		and	[esp+edi*4+70h+var_4C],	1FFFFFFFh
		inc	edi
		add	ebp, 8
		shr	ebx, 1Dh
		mov	[esp+70h+var_60], ebp
		cmp	edi, 11h
		jz	short loc_10033BCB
		mov	eax, [esi+edi*8-8]
		mov	edx, [esi+edi*8-4]
		mov	cl, 20h
		call	sub_10037470
		mov	edx, [ebp+4]
		and	eax, 1FFFFFFh
		mov	[esp+70h+var_5C], eax
		mov	eax, [ebp+0]
		mov	cl, 20h
		call	sub_10037470
		mov	ecx, [esp+70h+var_5C]
		shr	eax, 19h
		lea	eax, [eax+ecx*8]
		mov	ecx, [esi+edi*8]
		and	ecx, 0FFFFFFFh
		add	ecx, ebx
		mov	ebx, [esi+edi*8-8]
		shr	ebx, 1Dh
		add	ecx, eax
		add	ebx, ecx
		mov	[esp+edi*4+70h+var_4C],	ebx
		and	[esp+edi*4+70h+var_4C],	0FFFFFFFh
		inc	edi
		add	ebp, 8
		shr	ebx, 1Ch
		mov	[esp+70h+var_60], ebp
		cmp	edi, 11h
		jb	loc_10033B00

loc_10033BCB:				; CODE XREF: sub_10033A90+D4j
		mov	eax, [esi+78h]
		mov	edx, [esi+7Ch]
		mov	cl, 20h
		call	sub_10037470
		mov	edx, [esi+84h]
		mov	edi, eax
		mov	eax, [esi+80h]
		mov	cl, 20h
		shr	edi, 19h
		call	sub_10037470
		mov	ecx, [esi+80h]
		xor	esi, esi
		mov	[esp+70h+var_60], esi
		add	edi, ebx
		lea	edx, [edi+eax*8]
		mov	eax, [esp+70h+var_4C]
		mov	[esp+70h+var_4C], esi
		shr	ecx, 1Dh
		add	ecx, edx
		mov	edi, [esp+70h+var_30]
		mov	[esp+70h+var_8], ecx
		mov	ecx, eax
		and	eax, 1FFFFFFFh
		mov	esi, eax
		and	esi, 3FFFFh
		shl	esi, 0Ah
		add	[esp+70h+var_40], esi
		mov	esi, eax
		shr	esi, 12h
		add	[esp+70h+var_3C], esi
		movzx	esi, al
		shl	esi, 15h
		add	[esp+70h+var_34], esi
		shr	ecx, 1Dh
		add	[esp+70h+var_48], ecx
		lea	edx, [eax-1]
		mov	ecx, edx
		mov	esi, eax
		shr	esi, 8
		add	edi, esi
		shr	ecx, 1Fh
		dec	ecx
		and	edx, ecx
		mov	esi, ecx
		and	esi, 10000000h
		add	edi, esi
		mov	esi, [esp+70h+var_2C]
		add	esi, edx
		mov	edx, eax
		and	edx, 0Fh
		shl	edx, 18h
		sub	edi, edx
		mov	edx, eax
		shr	edx, 4
		sub	esi, edx
		mov	edx, ecx
		and	edx, 20000000h
		add	esi, edx
		sub	esi, eax
		mov	edx, eax
		shr	eax, 1
		dec	eax
		and	edx, 1
		and	eax, ecx
		add	[esp+70h+var_28], eax
		shl	edx, 1Ch
		add	esi, edx
		lea	eax, [esp+70h+var_28]
		mov	[esp+70h+var_30], edi
		mov	[esp+70h+var_2C], esi
		lea	ebx, [esp+70h+var_48]
		lea	ebp, [esp+70h+var_3C]
		lea	edi, [esp+70h+var_30]
		lea	esi, [esp+70h+var_2C]
		mov	[esp+70h+var_5C], eax
		xor	ecx, ecx
		jmp	short loc_10033CC8
; ---------------------------------------------------------------------------
		align 10h

loc_10033CC0:				; CODE XREF: sub_10033A90+380j
		mov	ebp, [esp+70h+var_50]
		mov	ebx, [esp+70h+var_58]

loc_10033CC8:				; CODE XREF: sub_10033A90+22Aj
		mov	eax, [ebx]
		mov	edx, [ebx]
		mov	dword ptr [ebx], 0
		and	eax, 0FFFFFFFh
		mov	ebx, eax
		and	ebx, 3FFFFh
		shl	ebx, 0Bh
		add	[ebp+0], ebx
		shr	edx, 1Ch
		add	[esp+ecx+70h+var_44], edx
		mov	ebx, eax
		shr	ebx, 12h
		add	[esp+ecx+70h+var_38], ebx
		lea	edx, [eax-1]
		mov	[esp+70h+var_58], edx
		shr	edx, 1Fh
		dec	edx
		mov	ebx, eax
		and	ebx, 7Fh
		shl	ebx, 15h
		add	[edi], ebx
		mov	edi, edx
		mov	ebx, eax
		and	edi, 20000000h
		mov	ebp, eax
		shr	ebx, 7
		add	edi, ebx
		add	[esi], edi
		mov	edi, [esp+70h+var_58]
		mov	ebx, [esp+70h+var_5C]
		and	edi, edx
		add	[ebx], edi
		add	[esp+ecx+70h+var_24], edi
		and	ebp, 0Fh
		shl	ebp, 19h
		sub	[esi], ebp
		and	edx, 10000000h
		mov	esi, eax
		shr	esi, 4
		sub	edx, esi
		sub	edx, eax
		add	[ebx], edx
		mov	eax, [esp+70h+var_60]
		add	eax, 2
		lea	ecx, [esp+ecx+70h+var_24]
		lea	ecx, ds:0[eax*4]
		mov	edx, [esp+ecx+70h+var_4C]
		shr	edx, 1Dh
		add	[esp+ecx+70h+var_48], edx
		mov	[esp+70h+var_60], eax
		lea	eax, [esp+ecx+70h+var_48]
		mov	[esp+70h+var_58], eax
		mov	eax, [esp+ecx+70h+var_4C]
		and	eax, 1FFFFFFFh
		mov	esi, eax
		and	esi, 3FFFFh
		shl	esi, 0Ah
		mov	[esp+ecx+70h+var_4C], 0
		add	[esp+ecx+70h+var_40], esi
		lea	esi, [esp+ecx+70h+var_3C]
		mov	[esp+70h+var_50], esi
		mov	edi, eax
		shr	edi, 12h
		add	[esi], edi
		lea	ebx, [eax-1]
		mov	edx, ebx
		movzx	esi, al
		shl	esi, 15h
		add	[esp+ecx+70h+var_34], esi
		shr	edx, 1Fh
		dec	edx
		mov	esi, edx
		and	esi, 10000000h
		mov	ebp, eax
		shr	ebp, 8
		add	esi, ebp
		add	[esp+ecx+70h+var_30], esi
		lea	edi, [esp+ecx+70h+var_30]
		lea	esi, [esp+ecx+70h+var_2C]
		and	ebx, edx
		add	[esi], ebx
		mov	ebx, eax
		and	ebx, 0Fh
		shl	ebx, 18h
		sub	[edi], ebx
		mov	ebx, eax
		and	ebx, 1
		mov	ebp, eax
		shl	ebx, 1Ch
		shr	ebp, 4
		sub	ebx, ebp
		mov	ebp, edx
		and	ebp, 20000000h
		add	ebx, ebp
		sub	ebx, eax
		add	[esi], ebx
		shr	eax, 1
		dec	eax
		and	eax, edx
		add	[esp+ecx+70h+var_28], eax
		mov	eax, [esp+70h+var_60]
		lea	ebx, [esp+ecx+70h+var_28]
		inc	eax
		mov	[esp+70h+var_5C], ebx
		cmp	eax, 9
		jnz	loc_10033CC0
		mov	eax, [esp+70h+var_54]
		xor	edx, edx
		xor	ecx, ecx
		mov	edi, edi

loc_10033E20:				; CODE XREF: sub_10033A90+3CCj
		mov	esi, [esp+ecx*4+70h+var_24]
		and	esi, 1
		shl	esi, 1Ch
		add	esi, [esp+ecx*4+70h+var_28]
		add	ecx, 2
		add	edx, esi
		mov	esi, [esp+ecx*4+70h+var_2C]
		mov	[eax+ecx*4-8], edx
		and	dword ptr [eax+ecx*4-8], 1FFFFFFFh
		shr	edx, 1Dh
		shr	esi, 1
		add	edx, esi
		mov	[eax+ecx*4-4], edx
		and	dword ptr [eax+ecx*4-4], 0FFFFFFFh
		shr	edx, 1Ch
		cmp	ecx, 8
		jb	short loc_10033E20
		add	edx, [esp+70h+var_8]
		mov	[eax+20h], edx
		shr	edx, 1Dh
		and	dword ptr [eax+20h], 1FFFFFFFh
		lea	ecx, [edx-1]
		shr	ecx, 1Fh
		dec	ecx
		lea	esi, [edx+edx]
		add	[eax], esi
		mov	esi, ecx
		and	esi, 10000000h
		mov	edi, edx
		shl	edi, 0Bh
		sub	esi, edi
		add	[eax+0Ch], esi
		mov	edi, ecx
		and	edi, 0FFFFFFFh
		add	[eax+14h], edi
		mov	esi, ecx
		and	esi, 1FFFFFFFh
		add	[eax+10h], esi
		mov	edi, edx
		shl	edi, 16h
		sub	esi, edi
		add	[eax+18h], esi
		pop	edi
		and	ecx, 1
		pop	esi
		shl	edx, 19h
		sub	edx, ecx
		mov	ecx, [esp+68h+var_4]
		add	[eax+1Ch], edx
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
sub_10033A90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10033ED0	proc near		; CODE XREF: sub_10034E80+28p
					; sub_10034E80+5Dp ...

var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0B4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0B4h+var_4], eax
		mov	eax, [esp+0B4h+arg_0]
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ebx, ecx
		mov	esi, [ebx]
		xor	edi, edi
		push	edi
		push	esi
		push	edi
		push	esi
		mov	[esp+0D4h+var_90], eax
		mov	[esp+0D4h+var_A0], ebx
		call	sub_100374C0
		mov	ebp, [ebx+4]
		push	edi
		push	esi
		xor	ecx, ecx
		mov	[esp+0CCh+var_8C], eax
		lea	eax, [ebp+ebp+0]
		push	ecx
		push	eax
		mov	[esp+0D4h+var_88], edx
		mov	[esp+0D4h+var_B4], ebp
		call	sub_100374C0
		mov	ebx, [ebx+8]
		mov	[esp+0C4h+var_84], eax
		xor	eax, eax
		push	eax
		lea	eax, [ebp+ebp+0]
		xor	ecx, ecx
		push	eax
		push	ecx
		mov	[esp+0D0h+var_9C], ebx
		push	ebp
		mov	[esp+0D4h+var_80], edx
		add	ebx, ebx
		mov	[esp+0D4h+var_94], ecx
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_94]
		push	edi
		push	esi
		push	ecx
		push	ebx
		mov	ebp, eax
		mov	[esp+0D4h+var_98], edx
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+0C4h+var_98]
		adc	eax, edx
		mov	edx, [esp+0C4h+var_A0]
		mov	[esp+0C4h+var_78], eax
		mov	eax, [edx+0Ch]
		mov	[esp+0C4h+var_98], eax
		lea	ebx, [eax+eax]
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_B4]
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0D0h+var_9C]
		add	eax, eax
		mov	[esp+0D0h+var_7C], ebp
		push	eax
		xor	ebp, ebp
		call	sub_100374C0
		push	edi
		push	esi
		push	ebp
		push	ebx
		mov	[esp+0D4h+var_AC], edx
		mov	[esp+0D4h+var_B0], eax
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_B0]
		add	ecx, eax
		mov	eax, [esp+0C4h+var_AC]
		adc	eax, edx
		mov	[esp+0C4h+var_74], ecx
		mov	[esp+0C4h+var_70], eax
		mov	ecx, [esp+0C4h+var_A0]
		mov	edx, [ecx+10h]
		mov	eax, [esp+0C4h+var_98]
		lea	ecx, ds:0[eax*4]
		xor	eax, eax
		push	eax
		mov	[esp+0C8h+var_A8], edx
		mov	edx, [esp+0C8h+var_B4]
		push	edx
		push	eax
		push	ecx
		xor	ebx, ebx
		call	sub_100374C0
		push	ebx
		mov	ebp, eax
		mov	eax, [esp+0C8h+var_9C]
		push	eax
		push	ebx
		push	eax
		mov	[esp+0D4h+var_B0], edx
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+0C4h+var_B0]
		adc	eax, edx
		push	edi
		mov	[esp+0C8h+var_B0], eax
		xor	eax, eax
		push	esi
		push	eax
		mov	eax, [esp+0D0h+var_A8]
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+0C4h+var_B0]
		adc	eax, edx
		mov	edx, [esp+0C4h+var_9C]
		mov	[esp+0C4h+var_68], eax
		mov	eax, [esp+0C4h+var_A0]
		mov	ecx, [eax+14h]
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_98]
		add	eax, eax
		push	eax
		xor	eax, eax
		push	eax
		push	edx
		mov	[esp+0D4h+var_6C], ebp
		mov	[esp+0D4h+var_A4], ecx
		call	sub_100374C0
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_B4]
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0D0h+var_A8]
		add	eax, eax
		push	eax
		mov	ebp, edx
		call	sub_100374C0
		add	ebx, eax
		push	edi
		adc	ebp, edx
		xor	eax, eax
		push	esi
		push	eax
		mov	eax, [esp+0D0h+var_A4]
		add	eax, eax
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_A0]
		add	ebx, eax
		mov	eax, [ecx+18h]
		adc	ebp, edx
		mov	[esp+0C4h+var_64], ebx
		mov	[esp+0C4h+var_60], ebp
		xor	edx, edx
		mov	[esp+0C4h+var_AC], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_98]
		lea	ecx, [eax+eax]
		push	ecx
		push	edx
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_9C]
		mov	ebx, eax
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		mov	eax, [esp+0D0h+var_A8]
		add	eax, eax
		push	eax
		mov	ebp, edx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+0C4h+var_B4]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+0D0h+var_A4]
		add	eax, eax
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebx, eax
		push	edi
		adc	ebp, edx
		xor	eax, eax
		push	esi
		push	eax
		mov	eax, [esp+0D0h+var_AC]
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebx, eax
		mov	eax, [esp+0C4h+var_A0]
		mov	ecx, [eax+1Ch]
		adc	ebp, edx
		mov	edx, [esp+0C4h+var_98]
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_A8]
		add	eax, eax
		push	eax
		xor	eax, eax
		push	eax
		push	edx
		mov	[esp+0D4h+var_5C], ebx
		mov	[esp+0D4h+var_58], ebp
		mov	[esp+0D4h+var_B0], ecx
		call	sub_100374C0
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_9C]
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0D0h+var_A4]
		add	eax, eax
		push	eax
		mov	ebp, edx
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_B4]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		mov	eax, [esp+0D0h+var_AC]
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebx, eax
		push	edi
		adc	ebp, edx
		xor	eax, eax
		push	esi
		push	eax
		mov	eax, [esp+0D0h+var_B0]
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+0C4h+var_A0]
		mov	ecx, [edx+20h]
		xor	eax, eax
		push	eax
		mov	[esp+0C8h+var_A0], ecx
		mov	ecx, [esp+0C8h+var_A8]
		push	ecx
		push	eax
		push	ecx
		mov	[esp+0D4h+var_54], ebx
		mov	[esp+0D4h+var_50], ebp
		call	sub_100374C0
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	ebp, edx
		mov	edx, [esp+0C8h+var_98]
		push	edx
		push	eax
		mov	eax, [esp+0D0h+var_A4]
		add	eax, eax
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_9C]
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0D0h+var_AC]
		add	eax, eax
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_B4]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		mov	eax, [esp+0D0h+var_B0]
		add	eax, eax
		add	eax, eax
		push	eax
		call	sub_100374C0
		push	edi
		push	esi
		mov	esi, [esp+0CCh+var_A0]
		add	ebx, eax
		adc	ebp, edx
		push	edi
		add	esi, esi
		push	esi
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+0C4h+var_A8]
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_A4]
		add	eax, eax
		push	eax
		xor	eax, eax
		mov	[esp+0CCh+var_4C], ebx
		mov	[esp+0CCh+var_48], ebp
		push	eax
		push	edx
		call	sub_100374C0
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_98]
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0D0h+var_AC]
		add	eax, eax
		push	eax
		mov	ebp, edx
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_9C]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		mov	eax, [esp+0D0h+var_B0]
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+0C4h+var_B4]
		xor	eax, eax
		push	eax
		push	edx
		push	edi
		push	esi
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_AC]
		add	eax, eax
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0D0h+var_A8]
		mov	[esp+0D0h+var_44], ebx
		push	eax
		mov	[esp+0D4h+var_40], ebp
		xor	ebx, ebx
		call	sub_100374C0
		mov	ebp, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_A4]
		lea	ecx, [eax+eax]
		push	ecx
		push	ebx
		push	eax
		mov	[esp+0D4h+var_B4], edx
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_98]
		add	ebp, eax
		mov	eax, [esp+0C4h+var_B4]
		adc	eax, edx
		mov	[esp+0C4h+var_B4], eax
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		mov	eax, [esp+0D0h+var_B0]
		add	eax, eax
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+0C4h+var_B4]
		adc	eax, edx
		mov	edx, [esp+0C4h+var_9C]
		mov	[esp+0C4h+var_B4], eax
		xor	eax, eax
		push	eax
		push	edx
		push	edi
		push	esi
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+0C4h+var_B4]
		adc	eax, edx
		mov	[esp+0C4h+var_38], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_B0]
		add	eax, eax
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0D0h+var_A8]
		push	eax
		mov	[esp+0D4h+var_3C], ebp
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_A4]
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_AC]
		add	eax, eax
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		mov	ebp, edx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+0C4h+var_98]
		xor	eax, eax
		push	eax
		push	edx
		push	edi
		push	esi
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_AC]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		push	ecx
		mov	[esp+0D4h+var_34], ebx
		mov	[esp+0D4h+var_30], ebp
		call	sub_100374C0
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_B0]
		add	eax, eax
		add	eax, eax
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0D0h+var_A4]
		push	eax
		mov	ebp, edx
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_A8]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		push	ecx
		push	edi
		push	esi
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+0C4h+var_A4]
		push	edi
		push	esi
		xor	eax, eax
		mov	[esp+0CCh+var_2C], ebx
		mov	[esp+0CCh+var_28], ebp
		push	eax
		push	edx
		call	sub_100374C0
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_B0]
		add	eax, eax
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0D0h+var_AC]
		push	eax
		mov	ebp, edx
		call	sub_100374C0
		mov	ecx, [esp+0C4h+var_AC]
		add	ebx, eax
		push	edi
		adc	ebp, edx
		push	esi
		xor	eax, eax
		push	eax
		mov	[esp+0D0h+var_24], ebx
		push	ecx
		mov	[esp+0D4h+var_20], ebp
		xor	ebx, ebx
		call	sub_100374C0
		mov	ebp, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+0C8h+var_B0]
		lea	ecx, [eax+eax]
		push	ecx
		push	ebx
		push	eax
		mov	[esp+0D4h+var_B4], edx
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+0C4h+var_B4]
		adc	eax, edx
		mov	edx, [esp+0C4h+var_B0]
		push	edi
		mov	[esp+0C8h+var_18], eax
		push	esi
		xor	eax, eax
		push	eax
		push	edx
		mov	[esp+0D4h+var_1C], ebp
		call	sub_100374C0
		xor	ecx, ecx
		push	ecx
		mov	[esp+0C8h+var_14], eax
		mov	eax, [esp+0C8h+var_A0]
		push	eax
		push	ecx
		push	eax
		mov	[esp+0D4h+var_10], edx
		call	sub_100374C0
		mov	[esp+0C4h+var_C], eax
		mov	eax, [esp+0C4h+var_90]
		push	eax
		lea	ecx, [esp+0C8h+var_8C]
		mov	[esp+0C8h+var_8], edx
		call	sub_10033A90
		mov	ecx, [esp+0C8h+var_4]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0B4h
		retn
sub_10033ED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10034480	proc near		; CODE XREF: sub_10034E80+39p
					; sub_10034E80+80p ...

var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F0		= dword	ptr -0F0h
var_E8		= dword	ptr -0E8h
var_E0		= dword	ptr -0E0h
var_D8		= dword	ptr -0D8h
var_D0		= dword	ptr -0D0h
var_C8		= dword	ptr -0C8h
var_C0		= dword	ptr -0C0h
var_B8		= dword	ptr -0B8h
var_B0		= dword	ptr -0B0h
var_A8		= dword	ptr -0A8h
var_A0		= dword	ptr -0A0h
var_98		= dword	ptr -98h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 114h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+114h+var_4], eax
		mov	eax, [esp+114h+arg_0]
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, edx
		mov	ebx, [edi]
		xor	ebp, ebp
		push	ebp
		mov	esi, ecx
		push	ebx
		xor	ecx, ecx
		mov	[esp+12Ch+var_90], eax
		mov	eax, [esi]
		push	ecx
		push	eax
		mov	[esp+134h+var_98], ebx
		mov	[esp+134h+var_A0], eax
		call	sub_100374C0
		mov	ecx, [esi+4]
		mov	[esp+124h+var_8C], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_A0]
		mov	[esp+128h+var_88], edx
		push	eax
		xor	edx, edx
		mov	[esp+12Ch+var_B0], ecx
		mov	ecx, [edi+4]
		push	edx
		push	ecx
		mov	[esp+134h+var_104], ecx
		call	sub_100374C0
		push	ebp
		push	ebx
		mov	[esp+12Ch+var_10C], eax
		xor	eax, eax
		mov	[esp+12Ch+var_110], edx
		mov	edx, [esp+12Ch+var_B0]
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_10C]
		mov	ebx, [esp+124h+var_104]
		add	ecx, eax
		mov	eax, [esp+124h+var_110]
		adc	eax, edx
		mov	[esp+124h+var_80], eax
		mov	eax, [esi+8]
		mov	[esp+124h+var_E0], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_A0]
		push	eax
		xor	edx, edx
		mov	[esp+12Ch+var_84], ecx
		mov	ecx, [edi+8]
		push	edx
		push	ecx
		add	ebx, ebx
		mov	[esp+134h+var_A8], ecx
		call	sub_100374C0
		mov	[esp+124h+var_10C], eax
		xor	eax, eax
		push	eax
		mov	[esp+128h+var_110], edx
		mov	edx, [esp+128h+var_B0]
		push	edx
		push	ebp
		push	ebx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_10C]
		add	ecx, eax
		mov	eax, [esp+124h+var_110]
		adc	eax, edx
		mov	[esp+124h+var_110], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_98]
		push	eax
		xor	eax, eax
		mov	edx, [esp+12Ch+var_E0]
		push	eax
		push	edx
		mov	[esp+134h+var_10C], ecx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_10C]
		add	ecx, eax
		mov	eax, [esp+124h+var_110]
		adc	eax, edx
		mov	[esp+124h+var_78], eax
		mov	eax, [esi+0Ch]
		mov	[esp+124h+var_D0], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_A0]
		push	eax
		xor	edx, edx
		mov	[esp+12Ch+var_7C], ecx
		mov	ecx, [edi+0Ch]
		push	edx
		push	ecx
		mov	[esp+134h+var_110], ecx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_104]
		mov	ebx, eax
		xor	eax, eax
		push	eax
		push	ecx
		mov	ebp, edx
		mov	edx, [esp+12Ch+var_E0]
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_A8]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_B0]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_98]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_D0]
		push	eax
		call	sub_100374C0
		mov	ecx, [esi+10h]
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [edi+10h]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_E0]
		push	eax
		xor	eax, eax
		mov	[esp+12Ch+var_C8], ecx
		mov	ecx, [esp+12Ch+var_A8]
		push	eax
		push	ecx
		mov	[esp+134h+var_74], ebx
		mov	[esp+134h+var_70], ebp
		mov	[esp+134h+var_F8], edx
		call	sub_100374C0
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_104]
		add	eax, eax
		push	eax
		xor	eax, eax
		mov	ebp, edx
		mov	edx, [esp+12Ch+var_D0]
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_F8]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_A0]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_B0]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_110]
		add	eax, eax
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_C8]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_98]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_A8]
		add	ebx, eax
		mov	eax, [edi+14h]
		adc	ebp, edx
		mov	edx, [esi+14h]
		mov	[esp+124h+var_108], eax
		xor	eax, eax
		push	eax
		push	ecx
		mov	[esp+12Ch+var_C0], edx
		mov	edx, [esp+12Ch+var_D0]
		push	eax
		push	edx
		mov	[esp+134h+var_6C], ebx
		mov	[esp+134h+var_68], ebp
		call	sub_100374C0
		mov	ecx, [esp+124h+var_110]
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_E0]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		mov	ebp, edx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_A0]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_108]
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_104]
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_C8]
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_F8]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_B0]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_98]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_C0]
		push	eax
		call	sub_100374C0
		mov	ecx, [esi+18h]
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [edi+18h]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_D0]
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+130h+var_110]
		add	eax, eax
		push	eax
		mov	[esp+134h+var_64], ebx
		mov	[esp+134h+var_60], ebp
		mov	[esp+134h+var_E8], ecx
		mov	[esp+134h+var_F0], edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_A8]
		mov	ebx, eax
		xor	eax, eax
		push	eax
		push	ecx
		mov	ebp, edx
		mov	edx, [esp+12Ch+var_C8]
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_F0]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_A0]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_C0]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_104]
		add	eax, eax
		push	eax
		xor	eax, eax
		push	eax
		push	edx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_E0]
		push	eax
		xor	eax, eax
		push	eax
		mov	ecx, [esp+130h+var_F8]
		push	ecx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_B0]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_108]
		add	eax, eax
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_E8]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_98]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_C8]
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esi+1Ch]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_110]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		mov	[esp+134h+var_5C], ebx
		mov	[esp+134h+var_58], ebp
		mov	[esp+134h+var_D8], edx
		call	sub_100374C0
		mov	ebx, eax
		xor	eax, eax
		push	eax
		mov	ebp, edx
		mov	edx, [esp+128h+var_D0]
		push	edx
		push	eax
		mov	eax, [esp+130h+var_F8]
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_A0]
		add	ebx, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		mov	eax, [edi+1Ch]
		push	eax
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_A8]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_C0]
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_E0]
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_108]
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		push	edx
		call	sub_100374C0
		add	ebx, eax
		mov	ecx, [esp+124h+var_E8]
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_104]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_98]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_D8]
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_B0]
		add	ebx, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_F0]
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esi+20h]
		add	ebx, eax
		mov	eax, [edi+1Ch]
		mov	edi, [edi+20h]
		adc	ebp, edx
		mov	edx, [esp+124h+var_C8]
		mov	[esp+124h+var_10C], eax
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_F8]
		xor	esi, esi
		push	eax
		mov	[esp+134h+var_54], ebx
		mov	[esp+134h+var_50], ebp
		mov	[esp+134h+var_B8], ecx
		mov	[esp+134h+var_100], edi
		mov	[esp+134h+var_FC], esi
		call	sub_100374C0
		mov	ecx, [esp+124h+var_C0]
		mov	ebp, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_110]
		add	eax, eax
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		mov	[esp+134h+var_114], edx
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	edx, [esp+124h+var_D0]
		mov	[esp+124h+var_114], eax
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_108]
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	[esp+124h+var_114], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_A0]
		push	eax
		push	esi
		push	edi
		call	sub_100374C0
		mov	ecx, [esp+124h+var_D8]
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	[esp+124h+var_114], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_104]
		add	eax, eax
		push	eax
		xor	ebx, ebx
		push	ebx
		push	ecx
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	edx, [esp+124h+var_A8]
		mov	[esp+124h+var_114], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_E8]
		push	edx
		push	esi
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_B0]
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	[esp+124h+var_114], eax
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		mov	eax, [esp+130h+var_10C]
		add	eax, eax
		push	eax
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	edx, [esp+124h+var_E0]
		mov	[esp+124h+var_114], eax
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_F0]
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_98]
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	edx, [esp+124h+var_B8]
		mov	[esp+124h+var_114], eax
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_C0]
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	[esp+124h+var_48], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_F8]
		push	eax
		xor	eax, eax
		push	eax
		mov	[esp+130h+var_4C], ebp
		push	ecx
		call	sub_100374C0
		mov	edi, eax
		xor	eax, eax
		push	eax
		mov	ebp, edx
		mov	edx, [esp+128h+var_C8]
		push	edx
		push	eax
		mov	eax, [esp+130h+var_108]
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_110]
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_E8]
		xor	eax, eax
		push	eax
		push	ecx
		push	esi
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_F0]
		add	edi, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_D0]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_A8]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_D8]
		push	edx
		push	ebx
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_104]
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_B8]
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_10C]
		add	edi, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_E0]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_100]
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_B0]
		xor	eax, eax
		push	eax
		push	edx
		mov	eax, esi
		push	eax
		push	ecx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_C0]
		xor	eax, eax
		mov	[esp+124h+var_44], edi
		mov	[esp+124h+var_40], ebp
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_108]
		add	eax, eax
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_E8]
		mov	edi, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_F8]
		push	eax
		push	esi
		push	ecx
		mov	ebp, edx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_D8]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_110]
		add	eax, eax
		push	eax
		push	ebx
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_F0]
		add	edi, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_C8]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_D0]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_10C]
		add	eax, eax
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_B8]
		add	edi, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_A8]
		push	eax
		xor	eax, eax
		push	eax
		push	ecx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_100]
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_E0]
		xor	eax, eax
		push	eax
		push	edx
		mov	eax, esi
		push	eax
		push	ecx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_108]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_E8]
		push	edx
		mov	[esp+12Ch+var_3C], edi
		mov	[esp+12Ch+var_38], ebp
		push	esi
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_C0]
		mov	edi, eax
		xor	eax, eax
		push	eax
		push	ecx
		mov	ebp, edx
		mov	edx, [esp+12Ch+var_F0]
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_D8]
		add	edi, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_F8]
		push	eax
		push	ebx
		push	ecx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_C8]
		xor	eax, eax
		push	eax
		push	edx
		push	eax
		mov	eax, [esp+130h+var_10C]
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_110]
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_B8]
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		push	edx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_100]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_D0]
		push	eax
		mov	ecx, esi
		push	ecx
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_F0]
		add	edi, eax
		mov	eax, [esp+124h+var_E8]
		push	esi
		push	eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		push	ecx
		mov	[esp+134h+var_34], edi
		mov	[esp+134h+var_30], ebp
		call	sub_100374C0
		mov	edi, eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_108]
		add	eax, eax
		push	eax
		mov	ebp, edx
		mov	edx, [esp+12Ch+var_D8]
		push	ebx
		push	edx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_C0]
		push	eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+130h+var_10C]
		add	eax, eax
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_F8]
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_B8]
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		push	edx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_100]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_C8]
		push	eax
		mov	ecx, esi
		push	ecx
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_D8]
		add	edi, eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_F0]
		push	eax
		push	ebx
		push	ecx
		mov	[esp+134h+var_2C], edi
		mov	[esp+134h+var_28], ebp
		call	sub_100374C0
		push	esi
		mov	ebp, edx
		mov	edx, [esp+128h+var_E8]
		mov	edi, eax
		push	edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+130h+var_10C]
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_108]
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_B8]
		xor	eax, eax
		push	eax
		push	ecx
		push	eax
		push	edx
		call	sub_100374C0
		add	edi, eax
		adc	ebp, edx
		mov	edx, [esp+124h+var_100]
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_C0]
		push	eax
		mov	ecx, esi
		push	ecx
		push	edx
		call	sub_100374C0
		add	edi, eax
		mov	eax, [esp+124h+var_D8]
		push	ebx
		push	eax
		adc	ebp, edx
		xor	eax, eax
		push	eax
		mov	eax, [esp+130h+var_10C]
		mov	[esp+130h+var_24], edi
		mov	[esp+130h+var_20], ebp
		add	eax, eax
		push	eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_F0]
		mov	ebp, eax
		xor	eax, eax
		push	eax
		push	ecx
		mov	[esp+12Ch+var_114], edx
		mov	edx, [esp+12Ch+var_B8]
		push	eax
		push	edx
		call	sub_100374C0
		mov	ecx, [esp+124h+var_E8]
		mov	edi, [esp+124h+var_100]
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		push	esi
		adc	eax, edx
		push	ecx
		mov	edx, esi
		push	edx
		push	edi
		mov	[esp+134h+var_114], eax
		call	sub_100374C0
		mov	ecx, [esp+124h+var_B8]
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	[esp+124h+var_18], eax
		xor	eax, eax
		push	eax
		mov	eax, [esp+128h+var_10C]
		push	eax
		push	esi
		push	ecx
		mov	[esp+134h+var_1C], ebp
		call	sub_100374C0
		push	ebx
		mov	[esp+128h+var_114], edx
		mov	edx, [esp+128h+var_D8]
		push	edx
		mov	ecx, esi
		push	ecx
		push	edi
		mov	ebp, eax
		call	sub_100374C0
		add	ebp, eax
		mov	eax, [esp+124h+var_114]
		adc	eax, edx
		mov	edx, [esp+124h+var_B8]
		push	esi
		mov	[esp+128h+var_10], eax
		push	edx
		mov	eax, esi
		push	eax
		push	edi
		mov	[esp+134h+var_14], ebp
		call	sub_100374C0
		mov	ecx, [esp+124h+var_90]
		push	ecx
		lea	ecx, [esp+128h+var_8C]
		mov	[esp+128h+var_C], eax
		mov	[esp+128h+var_8], edx
		call	sub_10033A90
		mov	ecx, [esp+128h+var_4]
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 114h
		retn
sub_10034480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10034E80	proc near		; CODE XREF: sub_100365C0+23p
					; sub_10036E60+8Fp ...

var_124		= byte ptr -124h
var_100		= byte ptr -100h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 124h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+124h+var_4], eax
		push	ebp
		mov	ebp, [esp+128h+arg_0]
		push	esi
		lea	eax, [esp+12Ch+var_4C]
		push	edi
		push	eax
		mov	ecx, ebx
		call	sub_10033ED0
		lea	ecx, [esp+134h+var_4C]
		push	ecx
		mov	edx, ecx
		mov	ecx, ebx
		call	sub_10034480
		lea	edx, [esp+138h+var_4C]
		mov	ecx, 9
		lea	esi, [esp+138h+var_4C]
		lea	edi, [esp+138h+var_B8]
		rep movsd
		push	edx
		mov	ecx, edx
		call	sub_10033ED0
		lea	eax, [esp+13Ch+var_4C]
		push	eax
		mov	ecx, eax
		call	sub_10033ED0
		lea	ecx, [esp+140h+var_4C]
		push	ecx
		lea	edx, [esp+144h+var_B8]
		call	sub_10034480
		lea	edx, [esp+144h+var_4C]
		mov	ecx, 9
		lea	esi, [esp+144h+var_4C]
		lea	edi, [esp+144h+var_100]
		rep movsd
		push	edx
		mov	ecx, edx
		call	sub_10033ED0
		lea	eax, [esp+148h+var_4C]
		push	eax
		mov	ecx, eax
		call	sub_10033ED0
		lea	ecx, [esp+14Ch+var_4C]
		push	ecx
		call	sub_10033ED0
		lea	edx, [esp+150h+var_4C]
		push	edx
		mov	ecx, edx
		call	sub_10033ED0
		lea	eax, [esp+154h+var_4C]
		push	eax
		lea	edx, [esp+158h+var_100]
		mov	ecx, eax
		call	sub_10034480
		mov	ecx, 9
		lea	esi, [esp+158h+var_4C]
		lea	edi, [esp+158h+var_124]
		rep movsd
		add	esp, 28h
		mov	esi, 8
		mov	edi, edi

loc_10034F80:				; CODE XREF: sub_10034E80+111j
		lea	ecx, [esp+130h+var_4C]
		push	ecx
		call	sub_10033ED0
		add	esp, 4
		dec	esi
		jnz	short loc_10034F80
		lea	edx, [esp+130h+var_4C]
		push	edx
		lea	edx, [esp+134h+var_124]
		lea	ecx, [esp+134h+var_4C]
		call	sub_10034480
		mov	ecx, 9
		lea	esi, [esp+134h+var_4C]
		lea	edi, [esp+134h+var_DC]
		rep movsd
		add	esp, 4
		mov	esi, 10h

loc_10034FC5:				; CODE XREF: sub_10034E80+158j
		lea	eax, [esp+130h+var_4C]
		push	eax
		mov	ecx, eax
		call	sub_10033ED0
		add	esp, 4
		dec	esi
		jnz	short loc_10034FC5
		lea	ecx, [esp+130h+var_4C]
		push	ecx
		lea	edx, [esp+134h+var_DC]
		call	sub_10034480
		mov	ecx, 9
		lea	esi, [esp+134h+var_4C]
		lea	edi, [esp+134h+var_70]
		rep movsd
		add	esp, 4
		mov	esi, 20h
		jmp	short loc_10035010
; ---------------------------------------------------------------------------
		align 10h

loc_10035010:				; CODE XREF: sub_10034E80+188j
					; sub_10034E80+1A3j
		lea	edx, [esp+130h+var_4C]
		push	edx
		mov	ecx, edx
		call	sub_10033ED0
		add	esp, 4
		dec	esi
		jnz	short loc_10035010
		lea	eax, [esp+130h+var_4C]
		mov	ecx, 9
		lea	esi, [esp+130h+var_4C]
		lea	edi, [esp+130h+var_94]
		rep movsd
		push	eax
		mov	edx, ebx
		mov	ecx, eax
		call	sub_10034480
		add	esp, 4
		mov	esi, 0C0h

loc_10035053:				; CODE XREF: sub_10034E80+1E4j
		lea	ecx, [esp+130h+var_4C]
		push	ecx
		call	sub_10033ED0
		add	esp, 4
		dec	esi
		jnz	short loc_10035053
		lea	edx, [esp+130h+var_28]
		push	edx
		lea	edx, [esp+134h+var_70]
		lea	ecx, [esp+134h+var_94]
		call	sub_10034480
		add	esp, 4
		mov	esi, 10h
		lea	esp, [esp+0]

loc_10035090:				; CODE XREF: sub_10034E80+223j
		lea	eax, [esp+130h+var_28]
		push	eax
		mov	ecx, eax
		call	sub_10033ED0
		add	esp, 4
		dec	esi
		jnz	short loc_10035090
		lea	ecx, [esp+130h+var_28]
		push	ecx
		lea	edx, [esp+134h+var_DC]
		call	sub_10034480
		add	esp, 4
		mov	esi, 8
		mov	edi, edi

loc_100350C0:				; CODE XREF: sub_10034E80+253j
		lea	edx, [esp+130h+var_28]
		push	edx
		mov	ecx, edx
		call	sub_10033ED0
		add	esp, 4
		dec	esi
		jnz	short loc_100350C0
		lea	eax, [esp+130h+var_28]
		push	eax
		lea	edx, [esp+134h+var_124]
		mov	ecx, eax
		call	sub_10034480
		add	esp, 4
		mov	esi, 4

loc_100350F0:				; CODE XREF: sub_10034E80+281j
		lea	ecx, [esp+130h+var_28]
		push	ecx
		call	sub_10033ED0
		add	esp, 4
		dec	esi
		jnz	short loc_100350F0
		lea	edx, [esp+130h+var_28]
		push	edx
		lea	edx, [esp+134h+var_100]
		lea	ecx, [esp+134h+var_28]
		call	sub_10034480
		lea	eax, [esp+134h+var_28]
		push	eax
		mov	ecx, eax
		call	sub_10033ED0
		lea	ecx, [esp+138h+var_28]
		push	ecx
		call	sub_10033ED0
		lea	edx, [esp+13Ch+var_28]
		push	edx
		lea	edx, [esp+140h+var_B8]
		lea	ecx, [esp+140h+var_28]
		call	sub_10034480
		lea	eax, [esp+140h+var_28]
		push	eax
		mov	ecx, eax
		call	sub_10033ED0
		lea	ecx, [esp+144h+var_28]
		push	ecx
		call	sub_10033ED0
		lea	edx, [esp+148h+var_28]
		push	edx
		mov	edx, ebx
		lea	ecx, [esp+14Ch+var_28]
		call	sub_10034480
		push	ebp
		lea	edx, [esp+150h+var_4C]
		lea	ecx, [esp+150h+var_28]
		call	sub_10034480
		mov	ecx, [esp+150h+var_4]
		add	esp, 20h
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 124h
		retn
sub_10034E80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100351C0	proc near		; CODE XREF: sub_10035570+98p
		mov	ecx, [eax]
		lea	ecx, [ecx+ecx*2]
		mov	edx, ecx
		shr	edx, 1Dh
		and	ecx, 1FFFFFFFh
		push	esi
		mov	[eax], ecx
		mov	ecx, 1
		push	edi
		lea	esp, [esp+0]

loc_100351E0:				; CODE XREF: sub_100351C0+53j
		mov	esi, [eax+ecx*4]
		lea	edx, [edx+esi*2]
		add	edx, esi
		mov	[eax+ecx*4], edx
		and	dword ptr [eax+ecx*4], 0FFFFFFFh
		mov	esi, [eax+ecx*4+4]
		shr	edx, 1Ch
		lea	edx, [edx+esi*2]
		add	edx, esi
		mov	[eax+ecx*4+4], edx
		and	dword ptr [eax+ecx*4+4], 1FFFFFFFh
		add	ecx, 2
		shr	edx, 1Dh
		cmp	ecx, 9
		jnz	short loc_100351E0
		lea	ecx, [edx-1]
		lea	esi, [edx+edx]
		add	[eax], esi
		shr	ecx, 1Fh
		dec	ecx
		mov	edi, edx
		shl	edi, 0Bh
		mov	esi, ecx
		and	esi, 10000000h
		sub	esi, edi
		add	[eax+0Ch], esi
		mov	edi, ecx
		and	edi, 0FFFFFFFh
		add	[eax+14h], edi
		mov	esi, ecx
		mov	edi, edx
		and	esi, 1FFFFFFFh
		add	[eax+10h], esi
		shl	edi, 16h
		sub	esi, edi
		add	[eax+18h], esi
		shl	edx, 19h
		and	ecx, 1
		sub	edx, ecx
		add	[eax+1Ch], edx
		pop	edi
		pop	esi
		retn
sub_100351C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035270	proc near		; CODE XREF: sub_10035570+D8p
		mov	eax, [ecx]
		push	esi
		mov	esi, eax
		and	eax, 7FFFFFFh
		add	eax, eax
		add	eax, eax
		mov	edx, eax
		shr	esi, 1Bh
		shr	edx, 1Dh
		add	edx, esi
		and	eax, 1FFFFFFFh
		mov	[ecx], eax
		push	edi
		mov	eax, 1

loc_10035295:				; CODE XREF: sub_10035270+6Ej
		mov	esi, [ecx+eax*4]
		mov	edi, esi
		and	esi, 3FFFFFFh
		lea	edx, [edx+esi*4]
		mov	[ecx+eax*4], edx
		and	dword ptr [ecx+eax*4], 0FFFFFFFh
		mov	esi, [ecx+eax*4+4]
		shr	edx, 1Ch
		shr	edi, 1Ah
		add	edx, edi
		mov	edi, esi
		and	esi, 7FFFFFFh
		lea	edx, [edx+esi*4]
		mov	[ecx+eax*4+4], edx
		and	dword ptr [ecx+eax*4+4], 1FFFFFFFh
		shr	edi, 1Bh
		shr	edx, 1Dh
		add	eax, 2
		add	edx, edi
		cmp	eax, 9
		jnz	short loc_10035295
		lea	eax, [edx-1]
		lea	esi, [edx+edx]
		add	[ecx], esi
		shr	eax, 1Fh
		dec	eax
		mov	edi, edx
		shl	edi, 0Bh
		mov	esi, eax
		and	esi, 10000000h
		sub	esi, edi
		add	[ecx+0Ch], esi
		mov	edi, eax
		and	edi, 0FFFFFFFh
		add	[ecx+14h], edi
		mov	esi, eax
		mov	edi, edx
		and	esi, 1FFFFFFFh
		add	[ecx+10h], esi
		shl	edi, 16h
		sub	esi, edi
		add	[ecx+18h], esi
		shl	edx, 19h
		and	eax, 1
		sub	edx, eax
		add	[ecx+1Ch], edx
		pop	edi
		pop	esi
		retn
sub_10035270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035330	proc near		; CODE XREF: sub_10035570+136p
		mov	eax, [ecx]
		push	esi
		mov	esi, eax
		and	eax, 3FFFFFFh
		add	eax, eax
		add	eax, eax
		add	eax, eax
		mov	edx, eax
		shr	esi, 1Ah
		shr	edx, 1Dh
		add	edx, esi
		and	eax, 1FFFFFFFh
		mov	[ecx], eax
		push	edi
		mov	eax, 1
		jmp	short loc_10035360
; ---------------------------------------------------------------------------
		align 10h

loc_10035360:				; CODE XREF: sub_10035330+27j
					; sub_10035330+79j
		mov	esi, [ecx+eax*4]
		mov	edi, esi
		and	esi, 1FFFFFFh
		lea	edx, [edx+esi*8]
		mov	[ecx+eax*4], edx
		and	dword ptr [ecx+eax*4], 0FFFFFFFh
		mov	esi, [ecx+eax*4+4]
		shr	edx, 1Ch
		shr	edi, 19h
		add	edx, edi
		mov	edi, esi
		and	esi, 3FFFFFFh
		lea	edx, [edx+esi*8]
		mov	[ecx+eax*4+4], edx
		and	dword ptr [ecx+eax*4+4], 1FFFFFFFh
		shr	edi, 1Ah
		shr	edx, 1Dh
		add	eax, 2
		add	edx, edi
		cmp	eax, 9
		jnz	short loc_10035360
		lea	eax, [edx-1]
		lea	esi, [edx+edx]
		add	[ecx], esi
		shr	eax, 1Fh
		dec	eax
		mov	edi, edx
		shl	edi, 0Bh
		mov	esi, eax
		and	esi, 10000000h
		sub	esi, edi
		add	[ecx+0Ch], esi
		mov	edi, eax
		and	edi, 0FFFFFFFh
		add	[ecx+14h], edi
		mov	esi, eax
		mov	edi, edx
		and	esi, 1FFFFFFFh
		add	[ecx+10h], esi
		shl	edi, 16h
		sub	esi, edi
		add	[ecx+18h], esi
		shl	edx, 19h
		and	eax, 1
		sub	edx, eax
		add	[ecx+1Ch], edx
		pop	edi
		pop	esi
		retn
sub_10035330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035400	proc near		; CODE XREF: sub_10035B00+146p
					; sub_10035B00+1A5p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		sub	esp, 28h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		push	esi
		push	edi
		mov	esi, ecx
		mov	ecx, 9
		lea	edi, [esp+30h+var_28]
		rep movsd
		mov	esi, [esp+30h+var_28]

loc_10035421:				; CODE XREF: sub_10035400+C6j
		mov	ecx, esi
		shr	ecx, 1Dh
		and	esi, 1FFFFFFFh
		mov	[esp+30h+var_28], esi
		mov	eax, 1
		jmp	short loc_10035440
; ---------------------------------------------------------------------------
		align 10h

loc_10035440:				; CODE XREF: sub_10035400+35j
					; sub_10035400+6Cj
		add	[esp+eax*4+30h+var_28],	ecx
		mov	ecx, [esp+eax*4+30h+var_28]
		and	[esp+eax*4+30h+var_28],	0FFFFFFFh
		shr	ecx, 1Ch
		add	[esp+eax*4+30h+var_24],	ecx
		mov	ecx, [esp+eax*4+30h+var_24]
		and	[esp+eax*4+30h+var_24],	1FFFFFFFh
		add	eax, 2
		shr	ecx, 1Dh
		cmp	eax, 9
		jnz	short loc_10035440
		mov	edx, [esp+30h+var_28]
		lea	esi, [edx+ecx*2]
		lea	eax, [ecx-1]
		shr	eax, 1Fh
		dec	eax
		mov	edx, eax
		and	edx, 10000000h
		mov	edi, ecx
		shl	edi, 0Bh
		sub	edx, edi
		add	[esp+30h+var_1C], edx
		mov	edi, eax
		and	edi, 0FFFFFFFh
		add	[esp+30h+var_14], edi
		mov	edx, eax
		and	edx, 1FFFFFFFh
		add	[esp+30h+var_18], edx
		mov	edi, ecx
		shl	edi, 16h
		sub	edx, edi
		add	[esp+30h+var_10], edx
		mov	edx, ecx
		shl	edx, 19h
		and	eax, 1
		sub	edx, eax
		add	[esp+30h+var_C], edx
		mov	[esp+30h+var_28], esi
		test	ecx, ecx
		jnz	loc_10035421
		pop	edi
		lea	eax, [ecx+24h]
		pop	esi

loc_100354D1:				; CODE XREF: sub_10035400+E5j
		mov	edx, [esp+ecx+28h+var_28]
		cmp	edx, ds:dword_100476DC[ecx]
		jnz	short loc_100354FB
		sub	eax, 4
		add	ecx, 4
		cmp	eax, 4
		jnb	short loc_100354D1
		mov	eax, 1
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_100354FB:				; CODE XREF: sub_10035400+DAj
		mov	eax, 24h
		xor	ecx, ecx

loc_10035502:				; CODE XREF: sub_10035400+116j
		mov	edx, [esp+ecx+28h+var_28]
		cmp	edx, ds:dword_10047700[ecx]
		jnz	short loc_1003552C
		sub	eax, 4
		add	ecx, 4
		cmp	eax, 4
		jnb	short loc_10035502
		mov	eax, 1
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1003552C:				; CODE XREF: sub_10035400+10Bj
		mov	eax, 24h
		xor	ecx, ecx

loc_10035533:				; CODE XREF: sub_10035400+147j
		mov	edx, [esp+ecx+28h+var_28]
		cmp	edx, ds:dword_10047724[ecx]
		jnz	short loc_1003555D
		sub	eax, 4
		add	ecx, 4
		cmp	eax, 4
		jnb	short loc_10035533
		mov	eax, 1
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
; ---------------------------------------------------------------------------

loc_1003555D:				; CODE XREF: sub_10035400+13Cj
		mov	ecx, [esp+28h+var_4]
		xor	ecx, esp
		xor	eax, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
sub_10035400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035570	proc near		; CODE XREF: sub_10035B00+1BEp
					; sub_10036020+A3p ...

var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0E4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0E4h+var_4], eax
		mov	eax, [esp+0E4h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+0ECh+arg_4]
		mov	ebx, edx
		lea	edx, [esp+0ECh+var_70]
		mov	[esp+0ECh+var_E0], ecx
		push	edx
		mov	ecx, ebp
		mov	[esp+0F0h+var_E4], eax
		call	sub_10033ED0
		lea	eax, [esp+0F0h+var_28]
		push	eax
		mov	ecx, edi
		call	sub_10033ED0
		lea	ecx, [esp+0F4h+var_B8]
		push	ecx
		lea	edx, [esp+0F8h+var_28]
		mov	ecx, ebx
		call	sub_10034480
		lea	eax, [esp+0F8h+var_70]
		mov	edx, ebx
		lea	ecx, [esp+0F8h+var_DC]
		call	sub_10033920
		lea	eax, [esp+0F8h+var_70]
		lea	ecx, [esp+0F8h+var_94]
		call	sub_100339D0
		lea	edx, [esp+0F8h+var_4C]
		push	edx
		mov	edx, ecx
		lea	ecx, [esp+0FCh+var_DC]
		call	sub_10034480
		lea	eax, [esp+0FCh+var_4C]
		call	sub_100351C0
		mov	eax, ebp
		mov	edx, edi
		lea	ecx, [esp+0FCh+var_DC]
		call	sub_10033920
		mov	eax, ecx
		push	eax
		call	sub_10033ED0
		lea	ebx, [esp+100h+var_DC]
		lea	eax, [esp+100h+var_28]
		mov	ecx, ebx
		call	sub_100339D0
		mov	ecx, [esp+100h+var_E0]
		lea	eax, [esp+100h+var_70]
		call	sub_100339D0
		lea	ecx, [esp+100h+var_B8]
		call	sub_10035270
		push	esi
		lea	ecx, [esp+104h+var_4C]
		call	sub_10033ED0
		lea	eax, [esp+104h+var_B8]
		mov	ebx, esi
		mov	ecx, esi
		call	sub_100339D0
		lea	eax, [esp+104h+var_B8]
		call	sub_100339D0
		mov	eax, esi
		lea	ebx, [esp+104h+var_B8]
		lea	ecx, [esp+104h+var_DC]
		call	sub_100339D0
		push	ecx
		mov	edx, ecx
		lea	ecx, [esp+108h+var_4C]
		call	sub_10034480
		lea	edx, [esp+108h+var_94]
		push	edx
		lea	ecx, [esp+10Ch+var_28]
		call	sub_10033ED0
		add	esp, 20h
		lea	ecx, [esp+0ECh+var_94]
		call	sub_10035330
		mov	eax, ecx
		mov	ecx, [esp+0ECh+var_E4]
		lea	ebx, [esp+0ECh+var_DC]
		call	sub_100339D0
		mov	ecx, [esp+0ECh+var_4]
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0E4h
		retn
sub_10035570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100356E0	proc near		; CODE XREF: sub_10036020+192p
					; sub_10036640+EAp

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0ECh
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0ECh+var_4], eax
		mov	eax, [esp+0ECh+arg_0]
		push	ebx
		mov	ebx, [esp+0F0h+arg_8]
		mov	[esp+0F0h+var_EC], ecx
		push	ebp
		mov	ebp, [esp+0F4h+arg_4]
		lea	ecx, [esp+0F4h+var_DC]
		mov	[esp+0F4h+var_E4], eax
		mov	eax, [esp+0F4h+arg_C]
		push	ecx
		mov	ecx, ebx
		mov	[esp+0F8h+var_E0], edx
		mov	[esp+0F8h+var_E8], eax
		call	sub_10033ED0
		mov	eax, ebx
		mov	edx, ebx
		lea	ecx, [esp+0F8h+var_B8]
		call	sub_10033920
		mov	ecx, [esp+0F8h+var_E0]
		lea	edx, [esp+0F8h+var_70]
		push	edx
		lea	edx, [esp+0FCh+var_DC]
		call	sub_10034480
		lea	eax, [esp+0FCh+var_28]
		push	eax
		lea	edx, [esp+100h+var_DC]
		mov	ecx, ebx
		call	sub_10034480
		lea	ecx, [esp+100h+var_DC]
		push	ecx
		mov	ecx, [esp+104h+var_E8]
		lea	edx, [esp+104h+var_28]
		call	sub_10034480
		mov	eax, ebp
		lea	ebx, [esp+104h+var_70]
		lea	ecx, [esp+104h+var_94]
		call	sub_100339D0
		mov	eax, ecx
		mov	edx, ecx
		lea	ecx, [esp+104h+var_70]
		call	sub_10033920
		mov	edx, ecx
		push	edx
		call	sub_10033ED0
		lea	eax, [esp+108h+var_28]
		push	eax
		lea	edx, [esp+10Ch+var_70]
		lea	ecx, [esp+10Ch+var_94]
		call	sub_10034480
		mov	eax, [esp+10Ch+var_EC]
		lea	ebx, [esp+10Ch+var_DC]
		lea	ecx, [esp+10Ch+var_4C]
		call	sub_100339D0
		mov	eax, ecx
		mov	edx, ecx
		call	sub_10033920
		lea	ecx, [esp+10Ch+var_DC]
		push	ecx
		lea	edx, [esp+110h+var_70]
		mov	ecx, ebp
		call	sub_10034480
		mov	edx, [esp+110h+var_E4]
		push	edx
		lea	edx, [esp+114h+var_94]
		lea	ecx, [esp+114h+var_B8]
		call	sub_10034480
		lea	eax, [esp+114h+var_94]
		push	eax
		lea	ecx, [esp+118h+var_4C]
		call	sub_10033ED0
		lea	eax, [esp+118h+var_28]
		lea	ebx, [esp+118h+var_94]
		mov	ecx, esi
		call	sub_100339D0
		lea	eax, [esp+118h+var_DC]
		mov	ebx, esi
		call	sub_100339D0
		lea	eax, [esp+118h+var_DC]
		call	sub_100339D0
		mov	eax, esi
		lea	ebx, [esp+118h+var_DC]
		lea	ecx, [esp+118h+var_B8]
		call	sub_100339D0
		push	edi
		lea	edx, [esp+11Ch+var_4C]
		call	sub_10034480
		lea	ecx, [esp+11Ch+var_B8]
		push	ecx
		mov	ecx, [esp+120h+var_EC]
		lea	edx, [esp+120h+var_28]
		call	sub_10034480
		add	esp, 2Ch
		lea	eax, [esp+0F4h+var_B8]
		mov	ebx, edi
		mov	ecx, edi
		call	sub_100339D0
		lea	eax, [esp+0F4h+var_B8]
		call	sub_100339D0
		mov	ecx, [esp+0F4h+var_4]
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0ECh
		retn
sub_100356E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100358A0	proc near		; CODE XREF: sub_10036640+216p

var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= byte ptr -148h
var_124		= byte ptr -124h
var_100		= byte ptr -100h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 15Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+15Ch+var_4], eax
		mov	eax, [esp+15Ch+arg_0]
		push	ebx
		mov	ebx, [esp+160h+arg_4]
		mov	[esp+160h+var_150], ecx
		mov	ecx, [esp+160h+arg_10]
		push	ebp
		mov	ebp, [esp+164h+arg_8]
		mov	[esp+164h+var_14C], edx
		mov	[esp+164h+var_158], eax
		mov	eax, [esp+164h+arg_C]
		lea	edx, [esp+164h+var_124]
		mov	[esp+164h+var_15C], ecx
		push	edx
		mov	ecx, ebp
		mov	[esp+168h+var_154], eax
		call	sub_10033ED0
		mov	ecx, [esp+168h+var_15C]
		lea	eax, [esp+168h+var_100]
		push	eax
		call	sub_10033ED0
		lea	ecx, [esp+16Ch+var_28]
		push	ecx
		lea	edx, [esp+170h+var_100]
		mov	ecx, ebx
		call	sub_10034480
		mov	eax, [esp+170h+var_15C]
		mov	edx, ebp
		lea	ecx, [esp+170h+var_148]
		call	sub_10033920
		mov	edx, ecx
		push	edx
		call	sub_10033ED0
		lea	ebx, [esp+174h+var_148]
		lea	eax, [esp+174h+var_124]
		mov	ecx, ebx
		call	sub_100339D0
		lea	eax, [esp+174h+var_100]
		call	sub_100339D0
		mov	ecx, [esp+174h+var_15C]
		lea	eax, [esp+174h+var_DC]
		push	eax
		lea	edx, [esp+178h+var_100]
		call	sub_10034480
		lea	ecx, [esp+178h+var_4C]
		push	ecx
		mov	ecx, [esp+17Ch+var_150]
		lea	edx, [esp+17Ch+var_DC]
		call	sub_10034480
		mov	ecx, [esp+17Ch+var_14C]
		lea	edx, [esp+17Ch+var_94]
		push	edx
		lea	edx, [esp+180h+var_124]
		call	sub_10034480
		lea	eax, [esp+180h+var_DC]
		push	eax
		lea	edx, [esp+184h+var_124]
		mov	ecx, ebp
		call	sub_10034480
		lea	ecx, [esp+184h+var_70]
		push	ecx
		mov	ecx, [esp+188h+var_154]
		lea	edx, [esp+188h+var_DC]
		call	sub_10034480
		lea	eax, [esp+188h+var_28]
		lea	ebx, [esp+188h+var_94]
		lea	ecx, [esp+188h+var_100]
		call	sub_100339D0
		mov	eax, ecx
		mov	edx, ecx
		lea	ecx, [esp+188h+var_124]
		call	sub_10033920
		mov	edx, ecx
		push	edx
		call	sub_10033ED0
		lea	eax, [esp+18Ch+var_DC]
		push	eax
		lea	edx, [esp+190h+var_124]
		lea	ecx, [esp+190h+var_100]
		call	sub_10034480
		lea	eax, [esp+190h+var_4C]
		lea	ebx, [esp+190h+var_70]
		lea	ecx, [esp+190h+var_B8]
		call	sub_100339D0
		mov	eax, ecx
		mov	edx, ecx
		call	sub_10033920
		lea	ecx, [esp+190h+var_94]
		push	ecx
		lea	edx, [esp+194h+var_124]
		lea	ecx, [esp+194h+var_28]
		call	sub_10034480
		mov	edx, [esp+194h+var_158]
		push	edx
		lea	edx, [esp+198h+var_100]
		lea	ecx, [esp+198h+var_148]
		call	sub_10034480
		lea	eax, [esp+198h+var_70]
		push	eax
		lea	ecx, [esp+19Ch+var_B8]
		call	sub_10033ED0
		lea	eax, [esp+19Ch+var_DC]
		lea	ebx, [esp+19Ch+var_70]
		mov	ecx, esi
		call	sub_100339D0
		lea	eax, [esp+19Ch+var_94]
		mov	ebx, esi
		call	sub_100339D0
		lea	eax, [esp+19Ch+var_94]
		call	sub_100339D0
		mov	eax, esi
		lea	ebx, [esp+19Ch+var_94]
		lea	ecx, [esp+19Ch+var_148]
		call	sub_100339D0
		push	edi
		lea	edx, [esp+1A0h+var_B8]
		call	sub_10034480
		lea	ecx, [esp+1A0h+var_148]
		push	ecx
		lea	edx, [esp+1A4h+var_DC]
		lea	ecx, [esp+1A4h+var_4C]
		call	sub_10034480
		add	esp, 40h
		lea	eax, [esp+164h+var_148]
		mov	ebx, edi
		mov	ecx, edi
		call	sub_100339D0
		lea	eax, [esp+164h+var_148]
		call	sub_100339D0
		mov	ecx, [esp+164h+var_4]
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 15Ch
		retn
sub_100358A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035B00	proc near		; CODE XREF: sub_10037100+246p

var_161		= byte ptr -161h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= byte ptr -148h
var_124		= byte ptr -124h
var_100		= byte ptr -100h
var_DC		= byte ptr -0DCh
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 164h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+164h+var_4], eax
		mov	eax, [esp+164h+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+16Ch+arg_C]
		mov	[esp+16Ch+var_15C], eax
		mov	eax, [esp+16Ch+arg_8]
		push	esi
		mov	esi, [esp+170h+arg_4]
		mov	[esp+170h+var_160], ecx
		mov	ecx, [esp+170h+arg_10]
		mov	[esp+170h+var_154], eax
		push	edi
		mov	edi, [esp+174h+arg_18]
		mov	[esp+174h+var_158], edx
		mov	edx, [esp+174h+arg_14]
		lea	eax, [esp+174h+var_124]
		mov	[esp+174h+var_150], ecx
		push	eax
		mov	ecx, ebp
		mov	[esp+178h+var_14C], edx
		call	sub_10033ED0
		lea	ecx, [esp+178h+var_100]
		push	ecx
		mov	ecx, edi
		call	sub_10033ED0
		lea	edx, [esp+17Ch+var_28]
		push	edx
		lea	edx, [esp+180h+var_100]
		mov	ecx, esi
		call	sub_10034480
		mov	eax, edi
		mov	edx, ebp
		lea	ecx, [esp+180h+var_148]
		call	sub_10033920
		mov	eax, ecx
		push	eax
		call	sub_10033ED0
		lea	ebx, [esp+184h+var_148]
		lea	eax, [esp+184h+var_124]
		mov	ecx, ebx
		call	sub_100339D0
		lea	eax, [esp+184h+var_100]
		call	sub_100339D0
		lea	ecx, [esp+184h+var_DC]
		push	ecx
		lea	edx, [esp+188h+var_100]
		mov	ecx, edi
		call	sub_10034480
		mov	edi, [esp+188h+var_154]
		lea	edx, [esp+188h+var_4C]
		push	edx
		lea	edx, [esp+18Ch+var_DC]
		mov	ecx, edi
		call	sub_10034480
		mov	ecx, [esp+18Ch+var_150]
		lea	eax, [esp+18Ch+var_94]
		push	eax
		lea	edx, [esp+190h+var_124]
		call	sub_10034480
		lea	ecx, [esp+190h+var_DC]
		push	ecx
		lea	edx, [esp+194h+var_124]
		mov	ecx, ebp
		call	sub_10034480
		mov	ecx, [esp+194h+var_14C]
		lea	edx, [esp+194h+var_70]
		push	edx
		lea	edx, [esp+198h+var_DC]
		call	sub_10034480
		lea	eax, [esp+198h+var_28]
		lea	ebx, [esp+198h+var_94]
		lea	ecx, [esp+198h+var_124]
		call	sub_100339D0
		call	sub_10035400
		mov	[esp+198h+var_161], al
		lea	eax, [esp+198h+var_124]
		mov	edx, eax
		lea	ecx, [esp+198h+var_100]
		call	sub_10033920
		mov	eax, ecx
		push	eax
		call	sub_10033ED0
		lea	ecx, [esp+19Ch+var_DC]
		push	ecx
		lea	edx, [esp+1A0h+var_100]
		lea	ecx, [esp+1A0h+var_124]
		call	sub_10034480
		add	esp, 2Ch
		lea	eax, [esp+174h+var_4C]
		lea	ebx, [esp+174h+var_70]
		lea	ecx, [esp+174h+var_B8]
		call	sub_100339D0
		cmp	[esp+174h+var_161], 0
		jz	short loc_10035CCB
		call	sub_10035400
		test	al, al
		jz	short loc_10035CCB
		mov	edx, [esp+174h+var_160]
		mov	ecx, [esp+174h+var_158]
		push	ebp
		push	edx
		mov	edx, esi
		mov	esi, [esp+17Ch+var_15C]
		call	sub_10035570
		add	esp, 8
		jmp	loc_10035D9C
; ---------------------------------------------------------------------------

loc_10035CCB:				; CODE XREF: sub_10035B00+1A3j
					; sub_10035B00+1ACj
		lea	eax, [esp+174h+var_B8]
		mov	edx, eax
		mov	ecx, eax
		call	sub_10033920
		lea	eax, [esp+174h+var_94]
		push	eax
		lea	edx, [esp+178h+var_100]
		lea	ecx, [esp+178h+var_28]
		call	sub_10034480
		mov	ecx, [esp+178h+var_158]
		push	ecx
		lea	edx, [esp+17Ch+var_124]
		lea	ecx, [esp+17Ch+var_148]
		call	sub_10034480
		lea	edx, [esp+17Ch+var_70]
		push	edx
		lea	ecx, [esp+180h+var_B8]
		call	sub_10033ED0
		mov	ecx, [esp+180h+var_15C]
		lea	eax, [esp+180h+var_DC]
		lea	ebx, [esp+180h+var_70]
		call	sub_100339D0
		lea	eax, [esp+180h+var_94]
		mov	ebx, ecx
		call	sub_100339D0
		lea	eax, [esp+180h+var_94]
		call	sub_100339D0
		mov	eax, ecx
		lea	ebx, [esp+180h+var_94]
		lea	ecx, [esp+180h+var_148]
		call	sub_100339D0
		mov	ebx, [esp+180h+var_160]
		push	ebx
		lea	edx, [esp+184h+var_B8]
		call	sub_10034480
		lea	eax, [esp+184h+var_148]
		push	eax
		lea	edx, [esp+188h+var_DC]
		lea	ecx, [esp+188h+var_4C]
		call	sub_10034480
		add	esp, 14h
		lea	eax, [esp+174h+var_148]
		mov	ecx, ebx
		call	sub_100339D0
		lea	eax, [esp+174h+var_148]
		call	sub_100339D0

loc_10035D9C:				; CODE XREF: sub_10035B00+1C6j
		mov	ecx, [esp+174h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 164h
		retn
sub_10035B00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035DC0	proc near		; CODE XREF: sub_10036020+15Ep

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		mov	esi, eax
		xor	eax, eax
		mov	[edx], eax
		mov	[edx+4], eax
		mov	[edx+8], eax
		mov	[edx+0Ch], eax
		mov	[edx+10h], eax
		mov	[edx+14h], eax
		mov	[edx+18h], eax
		mov	[edx+1Ch], eax
		mov	[edx+20h], eax
		mov	[ecx], eax
		mov	[ecx+4], eax
		mov	[ecx+8], eax
		mov	[ecx+0Ch], eax
		mov	[ecx+10h], eax
		mov	[ecx+14h], eax
		mov	[ecx+18h], eax
		mov	[ecx+1Ch], eax
		push	edi
		mov	[ecx+20h], eax
		mov	ebx, 1

loc_10035E05:				; CODE XREF: sub_10035DC0+EEj
		mov	edi, ebx
		xor	edi, ebp
		mov	eax, edi
		shr	eax, 2
		or	edi, eax
		mov	eax, edi
		shr	eax, 1
		or	eax, edi
		mov	edi, [esi]
		and	eax, 1
		dec	eax
		and	edi, eax
		or	[edx], edi
		mov	edi, [esi+4]
		and	edi, eax
		or	[edx+4], edi
		mov	edi, [esi+8]
		and	edi, eax
		or	[edx+8], edi
		mov	edi, [esi+0Ch]
		and	edi, eax
		or	[edx+0Ch], edi
		mov	edi, [esi+10h]
		and	edi, eax
		or	[edx+10h], edi
		mov	edi, [esi+14h]
		and	edi, eax
		or	[edx+14h], edi
		mov	edi, [esi+18h]
		and	edi, eax
		or	[edx+18h], edi
		mov	edi, [esi+1Ch]
		and	edi, eax
		or	[edx+1Ch], edi
		mov	edi, [esi+20h]
		and	edi, eax
		or	[edx+20h], edi
		mov	edi, [esi+24h]
		and	edi, eax
		or	[ecx], edi
		mov	edi, [esi+28h]
		and	edi, eax
		or	[ecx+4], edi
		mov	edi, [esi+2Ch]
		and	edi, eax
		or	[ecx+8], edi
		mov	edi, [esi+30h]
		and	edi, eax
		or	[ecx+0Ch], edi
		mov	edi, [esi+34h]
		and	edi, eax
		or	[ecx+10h], edi
		mov	edi, [esi+38h]
		and	edi, eax
		or	[ecx+14h], edi
		mov	edi, [esi+3Ch]
		and	edi, eax
		or	[ecx+18h], edi
		mov	edi, [esi+40h]
		and	edi, eax
		or	[ecx+1Ch], edi
		mov	edi, [esi+44h]
		and	edi, eax
		or	[ecx+20h], edi
		inc	ebx
		add	esi, 48h
		cmp	ebx, 10h
		jb	loc_10035E05
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10035DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10035EC0	proc near		; CODE XREF: sub_10036640+1EDp

arg_0		= dword	ptr  4

		xor	eax, eax
		mov	[edi], eax
		mov	[edi+4], eax
		mov	[edi+8], eax
		mov	[edi+0Ch], eax
		mov	[edi+10h], eax
		mov	[edi+14h], eax
		mov	[edi+18h], eax
		mov	[edi+1Ch], eax
		mov	[edi+20h], eax
		mov	[esi], eax
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		mov	[esi+10h], eax
		mov	[esi+14h], eax
		mov	[esi+18h], eax
		mov	[esi+1Ch], eax
		mov	[esi+20h], eax
		mov	[edx], eax
		mov	[edx+4], eax
		mov	[edx+8], eax
		mov	[edx+0Ch], eax
		mov	[edx+10h], eax
		mov	[edx+14h], eax
		push	ebx
		mov	[edx+18h], eax
		push	ebp
		mov	[edx+1Ch], eax
		mov	[edx+20h], eax
		add	ecx, 6Ch
		mov	ebp, 1
		lea	ebx, [ebx+0]

loc_10035F20:				; CODE XREF: sub_10035EC0+152j
		mov	ebx, ebp
		xor	ebx, [esp+8+arg_0]
		mov	eax, ebx
		shr	eax, 2
		or	ebx, eax
		mov	eax, ebx
		shr	eax, 1
		or	eax, ebx
		mov	ebx, [ecx]
		and	eax, 1
		dec	eax
		and	ebx, eax
		or	[edi], ebx
		mov	ebx, [ecx+4]
		and	ebx, eax
		or	[edi+4], ebx
		mov	ebx, [ecx+8]
		and	ebx, eax
		or	[edi+8], ebx
		mov	ebx, [ecx+0Ch]
		and	ebx, eax
		or	[edi+0Ch], ebx
		mov	ebx, [ecx+10h]
		and	ebx, eax
		or	[edi+10h], ebx
		mov	ebx, [ecx+14h]
		and	ebx, eax
		or	[edi+14h], ebx
		mov	ebx, [ecx+18h]
		and	ebx, eax
		or	[edi+18h], ebx
		mov	ebx, [ecx+1Ch]
		and	ebx, eax
		or	[edi+1Ch], ebx
		mov	ebx, [ecx+20h]
		and	ebx, eax
		or	[edi+20h], ebx
		mov	ebx, [ecx+24h]
		and	ebx, eax
		or	[esi], ebx
		mov	ebx, [ecx+28h]
		and	ebx, eax
		or	[esi+4], ebx
		mov	ebx, [ecx+2Ch]
		and	ebx, eax
		or	[esi+8], ebx
		mov	ebx, [ecx+30h]
		and	ebx, eax
		or	[esi+0Ch], ebx
		mov	ebx, [ecx+34h]
		and	ebx, eax
		or	[esi+10h], ebx
		mov	ebx, [ecx+38h]
		and	ebx, eax
		or	[esi+14h], ebx
		mov	ebx, [ecx+3Ch]
		and	ebx, eax
		or	[esi+18h], ebx
		mov	ebx, [ecx+40h]
		and	ebx, eax
		or	[esi+1Ch], ebx
		mov	ebx, [ecx+44h]
		and	ebx, eax
		or	[esi+20h], ebx
		mov	ebx, [ecx+48h]
		and	ebx, eax
		or	[edx], ebx
		mov	ebx, [ecx+4Ch]
		and	ebx, eax
		or	[edx+4], ebx
		mov	ebx, [ecx+50h]
		and	ebx, eax
		or	[edx+8], ebx
		mov	ebx, [ecx+54h]
		and	ebx, eax
		or	[edx+0Ch], ebx
		mov	ebx, [ecx+58h]
		and	ebx, eax
		or	[edx+10h], ebx
		mov	ebx, [ecx+5Ch]
		and	ebx, eax
		or	[edx+14h], ebx
		mov	ebx, [ecx+60h]
		and	ebx, eax
		or	[edx+18h], ebx
		mov	ebx, [ecx+64h]
		and	ebx, eax
		or	[edx+1Ch], ebx
		mov	ebx, [ecx+68h]
		and	ebx, eax
		or	[edx+20h], ebx
		inc	ebp
		add	ecx, 6Ch
		cmp	ebp, 10h
		jb	loc_10035F20
		pop	ebp
		pop	ebx
		retn
sub_10035EC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036020	proc near		; CODE XREF: sub_10036E60+81p
					; sub_10037100+193p

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0D8h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0D8h+var_4], eax
		push	ebp
		push	esi
		push	edi
		xor	eax, eax
		mov	ebp, [esp+0E4h+arg_0]
		mov	[ebp+0], eax
		mov	[ebp+4], eax
		mov	[ebp+8], eax
		mov	[ebp+0Ch], eax
		mov	[ebp+10h], eax
		mov	[ebp+14h], eax
		mov	[ebp+18h], eax
		mov	[ebp+1Ch], eax
		mov	[ebp+20h], eax
		mov	[ebx], eax
		mov	[ebx+4], eax
		mov	[ebx+8], eax
		mov	[ebx+0Ch], eax
		mov	[ebx+10h], eax
		mov	[ebx+14h], eax
		mov	[ebx+18h], eax
		mov	[ebx+1Ch], eax
		mov	[ebx+20h], eax
		mov	[ecx], eax
		mov	[ecx+4], eax
		mov	[ecx+8], eax
		mov	[ecx+0Ch], eax
		mov	[ecx+10h], eax
		mov	[ecx+14h], eax
		mov	[ecx+18h], eax
		mov	[ecx+1Ch], eax
		mov	[esp+0E4h+var_C8], ecx
		mov	[esp+0E4h+var_BC], 0FFFFFFFFh
		mov	[ecx+20h], eax
		mov	[esp+0E4h+var_D4], eax
		mov	[esp+0E4h+var_D0], 5Fh
		jmp	short loc_100360B4
; ---------------------------------------------------------------------------
		align 10h

loc_100360B0:				; CODE XREF: sub_10036020+577j
		mov	ecx, [esp+0E4h+var_C8]

loc_100360B4:				; CODE XREF: sub_10036020+87j
		cmp	[esp+0E4h+var_D4], 0
		jz	short loc_100360CB
		push	ecx
		push	ebx
		mov	edi, ebx
		mov	edx, ebp
		mov	esi, ebp
		call	sub_10035570
		add	esp, 8

loc_100360CB:				; CODE XREF: sub_10036020+99j
		mov	eax, [esp+0E4h+var_D0]
		mov	[esp+0E4h+var_C0], offset dword_10047748
		mov	[esp+0E4h+var_CC], eax
		mov	[esp+0E4h+var_C4], 2
		jmp	short loc_100360F4
; ---------------------------------------------------------------------------
		jmp	short loc_100360F0
; ---------------------------------------------------------------------------
		align 10h

loc_100360F0:				; CODE XREF: sub_10036020+C5j
					; sub_10036020+561j
		mov	eax, [esp+0E4h+var_CC]

loc_100360F4:				; CODE XREF: sub_10036020+C3j
		mov	esi, [esp+0E4h+arg_4]
		lea	ecx, [eax-40h]
		mov	[esp+0E4h+var_D8], ecx
		lea	edx, [eax+80h]
		sar	edx, 3
		movzx	edx, byte ptr [edx+esi]
		mov	cl, al
		and	cl, 7
		shr	dl, cl
		lea	ecx, [eax+40h]
		and	dl, 1
		movsx	edi, dl
		mov	edx, ecx
		sar	edx, 3
		movzx	edx, byte ptr [edx+esi]
		and	cl, 7
		shr	dl, cl
		add	edi, edi
		and	dl, 1
		movsx	ecx, dl
		or	edi, ecx
		mov	edx, eax
		mov	cl, al
		sar	edx, 3
		movzx	eax, byte ptr [edx+esi]
		and	cl, 7
		shr	al, cl
		add	edi, edi
		and	al, 1
		movsx	ecx, al
		or	edi, ecx
		mov	ecx, [esp+0E4h+var_D8]
		mov	edx, ecx
		sar	edx, 3
		movzx	eax, byte ptr [edx+esi]
		mov	esi, [esp+0E4h+var_C0]
		and	cl, 7
		shr	al, cl
		add	edi, edi
		lea	edx, [esp+0E4h+var_94]
		and	al, 1
		movsx	ecx, al
		or	edi, ecx
		push	edi
		mov	eax, esi
		lea	ecx, [esp+0E8h+var_B8]
		mov	[esp+0E8h+var_D8], edi
		call	sub_10035DC0
		mov	eax, [esp+0E8h+var_C8]
		mov	edx, ecx
		push	edx
		push	eax
		add	esi, 438h
		lea	ecx, [esp+0F0h+var_28]
		push	ebp
		push	ecx
		mov	[esp+0F8h+var_C0], esi
		lea	edx, [esp+0F8h+var_94]
		mov	ecx, ebx
		lea	edi, [esp+0F8h+var_4C]
		lea	esi, [esp+0F8h+var_70]
		call	sub_100356E0
		mov	eax, [ebp+0]
		mov	edx, [esp+0F8h+var_BC]
		mov	ecx, eax
		xor	ecx, [esp+0F8h+var_94]
		add	esp, 14h
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebp+4]
		mov	[ebp+0], ecx
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_90]
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebp+8]
		mov	[ebp+4], ecx
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_8C]
		and	ecx, edx
		xor	ecx, eax
		mov	[ebp+8], ecx
		mov	eax, [ebp+0Ch]
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_88]
		and	ecx, edx
		xor	ecx, eax
		mov	[ebp+0Ch], ecx
		mov	eax, [ebp+10h]
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_84]
		and	ecx, edx
		xor	ecx, eax
		mov	[ebp+10h], ecx
		mov	eax, [ebp+14h]
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_80]
		and	ecx, edx
		xor	ecx, eax
		mov	[ebp+14h], ecx
		mov	eax, [ebp+18h]
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_7C]
		and	ecx, edx
		xor	ecx, eax
		mov	[ebp+18h], ecx
		mov	eax, [ebp+1Ch]
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_78]
		and	ecx, edx
		xor	ecx, eax
		mov	[ebp+1Ch], ecx
		mov	eax, [ebp+20h]
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_74]
		and	ecx, edx
		xor	ecx, eax
		mov	[ebp+20h], ecx
		mov	eax, [ebx]
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_B8]
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+4]
		mov	[ebx], ecx
		mov	ecx, eax
		xor	ecx, [esp+0E4h+var_B4]
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+8]
		mov	[ebx+4], ecx
		mov	ecx, [esp+0E4h+var_B0]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+0Ch]
		mov	[ebx+8], ecx
		mov	ecx, [esp+0E4h+var_AC]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+10h]
		mov	[ebx+0Ch], ecx
		mov	ecx, [esp+0E4h+var_A8]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+14h]
		mov	[ebx+10h], ecx
		mov	ecx, [esp+0E4h+var_A4]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+18h]
		mov	[ebx+14h], ecx
		mov	ecx, [esp+0E4h+var_A0]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+1Ch]
		mov	[ebx+18h], ecx
		mov	ecx, [esp+0E4h+var_9C]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+20h]
		mov	[ebx+1Ch], ecx
		mov	ecx, [esp+0E4h+var_98]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [esp+0E4h+var_C8]
		mov	[ebx+20h], ecx
		mov	ecx, [eax]
		mov	esi, ecx
		xor	esi, 2
		and	esi, edx
		xor	esi, ecx
		mov	[eax], esi
		mov	ecx, [eax+0Ch]
		mov	esi, edx
		not	esi
		and	esi, [eax+4]
		mov	[eax+4], esi
		mov	esi, edx
		not	esi
		and	esi, [eax+8]
		mov	[eax+8], esi
		mov	esi, ecx
		xor	esi, 0FFFF800h
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+10h]
		mov	[eax+0Ch], esi
		mov	esi, ecx
		xor	esi, 1FFFFFFFh
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+14h]
		mov	[eax+10h], esi
		mov	esi, ecx
		xor	esi, 0FFFFFFFh
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+18h]
		mov	[eax+14h], esi
		mov	esi, ecx
		xor	esi, 1FBFFFFFh
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+1Ch]
		mov	[eax+18h], esi
		mov	esi, ecx
		xor	esi, 1FFFFFFh
		and	esi, edx
		xor	esi, ecx
		mov	[eax+1Ch], esi
		mov	esi, edx
		not	esi
		and	esi, [eax+20h]
		mov	ecx, edx
		mov	[eax+20h], esi
		mov	esi, [esp+0E4h+var_D8]
		dec	esi
		shr	esi, 1Fh
		dec	esi
		mov	[esp+0E4h+var_D8], esi
		not	ecx
		and	ecx, esi
		mov	esi, [ebp+0]
		mov	edi, esi
		xor	edi, [esp+0E4h+var_70]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+4]
		mov	[ebp+0], edi
		mov	edi, esi
		xor	edi, [esp+0E4h+var_6C]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+8]
		mov	[ebp+4], edi
		mov	edi, esi
		xor	edi, [esp+0E4h+var_68]
		and	edi, ecx
		xor	edi, esi
		mov	[ebp+8], edi
		mov	esi, [ebp+0Ch]
		mov	edi, esi
		xor	edi, [esp+0E4h+var_64]
		and	edi, ecx
		xor	edi, esi
		mov	[ebp+0Ch], edi
		mov	esi, [ebp+10h]
		mov	edi, esi
		xor	edi, [esp+0E4h+var_60]
		and	edi, ecx
		xor	edi, esi
		mov	[ebp+10h], edi
		mov	esi, [ebp+14h]
		mov	edi, [esp+0E4h+var_5C]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebp+14h], edi
		mov	esi, [ebp+18h]
		mov	edi, [esp+0E4h+var_58]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebp+18h], edi
		mov	esi, [ebp+1Ch]
		mov	edi, [esp+0E4h+var_54]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebp+1Ch], edi
		mov	esi, [ebp+20h]
		mov	edi, [esp+0E4h+var_50]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebp+20h], edi
		mov	esi, [ebx]
		mov	edi, [esp+0E4h+var_4C]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+4]
		mov	[ebx], edi
		mov	edi, [esp+0E4h+var_48]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+8]
		mov	[ebx+4], edi
		mov	edi, [esp+0E4h+var_44]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+0Ch]
		mov	[ebx+8], edi
		mov	edi, [esp+0E4h+var_40]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+10h]
		mov	[ebx+0Ch], edi
		mov	edi, [esp+0E4h+var_3C]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+14h]
		mov	[ebx+10h], edi
		mov	edi, [esp+0E4h+var_38]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+18h]
		mov	[ebx+14h], edi
		mov	edi, [esp+0E4h+var_34]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebx+18h], edi
		mov	esi, [ebx+1Ch]
		mov	edi, [esp+0E4h+var_30]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebx+1Ch], edi
		mov	esi, [ebx+20h]
		mov	edi, [esp+0E4h+var_2C]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebx+20h], edi
		mov	esi, [eax]
		mov	edi, [esp+0E4h+var_28]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+4]
		mov	[eax], edi
		mov	edi, [esp+0E4h+var_24]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+8]
		mov	[eax+4], edi
		mov	edi, [esp+0E4h+var_20]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+0Ch]
		mov	[eax+8], edi
		mov	edi, [esp+0E4h+var_1C]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+10h]
		mov	[eax+0Ch], edi
		mov	edi, [esp+0E4h+var_18]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+14h]
		mov	[eax+10h], edi
		mov	edi, [esp+0E4h+var_14]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+18h]
		mov	[eax+14h], edi
		mov	edi, [esp+0E4h+var_10]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+1Ch]
		mov	[eax+18h], edi
		add	[esp+0E4h+var_CC], 20h
		mov	edi, esi
		xor	edi, [esp+0E4h+var_C]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+20h]
		mov	[eax+1Ch], edi
		mov	edi, esi
		xor	edi, [esp+0E4h+var_8]
		and	edi, ecx
		xor	edi, esi
		mov	[eax+20h], edi
		mov	eax, [esp+0E4h+var_D8]
		not	eax
		and	edx, eax
		dec	[esp+0E4h+var_C4]
		mov	[esp+0E4h+var_BC], edx
		jnz	loc_100360F0
		mov	eax, [esp+0E4h+var_D0]
		inc	[esp+0E4h+var_D4]
		dec	eax
		mov	[esp+0E4h+var_D0], eax
		cmp	eax, 3Fh
		jg	loc_100360B0
		mov	ecx, [esp+0E4h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0D8h
		retn
sub_10036020	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100365C0	proc near		; CODE XREF: sub_10037100+26Dp

var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 50h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+50h+var_4], eax
		mov	eax, [esp+50h+arg_4]
		push	ebx
		mov	ebx, ecx
		push	ebp
		mov	ebp, [esp+58h+arg_0]
		lea	ecx, [esp+58h+var_4C]
		push	ecx
		mov	[esp+5Ch+var_50], eax
		call	sub_10034E80
		lea	edx, [esp+5Ch+var_28]
		push	edx
		lea	ecx, [esp+60h+var_4C]
		call	sub_10033ED0
		push	esi
		lea	edx, [esp+64h+var_28]
		mov	ecx, ebp
		call	sub_10034480
		lea	eax, [esp+64h+var_4C]
		push	eax
		lea	edx, [esp+68h+var_28]
		mov	ecx, eax
		call	sub_10034480
		mov	ecx, [esp+68h+var_50]
		push	edi
		lea	edx, [esp+6Ch+var_4C]
		call	sub_10034480
		mov	ecx, [esp+6Ch+var_4]
		add	esp, 14h
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 50h
		retn
sub_100365C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036640	proc near		; CODE XREF: sub_10036F80+D1p
					; sub_10037100+1BDp

var_7B4		= dword	ptr -7B4h
var_7B0		= dword	ptr -7B0h
var_7AC		= dword	ptr -7ACh
var_7A8		= dword	ptr -7A8h
var_7A4		= dword	ptr -7A4h
var_7A0		= dword	ptr -7A0h
var_79C		= dword	ptr -79Ch
var_798		= dword	ptr -798h
var_794		= dword	ptr -794h
var_790		= dword	ptr -790h
var_78C		= dword	ptr -78Ch
var_788		= dword	ptr -788h
var_784		= dword	ptr -784h
var_780		= dword	ptr -780h
var_77C		= dword	ptr -77Ch
var_778		= dword	ptr -778h
var_774		= dword	ptr -774h
var_770		= dword	ptr -770h
var_76C		= dword	ptr -76Ch
var_768		= dword	ptr -768h
var_764		= dword	ptr -764h
var_760		= dword	ptr -760h
var_75C		= dword	ptr -75Ch
var_758		= dword	ptr -758h
var_754		= dword	ptr -754h
var_750		= dword	ptr -750h
var_74C		= dword	ptr -74Ch
var_748		= dword	ptr -748h
var_744		= dword	ptr -744h
var_740		= dword	ptr -740h
var_73C		= dword	ptr -73Ch
var_738		= dword	ptr -738h
var_734		= dword	ptr -734h
var_730		= dword	ptr -730h
var_72C		= dword	ptr -72Ch
var_728		= dword	ptr -728h
var_724		= dword	ptr -724h
var_720		= dword	ptr -720h
var_71C		= dword	ptr -71Ch
var_718		= dword	ptr -718h
var_714		= dword	ptr -714h
var_710		= dword	ptr -710h
var_70C		= dword	ptr -70Ch
var_708		= dword	ptr -708h
var_704		= dword	ptr -704h
var_700		= dword	ptr -700h
var_6FC		= dword	ptr -6FCh
var_6F8		= dword	ptr -6F8h
var_6F4		= dword	ptr -6F4h
var_6F0		= dword	ptr -6F0h
var_6EC		= dword	ptr -6ECh
var_6E8		= dword	ptr -6E8h
var_6E4		= dword	ptr -6E4h
var_6E0		= dword	ptr -6E0h
var_6DC		= dword	ptr -6DCh
var_6D8		= dword	ptr -6D8h
var_6D4		= dword	ptr -6D4h
var_6D0		= dword	ptr -6D0h
var_6CC		= dword	ptr -6CCh
var_6C8		= dword	ptr -6C8h
Dst		= byte ptr -6C4h
var_6A0		= byte ptr -6A0h
var_67C		= byte ptr -67Ch
var_658		= byte ptr -658h
var_634		= byte ptr -634h
var_610		= byte ptr -610h
var_5C8		= byte ptr -5C8h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 7B4h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+7B4h+var_4], eax
		mov	eax, [esp+7B4h+arg_4]
		push	ebp
		mov	ebp, [esp+7B8h+arg_0]
		push	esi
		push	edi
		mov	esi, edx
		push	6Ch		; Size
		lea	edx, [esp+7C4h+Dst]
		push	0		; Val
		push	edx		; Dst
		mov	[esp+7CCh+var_7AC], eax
		mov	[esp+7CCh+var_7A4], esi
		mov	[esp+7CCh+var_7A8], ecx
		call	memset
		mov	ecx, 9
		lea	edi, [esp+7CCh+var_658]
		rep movsd
		mov	esi, [esp+7CCh+var_7A8]
		mov	ecx, 9
		lea	edi, [esp+7CCh+var_634]
		rep movsd
		mov	ecx, 9
		mov	esi, offset dword_100476B8
		lea	edi, [esp+7CCh+var_610]
		rep movsd
		lea	ecx, [esp+7CCh+var_5C8]
		add	esp, 0Ch
		mov	[esp+7C0h+var_7B0], 2
		mov	[esp+7C0h+var_7B4], ecx
		jmp	short loc_100366D4
; ---------------------------------------------------------------------------
		align 10h

loc_100366D0:				; CODE XREF: sub_10036640+108j
		mov	ecx, [esp+7C0h+var_7B4]

loc_100366D4:				; CODE XREF: sub_10036640+8Dj
		mov	eax, [esp+7C0h+var_7B0]
		shr	eax, 1
		imul	eax, 6Ch
		lea	edx, [ecx+24h]
		mov	[esp+7C0h+var_7A0], edx
		lea	edx, [esp+eax+7C0h+var_67C]
		push	edx
		lea	esi, [ecx-24h]
		push	ecx
		mov	ecx, [esp+7C8h+var_7A0]
		lea	edi, [esp+eax+7C8h+var_6A0]
		lea	edx, [esp+eax+7C8h+Dst]
		call	sub_10035570
		mov	eax, [esp+7C8h+var_7A8]
		mov	ecx, [esp+7C8h+var_7B4]
		push	eax
		mov	eax, [esp+7CCh+var_7B4]
		add	eax, 24h
		push	eax
		lea	edx, [ecx+90h]
		push	esi
		push	edx
		mov	edx, [esp+7D8h+var_7A4]
		lea	edi, [ecx+6Ch]
		lea	esi, [ecx+48h]
		call	sub_100356E0
		mov	eax, [esp+7D8h+var_7B0]
		add	[esp+7D8h+var_7B4], 0D8h
		add	eax, 2
		add	esp, 18h
		mov	[esp+7C0h+var_7B0], eax
		cmp	eax, 10h
		jl	short loc_100366D0
		xor	eax, eax
		mov	[ebp+0], eax
		mov	ecx, [esp+7C0h+var_7AC]
		mov	[ebp+4], eax
		mov	[ebp+8], eax
		mov	[ebp+0Ch], eax
		mov	[ebp+10h], eax
		mov	[ebp+14h], eax
		mov	[ebp+18h], eax
		mov	[ebp+1Ch], eax
		mov	[ebp+20h], eax
		mov	[ebx], eax
		mov	[ebx+4], eax
		mov	[ebx+8], eax
		mov	[ebx+0Ch], eax
		mov	[ebx+10h], eax
		mov	[ebx+14h], eax
		mov	[ebx+18h], eax
		mov	[ebx+1Ch], eax
		mov	[ebx+20h], eax
		mov	[ecx], eax
		mov	[ecx+4], eax
		mov	[ecx+8], eax
		mov	[ecx+0Ch], eax
		mov	[ecx+10h], eax
		mov	[ecx+14h], eax
		mov	[ecx+18h], eax
		xor	edx, edx
		mov	[ecx+1Ch], eax
		mov	[ecx+20h], eax
		mov	[esp+7C0h+var_7B4], 0FFFFFFFFh
		mov	[esp+7C0h+var_7B0], edx
		jmp	short loc_100367B8
; ---------------------------------------------------------------------------
		align 10h

loc_100367B0:				; CODE XREF: sub_10036640+606j
		mov	ecx, [esp+7C0h+var_7AC]
		mov	edx, [esp+7C0h+var_7B0]

loc_100367B8:				; CODE XREF: sub_10036640+16Dj
		test	edx, edx
		jz	short loc_100367F7
		push	ecx
		push	ebx
		mov	edi, ebx
		mov	edx, ebp
		mov	esi, ebp
		call	sub_10035570
		mov	ecx, [esp+7C8h+var_7AC]
		push	ecx
		push	ebx
		mov	edx, ebp
		call	sub_10035570
		mov	ecx, [esp+7D0h+var_7AC]
		push	ecx
		push	ebx
		mov	edx, ebp
		call	sub_10035570
		mov	ecx, [esp+7D8h+var_7AC]
		push	ecx
		push	ebx
		mov	edx, ebp
		call	sub_10035570
		mov	edx, [esp+7E0h+var_7B0]
		add	esp, 20h

loc_100367F7:				; CODE XREF: sub_10036640+17Aj
		mov	ecx, [esp+7C0h+arg_8]
		mov	eax, edx
		shr	eax, 1
		sub	ecx, eax
		movzx	eax, byte ptr [ecx+1Fh]
		test	dl, 1
		jz	short loc_10036812
		and	eax, 0Fh
		jmp	short loc_10036815
; ---------------------------------------------------------------------------

loc_10036812:				; CODE XREF: sub_10036640+1CBj
		shr	eax, 4

loc_10036815:				; CODE XREF: sub_10036640+1D0j
		push	eax
		lea	ecx, [esp+7C4h+Dst]
		lea	edx, [esp+7C4h+var_754]
		lea	esi, [esp+7C4h+var_778]
		lea	edi, [esp+7C4h+var_79C]
		mov	[esp+7C4h+var_7A8], eax
		call	sub_10035EC0
		mov	ecx, [esp+7C4h+var_7AC]
		push	edx
		mov	eax, esi
		push	eax
		push	ecx
		lea	edx, [esp+7D0h+var_70C]
		push	ebp
		push	edx
		mov	edx, edi
		mov	ecx, ebx
		lea	edi, [esp+7D8h+var_6E8]
		lea	esi, [esp+7D8h+var_730]
		call	sub_100358A0
		mov	edx, [esp+7D8h+var_7B4]
		mov	eax, [ebp+0]
		mov	ecx, eax
		xor	ecx, [esp+7D8h+var_79C]
		add	esp, 18h
		and	ecx, edx
		xor	ecx, eax
		mov	[ebp+0], ecx
		mov	eax, [ebp+4]
		mov	ecx, eax
		xor	ecx, [esp+7C0h+var_798]
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebp+8]
		mov	[ebp+4], ecx
		mov	ecx, eax
		xor	ecx, [esp+7C0h+var_794]
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebp+0Ch]
		mov	[ebp+8], ecx
		mov	ecx, eax
		xor	ecx, [esp+7C0h+var_790]
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebp+10h]
		mov	[ebp+0Ch], ecx
		mov	ecx, eax
		xor	ecx, [esp+7C0h+var_78C]
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebp+14h]
		mov	[ebp+10h], ecx
		mov	ecx, eax
		xor	ecx, [esp+7C0h+var_788]
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebp+18h]
		mov	[ebp+14h], ecx
		mov	ecx, [esp+7C0h+var_784]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebp+1Ch]
		mov	[ebp+18h], ecx
		mov	ecx, [esp+7C0h+var_780]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebp+20h]
		mov	[ebp+1Ch], ecx
		mov	ecx, [esp+7C0h+var_77C]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	[ebp+20h], ecx
		mov	eax, [ebx]
		mov	ecx, [esp+7C0h+var_778]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	[ebx], ecx
		mov	eax, [ebx+4]
		mov	ecx, [esp+7C0h+var_774]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+8]
		mov	[ebx+4], ecx
		mov	ecx, [esp+7C0h+var_770]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+0Ch]
		mov	[ebx+8], ecx
		mov	ecx, [esp+7C0h+var_76C]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+10h]
		mov	[ebx+0Ch], ecx
		mov	ecx, [esp+7C0h+var_768]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+14h]
		mov	[ebx+10h], ecx
		mov	ecx, [esp+7C0h+var_764]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+18h]
		mov	[ebx+14h], ecx
		mov	ecx, [esp+7C0h+var_760]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+1Ch]
		mov	[ebx+18h], ecx
		mov	ecx, [esp+7C0h+var_75C]
		mov	esi, [esp+7C0h+var_754]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [ebx+20h]
		mov	[ebx+1Ch], ecx
		mov	ecx, [esp+7C0h+var_758]
		xor	ecx, eax
		and	ecx, edx
		xor	ecx, eax
		mov	eax, [esp+7C0h+var_7AC]
		mov	[ebx+20h], ecx
		mov	ecx, [eax]
		xor	esi, ecx
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+4]
		mov	[eax], esi
		mov	esi, [esp+7C0h+var_750]
		xor	esi, ecx
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+8]
		mov	[eax+4], esi
		mov	esi, [esp+7C0h+var_74C]
		xor	esi, ecx
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+0Ch]
		mov	[eax+8], esi
		mov	esi, ecx
		xor	esi, [esp+7C0h+var_748]
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+10h]
		mov	[eax+0Ch], esi
		mov	esi, ecx
		xor	esi, [esp+7C0h+var_744]
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+14h]
		mov	[eax+10h], esi
		mov	esi, ecx
		xor	esi, [esp+7C0h+var_740]
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+18h]
		mov	[eax+14h], esi
		mov	esi, ecx
		xor	esi, [esp+7C0h+var_73C]
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+1Ch]
		mov	[eax+18h], esi
		mov	esi, ecx
		xor	esi, [esp+7C0h+var_738]
		and	esi, edx
		xor	esi, ecx
		mov	ecx, [eax+20h]
		mov	[eax+1Ch], esi
		mov	esi, ecx
		xor	esi, [esp+7C0h+var_734]
		and	esi, edx
		xor	esi, ecx
		mov	[eax+20h], esi
		mov	esi, [esp+7C0h+var_7A8]
		dec	esi
		shr	esi, 1Fh
		dec	esi
		mov	[esp+7C0h+var_7A4], esi
		mov	ecx, edx
		not	ecx
		and	ecx, esi
		mov	esi, [ebp+0]
		mov	edi, esi
		xor	edi, [esp+7C0h+var_730]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+4]
		mov	[ebp+0], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_72C]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+8]
		mov	[ebp+4], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_728]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+0Ch]
		mov	[ebp+8], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_724]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+10h]
		mov	[ebp+0Ch], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_720]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+14h]
		mov	[ebp+10h], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_71C]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+18h]
		mov	[ebp+14h], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_718]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+1Ch]
		mov	[ebp+18h], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_714]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebp+20h]
		mov	[ebp+1Ch], edi
		mov	edi, [esp+7C0h+var_710]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebp+20h], edi
		mov	esi, [ebx]
		mov	edi, [esp+7C0h+var_6E8]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebx], edi
		mov	esi, [ebx+4]
		mov	edi, [esp+7C0h+var_6E4]
		xor	edi, esi
		and	edi, ecx
		xor	edi, esi
		mov	[ebx+4], edi
		mov	esi, [ebx+8]
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6E0]
		and	edi, ecx
		xor	edi, esi
		mov	[ebx+8], edi
		mov	esi, [ebx+0Ch]
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6DC]
		and	edi, ecx
		xor	edi, esi
		mov	[ebx+0Ch], edi
		mov	esi, [ebx+10h]
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6D8]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+14h]
		mov	[ebx+10h], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6D4]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+18h]
		mov	[ebx+14h], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6D0]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+1Ch]
		mov	[ebx+18h], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6CC]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [ebx+20h]
		mov	[ebx+1Ch], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6C8]
		and	edi, ecx
		xor	edi, esi
		mov	[ebx+20h], edi
		mov	esi, [eax]
		mov	edi, esi
		xor	edi, [esp+7C0h+var_70C]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+4]
		mov	[eax], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_708]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+8]
		mov	[eax+4], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_704]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+0Ch]
		mov	[eax+8], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_700]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+10h]
		mov	[eax+0Ch], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6FC]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+14h]
		mov	[eax+10h], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6F8]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+18h]
		mov	[eax+14h], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6F4]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+1Ch]
		mov	[eax+18h], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6F0]
		and	edi, ecx
		xor	edi, esi
		mov	esi, [eax+20h]
		mov	[eax+1Ch], edi
		mov	edi, esi
		xor	edi, [esp+7C0h+var_6EC]
		and	edi, ecx
		xor	edi, esi
		mov	[eax+20h], edi
		mov	eax, [esp+7C0h+var_7A4]
		not	eax
		and	edx, eax
		mov	eax, [esp+7C0h+var_7B0]
		inc	eax
		mov	[esp+7C0h+var_7B4], edx
		mov	[esp+7C0h+var_7B0], eax
		cmp	eax, 40h
		jl	loc_100367B0
		mov	ecx, [esp+7C0h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 7B4h
		retn
sub_10036640	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036C70	proc near		; CODE XREF: sub_10036F80+88p
					; sub_10036F80+9Fp ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, eax
		lea	eax, [esp+18h+var_10]
		push	eax
		call	sub_1002A030
		mov	ecx, [esi+8]
		add	ecx, 8
		push	ecx
		lea	edx, [esp+20h+var_10]
		push	edx
		call	sub_100291A0
		mov	eax, [esi+8]
		mov	ecx, [esi+0Ch]
		mov	edx, [esp+24h+var_4]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	ecx		; Src
		add	edx, 20h
		push	edx		; Dst
		call	memcpy
		lea	eax, [esp+30h+var_10]
		push	eax
		mov	ecx, eax
		push	ecx
		call	sub_1002A0A0
		mov	edx, [esp+38h+arg_0]
		mov	eax, [edx+4]
		push	eax
		mov	eax, [eax+34h]
		lea	ecx, [esp+3Ch+var_10]
		push	ecx
		mov	edx, ecx
		push	edx
		call	eax
		mov	ebx, eax
		add	esp, 2Ch
		test	ebx, ebx
		js	short loc_10036D51
		mov	ecx, [esp+18h+var_4]
		mov	edx, [ecx]
		push	0
		lea	eax, [esp+1Ch+var_10]
		push	eax
		mov	ecx, eax
		and	edx, 1FFFFFFFh
		push	20000000h
		push	ecx
		mov	[edi], edx
		call	sub_1002B5C0
		add	esp, 10h
		mov	esi, 1

loc_10036D00:				; CODE XREF: sub_10036C70+DFj
		mov	edx, [esp+18h+var_4]
		mov	eax, [edx]
		push	0
		lea	ecx, [esp+1Ch+var_10]
		push	ecx
		mov	edx, ecx
		and	eax, 0FFFFFFFh
		push	10000000h
		push	edx
		mov	[edi+esi*4], eax
		call	sub_1002B5C0
		mov	eax, [esp+28h+var_4]
		mov	ecx, [eax]
		push	0
		lea	edx, [esp+2Ch+var_10]
		push	edx
		mov	eax, edx
		and	ecx, 1FFFFFFFh
		push	20000000h
		push	eax
		mov	[edi+esi*4+4], ecx
		call	sub_1002B5C0
		add	esi, 2
		add	esp, 20h
		cmp	esi, 9
		jnz	short loc_10036D00

loc_10036D51:				; CODE XREF: sub_10036C70+64j
		lea	ecx, [esp+18h+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 4
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 10h
		retn
sub_10036C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036D70	proc near		; CODE XREF: sub_10036E60+E7p
					; sub_10036E60+F9p ...

var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 20h
		push	ebp
		mov	ebp, [esp+24h+arg_0]
		lea	eax, [esp+24h+var_20]
		push	esi
		push	eax
		call	sub_1002A030
		lea	ecx, [esp+2Ch+var_10]
		push	ecx
		call	sub_1002A030
		mov	eax, [edi+20h]
		lea	edx, [esp+30h+var_20]
		push	edx
		push	eax
		lea	ecx, [esp+38h+var_10]
		push	ecx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		js	loc_10036E33
		push	ebx
		mov	ebx, 7

loc_10036DB3:				; CODE XREF: sub_10036D70+93j
		test	bl, 1
		jnz	short loc_10036DC9
		lea	edx, [esp+2Ch+var_10]
		push	edx
		push	20000000h
		lea	eax, [esp+34h+var_20]
		push	eax
		jmp	short loc_10036DD8
; ---------------------------------------------------------------------------

loc_10036DC9:				; CODE XREF: sub_10036D70+46j
		lea	ecx, [esp+2Ch+var_10]
		push	ecx		; int
		push	10000000h	; Val
		lea	edx, [esp+34h+var_20]
		push	edx		; int

loc_10036DD8:				; CODE XREF: sub_10036D70+57j
		call	sub_1002B570
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10036E32
		mov	ecx, [edi+ebx*4]
		lea	eax, [esp+2Ch+var_20]
		push	eax
		push	ecx
		lea	edx, [esp+34h+var_10]
		push	edx
		call	sub_1002B360
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10036E32
		dec	ebx
		jns	short loc_10036DB3
		push	ebp
		lea	eax, [esp+30h+var_20]
		push	offset dword_10047FFC
		push	eax
		call	sub_1002A260
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_10036E32
		mov	ecx, [esp+2Ch+arg_4]
		mov	eax, [ecx+4]
		mov	edx, [eax+34h]
		push	eax
		push	ebp
		push	ebp
		call	edx
		add	esp, 0Ch
		mov	esi, eax

loc_10036E32:				; CODE XREF: sub_10036D70+74j
					; sub_10036D70+90j ...
		pop	ebx

loc_10036E33:				; CODE XREF: sub_10036D70+37j
		lea	eax, [esp+28h+var_20]
		push	eax
		call	sub_10028EF0
		lea	ecx, [esp+2Ch+var_10]
		push	ecx
		call	sub_10028EF0
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 20h
		retn
sub_10036D70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036E60	proc near		; CODE XREF: sub_10037100+61p
					; DATA XREF: sub_100373C0+Bo

Dst		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0B8h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0B8h+var_4], eax
		mov	ecx, [esp+0B8h+arg_0]
		xor	eax, eax
		push	ebx
		push	ebp
		mov	ebp, [esp+0C0h+arg_8]
		mov	[esp+0C0h+Dst],	eax
		mov	[esp+0C0h+var_B4], eax
		mov	[esp+0C0h+var_B0], eax
		mov	[esp+0C0h+var_AC], eax
		mov	[esp+0C0h+var_A8], eax
		mov	[esp+0C0h+var_A4], eax
		mov	[esp+0C0h+var_A0], eax
		mov	[esp+0C0h+var_9C], eax
		mov	eax, [ecx+8]
		mov	ecx, [ecx+0Ch]
		push	esi
		mov	esi, [esp+0C4h+arg_C]
		push	edi
		mov	edi, [esp+0C8h+arg_4]
		add	eax, eax
		add	eax, eax
		push	eax		; Size
		push	ecx		; Src
		lea	edx, [esp+0D0h+Dst]
		push	edx		; Dst
		call	memcpy
		lea	eax, [esp+0D4h+Dst]
		push	eax
		lea	ecx, [esp+0D8h+var_70]
		push	ecx
		lea	ecx, [esp+0DCh+var_94]
		lea	ebx, [esp+0DCh+var_4C]
		call	sub_10036020
		lea	edx, [esp+0DCh+Dst]
		push	edx
		lea	ebx, [esp+0E0h+var_94]
		call	sub_10034E80
		lea	eax, [esp+0E0h+var_94]
		push	eax
		lea	ecx, [esp+0E4h+Dst]
		call	sub_10033ED0
		lea	ecx, [esp+0E4h+var_28]
		push	ecx
		lea	edx, [esp+0E8h+var_94]
		lea	ecx, [esp+0E8h+var_70]
		call	sub_10034480
		lea	edx, [esp+0E8h+Dst]
		push	edx
		lea	edx, [esp+0ECh+var_94]
		lea	ecx, [esp+0ECh+Dst]
		call	sub_10034480
		lea	eax, [esp+0ECh+var_70]
		push	eax
		lea	edx, [esp+0F0h+Dst]
		lea	ecx, [esp+0F0h+var_4C]
		call	sub_10034480
		push	esi
		push	edi
		lea	edi, [esp+0F8h+var_28]
		call	sub_10036D70
		add	esp, 30h
		test	eax, eax
		js	short loc_10036F61
		push	esi
		push	ebp
		lea	edi, [esp+0D0h+var_70]
		call	sub_10036D70
		add	esp, 8

loc_10036F61:				; CODE XREF: sub_10036E60+F1j
		mov	ecx, [esp+0C8h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0B8h
		retn
sub_10036E60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10036F80	proc near		; CODE XREF: sub_10037100+78p
					; DATA XREF: sub_100373C0+12o

var_E0		= dword	ptr -0E0h
Dst		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_B8		= byte ptr -0B8h
var_94		= byte ptr -94h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 0E0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0E0h+var_4], eax
		mov	ecx, [esp+0E0h+arg_0]
		mov	edx, [ecx+8]
		mov	eax, [esp+0E0h+arg_10]
		push	ebx
		mov	ebx, [esp+0E4h+arg_8]
		push	ebp
		mov	ebp, [esp+0E8h+arg_C]
		push	esi
		mov	esi, [esp+0ECh+arg_14]
		mov	[esp+0ECh+var_E0], eax
		xor	eax, eax
		push	edi
		mov	edi, [esp+0F0h+arg_4]
		add	edx, edx
		add	edx, edx
		mov	[esp+0F0h+Dst],	eax
		mov	[esp+0F0h+var_D8], eax
		mov	[esp+0F0h+var_D4], eax
		mov	[esp+0F0h+var_D0], eax
		mov	[esp+0F0h+var_CC], eax
		mov	[esp+0F0h+var_C8], eax
		mov	[esp+0F0h+var_C4], eax
		mov	[esp+0F0h+var_C0], eax
		mov	eax, [ecx+0Ch]
		push	edx		; Size
		push	eax		; Src
		lea	ecx, [esp+0F8h+Dst]
		push	ecx		; Dst
		call	memcpy
		mov	eax, edi
		push	esi
		lea	edi, [esp+100h+var_4C]
		call	sub_10036C70
		add	esp, 10h
		test	eax, eax
		js	loc_100370D8
		push	esi
		mov	eax, ebx
		lea	edi, [esp+0F4h+var_B8]
		call	sub_10036C70
		add	esp, 4
		test	eax, eax
		js	loc_100370D8
		lea	edx, [esp+0F0h+Dst]
		push	edx
		lea	eax, [esp+0F4h+var_70]
		push	eax
		lea	ecx, [esp+0F8h+var_94]
		push	ecx
		mov	ecx, edi
		lea	edx, [esp+0FCh+var_4C]
		lea	ebx, [esp+0FCh+var_28]
		call	sub_10036640
		lea	edx, [esp+0FCh+Dst]
		push	edx
		lea	ebx, [esp+100h+var_70]
		call	sub_10034E80
		lea	eax, [esp+100h+var_B8]
		push	eax
		lea	ecx, [esp+104h+Dst]
		call	sub_10033ED0
		lea	ecx, [esp+104h+var_70]
		push	ecx
		lea	edx, [esp+108h+var_B8]
		lea	ecx, [esp+108h+var_94]
		call	sub_10034480
		lea	edx, [esp+108h+Dst]
		push	edx
		lea	edx, [esp+10Ch+var_B8]
		lea	ecx, [esp+10Ch+Dst]
		call	sub_10034480
		lea	eax, [esp+10Ch+var_94]
		push	eax
		lea	edx, [esp+110h+Dst]
		lea	ecx, [esp+110h+var_28]
		call	sub_10034480
		push	esi
		push	ebp
		lea	edi, [esp+118h+var_70]
		call	sub_10036D70
		add	esp, 28h
		test	eax, eax
		js	short loc_100370D8
		mov	ecx, [esp+0F0h+var_E0]
		push	esi
		push	ecx
		lea	edi, [esp+0F8h+var_94]
		call	sub_10036D70
		add	esp, 8

loc_100370D8:				; CODE XREF: sub_10036F80+92j
					; sub_10036F80+A9j ...
		mov	ecx, [esp+0F0h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0E0h
		retn
sub_10036F80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10037100	proc near		; DATA XREF: sub_100373C0+19o

var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
Dst		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_120		= byte ptr -120h
var_FC		= byte ptr -0FCh
var_D8		= byte ptr -0D8h
var_B4		= byte ptr -0B4h
var_90		= byte ptr -90h
var_6C		= byte ptr -6Ch
var_48		= byte ptr -48h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 154h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+154h+var_4], eax
		mov	edx, [esp+154h+arg_C]
		mov	eax, [esp+154h+arg_10]
		mov	ecx, [esp+154h+arg_14]
		push	ebx
		mov	ebx, [esp+158h+arg_8]
		push	ebp
		mov	ebp, [esp+15Ch+arg_18]
		push	esi
		mov	esi, [esp+160h+arg_4]
		push	edi
		mov	edi, [esp+164h+arg_0]
		mov	[esp+164h+var_148], edi
		mov	[esp+164h+var_14C], edx
		mov	[esp+164h+var_154], eax
		mov	[esp+164h+var_150], ecx
		test	esi, esi
		jnz	short loc_1003716E
		push	ebp
		push	ecx
		push	eax
		push	edi
		call	sub_10036E60
		add	esp, 10h
		jmp	loc_1003739B
; ---------------------------------------------------------------------------

loc_1003716E:				; CODE XREF: sub_10037100+5Bj
		test	edi, edi
		jnz	short loc_10037185
		push	ebp
		push	ecx
		push	eax
		push	edx
		push	ebx
		push	esi
		call	sub_10036F80
		add	esp, 18h
		jmp	loc_1003739B
; ---------------------------------------------------------------------------

loc_10037185:				; CODE XREF: sub_10037100+70j
		push	edi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100371BD
		push	esi
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_100371BD
		mov	eax, [esp+164h+var_154]
		push	eax
		call	sub_10028F40
		mov	ecx, [esp+168h+var_150]
		push	ecx
		call	sub_10028F40
		add	esp, 8
		xor	eax, eax
		jmp	loc_1003739B
; ---------------------------------------------------------------------------

loc_100371BD:				; CODE XREF: sub_10037100+90j
					; sub_10037100+9Dj
		mov	edx, [edi+8]
		xor	eax, eax
		add	edx, edx
		add	edx, edx
		mov	[esp+164h+Dst],	eax
		mov	[esp+164h+var_140], eax
		mov	[esp+164h+var_13C], eax
		mov	[esp+164h+var_138], eax
		mov	[esp+164h+var_134], eax
		mov	[esp+164h+var_130], eax
		mov	[esp+164h+var_12C], eax
		mov	[esp+164h+var_128], eax
		mov	eax, [edi+0Ch]
		push	edx		; Size
		push	eax		; Src
		lea	ecx, [esp+16Ch+Dst]
		push	ecx		; Dst
		call	memcpy
		mov	edx, [esi+8]
		xor	eax, eax
		add	edx, edx
		add	edx, edx
		mov	[esp+170h+var_24], eax
		mov	[esp+170h+var_20], eax
		mov	[esp+170h+var_1C], eax
		mov	[esp+170h+var_18], eax
		mov	[esp+170h+var_14], eax
		mov	[esp+170h+var_10], eax
		mov	[esp+170h+var_C], eax
		mov	[esp+170h+var_8], eax
		mov	eax, [esi+0Ch]
		push	edx		; Size
		push	eax		; Src
		lea	ecx, [esp+178h+var_24]
		push	ecx		; Dst
		call	memcpy
		push	ebp
		mov	eax, ebx
		lea	edi, [esp+180h+var_B4]
		call	sub_10036C70
		add	esp, 1Ch
		test	eax, eax
		js	loc_1003739B
		mov	eax, [esp+164h+var_14C]
		push	ebp
		lea	edi, [esp+168h+var_90]
		call	sub_10036C70
		add	esp, 4
		test	eax, eax
		js	loc_1003739B
		lea	edx, [esp+164h+Dst]
		push	edx
		lea	eax, [esp+168h+var_FC]
		push	eax
		lea	ecx, [esp+16Ch+var_D8]
		lea	ebx, [esp+16Ch+var_120]
		call	sub_10036020
		lea	ecx, [esp+16Ch+var_24]
		push	ecx
		lea	edx, [esp+170h+Dst]
		push	edx
		lea	eax, [esp+174h+var_48]
		push	eax
		mov	ecx, edi
		lea	edx, [esp+178h+var_B4]
		lea	ebx, [esp+178h+var_6C]
		call	sub_10036640
		push	esi
		call	sub_10028FB0
		add	esp, 18h
		test	eax, eax
		jz	short loc_1003734E
		mov	ecx, [esp+164h+var_148]
		push	ecx
		call	sub_10028FB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10037313
		mov	ecx, 9
		lea	esi, [esp+164h+var_48]
		lea	edi, [esp+164h+var_FC]
		rep movsd
		mov	ecx, 9
		mov	esi, ebx
		lea	edi, [esp+164h+var_120]
		rep movsd
		mov	ecx, 9
		lea	esi, [esp+164h+Dst]
		lea	edi, [esp+164h+var_D8]
		rep movsd
		jmp	short loc_1003734E
; ---------------------------------------------------------------------------

loc_10037313:				; CODE XREF: sub_10037100+1DEj
		lea	edx, [esp+164h+Dst]
		push	edx
		lea	eax, [esp+168h+var_6C]
		push	eax
		lea	ecx, [esp+16Ch+var_48]
		push	ecx
		lea	edx, [esp+170h+var_D8]
		push	edx
		lea	eax, [esp+174h+var_120]
		push	eax
		lea	ecx, [esp+178h+var_FC]
		mov	edx, ecx
		push	ecx
		push	edx
		lea	edx, [esp+180h+var_D8]
		mov	ecx, eax
		call	sub_10035B00
		add	esp, 1Ch

loc_1003734E:				; CODE XREF: sub_10037100+1CDj
					; sub_10037100+211j
		lea	eax, [esp+164h+var_120]
		push	eax
		lea	ecx, [esp+168h+var_FC]
		push	ecx
		lea	ecx, [esp+16Ch+var_D8]
		lea	edi, [esp+16Ch+var_90]
		lea	esi, [esp+16Ch+var_B4]
		call	sub_100365C0
		mov	edx, [esp+16Ch+var_154]
		push	ebp
		push	edx
		mov	edi, esi
		call	sub_10036D70
		add	esp, 10h
		test	eax, eax
		js	short loc_1003739B
		mov	eax, [esp+164h+var_150]
		push	ebp
		push	eax
		lea	edi, [esp+16Ch+var_90]
		call	sub_10036D70
		add	esp, 8

loc_1003739B:				; CODE XREF: sub_10037100+69j
					; sub_10037100+80j ...
		mov	ecx, [esp+164h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 154h
		retn
sub_10037100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100373C0	proc near		; CODE XREF: sub_1002E140+2A7p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 3
		jnz	short loc_100373E0
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax+70h], offset sub_10036E60
		mov	dword ptr [eax+6Ch], offset sub_10036F80
		mov	dword ptr [eax+74h], offset sub_10037100

loc_100373E0:				; CODE XREF: sub_100373C0+5j
		xor	eax, eax
		retn
sub_100373C0	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Alloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Free_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_SetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ZFree_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_GetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_SecureMemcmp]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_AllocItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_FreeArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_NewArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CopyItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_FreeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_FindOIDTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_ZfreeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CompareItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
; [00000010 BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
; [00000006 BYTES: COLLAPSED FUNCTION memset]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10037470	proc near		; CODE XREF: sub_1000D7C0+2Fp
					; sub_1000D7C0+3Fp ...
		cmp	cl, 40h
		jnb	short loc_1003748A
		cmp	cl, 20h
		jnb	short loc_10037480
		shrd	eax, edx, cl
		shr	edx, cl
		retn
; ---------------------------------------------------------------------------

loc_10037480:				; CODE XREF: sub_10037470+8j
		mov	eax, edx
		xor	edx, edx
		and	cl, 1Fh
		shr	eax, cl
		retn
; ---------------------------------------------------------------------------

loc_1003748A:				; CODE XREF: sub_10037470+3j
		xor	eax, eax
		xor	edx, edx
		retn
sub_10037470	endp

; ---------------------------------------------------------------------------
		align 10h
; [0000002B BYTES: COLLAPSED FUNCTION __alloca_probe]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100374C0	proc near		; CODE XREF: sub_10033ED0+31p
					; sub_10033ED0+4Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_C]
		or	ecx, eax
		mov	ecx, [esp+arg_8]
		jnz	short loc_100374D9
		mov	eax, [esp+arg_0]
		mul	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_100374D9:				; CODE XREF: sub_100374C0+Ej
		push	ebx
		mul	ecx
		mov	ebx, eax
		mov	eax, [esp+4+arg_0]
		mul	[esp+4+arg_C]
		add	ebx, eax
		mov	eax, [esp+4+arg_0]
		mul	ecx
		add	edx, ebx
		pop	ebx
		retn	10h
sub_100374C0	endp


; =============== S U B	R O U T	I N E =======================================


sub_100374F4	proc near		; CODE XREF: sub_10037584+2Dp
					; .text:100375DAp ...

var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	edx, [esp+0Ch+arg_0]
		mov	eax, [esp+0Ch+arg_4]
		mov	ecx, [esp+0Ch+arg_8]
		push	ebp
		push	edx
		push	eax
		push	ecx
		push	ecx
		push	offset sub_10037584
		push	large dword ptr	fs:0
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_20], eax
		mov	large fs:0, esp

loc_10037526:				; CODE XREF: sub_100374F4+64j
					; sub_100374F4+80j
		mov	eax, [esp+28h+arg_4]
		mov	ebx, [eax+8]
		mov	ecx, [esp+28h+arg_0]
		xor	ebx, [ecx]
		mov	esi, [eax+0Ch]
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10037576
		mov	edx, [esp+28h+arg_8]
		cmp	edx, 0FFFFFFFEh
		jz	short loc_10037548
		cmp	esi, edx
		jbe	short loc_10037576

loc_10037548:				; CODE XREF: sub_100374F4+4Ej
		lea	esi, [esi+esi*2]
		lea	ebx, [ebx+esi*4+10h]
		mov	ecx, [ebx]
		mov	[eax+0Ch], ecx
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_10037526
		push	101h
		mov	eax, [ebx+8]
		call	sub_10037DC1
		mov	ecx, 1
		mov	eax, [ebx+8]
		call	sub_10037DE0
		jmp	short loc_10037526
; ---------------------------------------------------------------------------

loc_10037576:				; CODE XREF: sub_100374F4+45j
					; sub_100374F4+52j
		pop	large dword ptr	fs:0
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_100374F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037584	proc near		; DATA XREF: sub_100374F4+14o
					; .rdata:___safe_se_handler_tableo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		test	dword ptr [ecx+4], 6
		mov	eax, 1
		jz	short locret_100375C9
		mov	eax, [esp+arg_4]
		mov	ecx, [eax+8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		push	ebp
		mov	ebp, [eax+18h]
		push	dword ptr [eax+0Ch]
		push	dword ptr [eax+10h]
		push	dword ptr [eax+14h]
		call	sub_100374F4
		add	esp, 0Ch
		pop	ebp
		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_C]
		mov	[edx], eax
		mov	eax, 3

locret_100375C9:			; CODE XREF: sub_10037584+10j
		retn
sub_10037584	endp

; ---------------------------------------------------------------------------
		push	ebp
		mov	ecx, [esp+8]
		mov	ebp, [ecx]
		push	dword ptr [ecx+1Ch]
		push	dword ptr [ecx+18h]
		push	dword ptr [ecx+28h]
		call	sub_100374F4
		add	esp, 0Ch
		pop	ebp
		retn	4

; =============== S U B	R O U T	I N E =======================================


sub_100375E6	proc near		; CODE XREF: sub_10037650+89p
		push	ebp
		push	esi
		push	edi
		push	ebx
		mov	ebp, edx
		xor	eax, eax
		xor	ebx, ebx
		xor	edx, edx
		xor	esi, esi
		xor	edi, edi
		call	ecx
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_100375E6	endp


; =============== S U B	R O U T	I N E =======================================


sub_100375FD	proc near		; CODE XREF: sub_10037650+15Ep
		mov	ebp, edx
		mov	esi, ecx
		mov	eax, ecx
		push	1
		call	sub_10037DC1
		xor	eax, eax
		xor	ebx, ebx
		xor	ecx, ecx
		xor	edx, edx
		xor	edi, edi
		jmp	esi
sub_100375FD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_10037616(PVOID TargetFrame)
sub_10037616	proc near		; CODE XREF: sub_10037650+112p
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	0		; ReturnValue
		push	0		; ExceptionRecord
		push	offset loc_1003762B ; TargetIp
		push	ecx		; TargetFrame
		call	RtlUnwind

loc_1003762B:				; DATA XREF: sub_10037616+Ao
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10037616	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037630	proc near		; CODE XREF: sub_10037650+128p
					; sub_10037650+178p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	edx
		push	ecx
		push	[esp+0Ch+arg_4]
		call	sub_100374F4
		add	esp, 0Ch
		pop	ebp
		retn	8
sub_10037630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10037650(int,	int, int, PVOID	TargetFrame, int)
sub_10037650	proc near		; CODE XREF: sub_10037F51+1Bp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
TargetFrame	= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+TargetFrame]
		push	esi
		mov	esi, [ebx+8]
		xor	esi, [eax]
		push	edi
		mov	eax, [esi]
		mov	[ebp+var_1], 0
		mov	[ebp+var_C], 1
		lea	edi, [ebx+10h]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_10037686
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_10037686:				; CODE XREF: sub_10037650+29j
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]
		mov	eax, [ebp+arg_8]
		test	byte ptr [eax+4], 66h
		jnz	loc_100377B3
		lea	ecx, [ebp+var_18]
		mov	[ebx-4], ecx
		mov	ebx, [ebx+0Ch]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_14], eax
		cmp	ebx, 0FFFFFFFEh
		jz	short loc_10037718
		jmp	short loc_100376C0
; ---------------------------------------------------------------------------
		align 10h

loc_100376C0:				; CODE XREF: sub_10037650+68j
					; sub_10037650+A0j
		lea	edx, [ebx+ebx*2]
		mov	ecx, [esi+edx*4+14h]
		lea	eax, [esi+edx*4+10h]
		mov	[ebp+var_10], eax
		mov	eax, [eax]
		mov	[ebp+var_8], eax
		test	ecx, ecx
		jz	short loc_100376EB
		mov	edx, edi
		call	sub_100375E6
		mov	[ebp+var_1], 1
		test	eax, eax
		jl	short loc_10037722
		jg	short loc_1003772B
		mov	eax, [ebp+var_8]

loc_100376EB:				; CODE XREF: sub_10037650+85j
		mov	ebx, eax
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_100376C0
		cmp	[ebp+var_1], 0
		jz	short loc_10037718

loc_100376F8:				; CODE XREF: sub_10037650+D9j
					; sub_10037650+17Dj
		mov	eax, [esi]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1003770A
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_1003770A:				; CODE XREF: sub_10037650+ADj
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]

loc_10037718:				; CODE XREF: sub_10037650+66j
					; sub_10037650+A6j ...
		mov	eax, [ebp+var_C]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10037722:				; CODE XREF: sub_10037650+94j
		mov	[ebp+var_C], 0
		jmp	short loc_100376F8
; ---------------------------------------------------------------------------

loc_1003772B:				; CODE XREF: sub_10037650+96j
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_1003775F
		cmp	dword_1004DB74,	0
		jz	short loc_1003775F
		push	offset dword_1004DB74
		call	sub_10037E74
		add	esp, 4
		test	eax, eax
		jz	short loc_1003775F
		mov	ecx, [ebp+arg_8]
		push	1
		push	ecx
		call	dword_1004DB74
		add	esp, 8

loc_1003775F:				; CODE XREF: sub_10037650+E4j
					; sub_10037650+EDj ...
		mov	ecx, [ebp+TargetFrame] ; TargetFrame
		call	sub_10037616
		mov	eax, [ebp+TargetFrame]
		cmp	[eax+0Ch], ebx
		jz	short loc_10037780
		mov	edx, [ebp+arg_0]
		push	edx
		push	edi
		mov	edx, ebx
		mov	ecx, eax
		call	sub_10037630
		mov	eax, [ebp+TargetFrame]

loc_10037780:				; CODE XREF: sub_10037650+11Dj
		mov	ecx, [ebp+var_8]
		mov	[eax+0Ch], ecx
		mov	eax, [esi]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_10037798
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	[ebp+arg_4]

loc_10037798:				; CODE XREF: sub_10037650+13Bj
		mov	ecx, [esi+0Ch]
		mov	edx, [esi+8]
		add	ecx, edi
		xor	ecx, [edx+edi]
		call	[ebp+arg_4]
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+8]
		mov	edx, edi
		call	sub_100375FD

loc_100377B3:				; CODE XREF: sub_10037650+4Bj
		mov	edx, 0FFFFFFFEh
		cmp	[ebx+0Ch], edx
		jz	loc_10037718
		mov	ecx, [ebp+arg_0]
		push	ecx
		push	edi
		mov	ecx, ebx
		call	sub_10037630
		jmp	loc_100376F8
sub_10037650	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100377D2	proc near		; CODE XREF: sub_10037A20+Cp
					; sub_10037A62+Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, 0E06D7363h
		cmp	[ebp+arg_0], eax
		jnz	short loc_100377EE
		push	[ebp+arg_4]
		push	eax
		call	_XcptFilter
		pop	ecx
		pop	ecx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100377EE:				; CODE XREF: sub_100377D2+Dj
		xor	eax, eax
		pop	ebp
		retn
sub_100377D2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100377F2	proc near		; CODE XREF: sub_10037838+A5p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		xor	eax, eax
		jmp	short loc_1003780E
; ---------------------------------------------------------------------------

loc_100377FF:				; CODE XREF: sub_100377F2+1Fj
		test	eax, eax
		jnz	short loc_10037813
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_1003780B
		call	ecx

loc_1003780B:				; CODE XREF: sub_100377F2+15j
		add	esi, 4

loc_1003780E:				; CODE XREF: sub_100377F2+Bj
		cmp	esi, [ebp+arg_4]
		jb	short loc_100377FF

loc_10037813:				; CODE XREF: sub_100377F2+Fj
		pop	esi
		pop	ebp
		retn
sub_100377F2	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037816	proc near		; DATA XREF: .rdata:10039134o
		push	80h		; Size
		call	ds:malloc
		pop	ecx
		mov	Memory,	eax
		mov	dword_1004DB64,	eax
		test	eax, eax
		jnz	short loc_10037832
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_10037832:				; CODE XREF: sub_10037816+18j
		and	dword ptr [eax], 0
		xor	eax, eax
		retn
sub_10037816	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10037838	proc near		; CODE XREF: DllEntryPoint-1C3p
					; DllEntryPoint-109p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		xor	eax, eax
		push	esi
		push	edi
		cmp	[ebp+arg_4], eax
		jnz	short loc_1003786D
		cmp	dword_1004B754,	eax
		jle	short loc_10037866
		dec	dword_1004B754
		mov	edi, ds:InterlockedCompareExchange
		push	eax
		mov	esi, offset Target
		jmp	loc_1003794B
; ---------------------------------------------------------------------------

loc_10037866:				; CODE XREF: sub_10037838+15j
					; sub_10037838+AEj
		xor	eax, eax
		jmp	loc_100379B8
; ---------------------------------------------------------------------------

loc_1003786D:				; CODE XREF: sub_10037838+Dj
		cmp	[ebp+arg_4], 1
		jnz	loc_100379B5
		mov	ecx, large fs:18h
		mov	ebx, [ecx+4]
		mov	edi, ds:InterlockedCompareExchange
		mov	[ebp+arg_4], eax
		push	eax
		mov	esi, offset Target
		jmp	short loc_100378A3
; ---------------------------------------------------------------------------

loc_10037892:				; CODE XREF: sub_10037838+71j
		cmp	eax, ebx
		jz	short loc_100378AD
		push	3E8h		; dwMilliseconds
		call	ds:Sleep
		push	0		; Comperand

loc_100378A3:				; CODE XREF: sub_10037838+58j
		push	ebx		; Exchange
		push	esi		; Destination
		call	edi ; InterlockedCompareExchange
		test	eax, eax
		jnz	short loc_10037892
		jmp	short loc_100378B4
; ---------------------------------------------------------------------------

loc_100378AD:				; CODE XREF: sub_10037838+5Cj
		mov	[ebp+arg_4], 1

loc_100378B4:				; CODE XREF: sub_10037838+73j
		mov	eax, dword_1004DB5C
		push	2
		pop	edi
		test	eax, eax
		jz	short loc_100378C9
		push	1Fh
		call	_amsg_exit
		jmp	short loc_10037902
; ---------------------------------------------------------------------------

loc_100378C9:				; CODE XREF: sub_10037838+86j
		push	offset dword_10039138
		push	offset dword_10039130
		mov	dword_1004DB5C,	1
		call	sub_100377F2
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_10037866
		push	offset dword_1003912C
		push	offset dword_10039128
		call	_initterm
		pop	ecx
		mov	dword_1004DB5C,	edi

loc_10037902:				; CODE XREF: sub_10037838+8Fj
		xor	ebx, ebx
		pop	ecx
		cmp	[ebp+arg_4], ebx
		jnz	short loc_10037912
		push	ebx		; Value
		push	esi		; Target
		call	ds:InterlockedExchange

loc_10037912:				; CODE XREF: sub_10037838+D0j
		cmp	dword_1004DB70,	ebx
		jz	short loc_10037936
		push	offset dword_1004DB70
		call	sub_10037E74
		pop	ecx
		test	eax, eax
		jz	short loc_10037936
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_1004DB70

loc_10037936:				; CODE XREF: sub_10037838+E0j
					; sub_10037838+EFj
		inc	dword_1004B754
		jmp	short loc_100379B5
; ---------------------------------------------------------------------------

loc_1003793E:				; CODE XREF: sub_10037838+11Aj
		push	3E8h		; dwMilliseconds
		call	ds:Sleep
		push	0		; Comperand

loc_1003794B:				; CODE XREF: sub_10037838+29j
		push	1		; Exchange
		push	esi		; Destination
		call	edi ; InterlockedCompareExchange
		test	eax, eax
		jnz	short loc_1003793E
		mov	eax, dword_1004DB5C
		cmp	eax, 2
		jz	short loc_10037968
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	short loc_100379B5
; ---------------------------------------------------------------------------

loc_10037968:				; CODE XREF: sub_10037838+124j
		mov	ebx, Memory
		test	ebx, ebx
		jz	short loc_100379A2
		mov	edi, dword_1004DB64
		add	edi, 0FFFFFFFCh
		jmp	short loc_10037988
; ---------------------------------------------------------------------------

loc_1003797D:				; CODE XREF: sub_10037838+152j
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_10037985
		call	eax

loc_10037985:				; CODE XREF: sub_10037838+149j
		sub	edi, 4

loc_10037988:				; CODE XREF: sub_10037838+143j
		cmp	edi, ebx
		jnb	short loc_1003797D
		push	ebx		; Memory
		call	ds:free
		and	dword_1004DB64,	0
		and	Memory,	0
		pop	ecx

loc_100379A2:				; CODE XREF: sub_10037838+138j
		push	0		; Value
		push	esi		; Target
		mov	dword_1004DB5C,	0
		call	ds:InterlockedExchange

loc_100379B5:				; CODE XREF: sub_10037838+39j
					; sub_10037838+104j ...
		xor	eax, eax
		inc	eax

loc_100379B8:				; CODE XREF: sub_10037838+30j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	0Ch
sub_10037838	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_100379BF:				; CODE XREF: DllEntryPoint+11j
		push	2Ch
		push	offset dword_100480D8
		call	__SEH_prolog4
		mov	ecx, [ebp+arg_4]
		xor	edx, edx
		inc	edx
		mov	[ebp+var_1C], edx
		xor	esi, esi
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	dword_10049330,	ecx
		cmp	ecx, esi
		jnz	short loc_100379F3
		cmp	dword_1004B754,	esi
		jnz	short loc_100379F3
		mov	[ebp+var_1C], esi
		jmp	loc_10037BF9
; ---------------------------------------------------------------------------

loc_100379F3:				; CODE XREF: DllEntryPoint-23Aj
					; DllEntryPoint-232j
		cmp	ecx, edx
		jz	short loc_10037A00
		cmp	ecx, 2
		jnz	loc_10037A8D

loc_10037A00:				; CODE XREF: DllEntryPoint-226j
		mov	eax, dword_1004DB6C
		cmp	eax, esi
		jz	short loc_10037A3F
		mov	[ebp+ms_exc.registration.TryLevel], edx
		mov	dword_1004B758,	edx
		push	[ebp+arg_8]
		push	ecx
		push	[ebp+arg_0]
		call	eax ; dword_1004DB6C
		mov	[ebp+var_1C], eax
		jmp	short loc_10037A3C
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10037A20	proc near		; DATA XREF: .rdata:100480F8o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-20h], ecx
		push	eax
		push	ecx
		call	sub_100377D2
		pop	ecx
		pop	ecx
		retn
sub_10037A20	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037A34	proc near		; DATA XREF: .rdata:100480FCo
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10037A34	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10037A3C:				; CODE XREF: DllEntryPoint-1FDj
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_10037A3F:				; CODE XREF: DllEntryPoint-214j
		cmp	[ebp+var_1C], esi
		jz	loc_10037BF9
		mov	[ebp+ms_exc.registration.TryLevel], 2
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10037838
		mov	[ebp+var_1C], eax
		jmp	short loc_10037A7E
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10037A62	proc near		; DATA XREF: .rdata:10048104o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-24h], ecx
		push	eax
		push	ecx
		call	sub_100377D2
		pop	ecx
		pop	ecx
		retn
sub_10037A62	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037A76	proc near		; DATA XREF: .rdata:10048108o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10037A76	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10037A7E:				; CODE XREF: DllEntryPoint-1BBj
		mov	[ebp+ms_exc.registration.TryLevel], esi
		cmp	[ebp+var_1C], esi
		jz	loc_10037BF9
		mov	ecx, [ebp+arg_4]

loc_10037A8D:				; CODE XREF: DllEntryPoint-221j
		mov	[ebp+ms_exc.registration.TryLevel], 3
		push	[ebp+arg_8]
		push	ecx
		push	[ebp+arg_0]
		call	sub_10037EF2
		mov	[ebp+var_1C], eax
		jmp	short loc_10037AC1
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10037AA5	proc near		; DATA XREF: .rdata:10048110o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-28h], ecx
		push	eax
		push	ecx
		call	sub_100377D2
		pop	ecx
		pop	ecx
		retn
sub_10037AA5	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037AB9	proc near		; DATA XREF: .rdata:10048114o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10037AB9	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10037AC1:				; CODE XREF: DllEntryPoint-178j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		cmp	[ebp+arg_4], 1
		jnz	loc_10037B6A
		cmp	[ebp+var_1C], esi
		jnz	loc_10037B6A
		mov	[ebp+ms_exc.registration.TryLevel], 4
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	sub_10037EF2
		jmp	short loc_10037B03
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10037AEA	proc near		; DATA XREF: .rdata:1004811Co
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-2Ch], ecx
		push	eax
		push	ecx
		call	sub_100377D2
		pop	ecx
		pop	ecx
		retn
sub_10037AEA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037AFE	proc near		; DATA XREF: .rdata:10048120o
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_10037AFE	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10037B03:				; CODE XREF: DllEntryPoint-133j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	[ebp+ms_exc.registration.TryLevel], 5
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	sub_10037838
		jmp	short loc_10037B32
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10037B19	proc near		; DATA XREF: .rdata:10048128o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-30h], ecx
		push	eax
		push	ecx
		call	sub_100377D2
		pop	ecx
		pop	ecx
		retn
sub_10037B19	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037B2D	proc near		; DATA XREF: .rdata:1004812Co
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_10037B2D	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10037B32:				; CODE XREF: DllEntryPoint-104j
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	eax, dword_1004DB6C
		cmp	eax, esi
		jz	short loc_10037B6A
		mov	[ebp+ms_exc.registration.TryLevel], 6
		push	esi
		push	esi
		push	[ebp+arg_0]
		call	eax ; dword_1004DB6C
		jmp	short loc_10037B67
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10037B4E	proc near		; DATA XREF: .rdata:10048134o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-34h], ecx
		push	eax
		push	ecx
		call	sub_100377D2
		pop	ecx
		pop	ecx
		retn
sub_10037B4E	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037B62	proc near		; DATA XREF: .rdata:10048138o
		mov	esp, [ebp-18h]
		xor	esi, esi
sub_10037B62	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10037B67:				; CODE XREF: DllEntryPoint-CFj
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_10037B6A:				; CODE XREF: DllEntryPoint-153j
					; DllEntryPoint-14Aj ...
		cmp	[ebp+arg_4], esi
		jz	short loc_10037B79
		cmp	[ebp+arg_4], 3
		jnz	loc_10037BF9

loc_10037B79:				; CODE XREF: DllEntryPoint-AEj
		mov	[ebp+ms_exc.registration.TryLevel], 7
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10037838
		mov	[ebp+var_1C], eax
		jmp	short loc_10037BAF
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10037B93	proc near		; DATA XREF: .rdata:10048140o
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-38h], ecx
		push	eax
		push	ecx
		call	sub_100377D2
		pop	ecx
		pop	ecx
		retn
sub_10037B93	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037BA7	proc near		; DATA XREF: .rdata:10048144o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10037BA7	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10037BAF:				; CODE XREF: DllEntryPoint-8Aj
		mov	[ebp+ms_exc.registration.TryLevel], esi
		mov	eax, dword_1004DB6C
		cmp	eax, esi
		jz	short loc_10037BF9
		cmp	dword_1004B758,	esi
		jz	short loc_10037BF9
		mov	[ebp+ms_exc.registration.TryLevel], 8
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	eax ; dword_1004DB6C
		mov	[ebp+var_1C], eax
		jmp	short loc_10037BF6
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10037BDA	proc near		; DATA XREF: .rdata:1004814Co
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-3Ch], ecx
		push	eax
		push	ecx
		call	sub_100377D2
		pop	ecx
		pop	ecx
		retn
sub_10037BDA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037BEE	proc near		; DATA XREF: .rdata:10048150o
		mov	esp, [ebp-18h]
		xor	esi, esi
		mov	[ebp-1Ch], esi
sub_10037BEE	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR DllEntryPoint

loc_10037BF6:				; CODE XREF: DllEntryPoint-43j
		mov	[ebp+ms_exc.registration.TryLevel], esi

loc_10037BF9:				; CODE XREF: DllEntryPoint-22Dj
					; DllEntryPoint-1D9j ...
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	sub_10037C10
		mov	eax, [ebp+var_1C]
		call	__SEH_epilog4
		retn	0Ch
; END OF FUNCTION CHUNK	FOR DllEntryPoint

; =============== S U B	R O U T	I N E =======================================


sub_10037C10	proc near		; CODE XREF: DllEntryPoint-1Bp
					; DATA XREF: .rdata:100480F0o
		mov	dword_10049330,	0FFFFFFFFh
		retn
sub_10037C10	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

; FUNCTION CHUNK AT 100379BF SIZE 00000061 BYTES
; FUNCTION CHUNK AT 10037A3C SIZE 00000026 BYTES
; FUNCTION CHUNK AT 10037A7E SIZE 00000027 BYTES
; FUNCTION CHUNK AT 10037AC1 SIZE 00000029 BYTES
; FUNCTION CHUNK AT 10037B03 SIZE 00000016 BYTES
; FUNCTION CHUNK AT 10037B32 SIZE 0000001C BYTES
; FUNCTION CHUNK AT 10037B67 SIZE 0000002C BYTES
; FUNCTION CHUNK AT 10037BAF SIZE 0000002B BYTES
; FUNCTION CHUNK AT 10037BF6 SIZE 0000001A BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 1
		jnz	short loc_10037C2B
		call	sub_10037F78

loc_10037C2B:				; CODE XREF: DllEntryPoint+9j
		pop	ebp
		jmp	loc_100379BF
DllEntryPoint	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10037C31	proc near		; CODE XREF: __security_check_cookie(x):$failure$3j

var_328		= dword	ptr -328h
var_324		= dword	ptr -324h
var_320		= dword	ptr -320h
var_s0		= dword	ptr  0
arg_0		= byte ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 328h
		mov	dword_1004B860,	eax
		mov	dword_1004B85C,	ecx
		mov	dword_1004B858,	edx
		mov	dword_1004B854,	ebx
		mov	dword_1004B850,	esi
		mov	dword_1004B84C,	edi
		mov	word_1004B878, ss
		mov	word_1004B86C, cs
		mov	word_1004B848, ds
		mov	word_1004B844, es
		mov	word_1004B840, fs
		mov	word_1004B83C, gs
		pushf
		pop	dword_1004B870
		mov	eax, [ebp+var_s0]
		mov	dword_1004B864,	eax
		mov	eax, [ebp+4]
		mov	dword_1004B868,	eax
		lea	eax, [ebp+arg_0]
		mov	dword_1004B874,	eax
		mov	eax, [ebp+var_320]
		mov	dword_1004B7B0,	10001h
		mov	eax, dword_1004B868
		mov	dword_1004B76C,	eax
		mov	dword_1004B760,	0C0000409h
		mov	dword_1004B764,	1
		mov	eax, ___security_cookie
		mov	[ebp+var_328], eax
		mov	eax, dword_10049310
		mov	[ebp+var_324], eax
		push	0		; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		push	offset ExceptionInfo ; ExceptionInfo
		call	ds:UnhandledExceptionFilter
		push	0C0000409h	; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess
		leave
		retn
sub_10037C31	endp

; ---------------------------------------------------------------------------
		align 10h
		push	esi
		mov	eax, [esp+14h]
		or	eax, eax
		jnz	short loc_10037D51
		mov	ecx, [esp+10h]
		mov	eax, [esp+0Ch]
		xor	edx, edx
		div	ecx
		mov	ebx, eax
		mov	eax, [esp+8]
		div	ecx
		mov	esi, eax
		mov	eax, ebx
		mul	dword ptr [esp+10h]
		mov	ecx, eax
		mov	eax, esi
		mul	dword ptr [esp+10h]
		add	edx, ecx
		jmp	short loc_10037D98
; ---------------------------------------------------------------------------

loc_10037D51:				; CODE XREF: .text:10037D27j
		mov	ecx, eax
		mov	ebx, [esp+10h]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+8]

loc_10037D5F:				; CODE XREF: .text:10037D69j
		shr	ecx, 1
		rcr	ebx, 1
		shr	edx, 1
		rcr	eax, 1
		or	ecx, ecx
		jnz	short loc_10037D5F
		div	ebx
		mov	esi, eax
		mul	dword ptr [esp+14h]
		mov	ecx, eax
		mov	eax, [esp+10h]
		mul	esi
		add	edx, ecx
		jb	short loc_10037D8D
		cmp	edx, [esp+0Ch]
		ja	short loc_10037D8D
		jb	short loc_10037D96
		cmp	eax, [esp+8]
		jbe	short loc_10037D96

loc_10037D8D:				; CODE XREF: .text:10037D7Dj
					; .text:10037D83j
		dec	esi
		sub	eax, [esp+10h]
		sbb	edx, [esp+14h]

loc_10037D96:				; CODE XREF: .text:10037D85j
					; .text:10037D8Bj
		xor	ebx, ebx

loc_10037D98:				; CODE XREF: .text:10037D4Fj
		sub	eax, [esp+8]
		sbb	edx, [esp+0Ch]
		neg	edx
		neg	eax
		sbb	edx, 0
		mov	ecx, edx
		mov	edx, ebx
		mov	ebx, ecx
		mov	ecx, eax
		mov	eax, esi
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------
		align 4
		push	ebx
		push	ecx
		mov	ebx, offset dword_10049320
		jmp	short loc_10037DCC

; =============== S U B	R O U T	I N E =======================================


sub_10037DC1	proc near		; CODE XREF: sub_100374F4+6Ep
					; sub_100375FD+8p

arg_0		= dword	ptr  4

		push	ebx
		push	ecx
		mov	ebx, offset dword_10049320
		mov	ecx, [esp+8+arg_0]

loc_10037DCC:				; CODE XREF: .text:10037DBFj
		mov	[ebx+8], ecx
		mov	[ebx+4], eax
		mov	[ebx+0Ch], ebp
		push	ebp
		push	ecx
		push	eax
		pop	eax
		pop	ecx
		pop	ebp
		pop	ecx
		pop	ebx
		retn	4
sub_10037DC1	endp


; =============== S U B	R O U T	I N E =======================================


sub_10037DE0	proc near		; CODE XREF: sub_100374F4+7Bp
		call	eax
		retn
sub_10037DE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10037DF0	proc near		; CODE XREF: sub_10037E74+16p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, 5A4Dh
		cmp	[ecx], ax
		jz	short loc_10037E06

loc_10037E02:				; CODE XREF: sub_10037DF0+21j
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10037E06:				; CODE XREF: sub_10037DF0+10j
		mov	eax, [ecx+3Ch]
		add	eax, ecx
		cmp	dword ptr [eax], 4550h
		jnz	short loc_10037E02
		xor	edx, edx
		mov	ecx, 10Bh
		cmp	[eax+18h], cx
		setz	dl
		mov	eax, edx
		pop	ebp
		retn
sub_10037DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10037E30	proc near		; CODE XREF: sub_10037E74+27p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		push	ebx
		push	esi
		movzx	esi, word ptr [ecx+6]
		xor	edx, edx
		push	edi
		lea	eax, [eax+ecx+18h]
		test	esi, esi
		jbe	short loc_10037E6D
		mov	edi, [ebp+arg_4]

loc_10037E55:				; CODE XREF: sub_10037E30+3Bj
		mov	ecx, [eax+0Ch]
		cmp	edi, ecx
		jb	short loc_10037E65
		mov	ebx, [eax+8]
		add	ebx, ecx
		cmp	edi, ebx
		jb	short loc_10037E6F

loc_10037E65:				; CODE XREF: sub_10037E30+2Aj
		inc	edx
		add	eax, 28h
		cmp	edx, esi
		jb	short loc_10037E55

loc_10037E6D:				; CODE XREF: sub_10037E30+20j
		xor	eax, eax

loc_10037E6F:				; CODE XREF: sub_10037E30+33j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10037E30	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10037E74	proc near		; CODE XREF: sub_10037650+F4p
					; sub_10037838+E7p

ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	8
		push	offset stru_10048158
		call	__SEH_prolog4
		and	[ebp+ms_exc.registration.TryLevel], 0
		mov	esi, 10000000h
		push	esi
		call	sub_10037DF0
		pop	ecx
		test	eax, eax
		jz	short loc_10037ED1
		mov	eax, [ebp+arg_0]
		sub	eax, esi
		push	eax
		push	esi
		call	sub_10037E30
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10037ED1
		mov	eax, [eax+24h]
		shr	eax, 1Fh
		not	eax
		and	eax, 1
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		jmp	short loc_10037EDA
; ---------------------------------------------------------------------------

loc_10037EBA:				; DATA XREF: .rdata:stru_10048158o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 10037E74
		mov	eax, [eax]
		mov	eax, [eax]
		xor	ecx, ecx
		cmp	eax, 0C0000005h
		setz	cl
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_10037ECE:				; DATA XREF: .rdata:stru_10048158o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 10037E74

loc_10037ED1:				; CODE XREF: sub_10037E74+1Ej
					; sub_10037E74+30j
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		xor	eax, eax

loc_10037EDA:				; CODE XREF: sub_10037E74+44j
		call	__SEH_epilog4
		retn
sub_10037E74	endp

; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]

; =============== S U B	R O U T	I N E =======================================


sub_10037EF2	proc near		; CODE XREF: DllEntryPoint-180p
					; DllEntryPoint-138p
		xor	eax, eax
		inc	eax
		retn	0Ch
sub_10037EF2	endp

; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10037F51(int,	PVOID TargetFrame, int,	int)
sub_10037F51	proc near		; DATA XREF: __SEH_prolog4o
					; .rdata:100480D4o

arg_0		= dword	ptr  8
TargetFrame	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_8]	; int
		push	[ebp+TargetFrame] ; TargetFrame
		push	[ebp+arg_0]	; int
		push	offset @__security_check_cookie@4 ; int
		push	offset ___security_cookie ; int
		call	sub_10037650
		add	esp, 18h
		pop	ebp
		retn
sub_10037F51	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10037F78	proc near		; CODE XREF: DllEntryPoint+Bp

PerformanceCount= LARGE_INTEGER	ptr -10h
SystemTimeAsFileTime= _FILETIME	ptr -8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, ___security_cookie
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		push	ebx
		push	edi
		mov	edi, 0BB40E64Eh
		mov	ebx, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_10037FAA
		test	ebx, eax
		jz	short loc_10037FAA
		not	eax
		mov	dword_10049310,	eax
		jmp	short loc_10038005
; ---------------------------------------------------------------------------

loc_10037FAA:				; CODE XREF: sub_10037F78+23j
					; sub_10037F78+27j
		push	esi
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	esi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		call	ds:GetCurrentProcessId
		xor	esi, eax
		call	ds:GetCurrentThreadId
		xor	esi, eax
		call	ds:GetTickCount
		xor	esi, eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	eax, dword ptr [ebp+PerformanceCount+4]
		xor	eax, dword ptr [ebp+PerformanceCount]
		xor	esi, eax
		cmp	esi, edi
		jz	short loc_10037FF1
		test	___security_cookie, ebx
		jnz	short loc_10037FF6

loc_10037FF1:				; CODE XREF: sub_10037F78+6Fj
		mov	esi, 0BB40E64Fh

loc_10037FF6:				; CODE XREF: sub_10037F78+77j
		mov	___security_cookie, esi
		not	esi
		mov	dword_10049310,	esi
		pop	esi

loc_10038005:				; CODE XREF: sub_10037F78+30j
		pop	edi
		pop	ebx
		leave
		retn
sub_10037F78	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind]
		align 200h
		dd 380h	dup(?)
_text		ends

; Section 2. (virtual address 00039000)
; Virtual size			: 0000F85F (  63583.)
; Section size in file		: 0000FA00 (  64000.)
; Offset to raw	data for section: 00037600
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from ADVAPI32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn SystemFunction036:dword ;	CODE XREF: sub_10001320+Ep
					; DATA XREF: sub_10001320+Er ...

;
; Imports from KERNEL32.dll
;
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_10037F78+37p
					; DATA XREF: sub_10037F78+37r ...
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_10037C31+BDp
					; DATA XREF: sub_10037C31+BDr
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: sub_10037C31+C8p
					; DATA XREF: sub_10037C31+C8r
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: sub_10037C31+DAp
					; DATA XREF: sub_10037C31+DAr
; LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination,	LONG Exchange, LONG Comperand)
		extrn InterlockedCompareExchange:dword ; CODE XREF: sub_10037838+6Dp
					; sub_10037838+116p
					; DATA XREF: ...
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_10037838+63p
					; sub_10037838+10Bp
					; DATA XREF: ...
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn InterlockedExchange:dword	; CODE XREF: sub_10037838+D4p
					; sub_10037838+177p
					; DATA XREF: ...
; void __stdcall RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD	ExceptionRecord, PVOID ReturnValue)
		extrn __imp_RtlUnwind:dword ; DATA XREF: RtlUnwindr
; void __stdcall GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer)
		extrn GlobalMemoryStatus:dword ; CODE XREF: sub_10001120+3Bp
					; DATA XREF: sub_10001120+3Br
; DWORD	__stdcall GetLogicalDrives()
		extrn GetLogicalDrives:dword ; CODE XREF: sub_10001120+50p
					; DATA XREF: sub_10001120+50r
; BOOL __stdcall GetComputerNameA(LPSTR	lpBuffer, LPDWORD nSize)
		extrn GetComputerNameA:dword ; CODE XREF: sub_10001120+79p
					; DATA XREF: sub_10001120+79r
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: sub_10001120:loc_100011B4p
					; sub_10037C31+D3p
					; DATA XREF: ...
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10001120+ADp
					; sub_10037F78+43p
					; DATA XREF: ...
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10001120+C5p
					; sub_10037F78+4Bp
					; DATA XREF: ...
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_10001020+85p
					; sub_10037F78+53p
					; DATA XREF: ...
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10001020+18p
					; sub_10037F78+5Fp
					; DATA XREF: ...
; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
		extrn GetDiskFreeSpaceA:dword ;	CODE XREF: sub_10001120+194p
					; DATA XREF: sub_10001120+194r
; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer,	DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR	lpFileSystemNameBuffer,	DWORD nFileSystemNameSize)
		extrn GetVolumeInformationA:dword ; CODE XREF: sub_10001120+112p
					; DATA XREF: sub_10001120+112r

;
; Imports from libnspr4.dll
;
		extrn PR_NewCondVar:dword ; CODE XREF: sub_1001EF50+21p
					; DATA XREF: sub_1001EF50+21r ...
		extrn PR_NotifyAllCondVar:dword	; CODE XREF: sub_1001F150+371p
					; DATA XREF: sub_1001F150+371r
		extrn PR_NotifyCondVar:dword ; CODE XREF: sub_1001F150+1D5p
					; DATA XREF: sub_1001F150+1D5r
		extrn PR_WaitCondVar:dword ; CODE XREF:	sub_1001F150+F5p
					; DATA XREF: sub_1001F150+F5r
		extrn PR_DestroyCondVar:dword ;	CODE XREF: sub_1001FEB0+83p
					; DATA XREF: sub_1001FEB0+83r
		extrn PR_Read:dword	; CODE XREF: sub_100214E0+10p
					; sub_100214E0+56p ...
		extrn PR_Close:dword	; CODE XREF: sub_10021570+160p
					; sub_10021570+207p ...
		extrn PR_Seek:dword	; CODE XREF: sub_10021570+FFp
					; DATA XREF: sub_10021570+FFr
		extrn PR_Open:dword	; CODE XREF: sub_10021570+80p
					; sub_10021570+18Fp
					; DATA XREF: ...
		extrn PR_Free:dword	; CODE XREF: sub_10021880+26p
					; sub_100218C0+30p
					; DATA XREF: ...
		extrn PR_GetLibraryFilePathname:dword ;	CODE XREF: sub_10021880+Ep
					; sub_100218C0+18p
					; DATA XREF: ...
		extrn PR_Lock:dword	; CODE XREF: sub_1000CA80+Bp
					; sub_1000CBD0+28p ...
		extrn PR_Unlock:dword	; CODE XREF: sub_1000CA80+45p
					; sub_1000CA80+72p ...
		extrn PR_NewLock:dword	; CODE XREF: sub_1000C930+26p
					; sub_1001EF50p
					; DATA XREF: ...
		extrn PR_DestroyLock:dword ; CODE XREF:	sub_1000C310+1Cp
					; sub_1000C930+FEp ...
		extrn PR_CallOnce:dword	; CODE XREF: sub_1000CA60+Ap
					; sub_1001FE80+Ap
					; DATA XREF: ...

;
; Imports from msvcrt.dll
;
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn strncmp:dword	; CODE XREF: sub_10021440+3Bp
					; DATA XREF: sub_10021440+3Br ...
; int __cdecl rand()
		extrn rand:dword	; CODE XREF: sub_10026200:loc_10026225p
					; DATA XREF: sub_10026200+19r
; void __cdecl free(void *Memory)
		extrn free:dword	; CODE XREF: sub_10026630+35Ap
					; sub_100280A0+7C1p ...
; void *__cdecl	malloc(size_t Size)
		extrn malloc:dword	; CODE XREF: sub_10026630+2Fp
					; sub_100280A0+88p ...
; void __cdecl abort()
		extrn abort:dword	; CODE XREF: sub_10026C60:loc_10027F22p
					; sub_100280A0:loc_100287DFp
					; DATA XREF: ...
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn calloc:dword	; CODE XREF: sub_10028D30+28p
					; sub_10028D90+1Cp ...
; int __cdecl islower(int C)
		extrn islower:dword	; CODE XREF: sub_1002BAB0+ADp
					; sub_1002BAB0+14Dp
					; DATA XREF: ...
; int __cdecl isupper(int C)
		extrn isupper:dword	; CODE XREF: sub_1002BAB0+9Ap
					; sub_1002BAB0+13Ap
					; DATA XREF: ...
; int __cdecl isdigit(int C)
		extrn isdigit:dword	; CODE XREF: sub_1002BAB0+5Ep
					; sub_1002BAB0+FEp
					; DATA XREF: ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; char *__cdecl	strdup(const char *Src)
		extrn _strdup:dword	; CODE XREF: sub_1002E140+2C4p
					; sub_1002E510+2Bp ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
		extrn __imp__XcptFilter:dword ;	DATA XREF: _XcptFilterr
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; time_t __cdecl static	time(time_t *Time)
		extrn time:dword	; CODE XREF: sub_10001020+C2p
					; DATA XREF: sub_10001020+C2r
; int __cdecl toupper(int C)
		extrn toupper:dword	; CODE XREF: sub_1002BAB0+52p
					; sub_1002BAB0+F2p
					; DATA XREF: ...

;
; Imports from nssutil3.dll
;
		extrn __imp_SECITEM_CompareItem_Util:dword
					; DATA XREF: SECITEM_CompareItem_Utilr
					; .rdata:10048184o
		extrn __imp_SECITEM_ZfreeItem_Util:dword
					; DATA XREF: SECITEM_ZfreeItem_Utilr
		extrn __imp_SECOID_FindOIDTag_Util:dword
					; DATA XREF: SECOID_FindOIDTag_Utilr
		extrn __imp_PORT_ArenaAlloc_Util:dword ; DATA XREF: PORT_ArenaAlloc_Utilr
		extrn __imp_SECITEM_FreeItem_Util:dword	; DATA XREF: SECITEM_FreeItem_Utilr
		extrn __imp_SECITEM_CopyItem_Util:dword	; DATA XREF: SECITEM_CopyItem_Utilr
		extrn __imp_PORT_NewArena_Util:dword ; DATA XREF: PORT_NewArena_Utilr
		extrn __imp_PORT_ArenaZAlloc_Util:dword	; DATA XREF: PORT_ArenaZAlloc_Utilr
		extrn __imp_PORT_FreeArena_Util:dword ;	DATA XREF: PORT_FreeArena_Utilr
		extrn __imp_SECITEM_AllocItem_Util:dword
					; DATA XREF: SECITEM_AllocItem_Utilr
		extrn __imp_NSS_SecureMemcmp:dword ; DATA XREF:	NSS_SecureMemcmpr
		extrn __imp_PORT_GetError_Util:dword ; DATA XREF: PORT_GetError_Utilr
		extrn __imp_PORT_ZFree_Util:dword ; DATA XREF: PORT_ZFree_Utilr
		extrn __imp_PORT_ZAlloc_Util:dword ; DATA XREF:	PORT_ZAlloc_Utilr
		extrn __imp_PORT_SetError_Util:dword ; DATA XREF: PORT_SetError_Utilr
		extrn __imp_PORT_Free_Util:dword ; DATA	XREF: PORT_Free_Utilr
		extrn __imp_PORT_Alloc_Util:dword ; DATA XREF: PORT_Alloc_Utilr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 10039128h
dword_10039128	dd 0			; DATA XREF: sub_10037838+B9o
dword_1003912C	dd 0			; DATA XREF: sub_10037838+B4o
dword_10039130	dd 0			; DATA XREF: sub_10037838+96o
		dd offset sub_10037816
dword_10039138	dd 2 dup(0)		; DATA XREF: sub_10037838:loc_100378C9o
byte_10039140	db 24h			; DATA XREF: FREEBL_GetVector+8r
aHeaderNss3_17_	db 'Header: NSS 3.17.1 Basic ECC  Sep 27 2014 21:02:40 $',0
		align 4
byte_10039178	db 40h			; DATA XREF: FREEBL_GetVector+1r
aNss3_17_1Basic	db '(#)NSS 3.17.1 Basic ECC  Sep 27 2014 21:02:40',0
		align 4
dword_100391A8	dd 3110348h		; DATA XREF: FREEBL_GetVector+15o
		dd offset sub_1001DA90
		dd offset sub_1001E6B0
		dd offset sub_1001F840
		dd offset sub_1001C860
		dd offset sub_1001CDA0
		dd offset sub_1001CED0
		dd offset sub_1001C8F0
		dd offset sub_1001CEB0
		dd offset sub_10015F50
		dd offset sub_100163F0
		dd offset sub_10016760
		dd offset sub_10016A60
		dd offset sub_10016E40
		dd offset sub_1000A170
		dd offset sub_1000A1C0
		dd offset sub_1000A7F0
		dd offset sub_1000A7F0
		dd offset sub_10009F70
		dd offset sub_100087D0
		dd offset sub_10009D40
		dd offset sub_10009DB0
		dd offset sub_1000A830
		dd offset sub_1000A840
		dd offset sub_1001C3B0
		dd offset sub_1001C3B0
		dd offset sub_1000AD70
		dd offset sub_1000ADC0
		dd offset sub_1000ADF0
		dd offset sub_1000AE50
		dd offset sub_1000F830
		dd offset sub_1000F5D0
		dd offset sub_1000F620
		dd offset sub_1000F620
		dd offset sub_10003D30
		dd offset sub_10003CB0
		dd offset sub_100032D0
		dd offset sub_100032F0
		dd offset sub_10003320
		dd offset sub_10003A80
		dd offset sub_10003B30
		dd offset sub_10003C20
		dd offset sub_10003C30
		dd offset sub_10003C50
		dd offset sub_10003CA0
		dd offset sub_10003200
		dd offset sub_10002820
		dd offset sub_10002840
		dd offset sub_10002860
		dd offset sub_10003030
		dd offset sub_100030E0
		dd offset sub_10003170
		dd offset sub_10003180
		dd offset sub_100031A0
		dd offset sub_100027F0
		dd offset sub_10002750
		dd offset sub_10002560
		dd offset sub_10002570
		dd offset sub_10001340
		dd offset sub_10002620
		dd offset sub_100026C0
		dd offset sub_10003CA0
		dd offset sub_100025A0
		dd offset sub_100025B0
		dd offset sub_100025D0
		dd offset sub_1000CA60
		dd offset sub_1000CA80
		dd offset sub_1000CD60
		dd offset sub_1000C3A0
		dd offset sub_1001B720
		dd offset sub_1001B770
		dd offset sub_1001B880
		dd offset sub_1001F860
		dd offset sub_1001F880
		dd offset sub_1001FF70
		dd offset sub_10003DC0
		dd offset sub_10003DD0
		dd offset sub_10003E00
		dd offset sub_100065B0
		dd offset sub_10006670
		dd offset sub_10006810
		dd offset sub_100068A0
		dd offset nullsub_1
		dd offset sub_10006940
		dd offset sub_10006B40
		dd offset sub_10006950
		dd offset sub_10008210
		dd offset sub_10008220
		dd offset sub_10006B80
		dd offset sub_10007D30
		dd offset sub_10007DF0
		dd offset sub_10008070
		dd offset sub_10008100
		dd offset nullsub_1
		dd offset sub_10008400
		dd offset sub_100081A0
		dd offset sub_100081C0
		dd offset sub_10008210
		dd offset sub_10008220
		dd offset sub_10008250
		dd offset sub_10008280
		dd offset sub_10008290
		dd offset sub_100082D0
		dd offset sub_10008360
		dd offset nullsub_1
		dd offset sub_10008400
		dd offset sub_100081A0
		dd offset sub_100081C0
		dd offset sub_1000F920
		dd offset sub_1000F990
		dd offset sub_1000FAC0
		dd offset sub_1000FC80
		dd offset sub_10021880
		dd offset sub_100218C0
		dd offset sub_10017890
		dd offset sub_10017690
		dd offset sub_100178F0
		dd offset sub_10017AC0
		dd offset sub_100181C0
		dd offset sub_10018220
		dd offset sub_10017CC0
		dd offset sub_1000F6D0
		dd offset sub_1000F8C0
		dd offset sub_1000AB70
		dd offset sub_10009E20
		dd offset sub_10009FE0
		dd offset sub_1000F4A0
		dd offset sub_1000F8B0
		dd offset sub_1000AB60
		dd offset sub_100087C0
		dd offset sub_10009FD0
		dd offset sub_100031E0
		dd offset sub_10003C80
		dd offset sub_10002600
		dd offset sub_10006B60
		dd offset sub_100081F0
		dd offset sub_100081F0
		dd offset sub_10021AF0
		dd offset sub_10008790
		dd offset sub_100085B0
		dd offset sub_10008450
		dd offset sub_10008600
		dd offset sub_10008630
		dd offset sub_100086F0
		dd offset sub_10008650
		dd offset sub_10008410
		dd offset sub_10001120
		dd offset sub_1001C3B0
		dd offset sub_1001C390
		dd offset sub_10015C80
		dd offset sub_10015C70
		dd offset sub_10015D40
		dd offset sub_10015E50
		dd offset sub_10015E80
		dd offset sub_10015E80
		dd offset sub_1001C1B0
		dd offset sub_1001C200
		dd offset sub_10024810
		dd offset sub_10024800
		dd offset sub_100248B0
		dd offset sub_10024900
		dd offset sub_10024930
		dd offset sub_100249B0
		dd offset sub_1001FE80
		dd offset sub_1001FF80
		dd offset sub_1000C3F0
		dd offset sub_1000C4B0
		dd offset sub_1000C510
		dd offset sub_1000C570
		dd offset sub_1001E2F0
		dd offset sub_1001C780
		dd offset sub_10024BB0
		dd offset sub_10025210
		dd offset sub_10025990
		dd offset sub_10025DB0
		dd offset sub_10021900
		dd offset sub_10003DC0
		dd offset sub_10003DD0
		dd offset sub_10006980
		dd offset sub_100069B0
		dd offset sub_100069C0
		dd offset sub_10006A00
		dd offset sub_10006A90
		dd offset nullsub_1
		dd offset sub_10006940
		dd offset sub_10006B40
		dd offset sub_10006950
		dd offset sub_10006B60
		dd offset sub_10021570
		dd offset sub_1001B7C0
		dd offset sub_1000C5B0
		dd offset sub_1000E5F0
		dd offset sub_1000E640
		dd offset sub_100201F0
		dd offset sub_10020270
		dd offset sub_10020330
		dd offset sub_10020380
		dd offset sub_10020400
		dd offset sub_10020950
		dd offset sub_10020A60
		dd offset sub_10020B60
		dd offset sub_10020BF0
		dd offset sub_10021050
		dd offset sub_10021120
		dd offset sub_10021200
		dd offset sub_10021290
		dd offset sub_10021380
		dd offset sub_10018A60
		dd offset sub_10018E30
		dd offset sub_100187F0
dword_100394F0	dd 80h,	0Fh dup(0)	; DATA XREF: sub_100026C0+19o
byte_10039530	db 29h			; DATA XREF: sub_10002880+Fr
					; sub_10002880+2Fr ...
		db 2Eh,	43h, 0C9h
		dd 17CD8A2h, 0A154363Dh, 1306F0ECh, 0F305A762h,	8C73C7C0h
		dd 0D92B9398h, 0CA824CBCh, 3C579B1Eh, 16E0D4FDh, 186F4267h
		dd 12E5178Ah, 0D6C44EBEh, 49DE9EDAh, 8EF5FBA0h,	7AEE2FBBh
		dd 917968A9h, 3F07B215h, 8910C294h, 215F220Bh, 9A5D7F80h
		dd 2732905Ah, 0E7CC3E35h, 397F7BFh, 0B33019FFh,	0D1B5A548h
		dd 2A925ED7h, 0C6AA56ACh, 0D238B84Fh, 0B67DA496h, 0E26BFC76h
		dd 0F104749Ch, 59709D45h, 20877164h, 65CF5B86h,	2A82DE6h
		dd 0AD25601Bh, 0F6B9B0AEh, 6961461Ch, 0F7E4034h, 23A34755h
		dd 3AAF51DDh, 0CEF95CC3h, 26EAC5BAh, 6E0D532Ch,	9842885h
		dd 0F4CDDFD3h, 524D8141h, 0C837DC6Ah, 0FAABC16Ch, 87BE124h
		dd 4AB1BD0Ch, 8B958878h, 6DE863E3h, 0FED5CBE9h,	391D003Bh
		dd 0EB7EFF2h, 0E4D05866h, 0F87277A6h, 0A4B75EBh, 0B4504431h
		dd 1A1FED8Fh, 338D99DBh, 1483119Fh
dword_10039630	dd 80h,	1Dh dup(0)	; DATA XREF: sub_10003B30:loc_10003B82o
dword_100396A8	dd 80h,	3Bh dup(0)	; DATA XREF: sub_10006670+33o
					; sub_10007DF0+3Fo
		dd 428A2F98h, 71374491h, 0B5C0FBCFh, 0E9B5DBA5h, 3956C25Bh
		dd 59F111F1h, 923F82A4h, 0AB1C5ED5h, 0D807AA98h, 12835B01h
		dd 243185BEh, 550C7DC3h, 72BE5D74h, 80DEB1FEh, 9BDC06A7h
		dd 0C19BF174h, 0E49B69C1h, 0EFBE4786h, 0FC19DC6h, 240CA1CCh
		dd 2DE92C6Fh, 4A7484AAh, 5CB0A9DCh, 76F988DAh, 983E5152h
		dd 0A831C66Dh, 0B00327C8h, 0BF597FC7h, 0C6E00BF3h, 0D5A79147h
		dd 6CA6351h, 14292967h,	27B70A85h, 2E1B2138h, 4D2C6DFCh
		dd 53380D13h, 650A7354h, 766A0ABBh, 81C2C92Eh, 92722C85h
		dd 0A2BFE8A1h, 0A81A664Bh, 0C24B8B70h, 0C76C51A3h, 0D192E819h
		dd 0D6990624h, 0F40E3585h, 106AA070h, 19A4C116h, 1E376C08h
		dd 2748774Ch, 34B0BCB5h, 391C0CB3h, 4ED8AA4Ah, 5B9CCA4Fh
		dd 682E6FF3h, 748F82EEh, 78A5636Fh, 84C87814h, 8CC70208h
		dd 90BEFFFAh, 0A4506CEBh, 0BEF9A3F7h, 0C67178F2h
dword_10039898	dd 6A09E667h, 0BB67AE85h, 3C6EF372h, 0A54FF53Ah, 510E527Fh
					; DATA XREF: sub_10003E00+21o
					; sub_10006810+3Co ...
		dd 9B05688Ch, 1F83D9ABh, 5BE0CD19h
dword_100398B8	dd 0C1059ED8h, 367CD507h, 3070DD17h, 0F70E5939h, 0FFC00B31h
					; DATA XREF: sub_10006980+21o
					; sub_10006A00+3Co ...
		dd 68581511h, 64F98FA7h, 0BEFA4FA4h
dword_100398D8	dd 0D728AE22h		; DATA XREF: sub_10006BB0+216o
dword_100398DC	dd 428A2F98h		; DATA XREF: sub_10006BB0+22Ao
					; sub_10006BB0+34Fo
dword_100398E0	dd 23EF65CDh		; DATA XREF: sub_10006BB0+235o
dword_100398E4	dd 71374491h		; DATA XREF: sub_10006BB0+240o
dword_100398E8	dd 0EC4D3B2Fh		; DATA XREF: sub_10006BB0+24Bo
dword_100398EC	dd 0B5C0FBCFh		; DATA XREF: sub_10006BB0+256o
dword_100398F0	dd 8189DBBCh		; DATA XREF: sub_10006BB0+26Eo
dword_100398F4	dd 0E9B5DBA5h		; DATA XREF: sub_10006BB0+292o
dword_100398F8	dd 0F348B538h		; DATA XREF: sub_10006BB0+2BAo
dword_100398FC	dd 3956C25Bh		; DATA XREF: sub_10006BB0+2D2o
dword_10039900	dd 0B605D019h		; DATA XREF: sub_10006BB0+2E7o
dword_10039904	dd 59F111F1h		; DATA XREF: sub_10006BB0+2FFo
dword_10039908	dd 0AF194F9Bh		; DATA XREF: sub_10006BB0+31Eo
dword_1003990C	dd 923F82A4h, 0DA6D8118h, 0AB1C5ED5h, 0A3030242h, 0D807AA98h
					; DATA XREF: sub_10006BB0+336o
		dd 45706FBEh, 12835B01h, 4EE4B28Ch, 243185BEh, 0D5FFB4E2h
		dd 550C7DC3h, 0F27B896Fh, 72BE5D74h, 3B1696B1h,	80DEB1FEh
		dd 25C71235h, 9BDC06A7h, 0CF692694h, 0C19BF174h, 9EF14AD2h
		dd 0E49B69C1h, 384F25E3h, 0EFBE4786h, 8B8CD5B5h, 0FC19DC6h
		dd 77AC9C65h, 240CA1CCh, 592B0275h, 2DE92C6Fh, 6EA6E483h
		dd 4A7484AAh, 0BD41FBD4h, 5CB0A9DCh, 831153B5h,	76F988DAh
		dd 0EE66DFABh, 983E5152h, 2DB43210h, 0A831C66Dh, 98FB213Fh
		dd 0B00327C8h, 0BEEF0EE4h, 0BF597FC7h, 3DA88FC2h, 0C6E00BF3h
		dd 930AA725h, 0D5A79147h, 0E003826Fh, 6CA6351h,	0A0E6E70h
		dd 14292967h, 46D22FFCh, 27B70A85h, 5C26C926h, 2E1B2138h
		dd 5AC42AEDh, 4D2C6DFCh, 9D95B3DFh, 53380D13h, 8BAF63DEh
		dd 650A7354h, 3C77B2A8h, 766A0ABBh, 47EDAEE6h, 81C2C92Eh
		dd 1482353Bh, 92722C85h, 4CF10364h, 0A2BFE8A1h,	0BC423001h
		dd 0A81A664Bh, 0D0F89791h, 0C24B8B70h, 654BE30h, 0C76C51A3h
		dd 0D6EF5218h, 0D192E819h, 5565A910h, 0D6990624h, 5771202Ah
		dd 0F40E3585h, 32BBD1B8h, 106AA070h, 0B8D2D0C8h, 19A4C116h
		dd 5141AB53h, 1E376C08h, 0DF8EEB99h, 2748774Ch,	0E19B48A8h
		dd 34B0BCB5h, 0C5C95A63h, 391C0CB3h, 0E3418ACBh, 4ED8AA4Ah
		dd 7763E373h, 5B9CCA4Fh, 0D6B2B8A3h, 682E6FF3h,	5DEFB2FCh
		dd 748F82EEh, 43172F60h, 78A5636Fh, 0A1F0AB72h,	84C87814h
		dd 1A6439ECh, 8CC70208h, 23631E28h, 90BEFFFAh, 0DE82BDE9h
		dd 0A4506CEBh, 0B2C67915h, 0BEF9A3F7h, 0E372532Bh, 0C67178F2h
		dd 0EA26619Ch, 0CA273ECEh, 21C0C207h, 0D186B8C7h, 0CDE0EB1Eh
		dd 0EADA7DD6h, 0EE6ED178h, 0F57D4F7Fh, 72176FBAh, 6F067AAh
		dd 0A2C898A6h, 0A637DC5h, 0BEF90DAEh, 113F9804h, 131C471Bh
		dd 1B710B35h, 23047D84h, 28DB77F5h, 40C72493h, 32CAAB7Bh
		dd 15C9BEBCh, 3C9EBE0Ah, 9C100D4Ch, 431D67C4h, 0CB3E42B6h
		dd 4CC5D4BEh, 0FC657E2Ah, 597F299Ch, 3AD6FAECh,	5FCB6FABh
		dd 4A475817h, 6C44198Ch
dword_10039B58	dd 0F3BCC908h		; DATA XREF: sub_10006B80+21o
					; sub_10008070+3Co ...
dword_10039B5C	dd 6A09E667h, 84CAA73Bh, 0BB67AE85h, 0FE94F82Bh, 3C6EF372h
					; DATA XREF: sub_10006BB0+1082o
		dd 5F1D36F1h, 0A54FF53Ah, 0ADE682D1h, 510E527Fh, 2B3E6C1Fh
		dd 9B05688Ch, 0FB41BD6Bh, 1F83D9ABh, 137E2179h,	5BE0CD19h
dword_10039B98	dd 0C1059ED8h, 0CBBB9D5Dh, 367CD507h, 629A292Ah, 3070DD17h
					; DATA XREF: sub_10008250+21o
					; sub_100082D0+3Co ...
		dd 9159015Ah, 0F70E5939h, 152FECD8h, 0FFC00B31h, 67332667h
		dd 68581511h, 8EB44A87h, 64F98FA7h, 0DB0C2E0Dh,	0BEFA4FA4h
		dd 47B5481Dh
dword_10039BD8	dd 0			; DATA XREF: sub_10008790+Co
		dd offset sub_10008770
		dd offset sub_10008770
		dd offset nullsub_1
		dd offset nullsub_1
		dd offset nullsub_1
		dd offset sub_10008780
		dd 2 dup(0)
		dd offset sub_10008780
		dd 10h
		dd offset sub_10002820
		dd offset sub_10008770
		dd offset sub_10002840
		dd offset sub_10002860
		dd offset sub_10003030
		dd offset sub_100030E0
		dd 40h,	1, 0
		dd 10h
		dd offset sub_100032D0
		dd offset sub_10008770
		dd offset sub_100032F0
		dd offset sub_10003320
		dd offset sub_10003A80
		dd offset sub_10003B30
		dd 40h,	2
		dd offset sub_10003BD0
		dd 14h
		dd offset sub_10002560
		dd offset sub_10008770
		dd offset sub_10002570
		dd offset sub_10001340
		dd offset sub_10002620
		dd offset sub_100026C0
		dd 40h,	3
		dd offset sub_10001370
		dd 20h
		dd offset sub_10003DC0
		dd offset sub_10008770
		dd offset sub_10003DD0
		dd offset sub_10003E00
		dd offset sub_100065B0
		dd offset sub_10006670
		dd 40h,	4
		dd offset sub_10006770
		dd 30h
		dd offset sub_10008210
		dd offset sub_10008770
		dd offset sub_10008220
		dd offset sub_10008250
		dd offset sub_10008280
		dd offset sub_10008290
		dd 80h,	5
		dd offset sub_100082B0
		dd 40h
		dd offset sub_10008210
		dd offset sub_10008770
		dd offset sub_10008220
		dd offset sub_10006B80
		dd offset sub_10007D30
		dd offset sub_10007DF0
		dd 80h,	6
		dd offset sub_10007F80
		dd 1Ch
		dd offset sub_10003DC0
		dd offset sub_10008770
		dd offset sub_10003DD0
		dd offset sub_10006980
		dd offset sub_100069B0
		dd offset sub_100069C0
		dd 40h,	7
		dd offset sub_100069E0
byte_10039D18	db 0D9h			; DATA XREF: sub_10009E20+D9r
					; sub_10009E20+F3r ...
		db 78h,	0F9h, 0C4h
		dd 0EDB5DD19h, 79FDE928h, 9DD8A04Ah, 83377EC6h,	8E53762Bh
		dd 88644C62h, 0A2FB8B44h, 0F5599A17h, 134FB387h, 8D6D4561h
		dd 327D8109h, 0EB408FBDh, 0B7BB786h, 222195F0h,	824E6B5Ch
		dd 9365D654h, 1CB260CEh, 14C05673h, 0DCF18CA7h,	1FCA7512h
		dd 0D1E4BE3Bh, 30D43D42h, 26B63CA3h, 0DA0EBF6Fh, 57076946h
		dd 9B1DF227h, 34394BCh,	0F6C711F8h, 0E73EEF90h,	2FD5C306h
		dd 0D71E66C8h, 0DEEAE808h, 0F7EE5280h, 0AC72AA84h, 2A6A4D35h
		dd 71D21A96h, 7449155Ah, 5ED09F4Bh, 0ECA41804h,	6E41E0C2h
		dd 0CCCB510Fh, 50AF9124h, 3970F4A1h, 853A7C99h,	7AB4B823h
		dd 5B3602FCh, 31975525h, 98FA5D2Dh, 0AE928AE3h,	1029DF05h
		dd 0C9BA6C67h, 0CFE600D3h, 2CA89EE1h, 3F011663h, 0A989E258h
		dd 1B34380Dh, 0B0FF33ABh, 5F0C48BBh, 2ECDB1B9h,	47DBF3C5h
		dd 779CA5E5h, 6820A60Ah, 0ADC17FFEh
dword_10039E18	dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h
					; DATA XREF: sub_10009FE0+58o
		dd 17161514h, 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h
		dd 2B2A2928h, 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h
		dd 3F3E3D3Ch, 43424140h, 47464544h, 4B4A4948h, 4F4E4D4Ch
		dd 53525150h, 57565554h, 5B5A5958h, 5F5E5D5Ch, 63626160h
		dd 67666564h, 6B6A6968h, 6F6E6D6Ch, 73727170h, 77767574h
		dd 7B7A7978h, 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h
		dd 8F8E8D8Ch, 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch
		dd 0A3A2A1A0h, 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h
		dd 0B7B6B5B4h, 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h
		dd 0CBCAC9C8h, 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h
		dd 0DFDEDDDCh, 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh
		dd 0F3F2F1F0h, 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh
dword_10039F18	dd 4041000h		; DATA XREF: sub_1000B0A0+D3r
					; sub_1000B0A0+162r ...
		dd 0
		dd 40000h, 4041010h, 4040010h, 41010h, 10h, 40000h, 1000h
		dd 4041000h, 4041010h, 1000h, 4001010h,	4040010h, 4000000h
		dd 10h,	1010h, 2 dup(4001000h),	2 dup(41000h), 2 dup(4040000h)
		dd 4001010h, 40010h, 2 dup(4000010h), 40010h, 0
		dd 1010h, 41010h, 4000000h, 40000h, 4041010h, 10h, 4040000h
		dd 4041000h, 2 dup(4000000h), 1000h, 4040010h, 40000h
		dd 41000h, 4000010h, 1000h, 10h, 4001010h, 41010h, 4041010h
		dd 40010h, 4040000h, 4001010h, 4000010h, 1010h,	41010h
		dd 4041000h, 1010h, 2 dup(4001000h), 0
		dd 40010h, 41000h, 0
		dd 4040010h
dword_1003A018	dd 420082h		; DATA XREF: sub_1000B0A0+8Ar
					; sub_1000B0A0+119r ...
		dd 20002h, 20000h, 420080h, 400000h, 80h, 400082h, 20082h
		dd 82h,	420082h, 420002h, 2, 20002h, 400000h, 80h, 400082h
		dd 420000h, 400080h, 20082h, 0
		dd 2, 20000h, 420080h, 400002h,	400080h, 82h, 0
		dd 420000h, 20080h, 420002h, 400002h, 20080h, 0
		dd 420080h, 400082h, 400000h, 20082h, 400002h, 420002h
		dd 20000h, 400002h, 20002h, 80h, 420082h, 420080h, 80h
		dd 20000h, 2, 20080h, 420002h, 400000h,	82h, 400080h, 20082h
		dd 82h,	400080h, 420000h, 0
		dd 20002h, 20080h, 2, 400082h, 420082h,	420000h
dword_1003A118	dd 820h			; DATA XREF: sub_1000B0A0+E4r
					; sub_1000B0A0+173r ...
		dd 20080800h, 0
		dd 20080020h, 20000800h, 0
		dd 80820h, 20000800h, 80020h, 2	dup(20000020h),	80000h
		dd 20080820h, 80020h, 20080000h, 820h, 20000000h, 20h
		dd 20080800h, 800h, 80800h, 20080000h, 20080020h, 80820h
		dd 20000820h, 80800h, 80000h, 20000820h, 20h, 20080820h
		dd 800h, 20000000h, 20080800h, 20000000h, 80020h, 820h
		dd 80000h, 20080800h, 20000800h, 0
		dd 800h, 80020h, 20080820h, 20000800h, 20000020h, 800h
		dd 0
		dd 20080020h, 20000820h, 80000h, 20000000h, 20080820h
		dd 20h,	80820h,	80800h,	20000020h, 20080000h, 20000820h
		dd 820h, 20080000h, 80820h, 20h, 20080020h, 80800h
dword_1003A218	dd 2008004h		; DATA XREF: sub_1000B0A0+9Br
					; sub_1000B0A0+12Ar ...
		dd 2 dup(8204h), 200h, 2008200h, 2000204h, 2000004h, 8004h
		dd 0
		dd 2 dup(2008000h), 2008204h, 204h, 0
		dd 2000200h, 2000004h, 4, 8000h, 2000000h, 2008004h, 200h
		dd 2000000h, 8004h, 8200h, 2000204h, 4,	8200h, 2000200h
		dd 8000h, 2008200h, 2008204h, 204h, 2000200h, 2000004h
		dd 2008000h, 2008204h, 204h, 2 dup(0)
		dd 2008000h, 8200h, 2000200h, 2000204h,	4, 2008004h, 2 dup(8204h)
		dd 200h, 2008204h, 204h, 4, 8000h, 2000004h, 8004h, 2008200h
		dd 2000204h, 8004h, 8200h, 2000000h, 2008004h, 200h, 2000000h
		dd 8000h, 2008200h
dword_1003A318	dd 400h			; DATA XREF: sub_1000B0A0+F5r
					; sub_1000B0A0+184r ...
		dd 8200400h, 8200000h, 8000401h, 200000h, 400h,	1, 8200000h
		dd 200401h, 200000h, 8000400h, 200401h,	8000401h, 8200001h
		dd 200400h, 1, 8000000h, 2 dup(200001h), 0
		dd 401h, 2 dup(8200401h), 8000400h, 8200001h, 401h, 0
		dd 8000001h, 8200400h, 8000000h, 8000001h, 200400h, 200000h
		dd 8000401h, 400h, 8000000h, 1,	8200000h, 8000401h, 200401h
		dd 8000400h, 1,	8200001h, 8200400h, 200401h, 400h, 8000000h
		dd 8200001h, 8200401h, 200400h,	8000001h, 8200401h, 8200000h
		dd 0
		dd 200001h, 8000001h, 200400h, 8000400h, 401h, 200000h
		dd 0
		dd 200001h, 8200400h, 401h
dword_1003A418	dd 80000040h		; DATA XREF: sub_1000B0A0+ACr
					; sub_1000B0A0+13Br ...
		dd 81000000h, 10000h, 81010040h, 81000000h, 40h, 81010040h
		dd 1000000h, 80010000h,	1010040h, 1000000h, 80000040h
		dd 1000040h, 80010000h,	80000000h, 10040h, 0
		dd 1000040h, 80010040h,	10000h,	1010000h, 80010040h, 40h
		dd 2 dup(81000040h), 0
		dd 1010040h, 81010000h,	10040h,	1010000h, 81010000h, 80000000h
		dd 80010000h, 40h, 81000040h, 1010000h,	81010040h, 1000000h
		dd 10040h, 80000040h, 1000000h,	80010000h, 80000000h, 10040h
		dd 80000040h, 81010040h, 1010000h, 81000000h, 1010040h
		dd 81010000h, 0
		dd 81000040h, 40h, 10000h, 81000000h, 1010040h,	10000h
		dd 1000040h, 80010040h,	0
		dd 81010000h, 80000000h, 1000040h, 80010040h
dword_1003A518	dd 800000h		; DATA XREF: sub_1000B0A0+101r
					; sub_1000B0A0+190r ...
		dd 10800008h, 10002008h, 0
		dd 2000h, 10002008h, 802008h, 10802000h, 10802008h, 800000h
		dd 0
		dd 10000008h, 8, 10000000h, 10800008h, 2008h, 10002000h
		dd 802008h, 800008h, 10002000h,	10000008h, 10800000h, 10802000h
		dd 800008h, 10800000h, 2000h, 2008h, 10802008h,	802000h
		dd 8, 10000000h, 802000h, 10000000h, 802000h, 800000h
		dd 2 dup(10002008h), 2 dup(10800008h), 8, 800008h, 10000000h
		dd 10002000h, 800000h, 10802000h, 2008h, 802008h, 10802000h
		dd 2008h, 10000008h, 10802008h,	10800000h, 802000h, 0
		dd 8, 10802008h, 0
		dd 802008h, 10800000h, 2000h, 10000008h, 10002000h, 2000h
		dd 800008h
dword_1003A618	dd 40004100h		; DATA XREF: sub_1000B0A0+B8r
					; sub_1000B0A0+147r ...
		dd 4000h, 100000h, 40104100h, 40000000h, 40004100h, 100h
		dd 40000000h, 100100h, 40100000h, 40104100h, 104000h, 40104000h
		dd 104100h, 4000h, 100h, 40100000h, 40000100h, 40004000h
		dd 4100h, 104000h, 100100h, 40100100h, 40104000h, 4100h
		dd 2 dup(0)
		dd 40100100h, 40000100h, 40004000h, 104100h, 100000h, 104100h
		dd 100000h, 40104000h, 4000h, 100h, 40100100h, 4000h, 104100h
		dd 40004000h, 100h, 40000100h, 40100000h, 40100100h, 40000000h
		dd 100000h, 40004100h, 0
		dd 40104100h, 100100h, 40000100h, 40100000h, 40004000h
		dd 40004100h, 0
		dd 40104100h, 2	dup(104000h), 2	dup(4100h), 100100h, 40000000h
		dd 40104000h
dword_1003A718	dd 0			; DATA XREF: sub_1000AEB0+147r
		dd 1000h, 4000000h, 4001000h, 100000h, 101000h,	4100000h
		dd 4101000h, 8000h, 9000h, 4008000h, 4009000h, 108000h
		dd 109000h, 4108000h, 4109000h,	4, 1004h, 4000004h, 4001004h
		dd 100004h, 101004h, 4100004h, 4101004h, 8004h,	9004h
		dd 4008004h, 4009004h, 108004h,	109004h, 4108004h, 4109004h
		dd 8000000h, 8001000h, 0C000000h, 0C001000h, 8100000h
		dd 8101000h, 0C100000h,	0C101000h, 8008000h, 8009000h
		dd 0C008000h, 0C009000h, 8108000h, 8109000h, 0C108000h
		dd 0C109000h, 8000004h,	8001004h, 0C000004h, 0C001004h
		dd 8100004h, 8101004h, 0C100004h, 0C101004h, 8008004h
		dd 8009004h, 0C008004h,	0C009004h, 8108004h, 8109004h
		dd 0C108004h, 0C109004h
dword_1003A818	dd 0			; DATA XREF: sub_1000AEB0+15Dr
		dd 2000h, 80000000h, 80002000h,	8, 2008h, 80000008h, 80002008h
		dd 200000h, 202000h, 80200000h,	80202000h, 200008h, 202008h
		dd 80200008h, 80202008h, 20000000h, 20002000h, 0A0000000h
		dd 0A0002000h, 20000008h, 20002008h, 0A0000008h, 0A0002008h
		dd 20200000h, 20202000h, 0A0200000h, 0A0202000h, 20200008h
		dd 20202008h, 0A0200008h, 0A0202008h, 400h, 2400h, 80000400h
		dd 80002400h, 408h, 2408h, 80000408h, 80002408h, 200400h
		dd 202400h, 80200400h, 80202400h, 200408h, 202408h, 80200408h
		dd 80202408h, 20000400h, 20002400h, 0A0000400h,	0A0002400h
		dd 20000408h, 20002408h, 0A0000408h, 0A0002408h, 20200400h
		dd 20202400h, 0A0200400h, 0A0202400h, 20200408h, 20202408h
		dd 0A0200408h, 0A0202408h
dword_1003A918	dd 0			; DATA XREF: sub_1000AEB0+137r
		dd 4000h, 20h, 4020h, 80000h, 84000h, 80020h, 84020h, 800h
		dd 4800h, 820h,	4820h, 80800h, 84800h, 80820h, 84820h
		dd 10h,	4010h, 30h, 4030h, 80010h, 84010h, 80030h, 84030h
		dd 810h, 4810h,	830h, 4830h, 80810h, 84810h, 80830h, 84830h
		dd 400000h, 404000h, 400020h, 404020h, 480000h,	484000h
		dd 480020h, 484020h, 400800h, 404800h, 400820h,	404820h
		dd 480800h, 484800h, 480820h, 484820h, 400010h,	404010h
		dd 400030h, 404030h, 480010h, 484010h, 480030h,	484030h
		dd 400810h, 404810h, 400830h, 404830h, 480810h,	484810h
		dd 480830h, 484830h
dword_1003AA18	dd 0			; DATA XREF: sub_1000AEB0+131r
		dd 40000000h, 80h, 40000080h, 40000h, 40040000h, 40080h
		dd 40040080h, 40h, 40000040h, 0C0h, 400000C0h, 40040h
		dd 40040040h, 400C0h, 400400C0h, 10000000h, 50000000h
		dd 10000080h, 50000080h, 10040000h, 50040000h, 10040080h
		dd 50040080h, 10000040h, 50000040h, 100000C0h, 500000C0h
		dd 10040040h, 50040040h, 100400C0h, 500400C0h, 800000h
		dd 40800000h, 800080h, 40800080h, 840000h, 40840000h, 840080h
		dd 40840080h, 800040h, 40800040h, 8000C0h, 408000C0h, 840040h
		dd 40840040h, 8400C0h, 408400C0h, 10800000h, 50800000h
		dd 10800080h, 50800080h, 10840000h, 50840000h, 10840080h
		dd 50840080h, 10800040h, 50800040h, 108000C0h, 508000C0h
		dd 10840040h, 50840040h, 108400C0h, 508400C0h
dword_1003AB18	dd 0			; DATA XREF: sub_1000AEB0+19Fr
		dd 8, 8000000h,	8000008h, 40000h, 40008h, 8040000h, 8040008h
		dd 2000h, 2008h, 8002000h, 8002008h, 42000h, 42008h, 8042000h
		dd 8042008h, 80000000h,	80000008h, 88000000h, 88000008h
		dd 80040000h, 80040008h, 88040000h, 88040008h, 80002000h
		dd 80002008h, 88002000h, 88002008h, 80042000h, 80042008h
		dd 88042000h, 88042008h, 80000h, 80008h, 8080000h, 8080008h
		dd 0C0000h, 0C0008h, 80C0000h, 80C0008h, 82000h, 82008h
		dd 8082000h, 8082008h, 0C2000h,	0C2008h, 80C2000h, 80C2008h
		dd 80080000h, 80080008h, 88080000h, 88080008h, 800C0000h
		dd 800C0008h, 880C0000h, 880C0008h, 80082000h, 80082008h
		dd 88082000h, 88082008h, 800C2000h, 800C2008h, 880C2000h
		dd 880C2008h
dword_1003AC18	dd 0			; DATA XREF: sub_1000AEB0+179r
		dd 400000h, 8000h, 408000h, 40000000h, 40400000h, 40008000h
		dd 40408000h, 20h, 400020h, 8020h, 408020h, 40000020h
		dd 40400020h, 40008020h, 40408020h, 1000h, 401000h, 9000h
		dd 409000h, 40001000h, 40401000h, 40009000h, 40409000h
		dd 1020h, 401020h, 9020h, 409020h, 40001020h, 40401020h
		dd 40009020h, 40409020h, 100000h, 500000h, 108000h, 508000h
		dd 40100000h, 40500000h, 40108000h, 40508000h, 100020h
		dd 500020h, 108020h, 508020h, 40100020h, 40500020h, 40108020h
		dd 40508020h, 101000h, 501000h,	109000h, 509000h, 40101000h
		dd 40501000h, 40109000h, 40509000h, 101020h, 501020h, 109020h
		dd 509020h, 40101020h, 40501020h, 40109020h, 40509020h
dword_1003AD18	dd 0			; DATA XREF: sub_1000AEB0+1B0r
		dd 40h,	4000000h, 4000040h, 800h, 840h,	4000800h, 4000840h
		dd 800000h, 800040h, 4800000h, 4800040h, 800800h, 800840h
		dd 4800800h, 4800840h, 10000000h, 10000040h, 14000000h
		dd 14000040h, 10000800h, 10000840h, 14000800h, 14000840h
		dd 10800000h, 10800040h, 14800000h, 14800040h, 10800800h
		dd 10800840h, 14800800h, 14800840h, 80h, 0C0h, 4000080h
		dd 40000C0h, 880h, 8C0h, 4000880h, 40008C0h, 800080h, 8000C0h
		dd 4800080h, 48000C0h, 800880h,	8008C0h, 4800880h, 48008C0h
		dd 10000080h, 100000C0h, 14000080h, 140000C0h, 10000880h
		dd 100008C0h, 14000880h, 140008C0h, 10800080h, 108000C0h
		dd 14800080h, 148000C0h, 10800880h, 108008C0h, 14800880h
		dd 148008C0h
dword_1003AE18	dd 0			; DATA XREF: sub_1000AEB0+18Dr
		dd 10h,	400h, 410h, 4, 14h, 404h, 414h,	4000h, 4010h, 4400h
		dd 4410h, 4004h, 4014h,	4404h, 4414h, 20000000h, 20000010h
		dd 20000400h, 20000410h, 20000004h, 20000014h, 20000404h
		dd 20000414h, 20004000h, 20004010h, 20004400h, 20004410h
		dd 20004004h, 20004014h, 20004404h, 20004414h, 200000h
		dd 200010h, 200400h, 200410h, 200004h, 200014h,	200404h
		dd 200414h, 204000h, 204010h, 204400h, 204410h,	204004h
		dd 204014h, 204404h, 204414h, 20200000h, 20200010h, 20200400h
		dd 20200410h, 20200004h, 20200014h, 20200404h, 20200414h
		dd 20204000h, 20204010h, 20204400h, 20204410h, 20204004h
		dd 20204014h, 20204404h, 20204414h
dword_1003AF18	dd 0			; DATA XREF: sub_1000C3A0+1Dr
dword_1003AF1C	dd 0			; DATA XREF: sub_1000C3A0+22r
dword_1003AF20	dd 0			; DATA XREF: sub_1000C3A0+28r
		dd 2 dup(0)
		dd 1
dword_1003AF30	dd 250D9C8Eh, 0F9042275h, 8B1079C5h, 14377923h,	0BC72C9Fh
					; DATA XREF: sub_1000C5B0+59o
					; sub_1000C5B0+97o
		dd 0EFEEF839h, 59970C95h, 41850AFCh, 676D9D76h,	12194E00h
		dd 0EA531602h, 0D6D773F2h, 0AEC87E7Fh, 7D99099Ch, 7F489EBBh
		dd 0B34696BBh, 0C8F87503h, 973F4569h, 0E1482E5Eh, 4C97585Dh
dword_1003AF80	dd 578CE116h, 7EF1D821h, 0B16A05Ah, 0B425A67Eh,	54DB1924h
					; DATA XREF: sub_1000C5B0+F0o
		dd 661335FAh, 1B2AAABBh, 4A2E3322h, 529D0714h, 486173FCh
		dd 0FC22C1ACh, 0A4ACFCA4h, 275BDADBh, 0B3C433h
dword_1003AFB8	dd 300A0BC6h, 0E2F40767h, 6F51A724h, 5D3E855Fh,	3BB89767h
					; DATA XREF: sub_1000C5B0+17Ao
					; sub_1000C5B0+2D8o
		dd 0B17A9C30h, 0C91BC652h, 7962A846h
dword_1003AFD8	dd 98288286h, 1401CBE7h, 1D4B87AEh, 41C71B99h, 6633FF33h
					; DATA XREF: sub_1000C5B0+16Bo
		dd 0C6549540h, 2A404D67h, 65EBF91Fh
dword_1003AFF8	dd 17C60C02h, 0C4BA4986h, 535717Bh, 0C24ADBF0h,	0A4C1382Ch
					; DATA XREF: sub_1000C5B0+1C2o
		dd 4A46E542h, 47BEF07Dh, 0C60EB888h, 131D2B25h,	9687A6EFh
		dd 805B7DA3h, 617638C2h, 0F5D80C7h, 857605h
dword_1003B030	dd 8C4140C4h, 23702FBFh, 307BF288h, 0F31ECAC3h,	5D8153EFh
					; DATA XREF: sub_1000C5B0+23Co
		dd 0F14CED30h, 0EEA589FFh, 0FC0F892h, 0B6DF5388h, 0D3AAF076h
		dd 37641D2Eh, 24AE83Eh,	0E57F0AFFh, 6D2BE9h
byte_1003B068	db 0			; DATA XREF: sub_1000D500+14r
					; sub_1000D600+38r ...
		db 80h,	40h, 0C0h
		dd 0E060A020h, 0D0509010h, 0F070B030h, 0C8488808h, 0E868A828h
		dd 0D8589818h, 0F878B838h, 0C4448404h, 0E464A424h, 0D4549414h
		dd 0F474B434h, 0CC4C8C0Ch, 0EC6CAC2Ch, 0DC5C9C1Ch, 0FC7CBC3Ch
		dd 0C2428202h, 0E262A222h, 0D2529212h, 0F272B232h, 0CA4A8A0Ah
		dd 0EA6AAA2Ah, 0DA5A9A1Ah, 0FA7ABA3Ah, 0C6468606h, 0E666A626h
		dd 0D6569616h, 0F676B636h, 0CE4E8E0Eh, 0EE6EAE2Eh, 0DE5E9E1Eh
		dd 0FE7EBE3Eh, 0C1418101h, 0E161A121h, 0D1519111h, 0F171B131h
		dd 0C9498909h, 0E969A929h, 0D9599919h, 0F979B939h, 0C5458505h
		dd 0E565A525h, 0D5559515h, 0F575B535h, 0CD4D8D0Dh, 0ED6DAD2Dh
		dd 0DD5D9D1Dh, 0FD7DBD3Dh, 0C3438303h, 0E363A323h, 0D3539313h
		dd 0F373B333h, 0CB4B8B0Bh, 0EB6BAB2Bh, 0DB5B9B1Bh, 0FB7BBB3Bh
		dd 0C7478707h, 0E767A727h, 0D7579717h, 0F777B737h, 0CF4F8F0Fh
		dd 0EF6FAF2Fh, 0DF5F9F1Fh, 0FF7FBF3Fh
dword_1003B168	dd 80h,	7, 2, 1, 2 dup(0) ; DATA XREF: sub_1000DD80+CFo
byte_1003B180	db 52h			; DATA XREF: sub_1000EF30+144r
					; sub_1000EF30+15Br ...
		db 9, 6Ah, 0D5h
		dd 38A53630h, 9EA340BFh, 0FBD7F381h, 8239E37Ch,	87FF2F9Bh
		dd 44438E34h, 0CBE9DEC4h, 32947B54h, 3D23C2A6h,	0B954CEEh
		dd 4EC3FA42h, 66A12E08h, 0B224D928h, 49A25B76h,	25D18B6Dh
		dd 64F6F872h, 16986886h, 0CC5CA4D4h, 92B6655Dh,	5048706Ch
		dd 0DAB9EDFDh, 5746155Eh, 849D8DA7h, 0ABD890h, 0AD3BC8Ch
		dd 558E4F7h, 645B3B8h, 8F1E2CD0h, 20F3FCAh, 3BDAFC1h, 6B8A1301h
		dd 4111913Ah, 0EADC674Fh, 0CECFF297h, 73E6B4F0h, 2274AC96h
		dd 8535ADE7h, 0E837F9E2h, 6EDF751Ch, 711AF147h,	89C5291Dh
		dd 0E62B76Fh, 1BBE18AAh, 4B3E56FCh, 2079D2C6h, 0FEC0DB9Ah
		dd 0F45ACD78h, 33A8DD1Fh, 31C70788h, 591012B1h,	5FEC8027h
		dd 0A97F5160h, 0D4AB519h, 9F7AE52Dh, 0EF9CC993h, 4D3BE0A0h
		dd 0B0F52AAEh, 3CBBEBC8h, 61995383h, 7E042B17h,	26D677BAh
		dd 631469E1h, 7D0C2155h
dword_1003B280	dd 0A56363C6h		; DATA XREF: sub_1000EC80+7Cr
					; sub_1000EC80+B4r ...
		dd 847C7CF8h, 997777EEh, 8D7B7BF6h, 0DF2F2FFh, 0BD6B6BD6h
		dd 0B16F6FDEh, 54C5C591h, 50303060h, 3010102h, 0A96767CEh
		dd 7D2B2B56h, 19FEFEE7h, 62D7D7B5h, 0E6ABAB4Dh,	9A7676ECh
		dd 45CACA8Fh, 9D82821Fh, 40C9C989h, 877D7DFAh, 15FAFAEFh
		dd 0EB5959B2h, 0C947478Eh, 0BF0F0FBh, 0ECADAD41h, 67D4D4B3h
		dd 0FDA2A25Fh, 0EAAFAF45h, 0BF9C9C23h, 0F7A4A453h, 967272E4h
		dd 5BC0C09Bh, 0C2B7B775h, 1CFDFDE1h, 0AE93933Dh, 6A26264Ch
		dd 5A36366Ch, 413F3F7Eh, 2F7F7F5h, 4FCCCC83h, 5C343468h
		dd 0F4A5A551h, 34E5E5D1h, 8F1F1F9h, 937171E2h, 73D8D8ABh
		dd 53313162h, 3F15152Ah, 0C040408h, 52C7C795h, 65232346h
		dd 5EC3C39Dh, 28181830h, 0A1969637h, 0F05050Ah,	0B59A9A2Fh
		dd 907070Eh, 36121224h,	9B80801Bh, 3DE2E2DFh, 26EBEBCDh
		dd 6927274Eh, 0CDB2B27Fh, 9F7575EAh, 1B090912h,	9E83831Dh
		dd 742C2C58h, 2E1A1A34h, 2D1B1B36h, 0B26E6EDCh,	0EE5A5AB4h
		dd 0FBA0A05Bh, 0F65252A4h, 4D3B3B76h, 61D6D6B7h, 0CEB3B37Dh
		dd 7B292952h, 3EE3E3DDh, 712F2F5Eh, 97848413h, 0F55353A6h
		dd 68D1D1B9h, 0
		dd 2CEDEDC1h, 60202040h, 1FFCFCE3h, 0C8B1B179h,	0ED5B5BB6h
		dd 0BE6A6AD4h, 46CBCB8Dh, 0D9BEBE67h, 4B393972h, 0DE4A4A94h
		dd 0D44C4C98h, 0E85858B0h, 4ACFCF85h, 6BD0D0BBh, 2AEFEFC5h
		dd 0E5AAAA4Fh, 16FBFBEDh, 0C5434386h, 0D74D4D9Ah, 55333366h
		dd 94858511h, 0CF45458Ah, 10F9F9E9h, 6020204h, 817F7FFEh
		dd 0F05050A0h, 443C3C78h, 0BA9F9F25h, 0E3A8A84Bh, 0F35151A2h
		dd 0FEA3A35Dh, 0C0404080h, 8A8F8F05h, 0AD92923Fh, 0BC9D9D21h
		dd 48383870h, 4F5F5F1h,	0DFBCBC63h, 0C1B6B677h,	75DADAAFh
		dd 63212142h, 30101020h, 1AFFFFE5h, 0EF3F3FDh, 6DD2D2BFh
		dd 4CCDCD81h, 140C0C18h, 35131326h, 2FECECC3h, 0E15F5FBEh
		dd 0A2979735h, 0CC444488h, 3917172Eh, 57C4C493h, 0F2A7A755h
		dd 827E7EFCh, 473D3D7Ah, 0AC6464C8h, 0E75D5DBAh, 2B191932h
		dd 957373E6h, 0A06060C0h, 98818119h, 0D14F4F9Eh, 7FDCDCA3h
		dd 66222244h, 7E2A2A54h, 0AB90903Bh, 8388880Bh,	0CA46468Ch
		dd 29EEEEC7h, 0D3B8B86Bh, 3C141428h, 79DEDEA7h,	0E25E5EBCh
		dd 1D0B0B16h, 76DBDBADh, 3BE0E0DBh, 56323264h, 4E3A3A74h
		dd 1E0A0A14h, 0DB494992h, 0A06060Ch, 6C242448h,	0E45C5CB8h
		dd 5DC2C29Fh, 6ED3D3BDh, 0EFACAC43h, 0A66262C4h, 0A8919139h
		dd 0A4959531h, 37E4E4D3h, 8B7979F2h, 32E7E7D5h,	43C8C88Bh
		dd 5937376Eh, 0B76D6DDAh, 8C8D8D01h, 64D5D5B1h,	0D24E4E9Ch
		dd 0E0A9A949h, 0B46C6CD8h, 0FA5656ACh, 7F4F4F3h, 25EAEACFh
		dd 0AF6565CAh, 8E7A7AF4h, 0E9AEAE47h, 18080810h, 0D5BABA6Fh
		dd 887878F0h, 6F25254Ah, 722E2E5Ch, 241C1C38h, 0F1A6A657h
		dd 0C7B4B473h, 51C6C697h, 23E8E8CBh, 7CDDDDA1h,	9C7474E8h
		dd 211F1F3Eh, 0DD4B4B96h, 0DCBDBD61h, 868B8B0Dh, 858A8A0Fh
		dd 907070E0h, 423E3E7Ch, 0C4B5B571h, 0AA6666CCh, 0D8484890h
		dd 5030306h, 1F6F6F7h, 120E0E1Ch, 0A36161C2h, 5F35356Ah
		dd 0F95757AEh, 0D0B9B969h, 91868617h, 58C1C199h, 271D1D3Ah
		dd 0B99E9E27h, 38E1E1D9h, 13F8F8EBh, 0B398982Bh, 33111122h
		dd 0BB6969D2h, 70D9D9A9h, 898E8E07h, 0A7949433h, 0B69B9B2Dh
		dd 221E1E3Ch, 92878715h, 20E9E9C9h, 49CECE87h, 0FF5555AAh
		dd 78282850h, 7ADFDFA5h, 8F8C8C03h, 0F8A1A159h,	80898909h
		dd 170D0D1Ah, 0DABFBF65h, 31E6E6D7h, 0C6424284h, 0B86868D0h
		dd 0C3414182h, 0B0999929h, 772D2D5Ah, 110F0F1Eh, 0CBB0B07Bh
		dd 0FC5454A8h, 0D6BBBB6Dh, 3A16162Ch
dword_1003B680	dd 6363C6A5h		; DATA XREF: sub_1000EC80+70r
					; sub_1000EC80+95r ...
		dd 7C7CF884h, 7777EE99h, 7B7BF68Dh, 0F2F2FF0Dh,	6B6BD6BDh
		dd 6F6FDEB1h, 0C5C59154h, 30306050h, 1010203h, 6767CEA9h
		dd 2B2B567Dh, 0FEFEE719h, 0D7D7B562h, 0ABAB4DE6h, 7676EC9Ah
		dd 0CACA8F45h, 82821F9Dh, 0C9C98940h, 7D7DFA87h, 0FAFAEF15h
		dd 5959B2EBh, 47478EC9h, 0F0F0FB0Bh, 0ADAD41ECh, 0D4D4B367h
		dd 0A2A25FFDh, 0AFAF45EAh, 9C9C23BFh, 0A4A453F7h, 7272E496h
		dd 0C0C09B5Bh, 0B7B775C2h, 0FDFDE11Ch, 93933DAEh, 26264C6Ah
		dd 36366C5Ah, 3F3F7E41h, 0F7F7F502h, 0CCCC834Fh, 3434685Ch
		dd 0A5A551F4h, 0E5E5D134h, 0F1F1F908h, 7171E293h, 0D8D8AB73h
		dd 31316253h, 15152A3Fh, 404080Ch, 0C7C79552h, 23234665h
		dd 0C3C39D5Eh, 18183028h, 969637A1h, 5050A0Fh, 9A9A2FB5h
		dd 7070E09h, 12122436h,	80801B9Bh, 0E2E2DF3Dh, 0EBEBCD26h
		dd 27274E69h, 0B2B27FCDh, 7575EA9Fh, 909121Bh, 83831D9Eh
		dd 2C2C5874h, 1A1A342Eh, 1B1B362Dh, 6E6EDCB2h, 5A5AB4EEh
		dd 0A0A05BFBh, 5252A4F6h, 3B3B764Dh, 0D6D6B761h, 0B3B37DCEh
		dd 2929527Bh, 0E3E3DD3Eh, 2F2F5E71h, 84841397h,	5353A6F5h
		dd 0D1D1B968h, 0
		dd 0EDEDC12Ch, 20204060h, 0FCFCE31Fh, 0B1B179C8h, 5B5BB6EDh
		dd 6A6AD4BEh, 0CBCB8D46h, 0BEBE67D9h, 3939724Bh, 4A4A94DEh
		dd 4C4C98D4h, 5858B0E8h, 0CFCF854Ah, 0D0D0BB6Bh, 0EFEFC52Ah
		dd 0AAAA4FE5h, 0FBFBED16h, 434386C5h, 4D4D9AD7h, 33336655h
		dd 85851194h, 45458ACFh, 0F9F9E910h, 2020406h, 7F7FFE81h
		dd 5050A0F0h, 3C3C7844h, 9F9F25BAh, 0A8A84BE3h,	5151A2F3h
		dd 0A3A35DFEh, 404080C0h, 8F8F058Ah, 92923FADh,	9D9D21BCh
		dd 38387048h, 0F5F5F104h, 0BCBC63DFh, 0B6B677C1h, 0DADAAF75h
		dd 21214263h, 10102030h, 0FFFFE51Ah, 0F3F3FD0Eh, 0D2D2BF6Dh
		dd 0CDCD814Ch, 0C0C1814h, 13132635h, 0ECECC32Fh, 5F5FBEE1h
		dd 979735A2h, 444488CCh, 17172E39h, 0C4C49357h,	0A7A755F2h
		dd 7E7EFC82h, 3D3D7A47h, 6464C8ACh, 5D5DBAE7h, 1919322Bh
		dd 7373E695h, 6060C0A0h, 81811998h, 4F4F9ED1h, 0DCDCA37Fh
		dd 22224466h, 2A2A547Eh, 90903BABh, 88880B83h, 46468CCAh
		dd 0EEEEC729h, 0B8B86BD3h, 1414283Ch, 0DEDEA779h, 5E5EBCE2h
		dd 0B0B161Dh, 0DBDBAD76h, 0E0E0DB3Bh, 32326456h, 3A3A744Eh
		dd 0A0A141Eh, 494992DBh, 6060C0Ah, 2424486Ch, 5C5CB8E4h
		dd 0C2C29F5Dh, 0D3D3BD6Eh, 0ACAC43EFh, 6262C4A6h, 919139A8h
		dd 959531A4h, 0E4E4D337h, 7979F28Bh, 0E7E7D532h, 0C8C88B43h
		dd 37376E59h, 6D6DDAB7h, 8D8D018Ch, 0D5D5B164h,	4E4E9CD2h
		dd 0A9A949E0h, 6C6CD8B4h, 5656ACFAh, 0F4F4F307h, 0EAEACF25h
		dd 6565CAAFh, 7A7AF48Eh, 0AEAE47E9h, 8081018h, 0BABA6FD5h
		dd 7878F088h, 25254A6Fh, 2E2E5C72h, 1C1C3824h, 0A6A657F1h
		dd 0B4B473C7h, 0C6C69751h, 0E8E8CB23h, 0DDDDA17Ch, 7474E89Ch
		dd 1F1F3E21h, 4B4B96DDh, 0BDBD61DCh, 8B8B0D86h,	8A8A0F85h
		dd 7070E090h, 3E3E7C42h, 0B5B571C4h, 6666CCAAh,	484890D8h
		dd 3030605h, 0F6F6F701h, 0E0E1C12h, 6161C2A3h, 35356A5Fh
		dd 5757AEF9h, 0B9B969D0h, 86861791h, 0C1C19958h, 1D1D3A27h
		dd 9E9E27B9h, 0E1E1D938h, 0F8F8EB13h, 98982BB3h, 11112233h
		dd 6969D2BBh, 0D9D9A970h, 8E8E0789h, 949433A7h,	9B9B2DB6h
		dd 1E1E3C22h, 87871592h, 0E9E9C920h, 0CECE8749h, 5555AAFFh
		dd 28285078h, 0DFDFA57Ah, 8C8C038Fh, 0A1A159F8h, 89890980h
		dd 0D0D1A17h, 0BFBF65DAh, 0E6E6D731h, 424284C6h, 6868D0B8h
		dd 414182C3h, 999929B0h, 2D2D5A77h, 0F0F1E11h, 0B0B07BCBh
		dd 5454A8FCh, 0BBBB6DD6h, 16162C3Ah
dword_1003BA80	dd 63C6A563h		; DATA XREF: sub_1000EC80+5Dr
					; sub_1000EC80+A8r ...
		dd 7CF8847Ch, 77EE9977h, 7BF68D7Bh, 0F2FF0DF2h,	6BD6BD6Bh
		dd 6FDEB16Fh, 0C59154C5h, 30605030h, 1020301h, 67CEA967h
		dd 2B567D2Bh, 0FEE719FEh, 0D7B562D7h, 0AB4DE6ABh, 76EC9A76h
		dd 0CA8F45CAh, 821F9D82h, 0C98940C9h, 7DFA877Dh, 0FAEF15FAh
		dd 59B2EB59h, 478EC947h, 0F0FB0BF0h, 0AD41ECADh, 0D4B367D4h
		dd 0A25FFDA2h, 0AF45EAAFh, 9C23BF9Ch, 0A453F7A4h, 72E49672h
		dd 0C09B5BC0h, 0B775C2B7h, 0FDE11CFDh, 933DAE93h, 264C6A26h
		dd 366C5A36h, 3F7E413Fh, 0F7F502F7h, 0CC834FCCh, 34685C34h
		dd 0A551F4A5h, 0E5D134E5h, 0F1F908F1h, 71E29371h, 0D8AB73D8h
		dd 31625331h, 152A3F15h, 4080C04h, 0C79552C7h, 23466523h
		dd 0C39D5EC3h, 18302818h, 9637A196h, 50A0F05h, 9A2FB59Ah
		dd 70E0907h, 12243612h,	801B9B80h, 0E2DF3DE2h, 0EBCD26EBh
		dd 274E6927h, 0B27FCDB2h, 75EA9F75h, 9121B09h, 831D9E83h
		dd 2C58742Ch, 1A342E1Ah, 1B362D1Bh, 6EDCB26Eh, 5AB4EE5Ah
		dd 0A05BFBA0h, 52A4F652h, 3B764D3Bh, 0D6B761D6h, 0B37DCEB3h
		dd 29527B29h, 0E3DD3EE3h, 2F5E712Fh, 84139784h,	53A6F553h
		dd 0D1B968D1h, 0
		dd 0EDC12CEDh, 20406020h, 0FCE31FFCh, 0B179C8B1h, 5BB6ED5Bh
		dd 6AD4BE6Ah, 0CB8D46CBh, 0BE67D9BEh, 39724B39h, 4A94DE4Ah
		dd 4C98D44Ch, 58B0E858h, 0CF854ACFh, 0D0BB6BD0h, 0EFC52AEFh
		dd 0AA4FE5AAh, 0FBED16FBh, 4386C543h, 4D9AD74Dh, 33665533h
		dd 85119485h, 458ACF45h, 0F9E910F9h, 2040602h, 7FFE817Fh
		dd 50A0F050h, 3C78443Ch, 9F25BA9Fh, 0A84BE3A8h,	51A2F351h
		dd 0A35DFEA3h, 4080C040h, 8F058A8Fh, 923FAD92h,	9D21BC9Dh
		dd 38704838h, 0F5F104F5h, 0BC63DFBCh, 0B677C1B6h, 0DAAF75DAh
		dd 21426321h, 10203010h, 0FFE51AFFh, 0F3FD0EF3h, 0D2BF6DD2h
		dd 0CD814CCDh, 0C18140Ch, 13263513h, 0ECC32FECh, 5FBEE15Fh
		dd 9735A297h, 4488CC44h, 172E3917h, 0C49357C4h,	0A755F2A7h
		dd 7EFC827Eh, 3D7A473Dh, 64C8AC64h, 5DBAE75Dh, 19322B19h
		dd 73E69573h, 60C0A060h, 81199881h, 4F9ED14Fh, 0DCA37FDCh
		dd 22446622h, 2A547E2Ah, 903BAB90h, 880B8388h, 468CCA46h
		dd 0EEC729EEh, 0B86BD3B8h, 14283C14h, 0DEA779DEh, 5EBCE25Eh
		dd 0B161D0Bh, 0DBAD76DBh, 0E0DB3BE0h, 32645632h, 3A744E3Ah
		dd 0A141E0Ah, 4992DB49h, 60C0A06h, 24486C24h, 5CB8E45Ch
		dd 0C29F5DC2h, 0D3BD6ED3h, 0AC43EFACh, 62C4A662h, 9139A891h
		dd 9531A495h, 0E4D337E4h, 79F28B79h, 0E7D532E7h, 0C88B43C8h
		dd 376E5937h, 6DDAB76Dh, 8D018C8Dh, 0D5B164D5h,	4E9CD24Eh
		dd 0A949E0A9h, 6CD8B46Ch, 56ACFA56h, 0F4F307F4h, 0EACF25EAh
		dd 65CAAF65h, 7AF48E7Ah, 0AE47E9AEh, 8101808h, 0BA6FD5BAh
		dd 78F08878h, 254A6F25h, 2E5C722Eh, 1C38241Ch, 0A657F1A6h
		dd 0B473C7B4h, 0C69751C6h, 0E8CB23E8h, 0DDA17CDDh, 74E89C74h
		dd 1F3E211Fh, 4B96DD4Bh, 0BD61DCBDh, 8B0D868Bh,	8A0F858Ah
		dd 70E09070h, 3E7C423Eh, 0B571C4B5h, 66CCAA66h,	4890D848h
		dd 3060503h, 0F6F701F6h, 0E1C120Eh, 61C2A361h, 356A5F35h
		dd 57AEF957h, 0B969D0B9h, 86179186h, 0C19958C1h, 1D3A271Dh
		dd 9E27B99Eh, 0E1D938E1h, 0F8EB13F8h, 982BB398h, 11223311h
		dd 69D2BB69h, 0D9A970D9h, 8E07898Eh, 9433A794h,	9B2DB69Bh
		dd 1E3C221Eh, 87159287h, 0E9C920E9h, 0CE8749CEh, 55AAFF55h
		dd 28507828h, 0DFA57ADFh, 8C038F8Ch, 0A159F8A1h, 89098089h
		dd 0D1A170Dh, 0BF65DABFh, 0E6D731E6h, 4284C642h, 68D0B868h
		dd 4182C341h, 9929B099h, 2D5A772Dh, 0F1E110Fh, 0B07BCBB0h
		dd 54A8FC54h, 0BB6DD6BBh, 162C3A16h
dword_1003BE80	dd 0C6A56363h		; DATA XREF: sub_1000E690+52r
					; sub_1000E690+60r ...
		dd 0F8847C7Ch, 0EE997777h, 0F68D7B7Bh, 0FF0DF2F2h, 0D6BD6B6Bh
		dd 0DEB16F6Fh, 9154C5C5h, 60503030h, 2030101h, 0CEA96767h
		dd 567D2B2Bh, 0E719FEFEh, 0B562D7D7h, 4DE6ABABh, 0EC9A7676h
		dd 8F45CACAh, 1F9D8282h, 8940C9C9h, 0FA877D7Dh,	0EF15FAFAh
		dd 0B2EB5959h, 8EC94747h, 0FB0BF0F0h, 41ECADADh, 0B367D4D4h
		dd 5FFDA2A2h, 45EAAFAFh, 23BF9C9Ch, 53F7A4A4h, 0E4967272h
		dd 9B5BC0C0h, 75C2B7B7h, 0E11CFDFDh, 3DAE9393h,	4C6A2626h
		dd 6C5A3636h, 7E413F3Fh, 0F502F7F7h, 834FCCCCh,	685C3434h
		dd 51F4A5A5h, 0D134E5E5h, 0F908F1F1h, 0E2937171h, 0AB73D8D8h
		dd 62533131h, 2A3F1515h, 80C0404h, 9552C7C7h, 46652323h
		dd 9D5EC3C3h, 30281818h, 37A19696h, 0A0F0505h, 2FB59A9Ah
		dd 0E090707h, 24361212h, 1B9B8080h, 0DF3DE2E2h,	0CD26EBEBh
		dd 4E692727h, 7FCDB2B2h, 0EA9F7575h, 121B0909h,	1D9E8383h
		dd 58742C2Ch, 342E1A1Ah, 362D1B1Bh, 0DCB26E6Eh,	0B4EE5A5Ah
		dd 5BFBA0A0h, 0A4F65252h, 764D3B3Bh, 0B761D6D6h, 7DCEB3B3h
		dd 527B2929h, 0DD3EE3E3h, 5E712F2Fh, 13978484h,	0A6F55353h
		dd 0B968D1D1h, 0
		dd 0C12CEDEDh, 40602020h, 0E31FFCFCh, 79C8B1B1h, 0B6ED5B5Bh
		dd 0D4BE6A6Ah, 8D46CBCBh, 67D9BEBEh, 724B3939h,	94DE4A4Ah
		dd 98D44C4Ch, 0B0E85858h, 854ACFCFh, 0BB6BD0D0h, 0C52AEFEFh
		dd 4FE5AAAAh, 0ED16FBFBh, 86C54343h, 9AD74D4Dh,	66553333h
		dd 11948585h, 8ACF4545h, 0E910F9F9h, 4060202h, 0FE817F7Fh
		dd 0A0F05050h, 78443C3Ch, 25BA9F9Fh, 4BE3A8A8h,	0A2F35151h
		dd 5DFEA3A3h, 80C04040h, 58A8F8Fh, 3FAD9292h, 21BC9D9Dh
		dd 70483838h, 0F104F5F5h, 63DFBCBCh, 77C1B6B6h,	0AF75DADAh
		dd 42632121h, 20301010h, 0E51AFFFFh, 0FD0EF3F3h, 0BF6DD2D2h
		dd 814CCDCDh, 18140C0Ch, 26351313h, 0C32FECECh,	0BEE15F5Fh
		dd 35A29797h, 88CC4444h, 2E391717h, 9357C4C4h, 55F2A7A7h
		dd 0FC827E7Eh, 7A473D3Dh, 0C8AC6464h, 0BAE75D5Dh, 322B1919h
		dd 0E6957373h, 0C0A06060h, 19988181h, 9ED14F4Fh, 0A37FDCDCh
		dd 44662222h, 547E2A2Ah, 3BAB9090h, 0B838888h, 8CCA4646h
		dd 0C729EEEEh, 6BD3B8B8h, 283C1414h, 0A779DEDEh, 0BCE25E5Eh
		dd 161D0B0Bh, 0AD76DBDBh, 0DB3BE0E0h, 64563232h, 744E3A3Ah
		dd 141E0A0Ah, 92DB4949h, 0C0A0606h, 486C2424h, 0B8E45C5Ch
		dd 9F5DC2C2h, 0BD6ED3D3h, 43EFACACh, 0C4A66262h, 39A89191h
		dd 31A49595h, 0D337E4E4h, 0F28B7979h, 0D532E7E7h, 8B43C8C8h
		dd 6E593737h, 0DAB76D6Dh, 18C8D8Dh, 0B164D5D5h,	9CD24E4Eh
		dd 49E0A9A9h, 0D8B46C6Ch, 0ACFA5656h, 0F307F4F4h, 0CF25EAEAh
		dd 0CAAF6565h, 0F48E7A7Ah, 47E9AEAEh, 10180808h, 6FD5BABAh
		dd 0F0887878h, 4A6F2525h, 5C722E2Eh, 38241C1Ch,	57F1A6A6h
		dd 73C7B4B4h, 9751C6C6h, 0CB23E8E8h, 0A17CDDDDh, 0E89C7474h
		dd 3E211F1Fh, 96DD4B4Bh, 61DCBDBDh, 0D868B8Bh, 0F858A8Ah
		dd 0E0907070h, 7C423E3Eh, 71C4B5B5h, 0CCAA6666h, 90D84848h
		dd 6050303h, 0F701F6F6h, 1C120E0Eh, 0C2A36161h,	6A5F3535h
		dd 0AEF95757h, 69D0B9B9h, 17918686h, 9958C1C1h,	3A271D1Dh
		dd 27B99E9Eh, 0D938E1E1h, 0EB13F8F8h, 2BB39898h, 22331111h
		dd 0D2BB6969h, 0A970D9D9h, 7898E8Eh, 33A79494h,	2DB69B9Bh
		dd 3C221E1Eh, 15928787h, 0C920E9E9h, 8749CECEh,	0AAFF5555h
		dd 50782828h, 0A57ADFDFh, 38F8C8Ch, 59F8A1A1h, 9808989h
		dd 1A170D0Dh, 65DABFBFh, 0D731E6E6h, 84C64242h,	0D0B86868h
		dd 82C34141h, 29B09999h, 5A772D2Dh, 1E110F0Fh, 7BCBB0B0h
		dd 0A8FC5454h, 6DD6BBBBh, 2C3A1616h
dword_1003C280	dd 50A7F451h		; DATA XREF: sub_1000EF30+75r
					; sub_1000EF30+A6r ...
		dd 5365417Eh, 0C3A4171Ah, 965E273Ah, 0CB6BAB3Bh, 0F1459D1Fh
		dd 0AB58FAACh, 9303E34Bh, 55FA3020h, 0F66D76ADh, 9176CC88h
		dd 254C02F5h, 0FCD7E54Fh, 0D7CB2AC5h, 80443526h, 8FA362B5h
		dd 495AB1DEh, 671BBA25h, 980EEA45h, 0E1C0FE5Dh,	2752FC3h
		dd 12F04C81h, 0A397468Dh, 0C6F9D36Bh, 0E75F8F03h, 959C9215h
		dd 0EB7A6DBFh, 0DA595295h, 2D83BED4h, 0D3217458h, 2969E049h
		dd 44C8C98Eh, 6A89C275h, 78798EF4h, 6B3E5899h, 0DD71B927h
		dd 0B64FE1BEh, 17AD88F0h, 66AC20C9h, 0B43ACE7Dh, 184ADF63h
		dd 82311AE5h, 60335197h, 457F5362h, 0E07764B1h,	84AE6BBBh
		dd 1CA081FEh, 942B08F9h, 58684870h, 19FD458Fh, 876CDE94h
		dd 0B7F87B52h, 23D373ABh, 0E2024B72h, 578F1FE3h, 2AAB5566h
		dd 728EBB2h, 3C2B52Fh, 9A7BC586h, 0A50837D3h, 0F2872830h
		dd 0B2A5BF23h, 0BA6A0302h, 5C8216EDh, 2B1CCF8Ah, 92B479A7h
		dd 0F0F207F3h, 0A1E2694Eh, 0CDF4DA65h, 0D5BE0506h, 1F6234D1h
		dd 8AFEA6C4h, 9D532E34h, 0A055F3A2h, 32E18A05h,	75EBF6A4h
		dd 39EC830Bh, 0AAEF6040h, 69F715Eh, 51106EBDh, 0F98A213Eh
		dd 3D06DD96h, 0AE053EDDh, 46BDE64Dh, 0B58D5491h, 55DC471h
		dd 6FD40604h, 0FF155060h, 24FB9819h, 97E9BDD6h,	0CC434089h
		dd 779ED967h, 0BD42E8B0h, 888B8907h, 385B19E7h,	0DBEEC879h
		dd 470A7CA1h, 0E90F427Ch, 0C91E84F8h, 0
		dd 83868009h, 48ED2B32h, 0AC70111Eh, 4E725A6Ch,	0FBFF0EFDh
		dd 5638850Fh, 1ED5AE3Dh, 27392D36h, 64D90F0Ah, 21A65C68h
		dd 0D1545B9Bh, 3A2E3624h, 0B1670A0Ch, 0FE75793h, 0D296EEB4h
		dd 9E919B1Bh, 4FC5C080h, 0A220DC61h, 694B775Ah,	161A121Ch
		dd 0ABA93E2h, 0E52AA0C0h, 43E0223Ch, 1D171B12h,	0B0D090Eh
		dd 0ADC78BF2h, 0B9A8B62Dh, 0C8A91E14h, 8519F157h, 4C0775AFh
		dd 0BBDD99EEh, 0FD607FA3h, 9F2601F7h, 0BCF5725Ch, 0C53B6644h
		dd 347EFB5Bh, 7629438Bh, 0DCC623CBh, 68FCEDB6h,	63F1E4B8h
		dd 0CADC31D7h, 10856342h, 40229713h, 2011C684h,	7D244A85h
		dd 0F83DBBD2h, 1132F9AEh, 6DA129C7h, 4B2F9E1Dh,	0F330B2DCh
		dd 0EC52860Dh, 0D0E3C177h, 6C16B32Bh, 99B970A9h, 0FA489411h
		dd 2264E947h, 0C48CFCA8h, 1A3FF0A0h, 0D82C7D56h, 0EF903322h
		dd 0C74E4987h, 0C1D138D9h, 0FEA2CA8Ch, 360BD498h, 0CF81F5A6h
		dd 28DE7AA5h, 268EB7DAh, 0A4BFAD3Fh, 0E49D3A2Ch, 0D927850h
		dd 9BCC5F6Ah, 62467E54h, 0C2138DF6h, 0E8B8D890h, 5EF7392Eh
		dd 0F5AFC382h, 0BE805D9Fh, 7C93D069h, 0A92DD56Fh, 0B31225CFh
		dd 3B99ACC8h, 0A77D1810h, 6E639CE8h, 7BBB3BDBh,	97826CDh
		dd 0F418596Eh, 1B79AECh, 0A89A4F83h, 656E95E6h,	7EE6FFAAh
		dd 8CFBC21h, 0E6E815EFh, 0D99BE7BAh, 0CE366F4Ah, 0D4099FEAh
		dd 0D67CB029h, 0AFB2A431h, 31233F2Ah, 3094A5C6h, 0C066A235h
		dd 37BC4E74h, 0A6CA82FCh, 0B0D090E0h, 15D8A733h, 4A9804F1h
		dd 0F7DAEC41h, 0E50CD7Fh, 2FF69117h, 8DD64D76h,	4DB0EF43h
		dd 544DAACCh, 0DF0496E4h, 0E3B5D19Eh, 1B886A4Ch, 0B81F2CC1h
		dd 7F516546h, 4EA5E9Dh,	5D358C01h, 737487FAh, 2E410BFBh
		dd 5A1D67B3h, 52D2DB92h, 335610E9h, 1347D66Dh, 8C61D79Ah
		dd 7A0CA137h, 8E14F859h, 893C13EBh, 0EE27A9CEh,	35C961B7h
		dd 0EDE51CE1h, 3CB1477Ah, 59DFD29Ch, 3F73F255h,	79CE1418h
		dd 0BF37C773h, 0EACDF753h, 5BAAFD5Fh, 146F3DDFh, 86DB4478h
		dd 81F3AFCAh, 3EC468B9h, 2C342438h, 5F40A3C2h, 72C31D16h
		dd 0C25E2BCh, 8B493C28h, 41950DFFh, 7101A839h, 0DEB30C08h
		dd 9CE4B4D8h, 90C15664h, 6184CB7Bh, 70B632D5h, 745C6C48h
		dd 4257B8D0h
dword_1003C680	dd 0A7F45150h		; DATA XREF: sub_1000EF30+6Br
					; sub_1000EF30+89r ...
		dd 65417E53h, 0A4171AC3h, 5E273A96h, 6BAB3BCBh,	459D1FF1h
		dd 58FAACABh, 3E34B93h,	0FA302055h, 6D76ADF6h, 76CC8891h
		dd 4C02F525h, 0D7E54FFCh, 0CB2AC5D7h, 44352680h, 0A362B58Fh
		dd 5AB1DE49h, 1BBA2567h, 0EEA4598h, 0C0FE5DE1h,	752FC302h
		dd 0F04C8112h, 97468DA3h, 0F9D36BC6h, 5F8F03E7h, 9C921595h
		dd 7A6DBFEBh, 595295DAh, 83BED42Dh, 217458D3h, 69E04929h
		dd 0C8C98E44h, 89C2756Ah, 798EF478h, 3E58996Bh,	71B927DDh
		dd 4FE1BEB6h, 0AD88F017h, 0AC20C966h, 3ACE7DB4h, 4ADF6318h
		dd 311AE582h, 33519760h, 7F536245h, 7764B1E0h, 0AE6BBB84h
		dd 0A081FE1Ch, 2B08F994h, 68487058h, 0FD458F19h, 6CDE9487h
		dd 0F87B52B7h, 0D373AB23h, 24B72E2h, 8F1FE357h,	0AB55662Ah
		dd 28EBB207h, 0C2B52F03h, 7BC5869Ah, 837D3A5h, 872830F2h
		dd 0A5BF23B2h, 6A0302BAh, 8216ED5Ch, 1CCF8A2Bh,	0B479A792h
		dd 0F207F3F0h, 0E2694EA1h, 0F4DA65CDh, 0BE0506D5h, 6234D11Fh
		dd 0FEA6C48Ah, 532E349Dh, 55F3A2A0h, 0E18A0532h, 0EBF6A475h
		dd 0EC830B39h, 0EF6040AAh, 9F715E06h, 106EBD51h, 8A213EF9h
		dd 6DD963Dh, 53EDDAEh, 0BDE64D46h, 8D5491B5h, 5DC47105h
		dd 0D406046Fh, 155060FFh, 0FB981924h, 0E9BDD697h, 434089CCh
		dd 9ED96777h, 42E8B0BDh, 8B890788h, 5B19E738h, 0EEC879DBh
		dd 0A7CA147h, 0F427CE9h, 1E84F8C9h, 0
		dd 86800983h, 0ED2B3248h, 70111EACh, 725A6C4Eh,	0FF0EFDFBh
		dd 38850F56h, 0D5AE3D1Eh, 392D3627h, 0D90F0A64h, 0A65C6821h
		dd 545B9BD1h, 2E36243Ah, 670A0CB1h, 0E757930Fh,	96EEB4D2h
		dd 919B1B9Eh, 0C5C0804Fh, 20DC61A2h, 4B775A69h,	1A121C16h
		dd 0BA93E20Ah, 2AA0C0E5h, 0E0223C43h, 171B121Dh, 0D090E0Bh
		dd 0C78BF2ADh, 0A8B62DB9h, 0A91E14C8h, 19F15785h, 775AF4Ch
		dd 0DD99EEBBh, 607FA3FDh, 2601F79Fh, 0F5725CBCh, 3B6644C5h
		dd 7EFB5B34h, 29438B76h, 0C623CBDCh, 0FCEDB668h, 0F1E4B863h
		dd 0DC31D7CAh, 85634210h, 22971340h, 11C68420h,	244A857Dh
		dd 3DBBD2F8h, 32F9AE11h, 0A129C76Dh, 2F9E1D4Bh,	30B2DCF3h
		dd 52860DECh, 0E3C177D0h, 16B32B6Ch, 0B970A999h, 489411FAh
		dd 64E94722h, 8CFCA8C4h, 3FF0A01Ah, 2C7D56D8h, 903322EFh
		dd 4E4987C7h, 0D138D9C1h, 0A2CA8CFEh, 0BD49836h, 81F5A6CFh
		dd 0DE7AA528h, 8EB7DA26h, 0BFAD3FA4h, 9D3A2CE4h, 9278500Dh
		dd 0CC5F6A9Bh, 467E5462h, 138DF6C2h, 0B8D890E8h, 0F7392E5Eh
		dd 0AFC382F5h, 805D9FBEh, 93D0697Ch, 2DD56FA9h,	1225CFB3h
		dd 99ACC83Bh, 7D1810A7h, 639CE86Eh, 0BB3BDB7Bh,	7826CD09h
		dd 18596EF4h, 0B79AEC01h, 9A4F83A8h, 6E95E665h,	0E6FFAA7Eh
		dd 0CFBC2108h, 0E815EFE6h, 9BE7BAD9h, 366F4ACEh, 99FEAD4h
		dd 7CB029D6h, 0B2A431AFh, 233F2A31h, 94A5C630h,	66A235C0h
		dd 0BC4E7437h, 0CA82FCA6h, 0D090E0B0h, 0D8A73315h, 9804F14Ah
		dd 0DAEC41F7h, 50CD7F0Eh, 0F691172Fh, 0D64D768Dh, 0B0EF434Dh
		dd 4DAACC54h, 496E4DFh,	0B5D19EE3h, 886A4C1Bh, 1F2CC1B8h
		dd 5165467Fh, 0EA5E9D04h, 358C015Dh, 7487FA73h,	410BFB2Eh
		dd 1D67B35Ah, 0D2DB9252h, 5610E933h, 47D66D13h,	61D79A8Ch
		dd 0CA1377Ah, 14F8598Eh, 3C13EB89h, 27A9CEEEh, 0C961B735h
		dd 0E51CE1EDh, 0B1477A3Ch, 0DFD29C59h, 73F2553Fh, 0CE141879h
		dd 37C773BFh, 0CDF753EAh, 0AAFD5F5Bh, 6F3DDF14h, 0DB447886h
		dd 0F3AFCA81h, 0C468B93Eh, 3424382Ch, 40A3C25Fh, 0C31D1672h
		dd 25E2BC0Ch, 493C288Bh, 950DFF41h, 1A83971h, 0B30C08DEh
		dd 0E4B4D89Ch, 0C1566490h, 84CB7B61h, 0B632D570h, 5C6C4874h
		dd 57B8D042h
dword_1003CA80	dd 0F45150A7h		; DATA XREF: sub_1000EF30+61r
					; sub_1000EF30+9Cr ...
		dd 417E5365h, 171AC3A4h, 273A965Eh, 0AB3BCB6Bh,	9D1FF145h
		dd 0FAACAB58h, 0E34B9303h, 302055FAh, 76ADF66Dh, 0CC889176h
		dd 2F5254Ch, 0E54FFCD7h, 2AC5D7CBh, 35268044h, 62B58FA3h
		dd 0B1DE495Ah, 0BA25671Bh, 0EA45980Eh, 0FE5DE1C0h, 2FC30275h
		dd 4C8112F0h, 468DA397h, 0D36BC6F9h, 8F03E75Fh,	9215959Ch
		dd 6DBFEB7Ah, 5295DA59h, 0BED42D83h, 7458D321h,	0E0492969h
		dd 0C98E44C8h, 0C2756A89h, 8EF47879h, 58996B3Eh, 0B927DD71h
		dd 0E1BEB64Fh, 88F017ADh, 20C966ACh, 0CE7DB43Ah, 0DF63184Ah
		dd 1AE58231h, 51976033h, 5362457Fh, 64B1E077h, 6BBB84AEh
		dd 81FE1CA0h, 8F9942Bh,	48705868h, 458F19FDh, 0DE94876Ch
		dd 7B52B7F8h, 73AB23D3h, 4B72E202h, 1FE3578Fh, 55662AABh
		dd 0EBB20728h, 0B52F03C2h, 0C5869A7Bh, 37D3A508h, 2830F287h
		dd 0BF23B2A5h, 302BA6Ah, 16ED5C82h, 0CF8A2B1Ch,	79A792B4h
		dd 7F3F0F2h, 694EA1E2h,	0DA65CDF4h, 506D5BEh, 34D11F62h
		dd 0A6C48AFEh, 2E349D53h, 0F3A2A055h, 8A0532E1h, 0F6A475EBh
		dd 830B39ECh, 6040AAEFh, 715E069Fh, 6EBD5110h, 213EF98Ah
		dd 0DD963D06h, 3EDDAE05h, 0E64D46BDh, 5491B58Dh, 0C471055Dh
		dd 6046FD4h, 5060FF15h,	981924FBh, 0BDD697E9h, 4089CC43h
		dd 0D967779Eh, 0E8B0BD42h, 8907888Bh, 19E7385Bh, 0C879DBEEh
		dd 7CA1470Ah, 427CE90Fh, 84F8C91Eh, 0
		dd 80098386h, 2B3248EDh, 111EAC70h, 5A6C4E72h, 0EFDFBFFh
		dd 850F5638h, 0AE3D1ED5h, 2D362739h, 0F0A64D9h,	5C6821A6h
		dd 5B9BD154h, 36243A2Eh, 0A0CB167h, 57930FE7h, 0EEB4D296h
		dd 9B1B9E91h, 0C0804FC5h, 0DC61A220h, 775A694Bh, 121C161Ah
		dd 93E20ABAh, 0A0C0E52Ah, 223C43E0h, 1B121D17h,	90E0B0Dh
		dd 8BF2ADC7h, 0B62DB9A8h, 1E14C8A9h, 0F1578519h, 75AF4C07h
		dd 99EEBBDDh, 7FA3FD60h, 1F79F26h, 725CBCF5h, 6644C53Bh
		dd 0FB5B347Eh, 438B7629h, 23CBDCC6h, 0EDB668FCh, 0E4B863F1h
		dd 31D7CADCh, 63421085h, 97134022h, 0C6842011h,	4A857D24h
		dd 0BBD2F83Dh, 0F9AE1132h, 29C76DA1h, 9E1D4B2Fh, 0B2DCF330h
		dd 860DEC52h, 0C177D0E3h, 0B32B6C16h, 70A999B9h, 9411FA48h
		dd 0E9472264h, 0FCA8C48Ch, 0F0A01A3Fh, 7D56D82Ch, 3322EF90h
		dd 4987C74Eh, 38D9C1D1h, 0CA8CFEA2h, 0D498360Bh, 0F5A6CF81h
		dd 7AA528DEh, 0B7DA268Eh, 0AD3FA4BFh, 3A2CE49Dh, 78500D92h
		dd 5F6A9BCCh, 7E546246h, 8DF6C213h, 0D890E8B8h,	392E5EF7h
		dd 0C382F5AFh, 5D9FBE80h, 0D0697C93h, 0D56FA92Dh, 25CFB312h
		dd 0ACC83B99h, 1810A77Dh, 9CE86E63h, 3BDB7BBBh,	26CD0978h
		dd 596EF418h, 9AEC01B7h, 4F83A89Ah, 95E6656Eh, 0FFAA7EE6h
		dd 0BC2108CFh, 15EFE6E8h, 0E7BAD99Bh, 6F4ACE36h, 9FEAD409h
		dd 0B029D67Ch, 0A431AFB2h, 3F2A3123h, 0A5C63094h, 0A235C066h
		dd 4E7437BCh, 82FCA6CAh, 90E0B0D0h, 0A73315D8h,	4F14A98h
		dd 0EC41F7DAh, 0CD7F0E50h, 91172FF6h, 4D768DD6h, 0EF434DB0h
		dd 0AACC544Dh, 96E4DF04h, 0D19EE3B5h, 6A4C1B88h, 2CC1B81Fh
		dd 65467F51h, 5E9D04EAh, 8C015D35h, 87FA7374h, 0BFB2E41h
		dd 67B35A1Dh, 0DB9252D2h, 10E93356h, 0D66D1347h, 0D79A8C61h
		dd 0A1377A0Ch, 0F8598E14h, 13EB893Ch, 0A9CEEE27h, 61B735C9h
		dd 1CE1EDE5h, 477A3CB1h, 0D29C59DFh, 0F2553F73h, 141879CEh
		dd 0C773BF37h, 0F753EACDh, 0FD5F5BAAh, 3DDF146Fh, 447886DBh
		dd 0AFCA81F3h, 68B93EC4h, 24382C34h, 0A3C25F40h, 1D1672C3h
		dd 0E2BC0C25h, 3C288B49h, 0DFF4195h, 0A8397101h, 0C08DEB3h
		dd 0B4D89CE4h, 566490C1h, 0CB7B6184h, 32D570B6h, 6C48745Ch
		dd 0B8D04257h
dword_1003CE80	dd 5150A7F4h		; DATA XREF: sub_1000EF30+5Ar
					; sub_1000EF30+90r ...
		dd 7E536541h, 1AC3A417h, 3A965E27h, 3BCB6BABh, 1FF1459Dh
		dd 0ACAB58FAh, 4B9303E3h, 2055FA30h, 0ADF66D76h, 889176CCh
		dd 0F5254C02h, 4FFCD7E5h, 0C5D7CB2Ah, 26804435h, 0B58FA362h
		dd 0DE495AB1h, 25671BBAh, 45980EEAh, 5DE1C0FEh,	0C302752Fh
		dd 8112F04Ch, 8DA39746h, 6BC6F9D3h, 3E75F8Fh, 15959C92h
		dd 0BFEB7A6Dh, 95DA5952h, 0D42D83BEh, 58D32174h, 492969E0h
		dd 8E44C8C9h, 756A89C2h, 0F478798Eh, 996B3E58h,	27DD71B9h
		dd 0BEB64FE1h, 0F017AD88h, 0C966AC20h, 7DB43ACEh, 63184ADFh
		dd 0E582311Ah, 97603351h, 62457F53h, 0B1E07764h, 0BB84AE6Bh
		dd 0FE1CA081h, 0F9942B08h, 70586848h, 8F19FD45h, 94876CDEh
		dd 52B7F87Bh, 0AB23D373h, 72E2024Bh, 0E3578F1Fh, 662AAB55h
		dd 0B20728EBh, 2F03C2B5h, 869A7BC5h, 0D3A50837h, 30F28728h
		dd 23B2A5BFh, 2BA6A03h,	0ED5C8216h, 8A2B1CCFh, 0A792B479h
		dd 0F3F0F207h, 4EA1E269h, 65CDF4DAh, 6D5BE05h, 0D11F6234h
		dd 0C48AFEA6h, 349D532Eh, 0A2A055F3h, 532E18Ah,	0A475EBF6h
		dd 0B39EC83h, 40AAEF60h, 5E069F71h, 0BD51106Eh,	3EF98A21h
		dd 963D06DDh, 0DDAE053Eh, 4D46BDE6h, 91B58D54h,	71055DC4h
		dd 46FD406h, 60FF1550h,	1924FB98h, 0D697E9BDh, 89CC4340h
		dd 67779ED9h, 0B0BD42E8h, 7888B89h, 0E7385B19h,	79DBEEC8h
		dd 0A1470A7Ch, 7CE90F42h, 0F8C91E84h, 0
		dd 9838680h, 3248ED2Bh,	1EAC7011h, 6C4E725Ah, 0FDFBFF0Eh
		dd 0F563885h, 3D1ED5AEh, 3627392Dh, 0A64D90Fh, 6821A65Ch
		dd 9BD1545Bh, 243A2E36h, 0CB1670Ah, 930FE757h, 0B4D296EEh
		dd 1B9E919Bh, 804FC5C0h, 61A220DCh, 5A694B77h, 1C161A12h
		dd 0E20ABA93h, 0C0E52AA0h, 3C43E022h, 121D171Bh, 0E0B0D09h
		dd 0F2ADC78Bh, 2DB9A8B6h, 14C8A91Eh, 578519F1h,	0AF4C0775h
		dd 0EEBBDD99h, 0A3FD607Fh, 0F79F2601h, 5CBCF572h, 44C53B66h
		dd 5B347EFBh, 8B762943h, 0CBDCC623h, 0B668FCEDh, 0B863F1E4h
		dd 0D7CADC31h, 42108563h, 13402297h, 842011C6h,	857D244Ah
		dd 0D2F83DBBh, 0AE1132F9h, 0C76DA129h, 1D4B2F9Eh, 0DCF330B2h
		dd 0DEC5286h, 77D0E3C1h, 2B6C16B3h, 0A999B970h,	11FA4894h
		dd 472264E9h, 0A8C48CFCh, 0A01A3FF0h, 56D82C7Dh, 22EF9033h
		dd 87C74E49h, 0D9C1D138h, 8CFEA2CAh, 98360BD4h,	0A6CF81F5h
		dd 0A528DE7Ah, 0DA268EB7h, 3FA4BFADh, 2CE49D3Ah, 500D9278h
		dd 6A9BCC5Fh, 5462467Eh, 0F6C2138Dh, 90E8B8D8h,	2E5EF739h
		dd 82F5AFC3h, 9FBE805Dh, 697C93D0h, 6FA92DD5h, 0CFB31225h
		dd 0C83B99ACh, 10A77D18h, 0E86E639Ch, 0DB7BBB3Bh, 0CD097826h
		dd 6EF41859h, 0EC01B79Ah, 83A89A4Fh, 0E6656E95h, 0AA7EE6FFh
		dd 2108CFBCh, 0EFE6E815h, 0BAD99BE7h, 4ACE366Fh, 0EAD4099Fh
		dd 29D67CB0h, 31AFB2A4h, 2A31233Fh, 0C63094A5h,	35C066A2h
		dd 7437BC4Eh, 0FCA6CA82h, 0E0B0D090h, 3315D8A7h, 0F14A9804h
		dd 41F7DAECh, 7F0E50CDh, 172FF691h, 768DD64Dh, 434DB0EFh
		dd 0CC544DAAh, 0E4DF0496h, 9EE3B5D1h, 4C1B886Ah, 0C1B81F2Ch
		dd 467F5165h, 9D04EA5Eh, 15D358Ch, 0FA737487h, 0FB2E410Bh
		dd 0B35A1D67h, 9252D2DBh, 0E9335610h, 6D1347D6h, 9A8C61D7h
		dd 377A0CA1h, 598E14F8h, 0EB893C13h, 0CEEE27A9h, 0B735C961h
		dd 0E1EDE51Ch, 7A3CB147h, 9C59DFD2h, 553F73F2h,	1879CE14h
		dd 73BF37C7h, 53EACDF7h, 5F5BAAFDh, 0DF146F3Dh,	7886DB44h
		dd 0CA81F3AFh, 0B93EC468h, 382C3424h, 0C25F40A3h, 1672C31Dh
		dd 0BC0C25E2h, 288B493Ch, 0FF41950Dh, 397101A8h, 8DEB30Ch
		dd 0D89CE4B4h, 6490C156h, 7B6184CBh, 0D570B632h, 48745C6Ch
		dd 0D04257B8h
dword_1003D280	dd 0			; DATA XREF: sub_1000EA90+54r
					; sub_1000EA90+86r ...
		dd 0B0D090Eh, 161A121Ch, 1D171B12h, 2C342438h, 27392D36h
		dd 3A2E3624h, 31233F2Ah, 58684870h, 5365417Eh, 4E725A6Ch
		dd 457F5362h, 745C6C48h, 7F516546h, 62467E54h, 694B775Ah
		dd 0B0D090E0h, 0BBDD99EEh, 0A6CA82FCh, 0ADC78BF2h, 9CE4B4D8h
		dd 97E9BDD6h, 8AFEA6C4h, 81F3AFCAh, 0E8B8D890h,	0E3B5D19Eh
		dd 0FEA2CA8Ch, 0F5AFC382h, 0C48CFCA8h, 0CF81F5A6h, 0D296EEB4h
		dd 0D99BE7BAh, 7BBB3BDBh, 70B632D5h, 6DA129C7h,	66AC20C9h
		dd 578F1FE3h, 5C8216EDh, 41950DFFh, 4A9804F1h, 23D373ABh
		dd 28DE7AA5h, 35C961B7h, 3EC468B9h, 0FE75793h, 4EA5E9Dh
		dd 19FD458Fh, 12F04C81h, 0CB6BAB3Bh, 0C066A235h, 0DD71B927h
		dd 0D67CB029h, 0E75F8F03h, 0EC52860Dh, 0F1459D1Fh, 0FA489411h
		dd 9303E34Bh, 980EEA45h, 8519F157h, 8E14F859h, 0BF37C773h
		dd 0B43ACE7Dh, 0A92DD56Fh, 0A220DC61h, 0F66D76ADh, 0FD607FA3h
		dd 0E07764B1h, 0EB7A6DBFh, 0DA595295h, 0D1545B9Bh, 0CC434089h
		dd 0C74E4987h, 0AE053EDDh, 0A50837D3h, 0B81F2CC1h, 0B31225CFh
		dd 82311AE5h, 893C13EBh, 942B08F9h, 9F2601F7h, 46BDE64Dh
		dd 4DB0EF43h, 50A7F451h, 5BAAFD5Fh, 6A89C275h, 6184CB7Bh
		dd 7C93D069h, 779ED967h, 1ED5AE3Dh, 15D8A733h, 8CFBC21h
		dd 3C2B52Fh, 32E18A05h,	39EC830Bh, 24FB9819h, 2FF69117h
		dd 8DD64D76h, 86DB4478h, 9BCC5F6Ah, 90C15664h, 0A1E2694Eh
		dd 0AAEF6040h, 0B7F87B52h, 0BCF5725Ch, 0D5BE0506h, 0DEB30C08h
		dd 0C3A4171Ah, 0C8A91E14h, 0F98A213Eh, 0F2872830h, 0EF903322h
		dd 0E49D3A2Ch, 3D06DD96h, 360BD498h, 2B1CCF8Ah,	2011C684h
		dd 1132F9AEh, 1A3FF0A0h, 728EBB2h, 0C25E2BCh, 656E95E6h
		dd 6E639CE8h, 737487FAh, 78798EF4h, 495AB1DEh, 4257B8D0h
		dd 5F40A3C2h, 544DAACCh, 0F7DAEC41h, 0FCD7E54Fh, 0E1C0FE5Dh
		dd 0EACDF753h, 0DBEEC879h, 0D0E3C177h, 0CDF4DA65h, 0C6F9D36Bh
		dd 0AFB2A431h, 0A4BFAD3Fh, 0B9A8B62Dh, 0B2A5BF23h, 83868009h
		dd 888B8907h, 959C9215h, 9E919B1Bh, 470A7CA1h, 4C0775AFh
		dd 51106EBDh, 5A1D67B3h, 6B3E5899h, 60335197h, 7D244A85h
		dd 7629438Bh, 1F6234D1h, 146F3DDFh, 97826CDh, 2752FC3h
		dd 335610E9h, 385B19E7h, 254C02F5h, 2E410BFBh, 8C61D79Ah
		dd 876CDE94h, 9A7BC586h, 9176CC88h, 0A055F3A2h,	0AB58FAACh
		dd 0B64FE1BEh, 0BD42E8B0h, 0D4099FEAh, 0DF0496E4h, 0C2138DF6h
		dd 0C91E84F8h, 0F83DBBD2h, 0F330B2DCh, 0EE27A9CEh, 0E52AA0C0h
		dd 3CB1477Ah, 37BC4E74h, 2AAB5566h, 21A65C68h, 10856342h
		dd 1B886A4Ch, 69F715Eh,	0D927850h, 64D90F0Ah, 6FD40604h
		dd 72C31D16h, 79CE1418h, 48ED2B32h, 43E0223Ch, 5EF7392Eh
		dd 55FA3020h, 1B79AECh,	0ABA93E2h, 17AD88F0h, 1CA081FEh
		dd 2D83BED4h, 268EB7DAh, 3B99ACC8h, 3094A5C6h, 59DFD29Ch
		dd 52D2DB92h, 4FC5C080h, 44C8C98Eh, 75EBF6A4h, 7EE6FFAAh
		dd 63F1E4B8h, 68FCEDB6h, 0B1670A0Ch, 0BA6A0302h, 0A77D1810h
		dd 0AC70111Eh, 9D532E34h, 965E273Ah, 8B493C28h,	80443526h
		dd 0E90F427Ch, 0E2024B72h, 0FF155060h, 0F418596Eh, 0C53B6644h
		dd 0CE366F4Ah, 0D3217458h, 0D82C7D56h, 7A0CA137h, 7101A839h
		dd 6C16B32Bh, 671BBA25h, 5638850Fh, 5D358C01h, 40229713h
		dd 4B2F9E1Dh, 2264E947h, 2969E049h, 347EFB5Bh, 3F73F255h
		dd 0E50CD7Fh, 55DC471h,	184ADF63h, 1347D66Dh, 0CADC31D7h
		dd 0C1D138D9h, 0DCC623CBh, 0D7CB2AC5h, 0E6E815EFh, 0EDE51CE1h
		dd 0F0F207F3h, 0FBFF0EFDh, 92B479A7h, 99B970A9h, 84AE6BBBh
		dd 8FA362B5h, 0BE805D9Fh, 0B58D5491h, 0A89A4F83h, 0A397468Dh
dword_1003D680	dd 0			; DATA XREF: sub_1000EA90+4Ar
					; sub_1000EA90+7Br ...
		dd 0D090E0Bh, 1A121C16h, 171B121Dh, 3424382Ch, 392D3627h
		dd 2E36243Ah, 233F2A31h, 68487058h, 65417E53h, 725A6C4Eh
		dd 7F536245h, 5C6C4874h, 5165467Fh, 467E5462h, 4B775A69h
		dd 0D090E0B0h, 0DD99EEBBh, 0CA82FCA6h, 0C78BF2ADh, 0E4B4D89Ch
		dd 0E9BDD697h, 0FEA6C48Ah, 0F3AFCA81h, 0B8D890E8h, 0B5D19EE3h
		dd 0A2CA8CFEh, 0AFC382F5h, 8CFCA8C4h, 81F5A6CFh, 96EEB4D2h
		dd 9BE7BAD9h, 0BB3BDB7Bh, 0B632D570h, 0A129C76Dh, 0AC20C966h
		dd 8F1FE357h, 8216ED5Ch, 950DFF41h, 9804F14Ah, 0D373AB23h
		dd 0DE7AA528h, 0C961B735h, 0C468B93Eh, 0E757930Fh, 0EA5E9D04h
		dd 0FD458F19h, 0F04C8112h, 6BAB3BCBh, 66A235C0h, 71B927DDh
		dd 7CB029D6h, 5F8F03E7h, 52860DECh, 459D1FF1h, 489411FAh
		dd 3E34B93h, 0EEA4598h,	19F15785h, 14F8598Eh, 37C773BFh
		dd 3ACE7DB4h, 2DD56FA9h, 20DC61A2h, 6D76ADF6h, 607FA3FDh
		dd 7764B1E0h, 7A6DBFEBh, 595295DAh, 545B9BD1h, 434089CCh
		dd 4E4987C7h, 53EDDAEh,	837D3A5h, 1F2CC1B8h, 1225CFB3h
		dd 311AE582h, 3C13EB89h, 2B08F994h, 2601F79Fh, 0BDE64D46h
		dd 0B0EF434Dh, 0A7F45150h, 0AAFD5F5Bh, 89C2756Ah, 84CB7B61h
		dd 93D0697Ch, 9ED96777h, 0D5AE3D1Eh, 0D8A73315h, 0CFBC2108h
		dd 0C2B52F03h, 0E18A0532h, 0EC830B39h, 0FB981924h, 0F691172Fh
		dd 0D64D768Dh, 0DB447886h, 0CC5F6A9Bh, 0C1566490h, 0E2694EA1h
		dd 0EF6040AAh, 0F87B52B7h, 0F5725CBCh, 0BE0506D5h, 0B30C08DEh
		dd 0A4171AC3h, 0A91E14C8h, 8A213EF9h, 872830F2h, 903322EFh
		dd 9D3A2CE4h, 6DD963Dh,	0BD49836h, 1CCF8A2Bh, 11C68420h
		dd 32F9AE11h, 3FF0A01Ah, 28EBB207h, 25E2BC0Ch, 6E95E665h
		dd 639CE86Eh, 7487FA73h, 798EF478h, 5AB1DE49h, 57B8D042h
		dd 40A3C25Fh, 4DAACC54h, 0DAEC41F7h, 0D7E54FFCh, 0C0FE5DE1h
		dd 0CDF753EAh, 0EEC879DBh, 0E3C177D0h, 0F4DA65CDh, 0F9D36BC6h
		dd 0B2A431AFh, 0BFAD3FA4h, 0A8B62DB9h, 0A5BF23B2h, 86800983h
		dd 8B890788h, 9C921595h, 919B1B9Eh, 0A7CA147h, 775AF4Ch
		dd 106EBD51h, 1D67B35Ah, 3E58996Bh, 33519760h, 244A857Dh
		dd 29438B76h, 6234D11Fh, 6F3DDF14h, 7826CD09h, 752FC302h
		dd 5610E933h, 5B19E738h, 4C02F525h, 410BFB2Eh, 61D79A8Ch
		dd 6CDE9487h, 7BC5869Ah, 76CC8891h, 55F3A2A0h, 58FAACABh
		dd 4FE1BEB6h, 42E8B0BDh, 99FEAD4h, 496E4DFh, 138DF6C2h
		dd 1E84F8C9h, 3DBBD2F8h, 30B2DCF3h, 27A9CEEEh, 2AA0C0E5h
		dd 0B1477A3Ch, 0BC4E7437h, 0AB55662Ah, 0A65C6821h, 85634210h
		dd 886A4C1Bh, 9F715E06h, 9278500Dh, 0D90F0A64h,	0D406046Fh
		dd 0C31D1672h, 0CE141879h, 0ED2B3248h, 0E0223C43h, 0F7392E5Eh
		dd 0FA302055h, 0B79AEC01h, 0BA93E20Ah, 0AD88F017h, 0A081FE1Ch
		dd 83BED42Dh, 8EB7DA26h, 99ACC83Bh, 94A5C630h, 0DFD29C59h
		dd 0D2DB9252h, 0C5C0804Fh, 0C8C98E44h, 0EBF6A475h, 0E6FFAA7Eh
		dd 0F1E4B863h, 0FCEDB668h, 670A0CB1h, 6A0302BAh, 7D1810A7h
		dd 70111EACh, 532E349Dh, 5E273A96h, 493C288Bh, 44352680h
		dd 0F427CE9h, 24B72E2h,	155060FFh, 18596EF4h, 3B6644C5h
		dd 366F4ACEh, 217458D3h, 2C7D56D8h, 0CA1377Ah, 1A83971h
		dd 16B32B6Ch, 1BBA2567h, 38850F56h, 358C015Dh, 22971340h
		dd 2F9E1D4Bh, 64E94722h, 69E04929h, 7EFB5B34h, 73F2553Fh
		dd 50CD7F0Eh, 5DC47105h, 4ADF6318h, 47D66D13h, 0DC31D7CAh
		dd 0D138D9C1h, 0C623CBDCh, 0CB2AC5D7h, 0E815EFE6h, 0E51CE1EDh
		dd 0F207F3F0h, 0FF0EFDFBh, 0B479A792h, 0B970A999h, 0AE6BBB84h
		dd 0A362B58Fh, 805D9FBEh, 8D5491B5h, 9A4F83A8h,	97468DA3h
dword_1003DA80	dd 0			; DATA XREF: sub_1000EA90+3Fr
					; sub_1000EA90+70r ...
		dd 90E0B0Dh, 121C161Ah,	1B121D17h, 24382C34h, 2D362739h
		dd 36243A2Eh, 3F2A3123h, 48705868h, 417E5365h, 5A6C4E72h
		dd 5362457Fh, 6C48745Ch, 65467F51h, 7E546246h, 775A694Bh
		dd 90E0B0D0h, 99EEBBDDh, 82FCA6CAh, 8BF2ADC7h, 0B4D89CE4h
		dd 0BDD697E9h, 0A6C48AFEh, 0AFCA81F3h, 0D890E8B8h, 0D19EE3B5h
		dd 0CA8CFEA2h, 0C382F5AFh, 0FCA8C48Ch, 0F5A6CF81h, 0EEB4D296h
		dd 0E7BAD99Bh, 3BDB7BBBh, 32D570B6h, 29C76DA1h,	20C966ACh
		dd 1FE3578Fh, 16ED5C82h, 0DFF4195h, 4F14A98h, 73AB23D3h
		dd 7AA528DEh, 61B735C9h, 68B93EC4h, 57930FE7h, 5E9D04EAh
		dd 458F19FDh, 4C8112F0h, 0AB3BCB6Bh, 0A235C066h, 0B927DD71h
		dd 0B029D67Ch, 8F03E75Fh, 860DEC52h, 9D1FF145h,	9411FA48h
		dd 0E34B9303h, 0EA45980Eh, 0F1578519h, 0F8598E14h, 0C773BF37h
		dd 0CE7DB43Ah, 0D56FA92Dh, 0DC61A220h, 76ADF66Dh, 7FA3FD60h
		dd 64B1E077h, 6DBFEB7Ah, 5295DA59h, 5B9BD154h, 4089CC43h
		dd 4987C74Eh, 3EDDAE05h, 37D3A508h, 2CC1B81Fh, 25CFB312h
		dd 1AE58231h, 13EB893Ch, 8F9942Bh, 1F79F26h, 0E64D46BDh
		dd 0EF434DB0h, 0F45150A7h, 0FD5F5BAAh, 0C2756A89h, 0CB7B6184h
		dd 0D0697C93h, 0D967779Eh, 0AE3D1ED5h, 0A73315D8h, 0BC2108CFh
		dd 0B52F03C2h, 8A0532E1h, 830B39ECh, 981924FBh,	91172FF6h
		dd 4D768DD6h, 447886DBh, 5F6A9BCCh, 566490C1h, 694EA1E2h
		dd 6040AAEFh, 7B52B7F8h, 725CBCF5h, 506D5BEh, 0C08DEB3h
		dd 171AC3A4h, 1E14C8A9h, 213EF98Ah, 2830F287h, 3322EF90h
		dd 3A2CE49Dh, 0DD963D06h, 0D498360Bh, 0CF8A2B1Ch, 0C6842011h
		dd 0F9AE1132h, 0F0A01A3Fh, 0EBB20728h, 0E2BC0C25h, 95E6656Eh
		dd 9CE86E63h, 87FA7374h, 8EF47879h, 0B1DE495Ah,	0B8D04257h
		dd 0A3C25F40h, 0AACC544Dh, 0EC41F7DAh, 0E54FFCD7h, 0FE5DE1C0h
		dd 0F753EACDh, 0C879DBEEh, 0C177D0E3h, 0DA65CDF4h, 0D36BC6F9h
		dd 0A431AFB2h, 0AD3FA4BFh, 0B62DB9A8h, 0BF23B2A5h, 80098386h
		dd 8907888Bh, 9215959Ch, 9B1B9E91h, 7CA1470Ah, 75AF4C07h
		dd 6EBD5110h, 67B35A1Dh, 58996B3Eh, 51976033h, 4A857D24h
		dd 438B7629h, 34D11F62h, 3DDF146Fh, 26CD0978h, 2FC30275h
		dd 10E93356h, 19E7385Bh, 2F5254Ch, 0BFB2E41h, 0D79A8C61h
		dd 0DE94876Ch, 0C5869A7Bh, 0CC889176h, 0F3A2A055h, 0FAACAB58h
		dd 0E1BEB64Fh, 0E8B0BD42h, 9FEAD409h, 96E4DF04h, 8DF6C213h
		dd 84F8C91Eh, 0BBD2F83Dh, 0B2DCF330h, 0A9CEEE27h, 0A0C0E52Ah
		dd 477A3CB1h, 4E7437BCh, 55662AABh, 5C6821A6h, 63421085h
		dd 6A4C1B88h, 715E069Fh, 78500D92h, 0F0A64D9h, 6046FD4h
		dd 1D1672C3h, 141879CEh, 2B3248EDh, 223C43E0h, 392E5EF7h
		dd 302055FAh, 9AEC01B7h, 93E20ABAh, 88F017ADh, 81FE1CA0h
		dd 0BED42D83h, 0B7DA268Eh, 0ACC83B99h, 0A5C63094h, 0D29C59DFh
		dd 0DB9252D2h, 0C0804FC5h, 0C98E44C8h, 0F6A475EBh, 0FFAA7EE6h
		dd 0E4B863F1h, 0EDB668FCh, 0A0CB167h, 302BA6Ah,	1810A77Dh
		dd 111EAC70h, 2E349D53h, 273A965Eh, 3C288B49h, 35268044h
		dd 427CE90Fh, 4B72E202h, 5060FF15h, 596EF418h, 6644C53Bh
		dd 6F4ACE36h, 7458D321h, 7D56D82Ch, 0A1377A0Ch,	0A8397101h
		dd 0B32B6C16h, 0BA25671Bh, 850F5638h, 8C015D35h, 97134022h
		dd 9E1D4B2Fh, 0E9472264h, 0E0492969h, 0FB5B347Eh, 0F2553F73h
		dd 0CD7F0E50h, 0C471055Dh, 0DF63184Ah, 0D66D1347h, 31D7CADCh
		dd 38D9C1D1h, 23CBDCC6h, 2AC5D7CBh, 15EFE6E8h, 1CE1EDE5h
		dd 7F3F0F2h, 0EFDFBFFh,	79A792B4h, 70A999B9h, 6BBB84AEh
		dd 62B58FA3h, 5D9FBE80h, 5491B58Dh, 4F83A89Ah, 468DA397h
dword_1003DE80	dd 0			; DATA XREF: sub_1000EA90+34r
					; sub_1000EA90+65r ...
		dd 0E0B0D09h, 1C161A12h, 121D171Bh, 382C3424h, 3627392Dh
		dd 243A2E36h, 2A31233Fh, 70586848h, 7E536541h, 6C4E725Ah
		dd 62457F53h, 48745C6Ch, 467F5165h, 5462467Eh, 5A694B77h
		dd 0E0B0D090h, 0EEBBDD99h, 0FCA6CA82h, 0F2ADC78Bh, 0D89CE4B4h
		dd 0D697E9BDh, 0C48AFEA6h, 0CA81F3AFh, 90E8B8D8h, 9EE3B5D1h
		dd 8CFEA2CAh, 82F5AFC3h, 0A8C48CFCh, 0A6CF81F5h, 0B4D296EEh
		dd 0BAD99BE7h, 0DB7BBB3Bh, 0D570B632h, 0C76DA129h, 0C966AC20h
		dd 0E3578F1Fh, 0ED5C8216h, 0FF41950Dh, 0F14A9804h, 0AB23D373h
		dd 0A528DE7Ah, 0B735C961h, 0B93EC468h, 930FE757h, 9D04EA5Eh
		dd 8F19FD45h, 8112F04Ch, 3BCB6BABh, 35C066A2h, 27DD71B9h
		dd 29D67CB0h, 3E75F8Fh,	0DEC5286h, 1FF1459Dh, 11FA4894h
		dd 4B9303E3h, 45980EEAh, 578519F1h, 598E14F8h, 73BF37C7h
		dd 7DB43ACEh, 6FA92DD5h, 61A220DCh, 0ADF66D76h,	0A3FD607Fh
		dd 0B1E07764h, 0BFEB7A6Dh, 95DA5952h, 9BD1545Bh, 89CC4340h
		dd 87C74E49h, 0DDAE053Eh, 0D3A50837h, 0C1B81F2Ch, 0CFB31225h
		dd 0E582311Ah, 0EB893C13h, 0F9942B08h, 0F79F2601h, 4D46BDE6h
		dd 434DB0EFh, 5150A7F4h, 5F5BAAFDh, 756A89C2h, 7B6184CBh
		dd 697C93D0h, 67779ED9h, 3D1ED5AEh, 3315D8A7h, 2108CFBCh
		dd 2F03C2B5h, 532E18Ah,	0B39EC83h, 1924FB98h, 172FF691h
		dd 768DD64Dh, 7886DB44h, 6A9BCC5Fh, 6490C156h, 4EA1E269h
		dd 40AAEF60h, 52B7F87Bh, 5CBCF572h, 6D5BE05h, 8DEB30Ch
		dd 1AC3A417h, 14C8A91Eh, 3EF98A21h, 30F28728h, 22EF9033h
		dd 2CE49D3Ah, 963D06DDh, 98360BD4h, 8A2B1CCFh, 842011C6h
		dd 0AE1132F9h, 0A01A3FF0h, 0B20728EBh, 0BC0C25E2h, 0E6656E95h
		dd 0E86E639Ch, 0FA737487h, 0F478798Eh, 0DE495AB1h, 0D04257B8h
		dd 0C25F40A3h, 0CC544DAAh, 41F7DAECh, 4FFCD7E5h, 5DE1C0FEh
		dd 53EACDF7h, 79DBEEC8h, 77D0E3C1h, 65CDF4DAh, 6BC6F9D3h
		dd 31AFB2A4h, 3FA4BFADh, 2DB9A8B6h, 23B2A5BFh, 9838680h
		dd 7888B89h, 15959C92h,	1B9E919Bh, 0A1470A7Ch, 0AF4C0775h
		dd 0BD51106Eh, 0B35A1D67h, 996B3E58h, 97603351h, 857D244Ah
		dd 8B762943h, 0D11F6234h, 0DF146F3Dh, 0CD097826h, 0C302752Fh
		dd 0E9335610h, 0E7385B19h, 0F5254C02h, 0FB2E410Bh, 9A8C61D7h
		dd 94876CDEh, 869A7BC5h, 889176CCh, 0A2A055F3h,	0ACAB58FAh
		dd 0BEB64FE1h, 0B0BD42E8h, 0EAD4099Fh, 0E4DF0496h, 0F6C2138Dh
		dd 0F8C91E84h, 0D2F83DBBh, 0DCF330B2h, 0CEEE27A9h, 0C0E52AA0h
		dd 7A3CB147h, 7437BC4Eh, 662AAB55h, 6821A65Ch, 42108563h
		dd 4C1B886Ah, 5E069F71h, 500D9278h, 0A64D90Fh, 46FD406h
		dd 1672C31Dh, 1879CE14h, 3248ED2Bh, 3C43E022h, 2E5EF739h
		dd 2055FA30h, 0EC01B79Ah, 0E20ABA93h, 0F017AD88h, 0FE1CA081h
		dd 0D42D83BEh, 0DA268EB7h, 0C83B99ACh, 0C63094A5h, 9C59DFD2h
		dd 9252D2DBh, 804FC5C0h, 8E44C8C9h, 0A475EBF6h,	0AA7EE6FFh
		dd 0B863F1E4h, 0B668FCEDh, 0CB1670Ah, 2BA6A03h,	10A77D18h
		dd 1EAC7011h, 349D532Eh, 3A965E27h, 288B493Ch, 26804435h
		dd 7CE90F42h, 72E2024Bh, 60FF1550h, 6EF41859h, 44C53B66h
		dd 4ACE366Fh, 58D32174h, 56D82C7Dh, 377A0CA1h, 397101A8h
		dd 2B6C16B3h, 25671BBAh, 0F563885h, 15D358Ch, 13402297h
		dd 1D4B2F9Eh, 472264E9h, 492969E0h, 5B347EFBh, 553F73F2h
		dd 7F0E50CDh, 71055DC4h, 63184ADFh, 6D1347D6h, 0D7CADC31h
		dd 0D9C1D138h, 0CBDCC623h, 0C5D7CB2Ah, 0EFE6E815h, 0E1EDE51Ch
		dd 0F3F0F207h, 0FDFBFF0Eh, 0A792B479h, 0A999B970h, 0BB84AE6Bh
		dd 0B58FA362h, 9FBE805Dh, 91B58D54h, 83A89A4Fh
dword_1003E27C	dd 8DA39746h		; DATA XREF: sub_1000E690+98r
					; sub_1000E7B0+C6r ...
		dd 1, 2, 4, 8, 10h, 20h, 40h, 80h, 1Bh,	36h, 6Ch, 0D8h
		dd 0ABh, 4Dh, 9Ah, 2Fh,	5Eh, 0BCh, 63h,	0C6h, 97h, 35h
		dd 6Ah,	0D4h, 0B3h, 7Dh, 0FAh, 0EFh, 0C5h, 91h
dword_1003E2F8	dd 70707000h		; DATA XREF: sub_1000FED0+208r
					; sub_1000FED0+274r ...
		dd 82828200h, 2C2C2C00h, 0ECECEC00h, 0B3B3B300h, 27272700h
		dd 0C0C0C000h, 0E5E5E500h, 0E4E4E400h, 85858500h, 57575700h
		dd 35353500h, 0EAEAEA00h, 0C0C0C00h, 0AEAEAE00h, 41414100h
		dd 23232300h, 0EFEFEF00h, 6B6B6B00h, 93939300h,	45454500h
		dd 19191900h, 0A5A5A500h, 21212100h, 0EDEDED00h, 0E0E0E00h
		dd 4F4F4F00h, 4E4E4E00h, 1D1D1D00h, 65656500h, 92929200h
		dd 0BDBDBD00h, 86868600h, 0B8B8B800h, 0AFAFAF00h, 8F8F8F00h
		dd 7C7C7C00h, 0EBEBEB00h, 1F1F1F00h, 0CECECE00h, 3E3E3E00h
		dd 30303000h, 0DCDCDC00h, 5F5F5F00h, 5E5E5E00h,	0C5C5C500h
		dd 0B0B0B00h, 1A1A1A00h, 0A6A6A600h, 0E1E1E100h, 39393900h
		dd 0CACACA00h, 0D5D5D500h, 47474700h, 5D5D5D00h, 3D3D3D00h
		dd 0D9D9D900h, 1010100h, 5A5A5A00h, 0D6D6D600h,	51515100h
		dd 56565600h, 6C6C6C00h, 4D4D4D00h, 8B8B8B00h, 0D0D0D00h
		dd 9A9A9A00h, 66666600h, 0FBFBFB00h, 0CCCCCC00h, 0B0B0B000h
		dd 2D2D2D00h, 74747400h, 12121200h, 2B2B2B00h, 20202000h
		dd 0F0F0F000h, 0B1B1B100h, 84848400h, 99999900h, 0DFDFDF00h
		dd 4C4C4C00h, 0CBCBCB00h, 0C2C2C200h, 34343400h, 7E7E7E00h
		dd 76767600h, 5050500h,	6D6D6D00h, 0B7B7B700h, 0A9A9A900h
		dd 31313100h, 0D1D1D100h, 17171700h, 4040400h, 0D7D7D700h
		dd 14141400h, 58585800h, 3A3A3A00h, 61616100h, 0DEDEDE00h
		dd 1B1B1B00h, 11111100h, 1C1C1C00h, 32323200h, 0F0F0F00h
		dd 9C9C9C00h, 16161600h, 53535300h, 18181800h, 0F2F2F200h
		dd 22222200h, 0FEFEFE00h, 44444400h, 0CFCFCF00h, 0B2B2B200h
		dd 0C3C3C300h, 0B5B5B500h, 7A7A7A00h, 91919100h, 24242400h
		dd 8080800h, 0E8E8E800h, 0A8A8A800h, 60606000h,	0FCFCFC00h
		dd 69696900h, 50505000h, 0AAAAAA00h, 0D0D0D000h, 0A0A0A000h
		dd 7D7D7D00h, 0A1A1A100h, 89898900h, 62626200h,	97979700h
		dd 54545400h, 5B5B5B00h, 1E1E1E00h, 95959500h, 0E0E0E000h
		dd 0FFFFFF00h, 64646400h, 0D2D2D200h, 10101000h, 0C4C4C400h
		dd 0
		dd 48484800h, 0A3A3A300h, 0F7F7F700h, 75757500h, 0DBDBDB00h
		dd 8A8A8A00h, 3030300h,	0E6E6E600h, 0DADADA00h,	9090900h
		dd 3F3F3F00h, 0DDDDDD00h, 94949400h, 87878700h,	5C5C5C00h
		dd 83838300h, 2020200h,	0CDCDCD00h, 4A4A4A00h, 90909000h
		dd 33333300h, 73737300h, 67676700h, 0F6F6F600h,	0F3F3F300h
		dd 9D9D9D00h, 7F7F7F00h, 0BFBFBF00h, 0E2E2E200h, 52525200h
		dd 9B9B9B00h, 0D8D8D800h, 26262600h, 0C8C8C800h, 37373700h
		dd 0C6C6C600h, 3B3B3B00h, 81818100h, 96969600h,	6F6F6F00h
		dd 4B4B4B00h, 13131300h, 0BEBEBE00h, 63636300h,	2E2E2E00h
		dd 0E9E9E900h, 79797900h, 0A7A7A700h, 8C8C8C00h, 9F9F9F00h
		dd 6E6E6E00h, 0BCBCBC00h, 8E8E8E00h, 29292900h,	0F5F5F500h
		dd 0F9F9F900h, 0B6B6B600h, 2F2F2F00h, 0FDFDFD00h, 0B4B4B400h
		dd 59595900h, 78787800h, 98989800h, 6060600h, 6A6A6A00h
		dd 0E7E7E700h, 46464600h, 71717100h, 0BABABA00h, 0D4D4D400h
		dd 25252500h, 0ABABAB00h, 42424200h, 88888800h,	0A2A2A200h
		dd 8D8D8D00h, 0FAFAFA00h, 72727200h, 7070700h, 0B9B9B900h
		dd 55555500h, 0F8F8F800h, 0EEEEEE00h, 0ACACAC00h, 0A0A0A00h
		dd 36363600h, 49494900h, 2A2A2A00h, 68686800h, 3C3C3C00h
		dd 38383800h, 0F1F1F100h, 0A4A4A400h, 40404000h, 28282800h
		dd 0D3D3D300h, 7B7B7B00h, 0BBBBBB00h, 0C9C9C900h, 43434300h
		dd 0C1C1C100h, 15151500h, 0E3E3E300h, 0ADADAD00h, 0F4F4F400h
		dd 77777700h, 0C7C7C700h, 80808000h, 9E9E9E00h
dword_1003E6F8	dd 0E0E0E0h		; DATA XREF: sub_1000FED0+22Br
					; sub_1000FED0+25Fr ...
		dd 50505h, 585858h, 0D9D9D9h, 676767h, 4E4E4Eh,	818181h
		dd 0CBCBCBh, 0C9C9C9h, 0B0B0Bh,	0AEAEAEh, 6A6A6Ah, 0D5D5D5h
		dd 181818h, 5D5D5Dh, 828282h, 464646h, 0DFDFDFh, 0D6D6D6h
		dd 272727h, 8A8A8Ah, 323232h, 4B4B4Bh, 424242h,	0DBDBDBh
		dd 1C1C1Ch, 9E9E9Eh, 9C9C9Ch, 3A3A3Ah, 0CACACAh, 252525h
		dd 7B7B7Bh, 0D0D0Dh, 717171h, 5F5F5Fh, 1F1F1Fh,	0F8F8F8h
		dd 0D7D7D7h, 3E3E3Eh, 9D9D9Dh, 7C7C7Ch,	606060h, 0B9B9B9h
		dd 0BEBEBEh, 0BCBCBCh, 8B8B8Bh,	161616h, 343434h, 4D4D4Dh
		dd 0C3C3C3h, 727272h, 959595h, 0ABABABh, 8E8E8Eh, 0BABABAh
		dd 7A7A7Ah, 0B3B3B3h, 20202h, 0B4B4B4h,	0ADADADh, 0A2A2A2h
		dd 0ACACACh, 0D8D8D8h, 9A9A9Ah,	171717h, 1A1A1Ah, 353535h
		dd 0CCCCCCh, 0F7F7F7h, 999999h,	616161h, 5A5A5Ah, 0E8E8E8h
		dd 242424h, 565656h, 404040h, 0E1E1E1h,	636363h, 90909h
		dd 333333h, 0BFBFBFh, 989898h, 979797h,	858585h, 686868h
		dd 0FCFCFCh, 0ECECECh, 0A0A0Ah,	0DADADAh, 6F6F6Fh, 535353h
		dd 626262h, 0A3A3A3h, 2E2E2Eh, 80808h, 0AFAFAFh, 282828h
		dd 0B0B0B0h, 747474h, 0C2C2C2h,	0BDBDBDh, 363636h, 222222h
		dd 383838h, 646464h, 1E1E1Eh, 393939h, 2C2C2Ch,	0A6A6A6h
		dd 303030h, 0E5E5E5h, 444444h, 0FDFDFDh, 888888h, 9F9F9Fh
		dd 656565h, 878787h, 6B6B6Bh, 0F4F4F4h,	232323h, 484848h
		dd 101010h, 0D1D1D1h, 515151h, 0C0C0C0h, 0F9F9F9h, 0D2D2D2h
		dd 0A0A0A0h, 555555h, 0A1A1A1h,	414141h, 0FAFAFAh, 434343h
		dd 131313h, 0C4C4C4h, 2F2F2Fh, 0A8A8A8h, 0B6B6B6h, 3C3C3Ch
		dd 2B2B2Bh, 0C1C1C1h, 0FFFFFFh,	0C8C8C8h, 0A5A5A5h, 202020h
		dd 898989h, 0
		dd 909090h, 474747h, 0EFEFEFh, 0EAEAEAh, 0B7B7B7h, 151515h
		dd 60606h, 0CDCDCDh, 0B5B5B5h, 121212h,	7E7E7Eh, 0BBBBBBh
		dd 292929h, 0F0F0Fh, 0B8B8B8h, 70707h, 40404h, 9B9B9Bh
		dd 949494h, 212121h, 666666h, 0E6E6E6h,	0CECECEh, 0EDEDEDh
		dd 0E7E7E7h, 3B3B3Bh, 0FEFEFEh,	7F7F7Fh, 0C5C5C5h, 0A4A4A4h
		dd 373737h, 0B1B1B1h, 4C4C4Ch, 919191h,	6E6E6Eh, 8D8D8Dh
		dd 767676h, 30303h, 2D2D2Dh, 0DEDEDEh, 969696h,	262626h
		dd 7D7D7Dh, 0C6C6C6h, 5C5C5Ch, 0D3D3D3h, 0F2F2F2h, 4F4F4Fh
		dd 191919h, 3F3F3Fh, 0DCDCDCh, 797979h,	1D1D1Dh, 525252h
		dd 0EBEBEBh, 0F3F3F3h, 6D6D6Dh,	5E5E5Eh, 0FBFBFBh, 696969h
		dd 0B2B2B2h, 0F0F0F0h, 313131h,	0C0C0Ch, 0D4D4D4h, 0CFCFCFh
		dd 8C8C8Ch, 0E2E2E2h, 757575h, 0A9A9A9h, 4A4A4Ah, 575757h
		dd 848484h, 111111h, 454545h, 1B1B1Bh, 0F5F5F5h, 0E4E4E4h
		dd 0E0E0Eh, 737373h, 0AAAAAAh, 0F1F1F1h, 0DDDDDDh, 595959h
		dd 141414h, 6C6C6Ch, 929292h, 545454h, 0D0D0D0h, 787878h
		dd 707070h, 0E3E3E3h, 494949h, 808080h,	505050h, 0A7A7A7h
		dd 0F6F6F6h, 777777h, 939393h, 868686h,	838383h, 2A2A2Ah
		dd 0C7C7C7h, 5B5B5Bh, 0E9E9E9h,	0EEEEEEh, 8F8F8Fh, 10101h
		dd 3D3D3Dh
dword_1003EAF8	dd 38003838h		; DATA XREF: sub_1000FED0+218r
					; sub_1000FED0+26Dr ...
		dd 41004141h, 16001616h, 76007676h, 0D900D9D9h,	93009393h
		dd 60006060h, 0F200F2F2h, 72007272h, 0C200C2C2h, 0AB00ABABh
		dd 9A009A9Ah, 75007575h, 6000606h, 57005757h, 0A000A0A0h
		dd 91009191h, 0F700F7F7h, 0B500B5B5h, 0C900C9C9h, 0A200A2A2h
		dd 8C008C8Ch, 0D200D2D2h, 90009090h, 0F600F6F6h, 7000707h
		dd 0A700A7A7h, 27002727h, 8E008E8Eh, 0B200B2B2h, 49004949h
		dd 0DE00DEDEh, 43004343h, 5C005C5Ch, 0D700D7D7h, 0C700C7C7h
		dd 3E003E3Eh, 0F500F5F5h, 8F008F8Fh, 67006767h,	1F001F1Fh
		dd 18001818h, 6E006E6Eh, 0AF00AFAFh, 2F002F2Fh,	0E200E2E2h
		dd 85008585h, 0D000D0Dh, 53005353h, 0F000F0F0h,	9C009C9Ch
		dd 65006565h, 0EA00EAEAh, 0A300A3A3h, 0AE00AEAEh, 9E009E9Eh
		dd 0EC00ECECh, 80008080h, 2D002D2Dh, 6B006B6Bh,	0A800A8A8h
		dd 2B002B2Bh, 36003636h, 0A600A6A6h, 0C500C5C5h, 86008686h
		dd 4D004D4Dh, 33003333h, 0FD00FDFDh, 66006666h,	58005858h
		dd 96009696h, 3A003A3Ah, 9000909h, 95009595h, 10001010h
		dd 78007878h, 0D800D8D8h, 42004242h, 0CC00CCCCh, 0EF00EFEFh
		dd 26002626h, 0E500E5E5h, 61006161h, 1A001A1Ah,	3F003F3Fh
		dd 3B003B3Bh, 82008282h, 0B600B6B6h, 0DB00DBDBh, 0D400D4D4h
		dd 98009898h, 0E800E8E8h, 8B008B8Bh, 2000202h, 0EB00EBEBh
		dd 0A000A0Ah, 2C002C2Ch, 1D001D1Dh, 0B000B0B0h,	6F006F6Fh
		dd 8D008D8Dh, 88008888h, 0E000E0Eh, 19001919h, 87008787h
		dd 4E004E4Eh, 0B000B0Bh, 0A900A9A9h, 0C000C0Ch,	79007979h
		dd 11001111h, 7F007F7Fh, 22002222h, 0E700E7E7h,	59005959h
		dd 0E100E1E1h, 0DA00DADAh, 3D003D3Dh, 0C800C8C8h, 12001212h
		dd 4000404h, 74007474h,	54005454h, 30003030h, 7E007E7Eh
		dd 0B400B4B4h, 28002828h, 55005555h, 68006868h,	50005050h
		dd 0BE00BEBEh, 0D000D0D0h, 0C400C4C4h, 31003131h, 0CB00CBCBh
		dd 2A002A2Ah, 0AD00ADADh, 0F000F0Fh, 0CA00CACAh, 70007070h
		dd 0FF00FFFFh, 32003232h, 69006969h, 8000808h, 62006262h
		dd 0
		dd 24002424h, 0D100D1D1h, 0FB00FBFBh, 0BA00BABAh, 0ED00EDEDh
		dd 45004545h, 81008181h, 73007373h, 6D006D6Dh, 84008484h
		dd 9F009F9Fh, 0EE00EEEEh, 4A004A4Ah, 0C300C3C3h, 2E002E2Eh
		dd 0C100C1C1h, 1000101h, 0E600E6E6h, 25002525h,	48004848h
		dd 99009999h, 0B900B9B9h, 0B300B3B3h, 7B007B7Bh, 0F900F9F9h
		dd 0CE00CECEh, 0BF00BFBFh, 0DF00DFDFh, 71007171h, 29002929h
		dd 0CD00CDCDh, 6C006C6Ch, 13001313h, 64006464h,	9B009B9Bh
		dd 63006363h, 9D009D9Dh, 0C000C0C0h, 4B004B4Bh,	0B700B7B7h
		dd 0A500A5A5h, 89008989h, 5F005F5Fh, 0B100B1B1h, 17001717h
		dd 0F400F4F4h, 0BC00BCBCh, 0D300D3D3h, 46004646h, 0CF00CFCFh
		dd 37003737h, 5E005E5Eh, 47004747h, 94009494h, 0FA00FAFAh
		dd 0FC00FCFCh, 5B005B5Bh, 97009797h, 0FE00FEFEh, 5A005A5Ah
		dd 0AC00ACACh, 3C003C3Ch, 4C004C4Ch, 3000303h, 35003535h
		dd 0F300F3F3h, 23002323h, 0B800B8B8h, 5D005D5Dh, 6A006A6Ah
		dd 92009292h, 0D500D5D5h, 21002121h, 44004444h,	51005151h
		dd 0C600C6C6h, 7D007D7Dh, 39003939h, 83008383h,	0DC00DCDCh
		dd 0AA00AAAAh, 7C007C7Ch, 77007777h, 56005656h,	5000505h
		dd 1B001B1Bh, 0A400A4A4h, 15001515h, 34003434h,	1E001E1Eh
		dd 1C001C1Ch, 0F800F8F8h, 52005252h, 20002020h,	14001414h
		dd 0E900E9E9h, 0BD00BDBDh, 0DD00DDDDh, 0E400E4E4h, 0A100A1A1h
		dd 0E000E0E0h, 8A008A8Ah, 0F100F1F1h, 0D600D6D6h, 7A007A7Ah
		dd 0BB00BBBBh, 0E300E3E3h, 40004040h, 4F004F4Fh
dword_1003EEF8	dd 70700070h		; DATA XREF: sub_1000FED0+234r
					; sub_1000FED0+266r ...
		dd 2C2C002Ch, 0B3B300B3h, 0C0C000C0h, 0E4E400E4h, 57570057h
		dd 0EAEA00EAh, 0AEAE00AEh, 23230023h, 6B6B006Bh, 45450045h
		dd 0A5A500A5h, 0EDED00EDh, 4F4F004Fh, 1D1D001Dh, 92920092h
		dd 86860086h, 0AFAF00AFh, 7C7C007Ch, 1F1F001Fh,	3E3E003Eh
		dd 0DCDC00DCh, 5E5E005Eh, 0B0B000Bh, 0A6A600A6h, 39390039h
		dd 0D5D500D5h, 5D5D005Dh, 0D9D900D9h, 5A5A005Ah, 51510051h
		dd 6C6C006Ch, 8B8B008Bh, 9A9A009Ah, 0FBFB00FBh,	0B0B000B0h
		dd 74740074h, 2B2B002Bh, 0F0F000F0h, 84840084h,	0DFDF00DFh
		dd 0CBCB00CBh, 34340034h, 76760076h, 6D6D006Dh,	0A9A900A9h
		dd 0D1D100D1h, 4040004h, 14140014h, 3A3A003Ah, 0DEDE00DEh
		dd 11110011h, 32320032h, 9C9C009Ch, 53530053h, 0F2F200F2h
		dd 0FEFE00FEh, 0CFCF00CFh, 0C3C300C3h, 7A7A007Ah, 24240024h
		dd 0E8E800E8h, 60600060h, 69690069h, 0AAAA00AAh, 0A0A000A0h
		dd 0A1A100A1h, 62620062h, 54540054h, 1E1E001Eh,	0E0E000E0h
		dd 64640064h, 10100010h, 0
dword_1003F020	dd 0A3A300A3h, 75750075h, 8A8A008Ah, 0E6E600E6h, 9090009h
		dd 0DDDD00DDh, 87870087h, 83830083h, 0CDCD00CDh, 90900090h
		dd 73730073h, 0F6F600F6h, 9D9D009Dh, 0BFBF00BFh, 52520052h
		dd 0D8D800D8h, 0C8C800C8h, 0C6C600C6h, 81810081h, 6F6F006Fh
		dd 13130013h, 63630063h, 0E9E900E9h, 0A7A700A7h, 9F9F009Fh
		dd 0BCBC00BCh, 29290029h, 0F9F900F9h, 2F2F002Fh, 0B4B400B4h
		dd 78780078h, 6060006h,	0E7E700E7h, 71710071h, 0D4D400D4h
		dd 0ABAB00ABh, 88880088h, 8D8D008Dh, 72720072h,	0B9B900B9h
		dd 0F8F800F8h, 0ACAC00ACh, 36360036h, 2A2A002Ah, 3C3C003Ch
		dd 0F1F100F1h, 40400040h, 0D3D300D3h, 0BBBB00BBh, 43430043h
		dd 15150015h, 0ADAD00ADh, 77770077h, 80800080h,	82820082h
		dd 0ECEC00ECh, 27270027h, 0E5E500E5h, 85850085h, 35350035h
		dd 0C0C000Ch, 41410041h, 0EFEF00EFh, 93930093h,	19190019h
		dd 21210021h, 0E0E000Eh, 4E4E004Eh, 65650065h, 0BDBD00BDh
		dd 0B8B800B8h, 8F8F008Fh, 0EBEB00EBh, 0CECE00CEh, 30300030h
		dd 5F5F005Fh, 0C5C500C5h, 1A1A001Ah, 0E1E100E1h, 0CACA00CAh
		dd 47470047h, 3D3D003Dh, 1010001h, 0D6D600D6h, 56560056h
		dd 4D4D004Dh, 0D0D000Dh, 66660066h, 0CCCC00CCh,	2D2D002Dh
		dd 12120012h, 20200020h, 0B1B100B1h, 99990099h,	4C4C004Ch
		dd 0C2C200C2h, 7E7E007Eh, 5050005h, 0B7B700B7h,	31310031h
		dd 17170017h, 0D7D700D7h, 58580058h, 61610061h,	1B1B001Bh
		dd 1C1C001Ch, 0F0F000Fh, 16160016h, 18180018h, 22220022h
		dd 44440044h, 0B2B200B2h, 0B5B500B5h, 91910091h, 8080008h
		dd 0A8A800A8h, 0FCFC00FCh, 50500050h, 0D0D000D0h, 7D7D007Dh
		dd 89890089h, 97970097h, 5B5B005Bh, 95950095h, 0FFFF00FFh
		dd 0D2D200D2h, 0C4C400C4h, 48480048h, 0F7F700F7h, 0DBDB00DBh
		dd 3030003h, 0DADA00DAh, 3F3F003Fh, 94940094h, 5C5C005Ch
		dd 2020002h, 4A4A004Ah,	33330033h, 67670067h, 0F3F300F3h
		dd 7F7F007Fh, 0E2E200E2h, 9B9B009Bh, 26260026h,	37370037h
		dd 3B3B003Bh, 96960096h, 4B4B004Bh, 0BEBE00BEh,	2E2E002Eh
		dd 79790079h, 8C8C008Ch, 6E6E006Eh, 8E8E008Eh, 0F5F500F5h
		dd 0B6B600B6h, 0FDFD00FDh, 59590059h, 98980098h, 6A6A006Ah
		dd 46460046h, 0BABA00BAh, 25250025h, 42420042h,	0A2A200A2h
		dd 0FAFA00FAh, 7070007h, 55550055h, 0EEEE00EEh,	0A0A000Ah
		dd 49490049h, 68680068h, 38380038h, 0A4A400A4h,	28280028h
		dd 7B7B007Bh, 0C9C900C9h, 0C1C100C1h, 0E3E300E3h, 0F4F400F4h
		dd 0C7C700C7h, 9E9E009Eh, 46463130h, 0Fh dup(46464646h)
		dd 41464646h, 36383135h, 33383738h, 46324642h, 42363639h
		dd 43434637h, 38343130h, 39303746h, 30443541h, 35424233h
		dd 38423943h, 43393938h, 45413734h, 46364242h, 45313742h
		dd 38333139h, 39303436h, 0
a011839296a789a	db '011839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E6'
					; DATA XREF: .rdata:1003FAD4o
					; .rdata:100476A0o
		db '62C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD166'
		db '50',0
		align 4
a00c6858e06b704	db '00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3'
					; DATA XREF: .rdata:1003FAD0o
					; .rdata:1004769Co
		db 'DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD'
		db '66',0
		align 10h
a0051953eb9618e	db '0051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF10'
					; DATA XREF: .rdata:1003FACCo
					; .rdata:10047698o
		db '9E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F'
		db '00',0
		align 4
a01ffffffffffff	db '01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
					; DATA XREF: .rdata:1003FAC8o
					; .rdata:10047694o
		db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
		db 'FC',0
		align 10h
a01ffffffffff_0	db '01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
					; DATA XREF: .rdata:1003FAC4o
					; .rdata:10047690o
		db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
		db 'FF',0
		align 4
aNistP521	db 'NIST-P521',0        ; DATA XREF: .rdata:off_1003FAB8o
					; .rdata:off_10047684o
		align 8
aFfffffffffffff	db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF5'
					; DATA XREF: .rdata:1003FAB0o
					; .rdata:1004767Co
		db '81A0DB248B0A77AECEC196ACCC52973',0
		align 10h
a3617de4a96262c	db '3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00'
					; DATA XREF: .rdata:1003FAACo
					; .rdata:10047678o
		db 'A60B1CE1D7E819D7A431D7C90EA0E5F',0
		align 8
aAa87ca22be8b05	db 'AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385'
					; DATA XREF: .rdata:1003FAA8o
					; .rdata:10047674o
		db '502F25DBF55296C3A545E3872760AB7',0
		align 10h
aB3312fa7e23ee7	db 'B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC'
					; DATA XREF: .rdata:1003FAA4o
					; .rdata:10047670o
		db '656398D8A2ED19D2A85C8EDD3EC2AEF',0
		align 8
aFfffffffffff_0	db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF'
					; DATA XREF: .rdata:1003FAA0o
					; .rdata:1004766Co
		db 'FFFFFFF0000000000000000FFFFFFFC',0
		align 10h
aFfffffffffff_1	db 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF'
					; DATA XREF: .rdata:1003FA9Co
					; .rdata:10047668o
		db 'FFFFFFF0000000000000000FFFFFFFF',0
		align 4
aNistP384	db 'NIST-P384',0        ; DATA XREF: .rdata:off_1003FA90o
					; .rdata:off_1004765Co
		align 10h
aFfffffff000000	db 'FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551',0
					; DATA XREF: .rdata:1003FA88o
					; .rdata:10047654o
		align 8
a4fe342e2fe1a7f	db '4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5',0
					; DATA XREF: .rdata:1003FA84o
					; .rdata:10047650o
		align 10h
a6b17d1f2e12c42	db '6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296',0
					; DATA XREF: .rdata:1003FA80o
					; .rdata:1004764Co
		align 8
a5ac635d8aa3a93	db '5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B',0
					; DATA XREF: .rdata:1003FA7Co
					; .rdata:10047648o
		align 10h
aFfffffff0000_0	db 'FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC',0
					; DATA XREF: .rdata:1003FA78o
					; .rdata:10047644o
		align 8
aFfffffff0000_1	db 'FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF',0
					; DATA XREF: .rdata:1003FA74o
					; .rdata:10047640o
		align 4
aNistP256	db 'NIST-P256',0        ; DATA XREF: .rdata:off_1003FA68o
					; .rdata:off_10047634o
		align 4
off_1003FA68	dd offset aNistP256	; DATA XREF: .data:1004900Co
					; "NIST-P256"
		dd 0
		dd 100h
		dd offset aFfffffff0000_1 ; "FFFFFFFF0000000100000000000000000000000"...
		dd offset aFfffffff0000_0 ; "FFFFFFFF0000000100000000000000000000000"...
		dd offset a5ac635d8aa3a93 ; "5AC635D8AA3A93E7B3EBBD55769886BC651D06B"...
		dd offset a6b17d1f2e12c42 ; "6B17D1F2E12C4247F8BCE6E563A440F277037D8"...
		dd offset a4fe342e2fe1a7f ; "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE335"...
		dd offset aFfffffff000000 ; "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAA"...
		dd 1
off_1003FA90	dd offset aNistP384	; DATA XREF: .data:10049010o
					; "NIST-P384"
		align 8
		dd 180h
		dd offset aFfffffffffff_1 ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset aFfffffffffff_0 ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset aB3312fa7e23ee7 ; "B3312FA7E23EE7E4988E056BE3F82D19181D9C6"...
		dd offset aAa87ca22be8b05 ; "AA87CA22BE8B05378EB1C71EF320AD746E1D3B6"...
		dd offset a3617de4a96262c ; "3617DE4A96262C6F5D9E98BF9292DC29F8F41DB"...
		dd offset aFfffffffffffff ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd 1
off_1003FAB8	dd offset aNistP521	; DATA XREF: .data:10049014o
					; "NIST-P521"
		align 10h
		dd 209h
		dd offset a01ffffffffff_0 ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset a01ffffffffffff ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset a0051953eb9618e ; "0051953EB9618E1C9A1F929A21A0B68540EEA2D"...
		dd offset a00c6858e06b704 ; "00C6858E06B70404E9CD9E3ECB662395B4429C6"...
		dd offset a011839296a789a ; "011839296A789A3BC0045C8A5FB42C7D1BD998F"...
		dd offset dword_1003F020+2D8h
		dd 1
aGgen		db 'ggen',0             ; DATA XREF: sub_1001AB80+130o
		align 4
dword_1003FAE8	dd 2 dup(0)		; DATA XREF: sub_10020CA0+A7o
					; sub_10020E10+15Do
dword_1003FAF0	dd 6B68632Eh		; DATA XREF: sub_10021440+52r
byte_1003FAF4	db 0			; DATA XREF: sub_10021440+5Br
		align 4
; char Str2[]
Str2		db '.dll',0             ; DATA XREF: sub_10021440+35o
		align 10h
dword_1003FB00	dd 2989A1A8h		; DATA XREF: sub_10021BE0+CEr
					; sub_10021BE0+119r ...
		dd 5858184h, 16C6D2D4h,	13C3D3D0h, 14445054h, 1D0D111Ch
		dd 2C8CA0ACh, 25052124h, 1D4D515Ch, 3434340h, 18081018h
		dd 1E0E121Ch, 11415150h, 3CCCF0FCh, 0ACAC2C8h, 23436360h
		dd 28082028h, 4444044h,	20002020h, 1D8D919Ch, 20C0E0E0h
		dd 22C2E2E0h, 8C8C0C8h,	17071314h, 2585A1A4h, 0F8F838Ch
		dd 3030300h, 3B4B7378h,	3B8BB3B8h, 13031310h, 12C2D2D0h
		dd 2ECEE2ECh, 30407070h, 0C8C808Ch, 3F0F333Ch, 2888A0A8h
		dd 32023230h, 1DCDD1DCh, 36C6F2F4h, 34447074h, 2CCCE0ECh
		dd 15859194h, 0B0B0308h, 17475354h, 1C4C505Ch, 1B4B5358h
		dd 3D8DB1BCh, 1010100h,	24042024h, 1C0C101Ch, 33437370h
		dd 18889098h, 10001010h, 0CCCC0CCh, 32C2F2F0h, 19C9D1D8h
		dd 2C0C202Ch, 27C7E3E4h, 32427270h, 3838380h, 1B8B9398h
		dd 11C1D1D0h, 6868284h,	9C9C1C8h, 20406060h, 10405050h
		dd 2383A3A0h, 2BCBE3E8h, 0D0D010Ch, 3686B2B4h, 1E8E929Ch
		dd 0F4F434Ch, 3787B3B4h, 1A4A5258h, 6C6C2C4h, 38487078h
		dd 2686A2A4h, 12021210h, 2F8FA3ACh, 15C5D1D4h, 21416160h
		dd 3C3C3C0h, 3484B0B4h,	1414140h, 12425250h, 3D4D717Ch
		dd 0D8D818Ch, 8080008h,	1F0F131Ch, 19899198h, 0
		dd 19091118h, 4040004h,	13435350h, 37C7F3F4h, 21C1E1E0h
		dd 3DCDF1FCh, 36467274h, 2F0F232Ch, 27072324h, 3080B0B0h
		dd 0B8B8388h, 0E0E020Ch, 2B8BA3A8h, 2282A2A0h, 2E4E626Ch
		dd 13839390h, 0D4D414Ch, 29496168h, 3C4C707Ch, 9090108h
		dd 0A0A0208h, 3F8FB3BCh, 2FCFE3ECh, 33C3F3F0h, 5C5C1C4h
		dd 7878384h, 14041014h,	3ECEF2FCh, 24446064h, 1ECED2DCh
		dd 2E0E222Ch, 0B4B4348h, 1A0A1218h, 6060204h, 21012120h
		dd 2B4B6368h, 26466264h, 2020200h, 35C5F1F4h, 12829290h
		dd 0A8A8288h, 0C0C000Ch, 3383B3B0h, 3E4E727Ch, 10C0D0D0h
		dd 3A4A7278h, 7474344h,	16869294h, 25C5E1E4h, 26062224h
		dd 808080h, 2D8DA1ACh, 1FCFD3DCh, 2181A1A0h, 30003030h
		dd 37073334h, 2E8EA2ACh, 36063234h, 15051114h, 22022220h
		dd 38083038h, 34C4F0F4h, 2787A3A4h, 5454144h, 0C4C404Ch
		dd 1818180h, 29C9E1E8h,	4848084h, 17879394h, 35053134h
		dd 0BCBC3C8h, 0ECEC2CCh, 3C0C303Ch, 31417170h, 11011110h
		dd 7C7C3C4h, 9898188h, 35457174h, 3BCBF3F8h, 1ACAD2D8h
		dd 38C8F0F8h, 14849094h, 19495158h, 2828280h, 4C4C0C4h
		dd 3FCFF3FCh, 9494148h,	39093138h, 27476364h, 0C0C0C0h
		dd 0FCFC3CCh, 17C7D3D4h, 3888B0B8h, 0F0F030Ch, 0E8E828Ch
		dd 2424240h, 23032320h,	11819190h, 2C4C606Ch, 1BCBD3D8h
		dd 2484A0A4h, 34043034h, 31C1F1F0h, 8484048h, 2C2C2C0h
		dd 2F4F636Ch, 3D0D313Ch, 2D0D212Ch, 404040h, 3E8EB2BCh
		dd 3E0E323Ch, 3C8CB0BCh, 1C1C1C0h, 2A8AA2A8h, 3A8AB2B8h
		dd 0E4E424Ch, 15455154h, 3B0B3338h, 1CCCD0DCh, 28486068h
		dd 3F4F737Ch, 1C8C909Ch, 18C8D0D8h, 0A4A4248h, 16465254h
		dd 37477374h, 2080A0A0h, 2DCDE1ECh, 6464244h, 3585B1B4h
		dd 2B0B2328h, 25456164h, 3ACAF2F8h, 23C3E3E0h, 3989B1B8h
		dd 3181B1B0h, 1F8F939Ch, 1E4E525Ch, 39C9F1F8h, 26C6E2E4h
		dd 3282B2B0h, 31013130h, 2ACAE2E8h, 2D4D616Ch, 1F4F535Ch
		dd 24C4E0E4h, 30C0F0F0h, 0DCDC1CCh, 8888088h, 16061214h
		dd 3A0A3238h, 18485058h, 14C4D0D4h, 22426260h, 29092128h
		dd 7070304h, 33033330h,	28C8E0E8h, 1B0B1318h, 5050104h
		dd 39497178h, 10809090h, 2A4A6268h, 2A0A2228h, 1A8A9298h
dword_1003FF00	dd 38380830h		; DATA XREF: sub_10021BE0+B6r
					; sub_10021BE0+FAr ...
		dd 0E828C8E0h, 2C2D0D21h, 0A42686A2h, 0CC0FCFC3h, 0DC1ECED2h
		dd 0B03383B3h, 0B83888B0h, 0AC2F8FA3h, 60204060h, 54154551h
		dd 0C407C7C3h, 44044440h, 6C2F4F63h, 682B4B63h,	581B4B53h
		dd 0C003C3C3h, 60224262h, 30330333h, 0B43585B1h, 28290921h
		dd 0A02080A0h, 0E022C2E2h, 0A42787A3h, 0D013C3D3h, 90118191h
		dd 10110111h, 4060602h,	1C1C0C10h, 0BC3C8CB0h, 34360632h
		dd 480B4B43h, 0EC2FCFE3h, 88088880h, 6C2C4C60h,	0A82888A0h
		dd 14170713h, 0C404C4C0h, 14160612h, 0F434C4F0h, 0C002C2C2h
		dd 44054541h, 0E021C1E1h, 0D416C6D2h, 3C3F0F33h, 3C3D0D31h
		dd 8C0E8E82h, 98188890h, 28280820h, 4C0E4E42h, 0F436C6F2h
		dd 3C3E0E32h, 0A42585A1h, 0F839C9F1h, 0C0D0D01h, 0DC1FCFD3h
		dd 0D818C8D0h, 282B0B23h, 64264662h, 783A4A72h,	24270723h
		dd 2C2F0F23h, 0F031C1F1h, 70324272h, 40024242h,	0D414C4D0h
		dd 40014141h, 0C000C0C0h, 70334373h, 64274763h,	0AC2C8CA0h
		dd 880B8B83h, 0F437C7F3h, 0AC2D8DA1h, 80008080h, 1C1F0F13h
		dd 0C80ACAC2h, 2C2C0C20h, 0A82A8AA2h, 34340430h, 0D012C2D2h
		dd 80B0B03h, 0EC2ECEE2h, 0E829C9E1h, 5C1D4D51h,	94148490h
		dd 18180810h, 0F838C8F0h, 54174753h, 0AC2E8EA2h, 8080800h
		dd 0C405C5C1h, 10130313h, 0CC0DCDC1h, 84068682h, 0B83989B1h
		dd 0FC3FCFF3h, 7C3D4D71h, 0C001C1C1h, 30310131h, 0F435C5F1h
		dd 880A8A82h, 682A4A62h, 0B03181B1h, 0D011C1D1h, 20200020h
		dd 0D417C7D3h, 20202h, 20220222h, 4040400h, 68284860h
		dd 70314171h, 4070703h,	0D81BCBD3h, 9C1D8D91h, 98198991h
		dd 60214161h, 0BC3E8EB2h, 0E426C6E2h, 58194951h, 0DC1DCDD1h
		dd 50114151h, 90108090h, 0DC1CCCD0h, 981A8A92h,	0A02383A3h
		dd 0A82B8BA3h, 0D010C0D0h, 80018181h, 0C0F0F03h, 44074743h
		dd 181A0A12h, 0E023C3E3h, 0EC2CCCE0h, 8C0D8D81h, 0BC3F8FB3h
		dd 94168692h, 783B4B73h, 5C1C4C50h, 0A02282A2h,	0A02181A1h
		dd 60234363h, 20230323h, 4C0D4D41h, 0C808C8C0h,	9C1E8E92h
		dd 9C1C8C90h, 383A0A32h, 0C0C0C00h, 2C2E0E22h, 0B83A8AB2h
		dd 6C2E4E62h, 9C1F8F93h, 581A4A52h, 0F032C2F2h,	90128292h
		dd 0F033C3F3h, 48094941h, 78384870h, 0CC0CCCC0h, 14150511h
		dd 0F83BCBF3h, 70304070h, 74354571h, 7C3F4F73h,	34350531h
		dd 10100010h, 30303h, 64244460h, 6C2D4D61h, 0C406C6C2h
		dd 74344470h, 0D415C5D1h, 0B43484B0h, 0E82ACAE2h, 8090901h
		dd 74364672h, 18190911h, 0FC3ECEF2h, 40004040h,	10120212h
		dd 0E020C0E0h, 0BC3D8DB1h, 4050501h, 0F83ACAF2h, 10101h
		dd 0F030C0F0h, 282A0A22h, 5C1E4E52h, 0A82989A1h, 54164652h
		dd 40034343h, 84058581h, 14140410h, 88098981h, 981B8B93h
		dd 0B03080B0h, 0E425C5E1h, 48084840h, 78394971h, 94178793h
		dd 0FC3CCCF0h, 1C1E0E12h, 80028282h, 20210121h,	8C0C8C80h
		dd 181B0B13h, 5C1F4F53h, 74374773h, 54144450h, 0B03282B2h
		dd 1C1D0D11h, 24250521h, 4C0F4F43h, 0
		dd 44064642h, 0EC2DCDE1h, 58184850h, 50124252h,	0E82BCBE3h
		dd 7C3E4E72h, 0D81ACAD2h, 0C809C9C1h, 0FC3DCDF1h, 30300030h
		dd 94158591h, 64254561h, 3C3C0C30h, 0B43686B2h,	0E424C4E0h
		dd 0B83B8BB3h, 7C3C4C70h, 0C0E0E02h, 50104050h,	38390931h
		dd 24260622h, 30320232h, 84048480h, 68294961h, 90138393h
		dd 34370733h, 0E427C7E3h, 24240420h, 0A42484A0h, 0C80BCBC3h
		dd 50134353h, 80A0A02h,	84078783h, 0D819C9D1h, 4C0C4C40h
		dd 80038383h, 8C0F8F83h, 0CC0ECEC2h, 383B0B33h,	480A4A42h
		dd 0B43787B3h
dword_10040300	dd 0A1A82989h		; DATA XREF: sub_10021BE0+A4r
					; sub_10021BE0+EDr ...
		dd 81840585h, 0D2D416C6h, 0D3D013C3h, 50541444h, 111C1D0Dh
		dd 0A0AC2C8Ch, 21242505h, 515C1D4Dh, 43400343h,	10181808h
		dd 121C1E0Eh, 51501141h, 0F0FC3CCCh, 0C2C80ACAh, 63602343h
		dd 20282808h, 40440444h, 20202000h, 919C1D8Dh, 0E0E020C0h
		dd 0E2E022C2h, 0C0C808C8h, 13141707h, 0A1A42585h, 838C0F8Fh
		dd 3000303h, 73783B4Bh,	0B3B83B8Bh, 13101303h, 0D2D012C2h
		dd 0E2EC2ECEh, 70703040h, 808C0C8Ch, 333C3F0Fh,	0A0A82888h
		dd 32303202h, 0D1DC1DCDh, 0F2F436C6h, 70743444h, 0E0EC2CCCh
		dd 91941585h, 3080B0Bh,	53541747h, 505C1C4Ch, 53581B4Bh
		dd 0B1BC3D8Dh, 1000101h, 20242404h, 101C1C0Ch, 73703343h
		dd 90981888h, 10101000h, 0C0CC0CCCh, 0F2F032C2h, 0D1D819C9h
		dd 202C2C0Ch, 0E3E427C7h, 72703242h, 83800383h,	93981B8Bh
		dd 0D1D011C1h, 82840686h, 0C1C809C9h, 60602040h, 50501040h
		dd 0A3A02383h, 0E3E82BCBh, 10C0D0Dh, 0B2B43686h, 929C1E8Eh
		dd 434C0F4Fh, 0B3B43787h, 52581A4Ah, 0C2C406C6h, 70783848h
		dd 0A2A42686h, 12101202h, 0A3AC2F8Fh, 0D1D415C5h, 61602141h
		dd 0C3C003C3h, 0B0B43484h, 41400141h, 52501242h, 717C3D4Dh
		dd 818C0D8Dh, 80808h, 131C1F0Fh, 91981989h, 0
		dd 11181909h, 40404h, 53501343h, 0F3F437C7h, 0E1E021C1h
		dd 0F1FC3DCDh, 72743646h, 232C2F0Fh, 23242707h,	0B0B03080h
		dd 83880B8Bh, 20C0E0Eh,	0A3A82B8Bh, 0A2A02282h,	626C2E4Eh
		dd 93901383h, 414C0D4Dh, 61682949h, 707C3C4Ch, 1080909h
		dd 2080A0Ah, 0B3BC3F8Fh, 0E3EC2FCFh, 0F3F033C3h, 0C1C405C5h
		dd 83840787h, 10141404h, 0F2FC3ECEh, 60642444h,	0D2DC1ECEh
		dd 222C2E0Eh, 43480B4Bh, 12181A0Ah, 2040606h, 21202101h
		dd 63682B4Bh, 62642646h, 2000202h, 0F1F435C5h, 92901282h
		dd 82880A8Ah, 0C0C0Ch, 0B3B03383h, 727C3E4Eh, 0D0D010C0h
		dd 72783A4Ah, 43440747h, 92941686h, 0E1E425C5h,	22242606h
		dd 80800080h, 0A1AC2D8Dh, 0D3DC1FCFh, 0A1A02181h, 30303000h
		dd 33343707h, 0A2AC2E8Eh, 32343606h, 11141505h,	22202202h
		dd 30383808h, 0F0F434C4h, 0A3A42787h, 41440545h, 404C0C4Ch
		dd 81800181h, 0E1E829C9h, 80840484h, 93941787h,	31343505h
		dd 0C3C80BCBh, 0C2CC0ECEh, 303C3C0Ch, 71703141h, 11101101h
		dd 0C3C407C7h, 81880989h, 71743545h, 0F3F83BCBh, 0D2D81ACAh
		dd 0F0F838C8h, 90941484h, 51581949h, 82800282h,	0C0C404C4h
		dd 0F3FC3FCFh, 41480949h, 31383909h, 63642747h,	0C0C000C0h
		dd 0C3CC0FCFh, 0D3D417C7h, 0B0B83888h, 30C0F0Fh, 828C0E8Eh
		dd 42400242h, 23202303h, 91901181h, 606C2C4Ch, 0D3D81BCBh
		dd 0A0A42484h, 30343404h, 0F1F031C1h, 40480848h, 0C2C002C2h
		dd 636C2F4Fh, 313C3D0Dh, 212C2D0Dh, 40400040h, 0B2BC3E8Eh
		dd 323C3E0Eh, 0B0BC3C8Ch, 0C1C001C1h, 0A2A82A8Ah, 0B2B83A8Ah
		dd 424C0E4Eh, 51541545h, 33383B0Bh, 0D0DC1CCCh,	60682848h
		dd 737C3F4Fh, 909C1C8Ch, 0D0D818C8h, 42480A4Ah,	52541646h
		dd 73743747h, 0A0A02080h, 0E1EC2DCDh, 42440646h, 0B1B43585h
		dd 23282B0Bh, 61642545h, 0F2F83ACAh, 0E3E023C3h, 0B1B83989h
		dd 0B1B03181h, 939C1F8Fh, 525C1E4Eh, 0F1F839C9h, 0E2E426C6h
		dd 0B2B03282h, 31303101h, 0E2E82ACAh, 616C2D4Dh, 535C1F4Fh
		dd 0E0E424C4h, 0F0F030C0h, 0C1CC0DCDh, 80880888h, 12141606h
		dd 32383A0Ah, 50581848h, 0D0D414C4h, 62602242h,	21282909h
		dd 3040707h, 33303303h,	0E0E828C8h, 13181B0Bh, 1040505h
		dd 71783949h, 90901080h, 62682A4Ah, 22282A0Ah, 92981A8Ah
dword_10040700	dd 8303838h		; DATA XREF: sub_10021BE0+C2r
					; sub_10021BE0+108r ...
		dd 0C8E0E828h, 0D212C2Dh, 86A2A426h, 0CFC3CC0Fh, 0CED2DC1Eh
		dd 83B3B033h, 88B0B838h, 8FA3AC2Fh, 40606020h, 45515415h
		dd 0C7C3C407h, 44404404h, 4F636C2Fh, 4B63682Bh,	4B53581Bh
		dd 0C3C3C003h, 42626022h, 3333033h, 85B1B435h, 9212829h
		dd 80A0A020h, 0C2E2E022h, 87A3A427h, 0C3D3D013h, 81919011h
		dd 1111011h, 6020406h, 0C101C1Ch, 8CB0BC3Ch, 6323436h
		dd 4B43480Bh, 0CFE3EC2Fh, 88808808h, 4C606C2Ch,	88A0A828h
		dd 7131417h, 0C4C0C404h, 6121416h, 0C4F0F434h, 0C2C2C002h
		dd 45414405h, 0C1E1E021h, 0C6D2D416h, 0F333C3Fh, 0D313C3Dh
		dd 8E828C0Eh, 88909818h, 8202828h, 4E424C0Eh, 0C6F2F436h
		dd 0E323C3Eh, 85A1A425h, 0C9F1F839h, 0D010C0Dh,	0CFD3DC1Fh
		dd 0C8D0D818h, 0B23282Bh, 46626426h, 4A72783Ah,	7232427h
		dd 0F232C2Fh, 0C1F1F031h, 42727032h, 42424002h,	0C4D0D414h
		dd 41414001h, 0C0C0C000h, 43737033h, 47636427h,	8CA0AC2Ch
		dd 8B83880Bh, 0C7F3F437h, 8DA1AC2Dh, 80808000h,	0F131C1Fh
		dd 0CAC2C80Ah, 0C202C2Ch, 8AA2A82Ah, 4303434h, 0C2D2D012h
		dd 0B03080Bh, 0CEE2EC2Eh, 0C9E1E829h, 4D515C1Dh, 84909414h
		dd 8101818h, 0C8F0F838h, 47535417h, 8EA2AC2Eh, 8000808h
		dd 0C5C1C405h, 3131013h, 0CDC1CC0Dh, 86828406h,	89B1B839h
		dd 0CFF3FC3Fh, 4D717C3Dh, 0C1C1C001h, 1313031h,	0C5F1F435h
		dd 8A82880Ah, 4A62682Ah, 81B1B031h, 0C1D1D011h,	202020h
		dd 0C7D3D417h, 2020002h, 2222022h, 4000404h, 48606828h
		dd 41717031h, 7030407h,	0CBD3D81Bh, 8D919C1Dh, 89919819h
		dd 41616021h, 8EB2BC3Eh, 0C6E2E426h, 49515819h,	0CDD1DC1Dh
		dd 41515011h, 80909010h, 0CCD0DC1Ch, 8A92981Ah,	83A3A023h
		dd 8BA3A82Bh, 0C0D0D010h, 81818001h, 0F030C0Fh,	47434407h
		dd 0A12181Ah, 0C3E3E023h, 0CCE0EC2Ch, 8D818C0Dh, 8FB3BC3Fh
		dd 86929416h, 4B73783Bh, 4C505C1Ch, 82A2A022h, 81A1A021h
		dd 43636023h, 3232023h,	4D414C0Dh, 0C8C0C808h, 8E929C1Eh
		dd 8C909C1Ch, 0A32383Ah, 0C000C0Ch, 0E222C2Eh, 8AB2B83Ah
		dd 4E626C2Eh, 8F939C1Fh, 4A52581Ah, 0C2F2F032h,	82929012h
		dd 0C3F3F033h, 49414809h, 48707838h, 0CCC0CC0Ch, 5111415h
		dd 0CBF3F83Bh, 40707030h, 45717435h, 4F737C3Fh,	5313435h
		dd 101010h, 3030003h, 44606424h, 4D616C2Dh, 0C6C2C406h
		dd 44707434h, 0C5D1D415h, 84B0B434h, 0CAE2E82Ah, 9010809h
		dd 46727436h, 9111819h,	0CEF2FC3Eh, 40404000h, 2121012h
		dd 0C0E0E020h, 8DB1BC3Dh, 5010405h, 0CAF2F83Ah,	1010001h
		dd 0C0F0F030h, 0A22282Ah, 4E525C1Eh, 89A1A829h,	46525416h
		dd 43434003h, 85818405h, 4101414h, 89818809h, 8B93981Bh
		dd 80B0B030h, 0C5E1E425h, 48404808h, 49717839h,	87939417h
		dd 0CCF0FC3Ch, 0E121C1Eh, 82828002h, 1212021h, 8C808C0Ch
		dd 0B13181Bh, 4F535C1Fh, 47737437h, 44505414h, 82B2B032h
		dd 0D111C1Dh, 5212425h,	4F434C0Fh, 0
		dd 46424406h, 0CDE1EC2Dh, 48505818h, 42525012h,	0CBE3E82Bh
		dd 4E727C3Eh, 0CAD2D81Ah, 0C9C1C809h, 0CDF1FC3Dh, 303030h
		dd 85919415h, 45616425h, 0C303C3Ch, 86B2B436h, 0C4E0E424h
		dd 8BB3B83Bh, 4C707C3Ch, 0E020C0Eh, 40505010h, 9313839h
		dd 6222426h, 2323032h, 84808404h, 49616829h, 83939013h
		dd 7333437h, 0C7E3E427h, 4202424h, 84A0A424h, 0CBC3C80Bh
		dd 43535013h, 0A02080Ah, 87838407h, 0C9D1D819h,	4C404C0Ch
		dd 83838003h, 8F838C0Fh, 0CEC2CC0Eh, 0B33383Bh,	4A42480Ah
		dd 87B3B437h
dword_10040B00	dd 198Eh		; DATA XREF: sub_10019EE0+255r
dword_10040B04	dd 0			; DATA XREF: sub_10019EE0+25Ar
dword_10040B08	dd 2			; DATA XREF: sub_100265D0+2Bo
					; sub_100265D0+41r
dword_10040B0C	dd 3, 5, 7, 0Bh, 0Dh, 11h, 13h,	17h, 1Dh, 1Fh, 25h, 29h
					; DATA XREF: sub_10026630+1C3o
		dd 2Bh,	2Fh, 35h, 3Bh, 3Dh, 43h, 47h, 49h, 4Fh,	53h, 59h
		dd 61h,	65h, 67h, 6Bh, 6Dh, 71h, 7Fh, 83h, 89h,	8Bh, 95h
		dd 97h,	9Dh, 0A3h, 0A7h, 0ADh, 0B3h, 0B5h, 0BFh, 0C1h
		dd 0C5h, 0C7h, 0D3h, 0DFh, 0E3h, 0E5h, 0E9h, 0EFh, 0F1h
		dd 0FBh, 101h, 107h, 10Dh, 10Fh, 115h, 119h, 11Bh, 125h
		dd 133h, 137h, 139h, 13Dh, 14Bh, 151h, 15Bh, 15Dh, 161h
		dd 167h, 16Fh, 175h, 17Bh, 17Fh, 185h, 18Dh, 191h, 199h
		dd 1A3h, 1A5h, 1AFh, 1B1h, 1B7h, 1BBh, 1C1h, 1C9h, 1CDh
		dd 1CFh, 1D3h, 1DFh, 1E7h, 1EBh, 1F3h, 1F7h, 1FDh, 209h
		dd 20Bh, 21Dh, 223h, 22Dh, 233h, 239h, 23Bh, 241h, 24Bh
		dd 251h, 257h, 259h, 25Fh, 265h, 269h, 26Bh, 277h, 281h
		dd 283h, 287h, 28Dh, 293h, 295h, 2A1h, 2A5h, 2ABh, 2B3h
		dd 2BDh, 2C5h, 2CFh, 2D7h, 2DDh, 2E3h, 2E7h, 2EFh, 2F5h
		dd 2F9h, 301h, 305h, 313h, 31Dh, 329h, 32Bh, 335h, 337h
		dd 33Bh, 33Dh, 347h, 355h, 359h, 35Bh, 35Fh, 36Dh, 371h
		dd 373h, 377h, 38Bh, 38Fh, 397h, 3A1h, 3A9h, 3ADh, 3B3h
		dd 3B9h, 3C7h, 3CBh, 3D1h, 3D7h, 3DFh, 3E5h, 3F1h, 3F5h
		dd 3FBh, 3FDh, 407h, 409h, 40Fh, 419h, 41Bh, 425h, 427h
		dd 42Dh, 43Fh, 443h, 445h, 449h, 44Fh, 455h, 45Dh, 463h
		dd 469h, 47Fh, 481h, 48Bh, 493h, 49Dh, 4A3h, 4A9h, 4B1h
		dd 4BDh, 4C1h, 4C7h, 4CDh, 4CFh, 4D5h, 4E1h, 4EBh, 4FDh
		dd 4FFh, 503h, 509h, 50Bh, 511h, 515h, 517h, 51Bh, 527h
		dd 529h, 52Fh, 551h, 557h, 55Dh, 565h, 577h, 581h, 58Fh
		dd 593h, 595h, 599h, 59Fh, 5A7h, 5ABh, 5ADh, 5B3h, 5BFh
		dd 5C9h, 5CBh, 5CFh, 5D1h, 5D5h, 5DBh, 5E7h, 5F3h, 5FBh
		dd 607h, 60Dh, 611h, 617h, 61Fh, 623h, 62Bh, 62Fh, 63Dh
		dd 641h, 647h, 649h, 64Dh, 653h, 655h, 65Bh, 665h, 679h
		dd 67Fh, 683h, 685h, 69Dh, 6A1h, 6A3h, 6ADh, 6B9h, 6BBh
		dd 6C5h, 6CDh, 6D3h, 6D9h, 6DFh, 6F1h, 6F7h, 6FBh, 6FDh
		dd 709h, 713h, 71Fh, 727h, 737h, 745h, 74Bh, 74Fh, 751h
		dd 755h, 757h, 761h, 76Dh, 773h, 779h, 78Bh, 78Dh, 79Dh
		dd 79Fh, 7B5h, 7BBh, 7C3h, 7C9h, 7CDh, 7CFh, 7D3h, 7DBh
		dd 7E1h, 7EBh, 7EDh, 7F7h, 805h, 80Fh, 815h, 821h, 823h
		dd 827h, 829h, 833h, 83Fh, 841h, 851h, 853h, 859h, 85Dh
		dd 85Fh, 869h, 871h, 883h, 89Bh, 89Fh, 8A5h, 8ADh, 8BDh
		dd 8BFh, 8C3h, 8CBh, 8DBh, 8DDh, 8E1h, 8E9h, 8EFh, 8F5h
		dd 8F9h, 905h, 907h, 91Dh, 923h, 925h, 92Bh, 92Fh, 935h
		dd 943h, 949h, 94Dh, 94Fh, 955h, 959h, 95Fh, 96Bh, 971h
		dd 977h, 985h, 989h, 98Fh, 99Bh, 9A3h, 9A9h, 9ADh, 9C7h
		dd 9D9h, 9E3h, 9EBh, 9EFh, 9F5h, 9F7h, 9FDh, 0A13h, 0A1Fh
		dd 0A21h, 0A31h, 0A39h,	0A3Dh, 0A49h, 0A57h, 0A61h, 0A63h
		dd 0A67h, 0A6Fh, 0A75h,	0A7Bh, 0A7Fh, 0A81h, 0A85h, 0A8Bh
		dd 0A93h, 0A97h, 0A99h,	0A9Fh, 0AA9h, 0AABh, 0AB5h, 0ABDh
		dd 0AC1h, 0ACFh, 0AD9h,	0AE5h, 0AE7h, 0AEDh, 0AF1h, 0AF3h
		dd 0B03h, 0B11h, 0B15h,	0B1Bh, 0B23h, 0B29h, 0B2Dh, 0B3Fh
		dd 0B47h, 0B51h, 0B57h,	0B5Dh, 0B65h, 0B6Fh, 0B7Bh, 0B89h
		dd 0B8Dh, 0B93h, 0B99h,	0B9Bh, 0BB7h, 0BB9h, 0BC3h, 0BCBh
		dd 0BCFh, 0BDDh, 0BE1h,	0BE9h, 0BF5h, 0BFBh, 0C07h, 0C0Bh
		dd 0C11h, 0C25h, 0C2Fh,	0C31h, 0C41h, 0C5Bh, 0C5Fh, 0C61h
		dd 0C6Dh, 0C73h, 0C77h,	0C83h, 0C89h, 0C91h, 0C95h, 0C9Dh
		dd 0CB3h, 0CB5h, 0CB9h,	0CBBh, 0CC7h, 0CE3h, 0CE5h, 0CEBh
		dd 0CF1h, 0CF7h, 0CFBh,	0D01h, 0D03h, 0D0Fh, 0D13h, 0D1Fh
		dd 0D21h, 0D2Bh, 0D2Dh,	0D3Dh, 0D3Fh, 0D4Fh, 0D55h, 0D69h
		dd 0D79h, 0D81h, 0D85h,	0D87h, 0D8Bh, 0D8Dh, 0DA3h, 0DABh
		dd 0DB7h, 0DBDh, 0DC7h,	0DC9h, 0DCDh, 0DD3h, 0DD5h, 0DDBh
		dd 0DE5h, 0DE7h, 0DF3h,	0DFDh, 0DFFh, 0E09h, 0E17h, 0E1Dh
		dd 0E21h, 0E27h, 0E2Fh,	0E35h, 0E3Bh, 0E4Bh, 0E57h, 0E59h
		dd 0E5Dh, 0E6Bh, 0E71h,	0E75h, 0E7Dh, 0E87h, 0E8Fh, 0E95h
		dd 0E9Bh, 0EB1h, 0EB7h,	0EB9h, 0EC3h, 0ED1h, 0ED5h, 0EDBh
		dd 0EEDh, 0EEFh, 0EF9h,	0F07h, 0F0Bh, 0F0Dh, 0F17h, 0F25h
		dd 0F29h, 0F31h, 0F43h,	0F47h, 0F4Dh, 0F4Fh, 0F53h, 0F59h
		dd 0F5Bh, 0F67h, 0F6Bh,	0F7Fh, 0F95h, 0FA1h, 0FA3h, 0FA7h
		dd 0FADh, 0FB3h, 0FB5h,	0FBBh, 0FD1h, 0FD3h, 0FD9h, 0FE9h
		dd 0FEFh, 0FFBh, 0FFDh,	1003h, 100Fh, 101Fh, 1021h, 1025h
		dd 102Bh, 1039h, 103Dh,	103Fh, 1051h, 1069h, 1073h, 1079h
		dd 107Bh, 1085h, 1087h,	1091h, 1093h, 109Dh, 10A3h, 10A5h
		dd 10AFh, 10B1h, 10BBh,	10C1h, 10C9h, 10E7h, 10F1h, 10F3h
		dd 10FDh, 1105h, 110Bh,	1115h, 1127h, 112Dh, 1139h, 1145h
		dd 1147h, 1159h, 115Fh,	1163h, 1169h, 116Fh, 1181h, 1183h
		dd 118Dh, 119Bh, 11A1h,	11A5h, 11A7h, 11ABh, 11C3h, 11C5h
		dd 11D1h, 11D7h, 11E7h,	11EFh, 11F5h, 11FBh, 120Dh, 121Dh
		dd 121Fh, 1223h, 1229h,	122Bh, 1231h, 1237h, 1241h, 1247h
		dd 1253h, 125Fh, 1271h,	1273h, 1279h, 127Dh, 128Fh, 1297h
		dd 12AFh, 12B3h, 12B5h,	12B9h, 12BFh, 12C1h, 12CDh, 12D1h
		dd 12DFh, 12FDh, 1307h,	130Dh, 1319h, 1327h, 132Dh, 1337h
		dd 1343h, 1345h, 1349h,	134Fh, 1357h, 135Dh, 1367h, 1369h
		dd 136Dh, 137Bh, 1381h,	1387h, 138Bh, 1391h, 1393h, 139Dh
		dd 139Fh, 13AFh, 13BBh,	13C3h, 13D5h, 13D9h, 13DFh, 13EBh
		dd 13EDh, 13F3h, 13F9h,	13FFh, 141Bh, 1421h, 142Fh, 1433h
		dd 143Bh, 1445h, 144Dh,	1459h, 146Bh, 146Fh, 1471h, 1475h
		dd 148Dh, 1499h, 149Fh,	14A1h, 14B1h, 14B7h, 14BDh, 14CBh
		dd 14D5h, 14E3h, 14E7h,	1505h, 150Bh, 1511h, 1517h, 151Fh
		dd 1525h, 1529h, 152Bh,	1537h, 153Dh, 1541h, 1543h, 1549h
		dd 155Fh, 1565h, 1567h,	156Bh, 157Dh, 157Fh, 1583h, 158Fh
		dd 1591h, 1597h, 159Bh,	15B5h, 15BBh, 15C1h, 15C5h, 15CDh
		dd 15D7h, 15F7h, 1607h,	1609h, 160Fh, 1613h, 1615h, 1619h
		dd 161Bh, 1625h, 1633h,	1639h, 163Dh, 1645h, 164Fh, 1655h
		dd 1669h, 166Dh, 166Fh,	1675h, 1693h, 1697h, 169Fh, 16A9h
		dd 16AFh, 16B5h, 16BDh,	16C3h, 16CFh, 16D3h, 16D9h, 16DBh
		dd 16E1h, 16E5h, 16EBh,	16EDh, 16F7h, 16F9h, 1709h, 170Fh
		dd 1723h, 1727h, 1733h,	1741h, 175Dh, 1763h, 1777h, 177Bh
		dd 178Dh, 1795h, 179Bh,	179Fh, 17A5h, 17B3h, 17B9h, 17BFh
		dd 17C9h, 17CBh, 17D5h,	17E1h, 17E9h, 17F3h, 17F5h, 17FFh
		dd 1807h, 1813h, 181Dh,	1835h, 1837h, 183Bh, 1843h, 1849h
		dd 184Dh, 1855h, 1867h,	1871h, 1877h, 187Dh, 187Fh, 1885h
		dd 188Fh, 189Bh, 189Dh,	18A7h, 18ADh, 18B3h, 18B9h, 18C1h
		dd 18C7h, 18D1h, 18D7h,	18D9h, 18DFh, 18E5h, 18EBh, 18F5h
		dd 18FDh, 1915h, 191Bh,	1931h, 1933h, 1945h, 1949h, 1951h
		dd 195Bh, 1979h, 1981h,	1993h, 1997h, 1999h, 19A3h, 19A9h
		dd 19ABh, 19B1h, 19B5h,	19C7h, 19CFh, 19DBh, 19EDh, 19FDh
		dd 1A03h, 1A05h, 1A11h,	1A17h, 1A21h, 1A23h, 1A2Dh, 1A2Fh
		dd 1A35h, 1A3Fh, 1A4Dh,	1A51h, 1A69h, 1A6Bh, 1A7Bh, 1A7Dh
		dd 1A87h, 1A89h, 1A93h,	1AA7h, 1AABh, 1AADh, 1AB1h, 1AB9h
		dd 1AC9h, 1ACFh, 1AD5h,	1AD7h, 1AE3h, 1AF3h, 1AFBh, 1AFFh
		dd 1B05h, 1B23h, 1B25h,	1B2Fh, 1B31h, 1B37h, 1B3Bh, 1B41h
		dd 1B47h, 1B4Fh, 1B55h,	1B59h, 1B65h, 1B6Bh, 1B73h, 1B7Fh
		dd 1B83h, 1B91h, 1B9Dh,	1BA7h, 1BBFh, 1BC5h, 1BD1h, 1BD7h
		dd 1BD9h, 1BEFh, 1BF7h,	1C09h, 1C13h, 1C19h, 1C27h, 1C2Bh
		dd 1C2Dh, 1C33h, 1C3Dh,	1C45h, 1C4Bh, 1C4Fh, 1C55h, 1C73h
		dd 1C81h, 1C8Bh, 1C8Dh,	1C99h, 1CA3h, 1CA5h, 1CB5h, 1CB7h
		dd 1CC9h, 1CE1h, 1CF3h,	1CF9h, 1D09h, 1D1Bh, 1D21h, 1D23h
		dd 1D35h, 1D39h, 1D3Fh,	1D41h, 1D4Bh, 1D53h, 1D5Dh, 1D63h
		dd 1D69h, 1D71h, 1D75h,	1D7Bh, 1D7Dh, 1D87h, 1D89h, 1D95h
		dd 1D99h, 1D9Fh, 1DA5h,	1DA7h, 1DB3h, 1DB7h, 1DC5h, 1DD7h
		dd 1DDBh, 1DE1h, 1DF5h,	1DF9h, 1E01h, 1E07h, 1E0Bh, 1E13h
		dd 1E17h, 1E25h, 1E2Bh,	1E2Fh, 1E3Dh, 1E49h, 1E4Dh, 1E4Fh
		dd 1E6Dh, 1E71h, 1E89h,	1E8Fh, 1E95h, 1EA1h, 1EADh, 1EBBh
		dd 1EC1h, 1EC5h, 1EC7h,	1ECBh, 1EDDh, 1EE3h, 1EEFh, 1EF7h
		dd 1EFDh, 1F01h, 1F0Dh,	1F0Fh, 1F1Bh, 1F39h, 1F49h, 1F4Bh
		dd 1F51h, 1F67h, 1F75h,	1F7Bh, 1F85h, 1F91h, 1F97h, 1F99h
		dd 1F9Dh, 1FA5h, 1FAFh,	1FB5h, 1FBBh, 1FD3h, 1FE1h, 1FE7h
		dd 1FEBh, 1FF3h, 1FFFh,	2011h, 201Bh, 201Dh, 2027h, 2029h
		dd 202Dh, 2033h, 2047h,	204Dh, 2051h, 205Fh, 2063h, 2065h
		dd 2069h, 2077h, 207Dh,	2089h, 20A1h, 20ABh, 20B1h, 20B9h
		dd 20C3h, 20C5h, 20E3h,	20E7h, 20EDh, 20EFh, 20FBh, 20FFh
		dd 210Dh, 2113h, 2135h,	2141h, 2149h, 214Fh, 2159h, 215Bh
		dd 215Fh, 2173h, 217Dh,	2185h, 2195h, 2197h, 21A1h, 21AFh
		dd 21B3h, 21B5h, 21C1h,	21C7h, 21D7h, 21DDh, 21E5h, 21E9h
		dd 21F1h, 21F5h, 21FBh,	2203h, 2209h, 220Fh, 221Bh, 2221h
		dd 2225h, 222Bh, 2231h,	2239h, 224Bh, 224Fh, 2263h, 2267h
		dd 2273h, 2275h, 227Fh,	2285h, 2287h, 2291h, 229Dh, 229Fh
		dd 22A3h, 22B7h, 22BDh,	22DBh, 22E1h, 22E5h, 22EDh, 22F7h
		dd 2303h, 2309h, 230Bh,	2327h, 2329h, 232Fh, 2333h, 2335h
		dd 2345h, 2351h, 2353h,	2359h, 2363h, 236Bh, 2383h, 238Fh
		dd 2395h, 23A7h, 23ADh,	23B1h, 23BFh, 23C5h, 23C9h, 23D5h
		dd 23DDh, 23E3h, 23EFh,	23F3h, 23F9h, 2405h, 240Bh, 2417h
		dd 2419h, 2429h, 243Dh,	2441h, 2443h, 244Dh, 245Fh, 2467h
		dd 246Bh, 2479h, 247Dh,	247Fh, 2485h, 249Bh, 24A1h, 24AFh
		dd 24B5h, 24BBh, 24C5h,	24CBh, 24CDh, 24D7h, 24D9h, 24DDh
		dd 24DFh, 24F5h, 24F7h,	24FBh, 2501h, 2507h, 2513h, 2519h
		dd 2527h, 2531h, 253Dh,	2543h, 254Bh, 254Fh, 2573h, 2581h
		dd 258Dh, 2593h, 2597h,	259Dh, 259Fh, 25ABh, 25B1h, 25BDh
		dd 25CDh, 25CFh, 25D9h,	25E1h, 25F7h, 25F9h, 2605h, 260Bh
		dd 260Fh, 2615h, 2627h,	2629h, 2635h, 263Bh, 263Fh, 264Bh
		dd 2653h, 2659h, 2665h,	2669h, 266Fh, 267Bh, 2681h, 2683h
		dd 268Fh, 269Bh, 269Fh,	26ADh, 26B3h, 26C3h, 26C9h, 26CBh
		dd 26D5h, 26DDh, 26EFh,	26F5h, 2717h, 2719h, 2735h, 2737h
		dd 274Dh, 2753h, 2755h,	275Fh, 276Bh, 276Dh, 2773h, 2777h
		dd 277Fh, 2795h, 279Bh,	279Dh, 27A7h, 27AFh, 27B3h, 27B9h
		dd 27C1h, 27C5h, 27D1h,	27E3h, 27EFh, 2803h, 2807h, 280Dh
		dd 2813h, 281Bh, 281Fh,	2821h, 2831h, 283Dh, 283Fh, 2849h
		dd 2851h, 285Bh, 285Dh,	2861h, 2867h, 2875h, 2881h, 2897h
		dd 289Fh, 28BBh, 28BDh,	28C1h, 28D5h, 28D9h, 28DBh, 28DFh
		dd 28EDh, 28F7h, 2903h,	2905h, 2911h, 2921h, 2923h, 293Fh
		dd 2947h, 295Dh, 2965h,	2969h, 296Fh, 2975h, 2983h, 2987h
		dd 298Fh, 299Bh, 29A1h,	29A7h, 29ABh, 29BFh, 29C3h, 29D5h
		dd 29D7h, 29E3h, 29E9h,	29EDh, 29F3h, 2A01h, 2A13h, 2A1Dh
		dd 2A25h, 2A2Fh, 2A4Fh,	2A55h, 2A5Fh, 2A65h, 2A6Bh, 2A6Dh
		dd 2A73h, 2A83h, 2A89h,	2A8Bh, 2A97h, 2A9Dh, 2AB9h, 2ABBh
		dd 2AC5h, 2ACDh, 2ADDh,	2AE3h, 2AEBh, 2AF1h, 2AFBh, 2B13h
		dd 2B27h, 2B31h, 2B33h,	2B3Dh, 2B3Fh, 2B4Bh, 2B4Fh, 2B55h
		dd 2B69h, 2B6Dh, 2B6Fh,	2B7Bh, 2B8Dh, 2B97h, 2B99h, 2BA3h
		dd 2BA5h, 2BA9h, 2BBDh,	2BCDh, 2BE7h, 2BEBh, 2BF3h, 2BF9h
		dd 2BFDh, 2C09h, 2C0Fh,	2C17h, 2C23h, 2C2Fh, 2C35h, 2C39h
		dd 2C41h, 2C57h, 2C59h,	2C69h, 2C77h, 2C81h, 2C87h, 2C93h
		dd 2C9Fh, 2CADh, 2CB3h,	2CB7h, 2CCBh, 2CCFh, 2CDBh, 2CE1h
		dd 2CE3h, 2CE9h, 2CEFh,	2CFFh, 2D07h, 2D1Dh, 2D1Fh, 2D3Bh
		dd 2D43h, 2D49h, 2D4Dh,	2D61h, 2D65h, 2D71h, 2D89h, 2D9Dh
		dd 2DA1h, 2DA9h, 2DB3h,	2DB5h, 2DC5h, 2DC7h, 2DD3h, 2DDFh
		dd 2E01h, 2E03h, 2E07h,	2E0Dh, 2E19h, 2E1Fh, 2E25h, 2E2Dh
		dd 2E33h, 2E37h, 2E39h,	2E3Fh, 2E57h, 2E5Bh, 2E6Fh, 2E79h
		dd 2E7Fh, 2E85h, 2E93h,	2E97h, 2E9Dh, 2EA3h, 2EA5h, 2EB1h
		dd 2EB7h, 2EC1h, 2EC3h,	2ECDh, 2ED3h, 2EE7h, 2EEBh, 2F05h
		dd 2F09h, 2F0Bh, 2F11h,	2F27h, 2F29h, 2F41h, 2F45h, 2F4Bh
		dd 2F4Dh, 2F51h, 2F57h,	2F6Fh, 2F75h, 2F7Dh, 2F81h, 2F83h
		dd 2FA5h, 2FABh, 2FB3h,	2FC3h, 2FCFh, 2FD1h, 2FDBh, 2FDDh
		dd 2FE7h, 2FEDh, 2FF5h,	2FF9h, 3001h, 300Dh, 3023h, 3029h
		dd 3037h, 303Bh, 3055h,	3059h, 305Bh, 3067h, 3071h, 3079h
		dd 307Dh, 3085h, 3091h,	3095h, 30A3h, 30A9h, 30B9h, 30BFh
		dd 30C7h, 30CBh, 30D1h,	30D7h, 30DFh, 30E5h, 30EFh, 30FBh
		dd 30FDh, 3103h, 3109h,	3119h, 3121h, 3127h, 312Dh, 3139h
		dd 3143h, 3145h, 314Bh,	315Dh, 3161h, 3167h, 316Dh, 3173h
		dd 317Fh, 3191h, 3199h,	319Fh, 31A9h, 31B1h, 31C3h, 31C7h
		dd 31D5h, 31DBh, 31EDh,	31F7h, 31FFh, 3209h, 3215h, 3217h
		dd 321Dh, 3229h, 3235h,	3259h, 325Dh, 3263h, 326Bh, 326Fh
		dd 3275h, 3277h, 327Bh,	328Dh, 3299h, 329Fh, 32A7h, 32ADh
		dd 32B3h, 32B7h, 32C9h,	32CBh, 32CFh, 32D1h, 32E9h, 32EDh
		dd 32F3h, 32F9h, 3307h,	3325h, 332Bh, 332Fh, 3335h, 3341h
		dd 3347h, 335Bh, 335Fh,	3367h, 336Bh, 3373h, 3379h, 337Fh
		dd 3383h, 33A1h, 33A3h,	33ADh, 33B9h, 33C1h, 33CBh, 33D3h
		dd 33EBh, 33F1h, 33FDh,	3401h, 340Fh, 3413h, 3419h, 341Bh
		dd 3437h, 3445h, 3455h,	3457h, 3463h, 3469h, 346Dh, 3481h
		dd 348Bh, 3491h, 3497h,	349Dh, 34A5h, 34AFh, 34BBh, 34C9h
		dd 34D3h, 34E1h, 34F1h,	34FFh, 3509h, 3517h, 351Dh, 352Dh
		dd 3533h, 353Bh, 3541h,	3551h, 3565h, 356Fh, 3571h, 3577h
		dd 357Bh, 357Dh, 3581h,	358Dh, 358Fh, 3599h, 359Bh, 35A1h
		dd 35B7h, 35BDh, 35BFh,	35C3h, 35D5h, 35DDh, 35E7h, 35EFh
		dd 3605h, 3607h, 3611h,	3623h, 3631h, 3635h, 3637h, 363Bh
		dd 364Dh, 364Fh, 3653h,	3659h, 3661h, 366Bh, 366Dh, 368Bh
		dd 368Fh, 36ADh, 36AFh,	36B9h, 36BBh, 36CDh, 36D1h, 36E3h
		dd 36E9h, 36F7h, 3701h,	3703h, 3707h, 371Bh, 373Fh, 3745h
		dd 3749h, 374Fh, 375Dh,	3761h, 3775h, 377Fh, 378Dh, 37A3h
		dd 37A9h, 37ABh, 37C9h,	37D5h, 37DFh, 37F1h, 37F3h, 37F7h
		dd 3805h, 380Bh, 3821h,	3833h, 3835h, 3841h, 3847h, 384Bh
		dd 3853h, 3857h, 385Fh,	3865h, 386Fh, 3871h, 387Dh, 388Fh
		dd 3899h, 38A7h, 38B7h,	38C5h, 38C9h, 38CFh, 38D5h, 38D7h
		dd 38DDh, 38E1h, 38E3h,	38FFh, 3901h, 391Dh, 3923h, 3925h
		dd 3929h, 392Fh, 393Dh,	3941h, 394Dh, 395Bh, 396Bh, 3979h
		dd 397Dh, 3983h, 398Bh,	3991h, 3995h, 399Bh, 39A1h, 39A7h
		dd 39AFh, 39B3h, 39BBh,	39BFh, 39CDh, 39DDh, 39E5h, 39EBh
		dd 39EFh, 39FBh, 3A03h,	3A13h, 3A15h, 3A1Fh, 3A27h, 3A2Bh
		dd 3A31h, 3A4Bh, 3A51h,	3A5Bh, 3A63h, 3A67h, 3A6Dh, 3A79h
		dd 3A87h, 3AA5h, 3AA9h,	3AB7h, 3ACDh, 3AD5h, 3AE1h, 3AE5h
		dd 3AEBh, 3AF3h, 3AFDh,	3B03h, 3B11h, 3B1Bh, 3B21h, 3B23h
		dd 3B2Dh, 3B39h, 3B45h,	3B53h, 3B59h, 3B5Fh, 3B71h, 3B7Bh
		dd 3B81h, 3B89h, 3B9Bh,	3B9Fh, 3BA5h, 3BA7h, 3BADh, 3BB7h
		dd 3BB9h, 3BC3h, 3BCBh,	3BD1h, 3BD7h, 3BE1h, 3BE3h, 3BF5h
		dd 3BFFh, 3C01h, 3C0Dh,	3C11h, 3C17h, 3C1Fh, 3C29h, 3C35h
		dd 3C43h, 3C4Fh, 3C53h,	3C5Bh, 3C65h, 3C6Bh, 3C71h, 3C85h
		dd 3C89h, 3C97h, 3CA7h,	3CB5h, 3CBFh, 3CC7h, 3CD1h, 3CDDh
		dd 3CDFh, 3CF1h, 3CF7h,	3D03h, 3D0Dh, 3D19h, 3D1Bh, 3D1Fh
		dd 3D21h, 3D2Dh, 3D33h,	3D37h, 3D3Fh, 3D43h, 3D6Fh, 3D73h
		dd 3D75h, 3D79h, 3D7Bh,	3D85h, 3D91h, 3D97h, 3D9Dh, 3DABh
		dd 3DAFh, 3DB5h, 3DBBh,	3DC1h, 3DC9h, 3DCFh, 3DF3h, 3E05h
		dd 3E09h, 3E0Fh, 3E11h,	3E1Dh, 3E23h, 3E29h, 3E2Fh, 3E33h
		dd 3E41h, 3E57h, 3E63h,	3E65h, 3E77h, 3E81h, 3E87h, 3EA1h
		dd 3EB9h, 3EBDh, 3EBFh,	3EC3h, 3EC5h, 3EC9h, 3ED7h, 3EDBh
		dd 3EE1h, 3EE7h, 3EEFh,	3EFFh, 3F0Bh, 3F0Dh, 3F37h, 3F3Bh
		dd 3F3Dh, 3F41h, 3F59h,	3F5Fh, 3F65h, 3F67h, 3F79h, 3F7Dh
		dd 3F8Bh, 3F91h, 3FADh,	3FBFh, 3FCDh, 3FD3h, 3FDDh, 3FE9h
		dd 3FEBh, 3FF1h, 3FFDh,	401Bh, 4021h, 4025h, 402Bh, 4031h
		dd 403Fh, 4043h, 4045h,	405Dh, 4061h, 4067h, 406Dh, 4087h
		dd 4091h, 40A3h, 40A9h,	40B1h, 40B7h, 40BDh, 40DBh, 40DFh
		dd 40EBh, 40F7h, 40F9h,	4109h, 410Bh, 4111h, 4115h, 4121h
		dd 4133h, 4135h, 413Bh,	413Fh, 4159h, 4165h, 416Bh, 4177h
		dd 417Bh, 4193h, 41ABh,	41B7h, 41BDh, 41BFh, 41CBh, 41E7h
		dd 41EFh, 41F3h, 41F9h,	4205h, 4207h, 4219h, 421Fh, 4223h
		dd 4229h, 422Fh, 4243h,	4253h, 4255h, 425Bh, 4261h, 4273h
		dd 427Dh, 4283h, 4285h,	4289h, 4291h, 4297h, 429Dh, 42B5h
		dd 42C5h, 42CBh, 42D3h,	42DDh, 42E3h, 42F1h, 4307h, 430Fh
		dd 431Fh, 4325h, 4327h,	4333h, 4337h, 4339h, 434Fh, 4357h
		dd 4369h, 438Bh, 438Dh,	4393h, 43A5h, 43A9h, 43AFh, 43B5h
		dd 43BDh, 43C7h, 43CFh,	43E1h, 43E7h, 43EBh, 43EDh, 43F1h
		dd 43F9h, 4409h, 440Bh,	4417h, 4423h, 4429h, 443Bh, 443Fh
		dd 4445h, 444Bh, 4451h,	4453h, 4459h, 4465h, 446Fh, 4483h
		dd 448Fh, 44A1h, 44A5h,	44ABh, 44ADh, 44BDh, 44BFh, 44C9h
		dd 44D7h, 44DBh, 44F9h,	44FBh, 4505h, 4511h, 4513h, 452Bh
		dd 4531h, 4541h, 4549h,	4553h, 4555h, 4561h, 4577h, 457Dh
		dd 457Fh, 458Fh, 45A3h,	45ADh, 45AFh, 45BBh, 45C7h, 45D9h
		dd 45E3h, 45EFh, 45F5h,	45F7h, 4601h, 4603h, 4609h, 4613h
		dd 4625h, 4627h, 4633h,	4639h, 463Dh, 4643h, 4645h, 465Dh
		dd 4679h, 467Bh, 467Fh,	4681h, 468Bh, 468Dh, 469Dh, 46A9h
		dd 46B1h, 46C7h, 46C9h,	46CFh, 46D3h, 46D5h, 46DFh, 46E5h
		dd 46F9h, 4705h, 470Fh,	4717h, 4723h, 4729h, 472Fh, 4735h
		dd 4739h, 474Bh, 474Dh,	4751h, 475Dh, 476Fh, 4771h, 477Dh
		dd 4783h, 4787h, 4789h,	4799h, 47A5h, 47B1h, 47BFh, 47C3h
		dd 47CBh, 47DDh, 47E1h,	47EDh, 47FBh, 4801h, 4807h, 480Bh
		dd 4813h, 4819h, 481Dh,	4831h, 483Dh, 4847h, 4855h, 4859h
		dd 485Bh, 486Bh, 486Dh,	4879h, 4897h, 489Bh, 48A1h, 48B9h
		dd 48CDh, 48E5h, 48EFh,	48F7h, 4903h, 490Dh, 4919h, 491Fh
		dd 492Bh, 4937h, 493Dh,	4945h, 4955h, 4963h, 4969h, 496Dh
		dd 4973h, 4997h, 49ABh,	49B5h, 49D3h, 49DFh, 49E1h, 49E5h
		dd 49E7h, 4A03h, 4A0Fh,	4A1Dh, 4A23h, 4A39h, 4A41h, 4A45h
		dd 4A57h, 4A5Dh, 4A6Bh,	4A7Dh, 4A81h, 4A87h, 4A89h, 4A8Fh
		dd 4AB1h, 4AC3h, 4AC5h,	4AD5h, 4ADBh, 4AEDh, 4AEFh, 4B07h
		dd 4B0Bh, 4B0Dh, 4B13h,	4B1Fh, 4B25h, 4B31h, 4B3Bh, 4B43h
		dd 4B49h, 4B59h, 4B65h,	4B6Dh, 4B77h, 4B85h, 4BADh, 4BB3h
		dd 4BB5h, 4BBBh, 4BBFh,	4BCBh, 4BD9h, 4BDDh, 4BDFh, 4BE3h
		dd 4BE5h, 4BE9h, 4BF1h,	4BF7h, 4C01h, 4C07h, 4C0Dh, 4C0Fh
		dd 4C15h, 4C1Bh, 4C21h,	4C2Dh, 4C33h, 4C4Bh, 4C55h, 4C57h
		dd 4C61h, 4C67h, 4C73h,	4C79h, 4C7Fh, 4C8Dh, 4C93h, 4C99h
		dd 4CCDh, 4CE1h, 4CE7h,	4CF1h, 4CF3h, 4CFDh, 4D05h, 4D0Fh
		dd 4D1Bh, 4D27h, 4D29h,	4D2Fh, 4D33h, 4D41h, 4D51h, 4D59h
		dd 4D65h, 4D6Bh, 4D81h,	4D83h, 4D8Dh, 4D95h, 4D9Bh, 4DB1h
		dd 4DB3h, 4DC9h, 4DCFh,	4DD7h, 4DE1h, 4DEDh, 4DF9h, 4DFBh
		dd 4E05h, 4E0Bh, 4E17h,	4E19h, 4E1Dh, 4E2Bh, 4E35h, 4E37h
		dd 4E3Dh, 4E4Fh, 4E53h,	4E5Fh, 4E67h, 4E79h, 4E85h, 4E8Bh
		dd 4E91h, 4E95h, 4E9Bh,	4EA1h, 4EAFh, 4EB3h, 4EB5h, 4EC1h
		dd 4ECDh, 4ED1h, 4ED7h,	4EE9h, 4EFBh, 4F07h, 4F09h, 4F19h
		dd 4F25h, 4F2Dh, 4F3Fh,	4F49h, 4F63h, 4F67h, 4F6Dh, 4F75h
		dd 4F7Bh, 4F81h, 4F85h,	4F87h, 4F91h, 4FA5h, 4FA9h, 4FAFh
		dd 4FB7h, 4FBBh, 4FCFh,	4FD9h, 4FDBh, 4FFDh, 4FFFh, 5003h
		dd 501Bh, 501Dh, 5029h,	5035h, 503Fh, 5045h, 5047h, 5053h
		dd 5071h, 5077h, 5083h,	5093h, 509Fh, 50A1h, 50B7h, 50C9h
		dd 50D5h, 50E3h, 50EDh,	50EFh, 50FBh, 5107h, 510Bh, 510Dh
		dd 5111h, 5117h, 5123h,	5125h, 5135h, 5147h, 5149h, 5171h
		dd 5179h, 5189h, 518Fh,	5197h, 51A1h, 51A3h, 51A7h, 51B9h
		dd 51C1h, 51CBh, 51D3h,	51DFh, 51E3h, 51F5h, 51F7h, 5209h
		dd 5213h, 5215h, 5219h,	521Bh, 521Fh, 5227h, 5243h, 5245h
		dd 524Bh, 5261h, 526Dh,	5273h, 5281h, 5293h, 5297h, 529Dh
		dd 52A5h, 52ABh, 52B1h,	52BBh, 52C3h, 52C7h, 52C9h, 52DBh
		dd 52E5h, 52EBh, 52FFh,	5315h, 531Dh, 5323h, 5341h, 5345h
		dd 5347h, 534Bh, 535Dh,	5363h, 5381h, 5383h, 5387h, 538Fh
		dd 5395h, 5399h, 539Fh,	53ABh, 53B9h, 53DBh, 53E9h, 53EFh
		dd 53F3h, 53F5h, 53FBh,	53FFh, 540Dh, 5411h, 5413h, 5419h
		dd 5435h, 5437h, 543Bh,	5441h, 5449h, 5453h, 5455h, 545Fh
		dd 5461h, 546Bh, 546Dh,	5471h, 548Fh, 5491h, 549Dh, 54A9h
		dd 54B3h, 54C5h, 54D1h,	54DFh, 54E9h, 54EBh, 54F7h, 54FDh
		dd 5507h, 550Dh, 551Bh,	5527h, 552Bh, 5539h, 553Dh, 554Fh
		dd 5551h, 555Bh, 5563h,	5567h, 556Fh, 5579h, 5585h, 5597h
		dd 55A9h, 55B1h, 55B7h,	55C9h, 55D9h, 55E7h, 55EDh, 55F3h
		dd 55FDh, 560Bh, 560Fh,	5615h, 5617h, 5623h, 562Fh, 5633h
		dd 5639h, 563Fh, 564Bh,	564Dh, 565Dh, 565Fh, 566Bh, 5671h
		dd 5675h, 5683h, 5689h,	568Dh, 568Fh, 569Bh, 56ADh, 56B1h
		dd 56D5h, 56E7h, 56F3h,	56FFh, 5701h, 5705h, 5707h, 570Bh
		dd 5713h, 571Fh, 5723h,	5747h, 574Dh, 575Fh, 5761h, 576Dh
		dd 5777h, 577Dh, 5789h,	57A1h, 57A9h, 57AFh, 57B5h, 57C5h
		dd 57D1h, 57D3h, 57E5h,	57EFh, 5803h, 580Dh, 580Fh, 5815h
		dd 5827h, 582Bh, 582Dh,	5855h, 585Bh, 585Dh, 586Dh, 586Fh
		dd 5873h, 587Bh, 588Dh,	5897h, 58A3h, 58A9h, 58ABh, 58B5h
		dd 58BDh, 58C1h, 58C7h,	58D3h, 58D5h, 58DFh, 58F1h, 58F9h
		dd 58FFh, 5903h, 5917h,	591Bh, 5921h, 5945h, 594Bh, 594Dh
		dd 5957h, 595Dh, 5975h,	597Bh, 5989h, 5999h, 599Fh, 59B1h
		dd 59B3h, 59BDh, 59D1h,	59DBh, 59E3h, 59E9h, 59EDh, 59F3h
		dd 59F5h, 59FFh, 5A01h,	5A0Dh, 5A11h, 5A13h, 5A17h, 5A1Fh
		dd 5A29h, 5A2Fh, 5A3Bh,	5A4Dh, 5A5Bh, 5A67h, 5A77h, 5A7Fh
		dd 5A85h, 5A95h, 5A9Dh,	5AA1h, 5AA3h, 5AA9h, 5ABBh, 5AD3h
		dd 5AE5h, 5AEFh, 5AFBh,	5AFDh, 5B01h, 5B0Fh, 5B19h, 5B1Fh
		dd 5B25h, 5B2Bh, 5B3Dh,	5B49h, 5B4Bh, 5B67h, 5B79h, 5B87h
		dd 5B97h, 5BA3h, 5BB1h,	5BC9h, 5BD5h, 5BEBh, 5BF1h, 5BF3h
		dd 5BFDh, 5C05h, 5C09h,	5C0Bh, 5C0Fh, 5C1Dh, 5C29h, 5C2Fh
		dd 5C33h, 5C39h, 5C47h,	5C4Bh, 5C4Dh, 5C51h, 5C6Fh, 5C75h
		dd 5C77h, 5C7Dh, 5C87h,	5C89h, 5CA7h, 5CBDh, 5CBFh, 5CC3h
		dd 5CC9h, 5CD1h, 5CD7h,	5CDDh, 5CEDh, 5CF9h, 5D05h, 5D0Bh
		dd 5D13h, 5D17h, 5D19h,	5D31h, 5D3Dh, 5D41h, 5D47h, 5D4Fh
		dd 5D55h, 5D5Bh, 5D65h,	5D67h, 5D6Dh, 5D79h, 5D95h, 5DA3h
		dd 5DA9h, 5DADh, 5DB9h,	5DC1h, 5DC7h, 5DD3h, 5DD7h, 5DDDh
		dd 5DEBh, 5DF1h, 5DFDh,	5E07h, 5E0Dh, 5E13h, 5E1Bh, 5E21h
		dd 5E27h, 5E2Bh, 5E2Dh,	5E31h, 5E39h, 5E45h, 5E49h, 5E57h
		dd 5E69h, 5E73h, 5E75h,	5E85h, 5E8Bh, 5E9Fh, 5EA5h, 5EAFh
		dd 5EB7h, 5EBBh, 5ED9h,	5EFDh, 5F09h, 5F11h, 5F27h, 5F33h
		dd 5F35h, 5F3Bh, 5F47h,	5F57h, 5F5Dh, 5F63h, 5F65h, 5F77h
		dd 5F7Bh, 5F95h, 5F99h,	5FA1h, 5FB3h, 5FBDh, 5FC5h, 5FCFh
		dd 5FD5h, 5FE3h, 5FE7h,	5FFBh, 6011h, 6023h, 602Fh, 6037h
		dd 6053h, 605Fh, 6065h,	606Bh, 6073h, 6079h, 6085h, 609Dh
		dd 60ADh, 60BBh, 60BFh,	60CDh, 60D9h, 60DFh, 60E9h, 60F5h
		dd 6109h, 610Fh, 6113h,	611Bh, 612Dh, 6139h, 614Bh, 6155h
		dd 6157h, 615Bh, 616Fh,	6179h, 6187h, 618Bh, 6191h, 6193h
		dd 619Dh, 61B5h, 61C7h,	61C9h, 61CDh, 61E1h, 61F1h, 61FFh
		dd 6209h, 6217h, 621Dh,	6221h, 6227h, 623Bh, 6241h, 624Bh
		dd 6251h, 6253h, 625Fh,	6265h, 6283h, 628Dh, 6295h, 629Bh
		dd 629Fh, 62A5h, 62ADh,	62D5h, 62D7h, 62DBh, 62DDh, 62E9h
		dd 62FBh, 62FFh, 6305h,	630Dh, 6317h, 631Dh, 632Fh, 6341h
		dd 6343h, 634Fh, 635Fh,	6367h, 636Dh, 6371h, 6377h, 637Dh
		dd 637Fh, 63B3h, 63C1h,	63C5h, 63D9h, 63E9h, 63EBh, 63EFh
		dd 63F5h, 6401h, 6403h,	6409h, 6415h, 6421h, 6427h, 642Bh
		dd 6439h, 6443h, 6449h,	644Fh, 645Dh, 6467h, 6475h, 6485h
		dd 648Dh, 6493h, 649Fh,	64A3h, 64ABh, 64C1h, 64C7h, 64C9h
		dd 64DBh, 64F1h, 64F7h,	64F9h, 650Bh, 6511h, 6521h, 652Fh
		dd 6539h, 653Fh, 654Bh,	654Dh, 6553h, 6557h, 655Fh, 6571h
		dd 657Dh, 658Dh, 658Fh,	6593h, 65A1h, 65A5h, 65ADh, 65B9h
		dd 65C5h, 65E3h, 65F3h,	65FBh, 65FFh, 6601h, 6607h, 661Dh
		dd 6629h, 6631h, 663Bh,	6641h, 6647h, 664Dh, 665Bh, 6661h
		dd 6673h, 667Dh, 6689h,	668Bh, 6695h, 6697h, 669Bh, 66B5h
		dd 66B9h, 66C5h, 66CDh,	66D1h, 66E3h, 66EBh, 66F5h, 6703h
		dd 6713h, 6719h, 671Fh,	6727h, 6731h, 6737h, 673Fh, 6745h
		dd 6751h, 675Bh, 676Fh,	6779h, 6781h, 6785h, 6791h, 67ABh
		dd 67BDh, 67C1h, 67CDh,	67DFh, 67E5h, 6803h, 6809h, 6811h
		dd 6817h, 682Dh, 6839h,	683Bh, 683Fh, 6845h, 684Bh, 684Dh
		dd 6857h, 6859h, 685Dh,	6863h, 6869h, 686Bh, 6871h, 6887h
		dd 6899h, 689Fh, 68B1h,	68BDh, 68C5h, 68D1h, 68D7h, 68E1h
		dd 68EDh, 68EFh, 68FFh,	6901h, 690Bh, 690Dh, 6917h, 6929h
		dd 692Fh, 6943h, 6947h,	6949h, 694Fh, 6965h, 696Bh, 6971h
		dd 6983h, 6989h, 6997h,	69A3h, 69B3h, 69B5h, 69BBh, 69C1h
		dd 69C5h, 69D3h, 69DFh,	69E3h, 69E5h, 69F7h, 6A07h, 6A2Bh
		dd 6A37h, 6A3Dh, 6A4Bh,	6A67h, 6A69h, 6A75h, 6A7Bh, 6A87h
		dd 6A8Dh, 6A91h, 6A93h,	6AA3h, 6AC1h, 6AC9h, 6AE1h, 6AE7h
		dd 6B05h, 6B0Fh, 6B11h,	6B23h, 6B27h, 6B2Dh, 6B39h, 6B41h
		dd 6B57h, 6B59h, 6B5Fh,	6B75h, 6B87h, 6B89h, 6B93h, 6B95h
		dd 6B9Fh, 6BBDh, 6BBFh,	6BDBh, 6BE1h, 6BEFh, 6BFFh, 6C05h
		dd 6C19h, 6C29h, 6C2Bh,	6C31h, 6C35h, 6C55h, 6C59h, 6C5Bh
		dd 6C5Fh, 6C65h, 6C67h,	6C73h, 6C77h, 6C7Dh, 6C83h, 6C8Fh
		dd 6C91h, 6C97h, 6C9Bh,	6CA1h, 6CA9h, 6CAFh, 6CB3h, 6CC7h
		dd 6CCBh, 6CEBh, 6CF5h,	6CFDh, 6D0Dh, 6D0Fh, 6D25h, 6D27h
		dd 6D2Bh, 6D31h, 6D39h,	6D3Fh, 6D4Fh, 6D5Dh, 6D61h, 6D73h
		dd 6D7Bh, 6D7Fh, 6D93h,	6D99h, 6DA5h, 6DB1h, 6DB7h, 6DC1h
		dd 6DC3h, 6DCDh, 6DCFh,	6DDBh, 6DF7h, 6E03h, 6E15h, 6E17h
		dd 6E29h, 6E33h, 6E3Bh,	6E45h, 6E75h, 6E77h, 6E7Bh, 6E81h
		dd 6E89h, 6E93h, 6E95h,	6E9Fh, 6EBDh, 6EBFh, 6EE3h, 6EE9h
		dd 6EF3h, 6EF9h, 6EFBh,	6F0Dh, 6F11h, 6F17h, 6F1Fh, 6F2Fh
		dd 6F3Dh, 6F4Dh, 6F53h,	6F61h, 6F65h, 6F79h, 6F7Dh, 6F83h
		dd 6F85h, 6F8Fh, 6F9Bh,	6F9Dh, 6FA3h, 6FAFh, 6FB5h, 6FBBh
		dd 6FBFh, 6FCBh, 6FCDh,	6FD3h, 6FD7h, 6FE3h, 6FE9h, 6FF1h
		dd 6FF5h, 6FF7h, 6FFDh,	700Fh, 7019h, 701Fh, 7027h, 7033h
		dd 7039h, 704Fh, 7051h,	7057h, 7063h, 7075h, 7079h, 7087h
		dd 708Dh, 7091h, 70A5h,	70ABh, 70BBh, 70C3h, 70C7h, 70CFh
		dd 70E5h, 70EDh, 70F9h,	70FFh, 7105h, 7115h, 7121h, 7133h
		dd 7151h, 7159h, 715Dh,	715Fh, 7163h, 7169h, 7183h, 7187h
		dd 7195h, 71ADh, 71C3h,	71C9h, 71CBh, 71D1h, 71DBh, 71E1h
		dd 71EFh, 71F5h, 71FBh,	7207h, 7211h, 7217h, 7219h, 7225h
		dd 722Fh, 723Bh, 7243h,	7255h, 7267h, 7271h, 7277h, 727Fh
		dd 728Fh, 7295h, 729Bh,	72A3h, 72B3h, 72C7h, 72CBh, 72CDh
		dd 72D7h, 72D9h, 72E3h,	72EFh, 72F5h, 72FDh, 7303h, 730Dh
		dd 7321h, 732Bh, 733Dh,	7357h, 735Bh, 7361h, 737Fh, 7381h
		dd 7385h, 738Dh, 7393h,	739Fh, 73ABh, 73BDh, 73C1h, 73C9h
		dd 73DFh, 73E5h, 73E7h,	73F3h, 7415h, 741Bh, 742Dh, 7439h
		dd 743Fh, 7441h, 745Dh,	746Bh, 747Bh, 7489h, 748Dh, 749Bh
		dd 74A7h, 74ABh, 74B1h,	74B7h, 74B9h, 74DDh, 74E1h, 74E7h
		dd 74FBh, 7507h, 751Fh,	7525h, 753Bh, 753Dh, 754Dh, 755Fh
		dd 756Bh, 7577h, 7589h,	758Bh, 7591h, 7597h, 759Dh, 75A1h
		dd 75A7h, 75B5h, 75B9h,	75BBh, 75D1h, 75D9h, 75E5h, 75EBh
		dd 75F5h, 75FBh, 7603h,	760Fh, 7621h, 762Dh, 7633h, 763Dh
		dd 763Fh, 7655h, 7663h,	7669h, 766Fh, 7673h, 7685h, 768Bh
		dd 769Fh, 76B5h, 76B7h,	76C3h, 76DBh, 76DFh, 76F1h, 7703h
		dd 7705h, 771Bh, 771Dh,	7721h, 772Dh, 7735h, 7741h, 774Bh
		dd 7759h, 775Dh, 775Fh,	7771h, 7781h, 77A7h, 77ADh, 77B3h
		dd 77B9h, 77C5h, 77CFh,	77D5h, 77E1h, 77E9h, 77EFh, 77F3h
		dd 77F9h, 7807h, 7825h,	782Bh, 7835h, 783Dh, 7853h, 7859h
		dd 7861h, 786Dh, 7877h,	7879h, 7883h, 7885h, 788Bh, 7895h
		dd 7897h, 78A1h, 78ADh,	78BFh, 78D3h, 78D9h, 78DDh, 78E5h
		dd 78FBh, 7901h, 7907h,	7925h, 792Bh, 7939h, 793Fh, 794Bh
		dd 7957h, 795Dh, 7967h,	7969h, 7973h, 7991h, 7993h, 79A3h
		dd 79ABh, 79AFh, 79B1h,	79B7h, 79C9h, 79CDh, 79CFh, 79D5h
		dd 79D9h, 79F3h, 79F7h,	79FFh, 7A05h, 7A0Fh, 7A11h, 7A15h
		dd 7A1Bh, 7A23h, 7A27h,	7A2Dh, 7A4Bh, 7A57h, 7A59h, 7A5Fh
		dd 7A65h, 7A69h, 7A7Dh,	7A93h, 7A9Bh, 7A9Fh, 7AA1h, 7AA5h
		dd 7AEDh, 7AF5h, 7AF9h,	7B01h, 7B17h, 7B19h, 7B1Dh, 7B2Bh
		dd 7B35h, 7B37h, 7B3Bh,	7B4Fh, 7B55h, 7B5Fh, 7B71h, 7B77h
		dd 7B8Bh, 7B9Bh, 7BA1h,	7BA9h, 7BAFh, 7BB3h, 7BC7h, 7BD3h
		dd 7BE9h, 7BEBh, 7BEFh,	7BF1h, 7BFDh, 7C07h, 7C19h, 7C1Bh
		dd 7C31h, 7C37h, 7C49h,	7C67h, 7C69h, 7C73h, 7C81h, 7C8Bh
		dd 7C93h, 7CA3h, 7CD5h,	7CDBh, 7CE5h, 7CEDh, 7CF7h, 7D03h
		dd 7D09h, 7D1Bh, 7D1Dh,	7D33h, 7D39h, 7D3Bh, 7D3Fh, 7D45h
		dd 7D4Dh, 7D53h, 7D59h,	7D63h, 7D75h, 7D77h, 7D8Dh, 7D8Fh
		dd 7D9Fh, 7DADh, 7DB7h,	7DBDh, 7DBFh, 7DCBh, 7DD5h, 7DE9h
		dd 7DEDh, 7DFBh, 7E01h,	7E05h, 7E29h, 7E2Bh, 7E2Fh, 7E35h
		dd 7E41h, 7E43h, 7E47h,	7E55h, 7E61h, 7E67h, 7E6Bh, 7E71h
		dd 7E73h, 7E79h, 7E7Dh,	7E91h, 7E9Bh, 7E9Dh, 7EA7h, 7EADh
		dd 7EB9h, 7EBBh, 7ED3h,	7EDFh, 7EEBh, 7EF1h, 7EF7h, 7EFBh
		dd 7F13h, 7F15h, 7F19h,	7F31h, 7F33h, 7F39h, 7F3Dh, 7F43h
		dd 7F4Bh, 7F5Bh, 7F61h,	7F63h, 7F6Dh, 7F79h, 7F87h, 7F8Dh
		dd 7FAFh, 7FB5h, 7FC3h,	7FC9h, 7FCDh, 7FCFh, 7FEDh, 8003h
		dd 800Bh, 800Fh, 8015h,	801Dh, 8021h, 8023h, 803Fh, 8041h
		dd 8047h, 804Bh, 8065h,	8077h, 808Dh, 808Fh, 8095h, 80A5h
		dd 80ABh, 80ADh, 80BDh,	80C9h, 80CBh, 80D7h, 80DBh, 80E1h
		dd 80E7h, 80F5h, 80FFh,	8105h, 810Dh, 8119h, 811Dh, 812Fh
		dd 8131h, 813Bh, 8143h,	8153h, 8159h, 815Fh, 817Dh, 817Fh
		dd 8189h, 819Bh, 819Dh,	81A7h, 81AFh, 81B3h, 81BBh, 81C7h
		dd 81DFh, 8207h, 8209h,	8215h, 821Fh, 8225h, 8231h, 8233h
		dd 823Fh, 8243h, 8245h,	8249h, 824Fh, 8261h, 826Fh, 827Bh
		dd 8281h, 8285h, 8293h,	82B1h, 82B5h, 82BDh, 82C7h, 82CFh
		dd 82D5h, 82DFh, 82F1h,	82F9h, 82FDh, 830Bh, 831Bh, 8321h
		dd 8329h, 832Dh, 8333h,	8335h, 833Fh, 8341h, 834Dh, 8351h
		dd 8353h, 8357h, 835Dh,	8365h, 8369h, 836Fh, 838Fh, 83A7h
		dd 83B1h, 83B9h, 83CBh,	83D5h, 83D7h, 83DDh, 83E7h, 83E9h
		dd 83EDh, 83FFh, 8405h,	8411h, 8413h, 8423h, 8425h, 843Bh
		dd 8441h, 8447h, 844Fh,	8461h, 8465h, 8477h, 8483h, 848Bh
		dd 8491h, 8495h, 84A9h,	84AFh, 84CDh, 84E3h, 84EFh, 84F1h
		dd 84F7h, 8509h, 850Dh,	854Bh, 854Fh, 8551h, 855Dh, 8563h
		dd 856Dh, 856Fh, 857Bh,	8587h, 85A3h, 85A5h, 85A9h, 85B7h
		dd 85CDh, 85D3h, 85D5h,	85DBh, 85E1h, 85EBh, 85F9h, 85FDh
		dd 85FFh, 8609h, 860Fh,	8617h, 8621h, 862Fh, 8639h, 863Fh
		dd 8641h, 864Dh, 8663h,	8675h, 867Dh, 8687h, 8699h, 86A5h
		dd 86A7h, 86B3h, 86B7h,	86C3h, 86C5h, 86CFh, 86D1h, 86D7h
		dd 86E9h, 86EFh, 86F5h,	8717h, 871Dh, 871Fh, 872Bh, 872Fh
		dd 8735h, 8747h, 8759h,	875Bh, 876Bh, 8771h, 8777h, 877Fh
		dd 8785h, 878Fh, 87A1h,	87A9h, 87B3h, 87BBh, 87C5h, 87C7h
		dd 87CBh, 87DDh, 87F7h,	8803h, 8819h, 881Bh, 881Fh, 8821h
		dd 8837h, 883Dh, 8843h,	8851h, 8861h, 8867h, 887Bh, 8885h
		dd 8891h, 8893h, 88A5h,	88CFh, 88D3h, 88EBh, 88EDh, 88F3h
		dd 88FDh, 8909h, 890Bh,	8911h, 891Bh, 8923h, 8927h, 892Dh
		dd 8939h, 8945h, 894Dh,	8951h, 8957h, 8963h, 8981h, 8995h
		dd 899Bh, 89B3h, 89B9h,	89C3h, 89CFh, 89D1h, 89DBh, 89EFh
		dd 89F5h, 89FBh, 89FFh,	8A0Bh, 8A19h, 8A23h, 8A35h, 8A41h
		dd 8A49h, 8A4Fh, 8A5Bh,	8A5Fh, 8A6Dh, 8A77h, 8A79h, 8A85h
		dd 8AA3h, 8AB3h, 8AB5h,	8AC1h, 8AC7h, 8ACBh, 8ACDh, 8AD1h
		dd 8AD7h, 8AF1h, 8AF5h,	8B07h, 8B09h, 8B0Dh, 8B13h, 8B21h
		dd 8B57h, 8B5Dh, 8B91h,	8B93h, 8BA3h, 8BA9h, 8BAFh, 8BBBh
		dd 8BD5h, 8BD9h, 8BDBh,	8BE1h, 8BF7h, 8BFDh, 8BFFh, 8C0Bh
		dd 8C17h, 8C1Dh, 8C27h,	8C39h, 8C3Bh, 8C47h, 8C53h, 8C5Dh
		dd 8C6Fh, 8C7Bh, 8C81h,	8C89h, 8C8Fh, 8C99h, 8C9Fh, 8CA7h
		dd 8CABh, 8CADh, 8CB1h,	8CC5h, 8CDDh, 8CE3h, 8CE9h, 8CF3h
		dd 8D01h, 8D0Bh, 8D0Dh,	8D23h, 8D29h, 8D37h, 8D41h, 8D5Bh
		dd 8D5Fh, 8D71h, 8D79h,	8D85h, 8D91h, 8D9Bh, 8DA7h, 8DADh
		dd 8DB5h, 8DC5h, 8DCBh,	8DD3h, 8DD9h, 8DDFh, 8DF5h, 8DF7h
		dd 8E01h, 8E15h, 8E1Fh,	8E25h, 8E51h, 8E63h, 8E69h, 8E73h
		dd 8E75h, 8E79h, 8E7Fh,	8E8Dh, 8E91h, 8EABh, 8EAFh, 8EB1h
		dd 8EBDh, 8EC7h, 8ECFh,	8ED3h, 8EDBh, 8EE7h, 8EEBh, 8EF7h
		dd 8EFFh, 8F15h, 8F1Dh,	8F23h, 8F2Dh, 8F3Fh, 8F45h, 8F4Bh
		dd 8F53h, 8F59h, 8F65h,	8F69h, 8F71h, 8F83h, 8F8Dh, 8F99h
		dd 8F9Fh, 8FABh, 8FADh,	8FB3h, 8FB7h, 8FB9h, 8FC9h, 8FD5h
		dd 8FE1h, 8FEFh, 8FF9h,	9007h, 900Dh, 9017h, 9023h, 9025h
		dd 9031h, 9037h, 903Bh,	9041h, 9043h, 904Fh, 9053h, 906Dh
		dd 9073h, 9085h, 908Bh,	9095h, 909Bh, 909Dh, 90AFh, 90B9h
		dd 90C1h, 90C5h, 90DFh,	90E9h, 90FDh, 9103h, 9113h, 9127h
		dd 9133h, 913Dh, 9145h,	914Fh, 9151h, 9161h, 9167h, 917Bh
		dd 9185h, 9199h, 919Dh,	91BBh, 91BDh, 91C1h, 91C9h, 91D9h
		dd 91DBh, 91EDh, 91F1h,	91F3h, 91F9h, 9203h, 9215h, 9221h
		dd 922Fh, 9241h, 9247h,	9257h, 926Bh, 9271h, 9275h, 927Dh
		dd 9283h, 9287h, 928Dh,	9299h, 92A1h, 92ABh, 92ADh, 92B9h
		dd 92BFh, 92C3h, 92C5h,	92CBh, 92D5h, 92D7h, 92E7h, 92F3h
		dd 9301h, 930Bh, 9311h,	9319h, 931Fh, 933Bh, 933Dh, 9343h
		dd 9355h, 9373h, 9395h,	9397h, 93A7h, 93B3h, 93B5h, 93C7h
		dd 93D7h, 93DDh, 93E5h,	93EFh, 93F7h, 9401h, 9409h, 9413h
		dd 943Fh, 9445h, 944Bh,	944Fh, 9463h, 9467h, 9469h, 946Dh
		dd 947Bh, 9497h, 949Fh,	94A5h, 94B5h, 94C3h, 94E1h, 94E7h
		dd 9505h, 9509h, 9517h,	9521h, 9527h, 952Dh, 9535h, 9539h
		dd 954Bh, 9557h, 955Dh,	955Fh, 9575h, 9581h, 9589h, 958Fh
		dd 959Bh, 959Fh, 95ADh,	95B1h, 95B7h, 95B9h, 95BDh, 95CFh
		dd 95E3h, 95E9h, 95F9h,	961Fh, 962Fh, 9631h, 9635h, 963Bh
		dd 963Dh, 9665h, 968Fh,	969Dh, 96A1h, 96A7h, 96A9h, 96C1h
		dd 96CBh, 96D1h, 96D3h,	96E5h, 96EFh, 96FBh, 96FDh, 970Dh
		dd 970Fh, 9715h, 9725h,	972Bh, 9733h, 9737h, 9739h, 9743h
		dd 9749h, 9751h, 975Bh,	975Dh, 976Fh, 977Fh, 9787h, 9793h
		dd 97A5h, 97B1h, 97B7h,	97C3h, 97CDh, 97D3h, 97D9h, 97EBh
		dd 97F7h, 9805h, 9809h,	980Bh, 9815h, 9829h, 982Fh, 983Bh
		dd 9841h, 9851h, 986Bh,	986Fh, 9881h, 9883h, 9887h, 98A7h
		dd 98B1h, 98B9h, 98BFh,	98C3h, 98C9h, 98CFh, 98DDh, 98E3h
		dd 98F5h, 98F9h, 98FBh,	990Dh, 9917h, 991Fh, 9929h, 9931h
		dd 993Bh, 993Dh, 9941h,	9947h, 9949h, 9953h, 997Dh, 9985h
		dd 9991h, 9995h, 999Bh,	99ADh, 99AFh, 99BFh, 99C7h, 99CBh
		dd 99CDh, 99D7h, 99E5h,	99F1h, 99FBh, 9A0Fh, 9A13h, 9A1Bh
		dd 9A25h, 9A4Bh, 9A4Fh,	9A55h, 9A57h, 9A61h, 9A75h, 9A7Fh
		dd 9A8Bh, 9A91h, 9A9Dh,	9AB7h, 9AC3h, 9AC7h, 9ACFh, 9AEBh
		dd 9AF3h, 9AF7h, 9AFFh,	9B17h, 9B1Dh, 9B27h, 9B2Fh, 9B35h
		dd 9B45h, 9B51h, 9B59h,	9B63h, 9B6Fh, 9B77h, 9B8Dh, 9B93h
		dd 9B95h, 9B9Fh, 9BA1h,	9BA7h, 9BB1h, 9BB7h, 9BBDh, 9BC5h
		dd 9BCBh, 9BCFh, 9BDDh,	9BF9h, 9C01h, 9C11h, 9C23h, 9C2Bh
		dd 9C2Fh, 9C35h, 9C49h,	9C4Dh, 9C5Fh, 9C65h, 9C67h, 9C7Fh
		dd 9C97h, 9C9Dh, 9CA3h,	9CAFh, 9CBBh, 9CBFh, 9CC1h, 9CD7h
		dd 9CD9h, 9CE3h, 9CE9h,	9CF1h, 9CFDh, 9D01h, 9D15h, 9D27h
		dd 9D2Dh, 9D31h, 9D3Dh,	9D55h, 9D5Bh, 9D61h, 9D97h, 9D9Fh
		dd 9DA5h, 9DA9h, 9DC3h,	9DE7h, 9DEBh, 9DEDh, 9DF1h, 9E0Bh
		dd 9E17h, 9E23h, 9E27h,	9E2Dh, 9E33h, 9E3Bh, 9E47h, 9E51h
		dd 9E53h, 9E5Fh, 9E6Fh,	9E81h, 9E87h, 9E8Fh, 9E95h, 9EA1h
		dd 9EB3h, 9EBDh, 9EBFh,	9EF5h, 9EF9h, 9EFBh, 9F05h, 9F23h
		dd 9F2Fh, 9F37h, 9F3Bh,	9F43h, 9F53h, 9F61h, 9F6Dh, 9F73h
		dd 9F77h, 9F7Dh, 9F89h,	9F8Fh, 9F91h, 9F95h, 9FA3h, 9FAFh
		dd 9FB3h, 9FC1h, 9FC7h,	9FDFh, 9FE5h, 9FEBh, 9FF5h, 0A001h
		dd 0A00Dh, 0A021h, 0A033h, 0A039h, 0A03Fh, 0A04Fh, 0A057h
		dd 0A05Bh, 0A061h, 0A075h, 0A079h, 0A099h, 0A09Dh, 0A0ABh
		dd 0A0B5h, 0A0B7h, 0A0BDh, 0A0C9h, 0A0D9h, 0A0DBh, 0A0DFh
		dd 0A0E5h, 0A0F1h, 0A0F3h, 0A0FDh, 0A105h, 0A10Bh, 0A10Fh
		dd 0A111h, 0A11Bh, 0A129h, 0A12Fh, 0A135h, 0A141h, 0A153h
		dd 0A175h, 0A17Dh, 0A187h, 0A18Dh, 0A1A5h, 0A1ABh, 0A1ADh
		dd 0A1B7h, 0A1C3h, 0A1C5h, 0A1E3h, 0A1EDh, 0A1FBh, 0A207h
		dd 0A213h, 0A223h, 0A229h, 0A22Fh, 0A231h, 0A243h, 0A247h
		dd 0A24Dh, 0A26Bh, 0A279h, 0A27Dh, 0A283h, 0A289h, 0A28Bh
		dd 0A291h, 0A295h, 0A29Bh, 0A2A9h, 0A2AFh, 0A2B3h, 0A2BBh
		dd 0A2C5h, 0A2D1h, 0A2D7h, 0A2F7h, 0A301h, 0A309h, 0A31Fh
		dd 0A321h, 0A32Bh, 0A331h, 0A349h, 0A351h, 0A355h, 0A373h
		dd 0A379h, 0A37Bh, 0A387h, 0A397h, 0A39Fh, 0A3A5h, 0A3A9h
		dd 0A3AFh, 0A3B7h, 0A3C7h, 0A3D5h, 0A3DBh, 0A3E1h, 0A3E5h
		dd 0A3E7h, 0A3F1h, 0A3FDh, 0A3FFh, 0A40Fh, 0A41Dh, 0A421h
		dd 0A423h, 0A427h, 0A43Bh, 0A44Dh, 0A457h, 0A459h, 0A463h
		dd 0A469h, 0A475h, 0A493h, 0A49Bh, 0A4ADh, 0A4B9h, 0A4C3h
		dd 0A4C5h, 0A4CBh, 0A4D1h, 0A4D5h, 0A4E1h, 0A4EDh, 0A4EFh
		dd 0A4F3h, 0A4FFh, 0A511h, 0A529h, 0A52Bh, 0A535h, 0A53Bh
		dd 0A543h, 0A553h, 0A55Bh, 0A561h, 0A56Dh, 0A577h, 0A585h
		dd 0A58Bh, 0A597h, 0A59Dh, 0A5A3h, 0A5A7h, 0A5A9h, 0A5C1h
		dd 0A5C5h, 0A5CBh, 0A5D3h, 0A5D9h, 0A5DDh, 0A5DFh, 0A5E3h
		dd 0A5E9h, 0A5F7h, 0A5FBh, 0A603h, 0A60Dh, 0A625h, 0A63Dh
		dd 0A649h, 0A64Bh, 0A651h, 0A65Dh, 0A673h, 0A691h, 0A693h
		dd 0A699h, 0A6ABh, 0A6B5h, 0A6BBh, 0A6C1h, 0A6C9h, 0A6CDh
		dd 0A6CFh, 0A6D5h, 0A6DFh, 0A6E7h, 0A6F1h, 0A6F7h, 0A6FFh
		dd 0A70Fh, 0A715h, 0A723h, 0A729h, 0A72Dh, 0A745h, 0A74Dh
		dd 0A757h, 0A759h, 0A765h, 0A76Bh, 0A76Fh, 0A793h, 0A795h
		dd 0A7ABh, 0A7B1h, 0A7B9h, 0A7BFh, 0A7C9h, 0A7D1h, 0A7D7h
		dd 0A7E3h, 0A7EDh, 0A7FBh, 0A805h, 0A80Bh, 0A81Dh, 0A829h
		dd 0A82Bh, 0A837h, 0A83Bh, 0A855h, 0A85Fh, 0A86Dh, 0A87Dh
		dd 0A88Fh, 0A897h, 0A8A9h, 0A8B5h, 0A8C1h, 0A8C7h, 0A8D7h
		dd 0A8E5h, 0A8FDh, 0A907h, 0A913h, 0A91Bh, 0A931h, 0A937h
		dd 0A939h, 0A943h, 0A97Fh, 0A985h, 0A987h, 0A98Bh, 0A993h
		dd 0A9A3h, 0A9B1h, 0A9BBh, 0A9C1h, 0A9D9h, 0A9DFh, 0A9EBh
		dd 0A9FDh, 0AA15h, 0AA17h, 0AA35h, 0AA39h, 0AA3Bh, 0AA47h
		dd 0AA4Dh, 0AA57h, 0AA59h, 0AA5Dh, 0AA6Bh, 0AA71h, 0AA81h
		dd 0AA83h, 0AA8Dh, 0AA95h, 0AAABh, 0AABFh, 0AAC5h, 0AAC9h
		dd 0AAE9h, 0AAEFh, 0AB01h, 0AB05h, 0AB07h, 0AB0Bh, 0AB0Dh
		dd 0AB11h, 0AB19h, 0AB4Dh, 0AB5Bh, 0AB71h, 0AB73h, 0AB89h
		dd 0AB9Dh, 0ABA7h, 0ABAFh, 0ABB9h, 0ABBBh, 0ABC1h, 0ABC5h
		dd 0ABD3h, 0ABD7h, 0ABDDh, 0ABF1h, 0ABF5h, 0ABFBh, 0ABFDh
		dd 0AC09h, 0AC15h, 0AC1Bh, 0AC27h, 0AC37h, 0AC39h, 0AC45h
		dd 0AC4Fh, 0AC57h, 0AC5Bh, 0AC61h, 0AC63h, 0AC7Fh, 0AC8Bh
		dd 0AC93h, 0AC9Dh, 0ACA9h, 0ACABh, 0ACAFh, 0ACBDh, 0ACD9h
		dd 0ACE1h, 0ACE7h, 0ACEBh, 0ACEDh, 0ACF1h
		dd 0ACF7h, 0ACF9h, 0AD05h, 0AD3Fh, 0AD45h, 0AD53h, 0AD5Dh
		dd 0AD5Fh, 0AD65h, 0AD81h, 0ADA1h, 0ADA5h, 0ADC3h, 0ADCBh
		dd 0ADD1h, 0ADD5h, 0ADDBh, 0ADE7h, 0ADF3h, 0ADF5h, 0ADF9h
		dd 0ADFFh, 0AE05h, 0AE13h, 0AE23h, 0AE2Bh, 0AE49h, 0AE4Dh
		dd 0AE4Fh, 0AE59h, 0AE61h, 0AE67h, 0AE6Bh, 0AE71h, 0AE8Bh
		dd 0AE8Fh, 0AE9Bh, 0AE9Dh, 0AEA7h, 0AEB9h, 0AEC5h, 0AED1h
		dd 0AEE3h, 0AEE5h, 0AEE9h, 0AEF5h, 0AEFDh, 0AF09h, 0AF13h
		dd 0AF27h, 0AF2Bh, 0AF33h, 0AF43h, 0AF4Fh, 0AF57h, 0AF5Dh
		dd 0AF6Dh, 0AF75h, 0AF7Fh, 0AF8Bh, 0AF99h, 0AF9Fh, 0AFA3h
		dd 0AFABh, 0AFB7h, 0AFBBh, 0AFCFh, 0AFD5h, 0AFFDh, 0B005h
		dd 0B015h, 0B01Bh, 0B03Fh, 0B041h, 0B047h, 0B04Bh, 0B051h
		dd 0B053h, 0B069h, 0B07Bh, 0B07Dh, 0B087h, 0B08Dh, 0B0B1h
		dd 0B0BFh, 0B0CBh, 0B0CFh, 0B0E1h, 0B0E9h, 0B0EDh, 0B0FBh
		dd 0B105h, 0B107h, 0B111h, 0B119h, 0B11Dh, 0B11Fh, 0B131h
		dd 0B141h, 0B14Dh, 0B15Bh, 0B165h, 0B173h, 0B179h, 0B17Fh
		dd 0B1A9h, 0B1B3h, 0B1B9h, 0B1BFh, 0B1D3h, 0B1DDh, 0B1E5h
		dd 0B1F1h, 0B1F5h, 0B201h, 0B213h, 0B215h, 0B21Fh, 0B22Dh
		dd 0B23Fh, 0B249h, 0B25Bh, 0B263h, 0B269h, 0B26Dh, 0B27Bh
		dd 0B281h, 0B28Bh, 0B2A9h, 0B2B7h, 0B2BDh, 0B2C3h, 0B2C7h
		dd 0B2D3h, 0B2F9h, 0B2FDh, 0B2FFh, 0B303h, 0B309h, 0B311h
		dd 0B31Dh, 0B327h, 0B32Dh, 0B33Fh, 0B345h, 0B377h, 0B37Dh
		dd 0B381h, 0B387h, 0B393h, 0B39Bh, 0B3A5h, 0B3C5h, 0B3CBh
		dd 0B3E1h, 0B3E3h, 0B3EDh, 0B3F9h, 0B40Bh, 0B40Dh, 0B413h
		dd 0B417h, 0B435h, 0B43Dh, 0B443h, 0B449h, 0B45Bh, 0B465h
		dd 0B467h, 0B46Bh, 0B477h, 0B48Bh, 0B495h, 0B49Dh, 0B4B5h
		dd 0B4BFh, 0B4C1h, 0B4C7h, 0B4DDh, 0B4E3h, 0B4E5h, 0B4F7h
		dd 0B501h, 0B50Dh, 0B50Fh, 0B52Dh, 0B53Fh, 0B54Bh, 0B567h
		dd 0B569h, 0B56Fh, 0B573h, 0B579h, 0B587h, 0B58Dh, 0B599h
		dd 0B5A3h, 0B5ABh, 0B5AFh, 0B5BBh, 0B5D5h, 0B5DFh, 0B5E7h
		dd 0B5EDh, 0B5FDh, 0B5FFh, 0B609h, 0B61Bh, 0B629h, 0B62Fh
		dd 0B633h, 0B639h, 0B647h, 0B657h, 0B659h, 0B65Fh, 0B663h
		dd 0B66Fh, 0B683h, 0B687h, 0B69Bh, 0B69Fh, 0B6A5h, 0B6B1h
		dd 0B6B3h, 0B6D7h, 0B6DBh, 0B6E1h, 0B6E3h, 0B6EDh, 0B6EFh
		dd 0B705h, 0B70Dh, 0B713h, 0B71Dh, 0B729h, 0B735h, 0B747h
		dd 0B755h, 0B76Dh, 0B791h, 0B795h, 0B7A9h, 0B7C1h, 0B7CBh
		dd 0B7D1h, 0B7D3h, 0B7EFh, 0B7F5h, 0B807h, 0B80Fh, 0B813h
		dd 0B819h, 0B821h, 0B827h, 0B82Bh, 0B82Dh, 0B839h, 0B855h
		dd 0B867h, 0B875h, 0B885h, 0B893h, 0B8A5h, 0B8AFh, 0B8B7h
		dd 0B8BDh, 0B8C1h, 0B8C7h, 0B8CDh, 0B8D5h, 0B8EBh, 0B8F7h
		dd 0B8F9h, 0B903h, 0B915h, 0B91Bh, 0B91Dh, 0B92Fh, 0B939h
		dd 0B93Bh, 0B947h, 0B951h, 0B963h, 0B983h, 0B989h, 0B98Dh
		dd 0B993h, 0B999h, 0B9A1h, 0B9A7h, 0B9ADh, 0B9B7h, 0B9CBh
		dd 0B9D1h, 0B9DDh, 0B9E7h, 0B9EFh, 0B9F9h, 0BA07h, 0BA0Dh
		dd 0BA17h, 0BA25h, 0BA29h, 0BA2Bh, 0BA41h, 0BA53h, 0BA55h
		dd 0BA5Fh, 0BA61h, 0BA65h, 0BA79h, 0BA7Dh, 0BA7Fh, 0BAA1h
		dd 0BAA3h, 0BAAFh, 0BAB5h, 0BABFh, 0BAC1h, 0BACBh, 0BADDh
		dd 0BAE3h, 0BAF1h, 0BAFDh, 0BB09h, 0BB1Fh, 0BB27h, 0BB2Dh
		dd 0BB3Dh, 0BB43h, 0BB4Bh, 0BB4Fh, 0BB5Bh, 0BB61h, 0BB69h
		dd 0BB6Dh, 0BB91h, 0BB97h, 0BB9Dh, 0BBB1h, 0BBC9h, 0BBCFh
		dd 0BBDBh, 0BBEDh, 0BBF7h, 0BBF9h, 0BC03h, 0BC1Dh, 0BC23h
		dd 0BC33h, 0BC3Bh, 0BC41h, 0BC45h, 0BC5Dh, 0BC6Fh, 0BC77h
		dd 0BC83h, 0BC8Fh, 0BC99h, 0BCABh, 0BCB7h, 0BCB9h, 0BCD1h
		dd 0BCD5h, 0BCE1h, 0BCF3h, 0BCFFh, 0BD0Dh, 0BD17h, 0BD19h
		dd 0BD1Dh, 0BD35h, 0BD41h, 0BD4Fh, 0BD59h, 0BD5Fh, 0BD61h
		dd 0BD67h, 0BD6Bh, 0BD71h, 0BD8Bh, 0BD8Fh, 0BD95h, 0BD9Bh
		dd 0BD9Dh, 0BDB3h, 0BDBBh, 0BDCDh, 0BDD1h, 0BDE3h, 0BDEBh
		dd 0BDEFh, 0BE07h, 0BE09h, 0BE15h, 0BE21h, 0BE25h, 0BE27h
		dd 0BE5Bh, 0BE5Dh, 0BE6Fh, 0BE75h, 0BE79h, 0BE7Fh, 0BE8Bh
		dd 0BE8Dh, 0BE93h, 0BE9Fh, 0BEA9h, 0BEB1h, 0BEB5h, 0BEB7h
		dd 0BECFh, 0BED9h, 0BEDBh, 0BEE5h, 0BEE7h, 0BEF3h, 0BEF9h
		dd 0BF0Bh, 0BF33h, 0BF39h, 0BF4Dh, 0BF5Dh, 0BF5Fh, 0BF6Bh
		dd 0BF71h, 0BF7Bh, 0BF87h, 0BF89h, 0BF8Dh, 0BF93h, 0BFA1h
		dd 0BFADh, 0BFB9h, 0BFCFh, 0BFD5h, 0BFDDh, 0BFE1h, 0BFE3h
		dd 0BFF3h, 0C005h, 0C011h, 0C013h, 0C019h, 0C029h, 0C02Fh
		dd 0C031h, 0C037h, 0C03Bh, 0C047h, 0C065h, 0C06Dh, 0C07Dh
		dd 0C07Fh, 0C091h, 0C09Bh, 0C0B3h, 0C0B5h, 0C0BBh, 0C0D3h
		dd 0C0D7h, 0C0D9h, 0C0EFh, 0C0F1h, 0C101h, 0C103h, 0C109h
		dd 0C115h, 0C119h, 0C12Bh, 0C133h, 0C137h, 0C145h, 0C149h
		dd 0C15Bh, 0C173h, 0C179h, 0C17Bh, 0C181h, 0C18Bh, 0C18Dh
		dd 0C197h, 0C1BDh, 0C1C3h, 0C1CDh, 0C1DBh, 0C1E1h, 0C1E7h
		dd 0C1FFh, 0C203h, 0C205h, 0C211h, 0C221h, 0C22Fh, 0C23Fh
		dd 0C24Bh, 0C24Dh, 0C253h, 0C25Dh, 0C277h, 0C27Bh, 0C27Dh
		dd 0C289h, 0C28Fh, 0C293h, 0C29Fh, 0C2A7h, 0C2B3h, 0C2BDh
		dd 0C2CFh
		dd 0C2D5h, 0C2E3h, 0C2FFh, 0C301h, 0C307h, 0C311h, 0C313h
		dd 0C317h, 0C325h, 0C347h, 0C349h, 0C34Fh, 0C365h, 0C367h
		dd 0C371h, 0C37Fh, 0C383h, 0C385h, 0C395h, 0C39Dh, 0C3A7h
		dd 0C3ADh, 0C3B5h, 0C3BFh, 0C3C7h, 0C3CBh, 0C3D1h, 0C3D3h
		dd 0C3E3h, 0C3E9h, 0C3EFh, 0C401h, 0C41Fh, 0C42Dh, 0C433h
		dd 0C437h, 0C455h, 0C457h, 0C461h, 0C46Fh, 0C473h, 0C487h
		dd 0C491h, 0C499h, 0C49Dh, 0C4A5h, 0C4B7h, 0C4BBh, 0C4C9h
		dd 0C4CFh, 0C4D3h, 0C4EBh, 0C4F1h, 0C4F7h, 0C509h, 0C51Bh
		dd 0C51Dh, 0C541h, 0C547h, 0C551h, 0C55Fh, 0C56Bh, 0C56Fh
		dd 0C575h, 0C577h, 0C595h, 0C59Bh, 0C59Fh, 0C5A1h, 0C5A7h
		dd 0C5C3h, 0C5D7h, 0C5DBh, 0C5EFh, 0C5FBh, 0C613h, 0C623h
		dd 0C635h, 0C641h, 0C64Fh, 0C655h, 0C659h, 0C665h, 0C685h
		dd 0C691h, 0C697h, 0C6A1h, 0C6A9h, 0C6B3h, 0C6B9h, 0C6CBh
		dd 0C6CDh, 0C6DDh, 0C6EBh, 0C6F1h, 0C707h, 0C70Dh, 0C719h
		dd 0C71Bh, 0C72Dh, 0C731h, 0C739h, 0C757h, 0C763h, 0C767h
		dd 0C773h, 0C775h, 0C77Fh, 0C7A5h, 0C7BBh, 0C7BDh, 0C7C1h
		dd 0C7CFh, 0C7D5h, 0C7E1h, 0C7F9h, 0C7FDh, 0C7FFh, 0C803h
		dd 0C811h, 0C81Dh, 0C827h, 0C829h, 0C839h, 0C83Fh, 0C853h
		dd 0C857h, 0C86Bh, 0C881h, 0C88Dh, 0C88Fh, 0C893h, 0C895h
		dd 0C8A1h, 0C8B7h, 0C8CFh, 0C8D5h, 0C8DBh, 0C8DDh, 0C8E3h
		dd 0C8E7h, 0C8EDh, 0C8EFh, 0C8F9h, 0C905h, 0C911h, 0C917h
		dd 0C919h, 0C91Fh, 0C92Fh, 0C937h, 0C93Dh, 0C941h, 0C953h
		dd 0C95Fh, 0C96Bh, 0C979h, 0C97Dh, 0C989h, 0C98Fh, 0C997h
		dd 0C99Dh, 0C9AFh, 0C9B5h, 0C9BFh, 0C9CBh, 0C9D9h, 0C9DFh
		dd 0C9E3h, 0C9EBh, 0CA01h, 0CA07h, 0CA09h, 0CA25h, 0CA37h
		dd 0CA39h, 0CA4Bh, 0CA55h, 0CA5Bh, 0CA69h, 0CA73h, 0CA75h
		dd 0CA7Fh, 0CA8Dh, 0CA93h, 0CA9Dh, 0CA9Fh, 0CAB5h, 0CABBh
		dd 0CAC3h, 0CAC9h, 0CAD9h, 0CAE5h, 0CAEDh, 0CB03h, 0CB05h
		dd 0CB09h, 0CB17h, 0CB29h, 0CB35h, 0CB3Bh, 0CB53h, 0CB59h
		dd 0CB63h, 0CB65h, 0CB71h, 0CB87h, 0CB99h, 0CB9Fh, 0CBB3h
		dd 0CBB9h, 0CBC3h, 0CBD1h, 0CBD5h, 0CBD7h, 0CBDDh, 0CBE9h
		dd 0CBFFh, 0CC0Dh, 0CC19h, 0CC1Dh, 0CC23h, 0CC2Bh, 0CC41h
		dd 0CC43h, 0CC4Dh, 0CC59h, 0CC61h, 0CC89h, 0CC8Bh, 0CC91h
		dd 0CC9Bh, 0CCA3h, 0CCA7h, 0CCD1h, 0CCE5h, 0CCE9h, 0CD09h
		dd 0CD15h, 0CD1Fh, 0CD25h, 0CD31h, 0CD3Dh, 0CD3Fh, 0CD49h
		dd 0CD51h, 0CD57h, 0CD5Bh, 0CD63h, 0CD67h, 0CD81h, 0CD93h
		dd 0CD97h, 0CD9Fh, 0CDBBh, 0CDC1h, 0CDD3h, 0CDD9h, 0CDE5h
		dd 0CDE7h, 0CDF1h, 0CDF7h, 0CDFDh, 0CE0Bh, 0CE15h, 0CE21h
		dd 0CE2Fh, 0CE47h, 0CE4Dh, 0CE51h, 0CE65h, 0CE7Bh, 0CE7Dh
		dd 0CE8Fh, 0CE93h, 0CE99h, 0CEA5h, 0CEA7h, 0CEB7h, 0CEC9h
		dd 0CED7h, 0CEDDh, 0CEE3h, 0CEE7h, 0CEEDh, 0CEF5h, 0CF07h
		dd 0CF0Bh, 0CF19h, 0CF37h, 0CF3Bh, 0CF4Dh, 0CF55h, 0CF5Fh
		dd 0CF61h, 0CF65h, 0CF6Dh, 0CF79h, 0CF7Dh, 0CF89h, 0CF9Bh
		dd 0CF9Dh, 0CFA9h, 0CFB3h, 0CFB5h, 0CFC5h, 0CFCDh, 0CFD1h
		dd 0CFEFh, 0CFF1h, 0CFF7h, 0D013h, 0D015h, 0D01Fh, 0D021h
		dd 0D033h, 0D03Dh, 0D04Bh, 0D04Fh, 0D069h, 0D06Fh, 0D081h
		dd 0D085h, 0D099h, 0D09Fh, 0D0A3h, 0D0ABh, 0D0BDh, 0D0C1h
		dd 0D0CDh, 0D0E7h, 0D0FFh, 0D103h, 0D117h, 0D12Dh, 0D12Fh
		dd 0D141h, 0D157h, 0D159h, 0D15Dh, 0D169h, 0D16Bh, 0D171h
		dd 0D177h, 0D17Dh, 0D181h, 0D187h, 0D195h, 0D199h, 0D1B1h
		dd 0D1BDh, 0D1C3h, 0D1D5h, 0D1D7h, 0D1E3h, 0D1FFh, 0D20Dh
		dd 0D211h, 0D217h, 0D21Fh, 0D235h, 0D23Bh, 0D247h, 0D259h
		dd 0D261h, 0D265h, 0D279h, 0D27Fh, 0D283h, 0D289h, 0D28Bh
		dd 0D29Dh, 0D2A3h, 0D2A7h, 0D2B3h, 0D2BFh, 0D2C7h, 0D2E3h
		dd 0D2E9h, 0D2F1h, 0D2FBh, 0D2FDh, 0D315h, 0D321h, 0D32Bh
		dd 0D343h, 0D34Bh, 0D355h, 0D369h, 0D375h, 0D37Bh, 0D387h
		dd 0D393h, 0D397h, 0D3A5h, 0D3B1h, 0D3C9h, 0D3EBh, 0D3FDh
		dd 0D405h, 0D40Fh, 0D415h, 0D427h, 0D42Fh, 0D433h, 0D43Bh
		dd 0D44Bh, 0D459h, 0D45Fh, 0D463h, 0D469h, 0D481h, 0D483h
		dd 0D489h, 0D48Dh, 0D493h, 0D495h, 0D4A5h, 0D4ABh, 0D4B1h
		dd 0D4C5h, 0D4DDh, 0D4E1h, 0D4E3h, 0D4E7h, 0D4F5h, 0D4F9h
		dd 0D50Bh, 0D50Dh, 0D513h, 0D51Fh, 0D523h, 0D531h, 0D535h
		dd 0D537h, 0D549h, 0D559h, 0D55Fh, 0D565h, 0D567h, 0D577h
		dd 0D58Bh, 0D591h, 0D597h, 0D5B5h, 0D5B9h, 0D5C1h, 0D5C7h
		dd 0D5DFh, 0D5EFh, 0D5F5h, 0D5FBh, 0D603h, 0D60Fh, 0D62Dh
		dd 0D631h, 0D643h, 0D655h, 0D65Dh, 0D661h, 0D67Bh, 0D685h
		dd 0D687h, 0D69Dh, 0D6A5h, 0D6AFh, 0D6BDh, 0D6C3h, 0D6C7h
		dd 0D6D9h, 0D6E1h, 0D6EDh, 0D709h, 0D70Bh, 0D711h, 0D715h
		dd 0D721h, 0D727h, 0D73Fh, 0D745h, 0D74Dh, 0D757h, 0D76Bh
		dd 0D77Bh, 0D783h, 0D7A1h, 0D7A7h, 0D7ADh, 0D7B1h, 0D7B3h
		dd 0D7BDh, 0D7CBh, 0D7D1h, 0D7DBh, 0D7FBh, 0D811h, 0D823h
		dd 0D825h, 0D829h, 0D82Bh, 0D82Fh, 0D837h, 0D84Dh, 0D855h
		dd 0D867h, 0D873h, 0D88Fh, 0D891h, 0D8A1h, 0D8ADh, 0D8BFh
		dd 0D8CDh
		dd 0D8D7h, 0D8E9h, 0D8F5h, 0D8FBh, 0D91Bh, 0D925h, 0D933h
		dd 0D939h, 0D943h, 0D945h, 0D94Fh, 0D951h, 0D957h, 0D96Dh
		dd 0D96Fh, 0D973h, 0D979h, 0D981h, 0D98Bh, 0D991h, 0D99Fh
		dd 0D9A5h, 0D9A9h, 0D9B5h, 0D9D3h, 0D9EBh, 0D9F1h, 0D9F7h
		dd 0D9FFh, 0DA05h, 0DA09h, 0DA0Bh, 0DA0Fh, 0DA15h, 0DA1Dh
		dd 0DA23h, 0DA29h, 0DA3Fh, 0DA51h, 0DA59h, 0DA5Dh, 0DA5Fh
		dd 0DA71h, 0DA77h, 0DA7Bh, 0DA7Dh, 0DA8Dh, 0DA9Fh, 0DAB3h
		dd 0DABDh, 0DAC3h, 0DAC9h, 0DAE7h, 0DAE9h, 0DAF5h, 0DB11h
		dd 0DB17h, 0DB1Dh, 0DB23h, 0DB25h, 0DB31h, 0DB3Bh, 0DB43h
		dd 0DB55h, 0DB67h, 0DB6Bh, 0DB73h, 0DB85h, 0DB8Fh, 0DB91h
		dd 0DBADh, 0DBAFh, 0DBB9h, 0DBC7h, 0DBCBh, 0DBCDh, 0DBEBh
		dd 0DBF7h, 0DC0Dh, 0DC27h, 0DC31h, 0DC39h, 0DC3Fh, 0DC49h
		dd 0DC51h, 0DC61h, 0DC6Fh, 0DC75h, 0DC7Bh, 0DC85h, 0DC93h
		dd 0DC99h, 0DC9Dh, 0DC9Fh, 0DCA9h, 0DCB5h, 0DCB7h, 0DCBDh
		dd 0DCC7h, 0DCCFh, 0DCD3h, 0DCD5h, 0DCDFh, 0DCF9h, 0DD0Fh
		dd 0DD15h, 0DD17h, 0DD23h, 0DD35h, 0DD39h, 0DD53h, 0DD57h
		dd 0DD5Fh, 0DD69h, 0DD6Fh, 0DD7Dh, 0DD87h, 0DD89h, 0DD9Bh
		dd 0DDA1h, 0DDABh, 0DDBFh, 0DDC5h, 0DDCBh, 0DDCFh, 0DDE7h
		dd 0DDE9h, 0DDEDh, 0DDF5h, 0DDFBh, 0DE0Bh, 0DE19h, 0DE29h
		dd 0DE3Bh, 0DE3Dh, 0DE41h, 0DE4Dh, 0DE4Fh, 0DE59h, 0DE5Bh
		dd 0DE61h, 0DE6Dh, 0DE77h, 0DE7Dh, 0DE83h, 0DE97h, 0DE9Dh
		dd 0DEA1h, 0DEA7h, 0DECDh, 0DED1h, 0DED7h, 0DEE3h, 0DEF1h
		dd 0DEF5h, 0DF01h, 0DF09h, 0DF13h, 0DF1Fh, 0DF2Bh, 0DF33h
		dd 0DF37h, 0DF3Dh, 0DF4Bh, 0DF55h, 0DF5Bh, 0DF67h, 0DF69h
		dd 0DF73h, 0DF85h, 0DF87h, 0DF99h, 0DFA3h, 0DFABh, 0DFB5h
		dd 0DFB7h, 0DFC3h, 0DFC7h, 0DFD5h, 0DFF1h, 0DFF3h, 0E003h
		dd 0E005h, 0E017h, 0E01Dh, 0E027h, 0E02Dh, 0E035h, 0E045h
		dd 0E053h, 0E071h, 0E07Bh, 0E08Fh, 0E095h, 0E09Fh, 0E0B7h
		dd 0E0B9h, 0E0D5h, 0E0D7h, 0E0E3h, 0E0F3h, 0E0F9h, 0E101h
		dd 0E125h, 0E129h, 0E131h, 0E135h, 0E143h, 0E14Fh, 0E159h
		dd 0E161h, 0E16Dh, 0E171h, 0E177h, 0E17Fh, 0E183h, 0E189h
		dd 0E197h, 0E1ADh, 0E1B5h, 0E1BBh, 0E1BFh, 0E1C1h, 0E1CBh
		dd 0E1D1h, 0E1E5h, 0E1EFh, 0E1F7h, 0E1FDh, 0E203h, 0E219h
		dd 0E22Bh, 0E22Dh, 0E23Dh, 0E243h, 0E257h, 0E25Bh, 0E275h
		dd 0E279h, 0E287h, 0E29Dh, 0E2ABh, 0E2AFh, 0E2BBh, 0E2C1h
		dd 0E2C9h, 0E2CDh, 0E2D3h, 0E2D9h, 0E2F3h, 0E2FDh, 0E2FFh
		dd 0E311h, 0E323h, 0E327h, 0E329h, 0E339h, 0E33Bh, 0E34Dh
		dd 0E351h, 0E357h, 0E35Fh, 0E363h, 0E369h, 0E375h, 0E377h
		dd 0E37Dh, 0E383h, 0E39Fh, 0E3C5h, 0E3C9h, 0E3D1h, 0E3E1h
		dd 0E3FBh, 0E3FFh, 0E401h, 0E40Bh, 0E417h, 0E419h, 0E423h
		dd 0E42Bh, 0E431h, 0E43Bh, 0E447h, 0E449h, 0E453h, 0E455h
		dd 0E46Dh, 0E471h, 0E48Fh, 0E4A9h, 0E4AFh, 0E4B5h, 0E4C7h
		dd 0E4CDh, 0E4D3h, 0E4E9h, 0E4EBh, 0E4F5h, 0E507h, 0E521h
		dd 0E525h, 0E537h, 0E53Fh, 0E545h, 0E54Bh, 0E557h, 0E567h
		dd 0E56Dh, 0E575h, 0E585h, 0E58Bh, 0E593h, 0E5A3h, 0E5A5h
		dd 0E5CFh, 0E609h, 0E611h, 0E615h, 0E61Bh, 0E61Dh, 0E621h
		dd 0E629h, 0E639h, 0E63Fh, 0E653h, 0E657h, 0E663h, 0E66Fh
		dd 0E675h, 0E681h, 0E683h, 0E68Dh, 0E68Fh, 0E695h, 0E6ABh
		dd 0E6ADh, 0E6B7h, 0E6BDh, 0E6C5h, 0E6CBh, 0E6D5h, 0E6E3h
		dd 0E6E9h, 0E6EFh, 0E6F3h, 0E705h, 0E70Dh, 0E717h, 0E71Fh
		dd 0E72Fh, 0E73Dh, 0E747h, 0E749h, 0E753h, 0E755h, 0E761h
		dd 0E767h, 0E76Bh, 0E77Fh, 0E789h, 0E791h, 0E7C5h, 0E7CDh
		dd 0E7D7h, 0E7DDh, 0E7DFh, 0E7E9h, 0E7F1h, 0E7FBh, 0E801h
		dd 0E807h, 0E80Fh, 0E819h, 0E81Bh, 0E831h, 0E833h, 0E837h
		dd 0E83Dh, 0E84Bh, 0E84Fh, 0E851h, 0E869h, 0E875h, 0E879h
		dd 0E893h, 0E8A5h, 0E8A9h, 0E8AFh, 0E8BDh, 0E8DBh, 0E8E1h
		dd 0E8E5h, 0E8EBh, 0E8EDh, 0E903h, 0E90Bh, 0E90Fh, 0E915h
		dd 0E917h, 0E92Dh, 0E933h, 0E93Bh, 0E94Bh, 0E951h, 0E95Fh
		dd 0E963h, 0E969h, 0E97Bh, 0E983h, 0E98Fh, 0E995h, 0E9A1h
		dd 0E9B9h, 0E9D7h, 0E9E7h, 0E9EFh, 0EA11h, 0EA19h, 0EA2Fh
		dd 0EA35h, 0EA43h, 0EA4Dh, 0EA5Fh, 0EA6Dh, 0EA71h, 0EA7Dh
		dd 0EA85h, 0EA89h, 0EAADh, 0EAB3h, 0EAB9h, 0EABBh, 0EAC5h
		dd 0EAC7h, 0EACBh, 0EADFh, 0EAE5h, 0EAEBh, 0EAF5h, 0EB01h
		dd 0EB07h, 0EB09h, 0EB31h, 0EB39h, 0EB3Fh, 0EB5Bh, 0EB61h
		dd 0EB63h, 0EB6Fh, 0EB81h, 0EB85h, 0EB9Dh, 0EBABh, 0EBB1h
		dd 0EBB7h, 0EBC1h, 0EBD5h, 0EBDFh, 0EBEDh, 0EBFDh, 0EC0Bh
		dd 0EC1Bh, 0EC21h, 0EC29h, 0EC4Dh, 0EC51h, 0EC5Dh, 0EC69h
		dd 0EC6Fh, 0EC7Bh, 0ECADh, 0ECB9h, 0ECBFh, 0ECC3h, 0ECC9h
		dd 0ECCFh, 0ECD7h, 0ECDDh, 0ECE7h, 0ECE9h, 0ECF3h, 0ECF5h
		dd 0ED07h, 0ED11h, 0ED1Fh, 0ED2Fh, 0ED37h, 0ED3Dh, 0ED41h
		dd 0ED55h, 0ED59h, 0ED5Bh, 0ED65h, 0ED6Bh, 0ED79h, 0ED8Bh
		dd 0ED95h, 0EDBBh, 0EDC5h, 0EDD7h, 0EDD9h, 0EDE3h, 0EDE5h
		dd 0EDF1h, 0EDF5h, 0EDF7h, 0EDFBh, 0EE09h, 0EE0Fh, 0EE19h
		dd 0EE21h
dword_10046B0C	dd 0EE49h, 0EE4Fh, 0EE63h, 0EE67h, 0EE73h, 0EE7Bh, 0EE81h
		dd 0EEA3h, 0EEABh, 0EEC1h, 0EEC9h, 0EED5h, 0EEDFh, 0EEE1h
		dd 0EEF1h, 0EF1Bh, 0EF27h, 0EF2Fh, 0EF45h, 0EF4Dh, 0EF63h
		dd 0EF6Bh, 0EF71h, 0EF93h, 0EF95h, 0EF9Bh, 0EF9Fh, 0EFADh
		dd 0EFB3h, 0EFC3h, 0EFC5h, 0EFDBh, 0EFE1h, 0EFE9h, 0F001h
		dd 0F017h, 0F01Dh, 0F01Fh, 0F02Bh, 0F02Fh, 0F035h, 0F043h
		dd 0F047h, 0F04Fh, 0F067h, 0F06Bh, 0F071h, 0F077h, 0F079h
		dd 0F08Fh, 0F0A3h, 0F0A9h, 0F0ADh, 0F0BBh, 0F0BFh, 0F0C5h
		dd 0F0CBh, 0F0D3h, 0F0D9h, 0F0E3h, 0F0E9h, 0F0F1h, 0F0F7h
		dd 0F107h, 0F115h, 0F11Bh, 0F121h, 0F137h, 0F13Dh, 0F155h
		dd 0F175h, 0F17Bh, 0F18Dh, 0F193h, 0F1A5h, 0F1AFh, 0F1B7h
		dd 0F1D5h, 0F1E7h, 0F1EDh, 0F1FDh, 0F209h, 0F20Fh, 0F21Bh
		dd 0F21Dh, 0F223h, 0F227h, 0F233h, 0F23Bh, 0F241h, 0F257h
		dd 0F25Fh, 0F265h, 0F269h, 0F277h, 0F281h, 0F293h, 0F2A7h
		dd 0F2B1h, 0F2B3h, 0F2B9h, 0F2BDh, 0F2BFh, 0F2DBh, 0F2EDh
		dd 0F2EFh, 0F2F9h, 0F2FFh, 0F305h, 0F30Bh, 0F319h, 0F341h
		dd 0F359h, 0F35Bh, 0F35Fh, 0F367h, 0F373h, 0F377h, 0F38Bh
		dd 0F38Fh, 0F3AFh, 0F3C1h, 0F3D1h, 0F3D7h, 0F3FBh, 0F403h
		dd 0F409h, 0F40Dh, 0F413h, 0F421h, 0F425h, 0F42Bh, 0F445h
		dd 0F44Bh, 0F455h, 0F463h, 0F475h, 0F47Fh, 0F485h, 0F48Bh
		dd 0F499h, 0F4A3h, 0F4A9h, 0F4AFh, 0F4BDh, 0F4C3h, 0F4DBh
		dd 0F4DFh, 0F4EDh, 0F503h, 0F50Bh, 0F517h, 0F521h, 0F529h
		dd 0F535h, 0F547h, 0F551h, 0F563h, 0F56Bh, 0F583h, 0F58Dh
		dd 0F595h, 0F599h, 0F5B1h, 0F5B7h, 0F5C9h, 0F5CFh, 0F5D1h
		dd 0F5DBh, 0F5F9h, 0F5FBh, 0F605h, 0F607h, 0F60Bh, 0F60Dh
		dd 0F635h, 0F637h, 0F653h, 0F65Bh, 0F661h, 0F667h, 0F679h
		dd 0F67Fh, 0F689h, 0F697h, 0F69Bh, 0F6ADh, 0F6CBh, 0F6DDh
		dd 0F6DFh, 0F6EBh, 0F709h, 0F70Fh, 0F72Dh, 0F731h, 0F743h
		dd 0F74Fh, 0F751h, 0F755h, 0F763h, 0F769h, 0F773h, 0F779h
		dd 0F781h, 0F787h, 0F791h, 0F79Dh, 0F79Fh, 0F7A5h, 0F7B1h
		dd 0F7BBh, 0F7BDh, 0F7CFh, 0F7D3h, 0F7E7h, 0F7EBh, 0F7F1h
		dd 0F7FFh, 0F805h, 0F80Bh, 0F821h, 0F827h, 0F82Dh, 0F835h
		dd 0F847h, 0F859h, 0F863h, 0F865h, 0F86Fh, 0F871h, 0F877h
		dd 0F87Bh, 0F881h, 0F88Dh, 0F89Fh, 0F8A1h, 0F8ABh, 0F8B3h
		dd 0F8B7h, 0F8C9h, 0F8CBh, 0F8D1h, 0F8D7h, 0F8DDh, 0F8E7h
		dd 0F8EFh, 0F8F9h, 0F8FFh, 0F911h, 0F91Dh, 0F925h, 0F931h
		dd 0F937h, 0F93Bh, 0F941h, 0F94Fh, 0F95Fh, 0F961h, 0F96Dh
		dd 0F971h, 0F977h, 0F99Dh, 0F9A3h, 0F9A9h, 0F9B9h, 0F9CDh
		dd 0F9E9h, 0F9FDh, 0FA07h, 0FA0Dh, 0FA13h, 0FA21h, 0FA25h
		dd 0FA3Fh, 0FA43h, 0FA51h, 0FA5Bh, 0FA6Dh, 0FA7Bh, 0FA97h
		dd 0FA99h, 0FA9Dh, 0FAABh, 0FABBh, 0FABDh, 0FAD9h, 0FADFh
		dd 0FAE7h, 0FAEDh, 0FB0Fh, 0FB17h, 0FB1Bh, 0FB2Dh, 0FB2Fh
		dd 0FB3Fh, 0FB47h, 0FB4Dh, 0FB75h, 0FB7Dh, 0FB8Fh, 0FB93h
		dd 0FBB1h, 0FBB7h, 0FBC3h, 0FBC5h, 0FBE3h, 0FBE9h, 0FBF3h
		dd 0FC01h, 0FC29h, 0FC37h, 0FC41h, 0FC43h, 0FC4Fh, 0FC59h
		dd 0FC61h, 0FC65h, 0FC6Dh, 0FC73h, 0FC79h, 0FC95h, 0FC97h
		dd 0FC9Bh, 0FCA7h, 0FCB5h, 0FCC5h, 0FCCDh, 0FCEBh, 0FCFBh
		dd 0FD0Dh, 0FD0Fh, 0FD19h, 0FD2Bh, 0FD31h, 0FD51h, 0FD55h
		dd 0FD67h, 0FD6Dh, 0FD6Fh, 0FD7Bh, 0FD85h, 0FD97h, 0FD99h
		dd 0FD9Fh, 0FDA9h, 0FDB7h, 0FDC9h, 0FDE5h, 0FDEBh, 0FDF3h
		dd 0FE03h, 0FE05h, 0FE09h, 0FE1Dh, 0FE27h, 0FE2Fh, 0FE41h
		dd 0FE4Bh, 0FE4Dh, 0FE57h, 0FE5Fh, 0FE63h, 0FE69h, 0FE75h
		dd 0FE7Bh, 0FE8Fh, 0FE93h, 0FE95h, 0FE9Bh, 0FE9Fh, 0FEB3h
		dd 0FEBDh, 0FED7h, 0FEE9h, 0FEF3h, 0FEF5h, 0FF07h, 0FF0Dh
		dd 0FF1Dh, 0FF2Bh, 0FF2Fh, 0FF49h, 0FF4Dh, 0FF5Bh, 0FF65h
		dd 0FF71h, 0FF7Fh, 0FF85h, 0FF8Bh, 0FF8Fh, 0FF9Dh, 0FFA7h
		dd 0FFA9h, 0FFC7h, 0FFD9h, 0FFEFh, 0FFF1h, 33323130h, 37363534h
		dd 42413938h, 46454443h, 4A494847h, 4E4D4C4Bh, 5251504Fh
		dd 56555453h, 5A595857h, 64636261h, 68676665h, 6C6B6A69h
		dd 706F6E6Dh, 74737271h, 78777675h, 2F2B7A79h, 0
aResultIsUndefi	db 'result is undefined',0 ; DATA XREF: .data:10049210o
aInvalidInputPa	db 'invalid input parameter',0 ; DATA XREF: .data:1004920Co
aArgumentOutOfR	db 'argument out of range',0 ; DATA XREF: .data:10049208o
		align 4
aOutOfMemory	db 'out of memory',0    ; DATA XREF: .data:10049204o
		align 4
aBooleanFalse	db 'boolean false',0    ; DATA XREF: .data:10049200o
		align 4
aBooleanTrue	db 'boolean true',0     ; DATA XREF: .data:100491FCo
		align 4
aUnknownResultC	db 'unknown result code',0 ; DATA XREF: .data:100491F8o
		dd 3 dup(0)
dword_10047218	dd 3F800000h, 3F21849Dh, 3F000000h, 3EDC81A3h, 3EC61192h
		dd 3EB660CAh, 3EAAAAABh, 3EA1849Dh, 3E9A209Bh, 3E94004Eh
		dd 3E8ED19Ch, 3E8A5CA8h, 3E867A00h, 3E830CEEh, 3E800000h
		dd 3E7A85ACh, 3E759166h, 3E710F09h, 3E6CEE69h, 3E692264h
		dd 3E65A02Ch, 3E625ECBh, 3E5F56BBh, 3E5C81A3h, 3E59DA1Ah
		dd 3E575B7Ch, 3E5501C7h, 3E52C983h, 3E50AFA6h, 3E4EB187h
		dd 3E4CCCCDh, 3E4AFF64h, 3E494774h, 3E47A356h, 3E461192h
		dd 3E4490D4h, 3E431FE9h, 3E41BDBDh, 3E406956h, 3E3F21CFh
		dd 3E3DE659h, 3E3CB636h, 3E3B90B8h, 3E3A7540h, 3E39633Bh
		dd 3E385A22h, 3E375978h, 3E3660CAh, 3E356FADh, 3E3485BEh
		dd 3E33A2A1h, 3E32C600h, 3E31EF8Bh, 3E311EF7h, 3E305400h
		dd 3E2F8E63h, 3E2ECDE4h, 3E2E1248h, 3E2D5B5Bh, 3E2CA8EAh
		dd 3E2BFAC4h, 3E2B50BDh, 3E2AAAABh, 2
dword_10047318	dd 0			; DATA XREF: sub_1002AB80+1A9o
		dd 2 dup(1)
		dd offset dword_10047218+0FCh
dword_10047328	dd 0			; DATA XREF: sub_1002D430+91r
					; sub_1002D430+A3r ...
dword_1004732C	dd 1, 4, 5, 10h, 11h, 14h, 15h,	40h, 41h, 44h, 45h, 50h
		dd 51h,	54h, 55h, 646F6547h, 79622065h,	43534E20h, 0
aSisSisSis	db 'Sis Sis Sis ',0     ; DATA XREF: .rdata:10047628o
		align 4
aUmcUmcUmc	db 'UMC UMC UMC ',0     ; DATA XREF: .rdata:10047624o
		align 4
aRiseriserise	db 'RiseRiseRise',0     ; DATA XREF: .rdata:10047620o
		align 4
aGenuinetmx86	db 'GenuineTMx86',0     ; DATA XREF: .rdata:1004761Co
		align 4
aNexgendriven	db 'NexGenDriven',0     ; DATA XREF: .rdata:10047618o
		align 4
aCentaurhauls	db 'CentaurHauls',0     ; DATA XREF: .rdata:10047614o
		align 4
aCyrixinstead	db 'CyrixInstead',0     ; DATA XREF: .rdata:10047610o
		align 4
aAuthenticamd	db 'AuthenticAMD',0     ; DATA XREF: .rdata:1004760Co
		align 4
aGenuineintel	db 'GenuineIntel',0     ; DATA XREF: .rdata:off_10047608o
		align 4
byte_10047408	db 0			; DATA XREF: sub_1002D900+8r
byte_10047409	db 0			; DATA XREF: sub_1002D900r
					; sub_1002D900+34r ...
		dw 3
		dd 40003h, 10004h, 2 dup(12007h), 2 dup(12008h), 0Ah dup(10001h)
		dd 400C400Ch, 400C0001h, 10001h, 400C0001h, 10001h, 14008h
		dd 10001h, 14007h, 3 dup(10001h), 2 dup(40090001h), 14009h
		dd 10001h, 20090009h, 2	dup(20092009h),	5 dup(10001h)
		dd 30003h, 10003h, 3 dup(10001h), 40001h, 40004h, 4 dup(10001h)
		dd 40084008h, 14008h, 3	dup(10001h), 1050105h, 10105h
		dd 2 dup(10001h), 40090001h, 40094009h,	14009h,	2 dup(10001h)
		dd 2 dup(20092009h), 40094009h,	14h dup(10001h), 10003h
		dd 40001h, 26h dup(10001h)
off_10047608	dd offset aGenuineintel	; DATA XREF: sub_1002DBE0+95o
					; sub_1002DD00:loc_1002DDA0r
					; "GenuineIntel"
		dd offset aAuthenticamd	; "AuthenticAMD"
		dd offset aCyrixinstead	; "CyrixInstead"
		dd offset aCentaurhauls	; "CentaurHauls"
		dd offset aNexgendriven	; "NexGenDriven"
		dd offset aGenuinetmx86	; "GenuineTMx86"
		dd offset aRiseriserise	; "RiseRiseRise"
		dd offset aUmcUmcUmc	; "UMC UMC UMC "
		dd offset aSisSisSis	; "Sis Sis Sis "
		dd offset dword_1004732C+3Ch
dword_10047630	dd 0Ah			; DATA XREF: sub_1002DBE0+D2o
off_10047634	dd offset aNistP256	; DATA XREF: .data:1004922Co
					; "NIST-P256"
		dd 0
		dd 100h
		dd offset aFfffffff0000_1 ; "FFFFFFFF0000000100000000000000000000000"...
		dd offset aFfffffff0000_0 ; "FFFFFFFF0000000100000000000000000000000"...
		dd offset a5ac635d8aa3a93 ; "5AC635D8AA3A93E7B3EBBD55769886BC651D06B"...
		dd offset a6b17d1f2e12c42 ; "6B17D1F2E12C4247F8BCE6E563A440F277037D8"...
		dd offset a4fe342e2fe1a7f ; "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE335"...
		dd offset aFfffffff000000 ; "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAA"...
		dd 1
off_1004765C	dd offset aNistP384	; DATA XREF: .data:10049230o
					; "NIST-P384"
		dd 0
		dd 180h
		dd offset aFfffffffffff_1 ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset aFfffffffffff_0 ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset aB3312fa7e23ee7 ; "B3312FA7E23EE7E4988E056BE3F82D19181D9C6"...
		dd offset aAa87ca22be8b05 ; "AA87CA22BE8B05378EB1C71EF320AD746E1D3B6"...
		dd offset a3617de4a96262c ; "3617DE4A96262C6F5D9E98BF9292DC29F8F41DB"...
		dd offset aFfffffffffffff ; "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd 1
off_10047684	dd offset aNistP521	; DATA XREF: .data:10049234o
					; "NIST-P521"
		dd 0
		dd 209h
		dd offset a01ffffffffff_0 ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset a01ffffffffffff ; "01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"...
		dd offset a0051953eb9618e ; "0051953EB9618E1C9A1F929A21A0B68540EEA2D"...
		dd offset a00c6858e06b704 ; "00C6858E06B70404E9CD9E3ECB662395B4429C6"...
		dd offset a011839296a789a ; "011839296A789A3BC0045C8A5FB42C7D1BD998F"...
		dd offset dword_1003F020+2D8h
		dd 1, 0
		dd 0FFFFFFFh, 1FFFFFFFh
dword_100476B8	dd 2, 2	dup(0)		; DATA XREF: sub_10036640+69o
		dd 0FFFF800h, 1FFFFFFFh, 0FFFFFFFh, 1FBFFFFFh, 1FFFFFFh
		dd 0
dword_100476DC	dd 0			; DATA XREF: sub_10035400+D4r
		align 40h
dword_10047700	dd 1FFFFFFFh		; DATA XREF: sub_10035400+105r
		dd 0FFFFFFFh, 1FFFFFFFh, 3FFh, 2 dup(0)
		dd 200000h, 0F000000h, 0FFFFFFFh
dword_10047724	dd 1FFFFFFEh		; DATA XREF: sub_10035400+136r
		dd 0FFFFFFFh, 1FFFFFFFh, 7FFh, 2 dup(0)
		dd 400000h, 0E000000h, 1FFFFFFFh
dword_10047748	dd 11522878h, 0E730D41h, 0DB60179h, 4AFE2FFh, 12883ADDh
					; DATA XREF: sub_10036020+AFo
		dd 0CADDD88h, 119E7EDCh, 0D4A6EABh, 3120BEEh, 1D2AAC15h
		dd 0F25357Ch, 19E45CDDh, 5C721D0h, 1992C5A5h, 0A237487h
		dd 154BA21h, 14B10BBh, 0AE3FE3h, 0D41A576h, 922FC51h, 234994Fh
		dd 60B60D3h, 164586AEh,	0CE95F18h, 1FE49073h, 3FA36CCh
		dd 5EBCD2Ch, 0B402F2Fh,	15C70BFh, 1561925Ch, 5A26704h
		dd 0DA91E90h, 0CDC1C7Fh, 1EA12446h, 0E1ADE1Eh, 0EC91F22h
		dd 26F7778h, 566847Eh, 0A0BEC9Eh, 234F453h, 1A31F21Ah
		dd 0D85E75Ch, 56C7109h,	0A267A00h, 0B57C050h, 98FB57h
		dd 0AA837CCh, 60C0792h,	0CFA5E19h, 61BAB9Eh, 589E39Bh
		dd 0A324C5h, 7D6DEE7h, 2976E4Bh, 1FC4124Ah, 0A8C244Bh
		dd 1CE86762h, 0CD61C7Eh, 1831C8E0h, 75774E1h, 1D96A5A9h
		dd 843A649h, 0C3AB0FAh,	6E2E7D5h, 7673A2Ah, 178B65E8h
		dd 4003E9Bh, 1A1F11C2h,	7816EAh, 0F643E11h, 58C43DFh, 0F423FC2h
		dd 19633FFAh, 891F2B2h,	123C231Ch, 46ADD8Ch, 54700DDh
		dd 59E2B17h, 172DB40Fh,	83E277Dh, 0B0DD609h, 0FD1DA12h
		dd 35C6E52h, 19EDE20Ch,	0D19E0C0h, 97D0F40h, 0B015B19h
		dd 449E3F5h, 0E10C9Eh, 33AB581h, 56A67ABh, 577734Dh, 1DDDC062h
		dd 0C57B10Dh, 149B39Dh,	26A9E7Bh, 0C35DF9Fh, 48764CDh
		dd 76DBCCAh, 0CA4B366h,	0E9303ABh, 1A7480E7h, 57E9E81h
		dd 1E13EB50h, 0F466CF3h, 6F16B20h, 4BA3173h, 0C168C33h
		dd 15CB5439h, 6A38E11h,	73658BDh, 0B29564Fh, 3F6DC5Bh
		dd 53B97Eh, 1322C4C0h, 65DD7FFh, 3A1E4F6h, 14E614AAh, 9246317h
		dd 1BC83ACAh, 0AD97EEDh, 0D38CE4Ah, 0F82B006h, 341F077h
		dd 0A6ADD89h, 4894ACDh,	9F162D5h, 0F8410EFh, 1B266A56h
		dd 0D7F223h, 3E0CB92h, 0E39B672h, 6A2901Ah, 69A8556h, 7E7C0h
		dd 9B7D8D3h, 309A80h, 1AD05F7Fh, 0C2FB5DDh, 0CBFD41Dh
		dd 9CEB638h, 1051825Ch,	0DA0CF5Bh, 812E881h, 6F35669h
		dd 6A56F2Ch, 1DF8D184h,	345820h, 1477D477h, 1645DB1h, 0BE80C51h
		dd 0C22BE3Eh, 0E35E65Ah, 1AEB7AA0h, 0C375315h, 0F67BC99h
		dd 7FDD7B9h, 191FC1BEh,	61235Dh, 2C184E9h, 1C5A839h, 47A1E26h
		dd 0B7CB456h, 93E225Dh,	14F3C6EDh, 0CCC1AC9h, 17FE37F3h
		dd 4988989h, 1A90C502h,	2F32042h, 0A17769Bh, 0AFD8C7Ch
		dd 8191C6Eh, 1DCDB237h,	16200C0h, 107B32A1h, 66C08DBh
		dd 10D06A02h, 3FC93h, 5620023h,	16722B27h, 68B5C59h, 270FCFCh
		dd 0FAD0ECCh, 0E5DE1C2h, 0EAB466Bh, 2FC513Ch, 407F75Ch
		dd 0BAAB133h, 9705FE9h,	0B88B8E7h, 734C993h, 1E1FF8Fh
		dd 19156970h, 0ABD0F00h, 10469EA7h, 3293AC0h, 0CDC98AAh
		dd 1D843FDh, 0E14BFE8h,	15BE825Fh, 8B5212h, 0EB3FB67h
		dd 81CBD29h, 0BC62F16h,	2B6FCC7h, 0F5A4E29h, 13560B66h
		dd 0C0B6AC2h, 51AE690h,	0D41E271h, 0F3E9BD4h, 1D70AABh
		dd 1029F72h, 73E1C35h, 0EE70FBCh, 0AD81BAFh, 9ECC49Ah
		dd 86C741Eh, 0FE6BE30h,	176752E7h, 23D416h, 1F83DE85h
		dd 27DE188h, 66F70B8h, 181CD51Fh, 96B6E4Ch, 188F2335h
		dd 0A5DF759h, 17A77EB6h, 0FEB0E73h, 154AE914h, 2F3EC51h
		dd 3826B59h, 0B91F17Dh,	1C72949h, 1362BF0Ah, 0E23FDDFh
		dd 0A5614B0h, 0F7D8Fh, 79061h, 823D9D2h, 8213F39h, 1128AE0Bh
		dd 0D095D05h, 0B85C0C2h, 1ECB2EFh, 24DDC84h, 0E35E901h
		dd 18411A4Ah, 0F5DDC3Dh, 3786689h, 52260E8h, 5AE3564h
		dd 542B10Dh, 8D93A45h, 19952AA4h, 996CC41h, 1051A729h
		dd 4BE3499h, 52B23AAh, 109F307Eh, 6F5B6BBh, 1F84E1E7h
		dd 77A0CFAh, 10C4DF3Fh,	25A02EAh, 0B048035h, 0E31DE66h
		dd 0C6ECAA3h, 28EA335h,	2886024h, 1372F020h, 0F55D35h
		dd 15E4684Ch, 0F2A9E17h, 1A4A7529h, 0CB7BEB1h, 0B2A78A1h
		dd 1AB21F1Fh, 6361CCFh,	6C9179Dh, 0B135627h, 1267B974h
		dd 4408BADh, 1CBFF658h,	0E3D6511h, 0C7D76Fh, 1CC7A69h
		dd 0E7EE31Bh, 54FAB4Fh,	2B914Fh, 1AD27A30h, 0CD3579Eh
		dd 0C50124Ch, 50DAA90h,	0B13F72h, 0B06AA75h, 70F5CC6h
		dd 1649E5AAh, 84A5312h,	329043Ch, 41C4011h, 13D32411h
		dd 0B04A838h, 0D760D2Dh, 1713B532h, 0BAA0C03h, 84022ABh
		dd 6BCF5C1h, 2F45379h, 18AE070h, 18C9E11Eh, 20BCA9Ah, 66F496Bh
		dd 3EEF294h, 67500D2h, 0D7F613Ch, 2DBBEBh, 0B741038h, 0E04133Fh
		dd 1582968Dh, 0BE985F7h, 1ACBC1Ah, 1A6A939Fh, 33E50F6h
		dd 0D665ED4h, 0B4B7BD6h, 1E5A3799h, 6B33847h, 17FA56FFh
		dd 65EF930h, 21DC4Ah, 2B37659h,	450FE17h, 0B357B65h, 0DF5EFACh
		dd 15397BEFh, 9D35A7Fh,	112AC15Fh, 624E62Eh, 0A90AE2Fh
		dd 107EECD2h, 1F69BBEh,	77D6BCEh, 5741394h, 13C684FCh
		dd 950C910h, 725522Bh, 0DC78583h, 40EEABBh, 1FDE328Ah
		dd 0BD61D96h, 0D28C387h, 9E77D89h, 12550C40h, 759CB7Dh
		dd 367EF34h, 0AE2A960h,	91B8BDCh, 93462A9h, 0F469EFh, 0B2E9AEFh
		dd 0D2CA771h, 54E1F42h,	7AAA49h, 6316ABBh, 2413C8Eh, 5425BF9h
		dd 1BED3E3Ah, 0F272274h, 1F5E7326h, 6416517h, 0EA27072h
		dd 9CEDEA7h, 6E7633h, 7C91952h,	0D806DCEh, 8E2A7E1h, 0E421E1Ah
		dd 418C9E1h, 1DBC890h, 1B395C36h, 0A1DC175h, 1DC4EF73h
		dd 8956F34h, 0E4B5CF2h,	1B0D3A18h, 3194A36h, 6C2641Fh
		dd 0E44124Ch, 0A2F4EAAh, 0A8C25BAh, 0F927ED7h, 627B614h
		dd 7371CCAh, 0BA16694h,	417BC03h, 7C0A7E3h, 9C35C19h, 1168A205h
		dd 8B6B00Dh, 10E3EDC9h,	9C19BF2h, 5882229h, 1B2B4162h
		dd 0A5CEF1Ah, 1543622Bh, 9BD433Eh, 364E04Dh, 7480792h
		dd 5C9B5B3h, 0E85FF25h,	408EF57h, 1814CFA4h, 121B41Bh
		dd 0D248A0Fh, 3B05222h,	39BB16Ah, 0C75966Dh, 0A038113h
		dd 0A4A1769h, 11FBC6Ch,	917E50Eh, 0EEC3DA8h, 169D6EACh
		dd 10C1699h, 0A416153h,	0F724912h, 15CD60B7h, 4ACBAD9h
		dd 5EFC5FAh, 0F150ED7h,	122B51h, 1104B40Ah, 0CB7F442h
		dd 0FBB28FFh, 6AC53CAh,	196142CCh, 7BF0FA9h, 957651h, 4E0F215h
		dd 0ED439F8h, 3F46BD5h,	5ACE82Fh, 110916B6h, 6DB078h, 0FFD7D57h
		dd 0F2ECAACh, 0CA86DECh, 15D6B2DAh, 965ECC9h, 1C92B4C2h
		dd 1F3811h, 1CB080F5h, 2D8B804h, 19D1C12Dh, 0F20BD46h
		dd 1951FA7h, 0A3656C3h,	523A425h, 0FCD0692h, 0D44DDC8h
		dd 131F0F5Bh, 0AF80E4Ah, 0CD9FC74h, 99BB618h, 2DB944Ch
		dd 0A673090h, 1C210E1h,	178C8D23h, 1474383h, 10B8743Dh
		dd 985A55Bh, 2E74779h, 576138h,	9587927h, 133130FAh, 0BE05516h
		dd 9F4D619h, 0BB62570h,	99EC591h, 0D9468FEh, 1D07782Dh
		dd 0FC72E0Bh, 701B298h,	1863863Bh, 85954B8h, 121A0C36h
		dd 9E7FEDFh, 0F64B429h,	9B9D71Eh, 14E2F5D8h, 0F858D3Ah
		dd 942EEA8h, 0DA5B765h,	6EDAFFFh, 0A9D18CCh, 0C65E4BAh
		dd 1C747E86h, 0E4EA915h, 1981D7A1h, 8395659h, 52ED4E2h
		dd 87D43B7h, 37AB11Bh, 19D292CEh, 0F8D4692h, 18C3053Fh
		dd 8863E13h, 4C146C0h, 6BDF55Ah
		dd 4E4457Dh, 16152289h,	0AC78EC2h, 1A59C5A2h, 2028B97h
		dd 71C2D01h, 295851Fh, 404747Bh, 878558Dh, 7D29AA4h, 13D8341Fh
		dd 8DAEFD7h, 139C972Dh,	6B7EA75h, 0D4A9DDEh, 0FF163D8h
		dd 81D55D7h, 0A5BEF68h,	0B7B30D8h, 0BE73D6Fh, 0AA88141h
		dd 0D976C81h, 7E7A9CCh,	18BEB771h, 0D773CBDh, 13F51951h
dword_10047FB0	dd 9D0C177h		; DATA XREF: sub_100339D0+2Dr
dword_10047FB4	dd 1C49A78h		; DATA XREF: sub_100339D0+53r
dword_10047FB8	dd 7FFFFFF8h, 3FFFFFFCh, 7FFFFFFCh, 40001FFCh, 7FFFFFFCh
		dd 3FFFFFFCh, 80FFFFFCh, 37FFFFFCh, 7FFFFFFCh, 80000000h
		dd 1, 0FFFFFFFFh, 0
		dd 80000001h, 0FFFFFFFEh, 1, 7FFFFFFFh
dword_10047FFC	dd 0			; DATA XREF: sub_10036D70+9Ao
		dd 2 dup(8)
		dd offset dword_10047FB8+24h
		dd 10000000h, 20000000h, 0
; struct _EXCEPTION_POINTERS ExceptionInfo
ExceptionInfo	_EXCEPTION_POINTERS <offset dword_1004B760, offset dword_1004B7B0>
					; DATA XREF: sub_10037C31+C3o
		dd 86808006h, 808180h, 86031000h, 80828680h, 45050514h
		dd 85854545h, 585h, 50803030h, 8008080h, 38272800h, 805750h
		dd 30370007h, 88505030h, 20000000h, 80888028h, 80h
aHhhXppwpp	db '```hhh',8,8,7,'xppwpp',8,8,0
		dw 800h
		dd 7000800h, 8,	0
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 2			; SEHandlerCount
		align 10h
___safe_se_handler_table dd rva	sub_10037584 ; DATA XREF: .rdata:100480C0o
		dd rva sub_10037F51
dword_100480D8	dd 0FFFFFFFEh, 0	; DATA XREF: DllEntryPoint-25Ao
		dd 0FFFFFFB4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_10037C10
		align 8
		dd offset sub_10037A20
		dd offset sub_10037A34
		dd 0
		dd offset sub_10037A62
		dd offset sub_10037A76
		align 10h
		dd offset sub_10037AA5
		dd offset sub_10037AB9
		dd 0
		dd offset sub_10037AEA
		dd offset sub_10037AFE
		align 8
		dd offset sub_10037B19
		dd offset sub_10037B2D
		dd 0
		dd offset sub_10037B4E
		dd offset sub_10037B62
		align 10h
		dd offset sub_10037B93
		dd offset sub_10037BA7
		dd 0
		dd offset sub_10037BDA
		dd offset sub_10037BEE
		align 8
stru_10048158	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_10037E74+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10037E74
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_10037EBA	; ScopeRecord.FilterFunc
		dd offset loc_10037ECE	; ScopeRecord.HandlerFunc
__IMPORT_DESCRIPTOR_nssutil3 dd	rva off_100482CC ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aNssutil3_dll	; DLL Name
		dd rva __imp_SECITEM_CompareItem_Util ;	Import Address Table
__IMPORT_DESCRIPTOR_libnspr4 dd	rva off_10048240 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aLibnspr4_dll	; DLL Name
		dd rva PR_NewCondVar	; Import Address Table
__IMPORT_DESCRIPTOR_ADVAPI32 dd	rva off_100481EC ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aAdvapi32_dll	; DLL Name
		dd rva SystemFunction036 ; Import Address Table
__IMPORT_DESCRIPTOR_msvcrt dd rva off_10048284 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcrt_dll	; DLL Name
		dd rva strncmp		; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_100481F4 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva GetSystemTimeAsFileTime ; Import	Address	Table
		dd 5 dup(0)
;
; Import names for ADVAPI32.dll
;
off_100481EC	dd rva word_100485A4	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_ADVAPI32o
		dd 0
;
; Import names for KERNEL32.dll
;
off_100481F4	dd rva word_100487DE	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_100487C0
		dd rva word_100487A4
		dd rva word_10048790
		dd rva word_10048772
		dd rva word_1004876A
		dd rva word_10048754
		dd rva word_10048748
		dd rva word_10048732
		dd rva word_1004871E
		dd rva word_1004870A
		dd rva word_100486F6
		dd rva word_100486E0
		dd rva word_100486CA
		dd rva word_1004868E
		dd rva word_10048674
		dd rva word_1004869E
		dd rva word_100486B2
		dd 0
;
; Import names for libnspr4.dll
;
off_10048240	dd rva word_100484E6	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_libnspr4o
		dd rva word_100484F6
		dd rva word_1004850C
		dd rva word_10048520
		dd rva word_10048532
		dd rva word_10048546
		dd rva word_10048550
		dd rva word_1004855C
		dd rva word_10048566
		dd rva word_10048570
		dd rva word_1004857A
		dd rva word_100484DC
		dd rva word_100484D0
		dd rva word_100484B4
		dd rva word_100484A2
		dd rva word_100484C2
		dd 0
;
; Import names for msvcrt.dll
;
off_10048284	dd rva word_100485E2	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_msvcrto
		dd rva word_100485EC
		dd rva word_100485F4
		dd rva word_100485FC
		dd rva word_10048606
		dd rva word_1004860E
		dd rva word_10048618
		dd rva word_10048622
		dd rva word_1004862C
		dd rva word_100485D8
		dd rva word_10048806
		dd rva word_100485CE
		dd rva word_1004864C
		dd rva word_1004865A
		dd rva word_10048666
		dd rva word_100485C6
		dd rva word_10048636
		dd 0
;
; Import names for nssutil3.dll
;
off_100482CC	dd rva word_10048478	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_nssutil3o
		dd rva word_1004845E
		dd rva word_10048444
		dd rva word_1004842C
		dd rva word_10048414
		dd rva word_100483FC
		dd rva word_100483E6
		dd rva word_100483CE
		dd rva word_100483B8
		dd rva word_1004839E
		dd rva word_1004838A
		dd rva word_10048374
		dd rva word_10048362
		dd rva word_1004834E
		dd rva word_10048338
		dd rva word_10048326
		dd rva word_10048314
		dd 0
word_10048314	dw 5Dh			; DATA XREF: .rdata:1004830Co
		db 'PORT_Alloc_Util',0
word_10048326	dw 66h			; DATA XREF: .rdata:10048308o
		db 'PORT_Free_Util',0
		align 4
word_10048338	dw 6Fh			; DATA XREF: .rdata:10048304o
		db 'PORT_SetError_Util',0
		align 2
word_1004834E	dw 77h			; DATA XREF: .rdata:10048300o
		db 'PORT_ZAlloc_Util',0
		align 2
word_10048362	dw 78h			; DATA XREF: .rdata:100482FCo
		db 'PORT_ZFree_Util',0
word_10048374	dw 67h			; DATA XREF: .rdata:100482F8o
		db 'PORT_GetError_Util',0
		align 2
word_1004838A	dw 5Bh			; DATA XREF: .rdata:100482F4o
		db 'NSS_SecureMemcmp',0
		align 2
word_1004839E	dw 7Ah			; DATA XREF: .rdata:100482F0o
		db 'SECITEM_AllocItem_Util',0
		align 4
word_100483B8	dw 65h			; DATA XREF: .rdata:100482ECo
		db 'PORT_FreeArena_Util',0
word_100483CE	dw 64h			; DATA XREF: .rdata:100482E8o
		db 'PORT_ArenaZAlloc_Util',0
word_100483E6	dw 6Ah			; DATA XREF: .rdata:100482E4o
		db 'PORT_NewArena_Util',0
		align 4
word_100483FC	dw 7Dh			; DATA XREF: .rdata:100482E0o
		db 'SECITEM_CopyItem_Util',0
word_10048414	dw 81h			; DATA XREF: .rdata:100482DCo
		db 'SECITEM_FreeItem_Util',0
word_1004842C	dw 5Eh			; DATA XREF: .rdata:100482D8o
		db 'PORT_ArenaAlloc_Util',0
		align 4
word_10048444	dw 90h			; DATA XREF: .rdata:100482D4o
		db 'SECOID_FindOIDTag_Util',0
		align 2
word_1004845E	dw 88h			; DATA XREF: .rdata:100482D0o
		db 'SECITEM_ZfreeItem_Util',0
		align 4
word_10048478	dw 7Ch			; DATA XREF: .rdata:off_100482CCo
		db 'SECITEM_CompareItem_Util',0
		align 4
aNssutil3_dll	db 'nssutil3.dll',0     ; DATA XREF: .rdata:10048180o
		align 2
word_100484A2	dw 52h			; DATA XREF: .rdata:10048278o
		db 'PR_DestroyLock',0
		align 4
word_100484B4	dw 0FBh			; DATA XREF: .rdata:10048274o
		db 'PR_NewLock',0
		align 2
word_100484C2	dw 27h			; DATA XREF: .rdata:1004827Co
		db 'PR_CallOnce',0
word_100484D0	dw 16Eh			; DATA XREF: .rdata:10048270o
		db 'PR_Unlock',0
word_100484DC	dw 0E8h			; DATA XREF: .rdata:1004826Co
		db 'PR_Lock',0
word_100484E6	dw 0FAh			; DATA XREF: .rdata:off_10048240o
		db 'PR_NewCondVar',0
word_100484F6	dw 10Ah			; DATA XREF: .rdata:10048244o
		db 'PR_NotifyAllCondVar',0
word_1004850C	dw 10Bh			; DATA XREF: .rdata:10048248o
		db 'PR_NotifyCondVar',0
		align 10h
word_10048520	dw 173h			; DATA XREF: .rdata:1004824Co
		db 'PR_WaitCondVar',0
		align 2
word_10048532	dw 50h			; DATA XREF: .rdata:10048250o
		db 'PR_DestroyCondVar',0
word_10048546	dw 12Ah			; DATA XREF: .rdata:10048254o
		db 'PR_Read',0
word_10048550	dw 32h			; DATA XREF: .rdata:10048258o
		db 'PR_Close',0
		align 4
word_1004855C	dw 137h			; DATA XREF: .rdata:1004825Co
		db 'PR_Seek',0
word_10048566	dw 10Dh			; DATA XREF: .rdata:10048260o
		db 'PR_Open',0
word_10048570	dw 85h			; DATA XREF: .rdata:10048264o
		db 'PR_Free',0
word_1004857A	dw 0A4h			; DATA XREF: .rdata:10048268o
		db 'PR_GetLibraryFilePathname',0
aLibnspr4_dll	db 'libnspr4.dll',0     ; DATA XREF: .rdata:10048194o
		align 4
word_100485A4	dw 26Ch			; DATA XREF: .rdata:off_100481ECo
		db 'SystemFunction036',0
aAdvapi32_dll	db 'ADVAPI32.dll',0     ; DATA XREF: .rdata:100481A8o
		align 2
word_100485C6	dw 534h			; DATA XREF: .rdata:100482C0o
		db 'time',0
		align 2
word_100485CE	dw 4EAh			; DATA XREF: .rdata:100482B0o
		db 'memcpy',0
		align 4
word_100485D8	dw 4EEh			; DATA XREF: .rdata:100482A8o
		db 'memset',0
		align 2
word_100485E2	dw 51Fh			; DATA XREF: .rdata:off_10048284o
		db 'strncmp',0
word_100485EC	dw 4FDh			; DATA XREF: .rdata:10048288o
		db 'rand',0
		align 4
word_100485F4	dw 4A6h			; DATA XREF: .rdata:1004828Co
		db 'free',0
		align 4
word_100485FC	dw 4DEh			; DATA XREF: .rdata:10048290o
		db 'malloc',0
		align 2
word_10048606	dw 476h			; DATA XREF: .rdata:10048294o
		db 'abort',0
word_1004860E	dw 485h			; DATA XREF: .rdata:10048298o
		db 'calloc',0
		align 4
word_10048618	dw 4C3h			; DATA XREF: .rdata:1004829Co
		db 'islower',0
word_10048622	dw 4C7h			; DATA XREF: .rdata:100482A0o
		db 'isupper',0
word_1004862C	dw 4C0h			; DATA XREF: .rdata:100482A4o
		db 'isdigit',0
word_10048636	dw 53Ah			; DATA XREF: .rdata:100482C4o
		db 'toupper',0
aMsvcrt_dll	db 'msvcrt.dll',0       ; DATA XREF: .rdata:100481BCo
		align 4
word_1004864C	dw 6Ah			; DATA XREF: .rdata:100482B4o
		db '_XcptFilter',0
word_1004865A	dw 1D5h			; DATA XREF: .rdata:100482B8o
		db '_initterm',0
word_10048666	dw 101h			; DATA XREF: .rdata:100482BCo
		db '_amsg_exit',0
		align 4
word_10048674	dw 294h			; DATA XREF: .rdata:10048230o
		db 'QueryPerformanceCounter',0
word_1004868E	dw 1D4h			; DATA XREF: .rdata:1004822Co
		db 'GetTickCount',0
		align 2
word_1004869E	dw 145h			; DATA XREF: .rdata:10048234o
		db 'GetDiskFreeSpaceA',0
word_100486B2	dw 1E0h			; DATA XREF: .rdata:10048238o
		db 'GetVolumeInformationA',0
word_100486CA	dw 13Eh			; DATA XREF: .rdata:10048228o
		db 'GetCurrentThreadId',0
		align 10h
word_100486E0	dw 13Ch			; DATA XREF: .rdata:10048224o
		db 'GetCurrentProcessId',0
word_100486F6	dw 13Bh			; DATA XREF: .rdata:10048220o
		db 'GetCurrentProcess',0
word_1004870A	dw 10Dh			; DATA XREF: .rdata:1004821Co
		db 'GetComputerNameA',0
		align 2
word_1004871E	dw 16Fh			; DATA XREF: .rdata:10048218o
		db 'GetLogicalDrives',0
		align 2
word_10048732	dw 1F9h			; DATA XREF: .rdata:10048214o
		db 'GlobalMemoryStatus',0
		align 4
word_10048748	dw 2C7h			; DATA XREF: .rdata:10048210o
		db 'RtlUnwind',0
word_10048754	dw 21Dh			; DATA XREF: .rdata:1004820Co
		db 'InterlockedExchange',0
word_1004876A	dw 342h			; DATA XREF: .rdata:10048208o
		db 'Sleep',0
word_10048772	dw 21Bh			; DATA XREF: .rdata:10048204o
		db 'InterlockedCompareExchange',0
		align 10h
word_10048790	dw 34Ah			; DATA XREF: .rdata:10048200o
		db 'TerminateProcess',0
		align 4
word_100487A4	dw 35Bh			; DATA XREF: .rdata:100481FCo
		db 'UnhandledExceptionFilter',0
		align 10h
word_100487C0	dw 336h			; DATA XREF: .rdata:100481F8o
		db 'SetUnhandledExceptionFilter',0
word_100487DE	dw 1C0h			; DATA XREF: .rdata:off_100481F4o
		db 'GetSystemTimeAsFileTime',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:100481D0o
		align 2
word_10048806	dw 35Ah			; DATA XREF: .rdata:100482ACo
		db '_strdup',0
;
; Export directory for freebl3.dll
;
		dd 0			; Characteristics
		dd 54275E36h		; TimeDateStamp: Sun Sep 28 01:02:46 2014
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aFreebl3_dll	; Name
		dd 1			; Base
		dd 1			; NumberOfFunctions
		dd 1			; NumberOfNames
		dd rva off_10048838	; AddressOfFunctions
		dd rva off_1004883C	; AddressOfNames
		dd rva word_10048840	; AddressOfNameOrdinals
;
; Export Address Table for freebl3.dll
;
off_10048838	dd rva FREEBL_GetVector	; DATA XREF: .rdata:1004882Co
;
; Export Names Table for freebl3.dll
;
off_1004883C	dd rva aFreebl_getvect	; DATA XREF: .rdata:10048830o
					; "FREEBL_GetVector"
;
; Export Ordinals Table	for freebl3.dll
;
word_10048840	dw 0			; DATA XREF: .rdata:10048834o
aFreebl3_dll	db 'freebl3.dll',0      ; DATA XREF: .rdata:1004881Co
aFreebl_getvect	db 'FREEBL_GetVector',0 ; DATA XREF: .rdata:off_1004883Co
		align 800h
_rdata		ends

; Section 3. (virtual address 00049000)
; Virtual size			: 00004B78 (  19320.)
; Section size in file		: 00000800 (   2048.)
; Offset to raw	data for section: 00047000
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10049000h
dword_10049000	dd 0			; DATA XREF: sub_10018900+2Fr
		dd 2 dup(0)
		dd offset off_1003FA68
		dd offset off_1003FA90
		dd offset off_1003FAB8
		dd 35h dup(0)
dword_100490EC	dd 1			; DATA XREF: sub_1001F4F0+181r
					; sub_1001F4F0:loc_1001F72Ar
dword_100490F0	dd 1			; DATA XREF: sub_100288A0+12Ar
					; sub_100288A0+199w ...
		dd 0
		dd 2010100h, 2 dup(3020201h), 4030302h,	3020201h, 2 dup(4030302h)
		dd 5040403h, 3020201h, 2 dup(4030302h),	5040403h, 4030302h
		dd 2 dup(5040403h), 6050504h, 3020201h,	2 dup(4030302h)
		dd 5040403h, 4030302h, 2 dup(5040403h),	6050504h, 4030302h
		dd 2 dup(5040403h), 6050504h, 5040403h,	2 dup(6050504h)
		dd 7060605h, 3020201h, 2 dup(4030302h),	5040403h, 4030302h
		dd 2 dup(5040403h), 6050504h, 4030302h,	2 dup(5040403h)
		dd 6050504h, 5040403h, 2 dup(6050504h),	7060605h, 4030302h
		dd 2 dup(5040403h), 6050504h, 5040403h,	2 dup(6050504h)
		dd 7060605h, 5040403h, 2 dup(6050504h),	7060605h, 6050504h
		dd 2 dup(7060605h), 8070706h
		dd offset aUnknownResultC ; "unknown result code"
		dd offset aBooleanTrue	; "boolean true"
		dd offset aBooleanFalse	; "boolean false"
		dd offset aOutOfMemory	; "out of memory"
		dd offset aArgumentOutOfR ; "argument out of range"
		dd offset aInvalidInputPa ; "invalid input parameter"
		dd offset aResultIsUndefi ; "result is undefined"
		dd offset dword_10046B0C+634h
dword_10049218	dd 40h			; DATA XREF: sub_10028D30+11r
					; sub_10029110+10r ...
dword_1004921C	dd 0FFFFFFFFh		; DATA XREF: sub_1002D600r
					; sub_1002D600+11w ...
dword_10049220	dd 0			; DATA XREF: sub_1002E5F0+Cr
		dd 2 dup(0)
		dd offset off_10047634
		dd offset off_1004765C
		dd offset off_10047684
		dd 35h dup(0)
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_10001120+6r
					; sub_10002750+6r ...
dword_10049310	dd 44BF19B1h		; DATA XREF: sub_10037C31+B0r
					; sub_10037F78+2Bw ...
		align 10h
dword_10049320	dd 19930520h, 3	dup(0)	; DATA XREF: .text:10037DBAo
					; sub_10037DC1+2o
dword_10049330	dd 0FFFFFFFFh		; DATA XREF: DllEntryPoint-242w
					; sub_10037C10w
		dd 0FFFFFFFFh, 400h, 0FFFFFC01h, 35h, 0Bh, 40h,	3FFh, 80h
		dd 0FFFFFF81h, 18h, 8, 20h, 7Fh, 2 dup(0)
		dd 4002A000h, 2	dup(0)
		dd 4005C800h, 2	dup(0)
		dd 4008FA00h, 2	dup(0)
		dd 400C9C40h, 2	dup(0)
		dd 400FC350h, 2	dup(0)
		dd 4012F424h, 0
		dd 80000000h, 40169896h, 0
		dd 20000000h, 4019BEBCh, 0
		dd 0C9BF0400h, 40348E1Bh, 0A1000000h, 1BCECCEDh, 404ED3C2h
		dd 0B59EF020h, 0ADA82B70h, 40699DC5h, 25FD5DD0h, 4F8E1AE5h
		dd 4083EB19h, 95D79671h, 8D050E43h, 409EAF29h, 44A0BFF9h
		dd 8F1281EDh, 40B98281h, 0A6D53CBFh, 1F49FFCFh,	40D3C278h
		dd 8CE0C66Fh, 47C980E9h, 41A893BAh, 556B85BCh, 0F78D3927h
		dd 427CE070h, 0DE8EDDBCh, 0EBFB9DF9h, 4351AA7Eh, 0E376E6A1h
		dd 2F29F2CCh, 44268184h, 0AA171028h, 0E310AEF8h, 44FAC4C5h
		dd 0F3D4A7EBh, 4AE1EBF7h, 45CF957Ah, 91C7CC65h,	0A0AEA60Eh
		dd 46A3E319h, 0C17650Dh, 75868175h, 4D48C976h, 0A7E44258h
		dd 353B3993h, 53EDB2B8h, 5DE5A74Dh, 3B5DC53Dh, 5A929E8Bh
		dd 0F0A65DFFh, 54C020A1h, 61378CA5h, 5A8BFDD1h,	5D25D88Bh
		dd 67DBF989h, 0F3F895AAh, 0C8A2BF27h, 6E80DD5Dh, 979BC94Ch
		dd 52028A20h, 7525C460h, 0
		dd 0CCCDCCCDh, 0CCCCCCCCh, 3FFBCCCCh, 0D70A3D71h, 0A3D70A3h
		dd 3FF8A3D7h, 0DF3B645Ah, 6E978D4Fh, 3FF58312h,	652CD3C3h
		dd 1758E219h, 3FF1D1B7h, 84230FD0h, 0AC471B47h,	3FEEA7C5h
		dd 69B6A640h, 0BD05AF6Ch, 3FEB8637h, 42BC3D33h,	94D5E57Ah
		dd 3FE7D6BFh, 0CEFDFDC2h, 77118461h, 3FE4ABCCh,	0E15B4C2Fh
		dd 94BEC44Dh, 3FC9E695h, 3B53C492h, 14CD4475h, 3FAF9ABEh
		dd 94BA67DEh, 1EAD4539h, 3F94CFB1h, 0E2C62324h,	313BBABCh
		dd 3F7A8B61h, 0C1595561h, 7C53B17Eh, 3F5FBB12h,	8D2FEED7h
		dd 8592BE06h, 3F44FB15h, 0E9A53F24h, 0EA27A539h, 3F2AA87Fh
		dd 0E4A1AC7Dh, 467C64BCh, 3E55DDD0h, 0CC067B63h, 83775423h
		dd 3D8191FFh, 193AFA91h, 4325637Ah, 3CACC031h, 38D18921h
		dd 0B8974782h, 3BD7FD00h, 85888DCh, 0E3E8B11Bh,	3B03A686h
		dd 424584C6h, 7599B607h, 3A2EDB37h, 0D21C7133h,	0EE32DB23h
		dd 395A9049h, 0C0BE87A6h, 82A5DA57h, 32B5A2A6h,	11B268E2h
		dd 449F52A7h, 2C10B759h, 2DE44925h, 534F3436h, 256BCEAEh
		dd 0A404598Fh, 7DC2DEC0h, 1EC6E8FBh, 5A88E79Eh,	0BF3C9157h
		dd 18228350h, 62654B4Eh, 0AF8F83FDh, 117D9406h,	9FDE2DE4h
		dd 4C8D2CEh, 0AD8A6DDh,	7 dup(0)
dword_10049640	dd 0			; DATA XREF: sub_1000C3A0+38w
					; sub_1000CA60+5o
dword_10049644	dd 0			; DATA XREF: sub_1000C3A0+3Dw
dword_10049648	dd 0			; DATA XREF: sub_1000C3A0+43w
		align 10h
dword_10049650	dd 6Ch dup(0)		; DATA XREF: sub_1000C930+1Co
		dd 7CBh	dup(?)
; void *Dst
Dst		dd ?			; DATA XREF: sub_1000C310+Er
					; sub_1000C3A0r ...
dword_1004B730	dd ?			; DATA XREF: sub_1001EF50+6w
					; sub_1001F150+3r ...
dword_1004B734	dd ?			; DATA XREF: sub_1001EF50+2Aw
					; sub_1001F150+E6r ...
dword_1004B738	dd ?			; DATA XREF: sub_1001EF50+42w
					; sub_1001F150+ECw ...
dword_1004B73C	dd ?			; DATA XREF: sub_1001EF50+33o
					; sub_1001EF50+38w ...
dword_1004B740	dd ?			; DATA XREF: sub_1001EF50+3Dw
dword_1004B744	dd ?			; DATA XREF: sub_1001FE80+5o
					; sub_1001FEB0+3r ...
dword_1004B748	dd ?			; DATA XREF: sub_1001FEB0+B1w
dword_1004B74C	dd ?			; DATA XREF: sub_1001FEB0+B7w
dword_1004B750	dd ?			; DATA XREF: sub_100288A0:loc_10028A27r
					; sub_100288A0:loc_10028A43w
dword_1004B754	dd ?			; DATA XREF: sub_10037838+Fr
					; sub_10037838+17w ...
dword_1004B758	dd ?			; DATA XREF: DllEntryPoint-20Fw
					; DllEntryPoint-60r
		align 10h
dword_1004B760	dd ?			; DATA XREF: sub_10037C31+91w
					; .rdata:ExceptionInfoo
dword_1004B764	dd ?			; DATA XREF: sub_10037C31+9Bw
		dd ?
dword_1004B76C	dd ?			; DATA XREF: sub_10037C31+8Cw
		dd 10h dup(?)
dword_1004B7B0	dd ?			; DATA XREF: sub_10037C31+7Dw
					; .rdata:ExceptionInfoo
		dd 22h dup(?)
word_1004B83C	dw ?			; DATA XREF: sub_10037C31+51w
		align 10h
word_1004B840	dw ?			; DATA XREF: sub_10037C31+4Aw
		align 4
word_1004B844	dw ?			; DATA XREF: sub_10037C31+43w
		align 4
word_1004B848	dw ?			; DATA XREF: sub_10037C31+3Cw
		align 4
dword_1004B84C	dd ?			; DATA XREF: sub_10037C31+28w
dword_1004B850	dd ?			; DATA XREF: sub_10037C31+22w
dword_1004B854	dd ?			; DATA XREF: sub_10037C31+1Cw
dword_1004B858	dd ?			; DATA XREF: sub_10037C31+16w
dword_1004B85C	dd ?			; DATA XREF: sub_10037C31+10w
dword_1004B860	dd ?			; DATA XREF: sub_10037C31+Bw
dword_1004B864	dd ?			; DATA XREF: sub_10037C31+62w
dword_1004B868	dd ?			; DATA XREF: sub_10037C31+6Aw
					; sub_10037C31+87r
word_1004B86C	dw ?			; DATA XREF: sub_10037C31+35w
		align 10h
dword_1004B870	dd ?			; DATA XREF: sub_10037C31+59w
dword_1004B874	dd ?			; DATA XREF: sub_10037C31+72w
word_1004B878	dw ?			; DATA XREF: sub_10037C31+2Ew
		align 4
		dd 80h dup(?)
dword_1004BA7C	dd ?			; DATA XREF: sub_1001FF80+4w
dword_1004BA80	dd 2Ah dup(?)		; DATA XREF: sub_1000C3F0+94o
					; sub_1000C4B0+46o ...
		db 2 dup(?)
byte_1004BB2A	db ?			; DATA XREF: sub_1000C4B0+3Bw
					; sub_1000C510:loc_1000C52Ar ...
		align 4
		dd 80Bh	dup(?)
dword_1004DB58	dd ?			; DATA XREF: sub_1000C3F0+B2w
					; sub_1000C4B0r ...
dword_1004DB5C	dd ?			; DATA XREF: sub_10037838:loc_100378B4r
					; sub_10037838+9Bw ...
; volatile LONG	Target
Target		dd ?			; DATA XREF: sub_10037838+24o
					; sub_10037838+53o
dword_1004DB64	dd ?			; DATA XREF: sub_10037816+11w
					; sub_10037838+13Ar ...
; void *Memory
Memory		dd ?			; DATA XREF: sub_10037816+Cw
					; sub_10037838:loc_10037968r ...
dword_1004DB6C	dd ?			; DATA XREF: DllEntryPoint:loc_10037A00r
					; DllEntryPoint-E6r ...
dword_1004DB70	dd ?			; DATA XREF: sub_10037838:loc_10037912r
					; sub_10037838+E2o ...
dword_1004DB74	dd ?			; DATA XREF: sub_10037650+E6r
					; sub_10037650+EFo ...
		align 800h
_data		ends


		end DllEntryPoint
