.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : BA1ABCB59170DB08FD53AA81DEBBEDDD
.bss:00000000 ; Input CRC32 : 7F9186F9
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BitlDecoder.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "MSVCRTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 ; Segment alignment 'qword' can not be represented in assembly
.bss:00000000 _bss            segment para public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.bss:00000000                 public ?kInvertTable@NBitl@@3PAEA
.bss:00000000 ; unsigned char * NBitl::kInvertTable
.bss:00000000 ?kInvertTable@NBitl@@3PAEA db ?         ; DATA XREF: NBitl::CInverterTableInitializer::CInverterTableInitializer(void)+84w
.bss:00000001                 align 100h
.bss:00000100                 public ?g_InverterTableInitializer@NBitl@@3UCInverterTableInitializer@1@A
.bss:00000100 ; NBitl::CInverterTableInitializer NBitl::g_InverterTableInitializer
.bss:00000100 ?g_InverterTableInitializer@NBitl@@3UCInverterTableInitializer@1@A db    ? ;
.bss:00000100                                         ; DATA XREF: NBitl::`dynamic initializer for 'g_InverterTableInitializer''(void)+3o
.bss:00000101                 align 4
.bss:00000101 _bss            ends
.bss:00000101
.text$yc:00000104 ; ===========================================================================
.text$yc:00000104
.text$yc:00000104 ; Segment type: Pure code
.text$yc:00000104 ; Segment permissions: Read/Execute
.text$yc:00000104 _text$yc        segment para public 'CODE' use32
.text$yc:00000104                 assume cs:_text$yc
.text$yc:00000104                 ;org 104h
.text$yc:00000104 ; COMDAT (pick any)
.text$yc:00000104                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$yc:00000104
.text$yc:00000104 ; =============== S U B R O U T I N E =======================================
.text$yc:00000104
.text$yc:00000104 ; Attributes: bp-based frame
.text$yc:00000104
.text$yc:00000104 ; void __cdecl NBitl::`dynamic initializer for 'g_InverterTableInitializer''(void)
.text$yc:00000104 ??__Eg_InverterTableInitializer@NBitl@@YAXXZ proc near
.text$yc:00000104                                         ; DATA XREF: .CRT$XCU:_g_InverterTableInitializer$initializer$o
.text$yc:00000104                 push    ebp
.text$yc:00000105                 mov     ebp, esp
.text$yc:00000107                 mov     ecx, offset ?g_InverterTableInitializer@NBitl@@3UCInverterTableInitializer@1@A ; this
.text$yc:0000010C                 call    ??0CInverterTableInitializer@NBitl@@QAE@XZ ; NBitl::CInverterTableInitializer::CInverterTableInitializer(void)
.text$yc:00000111                 cmp     ebp, esp
.text$yc:00000113                 call    __RTC_CheckEsp
.text$yc:00000118                 pop     ebp
.text$yc:00000119                 retn
.text$yc:00000119 ??__Eg_InverterTableInitializer@NBitl@@YAXXZ endp
.text$yc:00000119
.text$yc:00000119 ; ---------------------------------------------------------------------------
.text$yc:0000011A                 align 4
.text$yc:0000011A _text$yc        ends
.text$yc:0000011A
.rtc$TMZ:0000011C ; ===========================================================================
.rtc$TMZ:0000011C
.rtc$TMZ:0000011C ; Segment type: Pure data
.rtc$TMZ:0000011C ; Segment permissions: Read
.rtc$TMZ:0000011C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000011C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000011C                 ;org 11Ch
.rtc$TMZ:0000011C ; COMDAT (pick associative to section at 104)
.rtc$TMZ:0000011C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000011C _rtc$TMZ        ends
.rtc$TMZ:0000011C
.rtc$IMZ:00000120 ; ===========================================================================
.rtc$IMZ:00000120
.rtc$IMZ:00000120 ; Segment type: Pure data
.rtc$IMZ:00000120 ; Segment permissions: Read
.rtc$IMZ:00000120 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000120                 assume cs:_rtc$IMZ
.rtc$IMZ:00000120                 ;org 120h
.rtc$IMZ:00000120 ; COMDAT (pick associative to section at 104)
.rtc$IMZ:00000120 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000120 _rtc$IMZ        ends
.rtc$IMZ:00000120
.text:00000124 ; ===========================================================================
.text:00000124
.text:00000124 ; Segment type: Pure code
.text:00000124 ; Segment permissions: Read/Execute
.text:00000124 _text           segment para public 'CODE' use32
.text:00000124                 assume cs:_text
.text:00000124                 ;org 124h
.text:00000124 ; COMDAT (pick any)
.text:00000124                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000124
.text:00000124 ; =============== S U B R O U T I N E =======================================
.text:00000124
.text:00000124 ; Attributes: bp-based frame
.text:00000124
.text:00000124 ; _DWORD __thiscall NBitl::CInverterTableInitializer::CInverterTableInitializer(NBitl::CInverterTableInitializer *__hidden this)
.text:00000124                 public ??0CInverterTableInitializer@NBitl@@QAE@XZ
.text:00000124 ??0CInverterTableInitializer@NBitl@@QAE@XZ proc near
.text:00000124                                         ; CODE XREF: NBitl::`dynamic initializer for 'g_InverterTableInitializer''(void)+8p
.text:00000124
.text:00000124 var_C           = dword ptr -0Ch
.text:00000124 var_8           = dword ptr -8
.text:00000124 var_4           = dword ptr -4
.text:00000124
.text:00000124                 push    ebp
.text:00000125                 mov     ebp, esp
.text:00000127                 sub     esp, 0Ch
.text:0000012A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000131                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000138                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000013F                 mov     [ebp+var_4], ecx
.text:00000142                 mov     [ebp+var_8], 0
.text:00000149                 jmp     short loc_154
.text:0000014B ; ---------------------------------------------------------------------------
.text:0000014B
.text:0000014B loc_14B:                                ; CODE XREF: NBitl::CInverterTableInitializer::CInverterTableInitializer(void)+8Aj
.text:0000014B                 mov     eax, [ebp+var_8]
.text:0000014E                 add     eax, 1
.text:00000151                 mov     [ebp+var_8], eax
.text:00000154
.text:00000154 loc_154:                                ; CODE XREF: NBitl::CInverterTableInitializer::CInverterTableInitializer(void)+25j
.text:00000154                 cmp     [ebp+var_8], 100h
.text:0000015B                 jnb     short loc_1B0
.text:0000015D                 mov     ecx, [ebp+var_8]
.text:00000160                 and     ecx, 55h
.text:00000163                 shl     ecx, 1
.text:00000165                 mov     edx, [ebp+var_8]
.text:00000168                 and     edx, 0AAh
.text:0000016E                 shr     edx, 1
.text:00000170                 or      ecx, edx
.text:00000172                 mov     [ebp+var_C], ecx
.text:00000175                 mov     eax, [ebp+var_C]
.text:00000178                 and     eax, 33h
.text:0000017B                 shl     eax, 2
.text:0000017E                 mov     ecx, [ebp+var_C]
.text:00000181                 and     ecx, 0CCh
.text:00000187                 shr     ecx, 2
.text:0000018A                 or      eax, ecx
.text:0000018C                 mov     [ebp+var_C], eax
.text:0000018F                 mov     edx, [ebp+var_C]
.text:00000192                 and     edx, 0Fh
.text:00000195                 shl     edx, 4
.text:00000198                 mov     eax, [ebp+var_C]
.text:0000019B                 and     eax, 0F0h
.text:000001A0                 shr     eax, 4
.text:000001A3                 or      edx, eax
.text:000001A5                 mov     ecx, [ebp+var_8]
.text:000001A8                 mov     ds:?kInvertTable@NBitl@@3PAEA[ecx], dl ; uchar * NBitl::kInvertTable
.text:000001AE                 jmp     short loc_14B
.text:000001B0 ; ---------------------------------------------------------------------------
.text:000001B0
.text:000001B0 loc_1B0:                                ; CODE XREF: NBitl::CInverterTableInitializer::CInverterTableInitializer(void)+37j
.text:000001B0                 mov     eax, [ebp+var_4]
.text:000001B3                 mov     esp, ebp
.text:000001B5                 pop     ebp
.text:000001B6                 retn
.text:000001B6 ??0CInverterTableInitializer@NBitl@@QAE@XZ endp
.text:000001B6
.text:000001B6 ; ---------------------------------------------------------------------------
.text:000001B7                 align 4
.text:000001B7 _text           ends
.text:000001B7
.CRT$XCU:000001B8 ; ===========================================================================
.CRT$XCU:000001B8
.CRT$XCU:000001B8 ; Segment type: Pure data
.CRT$XCU:000001B8 ; Segment permissions: Read
.CRT$XCU:000001B8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000001B8                 assume cs:_CRT$XCU
.CRT$XCU:000001B8                 ;org 1B8h
.CRT$XCU:000001B8 _g_InverterTableInitializer$initializer$ dd offset ??__Eg_InverterTableInitializer@NBitl@@YAXXZ ; NBitl::`dynamic initializer for 'g_InverterTableInitializer''(void)
.CRT$XCU:000001B8 _CRT$XCU        ends
.CRT$XCU:000001B8
UNDEF:000001C0 ; ===========================================================================
UNDEF:000001C0
UNDEF:000001C0 ; Segment type: Externs
UNDEF:000001C0 ; UNDEF
UNDEF:000001C0                 extrn __RTC_CheckEsp:near
UNDEF:000001C0                                         ; CODE XREF: NBitl::`dynamic initializer for 'g_InverterTableInitializer''(void)+Fp
UNDEF:000001C4                 extrn __RTC_Shutdown:near
UNDEF:000001C4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000001C8                 extrn __RTC_InitBase:near
UNDEF:000001C8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000001C8
UNDEF:000001C8
UNDEF:000001C8                 end