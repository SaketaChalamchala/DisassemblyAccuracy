.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 03EAB2A36C7F665C72E3918EC2090A7B
.rdata:00000000 ; Input CRC32 : 6B7E3A4D
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\EnumDirItems.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG73294:                               ; DATA XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+71o
.rdata:00000000                 unicode 0, <:*>,0
.rdata:00000006                 align 4
.rdata:00000006 _rdata          ends
.rdata:00000006
.text:00000008 ; ===========================================================================
.text:00000008
.text:00000008 ; Segment type: Pure code
.text:00000008 ; Segment permissions: Read/Execute
.text:00000008 _text           segment para public 'CODE' use32
.text:00000008                 assume cs:_text
.text:00000008                 ;org 8
.text:00000008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000008
.text:00000008 ; =============== S U B R O U T I N E =======================================
.text:00000008
.text:00000008 ; Attributes: bp-based frame
.text:00000008
.text:00000008 ; void __thiscall CDirItems::AddDirFileInfo(CDirItems *this, int, int, int, const struct NWindows::NFile::NFind::CFileInfo *)
.text:00000008                 public ?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z
.text:00000008 ?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z proc near
.text:00000008                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+20Dp
.text:00000008                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+28Dp ...
.text:00000008
.text:00000008 var_68          = byte ptr -68h
.text:00000008 var_64          = dword ptr -64h
.text:00000008 var_60          = dword ptr -60h
.text:00000008 var_5C          = dword ptr -5Ch
.text:00000008 var_58          = dword ptr -58h
.text:00000008 var_54          = dword ptr -54h
.text:00000008 var_50          = dword ptr -50h
.text:00000008 var_4C          = dword ptr -4Ch
.text:00000008 var_48          = dword ptr -48h
.text:00000008 var_44          = byte ptr -44h
.text:00000008 var_28          = dword ptr -28h
.text:00000008 var_24          = dword ptr -24h
.text:00000008 var_20          = dword ptr -20h
.text:00000008 var_1C          = dword ptr -1Ch
.text:00000008 var_18          = byte ptr -18h
.text:00000008 var_10          = dword ptr -10h
.text:00000008 var_C           = dword ptr -0Ch
.text:00000008 var_4           = dword ptr -4
.text:00000008 arg_0           = dword ptr  8
.text:00000008 arg_4           = dword ptr  0Ch
.text:00000008 arg_8           = dword ptr  10h
.text:00000008 arg_C           = dword ptr  14h
.text:00000008
.text:00000008                 push    ebp
.text:00000009                 mov     ebp, esp
.text:0000000B                 push    0FFFFFFFFh
.text:0000000D                 push    offset __ehhandler$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z
.text:00000012                 mov     eax, large fs:0
.text:00000018                 push    eax
.text:00000019                 sub     esp, 5Ch
.text:0000001C                 push    edi
.text:0000001D                 push    ecx
.text:0000001E                 lea     edi, [ebp+var_68]
.text:00000021                 mov     ecx, 17h
.text:00000026                 mov     eax, 0CCCCCCCCh
.text:0000002B                 rep stosd
.text:0000002D                 pop     ecx
.text:0000002E                 mov     eax, dword ptr ds:___security_cookie
.text:00000033                 xor     eax, ebp
.text:00000035                 push    eax
.text:00000036                 lea     eax, [ebp+var_C]
.text:00000039                 mov     large fs:0, eax
.text:0000003F                 mov     [ebp+var_10], ecx
.text:00000042                 lea     ecx, [ebp+var_64] ; this
.text:00000045                 call    ??0CDirItem@@QAE@XZ ; CDirItem::CDirItem(void)
.text:0000004A                 mov     [ebp+var_4], 0
.text:00000051                 mov     eax, [ebp+arg_C]
.text:00000054                 mov     ecx, [eax]
.text:00000056                 mov     [ebp+var_64], ecx
.text:00000059                 mov     edx, [eax+4]
.text:0000005C                 mov     [ebp+var_60], edx
.text:0000005F                 mov     eax, [ebp+arg_C]
.text:00000062                 mov     ecx, [eax+8]
.text:00000065                 mov     edx, [eax+0Ch]
.text:00000068                 mov     [ebp+var_5C], ecx
.text:0000006B                 mov     [ebp+var_58], edx
.text:0000006E                 mov     eax, [ebp+arg_C]
.text:00000071                 mov     ecx, [eax+10h]
.text:00000074                 mov     edx, [eax+14h]
.text:00000077                 mov     [ebp+var_54], ecx
.text:0000007A                 mov     [ebp+var_50], edx
.text:0000007D                 mov     eax, [ebp+arg_C]
.text:00000080                 mov     ecx, [eax+18h]
.text:00000083                 mov     edx, [eax+1Ch]
.text:00000086                 mov     [ebp+var_4C], ecx
.text:00000089                 mov     [ebp+var_48], edx
.text:0000008C                 mov     eax, [ebp+arg_C]
.text:0000008F                 mov     ecx, [eax+20h]
.text:00000092                 mov     [ebp+var_28], ecx
.text:00000095                 mov     edx, [ebp+arg_C]
.text:00000098                 mov     al, [edx+24h]
.text:0000009B                 mov     [ebp+var_18], al
.text:0000009E                 mov     ecx, [ebp+arg_0]
.text:000000A1                 mov     [ebp+var_24], ecx
.text:000000A4                 mov     edx, [ebp+arg_4]
.text:000000A7                 mov     [ebp+var_20], edx
.text:000000AA                 mov     eax, [ebp+arg_8]
.text:000000AD                 mov     [ebp+var_1C], eax
.text:000000B0                 mov     ecx, [ebp+arg_C]
.text:000000B3                 add     ecx, 28h ; '('
.text:000000B6                 push    ecx
.text:000000B7                 lea     ecx, [ebp+var_44]
.text:000000BA                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000000BF                 lea     edx, [ebp+var_64]
.text:000000C2                 push    edx
.text:000000C3                 mov     ecx, [ebp+var_10]
.text:000000C6                 add     ecx, 24h ; '$'
.text:000000C9                 call    ?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z ; CObjectVector<CDirItem>::Add(CDirItem const &)
.text:000000CE                 mov     ecx, [ebp+arg_C] ; this
.text:000000D1                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:000000D6                 movzx   eax, al
.text:000000D9                 test    eax, eax
.text:000000DB                 jz      short loc_F7
.text:000000DD                 mov     ecx, [ebp+var_10]
.text:000000E0                 mov     edx, [ecx+38h]
.text:000000E3                 add     edx, 1
.text:000000E6                 mov     eax, [ecx+3Ch]
.text:000000E9                 adc     eax, 0
.text:000000EC                 mov     ecx, [ebp+var_10]
.text:000000EF                 mov     [ecx+38h], edx
.text:000000F2                 mov     [ecx+3Ch], eax
.text:000000F5                 jmp     short loc_168
.text:000000F7 ; ---------------------------------------------------------------------------
.text:000000F7
.text:000000F7 loc_F7:                                 ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+D3j
.text:000000F7                 mov     edx, [ebp+arg_C]
.text:000000FA                 movzx   eax, byte ptr [edx+24h]
.text:000000FE                 test    eax, eax
.text:00000100                 jz      short loc_136
.text:00000102                 mov     ecx, [ebp+var_10]
.text:00000105                 mov     edx, [ecx+48h]
.text:00000108                 add     edx, 1
.text:0000010B                 mov     eax, [ecx+4Ch]
.text:0000010E                 adc     eax, 0
.text:00000111                 mov     ecx, [ebp+var_10]
.text:00000114                 mov     [ecx+48h], edx
.text:00000117                 mov     [ecx+4Ch], eax
.text:0000011A                 mov     edx, [ebp+var_10]
.text:0000011D                 mov     eax, [ebp+arg_C]
.text:00000120                 mov     ecx, [edx+58h]
.text:00000123                 add     ecx, [eax]
.text:00000125                 mov     edx, [edx+5Ch]
.text:00000128                 adc     edx, [eax+4]
.text:0000012B                 mov     eax, [ebp+var_10]
.text:0000012E                 mov     [eax+58h], ecx
.text:00000131                 mov     [eax+5Ch], edx
.text:00000134                 jmp     short loc_168
.text:00000136 ; ---------------------------------------------------------------------------
.text:00000136
.text:00000136 loc_136:                                ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+F8j
.text:00000136                 mov     ecx, [ebp+var_10]
.text:00000139                 mov     edx, [ecx+40h]
.text:0000013C                 add     edx, 1
.text:0000013F                 mov     eax, [ecx+44h]
.text:00000142                 adc     eax, 0
.text:00000145                 mov     ecx, [ebp+var_10]
.text:00000148                 mov     [ecx+40h], edx
.text:0000014B                 mov     [ecx+44h], eax
.text:0000014E                 mov     edx, [ebp+var_10]
.text:00000151                 mov     eax, [ebp+arg_C]
.text:00000154                 mov     ecx, [edx+50h]
.text:00000157                 add     ecx, [eax]
.text:00000159                 mov     edx, [edx+54h]
.text:0000015C                 adc     edx, [eax+4]
.text:0000015F                 mov     eax, [ebp+var_10]
.text:00000162                 mov     [eax+50h], ecx
.text:00000165                 mov     [eax+54h], edx
.text:00000168
.text:00000168 loc_168:                                ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+EDj
.text:00000168                                         ; CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+12Cj
.text:00000168                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000016F                 lea     ecx, [ebp+var_64] ; this
.text:00000172                 call    ??1CDirItem@@QAE@XZ ; CDirItem::~CDirItem(void)
.text:00000177                 push    edx
.text:00000178                 mov     ecx, ebp
.text:0000017A                 push    eax
.text:0000017B                 lea     edx, $LN11
.text:00000181                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000186                 pop     eax
.text:00000187                 pop     edx
.text:00000188                 mov     ecx, [ebp+var_C]
.text:0000018B                 mov     large fs:0, ecx
.text:00000192                 pop     ecx
.text:00000193                 pop     edi
.text:00000194                 add     esp, 68h
.text:00000197                 cmp     ebp, esp
.text:00000199                 call    __RTC_CheckEsp
.text:0000019E                 mov     esp, ebp
.text:000001A0                 pop     ebp
.text:000001A1                 retn    10h
.text:000001A1 ?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z endp
.text:000001A1
.text:000001A1 ; ---------------------------------------------------------------------------
.text:000001A4 $LN11           dd 1                    ; DATA XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+173o
.text:000001A8                 dd offset $LN10
.text:000001AC $LN10           dd 0FFFFFF9Ch, 50h      ; DATA XREF: .text:000001A8o
.text:000001B4                 dd offset $LN8
.text:000001B8 $LN8            dd 0CC006964h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000001B4o
.text:000001C8
.text:000001C8 ; =============== S U B R O U T I N E =======================================
.text:000001C8
.text:000001C8 ; Attributes: bp-based frame
.text:000001C8
.text:000001C8 ; __int32 __thiscall CDirItems::AddError(CDirItems *this, const struct UString *, unsigned __int32)
.text:000001C8                 public ?AddError@CDirItems@@QAEJABVUString@@K@Z
.text:000001C8 ?AddError@CDirItems@@QAEJABVUString@@K@Z proc near
.text:000001C8                                         ; CODE XREF: CDirItems::AddError(UString const &)+26p
.text:000001C8                                         ; CDirItems::AddSecurityItem(UString const &,int &)+1CCp ...
.text:000001C8
.text:000001C8 var_4           = dword ptr -4
.text:000001C8 arg_0           = dword ptr  8
.text:000001C8 arg_4           = dword ptr  0Ch
.text:000001C8
.text:000001C8                 push    ebp
.text:000001C9                 mov     ebp, esp
.text:000001CB                 push    ecx
.text:000001CC                 push    esi
.text:000001CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001D4                 mov     [ebp+var_4], ecx
.text:000001D7                 mov     eax, [ebp+var_4]
.text:000001DA                 mov     ecx, [eax+60h]
.text:000001DD                 add     ecx, 1
.text:000001E0                 mov     edx, [eax+64h]
.text:000001E3                 adc     edx, 0
.text:000001E6                 mov     eax, [ebp+var_4]
.text:000001E9                 mov     [eax+60h], ecx
.text:000001EC                 mov     [eax+64h], edx
.text:000001EF                 mov     ecx, [ebp+var_4]
.text:000001F2                 cmp     dword ptr [ecx+98h], 0
.text:000001F9                 jz      short loc_226
.text:000001FB                 mov     esi, esp
.text:000001FD                 mov     edx, [ebp+arg_4]
.text:00000200                 push    edx
.text:00000201                 mov     eax, [ebp+arg_0]
.text:00000204                 push    eax
.text:00000205                 mov     ecx, [ebp+var_4]
.text:00000208                 mov     edx, [ecx+98h]
.text:0000020E                 mov     eax, [ebp+var_4]
.text:00000211                 mov     ecx, [eax+98h]
.text:00000217                 mov     edx, [edx]
.text:00000219                 mov     eax, [edx]
.text:0000021B                 call    eax
.text:0000021D                 cmp     esi, esp
.text:0000021F                 call    __RTC_CheckEsp
.text:00000224                 jmp     short loc_228
.text:00000226 ; ---------------------------------------------------------------------------
.text:00000226
.text:00000226 loc_226:                                ; CODE XREF: CDirItems::AddError(UString const &,ulong)+31j
.text:00000226                 xor     eax, eax
.text:00000228
.text:00000228 loc_228:                                ; CODE XREF: CDirItems::AddError(UString const &,ulong)+5Cj
.text:00000228                 pop     esi
.text:00000229                 add     esp, 4
.text:0000022C                 cmp     ebp, esp
.text:0000022E                 call    __RTC_CheckEsp
.text:00000233                 mov     esp, ebp
.text:00000235                 pop     ebp
.text:00000236                 retn    8
.text:00000236 ?AddError@CDirItems@@QAEJABVUString@@K@Z endp
.text:00000236
.text:00000236 ; ---------------------------------------------------------------------------
.text:00000239                 db 0Fh dup(0CCh)
.text:00000248
.text:00000248 ; =============== S U B R O U T I N E =======================================
.text:00000248
.text:00000248 ; Attributes: bp-based frame
.text:00000248
.text:00000248 ; __int32 __thiscall CDirItems::AddError(CDirItems *this, const struct UString *)
.text:00000248                 public ?AddError@CDirItems@@QAEJABVUString@@@Z
.text:00000248 ?AddError@CDirItems@@QAEJABVUString@@@Z proc near
.text:00000248                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+E2p
.text:00000248                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+129p ...
.text:00000248
.text:00000248 var_4           = dword ptr -4
.text:00000248 arg_0           = dword ptr  8
.text:00000248
.text:00000248                 push    ebp
.text:00000249                 mov     ebp, esp
.text:0000024B                 push    ecx
.text:0000024C                 push    esi
.text:0000024D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000254                 mov     [ebp+var_4], ecx
.text:00000257                 mov     esi, esp
.text:00000259                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000025F                 cmp     esi, esp
.text:00000261                 call    __RTC_CheckEsp
.text:00000266                 push    eax             ; unsigned __int32
.text:00000267                 mov     eax, [ebp+arg_0]
.text:0000026A                 push    eax             ; struct UString *
.text:0000026B                 mov     ecx, [ebp+var_4] ; this
.text:0000026E                 call    ?AddError@CDirItems@@QAEJABVUString@@K@Z ; CDirItems::AddError(UString const &,ulong)
.text:00000273                 pop     esi
.text:00000274                 add     esp, 4
.text:00000277                 cmp     ebp, esp
.text:00000279                 call    __RTC_CheckEsp
.text:0000027E                 mov     esp, ebp
.text:00000280                 pop     ebp
.text:00000281                 retn    4
.text:00000281 ?AddError@CDirItems@@QAEJABVUString@@@Z endp
.text:00000281
.text:00000281 ; ---------------------------------------------------------------------------
.text:00000284                 align 8
.text:00000288
.text:00000288 ; =============== S U B R O U T I N E =======================================
.text:00000288
.text:00000288 ; Attributes: bp-based frame
.text:00000288
.text:00000288 ; __int32 __thiscall CDirItems::ScanProgress(CDirItems *this, const struct UString *)
.text:00000288                 public ?ScanProgress@CDirItems@@QAEJABVUString@@@Z
.text:00000288 ?ScanProgress@CDirItems@@QAEJABVUString@@@Z proc near
.text:00000288                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+47p
.text:00000288                                         ; CDirItems::EnumerateDir(int,int,UString const &)+236p ...
.text:00000288
.text:00000288 var_4           = dword ptr -4
.text:00000288 arg_0           = dword ptr  8
.text:00000288
.text:00000288                 push    ebp
.text:00000289                 mov     ebp, esp
.text:0000028B                 push    ecx
.text:0000028C                 push    esi
.text:0000028D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000294                 mov     [ebp+var_4], ecx
.text:00000297                 mov     eax, [ebp+var_4]
.text:0000029A                 cmp     dword ptr [eax+98h], 0
.text:000002A1                 jz      short loc_2D6
.text:000002A3                 mov     esi, esp
.text:000002A5                 push    1
.text:000002A7                 mov     ecx, [ebp+arg_0]
.text:000002AA                 push    ecx
.text:000002AB                 mov     edx, [ebp+var_4]
.text:000002AE                 add     edx, 38h ; '8'
.text:000002B1                 push    edx
.text:000002B2                 mov     eax, [ebp+var_4]
.text:000002B5                 mov     ecx, [eax+98h]
.text:000002BB                 mov     edx, [ebp+var_4]
.text:000002BE                 mov     eax, [edx+98h]
.text:000002C4                 mov     edx, [ecx]
.text:000002C6                 mov     ecx, eax
.text:000002C8                 mov     eax, [edx+4]
.text:000002CB                 call    eax
.text:000002CD                 cmp     esi, esp
.text:000002CF                 call    __RTC_CheckEsp
.text:000002D4                 jmp     short loc_2D8
.text:000002D6 ; ---------------------------------------------------------------------------
.text:000002D6
.text:000002D6 loc_2D6:                                ; CODE XREF: CDirItems::ScanProgress(UString const &)+19j
.text:000002D6                 xor     eax, eax
.text:000002D8
.text:000002D8 loc_2D8:                                ; CODE XREF: CDirItems::ScanProgress(UString const &)+4Cj
.text:000002D8                 pop     esi
.text:000002D9                 add     esp, 4
.text:000002DC                 cmp     ebp, esp
.text:000002DE                 call    __RTC_CheckEsp
.text:000002E3                 mov     esp, ebp
.text:000002E5                 pop     ebp
.text:000002E6                 retn    4
.text:000002E6 ?ScanProgress@CDirItems@@QAEJABVUString@@@Z endp
.text:000002E6
.text:000002E6 ; ---------------------------------------------------------------------------
.text:000002E9                 db 0Fh dup(0CCh)
.text:000002F8
.text:000002F8 ; =============== S U B R O U T I N E =======================================
.text:000002F8
.text:000002F8 ; Attributes: bp-based frame
.text:000002F8
.text:000002F8 ; int __stdcall CDirItems::GetPrefixesPath(int, int, int, UString *)
.text:000002F8                 public ?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z
.text:000002F8 ?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z proc near
.text:000002F8                                         ; CODE XREF: CDirItems::GetPhyPath(uint)+53p
.text:000002F8                                         ; CDirItems::GetLogPath(uint)+53p
.text:000002F8
.text:000002F8 var_38          = dword ptr -38h
.text:000002F8 var_34          = dword ptr -34h
.text:000002F8 Dst             = dword ptr -30h
.text:000002F8 var_2C          = dword ptr -2Ch
.text:000002F8 var_28          = dword ptr -28h
.text:000002F8 var_20          = byte ptr -20h
.text:000002F8 var_10          = dword ptr -10h
.text:000002F8 var_C           = dword ptr -0Ch
.text:000002F8 var_4           = dword ptr -4
.text:000002F8 arg_0           = dword ptr  8
.text:000002F8 arg_4           = dword ptr  0Ch
.text:000002F8 arg_8           = dword ptr  10h
.text:000002F8 arg_C           = dword ptr  14h
.text:000002F8
.text:000002F8                 push    ebp
.text:000002F9                 mov     ebp, esp
.text:000002FB                 push    0FFFFFFFFh
.text:000002FD                 push    offset __ehhandler$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z
.text:00000302                 mov     eax, large fs:0
.text:00000308                 push    eax
.text:00000309                 sub     esp, 2Ch
.text:0000030C                 push    edi
.text:0000030D                 push    ecx
.text:0000030E                 lea     edi, [ebp+var_38]
.text:00000311                 mov     ecx, 0Bh
.text:00000316                 mov     eax, 0CCCCCCCCh
.text:0000031B                 rep stosd
.text:0000031D                 pop     ecx
.text:0000031E                 mov     eax, dword ptr ds:___security_cookie
.text:00000323                 xor     eax, ebp
.text:00000325                 push    eax
.text:00000326                 lea     eax, [ebp+var_C]
.text:00000329                 mov     large fs:0, eax
.text:0000032F                 mov     [ebp+var_10], ecx
.text:00000332                 mov     [ebp+var_38], 0
.text:00000339                 lea     ecx, [ebp+var_20]
.text:0000033C                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000341                 mov     [ebp+var_4], 1
.text:00000348                 mov     ecx, [ebp+arg_C] ; this
.text:0000034B                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000350                 mov     [ebp+var_28], eax
.text:00000353                 mov     eax, [ebp+arg_8]
.text:00000356                 mov     [ebp+var_2C], eax
.text:00000359                 jmp     short loc_36C
.text:0000035B ; ---------------------------------------------------------------------------
.text:0000035B
.text:0000035B loc_35B:                                ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+93j
.text:0000035B                 mov     ecx, [ebp+var_2C]
.text:0000035E                 push    ecx
.text:0000035F                 mov     ecx, [ebp+arg_4]
.text:00000362                 call    ??A?$CRecordVector@H@@QBEABHI@Z ; CRecordVector<int>::operator[](uint)
.text:00000367                 mov     edx, [eax]
.text:00000369                 mov     [ebp+var_2C], edx
.text:0000036C
.text:0000036C loc_36C:                                ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+61j
.text:0000036C                 cmp     [ebp+var_2C], 0
.text:00000370                 jl      short loc_38D
.text:00000372                 mov     eax, [ebp+var_2C]
.text:00000375                 push    eax
.text:00000376                 mov     ecx, [ebp+var_10]
.text:00000379                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:0000037E                 mov     ecx, eax        ; this
.text:00000380                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000385                 add     eax, [ebp+var_28]
.text:00000388                 mov     [ebp+var_28], eax
.text:0000038B                 jmp     short loc_35B
.text:0000038D ; ---------------------------------------------------------------------------
.text:0000038D
.text:0000038D loc_38D:                                ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+78j
.text:0000038D                 mov     ecx, [ebp+var_28]
.text:00000390                 push    ecx             ; unsigned int
.text:00000391                 lea     ecx, [ebp+var_20] ; this
.text:00000394                 call    ?GetBuf_SetEnd@UString@@QAEPA_WI@Z ; UString::GetBuf_SetEnd(uint)
.text:00000399                 mov     edx, [ebp+var_28]
.text:0000039C                 lea     eax, [eax+edx*2]
.text:0000039F                 mov     [ebp+Dst], eax
.text:000003A2                 mov     ecx, [ebp+arg_C] ; this
.text:000003A5                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000003AA                 shl     eax, 1
.text:000003AC                 mov     ecx, [ebp+Dst]
.text:000003AF                 sub     ecx, eax
.text:000003B1                 mov     [ebp+Dst], ecx
.text:000003B4                 mov     ecx, [ebp+arg_C] ; this
.text:000003B7                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000003BC                 push    eax             ; int
.text:000003BD                 mov     ecx, [ebp+arg_C]
.text:000003C0                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000003C5                 push    eax             ; Src
.text:000003C6                 mov     edx, [ebp+Dst]
.text:000003C9                 push    edx             ; Dst
.text:000003CA                 call    _wmemcpy
.text:000003CF                 add     esp, 0Ch
.text:000003D2                 mov     eax, [ebp+arg_8]
.text:000003D5                 mov     [ebp+var_2C], eax
.text:000003D8                 jmp     short loc_3EB
.text:000003DA ; ---------------------------------------------------------------------------
.text:000003DA
.text:000003DA loc_3DA:                                ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+138j
.text:000003DA                 mov     ecx, [ebp+var_2C]
.text:000003DD                 push    ecx
.text:000003DE                 mov     ecx, [ebp+arg_4]
.text:000003E1                 call    ??A?$CRecordVector@H@@QBEABHI@Z ; CRecordVector<int>::operator[](uint)
.text:000003E6                 mov     edx, [eax]
.text:000003E8                 mov     [ebp+var_2C], edx
.text:000003EB
.text:000003EB loc_3EB:                                ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+E0j
.text:000003EB                 cmp     [ebp+var_2C], 0
.text:000003EF                 jl      short loc_432
.text:000003F1                 mov     eax, [ebp+var_2C]
.text:000003F4                 push    eax
.text:000003F5                 mov     ecx, [ebp+var_10]
.text:000003F8                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:000003FD                 mov     [ebp+var_34], eax
.text:00000400                 mov     ecx, [ebp+var_34] ; this
.text:00000403                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000408                 shl     eax, 1
.text:0000040A                 mov     ecx, [ebp+Dst]
.text:0000040D                 sub     ecx, eax
.text:0000040F                 mov     [ebp+Dst], ecx
.text:00000412                 mov     ecx, [ebp+var_34] ; this
.text:00000415                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000041A                 push    eax             ; int
.text:0000041B                 mov     ecx, [ebp+var_34]
.text:0000041E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000423                 push    eax             ; Src
.text:00000424                 mov     edx, [ebp+Dst]
.text:00000427                 push    edx             ; Dst
.text:00000428                 call    _wmemcpy
.text:0000042D                 add     esp, 0Ch
.text:00000430                 jmp     short loc_3DA
.text:00000432 ; ---------------------------------------------------------------------------
.text:00000432
.text:00000432 loc_432:                                ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+F7j
.text:00000432                 lea     eax, [ebp+var_20]
.text:00000435                 push    eax
.text:00000436                 mov     ecx, [ebp+arg_0]
.text:00000439                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000043E                 mov     ecx, [ebp+var_38]
.text:00000441                 or      ecx, 1
.text:00000444                 mov     [ebp+var_38], ecx
.text:00000447                 mov     byte ptr [ebp+var_4], 0
.text:0000044B                 lea     ecx, [ebp+var_20] ; this
.text:0000044E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000453                 mov     eax, [ebp+arg_0]
.text:00000456                 push    edx
.text:00000457                 mov     ecx, ebp
.text:00000459                 push    eax
.text:0000045A                 lea     edx, $LN15
.text:00000460                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000465                 pop     eax
.text:00000466                 pop     edx
.text:00000467                 mov     ecx, [ebp+var_C]
.text:0000046A                 mov     large fs:0, ecx
.text:00000471                 pop     ecx
.text:00000472                 pop     edi
.text:00000473                 add     esp, 38h
.text:00000476                 cmp     ebp, esp
.text:00000478                 call    __RTC_CheckEsp
.text:0000047D                 mov     esp, ebp
.text:0000047F                 pop     ebp
.text:00000480                 retn    10h
.text:00000480 ?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z endp
.text:00000480
.text:00000480 ; ---------------------------------------------------------------------------
.text:00000483                 align 4
.text:00000484 $LN15           dd 1                    ; DATA XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+162o
.text:00000488                 dd offset $LN14
.text:0000048C $LN14           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000488o
.text:00000494                 dd offset $LN12         ; "path"
.text:00000498 $LN12           db 'path',0             ; DATA XREF: .text:00000494o
.text:0000049D                 db 0Bh dup(0CCh)
.text:000004A8
.text:000004A8 ; =============== S U B R O U T I N E =======================================
.text:000004A8
.text:000004A8 ; Attributes: bp-based frame
.text:000004A8
.text:000004A8 ; public: class UString __thiscall CDirItems::GetPhyPath(unsigned int)const
.text:000004A8                 public ?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z
.text:000004A8 ?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z proc near
.text:000004A8                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+170p
.text:000004A8
.text:000004A8 var_C           = dword ptr -0Ch
.text:000004A8 var_8           = dword ptr -8
.text:000004A8 var_4           = dword ptr -4
.text:000004A8 arg_0           = dword ptr  8
.text:000004A8 arg_4           = dword ptr  0Ch
.text:000004A8
.text:000004A8                 push    ebp
.text:000004A9                 mov     ebp, esp
.text:000004AB                 sub     esp, 0Ch
.text:000004AE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000004B5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000004BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004C3                 mov     [ebp+var_4], ecx
.text:000004C6                 mov     [ebp+var_C], 0
.text:000004CD                 mov     eax, [ebp+arg_4]
.text:000004D0                 push    eax
.text:000004D1                 mov     ecx, [ebp+var_4]
.text:000004D4                 add     ecx, 24h ; '$'
.text:000004D7                 call    ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:000004DC                 mov     [ebp+var_8], eax
.text:000004DF                 mov     ecx, [ebp+var_8]
.text:000004E2                 add     ecx, 20h ; ' '
.text:000004E5                 push    ecx             ; UString *
.text:000004E6                 mov     edx, [ebp+var_8]
.text:000004E9                 mov     eax, [edx+40h]
.text:000004EC                 push    eax             ; int
.text:000004ED                 mov     ecx, [ebp+var_4]
.text:000004F0                 add     ecx, 0Ch
.text:000004F3                 push    ecx             ; int
.text:000004F4                 mov     edx, [ebp+arg_0]
.text:000004F7                 push    edx             ; int
.text:000004F8                 mov     ecx, [ebp+var_4]
.text:000004FB                 call    ?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z ; CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)
.text:00000500                 mov     eax, [ebp+var_C]
.text:00000503                 or      eax, 1
.text:00000506                 mov     [ebp+var_C], eax
.text:00000509                 mov     eax, [ebp+arg_0]
.text:0000050C                 add     esp, 0Ch
.text:0000050F                 cmp     ebp, esp
.text:00000511                 call    __RTC_CheckEsp
.text:00000516                 mov     esp, ebp
.text:00000518                 pop     ebp
.text:00000519                 retn    8
.text:00000519 ?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z endp
.text:00000519
.text:00000519 ; ---------------------------------------------------------------------------
.text:0000051C                 db 0Ch dup(0CCh)
.text:00000528
.text:00000528 ; =============== S U B R O U T I N E =======================================
.text:00000528
.text:00000528 ; Attributes: bp-based frame
.text:00000528
.text:00000528 ; public: class UString __thiscall CDirItems::GetLogPath(unsigned int)const
.text:00000528                 public ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z
.text:00000528 ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z proc near
.text:00000528                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+210p
.text:00000528
.text:00000528 var_C           = dword ptr -0Ch
.text:00000528 var_8           = dword ptr -8
.text:00000528 var_4           = dword ptr -4
.text:00000528 arg_0           = dword ptr  8
.text:00000528 arg_4           = dword ptr  0Ch
.text:00000528
.text:00000528                 push    ebp
.text:00000529                 mov     ebp, esp
.text:0000052B                 sub     esp, 0Ch
.text:0000052E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000535                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000053C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000543                 mov     [ebp+var_4], ecx
.text:00000546                 mov     [ebp+var_C], 0
.text:0000054D                 mov     eax, [ebp+arg_4]
.text:00000550                 push    eax
.text:00000551                 mov     ecx, [ebp+var_4]
.text:00000554                 add     ecx, 24h ; '$'
.text:00000557                 call    ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:0000055C                 mov     [ebp+var_8], eax
.text:0000055F                 mov     ecx, [ebp+var_8]
.text:00000562                 add     ecx, 20h ; ' '
.text:00000565                 push    ecx             ; UString *
.text:00000566                 mov     edx, [ebp+var_8]
.text:00000569                 mov     eax, [edx+44h]
.text:0000056C                 push    eax             ; int
.text:0000056D                 mov     ecx, [ebp+var_4]
.text:00000570                 add     ecx, 18h
.text:00000573                 push    ecx             ; int
.text:00000574                 mov     edx, [ebp+arg_0]
.text:00000577                 push    edx             ; int
.text:00000578                 mov     ecx, [ebp+var_4]
.text:0000057B                 call    ?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z ; CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)
.text:00000580                 mov     eax, [ebp+var_C]
.text:00000583                 or      eax, 1
.text:00000586                 mov     [ebp+var_C], eax
.text:00000589                 mov     eax, [ebp+arg_0]
.text:0000058C                 add     esp, 0Ch
.text:0000058F                 cmp     ebp, esp
.text:00000591                 call    __RTC_CheckEsp
.text:00000596                 mov     esp, ebp
.text:00000598                 pop     ebp
.text:00000599                 retn    8
.text:00000599 ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z endp
.text:00000599
.text:00000599 ; ---------------------------------------------------------------------------
.text:0000059C                 db 0Ch dup(0CCh)
.text:000005A8
.text:000005A8 ; =============== S U B R O U T I N E =======================================
.text:000005A8
.text:000005A8 ; Attributes: bp-based frame
.text:000005A8
.text:000005A8 ; void __thiscall CDirItems::ReserveDown(CDirItems *__hidden this)
.text:000005A8                 public ?ReserveDown@CDirItems@@QAEXXZ
.text:000005A8 ?ReserveDown@CDirItems@@QAEXXZ proc near
.text:000005A8                                         ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+410p
.text:000005A8                                         ; EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+12Ep
.text:000005A8
.text:000005A8 var_4           = dword ptr -4
.text:000005A8
.text:000005A8                 push    ebp
.text:000005A9                 mov     ebp, esp
.text:000005AB                 push    ecx
.text:000005AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005B3                 mov     [ebp+var_4], ecx
.text:000005B6                 mov     ecx, [ebp+var_4]
.text:000005B9                 call    ?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::ReserveDown(void)
.text:000005BE                 mov     ecx, [ebp+var_4]
.text:000005C1                 add     ecx, 0Ch
.text:000005C4                 call    ?ReserveDown@?$CRecordVector@H@@QAEXXZ ; CRecordVector<int>::ReserveDown(void)
.text:000005C9                 mov     ecx, [ebp+var_4]
.text:000005CC                 add     ecx, 18h
.text:000005CF                 call    ?ReserveDown@?$CRecordVector@H@@QAEXXZ ; CRecordVector<int>::ReserveDown(void)
.text:000005D4                 mov     ecx, [ebp+var_4]
.text:000005D7                 add     ecx, 24h ; '$'
.text:000005DA                 call    ?ReserveDown@?$CObjectVector@UCDirItem@@@@QAEXXZ ; CObjectVector<CDirItem>::ReserveDown(void)
.text:000005DF                 add     esp, 4
.text:000005E2                 cmp     ebp, esp
.text:000005E4                 call    __RTC_CheckEsp
.text:000005E9                 mov     esp, ebp
.text:000005EB                 pop     ebp
.text:000005EC                 retn
.text:000005EC ?ReserveDown@CDirItems@@QAEXXZ endp
.text:000005EC
.text:000005EC ; ---------------------------------------------------------------------------
.text:000005ED                 db 0Bh dup(0CCh)
.text:000005F8
.text:000005F8 ; =============== S U B R O U T I N E =======================================
.text:000005F8
.text:000005F8 ; Attributes: bp-based frame
.text:000005F8
.text:000005F8 ; unsigned int __thiscall CDirItems::AddPrefix(CDirItems *this, int, int, const struct UString *)
.text:000005F8                 public ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z
.text:000005F8 ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z proc near
.text:000005F8                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+2B7p
.text:000005F8                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+66p ...
.text:000005F8
.text:000005F8 var_4           = dword ptr -4
.text:000005F8 arg_0           = dword ptr  8
.text:000005F8 arg_4           = dword ptr  0Ch
.text:000005F8 arg_8           = dword ptr  10h
.text:000005F8
.text:000005F8                 push    ebp
.text:000005F9                 mov     ebp, esp
.text:000005FB                 push    ecx
.text:000005FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000603                 mov     [ebp+var_4], ecx
.text:00000606                 mov     eax, [ebp+arg_0]
.text:00000609                 push    eax
.text:0000060A                 mov     ecx, [ebp+var_4]
.text:0000060D                 add     ecx, 0Ch
.text:00000610                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:00000615                 mov     ecx, [ebp+arg_4]
.text:00000618                 push    ecx
.text:00000619                 mov     ecx, [ebp+var_4]
.text:0000061C                 add     ecx, 18h
.text:0000061F                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:00000624                 mov     edx, [ebp+arg_8]
.text:00000627                 push    edx
.text:00000628                 mov     ecx, [ebp+var_4]
.text:0000062B                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00000630                 add     esp, 4
.text:00000633                 cmp     ebp, esp
.text:00000635                 call    __RTC_CheckEsp
.text:0000063A                 mov     esp, ebp
.text:0000063C                 pop     ebp
.text:0000063D                 retn    0Ch
.text:0000063D ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z endp
.text:0000063D
.text:0000063D ; ---------------------------------------------------------------------------
.text:00000640                 db 8 dup(0CCh)
.text:00000648
.text:00000648 ; =============== S U B R O U T I N E =======================================
.text:00000648
.text:00000648 ; Attributes: bp-based frame
.text:00000648
.text:00000648 ; void __thiscall CDirItems::DeleteLastPrefix(CDirItems *__hidden this)
.text:00000648                 public ?DeleteLastPrefix@CDirItems@@QAEXXZ
.text:00000648 ?DeleteLastPrefix@CDirItems@@QAEXXZ proc near
.text:00000648                                         ; CODE XREF: EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+D2p
.text:00000648
.text:00000648 var_4           = dword ptr -4
.text:00000648
.text:00000648                 push    ebp
.text:00000649                 mov     ebp, esp
.text:0000064B                 push    ecx
.text:0000064C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000653                 mov     [ebp+var_4], ecx
.text:00000656                 mov     ecx, [ebp+var_4]
.text:00000659                 add     ecx, 0Ch
.text:0000065C                 call    ?DeleteBack@?$CRecordVector@H@@QAEXXZ ; CRecordVector<int>::DeleteBack(void)
.text:00000661                 mov     ecx, [ebp+var_4]
.text:00000664                 add     ecx, 18h
.text:00000667                 call    ?DeleteBack@?$CRecordVector@H@@QAEXXZ ; CRecordVector<int>::DeleteBack(void)
.text:0000066C                 mov     ecx, [ebp+var_4]
.text:0000066F                 call    ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::DeleteBack(void)
.text:00000674                 add     esp, 4
.text:00000677                 cmp     ebp, esp
.text:00000679                 call    __RTC_CheckEsp
.text:0000067E                 mov     esp, ebp
.text:00000680                 pop     ebp
.text:00000681                 retn
.text:00000681 ?DeleteLastPrefix@CDirItems@@QAEXXZ endp
.text:00000681
.text:00000681 ; ---------------------------------------------------------------------------
.text:00000682                 align 8
.text:00000688
.text:00000688 ; =============== S U B R O U T I N E =======================================
.text:00000688
.text:00000688 ; Attributes: bp-based frame
.text:00000688
.text:00000688 ; public: __thiscall CDirItems::CDirItems(void)
.text:00000688                 public ??0CDirItems@@QAE@XZ
.text:00000688 ??0CDirItems@@QAE@XZ proc near
.text:00000688
.text:00000688 var_10          = dword ptr -10h
.text:00000688 var_C           = dword ptr -0Ch
.text:00000688 var_4           = dword ptr -4
.text:00000688
.text:00000688                 push    ebp
.text:00000689                 mov     ebp, esp
.text:0000068B                 push    0FFFFFFFFh
.text:0000068D                 push    offset __ehhandler$??0CDirItems@@QAE@XZ
.text:00000692                 mov     eax, large fs:0
.text:00000698                 push    eax
.text:00000699                 push    ecx
.text:0000069A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000006A1                 mov     eax, dword ptr ds:___security_cookie
.text:000006A6                 xor     eax, ebp
.text:000006A8                 push    eax
.text:000006A9                 lea     eax, [ebp+var_C]
.text:000006AC                 mov     large fs:0, eax
.text:000006B2                 mov     [ebp+var_10], ecx
.text:000006B5                 mov     ecx, [ebp+var_10]
.text:000006B8                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:000006BD                 mov     [ebp+var_4], 0
.text:000006C4                 mov     ecx, [ebp+var_10]
.text:000006C7                 add     ecx, 0Ch
.text:000006CA                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:000006CF                 mov     byte ptr [ebp+var_4], 1
.text:000006D3                 mov     ecx, [ebp+var_10]
.text:000006D6                 add     ecx, 18h
.text:000006D9                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:000006DE                 mov     byte ptr [ebp+var_4], 2
.text:000006E2                 mov     ecx, [ebp+var_10]
.text:000006E5                 add     ecx, 24h ; '$'
.text:000006E8                 call    ??0?$CObjectVector@UCDirItem@@@@QAE@XZ ; CObjectVector<CDirItem>::CObjectVector<CDirItem>(void)
.text:000006ED                 mov     byte ptr [ebp+var_4], 3
.text:000006F1                 mov     eax, [ebp+var_10]
.text:000006F4                 mov     byte ptr [eax+30h], 0
.text:000006F8                 mov     ecx, [ebp+var_10]
.text:000006FB                 mov     byte ptr [ecx+31h], 0
.text:000006FF                 mov     ecx, [ebp+var_10]
.text:00000702                 add     ecx, 38h ; '8'  ; this
.text:00000705                 call    ??0CDirItemsStat@@QAE@XZ ; CDirItemsStat::CDirItemsStat(void)
.text:0000070A                 mov     ecx, [ebp+var_10]
.text:0000070D                 add     ecx, 68h ; 'h'
.text:00000710                 call    ??0CUniqBlocks@@QAE@XZ ; CUniqBlocks::CUniqBlocks(void)
.text:00000715                 mov     byte ptr [ebp+var_4], 4
.text:00000719                 mov     ecx, [ebp+var_10]
.text:0000071C                 add     ecx, 8Ch ; 'î'
.text:00000722                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00000727                 mov     byte ptr [ebp+var_4], 5
.text:0000072B                 mov     edx, [ebp+var_10]
.text:0000072E                 mov     byte ptr [edx+95h], 0
.text:00000735                 mov     eax, [ebp+var_10]
.text:00000738                 mov     dword ptr [eax+98h], 0
.text:00000742                 call    ?InitLocalPrivileges@@YG_NXZ ; InitLocalPrivileges(void)
.text:00000747                 mov     ecx, [ebp+var_10]
.text:0000074A                 mov     [ecx+94h], al
.text:00000750                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000757                 mov     eax, [ebp+var_10]
.text:0000075A                 mov     ecx, [ebp+var_C]
.text:0000075D                 mov     large fs:0, ecx
.text:00000764                 pop     ecx
.text:00000765                 add     esp, 10h
.text:00000768                 cmp     ebp, esp
.text:0000076A                 call    __RTC_CheckEsp
.text:0000076F                 mov     esp, ebp
.text:00000771                 pop     ebp
.text:00000772                 retn
.text:00000772 ??0CDirItems@@QAE@XZ endp
.text:00000772
.text:00000772 ; ---------------------------------------------------------------------------
.text:00000773                 align 8
.text:00000778
.text:00000778 ; =============== S U B R O U T I N E =======================================
.text:00000778
.text:00000778 ; Attributes: bp-based frame
.text:00000778
.text:00000778 ; __int32 __thiscall CDirItems::AddSecurityItem(CDirItems *this, const struct UString *, int *)
.text:00000778                 public ?AddSecurityItem@CDirItems@@QAEJABVUString@@AAH@Z
.text:00000778 ?AddSecurityItem@CDirItems@@QAEJABVUString@@AAH@Z proc near
.text:00000778                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+1A2p
.text:00000778                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+21Fp ...
.text:00000778
.text:00000778 var_1C          = dword ptr -1Ch
.text:00000778 var_18          = dword ptr -18h
.text:00000778 nLengthNeeded   = dword ptr -14h
.text:00000778 var_10          = dword ptr -10h
.text:00000778 var_C           = dword ptr -0Ch
.text:00000778 RequestedInformation= dword ptr -8
.text:00000778 var_4           = dword ptr -4
.text:00000778 arg_0           = dword ptr  8
.text:00000778 arg_4           = dword ptr  0Ch
.text:00000778
.text:00000778                 push    ebp
.text:00000779                 mov     ebp, esp
.text:0000077B                 sub     esp, 1Ch
.text:0000077E                 push    esi
.text:0000077F                 mov     eax, 0CCCCCCCCh
.text:00000784                 mov     [ebp+var_1C], eax
.text:00000787                 mov     [ebp+var_18], eax
.text:0000078A                 mov     [ebp+nLengthNeeded], eax
.text:0000078D                 mov     [ebp+var_10], eax
.text:00000790                 mov     [ebp+var_C], eax
.text:00000793                 mov     [ebp+RequestedInformation], eax
.text:00000796                 mov     [ebp+var_4], eax
.text:00000799                 mov     [ebp+var_4], ecx
.text:0000079C                 mov     eax, [ebp+arg_4]
.text:0000079F                 mov     dword ptr [eax], 0FFFFFFFFh
.text:000007A5                 mov     [ebp+RequestedInformation], 7
.text:000007AC                 mov     ecx, [ebp+var_4]
.text:000007AF                 movzx   edx, byte ptr [ecx+94h]
.text:000007B6                 test    edx, edx
.text:000007B8                 jz      short loc_7C3
.text:000007BA                 mov     eax, [ebp+RequestedInformation]
.text:000007BD                 or      eax, 8
.text:000007C0                 mov     [ebp+RequestedInformation], eax
.text:000007C3
.text:000007C3 loc_7C3:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+40j
.text:000007C3                 mov     [ebp+var_C], 0
.text:000007CA                 mov     esi, esp
.text:000007CC                 lea     ecx, [ebp+nLengthNeeded]
.text:000007CF                 push    ecx             ; lpnLengthNeeded
.text:000007D0                 mov     ecx, [ebp+var_4]
.text:000007D3                 add     ecx, 8Ch ; 'î'
.text:000007D9                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000007DE                 push    eax             ; nLength
.text:000007DF                 mov     ecx, [ebp+var_4]
.text:000007E2                 add     ecx, 8Ch ; 'î'
.text:000007E8                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000007ED                 push    eax             ; pSecurityDescriptor
.text:000007EE                 mov     edx, [ebp+RequestedInformation]
.text:000007F1                 push    edx             ; RequestedInformation
.text:000007F2                 mov     ecx, [ebp+arg_0]
.text:000007F5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000007FA                 push    eax             ; lpFileName
.text:000007FB                 call    dword ptr ds:__imp__GetFileSecurityW@20 ; GetFileSecurityW(x,x,x,x,x)
.text:00000801                 cmp     esi, esp
.text:00000803                 call    __RTC_CheckEsp
.text:00000808                 mov     [ebp+var_1C], eax
.text:0000080B                 cmp     [ebp+var_1C], 0
.text:0000080F                 jz      short loc_83D
.text:00000811                 cmp     [ebp+nLengthNeeded], 0
.text:00000815                 jnz     short loc_81E
.text:00000817                 xor     eax, eax
.text:00000819                 jmp     loc_949
.text:0000081E ; ---------------------------------------------------------------------------
.text:0000081E
.text:0000081E loc_81E:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+9Dj
.text:0000081E                 mov     ecx, [ebp+var_4]
.text:00000821                 add     ecx, 8Ch ; 'î'
.text:00000827                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000082C                 cmp     [ebp+nLengthNeeded], eax
.text:0000082F                 jbe     short loc_838
.text:00000831                 mov     [ebp+var_C], 1
.text:00000838
.text:00000838 loc_838:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+B7j
.text:00000838                 jmp     loc_8FF
.text:0000083D ; ---------------------------------------------------------------------------
.text:0000083D
.text:0000083D loc_83D:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+97j
.text:0000083D                 mov     esi, esp
.text:0000083F                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000845                 cmp     esi, esp
.text:00000847                 call    __RTC_CheckEsp
.text:0000084C                 mov     [ebp+var_C], eax
.text:0000084F                 cmp     [ebp+var_C], 7Ah ; 'z'
.text:00000853                 jnz     loc_8FF
.text:00000859                 mov     ecx, [ebp+var_4]
.text:0000085C                 add     ecx, 8Ch ; 'î'
.text:00000862                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000867                 cmp     [ebp+nLengthNeeded], eax
.text:0000086A                 ja      short loc_878
.text:0000086C                 mov     [ebp+var_C], 1
.text:00000873                 jmp     loc_8FF
.text:00000878 ; ---------------------------------------------------------------------------
.text:00000878
.text:00000878 loc_878:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+F2j
.text:00000878                 mov     eax, [ebp+nLengthNeeded]
.text:0000087B                 push    eax
.text:0000087C                 mov     ecx, [ebp+var_4]
.text:0000087F                 add     ecx, 8Ch ; 'î'
.text:00000885                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:0000088A                 mov     esi, esp
.text:0000088C                 lea     ecx, [ebp+nLengthNeeded]
.text:0000088F                 push    ecx             ; lpnLengthNeeded
.text:00000890                 mov     ecx, [ebp+var_4]
.text:00000893                 add     ecx, 8Ch ; 'î'
.text:00000899                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000089E                 push    eax             ; nLength
.text:0000089F                 mov     ecx, [ebp+var_4]
.text:000008A2                 add     ecx, 8Ch ; 'î'
.text:000008A8                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000008AD                 push    eax             ; pSecurityDescriptor
.text:000008AE                 mov     edx, [ebp+RequestedInformation]
.text:000008B1                 push    edx             ; RequestedInformation
.text:000008B2                 mov     ecx, [ebp+arg_0]
.text:000008B5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000008BA                 push    eax             ; lpFileName
.text:000008BB                 call    dword ptr ds:__imp__GetFileSecurityW@20 ; GetFileSecurityW(x,x,x,x,x)
.text:000008C1                 cmp     esi, esp
.text:000008C3                 call    __RTC_CheckEsp
.text:000008C8                 mov     [ebp+var_1C], eax
.text:000008CB                 cmp     [ebp+var_1C], 0
.text:000008CF                 jz      short loc_8ED
.text:000008D1                 mov     ecx, [ebp+var_4]
.text:000008D4                 add     ecx, 8Ch ; 'î'
.text:000008DA                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000008DF                 cmp     [ebp+nLengthNeeded], eax
.text:000008E2                 jz      short loc_8EB
.text:000008E4                 mov     [ebp+var_C], 1
.text:000008EB
.text:000008EB loc_8EB:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+16Aj
.text:000008EB                 jmp     short loc_8FF
.text:000008ED ; ---------------------------------------------------------------------------
.text:000008ED
.text:000008ED loc_8ED:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+157j
.text:000008ED                 mov     esi, esp
.text:000008EF                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:000008F5                 cmp     esi, esp
.text:000008F7                 call    __RTC_CheckEsp
.text:000008FC                 mov     [ebp+var_C], eax
.text:000008FF
.text:000008FF loc_8FF:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &):loc_838j
.text:000008FF                                         ; CDirItems::AddSecurityItem(UString const &,int &)+DBj ...
.text:000008FF                 cmp     [ebp+var_1C], 0
.text:00000903                 jz      short loc_92C
.text:00000905                 mov     eax, [ebp+nLengthNeeded]
.text:00000908                 push    eax             ; unsigned int
.text:00000909                 mov     ecx, [ebp+var_4]
.text:0000090C                 add     ecx, 8Ch ; 'î'
.text:00000912                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000917                 push    eax             ; unsigned __int8 *
.text:00000918                 mov     ecx, [ebp+var_4]
.text:0000091B                 add     ecx, 68h ; 'h'  ; this
.text:0000091E                 call    ?AddUniq@CUniqBlocks@@QAEIPBEI@Z ; CUniqBlocks::AddUniq(uchar const *,uint)
.text:00000923                 mov     ecx, [ebp+arg_4]
.text:00000926                 mov     [ecx], eax
.text:00000928                 xor     eax, eax
.text:0000092A                 jmp     short loc_949
.text:0000092C ; ---------------------------------------------------------------------------
.text:0000092C
.text:0000092C loc_92C:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+18Bj
.text:0000092C                 cmp     [ebp+var_C], 0
.text:00000930                 jnz     short loc_939
.text:00000932                 mov     [ebp+var_C], 1
.text:00000939
.text:00000939 loc_939:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+1B8j
.text:00000939                 mov     edx, [ebp+var_C]
.text:0000093C                 push    edx             ; unsigned __int32
.text:0000093D                 mov     eax, [ebp+arg_0]
.text:00000940                 push    eax             ; struct UString *
.text:00000941                 mov     ecx, [ebp+var_4] ; this
.text:00000944                 call    ?AddError@CDirItems@@QAEJABVUString@@K@Z ; CDirItems::AddError(UString const &,ulong)
.text:00000949
.text:00000949 loc_949:                                ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+A1j
.text:00000949                                         ; CDirItems::AddSecurityItem(UString const &,int &)+1B2j
.text:00000949                 push    edx
.text:0000094A                 mov     ecx, ebp
.text:0000094C                 push    eax
.text:0000094D                 lea     edx, $LN18
.text:00000953                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000958                 pop     eax
.text:00000959                 pop     edx
.text:0000095A                 pop     esi
.text:0000095B                 add     esp, 1Ch
.text:0000095E                 cmp     ebp, esp
.text:00000960                 call    __RTC_CheckEsp
.text:00000965                 mov     esp, ebp
.text:00000967                 pop     ebp
.text:00000968                 retn    8
.text:00000968 ?AddSecurityItem@CDirItems@@QAEJABVUString@@AAH@Z endp
.text:00000968
.text:00000968 ; ---------------------------------------------------------------------------
.text:0000096B                 align 4
.text:0000096C $LN18           dd 1                    ; DATA XREF: CDirItems::AddSecurityItem(UString const &,int &)+1D5o
.text:00000970                 dd offset $LN17
.text:00000974 $LN17           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00000970o
.text:0000097C                 dd offset $LN16         ; "secureSize"
.text:00000980 $LN16           db 'secureSize',0       ; DATA XREF: .text:0000097Co
.text:0000098B                 db 0Dh dup(0CCh)
.text:00000998
.text:00000998 ; =============== S U B R O U T I N E =======================================
.text:00000998
.text:00000998 ; Attributes: bp-based frame
.text:00000998
.text:00000998 ; __int32 __thiscall CDirItems::EnumerateDir(CDirItems *this, int, int, const struct UString *)
.text:00000998                 public ?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z
.text:00000998 ?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z proc near
.text:00000998                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+307p
.text:00000998                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+350p
.text:00000998
.text:00000998 var_FC          = dword ptr -0FCh
.text:00000998 var_F8          = dword ptr -0F8h
.text:00000998 var_F4          = dword ptr -0F4h
.text:00000998 var_F0          = dword ptr -0F0h
.text:00000998 var_EC          = dword ptr -0ECh
.text:00000998 var_E8          = dword ptr -0E8h
.text:00000998 var_E4          = dword ptr -0E4h
.text:00000998 var_E0          = byte ptr -0E0h
.text:00000998 var_D4          = dword ptr -0D4h
.text:00000998 var_D0          = dword ptr -0D0h
.text:00000998 var_CC          = byte ptr -0CCh
.text:00000998 var_C0          = dword ptr -0C0h
.text:00000998 var_BC          = dword ptr -0BCh
.text:00000998 var_B8          = byte ptr -0B8h
.text:00000998 var_AC          = dword ptr -0ACh
.text:00000998 var_A8          = dword ptr -0A8h
.text:00000998 var_A0          = byte ptr -0A0h
.text:00000998 var_90          = dword ptr -90h
.text:00000998 var_8C          = dword ptr -8Ch
.text:00000998 var_84          = dword ptr -84h
.text:00000998 var_75          = byte ptr -75h
.text:00000998 var_6C          = byte ptr -6Ch
.text:00000998 var_44          = byte ptr -44h
.text:00000998 var_30          = dword ptr -30h
.text:00000998 var_28          = byte ptr -28h
.text:00000998 var_14          = dword ptr -14h
.text:00000998 var_10          = dword ptr -10h
.text:00000998 var_C           = dword ptr -0Ch
.text:00000998 var_4           = dword ptr -4
.text:00000998 arg_0           = dword ptr  8
.text:00000998 arg_4           = dword ptr  0Ch
.text:00000998 arg_8           = dword ptr  10h
.text:00000998
.text:00000998                 push    ebp
.text:00000999                 mov     ebp, esp
.text:0000099B                 push    0FFFFFFFFh
.text:0000099D                 push    offset __ehhandler$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z
.text:000009A2                 mov     eax, large fs:0
.text:000009A8                 push    eax
.text:000009A9                 sub     esp, 0F0h
.text:000009AF                 push    edi
.text:000009B0                 push    ecx
.text:000009B1                 lea     edi, [ebp+var_FC]
.text:000009B7                 mov     ecx, 3Ch ; '<'
.text:000009BC                 mov     eax, 0CCCCCCCCh
.text:000009C1                 rep stosd
.text:000009C3                 pop     ecx
.text:000009C4                 mov     eax, dword ptr ds:___security_cookie
.text:000009C9                 xor     eax, ebp
.text:000009CB                 push    eax
.text:000009CC                 lea     eax, [ebp+var_C]
.text:000009CF                 mov     large fs:0, eax
.text:000009D5                 mov     [ebp+var_10], ecx
.text:000009D8                 mov     eax, [ebp+arg_8]
.text:000009DB                 push    eax             ; struct UString *
.text:000009DC                 mov     ecx, [ebp+var_10] ; this
.text:000009DF                 call    ?ScanProgress@CDirItems@@QAEJABVUString@@@Z ; CDirItems::ScanProgress(UString const &)
.text:000009E4                 mov     [ebp+var_14], eax
.text:000009E7                 cmp     [ebp+var_14], 0
.text:000009EB                 jz      short loc_9F5
.text:000009ED                 mov     eax, [ebp+var_14]
.text:000009F0                 jmp     loc_D2F
.text:000009F5 ; ---------------------------------------------------------------------------
.text:000009F5
.text:000009F5 loc_9F5:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+53j
.text:000009F5                 push    2Ah ; '*'
.text:000009F7                 mov     ecx, [ebp+arg_8]
.text:000009FA                 push    ecx
.text:000009FB                 lea     edx, [ebp+var_B8]
.text:00000A01                 push    edx
.text:00000A02                 call    ??H@YG?AVUString@@ABV0@_W@Z ; operator+(UString const &,wchar_t)
.text:00000A07                 mov     [ebp+var_E8], eax
.text:00000A0D                 mov     eax, [ebp+var_E8]
.text:00000A13                 mov     [ebp+var_EC], eax
.text:00000A19                 mov     [ebp+var_4], 0
.text:00000A20                 mov     ecx, [ebp+var_EC]
.text:00000A26                 push    ecx             ; struct UString *
.text:00000A27                 lea     ecx, [ebp+var_28] ; this
.text:00000A2A                 call    ??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z ; NWindows::NFile::NFind::CEnumerator::CEnumerator(UString const &)
.text:00000A2F                 mov     byte ptr [ebp+var_4], 2
.text:00000A33                 lea     ecx, [ebp+var_B8] ; this
.text:00000A39                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000A3E                 mov     [ebp+var_30], 0
.text:00000A45                 jmp     short loc_A50
.text:00000A47 ; ---------------------------------------------------------------------------
.text:00000A47
.text:00000A47 loc_A47:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+383j
.text:00000A47                 mov     edx, [ebp+var_30]
.text:00000A4A                 add     edx, 1
.text:00000A4D                 mov     [ebp+var_30], edx
.text:00000A50
.text:00000A50 loc_A50:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+ADj
.text:00000A50                 lea     ecx, [ebp+var_6C] ; this
.text:00000A53                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:00000A58                 mov     byte ptr [ebp+var_4], 3
.text:00000A5C                 lea     eax, [ebp+var_75]
.text:00000A5F                 push    eax             ; bool *
.text:00000A60                 lea     ecx, [ebp+var_6C]
.text:00000A63                 push    ecx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00000A64                 lea     ecx, [ebp+var_28] ; this
.text:00000A67                 call    ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@AA_N@Z ; NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &,bool &)
.text:00000A6C                 movzx   edx, al
.text:00000A6F                 test    edx, edx
.text:00000A71                 jnz     short loc_AAB
.text:00000A73                 mov     eax, [ebp+arg_8]
.text:00000A76                 push    eax             ; struct UString *
.text:00000A77                 mov     ecx, [ebp+var_10] ; this
.text:00000A7A                 call    ?AddError@CDirItems@@QAEJABVUString@@@Z ; CDirItems::AddError(UString const &)
.text:00000A7F                 mov     [ebp+var_BC], eax
.text:00000A85                 mov     byte ptr [ebp+var_4], 2
.text:00000A89                 lea     ecx, [ebp+var_6C] ; this
.text:00000A8C                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000A91                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A98                 lea     ecx, [ebp+var_28] ; this
.text:00000A9B                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:00000AA0                 mov     eax, [ebp+var_BC]
.text:00000AA6                 jmp     loc_D2F
.text:00000AAB ; ---------------------------------------------------------------------------
.text:00000AAB
.text:00000AAB loc_AAB:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+D9j
.text:00000AAB                 movzx   ecx, [ebp+var_75]
.text:00000AAF                 test    ecx, ecx
.text:00000AB1                 jnz     short loc_AE3
.text:00000AB3                 mov     [ebp+var_C0], 0
.text:00000ABD                 mov     byte ptr [ebp+var_4], 2
.text:00000AC1                 lea     ecx, [ebp+var_6C] ; this
.text:00000AC4                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000AC9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000AD0                 lea     ecx, [ebp+var_28] ; this
.text:00000AD3                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:00000AD8                 mov     eax, [ebp+var_C0]
.text:00000ADE                 jmp     loc_D2F
.text:00000AE3 ; ---------------------------------------------------------------------------
.text:00000AE3
.text:00000AE3 loc_AE3:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+119j
.text:00000AE3                 mov     [ebp+var_84], 0FFFFFFFFh
.text:00000AED                 mov     edx, [ebp+var_10]
.text:00000AF0                 movzx   eax, byte ptr [edx+95h]
.text:00000AF7                 test    eax, eax
.text:00000AF9                 jz      loc_B8F
.text:00000AFF                 lea     ecx, [ebp+var_84]
.text:00000B05                 push    ecx             ; int *
.text:00000B06                 lea     edx, [ebp+var_44]
.text:00000B09                 push    edx
.text:00000B0A                 mov     eax, [ebp+arg_8]
.text:00000B0D                 push    eax
.text:00000B0E                 lea     ecx, [ebp+var_CC]
.text:00000B14                 push    ecx
.text:00000B15                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00000B1A                 mov     [ebp+var_F0], eax
.text:00000B20                 mov     edx, [ebp+var_F0]
.text:00000B26                 mov     [ebp+var_F4], edx
.text:00000B2C                 mov     byte ptr [ebp+var_4], 4
.text:00000B30                 mov     eax, [ebp+var_F4]
.text:00000B36                 push    eax             ; struct UString *
.text:00000B37                 mov     ecx, [ebp+var_10] ; this
.text:00000B3A                 call    ?AddSecurityItem@CDirItems@@QAEJABVUString@@AAH@Z ; CDirItems::AddSecurityItem(UString const &,int &)
.text:00000B3F                 mov     [ebp+var_8C], eax
.text:00000B45                 mov     byte ptr [ebp+var_4], 3
.text:00000B49                 lea     ecx, [ebp+var_CC] ; this
.text:00000B4F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000B54                 cmp     [ebp+var_8C], 0
.text:00000B5B                 jz      short loc_B8F
.text:00000B5D                 mov     ecx, [ebp+var_8C]
.text:00000B63                 mov     [ebp+var_D0], ecx
.text:00000B69                 mov     byte ptr [ebp+var_4], 2
.text:00000B6D                 lea     ecx, [ebp+var_6C] ; this
.text:00000B70                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000B75                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B7C                 lea     ecx, [ebp+var_28] ; this
.text:00000B7F                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:00000B84                 mov     eax, [ebp+var_D0]
.text:00000B8A                 jmp     loc_D2F
.text:00000B8F ; ---------------------------------------------------------------------------
.text:00000B8F
.text:00000B8F loc_B8F:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+161j
.text:00000B8F                                         ; CDirItems::EnumerateDir(int,int,UString const &)+1C3j
.text:00000B8F                 lea     edx, [ebp+var_6C]
.text:00000B92                 push    edx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00000B93                 mov     eax, [ebp+var_84]
.text:00000B99                 push    eax             ; int
.text:00000B9A                 mov     ecx, [ebp+arg_4]
.text:00000B9D                 push    ecx             ; int
.text:00000B9E                 mov     edx, [ebp+arg_0]
.text:00000BA1                 push    edx             ; int
.text:00000BA2                 mov     ecx, [ebp+var_10] ; this
.text:00000BA5                 call    ?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z ; CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)
.text:00000BAA                 mov     eax, [ebp+var_10]
.text:00000BAD                 cmp     dword ptr [eax+98h], 0
.text:00000BB4                 jz      short loc_C14
.text:00000BB6                 mov     ecx, [ebp+var_30]
.text:00000BB9                 and     ecx, 0FFFh
.text:00000BBF                 cmp     ecx, 0FFFh
.text:00000BC5                 jnz     short loc_C14
.text:00000BC7                 mov     edx, [ebp+arg_8]
.text:00000BCA                 push    edx             ; struct UString *
.text:00000BCB                 mov     ecx, [ebp+var_10] ; this
.text:00000BCE                 call    ?ScanProgress@CDirItems@@QAEJABVUString@@@Z ; CDirItems::ScanProgress(UString const &)
.text:00000BD3                 mov     [ebp+var_90], eax
.text:00000BD9                 cmp     [ebp+var_90], 0
.text:00000BE0                 jz      short loc_C14
.text:00000BE2                 mov     eax, [ebp+var_90]
.text:00000BE8                 mov     [ebp+var_D4], eax
.text:00000BEE                 mov     byte ptr [ebp+var_4], 2
.text:00000BF2                 lea     ecx, [ebp+var_6C] ; this
.text:00000BF5                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000BFA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C01                 lea     ecx, [ebp+var_28] ; this
.text:00000C04                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:00000C09                 mov     eax, [ebp+var_D4]
.text:00000C0F                 jmp     loc_D2F
.text:00000C14 ; ---------------------------------------------------------------------------
.text:00000C14
.text:00000C14 loc_C14:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+21Cj
.text:00000C14                                         ; CDirItems::EnumerateDir(int,int,UString const &)+22Dj ...
.text:00000C14                 lea     ecx, [ebp+var_6C] ; this
.text:00000C17                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00000C1C                 movzx   ecx, al
.text:00000C1F                 test    ecx, ecx
.text:00000C21                 jz      loc_D0F
.text:00000C27                 push    5Ch ; '\'
.text:00000C29                 lea     edx, [ebp+var_44]
.text:00000C2C                 push    edx
.text:00000C2D                 lea     eax, [ebp+var_A0]
.text:00000C33                 push    eax
.text:00000C34                 call    ??H@YG?AVUString@@ABV0@_W@Z ; operator+(UString const &,wchar_t)
.text:00000C39                 mov     byte ptr [ebp+var_4], 5
.text:00000C3D                 lea     ecx, [ebp+var_A0]
.text:00000C43                 push    ecx             ; struct UString *
.text:00000C44                 mov     edx, [ebp+arg_4]
.text:00000C47                 push    edx             ; int
.text:00000C48                 mov     eax, [ebp+arg_0]
.text:00000C4B                 push    eax             ; int
.text:00000C4C                 mov     ecx, [ebp+var_10] ; this
.text:00000C4F                 call    ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z ; CDirItems::AddPrefix(int,int,UString const &)
.text:00000C54                 mov     [ebp+var_A8], eax
.text:00000C5A                 lea     ecx, [ebp+var_A0]
.text:00000C60                 push    ecx
.text:00000C61                 mov     edx, [ebp+arg_8]
.text:00000C64                 push    edx
.text:00000C65                 lea     eax, [ebp+var_E0]
.text:00000C6B                 push    eax
.text:00000C6C                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00000C71                 mov     [ebp+var_F8], eax
.text:00000C77                 mov     ecx, [ebp+var_F8]
.text:00000C7D                 mov     [ebp+var_FC], ecx
.text:00000C83                 mov     byte ptr [ebp+var_4], 6
.text:00000C87                 mov     edx, [ebp+var_FC]
.text:00000C8D                 push    edx             ; struct UString *
.text:00000C8E                 mov     eax, [ebp+var_A8]
.text:00000C94                 push    eax             ; int
.text:00000C95                 mov     ecx, [ebp+var_A8]
.text:00000C9B                 push    ecx             ; int
.text:00000C9C                 mov     ecx, [ebp+var_10] ; this
.text:00000C9F                 call    ?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z ; CDirItems::EnumerateDir(int,int,UString const &)
.text:00000CA4                 mov     [ebp+var_AC], eax
.text:00000CAA                 mov     byte ptr [ebp+var_4], 5
.text:00000CAE                 lea     ecx, [ebp+var_E0] ; this
.text:00000CB4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000CB9                 cmp     [ebp+var_AC], 0
.text:00000CC0                 jz      short loc_D00
.text:00000CC2                 mov     edx, [ebp+var_AC]
.text:00000CC8                 mov     [ebp+var_E4], edx
.text:00000CCE                 mov     byte ptr [ebp+var_4], 3
.text:00000CD2                 lea     ecx, [ebp+var_A0] ; this
.text:00000CD8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000CDD                 mov     byte ptr [ebp+var_4], 2
.text:00000CE1                 lea     ecx, [ebp+var_6C] ; this
.text:00000CE4                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000CE9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000CF0                 lea     ecx, [ebp+var_28] ; this
.text:00000CF3                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:00000CF8                 mov     eax, [ebp+var_E4]
.text:00000CFE                 jmp     short loc_D2F
.text:00000D00 ; ---------------------------------------------------------------------------
.text:00000D00
.text:00000D00 loc_D00:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+328j
.text:00000D00                 mov     byte ptr [ebp+var_4], 3
.text:00000D04                 lea     ecx, [ebp+var_A0] ; this
.text:00000D0A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D0F
.text:00000D0F loc_D0F:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+289j
.text:00000D0F                 mov     byte ptr [ebp+var_4], 2
.text:00000D13                 lea     ecx, [ebp+var_6C] ; this
.text:00000D16                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000D1B                 jmp     loc_A47
.text:00000D20 ; ---------------------------------------------------------------------------
.text:00000D20                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D27                 lea     ecx, [ebp+var_28] ; this
.text:00000D2A                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:00000D2F
.text:00000D2F loc_D2F:                                ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+58j
.text:00000D2F                                         ; CDirItems::EnumerateDir(int,int,UString const &)+10Ej ...
.text:00000D2F                 push    edx
.text:00000D30                 mov     ecx, ebp
.text:00000D32                 push    eax
.text:00000D33                 lea     edx, $LN28
.text:00000D39                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D3E                 pop     eax
.text:00000D3F                 pop     edx
.text:00000D40                 mov     ecx, [ebp+var_C]
.text:00000D43                 mov     large fs:0, ecx
.text:00000D4A                 pop     ecx
.text:00000D4B                 pop     edi
.text:00000D4C                 add     esp, 0FCh
.text:00000D52                 cmp     ebp, esp
.text:00000D54                 call    __RTC_CheckEsp
.text:00000D59                 mov     esp, ebp
.text:00000D5B                 pop     ebp
.text:00000D5C                 retn    0Ch
.text:00000D5C ?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z endp
.text:00000D5C
.text:00000D5C ; ---------------------------------------------------------------------------
.text:00000D5F                 align 10h
.text:00000D60 $LN28           dd 5                    ; DATA XREF: CDirItems::EnumerateDir(int,int,UString const &)+39Bo
.text:00000D64                 dd offset $LN27
.text:00000D68 $LN27           dd 0FFFFFFD8h, 10h      ; DATA XREF: .text:00000D64o
.text:00000D70                 dd offset $LN21         ; "enumerator"
.text:00000D74                 dd 0FFFFFF94h, 38h
.text:00000D7C                 dd offset $LN22         ; "fi"
.text:00000D80                 db 8Bh, 0FFh
.text:00000D82                 dw 0FFFFh
.text:00000D84                 dd 1
.text:00000D88                 dd offset $LN23         ; "found"
.text:00000D8C                 dd 0FFFFFF7Ch, 4
.text:00000D94                 dd offset $LN24         ; "secureIndex"
.text:00000D98                 dd 0FFFFFF60h, 0Ch
.text:00000DA0                 dd offset $LN25         ; "name2"
.text:00000DA4 $LN25           db 'name2',0            ; DATA XREF: .text:00000DA0o
.text:00000DAA $LN24           db 'secureIndex',0      ; DATA XREF: .text:00000D94o
.text:00000DB6 $LN23           db 'found',0            ; DATA XREF: .text:00000D88o
.text:00000DBC $LN22           db 'fi',0               ; DATA XREF: .text:00000D7Co
.text:00000DBF $LN21           db 'enumerator',0       ; DATA XREF: .text:00000D70o
.text:00000DCA                 db 0Eh dup(0CCh)
.text:00000DD8
.text:00000DD8 ; =============== S U B R O U T I N E =======================================
.text:00000DD8
.text:00000DD8 ; Attributes: bp-based frame
.text:00000DD8
.text:00000DD8 ; int __stdcall CDirItems::EnumerateItems2(UString *, UString *, int, int)
.text:00000DD8                 public ?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z
.text:00000DD8 ?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z proc near
.text:00000DD8
.text:00000DD8 var_FC          = dword ptr -0FCh
.text:00000DD8 var_F8          = dword ptr -0F8h
.text:00000DD8 var_F4          = dword ptr -0F4h
.text:00000DD8 var_F0          = dword ptr -0F0h
.text:00000DD8 var_EC          = dword ptr -0ECh
.text:00000DD8 var_E8          = dword ptr -0E8h
.text:00000DD8 var_E4          = dword ptr -0E4h
.text:00000DD8 var_E0          = byte ptr -0E0h
.text:00000DD8 var_D4          = byte ptr -0D4h
.text:00000DD8 var_C8          = dword ptr -0C8h
.text:00000DD8 var_C4          = dword ptr -0C4h
.text:00000DD8 var_C0          = dword ptr -0C0h
.text:00000DD8 var_BC          = dword ptr -0BCh
.text:00000DD8 var_B4          = byte ptr -0B4h
.text:00000DD8 var_A4          = dword ptr -0A4h
.text:00000DD8 var_9C          = dword ptr -9Ch
.text:00000DD8 var_94          = dword ptr -94h
.text:00000DD8 var_8C          = byte ptr -8Ch
.text:00000DD8 var_7C          = dword ptr -7Ch
.text:00000DD8 var_78          = dword ptr -78h
.text:00000DD8 var_70          = byte ptr -70h
.text:00000DD8 var_5C          = byte ptr -5Ch
.text:00000DD8 var_34          = byte ptr -34h
.text:00000DD8 var_20          = dword ptr -20h
.text:00000DD8 var_1C          = dword ptr -1Ch
.text:00000DD8 var_18          = dword ptr -18h
.text:00000DD8 var_14          = dword ptr -14h
.text:00000DD8 var_10          = dword ptr -10h
.text:00000DD8 var_C           = dword ptr -0Ch
.text:00000DD8 var_4           = dword ptr -4
.text:00000DD8 arg_0           = dword ptr  8
.text:00000DD8 arg_4           = dword ptr  0Ch
.text:00000DD8 arg_8           = dword ptr  10h
.text:00000DD8 arg_C           = dword ptr  14h
.text:00000DD8
.text:00000DD8                 push    ebp
.text:00000DD9                 mov     ebp, esp
.text:00000DDB                 push    0FFFFFFFFh
.text:00000DDD                 push    offset __ehhandler$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z
.text:00000DE2                 mov     eax, large fs:0
.text:00000DE8                 push    eax
.text:00000DE9                 sub     esp, 0F0h
.text:00000DEF                 push    edi
.text:00000DF0                 push    ecx
.text:00000DF1                 lea     edi, [ebp+var_FC]
.text:00000DF7                 mov     ecx, 3Ch ; '<'
.text:00000DFC                 mov     eax, 0CCCCCCCCh
.text:00000E01                 rep stosd
.text:00000E03                 pop     ecx
.text:00000E04                 mov     eax, dword ptr ds:___security_cookie
.text:00000E09                 xor     eax, ebp
.text:00000E0B                 push    eax
.text:00000E0C                 lea     eax, [ebp+var_C]
.text:00000E0F                 mov     large fs:0, eax
.text:00000E15                 mov     [ebp+var_10], ecx
.text:00000E18                 mov     ecx, [ebp+arg_0] ; this
.text:00000E1B                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000E20                 movzx   eax, al
.text:00000E23                 test    eax, eax
.text:00000E25                 jz      short loc_E33
.text:00000E27                 mov     [ebp+var_E8], 0FFFFFFFFh
.text:00000E31                 jmp     short loc_E49
.text:00000E33 ; ---------------------------------------------------------------------------
.text:00000E33
.text:00000E33 loc_E33:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+4Dj
.text:00000E33                 mov     ecx, [ebp+arg_0]
.text:00000E36                 push    ecx             ; struct UString *
.text:00000E37                 push    0FFFFFFFFh      ; int
.text:00000E39                 push    0FFFFFFFFh      ; int
.text:00000E3B                 mov     ecx, [ebp+var_10] ; this
.text:00000E3E                 call    ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z ; CDirItems::AddPrefix(int,int,UString const &)
.text:00000E43                 mov     [ebp+var_E8], eax
.text:00000E49
.text:00000E49 loc_E49:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+59j
.text:00000E49                 mov     edx, [ebp+var_E8]
.text:00000E4F                 mov     [ebp+var_14], edx
.text:00000E52                 mov     ecx, [ebp+arg_4] ; this
.text:00000E55                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000E5A                 movzx   eax, al
.text:00000E5D                 test    eax, eax
.text:00000E5F                 jz      short loc_E6D
.text:00000E61                 mov     [ebp+var_EC], 0FFFFFFFFh
.text:00000E6B                 jmp     short loc_E83
.text:00000E6D ; ---------------------------------------------------------------------------
.text:00000E6D
.text:00000E6D loc_E6D:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+87j
.text:00000E6D                 mov     ecx, [ebp+arg_4]
.text:00000E70                 push    ecx             ; struct UString *
.text:00000E71                 push    0FFFFFFFFh      ; int
.text:00000E73                 push    0FFFFFFFFh      ; int
.text:00000E75                 mov     ecx, [ebp+var_10] ; this
.text:00000E78                 call    ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z ; CDirItems::AddPrefix(int,int,UString const &)
.text:00000E7D                 mov     [ebp+var_EC], eax
.text:00000E83
.text:00000E83 loc_E83:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+93j
.text:00000E83                 mov     edx, [ebp+var_EC]
.text:00000E89                 mov     [ebp+var_18], edx
.text:00000E8C                 mov     [ebp+var_1C], 0
.text:00000E93                 jmp     short loc_E9E
.text:00000E95 ; ---------------------------------------------------------------------------
.text:00000E95
.text:00000E95 loc_E95:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+181j
.text:00000E95                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+408j
.text:00000E95                 mov     eax, [ebp+var_1C]
.text:00000E98                 add     eax, 1
.text:00000E9B                 mov     [ebp+var_1C], eax
.text:00000E9E
.text:00000E9E loc_E9E:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+BBj
.text:00000E9E                 mov     ecx, [ebp+arg_8]
.text:00000EA1                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00000EA6                 cmp     [ebp+var_1C], eax
.text:00000EA9                 jnb     loc_11E5
.text:00000EAF                 mov     ecx, [ebp+var_1C]
.text:00000EB2                 push    ecx
.text:00000EB3                 mov     ecx, [ebp+arg_8]
.text:00000EB6                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00000EBB                 mov     [ebp+var_20], eax
.text:00000EBE                 lea     ecx, [ebp+var_5C] ; this
.text:00000EC1                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:00000EC6                 mov     [ebp+var_4], 0
.text:00000ECD                 mov     edx, [ebp+var_20]
.text:00000ED0                 push    edx
.text:00000ED1                 mov     eax, [ebp+arg_0]
.text:00000ED4                 push    eax
.text:00000ED5                 lea     ecx, [ebp+var_70]
.text:00000ED8                 push    ecx
.text:00000ED9                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00000EDE                 mov     byte ptr [ebp+var_4], 1
.text:00000EE2                 lea     ecx, [ebp+var_70]
.text:00000EE5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000EEA                 push    eax             ; wchar_t *
.text:00000EEB                 lea     ecx, [ebp+var_5C] ; this
.text:00000EEE                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:00000EF3                 movzx   edx, al
.text:00000EF6                 test    edx, edx
.text:00000EF8                 jnz     short loc_F5E
.text:00000EFA                 lea     eax, [ebp+var_70]
.text:00000EFD                 push    eax             ; struct UString *
.text:00000EFE                 mov     ecx, [ebp+var_10] ; this
.text:00000F01                 call    ?AddError@CDirItems@@QAEJABVUString@@@Z ; CDirItems::AddError(UString const &)
.text:00000F06                 mov     [ebp+var_78], eax
.text:00000F09                 cmp     [ebp+var_78], 0
.text:00000F0D                 jz      short loc_F3E
.text:00000F0F                 mov     ecx, [ebp+var_78]
.text:00000F12                 mov     [ebp+var_C4], ecx
.text:00000F18                 mov     byte ptr [ebp+var_4], 0
.text:00000F1C                 lea     ecx, [ebp+var_70] ; this
.text:00000F1F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000F24                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F2B                 lea     ecx, [ebp+var_5C] ; this
.text:00000F2E                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000F33                 mov     eax, [ebp+var_C4]
.text:00000F39                 jmp     loc_11EF
.text:00000F3E ; ---------------------------------------------------------------------------
.text:00000F3E
.text:00000F3E loc_F3E:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+135j
.text:00000F3E                 mov     byte ptr [ebp+var_4], 0
.text:00000F42                 lea     ecx, [ebp+var_70] ; this
.text:00000F45                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000F4A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F51                 lea     ecx, [ebp+var_5C] ; this
.text:00000F54                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000F59                 jmp     loc_E95
.text:00000F5E ; ---------------------------------------------------------------------------
.text:00000F5E
.text:00000F5E loc_F5E:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+120j
.text:00000F5E                 cmp     [ebp+arg_C], 0
.text:00000F62                 jz      short loc_F70
.text:00000F64                 lea     edx, [ebp+var_70]
.text:00000F67                 push    edx
.text:00000F68                 mov     ecx, [ebp+arg_C]
.text:00000F6B                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00000F70
.text:00000F70 loc_F70:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+18Aj
.text:00000F70                 mov     ecx, [ebp+var_20] ; this
.text:00000F73                 call    ?ReverseFind_PathSepar@UString@@QBEHXZ ; UString::ReverseFind_PathSepar(void)
.text:00000F78                 mov     [ebp+var_7C], eax
.text:00000F7B                 lea     ecx, [ebp+var_8C]
.text:00000F81                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000F86                 mov     byte ptr [ebp+var_4], 2
.text:00000F8A                 mov     eax, [ebp+var_14]
.text:00000F8D                 mov     [ebp+var_94], eax
.text:00000F93                 cmp     [ebp+var_7C], 0
.text:00000F97                 jl      short loc_FD1
.text:00000F99                 mov     ecx, [ebp+var_7C]
.text:00000F9C                 add     ecx, 1
.text:00000F9F                 push    ecx             ; unsigned int
.text:00000FA0                 mov     ecx, [ebp+var_20]
.text:00000FA3                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000FA8                 push    eax             ; wchar_t *
.text:00000FA9                 lea     ecx, [ebp+var_8C] ; this
.text:00000FAF                 call    ?SetFrom@UString@@QAEXPB_WI@Z ; UString::SetFrom(wchar_t const *,uint)
.text:00000FB4                 lea     edx, [ebp+var_8C]
.text:00000FBA                 push    edx             ; struct UString *
.text:00000FBB                 mov     eax, [ebp+var_18]
.text:00000FBE                 push    eax             ; int
.text:00000FBF                 mov     ecx, [ebp+var_14]
.text:00000FC2                 push    ecx             ; int
.text:00000FC3                 mov     ecx, [ebp+var_10] ; this
.text:00000FC6                 call    ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z ; CDirItems::AddPrefix(int,int,UString const &)
.text:00000FCB                 mov     [ebp+var_94], eax
.text:00000FD1
.text:00000FD1 loc_FD1:                                ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+1BFj
.text:00000FD1                 mov     [ebp+var_9C], 0FFFFFFFFh
.text:00000FDB                 mov     edx, [ebp+var_10]
.text:00000FDE                 movzx   eax, byte ptr [edx+95h]
.text:00000FE5                 test    eax, eax
.text:00000FE7                 jz      short loc_104C
.text:00000FE9                 lea     ecx, [ebp+var_9C]
.text:00000FEF                 push    ecx             ; int *
.text:00000FF0                 lea     edx, [ebp+var_70]
.text:00000FF3                 push    edx             ; struct UString *
.text:00000FF4                 mov     ecx, [ebp+var_10] ; this
.text:00000FF7                 call    ?AddSecurityItem@CDirItems@@QAEJABVUString@@AAH@Z ; CDirItems::AddSecurityItem(UString const &,int &)
.text:00000FFC                 mov     [ebp+var_A4], eax
.text:00001002                 cmp     [ebp+var_A4], 0
.text:00001009                 jz      short loc_104C
.text:0000100B                 mov     eax, [ebp+var_A4]
.text:00001011                 mov     [ebp+var_C8], eax
.text:00001017                 mov     byte ptr [ebp+var_4], 1
.text:0000101B                 lea     ecx, [ebp+var_8C] ; this
.text:00001021                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001026                 mov     byte ptr [ebp+var_4], 0
.text:0000102A                 lea     ecx, [ebp+var_70] ; this
.text:0000102D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001032                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001039                 lea     ecx, [ebp+var_5C] ; this
.text:0000103C                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001041                 mov     eax, [ebp+var_C8]
.text:00001047                 jmp     loc_11EF
.text:0000104C ; ---------------------------------------------------------------------------
.text:0000104C
.text:0000104C loc_104C:                               ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+20Fj
.text:0000104C                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+231j
.text:0000104C                 lea     ecx, [ebp+var_5C]
.text:0000104F                 push    ecx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00001050                 mov     edx, [ebp+var_9C]
.text:00001056                 push    edx             ; int
.text:00001057                 mov     eax, [ebp+var_18]
.text:0000105A                 push    eax             ; int
.text:0000105B                 mov     ecx, [ebp+var_94]
.text:00001061                 push    ecx             ; int
.text:00001062                 mov     ecx, [ebp+var_10] ; this
.text:00001065                 call    ?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z ; CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)
.text:0000106A                 lea     ecx, [ebp+var_5C] ; this
.text:0000106D                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00001072                 movzx   edx, al
.text:00001075                 test    edx, edx
.text:00001077                 jz      loc_11B6
.text:0000107D                 push    5Ch ; '\'
.text:0000107F                 lea     eax, [ebp+var_34]
.text:00001082                 push    eax
.text:00001083                 lea     ecx, [ebp+var_B4]
.text:00001089                 push    ecx
.text:0000108A                 call    ??H@YG?AVUString@@ABV0@_W@Z ; operator+(UString const &,wchar_t)
.text:0000108F                 mov     byte ptr [ebp+var_4], 3
.text:00001093                 lea     edx, [ebp+var_B4]
.text:00001099                 push    edx             ; struct UString *
.text:0000109A                 mov     eax, [ebp+var_18]
.text:0000109D                 push    eax             ; int
.text:0000109E                 mov     ecx, [ebp+var_94]
.text:000010A4                 push    ecx             ; int
.text:000010A5                 mov     ecx, [ebp+var_10] ; this
.text:000010A8                 call    ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z ; CDirItems::AddPrefix(int,int,UString const &)
.text:000010AD                 mov     [ebp+var_BC], eax
.text:000010B3                 lea     edx, [ebp+var_B4]
.text:000010B9                 push    edx
.text:000010BA                 lea     eax, [ebp+var_8C]
.text:000010C0                 push    eax
.text:000010C1                 mov     ecx, [ebp+arg_0]
.text:000010C4                 push    ecx
.text:000010C5                 lea     edx, [ebp+var_D4]
.text:000010CB                 push    edx
.text:000010CC                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:000010D1                 mov     [ebp+var_F0], eax
.text:000010D7                 mov     eax, [ebp+var_F0]
.text:000010DD                 mov     [ebp+var_F4], eax
.text:000010E3                 mov     byte ptr [ebp+var_4], 4
.text:000010E7                 mov     ecx, [ebp+var_F4]
.text:000010ED                 push    ecx
.text:000010EE                 lea     edx, [ebp+var_E0]
.text:000010F4                 push    edx
.text:000010F5                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:000010FA                 mov     [ebp+var_F8], eax
.text:00001100                 mov     eax, [ebp+var_F8]
.text:00001106                 mov     [ebp+var_FC], eax
.text:0000110C                 mov     byte ptr [ebp+var_4], 5
.text:00001110                 mov     ecx, [ebp+var_FC]
.text:00001116                 push    ecx             ; struct UString *
.text:00001117                 mov     edx, [ebp+var_BC]
.text:0000111D                 push    edx             ; int
.text:0000111E                 mov     eax, [ebp+var_BC]
.text:00001124                 push    eax             ; int
.text:00001125                 mov     ecx, [ebp+var_10] ; this
.text:00001128                 call    ?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z ; CDirItems::EnumerateDir(int,int,UString const &)
.text:0000112D                 mov     [ebp+var_C0], eax
.text:00001133                 mov     byte ptr [ebp+var_4], 4
.text:00001137                 lea     ecx, [ebp+var_E0] ; this
.text:0000113D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001142                 mov     byte ptr [ebp+var_4], 3
.text:00001146                 lea     ecx, [ebp+var_D4] ; this
.text:0000114C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001151                 cmp     [ebp+var_C0], 0
.text:00001158                 jz      short loc_11A7
.text:0000115A                 mov     ecx, [ebp+var_C0]
.text:00001160                 mov     [ebp+var_E4], ecx
.text:00001166                 mov     byte ptr [ebp+var_4], 2
.text:0000116A                 lea     ecx, [ebp+var_B4] ; this
.text:00001170                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001175                 mov     byte ptr [ebp+var_4], 1
.text:00001179                 lea     ecx, [ebp+var_8C] ; this
.text:0000117F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001184                 mov     byte ptr [ebp+var_4], 0
.text:00001188                 lea     ecx, [ebp+var_70] ; this
.text:0000118B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001190                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001197                 lea     ecx, [ebp+var_5C] ; this
.text:0000119A                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:0000119F                 mov     eax, [ebp+var_E4]
.text:000011A5                 jmp     short loc_11EF
.text:000011A7 ; ---------------------------------------------------------------------------
.text:000011A7
.text:000011A7 loc_11A7:                               ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+380j
.text:000011A7                 mov     byte ptr [ebp+var_4], 2
.text:000011AB                 lea     ecx, [ebp+var_B4] ; this
.text:000011B1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000011B6
.text:000011B6 loc_11B6:                               ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+29Fj
.text:000011B6                 mov     byte ptr [ebp+var_4], 1
.text:000011BA                 lea     ecx, [ebp+var_8C] ; this
.text:000011C0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000011C5                 mov     byte ptr [ebp+var_4], 0
.text:000011C9                 lea     ecx, [ebp+var_70] ; this
.text:000011CC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000011D1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000011D8                 lea     ecx, [ebp+var_5C] ; this
.text:000011DB                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000011E0                 jmp     loc_E95
.text:000011E5 ; ---------------------------------------------------------------------------
.text:000011E5
.text:000011E5 loc_11E5:                               ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+D1j
.text:000011E5                 mov     ecx, [ebp+var_10] ; this
.text:000011E8                 call    ?ReserveDown@CDirItems@@QAEXXZ ; CDirItems::ReserveDown(void)
.text:000011ED                 xor     eax, eax
.text:000011EF
.text:000011EF loc_11EF:                               ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+161j
.text:000011EF                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+26Fj ...
.text:000011EF                 push    edx
.text:000011F0                 mov     ecx, ebp
.text:000011F2                 push    eax
.text:000011F3                 lea     edx, $LN31
.text:000011F9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000011FE                 pop     eax
.text:000011FF                 pop     edx
.text:00001200                 mov     ecx, [ebp+var_C]
.text:00001203                 mov     large fs:0, ecx
.text:0000120A                 pop     ecx
.text:0000120B                 pop     edi
.text:0000120C                 add     esp, 0FCh
.text:00001212                 cmp     ebp, esp
.text:00001214                 call    __RTC_CheckEsp
.text:00001219                 mov     esp, ebp
.text:0000121B                 pop     ebp
.text:0000121C                 retn    10h
.text:0000121C ?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z endp
.text:0000121C
.text:0000121C ; ---------------------------------------------------------------------------
.text:0000121F                 align 10h
.text:00001220 $LN31           dd 5                    ; DATA XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+41Bo
.text:00001224                 dd offset $LN30
.text:00001228 $LN30           dd 0FFFFFFA4h, 38h      ; DATA XREF: .text:00001224o
.text:00001230                 dd offset $LN24_0       ; "fi"
.text:00001234                 db 90h
.text:00001235                 db 3 dup(0FFh)
.text:00001238                 dd 0Ch
.text:0000123C                 dd offset $LN25_0       ; "phyPath"
.text:00001240                 dd 0FFFFFF74h, 0Ch
.text:00001248                 dd offset $LN26         ; "phyPrefixCur"
.text:0000124C                 dd 0FFFFFF64h, 4
.text:00001254                 dd offset $LN27_0       ; "secureIndex"
.text:00001258                 dd 0FFFFFF4Ch, 0Ch
.text:00001260                 dd offset $LN28_0       ; "name2"
.text:00001264 $LN28_0         db 'name2',0            ; DATA XREF: .text:00001260o
.text:0000126A $LN27_0         db 'secureIndex',0      ; DATA XREF: .text:00001254o
.text:00001276 $LN26           db 'phyPrefixCur',0     ; DATA XREF: .text:00001248o
.text:00001283 $LN25_0         db 'phyPath',0          ; DATA XREF: .text:0000123Co
.text:0000128B $LN24_0         db 'fi',0               ; DATA XREF: .text:00001230o
.text:0000128E                 db 0Ah dup(0CCh)
.text:00001298
.text:00001298 ; =============== S U B R O U T I N E =======================================
.text:00001298
.text:00001298 ; Attributes: bp-based frame
.text:00001298
.text:00001298 ; __int32 __thiscall CDirItems::SetLinkInfo(CDirItems *this, struct CDirItem *, const struct NWindows::NFile::NFind::CFileInfo *, const struct UString *)
.text:00001298                 public ?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z
.text:00001298 ?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z proc near
.text:00001298                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+450p
.text:00001298                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+2CDp
.text:00001298
.text:00001298 var_5C          = dword ptr -5Ch
.text:00001298 var_58          = dword ptr -58h
.text:00001298 var_54          = dword ptr -54h
.text:00001298 var_4C          = byte ptr -4Ch
.text:00001298 var_28          = dword ptr -28h
.text:00001298 var_20          = byte ptr -20h
.text:00001298 var_10          = dword ptr -10h
.text:00001298 var_C           = dword ptr -0Ch
.text:00001298 var_4           = dword ptr -4
.text:00001298 arg_0           = dword ptr  8
.text:00001298 arg_4           = dword ptr  0Ch
.text:00001298 arg_8           = dword ptr  10h
.text:00001298
.text:00001298                 push    ebp
.text:00001299                 mov     ebp, esp
.text:0000129B                 push    0FFFFFFFFh
.text:0000129D                 push    offset __ehhandler$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z
.text:000012A2                 mov     eax, large fs:0
.text:000012A8                 push    eax
.text:000012A9                 sub     esp, 50h
.text:000012AC                 push    esi
.text:000012AD                 push    edi
.text:000012AE                 push    ecx
.text:000012AF                 lea     edi, [ebp+var_5C]
.text:000012B2                 mov     ecx, 14h
.text:000012B7                 mov     eax, 0CCCCCCCCh
.text:000012BC                 rep stosd
.text:000012BE                 pop     ecx
.text:000012BF                 mov     eax, dword ptr ds:___security_cookie
.text:000012C4                 xor     eax, ebp
.text:000012C6                 push    eax
.text:000012C7                 lea     eax, [ebp+var_C]
.text:000012CA                 mov     large fs:0, eax
.text:000012D0                 mov     [ebp+var_10], ecx
.text:000012D3                 mov     eax, [ebp+var_10]
.text:000012D6                 movzx   ecx, byte ptr [eax+30h]
.text:000012DA                 test    ecx, ecx
.text:000012DC                 jz      short loc_12ED
.text:000012DE                 mov     ecx, [ebp+arg_4] ; this
.text:000012E1                 call    ?HasReparsePoint@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::HasReparsePoint(void)
.text:000012E6                 movzx   edx, al
.text:000012E9                 test    edx, edx
.text:000012EB                 jnz     short loc_12F4
.text:000012ED
.text:000012ED loc_12ED:                               ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+44j
.text:000012ED                 xor     eax, eax
.text:000012EF                 jmp     loc_13D2
.text:000012F4 ; ---------------------------------------------------------------------------
.text:000012F4
.text:000012F4 loc_12F4:                               ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+53j
.text:000012F4                 mov     eax, [ebp+arg_4]
.text:000012F7                 add     eax, 28h ; '('
.text:000012FA                 push    eax
.text:000012FB                 mov     ecx, [ebp+arg_8]
.text:000012FE                 push    ecx
.text:000012FF                 lea     edx, [ebp+var_20]
.text:00001302                 push    edx
.text:00001303                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00001308                 mov     [ebp+var_4], 0
.text:0000130F                 mov     eax, [ebp+arg_0]
.text:00001312                 add     eax, 2Ch ; ','
.text:00001315                 mov     [ebp+var_28], eax
.text:00001318                 push    0
.text:0000131A                 mov     ecx, [ebp+var_28]
.text:0000131D                 push    ecx
.text:0000131E                 lea     ecx, [ebp+var_20]
.text:00001321                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001326                 push    eax
.text:00001327                 call    ?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z ; NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)
.text:0000132C                 movzx   edx, al
.text:0000132F                 test    edx, edx
.text:00001331                 jz      short loc_1393
.text:00001333                 lea     ecx, [ebp+var_4C] ; this
.text:00001336                 call    ??0CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::CReparseAttr(void)
.text:0000133B                 mov     byte ptr [ebp+var_4], 1
.text:0000133F                 mov     ecx, [ebp+var_28]
.text:00001342                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00001347                 push    eax             ; unsigned int
.text:00001348                 mov     ecx, [ebp+var_28]
.text:0000134B                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00001350                 push    eax             ; unsigned __int8 *
.text:00001351                 lea     ecx, [ebp+var_4C] ; this
.text:00001354                 call    ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)
.text:00001359                 movzx   eax, al
.text:0000135C                 test    eax, eax
.text:0000135E                 jz      short loc_1387
.text:00001360                 mov     [ebp+var_58], 0
.text:00001367                 mov     byte ptr [ebp+var_4], 0
.text:0000136B                 lea     ecx, [ebp+var_4C] ; this
.text:0000136E                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00001373                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000137A                 lea     ecx, [ebp+var_20] ; this
.text:0000137D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001382                 mov     eax, [ebp+var_58]
.text:00001385                 jmp     short loc_13D2
.text:00001387 ; ---------------------------------------------------------------------------
.text:00001387
.text:00001387 loc_1387:                               ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+C6j
.text:00001387                 mov     byte ptr [ebp+var_4], 0
.text:0000138B                 lea     ecx, [ebp+var_4C] ; this
.text:0000138E                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00001393
.text:00001393 loc_1393:                               ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+99j
.text:00001393                 mov     esi, esp
.text:00001395                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000139B                 cmp     esi, esp
.text:0000139D                 call    __RTC_CheckEsp
.text:000013A2                 mov     [ebp+var_54], eax
.text:000013A5                 mov     ecx, [ebp+var_28]
.text:000013A8                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:000013AD                 mov     ecx, [ebp+var_54]
.text:000013B0                 push    ecx             ; unsigned __int32
.text:000013B1                 lea     edx, [ebp+var_20]
.text:000013B4                 push    edx             ; struct UString *
.text:000013B5                 mov     ecx, [ebp+var_10] ; this
.text:000013B8                 call    ?AddError@CDirItems@@QAEJABVUString@@K@Z ; CDirItems::AddError(UString const &,ulong)
.text:000013BD                 mov     [ebp+var_5C], eax
.text:000013C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000013C7                 lea     ecx, [ebp+var_20] ; this
.text:000013CA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000013CF                 mov     eax, [ebp+var_5C]
.text:000013D2
.text:000013D2 loc_13D2:                               ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+57j
.text:000013D2                                         ; CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+EDj
.text:000013D2                 push    edx
.text:000013D3                 mov     ecx, ebp
.text:000013D5                 push    eax
.text:000013D6                 lea     edx, $LN13
.text:000013DC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000013E1                 pop     eax
.text:000013E2                 pop     edx
.text:000013E3                 mov     ecx, [ebp+var_C]
.text:000013E6                 mov     large fs:0, ecx
.text:000013ED                 pop     ecx
.text:000013EE                 pop     edi
.text:000013EF                 pop     esi
.text:000013F0                 add     esp, 5Ch
.text:000013F3                 cmp     ebp, esp
.text:000013F5                 call    __RTC_CheckEsp
.text:000013FA                 mov     esp, ebp
.text:000013FC                 pop     ebp
.text:000013FD                 retn    0Ch
.text:000013FD ?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z endp
.text:000013FD
.text:000013FD ; ---------------------------------------------------------------------------
.text:00001400 $LN13           dd 2                    ; DATA XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+13Eo
.text:00001404                 dd offset $LN12_0
.text:00001408 $LN12_0         dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00001404o
.text:00001410                 dd offset $LN9          ; "path"
.text:00001414                 dd 0FFFFFFB4h, 20h
.text:0000141C                 dd offset $LN10_0       ; "attr"
.text:00001420 $LN10_0         db 'attr',0             ; DATA XREF: .text:0000141Co
.text:00001425 $LN9            db 'path',0             ; DATA XREF: .text:00001410o
.text:0000142A                 db 0Eh dup(0CCh)
.text:00001438
.text:00001438 ; =============== S U B R O U T I N E =======================================
.text:00001438
.text:00001438 ; Attributes: bp-based frame
.text:00001438
.text:00001438 ; long __stdcall EnumerateItems(class NWildcard::CCensor const &, enum  NWildcard::ECensorPathMode, class UString const &, class CDirItems &)
.text:00001438                 public ?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z
.text:00001438 ?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z proc near
.text:00001438
.text:00001438 var_38          = dword ptr -38h
.text:00001438 var_34          = dword ptr -34h
.text:00001438 var_30          = dword ptr -30h
.text:00001438 var_2C          = byte ptr -2Ch
.text:00001438 var_20          = dword ptr -20h
.text:00001438 var_1C          = dword ptr -1Ch
.text:00001438 var_18          = dword ptr -18h
.text:00001438 var_14          = dword ptr -14h
.text:00001438 var_10          = dword ptr -10h
.text:00001438 var_C           = dword ptr -0Ch
.text:00001438 var_4           = dword ptr -4
.text:00001438 arg_0           = dword ptr  8
.text:00001438 arg_4           = dword ptr  0Ch
.text:00001438 arg_8           = dword ptr  10h
.text:00001438 arg_C           = dword ptr  14h
.text:00001438
.text:00001438                 push    ebp
.text:00001439                 mov     ebp, esp
.text:0000143B                 push    0FFFFFFFFh
.text:0000143D                 push    offset __ehhandler$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z
.text:00001442                 mov     eax, large fs:0
.text:00001448                 push    eax
.text:00001449                 sub     esp, 2Ch
.text:0000144C                 push    edi
.text:0000144D                 lea     edi, [ebp+var_38]
.text:00001450                 mov     ecx, 0Bh
.text:00001455                 mov     eax, 0CCCCCCCCh
.text:0000145A                 rep stosd
.text:0000145C                 mov     eax, dword ptr ds:___security_cookie
.text:00001461                 xor     eax, ebp
.text:00001463                 push    eax
.text:00001464                 lea     eax, [ebp+var_C]
.text:00001467                 mov     large fs:0, eax
.text:0000146D                 mov     [ebp+var_10], 0
.text:00001474                 jmp     short loc_147F
.text:00001476 ; ---------------------------------------------------------------------------
.text:00001476
.text:00001476 loc_1476:                               ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &):loc_155Ej
.text:00001476                 mov     eax, [ebp+var_10]
.text:00001479                 add     eax, 1
.text:0000147C                 mov     [ebp+var_10], eax
.text:0000147F
.text:0000147F loc_147F:                               ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+3Cj
.text:0000147F                 mov     ecx, [ebp+arg_0]
.text:00001482                 call    ?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size(void)
.text:00001487                 cmp     [ebp+var_10], eax
.text:0000148A                 jnb     loc_1563
.text:00001490                 mov     ecx, [ebp+var_10]
.text:00001493                 push    ecx
.text:00001494                 mov     ecx, [ebp+arg_0]
.text:00001497                 call    ??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[](uint)
.text:0000149C                 mov     [ebp+var_14], eax
.text:0000149F                 mov     ecx, [ebp+var_14] ; this
.text:000014A2                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000014A7                 movzx   edx, al
.text:000014AA                 test    edx, edx
.text:000014AC                 jz      short loc_14B7
.text:000014AE                 mov     [ebp+var_30], 0FFFFFFFFh
.text:000014B5                 jmp     short loc_14CA
.text:000014B7 ; ---------------------------------------------------------------------------
.text:000014B7
.text:000014B7 loc_14B7:                               ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+74j
.text:000014B7                 mov     eax, [ebp+var_14]
.text:000014BA                 push    eax             ; struct UString *
.text:000014BB                 push    0FFFFFFFFh      ; int
.text:000014BD                 push    0FFFFFFFFh      ; int
.text:000014BF                 mov     ecx, [ebp+arg_C] ; this
.text:000014C2                 call    ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z ; CDirItems::AddPrefix(int,int,UString const &)
.text:000014C7                 mov     [ebp+var_30], eax
.text:000014CA
.text:000014CA loc_14CA:                               ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+7Dj
.text:000014CA                 mov     ecx, [ebp+var_30]
.text:000014CD                 mov     [ebp+var_18], ecx
.text:000014D0                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:000014D7                 cmp     [ebp+arg_4], 2
.text:000014DB                 jnz     short loc_14E5
.text:000014DD                 mov     edx, [ebp+var_18]
.text:000014E0                 mov     [ebp+var_1C], edx
.text:000014E3                 jmp     short loc_1507
.text:000014E5 ; ---------------------------------------------------------------------------
.text:000014E5
.text:000014E5 loc_14E5:                               ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+A3j
.text:000014E5                 mov     ecx, [ebp+arg_8] ; this
.text:000014E8                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000014ED                 movzx   eax, al
.text:000014F0                 test    eax, eax
.text:000014F2                 jnz     short loc_1507
.text:000014F4                 mov     ecx, [ebp+arg_8]
.text:000014F7                 push    ecx             ; struct UString *
.text:000014F8                 push    0FFFFFFFFh      ; int
.text:000014FA                 push    0FFFFFFFFh      ; int
.text:000014FC                 mov     ecx, [ebp+arg_C] ; this
.text:000014FF                 call    ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z ; CDirItems::AddPrefix(int,int,UString const &)
.text:00001504                 mov     [ebp+var_1C], eax
.text:00001507
.text:00001507 loc_1507:                               ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+ABj
.text:00001507                                         ; EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+BAj
.text:00001507                 push    0               ; char
.text:00001509                 mov     edx, [ebp+arg_C]
.text:0000150C                 push    edx             ; CDirItems *
.text:0000150D                 lea     ecx, [ebp+var_2C]
.text:00001510                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00001515                 mov     [ebp+var_34], eax
.text:00001518                 mov     eax, [ebp+var_34]
.text:0000151B                 mov     [ebp+var_38], eax
.text:0000151E                 mov     [ebp+var_4], 0
.text:00001525                 mov     ecx, [ebp+var_38]
.text:00001528                 push    ecx             ; int
.text:00001529                 mov     edx, [ebp+var_14]
.text:0000152C                 push    edx             ; UString *
.text:0000152D                 mov     eax, [ebp+var_1C]
.text:00001530                 push    eax             ; int
.text:00001531                 mov     ecx, [ebp+var_18]
.text:00001534                 push    ecx             ; int
.text:00001535                 mov     edx, [ebp+var_14]
.text:00001538                 add     edx, 0Ch
.text:0000153B                 push    edx             ; NWildcard::CCensorNode *
.text:0000153C                 call    ?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)
.text:00001541                 mov     [ebp+var_20], eax
.text:00001544                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000154B                 lea     ecx, [ebp+var_2C]
.text:0000154E                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00001553                 cmp     [ebp+var_20], 0
.text:00001557                 jz      short loc_155E
.text:00001559                 mov     eax, [ebp+var_20]
.text:0000155C                 jmp     short loc_1575
.text:0000155E ; ---------------------------------------------------------------------------
.text:0000155E
.text:0000155E loc_155E:                               ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+11Fj
.text:0000155E                 jmp     loc_1476
.text:00001563 ; ---------------------------------------------------------------------------
.text:00001563
.text:00001563 loc_1563:                               ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+52j
.text:00001563                 mov     ecx, [ebp+arg_C] ; this
.text:00001566                 call    ?ReserveDown@CDirItems@@QAEXXZ ; CDirItems::ReserveDown(void)
.text:0000156B                 mov     ecx, [ebp+arg_C] ; this
.text:0000156E                 call    ?FillFixedReparse@CDirItems@@QAEXXZ ; CDirItems::FillFixedReparse(void)
.text:00001573                 xor     eax, eax
.text:00001575
.text:00001575 loc_1575:                               ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+124j
.text:00001575                 mov     ecx, [ebp+var_C]
.text:00001578                 mov     large fs:0, ecx
.text:0000157F                 pop     ecx
.text:00001580                 pop     edi
.text:00001581                 add     esp, 38h
.text:00001584                 cmp     ebp, esp
.text:00001586                 call    __RTC_CheckEsp
.text:0000158B                 mov     esp, ebp
.text:0000158D                 pop     ebp
.text:0000158E                 retn    10h
.text:0000158E ?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z endp
.text:0000158E
.text:0000158E ; ---------------------------------------------------------------------------
.text:00001591                 align 8
.text:00001598
.text:00001598 ; =============== S U B R O U T I N E =======================================
.text:00001598
.text:00001598 ; Attributes: bp-based frame
.text:00001598
.text:00001598 ; int __stdcall EnumerateDirItems(NWildcard::CCensorNode *, int, int, UString *, int, CDirItems *, char)
.text:00001598 ?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z proc near
.text:00001598                                         ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+104p
.text:00001598                                         ; EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+ABp
.text:00001598
.text:00001598 var_2B8         = dword ptr -2B8h
.text:00001598 var_2B4         = dword ptr -2B4h
.text:00001598 var_2B0         = dword ptr -2B0h
.text:00001598 var_2AC         = dword ptr -2ACh
.text:00001598 var_2A8         = dword ptr -2A8h
.text:00001598 var_2A4         = dword ptr -2A4h
.text:00001598 var_2A0         = dword ptr -2A0h
.text:00001598 var_29C         = dword ptr -29Ch
.text:00001598 var_298         = byte ptr -298h
.text:00001598 var_28C         = dword ptr -28Ch
.text:00001598 var_288         = dword ptr -288h
.text:00001598 var_284         = dword ptr -284h
.text:00001598 var_280         = dword ptr -280h
.text:00001598 var_27C         = dword ptr -27Ch
.text:00001598 var_278         = byte ptr -278h
.text:00001598 var_26C         = dword ptr -26Ch
.text:00001598 var_268         = dword ptr -268h
.text:00001598 var_264         = dword ptr -264h
.text:00001598 var_260         = dword ptr -260h
.text:00001598 var_25C         = dword ptr -25Ch
.text:00001598 var_258         = dword ptr -258h
.text:00001598 var_254         = dword ptr -254h
.text:00001598 var_250         = dword ptr -250h
.text:00001598 var_24C         = dword ptr -24Ch
.text:00001598 var_248         = dword ptr -248h
.text:00001598 var_244         = dword ptr -244h
.text:00001598 var_239         = byte ptr -239h
.text:00001598 var_230         = byte ptr -230h
.text:00001598 var_1F4         = dword ptr -1F4h
.text:00001598 var_1EC         = byte ptr -1ECh
.text:00001598 var_1D8         = dword ptr -1D8h
.text:00001598 var_1D0         = byte ptr -1D0h
.text:00001598 var_1A8         = byte ptr -1A8h
.text:00001598 var_190         = byte ptr -190h
.text:00001598 var_17C         = byte ptr -17Ch
.text:00001598 var_16C         = dword ptr -16Ch
.text:00001598 var_168         = dword ptr -168h
.text:00001598 var_164         = dword ptr -164h
.text:00001598 var_160         = dword ptr -160h
.text:00001598 var_15C         = dword ptr -15Ch
.text:00001598 var_158         = dword ptr -158h
.text:00001598 var_150         = byte ptr -150h
.text:00001598 var_128         = dword ptr -128h
.text:00001598 var_110         = byte ptr -110h
.text:00001598 var_100         = dword ptr -100h
.text:00001598 var_FC          = dword ptr -0FCh
.text:00001598 var_F8          = dword ptr -0F8h
.text:00001598 var_F4          = dword ptr -0F4h
.text:00001598 var_F0          = dword ptr -0F0h
.text:00001598 var_E8          = dword ptr -0E8h
.text:00001598 var_D8          = dword ptr -0D8h
.text:00001598 var_D0          = dword ptr -0D0h
.text:00001598 var_C0          = dword ptr -0C0h
.text:00001598 var_BC          = dword ptr -0BCh
.text:00001598 var_B8          = dword ptr -0B8h
.text:00001598 var_B0          = dword ptr -0B0h
.text:00001598 var_A4          = byte ptr -0A4h
.text:00001598 var_94          = dword ptr -94h
.text:00001598 var_8D          = byte ptr -8Dh
.text:00001598 var_8C          = dword ptr -8Ch
.text:00001598 var_84          = dword ptr -84h
.text:00001598 var_80          = dword ptr -80h
.text:00001598 var_60          = byte ptr -60h
.text:00001598 var_5C          = dword ptr -5Ch
.text:00001598 var_46          = byte ptr -46h
.text:00001598 var_45          = byte ptr -45h
.text:00001598 var_40          = byte ptr -40h
.text:00001598 var_30          = dword ptr -30h
.text:00001598 var_2C          = dword ptr -2Ch
.text:00001598 var_28          = dword ptr -28h
.text:00001598 var_20          = byte ptr -20h
.text:00001598 var_10          = dword ptr -10h
.text:00001598 var_C           = dword ptr -0Ch
.text:00001598 var_4           = dword ptr -4
.text:00001598 arg_0           = dword ptr  8
.text:00001598 arg_4           = dword ptr  0Ch
.text:00001598 arg_8           = dword ptr  10h
.text:00001598 arg_C           = dword ptr  14h
.text:00001598 arg_10          = dword ptr  18h
.text:00001598 arg_14          = dword ptr  1Ch
.text:00001598 arg_18          = byte ptr  20h
.text:00001598
.text:00001598                 push    ebp
.text:00001599                 mov     ebp, esp
.text:0000159B                 push    0FFFFFFFFh
.text:0000159D                 push    offset __ehhandler$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z
.text:000015A2                 mov     eax, large fs:0
.text:000015A8                 push    eax
.text:000015A9                 sub     esp, 2ACh
.text:000015AF                 push    edi
.text:000015B0                 lea     edi, [ebp+var_2B8]
.text:000015B6                 mov     ecx, 0ABh ; '½'
.text:000015BB                 mov     eax, 0CCCCCCCCh
.text:000015C0                 rep stosd
.text:000015C2                 mov     eax, dword ptr ds:___security_cookie
.text:000015C7                 xor     eax, ebp
.text:000015C9                 push    eax
.text:000015CA                 lea     eax, [ebp+var_C]
.text:000015CD                 mov     large fs:0, eax
.text:000015D3                 movzx   eax, [ebp+arg_18]
.text:000015D7                 test    eax, eax
.text:000015D9                 jnz     short loc_15EE
.text:000015DB                 mov     ecx, [ebp+arg_0] ; this
.text:000015DE                 call    ?NeedCheckSubDirs@CCensorNode@NWildcard@@QBE_NXZ ; NWildcard::CCensorNode::NeedCheckSubDirs(void)
.text:000015E3                 movzx   ecx, al
.text:000015E6                 test    ecx, ecx
.text:000015E8                 jz      short loc_15EE
.text:000015EA                 mov     [ebp+arg_18], 1
.text:000015EE
.text:000015EE loc_15EE:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+41j
.text:000015EE                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+50j
.text:000015EE                 mov     edx, [ebp+arg_C]
.text:000015F1                 push    edx             ; struct UString *
.text:000015F2                 mov     ecx, [ebp+arg_14] ; this
.text:000015F5                 call    ?ScanProgress@CDirItems@@QAEJABVUString@@@Z ; CDirItems::ScanProgress(UString const &)
.text:000015FA                 mov     [ebp+var_10], eax
.text:000015FD                 cmp     [ebp+var_10], 0
.text:00001601                 jz      short loc_160B
.text:00001603                 mov     eax, [ebp+var_10]
.text:00001606                 jmp     loc_2610
.text:0000160B ; ---------------------------------------------------------------------------
.text:0000160B
.text:0000160B loc_160B:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+69j
.text:0000160B                 mov     ecx, [ebp+arg_10]
.text:0000160E                 call    ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty(void)
.text:00001613                 movzx   eax, al
.text:00001616                 test    eax, eax
.text:00001618                 jz      loc_20C8
.text:0000161E                 movzx   ecx, [ebp+arg_18]
.text:00001622                 test    ecx, ecx
.text:00001624                 jnz     loc_20C8
.text:0000162A                 mov     edx, [ebp+arg_0]
.text:0000162D                 push    edx
.text:0000162E                 call    ?CanUseFsDirect@@YG_NABVCCensorNode@NWildcard@@@Z ; CanUseFsDirect(NWildcard::CCensorNode const &)
.text:00001633                 movzx   eax, al
.text:00001636                 test    eax, eax
.text:00001638                 jz      loc_20C8
.text:0000163E                 lea     ecx, [ebp+var_20]
.text:00001641                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00001646                 mov     [ebp+var_4], 0
.text:0000164D                 mov     [ebp+var_28], 0
.text:00001654                 jmp     short loc_165F
.text:00001656 ; ---------------------------------------------------------------------------
.text:00001656
.text:00001656 loc_1656:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+23Aj
.text:00001656                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+300j ...
.text:00001656                 mov     ecx, [ebp+var_28]
.text:00001659                 add     ecx, 1
.text:0000165C                 mov     [ebp+var_28], ecx
.text:0000165F
.text:0000165F loc_165F:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+BCj
.text:0000165F                 mov     ecx, [ebp+arg_0]
.text:00001662                 add     ecx, 1Ch
.text:00001665                 call    ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size(void)
.text:0000166A                 cmp     [ebp+var_28], eax
.text:0000166D                 jnb     loc_1D10
.text:00001673                 mov     edx, [ebp+var_28]
.text:00001676                 push    edx
.text:00001677                 mov     ecx, [ebp+arg_0]
.text:0000167A                 add     ecx, 1Ch
.text:0000167D                 call    ??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[](uint)
.text:00001682                 mov     [ebp+var_2C], eax
.text:00001685                 mov     ecx, [ebp+var_2C]
.text:00001688                 call    ?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front(void)
.text:0000168D                 mov     [ebp+var_30], eax
.text:00001690                 mov     eax, [ebp+var_30]
.text:00001693                 push    eax
.text:00001694                 mov     ecx, [ebp+arg_C]
.text:00001697                 push    ecx
.text:00001698                 lea     edx, [ebp+var_40]
.text:0000169B                 push    edx
.text:0000169C                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:000016A1                 mov     byte ptr [ebp+var_4], 1
.text:000016A5                 mov     [ebp+var_45], 1
.text:000016A9                 mov     [ebp+var_46], 1
.text:000016AD                 mov     ecx, [ebp+arg_C] ; this
.text:000016B0                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000016B5                 movzx   eax, al
.text:000016B8                 test    eax, eax
.text:000016BA                 jz      short loc_1701
.text:000016BC                 mov     ecx, [ebp+var_2C]
.text:000016BF                 movzx   edx, byte ptr [ecx+0Dh]
.text:000016C3                 test    edx, edx
.text:000016C5                 jnz     short loc_1701
.text:000016C7                 mov     ecx, [ebp+var_30] ; this
.text:000016CA                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000016CF                 movzx   eax, al
.text:000016D2                 test    eax, eax
.text:000016D4                 jz      short loc_16E6
.text:000016D6                 mov     [ebp+var_45], 0
.text:000016DA                 push    5Ch ; '\'
.text:000016DC                 lea     ecx, [ebp+var_40]
.text:000016DF                 call    ??4UString@@QAEAAV0@_W@Z ; UString::operator=(wchar_t)
.text:000016E4                 jmp     short loc_1701
.text:000016E6 ; ---------------------------------------------------------------------------
.text:000016E6
.text:000016E6 loc_16E6:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+13Cj
.text:000016E6                 mov     ecx, [ebp+var_2C] ; this
.text:000016E9                 call    ?IsDriveItem@CItem@NWildcard@@QBE_NXZ ; NWildcard::CItem::IsDriveItem(void)
.text:000016EE                 movzx   ecx, al
.text:000016F1                 test    ecx, ecx
.text:000016F3                 jz      short loc_1701
.text:000016F5                 mov     [ebp+var_45], 0
.text:000016F9                 lea     ecx, [ebp+var_40] ; this
.text:000016FC                 call    ?Add_PathSepar@UString@@QAEXXZ ; UString::Add_PathSepar(void)
.text:00001701
.text:00001701 loc_1701:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+122j
.text:00001701                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+12Dj ...
.text:00001701                 lea     ecx, [ebp+var_84] ; this
.text:00001707                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:0000170C                 mov     byte ptr [ebp+var_4], 2
.text:00001710                 mov     edx, [ebp+var_30]
.text:00001713                 push    edx
.text:00001714                 mov     eax, [ebp+arg_C]
.text:00001717                 push    eax
.text:00001718                 call    ?IsVirtualFsFolder@@YG_NABVUString@@0@Z ; IsVirtualFsFolder(UString const &,UString const &)
.text:0000171D                 movzx   ecx, al
.text:00001720                 test    ecx, ecx
.text:00001722                 jz      short loc_1740
.text:00001724                 lea     ecx, [ebp+var_84] ; this
.text:0000172A                 call    ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::SetAsDir(void)
.text:0000172F                 mov     edx, [ebp+var_30]
.text:00001732                 push    edx
.text:00001733                 lea     ecx, [ebp+var_5C]
.text:00001736                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000173B                 jmp     loc_17D7
.text:00001740 ; ---------------------------------------------------------------------------
.text:00001740
.text:00001740 loc_1740:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+18Aj
.text:00001740                 lea     ecx, [ebp+var_40]
.text:00001743                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001748                 push    eax             ; wchar_t *
.text:00001749                 lea     ecx, [ebp+var_84] ; this
.text:0000174F                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:00001754                 movzx   eax, al
.text:00001757                 test    eax, eax
.text:00001759                 jnz     short loc_17D7
.text:0000175B                 lea     ecx, [ebp+var_40]
.text:0000175E                 push    ecx             ; struct UString *
.text:0000175F                 mov     ecx, [ebp+arg_14] ; this
.text:00001762                 call    ?AddError@CDirItems@@QAEJABVUString@@@Z ; CDirItems::AddError(UString const &)
.text:00001767                 mov     [ebp+var_8C], eax
.text:0000176D                 cmp     [ebp+var_8C], 0
.text:00001774                 jz      short loc_17B7
.text:00001776                 mov     edx, [ebp+var_8C]
.text:0000177C                 mov     [ebp+var_250], edx
.text:00001782                 mov     byte ptr [ebp+var_4], 1
.text:00001786                 lea     ecx, [ebp+var_84] ; this
.text:0000178C                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001791                 mov     byte ptr [ebp+var_4], 0
.text:00001795                 lea     ecx, [ebp+var_40] ; this
.text:00001798                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000179D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000017A4                 lea     ecx, [ebp+var_20]
.text:000017A7                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000017AC                 mov     eax, [ebp+var_250]
.text:000017B2                 jmp     loc_2610
.text:000017B7 ; ---------------------------------------------------------------------------
.text:000017B7
.text:000017B7 loc_17B7:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+1DCj
.text:000017B7                 mov     byte ptr [ebp+var_4], 1
.text:000017BB                 lea     ecx, [ebp+var_84] ; this
.text:000017C1                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000017C6                 mov     byte ptr [ebp+var_4], 0
.text:000017CA                 lea     ecx, [ebp+var_40] ; this
.text:000017CD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000017D2                 jmp     loc_1656
.text:000017D7 ; ---------------------------------------------------------------------------
.text:000017D7
.text:000017D7 loc_17D7:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+1A3j
.text:000017D7                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+1C1j
.text:000017D7                 lea     ecx, [ebp+var_84] ; this
.text:000017DD                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:000017E2                 mov     [ebp+var_8D], al
.text:000017E8                 movzx   eax, [ebp+var_8D]
.text:000017EF                 test    eax, eax
.text:000017F1                 jz      short loc_17FE
.text:000017F3                 mov     ecx, [ebp+var_2C]
.text:000017F6                 movzx   edx, byte ptr [ecx+0Eh]
.text:000017FA                 test    edx, edx
.text:000017FC                 jz      short loc_181C
.text:000017FE
.text:000017FE loc_17FE:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+259j
.text:000017FE                 movzx   eax, [ebp+var_8D]
.text:00001805                 test    eax, eax
.text:00001807                 jnz     loc_189D
.text:0000180D                 mov     ecx, [ebp+var_2C]
.text:00001810                 movzx   edx, byte ptr [ecx+0Dh]
.text:00001814                 test    edx, edx
.text:00001816                 jnz     loc_189D
.text:0000181C
.text:0000181C loc_181C:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+264j
.text:0000181C                 push    80004005h       ; unsigned __int32
.text:00001821                 lea     eax, [ebp+var_40]
.text:00001824                 push    eax             ; struct UString *
.text:00001825                 mov     ecx, [ebp+arg_14] ; this
.text:00001828                 call    ?AddError@CDirItems@@QAEJABVUString@@K@Z ; CDirItems::AddError(UString const &,ulong)
.text:0000182D                 mov     [ebp+var_94], eax
.text:00001833                 cmp     [ebp+var_94], 0
.text:0000183A                 jz      short loc_187D
.text:0000183C                 mov     ecx, [ebp+var_94]
.text:00001842                 mov     [ebp+var_254], ecx
.text:00001848                 mov     byte ptr [ebp+var_4], 1
.text:0000184C                 lea     ecx, [ebp+var_84] ; this
.text:00001852                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001857                 mov     byte ptr [ebp+var_4], 0
.text:0000185B                 lea     ecx, [ebp+var_40] ; this
.text:0000185E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001863                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000186A                 lea     ecx, [ebp+var_20]
.text:0000186D                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001872                 mov     eax, [ebp+var_254]
.text:00001878                 jmp     loc_2610
.text:0000187D ; ---------------------------------------------------------------------------
.text:0000187D
.text:0000187D loc_187D:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+2A2j
.text:0000187D                 mov     byte ptr [ebp+var_4], 1
.text:00001881                 lea     ecx, [ebp+var_84] ; this
.text:00001887                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:0000188C                 mov     byte ptr [ebp+var_4], 0
.text:00001890                 lea     ecx, [ebp+var_40] ; this
.text:00001893                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001898                 jmp     loc_1656
.text:0000189D ; ---------------------------------------------------------------------------
.text:0000189D
.text:0000189D loc_189D:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+26Fj
.text:0000189D                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+27Ej
.text:0000189D                 lea     ecx, [ebp+var_A4]
.text:000018A3                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:000018A8                 mov     byte ptr [ebp+var_4], 3
.text:000018AC                 lea     edx, [ebp+var_5C]
.text:000018AF                 push    edx
.text:000018B0                 lea     ecx, [ebp+var_A4]
.text:000018B6                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:000018BB                 movzx   eax, [ebp+var_8D]
.text:000018C2                 test    eax, eax
.text:000018C4                 setz    cl
.text:000018C7                 movzx   edx, cl
.text:000018CA                 push    edx
.text:000018CB                 lea     eax, [ebp+var_A4]
.text:000018D1                 push    eax
.text:000018D2                 push    0
.text:000018D4                 mov     ecx, [ebp+arg_0]
.text:000018D7                 call    ?CheckPathToRoot@CCensorNode@NWildcard@@QBE_N_NAAV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathToRoot(bool,CObjectVector<UString> &,bool)
.text:000018DC                 movzx   ecx, al
.text:000018DF                 test    ecx, ecx
.text:000018E1                 jz      short loc_1912
.text:000018E3                 mov     byte ptr [ebp+var_4], 2
.text:000018E7                 lea     ecx, [ebp+var_A4]
.text:000018ED                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000018F2                 mov     byte ptr [ebp+var_4], 1
.text:000018F6                 lea     ecx, [ebp+var_84] ; this
.text:000018FC                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001901                 mov     byte ptr [ebp+var_4], 0
.text:00001905                 lea     ecx, [ebp+var_40] ; this
.text:00001908                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000190D                 jmp     loc_1656
.text:00001912 ; ---------------------------------------------------------------------------
.text:00001912
.text:00001912 loc_1912:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+349j
.text:00001912                 mov     byte ptr [ebp+var_4], 2
.text:00001916                 lea     ecx, [ebp+var_A4]
.text:0000191C                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00001921                 mov     [ebp+var_B0], 0FFFFFFFFh
.text:0000192B                 movzx   edx, [ebp+var_46]
.text:0000192F                 test    edx, edx
.text:00001931                 jz      short loc_19A4
.text:00001933                 mov     eax, [ebp+arg_14]
.text:00001936                 movzx   ecx, byte ptr [eax+95h]
.text:0000193D                 test    ecx, ecx
.text:0000193F                 jz      short loc_19A4
.text:00001941                 lea     edx, [ebp+var_B0]
.text:00001947                 push    edx             ; int *
.text:00001948                 lea     eax, [ebp+var_40]
.text:0000194B                 push    eax             ; struct UString *
.text:0000194C                 mov     ecx, [ebp+arg_14] ; this
.text:0000194F                 call    ?AddSecurityItem@CDirItems@@QAEJABVUString@@AAH@Z ; CDirItems::AddSecurityItem(UString const &,int &)
.text:00001954                 mov     [ebp+var_B8], eax
.text:0000195A                 cmp     [ebp+var_B8], 0
.text:00001961                 jz      short loc_19A4
.text:00001963                 mov     ecx, [ebp+var_B8]
.text:00001969                 mov     [ebp+var_258], ecx
.text:0000196F                 mov     byte ptr [ebp+var_4], 1
.text:00001973                 lea     ecx, [ebp+var_84] ; this
.text:00001979                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:0000197E                 mov     byte ptr [ebp+var_4], 0
.text:00001982                 lea     ecx, [ebp+var_40] ; this
.text:00001985                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000198A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001991                 lea     ecx, [ebp+var_20]
.text:00001994                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001999                 mov     eax, [ebp+var_258]
.text:0000199F                 jmp     loc_2610
.text:000019A4 ; ---------------------------------------------------------------------------
.text:000019A4
.text:000019A4 loc_19A4:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+399j
.text:000019A4                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+3A7j ...
.text:000019A4                 lea     edx, [ebp+var_84]
.text:000019AA                 push    edx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:000019AB                 mov     eax, [ebp+var_B0]
.text:000019B1                 push    eax             ; int
.text:000019B2                 mov     ecx, [ebp+arg_8]
.text:000019B5                 push    ecx             ; int
.text:000019B6                 mov     edx, [ebp+arg_4]
.text:000019B9                 push    edx             ; int
.text:000019BA                 mov     ecx, [ebp+arg_14] ; this
.text:000019BD                 call    ?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z ; CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)
.text:000019C2                 mov     ecx, [ebp+arg_14]
.text:000019C5                 add     ecx, 24h ; '$'
.text:000019C8                 call    ?Back@?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@XZ ; CObjectVector<CDirItem>::Back(void)
.text:000019CD                 mov     [ebp+var_BC], eax
.text:000019D3                 mov     eax, [ebp+arg_C]
.text:000019D6                 push    eax             ; struct UString *
.text:000019D7                 lea     ecx, [ebp+var_84]
.text:000019DD                 push    ecx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:000019DE                 mov     edx, [ebp+var_BC]
.text:000019E4                 push    edx             ; struct CDirItem *
.text:000019E5                 mov     ecx, [ebp+arg_14] ; this
.text:000019E8                 call    ?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z ; CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)
.text:000019ED                 mov     [ebp+var_C0], eax
.text:000019F3                 cmp     [ebp+var_C0], 0
.text:000019FA                 jz      short loc_1A3D
.text:000019FC                 mov     eax, [ebp+var_C0]
.text:00001A02                 mov     [ebp+var_25C], eax
.text:00001A08                 mov     byte ptr [ebp+var_4], 1
.text:00001A0C                 lea     ecx, [ebp+var_84] ; this
.text:00001A12                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001A17                 mov     byte ptr [ebp+var_4], 0
.text:00001A1B                 lea     ecx, [ebp+var_40] ; this
.text:00001A1E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001A23                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A2A                 lea     ecx, [ebp+var_20]
.text:00001A2D                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001A32                 mov     eax, [ebp+var_25C]
.text:00001A38                 jmp     loc_2610
.text:00001A3D ; ---------------------------------------------------------------------------
.text:00001A3D
.text:00001A3D loc_1A3D:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+462j
.text:00001A3D                 mov     ecx, [ebp+var_BC]
.text:00001A43                 add     ecx, 2Ch ; ','
.text:00001A46                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00001A4B                 test    eax, eax
.text:00001A4D                 jz      short loc_1AAF
.text:00001A4F                 movzx   ecx, [ebp+var_60]
.text:00001A53                 test    ecx, ecx
.text:00001A55                 jz      short loc_1A74
.text:00001A57                 mov     edx, [ebp+arg_14]
.text:00001A5A                 mov     eax, [edx+58h]
.text:00001A5D                 sub     eax, [ebp+var_84]
.text:00001A63                 mov     ecx, [edx+5Ch]
.text:00001A66                 sbb     ecx, [ebp+var_80]
.text:00001A69                 mov     edx, [ebp+arg_14]
.text:00001A6C                 mov     [edx+58h], eax
.text:00001A6F                 mov     [edx+5Ch], ecx
.text:00001A72                 jmp     short loc_1A8F
.text:00001A74 ; ---------------------------------------------------------------------------
.text:00001A74
.text:00001A74 loc_1A74:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+4BDj
.text:00001A74                 mov     eax, [ebp+arg_14]
.text:00001A77                 mov     ecx, [eax+50h]
.text:00001A7A                 sub     ecx, [ebp+var_84]
.text:00001A80                 mov     edx, [eax+54h]
.text:00001A83                 sbb     edx, [ebp+var_80]
.text:00001A86                 mov     eax, [ebp+arg_14]
.text:00001A89                 mov     [eax+50h], ecx
.text:00001A8C                 mov     [eax+54h], edx
.text:00001A8F
.text:00001A8F loc_1A8F:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+4DAj
.text:00001A8F                 mov     byte ptr [ebp+var_4], 1
.text:00001A93                 lea     ecx, [ebp+var_84] ; this
.text:00001A99                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001A9E                 mov     byte ptr [ebp+var_4], 0
.text:00001AA2                 lea     ecx, [ebp+var_40] ; this
.text:00001AA5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001AAA                 jmp     loc_1656
.text:00001AAF ; ---------------------------------------------------------------------------
.text:00001AAF
.text:00001AAF loc_1AAF:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+4B5j
.text:00001AAF                 movzx   ecx, [ebp+var_45]
.text:00001AB3                 test    ecx, ecx
.text:00001AB5                 jz      loc_1B7D
.text:00001ABB                 mov     edx, [ebp+arg_14]
.text:00001ABE                 movzx   eax, byte ptr [edx+31h]
.text:00001AC2                 test    eax, eax
.text:00001AC4                 jz      loc_1B7D
.text:00001ACA                 lea     ecx, [ebp+var_D0]
.text:00001AD0                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00001AD5                 mov     byte ptr [ebp+var_4], 4
.text:00001AD9                 lea     ecx, [ebp+var_5C]
.text:00001ADC                 push    ecx
.text:00001ADD                 lea     ecx, [ebp+var_D0]
.text:00001AE3                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00001AE8                 mov     edx, [ebp+arg_14]
.text:00001AEB                 push    edx             ; CDirItems *
.text:00001AEC                 lea     eax, [ebp+var_D0]
.text:00001AF2                 push    eax             ; int
.text:00001AF3                 lea     ecx, [ebp+var_40]
.text:00001AF6                 push    ecx             ; struct UString *
.text:00001AF7                 mov     edx, [ebp+arg_8]
.text:00001AFA                 push    edx             ; int
.text:00001AFB                 mov     eax, [ebp+arg_4]
.text:00001AFE                 push    eax             ; int
.text:00001AFF                 mov     ecx, [ebp+arg_0]
.text:00001B02                 push    ecx             ; int
.text:00001B03                 lea     edx, [ebp+var_84]
.text:00001B09                 push    edx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00001B0A                 call    ?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z ; EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)
.text:00001B0F                 mov     [ebp+var_D8], eax
.text:00001B15                 cmp     [ebp+var_D8], 0
.text:00001B1C                 jz      short loc_1B6E
.text:00001B1E                 mov     eax, [ebp+var_D8]
.text:00001B24                 mov     [ebp+var_260], eax
.text:00001B2A                 mov     byte ptr [ebp+var_4], 2
.text:00001B2E                 lea     ecx, [ebp+var_D0]
.text:00001B34                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00001B39                 mov     byte ptr [ebp+var_4], 1
.text:00001B3D                 lea     ecx, [ebp+var_84] ; this
.text:00001B43                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001B48                 mov     byte ptr [ebp+var_4], 0
.text:00001B4C                 lea     ecx, [ebp+var_40] ; this
.text:00001B4F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001B54                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001B5B                 lea     ecx, [ebp+var_20]
.text:00001B5E                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001B63                 mov     eax, [ebp+var_260]
.text:00001B69                 jmp     loc_2610
.text:00001B6E ; ---------------------------------------------------------------------------
.text:00001B6E
.text:00001B6E loc_1B6E:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+584j
.text:00001B6E                 mov     byte ptr [ebp+var_4], 2
.text:00001B72                 lea     ecx, [ebp+var_D0]
.text:00001B78                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00001B7D
.text:00001B7D loc_1B7D:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+51Dj
.text:00001B7D                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+52Cj
.text:00001B7D                 movzx   ecx, [ebp+var_8D]
.text:00001B84                 test    ecx, ecx
.text:00001B86                 jnz     short loc_1BA8
.text:00001B88                 mov     byte ptr [ebp+var_4], 1
.text:00001B8C                 lea     ecx, [ebp+var_84] ; this
.text:00001B92                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001B97                 mov     byte ptr [ebp+var_4], 0
.text:00001B9B                 lea     ecx, [ebp+var_40] ; this
.text:00001B9E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001BA3                 jmp     loc_1656
.text:00001BA8 ; ---------------------------------------------------------------------------
.text:00001BA8
.text:00001BA8 loc_1BA8:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+5EEj
.text:00001BA8                 lea     ecx, [ebp+var_E8]
.text:00001BAE                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00001BB3                 mov     byte ptr [ebp+var_4], 5
.text:00001BB7                 mov     [ebp+var_F0], 0
.text:00001BC1                 mov     edx, [ebp+var_30]
.text:00001BC4                 push    edx             ; struct UString *
.text:00001BC5                 mov     ecx, [ebp+arg_0] ; this
.text:00001BC8                 call    ?FindSubNode@CCensorNode@NWildcard@@QBEHABVUString@@@Z ; NWildcard::CCensorNode::FindSubNode(UString const &)
.text:00001BCD                 mov     [ebp+var_F4], eax
.text:00001BD3                 cmp     [ebp+var_F4], 0
.text:00001BDA                 jl      short loc_1C41
.text:00001BDC                 lea     ecx, [ebp+var_20]
.text:00001BDF                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00001BE4                 mov     [ebp+var_F8], eax
.text:00001BEA                 jmp     short loc_1BFB
.text:00001BEC ; ---------------------------------------------------------------------------
.text:00001BEC
.text:00001BEC loc_1BEC:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+67Bj
.text:00001BEC                 mov     eax, [ebp+var_F8]
.text:00001BF2                 add     eax, 1
.text:00001BF5                 mov     [ebp+var_F8], eax
.text:00001BFB
.text:00001BFB loc_1BFB:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+652j
.text:00001BFB                 mov     ecx, [ebp+var_F8]
.text:00001C01                 cmp     ecx, [ebp+var_F4]
.text:00001C07                 jg      short loc_1C15
.text:00001C09                 push    1
.text:00001C0B                 lea     ecx, [ebp+var_20]
.text:00001C0E                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00001C13                 jmp     short loc_1BEC
.text:00001C15 ; ---------------------------------------------------------------------------
.text:00001C15
.text:00001C15 loc_1C15:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+66Fj
.text:00001C15                 mov     edx, [ebp+var_F4]
.text:00001C1B                 push    edx
.text:00001C1C                 lea     ecx, [ebp+var_20]
.text:00001C1F                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001C24                 mov     byte ptr [eax], 0
.text:00001C27                 mov     eax, [ebp+var_F4]
.text:00001C2D                 push    eax
.text:00001C2E                 mov     ecx, [ebp+arg_0]
.text:00001C31                 add     ecx, 10h
.text:00001C34                 call    ??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[](uint)
.text:00001C39                 mov     [ebp+var_F0], eax
.text:00001C3F                 jmp     short loc_1C59
.text:00001C41 ; ---------------------------------------------------------------------------
.text:00001C41
.text:00001C41 loc_1C41:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+642j
.text:00001C41                 mov     ecx, [ebp+arg_0]
.text:00001C44                 mov     [ebp+var_F0], ecx
.text:00001C4A                 mov     edx, [ebp+var_30]
.text:00001C4D                 push    edx
.text:00001C4E                 lea     ecx, [ebp+var_E8]
.text:00001C54                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00001C59
.text:00001C59 loc_1C59:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+6A7j
.text:00001C59                 push    1               ; char
.text:00001C5B                 mov     eax, [ebp+arg_14]
.text:00001C5E                 push    eax             ; CDirItems *
.text:00001C5F                 lea     ecx, [ebp+var_E8]
.text:00001C65                 push    ecx             ; int
.text:00001C66                 mov     edx, [ebp+arg_C]
.text:00001C69                 push    edx             ; int
.text:00001C6A                 lea     eax, [ebp+var_5C]
.text:00001C6D                 push    eax             ; int
.text:00001C6E                 mov     ecx, [ebp+arg_8]
.text:00001C71                 push    ecx             ; int
.text:00001C72                 mov     edx, [ebp+arg_4]
.text:00001C75                 push    edx             ; int
.text:00001C76                 mov     eax, [ebp+var_F0]
.text:00001C7C                 push    eax             ; NWildcard::CCensorNode *
.text:00001C7D                 call    ?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z ; EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)
.text:00001C82                 mov     [ebp+var_FC], eax
.text:00001C88                 cmp     [ebp+var_FC], 0
.text:00001C8F                 jz      short loc_1CE1
.text:00001C91                 mov     ecx, [ebp+var_FC]
.text:00001C97                 mov     [ebp+var_264], ecx
.text:00001C9D                 mov     byte ptr [ebp+var_4], 2
.text:00001CA1                 lea     ecx, [ebp+var_E8]
.text:00001CA7                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00001CAC                 mov     byte ptr [ebp+var_4], 1
.text:00001CB0                 lea     ecx, [ebp+var_84] ; this
.text:00001CB6                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001CBB                 mov     byte ptr [ebp+var_4], 0
.text:00001CBF                 lea     ecx, [ebp+var_40] ; this
.text:00001CC2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001CC7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001CCE                 lea     ecx, [ebp+var_20]
.text:00001CD1                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001CD6                 mov     eax, [ebp+var_264]
.text:00001CDC                 jmp     loc_2610
.text:00001CE1 ; ---------------------------------------------------------------------------
.text:00001CE1
.text:00001CE1 loc_1CE1:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+6F7j
.text:00001CE1                 mov     byte ptr [ebp+var_4], 2
.text:00001CE5                 lea     ecx, [ebp+var_E8]
.text:00001CEB                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00001CF0                 mov     byte ptr [ebp+var_4], 1
.text:00001CF4                 lea     ecx, [ebp+var_84] ; this
.text:00001CFA                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001CFF                 mov     byte ptr [ebp+var_4], 0
.text:00001D03                 lea     ecx, [ebp+var_40] ; this
.text:00001D06                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001D0B                 jmp     loc_1656
.text:00001D10 ; ---------------------------------------------------------------------------
.text:00001D10
.text:00001D10 loc_1D10:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+D5j
.text:00001D10                 mov     [ebp+var_28], 0
.text:00001D17                 jmp     short loc_1D22
.text:00001D19 ; ---------------------------------------------------------------------------
.text:00001D19
.text:00001D19 loc_1D19:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+7BEj
.text:00001D19                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+910j ...
.text:00001D19                 mov     edx, [ebp+var_28]
.text:00001D1C                 add     edx, 1
.text:00001D1F                 mov     [ebp+var_28], edx
.text:00001D22
.text:00001D22 loc_1D22:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+77Fj
.text:00001D22                 mov     ecx, [ebp+arg_0]
.text:00001D25                 add     ecx, 10h
.text:00001D28                 call    ?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size(void)
.text:00001D2D                 cmp     [ebp+var_28], eax
.text:00001D30                 jnb     loc_20A4
.text:00001D36                 lea     ecx, [ebp+var_20]
.text:00001D39                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00001D3E                 cmp     [ebp+var_28], eax
.text:00001D41                 jnb     short loc_1D58
.text:00001D43                 mov     eax, [ebp+var_28]
.text:00001D46                 push    eax
.text:00001D47                 lea     ecx, [ebp+var_20]
.text:00001D4A                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001D4F                 movzx   ecx, byte ptr [eax]
.text:00001D52                 test    ecx, ecx
.text:00001D54                 jnz     short loc_1D58
.text:00001D56                 jmp     short loc_1D19
.text:00001D58 ; ---------------------------------------------------------------------------
.text:00001D58
.text:00001D58 loc_1D58:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+7A9j
.text:00001D58                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+7BCj
.text:00001D58                 mov     edx, [ebp+var_28]
.text:00001D5B                 push    edx
.text:00001D5C                 mov     ecx, [ebp+arg_0]
.text:00001D5F                 add     ecx, 10h
.text:00001D62                 call    ??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[](uint)
.text:00001D67                 mov     [ebp+var_100], eax
.text:00001D6D                 mov     eax, [ebp+var_100]
.text:00001D73                 add     eax, 4
.text:00001D76                 push    eax
.text:00001D77                 mov     ecx, [ebp+arg_C]
.text:00001D7A                 push    ecx
.text:00001D7B                 lea     edx, [ebp+var_110]
.text:00001D81                 push    edx
.text:00001D82                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00001D87                 mov     byte ptr [ebp+var_4], 6
.text:00001D8B                 lea     ecx, [ebp+var_150] ; this
.text:00001D91                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:00001D96                 mov     byte ptr [ebp+var_4], 7
.text:00001D9A                 mov     ecx, [ebp+arg_C] ; this
.text:00001D9D                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001DA2                 movzx   eax, al
.text:00001DA5                 test    eax, eax
.text:00001DA7                 jz      short loc_1DF3
.text:00001DA9                 mov     ecx, [ebp+var_100]
.text:00001DAF                 add     ecx, 4          ; this
.text:00001DB2                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001DB7                 movzx   ecx, al
.text:00001DBA                 test    ecx, ecx
.text:00001DBC                 jz      short loc_1DCD
.text:00001DBE                 push    5Ch ; '\'
.text:00001DC0                 lea     ecx, [ebp+var_110]
.text:00001DC6                 call    ??4UString@@QAEAAV0@_W@Z ; UString::operator=(wchar_t)
.text:00001DCB                 jmp     short loc_1DF3
.text:00001DCD ; ---------------------------------------------------------------------------
.text:00001DCD
.text:00001DCD loc_1DCD:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+824j
.text:00001DCD                 mov     ecx, [ebp+var_100]
.text:00001DD3                 add     ecx, 4
.text:00001DD6                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001DDB                 push    eax             ; wchar_t *
.text:00001DDC                 call    ?IsDriveColonName@NWildcard@@YG_NPB_W@Z ; NWildcard::IsDriveColonName(wchar_t const *)
.text:00001DE1                 movzx   edx, al
.text:00001DE4                 test    edx, edx
.text:00001DE6                 jz      short loc_1DF3
.text:00001DE8                 lea     ecx, [ebp+var_110] ; this
.text:00001DEE                 call    ?Add_PathSepar@UString@@QAEXXZ ; UString::Add_PathSepar(void)
.text:00001DF3
.text:00001DF3 loc_1DF3:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+80Fj
.text:00001DF3                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+833j ...
.text:00001DF3                 mov     ecx, [ebp+arg_C] ; this
.text:00001DF6                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001DFB                 movzx   eax, al
.text:00001DFE                 test    eax, eax
.text:00001E00                 jz      short loc_1E17
.text:00001E02                 mov     ecx, [ebp+var_100]
.text:00001E08                 add     ecx, 4          ; this
.text:00001E0B                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001E10                 movzx   ecx, al
.text:00001E13                 test    ecx, ecx
.text:00001E15                 jnz     short loc_1E31
.text:00001E17
.text:00001E17 loc_1E17:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+868j
.text:00001E17                 mov     edx, [ebp+var_100]
.text:00001E1D                 add     edx, 4
.text:00001E20                 push    edx
.text:00001E21                 mov     eax, [ebp+arg_C]
.text:00001E24                 push    eax
.text:00001E25                 call    ?IsVirtualFsFolder@@YG_NABVUString@@0@Z ; IsVirtualFsFolder(UString const &,UString const &)
.text:00001E2A                 movzx   ecx, al
.text:00001E2D                 test    ecx, ecx
.text:00001E2F                 jz      short loc_1E56
.text:00001E31
.text:00001E31 loc_1E31:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+87Dj
.text:00001E31                 lea     ecx, [ebp+var_150] ; this
.text:00001E37                 call    ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::SetAsDir(void)
.text:00001E3C                 mov     edx, [ebp+var_100]
.text:00001E42                 add     edx, 4
.text:00001E45                 push    edx
.text:00001E46                 lea     ecx, [ebp+var_128]
.text:00001E4C                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00001E51                 jmp     loc_1FD2
.text:00001E56 ; ---------------------------------------------------------------------------
.text:00001E56
.text:00001E56 loc_1E56:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+897j
.text:00001E56                 lea     ecx, [ebp+var_110]
.text:00001E5C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001E61                 push    eax             ; wchar_t *
.text:00001E62                 lea     ecx, [ebp+var_150] ; this
.text:00001E68                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:00001E6D                 movzx   eax, al
.text:00001E70                 test    eax, eax
.text:00001E72                 jnz     loc_1F32
.text:00001E78                 mov     ecx, [ebp+var_100] ; this
.text:00001E7E                 call    ?AreThereIncludeItems@CCensorNode@NWildcard@@QBE_NXZ ; NWildcard::CCensorNode::AreThereIncludeItems(void)
.text:00001E83                 movzx   ecx, al
.text:00001E86                 test    ecx, ecx
.text:00001E88                 jnz     short loc_1EAD
.text:00001E8A                 mov     byte ptr [ebp+var_4], 6
.text:00001E8E                 lea     ecx, [ebp+var_150] ; this
.text:00001E94                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001E99                 mov     byte ptr [ebp+var_4], 0
.text:00001E9D                 lea     ecx, [ebp+var_110] ; this
.text:00001EA3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001EA8                 jmp     loc_1D19
.text:00001EAD ; ---------------------------------------------------------------------------
.text:00001EAD
.text:00001EAD loc_1EAD:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+8F0j
.text:00001EAD                 lea     edx, [ebp+var_110]
.text:00001EB3                 push    edx             ; struct UString *
.text:00001EB4                 mov     ecx, [ebp+arg_14] ; this
.text:00001EB7                 call    ?AddError@CDirItems@@QAEJABVUString@@@Z ; CDirItems::AddError(UString const &)
.text:00001EBC                 mov     [ebp+var_158], eax
.text:00001EC2                 cmp     [ebp+var_158], 0
.text:00001EC9                 jz      short loc_1F0F
.text:00001ECB                 mov     eax, [ebp+var_158]
.text:00001ED1                 mov     [ebp+var_268], eax
.text:00001ED7                 mov     byte ptr [ebp+var_4], 6
.text:00001EDB                 lea     ecx, [ebp+var_150] ; this
.text:00001EE1                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001EE6                 mov     byte ptr [ebp+var_4], 0
.text:00001EEA                 lea     ecx, [ebp+var_110] ; this
.text:00001EF0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001EF5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001EFC                 lea     ecx, [ebp+var_20]
.text:00001EFF                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001F04                 mov     eax, [ebp+var_268]
.text:00001F0A                 jmp     loc_2610
.text:00001F0F ; ---------------------------------------------------------------------------
.text:00001F0F
.text:00001F0F loc_1F0F:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+931j
.text:00001F0F                 mov     byte ptr [ebp+var_4], 6
.text:00001F13                 lea     ecx, [ebp+var_150] ; this
.text:00001F19                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001F1E                 mov     byte ptr [ebp+var_4], 0
.text:00001F22                 lea     ecx, [ebp+var_110] ; this
.text:00001F28                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001F2D                 jmp     loc_1D19
.text:00001F32 ; ---------------------------------------------------------------------------
.text:00001F32
.text:00001F32 loc_1F32:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+8DAj
.text:00001F32                 lea     ecx, [ebp+var_150] ; this
.text:00001F38                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00001F3D                 movzx   ecx, al
.text:00001F40                 test    ecx, ecx
.text:00001F42                 jnz     loc_1FD2
.text:00001F48                 push    80004005h       ; unsigned __int32
.text:00001F4D                 lea     edx, [ebp+var_110]
.text:00001F53                 push    edx             ; struct UString *
.text:00001F54                 mov     ecx, [ebp+arg_14] ; this
.text:00001F57                 call    ?AddError@CDirItems@@QAEJABVUString@@K@Z ; CDirItems::AddError(UString const &,ulong)
.text:00001F5C                 mov     [ebp+var_15C], eax
.text:00001F62                 cmp     [ebp+var_15C], 0
.text:00001F69                 jz      short loc_1FAF
.text:00001F6B                 mov     eax, [ebp+var_15C]
.text:00001F71                 mov     [ebp+var_26C], eax
.text:00001F77                 mov     byte ptr [ebp+var_4], 6
.text:00001F7B                 lea     ecx, [ebp+var_150] ; this
.text:00001F81                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001F86                 mov     byte ptr [ebp+var_4], 0
.text:00001F8A                 lea     ecx, [ebp+var_110] ; this
.text:00001F90                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001F95                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001F9C                 lea     ecx, [ebp+var_20]
.text:00001F9F                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001FA4                 mov     eax, [ebp+var_26C]
.text:00001FAA                 jmp     loc_2610
.text:00001FAF ; ---------------------------------------------------------------------------
.text:00001FAF
.text:00001FAF loc_1FAF:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+9D1j
.text:00001FAF                 mov     byte ptr [ebp+var_4], 6
.text:00001FB3                 lea     ecx, [ebp+var_150] ; this
.text:00001FB9                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001FBE                 mov     byte ptr [ebp+var_4], 0
.text:00001FC2                 lea     ecx, [ebp+var_110] ; this
.text:00001FC8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001FCD                 jmp     loc_1D19
.text:00001FD2 ; ---------------------------------------------------------------------------
.text:00001FD2
.text:00001FD2 loc_1FD2:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+8B9j
.text:00001FD2                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+9AAj
.text:00001FD2                 push    0               ; char
.text:00001FD4                 mov     ecx, [ebp+arg_14]
.text:00001FD7                 push    ecx             ; CDirItems *
.text:00001FD8                 lea     ecx, [ebp+var_278]
.text:00001FDE                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00001FE3                 mov     [ebp+var_2AC], eax
.text:00001FE9                 mov     edx, [ebp+var_2AC]
.text:00001FEF                 mov     [ebp+var_2B0], edx
.text:00001FF5                 mov     byte ptr [ebp+var_4], 8
.text:00001FF9                 mov     eax, [ebp+var_2B0]
.text:00001FFF                 push    eax             ; int
.text:00002000                 mov     ecx, [ebp+arg_C]
.text:00002003                 push    ecx             ; int
.text:00002004                 lea     edx, [ebp+var_128]
.text:0000200A                 push    edx             ; int
.text:0000200B                 mov     eax, [ebp+arg_8]
.text:0000200E                 push    eax             ; int
.text:0000200F                 mov     ecx, [ebp+arg_4]
.text:00002012                 push    ecx             ; int
.text:00002013                 mov     edx, [ebp+var_100]
.text:00002019                 push    edx             ; NWildcard::CCensorNode *
.text:0000201A                 call    ?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z ; EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)
.text:0000201F                 mov     [ebp+var_160], eax
.text:00002025                 mov     byte ptr [ebp+var_4], 7
.text:00002029                 lea     ecx, [ebp+var_278]
.text:0000202F                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002034                 cmp     [ebp+var_160], 0
.text:0000203B                 jz      short loc_2081
.text:0000203D                 mov     eax, [ebp+var_160]
.text:00002043                 mov     [ebp+var_27C], eax
.text:00002049                 mov     byte ptr [ebp+var_4], 6
.text:0000204D                 lea     ecx, [ebp+var_150] ; this
.text:00002053                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00002058                 mov     byte ptr [ebp+var_4], 0
.text:0000205C                 lea     ecx, [ebp+var_110] ; this
.text:00002062                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002067                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000206E                 lea     ecx, [ebp+var_20]
.text:00002071                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00002076                 mov     eax, [ebp+var_27C]
.text:0000207C                 jmp     loc_2610
.text:00002081 ; ---------------------------------------------------------------------------
.text:00002081
.text:00002081 loc_2081:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+AA3j
.text:00002081                 mov     byte ptr [ebp+var_4], 6
.text:00002085                 lea     ecx, [ebp+var_150] ; this
.text:0000208B                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00002090                 mov     byte ptr [ebp+var_4], 0
.text:00002094                 lea     ecx, [ebp+var_110] ; this
.text:0000209A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000209F                 jmp     loc_1D19
.text:000020A4 ; ---------------------------------------------------------------------------
.text:000020A4
.text:000020A4 loc_20A4:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+798j
.text:000020A4                 mov     [ebp+var_280], 0
.text:000020AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000020B5                 lea     ecx, [ebp+var_20]
.text:000020B8                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000020BD                 mov     eax, [ebp+var_280]
.text:000020C3                 jmp     loc_2610
.text:000020C8 ; ---------------------------------------------------------------------------
.text:000020C8
.text:000020C8 loc_20C8:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+80j
.text:000020C8                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+8Cj ...
.text:000020C8                 mov     ecx, [ebp+arg_C] ; this
.text:000020CB                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000020D0                 movzx   ecx, al
.text:000020D3                 test    ecx, ecx
.text:000020D5                 jz      loc_23DE
.text:000020DB                 mov     ecx, [ebp+arg_0]
.text:000020DE                 add     ecx, 1Ch
.text:000020E1                 call    ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size(void)
.text:000020E6                 test    eax, eax
.text:000020E8                 jbe     loc_23DE
.text:000020EE                 mov     [ebp+var_164], 0
.text:000020F8                 jmp     short loc_2109
.text:000020FA ; ---------------------------------------------------------------------------
.text:000020FA
.text:000020FA loc_20FA:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+C32j
.text:000020FA                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool):loc_21F7j
.text:000020FA                 mov     edx, [ebp+var_164]
.text:00002100                 add     edx, 1
.text:00002103                 mov     [ebp+var_164], edx
.text:00002109
.text:00002109 loc_2109:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+B60j
.text:00002109                 mov     ecx, [ebp+arg_0]
.text:0000210C                 add     ecx, 1Ch
.text:0000210F                 call    ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size(void)
.text:00002114                 cmp     [ebp+var_164], eax
.text:0000211A                 jnb     loc_21FC
.text:00002120                 mov     eax, [ebp+var_164]
.text:00002126                 push    eax
.text:00002127                 mov     ecx, [ebp+arg_0]
.text:0000212A                 add     ecx, 1Ch
.text:0000212D                 call    ??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[](uint)
.text:00002132                 mov     [ebp+var_168], eax
.text:00002138                 mov     ecx, [ebp+var_168]
.text:0000213E                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00002143                 cmp     eax, 1
.text:00002146                 jnb     short loc_214D
.text:00002148                 jmp     loc_21FC
.text:0000214D ; ---------------------------------------------------------------------------
.text:0000214D
.text:0000214D loc_214D:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+BAEj
.text:0000214D                 mov     ecx, [ebp+var_168]
.text:00002153                 call    ?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front(void)
.text:00002158                 mov     [ebp+var_16C], eax
.text:0000215E                 mov     ecx, [ebp+var_16C] ; this
.text:00002164                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00002169                 cmp     eax, 2
.text:0000216C                 jnz     short loc_2182
.text:0000216E                 mov     ecx, [ebp+var_16C]
.text:00002174                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002179                 movzx   ecx, word ptr [eax+2]
.text:0000217D                 cmp     ecx, 3Ah ; ':'
.text:00002180                 jz      short loc_2184
.text:00002182
.text:00002182 loc_2182:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+BD4j
.text:00002182                 jmp     short loc_21FC
.text:00002184 ; ---------------------------------------------------------------------------
.text:00002184
.text:00002184 loc_2184:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+BE8j
.text:00002184                 mov     ecx, [ebp+var_168]
.text:0000218A                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:0000218F                 cmp     eax, 1
.text:00002192                 jnz     short loc_21B2
.text:00002194                 mov     edx, [ebp+var_168]
.text:0000219A                 movzx   eax, byte ptr [edx+0Dh]
.text:0000219E                 test    eax, eax
.text:000021A0                 jnz     short loc_21B0
.text:000021A2                 mov     ecx, [ebp+var_168]
.text:000021A8                 movzx   edx, byte ptr [ecx+0Eh]
.text:000021AC                 test    edx, edx
.text:000021AE                 jnz     short loc_21B2
.text:000021B0
.text:000021B0 loc_21B0:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+C08j
.text:000021B0                 jmp     short loc_21FC
.text:000021B2 ; ---------------------------------------------------------------------------
.text:000021B2
.text:000021B2 loc_21B2:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+BFAj
.text:000021B2                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+C16j
.text:000021B2                 mov     ecx, [ebp+var_16C]
.text:000021B8                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000021BD                 push    eax             ; this
.text:000021BE                 call    ?IsDriveColonName@NWildcard@@YG_NPB_W@Z ; NWildcard::IsDriveColonName(wchar_t const *)
.text:000021C3                 movzx   eax, al
.text:000021C6                 test    eax, eax
.text:000021C8                 jz      short loc_21CF
.text:000021CA                 jmp     loc_20FA
.text:000021CF ; ---------------------------------------------------------------------------
.text:000021CF
.text:000021CF loc_21CF:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+C30j
.text:000021CF                 mov     ecx, [ebp+var_16C]
.text:000021D5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000021DA                 movzx   ecx, word ptr [eax]
.text:000021DD                 cmp     ecx, 2Ah ; '*'
.text:000021E0                 jz      short loc_21F7
.text:000021E2                 mov     ecx, [ebp+var_16C]
.text:000021E8                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000021ED                 movzx   edx, word ptr [eax]
.text:000021F0                 cmp     edx, 3Fh ; '?'
.text:000021F3                 jz      short loc_21F7
.text:000021F5                 jmp     short loc_21FC
.text:000021F7 ; ---------------------------------------------------------------------------
.text:000021F7
.text:000021F7 loc_21F7:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+C48j
.text:000021F7                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+C5Bj
.text:000021F7                 jmp     loc_20FA
.text:000021FC ; ---------------------------------------------------------------------------
.text:000021FC
.text:000021FC loc_21FC:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+B82j
.text:000021FC                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+BB0j ...
.text:000021FC                 mov     ecx, [ebp+arg_0]
.text:000021FF                 add     ecx, 1Ch
.text:00002202                 call    ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size(void)
.text:00002207                 cmp     [ebp+var_164], eax
.text:0000220D                 jnz     loc_23DE
.text:00002213                 lea     ecx, [ebp+var_17C]
.text:00002219                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:0000221E                 mov     [ebp+var_4], 9
.text:00002225                 lea     eax, [ebp+var_17C]
.text:0000222B                 push    eax
.text:0000222C                 call    ?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)
.text:00002231                 mov     [ebp+var_164], 0
.text:0000223B                 jmp     short loc_224C
.text:0000223D ; ---------------------------------------------------------------------------
.text:0000223D
.text:0000223D loc_223D:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+E1Aj
.text:0000223D                 mov     ecx, [ebp+var_164]
.text:00002243                 add     ecx, 1
.text:00002246                 mov     [ebp+var_164], ecx
.text:0000224C
.text:0000224C loc_224C:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+CA3j
.text:0000224C                 lea     ecx, [ebp+var_17C]
.text:00002252                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00002257                 cmp     [ebp+var_164], eax
.text:0000225D                 jnb     loc_23B7
.text:00002263                 mov     edx, [ebp+var_164]
.text:00002269                 push    edx
.text:0000226A                 lea     ecx, [ebp+var_17C]
.text:00002270                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00002275                 push    eax
.text:00002276                 lea     ecx, [ebp+var_190]
.text:0000227C                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00002281                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002285                 lea     ecx, [ebp+var_190] ; this
.text:0000228B                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00002290                 cmp     eax, 3
.text:00002293                 jb      short loc_22A8
.text:00002295                 lea     ecx, [ebp+var_190] ; this
.text:0000229B                 call    ?Back@UString@@QBE_WXZ ; UString::Back(void)
.text:000022A0                 movzx   eax, ax
.text:000022A3                 cmp     eax, 5Ch ; '\'
.text:000022A6                 jz      short loc_22DE
.text:000022A8
.text:000022A8 loc_22A8:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+CFBj
.text:000022A8                 mov     [ebp+var_284], 80004005h
.text:000022B2                 mov     byte ptr [ebp+var_4], 9
.text:000022B6                 lea     ecx, [ebp+var_190] ; this
.text:000022BC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000022C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000022C8                 lea     ecx, [ebp+var_17C]
.text:000022CE                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000022D3                 mov     eax, [ebp+var_284]
.text:000022D9                 jmp     loc_2610
.text:000022DE ; ---------------------------------------------------------------------------
.text:000022DE
.text:000022DE loc_22DE:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+D0Ej
.text:000022DE                 lea     ecx, [ebp+var_190] ; this
.text:000022E4                 call    ?DeleteBack@UString@@QAEXXZ ; UString::DeleteBack(void)
.text:000022E9                 lea     ecx, [ebp+var_1D0] ; this
.text:000022EF                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:000022F4                 mov     byte ptr [ebp+var_4], 0Bh
.text:000022F8                 lea     ecx, [ebp+var_1D0] ; this
.text:000022FE                 call    ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::SetAsDir(void)
.text:00002303                 lea     ecx, [ebp+var_190]
.text:00002309                 push    ecx
.text:0000230A                 lea     ecx, [ebp+var_1A8]
.text:00002310                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00002315                 movzx   edx, [ebp+arg_18]
.text:00002319                 push    edx             ; char
.text:0000231A                 mov     eax, [ebp+arg_14]
.text:0000231D                 push    eax             ; CDirItems *
.text:0000231E                 mov     ecx, [ebp+arg_10]
.text:00002321                 push    ecx             ; int
.text:00002322                 mov     edx, [ebp+arg_C]
.text:00002325                 push    edx             ; struct UString *
.text:00002326                 mov     eax, [ebp+arg_8]
.text:00002329                 push    eax             ; int
.text:0000232A                 mov     ecx, [ebp+arg_4]
.text:0000232D                 push    ecx             ; int
.text:0000232E                 mov     edx, [ebp+arg_0]
.text:00002331                 push    edx             ; NWildcard::CCensorNode *
.text:00002332                 lea     eax, [ebp+var_1D0]
.text:00002338                 push    eax             ; NWindows::NFile::NFind::CFileInfoBase *
.text:00002339                 call    ?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)
.text:0000233E                 mov     [ebp+var_1D8], eax
.text:00002344                 cmp     [ebp+var_1D8], 0
.text:0000234B                 jz      short loc_2394
.text:0000234D                 mov     ecx, [ebp+var_1D8]
.text:00002353                 mov     [ebp+var_288], ecx
.text:00002359                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000235D                 lea     ecx, [ebp+var_1D0] ; this
.text:00002363                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00002368                 mov     byte ptr [ebp+var_4], 9
.text:0000236C                 lea     ecx, [ebp+var_190] ; this
.text:00002372                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002377                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000237E                 lea     ecx, [ebp+var_17C]
.text:00002384                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002389                 mov     eax, [ebp+var_288]
.text:0000238F                 jmp     loc_2610
.text:00002394 ; ---------------------------------------------------------------------------
.text:00002394
.text:00002394 loc_2394:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+DB3j
.text:00002394                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002398                 lea     ecx, [ebp+var_1D0] ; this
.text:0000239E                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000023A3                 mov     byte ptr [ebp+var_4], 9
.text:000023A7                 lea     ecx, [ebp+var_190] ; this
.text:000023AD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000023B2                 jmp     loc_223D
.text:000023B7 ; ---------------------------------------------------------------------------
.text:000023B7
.text:000023B7 loc_23B7:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+CC5j
.text:000023B7                 mov     [ebp+var_28C], 0
.text:000023C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000023C8                 lea     ecx, [ebp+var_17C]
.text:000023CE                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000023D3                 mov     eax, [ebp+var_28C]
.text:000023D9                 jmp     loc_2610
.text:000023DE ; ---------------------------------------------------------------------------
.text:000023DE
.text:000023DE loc_23DE:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+B3Dj
.text:000023DE                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+B50j ...
.text:000023DE                 push    2Ah ; '*'
.text:000023E0                 mov     edx, [ebp+arg_C]
.text:000023E3                 push    edx
.text:000023E4                 lea     eax, [ebp+var_298]
.text:000023EA                 push    eax
.text:000023EB                 call    ??H@YG?AVUString@@ABV0@_W@Z ; operator+(UString const &,wchar_t)
.text:000023F0                 mov     [ebp+var_2B4], eax
.text:000023F6                 mov     ecx, [ebp+var_2B4]
.text:000023FC                 mov     [ebp+var_2B8], ecx
.text:00002402                 mov     [ebp+var_4], 0Ch
.text:00002409                 mov     edx, [ebp+var_2B8]
.text:0000240F                 push    edx             ; struct UString *
.text:00002410                 lea     ecx, [ebp+var_1EC] ; this
.text:00002416                 call    ??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z ; NWindows::NFile::NFind::CEnumerator::CEnumerator(UString const &)
.text:0000241B                 mov     byte ptr [ebp+var_4], 0Eh
.text:0000241F                 lea     ecx, [ebp+var_298] ; this
.text:00002425                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000242A                 mov     [ebp+var_1F4], 0
.text:00002434                 jmp     short loc_2445
.text:00002436 ; ---------------------------------------------------------------------------
.text:00002436
.text:00002436 loc_2436:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+1051j
.text:00002436                 mov     eax, [ebp+var_1F4]
.text:0000243C                 add     eax, 1
.text:0000243F                 mov     [ebp+var_1F4], eax
.text:00002445
.text:00002445 loc_2445:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+E9Cj
.text:00002445                 lea     ecx, [ebp+var_230] ; this
.text:0000244B                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:00002450                 mov     byte ptr [ebp+var_4], 0Fh
.text:00002454                 lea     ecx, [ebp+var_239]
.text:0000245A                 push    ecx             ; bool *
.text:0000245B                 lea     edx, [ebp+var_230]
.text:00002461                 push    edx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00002462                 lea     ecx, [ebp+var_1EC] ; this
.text:00002468                 call    ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@AA_N@Z ; NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &,bool &)
.text:0000246D                 movzx   eax, al
.text:00002470                 test    eax, eax
.text:00002472                 jnz     short loc_24DB
.text:00002474                 mov     ecx, [ebp+arg_C]
.text:00002477                 push    ecx             ; struct UString *
.text:00002478                 mov     ecx, [ebp+arg_14] ; this
.text:0000247B                 call    ?AddError@CDirItems@@QAEJABVUString@@@Z ; CDirItems::AddError(UString const &)
.text:00002480                 mov     [ebp+var_244], eax
.text:00002486                 cmp     [ebp+var_244], 0
.text:0000248D                 jz      short loc_24C7
.text:0000248F                 mov     edx, [ebp+var_244]
.text:00002495                 mov     [ebp+var_29C], edx
.text:0000249B                 mov     byte ptr [ebp+var_4], 0Eh
.text:0000249F                 lea     ecx, [ebp+var_230] ; this
.text:000024A5                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000024AA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000024B1                 lea     ecx, [ebp+var_1EC] ; this
.text:000024B7                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:000024BC                 mov     eax, [ebp+var_29C]
.text:000024C2                 jmp     loc_2610
.text:000024C7 ; ---------------------------------------------------------------------------
.text:000024C7
.text:000024C7 loc_24C7:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+EF5j
.text:000024C7                 mov     byte ptr [ebp+var_4], 0Eh
.text:000024CB                 lea     ecx, [ebp+var_230] ; this
.text:000024D1                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000024D6                 jmp     loc_25EE
.text:000024DB ; ---------------------------------------------------------------------------
.text:000024DB
.text:000024DB loc_24DB:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+EDAj
.text:000024DB                 movzx   eax, [ebp+var_239]
.text:000024E2                 test    eax, eax
.text:000024E4                 jnz     short loc_24FA
.text:000024E6                 mov     byte ptr [ebp+var_4], 0Eh
.text:000024EA                 lea     ecx, [ebp+var_230] ; this
.text:000024F0                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000024F5                 jmp     loc_25EE
.text:000024FA ; ---------------------------------------------------------------------------
.text:000024FA
.text:000024FA loc_24FA:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+F4Cj
.text:000024FA                 mov     ecx, [ebp+arg_14]
.text:000024FD                 cmp     dword ptr [ecx+98h], 0
.text:00002504                 jz      short loc_256D
.text:00002506                 mov     edx, [ebp+var_1F4]
.text:0000250C                 and     edx, 0FFFh
.text:00002512                 cmp     edx, 0FFFh
.text:00002518                 jnz     short loc_256D
.text:0000251A                 mov     eax, [ebp+arg_C]
.text:0000251D                 push    eax             ; struct UString *
.text:0000251E                 mov     ecx, [ebp+arg_14] ; this
.text:00002521                 call    ?ScanProgress@CDirItems@@QAEJABVUString@@@Z ; CDirItems::ScanProgress(UString const &)
.text:00002526                 mov     [ebp+var_248], eax
.text:0000252C                 cmp     [ebp+var_248], 0
.text:00002533                 jz      short loc_256D
.text:00002535                 mov     ecx, [ebp+var_248]
.text:0000253B                 mov     [ebp+var_2A0], ecx
.text:00002541                 mov     byte ptr [ebp+var_4], 0Eh
.text:00002545                 lea     ecx, [ebp+var_230] ; this
.text:0000254B                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00002550                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002557                 lea     ecx, [ebp+var_1EC] ; this
.text:0000255D                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:00002562                 mov     eax, [ebp+var_2A0]
.text:00002568                 jmp     loc_2610
.text:0000256D ; ---------------------------------------------------------------------------
.text:0000256D
.text:0000256D loc_256D:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+F6Cj
.text:0000256D                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+F80j ...
.text:0000256D                 movzx   edx, [ebp+arg_18]
.text:00002571                 push    edx             ; char
.text:00002572                 mov     eax, [ebp+arg_14]
.text:00002575                 push    eax             ; CDirItems *
.text:00002576                 mov     ecx, [ebp+arg_10]
.text:00002579                 push    ecx             ; int
.text:0000257A                 mov     edx, [ebp+arg_C]
.text:0000257D                 push    edx             ; struct UString *
.text:0000257E                 mov     eax, [ebp+arg_8]
.text:00002581                 push    eax             ; int
.text:00002582                 mov     ecx, [ebp+arg_4]
.text:00002585                 push    ecx             ; int
.text:00002586                 mov     edx, [ebp+arg_0]
.text:00002589                 push    edx             ; NWildcard::CCensorNode *
.text:0000258A                 lea     eax, [ebp+var_230]
.text:00002590                 push    eax             ; NWindows::NFile::NFind::CFileInfoBase *
.text:00002591                 call    ?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)
.text:00002596                 mov     [ebp+var_24C], eax
.text:0000259C                 cmp     [ebp+var_24C], 0
.text:000025A3                 jz      short loc_25DA
.text:000025A5                 mov     ecx, [ebp+var_24C]
.text:000025AB                 mov     [ebp+var_2A4], ecx
.text:000025B1                 mov     byte ptr [ebp+var_4], 0Eh
.text:000025B5                 lea     ecx, [ebp+var_230] ; this
.text:000025BB                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000025C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000025C7                 lea     ecx, [ebp+var_1EC] ; this
.text:000025CD                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:000025D2                 mov     eax, [ebp+var_2A4]
.text:000025D8                 jmp     short loc_2610
.text:000025DA ; ---------------------------------------------------------------------------
.text:000025DA
.text:000025DA loc_25DA:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+100Bj
.text:000025DA                 mov     byte ptr [ebp+var_4], 0Eh
.text:000025DE                 lea     ecx, [ebp+var_230] ; this
.text:000025E4                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000025E9                 jmp     loc_2436
.text:000025EE ; ---------------------------------------------------------------------------
.text:000025EE
.text:000025EE loc_25EE:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+F3Ej
.text:000025EE                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+F5Dj
.text:000025EE                 mov     [ebp+var_2A8], 0
.text:000025F8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000025FF                 lea     ecx, [ebp+var_1EC] ; this
.text:00002605                 call    ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text:0000260A                 mov     eax, [ebp+var_2A8]
.text:00002610
.text:00002610 loc_2610:                               ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+6Ej
.text:00002610                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+21Aj ...
.text:00002610                 push    edx
.text:00002611                 mov     ecx, ebp
.text:00002613                 push    eax
.text:00002614                 lea     edx, $LN119
.text:0000261A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000261F                 pop     eax
.text:00002620                 pop     edx
.text:00002621                 mov     ecx, [ebp+var_C]
.text:00002624                 mov     large fs:0, ecx
.text:0000262B                 pop     ecx
.text:0000262C                 pop     edi
.text:0000262D                 add     esp, 2B8h
.text:00002633                 cmp     ebp, esp
.text:00002635                 call    __RTC_CheckEsp
.text:0000263A                 mov     esp, ebp
.text:0000263C                 pop     ebp
.text:0000263D                 retn    1Ch
.text:0000263D ?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z endp ; sp-analysis failed
.text:0000263D
.text:0000263D ; ---------------------------------------------------------------------------
.text:00002640 $LN119          dd 0Fh                  ; DATA XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+107Co
.text:00002644                 dd offset $LN118
.text:00002648 $LN118          dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00002644o
.text:00002650                 dd offset $LN102        ; "needEnterVector"
.text:00002654                 dd 0FFFFFFC0h, 0Ch
.text:0000265C                 dd offset $LN103        ; "fullPath"
.text:00002660                 dd 0FFFFFF7Ch, 38h
.text:00002668                 dd offset $LN104        ; "fi"
.text:0000266C                 dd 0FFFFFF5Ch, 0Ch
.text:00002674                 dd offset $LN105        ; "pathParts"
.text:00002678                 dd 0FFFFFF50h, 4
.text:00002680                 dd offset $LN106        ; "secureIndex"
.text:00002684                 dd 0FFFFFF30h, 0Ch
.text:0000268C                 dd offset $LN107        ; "pathParts"
.text:00002690                 dd 0FFFFFF18h, 0Ch
.text:00002698                 dd offset $LN108        ; "addArchivePrefixNew"
.text:0000269C                 dd 0FFFFFEF0h, 0Ch
.text:000026A4                 dd offset $LN109        ; "fullPath"
.text:000026A8                 dd 0FFFFFEB0h, 38h
.text:000026B0                 dd offset $LN110        ; "fi"
.text:000026B4                 dd 0FFFFFE84h, 0Ch
.text:000026BC                 dd offset $LN111        ; "driveStrings"
.text:000026C0                 dd 0FFFFFE70h, 0Ch
.text:000026C8                 dd offset $LN112        ; "driveName"
.text:000026CC                 dd 0FFFFFE30h, 38h
.text:000026D4                 dd offset $LN113        ; "fi"
.text:000026D8                 dd 0FFFFFE14h, 10h
.text:000026E0                 dd offset $LN114        ; "enumerator"
.text:000026E4                 dd 0FFFFFDD0h, 38h
.text:000026EC                 dd offset $LN115        ; "fi"
.text:000026F0                 dd 0FFFFFDC7h, 1
.text:000026F8                 dd offset $LN116        ; "found"
.text:000026FC $LN116          db 'found',0            ; DATA XREF: .text:000026F8o
.text:00002702 $LN115          db 'fi',0               ; DATA XREF: .text:000026ECo
.text:00002705 $LN114          db 'enumerator',0       ; DATA XREF: .text:000026E0o
.text:00002710 $LN113          db 'fi',0               ; DATA XREF: .text:000026D4o
.text:00002713 $LN112          db 'driveName',0        ; DATA XREF: .text:000026C8o
.text:0000271D $LN111          db 'driveStrings',0     ; DATA XREF: .text:000026BCo
.text:0000272A $LN110          db 'fi',0               ; DATA XREF: .text:000026B0o
.text:0000272D $LN109          db 'fullPath',0         ; DATA XREF: .text:000026A4o
.text:00002736 $LN108          db 'addArchivePrefixNew',0 ; DATA XREF: .text:00002698o
.text:0000274A $LN107          db 'pathParts',0        ; DATA XREF: .text:0000268Co
.text:00002754 $LN106          db 'secureIndex',0      ; DATA XREF: .text:00002680o
.text:00002760 $LN105          db 'pathParts',0        ; DATA XREF: .text:00002674o
.text:0000276A $LN104          db 'fi',0               ; DATA XREF: .text:00002668o
.text:0000276D $LN103          db 'fullPath',0         ; DATA XREF: .text:0000265Co
.text:00002776 $LN102          db 'needEnterVector',0  ; DATA XREF: .text:00002650o
.text:00002786                 align 4
.text:00002788
.text:00002788 ; =============== S U B R O U T I N E =======================================
.text:00002788
.text:00002788 ; Attributes: bp-based frame
.text:00002788
.text:00002788 ; int __stdcall EnumerateDirItems_Spec(NWildcard::CCensorNode *, int, int, int, int, int, CDirItems *, char)
.text:00002788 ?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z proc near
.text:00002788                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+6E5p
.text:00002788                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+A82p ...
.text:00002788
.text:00002788 var_44          = dword ptr -44h
.text:00002788 var_40          = dword ptr -40h
.text:00002788 var_3C          = dword ptr -3Ch
.text:00002788 var_38          = byte ptr -38h
.text:00002788 var_2C          = dword ptr -2Ch
.text:00002788 var_28          = dword ptr -28h
.text:00002788 var_24          = dword ptr -24h
.text:00002788 var_1C          = byte ptr -1Ch
.text:00002788 var_C           = dword ptr -0Ch
.text:00002788 var_4           = dword ptr -4
.text:00002788 arg_0           = dword ptr  8
.text:00002788 arg_4           = dword ptr  0Ch
.text:00002788 arg_8           = dword ptr  10h
.text:00002788 arg_C           = dword ptr  14h
.text:00002788 arg_10          = dword ptr  18h
.text:00002788 arg_14          = dword ptr  1Ch
.text:00002788 arg_18          = dword ptr  20h
.text:00002788 arg_1C          = byte ptr  24h
.text:00002788
.text:00002788                 push    ebp
.text:00002789                 mov     ebp, esp
.text:0000278B                 push    0FFFFFFFFh
.text:0000278D                 push    offset __ehhandler$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z
.text:00002792                 mov     eax, large fs:0
.text:00002798                 push    eax
.text:00002799                 sub     esp, 38h
.text:0000279C                 push    edi
.text:0000279D                 lea     edi, [ebp+var_44]
.text:000027A0                 mov     ecx, 0Eh
.text:000027A5                 mov     eax, 0CCCCCCCCh
.text:000027AA                 rep stosd
.text:000027AC                 mov     eax, dword ptr ds:___security_cookie
.text:000027B1                 xor     eax, ebp
.text:000027B3                 push    eax
.text:000027B4                 lea     eax, [ebp+var_C]
.text:000027B7                 mov     large fs:0, eax
.text:000027BD                 push    5Ch ; '\'
.text:000027BF                 mov     eax, [ebp+arg_C]
.text:000027C2                 push    eax
.text:000027C3                 lea     ecx, [ebp+var_1C]
.text:000027C6                 push    ecx
.text:000027C7                 call    ??H@YG?AVUString@@ABV0@_W@Z ; operator+(UString const &,wchar_t)
.text:000027CC                 mov     [ebp+var_4], 0
.text:000027D3                 lea     edx, [ebp+var_1C]
.text:000027D6                 push    edx             ; struct UString *
.text:000027D7                 mov     eax, [ebp+arg_8]
.text:000027DA                 push    eax             ; int
.text:000027DB                 mov     ecx, [ebp+arg_4]
.text:000027DE                 push    ecx             ; int
.text:000027DF                 mov     ecx, [ebp+arg_18] ; this
.text:000027E2                 call    ?AddPrefix@CDirItems@@QAEIHHABVUString@@@Z ; CDirItems::AddPrefix(int,int,UString const &)
.text:000027E7                 mov     [ebp+var_24], eax
.text:000027EA                 mov     ecx, [ebp+arg_18]
.text:000027ED                 add     ecx, 24h ; '$'
.text:000027F0                 call    ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ; CObjectVector<CDirItem>::Size(void)
.text:000027F5                 mov     [ebp+var_28], eax
.text:000027F8                 movzx   edx, [ebp+arg_1C]
.text:000027FC                 push    edx             ; char
.text:000027FD                 mov     eax, [ebp+arg_18]
.text:00002800                 push    eax             ; CDirItems *
.text:00002801                 mov     ecx, [ebp+arg_14]
.text:00002804                 push    ecx             ; int
.text:00002805                 lea     edx, [ebp+var_1C]
.text:00002808                 push    edx
.text:00002809                 mov     eax, [ebp+arg_10]
.text:0000280C                 push    eax
.text:0000280D                 lea     ecx, [ebp+var_38]
.text:00002810                 push    ecx
.text:00002811                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00002816                 mov     [ebp+var_40], eax
.text:00002819                 mov     edx, [ebp+var_40]
.text:0000281C                 mov     [ebp+var_44], edx
.text:0000281F                 mov     byte ptr [ebp+var_4], 1
.text:00002823                 mov     eax, [ebp+var_44]
.text:00002826                 push    eax             ; UString *
.text:00002827                 mov     ecx, [ebp+var_24]
.text:0000282A                 push    ecx             ; int
.text:0000282B                 mov     edx, [ebp+var_24]
.text:0000282E                 push    edx             ; int
.text:0000282F                 mov     eax, [ebp+arg_0]
.text:00002832                 push    eax             ; NWildcard::CCensorNode *
.text:00002833                 call    ?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)
.text:00002838                 mov     [ebp+var_2C], eax
.text:0000283B                 mov     byte ptr [ebp+var_4], 0
.text:0000283F                 lea     ecx, [ebp+var_38] ; this
.text:00002842                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002847                 mov     ecx, [ebp+arg_18]
.text:0000284A                 add     ecx, 24h ; '$'
.text:0000284D                 call    ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ; CObjectVector<CDirItem>::Size(void)
.text:00002852                 cmp     [ebp+var_28], eax
.text:00002855                 jnz     short loc_285F
.text:00002857                 mov     ecx, [ebp+arg_18] ; this
.text:0000285A                 call    ?DeleteLastPrefix@CDirItems@@QAEXXZ ; CDirItems::DeleteLastPrefix(void)
.text:0000285F
.text:0000285F loc_285F:                               ; CODE XREF: EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+CDj
.text:0000285F                 mov     ecx, [ebp+var_2C]
.text:00002862                 mov     [ebp+var_3C], ecx
.text:00002865                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000286C                 lea     ecx, [ebp+var_1C] ; this
.text:0000286F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002874                 mov     eax, [ebp+var_3C]
.text:00002877                 push    edx
.text:00002878                 mov     ecx, ebp
.text:0000287A                 push    eax
.text:0000287B                 lea     edx, $LN9_0
.text:00002881                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002886                 pop     eax
.text:00002887                 pop     edx
.text:00002888                 mov     ecx, [ebp+var_C]
.text:0000288B                 mov     large fs:0, ecx
.text:00002892                 pop     ecx
.text:00002893                 pop     edi
.text:00002894                 add     esp, 44h
.text:00002897                 cmp     ebp, esp
.text:00002899                 call    __RTC_CheckEsp
.text:0000289E                 mov     esp, ebp
.text:000028A0                 pop     ebp
.text:000028A1                 retn    20h
.text:000028A1 ?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z endp
.text:000028A1
.text:000028A1 ; ---------------------------------------------------------------------------
.text:000028A4 $LN9_0          dd 1                    ; DATA XREF: EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+F3o
.text:000028A8                 dd offset $LN8_0
.text:000028AC $LN8_0          dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:000028A8o
.text:000028B4                 dd offset $LN6          ; "name2"
.text:000028B8 $LN6            db 'name2',0            ; DATA XREF: .text:000028B4o
.text:000028BE                 db 0Ah dup(0CCh)
.text:000028C8
.text:000028C8 ; =============== S U B R O U T I N E =======================================
.text:000028C8
.text:000028C8 ; Attributes: bp-based frame
.text:000028C8
.text:000028C8 ; int __stdcall EnumerateAltStreams(struct NWindows::NFile::NFind::CFileInfo *, int, int, int, struct UString *, int, CDirItems *)
.text:000028C8 ?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z proc near
.text:000028C8                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+572p
.text:000028C8                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+256p
.text:000028C8
.text:000028C8 var_D4          = dword ptr -0D4h
.text:000028C8 var_D0          = dword ptr -0D0h
.text:000028C8 var_CC          = dword ptr -0CCh
.text:000028C8 var_C8          = byte ptr -0C8h
.text:000028C8 var_BC          = dword ptr -0BCh
.text:000028C8 var_B4          = dword ptr -0B4h
.text:000028C8 var_B0          = dword ptr -0B0h
.text:000028C8 var_94          = dword ptr -94h
.text:000028C8 var_90          = byte ptr -90h
.text:000028C8 var_8C          = byte ptr -8Ch
.text:000028C8 var_74          = byte ptr -74h
.text:000028C8 var_60          = byte ptr -60h
.text:000028C8 var_49          = byte ptr -49h
.text:000028C8 var_40          = byte ptr -40h
.text:000028C8 var_30          = dword ptr -30h
.text:000028C8 var_2C          = dword ptr -2Ch
.text:000028C8 var_20          = byte ptr -20h
.text:000028C8 var_C           = dword ptr -0Ch
.text:000028C8 var_4           = dword ptr -4
.text:000028C8 arg_0           = dword ptr  8
.text:000028C8 arg_4           = dword ptr  0Ch
.text:000028C8 arg_8           = dword ptr  10h
.text:000028C8 arg_C           = dword ptr  14h
.text:000028C8 arg_10          = dword ptr  18h
.text:000028C8 arg_14          = dword ptr  1Ch
.text:000028C8 arg_18          = dword ptr  20h
.text:000028C8
.text:000028C8                 push    ebp
.text:000028C9                 mov     ebp, esp
.text:000028CB                 push    0FFFFFFFFh
.text:000028CD                 push    offset __ehhandler$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z
.text:000028D2                 mov     eax, large fs:0
.text:000028D8                 push    eax
.text:000028D9                 sub     esp, 0C8h
.text:000028DF                 push    edi
.text:000028E0                 lea     edi, [ebp+var_D4]
.text:000028E6                 mov     ecx, 32h ; '2'
.text:000028EB                 mov     eax, 0CCCCCCCCh
.text:000028F0                 rep stosd
.text:000028F2                 mov     eax, dword ptr ds:___security_cookie
.text:000028F7                 xor     eax, ebp
.text:000028F9                 push    eax
.text:000028FA                 lea     eax, [ebp+var_C]
.text:000028FD                 mov     large fs:0, eax
.text:00002903                 mov     eax, [ebp+arg_10]
.text:00002906                 push    eax             ; struct UString *
.text:00002907                 lea     ecx, [ebp+var_20] ; this
.text:0000290A                 call    ??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z ; NWindows::NFile::NFind::CStreamEnumerator::CStreamEnumerator(UString const &)
.text:0000290F                 mov     [ebp+var_4], 0
.text:00002916
.text:00002916 loc_2916:                               ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+139j
.text:00002916                                         ; EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+1ACj ...
.text:00002916                 lea     ecx, [ebp+var_40] ; this
.text:00002919                 call    ??0CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::CStreamInfo(void)
.text:0000291E                 mov     byte ptr [ebp+var_4], 1
.text:00002922                 lea     ecx, [ebp+var_49]
.text:00002925                 push    ecx             ; bool *
.text:00002926                 lea     edx, [ebp+var_40]
.text:00002929                 push    edx             ; struct NWindows::NFile::NFind::CStreamInfo *
.text:0000292A                 lea     ecx, [ebp+var_20] ; this
.text:0000292D                 call    ?Next@CStreamEnumerator@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@AA_N@Z ; NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)
.text:00002932                 movzx   eax, al
.text:00002935                 test    eax, eax
.text:00002937                 jnz     short loc_29AE
.text:00002939                 push    offset $SG73294 ; ":*"
.text:0000293E                 mov     ecx, [ebp+arg_10]
.text:00002941                 push    ecx
.text:00002942                 lea     edx, [ebp+var_C8]
.text:00002948                 push    edx
.text:00002949                 call    ??H@YG?AVUString@@ABV0@PB_W@Z ; operator+(UString const &,wchar_t const *)
.text:0000294E                 mov     [ebp+var_D0], eax
.text:00002954                 mov     eax, [ebp+var_D0]
.text:0000295A                 mov     [ebp+var_D4], eax
.text:00002960                 mov     byte ptr [ebp+var_4], 2
.text:00002964                 mov     ecx, [ebp+var_D4]
.text:0000296A                 push    ecx             ; struct UString *
.text:0000296B                 mov     ecx, [ebp+arg_18] ; this
.text:0000296E                 call    ?AddError@CDirItems@@QAEJABVUString@@@Z ; CDirItems::AddError(UString const &)
.text:00002973                 mov     [ebp+var_BC], eax
.text:00002979                 mov     byte ptr [ebp+var_4], 1
.text:0000297D                 lea     ecx, [ebp+var_C8] ; this
.text:00002983                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002988                 mov     byte ptr [ebp+var_4], 0
.text:0000298C                 lea     ecx, [ebp+var_40] ; this
.text:0000298F                 call    ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text:00002994                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000299B                 lea     ecx, [ebp+var_20] ; this
.text:0000299E                 call    ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)
.text:000029A3                 mov     eax, [ebp+var_BC]
.text:000029A9                 jmp     loc_2B23
.text:000029AE ; ---------------------------------------------------------------------------
.text:000029AE
.text:000029AE loc_29AE:                               ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+6Fj
.text:000029AE                 movzx   edx, [ebp+var_49]
.text:000029B2                 test    edx, edx
.text:000029B4                 jnz     short loc_29E6
.text:000029B6                 mov     [ebp+var_CC], 0
.text:000029C0                 mov     byte ptr [ebp+var_4], 0
.text:000029C4                 lea     ecx, [ebp+var_40] ; this
.text:000029C7                 call    ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text:000029CC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000029D3                 lea     ecx, [ebp+var_20] ; this
.text:000029D6                 call    ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)
.text:000029DB                 mov     eax, [ebp+var_CC]
.text:000029E1                 jmp     loc_2B23
.text:000029E6 ; ---------------------------------------------------------------------------
.text:000029E6
.text:000029E6 loc_29E6:                               ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+ECj
.text:000029E6                 lea     ecx, [ebp+var_40] ; this
.text:000029E9                 call    ?IsMainStream@CStreamInfo@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CStreamInfo::IsMainStream(void)
.text:000029EE                 movzx   eax, al
.text:000029F1                 test    eax, eax
.text:000029F3                 jz      short loc_2A06
.text:000029F5                 mov     byte ptr [ebp+var_4], 0
.text:000029F9                 lea     ecx, [ebp+var_40] ; this
.text:000029FC                 call    ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text:00002A01                 jmp     loc_2916
.text:00002A06 ; ---------------------------------------------------------------------------
.text:00002A06
.text:00002A06 loc_2A06:                               ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+12Bj
.text:00002A06                 mov     ecx, [ebp+arg_14]
.text:00002A09                 push    ecx
.text:00002A0A                 lea     ecx, [ebp+var_60]
.text:00002A0D                 call    ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ; CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)
.text:00002A12                 mov     byte ptr [ebp+var_4], 3
.text:00002A16                 lea     edx, [ebp+var_74]
.text:00002A19                 push    edx
.text:00002A1A                 lea     ecx, [ebp+var_40]
.text:00002A1D                 call    ?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ ; NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)
.text:00002A22                 mov     byte ptr [ebp+var_4], 4
.text:00002A26                 lea     eax, [ebp+var_74]
.text:00002A29                 push    eax
.text:00002A2A                 lea     ecx, [ebp+var_60]
.text:00002A2D                 call    ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back(void)
.text:00002A32                 mov     ecx, eax
.text:00002A34                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00002A39                 push    1
.text:00002A3B                 lea     ecx, [ebp+var_60]
.text:00002A3E                 push    ecx
.text:00002A3F                 push    0
.text:00002A41                 mov     ecx, [ebp+arg_4]
.text:00002A44                 call    ?CheckPathToRoot@CCensorNode@NWildcard@@QBE_N_NAAV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathToRoot(bool,CObjectVector<UString> &,bool)
.text:00002A49                 movzx   edx, al
.text:00002A4C                 test    edx, edx
.text:00002A4E                 jz      short loc_2A79
.text:00002A50                 mov     byte ptr [ebp+var_4], 3
.text:00002A54                 lea     ecx, [ebp+var_74] ; this
.text:00002A57                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002A5C                 mov     byte ptr [ebp+var_4], 1
.text:00002A60                 lea     ecx, [ebp+var_60]
.text:00002A63                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002A68                 mov     byte ptr [ebp+var_4], 0
.text:00002A6C                 lea     ecx, [ebp+var_40] ; this
.text:00002A6F                 call    ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text:00002A74                 jmp     loc_2916
.text:00002A79 ; ---------------------------------------------------------------------------
.text:00002A79
.text:00002A79 loc_2A79:                               ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+186j
.text:00002A79                 mov     eax, [ebp+arg_0]
.text:00002A7C                 push    eax             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00002A7D                 lea     ecx, [ebp+var_B4] ; this
.text:00002A83                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@ABU0123@@Z ; NWindows::NFile::NFind::CFileInfo::CFileInfo(NWindows::NFile::NFind::CFileInfo const &)
.text:00002A88                 mov     byte ptr [ebp+var_4], 5
.text:00002A8C                 lea     ecx, [ebp+var_74]
.text:00002A8F                 push    ecx
.text:00002A90                 lea     ecx, [ebp+var_8C]
.text:00002A96                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00002A9B                 mov     edx, [ebp+var_30]
.text:00002A9E                 mov     [ebp+var_B4], edx
.text:00002AA4                 mov     eax, [ebp+var_2C]
.text:00002AA7                 mov     [ebp+var_B0], eax
.text:00002AAD                 mov     ecx, [ebp+var_94]
.text:00002AB3                 and     ecx, 0FFFFFFEFh
.text:00002AB6                 mov     [ebp+var_94], ecx
.text:00002ABC                 mov     [ebp+var_90], 1
.text:00002AC3                 lea     edx, [ebp+var_B4]
.text:00002AC9                 push    edx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00002ACA                 push    0FFFFFFFFh      ; int
.text:00002ACC                 mov     eax, [ebp+arg_C]
.text:00002ACF                 push    eax             ; int
.text:00002AD0                 mov     ecx, [ebp+arg_8]
.text:00002AD3                 push    ecx             ; int
.text:00002AD4                 mov     ecx, [ebp+arg_18] ; this
.text:00002AD7                 call    ?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z ; CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)
.text:00002ADC                 mov     byte ptr [ebp+var_4], 4
.text:00002AE0                 lea     ecx, [ebp+var_B4] ; this
.text:00002AE6                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00002AEB                 mov     byte ptr [ebp+var_4], 3
.text:00002AEF                 lea     ecx, [ebp+var_74] ; this
.text:00002AF2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002AF7                 mov     byte ptr [ebp+var_4], 1
.text:00002AFB                 lea     ecx, [ebp+var_60]
.text:00002AFE                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002B03                 mov     byte ptr [ebp+var_4], 0
.text:00002B07                 lea     ecx, [ebp+var_40] ; this
.text:00002B0A                 call    ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text:00002B0F                 jmp     loc_2916
.text:00002B14 ; ---------------------------------------------------------------------------
.text:00002B14                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002B1B                 lea     ecx, [ebp+var_20] ; this
.text:00002B1E                 call    ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)
.text:00002B23
.text:00002B23 loc_2B23:                               ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+E1j
.text:00002B23                                         ; EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+119j
.text:00002B23                 push    edx
.text:00002B24                 mov     ecx, ebp
.text:00002B26                 push    eax
.text:00002B27                 lea     edx, $LN25_1
.text:00002B2D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002B32                 pop     eax
.text:00002B33                 pop     edx
.text:00002B34                 mov     ecx, [ebp+var_C]
.text:00002B37                 mov     large fs:0, ecx
.text:00002B3E                 pop     ecx
.text:00002B3F                 pop     edi
.text:00002B40                 add     esp, 0D4h
.text:00002B46                 cmp     ebp, esp
.text:00002B48                 call    __RTC_CheckEsp
.text:00002B4D                 mov     esp, ebp
.text:00002B4F                 pop     ebp
.text:00002B50                 retn    1Ch
.text:00002B50 ?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z endp
.text:00002B50
.text:00002B50 ; ---------------------------------------------------------------------------
.text:00002B53                 align 4
.text:00002B54 $LN25_1         dd 6                    ; DATA XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+25Fo
.text:00002B58                 dd offset $LN24_1
.text:00002B5C $LN24_1         dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:00002B58o
.text:00002B64                 dd offset $LN17_0       ; "enumerator"
.text:00002B68                 dd 0FFFFFFC0h, 18h
.text:00002B70                 dd offset $LN18_0       ; "si"
.text:00002B74                 dd 0FFFFFFB7h, 1
.text:00002B7C                 dd offset $LN19         ; "found"
.text:00002B80                 dd 0FFFFFFA0h, 0Ch
.text:00002B88                 dd offset $LN20         ; "addArchivePrefixNew"
.text:00002B8C                 dd 0FFFFFF8Ch, 0Ch
.text:00002B94                 dd offset $LN21_0       ; "reducedName"
.text:00002B98                 dd 0FFFFFF4Ch, 38h
.text:00002BA0                 dd offset $LN22_0
.text:00002BA4 $LN22_0         dd 326966h              ; DATA XREF: .text:00002BA0o
.text:00002BA8 $LN21_0         db 'reducedName',0      ; DATA XREF: .text:00002B94o
.text:00002BB4 $LN20           db 'addArchivePrefixNew',0 ; DATA XREF: .text:00002B88o
.text:00002BC8 $LN19           db 'found',0            ; DATA XREF: .text:00002B7Co
.text:00002BCE $LN18_0         db 'si',0               ; DATA XREF: .text:00002B70o
.text:00002BD1 $LN17_0         db 'enumerator',0       ; DATA XREF: .text:00002B64o
.text:00002BDC                 db 0Ch dup(0CCh)
.text:00002BE8
.text:00002BE8 ; =============== S U B R O U T I N E =======================================
.text:00002BE8
.text:00002BE8 ; Attributes: bp-based frame
.text:00002BE8
.text:00002BE8 ; int __stdcall EnumerateForItem(NWindows::NFile::NFind::CFileInfoBase *, NWildcard::CCensorNode *, int, int, struct UString *, int, CDirItems *, char)
.text:00002BE8 ?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z proc near
.text:00002BE8                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+DA1p
.text:00002BE8                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+FF9p
.text:00002BE8
.text:00002BE8 var_BC          = dword ptr -0BCh
.text:00002BE8 var_B8          = dword ptr -0B8h
.text:00002BE8 var_B4          = dword ptr -0B4h
.text:00002BE8 var_B0          = dword ptr -0B0h
.text:00002BE8 var_AC          = dword ptr -0ACh
.text:00002BE8 var_A8          = dword ptr -0A8h
.text:00002BE8 var_A4          = dword ptr -0A4h
.text:00002BE8 var_A0          = dword ptr -0A0h
.text:00002BE8 var_9C          = dword ptr -9Ch
.text:00002BE8 var_98          = dword ptr -98h
.text:00002BE8 var_94          = byte ptr -94h
.text:00002BE8 var_88          = dword ptr -88h
.text:00002BE8 var_84          = byte ptr -84h
.text:00002BE8 var_78          = dword ptr -78h
.text:00002BE8 var_74          = dword ptr -74h
.text:00002BE8 var_70          = dword ptr -70h
.text:00002BE8 var_6C          = dword ptr -6Ch
.text:00002BE8 var_68          = dword ptr -68h
.text:00002BE8 var_64          = dword ptr -64h
.text:00002BE8 var_60          = dword ptr -60h
.text:00002BE8 var_58          = dword ptr -58h
.text:00002BE8 var_50          = dword ptr -50h
.text:00002BE8 var_48          = byte ptr -48h
.text:00002BE8 var_34          = dword ptr -34h
.text:00002BE8 var_21          = byte ptr -21h
.text:00002BE8 var_1C          = byte ptr -1Ch
.text:00002BE8 var_C           = dword ptr -0Ch
.text:00002BE8 var_4           = dword ptr -4
.text:00002BE8 arg_0           = dword ptr  8
.text:00002BE8 arg_4           = dword ptr  0Ch
.text:00002BE8 arg_8           = dword ptr  10h
.text:00002BE8 arg_C           = dword ptr  14h
.text:00002BE8 arg_10          = dword ptr  18h
.text:00002BE8 arg_14          = dword ptr  1Ch
.text:00002BE8 arg_18          = dword ptr  20h
.text:00002BE8 arg_1C          = byte ptr  24h
.text:00002BE8
.text:00002BE8                 push    ebp
.text:00002BE9                 mov     ebp, esp
.text:00002BEB                 push    0FFFFFFFFh
.text:00002BED                 push    offset __ehhandler$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z
.text:00002BF2                 mov     eax, large fs:0
.text:00002BF8                 push    eax
.text:00002BF9                 sub     esp, 0B0h
.text:00002BFF                 push    edi
.text:00002C00                 lea     edi, [ebp+var_BC]
.text:00002C06                 mov     ecx, 2Ch ; ','
.text:00002C0B                 mov     eax, 0CCCCCCCCh
.text:00002C10                 rep stosd
.text:00002C12                 mov     eax, dword ptr ds:___security_cookie
.text:00002C17                 xor     eax, ebp
.text:00002C19                 push    eax
.text:00002C1A                 lea     eax, [ebp+var_C]
.text:00002C1D                 mov     large fs:0, eax
.text:00002C23                 mov     eax, [ebp+arg_0]
.text:00002C26                 add     eax, 28h ; '('
.text:00002C29                 push    eax
.text:00002C2A                 lea     ecx, [ebp+var_1C]
.text:00002C2D                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00002C32                 mov     [ebp+var_4], 0
.text:00002C39                 mov     cl, [ebp+arg_1C]
.text:00002C3C                 mov     [ebp+var_21], cl
.text:00002C3F                 mov     edx, [ebp+arg_14]
.text:00002C42                 push    edx
.text:00002C43                 lea     ecx, [ebp+var_34]
.text:00002C46                 call    ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ; CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)
.text:00002C4B                 mov     byte ptr [ebp+var_4], 1
.text:00002C4F                 lea     eax, [ebp+var_1C]
.text:00002C52                 push    eax
.text:00002C53                 lea     ecx, [ebp+var_34]
.text:00002C56                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00002C5B                 lea     ecx, [ebp+var_34]
.text:00002C5E                 push    ecx
.text:00002C5F                 lea     ecx, [ebp+var_48]
.text:00002C62                 call    ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ; CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)
.text:00002C67                 mov     byte ptr [ebp+var_4], 2
.text:00002C6B                 mov     ecx, [ebp+arg_0] ; this
.text:00002C6E                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00002C73                 movzx   edx, al
.text:00002C76                 test    edx, edx
.text:00002C78                 setz    al
.text:00002C7B                 movzx   ecx, al
.text:00002C7E                 push    ecx
.text:00002C7F                 lea     edx, [ebp+var_48]
.text:00002C82                 push    edx
.text:00002C83                 push    0
.text:00002C85                 mov     ecx, [ebp+arg_4]
.text:00002C88                 call    ?CheckPathToRoot@CCensorNode@NWildcard@@QBE_N_NAAV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathToRoot(bool,CObjectVector<UString> &,bool)
.text:00002C8D                 movzx   eax, al
.text:00002C90                 test    eax, eax
.text:00002C92                 jz      short loc_2CCA
.text:00002C94                 mov     [ebp+var_78], 0
.text:00002C9B                 mov     byte ptr [ebp+var_4], 1
.text:00002C9F                 lea     ecx, [ebp+var_48]
.text:00002CA2                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002CA7                 mov     byte ptr [ebp+var_4], 0
.text:00002CAB                 lea     ecx, [ebp+var_34]
.text:00002CAE                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002CB3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002CBA                 lea     ecx, [ebp+var_1C] ; this
.text:00002CBD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002CC2                 mov     eax, [ebp+var_78]
.text:00002CC5                 jmp     loc_305C
.text:00002CCA ; ---------------------------------------------------------------------------
.text:00002CCA
.text:00002CCA loc_2CCA:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+AAj
.text:00002CCA                 mov     byte ptr [ebp+var_4], 1
.text:00002CCE                 lea     ecx, [ebp+var_48]
.text:00002CD1                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002CD6                 mov     [ebp+var_50], 0FFFFFFFFh
.text:00002CDD                 mov     ecx, [ebp+arg_0] ; this
.text:00002CE0                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00002CE5                 movzx   ecx, al
.text:00002CE8                 test    ecx, ecx
.text:00002CEA                 setz    dl
.text:00002CED                 movzx   eax, dl
.text:00002CF0                 push    eax
.text:00002CF1                 lea     ecx, [ebp+var_34]
.text:00002CF4                 push    ecx
.text:00002CF5                 push    1
.text:00002CF7                 mov     ecx, [ebp+arg_4]
.text:00002CFA                 call    ?CheckPathToRoot@CCensorNode@NWildcard@@QBE_N_NAAV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathToRoot(bool,CObjectVector<UString> &,bool)
.text:00002CFF                 movzx   edx, al
.text:00002D02                 test    edx, edx
.text:00002D04                 jz      loc_2DE3
.text:00002D0A                 mov     [ebp+var_58], 0FFFFFFFFh
.text:00002D11                 mov     eax, [ebp+arg_18]
.text:00002D14                 movzx   ecx, byte ptr [eax+95h]
.text:00002D1B                 test    ecx, ecx
.text:00002D1D                 jz      loc_2DAA
.text:00002D23                 lea     edx, [ebp+var_58]
.text:00002D26                 push    edx             ; int *
.text:00002D27                 mov     eax, [ebp+arg_0]
.text:00002D2A                 add     eax, 28h ; '('
.text:00002D2D                 push    eax
.text:00002D2E                 mov     ecx, [ebp+arg_10]
.text:00002D31                 push    ecx
.text:00002D32                 lea     edx, [ebp+var_84]
.text:00002D38                 push    edx
.text:00002D39                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00002D3E                 mov     [ebp+var_B0], eax
.text:00002D44                 mov     eax, [ebp+var_B0]
.text:00002D4A                 mov     [ebp+var_B4], eax
.text:00002D50                 mov     byte ptr [ebp+var_4], 3
.text:00002D54                 mov     ecx, [ebp+var_B4]
.text:00002D5A                 push    ecx             ; struct UString *
.text:00002D5B                 mov     ecx, [ebp+arg_18] ; this
.text:00002D5E                 call    ?AddSecurityItem@CDirItems@@QAEJABVUString@@AAH@Z ; CDirItems::AddSecurityItem(UString const &,int &)
.text:00002D63                 mov     [ebp+var_60], eax
.text:00002D66                 mov     byte ptr [ebp+var_4], 1
.text:00002D6A                 lea     ecx, [ebp+var_84] ; this
.text:00002D70                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002D75                 cmp     [ebp+var_60], 0
.text:00002D79                 jz      short loc_2DAA
.text:00002D7B                 mov     edx, [ebp+var_60]
.text:00002D7E                 mov     [ebp+var_88], edx
.text:00002D84                 mov     byte ptr [ebp+var_4], 0
.text:00002D88                 lea     ecx, [ebp+var_34]
.text:00002D8B                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002D90                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002D97                 lea     ecx, [ebp+var_1C] ; this
.text:00002D9A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002D9F                 mov     eax, [ebp+var_88]
.text:00002DA5                 jmp     loc_305C
.text:00002DAA ; ---------------------------------------------------------------------------
.text:00002DAA
.text:00002DAA loc_2DAA:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+135j
.text:00002DAA                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+191j
.text:00002DAA                 mov     ecx, [ebp+arg_18]
.text:00002DAD                 add     ecx, 24h ; '$'
.text:00002DB0                 call    ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ; CObjectVector<CDirItem>::Size(void)
.text:00002DB5                 mov     [ebp+var_50], eax
.text:00002DB8                 mov     eax, [ebp+arg_0]
.text:00002DBB                 push    eax             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00002DBC                 mov     ecx, [ebp+var_58]
.text:00002DBF                 push    ecx             ; int
.text:00002DC0                 mov     edx, [ebp+arg_C]
.text:00002DC3                 push    edx             ; int
.text:00002DC4                 mov     eax, [ebp+arg_8]
.text:00002DC7                 push    eax             ; int
.text:00002DC8                 mov     ecx, [ebp+arg_18] ; this
.text:00002DCB                 call    ?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z ; CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)
.text:00002DD0                 mov     ecx, [ebp+arg_0] ; this
.text:00002DD3                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00002DD8                 movzx   ecx, al
.text:00002DDB                 test    ecx, ecx
.text:00002DDD                 jz      short loc_2DE3
.text:00002DDF                 mov     [ebp+var_21], 1
.text:00002DE3
.text:00002DE3 loc_2DE3:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+11Cj
.text:00002DE3                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+1F5j
.text:00002DE3                 mov     edx, [ebp+arg_18]
.text:00002DE6                 movzx   eax, byte ptr [edx+31h]
.text:00002DEA                 test    eax, eax
.text:00002DEC                 jz      loc_2E8A
.text:00002DF2                 mov     ecx, [ebp+arg_18]
.text:00002DF5                 push    ecx             ; CDirItems *
.text:00002DF6                 lea     edx, [ebp+var_34]
.text:00002DF9                 push    edx             ; int
.text:00002DFA                 mov     eax, [ebp+arg_0]
.text:00002DFD                 add     eax, 28h ; '('
.text:00002E00                 push    eax
.text:00002E01                 mov     ecx, [ebp+arg_10]
.text:00002E04                 push    ecx
.text:00002E05                 lea     edx, [ebp+var_94]
.text:00002E0B                 push    edx
.text:00002E0C                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00002E11                 mov     [ebp+var_B8], eax
.text:00002E17                 mov     eax, [ebp+var_B8]
.text:00002E1D                 mov     [ebp+var_BC], eax
.text:00002E23                 mov     byte ptr [ebp+var_4], 4
.text:00002E27                 mov     ecx, [ebp+var_BC]
.text:00002E2D                 push    ecx             ; struct UString *
.text:00002E2E                 mov     edx, [ebp+arg_C]
.text:00002E31                 push    edx             ; int
.text:00002E32                 mov     eax, [ebp+arg_8]
.text:00002E35                 push    eax             ; int
.text:00002E36                 mov     ecx, [ebp+arg_4]
.text:00002E39                 push    ecx             ; int
.text:00002E3A                 mov     edx, [ebp+arg_0]
.text:00002E3D                 push    edx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00002E3E                 call    ?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z ; EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)
.text:00002E43                 mov     [ebp+var_64], eax
.text:00002E46                 mov     byte ptr [ebp+var_4], 1
.text:00002E4A                 lea     ecx, [ebp+var_94] ; this
.text:00002E50                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002E55                 cmp     [ebp+var_64], 0
.text:00002E59                 jz      short loc_2E8A
.text:00002E5B                 mov     eax, [ebp+var_64]
.text:00002E5E                 mov     [ebp+var_98], eax
.text:00002E64                 mov     byte ptr [ebp+var_4], 0
.text:00002E68                 lea     ecx, [ebp+var_34]
.text:00002E6B                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002E70                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002E77                 lea     ecx, [ebp+var_1C] ; this
.text:00002E7A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002E7F                 mov     eax, [ebp+var_98]
.text:00002E85                 jmp     loc_305C
.text:00002E8A ; ---------------------------------------------------------------------------
.text:00002E8A
.text:00002E8A loc_2E8A:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+204j
.text:00002E8A                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+271j
.text:00002E8A                 cmp     [ebp+var_50], 0
.text:00002E8E                 jl      loc_2F31
.text:00002E94                 mov     ecx, [ebp+var_50]
.text:00002E97                 push    ecx
.text:00002E98                 mov     ecx, [ebp+arg_18]
.text:00002E9B                 add     ecx, 24h ; '$'
.text:00002E9E                 call    ??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:00002EA3                 mov     [ebp+var_68], eax
.text:00002EA6                 mov     edx, [ebp+arg_10]
.text:00002EA9                 push    edx             ; struct UString *
.text:00002EAA                 mov     eax, [ebp+arg_0]
.text:00002EAD                 push    eax             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00002EAE                 mov     ecx, [ebp+var_68]
.text:00002EB1                 push    ecx             ; struct CDirItem *
.text:00002EB2                 mov     ecx, [ebp+arg_18] ; this
.text:00002EB5                 call    ?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z ; CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)
.text:00002EBA                 mov     [ebp+var_6C], eax
.text:00002EBD                 cmp     [ebp+var_6C], 0
.text:00002EC1                 jz      short loc_2EF2
.text:00002EC3                 mov     edx, [ebp+var_6C]
.text:00002EC6                 mov     [ebp+var_9C], edx
.text:00002ECC                 mov     byte ptr [ebp+var_4], 0
.text:00002ED0                 lea     ecx, [ebp+var_34]
.text:00002ED3                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002ED8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002EDF                 lea     ecx, [ebp+var_1C] ; this
.text:00002EE2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002EE7                 mov     eax, [ebp+var_9C]
.text:00002EED                 jmp     loc_305C
.text:00002EF2 ; ---------------------------------------------------------------------------
.text:00002EF2
.text:00002EF2 loc_2EF2:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+2D9j
.text:00002EF2                 mov     ecx, [ebp+var_68]
.text:00002EF5                 add     ecx, 2Ch ; ','
.text:00002EF8                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00002EFD                 test    eax, eax
.text:00002EFF                 jz      short loc_2F31
.text:00002F01                 mov     [ebp+var_A0], 0
.text:00002F0B                 mov     byte ptr [ebp+var_4], 0
.text:00002F0F                 lea     ecx, [ebp+var_34]
.text:00002F12                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002F17                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F1E                 lea     ecx, [ebp+var_1C] ; this
.text:00002F21                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002F26                 mov     eax, [ebp+var_A0]
.text:00002F2C                 jmp     loc_305C
.text:00002F31 ; ---------------------------------------------------------------------------
.text:00002F31
.text:00002F31 loc_2F31:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+2A6j
.text:00002F31                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+317j
.text:00002F31                 mov     ecx, [ebp+arg_0] ; this
.text:00002F34                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00002F39                 movzx   eax, al
.text:00002F3C                 test    eax, eax
.text:00002F3E                 jnz     short loc_2F70
.text:00002F40                 mov     [ebp+var_A4], 0
.text:00002F4A                 mov     byte ptr [ebp+var_4], 0
.text:00002F4E                 lea     ecx, [ebp+var_34]
.text:00002F51                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002F56                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F5D                 lea     ecx, [ebp+var_1C] ; this
.text:00002F60                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002F65                 mov     eax, [ebp+var_A4]
.text:00002F6B                 jmp     loc_305C
.text:00002F70 ; ---------------------------------------------------------------------------
.text:00002F70
.text:00002F70 loc_2F70:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+356j
.text:00002F70                 mov     [ebp+var_70], 0
.text:00002F77                 mov     ecx, [ebp+arg_14]
.text:00002F7A                 call    ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty(void)
.text:00002F7F                 movzx   ecx, al
.text:00002F82                 test    ecx, ecx
.text:00002F84                 jz      short loc_2FAD
.text:00002F86                 lea     edx, [ebp+var_1C]
.text:00002F89                 push    edx             ; struct UString *
.text:00002F8A                 mov     ecx, [ebp+arg_4] ; this
.text:00002F8D                 call    ?FindSubNode@CCensorNode@NWildcard@@QBEHABVUString@@@Z ; NWildcard::CCensorNode::FindSubNode(UString const &)
.text:00002F92                 mov     [ebp+var_74], eax
.text:00002F95                 cmp     [ebp+var_74], 0
.text:00002F99                 jl      short loc_2FAD
.text:00002F9B                 mov     eax, [ebp+var_74]
.text:00002F9E                 push    eax
.text:00002F9F                 mov     ecx, [ebp+arg_4]
.text:00002FA2                 add     ecx, 10h
.text:00002FA5                 call    ??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[](uint)
.text:00002FAA                 mov     [ebp+var_70], eax
.text:00002FAD
.text:00002FAD loc_2FAD:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+39Cj
.text:00002FAD                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+3B1j
.text:00002FAD                 movzx   ecx, [ebp+var_21]
.text:00002FB1                 test    ecx, ecx
.text:00002FB3                 jnz     short loc_2FE8
.text:00002FB5                 cmp     [ebp+var_70], 0
.text:00002FB9                 jnz     short loc_2FE8
.text:00002FBB                 mov     [ebp+var_A8], 0
.text:00002FC5                 mov     byte ptr [ebp+var_4], 0
.text:00002FC9                 lea     ecx, [ebp+var_34]
.text:00002FCC                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002FD1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002FD8                 lea     ecx, [ebp+var_1C] ; this
.text:00002FDB                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002FE0                 mov     eax, [ebp+var_A8]
.text:00002FE6                 jmp     short loc_305C
.text:00002FE8 ; ---------------------------------------------------------------------------
.text:00002FE8
.text:00002FE8 loc_2FE8:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+3CBj
.text:00002FE8                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+3D1j
.text:00002FE8                 mov     edx, [ebp+arg_14]
.text:00002FEB                 push    edx
.text:00002FEC                 lea     ecx, [ebp+var_34]
.text:00002FEF                 call    ??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ; CObjectVector<UString>::operator=(CObjectVector<UString> const &)
.text:00002FF4                 cmp     [ebp+var_70], 0
.text:00002FF8                 jnz     short loc_300C
.text:00002FFA                 mov     eax, [ebp+arg_4]
.text:00002FFD                 mov     [ebp+var_70], eax
.text:00003000                 lea     ecx, [ebp+var_1C]
.text:00003003                 push    ecx
.text:00003004                 lea     ecx, [ebp+var_34]
.text:00003007                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:0000300C
.text:0000300C loc_300C:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+410j
.text:0000300C                 movzx   edx, [ebp+var_21]
.text:00003010                 push    edx             ; char
.text:00003011                 mov     eax, [ebp+arg_18]
.text:00003014                 push    eax             ; CDirItems *
.text:00003015                 lea     ecx, [ebp+var_34]
.text:00003018                 push    ecx             ; int
.text:00003019                 mov     edx, [ebp+arg_10]
.text:0000301C                 push    edx             ; int
.text:0000301D                 mov     eax, [ebp+arg_0]
.text:00003020                 add     eax, 28h ; '('
.text:00003023                 push    eax             ; int
.text:00003024                 mov     ecx, [ebp+arg_C]
.text:00003027                 push    ecx             ; int
.text:00003028                 mov     edx, [ebp+arg_8]
.text:0000302B                 push    edx             ; int
.text:0000302C                 mov     eax, [ebp+var_70]
.text:0000302F                 push    eax             ; NWildcard::CCensorNode *
.text:00003030                 call    ?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z ; EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)
.text:00003035                 mov     [ebp+var_AC], eax
.text:0000303B                 mov     byte ptr [ebp+var_4], 0
.text:0000303F                 lea     ecx, [ebp+var_34]
.text:00003042                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00003047                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000304E                 lea     ecx, [ebp+var_1C] ; this
.text:00003051                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003056                 mov     eax, [ebp+var_AC]
.text:0000305C
.text:0000305C loc_305C:                               ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+DDj
.text:0000305C                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+1BDj ...
.text:0000305C                 push    edx
.text:0000305D                 mov     ecx, ebp
.text:0000305F                 push    eax
.text:00003060                 lea     edx, $LN29
.text:00003066                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000306B                 pop     eax
.text:0000306C                 pop     edx
.text:0000306D                 mov     ecx, [ebp+var_C]
.text:00003070                 mov     large fs:0, ecx
.text:00003077                 pop     ecx
.text:00003078                 pop     edi
.text:00003079                 add     esp, 0BCh
.text:0000307F                 cmp     ebp, esp
.text:00003081                 call    __RTC_CheckEsp
.text:00003086                 mov     esp, ebp
.text:00003088                 pop     ebp
.text:00003089                 retn    20h
.text:00003089 ?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z endp
.text:00003089
.text:00003089 ; ---------------------------------------------------------------------------
.text:0000308C $LN29           dd 4                    ; DATA XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+478o
.text:00003090                 dd offset $LN28_1
.text:00003094 $LN28_1         dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:00003090o
.text:0000309C                 dd offset $LN23_0       ; "name"
.text:000030A0                 db 0CCh
.text:000030A1                 db 3 dup(0FFh)
.text:000030A4                 dd 0Ch
.text:000030A8                 dd offset $LN24_2       ; "addArchivePrefixNew"
.text:000030AC                 dd 0FFFFFFB8h, 0Ch
.text:000030B4                 dd offset $LN25_2       ; "addArchivePrefixNewTemp"
.text:000030B8                 dd 0FFFFFFA8h, 4
.text:000030C0                 dd offset $LN26_0       ; "secureIndex"
.text:000030C4 $LN26_0         db 'secureIndex',0      ; DATA XREF: .text:000030C0o
.text:000030D0 $LN25_2         db 'addArchivePrefixNewTemp',0 ; DATA XREF: .text:000030B4o
.text:000030E8 $LN24_2         db 'addArchivePrefixNew',0 ; DATA XREF: .text:000030A8o
.text:000030FC $LN23_0         db 'name',0             ; DATA XREF: .text:0000309Co
.text:00003101                 align 8
.text:00003108
.text:00003108 ; =============== S U B R O U T I N E =======================================
.text:00003108
.text:00003108 ; Attributes: bp-based frame
.text:00003108
.text:00003108 ; bool __stdcall CanUseFsDirect(class NWildcard::CCensorNode const &)
.text:00003108 ?CanUseFsDirect@@YG_NABVCCensorNode@NWildcard@@@Z proc near
.text:00003108                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+96p
.text:00003108
.text:00003108 var_C           = dword ptr -0Ch
.text:00003108 var_8           = dword ptr -8
.text:00003108 var_4           = dword ptr -4
.text:00003108 arg_0           = dword ptr  8
.text:00003108
.text:00003108                 push    ebp
.text:00003109                 mov     ebp, esp
.text:0000310B                 sub     esp, 0Ch
.text:0000310E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00003115                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000311C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003123                 mov     [ebp+var_4], 0
.text:0000312A                 jmp     short loc_3135
.text:0000312C ; ---------------------------------------------------------------------------
.text:0000312C
.text:0000312C loc_312C:                               ; CODE XREF: CanUseFsDirect(NWildcard::CCensorNode const &):loc_3192j
.text:0000312C                 mov     eax, [ebp+var_4]
.text:0000312F                 add     eax, 1
.text:00003132                 mov     [ebp+var_4], eax
.text:00003135
.text:00003135 loc_3135:                               ; CODE XREF: CanUseFsDirect(NWildcard::CCensorNode const &)+22j
.text:00003135                 mov     ecx, [ebp+arg_0]
.text:00003138                 add     ecx, 1Ch
.text:0000313B                 call    ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size(void)
.text:00003140                 cmp     [ebp+var_4], eax
.text:00003143                 jnb     short loc_3194
.text:00003145                 mov     ecx, [ebp+var_4]
.text:00003148                 push    ecx
.text:00003149                 mov     ecx, [ebp+arg_0]
.text:0000314C                 add     ecx, 1Ch
.text:0000314F                 call    ??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[](uint)
.text:00003154                 mov     [ebp+var_8], eax
.text:00003157                 mov     edx, [ebp+var_8]
.text:0000315A                 movzx   eax, byte ptr [edx+0Ch]
.text:0000315E                 test    eax, eax
.text:00003160                 jnz     short loc_316F
.text:00003162                 mov     ecx, [ebp+var_8]
.text:00003165                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:0000316A                 cmp     eax, 1
.text:0000316D                 jz      short loc_3173
.text:0000316F
.text:0000316F loc_316F:                               ; CODE XREF: CanUseFsDirect(NWildcard::CCensorNode const &)+58j
.text:0000316F                 xor     al, al
.text:00003171                 jmp     short loc_3196
.text:00003173 ; ---------------------------------------------------------------------------
.text:00003173
.text:00003173 loc_3173:                               ; CODE XREF: CanUseFsDirect(NWildcard::CCensorNode const &)+65j
.text:00003173                 mov     ecx, [ebp+var_8]
.text:00003176                 call    ?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front(void)
.text:0000317B                 mov     [ebp+var_C], eax
.text:0000317E                 mov     ecx, [ebp+var_C]
.text:00003181                 push    ecx             ; struct UString *
.text:00003182                 call    ?DoesNameContainWildcard@@YG_NABVUString@@@Z ; DoesNameContainWildcard(UString const &)
.text:00003187                 movzx   edx, al
.text:0000318A                 test    edx, edx
.text:0000318C                 jz      short loc_3192
.text:0000318E                 xor     al, al
.text:00003190                 jmp     short loc_3196
.text:00003192 ; ---------------------------------------------------------------------------
.text:00003192
.text:00003192 loc_3192:                               ; CODE XREF: CanUseFsDirect(NWildcard::CCensorNode const &)+84j
.text:00003192                 jmp     short loc_312C
.text:00003194 ; ---------------------------------------------------------------------------
.text:00003194
.text:00003194 loc_3194:                               ; CODE XREF: CanUseFsDirect(NWildcard::CCensorNode const &)+3Bj
.text:00003194                 mov     al, 1
.text:00003196
.text:00003196 loc_3196:                               ; CODE XREF: CanUseFsDirect(NWildcard::CCensorNode const &)+69j
.text:00003196                                         ; CanUseFsDirect(NWildcard::CCensorNode const &)+88j
.text:00003196                 add     esp, 0Ch
.text:00003199                 cmp     ebp, esp
.text:0000319B                 call    __RTC_CheckEsp
.text:000031A0                 mov     esp, ebp
.text:000031A2                 pop     ebp
.text:000031A3                 retn    4
.text:000031A3 ?CanUseFsDirect@@YG_NABVCCensorNode@NWildcard@@@Z endp
.text:000031A3
.text:000031A3 ; ---------------------------------------------------------------------------
.text:000031A6                 align 4
.text:000031A8
.text:000031A8 ; =============== S U B R O U T I N E =======================================
.text:000031A8
.text:000031A8 ; Attributes: bp-based frame
.text:000031A8
.text:000031A8 ; bool __stdcall IsVirtualFsFolder(class UString const &, class UString const &)
.text:000031A8 ?IsVirtualFsFolder@@YG_NABVUString@@0@Z proc near
.text:000031A8                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+180p
.text:000031A8                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+88Dp
.text:000031A8
.text:000031A8 var_28          = dword ptr -28h
.text:000031A8 var_24          = dword ptr -24h
.text:000031A8 var_20          = dword ptr -20h
.text:000031A8 var_1C          = dword ptr -1Ch
.text:000031A8 var_18          = dword ptr -18h
.text:000031A8 var_14          = dword ptr -14h
.text:000031A8 var_10          = dword ptr -10h
.text:000031A8 var_C           = dword ptr -0Ch
.text:000031A8 var_4           = dword ptr -4
.text:000031A8 arg_0           = dword ptr  8
.text:000031A8 arg_4           = dword ptr  0Ch
.text:000031A8
.text:000031A8                 push    ebp
.text:000031A9                 mov     ebp, esp
.text:000031AB                 push    0FFFFFFFFh
.text:000031AD                 push    offset __ehhandler$?IsVirtualFsFolder@@YG_NABVUString@@0@Z
.text:000031B2                 mov     eax, large fs:0
.text:000031B8                 push    eax
.text:000031B9                 sub     esp, 1Ch
.text:000031BC                 mov     eax, 0CCCCCCCCh
.text:000031C1                 mov     [ebp+var_28], eax
.text:000031C4                 mov     [ebp+var_24], eax
.text:000031C7                 mov     [ebp+var_20], eax
.text:000031CA                 mov     [ebp+var_1C], eax
.text:000031CD                 mov     [ebp+var_18], eax
.text:000031D0                 mov     [ebp+var_14], eax
.text:000031D3                 mov     [ebp+var_10], eax
.text:000031D6                 mov     eax, dword ptr ds:___security_cookie
.text:000031DB                 xor     eax, ebp
.text:000031DD                 push    eax             ; wchar_t *
.text:000031DE                 lea     eax, [ebp+var_C]
.text:000031E1                 mov     large fs:0, eax
.text:000031E7                 mov     eax, [ebp+arg_0]
.text:000031EA                 push    eax
.text:000031EB                 lea     ecx, [ebp+var_1C]
.text:000031EE                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000031F3                 mov     [ebp+var_4], 0
.text:000031FA                 mov     ecx, [ebp+arg_4]
.text:000031FD                 push    ecx
.text:000031FE                 lea     ecx, [ebp+var_1C]
.text:00003201                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00003206                 lea     ecx, [ebp+var_1C] ; this
.text:00003209                 call    ?Add_PathSepar@UString@@QAEXXZ ; UString::Add_PathSepar(void)
.text:0000320E                 lea     ecx, [ebp+var_1C]
.text:00003211                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00003216                 movzx   edx, word ptr [eax]
.text:00003219                 push    edx             ; wchar_t
.text:0000321A                 call    ?IsPathSepar@@YG_N_W@Z ; IsPathSepar(wchar_t)
.text:0000321F                 movzx   eax, al
.text:00003222                 test    eax, eax
.text:00003224                 jz      short loc_3241
.text:00003226                 lea     ecx, [ebp+var_1C]
.text:00003229                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000322E                 push    eax             ; this
.text:0000322F                 call    ?GetRootPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)
.text:00003234                 test    eax, eax
.text:00003236                 jnz     short loc_3241
.text:00003238                 mov     [ebp+var_28], 1
.text:0000323F                 jmp     short loc_3248
.text:00003241 ; ---------------------------------------------------------------------------
.text:00003241
.text:00003241 loc_3241:                               ; CODE XREF: IsVirtualFsFolder(UString const &,UString const &)+7Cj
.text:00003241                                         ; IsVirtualFsFolder(UString const &,UString const &)+8Ej
.text:00003241                 mov     [ebp+var_28], 0
.text:00003248
.text:00003248 loc_3248:                               ; CODE XREF: IsVirtualFsFolder(UString const &,UString const &)+97j
.text:00003248                 mov     cl, byte ptr [ebp+var_28]
.text:0000324B                 mov     byte ptr [ebp+var_24+3], cl
.text:0000324E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003255                 lea     ecx, [ebp+var_1C] ; this
.text:00003258                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000325D                 mov     al, byte ptr [ebp+var_24+3]
.text:00003260                 push    edx
.text:00003261                 mov     ecx, ebp
.text:00003263                 push    eax
.text:00003264                 lea     edx, $LN9_1
.text:0000326A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000326F                 pop     eax
.text:00003270                 pop     edx
.text:00003271                 mov     ecx, [ebp+var_C]
.text:00003274                 mov     large fs:0, ecx
.text:0000327B                 pop     ecx
.text:0000327C                 add     esp, 28h
.text:0000327F                 cmp     ebp, esp
.text:00003281                 call    __RTC_CheckEsp
.text:00003286                 mov     esp, ebp
.text:00003288                 pop     ebp
.text:00003289                 retn    8
.text:00003289 ?IsVirtualFsFolder@@YG_NABVUString@@0@Z endp ; sp-analysis failed
.text:00003289
.text:00003289 ; ---------------------------------------------------------------------------
.text:0000328C $LN9_1          dd 1                    ; DATA XREF: IsVirtualFsFolder(UString const &,UString const &)+BCo
.text:00003290                 dd offset $LN8_1
.text:00003294 $LN8_1          dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:00003290o
.text:0000329C                 dd offset $LN6_0
.text:000032A0 $LN6_0          dd 0CCCC0073h, 0CCCCCCCCh ; DATA XREF: .text:0000329Co
.text:000032A8
.text:000032A8 ; =============== S U B R O U T I N E =======================================
.text:000032A8
.text:000032A8 ; Attributes: bp-based frame
.text:000032A8
.text:000032A8 ; void __thiscall CDirItems::FillFixedReparse(CDirItems *__hidden this)
.text:000032A8                 public ?FillFixedReparse@CDirItems@@QAEXXZ
.text:000032A8 ?FillFixedReparse@CDirItems@@QAEXXZ proc near
.text:000032A8                                         ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+136p
.text:000032A8
.text:000032A8 var_100         = dword ptr -100h
.text:000032A8 var_FC          = dword ptr -0FCh
.text:000032A8 var_F8          = dword ptr -0F8h
.text:000032A8 var_F4          = dword ptr -0F4h
.text:000032A8 var_F0          = byte ptr -0F0h
.text:000032A8 var_E1          = byte ptr -0E1h
.text:000032A8 var_E0          = byte ptr -0E0h
.text:000032A8 var_D1          = byte ptr -0D1h
.text:000032A8 var_CC          = byte ptr -0CCh
.text:000032A8 var_BC          = byte ptr -0BCh
.text:000032A8 var_AC          = dword ptr -0ACh
.text:000032A8 var_A4          = byte ptr -0A4h
.text:000032A8 var_90          = byte ptr -90h
.text:000032A8 var_7C          = byte ptr -7Ch
.text:000032A8 var_68          = word ptr -68h
.text:000032A8 var_54          = word ptr -54h
.text:000032A8 var_44          = dword ptr -44h
.text:000032A8 var_3C          = byte ptr -3Ch
.text:000032A8 var_18          = dword ptr -18h
.text:000032A8 var_14          = dword ptr -14h
.text:000032A8 var_10          = dword ptr -10h
.text:000032A8 var_C           = dword ptr -0Ch
.text:000032A8 var_4           = dword ptr -4
.text:000032A8
.text:000032A8                 push    ebp
.text:000032A9                 mov     ebp, esp
.text:000032AB                 push    0FFFFFFFFh
.text:000032AD                 push    offset __ehhandler$?FillFixedReparse@CDirItems@@QAEXXZ
.text:000032B2                 mov     eax, large fs:0
.text:000032B8                 push    eax
.text:000032B9                 sub     esp, 0F4h
.text:000032BF                 push    esi
.text:000032C0                 push    edi
.text:000032C1                 push    ecx
.text:000032C2                 lea     edi, [ebp+var_100]
.text:000032C8                 mov     ecx, 3Dh ; '='
.text:000032CD                 mov     eax, 0CCCCCCCCh
.text:000032D2                 rep stosd
.text:000032D4                 pop     ecx
.text:000032D5                 mov     eax, dword ptr ds:___security_cookie
.text:000032DA                 xor     eax, ebp
.text:000032DC                 push    eax             ; wchar_t *
.text:000032DD                 lea     eax, [ebp+var_C]
.text:000032E0                 mov     large fs:0, eax
.text:000032E6                 mov     [ebp+var_10], ecx
.text:000032E9                 mov     eax, [ebp+var_10]
.text:000032EC                 movzx   ecx, byte ptr [eax+30h]
.text:000032F0                 test    ecx, ecx
.text:000032F2                 jnz     short loc_32F9
.text:000032F4                 jmp     loc_39B7
.text:000032F9 ; ---------------------------------------------------------------------------
.text:000032F9
.text:000032F9 loc_32F9:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+4Aj
.text:000032F9                 mov     [ebp+var_14], 0
.text:00003300                 jmp     short loc_330B
.text:00003302 ; ---------------------------------------------------------------------------
.text:00003302
.text:00003302 loc_3302:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+98j
.text:00003302                                         ; CDirItems::FillFixedReparse(void)+DFj ...
.text:00003302                 mov     edx, [ebp+var_14]
.text:00003305                 add     edx, 1
.text:00003308                 mov     [ebp+var_14], edx
.text:0000330B
.text:0000330B loc_330B:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+58j
.text:0000330B                 mov     ecx, [ebp+var_10]
.text:0000330E                 add     ecx, 24h ; '$'
.text:00003311                 call    ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ; CObjectVector<CDirItem>::Size(void)
.text:00003316                 cmp     [ebp+var_14], eax
.text:00003319                 jnb     loc_39B7
.text:0000331F                 mov     eax, [ebp+var_14]
.text:00003322                 push    eax
.text:00003323                 mov     ecx, [ebp+var_10]
.text:00003326                 add     ecx, 24h ; '$'
.text:00003329                 call    ??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:0000332E                 mov     [ebp+var_18], eax
.text:00003331                 mov     ecx, [ebp+var_18]
.text:00003334                 add     ecx, 2Ch ; ','
.text:00003337                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000333C                 test    eax, eax
.text:0000333E                 jnz     short loc_3342
.text:00003340                 jmp     short loc_3302
.text:00003342 ; ---------------------------------------------------------------------------
.text:00003342
.text:00003342 loc_3342:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+96j
.text:00003342                 lea     ecx, [ebp+var_3C] ; this
.text:00003345                 call    ??0CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::CReparseAttr(void)
.text:0000334A                 mov     [ebp+var_4], 0
.text:00003351                 mov     ecx, [ebp+var_18]
.text:00003354                 add     ecx, 2Ch ; ','
.text:00003357                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000335C                 push    eax             ; unsigned int
.text:0000335D                 mov     ecx, [ebp+var_18]
.text:00003360                 add     ecx, 2Ch ; ','
.text:00003363                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00003368                 push    eax             ; unsigned __int8 *
.text:00003369                 lea     ecx, [ebp+var_3C] ; this
.text:0000336C                 call    ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)
.text:00003371                 movzx   ecx, al
.text:00003374                 test    ecx, ecx
.text:00003376                 jnz     short loc_338C
.text:00003378                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000337F                 lea     ecx, [ebp+var_3C] ; this
.text:00003382                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00003387                 jmp     loc_3302
.text:0000338C ; ---------------------------------------------------------------------------
.text:0000338C
.text:0000338C loc_338C:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+CEj
.text:0000338C                 lea     ecx, [ebp+var_3C] ; this
.text:0000338F                 call    ?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsRelative(void)
.text:00003394                 movzx   edx, al
.text:00003397                 test    edx, edx
.text:00003399                 jz      short loc_33AF
.text:0000339B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000033A2                 lea     ecx, [ebp+var_3C] ; this
.text:000033A5                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:000033AA                 jmp     loc_3302
.text:000033AF ; ---------------------------------------------------------------------------
.text:000033AF
.text:000033AF loc_33AF:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+F1j
.text:000033AF                 lea     eax, [ebp+var_54]
.text:000033B2                 push    eax             ; wchar_t *
.text:000033B3                 lea     ecx, [ebp+var_3C]
.text:000033B6                 call    ?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ ; NWindows::NFile::CReparseAttr::GetPath(void)
.text:000033BB                 mov     byte ptr [ebp+var_4], 1
.text:000033BF                 lea     ecx, [ebp+var_54]
.text:000033C2                 mov     [ebp+var_44], ecx
.text:000033C5                 mov     ecx, [ebp+var_44]
.text:000033C8                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000033CD                 push    eax             ; struct UString *
.text:000033CE                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:000033D3                 movzx   edx, al
.text:000033D6                 test    edx, edx
.text:000033D8                 jnz     short loc_33FA
.text:000033DA                 mov     byte ptr [ebp+var_4], 0
.text:000033DE                 lea     ecx, [ebp+var_54] ; this
.text:000033E1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000033E6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000033ED                 lea     ecx, [ebp+var_3C] ; this
.text:000033F0                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:000033F5                 jmp     loc_3302
.text:000033FA ; ---------------------------------------------------------------------------
.text:000033FA
.text:000033FA loc_33FA:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+130j
.text:000033FA                 lea     ecx, [ebp+var_68]
.text:000033FD                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00003402                 mov     byte ptr [ebp+var_4], 2
.text:00003406                 lea     eax, [ebp+var_68]
.text:00003409                 push    eax             ; wchar_t *
.text:0000340A                 mov     ecx, [ebp+var_14]
.text:0000340D                 push    ecx
.text:0000340E                 lea     edx, [ebp+var_E0]
.text:00003414                 push    edx
.text:00003415                 mov     ecx, [ebp+var_10]
.text:00003418                 call    ?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetPhyPath(uint)
.text:0000341D                 mov     [ebp+var_F4], eax
.text:00003423                 mov     eax, [ebp+var_F4]
.text:00003429                 mov     [ebp+var_F8], eax
.text:0000342F                 mov     byte ptr [ebp+var_4], 3
.text:00003433                 mov     ecx, [ebp+var_F8]
.text:00003439                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000343E                 push    eax             ; wchar_t *
.text:0000343F                 call    ?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z ; NWindows::NFile::NDir::MyGetFullPathName(wchar_t const *,UString &)
.text:00003444                 movzx   ecx, al
.text:00003447                 neg     ecx
.text:00003449                 sbb     ecx, ecx
.text:0000344B                 add     ecx, 1
.text:0000344E                 mov     [ebp+var_D1], cl
.text:00003454                 mov     byte ptr [ebp+var_4], 2
.text:00003458                 lea     ecx, [ebp+var_E0] ; this
.text:0000345E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003463                 movzx   edx, [ebp+var_D1]
.text:0000346A                 test    edx, edx
.text:0000346C                 jz      short loc_349A
.text:0000346E                 mov     byte ptr [ebp+var_4], 1
.text:00003472                 lea     ecx, [ebp+var_68] ; this
.text:00003475                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000347A                 mov     byte ptr [ebp+var_4], 0
.text:0000347E                 lea     ecx, [ebp+var_54] ; this
.text:00003481                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003486                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000348D                 lea     ecx, [ebp+var_3C] ; this
.text:00003490                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00003495                 jmp     loc_3302
.text:0000349A ; ---------------------------------------------------------------------------
.text:0000349A
.text:0000349A loc_349A:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+1C4j
.text:0000349A                 lea     eax, [ebp+var_68]
.text:0000349D                 push    eax
.text:0000349E                 lea     ecx, [ebp+var_7C]
.text:000034A1                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000034A6                 mov     byte ptr [ebp+var_4], 4
.text:000034AA                 mov     ecx, [ebp+var_14]
.text:000034AD                 push    ecx
.text:000034AE                 lea     edx, [ebp+var_90]
.text:000034B4                 push    edx
.text:000034B5                 mov     ecx, [ebp+var_10]
.text:000034B8                 call    ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetLogPath(uint)
.text:000034BD                 mov     byte ptr [ebp+var_4], 5
.text:000034C1                 lea     ecx, [ebp+var_90] ; this
.text:000034C7                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000034CC                 mov     esi, eax
.text:000034CE                 lea     ecx, [ebp+var_7C] ; this
.text:000034D1                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000034D6                 cmp     esi, eax
.text:000034D8                 jb      short loc_3521
.text:000034DA                 mov     byte ptr [ebp+var_4], 4
.text:000034DE                 lea     ecx, [ebp+var_90] ; this
.text:000034E4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000034E9                 mov     byte ptr [ebp+var_4], 2
.text:000034ED                 lea     ecx, [ebp+var_7C] ; this
.text:000034F0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000034F5                 mov     byte ptr [ebp+var_4], 1
.text:000034F9                 lea     ecx, [ebp+var_68] ; this
.text:000034FC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003501                 mov     byte ptr [ebp+var_4], 0
.text:00003505                 lea     ecx, [ebp+var_54] ; this
.text:00003508                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000350D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003514                 lea     ecx, [ebp+var_3C] ; this
.text:00003517                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:0000351C                 jmp     loc_3302
.text:00003521 ; ---------------------------------------------------------------------------
.text:00003521
.text:00003521 loc_3521:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+230j
.text:00003521                 lea     ecx, [ebp+var_90] ; this
.text:00003527                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000352C                 push    eax             ; unsigned int
.text:0000352D                 lea     ecx, [ebp+var_7C] ; this
.text:00003530                 call    ?RightPtr@UString@@QBEPB_WI@Z ; UString::RightPtr(uint)
.text:00003535                 push    eax             ; wchar_t *
.text:00003536                 lea     ecx, [ebp+var_90]
.text:0000353C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00003541                 push    eax             ; wchar_t *
.text:00003542                 call    ?CompareFileNames@@YGHPB_W0@Z ; CompareFileNames(wchar_t const *,wchar_t const *)
.text:00003547                 test    eax, eax
.text:00003549                 jz      short loc_3592
.text:0000354B                 mov     byte ptr [ebp+var_4], 4
.text:0000354F                 lea     ecx, [ebp+var_90] ; this
.text:00003555                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000355A                 mov     byte ptr [ebp+var_4], 2
.text:0000355E                 lea     ecx, [ebp+var_7C] ; this
.text:00003561                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003566                 mov     byte ptr [ebp+var_4], 1
.text:0000356A                 lea     ecx, [ebp+var_68] ; this
.text:0000356D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003572                 mov     byte ptr [ebp+var_4], 0
.text:00003576                 lea     ecx, [ebp+var_54] ; this
.text:00003579                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000357E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003585                 lea     ecx, [ebp+var_3C] ; this
.text:00003588                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:0000358D                 jmp     loc_3302
.text:00003592 ; ---------------------------------------------------------------------------
.text:00003592
.text:00003592 loc_3592:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+2A1j
.text:00003592                 lea     ecx, [ebp+var_7C] ; this
.text:00003595                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000359A                 mov     esi, eax
.text:0000359C                 lea     ecx, [ebp+var_90] ; this
.text:000035A2                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000035A7                 sub     esi, eax
.text:000035A9                 push    esi
.text:000035AA                 lea     eax, [ebp+var_A4]
.text:000035B0                 push    eax
.text:000035B1                 lea     ecx, [ebp+var_7C]
.text:000035B4                 call    ?Left@UString@@QBE?AV1@I@Z ; UString::Left(uint)
.text:000035B9                 mov     byte ptr [ebp+var_4], 6
.text:000035BD                 lea     ecx, [ebp+var_A4] ; this
.text:000035C3                 call    ?Back@UString@@QBE_WXZ ; UString::Back(void)
.text:000035C8                 movzx   ecx, ax
.text:000035CB                 push    ecx             ; wchar_t
.text:000035CC                 call    ?IsPathSepar@@YG_N_W@Z ; IsPathSepar(wchar_t)
.text:000035D1                 movzx   edx, al
.text:000035D4                 test    edx, edx
.text:000035D6                 jnz     short loc_362E
.text:000035D8                 mov     byte ptr [ebp+var_4], 5
.text:000035DC                 lea     ecx, [ebp+var_A4] ; this
.text:000035E2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000035E7                 mov     byte ptr [ebp+var_4], 4
.text:000035EB                 lea     ecx, [ebp+var_90] ; this
.text:000035F1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000035F6                 mov     byte ptr [ebp+var_4], 2
.text:000035FA                 lea     ecx, [ebp+var_7C] ; this
.text:000035FD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003602                 mov     byte ptr [ebp+var_4], 1
.text:00003606                 lea     ecx, [ebp+var_68] ; this
.text:00003609                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000360E                 mov     byte ptr [ebp+var_4], 0
.text:00003612                 lea     ecx, [ebp+var_54] ; this
.text:00003615                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000361A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003621                 lea     ecx, [ebp+var_3C] ; this
.text:00003624                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00003629                 jmp     loc_3302
.text:0000362E ; ---------------------------------------------------------------------------
.text:0000362E
.text:0000362E loc_362E:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+32Ej
.text:0000362E                 lea     ecx, [ebp+var_A4]
.text:00003634                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00003639                 push    eax             ; this
.text:0000363A                 call    ?GetRootPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)
.text:0000363F                 mov     [ebp+var_AC], eax
.text:00003645                 cmp     [ebp+var_AC], 0
.text:0000364C                 jnz     short loc_36A4
.text:0000364E                 mov     byte ptr [ebp+var_4], 5
.text:00003652                 lea     ecx, [ebp+var_A4] ; this
.text:00003658                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000365D                 mov     byte ptr [ebp+var_4], 4
.text:00003661                 lea     ecx, [ebp+var_90] ; this
.text:00003667                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000366C                 mov     byte ptr [ebp+var_4], 2
.text:00003670                 lea     ecx, [ebp+var_7C] ; this
.text:00003673                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003678                 mov     byte ptr [ebp+var_4], 1
.text:0000367C                 lea     ecx, [ebp+var_68] ; this
.text:0000367F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003684                 mov     byte ptr [ebp+var_4], 0
.text:00003688                 lea     ecx, [ebp+var_54] ; this
.text:0000368B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003690                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003697                 lea     ecx, [ebp+var_3C] ; this
.text:0000369A                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:0000369F                 jmp     loc_3302
.text:000036A4 ; ---------------------------------------------------------------------------
.text:000036A4
.text:000036A4 loc_36A4:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+3A4j
.text:000036A4                 lea     ecx, [ebp+var_A4] ; this
.text:000036AA                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000036AF                 cmp     [ebp+var_AC], eax
.text:000036B5                 jnz     short loc_370D
.text:000036B7                 mov     byte ptr [ebp+var_4], 5
.text:000036BB                 lea     ecx, [ebp+var_A4] ; this
.text:000036C1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000036C6                 mov     byte ptr [ebp+var_4], 4
.text:000036CA                 lea     ecx, [ebp+var_90] ; this
.text:000036D0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000036D5                 mov     byte ptr [ebp+var_4], 2
.text:000036D9                 lea     ecx, [ebp+var_7C] ; this
.text:000036DC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000036E1                 mov     byte ptr [ebp+var_4], 1
.text:000036E5                 lea     ecx, [ebp+var_68] ; this
.text:000036E8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000036ED                 mov     byte ptr [ebp+var_4], 0
.text:000036F1                 lea     ecx, [ebp+var_54] ; this
.text:000036F4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000036F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003700                 lea     ecx, [ebp+var_3C] ; this
.text:00003703                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00003708                 jmp     loc_3302
.text:0000370D ; ---------------------------------------------------------------------------
.text:0000370D
.text:0000370D loc_370D:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+40Dj
.text:0000370D                 mov     ecx, [ebp+var_44] ; this
.text:00003710                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00003715                 mov     esi, eax
.text:00003717                 lea     ecx, [ebp+var_A4] ; this
.text:0000371D                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00003722                 cmp     esi, eax
.text:00003724                 ja      short loc_377C
.text:00003726                 mov     byte ptr [ebp+var_4], 5
.text:0000372A                 lea     ecx, [ebp+var_A4] ; this
.text:00003730                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003735                 mov     byte ptr [ebp+var_4], 4
.text:00003739                 lea     ecx, [ebp+var_90] ; this
.text:0000373F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003744                 mov     byte ptr [ebp+var_4], 2
.text:00003748                 lea     ecx, [ebp+var_7C] ; this
.text:0000374B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003750                 mov     byte ptr [ebp+var_4], 1
.text:00003754                 lea     ecx, [ebp+var_68] ; this
.text:00003757                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000375C                 mov     byte ptr [ebp+var_4], 0
.text:00003760                 lea     ecx, [ebp+var_54] ; this
.text:00003763                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003768                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000376F                 lea     ecx, [ebp+var_3C] ; this
.text:00003772                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00003777                 jmp     loc_3302
.text:0000377C ; ---------------------------------------------------------------------------
.text:0000377C
.text:0000377C loc_377C:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+47Cj
.text:0000377C                 lea     ecx, [ebp+var_A4]
.text:00003782                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00003787                 push    eax             ; wchar_t *
.text:00003788                 lea     ecx, [ebp+var_A4] ; this
.text:0000378E                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00003793                 push    eax
.text:00003794                 lea     eax, [ebp+var_F0]
.text:0000379A                 push    eax
.text:0000379B                 mov     ecx, [ebp+var_44]
.text:0000379E                 call    ?Left@UString@@QBE?AV1@I@Z ; UString::Left(uint)
.text:000037A3                 mov     [ebp+var_FC], eax
.text:000037A9                 mov     ecx, [ebp+var_FC]
.text:000037AF                 mov     [ebp+var_100], ecx
.text:000037B5                 mov     byte ptr [ebp+var_4], 7
.text:000037B9                 mov     ecx, [ebp+var_100]
.text:000037BF                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000037C4                 push    eax             ; wchar_t *
.text:000037C5                 call    ?CompareFileNames@@YGHPB_W0@Z ; CompareFileNames(wchar_t const *,wchar_t const *)
.text:000037CA                 neg     eax
.text:000037CC                 sbb     eax, eax
.text:000037CE                 neg     eax
.text:000037D0                 mov     [ebp+var_E1], al
.text:000037D6                 mov     byte ptr [ebp+var_4], 6
.text:000037DA                 lea     ecx, [ebp+var_F0] ; this
.text:000037E0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000037E5                 movzx   edx, [ebp+var_E1]
.text:000037EC                 test    edx, edx
.text:000037EE                 jz      short loc_3846
.text:000037F0                 mov     byte ptr [ebp+var_4], 5
.text:000037F4                 lea     ecx, [ebp+var_A4] ; this
.text:000037FA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000037FF                 mov     byte ptr [ebp+var_4], 4
.text:00003803                 lea     ecx, [ebp+var_90] ; this
.text:00003809                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000380E                 mov     byte ptr [ebp+var_4], 2
.text:00003812                 lea     ecx, [ebp+var_7C] ; this
.text:00003815                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000381A                 mov     byte ptr [ebp+var_4], 1
.text:0000381E                 lea     ecx, [ebp+var_68] ; this
.text:00003821                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003826                 mov     byte ptr [ebp+var_4], 0
.text:0000382A                 lea     ecx, [ebp+var_54] ; this
.text:0000382D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003832                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003839                 lea     ecx, [ebp+var_3C] ; this
.text:0000383C                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00003841                 jmp     loc_3302
.text:00003846 ; ---------------------------------------------------------------------------
.text:00003846
.text:00003846 loc_3846:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+546j
.text:00003846                 mov     eax, [ebp+var_AC]
.text:0000384C                 push    eax
.text:0000384D                 lea     ecx, [ebp+var_BC]
.text:00003853                 push    ecx
.text:00003854                 lea     ecx, [ebp+var_A4]
.text:0000385A                 call    ?Left@UString@@QBE?AV1@I@Z ; UString::Left(uint)
.text:0000385F                 mov     byte ptr [ebp+var_4], 8
.text:00003863                 lea     ecx, [ebp+var_A4] ; this
.text:00003869                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000386E                 push    eax             ; unsigned int
.text:0000386F                 mov     ecx, [ebp+var_44] ; this
.text:00003872                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00003877                 push    eax
.text:00003878                 lea     ecx, [ebp+var_BC]
.text:0000387E                 call    ??YUString@@QAEAAV0@PB_W@Z ; UString::operator+=(wchar_t const *)
.text:00003883                 lea     ecx, [ebp+var_CC]
.text:00003889                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:0000388E                 mov     byte ptr [ebp+var_4], 9
.text:00003892                 lea     ecx, [ebp+var_3C] ; this
.text:00003895                 call    ?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsSymLink(void)
.text:0000389A                 movzx   edx, al
.text:0000389D                 push    edx
.text:0000389E                 lea     ecx, [ebp+var_BC]
.text:000038A4                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000038A9                 push    eax
.text:000038AA                 lea     eax, [ebp+var_CC]
.text:000038B0                 push    eax
.text:000038B1                 call    ?FillLinkData@NFile@NWindows@@YG_NAAV?$CBuffer@E@@PB_W_N@Z ; NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)
.text:000038B6                 movzx   ecx, al
.text:000038B9                 test    ecx, ecx
.text:000038BB                 jnz     short loc_3931
.text:000038BD                 mov     byte ptr [ebp+var_4], 8
.text:000038C1                 lea     ecx, [ebp+var_CC]
.text:000038C7                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000038CC                 mov     byte ptr [ebp+var_4], 6
.text:000038D0                 lea     ecx, [ebp+var_BC] ; this
.text:000038D6                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000038DB                 mov     byte ptr [ebp+var_4], 5
.text:000038DF                 lea     ecx, [ebp+var_A4] ; this
.text:000038E5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000038EA                 mov     byte ptr [ebp+var_4], 4
.text:000038EE                 lea     ecx, [ebp+var_90] ; this
.text:000038F4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000038F9                 mov     byte ptr [ebp+var_4], 2
.text:000038FD                 lea     ecx, [ebp+var_7C] ; this
.text:00003900                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003905                 mov     byte ptr [ebp+var_4], 1
.text:00003909                 lea     ecx, [ebp+var_68] ; this
.text:0000390C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003911                 mov     byte ptr [ebp+var_4], 0
.text:00003915                 lea     ecx, [ebp+var_54] ; this
.text:00003918                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000391D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003924                 lea     ecx, [ebp+var_3C] ; this
.text:00003927                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:0000392C                 jmp     loc_3302
.text:00003931 ; ---------------------------------------------------------------------------
.text:00003931
.text:00003931 loc_3931:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+613j
.text:00003931                 lea     edx, [ebp+var_CC]
.text:00003937                 push    edx
.text:00003938                 mov     ecx, [ebp+var_18]
.text:0000393B                 add     ecx, 34h ; '4'
.text:0000393E                 call    ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z ; CBuffer<uchar>::operator=(CBuffer<uchar> const &)
.text:00003943                 mov     byte ptr [ebp+var_4], 8
.text:00003947                 lea     ecx, [ebp+var_CC]
.text:0000394D                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00003952                 mov     byte ptr [ebp+var_4], 6
.text:00003956                 lea     ecx, [ebp+var_BC] ; this
.text:0000395C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003961                 mov     byte ptr [ebp+var_4], 5
.text:00003965                 lea     ecx, [ebp+var_A4] ; this
.text:0000396B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003970                 mov     byte ptr [ebp+var_4], 4
.text:00003974                 lea     ecx, [ebp+var_90] ; this
.text:0000397A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000397F                 mov     byte ptr [ebp+var_4], 2
.text:00003983                 lea     ecx, [ebp+var_7C] ; this
.text:00003986                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000398B                 mov     byte ptr [ebp+var_4], 1
.text:0000398F                 lea     ecx, [ebp+var_68] ; this
.text:00003992                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003997                 mov     byte ptr [ebp+var_4], 0
.text:0000399B                 lea     ecx, [ebp+var_54] ; this
.text:0000399E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000039A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000039AA                 lea     ecx, [ebp+var_3C] ; this
.text:000039AD                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:000039B2                 jmp     loc_3302
.text:000039B7 ; ---------------------------------------------------------------------------
.text:000039B7
.text:000039B7 loc_39B7:                               ; CODE XREF: CDirItems::FillFixedReparse(void)+4Cj
.text:000039B7                                         ; CDirItems::FillFixedReparse(void)+71j
.text:000039B7                 push    edx
.text:000039B8                 mov     ecx, ebp
.text:000039BA                 push    eax
.text:000039BB                 lea     edx, $LN40
.text:000039C1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000039C6                 pop     eax
.text:000039C7                 pop     edx
.text:000039C8                 mov     ecx, [ebp+var_C]
.text:000039CB                 mov     large fs:0, ecx
.text:000039D2                 pop     ecx
.text:000039D3                 pop     edi
.text:000039D4                 pop     esi
.text:000039D5                 add     esp, 100h
.text:000039DB                 cmp     ebp, esp
.text:000039DD                 call    __RTC_CheckEsp
.text:000039E2                 mov     esp, ebp
.text:000039E4                 pop     ebp
.text:000039E5                 retn
.text:000039E5 ?FillFixedReparse@CDirItems@@QAEXXZ endp ; sp-analysis failed
.text:000039E5
.text:000039E5 ; ---------------------------------------------------------------------------
.text:000039E6                 align 4
.text:000039E8 $LN40           dd 8                    ; DATA XREF: CDirItems::FillFixedReparse(void)+713o
.text:000039EC                 dd offset $LN39
.text:000039F0 $LN39           dd 0FFFFFFC4h, 20h      ; DATA XREF: .text:000039ECo
.text:000039F8                 dd offset $LN30_0       ; "attr"
.text:000039FC                 dd 0FFFFFFACh, 0Ch
.text:00003A04                 dd offset $LN31_0       ; "$S1"
.text:00003A08                 dd 0FFFFFF98h, 0Ch
.text:00003A10                 dd offset $LN32         ; "fullPathF"
.text:00003A14                 dd 0FFFFFF84h, 0Ch
.text:00003A1C                 dd offset $LN33         ; "fullPath"
.text:00003A20                 dd 0FFFFFF70h, 0Ch
.text:00003A28                 dd offset $LN34         ; "logPath"
.text:00003A2C                 dd 0FFFFFF5Ch, 0Ch
.text:00003A34                 dd offset $LN35         ; "prefix"
.text:00003A38                 dd 0FFFFFF44h, 0Ch
.text:00003A40                 dd offset $LN36         ; "newLink"
.text:00003A44                 dd 0FFFFFF34h, 8
.text:00003A4C                 dd offset $LN37         ; "data"
.text:00003A50 $LN37           db 'data',0             ; DATA XREF: .text:00003A4Co
.text:00003A55 $LN36           db 'newLink',0          ; DATA XREF: .text:00003A40o
.text:00003A5D $LN35           db 'prefix',0           ; DATA XREF: .text:00003A34o
.text:00003A64 $LN34           db 'logPath',0          ; DATA XREF: .text:00003A28o
.text:00003A6C $LN33           db 'fullPath',0         ; DATA XREF: .text:00003A1Co
.text:00003A75 $LN32           db 'fullPathF',0        ; DATA XREF: .text:00003A10o
.text:00003A7F $LN31_0         db '$S1',0              ; DATA XREF: .text:00003A04o
.text:00003A83 $LN30_0         db 'attr',0             ; DATA XREF: .text:000039F8o
.text:00003A83 _text           ends
.text:00003A83
.text$x:00003A88 ; ===========================================================================
.text$x:00003A88
.text$x:00003A88 ; Segment type: Pure code
.text$x:00003A88 ; Segment permissions: Read/Execute
.text$x:00003A88 _text$x         segment para public 'CODE' use32
.text$x:00003A88                 assume cs:_text$x
.text$x:00003A88                 ;org 3A88h
.text$x:00003A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003A88
.text$x:00003A88 ; =============== S U B R O U T I N E =======================================
.text$x:00003A88
.text$x:00003A88
.text$x:00003A88 __unwindfunclet$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z$0 proc near
.text$x:00003A88                                         ; DATA XREF: .xdata$x:00003E78o
.text$x:00003A88                 lea     ecx, [ebp-64h]  ; this
.text$x:00003A8B                 jmp     ??1CDirItem@@QAE@XZ ; CDirItem::~CDirItem(void)
.text$x:00003A8B __unwindfunclet$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z$0 endp
.text$x:00003A8B
.text$x:00003A90
.text$x:00003A90 ; =============== S U B R O U T I N E =======================================
.text$x:00003A90
.text$x:00003A90
.text$x:00003A90 __ehhandler$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z proc near
.text$x:00003A90                                         ; DATA XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+5o
.text$x:00003A90
.text$x:00003A90 arg_4           = dword ptr  8
.text$x:00003A90
.text$x:00003A90                 mov     edx, [esp+arg_4]
.text$x:00003A94                 lea     eax, [edx+0Ch]
.text$x:00003A97                 mov     ecx, [edx-64h]
.text$x:00003A9A                 xor     ecx, eax
.text$x:00003A9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AA1                 mov     eax, offset __ehfuncinfo$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z
.text$x:00003AA6                 jmp     ___CxxFrameHandler3
.text$x:00003AA6 __ehhandler$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z endp
.text$x:00003AA6
.text$x:00003AAB
.text$x:00003AAB ; =============== S U B R O U T I N E =======================================
.text$x:00003AAB
.text$x:00003AAB
.text$x:00003AAB __unwindfunclet$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z$0 proc near
.text$x:00003AAB                                         ; DATA XREF: .xdata$x:00003EACo
.text$x:00003AAB                 lea     ecx, [ebp-20h]  ; this
.text$x:00003AAE                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003AAE __unwindfunclet$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z$0 endp
.text$x:00003AAE
.text$x:00003AB3
.text$x:00003AB3 ; =============== S U B R O U T I N E =======================================
.text$x:00003AB3
.text$x:00003AB3
.text$x:00003AB3 __unwindfunclet$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z$1 proc near
.text$x:00003AB3                                         ; DATA XREF: .xdata$x:00003EA4o
.text$x:00003AB3                 mov     eax, [ebp-38h]
.text$x:00003AB6                 and     eax, 1
.text$x:00003AB9                 jz      locret_3ACB
.text$x:00003ABF                 and     dword ptr [ebp-38h], 0FFFFFFFEh
.text$x:00003AC3                 mov     ecx, [ebp+8]    ; this
.text$x:00003AC6                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003ACB ; ---------------------------------------------------------------------------
.text$x:00003ACB
.text$x:00003ACB locret_3ACB:                            ; CODE XREF: __unwindfunclet$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z$1+6j
.text$x:00003ACB                 retn
.text$x:00003ACB __unwindfunclet$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z$1 endp
.text$x:00003ACB
.text$x:00003ACC
.text$x:00003ACC ; =============== S U B R O U T I N E =======================================
.text$x:00003ACC
.text$x:00003ACC
.text$x:00003ACC __ehhandler$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z proc near
.text$x:00003ACC                                         ; DATA XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+5o
.text$x:00003ACC
.text$x:00003ACC arg_4           = dword ptr  8
.text$x:00003ACC
.text$x:00003ACC                 mov     edx, [esp+arg_4]
.text$x:00003AD0                 lea     eax, [edx+0Ch]
.text$x:00003AD3                 mov     ecx, [edx-34h]
.text$x:00003AD6                 xor     ecx, eax
.text$x:00003AD8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003ADD                 mov     eax, offset __ehfuncinfo$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z
.text$x:00003AE2                 jmp     ___CxxFrameHandler3
.text$x:00003AE2 __ehhandler$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z endp
.text$x:00003AE2
.text$x:00003AE7
.text$x:00003AE7 ; =============== S U B R O U T I N E =======================================
.text$x:00003AE7
.text$x:00003AE7
.text$x:00003AE7 __unwindfunclet$??0CDirItems@@QAE@XZ$0 proc near
.text$x:00003AE7                                         ; DATA XREF: .xdata$x:00003EFCo
.text$x:00003AE7                 mov     ecx, [ebp-10h]
.text$x:00003AEA                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003AEA __unwindfunclet$??0CDirItems@@QAE@XZ$0 endp
.text$x:00003AEA
.text$x:00003AEF
.text$x:00003AEF ; =============== S U B R O U T I N E =======================================
.text$x:00003AEF
.text$x:00003AEF
.text$x:00003AEF __unwindfunclet$??0CDirItems@@QAE@XZ$1 proc near
.text$x:00003AEF                                         ; DATA XREF: .xdata$x:00003F04o
.text$x:00003AEF                 mov     ecx, [ebp-10h]
.text$x:00003AF2                 add     ecx, 0Ch
.text$x:00003AF5                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:00003AF5 __unwindfunclet$??0CDirItems@@QAE@XZ$1 endp
.text$x:00003AF5
.text$x:00003AFA
.text$x:00003AFA ; =============== S U B R O U T I N E =======================================
.text$x:00003AFA
.text$x:00003AFA
.text$x:00003AFA __unwindfunclet$??0CDirItems@@QAE@XZ$2 proc near
.text$x:00003AFA                                         ; DATA XREF: .xdata$x:00003F0Co
.text$x:00003AFA                 mov     ecx, [ebp-10h]
.text$x:00003AFD                 add     ecx, 18h
.text$x:00003B00                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:00003B00 __unwindfunclet$??0CDirItems@@QAE@XZ$2 endp
.text$x:00003B00
.text$x:00003B05
.text$x:00003B05 ; =============== S U B R O U T I N E =======================================
.text$x:00003B05
.text$x:00003B05
.text$x:00003B05 __unwindfunclet$??0CDirItems@@QAE@XZ$3 proc near
.text$x:00003B05                                         ; DATA XREF: .xdata$x:00003F14o
.text$x:00003B05                 mov     ecx, [ebp-10h]
.text$x:00003B08                 add     ecx, 24h ; '$'
.text$x:00003B0B                 jmp     ??1?$CObjectVector@UCDirItem@@@@QAE@XZ ; CObjectVector<CDirItem>::~CObjectVector<CDirItem>(void)
.text$x:00003B0B __unwindfunclet$??0CDirItems@@QAE@XZ$3 endp
.text$x:00003B0B
.text$x:00003B10
.text$x:00003B10 ; =============== S U B R O U T I N E =======================================
.text$x:00003B10
.text$x:00003B10
.text$x:00003B10 __unwindfunclet$??0CDirItems@@QAE@XZ$4 proc near
.text$x:00003B10                                         ; DATA XREF: .xdata$x:00003F1Co
.text$x:00003B10                 mov     ecx, [ebp-10h]
.text$x:00003B13                 add     ecx, 68h ; 'h'  ; this
.text$x:00003B16                 jmp     ??1CUniqBlocks@@QAE@XZ ; CUniqBlocks::~CUniqBlocks(void)
.text$x:00003B16 __unwindfunclet$??0CDirItems@@QAE@XZ$4 endp
.text$x:00003B16
.text$x:00003B1B
.text$x:00003B1B ; =============== S U B R O U T I N E =======================================
.text$x:00003B1B
.text$x:00003B1B
.text$x:00003B1B __unwindfunclet$??0CDirItems@@QAE@XZ$5 proc near
.text$x:00003B1B                                         ; DATA XREF: .xdata$x:00003F24o
.text$x:00003B1B                 mov     ecx, [ebp-10h]
.text$x:00003B1E                 add     ecx, 8Ch ; 'î'
.text$x:00003B24                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:00003B24 __unwindfunclet$??0CDirItems@@QAE@XZ$5 endp
.text$x:00003B24
.text$x:00003B29
.text$x:00003B29 ; =============== S U B R O U T I N E =======================================
.text$x:00003B29
.text$x:00003B29
.text$x:00003B29 __ehhandler$??0CDirItems@@QAE@XZ proc near
.text$x:00003B29                                         ; DATA XREF: CDirItems::CDirItems(void)+5o
.text$x:00003B29
.text$x:00003B29 arg_4           = dword ptr  8
.text$x:00003B29
.text$x:00003B29                 mov     edx, [esp+arg_4]
.text$x:00003B2D                 lea     eax, [edx+0Ch]
.text$x:00003B30                 mov     ecx, [edx-8]
.text$x:00003B33                 xor     ecx, eax
.text$x:00003B35                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B3A                 mov     eax, offset __ehfuncinfo$??0CDirItems@@QAE@XZ
.text$x:00003B3F                 jmp     ___CxxFrameHandler3
.text$x:00003B3F __ehhandler$??0CDirItems@@QAE@XZ endp
.text$x:00003B3F
.text$x:00003B44
.text$x:00003B44 ; =============== S U B R O U T I N E =======================================
.text$x:00003B44
.text$x:00003B44
.text$x:00003B44 __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$0 proc near
.text$x:00003B44                                         ; DATA XREF: .xdata$x:00003F50o
.text$x:00003B44                 lea     ecx, [ebp-0B8h] ; this
.text$x:00003B4A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003B4A __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$0 endp
.text$x:00003B4A
.text$x:00003B4F
.text$x:00003B4F ; =============== S U B R O U T I N E =======================================
.text$x:00003B4F
.text$x:00003B4F
.text$x:00003B4F __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$1 proc near
.text$x:00003B4F                                         ; DATA XREF: .xdata$x:00003F58o
.text$x:00003B4F                                         ; .xdata$x:00003F60o
.text$x:00003B4F                 lea     ecx, [ebp-28h]  ; this
.text$x:00003B52                 jmp     ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text$x:00003B52 __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$1 endp
.text$x:00003B52
.text$x:00003B57
.text$x:00003B57 ; =============== S U B R O U T I N E =======================================
.text$x:00003B57
.text$x:00003B57
.text$x:00003B57 __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$2 proc near
.text$x:00003B57                                         ; DATA XREF: .xdata$x:00003F68o
.text$x:00003B57                 lea     ecx, [ebp-6Ch]  ; this
.text$x:00003B5A                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00003B5A __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$2 endp
.text$x:00003B5A
.text$x:00003B5F
.text$x:00003B5F ; =============== S U B R O U T I N E =======================================
.text$x:00003B5F
.text$x:00003B5F
.text$x:00003B5F __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$3 proc near
.text$x:00003B5F                                         ; DATA XREF: .xdata$x:00003F70o
.text$x:00003B5F                 lea     ecx, [ebp-0CCh] ; this
.text$x:00003B65                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003B65 __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$3 endp
.text$x:00003B65
.text$x:00003B6A
.text$x:00003B6A ; =============== S U B R O U T I N E =======================================
.text$x:00003B6A
.text$x:00003B6A
.text$x:00003B6A __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$4 proc near
.text$x:00003B6A                                         ; DATA XREF: .xdata$x:00003F78o
.text$x:00003B6A                 lea     ecx, [ebp-0A0h] ; this
.text$x:00003B70                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003B70 __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$4 endp
.text$x:00003B70
.text$x:00003B75
.text$x:00003B75 ; =============== S U B R O U T I N E =======================================
.text$x:00003B75
.text$x:00003B75
.text$x:00003B75 __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$5 proc near
.text$x:00003B75                                         ; DATA XREF: .xdata$x:00003F80o
.text$x:00003B75                 lea     ecx, [ebp-0E0h] ; this
.text$x:00003B7B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003B7B __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$5 endp
.text$x:00003B7B
.text$x:00003B80
.text$x:00003B80 ; =============== S U B R O U T I N E =======================================
.text$x:00003B80
.text$x:00003B80
.text$x:00003B80 __ehhandler$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z proc near
.text$x:00003B80                                         ; DATA XREF: CDirItems::EnumerateDir(int,int,UString const &)+5o
.text$x:00003B80
.text$x:00003B80 arg_4           = dword ptr  8
.text$x:00003B80
.text$x:00003B80                 mov     edx, [esp+arg_4]
.text$x:00003B84                 lea     eax, [edx+0Ch]
.text$x:00003B87                 mov     ecx, [edx-0F8h]
.text$x:00003B8D                 xor     ecx, eax
.text$x:00003B8F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B94                 mov     eax, offset __ehfuncinfo$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z
.text$x:00003B99                 jmp     ___CxxFrameHandler3
.text$x:00003B99 __ehhandler$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z endp
.text$x:00003B99
.text$x:00003B9E
.text$x:00003B9E ; =============== S U B R O U T I N E =======================================
.text$x:00003B9E
.text$x:00003B9E
.text$x:00003B9E __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$0 proc near
.text$x:00003B9E                                         ; DATA XREF: .xdata$x:00003FACo
.text$x:00003B9E                 lea     ecx, [ebp-5Ch]  ; this
.text$x:00003BA1                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00003BA1 __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$0 endp
.text$x:00003BA1
.text$x:00003BA6
.text$x:00003BA6 ; =============== S U B R O U T I N E =======================================
.text$x:00003BA6
.text$x:00003BA6
.text$x:00003BA6 __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$1 proc near
.text$x:00003BA6                                         ; DATA XREF: .xdata$x:00003FB4o
.text$x:00003BA6                 lea     ecx, [ebp-70h]  ; this
.text$x:00003BA9                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003BA9 __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$1 endp
.text$x:00003BA9
.text$x:00003BAE
.text$x:00003BAE ; =============== S U B R O U T I N E =======================================
.text$x:00003BAE
.text$x:00003BAE
.text$x:00003BAE __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$2 proc near
.text$x:00003BAE                                         ; DATA XREF: .xdata$x:00003FBCo
.text$x:00003BAE                 lea     ecx, [ebp-8Ch]  ; this
.text$x:00003BB4                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003BB4 __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$2 endp
.text$x:00003BB4
.text$x:00003BB9
.text$x:00003BB9 ; =============== S U B R O U T I N E =======================================
.text$x:00003BB9
.text$x:00003BB9
.text$x:00003BB9 __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$3 proc near
.text$x:00003BB9                                         ; DATA XREF: .xdata$x:00003FC4o
.text$x:00003BB9                 lea     ecx, [ebp-0B4h] ; this
.text$x:00003BBF                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003BBF __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$3 endp
.text$x:00003BBF
.text$x:00003BC4
.text$x:00003BC4 ; =============== S U B R O U T I N E =======================================
.text$x:00003BC4
.text$x:00003BC4
.text$x:00003BC4 __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$4 proc near
.text$x:00003BC4                                         ; DATA XREF: .xdata$x:00003FCCo
.text$x:00003BC4                 lea     ecx, [ebp-0D4h] ; this
.text$x:00003BCA                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003BCA __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$4 endp
.text$x:00003BCA
.text$x:00003BCF
.text$x:00003BCF ; =============== S U B R O U T I N E =======================================
.text$x:00003BCF
.text$x:00003BCF
.text$x:00003BCF __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$5 proc near
.text$x:00003BCF                                         ; DATA XREF: .xdata$x:00003FD4o
.text$x:00003BCF                 lea     ecx, [ebp-0E0h] ; this
.text$x:00003BD5                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003BD5 __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$5 endp
.text$x:00003BD5
.text$x:00003BDA
.text$x:00003BDA ; =============== S U B R O U T I N E =======================================
.text$x:00003BDA
.text$x:00003BDA
.text$x:00003BDA __ehhandler$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z proc near
.text$x:00003BDA                                         ; DATA XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+5o
.text$x:00003BDA
.text$x:00003BDA arg_4           = dword ptr  8
.text$x:00003BDA
.text$x:00003BDA                 mov     edx, [esp+arg_4]
.text$x:00003BDE                 lea     eax, [edx+0Ch]
.text$x:00003BE1                 mov     ecx, [edx-0F8h]
.text$x:00003BE7                 xor     ecx, eax
.text$x:00003BE9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BEE                 mov     eax, offset __ehfuncinfo$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z
.text$x:00003BF3                 jmp     ___CxxFrameHandler3
.text$x:00003BF3 __ehhandler$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z endp
.text$x:00003BF3
.text$x:00003BF8
.text$x:00003BF8 ; =============== S U B R O U T I N E =======================================
.text$x:00003BF8
.text$x:00003BF8
.text$x:00003BF8 __unwindfunclet$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z$0 proc near
.text$x:00003BF8                                         ; DATA XREF: .xdata$x:00003FDCo
.text$x:00003BF8                 lea     ecx, [ebp-20h]  ; this
.text$x:00003BFB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003BFB __unwindfunclet$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z$0 endp
.text$x:00003BFB
.text$x:00003C00
.text$x:00003C00 ; =============== S U B R O U T I N E =======================================
.text$x:00003C00
.text$x:00003C00
.text$x:00003C00 __unwindfunclet$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z$1 proc near
.text$x:00003C00                                         ; DATA XREF: .xdata$x:00003FE4o
.text$x:00003C00                 lea     ecx, [ebp-4Ch]  ; this
.text$x:00003C03                 jmp     ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text$x:00003C03 __unwindfunclet$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z$1 endp
.text$x:00003C03
.text$x:00003C08
.text$x:00003C08 ; =============== S U B R O U T I N E =======================================
.text$x:00003C08
.text$x:00003C08
.text$x:00003C08 __ehhandler$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z proc near
.text$x:00003C08                                         ; DATA XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+5o
.text$x:00003C08
.text$x:00003C08 arg_4           = dword ptr  8
.text$x:00003C08
.text$x:00003C08                 mov     edx, [esp+arg_4]
.text$x:00003C0C                 lea     eax, [edx+0Ch]
.text$x:00003C0F                 mov     ecx, [edx-5Ch]
.text$x:00003C12                 xor     ecx, eax
.text$x:00003C14                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C19                 mov     eax, offset __ehfuncinfo$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z
.text$x:00003C1E                 jmp     ___CxxFrameHandler3
.text$x:00003C1E __ehhandler$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z endp
.text$x:00003C1E
.text$x:00003C23
.text$x:00003C23 ; =============== S U B R O U T I N E =======================================
.text$x:00003C23
.text$x:00003C23
.text$x:00003C23 __unwindfunclet$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z$0 proc near
.text$x:00003C23                                         ; DATA XREF: .xdata$x:00004010o
.text$x:00003C23                 lea     ecx, [ebp-2Ch]
.text$x:00003C26                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003C26 __unwindfunclet$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z$0 endp
.text$x:00003C26
.text$x:00003C2B
.text$x:00003C2B ; =============== S U B R O U T I N E =======================================
.text$x:00003C2B
.text$x:00003C2B
.text$x:00003C2B __ehhandler$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z proc near
.text$x:00003C2B                                         ; DATA XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+5o
.text$x:00003C2B
.text$x:00003C2B arg_4           = dword ptr  8
.text$x:00003C2B
.text$x:00003C2B                 mov     edx, [esp+arg_4]
.text$x:00003C2F                 lea     eax, [edx+0Ch]
.text$x:00003C32                 mov     ecx, [edx-34h]
.text$x:00003C35                 xor     ecx, eax
.text$x:00003C37                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C3C                 mov     eax, offset __ehfuncinfo$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z
.text$x:00003C41                 jmp     ___CxxFrameHandler3
.text$x:00003C41 __ehhandler$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z endp
.text$x:00003C41
.text$x:00003C46
.text$x:00003C46 ; =============== S U B R O U T I N E =======================================
.text$x:00003C46
.text$x:00003C46
.text$x:00003C46 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$0 proc near
.text$x:00003C46                                         ; DATA XREF: .xdata$x:00004060o
.text$x:00003C46                 lea     ecx, [ebp-20h]
.text$x:00003C49                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00003C49 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$0 endp
.text$x:00003C49
.text$x:00003C4E
.text$x:00003C4E ; =============== S U B R O U T I N E =======================================
.text$x:00003C4E
.text$x:00003C4E
.text$x:00003C4E __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$1 proc near
.text$x:00003C4E                                         ; DATA XREF: .xdata$x:00004068o
.text$x:00003C4E                 lea     ecx, [ebp-40h]  ; this
.text$x:00003C51                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003C51 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$1 endp
.text$x:00003C51
.text$x:00003C56
.text$x:00003C56 ; =============== S U B R O U T I N E =======================================
.text$x:00003C56
.text$x:00003C56
.text$x:00003C56 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$2 proc near
.text$x:00003C56                                         ; DATA XREF: .xdata$x:00004070o
.text$x:00003C56                 lea     ecx, [ebp-84h]  ; this
.text$x:00003C5C                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00003C5C __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$2 endp
.text$x:00003C5C
.text$x:00003C61
.text$x:00003C61 ; =============== S U B R O U T I N E =======================================
.text$x:00003C61
.text$x:00003C61
.text$x:00003C61 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$3 proc near
.text$x:00003C61                                         ; DATA XREF: .xdata$x:00004078o
.text$x:00003C61                 lea     ecx, [ebp-0A4h]
.text$x:00003C67                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003C67 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$3 endp
.text$x:00003C67
.text$x:00003C6C
.text$x:00003C6C ; =============== S U B R O U T I N E =======================================
.text$x:00003C6C
.text$x:00003C6C
.text$x:00003C6C __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$4 proc near
.text$x:00003C6C                                         ; DATA XREF: .xdata$x:00004080o
.text$x:00003C6C                 lea     ecx, [ebp-0D0h]
.text$x:00003C72                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003C72 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$4 endp
.text$x:00003C72
.text$x:00003C77
.text$x:00003C77 ; =============== S U B R O U T I N E =======================================
.text$x:00003C77
.text$x:00003C77
.text$x:00003C77 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$5 proc near
.text$x:00003C77                                         ; DATA XREF: .xdata$x:00004088o
.text$x:00003C77                 lea     ecx, [ebp-0E8h]
.text$x:00003C7D                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003C7D __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$5 endp
.text$x:00003C7D
.text$x:00003C82
.text$x:00003C82 ; =============== S U B R O U T I N E =======================================
.text$x:00003C82
.text$x:00003C82
.text$x:00003C82 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$6 proc near
.text$x:00003C82                                         ; DATA XREF: .xdata$x:00004090o
.text$x:00003C82                 lea     ecx, [ebp-110h] ; this
.text$x:00003C88                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003C88 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$6 endp
.text$x:00003C88
.text$x:00003C8D
.text$x:00003C8D ; =============== S U B R O U T I N E =======================================
.text$x:00003C8D
.text$x:00003C8D
.text$x:00003C8D __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$7 proc near
.text$x:00003C8D                                         ; DATA XREF: .xdata$x:00004098o
.text$x:00003C8D                 lea     ecx, [ebp-150h] ; this
.text$x:00003C93                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00003C93 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$7 endp
.text$x:00003C93
.text$x:00003C98
.text$x:00003C98 ; =============== S U B R O U T I N E =======================================
.text$x:00003C98
.text$x:00003C98
.text$x:00003C98 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$8 proc near
.text$x:00003C98                                         ; DATA XREF: .xdata$x:000040A0o
.text$x:00003C98                 lea     ecx, [ebp-278h]
.text$x:00003C9E                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003C9E __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$8 endp
.text$x:00003C9E
.text$x:00003CA3
.text$x:00003CA3 ; =============== S U B R O U T I N E =======================================
.text$x:00003CA3
.text$x:00003CA3
.text$x:00003CA3 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$9 proc near
.text$x:00003CA3                                         ; DATA XREF: .xdata$x:000040A8o
.text$x:00003CA3                 lea     ecx, [ebp-17Ch]
.text$x:00003CA9                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003CA9 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$9 endp
.text$x:00003CA9
.text$x:00003CAE
.text$x:00003CAE ; =============== S U B R O U T I N E =======================================
.text$x:00003CAE
.text$x:00003CAE
.text$x:00003CAE __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$10 proc near
.text$x:00003CAE                                         ; DATA XREF: .xdata$x:000040B0o
.text$x:00003CAE                 lea     ecx, [ebp-190h] ; this
.text$x:00003CB4                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003CB4 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$10 endp
.text$x:00003CB4
.text$x:00003CB9
.text$x:00003CB9 ; =============== S U B R O U T I N E =======================================
.text$x:00003CB9
.text$x:00003CB9
.text$x:00003CB9 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$11 proc near
.text$x:00003CB9                                         ; DATA XREF: .xdata$x:000040B8o
.text$x:00003CB9                 lea     ecx, [ebp-1D0h] ; this
.text$x:00003CBF                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00003CBF __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$11 endp
.text$x:00003CBF
.text$x:00003CC4
.text$x:00003CC4 ; =============== S U B R O U T I N E =======================================
.text$x:00003CC4
.text$x:00003CC4
.text$x:00003CC4 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$12 proc near
.text$x:00003CC4                                         ; DATA XREF: .xdata$x:000040C0o
.text$x:00003CC4                 lea     ecx, [ebp-298h] ; this
.text$x:00003CCA                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003CCA __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$12 endp
.text$x:00003CCA
.text$x:00003CCF
.text$x:00003CCF ; =============== S U B R O U T I N E =======================================
.text$x:00003CCF
.text$x:00003CCF
.text$x:00003CCF __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$13 proc near
.text$x:00003CCF                                         ; DATA XREF: .xdata$x:000040C8o
.text$x:00003CCF                                         ; .xdata$x:000040D0o
.text$x:00003CCF                 lea     ecx, [ebp-1ECh] ; this
.text$x:00003CD5                 jmp     ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)
.text$x:00003CD5 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$13 endp
.text$x:00003CD5
.text$x:00003CDA
.text$x:00003CDA ; =============== S U B R O U T I N E =======================================
.text$x:00003CDA
.text$x:00003CDA
.text$x:00003CDA __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$14 proc near
.text$x:00003CDA                                         ; DATA XREF: .xdata$x:000040D8o
.text$x:00003CDA                 lea     ecx, [ebp-230h] ; this
.text$x:00003CE0                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00003CE0 __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$14 endp
.text$x:00003CE0
.text$x:00003CE5
.text$x:00003CE5 ; =============== S U B R O U T I N E =======================================
.text$x:00003CE5
.text$x:00003CE5
.text$x:00003CE5 __ehhandler$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z proc near
.text$x:00003CE5                                         ; DATA XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+5o
.text$x:00003CE5
.text$x:00003CE5 arg_4           = dword ptr  8
.text$x:00003CE5
.text$x:00003CE5                 mov     edx, [esp+arg_4]
.text$x:00003CE9                 lea     eax, [edx+0Ch]
.text$x:00003CEC                 mov     ecx, [edx-2B4h]
.text$x:00003CF2                 xor     ecx, eax
.text$x:00003CF4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CF9                 mov     eax, offset __ehfuncinfo$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z
.text$x:00003CFE                 jmp     ___CxxFrameHandler3
.text$x:00003CFE __ehhandler$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z endp
.text$x:00003CFE
.text$x:00003D03
.text$x:00003D03 ; =============== S U B R O U T I N E =======================================
.text$x:00003D03
.text$x:00003D03
.text$x:00003D03 __unwindfunclet$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$0 proc near
.text$x:00003D03                                         ; DATA XREF: .xdata$x:000040E0o
.text$x:00003D03                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00003D06                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003D06 __unwindfunclet$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$0 endp
.text$x:00003D06
.text$x:00003D0B
.text$x:00003D0B ; =============== S U B R O U T I N E =======================================
.text$x:00003D0B
.text$x:00003D0B
.text$x:00003D0B __unwindfunclet$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$1 proc near
.text$x:00003D0B                                         ; DATA XREF: .xdata$x:000040E8o
.text$x:00003D0B                 lea     ecx, [ebp-38h]  ; this
.text$x:00003D0E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003D0E __unwindfunclet$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$1 endp
.text$x:00003D0E
.text$x:00003D13
.text$x:00003D13 ; =============== S U B R O U T I N E =======================================
.text$x:00003D13
.text$x:00003D13
.text$x:00003D13 __ehhandler$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z proc near
.text$x:00003D13                                         ; DATA XREF: EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+5o
.text$x:00003D13
.text$x:00003D13 arg_4           = dword ptr  8
.text$x:00003D13
.text$x:00003D13                 mov     edx, [esp+arg_4]
.text$x:00003D17                 lea     eax, [edx+0Ch]
.text$x:00003D1A                 mov     ecx, [edx-40h]
.text$x:00003D1D                 xor     ecx, eax
.text$x:00003D1F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D24                 mov     eax, offset __ehfuncinfo$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z
.text$x:00003D29                 jmp     ___CxxFrameHandler3
.text$x:00003D29 __ehhandler$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z endp
.text$x:00003D29
.text$x:00003D2E
.text$x:00003D2E ; =============== S U B R O U T I N E =======================================
.text$x:00003D2E
.text$x:00003D2E
.text$x:00003D2E __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$0 proc near
.text$x:00003D2E                                         ; DATA XREF: .xdata$x:00004138o
.text$x:00003D2E                 lea     ecx, [ebp-20h]  ; this
.text$x:00003D31                 jmp     ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)
.text$x:00003D31 __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$0 endp
.text$x:00003D31
.text$x:00003D36
.text$x:00003D36 ; =============== S U B R O U T I N E =======================================
.text$x:00003D36
.text$x:00003D36
.text$x:00003D36 __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$1 proc near
.text$x:00003D36                                         ; DATA XREF: .xdata$x:00004140o
.text$x:00003D36                 lea     ecx, [ebp-40h]  ; this
.text$x:00003D39                 jmp     ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text$x:00003D39 __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$1 endp
.text$x:00003D39
.text$x:00003D3E
.text$x:00003D3E ; =============== S U B R O U T I N E =======================================
.text$x:00003D3E
.text$x:00003D3E
.text$x:00003D3E __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$2 proc near
.text$x:00003D3E                                         ; DATA XREF: .xdata$x:00004148o
.text$x:00003D3E                 lea     ecx, [ebp-0C8h] ; this
.text$x:00003D44                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003D44 __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$2 endp
.text$x:00003D44
.text$x:00003D49
.text$x:00003D49 ; =============== S U B R O U T I N E =======================================
.text$x:00003D49
.text$x:00003D49
.text$x:00003D49 __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$3 proc near
.text$x:00003D49                                         ; DATA XREF: .xdata$x:00004150o
.text$x:00003D49                 lea     ecx, [ebp-60h]
.text$x:00003D4C                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003D4C __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$3 endp
.text$x:00003D4C
.text$x:00003D51
.text$x:00003D51 ; =============== S U B R O U T I N E =======================================
.text$x:00003D51
.text$x:00003D51
.text$x:00003D51 __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$4 proc near
.text$x:00003D51                                         ; DATA XREF: .xdata$x:00004158o
.text$x:00003D51                 lea     ecx, [ebp-74h]  ; this
.text$x:00003D54                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003D54 __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$4 endp
.text$x:00003D54
.text$x:00003D59
.text$x:00003D59 ; =============== S U B R O U T I N E =======================================
.text$x:00003D59
.text$x:00003D59
.text$x:00003D59 __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$5 proc near
.text$x:00003D59                                         ; DATA XREF: .xdata$x:00004160o
.text$x:00003D59                 lea     ecx, [ebp-0B4h] ; this
.text$x:00003D5F                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00003D5F __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$5 endp
.text$x:00003D5F
.text$x:00003D64
.text$x:00003D64 ; =============== S U B R O U T I N E =======================================
.text$x:00003D64
.text$x:00003D64
.text$x:00003D64 __ehhandler$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z proc near
.text$x:00003D64                                         ; DATA XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+5o
.text$x:00003D64
.text$x:00003D64 arg_4           = dword ptr  8
.text$x:00003D64
.text$x:00003D64                 mov     edx, [esp+arg_4]
.text$x:00003D68                 lea     eax, [edx+0Ch]
.text$x:00003D6B                 mov     ecx, [edx-0D0h]
.text$x:00003D71                 xor     ecx, eax
.text$x:00003D73                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D78                 mov     eax, offset __ehfuncinfo$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z
.text$x:00003D7D                 jmp     ___CxxFrameHandler3
.text$x:00003D7D __ehhandler$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z endp
.text$x:00003D7D
.text$x:00003D82
.text$x:00003D82 ; =============== S U B R O U T I N E =======================================
.text$x:00003D82
.text$x:00003D82
.text$x:00003D82 __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$0 proc near
.text$x:00003D82                                         ; DATA XREF: .xdata$x:0000418Co
.text$x:00003D82                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00003D85                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003D85 __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$0 endp
.text$x:00003D85
.text$x:00003D8A
.text$x:00003D8A ; =============== S U B R O U T I N E =======================================
.text$x:00003D8A
.text$x:00003D8A
.text$x:00003D8A __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$1 proc near
.text$x:00003D8A                                         ; DATA XREF: .xdata$x:00004194o
.text$x:00003D8A                 lea     ecx, [ebp-34h]
.text$x:00003D8D                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003D8D __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$1 endp
.text$x:00003D8D
.text$x:00003D92
.text$x:00003D92 ; =============== S U B R O U T I N E =======================================
.text$x:00003D92
.text$x:00003D92
.text$x:00003D92 __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$2 proc near
.text$x:00003D92                                         ; DATA XREF: .xdata$x:0000419Co
.text$x:00003D92                 lea     ecx, [ebp-48h]
.text$x:00003D95                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003D95 __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$2 endp
.text$x:00003D95
.text$x:00003D9A
.text$x:00003D9A ; =============== S U B R O U T I N E =======================================
.text$x:00003D9A
.text$x:00003D9A
.text$x:00003D9A __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$3 proc near
.text$x:00003D9A                                         ; DATA XREF: .xdata$x:000041A4o
.text$x:00003D9A                 lea     ecx, [ebp-84h]  ; this
.text$x:00003DA0                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003DA0 __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$3 endp
.text$x:00003DA0
.text$x:00003DA5
.text$x:00003DA5 ; =============== S U B R O U T I N E =======================================
.text$x:00003DA5
.text$x:00003DA5
.text$x:00003DA5 __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$4 proc near
.text$x:00003DA5                                         ; DATA XREF: .xdata$x:000041ACo
.text$x:00003DA5                 lea     ecx, [ebp-94h]  ; this
.text$x:00003DAB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003DAB __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$4 endp
.text$x:00003DAB
.text$x:00003DB0
.text$x:00003DB0 ; =============== S U B R O U T I N E =======================================
.text$x:00003DB0
.text$x:00003DB0
.text$x:00003DB0 __ehhandler$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z proc near
.text$x:00003DB0                                         ; DATA XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+5o
.text$x:00003DB0
.text$x:00003DB0 arg_4           = dword ptr  8
.text$x:00003DB0
.text$x:00003DB0                 mov     edx, [esp+arg_4]
.text$x:00003DB4                 lea     eax, [edx+0Ch]
.text$x:00003DB7                 mov     ecx, [edx-0B8h]
.text$x:00003DBD                 xor     ecx, eax
.text$x:00003DBF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DC4                 mov     eax, offset __ehfuncinfo$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z
.text$x:00003DC9                 jmp     ___CxxFrameHandler3
.text$x:00003DC9 __ehhandler$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z endp
.text$x:00003DC9
.text$x:00003DCE
.text$x:00003DCE ; =============== S U B R O U T I N E =======================================
.text$x:00003DCE
.text$x:00003DCE
.text$x:00003DCE __unwindfunclet$?IsVirtualFsFolder@@YG_NABVUString@@0@Z$0 proc near
.text$x:00003DCE                                         ; DATA XREF: .xdata$x:000041B4o
.text$x:00003DCE                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00003DD1                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003DD1 __unwindfunclet$?IsVirtualFsFolder@@YG_NABVUString@@0@Z$0 endp
.text$x:00003DD1
.text$x:00003DD6
.text$x:00003DD6 ; =============== S U B R O U T I N E =======================================
.text$x:00003DD6
.text$x:00003DD6
.text$x:00003DD6 __ehhandler$?IsVirtualFsFolder@@YG_NABVUString@@0@Z proc near
.text$x:00003DD6                                         ; DATA XREF: IsVirtualFsFolder(UString const &,UString const &)+5o
.text$x:00003DD6
.text$x:00003DD6 arg_4           = dword ptr  8
.text$x:00003DD6
.text$x:00003DD6                 mov     edx, [esp+arg_4]
.text$x:00003DDA                 lea     eax, [edx+0Ch]
.text$x:00003DDD                 mov     ecx, [edx-20h]
.text$x:00003DE0                 xor     ecx, eax
.text$x:00003DE2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DE7                 mov     eax, offset __ehfuncinfo$?IsVirtualFsFolder@@YG_NABVUString@@0@Z
.text$x:00003DEC                 jmp     ___CxxFrameHandler3
.text$x:00003DEC __ehhandler$?IsVirtualFsFolder@@YG_NABVUString@@0@Z endp
.text$x:00003DEC
.text$x:00003DF1
.text$x:00003DF1 ; =============== S U B R O U T I N E =======================================
.text$x:00003DF1
.text$x:00003DF1
.text$x:00003DF1 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$0 proc near
.text$x:00003DF1                                         ; DATA XREF: .xdata$x:00004204o
.text$x:00003DF1                 lea     ecx, [ebp-3Ch]  ; this
.text$x:00003DF4                 jmp     ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text$x:00003DF4 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$0 endp
.text$x:00003DF4
.text$x:00003DF9
.text$x:00003DF9 ; =============== S U B R O U T I N E =======================================
.text$x:00003DF9
.text$x:00003DF9
.text$x:00003DF9 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$1 proc near
.text$x:00003DF9                                         ; DATA XREF: .xdata$x:0000420Co
.text$x:00003DF9                 lea     ecx, [ebp-54h]  ; this
.text$x:00003DFC                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003DFC __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$1 endp
.text$x:00003DFC
.text$x:00003E01
.text$x:00003E01 ; =============== S U B R O U T I N E =======================================
.text$x:00003E01
.text$x:00003E01
.text$x:00003E01 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$2 proc near
.text$x:00003E01                                         ; DATA XREF: .xdata$x:00004214o
.text$x:00003E01                 lea     ecx, [ebp-68h]  ; this
.text$x:00003E04                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003E04 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$2 endp
.text$x:00003E04
.text$x:00003E09
.text$x:00003E09 ; =============== S U B R O U T I N E =======================================
.text$x:00003E09
.text$x:00003E09
.text$x:00003E09 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$3 proc near
.text$x:00003E09                                         ; DATA XREF: .xdata$x:0000421Co
.text$x:00003E09                 lea     ecx, [ebp-0E0h] ; this
.text$x:00003E0F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003E0F __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$3 endp
.text$x:00003E0F
.text$x:00003E14
.text$x:00003E14 ; =============== S U B R O U T I N E =======================================
.text$x:00003E14
.text$x:00003E14
.text$x:00003E14 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$4 proc near
.text$x:00003E14                                         ; DATA XREF: .xdata$x:00004224o
.text$x:00003E14                 lea     ecx, [ebp-7Ch]  ; this
.text$x:00003E17                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003E17 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$4 endp
.text$x:00003E17
.text$x:00003E1C
.text$x:00003E1C ; =============== S U B R O U T I N E =======================================
.text$x:00003E1C
.text$x:00003E1C
.text$x:00003E1C __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$5 proc near
.text$x:00003E1C                                         ; DATA XREF: .xdata$x:0000422Co
.text$x:00003E1C                 lea     ecx, [ebp-90h]  ; this
.text$x:00003E22                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003E22 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$5 endp
.text$x:00003E22
.text$x:00003E27
.text$x:00003E27 ; =============== S U B R O U T I N E =======================================
.text$x:00003E27
.text$x:00003E27
.text$x:00003E27 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$6 proc near
.text$x:00003E27                                         ; DATA XREF: .xdata$x:00004234o
.text$x:00003E27                 lea     ecx, [ebp-0A4h] ; this
.text$x:00003E2D                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003E2D __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$6 endp
.text$x:00003E2D
.text$x:00003E32
.text$x:00003E32 ; =============== S U B R O U T I N E =======================================
.text$x:00003E32
.text$x:00003E32
.text$x:00003E32 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$7 proc near
.text$x:00003E32                                         ; DATA XREF: .xdata$x:0000423Co
.text$x:00003E32                 lea     ecx, [ebp-0F0h] ; this
.text$x:00003E38                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003E38 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$7 endp
.text$x:00003E38
.text$x:00003E3D
.text$x:00003E3D ; =============== S U B R O U T I N E =======================================
.text$x:00003E3D
.text$x:00003E3D
.text$x:00003E3D __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$8 proc near
.text$x:00003E3D                                         ; DATA XREF: .xdata$x:00004244o
.text$x:00003E3D                 lea     ecx, [ebp-0BCh] ; this
.text$x:00003E43                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003E43 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$8 endp
.text$x:00003E43
.text$x:00003E48
.text$x:00003E48 ; =============== S U B R O U T I N E =======================================
.text$x:00003E48
.text$x:00003E48
.text$x:00003E48 __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$9 proc near
.text$x:00003E48                                         ; DATA XREF: .xdata$x:0000424Co
.text$x:00003E48                 lea     ecx, [ebp-0CCh]
.text$x:00003E4E                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:00003E4E __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$9 endp
.text$x:00003E4E
.text$x:00003E53
.text$x:00003E53 ; =============== S U B R O U T I N E =======================================
.text$x:00003E53
.text$x:00003E53
.text$x:00003E53 __ehhandler$?FillFixedReparse@CDirItems@@QAEXXZ proc near
.text$x:00003E53                                         ; DATA XREF: CDirItems::FillFixedReparse(void)+5o
.text$x:00003E53
.text$x:00003E53 arg_4           = dword ptr  8
.text$x:00003E53
.text$x:00003E53                 mov     edx, [esp+arg_4]
.text$x:00003E57                 lea     eax, [edx+0Ch]
.text$x:00003E5A                 mov     ecx, [edx-100h]
.text$x:00003E60                 xor     ecx, eax
.text$x:00003E62                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E67                 mov     eax, offset __ehfuncinfo$?FillFixedReparse@CDirItems@@QAEXXZ
.text$x:00003E6C                 jmp     ___CxxFrameHandler3
.text$x:00003E6C __ehhandler$?FillFixedReparse@CDirItems@@QAEXXZ endp
.text$x:00003E6C
.text$x:00003E6C ; ---------------------------------------------------------------------------
.text$x:00003E71                 align 4
.text$x:00003E71 _text$x         ends
.text$x:00003E71
.xdata$x:00003E74 ; ===========================================================================
.xdata$x:00003E74
.xdata$x:00003E74 ; Segment type: Pure data
.xdata$x:00003E74 ; Segment permissions: Read
.xdata$x:00003E74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003E74                 assume cs:_xdata$x
.xdata$x:00003E74                 ;org 3E74h
.xdata$x:00003E74 __unwindtable$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z db 0FFh
.xdata$x:00003E74                                         ; DATA XREF: .xdata$x:00003E84o
.xdata$x:00003E75                 db 0FFh
.xdata$x:00003E76                 db 0FFh
.xdata$x:00003E77                 db 0FFh
.xdata$x:00003E78                 dd offset __unwindfunclet$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z$0
.xdata$x:00003E7C __ehfuncinfo$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z db  22h ; "
.xdata$x:00003E7C                                         ; DATA XREF: __ehhandler$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z+11o
.xdata$x:00003E7D                 db    5
.xdata$x:00003E7E                 db  93h ; ô
.xdata$x:00003E7F                 db  19h
.xdata$x:00003E80                 db    1
.xdata$x:00003E81                 db    0
.xdata$x:00003E82                 db    0
.xdata$x:00003E83                 db    0
.xdata$x:00003E84                 dd offset __unwindtable$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z
.xdata$x:00003E88                 db    0
.xdata$x:00003E89                 db    0
.xdata$x:00003E8A                 db    0
.xdata$x:00003E8B                 db    0
.xdata$x:00003E8C                 db    0
.xdata$x:00003E8D                 db    0
.xdata$x:00003E8E                 db    0
.xdata$x:00003E8F                 db    0
.xdata$x:00003E90                 db    0
.xdata$x:00003E91                 db    0
.xdata$x:00003E92                 db    0
.xdata$x:00003E93                 db    0
.xdata$x:00003E94                 db    0
.xdata$x:00003E95                 db    0
.xdata$x:00003E96                 db    0
.xdata$x:00003E97                 db    0
.xdata$x:00003E98                 db    0
.xdata$x:00003E99                 db    0
.xdata$x:00003E9A                 db    0
.xdata$x:00003E9B                 db    0
.xdata$x:00003E9C                 db    1
.xdata$x:00003E9D                 db    0
.xdata$x:00003E9E                 db    0
.xdata$x:00003E9F                 db    0
.xdata$x:00003EA0 __unwindtable$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z db 0FFh
.xdata$x:00003EA0                                         ; DATA XREF: .xdata$x:00003EB8o
.xdata$x:00003EA1                 db 0FFh
.xdata$x:00003EA2                 db 0FFh
.xdata$x:00003EA3                 db 0FFh
.xdata$x:00003EA4                 dd offset __unwindfunclet$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z$1
.xdata$x:00003EA8                 db    0
.xdata$x:00003EA9                 db    0
.xdata$x:00003EAA                 db    0
.xdata$x:00003EAB                 db    0
.xdata$x:00003EAC                 dd offset __unwindfunclet$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z$0
.xdata$x:00003EB0 __ehfuncinfo$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z db  22h ; "
.xdata$x:00003EB0                                         ; DATA XREF: __ehhandler$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z+11o
.xdata$x:00003EB1                 db    5
.xdata$x:00003EB2                 db  93h ; ô
.xdata$x:00003EB3                 db  19h
.xdata$x:00003EB4                 db    2
.xdata$x:00003EB5                 db    0
.xdata$x:00003EB6                 db    0
.xdata$x:00003EB7                 db    0
.xdata$x:00003EB8                 dd offset __unwindtable$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z
.xdata$x:00003EBC                 db    0
.xdata$x:00003EBD                 db    0
.xdata$x:00003EBE                 db    0
.xdata$x:00003EBF                 db    0
.xdata$x:00003EC0                 db    0
.xdata$x:00003EC1                 db    0
.xdata$x:00003EC2                 db    0
.xdata$x:00003EC3                 db    0
.xdata$x:00003EC4                 db    0
.xdata$x:00003EC5                 db    0
.xdata$x:00003EC6                 db    0
.xdata$x:00003EC7                 db    0
.xdata$x:00003EC8                 db    0
.xdata$x:00003EC9                 db    0
.xdata$x:00003ECA                 db    0
.xdata$x:00003ECB                 db    0
.xdata$x:00003ECC                 db    0
.xdata$x:00003ECD                 db    0
.xdata$x:00003ECE                 db    0
.xdata$x:00003ECF                 db    0
.xdata$x:00003ED0                 db    1
.xdata$x:00003ED1                 db    0
.xdata$x:00003ED2                 db    0
.xdata$x:00003ED3                 db    0
.xdata$x:00003ED4 __ehfuncinfo$??0CDirItems@@QAE@XZ db  22h ; "
.xdata$x:00003ED4                                         ; DATA XREF: __ehhandler$??0CDirItems@@QAE@XZ+11o
.xdata$x:00003ED5                 db    5
.xdata$x:00003ED6                 db  93h ; ô
.xdata$x:00003ED7                 db  19h
.xdata$x:00003ED8                 db    6
.xdata$x:00003ED9                 db    0
.xdata$x:00003EDA                 db    0
.xdata$x:00003EDB                 db    0
.xdata$x:00003EDC                 dd offset __unwindtable$??0CDirItems@@QAE@XZ
.xdata$x:00003EE0                 db    0
.xdata$x:00003EE1                 db    0
.xdata$x:00003EE2                 db    0
.xdata$x:00003EE3                 db    0
.xdata$x:00003EE4                 db    0
.xdata$x:00003EE5                 db    0
.xdata$x:00003EE6                 db    0
.xdata$x:00003EE7                 db    0
.xdata$x:00003EE8                 db    0
.xdata$x:00003EE9                 db    0
.xdata$x:00003EEA                 db    0
.xdata$x:00003EEB                 db    0
.xdata$x:00003EEC                 db    0
.xdata$x:00003EED                 db    0
.xdata$x:00003EEE                 db    0
.xdata$x:00003EEF                 db    0
.xdata$x:00003EF0                 db    0
.xdata$x:00003EF1                 db    0
.xdata$x:00003EF2                 db    0
.xdata$x:00003EF3                 db    0
.xdata$x:00003EF4                 db    1
.xdata$x:00003EF5                 db    0
.xdata$x:00003EF6                 db    0
.xdata$x:00003EF7                 db    0
.xdata$x:00003EF8 __unwindtable$??0CDirItems@@QAE@XZ db 0FFh ; DATA XREF: .xdata$x:00003EDCo
.xdata$x:00003EF9                 db 0FFh
.xdata$x:00003EFA                 db 0FFh
.xdata$x:00003EFB                 db 0FFh
.xdata$x:00003EFC                 dd offset __unwindfunclet$??0CDirItems@@QAE@XZ$0
.xdata$x:00003F00                 db    0
.xdata$x:00003F01                 db    0
.xdata$x:00003F02                 db    0
.xdata$x:00003F03                 db    0
.xdata$x:00003F04                 dd offset __unwindfunclet$??0CDirItems@@QAE@XZ$1
.xdata$x:00003F08                 db    1
.xdata$x:00003F09                 db    0
.xdata$x:00003F0A                 db    0
.xdata$x:00003F0B                 db    0
.xdata$x:00003F0C                 dd offset __unwindfunclet$??0CDirItems@@QAE@XZ$2
.xdata$x:00003F10                 db    2
.xdata$x:00003F11                 db    0
.xdata$x:00003F12                 db    0
.xdata$x:00003F13                 db    0
.xdata$x:00003F14                 dd offset __unwindfunclet$??0CDirItems@@QAE@XZ$3
.xdata$x:00003F18                 db    3
.xdata$x:00003F19                 db    0
.xdata$x:00003F1A                 db    0
.xdata$x:00003F1B                 db    0
.xdata$x:00003F1C                 dd offset __unwindfunclet$??0CDirItems@@QAE@XZ$4
.xdata$x:00003F20                 db    4
.xdata$x:00003F21                 db    0
.xdata$x:00003F22                 db    0
.xdata$x:00003F23                 db    0
.xdata$x:00003F24                 dd offset __unwindfunclet$??0CDirItems@@QAE@XZ$5
.xdata$x:00003F28 __ehfuncinfo$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z db  22h ; "
.xdata$x:00003F28                                         ; DATA XREF: __ehhandler$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z+14o
.xdata$x:00003F29                 db    5
.xdata$x:00003F2A                 db  93h ; ô
.xdata$x:00003F2B                 db  19h
.xdata$x:00003F2C                 db    7
.xdata$x:00003F2D                 db    0
.xdata$x:00003F2E                 db    0
.xdata$x:00003F2F                 db    0
.xdata$x:00003F30                 dd offset __unwindtable$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z
.xdata$x:00003F34                 db    0
.xdata$x:00003F35                 db    0
.xdata$x:00003F36                 db    0
.xdata$x:00003F37                 db    0
.xdata$x:00003F38                 db    0
.xdata$x:00003F39                 db    0
.xdata$x:00003F3A                 db    0
.xdata$x:00003F3B                 db    0
.xdata$x:00003F3C                 db    0
.xdata$x:00003F3D                 db    0
.xdata$x:00003F3E                 db    0
.xdata$x:00003F3F                 db    0
.xdata$x:00003F40                 db    0
.xdata$x:00003F41                 db    0
.xdata$x:00003F42                 db    0
.xdata$x:00003F43                 db    0
.xdata$x:00003F44                 db    0
.xdata$x:00003F45                 db    0
.xdata$x:00003F46                 db    0
.xdata$x:00003F47                 db    0
.xdata$x:00003F48                 db    1
.xdata$x:00003F49                 db    0
.xdata$x:00003F4A                 db    0
.xdata$x:00003F4B                 db    0
.xdata$x:00003F4C __unwindtable$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z db 0FFh
.xdata$x:00003F4C                                         ; DATA XREF: .xdata$x:00003F30o
.xdata$x:00003F4D                 db 0FFh
.xdata$x:00003F4E                 db 0FFh
.xdata$x:00003F4F                 db 0FFh
.xdata$x:00003F50                 dd offset __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$0
.xdata$x:00003F54                 align 8
.xdata$x:00003F58                 dd offset __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$1
.xdata$x:00003F5C                 db 0FFh
.xdata$x:00003F5D                 db 0FFh
.xdata$x:00003F5E                 db 0FFh
.xdata$x:00003F5F                 db 0FFh
.xdata$x:00003F60                 dd offset __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$1
.xdata$x:00003F64                 db    2
.xdata$x:00003F65                 db    0
.xdata$x:00003F66                 db    0
.xdata$x:00003F67                 db    0
.xdata$x:00003F68                 dd offset __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$2
.xdata$x:00003F6C                 db    3
.xdata$x:00003F6D                 db    0
.xdata$x:00003F6E                 db    0
.xdata$x:00003F6F                 db    0
.xdata$x:00003F70                 dd offset __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$3
.xdata$x:00003F74                 db    3
.xdata$x:00003F75                 db    0
.xdata$x:00003F76                 db    0
.xdata$x:00003F77                 db    0
.xdata$x:00003F78                 dd offset __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$4
.xdata$x:00003F7C                 db    5
.xdata$x:00003F7D                 db    0
.xdata$x:00003F7E                 db    0
.xdata$x:00003F7F                 db    0
.xdata$x:00003F80                 dd offset __unwindfunclet$?EnumerateDir@CDirItems@@AAEJHHABVUString@@@Z$5
.xdata$x:00003F84 __ehfuncinfo$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z db  22h ; "
.xdata$x:00003F84                                         ; DATA XREF: __ehhandler$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z+14o
.xdata$x:00003F85                 db    5
.xdata$x:00003F86                 db  93h ; ô
.xdata$x:00003F87                 db  19h
.xdata$x:00003F88                 db    6
.xdata$x:00003F89                 db    0
.xdata$x:00003F8A                 db    0
.xdata$x:00003F8B                 db    0
.xdata$x:00003F8C                 dd offset __unwindtable$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z
.xdata$x:00003F90                 db    0
.xdata$x:00003F91                 db    0
.xdata$x:00003F92                 db    0
.xdata$x:00003F93                 db    0
.xdata$x:00003F94                 db    0
.xdata$x:00003F95                 db    0
.xdata$x:00003F96                 db    0
.xdata$x:00003F97                 db    0
.xdata$x:00003F98                 db    0
.xdata$x:00003F99                 db    0
.xdata$x:00003F9A                 db    0
.xdata$x:00003F9B                 db    0
.xdata$x:00003F9C                 db    0
.xdata$x:00003F9D                 db    0
.xdata$x:00003F9E                 db    0
.xdata$x:00003F9F                 db    0
.xdata$x:00003FA0                 db    0
.xdata$x:00003FA1                 db    0
.xdata$x:00003FA2                 db    0
.xdata$x:00003FA3                 db    0
.xdata$x:00003FA4                 db    1
.xdata$x:00003FA5                 db    0
.xdata$x:00003FA6                 db    0
.xdata$x:00003FA7                 db    0
.xdata$x:00003FA8 __unwindtable$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z db 0FFh
.xdata$x:00003FA8                                         ; DATA XREF: .xdata$x:00003F8Co
.xdata$x:00003FA9                 db 0FFh
.xdata$x:00003FAA                 db 0FFh
.xdata$x:00003FAB                 db 0FFh
.xdata$x:00003FAC                 dd offset __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$0
.xdata$x:00003FB0                 db    0
.xdata$x:00003FB1                 db    0
.xdata$x:00003FB2                 db    0
.xdata$x:00003FB3                 db    0
.xdata$x:00003FB4                 dd offset __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$1
.xdata$x:00003FB8                 db    1
.xdata$x:00003FB9                 db    0
.xdata$x:00003FBA                 db    0
.xdata$x:00003FBB                 db    0
.xdata$x:00003FBC                 dd offset __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$2
.xdata$x:00003FC0                 db    2
.xdata$x:00003FC1                 db    0
.xdata$x:00003FC2                 db    0
.xdata$x:00003FC3                 db    0
.xdata$x:00003FC4                 dd offset __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$3
.xdata$x:00003FC8                 db    3
.xdata$x:00003FC9                 db    0
.xdata$x:00003FCA                 db    0
.xdata$x:00003FCB                 db    0
.xdata$x:00003FCC                 dd offset __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$4
.xdata$x:00003FD0                 db    4
.xdata$x:00003FD1                 db    0
.xdata$x:00003FD2                 db    0
.xdata$x:00003FD3                 db    0
.xdata$x:00003FD4                 dd offset __unwindfunclet$?EnumerateItems2@CDirItems@@QAEJABVUString@@0ABV?$CObjectVector@VUString@@@@PAV3@@Z$5
.xdata$x:00003FD8 __unwindtable$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z db 0FFh
.xdata$x:00003FD8                                         ; DATA XREF: .xdata$x:00003FF0o
.xdata$x:00003FD9                 db 0FFh
.xdata$x:00003FDA                 db 0FFh
.xdata$x:00003FDB                 db 0FFh
.xdata$x:00003FDC                 dd offset __unwindfunclet$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z$0
.xdata$x:00003FE0                 db    0
.xdata$x:00003FE1                 db    0
.xdata$x:00003FE2                 db    0
.xdata$x:00003FE3                 db    0
.xdata$x:00003FE4                 dd offset __unwindfunclet$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z$1
.xdata$x:00003FE8 __ehfuncinfo$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z db  22h ; "
.xdata$x:00003FE8                                         ; DATA XREF: __ehhandler$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z+11o
.xdata$x:00003FE9                 db    5
.xdata$x:00003FEA                 db  93h ; ô
.xdata$x:00003FEB                 db  19h
.xdata$x:00003FEC                 db    2
.xdata$x:00003FED                 db    0
.xdata$x:00003FEE                 db    0
.xdata$x:00003FEF                 db    0
.xdata$x:00003FF0                 dd offset __unwindtable$?SetLinkInfo@CDirItems@@QAEJAAUCDirItem@@ABUCFileInfo@NFind@NFile@NWindows@@ABVUString@@@Z
.xdata$x:00003FF4                 db    0
.xdata$x:00003FF5                 db    0
.xdata$x:00003FF6                 db    0
.xdata$x:00003FF7                 db    0
.xdata$x:00003FF8                 db    0
.xdata$x:00003FF9                 db    0
.xdata$x:00003FFA                 db    0
.xdata$x:00003FFB                 db    0
.xdata$x:00003FFC                 db    0
.xdata$x:00003FFD                 db    0
.xdata$x:00003FFE                 db    0
.xdata$x:00003FFF                 db    0
.xdata$x:00004000                 db    0
.xdata$x:00004001                 db    0
.xdata$x:00004002                 db    0
.xdata$x:00004003                 db    0
.xdata$x:00004004                 db    0
.xdata$x:00004005                 db    0
.xdata$x:00004006                 db    0
.xdata$x:00004007                 db    0
.xdata$x:00004008                 db    1
.xdata$x:00004009                 db    0
.xdata$x:0000400A                 db    0
.xdata$x:0000400B                 db    0
.xdata$x:0000400C __unwindtable$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z db 0FFh
.xdata$x:0000400C                                         ; DATA XREF: .xdata$x:0000401Co
.xdata$x:0000400D                 db 0FFh
.xdata$x:0000400E                 db 0FFh
.xdata$x:0000400F                 db 0FFh
.xdata$x:00004010                 dd offset __unwindfunclet$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z$0
.xdata$x:00004014 __ehfuncinfo$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z db  22h ; "
.xdata$x:00004014                                         ; DATA XREF: __ehhandler$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z+11o
.xdata$x:00004015                 db    5
.xdata$x:00004016                 db  93h ; ô
.xdata$x:00004017                 db  19h
.xdata$x:00004018                 db    1
.xdata$x:00004019                 db    0
.xdata$x:0000401A                 db    0
.xdata$x:0000401B                 db    0
.xdata$x:0000401C                 dd offset __unwindtable$?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z
.xdata$x:00004020                 db    0
.xdata$x:00004021                 db    0
.xdata$x:00004022                 db    0
.xdata$x:00004023                 db    0
.xdata$x:00004024                 db    0
.xdata$x:00004025                 db    0
.xdata$x:00004026                 db    0
.xdata$x:00004027                 db    0
.xdata$x:00004028                 db    0
.xdata$x:00004029                 db    0
.xdata$x:0000402A                 db    0
.xdata$x:0000402B                 db    0
.xdata$x:0000402C                 db    0
.xdata$x:0000402D                 db    0
.xdata$x:0000402E                 db    0
.xdata$x:0000402F                 db    0
.xdata$x:00004030                 db    0
.xdata$x:00004031                 db    0
.xdata$x:00004032                 db    0
.xdata$x:00004033                 db    0
.xdata$x:00004034                 db    1
.xdata$x:00004035                 db    0
.xdata$x:00004036                 db    0
.xdata$x:00004037                 db    0
.xdata$x:00004038 __ehfuncinfo$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z db  22h ; "
.xdata$x:00004038                                         ; DATA XREF: __ehhandler$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z+14o
.xdata$x:00004039                 db    5
.xdata$x:0000403A                 db  93h ; ô
.xdata$x:0000403B                 db  19h
.xdata$x:0000403C                 db  10h
.xdata$x:0000403D                 db    0
.xdata$x:0000403E                 db    0
.xdata$x:0000403F                 db    0
.xdata$x:00004040                 dd offset __unwindtable$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z
.xdata$x:00004044                 db    0
.xdata$x:00004045                 db    0
.xdata$x:00004046                 db    0
.xdata$x:00004047                 db    0
.xdata$x:00004048                 db    0
.xdata$x:00004049                 db    0
.xdata$x:0000404A                 db    0
.xdata$x:0000404B                 db    0
.xdata$x:0000404C                 db    0
.xdata$x:0000404D                 db    0
.xdata$x:0000404E                 db    0
.xdata$x:0000404F                 db    0
.xdata$x:00004050                 db    0
.xdata$x:00004051                 db    0
.xdata$x:00004052                 db    0
.xdata$x:00004053                 db    0
.xdata$x:00004054                 db    0
.xdata$x:00004055                 db    0
.xdata$x:00004056                 db    0
.xdata$x:00004057                 db    0
.xdata$x:00004058                 db    1
.xdata$x:00004059                 db    0
.xdata$x:0000405A                 db    0
.xdata$x:0000405B                 db    0
.xdata$x:0000405C __unwindtable$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z db 0FFh
.xdata$x:0000405C                                         ; DATA XREF: .xdata$x:00004040o
.xdata$x:0000405D                 db 0FFh
.xdata$x:0000405E                 db 0FFh
.xdata$x:0000405F                 db 0FFh
.xdata$x:00004060                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$0
.xdata$x:00004064                 align 8
.xdata$x:00004068                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$1
.xdata$x:0000406C                 db    1
.xdata$x:0000406D                 db    0
.xdata$x:0000406E                 db    0
.xdata$x:0000406F                 db    0
.xdata$x:00004070                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$2
.xdata$x:00004074                 db    2
.xdata$x:00004075                 db    0
.xdata$x:00004076                 db    0
.xdata$x:00004077                 db    0
.xdata$x:00004078                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$3
.xdata$x:0000407C                 db    2
.xdata$x:0000407D                 db    0
.xdata$x:0000407E                 db    0
.xdata$x:0000407F                 db    0
.xdata$x:00004080                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$4
.xdata$x:00004084                 db    2
.xdata$x:00004085                 db    0
.xdata$x:00004086                 db    0
.xdata$x:00004087                 db    0
.xdata$x:00004088                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$5
.xdata$x:0000408C                 align 10h
.xdata$x:00004090                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$6
.xdata$x:00004094                 db    6
.xdata$x:00004095                 db    0
.xdata$x:00004096                 db    0
.xdata$x:00004097                 db    0
.xdata$x:00004098                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$7
.xdata$x:0000409C                 db    7
.xdata$x:0000409D                 db    0
.xdata$x:0000409E                 db    0
.xdata$x:0000409F                 db    0
.xdata$x:000040A0                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$8
.xdata$x:000040A4                 db 0FFh
.xdata$x:000040A5                 db 0FFh
.xdata$x:000040A6                 db 0FFh
.xdata$x:000040A7                 db 0FFh
.xdata$x:000040A8                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$9
.xdata$x:000040AC                 db    9
.xdata$x:000040AD                 db    0
.xdata$x:000040AE                 db    0
.xdata$x:000040AF                 db    0
.xdata$x:000040B0                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$10
.xdata$x:000040B4                 db  0Ah
.xdata$x:000040B5                 db    0
.xdata$x:000040B6                 db    0
.xdata$x:000040B7                 db    0
.xdata$x:000040B8                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$11
.xdata$x:000040BC                 db 0FFh
.xdata$x:000040BD                 db 0FFh
.xdata$x:000040BE                 db 0FFh
.xdata$x:000040BF                 db 0FFh
.xdata$x:000040C0                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$12
.xdata$x:000040C4                 db  0Ch
.xdata$x:000040C5                 db    0
.xdata$x:000040C6                 db    0
.xdata$x:000040C7                 db    0
.xdata$x:000040C8                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$13
.xdata$x:000040CC                 db 0FFh
.xdata$x:000040CD                 db 0FFh
.xdata$x:000040CE                 db 0FFh
.xdata$x:000040CF                 db 0FFh
.xdata$x:000040D0                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$13
.xdata$x:000040D4                 db  0Eh
.xdata$x:000040D5                 db    0
.xdata$x:000040D6                 db    0
.xdata$x:000040D7                 db    0
.xdata$x:000040D8                 dd offset __unwindfunclet$?EnumerateDirItems@@YGJABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$14
.xdata$x:000040DC __unwindtable$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z db 0FFh
.xdata$x:000040DC                                         ; DATA XREF: .xdata$x:000040F4o
.xdata$x:000040DD                 db 0FFh
.xdata$x:000040DE                 db 0FFh
.xdata$x:000040DF                 db 0FFh
.xdata$x:000040E0                 dd offset __unwindfunclet$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$0
.xdata$x:000040E4                 align 8
.xdata$x:000040E8                 dd offset __unwindfunclet$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$1
.xdata$x:000040EC __ehfuncinfo$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z db  22h ; "
.xdata$x:000040EC                                         ; DATA XREF: __ehhandler$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z+11o
.xdata$x:000040ED                 db    5
.xdata$x:000040EE                 db  93h ; ô
.xdata$x:000040EF                 db  19h
.xdata$x:000040F0                 db    2
.xdata$x:000040F1                 db    0
.xdata$x:000040F2                 db    0
.xdata$x:000040F3                 db    0
.xdata$x:000040F4                 dd offset __unwindtable$?EnumerateDirItems_Spec@@YGJABVCCensorNode@NWildcard@@HHABVUString@@1ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z
.xdata$x:000040F8                 db    0
.xdata$x:000040F9                 db    0
.xdata$x:000040FA                 db    0
.xdata$x:000040FB                 db    0
.xdata$x:000040FC                 db    0
.xdata$x:000040FD                 db    0
.xdata$x:000040FE                 db    0
.xdata$x:000040FF                 db    0
.xdata$x:00004100                 db    0
.xdata$x:00004101                 db    0
.xdata$x:00004102                 db    0
.xdata$x:00004103                 db    0
.xdata$x:00004104                 db    0
.xdata$x:00004105                 db    0
.xdata$x:00004106                 db    0
.xdata$x:00004107                 db    0
.xdata$x:00004108                 db    0
.xdata$x:00004109                 db    0
.xdata$x:0000410A                 db    0
.xdata$x:0000410B                 db    0
.xdata$x:0000410C                 db    1
.xdata$x:0000410D                 db    0
.xdata$x:0000410E                 db    0
.xdata$x:0000410F                 db    0
.xdata$x:00004110 __ehfuncinfo$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z db  22h ; "
.xdata$x:00004110                                         ; DATA XREF: __ehhandler$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z+14o
.xdata$x:00004111                 db    5
.xdata$x:00004112                 db  93h ; ô
.xdata$x:00004113                 db  19h
.xdata$x:00004114                 db    6
.xdata$x:00004115                 db    0
.xdata$x:00004116                 db    0
.xdata$x:00004117                 db    0
.xdata$x:00004118                 dd offset __unwindtable$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z
.xdata$x:0000411C                 db    0
.xdata$x:0000411D                 db    0
.xdata$x:0000411E                 db    0
.xdata$x:0000411F                 db    0
.xdata$x:00004120                 db    0
.xdata$x:00004121                 db    0
.xdata$x:00004122                 db    0
.xdata$x:00004123                 db    0
.xdata$x:00004124                 db    0
.xdata$x:00004125                 db    0
.xdata$x:00004126                 db    0
.xdata$x:00004127                 db    0
.xdata$x:00004128                 db    0
.xdata$x:00004129                 db    0
.xdata$x:0000412A                 db    0
.xdata$x:0000412B                 db    0
.xdata$x:0000412C                 db    0
.xdata$x:0000412D                 db    0
.xdata$x:0000412E                 db    0
.xdata$x:0000412F                 db    0
.xdata$x:00004130                 db    1
.xdata$x:00004131                 db    0
.xdata$x:00004132                 db    0
.xdata$x:00004133                 db    0
.xdata$x:00004134 __unwindtable$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z db 0FFh
.xdata$x:00004134                                         ; DATA XREF: .xdata$x:00004118o
.xdata$x:00004135                 db 0FFh
.xdata$x:00004136                 db 0FFh
.xdata$x:00004137                 db 0FFh
.xdata$x:00004138                 dd offset __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$0
.xdata$x:0000413C                 align 10h
.xdata$x:00004140                 dd offset __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$1
.xdata$x:00004144                 db    1
.xdata$x:00004145                 db    0
.xdata$x:00004146                 db    0
.xdata$x:00004147                 db    0
.xdata$x:00004148                 dd offset __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$2
.xdata$x:0000414C                 db    1
.xdata$x:0000414D                 db    0
.xdata$x:0000414E                 db    0
.xdata$x:0000414F                 db    0
.xdata$x:00004150                 dd offset __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$3
.xdata$x:00004154                 db    3
.xdata$x:00004155                 db    0
.xdata$x:00004156                 db    0
.xdata$x:00004157                 db    0
.xdata$x:00004158                 dd offset __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$4
.xdata$x:0000415C                 db    4
.xdata$x:0000415D                 db    0
.xdata$x:0000415E                 db    0
.xdata$x:0000415F                 db    0
.xdata$x:00004160                 dd offset __unwindfunclet$?EnumerateAltStreams@@YGJABUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@@Z$5
.xdata$x:00004164 __ehfuncinfo$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z db  22h ; "
.xdata$x:00004164                                         ; DATA XREF: __ehhandler$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z+14o
.xdata$x:00004165                 db    5
.xdata$x:00004166                 db  93h ; ô
.xdata$x:00004167                 db  19h
.xdata$x:00004168                 db    5
.xdata$x:00004169                 db    0
.xdata$x:0000416A                 db    0
.xdata$x:0000416B                 db    0
.xdata$x:0000416C                 dd offset __unwindtable$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z
.xdata$x:00004170                 db    0
.xdata$x:00004171                 db    0
.xdata$x:00004172                 db    0
.xdata$x:00004173                 db    0
.xdata$x:00004174                 db    0
.xdata$x:00004175                 db    0
.xdata$x:00004176                 db    0
.xdata$x:00004177                 db    0
.xdata$x:00004178                 db    0
.xdata$x:00004179                 db    0
.xdata$x:0000417A                 db    0
.xdata$x:0000417B                 db    0
.xdata$x:0000417C                 db    0
.xdata$x:0000417D                 db    0
.xdata$x:0000417E                 db    0
.xdata$x:0000417F                 db    0
.xdata$x:00004180                 db    0
.xdata$x:00004181                 db    0
.xdata$x:00004182                 db    0
.xdata$x:00004183                 db    0
.xdata$x:00004184                 db    1
.xdata$x:00004185                 db    0
.xdata$x:00004186                 db    0
.xdata$x:00004187                 db    0
.xdata$x:00004188 __unwindtable$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z db 0FFh
.xdata$x:00004188                                         ; DATA XREF: .xdata$x:0000416Co
.xdata$x:00004189                 db 0FFh
.xdata$x:0000418A                 db 0FFh
.xdata$x:0000418B                 db 0FFh
.xdata$x:0000418C                 dd offset __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$0
.xdata$x:00004190                 db    0
.xdata$x:00004191                 db    0
.xdata$x:00004192                 db    0
.xdata$x:00004193                 db    0
.xdata$x:00004194                 dd offset __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$1
.xdata$x:00004198                 db    1
.xdata$x:00004199                 db    0
.xdata$x:0000419A                 db    0
.xdata$x:0000419B                 db    0
.xdata$x:0000419C                 dd offset __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$2
.xdata$x:000041A0                 db    1
.xdata$x:000041A1                 db    0
.xdata$x:000041A2                 db    0
.xdata$x:000041A3                 db    0
.xdata$x:000041A4                 dd offset __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$3
.xdata$x:000041A8                 db    1
.xdata$x:000041A9                 db    0
.xdata$x:000041AA                 db    0
.xdata$x:000041AB                 db    0
.xdata$x:000041AC                 dd offset __unwindfunclet$?EnumerateForItem@@YGJAAUCFileInfo@NFind@NFile@NWindows@@ABVCCensorNode@NWildcard@@HHABVUString@@ABV?$CObjectVector@VUString@@@@AAVCDirItems@@_N@Z$4
.xdata$x:000041B0 __unwindtable$?IsVirtualFsFolder@@YG_NABVUString@@0@Z db 0FFh
.xdata$x:000041B0                                         ; DATA XREF: .xdata$x:000041C0o
.xdata$x:000041B1                 db 0FFh
.xdata$x:000041B2                 db 0FFh
.xdata$x:000041B3                 db 0FFh
.xdata$x:000041B4                 dd offset __unwindfunclet$?IsVirtualFsFolder@@YG_NABVUString@@0@Z$0
.xdata$x:000041B8 __ehfuncinfo$?IsVirtualFsFolder@@YG_NABVUString@@0@Z db  22h ; "
.xdata$x:000041B8                                         ; DATA XREF: __ehhandler$?IsVirtualFsFolder@@YG_NABVUString@@0@Z+11o
.xdata$x:000041B9                 db    5
.xdata$x:000041BA                 db  93h ; ô
.xdata$x:000041BB                 db  19h
.xdata$x:000041BC                 db    1
.xdata$x:000041BD                 db    0
.xdata$x:000041BE                 db    0
.xdata$x:000041BF                 db    0
.xdata$x:000041C0                 dd offset __unwindtable$?IsVirtualFsFolder@@YG_NABVUString@@0@Z
.xdata$x:000041C4                 db    0
.xdata$x:000041C5                 db    0
.xdata$x:000041C6                 db    0
.xdata$x:000041C7                 db    0
.xdata$x:000041C8                 db    0
.xdata$x:000041C9                 db    0
.xdata$x:000041CA                 db    0
.xdata$x:000041CB                 db    0
.xdata$x:000041CC                 db    0
.xdata$x:000041CD                 db    0
.xdata$x:000041CE                 db    0
.xdata$x:000041CF                 db    0
.xdata$x:000041D0                 db    0
.xdata$x:000041D1                 db    0
.xdata$x:000041D2                 db    0
.xdata$x:000041D3                 db    0
.xdata$x:000041D4                 db    0
.xdata$x:000041D5                 db    0
.xdata$x:000041D6                 db    0
.xdata$x:000041D7                 db    0
.xdata$x:000041D8                 db    1
.xdata$x:000041D9                 db    0
.xdata$x:000041DA                 db    0
.xdata$x:000041DB                 db    0
.xdata$x:000041DC __ehfuncinfo$?FillFixedReparse@CDirItems@@QAEXXZ db  22h ; "
.xdata$x:000041DC                                         ; DATA XREF: __ehhandler$?FillFixedReparse@CDirItems@@QAEXXZ+14o
.xdata$x:000041DD                 db    5
.xdata$x:000041DE                 db  93h ; ô
.xdata$x:000041DF                 db  19h
.xdata$x:000041E0                 db  0Ah
.xdata$x:000041E1                 db    0
.xdata$x:000041E2                 db    0
.xdata$x:000041E3                 db    0
.xdata$x:000041E4                 dd offset __unwindtable$?FillFixedReparse@CDirItems@@QAEXXZ
.xdata$x:000041E8                 db    0
.xdata$x:000041E9                 db    0
.xdata$x:000041EA                 db    0
.xdata$x:000041EB                 db    0
.xdata$x:000041EC                 db    0
.xdata$x:000041ED                 db    0
.xdata$x:000041EE                 db    0
.xdata$x:000041EF                 db    0
.xdata$x:000041F0                 db    0
.xdata$x:000041F1                 db    0
.xdata$x:000041F2                 db    0
.xdata$x:000041F3                 db    0
.xdata$x:000041F4                 db    0
.xdata$x:000041F5                 db    0
.xdata$x:000041F6                 db    0
.xdata$x:000041F7                 db    0
.xdata$x:000041F8                 db    0
.xdata$x:000041F9                 db    0
.xdata$x:000041FA                 db    0
.xdata$x:000041FB                 db    0
.xdata$x:000041FC                 db    1
.xdata$x:000041FD                 db    0
.xdata$x:000041FE                 db    0
.xdata$x:000041FF                 db    0
.xdata$x:00004200 __unwindtable$?FillFixedReparse@CDirItems@@QAEXXZ db 0FFh
.xdata$x:00004200                                         ; DATA XREF: .xdata$x:000041E4o
.xdata$x:00004201                 db 0FFh
.xdata$x:00004202                 db 0FFh
.xdata$x:00004203                 db 0FFh
.xdata$x:00004204                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$0
.xdata$x:00004208                 db    0
.xdata$x:00004209                 db    0
.xdata$x:0000420A                 db    0
.xdata$x:0000420B                 db    0
.xdata$x:0000420C                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$1
.xdata$x:00004210                 db    1
.xdata$x:00004211                 db    0
.xdata$x:00004212                 db    0
.xdata$x:00004213                 db    0
.xdata$x:00004214                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$2
.xdata$x:00004218                 db    2
.xdata$x:00004219                 db    0
.xdata$x:0000421A                 db    0
.xdata$x:0000421B                 db    0
.xdata$x:0000421C                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$3
.xdata$x:00004220                 db    2
.xdata$x:00004221                 db    0
.xdata$x:00004222                 db    0
.xdata$x:00004223                 db    0
.xdata$x:00004224                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$4
.xdata$x:00004228                 db    4
.xdata$x:00004229                 db    0
.xdata$x:0000422A                 db    0
.xdata$x:0000422B                 db    0
.xdata$x:0000422C                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$5
.xdata$x:00004230                 db    5
.xdata$x:00004231                 db    0
.xdata$x:00004232                 db    0
.xdata$x:00004233                 db    0
.xdata$x:00004234                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$6
.xdata$x:00004238                 db    6
.xdata$x:00004239                 db    0
.xdata$x:0000423A                 db    0
.xdata$x:0000423B                 db    0
.xdata$x:0000423C                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$7
.xdata$x:00004240                 db    6
.xdata$x:00004241                 db    0
.xdata$x:00004242                 db    0
.xdata$x:00004243                 db    0
.xdata$x:00004244                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$8
.xdata$x:00004248                 db    8
.xdata$x:00004249                 db    0
.xdata$x:0000424A                 db    0
.xdata$x:0000424B                 db    0
.xdata$x:0000424C                 dd offset __unwindfunclet$?FillFixedReparse@CDirItems@@QAEXXZ$9
.xdata$x:0000424C _xdata$x        ends
.xdata$x:0000424C
.rtc$TMZ:00004250 ; ===========================================================================
.rtc$TMZ:00004250
.rtc$TMZ:00004250 ; Segment type: Pure data
.rtc$TMZ:00004250 ; Segment permissions: Read
.rtc$TMZ:00004250 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00004250                 assume cs:_rtc$TMZ
.rtc$TMZ:00004250                 ;org 4250h
.rtc$TMZ:00004250 ; COMDAT (pick any)
.rtc$TMZ:00004250 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00004250 _rtc$TMZ        ends
.rtc$TMZ:00004250
.rtc$IMZ:00004254 ; ===========================================================================
.rtc$IMZ:00004254
.rtc$IMZ:00004254 ; Segment type: Pure data
.rtc$IMZ:00004254 ; Segment permissions: Read
.rtc$IMZ:00004254 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00004254                 assume cs:_rtc$IMZ
.rtc$IMZ:00004254                 ;org 4254h
.rtc$IMZ:00004254 ; COMDAT (pick any)
.rtc$IMZ:00004254 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00004254 _rtc$IMZ        ends
.rtc$IMZ:00004254
.text:00004258 ; ===========================================================================
.text:00004258
.text:00004258 ; Segment type: Pure code
.text:00004258 ; Segment permissions: Read/Execute
.text:00004258 _text           segment para public 'CODE' use32
.text:00004258                 assume cs:_text
.text:00004258                 ;org 4258h
.text:00004258 ; COMDAT (pick any)
.text:00004258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004258
.text:00004258 ; =============== S U B R O U T I N E =======================================
.text:00004258
.text:00004258 ; Attributes: bp-based frame
.text:00004258
.text:00004258 ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::IsDir(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00004258                 public ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
.text:00004258 ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:00004258                                         ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+C9p
.text:00004258                                         ; CDirItems::EnumerateDir(int,int,UString const &)+27Fp ...
.text:00004258
.text:00004258 var_4           = dword ptr -4
.text:00004258
.text:00004258                 push    ebp
.text:00004259                 mov     ebp, esp
.text:0000425B                 push    ecx
.text:0000425C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004263                 mov     [ebp+var_4], ecx
.text:00004266                 push    10h             ; unsigned int
.text:00004268                 mov     ecx, [ebp+var_4] ; this
.text:0000426B                 call    ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask(uint)
.text:00004270                 add     esp, 4
.text:00004273                 cmp     ebp, esp
.text:00004275                 call    __RTC_CheckEsp
.text:0000427A                 mov     esp, ebp
.text:0000427C                 pop     ebp
.text:0000427D                 retn
.text:0000427D ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ endp
.text:0000427D
.text:0000427D ; ---------------------------------------------------------------------------
.text:0000427E                 align 10h
.text:0000427E _text           ends
.text:0000427E
.text:00004280 ; ===========================================================================
.text:00004280
.text:00004280 ; Segment type: Pure code
.text:00004280 ; Segment permissions: Read/Execute
.text:00004280 _text           segment para public 'CODE' use32
.text:00004280                 assume cs:_text
.text:00004280                 ;org 4280h
.text:00004280 ; COMDAT (pick any)
.text:00004280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004280
.text:00004280 ; =============== S U B R O U T I N E =======================================
.text:00004280
.text:00004280 ; Attributes: bp-based frame
.text:00004280
.text:00004280 ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::MatchesMask(NWindows::NFile::NFind::CFileInfoBase *this, unsigned int)
.text:00004280                 public ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z
.text:00004280 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z proc near
.text:00004280                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfoBase::IsDir(void)+13p
.text:00004280                                         ; NWindows::NFile::NFind::CFileInfoBase::HasReparsePoint(void)+16p
.text:00004280
.text:00004280 var_4           = dword ptr -4
.text:00004280 arg_0           = dword ptr  8
.text:00004280
.text:00004280                 push    ebp
.text:00004281                 mov     ebp, esp
.text:00004283                 push    ecx
.text:00004284                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000428B                 mov     [ebp+var_4], ecx
.text:0000428E                 mov     eax, [ebp+var_4]
.text:00004291                 mov     eax, [eax+20h]
.text:00004294                 and     eax, [ebp+arg_0]
.text:00004297                 neg     eax
.text:00004299                 sbb     eax, eax
.text:0000429B                 neg     eax
.text:0000429D                 mov     esp, ebp
.text:0000429F                 pop     ebp
.text:000042A0                 retn    4
.text:000042A0 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z endp
.text:000042A0
.text:000042A0 ; ---------------------------------------------------------------------------
.text:000042A3                 align 4
.text:000042A3 _text           ends
.text:000042A3
.text:000042A4 ; ===========================================================================
.text:000042A4
.text:000042A4 ; Segment type: Pure code
.text:000042A4 ; Segment permissions: Read/Execute
.text:000042A4 _text           segment para public 'CODE' use32
.text:000042A4                 assume cs:_text
.text:000042A4                 ;org 42A4h
.text:000042A4 ; COMDAT (pick any)
.text:000042A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000042A4
.text:000042A4 ; =============== S U B R O U T I N E =======================================
.text:000042A4
.text:000042A4 ; Attributes: bp-based frame
.text:000042A4
.text:000042A4 ; _DWORD __thiscall CDirItem::CDirItem(CDirItem *__hidden this)
.text:000042A4                 public ??0CDirItem@@QAE@XZ
.text:000042A4 ??0CDirItem@@QAE@XZ proc near           ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+3Dp
.text:000042A4
.text:000042A4 var_10          = dword ptr -10h
.text:000042A4 var_C           = dword ptr -0Ch
.text:000042A4 var_4           = dword ptr -4
.text:000042A4
.text:000042A4                 push    ebp
.text:000042A5                 mov     ebp, esp
.text:000042A7                 push    0FFFFFFFFh
.text:000042A9                 push    offset __ehhandler$??0CDirItem@@QAE@XZ
.text:000042AE                 mov     eax, large fs:0
.text:000042B4                 push    eax
.text:000042B5                 push    ecx
.text:000042B6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000042BD                 mov     eax, dword ptr ds:___security_cookie
.text:000042C2                 xor     eax, ebp
.text:000042C4                 push    eax
.text:000042C5                 lea     eax, [ebp+var_C]
.text:000042C8                 mov     large fs:0, eax
.text:000042CE                 mov     [ebp+var_10], ecx
.text:000042D1                 mov     ecx, [ebp+var_10]
.text:000042D4                 add     ecx, 20h ; ' '
.text:000042D7                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000042DC                 mov     [ebp+var_4], 0
.text:000042E3                 mov     ecx, [ebp+var_10]
.text:000042E6                 add     ecx, 2Ch ; ','
.text:000042E9                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:000042EE                 mov     byte ptr [ebp+var_4], 1
.text:000042F2                 mov     ecx, [ebp+var_10]
.text:000042F5                 add     ecx, 34h ; '4'
.text:000042F8                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:000042FD                 mov     eax, [ebp+var_10]
.text:00004300                 mov     dword ptr [eax+40h], 0FFFFFFFFh
.text:00004307                 mov     ecx, [ebp+var_10]
.text:0000430A                 mov     dword ptr [ecx+44h], 0FFFFFFFFh
.text:00004311                 mov     edx, [ebp+var_10]
.text:00004314                 mov     dword ptr [edx+48h], 0FFFFFFFFh
.text:0000431B                 mov     eax, [ebp+var_10]
.text:0000431E                 mov     byte ptr [eax+4Ch], 0
.text:00004322                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004329                 mov     eax, [ebp+var_10]
.text:0000432C                 mov     ecx, [ebp+var_C]
.text:0000432F                 mov     large fs:0, ecx
.text:00004336                 pop     ecx
.text:00004337                 add     esp, 10h
.text:0000433A                 cmp     ebp, esp
.text:0000433C                 call    __RTC_CheckEsp
.text:00004341                 mov     esp, ebp
.text:00004343                 pop     ebp
.text:00004344                 retn
.text:00004344 ??0CDirItem@@QAE@XZ endp
.text:00004344
.text:00004344 ; ---------------------------------------------------------------------------
.text:00004345                 align 4
.text:00004345 _text           ends
.text:00004345
.text$x:00004348 ; ===========================================================================
.text$x:00004348
.text$x:00004348 ; Segment type: Pure code
.text$x:00004348 ; Segment permissions: Read/Execute
.text$x:00004348 _text$x         segment para public 'CODE' use32
.text$x:00004348                 assume cs:_text$x
.text$x:00004348                 ;org 4348h
.text$x:00004348 ; COMDAT (pick associative to section at 42A4)
.text$x:00004348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004348
.text$x:00004348 ; =============== S U B R O U T I N E =======================================
.text$x:00004348
.text$x:00004348
.text$x:00004348 __unwindfunclet$??0CDirItem@@QAE@XZ$0 proc near
.text$x:00004348                                         ; DATA XREF: .xdata$x:00004380o
.text$x:00004348                 mov     ecx, [ebp-10h]
.text$x:0000434B                 add     ecx, 20h ; ' '  ; this
.text$x:0000434E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000434E __unwindfunclet$??0CDirItem@@QAE@XZ$0 endp
.text$x:0000434E
.text$x:00004353
.text$x:00004353 ; =============== S U B R O U T I N E =======================================
.text$x:00004353
.text$x:00004353
.text$x:00004353 __unwindfunclet$??0CDirItem@@QAE@XZ$1 proc near
.text$x:00004353                                         ; DATA XREF: .xdata$x:00004388o
.text$x:00004353                 mov     ecx, [ebp-10h]
.text$x:00004356                 add     ecx, 2Ch ; ','
.text$x:00004359                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:00004359 __unwindfunclet$??0CDirItem@@QAE@XZ$1 endp
.text$x:00004359
.text$x:0000435E
.text$x:0000435E ; =============== S U B R O U T I N E =======================================
.text$x:0000435E
.text$x:0000435E
.text$x:0000435E __ehhandler$??0CDirItem@@QAE@XZ proc near
.text$x:0000435E                                         ; DATA XREF: CDirItem::CDirItem(void)+5o
.text$x:0000435E
.text$x:0000435E arg_4           = dword ptr  8
.text$x:0000435E
.text$x:0000435E                 mov     edx, [esp+arg_4]
.text$x:00004362                 lea     eax, [edx+0Ch]
.text$x:00004365                 mov     ecx, [edx-8]
.text$x:00004368                 xor     ecx, eax
.text$x:0000436A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000436F                 mov     eax, offset __ehfuncinfo$??0CDirItem@@QAE@XZ
.text$x:00004374                 jmp     ___CxxFrameHandler3
.text$x:00004374 __ehhandler$??0CDirItem@@QAE@XZ endp
.text$x:00004374
.text$x:00004374 ; ---------------------------------------------------------------------------
.text$x:00004379                 align 4
.text$x:00004379 _text$x         ends
.text$x:00004379
.xdata$x:0000437C ; ===========================================================================
.xdata$x:0000437C
.xdata$x:0000437C ; Segment type: Pure data
.xdata$x:0000437C ; Segment permissions: Read
.xdata$x:0000437C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000437C                 assume cs:_xdata$x
.xdata$x:0000437C                 ;org 437Ch
.xdata$x:0000437C ; COMDAT (pick associative to section at 42A4)
.xdata$x:0000437C __unwindtable$??0CDirItem@@QAE@XZ db 0FFh ; DATA XREF: .xdata$x:00004394o
.xdata$x:0000437D                 db 0FFh
.xdata$x:0000437E                 db 0FFh
.xdata$x:0000437F                 db 0FFh
.xdata$x:00004380                 dd offset __unwindfunclet$??0CDirItem@@QAE@XZ$0
.xdata$x:00004384                 align 8
.xdata$x:00004388                 dd offset __unwindfunclet$??0CDirItem@@QAE@XZ$1
.xdata$x:0000438C __ehfuncinfo$??0CDirItem@@QAE@XZ db  22h ; "
.xdata$x:0000438C                                         ; DATA XREF: __ehhandler$??0CDirItem@@QAE@XZ+11o
.xdata$x:0000438D                 db    5
.xdata$x:0000438E                 db  93h ; ô
.xdata$x:0000438F                 db  19h
.xdata$x:00004390                 db    2
.xdata$x:00004391                 db    0
.xdata$x:00004392                 db    0
.xdata$x:00004393                 db    0
.xdata$x:00004394                 dd offset __unwindtable$??0CDirItem@@QAE@XZ
.xdata$x:00004398                 db    0
.xdata$x:00004399                 db    0
.xdata$x:0000439A                 db    0
.xdata$x:0000439B                 db    0
.xdata$x:0000439C                 db    0
.xdata$x:0000439D                 db    0
.xdata$x:0000439E                 db    0
.xdata$x:0000439F                 db    0
.xdata$x:000043A0                 db    0
.xdata$x:000043A1                 db    0
.xdata$x:000043A2                 db    0
.xdata$x:000043A3                 db    0
.xdata$x:000043A4                 db    0
.xdata$x:000043A5                 db    0
.xdata$x:000043A6                 db    0
.xdata$x:000043A7                 db    0
.xdata$x:000043A8                 db    0
.xdata$x:000043A9                 db    0
.xdata$x:000043AA                 db    0
.xdata$x:000043AB                 db    0
.xdata$x:000043AC                 db    1
.xdata$x:000043AD                 db    0
.xdata$x:000043AE                 db    0
.xdata$x:000043AF                 db    0
.xdata$x:000043AF _xdata$x        ends
.xdata$x:000043AF
.text:000043B0 ; ===========================================================================
.text:000043B0
.text:000043B0 ; Segment type: Pure code
.text:000043B0 ; Segment permissions: Read/Execute
.text:000043B0 _text           segment para public 'CODE' use32
.text:000043B0                 assume cs:_text
.text:000043B0                 ;org 43B0h
.text:000043B0 ; COMDAT (pick any)
.text:000043B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043B0
.text:000043B0 ; =============== S U B R O U T I N E =======================================
.text:000043B0
.text:000043B0 ; Attributes: bp-based frame
.text:000043B0
.text:000043B0 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:000043B0                 public ??1UString@@QAE@XZ
.text:000043B0 ??1UString@@QAE@XZ proc near            ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+156p
.text:000043B0                                         ; CDirItems::EnumerateDir(int,int,UString const &)+A1p ...
.text:000043B0
.text:000043B0 var_8           = dword ptr -8
.text:000043B0 var_4           = dword ptr -4
.text:000043B0
.text:000043B0                 push    ebp
.text:000043B1                 mov     ebp, esp
.text:000043B3                 sub     esp, 8
.text:000043B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000043BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043C4                 mov     [ebp+var_4], ecx
.text:000043C7                 mov     eax, [ebp+var_4]
.text:000043CA                 mov     ecx, [eax]
.text:000043CC                 mov     [ebp+var_8], ecx
.text:000043CF                 mov     edx, [ebp+var_8]
.text:000043D2                 push    edx             ; void *
.text:000043D3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000043D8                 add     esp, 4
.text:000043DB                 add     esp, 8
.text:000043DE                 cmp     ebp, esp
.text:000043E0                 call    __RTC_CheckEsp
.text:000043E5                 mov     esp, ebp
.text:000043E7                 pop     ebp
.text:000043E8                 retn
.text:000043E8 ??1UString@@QAE@XZ endp
.text:000043E8
.text:000043E8 ; ---------------------------------------------------------------------------
.text:000043E9                 align 4
.text:000043E9 _text           ends
.text:000043E9
.text:000043EC ; ===========================================================================
.text:000043EC
.text:000043EC ; Segment type: Pure code
.text:000043EC ; Segment permissions: Read/Execute
.text:000043EC _text           segment para public 'CODE' use32
.text:000043EC                 assume cs:_text
.text:000043EC                 ;org 43ECh
.text:000043EC ; COMDAT (pick any)
.text:000043EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043EC
.text:000043EC ; =============== S U B R O U T I N E =======================================
.text:000043EC
.text:000043EC ; Attributes: bp-based frame
.text:000043EC
.text:000043EC ; _DWORD __thiscall CDirItem::~CDirItem(CDirItem *__hidden this)
.text:000043EC                 public ??1CDirItem@@QAE@XZ
.text:000043EC ??1CDirItem@@QAE@XZ proc near           ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+16Ap
.text:000043EC                                         ; __unwindfunclet$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z$0+3j ...
.text:000043EC
.text:000043EC var_10          = dword ptr -10h
.text:000043EC var_C           = dword ptr -0Ch
.text:000043EC var_4           = dword ptr -4
.text:000043EC
.text:000043EC                 push    ebp
.text:000043ED                 mov     ebp, esp
.text:000043EF                 push    0FFFFFFFFh
.text:000043F1                 push    offset __ehhandler$??1CDirItem@@QAE@XZ
.text:000043F6                 mov     eax, large fs:0
.text:000043FC                 push    eax
.text:000043FD                 push    ecx
.text:000043FE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004405                 mov     eax, dword ptr ds:___security_cookie
.text:0000440A                 xor     eax, ebp
.text:0000440C                 push    eax
.text:0000440D                 lea     eax, [ebp+var_C]
.text:00004410                 mov     large fs:0, eax
.text:00004416                 mov     [ebp+var_10], ecx
.text:00004419                 mov     [ebp+var_4], 1
.text:00004420                 mov     ecx, [ebp+var_10]
.text:00004423                 add     ecx, 34h ; '4'
.text:00004426                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000442B                 mov     byte ptr [ebp+var_4], 0
.text:0000442F                 mov     ecx, [ebp+var_10]
.text:00004432                 add     ecx, 2Ch ; ','
.text:00004435                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000443A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004441                 mov     ecx, [ebp+var_10]
.text:00004444                 add     ecx, 20h ; ' '  ; this
.text:00004447                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000444C                 mov     ecx, [ebp+var_C]
.text:0000444F                 mov     large fs:0, ecx
.text:00004456                 pop     ecx
.text:00004457                 add     esp, 10h
.text:0000445A                 cmp     ebp, esp
.text:0000445C                 call    __RTC_CheckEsp
.text:00004461                 mov     esp, ebp
.text:00004463                 pop     ebp
.text:00004464                 retn
.text:00004464 ??1CDirItem@@QAE@XZ endp
.text:00004464
.text:00004464 ; ---------------------------------------------------------------------------
.text:00004465                 align 4
.text:00004465 _text           ends
.text:00004465
.text$x:00004468 ; ===========================================================================
.text$x:00004468
.text$x:00004468 ; Segment type: Pure code
.text$x:00004468 ; Segment permissions: Read/Execute
.text$x:00004468 _text$x         segment para public 'CODE' use32
.text$x:00004468                 assume cs:_text$x
.text$x:00004468                 ;org 4468h
.text$x:00004468 ; COMDAT (pick associative to section at 43EC)
.text$x:00004468                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004468
.text$x:00004468 ; =============== S U B R O U T I N E =======================================
.text$x:00004468
.text$x:00004468
.text$x:00004468 __unwindfunclet$??1CDirItem@@QAE@XZ$0 proc near
.text$x:00004468                                         ; DATA XREF: .xdata$x:000044A0o
.text$x:00004468                 mov     ecx, [ebp-10h]
.text$x:0000446B                 add     ecx, 20h ; ' '  ; this
.text$x:0000446E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000446E __unwindfunclet$??1CDirItem@@QAE@XZ$0 endp
.text$x:0000446E
.text$x:00004473
.text$x:00004473 ; =============== S U B R O U T I N E =======================================
.text$x:00004473
.text$x:00004473
.text$x:00004473 __unwindfunclet$??1CDirItem@@QAE@XZ$1 proc near
.text$x:00004473                                         ; DATA XREF: .xdata$x:000044A8o
.text$x:00004473                 mov     ecx, [ebp-10h]
.text$x:00004476                 add     ecx, 2Ch ; ','
.text$x:00004479                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:00004479 __unwindfunclet$??1CDirItem@@QAE@XZ$1 endp
.text$x:00004479
.text$x:0000447E
.text$x:0000447E ; =============== S U B R O U T I N E =======================================
.text$x:0000447E
.text$x:0000447E
.text$x:0000447E __ehhandler$??1CDirItem@@QAE@XZ proc near
.text$x:0000447E                                         ; DATA XREF: CDirItem::~CDirItem(void)+5o
.text$x:0000447E
.text$x:0000447E arg_4           = dword ptr  8
.text$x:0000447E
.text$x:0000447E                 mov     edx, [esp+arg_4]
.text$x:00004482                 lea     eax, [edx+0Ch]
.text$x:00004485                 mov     ecx, [edx-8]
.text$x:00004488                 xor     ecx, eax
.text$x:0000448A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000448F                 mov     eax, offset __ehfuncinfo$??1CDirItem@@QAE@XZ
.text$x:00004494                 jmp     ___CxxFrameHandler3
.text$x:00004494 __ehhandler$??1CDirItem@@QAE@XZ endp
.text$x:00004494
.text$x:00004494 ; ---------------------------------------------------------------------------
.text$x:00004499                 align 4
.text$x:00004499 _text$x         ends
.text$x:00004499
.xdata$x:0000449C ; ===========================================================================
.xdata$x:0000449C
.xdata$x:0000449C ; Segment type: Pure data
.xdata$x:0000449C ; Segment permissions: Read
.xdata$x:0000449C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000449C                 assume cs:_xdata$x
.xdata$x:0000449C                 ;org 449Ch
.xdata$x:0000449C ; COMDAT (pick associative to section at 43EC)
.xdata$x:0000449C __unwindtable$??1CDirItem@@QAE@XZ db 0FFh ; DATA XREF: .xdata$x:000044B4o
.xdata$x:0000449D                 db 0FFh
.xdata$x:0000449E                 db 0FFh
.xdata$x:0000449F                 db 0FFh
.xdata$x:000044A0                 dd offset __unwindfunclet$??1CDirItem@@QAE@XZ$0
.xdata$x:000044A4                 align 8
.xdata$x:000044A8                 dd offset __unwindfunclet$??1CDirItem@@QAE@XZ$1
.xdata$x:000044AC __ehfuncinfo$??1CDirItem@@QAE@XZ db  22h ; "
.xdata$x:000044AC                                         ; DATA XREF: __ehhandler$??1CDirItem@@QAE@XZ+11o
.xdata$x:000044AD                 db    5
.xdata$x:000044AE                 db  93h ; ô
.xdata$x:000044AF                 db  19h
.xdata$x:000044B0                 db    2
.xdata$x:000044B1                 db    0
.xdata$x:000044B2                 db    0
.xdata$x:000044B3                 db    0
.xdata$x:000044B4                 dd offset __unwindtable$??1CDirItem@@QAE@XZ
.xdata$x:000044B8                 db    0
.xdata$x:000044B9                 db    0
.xdata$x:000044BA                 db    0
.xdata$x:000044BB                 db    0
.xdata$x:000044BC                 db    0
.xdata$x:000044BD                 db    0
.xdata$x:000044BE                 db    0
.xdata$x:000044BF                 db    0
.xdata$x:000044C0                 db    0
.xdata$x:000044C1                 db    0
.xdata$x:000044C2                 db    0
.xdata$x:000044C3                 db    0
.xdata$x:000044C4                 db    0
.xdata$x:000044C5                 db    0
.xdata$x:000044C6                 db    0
.xdata$x:000044C7                 db    0
.xdata$x:000044C8                 db    0
.xdata$x:000044C9                 db    0
.xdata$x:000044CA                 db    0
.xdata$x:000044CB                 db    0
.xdata$x:000044CC                 db    1
.xdata$x:000044CD                 db    0
.xdata$x:000044CE                 db    0
.xdata$x:000044CF                 db    0
.xdata$x:000044CF _xdata$x        ends
.xdata$x:000044CF
.text:000044D0 ; ===========================================================================
.text:000044D0
.text:000044D0 ; Segment type: Pure code
.text:000044D0 ; Segment permissions: Read/Execute
.text:000044D0 _text           segment para public 'CODE' use32
.text:000044D0                 assume cs:_text
.text:000044D0                 ;org 44D0h
.text:000044D0 ; COMDAT (pick any)
.text:000044D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000044D0
.text:000044D0 ; =============== S U B R O U T I N E =======================================
.text:000044D0
.text:000044D0 ; Attributes: bp-based frame
.text:000044D0
.text:000044D0 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text:000044D0                 public _wmemcpy
.text:000044D0 _wmemcpy        proc near               ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+D2p
.text:000044D0                                         ; CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+130p
.text:000044D0
.text:000044D0 Dst             = dword ptr  8
.text:000044D0 Src             = dword ptr  0Ch
.text:000044D0 arg_8           = dword ptr  10h
.text:000044D0
.text:000044D0                 push    ebp
.text:000044D1                 mov     ebp, esp
.text:000044D3                 mov     eax, [ebp+arg_8]
.text:000044D6                 shl     eax, 1
.text:000044D8                 push    eax             ; Size
.text:000044D9                 mov     ecx, [ebp+Src]
.text:000044DC                 push    ecx             ; Src
.text:000044DD                 mov     edx, [ebp+Dst]
.text:000044E0                 push    edx             ; Dst
.text:000044E1                 call    _memcpy
.text:000044E6                 add     esp, 0Ch
.text:000044E9                 cmp     ebp, esp
.text:000044EB                 call    __RTC_CheckEsp
.text:000044F0                 pop     ebp
.text:000044F1                 retn
.text:000044F1 _wmemcpy        endp
.text:000044F1
.text:000044F1 ; ---------------------------------------------------------------------------
.text:000044F2                 align 4
.text:000044F2 _text           ends
.text:000044F2
.text:000044F4 ; ===========================================================================
.text:000044F4
.text:000044F4 ; Segment type: Pure code
.text:000044F4 ; Segment permissions: Read/Execute
.text:000044F4 _text           segment para public 'CODE' use32
.text:000044F4                 assume cs:_text
.text:000044F4                 ;org 44F4h
.text:000044F4 ; COMDAT (pick any)
.text:000044F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000044F4
.text:000044F4 ; =============== S U B R O U T I N E =======================================
.text:000044F4
.text:000044F4 ; Attributes: bp-based frame
.text:000044F4
.text:000044F4 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:000044F4                 public ?Len@UString@@QBEIXZ
.text:000044F4 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+53p
.text:000044F4                                         ; CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+88p ...
.text:000044F4
.text:000044F4 var_4           = dword ptr -4
.text:000044F4
.text:000044F4                 push    ebp
.text:000044F5                 mov     ebp, esp
.text:000044F7                 push    ecx
.text:000044F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044FF                 mov     [ebp+var_4], ecx
.text:00004502                 mov     eax, [ebp+var_4]
.text:00004505                 mov     eax, [eax+4]
.text:00004508                 mov     esp, ebp
.text:0000450A                 pop     ebp
.text:0000450B                 retn
.text:0000450B ?Len@UString@@QBEIXZ endp
.text:0000450B
.text:0000450B _text           ends
.text:0000450B
.text:0000450C ; ===========================================================================
.text:0000450C
.text:0000450C ; Segment type: Pure code
.text:0000450C ; Segment permissions: Read/Execute
.text:0000450C _text           segment para public 'CODE' use32
.text:0000450C                 assume cs:_text
.text:0000450C                 ;org 450Ch
.text:0000450C ; COMDAT (pick any)
.text:0000450C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000450C
.text:0000450C ; =============== S U B R O U T I N E =======================================
.text:0000450C
.text:0000450C ; Attributes: bp-based frame
.text:0000450C
.text:0000450C ; public: __thiscall UString::operator wchar_t const *(void)const
.text:0000450C                 public ??BUString@@QBEPB_WXZ
.text:0000450C ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+C8p
.text:0000450C                                         ; CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+126p ...
.text:0000450C
.text:0000450C var_4           = dword ptr -4
.text:0000450C
.text:0000450C                 push    ebp
.text:0000450D                 mov     ebp, esp
.text:0000450F                 push    ecx
.text:00004510                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004517                 mov     [ebp+var_4], ecx
.text:0000451A                 mov     eax, [ebp+var_4]
.text:0000451D                 mov     eax, [eax]
.text:0000451F                 mov     esp, ebp
.text:00004521                 pop     ebp
.text:00004522                 retn
.text:00004522 ??BUString@@QBEPB_WXZ endp
.text:00004522
.text:00004522 ; ---------------------------------------------------------------------------
.text:00004523                 align 4
.text:00004523 _text           ends
.text:00004523
.text:00004524 ; ===========================================================================
.text:00004524
.text:00004524 ; Segment type: Pure code
.text:00004524 ; Segment permissions: Read/Execute
.text:00004524 _text           segment para public 'CODE' use32
.text:00004524                 assume cs:_text
.text:00004524                 ;org 4524h
.text:00004524 ; COMDAT (pick any)
.text:00004524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004524
.text:00004524 ; =============== S U B R O U T I N E =======================================
.text:00004524
.text:00004524 ; Attributes: bp-based frame
.text:00004524
.text:00004524 ; wchar_t *__thiscall UString::GetBuf_SetEnd(UString *this, unsigned int)
.text:00004524                 public ?GetBuf_SetEnd@UString@@QAEPA_WI@Z
.text:00004524 ?GetBuf_SetEnd@UString@@QAEPA_WI@Z proc near
.text:00004524                                         ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+9Cp
.text:00004524
.text:00004524 var_8           = dword ptr -8
.text:00004524 var_4           = dword ptr -4
.text:00004524 arg_0           = dword ptr  8
.text:00004524
.text:00004524                 push    ebp
.text:00004525                 mov     ebp, esp
.text:00004527                 sub     esp, 8
.text:0000452A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004531                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004538                 mov     [ebp+var_4], ecx
.text:0000453B                 mov     eax, [ebp+var_4]
.text:0000453E                 mov     ecx, [ebp+arg_0]
.text:00004541                 cmp     ecx, [eax+8]
.text:00004544                 jbe     short loc_4552
.text:00004546                 mov     edx, [ebp+arg_0]
.text:00004549                 push    edx             ; unsigned int
.text:0000454A                 mov     ecx, [ebp+var_4] ; this
.text:0000454D                 call    ?ReAlloc2@UString@@AAEXI@Z ; UString::ReAlloc2(uint)
.text:00004552
.text:00004552 loc_4552:                               ; CODE XREF: UString::GetBuf_SetEnd(uint)+20j
.text:00004552                 mov     eax, [ebp+var_4]
.text:00004555                 mov     ecx, [eax]
.text:00004557                 mov     [ebp+var_8], ecx
.text:0000455A                 xor     edx, edx
.text:0000455C                 mov     eax, [ebp+arg_0]
.text:0000455F                 mov     ecx, [ebp+var_8]
.text:00004562                 mov     [ecx+eax*2], dx
.text:00004566                 mov     edx, [ebp+var_4]
.text:00004569                 mov     eax, [ebp+arg_0]
.text:0000456C                 mov     [edx+4], eax
.text:0000456F                 mov     eax, [ebp+var_8]
.text:00004572                 add     esp, 8
.text:00004575                 cmp     ebp, esp
.text:00004577                 call    __RTC_CheckEsp
.text:0000457C                 mov     esp, ebp
.text:0000457E                 pop     ebp
.text:0000457F                 retn    4
.text:0000457F ?GetBuf_SetEnd@UString@@QAEPA_WI@Z endp
.text:0000457F
.text:0000457F ; ---------------------------------------------------------------------------
.text:00004582                 align 4
.text:00004582 _text           ends
.text:00004582
.text:00004584 ; ===========================================================================
.text:00004584
.text:00004584 ; Segment type: Pure code
.text:00004584 ; Segment permissions: Read/Execute
.text:00004584 _text           segment para public 'CODE' use32
.text:00004584                 assume cs:_text
.text:00004584                 ;org 4584h
.text:00004584 ; COMDAT (pick any)
.text:00004584                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004584
.text:00004584 ; =============== S U B R O U T I N E =======================================
.text:00004584
.text:00004584 ; Attributes: bp-based frame
.text:00004584
.text:00004584 ; _DWORD __thiscall CDirItemsStat::CDirItemsStat(CDirItemsStat *__hidden this)
.text:00004584                 public ??0CDirItemsStat@@QAE@XZ
.text:00004584 ??0CDirItemsStat@@QAE@XZ proc near      ; CODE XREF: CDirItems::CDirItems(void)+7Dp
.text:00004584
.text:00004584 var_4           = dword ptr -4
.text:00004584
.text:00004584                 push    ebp
.text:00004585                 mov     ebp, esp
.text:00004587                 push    ecx
.text:00004588                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000458F                 mov     [ebp+var_4], ecx
.text:00004592                 mov     eax, [ebp+var_4]
.text:00004595                 mov     dword ptr [eax], 0
.text:0000459B                 mov     dword ptr [eax+4], 0
.text:000045A2                 mov     ecx, [ebp+var_4]
.text:000045A5                 mov     dword ptr [ecx+8], 0
.text:000045AC                 mov     dword ptr [ecx+0Ch], 0
.text:000045B3                 mov     edx, [ebp+var_4]
.text:000045B6                 mov     dword ptr [edx+10h], 0
.text:000045BD                 mov     dword ptr [edx+14h], 0
.text:000045C4                 mov     eax, [ebp+var_4]
.text:000045C7                 mov     dword ptr [eax+18h], 0
.text:000045CE                 mov     dword ptr [eax+1Ch], 0
.text:000045D5                 mov     ecx, [ebp+var_4]
.text:000045D8                 mov     dword ptr [ecx+20h], 0
.text:000045DF                 mov     dword ptr [ecx+24h], 0
.text:000045E6                 mov     edx, [ebp+var_4]
.text:000045E9                 mov     dword ptr [edx+28h], 0
.text:000045F0                 mov     dword ptr [edx+2Ch], 0
.text:000045F7                 mov     eax, [ebp+var_4]
.text:000045FA                 mov     esp, ebp
.text:000045FC                 pop     ebp
.text:000045FD                 retn
.text:000045FD ??0CDirItemsStat@@QAE@XZ endp
.text:000045FD
.text:000045FD ; ---------------------------------------------------------------------------
.text:000045FE                 align 10h
.text:000045FE _text           ends
.text:000045FE
.text:00004600 ; ===========================================================================
.text:00004600
.text:00004600 ; Segment type: Pure code
.text:00004600 ; Segment permissions: Read/Execute
.text:00004600 _text           segment para public 'CODE' use32
.text:00004600                 assume cs:_text
.text:00004600                 ;org 4600h
.text:00004600 ; COMDAT (pick any)
.text:00004600                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004600
.text:00004600 ; =============== S U B R O U T I N E =======================================
.text:00004600
.text:00004600 ; Attributes: bp-based frame
.text:00004600
.text:00004600 ; public: __thiscall CUniqBlocks::CUniqBlocks(void)
.text:00004600                 public ??0CUniqBlocks@@QAE@XZ
.text:00004600 ??0CUniqBlocks@@QAE@XZ proc near        ; CODE XREF: CDirItems::CDirItems(void)+88p
.text:00004600
.text:00004600 var_10          = dword ptr -10h
.text:00004600 var_C           = dword ptr -0Ch
.text:00004600 var_4           = dword ptr -4
.text:00004600
.text:00004600                 push    ebp
.text:00004601                 mov     ebp, esp
.text:00004603                 push    0FFFFFFFFh
.text:00004605                 push    offset __ehhandler$??0CUniqBlocks@@QAE@XZ
.text:0000460A                 mov     eax, large fs:0
.text:00004610                 push    eax
.text:00004611                 push    ecx
.text:00004612                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004619                 mov     eax, dword ptr ds:___security_cookie
.text:0000461E                 xor     eax, ebp
.text:00004620                 push    eax
.text:00004621                 lea     eax, [ebp+var_C]
.text:00004624                 mov     large fs:0, eax
.text:0000462A                 mov     [ebp+var_10], ecx
.text:0000462D                 mov     ecx, [ebp+var_10]
.text:00004630                 call    ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::CObjectVector<CBuffer<uchar>>(void)
.text:00004635                 mov     [ebp+var_4], 0
.text:0000463C                 mov     ecx, [ebp+var_10]
.text:0000463F                 add     ecx, 0Ch
.text:00004642                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00004647                 mov     byte ptr [ebp+var_4], 1
.text:0000464B                 mov     ecx, [ebp+var_10]
.text:0000464E                 add     ecx, 18h
.text:00004651                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00004656                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000465D                 mov     eax, [ebp+var_10]
.text:00004660                 mov     ecx, [ebp+var_C]
.text:00004663                 mov     large fs:0, ecx
.text:0000466A                 pop     ecx
.text:0000466B                 add     esp, 10h
.text:0000466E                 cmp     ebp, esp
.text:00004670                 call    __RTC_CheckEsp
.text:00004675                 mov     esp, ebp
.text:00004677                 pop     ebp
.text:00004678                 retn
.text:00004678 ??0CUniqBlocks@@QAE@XZ endp
.text:00004678
.text:00004678 ; ---------------------------------------------------------------------------
.text:00004679                 align 4
.text:00004679 _text           ends
.text:00004679
.text$x:0000467C ; ===========================================================================
.text$x:0000467C
.text$x:0000467C ; Segment type: Pure code
.text$x:0000467C ; Segment permissions: Read/Execute
.text$x:0000467C _text$x         segment para public 'CODE' use32
.text$x:0000467C                 assume cs:_text$x
.text$x:0000467C                 ;org 467Ch
.text$x:0000467C ; COMDAT (pick associative to section at 4600)
.text$x:0000467C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000467C
.text$x:0000467C ; =============== S U B R O U T I N E =======================================
.text$x:0000467C
.text$x:0000467C
.text$x:0000467C __unwindfunclet$??0CUniqBlocks@@QAE@XZ$0 proc near
.text$x:0000467C                                         ; DATA XREF: .xdata$x:000046B0o
.text$x:0000467C                 mov     ecx, [ebp-10h]
.text$x:0000467F                 jmp     ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text$x:0000467F __unwindfunclet$??0CUniqBlocks@@QAE@XZ$0 endp
.text$x:0000467F
.text$x:00004684
.text$x:00004684 ; =============== S U B R O U T I N E =======================================
.text$x:00004684
.text$x:00004684
.text$x:00004684 __unwindfunclet$??0CUniqBlocks@@QAE@XZ$1 proc near
.text$x:00004684                                         ; DATA XREF: .xdata$x:000046B8o
.text$x:00004684                 mov     ecx, [ebp-10h]
.text$x:00004687                 add     ecx, 0Ch
.text$x:0000468A                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000468A __unwindfunclet$??0CUniqBlocks@@QAE@XZ$1 endp
.text$x:0000468A
.text$x:0000468F
.text$x:0000468F ; =============== S U B R O U T I N E =======================================
.text$x:0000468F
.text$x:0000468F
.text$x:0000468F __ehhandler$??0CUniqBlocks@@QAE@XZ proc near
.text$x:0000468F                                         ; DATA XREF: CUniqBlocks::CUniqBlocks(void)+5o
.text$x:0000468F
.text$x:0000468F arg_4           = dword ptr  8
.text$x:0000468F
.text$x:0000468F                 mov     edx, [esp+arg_4]
.text$x:00004693                 lea     eax, [edx+0Ch]
.text$x:00004696                 mov     ecx, [edx-8]
.text$x:00004699                 xor     ecx, eax
.text$x:0000469B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000046A0                 mov     eax, offset __ehfuncinfo$??0CUniqBlocks@@QAE@XZ
.text$x:000046A5                 jmp     ___CxxFrameHandler3
.text$x:000046A5 __ehhandler$??0CUniqBlocks@@QAE@XZ endp
.text$x:000046A5
.text$x:000046A5 ; ---------------------------------------------------------------------------
.text$x:000046AA                 align 4
.text$x:000046AA _text$x         ends
.text$x:000046AA
.xdata$x:000046AC ; ===========================================================================
.xdata$x:000046AC
.xdata$x:000046AC ; Segment type: Pure data
.xdata$x:000046AC ; Segment permissions: Read
.xdata$x:000046AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000046AC                 assume cs:_xdata$x
.xdata$x:000046AC                 ;org 46ACh
.xdata$x:000046AC ; COMDAT (pick associative to section at 4600)
.xdata$x:000046AC __unwindtable$??0CUniqBlocks@@QAE@XZ db 0FFh
.xdata$x:000046AC                                         ; DATA XREF: .xdata$x:000046C4o
.xdata$x:000046AD                 db 0FFh
.xdata$x:000046AE                 db 0FFh
.xdata$x:000046AF                 db 0FFh
.xdata$x:000046B0                 dd offset __unwindfunclet$??0CUniqBlocks@@QAE@XZ$0
.xdata$x:000046B4                 align 8
.xdata$x:000046B8                 dd offset __unwindfunclet$??0CUniqBlocks@@QAE@XZ$1
.xdata$x:000046BC __ehfuncinfo$??0CUniqBlocks@@QAE@XZ db  22h ; "
.xdata$x:000046BC                                         ; DATA XREF: __ehhandler$??0CUniqBlocks@@QAE@XZ+11o
.xdata$x:000046BD                 db    5
.xdata$x:000046BE                 db  93h ; ô
.xdata$x:000046BF                 db  19h
.xdata$x:000046C0                 db    2
.xdata$x:000046C1                 db    0
.xdata$x:000046C2                 db    0
.xdata$x:000046C3                 db    0
.xdata$x:000046C4                 dd offset __unwindtable$??0CUniqBlocks@@QAE@XZ
.xdata$x:000046C8                 db    0
.xdata$x:000046C9                 db    0
.xdata$x:000046CA                 db    0
.xdata$x:000046CB                 db    0
.xdata$x:000046CC                 db    0
.xdata$x:000046CD                 db    0
.xdata$x:000046CE                 db    0
.xdata$x:000046CF                 db    0
.xdata$x:000046D0                 db    0
.xdata$x:000046D1                 db    0
.xdata$x:000046D2                 db    0
.xdata$x:000046D3                 db    0
.xdata$x:000046D4                 db    0
.xdata$x:000046D5                 db    0
.xdata$x:000046D6                 db    0
.xdata$x:000046D7                 db    0
.xdata$x:000046D8                 db    0
.xdata$x:000046D9                 db    0
.xdata$x:000046DA                 db    0
.xdata$x:000046DB                 db    0
.xdata$x:000046DC                 db    1
.xdata$x:000046DD                 db    0
.xdata$x:000046DE                 db    0
.xdata$x:000046DF                 db    0
.xdata$x:000046DF _xdata$x        ends
.xdata$x:000046DF
.text:000046E0 ; ===========================================================================
.text:000046E0
.text:000046E0 ; Segment type: Pure code
.text:000046E0 ; Segment permissions: Read/Execute
.text:000046E0 _text           segment para public 'CODE' use32
.text:000046E0                 assume cs:_text
.text:000046E0                 ;org 46E0h
.text:000046E0 ; COMDAT (pick any)
.text:000046E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000046E0
.text:000046E0 ; =============== S U B R O U T I N E =======================================
.text:000046E0
.text:000046E0 ; Attributes: bp-based frame
.text:000046E0
.text:000046E0 ; _DWORD __thiscall CUniqBlocks::~CUniqBlocks(CUniqBlocks *__hidden this)
.text:000046E0                 public ??1CUniqBlocks@@QAE@XZ
.text:000046E0 ??1CUniqBlocks@@QAE@XZ proc near        ; CODE XREF: __unwindfunclet$??0CDirItems@@QAE@XZ$4+6j
.text:000046E0
.text:000046E0 var_10          = dword ptr -10h
.text:000046E0 var_C           = dword ptr -0Ch
.text:000046E0 var_4           = dword ptr -4
.text:000046E0
.text:000046E0                 push    ebp
.text:000046E1                 mov     ebp, esp
.text:000046E3                 push    0FFFFFFFFh
.text:000046E5                 push    offset __ehhandler$??1CUniqBlocks@@QAE@XZ
.text:000046EA                 mov     eax, large fs:0
.text:000046F0                 push    eax
.text:000046F1                 push    ecx
.text:000046F2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000046F9                 mov     eax, dword ptr ds:___security_cookie
.text:000046FE                 xor     eax, ebp
.text:00004700                 push    eax
.text:00004701                 lea     eax, [ebp+var_C]
.text:00004704                 mov     large fs:0, eax
.text:0000470A                 mov     [ebp+var_10], ecx
.text:0000470D                 mov     [ebp+var_4], 1
.text:00004714                 mov     ecx, [ebp+var_10]
.text:00004717                 add     ecx, 18h
.text:0000471A                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000471F                 mov     byte ptr [ebp+var_4], 0
.text:00004723                 mov     ecx, [ebp+var_10]
.text:00004726                 add     ecx, 0Ch
.text:00004729                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000472E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004735                 mov     ecx, [ebp+var_10]
.text:00004738                 call    ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text:0000473D                 mov     ecx, [ebp+var_C]
.text:00004740                 mov     large fs:0, ecx
.text:00004747                 pop     ecx
.text:00004748                 add     esp, 10h
.text:0000474B                 cmp     ebp, esp
.text:0000474D                 call    __RTC_CheckEsp
.text:00004752                 mov     esp, ebp
.text:00004754                 pop     ebp
.text:00004755                 retn
.text:00004755 ??1CUniqBlocks@@QAE@XZ endp
.text:00004755
.text:00004755 ; ---------------------------------------------------------------------------
.text:00004756                 align 4
.text:00004756 _text           ends
.text:00004756
.text$x:00004758 ; ===========================================================================
.text$x:00004758
.text$x:00004758 ; Segment type: Pure code
.text$x:00004758 ; Segment permissions: Read/Execute
.text$x:00004758 _text$x         segment para public 'CODE' use32
.text$x:00004758                 assume cs:_text$x
.text$x:00004758                 ;org 4758h
.text$x:00004758 ; COMDAT (pick associative to section at 46E0)
.text$x:00004758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004758
.text$x:00004758 ; =============== S U B R O U T I N E =======================================
.text$x:00004758
.text$x:00004758
.text$x:00004758 __unwindfunclet$??1CUniqBlocks@@QAE@XZ$0 proc near
.text$x:00004758                                         ; DATA XREF: .xdata$x:0000478Co
.text$x:00004758                 mov     ecx, [ebp-10h]
.text$x:0000475B                 jmp     ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text$x:0000475B __unwindfunclet$??1CUniqBlocks@@QAE@XZ$0 endp
.text$x:0000475B
.text$x:00004760
.text$x:00004760 ; =============== S U B R O U T I N E =======================================
.text$x:00004760
.text$x:00004760
.text$x:00004760 __unwindfunclet$??1CUniqBlocks@@QAE@XZ$1 proc near
.text$x:00004760                                         ; DATA XREF: .xdata$x:00004794o
.text$x:00004760                 mov     ecx, [ebp-10h]
.text$x:00004763                 add     ecx, 0Ch
.text$x:00004766                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00004766 __unwindfunclet$??1CUniqBlocks@@QAE@XZ$1 endp
.text$x:00004766
.text$x:0000476B
.text$x:0000476B ; =============== S U B R O U T I N E =======================================
.text$x:0000476B
.text$x:0000476B
.text$x:0000476B __ehhandler$??1CUniqBlocks@@QAE@XZ proc near
.text$x:0000476B                                         ; DATA XREF: CUniqBlocks::~CUniqBlocks(void)+5o
.text$x:0000476B
.text$x:0000476B arg_4           = dword ptr  8
.text$x:0000476B
.text$x:0000476B                 mov     edx, [esp+arg_4]
.text$x:0000476F                 lea     eax, [edx+0Ch]
.text$x:00004772                 mov     ecx, [edx-8]
.text$x:00004775                 xor     ecx, eax
.text$x:00004777                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000477C                 mov     eax, offset __ehfuncinfo$??1CUniqBlocks@@QAE@XZ
.text$x:00004781                 jmp     ___CxxFrameHandler3
.text$x:00004781 __ehhandler$??1CUniqBlocks@@QAE@XZ endp
.text$x:00004781
.text$x:00004781 ; ---------------------------------------------------------------------------
.text$x:00004786                 align 4
.text$x:00004786 _text$x         ends
.text$x:00004786
.xdata$x:00004788 ; ===========================================================================
.xdata$x:00004788
.xdata$x:00004788 ; Segment type: Pure data
.xdata$x:00004788 ; Segment permissions: Read
.xdata$x:00004788 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004788                 assume cs:_xdata$x
.xdata$x:00004788                 ;org 4788h
.xdata$x:00004788 ; COMDAT (pick associative to section at 46E0)
.xdata$x:00004788 __unwindtable$??1CUniqBlocks@@QAE@XZ db 0FFh
.xdata$x:00004788                                         ; DATA XREF: .xdata$x:000047A0o
.xdata$x:00004789                 db 0FFh
.xdata$x:0000478A                 db 0FFh
.xdata$x:0000478B                 db 0FFh
.xdata$x:0000478C                 dd offset __unwindfunclet$??1CUniqBlocks@@QAE@XZ$0
.xdata$x:00004790                 db    0
.xdata$x:00004791                 db    0
.xdata$x:00004792                 db    0
.xdata$x:00004793                 db    0
.xdata$x:00004794                 dd offset __unwindfunclet$??1CUniqBlocks@@QAE@XZ$1
.xdata$x:00004798 __ehfuncinfo$??1CUniqBlocks@@QAE@XZ db  22h ; "
.xdata$x:00004798                                         ; DATA XREF: __ehhandler$??1CUniqBlocks@@QAE@XZ+11o
.xdata$x:00004799                 db    5
.xdata$x:0000479A                 db  93h ; ô
.xdata$x:0000479B                 db  19h
.xdata$x:0000479C                 db    2
.xdata$x:0000479D                 db    0
.xdata$x:0000479E                 db    0
.xdata$x:0000479F                 db    0
.xdata$x:000047A0                 dd offset __unwindtable$??1CUniqBlocks@@QAE@XZ
.xdata$x:000047A4                 db    0
.xdata$x:000047A5                 db    0
.xdata$x:000047A6                 db    0
.xdata$x:000047A7                 db    0
.xdata$x:000047A8                 db    0
.xdata$x:000047A9                 db    0
.xdata$x:000047AA                 db    0
.xdata$x:000047AB                 db    0
.xdata$x:000047AC                 db    0
.xdata$x:000047AD                 db    0
.xdata$x:000047AE                 db    0
.xdata$x:000047AF                 db    0
.xdata$x:000047B0                 db    0
.xdata$x:000047B1                 db    0
.xdata$x:000047B2                 db    0
.xdata$x:000047B3                 db    0
.xdata$x:000047B4                 db    0
.xdata$x:000047B5                 db    0
.xdata$x:000047B6                 db    0
.xdata$x:000047B7                 db    0
.xdata$x:000047B8                 db    1
.xdata$x:000047B9                 db    0
.xdata$x:000047BA                 db    0
.xdata$x:000047BB                 db    0
.xdata$x:000047BB _xdata$x        ends
.xdata$x:000047BB
.text:000047BC ; ===========================================================================
.text:000047BC
.text:000047BC ; Segment type: Pure code
.text:000047BC ; Segment permissions: Read/Execute
.text:000047BC _text           segment para public 'CODE' use32
.text:000047BC                 assume cs:_text
.text:000047BC                 ;org 47BCh
.text:000047BC ; COMDAT (pick any)
.text:000047BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047BC
.text:000047BC ; =============== S U B R O U T I N E =======================================
.text:000047BC
.text:000047BC ; Attributes: bp-based frame
.text:000047BC
.text:000047BC ; class UString __stdcall operator+(class UString const &, wchar_t)
.text:000047BC                 public ??H@YG?AVUString@@ABV0@_W@Z
.text:000047BC ??H@YG?AVUString@@ABV0@_W@Z proc near   ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+6Ap
.text:000047BC                                         ; CDirItems::EnumerateDir(int,int,UString const &)+29Cp ...
.text:000047BC
.text:000047BC var_4           = dword ptr -4
.text:000047BC arg_0           = dword ptr  8
.text:000047BC arg_4           = dword ptr  0Ch
.text:000047BC arg_8           = word ptr  10h
.text:000047BC
.text:000047BC                 push    ebp
.text:000047BD                 mov     ebp, esp
.text:000047BF                 push    ecx
.text:000047C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047C7                 mov     [ebp+var_4], 0
.text:000047CE                 movzx   eax, [ebp+arg_8]
.text:000047D2                 push    eax
.text:000047D3                 mov     ecx, [ebp+arg_4]
.text:000047D6                 push    ecx
.text:000047D7                 mov     ecx, [ebp+arg_0]
.text:000047DA                 call    ??0UString@@AAE@ABV0@_W@Z ; UString::UString(UString const &,wchar_t)
.text:000047DF                 mov     edx, [ebp+var_4]
.text:000047E2                 or      edx, 1
.text:000047E5                 mov     [ebp+var_4], edx
.text:000047E8                 mov     eax, [ebp+arg_0]
.text:000047EB                 add     esp, 4
.text:000047EE                 cmp     ebp, esp
.text:000047F0                 call    __RTC_CheckEsp
.text:000047F5                 mov     esp, ebp
.text:000047F7                 pop     ebp
.text:000047F8                 retn    0Ch
.text:000047F8 ??H@YG?AVUString@@ABV0@_W@Z endp
.text:000047F8
.text:000047F8 ; ---------------------------------------------------------------------------
.text:000047FB                 align 4
.text:000047FB _text           ends
.text:000047FB
.text:000047FC ; ===========================================================================
.text:000047FC
.text:000047FC ; Segment type: Pure code
.text:000047FC ; Segment permissions: Read/Execute
.text:000047FC _text           segment para public 'CODE' use32
.text:000047FC                 assume cs:_text
.text:000047FC                 ;org 47FCh
.text:000047FC ; COMDAT (pick any)
.text:000047FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047FC
.text:000047FC ; =============== S U B R O U T I N E =======================================
.text:000047FC
.text:000047FC ; Attributes: bp-based frame
.text:000047FC
.text:000047FC ; _DWORD __thiscall NWindows::NFile::NFind::CEnumerator::CEnumerator(NWindows::NFile::NFind::CEnumerator *this, const struct UString *)
.text:000047FC                 public ??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.text:000047FC ??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z proc near
.text:000047FC                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+92p
.text:000047FC                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+E7Ep
.text:000047FC
.text:000047FC var_10          = dword ptr -10h
.text:000047FC var_C           = dword ptr -0Ch
.text:000047FC var_4           = dword ptr -4
.text:000047FC arg_0           = dword ptr  8
.text:000047FC
.text:000047FC                 push    ebp
.text:000047FD                 mov     ebp, esp
.text:000047FF                 push    0FFFFFFFFh
.text:00004801                 push    offset __ehhandler$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.text:00004806                 mov     eax, large fs:0
.text:0000480C                 push    eax
.text:0000480D                 push    ecx
.text:0000480E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004815                 mov     eax, dword ptr ds:___security_cookie
.text:0000481A                 xor     eax, ebp
.text:0000481C                 push    eax
.text:0000481D                 lea     eax, [ebp+var_C]
.text:00004820                 mov     large fs:0, eax
.text:00004826                 mov     [ebp+var_10], ecx
.text:00004829                 mov     ecx, [ebp+var_10] ; this
.text:0000482C                 call    ??0CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::CFindFile(void)
.text:00004831                 mov     [ebp+var_4], 0
.text:00004838                 mov     eax, [ebp+arg_0]
.text:0000483B                 push    eax
.text:0000483C                 mov     ecx, [ebp+var_10]
.text:0000483F                 add     ecx, 4
.text:00004842                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00004847                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000484E                 mov     eax, [ebp+var_10]
.text:00004851                 mov     ecx, [ebp+var_C]
.text:00004854                 mov     large fs:0, ecx
.text:0000485B                 pop     ecx
.text:0000485C                 add     esp, 10h
.text:0000485F                 cmp     ebp, esp
.text:00004861                 call    __RTC_CheckEsp
.text:00004866                 mov     esp, ebp
.text:00004868                 pop     ebp
.text:00004869                 retn    4
.text:00004869 ??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z endp
.text:00004869
.text:00004869 _text           ends
.text:00004869
.text$x:0000486C ; ===========================================================================
.text$x:0000486C
.text$x:0000486C ; Segment type: Pure code
.text$x:0000486C ; Segment permissions: Read/Execute
.text$x:0000486C _text$x         segment para public 'CODE' use32
.text$x:0000486C                 assume cs:_text$x
.text$x:0000486C                 ;org 486Ch
.text$x:0000486C ; COMDAT (pick associative to section at 47FC)
.text$x:0000486C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000486C
.text$x:0000486C ; =============== S U B R O U T I N E =======================================
.text$x:0000486C
.text$x:0000486C
.text$x:0000486C __unwindfunclet$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0 proc near
.text$x:0000486C                                         ; DATA XREF: .xdata$x:00004894o
.text$x:0000486C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000486F                 jmp     ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text$x:0000486F __unwindfunclet$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0 endp
.text$x:0000486F
.text$x:00004874
.text$x:00004874 ; =============== S U B R O U T I N E =======================================
.text$x:00004874
.text$x:00004874
.text$x:00004874 __ehhandler$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z proc near
.text$x:00004874                                         ; DATA XREF: NWindows::NFile::NFind::CEnumerator::CEnumerator(UString const &)+5o
.text$x:00004874
.text$x:00004874 arg_4           = dword ptr  8
.text$x:00004874
.text$x:00004874                 mov     edx, [esp+arg_4]
.text$x:00004878                 lea     eax, [edx+0Ch]
.text$x:0000487B                 mov     ecx, [edx-8]
.text$x:0000487E                 xor     ecx, eax
.text$x:00004880                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004885                 mov     eax, offset __ehfuncinfo$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.text$x:0000488A                 jmp     ___CxxFrameHandler3
.text$x:0000488A __ehhandler$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z endp
.text$x:0000488A
.text$x:0000488A ; ---------------------------------------------------------------------------
.text$x:0000488F                 align 10h
.text$x:0000488F _text$x         ends
.text$x:0000488F
.xdata$x:00004890 ; ===========================================================================
.xdata$x:00004890
.xdata$x:00004890 ; Segment type: Pure data
.xdata$x:00004890 ; Segment permissions: Read
.xdata$x:00004890 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004890                 assume cs:_xdata$x
.xdata$x:00004890                 ;org 4890h
.xdata$x:00004890 ; COMDAT (pick associative to section at 47FC)
.xdata$x:00004890 __unwindtable$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z db 0FFh
.xdata$x:00004890                                         ; DATA XREF: .xdata$x:000048A0o
.xdata$x:00004891                 db 0FFh
.xdata$x:00004892                 db 0FFh
.xdata$x:00004893                 db 0FFh
.xdata$x:00004894                 dd offset __unwindfunclet$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0
.xdata$x:00004898 __ehfuncinfo$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z db  22h ; "
.xdata$x:00004898                                         ; DATA XREF: __ehhandler$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z+11o
.xdata$x:00004899                 db    5
.xdata$x:0000489A                 db  93h ; ô
.xdata$x:0000489B                 db  19h
.xdata$x:0000489C                 db    1
.xdata$x:0000489D                 db    0
.xdata$x:0000489E                 db    0
.xdata$x:0000489F                 db    0
.xdata$x:000048A0                 dd offset __unwindtable$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.xdata$x:000048A4                 db    0
.xdata$x:000048A5                 db    0
.xdata$x:000048A6                 db    0
.xdata$x:000048A7                 db    0
.xdata$x:000048A8                 db    0
.xdata$x:000048A9                 db    0
.xdata$x:000048AA                 db    0
.xdata$x:000048AB                 db    0
.xdata$x:000048AC                 db    0
.xdata$x:000048AD                 db    0
.xdata$x:000048AE                 db    0
.xdata$x:000048AF                 db    0
.xdata$x:000048B0                 db    0
.xdata$x:000048B1                 db    0
.xdata$x:000048B2                 db    0
.xdata$x:000048B3                 db    0
.xdata$x:000048B4                 db    0
.xdata$x:000048B5                 db    0
.xdata$x:000048B6                 db    0
.xdata$x:000048B7                 db    0
.xdata$x:000048B8                 db    1
.xdata$x:000048B9                 db    0
.xdata$x:000048BA                 db    0
.xdata$x:000048BB                 db    0
.xdata$x:000048BB _xdata$x        ends
.xdata$x:000048BB
.text:000048BC ; ===========================================================================
.text:000048BC
.text:000048BC ; Segment type: Pure code
.text:000048BC ; Segment permissions: Read/Execute
.text:000048BC _text           segment para public 'CODE' use32
.text:000048BC                 assume cs:_text
.text:000048BC                 ;org 48BCh
.text:000048BC ; COMDAT (pick any)
.text:000048BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048BC
.text:000048BC ; =============== S U B R O U T I N E =======================================
.text:000048BC
.text:000048BC ; Attributes: bp-based frame
.text:000048BC
.text:000048BC ; _DWORD __thiscall NWindows::NFile::NFind::CFindFile::CFindFile(NWindows::NFile::NFind::CFindFile *__hidden this)
.text:000048BC                 public ??0CFindFile@NFind@NFile@NWindows@@QAE@XZ
.text:000048BC ??0CFindFile@NFind@NFile@NWindows@@QAE@XZ proc near
.text:000048BC                                         ; CODE XREF: NWindows::NFile::NFind::CEnumerator::CEnumerator(UString const &)+30p
.text:000048BC
.text:000048BC var_4           = dword ptr -4
.text:000048BC
.text:000048BC                 push    ebp
.text:000048BD                 mov     ebp, esp
.text:000048BF                 push    ecx
.text:000048C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048C7                 mov     [ebp+var_4], ecx
.text:000048CA                 mov     ecx, [ebp+var_4] ; this
.text:000048CD                 call    ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFileBase::CFindFileBase(void)
.text:000048D2                 mov     eax, [ebp+var_4]
.text:000048D5                 add     esp, 4
.text:000048D8                 cmp     ebp, esp
.text:000048DA                 call    __RTC_CheckEsp
.text:000048DF                 mov     esp, ebp
.text:000048E1                 pop     ebp
.text:000048E2                 retn
.text:000048E2 ??0CFindFile@NFind@NFile@NWindows@@QAE@XZ endp
.text:000048E2
.text:000048E2 ; ---------------------------------------------------------------------------
.text:000048E3                 align 4
.text:000048E3 _text           ends
.text:000048E3
.text:000048E4 ; ===========================================================================
.text:000048E4
.text:000048E4 ; Segment type: Pure code
.text:000048E4 ; Segment permissions: Read/Execute
.text:000048E4 _text           segment para public 'CODE' use32
.text:000048E4                 assume cs:_text
.text:000048E4                 ;org 48E4h
.text:000048E4 ; COMDAT (pick any)
.text:000048E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048E4
.text:000048E4 ; =============== S U B R O U T I N E =======================================
.text:000048E4
.text:000048E4 ; Attributes: bp-based frame
.text:000048E4
.text:000048E4 ; _DWORD __thiscall NWindows::NFile::NFind::CFindFileBase::CFindFileBase(NWindows::NFile::NFind::CFindFileBase *__hidden this)
.text:000048E4                 public ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ
.text:000048E4 ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ proc near
.text:000048E4                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::CFindFile(void)+11p
.text:000048E4                                         ; NWindows::NFile::NFind::CFindStream::CFindStream(void)+11p
.text:000048E4
.text:000048E4 var_4           = dword ptr -4
.text:000048E4
.text:000048E4                 push    ebp
.text:000048E5                 mov     ebp, esp
.text:000048E7                 push    ecx
.text:000048E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048EF                 mov     [ebp+var_4], ecx
.text:000048F2                 mov     eax, [ebp+var_4]
.text:000048F5                 mov     dword ptr [eax], 0FFFFFFFFh
.text:000048FB                 mov     eax, [ebp+var_4]
.text:000048FE                 mov     esp, ebp
.text:00004900                 pop     ebp
.text:00004901                 retn
.text:00004901 ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ endp
.text:00004901
.text:00004901 ; ---------------------------------------------------------------------------
.text:00004902                 align 4
.text:00004902 _text           ends
.text:00004902
.text:00004904 ; ===========================================================================
.text:00004904
.text:00004904 ; Segment type: Pure code
.text:00004904 ; Segment permissions: Read/Execute
.text:00004904 _text           segment para public 'CODE' use32
.text:00004904                 assume cs:_text
.text:00004904                 ;org 4904h
.text:00004904 ; COMDAT (pick any)
.text:00004904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004904
.text:00004904 ; =============== S U B R O U T I N E =======================================
.text:00004904
.text:00004904 ; Attributes: bp-based frame
.text:00004904
.text:00004904 ; _DWORD __thiscall NWindows::NFile::NFind::CFindFile::~CFindFile(NWindows::NFile::NFind::CFindFile *__hidden this)
.text:00004904                 public ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ
.text:00004904 ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004904                                         ; CODE XREF: __unwindfunclet$??0CEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0+3j
.text:00004904                                         ; NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)+49p ...
.text:00004904
.text:00004904 var_4           = dword ptr -4
.text:00004904
.text:00004904                 push    ebp
.text:00004905                 mov     ebp, esp
.text:00004907                 push    ecx
.text:00004908                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000490F                 mov     [ebp+var_4], ecx
.text:00004912                 mov     ecx, [ebp+var_4] ; this
.text:00004915                 call    ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFileBase::~CFindFileBase(void)
.text:0000491A                 add     esp, 4
.text:0000491D                 cmp     ebp, esp
.text:0000491F                 call    __RTC_CheckEsp
.text:00004924                 mov     esp, ebp
.text:00004926                 pop     ebp
.text:00004927                 retn
.text:00004927 ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ endp
.text:00004927
.text:00004927 _text           ends
.text:00004927
.text:00004928 ; ===========================================================================
.text:00004928
.text:00004928 ; Segment type: Pure code
.text:00004928 ; Segment permissions: Read/Execute
.text:00004928 _text           segment para public 'CODE' use32
.text:00004928                 assume cs:_text
.text:00004928                 ;org 4928h
.text:00004928 ; COMDAT (pick any)
.text:00004928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004928
.text:00004928 ; =============== S U B R O U T I N E =======================================
.text:00004928
.text:00004928 ; Attributes: bp-based frame
.text:00004928
.text:00004928 ; _DWORD __thiscall NWindows::NFile::NFind::CFindFileBase::~CFindFileBase(NWindows::NFile::NFind::CFindFileBase *__hidden this)
.text:00004928                 public ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ
.text:00004928 ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004928                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::~CFindFile(void)+11p
.text:00004928                                         ; NWindows::NFile::NFind::CFindStream::~CFindStream(void)+11p
.text:00004928
.text:00004928 var_4           = dword ptr -4
.text:00004928
.text:00004928                 push    ebp
.text:00004929                 mov     ebp, esp
.text:0000492B                 push    ecx
.text:0000492C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004933                 mov     [ebp+var_4], ecx
.text:00004936                 mov     ecx, [ebp+var_4] ; this
.text:00004939                 call    ?Close@CFindFileBase@NFind@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NFind::CFindFileBase::Close(void)
.text:0000493E                 add     esp, 4
.text:00004941                 cmp     ebp, esp
.text:00004943                 call    __RTC_CheckEsp
.text:00004948                 mov     esp, ebp
.text:0000494A                 pop     ebp
.text:0000494B                 retn
.text:0000494B ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ endp
.text:0000494B
.text:0000494B _text           ends
.text:0000494B
.text:0000494C ; ===========================================================================
.text:0000494C
.text:0000494C ; Segment type: Pure code
.text:0000494C ; Segment permissions: Read/Execute
.text:0000494C _text           segment para public 'CODE' use32
.text:0000494C                 assume cs:_text
.text:0000494C                 ;org 494Ch
.text:0000494C ; COMDAT (pick any)
.text:0000494C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000494C
.text:0000494C ; =============== S U B R O U T I N E =======================================
.text:0000494C
.text:0000494C ; Attributes: bp-based frame
.text:0000494C
.text:0000494C ; _DWORD __thiscall NWindows::NFile::NFind::CEnumerator::~CEnumerator(NWindows::NFile::NFind::CEnumerator *__hidden this)
.text:0000494C                 public ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ
.text:0000494C ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ proc near
.text:0000494C                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+103p
.text:0000494C                                         ; CDirItems::EnumerateDir(int,int,UString const &)+13Bp ...
.text:0000494C
.text:0000494C var_10          = dword ptr -10h
.text:0000494C var_C           = dword ptr -0Ch
.text:0000494C var_4           = dword ptr -4
.text:0000494C
.text:0000494C                 push    ebp
.text:0000494D                 mov     ebp, esp
.text:0000494F                 push    0FFFFFFFFh
.text:00004951                 push    offset __ehhandler$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ
.text:00004956                 mov     eax, large fs:0
.text:0000495C                 push    eax
.text:0000495D                 push    ecx
.text:0000495E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004965                 mov     eax, dword ptr ds:___security_cookie
.text:0000496A                 xor     eax, ebp
.text:0000496C                 push    eax
.text:0000496D                 lea     eax, [ebp+var_C]
.text:00004970                 mov     large fs:0, eax
.text:00004976                 mov     [ebp+var_10], ecx
.text:00004979                 mov     [ebp+var_4], 0
.text:00004980                 mov     ecx, [ebp+var_10]
.text:00004983                 add     ecx, 4          ; this
.text:00004986                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000498B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004992                 mov     ecx, [ebp+var_10] ; this
.text:00004995                 call    ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text:0000499A                 mov     ecx, [ebp+var_C]
.text:0000499D                 mov     large fs:0, ecx
.text:000049A4                 pop     ecx
.text:000049A5                 add     esp, 10h
.text:000049A8                 cmp     ebp, esp
.text:000049AA                 call    __RTC_CheckEsp
.text:000049AF                 mov     esp, ebp
.text:000049B1                 pop     ebp
.text:000049B2                 retn
.text:000049B2 ??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ endp
.text:000049B2
.text:000049B2 ; ---------------------------------------------------------------------------
.text:000049B3                 align 4
.text:000049B3 _text           ends
.text:000049B3
.text$x:000049B4 ; ===========================================================================
.text$x:000049B4
.text$x:000049B4 ; Segment type: Pure code
.text$x:000049B4 ; Segment permissions: Read/Execute
.text$x:000049B4 _text$x         segment para public 'CODE' use32
.text$x:000049B4                 assume cs:_text$x
.text$x:000049B4                 ;org 49B4h
.text$x:000049B4 ; COMDAT (pick associative to section at 494C)
.text$x:000049B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000049B4
.text$x:000049B4 ; =============== S U B R O U T I N E =======================================
.text$x:000049B4
.text$x:000049B4
.text$x:000049B4 __unwindfunclet$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:000049B4                                         ; DATA XREF: .xdata$x:000049DCo
.text$x:000049B4                 mov     ecx, [ebp-10h]  ; this
.text$x:000049B7                 jmp     ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text$x:000049B7 __unwindfunclet$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ$0 endp
.text$x:000049B7
.text$x:000049BC
.text$x:000049BC ; =============== S U B R O U T I N E =======================================
.text$x:000049BC
.text$x:000049BC
.text$x:000049BC __ehhandler$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ proc near
.text$x:000049BC                                         ; DATA XREF: NWindows::NFile::NFind::CEnumerator::~CEnumerator(void)+5o
.text$x:000049BC
.text$x:000049BC arg_4           = dword ptr  8
.text$x:000049BC
.text$x:000049BC                 mov     edx, [esp+arg_4]
.text$x:000049C0                 lea     eax, [edx+0Ch]
.text$x:000049C3                 mov     ecx, [edx-8]
.text$x:000049C6                 xor     ecx, eax
.text$x:000049C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000049CD                 mov     eax, offset __ehfuncinfo$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ
.text$x:000049D2                 jmp     ___CxxFrameHandler3
.text$x:000049D2 __ehhandler$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ endp
.text$x:000049D2
.text$x:000049D2 ; ---------------------------------------------------------------------------
.text$x:000049D7                 align 4
.text$x:000049D7 _text$x         ends
.text$x:000049D7
.xdata$x:000049D8 ; ===========================================================================
.xdata$x:000049D8
.xdata$x:000049D8 ; Segment type: Pure data
.xdata$x:000049D8 ; Segment permissions: Read
.xdata$x:000049D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000049D8                 assume cs:_xdata$x
.xdata$x:000049D8                 ;org 49D8h
.xdata$x:000049D8 ; COMDAT (pick associative to section at 494C)
.xdata$x:000049D8 __unwindtable$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:000049D8                                         ; DATA XREF: .xdata$x:000049E8o
.xdata$x:000049D9                 db 0FFh
.xdata$x:000049DA                 db 0FFh
.xdata$x:000049DB                 db 0FFh
.xdata$x:000049DC                 dd offset __unwindfunclet$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ$0
.xdata$x:000049E0 __ehfuncinfo$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:000049E0                                         ; DATA XREF: __ehhandler$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ+11o
.xdata$x:000049E1                 db    5
.xdata$x:000049E2                 db  93h ; ô
.xdata$x:000049E3                 db  19h
.xdata$x:000049E4                 db    1
.xdata$x:000049E5                 db    0
.xdata$x:000049E6                 db    0
.xdata$x:000049E7                 db    0
.xdata$x:000049E8                 dd offset __unwindtable$??1CEnumerator@NFind@NFile@NWindows@@QAE@XZ
.xdata$x:000049EC                 align 20h
.xdata$x:00004A00                 db    1
.xdata$x:00004A01                 db    0
.xdata$x:00004A02                 db    0
.xdata$x:00004A03                 db    0
.xdata$x:00004A03 _xdata$x        ends
.xdata$x:00004A03
.text:00004A04 ; ===========================================================================
.text:00004A04
.text:00004A04 ; Segment type: Pure code
.text:00004A04 ; Segment permissions: Read/Execute
.text:00004A04 _text           segment para public 'CODE' use32
.text:00004A04                 assume cs:_text
.text:00004A04                 ;org 4A04h
.text:00004A04 ; COMDAT (pick any)
.text:00004A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A04
.text:00004A04 ; =============== S U B R O U T I N E =======================================
.text:00004A04
.text:00004A04 ; Attributes: bp-based frame
.text:00004A04
.text:00004A04 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:00004A04                 public ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:00004A04 ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004A04                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+BBp
.text:00004A04                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+E9p ...
.text:00004A04
.text:00004A04 var_4           = dword ptr -4
.text:00004A04
.text:00004A04                 push    ebp
.text:00004A05                 mov     ebp, esp
.text:00004A07                 push    ecx
.text:00004A08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A0F                 mov     [ebp+var_4], ecx
.text:00004A12                 mov     ecx, [ebp+var_4] ; this
.text:00004A15                 call    ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(void)
.text:00004A1A                 mov     ecx, [ebp+var_4]
.text:00004A1D                 add     ecx, 28h ; '('
.text:00004A20                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004A25                 mov     eax, [ebp+var_4]
.text:00004A28                 add     esp, 4
.text:00004A2B                 cmp     ebp, esp
.text:00004A2D                 call    __RTC_CheckEsp
.text:00004A32                 mov     esp, ebp
.text:00004A34                 pop     ebp
.text:00004A35                 retn
.text:00004A35 ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:00004A35
.text:00004A35 ; ---------------------------------------------------------------------------
.text:00004A36                 align 4
.text:00004A36 _text           ends
.text:00004A36
.text:00004A38 ; ===========================================================================
.text:00004A38
.text:00004A38 ; Segment type: Pure code
.text:00004A38 ; Segment permissions: Read/Execute
.text:00004A38 _text           segment para public 'CODE' use32
.text:00004A38                 assume cs:_text
.text:00004A38                 ;org 4A38h
.text:00004A38 ; COMDAT (pick any)
.text:00004A38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A38
.text:00004A38 ; =============== S U B R O U T I N E =======================================
.text:00004A38
.text:00004A38 ; Attributes: bp-based frame
.text:00004A38
.text:00004A38 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00004A38                 public ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
.text:00004A38 ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004A38                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::CFileInfo(void)+11p
.text:00004A38
.text:00004A38 var_4           = dword ptr -4
.text:00004A38
.text:00004A38                 push    ebp
.text:00004A39                 mov     ebp, esp
.text:00004A3B                 push    ecx
.text:00004A3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A43                 mov     [ebp+var_4], ecx
.text:00004A46                 mov     ecx, [ebp+var_4] ; this
.text:00004A49                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:00004A4E                 mov     eax, [ebp+var_4]
.text:00004A51                 add     esp, 4
.text:00004A54                 cmp     ebp, esp
.text:00004A56                 call    __RTC_CheckEsp
.text:00004A5B                 mov     esp, ebp
.text:00004A5D                 pop     ebp
.text:00004A5E                 retn
.text:00004A5E ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ endp
.text:00004A5E
.text:00004A5E ; ---------------------------------------------------------------------------
.text:00004A5F                 align 10h
.text:00004A5F _text           ends
.text:00004A5F
.text:00004A60 ; ===========================================================================
.text:00004A60
.text:00004A60 ; Segment type: Pure code
.text:00004A60 ; Segment permissions: Read/Execute
.text:00004A60 _text           segment para public 'CODE' use32
.text:00004A60                 assume cs:_text
.text:00004A60                 ;org 4A60h
.text:00004A60 ; COMDAT (pick any)
.text:00004A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A60
.text:00004A60 ; =============== S U B R O U T I N E =======================================
.text:00004A60
.text:00004A60 ; Attributes: bp-based frame
.text:00004A60
.text:00004A60 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::~CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:00004A60                 public ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:00004A60 ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004A60                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+F4p
.text:00004A60                                         ; CDirItems::EnumerateDir(int,int,UString const &)+12Cp ...
.text:00004A60
.text:00004A60 var_4           = dword ptr -4
.text:00004A60
.text:00004A60                 push    ebp
.text:00004A61                 mov     ebp, esp
.text:00004A63                 push    ecx
.text:00004A64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A6B                 mov     [ebp+var_4], ecx
.text:00004A6E                 mov     ecx, [ebp+var_4]
.text:00004A71                 add     ecx, 28h ; '('  ; this
.text:00004A74                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004A79                 add     esp, 4
.text:00004A7C                 cmp     ebp, esp
.text:00004A7E                 call    __RTC_CheckEsp
.text:00004A83                 mov     esp, ebp
.text:00004A85                 pop     ebp
.text:00004A86                 retn
.text:00004A86 ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:00004A86
.text:00004A86 ; ---------------------------------------------------------------------------
.text:00004A87                 align 4
.text:00004A87 _text           ends
.text:00004A87
.text:00004A88 ; ===========================================================================
.text:00004A88
.text:00004A88 ; Segment type: Pure code
.text:00004A88 ; Segment permissions: Read/Execute
.text:00004A88 _text           segment para public 'CODE' use32
.text:00004A88                 assume cs:_text
.text:00004A88                 ;org 4A88h
.text:00004A88 ; COMDAT (pick any)
.text:00004A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A88
.text:00004A88 ; =============== S U B R O U T I N E =======================================
.text:00004A88
.text:00004A88 ; Attributes: bp-based frame
.text:00004A88
.text:00004A88 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00004A88                 public ?IsEmpty@UString@@QBE_NXZ
.text:00004A88 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+43p
.text:00004A88                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+7Dp ...
.text:00004A88
.text:00004A88 var_4           = dword ptr -4
.text:00004A88
.text:00004A88                 push    ebp
.text:00004A89                 mov     ebp, esp
.text:00004A8B                 push    ecx
.text:00004A8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A93                 mov     [ebp+var_4], ecx
.text:00004A96                 mov     eax, [ebp+var_4]
.text:00004A99                 xor     ecx, ecx
.text:00004A9B                 cmp     dword ptr [eax+4], 0
.text:00004A9F                 setz    cl
.text:00004AA2                 mov     al, cl
.text:00004AA4                 mov     esp, ebp
.text:00004AA6                 pop     ebp
.text:00004AA7                 retn
.text:00004AA7 ?IsEmpty@UString@@QBE_NXZ endp
.text:00004AA7
.text:00004AA7 _text           ends
.text:00004AA7
.text:00004AA8 ; ===========================================================================
.text:00004AA8
.text:00004AA8 ; Segment type: Pure code
.text:00004AA8 ; Segment permissions: Read/Execute
.text:00004AA8 _text           segment para public 'CODE' use32
.text:00004AA8                 assume cs:_text
.text:00004AA8                 ;org 4AA8h
.text:00004AA8 ; COMDAT (pick any)
.text:00004AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AA8
.text:00004AA8 ; =============== S U B R O U T I N E =======================================
.text:00004AA8
.text:00004AA8 ; Attributes: bp-based frame
.text:00004AA8
.text:00004AA8 ; _DWORD __thiscall NWindows::NFile::CReparseAttr::CReparseAttr(NWindows::NFile::CReparseAttr *__hidden this)
.text:00004AA8                 public ??0CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00004AA8 ??0CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text:00004AA8                                         ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+9Ep
.text:00004AA8                                         ; CDirItems::FillFixedReparse(void)+9Dp
.text:00004AA8
.text:00004AA8 var_10          = dword ptr -10h
.text:00004AA8 var_C           = dword ptr -0Ch
.text:00004AA8 var_4           = dword ptr -4
.text:00004AA8
.text:00004AA8                 push    ebp
.text:00004AA9                 mov     ebp, esp
.text:00004AAB                 push    0FFFFFFFFh
.text:00004AAD                 push    offset __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00004AB2                 mov     eax, large fs:0
.text:00004AB8                 push    eax
.text:00004AB9                 push    ecx
.text:00004ABA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004AC1                 mov     eax, dword ptr ds:___security_cookie
.text:00004AC6                 xor     eax, ebp
.text:00004AC8                 push    eax
.text:00004AC9                 lea     eax, [ebp+var_C]
.text:00004ACC                 mov     large fs:0, eax
.text:00004AD2                 mov     [ebp+var_10], ecx
.text:00004AD5                 mov     eax, [ebp+var_10]
.text:00004AD8                 mov     dword ptr [eax], 0
.text:00004ADE                 mov     ecx, [ebp+var_10]
.text:00004AE1                 mov     dword ptr [ecx+4], 0
.text:00004AE8                 mov     ecx, [ebp+var_10]
.text:00004AEB                 add     ecx, 8
.text:00004AEE                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004AF3                 mov     [ebp+var_4], 0
.text:00004AFA                 mov     ecx, [ebp+var_10]
.text:00004AFD                 add     ecx, 14h
.text:00004B00                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004B05                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004B0C                 mov     eax, [ebp+var_10]
.text:00004B0F                 mov     ecx, [ebp+var_C]
.text:00004B12                 mov     large fs:0, ecx
.text:00004B19                 pop     ecx
.text:00004B1A                 add     esp, 10h
.text:00004B1D                 cmp     ebp, esp
.text:00004B1F                 call    __RTC_CheckEsp
.text:00004B24                 mov     esp, ebp
.text:00004B26                 pop     ebp
.text:00004B27                 retn
.text:00004B27 ??0CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text:00004B27
.text:00004B27 _text           ends
.text:00004B27
.text$x:00004B28 ; ===========================================================================
.text$x:00004B28
.text$x:00004B28 ; Segment type: Pure code
.text$x:00004B28 ; Segment permissions: Read/Execute
.text$x:00004B28 _text$x         segment para public 'CODE' use32
.text$x:00004B28                 assume cs:_text$x
.text$x:00004B28                 ;org 4B28h
.text$x:00004B28 ; COMDAT (pick associative to section at 4AA8)
.text$x:00004B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004B28
.text$x:00004B28 ; =============== S U B R O U T I N E =======================================
.text$x:00004B28
.text$x:00004B28
.text$x:00004B28 __unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:00004B28                                         ; DATA XREF: .xdata$x:00004B54o
.text$x:00004B28                 mov     ecx, [ebp-10h]
.text$x:00004B2B                 add     ecx, 8          ; this
.text$x:00004B2E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004B2E __unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0 endp
.text$x:00004B2E
.text$x:00004B33
.text$x:00004B33 ; =============== S U B R O U T I N E =======================================
.text$x:00004B33
.text$x:00004B33
.text$x:00004B33 __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text$x:00004B33                                         ; DATA XREF: NWindows::NFile::CReparseAttr::CReparseAttr(void)+5o
.text$x:00004B33
.text$x:00004B33 arg_4           = dword ptr  8
.text$x:00004B33
.text$x:00004B33                 mov     edx, [esp+arg_4]
.text$x:00004B37                 lea     eax, [edx+0Ch]
.text$x:00004B3A                 mov     ecx, [edx-8]
.text$x:00004B3D                 xor     ecx, eax
.text$x:00004B3F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B44                 mov     eax, offset __ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ
.text$x:00004B49                 jmp     ___CxxFrameHandler3
.text$x:00004B49 __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text$x:00004B49
.text$x:00004B49 ; ---------------------------------------------------------------------------
.text$x:00004B4E                 align 10h
.text$x:00004B4E _text$x         ends
.text$x:00004B4E
.xdata$x:00004B50 ; ===========================================================================
.xdata$x:00004B50
.xdata$x:00004B50 ; Segment type: Pure data
.xdata$x:00004B50 ; Segment permissions: Read
.xdata$x:00004B50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004B50                 assume cs:_xdata$x
.xdata$x:00004B50                 ;org 4B50h
.xdata$x:00004B50 ; COMDAT (pick associative to section at 4AA8)
.xdata$x:00004B50 __unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:00004B50                                         ; DATA XREF: .xdata$x:00004B60o
.xdata$x:00004B51                 db 0FFh
.xdata$x:00004B52                 db 0FFh
.xdata$x:00004B53                 db 0FFh
.xdata$x:00004B54                 dd offset __unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0
.xdata$x:00004B58 __ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:00004B58                                         ; DATA XREF: __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ+11o
.xdata$x:00004B59                 db    5
.xdata$x:00004B5A                 db  93h ; ô
.xdata$x:00004B5B                 db  19h
.xdata$x:00004B5C                 db    1
.xdata$x:00004B5D                 db    0
.xdata$x:00004B5E                 db    0
.xdata$x:00004B5F                 db    0
.xdata$x:00004B60                 dd offset __unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ
.xdata$x:00004B64                 db    0
.xdata$x:00004B65                 db    0
.xdata$x:00004B66                 db    0
.xdata$x:00004B67                 db    0
.xdata$x:00004B68                 db    0
.xdata$x:00004B69                 db    0
.xdata$x:00004B6A                 db    0
.xdata$x:00004B6B                 db    0
.xdata$x:00004B6C                 db    0
.xdata$x:00004B6D                 db    0
.xdata$x:00004B6E                 db    0
.xdata$x:00004B6F                 db    0
.xdata$x:00004B70                 db    0
.xdata$x:00004B71                 db    0
.xdata$x:00004B72                 db    0
.xdata$x:00004B73                 db    0
.xdata$x:00004B74                 db    0
.xdata$x:00004B75                 db    0
.xdata$x:00004B76                 db    0
.xdata$x:00004B77                 db    0
.xdata$x:00004B78                 db    1
.xdata$x:00004B79                 db    0
.xdata$x:00004B7A                 db    0
.xdata$x:00004B7B                 db    0
.xdata$x:00004B7B _xdata$x        ends
.xdata$x:00004B7B
.text:00004B7C ; ===========================================================================
.text:00004B7C
.text:00004B7C ; Segment type: Pure code
.text:00004B7C ; Segment permissions: Read/Execute
.text:00004B7C _text           segment para public 'CODE' use32
.text:00004B7C                 assume cs:_text
.text:00004B7C                 ;org 4B7Ch
.text:00004B7C ; COMDAT (pick any)
.text:00004B7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B7C
.text:00004B7C ; =============== S U B R O U T I N E =======================================
.text:00004B7C
.text:00004B7C ; Attributes: bp-based frame
.text:00004B7C
.text:00004B7C ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::HasReparsePoint(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00004B7C                 public ?HasReparsePoint@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
.text:00004B7C ?HasReparsePoint@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:00004B7C                                         ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+49p
.text:00004B7C
.text:00004B7C var_4           = dword ptr -4
.text:00004B7C
.text:00004B7C                 push    ebp
.text:00004B7D                 mov     ebp, esp
.text:00004B7F                 push    ecx
.text:00004B80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B87                 mov     [ebp+var_4], ecx
.text:00004B8A                 push    400h            ; unsigned int
.text:00004B8F                 mov     ecx, [ebp+var_4] ; this
.text:00004B92                 call    ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask(uint)
.text:00004B97                 add     esp, 4
.text:00004B9A                 cmp     ebp, esp
.text:00004B9C                 call    __RTC_CheckEsp
.text:00004BA1                 mov     esp, ebp
.text:00004BA3                 pop     ebp
.text:00004BA4                 retn
.text:00004BA4 ?HasReparsePoint@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ endp
.text:00004BA4
.text:00004BA4 ; ---------------------------------------------------------------------------
.text:00004BA5                 align 4
.text:00004BA5 _text           ends
.text:00004BA5
.text:00004BA8 ; ===========================================================================
.text:00004BA8
.text:00004BA8 ; Segment type: Pure code
.text:00004BA8 ; Segment permissions: Read/Execute
.text:00004BA8 _text           segment para public 'CODE' use32
.text:00004BA8                 assume cs:_text
.text:00004BA8                 ;org 4BA8h
.text:00004BA8 ; COMDAT (pick any)
.text:00004BA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BA8
.text:00004BA8 ; =============== S U B R O U T I N E =======================================
.text:00004BA8
.text:00004BA8 ; Attributes: bp-based frame
.text:00004BA8
.text:00004BA8 ; _DWORD __thiscall NWindows::NFile::CReparseAttr::~CReparseAttr(NWindows::NFile::CReparseAttr *__hidden this)
.text:00004BA8                 public ??1CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00004BA8 ??1CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text:00004BA8                                         ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+D6p
.text:00004BA8                                         ; CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+F6p ...
.text:00004BA8
.text:00004BA8 var_10          = dword ptr -10h
.text:00004BA8 var_C           = dword ptr -0Ch
.text:00004BA8 var_4           = dword ptr -4
.text:00004BA8
.text:00004BA8                 push    ebp
.text:00004BA9                 mov     ebp, esp
.text:00004BAB                 push    0FFFFFFFFh
.text:00004BAD                 push    offset __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00004BB2                 mov     eax, large fs:0
.text:00004BB8                 push    eax
.text:00004BB9                 push    ecx
.text:00004BBA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004BC1                 mov     eax, dword ptr ds:___security_cookie
.text:00004BC6                 xor     eax, ebp
.text:00004BC8                 push    eax
.text:00004BC9                 lea     eax, [ebp+var_C]
.text:00004BCC                 mov     large fs:0, eax
.text:00004BD2                 mov     [ebp+var_10], ecx
.text:00004BD5                 mov     [ebp+var_4], 0
.text:00004BDC                 mov     ecx, [ebp+var_10]
.text:00004BDF                 add     ecx, 14h        ; this
.text:00004BE2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004BE7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004BEE                 mov     ecx, [ebp+var_10]
.text:00004BF1                 add     ecx, 8          ; this
.text:00004BF4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004BF9                 mov     ecx, [ebp+var_C]
.text:00004BFC                 mov     large fs:0, ecx
.text:00004C03                 pop     ecx
.text:00004C04                 add     esp, 10h
.text:00004C07                 cmp     ebp, esp
.text:00004C09                 call    __RTC_CheckEsp
.text:00004C0E                 mov     esp, ebp
.text:00004C10                 pop     ebp
.text:00004C11                 retn
.text:00004C11 ??1CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text:00004C11
.text:00004C11 ; ---------------------------------------------------------------------------
.text:00004C12                 align 4
.text:00004C12 _text           ends
.text:00004C12
.text$x:00004C14 ; ===========================================================================
.text$x:00004C14
.text$x:00004C14 ; Segment type: Pure code
.text$x:00004C14 ; Segment permissions: Read/Execute
.text$x:00004C14 _text$x         segment para public 'CODE' use32
.text$x:00004C14                 assume cs:_text$x
.text$x:00004C14                 ;org 4C14h
.text$x:00004C14 ; COMDAT (pick associative to section at 4BA8)
.text$x:00004C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C14
.text$x:00004C14 ; =============== S U B R O U T I N E =======================================
.text$x:00004C14
.text$x:00004C14
.text$x:00004C14 __unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:00004C14                                         ; DATA XREF: .xdata$x:00004C40o
.text$x:00004C14                 mov     ecx, [ebp-10h]
.text$x:00004C17                 add     ecx, 8          ; this
.text$x:00004C1A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004C1A __unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0 endp
.text$x:00004C1A
.text$x:00004C1F
.text$x:00004C1F ; =============== S U B R O U T I N E =======================================
.text$x:00004C1F
.text$x:00004C1F
.text$x:00004C1F __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text$x:00004C1F                                         ; DATA XREF: NWindows::NFile::CReparseAttr::~CReparseAttr(void)+5o
.text$x:00004C1F
.text$x:00004C1F arg_4           = dword ptr  8
.text$x:00004C1F
.text$x:00004C1F                 mov     edx, [esp+arg_4]
.text$x:00004C23                 lea     eax, [edx+0Ch]
.text$x:00004C26                 mov     ecx, [edx-8]
.text$x:00004C29                 xor     ecx, eax
.text$x:00004C2B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C30                 mov     eax, offset __ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ
.text$x:00004C35                 jmp     ___CxxFrameHandler3
.text$x:00004C35 __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text$x:00004C35
.text$x:00004C35 ; ---------------------------------------------------------------------------
.text$x:00004C3A                 align 4
.text$x:00004C3A _text$x         ends
.text$x:00004C3A
.xdata$x:00004C3C ; ===========================================================================
.xdata$x:00004C3C
.xdata$x:00004C3C ; Segment type: Pure data
.xdata$x:00004C3C ; Segment permissions: Read
.xdata$x:00004C3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004C3C                 assume cs:_xdata$x
.xdata$x:00004C3C                 ;org 4C3Ch
.xdata$x:00004C3C ; COMDAT (pick associative to section at 4BA8)
.xdata$x:00004C3C __unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:00004C3C                                         ; DATA XREF: .xdata$x:00004C4Co
.xdata$x:00004C3D                 db 0FFh
.xdata$x:00004C3E                 db 0FFh
.xdata$x:00004C3F                 db 0FFh
.xdata$x:00004C40                 dd offset __unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0
.xdata$x:00004C44 __ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:00004C44                                         ; DATA XREF: __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ+11o
.xdata$x:00004C45                 db    5
.xdata$x:00004C46                 db  93h ; ô
.xdata$x:00004C47                 db  19h
.xdata$x:00004C48                 db    1
.xdata$x:00004C49                 db    0
.xdata$x:00004C4A                 db    0
.xdata$x:00004C4B                 db    0
.xdata$x:00004C4C                 dd offset __unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ
.xdata$x:00004C50                 db    0
.xdata$x:00004C51                 db    0
.xdata$x:00004C52                 db    0
.xdata$x:00004C53                 db    0
.xdata$x:00004C54                 db    0
.xdata$x:00004C55                 db    0
.xdata$x:00004C56                 db    0
.xdata$x:00004C57                 db    0
.xdata$x:00004C58                 db    0
.xdata$x:00004C59                 db    0
.xdata$x:00004C5A                 db    0
.xdata$x:00004C5B                 db    0
.xdata$x:00004C5C                 db    0
.xdata$x:00004C5D                 db    0
.xdata$x:00004C5E                 db    0
.xdata$x:00004C5F                 db    0
.xdata$x:00004C60                 db    0
.xdata$x:00004C61                 db    0
.xdata$x:00004C62                 db    0
.xdata$x:00004C63                 db    0
.xdata$x:00004C64                 db    1
.xdata$x:00004C65                 db    0
.xdata$x:00004C66                 db    0
.xdata$x:00004C67                 db    0
.xdata$x:00004C67 _xdata$x        ends
.xdata$x:00004C67
.text:00004C68 ; ===========================================================================
.text:00004C68
.text:00004C68 ; Segment type: Pure code
.text:00004C68 ; Segment permissions: Read/Execute
.text:00004C68 _text           segment para public 'CODE' use32
.text:00004C68                 assume cs:_text
.text:00004C68                 ;org 4C68h
.text:00004C68 ; COMDAT (pick any)
.text:00004C68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C68
.text:00004C68 ; =============== S U B R O U T I N E =======================================
.text:00004C68
.text:00004C68 ; Attributes: bp-based frame
.text:00004C68
.text:00004C68 ; wchar_t __thiscall UString::Back(UString *__hidden this)
.text:00004C68                 public ?Back@UString@@QBE_WXZ
.text:00004C68 ?Back@UString@@QBE_WXZ proc near        ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+D03p
.text:00004C68                                         ; CDirItems::FillFixedReparse(void)+31Bp
.text:00004C68
.text:00004C68 var_4           = dword ptr -4
.text:00004C68
.text:00004C68                 push    ebp
.text:00004C69                 mov     ebp, esp
.text:00004C6B                 push    ecx
.text:00004C6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C73                 mov     [ebp+var_4], ecx
.text:00004C76                 mov     eax, [ebp+var_4]
.text:00004C79                 mov     ecx, [eax+4]
.text:00004C7C                 mov     edx, [ebp+var_4]
.text:00004C7F                 mov     eax, [edx]
.text:00004C81                 mov     ax, [eax+ecx*2-2]
.text:00004C86                 mov     esp, ebp
.text:00004C88                 pop     ebp
.text:00004C89                 retn
.text:00004C89 ?Back@UString@@QBE_WXZ endp
.text:00004C89
.text:00004C89 ; ---------------------------------------------------------------------------
.text:00004C8A                 align 4
.text:00004C8A _text           ends
.text:00004C8A
.text:00004C8C ; ===========================================================================
.text:00004C8C
.text:00004C8C ; Segment type: Pure code
.text:00004C8C ; Segment permissions: Read/Execute
.text:00004C8C _text           segment para public 'CODE' use32
.text:00004C8C                 assume cs:_text
.text:00004C8C                 ;org 4C8Ch
.text:00004C8C ; COMDAT (pick any)
.text:00004C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C8C
.text:00004C8C ; =============== S U B R O U T I N E =======================================
.text:00004C8C
.text:00004C8C ; Attributes: bp-based frame
.text:00004C8C
.text:00004C8C ; void __thiscall UString::Add_PathSepar(UString *__hidden this)
.text:00004C8C                 public ?Add_PathSepar@UString@@QAEXXZ
.text:00004C8C ?Add_PathSepar@UString@@QAEXXZ proc near
.text:00004C8C                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+164p
.text:00004C8C                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+856p ...
.text:00004C8C
.text:00004C8C var_4           = dword ptr -4
.text:00004C8C
.text:00004C8C                 push    ebp
.text:00004C8D                 mov     ebp, esp
.text:00004C8F                 push    ecx
.text:00004C90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C97                 mov     [ebp+var_4], ecx
.text:00004C9A                 push    5Ch ; '\'
.text:00004C9C                 mov     ecx, [ebp+var_4]
.text:00004C9F                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00004CA4                 add     esp, 4
.text:00004CA7                 cmp     ebp, esp
.text:00004CA9                 call    __RTC_CheckEsp
.text:00004CAE                 mov     esp, ebp
.text:00004CB0                 pop     ebp
.text:00004CB1                 retn
.text:00004CB1 ?Add_PathSepar@UString@@QAEXXZ endp
.text:00004CB1
.text:00004CB1 ; ---------------------------------------------------------------------------
.text:00004CB2                 align 4
.text:00004CB2 _text           ends
.text:00004CB2
.text:00004CB4 ; ===========================================================================
.text:00004CB4
.text:00004CB4 ; Segment type: Pure code
.text:00004CB4 ; Segment permissions: Read/Execute
.text:00004CB4 _text           segment para public 'CODE' use32
.text:00004CB4                 assume cs:_text
.text:00004CB4                 ;org 4CB4h
.text:00004CB4 ; COMDAT (pick any)
.text:00004CB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CB4
.text:00004CB4 ; =============== S U B R O U T I N E =======================================
.text:00004CB4
.text:00004CB4 ; Attributes: bp-based frame
.text:00004CB4
.text:00004CB4 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:00004CB4                 public ??YUString@@QAEAAV0@_W@Z
.text:00004CB4 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: UString::Add_PathSepar(void)+13p
.text:00004CB4
.text:00004CB4 var_C           = dword ptr -0Ch
.text:00004CB4 var_8           = dword ptr -8
.text:00004CB4 var_4           = dword ptr -4
.text:00004CB4 arg_0           = word ptr  8
.text:00004CB4
.text:00004CB4                 push    ebp
.text:00004CB5                 mov     ebp, esp
.text:00004CB7                 sub     esp, 0Ch
.text:00004CBA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004CC1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004CC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CCF                 mov     [ebp+var_4], ecx
.text:00004CD2                 mov     eax, [ebp+var_4]
.text:00004CD5                 mov     ecx, [ebp+var_4]
.text:00004CD8                 mov     edx, [eax+8]
.text:00004CDB                 cmp     edx, [ecx+4]
.text:00004CDE                 jnz     short loc_4CE8
.text:00004CE0                 mov     ecx, [ebp+var_4] ; this
.text:00004CE3                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:00004CE8
.text:00004CE8 loc_4CE8:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:00004CE8                 mov     eax, [ebp+var_4]
.text:00004CEB                 mov     ecx, [eax+4]
.text:00004CEE                 mov     [ebp+var_8], ecx
.text:00004CF1                 mov     edx, [ebp+var_4]
.text:00004CF4                 mov     eax, [edx]
.text:00004CF6                 mov     [ebp+var_C], eax
.text:00004CF9                 mov     ecx, [ebp+var_8]
.text:00004CFC                 mov     edx, [ebp+var_C]
.text:00004CFF                 mov     ax, [ebp+arg_0]
.text:00004D03                 mov     [edx+ecx*2], ax
.text:00004D07                 mov     ecx, [ebp+var_8]
.text:00004D0A                 add     ecx, 1
.text:00004D0D                 mov     [ebp+var_8], ecx
.text:00004D10                 xor     edx, edx
.text:00004D12                 mov     eax, [ebp+var_8]
.text:00004D15                 mov     ecx, [ebp+var_C]
.text:00004D18                 mov     [ecx+eax*2], dx
.text:00004D1C                 mov     edx, [ebp+var_4]
.text:00004D1F                 mov     eax, [ebp+var_8]
.text:00004D22                 mov     [edx+4], eax
.text:00004D25                 mov     eax, [ebp+var_4]
.text:00004D28                 add     esp, 0Ch
.text:00004D2B                 cmp     ebp, esp
.text:00004D2D                 call    __RTC_CheckEsp
.text:00004D32                 mov     esp, ebp
.text:00004D34                 pop     ebp
.text:00004D35                 retn    4
.text:00004D35 ??YUString@@QAEAAV0@_W@Z endp
.text:00004D35
.text:00004D35 _text           ends
.text:00004D35
.text:00004D38 ; ===========================================================================
.text:00004D38
.text:00004D38 ; Segment type: Pure code
.text:00004D38 ; Segment permissions: Read/Execute
.text:00004D38 _text           segment para public 'CODE' use32
.text:00004D38                 assume cs:_text
.text:00004D38                 ;org 4D38h
.text:00004D38 ; COMDAT (pick any)
.text:00004D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D38
.text:00004D38 ; =============== S U B R O U T I N E =======================================
.text:00004D38
.text:00004D38 ; Attributes: bp-based frame
.text:00004D38
.text:00004D38 ; void __thiscall UString::DeleteBack(UString *__hidden this)
.text:00004D38                 public ?DeleteBack@UString@@QAEXXZ
.text:00004D38 ?DeleteBack@UString@@QAEXXZ proc near   ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+D4Cp
.text:00004D38
.text:00004D38 var_8           = dword ptr -8
.text:00004D38 var_4           = dword ptr -4
.text:00004D38
.text:00004D38                 push    ebp
.text:00004D39                 mov     ebp, esp
.text:00004D3B                 sub     esp, 8
.text:00004D3E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004D45                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D4C                 mov     [ebp+var_4], ecx
.text:00004D4F                 mov     eax, [ebp+var_4]
.text:00004D52                 mov     ecx, [eax+4]
.text:00004D55                 sub     ecx, 1
.text:00004D58                 mov     [ebp+var_8], ecx
.text:00004D5B                 mov     edx, [ebp+var_4]
.text:00004D5E                 mov     eax, [ebp+var_8]
.text:00004D61                 mov     [edx+4], eax
.text:00004D64                 mov     ecx, [ebp+var_4]
.text:00004D67                 mov     edx, [ecx]
.text:00004D69                 xor     eax, eax
.text:00004D6B                 mov     ecx, [ebp+var_8]
.text:00004D6E                 mov     [edx+ecx*2], ax
.text:00004D72                 mov     esp, ebp
.text:00004D74                 pop     ebp
.text:00004D75                 retn
.text:00004D75 ?DeleteBack@UString@@QAEXXZ endp
.text:00004D75
.text:00004D75 ; ---------------------------------------------------------------------------
.text:00004D76                 align 4
.text:00004D76 _text           ends
.text:00004D76
.text:00004D78 ; ===========================================================================
.text:00004D78
.text:00004D78 ; Segment type: Pure code
.text:00004D78 ; Segment permissions: Read/Execute
.text:00004D78 _text           segment para public 'CODE' use32
.text:00004D78                 assume cs:_text
.text:00004D78                 ;org 4D78h
.text:00004D78 ; COMDAT (pick any)
.text:00004D78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D78
.text:00004D78 ; =============== S U B R O U T I N E =======================================
.text:00004D78
.text:00004D78 ; Attributes: bp-based frame
.text:00004D78
.text:00004D78 ; bool __thiscall NWildcard::CItem::IsDriveItem(NWildcard::CItem *__hidden this)
.text:00004D78                 public ?IsDriveItem@CItem@NWildcard@@QBE_NXZ
.text:00004D78 ?IsDriveItem@CItem@NWildcard@@QBE_NXZ proc near
.text:00004D78                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+151p
.text:00004D78
.text:00004D78 var_8           = dword ptr -8
.text:00004D78 var_4           = dword ptr -4
.text:00004D78
.text:00004D78                 push    ebp
.text:00004D79                 mov     ebp, esp
.text:00004D7B                 sub     esp, 8
.text:00004D7E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004D85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D8C                 mov     [ebp+var_4], ecx
.text:00004D8F                 mov     ecx, [ebp+var_4]
.text:00004D92                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00004D97                 cmp     eax, 1
.text:00004D9A                 jnz     short loc_4DD9
.text:00004D9C                 mov     eax, [ebp+var_4]
.text:00004D9F                 movzx   ecx, byte ptr [eax+0Dh]
.text:00004DA3                 test    ecx, ecx
.text:00004DA5                 jnz     short loc_4DD9
.text:00004DA7                 mov     edx, [ebp+var_4]
.text:00004DAA                 movzx   eax, byte ptr [edx+0Eh]
.text:00004DAE                 test    eax, eax
.text:00004DB0                 jz      short loc_4DD9
.text:00004DB2                 push    0
.text:00004DB4                 mov     ecx, [ebp+var_4]
.text:00004DB7                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00004DBC                 mov     ecx, eax
.text:00004DBE                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00004DC3                 push    eax             ; this
.text:00004DC4                 call    ?IsDriveColonName@NWildcard@@YG_NPB_W@Z ; NWildcard::IsDriveColonName(wchar_t const *)
.text:00004DC9                 movzx   ecx, al
.text:00004DCC                 test    ecx, ecx
.text:00004DCE                 jz      short loc_4DD9
.text:00004DD0                 mov     [ebp+var_8], 1
.text:00004DD7                 jmp     short loc_4DE0
.text:00004DD9 ; ---------------------------------------------------------------------------
.text:00004DD9
.text:00004DD9 loc_4DD9:                               ; CODE XREF: NWildcard::CItem::IsDriveItem(void)+22j
.text:00004DD9                                         ; NWildcard::CItem::IsDriveItem(void)+2Dj ...
.text:00004DD9                 mov     [ebp+var_8], 0
.text:00004DE0
.text:00004DE0 loc_4DE0:                               ; CODE XREF: NWildcard::CItem::IsDriveItem(void)+5Fj
.text:00004DE0                 mov     al, byte ptr [ebp+var_8]
.text:00004DE3                 add     esp, 8
.text:00004DE6                 cmp     ebp, esp
.text:00004DE8                 call    __RTC_CheckEsp
.text:00004DED                 mov     esp, ebp
.text:00004DEF                 pop     ebp
.text:00004DF0                 retn
.text:00004DF0 ?IsDriveItem@CItem@NWildcard@@QBE_NXZ endp ; sp-analysis failed
.text:00004DF0
.text:00004DF0 ; ---------------------------------------------------------------------------
.text:00004DF1                 align 4
.text:00004DF1 _text           ends
.text:00004DF1
.text:00004DF4 ; ===========================================================================
.text:00004DF4
.text:00004DF4 ; Segment type: Pure code
.text:00004DF4 ; Segment permissions: Read/Execute
.text:00004DF4 _text           segment para public 'CODE' use32
.text:00004DF4                 assume cs:_text
.text:00004DF4                 ;org 4DF4h
.text:00004DF4 ; COMDAT (pick any)
.text:00004DF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DF4
.text:00004DF4 ; =============== S U B R O U T I N E =======================================
.text:00004DF4
.text:00004DF4 ; Attributes: bp-based frame
.text:00004DF4
.text:00004DF4 ; void __thiscall NWindows::NFile::NFind::CFileInfoBase::SetAsDir(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00004DF4                 public ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ
.text:00004DF4 ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ proc near
.text:00004DF4                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+192p
.text:00004DF4                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+89Fp ...
.text:00004DF4
.text:00004DF4 var_4           = dword ptr -4
.text:00004DF4
.text:00004DF4                 push    ebp
.text:00004DF5                 mov     ebp, esp
.text:00004DF7                 push    ecx
.text:00004DF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DFF                 mov     [ebp+var_4], ecx
.text:00004E02                 mov     eax, [ebp+var_4]
.text:00004E05                 mov     dword ptr [eax+20h], 10h
.text:00004E0C                 mov     esp, ebp
.text:00004E0E                 pop     ebp
.text:00004E0F                 retn
.text:00004E0F ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ endp
.text:00004E0F
.text:00004E0F _text           ends
.text:00004E0F
.text:00004E10 ; ===========================================================================
.text:00004E10
.text:00004E10 ; Segment type: Pure code
.text:00004E10 ; Segment permissions: Read/Execute
.text:00004E10 _text           segment para public 'CODE' use32
.text:00004E10                 assume cs:_text
.text:00004E10                 ;org 4E10h
.text:00004E10 ; COMDAT (pick any)
.text:00004E10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E10
.text:00004E10 ; =============== S U B R O U T I N E =======================================
.text:00004E10
.text:00004E10 ; Attributes: bp-based frame
.text:00004E10
.text:00004E10 ; _DWORD __thiscall NWindows::NFile::NFind::CStreamEnumerator::CStreamEnumerator(NWindows::NFile::NFind::CStreamEnumerator *this, const struct UString *)
.text:00004E10                 public ??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.text:00004E10 ??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z proc near
.text:00004E10                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+42p
.text:00004E10
.text:00004E10 var_10          = dword ptr -10h
.text:00004E10 var_C           = dword ptr -0Ch
.text:00004E10 var_4           = dword ptr -4
.text:00004E10 arg_0           = dword ptr  8
.text:00004E10
.text:00004E10                 push    ebp
.text:00004E11                 mov     ebp, esp
.text:00004E13                 push    0FFFFFFFFh
.text:00004E15                 push    offset __ehhandler$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.text:00004E1A                 mov     eax, large fs:0
.text:00004E20                 push    eax
.text:00004E21                 push    ecx
.text:00004E22                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004E29                 mov     eax, dword ptr ds:___security_cookie
.text:00004E2E                 xor     eax, ebp
.text:00004E30                 push    eax
.text:00004E31                 lea     eax, [ebp+var_C]
.text:00004E34                 mov     large fs:0, eax
.text:00004E3A                 mov     [ebp+var_10], ecx
.text:00004E3D                 mov     ecx, [ebp+var_10] ; this
.text:00004E40                 call    ??0CFindStream@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindStream::CFindStream(void)
.text:00004E45                 mov     [ebp+var_4], 0
.text:00004E4C                 mov     eax, [ebp+arg_0]
.text:00004E4F                 push    eax
.text:00004E50                 mov     ecx, [ebp+var_10]
.text:00004E53                 add     ecx, 4
.text:00004E56                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00004E5B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004E62                 mov     eax, [ebp+var_10]
.text:00004E65                 mov     ecx, [ebp+var_C]
.text:00004E68                 mov     large fs:0, ecx
.text:00004E6F                 pop     ecx
.text:00004E70                 add     esp, 10h
.text:00004E73                 cmp     ebp, esp
.text:00004E75                 call    __RTC_CheckEsp
.text:00004E7A                 mov     esp, ebp
.text:00004E7C                 pop     ebp
.text:00004E7D                 retn    4
.text:00004E7D ??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z endp
.text:00004E7D
.text:00004E7D _text           ends
.text:00004E7D
.text$x:00004E80 ; ===========================================================================
.text$x:00004E80
.text$x:00004E80 ; Segment type: Pure code
.text$x:00004E80 ; Segment permissions: Read/Execute
.text$x:00004E80 _text$x         segment para public 'CODE' use32
.text$x:00004E80                 assume cs:_text$x
.text$x:00004E80                 ;org 4E80h
.text$x:00004E80 ; COMDAT (pick associative to section at 4E10)
.text$x:00004E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E80
.text$x:00004E80 ; =============== S U B R O U T I N E =======================================
.text$x:00004E80
.text$x:00004E80
.text$x:00004E80 __unwindfunclet$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0 proc near
.text$x:00004E80                                         ; DATA XREF: .xdata$x:00004EA8o
.text$x:00004E80                 mov     ecx, [ebp-10h]  ; this
.text$x:00004E83                 jmp     ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindStream::~CFindStream(void)
.text$x:00004E83 __unwindfunclet$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0 endp
.text$x:00004E83
.text$x:00004E88
.text$x:00004E88 ; =============== S U B R O U T I N E =======================================
.text$x:00004E88
.text$x:00004E88
.text$x:00004E88 __ehhandler$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z proc near
.text$x:00004E88                                         ; DATA XREF: NWindows::NFile::NFind::CStreamEnumerator::CStreamEnumerator(UString const &)+5o
.text$x:00004E88
.text$x:00004E88 arg_4           = dword ptr  8
.text$x:00004E88
.text$x:00004E88                 mov     edx, [esp+arg_4]
.text$x:00004E8C                 lea     eax, [edx+0Ch]
.text$x:00004E8F                 mov     ecx, [edx-8]
.text$x:00004E92                 xor     ecx, eax
.text$x:00004E94                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E99                 mov     eax, offset __ehfuncinfo$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.text$x:00004E9E                 jmp     ___CxxFrameHandler3
.text$x:00004E9E __ehhandler$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z endp
.text$x:00004E9E
.text$x:00004E9E ; ---------------------------------------------------------------------------
.text$x:00004EA3                 align 4
.text$x:00004EA3 _text$x         ends
.text$x:00004EA3
.xdata$x:00004EA4 ; ===========================================================================
.xdata$x:00004EA4
.xdata$x:00004EA4 ; Segment type: Pure data
.xdata$x:00004EA4 ; Segment permissions: Read
.xdata$x:00004EA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004EA4                 assume cs:_xdata$x
.xdata$x:00004EA4                 ;org 4EA4h
.xdata$x:00004EA4 ; COMDAT (pick associative to section at 4E10)
.xdata$x:00004EA4 __unwindtable$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z db 0FFh
.xdata$x:00004EA4                                         ; DATA XREF: .xdata$x:00004EB4o
.xdata$x:00004EA5                 db 0FFh
.xdata$x:00004EA6                 db 0FFh
.xdata$x:00004EA7                 db 0FFh
.xdata$x:00004EA8                 dd offset __unwindfunclet$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0
.xdata$x:00004EAC __ehfuncinfo$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z db  22h ; "
.xdata$x:00004EAC                                         ; DATA XREF: __ehhandler$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z+11o
.xdata$x:00004EAD                 db    5
.xdata$x:00004EAE                 db  93h ; ô
.xdata$x:00004EAF                 db  19h
.xdata$x:00004EB0                 db    1
.xdata$x:00004EB1                 db    0
.xdata$x:00004EB2                 db    0
.xdata$x:00004EB3                 db    0
.xdata$x:00004EB4                 dd offset __unwindtable$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.xdata$x:00004EB8                 db    0
.xdata$x:00004EB9                 db    0
.xdata$x:00004EBA                 db    0
.xdata$x:00004EBB                 db    0
.xdata$x:00004EBC                 db    0
.xdata$x:00004EBD                 db    0
.xdata$x:00004EBE                 db    0
.xdata$x:00004EBF                 db    0
.xdata$x:00004EC0                 db    0
.xdata$x:00004EC1                 db    0
.xdata$x:00004EC2                 db    0
.xdata$x:00004EC3                 db    0
.xdata$x:00004EC4                 db    0
.xdata$x:00004EC5                 db    0
.xdata$x:00004EC6                 db    0
.xdata$x:00004EC7                 db    0
.xdata$x:00004EC8                 db    0
.xdata$x:00004EC9                 db    0
.xdata$x:00004ECA                 db    0
.xdata$x:00004ECB                 db    0
.xdata$x:00004ECC                 db    1
.xdata$x:00004ECD                 db    0
.xdata$x:00004ECE                 db    0
.xdata$x:00004ECF                 db    0
.xdata$x:00004ECF _xdata$x        ends
.xdata$x:00004ECF
.text:00004ED0 ; ===========================================================================
.text:00004ED0
.text:00004ED0 ; Segment type: Pure code
.text:00004ED0 ; Segment permissions: Read/Execute
.text:00004ED0 _text           segment para public 'CODE' use32
.text:00004ED0                 assume cs:_text
.text:00004ED0                 ;org 4ED0h
.text:00004ED0 ; COMDAT (pick any)
.text:00004ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004ED0
.text:00004ED0 ; =============== S U B R O U T I N E =======================================
.text:00004ED0
.text:00004ED0 ; Attributes: bp-based frame
.text:00004ED0
.text:00004ED0 ; _DWORD __thiscall NWindows::NFile::NFind::CFindStream::CFindStream(NWindows::NFile::NFind::CFindStream *__hidden this)
.text:00004ED0                 public ??0CFindStream@NFind@NFile@NWindows@@QAE@XZ
.text:00004ED0 ??0CFindStream@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004ED0                                         ; CODE XREF: NWindows::NFile::NFind::CStreamEnumerator::CStreamEnumerator(UString const &)+30p
.text:00004ED0
.text:00004ED0 var_4           = dword ptr -4
.text:00004ED0
.text:00004ED0                 push    ebp
.text:00004ED1                 mov     ebp, esp
.text:00004ED3                 push    ecx
.text:00004ED4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EDB                 mov     [ebp+var_4], ecx
.text:00004EDE                 mov     ecx, [ebp+var_4] ; this
.text:00004EE1                 call    ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFileBase::CFindFileBase(void)
.text:00004EE6                 mov     eax, [ebp+var_4]
.text:00004EE9                 add     esp, 4
.text:00004EEC                 cmp     ebp, esp
.text:00004EEE                 call    __RTC_CheckEsp
.text:00004EF3                 mov     esp, ebp
.text:00004EF5                 pop     ebp
.text:00004EF6                 retn
.text:00004EF6 ??0CFindStream@NFind@NFile@NWindows@@QAE@XZ endp
.text:00004EF6
.text:00004EF6 ; ---------------------------------------------------------------------------
.text:00004EF7                 align 4
.text:00004EF7 _text           ends
.text:00004EF7
.text:00004EF8 ; ===========================================================================
.text:00004EF8
.text:00004EF8 ; Segment type: Pure code
.text:00004EF8 ; Segment permissions: Read/Execute
.text:00004EF8 _text           segment para public 'CODE' use32
.text:00004EF8                 assume cs:_text
.text:00004EF8                 ;org 4EF8h
.text:00004EF8 ; COMDAT (pick any)
.text:00004EF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004EF8
.text:00004EF8 ; =============== S U B R O U T I N E =======================================
.text:00004EF8
.text:00004EF8 ; Attributes: bp-based frame
.text:00004EF8
.text:00004EF8 ; _DWORD __thiscall NWindows::NFile::NFind::CFindStream::~CFindStream(NWindows::NFile::NFind::CFindStream *__hidden this)
.text:00004EF8                 public ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ
.text:00004EF8 ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004EF8                                         ; CODE XREF: __unwindfunclet$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0+3j
.text:00004EF8                                         ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)+49p ...
.text:00004EF8
.text:00004EF8 var_4           = dword ptr -4
.text:00004EF8
.text:00004EF8                 push    ebp
.text:00004EF9                 mov     ebp, esp
.text:00004EFB                 push    ecx
.text:00004EFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F03                 mov     [ebp+var_4], ecx
.text:00004F06                 mov     ecx, [ebp+var_4] ; this
.text:00004F09                 call    ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFileBase::~CFindFileBase(void)
.text:00004F0E                 add     esp, 4
.text:00004F11                 cmp     ebp, esp
.text:00004F13                 call    __RTC_CheckEsp
.text:00004F18                 mov     esp, ebp
.text:00004F1A                 pop     ebp
.text:00004F1B                 retn
.text:00004F1B ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ endp
.text:00004F1B
.text:00004F1B _text           ends
.text:00004F1B
.text:00004F1C ; ===========================================================================
.text:00004F1C
.text:00004F1C ; Segment type: Pure code
.text:00004F1C ; Segment permissions: Read/Execute
.text:00004F1C _text           segment para public 'CODE' use32
.text:00004F1C                 assume cs:_text
.text:00004F1C                 ;org 4F1Ch
.text:00004F1C ; COMDAT (pick any)
.text:00004F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F1C
.text:00004F1C ; =============== S U B R O U T I N E =======================================
.text:00004F1C
.text:00004F1C ; Attributes: bp-based frame
.text:00004F1C
.text:00004F1C ; _DWORD __thiscall NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(NWindows::NFile::NFind::CStreamEnumerator *__hidden this)
.text:00004F1C                 public ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ
.text:00004F1C ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004F1C                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+D6p
.text:00004F1C                                         ; EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+10Ep ...
.text:00004F1C
.text:00004F1C var_10          = dword ptr -10h
.text:00004F1C var_C           = dword ptr -0Ch
.text:00004F1C var_4           = dword ptr -4
.text:00004F1C
.text:00004F1C                 push    ebp
.text:00004F1D                 mov     ebp, esp
.text:00004F1F                 push    0FFFFFFFFh
.text:00004F21                 push    offset __ehhandler$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ
.text:00004F26                 mov     eax, large fs:0
.text:00004F2C                 push    eax
.text:00004F2D                 push    ecx
.text:00004F2E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004F35                 mov     eax, dword ptr ds:___security_cookie
.text:00004F3A                 xor     eax, ebp
.text:00004F3C                 push    eax
.text:00004F3D                 lea     eax, [ebp+var_C]
.text:00004F40                 mov     large fs:0, eax
.text:00004F46                 mov     [ebp+var_10], ecx
.text:00004F49                 mov     [ebp+var_4], 0
.text:00004F50                 mov     ecx, [ebp+var_10]
.text:00004F53                 add     ecx, 4          ; this
.text:00004F56                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004F5B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004F62                 mov     ecx, [ebp+var_10] ; this
.text:00004F65                 call    ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindStream::~CFindStream(void)
.text:00004F6A                 mov     ecx, [ebp+var_C]
.text:00004F6D                 mov     large fs:0, ecx
.text:00004F74                 pop     ecx
.text:00004F75                 add     esp, 10h
.text:00004F78                 cmp     ebp, esp
.text:00004F7A                 call    __RTC_CheckEsp
.text:00004F7F                 mov     esp, ebp
.text:00004F81                 pop     ebp
.text:00004F82                 retn
.text:00004F82 ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ endp
.text:00004F82
.text:00004F82 ; ---------------------------------------------------------------------------
.text:00004F83                 align 4
.text:00004F83 _text           ends
.text:00004F83
.text$x:00004F84 ; ===========================================================================
.text$x:00004F84
.text$x:00004F84 ; Segment type: Pure code
.text$x:00004F84 ; Segment permissions: Read/Execute
.text$x:00004F84 _text$x         segment para public 'CODE' use32
.text$x:00004F84                 assume cs:_text$x
.text$x:00004F84                 ;org 4F84h
.text$x:00004F84 ; COMDAT (pick associative to section at 4F1C)
.text$x:00004F84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F84
.text$x:00004F84 ; =============== S U B R O U T I N E =======================================
.text$x:00004F84
.text$x:00004F84
.text$x:00004F84 __unwindfunclet$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:00004F84                                         ; DATA XREF: .xdata$x:00004FACo
.text$x:00004F84                 mov     ecx, [ebp-10h]  ; this
.text$x:00004F87                 jmp     ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindStream::~CFindStream(void)
.text$x:00004F87 __unwindfunclet$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ$0 endp
.text$x:00004F87
.text$x:00004F8C
.text$x:00004F8C ; =============== S U B R O U T I N E =======================================
.text$x:00004F8C
.text$x:00004F8C
.text$x:00004F8C __ehhandler$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ proc near
.text$x:00004F8C                                         ; DATA XREF: NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)+5o
.text$x:00004F8C
.text$x:00004F8C arg_4           = dword ptr  8
.text$x:00004F8C
.text$x:00004F8C                 mov     edx, [esp+arg_4]
.text$x:00004F90                 lea     eax, [edx+0Ch]
.text$x:00004F93                 mov     ecx, [edx-8]
.text$x:00004F96                 xor     ecx, eax
.text$x:00004F98                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F9D                 mov     eax, offset __ehfuncinfo$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ
.text$x:00004FA2                 jmp     ___CxxFrameHandler3
.text$x:00004FA2 __ehhandler$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ endp
.text$x:00004FA2
.text$x:00004FA2 ; ---------------------------------------------------------------------------
.text$x:00004FA7                 align 4
.text$x:00004FA7 _text$x         ends
.text$x:00004FA7
.xdata$x:00004FA8 ; ===========================================================================
.xdata$x:00004FA8
.xdata$x:00004FA8 ; Segment type: Pure data
.xdata$x:00004FA8 ; Segment permissions: Read
.xdata$x:00004FA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004FA8                 assume cs:_xdata$x
.xdata$x:00004FA8                 ;org 4FA8h
.xdata$x:00004FA8 ; COMDAT (pick associative to section at 4F1C)
.xdata$x:00004FA8 __unwindtable$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:00004FA8                                         ; DATA XREF: .xdata$x:00004FB8o
.xdata$x:00004FA9                 db 0FFh
.xdata$x:00004FAA                 db 0FFh
.xdata$x:00004FAB                 db 0FFh
.xdata$x:00004FAC                 dd offset __unwindfunclet$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ$0
.xdata$x:00004FB0 __ehfuncinfo$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:00004FB0                                         ; DATA XREF: __ehhandler$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ+11o
.xdata$x:00004FB1                 db    5
.xdata$x:00004FB2                 db  93h ; ô
.xdata$x:00004FB3                 db  19h
.xdata$x:00004FB4                 db    1
.xdata$x:00004FB5                 db    0
.xdata$x:00004FB6                 db    0
.xdata$x:00004FB7                 db    0
.xdata$x:00004FB8                 dd offset __unwindtable$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ
.xdata$x:00004FBC                 db    0
.xdata$x:00004FBD                 db    0
.xdata$x:00004FBE                 db    0
.xdata$x:00004FBF                 db    0
.xdata$x:00004FC0                 db    0
.xdata$x:00004FC1                 db    0
.xdata$x:00004FC2                 db    0
.xdata$x:00004FC3                 db    0
.xdata$x:00004FC4                 db    0
.xdata$x:00004FC5                 db    0
.xdata$x:00004FC6                 db    0
.xdata$x:00004FC7                 db    0
.xdata$x:00004FC8                 db    0
.xdata$x:00004FC9                 db    0
.xdata$x:00004FCA                 db    0
.xdata$x:00004FCB                 db    0
.xdata$x:00004FCC                 db    0
.xdata$x:00004FCD                 db    0
.xdata$x:00004FCE                 db    0
.xdata$x:00004FCF                 db    0
.xdata$x:00004FD0                 db    1
.xdata$x:00004FD1                 db    0
.xdata$x:00004FD2                 db    0
.xdata$x:00004FD3                 db    0
.xdata$x:00004FD3 _xdata$x        ends
.xdata$x:00004FD3
.text:00004FD4 ; ===========================================================================
.text:00004FD4
.text:00004FD4 ; Segment type: Pure code
.text:00004FD4 ; Segment permissions: Read/Execute
.text:00004FD4 _text           segment para public 'CODE' use32
.text:00004FD4                 assume cs:_text
.text:00004FD4                 ;org 4FD4h
.text:00004FD4 ; COMDAT (pick any)
.text:00004FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FD4
.text:00004FD4 ; =============== S U B R O U T I N E =======================================
.text:00004FD4
.text:00004FD4 ; Attributes: bp-based frame
.text:00004FD4
.text:00004FD4 ; _DWORD __thiscall NWindows::NFile::NFind::CStreamInfo::CStreamInfo(NWindows::NFile::NFind::CStreamInfo *__hidden this)
.text:00004FD4                 public ??0CStreamInfo@NFind@NFile@NWindows@@QAE@XZ
.text:00004FD4 ??0CStreamInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004FD4                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+51p
.text:00004FD4
.text:00004FD4 var_4           = dword ptr -4
.text:00004FD4
.text:00004FD4                 push    ebp
.text:00004FD5                 mov     ebp, esp
.text:00004FD7                 push    ecx
.text:00004FD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FDF                 mov     [ebp+var_4], ecx
.text:00004FE2                 mov     ecx, [ebp+var_4]
.text:00004FE5                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004FEA                 mov     eax, [ebp+var_4]
.text:00004FED                 add     esp, 4
.text:00004FF0                 cmp     ebp, esp
.text:00004FF2                 call    __RTC_CheckEsp
.text:00004FF7                 mov     esp, ebp
.text:00004FF9                 pop     ebp
.text:00004FFA                 retn
.text:00004FFA ??0CStreamInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:00004FFA
.text:00004FFA ; ---------------------------------------------------------------------------
.text:00004FFB                 align 4
.text:00004FFB _text           ends
.text:00004FFB
.text:00004FFC ; ===========================================================================
.text:00004FFC
.text:00004FFC ; Segment type: Pure code
.text:00004FFC ; Segment permissions: Read/Execute
.text:00004FFC _text           segment para public 'CODE' use32
.text:00004FFC                 assume cs:_text
.text:00004FFC                 ;org 4FFCh
.text:00004FFC ; COMDAT (pick any)
.text:00004FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FFC
.text:00004FFC ; =============== S U B R O U T I N E =======================================
.text:00004FFC
.text:00004FFC ; Attributes: bp-based frame
.text:00004FFC
.text:00004FFC ; _DWORD __thiscall NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(NWindows::NFile::NFind::CStreamInfo *__hidden this)
.text:00004FFC                 public ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ
.text:00004FFC ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00004FFC                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+C7p
.text:00004FFC                                         ; EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+FFp ...
.text:00004FFC
.text:00004FFC var_4           = dword ptr -4
.text:00004FFC
.text:00004FFC                 push    ebp
.text:00004FFD                 mov     ebp, esp
.text:00004FFF                 push    ecx
.text:00005000                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005007                 mov     [ebp+var_4], ecx
.text:0000500A                 mov     ecx, [ebp+var_4] ; this
.text:0000500D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005012                 add     esp, 4
.text:00005015                 cmp     ebp, esp
.text:00005017                 call    __RTC_CheckEsp
.text:0000501C                 mov     esp, ebp
.text:0000501E                 pop     ebp
.text:0000501F                 retn
.text:0000501F ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:0000501F
.text:0000501F _text           ends
.text:0000501F
.text:00005020 ; ===========================================================================
.text:00005020
.text:00005020 ; Segment type: Pure code
.text:00005020 ; Segment permissions: Read/Execute
.text:00005020 _text           segment para public 'CODE' use32
.text:00005020                 assume cs:_text
.text:00005020                 ;org 5020h
.text:00005020 ; COMDAT (pick any)
.text:00005020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005020
.text:00005020 ; =============== S U B R O U T I N E =======================================
.text:00005020
.text:00005020 ; Attributes: bp-based frame
.text:00005020
.text:00005020 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::CFileInfo(NWindows::NFile::NFind::CFileInfo *this, const struct NWindows::NFile::NFind::CFileInfo *)
.text:00005020                 public ??0CFileInfo@NFind@NFile@NWindows@@QAE@ABU0123@@Z
.text:00005020 ??0CFileInfo@NFind@NFile@NWindows@@QAE@ABU0123@@Z proc near
.text:00005020                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+1BBp
.text:00005020
.text:00005020 var_4           = dword ptr -4
.text:00005020 arg_0           = dword ptr  8
.text:00005020
.text:00005020                 push    ebp
.text:00005021                 mov     ebp, esp
.text:00005023                 push    ecx
.text:00005024                 push    esi
.text:00005025                 push    edi
.text:00005026                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000502D                 mov     [ebp+var_4], ecx
.text:00005030                 mov     esi, [ebp+arg_0]
.text:00005033                 mov     ecx, 0Ah
.text:00005038                 mov     edi, [ebp+var_4]
.text:0000503B                 rep movsd
.text:0000503D                 mov     eax, [ebp+arg_0]
.text:00005040                 add     eax, 28h ; '('
.text:00005043                 push    eax
.text:00005044                 mov     ecx, [ebp+var_4]
.text:00005047                 add     ecx, 28h ; '('
.text:0000504A                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000504F                 mov     eax, [ebp+var_4]
.text:00005052                 pop     edi
.text:00005053                 pop     esi
.text:00005054                 add     esp, 4
.text:00005057                 cmp     ebp, esp
.text:00005059                 call    __RTC_CheckEsp
.text:0000505E                 mov     esp, ebp
.text:00005060                 pop     ebp
.text:00005061                 retn    4
.text:00005061 ??0CFileInfo@NFind@NFile@NWindows@@QAE@ABU0123@@Z endp
.text:00005061
.text:00005061 _text           ends
.text:00005061
.text:00005064 ; ===========================================================================
.text:00005064
.text:00005064 ; Segment type: Pure code
.text:00005064 ; Segment permissions: Read/Execute
.text:00005064 _text           segment para public 'CODE' use32
.text:00005064                 assume cs:_text
.text:00005064                 ;org 5064h
.text:00005064 ; COMDAT (pick any)
.text:00005064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005064
.text:00005064 ; =============== S U B R O U T I N E =======================================
.text:00005064
.text:00005064 ; Attributes: bp-based frame
.text:00005064
.text:00005064 ; bool __stdcall IsPathSepar(wchar_t)
.text:00005064                 public ?IsPathSepar@@YG_N_W@Z
.text:00005064 ?IsPathSepar@@YG_N_W@Z proc near        ; CODE XREF: IsVirtualFsFolder(UString const &,UString const &)+72p
.text:00005064                                         ; CDirItems::FillFixedReparse(void)+324p
.text:00005064
.text:00005064 var_4           = dword ptr -4
.text:00005064 arg_0           = word ptr  8
.text:00005064
.text:00005064                 push    ebp
.text:00005065                 mov     ebp, esp
.text:00005067                 push    ecx
.text:00005068                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000506F                 movzx   eax, [ebp+arg_0]
.text:00005073                 cmp     eax, 5Ch ; '\'
.text:00005076                 jz      short loc_508A
.text:00005078                 movzx   ecx, [ebp+arg_0]
.text:0000507C                 cmp     ecx, 2Fh ; '/'
.text:0000507F                 jz      short loc_508A
.text:00005081                 mov     [ebp+var_4], 0
.text:00005088                 jmp     short loc_5091
.text:0000508A ; ---------------------------------------------------------------------------
.text:0000508A
.text:0000508A loc_508A:                               ; CODE XREF: IsPathSepar(wchar_t)+12j
.text:0000508A                                         ; IsPathSepar(wchar_t)+1Bj
.text:0000508A                 mov     [ebp+var_4], 1
.text:00005091
.text:00005091 loc_5091:                               ; CODE XREF: IsPathSepar(wchar_t)+24j
.text:00005091                 mov     al, byte ptr [ebp+var_4]
.text:00005094                 mov     esp, ebp
.text:00005096                 pop     ebp
.text:00005097                 retn    4
.text:00005097 ?IsPathSepar@@YG_N_W@Z endp
.text:00005097
.text:00005097 ; ---------------------------------------------------------------------------
.text:0000509A                 align 4
.text:0000509A _text           ends
.text:0000509A
.text:0000509C ; ===========================================================================
.text:0000509C
.text:0000509C ; Segment type: Pure code
.text:0000509C ; Segment permissions: Read/Execute
.text:0000509C _text           segment para public 'CODE' use32
.text:0000509C                 assume cs:_text
.text:0000509C                 ;org 509Ch
.text:0000509C ; COMDAT (pick any)
.text:0000509C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000509C
.text:0000509C ; =============== S U B R O U T I N E =======================================
.text:0000509C
.text:0000509C ; Attributes: bp-based frame
.text:0000509C
.text:0000509C ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:0000509C                 public ?Ptr@UString@@QBEPB_WI@Z
.text:0000509C ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: CDirItems::FillFixedReparse(void)+5CAp
.text:0000509C
.text:0000509C var_4           = dword ptr -4
.text:0000509C arg_0           = dword ptr  8
.text:0000509C
.text:0000509C                 push    ebp
.text:0000509D                 mov     ebp, esp
.text:0000509F                 push    ecx
.text:000050A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050A7                 mov     [ebp+var_4], ecx
.text:000050AA                 mov     eax, [ebp+var_4]
.text:000050AD                 mov     ecx, [eax]
.text:000050AF                 mov     edx, [ebp+arg_0]
.text:000050B2                 lea     eax, [ecx+edx*2]
.text:000050B5                 mov     esp, ebp
.text:000050B7                 pop     ebp
.text:000050B8                 retn    4
.text:000050B8 ?Ptr@UString@@QBEPB_WI@Z endp
.text:000050B8
.text:000050B8 ; ---------------------------------------------------------------------------
.text:000050BB                 align 4
.text:000050BB _text           ends
.text:000050BB
.text:000050BC ; ===========================================================================
.text:000050BC
.text:000050BC ; Segment type: Pure code
.text:000050BC ; Segment permissions: Read/Execute
.text:000050BC _text           segment para public 'CODE' use32
.text:000050BC                 assume cs:_text
.text:000050BC                 ;org 50BCh
.text:000050BC ; COMDAT (pick any)
.text:000050BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050BC
.text:000050BC ; =============== S U B R O U T I N E =======================================
.text:000050BC
.text:000050BC ; Attributes: bp-based frame
.text:000050BC
.text:000050BC ; const wchar_t *__thiscall UString::RightPtr(UString *this, unsigned int)
.text:000050BC                 public ?RightPtr@UString@@QBEPB_WI@Z
.text:000050BC ?RightPtr@UString@@QBEPB_WI@Z proc near ; CODE XREF: CDirItems::FillFixedReparse(void)+288p
.text:000050BC
.text:000050BC var_4           = dword ptr -4
.text:000050BC arg_0           = dword ptr  8
.text:000050BC
.text:000050BC                 push    ebp
.text:000050BD                 mov     ebp, esp
.text:000050BF                 push    ecx
.text:000050C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050C7                 mov     [ebp+var_4], ecx
.text:000050CA                 mov     eax, [ebp+var_4]
.text:000050CD                 mov     ecx, [eax+4]
.text:000050D0                 mov     edx, [ebp+var_4]
.text:000050D3                 mov     eax, [edx]
.text:000050D5                 lea     eax, [eax+ecx*2]
.text:000050D8                 mov     ecx, [ebp+arg_0]
.text:000050DB                 shl     ecx, 1
.text:000050DD                 sub     eax, ecx
.text:000050DF                 mov     esp, ebp
.text:000050E1                 pop     ebp
.text:000050E2                 retn    4
.text:000050E2 ?RightPtr@UString@@QBEPB_WI@Z endp
.text:000050E2
.text:000050E2 ; ---------------------------------------------------------------------------
.text:000050E5                 align 4
.text:000050E5 _text           ends
.text:000050E5
.text:000050E8 ; ===========================================================================
.text:000050E8
.text:000050E8 ; Segment type: Pure code
.text:000050E8 ; Segment permissions: Read/Execute
.text:000050E8 _text           segment para public 'CODE' use32
.text:000050E8                 assume cs:_text
.text:000050E8                 ;org 50E8h
.text:000050E8 ; COMDAT (pick any)
.text:000050E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050E8
.text:000050E8 ; =============== S U B R O U T I N E =======================================
.text:000050E8
.text:000050E8 ; Attributes: bp-based frame
.text:000050E8
.text:000050E8 ; public: class UString __thiscall UString::Left(unsigned int)const
.text:000050E8                 public ?Left@UString@@QBE?AV1@I@Z
.text:000050E8 ?Left@UString@@QBE?AV1@I@Z proc near    ; CODE XREF: CDirItems::FillFixedReparse(void)+30Cp
.text:000050E8                                         ; CDirItems::FillFixedReparse(void)+4F6p ...
.text:000050E8
.text:000050E8 var_8           = dword ptr -8
.text:000050E8 var_4           = dword ptr -4
.text:000050E8 arg_0           = dword ptr  8
.text:000050E8 arg_4           = dword ptr  0Ch
.text:000050E8
.text:000050E8                 push    ebp
.text:000050E9                 mov     ebp, esp
.text:000050EB                 sub     esp, 8
.text:000050EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000050F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050FC                 mov     [ebp+var_4], ecx
.text:000050FF                 mov     [ebp+var_8], 0
.text:00005106                 mov     eax, [ebp+var_4]
.text:00005109                 push    eax
.text:0000510A                 mov     ecx, [ebp+arg_4]
.text:0000510D                 push    ecx
.text:0000510E                 mov     ecx, [ebp+arg_0]
.text:00005111                 call    ??0UString@@AAE@IABV0@@Z ; UString::UString(uint,UString const &)
.text:00005116                 mov     edx, [ebp+var_8]
.text:00005119                 or      edx, 1
.text:0000511C                 mov     [ebp+var_8], edx
.text:0000511F                 mov     eax, [ebp+arg_0]
.text:00005122                 add     esp, 8
.text:00005125                 cmp     ebp, esp
.text:00005127                 call    __RTC_CheckEsp
.text:0000512C                 mov     esp, ebp
.text:0000512E                 pop     ebp
.text:0000512F                 retn    8
.text:0000512F ?Left@UString@@QBE?AV1@I@Z endp
.text:0000512F
.text:0000512F ; ---------------------------------------------------------------------------
.text:00005132                 align 4
.text:00005132 _text           ends
.text:00005132
.text:00005134 ; ===========================================================================
.text:00005134
.text:00005134 ; Segment type: Pure code
.text:00005134 ; Segment permissions: Read/Execute
.text:00005134 _text           segment para public 'CODE' use32
.text:00005134                 assume cs:_text
.text:00005134                 ;org 5134h
.text:00005134 ; COMDAT (pick any)
.text:00005134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005134
.text:00005134 ; =============== S U B R O U T I N E =======================================
.text:00005134
.text:00005134 ; Attributes: bp-based frame
.text:00005134
.text:00005134 ; bool __thiscall NWindows::NFile::CReparseAttr::IsSymLink(NWindows::NFile::CReparseAttr *__hidden this)
.text:00005134                 public ?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ
.text:00005134 ?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ proc near
.text:00005134                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+5EDp
.text:00005134
.text:00005134 var_4           = dword ptr -4
.text:00005134
.text:00005134                 push    ebp
.text:00005135                 mov     ebp, esp
.text:00005137                 push    ecx
.text:00005138                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000513F                 mov     [ebp+var_4], ecx
.text:00005142                 mov     eax, [ebp+var_4]
.text:00005145                 xor     ecx, ecx
.text:00005147                 cmp     dword ptr [eax], 0A000000Ch
.text:0000514D                 setz    cl
.text:00005150                 mov     al, cl
.text:00005152                 mov     esp, ebp
.text:00005154                 pop     ebp
.text:00005155                 retn
.text:00005155 ?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ endp
.text:00005155
.text:00005155 ; ---------------------------------------------------------------------------
.text:00005156                 align 4
.text:00005156 _text           ends
.text:00005156
.text:00005158 ; ===========================================================================
.text:00005158
.text:00005158 ; Segment type: Pure code
.text:00005158 ; Segment permissions: Read/Execute
.text:00005158 _text           segment para public 'CODE' use32
.text:00005158                 assume cs:_text
.text:00005158                 ;org 5158h
.text:00005158 ; COMDAT (pick any)
.text:00005158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005158
.text:00005158 ; =============== S U B R O U T I N E =======================================
.text:00005158
.text:00005158 ; Attributes: bp-based frame
.text:00005158
.text:00005158 ; bool __thiscall NWindows::NFile::CReparseAttr::IsRelative(NWindows::NFile::CReparseAttr *__hidden this)
.text:00005158                 public ?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ
.text:00005158 ?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ proc near
.text:00005158                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+E7p
.text:00005158
.text:00005158 var_4           = dword ptr -4
.text:00005158
.text:00005158                 push    ebp
.text:00005159                 mov     ebp, esp
.text:0000515B                 push    ecx
.text:0000515C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005163                 mov     [ebp+var_4], ecx
.text:00005166                 mov     eax, [ebp+var_4]
.text:00005169                 xor     ecx, ecx
.text:0000516B                 cmp     dword ptr [eax+4], 1
.text:0000516F                 setz    cl
.text:00005172                 mov     al, cl
.text:00005174                 mov     esp, ebp
.text:00005176                 pop     ebp
.text:00005177                 retn
.text:00005177 ?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ endp
.text:00005177
.text:00005177 _text           ends
.text:00005177
.text:00005178 ; ===========================================================================
.text:00005178
.text:00005178 ; Segment type: Pure code
.text:00005178 ; Segment permissions: Read/Execute
.text:00005178 _text           segment para public 'CODE' use32
.text:00005178                 assume cs:_text
.text:00005178                 ;org 5178h
.text:00005178 ; COMDAT (pick any)
.text:00005178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005178
.text:00005178 ; =============== S U B R O U T I N E =======================================
.text:00005178
.text:00005178 ; Attributes: bp-based frame
.text:00005178
.text:00005178 ; public: unsigned int __thiscall CObjectVector<class UString>::Size(void)const
.text:00005178                 public ?Size@?$CObjectVector@VUString@@@@QBEIXZ
.text:00005178 ?Size@?$CObjectVector@VUString@@@@QBEIXZ proc near
.text:00005178                                         ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+C9p
.text:00005178                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+BA6p ...
.text:00005178
.text:00005178 var_4           = dword ptr -4
.text:00005178
.text:00005178                 push    ebp
.text:00005179                 mov     ebp, esp
.text:0000517B                 push    ecx
.text:0000517C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005183                 mov     [ebp+var_4], ecx
.text:00005186                 mov     ecx, [ebp+var_4]
.text:00005189                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000518E                 add     esp, 4
.text:00005191                 cmp     ebp, esp
.text:00005193                 call    __RTC_CheckEsp
.text:00005198                 mov     esp, ebp
.text:0000519A                 pop     ebp
.text:0000519B                 retn
.text:0000519B ?Size@?$CObjectVector@VUString@@@@QBEIXZ endp
.text:0000519B
.text:0000519B _text           ends
.text:0000519B
.text:0000519C ; ===========================================================================
.text:0000519C
.text:0000519C ; Segment type: Pure code
.text:0000519C ; Segment permissions: Read/Execute
.text:0000519C _text           segment para public 'CODE' use32
.text:0000519C                 assume cs:_text
.text:0000519C                 ;org 519Ch
.text:0000519C ; COMDAT (pick any)
.text:0000519C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000519C
.text:0000519C ; =============== S U B R O U T I N E =======================================
.text:0000519C
.text:0000519C ; Attributes: bp-based frame
.text:0000519C
.text:0000519C ; public: bool __thiscall CObjectVector<class UString>::IsEmpty(void)const
.text:0000519C                 public ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
.text:0000519C ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ proc near
.text:0000519C                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+76p
.text:0000519C                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+392p
.text:0000519C
.text:0000519C var_4           = dword ptr -4
.text:0000519C
.text:0000519C                 push    ebp
.text:0000519D                 mov     ebp, esp
.text:0000519F                 push    ecx
.text:000051A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051A7                 mov     [ebp+var_4], ecx
.text:000051AA                 mov     ecx, [ebp+var_4]
.text:000051AD                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:000051B2                 add     esp, 4
.text:000051B5                 cmp     ebp, esp
.text:000051B7                 call    __RTC_CheckEsp
.text:000051BC                 mov     esp, ebp
.text:000051BE                 pop     ebp
.text:000051BF                 retn
.text:000051BF ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ endp
.text:000051BF
.text:000051BF _text           ends
.text:000051BF
.text:000051C0 ; ===========================================================================
.text:000051C0
.text:000051C0 ; Segment type: Pure code
.text:000051C0 ; Segment permissions: Read/Execute
.text:000051C0 _text           segment para public 'CODE' use32
.text:000051C0                 assume cs:_text
.text:000051C0                 ;org 51C0h
.text:000051C0 ; COMDAT (pick any)
.text:000051C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000051C0
.text:000051C0 ; =============== S U B R O U T I N E =======================================
.text:000051C0
.text:000051C0 ; Attributes: bp-based frame
.text:000051C0
.text:000051C0 ; public: void __thiscall CObjectVector<class UString>::ReserveDown(void)
.text:000051C0                 public ?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ
.text:000051C0 ?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:000051C0                                         ; CODE XREF: CDirItems::ReserveDown(void)+11p
.text:000051C0
.text:000051C0 var_4           = dword ptr -4
.text:000051C0
.text:000051C0                 push    ebp
.text:000051C1                 mov     ebp, esp
.text:000051C3                 push    ecx
.text:000051C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051CB                 mov     [ebp+var_4], ecx
.text:000051CE                 mov     ecx, [ebp+var_4]
.text:000051D1                 call    ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::ReserveDown(void)
.text:000051D6                 add     esp, 4
.text:000051D9                 cmp     ebp, esp
.text:000051DB                 call    __RTC_CheckEsp
.text:000051E0                 mov     esp, ebp
.text:000051E2                 pop     ebp
.text:000051E3                 retn
.text:000051E3 ?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:000051E3
.text:000051E3 _text           ends
.text:000051E3
.text:000051E4 ; ===========================================================================
.text:000051E4
.text:000051E4 ; Segment type: Pure code
.text:000051E4 ; Segment permissions: Read/Execute
.text:000051E4 _text           segment para public 'CODE' use32
.text:000051E4                 assume cs:_text
.text:000051E4                 ;org 51E4h
.text:000051E4 ; COMDAT (pick any)
.text:000051E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000051E4
.text:000051E4 ; =============== S U B R O U T I N E =======================================
.text:000051E4
.text:000051E4 ; Attributes: bp-based frame
.text:000051E4
.text:000051E4 ; public: __thiscall CObjectVector<class UString>::CObjectVector<class UString>(void)
.text:000051E4                 public ??0?$CObjectVector@VUString@@@@QAE@XZ
.text:000051E4 ??0?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:000051E4                                         ; CODE XREF: CDirItems::CDirItems(void)+30p
.text:000051E4                                         ; EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+D8p ...
.text:000051E4
.text:000051E4 var_4           = dword ptr -4
.text:000051E4
.text:000051E4                 push    ebp
.text:000051E5                 mov     ebp, esp
.text:000051E7                 push    ecx
.text:000051E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051EF                 mov     [ebp+var_4], ecx
.text:000051F2                 mov     ecx, [ebp+var_4]
.text:000051F5                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000051FA                 mov     eax, [ebp+var_4]
.text:000051FD                 add     esp, 4
.text:00005200                 cmp     ebp, esp
.text:00005202                 call    __RTC_CheckEsp
.text:00005207                 mov     esp, ebp
.text:00005209                 pop     ebp
.text:0000520A                 retn
.text:0000520A ??0?$CObjectVector@VUString@@@@QAE@XZ endp
.text:0000520A
.text:0000520A ; ---------------------------------------------------------------------------
.text:0000520B                 align 4
.text:0000520B _text           ends
.text:0000520B
.text:0000520C ; ===========================================================================
.text:0000520C
.text:0000520C ; Segment type: Pure code
.text:0000520C ; Segment permissions: Read/Execute
.text:0000520C _text           segment para public 'CODE' use32
.text:0000520C                 assume cs:_text
.text:0000520C                 ;org 520Ch
.text:0000520C ; COMDAT (pick any)
.text:0000520C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000520C
.text:0000520C ; =============== S U B R O U T I N E =======================================
.text:0000520C
.text:0000520C ; Attributes: bp-based frame
.text:0000520C
.text:0000520C ; public: __thiscall CObjectVector<class UString>::CObjectVector<class UString>(class CObjectVector<class UString> const &)
.text:0000520C                 public ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
.text:0000520C ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z proc near
.text:0000520C                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+145p
.text:0000520C                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+5Ep ...
.text:0000520C
.text:0000520C var_24          = dword ptr -24h
.text:0000520C var_20          = dword ptr -20h
.text:0000520C var_1C          = dword ptr -1Ch
.text:0000520C var_18          = dword ptr -18h
.text:0000520C var_14          = dword ptr -14h
.text:0000520C var_10          = dword ptr -10h
.text:0000520C var_C           = dword ptr -0Ch
.text:0000520C var_4           = dword ptr -4
.text:0000520C arg_0           = dword ptr  8
.text:0000520C
.text:0000520C                 push    ebp
.text:0000520D                 mov     ebp, esp
.text:0000520F                 push    0FFFFFFFFh
.text:00005211                 push    offset __ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
.text:00005216                 mov     eax, large fs:0
.text:0000521C                 push    eax
.text:0000521D                 sub     esp, 18h
.text:00005220                 mov     eax, 0CCCCCCCCh
.text:00005225                 mov     [ebp+var_24], eax
.text:00005228                 mov     [ebp+var_20], eax
.text:0000522B                 mov     [ebp+var_1C], eax
.text:0000522E                 mov     [ebp+var_18], eax
.text:00005231                 mov     [ebp+var_14], eax
.text:00005234                 mov     [ebp+var_10], eax
.text:00005237                 mov     eax, dword ptr ds:___security_cookie
.text:0000523C                 xor     eax, ebp
.text:0000523E                 push    eax
.text:0000523F                 lea     eax, [ebp+var_C]
.text:00005242                 mov     large fs:0, eax
.text:00005248                 mov     [ebp+var_10], ecx
.text:0000524B                 mov     ecx, [ebp+var_10]
.text:0000524E                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005253                 mov     [ebp+var_4], 0
.text:0000525A                 mov     ecx, [ebp+arg_0]
.text:0000525D                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00005262                 mov     [ebp+var_14], eax
.text:00005265                 mov     eax, [ebp+var_14]
.text:00005268                 push    eax
.text:00005269                 mov     ecx, [ebp+var_10]
.text:0000526C                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:00005271                 mov     [ebp+var_18], 0
.text:00005278                 jmp     short loc_5283
.text:0000527A ; ---------------------------------------------------------------------------
.text:0000527A
.text:0000527A loc_527A:                               ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+CDj
.text:0000527A                 mov     ecx, [ebp+var_18]
.text:0000527D                 add     ecx, 1
.text:00005280                 mov     [ebp+var_18], ecx
.text:00005283
.text:00005283 loc_5283:                               ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+6Cj
.text:00005283                 mov     edx, [ebp+var_18]
.text:00005286                 cmp     edx, [ebp+var_14]
.text:00005289                 jnb     short loc_52DB
.text:0000528B                 push    0Ch             ; unsigned int
.text:0000528D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005292                 add     esp, 4
.text:00005295                 mov     [ebp+var_20], eax
.text:00005298                 mov     byte ptr [ebp+var_4], 1
.text:0000529C                 cmp     [ebp+var_20], 0
.text:000052A0                 jz      short loc_52BC
.text:000052A2                 mov     eax, [ebp+var_18]
.text:000052A5                 push    eax
.text:000052A6                 mov     ecx, [ebp+arg_0]
.text:000052A9                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:000052AE                 push    eax
.text:000052AF                 mov     ecx, [ebp+var_20]
.text:000052B2                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000052B7                 mov     [ebp+var_24], eax
.text:000052BA                 jmp     short loc_52C3
.text:000052BC ; ---------------------------------------------------------------------------
.text:000052BC
.text:000052BC loc_52BC:                               ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+94j
.text:000052BC                 mov     [ebp+var_24], 0
.text:000052C3
.text:000052C3 loc_52C3:                               ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+AEj
.text:000052C3                 mov     ecx, [ebp+var_24]
.text:000052C6                 mov     [ebp+var_1C], ecx
.text:000052C9                 mov     byte ptr [ebp+var_4], 0
.text:000052CD                 mov     edx, [ebp+var_1C]
.text:000052D0                 push    edx
.text:000052D1                 mov     ecx, [ebp+var_10]
.text:000052D4                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:000052D9                 jmp     short loc_527A
.text:000052DB ; ---------------------------------------------------------------------------
.text:000052DB
.text:000052DB loc_52DB:                               ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+7Dj
.text:000052DB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000052E2                 mov     eax, [ebp+var_10]
.text:000052E5                 mov     ecx, [ebp+var_C]
.text:000052E8                 mov     large fs:0, ecx
.text:000052EF                 pop     ecx
.text:000052F0                 add     esp, 24h
.text:000052F3                 cmp     ebp, esp
.text:000052F5                 call    __RTC_CheckEsp
.text:000052FA                 mov     esp, ebp
.text:000052FC                 pop     ebp
.text:000052FD                 retn    4
.text:000052FD ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z endp
.text:000052FD
.text:000052FD _text           ends
.text:000052FD
.text$x:00005300 ; ===========================================================================
.text$x:00005300
.text$x:00005300 ; Segment type: Pure code
.text$x:00005300 ; Segment permissions: Read/Execute
.text$x:00005300 _text$x         segment para public 'CODE' use32
.text$x:00005300                 assume cs:_text$x
.text$x:00005300                 ;org 5300h
.text$x:00005300 ; COMDAT (pick associative to section at 520C)
.text$x:00005300                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005300
.text$x:00005300 ; =============== S U B R O U T I N E =======================================
.text$x:00005300
.text$x:00005300
.text$x:00005300 __unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0 proc near
.text$x:00005300                                         ; DATA XREF: .xdata$x:00005334o
.text$x:00005300                 mov     ecx, [ebp-10h]
.text$x:00005303                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00005303 __unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0 endp
.text$x:00005303
.text$x:00005308
.text$x:00005308 ; =============== S U B R O U T I N E =======================================
.text$x:00005308
.text$x:00005308
.text$x:00005308 __unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1 proc near
.text$x:00005308                                         ; DATA XREF: .xdata$x:0000533Co
.text$x:00005308                 mov     eax, [ebp-20h]
.text$x:0000530B                 push    eax             ; void *
.text$x:0000530C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005311                 pop     ecx
.text$x:00005312                 retn
.text$x:00005312 __unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1 endp
.text$x:00005312
.text$x:00005313
.text$x:00005313 ; =============== S U B R O U T I N E =======================================
.text$x:00005313
.text$x:00005313
.text$x:00005313 __ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z proc near
.text$x:00005313                                         ; DATA XREF: CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+5o
.text$x:00005313
.text$x:00005313 arg_4           = dword ptr  8
.text$x:00005313
.text$x:00005313                 mov     edx, [esp+arg_4]
.text$x:00005317                 lea     eax, [edx+0Ch]
.text$x:0000531A                 mov     ecx, [edx-1Ch]
.text$x:0000531D                 xor     ecx, eax
.text$x:0000531F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005324                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
.text$x:00005329                 jmp     ___CxxFrameHandler3
.text$x:00005329 __ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z endp
.text$x:00005329
.text$x:00005329 ; ---------------------------------------------------------------------------
.text$x:0000532E                 align 10h
.text$x:0000532E _text$x         ends
.text$x:0000532E
.xdata$x:00005330 ; ===========================================================================
.xdata$x:00005330
.xdata$x:00005330 ; Segment type: Pure data
.xdata$x:00005330 ; Segment permissions: Read
.xdata$x:00005330 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005330                 assume cs:_xdata$x
.xdata$x:00005330                 ;org 5330h
.xdata$x:00005330 ; COMDAT (pick associative to section at 520C)
.xdata$x:00005330 __unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:00005330                                         ; DATA XREF: .xdata$x:00005348o
.xdata$x:00005331                 db 0FFh
.xdata$x:00005332                 db 0FFh
.xdata$x:00005333                 db 0FFh
.xdata$x:00005334                 dd offset __unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0
.xdata$x:00005338                 db    0
.xdata$x:00005339                 db    0
.xdata$x:0000533A                 db    0
.xdata$x:0000533B                 db    0
.xdata$x:0000533C                 dd offset __unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1
.xdata$x:00005340 __ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00005340                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z+11o
.xdata$x:00005341                 db    5
.xdata$x:00005342                 db  93h ; ô
.xdata$x:00005343                 db  19h
.xdata$x:00005344                 db    2
.xdata$x:00005345                 db    0
.xdata$x:00005346                 db    0
.xdata$x:00005347                 db    0
.xdata$x:00005348                 dd offset __unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
.xdata$x:0000534C                 align 20h
.xdata$x:00005360                 db    1
.xdata$x:00005361                 db    0
.xdata$x:00005362                 db    0
.xdata$x:00005363                 db    0
.xdata$x:00005363 _xdata$x        ends
.xdata$x:00005363
.text:00005364 ; ===========================================================================
.text:00005364
.text:00005364 ; Segment type: Pure code
.text:00005364 ; Segment permissions: Read/Execute
.text:00005364 _text           segment para public 'CODE' use32
.text:00005364                 assume cs:_text
.text:00005364                 ;org 5364h
.text:00005364 ; COMDAT (pick any)
.text:00005364                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005364
.text:00005364 ; =============== S U B R O U T I N E =======================================
.text:00005364
.text:00005364 ; Attributes: bp-based frame
.text:00005364
.text:00005364 ; public: class CObjectVector<class UString> & __thiscall CObjectVector<class UString>::operator=(class CObjectVector<class UString> const &)
.text:00005364                 public ??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
.text:00005364 ??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z proc near
.text:00005364                                         ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+407p
.text:00005364
.text:00005364 var_24          = dword ptr -24h
.text:00005364 var_20          = dword ptr -20h
.text:00005364 var_1C          = dword ptr -1Ch
.text:00005364 var_18          = dword ptr -18h
.text:00005364 var_14          = dword ptr -14h
.text:00005364 var_10          = dword ptr -10h
.text:00005364 var_C           = dword ptr -0Ch
.text:00005364 var_4           = dword ptr -4
.text:00005364 arg_0           = dword ptr  8
.text:00005364
.text:00005364                 push    ebp
.text:00005365                 mov     ebp, esp
.text:00005367                 push    0FFFFFFFFh
.text:00005369                 push    offset __ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
.text:0000536E                 mov     eax, large fs:0
.text:00005374                 push    eax
.text:00005375                 sub     esp, 18h
.text:00005378                 mov     eax, 0CCCCCCCCh
.text:0000537D                 mov     [ebp+var_24], eax
.text:00005380                 mov     [ebp+var_20], eax
.text:00005383                 mov     [ebp+var_1C], eax
.text:00005386                 mov     [ebp+var_18], eax
.text:00005389                 mov     [ebp+var_14], eax
.text:0000538C                 mov     [ebp+var_10], eax
.text:0000538F                 mov     eax, dword ptr ds:___security_cookie
.text:00005394                 xor     eax, ebp
.text:00005396                 push    eax
.text:00005397                 lea     eax, [ebp+var_C]
.text:0000539A                 mov     large fs:0, eax
.text:000053A0                 mov     [ebp+var_10], ecx
.text:000053A3                 mov     eax, [ebp+arg_0]
.text:000053A6                 cmp     eax, [ebp+var_10]
.text:000053A9                 jnz     short loc_53B3
.text:000053AB                 mov     eax, [ebp+var_10]
.text:000053AE                 jmp     loc_5445
.text:000053B3 ; ---------------------------------------------------------------------------
.text:000053B3
.text:000053B3 loc_53B3:                               ; CODE XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+45j
.text:000053B3                 mov     ecx, [ebp+var_10]
.text:000053B6                 call    ?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear(void)
.text:000053BB                 mov     ecx, [ebp+arg_0]
.text:000053BE                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:000053C3                 mov     [ebp+var_14], eax
.text:000053C6                 mov     ecx, [ebp+var_14]
.text:000053C9                 push    ecx
.text:000053CA                 mov     ecx, [ebp+var_10]
.text:000053CD                 call    ?Reserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Reserve(uint)
.text:000053D2                 mov     [ebp+var_18], 0
.text:000053D9                 jmp     short loc_53E4
.text:000053DB ; ---------------------------------------------------------------------------
.text:000053DB
.text:000053DB loc_53DB:                               ; CODE XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+DCj
.text:000053DB                 mov     edx, [ebp+var_18]
.text:000053DE                 add     edx, 1
.text:000053E1                 mov     [ebp+var_18], edx
.text:000053E4
.text:000053E4 loc_53E4:                               ; CODE XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+75j
.text:000053E4                 mov     eax, [ebp+var_18]
.text:000053E7                 cmp     eax, [ebp+var_14]
.text:000053EA                 jnb     short loc_5442
.text:000053EC                 push    0Ch             ; unsigned int
.text:000053EE                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000053F3                 add     esp, 4
.text:000053F6                 mov     [ebp+var_20], eax
.text:000053F9                 mov     [ebp+var_4], 0
.text:00005400                 cmp     [ebp+var_20], 0
.text:00005404                 jz      short loc_5420
.text:00005406                 mov     ecx, [ebp+var_18]
.text:00005409                 push    ecx
.text:0000540A                 mov     ecx, [ebp+arg_0]
.text:0000540D                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00005412                 push    eax
.text:00005413                 mov     ecx, [ebp+var_20]
.text:00005416                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000541B                 mov     [ebp+var_24], eax
.text:0000541E                 jmp     short loc_5427
.text:00005420 ; ---------------------------------------------------------------------------
.text:00005420
.text:00005420 loc_5420:                               ; CODE XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+A0j
.text:00005420                 mov     [ebp+var_24], 0
.text:00005427
.text:00005427 loc_5427:                               ; CODE XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+BAj
.text:00005427                 mov     edx, [ebp+var_24]
.text:0000542A                 mov     [ebp+var_1C], edx
.text:0000542D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005434                 mov     eax, [ebp+var_1C]
.text:00005437                 push    eax
.text:00005438                 mov     ecx, [ebp+var_10]
.text:0000543B                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00005440                 jmp     short loc_53DB
.text:00005442 ; ---------------------------------------------------------------------------
.text:00005442
.text:00005442 loc_5442:                               ; CODE XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+86j
.text:00005442                 mov     eax, [ebp+var_10]
.text:00005445
.text:00005445 loc_5445:                               ; CODE XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+4Aj
.text:00005445                 mov     ecx, [ebp+var_C]
.text:00005448                 mov     large fs:0, ecx
.text:0000544F                 pop     ecx
.text:00005450                 add     esp, 24h
.text:00005453                 cmp     ebp, esp
.text:00005455                 call    __RTC_CheckEsp
.text:0000545A                 mov     esp, ebp
.text:0000545C                 pop     ebp
.text:0000545D                 retn    4
.text:0000545D ??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z endp
.text:0000545D
.text:0000545D _text           ends
.text:0000545D
.text$x:00005460 ; ===========================================================================
.text$x:00005460
.text$x:00005460 ; Segment type: Pure code
.text$x:00005460 ; Segment permissions: Read/Execute
.text$x:00005460 _text$x         segment para public 'CODE' use32
.text$x:00005460                 assume cs:_text$x
.text$x:00005460                 ;org 5460h
.text$x:00005460 ; COMDAT (pick associative to section at 5364)
.text$x:00005460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005460
.text$x:00005460 ; =============== S U B R O U T I N E =======================================
.text$x:00005460
.text$x:00005460
.text$x:00005460 __unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0 proc near
.text$x:00005460                                         ; DATA XREF: .xdata$x:0000548Co
.text$x:00005460                 mov     eax, [ebp-20h]
.text$x:00005463                 push    eax             ; void *
.text$x:00005464                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005469                 pop     ecx
.text$x:0000546A                 retn
.text$x:0000546A __unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0 endp
.text$x:0000546A
.text$x:0000546B
.text$x:0000546B ; =============== S U B R O U T I N E =======================================
.text$x:0000546B
.text$x:0000546B
.text$x:0000546B __ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z proc near
.text$x:0000546B                                         ; DATA XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+5o
.text$x:0000546B
.text$x:0000546B arg_4           = dword ptr  8
.text$x:0000546B
.text$x:0000546B                 mov     edx, [esp+arg_4]
.text$x:0000546F                 lea     eax, [edx+0Ch]
.text$x:00005472                 mov     ecx, [edx-1Ch]
.text$x:00005475                 xor     ecx, eax
.text$x:00005477                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000547C                 mov     eax, offset __ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
.text$x:00005481                 jmp     ___CxxFrameHandler3
.text$x:00005481 __ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z endp
.text$x:00005481
.text$x:00005481 ; ---------------------------------------------------------------------------
.text$x:00005486                 align 4
.text$x:00005486 _text$x         ends
.text$x:00005486
.xdata$x:00005488 ; ===========================================================================
.xdata$x:00005488
.xdata$x:00005488 ; Segment type: Pure data
.xdata$x:00005488 ; Segment permissions: Read
.xdata$x:00005488 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005488                 assume cs:_xdata$x
.xdata$x:00005488                 ;org 5488h
.xdata$x:00005488 ; COMDAT (pick associative to section at 5364)
.xdata$x:00005488 __unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z db 0FFh
.xdata$x:00005488                                         ; DATA XREF: .xdata$x:00005498o
.xdata$x:00005489                 db 0FFh
.xdata$x:0000548A                 db 0FFh
.xdata$x:0000548B                 db 0FFh
.xdata$x:0000548C                 dd offset __unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0
.xdata$x:00005490 __ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z db  22h ; "
.xdata$x:00005490                                         ; DATA XREF: __ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z+11o
.xdata$x:00005491                 db    5
.xdata$x:00005492                 db  93h ; ô
.xdata$x:00005493                 db  19h
.xdata$x:00005494                 db    1
.xdata$x:00005495                 db    0
.xdata$x:00005496                 db    0
.xdata$x:00005497                 db    0
.xdata$x:00005498                 dd offset __unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
.xdata$x:0000549C                 db    0
.xdata$x:0000549D                 db    0
.xdata$x:0000549E                 db    0
.xdata$x:0000549F                 db    0
.xdata$x:000054A0                 db    0
.xdata$x:000054A1                 db    0
.xdata$x:000054A2                 db    0
.xdata$x:000054A3                 db    0
.xdata$x:000054A4                 db    0
.xdata$x:000054A5                 db    0
.xdata$x:000054A6                 db    0
.xdata$x:000054A7                 db    0
.xdata$x:000054A8                 db    0
.xdata$x:000054A9                 db    0
.xdata$x:000054AA                 db    0
.xdata$x:000054AB                 db    0
.xdata$x:000054AC                 db    0
.xdata$x:000054AD                 db    0
.xdata$x:000054AE                 db    0
.xdata$x:000054AF                 db    0
.xdata$x:000054B0                 db    1
.xdata$x:000054B1                 db    0
.xdata$x:000054B2                 db    0
.xdata$x:000054B3                 db    0
.xdata$x:000054B3 _xdata$x        ends
.xdata$x:000054B3
.text:000054B4 ; ===========================================================================
.text:000054B4
.text:000054B4 ; Segment type: Pure code
.text:000054B4 ; Segment permissions: Read/Execute
.text:000054B4 _text           segment para public 'CODE' use32
.text:000054B4                 assume cs:_text
.text:000054B4                 ;org 54B4h
.text:000054B4 ; COMDAT (pick any)
.text:000054B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054B4
.text:000054B4 ; =============== S U B R O U T I N E =======================================
.text:000054B4
.text:000054B4 ; Attributes: bp-based frame
.text:000054B4
.text:000054B4 ; public: class UString const & __thiscall CObjectVector<class UString>::operator[](unsigned int)const
.text:000054B4                 public ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
.text:000054B4 ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z proc near
.text:000054B4                                         ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+81p
.text:000054B4                                         ; CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+100p ...
.text:000054B4
.text:000054B4 var_4           = dword ptr -4
.text:000054B4 arg_0           = dword ptr  8
.text:000054B4
.text:000054B4                 push    ebp
.text:000054B5                 mov     ebp, esp
.text:000054B7                 push    ecx
.text:000054B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054BF                 mov     [ebp+var_4], ecx
.text:000054C2                 mov     eax, [ebp+arg_0]
.text:000054C5                 push    eax
.text:000054C6                 mov     ecx, [ebp+var_4]
.text:000054C9                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000054CE                 mov     eax, [eax]
.text:000054D0                 add     esp, 4
.text:000054D3                 cmp     ebp, esp
.text:000054D5                 call    __RTC_CheckEsp
.text:000054DA                 mov     esp, ebp
.text:000054DC                 pop     ebp
.text:000054DD                 retn    4
.text:000054DD ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z endp
.text:000054DD
.text:000054DD _text           ends
.text:000054DD
.text:000054E0 ; ===========================================================================
.text:000054E0
.text:000054E0 ; Segment type: Pure code
.text:000054E0 ; Segment permissions: Read/Execute
.text:000054E0 _text           segment para public 'CODE' use32
.text:000054E0                 assume cs:_text
.text:000054E0                 ;org 54E0h
.text:000054E0 ; COMDAT (pick any)
.text:000054E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054E0
.text:000054E0 ; =============== S U B R O U T I N E =======================================
.text:000054E0
.text:000054E0 ; Attributes: bp-based frame
.text:000054E0
.text:000054E0 ; public: class UString & __thiscall CObjectVector<class UString>::operator[](unsigned int)
.text:000054E0                 public ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
.text:000054E0 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z proc near
.text:000054E0                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+CD8p
.text:000054E0                                         ; CObjectVector<UString>::Back(void)+1Dp
.text:000054E0
.text:000054E0 var_4           = dword ptr -4
.text:000054E0 arg_0           = dword ptr  8
.text:000054E0
.text:000054E0                 push    ebp
.text:000054E1                 mov     ebp, esp
.text:000054E3                 push    ecx
.text:000054E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054EB                 mov     [ebp+var_4], ecx
.text:000054EE                 mov     eax, [ebp+arg_0]
.text:000054F1                 push    eax
.text:000054F2                 mov     ecx, [ebp+var_4]
.text:000054F5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000054FA                 mov     eax, [eax]
.text:000054FC                 add     esp, 4
.text:000054FF                 cmp     ebp, esp
.text:00005501                 call    __RTC_CheckEsp
.text:00005506                 mov     esp, ebp
.text:00005508                 pop     ebp
.text:00005509                 retn    4
.text:00005509 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z endp
.text:00005509
.text:00005509 _text           ends
.text:00005509
.text:0000550C ; ===========================================================================
.text:0000550C
.text:0000550C ; Segment type: Pure code
.text:0000550C ; Segment permissions: Read/Execute
.text:0000550C _text           segment para public 'CODE' use32
.text:0000550C                 assume cs:_text
.text:0000550C                 ;org 550Ch
.text:0000550C ; COMDAT (pick any)
.text:0000550C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000550C
.text:0000550C ; =============== S U B R O U T I N E =======================================
.text:0000550C
.text:0000550C ; Attributes: bp-based frame
.text:0000550C
.text:0000550C ; public: class UString const & __thiscall CObjectVector<class UString>::Front(void)const
.text:0000550C                 public ?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ
.text:0000550C ?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ proc near
.text:0000550C                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+F0p
.text:0000550C                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+BBBp ...
.text:0000550C
.text:0000550C var_4           = dword ptr -4
.text:0000550C
.text:0000550C                 push    ebp
.text:0000550D                 mov     ebp, esp
.text:0000550F                 push    ecx
.text:00005510                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005517                 mov     [ebp+var_4], ecx
.text:0000551A                 push    0
.text:0000551C                 mov     ecx, [ebp+var_4]
.text:0000551F                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00005524                 add     esp, 4
.text:00005527                 cmp     ebp, esp
.text:00005529                 call    __RTC_CheckEsp
.text:0000552E                 mov     esp, ebp
.text:00005530                 pop     ebp
.text:00005531                 retn
.text:00005531 ?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ endp
.text:00005531
.text:00005531 ; ---------------------------------------------------------------------------
.text:00005532                 align 4
.text:00005532 _text           ends
.text:00005532
.text:00005534 ; ===========================================================================
.text:00005534
.text:00005534 ; Segment type: Pure code
.text:00005534 ; Segment permissions: Read/Execute
.text:00005534 _text           segment para public 'CODE' use32
.text:00005534                 assume cs:_text
.text:00005534                 ;org 5534h
.text:00005534 ; COMDAT (pick any)
.text:00005534                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005534
.text:00005534 ; =============== S U B R O U T I N E =======================================
.text:00005534
.text:00005534 ; Attributes: bp-based frame
.text:00005534
.text:00005534 ; public: class UString & __thiscall CObjectVector<class UString>::Back(void)
.text:00005534                 public ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
.text:00005534 ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ proc near
.text:00005534                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+165p
.text:00005534
.text:00005534 var_4           = dword ptr -4
.text:00005534
.text:00005534                 push    ebp
.text:00005535                 mov     ebp, esp
.text:00005537                 push    ecx
.text:00005538                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000553F                 mov     [ebp+var_4], ecx
.text:00005542                 mov     ecx, [ebp+var_4]
.text:00005545                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000554A                 sub     eax, 1
.text:0000554D                 push    eax
.text:0000554E                 mov     ecx, [ebp+var_4]
.text:00005551                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00005556                 add     esp, 4
.text:00005559                 cmp     ebp, esp
.text:0000555B                 call    __RTC_CheckEsp
.text:00005560                 mov     esp, ebp
.text:00005562                 pop     ebp
.text:00005563                 retn
.text:00005563 ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ endp
.text:00005563
.text:00005563 _text           ends
.text:00005563
.text:00005564 ; ===========================================================================
.text:00005564
.text:00005564 ; Segment type: Pure code
.text:00005564 ; Segment permissions: Read/Execute
.text:00005564 _text           segment para public 'CODE' use32
.text:00005564                 assume cs:_text
.text:00005564                 ;org 5564h
.text:00005564 ; COMDAT (pick any)
.text:00005564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005564
.text:00005564 ; =============== S U B R O U T I N E =======================================
.text:00005564
.text:00005564 ; Attributes: bp-based frame
.text:00005564
.text:00005564 ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00005564                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00005564 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00005564                                         ; CODE XREF: CDirItems::AddPrefix(int,int,UString const &)+33p
.text:00005564                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+193p ...
.text:00005564
.text:00005564 var_1C          = dword ptr -1Ch
.text:00005564 var_18          = dword ptr -18h
.text:00005564 var_14          = dword ptr -14h
.text:00005564 var_10          = dword ptr -10h
.text:00005564 var_C           = dword ptr -0Ch
.text:00005564 var_4           = dword ptr -4
.text:00005564 arg_0           = dword ptr  8
.text:00005564
.text:00005564                 push    ebp
.text:00005565                 mov     ebp, esp
.text:00005567                 push    0FFFFFFFFh
.text:00005569                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:0000556E                 mov     eax, large fs:0
.text:00005574                 push    eax
.text:00005575                 sub     esp, 10h
.text:00005578                 mov     eax, 0CCCCCCCCh
.text:0000557D                 mov     [ebp+var_1C], eax
.text:00005580                 mov     [ebp+var_18], eax
.text:00005583                 mov     [ebp+var_14], eax
.text:00005586                 mov     [ebp+var_10], eax
.text:00005589                 mov     eax, dword ptr ds:___security_cookie
.text:0000558E                 xor     eax, ebp
.text:00005590                 push    eax
.text:00005591                 lea     eax, [ebp+var_C]
.text:00005594                 mov     large fs:0, eax
.text:0000559A                 mov     [ebp+var_10], ecx
.text:0000559D                 push    0Ch             ; unsigned int
.text:0000559F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000055A4                 add     esp, 4
.text:000055A7                 mov     [ebp+var_18], eax
.text:000055AA                 mov     [ebp+var_4], 0
.text:000055B1                 cmp     [ebp+var_18], 0
.text:000055B5                 jz      short loc_55C8
.text:000055B7                 mov     eax, [ebp+arg_0]
.text:000055BA                 push    eax
.text:000055BB                 mov     ecx, [ebp+var_18]
.text:000055BE                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000055C3                 mov     [ebp+var_1C], eax
.text:000055C6                 jmp     short loc_55CF
.text:000055C8 ; ---------------------------------------------------------------------------
.text:000055C8
.text:000055C8 loc_55C8:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:000055C8                 mov     [ebp+var_1C], 0
.text:000055CF
.text:000055CF loc_55CF:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:000055CF                 mov     ecx, [ebp+var_1C]
.text:000055D2                 mov     [ebp+var_14], ecx
.text:000055D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000055DC                 mov     edx, [ebp+var_14]
.text:000055DF                 push    edx
.text:000055E0                 mov     ecx, [ebp+var_10]
.text:000055E3                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000055E8                 mov     ecx, [ebp+var_C]
.text:000055EB                 mov     large fs:0, ecx
.text:000055F2                 pop     ecx
.text:000055F3                 add     esp, 1Ch
.text:000055F6                 cmp     ebp, esp
.text:000055F8                 call    __RTC_CheckEsp
.text:000055FD                 mov     esp, ebp
.text:000055FF                 pop     ebp
.text:00005600                 retn    4
.text:00005600 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:00005600
.text:00005600 ; ---------------------------------------------------------------------------
.text:00005603                 align 4
.text:00005603 _text           ends
.text:00005603
.text$x:00005604 ; ===========================================================================
.text$x:00005604
.text$x:00005604 ; Segment type: Pure code
.text$x:00005604 ; Segment permissions: Read/Execute
.text$x:00005604 _text$x         segment para public 'CODE' use32
.text$x:00005604                 assume cs:_text$x
.text$x:00005604                 ;org 5604h
.text$x:00005604 ; COMDAT (pick associative to section at 5564)
.text$x:00005604                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005604
.text$x:00005604 ; =============== S U B R O U T I N E =======================================
.text$x:00005604
.text$x:00005604
.text$x:00005604 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:00005604                                         ; DATA XREF: .xdata$x:00005630o
.text$x:00005604                 mov     eax, [ebp-18h]
.text$x:00005607                 push    eax             ; void *
.text$x:00005608                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000560D                 pop     ecx
.text$x:0000560E                 retn
.text$x:0000560E __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:0000560E
.text$x:0000560F
.text$x:0000560F ; =============== S U B R O U T I N E =======================================
.text$x:0000560F
.text$x:0000560F
.text$x:0000560F __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:0000560F                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:0000560F
.text$x:0000560F arg_4           = dword ptr  8
.text$x:0000560F
.text$x:0000560F                 mov     edx, [esp+arg_4]
.text$x:00005613                 lea     eax, [edx+0Ch]
.text$x:00005616                 mov     ecx, [edx-14h]
.text$x:00005619                 xor     ecx, eax
.text$x:0000561B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005620                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:00005625                 jmp     ___CxxFrameHandler3
.text$x:00005625 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:00005625
.text$x:00005625 ; ---------------------------------------------------------------------------
.text$x:0000562A                 align 4
.text$x:0000562A _text$x         ends
.text$x:0000562A
.xdata$x:0000562C ; ===========================================================================
.xdata$x:0000562C
.xdata$x:0000562C ; Segment type: Pure data
.xdata$x:0000562C ; Segment permissions: Read
.xdata$x:0000562C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000562C                 assume cs:_xdata$x
.xdata$x:0000562C                 ;org 562Ch
.xdata$x:0000562C ; COMDAT (pick associative to section at 5564)
.xdata$x:0000562C __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:0000562C                                         ; DATA XREF: .xdata$x:0000563Co
.xdata$x:0000562D                 db 0FFh
.xdata$x:0000562E                 db 0FFh
.xdata$x:0000562F                 db 0FFh
.xdata$x:00005630                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:00005634 __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:00005634                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:00005635                 db    5
.xdata$x:00005636                 db  93h ; ô
.xdata$x:00005637                 db  19h
.xdata$x:00005638                 db    1
.xdata$x:00005639                 db    0
.xdata$x:0000563A                 db    0
.xdata$x:0000563B                 db    0
.xdata$x:0000563C                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:00005640                 db    0
.xdata$x:00005641                 db    0
.xdata$x:00005642                 db    0
.xdata$x:00005643                 db    0
.xdata$x:00005644                 db    0
.xdata$x:00005645                 db    0
.xdata$x:00005646                 db    0
.xdata$x:00005647                 db    0
.xdata$x:00005648                 db    0
.xdata$x:00005649                 db    0
.xdata$x:0000564A                 db    0
.xdata$x:0000564B                 db    0
.xdata$x:0000564C                 db    0
.xdata$x:0000564D                 db    0
.xdata$x:0000564E                 db    0
.xdata$x:0000564F                 db    0
.xdata$x:00005650                 db    0
.xdata$x:00005651                 db    0
.xdata$x:00005652                 db    0
.xdata$x:00005653                 db    0
.xdata$x:00005654                 db    1
.xdata$x:00005655                 db    0
.xdata$x:00005656                 db    0
.xdata$x:00005657                 db    0
.xdata$x:00005657 _xdata$x        ends
.xdata$x:00005657
.text:00005658 ; ===========================================================================
.text:00005658
.text:00005658 ; Segment type: Pure code
.text:00005658 ; Segment permissions: Read/Execute
.text:00005658 _text           segment para public 'CODE' use32
.text:00005658                 assume cs:_text
.text:00005658                 ;org 5658h
.text:00005658 ; COMDAT (pick any)
.text:00005658                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005658
.text:00005658 ; =============== S U B R O U T I N E =======================================
.text:00005658
.text:00005658 ; Attributes: bp-based frame
.text:00005658
.text:00005658 ; public: __thiscall CObjectVector<class UString>::~CObjectVector<class UString>(void)
.text:00005658                 public ??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00005658 ??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00005658                                         ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+116p
.text:00005658                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+355p ...
.text:00005658
.text:00005658 var_20          = dword ptr -20h
.text:00005658 var_1C          = dword ptr -1Ch
.text:00005658 var_18          = dword ptr -18h
.text:00005658 var_14          = dword ptr -14h
.text:00005658 var_10          = dword ptr -10h
.text:00005658 var_C           = dword ptr -0Ch
.text:00005658 var_4           = dword ptr -4
.text:00005658
.text:00005658                 push    ebp
.text:00005659                 mov     ebp, esp
.text:0000565B                 push    0FFFFFFFFh
.text:0000565D                 push    offset __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00005662                 mov     eax, large fs:0
.text:00005668                 push    eax
.text:00005669                 sub     esp, 14h
.text:0000566C                 mov     eax, 0CCCCCCCCh
.text:00005671                 mov     [ebp+var_20], eax
.text:00005674                 mov     [ebp+var_1C], eax
.text:00005677                 mov     [ebp+var_18], eax
.text:0000567A                 mov     [ebp+var_14], eax
.text:0000567D                 mov     [ebp+var_10], eax
.text:00005680                 mov     eax, dword ptr ds:___security_cookie
.text:00005685                 xor     eax, ebp
.text:00005687                 push    eax
.text:00005688                 lea     eax, [ebp+var_C]
.text:0000568B                 mov     large fs:0, eax
.text:00005691                 mov     [ebp+var_10], ecx
.text:00005694                 mov     [ebp+var_4], 0
.text:0000569B                 mov     ecx, [ebp+var_10]
.text:0000569E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000056A3                 mov     [ebp+var_14], eax
.text:000056A6
.text:000056A6 loc_56A6:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void):loc_56E8j
.text:000056A6                 cmp     [ebp+var_14], 0
.text:000056AA                 jz      short loc_56EA
.text:000056AC                 mov     eax, [ebp+var_14]
.text:000056AF                 sub     eax, 1
.text:000056B2                 mov     [ebp+var_14], eax
.text:000056B5                 mov     ecx, [ebp+var_14]
.text:000056B8                 push    ecx
.text:000056B9                 mov     ecx, [ebp+var_10]
.text:000056BC                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000056C1                 mov     edx, [eax]
.text:000056C3                 mov     [ebp+var_1C], edx
.text:000056C6                 mov     eax, [ebp+var_1C]
.text:000056C9                 mov     [ebp+var_18], eax
.text:000056CC                 cmp     [ebp+var_18], 0
.text:000056D0                 jz      short loc_56E1
.text:000056D2                 push    1
.text:000056D4                 mov     ecx, [ebp+var_18]
.text:000056D7                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:000056DC                 mov     [ebp+var_20], eax
.text:000056DF                 jmp     short loc_56E8
.text:000056E1 ; ---------------------------------------------------------------------------
.text:000056E1
.text:000056E1 loc_56E1:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+78j
.text:000056E1                 mov     [ebp+var_20], 0
.text:000056E8
.text:000056E8 loc_56E8:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+87j
.text:000056E8                 jmp     short loc_56A6
.text:000056EA ; ---------------------------------------------------------------------------
.text:000056EA
.text:000056EA loc_56EA:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+52j
.text:000056EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000056F1                 mov     ecx, [ebp+var_10]
.text:000056F4                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000056F9                 mov     ecx, [ebp+var_C]
.text:000056FC                 mov     large fs:0, ecx
.text:00005703                 pop     ecx
.text:00005704                 add     esp, 20h
.text:00005707                 cmp     ebp, esp
.text:00005709                 call    __RTC_CheckEsp
.text:0000570E                 mov     esp, ebp
.text:00005710                 pop     ebp
.text:00005711                 retn
.text:00005711 ??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text:00005711
.text:00005711 ; ---------------------------------------------------------------------------
.text:00005712                 align 4
.text:00005712 _text           ends
.text:00005712
.text$x:00005714 ; ===========================================================================
.text$x:00005714
.text$x:00005714 ; Segment type: Pure code
.text$x:00005714 ; Segment permissions: Read/Execute
.text$x:00005714 _text$x         segment para public 'CODE' use32
.text$x:00005714                 assume cs:_text$x
.text$x:00005714                 ;org 5714h
.text$x:00005714 ; COMDAT (pick associative to section at 5658)
.text$x:00005714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005714
.text$x:00005714 ; =============== S U B R O U T I N E =======================================
.text$x:00005714
.text$x:00005714
.text$x:00005714 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 proc near
.text$x:00005714                                         ; DATA XREF: .xdata$x:0000573Co
.text$x:00005714                 mov     ecx, [ebp-10h]
.text$x:00005717                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00005717 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 endp
.text$x:00005717
.text$x:0000571C
.text$x:0000571C ; =============== S U B R O U T I N E =======================================
.text$x:0000571C
.text$x:0000571C
.text$x:0000571C __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text$x:0000571C                                         ; DATA XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+5o
.text$x:0000571C
.text$x:0000571C arg_4           = dword ptr  8
.text$x:0000571C
.text$x:0000571C                 mov     edx, [esp+arg_4]
.text$x:00005720                 lea     eax, [edx+0Ch]
.text$x:00005723                 mov     ecx, [edx-18h]
.text$x:00005726                 xor     ecx, eax
.text$x:00005728                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000572D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
.text$x:00005732                 jmp     ___CxxFrameHandler3
.text$x:00005732 __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text$x:00005732
.text$x:00005732 ; ---------------------------------------------------------------------------
.text$x:00005737                 align 4
.text$x:00005737 _text$x         ends
.text$x:00005737
.xdata$x:00005738 ; ===========================================================================
.xdata$x:00005738
.xdata$x:00005738 ; Segment type: Pure data
.xdata$x:00005738 ; Segment permissions: Read
.xdata$x:00005738 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005738                 assume cs:_xdata$x
.xdata$x:00005738                 ;org 5738h
.xdata$x:00005738 ; COMDAT (pick associative to section at 5658)
.xdata$x:00005738 __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ db 0FFh
.xdata$x:00005738                                         ; DATA XREF: .xdata$x:00005748o
.xdata$x:00005739                 db 0FFh
.xdata$x:0000573A                 db 0FFh
.xdata$x:0000573B                 db 0FFh
.xdata$x:0000573C                 dd offset __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
.xdata$x:00005740 __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ db  22h ; "
.xdata$x:00005740                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ+11o
.xdata$x:00005741                 db    5
.xdata$x:00005742                 db  93h ; ô
.xdata$x:00005743                 db  19h
.xdata$x:00005744                 db    1
.xdata$x:00005745                 db    0
.xdata$x:00005746                 db    0
.xdata$x:00005747                 db    0
.xdata$x:00005748                 dd offset __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
.xdata$x:0000574C                 align 20h
.xdata$x:00005760                 db    1
.xdata$x:00005761                 db    0
.xdata$x:00005762                 db    0
.xdata$x:00005763                 db    0
.xdata$x:00005763 _xdata$x        ends
.xdata$x:00005763
.text:00005764 ; ===========================================================================
.text:00005764
.text:00005764 ; Segment type: Pure code
.text:00005764 ; Segment permissions: Read/Execute
.text:00005764 _text           segment para public 'CODE' use32
.text:00005764                 assume cs:_text
.text:00005764                 ;org 5764h
.text:00005764 ; COMDAT (pick any)
.text:00005764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005764
.text:00005764 ; =============== S U B R O U T I N E =======================================
.text:00005764
.text:00005764 ; Attributes: bp-based frame
.text:00005764
.text:00005764 ; public: void __thiscall CObjectVector<class UString>::DeleteBack(void)
.text:00005764                 public ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ
.text:00005764 ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:00005764                                         ; CODE XREF: CDirItems::DeleteLastPrefix(void)+27p
.text:00005764
.text:00005764 var_10          = dword ptr -10h
.text:00005764 var_C           = dword ptr -0Ch
.text:00005764 var_8           = dword ptr -8
.text:00005764 var_4           = dword ptr -4
.text:00005764
.text:00005764                 push    ebp
.text:00005765                 mov     ebp, esp
.text:00005767                 sub     esp, 10h
.text:0000576A                 mov     eax, 0CCCCCCCCh
.text:0000576F                 mov     [ebp+var_10], eax
.text:00005772                 mov     [ebp+var_C], eax
.text:00005775                 mov     [ebp+var_8], eax
.text:00005778                 mov     [ebp+var_4], eax
.text:0000577B                 mov     [ebp+var_4], ecx
.text:0000577E                 mov     ecx, [ebp+var_4]
.text:00005781                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005786                 sub     eax, 1
.text:00005789                 push    eax
.text:0000578A                 mov     ecx, [ebp+var_4]
.text:0000578D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005792                 mov     eax, [eax]
.text:00005794                 mov     [ebp+var_C], eax
.text:00005797                 mov     ecx, [ebp+var_C]
.text:0000579A                 mov     [ebp+var_8], ecx
.text:0000579D                 cmp     [ebp+var_8], 0
.text:000057A1                 jz      short loc_57B2
.text:000057A3                 push    1
.text:000057A5                 mov     ecx, [ebp+var_8]
.text:000057A8                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:000057AD                 mov     [ebp+var_10], eax
.text:000057B0                 jmp     short loc_57B9
.text:000057B2 ; ---------------------------------------------------------------------------
.text:000057B2
.text:000057B2 loc_57B2:                               ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+3Dj
.text:000057B2                 mov     [ebp+var_10], 0
.text:000057B9
.text:000057B9 loc_57B9:                               ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+4Cj
.text:000057B9                 mov     ecx, [ebp+var_4]
.text:000057BC                 call    ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::DeleteBack(void)
.text:000057C1                 add     esp, 10h
.text:000057C4                 cmp     ebp, esp
.text:000057C6                 call    __RTC_CheckEsp
.text:000057CB                 mov     esp, ebp
.text:000057CD                 pop     ebp
.text:000057CE                 retn
.text:000057CE ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:000057CE
.text:000057CE ; ---------------------------------------------------------------------------
.text:000057CF                 align 10h
.text:000057CF _text           ends
.text:000057CF
.text:000057D0 ; ===========================================================================
.text:000057D0
.text:000057D0 ; Segment type: Pure code
.text:000057D0 ; Segment permissions: Read/Execute
.text:000057D0 _text           segment para public 'CODE' use32
.text:000057D0                 assume cs:_text
.text:000057D0                 ;org 57D0h
.text:000057D0 ; COMDAT (pick any)
.text:000057D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057D0
.text:000057D0 ; =============== S U B R O U T I N E =======================================
.text:000057D0
.text:000057D0 ; Attributes: bp-based frame
.text:000057D0
.text:000057D0 ; public: unsigned int __thiscall CObjectVector<class NWildcard::CCensorNode>::Size(void)const
.text:000057D0                 public ?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ
.text:000057D0 ?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ proc near
.text:000057D0                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+790p
.text:000057D0
.text:000057D0 var_4           = dword ptr -4
.text:000057D0
.text:000057D0                 push    ebp
.text:000057D1                 mov     ebp, esp
.text:000057D3                 push    ecx
.text:000057D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057DB                 mov     [ebp+var_4], ecx
.text:000057DE                 mov     ecx, [ebp+var_4]
.text:000057E1                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000057E6                 add     esp, 4
.text:000057E9                 cmp     ebp, esp
.text:000057EB                 call    __RTC_CheckEsp
.text:000057F0                 mov     esp, ebp
.text:000057F2                 pop     ebp
.text:000057F3                 retn
.text:000057F3 ?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ endp
.text:000057F3
.text:000057F3 _text           ends
.text:000057F3
.text:000057F4 ; ===========================================================================
.text:000057F4
.text:000057F4 ; Segment type: Pure code
.text:000057F4 ; Segment permissions: Read/Execute
.text:000057F4 _text           segment para public 'CODE' use32
.text:000057F4                 assume cs:_text
.text:000057F4                 ;org 57F4h
.text:000057F4 ; COMDAT (pick any)
.text:000057F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057F4
.text:000057F4 ; =============== S U B R O U T I N E =======================================
.text:000057F4
.text:000057F4 ; Attributes: bp-based frame
.text:000057F4
.text:000057F4 ; public: class NWildcard::CCensorNode const & __thiscall CObjectVector<class NWildcard::CCensorNode>::operator[](unsigned int)const
.text:000057F4                 public ??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z
.text:000057F4 ??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z proc near
.text:000057F4                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+69Cp
.text:000057F4                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+7CAp ...
.text:000057F4
.text:000057F4 var_4           = dword ptr -4
.text:000057F4 arg_0           = dword ptr  8
.text:000057F4
.text:000057F4                 push    ebp
.text:000057F5                 mov     ebp, esp
.text:000057F7                 push    ecx
.text:000057F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057FF                 mov     [ebp+var_4], ecx
.text:00005802                 mov     eax, [ebp+arg_0]
.text:00005805                 push    eax
.text:00005806                 mov     ecx, [ebp+var_4]
.text:00005809                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000580E                 mov     eax, [eax]
.text:00005810                 add     esp, 4
.text:00005813                 cmp     ebp, esp
.text:00005815                 call    __RTC_CheckEsp
.text:0000581A                 mov     esp, ebp
.text:0000581C                 pop     ebp
.text:0000581D                 retn    4
.text:0000581D ??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z endp
.text:0000581D
.text:0000581D _text           ends
.text:0000581D
.text:00005820 ; ===========================================================================
.text:00005820
.text:00005820 ; Segment type: Pure code
.text:00005820 ; Segment permissions: Read/Execute
.text:00005820 _text           segment para public 'CODE' use32
.text:00005820                 assume cs:_text
.text:00005820                 ;org 5820h
.text:00005820 ; COMDAT (pick any)
.text:00005820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005820
.text:00005820 ; =============== S U B R O U T I N E =======================================
.text:00005820
.text:00005820 ; Attributes: bp-based frame
.text:00005820
.text:00005820 ; public: unsigned int __thiscall CObjectVector<struct NWildcard::CItem>::Size(void)const
.text:00005820                 public ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ
.text:00005820 ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ proc near
.text:00005820                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+CDp
.text:00005820                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+B49p ...
.text:00005820
.text:00005820 var_4           = dword ptr -4
.text:00005820
.text:00005820                 push    ebp
.text:00005821                 mov     ebp, esp
.text:00005823                 push    ecx
.text:00005824                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000582B                 mov     [ebp+var_4], ecx
.text:0000582E                 mov     ecx, [ebp+var_4]
.text:00005831                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005836                 add     esp, 4
.text:00005839                 cmp     ebp, esp
.text:0000583B                 call    __RTC_CheckEsp
.text:00005840                 mov     esp, ebp
.text:00005842                 pop     ebp
.text:00005843                 retn
.text:00005843 ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ endp
.text:00005843
.text:00005843 _text           ends
.text:00005843
.text:00005844 ; ===========================================================================
.text:00005844
.text:00005844 ; Segment type: Pure code
.text:00005844 ; Segment permissions: Read/Execute
.text:00005844 _text           segment para public 'CODE' use32
.text:00005844                 assume cs:_text
.text:00005844                 ;org 5844h
.text:00005844 ; COMDAT (pick any)
.text:00005844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005844
.text:00005844 ; =============== S U B R O U T I N E =======================================
.text:00005844
.text:00005844 ; Attributes: bp-based frame
.text:00005844
.text:00005844 ; public: struct NWildcard::CItem const & __thiscall CObjectVector<struct NWildcard::CItem>::operator[](unsigned int)const
.text:00005844                 public ??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z
.text:00005844 ??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z proc near
.text:00005844                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+E5p
.text:00005844                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+B95p ...
.text:00005844
.text:00005844 var_4           = dword ptr -4
.text:00005844 arg_0           = dword ptr  8
.text:00005844
.text:00005844                 push    ebp
.text:00005845                 mov     ebp, esp
.text:00005847                 push    ecx
.text:00005848                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000584F                 mov     [ebp+var_4], ecx
.text:00005852                 mov     eax, [ebp+arg_0]
.text:00005855                 push    eax
.text:00005856                 mov     ecx, [ebp+var_4]
.text:00005859                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000585E                 mov     eax, [eax]
.text:00005860                 add     esp, 4
.text:00005863                 cmp     ebp, esp
.text:00005865                 call    __RTC_CheckEsp
.text:0000586A                 mov     esp, ebp
.text:0000586C                 pop     ebp
.text:0000586D                 retn    4
.text:0000586D ??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z endp
.text:0000586D
.text:0000586D _text           ends
.text:0000586D
.text:00005870 ; ===========================================================================
.text:00005870
.text:00005870 ; Segment type: Pure code
.text:00005870 ; Segment permissions: Read/Execute
.text:00005870 _text           segment para public 'CODE' use32
.text:00005870                 assume cs:_text
.text:00005870                 ;org 5870h
.text:00005870 ; COMDAT (pick any)
.text:00005870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005870
.text:00005870 ; =============== S U B R O U T I N E =======================================
.text:00005870
.text:00005870 ; Attributes: bp-based frame
.text:00005870
.text:00005870 ; public: unsigned int __thiscall CObjectVector<struct NWildcard::CPair>::Size(void)const
.text:00005870                 public ?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ
.text:00005870 ?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ proc near
.text:00005870                                         ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+4Ap
.text:00005870
.text:00005870 var_4           = dword ptr -4
.text:00005870
.text:00005870                 push    ebp
.text:00005871                 mov     ebp, esp
.text:00005873                 push    ecx
.text:00005874                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000587B                 mov     [ebp+var_4], ecx
.text:0000587E                 mov     ecx, [ebp+var_4]
.text:00005881                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005886                 add     esp, 4
.text:00005889                 cmp     ebp, esp
.text:0000588B                 call    __RTC_CheckEsp
.text:00005890                 mov     esp, ebp
.text:00005892                 pop     ebp
.text:00005893                 retn
.text:00005893 ?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ endp
.text:00005893
.text:00005893 _text           ends
.text:00005893
.text:00005894 ; ===========================================================================
.text:00005894
.text:00005894 ; Segment type: Pure code
.text:00005894 ; Segment permissions: Read/Execute
.text:00005894 _text           segment para public 'CODE' use32
.text:00005894                 assume cs:_text
.text:00005894                 ;org 5894h
.text:00005894 ; COMDAT (pick any)
.text:00005894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005894
.text:00005894 ; =============== S U B R O U T I N E =======================================
.text:00005894
.text:00005894 ; Attributes: bp-based frame
.text:00005894
.text:00005894 ; public: struct NWildcard::CPair const & __thiscall CObjectVector<struct NWildcard::CPair>::operator[](unsigned int)const
.text:00005894                 public ??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z
.text:00005894 ??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z proc near
.text:00005894                                         ; CODE XREF: EnumerateItems(NWildcard::CCensor const &,NWildcard::ECensorPathMode,UString const &,CDirItems &)+5Fp
.text:00005894
.text:00005894 var_4           = dword ptr -4
.text:00005894 arg_0           = dword ptr  8
.text:00005894
.text:00005894                 push    ebp
.text:00005895                 mov     ebp, esp
.text:00005897                 push    ecx
.text:00005898                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000589F                 mov     [ebp+var_4], ecx
.text:000058A2                 mov     eax, [ebp+arg_0]
.text:000058A5                 push    eax
.text:000058A6                 mov     ecx, [ebp+var_4]
.text:000058A9                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000058AE                 mov     eax, [eax]
.text:000058B0                 add     esp, 4
.text:000058B3                 cmp     ebp, esp
.text:000058B5                 call    __RTC_CheckEsp
.text:000058BA                 mov     esp, ebp
.text:000058BC                 pop     ebp
.text:000058BD                 retn    4
.text:000058BD ??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z endp
.text:000058BD
.text:000058BD _text           ends
.text:000058BD
.text:000058C0 ; ===========================================================================
.text:000058C0
.text:000058C0 ; Segment type: Pure code
.text:000058C0 ; Segment permissions: Read/Execute
.text:000058C0 _text           segment para public 'CODE' use32
.text:000058C0                 assume cs:_text
.text:000058C0                 ;org 58C0h
.text:000058C0 ; COMDAT (pick any)
.text:000058C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058C0
.text:000058C0 ; =============== S U B R O U T I N E =======================================
.text:000058C0
.text:000058C0 ; Attributes: bp-based frame
.text:000058C0
.text:000058C0 ; public: __thiscall CObjectVector<class CBuffer<unsigned char>>::CObjectVector<class CBuffer<unsigned char>>(void)
.text:000058C0                 public ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text:000058C0 ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ proc near
.text:000058C0                                         ; CODE XREF: CUniqBlocks::CUniqBlocks(void)+30p
.text:000058C0
.text:000058C0 var_4           = dword ptr -4
.text:000058C0
.text:000058C0                 push    ebp
.text:000058C1                 mov     ebp, esp
.text:000058C3                 push    ecx
.text:000058C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058CB                 mov     [ebp+var_4], ecx
.text:000058CE                 mov     ecx, [ebp+var_4]
.text:000058D1                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000058D6                 mov     eax, [ebp+var_4]
.text:000058D9                 add     esp, 4
.text:000058DC                 cmp     ebp, esp
.text:000058DE                 call    __RTC_CheckEsp
.text:000058E3                 mov     esp, ebp
.text:000058E5                 pop     ebp
.text:000058E6                 retn
.text:000058E6 ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ endp
.text:000058E6
.text:000058E6 ; ---------------------------------------------------------------------------
.text:000058E7                 align 4
.text:000058E7 _text           ends
.text:000058E7
.text:000058E8 ; ===========================================================================
.text:000058E8
.text:000058E8 ; Segment type: Pure code
.text:000058E8 ; Segment permissions: Read/Execute
.text:000058E8 _text           segment para public 'CODE' use32
.text:000058E8                 assume cs:_text
.text:000058E8                 ;org 58E8h
.text:000058E8 ; COMDAT (pick any)
.text:000058E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058E8
.text:000058E8 ; =============== S U B R O U T I N E =======================================
.text:000058E8
.text:000058E8 ; Attributes: bp-based frame
.text:000058E8
.text:000058E8 ; public: __thiscall CObjectVector<class CBuffer<unsigned char>>::~CObjectVector<class CBuffer<unsigned char>>(void)
.text:000058E8                 public ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text:000058E8 ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ proc near
.text:000058E8                                         ; CODE XREF: __unwindfunclet$??0CUniqBlocks@@QAE@XZ$0+3j
.text:000058E8                                         ; CUniqBlocks::~CUniqBlocks(void)+58p ...
.text:000058E8
.text:000058E8 var_20          = dword ptr -20h
.text:000058E8 var_1C          = dword ptr -1Ch
.text:000058E8 var_18          = dword ptr -18h
.text:000058E8 var_14          = dword ptr -14h
.text:000058E8 var_10          = dword ptr -10h
.text:000058E8 var_C           = dword ptr -0Ch
.text:000058E8 var_4           = dword ptr -4
.text:000058E8
.text:000058E8                 push    ebp
.text:000058E9                 mov     ebp, esp
.text:000058EB                 push    0FFFFFFFFh
.text:000058ED                 push    offset __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text:000058F2                 mov     eax, large fs:0
.text:000058F8                 push    eax
.text:000058F9                 sub     esp, 14h
.text:000058FC                 mov     eax, 0CCCCCCCCh
.text:00005901                 mov     [ebp+var_20], eax
.text:00005904                 mov     [ebp+var_1C], eax
.text:00005907                 mov     [ebp+var_18], eax
.text:0000590A                 mov     [ebp+var_14], eax
.text:0000590D                 mov     [ebp+var_10], eax
.text:00005910                 mov     eax, dword ptr ds:___security_cookie
.text:00005915                 xor     eax, ebp
.text:00005917                 push    eax
.text:00005918                 lea     eax, [ebp+var_C]
.text:0000591B                 mov     large fs:0, eax
.text:00005921                 mov     [ebp+var_10], ecx
.text:00005924                 mov     [ebp+var_4], 0
.text:0000592B                 mov     ecx, [ebp+var_10]
.text:0000592E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005933                 mov     [ebp+var_14], eax
.text:00005936
.text:00005936 loc_5936:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void):loc_5978j
.text:00005936                 cmp     [ebp+var_14], 0
.text:0000593A                 jz      short loc_597A
.text:0000593C                 mov     eax, [ebp+var_14]
.text:0000593F                 sub     eax, 1
.text:00005942                 mov     [ebp+var_14], eax
.text:00005945                 mov     ecx, [ebp+var_14]
.text:00005948                 push    ecx
.text:00005949                 mov     ecx, [ebp+var_10]
.text:0000594C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005951                 mov     edx, [eax]
.text:00005953                 mov     [ebp+var_1C], edx
.text:00005956                 mov     eax, [ebp+var_1C]
.text:00005959                 mov     [ebp+var_18], eax
.text:0000595C                 cmp     [ebp+var_18], 0
.text:00005960                 jz      short loc_5971
.text:00005962                 push    1
.text:00005964                 mov     ecx, [ebp+var_18]
.text:00005967                 call    ??_G?$CBuffer@E@@QAEPAXI@Z ; CBuffer<uchar>::`scalar deleting destructor'(uint)
.text:0000596C                 mov     [ebp+var_20], eax
.text:0000596F                 jmp     short loc_5978
.text:00005971 ; ---------------------------------------------------------------------------
.text:00005971
.text:00005971 loc_5971:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+78j
.text:00005971                 mov     [ebp+var_20], 0
.text:00005978
.text:00005978 loc_5978:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+87j
.text:00005978                 jmp     short loc_5936
.text:0000597A ; ---------------------------------------------------------------------------
.text:0000597A
.text:0000597A loc_597A:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+52j
.text:0000597A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005981                 mov     ecx, [ebp+var_10]
.text:00005984                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00005989                 mov     ecx, [ebp+var_C]
.text:0000598C                 mov     large fs:0, ecx
.text:00005993                 pop     ecx
.text:00005994                 add     esp, 20h
.text:00005997                 cmp     ebp, esp
.text:00005999                 call    __RTC_CheckEsp
.text:0000599E                 mov     esp, ebp
.text:000059A0                 pop     ebp
.text:000059A1                 retn
.text:000059A1 ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ endp
.text:000059A1
.text:000059A1 ; ---------------------------------------------------------------------------
.text:000059A2                 align 4
.text:000059A2 _text           ends
.text:000059A2
.text$x:000059A4 ; ===========================================================================
.text$x:000059A4
.text$x:000059A4 ; Segment type: Pure code
.text$x:000059A4 ; Segment permissions: Read/Execute
.text$x:000059A4 _text$x         segment para public 'CODE' use32
.text$x:000059A4                 assume cs:_text$x
.text$x:000059A4                 ;org 59A4h
.text$x:000059A4 ; COMDAT (pick associative to section at 58E8)
.text$x:000059A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000059A4
.text$x:000059A4 ; =============== S U B R O U T I N E =======================================
.text$x:000059A4
.text$x:000059A4
.text$x:000059A4 __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0 proc near
.text$x:000059A4                                         ; DATA XREF: .xdata$x:000059CCo
.text$x:000059A4                 mov     ecx, [ebp-10h]
.text$x:000059A7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000059A7 __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0 endp
.text$x:000059A7
.text$x:000059AC
.text$x:000059AC ; =============== S U B R O U T I N E =======================================
.text$x:000059AC
.text$x:000059AC
.text$x:000059AC __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ proc near
.text$x:000059AC                                         ; DATA XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+5o
.text$x:000059AC
.text$x:000059AC arg_4           = dword ptr  8
.text$x:000059AC
.text$x:000059AC                 mov     edx, [esp+arg_4]
.text$x:000059B0                 lea     eax, [edx+0Ch]
.text$x:000059B3                 mov     ecx, [edx-18h]
.text$x:000059B6                 xor     ecx, eax
.text$x:000059B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000059BD                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text$x:000059C2                 jmp     ___CxxFrameHandler3
.text$x:000059C2 __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ endp
.text$x:000059C2
.text$x:000059C2 ; ---------------------------------------------------------------------------
.text$x:000059C7                 align 4
.text$x:000059C7 _text$x         ends
.text$x:000059C7
.xdata$x:000059C8 ; ===========================================================================
.xdata$x:000059C8
.xdata$x:000059C8 ; Segment type: Pure data
.xdata$x:000059C8 ; Segment permissions: Read
.xdata$x:000059C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000059C8                 assume cs:_xdata$x
.xdata$x:000059C8                 ;org 59C8h
.xdata$x:000059C8 ; COMDAT (pick associative to section at 58E8)
.xdata$x:000059C8 __unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ db 0FFh
.xdata$x:000059C8                                         ; DATA XREF: .xdata$x:000059D8o
.xdata$x:000059C9                 db 0FFh
.xdata$x:000059CA                 db 0FFh
.xdata$x:000059CB                 db 0FFh
.xdata$x:000059CC                 dd offset __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0
.xdata$x:000059D0 __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ db  22h ; "
.xdata$x:000059D0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ+11o
.xdata$x:000059D1                 db    5
.xdata$x:000059D2                 db  93h ; ô
.xdata$x:000059D3                 db  19h
.xdata$x:000059D4                 db    1
.xdata$x:000059D5                 db    0
.xdata$x:000059D6                 db    0
.xdata$x:000059D7                 db    0
.xdata$x:000059D8                 dd offset __unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.xdata$x:000059DC                 db    0
.xdata$x:000059DD                 db    0
.xdata$x:000059DE                 db    0
.xdata$x:000059DF                 db    0
.xdata$x:000059E0                 db    0
.xdata$x:000059E1                 db    0
.xdata$x:000059E2                 db    0
.xdata$x:000059E3                 db    0
.xdata$x:000059E4                 db    0
.xdata$x:000059E5                 db    0
.xdata$x:000059E6                 db    0
.xdata$x:000059E7                 db    0
.xdata$x:000059E8                 db    0
.xdata$x:000059E9                 db    0
.xdata$x:000059EA                 db    0
.xdata$x:000059EB                 db    0
.xdata$x:000059EC                 db    0
.xdata$x:000059ED                 db    0
.xdata$x:000059EE                 db    0
.xdata$x:000059EF                 db    0
.xdata$x:000059F0                 db    1
.xdata$x:000059F1                 db    0
.xdata$x:000059F2                 db    0
.xdata$x:000059F3                 db    0
.xdata$x:000059F3 _xdata$x        ends
.xdata$x:000059F3
.text:000059F4 ; ===========================================================================
.text:000059F4
.text:000059F4 ; Segment type: Pure code
.text:000059F4 ; Segment permissions: Read/Execute
.text:000059F4 _text           segment para public 'CODE' use32
.text:000059F4                 assume cs:_text
.text:000059F4                 ;org 59F4h
.text:000059F4 ; COMDAT (pick any)
.text:000059F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000059F4
.text:000059F4 ; =============== S U B R O U T I N E =======================================
.text:000059F4
.text:000059F4 ; Attributes: bp-based frame
.text:000059F4
.text:000059F4 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:000059F4                 public ??0?$CRecordVector@I@@QAE@XZ
.text:000059F4 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: CUniqBlocks::CUniqBlocks(void)+42p
.text:000059F4                                         ; CUniqBlocks::CUniqBlocks(void)+51p
.text:000059F4
.text:000059F4 var_4           = dword ptr -4
.text:000059F4
.text:000059F4                 push    ebp
.text:000059F5                 mov     ebp, esp
.text:000059F7                 push    ecx
.text:000059F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059FF                 mov     [ebp+var_4], ecx
.text:00005A02                 mov     eax, [ebp+var_4]
.text:00005A05                 mov     dword ptr [eax], 0
.text:00005A0B                 mov     ecx, [ebp+var_4]
.text:00005A0E                 mov     dword ptr [ecx+4], 0
.text:00005A15                 mov     edx, [ebp+var_4]
.text:00005A18                 mov     dword ptr [edx+8], 0
.text:00005A1F                 mov     eax, [ebp+var_4]
.text:00005A22                 mov     esp, ebp
.text:00005A24                 pop     ebp
.text:00005A25                 retn
.text:00005A25 ??0?$CRecordVector@I@@QAE@XZ endp
.text:00005A25
.text:00005A25 ; ---------------------------------------------------------------------------
.text:00005A26                 align 4
.text:00005A26 _text           ends
.text:00005A26
.text:00005A28 ; ===========================================================================
.text:00005A28
.text:00005A28 ; Segment type: Pure code
.text:00005A28 ; Segment permissions: Read/Execute
.text:00005A28 _text           segment para public 'CODE' use32
.text:00005A28                 assume cs:_text
.text:00005A28                 ;org 5A28h
.text:00005A28 ; COMDAT (pick any)
.text:00005A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A28
.text:00005A28 ; =============== S U B R O U T I N E =======================================
.text:00005A28
.text:00005A28 ; Attributes: bp-based frame
.text:00005A28
.text:00005A28 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:00005A28                 public ??1?$CRecordVector@I@@QAE@XZ
.text:00005A28 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0CUniqBlocks@@QAE@XZ$1+6j
.text:00005A28                                         ; CUniqBlocks::~CUniqBlocks(void)+3Ap ...
.text:00005A28
.text:00005A28 var_8           = dword ptr -8
.text:00005A28 var_4           = dword ptr -4
.text:00005A28
.text:00005A28                 push    ebp
.text:00005A29                 mov     ebp, esp
.text:00005A2B                 sub     esp, 8
.text:00005A2E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005A35                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A3C                 mov     [ebp+var_4], ecx
.text:00005A3F                 mov     eax, [ebp+var_4]
.text:00005A42                 mov     ecx, [eax]
.text:00005A44                 mov     [ebp+var_8], ecx
.text:00005A47                 mov     edx, [ebp+var_8]
.text:00005A4A                 push    edx             ; void *
.text:00005A4B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005A50                 add     esp, 4
.text:00005A53                 add     esp, 8
.text:00005A56                 cmp     ebp, esp
.text:00005A58                 call    __RTC_CheckEsp
.text:00005A5D                 mov     esp, ebp
.text:00005A5F                 pop     ebp
.text:00005A60                 retn
.text:00005A60 ??1?$CRecordVector@I@@QAE@XZ endp
.text:00005A60
.text:00005A60 ; ---------------------------------------------------------------------------
.text:00005A61                 align 4
.text:00005A61 _text           ends
.text:00005A61
.text:00005A64 ; ===========================================================================
.text:00005A64
.text:00005A64 ; Segment type: Pure code
.text:00005A64 ; Segment permissions: Read/Execute
.text:00005A64 _text           segment para public 'CODE' use32
.text:00005A64                 assume cs:_text
.text:00005A64                 ;org 5A64h
.text:00005A64 ; COMDAT (pick any)
.text:00005A64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A64
.text:00005A64 ; =============== S U B R O U T I N E =======================================
.text:00005A64
.text:00005A64 ; Attributes: bp-based frame
.text:00005A64
.text:00005A64 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:00005A64                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:00005A64 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+110p
.text:00005A64                                         ; CBuffer<uchar>::Alloc(uint)+25p
.text:00005A64
.text:00005A64 var_8           = dword ptr -8
.text:00005A64 var_4           = dword ptr -4
.text:00005A64
.text:00005A64                 push    ebp
.text:00005A65                 mov     ebp, esp
.text:00005A67                 sub     esp, 8
.text:00005A6A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005A71                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A78                 mov     [ebp+var_4], ecx
.text:00005A7B                 mov     eax, [ebp+var_4]
.text:00005A7E                 cmp     dword ptr [eax], 0
.text:00005A81                 jz      short loc_5AA0
.text:00005A83                 mov     ecx, [ebp+var_4]
.text:00005A86                 mov     edx, [ecx]
.text:00005A88                 mov     [ebp+var_8], edx
.text:00005A8B                 mov     eax, [ebp+var_8]
.text:00005A8E                 push    eax             ; void *
.text:00005A8F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005A94                 add     esp, 4
.text:00005A97                 mov     ecx, [ebp+var_4]
.text:00005A9A                 mov     dword ptr [ecx], 0
.text:00005AA0
.text:00005AA0 loc_5AA0:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:00005AA0                 mov     edx, [ebp+var_4]
.text:00005AA3                 mov     dword ptr [edx+4], 0
.text:00005AAA                 add     esp, 8
.text:00005AAD                 cmp     ebp, esp
.text:00005AAF                 call    __RTC_CheckEsp
.text:00005AB4                 mov     esp, ebp
.text:00005AB6                 pop     ebp
.text:00005AB7                 retn
.text:00005AB7 ?Free@?$CBuffer@E@@QAEXXZ endp
.text:00005AB7
.text:00005AB7 _text           ends
.text:00005AB7
.text:00005AB8 ; ===========================================================================
.text:00005AB8
.text:00005AB8 ; Segment type: Pure code
.text:00005AB8 ; Segment permissions: Read/Execute
.text:00005AB8 _text           segment para public 'CODE' use32
.text:00005AB8                 assume cs:_text
.text:00005AB8                 ;org 5AB8h
.text:00005AB8 ; COMDAT (pick any)
.text:00005AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AB8
.text:00005AB8 ; =============== S U B R O U T I N E =======================================
.text:00005AB8
.text:00005AB8 ; Attributes: bp-based frame
.text:00005AB8
.text:00005AB8 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:00005AB8                 public ??0?$CBuffer@E@@QAE@XZ
.text:00005AB8 ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: CDirItems::CDirItems(void)+9Ap
.text:00005AB8                                         ; CDirItems::FillFixedReparse(void)+5E1p ...
.text:00005AB8
.text:00005AB8 var_4           = dword ptr -4
.text:00005AB8
.text:00005AB8                 push    ebp
.text:00005AB9                 mov     ebp, esp
.text:00005ABB                 push    ecx
.text:00005ABC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AC3                 mov     [ebp+var_4], ecx
.text:00005AC6                 mov     eax, [ebp+var_4]
.text:00005AC9                 mov     dword ptr [eax], 0
.text:00005ACF                 mov     ecx, [ebp+var_4]
.text:00005AD2                 mov     dword ptr [ecx+4], 0
.text:00005AD9                 mov     eax, [ebp+var_4]
.text:00005ADC                 mov     esp, ebp
.text:00005ADE                 pop     ebp
.text:00005ADF                 retn
.text:00005ADF ??0?$CBuffer@E@@QAE@XZ endp
.text:00005ADF
.text:00005ADF _text           ends
.text:00005ADF
.text:00005AE0 ; ===========================================================================
.text:00005AE0
.text:00005AE0 ; Segment type: Pure code
.text:00005AE0 ; Segment permissions: Read/Execute
.text:00005AE0 _text           segment para public 'CODE' use32
.text:00005AE0                 assume cs:_text
.text:00005AE0                 ;org 5AE0h
.text:00005AE0 ; COMDAT (pick any)
.text:00005AE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AE0
.text:00005AE0 ; =============== S U B R O U T I N E =======================================
.text:00005AE0
.text:00005AE0 ; Attributes: bp-based frame
.text:00005AE0
.text:00005AE0 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00005AE0                 public ??1?$CBuffer@E@@QAE@XZ
.text:00005AE0 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: CDirItems::FillFixedReparse(void)+61Fp
.text:00005AE0                                         ; CDirItems::FillFixedReparse(void)+6A5p ...
.text:00005AE0
.text:00005AE0 var_8           = dword ptr -8
.text:00005AE0 var_4           = dword ptr -4
.text:00005AE0
.text:00005AE0                 push    ebp
.text:00005AE1                 mov     ebp, esp
.text:00005AE3                 sub     esp, 8
.text:00005AE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005AED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AF4                 mov     [ebp+var_4], ecx
.text:00005AF7                 mov     eax, [ebp+var_4]
.text:00005AFA                 mov     ecx, [eax]
.text:00005AFC                 mov     [ebp+var_8], ecx
.text:00005AFF                 mov     edx, [ebp+var_8]
.text:00005B02                 push    edx             ; void *
.text:00005B03                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005B08                 add     esp, 4
.text:00005B0B                 add     esp, 8
.text:00005B0E                 cmp     ebp, esp
.text:00005B10                 call    __RTC_CheckEsp
.text:00005B15                 mov     esp, ebp
.text:00005B17                 pop     ebp
.text:00005B18                 retn
.text:00005B18 ??1?$CBuffer@E@@QAE@XZ endp
.text:00005B18
.text:00005B18 ; ---------------------------------------------------------------------------
.text:00005B19                 align 4
.text:00005B19 _text           ends
.text:00005B19
.text:00005B1C ; ===========================================================================
.text:00005B1C
.text:00005B1C ; Segment type: Pure code
.text:00005B1C ; Segment permissions: Read/Execute
.text:00005B1C _text           segment para public 'CODE' use32
.text:00005B1C                 assume cs:_text
.text:00005B1C                 ;org 5B1Ch
.text:00005B1C ; COMDAT (pick any)
.text:00005B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B1C
.text:00005B1C ; =============== S U B R O U T I N E =======================================
.text:00005B1C
.text:00005B1C ; Attributes: bp-based frame
.text:00005B1C
.text:00005B1C ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:00005B1C                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:00005B1C ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+70p
.text:00005B1C                                         ; CDirItems::AddSecurityItem(UString const &,int &)+130p ...
.text:00005B1C
.text:00005B1C var_4           = dword ptr -4
.text:00005B1C
.text:00005B1C                 push    ebp
.text:00005B1D                 mov     ebp, esp
.text:00005B1F                 push    ecx
.text:00005B20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B27                 mov     [ebp+var_4], ecx
.text:00005B2A                 mov     eax, [ebp+var_4]
.text:00005B2D                 mov     eax, [eax]
.text:00005B2F                 mov     esp, ebp
.text:00005B31                 pop     ebp
.text:00005B32                 retn
.text:00005B32 ??B?$CBuffer@E@@QAEPAEXZ endp
.text:00005B32
.text:00005B32 ; ---------------------------------------------------------------------------
.text:00005B33                 align 4
.text:00005B33 _text           ends
.text:00005B33
.text:00005B34 ; ===========================================================================
.text:00005B34
.text:00005B34 ; Segment type: Pure code
.text:00005B34 ; Segment permissions: Read/Execute
.text:00005B34 _text           segment para public 'CODE' use32
.text:00005B34                 assume cs:_text
.text:00005B34                 ;org 5B34h
.text:00005B34 ; COMDAT (pick any)
.text:00005B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B34
.text:00005B34 ; =============== S U B R O U T I N E =======================================
.text:00005B34
.text:00005B34 ; Attributes: bp-based frame
.text:00005B34
.text:00005B34 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00005B34                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00005B34 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+61p
.text:00005B34                                         ; CDirItems::AddSecurityItem(UString const &,int &)+AFp ...
.text:00005B34
.text:00005B34 var_4           = dword ptr -4
.text:00005B34
.text:00005B34                 push    ebp
.text:00005B35                 mov     ebp, esp
.text:00005B37                 push    ecx
.text:00005B38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B3F                 mov     [ebp+var_4], ecx
.text:00005B42                 mov     eax, [ebp+var_4]
.text:00005B45                 mov     eax, [eax+4]
.text:00005B48                 mov     esp, ebp
.text:00005B4A                 pop     ebp
.text:00005B4B                 retn
.text:00005B4B ?Size@?$CBuffer@E@@QBEIXZ endp
.text:00005B4B
.text:00005B4B _text           ends
.text:00005B4B
.text:00005B4C ; ===========================================================================
.text:00005B4C
.text:00005B4C ; Segment type: Pure code
.text:00005B4C ; Segment permissions: Read/Execute
.text:00005B4C _text           segment para public 'CODE' use32
.text:00005B4C                 assume cs:_text
.text:00005B4C                 ;org 5B4Ch
.text:00005B4C ; COMDAT (pick any)
.text:00005B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B4C
.text:00005B4C ; =============== S U B R O U T I N E =======================================
.text:00005B4C
.text:00005B4C ; Attributes: bp-based frame
.text:00005B4C
.text:00005B4C ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:00005B4C                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:00005B4C ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+10Dp
.text:00005B4C                                         ; CBuffer<uchar>::CopyFrom(uchar const *,uint)+15p
.text:00005B4C
.text:00005B4C var_8           = dword ptr -8
.text:00005B4C var_4           = dword ptr -4
.text:00005B4C arg_0           = dword ptr  8
.text:00005B4C
.text:00005B4C                 push    ebp
.text:00005B4D                 mov     ebp, esp
.text:00005B4F                 sub     esp, 8
.text:00005B52                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005B59                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B60                 mov     [ebp+var_4], ecx
.text:00005B63                 mov     eax, [ebp+var_4]
.text:00005B66                 mov     ecx, [ebp+arg_0]
.text:00005B69                 cmp     ecx, [eax+4]
.text:00005B6C                 jz      short loc_5B9C
.text:00005B6E                 mov     ecx, [ebp+var_4]
.text:00005B71                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00005B76                 cmp     [ebp+arg_0], 0
.text:00005B7A                 jz      short loc_5B9C
.text:00005B7C                 mov     edx, [ebp+arg_0]
.text:00005B7F                 push    edx             ; unsigned int
.text:00005B80                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005B85                 add     esp, 4
.text:00005B88                 mov     [ebp+var_8], eax
.text:00005B8B                 mov     eax, [ebp+var_4]
.text:00005B8E                 mov     ecx, [ebp+var_8]
.text:00005B91                 mov     [eax], ecx
.text:00005B93                 mov     edx, [ebp+var_4]
.text:00005B96                 mov     eax, [ebp+arg_0]
.text:00005B99                 mov     [edx+4], eax
.text:00005B9C
.text:00005B9C loc_5B9C:                               ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:00005B9C                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:00005B9C                 add     esp, 8
.text:00005B9F                 cmp     ebp, esp
.text:00005BA1                 call    __RTC_CheckEsp
.text:00005BA6                 mov     esp, ebp
.text:00005BA8                 pop     ebp
.text:00005BA9                 retn    4
.text:00005BA9 ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:00005BA9
.text:00005BA9 _text           ends
.text:00005BA9
.text:00005BAC ; ===========================================================================
.text:00005BAC
.text:00005BAC ; Segment type: Pure code
.text:00005BAC ; Segment permissions: Read/Execute
.text:00005BAC _text           segment para public 'CODE' use32
.text:00005BAC                 assume cs:_text
.text:00005BAC                 ;org 5BACh
.text:00005BAC ; COMDAT (pick any)
.text:00005BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BAC
.text:00005BAC ; =============== S U B R O U T I N E =======================================
.text:00005BAC
.text:00005BAC ; Attributes: bp-based frame
.text:00005BAC
.text:00005BAC ; public: class CBuffer<unsigned char> & __thiscall CBuffer<unsigned char>::operator=(class CBuffer<unsigned char> const &)
.text:00005BAC                 public ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z
.text:00005BAC ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z proc near
.text:00005BAC                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+696p
.text:00005BAC
.text:00005BAC var_4           = dword ptr -4
.text:00005BAC arg_0           = dword ptr  8
.text:00005BAC
.text:00005BAC                 push    ebp
.text:00005BAD                 mov     ebp, esp
.text:00005BAF                 push    ecx
.text:00005BB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BB7                 mov     [ebp+var_4], ecx
.text:00005BBA                 mov     eax, [ebp+arg_0]
.text:00005BBD                 cmp     eax, [ebp+var_4]
.text:00005BC0                 jz      short loc_5BDA
.text:00005BC2                 mov     ecx, [ebp+arg_0]
.text:00005BC5                 mov     edx, [ecx+4]
.text:00005BC8                 push    edx             ; Size
.text:00005BC9                 mov     ecx, [ebp+arg_0]
.text:00005BCC                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00005BD1                 push    eax             ; Src
.text:00005BD2                 mov     ecx, [ebp+var_4]
.text:00005BD5                 call    ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ; CBuffer<uchar>::CopyFrom(uchar const *,uint)
.text:00005BDA
.text:00005BDA loc_5BDA:                               ; CODE XREF: CBuffer<uchar>::operator=(CBuffer<uchar> const &)+14j
.text:00005BDA                 mov     eax, [ebp+var_4]
.text:00005BDD                 add     esp, 4
.text:00005BE0                 cmp     ebp, esp
.text:00005BE2                 call    __RTC_CheckEsp
.text:00005BE7                 mov     esp, ebp
.text:00005BE9                 pop     ebp
.text:00005BEA                 retn    4
.text:00005BEA ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z endp
.text:00005BEA
.text:00005BEA ; ---------------------------------------------------------------------------
.text:00005BED                 align 10h
.text:00005BED _text           ends
.text:00005BED
.text:00005BF0 ; ===========================================================================
.text:00005BF0
.text:00005BF0 ; Segment type: Pure code
.text:00005BF0 ; Segment permissions: Read/Execute
.text:00005BF0 _text           segment para public 'CODE' use32
.text:00005BF0                 assume cs:_text
.text:00005BF0                 ;org 5BF0h
.text:00005BF0 ; COMDAT (pick any)
.text:00005BF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BF0
.text:00005BF0 ; =============== S U B R O U T I N E =======================================
.text:00005BF0
.text:00005BF0 ; Attributes: bp-based frame
.text:00005BF0
.text:00005BF0 ; public: __thiscall CRecordVector<int>::CRecordVector<int>(void)
.text:00005BF0                 public ??0?$CRecordVector@H@@QAE@XZ
.text:00005BF0 ??0?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: CDirItems::CDirItems(void)+42p
.text:00005BF0                                         ; CDirItems::CDirItems(void)+51p
.text:00005BF0
.text:00005BF0 var_4           = dword ptr -4
.text:00005BF0
.text:00005BF0                 push    ebp
.text:00005BF1                 mov     ebp, esp
.text:00005BF3                 push    ecx
.text:00005BF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BFB                 mov     [ebp+var_4], ecx
.text:00005BFE                 mov     eax, [ebp+var_4]
.text:00005C01                 mov     dword ptr [eax], 0
.text:00005C07                 mov     ecx, [ebp+var_4]
.text:00005C0A                 mov     dword ptr [ecx+4], 0
.text:00005C11                 mov     edx, [ebp+var_4]
.text:00005C14                 mov     dword ptr [edx+8], 0
.text:00005C1B                 mov     eax, [ebp+var_4]
.text:00005C1E                 mov     esp, ebp
.text:00005C20                 pop     ebp
.text:00005C21                 retn
.text:00005C21 ??0?$CRecordVector@H@@QAE@XZ endp
.text:00005C21
.text:00005C21 ; ---------------------------------------------------------------------------
.text:00005C22                 align 4
.text:00005C22 _text           ends
.text:00005C22
.text:00005C24 ; ===========================================================================
.text:00005C24
.text:00005C24 ; Segment type: Pure code
.text:00005C24 ; Segment permissions: Read/Execute
.text:00005C24 _text           segment para public 'CODE' use32
.text:00005C24                 assume cs:_text
.text:00005C24                 ;org 5C24h
.text:00005C24 ; COMDAT (pick any)
.text:00005C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C24
.text:00005C24 ; =============== S U B R O U T I N E =======================================
.text:00005C24
.text:00005C24 ; Attributes: bp-based frame
.text:00005C24
.text:00005C24 ; public: void __thiscall CRecordVector<int>::ReserveDown(void)
.text:00005C24                 public ?ReserveDown@?$CRecordVector@H@@QAEXXZ
.text:00005C24 ?ReserveDown@?$CRecordVector@H@@QAEXXZ proc near
.text:00005C24                                         ; CODE XREF: CDirItems::ReserveDown(void)+1Cp
.text:00005C24                                         ; CDirItems::ReserveDown(void)+27p
.text:00005C24
.text:00005C24 var_10          = dword ptr -10h
.text:00005C24 var_C           = dword ptr -0Ch
.text:00005C24 Dst             = dword ptr -8
.text:00005C24 var_4           = dword ptr -4
.text:00005C24
.text:00005C24                 push    ebp
.text:00005C25                 mov     ebp, esp
.text:00005C27                 sub     esp, 10h
.text:00005C2A                 mov     eax, 0CCCCCCCCh
.text:00005C2F                 mov     [ebp+var_10], eax
.text:00005C32                 mov     [ebp+var_C], eax
.text:00005C35                 mov     [ebp+Dst], eax
.text:00005C38                 mov     [ebp+var_4], eax
.text:00005C3B                 mov     [ebp+var_4], ecx
.text:00005C3E                 mov     eax, [ebp+var_4]
.text:00005C41                 mov     ecx, [ebp+var_4]
.text:00005C44                 mov     edx, [eax+4]
.text:00005C47                 cmp     edx, [ecx+8]
.text:00005C4A                 jnz     short loc_5C4E
.text:00005C4C                 jmp     short loc_5CCA
.text:00005C4E ; ---------------------------------------------------------------------------
.text:00005C4E
.text:00005C4E loc_5C4E:                               ; CODE XREF: CRecordVector<int>::ReserveDown(void)+26j
.text:00005C4E                 mov     [ebp+Dst], 0
.text:00005C55                 mov     eax, [ebp+var_4]
.text:00005C58                 cmp     dword ptr [eax+4], 0
.text:00005C5C                 jz      short loc_5CA2
.text:00005C5E                 xor     ecx, ecx
.text:00005C60                 mov     edx, [ebp+var_4]
.text:00005C63                 mov     eax, [edx+4]
.text:00005C66                 mov     edx, 4
.text:00005C6B                 mul     edx
.text:00005C6D                 seto    cl
.text:00005C70                 neg     ecx
.text:00005C72                 or      ecx, eax
.text:00005C74                 push    ecx             ; unsigned int
.text:00005C75                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005C7A                 add     esp, 4
.text:00005C7D                 mov     [ebp+var_C], eax
.text:00005C80                 mov     eax, [ebp+var_C]
.text:00005C83                 mov     [ebp+Dst], eax
.text:00005C86                 mov     ecx, [ebp+var_4]
.text:00005C89                 mov     edx, [ecx+4]
.text:00005C8C                 shl     edx, 2
.text:00005C8F                 push    edx             ; Size
.text:00005C90                 mov     eax, [ebp+var_4]
.text:00005C93                 mov     ecx, [eax]
.text:00005C95                 push    ecx             ; Src
.text:00005C96                 mov     edx, [ebp+Dst]
.text:00005C99                 push    edx             ; Dst
.text:00005C9A                 call    _memcpy
.text:00005C9F                 add     esp, 0Ch
.text:00005CA2
.text:00005CA2 loc_5CA2:                               ; CODE XREF: CRecordVector<int>::ReserveDown(void)+38j
.text:00005CA2                 mov     eax, [ebp+var_4]
.text:00005CA5                 mov     ecx, [eax]
.text:00005CA7                 mov     [ebp+var_10], ecx
.text:00005CAA                 mov     edx, [ebp+var_10]
.text:00005CAD                 push    edx             ; void *
.text:00005CAE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005CB3                 add     esp, 4
.text:00005CB6                 mov     eax, [ebp+var_4]
.text:00005CB9                 mov     ecx, [ebp+Dst]
.text:00005CBC                 mov     [eax], ecx
.text:00005CBE                 mov     edx, [ebp+var_4]
.text:00005CC1                 mov     eax, [ebp+var_4]
.text:00005CC4                 mov     ecx, [eax+4]
.text:00005CC7                 mov     [edx+8], ecx
.text:00005CCA
.text:00005CCA loc_5CCA:                               ; CODE XREF: CRecordVector<int>::ReserveDown(void)+28j
.text:00005CCA                 add     esp, 10h
.text:00005CCD                 cmp     ebp, esp
.text:00005CCF                 call    __RTC_CheckEsp
.text:00005CD4                 mov     esp, ebp
.text:00005CD6                 pop     ebp
.text:00005CD7                 retn
.text:00005CD7 ?ReserveDown@?$CRecordVector@H@@QAEXXZ endp
.text:00005CD7
.text:00005CD7 _text           ends
.text:00005CD7
.text:00005CD8 ; ===========================================================================
.text:00005CD8
.text:00005CD8 ; Segment type: Pure code
.text:00005CD8 ; Segment permissions: Read/Execute
.text:00005CD8 _text           segment para public 'CODE' use32
.text:00005CD8                 assume cs:_text
.text:00005CD8                 ;org 5CD8h
.text:00005CD8 ; COMDAT (pick any)
.text:00005CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CD8
.text:00005CD8 ; =============== S U B R O U T I N E =======================================
.text:00005CD8
.text:00005CD8 ; Attributes: bp-based frame
.text:00005CD8
.text:00005CD8 ; public: __thiscall CRecordVector<int>::~CRecordVector<int>(void)
.text:00005CD8                 public ??1?$CRecordVector@H@@QAE@XZ
.text:00005CD8 ??1?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0CDirItems@@QAE@XZ$1+6j
.text:00005CD8                                         ; __unwindfunclet$??0CDirItems@@QAE@XZ$2+6j
.text:00005CD8
.text:00005CD8 var_8           = dword ptr -8
.text:00005CD8 var_4           = dword ptr -4
.text:00005CD8
.text:00005CD8                 push    ebp
.text:00005CD9                 mov     ebp, esp
.text:00005CDB                 sub     esp, 8
.text:00005CDE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005CE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CEC                 mov     [ebp+var_4], ecx
.text:00005CEF                 mov     eax, [ebp+var_4]
.text:00005CF2                 mov     ecx, [eax]
.text:00005CF4                 mov     [ebp+var_8], ecx
.text:00005CF7                 mov     edx, [ebp+var_8]
.text:00005CFA                 push    edx             ; void *
.text:00005CFB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005D00                 add     esp, 4
.text:00005D03                 add     esp, 8
.text:00005D06                 cmp     ebp, esp
.text:00005D08                 call    __RTC_CheckEsp
.text:00005D0D                 mov     esp, ebp
.text:00005D0F                 pop     ebp
.text:00005D10                 retn
.text:00005D10 ??1?$CRecordVector@H@@QAE@XZ endp
.text:00005D10
.text:00005D10 ; ---------------------------------------------------------------------------
.text:00005D11                 align 4
.text:00005D11 _text           ends
.text:00005D11
.text:00005D14 ; ===========================================================================
.text:00005D14
.text:00005D14 ; Segment type: Pure code
.text:00005D14 ; Segment permissions: Read/Execute
.text:00005D14 _text           segment para public 'CODE' use32
.text:00005D14                 assume cs:_text
.text:00005D14                 ;org 5D14h
.text:00005D14 ; COMDAT (pick any)
.text:00005D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D14
.text:00005D14 ; =============== S U B R O U T I N E =======================================
.text:00005D14
.text:00005D14 ; Attributes: bp-based frame
.text:00005D14
.text:00005D14 ; public: void __thiscall CRecordVector<int>::DeleteBack(void)
.text:00005D14                 public ?DeleteBack@?$CRecordVector@H@@QAEXXZ
.text:00005D14 ?DeleteBack@?$CRecordVector@H@@QAEXXZ proc near
.text:00005D14                                         ; CODE XREF: CDirItems::DeleteLastPrefix(void)+14p
.text:00005D14                                         ; CDirItems::DeleteLastPrefix(void)+1Fp
.text:00005D14
.text:00005D14 var_4           = dword ptr -4
.text:00005D14
.text:00005D14                 push    ebp
.text:00005D15                 mov     ebp, esp
.text:00005D17                 push    ecx
.text:00005D18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D1F                 mov     [ebp+var_4], ecx
.text:00005D22                 mov     eax, [ebp+var_4]
.text:00005D25                 mov     ecx, [eax+4]
.text:00005D28                 sub     ecx, 1
.text:00005D2B                 mov     edx, [ebp+var_4]
.text:00005D2E                 mov     [edx+4], ecx
.text:00005D31                 mov     esp, ebp
.text:00005D33                 pop     ebp
.text:00005D34                 retn
.text:00005D34 ?DeleteBack@?$CRecordVector@H@@QAEXXZ endp
.text:00005D34
.text:00005D34 ; ---------------------------------------------------------------------------
.text:00005D35                 align 4
.text:00005D35 _text           ends
.text:00005D35
.text:00005D38 ; ===========================================================================
.text:00005D38
.text:00005D38 ; Segment type: Pure code
.text:00005D38 ; Segment permissions: Read/Execute
.text:00005D38 _text           segment para public 'CODE' use32
.text:00005D38                 assume cs:_text
.text:00005D38                 ;org 5D38h
.text:00005D38 ; COMDAT (pick any)
.text:00005D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D38
.text:00005D38 ; =============== S U B R O U T I N E =======================================
.text:00005D38
.text:00005D38 ; Attributes: bp-based frame
.text:00005D38
.text:00005D38 ; public: unsigned int __thiscall CRecordVector<int>::Add(int)
.text:00005D38                 public ?Add@?$CRecordVector@H@@QAEIH@Z
.text:00005D38 ?Add@?$CRecordVector@H@@QAEIH@Z proc near
.text:00005D38                                         ; CODE XREF: CDirItems::AddPrefix(int,int,UString const &)+18p
.text:00005D38                                         ; CDirItems::AddPrefix(int,int,UString const &)+27p
.text:00005D38
.text:00005D38 var_8           = dword ptr -8
.text:00005D38 var_4           = dword ptr -4
.text:00005D38 arg_0           = dword ptr  8
.text:00005D38
.text:00005D38                 push    ebp
.text:00005D39                 mov     ebp, esp
.text:00005D3B                 sub     esp, 8
.text:00005D3E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005D45                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D4C                 mov     [ebp+var_4], ecx
.text:00005D4F                 mov     ecx, [ebp+var_4]
.text:00005D52                 call    ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition(void)
.text:00005D57                 mov     eax, [ebp+var_4]
.text:00005D5A                 mov     ecx, [eax+4]
.text:00005D5D                 mov     edx, [ebp+var_4]
.text:00005D60                 mov     eax, [edx]
.text:00005D62                 mov     edx, [ebp+arg_0]
.text:00005D65                 mov     [eax+ecx*4], edx
.text:00005D68                 mov     eax, [ebp+var_4]
.text:00005D6B                 mov     ecx, [eax+4]
.text:00005D6E                 mov     [ebp+var_8], ecx
.text:00005D71                 mov     edx, [ebp+var_4]
.text:00005D74                 mov     eax, [edx+4]
.text:00005D77                 add     eax, 1
.text:00005D7A                 mov     ecx, [ebp+var_4]
.text:00005D7D                 mov     [ecx+4], eax
.text:00005D80                 mov     eax, [ebp+var_8]
.text:00005D83                 add     esp, 8
.text:00005D86                 cmp     ebp, esp
.text:00005D88                 call    __RTC_CheckEsp
.text:00005D8D                 mov     esp, ebp
.text:00005D8F                 pop     ebp
.text:00005D90                 retn    4
.text:00005D90 ?Add@?$CRecordVector@H@@QAEIH@Z endp
.text:00005D90
.text:00005D90 ; ---------------------------------------------------------------------------
.text:00005D93                 align 4
.text:00005D93 _text           ends
.text:00005D93
.text:00005D94 ; ===========================================================================
.text:00005D94
.text:00005D94 ; Segment type: Pure code
.text:00005D94 ; Segment permissions: Read/Execute
.text:00005D94 _text           segment para public 'CODE' use32
.text:00005D94                 assume cs:_text
.text:00005D94                 ;org 5D94h
.text:00005D94 ; COMDAT (pick any)
.text:00005D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D94
.text:00005D94 ; =============== S U B R O U T I N E =======================================
.text:00005D94
.text:00005D94 ; Attributes: bp-based frame
.text:00005D94
.text:00005D94 ; public: int const & __thiscall CRecordVector<int>::operator[](unsigned int)const
.text:00005D94                 public ??A?$CRecordVector@H@@QBEABHI@Z
.text:00005D94 ??A?$CRecordVector@H@@QBEABHI@Z proc near
.text:00005D94                                         ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+6Ap
.text:00005D94                                         ; CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+E9p
.text:00005D94
.text:00005D94 var_4           = dword ptr -4
.text:00005D94 arg_0           = dword ptr  8
.text:00005D94
.text:00005D94                 push    ebp
.text:00005D95                 mov     ebp, esp
.text:00005D97                 push    ecx
.text:00005D98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D9F                 mov     [ebp+var_4], ecx
.text:00005DA2                 mov     eax, [ebp+var_4]
.text:00005DA5                 mov     ecx, [eax]
.text:00005DA7                 mov     edx, [ebp+arg_0]
.text:00005DAA                 lea     eax, [ecx+edx*4]
.text:00005DAD                 mov     esp, ebp
.text:00005DAF                 pop     ebp
.text:00005DB0                 retn    4
.text:00005DB0 ??A?$CRecordVector@H@@QBEABHI@Z endp
.text:00005DB0
.text:00005DB0 ; ---------------------------------------------------------------------------
.text:00005DB3                 align 4
.text:00005DB3 _text           ends
.text:00005DB3
.text:00005DB4 ; ===========================================================================
.text:00005DB4
.text:00005DB4 ; Segment type: Pure code
.text:00005DB4 ; Segment permissions: Read/Execute
.text:00005DB4 _text           segment para public 'CODE' use32
.text:00005DB4                 assume cs:_text
.text:00005DB4                 ;org 5DB4h
.text:00005DB4 ; COMDAT (pick any)
.text:00005DB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005DB4
.text:00005DB4 ; =============== S U B R O U T I N E =======================================
.text:00005DB4
.text:00005DB4 ; Attributes: bp-based frame
.text:00005DB4
.text:00005DB4 ; public: unsigned int __thiscall CObjectVector<struct CDirItem>::Size(void)const
.text:00005DB4                 public ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ
.text:00005DB4 ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ proc near
.text:00005DB4                                         ; CODE XREF: EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+68p
.text:00005DB4                                         ; EnumerateDirItems_Spec(NWildcard::CCensorNode const &,int,int,UString const &,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+C5p ...
.text:00005DB4
.text:00005DB4 var_4           = dword ptr -4
.text:00005DB4
.text:00005DB4                 push    ebp
.text:00005DB5                 mov     ebp, esp
.text:00005DB7                 push    ecx
.text:00005DB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DBF                 mov     [ebp+var_4], ecx
.text:00005DC2                 mov     ecx, [ebp+var_4]
.text:00005DC5                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005DCA                 add     esp, 4
.text:00005DCD                 cmp     ebp, esp
.text:00005DCF                 call    __RTC_CheckEsp
.text:00005DD4                 mov     esp, ebp
.text:00005DD6                 pop     ebp
.text:00005DD7                 retn
.text:00005DD7 ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ endp
.text:00005DD7
.text:00005DD7 _text           ends
.text:00005DD7
.text:00005DD8 ; ===========================================================================
.text:00005DD8
.text:00005DD8 ; Segment type: Pure code
.text:00005DD8 ; Segment permissions: Read/Execute
.text:00005DD8 _text           segment para public 'CODE' use32
.text:00005DD8                 assume cs:_text
.text:00005DD8                 ;org 5DD8h
.text:00005DD8 ; COMDAT (pick any)
.text:00005DD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005DD8
.text:00005DD8 ; =============== S U B R O U T I N E =======================================
.text:00005DD8
.text:00005DD8 ; Attributes: bp-based frame
.text:00005DD8
.text:00005DD8 ; public: void __thiscall CObjectVector<struct CDirItem>::ReserveDown(void)
.text:00005DD8                 public ?ReserveDown@?$CObjectVector@UCDirItem@@@@QAEXXZ
.text:00005DD8 ?ReserveDown@?$CObjectVector@UCDirItem@@@@QAEXXZ proc near
.text:00005DD8                                         ; CODE XREF: CDirItems::ReserveDown(void)+32p
.text:00005DD8
.text:00005DD8 var_4           = dword ptr -4
.text:00005DD8
.text:00005DD8                 push    ebp
.text:00005DD9                 mov     ebp, esp
.text:00005DDB                 push    ecx
.text:00005DDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DE3                 mov     [ebp+var_4], ecx
.text:00005DE6                 mov     ecx, [ebp+var_4]
.text:00005DE9                 call    ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::ReserveDown(void)
.text:00005DEE                 add     esp, 4
.text:00005DF1                 cmp     ebp, esp
.text:00005DF3                 call    __RTC_CheckEsp
.text:00005DF8                 mov     esp, ebp
.text:00005DFA                 pop     ebp
.text:00005DFB                 retn
.text:00005DFB ?ReserveDown@?$CObjectVector@UCDirItem@@@@QAEXXZ endp
.text:00005DFB
.text:00005DFB _text           ends
.text:00005DFB
.text:00005DFC ; ===========================================================================
.text:00005DFC
.text:00005DFC ; Segment type: Pure code
.text:00005DFC ; Segment permissions: Read/Execute
.text:00005DFC _text           segment para public 'CODE' use32
.text:00005DFC                 assume cs:_text
.text:00005DFC                 ;org 5DFCh
.text:00005DFC ; COMDAT (pick any)
.text:00005DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005DFC
.text:00005DFC ; =============== S U B R O U T I N E =======================================
.text:00005DFC
.text:00005DFC ; Attributes: bp-based frame
.text:00005DFC
.text:00005DFC ; public: __thiscall CObjectVector<struct CDirItem>::CObjectVector<struct CDirItem>(void)
.text:00005DFC                 public ??0?$CObjectVector@UCDirItem@@@@QAE@XZ
.text:00005DFC ??0?$CObjectVector@UCDirItem@@@@QAE@XZ proc near
.text:00005DFC                                         ; CODE XREF: CDirItems::CDirItems(void)+60p
.text:00005DFC
.text:00005DFC var_4           = dword ptr -4
.text:00005DFC
.text:00005DFC                 push    ebp
.text:00005DFD                 mov     ebp, esp
.text:00005DFF                 push    ecx
.text:00005E00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E07                 mov     [ebp+var_4], ecx
.text:00005E0A                 mov     ecx, [ebp+var_4]
.text:00005E0D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005E12                 mov     eax, [ebp+var_4]
.text:00005E15                 add     esp, 4
.text:00005E18                 cmp     ebp, esp
.text:00005E1A                 call    __RTC_CheckEsp
.text:00005E1F                 mov     esp, ebp
.text:00005E21                 pop     ebp
.text:00005E22                 retn
.text:00005E22 ??0?$CObjectVector@UCDirItem@@@@QAE@XZ endp
.text:00005E22
.text:00005E22 ; ---------------------------------------------------------------------------
.text:00005E23                 align 4
.text:00005E23 _text           ends
.text:00005E23
.text:00005E24 ; ===========================================================================
.text:00005E24
.text:00005E24 ; Segment type: Pure code
.text:00005E24 ; Segment permissions: Read/Execute
.text:00005E24 _text           segment para public 'CODE' use32
.text:00005E24                 assume cs:_text
.text:00005E24                 ;org 5E24h
.text:00005E24 ; COMDAT (pick any)
.text:00005E24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005E24
.text:00005E24 ; =============== S U B R O U T I N E =======================================
.text:00005E24
.text:00005E24 ; Attributes: bp-based frame
.text:00005E24
.text:00005E24 ; public: struct CDirItem const & __thiscall CObjectVector<struct CDirItem>::operator[](unsigned int)const
.text:00005E24                 public ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z
.text:00005E24 ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z proc near
.text:00005E24                                         ; CODE XREF: CDirItems::GetPhyPath(uint)+2Fp
.text:00005E24                                         ; CDirItems::GetLogPath(uint)+2Fp
.text:00005E24
.text:00005E24 var_4           = dword ptr -4
.text:00005E24 arg_0           = dword ptr  8
.text:00005E24
.text:00005E24                 push    ebp
.text:00005E25                 mov     ebp, esp
.text:00005E27                 push    ecx
.text:00005E28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E2F                 mov     [ebp+var_4], ecx
.text:00005E32                 mov     eax, [ebp+arg_0]
.text:00005E35                 push    eax
.text:00005E36                 mov     ecx, [ebp+var_4]
.text:00005E39                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005E3E                 mov     eax, [eax]
.text:00005E40                 add     esp, 4
.text:00005E43                 cmp     ebp, esp
.text:00005E45                 call    __RTC_CheckEsp
.text:00005E4A                 mov     esp, ebp
.text:00005E4C                 pop     ebp
.text:00005E4D                 retn    4
.text:00005E4D ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z endp
.text:00005E4D
.text:00005E4D _text           ends
.text:00005E4D
.text:00005E50 ; ===========================================================================
.text:00005E50
.text:00005E50 ; Segment type: Pure code
.text:00005E50 ; Segment permissions: Read/Execute
.text:00005E50 _text           segment para public 'CODE' use32
.text:00005E50                 assume cs:_text
.text:00005E50                 ;org 5E50h
.text:00005E50 ; COMDAT (pick any)
.text:00005E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005E50
.text:00005E50 ; =============== S U B R O U T I N E =======================================
.text:00005E50
.text:00005E50 ; Attributes: bp-based frame
.text:00005E50
.text:00005E50 ; public: struct CDirItem & __thiscall CObjectVector<struct CDirItem>::operator[](unsigned int)
.text:00005E50                 public ??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z
.text:00005E50 ??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z proc near
.text:00005E50                                         ; CODE XREF: EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+2B6p
.text:00005E50                                         ; CDirItems::FillFixedReparse(void)+81p ...
.text:00005E50
.text:00005E50 var_4           = dword ptr -4
.text:00005E50 arg_0           = dword ptr  8
.text:00005E50
.text:00005E50                 push    ebp
.text:00005E51                 mov     ebp, esp
.text:00005E53                 push    ecx
.text:00005E54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E5B                 mov     [ebp+var_4], ecx
.text:00005E5E                 mov     eax, [ebp+arg_0]
.text:00005E61                 push    eax
.text:00005E62                 mov     ecx, [ebp+var_4]
.text:00005E65                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005E6A                 mov     eax, [eax]
.text:00005E6C                 add     esp, 4
.text:00005E6F                 cmp     ebp, esp
.text:00005E71                 call    __RTC_CheckEsp
.text:00005E76                 mov     esp, ebp
.text:00005E78                 pop     ebp
.text:00005E79                 retn    4
.text:00005E79 ??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z endp
.text:00005E79
.text:00005E79 _text           ends
.text:00005E79
.text:00005E7C ; ===========================================================================
.text:00005E7C
.text:00005E7C ; Segment type: Pure code
.text:00005E7C ; Segment permissions: Read/Execute
.text:00005E7C _text           segment para public 'CODE' use32
.text:00005E7C                 assume cs:_text
.text:00005E7C                 ;org 5E7Ch
.text:00005E7C ; COMDAT (pick any)
.text:00005E7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005E7C
.text:00005E7C ; =============== S U B R O U T I N E =======================================
.text:00005E7C
.text:00005E7C ; Attributes: bp-based frame
.text:00005E7C
.text:00005E7C ; public: struct CDirItem & __thiscall CObjectVector<struct CDirItem>::Back(void)
.text:00005E7C                 public ?Back@?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@XZ
.text:00005E7C ?Back@?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@XZ proc near
.text:00005E7C                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+430p
.text:00005E7C
.text:00005E7C var_4           = dword ptr -4
.text:00005E7C
.text:00005E7C                 push    ebp
.text:00005E7D                 mov     ebp, esp
.text:00005E7F                 push    ecx
.text:00005E80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E87                 mov     [ebp+var_4], ecx
.text:00005E8A                 mov     ecx, [ebp+var_4]
.text:00005E8D                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005E92                 sub     eax, 1
.text:00005E95                 push    eax
.text:00005E96                 mov     ecx, [ebp+var_4]
.text:00005E99                 call    ??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:00005E9E                 add     esp, 4
.text:00005EA1                 cmp     ebp, esp
.text:00005EA3                 call    __RTC_CheckEsp
.text:00005EA8                 mov     esp, ebp
.text:00005EAA                 pop     ebp
.text:00005EAB                 retn
.text:00005EAB ?Back@?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@XZ endp
.text:00005EAB
.text:00005EAB _text           ends
.text:00005EAB
.text:00005EAC ; ===========================================================================
.text:00005EAC
.text:00005EAC ; Segment type: Pure code
.text:00005EAC ; Segment permissions: Read/Execute
.text:00005EAC _text           segment para public 'CODE' use32
.text:00005EAC                 assume cs:_text
.text:00005EAC                 ;org 5EACh
.text:00005EAC ; COMDAT (pick any)
.text:00005EAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005EAC
.text:00005EAC ; =============== S U B R O U T I N E =======================================
.text:00005EAC
.text:00005EAC ; Attributes: bp-based frame
.text:00005EAC
.text:00005EAC ; public: unsigned int __thiscall CObjectVector<struct CDirItem>::Add(struct CDirItem const &)
.text:00005EAC                 public ?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
.text:00005EAC ?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z proc near
.text:00005EAC                                         ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+C1p
.text:00005EAC
.text:00005EAC var_1C          = dword ptr -1Ch
.text:00005EAC var_18          = dword ptr -18h
.text:00005EAC var_14          = dword ptr -14h
.text:00005EAC var_10          = dword ptr -10h
.text:00005EAC var_C           = dword ptr -0Ch
.text:00005EAC var_4           = dword ptr -4
.text:00005EAC arg_0           = dword ptr  8
.text:00005EAC
.text:00005EAC                 push    ebp
.text:00005EAD                 mov     ebp, esp
.text:00005EAF                 push    0FFFFFFFFh
.text:00005EB1                 push    offset __ehhandler$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
.text:00005EB6                 mov     eax, large fs:0
.text:00005EBC                 push    eax
.text:00005EBD                 sub     esp, 10h
.text:00005EC0                 mov     eax, 0CCCCCCCCh
.text:00005EC5                 mov     [ebp+var_1C], eax
.text:00005EC8                 mov     [ebp+var_18], eax
.text:00005ECB                 mov     [ebp+var_14], eax
.text:00005ECE                 mov     [ebp+var_10], eax
.text:00005ED1                 mov     eax, dword ptr ds:___security_cookie
.text:00005ED6                 xor     eax, ebp
.text:00005ED8                 push    eax
.text:00005ED9                 lea     eax, [ebp+var_C]
.text:00005EDC                 mov     large fs:0, eax
.text:00005EE2                 mov     [ebp+var_10], ecx
.text:00005EE5                 push    50h ; 'P'       ; unsigned int
.text:00005EE7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005EEC                 add     esp, 4
.text:00005EEF                 mov     [ebp+var_18], eax
.text:00005EF2                 mov     [ebp+var_4], 0
.text:00005EF9                 cmp     [ebp+var_18], 0
.text:00005EFD                 jz      short loc_5F10
.text:00005EFF                 mov     eax, [ebp+arg_0]
.text:00005F02                 push    eax
.text:00005F03                 mov     ecx, [ebp+var_18]
.text:00005F06                 call    ??0CDirItem@@QAE@ABU0@@Z ; CDirItem::CDirItem(CDirItem const &)
.text:00005F0B                 mov     [ebp+var_1C], eax
.text:00005F0E                 jmp     short loc_5F17
.text:00005F10 ; ---------------------------------------------------------------------------
.text:00005F10
.text:00005F10 loc_5F10:                               ; CODE XREF: CObjectVector<CDirItem>::Add(CDirItem const &)+51j
.text:00005F10                 mov     [ebp+var_1C], 0
.text:00005F17
.text:00005F17 loc_5F17:                               ; CODE XREF: CObjectVector<CDirItem>::Add(CDirItem const &)+62j
.text:00005F17                 mov     ecx, [ebp+var_1C]
.text:00005F1A                 mov     [ebp+var_14], ecx
.text:00005F1D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005F24                 mov     edx, [ebp+var_14]
.text:00005F27                 push    edx
.text:00005F28                 mov     ecx, [ebp+var_10]
.text:00005F2B                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00005F30                 mov     ecx, [ebp+var_C]
.text:00005F33                 mov     large fs:0, ecx
.text:00005F3A                 pop     ecx
.text:00005F3B                 add     esp, 1Ch
.text:00005F3E                 cmp     ebp, esp
.text:00005F40                 call    __RTC_CheckEsp
.text:00005F45                 mov     esp, ebp
.text:00005F47                 pop     ebp
.text:00005F48                 retn    4
.text:00005F48 ?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z endp
.text:00005F48
.text:00005F48 ; ---------------------------------------------------------------------------
.text:00005F4B                 align 4
.text:00005F4B _text           ends
.text:00005F4B
.text$x:00005F4C ; ===========================================================================
.text$x:00005F4C
.text$x:00005F4C ; Segment type: Pure code
.text$x:00005F4C ; Segment permissions: Read/Execute
.text$x:00005F4C _text$x         segment para public 'CODE' use32
.text$x:00005F4C                 assume cs:_text$x
.text$x:00005F4C                 ;org 5F4Ch
.text$x:00005F4C ; COMDAT (pick associative to section at 5EAC)
.text$x:00005F4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F4C
.text$x:00005F4C ; =============== S U B R O U T I N E =======================================
.text$x:00005F4C
.text$x:00005F4C
.text$x:00005F4C __unwindfunclet$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z$0 proc near
.text$x:00005F4C                                         ; DATA XREF: .xdata$x:00005F78o
.text$x:00005F4C                 mov     eax, [ebp-18h]
.text$x:00005F4F                 push    eax             ; void *
.text$x:00005F50                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005F55                 pop     ecx
.text$x:00005F56                 retn
.text$x:00005F56 __unwindfunclet$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z$0 endp
.text$x:00005F56
.text$x:00005F57
.text$x:00005F57 ; =============== S U B R O U T I N E =======================================
.text$x:00005F57
.text$x:00005F57
.text$x:00005F57 __ehhandler$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z proc near
.text$x:00005F57                                         ; DATA XREF: CObjectVector<CDirItem>::Add(CDirItem const &)+5o
.text$x:00005F57
.text$x:00005F57 arg_4           = dword ptr  8
.text$x:00005F57
.text$x:00005F57                 mov     edx, [esp+arg_4]
.text$x:00005F5B                 lea     eax, [edx+0Ch]
.text$x:00005F5E                 mov     ecx, [edx-14h]
.text$x:00005F61                 xor     ecx, eax
.text$x:00005F63                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005F68                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
.text$x:00005F6D                 jmp     ___CxxFrameHandler3
.text$x:00005F6D __ehhandler$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z endp
.text$x:00005F6D
.text$x:00005F6D ; ---------------------------------------------------------------------------
.text$x:00005F72                 align 4
.text$x:00005F72 _text$x         ends
.text$x:00005F72
.xdata$x:00005F74 ; ===========================================================================
.xdata$x:00005F74
.xdata$x:00005F74 ; Segment type: Pure data
.xdata$x:00005F74 ; Segment permissions: Read
.xdata$x:00005F74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005F74                 assume cs:_xdata$x
.xdata$x:00005F74                 ;org 5F74h
.xdata$x:00005F74 ; COMDAT (pick associative to section at 5EAC)
.xdata$x:00005F74 __unwindtable$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z db 0FFh
.xdata$x:00005F74                                         ; DATA XREF: .xdata$x:00005F84o
.xdata$x:00005F75                 db 0FFh
.xdata$x:00005F76                 db 0FFh
.xdata$x:00005F77                 db 0FFh
.xdata$x:00005F78                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z$0
.xdata$x:00005F7C __ehfuncinfo$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z db  22h ; "
.xdata$x:00005F7C                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z+11o
.xdata$x:00005F7D                 db    5
.xdata$x:00005F7E                 db  93h ; ô
.xdata$x:00005F7F                 db  19h
.xdata$x:00005F80                 db    1
.xdata$x:00005F81                 db    0
.xdata$x:00005F82                 db    0
.xdata$x:00005F83                 db    0
.xdata$x:00005F84                 dd offset __unwindtable$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
.xdata$x:00005F88                 db    0
.xdata$x:00005F89                 db    0
.xdata$x:00005F8A                 db    0
.xdata$x:00005F8B                 db    0
.xdata$x:00005F8C                 db    0
.xdata$x:00005F8D                 db    0
.xdata$x:00005F8E                 db    0
.xdata$x:00005F8F                 db    0
.xdata$x:00005F90                 db    0
.xdata$x:00005F91                 db    0
.xdata$x:00005F92                 db    0
.xdata$x:00005F93                 db    0
.xdata$x:00005F94                 db    0
.xdata$x:00005F95                 db    0
.xdata$x:00005F96                 db    0
.xdata$x:00005F97                 db    0
.xdata$x:00005F98                 db    0
.xdata$x:00005F99                 db    0
.xdata$x:00005F9A                 db    0
.xdata$x:00005F9B                 db    0
.xdata$x:00005F9C                 db    1
.xdata$x:00005F9D                 db    0
.xdata$x:00005F9E                 db    0
.xdata$x:00005F9F                 db    0
.xdata$x:00005F9F _xdata$x        ends
.xdata$x:00005F9F
.text:00005FA0 ; ===========================================================================
.text:00005FA0
.text:00005FA0 ; Segment type: Pure code
.text:00005FA0 ; Segment permissions: Read/Execute
.text:00005FA0 _text           segment para public 'CODE' use32
.text:00005FA0                 assume cs:_text
.text:00005FA0                 ;org 5FA0h
.text:00005FA0 ; COMDAT (pick any)
.text:00005FA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005FA0
.text:00005FA0 ; =============== S U B R O U T I N E =======================================
.text:00005FA0
.text:00005FA0 ; Attributes: bp-based frame
.text:00005FA0
.text:00005FA0 ; public: __thiscall CObjectVector<struct CDirItem>::~CObjectVector<struct CDirItem>(void)
.text:00005FA0                 public ??1?$CObjectVector@UCDirItem@@@@QAE@XZ
.text:00005FA0 ??1?$CObjectVector@UCDirItem@@@@QAE@XZ proc near
.text:00005FA0                                         ; CODE XREF: __unwindfunclet$??0CDirItems@@QAE@XZ$3+6j
.text:00005FA0
.text:00005FA0 var_20          = dword ptr -20h
.text:00005FA0 var_1C          = dword ptr -1Ch
.text:00005FA0 var_18          = dword ptr -18h
.text:00005FA0 var_14          = dword ptr -14h
.text:00005FA0 var_10          = dword ptr -10h
.text:00005FA0 var_C           = dword ptr -0Ch
.text:00005FA0 var_4           = dword ptr -4
.text:00005FA0
.text:00005FA0                 push    ebp
.text:00005FA1                 mov     ebp, esp
.text:00005FA3                 push    0FFFFFFFFh
.text:00005FA5                 push    offset __ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
.text:00005FAA                 mov     eax, large fs:0
.text:00005FB0                 push    eax
.text:00005FB1                 sub     esp, 14h
.text:00005FB4                 mov     eax, 0CCCCCCCCh
.text:00005FB9                 mov     [ebp+var_20], eax
.text:00005FBC                 mov     [ebp+var_1C], eax
.text:00005FBF                 mov     [ebp+var_18], eax
.text:00005FC2                 mov     [ebp+var_14], eax
.text:00005FC5                 mov     [ebp+var_10], eax
.text:00005FC8                 mov     eax, dword ptr ds:___security_cookie
.text:00005FCD                 xor     eax, ebp
.text:00005FCF                 push    eax
.text:00005FD0                 lea     eax, [ebp+var_C]
.text:00005FD3                 mov     large fs:0, eax
.text:00005FD9                 mov     [ebp+var_10], ecx
.text:00005FDC                 mov     [ebp+var_4], 0
.text:00005FE3                 mov     ecx, [ebp+var_10]
.text:00005FE6                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005FEB                 mov     [ebp+var_14], eax
.text:00005FEE
.text:00005FEE loc_5FEE:                               ; CODE XREF: CObjectVector<CDirItem>::~CObjectVector<CDirItem>(void):loc_6030j
.text:00005FEE                 cmp     [ebp+var_14], 0
.text:00005FF2                 jz      short loc_6032
.text:00005FF4                 mov     eax, [ebp+var_14]
.text:00005FF7                 sub     eax, 1
.text:00005FFA                 mov     [ebp+var_14], eax
.text:00005FFD                 mov     ecx, [ebp+var_14]
.text:00006000                 push    ecx
.text:00006001                 mov     ecx, [ebp+var_10]
.text:00006004                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006009                 mov     edx, [eax]
.text:0000600B                 mov     [ebp+var_1C], edx
.text:0000600E                 mov     eax, [ebp+var_1C]
.text:00006011                 mov     [ebp+var_18], eax
.text:00006014                 cmp     [ebp+var_18], 0
.text:00006018                 jz      short loc_6029
.text:0000601A                 push    1
.text:0000601C                 mov     ecx, [ebp+var_18]
.text:0000601F                 call    ??_GCDirItem@@QAEPAXI@Z ; CDirItem::`scalar deleting destructor'(uint)
.text:00006024                 mov     [ebp+var_20], eax
.text:00006027                 jmp     short loc_6030
.text:00006029 ; ---------------------------------------------------------------------------
.text:00006029
.text:00006029 loc_6029:                               ; CODE XREF: CObjectVector<CDirItem>::~CObjectVector<CDirItem>(void)+78j
.text:00006029                 mov     [ebp+var_20], 0
.text:00006030
.text:00006030 loc_6030:                               ; CODE XREF: CObjectVector<CDirItem>::~CObjectVector<CDirItem>(void)+87j
.text:00006030                 jmp     short loc_5FEE
.text:00006032 ; ---------------------------------------------------------------------------
.text:00006032
.text:00006032 loc_6032:                               ; CODE XREF: CObjectVector<CDirItem>::~CObjectVector<CDirItem>(void)+52j
.text:00006032                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006039                 mov     ecx, [ebp+var_10]
.text:0000603C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006041                 mov     ecx, [ebp+var_C]
.text:00006044                 mov     large fs:0, ecx
.text:0000604B                 pop     ecx
.text:0000604C                 add     esp, 20h
.text:0000604F                 cmp     ebp, esp
.text:00006051                 call    __RTC_CheckEsp
.text:00006056                 mov     esp, ebp
.text:00006058                 pop     ebp
.text:00006059                 retn
.text:00006059 ??1?$CObjectVector@UCDirItem@@@@QAE@XZ endp
.text:00006059
.text:00006059 ; ---------------------------------------------------------------------------
.text:0000605A                 align 4
.text:0000605A _text           ends
.text:0000605A
.text$x:0000605C ; ===========================================================================
.text$x:0000605C
.text$x:0000605C ; Segment type: Pure code
.text$x:0000605C ; Segment permissions: Read/Execute
.text$x:0000605C _text$x         segment para public 'CODE' use32
.text$x:0000605C                 assume cs:_text$x
.text$x:0000605C                 ;org 605Ch
.text$x:0000605C ; COMDAT (pick associative to section at 5FA0)
.text$x:0000605C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000605C
.text$x:0000605C ; =============== S U B R O U T I N E =======================================
.text$x:0000605C
.text$x:0000605C
.text$x:0000605C __unwindfunclet$??1?$CObjectVector@UCDirItem@@@@QAE@XZ$0 proc near
.text$x:0000605C                                         ; DATA XREF: .xdata$x:00006084o
.text$x:0000605C                 mov     ecx, [ebp-10h]
.text$x:0000605F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000605F __unwindfunclet$??1?$CObjectVector@UCDirItem@@@@QAE@XZ$0 endp
.text$x:0000605F
.text$x:00006064
.text$x:00006064 ; =============== S U B R O U T I N E =======================================
.text$x:00006064
.text$x:00006064
.text$x:00006064 __ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ proc near
.text$x:00006064                                         ; DATA XREF: CObjectVector<CDirItem>::~CObjectVector<CDirItem>(void)+5o
.text$x:00006064
.text$x:00006064 arg_4           = dword ptr  8
.text$x:00006064
.text$x:00006064                 mov     edx, [esp+arg_4]
.text$x:00006068                 lea     eax, [edx+0Ch]
.text$x:0000606B                 mov     ecx, [edx-18h]
.text$x:0000606E                 xor     ecx, eax
.text$x:00006070                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006075                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
.text$x:0000607A                 jmp     ___CxxFrameHandler3
.text$x:0000607A __ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ endp
.text$x:0000607A
.text$x:0000607A ; ---------------------------------------------------------------------------
.text$x:0000607F                 align 10h
.text$x:0000607F _text$x         ends
.text$x:0000607F
.xdata$x:00006080 ; ===========================================================================
.xdata$x:00006080
.xdata$x:00006080 ; Segment type: Pure data
.xdata$x:00006080 ; Segment permissions: Read
.xdata$x:00006080 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006080                 assume cs:_xdata$x
.xdata$x:00006080                 ;org 6080h
.xdata$x:00006080 ; COMDAT (pick associative to section at 5FA0)
.xdata$x:00006080 __unwindtable$??1?$CObjectVector@UCDirItem@@@@QAE@XZ db 0FFh
.xdata$x:00006080                                         ; DATA XREF: .xdata$x:00006090o
.xdata$x:00006081                 db 0FFh
.xdata$x:00006082                 db 0FFh
.xdata$x:00006083                 db 0FFh
.xdata$x:00006084                 dd offset __unwindfunclet$??1?$CObjectVector@UCDirItem@@@@QAE@XZ$0
.xdata$x:00006088 __ehfuncinfo$??1?$CObjectVector@UCDirItem@@@@QAE@XZ db  22h ; "
.xdata$x:00006088                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ+11o
.xdata$x:00006089                 db    5
.xdata$x:0000608A                 db  93h ; ô
.xdata$x:0000608B                 db  19h
.xdata$x:0000608C                 db    1
.xdata$x:0000608D                 db    0
.xdata$x:0000608E                 db    0
.xdata$x:0000608F                 db    0
.xdata$x:00006090                 dd offset __unwindtable$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
.xdata$x:00006094                 db    0
.xdata$x:00006095                 db    0
.xdata$x:00006096                 db    0
.xdata$x:00006097                 db    0
.xdata$x:00006098                 db    0
.xdata$x:00006099                 db    0
.xdata$x:0000609A                 db    0
.xdata$x:0000609B                 db    0
.xdata$x:0000609C                 db    0
.xdata$x:0000609D                 db    0
.xdata$x:0000609E                 db    0
.xdata$x:0000609F                 db    0
.xdata$x:000060A0                 db    0
.xdata$x:000060A1                 db    0
.xdata$x:000060A2                 db    0
.xdata$x:000060A3                 db    0
.xdata$x:000060A4                 db    0
.xdata$x:000060A5                 db    0
.xdata$x:000060A6                 db    0
.xdata$x:000060A7                 db    0
.xdata$x:000060A8                 db    1
.xdata$x:000060A9                 db    0
.xdata$x:000060AA                 db    0
.xdata$x:000060AB                 db    0
.xdata$x:000060AB _xdata$x        ends
.xdata$x:000060AB
.text:000060AC ; ===========================================================================
.text:000060AC
.text:000060AC ; Segment type: Pure code
.text:000060AC ; Segment permissions: Read/Execute
.text:000060AC _text           segment para public 'CODE' use32
.text:000060AC                 assume cs:_text
.text:000060AC                 ;org 60ACh
.text:000060AC ; COMDAT (pick any)
.text:000060AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060AC
.text:000060AC ; =============== S U B R O U T I N E =======================================
.text:000060AC
.text:000060AC ; Attributes: bp-based frame
.text:000060AC
.text:000060AC ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:000060AC                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:000060AC ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+A9p
.text:000060AC
.text:000060AC var_4           = dword ptr -4
.text:000060AC
.text:000060AC                 push    ebp
.text:000060AD                 mov     ebp, esp
.text:000060AF                 push    ecx
.text:000060B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060B7                 mov     [ebp+var_4], ecx
.text:000060BA                 mov     eax, [ebp+var_4]
.text:000060BD                 mov     dword ptr [eax], 0
.text:000060C3                 mov     ecx, [ebp+var_4]
.text:000060C6                 mov     dword ptr [ecx+4], 0
.text:000060CD                 mov     edx, [ebp+var_4]
.text:000060D0                 mov     dword ptr [edx+8], 0
.text:000060D7                 mov     eax, [ebp+var_4]
.text:000060DA                 mov     esp, ebp
.text:000060DC                 pop     ebp
.text:000060DD                 retn
.text:000060DD ??0?$CRecordVector@_N@@QAE@XZ endp
.text:000060DD
.text:000060DD ; ---------------------------------------------------------------------------
.text:000060DE                 align 10h
.text:000060DE _text           ends
.text:000060DE
.text:000060E0 ; ===========================================================================
.text:000060E0
.text:000060E0 ; Segment type: Pure code
.text:000060E0 ; Segment permissions: Read/Execute
.text:000060E0 _text           segment para public 'CODE' use32
.text:000060E0                 assume cs:_text
.text:000060E0                 ;org 60E0h
.text:000060E0 ; COMDAT (pick any)
.text:000060E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060E0
.text:000060E0 ; =============== S U B R O U T I N E =======================================
.text:000060E0
.text:000060E0 ; Attributes: bp-based frame
.text:000060E0
.text:000060E0 ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:000060E0                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:000060E0 ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:000060E0                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+647p
.text:000060E0                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+7A1p
.text:000060E0
.text:000060E0 var_4           = dword ptr -4
.text:000060E0
.text:000060E0                 push    ebp
.text:000060E1                 mov     ebp, esp
.text:000060E3                 push    ecx
.text:000060E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060EB                 mov     [ebp+var_4], ecx
.text:000060EE                 mov     eax, [ebp+var_4]
.text:000060F1                 mov     eax, [eax+4]
.text:000060F4                 mov     esp, ebp
.text:000060F6                 pop     ebp
.text:000060F7                 retn
.text:000060F7 ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:000060F7
.text:000060F7 _text           ends
.text:000060F7
.text:000060F8 ; ===========================================================================
.text:000060F8
.text:000060F8 ; Segment type: Pure code
.text:000060F8 ; Segment permissions: Read/Execute
.text:000060F8 _text           segment para public 'CODE' use32
.text:000060F8                 assume cs:_text
.text:000060F8                 ;org 60F8h
.text:000060F8 ; COMDAT (pick any)
.text:000060F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060F8
.text:000060F8 ; =============== S U B R O U T I N E =======================================
.text:000060F8
.text:000060F8 ; Attributes: bp-based frame
.text:000060F8
.text:000060F8 ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000060F8                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:000060F8 ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+20Fp
.text:000060F8                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+2D5p ...
.text:000060F8
.text:000060F8 var_8           = dword ptr -8
.text:000060F8 var_4           = dword ptr -4
.text:000060F8
.text:000060F8                 push    ebp
.text:000060F9                 mov     ebp, esp
.text:000060FB                 sub     esp, 8
.text:000060FE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006105                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000610C                 mov     [ebp+var_4], ecx
.text:0000610F                 mov     eax, [ebp+var_4]
.text:00006112                 mov     ecx, [eax]
.text:00006114                 mov     [ebp+var_8], ecx
.text:00006117                 mov     edx, [ebp+var_8]
.text:0000611A                 push    edx             ; void *
.text:0000611B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006120                 add     esp, 4
.text:00006123                 add     esp, 8
.text:00006126                 cmp     ebp, esp
.text:00006128                 call    __RTC_CheckEsp
.text:0000612D                 mov     esp, ebp
.text:0000612F                 pop     ebp
.text:00006130                 retn
.text:00006130 ??1?$CRecordVector@_N@@QAE@XZ endp
.text:00006130
.text:00006130 ; ---------------------------------------------------------------------------
.text:00006131                 align 4
.text:00006131 _text           ends
.text:00006131
.text:00006134 ; ===========================================================================
.text:00006134
.text:00006134 ; Segment type: Pure code
.text:00006134 ; Segment permissions: Read/Execute
.text:00006134 _text           segment para public 'CODE' use32
.text:00006134                 assume cs:_text
.text:00006134                 ;org 6134h
.text:00006134 ; COMDAT (pick any)
.text:00006134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006134
.text:00006134 ; =============== S U B R O U T I N E =======================================
.text:00006134
.text:00006134 ; Attributes: bp-based frame
.text:00006134
.text:00006134 ; public: unsigned int __thiscall CRecordVector<bool>::Add(bool)
.text:00006134                 public ?Add@?$CRecordVector@_N@@QAEI_N@Z
.text:00006134 ?Add@?$CRecordVector@_N@@QAEI_N@Z proc near
.text:00006134                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+676p
.text:00006134
.text:00006134 var_8           = dword ptr -8
.text:00006134 var_4           = dword ptr -4
.text:00006134 arg_0           = byte ptr  8
.text:00006134
.text:00006134                 push    ebp
.text:00006135                 mov     ebp, esp
.text:00006137                 sub     esp, 8
.text:0000613A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006141                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006148                 mov     [ebp+var_4], ecx
.text:0000614B                 mov     ecx, [ebp+var_4]
.text:0000614E                 call    ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition(void)
.text:00006153                 mov     eax, [ebp+var_4]
.text:00006156                 mov     ecx, [eax]
.text:00006158                 mov     edx, [ebp+var_4]
.text:0000615B                 mov     eax, [edx+4]
.text:0000615E                 mov     dl, [ebp+arg_0]
.text:00006161                 mov     [ecx+eax], dl
.text:00006164                 mov     eax, [ebp+var_4]
.text:00006167                 mov     ecx, [eax+4]
.text:0000616A                 mov     [ebp+var_8], ecx
.text:0000616D                 mov     edx, [ebp+var_4]
.text:00006170                 mov     eax, [edx+4]
.text:00006173                 add     eax, 1
.text:00006176                 mov     ecx, [ebp+var_4]
.text:00006179                 mov     [ecx+4], eax
.text:0000617C                 mov     eax, [ebp+var_8]
.text:0000617F                 add     esp, 8
.text:00006182                 cmp     ebp, esp
.text:00006184                 call    __RTC_CheckEsp
.text:00006189                 mov     esp, ebp
.text:0000618B                 pop     ebp
.text:0000618C                 retn    4
.text:0000618C ?Add@?$CRecordVector@_N@@QAEI_N@Z endp
.text:0000618C
.text:0000618C ; ---------------------------------------------------------------------------
.text:0000618F                 align 10h
.text:0000618F _text           ends
.text:0000618F
.text:00006190 ; ===========================================================================
.text:00006190
.text:00006190 ; Segment type: Pure code
.text:00006190 ; Segment permissions: Read/Execute
.text:00006190 _text           segment para public 'CODE' use32
.text:00006190                 assume cs:_text
.text:00006190                 ;org 6190h
.text:00006190 ; COMDAT (pick any)
.text:00006190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006190
.text:00006190 ; =============== S U B R O U T I N E =======================================
.text:00006190
.text:00006190 ; Attributes: bp-based frame
.text:00006190
.text:00006190 ; public: bool & __thiscall CRecordVector<bool>::operator[](unsigned int)
.text:00006190                 public ??A?$CRecordVector@_N@@QAEAA_NI@Z
.text:00006190 ??A?$CRecordVector@_N@@QAEAA_NI@Z proc near
.text:00006190                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+687p
.text:00006190                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+7B2p
.text:00006190
.text:00006190 var_4           = dword ptr -4
.text:00006190 arg_0           = dword ptr  8
.text:00006190
.text:00006190                 push    ebp
.text:00006191                 mov     ebp, esp
.text:00006193                 push    ecx
.text:00006194                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000619B                 mov     [ebp+var_4], ecx
.text:0000619E                 mov     eax, [ebp+var_4]
.text:000061A1                 mov     eax, [eax]
.text:000061A3                 add     eax, [ebp+arg_0]
.text:000061A6                 mov     esp, ebp
.text:000061A8                 pop     ebp
.text:000061A9                 retn    4
.text:000061A9 ??A?$CRecordVector@_N@@QAEAA_NI@Z endp
.text:000061A9
.text:000061A9 _text           ends
.text:000061A9
.text:000061AC ; ===========================================================================
.text:000061AC
.text:000061AC ; Segment type: Pure code
.text:000061AC ; Segment permissions: Read/Execute
.text:000061AC _text           segment para public 'CODE' use32
.text:000061AC                 assume cs:_text
.text:000061AC                 ;org 61ACh
.text:000061AC ; COMDAT (pick any)
.text:000061AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061AC
.text:000061AC ; =============== S U B R O U T I N E =======================================
.text:000061AC
.text:000061AC ; Attributes: bp-based frame
.text:000061AC
.text:000061AC ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:000061AC                 public ??_GUString@@QAEPAXI@Z
.text:000061AC ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+7Fp
.text:000061AC                                         ; CObjectVector<UString>::DeleteBack(void)+44p ...
.text:000061AC
.text:000061AC var_4           = dword ptr -4
.text:000061AC arg_0           = dword ptr  8
.text:000061AC
.text:000061AC                 push    ebp
.text:000061AD                 mov     ebp, esp
.text:000061AF                 push    ecx
.text:000061B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061B7                 mov     [ebp+var_4], ecx
.text:000061BA                 mov     ecx, [ebp+var_4] ; this
.text:000061BD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000061C2                 mov     eax, [ebp+arg_0]
.text:000061C5                 and     eax, 1
.text:000061C8                 jz      short loc_61D6
.text:000061CA                 mov     ecx, [ebp+var_4]
.text:000061CD                 push    ecx             ; void *
.text:000061CE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000061D3                 add     esp, 4
.text:000061D6
.text:000061D6 loc_61D6:                               ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:000061D6                 mov     eax, [ebp+var_4]
.text:000061D9                 add     esp, 4
.text:000061DC                 cmp     ebp, esp
.text:000061DE                 call    __RTC_CheckEsp
.text:000061E3                 mov     esp, ebp
.text:000061E5                 pop     ebp
.text:000061E6                 retn    4
.text:000061E6 ??_GUString@@QAEPAXI@Z endp
.text:000061E6
.text:000061E6 ; ---------------------------------------------------------------------------
.text:000061E9                 align 4
.text:000061E9 _text           ends
.text:000061E9
.text:000061EC ; ===========================================================================
.text:000061EC
.text:000061EC ; Segment type: Pure code
.text:000061EC ; Segment permissions: Read/Execute
.text:000061EC _text           segment para public 'CODE' use32
.text:000061EC                 assume cs:_text
.text:000061EC                 ;org 61ECh
.text:000061EC ; COMDAT (pick any)
.text:000061EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061EC
.text:000061EC ; =============== S U B R O U T I N E =======================================
.text:000061EC
.text:000061EC ; Attributes: bp-based frame
.text:000061EC
.text:000061EC ; public: void * __thiscall CBuffer<unsigned char>::`scalar deleting destructor'(unsigned int)
.text:000061EC                 public ??_G?$CBuffer@E@@QAEPAXI@Z
.text:000061EC ??_G?$CBuffer@E@@QAEPAXI@Z proc near    ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+7Fp
.text:000061EC
.text:000061EC var_4           = dword ptr -4
.text:000061EC arg_0           = dword ptr  8
.text:000061EC
.text:000061EC                 push    ebp
.text:000061ED                 mov     ebp, esp
.text:000061EF                 push    ecx
.text:000061F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061F7                 mov     [ebp+var_4], ecx
.text:000061FA                 mov     ecx, [ebp+var_4]
.text:000061FD                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00006202                 mov     eax, [ebp+arg_0]
.text:00006205                 and     eax, 1
.text:00006208                 jz      short loc_6216
.text:0000620A                 mov     ecx, [ebp+var_4]
.text:0000620D                 push    ecx             ; void *
.text:0000620E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006213                 add     esp, 4
.text:00006216
.text:00006216 loc_6216:                               ; CODE XREF: CBuffer<uchar>::`scalar deleting destructor'(uint)+1Cj
.text:00006216                 mov     eax, [ebp+var_4]
.text:00006219                 add     esp, 4
.text:0000621C                 cmp     ebp, esp
.text:0000621E                 call    __RTC_CheckEsp
.text:00006223                 mov     esp, ebp
.text:00006225                 pop     ebp
.text:00006226                 retn    4
.text:00006226 ??_G?$CBuffer@E@@QAEPAXI@Z endp
.text:00006226
.text:00006226 ; ---------------------------------------------------------------------------
.text:00006229                 align 4
.text:00006229 _text           ends
.text:00006229
.text:0000622C ; ===========================================================================
.text:0000622C
.text:0000622C ; Segment type: Pure code
.text:0000622C ; Segment permissions: Read/Execute
.text:0000622C _text           segment para public 'CODE' use32
.text:0000622C                 assume cs:_text
.text:0000622C                 ;org 622Ch
.text:0000622C ; COMDAT (pick any)
.text:0000622C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000622C
.text:0000622C ; =============== S U B R O U T I N E =======================================
.text:0000622C
.text:0000622C ; Attributes: bp-based frame
.text:0000622C
.text:0000622C ; public: __thiscall CDirItem::CDirItem(struct CDirItem const &)
.text:0000622C                 public ??0CDirItem@@QAE@ABU0@@Z
.text:0000622C ??0CDirItem@@QAE@ABU0@@Z proc near      ; CODE XREF: CObjectVector<CDirItem>::Add(CDirItem const &)+5Ap
.text:0000622C
.text:0000622C var_10          = dword ptr -10h
.text:0000622C var_C           = dword ptr -0Ch
.text:0000622C var_4           = dword ptr -4
.text:0000622C arg_0           = dword ptr  8
.text:0000622C
.text:0000622C                 push    ebp
.text:0000622D                 mov     ebp, esp
.text:0000622F                 push    0FFFFFFFFh
.text:00006231                 push    offset __ehhandler$??0CDirItem@@QAE@ABU0@@Z
.text:00006236                 mov     eax, large fs:0
.text:0000623C                 push    eax
.text:0000623D                 push    ecx
.text:0000623E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006245                 mov     eax, dword ptr ds:___security_cookie
.text:0000624A                 xor     eax, ebp
.text:0000624C                 push    eax
.text:0000624D                 lea     eax, [ebp+var_C]
.text:00006250                 mov     large fs:0, eax
.text:00006256                 mov     [ebp+var_10], ecx
.text:00006259                 mov     eax, [ebp+var_10]
.text:0000625C                 mov     ecx, [ebp+arg_0]
.text:0000625F                 mov     edx, [ecx]
.text:00006261                 mov     [eax], edx
.text:00006263                 mov     ecx, [ecx+4]
.text:00006266                 mov     [eax+4], ecx
.text:00006269                 mov     edx, [ebp+arg_0]
.text:0000626C                 mov     eax, [edx+8]
.text:0000626F                 mov     ecx, [edx+0Ch]
.text:00006272                 mov     edx, [ebp+var_10]
.text:00006275                 mov     [edx+8], eax
.text:00006278                 mov     [edx+0Ch], ecx
.text:0000627B                 mov     eax, [ebp+arg_0]
.text:0000627E                 mov     ecx, [eax+10h]
.text:00006281                 mov     edx, [eax+14h]
.text:00006284                 mov     eax, [ebp+var_10]
.text:00006287                 mov     [eax+10h], ecx
.text:0000628A                 mov     [eax+14h], edx
.text:0000628D                 mov     ecx, [ebp+arg_0]
.text:00006290                 mov     edx, [ecx+18h]
.text:00006293                 mov     eax, [ecx+1Ch]
.text:00006296                 mov     ecx, [ebp+var_10]
.text:00006299                 mov     [ecx+18h], edx
.text:0000629C                 mov     [ecx+1Ch], eax
.text:0000629F                 mov     edx, [ebp+arg_0]
.text:000062A2                 add     edx, 20h ; ' '
.text:000062A5                 push    edx
.text:000062A6                 mov     ecx, [ebp+var_10]
.text:000062A9                 add     ecx, 20h ; ' '
.text:000062AC                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000062B1                 mov     [ebp+var_4], 0
.text:000062B8                 mov     eax, [ebp+arg_0]
.text:000062BB                 add     eax, 2Ch ; ','
.text:000062BE                 push    eax
.text:000062BF                 mov     ecx, [ebp+var_10]
.text:000062C2                 add     ecx, 2Ch ; ','
.text:000062C5                 call    ??0?$CBuffer@E@@QAE@ABV0@@Z ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)
.text:000062CA                 mov     byte ptr [ebp+var_4], 1
.text:000062CE                 mov     ecx, [ebp+arg_0]
.text:000062D1                 add     ecx, 34h ; '4'
.text:000062D4                 push    ecx
.text:000062D5                 mov     ecx, [ebp+var_10]
.text:000062D8                 add     ecx, 34h ; '4'
.text:000062DB                 call    ??0?$CBuffer@E@@QAE@ABV0@@Z ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)
.text:000062E0                 mov     edx, [ebp+var_10]
.text:000062E3                 mov     eax, [ebp+arg_0]
.text:000062E6                 mov     ecx, [eax+3Ch]
.text:000062E9                 mov     [edx+3Ch], ecx
.text:000062EC                 mov     edx, [ebp+var_10]
.text:000062EF                 mov     eax, [ebp+arg_0]
.text:000062F2                 mov     ecx, [eax+40h]
.text:000062F5                 mov     [edx+40h], ecx
.text:000062F8                 mov     edx, [ebp+var_10]
.text:000062FB                 mov     eax, [ebp+arg_0]
.text:000062FE                 mov     ecx, [eax+44h]
.text:00006301                 mov     [edx+44h], ecx
.text:00006304                 mov     edx, [ebp+var_10]
.text:00006307                 mov     eax, [ebp+arg_0]
.text:0000630A                 mov     ecx, [eax+48h]
.text:0000630D                 mov     [edx+48h], ecx
.text:00006310                 mov     edx, [ebp+var_10]
.text:00006313                 mov     eax, [ebp+arg_0]
.text:00006316                 mov     cl, [eax+4Ch]
.text:00006319                 mov     [edx+4Ch], cl
.text:0000631C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006323                 mov     eax, [ebp+var_10]
.text:00006326                 mov     ecx, [ebp+var_C]
.text:00006329                 mov     large fs:0, ecx
.text:00006330                 pop     ecx
.text:00006331                 add     esp, 10h
.text:00006334                 cmp     ebp, esp
.text:00006336                 call    __RTC_CheckEsp
.text:0000633B                 mov     esp, ebp
.text:0000633D                 pop     ebp
.text:0000633E                 retn    4
.text:0000633E ??0CDirItem@@QAE@ABU0@@Z endp
.text:0000633E
.text:0000633E ; ---------------------------------------------------------------------------
.text:00006341                 align 4
.text:00006341 _text           ends
.text:00006341
.text$x:00006344 ; ===========================================================================
.text$x:00006344
.text$x:00006344 ; Segment type: Pure code
.text$x:00006344 ; Segment permissions: Read/Execute
.text$x:00006344 _text$x         segment para public 'CODE' use32
.text$x:00006344                 assume cs:_text$x
.text$x:00006344                 ;org 6344h
.text$x:00006344 ; COMDAT (pick associative to section at 622C)
.text$x:00006344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006344
.text$x:00006344 ; =============== S U B R O U T I N E =======================================
.text$x:00006344
.text$x:00006344
.text$x:00006344 __unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$0 proc near
.text$x:00006344                                         ; DATA XREF: .xdata$x:0000637Co
.text$x:00006344                 mov     ecx, [ebp-10h]
.text$x:00006347                 add     ecx, 20h ; ' '  ; this
.text$x:0000634A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000634A __unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$0 endp
.text$x:0000634A
.text$x:0000634F
.text$x:0000634F ; =============== S U B R O U T I N E =======================================
.text$x:0000634F
.text$x:0000634F
.text$x:0000634F __unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$1 proc near
.text$x:0000634F                                         ; DATA XREF: .xdata$x:00006384o
.text$x:0000634F                 mov     ecx, [ebp-10h]
.text$x:00006352                 add     ecx, 2Ch ; ','
.text$x:00006355                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:00006355 __unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$1 endp
.text$x:00006355
.text$x:0000635A
.text$x:0000635A ; =============== S U B R O U T I N E =======================================
.text$x:0000635A
.text$x:0000635A
.text$x:0000635A __ehhandler$??0CDirItem@@QAE@ABU0@@Z proc near
.text$x:0000635A                                         ; DATA XREF: CDirItem::CDirItem(CDirItem const &)+5o
.text$x:0000635A
.text$x:0000635A arg_4           = dword ptr  8
.text$x:0000635A
.text$x:0000635A                 mov     edx, [esp+arg_4]
.text$x:0000635E                 lea     eax, [edx+0Ch]
.text$x:00006361                 mov     ecx, [edx-8]
.text$x:00006364                 xor     ecx, eax
.text$x:00006366                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000636B                 mov     eax, offset __ehfuncinfo$??0CDirItem@@QAE@ABU0@@Z
.text$x:00006370                 jmp     ___CxxFrameHandler3
.text$x:00006370 __ehhandler$??0CDirItem@@QAE@ABU0@@Z endp
.text$x:00006370
.text$x:00006370 ; ---------------------------------------------------------------------------
.text$x:00006375                 align 4
.text$x:00006375 _text$x         ends
.text$x:00006375
.xdata$x:00006378 ; ===========================================================================
.xdata$x:00006378
.xdata$x:00006378 ; Segment type: Pure data
.xdata$x:00006378 ; Segment permissions: Read
.xdata$x:00006378 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006378                 assume cs:_xdata$x
.xdata$x:00006378                 ;org 6378h
.xdata$x:00006378 ; COMDAT (pick associative to section at 622C)
.xdata$x:00006378 __unwindtable$??0CDirItem@@QAE@ABU0@@Z db 0FFh
.xdata$x:00006378                                         ; DATA XREF: .xdata$x:00006390o
.xdata$x:00006379                 db 0FFh
.xdata$x:0000637A                 db 0FFh
.xdata$x:0000637B                 db 0FFh
.xdata$x:0000637C                 dd offset __unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$0
.xdata$x:00006380                 db    0
.xdata$x:00006381                 db    0
.xdata$x:00006382                 db    0
.xdata$x:00006383                 db    0
.xdata$x:00006384                 dd offset __unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$1
.xdata$x:00006388 __ehfuncinfo$??0CDirItem@@QAE@ABU0@@Z db  22h ; "
.xdata$x:00006388                                         ; DATA XREF: __ehhandler$??0CDirItem@@QAE@ABU0@@Z+11o
.xdata$x:00006389                 db    5
.xdata$x:0000638A                 db  93h ; ô
.xdata$x:0000638B                 db  19h
.xdata$x:0000638C                 db    2
.xdata$x:0000638D                 db    0
.xdata$x:0000638E                 db    0
.xdata$x:0000638F                 db    0
.xdata$x:00006390                 dd offset __unwindtable$??0CDirItem@@QAE@ABU0@@Z
.xdata$x:00006394                 db    0
.xdata$x:00006395                 db    0
.xdata$x:00006396                 db    0
.xdata$x:00006397                 db    0
.xdata$x:00006398                 db    0
.xdata$x:00006399                 db    0
.xdata$x:0000639A                 db    0
.xdata$x:0000639B                 db    0
.xdata$x:0000639C                 db    0
.xdata$x:0000639D                 db    0
.xdata$x:0000639E                 db    0
.xdata$x:0000639F                 db    0
.xdata$x:000063A0                 db    0
.xdata$x:000063A1                 db    0
.xdata$x:000063A2                 db    0
.xdata$x:000063A3                 db    0
.xdata$x:000063A4                 db    0
.xdata$x:000063A5                 db    0
.xdata$x:000063A6                 db    0
.xdata$x:000063A7                 db    0
.xdata$x:000063A8                 db    1
.xdata$x:000063A9                 db    0
.xdata$x:000063AA                 db    0
.xdata$x:000063AB                 db    0
.xdata$x:000063AB _xdata$x        ends
.xdata$x:000063AB
.text:000063AC ; ===========================================================================
.text:000063AC
.text:000063AC ; Segment type: Pure code
.text:000063AC ; Segment permissions: Read/Execute
.text:000063AC _text           segment para public 'CODE' use32
.text:000063AC                 assume cs:_text
.text:000063AC                 ;org 63ACh
.text:000063AC ; COMDAT (pick any)
.text:000063AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000063AC
.text:000063AC ; =============== S U B R O U T I N E =======================================
.text:000063AC
.text:000063AC ; Attributes: bp-based frame
.text:000063AC
.text:000063AC ; public: void * __thiscall CDirItem::`scalar deleting destructor'(unsigned int)
.text:000063AC                 public ??_GCDirItem@@QAEPAXI@Z
.text:000063AC ??_GCDirItem@@QAEPAXI@Z proc near       ; CODE XREF: CObjectVector<CDirItem>::~CObjectVector<CDirItem>(void)+7Fp
.text:000063AC
.text:000063AC var_4           = dword ptr -4
.text:000063AC arg_0           = dword ptr  8
.text:000063AC
.text:000063AC                 push    ebp
.text:000063AD                 mov     ebp, esp
.text:000063AF                 push    ecx
.text:000063B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063B7                 mov     [ebp+var_4], ecx
.text:000063BA                 mov     ecx, [ebp+var_4] ; this
.text:000063BD                 call    ??1CDirItem@@QAE@XZ ; CDirItem::~CDirItem(void)
.text:000063C2                 mov     eax, [ebp+arg_0]
.text:000063C5                 and     eax, 1
.text:000063C8                 jz      short loc_63D6
.text:000063CA                 mov     ecx, [ebp+var_4]
.text:000063CD                 push    ecx             ; void *
.text:000063CE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000063D3                 add     esp, 4
.text:000063D6
.text:000063D6 loc_63D6:                               ; CODE XREF: CDirItem::`scalar deleting destructor'(uint)+1Cj
.text:000063D6                 mov     eax, [ebp+var_4]
.text:000063D9                 add     esp, 4
.text:000063DC                 cmp     ebp, esp
.text:000063DE                 call    __RTC_CheckEsp
.text:000063E3                 mov     esp, ebp
.text:000063E5                 pop     ebp
.text:000063E6                 retn    4
.text:000063E6 ??_GCDirItem@@QAEPAXI@Z endp
.text:000063E6
.text:000063E6 ; ---------------------------------------------------------------------------
.text:000063E9                 align 4
.text:000063E9 _text           ends
.text:000063E9
.text:000063EC ; ===========================================================================
.text:000063EC
.text:000063EC ; Segment type: Pure code
.text:000063EC ; Segment permissions: Read/Execute
.text:000063EC _text           segment para public 'CODE' use32
.text:000063EC                 assume cs:_text
.text:000063EC                 ;org 63ECh
.text:000063EC ; COMDAT (pick any)
.text:000063EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000063EC
.text:000063EC ; =============== S U B R O U T I N E =======================================
.text:000063EC
.text:000063EC ; Attributes: bp-based frame
.text:000063EC
.text:000063EC ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000063EC                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000063EC ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000063EC                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(void)+11p
.text:000063EC                                         ; CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+42p ...
.text:000063EC
.text:000063EC var_4           = dword ptr -4
.text:000063EC
.text:000063EC                 push    ebp
.text:000063ED                 mov     ebp, esp
.text:000063EF                 push    ecx
.text:000063F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063F7                 mov     [ebp+var_4], ecx
.text:000063FA                 mov     eax, [ebp+var_4]
.text:000063FD                 mov     dword ptr [eax], 0
.text:00006403                 mov     ecx, [ebp+var_4]
.text:00006406                 mov     dword ptr [ecx+4], 0
.text:0000640D                 mov     edx, [ebp+var_4]
.text:00006410                 mov     dword ptr [edx+8], 0
.text:00006417                 mov     eax, [ebp+var_4]
.text:0000641A                 mov     esp, ebp
.text:0000641C                 pop     ebp
.text:0000641D                 retn
.text:0000641D ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:0000641D
.text:0000641D ; ---------------------------------------------------------------------------
.text:0000641E                 align 10h
.text:0000641E _text           ends
.text:0000641E
.text:00006420 ; ===========================================================================
.text:00006420
.text:00006420 ; Segment type: Pure code
.text:00006420 ; Segment permissions: Read/Execute
.text:00006420 _text           segment para public 'CODE' use32
.text:00006420                 assume cs:_text
.text:00006420                 ;org 6420h
.text:00006420 ; COMDAT (pick any)
.text:00006420                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006420
.text:00006420 ; =============== S U B R O U T I N E =======================================
.text:00006420
.text:00006420 ; Attributes: bp-based frame
.text:00006420
.text:00006420 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00006420                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00006420 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00006420                                         ; CODE XREF: CObjectVector<UString>::Size(void)+11p
.text:00006420                                         ; CObjectVector<UString>::Back(void)+11p ...
.text:00006420
.text:00006420 var_4           = dword ptr -4
.text:00006420
.text:00006420                 push    ebp
.text:00006421                 mov     ebp, esp
.text:00006423                 push    ecx
.text:00006424                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000642B                 mov     [ebp+var_4], ecx
.text:0000642E                 mov     eax, [ebp+var_4]
.text:00006431                 mov     eax, [eax+4]
.text:00006434                 mov     esp, ebp
.text:00006436                 pop     ebp
.text:00006437                 retn
.text:00006437 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00006437
.text:00006437 _text           ends
.text:00006437
.text:00006438 ; ===========================================================================
.text:00006438
.text:00006438 ; Segment type: Pure code
.text:00006438 ; Segment permissions: Read/Execute
.text:00006438 _text           segment para public 'CODE' use32
.text:00006438                 assume cs:_text
.text:00006438                 ;org 6438h
.text:00006438 ; COMDAT (pick any)
.text:00006438                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006438
.text:00006438 ; =============== S U B R O U T I N E =======================================
.text:00006438
.text:00006438 ; Attributes: bp-based frame
.text:00006438
.text:00006438 ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:00006438                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:00006438 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:00006438                                         ; CODE XREF: CObjectVector<UString>::IsEmpty(void)+11p
.text:00006438
.text:00006438 var_4           = dword ptr -4
.text:00006438
.text:00006438                 push    ebp
.text:00006439                 mov     ebp, esp
.text:0000643B                 push    ecx
.text:0000643C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006443                 mov     [ebp+var_4], ecx
.text:00006446                 mov     eax, [ebp+var_4]
.text:00006449                 xor     ecx, ecx
.text:0000644B                 cmp     dword ptr [eax+4], 0
.text:0000644F                 setz    cl
.text:00006452                 mov     al, cl
.text:00006454                 mov     esp, ebp
.text:00006456                 pop     ebp
.text:00006457                 retn
.text:00006457 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:00006457
.text:00006457 _text           ends
.text:00006457
.text:00006458 ; ===========================================================================
.text:00006458
.text:00006458 ; Segment type: Pure code
.text:00006458 ; Segment permissions: Read/Execute
.text:00006458 _text           segment para public 'CODE' use32
.text:00006458                 assume cs:_text
.text:00006458                 ;org 6458h
.text:00006458 ; COMDAT (pick any)
.text:00006458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006458
.text:00006458 ; =============== S U B R O U T I N E =======================================
.text:00006458
.text:00006458 ; Attributes: bp-based frame
.text:00006458
.text:00006458 ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:00006458                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00006458 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00006458                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+60p
.text:00006458
.text:00006458 var_8           = dword ptr -8
.text:00006458 var_4           = dword ptr -4
.text:00006458 arg_0           = dword ptr  8
.text:00006458
.text:00006458                 push    ebp
.text:00006459                 mov     ebp, esp
.text:0000645B                 sub     esp, 8
.text:0000645E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006465                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000646C                 mov     [ebp+var_4], ecx
.text:0000646F                 cmp     [ebp+arg_0], 0
.text:00006473                 jz      short loc_64A5
.text:00006475                 xor     ecx, ecx
.text:00006477                 mov     eax, [ebp+arg_0]
.text:0000647A                 mov     edx, 4
.text:0000647F                 mul     edx
.text:00006481                 seto    cl
.text:00006484                 neg     ecx
.text:00006486                 or      ecx, eax
.text:00006488                 push    ecx             ; unsigned int
.text:00006489                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000648E                 add     esp, 4
.text:00006491                 mov     [ebp+var_8], eax
.text:00006494                 mov     eax, [ebp+var_4]
.text:00006497                 mov     ecx, [ebp+var_8]
.text:0000649A                 mov     [eax], ecx
.text:0000649C                 mov     edx, [ebp+var_4]
.text:0000649F                 mov     eax, [ebp+arg_0]
.text:000064A2                 mov     [edx+8], eax
.text:000064A5
.text:000064A5 loc_64A5:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:000064A5                 add     esp, 8
.text:000064A8                 cmp     ebp, esp
.text:000064AA                 call    __RTC_CheckEsp
.text:000064AF                 mov     esp, ebp
.text:000064B1                 pop     ebp
.text:000064B2                 retn    4
.text:000064B2 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:000064B2
.text:000064B2 ; ---------------------------------------------------------------------------
.text:000064B5                 align 4
.text:000064B5 _text           ends
.text:000064B5
.text:000064B8 ; ===========================================================================
.text:000064B8
.text:000064B8 ; Segment type: Pure code
.text:000064B8 ; Segment permissions: Read/Execute
.text:000064B8 _text           segment para public 'CODE' use32
.text:000064B8                 assume cs:_text
.text:000064B8                 ;org 64B8h
.text:000064B8 ; COMDAT (pick any)
.text:000064B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064B8
.text:000064B8 ; =============== S U B R O U T I N E =======================================
.text:000064B8
.text:000064B8 ; Attributes: bp-based frame
.text:000064B8
.text:000064B8 ; public: void __thiscall CRecordVector<void *>::Reserve(unsigned int)
.text:000064B8                 public ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
.text:000064B8 ?Reserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:000064B8                                         ; CODE XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+69p
.text:000064B8
.text:000064B8 var_10          = dword ptr -10h
.text:000064B8 var_C           = dword ptr -0Ch
.text:000064B8 Dst             = dword ptr -8
.text:000064B8 var_4           = dword ptr -4
.text:000064B8 arg_0           = dword ptr  8
.text:000064B8
.text:000064B8                 push    ebp
.text:000064B9                 mov     ebp, esp
.text:000064BB                 sub     esp, 10h
.text:000064BE                 mov     eax, 0CCCCCCCCh
.text:000064C3                 mov     [ebp+var_10], eax
.text:000064C6                 mov     [ebp+var_C], eax
.text:000064C9                 mov     [ebp+Dst], eax
.text:000064CC                 mov     [ebp+var_4], eax
.text:000064CF                 mov     [ebp+var_4], ecx
.text:000064D2                 mov     eax, [ebp+var_4]
.text:000064D5                 mov     ecx, [ebp+arg_0]
.text:000064D8                 cmp     ecx, [eax+8]
.text:000064DB                 jbe     short loc_654C
.text:000064DD                 xor     ecx, ecx
.text:000064DF                 mov     eax, [ebp+arg_0]
.text:000064E2                 mov     edx, 4
.text:000064E7                 mul     edx
.text:000064E9                 seto    cl
.text:000064EC                 neg     ecx
.text:000064EE                 or      ecx, eax
.text:000064F0                 push    ecx             ; unsigned int
.text:000064F1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000064F6                 add     esp, 4
.text:000064F9                 mov     [ebp+var_C], eax
.text:000064FC                 mov     eax, [ebp+var_C]
.text:000064FF                 mov     [ebp+Dst], eax
.text:00006502                 mov     ecx, [ebp+var_4]
.text:00006505                 cmp     dword ptr [ecx+4], 0
.text:00006509                 jz      short loc_6527
.text:0000650B                 mov     edx, [ebp+var_4]
.text:0000650E                 mov     eax, [edx+4]
.text:00006511                 shl     eax, 2
.text:00006514                 push    eax             ; Size
.text:00006515                 mov     ecx, [ebp+var_4]
.text:00006518                 mov     edx, [ecx]
.text:0000651A                 push    edx             ; Src
.text:0000651B                 mov     eax, [ebp+Dst]
.text:0000651E                 push    eax             ; Dst
.text:0000651F                 call    _memcpy
.text:00006524                 add     esp, 0Ch
.text:00006527
.text:00006527 loc_6527:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+51j
.text:00006527                 mov     ecx, [ebp+var_4]
.text:0000652A                 mov     edx, [ecx]
.text:0000652C                 mov     [ebp+var_10], edx
.text:0000652F                 mov     eax, [ebp+var_10]
.text:00006532                 push    eax             ; void *
.text:00006533                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006538                 add     esp, 4
.text:0000653B                 mov     ecx, [ebp+var_4]
.text:0000653E                 mov     edx, [ebp+Dst]
.text:00006541                 mov     [ecx], edx
.text:00006543                 mov     eax, [ebp+var_4]
.text:00006546                 mov     ecx, [ebp+arg_0]
.text:00006549                 mov     [eax+8], ecx
.text:0000654C
.text:0000654C loc_654C:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+23j
.text:0000654C                 add     esp, 10h
.text:0000654F                 cmp     ebp, esp
.text:00006551                 call    __RTC_CheckEsp
.text:00006556                 mov     esp, ebp
.text:00006558                 pop     ebp
.text:00006559                 retn    4
.text:00006559 ?Reserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00006559
.text:00006559 _text           ends
.text:00006559
.text:0000655C ; ===========================================================================
.text:0000655C
.text:0000655C ; Segment type: Pure code
.text:0000655C ; Segment permissions: Read/Execute
.text:0000655C _text           segment para public 'CODE' use32
.text:0000655C                 assume cs:_text
.text:0000655C                 ;org 655Ch
.text:0000655C ; COMDAT (pick any)
.text:0000655C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000655C
.text:0000655C ; =============== S U B R O U T I N E =======================================
.text:0000655C
.text:0000655C ; Attributes: bp-based frame
.text:0000655C
.text:0000655C ; public: void __thiscall CRecordVector<void *>::ReserveDown(void)
.text:0000655C                 public ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ
.text:0000655C ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ proc near
.text:0000655C                                         ; CODE XREF: CObjectVector<UString>::ReserveDown(void)+11p
.text:0000655C                                         ; CObjectVector<CDirItem>::ReserveDown(void)+11p
.text:0000655C
.text:0000655C var_10          = dword ptr -10h
.text:0000655C var_C           = dword ptr -0Ch
.text:0000655C Dst             = dword ptr -8
.text:0000655C var_4           = dword ptr -4
.text:0000655C
.text:0000655C                 push    ebp
.text:0000655D                 mov     ebp, esp
.text:0000655F                 sub     esp, 10h
.text:00006562                 mov     eax, 0CCCCCCCCh
.text:00006567                 mov     [ebp+var_10], eax
.text:0000656A                 mov     [ebp+var_C], eax
.text:0000656D                 mov     [ebp+Dst], eax
.text:00006570                 mov     [ebp+var_4], eax
.text:00006573                 mov     [ebp+var_4], ecx
.text:00006576                 mov     eax, [ebp+var_4]
.text:00006579                 mov     ecx, [ebp+var_4]
.text:0000657C                 mov     edx, [eax+4]
.text:0000657F                 cmp     edx, [ecx+8]
.text:00006582                 jnz     short loc_6586
.text:00006584                 jmp     short loc_6602
.text:00006586 ; ---------------------------------------------------------------------------
.text:00006586
.text:00006586 loc_6586:                               ; CODE XREF: CRecordVector<void *>::ReserveDown(void)+26j
.text:00006586                 mov     [ebp+Dst], 0
.text:0000658D                 mov     eax, [ebp+var_4]
.text:00006590                 cmp     dword ptr [eax+4], 0
.text:00006594                 jz      short loc_65DA
.text:00006596                 xor     ecx, ecx
.text:00006598                 mov     edx, [ebp+var_4]
.text:0000659B                 mov     eax, [edx+4]
.text:0000659E                 mov     edx, 4
.text:000065A3                 mul     edx
.text:000065A5                 seto    cl
.text:000065A8                 neg     ecx
.text:000065AA                 or      ecx, eax
.text:000065AC                 push    ecx             ; unsigned int
.text:000065AD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000065B2                 add     esp, 4
.text:000065B5                 mov     [ebp+var_C], eax
.text:000065B8                 mov     eax, [ebp+var_C]
.text:000065BB                 mov     [ebp+Dst], eax
.text:000065BE                 mov     ecx, [ebp+var_4]
.text:000065C1                 mov     edx, [ecx+4]
.text:000065C4                 shl     edx, 2
.text:000065C7                 push    edx             ; Size
.text:000065C8                 mov     eax, [ebp+var_4]
.text:000065CB                 mov     ecx, [eax]
.text:000065CD                 push    ecx             ; Src
.text:000065CE                 mov     edx, [ebp+Dst]
.text:000065D1                 push    edx             ; Dst
.text:000065D2                 call    _memcpy
.text:000065D7                 add     esp, 0Ch
.text:000065DA
.text:000065DA loc_65DA:                               ; CODE XREF: CRecordVector<void *>::ReserveDown(void)+38j
.text:000065DA                 mov     eax, [ebp+var_4]
.text:000065DD                 mov     ecx, [eax]
.text:000065DF                 mov     [ebp+var_10], ecx
.text:000065E2                 mov     edx, [ebp+var_10]
.text:000065E5                 push    edx             ; void *
.text:000065E6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000065EB                 add     esp, 4
.text:000065EE                 mov     eax, [ebp+var_4]
.text:000065F1                 mov     ecx, [ebp+Dst]
.text:000065F4                 mov     [eax], ecx
.text:000065F6                 mov     edx, [ebp+var_4]
.text:000065F9                 mov     eax, [ebp+var_4]
.text:000065FC                 mov     ecx, [eax+4]
.text:000065FF                 mov     [edx+8], ecx
.text:00006602
.text:00006602 loc_6602:                               ; CODE XREF: CRecordVector<void *>::ReserveDown(void)+28j
.text:00006602                 add     esp, 10h
.text:00006605                 cmp     ebp, esp
.text:00006607                 call    __RTC_CheckEsp
.text:0000660C                 mov     esp, ebp
.text:0000660E                 pop     ebp
.text:0000660F                 retn
.text:0000660F ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ endp
.text:0000660F
.text:0000660F _text           ends
.text:0000660F
.text:00006610 ; ===========================================================================
.text:00006610
.text:00006610 ; Segment type: Pure code
.text:00006610 ; Segment permissions: Read/Execute
.text:00006610 _text           segment para public 'CODE' use32
.text:00006610                 assume cs:_text
.text:00006610                 ;org 6610h
.text:00006610 ; COMDAT (pick any)
.text:00006610                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006610
.text:00006610 ; =============== S U B R O U T I N E =======================================
.text:00006610
.text:00006610 ; Attributes: bp-based frame
.text:00006610
.text:00006610 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006610                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00006610 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006610                                         ; CODE XREF: __unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0+3j
.text:00006610                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+9Cp ...
.text:00006610
.text:00006610 var_8           = dword ptr -8
.text:00006610 var_4           = dword ptr -4
.text:00006610
.text:00006610                 push    ebp
.text:00006611                 mov     ebp, esp
.text:00006613                 sub     esp, 8
.text:00006616                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000661D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006624                 mov     [ebp+var_4], ecx
.text:00006627                 mov     eax, [ebp+var_4]
.text:0000662A                 mov     ecx, [eax]
.text:0000662C                 mov     [ebp+var_8], ecx
.text:0000662F                 mov     edx, [ebp+var_8]
.text:00006632                 push    edx             ; void *
.text:00006633                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006638                 add     esp, 4
.text:0000663B                 add     esp, 8
.text:0000663E                 cmp     ebp, esp
.text:00006640                 call    __RTC_CheckEsp
.text:00006645                 mov     esp, ebp
.text:00006647                 pop     ebp
.text:00006648                 retn
.text:00006648 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00006648
.text:00006648 ; ---------------------------------------------------------------------------
.text:00006649                 align 4
.text:00006649 _text           ends
.text:00006649
.text:0000664C ; ===========================================================================
.text:0000664C
.text:0000664C ; Segment type: Pure code
.text:0000664C ; Segment permissions: Read/Execute
.text:0000664C _text           segment para public 'CODE' use32
.text:0000664C                 assume cs:_text
.text:0000664C                 ;org 664Ch
.text:0000664C ; COMDAT (pick any)
.text:0000664C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000664C
.text:0000664C ; =============== S U B R O U T I N E =======================================
.text:0000664C
.text:0000664C ; Attributes: bp-based frame
.text:0000664C
.text:0000664C ; public: void __thiscall CRecordVector<void *>::DeleteBack(void)
.text:0000664C                 public ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ
.text:0000664C ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ proc near
.text:0000664C                                         ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+58p
.text:0000664C
.text:0000664C var_4           = dword ptr -4
.text:0000664C
.text:0000664C                 push    ebp
.text:0000664D                 mov     ebp, esp
.text:0000664F                 push    ecx
.text:00006650                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006657                 mov     [ebp+var_4], ecx
.text:0000665A                 mov     eax, [ebp+var_4]
.text:0000665D                 mov     ecx, [eax+4]
.text:00006660                 sub     ecx, 1
.text:00006663                 mov     edx, [ebp+var_4]
.text:00006666                 mov     [edx+4], ecx
.text:00006669                 mov     esp, ebp
.text:0000666B                 pop     ebp
.text:0000666C                 retn
.text:0000666C ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ endp
.text:0000666C
.text:0000666C ; ---------------------------------------------------------------------------
.text:0000666D                 align 10h
.text:0000666D _text           ends
.text:0000666D
.text:00006670 ; ===========================================================================
.text:00006670
.text:00006670 ; Segment type: Pure code
.text:00006670 ; Segment permissions: Read/Execute
.text:00006670 _text           segment para public 'CODE' use32
.text:00006670                 assume cs:_text
.text:00006670                 ;org 6670h
.text:00006670 ; COMDAT (pick any)
.text:00006670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006670
.text:00006670 ; =============== S U B R O U T I N E =======================================
.text:00006670
.text:00006670 ; Attributes: bp-based frame
.text:00006670
.text:00006670 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00006670                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00006670 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00006670                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+7Fp
.text:00006670                                         ; CObjectVector<CDirItem>::Add(CDirItem const &)+7Fp
.text:00006670
.text:00006670 var_8           = dword ptr -8
.text:00006670 var_4           = dword ptr -4
.text:00006670 arg_0           = dword ptr  8
.text:00006670
.text:00006670                 push    ebp
.text:00006671                 mov     ebp, esp
.text:00006673                 sub     esp, 8
.text:00006676                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000667D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006684                 mov     [ebp+var_4], ecx
.text:00006687                 mov     ecx, [ebp+var_4]
.text:0000668A                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:0000668F                 mov     eax, [ebp+var_4]
.text:00006692                 mov     ecx, [eax+4]
.text:00006695                 mov     edx, [ebp+var_4]
.text:00006698                 mov     eax, [edx]
.text:0000669A                 mov     edx, [ebp+arg_0]
.text:0000669D                 mov     [eax+ecx*4], edx
.text:000066A0                 mov     eax, [ebp+var_4]
.text:000066A3                 mov     ecx, [eax+4]
.text:000066A6                 mov     [ebp+var_8], ecx
.text:000066A9                 mov     edx, [ebp+var_4]
.text:000066AC                 mov     eax, [edx+4]
.text:000066AF                 add     eax, 1
.text:000066B2                 mov     ecx, [ebp+var_4]
.text:000066B5                 mov     [ecx+4], eax
.text:000066B8                 mov     eax, [ebp+var_8]
.text:000066BB                 add     esp, 8
.text:000066BE                 cmp     ebp, esp
.text:000066C0                 call    __RTC_CheckEsp
.text:000066C5                 mov     esp, ebp
.text:000066C7                 pop     ebp
.text:000066C8                 retn    4
.text:000066C8 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:000066C8
.text:000066C8 ; ---------------------------------------------------------------------------
.text:000066CB                 align 4
.text:000066CB _text           ends
.text:000066CB
.text:000066CC ; ===========================================================================
.text:000066CC
.text:000066CC ; Segment type: Pure code
.text:000066CC ; Segment permissions: Read/Execute
.text:000066CC _text           segment para public 'CODE' use32
.text:000066CC                 assume cs:_text
.text:000066CC                 ;org 66CCh
.text:000066CC ; COMDAT (pick any)
.text:000066CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066CC
.text:000066CC ; =============== S U B R O U T I N E =======================================
.text:000066CC
.text:000066CC ; Attributes: bp-based frame
.text:000066CC
.text:000066CC ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:000066CC                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:000066CC ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:000066CC                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+C8p
.text:000066CC                                         ; CObjectVector<UString>::operator=(CObjectVector<UString> const &)+D7p
.text:000066CC
.text:000066CC var_4           = dword ptr -4
.text:000066CC arg_0           = dword ptr  8
.text:000066CC
.text:000066CC                 push    ebp
.text:000066CD                 mov     ebp, esp
.text:000066CF                 push    ecx
.text:000066D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066D7                 mov     [ebp+var_4], ecx
.text:000066DA                 mov     eax, [ebp+var_4]
.text:000066DD                 mov     ecx, [eax+4]
.text:000066E0                 mov     edx, [ebp+var_4]
.text:000066E3                 mov     eax, [edx]
.text:000066E5                 mov     edx, [ebp+arg_0]
.text:000066E8                 mov     [eax+ecx*4], edx
.text:000066EB                 mov     eax, [ebp+var_4]
.text:000066EE                 mov     ecx, [eax+4]
.text:000066F1                 add     ecx, 1
.text:000066F4                 mov     edx, [ebp+var_4]
.text:000066F7                 mov     [edx+4], ecx
.text:000066FA                 mov     esp, ebp
.text:000066FC                 pop     ebp
.text:000066FD                 retn    4
.text:000066FD ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:000066FD
.text:000066FD _text           ends
.text:000066FD
.text:00006700 ; ===========================================================================
.text:00006700
.text:00006700 ; Segment type: Pure code
.text:00006700 ; Segment permissions: Read/Execute
.text:00006700 _text           segment para public 'CODE' use32
.text:00006700                 assume cs:_text
.text:00006700                 ;org 6700h
.text:00006700 ; COMDAT (pick any)
.text:00006700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006700
.text:00006700 ; =============== S U B R O U T I N E =======================================
.text:00006700
.text:00006700 ; Attributes: bp-based frame
.text:00006700
.text:00006700 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00006700                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00006700 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00006700                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:00006700                                         ; CObjectVector<NWildcard::CCensorNode>::operator[](uint)+15p ...
.text:00006700
.text:00006700 var_4           = dword ptr -4
.text:00006700 arg_0           = dword ptr  8
.text:00006700
.text:00006700                 push    ebp
.text:00006701                 mov     ebp, esp
.text:00006703                 push    ecx
.text:00006704                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000670B                 mov     [ebp+var_4], ecx
.text:0000670E                 mov     eax, [ebp+var_4]
.text:00006711                 mov     ecx, [eax]
.text:00006713                 mov     edx, [ebp+arg_0]
.text:00006716                 lea     eax, [ecx+edx*4]
.text:00006719                 mov     esp, ebp
.text:0000671B                 pop     ebp
.text:0000671C                 retn    4
.text:0000671C ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:0000671C
.text:0000671C ; ---------------------------------------------------------------------------
.text:0000671F                 align 10h
.text:0000671F _text           ends
.text:0000671F
.text:00006720 ; ===========================================================================
.text:00006720
.text:00006720 ; Segment type: Pure code
.text:00006720 ; Segment permissions: Read/Execute
.text:00006720 _text           segment para public 'CODE' use32
.text:00006720                 assume cs:_text
.text:00006720                 ;org 6720h
.text:00006720 ; COMDAT (pick any)
.text:00006720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006720
.text:00006720 ; =============== S U B R O U T I N E =======================================
.text:00006720
.text:00006720 ; Attributes: bp-based frame
.text:00006720
.text:00006720 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00006720                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00006720 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00006720                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:00006720                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+64p ...
.text:00006720
.text:00006720 var_4           = dword ptr -4
.text:00006720 arg_0           = dword ptr  8
.text:00006720
.text:00006720                 push    ebp
.text:00006721                 mov     ebp, esp
.text:00006723                 push    ecx
.text:00006724                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000672B                 mov     [ebp+var_4], ecx
.text:0000672E                 mov     eax, [ebp+var_4]
.text:00006731                 mov     ecx, [eax]
.text:00006733                 mov     edx, [ebp+arg_0]
.text:00006736                 lea     eax, [ecx+edx*4]
.text:00006739                 mov     esp, ebp
.text:0000673B                 pop     ebp
.text:0000673C                 retn    4
.text:0000673C ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:0000673C
.text:0000673C ; ---------------------------------------------------------------------------
.text:0000673F                 align 10h
.text:0000673F _text           ends
.text:0000673F
.text:00006740 ; ===========================================================================
.text:00006740
.text:00006740 ; Segment type: Pure code
.text:00006740 ; Segment permissions: Read/Execute
.text:00006740 _text           segment para public 'CODE' use32
.text:00006740                 assume cs:_text
.text:00006740                 ;org 6740h
.text:00006740 ; COMDAT (pick any)
.text:00006740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006740
.text:00006740 ; =============== S U B R O U T I N E =======================================
.text:00006740
.text:00006740 ; Attributes: bp-based frame
.text:00006740
.text:00006740 ; public: void __thiscall CObjectVector<class UString>::Clear(void)
.text:00006740                 public ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
.text:00006740 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:00006740                                         ; CODE XREF: CObjectVector<UString>::operator=(CObjectVector<UString> const &)+52p
.text:00006740
.text:00006740 var_14          = dword ptr -14h
.text:00006740 var_10          = dword ptr -10h
.text:00006740 var_C           = dword ptr -0Ch
.text:00006740 var_8           = dword ptr -8
.text:00006740 var_4           = dword ptr -4
.text:00006740
.text:00006740                 push    ebp
.text:00006741                 mov     ebp, esp
.text:00006743                 sub     esp, 14h
.text:00006746                 mov     eax, 0CCCCCCCCh
.text:0000674B                 mov     [ebp+var_14], eax
.text:0000674E                 mov     [ebp+var_10], eax
.text:00006751                 mov     [ebp+var_C], eax
.text:00006754                 mov     [ebp+var_8], eax
.text:00006757                 mov     [ebp+var_4], eax
.text:0000675A                 mov     [ebp+var_4], ecx
.text:0000675D                 mov     ecx, [ebp+var_4]
.text:00006760                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006765                 mov     [ebp+var_8], eax
.text:00006768
.text:00006768 loc_6768:                               ; CODE XREF: CObjectVector<UString>::Clear(void):loc_67AAj
.text:00006768                 cmp     [ebp+var_8], 0
.text:0000676C                 jz      short loc_67AC
.text:0000676E                 mov     eax, [ebp+var_8]
.text:00006771                 sub     eax, 1
.text:00006774                 mov     [ebp+var_8], eax
.text:00006777                 mov     ecx, [ebp+var_8]
.text:0000677A                 push    ecx
.text:0000677B                 mov     ecx, [ebp+var_4]
.text:0000677E                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006783                 mov     edx, [eax]
.text:00006785                 mov     [ebp+var_10], edx
.text:00006788                 mov     eax, [ebp+var_10]
.text:0000678B                 mov     [ebp+var_C], eax
.text:0000678E                 cmp     [ebp+var_C], 0
.text:00006792                 jz      short loc_67A3
.text:00006794                 push    1
.text:00006796                 mov     ecx, [ebp+var_C]
.text:00006799                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:0000679E                 mov     [ebp+var_14], eax
.text:000067A1                 jmp     short loc_67AA
.text:000067A3 ; ---------------------------------------------------------------------------
.text:000067A3
.text:000067A3 loc_67A3:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+52j
.text:000067A3                 mov     [ebp+var_14], 0
.text:000067AA
.text:000067AA loc_67AA:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+61j
.text:000067AA                 jmp     short loc_6768
.text:000067AC ; ---------------------------------------------------------------------------
.text:000067AC
.text:000067AC loc_67AC:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+2Cj
.text:000067AC                 mov     ecx, [ebp+var_4]
.text:000067AF                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:000067B4                 add     esp, 14h
.text:000067B7                 cmp     ebp, esp
.text:000067B9                 call    __RTC_CheckEsp
.text:000067BE                 mov     esp, ebp
.text:000067C0                 pop     ebp
.text:000067C1                 retn
.text:000067C1 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:000067C1
.text:000067C1 ; ---------------------------------------------------------------------------
.text:000067C2                 align 4
.text:000067C2 _text           ends
.text:000067C2
.text:000067C4 ; ===========================================================================
.text:000067C4
.text:000067C4 ; Segment type: Pure code
.text:000067C4 ; Segment permissions: Read/Execute
.text:000067C4 _text           segment para public 'CODE' use32
.text:000067C4                 assume cs:_text
.text:000067C4                 ;org 67C4h
.text:000067C4 ; COMDAT (pick any)
.text:000067C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000067C4
.text:000067C4 ; =============== S U B R O U T I N E =======================================
.text:000067C4
.text:000067C4 ; Attributes: bp-based frame
.text:000067C4
.text:000067C4 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(class CBuffer<unsigned char> const &)
.text:000067C4                 public ??0?$CBuffer@E@@QAE@ABV0@@Z
.text:000067C4 ??0?$CBuffer@E@@QAE@ABV0@@Z proc near   ; CODE XREF: CDirItem::CDirItem(CDirItem const &)+99p
.text:000067C4                                         ; CDirItem::CDirItem(CDirItem const &)+AFp
.text:000067C4
.text:000067C4 var_C           = dword ptr -0Ch
.text:000067C4 Size            = dword ptr -8
.text:000067C4 var_4           = dword ptr -4
.text:000067C4 arg_0           = dword ptr  8
.text:000067C4
.text:000067C4                 push    ebp
.text:000067C5                 mov     ebp, esp
.text:000067C7                 sub     esp, 0Ch
.text:000067CA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000067D1                 mov     [ebp+Size], 0CCCCCCCCh
.text:000067D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000067DF                 mov     [ebp+var_4], ecx
.text:000067E2                 mov     eax, [ebp+var_4]
.text:000067E5                 mov     dword ptr [eax], 0
.text:000067EB                 mov     ecx, [ebp+var_4]
.text:000067EE                 mov     dword ptr [ecx+4], 0
.text:000067F5                 mov     edx, [ebp+arg_0]
.text:000067F8                 mov     eax, [edx+4]
.text:000067FB                 mov     [ebp+Size], eax
.text:000067FE                 cmp     [ebp+Size], 0
.text:00006802                 jz      short loc_683C
.text:00006804                 mov     ecx, [ebp+Size]
.text:00006807                 push    ecx             ; unsigned int
.text:00006808                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000680D                 add     esp, 4
.text:00006810                 mov     [ebp+var_C], eax
.text:00006813                 mov     edx, [ebp+var_4]
.text:00006816                 mov     eax, [ebp+var_C]
.text:00006819                 mov     [edx], eax
.text:0000681B                 mov     ecx, [ebp+Size]
.text:0000681E                 push    ecx             ; Size
.text:0000681F                 mov     edx, [ebp+arg_0]
.text:00006822                 mov     eax, [edx]
.text:00006824                 push    eax             ; Src
.text:00006825                 mov     ecx, [ebp+var_4]
.text:00006828                 mov     edx, [ecx]
.text:0000682A                 push    edx             ; Dst
.text:0000682B                 call    _memcpy
.text:00006830                 add     esp, 0Ch
.text:00006833                 mov     eax, [ebp+var_4]
.text:00006836                 mov     ecx, [ebp+Size]
.text:00006839                 mov     [eax+4], ecx
.text:0000683C
.text:0000683C loc_683C:                               ; CODE XREF: CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)+3Ej
.text:0000683C                 mov     eax, [ebp+var_4]
.text:0000683F                 add     esp, 0Ch
.text:00006842                 cmp     ebp, esp
.text:00006844                 call    __RTC_CheckEsp
.text:00006849                 mov     esp, ebp
.text:0000684B                 pop     ebp
.text:0000684C                 retn    4
.text:0000684C ??0?$CBuffer@E@@QAE@ABV0@@Z endp
.text:0000684C
.text:0000684C ; ---------------------------------------------------------------------------
.text:0000684F                 align 10h
.text:0000684F _text           ends
.text:0000684F
.text:00006850 ; ===========================================================================
.text:00006850
.text:00006850 ; Segment type: Pure code
.text:00006850 ; Segment permissions: Read/Execute
.text:00006850 _text           segment para public 'CODE' use32
.text:00006850                 assume cs:_text
.text:00006850                 ;org 6850h
.text:00006850 ; COMDAT (pick any)
.text:00006850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006850
.text:00006850 ; =============== S U B R O U T I N E =======================================
.text:00006850
.text:00006850 ; Attributes: bp-based frame
.text:00006850
.text:00006850 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00006850                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00006850 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: CBuffer<uchar>::operator=(CBuffer<uchar> const &)+20p
.text:00006850
.text:00006850 var_4           = dword ptr -4
.text:00006850
.text:00006850                 push    ebp
.text:00006851                 mov     ebp, esp
.text:00006853                 push    ecx
.text:00006854                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000685B                 mov     [ebp+var_4], ecx
.text:0000685E                 mov     eax, [ebp+var_4]
.text:00006861                 mov     eax, [eax]
.text:00006863                 mov     esp, ebp
.text:00006865                 pop     ebp
.text:00006866                 retn
.text:00006866 ??B?$CBuffer@E@@QBEPBEXZ endp
.text:00006866
.text:00006866 ; ---------------------------------------------------------------------------
.text:00006867                 align 4
.text:00006867 _text           ends
.text:00006867
.text:00006868 ; ===========================================================================
.text:00006868
.text:00006868 ; Segment type: Pure code
.text:00006868 ; Segment permissions: Read/Execute
.text:00006868 _text           segment para public 'CODE' use32
.text:00006868                 assume cs:_text
.text:00006868                 ;org 6868h
.text:00006868 ; COMDAT (pick any)
.text:00006868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006868
.text:00006868 ; =============== S U B R O U T I N E =======================================
.text:00006868
.text:00006868 ; Attributes: bp-based frame
.text:00006868
.text:00006868 ; int __stdcall CBuffer<unsigned char>::CopyFrom(void *Src, size_t Size)
.text:00006868                 public ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
.text:00006868 ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z proc near
.text:00006868                                         ; CODE XREF: CBuffer<uchar>::operator=(CBuffer<uchar> const &)+29p
.text:00006868
.text:00006868 var_4           = dword ptr -4
.text:00006868 Src             = dword ptr  8
.text:00006868 Size            = dword ptr  0Ch
.text:00006868
.text:00006868                 push    ebp
.text:00006869                 mov     ebp, esp
.text:0000686B                 push    ecx
.text:0000686C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006873                 mov     [ebp+var_4], ecx
.text:00006876                 mov     eax, [ebp+Size]
.text:00006879                 push    eax
.text:0000687A                 mov     ecx, [ebp+var_4]
.text:0000687D                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00006882                 cmp     [ebp+Size], 0
.text:00006886                 jz      short loc_689E
.text:00006888                 mov     ecx, [ebp+Size]
.text:0000688B                 push    ecx             ; Size
.text:0000688C                 mov     edx, [ebp+Src]
.text:0000688F                 push    edx             ; Src
.text:00006890                 mov     eax, [ebp+var_4]
.text:00006893                 mov     ecx, [eax]
.text:00006895                 push    ecx             ; Dst
.text:00006896                 call    _memcpy
.text:0000689B                 add     esp, 0Ch
.text:0000689E
.text:0000689E loc_689E:                               ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+1Ej
.text:0000689E                 add     esp, 4
.text:000068A1                 cmp     ebp, esp
.text:000068A3                 call    __RTC_CheckEsp
.text:000068A8                 mov     esp, ebp
.text:000068AA                 pop     ebp
.text:000068AB                 retn    8
.text:000068AB ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z endp
.text:000068AB
.text:000068AB ; ---------------------------------------------------------------------------
.text:000068AE                 align 10h
.text:000068AE _text           ends
.text:000068AE
.text:000068B0 ; ===========================================================================
.text:000068B0
.text:000068B0 ; Segment type: Pure code
.text:000068B0 ; Segment permissions: Read/Execute
.text:000068B0 _text           segment para public 'CODE' use32
.text:000068B0                 assume cs:_text
.text:000068B0                 ;org 68B0h
.text:000068B0 ; COMDAT (pick any)
.text:000068B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068B0
.text:000068B0 ; =============== S U B R O U T I N E =======================================
.text:000068B0
.text:000068B0 ; Attributes: bp-based frame
.text:000068B0
.text:000068B0 ; private: void __thiscall CRecordVector<int>::ReserveOnePosition(void)
.text:000068B0                 public ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ
.text:000068B0 ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ proc near
.text:000068B0                                         ; CODE XREF: CRecordVector<int>::Add(int)+1Ap
.text:000068B0
.text:000068B0 var_14          = dword ptr -14h
.text:000068B0 var_10          = dword ptr -10h
.text:000068B0 Dst             = dword ptr -0Ch
.text:000068B0 var_8           = dword ptr -8
.text:000068B0 var_4           = dword ptr -4
.text:000068B0
.text:000068B0                 push    ebp
.text:000068B1                 mov     ebp, esp
.text:000068B3                 sub     esp, 14h
.text:000068B6                 mov     eax, 0CCCCCCCCh
.text:000068BB                 mov     [ebp+var_14], eax
.text:000068BE                 mov     [ebp+var_10], eax
.text:000068C1                 mov     [ebp+Dst], eax
.text:000068C4                 mov     [ebp+var_8], eax
.text:000068C7                 mov     [ebp+var_4], eax
.text:000068CA                 mov     [ebp+var_4], ecx
.text:000068CD                 mov     eax, [ebp+var_4]
.text:000068D0                 mov     ecx, [ebp+var_4]
.text:000068D3                 mov     edx, [eax+4]
.text:000068D6                 cmp     edx, [ecx+8]
.text:000068D9                 jnz     loc_6964
.text:000068DF                 mov     eax, [ebp+var_4]
.text:000068E2                 mov     ecx, [eax+8]
.text:000068E5                 shr     ecx, 2
.text:000068E8                 mov     edx, [ebp+var_4]
.text:000068EB                 mov     eax, [edx+8]
.text:000068EE                 lea     ecx, [eax+ecx+1]
.text:000068F2                 mov     [ebp+var_8], ecx
.text:000068F5                 xor     ecx, ecx
.text:000068F7                 mov     eax, [ebp+var_8]
.text:000068FA                 mov     edx, 4
.text:000068FF                 mul     edx
.text:00006901                 seto    cl
.text:00006904                 neg     ecx
.text:00006906                 or      ecx, eax
.text:00006908                 push    ecx             ; unsigned int
.text:00006909                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000690E                 add     esp, 4
.text:00006911                 mov     [ebp+var_10], eax
.text:00006914                 mov     eax, [ebp+var_10]
.text:00006917                 mov     [ebp+Dst], eax
.text:0000691A                 mov     ecx, [ebp+var_4]
.text:0000691D                 cmp     dword ptr [ecx+4], 0
.text:00006921                 jz      short loc_693F
.text:00006923                 mov     edx, [ebp+var_4]
.text:00006926                 mov     eax, [edx+4]
.text:00006929                 shl     eax, 2
.text:0000692C                 push    eax             ; Size
.text:0000692D                 mov     ecx, [ebp+var_4]
.text:00006930                 mov     edx, [ecx]
.text:00006932                 push    edx             ; Src
.text:00006933                 mov     eax, [ebp+Dst]
.text:00006936                 push    eax             ; Dst
.text:00006937                 call    _memcpy
.text:0000693C                 add     esp, 0Ch
.text:0000693F
.text:0000693F loc_693F:                               ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+71j
.text:0000693F                 mov     ecx, [ebp+var_4]
.text:00006942                 mov     edx, [ecx]
.text:00006944                 mov     [ebp+var_14], edx
.text:00006947                 mov     eax, [ebp+var_14]
.text:0000694A                 push    eax             ; void *
.text:0000694B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006950                 add     esp, 4
.text:00006953                 mov     ecx, [ebp+var_4]
.text:00006956                 mov     edx, [ebp+Dst]
.text:00006959                 mov     [ecx], edx
.text:0000695B                 mov     eax, [ebp+var_4]
.text:0000695E                 mov     ecx, [ebp+var_8]
.text:00006961                 mov     [eax+8], ecx
.text:00006964
.text:00006964 loc_6964:                               ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+29j
.text:00006964                 add     esp, 14h
.text:00006967                 cmp     ebp, esp
.text:00006969                 call    __RTC_CheckEsp
.text:0000696E                 mov     esp, ebp
.text:00006970                 pop     ebp
.text:00006971                 retn
.text:00006971 ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ endp
.text:00006971
.text:00006971 ; ---------------------------------------------------------------------------
.text:00006972                 align 4
.text:00006972 _text           ends
.text:00006972
.text:00006974 ; ===========================================================================
.text:00006974
.text:00006974 ; Segment type: Pure code
.text:00006974 ; Segment permissions: Read/Execute
.text:00006974 _text           segment para public 'CODE' use32
.text:00006974                 assume cs:_text
.text:00006974                 ;org 6974h
.text:00006974 ; COMDAT (pick any)
.text:00006974                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006974
.text:00006974 ; =============== S U B R O U T I N E =======================================
.text:00006974
.text:00006974 ; Attributes: bp-based frame
.text:00006974
.text:00006974 ; private: void __thiscall CRecordVector<bool>::ReserveOnePosition(void)
.text:00006974                 public ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
.text:00006974 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ proc near
.text:00006974                                         ; CODE XREF: CRecordVector<bool>::Add(bool)+1Ap
.text:00006974
.text:00006974 var_14          = dword ptr -14h
.text:00006974 var_10          = dword ptr -10h
.text:00006974 Dst             = dword ptr -0Ch
.text:00006974 var_8           = dword ptr -8
.text:00006974 var_4           = dword ptr -4
.text:00006974
.text:00006974                 push    ebp
.text:00006975                 mov     ebp, esp
.text:00006977                 sub     esp, 14h
.text:0000697A                 mov     eax, 0CCCCCCCCh
.text:0000697F                 mov     [ebp+var_14], eax
.text:00006982                 mov     [ebp+var_10], eax
.text:00006985                 mov     [ebp+Dst], eax
.text:00006988                 mov     [ebp+var_8], eax
.text:0000698B                 mov     [ebp+var_4], eax
.text:0000698E                 mov     [ebp+var_4], ecx
.text:00006991                 mov     eax, [ebp+var_4]
.text:00006994                 mov     ecx, [ebp+var_4]
.text:00006997                 mov     edx, [eax+4]
.text:0000699A                 cmp     edx, [ecx+8]
.text:0000699D                 jnz     short loc_6A11
.text:0000699F                 mov     eax, [ebp+var_4]
.text:000069A2                 mov     ecx, [eax+8]
.text:000069A5                 shr     ecx, 2
.text:000069A8                 mov     edx, [ebp+var_4]
.text:000069AB                 mov     eax, [edx+8]
.text:000069AE                 lea     ecx, [eax+ecx+1]
.text:000069B2                 mov     [ebp+var_8], ecx
.text:000069B5                 mov     edx, [ebp+var_8]
.text:000069B8                 push    edx             ; unsigned int
.text:000069B9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000069BE                 add     esp, 4
.text:000069C1                 mov     [ebp+var_10], eax
.text:000069C4                 mov     eax, [ebp+var_10]
.text:000069C7                 mov     [ebp+Dst], eax
.text:000069CA                 mov     ecx, [ebp+var_4]
.text:000069CD                 cmp     dword ptr [ecx+4], 0
.text:000069D1                 jz      short loc_69EC
.text:000069D3                 mov     edx, [ebp+var_4]
.text:000069D6                 mov     eax, [edx+4]
.text:000069D9                 push    eax             ; Size
.text:000069DA                 mov     ecx, [ebp+var_4]
.text:000069DD                 mov     edx, [ecx]
.text:000069DF                 push    edx             ; Src
.text:000069E0                 mov     eax, [ebp+Dst]
.text:000069E3                 push    eax             ; Dst
.text:000069E4                 call    _memcpy
.text:000069E9                 add     esp, 0Ch
.text:000069EC
.text:000069EC loc_69EC:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+5Dj
.text:000069EC                 mov     ecx, [ebp+var_4]
.text:000069EF                 mov     edx, [ecx]
.text:000069F1                 mov     [ebp+var_14], edx
.text:000069F4                 mov     eax, [ebp+var_14]
.text:000069F7                 push    eax             ; void *
.text:000069F8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000069FD                 add     esp, 4
.text:00006A00                 mov     ecx, [ebp+var_4]
.text:00006A03                 mov     edx, [ebp+Dst]
.text:00006A06                 mov     [ecx], edx
.text:00006A08                 mov     eax, [ebp+var_4]
.text:00006A0B                 mov     ecx, [ebp+var_8]
.text:00006A0E                 mov     [eax+8], ecx
.text:00006A11
.text:00006A11 loc_6A11:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+29j
.text:00006A11                 add     esp, 14h
.text:00006A14                 cmp     ebp, esp
.text:00006A16                 call    __RTC_CheckEsp
.text:00006A1B                 mov     esp, ebp
.text:00006A1D                 pop     ebp
.text:00006A1E                 retn
.text:00006A1E ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ endp
.text:00006A1E
.text:00006A1E ; ---------------------------------------------------------------------------
.text:00006A1F                 align 10h
.text:00006A1F _text           ends
.text:00006A1F
.text:00006A20 ; ===========================================================================
.text:00006A20
.text:00006A20 ; Segment type: Pure code
.text:00006A20 ; Segment permissions: Read/Execute
.text:00006A20 _text           segment para public 'CODE' use32
.text:00006A20                 assume cs:_text
.text:00006A20                 ;org 6A20h
.text:00006A20 ; COMDAT (pick any)
.text:00006A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A20
.text:00006A20 ; =============== S U B R O U T I N E =======================================
.text:00006A20
.text:00006A20 ; Attributes: bp-based frame
.text:00006A20
.text:00006A20 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00006A20                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00006A20 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00006A20                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00006A20
.text:00006A20 var_14          = dword ptr -14h
.text:00006A20 var_10          = dword ptr -10h
.text:00006A20 Dst             = dword ptr -0Ch
.text:00006A20 var_8           = dword ptr -8
.text:00006A20 var_4           = dword ptr -4
.text:00006A20
.text:00006A20                 push    ebp
.text:00006A21                 mov     ebp, esp
.text:00006A23                 sub     esp, 14h
.text:00006A26                 mov     eax, 0CCCCCCCCh
.text:00006A2B                 mov     [ebp+var_14], eax
.text:00006A2E                 mov     [ebp+var_10], eax
.text:00006A31                 mov     [ebp+Dst], eax
.text:00006A34                 mov     [ebp+var_8], eax
.text:00006A37                 mov     [ebp+var_4], eax
.text:00006A3A                 mov     [ebp+var_4], ecx
.text:00006A3D                 mov     eax, [ebp+var_4]
.text:00006A40                 mov     ecx, [ebp+var_4]
.text:00006A43                 mov     edx, [eax+4]
.text:00006A46                 cmp     edx, [ecx+8]
.text:00006A49                 jnz     loc_6AD4
.text:00006A4F                 mov     eax, [ebp+var_4]
.text:00006A52                 mov     ecx, [eax+8]
.text:00006A55                 shr     ecx, 2
.text:00006A58                 mov     edx, [ebp+var_4]
.text:00006A5B                 mov     eax, [edx+8]
.text:00006A5E                 lea     ecx, [eax+ecx+1]
.text:00006A62                 mov     [ebp+var_8], ecx
.text:00006A65                 xor     ecx, ecx
.text:00006A67                 mov     eax, [ebp+var_8]
.text:00006A6A                 mov     edx, 4
.text:00006A6F                 mul     edx
.text:00006A71                 seto    cl
.text:00006A74                 neg     ecx
.text:00006A76                 or      ecx, eax
.text:00006A78                 push    ecx             ; unsigned int
.text:00006A79                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006A7E                 add     esp, 4
.text:00006A81                 mov     [ebp+var_10], eax
.text:00006A84                 mov     eax, [ebp+var_10]
.text:00006A87                 mov     [ebp+Dst], eax
.text:00006A8A                 mov     ecx, [ebp+var_4]
.text:00006A8D                 cmp     dword ptr [ecx+4], 0
.text:00006A91                 jz      short loc_6AAF
.text:00006A93                 mov     edx, [ebp+var_4]
.text:00006A96                 mov     eax, [edx+4]
.text:00006A99                 shl     eax, 2
.text:00006A9C                 push    eax             ; Size
.text:00006A9D                 mov     ecx, [ebp+var_4]
.text:00006AA0                 mov     edx, [ecx]
.text:00006AA2                 push    edx             ; Src
.text:00006AA3                 mov     eax, [ebp+Dst]
.text:00006AA6                 push    eax             ; Dst
.text:00006AA7                 call    _memcpy
.text:00006AAC                 add     esp, 0Ch
.text:00006AAF
.text:00006AAF loc_6AAF:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00006AAF                 mov     ecx, [ebp+var_4]
.text:00006AB2                 mov     edx, [ecx]
.text:00006AB4                 mov     [ebp+var_14], edx
.text:00006AB7                 mov     eax, [ebp+var_14]
.text:00006ABA                 push    eax             ; void *
.text:00006ABB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006AC0                 add     esp, 4
.text:00006AC3                 mov     ecx, [ebp+var_4]
.text:00006AC6                 mov     edx, [ebp+Dst]
.text:00006AC9                 mov     [ecx], edx
.text:00006ACB                 mov     eax, [ebp+var_4]
.text:00006ACE                 mov     ecx, [ebp+var_8]
.text:00006AD1                 mov     [eax+8], ecx
.text:00006AD4
.text:00006AD4 loc_6AD4:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00006AD4                 add     esp, 14h
.text:00006AD7                 cmp     ebp, esp
.text:00006AD9                 call    __RTC_CheckEsp
.text:00006ADE                 mov     esp, ebp
.text:00006AE0                 pop     ebp
.text:00006AE1                 retn
.text:00006AE1 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00006AE1
.text:00006AE1 ; ---------------------------------------------------------------------------
.text:00006AE2                 align 4
.text:00006AE2 _text           ends
.text:00006AE2
.text:00006AE4 ; ===========================================================================
.text:00006AE4
.text:00006AE4 ; Segment type: Pure code
.text:00006AE4 ; Segment permissions: Read/Execute
.text:00006AE4 _text           segment para public 'CODE' use32
.text:00006AE4                 assume cs:_text
.text:00006AE4                 ;org 6AE4h
.text:00006AE4 ; COMDAT (pick any)
.text:00006AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006AE4
.text:00006AE4 ; =============== S U B R O U T I N E =======================================
.text:00006AE4
.text:00006AE4 ; Attributes: bp-based frame
.text:00006AE4
.text:00006AE4 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00006AE4                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00006AE4 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00006AE4                                         ; CODE XREF: CObjectVector<UString>::Clear(void)+6Fp
.text:00006AE4
.text:00006AE4 var_4           = dword ptr -4
.text:00006AE4
.text:00006AE4                 push    ebp
.text:00006AE5                 mov     ebp, esp
.text:00006AE7                 push    ecx
.text:00006AE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AEF                 mov     [ebp+var_4], ecx
.text:00006AF2                 mov     eax, [ebp+var_4]
.text:00006AF5                 mov     dword ptr [eax+4], 0
.text:00006AFC                 mov     esp, ebp
.text:00006AFE                 pop     ebp
.text:00006AFF                 retn
.text:00006AFF ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00006AFF
.text:00006AFF _text           ends
.text:00006AFF
UNDEF:00006B00 ; ===========================================================================
UNDEF:00006B00
UNDEF:00006B00 ; Segment type: Externs
UNDEF:00006B00 ; UNDEF
UNDEF:00006B00 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00006B00                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00006B00                                         ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+B2p
UNDEF:00006B00                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+19Ep ...
UNDEF:00006B04                 extrn ___security_cookie:near
UNDEF:00006B04                                         ; DATA XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+26r
UNDEF:00006B04                                         ; CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+26r ...
UNDEF:00006B08                 extrn ___CxxFrameHandler3:near
UNDEF:00006B08                                         ; CODE XREF: __ehhandler$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z+16j
UNDEF:00006B08                                         ; __ehhandler$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z+16j ...
UNDEF:00006B0C ; __fastcall __security_check_cookie(x)
UNDEF:00006B0C                 extrn @__security_check_cookie@4:near
UNDEF:00006B0C                                         ; CODE XREF: __ehhandler$?AddDirFileInfo@CDirItems@@QAEXHHHABUCFileInfo@NFind@NFile@NWindows@@@Z+Cp
UNDEF:00006B0C                                         ; __ehhandler$?GetPrefixesPath@CDirItems@@ABE?AVUString@@ABV?$CRecordVector@H@@HABV2@@Z+Cp ...
UNDEF:00006B10                 extrn __RTC_CheckEsp:near
UNDEF:00006B10                                         ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+191p
UNDEF:00006B10                                         ; CDirItems::AddError(UString const &,ulong)+57p ...
UNDEF:00006B14 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00006B14                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00006B14                                         ; CODE XREF: CDirItems::AddDirFileInfo(int,int,int,NWindows::NFile::NFind::CFileInfo const &)+179p
UNDEF:00006B14                                         ; CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+168p ...
UNDEF:00006B18                 extrn __RTC_Shutdown:near
UNDEF:00006B18                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00006B1C                 extrn __RTC_InitBase:near
UNDEF:00006B1C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00006B20 ; public: __thiscall UString::UString(void)
UNDEF:00006B20                 extrn ??0UString@@QAE@XZ:near
UNDEF:00006B20                                         ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+44p
UNDEF:00006B20                                         ; CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+1A9p ...
UNDEF:00006B24 ; void __cdecl operator delete(void *)
UNDEF:00006B24                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00006B24                                         ; __unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1+4p ...
UNDEF:00006B28 ; DWORD __stdcall GetLastError()
UNDEF:00006B28                 extrn __imp__GetLastError@0:near
UNDEF:00006B28                                         ; CODE XREF: CDirItems::AddError(UString const &)+11p
UNDEF:00006B28                                         ; CDirItems::AddSecurityItem(UString const &,int &)+C7p ...
UNDEF:00006B2C ; public: __thiscall UString::UString(class UString const &)
UNDEF:00006B2C                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00006B2C                                         ; CODE XREF: CDirItems::GetPrefixesPath(CRecordVector<int> const &,int,UString const &)+141p
UNDEF:00006B2C                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+CE4p ...
UNDEF:00006B30 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00006B30                 extrn _memcpy:near      ; CODE XREF: _wmemcpy+11p
UNDEF:00006B30                                         ; CRecordVector<int>::ReserveDown(void)+76p ...
UNDEF:00006B34 ; void __thiscall UString::ReAlloc2(UString *__hidden this, unsigned int)
UNDEF:00006B34                 extrn ?ReAlloc2@UString@@AAEXI@Z:near
UNDEF:00006B34                                         ; CODE XREF: UString::GetBuf_SetEnd(uint)+29p
UNDEF:00006B38 ; bool __stdcall InitLocalPrivileges()
UNDEF:00006B38                 extrn ?InitLocalPrivileges@@YG_NXZ:near
UNDEF:00006B38                                         ; CODE XREF: CDirItems::CDirItems(void)+BAp
UNDEF:00006B3C ; unsigned int __thiscall CUniqBlocks::AddUniq(CUniqBlocks *__hidden this, const unsigned __int8 *, unsigned int)
UNDEF:00006B3C                 extrn ?AddUniq@CUniqBlocks@@QAEIPBEI@Z:near
UNDEF:00006B3C                                         ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+1A6p
UNDEF:00006B40 ; BOOL __stdcall GetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded)
UNDEF:00006B40                 extrn __imp__GetFileSecurityW@20:near
UNDEF:00006B40                                         ; CODE XREF: CDirItems::AddSecurityItem(UString const &,int &)+83p
UNDEF:00006B40                                         ; CDirItems::AddSecurityItem(UString const &,int &)+143p
UNDEF:00006B40                                         ; DATA XREF: ...
UNDEF:00006B44 ; class UString __stdcall operator+(class UString const &, class UString const &)
UNDEF:00006B44                 extrn ??H@YG?AVUString@@ABV0@0@Z:near
UNDEF:00006B44                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+17Dp
UNDEF:00006B44                                         ; CDirItems::EnumerateDir(int,int,UString const &)+2D4p ...
UNDEF:00006B48 ; bool __thiscall NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CEnumerator *__hidden this, struct NWindows::NFile::NFind::CFileInfo *, bool *)
UNDEF:00006B48                 extrn ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@AA_N@Z:near
UNDEF:00006B48                                         ; CODE XREF: CDirItems::EnumerateDir(int,int,UString const &)+CFp
UNDEF:00006B48                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+ED0p
UNDEF:00006B4C ; private: __thiscall UString::UString(class UString const &, wchar_t)
UNDEF:00006B4C                 extrn ??0UString@@AAE@ABV0@_W@Z:near
UNDEF:00006B4C                                         ; CODE XREF: operator+(UString const &,wchar_t)+1Ep
UNDEF:00006B50 ; bool __thiscall NWindows::NFile::NFind::CFindFileBase::Close(NWindows::NFile::NFind::CFindFileBase *__hidden this)
UNDEF:00006B50                 extrn ?Close@CFindFileBase@NFind@NFile@NWindows@@QAE_NXZ:near
UNDEF:00006B50                                         ; CODE XREF: NWindows::NFile::NFind::CFindFileBase::~CFindFileBase(void)+11p
UNDEF:00006B54 ; void __thiscall NWindows::NFile::NFind::CFileInfoBase::ClearBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
UNDEF:00006B54                 extrn ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ:near
UNDEF:00006B54                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(void)+11p
UNDEF:00006B58 ; void __thiscall UString::SetFrom(UString *__hidden this, const wchar_t *, unsigned int)
UNDEF:00006B58                 extrn ?SetFrom@UString@@QAEXPB_WI@Z:near
UNDEF:00006B58                                         ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+1D7p
UNDEF:00006B5C ; int __thiscall UString::ReverseFind_PathSepar(UString *__hidden this)
UNDEF:00006B5C                 extrn ?ReverseFind_PathSepar@UString@@QBEHXZ:near
UNDEF:00006B5C                                         ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+19Bp
UNDEF:00006B60 ; bool __thiscall NWindows::NFile::NFind::CFileInfo::Find(NWindows::NFile::NFind::CFileInfo *__hidden this, const wchar_t *)
UNDEF:00006B60                 extrn ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:00006B60                                         ; CODE XREF: CDirItems::EnumerateItems2(UString const &,UString const &,CObjectVector<UString> const &,CObjectVector<UString> *)+116p
UNDEF:00006B60                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+1B7p ...
UNDEF:00006B64 ; bool __thiscall NWindows::NFile::CReparseAttr::Parse(NWindows::NFile::CReparseAttr *__hidden this, const unsigned __int8 *, unsigned int)
UNDEF:00006B64                 extrn ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z:near
UNDEF:00006B64                                         ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+BCp
UNDEF:00006B64                                         ; CDirItems::FillFixedReparse(void)+C4p
UNDEF:00006B68 ; bool __stdcall NWindows::NFile::NIO::GetReparseData(wchar_t const *, class CBuffer<unsigned char> &, struct _BY_HANDLE_FILE_INFORMATION *)
UNDEF:00006B68                 extrn ?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z:near
UNDEF:00006B68                                         ; CODE XREF: CDirItems::SetLinkInfo(CDirItem &,NWindows::NFile::NFind::CFileInfo const &,UString const &)+8Fp
UNDEF:00006B6C ; bool __stdcall NWindows::NFile::NFind::MyGetLogicalDriveStrings(class CObjectVector<class UString> &)
UNDEF:00006B6C                 extrn ?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z:near
UNDEF:00006B6C                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+C94p
UNDEF:00006B70 ; bool __thiscall NWildcard::CCensorNode::AreThereIncludeItems(NWildcard::CCensorNode *__hidden this)
UNDEF:00006B70                 extrn ?AreThereIncludeItems@CCensorNode@NWildcard@@QBE_NXZ:near
UNDEF:00006B70                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+8E6p
UNDEF:00006B74 ; bool NWildcard::IsDriveColonName(NWildcard *__hidden this, const wchar_t *)
UNDEF:00006B74                 extrn ?IsDriveColonName@NWildcard@@YG_NPB_W@Z:near
UNDEF:00006B74                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+844p
UNDEF:00006B74                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+C26p ...
UNDEF:00006B78 ; int __thiscall NWildcard::CCensorNode::FindSubNode(NWildcard::CCensorNode *__hidden this, const struct UString *)
UNDEF:00006B78                 extrn ?FindSubNode@CCensorNode@NWildcard@@QBEHABVUString@@@Z:near
UNDEF:00006B78                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+630p
UNDEF:00006B78                                         ; EnumerateForItem(NWindows::NFile::NFind::CFileInfo &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+3A5p
UNDEF:00006B7C ; public: bool __thiscall NWildcard::CCensorNode::CheckPathToRoot(bool, class CObjectVector<class UString> &, bool)const
UNDEF:00006B7C                 extrn ?CheckPathToRoot@CCensorNode@NWildcard@@QBE_N_NAAV?$CObjectVector@VUString@@@@0@Z:near
UNDEF:00006B7C                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+33Fp
UNDEF:00006B7C                                         ; EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+17Cp ...
UNDEF:00006B80 ; public: class UString & __thiscall UString::operator=(wchar_t)
UNDEF:00006B80                 extrn ??4UString@@QAEAAV0@_W@Z:near
UNDEF:00006B80                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+147p
UNDEF:00006B80                                         ; EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+82Ep
UNDEF:00006B84 ; bool __thiscall NWildcard::CCensorNode::NeedCheckSubDirs(NWildcard::CCensorNode *__hidden this)
UNDEF:00006B84                 extrn ?NeedCheckSubDirs@CCensorNode@NWildcard@@QBE_NXZ:near
UNDEF:00006B84                                         ; CODE XREF: EnumerateDirItems(NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &,bool)+46p
UNDEF:00006B88 ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:00006B88                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:00006B88                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00006B8C ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:00006B8C                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:00006B8C                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+16Cp
UNDEF:00006B8C                                         ; EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+1CEp ...
UNDEF:00006B90 ; struct UString __thiscall __high NWindows::NFile::NFind::CStreamInfo::GetReducedName()
UNDEF:00006B90                 extrn ?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ:near
UNDEF:00006B90                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+155p
UNDEF:00006B94 ; bool __thiscall NWindows::NFile::NFind::CStreamInfo::IsMainStream(NWindows::NFile::NFind::CStreamInfo *__hidden this)
UNDEF:00006B94                 extrn ?IsMainStream@CStreamInfo@NFind@NFile@NWindows@@QBE_NXZ:near
UNDEF:00006B94                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+121p
UNDEF:00006B98 ; class UString __stdcall operator+(class UString const &, wchar_t const *)
UNDEF:00006B98                 extrn ??H@YG?AVUString@@ABV0@PB_W@Z:near
UNDEF:00006B98                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+81p
UNDEF:00006B9C ; bool __thiscall NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamEnumerator *__hidden this, struct NWindows::NFile::NFind::CStreamInfo *, bool *)
UNDEF:00006B9C                 extrn ?Next@CStreamEnumerator@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@AA_N@Z:near
UNDEF:00006B9C                                         ; CODE XREF: EnumerateAltStreams(NWindows::NFile::NFind::CFileInfo const &,NWildcard::CCensorNode const &,int,int,UString const &,CObjectVector<UString> const &,CDirItems &)+65p
UNDEF:00006BA0 ; bool __stdcall DoesNameContainWildcard(const struct UString *)
UNDEF:00006BA0                 extrn ?DoesNameContainWildcard@@YG_NABVUString@@@Z:near
UNDEF:00006BA0                                         ; CODE XREF: CanUseFsDirect(NWildcard::CCensorNode const &)+7Ap
UNDEF:00006BA4 ; unsigned int NWindows::NFile::NName::GetRootPrefixSize(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00006BA4                 extrn ?GetRootPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z:near
UNDEF:00006BA4                                         ; CODE XREF: IsVirtualFsFolder(UString const &,UString const &)+87p
UNDEF:00006BA4                                         ; CDirItems::FillFixedReparse(void)+392p
UNDEF:00006BA8 ; bool __stdcall NWindows::NFile::FillLinkData(class CBuffer<unsigned char> &, wchar_t const *, bool)
UNDEF:00006BA8                 extrn ?FillLinkData@NFile@NWindows@@YG_NAAV?$CBuffer@E@@PB_W_N@Z:near
UNDEF:00006BA8                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+609p
UNDEF:00006BAC ; public: class UString & __thiscall UString::operator+=(wchar_t const *)
UNDEF:00006BAC                 extrn ??YUString@@QAEAAV0@PB_W@Z:near
UNDEF:00006BAC                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+5D6p
UNDEF:00006BB0 ; int __stdcall CompareFileNames(const wchar_t *, const wchar_t *)
UNDEF:00006BB0                 extrn ?CompareFileNames@@YGHPB_W0@Z:near
UNDEF:00006BB0                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+29Ap
UNDEF:00006BB0                                         ; CDirItems::FillFixedReparse(void)+51Dp
UNDEF:00006BB4 ; bool NWindows::NFile::NDir::MyGetFullPathName(NWindows::NFile::NDir *__hidden this, const wchar_t *, struct UString *)
UNDEF:00006BB4                 extrn ?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z:near
UNDEF:00006BB4                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+197p
UNDEF:00006BB8 ; bool NWindows::NFile::NName::IsDrivePath(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00006BB8                 extrn ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00006BB8                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+126p
UNDEF:00006BBC ; struct UString __thiscall __high NWindows::NFile::CReparseAttr::GetPath()
UNDEF:00006BBC                 extrn ?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ:near
UNDEF:00006BBC                                         ; CODE XREF: CDirItems::FillFixedReparse(void)+10Ep
UNDEF:00006BC0 ; private: __thiscall UString::UString(unsigned int, class UString const &)
UNDEF:00006BC0                 extrn ??0UString@@AAE@IABV0@@Z:near
UNDEF:00006BC0                                         ; CODE XREF: UString::Left(uint)+29p
UNDEF:00006BC4 ; void *__cdecl operator new(unsigned int)
UNDEF:00006BC4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(CObjectVector<UString> const &)+81p
UNDEF:00006BC4                                         ; CObjectVector<UString>::operator=(CObjectVector<UString> const &)+8Ap ...
UNDEF:00006BC4
UNDEF:00006BC4
UNDEF:00006BC4                 end