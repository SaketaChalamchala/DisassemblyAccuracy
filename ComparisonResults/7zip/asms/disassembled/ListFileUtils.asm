.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : B1CF238D9F5CDBEA69EB0C89FE938695
.text:00000000 ; Input CRC32 : 246BA0DF
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ListFileUtils.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; int __stdcall ReadNamesFromListFile(wchar_t *, int, unsigned int)
.text:00000000                 public ?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z
.text:00000000 ?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z proc near
.text:00000000
.text:00000000 var_E8          = dword ptr -0E8h
.text:00000000 var_E4          = dword ptr -0E4h
.text:00000000 var_E0          = dword ptr -0E0h
.text:00000000 var_DC          = dword ptr -0DCh
.text:00000000 var_D8          = dword ptr -0D8h
.text:00000000 var_D4          = dword ptr -0D4h
.text:00000000 var_CE          = byte ptr -0CEh
.text:00000000 var_CD          = byte ptr -0CDh
.text:00000000 var_CC          = byte ptr -0CCh
.text:00000000 var_CB          = byte ptr -0CBh
.text:00000000 var_CA          = byte ptr -0CAh
.text:00000000 var_C9          = byte ptr -0C9h
.text:00000000 var_C8          = byte ptr -0C8h
.text:00000000 var_C7          = byte ptr -0C7h
.text:00000000 var_C6          = byte ptr -0C6h
.text:00000000 var_C5          = byte ptr -0C5h
.text:00000000 var_C4          = byte ptr -0C4h
.text:00000000 var_C3          = byte ptr -0C3h
.text:00000000 var_C2          = byte ptr -0C2h
.text:00000000 var_C1          = byte ptr -0C1h
.text:00000000 var_C0          = word ptr -0C0h
.text:00000000 var_BC          = dword ptr -0BCh
.text:00000000 var_B4          = byte ptr -0B4h
.text:00000000 var_A4          = word ptr -0A4h
.text:00000000 var_A0          = word ptr -0A0h
.text:00000000 var_98          = dword ptr -98h
.text:00000000 var_90          = dword ptr -90h
.text:00000000 var_88          = byte ptr -88h
.text:00000000 var_78          = word ptr -78h
.text:00000000 var_74          = dword ptr -74h
.text:00000000 var_70          = word ptr -70h
.text:00000000 var_6C          = dword ptr -6Ch
.text:00000000 var_68          = dword ptr -68h
.text:00000000 var_64          = dword ptr -64h
.text:00000000 var_5C          = dword ptr -5Ch
.text:00000000 var_50          = byte ptr -50h
.text:00000000 var_44          = byte ptr -44h
.text:00000000 var_30          = qword ptr -30h
.text:00000000 var_20          = byte ptr -20h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 sub     esp, 0DCh
.text:00000017                 push    esi
.text:00000018                 push    edi
.text:00000019                 lea     edi, [ebp+var_E8]
.text:0000001F                 mov     ecx, 37h ; '7'
.text:00000024                 mov     eax, 0CCCCCCCCh
.text:00000029                 rep stosd
.text:0000002B                 mov     eax, dword ptr ds:___security_cookie
.text:00000030                 xor     eax, ebp
.text:00000032                 push    eax
.text:00000033                 lea     eax, [ebp+var_C]
.text:00000036                 mov     large fs:0, eax
.text:0000003C                 lea     ecx, [ebp+var_20] ; this
.text:0000003F                 call    ??0CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::CInFile(void)
.text:00000044                 mov     [ebp+var_4], 0
.text:0000004B                 mov     eax, [ebp+arg_0]
.text:0000004E                 push    eax             ; wchar_t *
.text:0000004F                 lea     ecx, [ebp+var_20] ; this
.text:00000052                 call    ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NIO::CInFile::Open(wchar_t const *)
.text:00000057                 movzx   ecx, al
.text:0000005A                 test    ecx, ecx
.text:0000005C                 jnz     short loc_7F
.text:0000005E                 mov     [ebp+var_C1], 0
.text:00000065                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000006C                 lea     ecx, [ebp+var_20] ; this
.text:0000006F                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000074                 mov     al, [ebp+var_C1]
.text:0000007A                 jmp     loc_6F9
.text:0000007F ; ---------------------------------------------------------------------------
.text:0000007F
.text:0000007F loc_7F:                                 ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5Cj
.text:0000007F                 lea     edx, [ebp+var_30]
.text:00000082                 push    edx             ; unsigned __int64 *
.text:00000083                 lea     ecx, [ebp+var_20] ; this
.text:00000086                 call    ?GetLength@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z ; NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)
.text:0000008B                 movzx   eax, al
.text:0000008E                 test    eax, eax
.text:00000090                 jnz     short loc_B3
.text:00000092                 mov     [ebp+var_C2], 0
.text:00000099                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000A0                 lea     ecx, [ebp+var_20] ; this
.text:000000A3                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:000000A8                 mov     al, [ebp+var_C2]
.text:000000AE                 jmp     loc_6F9
.text:000000B3 ; ---------------------------------------------------------------------------
.text:000000B3
.text:000000B3 loc_B3:                                 ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+90j
.text:000000B3                 cmp     dword ptr [ebp+var_30+4], 0
.text:000000B7                 ja      short loc_C2
.text:000000B9                 cmp     dword ptr [ebp+var_30], 7FFFFFE0h
.text:000000C0                 jb      short loc_E3
.text:000000C2
.text:000000C2 loc_C2:                                 ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+B7j
.text:000000C2                 mov     [ebp+var_C3], 0
.text:000000C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000D0                 lea     ecx, [ebp+var_20] ; this
.text:000000D3                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:000000D8                 mov     al, [ebp+var_C3]
.text:000000DE                 jmp     loc_6F9
.text:000000E3 ; ---------------------------------------------------------------------------
.text:000000E3
.text:000000E3 loc_E3:                                 ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+C0j
.text:000000E3                 lea     ecx, [ebp+var_44]
.text:000000E6                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000000EB                 mov     byte ptr [ebp+var_4], 1
.text:000000EF                 cmp     [ebp+arg_8], 4B0h
.text:000000F6                 jz      short loc_105
.text:000000F8                 cmp     [ebp+arg_8], 4B1h
.text:000000FF                 jnz     loc_38F
.text:00000105
.text:00000105 loc_105:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+F6j
.text:00000105                 mov     ecx, dword ptr [ebp+var_30]
.text:00000108                 and     ecx, 1
.text:0000010B                 mov     edx, dword ptr [ebp+var_30+4]
.text:0000010E                 and     edx, 0
.text:00000111                 mov     [ebp+var_D8], ecx
.text:00000117                 mov     [ebp+var_D4], edx
.text:0000011D                 mov     eax, [ebp+var_D8]
.text:00000123                 or      eax, [ebp+var_D4]
.text:00000129                 jz      short loc_158
.text:0000012B                 mov     [ebp+var_C4], 0
.text:00000132                 mov     byte ptr [ebp+var_4], 0
.text:00000136                 lea     ecx, [ebp+var_44] ; this
.text:00000139                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000013E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000145                 lea     ecx, [ebp+var_20] ; this
.text:00000148                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:0000014D                 mov     al, [ebp+var_C4]
.text:00000153                 jmp     loc_6F9
.text:00000158 ; ---------------------------------------------------------------------------
.text:00000158
.text:00000158 loc_158:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+129j
.text:00000158                 mov     ecx, dword ptr [ebp+var_30]
.text:0000015B                 push    ecx
.text:0000015C                 lea     ecx, [ebp+var_50]
.text:0000015F                 call    ??0?$CObjArray@E@@QAE@I@Z ; CObjArray<uchar>::CObjArray<uchar>(uint)
.text:00000164                 mov     byte ptr [ebp+var_4], 2
.text:00000168                 lea     edx, [ebp+var_5C]
.text:0000016B                 push    edx             ; unsigned int *
.text:0000016C                 mov     eax, dword ptr [ebp+var_30]
.text:0000016F                 push    eax             ; unsigned int
.text:00000170                 lea     ecx, [ebp+var_50]
.text:00000173                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000178                 push    eax             ; void *
.text:00000179                 lea     ecx, [ebp+var_20] ; this
.text:0000017C                 call    ?Read@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z ; NWindows::NFile::NIO::CInFile::Read(void *,uint,uint &)
.text:00000181                 movzx   ecx, al
.text:00000184                 test    ecx, ecx
.text:00000186                 jnz     short loc_1C1
.text:00000188                 mov     [ebp+var_C5], 0
.text:0000018F                 mov     byte ptr [ebp+var_4], 1
.text:00000193                 lea     ecx, [ebp+var_50]
.text:00000196                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000019B                 mov     byte ptr [ebp+var_4], 0
.text:0000019F                 lea     ecx, [ebp+var_44] ; this
.text:000001A2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000001A7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001AE                 lea     ecx, [ebp+var_20] ; this
.text:000001B1                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:000001B6                 mov     al, [ebp+var_C5]
.text:000001BC                 jmp     loc_6F9
.text:000001C1 ; ---------------------------------------------------------------------------
.text:000001C1
.text:000001C1 loc_1C1:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+186j
.text:000001C1                 mov     edx, [ebp+var_5C]
.text:000001C4                 xor     eax, eax
.text:000001C6                 mov     [ebp+var_E0], edx
.text:000001CC                 mov     [ebp+var_DC], eax
.text:000001D2                 mov     ecx, [ebp+var_E0]
.text:000001D8                 cmp     ecx, dword ptr [ebp+var_30]
.text:000001DB                 jnz     short loc_1E8
.text:000001DD                 mov     edx, [ebp+var_DC]
.text:000001E3                 cmp     edx, dword ptr [ebp+var_30+4]
.text:000001E6                 jz      short loc_221
.text:000001E8
.text:000001E8 loc_1E8:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+1DBj
.text:000001E8                 mov     [ebp+var_C6], 0
.text:000001EF                 mov     byte ptr [ebp+var_4], 1
.text:000001F3                 lea     ecx, [ebp+var_50]
.text:000001F6                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:000001FB                 mov     byte ptr [ebp+var_4], 0
.text:000001FF                 lea     ecx, [ebp+var_44] ; this
.text:00000202                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000207                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000020E                 lea     ecx, [ebp+var_20] ; this
.text:00000211                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000216                 mov     al, [ebp+var_C6]
.text:0000021C                 jmp     loc_6F9
.text:00000221 ; ---------------------------------------------------------------------------
.text:00000221
.text:00000221 loc_221:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+1E6j
.text:00000221                 lea     ecx, [ebp+var_20] ; this
.text:00000224                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:00000229                 mov     eax, dword ptr [ebp+var_30]
.text:0000022C                 shr     eax, 1
.text:0000022E                 mov     [ebp+var_64], eax
.text:00000231                 mov     ecx, [ebp+var_64]
.text:00000234                 push    ecx             ; unsigned int
.text:00000235                 lea     ecx, [ebp+var_44] ; this
.text:00000238                 call    ?GetBuf@UString@@QAEPA_WI@Z ; UString::GetBuf(uint)
.text:0000023D                 mov     [ebp+var_68], eax
.text:00000240                 cmp     [ebp+arg_8], 4B0h
.text:00000247                 jnz     loc_2D0
.text:0000024D                 mov     [ebp+var_6C], 0
.text:00000254                 jmp     short loc_25F
.text:00000256 ; ---------------------------------------------------------------------------
.text:00000256
.text:00000256 loc_256:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+2C9j
.text:00000256                 mov     edx, [ebp+var_6C]
.text:00000259                 add     edx, 1
.text:0000025C                 mov     [ebp+var_6C], edx
.text:0000025F
.text:0000025F loc_25F:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+254j
.text:0000025F                 mov     eax, [ebp+var_6C]
.text:00000262                 cmp     eax, [ebp+var_64]
.text:00000265                 jnb     short loc_2CB
.text:00000267                 lea     ecx, [ebp+var_50]
.text:0000026A                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:0000026F                 mov     ecx, [ebp+var_6C]
.text:00000272                 mov     dx, [eax+ecx*2]
.text:00000276                 mov     [ebp+var_70], dx
.text:0000027A                 movzx   eax, [ebp+var_70]
.text:0000027E                 test    eax, eax
.text:00000280                 jnz     short loc_2BB
.text:00000282                 mov     [ebp+var_C7], 0
.text:00000289                 mov     byte ptr [ebp+var_4], 1
.text:0000028D                 lea     ecx, [ebp+var_50]
.text:00000290                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00000295                 mov     byte ptr [ebp+var_4], 0
.text:00000299                 lea     ecx, [ebp+var_44] ; this
.text:0000029C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000002A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002A8                 lea     ecx, [ebp+var_20] ; this
.text:000002AB                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:000002B0                 mov     al, [ebp+var_C7]
.text:000002B6                 jmp     loc_6F9
.text:000002BB ; ---------------------------------------------------------------------------
.text:000002BB
.text:000002BB loc_2BB:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+280j
.text:000002BB                 mov     ecx, [ebp+var_6C]
.text:000002BE                 mov     edx, [ebp+var_68]
.text:000002C1                 mov     ax, [ebp+var_70]
.text:000002C5                 mov     [edx+ecx*2], ax
.text:000002C9                 jmp     short loc_256
.text:000002CB ; ---------------------------------------------------------------------------
.text:000002CB
.text:000002CB loc_2CB:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+265j
.text:000002CB                 jmp     loc_366
.text:000002D0 ; ---------------------------------------------------------------------------
.text:000002D0
.text:000002D0 loc_2D0:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+247j
.text:000002D0                 mov     [ebp+var_74], 0
.text:000002D7                 jmp     short loc_2E2
.text:000002D9 ; ---------------------------------------------------------------------------
.text:000002D9
.text:000002D9 loc_2D9:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+361j
.text:000002D9                 mov     ecx, [ebp+var_74]
.text:000002DC                 add     ecx, 1
.text:000002DF                 mov     [ebp+var_74], ecx
.text:000002E2
.text:000002E2 loc_2E2:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+2D7j
.text:000002E2                 mov     edx, [ebp+var_74]
.text:000002E5                 cmp     edx, [ebp+var_64]
.text:000002E8                 jnb     short loc_366
.text:000002EA                 lea     ecx, [ebp+var_50]
.text:000002ED                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000002F2                 mov     ecx, [ebp+var_74]
.text:000002F5                 movzx   esi, byte ptr [eax+ecx*2]
.text:000002F9                 shl     esi, 8
.text:000002FC                 lea     ecx, [ebp+var_50]
.text:000002FF                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000304                 mov     edx, [ebp+var_74]
.text:00000307                 movzx   eax, byte ptr [eax+edx*2+1]
.text:0000030C                 or      esi, eax
.text:0000030E                 mov     [ebp+var_78], si
.text:00000312                 movzx   ecx, [ebp+var_78]
.text:00000316                 test    ecx, ecx
.text:00000318                 jnz     short loc_353
.text:0000031A                 mov     [ebp+var_C8], 0
.text:00000321                 mov     byte ptr [ebp+var_4], 1
.text:00000325                 lea     ecx, [ebp+var_50]
.text:00000328                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000032D                 mov     byte ptr [ebp+var_4], 0
.text:00000331                 lea     ecx, [ebp+var_44] ; this
.text:00000334                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000339                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000340                 lea     ecx, [ebp+var_20] ; this
.text:00000343                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000348                 mov     al, [ebp+var_C8]
.text:0000034E                 jmp     loc_6F9
.text:00000353 ; ---------------------------------------------------------------------------
.text:00000353
.text:00000353 loc_353:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+318j
.text:00000353                 mov     edx, [ebp+var_74]
.text:00000356                 mov     eax, [ebp+var_68]
.text:00000359                 mov     cx, [ebp+var_78]
.text:0000035D                 mov     [eax+edx*2], cx
.text:00000361                 jmp     loc_2D9
.text:00000366 ; ---------------------------------------------------------------------------
.text:00000366
.text:00000366 loc_366:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint):loc_2CBj
.text:00000366                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+2E8j
.text:00000366                 xor     edx, edx
.text:00000368                 mov     eax, [ebp+var_64]
.text:0000036B                 mov     ecx, [ebp+var_68]
.text:0000036E                 mov     [ecx+eax*2], dx
.text:00000372                 mov     edx, [ebp+var_64]
.text:00000375                 push    edx             ; unsigned int
.text:00000376                 lea     ecx, [ebp+var_44] ; this
.text:00000379                 call    ?ReleaseBuf_SetLen@UString@@QAEXI@Z ; UString::ReleaseBuf_SetLen(uint)
.text:0000037E                 mov     byte ptr [ebp+var_4], 1
.text:00000382                 lea     ecx, [ebp+var_50]
.text:00000385                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000038A                 jmp     loc_560
.text:0000038F ; ---------------------------------------------------------------------------
.text:0000038F
.text:0000038F loc_38F:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+FFj
.text:0000038F                 lea     ecx, [ebp+var_88]
.text:00000395                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:0000039A                 mov     byte ptr [ebp+var_4], 3
.text:0000039E                 mov     eax, dword ptr [ebp+var_30]
.text:000003A1                 push    eax             ; unsigned int
.text:000003A2                 lea     ecx, [ebp+var_88] ; this
.text:000003A8                 call    ?GetBuf@AString@@QAEPADI@Z ; AString::GetBuf(uint)
.text:000003AD                 mov     [ebp+var_90], eax
.text:000003B3                 lea     ecx, [ebp+var_98]
.text:000003B9                 push    ecx             ; unsigned int *
.text:000003BA                 mov     edx, dword ptr [ebp+var_30]
.text:000003BD                 push    edx             ; unsigned int
.text:000003BE                 mov     eax, [ebp+var_90]
.text:000003C4                 push    eax             ; void *
.text:000003C5                 lea     ecx, [ebp+var_20] ; this
.text:000003C8                 call    ?Read@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z ; NWindows::NFile::NIO::CInFile::Read(void *,uint,uint &)
.text:000003CD                 movzx   ecx, al
.text:000003D0                 test    ecx, ecx
.text:000003D2                 jnz     short loc_410
.text:000003D4                 mov     [ebp+var_C9], 0
.text:000003DB                 mov     byte ptr [ebp+var_4], 1
.text:000003DF                 lea     ecx, [ebp+var_88] ; this
.text:000003E5                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000003EA                 mov     byte ptr [ebp+var_4], 0
.text:000003EE                 lea     ecx, [ebp+var_44] ; this
.text:000003F1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000003F6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000003FD                 lea     ecx, [ebp+var_20] ; this
.text:00000400                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000405                 mov     al, [ebp+var_C9]
.text:0000040B                 jmp     loc_6F9
.text:00000410 ; ---------------------------------------------------------------------------
.text:00000410
.text:00000410 loc_410:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+3D2j
.text:00000410                 mov     edx, [ebp+var_98]
.text:00000416                 xor     eax, eax
.text:00000418                 mov     [ebp+var_E8], edx
.text:0000041E                 mov     [ebp+var_E4], eax
.text:00000424                 mov     ecx, [ebp+var_E8]
.text:0000042A                 cmp     ecx, dword ptr [ebp+var_30]
.text:0000042D                 jnz     short loc_43A
.text:0000042F                 mov     edx, [ebp+var_E4]
.text:00000435                 cmp     edx, dword ptr [ebp+var_30+4]
.text:00000438                 jz      short loc_476
.text:0000043A
.text:0000043A loc_43A:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+42Dj
.text:0000043A                 mov     [ebp+var_CA], 0
.text:00000441                 mov     byte ptr [ebp+var_4], 1
.text:00000445                 lea     ecx, [ebp+var_88] ; this
.text:0000044B                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000450                 mov     byte ptr [ebp+var_4], 0
.text:00000454                 lea     ecx, [ebp+var_44] ; this
.text:00000457                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000045C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000463                 lea     ecx, [ebp+var_20] ; this
.text:00000466                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:0000046B                 mov     al, [ebp+var_CA]
.text:00000471                 jmp     loc_6F9
.text:00000476 ; ---------------------------------------------------------------------------
.text:00000476
.text:00000476 loc_476:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+438j
.text:00000476                 lea     ecx, [ebp+var_20] ; this
.text:00000479                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:0000047E                 mov     eax, [ebp+var_98]
.text:00000484                 push    eax             ; unsigned int
.text:00000485                 lea     ecx, [ebp+var_88] ; this
.text:0000048B                 call    ?ReleaseBuf_CalcLen@AString@@QAEXI@Z ; AString::ReleaseBuf_CalcLen(uint)
.text:00000490                 lea     ecx, [ebp+var_88] ; this
.text:00000496                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:0000049B                 cmp     eax, [ebp+var_98]
.text:000004A1                 jz      short loc_4DF
.text:000004A3                 mov     [ebp+var_CB], 0
.text:000004AA                 mov     byte ptr [ebp+var_4], 1
.text:000004AE                 lea     ecx, [ebp+var_88] ; this
.text:000004B4                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000004B9                 mov     byte ptr [ebp+var_4], 0
.text:000004BD                 lea     ecx, [ebp+var_44] ; this
.text:000004C0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000004C5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000004CC                 lea     ecx, [ebp+var_20] ; this
.text:000004CF                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:000004D4                 mov     al, [ebp+var_CB]
.text:000004DA                 jmp     loc_6F9
.text:000004DF ; ---------------------------------------------------------------------------
.text:000004DF
.text:000004DF loc_4DF:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+4A1j
.text:000004DF                 cmp     [ebp+arg_8], 0FDE9h
.text:000004E6                 jnz     short loc_53D
.text:000004E8                 lea     ecx, [ebp+var_44]
.text:000004EB                 push    ecx             ; struct UString *
.text:000004EC                 lea     edx, [ebp+var_88]
.text:000004F2                 push    edx             ; struct AString *
.text:000004F3                 call    ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z ; ConvertUTF8ToUnicode(AString const &,UString &)
.text:000004F8                 movzx   eax, al
.text:000004FB                 test    eax, eax
.text:000004FD                 jnz     short loc_53B
.text:000004FF                 mov     [ebp+var_CC], 0
.text:00000506                 mov     byte ptr [ebp+var_4], 1
.text:0000050A                 lea     ecx, [ebp+var_88] ; this
.text:00000510                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000515                 mov     byte ptr [ebp+var_4], 0
.text:00000519                 lea     ecx, [ebp+var_44] ; this
.text:0000051C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000521                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000528                 lea     ecx, [ebp+var_20] ; this
.text:0000052B                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000530                 mov     al, [ebp+var_CC]
.text:00000536                 jmp     loc_6F9
.text:0000053B ; ---------------------------------------------------------------------------
.text:0000053B
.text:0000053B loc_53B:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+4FDj
.text:0000053B                 jmp     short loc_551
.text:0000053D ; ---------------------------------------------------------------------------
.text:0000053D
.text:0000053D loc_53D:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+4E6j
.text:0000053D                 mov     ecx, [ebp+arg_8]
.text:00000540                 push    ecx             ; unsigned int
.text:00000541                 lea     edx, [ebp+var_88]
.text:00000547                 push    edx             ; struct AString *
.text:00000548                 lea     eax, [ebp+var_44]
.text:0000054B                 push    eax             ; struct UString *
.text:0000054C                 call    ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString2(UString &,AString const &,uint)
.text:00000551
.text:00000551 loc_551:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint):loc_53Bj
.text:00000551                 mov     byte ptr [ebp+var_4], 1
.text:00000555                 lea     ecx, [ebp+var_88] ; this
.text:0000055B                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000560
.text:00000560 loc_560:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+38Aj
.text:00000560                 mov     ecx, 0FEFFh
.text:00000565                 mov     [ebp+var_A0], cx
.text:0000056C                 mov     edx, 0FFFEh
.text:00000571                 mov     [ebp+var_A4], dx
.text:00000578                 lea     ecx, [ebp+var_B4]
.text:0000057E                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000583                 mov     byte ptr [ebp+var_4], 4
.text:00000587                 mov     [ebp+var_BC], 0
.text:00000591                 jmp     short loc_5A2
.text:00000593 ; ---------------------------------------------------------------------------
.text:00000593
.text:00000593 loc_593:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5CCj
.text:00000593                 mov     eax, [ebp+var_BC]
.text:00000599                 add     eax, 1
.text:0000059C                 mov     [ebp+var_BC], eax
.text:000005A2
.text:000005A2 loc_5A2:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+591j
.text:000005A2                 lea     ecx, [ebp+var_44] ; this
.text:000005A5                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000005AA                 cmp     [ebp+var_BC], eax
.text:000005B0                 jnb     short loc_5CE
.text:000005B2                 lea     ecx, [ebp+var_44]
.text:000005B5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000005BA                 mov     ecx, [ebp+var_BC]
.text:000005C0                 movzx   edx, word ptr [eax+ecx*2]
.text:000005C4                 cmp     edx, 0FEFFh
.text:000005CA                 jnz     short loc_5CE
.text:000005CC                 jmp     short loc_593
.text:000005CE ; ---------------------------------------------------------------------------
.text:000005CE
.text:000005CE loc_5CE:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5B0j
.text:000005CE                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5CAj
.text:000005CE                 jmp     short loc_5DF
.text:000005D0 ; ---------------------------------------------------------------------------
.text:000005D0
.text:000005D0 loc_5D0:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint):loc_6ADj
.text:000005D0                 mov     eax, [ebp+var_BC]
.text:000005D6                 add     eax, 1
.text:000005D9                 mov     [ebp+var_BC], eax
.text:000005DF
.text:000005DF loc_5DF:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint):loc_5CEj
.text:000005DF                 lea     ecx, [ebp+var_44] ; this
.text:000005E2                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000005E7                 cmp     [ebp+var_BC], eax
.text:000005ED                 jnb     loc_6B2
.text:000005F3                 lea     ecx, [ebp+var_44]
.text:000005F6                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000005FB                 mov     ecx, [ebp+var_BC]
.text:00000601                 mov     dx, [eax+ecx*2]
.text:00000605                 mov     [ebp+var_C0], dx
.text:0000060C                 movzx   eax, [ebp+var_C0]
.text:00000613                 cmp     eax, 0FEFFh
.text:00000618                 jz      short loc_629
.text:0000061A                 movzx   ecx, [ebp+var_C0]
.text:00000621                 cmp     ecx, 0FFFEh
.text:00000627                 jnz     short loc_665
.text:00000629
.text:00000629 loc_629:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+618j
.text:00000629                 mov     [ebp+var_CD], 0
.text:00000630                 mov     byte ptr [ebp+var_4], 1
.text:00000634                 lea     ecx, [ebp+var_B4] ; this
.text:0000063A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000063F                 mov     byte ptr [ebp+var_4], 0
.text:00000643                 lea     ecx, [ebp+var_44] ; this
.text:00000646                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000064B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000652                 lea     ecx, [ebp+var_20] ; this
.text:00000655                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:0000065A                 mov     al, [ebp+var_CD]
.text:00000660                 jmp     loc_6F9
.text:00000665 ; ---------------------------------------------------------------------------
.text:00000665
.text:00000665 loc_665:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+627j
.text:00000665                 movzx   edx, [ebp+var_C0]
.text:0000066C                 cmp     edx, 0Ah
.text:0000066F                 jz      short loc_67D
.text:00000671                 movzx   eax, [ebp+var_C0]
.text:00000678                 cmp     eax, 0Dh
.text:0000067B                 jnz     short loc_69A
.text:0000067D
.text:0000067D loc_67D:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+66Fj
.text:0000067D                 lea     ecx, [ebp+var_B4]
.text:00000683                 push    ecx             ; UString *
.text:00000684                 mov     edx, [ebp+arg_4]
.text:00000687                 push    edx             ; int
.text:00000688                 call    ?AddName@@YGXAAV?$CObjectVector@VUString@@@@AAVUString@@@Z ; AddName(CObjectVector<UString> &,UString &)
.text:0000068D                 lea     ecx, [ebp+var_B4] ; this
.text:00000693                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00000698                 jmp     short loc_6AD
.text:0000069A ; ---------------------------------------------------------------------------
.text:0000069A
.text:0000069A loc_69A:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+67Bj
.text:0000069A                 movzx   eax, [ebp+var_C0]
.text:000006A1                 push    eax
.text:000006A2                 lea     ecx, [ebp+var_B4]
.text:000006A8                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:000006AD
.text:000006AD loc_6AD:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+698j
.text:000006AD                 jmp     loc_5D0
.text:000006B2 ; ---------------------------------------------------------------------------
.text:000006B2
.text:000006B2 loc_6B2:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5EDj
.text:000006B2                 lea     ecx, [ebp+var_B4]
.text:000006B8                 push    ecx             ; UString *
.text:000006B9                 mov     edx, [ebp+arg_4]
.text:000006BC                 push    edx             ; int
.text:000006BD                 call    ?AddName@@YGXAAV?$CObjectVector@VUString@@@@AAVUString@@@Z ; AddName(CObjectVector<UString> &,UString &)
.text:000006C2                 mov     [ebp+var_CE], 1
.text:000006C9                 mov     byte ptr [ebp+var_4], 1
.text:000006CD                 lea     ecx, [ebp+var_B4] ; this
.text:000006D3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000006D8                 mov     byte ptr [ebp+var_4], 0
.text:000006DC                 lea     ecx, [ebp+var_44] ; this
.text:000006DF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000006E4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006EB                 lea     ecx, [ebp+var_20] ; this
.text:000006EE                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:000006F3                 mov     al, [ebp+var_CE]
.text:000006F9
.text:000006F9 loc_6F9:                                ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+7Aj
.text:000006F9                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+AEj ...
.text:000006F9                 push    edx
.text:000006FA                 mov     ecx, ebp
.text:000006FC                 push    eax
.text:000006FD                 lea     edx, $LN57
.text:00000703                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000708                 pop     eax
.text:00000709                 pop     edx
.text:0000070A                 mov     ecx, [ebp+var_C]
.text:0000070D                 mov     large fs:0, ecx
.text:00000714                 pop     ecx
.text:00000715                 pop     edi
.text:00000716                 pop     esi
.text:00000717                 add     esp, 0E8h
.text:0000071D                 cmp     ebp, esp
.text:0000071F                 call    __RTC_CheckEsp
.text:00000724                 mov     esp, ebp
.text:00000726                 pop     ebp
.text:00000727                 retn    0Ch
.text:00000727 ?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z endp
.text:00000727
.text:00000727 ; ---------------------------------------------------------------------------
.text:0000072A                 align 4
.text:0000072C $LN57           dd 8                    ; DATA XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+6FDo
.text:00000730                 dd offset $LN56
.text:00000734 $LN56           dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:00000730o
.text:0000073C                 dd offset $LN47         ; "file"
.text:00000740                 dd 0FFFFFFD0h, 8
.text:00000748                 dd offset $LN48         ; "fileSize"
.text:0000074C                 dd 0FFFFFFBCh, 0Ch
.text:00000754                 dd offset $LN49         ; "u"
.text:00000758                 dd 0FFFFFFB0h, 4
.text:00000760                 dd offset $LN50         ; "buf"
.text:00000764                 dd 0FFFFFFA4h, 4
.text:0000076C                 dd offset $LN51         ; "processed"
.text:00000770                 dd 0FFFFFF78h, 0Ch
.text:00000778                 dd offset $LN52         ; "s"
.text:0000077C                 dd 0FFFFFF68h, 4
.text:00000784                 dd offset $LN53         ; "processed"
.text:00000788                 dd 0FFFFFF4Ch, 0Ch
.text:00000790                 dd offset $LN54
.text:00000794 $LN54           db 73h, 0               ; DATA XREF: .text:00000790o
.text:00000796 $LN53           db 'processed',0        ; DATA XREF: .text:00000784o
.text:000007A0 $LN52           db 's',0                ; DATA XREF: .text:00000778o
.text:000007A2 $LN51           db 'processed',0        ; DATA XREF: .text:0000076Co
.text:000007AC $LN50           db 'buf',0              ; DATA XREF: .text:00000760o
.text:000007B0 $LN49           db 'u',0                ; DATA XREF: .text:00000754o
.text:000007B2 $LN48           db 'fileSize',0         ; DATA XREF: .text:00000748o
.text:000007BB $LN47           db 'file',0             ; DATA XREF: .text:0000073Co
.text:000007C0
.text:000007C0 ; =============== S U B R O U T I N E =======================================
.text:000007C0
.text:000007C0 ; Attributes: bp-based frame
.text:000007C0
.text:000007C0 ; int __stdcall AddName(int, UString *)
.text:000007C0 ?AddName@@YGXAAV?$CObjectVector@VUString@@@@AAVUString@@@Z proc near
.text:000007C0                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+688p
.text:000007C0                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+6BDp
.text:000007C0
.text:000007C0 arg_0           = dword ptr  8
.text:000007C0 arg_4           = dword ptr  0Ch
.text:000007C0
.text:000007C0                 push    ebp
.text:000007C1                 mov     ebp, esp
.text:000007C3                 mov     ecx, [ebp+arg_4] ; this
.text:000007C6                 call    ?Trim@UString@@QAEXXZ ; UString::Trim(void)
.text:000007CB                 mov     ecx, [ebp+arg_4] ; this
.text:000007CE                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000007D3                 cmp     eax, 2
.text:000007D6                 jb      short loc_80A
.text:000007D8                 mov     ecx, [ebp+arg_4]
.text:000007DB                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000007E0                 movzx   eax, word ptr [eax]
.text:000007E3                 cmp     eax, 22h ; '"'
.text:000007E6                 jnz     short loc_80A
.text:000007E8                 mov     ecx, [ebp+arg_4] ; this
.text:000007EB                 call    ?Back@UString@@QBE_WXZ ; UString::Back(void)
.text:000007F0                 movzx   ecx, ax
.text:000007F3                 cmp     ecx, 22h ; '"'
.text:000007F6                 jnz     short loc_80A
.text:000007F8                 mov     ecx, [ebp+arg_4] ; this
.text:000007FB                 call    ?DeleteBack@UString@@QAEXXZ ; UString::DeleteBack(void)
.text:00000800                 push    0               ; unsigned int
.text:00000802                 mov     ecx, [ebp+arg_4] ; this
.text:00000805                 call    ?Delete@UString@@QAEXI@Z ; UString::Delete(uint)
.text:0000080A
.text:0000080A loc_80A:                                ; CODE XREF: AddName(CObjectVector<UString> &,UString &)+16j
.text:0000080A                                         ; AddName(CObjectVector<UString> &,UString &)+26j ...
.text:0000080A                 mov     ecx, [ebp+arg_4] ; this
.text:0000080D                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000812                 movzx   edx, al
.text:00000815                 test    edx, edx
.text:00000817                 jnz     short loc_825
.text:00000819                 mov     eax, [ebp+arg_4]
.text:0000081C                 push    eax
.text:0000081D                 mov     ecx, [ebp+arg_0]
.text:00000820                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00000825
.text:00000825 loc_825:                                ; CODE XREF: AddName(CObjectVector<UString> &,UString &)+57j
.text:00000825                 cmp     ebp, esp
.text:00000827                 call    __RTC_CheckEsp
.text:0000082C                 pop     ebp
.text:0000082D                 retn    8
.text:0000082D ?AddName@@YGXAAV?$CObjectVector@VUString@@@@AAVUString@@@Z endp
.text:0000082D
.text:0000082D _text           ends
.text:0000082D
.text$x:00000830 ; ===========================================================================
.text$x:00000830
.text$x:00000830 ; Segment type: Pure code
.text$x:00000830 ; Segment permissions: Read/Execute
.text$x:00000830 _text$x         segment para public 'CODE' use32
.text$x:00000830                 assume cs:_text$x
.text$x:00000830                 ;org 830h
.text$x:00000830                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000830
.text$x:00000830 ; =============== S U B R O U T I N E =======================================
.text$x:00000830
.text$x:00000830
.text$x:00000830 __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$0 proc near
.text$x:00000830                                         ; DATA XREF: .xdata$x:000008A4o
.text$x:00000830                 lea     ecx, [ebp-20h]  ; this
.text$x:00000833                 jmp     ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text$x:00000833 __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$0 endp
.text$x:00000833
.text$x:00000838
.text$x:00000838 ; =============== S U B R O U T I N E =======================================
.text$x:00000838
.text$x:00000838
.text$x:00000838 __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$1 proc near
.text$x:00000838                                         ; DATA XREF: .xdata$x:000008ACo
.text$x:00000838                 lea     ecx, [ebp-44h]  ; this
.text$x:0000083B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000083B __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$1 endp
.text$x:0000083B
.text$x:00000840
.text$x:00000840 ; =============== S U B R O U T I N E =======================================
.text$x:00000840
.text$x:00000840
.text$x:00000840 __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$2 proc near
.text$x:00000840                                         ; DATA XREF: .xdata$x:000008B4o
.text$x:00000840                 lea     ecx, [ebp-50h]
.text$x:00000843                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:00000843 __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$2 endp
.text$x:00000843
.text$x:00000848
.text$x:00000848 ; =============== S U B R O U T I N E =======================================
.text$x:00000848
.text$x:00000848
.text$x:00000848 __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$3 proc near
.text$x:00000848                                         ; DATA XREF: .xdata$x:000008BCo
.text$x:00000848                 lea     ecx, [ebp-88h]  ; this
.text$x:0000084E                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000084E __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$3 endp
.text$x:0000084E
.text$x:00000853
.text$x:00000853 ; =============== S U B R O U T I N E =======================================
.text$x:00000853
.text$x:00000853
.text$x:00000853 __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$4 proc near
.text$x:00000853                                         ; DATA XREF: .xdata$x:000008C4o
.text$x:00000853                 lea     ecx, [ebp-0B4h] ; this
.text$x:00000859                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000859 __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$4 endp
.text$x:00000859
.text$x:0000085E
.text$x:0000085E ; =============== S U B R O U T I N E =======================================
.text$x:0000085E
.text$x:0000085E
.text$x:0000085E __ehhandler$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z proc near
.text$x:0000085E                                         ; DATA XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5o
.text$x:0000085E
.text$x:0000085E arg_4           = dword ptr  8
.text$x:0000085E
.text$x:0000085E                 mov     edx, [esp+arg_4]
.text$x:00000862                 lea     eax, [edx+0Ch]
.text$x:00000865                 mov     ecx, [edx-0E8h]
.text$x:0000086B                 xor     ecx, eax
.text$x:0000086D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000872                 mov     eax, offset __ehfuncinfo$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z
.text$x:00000877                 jmp     ___CxxFrameHandler3
.text$x:00000877 __ehhandler$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z endp
.text$x:00000877
.text$x:00000877 _text$x         ends
.text$x:00000877
.xdata$x:0000087C ; ===========================================================================
.xdata$x:0000087C
.xdata$x:0000087C ; Segment type: Pure data
.xdata$x:0000087C ; Segment permissions: Read
.xdata$x:0000087C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000087C                 assume cs:_xdata$x
.xdata$x:0000087C                 ;org 87Ch
.xdata$x:0000087C __ehfuncinfo$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z db  22h ; "
.xdata$x:0000087C                                         ; DATA XREF: __ehhandler$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z+14o
.xdata$x:0000087D                 db    5
.xdata$x:0000087E                 db  93h ; ô
.xdata$x:0000087F                 db  19h
.xdata$x:00000880                 db    5
.xdata$x:00000881                 db    0
.xdata$x:00000882                 db    0
.xdata$x:00000883                 db    0
.xdata$x:00000884                 dd offset __unwindtable$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z
.xdata$x:00000888                 db    0
.xdata$x:00000889                 db    0
.xdata$x:0000088A                 db    0
.xdata$x:0000088B                 db    0
.xdata$x:0000088C                 db    0
.xdata$x:0000088D                 db    0
.xdata$x:0000088E                 db    0
.xdata$x:0000088F                 db    0
.xdata$x:00000890                 db    0
.xdata$x:00000891                 db    0
.xdata$x:00000892                 db    0
.xdata$x:00000893                 db    0
.xdata$x:00000894                 db    0
.xdata$x:00000895                 db    0
.xdata$x:00000896                 db    0
.xdata$x:00000897                 db    0
.xdata$x:00000898                 db    0
.xdata$x:00000899                 db    0
.xdata$x:0000089A                 db    0
.xdata$x:0000089B                 db    0
.xdata$x:0000089C                 db    1
.xdata$x:0000089D                 db    0
.xdata$x:0000089E                 db    0
.xdata$x:0000089F                 db    0
.xdata$x:000008A0 __unwindtable$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z db 0FFh
.xdata$x:000008A0                                         ; DATA XREF: .xdata$x:00000884o
.xdata$x:000008A1                 db 0FFh
.xdata$x:000008A2                 db 0FFh
.xdata$x:000008A3                 db 0FFh
.xdata$x:000008A4                 dd offset __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$0
.xdata$x:000008A8                 db    0
.xdata$x:000008A9                 db    0
.xdata$x:000008AA                 db    0
.xdata$x:000008AB                 db    0
.xdata$x:000008AC                 dd offset __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$1
.xdata$x:000008B0                 db    1
.xdata$x:000008B1                 db    0
.xdata$x:000008B2                 db    0
.xdata$x:000008B3                 db    0
.xdata$x:000008B4                 dd offset __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$2
.xdata$x:000008B8                 db    1
.xdata$x:000008B9                 db    0
.xdata$x:000008BA                 db    0
.xdata$x:000008BB                 db    0
.xdata$x:000008BC                 dd offset __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$3
.xdata$x:000008C0                 db    1
.xdata$x:000008C1                 db    0
.xdata$x:000008C2                 db    0
.xdata$x:000008C3                 db    0
.xdata$x:000008C4                 dd offset __unwindfunclet$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z$4
.xdata$x:000008C4 _xdata$x        ends
.xdata$x:000008C4
.rtc$TMZ:000008C8 ; ===========================================================================
.rtc$TMZ:000008C8
.rtc$TMZ:000008C8 ; Segment type: Pure data
.rtc$TMZ:000008C8 ; Segment permissions: Read
.rtc$TMZ:000008C8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000008C8                 assume cs:_rtc$TMZ
.rtc$TMZ:000008C8                 ;org 8C8h
.rtc$TMZ:000008C8 ; COMDAT (pick any)
.rtc$TMZ:000008C8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000008C8 _rtc$TMZ        ends
.rtc$TMZ:000008C8
.rtc$IMZ:000008CC ; ===========================================================================
.rtc$IMZ:000008CC
.rtc$IMZ:000008CC ; Segment type: Pure data
.rtc$IMZ:000008CC ; Segment permissions: Read
.rtc$IMZ:000008CC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000008CC                 assume cs:_rtc$IMZ
.rtc$IMZ:000008CC                 ;org 8CCh
.rtc$IMZ:000008CC ; COMDAT (pick any)
.rtc$IMZ:000008CC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000008CC _rtc$IMZ        ends
.rtc$IMZ:000008CC
.text:000008D0 ; ===========================================================================
.text:000008D0
.text:000008D0 ; Segment type: Pure code
.text:000008D0 ; Segment permissions: Read/Execute
.text:000008D0 _text           segment para public 'CODE' use32
.text:000008D0                 assume cs:_text
.text:000008D0                 ;org 8D0h
.text:000008D0 ; COMDAT (pick any)
.text:000008D0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000008D0
.text:000008D0 ; =============== S U B R O U T I N E =======================================
.text:000008D0
.text:000008D0 ; Attributes: bp-based frame
.text:000008D0
.text:000008D0 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000008D0                 public ??1AString@@QAE@XZ
.text:000008D0 ??1AString@@QAE@XZ proc near            ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+3E5p
.text:000008D0                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+44Bp ...
.text:000008D0
.text:000008D0 var_8           = dword ptr -8
.text:000008D0 var_4           = dword ptr -4
.text:000008D0
.text:000008D0                 push    ebp
.text:000008D1                 mov     ebp, esp
.text:000008D3                 sub     esp, 8
.text:000008D6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000008DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008E4                 mov     [ebp+var_4], ecx
.text:000008E7                 mov     eax, [ebp+var_4]
.text:000008EA                 mov     ecx, [eax]
.text:000008EC                 mov     [ebp+var_8], ecx
.text:000008EF                 mov     edx, [ebp+var_8]
.text:000008F2                 push    edx             ; void *
.text:000008F3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000008F8                 add     esp, 4
.text:000008FB                 add     esp, 8
.text:000008FE                 cmp     ebp, esp
.text:00000900                 call    __RTC_CheckEsp
.text:00000905                 mov     esp, ebp
.text:00000907                 pop     ebp
.text:00000908                 retn
.text:00000908 ??1AString@@QAE@XZ endp
.text:00000908
.text:00000908 ; ---------------------------------------------------------------------------
.text:00000909                 align 4
.text:00000909 _text           ends
.text:00000909
.text:0000090C ; ===========================================================================
.text:0000090C
.text:0000090C ; Segment type: Pure code
.text:0000090C ; Segment permissions: Read/Execute
.text:0000090C _text           segment para public 'CODE' use32
.text:0000090C                 assume cs:_text
.text:0000090C                 ;org 90Ch
.text:0000090C ; COMDAT (pick any)
.text:0000090C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:0000090C
.text:0000090C ; =============== S U B R O U T I N E =======================================
.text:0000090C
.text:0000090C ; Attributes: bp-based frame
.text:0000090C
.text:0000090C ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:0000090C                 public ?Len@AString@@QBEIXZ
.text:0000090C ?Len@AString@@QBEIXZ proc near          ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+496p
.text:0000090C
.text:0000090C var_4           = dword ptr -4
.text:0000090C
.text:0000090C                 push    ebp
.text:0000090D                 mov     ebp, esp
.text:0000090F                 push    ecx
.text:00000910                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000917                 mov     [ebp+var_4], ecx
.text:0000091A                 mov     eax, [ebp+var_4]
.text:0000091D                 mov     eax, [eax+4]
.text:00000920                 mov     esp, ebp
.text:00000922                 pop     ebp
.text:00000923                 retn
.text:00000923 ?Len@AString@@QBEIXZ endp
.text:00000923
.text:00000923 _text           ends
.text:00000923
.text:00000924 ; ===========================================================================
.text:00000924
.text:00000924 ; Segment type: Pure code
.text:00000924 ; Segment permissions: Read/Execute
.text:00000924 _text           segment para public 'CODE' use32
.text:00000924                 assume cs:_text
.text:00000924                 ;org 924h
.text:00000924 ; COMDAT (pick any)
.text:00000924                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000924
.text:00000924 ; =============== S U B R O U T I N E =======================================
.text:00000924
.text:00000924 ; Attributes: bp-based frame
.text:00000924
.text:00000924 ; char *__thiscall AString::GetBuf(AString *this, unsigned int)
.text:00000924                 public ?GetBuf@AString@@QAEPADI@Z
.text:00000924 ?GetBuf@AString@@QAEPADI@Z proc near    ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+3A8p
.text:00000924
.text:00000924 var_4           = dword ptr -4
.text:00000924 arg_0           = dword ptr  8
.text:00000924
.text:00000924                 push    ebp
.text:00000925                 mov     ebp, esp
.text:00000927                 push    ecx
.text:00000928                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000092F                 mov     [ebp+var_4], ecx
.text:00000932                 mov     eax, [ebp+var_4]
.text:00000935                 mov     ecx, [ebp+arg_0]
.text:00000938                 cmp     ecx, [eax+8]
.text:0000093B                 jbe     short loc_949
.text:0000093D                 mov     edx, [ebp+arg_0]
.text:00000940                 push    edx             ; unsigned int
.text:00000941                 mov     ecx, [ebp+var_4] ; this
.text:00000944                 call    ?ReAlloc2@AString@@AAEXI@Z ; AString::ReAlloc2(uint)
.text:00000949
.text:00000949 loc_949:                                ; CODE XREF: AString::GetBuf(uint)+17j
.text:00000949                 mov     eax, [ebp+var_4]
.text:0000094C                 mov     eax, [eax]
.text:0000094E                 add     esp, 4
.text:00000951                 cmp     ebp, esp
.text:00000953                 call    __RTC_CheckEsp
.text:00000958                 mov     esp, ebp
.text:0000095A                 pop     ebp
.text:0000095B                 retn    4
.text:0000095B ?GetBuf@AString@@QAEPADI@Z endp
.text:0000095B
.text:0000095B ; ---------------------------------------------------------------------------
.text:0000095E                 align 10h
.text:0000095E _text           ends
.text:0000095E
.text:00000960 ; ===========================================================================
.text:00000960
.text:00000960 ; Segment type: Pure code
.text:00000960 ; Segment permissions: Read/Execute
.text:00000960 _text           segment para public 'CODE' use32
.text:00000960                 assume cs:_text
.text:00000960                 ;org 960h
.text:00000960 ; COMDAT (pick any)
.text:00000960                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000960
.text:00000960 ; =============== S U B R O U T I N E =======================================
.text:00000960
.text:00000960 ; Attributes: bp-based frame
.text:00000960
.text:00000960 ; void __thiscall AString::ReleaseBuf_CalcLen(AString *this, unsigned int)
.text:00000960                 public ?ReleaseBuf_CalcLen@AString@@QAEXI@Z
.text:00000960 ?ReleaseBuf_CalcLen@AString@@QAEXI@Z proc near
.text:00000960                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+48Bp
.text:00000960
.text:00000960 var_8           = dword ptr -8
.text:00000960 var_4           = dword ptr -4
.text:00000960 arg_0           = dword ptr  8
.text:00000960
.text:00000960                 push    ebp
.text:00000961                 mov     ebp, esp
.text:00000963                 sub     esp, 8
.text:00000966                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000096D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000974                 mov     [ebp+var_4], ecx
.text:00000977                 mov     eax, [ebp+var_4]
.text:0000097A                 mov     ecx, [eax]
.text:0000097C                 mov     [ebp+var_8], ecx
.text:0000097F                 mov     edx, [ebp+var_8]
.text:00000982                 add     edx, [ebp+arg_0]
.text:00000985                 mov     byte ptr [edx], 0
.text:00000988                 mov     eax, [ebp+var_8]
.text:0000098B                 push    eax             ; char *
.text:0000098C                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00000991                 mov     ecx, [ebp+var_4]
.text:00000994                 mov     [ecx+4], eax
.text:00000997                 add     esp, 8
.text:0000099A                 cmp     ebp, esp
.text:0000099C                 call    __RTC_CheckEsp
.text:000009A1                 mov     esp, ebp
.text:000009A3                 pop     ebp
.text:000009A4                 retn    4
.text:000009A4 ?ReleaseBuf_CalcLen@AString@@QAEXI@Z endp
.text:000009A4
.text:000009A4 ; ---------------------------------------------------------------------------
.text:000009A7                 align 4
.text:000009A7 _text           ends
.text:000009A7
.text:000009A8 ; ===========================================================================
.text:000009A8
.text:000009A8 ; Segment type: Pure code
.text:000009A8 ; Segment permissions: Read/Execute
.text:000009A8 _text           segment para public 'CODE' use32
.text:000009A8                 assume cs:_text
.text:000009A8                 ;org 9A8h
.text:000009A8 ; COMDAT (pick any)
.text:000009A8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000009A8
.text:000009A8 ; =============== S U B R O U T I N E =======================================
.text:000009A8
.text:000009A8 ; Attributes: bp-based frame
.text:000009A8
.text:000009A8 ; unsigned int __stdcall MyStringLen(const char *)
.text:000009A8                 public ?MyStringLen@@YGIPBD@Z
.text:000009A8 ?MyStringLen@@YGIPBD@Z proc near        ; CODE XREF: AString::ReleaseBuf_CalcLen(uint)+2Cp
.text:000009A8
.text:000009A8 var_4           = dword ptr -4
.text:000009A8 arg_0           = dword ptr  8
.text:000009A8
.text:000009A8                 push    ebp
.text:000009A9                 mov     ebp, esp
.text:000009AB                 push    ecx
.text:000009AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009B3                 mov     [ebp+var_4], 0
.text:000009BA                 jmp     short loc_9C5
.text:000009BC ; ---------------------------------------------------------------------------
.text:000009BC
.text:000009BC loc_9BC:                                ; CODE XREF: MyStringLen(char const *)+2Aj
.text:000009BC                 mov     eax, [ebp+var_4]
.text:000009BF                 add     eax, 1
.text:000009C2                 mov     [ebp+var_4], eax
.text:000009C5
.text:000009C5 loc_9C5:                                ; CODE XREF: MyStringLen(char const *)+12j
.text:000009C5                 mov     ecx, [ebp+arg_0]
.text:000009C8                 add     ecx, [ebp+var_4]
.text:000009CB                 movsx   edx, byte ptr [ecx]
.text:000009CE                 test    edx, edx
.text:000009D0                 jz      short loc_9D4
.text:000009D2                 jmp     short loc_9BC
.text:000009D4 ; ---------------------------------------------------------------------------
.text:000009D4
.text:000009D4 loc_9D4:                                ; CODE XREF: MyStringLen(char const *)+28j
.text:000009D4                 mov     eax, [ebp+var_4]
.text:000009D7                 mov     esp, ebp
.text:000009D9                 pop     ebp
.text:000009DA                 retn    4
.text:000009DA ?MyStringLen@@YGIPBD@Z endp
.text:000009DA
.text:000009DA ; ---------------------------------------------------------------------------
.text:000009DD                 align 10h
.text:000009DD _text           ends
.text:000009DD
.text:000009E0 ; ===========================================================================
.text:000009E0
.text:000009E0 ; Segment type: Pure code
.text:000009E0 ; Segment permissions: Read/Execute
.text:000009E0 _text           segment para public 'CODE' use32
.text:000009E0                 assume cs:_text
.text:000009E0                 ;org 9E0h
.text:000009E0 ; COMDAT (pick any)
.text:000009E0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000009E0
.text:000009E0 ; =============== S U B R O U T I N E =======================================
.text:000009E0
.text:000009E0 ; Attributes: bp-based frame
.text:000009E0
.text:000009E0 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:000009E0                 public ??1UString@@QAE@XZ
.text:000009E0 ??1UString@@QAE@XZ proc near            ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+139p
.text:000009E0                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+1A2p ...
.text:000009E0
.text:000009E0 var_8           = dword ptr -8
.text:000009E0 var_4           = dword ptr -4
.text:000009E0
.text:000009E0                 push    ebp
.text:000009E1                 mov     ebp, esp
.text:000009E3                 sub     esp, 8
.text:000009E6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000009ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009F4                 mov     [ebp+var_4], ecx
.text:000009F7                 mov     eax, [ebp+var_4]
.text:000009FA                 mov     ecx, [eax]
.text:000009FC                 mov     [ebp+var_8], ecx
.text:000009FF                 mov     edx, [ebp+var_8]
.text:00000A02                 push    edx             ; void *
.text:00000A03                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000A08                 add     esp, 4
.text:00000A0B                 add     esp, 8
.text:00000A0E                 cmp     ebp, esp
.text:00000A10                 call    __RTC_CheckEsp
.text:00000A15                 mov     esp, ebp
.text:00000A17                 pop     ebp
.text:00000A18                 retn
.text:00000A18 ??1UString@@QAE@XZ endp
.text:00000A18
.text:00000A18 ; ---------------------------------------------------------------------------
.text:00000A19                 align 4
.text:00000A19 _text           ends
.text:00000A19
.text:00000A1C ; ===========================================================================
.text:00000A1C
.text:00000A1C ; Segment type: Pure code
.text:00000A1C ; Segment permissions: Read/Execute
.text:00000A1C _text           segment para public 'CODE' use32
.text:00000A1C                 assume cs:_text
.text:00000A1C                 ;org 0A1Ch
.text:00000A1C ; COMDAT (pick any)
.text:00000A1C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A1C
.text:00000A1C ; =============== S U B R O U T I N E =======================================
.text:00000A1C
.text:00000A1C ; Attributes: bp-based frame
.text:00000A1C
.text:00000A1C ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00000A1C                 public ?Len@UString@@QBEIXZ
.text:00000A1C ?Len@UString@@QBEIXZ proc near          ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5A5p
.text:00000A1C                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5E2p ...
.text:00000A1C
.text:00000A1C var_4           = dword ptr -4
.text:00000A1C
.text:00000A1C                 push    ebp
.text:00000A1D                 mov     ebp, esp
.text:00000A1F                 push    ecx
.text:00000A20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A27                 mov     [ebp+var_4], ecx
.text:00000A2A                 mov     eax, [ebp+var_4]
.text:00000A2D                 mov     eax, [eax+4]
.text:00000A30                 mov     esp, ebp
.text:00000A32                 pop     ebp
.text:00000A33                 retn
.text:00000A33 ?Len@UString@@QBEIXZ endp
.text:00000A33
.text:00000A33 _text           ends
.text:00000A33
.text:00000A34 ; ===========================================================================
.text:00000A34
.text:00000A34 ; Segment type: Pure code
.text:00000A34 ; Segment permissions: Read/Execute
.text:00000A34 _text           segment para public 'CODE' use32
.text:00000A34                 assume cs:_text
.text:00000A34                 ;org 0A34h
.text:00000A34 ; COMDAT (pick any)
.text:00000A34                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A34
.text:00000A34 ; =============== S U B R O U T I N E =======================================
.text:00000A34
.text:00000A34 ; Attributes: bp-based frame
.text:00000A34
.text:00000A34 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00000A34                 public ?Empty@UString@@QAEXXZ
.text:00000A34 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+693p
.text:00000A34
.text:00000A34 var_4           = dword ptr -4
.text:00000A34
.text:00000A34                 push    ebp
.text:00000A35                 mov     ebp, esp
.text:00000A37                 push    ecx
.text:00000A38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A3F                 mov     [ebp+var_4], ecx
.text:00000A42                 mov     eax, [ebp+var_4]
.text:00000A45                 mov     dword ptr [eax+4], 0
.text:00000A4C                 mov     ecx, [ebp+var_4]
.text:00000A4F                 mov     edx, [ecx]
.text:00000A51                 xor     eax, eax
.text:00000A53                 mov     [edx], ax
.text:00000A56                 mov     esp, ebp
.text:00000A58                 pop     ebp
.text:00000A59                 retn
.text:00000A59 ?Empty@UString@@QAEXXZ endp
.text:00000A59
.text:00000A59 ; ---------------------------------------------------------------------------
.text:00000A5A                 align 4
.text:00000A5A _text           ends
.text:00000A5A
.text:00000A5C ; ===========================================================================
.text:00000A5C
.text:00000A5C ; Segment type: Pure code
.text:00000A5C ; Segment permissions: Read/Execute
.text:00000A5C _text           segment para public 'CODE' use32
.text:00000A5C                 assume cs:_text
.text:00000A5C                 ;org 0A5Ch
.text:00000A5C ; COMDAT (pick any)
.text:00000A5C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A5C
.text:00000A5C ; =============== S U B R O U T I N E =======================================
.text:00000A5C
.text:00000A5C ; Attributes: bp-based frame
.text:00000A5C
.text:00000A5C ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000A5C                 public ??BUString@@QBEPB_WXZ
.text:00000A5C ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5B5p
.text:00000A5C                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+5F6p ...
.text:00000A5C
.text:00000A5C var_4           = dword ptr -4
.text:00000A5C
.text:00000A5C                 push    ebp
.text:00000A5D                 mov     ebp, esp
.text:00000A5F                 push    ecx
.text:00000A60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A67                 mov     [ebp+var_4], ecx
.text:00000A6A                 mov     eax, [ebp+var_4]
.text:00000A6D                 mov     eax, [eax]
.text:00000A6F                 mov     esp, ebp
.text:00000A71                 pop     ebp
.text:00000A72                 retn
.text:00000A72 ??BUString@@QBEPB_WXZ endp
.text:00000A72
.text:00000A72 ; ---------------------------------------------------------------------------
.text:00000A73                 align 4
.text:00000A73 _text           ends
.text:00000A73
.text:00000A74 ; ===========================================================================
.text:00000A74
.text:00000A74 ; Segment type: Pure code
.text:00000A74 ; Segment permissions: Read/Execute
.text:00000A74 _text           segment para public 'CODE' use32
.text:00000A74                 assume cs:_text
.text:00000A74                 ;org 0A74h
.text:00000A74 ; COMDAT (pick any)
.text:00000A74                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A74
.text:00000A74 ; =============== S U B R O U T I N E =======================================
.text:00000A74
.text:00000A74 ; Attributes: bp-based frame
.text:00000A74
.text:00000A74 ; wchar_t *__thiscall UString::GetBuf(UString *this, unsigned int)
.text:00000A74                 public ?GetBuf@UString@@QAEPA_WI@Z
.text:00000A74 ?GetBuf@UString@@QAEPA_WI@Z proc near   ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+238p
.text:00000A74
.text:00000A74 var_4           = dword ptr -4
.text:00000A74 arg_0           = dword ptr  8
.text:00000A74
.text:00000A74                 push    ebp
.text:00000A75                 mov     ebp, esp
.text:00000A77                 push    ecx
.text:00000A78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A7F                 mov     [ebp+var_4], ecx
.text:00000A82                 mov     eax, [ebp+var_4]
.text:00000A85                 mov     ecx, [ebp+arg_0]
.text:00000A88                 cmp     ecx, [eax+8]
.text:00000A8B                 jbe     short loc_A99
.text:00000A8D                 mov     edx, [ebp+arg_0]
.text:00000A90                 push    edx             ; unsigned int
.text:00000A91                 mov     ecx, [ebp+var_4] ; this
.text:00000A94                 call    ?ReAlloc2@UString@@AAEXI@Z ; UString::ReAlloc2(uint)
.text:00000A99
.text:00000A99 loc_A99:                                ; CODE XREF: UString::GetBuf(uint)+17j
.text:00000A99                 mov     eax, [ebp+var_4]
.text:00000A9C                 mov     eax, [eax]
.text:00000A9E                 add     esp, 4
.text:00000AA1                 cmp     ebp, esp
.text:00000AA3                 call    __RTC_CheckEsp
.text:00000AA8                 mov     esp, ebp
.text:00000AAA                 pop     ebp
.text:00000AAB                 retn    4
.text:00000AAB ?GetBuf@UString@@QAEPA_WI@Z endp
.text:00000AAB
.text:00000AAB ; ---------------------------------------------------------------------------
.text:00000AAE                 align 10h
.text:00000AAE _text           ends
.text:00000AAE
.text:00000AB0 ; ===========================================================================
.text:00000AB0
.text:00000AB0 ; Segment type: Pure code
.text:00000AB0 ; Segment permissions: Read/Execute
.text:00000AB0 _text           segment para public 'CODE' use32
.text:00000AB0                 assume cs:_text
.text:00000AB0                 ;org 0AB0h
.text:00000AB0 ; COMDAT (pick any)
.text:00000AB0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000AB0
.text:00000AB0 ; =============== S U B R O U T I N E =======================================
.text:00000AB0
.text:00000AB0 ; Attributes: bp-based frame
.text:00000AB0
.text:00000AB0 ; void __thiscall UString::ReleaseBuf_SetLen(UString *this, unsigned int)
.text:00000AB0                 public ?ReleaseBuf_SetLen@UString@@QAEXI@Z
.text:00000AB0 ?ReleaseBuf_SetLen@UString@@QAEXI@Z proc near
.text:00000AB0                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+379p
.text:00000AB0
.text:00000AB0 var_4           = dword ptr -4
.text:00000AB0 arg_0           = dword ptr  8
.text:00000AB0
.text:00000AB0                 push    ebp
.text:00000AB1                 mov     ebp, esp
.text:00000AB3                 push    ecx
.text:00000AB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ABB                 mov     [ebp+var_4], ecx
.text:00000ABE                 mov     eax, [ebp+var_4]
.text:00000AC1                 mov     ecx, [ebp+arg_0]
.text:00000AC4                 mov     [eax+4], ecx
.text:00000AC7                 mov     esp, ebp
.text:00000AC9                 pop     ebp
.text:00000ACA                 retn    4
.text:00000ACA ?ReleaseBuf_SetLen@UString@@QAEXI@Z endp
.text:00000ACA
.text:00000ACA ; ---------------------------------------------------------------------------
.text:00000ACD                 align 10h
.text:00000ACD _text           ends
.text:00000ACD
.text:00000AD0 ; ===========================================================================
.text:00000AD0
.text:00000AD0 ; Segment type: Pure code
.text:00000AD0 ; Segment permissions: Read/Execute
.text:00000AD0 _text           segment para public 'CODE' use32
.text:00000AD0                 assume cs:_text
.text:00000AD0                 ;org 0AD0h
.text:00000AD0 ; COMDAT (pick any)
.text:00000AD0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000AD0
.text:00000AD0 ; =============== S U B R O U T I N E =======================================
.text:00000AD0
.text:00000AD0 ; Attributes: bp-based frame
.text:00000AD0
.text:00000AD0 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:00000AD0                 public ??YUString@@QAEAAV0@_W@Z
.text:00000AD0 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+6A8p
.text:00000AD0
.text:00000AD0 var_C           = dword ptr -0Ch
.text:00000AD0 var_8           = dword ptr -8
.text:00000AD0 var_4           = dword ptr -4
.text:00000AD0 arg_0           = word ptr  8
.text:00000AD0
.text:00000AD0                 push    ebp
.text:00000AD1                 mov     ebp, esp
.text:00000AD3                 sub     esp, 0Ch
.text:00000AD6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000ADD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000AE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AEB                 mov     [ebp+var_4], ecx
.text:00000AEE                 mov     eax, [ebp+var_4]
.text:00000AF1                 mov     ecx, [ebp+var_4]
.text:00000AF4                 mov     edx, [eax+8]
.text:00000AF7                 cmp     edx, [ecx+4]
.text:00000AFA                 jnz     short loc_B04
.text:00000AFC                 mov     ecx, [ebp+var_4] ; this
.text:00000AFF                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:00000B04
.text:00000B04 loc_B04:                                ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:00000B04                 mov     eax, [ebp+var_4]
.text:00000B07                 mov     ecx, [eax+4]
.text:00000B0A                 mov     [ebp+var_8], ecx
.text:00000B0D                 mov     edx, [ebp+var_4]
.text:00000B10                 mov     eax, [edx]
.text:00000B12                 mov     [ebp+var_C], eax
.text:00000B15                 mov     ecx, [ebp+var_8]
.text:00000B18                 mov     edx, [ebp+var_C]
.text:00000B1B                 mov     ax, [ebp+arg_0]
.text:00000B1F                 mov     [edx+ecx*2], ax
.text:00000B23                 mov     ecx, [ebp+var_8]
.text:00000B26                 add     ecx, 1
.text:00000B29                 mov     [ebp+var_8], ecx
.text:00000B2C                 xor     edx, edx
.text:00000B2E                 mov     eax, [ebp+var_8]
.text:00000B31                 mov     ecx, [ebp+var_C]
.text:00000B34                 mov     [ecx+eax*2], dx
.text:00000B38                 mov     edx, [ebp+var_4]
.text:00000B3B                 mov     eax, [ebp+var_8]
.text:00000B3E                 mov     [edx+4], eax
.text:00000B41                 mov     eax, [ebp+var_4]
.text:00000B44                 add     esp, 0Ch
.text:00000B47                 cmp     ebp, esp
.text:00000B49                 call    __RTC_CheckEsp
.text:00000B4E                 mov     esp, ebp
.text:00000B50                 pop     ebp
.text:00000B51                 retn    4
.text:00000B51 ??YUString@@QAEAAV0@_W@Z endp
.text:00000B51
.text:00000B51 _text           ends
.text:00000B51
.text:00000B54 ; ===========================================================================
.text:00000B54
.text:00000B54 ; Segment type: Pure code
.text:00000B54 ; Segment permissions: Read/Execute
.text:00000B54 _text           segment para public 'CODE' use32
.text:00000B54                 assume cs:_text
.text:00000B54                 ;org 0B54h
.text:00000B54 ; COMDAT (pick any)
.text:00000B54                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B54
.text:00000B54 ; =============== S U B R O U T I N E =======================================
.text:00000B54
.text:00000B54 ; Attributes: bp-based frame
.text:00000B54
.text:00000B54 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00000B54                 public ?IsEmpty@UString@@QBE_NXZ
.text:00000B54 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: AddName(CObjectVector<UString> &,UString &)+4Dp
.text:00000B54
.text:00000B54 var_4           = dword ptr -4
.text:00000B54
.text:00000B54                 push    ebp
.text:00000B55                 mov     ebp, esp
.text:00000B57                 push    ecx
.text:00000B58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B5F                 mov     [ebp+var_4], ecx
.text:00000B62                 mov     eax, [ebp+var_4]
.text:00000B65                 xor     ecx, ecx
.text:00000B67                 cmp     dword ptr [eax+4], 0
.text:00000B6B                 setz    cl
.text:00000B6E                 mov     al, cl
.text:00000B70                 mov     esp, ebp
.text:00000B72                 pop     ebp
.text:00000B73                 retn
.text:00000B73 ?IsEmpty@UString@@QBE_NXZ endp
.text:00000B73
.text:00000B73 _text           ends
.text:00000B73
.text:00000B74 ; ===========================================================================
.text:00000B74
.text:00000B74 ; Segment type: Pure code
.text:00000B74 ; Segment permissions: Read/Execute
.text:00000B74 _text           segment para public 'CODE' use32
.text:00000B74                 assume cs:_text
.text:00000B74                 ;org 0B74h
.text:00000B74 ; COMDAT (pick any)
.text:00000B74                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B74
.text:00000B74 ; =============== S U B R O U T I N E =======================================
.text:00000B74
.text:00000B74 ; Attributes: bp-based frame
.text:00000B74
.text:00000B74 ; wchar_t __thiscall UString::Back(UString *__hidden this)
.text:00000B74                 public ?Back@UString@@QBE_WXZ
.text:00000B74 ?Back@UString@@QBE_WXZ proc near        ; CODE XREF: AddName(CObjectVector<UString> &,UString &)+2Bp
.text:00000B74
.text:00000B74 var_4           = dword ptr -4
.text:00000B74
.text:00000B74                 push    ebp
.text:00000B75                 mov     ebp, esp
.text:00000B77                 push    ecx
.text:00000B78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B7F                 mov     [ebp+var_4], ecx
.text:00000B82                 mov     eax, [ebp+var_4]
.text:00000B85                 mov     ecx, [eax+4]
.text:00000B88                 mov     edx, [ebp+var_4]
.text:00000B8B                 mov     eax, [edx]
.text:00000B8D                 mov     ax, [eax+ecx*2-2]
.text:00000B92                 mov     esp, ebp
.text:00000B94                 pop     ebp
.text:00000B95                 retn
.text:00000B95 ?Back@UString@@QBE_WXZ endp
.text:00000B95
.text:00000B95 ; ---------------------------------------------------------------------------
.text:00000B96                 align 4
.text:00000B96 _text           ends
.text:00000B96
.text:00000B98 ; ===========================================================================
.text:00000B98
.text:00000B98 ; Segment type: Pure code
.text:00000B98 ; Segment permissions: Read/Execute
.text:00000B98 _text           segment para public 'CODE' use32
.text:00000B98                 assume cs:_text
.text:00000B98                 ;org 0B98h
.text:00000B98 ; COMDAT (pick any)
.text:00000B98                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B98
.text:00000B98 ; =============== S U B R O U T I N E =======================================
.text:00000B98
.text:00000B98 ; Attributes: bp-based frame
.text:00000B98
.text:00000B98 ; void __thiscall UString::Trim(UString *__hidden this)
.text:00000B98                 public ?Trim@UString@@QAEXXZ
.text:00000B98 ?Trim@UString@@QAEXXZ proc near         ; CODE XREF: AddName(CObjectVector<UString> &,UString &)+6p
.text:00000B98
.text:00000B98 var_4           = dword ptr -4
.text:00000B98
.text:00000B98                 push    ebp
.text:00000B99                 mov     ebp, esp
.text:00000B9B                 push    ecx
.text:00000B9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BA3                 mov     [ebp+var_4], ecx
.text:00000BA6                 mov     ecx, [ebp+var_4] ; this
.text:00000BA9                 call    ?TrimRight@UString@@QAEXXZ ; UString::TrimRight(void)
.text:00000BAE                 mov     ecx, [ebp+var_4] ; this
.text:00000BB1                 call    ?TrimLeft@UString@@QAEXXZ ; UString::TrimLeft(void)
.text:00000BB6                 add     esp, 4
.text:00000BB9                 cmp     ebp, esp
.text:00000BBB                 call    __RTC_CheckEsp
.text:00000BC0                 mov     esp, ebp
.text:00000BC2                 pop     ebp
.text:00000BC3                 retn
.text:00000BC3 ?Trim@UString@@QAEXXZ endp
.text:00000BC3
.text:00000BC3 _text           ends
.text:00000BC3
.text:00000BC4 ; ===========================================================================
.text:00000BC4
.text:00000BC4 ; Segment type: Pure code
.text:00000BC4 ; Segment permissions: Read/Execute
.text:00000BC4 _text           segment para public 'CODE' use32
.text:00000BC4                 assume cs:_text
.text:00000BC4                 ;org 0BC4h
.text:00000BC4 ; COMDAT (pick any)
.text:00000BC4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000BC4
.text:00000BC4 ; =============== S U B R O U T I N E =======================================
.text:00000BC4
.text:00000BC4 ; Attributes: bp-based frame
.text:00000BC4
.text:00000BC4 ; void __thiscall UString::DeleteBack(UString *__hidden this)
.text:00000BC4                 public ?DeleteBack@UString@@QAEXXZ
.text:00000BC4 ?DeleteBack@UString@@QAEXXZ proc near   ; CODE XREF: AddName(CObjectVector<UString> &,UString &)+3Bp
.text:00000BC4
.text:00000BC4 var_8           = dword ptr -8
.text:00000BC4 var_4           = dword ptr -4
.text:00000BC4
.text:00000BC4                 push    ebp
.text:00000BC5                 mov     ebp, esp
.text:00000BC7                 sub     esp, 8
.text:00000BCA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000BD1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BD8                 mov     [ebp+var_4], ecx
.text:00000BDB                 mov     eax, [ebp+var_4]
.text:00000BDE                 mov     ecx, [eax+4]
.text:00000BE1                 sub     ecx, 1
.text:00000BE4                 mov     [ebp+var_8], ecx
.text:00000BE7                 mov     edx, [ebp+var_4]
.text:00000BEA                 mov     eax, [ebp+var_8]
.text:00000BED                 mov     [edx+4], eax
.text:00000BF0                 mov     ecx, [ebp+var_4]
.text:00000BF3                 mov     edx, [ecx]
.text:00000BF5                 xor     eax, eax
.text:00000BF7                 mov     ecx, [ebp+var_8]
.text:00000BFA                 mov     [edx+ecx*2], ax
.text:00000BFE                 mov     esp, ebp
.text:00000C00                 pop     ebp
.text:00000C01                 retn
.text:00000C01 ?DeleteBack@UString@@QAEXXZ endp
.text:00000C01
.text:00000C01 ; ---------------------------------------------------------------------------
.text:00000C02                 align 4
.text:00000C02 _text           ends
.text:00000C02
.text:00000C04 ; ===========================================================================
.text:00000C04
.text:00000C04 ; Segment type: Pure code
.text:00000C04 ; Segment permissions: Read/Execute
.text:00000C04 _text           segment para public 'CODE' use32
.text:00000C04                 assume cs:_text
.text:00000C04                 ;org 0C04h
.text:00000C04 ; COMDAT (pick any)
.text:00000C04                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C04
.text:00000C04 ; =============== S U B R O U T I N E =======================================
.text:00000C04
.text:00000C04 ; Attributes: bp-based frame
.text:00000C04
.text:00000C04 ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:00000C04                 public ??0CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:00000C04 ??0CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00000C04                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+3Fp
.text:00000C04
.text:00000C04 var_4           = dword ptr -4
.text:00000C04
.text:00000C04                 push    ebp
.text:00000C05                 mov     ebp, esp
.text:00000C07                 push    ecx
.text:00000C08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C0F                 mov     [ebp+var_4], ecx
.text:00000C12                 mov     ecx, [ebp+var_4] ; this
.text:00000C15                 call    ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::CFileBase(void)
.text:00000C1A                 mov     eax, [ebp+var_4]
.text:00000C1D                 add     esp, 4
.text:00000C20                 cmp     ebp, esp
.text:00000C22                 call    __RTC_CheckEsp
.text:00000C27                 mov     esp, ebp
.text:00000C29                 pop     ebp
.text:00000C2A                 retn
.text:00000C2A ??0CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:00000C2A
.text:00000C2A ; ---------------------------------------------------------------------------
.text:00000C2B                 align 4
.text:00000C2B _text           ends
.text:00000C2B
.text:00000C2C ; ===========================================================================
.text:00000C2C
.text:00000C2C ; Segment type: Pure code
.text:00000C2C ; Segment permissions: Read/Execute
.text:00000C2C _text           segment para public 'CODE' use32
.text:00000C2C                 assume cs:_text
.text:00000C2C                 ;org 0C2Ch
.text:00000C2C ; COMDAT (pick any)
.text:00000C2C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C2C
.text:00000C2C ; =============== S U B R O U T I N E =======================================
.text:00000C2C
.text:00000C2C ; Attributes: bp-based frame
.text:00000C2C
.text:00000C2C ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:00000C2C                 public ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:00000C2C ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00000C2C                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CInFile(void)+11p
.text:00000C2C
.text:00000C2C var_4           = dword ptr -4
.text:00000C2C
.text:00000C2C                 push    ebp
.text:00000C2D                 mov     ebp, esp
.text:00000C2F                 push    ecx
.text:00000C30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C37                 mov     [ebp+var_4], ecx
.text:00000C3A                 mov     eax, [ebp+var_4]
.text:00000C3D                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00000C43                 mov     eax, [ebp+var_4]
.text:00000C46                 mov     esp, ebp
.text:00000C48                 pop     ebp
.text:00000C49                 retn
.text:00000C49 ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:00000C49
.text:00000C49 ; ---------------------------------------------------------------------------
.text:00000C4A                 align 4
.text:00000C4A _text           ends
.text:00000C4A
.text:00000C4C ; ===========================================================================
.text:00000C4C
.text:00000C4C ; Segment type: Pure code
.text:00000C4C ; Segment permissions: Read/Execute
.text:00000C4C _text           segment para public 'CODE' use32
.text:00000C4C                 assume cs:_text
.text:00000C4C                 ;org 0C4Ch
.text:00000C4C ; COMDAT (pick any)
.text:00000C4C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C4C
.text:00000C4C ; =============== S U B R O U T I N E =======================================
.text:00000C4C
.text:00000C4C ; Attributes: bp-based frame
.text:00000C4C
.text:00000C4C ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::~CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:00000C4C                 public ??1CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:00000C4C ??1CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00000C4C                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+6Fp
.text:00000C4C                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+A3p ...
.text:00000C4C
.text:00000C4C var_4           = dword ptr -4
.text:00000C4C
.text:00000C4C                 push    ebp
.text:00000C4D                 mov     ebp, esp
.text:00000C4F                 push    ecx
.text:00000C50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C57                 mov     [ebp+var_4], ecx
.text:00000C5A                 mov     ecx, [ebp+var_4] ; this
.text:00000C5D                 call    ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)
.text:00000C62                 add     esp, 4
.text:00000C65                 cmp     ebp, esp
.text:00000C67                 call    __RTC_CheckEsp
.text:00000C6C                 mov     esp, ebp
.text:00000C6E                 pop     ebp
.text:00000C6F                 retn
.text:00000C6F ??1CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:00000C6F
.text:00000C6F _text           ends
.text:00000C6F
.text:00000C70 ; ===========================================================================
.text:00000C70
.text:00000C70 ; Segment type: Pure code
.text:00000C70 ; Segment permissions: Read/Execute
.text:00000C70 _text           segment para public 'CODE' use32
.text:00000C70                 assume cs:_text
.text:00000C70                 ;org 0C70h
.text:00000C70 ; COMDAT (pick any)
.text:00000C70                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C70
.text:00000C70 ; =============== S U B R O U T I N E =======================================
.text:00000C70
.text:00000C70 ; Attributes: bp-based frame
.text:00000C70
.text:00000C70 ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::~CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:00000C70                 public ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:00000C70 ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00000C70                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::~CInFile(void)+11p
.text:00000C70
.text:00000C70 var_4           = dword ptr -4
.text:00000C70
.text:00000C70                 push    ebp
.text:00000C71                 mov     ebp, esp
.text:00000C73                 push    ecx
.text:00000C74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C7B                 mov     [ebp+var_4], ecx
.text:00000C7E                 mov     ecx, [ebp+var_4] ; this
.text:00000C81                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:00000C86                 add     esp, 4
.text:00000C89                 cmp     ebp, esp
.text:00000C8B                 call    __RTC_CheckEsp
.text:00000C90                 mov     esp, ebp
.text:00000C92                 pop     ebp
.text:00000C93                 retn
.text:00000C93 ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:00000C93
.text:00000C93 _text           ends
.text:00000C93
.text:00000C94 ; ===========================================================================
.text:00000C94
.text:00000C94 ; Segment type: Pure code
.text:00000C94 ; Segment permissions: Read/Execute
.text:00000C94 _text           segment para public 'CODE' use32
.text:00000C94                 assume cs:_text
.text:00000C94                 ;org 0C94h
.text:00000C94 ; COMDAT (pick any)
.text:00000C94                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C94
.text:00000C94 ; =============== S U B R O U T I N E =======================================
.text:00000C94
.text:00000C94 ; Attributes: bp-based frame
.text:00000C94
.text:00000C94 ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00000C94                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00000C94 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00000C94                                         ; CODE XREF: AddName(CObjectVector<UString> &,UString &)+60p
.text:00000C94
.text:00000C94 var_1C          = dword ptr -1Ch
.text:00000C94 var_18          = dword ptr -18h
.text:00000C94 var_14          = dword ptr -14h
.text:00000C94 var_10          = dword ptr -10h
.text:00000C94 var_C           = dword ptr -0Ch
.text:00000C94 var_4           = dword ptr -4
.text:00000C94 arg_0           = dword ptr  8
.text:00000C94
.text:00000C94                 push    ebp
.text:00000C95                 mov     ebp, esp
.text:00000C97                 push    0FFFFFFFFh
.text:00000C99                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00000C9E                 mov     eax, large fs:0
.text:00000CA4                 push    eax
.text:00000CA5                 sub     esp, 10h
.text:00000CA8                 mov     eax, 0CCCCCCCCh
.text:00000CAD                 mov     [ebp+var_1C], eax
.text:00000CB0                 mov     [ebp+var_18], eax
.text:00000CB3                 mov     [ebp+var_14], eax
.text:00000CB6                 mov     [ebp+var_10], eax
.text:00000CB9                 mov     eax, dword ptr ds:___security_cookie
.text:00000CBE                 xor     eax, ebp
.text:00000CC0                 push    eax
.text:00000CC1                 lea     eax, [ebp+var_C]
.text:00000CC4                 mov     large fs:0, eax
.text:00000CCA                 mov     [ebp+var_10], ecx
.text:00000CCD                 push    0Ch             ; unsigned int
.text:00000CCF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000CD4                 add     esp, 4
.text:00000CD7                 mov     [ebp+var_18], eax
.text:00000CDA                 mov     [ebp+var_4], 0
.text:00000CE1                 cmp     [ebp+var_18], 0
.text:00000CE5                 jz      short loc_CF8
.text:00000CE7                 mov     eax, [ebp+arg_0]
.text:00000CEA                 push    eax
.text:00000CEB                 mov     ecx, [ebp+var_18]
.text:00000CEE                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00000CF3                 mov     [ebp+var_1C], eax
.text:00000CF6                 jmp     short loc_CFF
.text:00000CF8 ; ---------------------------------------------------------------------------
.text:00000CF8
.text:00000CF8 loc_CF8:                                ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:00000CF8                 mov     [ebp+var_1C], 0
.text:00000CFF
.text:00000CFF loc_CFF:                                ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:00000CFF                 mov     ecx, [ebp+var_1C]
.text:00000D02                 mov     [ebp+var_14], ecx
.text:00000D05                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D0C                 mov     edx, [ebp+var_14]
.text:00000D0F                 push    edx
.text:00000D10                 mov     ecx, [ebp+var_10]
.text:00000D13                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00000D18                 mov     ecx, [ebp+var_C]
.text:00000D1B                 mov     large fs:0, ecx
.text:00000D22                 pop     ecx
.text:00000D23                 add     esp, 1Ch
.text:00000D26                 cmp     ebp, esp
.text:00000D28                 call    __RTC_CheckEsp
.text:00000D2D                 mov     esp, ebp
.text:00000D2F                 pop     ebp
.text:00000D30                 retn    4
.text:00000D30 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:00000D30
.text:00000D30 ; ---------------------------------------------------------------------------
.text:00000D33                 align 4
.text:00000D33 _text           ends
.text:00000D33
.text$x:00000D34 ; ===========================================================================
.text$x:00000D34
.text$x:00000D34 ; Segment type: Pure code
.text$x:00000D34 ; Segment permissions: Read/Execute
.text$x:00000D34 _text$x         segment para public 'CODE' use32
.text$x:00000D34                 assume cs:_text$x
.text$x:00000D34                 ;org 0D34h
.text$x:00000D34 ; COMDAT (pick associative to section at C94)
.text$x:00000D34                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000D34
.text$x:00000D34 ; =============== S U B R O U T I N E =======================================
.text$x:00000D34
.text$x:00000D34
.text$x:00000D34 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:00000D34                                         ; DATA XREF: .xdata$x:00000D60o
.text$x:00000D34                 mov     eax, [ebp-18h]
.text$x:00000D37                 push    eax             ; void *
.text$x:00000D38                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000D3D                 pop     ecx
.text$x:00000D3E                 retn
.text$x:00000D3E __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:00000D3E
.text$x:00000D3F
.text$x:00000D3F ; =============== S U B R O U T I N E =======================================
.text$x:00000D3F
.text$x:00000D3F
.text$x:00000D3F __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:00000D3F                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:00000D3F
.text$x:00000D3F arg_4           = dword ptr  8
.text$x:00000D3F
.text$x:00000D3F                 mov     edx, [esp+arg_4]
.text$x:00000D43                 lea     eax, [edx+0Ch]
.text$x:00000D46                 mov     ecx, [edx-14h]
.text$x:00000D49                 xor     ecx, eax
.text$x:00000D4B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000D50                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:00000D55                 jmp     ___CxxFrameHandler3
.text$x:00000D55 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:00000D55
.text$x:00000D55 ; ---------------------------------------------------------------------------
.text$x:00000D5A                 align 4
.text$x:00000D5A _text$x         ends
.text$x:00000D5A
.xdata$x:00000D5C ; ===========================================================================
.xdata$x:00000D5C
.xdata$x:00000D5C ; Segment type: Pure data
.xdata$x:00000D5C ; Segment permissions: Read
.xdata$x:00000D5C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000D5C                 assume cs:_xdata$x
.xdata$x:00000D5C                 ;org 0D5Ch
.xdata$x:00000D5C ; COMDAT (pick associative to section at C94)
.xdata$x:00000D5C __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:00000D5C                                         ; DATA XREF: .xdata$x:00000D6Co
.xdata$x:00000D5D                 db 0FFh
.xdata$x:00000D5E                 db 0FFh
.xdata$x:00000D5F                 db 0FFh
.xdata$x:00000D60                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:00000D64 __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:00000D64                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:00000D65                 db    5
.xdata$x:00000D66                 db  93h ; ô
.xdata$x:00000D67                 db  19h
.xdata$x:00000D68                 db    1
.xdata$x:00000D69                 db    0
.xdata$x:00000D6A                 db    0
.xdata$x:00000D6B                 db    0
.xdata$x:00000D6C                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:00000D70                 db    0
.xdata$x:00000D71                 db    0
.xdata$x:00000D72                 db    0
.xdata$x:00000D73                 db    0
.xdata$x:00000D74                 db    0
.xdata$x:00000D75                 db    0
.xdata$x:00000D76                 db    0
.xdata$x:00000D77                 db    0
.xdata$x:00000D78                 db    0
.xdata$x:00000D79                 db    0
.xdata$x:00000D7A                 db    0
.xdata$x:00000D7B                 db    0
.xdata$x:00000D7C                 db    0
.xdata$x:00000D7D                 db    0
.xdata$x:00000D7E                 db    0
.xdata$x:00000D7F                 db    0
.xdata$x:00000D80                 db    0
.xdata$x:00000D81                 db    0
.xdata$x:00000D82                 db    0
.xdata$x:00000D83                 db    0
.xdata$x:00000D84                 db    1
.xdata$x:00000D85                 db    0
.xdata$x:00000D86                 db    0
.xdata$x:00000D87                 db    0
.xdata$x:00000D87 _xdata$x        ends
.xdata$x:00000D87
.text:00000D88 ; ===========================================================================
.text:00000D88
.text:00000D88 ; Segment type: Pure code
.text:00000D88 ; Segment permissions: Read/Execute
.text:00000D88 _text           segment para public 'CODE' use32
.text:00000D88                 assume cs:_text
.text:00000D88                 ;org 0D88h
.text:00000D88 ; COMDAT (pick any)
.text:00000D88                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D88
.text:00000D88 ; =============== S U B R O U T I N E =======================================
.text:00000D88
.text:00000D88 ; Attributes: bp-based frame
.text:00000D88
.text:00000D88 ; public: __thiscall CObjArray<unsigned char>::CObjArray<unsigned char>(unsigned int)
.text:00000D88                 public ??0?$CObjArray@E@@QAE@I@Z
.text:00000D88 ??0?$CObjArray@E@@QAE@I@Z proc near     ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+15Fp
.text:00000D88
.text:00000D88 var_8           = dword ptr -8
.text:00000D88 var_4           = dword ptr -4
.text:00000D88 arg_0           = dword ptr  8
.text:00000D88
.text:00000D88                 push    ebp
.text:00000D89                 mov     ebp, esp
.text:00000D8B                 sub     esp, 8
.text:00000D8E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000D95                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D9C                 mov     [ebp+var_4], ecx
.text:00000D9F                 mov     eax, [ebp+var_4]
.text:00000DA2                 mov     dword ptr [eax], 0
.text:00000DA8                 cmp     [ebp+arg_0], 0
.text:00000DAC                 jz      short loc_DC5
.text:00000DAE                 mov     ecx, [ebp+arg_0]
.text:00000DB1                 push    ecx             ; unsigned int
.text:00000DB2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000DB7                 add     esp, 4
.text:00000DBA                 mov     [ebp+var_8], eax
.text:00000DBD                 mov     edx, [ebp+var_4]
.text:00000DC0                 mov     eax, [ebp+var_8]
.text:00000DC3                 mov     [edx], eax
.text:00000DC5
.text:00000DC5 loc_DC5:                                ; CODE XREF: CObjArray<uchar>::CObjArray<uchar>(uint)+24j
.text:00000DC5                 mov     eax, [ebp+var_4]
.text:00000DC8                 add     esp, 8
.text:00000DCB                 cmp     ebp, esp
.text:00000DCD                 call    __RTC_CheckEsp
.text:00000DD2                 mov     esp, ebp
.text:00000DD4                 pop     ebp
.text:00000DD5                 retn    4
.text:00000DD5 ??0?$CObjArray@E@@QAE@I@Z endp
.text:00000DD5
.text:00000DD5 _text           ends
.text:00000DD5
.text:00000DD8 ; ===========================================================================
.text:00000DD8
.text:00000DD8 ; Segment type: Pure code
.text:00000DD8 ; Segment permissions: Read/Execute
.text:00000DD8 _text           segment para public 'CODE' use32
.text:00000DD8                 assume cs:_text
.text:00000DD8                 ;org 0DD8h
.text:00000DD8 ; COMDAT (pick any)
.text:00000DD8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000DD8
.text:00000DD8 ; =============== S U B R O U T I N E =======================================
.text:00000DD8
.text:00000DD8 ; Attributes: bp-based frame
.text:00000DD8
.text:00000DD8 ; public: __thiscall CObjArray<unsigned char>::~CObjArray<unsigned char>(void)
.text:00000DD8                 public ??1?$CObjArray@E@@QAE@XZ
.text:00000DD8 ??1?$CObjArray@E@@QAE@XZ proc near      ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+196p
.text:00000DD8                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+1F6p ...
.text:00000DD8
.text:00000DD8 var_8           = dword ptr -8
.text:00000DD8 var_4           = dword ptr -4
.text:00000DD8
.text:00000DD8                 push    ebp
.text:00000DD9                 mov     ebp, esp
.text:00000DDB                 sub     esp, 8
.text:00000DDE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000DE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DEC                 mov     [ebp+var_4], ecx
.text:00000DEF                 mov     eax, [ebp+var_4]
.text:00000DF2                 mov     ecx, [eax]
.text:00000DF4                 mov     [ebp+var_8], ecx
.text:00000DF7                 mov     edx, [ebp+var_8]
.text:00000DFA                 push    edx             ; void *
.text:00000DFB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000E00                 add     esp, 4
.text:00000E03                 add     esp, 8
.text:00000E06                 cmp     ebp, esp
.text:00000E08                 call    __RTC_CheckEsp
.text:00000E0D                 mov     esp, ebp
.text:00000E0F                 pop     ebp
.text:00000E10                 retn
.text:00000E10 ??1?$CObjArray@E@@QAE@XZ endp
.text:00000E10
.text:00000E10 ; ---------------------------------------------------------------------------
.text:00000E11                 align 4
.text:00000E11 _text           ends
.text:00000E11
.text:00000E14 ; ===========================================================================
.text:00000E14
.text:00000E14 ; Segment type: Pure code
.text:00000E14 ; Segment permissions: Read/Execute
.text:00000E14 _text           segment para public 'CODE' use32
.text:00000E14                 assume cs:_text
.text:00000E14                 ;org 0E14h
.text:00000E14 ; COMDAT (pick any)
.text:00000E14                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E14
.text:00000E14 ; =============== S U B R O U T I N E =======================================
.text:00000E14
.text:00000E14 ; Attributes: bp-based frame
.text:00000E14
.text:00000E14 ; public: __thiscall CObjArray<unsigned char>::operator unsigned char *(void)
.text:00000E14                 public ??B?$CObjArray@E@@QAEPAEXZ
.text:00000E14 ??B?$CObjArray@E@@QAEPAEXZ proc near    ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+173p
.text:00000E14                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+26Ap ...
.text:00000E14
.text:00000E14 var_4           = dword ptr -4
.text:00000E14
.text:00000E14                 push    ebp
.text:00000E15                 mov     ebp, esp
.text:00000E17                 push    ecx
.text:00000E18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E1F                 mov     [ebp+var_4], ecx
.text:00000E22                 mov     eax, [ebp+var_4]
.text:00000E25                 mov     eax, [eax]
.text:00000E27                 mov     esp, ebp
.text:00000E29                 pop     ebp
.text:00000E2A                 retn
.text:00000E2A ??B?$CObjArray@E@@QAEPAEXZ endp
.text:00000E2A
.text:00000E2A ; ---------------------------------------------------------------------------
.text:00000E2B                 align 4
.text:00000E2B _text           ends
.text:00000E2B
.text:00000E2C ; ===========================================================================
.text:00000E2C
.text:00000E2C ; Segment type: Pure code
.text:00000E2C ; Segment permissions: Read/Execute
.text:00000E2C _text           segment para public 'CODE' use32
.text:00000E2C                 assume cs:_text
.text:00000E2C                 ;org 0E2Ch
.text:00000E2C ; COMDAT (pick any)
.text:00000E2C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E2C
.text:00000E2C ; =============== S U B R O U T I N E =======================================
.text:00000E2C
.text:00000E2C ; Attributes: bp-based frame
.text:00000E2C
.text:00000E2C ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00000E2C                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00000E2C ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00000E2C                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+7Fp
.text:00000E2C
.text:00000E2C var_8           = dword ptr -8
.text:00000E2C var_4           = dword ptr -4
.text:00000E2C arg_0           = dword ptr  8
.text:00000E2C
.text:00000E2C                 push    ebp
.text:00000E2D                 mov     ebp, esp
.text:00000E2F                 sub     esp, 8
.text:00000E32                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000E39                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E40                 mov     [ebp+var_4], ecx
.text:00000E43                 mov     ecx, [ebp+var_4]
.text:00000E46                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00000E4B                 mov     eax, [ebp+var_4]
.text:00000E4E                 mov     ecx, [eax+4]
.text:00000E51                 mov     edx, [ebp+var_4]
.text:00000E54                 mov     eax, [edx]
.text:00000E56                 mov     edx, [ebp+arg_0]
.text:00000E59                 mov     [eax+ecx*4], edx
.text:00000E5C                 mov     eax, [ebp+var_4]
.text:00000E5F                 mov     ecx, [eax+4]
.text:00000E62                 mov     [ebp+var_8], ecx
.text:00000E65                 mov     edx, [ebp+var_4]
.text:00000E68                 mov     eax, [edx+4]
.text:00000E6B                 add     eax, 1
.text:00000E6E                 mov     ecx, [ebp+var_4]
.text:00000E71                 mov     [ecx+4], eax
.text:00000E74                 mov     eax, [ebp+var_8]
.text:00000E77                 add     esp, 8
.text:00000E7A                 cmp     ebp, esp
.text:00000E7C                 call    __RTC_CheckEsp
.text:00000E81                 mov     esp, ebp
.text:00000E83                 pop     ebp
.text:00000E84                 retn    4
.text:00000E84 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00000E84
.text:00000E84 ; ---------------------------------------------------------------------------
.text:00000E87                 align 4
.text:00000E87 _text           ends
.text:00000E87
.text:00000E88 ; ===========================================================================
.text:00000E88
.text:00000E88 ; Segment type: Pure code
.text:00000E88 ; Segment permissions: Read/Execute
.text:00000E88 _text           segment para public 'CODE' use32
.text:00000E88                 assume cs:_text
.text:00000E88                 ;org 0E88h
.text:00000E88 ; COMDAT (pick any)
.text:00000E88                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E88
.text:00000E88 ; =============== S U B R O U T I N E =======================================
.text:00000E88
.text:00000E88 ; Attributes: bp-based frame
.text:00000E88
.text:00000E88 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00000E88                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00000E88 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00000E88                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00000E88
.text:00000E88 var_14          = dword ptr -14h
.text:00000E88 var_10          = dword ptr -10h
.text:00000E88 Dst             = dword ptr -0Ch
.text:00000E88 var_8           = dword ptr -8
.text:00000E88 var_4           = dword ptr -4
.text:00000E88
.text:00000E88                 push    ebp
.text:00000E89                 mov     ebp, esp
.text:00000E8B                 sub     esp, 14h
.text:00000E8E                 mov     eax, 0CCCCCCCCh
.text:00000E93                 mov     [ebp+var_14], eax
.text:00000E96                 mov     [ebp+var_10], eax
.text:00000E99                 mov     [ebp+Dst], eax
.text:00000E9C                 mov     [ebp+var_8], eax
.text:00000E9F                 mov     [ebp+var_4], eax
.text:00000EA2                 mov     [ebp+var_4], ecx
.text:00000EA5                 mov     eax, [ebp+var_4]
.text:00000EA8                 mov     ecx, [ebp+var_4]
.text:00000EAB                 mov     edx, [eax+4]
.text:00000EAE                 cmp     edx, [ecx+8]
.text:00000EB1                 jnz     loc_F3C
.text:00000EB7                 mov     eax, [ebp+var_4]
.text:00000EBA                 mov     ecx, [eax+8]
.text:00000EBD                 shr     ecx, 2
.text:00000EC0                 mov     edx, [ebp+var_4]
.text:00000EC3                 mov     eax, [edx+8]
.text:00000EC6                 lea     ecx, [eax+ecx+1]
.text:00000ECA                 mov     [ebp+var_8], ecx
.text:00000ECD                 xor     ecx, ecx
.text:00000ECF                 mov     eax, [ebp+var_8]
.text:00000ED2                 mov     edx, 4
.text:00000ED7                 mul     edx
.text:00000ED9                 seto    cl
.text:00000EDC                 neg     ecx
.text:00000EDE                 or      ecx, eax
.text:00000EE0                 push    ecx             ; unsigned int
.text:00000EE1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000EE6                 add     esp, 4
.text:00000EE9                 mov     [ebp+var_10], eax
.text:00000EEC                 mov     eax, [ebp+var_10]
.text:00000EEF                 mov     [ebp+Dst], eax
.text:00000EF2                 mov     ecx, [ebp+var_4]
.text:00000EF5                 cmp     dword ptr [ecx+4], 0
.text:00000EF9                 jz      short loc_F17
.text:00000EFB                 mov     edx, [ebp+var_4]
.text:00000EFE                 mov     eax, [edx+4]
.text:00000F01                 shl     eax, 2
.text:00000F04                 push    eax             ; Size
.text:00000F05                 mov     ecx, [ebp+var_4]
.text:00000F08                 mov     edx, [ecx]
.text:00000F0A                 push    edx             ; Src
.text:00000F0B                 mov     eax, [ebp+Dst]
.text:00000F0E                 push    eax             ; Dst
.text:00000F0F                 call    _memcpy
.text:00000F14                 add     esp, 0Ch
.text:00000F17
.text:00000F17 loc_F17:                                ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00000F17                 mov     ecx, [ebp+var_4]
.text:00000F1A                 mov     edx, [ecx]
.text:00000F1C                 mov     [ebp+var_14], edx
.text:00000F1F                 mov     eax, [ebp+var_14]
.text:00000F22                 push    eax             ; void *
.text:00000F23                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000F28                 add     esp, 4
.text:00000F2B                 mov     ecx, [ebp+var_4]
.text:00000F2E                 mov     edx, [ebp+Dst]
.text:00000F31                 mov     [ecx], edx
.text:00000F33                 mov     eax, [ebp+var_4]
.text:00000F36                 mov     ecx, [ebp+var_8]
.text:00000F39                 mov     [eax+8], ecx
.text:00000F3C
.text:00000F3C loc_F3C:                                ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00000F3C                 add     esp, 14h
.text:00000F3F                 cmp     ebp, esp
.text:00000F41                 call    __RTC_CheckEsp
.text:00000F46                 mov     esp, ebp
.text:00000F48                 pop     ebp
.text:00000F49                 retn
.text:00000F49 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00000F49
.text:00000F49 _text           ends
.text:00000F49
UNDEF:00000F50 ; ===========================================================================
UNDEF:00000F50
UNDEF:00000F50 ; Segment type: Externs
UNDEF:00000F50 ; UNDEF
UNDEF:00000F50 ; void __stdcall MultiByteToUnicodeString2(struct UString *, const struct AString *, unsigned int)
UNDEF:00000F50                 extrn ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z:near
UNDEF:00000F50                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+54Cp
UNDEF:00000F54 ; bool __stdcall ConvertUTF8ToUnicode(const struct AString *, struct UString *)
UNDEF:00000F54                 extrn ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z:near
UNDEF:00000F54                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+4F3p
UNDEF:00000F58 ; public: __thiscall AString::AString(void)
UNDEF:00000F58                 extrn ??0AString@@QAE@XZ:near
UNDEF:00000F58                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+395p
UNDEF:00000F5C ; bool __thiscall NWindows::NFile::NIO::CFileBase::Close(NWindows::NFile::NIO::CFileBase *__hidden this)
UNDEF:00000F5C                 extrn ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ:near
UNDEF:00000F5C                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+224p
UNDEF:00000F5C                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+479p ...
UNDEF:00000F60 ; bool __thiscall NWindows::NFile::NIO::CInFile::Read(NWindows::NFile::NIO::CInFile *__hidden this, void *, unsigned int, unsigned int *)
UNDEF:00000F60                 extrn ?Read@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z:near
UNDEF:00000F60                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+17Cp
UNDEF:00000F60                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+3C8p
UNDEF:00000F64 ; public: __thiscall UString::UString(void)
UNDEF:00000F64                 extrn ??0UString@@QAE@XZ:near
UNDEF:00000F64                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+E6p
UNDEF:00000F64                                         ; ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+57Ep
UNDEF:00000F68 ; bool __thiscall NWindows::NFile::NIO::CFileBase::GetLength(NWindows::NFile::NIO::CFileBase *__hidden this, unsigned __int64 *)
UNDEF:00000F68                 extrn ?GetLength@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z:near
UNDEF:00000F68                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+86p
UNDEF:00000F6C ; bool __thiscall NWindows::NFile::NIO::CInFile::Open(NWindows::NFile::NIO::CInFile *__hidden this, const wchar_t *)
UNDEF:00000F6C                 extrn ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:00000F6C                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+52p
UNDEF:00000F70                 extrn ___security_cookie:near
UNDEF:00000F70                                         ; DATA XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+2Br
UNDEF:00000F70                                         ; CObjectVector<UString>::Add(UString const &)+25r
UNDEF:00000F74                 extrn ___CxxFrameHandler3:near
UNDEF:00000F74                                         ; CODE XREF: __ehhandler$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z+19j
UNDEF:00000F74                                         ; __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+16j
UNDEF:00000F78 ; __fastcall __security_check_cookie(x)
UNDEF:00000F78                 extrn @__security_check_cookie@4:near
UNDEF:00000F78                                         ; CODE XREF: __ehhandler$?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z+Fp
UNDEF:00000F78                                         ; __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+Cp
UNDEF:00000F7C                 extrn __RTC_CheckEsp:near
UNDEF:00000F7C                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+71Fp
UNDEF:00000F7C                                         ; AddName(CObjectVector<UString> &,UString &)+67p ...
UNDEF:00000F80 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000F80                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000F80                                         ; CODE XREF: ReadNamesFromListFile(wchar_t const *,CObjectVector<UString> &,uint)+703p
UNDEF:00000F84                 extrn __RTC_Shutdown:near
UNDEF:00000F84                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000F88                 extrn __RTC_InitBase:near
UNDEF:00000F88                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000F8C ; void __cdecl operator delete(void *)
UNDEF:00000F8C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:00000F8C                                         ; UString::~UString(void)+23p ...
UNDEF:00000F90 ; void __thiscall AString::ReAlloc2(AString *__hidden this, unsigned int)
UNDEF:00000F90                 extrn ?ReAlloc2@AString@@AAEXI@Z:near
UNDEF:00000F90                                         ; CODE XREF: AString::GetBuf(uint)+20p
UNDEF:00000F94 ; void __thiscall UString::ReAlloc2(UString *__hidden this, unsigned int)
UNDEF:00000F94                 extrn ?ReAlloc2@UString@@AAEXI@Z:near
UNDEF:00000F94                                         ; CODE XREF: UString::GetBuf(uint)+20p
UNDEF:00000F98 ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:00000F98                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:00000F98                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00000F9C ; void __thiscall UString::Delete(UString *__hidden this, unsigned int)
UNDEF:00000F9C                 extrn ?Delete@UString@@QAEXI@Z:near
UNDEF:00000F9C                                         ; CODE XREF: AddName(CObjectVector<UString> &,UString &)+45p
UNDEF:00000FA0 ; void __thiscall UString::TrimLeft(UString *__hidden this)
UNDEF:00000FA0                 extrn ?TrimLeft@UString@@QAEXXZ:near
UNDEF:00000FA0                                         ; CODE XREF: UString::Trim(void)+19p
UNDEF:00000FA4 ; void __thiscall UString::TrimRight(UString *__hidden this)
UNDEF:00000FA4                 extrn ?TrimRight@UString@@QAEXXZ:near
UNDEF:00000FA4                                         ; CODE XREF: UString::Trim(void)+11p
UNDEF:00000FA8 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00000FA8                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00000FA8                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+5Ap
UNDEF:00000FAC ; void *__cdecl operator new(unsigned int)
UNDEF:00000FAC                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CObjectVector<UString>::Add(UString const &)+3Bp
UNDEF:00000FAC                                         ; CObjArray<uchar>::CObjArray<uchar>(uint)+2Ap ...
UNDEF:00000FB0 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000FB0                 extrn _memcpy:near      ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+87p
UNDEF:00000FB0
UNDEF:00000FB0
UNDEF:00000FB0                 end