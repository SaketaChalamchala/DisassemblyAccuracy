.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 2CEBE1F3E16A52B2E204911B5DD71D8D
.text:00000000 ; Input CRC32 : FA2821A7
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zExtract.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __thiscall NArchive::N7z::CFolderOutStream::Init(NArchive::N7z::CFolderOutStream *this, unsigned int, const unsigned int *, unsigned int)
.text:00000000                 public ?Init@CFolderOutStream@N7z@NArchive@@QAEJIPBII@Z
.text:00000000 ?Init@CFolderOutStream@N7z@NArchive@@QAEJIPBII@Z proc near
.text:00000000                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+75Cp
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     eax, [ebp+var_4]
.text:00000011                 mov     ecx, [ebp+arg_0]
.text:00000014                 mov     [eax+28h], ecx
.text:00000017                 mov     edx, [ebp+var_4]
.text:0000001A                 mov     eax, [ebp+arg_4]
.text:0000001D                 mov     [edx+20h], eax
.text:00000020                 mov     ecx, [ebp+var_4]
.text:00000023                 mov     edx, [ebp+arg_8]
.text:00000026                 mov     [ecx+24h], edx
.text:00000029                 mov     eax, [ebp+var_4]
.text:0000002C                 mov     byte ptr [eax+0Eh], 0
.text:00000030                 mov     ecx, [ebp+var_4]
.text:00000033                 mov     byte ptr [ecx+34h], 0
.text:00000037                 mov     ecx, [ebp+var_4] ; this
.text:0000003A                 call    ?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)
.text:0000003F
.text:0000003F loc_3F:                                 ; DATA XREF: .xdata$x:__catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$14o
.text:0000003F                                         ; .xdata$x:__catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$13o
.text:0000003F                 add     esp, 4
.text:00000042                 cmp     ebp, esp
.text:00000044                 call    __RTC_CheckEsp
.text:00000049                 mov     esp, ebp
.text:0000004B                 pop     ebp
.text:0000004C                 retn    0Ch
.text:0000004C ?Init@CFolderOutStream@N7z@NArchive@@QAEJIPBII@Z endp
.text:0000004C
.text:0000004C ; ---------------------------------------------------------------------------
.text:0000004F                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; __int32 __thiscall NArchive::N7z::CFolderOutStream::OpenFile(NArchive::N7z::CFolderOutStream *this, bool)
.text:00000050                 public ?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z
.text:00000050 ?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z proc near
.text:00000050                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)+4Dp
.text:00000050                                         ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+1BFp ...
.text:00000050
.text:00000050 var_48          = dword ptr -48h
.text:00000050 var_44          = dword ptr -44h
.text:00000050 var_40          = dword ptr -40h
.text:00000050 var_3C          = dword ptr -3Ch
.text:00000050 var_38          = dword ptr -38h
.text:00000050 var_34          = dword ptr -34h
.text:00000050 var_30          = dword ptr -30h
.text:00000050 var_2C          = dword ptr -2Ch
.text:00000050 var_24          = byte ptr -24h
.text:00000050 var_1C          = dword ptr -1Ch
.text:00000050 var_18          = dword ptr -18h
.text:00000050 var_14          = dword ptr -14h
.text:00000050 var_10          = dword ptr -10h
.text:00000050 var_C           = dword ptr -0Ch
.text:00000050 var_4           = dword ptr -4
.text:00000050 arg_0           = byte ptr  8
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 push    0FFFFFFFFh
.text:00000055                 push    offset __ehhandler$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z
.text:0000005A                 mov     eax, large fs:0
.text:00000060                 push    eax
.text:00000061                 sub     esp, 3Ch
.text:00000064                 push    esi
.text:00000065                 push    edi
.text:00000066                 push    ecx
.text:00000067                 lea     edi, [ebp+var_48]
.text:0000006A                 mov     ecx, 0Fh
.text:0000006F                 mov     eax, 0CCCCCCCCh
.text:00000074                 rep stosd
.text:00000076                 pop     ecx
.text:00000077                 mov     eax, dword ptr ds:___security_cookie
.text:0000007C                 xor     eax, ebp
.text:0000007E                 push    eax
.text:0000007F                 lea     eax, [ebp+var_C]
.text:00000082                 mov     large fs:0, eax
.text:00000088                 mov     [ebp+var_10], ecx
.text:0000008B                 mov     eax, [ebp+var_10]
.text:0000008E                 mov     ecx, [eax+28h]
.text:00000091                 push    ecx
.text:00000092                 mov     edx, [ebp+var_10]
.text:00000095                 mov     ecx, [edx+2Ch]
.text:00000098                 add     ecx, 58h ; 'X'
.text:0000009B                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:000000A0                 mov     [ebp+var_14], eax
.text:000000A3                 mov     eax, [ebp+var_10]
.text:000000A6                 cmp     dword ptr [eax+20h], 0
.text:000000AA                 jz      short loc_B9
.text:000000AC                 mov     ecx, [ebp+var_10]
.text:000000AF                 mov     edx, [ecx+20h]
.text:000000B2                 mov     eax, [edx]
.text:000000B4                 mov     [ebp+var_38], eax
.text:000000B7                 jmp     short loc_C2
.text:000000B9 ; ---------------------------------------------------------------------------
.text:000000B9
.text:000000B9 loc_B9:                                 ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+5Aj
.text:000000B9                 mov     ecx, [ebp+var_10]
.text:000000BC                 mov     edx, [ecx+28h]
.text:000000BF                 mov     [ebp+var_38], edx
.text:000000C2
.text:000000C2 loc_C2:                                 ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+67j
.text:000000C2                 mov     eax, [ebp+var_38]
.text:000000C5                 mov     [ebp+var_18], eax
.text:000000C8                 mov     ecx, [ebp+var_10]
.text:000000CB                 mov     edx, [ecx+28h]
.text:000000CE                 cmp     edx, [ebp+var_18]
.text:000000D1                 jnz     short loc_E5
.text:000000D3                 mov     eax, [ebp+var_10]
.text:000000D6                 movzx   ecx, byte ptr [eax+0Ch]
.text:000000DA                 neg     ecx
.text:000000DC                 sbb     ecx, ecx
.text:000000DE                 neg     ecx
.text:000000E0                 mov     [ebp+var_3C], ecx
.text:000000E3                 jmp     short loc_EC
.text:000000E5 ; ---------------------------------------------------------------------------
.text:000000E5
.text:000000E5 loc_E5:                                 ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+81j
.text:000000E5                 mov     [ebp+var_3C], 2
.text:000000EC
.text:000000EC loc_EC:                                 ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+93j
.text:000000EC                 mov     edx, [ebp+var_3C]
.text:000000EF                 mov     [ebp+var_1C], edx
.text:000000F2                 movzx   eax, [ebp+arg_0]
.text:000000F6                 test    eax, eax
.text:000000F8                 jz      short loc_12B
.text:000000FA                 cmp     [ebp+var_1C], 0
.text:000000FE                 jnz     short loc_12B
.text:00000100                 mov     ecx, [ebp+var_10]
.text:00000103                 mov     edx, [ecx+28h]
.text:00000106                 push    edx             ; unsigned int
.text:00000107                 mov     eax, [ebp+var_10]
.text:0000010A                 mov     ecx, [eax+2Ch]  ; this
.text:0000010D                 call    ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CDatabase::IsItemAnti(uint)
.text:00000112                 movzx   ecx, al
.text:00000115                 test    ecx, ecx
.text:00000117                 jnz     short loc_12B
.text:00000119                 mov     edx, [ebp+var_14]
.text:0000011C                 movzx   eax, byte ptr [edx+11h]
.text:00000120                 test    eax, eax
.text:00000122                 jnz     short loc_12B
.text:00000124                 mov     [ebp+var_1C], 1
.text:0000012B
.text:0000012B loc_12B:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+A8j
.text:0000012B                                         ; NArchive::N7z::CFolderOutStream::OpenFile(bool)+AEj ...
.text:0000012B                 lea     ecx, [ebp+var_24]
.text:0000012E                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00000133                 mov     [ebp+var_4], 0
.text:0000013A                 mov     ecx, [ebp+var_10]
.text:0000013D                 add     ecx, 30h ; '0'
.text:00000140                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:00000145                 mov     [ebp+var_40], eax
.text:00000148                 mov     esi, esp
.text:0000014A                 mov     ecx, [ebp+var_1C]
.text:0000014D                 push    ecx
.text:0000014E                 lea     ecx, [ebp+var_24]
.text:00000151                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00000156                 push    eax
.text:00000157                 mov     edx, [ebp+var_10]
.text:0000015A                 mov     eax, [edx+28h]
.text:0000015D                 push    eax
.text:0000015E                 mov     ecx, [ebp+var_40]
.text:00000161                 push    ecx
.text:00000162                 mov     edx, [ebp+var_40]
.text:00000165                 mov     eax, [edx]
.text:00000167                 mov     ecx, [eax+14h]
.text:0000016A                 call    ecx
.text:0000016C                 cmp     esi, esp
.text:0000016E                 call    __RTC_CheckEsp
.text:00000173                 mov     [ebp+var_2C], eax
.text:00000176                 cmp     [ebp+var_2C], 0
.text:0000017A                 jz      short loc_199
.text:0000017C                 mov     edx, [ebp+var_2C]
.text:0000017F                 mov     [ebp+var_30], edx
.text:00000182                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000189                 lea     ecx, [ebp+var_24]
.text:0000018C                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000191                 mov     eax, [ebp+var_30]
.text:00000194                 jmp     loc_282
.text:00000199 ; ---------------------------------------------------------------------------
.text:00000199
.text:00000199 loc_199:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+12Aj
.text:00000199                 lea     eax, [ebp+var_24]
.text:0000019C                 push    eax
.text:0000019D                 mov     ecx, [ebp+var_10]
.text:000001A0                 add     ecx, 8
.text:000001A3                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=(CMyComPtr<ISequentialOutStream> const &)
.text:000001A8                 mov     ecx, [ebp+var_10]
.text:000001AB                 mov     dword ptr [ecx+10h], 0FFFFFFFFh
.text:000001B2                 mov     edx, [ebp+var_10]
.text:000001B5                 movzx   eax, byte ptr [edx+0Dh]
.text:000001B9                 test    eax, eax
.text:000001BB                 jz      short loc_1DC
.text:000001BD                 mov     ecx, [ebp+var_14]
.text:000001C0                 movzx   edx, byte ptr [ecx+12h]
.text:000001C4                 test    edx, edx
.text:000001C6                 jz      short loc_1DC
.text:000001C8                 mov     eax, [ebp+var_14]
.text:000001CB                 movzx   ecx, byte ptr [eax+11h]
.text:000001CF                 test    ecx, ecx
.text:000001D1                 jnz     short loc_1DC
.text:000001D3                 mov     [ebp+var_44], 1
.text:000001DA                 jmp     short loc_1E3
.text:000001DC ; ---------------------------------------------------------------------------
.text:000001DC
.text:000001DC loc_1DC:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+16Bj
.text:000001DC                                         ; NArchive::N7z::CFolderOutStream::OpenFile(bool)+176j ...
.text:000001DC                 mov     [ebp+var_44], 0
.text:000001E3
.text:000001E3 loc_1E3:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+18Aj
.text:000001E3                 mov     edx, [ebp+var_10]
.text:000001E6                 mov     al, byte ptr [ebp+var_44]
.text:000001E9                 mov     [edx+0Fh], al
.text:000001EC                 mov     ecx, [ebp+var_10]
.text:000001EF                 mov     byte ptr [ecx+0Eh], 1
.text:000001F3                 mov     edx, [ebp+var_10]
.text:000001F6                 mov     eax, [ebp+var_14]
.text:000001F9                 mov     ecx, [eax]
.text:000001FB                 mov     [edx+18h], ecx
.text:000001FE                 mov     eax, [eax+4]
.text:00000201                 mov     [edx+1Ch], eax
.text:00000204                 cmp     [ebp+var_1C], 0
.text:00000208                 jnz     short loc_244
.text:0000020A                 lea     ecx, [ebp+var_24]
.text:0000020D                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:00000212                 movzx   ecx, al
.text:00000215                 test    ecx, ecx
.text:00000217                 jz      short loc_244
.text:00000219                 mov     edx, [ebp+var_10]
.text:0000021C                 mov     eax, [edx+28h]
.text:0000021F                 push    eax             ; unsigned int
.text:00000220                 mov     ecx, [ebp+var_10]
.text:00000223                 mov     ecx, [ecx+2Ch]  ; this
.text:00000226                 call    ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CDatabase::IsItemAnti(uint)
.text:0000022B                 movzx   edx, al
.text:0000022E                 test    edx, edx
.text:00000230                 jnz     short loc_244
.text:00000232                 mov     eax, [ebp+var_14]
.text:00000235                 movzx   ecx, byte ptr [eax+11h]
.text:00000239                 test    ecx, ecx
.text:0000023B                 jnz     short loc_244
.text:0000023D                 mov     [ebp+var_1C], 2
.text:00000244
.text:00000244 loc_244:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+1B8j
.text:00000244                                         ; NArchive::N7z::CFolderOutStream::OpenFile(bool)+1C7j ...
.text:00000244                 mov     ecx, [ebp+var_10]
.text:00000247                 add     ecx, 30h ; '0'
.text:0000024A                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:0000024F                 mov     [ebp+var_48], eax
.text:00000252                 mov     esi, esp
.text:00000254                 mov     edx, [ebp+var_1C]
.text:00000257                 push    edx
.text:00000258                 mov     eax, [ebp+var_48]
.text:0000025B                 push    eax
.text:0000025C                 mov     ecx, [ebp+var_48]
.text:0000025F                 mov     edx, [ecx]
.text:00000261                 mov     eax, [edx+18h]
.text:00000264                 call    eax
.text:00000266                 cmp     esi, esp
.text:00000268                 call    __RTC_CheckEsp
.text:0000026D                 mov     [ebp+var_34], eax
.text:00000270                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000277                 lea     ecx, [ebp+var_24]
.text:0000027A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000027F                 mov     eax, [ebp+var_34]
.text:00000282
.text:00000282 loc_282:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+144j
.text:00000282                 push    edx
.text:00000283                 mov     ecx, ebp
.text:00000285                 push    eax
.text:00000286                 lea     edx, $LN16
.text:0000028C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000291                 pop     eax
.text:00000292                 pop     edx
.text:00000293                 mov     ecx, [ebp+var_C]
.text:00000296                 mov     large fs:0, ecx
.text:0000029D                 pop     ecx
.text:0000029E                 pop     edi
.text:0000029F                 pop     esi
.text:000002A0                 add     esp, 48h
.text:000002A3                 cmp     ebp, esp
.text:000002A5                 call    __RTC_CheckEsp
.text:000002AA                 mov     esp, ebp
.text:000002AC                 pop     ebp
.text:000002AD                 retn    4
.text:000002AD ?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z endp
.text:000002AD
.text:000002AD ; ---------------------------------------------------------------------------
.text:000002B0 $LN16           dd 1                    ; DATA XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+236o
.text:000002B4                 dd offset $LN15
.text:000002B8 $LN15           dd 0FFFFFFDCh, 4        ; DATA XREF: .text:000002B4o
.text:000002C0                 dd offset $LN13         ; "realOutStream"
.text:000002C4 $LN13           db 'realOutStream',0    ; DATA XREF: .text:000002C0o
.text:000002D2                 align 10h
.text:000002E0
.text:000002E0 ; =============== S U B R O U T I N E =======================================
.text:000002E0
.text:000002E0 ; Attributes: bp-based frame
.text:000002E0
.text:000002E0 ; __int32 __thiscall NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult(NArchive::N7z::CFolderOutStream *this, int)
.text:000002E0                 public ?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z
.text:000002E0 ?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z proc near
.text:000002E0                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::CloseFile(void)+69p
.text:000002E0                                         ; NArchive::N7z::CFolderOutStream::FlushCorrupted(int)+39p
.text:000002E0
.text:000002E0 var_8           = dword ptr -8
.text:000002E0 var_4           = dword ptr -4
.text:000002E0 arg_0           = dword ptr  8
.text:000002E0
.text:000002E0                 push    ebp
.text:000002E1                 mov     ebp, esp
.text:000002E3                 sub     esp, 8
.text:000002E6                 push    esi
.text:000002E7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002EE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002F5                 mov     [ebp+var_4], ecx
.text:000002F8                 mov     ecx, [ebp+var_4]
.text:000002FB                 add     ecx, 8
.text:000002FE                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00000303                 mov     eax, [ebp+var_4]
.text:00000306                 mov     byte ptr [eax+0Eh], 0
.text:0000030A                 mov     ecx, [ebp+var_4]
.text:0000030D                 cmp     dword ptr [ecx+20h], 0
.text:00000311                 jnz     short loc_324
.text:00000313                 mov     edx, [ebp+var_4]
.text:00000316                 mov     eax, [edx+24h]
.text:00000319                 sub     eax, 1
.text:0000031C                 mov     ecx, [ebp+var_4]
.text:0000031F                 mov     [ecx+24h], eax
.text:00000322                 jmp     short loc_352
.text:00000324 ; ---------------------------------------------------------------------------
.text:00000324
.text:00000324 loc_324:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult(int)+31j
.text:00000324                 mov     edx, [ebp+var_4]
.text:00000327                 mov     eax, [edx+20h]
.text:0000032A                 mov     ecx, [ebp+var_4]
.text:0000032D                 mov     edx, [eax]
.text:0000032F                 cmp     edx, [ecx+28h]
.text:00000332                 jnz     short loc_352
.text:00000334                 mov     eax, [ebp+var_4]
.text:00000337                 mov     ecx, [eax+20h]
.text:0000033A                 add     ecx, 4
.text:0000033D                 mov     edx, [ebp+var_4]
.text:00000340                 mov     [edx+20h], ecx
.text:00000343                 mov     eax, [ebp+var_4]
.text:00000346                 mov     ecx, [eax+24h]
.text:00000349                 sub     ecx, 1
.text:0000034C                 mov     edx, [ebp+var_4]
.text:0000034F                 mov     [edx+24h], ecx
.text:00000352
.text:00000352 loc_352:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult(int)+42j
.text:00000352                                         ; NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult(int)+52j
.text:00000352                 mov     eax, [ebp+var_4]
.text:00000355                 mov     ecx, [eax+28h]
.text:00000358                 add     ecx, 1
.text:0000035B                 mov     edx, [ebp+var_4]
.text:0000035E                 mov     [edx+28h], ecx
.text:00000361                 mov     ecx, [ebp+var_4]
.text:00000364                 add     ecx, 30h ; '0'
.text:00000367                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:0000036C                 mov     [ebp+var_8], eax
.text:0000036F                 mov     esi, esp
.text:00000371                 mov     eax, [ebp+arg_0]
.text:00000374                 push    eax
.text:00000375                 mov     ecx, [ebp+var_8]
.text:00000378                 push    ecx
.text:00000379                 mov     edx, [ebp+var_8]
.text:0000037C                 mov     eax, [edx]
.text:0000037E                 mov     ecx, [eax+1Ch]
.text:00000381                 call    ecx
.text:00000383                 cmp     esi, esp
.text:00000385                 call    __RTC_CheckEsp
.text:0000038A                 pop     esi
.text:0000038B                 add     esp, 8
.text:0000038E                 cmp     ebp, esp
.text:00000390                 call    __RTC_CheckEsp
.text:00000395                 mov     esp, ebp
.text:00000397                 pop     ebp
.text:00000398                 retn    4
.text:00000398 ?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z endp
.text:00000398
.text:00000398 ; ---------------------------------------------------------------------------
.text:0000039B                 align 10h
.text:000003A0
.text:000003A0 ; =============== S U B R O U T I N E =======================================
.text:000003A0
.text:000003A0 ; Attributes: bp-based frame
.text:000003A0
.text:000003A0 ; __int32 __thiscall NArchive::N7z::CFolderOutStream::CloseFile(NArchive::N7z::CFolderOutStream *__hidden this)
.text:000003A0                 public ?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ
.text:000003A0 ?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ proc near
.text:000003A0                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)+63p
.text:000003A0                                         ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+143p
.text:000003A0
.text:000003A0 var_C           = dword ptr -0Ch
.text:000003A0 var_8           = dword ptr -8
.text:000003A0 var_4           = dword ptr -4
.text:000003A0
.text:000003A0                 push    ebp
.text:000003A1                 mov     ebp, esp
.text:000003A3                 sub     esp, 0Ch
.text:000003A6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000003AD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000003B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003BB                 mov     [ebp+var_4], ecx
.text:000003BE                 mov     eax, [ebp+var_4]
.text:000003C1                 mov     ecx, [eax+28h]
.text:000003C4                 push    ecx
.text:000003C5                 mov     edx, [ebp+var_4]
.text:000003C8                 mov     ecx, [edx+2Ch]
.text:000003CB                 add     ecx, 58h ; 'X'
.text:000003CE                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:000003D3                 mov     [ebp+var_8], eax
.text:000003D6                 mov     eax, [ebp+var_4]
.text:000003D9                 movzx   ecx, byte ptr [eax+0Fh]
.text:000003DD                 test    ecx, ecx
.text:000003DF                 jz      short loc_3FB
.text:000003E1                 mov     edx, [ebp+var_4]
.text:000003E4                 mov     eax, [edx+10h]
.text:000003E7                 xor     eax, 0FFFFFFFFh
.text:000003EA                 mov     ecx, [ebp+var_8]
.text:000003ED                 cmp     [ecx+0Ch], eax
.text:000003F0                 jz      short loc_3FB
.text:000003F2                 mov     [ebp+var_C], 3
.text:000003F9                 jmp     short loc_402
.text:000003FB ; ---------------------------------------------------------------------------
.text:000003FB
.text:000003FB loc_3FB:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::CloseFile(void)+3Fj
.text:000003FB                                         ; NArchive::N7z::CFolderOutStream::CloseFile(void)+50j
.text:000003FB                 mov     [ebp+var_C], 0
.text:00000402
.text:00000402 loc_402:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::CloseFile(void)+59j
.text:00000402                 mov     edx, [ebp+var_C]
.text:00000405                 push    edx             ; int
.text:00000406                 mov     ecx, [ebp+var_4] ; this
.text:00000409                 call    ?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z ; NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult(int)
.text:0000040E                 add     esp, 0Ch
.text:00000411                 cmp     ebp, esp
.text:00000413                 call    __RTC_CheckEsp
.text:00000418                 mov     esp, ebp
.text:0000041A                 pop     ebp
.text:0000041B                 retn
.text:0000041B ?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ endp
.text:0000041B
.text:0000041B ; ---------------------------------------------------------------------------
.text:0000041C                 align 10h
.text:00000420
.text:00000420 ; =============== S U B R O U T I N E =======================================
.text:00000420
.text:00000420 ; Attributes: bp-based frame
.text:00000420
.text:00000420 ; __int32 __thiscall NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(NArchive::N7z::CFolderOutStream *__hidden this)
.text:00000420                 public ?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ
.text:00000420 ?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ proc near
.text:00000420                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::Init(uint,uint const *,uint)+3Ap
.text:00000420                                         ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+15Cp ...
.text:00000420
.text:00000420 var_10          = dword ptr -10h
.text:00000420 var_C           = dword ptr -0Ch
.text:00000420 var_8           = dword ptr -8
.text:00000420 var_4           = dword ptr -4
.text:00000420
.text:00000420                 push    ebp
.text:00000421                 mov     ebp, esp
.text:00000423                 sub     esp, 10h
.text:00000426                 mov     eax, 0CCCCCCCCh
.text:0000042B                 mov     [ebp+var_10], eax
.text:0000042E                 mov     [ebp+var_C], eax
.text:00000431                 mov     [ebp+var_8], eax
.text:00000434                 mov     [ebp+var_4], eax
.text:00000437                 mov     [ebp+var_4], ecx
.text:0000043A
.text:0000043A loc_43A:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void):loc_496j
.text:0000043A                 mov     eax, [ebp+var_4]
.text:0000043D                 cmp     dword ptr [eax+24h], 0
.text:00000441                 jz      short loc_498
.text:00000443                 mov     ecx, [ebp+var_4]
.text:00000446                 mov     edx, [ecx+28h]
.text:00000449                 push    edx
.text:0000044A                 mov     eax, [ebp+var_4]
.text:0000044D                 mov     ecx, [eax+2Ch]
.text:00000450                 add     ecx, 58h ; 'X'
.text:00000453                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00000458                 mov     [ebp+var_10], eax
.text:0000045B                 mov     ecx, [ebp+var_10]
.text:0000045E                 mov     edx, [ebp+var_10]
.text:00000461                 mov     eax, [ecx]
.text:00000463                 or      eax, [edx+4]
.text:00000466                 jnz     short loc_498
.text:00000468                 push    0               ; bool
.text:0000046A                 mov     ecx, [ebp+var_4] ; this
.text:0000046D                 call    ?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z ; NArchive::N7z::CFolderOutStream::OpenFile(bool)
.text:00000472                 mov     [ebp+var_8], eax
.text:00000475                 cmp     [ebp+var_8], 0
.text:00000479                 jz      short loc_480
.text:0000047B                 mov     eax, [ebp+var_8]
.text:0000047E                 jmp     short loc_49A
.text:00000480 ; ---------------------------------------------------------------------------
.text:00000480
.text:00000480 loc_480:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)+59j
.text:00000480                 mov     ecx, [ebp+var_4] ; this
.text:00000483                 call    ?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::CloseFile(void)
.text:00000488                 mov     [ebp+var_C], eax
.text:0000048B                 cmp     [ebp+var_C], 0
.text:0000048F                 jz      short loc_496
.text:00000491                 mov     eax, [ebp+var_C]
.text:00000494                 jmp     short loc_49A
.text:00000496 ; ---------------------------------------------------------------------------
.text:00000496
.text:00000496 loc_496:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)+6Fj
.text:00000496                 jmp     short loc_43A
.text:00000498 ; ---------------------------------------------------------------------------
.text:00000498
.text:00000498 loc_498:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)+21j
.text:00000498                                         ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)+46j
.text:00000498                 xor     eax, eax
.text:0000049A
.text:0000049A loc_49A:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)+5Ej
.text:0000049A                                         ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)+74j
.text:0000049A                 add     esp, 10h
.text:0000049D                 cmp     ebp, esp
.text:0000049F                 call    __RTC_CheckEsp
.text:000004A4                 mov     esp, ebp
.text:000004A6                 pop     ebp
.text:000004A7                 retn
.text:000004A7 ?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ endp
.text:000004A7
.text:000004A7 ; ---------------------------------------------------------------------------
.text:000004A8                 align 10h
.text:000004B0
.text:000004B0 ; =============== S U B R O U T I N E =======================================
.text:000004B0
.text:000004B0 ; Attributes: bp-based frame
.text:000004B0
.text:000004B0 ; __int32 __stdcall NArchive::N7z::CFolderOutStream::Write(NArchive::N7z::CFolderOutStream *this, const void *, unsigned int, unsigned int *)
.text:000004B0                 public ?Write@CFolderOutStream@N7z@NArchive@@UAGJPBXIPAI@Z
.text:000004B0 ?Write@CFolderOutStream@N7z@NArchive@@UAGJPBXIPAI@Z proc near
.text:000004B0                                         ; DATA XREF: .rdata:00001A9Co
.text:000004B0
.text:000004B0 var_3C          = dword ptr -3Ch
.text:000004B0 var_38          = dword ptr -38h
.text:000004B0 var_34          = dword ptr -34h
.text:000004B0 var_30          = dword ptr -30h
.text:000004B0 var_2C          = dword ptr -2Ch
.text:000004B0 var_28          = dword ptr -28h
.text:000004B0 var_24          = dword ptr -24h
.text:000004B0 var_20          = dword ptr -20h
.text:000004B0 var_1C          = dword ptr -1Ch
.text:000004B0 var_18          = dword ptr -18h
.text:000004B0 var_14          = dword ptr -14h
.text:000004B0 var_10          = dword ptr -10h
.text:000004B0 var_8           = dword ptr -8
.text:000004B0 this            = dword ptr  8
.text:000004B0 arg_4           = dword ptr  0Ch
.text:000004B0 arg_8           = dword ptr  10h
.text:000004B0 arg_C           = dword ptr  14h
.text:000004B0
.text:000004B0                 push    ebp
.text:000004B1                 mov     ebp, esp
.text:000004B3                 sub     esp, 3Ch
.text:000004B6                 push    esi
.text:000004B7                 push    edi
.text:000004B8                 lea     edi, [ebp+var_3C]
.text:000004BB                 mov     ecx, 0Fh
.text:000004C0                 mov     eax, 0CCCCCCCCh
.text:000004C5                 rep stosd
.text:000004C7                 cmp     [ebp+arg_C], 0
.text:000004CB                 jz      short loc_4D6
.text:000004CD                 mov     eax, [ebp+arg_C]
.text:000004D0                 mov     dword ptr [eax], 0
.text:000004D6
.text:000004D6 loc_4D6:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+1Bj
.text:000004D6                                         ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *):loc_638j ...
.text:000004D6                 cmp     [ebp+arg_8], 0
.text:000004DA                 jz      loc_687
.text:000004E0                 mov     ecx, [ebp+this]
.text:000004E3                 movzx   edx, byte ptr [ecx+0Eh]
.text:000004E7                 test    edx, edx
.text:000004E9                 jz      loc_63D
.text:000004EF                 mov     eax, [ebp+arg_8]
.text:000004F2                 xor     ecx, ecx
.text:000004F4                 mov     edx, [ebp+this]
.text:000004F7                 mov     [ebp+var_2C], eax
.text:000004FA                 mov     [ebp+var_28], ecx
.text:000004FD                 mov     [ebp+var_30], edx
.text:00000500                 mov     eax, [ebp+var_30]
.text:00000503                 mov     ecx, [ebp+var_28]
.text:00000506                 cmp     ecx, [eax+1Ch]
.text:00000509                 ja      short loc_520
.text:0000050B                 jb      short loc_518
.text:0000050D                 mov     edx, [ebp+var_30]
.text:00000510                 mov     eax, [ebp+var_2C]
.text:00000513                 cmp     eax, [edx+18h]
.text:00000516                 jnb     short loc_520
.text:00000518
.text:00000518 loc_518:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+5Bj
.text:00000518                 mov     ecx, [ebp+arg_8]
.text:0000051B                 mov     [ebp+var_34], ecx
.text:0000051E                 jmp     short loc_529
.text:00000520 ; ---------------------------------------------------------------------------
.text:00000520
.text:00000520 loc_520:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+59j
.text:00000520                                         ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+66j
.text:00000520                 mov     edx, [ebp+this]
.text:00000523                 mov     eax, [edx+18h]
.text:00000526                 mov     [ebp+var_34], eax
.text:00000529
.text:00000529 loc_529:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+6Ej
.text:00000529                 mov     ecx, [ebp+var_34]
.text:0000052C                 mov     [ebp+var_8], ecx
.text:0000052F                 mov     [ebp+var_10], 0
.text:00000536                 mov     ecx, [ebp+this]
.text:00000539                 add     ecx, 8
.text:0000053C                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000541                 test    eax, eax
.text:00000543                 jz      short loc_579
.text:00000545                 mov     ecx, [ebp+this]
.text:00000548                 add     ecx, 8
.text:0000054B                 call    ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->(void)
.text:00000550                 mov     [ebp+var_38], eax
.text:00000553                 mov     esi, esp
.text:00000555                 lea     edx, [ebp+var_8]
.text:00000558                 push    edx
.text:00000559                 mov     eax, [ebp+var_8]
.text:0000055C                 push    eax
.text:0000055D                 mov     ecx, [ebp+arg_4]
.text:00000560                 push    ecx
.text:00000561                 mov     edx, [ebp+var_38]
.text:00000564                 push    edx
.text:00000565                 mov     eax, [ebp+var_38]
.text:00000568                 mov     ecx, [eax]
.text:0000056A                 mov     edx, [ecx+0Ch]
.text:0000056D                 call    edx
.text:0000056F                 cmp     esi, esp
.text:00000571                 call    __RTC_CheckEsp
.text:00000576                 mov     [ebp+var_10], eax
.text:00000579
.text:00000579 loc_579:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+93j
.text:00000579                 mov     eax, [ebp+this]
.text:0000057C                 movzx   ecx, byte ptr [eax+0Fh]
.text:00000580                 test    ecx, ecx
.text:00000582                 jz      short loc_59C
.text:00000584                 mov     edx, [ebp+var_8]
.text:00000587                 push    edx
.text:00000588                 mov     edx, [ebp+arg_4]
.text:0000058B                 mov     eax, [ebp+this]
.text:0000058E                 mov     ecx, [eax+10h]
.text:00000591                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:00000596                 mov     ecx, [ebp+this]
.text:00000599                 mov     [ecx+10h], eax
.text:0000059C
.text:0000059C loc_59C:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+D2j
.text:0000059C                 cmp     [ebp+arg_C], 0
.text:000005A0                 jz      short loc_5AF
.text:000005A2                 mov     edx, [ebp+arg_C]
.text:000005A5                 mov     eax, [edx]
.text:000005A7                 add     eax, [ebp+var_8]
.text:000005AA                 mov     ecx, [ebp+arg_C]
.text:000005AD                 mov     [ecx], eax
.text:000005AF
.text:000005AF loc_5AF:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+F0j
.text:000005AF                 mov     edx, [ebp+arg_4]
.text:000005B2                 add     edx, [ebp+var_8]
.text:000005B5                 mov     [ebp+arg_4], edx
.text:000005B8                 mov     eax, [ebp+arg_8]
.text:000005BB                 sub     eax, [ebp+var_8]
.text:000005BE                 mov     [ebp+arg_8], eax
.text:000005C1                 mov     ecx, [ebp+var_8]
.text:000005C4                 xor     edx, edx
.text:000005C6                 mov     eax, [ebp+this]
.text:000005C9                 mov     esi, [eax+18h]
.text:000005CC                 sub     esi, ecx
.text:000005CE                 mov     ecx, [eax+1Ch]
.text:000005D1                 sbb     ecx, edx
.text:000005D3                 mov     edx, [ebp+this]
.text:000005D6                 mov     [edx+18h], esi
.text:000005D9                 mov     [edx+1Ch], ecx
.text:000005DC                 mov     eax, [ebp+this]
.text:000005DF                 mov     [ebp+var_3C], eax
.text:000005E2                 mov     ecx, [ebp+var_3C]
.text:000005E5                 mov     edx, [ebp+var_3C]
.text:000005E8                 mov     eax, [ecx+18h]
.text:000005EB                 or      eax, [edx+1Ch]
.text:000005EE                 jnz     short loc_61F
.text:000005F0                 mov     ecx, [ebp+this] ; this
.text:000005F3                 call    ?CloseFile@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::CloseFile(void)
.text:000005F8                 mov     [ebp+var_14], eax
.text:000005FB                 cmp     [ebp+var_14], 0
.text:000005FF                 jz      short loc_609
.text:00000601                 mov     eax, [ebp+var_14]
.text:00000604                 jmp     loc_689
.text:00000609 ; ---------------------------------------------------------------------------
.text:00000609
.text:00000609 loc_609:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+14Fj
.text:00000609                 mov     ecx, [ebp+this] ; this
.text:0000060C                 call    ?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)
.text:00000611                 mov     [ebp+var_18], eax
.text:00000614                 cmp     [ebp+var_18], 0
.text:00000618                 jz      short loc_61F
.text:0000061A                 mov     eax, [ebp+var_18]
.text:0000061D                 jmp     short loc_689
.text:0000061F ; ---------------------------------------------------------------------------
.text:0000061F
.text:0000061F loc_61F:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+13Ej
.text:0000061F                                         ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+168j
.text:0000061F                 mov     ecx, [ebp+var_10]
.text:00000622                 mov     [ebp+var_1C], ecx
.text:00000625                 cmp     [ebp+var_1C], 0
.text:00000629                 jz      short loc_630
.text:0000062B                 mov     eax, [ebp+var_1C]
.text:0000062E                 jmp     short loc_689
.text:00000630 ; ---------------------------------------------------------------------------
.text:00000630
.text:00000630 loc_630:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+179j
.text:00000630                 cmp     [ebp+var_8], 0
.text:00000634                 jnz     short loc_638
.text:00000636                 jmp     short loc_687
.text:00000638 ; ---------------------------------------------------------------------------
.text:00000638
.text:00000638 loc_638:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+184j
.text:00000638                 jmp     loc_4D6
.text:0000063D ; ---------------------------------------------------------------------------
.text:0000063D
.text:0000063D loc_63D:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+39j
.text:0000063D                 mov     ecx, [ebp+this] ; this
.text:00000640                 call    ?ProcessEmptyFiles@CFolderOutStream@N7z@NArchive@@AAEJXZ ; NArchive::N7z::CFolderOutStream::ProcessEmptyFiles(void)
.text:00000645                 mov     [ebp+var_20], eax
.text:00000648                 cmp     [ebp+var_20], 0
.text:0000064C                 jz      short loc_653
.text:0000064E                 mov     eax, [ebp+var_20]
.text:00000651                 jmp     short loc_689
.text:00000653 ; ---------------------------------------------------------------------------
.text:00000653
.text:00000653 loc_653:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+19Cj
.text:00000653                 mov     edx, [ebp+this]
.text:00000656                 cmp     dword ptr [edx+24h], 0
.text:0000065A                 jnz     short loc_66A
.text:0000065C                 mov     eax, [ebp+this]
.text:0000065F                 mov     byte ptr [eax+34h], 1
.text:00000663                 mov     eax, 20000010h
.text:00000668                 jmp     short loc_689
.text:0000066A ; ---------------------------------------------------------------------------
.text:0000066A
.text:0000066A loc_66A:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+1AAj
.text:0000066A                 push    0               ; bool
.text:0000066C                 mov     ecx, [ebp+this] ; this
.text:0000066F                 call    ?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z ; NArchive::N7z::CFolderOutStream::OpenFile(bool)
.text:00000674                 mov     [ebp+var_24], eax
.text:00000677                 cmp     [ebp+var_24], 0
.text:0000067B                 jz      short loc_682
.text:0000067D                 mov     eax, [ebp+var_24]
.text:00000680                 jmp     short loc_689
.text:00000682 ; ---------------------------------------------------------------------------
.text:00000682
.text:00000682 loc_682:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+1CBj
.text:00000682                 jmp     loc_4D6
.text:00000687 ; ---------------------------------------------------------------------------
.text:00000687
.text:00000687 loc_687:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+2Aj
.text:00000687                                         ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+186j
.text:00000687                 xor     eax, eax
.text:00000689
.text:00000689 loc_689:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+154j
.text:00000689                                         ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+16Dj ...
.text:00000689                 push    edx
.text:0000068A                 mov     ecx, ebp
.text:0000068C                 push    eax
.text:0000068D                 lea     edx, $LN24
.text:00000693                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000698                 pop     eax
.text:00000699                 pop     edx
.text:0000069A                 pop     edi
.text:0000069B                 pop     esi
.text:0000069C                 add     esp, 3Ch
.text:0000069F                 cmp     ebp, esp
.text:000006A1                 call    __RTC_CheckEsp
.text:000006A6                 mov     esp, ebp
.text:000006A8                 pop     ebp
.text:000006A9                 retn    10h
.text:000006A9 ?Write@CFolderOutStream@N7z@NArchive@@UAGJPBXIPAI@Z endp
.text:000006A9
.text:000006A9 ; ---------------------------------------------------------------------------
.text:000006AC $LN24           dd 1                    ; DATA XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+1DDo
.text:000006B0                 dd offset $LN23
.text:000006B4 $LN23           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000006B0o
.text:000006BC                 dd offset $LN22
.text:000006C0 $LN22           dd 727563h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000006BCo
.text:000006D0
.text:000006D0 ; =============== S U B R O U T I N E =======================================
.text:000006D0
.text:000006D0 ; Attributes: bp-based frame
.text:000006D0
.text:000006D0 ; __int32 __thiscall NArchive::N7z::CFolderOutStream::FlushCorrupted(NArchive::N7z::CFolderOutStream *this, int)
.text:000006D0                 public ?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z
.text:000006D0 ?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z proc near
.text:000006D0                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9ADp
.text:000006D0                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C05p ...
.text:000006D0
.text:000006D0 var_C           = dword ptr -0Ch
.text:000006D0 var_8           = dword ptr -8
.text:000006D0 var_4           = dword ptr -4
.text:000006D0 arg_0           = dword ptr  8
.text:000006D0
.text:000006D0                 push    ebp
.text:000006D1                 mov     ebp, esp
.text:000006D3                 sub     esp, 0Ch
.text:000006D6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000006DD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000006E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006EB                 mov     [ebp+var_4], ecx
.text:000006EE
.text:000006EE loc_6EE:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::FlushCorrupted(int):loc_736j
.text:000006EE                 mov     eax, [ebp+var_4]
.text:000006F1                 cmp     dword ptr [eax+24h], 0
.text:000006F5                 jz      short loc_738
.text:000006F7                 mov     ecx, [ebp+var_4]
.text:000006FA                 movzx   edx, byte ptr [ecx+0Eh]
.text:000006FE                 test    edx, edx
.text:00000700                 jz      short loc_71E
.text:00000702                 mov     eax, [ebp+arg_0]
.text:00000705                 push    eax             ; int
.text:00000706                 mov     ecx, [ebp+var_4] ; this
.text:00000709                 call    ?CloseFile_and_SetResult@CFolderOutStream@N7z@NArchive@@AAEJH@Z ; NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult(int)
.text:0000070E                 mov     [ebp+var_8], eax
.text:00000711                 cmp     [ebp+var_8], 0
.text:00000715                 jz      short loc_71C
.text:00000717                 mov     eax, [ebp+var_8]
.text:0000071A                 jmp     short loc_73A
.text:0000071C ; ---------------------------------------------------------------------------
.text:0000071C
.text:0000071C loc_71C:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::FlushCorrupted(int)+45j
.text:0000071C                 jmp     short loc_736
.text:0000071E ; ---------------------------------------------------------------------------
.text:0000071E
.text:0000071E loc_71E:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::FlushCorrupted(int)+30j
.text:0000071E                 push    1               ; bool
.text:00000720                 mov     ecx, [ebp+var_4] ; this
.text:00000723                 call    ?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z ; NArchive::N7z::CFolderOutStream::OpenFile(bool)
.text:00000728                 mov     [ebp+var_C], eax
.text:0000072B                 cmp     [ebp+var_C], 0
.text:0000072F                 jz      short loc_736
.text:00000731                 mov     eax, [ebp+var_C]
.text:00000734                 jmp     short loc_73A
.text:00000736 ; ---------------------------------------------------------------------------
.text:00000736
.text:00000736 loc_736:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::FlushCorrupted(int):loc_71Cj
.text:00000736                                         ; NArchive::N7z::CFolderOutStream::FlushCorrupted(int)+5Fj
.text:00000736                 jmp     short loc_6EE
.text:00000738 ; ---------------------------------------------------------------------------
.text:00000738
.text:00000738 loc_738:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::FlushCorrupted(int)+25j
.text:00000738                 xor     eax, eax
.text:0000073A
.text:0000073A loc_73A:                                ; CODE XREF: NArchive::N7z::CFolderOutStream::FlushCorrupted(int)+4Aj
.text:0000073A                                         ; NArchive::N7z::CFolderOutStream::FlushCorrupted(int)+64j
.text:0000073A                 add     esp, 0Ch
.text:0000073D                 cmp     ebp, esp
.text:0000073F                 call    __RTC_CheckEsp
.text:00000744                 mov     esp, ebp
.text:00000746                 pop     ebp
.text:00000747                 retn    4
.text:00000747 ?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z endp
.text:00000747
.text:00000747 ; ---------------------------------------------------------------------------
.text:0000074A                 align 10h
.text:00000750
.text:00000750 ; =============== S U B R O U T I N E =======================================
.text:00000750
.text:00000750 ; Attributes: bp-based frame
.text:00000750
.text:00000750 ; __int32 __cdecl NArchive::N7z::CHandler::Extract(NArchive::N7z::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:00000750                 public ?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00000750 ?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:00000750
.text:00000750 var_26C         = byte ptr -26Ch
.text:00000750 var_268         = dword ptr -268h
.text:00000750 var_264         = dword ptr -264h
.text:00000750 var_260         = dword ptr -260h
.text:00000750 var_25C         = dword ptr -25Ch
.text:00000750 var_258         = dword ptr -258h
.text:00000750 var_254         = dword ptr -254h
.text:00000750 var_24D         = byte ptr -24Dh
.text:00000750 var_24C         = dword ptr -24Ch
.text:00000750 var_248         = dword ptr -248h
.text:00000750 var_244         = dword ptr -244h
.text:00000750 var_240         = dword ptr -240h
.text:00000750 var_23C         = dword ptr -23Ch
.text:00000750 var_238         = dword ptr -238h
.text:00000750 var_234         = dword ptr -234h
.text:00000750 var_230         = dword ptr -230h
.text:00000750 var_22C         = dword ptr -22Ch
.text:00000750 var_225         = byte ptr -225h
.text:00000750 var_224         = dword ptr -224h
.text:00000750 var_220         = dword ptr -220h
.text:00000750 var_21C         = dword ptr -21Ch
.text:00000750 var_218         = dword ptr -218h
.text:00000750 var_214         = dword ptr -214h
.text:00000750 var_210         = dword ptr -210h
.text:00000750 var_20C         = dword ptr -20Ch
.text:00000750 var_208         = dword ptr -208h
.text:00000750 var_204         = dword ptr -204h
.text:00000750 var_200         = dword ptr -200h
.text:00000750 var_1FC         = dword ptr -1FCh
.text:00000750 var_1F8         = dword ptr -1F8h
.text:00000750 var_1F4         = dword ptr -1F4h
.text:00000750 var_1F0         = dword ptr -1F0h
.text:00000750 var_1EC         = dword ptr -1ECh
.text:00000750 var_1E8         = dword ptr -1E8h
.text:00000750 var_1E4         = dword ptr -1E4h
.text:00000750 var_1E0         = dword ptr -1E0h
.text:00000750 var_1DC         = dword ptr -1DCh
.text:00000750 var_1D8         = dword ptr -1D8h
.text:00000750 var_1D4         = dword ptr -1D4h
.text:00000750 var_1D0         = dword ptr -1D0h
.text:00000750 var_1CC         = dword ptr -1CCh
.text:00000750 var_1C8         = dword ptr -1C8h
.text:00000750 var_1C4         = dword ptr -1C4h
.text:00000750 var_1C0         = dword ptr -1C0h
.text:00000750 var_1BC         = dword ptr -1BCh
.text:00000750 var_1B8         = dword ptr -1B8h
.text:00000750 var_1B4         = dword ptr -1B4h
.text:00000750 var_1AC         = dword ptr -1ACh
.text:00000750 var_1A0         = dword ptr -1A0h
.text:00000750 var_19C         = dword ptr -19Ch
.text:00000750 var_198         = dword ptr -198h
.text:00000750 var_194         = dword ptr -194h
.text:00000750 var_190         = dword ptr -190h
.text:00000750 var_18C         = dword ptr -18Ch
.text:00000750 var_188         = dword ptr -188h
.text:00000750 var_184         = dword ptr -184h
.text:00000750 var_180         = dword ptr -180h
.text:00000750 var_17C         = dword ptr -17Ch
.text:00000750 var_178         = dword ptr -178h
.text:00000750 var_174         = dword ptr -174h
.text:00000750 var_16C         = dword ptr -16Ch
.text:00000750 var_168         = dword ptr -168h
.text:00000750 var_164         = dword ptr -164h
.text:00000750 var_160         = dword ptr -160h
.text:00000750 var_159         = byte ptr -159h
.text:00000750 var_158         = dword ptr -158h
.text:00000750 var_150         = byte ptr -150h
.text:00000750 var_139         = byte ptr -139h
.text:00000750 var_12D         = byte ptr -12Dh
.text:00000750 var_124         = byte ptr -124h
.text:00000750 var_11C         = dword ptr -11Ch
.text:00000750 var_118         = dword ptr -118h
.text:00000750 var_114         = dword ptr -114h
.text:00000750 var_110         = dword ptr -110h
.text:00000750 var_10C         = dword ptr -10Ch
.text:00000750 var_108         = dword ptr -108h
.text:00000750 var_104         = dword ptr -104h
.text:00000750 var_100         = dword ptr -100h
.text:00000750 var_FC          = dword ptr -0FCh
.text:00000750 var_F8          = dword ptr -0F8h
.text:00000750 var_F0          = byte ptr -0F0h
.text:00000750 var_E8          = dword ptr -0E8h
.text:00000750 var_E0          = byte ptr -0E0h
.text:00000750 var_D4          = qword ptr -0D4h
.text:00000750 var_C8          = dword ptr -0C8h
.text:00000750 var_C4          = dword ptr -0C4h
.text:00000750 var_BC          = byte ptr -0BCh
.text:00000750 var_50          = byte ptr -50h
.text:00000750 var_48          = dword ptr -48h
.text:00000750 var_44          = dword ptr -44h
.text:00000750 var_40          = dword ptr -40h
.text:00000750 var_3C          = dword ptr -3Ch
.text:00000750 var_38          = dword ptr -38h
.text:00000750 var_34          = dword ptr -34h
.text:00000750 var_30          = dword ptr -30h
.text:00000750 var_2C          = dword ptr -2Ch
.text:00000750 var_25          = byte ptr -25h
.text:00000750 var_24          = dword ptr -24h
.text:00000750 var_20          = dword ptr -20h
.text:00000750 var_18          = byte ptr -18h
.text:00000750 var_10          = dword ptr -10h
.text:00000750 var_C           = dword ptr -0Ch
.text:00000750 var_4           = dword ptr -4
.text:00000750 this            = dword ptr  8
.text:00000750 arg_4           = dword ptr  0Ch
.text:00000750 arg_8           = dword ptr  10h
.text:00000750 arg_C           = dword ptr  14h
.text:00000750 arg_10          = dword ptr  18h
.text:00000750
.text:00000750 ; FUNCTION CHUNK AT .text:00001551 SIZE 00000057 BYTES
.text:00000750 ; FUNCTION CHUNK AT .text:000015D4 SIZE 00000032 BYTES
.text:00000750
.text:00000750                 push    ebp
.text:00000751                 mov     ebp, esp
.text:00000753                 push    0FFFFFFFFh
.text:00000755                 push    offset __ehhandler$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:0000075A                 mov     eax, large fs:0
.text:00000760                 push    eax
.text:00000761                 push    ecx
.text:00000762                 sub     esp, 25Ch
.text:00000768                 push    ebx
.text:00000769                 push    esi
.text:0000076A                 push    edi
.text:0000076B                 lea     edi, [ebp+var_26C]
.text:00000771                 mov     ecx, 97h ; 'ù'
.text:00000776                 mov     eax, 0CCCCCCCCh
.text:0000077B                 rep stosd
.text:0000077D                 mov     eax, dword ptr ds:___security_cookie
.text:00000782                 xor     eax, ebp
.text:00000784                 push    eax
.text:00000785                 lea     eax, [ebp+var_C]
.text:00000788                 mov     large fs:0, eax
.text:0000078E                 mov     [ebp+var_10], esp
.text:00000791                 mov     [ebp+var_4], 0
.text:00000798                 mov     eax, [ebp+arg_10]
.text:0000079B                 push    eax
.text:0000079C                 lea     ecx, [ebp+var_18]
.text:0000079F                 call    ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>(IArchiveExtractCallback *)
.text:000007A4                 mov     byte ptr [ebp+var_4], 1
.text:000007A8                 mov     [ebp+var_24], 0
.text:000007AF                 mov     [ebp+var_20], 0
.text:000007B6                 xor     ecx, ecx
.text:000007B8                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:000007BC                 setz    cl
.text:000007BF                 mov     [ebp+var_25], cl
.text:000007C2                 movzx   edx, [ebp+var_25]
.text:000007C6                 test    edx, edx
.text:000007C8                 jz      short loc_7E7
.text:000007CA                 mov     ecx, [ebp+this]
.text:000007CD                 add     ecx, 0E8h ; 'F'
.text:000007D3                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:000007D8                 mov     [ebp+var_1B4], eax
.text:000007DE                 mov     eax, [ebp+var_1B4]
.text:000007E4                 mov     [ebp+arg_8], eax
.text:000007E7
.text:000007E7 loc_7E7:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+78j
.text:000007E7                 cmp     [ebp+arg_8], 0
.text:000007EB                 jnz     short loc_80E
.text:000007ED                 mov     [ebp+var_174], 0
.text:000007F7                 mov     byte ptr [ebp+var_4], 0
.text:000007FB                 lea     ecx, [ebp+var_18]
.text:000007FE                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00000803                 mov     eax, [ebp+var_174]
.text:00000809                 jmp     loc_15D4
.text:0000080E ; ---------------------------------------------------------------------------
.text:0000080E
.text:0000080E loc_80E:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9Bj
.text:0000080E                 mov     [ebp+var_2C], 0FFFFFFFFh
.text:00000815                 mov     [ebp+var_30], 0
.text:0000081C                 mov     [ebp+var_34], 0
.text:00000823                 jmp     short loc_82E
.text:00000825 ; ---------------------------------------------------------------------------
.text:00000825
.text:00000825 loc_825:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+13Ej
.text:00000825                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1CCj
.text:00000825                 mov     ecx, [ebp+var_34]
.text:00000828                 add     ecx, 1
.text:0000082B                 mov     [ebp+var_34], ecx
.text:0000082E
.text:0000082E loc_82E:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+D3j
.text:0000082E                 mov     edx, [ebp+var_34]
.text:00000831                 cmp     edx, [ebp+arg_8]
.text:00000834                 jnb     loc_921
.text:0000083A                 movzx   eax, [ebp+var_25]
.text:0000083E                 test    eax, eax
.text:00000840                 jz      short loc_84D
.text:00000842                 mov     ecx, [ebp+var_34]
.text:00000845                 mov     [ebp+var_1B8], ecx
.text:0000084B                 jmp     short loc_85C
.text:0000084D ; ---------------------------------------------------------------------------
.text:0000084D
.text:0000084D loc_84D:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F0j
.text:0000084D                 mov     edx, [ebp+var_34]
.text:00000850                 mov     eax, [ebp+arg_4]
.text:00000853                 mov     ecx, [eax+edx*4]
.text:00000856                 mov     [ebp+var_1B8], ecx
.text:0000085C
.text:0000085C loc_85C:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+FBj
.text:0000085C                 mov     edx, [ebp+var_1B8]
.text:00000862                 mov     [ebp+var_38], edx
.text:00000865                 mov     ecx, [ebp+this]
.text:00000868                 add     ecx, 1ACh
.text:0000086E                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00000873                 mov     [ebp+var_1BC], eax
.text:00000879                 mov     eax, [ebp+var_38]
.text:0000087C                 mov     ecx, [ebp+var_1BC]
.text:00000882                 mov     edx, [ecx+eax*4]
.text:00000885                 mov     [ebp+var_3C], edx
.text:00000888                 cmp     [ebp+var_3C], 0FFFFFFFFh
.text:0000088C                 jnz     short loc_890
.text:0000088E                 jmp     short loc_825
.text:00000890 ; ---------------------------------------------------------------------------
.text:00000890
.text:00000890 loc_890:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+13Cj
.text:00000890                 mov     eax, [ebp+var_3C]
.text:00000893                 cmp     eax, [ebp+var_2C]
.text:00000896                 jnz     short loc_8A0
.text:00000898                 mov     ecx, [ebp+var_38]
.text:0000089B                 cmp     ecx, [ebp+var_30]
.text:0000089E                 jnb     short loc_8C3
.text:000008A0
.text:000008A0 loc_8A0:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+146j
.text:000008A0                 mov     ecx, [ebp+this]
.text:000008A3                 add     ecx, 1A8h
.text:000008A9                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:000008AE                 mov     [ebp+var_1C0], eax
.text:000008B4                 mov     edx, [ebp+var_3C]
.text:000008B7                 mov     eax, [ebp+var_1C0]
.text:000008BD                 mov     ecx, [eax+edx*4]
.text:000008C0                 mov     [ebp+var_30], ecx
.text:000008C3
.text:000008C3 loc_8C3:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+14Ej
.text:000008C3                 mov     edx, [ebp+var_30]
.text:000008C6                 mov     [ebp+var_40], edx
.text:000008C9                 jmp     short loc_8D4
.text:000008CB ; ---------------------------------------------------------------------------
.text:000008CB
.text:000008CB loc_8CB:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1BBj
.text:000008CB                 mov     eax, [ebp+var_40]
.text:000008CE                 add     eax, 1
.text:000008D1                 mov     [ebp+var_40], eax
.text:000008D4
.text:000008D4 loc_8D4:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+179j
.text:000008D4                 mov     ecx, [ebp+var_40]
.text:000008D7                 cmp     ecx, [ebp+var_38]
.text:000008DA                 ja      short loc_90D
.text:000008DC                 mov     edx, [ebp+var_40]
.text:000008DF                 push    edx
.text:000008E0                 mov     ecx, [ebp+this]
.text:000008E3                 add     ecx, 0E8h ; 'F'
.text:000008E9                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:000008EE                 mov     [ebp+var_1C4], eax
.text:000008F4                 mov     eax, [ebp+var_1C4]
.text:000008FA                 mov     ecx, [ebp+var_24]
.text:000008FD                 add     ecx, [eax]
.text:000008FF                 mov     edx, [ebp+var_20]
.text:00000902                 adc     edx, [eax+4]
.text:00000905                 mov     [ebp+var_24], ecx
.text:00000908                 mov     [ebp+var_20], edx
.text:0000090B                 jmp     short loc_8CB
.text:0000090D ; ---------------------------------------------------------------------------
.text:0000090D
.text:0000090D loc_90D:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+18Aj
.text:0000090D                 mov     eax, [ebp+var_38]
.text:00000910                 add     eax, 1
.text:00000913                 mov     [ebp+var_30], eax
.text:00000916                 mov     ecx, [ebp+var_3C]
.text:00000919                 mov     [ebp+var_2C], ecx
.text:0000091C                 jmp     loc_825
.text:00000921 ; ---------------------------------------------------------------------------
.text:00000921
.text:00000921 loc_921:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+E4j
.text:00000921                 lea     ecx, [ebp+var_18]
.text:00000924                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:00000929                 mov     [ebp+var_1C8], eax
.text:0000092F                 mov     edx, [ebp+var_1C8]
.text:00000935                 mov     [ebp+var_1CC], edx
.text:0000093B                 mov     esi, esp
.text:0000093D                 mov     eax, [ebp+var_20]
.text:00000940                 push    eax
.text:00000941                 mov     ecx, [ebp+var_24]
.text:00000944                 push    ecx
.text:00000945                 mov     edx, [ebp+var_1CC]
.text:0000094B                 push    edx
.text:0000094C                 mov     eax, [ebp+var_1CC]
.text:00000952                 mov     ecx, [eax]
.text:00000954                 mov     edx, [ecx+0Ch]
.text:00000957                 call    edx
.text:00000959                 cmp     esi, esp
.text:0000095B                 call    __RTC_CheckEsp
.text:00000960                 mov     [ebp+var_1D0], eax
.text:00000966                 mov     eax, [ebp+var_1D0]
.text:0000096C                 mov     [ebp+var_44], eax
.text:0000096F                 cmp     [ebp+var_44], 0
.text:00000973                 jz      short loc_995
.text:00000975                 mov     ecx, [ebp+var_44]
.text:00000978                 mov     [ebp+var_178], ecx
.text:0000097E                 mov     byte ptr [ebp+var_4], 0
.text:00000982                 lea     ecx, [ebp+var_18]
.text:00000985                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:0000098A                 mov     eax, [ebp+var_178]
.text:00000990                 jmp     loc_15D4
.text:00000995 ; ---------------------------------------------------------------------------
.text:00000995
.text:00000995 loc_995:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+223j
.text:00000995                 push    38h ; '8'       ; unsigned int
.text:00000997                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000099C                 add     esp, 4
.text:0000099F                 mov     [ebp+var_1D4], eax
.text:000009A5                 mov     edx, [ebp+var_1D4]
.text:000009AB                 mov     [ebp+var_180], edx
.text:000009B1                 mov     byte ptr [ebp+var_4], 2
.text:000009B5                 cmp     [ebp+var_180], 0
.text:000009BC                 jz      short loc_9DD
.text:000009BE                 mov     ecx, [ebp+var_180]
.text:000009C4                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:000009C9                 mov     [ebp+var_1D8], eax
.text:000009CF                 mov     eax, [ebp+var_1D8]
.text:000009D5                 mov     [ebp+var_1DC], eax
.text:000009DB                 jmp     short loc_9E7
.text:000009DD ; ---------------------------------------------------------------------------
.text:000009DD
.text:000009DD loc_9DD:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+26Cj
.text:000009DD                 mov     [ebp+var_1DC], 0
.text:000009E7
.text:000009E7 loc_9E7:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+28Bj
.text:000009E7                 mov     ecx, [ebp+var_1DC]
.text:000009ED                 mov     [ebp+var_17C], ecx
.text:000009F3                 mov     byte ptr [ebp+var_4], 1
.text:000009F7                 mov     edx, [ebp+var_17C]
.text:000009FD                 mov     [ebp+var_48], edx
.text:00000A00                 mov     eax, [ebp+var_48]
.text:00000A03                 push    eax
.text:00000A04                 lea     ecx, [ebp+var_50]
.text:00000A07                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00000A0C                 mov     byte ptr [ebp+var_4], 3
.text:00000A10                 lea     ecx, [ebp+var_18]
.text:00000A13                 call    ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *(void)
.text:00000A18                 mov     [ebp+var_1E0], eax
.text:00000A1E                 push    0               ; bool
.text:00000A20                 mov     ecx, [ebp+var_1E0]
.text:00000A26                 push    ecx             ; struct IProgress *
.text:00000A27                 mov     ecx, [ebp+var_48] ; this
.text:00000A2A                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00000A2F                 mov     edx, [ebp+this]
.text:00000A32                 movzx   eax, byte ptr [edx+83h]
.text:00000A39                 push    eax             ; bool
.text:00000A3A                 lea     ecx, [ebp+var_BC] ; this
.text:00000A40                 call    ??0CDecoder@N7z@NArchive@@QAE@_N@Z ; NArchive::N7z::CDecoder::CDecoder(bool)
.text:00000A45                 mov     [ebp+var_1E4], eax
.text:00000A4B                 mov     byte ptr [ebp+var_4], 4
.text:00000A4F                 lea     ecx, [ebp+var_E0]
.text:00000A55                 call    ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00000A5A                 mov     [ebp+var_1E8], eax
.text:00000A60                 mov     byte ptr [ebp+var_4], 5
.text:00000A64                 lea     ecx, [ebp+var_E0]
.text:00000A6A                 call    ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&(void)
.text:00000A6F                 mov     [ebp+var_1EC], eax
.text:00000A75                 mov     ecx, [ebp+var_1EC]
.text:00000A7B                 push    ecx
.text:00000A7C                 push    offset _IID_IArchiveExtractCallbackMessage
.text:00000A81                 lea     ecx, [ebp+var_18]
.text:00000A84                 call    ??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<IArchiveExtractCallbackMessage>(_GUID const &,IArchiveExtractCallbackMessage * *)
.text:00000A89                 push    38h ; '8'       ; unsigned int
.text:00000A8B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000A90                 add     esp, 4
.text:00000A93                 mov     [ebp+var_1F0], eax
.text:00000A99                 mov     edx, [ebp+var_1F0]
.text:00000A9F                 mov     [ebp+var_188], edx
.text:00000AA5                 mov     byte ptr [ebp+var_4], 6
.text:00000AA9                 cmp     [ebp+var_188], 0
.text:00000AB0                 jz      short loc_AD1
.text:00000AB2                 mov     ecx, [ebp+var_188] ; this
.text:00000AB8                 call    ??0CFolderOutStream@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderOutStream::CFolderOutStream(void)
.text:00000ABD                 mov     [ebp+var_1F4], eax
.text:00000AC3                 mov     eax, [ebp+var_1F4]
.text:00000AC9                 mov     [ebp+var_1F8], eax
.text:00000ACF                 jmp     short loc_ADB
.text:00000AD1 ; ---------------------------------------------------------------------------
.text:00000AD1
.text:00000AD1 loc_AD1:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+360j
.text:00000AD1                 mov     [ebp+var_1F8], 0
.text:00000ADB
.text:00000ADB loc_ADB:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+37Fj
.text:00000ADB                 mov     ecx, [ebp+var_1F8]
.text:00000AE1                 mov     [ebp+var_184], ecx
.text:00000AE7                 mov     byte ptr [ebp+var_4], 5
.text:00000AEB                 mov     edx, [ebp+var_184]
.text:00000AF1                 mov     [ebp+var_E8], edx
.text:00000AF7                 mov     eax, [ebp+var_E8]
.text:00000AFD                 push    eax
.text:00000AFE                 lea     ecx, [ebp+var_F0]
.text:00000B04                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:00000B09                 mov     byte ptr [ebp+var_4], 7
.text:00000B0D                 mov     ecx, [ebp+this]
.text:00000B10                 add     ecx, 90h ; 'É'
.text:00000B16                 mov     edx, [ebp+var_E8]
.text:00000B1C                 mov     [edx+2Ch], ecx
.text:00000B1F                 lea     eax, [ebp+var_18]
.text:00000B22                 push    eax
.text:00000B23                 mov     ecx, [ebp+var_E8]
.text:00000B29                 add     ecx, 30h ; '0'
.text:00000B2C                 call    ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@ABV0@@Z ; CMyComPtr<IArchiveExtractCallback>::operator=(CMyComPtr<IArchiveExtractCallback> const &)
.text:00000B31                 xor     ecx, ecx
.text:00000B33                 cmp     [ebp+arg_C], 0
.text:00000B37                 setnz   cl
.text:00000B3A                 mov     edx, [ebp+var_E8]
.text:00000B40                 mov     [edx+0Ch], cl
.text:00000B43                 mov     eax, [ebp+this]
.text:00000B46                 xor     ecx, ecx
.text:00000B48                 cmp     dword ptr [eax+28h], 0
.text:00000B4C                 setnz   cl
.text:00000B4F                 mov     edx, [ebp+var_E8]
.text:00000B55                 mov     [edx+0Dh], cl
.text:00000B58                 mov     [ebp+var_F8], 0
.text:00000B62                 jmp     short loc_BA0
.text:00000B64 ; ---------------------------------------------------------------------------
.text:00000B64
.text:00000B64 loc_B64:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+812j
.text:00000B64                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B75j ...
.text:00000B64                 mov     eax, [ebp+var_48]
.text:00000B67                 mov     ecx, [eax+28h]
.text:00000B6A                 add     ecx, dword ptr [ebp+var_D4]
.text:00000B70                 mov     edx, [eax+2Ch]
.text:00000B73                 adc     edx, dword ptr [ebp+var_D4+4]
.text:00000B79                 mov     eax, [ebp+var_48]
.text:00000B7C                 mov     [eax+28h], ecx
.text:00000B7F                 mov     [eax+2Ch], edx
.text:00000B82                 mov     ecx, [ebp+var_48]
.text:00000B85                 mov     edx, [ecx+20h]
.text:00000B88                 add     edx, [ebp+var_C8]
.text:00000B8E                 mov     eax, [ecx+24h]
.text:00000B91                 adc     eax, [ebp+var_C4]
.text:00000B97                 mov     ecx, [ebp+var_48]
.text:00000B9A                 mov     [ecx+20h], edx
.text:00000B9D                 mov     [ecx+24h], eax
.text:00000BA0
.text:00000BA0 loc_BA0:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+412j
.text:00000BA0                 mov     ecx, [ebp+var_48] ; this
.text:00000BA3                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00000BA8                 mov     [ebp+var_1FC], eax
.text:00000BAE                 mov     edx, [ebp+var_1FC]
.text:00000BB4                 mov     [ebp+var_FC], edx
.text:00000BBA                 cmp     [ebp+var_FC], 0
.text:00000BC1                 jz      short loc_C1F
.text:00000BC3                 mov     eax, [ebp+var_FC]
.text:00000BC9                 mov     [ebp+var_18C], eax
.text:00000BCF                 mov     byte ptr [ebp+var_4], 5
.text:00000BD3                 lea     ecx, [ebp+var_F0]
.text:00000BD9                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000BDE                 mov     byte ptr [ebp+var_4], 4
.text:00000BE2                 lea     ecx, [ebp+var_E0]
.text:00000BE8                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00000BED                 mov     byte ptr [ebp+var_4], 3
.text:00000BF1                 lea     ecx, [ebp+var_BC] ; this
.text:00000BF7                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:00000BFC                 mov     byte ptr [ebp+var_4], 1
.text:00000C00                 lea     ecx, [ebp+var_50]
.text:00000C03                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000C08                 mov     byte ptr [ebp+var_4], 0
.text:00000C0C                 lea     ecx, [ebp+var_18]
.text:00000C0F                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00000C14                 mov     eax, [ebp+var_18C]
.text:00000C1A                 jmp     loc_15D4
.text:00000C1F ; ---------------------------------------------------------------------------
.text:00000C1F
.text:00000C1F loc_C1F:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+471j
.text:00000C1F                 mov     ecx, [ebp+var_F8]
.text:00000C25                 cmp     ecx, [ebp+arg_8]
.text:00000C28                 jb      short loc_C2F
.text:00000C2A                 jmp     loc_1551
.text:00000C2F ; ---------------------------------------------------------------------------
.text:00000C2F
.text:00000C2F loc_C2F:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4D8j
.text:00000C2F                 mov     dword ptr [ebp+var_D4], 0
.text:00000C39                 mov     dword ptr [ebp+var_D4+4], 0
.text:00000C43                 mov     [ebp+var_C8], 0
.text:00000C4D                 mov     [ebp+var_C4], 0
.text:00000C57                 movzx   edx, [ebp+var_25]
.text:00000C5B                 test    edx, edx
.text:00000C5D                 jz      short loc_C6D
.text:00000C5F                 mov     eax, [ebp+var_F8]
.text:00000C65                 mov     [ebp+var_200], eax
.text:00000C6B                 jmp     short loc_C7F
.text:00000C6D ; ---------------------------------------------------------------------------
.text:00000C6D
.text:00000C6D loc_C6D:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+50Dj
.text:00000C6D                 mov     ecx, [ebp+var_F8]
.text:00000C73                 mov     edx, [ebp+arg_4]
.text:00000C76                 mov     eax, [edx+ecx*4]
.text:00000C79                 mov     [ebp+var_200], eax
.text:00000C7F
.text:00000C7F loc_C7F:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+51Bj
.text:00000C7F                 mov     ecx, [ebp+var_200]
.text:00000C85                 mov     [ebp+var_100], ecx
.text:00000C8B                 mov     ecx, [ebp+this]
.text:00000C8E                 add     ecx, 1ACh
.text:00000C94                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00000C99                 mov     [ebp+var_204], eax
.text:00000C9F                 mov     edx, [ebp+var_100]
.text:00000CA5                 mov     eax, [ebp+var_204]
.text:00000CAB                 mov     ecx, [eax+edx*4]
.text:00000CAE                 mov     [ebp+var_104], ecx
.text:00000CB4                 mov     [ebp+var_108], 1
.text:00000CBE                 cmp     [ebp+var_104], 0FFFFFFFFh
.text:00000CC5                 jz      loc_E6B
.text:00000CCB                 mov     edx, [ebp+var_104]
.text:00000CD1                 push    edx             ; unsigned int
.text:00000CD2                 mov     ecx, [ebp+this]
.text:00000CD5                 add     ecx, 90h ; 'É'  ; this
.text:00000CDB                 call    ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)
.text:00000CE0                 mov     [ebp+var_20C], eax
.text:00000CE6                 mov     [ebp+var_208], edx
.text:00000CEC                 mov     eax, [ebp+var_20C]
.text:00000CF2                 mov     [ebp+var_C8], eax
.text:00000CF8                 mov     ecx, [ebp+var_208]
.text:00000CFE                 mov     [ebp+var_C4], ecx
.text:00000D04                 mov     edx, [ebp+var_100]
.text:00000D0A                 add     edx, 1
.text:00000D0D                 mov     [ebp+var_10C], edx
.text:00000D13                 mov     ecx, [ebp+this]
.text:00000D16                 add     ecx, 1A8h
.text:00000D1C                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00000D21                 mov     [ebp+var_210], eax
.text:00000D27                 mov     eax, [ebp+var_104]
.text:00000D2D                 mov     ecx, [ebp+var_210]
.text:00000D33                 mov     edx, [ecx+eax*4]
.text:00000D36                 mov     [ebp+var_100], edx
.text:00000D3C                 mov     eax, [ebp+var_F8]
.text:00000D42                 add     eax, 1
.text:00000D45                 mov     [ebp+var_110], eax
.text:00000D4B                 jmp     short loc_D5C
.text:00000D4D ; ---------------------------------------------------------------------------
.text:00000D4D
.text:00000D4D loc_D4D:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+699j
.text:00000D4D                 mov     ecx, [ebp+var_110]
.text:00000D53                 add     ecx, 1
.text:00000D56                 mov     [ebp+var_110], ecx
.text:00000D5C
.text:00000D5C loc_D5C:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5FBj
.text:00000D5C                 mov     edx, [ebp+var_110]
.text:00000D62                 cmp     edx, [ebp+arg_8]
.text:00000D65                 jnb     loc_DEE
.text:00000D6B                 movzx   eax, [ebp+var_25]
.text:00000D6F                 test    eax, eax
.text:00000D71                 jz      short loc_D81
.text:00000D73                 mov     ecx, [ebp+var_110]
.text:00000D79                 mov     [ebp+var_214], ecx
.text:00000D7F                 jmp     short loc_D93
.text:00000D81 ; ---------------------------------------------------------------------------
.text:00000D81
.text:00000D81 loc_D81:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+621j
.text:00000D81                 mov     edx, [ebp+var_110]
.text:00000D87                 mov     eax, [ebp+arg_4]
.text:00000D8A                 mov     ecx, [eax+edx*4]
.text:00000D8D                 mov     [ebp+var_214], ecx
.text:00000D93
.text:00000D93 loc_D93:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+62Fj
.text:00000D93                 mov     edx, [ebp+var_214]
.text:00000D99                 mov     [ebp+var_114], edx
.text:00000D9F                 mov     ecx, [ebp+this]
.text:00000DA2                 add     ecx, 1ACh
.text:00000DA8                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00000DAD                 mov     [ebp+var_218], eax
.text:00000DB3                 mov     eax, [ebp+var_114]
.text:00000DB9                 mov     ecx, [ebp+var_218]
.text:00000DBF                 mov     edx, [ecx+eax*4]
.text:00000DC2                 cmp     edx, [ebp+var_104]
.text:00000DC8                 jnz     short loc_DD8
.text:00000DCA                 mov     eax, [ebp+var_114]
.text:00000DD0                 cmp     eax, [ebp+var_10C]
.text:00000DD6                 jnb     short loc_DDA
.text:00000DD8
.text:00000DD8 loc_DD8:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+678j
.text:00000DD8                 jmp     short loc_DEE
.text:00000DDA ; ---------------------------------------------------------------------------
.text:00000DDA
.text:00000DDA loc_DDA:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+686j
.text:00000DDA                 mov     ecx, [ebp+var_114]
.text:00000DE0                 add     ecx, 1
.text:00000DE3                 mov     [ebp+var_10C], ecx
.text:00000DE9                 jmp     loc_D4D
.text:00000DEE ; ---------------------------------------------------------------------------
.text:00000DEE
.text:00000DEE loc_DEE:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+615j
.text:00000DEE                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_DD8j
.text:00000DEE                 mov     edx, [ebp+var_110]
.text:00000DF4                 sub     edx, [ebp+var_F8]
.text:00000DFA                 mov     [ebp+var_108], edx
.text:00000E00                 mov     eax, [ebp+var_100]
.text:00000E06                 mov     [ebp+var_110], eax
.text:00000E0C                 jmp     short loc_E1D
.text:00000E0E ; ---------------------------------------------------------------------------
.text:00000E0E
.text:00000E0E loc_E0E:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+719j
.text:00000E0E                 mov     ecx, [ebp+var_110]
.text:00000E14                 add     ecx, 1
.text:00000E17                 mov     [ebp+var_110], ecx
.text:00000E1D
.text:00000E1D loc_E1D:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6BCj
.text:00000E1D                 mov     edx, [ebp+var_110]
.text:00000E23                 cmp     edx, [ebp+var_10C]
.text:00000E29                 jnb     short loc_E6B
.text:00000E2B                 mov     eax, [ebp+var_110]
.text:00000E31                 push    eax
.text:00000E32                 mov     ecx, [ebp+this]
.text:00000E35                 add     ecx, 0E8h ; 'F'
.text:00000E3B                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00000E40                 mov     [ebp+var_21C], eax
.text:00000E46                 mov     ecx, [ebp+var_21C]
.text:00000E4C                 mov     edx, dword ptr [ebp+var_D4]
.text:00000E52                 add     edx, [ecx]
.text:00000E54                 mov     eax, dword ptr [ebp+var_D4+4]
.text:00000E5A                 adc     eax, [ecx+4]
.text:00000E5D                 mov     dword ptr [ebp+var_D4], edx
.text:00000E63                 mov     dword ptr [ebp+var_D4+4], eax
.text:00000E69                 jmp     short loc_E0E
.text:00000E6B ; ---------------------------------------------------------------------------
.text:00000E6B
.text:00000E6B loc_E6B:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+575j
.text:00000E6B                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6D9j
.text:00000E6B                 movzx   ecx, [ebp+var_25]
.text:00000E6F                 test    ecx, ecx
.text:00000E71                 jz      short loc_E7F
.text:00000E73                 mov     [ebp+var_220], 0
.text:00000E7D                 jmp     short loc_E91
.text:00000E7F ; ---------------------------------------------------------------------------
.text:00000E7F
.text:00000E7F loc_E7F:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+721j
.text:00000E7F                 mov     edx, [ebp+var_F8]
.text:00000E85                 mov     eax, [ebp+arg_4]
.text:00000E88                 lea     ecx, [eax+edx*4]
.text:00000E8B                 mov     [ebp+var_220], ecx
.text:00000E91
.text:00000E91 loc_E91:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+72Dj
.text:00000E91                 mov     edx, [ebp+var_108]
.text:00000E97                 push    edx             ; unsigned int
.text:00000E98                 mov     eax, [ebp+var_220]
.text:00000E9E                 push    eax             ; unsigned int *
.text:00000E9F                 mov     ecx, [ebp+var_100]
.text:00000EA5                 push    ecx             ; unsigned int
.text:00000EA6                 mov     ecx, [ebp+var_E8] ; this
.text:00000EAC                 call    ?Init@CFolderOutStream@N7z@NArchive@@QAEJIPBII@Z ; NArchive::N7z::CFolderOutStream::Init(uint,uint const *,uint)
.text:00000EB1                 mov     [ebp+var_224], eax
.text:00000EB7                 mov     edx, [ebp+var_224]
.text:00000EBD                 mov     [ebp+var_118], edx
.text:00000EC3                 mov     eax, [ebp+var_F8]
.text:00000EC9                 add     eax, [ebp+var_108]
.text:00000ECF                 mov     [ebp+var_F8], eax
.text:00000ED5                 mov     ecx, [ebp+var_118]
.text:00000EDB                 mov     [ebp+var_11C], ecx
.text:00000EE1                 cmp     [ebp+var_11C], 0
.text:00000EE8                 jz      short loc_F46
.text:00000EEA                 mov     edx, [ebp+var_11C]
.text:00000EF0                 mov     [ebp+var_190], edx
.text:00000EF6                 mov     byte ptr [ebp+var_4], 5
.text:00000EFA                 lea     ecx, [ebp+var_F0]
.text:00000F00                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000F05                 mov     byte ptr [ebp+var_4], 4
.text:00000F09                 lea     ecx, [ebp+var_E0]
.text:00000F0F                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00000F14                 mov     byte ptr [ebp+var_4], 3
.text:00000F18                 lea     ecx, [ebp+var_BC] ; this
.text:00000F1E                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:00000F23                 mov     byte ptr [ebp+var_4], 1
.text:00000F27                 lea     ecx, [ebp+var_50]
.text:00000F2A                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000F2F                 mov     byte ptr [ebp+var_4], 0
.text:00000F33                 lea     ecx, [ebp+var_18]
.text:00000F36                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00000F3B                 mov     eax, [ebp+var_190]
.text:00000F41                 jmp     loc_15D4
.text:00000F46 ; ---------------------------------------------------------------------------
.text:00000F46
.text:00000F46 loc_F46:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+798j
.text:00000F46                 mov     ecx, [ebp+var_E8] ; this
.text:00000F4C                 call    ?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolderOutStream::WasWritingFinished(void)
.text:00000F51                 mov     [ebp+var_225], al
.text:00000F57                 movzx   eax, [ebp+var_225]
.text:00000F5E                 test    eax, eax
.text:00000F60                 jz      short loc_F67
.text:00000F62                 jmp     loc_B64
.text:00000F67 ; ---------------------------------------------------------------------------
.text:00000F67
.text:00000F67 loc_F67:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+810j
.text:00000F67                 lea     ecx, [ebp+var_124]
.text:00000F6D                 call    ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>(void)
.text:00000F72                 mov     [ebp+var_22C], eax
.text:00000F78                 mov     byte ptr [ebp+var_4], 8
.text:00000F7C                 lea     ecx, [ebp+var_18]
.text:00000F7F                 call    ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *(void)
.text:00000F84                 mov     [ebp+var_230], eax
.text:00000F8A                 cmp     [ebp+var_230], 0
.text:00000F91                 jz      short loc_FB8
.text:00000F93                 lea     ecx, [ebp+var_124]
.text:00000F99                 call    ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&(void)
.text:00000F9E                 mov     [ebp+var_234], eax
.text:00000FA4                 mov     ecx, [ebp+var_234]
.text:00000FAA                 push    ecx
.text:00000FAB                 push    offset _IID_ICryptoGetTextPassword
.text:00000FB0                 lea     ecx, [ebp+var_18]
.text:00000FB3                 call    ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IArchiveExtractCallback>::QueryInterface<ICryptoGetTextPassword>(_GUID const &,ICryptoGetTextPassword * *)
.text:00000FB8
.text:00000FB8 loc_FB8:                                ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+841j
.text:00000FB8                 mov     byte ptr [ebp+var_4], 9
.text:00000FBC                 mov     [ebp+var_12D], 0
.text:00000FC3                 mov     [ebp+var_139], 0
.text:00000FCA                 lea     ecx, [ebp+var_150] ; this
.text:00000FD0                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000FD5                 mov     [ebp+var_238], eax
.text:00000FDB                 mov     byte ptr [ebp+var_4], 0Ah
.text:00000FDF                 lea     ecx, [ebp+var_124]
.text:00000FE5                 call    ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *(void)
.text:00000FEA                 mov     [ebp+var_23C], eax
.text:00000FF0                 lea     ecx, [ebp+var_50]
.text:00000FF3                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00000FF8                 mov     [ebp+var_240], eax
.text:00000FFE                 lea     ecx, [ebp+var_F0]
.text:00001004                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001009                 mov     [ebp+var_244], eax
.text:0000100F                 mov     ecx, [ebp+this]
.text:00001012                 add     ecx, 88h ; 'ê'
.text:00001018                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000101D                 mov     [ebp+var_248], eax
.text:00001023                 mov     edx, [ebp+this]
.text:00001026                 mov     eax, [edx+20h]
.text:00001029                 push    eax             ; unsigned int
.text:0000102A                 push    1               ; bool
.text:0000102C                 lea     ecx, [ebp+var_150]
.text:00001032                 push    ecx             ; struct UString *
.text:00001033                 lea     edx, [ebp+var_139]
.text:00001039                 push    edx             ; bool *
.text:0000103A                 lea     eax, [ebp+var_12D]
.text:00001040                 push    eax             ; bool *
.text:00001041                 mov     ecx, [ebp+var_23C]
.text:00001047                 push    ecx             ; struct ICryptoGetTextPassword *
.text:00001048                 push    0               ; struct ISequentialInStream **
.text:0000104A                 mov     edx, [ebp+var_240]
.text:00001050                 push    edx             ; struct ICompressProgressInfo *
.text:00001051                 mov     eax, [ebp+var_244]
.text:00001057                 push    eax             ; struct ISequentialOutStream *
.text:00001058                 lea     ecx, [ebp+var_D4]
.text:0000105E                 push    ecx             ; unsigned __int64 *
.text:0000105F                 mov     edx, [ebp+var_104]
.text:00001065                 push    edx             ; unsigned int
.text:00001066                 mov     eax, [ebp+this]
.text:00001069                 add     eax, 90h ; 'É'
.text:0000106E                 push    eax             ; struct NArchive::N7z::CFolders *
.text:0000106F                 mov     ecx, [ebp+this]
.text:00001072                 mov     edx, [ecx+18Ch]
.text:00001078                 push    edx
.text:00001079                 mov     eax, [ecx+188h]
.text:0000107F                 push    eax             ; unsigned __int64
.text:00001080                 mov     ecx, [ebp+var_248]
.text:00001086                 push    ecx             ; struct IInStream *
.text:00001087                 lea     ecx, [ebp+var_BC] ; this
.text:0000108D                 call    ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)
.text:00001092                 mov     [ebp+var_24C], eax
.text:00001098                 mov     edx, [ebp+var_24C]
.text:0000109E                 mov     [ebp+var_158], edx
.text:000010A4                 cmp     [ebp+var_158], 1
.text:000010AB                 jz      short loc_10BD
.text:000010AD                 cmp     [ebp+var_158], 80004001h
.text:000010B7                 jnz     loc_12CA
.text:000010BD
.text:000010BD loc_10BD:                               ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+95Bj
.text:000010BD                 mov     ecx, [ebp+var_E8] ; this
.text:000010C3                 call    ?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolderOutStream::WasWritingFinished(void)
.text:000010C8                 mov     [ebp+var_24D], al
.text:000010CE                 mov     al, [ebp+var_24D]
.text:000010D4                 mov     [ebp+var_159], al
.text:000010DA                 mov     ecx, [ebp+var_158]
.text:000010E0                 sub     ecx, 1
.text:000010E3                 neg     ecx
.text:000010E5                 sbb     ecx, ecx
.text:000010E7                 add     ecx, 2
.text:000010EA                 mov     [ebp+var_160], ecx
.text:000010F0                 mov     edx, [ebp+var_160]
.text:000010F6                 push    edx             ; int
.text:000010F7                 mov     ecx, [ebp+var_E8] ; this
.text:000010FD                 call    ?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z ; NArchive::N7z::CFolderOutStream::FlushCorrupted(int)
.text:00001102                 mov     [ebp+var_254], eax
.text:00001108                 mov     eax, [ebp+var_254]
.text:0000110E                 mov     [ebp+var_164], eax
.text:00001114                 cmp     [ebp+var_164], 0
.text:0000111B                 jz      short loc_1197
.text:0000111D                 mov     ecx, [ebp+var_164]
.text:00001123                 mov     [ebp+var_194], ecx
.text:00001129                 mov     byte ptr [ebp+var_4], 9
.text:0000112D                 lea     ecx, [ebp+var_150] ; this
.text:00001133                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001138                 mov     byte ptr [ebp+var_4], 7
.text:0000113C                 lea     ecx, [ebp+var_124]
.text:00001142                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00001147                 mov     byte ptr [ebp+var_4], 5
.text:0000114B                 lea     ecx, [ebp+var_F0]
.text:00001151                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001156                 mov     byte ptr [ebp+var_4], 4
.text:0000115A                 lea     ecx, [ebp+var_E0]
.text:00001160                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00001165                 mov     byte ptr [ebp+var_4], 3
.text:00001169                 lea     ecx, [ebp+var_BC] ; this
.text:0000116F                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:00001174                 mov     byte ptr [ebp+var_4], 1
.text:00001178                 lea     ecx, [ebp+var_50]
.text:0000117B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001180                 mov     byte ptr [ebp+var_4], 0
.text:00001184                 lea     ecx, [ebp+var_18]
.text:00001187                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:0000118C                 mov     eax, [ebp+var_194]
.text:00001192                 jmp     loc_15D4
.text:00001197 ; ---------------------------------------------------------------------------
.text:00001197
.text:00001197 loc_1197:                               ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9CBj
.text:00001197                 movzx   edx, [ebp+var_159]
.text:0000119E                 test    edx, edx
.text:000011A0                 jz      loc_12A3
.text:000011A6                 lea     ecx, [ebp+var_E0]
.text:000011AC                 call    ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *(void)
.text:000011B1                 mov     [ebp+var_258], eax
.text:000011B7                 cmp     [ebp+var_258], 0
.text:000011BE                 jz      loc_12A3
.text:000011C4                 lea     ecx, [ebp+var_E0]
.text:000011CA                 call    ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->(void)
.text:000011CF                 mov     [ebp+var_25C], eax
.text:000011D5                 mov     eax, [ebp+var_25C]
.text:000011DB                 mov     [ebp+var_260], eax
.text:000011E1                 mov     esi, esp
.text:000011E3                 mov     ecx, [ebp+var_160]
.text:000011E9                 push    ecx
.text:000011EA                 mov     edx, [ebp+var_104]
.text:000011F0                 push    edx
.text:000011F1                 push    2
.text:000011F3                 mov     eax, [ebp+var_260]
.text:000011F9                 push    eax
.text:000011FA                 mov     ecx, [ebp+var_260]
.text:00001200                 mov     edx, [ecx]
.text:00001202                 mov     eax, [edx+14h]
.text:00001205                 call    eax
.text:00001207                 cmp     esi, esp
.text:00001209                 call    __RTC_CheckEsp
.text:0000120E                 mov     [ebp+var_264], eax
.text:00001214                 mov     ecx, [ebp+var_264]
.text:0000121A                 mov     [ebp+var_168], ecx
.text:00001220                 cmp     [ebp+var_168], 0
.text:00001227                 jz      short loc_12A3
.text:00001229                 mov     edx, [ebp+var_168]
.text:0000122F                 mov     [ebp+var_198], edx
.text:00001235                 mov     byte ptr [ebp+var_4], 9
.text:00001239                 lea     ecx, [ebp+var_150] ; this
.text:0000123F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001244                 mov     byte ptr [ebp+var_4], 7
.text:00001248                 lea     ecx, [ebp+var_124]
.text:0000124E                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00001253                 mov     byte ptr [ebp+var_4], 5
.text:00001257                 lea     ecx, [ebp+var_F0]
.text:0000125D                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001262                 mov     byte ptr [ebp+var_4], 4
.text:00001266                 lea     ecx, [ebp+var_E0]
.text:0000126C                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00001271                 mov     byte ptr [ebp+var_4], 3
.text:00001275                 lea     ecx, [ebp+var_BC] ; this
.text:0000127B                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:00001280                 mov     byte ptr [ebp+var_4], 1
.text:00001284                 lea     ecx, [ebp+var_50]
.text:00001287                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000128C                 mov     byte ptr [ebp+var_4], 0
.text:00001290                 lea     ecx, [ebp+var_18]
.text:00001293                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00001298                 mov     eax, [ebp+var_198]
.text:0000129E                 jmp     loc_15D4
.text:000012A3 ; ---------------------------------------------------------------------------
.text:000012A3
.text:000012A3 loc_12A3:                               ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A50j
.text:000012A3                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A6Ej ...
.text:000012A3                 mov     byte ptr [ebp+var_4], 9
.text:000012A7                 lea     ecx, [ebp+var_150] ; this
.text:000012AD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000012B2                 mov     byte ptr [ebp+var_4], 7
.text:000012B6                 lea     ecx, [ebp+var_124]
.text:000012BC                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000012C1                 mov     byte ptr [ebp+var_4], 7
.text:000012C5                 jmp     loc_B64
.text:000012CA ; ---------------------------------------------------------------------------
.text:000012CA
.text:000012CA loc_12CA:                               ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+967j
.text:000012CA                 cmp     [ebp+var_158], 0
.text:000012D1                 jz      short loc_134D
.text:000012D3                 mov     eax, [ebp+var_158]
.text:000012D9                 mov     [ebp+var_19C], eax
.text:000012DF                 mov     byte ptr [ebp+var_4], 9
.text:000012E3                 lea     ecx, [ebp+var_150] ; this
.text:000012E9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000012EE                 mov     byte ptr [ebp+var_4], 7
.text:000012F2                 lea     ecx, [ebp+var_124]
.text:000012F8                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000012FD                 mov     byte ptr [ebp+var_4], 5
.text:00001301                 lea     ecx, [ebp+var_F0]
.text:00001307                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000130C                 mov     byte ptr [ebp+var_4], 4
.text:00001310                 lea     ecx, [ebp+var_E0]
.text:00001316                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:0000131B                 mov     byte ptr [ebp+var_4], 3
.text:0000131F                 lea     ecx, [ebp+var_BC] ; this
.text:00001325                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:0000132A                 mov     byte ptr [ebp+var_4], 1
.text:0000132E                 lea     ecx, [ebp+var_50]
.text:00001331                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001336                 mov     byte ptr [ebp+var_4], 0
.text:0000133A                 lea     ecx, [ebp+var_18]
.text:0000133D                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00001342                 mov     eax, [ebp+var_19C]
.text:00001348                 jmp     loc_15D4
.text:0000134D ; ---------------------------------------------------------------------------
.text:0000134D
.text:0000134D loc_134D:                               ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B81j
.text:0000134D                 push    2               ; int
.text:0000134F                 mov     ecx, [ebp+var_E8] ; this
.text:00001355                 call    ?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z ; NArchive::N7z::CFolderOutStream::FlushCorrupted(int)
.text:0000135A                 mov     [ebp+var_268], eax
.text:00001360                 mov     ecx, [ebp+var_268]
.text:00001366                 mov     [ebp+var_16C], ecx
.text:0000136C                 cmp     [ebp+var_16C], 0
.text:00001373                 jz      short loc_13EF
.text:00001375                 mov     edx, [ebp+var_16C]
.text:0000137B                 mov     [ebp+var_1A0], edx
.text:00001381                 mov     byte ptr [ebp+var_4], 9
.text:00001385                 lea     ecx, [ebp+var_150] ; this
.text:0000138B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001390                 mov     byte ptr [ebp+var_4], 7
.text:00001394                 lea     ecx, [ebp+var_124]
.text:0000139A                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000139F                 mov     byte ptr [ebp+var_4], 5
.text:000013A3                 lea     ecx, [ebp+var_F0]
.text:000013A9                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000013AE                 mov     byte ptr [ebp+var_4], 4
.text:000013B2                 lea     ecx, [ebp+var_E0]
.text:000013B8                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000013BD                 mov     byte ptr [ebp+var_4], 3
.text:000013C1                 lea     ecx, [ebp+var_BC] ; this
.text:000013C7                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:000013CC                 mov     byte ptr [ebp+var_4], 1
.text:000013D0                 lea     ecx, [ebp+var_50]
.text:000013D3                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000013D8                 mov     byte ptr [ebp+var_4], 0
.text:000013DC                 lea     ecx, [ebp+var_18]
.text:000013DF                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:000013E4                 mov     eax, [ebp+var_1A0]
.text:000013EA                 jmp     loc_15D4
.text:000013EF ; ---------------------------------------------------------------------------
.text:000013EF
.text:000013EF loc_13EF:                               ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C23j
.text:000013EF                 mov     byte ptr [ebp+var_4], 9
.text:000013F3                 lea     ecx, [ebp+var_150] ; this
.text:000013F9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000013FE                 mov     byte ptr [ebp+var_4], 7
.text:00001402                 lea     ecx, [ebp+var_124]
.text:00001408                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000140D                 mov     byte ptr [ebp+var_4], 7
.text:00001411                 jmp     loc_B64
.text:00001411 ?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:00001411
.text:00001416
.text:00001416 ; =============== S U B R O U T I N E =======================================
.text:00001416
.text:00001416
.text:00001416 __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:00001416                                         ; DATA XREF: .xdata$x:000017FCo
.text:00001416                 push    2               ; int
.text:00001418                 mov     ecx, [ebp-0E8h] ; this
.text:0000141E                 call    ?FlushCorrupted@CFolderOutStream@N7z@NArchive@@QAEJH@Z ; NArchive::N7z::CFolderOutStream::FlushCorrupted(int)
.text:00001423                 mov     [ebp-26Ch], eax
.text:00001429                 mov     eax, [ebp-26Ch]
.text:0000142F                 mov     [ebp-170h], eax
.text:00001435                 cmp     dword ptr [ebp-170h], 0
.text:0000143C                 jz      short loc_1457
.text:0000143E                 mov     ecx, [ebp-170h]
.text:00001444                 mov     [ebp-1A4h], ecx
.text:0000144A                 mov     dword ptr [ebp-4], 8
.text:00001451                 mov     eax, offset $LN69
.text:00001456                 retn
.text:00001457 ; ---------------------------------------------------------------------------
.text:00001457
.text:00001457 loc_1457:                               ; CODE XREF: __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+26j
.text:00001457                 mov     dword ptr [ebp-1A8h], 80004005h
.text:00001461                 mov     dword ptr [ebp-4], 8
.text:00001468                 mov     eax, offset $LN71
.text:0000146D                 retn
.text:0000146D __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:0000146D
.text:0000146E ; ---------------------------------------------------------------------------
.text:0000146E                 mov     eax, offset __tryend$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
.text:00001473                 retn
.text:00001474 ; ---------------------------------------------------------------------------
.text:00001474
.text:00001474 __tryend$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
.text:00001474                                         ; DATA XREF: .text:0000146Eo
.text:00001474                 mov     dword ptr [ebp-4], 8
.text:0000147B                 jmp     short loc_14DC
.text:0000147D ; ---------------------------------------------------------------------------
.text:0000147D
.text:0000147D $LN71:                                  ; DATA XREF: __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+52o
.text:0000147D                 mov     byte ptr [ebp-4], 7
.text:00001481                 lea     ecx, [ebp-124h]
.text:00001487                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000148C                 mov     byte ptr [ebp-4], 5
.text:00001490                 lea     ecx, [ebp-0F0h]
.text:00001496                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000149B                 mov     byte ptr [ebp-4], 4
.text:0000149F                 lea     ecx, [ebp-0E0h]
.text:000014A5                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000014AA                 mov     byte ptr [ebp-4], 3
.text:000014AE                 lea     ecx, [ebp-0BCh]
.text:000014B4                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:000014B9                 mov     byte ptr [ebp-4], 1
.text:000014BD                 lea     ecx, [ebp-50h]
.text:000014C0                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000014C5                 mov     byte ptr [ebp-4], 0
.text:000014C9                 lea     ecx, [ebp-18h]
.text:000014CC                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:000014D1                 mov     eax, [ebp-1A8h]
.text:000014D7                 jmp     loc_15D4
.text:000014DC ; ---------------------------------------------------------------------------
.text:000014DC
.text:000014DC loc_14DC:                               ; CODE XREF: .text:0000147Bj
.text:000014DC                 jmp     short loc_153D
.text:000014DE ; ---------------------------------------------------------------------------
.text:000014DE
.text:000014DE $LN69:                                  ; DATA XREF: __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+3Bo
.text:000014DE                 mov     byte ptr [ebp-4], 7
.text:000014E2                 lea     ecx, [ebp-124h]
.text:000014E8                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000014ED                 mov     byte ptr [ebp-4], 5
.text:000014F1                 lea     ecx, [ebp-0F0h]
.text:000014F7                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000014FC                 mov     byte ptr [ebp-4], 4
.text:00001500                 lea     ecx, [ebp-0E0h]
.text:00001506                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:0000150B                 mov     byte ptr [ebp-4], 3
.text:0000150F                 lea     ecx, [ebp-0BCh]
.text:00001515                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:0000151A                 mov     byte ptr [ebp-4], 1
.text:0000151E                 lea     ecx, [ebp-50h]
.text:00001521                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001526                 mov     byte ptr [ebp-4], 0
.text:0000152A                 lea     ecx, [ebp-18h]
.text:0000152D                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00001532                 mov     eax, [ebp-1A4h]
.text:00001538                 jmp     loc_15D4
.text:0000153D ; ---------------------------------------------------------------------------
.text:0000153D
.text:0000153D loc_153D:                               ; CODE XREF: .text:loc_14DCj
.text:0000153D                 mov     byte ptr [ebp-4], 7
.text:00001541                 lea     ecx, [ebp-124h]
.text:00001547                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000154C                 jmp     loc_B64
.text:00001551 ; ---------------------------------------------------------------------------
.text:00001551 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001551
.text:00001551 loc_1551:                               ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4DAj
.text:00001551                 mov     [ebp+var_1AC], 0
.text:0000155B                 mov     byte ptr [ebp+var_4], 5
.text:0000155F                 lea     ecx, [ebp+var_F0]
.text:00001565                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000156A                 mov     byte ptr [ebp+var_4], 4
.text:0000156E                 lea     ecx, [ebp+var_E0]
.text:00001574                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00001579                 mov     byte ptr [ebp+var_4], 3
.text:0000157D                 lea     ecx, [ebp+var_BC] ; this
.text:00001583                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:00001588                 mov     byte ptr [ebp+var_4], 1
.text:0000158C                 lea     ecx, [ebp+var_50]
.text:0000158F                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001594                 mov     byte ptr [ebp+var_4], 0
.text:00001598                 lea     ecx, [ebp+var_18]
.text:0000159B                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:000015A0                 mov     eax, [ebp+var_1AC]
.text:000015A6                 jmp     short loc_15D4
.text:000015A6 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000015A8
.text:000015A8 ; =============== S U B R O U T I N E =======================================
.text:000015A8
.text:000015A8
.text:000015A8 __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text:000015A8                                         ; DATA XREF: .xdata$x:000017ECo
.text:000015A8                 mov     dword ptr [ebp-1B0h], 8007000Eh
.text:000015B2                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000015B9                 mov     eax, offset $LN73
.text:000015BE                 retn
.text:000015BE __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text:000015BE
.text:000015BF ; ---------------------------------------------------------------------------
.text:000015BF                 mov     eax, offset __tryend$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.text:000015C4                 retn
.text:000015C5 ; ---------------------------------------------------------------------------
.text:000015C5
.text:000015C5 __tryend$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
.text:000015C5                                         ; DATA XREF: .text:000015BFo
.text:000015C5                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000015CC                 jmp     short loc_15D4
.text:000015CE ; ---------------------------------------------------------------------------
.text:000015CE
.text:000015CE $LN73:                                  ; DATA XREF: __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2+11o
.text:000015CE                 mov     eax, [ebp-1B0h]
.text:000015D4 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000015D4
.text:000015D4 loc_15D4:                               ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B9j
.text:000015D4                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+240j ...
.text:000015D4                 push    edx
.text:000015D5                 mov     ecx, ebp
.text:000015D7                 push    eax
.text:000015D8                 lea     edx, $LN95
.text:000015DE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000015E3                 pop     eax
.text:000015E4                 pop     edx
.text:000015E5                 mov     ecx, [ebp+var_C]
.text:000015E8                 mov     large fs:0, ecx
.text:000015EF                 pop     ecx
.text:000015F0                 pop     edi
.text:000015F1                 pop     esi
.text:000015F2                 pop     ebx
.text:000015F3                 add     esp, 26Ch
.text:000015F9                 cmp     ebp, esp
.text:000015FB                 call    __RTC_CheckEsp
.text:00001600                 mov     esp, ebp
.text:00001602                 pop     ebp
.text:00001603                 retn    14h
.text:00001603 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001603 ; ---------------------------------------------------------------------------
.text:00001606                 align 4
.text:00001608 $LN95           dd 0Ah                  ; DATA XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+E88o
.text:0000160C                 dd offset $LN94
.text:00001610 $LN94           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:0000160Co
.text:00001618                 dd offset $LN83         ; "extractCallback"
.text:0000161C                 dd 0FFFFFFB0h, 4
.text:00001624                 dd offset $LN84         ; "progress"
.text:00001628                 dd 0FFFFFF44h, 64h
.text:00001630                 dd offset $LN85         ; "decoder"
.text:00001634                 dd 0FFFFFF2Ch, 8
.text:0000163C                 dd offset $LN86         ; "curUnpacked"
.text:00001640                 dd 0FFFFFF20h, 4
.text:00001648                 dd offset $LN87         ; "callbackMessage"
.text:0000164C                 dd 0FFFFFF10h, 4
.text:00001654                 dd offset $LN88         ; "outStream"
.text:00001658                 dd 0FFFFFEDCh, 4
.text:00001660                 dd offset $LN89         ; "getTextPassword"
.text:00001664                 dd 0FFFFFED3h, 1
.text:0000166C                 dd offset $LN90         ; "isEncrypted"
.text:00001670                 dd 0FFFFFEC7h, 1
.text:00001678                 dd offset $LN91         ; "passwordIsDefined"
.text:0000167C                 dd 0FFFFFEB0h, 0Ch
.text:00001684                 dd offset $LN92         ; "password"
.text:00001688 $LN92           db 'password',0         ; DATA XREF: .text:00001684o
.text:00001691 $LN91           db 'passwordIsDefined',0 ; DATA XREF: .text:00001678o
.text:000016A3 $LN90           db 'isEncrypted',0      ; DATA XREF: .text:0000166Co
.text:000016AF $LN89           db 'getTextPassword',0  ; DATA XREF: .text:00001660o
.text:000016BF $LN88           db 'outStream',0        ; DATA XREF: .text:00001654o
.text:000016C9 $LN87           db 'callbackMessage',0  ; DATA XREF: .text:00001648o
.text:000016D9 $LN86           db 'curUnpacked',0      ; DATA XREF: .text:0000163Co
.text:000016E5 $LN85           db 'decoder',0          ; DATA XREF: .text:00001630o
.text:000016ED $LN84           db 'progress',0         ; DATA XREF: .text:00001624o
.text:000016F6 $LN83           db 'extractCallback',0  ; DATA XREF: .text:00001618o
.text:00001706                 align 4
.text:00001706 _text           ends
.text:00001706
.rtc$TMZ:00001708 ; ===========================================================================
.rtc$TMZ:00001708
.rtc$TMZ:00001708 ; Segment type: Pure data
.rtc$TMZ:00001708 ; Segment permissions: Read
.rtc$TMZ:00001708 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001708                 assume cs:_rtc$TMZ
.rtc$TMZ:00001708                 ;org 1708h
.rtc$TMZ:00001708 ; COMDAT (pick any)
.rtc$TMZ:00001708 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001708 _rtc$TMZ        ends
.rtc$TMZ:00001708
.rtc$IMZ:0000170C ; ===========================================================================
.rtc$IMZ:0000170C
.rtc$IMZ:0000170C ; Segment type: Pure data
.rtc$IMZ:0000170C ; Segment permissions: Read
.rtc$IMZ:0000170C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000170C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000170C                 ;org 170Ch
.rtc$IMZ:0000170C ; COMDAT (pick any)
.rtc$IMZ:0000170C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000170C _rtc$IMZ        ends
.rtc$IMZ:0000170C
.text$x:00001710 ; ===========================================================================
.text$x:00001710
.text$x:00001710 ; Segment type: Pure code
.text$x:00001710 ; Segment permissions: Read/Execute
.text$x:00001710 _text$x         segment para public 'CODE' use32
.text$x:00001710                 assume cs:_text$x
.text$x:00001710                 ;org 1710h
.text$x:00001710                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001710
.text$x:00001710 ; =============== S U B R O U T I N E =======================================
.text$x:00001710
.text$x:00001710
.text$x:00001710 __unwindfunclet$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z$0 proc near
.text$x:00001710                                         ; DATA XREF: .xdata$x:000017B8o
.text$x:00001710                 lea     ecx, [ebp-24h]
.text$x:00001713                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001713 __unwindfunclet$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z$0 endp
.text$x:00001713
.text$x:00001718
.text$x:00001718 ; =============== S U B R O U T I N E =======================================
.text$x:00001718
.text$x:00001718
.text$x:00001718 __ehhandler$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z proc near
.text$x:00001718                                         ; DATA XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+5o
.text$x:00001718
.text$x:00001718 arg_4           = dword ptr  8
.text$x:00001718
.text$x:00001718                 mov     edx, [esp+arg_4]
.text$x:0000171C                 lea     eax, [edx+0Ch]
.text$x:0000171F                 mov     ecx, [edx-48h]
.text$x:00001722                 xor     ecx, eax
.text$x:00001724                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001729                 mov     eax, offset __ehfuncinfo$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z
.text$x:0000172E                 jmp     ___CxxFrameHandler3
.text$x:0000172E __ehhandler$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z endp
.text$x:0000172E
.text$x:00001733
.text$x:00001733 ; =============== S U B R O U T I N E =======================================
.text$x:00001733
.text$x:00001733
.text$x:00001733 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:00001733                                         ; DATA XREF: .xdata$x:00001858o
.text$x:00001733                 lea     ecx, [ebp-18h]
.text$x:00001736                 jmp     ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text$x:00001736 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:00001736
.text$x:0000173B
.text$x:0000173B ; =============== S U B R O U T I N E =======================================
.text$x:0000173B
.text$x:0000173B
.text$x:0000173B __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:0000173B                                         ; DATA XREF: .xdata$x:00001860o
.text$x:0000173B                 mov     eax, [ebp-180h]
.text$x:00001741                 push    eax             ; void *
.text$x:00001742                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001747                 pop     ecx
.text$x:00001748                 retn
.text$x:00001748 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:00001748
.text$x:00001749
.text$x:00001749 ; =============== S U B R O U T I N E =======================================
.text$x:00001749
.text$x:00001749
.text$x:00001749 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 proc near
.text$x:00001749                                         ; DATA XREF: .xdata$x:00001868o
.text$x:00001749                 lea     ecx, [ebp-50h]
.text$x:0000174C                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000174C __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 endp
.text$x:0000174C
.text$x:00001751
.text$x:00001751 ; =============== S U B R O U T I N E =======================================
.text$x:00001751
.text$x:00001751
.text$x:00001751 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 proc near
.text$x:00001751                                         ; DATA XREF: .xdata$x:00001870o
.text$x:00001751                 lea     ecx, [ebp-0BCh] ; this
.text$x:00001757                 jmp     ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text$x:00001757 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 endp
.text$x:00001757
.text$x:0000175C
.text$x:0000175C ; =============== S U B R O U T I N E =======================================
.text$x:0000175C
.text$x:0000175C
.text$x:0000175C __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 proc near
.text$x:0000175C                                         ; DATA XREF: .xdata$x:00001878o
.text$x:0000175C                 lea     ecx, [ebp-0E0h]
.text$x:00001762                 jmp     ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text$x:00001762 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 endp
.text$x:00001762
.text$x:00001767
.text$x:00001767 ; =============== S U B R O U T I N E =======================================
.text$x:00001767
.text$x:00001767
.text$x:00001767 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 proc near
.text$x:00001767                                         ; DATA XREF: .xdata$x:00001880o
.text$x:00001767                 mov     eax, [ebp-188h]
.text$x:0000176D                 push    eax             ; void *
.text$x:0000176E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001773                 pop     ecx
.text$x:00001774                 retn
.text$x:00001774 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 endp
.text$x:00001774
.text$x:00001775
.text$x:00001775 ; =============== S U B R O U T I N E =======================================
.text$x:00001775
.text$x:00001775
.text$x:00001775 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 proc near
.text$x:00001775                                         ; DATA XREF: .xdata$x:00001888o
.text$x:00001775                 lea     ecx, [ebp-0F0h]
.text$x:0000177B                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000177B __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 endp
.text$x:0000177B
.text$x:00001780
.text$x:00001780 ; =============== S U B R O U T I N E =======================================
.text$x:00001780
.text$x:00001780
.text$x:00001780 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11 proc near
.text$x:00001780                                         ; DATA XREF: .xdata$x:00001890o
.text$x:00001780                 lea     ecx, [ebp-124h]
.text$x:00001786                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text$x:00001786 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11 endp
.text$x:00001786
.text$x:0000178B
.text$x:0000178B ; =============== S U B R O U T I N E =======================================
.text$x:0000178B
.text$x:0000178B
.text$x:0000178B __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12 proc near
.text$x:0000178B                                         ; DATA XREF: .xdata$x:000018A0o
.text$x:0000178B                 lea     ecx, [ebp-150h] ; this
.text$x:00001791                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001791 __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12 endp
.text$x:00001791
.text$x:00001796
.text$x:00001796 ; =============== S U B R O U T I N E =======================================
.text$x:00001796
.text$x:00001796
.text$x:00001796 __ehhandler$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:00001796                                         ; DATA XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:00001796
.text$x:00001796 arg_4           = dword ptr  8
.text$x:00001796
.text$x:00001796                 mov     edx, [esp+arg_4]
.text$x:0000179A                 lea     eax, [edx+0Ch]
.text$x:0000179D                 mov     ecx, [edx-270h]
.text$x:000017A3                 xor     ecx, eax
.text$x:000017A5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000017AA                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:000017AF                 jmp     ___CxxFrameHandler3
.text$x:000017AF __ehhandler$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:000017AF
.text$x:000017AF _text$x         ends
.text$x:000017AF
.xdata$x:000017B4 ; ===========================================================================
.xdata$x:000017B4
.xdata$x:000017B4 ; Segment type: Pure data
.xdata$x:000017B4 ; Segment permissions: Read
.xdata$x:000017B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000017B4                 assume cs:_xdata$x
.xdata$x:000017B4                 ;org 17B4h
.xdata$x:000017B4 __unwindtable$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z db 0FFh
.xdata$x:000017B4                                         ; DATA XREF: .xdata$x:000017C4o
.xdata$x:000017B5                 db 0FFh
.xdata$x:000017B6                 db 0FFh
.xdata$x:000017B7                 db 0FFh
.xdata$x:000017B8                 dd offset __unwindfunclet$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z$0
.xdata$x:000017BC __ehfuncinfo$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z db  22h ; "
.xdata$x:000017BC                                         ; DATA XREF: __ehhandler$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z+11o
.xdata$x:000017BD                 db    5
.xdata$x:000017BE                 db  93h ; ô
.xdata$x:000017BF                 db  19h
.xdata$x:000017C0                 db    1
.xdata$x:000017C1                 db    0
.xdata$x:000017C2                 db    0
.xdata$x:000017C3                 db    0
.xdata$x:000017C4                 dd offset __unwindtable$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z
.xdata$x:000017C8                 db    0
.xdata$x:000017C9                 db    0
.xdata$x:000017CA                 db    0
.xdata$x:000017CB                 db    0
.xdata$x:000017CC                 db    0
.xdata$x:000017CD                 db    0
.xdata$x:000017CE                 db    0
.xdata$x:000017CF                 db    0
.xdata$x:000017D0                 db    0
.xdata$x:000017D1                 db    0
.xdata$x:000017D2                 db    0
.xdata$x:000017D3                 db    0
.xdata$x:000017D4                 db    0
.xdata$x:000017D5                 db    0
.xdata$x:000017D6                 db    0
.xdata$x:000017D7                 db    0
.xdata$x:000017D8                 db    0
.xdata$x:000017D9                 db    0
.xdata$x:000017DA                 db    0
.xdata$x:000017DB                 db    0
.xdata$x:000017DC                 db    1
.xdata$x:000017DD                 db    0
.xdata$x:000017DE                 db    0
.xdata$x:000017DF                 db    0
.xdata$x:000017E0 __catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$14 dd offset loc_3F+1
.xdata$x:000017E0                                         ; DATA XREF: .xdata$x:00001848o
.xdata$x:000017E4                 db    0
.xdata$x:000017E5                 db    0
.xdata$x:000017E6                 db    0
.xdata$x:000017E7                 db    0
.xdata$x:000017E8                 db    0
.xdata$x:000017E9                 db    0
.xdata$x:000017EA                 db    0
.xdata$x:000017EB                 db    0
.xdata$x:000017EC                 dd offset __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:000017F0 __catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$13 dd offset loc_3F+1
.xdata$x:000017F0                                         ; DATA XREF: .xdata$x:00001834o
.xdata$x:000017F4                 db    0
.xdata$x:000017F5                 db    0
.xdata$x:000017F6                 db    0
.xdata$x:000017F7                 db    0
.xdata$x:000017F8                 db    0
.xdata$x:000017F9                 db    0
.xdata$x:000017FA                 db    0
.xdata$x:000017FB                 db    0
.xdata$x:000017FC                 dd offset __catch$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:00001800 __ehfuncinfo$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:00001800                                         ; DATA XREF: __ehhandler$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+14o
.xdata$x:00001801                 db    5
.xdata$x:00001802                 db  93h ; ô
.xdata$x:00001803                 db  19h
.xdata$x:00001804                 db  0Dh
.xdata$x:00001805                 db    0
.xdata$x:00001806                 db    0
.xdata$x:00001807                 db    0
.xdata$x:00001808                 dd offset __unwindtable$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:0000180C                 db    2
.xdata$x:0000180D                 db    0
.xdata$x:0000180E                 db    0
.xdata$x:0000180F                 db    0
.xdata$x:00001810                 dd offset __tryblocktable$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00001814                 align 10h
.xdata$x:00001820                 db    1
.xdata$x:00001821                 db    0
.xdata$x:00001822                 db    0
.xdata$x:00001823                 db    0
.xdata$x:00001824 __tryblocktable$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    9
.xdata$x:00001824                                         ; DATA XREF: .xdata$x:00001810o
.xdata$x:00001825                 db    0
.xdata$x:00001826                 db    0
.xdata$x:00001827                 db    0
.xdata$x:00001828                 db  0Ah
.xdata$x:00001829                 db    0
.xdata$x:0000182A                 db    0
.xdata$x:0000182B                 db    0
.xdata$x:0000182C                 db  0Bh
.xdata$x:0000182D                 db    0
.xdata$x:0000182E                 db    0
.xdata$x:0000182F                 db    0
.xdata$x:00001830                 db    1
.xdata$x:00001831                 db    0
.xdata$x:00001832                 db    0
.xdata$x:00001833                 db    0
.xdata$x:00001834                 dd offset __catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$13
.xdata$x:00001838                 db    0
.xdata$x:00001839                 db    0
.xdata$x:0000183A                 db    0
.xdata$x:0000183B                 db    0
.xdata$x:0000183C                 db  0Bh
.xdata$x:0000183D                 db    0
.xdata$x:0000183E                 db    0
.xdata$x:0000183F                 db    0
.xdata$x:00001840                 db  0Ch
.xdata$x:00001841                 db    0
.xdata$x:00001842                 db    0
.xdata$x:00001843                 db    0
.xdata$x:00001844                 db    1
.xdata$x:00001845                 db    0
.xdata$x:00001846                 db    0
.xdata$x:00001847                 db    0
.xdata$x:00001848                 dd offset __catchsym$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$14
.xdata$x:0000184C __unwindtable$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:0000184C                                         ; DATA XREF: .xdata$x:00001808o
.xdata$x:0000184D                 db 0FFh
.xdata$x:0000184E                 db 0FFh
.xdata$x:0000184F                 db 0FFh
.xdata$x:00001850                 db    0
.xdata$x:00001851                 db    0
.xdata$x:00001852                 db    0
.xdata$x:00001853                 db    0
.xdata$x:00001854                 db    0
.xdata$x:00001855                 db    0
.xdata$x:00001856                 db    0
.xdata$x:00001857                 db    0
.xdata$x:00001858                 dd offset __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:0000185C                 db    1
.xdata$x:0000185D                 db    0
.xdata$x:0000185E                 db    0
.xdata$x:0000185F                 db    0
.xdata$x:00001860                 dd offset __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:00001864                 db    1
.xdata$x:00001865                 db    0
.xdata$x:00001866                 db    0
.xdata$x:00001867                 db    0
.xdata$x:00001868                 dd offset __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:0000186C                 db    3
.xdata$x:0000186D                 db    0
.xdata$x:0000186E                 db    0
.xdata$x:0000186F                 db    0
.xdata$x:00001870                 dd offset __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
.xdata$x:00001874                 db    4
.xdata$x:00001875                 db    0
.xdata$x:00001876                 db    0
.xdata$x:00001877                 db    0
.xdata$x:00001878                 dd offset __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
.xdata$x:0000187C                 db    5
.xdata$x:0000187D                 db    0
.xdata$x:0000187E                 db    0
.xdata$x:0000187F                 db    0
.xdata$x:00001880                 dd offset __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
.xdata$x:00001884                 db    5
.xdata$x:00001885                 db    0
.xdata$x:00001886                 db    0
.xdata$x:00001887                 db    0
.xdata$x:00001888                 dd offset __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
.xdata$x:0000188C                 db    7
.xdata$x:0000188D                 db    0
.xdata$x:0000188E                 db    0
.xdata$x:0000188F                 db    0
.xdata$x:00001890                 dd offset __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11
.xdata$x:00001894                 db    8
.xdata$x:00001895                 db    0
.xdata$x:00001896                 db    0
.xdata$x:00001897                 db    0
.xdata$x:00001898                 db    0
.xdata$x:00001899                 db    0
.xdata$x:0000189A                 db    0
.xdata$x:0000189B                 db    0
.xdata$x:0000189C                 db    9
.xdata$x:0000189D                 db    0
.xdata$x:0000189E                 db    0
.xdata$x:0000189F                 db    0
.xdata$x:000018A0                 dd offset __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12
.xdata$x:000018A4                 db    8
.xdata$x:000018A5                 db    0
.xdata$x:000018A6                 db    0
.xdata$x:000018A7                 db    0
.xdata$x:000018A8                 db    0
.xdata$x:000018A9                 db    0
.xdata$x:000018AA                 db    0
.xdata$x:000018AB                 db    0
.xdata$x:000018AC                 db 0FFh
.xdata$x:000018AD                 db 0FFh
.xdata$x:000018AE                 db 0FFh
.xdata$x:000018AF                 db 0FFh
.xdata$x:000018B0                 db    0
.xdata$x:000018B1                 db    0
.xdata$x:000018B2                 db    0
.xdata$x:000018B3                 db    0
.xdata$x:000018B3 _xdata$x        ends
.xdata$x:000018B3
.text:000018B4 ; ===========================================================================
.text:000018B4
.text:000018B4 ; Segment type: Pure code
.text:000018B4 ; Segment permissions: Read/Execute
.text:000018B4 _text           segment para public 'CODE' use32
.text:000018B4                 assume cs:_text
.text:000018B4                 ;org 18B4h
.text:000018B4 ; COMDAT (pick any)
.text:000018B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000018B4
.text:000018B4 ; =============== S U B R O U T I N E =======================================
.text:000018B4
.text:000018B4 ; Attributes: bp-based frame
.text:000018B4
.text:000018B4 ; bool __thiscall NArchive::N7z::CDatabase::IsItemAnti(NArchive::N7z::CDatabase *this, unsigned int)
.text:000018B4                 public ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z
.text:000018B4 ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z proc near
.text:000018B4                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+BDp
.text:000018B4                                         ; NArchive::N7z::CFolderOutStream::OpenFile(bool)+1D6p
.text:000018B4
.text:000018B4 var_8           = dword ptr -8
.text:000018B4 var_4           = dword ptr -4
.text:000018B4 arg_0           = dword ptr  8
.text:000018B4
.text:000018B4                 push    ebp
.text:000018B5                 mov     ebp, esp
.text:000018B7                 sub     esp, 8
.text:000018BA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000018C1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018C8                 mov     [ebp+var_4], ecx
.text:000018CB                 mov     ecx, [ebp+var_4]
.text:000018CE                 add     ecx, 0C4h ; '-'
.text:000018D4                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000018D9                 cmp     [ebp+arg_0], eax
.text:000018DC                 jnb     short loc_1900
.text:000018DE                 mov     eax, [ebp+arg_0]
.text:000018E1                 push    eax
.text:000018E2                 mov     ecx, [ebp+var_4]
.text:000018E5                 add     ecx, 0C4h ; '-'
.text:000018EB                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000018F0                 movzx   ecx, byte ptr [eax]
.text:000018F3                 test    ecx, ecx
.text:000018F5                 jz      short loc_1900
.text:000018F7                 mov     [ebp+var_8], 1
.text:000018FE                 jmp     short loc_1907
.text:00001900 ; ---------------------------------------------------------------------------
.text:00001900
.text:00001900 loc_1900:                               ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+28j
.text:00001900                                         ; NArchive::N7z::CDatabase::IsItemAnti(uint)+41j
.text:00001900                 mov     [ebp+var_8], 0
.text:00001907
.text:00001907 loc_1907:                               ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+4Aj
.text:00001907                 mov     al, byte ptr [ebp+var_8]
.text:0000190A                 add     esp, 8
.text:0000190D                 cmp     ebp, esp
.text:0000190F                 call    __RTC_CheckEsp
.text:00001914                 mov     esp, ebp
.text:00001916                 pop     ebp
.text:00001917                 retn    4
.text:00001917 ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z endp
.text:00001917
.text:00001917 ; ---------------------------------------------------------------------------
.text:0000191A                 align 4
.text:0000191A _text           ends
.text:0000191A
.text:0000191C ; ===========================================================================
.text:0000191C
.text:0000191C ; Segment type: Pure code
.text:0000191C ; Segment permissions: Read/Execute
.text:0000191C _text           segment para public 'CODE' use32
.text:0000191C                 assume cs:_text
.text:0000191C                 ;org 191Ch
.text:0000191C ; COMDAT (pick any)
.text:0000191C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000191C
.text:0000191C ; =============== S U B R O U T I N E =======================================
.text:0000191C
.text:0000191C ; Attributes: bp-based frame
.text:0000191C
.text:0000191C ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:0000191C                 public ??1UString@@QAE@XZ
.text:0000191C ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9E3p
.text:0000191C                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+AEFp ...
.text:0000191C
.text:0000191C var_8           = dword ptr -8
.text:0000191C var_4           = dword ptr -4
.text:0000191C
.text:0000191C                 push    ebp
.text:0000191D                 mov     ebp, esp
.text:0000191F                 sub     esp, 8
.text:00001922                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001929                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001930                 mov     [ebp+var_4], ecx
.text:00001933                 mov     eax, [ebp+var_4]
.text:00001936                 mov     ecx, [eax]
.text:00001938                 mov     [ebp+var_8], ecx
.text:0000193B                 mov     edx, [ebp+var_8]
.text:0000193E                 push    edx             ; void *
.text:0000193F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001944                 add     esp, 4
.text:00001947                 add     esp, 8
.text:0000194A                 cmp     ebp, esp
.text:0000194C                 call    __RTC_CheckEsp
.text:00001951                 mov     esp, ebp
.text:00001953                 pop     ebp
.text:00001954                 retn
.text:00001954 ??1UString@@QAE@XZ endp
.text:00001954
.text:00001954 ; ---------------------------------------------------------------------------
.text:00001955                 align 4
.text:00001955 _text           ends
.text:00001955
.text:00001958 ; ===========================================================================
.text:00001958
.text:00001958 ; Segment type: Pure code
.text:00001958 ; Segment permissions: Read/Execute
.text:00001958 _text           segment para public 'CODE' use32
.text:00001958                 assume cs:_text
.text:00001958                 ;org 1958h
.text:00001958 ; COMDAT (pick any)
.text:00001958                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001958
.text:00001958 ; =============== S U B R O U T I N E =======================================
.text:00001958
.text:00001958 ; Attributes: bp-based frame
.text:00001958
.text:00001958 ; unsigned __int64 __thiscall NArchive::N7z::CDbEx::GetFolderFullPackSize(NArchive::N7z::CDbEx *this, unsigned int)
.text:00001958                 public ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z
.text:00001958 ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z proc near
.text:00001958                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+58Bp
.text:00001958
.text:00001958 var_4           = dword ptr -4
.text:00001958 arg_0           = dword ptr  8
.text:00001958
.text:00001958                 push    ebp
.text:00001959                 mov     ebp, esp
.text:0000195B                 push    ecx
.text:0000195C                 push    ebx
.text:0000195D                 push    esi
.text:0000195E                 push    edi
.text:0000195F                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001966                 mov     [ebp+var_4], ecx
.text:00001969                 mov     ecx, [ebp+var_4]
.text:0000196C                 add     ecx, 8
.text:0000196F                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:00001974                 mov     esi, eax
.text:00001976                 mov     ecx, [ebp+var_4]
.text:00001979                 add     ecx, 30h ; '0'
.text:0000197C                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00001981                 mov     ecx, [ebp+arg_0]
.text:00001984                 mov     edi, [eax+ecx*4+4]
.text:00001988                 mov     ecx, [ebp+var_4]
.text:0000198B                 add     ecx, 8
.text:0000198E                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:00001993                 mov     ebx, eax
.text:00001995                 mov     ecx, [ebp+var_4]
.text:00001998                 add     ecx, 30h ; '0'
.text:0000199B                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:000019A0                 mov     edx, [ebp+arg_0]
.text:000019A3                 mov     eax, [eax+edx*4]
.text:000019A6                 mov     ecx, [esi+edi*8]
.text:000019A9                 sub     ecx, [ebx+eax*8]
.text:000019AC                 mov     edx, [esi+edi*8+4]
.text:000019B0                 sbb     edx, [ebx+eax*8+4]
.text:000019B4                 mov     eax, ecx
.text:000019B6                 pop     edi
.text:000019B7                 pop     esi
.text:000019B8                 pop     ebx
.text:000019B9                 add     esp, 4
.text:000019BC                 cmp     ebp, esp
.text:000019BE                 call    __RTC_CheckEsp
.text:000019C3                 mov     esp, ebp
.text:000019C5                 pop     ebp
.text:000019C6                 retn    4
.text:000019C6 ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z endp
.text:000019C6
.text:000019C6 ; ---------------------------------------------------------------------------
.text:000019C9                 align 4
.text:000019C9 _text           ends
.text:000019C9
.text:000019CC ; ===========================================================================
.text:000019CC
.text:000019CC ; Segment type: Pure code
.text:000019CC ; Segment permissions: Read/Execute
.text:000019CC _text           segment para public 'CODE' use32
.text:000019CC                 assume cs:_text
.text:000019CC                 ;org 19CCh
.text:000019CC ; COMDAT (pick any)
.text:000019CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000019CC
.text:000019CC ; =============== S U B R O U T I N E =======================================
.text:000019CC
.text:000019CC ; Attributes: bp-based frame
.text:000019CC
.text:000019CC ; _DWORD __thiscall NArchive::N7z::CFolderOutStream::CFolderOutStream(NArchive::N7z::CFolderOutStream *__hidden this)
.text:000019CC                 public ??0CFolderOutStream@N7z@NArchive@@QAE@XZ
.text:000019CC ??0CFolderOutStream@N7z@NArchive@@QAE@XZ proc near
.text:000019CC                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+368p
.text:000019CC
.text:000019CC var_10          = dword ptr -10h
.text:000019CC var_C           = dword ptr -0Ch
.text:000019CC var_4           = dword ptr -4
.text:000019CC
.text:000019CC                 push    ebp
.text:000019CD                 mov     ebp, esp
.text:000019CF                 push    0FFFFFFFFh
.text:000019D1                 push    offset __ehhandler$??0CFolderOutStream@N7z@NArchive@@QAE@XZ
.text:000019D6                 mov     eax, large fs:0
.text:000019DC                 push    eax
.text:000019DD                 push    ecx
.text:000019DE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000019E5                 mov     eax, dword ptr ds:___security_cookie
.text:000019EA                 xor     eax, ebp
.text:000019EC                 push    eax
.text:000019ED                 lea     eax, [ebp+var_C]
.text:000019F0                 mov     large fs:0, eax
.text:000019F6                 mov     [ebp+var_10], ecx
.text:000019F9                 mov     ecx, [ebp+var_10] ; this
.text:000019FC                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00001A01                 mov     ecx, [ebp+var_10]
.text:00001A04                 add     ecx, 4          ; this
.text:00001A07                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00001A0C                 mov     eax, [ebp+var_10]
.text:00001A0F                 mov     dword ptr [eax], offset ??_7CFolderOutStream@N7z@NArchive@@6B@ ; const NArchive::N7z::CFolderOutStream::`vftable'
.text:00001A15                 mov     ecx, [ebp+var_10]
.text:00001A18                 add     ecx, 8
.text:00001A1B                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00001A20                 mov     [ebp+var_4], 0
.text:00001A27                 mov     ecx, [ebp+var_10]
.text:00001A2A                 mov     byte ptr [ecx+0Ch], 0
.text:00001A2E                 mov     edx, [ebp+var_10]
.text:00001A31                 mov     byte ptr [edx+0Dh], 1
.text:00001A35                 mov     ecx, [ebp+var_10]
.text:00001A38                 add     ecx, 30h ; '0'
.text:00001A3B                 call    ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>(void)
.text:00001A40                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A47                 mov     eax, [ebp+var_10]
.text:00001A4A                 mov     ecx, [ebp+var_C]
.text:00001A4D                 mov     large fs:0, ecx
.text:00001A54                 pop     ecx
.text:00001A55                 add     esp, 10h
.text:00001A58                 cmp     ebp, esp
.text:00001A5A                 call    __RTC_CheckEsp
.text:00001A5F                 mov     esp, ebp
.text:00001A61                 pop     ebp
.text:00001A62                 retn
.text:00001A62 ??0CFolderOutStream@N7z@NArchive@@QAE@XZ endp
.text:00001A62
.text:00001A62 ; ---------------------------------------------------------------------------
.text:00001A63                 align 4
.text:00001A63 _text           ends
.text:00001A63
.text$x:00001A64 ; ===========================================================================
.text$x:00001A64
.text$x:00001A64 ; Segment type: Pure code
.text$x:00001A64 ; Segment permissions: Read/Execute
.text$x:00001A64 _text$x         segment para public 'CODE' use32
.text$x:00001A64                 assume cs:_text$x
.text$x:00001A64                 ;org 1A64h
.text$x:00001A64 ; COMDAT (pick associative to section at 19CC)
.text$x:00001A64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001A64
.text$x:00001A64 ; =============== S U B R O U T I N E =======================================
.text$x:00001A64
.text$x:00001A64
.text$x:00001A64 __unwindfunclet$??0CFolderOutStream@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00001A64                                         ; DATA XREF: .xdata$x:00001AA4o
.text$x:00001A64                 mov     ecx, [ebp-10h]
.text$x:00001A67                 add     ecx, 8
.text$x:00001A6A                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001A6A __unwindfunclet$??0CFolderOutStream@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00001A6A
.text$x:00001A6F
.text$x:00001A6F ; =============== S U B R O U T I N E =======================================
.text$x:00001A6F
.text$x:00001A6F
.text$x:00001A6F __ehhandler$??0CFolderOutStream@N7z@NArchive@@QAE@XZ proc near
.text$x:00001A6F                                         ; DATA XREF: NArchive::N7z::CFolderOutStream::CFolderOutStream(void)+5o
.text$x:00001A6F
.text$x:00001A6F arg_4           = dword ptr  8
.text$x:00001A6F
.text$x:00001A6F                 mov     edx, [esp+arg_4]
.text$x:00001A73                 lea     eax, [edx+0Ch]
.text$x:00001A76                 mov     ecx, [edx-8]
.text$x:00001A79                 xor     ecx, eax
.text$x:00001A7B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001A80                 mov     eax, offset __ehfuncinfo$??0CFolderOutStream@N7z@NArchive@@QAE@XZ
.text$x:00001A85                 jmp     ___CxxFrameHandler3
.text$x:00001A85 __ehhandler$??0CFolderOutStream@N7z@NArchive@@QAE@XZ endp
.text$x:00001A85
.text$x:00001A85 ; ---------------------------------------------------------------------------
.text$x:00001A8A                 align 4
.text$x:00001A8A _text$x         ends
.text$x:00001A8A
.rdata:00001A8C ; ===========================================================================
.rdata:00001A8C
.rdata:00001A8C ; Segment type: Pure data
.rdata:00001A8C ; Segment permissions: Read
.rdata:00001A8C _rdata          segment dword public 'DATA' use32
.rdata:00001A8C                 assume cs:_rdata
.rdata:00001A8C                 ;org 1A8Ch
.rdata:00001A8C ; COMDAT (pick largest)
.rdata:00001A8C                 dd offset ??_R4CFolderOutStream@N7z@NArchive@@6B@ ; const NArchive::N7z::CFolderOutStream::`RTTI Complete Object Locator'
.rdata:00001A90                 public ??_7CFolderOutStream@N7z@NArchive@@6B@
.rdata:00001A90 ; const NArchive::N7z::CFolderOutStream::`vftable'
.rdata:00001A90 ??_7CFolderOutStream@N7z@NArchive@@6B@ dd offset ?QueryInterface@CFolderOutStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00001A90                                         ; DATA XREF: NArchive::N7z::CFolderOutStream::CFolderOutStream(void)+43o
.rdata:00001A90                                         ; NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *)
.rdata:00001A94                 dd offset ?AddRef@CFolderOutStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderOutStream::AddRef(void)
.rdata:00001A98                 dd offset ?Release@CFolderOutStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderOutStream::Release(void)
.rdata:00001A9C                 dd offset ?Write@CFolderOutStream@N7z@NArchive@@UAGJPBXIPAI@Z ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)
.rdata:00001A9C _rdata          ends
.rdata:00001A9C
.xdata$x:00001AA0 ; ===========================================================================
.xdata$x:00001AA0
.xdata$x:00001AA0 ; Segment type: Pure data
.xdata$x:00001AA0 ; Segment permissions: Read
.xdata$x:00001AA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001AA0                 assume cs:_xdata$x
.xdata$x:00001AA0                 ;org 1AA0h
.xdata$x:00001AA0 ; COMDAT (pick associative to section at 19CC)
.xdata$x:00001AA0 __unwindtable$??0CFolderOutStream@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00001AA0                                         ; DATA XREF: .xdata$x:00001AB0o
.xdata$x:00001AA1                 db 0FFh
.xdata$x:00001AA2                 db 0FFh
.xdata$x:00001AA3                 db 0FFh
.xdata$x:00001AA4                 dd offset __unwindfunclet$??0CFolderOutStream@N7z@NArchive@@QAE@XZ$0
.xdata$x:00001AA8 __ehfuncinfo$??0CFolderOutStream@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00001AA8                                         ; DATA XREF: __ehhandler$??0CFolderOutStream@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00001AA9                 db    5
.xdata$x:00001AAA                 db  93h ; ô
.xdata$x:00001AAB                 db  19h
.xdata$x:00001AAC                 db    1
.xdata$x:00001AAD                 db    0
.xdata$x:00001AAE                 db    0
.xdata$x:00001AAF                 db    0
.xdata$x:00001AB0                 dd offset __unwindtable$??0CFolderOutStream@N7z@NArchive@@QAE@XZ
.xdata$x:00001AB4                 db    0
.xdata$x:00001AB5                 db    0
.xdata$x:00001AB6                 db    0
.xdata$x:00001AB7                 db    0
.xdata$x:00001AB8                 db    0
.xdata$x:00001AB9                 db    0
.xdata$x:00001ABA                 db    0
.xdata$x:00001ABB                 db    0
.xdata$x:00001ABC                 db    0
.xdata$x:00001ABD                 db    0
.xdata$x:00001ABE                 db    0
.xdata$x:00001ABF                 db    0
.xdata$x:00001AC0                 db    0
.xdata$x:00001AC1                 db    0
.xdata$x:00001AC2                 db    0
.xdata$x:00001AC3                 db    0
.xdata$x:00001AC4                 db    0
.xdata$x:00001AC5                 db    0
.xdata$x:00001AC6                 db    0
.xdata$x:00001AC7                 db    0
.xdata$x:00001AC8                 db    1
.xdata$x:00001AC9                 db    0
.xdata$x:00001ACA                 db    0
.xdata$x:00001ACB                 db    0
.xdata$x:00001ACB _xdata$x        ends
.xdata$x:00001ACB
.rdata$r:00001ACC ; ===========================================================================
.rdata$r:00001ACC
.rdata$r:00001ACC ; Segment type: Pure data
.rdata$r:00001ACC ; Segment permissions: Read
.rdata$r:00001ACC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001ACC                 assume cs:_rdata$r
.rdata$r:00001ACC                 ;org 1ACCh
.rdata$r:00001ACC ; COMDAT (pick any)
.rdata$r:00001ACC                 public ??_R4CFolderOutStream@N7z@NArchive@@6B@
.rdata$r:00001ACC ; const NArchive::N7z::CFolderOutStream::`RTTI Complete Object Locator'
.rdata$r:00001ACC ??_R4CFolderOutStream@N7z@NArchive@@6B@ db    0
.rdata$r:00001ACC                                         ; DATA XREF: .rdata:00001A8Co
.rdata$r:00001ACD                 db    0
.rdata$r:00001ACE                 db    0
.rdata$r:00001ACF                 db    0
.rdata$r:00001AD0                 db    0
.rdata$r:00001AD1                 db    0
.rdata$r:00001AD2                 db    0
.rdata$r:00001AD3                 db    0
.rdata$r:00001AD4                 db    0
.rdata$r:00001AD5                 db    0
.rdata$r:00001AD6                 db    0
.rdata$r:00001AD7                 db    0
.rdata$r:00001AD8                 dd offset ??_R0?AVCFolderOutStream@N7z@NArchive@@@8 ; NArchive::N7z::CFolderOutStream `RTTI Type Descriptor'
.rdata$r:00001ADC                 dd offset ??_R3CFolderOutStream@N7z@NArchive@@8 ; NArchive::N7z::CFolderOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001ADC _rdata$r        ends
.rdata$r:00001ADC
.data:00001AE0 ; ===========================================================================
.data:00001AE0
.data:00001AE0 ; Segment type: Pure data
.data:00001AE0 ; Segment permissions: Read/Write
.data:00001AE0 _data           segment dword public 'DATA' use32
.data:00001AE0                 assume cs:_data
.data:00001AE0                 ;org 1AE0h
.data:00001AE0 ; COMDAT (pick any)
.data:00001AE0                 public ??_R0?AVCFolderOutStream@N7z@NArchive@@@8
.data:00001AE0 ; class NArchive::N7z::CFolderOutStream `RTTI Type Descriptor'
.data:00001AE0 ??_R0?AVCFolderOutStream@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00001AE0                                         ; DATA XREF: .rdata$r:00001AD8o
.data:00001AE0                                         ; .rdata$r:NArchive::N7z::CFolderOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001AE0                                         ; const type_info::`vftable'
.data:00001AE4                 align 8
.data:00001AE8 a_?avcfolderout db '.?AVCFolderOutStream@N7z@NArchive@@',0
.data:00001AE8 _data           ends
.data:00001AE8
.rdata$r:00001B0C ; ===========================================================================
.rdata$r:00001B0C
.rdata$r:00001B0C ; Segment type: Pure data
.rdata$r:00001B0C ; Segment permissions: Read
.rdata$r:00001B0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B0C                 assume cs:_rdata$r
.rdata$r:00001B0C                 ;org 1B0Ch
.rdata$r:00001B0C ; COMDAT (pick any)
.rdata$r:00001B0C                 public ??_R3CFolderOutStream@N7z@NArchive@@8
.rdata$r:00001B0C ; NArchive::N7z::CFolderOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B0C ??_R3CFolderOutStream@N7z@NArchive@@8 db    0
.rdata$r:00001B0C                                         ; DATA XREF: .rdata$r:00001ADCo
.rdata$r:00001B0C                                         ; .rdata$r:00001B48o
.rdata$r:00001B0D                 db    0
.rdata$r:00001B0E                 db    0
.rdata$r:00001B0F                 db    0
.rdata$r:00001B10                 db    1
.rdata$r:00001B11                 db    0
.rdata$r:00001B12                 db    0
.rdata$r:00001B13                 db    0
.rdata$r:00001B14                 db    4
.rdata$r:00001B15                 db    0
.rdata$r:00001B16                 db    0
.rdata$r:00001B17                 db    0
.rdata$r:00001B18                 dd offset ??_R2CFolderOutStream@N7z@NArchive@@8 ; NArchive::N7z::CFolderOutStream::`RTTI Base Class Array'
.rdata$r:00001B18 _rdata$r        ends
.rdata$r:00001B18
.rdata$r:00001B1C ; ===========================================================================
.rdata$r:00001B1C
.rdata$r:00001B1C ; Segment type: Pure data
.rdata$r:00001B1C ; Segment permissions: Read
.rdata$r:00001B1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B1C                 assume cs:_rdata$r
.rdata$r:00001B1C                 ;org 1B1Ch
.rdata$r:00001B1C ; COMDAT (pick any)
.rdata$r:00001B1C                 public ??_R2CFolderOutStream@N7z@NArchive@@8
.rdata$r:00001B1C ; NArchive::N7z::CFolderOutStream::`RTTI Base Class Array'
.rdata$r:00001B1C ??_R2CFolderOutStream@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CFolderOutStream@N7z@NArchive@@8
.rdata$r:00001B1C                                         ; DATA XREF: .rdata$r:00001B18o
.rdata$r:00001B1C                                         ; NArchive::N7z::CFolderOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001B20                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001B24                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001B28                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001B2C                 db    0
.rdata$r:00001B2D                 align 10h
.rdata$r:00001B2D _rdata$r        ends
.rdata$r:00001B2D
.rdata$r:00001B30 ; ===========================================================================
.rdata$r:00001B30
.rdata$r:00001B30 ; Segment type: Pure data
.rdata$r:00001B30 ; Segment permissions: Read
.rdata$r:00001B30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B30                 assume cs:_rdata$r
.rdata$r:00001B30                 ;org 1B30h
.rdata$r:00001B30 ; COMDAT (pick any)
.rdata$r:00001B30                 public ??_R1A@?0A@EA@CFolderOutStream@N7z@NArchive@@8
.rdata$r:00001B30 ; NArchive::N7z::CFolderOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001B30 ??_R1A@?0A@EA@CFolderOutStream@N7z@NArchive@@8 dd offset ??_R0?AVCFolderOutStream@N7z@NArchive@@@8
.rdata$r:00001B30                                         ; DATA XREF: .rdata$r:NArchive::N7z::CFolderOutStream::`RTTI Base Class Array'o
.rdata$r:00001B30                                         ; NArchive::N7z::CFolderOutStream `RTTI Type Descriptor'
.rdata$r:00001B34                 db    3
.rdata$r:00001B35                 db    0
.rdata$r:00001B36                 db    0
.rdata$r:00001B37                 db    0
.rdata$r:00001B38                 db    0
.rdata$r:00001B39                 db    0
.rdata$r:00001B3A                 db    0
.rdata$r:00001B3B                 db    0
.rdata$r:00001B3C                 db 0FFh
.rdata$r:00001B3D                 db 0FFh
.rdata$r:00001B3E                 db 0FFh
.rdata$r:00001B3F                 db 0FFh
.rdata$r:00001B40                 db    0
.rdata$r:00001B41                 db    0
.rdata$r:00001B42                 db    0
.rdata$r:00001B43                 db    0
.rdata$r:00001B44                 db  40h ; @
.rdata$r:00001B45                 db    0
.rdata$r:00001B46                 db    0
.rdata$r:00001B47                 db    0
.rdata$r:00001B48                 dd offset ??_R3CFolderOutStream@N7z@NArchive@@8 ; NArchive::N7z::CFolderOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B48 _rdata$r        ends
.rdata$r:00001B48
.rdata$r:00001B4C ; ===========================================================================
.rdata$r:00001B4C
.rdata$r:00001B4C ; Segment type: Pure data
.rdata$r:00001B4C ; Segment permissions: Read
.rdata$r:00001B4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B4C                 assume cs:_rdata$r
.rdata$r:00001B4C                 ;org 1B4Ch
.rdata$r:00001B4C ; COMDAT (pick any)
.rdata$r:00001B4C                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00001B4C ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001B4C ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00001B4C                                         ; DATA XREF: .rdata$r:00001B20o
.rdata$r:00001B4C                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00001B4C                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00001B50                 db    1
.rdata$r:00001B51                 db    0
.rdata$r:00001B52                 db    0
.rdata$r:00001B53                 db    0
.rdata$r:00001B54                 db    0
.rdata$r:00001B55                 db    0
.rdata$r:00001B56                 db    0
.rdata$r:00001B57                 db    0
.rdata$r:00001B58                 db 0FFh
.rdata$r:00001B59                 db 0FFh
.rdata$r:00001B5A                 db 0FFh
.rdata$r:00001B5B                 db 0FFh
.rdata$r:00001B5C                 db    0
.rdata$r:00001B5D                 db    0
.rdata$r:00001B5E                 db    0
.rdata$r:00001B5F                 db    0
.rdata$r:00001B60                 db  40h ; @
.rdata$r:00001B61                 db    0
.rdata$r:00001B62                 db    0
.rdata$r:00001B63                 db    0
.rdata$r:00001B64                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B64 _rdata$r        ends
.rdata$r:00001B64
.data:00001B68 ; ===========================================================================
.data:00001B68
.data:00001B68 ; Segment type: Pure data
.data:00001B68 ; Segment permissions: Read/Write
.data:00001B68 _data           segment dword public 'DATA' use32
.data:00001B68                 assume cs:_data
.data:00001B68                 ;org 1B68h
.data:00001B68 ; COMDAT (pick any)
.data:00001B68                 public ??_R0?AUISequentialOutStream@@@8
.data:00001B68 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00001B68 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00001B68                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001B68                                         ; .rdata$r:00001E7Co
.data:00001B68                                         ; const type_info::`vftable'
.data:00001B6C                 align 10h
.data:00001B70 a_?auisequentia db '.?AUISequentialOutStream@@',0
.data:00001B8B                 align 4
.data:00001B8B _data           ends
.data:00001B8B
.rdata$r:00001B8C ; ===========================================================================
.rdata$r:00001B8C
.rdata$r:00001B8C ; Segment type: Pure data
.rdata$r:00001B8C ; Segment permissions: Read
.rdata$r:00001B8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B8C                 assume cs:_rdata$r
.rdata$r:00001B8C                 ;org 1B8Ch
.rdata$r:00001B8C ; COMDAT (pick any)
.rdata$r:00001B8C                 public ??_R3ISequentialOutStream@@8
.rdata$r:00001B8C ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B8C ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00001B64o
.rdata$r:00001B8C                                         ; .rdata$r:00001E80o
.rdata$r:00001B8D                 db    0
.rdata$r:00001B8E                 db    0
.rdata$r:00001B8F                 db    0
.rdata$r:00001B90                 db    0
.rdata$r:00001B91                 db    0
.rdata$r:00001B92                 db    0
.rdata$r:00001B93                 db    0
.rdata$r:00001B94                 db    2
.rdata$r:00001B95                 db    0
.rdata$r:00001B96                 db    0
.rdata$r:00001B97                 db    0
.rdata$r:00001B98                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00001B98 _rdata$r        ends
.rdata$r:00001B98
.rdata$r:00001B9C ; ===========================================================================
.rdata$r:00001B9C
.rdata$r:00001B9C ; Segment type: Pure data
.rdata$r:00001B9C ; Segment permissions: Read
.rdata$r:00001B9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B9C                 assume cs:_rdata$r
.rdata$r:00001B9C                 ;org 1B9Ch
.rdata$r:00001B9C ; COMDAT (pick any)
.rdata$r:00001B9C                 public ??_R2ISequentialOutStream@@8
.rdata$r:00001B9C ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00001B9C ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00001B9C                                         ; DATA XREF: .rdata$r:00001B98o
.rdata$r:00001B9C                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001BA0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001BA4                 db    0
.rdata$r:00001BA5                 align 4
.rdata$r:00001BA5 _rdata$r        ends
.rdata$r:00001BA5
.rdata$r:00001BA8 ; ===========================================================================
.rdata$r:00001BA8
.rdata$r:00001BA8 ; Segment type: Pure data
.rdata$r:00001BA8 ; Segment permissions: Read
.rdata$r:00001BA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BA8                 assume cs:_rdata$r
.rdata$r:00001BA8                 ;org 1BA8h
.rdata$r:00001BA8 ; COMDAT (pick any)
.rdata$r:00001BA8                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001BA8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001BA8 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001BA8                                         ; DATA XREF: .rdata$r:00001B24o
.rdata$r:00001BA8                                         ; .rdata$r:00001BA0o ...
.rdata$r:00001BA8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001BAC                 db    0
.rdata$r:00001BAD                 db    0
.rdata$r:00001BAE                 db    0
.rdata$r:00001BAF                 db    0
.rdata$r:00001BB0                 db    0
.rdata$r:00001BB1                 db    0
.rdata$r:00001BB2                 db    0
.rdata$r:00001BB3                 db    0
.rdata$r:00001BB4                 db 0FFh
.rdata$r:00001BB5                 db 0FFh
.rdata$r:00001BB6                 db 0FFh
.rdata$r:00001BB7                 db 0FFh
.rdata$r:00001BB8                 db    0
.rdata$r:00001BB9                 db    0
.rdata$r:00001BBA                 db    0
.rdata$r:00001BBB                 db    0
.rdata$r:00001BBC                 db  40h ; @
.rdata$r:00001BBD                 db    0
.rdata$r:00001BBE                 db    0
.rdata$r:00001BBF                 db    0
.rdata$r:00001BC0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001BC0 _rdata$r        ends
.rdata$r:00001BC0
.data:00001BC4 ; ===========================================================================
.data:00001BC4
.data:00001BC4 ; Segment type: Pure data
.data:00001BC4 ; Segment permissions: Read/Write
.data:00001BC4 _data           segment dword public 'DATA' use32
.data:00001BC4                 assume cs:_data
.data:00001BC4                 ;org 1BC4h
.data:00001BC4 ; COMDAT (pick any)
.data:00001BC4                 public ??_R0?AUIUnknown@@@8
.data:00001BC4 ; struct IUnknown `RTTI Type Descriptor'
.data:00001BC4 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00001BC4                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001BC4                                         ; const type_info::`vftable'
.data:00001BC8                 db    0
.data:00001BC9                 db    0
.data:00001BCA                 db    0
.data:00001BCB                 db    0
.data:00001BCC                 db  2Eh ; .
.data:00001BCD                 db  3Fh ; ?
.data:00001BCE                 db  41h ; A
.data:00001BCF                 db  55h ; U
.data:00001BD0                 db  49h ; I
.data:00001BD1                 db  55h ; U
.data:00001BD2                 db  6Eh ; n
.data:00001BD3                 db  6Bh ; k
.data:00001BD4                 db  6Eh ; n
.data:00001BD5                 db  6Fh ; o
.data:00001BD6                 db  77h ; w
.data:00001BD7                 db  6Eh ; n
.data:00001BD8                 db  40h ; @
.data:00001BD9                 db  40h ; @
.data:00001BDA                 db    0
.data:00001BDB                 align 4
.data:00001BDB _data           ends
.data:00001BDB
.rdata$r:00001BDC ; ===========================================================================
.rdata$r:00001BDC
.rdata$r:00001BDC ; Segment type: Pure data
.rdata$r:00001BDC ; Segment permissions: Read
.rdata$r:00001BDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BDC                 assume cs:_rdata$r
.rdata$r:00001BDC                 ;org 1BDCh
.rdata$r:00001BDC ; COMDAT (pick any)
.rdata$r:00001BDC                 public ??_R3IUnknown@@8
.rdata$r:00001BDC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001BDC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00001BC0o
.rdata$r:00001BDD                 db    0
.rdata$r:00001BDE                 db    0
.rdata$r:00001BDF                 db    0
.rdata$r:00001BE0                 db    0
.rdata$r:00001BE1                 db    0
.rdata$r:00001BE2                 db    0
.rdata$r:00001BE3                 db    0
.rdata$r:00001BE4                 db    1
.rdata$r:00001BE5                 db    0
.rdata$r:00001BE6                 db    0
.rdata$r:00001BE7                 db    0
.rdata$r:00001BE8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001BE8 _rdata$r        ends
.rdata$r:00001BE8
.rdata$r:00001BEC ; ===========================================================================
.rdata$r:00001BEC
.rdata$r:00001BEC ; Segment type: Pure data
.rdata$r:00001BEC ; Segment permissions: Read
.rdata$r:00001BEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BEC                 assume cs:_rdata$r
.rdata$r:00001BEC                 ;org 1BECh
.rdata$r:00001BEC ; COMDAT (pick any)
.rdata$r:00001BEC                 public ??_R2IUnknown@@8
.rdata$r:00001BEC ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001BEC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001BEC                                         ; DATA XREF: .rdata$r:00001BE8o
.rdata$r:00001BEC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001BF0                 db    0
.rdata$r:00001BF1                 align 4
.rdata$r:00001BF1 _rdata$r        ends
.rdata$r:00001BF1
.rdata$r:00001BF4 ; ===========================================================================
.rdata$r:00001BF4
.rdata$r:00001BF4 ; Segment type: Pure data
.rdata$r:00001BF4 ; Segment permissions: Read
.rdata$r:00001BF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BF4                 assume cs:_rdata$r
.rdata$r:00001BF4                 ;org 1BF4h
.rdata$r:00001BF4 ; COMDAT (pick any)
.rdata$r:00001BF4                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00001BF4 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00001BF4 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001BF4                                         ; DATA XREF: .rdata$r:00001B28o
.rdata$r:00001BF4                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001BF8                 db    0
.rdata$r:00001BF9                 db    0
.rdata$r:00001BFA                 db    0
.rdata$r:00001BFB                 db    0
.rdata$r:00001BFC                 db    4
.rdata$r:00001BFD                 db    0
.rdata$r:00001BFE                 db    0
.rdata$r:00001BFF                 db    0
.rdata$r:00001C00                 db 0FFh
.rdata$r:00001C01                 db 0FFh
.rdata$r:00001C02                 db 0FFh
.rdata$r:00001C03                 db 0FFh
.rdata$r:00001C04                 db    0
.rdata$r:00001C05                 db    0
.rdata$r:00001C06                 db    0
.rdata$r:00001C07                 db    0
.rdata$r:00001C08                 db  40h ; @
.rdata$r:00001C09                 db    0
.rdata$r:00001C0A                 db    0
.rdata$r:00001C0B                 db    0
.rdata$r:00001C0C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C0C _rdata$r        ends
.rdata$r:00001C0C
.data:00001C10 ; ===========================================================================
.data:00001C10
.data:00001C10 ; Segment type: Pure data
.data:00001C10 ; Segment permissions: Read/Write
.data:00001C10 _data           segment dword public 'DATA' use32
.data:00001C10                 assume cs:_data
.data:00001C10                 ;org 1C10h
.data:00001C10 ; COMDAT (pick any)
.data:00001C10                 public ??_R0?AVCMyUnknownImp@@@8
.data:00001C10 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00001C10 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00001C10                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00001C10                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001C10                                         ; const type_info::`vftable'
.data:00001C14                 align 8
.data:00001C18 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00001C18 _data           ends
.data:00001C18
.rdata$r:00001C2C ; ===========================================================================
.rdata$r:00001C2C
.rdata$r:00001C2C ; Segment type: Pure data
.rdata$r:00001C2C ; Segment permissions: Read
.rdata$r:00001C2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C2C                 assume cs:_rdata$r
.rdata$r:00001C2C                 ;org 1C2Ch
.rdata$r:00001C2C ; COMDAT (pick any)
.rdata$r:00001C2C                 public ??_R3CMyUnknownImp@@8
.rdata$r:00001C2C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C2C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00001C0Co
.rdata$r:00001C2C                                         ; .rdata$r:00001C5Co
.rdata$r:00001C2D                 db    0
.rdata$r:00001C2E                 db    0
.rdata$r:00001C2F                 db    0
.rdata$r:00001C30                 db    0
.rdata$r:00001C31                 db    0
.rdata$r:00001C32                 db    0
.rdata$r:00001C33                 db    0
.rdata$r:00001C34                 db    1
.rdata$r:00001C35                 db    0
.rdata$r:00001C36                 db    0
.rdata$r:00001C37                 db    0
.rdata$r:00001C38                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00001C38 _rdata$r        ends
.rdata$r:00001C38
.rdata$r:00001C3C ; ===========================================================================
.rdata$r:00001C3C
.rdata$r:00001C3C ; Segment type: Pure data
.rdata$r:00001C3C ; Segment permissions: Read
.rdata$r:00001C3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C3C                 assume cs:_rdata$r
.rdata$r:00001C3C                 ;org 1C3Ch
.rdata$r:00001C3C ; COMDAT (pick any)
.rdata$r:00001C3C                 public ??_R2CMyUnknownImp@@8
.rdata$r:00001C3C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00001C3C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00001C3C                                         ; DATA XREF: .rdata$r:00001C38o
.rdata$r:00001C3C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001C40                 db    0
.rdata$r:00001C41                 align 4
.rdata$r:00001C41 _rdata$r        ends
.rdata$r:00001C41
.rdata$r:00001C44 ; ===========================================================================
.rdata$r:00001C44
.rdata$r:00001C44 ; Segment type: Pure data
.rdata$r:00001C44 ; Segment permissions: Read
.rdata$r:00001C44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C44                 assume cs:_rdata$r
.rdata$r:00001C44                 ;org 1C44h
.rdata$r:00001C44 ; COMDAT (pick any)
.rdata$r:00001C44                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00001C44 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001C44 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001C44                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00001C44                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001C48                 align 10h
.rdata$r:00001C50                 db 0FFh
.rdata$r:00001C51                 db 0FFh
.rdata$r:00001C52                 db 0FFh
.rdata$r:00001C53                 db 0FFh
.rdata$r:00001C54                 db    0
.rdata$r:00001C55                 db    0
.rdata$r:00001C56                 db    0
.rdata$r:00001C57                 db    0
.rdata$r:00001C58                 db  40h ; @
.rdata$r:00001C59                 db    0
.rdata$r:00001C5A                 db    0
.rdata$r:00001C5B                 db    0
.rdata$r:00001C5C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C5C _rdata$r        ends
.rdata$r:00001C5C
.text:00001C60 ; ===========================================================================
.text:00001C60
.text:00001C60 ; Segment type: Pure code
.text:00001C60 ; Segment permissions: Read/Execute
.text:00001C60 _text           segment para public 'CODE' use32
.text:00001C60                 assume cs:_text
.text:00001C60                 ;org 1C60h
.text:00001C60 ; COMDAT (pick any)
.text:00001C60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001C60
.text:00001C60 ; =============== S U B R O U T I N E =======================================
.text:00001C60
.text:00001C60 ; Attributes: bp-based frame
.text:00001C60
.text:00001C60 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00001C60                 public ??0CMyUnknownImp@@QAE@XZ
.text:00001C60 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CFolderOutStream::CFolderOutStream(void)+3Bp
.text:00001C60
.text:00001C60 var_4           = dword ptr -4
.text:00001C60
.text:00001C60                 push    ebp
.text:00001C61                 mov     ebp, esp
.text:00001C63                 push    ecx
.text:00001C64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C6B                 mov     [ebp+var_4], ecx
.text:00001C6E                 mov     eax, [ebp+var_4]
.text:00001C71                 mov     dword ptr [eax], 0
.text:00001C77                 mov     eax, [ebp+var_4]
.text:00001C7A                 mov     esp, ebp
.text:00001C7C                 pop     ebp
.text:00001C7D                 retn
.text:00001C7D ??0CMyUnknownImp@@QAE@XZ endp
.text:00001C7D
.text:00001C7D ; ---------------------------------------------------------------------------
.text:00001C7E                 align 10h
.text:00001C7E _text           ends
.text:00001C7E
.text:00001C80 ; ===========================================================================
.text:00001C80
.text:00001C80 ; Segment type: Pure code
.text:00001C80 ; Segment permissions: Read/Execute
.text:00001C80 _text           segment para public 'CODE' use32
.text:00001C80                 assume cs:_text
.text:00001C80                 ;org 1C80h
.text:00001C80 ; COMDAT (pick any)
.text:00001C80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001C80
.text:00001C80 ; =============== S U B R O U T I N E =======================================
.text:00001C80
.text:00001C80 ; Attributes: bp-based frame
.text:00001C80
.text:00001C80 ; __int32 __stdcall NArchive::N7z::CFolderOutStream::QueryInterface(NArchive::N7z::CFolderOutStream *this, const struct _GUID *Buf1, void **)
.text:00001C80                 public ?QueryInterface@CFolderOutStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00001C80 ?QueryInterface@CFolderOutStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00001C80                                         ; DATA XREF: .rdata:const NArchive::N7z::CFolderOutStream::`vftable'o
.text:00001C80
.text:00001C80 this            = dword ptr  8
.text:00001C80 Buf1            = dword ptr  0Ch
.text:00001C80 arg_8           = dword ptr  10h
.text:00001C80
.text:00001C80                 push    ebp
.text:00001C81                 mov     ebp, esp
.text:00001C83                 mov     eax, [ebp+arg_8]
.text:00001C86                 mov     dword ptr [eax], 0
.text:00001C8C                 push    offset _IID_IUnknown ; Buf2
.text:00001C91                 mov     ecx, [ebp+Buf1]
.text:00001C94                 push    ecx             ; Buf1
.text:00001C95                 call    ___@8           ; __(x,x)
.text:00001C9A                 test    eax, eax
.text:00001C9C                 jz      short loc_1CA8
.text:00001C9E                 mov     edx, [ebp+arg_8]
.text:00001CA1                 mov     eax, [ebp+this]
.text:00001CA4                 mov     [edx], eax
.text:00001CA6                 jmp     short loc_1CCB
.text:00001CA8 ; ---------------------------------------------------------------------------
.text:00001CA8
.text:00001CA8 loc_1CA8:                               ; CODE XREF: NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00001CA8                 push    offset _IID_ISequentialOutStream ; Buf2
.text:00001CAD                 mov     ecx, [ebp+Buf1]
.text:00001CB0                 push    ecx             ; Buf1
.text:00001CB1                 call    ___@8           ; __(x,x)
.text:00001CB6                 test    eax, eax
.text:00001CB8                 jz      short loc_1CC4
.text:00001CBA                 mov     edx, [ebp+arg_8]
.text:00001CBD                 mov     eax, [ebp+this]
.text:00001CC0                 mov     [edx], eax
.text:00001CC2                 jmp     short loc_1CCB
.text:00001CC4 ; ---------------------------------------------------------------------------
.text:00001CC4
.text:00001CC4 loc_1CC4:                               ; CODE XREF: NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *)+38j
.text:00001CC4                 mov     eax, 80004002h
.text:00001CC9                 jmp     short loc_1CDC
.text:00001CCB ; ---------------------------------------------------------------------------
.text:00001CCB
.text:00001CCB loc_1CCB:                               ; CODE XREF: NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:00001CCB                                         ; NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *)+42j
.text:00001CCB                 mov     ecx, [ebp+this]
.text:00001CCE                 mov     edx, [ecx+4]
.text:00001CD1                 add     edx, 1
.text:00001CD4                 mov     eax, [ebp+this]
.text:00001CD7                 mov     [eax+4], edx
.text:00001CDA                 xor     eax, eax
.text:00001CDC
.text:00001CDC loc_1CDC:                               ; CODE XREF: NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *)+49j
.text:00001CDC                 cmp     ebp, esp
.text:00001CDE                 call    __RTC_CheckEsp
.text:00001CE3                 pop     ebp
.text:00001CE4                 retn    0Ch
.text:00001CE4 ?QueryInterface@CFolderOutStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001CE4
.text:00001CE4 ; ---------------------------------------------------------------------------
.text:00001CE7                 align 4
.text:00001CE7 _text           ends
.text:00001CE7
.text:00001CE8 ; ===========================================================================
.text:00001CE8
.text:00001CE8 ; Segment type: Pure code
.text:00001CE8 ; Segment permissions: Read/Execute
.text:00001CE8 _text           segment para public 'CODE' use32
.text:00001CE8                 assume cs:_text
.text:00001CE8                 ;org 1CE8h
.text:00001CE8 ; COMDAT (pick any)
.text:00001CE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001CE8
.text:00001CE8 ; =============== S U B R O U T I N E =======================================
.text:00001CE8
.text:00001CE8 ; Attributes: bp-based frame
.text:00001CE8
.text:00001CE8 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00001CE8                 public ___@8
.text:00001CE8 ___@8           proc near               ; CODE XREF: NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *)+15p
.text:00001CE8                                         ; NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *)+31p
.text:00001CE8
.text:00001CE8 Buf1            = dword ptr  8
.text:00001CE8 Buf2            = dword ptr  0Ch
.text:00001CE8
.text:00001CE8                 push    ebp
.text:00001CE9                 mov     ebp, esp
.text:00001CEB                 mov     eax, [ebp+Buf2]
.text:00001CEE                 push    eax             ; Buf2
.text:00001CEF                 mov     ecx, [ebp+Buf1]
.text:00001CF2                 push    ecx             ; Buf1
.text:00001CF3                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00001CF8                 cmp     ebp, esp
.text:00001CFA                 call    __RTC_CheckEsp
.text:00001CFF                 pop     ebp
.text:00001D00                 retn    8
.text:00001D00 ___@8           endp
.text:00001D00
.text:00001D00 ; ---------------------------------------------------------------------------
.text:00001D03                 align 4
.text:00001D03 _text           ends
.text:00001D03
.text:00001D04 ; ===========================================================================
.text:00001D04
.text:00001D04 ; Segment type: Pure code
.text:00001D04 ; Segment permissions: Read/Execute
.text:00001D04 _text           segment para public 'CODE' use32
.text:00001D04                 assume cs:_text
.text:00001D04                 ;org 1D04h
.text:00001D04 ; COMDAT (pick any)
.text:00001D04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001D04
.text:00001D04 ; =============== S U B R O U T I N E =======================================
.text:00001D04
.text:00001D04 ; Attributes: bp-based frame
.text:00001D04
.text:00001D04 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00001D04                 public _IsEqualGUID@8
.text:00001D04 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00001D04
.text:00001D04 Buf1            = dword ptr  8
.text:00001D04 Buf2            = dword ptr  0Ch
.text:00001D04
.text:00001D04                 push    ebp
.text:00001D05                 mov     ebp, esp
.text:00001D07                 push    10h             ; Size
.text:00001D09                 mov     eax, [ebp+Buf2]
.text:00001D0C                 push    eax             ; Buf2
.text:00001D0D                 mov     ecx, [ebp+Buf1]
.text:00001D10                 push    ecx             ; Buf1
.text:00001D11                 call    _memcmp
.text:00001D16                 add     esp, 0Ch
.text:00001D19                 neg     eax
.text:00001D1B                 sbb     eax, eax
.text:00001D1D                 add     eax, 1
.text:00001D20                 cmp     ebp, esp
.text:00001D22                 call    __RTC_CheckEsp
.text:00001D27                 pop     ebp
.text:00001D28                 retn    8
.text:00001D28 _IsEqualGUID@8  endp
.text:00001D28
.text:00001D28 ; ---------------------------------------------------------------------------
.text:00001D2B                 align 4
.text:00001D2B _text           ends
.text:00001D2B
.text:00001D2C ; ===========================================================================
.text:00001D2C
.text:00001D2C ; Segment type: Pure code
.text:00001D2C ; Segment permissions: Read/Execute
.text:00001D2C _text           segment para public 'CODE' use32
.text:00001D2C                 assume cs:_text
.text:00001D2C                 ;org 1D2Ch
.text:00001D2C ; COMDAT (pick any)
.text:00001D2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001D2C
.text:00001D2C ; =============== S U B R O U T I N E =======================================
.text:00001D2C
.text:00001D2C ; Attributes: bp-based frame
.text:00001D2C
.text:00001D2C ; unsigned __int32 __stdcall NArchive::N7z::CFolderOutStream::AddRef(NArchive::N7z::CFolderOutStream *this)
.text:00001D2C                 public ?AddRef@CFolderOutStream@N7z@NArchive@@UAGKXZ
.text:00001D2C ?AddRef@CFolderOutStream@N7z@NArchive@@UAGKXZ proc near
.text:00001D2C                                         ; DATA XREF: .rdata:00001A94o
.text:00001D2C
.text:00001D2C var_4           = dword ptr -4
.text:00001D2C this            = dword ptr  8
.text:00001D2C
.text:00001D2C                 push    ebp
.text:00001D2D                 mov     ebp, esp
.text:00001D2F                 push    ecx
.text:00001D30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D37                 mov     eax, [ebp+this]
.text:00001D3A                 mov     ecx, [eax+4]
.text:00001D3D                 add     ecx, 1
.text:00001D40                 mov     [ebp+var_4], ecx
.text:00001D43                 mov     edx, [ebp+this]
.text:00001D46                 mov     eax, [ebp+var_4]
.text:00001D49                 mov     [edx+4], eax
.text:00001D4C                 mov     eax, [ebp+var_4]
.text:00001D4F                 mov     esp, ebp
.text:00001D51                 pop     ebp
.text:00001D52                 retn    4
.text:00001D52 ?AddRef@CFolderOutStream@N7z@NArchive@@UAGKXZ endp
.text:00001D52
.text:00001D52 ; ---------------------------------------------------------------------------
.text:00001D55                 align 4
.text:00001D55 _text           ends
.text:00001D55
.text:00001D58 ; ===========================================================================
.text:00001D58
.text:00001D58 ; Segment type: Pure code
.text:00001D58 ; Segment permissions: Read/Execute
.text:00001D58 _text           segment para public 'CODE' use32
.text:00001D58                 assume cs:_text
.text:00001D58                 ;org 1D58h
.text:00001D58 ; COMDAT (pick any)
.text:00001D58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001D58
.text:00001D58 ; =============== S U B R O U T I N E =======================================
.text:00001D58
.text:00001D58 ; Attributes: bp-based frame
.text:00001D58
.text:00001D58 ; unsigned __int32 __stdcall NArchive::N7z::CFolderOutStream::Release(NArchive::N7z::CFolderOutStream *this)
.text:00001D58                 public ?Release@CFolderOutStream@N7z@NArchive@@UAGKXZ
.text:00001D58 ?Release@CFolderOutStream@N7z@NArchive@@UAGKXZ proc near
.text:00001D58                                         ; DATA XREF: .rdata:00001A98o
.text:00001D58
.text:00001D58 var_10          = dword ptr -10h
.text:00001D58 var_C           = dword ptr -0Ch
.text:00001D58 var_8           = dword ptr -8
.text:00001D58 var_4           = dword ptr -4
.text:00001D58 this            = dword ptr  8
.text:00001D58
.text:00001D58                 push    ebp
.text:00001D59                 mov     ebp, esp
.text:00001D5B                 sub     esp, 10h
.text:00001D5E                 mov     eax, 0CCCCCCCCh
.text:00001D63                 mov     [ebp+var_10], eax
.text:00001D66                 mov     [ebp+var_C], eax
.text:00001D69                 mov     [ebp+var_8], eax
.text:00001D6C                 mov     [ebp+var_4], eax
.text:00001D6F                 mov     eax, [ebp+this]
.text:00001D72                 mov     ecx, [eax+4]
.text:00001D75                 sub     ecx, 1
.text:00001D78                 mov     [ebp+var_C], ecx
.text:00001D7B                 mov     edx, [ebp+this]
.text:00001D7E                 mov     eax, [ebp+var_C]
.text:00001D81                 mov     [edx+4], eax
.text:00001D84                 cmp     [ebp+var_C], 0
.text:00001D88                 jz      short loc_1D92
.text:00001D8A                 mov     ecx, [ebp+this]
.text:00001D8D                 mov     eax, [ecx+4]
.text:00001D90                 jmp     short loc_1DBC
.text:00001D92 ; ---------------------------------------------------------------------------
.text:00001D92
.text:00001D92 loc_1D92:                               ; CODE XREF: NArchive::N7z::CFolderOutStream::Release(void)+30j
.text:00001D92                 mov     edx, [ebp+this]
.text:00001D95                 mov     [ebp+var_8], edx
.text:00001D98                 mov     eax, [ebp+var_8]
.text:00001D9B                 mov     [ebp+var_4], eax
.text:00001D9E                 cmp     [ebp+var_4], 0
.text:00001DA2                 jz      short loc_1DB3
.text:00001DA4                 push    1
.text:00001DA6                 mov     ecx, [ebp+var_4]
.text:00001DA9                 call    ??_GCFolderOutStream@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CFolderOutStream::`scalar deleting destructor'(uint)
.text:00001DAE                 mov     [ebp+var_10], eax
.text:00001DB1                 jmp     short loc_1DBA
.text:00001DB3 ; ---------------------------------------------------------------------------
.text:00001DB3
.text:00001DB3 loc_1DB3:                               ; CODE XREF: NArchive::N7z::CFolderOutStream::Release(void)+4Aj
.text:00001DB3                 mov     [ebp+var_10], 0
.text:00001DBA
.text:00001DBA loc_1DBA:                               ; CODE XREF: NArchive::N7z::CFolderOutStream::Release(void)+59j
.text:00001DBA                 xor     eax, eax
.text:00001DBC
.text:00001DBC loc_1DBC:                               ; CODE XREF: NArchive::N7z::CFolderOutStream::Release(void)+38j
.text:00001DBC                 add     esp, 10h
.text:00001DBF                 cmp     ebp, esp
.text:00001DC1                 call    __RTC_CheckEsp
.text:00001DC6                 mov     esp, ebp
.text:00001DC8                 pop     ebp
.text:00001DC9                 retn    4
.text:00001DC9 ?Release@CFolderOutStream@N7z@NArchive@@UAGKXZ endp
.text:00001DC9
.text:00001DC9 _text           ends
.text:00001DC9
.text:00001DCC ; ===========================================================================
.text:00001DCC
.text:00001DCC ; Segment type: Pure code
.text:00001DCC ; Segment permissions: Read/Execute
.text:00001DCC _text           segment para public 'CODE' use32
.text:00001DCC                 assume cs:_text
.text:00001DCC                 ;org 1DCCh
.text:00001DCC ; COMDAT (pick any)
.text:00001DCC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001DCC
.text:00001DCC ; =============== S U B R O U T I N E =======================================
.text:00001DCC
.text:00001DCC ; Attributes: bp-based frame
.text:00001DCC
.text:00001DCC ; bool __thiscall NArchive::N7z::CFolderOutStream::WasWritingFinished(NArchive::N7z::CFolderOutStream *__hidden this)
.text:00001DCC                 public ?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ
.text:00001DCC ?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ proc near
.text:00001DCC                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7FCp
.text:00001DCC                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+973p
.text:00001DCC
.text:00001DCC var_4           = dword ptr -4
.text:00001DCC
.text:00001DCC                 push    ebp
.text:00001DCD                 mov     ebp, esp
.text:00001DCF                 push    ecx
.text:00001DD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DD7                 mov     [ebp+var_4], ecx
.text:00001DDA                 mov     eax, [ebp+var_4]
.text:00001DDD                 xor     ecx, ecx
.text:00001DDF                 cmp     dword ptr [eax+24h], 0
.text:00001DE3                 setz    cl
.text:00001DE6                 mov     al, cl
.text:00001DE8                 mov     esp, ebp
.text:00001DEA                 pop     ebp
.text:00001DEB                 retn
.text:00001DEB ?WasWritingFinished@CFolderOutStream@N7z@NArchive@@QBE_NXZ endp
.text:00001DEB
.text:00001DEB _text           ends
.text:00001DEB
.text:00001DEC ; ===========================================================================
.text:00001DEC
.text:00001DEC ; Segment type: Pure code
.text:00001DEC ; Segment permissions: Read/Execute
.text:00001DEC _text           segment para public 'CODE' use32
.text:00001DEC                 assume cs:_text
.text:00001DEC                 ;org 1DECh
.text:00001DEC ; COMDAT (pick any)
.text:00001DEC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001DEC
.text:00001DEC ; =============== S U B R O U T I N E =======================================
.text:00001DEC
.text:00001DEC ; Attributes: bp-based frame
.text:00001DEC
.text:00001DEC ; public: void * __thiscall NArchive::N7z::CFolderOutStream::`scalar deleting destructor'(unsigned int)
.text:00001DEC                 public ??_GCFolderOutStream@N7z@NArchive@@QAEPAXI@Z
.text:00001DEC ??_GCFolderOutStream@N7z@NArchive@@QAEPAXI@Z proc near
.text:00001DEC                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::Release(void)+51p
.text:00001DEC
.text:00001DEC var_4           = dword ptr -4
.text:00001DEC arg_0           = dword ptr  8
.text:00001DEC
.text:00001DEC                 push    ebp
.text:00001DED                 mov     ebp, esp
.text:00001DEF                 push    ecx
.text:00001DF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DF7                 mov     [ebp+var_4], ecx
.text:00001DFA                 mov     ecx, [ebp+var_4] ; this
.text:00001DFD                 call    ??1CFolderOutStream@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderOutStream::~CFolderOutStream(void)
.text:00001E02                 mov     eax, [ebp+arg_0]
.text:00001E05                 and     eax, 1
.text:00001E08                 jz      short loc_1E16
.text:00001E0A                 mov     ecx, [ebp+var_4]
.text:00001E0D                 push    ecx             ; void *
.text:00001E0E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001E13                 add     esp, 4
.text:00001E16
.text:00001E16 loc_1E16:                               ; CODE XREF: NArchive::N7z::CFolderOutStream::`scalar deleting destructor'(uint)+1Cj
.text:00001E16                 mov     eax, [ebp+var_4]
.text:00001E19                 add     esp, 4
.text:00001E1C                 cmp     ebp, esp
.text:00001E1E                 call    __RTC_CheckEsp
.text:00001E23                 mov     esp, ebp
.text:00001E25                 pop     ebp
.text:00001E26                 retn    4
.text:00001E26 ??_GCFolderOutStream@N7z@NArchive@@QAEPAXI@Z endp
.text:00001E26
.text:00001E26 ; ---------------------------------------------------------------------------
.text:00001E29                 align 4
.text:00001E29 _text           ends
.text:00001E29
.text:00001E2C ; ===========================================================================
.text:00001E2C
.text:00001E2C ; Segment type: Pure code
.text:00001E2C ; Segment permissions: Read/Execute
.text:00001E2C _text           segment para public 'CODE' use32
.text:00001E2C                 assume cs:_text
.text:00001E2C                 ;org 1E2Ch
.text:00001E2C ; COMDAT (pick any)
.text:00001E2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001E2C
.text:00001E2C ; =============== S U B R O U T I N E =======================================
.text:00001E2C
.text:00001E2C ; Attributes: bp-based frame
.text:00001E2C
.text:00001E2C ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:00001E2C                 public ??0ISequentialOutStream@@QAE@XZ
.text:00001E2C ??0ISequentialOutStream@@QAE@XZ proc near
.text:00001E2C                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::CFolderOutStream(void)+30p
.text:00001E2C
.text:00001E2C var_4           = dword ptr -4
.text:00001E2C
.text:00001E2C                 push    ebp
.text:00001E2D                 mov     ebp, esp
.text:00001E2F                 push    ecx
.text:00001E30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E37                 mov     [ebp+var_4], ecx
.text:00001E3A                 mov     ecx, [ebp+var_4]
.text:00001E3D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001E42                 mov     eax, [ebp+var_4]
.text:00001E45                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00001E4B                 mov     eax, [ebp+var_4]
.text:00001E4E                 add     esp, 4
.text:00001E51                 cmp     ebp, esp
.text:00001E53                 call    __RTC_CheckEsp
.text:00001E58                 mov     esp, ebp
.text:00001E5A                 pop     ebp
.text:00001E5B                 retn
.text:00001E5B ??0ISequentialOutStream@@QAE@XZ endp
.text:00001E5B
.text:00001E5B _text           ends
.text:00001E5B
.rdata:00001E5C ; ===========================================================================
.rdata:00001E5C
.rdata:00001E5C ; Segment type: Pure data
.rdata:00001E5C ; Segment permissions: Read
.rdata:00001E5C _rdata          segment dword public 'DATA' use32
.rdata:00001E5C                 assume cs:_rdata
.rdata:00001E5C                 ;org 1E5Ch
.rdata:00001E5C ; COMDAT (pick largest)
.rdata:00001E5C                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00001E60                 public ??_7ISequentialOutStream@@6B@
.rdata:00001E60 ; const ISequentialOutStream::`vftable'
.rdata:00001E60 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00001E60                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00001E64                 dd offset __purecall
.rdata:00001E68                 dd offset __purecall
.rdata:00001E6C                 dd offset __purecall
.rdata:00001E6C _rdata          ends
.rdata:00001E6C
.rdata$r:00001E70 ; ===========================================================================
.rdata$r:00001E70
.rdata$r:00001E70 ; Segment type: Pure data
.rdata$r:00001E70 ; Segment permissions: Read
.rdata$r:00001E70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E70                 assume cs:_rdata$r
.rdata$r:00001E70                 ;org 1E70h
.rdata$r:00001E70 ; COMDAT (pick any)
.rdata$r:00001E70                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00001E70 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00001E70 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00001E5Co
.rdata$r:00001E71                 db    0
.rdata$r:00001E72                 db    0
.rdata$r:00001E73                 db    0
.rdata$r:00001E74                 db    0
.rdata$r:00001E75                 db    0
.rdata$r:00001E76                 db    0
.rdata$r:00001E77                 db    0
.rdata$r:00001E78                 db    0
.rdata$r:00001E79                 db    0
.rdata$r:00001E7A                 db    0
.rdata$r:00001E7B                 db    0
.rdata$r:00001E7C                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00001E80                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E80 _rdata$r        ends
.rdata$r:00001E80
.text:00001E84 ; ===========================================================================
.text:00001E84
.text:00001E84 ; Segment type: Pure code
.text:00001E84 ; Segment permissions: Read/Execute
.text:00001E84 _text           segment para public 'CODE' use32
.text:00001E84                 assume cs:_text
.text:00001E84                 ;org 1E84h
.text:00001E84 ; COMDAT (pick any)
.text:00001E84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001E84
.text:00001E84 ; =============== S U B R O U T I N E =======================================
.text:00001E84
.text:00001E84 ; Attributes: bp-based frame
.text:00001E84
.text:00001E84 ; public: __thiscall IUnknown::IUnknown(void)
.text:00001E84                 public ??0IUnknown@@QAE@XZ
.text:00001E84 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialOutStream::ISequentialOutStream(void)+11p
.text:00001E84
.text:00001E84 var_4           = dword ptr -4
.text:00001E84
.text:00001E84                 push    ebp
.text:00001E85                 mov     ebp, esp
.text:00001E87                 push    ecx
.text:00001E88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E8F                 mov     [ebp+var_4], ecx
.text:00001E92                 mov     eax, [ebp+var_4]
.text:00001E95                 mov     esp, ebp
.text:00001E97                 pop     ebp
.text:00001E98                 retn
.text:00001E98 ??0IUnknown@@QAE@XZ endp
.text:00001E98
.text:00001E98 ; ---------------------------------------------------------------------------
.text:00001E99                 align 4
.text:00001E99 _text           ends
.text:00001E99
.text:00001E9C ; ===========================================================================
.text:00001E9C
.text:00001E9C ; Segment type: Pure code
.text:00001E9C ; Segment permissions: Read/Execute
.text:00001E9C _text           segment para public 'CODE' use32
.text:00001E9C                 assume cs:_text
.text:00001E9C                 ;org 1E9Ch
.text:00001E9C ; COMDAT (pick any)
.text:00001E9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001E9C
.text:00001E9C ; =============== S U B R O U T I N E =======================================
.text:00001E9C
.text:00001E9C ; Attributes: bp-based frame
.text:00001E9C
.text:00001E9C ; _DWORD __thiscall NArchive::N7z::CFolderOutStream::~CFolderOutStream(NArchive::N7z::CFolderOutStream *__hidden this)
.text:00001E9C                 public ??1CFolderOutStream@N7z@NArchive@@QAE@XZ
.text:00001E9C ??1CFolderOutStream@N7z@NArchive@@QAE@XZ proc near
.text:00001E9C                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::`scalar deleting destructor'(uint)+11p
.text:00001E9C
.text:00001E9C var_10          = dword ptr -10h
.text:00001E9C var_C           = dword ptr -0Ch
.text:00001E9C var_4           = dword ptr -4
.text:00001E9C
.text:00001E9C                 push    ebp
.text:00001E9D                 mov     ebp, esp
.text:00001E9F                 push    0FFFFFFFFh
.text:00001EA1                 push    offset __ehhandler$??1CFolderOutStream@N7z@NArchive@@QAE@XZ
.text:00001EA6                 mov     eax, large fs:0
.text:00001EAC                 push    eax
.text:00001EAD                 push    ecx
.text:00001EAE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001EB5                 mov     eax, dword ptr ds:___security_cookie
.text:00001EBA                 xor     eax, ebp
.text:00001EBC                 push    eax
.text:00001EBD                 lea     eax, [ebp+var_C]
.text:00001EC0                 mov     large fs:0, eax
.text:00001EC6                 mov     [ebp+var_10], ecx
.text:00001EC9                 mov     [ebp+var_4], 0
.text:00001ED0                 mov     ecx, [ebp+var_10]
.text:00001ED3                 add     ecx, 30h ; '0'
.text:00001ED6                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00001EDB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001EE2                 mov     ecx, [ebp+var_10]
.text:00001EE5                 add     ecx, 8
.text:00001EE8                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001EED                 mov     ecx, [ebp+var_C]
.text:00001EF0                 mov     large fs:0, ecx
.text:00001EF7                 pop     ecx
.text:00001EF8                 add     esp, 10h
.text:00001EFB                 cmp     ebp, esp
.text:00001EFD                 call    __RTC_CheckEsp
.text:00001F02                 mov     esp, ebp
.text:00001F04                 pop     ebp
.text:00001F05                 retn
.text:00001F05 ??1CFolderOutStream@N7z@NArchive@@QAE@XZ endp
.text:00001F05
.text:00001F05 ; ---------------------------------------------------------------------------
.text:00001F06                 align 4
.text:00001F06 _text           ends
.text:00001F06
.text$x:00001F08 ; ===========================================================================
.text$x:00001F08
.text$x:00001F08 ; Segment type: Pure code
.text$x:00001F08 ; Segment permissions: Read/Execute
.text$x:00001F08 _text$x         segment para public 'CODE' use32
.text$x:00001F08                 assume cs:_text$x
.text$x:00001F08                 ;org 1F08h
.text$x:00001F08 ; COMDAT (pick associative to section at 1E9C)
.text$x:00001F08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001F08
.text$x:00001F08 ; =============== S U B R O U T I N E =======================================
.text$x:00001F08
.text$x:00001F08
.text$x:00001F08 __unwindfunclet$??1CFolderOutStream@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00001F08                                         ; DATA XREF: .xdata$x:00001F34o
.text$x:00001F08                 mov     ecx, [ebp-10h]
.text$x:00001F0B                 add     ecx, 8
.text$x:00001F0E                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00001F0E __unwindfunclet$??1CFolderOutStream@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00001F0E
.text$x:00001F13
.text$x:00001F13 ; =============== S U B R O U T I N E =======================================
.text$x:00001F13
.text$x:00001F13
.text$x:00001F13 __ehhandler$??1CFolderOutStream@N7z@NArchive@@QAE@XZ proc near
.text$x:00001F13                                         ; DATA XREF: NArchive::N7z::CFolderOutStream::~CFolderOutStream(void)+5o
.text$x:00001F13
.text$x:00001F13 arg_4           = dword ptr  8
.text$x:00001F13
.text$x:00001F13                 mov     edx, [esp+arg_4]
.text$x:00001F17                 lea     eax, [edx+0Ch]
.text$x:00001F1A                 mov     ecx, [edx-8]
.text$x:00001F1D                 xor     ecx, eax
.text$x:00001F1F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001F24                 mov     eax, offset __ehfuncinfo$??1CFolderOutStream@N7z@NArchive@@QAE@XZ
.text$x:00001F29                 jmp     ___CxxFrameHandler3
.text$x:00001F29 __ehhandler$??1CFolderOutStream@N7z@NArchive@@QAE@XZ endp
.text$x:00001F29
.text$x:00001F29 ; ---------------------------------------------------------------------------
.text$x:00001F2E                 align 10h
.text$x:00001F2E _text$x         ends
.text$x:00001F2E
.xdata$x:00001F30 ; ===========================================================================
.xdata$x:00001F30
.xdata$x:00001F30 ; Segment type: Pure data
.xdata$x:00001F30 ; Segment permissions: Read
.xdata$x:00001F30 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001F30                 assume cs:_xdata$x
.xdata$x:00001F30                 ;org 1F30h
.xdata$x:00001F30 ; COMDAT (pick associative to section at 1E9C)
.xdata$x:00001F30 __unwindtable$??1CFolderOutStream@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00001F30                                         ; DATA XREF: .xdata$x:00001F40o
.xdata$x:00001F31                 db 0FFh
.xdata$x:00001F32                 db 0FFh
.xdata$x:00001F33                 db 0FFh
.xdata$x:00001F34                 dd offset __unwindfunclet$??1CFolderOutStream@N7z@NArchive@@QAE@XZ$0
.xdata$x:00001F38 __ehfuncinfo$??1CFolderOutStream@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00001F38                                         ; DATA XREF: __ehhandler$??1CFolderOutStream@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00001F39                 db    5
.xdata$x:00001F3A                 db  93h ; ô
.xdata$x:00001F3B                 db  19h
.xdata$x:00001F3C                 db    1
.xdata$x:00001F3D                 db    0
.xdata$x:00001F3E                 db    0
.xdata$x:00001F3F                 db    0
.xdata$x:00001F40                 dd offset __unwindtable$??1CFolderOutStream@N7z@NArchive@@QAE@XZ
.xdata$x:00001F44                 db    0
.xdata$x:00001F45                 db    0
.xdata$x:00001F46                 db    0
.xdata$x:00001F47                 db    0
.xdata$x:00001F48                 db    0
.xdata$x:00001F49                 db    0
.xdata$x:00001F4A                 db    0
.xdata$x:00001F4B                 db    0
.xdata$x:00001F4C                 db    0
.xdata$x:00001F4D                 db    0
.xdata$x:00001F4E                 db    0
.xdata$x:00001F4F                 db    0
.xdata$x:00001F50                 db    0
.xdata$x:00001F51                 db    0
.xdata$x:00001F52                 db    0
.xdata$x:00001F53                 db    0
.xdata$x:00001F54                 db    0
.xdata$x:00001F55                 db    0
.xdata$x:00001F56                 db    0
.xdata$x:00001F57                 db    0
.xdata$x:00001F58                 db    1
.xdata$x:00001F59                 db    0
.xdata$x:00001F5A                 db    0
.xdata$x:00001F5B                 db    0
.xdata$x:00001F5B _xdata$x        ends
.xdata$x:00001F5B
.text:00001F5C ; ===========================================================================
.text:00001F5C
.text:00001F5C ; Segment type: Pure code
.text:00001F5C ; Segment permissions: Read/Execute
.text:00001F5C _text           segment para public 'CODE' use32
.text:00001F5C                 assume cs:_text
.text:00001F5C                 ;org 1F5Ch
.text:00001F5C ; COMDAT (pick any)
.text:00001F5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001F5C
.text:00001F5C ; =============== S U B R O U T I N E =======================================
.text:00001F5C
.text:00001F5C ; Attributes: bp-based frame
.text:00001F5C
.text:00001F5C ; _DWORD __thiscall NArchive::N7z::CDecoder::~CDecoder(NArchive::N7z::CDecoder *__hidden this)
.text:00001F5C                 public ??1CDecoder@N7z@NArchive@@QAE@XZ
.text:00001F5C ??1CDecoder@N7z@NArchive@@QAE@XZ proc near
.text:00001F5C                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4A7p
.text:00001F5C                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7CEp ...
.text:00001F5C
.text:00001F5C var_10          = dword ptr -10h
.text:00001F5C var_C           = dword ptr -0Ch
.text:00001F5C var_4           = dword ptr -4
.text:00001F5C
.text:00001F5C                 push    ebp
.text:00001F5D                 mov     ebp, esp
.text:00001F5F                 push    0FFFFFFFFh
.text:00001F61                 push    offset __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ
.text:00001F66                 mov     eax, large fs:0
.text:00001F6C                 push    eax
.text:00001F6D                 push    ecx
.text:00001F6E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001F75                 mov     eax, dword ptr ds:___security_cookie
.text:00001F7A                 xor     eax, ebp
.text:00001F7C                 push    eax
.text:00001F7D                 lea     eax, [ebp+var_C]
.text:00001F80                 mov     large fs:0, eax
.text:00001F86                 mov     [ebp+var_10], ecx
.text:00001F89                 mov     [ebp+var_4], 0
.text:00001F90                 mov     ecx, [ebp+var_10]
.text:00001F93                 add     ecx, 60h ; '`'
.text:00001F96                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00001F9B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001FA2                 mov     ecx, [ebp+var_10]
.text:00001FA5                 add     ecx, 4          ; this
.text:00001FA8                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00001FAD                 mov     ecx, [ebp+var_C]
.text:00001FB0                 mov     large fs:0, ecx
.text:00001FB7                 pop     ecx
.text:00001FB8                 add     esp, 10h
.text:00001FBB                 cmp     ebp, esp
.text:00001FBD                 call    __RTC_CheckEsp
.text:00001FC2                 mov     esp, ebp
.text:00001FC4                 pop     ebp
.text:00001FC5                 retn
.text:00001FC5 ??1CDecoder@N7z@NArchive@@QAE@XZ endp
.text:00001FC5
.text:00001FC5 ; ---------------------------------------------------------------------------
.text:00001FC6                 align 4
.text:00001FC6 _text           ends
.text:00001FC6
.text$x:00001FC8 ; ===========================================================================
.text$x:00001FC8
.text$x:00001FC8 ; Segment type: Pure code
.text$x:00001FC8 ; Segment permissions: Read/Execute
.text$x:00001FC8 _text$x         segment para public 'CODE' use32
.text$x:00001FC8                 assume cs:_text$x
.text$x:00001FC8                 ;org 1FC8h
.text$x:00001FC8 ; COMDAT (pick associative to section at 1F5C)
.text$x:00001FC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001FC8
.text$x:00001FC8 ; =============== S U B R O U T I N E =======================================
.text$x:00001FC8
.text$x:00001FC8
.text$x:00001FC8 __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00001FC8                                         ; DATA XREF: .xdata$x:00001FF4o
.text$x:00001FC8                 mov     ecx, [ebp-10h]
.text$x:00001FCB                 add     ecx, 4          ; this
.text$x:00001FCE                 jmp     ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text$x:00001FCE __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00001FCE
.text$x:00001FD3
.text$x:00001FD3 ; =============== S U B R O U T I N E =======================================
.text$x:00001FD3
.text$x:00001FD3
.text$x:00001FD3 __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ proc near
.text$x:00001FD3                                         ; DATA XREF: NArchive::N7z::CDecoder::~CDecoder(void)+5o
.text$x:00001FD3
.text$x:00001FD3 arg_4           = dword ptr  8
.text$x:00001FD3
.text$x:00001FD3                 mov     edx, [esp+arg_4]
.text$x:00001FD7                 lea     eax, [edx+0Ch]
.text$x:00001FDA                 mov     ecx, [edx-8]
.text$x:00001FDD                 xor     ecx, eax
.text$x:00001FDF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001FE4                 mov     eax, offset __ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ
.text$x:00001FE9                 jmp     ___CxxFrameHandler3
.text$x:00001FE9 __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ endp
.text$x:00001FE9
.text$x:00001FE9 ; ---------------------------------------------------------------------------
.text$x:00001FEE                 align 10h
.text$x:00001FEE _text$x         ends
.text$x:00001FEE
.xdata$x:00001FF0 ; ===========================================================================
.xdata$x:00001FF0
.xdata$x:00001FF0 ; Segment type: Pure data
.xdata$x:00001FF0 ; Segment permissions: Read
.xdata$x:00001FF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001FF0                 assume cs:_xdata$x
.xdata$x:00001FF0                 ;org 1FF0h
.xdata$x:00001FF0 ; COMDAT (pick associative to section at 1F5C)
.xdata$x:00001FF0 __unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00001FF0                                         ; DATA XREF: .xdata$x:00002000o
.xdata$x:00001FF1                 db 0FFh
.xdata$x:00001FF2                 db 0FFh
.xdata$x:00001FF3                 db 0FFh
.xdata$x:00001FF4                 dd offset __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0
.xdata$x:00001FF8 __ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00001FF8                                         ; DATA XREF: __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00001FF9                 db    5
.xdata$x:00001FFA                 db  93h ; ô
.xdata$x:00001FFB                 db  19h
.xdata$x:00001FFC                 db    1
.xdata$x:00001FFD                 db    0
.xdata$x:00001FFE                 db    0
.xdata$x:00001FFF                 db    0
.xdata$x:00002000                 dd offset __unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ
.xdata$x:00002004                 db    0
.xdata$x:00002005                 db    0
.xdata$x:00002006                 db    0
.xdata$x:00002007                 db    0
.xdata$x:00002008                 db    0
.xdata$x:00002009                 db    0
.xdata$x:0000200A                 db    0
.xdata$x:0000200B                 db    0
.xdata$x:0000200C                 db    0
.xdata$x:0000200D                 db    0
.xdata$x:0000200E                 db    0
.xdata$x:0000200F                 db    0
.xdata$x:00002010                 db    0
.xdata$x:00002011                 db    0
.xdata$x:00002012                 db    0
.xdata$x:00002013                 db    0
.xdata$x:00002014                 db    0
.xdata$x:00002015                 db    0
.xdata$x:00002016                 db    0
.xdata$x:00002017                 db    0
.xdata$x:00002018                 db    1
.xdata$x:00002019                 db    0
.xdata$x:0000201A                 db    0
.xdata$x:0000201B                 db    0
.xdata$x:0000201B _xdata$x        ends
.xdata$x:0000201B
.text:0000201C ; ===========================================================================
.text:0000201C
.text:0000201C ; Segment type: Pure code
.text:0000201C ; Segment permissions: Read/Execute
.text:0000201C _text           segment para public 'CODE' use32
.text:0000201C                 assume cs:_text
.text:0000201C                 ;org 201Ch
.text:0000201C ; COMDAT (pick any)
.text:0000201C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000201C
.text:0000201C ; =============== S U B R O U T I N E =======================================
.text:0000201C
.text:0000201C ; Attributes: bp-based frame
.text:0000201C
.text:0000201C ; _DWORD __thiscall NArchive::N7z::CBindInfoEx::~CBindInfoEx(NArchive::N7z::CBindInfoEx *__hidden this)
.text:0000201C                 public ??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:0000201C ??1CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text:0000201C                                         ; CODE XREF: NArchive::N7z::CDecoder::~CDecoder(void)+4Cp
.text:0000201C                                         ; __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0+6j
.text:0000201C
.text:0000201C var_10          = dword ptr -10h
.text:0000201C var_C           = dword ptr -0Ch
.text:0000201C var_4           = dword ptr -4
.text:0000201C
.text:0000201C                 push    ebp
.text:0000201D                 mov     ebp, esp
.text:0000201F                 push    0FFFFFFFFh
.text:00002021                 push    offset __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:00002026                 mov     eax, large fs:0
.text:0000202C                 push    eax
.text:0000202D                 push    ecx
.text:0000202E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002035                 mov     eax, dword ptr ds:___security_cookie
.text:0000203A                 xor     eax, ebp
.text:0000203C                 push    eax
.text:0000203D                 lea     eax, [ebp+var_C]
.text:00002040                 mov     large fs:0, eax
.text:00002046                 mov     [ebp+var_10], ecx
.text:00002049                 mov     [ebp+var_4], 0
.text:00002050                 mov     ecx, [ebp+var_10]
.text:00002053                 add     ecx, 40h ; '@'
.text:00002056                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000205B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002062                 mov     ecx, [ebp+var_10] ; this
.text:00002065                 call    ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text:0000206A                 mov     ecx, [ebp+var_C]
.text:0000206D                 mov     large fs:0, ecx
.text:00002074                 pop     ecx
.text:00002075                 add     esp, 10h
.text:00002078                 cmp     ebp, esp
.text:0000207A                 call    __RTC_CheckEsp
.text:0000207F                 mov     esp, ebp
.text:00002081                 pop     ebp
.text:00002082                 retn
.text:00002082 ??1CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text:00002082
.text:00002082 ; ---------------------------------------------------------------------------
.text:00002083                 align 4
.text:00002083 _text           ends
.text:00002083
.text$x:00002084 ; ===========================================================================
.text$x:00002084
.text$x:00002084 ; Segment type: Pure code
.text$x:00002084 ; Segment permissions: Read/Execute
.text$x:00002084 _text$x         segment para public 'CODE' use32
.text$x:00002084                 assume cs:_text$x
.text$x:00002084                 ;org 2084h
.text$x:00002084 ; COMDAT (pick associative to section at 201C)
.text$x:00002084                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002084
.text$x:00002084 ; =============== S U B R O U T I N E =======================================
.text$x:00002084
.text$x:00002084
.text$x:00002084 __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00002084                                         ; DATA XREF: .xdata$x:000020ACo
.text$x:00002084                 mov     ecx, [ebp-10h]  ; this
.text$x:00002087                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:00002087 __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00002087
.text$x:0000208C
.text$x:0000208C ; =============== S U B R O U T I N E =======================================
.text$x:0000208C
.text$x:0000208C
.text$x:0000208C __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text$x:0000208C                                         ; DATA XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+5o
.text$x:0000208C
.text$x:0000208C arg_4           = dword ptr  8
.text$x:0000208C
.text$x:0000208C                 mov     edx, [esp+arg_4]
.text$x:00002090                 lea     eax, [edx+0Ch]
.text$x:00002093                 mov     ecx, [edx-8]
.text$x:00002096                 xor     ecx, eax
.text$x:00002098                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000209D                 mov     eax, offset __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text$x:000020A2                 jmp     ___CxxFrameHandler3
.text$x:000020A2 __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text$x:000020A2
.text$x:000020A2 ; ---------------------------------------------------------------------------
.text$x:000020A7                 align 4
.text$x:000020A7 _text$x         ends
.text$x:000020A7
.xdata$x:000020A8 ; ===========================================================================
.xdata$x:000020A8
.xdata$x:000020A8 ; Segment type: Pure data
.xdata$x:000020A8 ; Segment permissions: Read
.xdata$x:000020A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000020A8                 assume cs:_xdata$x
.xdata$x:000020A8                 ;org 20A8h
.xdata$x:000020A8 ; COMDAT (pick associative to section at 201C)
.xdata$x:000020A8 __unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000020A8                                         ; DATA XREF: .xdata$x:000020B8o
.xdata$x:000020A9                 db 0FFh
.xdata$x:000020AA                 db 0FFh
.xdata$x:000020AB                 db 0FFh
.xdata$x:000020AC                 dd offset __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0
.xdata$x:000020B0 __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000020B0                                         ; DATA XREF: __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ+11o
.xdata$x:000020B1                 db    5
.xdata$x:000020B2                 db  93h ; ô
.xdata$x:000020B3                 db  19h
.xdata$x:000020B4                 db    1
.xdata$x:000020B5                 db    0
.xdata$x:000020B6                 db    0
.xdata$x:000020B7                 db    0
.xdata$x:000020B8                 dd offset __unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.xdata$x:000020BC                 db    0
.xdata$x:000020BD                 db    0
.xdata$x:000020BE                 db    0
.xdata$x:000020BF                 db    0
.xdata$x:000020C0                 db    0
.xdata$x:000020C1                 db    0
.xdata$x:000020C2                 db    0
.xdata$x:000020C3                 db    0
.xdata$x:000020C4                 db    0
.xdata$x:000020C5                 db    0
.xdata$x:000020C6                 db    0
.xdata$x:000020C7                 db    0
.xdata$x:000020C8                 db    0
.xdata$x:000020C9                 db    0
.xdata$x:000020CA                 db    0
.xdata$x:000020CB                 db    0
.xdata$x:000020CC                 db    0
.xdata$x:000020CD                 db    0
.xdata$x:000020CE                 db    0
.xdata$x:000020CF                 db    0
.xdata$x:000020D0                 db    1
.xdata$x:000020D1                 db    0
.xdata$x:000020D2                 db    0
.xdata$x:000020D3                 db    0
.xdata$x:000020D3 _xdata$x        ends
.xdata$x:000020D3
.text:000020D4 ; ===========================================================================
.text:000020D4
.text:000020D4 ; Segment type: Pure code
.text:000020D4 ; Segment permissions: Read/Execute
.text:000020D4 _text           segment para public 'CODE' use32
.text:000020D4                 assume cs:_text
.text:000020D4                 ;org 20D4h
.text:000020D4 ; COMDAT (pick any)
.text:000020D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000020D4
.text:000020D4 ; =============== S U B R O U T I N E =======================================
.text:000020D4
.text:000020D4 ; Attributes: bp-based frame
.text:000020D4
.text:000020D4 ; _DWORD __thiscall NCoderMixer2::CBindInfo::~CBindInfo(NCoderMixer2::CBindInfo *__hidden this)
.text:000020D4                 public ??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:000020D4 ??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text:000020D4                                         ; CODE XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+49p
.text:000020D4                                         ; __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0+3j
.text:000020D4
.text:000020D4 var_10          = dword ptr -10h
.text:000020D4 var_C           = dword ptr -0Ch
.text:000020D4 var_4           = dword ptr -4
.text:000020D4
.text:000020D4                 push    ebp
.text:000020D5                 mov     ebp, esp
.text:000020D7                 push    0FFFFFFFFh
.text:000020D9                 push    offset __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:000020DE                 mov     eax, large fs:0
.text:000020E4                 push    eax
.text:000020E5                 push    ecx
.text:000020E6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000020ED                 mov     eax, dword ptr ds:___security_cookie
.text:000020F2                 xor     eax, ebp
.text:000020F4                 push    eax
.text:000020F5                 lea     eax, [ebp+var_C]
.text:000020F8                 mov     large fs:0, eax
.text:000020FE                 mov     [ebp+var_10], ecx
.text:00002101                 mov     [ebp+var_4], 3
.text:00002108                 mov     ecx, [ebp+var_10]
.text:0000210B                 add     ecx, 34h ; '4'
.text:0000210E                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002113                 mov     byte ptr [ebp+var_4], 2
.text:00002117                 mov     ecx, [ebp+var_10]
.text:0000211A                 add     ecx, 28h ; '('
.text:0000211D                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002122                 mov     byte ptr [ebp+var_4], 1
.text:00002126                 mov     ecx, [ebp+var_10]
.text:00002129                 add     ecx, 18h
.text:0000212C                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002131                 mov     byte ptr [ebp+var_4], 0
.text:00002135                 mov     ecx, [ebp+var_10]
.text:00002138                 add     ecx, 0Ch
.text:0000213B                 call    ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text:00002140                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002147                 mov     ecx, [ebp+var_10]
.text:0000214A                 call    ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text:0000214F                 mov     ecx, [ebp+var_C]
.text:00002152                 mov     large fs:0, ecx
.text:00002159                 pop     ecx
.text:0000215A                 add     esp, 10h
.text:0000215D                 cmp     ebp, esp
.text:0000215F                 call    __RTC_CheckEsp
.text:00002164                 mov     esp, ebp
.text:00002166                 pop     ebp
.text:00002167                 retn
.text:00002167 ??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text:00002167
.text:00002167 _text           ends
.text:00002167
.text$x:00002168 ; ===========================================================================
.text$x:00002168
.text$x:00002168 ; Segment type: Pure code
.text$x:00002168 ; Segment permissions: Read/Execute
.text$x:00002168 _text$x         segment para public 'CODE' use32
.text$x:00002168                 assume cs:_text$x
.text$x:00002168                 ;org 2168h
.text$x:00002168 ; COMDAT (pick associative to section at 20D4)
.text$x:00002168                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002168
.text$x:00002168 ; =============== S U B R O U T I N E =======================================
.text$x:00002168
.text$x:00002168
.text$x:00002168 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00002168                                         ; DATA XREF: .xdata$x:000021B0o
.text$x:00002168                 mov     ecx, [ebp-10h]
.text$x:0000216B                 jmp     ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text$x:0000216B __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 endp
.text$x:0000216B
.text$x:00002170
.text$x:00002170 ; =============== S U B R O U T I N E =======================================
.text$x:00002170
.text$x:00002170
.text$x:00002170 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00002170                                         ; DATA XREF: .xdata$x:000021B8o
.text$x:00002170                 mov     ecx, [ebp-10h]
.text$x:00002173                 add     ecx, 0Ch
.text$x:00002176                 jmp     ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text$x:00002176 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00002176
.text$x:0000217B
.text$x:0000217B ; =============== S U B R O U T I N E =======================================
.text$x:0000217B
.text$x:0000217B
.text$x:0000217B __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:0000217B                                         ; DATA XREF: .xdata$x:000021C0o
.text$x:0000217B                 mov     ecx, [ebp-10h]
.text$x:0000217E                 add     ecx, 18h
.text$x:00002181                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00002181 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00002181
.text$x:00002186
.text$x:00002186 ; =============== S U B R O U T I N E =======================================
.text$x:00002186
.text$x:00002186
.text$x:00002186 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:00002186                                         ; DATA XREF: .xdata$x:000021C8o
.text$x:00002186                 mov     ecx, [ebp-10h]
.text$x:00002189                 add     ecx, 28h ; '('
.text$x:0000218C                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000218C __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 endp
.text$x:0000218C
.text$x:00002191
.text$x:00002191 ; =============== S U B R O U T I N E =======================================
.text$x:00002191
.text$x:00002191
.text$x:00002191 __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text$x:00002191                                         ; DATA XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+5o
.text$x:00002191
.text$x:00002191 arg_4           = dword ptr  8
.text$x:00002191
.text$x:00002191                 mov     edx, [esp+arg_4]
.text$x:00002195                 lea     eax, [edx+0Ch]
.text$x:00002198                 mov     ecx, [edx-8]
.text$x:0000219B                 xor     ecx, eax
.text$x:0000219D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000021A2                 mov     eax, offset __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text$x:000021A7                 jmp     ___CxxFrameHandler3
.text$x:000021A7 __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text$x:000021A7
.text$x:000021A7 _text$x         ends
.text$x:000021A7
.xdata$x:000021AC ; ===========================================================================
.xdata$x:000021AC
.xdata$x:000021AC ; Segment type: Pure data
.xdata$x:000021AC ; Segment permissions: Read
.xdata$x:000021AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000021AC                 assume cs:_xdata$x
.xdata$x:000021AC                 ;org 21ACh
.xdata$x:000021AC ; COMDAT (pick associative to section at 20D4)
.xdata$x:000021AC __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:000021AC                                         ; DATA XREF: .xdata$x:000021D4o
.xdata$x:000021AD                 db 0FFh
.xdata$x:000021AE                 db 0FFh
.xdata$x:000021AF                 db 0FFh
.xdata$x:000021B0                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
.xdata$x:000021B4                 align 8
.xdata$x:000021B8                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
.xdata$x:000021BC                 db    1
.xdata$x:000021BD                 db    0
.xdata$x:000021BE                 db    0
.xdata$x:000021BF                 db    0
.xdata$x:000021C0                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
.xdata$x:000021C4                 db    2
.xdata$x:000021C5                 db    0
.xdata$x:000021C6                 db    0
.xdata$x:000021C7                 db    0
.xdata$x:000021C8                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
.xdata$x:000021CC __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:000021CC                                         ; DATA XREF: __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ+11o
.xdata$x:000021CD                 db    5
.xdata$x:000021CE                 db  93h ; ô
.xdata$x:000021CF                 db  19h
.xdata$x:000021D0                 db    4
.xdata$x:000021D1                 db    0
.xdata$x:000021D2                 db    0
.xdata$x:000021D3                 db    0
.xdata$x:000021D4                 dd offset __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
.xdata$x:000021D8                 db    0
.xdata$x:000021D9                 db    0
.xdata$x:000021DA                 db    0
.xdata$x:000021DB                 db    0
.xdata$x:000021DC                 db    0
.xdata$x:000021DD                 db    0
.xdata$x:000021DE                 db    0
.xdata$x:000021DF                 db    0
.xdata$x:000021E0                 db    0
.xdata$x:000021E1                 db    0
.xdata$x:000021E2                 db    0
.xdata$x:000021E3                 db    0
.xdata$x:000021E4                 db    0
.xdata$x:000021E5                 db    0
.xdata$x:000021E6                 db    0
.xdata$x:000021E7                 db    0
.xdata$x:000021E8                 db    0
.xdata$x:000021E9                 db    0
.xdata$x:000021EA                 db    0
.xdata$x:000021EB                 db    0
.xdata$x:000021EC                 db    1
.xdata$x:000021ED                 db    0
.xdata$x:000021EE                 db    0
.xdata$x:000021EF                 db    0
.xdata$x:000021EF _xdata$x        ends
.xdata$x:000021EF
.text:000021F0 ; ===========================================================================
.text:000021F0
.text:000021F0 ; Segment type: Pure code
.text:000021F0 ; Segment permissions: Read/Execute
.text:000021F0 _text           segment para public 'CODE' use32
.text:000021F0                 assume cs:_text
.text:000021F0                 ;org 21F0h
.text:000021F0 ; COMDAT (pick any)
.text:000021F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000021F0
.text:000021F0 ; =============== S U B R O U T I N E =======================================
.text:000021F0
.text:000021F0 ; Attributes: bp-based frame
.text:000021F0
.text:000021F0 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:000021F0                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:000021F0 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:000021F0                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2B7p
.text:000021F0
.text:000021F0 var_4           = dword ptr -4
.text:000021F0 arg_0           = dword ptr  8
.text:000021F0
.text:000021F0                 push    ebp
.text:000021F1                 mov     ebp, esp
.text:000021F3                 push    ecx
.text:000021F4                 push    esi
.text:000021F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021FC                 mov     [ebp+var_4], ecx
.text:000021FF                 mov     eax, [ebp+var_4]
.text:00002202                 mov     ecx, [ebp+arg_0]
.text:00002205                 mov     [eax], ecx
.text:00002207                 cmp     [ebp+arg_0], 0
.text:0000220B                 jz      short loc_2224
.text:0000220D                 mov     edx, [ebp+arg_0]
.text:00002210                 mov     eax, [edx]
.text:00002212                 mov     esi, esp
.text:00002214                 mov     ecx, [ebp+arg_0]
.text:00002217                 push    ecx
.text:00002218                 mov     edx, [eax+4]
.text:0000221B                 call    edx
.text:0000221D                 cmp     esi, esp
.text:0000221F                 call    __RTC_CheckEsp
.text:00002224
.text:00002224 loc_2224:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00002224                 mov     eax, [ebp+var_4]
.text:00002227                 pop     esi
.text:00002228                 add     esp, 4
.text:0000222B                 cmp     ebp, esp
.text:0000222D                 call    __RTC_CheckEsp
.text:00002232                 mov     esp, ebp
.text:00002234                 pop     ebp
.text:00002235                 retn    4
.text:00002235 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00002235
.text:00002235 _text           ends
.text:00002235
.text:00002238 ; ===========================================================================
.text:00002238
.text:00002238 ; Segment type: Pure code
.text:00002238 ; Segment permissions: Read/Execute
.text:00002238 _text           segment para public 'CODE' use32
.text:00002238                 assume cs:_text
.text:00002238                 ;org 2238h
.text:00002238 ; COMDAT (pick any)
.text:00002238                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002238
.text:00002238 ; =============== S U B R O U T I N E =======================================
.text:00002238
.text:00002238 ; Attributes: bp-based frame
.text:00002238
.text:00002238 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:00002238                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00002238 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00002238                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4B3p
.text:00002238                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7DAp ...
.text:00002238
.text:00002238 var_4           = dword ptr -4
.text:00002238
.text:00002238                 push    ebp
.text:00002239                 mov     ebp, esp
.text:0000223B                 push    ecx
.text:0000223C                 push    esi
.text:0000223D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002244                 mov     [ebp+var_4], ecx
.text:00002247                 mov     eax, [ebp+var_4]
.text:0000224A                 cmp     dword ptr [eax], 0
.text:0000224D                 jz      short loc_226A
.text:0000224F                 mov     ecx, [ebp+var_4]
.text:00002252                 mov     edx, [ecx]
.text:00002254                 mov     eax, [ebp+var_4]
.text:00002257                 mov     ecx, [eax]
.text:00002259                 mov     edx, [edx]
.text:0000225B                 mov     esi, esp
.text:0000225D                 push    ecx
.text:0000225E                 mov     eax, [edx+8]
.text:00002261                 call    eax
.text:00002263                 cmp     esi, esp
.text:00002265                 call    __RTC_CheckEsp
.text:0000226A
.text:0000226A loc_226A:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:0000226A                 pop     esi
.text:0000226B                 add     esp, 4
.text:0000226E                 cmp     ebp, esp
.text:00002270                 call    __RTC_CheckEsp
.text:00002275                 mov     esp, ebp
.text:00002277                 pop     ebp
.text:00002278                 retn
.text:00002278 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00002278
.text:00002278 ; ---------------------------------------------------------------------------
.text:00002279                 align 4
.text:00002279 _text           ends
.text:00002279
.text:0000227C ; ===========================================================================
.text:0000227C
.text:0000227C ; Segment type: Pure code
.text:0000227C ; Segment permissions: Read/Execute
.text:0000227C _text           segment para public 'CODE' use32
.text:0000227C                 assume cs:_text
.text:0000227C                 ;org 227Ch
.text:0000227C ; COMDAT (pick any)
.text:0000227C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000227C
.text:0000227C ; =============== S U B R O U T I N E =======================================
.text:0000227C
.text:0000227C ; Attributes: bp-based frame
.text:0000227C
.text:0000227C ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:0000227C                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:0000227C ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:0000227C                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8A3p
.text:0000227C
.text:0000227C var_4           = dword ptr -4
.text:0000227C
.text:0000227C                 push    ebp
.text:0000227D                 mov     ebp, esp
.text:0000227F                 push    ecx
.text:00002280                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002287                 mov     [ebp+var_4], ecx
.text:0000228A                 mov     eax, [ebp+var_4]
.text:0000228D                 mov     eax, [eax]
.text:0000228F                 mov     esp, ebp
.text:00002291                 pop     ebp
.text:00002292                 retn
.text:00002292 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:00002292
.text:00002292 ; ---------------------------------------------------------------------------
.text:00002293                 align 4
.text:00002293 _text           ends
.text:00002293
.text:00002294 ; ===========================================================================
.text:00002294
.text:00002294 ; Segment type: Pure code
.text:00002294 ; Segment permissions: Read/Execute
.text:00002294 _text           segment para public 'CODE' use32
.text:00002294                 assume cs:_text
.text:00002294                 ;org 2294h
.text:00002294 ; COMDAT (pick any)
.text:00002294                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002294
.text:00002294 ; =============== S U B R O U T I N E =======================================
.text:00002294
.text:00002294 ; Attributes: bp-based frame
.text:00002294
.text:00002294 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00002294                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00002294 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00002294                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+DEp
.text:00002294                                         ; NArchive::N7z::CFolderOutStream::CFolderOutStream(void)+4Fp
.text:00002294
.text:00002294 var_4           = dword ptr -4
.text:00002294
.text:00002294                 push    ebp
.text:00002295                 mov     ebp, esp
.text:00002297                 push    ecx
.text:00002298                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000229F                 mov     [ebp+var_4], ecx
.text:000022A2                 mov     eax, [ebp+var_4]
.text:000022A5                 mov     dword ptr [eax], 0
.text:000022AB                 mov     eax, [ebp+var_4]
.text:000022AE                 mov     esp, ebp
.text:000022B0                 pop     ebp
.text:000022B1                 retn
.text:000022B1 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000022B1
.text:000022B1 ; ---------------------------------------------------------------------------
.text:000022B2                 align 4
.text:000022B2 _text           ends
.text:000022B2
.text:000022B4 ; ===========================================================================
.text:000022B4
.text:000022B4 ; Segment type: Pure code
.text:000022B4 ; Segment permissions: Read/Execute
.text:000022B4 _text           segment para public 'CODE' use32
.text:000022B4                 assume cs:_text
.text:000022B4                 ;org 22B4h
.text:000022B4 ; COMDAT (pick any)
.text:000022B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000022B4
.text:000022B4 ; =============== S U B R O U T I N E =======================================
.text:000022B4
.text:000022B4 ; Attributes: bp-based frame
.text:000022B4
.text:000022B4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:000022B4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:000022B4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:000022B4                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3B4p
.text:000022B4
.text:000022B4 var_4           = dword ptr -4
.text:000022B4 arg_0           = dword ptr  8
.text:000022B4
.text:000022B4                 push    ebp
.text:000022B5                 mov     ebp, esp
.text:000022B7                 push    ecx
.text:000022B8                 push    esi
.text:000022B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022C0                 mov     [ebp+var_4], ecx
.text:000022C3                 mov     eax, [ebp+var_4]
.text:000022C6                 mov     ecx, [ebp+arg_0]
.text:000022C9                 mov     [eax], ecx
.text:000022CB                 cmp     [ebp+arg_0], 0
.text:000022CF                 jz      short loc_22E8
.text:000022D1                 mov     edx, [ebp+arg_0]
.text:000022D4                 mov     eax, [edx]
.text:000022D6                 mov     esi, esp
.text:000022D8                 mov     ecx, [ebp+arg_0]
.text:000022DB                 push    ecx
.text:000022DC                 mov     edx, [eax+4]
.text:000022DF                 call    edx
.text:000022E1                 cmp     esi, esp
.text:000022E3                 call    __RTC_CheckEsp
.text:000022E8
.text:000022E8 loc_22E8:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000022E8                 mov     eax, [ebp+var_4]
.text:000022EB                 pop     esi
.text:000022EC                 add     esp, 4
.text:000022EF                 cmp     ebp, esp
.text:000022F1                 call    __RTC_CheckEsp
.text:000022F6                 mov     esp, ebp
.text:000022F8                 pop     ebp
.text:000022F9                 retn    4
.text:000022F9 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:000022F9
.text:000022F9 _text           ends
.text:000022F9
.text:000022FC ; ===========================================================================
.text:000022FC
.text:000022FC ; Segment type: Pure code
.text:000022FC ; Segment permissions: Read/Execute
.text:000022FC _text           segment para public 'CODE' use32
.text:000022FC                 assume cs:_text
.text:000022FC                 ;org 22FCh
.text:000022FC ; COMDAT (pick any)
.text:000022FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000022FC
.text:000022FC ; =============== S U B R O U T I N E =======================================
.text:000022FC
.text:000022FC ; Attributes: bp-based frame
.text:000022FC
.text:000022FC ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000022FC                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000022FC ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000022FC                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+13Cp
.text:000022FC                                         ; NArchive::N7z::CFolderOutStream::OpenFile(bool)+22Ap ...
.text:000022FC
.text:000022FC var_4           = dword ptr -4
.text:000022FC
.text:000022FC                 push    ebp
.text:000022FD                 mov     ebp, esp
.text:000022FF                 push    ecx
.text:00002300                 push    esi
.text:00002301                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002308                 mov     [ebp+var_4], ecx
.text:0000230B                 mov     eax, [ebp+var_4]
.text:0000230E                 cmp     dword ptr [eax], 0
.text:00002311                 jz      short loc_232E
.text:00002313                 mov     ecx, [ebp+var_4]
.text:00002316                 mov     edx, [ecx]
.text:00002318                 mov     eax, [ebp+var_4]
.text:0000231B                 mov     ecx, [eax]
.text:0000231D                 mov     edx, [edx]
.text:0000231F                 mov     esi, esp
.text:00002321                 push    ecx
.text:00002322                 mov     eax, [edx+8]
.text:00002325                 call    eax
.text:00002327                 cmp     esi, esp
.text:00002329                 call    __RTC_CheckEsp
.text:0000232E
.text:0000232E loc_232E:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:0000232E                 pop     esi
.text:0000232F                 add     esp, 4
.text:00002332                 cmp     ebp, esp
.text:00002334                 call    __RTC_CheckEsp
.text:00002339                 mov     esp, ebp
.text:0000233B                 pop     ebp
.text:0000233C                 retn
.text:0000233C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:0000233C
.text:0000233C ; ---------------------------------------------------------------------------
.text:0000233D                 align 10h
.text:0000233D _text           ends
.text:0000233D
.text:00002340 ; ===========================================================================
.text:00002340
.text:00002340 ; Segment type: Pure code
.text:00002340 ; Segment permissions: Read/Execute
.text:00002340 _text           segment para public 'CODE' use32
.text:00002340                 assume cs:_text
.text:00002340                 ;org 2340h
.text:00002340 ; COMDAT (pick any)
.text:00002340                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002340
.text:00002340 ; =============== S U B R O U T I N E =======================================
.text:00002340
.text:00002340 ; Attributes: bp-based frame
.text:00002340
.text:00002340 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:00002340                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:00002340 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:00002340                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::CloseFile_and_SetResult(int)+1Ep
.text:00002340
.text:00002340 var_4           = dword ptr -4
.text:00002340
.text:00002340                 push    ebp
.text:00002341                 mov     ebp, esp
.text:00002343                 push    ecx
.text:00002344                 push    esi
.text:00002345                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000234C                 mov     [ebp+var_4], ecx
.text:0000234F                 mov     eax, [ebp+var_4]
.text:00002352                 cmp     dword ptr [eax], 0
.text:00002355                 jz      short loc_237B
.text:00002357                 mov     ecx, [ebp+var_4]
.text:0000235A                 mov     edx, [ecx]
.text:0000235C                 mov     eax, [ebp+var_4]
.text:0000235F                 mov     ecx, [eax]
.text:00002361                 mov     edx, [edx]
.text:00002363                 mov     esi, esp
.text:00002365                 push    ecx
.text:00002366                 mov     eax, [edx+8]
.text:00002369                 call    eax
.text:0000236B                 cmp     esi, esp
.text:0000236D                 call    __RTC_CheckEsp
.text:00002372                 mov     ecx, [ebp+var_4]
.text:00002375                 mov     dword ptr [ecx], 0
.text:0000237B
.text:0000237B loc_237B:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:0000237B                 pop     esi
.text:0000237C                 add     esp, 4
.text:0000237F                 cmp     ebp, esp
.text:00002381                 call    __RTC_CheckEsp
.text:00002386                 mov     esp, ebp
.text:00002388                 pop     ebp
.text:00002389                 retn
.text:00002389 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00002389
.text:00002389 ; ---------------------------------------------------------------------------
.text:0000238A                 align 4
.text:0000238A _text           ends
.text:0000238A
.text:0000238C ; ===========================================================================
.text:0000238C
.text:0000238C ; Segment type: Pure code
.text:0000238C ; Segment permissions: Read/Execute
.text:0000238C _text           segment para public 'CODE' use32
.text:0000238C                 assume cs:_text
.text:0000238C                 ;org 238Ch
.text:0000238C ; COMDAT (pick any)
.text:0000238C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000238C
.text:0000238C ; =============== S U B R O U T I N E =======================================
.text:0000238C
.text:0000238C ; Attributes: bp-based frame
.text:0000238C
.text:0000238C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:0000238C                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:0000238C ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:0000238C                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+8Cp
.text:0000238C                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8B4p
.text:0000238C
.text:0000238C var_4           = dword ptr -4
.text:0000238C
.text:0000238C                 push    ebp
.text:0000238D                 mov     ebp, esp
.text:0000238F                 push    ecx
.text:00002390                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002397                 mov     [ebp+var_4], ecx
.text:0000239A                 mov     eax, [ebp+var_4]
.text:0000239D                 mov     eax, [eax]
.text:0000239F                 mov     esp, ebp
.text:000023A1                 pop     ebp
.text:000023A2                 retn
.text:000023A2 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000023A2
.text:000023A2 ; ---------------------------------------------------------------------------
.text:000023A3                 align 4
.text:000023A3 _text           ends
.text:000023A3
.text:000023A4 ; ===========================================================================
.text:000023A4
.text:000023A4 ; Segment type: Pure code
.text:000023A4 ; Segment permissions: Read/Execute
.text:000023A4 _text           segment para public 'CODE' use32
.text:000023A4                 assume cs:_text
.text:000023A4                 ;org 23A4h
.text:000023A4 ; COMDAT (pick any)
.text:000023A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000023A4
.text:000023A4 ; =============== S U B R O U T I N E =======================================
.text:000023A4
.text:000023A4 ; Attributes: bp-based frame
.text:000023A4
.text:000023A4 ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:000023A4                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:000023A4 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:000023A4                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+101p
.text:000023A4
.text:000023A4 var_4           = dword ptr -4
.text:000023A4
.text:000023A4                 push    ebp
.text:000023A5                 mov     ebp, esp
.text:000023A7                 push    ecx
.text:000023A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023AF                 mov     [ebp+var_4], ecx
.text:000023B2                 mov     eax, [ebp+var_4]
.text:000023B5                 mov     esp, ebp
.text:000023B7                 pop     ebp
.text:000023B8                 retn
.text:000023B8 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:000023B8
.text:000023B8 ; ---------------------------------------------------------------------------
.text:000023B9                 align 4
.text:000023B9 _text           ends
.text:000023B9
.text:000023BC ; ===========================================================================
.text:000023BC
.text:000023BC ; Segment type: Pure code
.text:000023BC ; Segment permissions: Read/Execute
.text:000023BC _text           segment para public 'CODE' use32
.text:000023BC                 assume cs:_text
.text:000023BC                 ;org 23BCh
.text:000023BC ; COMDAT (pick any)
.text:000023BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000023BC
.text:000023BC ; =============== S U B R O U T I N E =======================================
.text:000023BC
.text:000023BC ; Attributes: bp-based frame
.text:000023BC
.text:000023BC ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator->(void)const
.text:000023BC                 public ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:000023BC ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:000023BC                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+9Bp
.text:000023BC
.text:000023BC var_4           = dword ptr -4
.text:000023BC
.text:000023BC                 push    ebp
.text:000023BD                 mov     ebp, esp
.text:000023BF                 push    ecx
.text:000023C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023C7                 mov     [ebp+var_4], ecx
.text:000023CA                 mov     eax, [ebp+var_4]
.text:000023CD                 mov     eax, [eax]
.text:000023CF                 mov     esp, ebp
.text:000023D1                 pop     ebp
.text:000023D2                 retn
.text:000023D2 ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000023D2
.text:000023D2 ; ---------------------------------------------------------------------------
.text:000023D3                 align 4
.text:000023D3 _text           ends
.text:000023D3
.text:000023D4 ; ===========================================================================
.text:000023D4
.text:000023D4 ; Segment type: Pure code
.text:000023D4 ; Segment permissions: Read/Execute
.text:000023D4 _text           segment para public 'CODE' use32
.text:000023D4                 assume cs:_text
.text:000023D4                 ;org 23D4h
.text:000023D4 ; COMDAT (pick any)
.text:000023D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000023D4
.text:000023D4 ; =============== S U B R O U T I N E =======================================
.text:000023D4
.text:000023D4 ; Attributes: bp-based frame
.text:000023D4
.text:000023D4 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(class CMyComPtr<struct ISequentialOutStream> const &)
.text:000023D4                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z
.text:000023D4 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z proc near
.text:000023D4                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+153p
.text:000023D4
.text:000023D4 var_4           = dword ptr -4
.text:000023D4 arg_0           = dword ptr  8
.text:000023D4
.text:000023D4                 push    ebp
.text:000023D5                 mov     ebp, esp
.text:000023D7                 push    ecx
.text:000023D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023DF                 mov     [ebp+var_4], ecx
.text:000023E2                 mov     eax, [ebp+arg_0]
.text:000023E5                 mov     ecx, [eax]
.text:000023E7                 push    ecx
.text:000023E8                 mov     ecx, [ebp+var_4]
.text:000023EB                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000023F0                 add     esp, 4
.text:000023F3                 cmp     ebp, esp
.text:000023F5                 call    __RTC_CheckEsp
.text:000023FA                 mov     esp, ebp
.text:000023FC                 pop     ebp
.text:000023FD                 retn    4
.text:000023FD ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z endp
.text:000023FD
.text:000023FD _text           ends
.text:000023FD
.text:00002400 ; ===========================================================================
.text:00002400
.text:00002400 ; Segment type: Pure code
.text:00002400 ; Segment permissions: Read/Execute
.text:00002400 _text           segment para public 'CODE' use32
.text:00002400                 assume cs:_text
.text:00002400                 ;org 2400h
.text:00002400 ; COMDAT (pick any)
.text:00002400                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002400
.text:00002400 ; =============== S U B R O U T I N E =======================================
.text:00002400
.text:00002400 ; Attributes: bp-based frame
.text:00002400
.text:00002400 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:00002400                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:00002400 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:00002400                                         ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(CMyComPtr<ISequentialOutStream> const &)+17p
.text:00002400
.text:00002400 var_4           = dword ptr -4
.text:00002400 arg_0           = dword ptr  8
.text:00002400
.text:00002400                 push    ebp
.text:00002401                 mov     ebp, esp
.text:00002403                 push    ecx
.text:00002404                 push    esi
.text:00002405                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000240C                 mov     [ebp+var_4], ecx
.text:0000240F                 cmp     [ebp+arg_0], 0
.text:00002413                 jz      short loc_242C
.text:00002415                 mov     eax, [ebp+arg_0]
.text:00002418                 mov     ecx, [eax]
.text:0000241A                 mov     esi, esp
.text:0000241C                 mov     edx, [ebp+arg_0]
.text:0000241F                 push    edx
.text:00002420                 mov     eax, [ecx+4]
.text:00002423                 call    eax
.text:00002425                 cmp     esi, esp
.text:00002427                 call    __RTC_CheckEsp
.text:0000242C
.text:0000242C loc_242C:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:0000242C                 mov     ecx, [ebp+var_4]
.text:0000242F                 cmp     dword ptr [ecx], 0
.text:00002432                 jz      short loc_244F
.text:00002434                 mov     edx, [ebp+var_4]
.text:00002437                 mov     eax, [edx]
.text:00002439                 mov     ecx, [ebp+var_4]
.text:0000243C                 mov     edx, [ecx]
.text:0000243E                 mov     eax, [eax]
.text:00002440                 mov     esi, esp
.text:00002442                 push    edx
.text:00002443                 mov     ecx, [eax+8]
.text:00002446                 call    ecx
.text:00002448                 cmp     esi, esp
.text:0000244A                 call    __RTC_CheckEsp
.text:0000244F
.text:0000244F loc_244F:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:0000244F                 mov     edx, [ebp+var_4]
.text:00002452                 mov     eax, [ebp+arg_0]
.text:00002455                 mov     [edx], eax
.text:00002457                 mov     eax, [ebp+arg_0]
.text:0000245A                 pop     esi
.text:0000245B                 add     esp, 4
.text:0000245E                 cmp     ebp, esp
.text:00002460                 call    __RTC_CheckEsp
.text:00002465                 mov     esp, ebp
.text:00002467                 pop     ebp
.text:00002468                 retn    4
.text:00002468 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00002468
.text:00002468 ; ---------------------------------------------------------------------------
.text:0000246B                 align 4
.text:0000246B _text           ends
.text:0000246B
.text:0000246C ; ===========================================================================
.text:0000246C
.text:0000246C ; Segment type: Pure code
.text:0000246C ; Segment permissions: Read/Execute
.text:0000246C _text           segment para public 'CODE' use32
.text:0000246C                 assume cs:_text
.text:0000246C                 ;org 246Ch
.text:0000246C ; COMDAT (pick any)
.text:0000246C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000246C
.text:0000246C ; =============== S U B R O U T I N E =======================================
.text:0000246C
.text:0000246C ; Attributes: bp-based frame
.text:0000246C
.text:0000246C ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:0000246C                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:0000246C ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:0000246C                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+1BDp
.text:0000246C
.text:0000246C var_4           = dword ptr -4
.text:0000246C
.text:0000246C                 push    ebp
.text:0000246D                 mov     ebp, esp
.text:0000246F                 push    ecx
.text:00002470                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002477                 mov     [ebp+var_4], ecx
.text:0000247A                 mov     eax, [ebp+var_4]
.text:0000247D                 xor     ecx, ecx
.text:0000247F                 cmp     dword ptr [eax], 0
.text:00002482                 setz    cl
.text:00002485                 mov     al, cl
.text:00002487                 mov     esp, ebp
.text:00002489                 pop     ebp
.text:0000248A                 retn
.text:0000248A ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:0000248A
.text:0000248A ; ---------------------------------------------------------------------------
.text:0000248B                 align 4
.text:0000248B _text           ends
.text:0000248B
.text:0000248C ; ===========================================================================
.text:0000248C
.text:0000248C ; Segment type: Pure code
.text:0000248C ; Segment permissions: Read/Execute
.text:0000248C _text           segment para public 'CODE' use32
.text:0000248C                 assume cs:_text
.text:0000248C                 ;org 248Ch
.text:0000248C ; COMDAT (pick any)
.text:0000248C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000248C
.text:0000248C ; =============== S U B R O U T I N E =======================================
.text:0000248C
.text:0000248C ; Attributes: bp-based frame
.text:0000248C
.text:0000248C ; public: __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>(void)
.text:0000248C                 public ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
.text:0000248C ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ proc near
.text:0000248C                                         ; CODE XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+76p
.text:0000248C                                         ; __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0+3j
.text:0000248C
.text:0000248C var_8           = dword ptr -8
.text:0000248C var_4           = dword ptr -4
.text:0000248C
.text:0000248C                 push    ebp
.text:0000248D                 mov     ebp, esp
.text:0000248F                 sub     esp, 8
.text:00002492                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002499                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024A0                 mov     [ebp+var_4], ecx
.text:000024A3                 mov     eax, [ebp+var_4]
.text:000024A6                 mov     ecx, [eax]
.text:000024A8                 mov     [ebp+var_8], ecx
.text:000024AB                 mov     edx, [ebp+var_8]
.text:000024AE                 push    edx             ; void *
.text:000024AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000024B4                 add     esp, 4
.text:000024B7                 add     esp, 8
.text:000024BA                 cmp     ebp, esp
.text:000024BC                 call    __RTC_CheckEsp
.text:000024C1                 mov     esp, ebp
.text:000024C3                 pop     ebp
.text:000024C4                 retn
.text:000024C4 ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ endp
.text:000024C4
.text:000024C4 ; ---------------------------------------------------------------------------
.text:000024C5                 align 4
.text:000024C5 _text           ends
.text:000024C5
.text:000024C8 ; ===========================================================================
.text:000024C8
.text:000024C8 ; Segment type: Pure code
.text:000024C8 ; Segment permissions: Read/Execute
.text:000024C8 _text           segment para public 'CODE' use32
.text:000024C8                 assume cs:_text
.text:000024C8                 ;org 24C8h
.text:000024C8 ; COMDAT (pick any)
.text:000024C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000024C8
.text:000024C8 ; =============== S U B R O U T I N E =======================================
.text:000024C8
.text:000024C8 ; Attributes: bp-based frame
.text:000024C8
.text:000024C8 ; public: __thiscall CRecordVector<struct NCoderMixer2::CBond>::~CRecordVector<struct NCoderMixer2::CBond>(void)
.text:000024C8                 public ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
.text:000024C8 ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ proc near
.text:000024C8                                         ; CODE XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+67p
.text:000024C8                                         ; __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1+6j
.text:000024C8
.text:000024C8 var_8           = dword ptr -8
.text:000024C8 var_4           = dword ptr -4
.text:000024C8
.text:000024C8                 push    ebp
.text:000024C9                 mov     ebp, esp
.text:000024CB                 sub     esp, 8
.text:000024CE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000024D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024DC                 mov     [ebp+var_4], ecx
.text:000024DF                 mov     eax, [ebp+var_4]
.text:000024E2                 mov     ecx, [eax]
.text:000024E4                 mov     [ebp+var_8], ecx
.text:000024E7                 mov     edx, [ebp+var_8]
.text:000024EA                 push    edx             ; void *
.text:000024EB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000024F0                 add     esp, 4
.text:000024F3                 add     esp, 8
.text:000024F6                 cmp     ebp, esp
.text:000024F8                 call    __RTC_CheckEsp
.text:000024FD                 mov     esp, ebp
.text:000024FF                 pop     ebp
.text:00002500                 retn
.text:00002500 ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ endp
.text:00002500
.text:00002500 ; ---------------------------------------------------------------------------
.text:00002501                 align 4
.text:00002501 _text           ends
.text:00002501
.text:00002504 ; ===========================================================================
.text:00002504
.text:00002504 ; Segment type: Pure code
.text:00002504 ; Segment permissions: Read/Execute
.text:00002504 _text           segment para public 'CODE' use32
.text:00002504                 assume cs:_text
.text:00002504                 ;org 2504h
.text:00002504 ; COMDAT (pick any)
.text:00002504                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002504
.text:00002504 ; =============== S U B R O U T I N E =======================================
.text:00002504
.text:00002504 ; Attributes: bp-based frame
.text:00002504
.text:00002504 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:00002504                 public ??1?$CRecordVector@I@@QAE@XZ
.text:00002504 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+3Ap
.text:00002504                                         ; NCoderMixer2::CBindInfo::~CBindInfo(void)+49p ...
.text:00002504
.text:00002504 var_8           = dword ptr -8
.text:00002504 var_4           = dword ptr -4
.text:00002504
.text:00002504                 push    ebp
.text:00002505                 mov     ebp, esp
.text:00002507                 sub     esp, 8
.text:0000250A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002511                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002518                 mov     [ebp+var_4], ecx
.text:0000251B                 mov     eax, [ebp+var_4]
.text:0000251E                 mov     ecx, [eax]
.text:00002520                 mov     [ebp+var_8], ecx
.text:00002523                 mov     edx, [ebp+var_8]
.text:00002526                 push    edx             ; void *
.text:00002527                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000252C                 add     esp, 4
.text:0000252F                 add     esp, 8
.text:00002532                 cmp     ebp, esp
.text:00002534                 call    __RTC_CheckEsp
.text:00002539                 mov     esp, ebp
.text:0000253B                 pop     ebp
.text:0000253C                 retn
.text:0000253C ??1?$CRecordVector@I@@QAE@XZ endp
.text:0000253C
.text:0000253C ; ---------------------------------------------------------------------------
.text:0000253D                 align 10h
.text:0000253D _text           ends
.text:0000253D
.text:00002540 ; ===========================================================================
.text:00002540
.text:00002540 ; Segment type: Pure code
.text:00002540 ; Segment permissions: Read/Execute
.text:00002540 _text           segment para public 'CODE' use32
.text:00002540                 assume cs:_text
.text:00002540                 ;org 2540h
.text:00002540 ; COMDAT (pick any)
.text:00002540                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002540
.text:00002540 ; =============== S U B R O U T I N E =======================================
.text:00002540
.text:00002540 ; Attributes: bp-based frame
.text:00002540
.text:00002540 ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00002540                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:00002540 ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+3Ap
.text:00002540
.text:00002540 var_8           = dword ptr -8
.text:00002540 var_4           = dword ptr -4
.text:00002540
.text:00002540                 push    ebp
.text:00002541                 mov     ebp, esp
.text:00002543                 sub     esp, 8
.text:00002546                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000254D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002554                 mov     [ebp+var_4], ecx
.text:00002557                 mov     eax, [ebp+var_4]
.text:0000255A                 mov     ecx, [eax]
.text:0000255C                 mov     [ebp+var_8], ecx
.text:0000255F                 mov     edx, [ebp+var_8]
.text:00002562                 push    edx             ; void *
.text:00002563                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002568                 add     esp, 4
.text:0000256B                 add     esp, 8
.text:0000256E                 cmp     ebp, esp
.text:00002570                 call    __RTC_CheckEsp
.text:00002575                 mov     esp, ebp
.text:00002577                 pop     ebp
.text:00002578                 retn
.text:00002578 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00002578
.text:00002578 ; ---------------------------------------------------------------------------
.text:00002579                 align 4
.text:00002579 _text           ends
.text:00002579
.text:0000257C ; ===========================================================================
.text:0000257C
.text:0000257C ; Segment type: Pure code
.text:0000257C ; Segment permissions: Read/Execute
.text:0000257C _text           segment para public 'CODE' use32
.text:0000257C                 assume cs:_text
.text:0000257C                 ;org 257Ch
.text:0000257C ; COMDAT (pick any)
.text:0000257C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000257C
.text:0000257C ; =============== S U B R O U T I N E =======================================
.text:0000257C
.text:0000257C ; Attributes: bp-based frame
.text:0000257C
.text:0000257C ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:0000257C                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:0000257C ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:0000257C                                         ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+20p
.text:0000257C
.text:0000257C var_4           = dword ptr -4
.text:0000257C
.text:0000257C                 push    ebp
.text:0000257D                 mov     ebp, esp
.text:0000257F                 push    ecx
.text:00002580                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002587                 mov     [ebp+var_4], ecx
.text:0000258A                 mov     eax, [ebp+var_4]
.text:0000258D                 mov     eax, [eax+4]
.text:00002590                 mov     esp, ebp
.text:00002592                 pop     ebp
.text:00002593                 retn
.text:00002593 ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:00002593
.text:00002593 _text           ends
.text:00002593
.text:00002594 ; ===========================================================================
.text:00002594
.text:00002594 ; Segment type: Pure code
.text:00002594 ; Segment permissions: Read/Execute
.text:00002594 _text           segment para public 'CODE' use32
.text:00002594                 assume cs:_text
.text:00002594                 ;org 2594h
.text:00002594 ; COMDAT (pick any)
.text:00002594                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002594
.text:00002594 ; =============== S U B R O U T I N E =======================================
.text:00002594
.text:00002594 ; Attributes: bp-based frame
.text:00002594
.text:00002594 ; public: bool const & __thiscall CRecordVector<bool>::operator[](unsigned int)const
.text:00002594                 public ??A?$CRecordVector@_N@@QBEAB_NI@Z
.text:00002594 ??A?$CRecordVector@_N@@QBEAB_NI@Z proc near
.text:00002594                                         ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+37p
.text:00002594
.text:00002594 var_4           = dword ptr -4
.text:00002594 arg_0           = dword ptr  8
.text:00002594
.text:00002594                 push    ebp
.text:00002595                 mov     ebp, esp
.text:00002597                 push    ecx
.text:00002598                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000259F                 mov     [ebp+var_4], ecx
.text:000025A2                 mov     eax, [ebp+var_4]
.text:000025A5                 mov     eax, [eax]
.text:000025A7                 add     eax, [ebp+arg_0]
.text:000025AA                 mov     esp, ebp
.text:000025AC                 pop     ebp
.text:000025AD                 retn    4
.text:000025AD ??A?$CRecordVector@_N@@QBEAB_NI@Z endp
.text:000025AD
.text:000025AD _text           ends
.text:000025AD
.text:000025B0 ; ===========================================================================
.text:000025B0
.text:000025B0 ; Segment type: Pure code
.text:000025B0 ; Segment permissions: Read/Execute
.text:000025B0 _text           segment para public 'CODE' use32
.text:000025B0                 assume cs:_text
.text:000025B0                 ;org 25B0h
.text:000025B0 ; COMDAT (pick any)
.text:000025B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000025B0
.text:000025B0 ; =============== S U B R O U T I N E =======================================
.text:000025B0
.text:000025B0 ; Attributes: bp-based frame
.text:000025B0
.text:000025B0 ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:000025B0                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:000025B0 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:000025B0                                         ; CODE XREF: NArchive::N7z::CDecoder::~CDecoder(void)+3Ap
.text:000025B0
.text:000025B0 var_4           = dword ptr -4
.text:000025B0
.text:000025B0                 push    ebp
.text:000025B1                 mov     ebp, esp
.text:000025B3                 push    ecx
.text:000025B4                 push    esi
.text:000025B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025BC                 mov     [ebp+var_4], ecx
.text:000025BF                 mov     eax, [ebp+var_4]
.text:000025C2                 cmp     dword ptr [eax], 0
.text:000025C5                 jz      short loc_25E2
.text:000025C7                 mov     ecx, [ebp+var_4]
.text:000025CA                 mov     edx, [ecx]
.text:000025CC                 mov     eax, [ebp+var_4]
.text:000025CF                 mov     ecx, [eax]
.text:000025D1                 mov     edx, [edx]
.text:000025D3                 mov     esi, esp
.text:000025D5                 push    ecx
.text:000025D6                 mov     eax, [edx+8]
.text:000025D9                 call    eax
.text:000025DB                 cmp     esi, esp
.text:000025DD                 call    __RTC_CheckEsp
.text:000025E2
.text:000025E2 loc_25E2:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:000025E2                 pop     esi
.text:000025E3                 add     esp, 4
.text:000025E6                 cmp     ebp, esp
.text:000025E8                 call    __RTC_CheckEsp
.text:000025ED                 mov     esp, ebp
.text:000025EF                 pop     ebp
.text:000025F0                 retn
.text:000025F0 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:000025F0
.text:000025F0 ; ---------------------------------------------------------------------------
.text:000025F1                 align 4
.text:000025F1 _text           ends
.text:000025F1
.text:000025F4 ; ===========================================================================
.text:000025F4
.text:000025F4 ; Segment type: Pure code
.text:000025F4 ; Segment permissions: Read/Execute
.text:000025F4 _text           segment para public 'CODE' use32
.text:000025F4                 assume cs:_text
.text:000025F4                 ;org 25F4h
.text:000025F4 ; COMDAT (pick any)
.text:000025F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000025F4
.text:000025F4 ; =============== S U B R O U T I N E =======================================
.text:000025F4
.text:000025F4 ; Attributes: bp-based frame
.text:000025F4
.text:000025F4 ; public: __thiscall CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)const
.text:000025F4                 public ??B?$CObjArray@_K@@QBEPB_KXZ
.text:000025F4 ??B?$CObjArray@_K@@QBEPB_KXZ proc near  ; CODE XREF: NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)+17p
.text:000025F4                                         ; NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)+36p
.text:000025F4
.text:000025F4 var_4           = dword ptr -4
.text:000025F4
.text:000025F4                 push    ebp
.text:000025F5                 mov     ebp, esp
.text:000025F7                 push    ecx
.text:000025F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025FF                 mov     [ebp+var_4], ecx
.text:00002602                 mov     eax, [ebp+var_4]
.text:00002605                 mov     eax, [eax]
.text:00002607                 mov     esp, ebp
.text:00002609                 pop     ebp
.text:0000260A                 retn
.text:0000260A ??B?$CObjArray@_K@@QBEPB_KXZ endp
.text:0000260A
.text:0000260A ; ---------------------------------------------------------------------------
.text:0000260B                 align 4
.text:0000260B _text           ends
.text:0000260B
.text:0000260C ; ===========================================================================
.text:0000260C
.text:0000260C ; Segment type: Pure code
.text:0000260C ; Segment permissions: Read/Execute
.text:0000260C _text           segment para public 'CODE' use32
.text:0000260C                 assume cs:_text
.text:0000260C                 ;org 260Ch
.text:0000260C ; COMDAT (pick any)
.text:0000260C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000260C
.text:0000260C ; =============== S U B R O U T I N E =======================================
.text:0000260C
.text:0000260C ; Attributes: bp-based frame
.text:0000260C
.text:0000260C ; public: __thiscall CObjArray<unsigned int>::operator unsigned int *(void)
.text:0000260C                 public ??B?$CObjArray@I@@QAEPAIXZ
.text:0000260C ??B?$CObjArray@I@@QAEPAIXZ proc near    ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+11Ep
.text:0000260C                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+159p ...
.text:0000260C
.text:0000260C var_4           = dword ptr -4
.text:0000260C
.text:0000260C                 push    ebp
.text:0000260D                 mov     ebp, esp
.text:0000260F                 push    ecx
.text:00002610                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002617                 mov     [ebp+var_4], ecx
.text:0000261A                 mov     eax, [ebp+var_4]
.text:0000261D                 mov     eax, [eax]
.text:0000261F                 mov     esp, ebp
.text:00002621                 pop     ebp
.text:00002622                 retn
.text:00002622 ??B?$CObjArray@I@@QAEPAIXZ endp
.text:00002622
.text:00002622 ; ---------------------------------------------------------------------------
.text:00002623                 align 4
.text:00002623 _text           ends
.text:00002623
.text:00002624 ; ===========================================================================
.text:00002624
.text:00002624 ; Segment type: Pure code
.text:00002624 ; Segment permissions: Read/Execute
.text:00002624 _text           segment para public 'CODE' use32
.text:00002624                 assume cs:_text
.text:00002624                 ;org 2624h
.text:00002624 ; COMDAT (pick any)
.text:00002624                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002624
.text:00002624 ; =============== S U B R O U T I N E =======================================
.text:00002624
.text:00002624 ; Attributes: bp-based frame
.text:00002624
.text:00002624 ; public: __thiscall CObjArray<unsigned int>::operator unsigned int const *(void)const
.text:00002624                 public ??B?$CObjArray@I@@QBEPBIXZ
.text:00002624 ??B?$CObjArray@I@@QBEPBIXZ proc near    ; CODE XREF: NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)+24p
.text:00002624                                         ; NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)+43p
.text:00002624
.text:00002624 var_4           = dword ptr -4
.text:00002624
.text:00002624                 push    ebp
.text:00002625                 mov     ebp, esp
.text:00002627                 push    ecx
.text:00002628                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000262F                 mov     [ebp+var_4], ecx
.text:00002632                 mov     eax, [ebp+var_4]
.text:00002635                 mov     eax, [eax]
.text:00002637                 mov     esp, ebp
.text:00002639                 pop     ebp
.text:0000263A                 retn
.text:0000263A ??B?$CObjArray@I@@QBEPBIXZ endp
.text:0000263A
.text:0000263A ; ---------------------------------------------------------------------------
.text:0000263B                 align 4
.text:0000263B _text           ends
.text:0000263B
.text:0000263C ; ===========================================================================
.text:0000263C
.text:0000263C ; Segment type: Pure code
.text:0000263C ; Segment permissions: Read/Execute
.text:0000263C _text           segment para public 'CODE' use32
.text:0000263C                 assume cs:_text
.text:0000263C                 ;org 263Ch
.text:0000263C ; COMDAT (pick any)
.text:0000263C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000263C
.text:0000263C ; =============== S U B R O U T I N E =======================================
.text:0000263C
.text:0000263C ; Attributes: bp-based frame
.text:0000263C
.text:0000263C ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::Size(void)const
.text:0000263C                 public ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
.text:0000263C ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ proc near
.text:0000263C                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+83p
.text:0000263C
.text:0000263C var_4           = dword ptr -4
.text:0000263C
.text:0000263C                 push    ebp
.text:0000263D                 mov     ebp, esp
.text:0000263F                 push    ecx
.text:00002640                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002647                 mov     [ebp+var_4], ecx
.text:0000264A                 mov     eax, [ebp+var_4]
.text:0000264D                 mov     eax, [eax+4]
.text:00002650                 mov     esp, ebp
.text:00002652                 pop     ebp
.text:00002653                 retn
.text:00002653 ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ endp
.text:00002653
.text:00002653 _text           ends
.text:00002653
.text:00002654 ; ===========================================================================
.text:00002654
.text:00002654 ; Segment type: Pure code
.text:00002654 ; Segment permissions: Read/Execute
.text:00002654 _text           segment para public 'CODE' use32
.text:00002654                 assume cs:_text
.text:00002654                 ;org 2654h
.text:00002654 ; COMDAT (pick any)
.text:00002654                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002654
.text:00002654 ; =============== S U B R O U T I N E =======================================
.text:00002654
.text:00002654 ; Attributes: bp-based frame
.text:00002654
.text:00002654 ; public: struct NArchive::N7z::CFileItem const & __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::operator[](unsigned int)const
.text:00002654                 public ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z
.text:00002654 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z proc near
.text:00002654                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+4Bp
.text:00002654                                         ; NArchive::N7z::CFolderOutStream::CloseFile(void)+2Ep ...
.text:00002654
.text:00002654 var_4           = dword ptr -4
.text:00002654 arg_0           = dword ptr  8
.text:00002654
.text:00002654                 push    ebp
.text:00002655                 mov     ebp, esp
.text:00002657                 push    ecx
.text:00002658                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000265F                 mov     [ebp+var_4], ecx
.text:00002662                 mov     eax, [ebp+arg_0]
.text:00002665                 imul    eax, 18h
.text:00002668                 mov     ecx, [ebp+var_4]
.text:0000266B                 add     eax, [ecx]
.text:0000266D                 mov     esp, ebp
.text:0000266F                 pop     ebp
.text:00002670                 retn    4
.text:00002670 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z endp
.text:00002670
.text:00002670 ; ---------------------------------------------------------------------------
.text:00002673                 align 4
.text:00002673 _text           ends
.text:00002673
.text:00002674 ; ===========================================================================
.text:00002674
.text:00002674 ; Segment type: Pure code
.text:00002674 ; Segment permissions: Read/Execute
.text:00002674 _text           segment para public 'CODE' use32
.text:00002674                 assume cs:_text
.text:00002674                 ;org 2674h
.text:00002674 ; COMDAT (pick any)
.text:00002674                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002674
.text:00002674 ; =============== S U B R O U T I N E =======================================
.text:00002674
.text:00002674 ; Attributes: bp-based frame
.text:00002674
.text:00002674 ; public: struct NArchive::N7z::CFileItem & __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::operator[](unsigned int)
.text:00002674                 public ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z
.text:00002674 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z proc near
.text:00002674                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+199p
.text:00002674                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6EBp
.text:00002674
.text:00002674 var_4           = dword ptr -4
.text:00002674 arg_0           = dword ptr  8
.text:00002674
.text:00002674                 push    ebp
.text:00002675                 mov     ebp, esp
.text:00002677                 push    ecx
.text:00002678                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000267F                 mov     [ebp+var_4], ecx
.text:00002682                 mov     eax, [ebp+arg_0]
.text:00002685                 imul    eax, 18h
.text:00002688                 mov     ecx, [ebp+var_4]
.text:0000268B                 add     eax, [ecx]
.text:0000268D                 mov     esp, ebp
.text:0000268F                 pop     ebp
.text:00002690                 retn    4
.text:00002690 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z endp
.text:00002690
.text:00002690 ; ---------------------------------------------------------------------------
.text:00002693                 align 4
.text:00002693 _text           ends
.text:00002693
.text:00002694 ; ===========================================================================
.text:00002694
.text:00002694 ; Segment type: Pure code
.text:00002694 ; Segment permissions: Read/Execute
.text:00002694 _text           segment para public 'CODE' use32
.text:00002694                 assume cs:_text
.text:00002694                 ;org 2694h
.text:00002694 ; COMDAT (pick any)
.text:00002694                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002694
.text:00002694 ; =============== S U B R O U T I N E =======================================
.text:00002694
.text:00002694 ; Attributes: bp-based frame
.text:00002694
.text:00002694 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:00002694                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00002694 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00002694                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8C8p
.text:00002694
.text:00002694 var_4           = dword ptr -4
.text:00002694
.text:00002694                 push    ebp
.text:00002695                 mov     ebp, esp
.text:00002697                 push    ecx
.text:00002698                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000269F                 mov     [ebp+var_4], ecx
.text:000026A2                 mov     eax, [ebp+var_4]
.text:000026A5                 mov     eax, [eax]
.text:000026A7                 mov     esp, ebp
.text:000026A9                 pop     ebp
.text:000026AA                 retn
.text:000026AA ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000026AA
.text:000026AA ; ---------------------------------------------------------------------------
.text:000026AB                 align 4
.text:000026AB _text           ends
.text:000026AB
.text:000026AC ; ===========================================================================
.text:000026AC
.text:000026AC ; Segment type: Pure code
.text:000026AC ; Segment permissions: Read/Execute
.text:000026AC _text           segment para public 'CODE' use32
.text:000026AC                 assume cs:_text
.text:000026AC                 ;org 26ACh
.text:000026AC ; COMDAT (pick any)
.text:000026AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000026AC
.text:000026AC ; =============== S U B R O U T I N E =======================================
.text:000026AC
.text:000026AC ; Attributes: bp-based frame
.text:000026AC
.text:000026AC ; public: __thiscall CMyComPtr<struct IArchiveExtractCallback>::CMyComPtr<struct IArchiveExtractCallback>(void)
.text:000026AC                 public ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ
.text:000026AC ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ proc near
.text:000026AC                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::CFolderOutStream(void)+6Fp
.text:000026AC
.text:000026AC var_4           = dword ptr -4
.text:000026AC
.text:000026AC                 push    ebp
.text:000026AD                 mov     ebp, esp
.text:000026AF                 push    ecx
.text:000026B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026B7                 mov     [ebp+var_4], ecx
.text:000026BA                 mov     eax, [ebp+var_4]
.text:000026BD                 mov     dword ptr [eax], 0
.text:000026C3                 mov     eax, [ebp+var_4]
.text:000026C6                 mov     esp, ebp
.text:000026C8                 pop     ebp
.text:000026C9                 retn
.text:000026C9 ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ endp
.text:000026C9
.text:000026C9 ; ---------------------------------------------------------------------------
.text:000026CA                 align 4
.text:000026CA _text           ends
.text:000026CA
.text:000026CC ; ===========================================================================
.text:000026CC
.text:000026CC ; Segment type: Pure code
.text:000026CC ; Segment permissions: Read/Execute
.text:000026CC _text           segment para public 'CODE' use32
.text:000026CC                 assume cs:_text
.text:000026CC                 ;org 26CCh
.text:000026CC ; COMDAT (pick any)
.text:000026CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000026CC
.text:000026CC ; =============== S U B R O U T I N E =======================================
.text:000026CC
.text:000026CC ; Attributes: bp-based frame
.text:000026CC
.text:000026CC ; public: __thiscall CMyComPtr<struct IArchiveExtractCallback>::CMyComPtr<struct IArchiveExtractCallback>(struct IArchiveExtractCallback *)
.text:000026CC                 public ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z
.text:000026CC ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z proc near
.text:000026CC                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4Fp
.text:000026CC
.text:000026CC var_4           = dword ptr -4
.text:000026CC arg_0           = dword ptr  8
.text:000026CC
.text:000026CC                 push    ebp
.text:000026CD                 mov     ebp, esp
.text:000026CF                 push    ecx
.text:000026D0                 push    esi
.text:000026D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026D8                 mov     [ebp+var_4], ecx
.text:000026DB                 mov     eax, [ebp+var_4]
.text:000026DE                 mov     ecx, [ebp+arg_0]
.text:000026E1                 mov     [eax], ecx
.text:000026E3                 cmp     [ebp+arg_0], 0
.text:000026E7                 jz      short loc_2700
.text:000026E9                 mov     edx, [ebp+arg_0]
.text:000026EC                 mov     eax, [edx]
.text:000026EE                 mov     esi, esp
.text:000026F0                 mov     ecx, [ebp+arg_0]
.text:000026F3                 push    ecx
.text:000026F4                 mov     edx, [eax+4]
.text:000026F7                 call    edx
.text:000026F9                 cmp     esi, esp
.text:000026FB                 call    __RTC_CheckEsp
.text:00002700
.text:00002700 loc_2700:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>(IArchiveExtractCallback *)+1Bj
.text:00002700                 mov     eax, [ebp+var_4]
.text:00002703                 pop     esi
.text:00002704                 add     esp, 4
.text:00002707                 cmp     ebp, esp
.text:00002709                 call    __RTC_CheckEsp
.text:0000270E                 mov     esp, ebp
.text:00002710                 pop     ebp
.text:00002711                 retn    4
.text:00002711 ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z endp
.text:00002711
.text:00002711 _text           ends
.text:00002711
.text:00002714 ; ===========================================================================
.text:00002714
.text:00002714 ; Segment type: Pure code
.text:00002714 ; Segment permissions: Read/Execute
.text:00002714 _text           segment para public 'CODE' use32
.text:00002714                 assume cs:_text
.text:00002714                 ;org 2714h
.text:00002714 ; COMDAT (pick any)
.text:00002714                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002714
.text:00002714 ; =============== S U B R O U T I N E =======================================
.text:00002714
.text:00002714 ; Attributes: bp-based frame
.text:00002714
.text:00002714 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallback>::~CMyComPtr<struct IArchiveExtractCallback>(void)
.text:00002714                 public ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ
.text:00002714 ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ proc near
.text:00002714                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+AEp
.text:00002714                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+235p ...
.text:00002714
.text:00002714 var_4           = dword ptr -4
.text:00002714
.text:00002714                 push    ebp
.text:00002715                 mov     ebp, esp
.text:00002717                 push    ecx
.text:00002718                 push    esi
.text:00002719                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002720                 mov     [ebp+var_4], ecx
.text:00002723                 mov     eax, [ebp+var_4]
.text:00002726                 cmp     dword ptr [eax], 0
.text:00002729                 jz      short loc_2746
.text:0000272B                 mov     ecx, [ebp+var_4]
.text:0000272E                 mov     edx, [ecx]
.text:00002730                 mov     eax, [ebp+var_4]
.text:00002733                 mov     ecx, [eax]
.text:00002735                 mov     edx, [edx]
.text:00002737                 mov     esi, esp
.text:00002739                 push    ecx
.text:0000273A                 mov     eax, [edx+8]
.text:0000273D                 call    eax
.text:0000273F                 cmp     esi, esp
.text:00002741                 call    __RTC_CheckEsp
.text:00002746
.text:00002746 loc_2746:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)+15j
.text:00002746                 pop     esi
.text:00002747                 add     esp, 4
.text:0000274A                 cmp     ebp, esp
.text:0000274C                 call    __RTC_CheckEsp
.text:00002751                 mov     esp, ebp
.text:00002753                 pop     ebp
.text:00002754                 retn
.text:00002754 ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ endp
.text:00002754
.text:00002754 ; ---------------------------------------------------------------------------
.text:00002755                 align 4
.text:00002755 _text           ends
.text:00002755
.text:00002758 ; ===========================================================================
.text:00002758
.text:00002758 ; Segment type: Pure code
.text:00002758 ; Segment permissions: Read/Execute
.text:00002758 _text           segment para public 'CODE' use32
.text:00002758                 assume cs:_text
.text:00002758                 ;org 2758h
.text:00002758 ; COMDAT (pick any)
.text:00002758                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002758
.text:00002758 ; =============== S U B R O U T I N E =======================================
.text:00002758
.text:00002758 ; Attributes: bp-based frame
.text:00002758
.text:00002758 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallback>::operator struct IArchiveExtractCallback *(void)const
.text:00002758                 public ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ
.text:00002758 ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ proc near
.text:00002758                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2C3p
.text:00002758                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+82Fp
.text:00002758
.text:00002758 var_4           = dword ptr -4
.text:00002758
.text:00002758                 push    ebp
.text:00002759                 mov     ebp, esp
.text:0000275B                 push    ecx
.text:0000275C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002763                 mov     [ebp+var_4], ecx
.text:00002766                 mov     eax, [ebp+var_4]
.text:00002769                 mov     eax, [eax]
.text:0000276B                 mov     esp, ebp
.text:0000276D                 pop     ebp
.text:0000276E                 retn
.text:0000276E ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ endp
.text:0000276E
.text:0000276E ; ---------------------------------------------------------------------------
.text:0000276F                 align 10h
.text:0000276F _text           ends
.text:0000276F
.text:00002770 ; ===========================================================================
.text:00002770
.text:00002770 ; Segment type: Pure code
.text:00002770 ; Segment permissions: Read/Execute
.text:00002770 _text           segment para public 'CODE' use32
.text:00002770                 assume cs:_text
.text:00002770                 ;org 2770h
.text:00002770 ; COMDAT (pick any)
.text:00002770                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002770
.text:00002770 ; =============== S U B R O U T I N E =======================================
.text:00002770
.text:00002770 ; Attributes: bp-based frame
.text:00002770
.text:00002770 ; public: struct IArchiveExtractCallback * __thiscall CMyComPtr<struct IArchiveExtractCallback>::operator->(void)const
.text:00002770                 public ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ
.text:00002770 ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ proc near
.text:00002770                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+F0p
.text:00002770                                         ; NArchive::N7z::CFolderOutStream::OpenFile(bool)+1FAp ...
.text:00002770
.text:00002770 var_4           = dword ptr -4
.text:00002770
.text:00002770                 push    ebp
.text:00002771                 mov     ebp, esp
.text:00002773                 push    ecx
.text:00002774                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000277B                 mov     [ebp+var_4], ecx
.text:0000277E                 mov     eax, [ebp+var_4]
.text:00002781                 mov     eax, [eax]
.text:00002783                 mov     esp, ebp
.text:00002785                 pop     ebp
.text:00002786                 retn
.text:00002786 ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ endp
.text:00002786
.text:00002786 ; ---------------------------------------------------------------------------
.text:00002787                 align 4
.text:00002787 _text           ends
.text:00002787
.text:00002788 ; ===========================================================================
.text:00002788
.text:00002788 ; Segment type: Pure code
.text:00002788 ; Segment permissions: Read/Execute
.text:00002788 _text           segment para public 'CODE' use32
.text:00002788                 assume cs:_text
.text:00002788                 ;org 2788h
.text:00002788 ; COMDAT (pick any)
.text:00002788                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002788
.text:00002788 ; =============== S U B R O U T I N E =======================================
.text:00002788
.text:00002788 ; Attributes: bp-based frame
.text:00002788
.text:00002788 ; public: struct IArchiveExtractCallback * __thiscall CMyComPtr<struct IArchiveExtractCallback>::operator=(class CMyComPtr<struct IArchiveExtractCallback> const &)
.text:00002788                 public ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@ABV0@@Z
.text:00002788 ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@ABV0@@Z proc near
.text:00002788                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3DCp
.text:00002788
.text:00002788 var_4           = dword ptr -4
.text:00002788 arg_0           = dword ptr  8
.text:00002788
.text:00002788                 push    ebp
.text:00002789                 mov     ebp, esp
.text:0000278B                 push    ecx
.text:0000278C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002793                 mov     [ebp+var_4], ecx
.text:00002796                 mov     eax, [ebp+arg_0]
.text:00002799                 mov     ecx, [eax]
.text:0000279B                 push    ecx
.text:0000279C                 mov     ecx, [ebp+var_4]
.text:0000279F                 call    ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z ; CMyComPtr<IArchiveExtractCallback>::operator=(IArchiveExtractCallback *)
.text:000027A4                 add     esp, 4
.text:000027A7                 cmp     ebp, esp
.text:000027A9                 call    __RTC_CheckEsp
.text:000027AE                 mov     esp, ebp
.text:000027B0                 pop     ebp
.text:000027B1                 retn    4
.text:000027B1 ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@ABV0@@Z endp
.text:000027B1
.text:000027B1 _text           ends
.text:000027B1
.text:000027B4 ; ===========================================================================
.text:000027B4
.text:000027B4 ; Segment type: Pure code
.text:000027B4 ; Segment permissions: Read/Execute
.text:000027B4 _text           segment para public 'CODE' use32
.text:000027B4                 assume cs:_text
.text:000027B4                 ;org 27B4h
.text:000027B4 ; COMDAT (pick any)
.text:000027B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000027B4
.text:000027B4 ; =============== S U B R O U T I N E =======================================
.text:000027B4
.text:000027B4 ; Attributes: bp-based frame
.text:000027B4
.text:000027B4 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::CMyComPtr<struct IArchiveExtractCallbackMessage>(void)
.text:000027B4                 public ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
.text:000027B4 ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ proc near
.text:000027B4                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+305p
.text:000027B4
.text:000027B4 var_4           = dword ptr -4
.text:000027B4
.text:000027B4                 push    ebp
.text:000027B5                 mov     ebp, esp
.text:000027B7                 push    ecx
.text:000027B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027BF                 mov     [ebp+var_4], ecx
.text:000027C2                 mov     eax, [ebp+var_4]
.text:000027C5                 mov     dword ptr [eax], 0
.text:000027CB                 mov     eax, [ebp+var_4]
.text:000027CE                 mov     esp, ebp
.text:000027D0                 pop     ebp
.text:000027D1                 retn
.text:000027D1 ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ endp
.text:000027D1
.text:000027D1 ; ---------------------------------------------------------------------------
.text:000027D2                 align 4
.text:000027D2 _text           ends
.text:000027D2
.text:000027D4 ; ===========================================================================
.text:000027D4
.text:000027D4 ; Segment type: Pure code
.text:000027D4 ; Segment permissions: Read/Execute
.text:000027D4 _text           segment para public 'CODE' use32
.text:000027D4                 assume cs:_text
.text:000027D4                 ;org 27D4h
.text:000027D4 ; COMDAT (pick any)
.text:000027D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000027D4
.text:000027D4 ; =============== S U B R O U T I N E =======================================
.text:000027D4
.text:000027D4 ; Attributes: bp-based frame
.text:000027D4
.text:000027D4 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::~CMyComPtr<struct IArchiveExtractCallbackMessage>(void)
.text:000027D4                 public ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
.text:000027D4 ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ proc near
.text:000027D4                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+498p
.text:000027D4                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7BFp ...
.text:000027D4
.text:000027D4 var_4           = dword ptr -4
.text:000027D4
.text:000027D4                 push    ebp
.text:000027D5                 mov     ebp, esp
.text:000027D7                 push    ecx
.text:000027D8                 push    esi
.text:000027D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027E0                 mov     [ebp+var_4], ecx
.text:000027E3                 mov     eax, [ebp+var_4]
.text:000027E6                 cmp     dword ptr [eax], 0
.text:000027E9                 jz      short loc_2806
.text:000027EB                 mov     ecx, [ebp+var_4]
.text:000027EE                 mov     edx, [ecx]
.text:000027F0                 mov     eax, [ebp+var_4]
.text:000027F3                 mov     ecx, [eax]
.text:000027F5                 mov     edx, [edx]
.text:000027F7                 mov     esi, esp
.text:000027F9                 push    ecx
.text:000027FA                 mov     eax, [edx+8]
.text:000027FD                 call    eax
.text:000027FF                 cmp     esi, esp
.text:00002801                 call    __RTC_CheckEsp
.text:00002806
.text:00002806 loc_2806:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)+15j
.text:00002806                 pop     esi
.text:00002807                 add     esp, 4
.text:0000280A                 cmp     ebp, esp
.text:0000280C                 call    __RTC_CheckEsp
.text:00002811                 mov     esp, ebp
.text:00002813                 pop     ebp
.text:00002814                 retn
.text:00002814 ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ endp
.text:00002814
.text:00002814 ; ---------------------------------------------------------------------------
.text:00002815                 align 4
.text:00002815 _text           ends
.text:00002815
.text:00002818 ; ===========================================================================
.text:00002818
.text:00002818 ; Segment type: Pure code
.text:00002818 ; Segment permissions: Read/Execute
.text:00002818 _text           segment para public 'CODE' use32
.text:00002818                 assume cs:_text
.text:00002818                 ;org 2818h
.text:00002818 ; COMDAT (pick any)
.text:00002818                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002818
.text:00002818 ; =============== S U B R O U T I N E =======================================
.text:00002818
.text:00002818 ; Attributes: bp-based frame
.text:00002818
.text:00002818 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::operator struct IArchiveExtractCallbackMessage *(void)const
.text:00002818                 public ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ
.text:00002818 ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ proc near
.text:00002818                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A5Cp
.text:00002818
.text:00002818 var_4           = dword ptr -4
.text:00002818
.text:00002818                 push    ebp
.text:00002819                 mov     ebp, esp
.text:0000281B                 push    ecx
.text:0000281C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002823                 mov     [ebp+var_4], ecx
.text:00002826                 mov     eax, [ebp+var_4]
.text:00002829                 mov     eax, [eax]
.text:0000282B                 mov     esp, ebp
.text:0000282D                 pop     ebp
.text:0000282E                 retn
.text:0000282E ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ endp
.text:0000282E
.text:0000282E ; ---------------------------------------------------------------------------
.text:0000282F                 align 10h
.text:0000282F _text           ends
.text:0000282F
.text:00002830 ; ===========================================================================
.text:00002830
.text:00002830 ; Segment type: Pure code
.text:00002830 ; Segment permissions: Read/Execute
.text:00002830 _text           segment para public 'CODE' use32
.text:00002830                 assume cs:_text
.text:00002830                 ;org 2830h
.text:00002830 ; COMDAT (pick any)
.text:00002830                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002830
.text:00002830 ; =============== S U B R O U T I N E =======================================
.text:00002830
.text:00002830 ; Attributes: bp-based frame
.text:00002830
.text:00002830 ; public: struct IArchiveExtractCallbackMessage * * __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::operator&(void)
.text:00002830                 public ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ
.text:00002830 ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ proc near
.text:00002830                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+31Ap
.text:00002830
.text:00002830 var_4           = dword ptr -4
.text:00002830
.text:00002830                 push    ebp
.text:00002831                 mov     ebp, esp
.text:00002833                 push    ecx
.text:00002834                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000283B                 mov     [ebp+var_4], ecx
.text:0000283E                 mov     eax, [ebp+var_4]
.text:00002841                 mov     esp, ebp
.text:00002843                 pop     ebp
.text:00002844                 retn
.text:00002844 ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ endp
.text:00002844
.text:00002844 ; ---------------------------------------------------------------------------
.text:00002845                 align 4
.text:00002845 _text           ends
.text:00002845
.text:00002848 ; ===========================================================================
.text:00002848
.text:00002848 ; Segment type: Pure code
.text:00002848 ; Segment permissions: Read/Execute
.text:00002848 _text           segment para public 'CODE' use32
.text:00002848                 assume cs:_text
.text:00002848                 ;org 2848h
.text:00002848 ; COMDAT (pick any)
.text:00002848                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002848
.text:00002848 ; =============== S U B R O U T I N E =======================================
.text:00002848
.text:00002848 ; Attributes: bp-based frame
.text:00002848
.text:00002848 ; public: struct IArchiveExtractCallbackMessage * __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::operator->(void)const
.text:00002848                 public ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ
.text:00002848 ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ proc near
.text:00002848                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A7Ap
.text:00002848
.text:00002848 var_4           = dword ptr -4
.text:00002848
.text:00002848                 push    ebp
.text:00002849                 mov     ebp, esp
.text:0000284B                 push    ecx
.text:0000284C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002853                 mov     [ebp+var_4], ecx
.text:00002856                 mov     eax, [ebp+var_4]
.text:00002859                 mov     eax, [eax]
.text:0000285B                 mov     esp, ebp
.text:0000285D                 pop     ebp
.text:0000285E                 retn
.text:0000285E ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ endp
.text:0000285E
.text:0000285E ; ---------------------------------------------------------------------------
.text:0000285F                 align 10h
.text:0000285F _text           ends
.text:0000285F
.text:00002860 ; ===========================================================================
.text:00002860
.text:00002860 ; Segment type: Pure code
.text:00002860 ; Segment permissions: Read/Execute
.text:00002860 _text           segment para public 'CODE' use32
.text:00002860                 assume cs:_text
.text:00002860                 ;org 2860h
.text:00002860 ; COMDAT (pick any)
.text:00002860                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002860
.text:00002860 ; =============== S U B R O U T I N E =======================================
.text:00002860
.text:00002860 ; Attributes: bp-based frame
.text:00002860
.text:00002860 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00002860                 public ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00002860 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00002860                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+81Dp
.text:00002860
.text:00002860 var_4           = dword ptr -4
.text:00002860
.text:00002860                 push    ebp
.text:00002861                 mov     ebp, esp
.text:00002863                 push    ecx
.text:00002864                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000286B                 mov     [ebp+var_4], ecx
.text:0000286E                 mov     eax, [ebp+var_4]
.text:00002871                 mov     dword ptr [eax], 0
.text:00002877                 mov     eax, [ebp+var_4]
.text:0000287A                 mov     esp, ebp
.text:0000287C                 pop     ebp
.text:0000287D                 retn
.text:0000287D ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:0000287D
.text:0000287D ; ---------------------------------------------------------------------------
.text:0000287E                 align 10h
.text:0000287E _text           ends
.text:0000287E
.text:00002880 ; ===========================================================================
.text:00002880
.text:00002880 ; Segment type: Pure code
.text:00002880 ; Segment permissions: Read/Execute
.text:00002880 _text           segment para public 'CODE' use32
.text:00002880                 assume cs:_text
.text:00002880                 ;org 2880h
.text:00002880 ; COMDAT (pick any)
.text:00002880                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002880
.text:00002880 ; =============== S U B R O U T I N E =======================================
.text:00002880
.text:00002880 ; Attributes: bp-based frame
.text:00002880
.text:00002880 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::~CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00002880                 public ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00002880 ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00002880                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9F2p
.text:00002880                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+AFEp ...
.text:00002880
.text:00002880 var_4           = dword ptr -4
.text:00002880
.text:00002880                 push    ebp
.text:00002881                 mov     ebp, esp
.text:00002883                 push    ecx
.text:00002884                 push    esi
.text:00002885                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000288C                 mov     [ebp+var_4], ecx
.text:0000288F                 mov     eax, [ebp+var_4]
.text:00002892                 cmp     dword ptr [eax], 0
.text:00002895                 jz      short loc_28B2
.text:00002897                 mov     ecx, [ebp+var_4]
.text:0000289A                 mov     edx, [ecx]
.text:0000289C                 mov     eax, [ebp+var_4]
.text:0000289F                 mov     ecx, [eax]
.text:000028A1                 mov     edx, [edx]
.text:000028A3                 mov     esi, esp
.text:000028A5                 push    ecx
.text:000028A6                 mov     eax, [edx+8]
.text:000028A9                 call    eax
.text:000028AB                 cmp     esi, esp
.text:000028AD                 call    __RTC_CheckEsp
.text:000028B2
.text:000028B2 loc_28B2:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)+15j
.text:000028B2                 pop     esi
.text:000028B3                 add     esp, 4
.text:000028B6                 cmp     ebp, esp
.text:000028B8                 call    __RTC_CheckEsp
.text:000028BD                 mov     esp, ebp
.text:000028BF                 pop     ebp
.text:000028C0                 retn
.text:000028C0 ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:000028C0
.text:000028C0 ; ---------------------------------------------------------------------------
.text:000028C1                 align 4
.text:000028C1 _text           ends
.text:000028C1
.text:000028C4 ; ===========================================================================
.text:000028C4
.text:000028C4 ; Segment type: Pure code
.text:000028C4 ; Segment permissions: Read/Execute
.text:000028C4 _text           segment para public 'CODE' use32
.text:000028C4                 assume cs:_text
.text:000028C4                 ;org 28C4h
.text:000028C4 ; COMDAT (pick any)
.text:000028C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000028C4
.text:000028C4 ; =============== S U B R O U T I N E =======================================
.text:000028C4
.text:000028C4 ; Attributes: bp-based frame
.text:000028C4
.text:000028C4 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator struct ICryptoGetTextPassword *(void)const
.text:000028C4                 public ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:000028C4 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:000028C4                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+895p
.text:000028C4
.text:000028C4 var_4           = dword ptr -4
.text:000028C4
.text:000028C4                 push    ebp
.text:000028C5                 mov     ebp, esp
.text:000028C7                 push    ecx
.text:000028C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000028CF                 mov     [ebp+var_4], ecx
.text:000028D2                 mov     eax, [ebp+var_4]
.text:000028D5                 mov     eax, [eax]
.text:000028D7                 mov     esp, ebp
.text:000028D9                 pop     ebp
.text:000028DA                 retn
.text:000028DA ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:000028DA
.text:000028DA ; ---------------------------------------------------------------------------
.text:000028DB                 align 4
.text:000028DB _text           ends
.text:000028DB
.text:000028DC ; ===========================================================================
.text:000028DC
.text:000028DC ; Segment type: Pure code
.text:000028DC ; Segment permissions: Read/Execute
.text:000028DC _text           segment para public 'CODE' use32
.text:000028DC                 assume cs:_text
.text:000028DC                 ;org 28DCh
.text:000028DC ; COMDAT (pick any)
.text:000028DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000028DC
.text:000028DC ; =============== S U B R O U T I N E =======================================
.text:000028DC
.text:000028DC ; Attributes: bp-based frame
.text:000028DC
.text:000028DC ; public: struct ICryptoGetTextPassword * * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator&(void)
.text:000028DC                 public ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
.text:000028DC ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ proc near
.text:000028DC                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+849p
.text:000028DC
.text:000028DC var_4           = dword ptr -4
.text:000028DC
.text:000028DC                 push    ebp
.text:000028DD                 mov     ebp, esp
.text:000028DF                 push    ecx
.text:000028E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000028E7                 mov     [ebp+var_4], ecx
.text:000028EA                 mov     eax, [ebp+var_4]
.text:000028ED                 mov     esp, ebp
.text:000028EF                 pop     ebp
.text:000028F0                 retn
.text:000028F0 ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ endp
.text:000028F0
.text:000028F0 ; ---------------------------------------------------------------------------
.text:000028F1                 align 4
.text:000028F1 _text           ends
.text:000028F1
.text:000028F4 ; ===========================================================================
.text:000028F4
.text:000028F4 ; Segment type: Pure code
.text:000028F4 ; Segment permissions: Read/Execute
.text:000028F4 _text           segment para public 'CODE' use32
.text:000028F4                 assume cs:_text
.text:000028F4                 ;org 28F4h
.text:000028F4 ; COMDAT (pick any)
.text:000028F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000028F4
.text:000028F4 ; =============== S U B R O U T I N E =======================================
.text:000028F4
.text:000028F4 ; Attributes: bp-based frame
.text:000028F4
.text:000028F4 ; public: struct IArchiveExtractCallback * __thiscall CMyComPtr<struct IArchiveExtractCallback>::operator=(struct IArchiveExtractCallback *)
.text:000028F4                 public ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z
.text:000028F4 ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z proc near
.text:000028F4                                         ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::operator=(CMyComPtr<IArchiveExtractCallback> const &)+17p
.text:000028F4
.text:000028F4 var_4           = dword ptr -4
.text:000028F4 arg_0           = dword ptr  8
.text:000028F4
.text:000028F4                 push    ebp
.text:000028F5                 mov     ebp, esp
.text:000028F7                 push    ecx
.text:000028F8                 push    esi
.text:000028F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002900                 mov     [ebp+var_4], ecx
.text:00002903                 cmp     [ebp+arg_0], 0
.text:00002907                 jz      short loc_2920
.text:00002909                 mov     eax, [ebp+arg_0]
.text:0000290C                 mov     ecx, [eax]
.text:0000290E                 mov     esi, esp
.text:00002910                 mov     edx, [ebp+arg_0]
.text:00002913                 push    edx
.text:00002914                 mov     eax, [ecx+4]
.text:00002917                 call    eax
.text:00002919                 cmp     esi, esp
.text:0000291B                 call    __RTC_CheckEsp
.text:00002920
.text:00002920 loc_2920:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::operator=(IArchiveExtractCallback *)+13j
.text:00002920                 mov     ecx, [ebp+var_4]
.text:00002923                 cmp     dword ptr [ecx], 0
.text:00002926                 jz      short loc_2943
.text:00002928                 mov     edx, [ebp+var_4]
.text:0000292B                 mov     eax, [edx]
.text:0000292D                 mov     ecx, [ebp+var_4]
.text:00002930                 mov     edx, [ecx]
.text:00002932                 mov     eax, [eax]
.text:00002934                 mov     esi, esp
.text:00002936                 push    edx
.text:00002937                 mov     ecx, [eax+8]
.text:0000293A                 call    ecx
.text:0000293C                 cmp     esi, esp
.text:0000293E                 call    __RTC_CheckEsp
.text:00002943
.text:00002943 loc_2943:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::operator=(IArchiveExtractCallback *)+32j
.text:00002943                 mov     edx, [ebp+var_4]
.text:00002946                 mov     eax, [ebp+arg_0]
.text:00002949                 mov     [edx], eax
.text:0000294B                 mov     eax, [ebp+arg_0]
.text:0000294E                 pop     esi
.text:0000294F                 add     esp, 4
.text:00002952                 cmp     ebp, esp
.text:00002954                 call    __RTC_CheckEsp
.text:00002959                 mov     esp, ebp
.text:0000295B                 pop     ebp
.text:0000295C                 retn    4
.text:0000295C ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z endp
.text:0000295C
.text:0000295C ; ---------------------------------------------------------------------------
.text:0000295F                 align 10h
.text:0000295F _text           ends
.text:0000295F
.text:00002960 ; ===========================================================================
.text:00002960
.text:00002960 ; Segment type: Pure code
.text:00002960 ; Segment permissions: Read/Execute
.text:00002960 _text           segment para public 'CODE' use32
.text:00002960                 assume cs:_text
.text:00002960                 ;org 2960h
.text:00002960 ; COMDAT (pick any)
.text:00002960                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002960
.text:00002960 ; =============== S U B R O U T I N E =======================================
.text:00002960
.text:00002960 ; Attributes: bp-based frame
.text:00002960
.text:00002960 ; public: long __thiscall CMyComPtr<struct IArchiveExtractCallback>::QueryInterface<struct IArchiveExtractCallbackMessage>(struct _GUID const &, struct IArchiveExtractCallbackMessage * *)const
.text:00002960                 public ??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z
.text:00002960 ??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z proc near
.text:00002960                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+334p
.text:00002960
.text:00002960 var_4           = dword ptr -4
.text:00002960 arg_0           = dword ptr  8
.text:00002960 arg_4           = dword ptr  0Ch
.text:00002960
.text:00002960                 push    ebp
.text:00002961                 mov     ebp, esp
.text:00002963                 push    ecx
.text:00002964                 push    esi
.text:00002965                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000296C                 mov     [ebp+var_4], ecx
.text:0000296F                 mov     esi, esp
.text:00002971                 mov     eax, [ebp+arg_4]
.text:00002974                 push    eax
.text:00002975                 mov     ecx, [ebp+arg_0]
.text:00002978                 push    ecx
.text:00002979                 mov     edx, [ebp+var_4]
.text:0000297C                 mov     eax, [edx]
.text:0000297E                 mov     ecx, [ebp+var_4]
.text:00002981                 mov     edx, [ecx]
.text:00002983                 mov     eax, [eax]
.text:00002985                 push    edx
.text:00002986                 mov     ecx, [eax]
.text:00002988                 call    ecx
.text:0000298A                 cmp     esi, esp
.text:0000298C                 call    __RTC_CheckEsp
.text:00002991                 pop     esi
.text:00002992                 add     esp, 4
.text:00002995                 cmp     ebp, esp
.text:00002997                 call    __RTC_CheckEsp
.text:0000299C                 mov     esp, ebp
.text:0000299E                 pop     ebp
.text:0000299F                 retn    8
.text:0000299F ??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z endp
.text:0000299F
.text:0000299F ; ---------------------------------------------------------------------------
.text:000029A2                 align 4
.text:000029A2 _text           ends
.text:000029A2
.text:000029A4 ; ===========================================================================
.text:000029A4
.text:000029A4 ; Segment type: Pure code
.text:000029A4 ; Segment permissions: Read/Execute
.text:000029A4 _text           segment para public 'CODE' use32
.text:000029A4                 assume cs:_text
.text:000029A4                 ;org 29A4h
.text:000029A4 ; COMDAT (pick any)
.text:000029A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000029A4
.text:000029A4 ; =============== S U B R O U T I N E =======================================
.text:000029A4
.text:000029A4 ; Attributes: bp-based frame
.text:000029A4
.text:000029A4 ; public: long __thiscall CMyComPtr<struct IArchiveExtractCallback>::QueryInterface<struct ICryptoGetTextPassword>(struct _GUID const &, struct ICryptoGetTextPassword * *)const
.text:000029A4                 public ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z
.text:000029A4 ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z proc near
.text:000029A4                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+863p
.text:000029A4
.text:000029A4 var_4           = dword ptr -4
.text:000029A4 arg_0           = dword ptr  8
.text:000029A4 arg_4           = dword ptr  0Ch
.text:000029A4
.text:000029A4                 push    ebp
.text:000029A5                 mov     ebp, esp
.text:000029A7                 push    ecx
.text:000029A8                 push    esi
.text:000029A9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029B0                 mov     [ebp+var_4], ecx
.text:000029B3                 mov     esi, esp
.text:000029B5                 mov     eax, [ebp+arg_4]
.text:000029B8                 push    eax
.text:000029B9                 mov     ecx, [ebp+arg_0]
.text:000029BC                 push    ecx
.text:000029BD                 mov     edx, [ebp+var_4]
.text:000029C0                 mov     eax, [edx]
.text:000029C2                 mov     ecx, [ebp+var_4]
.text:000029C5                 mov     edx, [ecx]
.text:000029C7                 mov     eax, [eax]
.text:000029C9                 push    edx
.text:000029CA                 mov     ecx, [eax]
.text:000029CC                 call    ecx
.text:000029CE                 cmp     esi, esp
.text:000029D0                 call    __RTC_CheckEsp
.text:000029D5                 pop     esi
.text:000029D6                 add     esp, 4
.text:000029D9                 cmp     ebp, esp
.text:000029DB                 call    __RTC_CheckEsp
.text:000029E0                 mov     esp, ebp
.text:000029E2                 pop     ebp
.text:000029E3                 retn    8
.text:000029E3 ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z endp
.text:000029E3
.text:000029E3 _text           ends
.text:000029E3
UNDEF:000029F0 ; ===========================================================================
UNDEF:000029F0
UNDEF:000029F0 ; Segment type: Externs
UNDEF:000029F0 ; UNDEF
UNDEF:000029F0                 extrn __RTC_CheckEsp:near
UNDEF:000029F0                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::Init(uint,uint const *,uint)+44p
UNDEF:000029F0                                         ; NArchive::N7z::CFolderOutStream::OpenFile(bool)+11Ep ...
UNDEF:000029F4                 extrn __RTC_Shutdown:near
UNDEF:000029F4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000029F8                 extrn __RTC_InitBase:near
UNDEF:000029F8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000029FC                 extrn ___security_cookie:near
UNDEF:000029FC                                         ; DATA XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+27r
UNDEF:000029FC                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2Dr ...
UNDEF:00002A00                 extrn ___CxxFrameHandler3:near
UNDEF:00002A00                                         ; CODE XREF: __ehhandler$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z+16j
UNDEF:00002A00                                         ; __ehhandler$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+19j ...
UNDEF:00002A04 ; __fastcall __security_check_cookie(x)
UNDEF:00002A04                 extrn @__security_check_cookie@4:near
UNDEF:00002A04                                         ; CODE XREF: __ehhandler$?OpenFile@CFolderOutStream@N7z@NArchive@@AAEJ_N@Z+Cp
UNDEF:00002A04                                         ; __ehhandler$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+Fp ...
UNDEF:00002A08 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00002A08                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002A08                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::OpenFile(bool)+23Cp
UNDEF:00002A08                                         ; NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+1E3p ...
UNDEF:00002A0C ; __fastcall CrcUpdate(x, x, x)
UNDEF:00002A0C                 extrn @CrcUpdate@12:near
UNDEF:00002A0C                                         ; CODE XREF: NArchive::N7z::CFolderOutStream::Write(void const *,uint,uint *)+E1p
UNDEF:00002A10 ; void __cdecl operator delete(void *)
UNDEF:00002A10                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5+7p
UNDEF:00002A10                                         ; __unwindfunclet$?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9+7p ...
UNDEF:00002A14 ; __int32 __thiscall NArchive::N7z::CDecoder::Decode(NArchive::N7z::CDecoder *__hidden this, struct IInStream *, unsigned __int64, const struct NArchive::N7z::CFolders *, unsigned int, const unsigned __int64 *, struct ISequentialOutStream *, struct ICompressProgressInfo *, struct ISequentialInStream **, struct ICryptoGetTextPassword *, bool *, bool *, struct UString *, bool, unsigned int)
UNDEF:00002A14                 extrn ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z:near
UNDEF:00002A14                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+93Dp
UNDEF:00002A18 ; _DWORD __thiscall UString::UString(UString *__hidden this)
UNDEF:00002A18                 extrn ??0UString@@QAE@XZ:near
UNDEF:00002A18                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+880p
UNDEF:00002A1C                 extrn _IID_ICryptoGetTextPassword:near
UNDEF:00002A1C                                         ; DATA XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+85Bo
UNDEF:00002A20 ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:00002A20                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:00002A20                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+453p
UNDEF:00002A24                 extrn _IID_IArchiveExtractCallbackMessage:near
UNDEF:00002A24                                         ; DATA XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+32Co
UNDEF:00002A28 ; _DWORD __thiscall NArchive::N7z::CDecoder::CDecoder(NArchive::N7z::CDecoder *__hidden this, bool)
UNDEF:00002A28                 extrn ??0CDecoder@N7z@NArchive@@QAE@_N@Z:near
UNDEF:00002A28                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2F0p
UNDEF:00002A2C ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:00002A2C                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:00002A2C                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2DAp
UNDEF:00002A30 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:00002A30                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:00002A30                                         ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+274p
UNDEF:00002A34 ; void *__cdecl operator new(unsigned int)
UNDEF:00002A34                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+247p
UNDEF:00002A34                                         ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+33Bp
UNDEF:00002A38 ; const type_info::`vftable'
UNDEF:00002A38                 extrn ??_7type_info@@6B@:near
UNDEF:00002A38                                         ; DATA XREF: .data:NArchive::N7z::CFolderOutStream `RTTI Type Descriptor'o
UNDEF:00002A38                                         ; .data:ISequentialOutStream `RTTI Type Descriptor'o ...
UNDEF:00002A3C                 extrn _IID_ISequentialOutStream:near
UNDEF:00002A3C                                         ; DATA XREF: NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *):loc_1CA8o
UNDEF:00002A40 ; const IID IID_IUnknown
UNDEF:00002A40                 extrn _IID_IUnknown:near
UNDEF:00002A40                                         ; DATA XREF: NArchive::N7z::CFolderOutStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00002A44 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00002A44                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00002A48                 extrn __purecall:near   ; DATA XREF: .rdata:const ISequentialOutStream::`vftable'o
UNDEF:00002A48                                         ; .rdata:00001E64o ...
UNDEF:00002A48
UNDEF:00002A48