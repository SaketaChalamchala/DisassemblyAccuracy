.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : F3BEB31E79C399289788CD29768D70E4
.text:00000000 ; Input CRC32 : 314E1B72
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CoderMixer2.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall CSequentialInStreamCalcSize::Read(CSequentialInStreamCalcSize *this, void *, unsigned int, unsigned int *)
.text:00000000                 public ?Read@CSequentialInStreamCalcSize@@UAGJPAXIPAI@Z
.text:00000000 ?Read@CSequentialInStreamCalcSize@@UAGJPAXIPAI@Z proc near
.text:00000000                                         ; DATA XREF: .rdata:00004D98o
.text:00000000
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 14h
.text:00000006                 push    esi
.text:00000007                 mov     eax, 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_14], eax
.text:0000000F                 mov     [ebp+var_10], eax
.text:00000012                 mov     [ebp+var_C], eax
.text:00000015                 mov     [ebp+var_8], eax
.text:00000018                 mov     [ebp+var_4], eax
.text:0000001B                 mov     [ebp+var_8], 0
.text:00000022                 mov     [ebp+var_10], 0
.text:00000029                 mov     ecx, [ebp+this]
.text:0000002C                 add     ecx, 8
.text:0000002F                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000034                 test    eax, eax
.text:00000036                 jz      short loc_6C
.text:00000038                 mov     ecx, [ebp+this]
.text:0000003B                 add     ecx, 8
.text:0000003E
.text:0000003E loc_3E:                                 ; DATA XREF: .xdata$x:__catchsym$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$2o
.text:0000003E                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:00000043                 mov     [ebp+var_14], eax
.text:00000046                 mov     esi, esp
.text:00000048                 lea     eax, [ebp+var_8]
.text:0000004B                 push    eax
.text:0000004C                 mov     ecx, [ebp+arg_8]
.text:0000004F                 push    ecx
.text:00000050                 mov     edx, [ebp+arg_4]
.text:00000053                 push    edx
.text:00000054                 mov     eax, [ebp+var_14]
.text:00000057                 push    eax
.text:00000058                 mov     ecx, [ebp+var_14]
.text:0000005B                 mov     edx, [ecx]
.text:0000005D                 mov     eax, [edx+0Ch]
.text:00000060                 call    eax
.text:00000062                 cmp     esi, esp
.text:00000064                 call    __RTC_CheckEsp
.text:00000069                 mov     [ebp+var_10], eax
.text:0000006C
.text:0000006C loc_6C:                                 ; CODE XREF: CSequentialInStreamCalcSize::Read(void *,uint,uint *)+36j
.text:0000006C                 mov     ecx, [ebp+var_8]
.text:0000006F                 xor     edx, edx
.text:00000071                 mov     eax, [ebp+this]
.text:00000074                 add     ecx, [eax+10h]
.text:00000077                 adc     edx, [eax+14h]
.text:0000007A                 mov     eax, [ebp+this]
.text:0000007D                 mov     [eax+10h], ecx
.text:00000080                 mov     [eax+14h], edx
.text:00000083                 cmp     [ebp+arg_8], 0
.text:00000087                 jz      short loc_96
.text:00000089                 cmp     [ebp+var_8], 0
.text:0000008D                 jnz     short loc_96
.text:0000008F                 mov     ecx, [ebp+this]
.text:00000092                 mov     byte ptr [ecx+18h], 1
.text:00000096
.text:00000096 loc_96:                                 ; CODE XREF: CSequentialInStreamCalcSize::Read(void *,uint,uint *)+87j
.text:00000096                                         ; CSequentialInStreamCalcSize::Read(void *,uint,uint *)+8Dj
.text:00000096                 cmp     [ebp+arg_C], 0
.text:0000009A                 jz      short loc_A4
.text:0000009C                 mov     edx, [ebp+arg_C]
.text:0000009F                 mov     eax, [ebp+var_8]
.text:000000A2                 mov     [edx], eax
.text:000000A4
.text:000000A4 loc_A4:                                 ; CODE XREF: CSequentialInStreamCalcSize::Read(void *,uint,uint *)+9Aj
.text:000000A4                 mov     eax, [ebp+var_10]
.text:000000A7                 push    edx
.text:000000A8                 mov     ecx, ebp
.text:000000AA                 push    eax
.text:000000AB                 lea     edx, $LN8
.text:000000B1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000B6                 pop     eax
.text:000000B7                 pop     edx
.text:000000B8                 pop     esi
.text:000000B9                 add     esp, 14h
.text:000000BC                 cmp     ebp, esp
.text:000000BE                 call    __RTC_CheckEsp
.text:000000C3                 mov     esp, ebp
.text:000000C5                 pop     ebp
.text:000000C6                 retn    10h
.text:000000C6 ?Read@CSequentialInStreamCalcSize@@UAGJPAXIPAI@Z endp
.text:000000C6
.text:000000C6 ; ---------------------------------------------------------------------------
.text:000000C9                 align 4
.text:000000CC $LN8            dd 1                    ; DATA XREF: CSequentialInStreamCalcSize::Read(void *,uint,uint *)+ABo
.text:000000D0                 dd offset $LN7
.text:000000D4 $LN7            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000000D0o
.text:000000DC                 dd offset $LN6          ; "realProcessed"
.text:000000E0 $LN6            db 'realProcessed',0    ; DATA XREF: .text:000000DCo
.text:000000EE                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 ; __int32 __stdcall COutStreamCalcSize::Write(COutStreamCalcSize *this, const void *, unsigned int, unsigned int *)
.text:000000F0                 public ?Write@COutStreamCalcSize@@UAGJPBXIPAI@Z
.text:000000F0 ?Write@COutStreamCalcSize@@UAGJPBXIPAI@Z proc near
.text:000000F0                                         ; DATA XREF: .rdata:0000516Co
.text:000000F0
.text:000000F0 var_8           = dword ptr -8
.text:000000F0 var_4           = dword ptr -4
.text:000000F0 this            = dword ptr  8
.text:000000F0 arg_4           = dword ptr  0Ch
.text:000000F0 arg_8           = dword ptr  10h
.text:000000F0 arg_C           = dword ptr  14h
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 sub     esp, 8
.text:000000F6                 push    esi
.text:000000F7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000000FE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000105                 mov     [ebp+var_4], 0
.text:0000010C                 mov     ecx, [ebp+this]
.text:0000010F                 add     ecx, 0Ch
.text:00000112                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000117                 test    eax, eax
.text:00000119                 jz      short loc_14F
.text:0000011B                 mov     ecx, [ebp+this]
.text:0000011E                 add     ecx, 0Ch
.text:00000121                 call    ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->(void)
.text:00000126                 mov     [ebp+var_8], eax
.text:00000129                 mov     esi, esp
.text:0000012B                 lea     eax, [ebp+arg_8]
.text:0000012E                 push    eax
.text:0000012F                 mov     ecx, [ebp+arg_8]
.text:00000132                 push    ecx
.text:00000133                 mov     edx, [ebp+arg_4]
.text:00000136                 push    edx
.text:00000137                 mov     eax, [ebp+var_8]
.text:0000013A                 push    eax
.text:0000013B                 mov     ecx, [ebp+var_8]
.text:0000013E                 mov     edx, [ecx]
.text:00000140                 mov     eax, [edx+0Ch]
.text:00000143                 call    eax
.text:00000145                 cmp     esi, esp
.text:00000147                 call    __RTC_CheckEsp
.text:0000014C                 mov     [ebp+var_4], eax
.text:0000014F
.text:0000014F loc_14F:                                ; CODE XREF: COutStreamCalcSize::Write(void const *,uint,uint *)+29j
.text:0000014F                 mov     ecx, [ebp+arg_8]
.text:00000152                 xor     edx, edx
.text:00000154                 mov     eax, [ebp+this]
.text:00000157                 add     ecx, [eax+10h]
.text:0000015A                 adc     edx, [eax+14h]
.text:0000015D                 mov     eax, [ebp+this]
.text:00000160                 mov     [eax+10h], ecx
.text:00000163                 mov     [eax+14h], edx
.text:00000166                 cmp     [ebp+arg_C], 0
.text:0000016A                 jz      short loc_174
.text:0000016C                 mov     ecx, [ebp+arg_C]
.text:0000016F                 mov     edx, [ebp+arg_8]
.text:00000172                 mov     [ecx], edx
.text:00000174
.text:00000174 loc_174:                                ; CODE XREF: COutStreamCalcSize::Write(void const *,uint,uint *)+7Aj
.text:00000174                 mov     eax, [ebp+var_4]
.text:00000177                 pop     esi
.text:00000178                 add     esp, 8
.text:0000017B                 cmp     ebp, esp
.text:0000017D                 call    __RTC_CheckEsp
.text:00000182                 mov     esp, ebp
.text:00000184                 pop     ebp
.text:00000185                 retn    10h
.text:00000185 ?Write@COutStreamCalcSize@@UAGJPBXIPAI@Z endp
.text:00000185
.text:00000185 ; ---------------------------------------------------------------------------
.text:00000188                 align 10h
.text:00000190
.text:00000190 ; =============== S U B R O U T I N E =======================================
.text:00000190
.text:00000190 ; Attributes: bp-based frame
.text:00000190
.text:00000190 ; __int32 __stdcall COutStreamCalcSize::OutStreamFinish(COutStreamCalcSize *this)
.text:00000190                 public ?OutStreamFinish@COutStreamCalcSize@@UAGJXZ
.text:00000190 ?OutStreamFinish@COutStreamCalcSize@@UAGJXZ proc near
.text:00000190                                         ; DATA XREF: .rdata:00005158o
.text:00000190
.text:00000190 var_14          = dword ptr -14h
.text:00000190 var_10          = dword ptr -10h
.text:00000190 var_C           = dword ptr -0Ch
.text:00000190 var_8           = dword ptr -8
.text:00000190 var_4           = dword ptr -4
.text:00000190 this            = dword ptr  8
.text:00000190
.text:00000190                 push    ebp
.text:00000191                 mov     ebp, esp
.text:00000193                 sub     esp, 14h
.text:00000196                 push    esi
.text:00000197                 mov     eax, 0CCCCCCCCh
.text:0000019C                 mov     [ebp+var_14], eax
.text:0000019F                 mov     [ebp+var_10], eax
.text:000001A2                 mov     [ebp+var_C], eax
.text:000001A5                 mov     [ebp+var_8], eax
.text:000001A8                 mov     [ebp+var_4], eax
.text:000001AB                 mov     [ebp+var_4], 0
.text:000001B2                 mov     ecx, [ebp+this]
.text:000001B5                 add     ecx, 8
.text:000001B8                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000001BD                 test    eax, eax
.text:000001BF                 jz      short loc_21B
.text:000001C1                 lea     ecx, [ebp+var_C]
.text:000001C4                 call    ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::CMyComPtr<IOutStreamFinish>(void)
.text:000001C9                 lea     ecx, [ebp+var_C]
.text:000001CC                 call    ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator&(void)
.text:000001D1                 push    eax
.text:000001D2                 push    offset _IID_IOutStreamFinish
.text:000001D7                 mov     ecx, [ebp+this]
.text:000001DA                 add     ecx, 8
.text:000001DD                 call    ??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStreamFinish>(_GUID const &,IOutStreamFinish * *)
.text:000001E2                 lea     ecx, [ebp+var_C]
.text:000001E5                 call    ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator IOutStreamFinish *(void)
.text:000001EA                 test    eax, eax
.text:000001EC                 jz      short loc_213
.text:000001EE                 lea     ecx, [ebp+var_C]
.text:000001F1                 call    ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator->(void)
.text:000001F6                 mov     [ebp+var_14], eax
.text:000001F9                 mov     eax, [ebp+var_14]
.text:000001FC                 mov     ecx, [eax]
.text:000001FE                 mov     esi, esp
.text:00000200                 mov     edx, [ebp+var_14]
.text:00000203                 push    edx
.text:00000204                 mov     eax, [ecx+0Ch]
.text:00000207                 call    eax
.text:00000209                 cmp     esi, esp
.text:0000020B                 call    __RTC_CheckEsp
.text:00000210                 mov     [ebp+var_4], eax
.text:00000213
.text:00000213 loc_213:                                ; CODE XREF: COutStreamCalcSize::OutStreamFinish(void)+5Cj
.text:00000213                 lea     ecx, [ebp+var_C]
.text:00000216                 call    ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>(void)
.text:0000021B
.text:0000021B loc_21B:                                ; CODE XREF: COutStreamCalcSize::OutStreamFinish(void)+2Fj
.text:0000021B                 mov     eax, [ebp+var_4]
.text:0000021E                 push    edx
.text:0000021F                 mov     ecx, ebp
.text:00000221                 push    eax
.text:00000222                 lea     edx, $LN7_0
.text:00000228                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000022D                 pop     eax
.text:0000022E                 pop     edx
.text:0000022F                 pop     esi
.text:00000230                 add     esp, 14h
.text:00000233                 cmp     ebp, esp
.text:00000235                 call    __RTC_CheckEsp
.text:0000023A                 mov     esp, ebp
.text:0000023C                 pop     ebp
.text:0000023D                 retn    4
.text:0000023D ?OutStreamFinish@COutStreamCalcSize@@UAGJXZ endp
.text:0000023D
.text:0000023D ; ---------------------------------------------------------------------------
.text:00000240 $LN7_0          dd 1                    ; DATA XREF: COutStreamCalcSize::OutStreamFinish(void)+92o
.text:00000244                 dd offset $LN6_0
.text:00000248 $LN6_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000244o
.text:00000250                 dd offset $LN5          ; "outStreamFinish"
.text:00000254 $LN5            db 'outStreamFinish',0  ; DATA XREF: .text:00000250o
.text:00000264                 align 10h
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; bool __thiscall NCoderMixer2::CBondsChecks::CheckCoder(NCoderMixer2::CBondsChecks *this, unsigned int)
.text:00000270                 public ?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z
.text:00000270 ?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z proc near
.text:00000270                                         ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+F1p
.text:00000270                                         ; NCoderMixer2::CBondsChecks::Check(void)+39p
.text:00000270
.text:00000270 var_18          = dword ptr -18h
.text:00000270 var_14          = dword ptr -14h
.text:00000270 var_10          = dword ptr -10h
.text:00000270 var_C           = dword ptr -0Ch
.text:00000270 var_8           = dword ptr -8
.text:00000270 var_4           = dword ptr -4
.text:00000270 arg_0           = dword ptr  8
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 sub     esp, 18h
.text:00000276                 mov     eax, 0CCCCCCCCh
.text:0000027B                 mov     [ebp+var_18], eax
.text:0000027E                 mov     [ebp+var_14], eax
.text:00000281                 mov     [ebp+var_10], eax
.text:00000284                 mov     [ebp+var_C], eax
.text:00000287                 mov     [ebp+var_8], eax
.text:0000028A                 mov     [ebp+var_4], eax
.text:0000028D                 mov     [ebp+var_4], ecx
.text:00000290                 mov     eax, [ebp+arg_0]
.text:00000293                 push    eax
.text:00000294                 mov     ecx, [ebp+var_4]
.text:00000297                 mov     ecx, [ecx+0Ch]
.text:0000029A                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:0000029F                 mov     [ebp+var_8], eax
.text:000002A2                 mov     ecx, [ebp+var_4]
.text:000002A5                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000002AA                 cmp     [ebp+arg_0], eax
.text:000002AD                 jnb     short loc_2C2
.text:000002AF                 mov     edx, [ebp+arg_0]
.text:000002B2                 push    edx
.text:000002B3                 mov     ecx, [ebp+var_4]
.text:000002B6                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000002BB                 movzx   eax, byte ptr [eax]
.text:000002BE                 test    eax, eax
.text:000002C0                 jz      short loc_2C9
.text:000002C2
.text:000002C2 loc_2C2:                                ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+3Dj
.text:000002C2                 xor     al, al
.text:000002C4                 jmp     loc_375
.text:000002C9 ; ---------------------------------------------------------------------------
.text:000002C9
.text:000002C9 loc_2C9:                                ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+50j
.text:000002C9                 mov     ecx, [ebp+arg_0]
.text:000002CC                 push    ecx
.text:000002CD                 mov     ecx, [ebp+var_4]
.text:000002D0                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000002D5                 mov     byte ptr [eax], 1
.text:000002D8                 mov     edx, [ebp+arg_0]
.text:000002DB                 push    edx
.text:000002DC                 mov     eax, [ebp+var_4]
.text:000002DF                 mov     ecx, [eax+0Ch]
.text:000002E2                 add     ecx, 28h ; '('
.text:000002E5                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:000002EA                 mov     ecx, [eax]
.text:000002EC                 mov     [ebp+var_C], ecx
.text:000002EF                 mov     [ebp+var_10], 0
.text:000002F6                 jmp     short loc_301
.text:000002F8 ; ---------------------------------------------------------------------------
.text:000002F8
.text:000002F8 loc_2F8:                                ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+BAj
.text:000002F8                                         ; NCoderMixer2::CBondsChecks::CheckCoder(uint):loc_371j
.text:000002F8                 mov     edx, [ebp+var_10]
.text:000002FB                 add     edx, 1
.text:000002FE                 mov     [ebp+var_10], edx
.text:00000301
.text:00000301 loc_301:                                ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+86j
.text:00000301                 mov     eax, [ebp+var_8]
.text:00000304                 mov     ecx, [ebp+var_10]
.text:00000307                 cmp     ecx, [eax]
.text:00000309                 jnb     short loc_373
.text:0000030B                 mov     edx, [ebp+var_C]
.text:0000030E                 add     edx, [ebp+var_10]
.text:00000311                 mov     [ebp+var_14], edx
.text:00000314                 mov     eax, [ebp+var_14]
.text:00000317                 push    eax             ; unsigned int
.text:00000318                 mov     ecx, [ebp+var_4]
.text:0000031B                 mov     ecx, [ecx+0Ch]  ; this
.text:0000031E                 call    ?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams(uint)
.text:00000323                 movzx   edx, al
.text:00000326                 test    edx, edx
.text:00000328                 jz      short loc_32C
.text:0000032A                 jmp     short loc_2F8
.text:0000032C ; ---------------------------------------------------------------------------
.text:0000032C
.text:0000032C loc_32C:                                ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+B8j
.text:0000032C                 mov     eax, [ebp+var_14]
.text:0000032F                 push    eax             ; unsigned int
.text:00000330                 mov     ecx, [ebp+var_4]
.text:00000333                 mov     ecx, [ecx+0Ch]  ; this
.text:00000336                 call    ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)
.text:0000033B                 mov     [ebp+var_18], eax
.text:0000033E                 cmp     [ebp+var_18], 0
.text:00000342                 jge     short loc_348
.text:00000344                 xor     al, al
.text:00000346                 jmp     short loc_375
.text:00000348 ; ---------------------------------------------------------------------------
.text:00000348
.text:00000348 loc_348:                                ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+D2j
.text:00000348                 mov     edx, [ebp+var_18]
.text:0000034B                 push    edx
.text:0000034C                 mov     eax, [ebp+var_4]
.text:0000034F                 mov     ecx, [eax+0Ch]
.text:00000352                 add     ecx, 0Ch
.text:00000355                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:0000035A                 mov     ecx, [eax+4]
.text:0000035D                 push    ecx             ; unsigned int
.text:0000035E                 mov     ecx, [ebp+var_4] ; this
.text:00000361                 call    ?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z ; NCoderMixer2::CBondsChecks::CheckCoder(uint)
.text:00000366                 movzx   edx, al
.text:00000369                 test    edx, edx
.text:0000036B                 jnz     short loc_371
.text:0000036D                 xor     al, al
.text:0000036F                 jmp     short loc_375
.text:00000371 ; ---------------------------------------------------------------------------
.text:00000371
.text:00000371 loc_371:                                ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+FBj
.text:00000371                 jmp     short loc_2F8
.text:00000373 ; ---------------------------------------------------------------------------
.text:00000373
.text:00000373 loc_373:                                ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+99j
.text:00000373                 mov     al, 1
.text:00000375
.text:00000375 loc_375:                                ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+54j
.text:00000375                                         ; NCoderMixer2::CBondsChecks::CheckCoder(uint)+D6j ...
.text:00000375                 add     esp, 18h
.text:00000378                 cmp     ebp, esp
.text:0000037A                 call    __RTC_CheckEsp
.text:0000037F                 mov     esp, ebp
.text:00000381                 pop     ebp
.text:00000382                 retn    4
.text:00000382 ?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z endp
.text:00000382
.text:00000382 ; ---------------------------------------------------------------------------
.text:00000385                 align 10h
.text:00000390
.text:00000390 ; =============== S U B R O U T I N E =======================================
.text:00000390
.text:00000390 ; Attributes: bp-based frame
.text:00000390
.text:00000390 ; bool __thiscall NCoderMixer2::CBondsChecks::Check(NCoderMixer2::CBondsChecks *__hidden this)
.text:00000390                 public ?Check@CBondsChecks@NCoderMixer2@@QAE_NXZ
.text:00000390 ?Check@CBondsChecks@NCoderMixer2@@QAE_NXZ proc near
.text:00000390                                         ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+120p
.text:00000390
.text:00000390 var_8           = dword ptr -8
.text:00000390 var_4           = dword ptr -4
.text:00000390
.text:00000390                 push    ebp
.text:00000391                 mov     ebp, esp
.text:00000393                 sub     esp, 8
.text:00000396                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000039D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003A4                 mov     [ebp+var_4], ecx
.text:000003A7                 mov     eax, [ebp+var_4]
.text:000003AA                 mov     ecx, [eax+0Ch]
.text:000003AD                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:000003B2                 push    eax
.text:000003B3                 mov     ecx, [ebp+var_4]
.text:000003B6                 push    ecx
.text:000003B7                 call    ?BoolVector_Fill_False@NCoderMixer2@@YGXAAV?$CRecordVector@_N@@I@Z ; NCoderMixer2::BoolVector_Fill_False(CRecordVector<bool> &,uint)
.text:000003BC                 mov     edx, [ebp+var_4]
.text:000003BF                 mov     eax, [edx+0Ch]
.text:000003C2                 mov     ecx, [eax+24h]
.text:000003C5                 push    ecx             ; unsigned int
.text:000003C6                 mov     ecx, [ebp+var_4] ; this
.text:000003C9                 call    ?CheckCoder@CBondsChecks@NCoderMixer2@@AAE_NI@Z ; NCoderMixer2::CBondsChecks::CheckCoder(uint)
.text:000003CE                 movzx   edx, al
.text:000003D1                 test    edx, edx
.text:000003D3                 jnz     short loc_3D9
.text:000003D5                 xor     al, al
.text:000003D7                 jmp     short loc_413
.text:000003D9 ; ---------------------------------------------------------------------------
.text:000003D9
.text:000003D9 loc_3D9:                                ; CODE XREF: NCoderMixer2::CBondsChecks::Check(void)+43j
.text:000003D9                 mov     [ebp+var_8], 0
.text:000003E0                 jmp     short loc_3EB
.text:000003E2 ; ---------------------------------------------------------------------------
.text:000003E2
.text:000003E2 loc_3E2:                                ; CODE XREF: NCoderMixer2::CBondsChecks::Check(void):loc_40Fj
.text:000003E2                 mov     eax, [ebp+var_8]
.text:000003E5                 add     eax, 1
.text:000003E8                 mov     [ebp+var_8], eax
.text:000003EB
.text:000003EB loc_3EB:                                ; CODE XREF: NCoderMixer2::CBondsChecks::Check(void)+50j
.text:000003EB                 mov     ecx, [ebp+var_4]
.text:000003EE                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000003F3                 cmp     [ebp+var_8], eax
.text:000003F6                 jnb     short loc_411
.text:000003F8                 mov     ecx, [ebp+var_8]
.text:000003FB                 push    ecx
.text:000003FC                 mov     ecx, [ebp+var_4]
.text:000003FF                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00000404                 movzx   edx, byte ptr [eax]
.text:00000407                 test    edx, edx
.text:00000409                 jnz     short loc_40F
.text:0000040B                 xor     al, al
.text:0000040D                 jmp     short loc_413
.text:0000040F ; ---------------------------------------------------------------------------
.text:0000040F
.text:0000040F loc_40F:                                ; CODE XREF: NCoderMixer2::CBondsChecks::Check(void)+79j
.text:0000040F                 jmp     short loc_3E2
.text:00000411 ; ---------------------------------------------------------------------------
.text:00000411
.text:00000411 loc_411:                                ; CODE XREF: NCoderMixer2::CBondsChecks::Check(void)+66j
.text:00000411                 mov     al, 1
.text:00000413
.text:00000413 loc_413:                                ; CODE XREF: NCoderMixer2::CBondsChecks::Check(void)+47j
.text:00000413                                         ; NCoderMixer2::CBondsChecks::Check(void)+7Dj
.text:00000413                 add     esp, 8
.text:00000416                 cmp     ebp, esp
.text:00000418                 call    __RTC_CheckEsp
.text:0000041D                 mov     esp, ebp
.text:0000041F                 pop     ebp
.text:00000420                 retn
.text:00000420 ?Check@CBondsChecks@NCoderMixer2@@QAE_NXZ endp
.text:00000420
.text:00000420 ; ---------------------------------------------------------------------------
.text:00000421                 align 10h
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430 ; void __stdcall NCoderMixer2::BoolVector_Fill_False(class CRecordVector<bool> &, unsigned int)
.text:00000430 ?BoolVector_Fill_False@NCoderMixer2@@YGXAAV?$CRecordVector@_N@@I@Z proc near
.text:00000430                                         ; CODE XREF: NCoderMixer2::CBondsChecks::Check(void)+27p
.text:00000430
.text:00000430 var_8           = dword ptr -8
.text:00000430 var_4           = dword ptr -4
.text:00000430 arg_0           = dword ptr  8
.text:00000430 arg_4           = dword ptr  0Ch
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 sub     esp, 8
.text:00000436                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000043D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000444                 mov     eax, [ebp+arg_4]
.text:00000447                 push    eax
.text:00000448                 mov     ecx, [ebp+arg_0]
.text:0000044B                 call    ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize(uint)
.text:00000450                 push    0
.text:00000452                 mov     ecx, [ebp+arg_0]
.text:00000455                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000045A                 mov     [ebp+var_4], eax
.text:0000045D                 mov     [ebp+var_8], 0
.text:00000464                 jmp     short loc_46F
.text:00000466 ; ---------------------------------------------------------------------------
.text:00000466
.text:00000466 loc_466:                                ; CODE XREF: NCoderMixer2::BoolVector_Fill_False(CRecordVector<bool> &,uint)+50j
.text:00000466                 mov     ecx, [ebp+var_8]
.text:00000469                 add     ecx, 1
.text:0000046C                 mov     [ebp+var_8], ecx
.text:0000046F
.text:0000046F loc_46F:                                ; CODE XREF: NCoderMixer2::BoolVector_Fill_False(CRecordVector<bool> &,uint)+34j
.text:0000046F                 mov     edx, [ebp+var_8]
.text:00000472                 cmp     edx, [ebp+arg_4]
.text:00000475                 jnb     short loc_482
.text:00000477                 mov     eax, [ebp+var_4]
.text:0000047A                 add     eax, [ebp+var_8]
.text:0000047D                 mov     byte ptr [eax], 0
.text:00000480                 jmp     short loc_466
.text:00000482 ; ---------------------------------------------------------------------------
.text:00000482
.text:00000482 loc_482:                                ; CODE XREF: NCoderMixer2::BoolVector_Fill_False(CRecordVector<bool> &,uint)+45j
.text:00000482                 add     esp, 8
.text:00000485                 cmp     ebp, esp
.text:00000487                 call    __RTC_CheckEsp
.text:0000048C                 mov     esp, ebp
.text:0000048E                 pop     ebp
.text:0000048F                 retn    8
.text:0000048F ?BoolVector_Fill_False@NCoderMixer2@@YGXAAV?$CRecordVector@_N@@I@Z endp
.text:0000048F
.text:0000048F ; ---------------------------------------------------------------------------
.text:00000492                 align 10h
.text:000004A0
.text:000004A0 ; =============== S U B R O U T I N E =======================================
.text:000004A0
.text:000004A0 ; Attributes: bp-based frame
.text:000004A0
.text:000004A0 ; void __thiscall NCoderMixer2::CBindInfo::ClearMaps(NCoderMixer2::CBindInfo *__hidden this)
.text:000004A0                 public ?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ
.text:000004A0 ?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ proc near
.text:000004A0                                         ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+3Ep
.text:000004A0
.text:000004A0 var_4           = dword ptr -4
.text:000004A0
.text:000004A0                 push    ebp
.text:000004A1                 mov     ebp, esp
.text:000004A3                 push    ecx
.text:000004A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004AB                 mov     [ebp+var_4], ecx
.text:000004AE                 mov     ecx, [ebp+var_4]
.text:000004B1                 add     ecx, 28h ; '('
.text:000004B4                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:000004B9                 mov     ecx, [ebp+var_4]
.text:000004BC                 add     ecx, 34h ; '4'
.text:000004BF                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:000004C4                 add     esp, 4
.text:000004C7                 cmp     ebp, esp
.text:000004C9                 call    __RTC_CheckEsp
.text:000004CE                 mov     esp, ebp
.text:000004D0                 pop     ebp
.text:000004D1                 retn
.text:000004D1 ?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ endp
.text:000004D1
.text:000004D1 ; ---------------------------------------------------------------------------
.text:000004D2                 align 10h
.text:000004E0
.text:000004E0 ; =============== S U B R O U T I N E =======================================
.text:000004E0
.text:000004E0 ; Attributes: bp-based frame
.text:000004E0
.text:000004E0 ; bool __thiscall NCoderMixer2::CBindInfo::CalcMapsAndCheck(NCoderMixer2::CBindInfo *__hidden this)
.text:000004E0                 public ?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ
.text:000004E0 ?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ proc near
.text:000004E0
.text:000004E0 var_3C          = byte ptr -3Ch
.text:000004E0 var_39          = byte ptr -39h
.text:000004E0 var_34          = byte ptr -34h
.text:000004E0 var_28          = dword ptr -28h
.text:000004E0 var_20          = dword ptr -20h
.text:000004E0 var_1C          = dword ptr -1Ch
.text:000004E0 var_18          = dword ptr -18h
.text:000004E0 var_14          = dword ptr -14h
.text:000004E0 var_10          = dword ptr -10h
.text:000004E0 var_C           = dword ptr -0Ch
.text:000004E0 var_4           = dword ptr -4
.text:000004E0
.text:000004E0                 push    ebp
.text:000004E1                 mov     ebp, esp
.text:000004E3                 push    0FFFFFFFFh
.text:000004E5                 push    offset __ehhandler$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ
.text:000004EA                 mov     eax, large fs:0
.text:000004F0                 push    eax
.text:000004F1                 sub     esp, 30h
.text:000004F4                 push    esi
.text:000004F5                 push    edi
.text:000004F6                 push    ecx
.text:000004F7                 lea     edi, [ebp+var_3C]
.text:000004FA                 mov     ecx, 0Ch
.text:000004FF                 mov     eax, 0CCCCCCCCh
.text:00000504                 rep stosd
.text:00000506                 pop     ecx
.text:00000507                 mov     eax, dword ptr ds:___security_cookie
.text:0000050C                 xor     eax, ebp
.text:0000050E                 push    eax
.text:0000050F                 lea     eax, [ebp+var_C]
.text:00000512                 mov     large fs:0, eax
.text:00000518                 mov     [ebp+var_10], ecx
.text:0000051B                 mov     ecx, [ebp+var_10] ; this
.text:0000051E                 call    ?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ ; NCoderMixer2::CBindInfo::ClearMaps(void)
.text:00000523                 mov     [ebp+var_14], 0
.text:0000052A                 mov     ecx, [ebp+var_10]
.text:0000052D                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00000532                 test    eax, eax
.text:00000534                 jnz     short loc_53D
.text:00000536                 xor     al, al
.text:00000538                 jmp     loc_61A
.text:0000053D ; ---------------------------------------------------------------------------
.text:0000053D
.text:0000053D loc_53D:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+54j
.text:0000053D                 mov     ecx, [ebp+var_10]
.text:00000540                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00000545                 mov     esi, eax
.text:00000547                 sub     esi, 1
.text:0000054A                 mov     ecx, [ebp+var_10]
.text:0000054D                 add     ecx, 0Ch
.text:00000550                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00000555                 cmp     esi, eax
.text:00000557                 jz      short loc_560
.text:00000559                 xor     al, al
.text:0000055B                 jmp     loc_61A
.text:00000560 ; ---------------------------------------------------------------------------
.text:00000560
.text:00000560 loc_560:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+77j
.text:00000560                 mov     [ebp+var_18], 0
.text:00000567                 jmp     short loc_572
.text:00000569 ; ---------------------------------------------------------------------------
.text:00000569
.text:00000569 loc_569:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+F5j
.text:00000569                 mov     eax, [ebp+var_18]
.text:0000056C                 add     eax, 1
.text:0000056F                 mov     [ebp+var_18], eax
.text:00000572
.text:00000572 loc_572:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+87j
.text:00000572                 mov     ecx, [ebp+var_10]
.text:00000575                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:0000057A                 cmp     [ebp+var_18], eax
.text:0000057D                 jnb     short loc_5D7
.text:0000057F                 mov     ecx, [ebp+var_14]
.text:00000582                 push    ecx
.text:00000583                 mov     ecx, [ebp+var_10]
.text:00000586                 add     ecx, 28h ; '('
.text:00000589                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:0000058E                 mov     edx, [ebp+var_18]
.text:00000591                 push    edx
.text:00000592                 mov     ecx, [ebp+var_10]
.text:00000595                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:0000059A                 mov     [ebp+var_1C], eax
.text:0000059D                 mov     [ebp+var_20], 0
.text:000005A4                 jmp     short loc_5AF
.text:000005A6 ; ---------------------------------------------------------------------------
.text:000005A6
.text:000005A6 loc_5A6:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+E8j
.text:000005A6                 mov     eax, [ebp+var_20]
.text:000005A9                 add     eax, 1
.text:000005AC                 mov     [ebp+var_20], eax
.text:000005AF
.text:000005AF loc_5AF:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+C4j
.text:000005AF                 mov     ecx, [ebp+var_1C]
.text:000005B2                 mov     edx, [ebp+var_20]
.text:000005B5                 cmp     edx, [ecx]
.text:000005B7                 jnb     short loc_5CA
.text:000005B9                 mov     eax, [ebp+var_18]
.text:000005BC                 push    eax
.text:000005BD                 mov     ecx, [ebp+var_10]
.text:000005C0                 add     ecx, 34h ; '4'
.text:000005C3                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:000005C8                 jmp     short loc_5A6
.text:000005CA ; ---------------------------------------------------------------------------
.text:000005CA
.text:000005CA loc_5CA:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+D7j
.text:000005CA                 mov     ecx, [ebp+var_1C]
.text:000005CD                 mov     edx, [ebp+var_14]
.text:000005D0                 add     edx, [ecx]
.text:000005D2                 mov     [ebp+var_14], edx
.text:000005D5                 jmp     short loc_569
.text:000005D7 ; ---------------------------------------------------------------------------
.text:000005D7
.text:000005D7 loc_5D7:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+9Dj
.text:000005D7                 mov     ecx, [ebp+var_10] ; this
.text:000005DA                 call    ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams(void)
.text:000005DF                 cmp     [ebp+var_14], eax
.text:000005E2                 jz      short loc_5E8
.text:000005E4                 xor     al, al
.text:000005E6                 jmp     short loc_61A
.text:000005E8 ; ---------------------------------------------------------------------------
.text:000005E8
.text:000005E8 loc_5E8:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+102j
.text:000005E8                 lea     ecx, [ebp+var_34] ; this
.text:000005EB                 call    ??0CBondsChecks@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBondsChecks::CBondsChecks(void)
.text:000005F0                 mov     [ebp+var_4], 0
.text:000005F7                 mov     eax, [ebp+var_10]
.text:000005FA                 mov     [ebp+var_28], eax
.text:000005FD                 lea     ecx, [ebp+var_34] ; this
.text:00000600                 call    ?Check@CBondsChecks@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBondsChecks::Check(void)
.text:00000605                 mov     [ebp+var_39], al
.text:00000608                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000060F                 lea     ecx, [ebp+var_34] ; this
.text:00000612                 call    ??1CBondsChecks@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBondsChecks::~CBondsChecks(void)
.text:00000617                 mov     al, [ebp+var_39]
.text:0000061A
.text:0000061A loc_61A:                                ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+58j
.text:0000061A                                         ; NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+7Bj ...
.text:0000061A                 push    edx
.text:0000061B                 mov     ecx, ebp
.text:0000061D                 push    eax
.text:0000061E                 lea     edx, $LN16
.text:00000624                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000629                 pop     eax
.text:0000062A                 pop     edx
.text:0000062B                 mov     ecx, [ebp+var_C]
.text:0000062E                 mov     large fs:0, ecx
.text:00000635                 pop     ecx
.text:00000636                 pop     edi
.text:00000637                 pop     esi
.text:00000638                 add     esp, 3Ch
.text:0000063B                 cmp     ebp, esp
.text:0000063D                 call    __RTC_CheckEsp
.text:00000642                 mov     esp, ebp
.text:00000644                 pop     ebp
.text:00000645                 retn
.text:00000645 ?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ endp
.text:00000645
.text:00000645 ; ---------------------------------------------------------------------------
.text:00000646                 align 4
.text:00000648 $LN16           dd 1                    ; DATA XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+13Eo
.text:0000064C                 dd offset $LN15
.text:00000650 $LN15           db 0CCh                 ; DATA XREF: .text:0000064Co
.text:00000651                 db 3 dup(0FFh)
.text:00000654                 dd 10h
.text:00000658                 dd offset $LN13
.text:0000065C $LN13           dd 0CC006362h           ; DATA XREF: .text:00000658o
.text:00000660
.text:00000660 ; =============== S U B R O U T I N E =======================================
.text:00000660
.text:00000660 ; Attributes: bp-based frame
.text:00000660
.text:00000660 ; void __thiscall NCoderMixer2::CCoder::SetCoderInfo(NCoderMixer2::CCoder *this, const unsigned __int64 *, const unsigned __int64 *const *)
.text:00000660                 public ?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z
.text:00000660 ?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z proc near
.text:00000660                                         ; CODE XREF: NCoderMixer2::CMixerST::SetCoderInfo(uint,unsigned __int64 const *,unsigned __int64 const * const *)+27p
.text:00000660
.text:00000660 var_8           = dword ptr -8
.text:00000660 var_4           = dword ptr -4
.text:00000660 arg_0           = dword ptr  8
.text:00000660 arg_4           = dword ptr  0Ch
.text:00000660
.text:00000660                 push    ebp
.text:00000661                 mov     ebp, esp
.text:00000663                 sub     esp, 8
.text:00000666                 push    esi
.text:00000667                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000066E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000675                 mov     [ebp+var_4], ecx
.text:00000678                 cmp     [ebp+arg_0], 0
.text:0000067C                 jz      short loc_69D
.text:0000067E                 mov     eax, [ebp+var_4]
.text:00000681                 mov     ecx, [ebp+arg_0]
.text:00000684                 mov     edx, [ecx]
.text:00000686                 mov     [eax+10h], edx
.text:00000689                 mov     ecx, [ecx+4]
.text:0000068C                 mov     [eax+14h], ecx
.text:0000068F                 mov     edx, [ebp+var_4]
.text:00000692                 add     edx, 10h
.text:00000695                 mov     eax, [ebp+var_4]
.text:00000698                 mov     [eax+18h], edx
.text:0000069B                 jmp     short loc_6B8
.text:0000069D ; ---------------------------------------------------------------------------
.text:0000069D
.text:0000069D loc_69D:                                ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+1Cj
.text:0000069D                 mov     ecx, [ebp+var_4]
.text:000006A0                 mov     dword ptr [ecx+10h], 0
.text:000006A7                 mov     dword ptr [ecx+14h], 0
.text:000006AE                 mov     edx, [ebp+var_4]
.text:000006B1                 mov     dword ptr [edx+18h], 0
.text:000006B8
.text:000006B8 loc_6B8:                                ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+3Bj
.text:000006B8                 mov     eax, [ebp+var_4]
.text:000006BB                 mov     ecx, [eax+8]
.text:000006BE                 push    ecx
.text:000006BF                 mov     ecx, [ebp+var_4]
.text:000006C2                 add     ecx, 1Ch
.text:000006C5                 call    ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndSetSize(uint)
.text:000006CA                 mov     edx, [ebp+var_4]
.text:000006CD                 mov     eax, [edx+8]
.text:000006D0                 push    eax
.text:000006D1                 mov     ecx, [ebp+var_4]
.text:000006D4                 add     ecx, 28h ; '('
.text:000006D7                 call    ?ClearAndSetSize@?$CRecordVector@PB_K@@QAEXI@Z ; CRecordVector<unsigned __int64 const *>::ClearAndSetSize(uint)
.text:000006DC                 mov     [ebp+var_8], 0
.text:000006E3                 jmp     short loc_6EE
.text:000006E5 ; ---------------------------------------------------------------------------
.text:000006E5
.text:000006E5 loc_6E5:                                ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *):loc_786j
.text:000006E5                 mov     ecx, [ebp+var_8]
.text:000006E8                 add     ecx, 1
.text:000006EB                 mov     [ebp+var_8], ecx
.text:000006EE
.text:000006EE loc_6EE:                                ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+83j
.text:000006EE                 mov     edx, [ebp+var_4]
.text:000006F1                 mov     eax, [ebp+var_8]
.text:000006F4                 cmp     eax, [edx+8]
.text:000006F7                 jnb     loc_78B
.text:000006FD                 cmp     [ebp+arg_4], 0
.text:00000701                 jz      short loc_755
.text:00000703                 mov     ecx, [ebp+var_8]
.text:00000706                 mov     edx, [ebp+arg_4]
.text:00000709                 cmp     dword ptr [edx+ecx*4], 0
.text:0000070D                 jz      short loc_755
.text:0000070F                 mov     eax, [ebp+var_8]
.text:00000712                 mov     ecx, [ebp+arg_4]
.text:00000715                 mov     esi, [ecx+eax*4]
.text:00000718                 mov     edx, [ebp+var_8]
.text:0000071B                 push    edx
.text:0000071C                 mov     ecx, [ebp+var_4]
.text:0000071F                 add     ecx, 1Ch
.text:00000722                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000727                 mov     ecx, [esi]
.text:00000729                 mov     [eax], ecx
.text:0000072B                 mov     edx, [esi+4]
.text:0000072E                 mov     [eax+4], edx
.text:00000731                 mov     eax, [ebp+var_8]
.text:00000734                 push    eax
.text:00000735                 mov     ecx, [ebp+var_4]
.text:00000738                 add     ecx, 1Ch
.text:0000073B                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000740                 mov     esi, eax
.text:00000742                 mov     ecx, [ebp+var_8]
.text:00000745                 push    ecx
.text:00000746                 mov     ecx, [ebp+var_4]
.text:00000749                 add     ecx, 28h ; '('
.text:0000074C                 call    ??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z ; CRecordVector<unsigned __int64 const *>::operator[](uint)
.text:00000751                 mov     [eax], esi
.text:00000753                 jmp     short loc_786
.text:00000755 ; ---------------------------------------------------------------------------
.text:00000755
.text:00000755 loc_755:                                ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+A1j
.text:00000755                                         ; NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+ADj
.text:00000755                 mov     edx, [ebp+var_8]
.text:00000758                 push    edx
.text:00000759                 mov     ecx, [ebp+var_4]
.text:0000075C                 add     ecx, 1Ch
.text:0000075F                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000764                 mov     dword ptr [eax], 0
.text:0000076A                 mov     dword ptr [eax+4], 0
.text:00000771                 mov     eax, [ebp+var_8]
.text:00000774                 push    eax
.text:00000775                 mov     ecx, [ebp+var_4]
.text:00000778                 add     ecx, 28h ; '('
.text:0000077B                 call    ??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z ; CRecordVector<unsigned __int64 const *>::operator[](uint)
.text:00000780                 mov     dword ptr [eax], 0
.text:00000786
.text:00000786 loc_786:                                ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+F3j
.text:00000786                 jmp     loc_6E5
.text:0000078B ; ---------------------------------------------------------------------------
.text:0000078B
.text:0000078B loc_78B:                                ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+97j
.text:0000078B                 pop     esi
.text:0000078C                 add     esp, 8
.text:0000078F                 cmp     ebp, esp
.text:00000791                 call    __RTC_CheckEsp
.text:00000796                 mov     esp, ebp
.text:00000798                 pop     ebp
.text:00000799                 retn    8
.text:00000799 ?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z endp
.text:00000799
.text:00000799 ; ---------------------------------------------------------------------------
.text:0000079C                 align 10h
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; bool __thiscall NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(NCoderMixer2::CMixer *this, unsigned int)
.text:000007A0                 public ?Is_UnpackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z
.text:000007A0 ?Is_UnpackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z proc near
.text:000007A0                                         ; CODE XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+99p
.text:000007A0
.text:000007A0 var_10          = dword ptr -10h
.text:000007A0 var_C           = dword ptr -0Ch
.text:000007A0 var_8           = dword ptr -8
.text:000007A0 var_4           = dword ptr -4
.text:000007A0 arg_0           = dword ptr  8
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 sub     esp, 10h
.text:000007A6                 mov     eax, 0CCCCCCCCh
.text:000007AB                 mov     [ebp+var_10], eax
.text:000007AE                 mov     [ebp+var_C], eax
.text:000007B1                 mov     [ebp+var_8], eax
.text:000007B4                 mov     [ebp+var_4], eax
.text:000007B7                 mov     [ebp+var_4], ecx
.text:000007BA                 mov     eax, [ebp+var_4]
.text:000007BD                 mov     ecx, [ebp+arg_0]
.text:000007C0                 cmp     ecx, [eax+28h]
.text:000007C3                 jnz     short loc_7C9
.text:000007C5                 mov     al, 1
.text:000007C7                 jmp     short loc_83E
.text:000007C9 ; ---------------------------------------------------------------------------
.text:000007C9
.text:000007C9 loc_7C9:                                ; CODE XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+23j
.text:000007C9                 mov     edx, [ebp+arg_0]
.text:000007CC                 push    edx             ; unsigned int
.text:000007CD                 mov     ecx, [ebp+var_4]
.text:000007D0                 add     ecx, 4          ; this
.text:000007D3                 call    ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)
.text:000007D8                 mov     [ebp+var_8], eax
.text:000007DB                 cmp     [ebp+var_8], 0
.text:000007DF                 jge     short loc_7F6
.text:000007E1                 mov     [ebp+var_10], 13377C5h
.text:000007E8                 push    offset __TI1H
.text:000007ED                 lea     eax, [ebp+var_10]
.text:000007F0                 push    eax
.text:000007F1                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000007F6 ; ---------------------------------------------------------------------------
.text:000007F6
.text:000007F6 loc_7F6:                                ; CODE XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+3Fj
.text:000007F6                 mov     ecx, [ebp+var_8]
.text:000007F9                 push    ecx
.text:000007FA                 mov     ecx, [ebp+var_4]
.text:000007FD                 add     ecx, 10h
.text:00000800                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00000805                 mov     edx, [eax]
.text:00000807                 push    edx
.text:00000808                 mov     ecx, [ebp+var_4]
.text:0000080B                 add     ecx, 38h ; '8'
.text:0000080E                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000813                 mov     eax, [eax]
.text:00000815                 mov     [ebp+var_C], eax
.text:00000818                 mov     ecx, [ebp+var_C]
.text:0000081B                 push    ecx
.text:0000081C                 mov     ecx, [ebp+var_4]
.text:0000081F                 add     ecx, 44h ; 'D'
.text:00000822                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00000827                 movzx   edx, byte ptr [eax]
.text:0000082A                 test    edx, edx
.text:0000082C                 jnz     short loc_832
.text:0000082E                 xor     al, al
.text:00000830                 jmp     short loc_83E
.text:00000832 ; ---------------------------------------------------------------------------
.text:00000832
.text:00000832 loc_832:                                ; CODE XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+8Cj
.text:00000832                 mov     eax, [ebp+var_C]
.text:00000835                 push    eax             ; unsigned int
.text:00000836                 mov     ecx, [ebp+var_4] ; this
.text:00000839                 call    ?Is_UnpackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)
.text:0000083E
.text:0000083E loc_83E:                                ; CODE XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+27j
.text:0000083E                                         ; NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+90j
.text:0000083E                 add     esp, 10h
.text:00000841                 cmp     ebp, esp
.text:00000843                 call    __RTC_CheckEsp
.text:00000848                 mov     esp, ebp
.text:0000084A                 pop     ebp
.text:0000084B                 retn    4
.text:0000084B ?Is_UnpackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z endp
.text:0000084B
.text:0000084B ; ---------------------------------------------------------------------------
.text:0000084E                 align 10h
.text:00000850
.text:00000850 ; =============== S U B R O U T I N E =======================================
.text:00000850
.text:00000850 ; Attributes: bp-based frame
.text:00000850
.text:00000850 ; bool __thiscall NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(NCoderMixer2::CMixer *this, unsigned int)
.text:00000850                 public ?Is_PackSize_Correct_for_Stream@CMixer@NCoderMixer2@@AAE_NI@Z
.text:00000850 ?Is_PackSize_Correct_for_Stream@CMixer@NCoderMixer2@@AAE_NI@Z proc near
.text:00000850                                         ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)+66p
.text:00000850
.text:00000850 var_10          = dword ptr -10h
.text:00000850 var_C           = dword ptr -0Ch
.text:00000850 var_8           = dword ptr -8
.text:00000850 var_4           = dword ptr -4
.text:00000850 arg_0           = dword ptr  8
.text:00000850
.text:00000850                 push    ebp
.text:00000851                 mov     ebp, esp
.text:00000853                 sub     esp, 10h
.text:00000856                 mov     eax, 0CCCCCCCCh
.text:0000085B                 mov     [ebp+var_10], eax
.text:0000085E                 mov     [ebp+var_C], eax
.text:00000861                 mov     [ebp+var_8], eax
.text:00000864                 mov     [ebp+var_4], eax
.text:00000867                 mov     [ebp+var_4], ecx
.text:0000086A                 mov     eax, [ebp+arg_0]
.text:0000086D                 push    eax             ; unsigned int
.text:0000086E                 mov     ecx, [ebp+var_4]
.text:00000871                 add     ecx, 4          ; this
.text:00000874                 call    ?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams(uint)
.text:00000879                 movzx   ecx, al
.text:0000087C                 test    ecx, ecx
.text:0000087E                 jz      short loc_884
.text:00000880                 mov     al, 1
.text:00000882                 jmp     short loc_8EC
.text:00000884 ; ---------------------------------------------------------------------------
.text:00000884
.text:00000884 loc_884:                                ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+2Ej
.text:00000884                 mov     edx, [ebp+arg_0]
.text:00000887                 push    edx             ; unsigned int
.text:00000888                 mov     ecx, [ebp+var_4]
.text:0000088B                 add     ecx, 4          ; this
.text:0000088E                 call    ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)
.text:00000893                 mov     [ebp+var_8], eax
.text:00000896                 cmp     [ebp+var_8], 0
.text:0000089A                 jge     short loc_8B1
.text:0000089C                 mov     [ebp+var_10], 13377C5h
.text:000008A3                 push    offset __TI1H
.text:000008A8                 lea     eax, [ebp+var_10]
.text:000008AB                 push    eax
.text:000008AC                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000008B1 ; ---------------------------------------------------------------------------
.text:000008B1
.text:000008B1 loc_8B1:                                ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+4Aj
.text:000008B1                 mov     ecx, [ebp+var_8]
.text:000008B4                 push    ecx
.text:000008B5                 mov     ecx, [ebp+var_4]
.text:000008B8                 add     ecx, 10h
.text:000008BB                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:000008C0                 mov     edx, [eax+4]
.text:000008C3                 mov     [ebp+var_C], edx
.text:000008C6                 mov     eax, [ebp+var_C]
.text:000008C9                 push    eax
.text:000008CA                 mov     ecx, [ebp+var_4]
.text:000008CD                 add     ecx, 44h ; 'D'
.text:000008D0                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000008D5                 movzx   ecx, byte ptr [eax]
.text:000008D8                 test    ecx, ecx
.text:000008DA                 jnz     short loc_8E0
.text:000008DC                 xor     al, al
.text:000008DE                 jmp     short loc_8EC
.text:000008E0 ; ---------------------------------------------------------------------------
.text:000008E0
.text:000008E0 loc_8E0:                                ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+8Aj
.text:000008E0                 mov     edx, [ebp+var_C]
.text:000008E3                 push    edx             ; unsigned int
.text:000008E4                 mov     ecx, [ebp+var_4] ; this
.text:000008E7                 call    ?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)
.text:000008EC
.text:000008EC loc_8EC:                                ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+32j
.text:000008EC                                         ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+8Ej
.text:000008EC                 add     esp, 10h
.text:000008EF                 cmp     ebp, esp
.text:000008F1                 call    __RTC_CheckEsp
.text:000008F6                 mov     esp, ebp
.text:000008F8                 pop     ebp
.text:000008F9                 retn    4
.text:000008F9 ?Is_PackSize_Correct_for_Stream@CMixer@NCoderMixer2@@AAE_NI@Z endp
.text:000008F9
.text:000008F9 ; ---------------------------------------------------------------------------
.text:000008FC                 align 10h
.text:00000900
.text:00000900 ; =============== S U B R O U T I N E =======================================
.text:00000900
.text:00000900 ; Attributes: bp-based frame
.text:00000900
.text:00000900 ; bool __thiscall NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(NCoderMixer2::CMixer *this, unsigned int)
.text:00000900                 public ?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z
.text:00000900 ?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z proc near
.text:00000900                                         ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+97p
.text:00000900
.text:00000900 var_10          = dword ptr -10h
.text:00000900 var_C           = dword ptr -0Ch
.text:00000900 var_8           = dword ptr -8
.text:00000900 var_4           = dword ptr -4
.text:00000900 arg_0           = dword ptr  8
.text:00000900
.text:00000900                 push    ebp
.text:00000901                 mov     ebp, esp
.text:00000903                 sub     esp, 10h
.text:00000906                 mov     eax, 0CCCCCCCCh
.text:0000090B                 mov     [ebp+var_10], eax
.text:0000090E                 mov     [ebp+var_C], eax
.text:00000911                 mov     [ebp+var_8], eax
.text:00000914                 mov     [ebp+var_4], eax
.text:00000917                 mov     [ebp+var_4], ecx
.text:0000091A                 mov     eax, [ebp+arg_0]
.text:0000091D                 push    eax
.text:0000091E                 mov     ecx, [ebp+var_4]
.text:00000921                 add     ecx, 2Ch ; ','
.text:00000924                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000929                 mov     ecx, [eax]
.text:0000092B                 mov     [ebp+var_8], ecx
.text:0000092E                 mov     edx, [ebp+arg_0]
.text:00000931                 push    edx
.text:00000932                 mov     ecx, [ebp+var_4]
.text:00000935                 add     ecx, 4
.text:00000938                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:0000093D                 mov     eax, [eax]
.text:0000093F                 mov     [ebp+var_C], eax
.text:00000942                 mov     [ebp+var_10], 0
.text:00000949                 jmp     short loc_954
.text:0000094B ; ---------------------------------------------------------------------------
.text:0000094B
.text:0000094B loc_94B:                                ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint):loc_976j
.text:0000094B                 mov     ecx, [ebp+var_10]
.text:0000094E                 add     ecx, 1
.text:00000951                 mov     [ebp+var_10], ecx
.text:00000954
.text:00000954 loc_954:                                ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)+49j
.text:00000954                 mov     edx, [ebp+var_10]
.text:00000957                 cmp     edx, [ebp+var_C]
.text:0000095A                 jnb     short loc_978
.text:0000095C                 mov     eax, [ebp+var_8]
.text:0000095F                 add     eax, [ebp+var_10]
.text:00000962                 push    eax             ; unsigned int
.text:00000963                 mov     ecx, [ebp+var_4] ; this
.text:00000966                 call    ?Is_PackSize_Correct_for_Stream@CMixer@NCoderMixer2@@AAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)
.text:0000096B                 movzx   ecx, al
.text:0000096E                 test    ecx, ecx
.text:00000970                 jnz     short loc_976
.text:00000972                 xor     al, al
.text:00000974                 jmp     short loc_97A
.text:00000976 ; ---------------------------------------------------------------------------
.text:00000976
.text:00000976 loc_976:                                ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)+70j
.text:00000976                 jmp     short loc_94B
.text:00000978 ; ---------------------------------------------------------------------------
.text:00000978
.text:00000978 loc_978:                                ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)+5Aj
.text:00000978                 mov     al, 1
.text:0000097A
.text:0000097A loc_97A:                                ; CODE XREF: NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)+74j
.text:0000097A                 add     esp, 10h
.text:0000097D                 cmp     ebp, esp
.text:0000097F                 call    __RTC_CheckEsp
.text:00000984                 mov     esp, ebp
.text:00000986                 pop     ebp
.text:00000987                 retn    4
.text:00000987 ?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z endp
.text:00000987
.text:00000987 ; ---------------------------------------------------------------------------
.text:0000098A                 align 10h
.text:00000990
.text:00000990 ; =============== S U B R O U T I N E =======================================
.text:00000990
.text:00000990 ; Attributes: bp-based frame
.text:00000990
.text:00000990 ; bool __thiscall NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(NCoderMixer2::CMixer *this, unsigned int)
.text:00000990                 public ?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z
.text:00000990 ?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z proc near
.text:00000990                                         ; CODE XREF: NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+E6p
.text:00000990
.text:00000990 var_1C          = dword ptr -1Ch
.text:00000990 var_18          = dword ptr -18h
.text:00000990 var_14          = dword ptr -14h
.text:00000990 var_10          = dword ptr -10h
.text:00000990 var_C           = dword ptr -0Ch
.text:00000990 var_8           = dword ptr -8
.text:00000990 var_4           = dword ptr -4
.text:00000990 arg_0           = dword ptr  8
.text:00000990
.text:00000990                 push    ebp
.text:00000991                 mov     ebp, esp
.text:00000993                 sub     esp, 1Ch
.text:00000996                 mov     eax, 0CCCCCCCCh
.text:0000099B                 mov     [ebp+var_1C], eax
.text:0000099E                 mov     [ebp+var_18], eax
.text:000009A1                 mov     [ebp+var_14], eax
.text:000009A4                 mov     [ebp+var_10], eax
.text:000009A7                 mov     [ebp+var_C], eax
.text:000009AA                 mov     [ebp+var_8], eax
.text:000009AD                 mov     [ebp+var_4], eax
.text:000009B0                 mov     [ebp+var_4], ecx
.text:000009B3                 mov     eax, [ebp+arg_0]
.text:000009B6                 push    eax
.text:000009B7                 mov     ecx, [ebp+var_4]
.text:000009BA                 add     ecx, 50h ; 'P'
.text:000009BD                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000009C2                 movzx   ecx, byte ptr [eax]
.text:000009C5                 test    ecx, ecx
.text:000009C7                 jz      short loc_9D0
.text:000009C9                 mov     al, 1
.text:000009CB                 jmp     loc_A8D
.text:000009D0 ; ---------------------------------------------------------------------------
.text:000009D0
.text:000009D0 loc_9D0:                                ; CODE XREF: NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+37j
.text:000009D0                 mov     edx, [ebp+arg_0]
.text:000009D3                 push    edx
.text:000009D4                 mov     ecx, [ebp+var_4]
.text:000009D7                 add     ecx, 2Ch ; ','
.text:000009DA                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000009DF                 mov     eax, [eax]
.text:000009E1                 mov     [ebp+var_8], eax
.text:000009E4                 mov     ecx, [ebp+arg_0]
.text:000009E7                 push    ecx
.text:000009E8                 mov     ecx, [ebp+var_4]
.text:000009EB                 add     ecx, 4
.text:000009EE                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:000009F3                 mov     edx, [eax]
.text:000009F5                 mov     [ebp+var_C], edx
.text:000009F8                 mov     [ebp+var_10], 0
.text:000009FF                 jmp     short loc_A0A
.text:00000A01 ; ---------------------------------------------------------------------------
.text:00000A01
.text:00000A01 loc_A01:                                ; CODE XREF: NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+A1j
.text:00000A01                                         ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint):loc_A86j
.text:00000A01                 mov     eax, [ebp+var_10]
.text:00000A04                 add     eax, 1
.text:00000A07                 mov     [ebp+var_10], eax
.text:00000A0A
.text:00000A0A loc_A0A:                                ; CODE XREF: NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+6Fj
.text:00000A0A                 mov     ecx, [ebp+var_10]
.text:00000A0D                 cmp     ecx, [ebp+var_C]
.text:00000A10                 jnb     short loc_A8B
.text:00000A12                 mov     edx, [ebp+var_8]
.text:00000A15                 add     edx, [ebp+var_10]
.text:00000A18                 mov     [ebp+var_14], edx
.text:00000A1B                 mov     eax, [ebp+var_14]
.text:00000A1E                 push    eax             ; unsigned int
.text:00000A1F                 mov     ecx, [ebp+var_4]
.text:00000A22                 add     ecx, 4          ; this
.text:00000A25                 call    ?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams(uint)
.text:00000A2A                 movzx   ecx, al
.text:00000A2D                 test    ecx, ecx
.text:00000A2F                 jz      short loc_A33
.text:00000A31                 jmp     short loc_A01
.text:00000A33 ; ---------------------------------------------------------------------------
.text:00000A33
.text:00000A33 loc_A33:                                ; CODE XREF: NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+9Fj
.text:00000A33                 mov     edx, [ebp+var_14]
.text:00000A36                 push    edx             ; unsigned int
.text:00000A37                 mov     ecx, [ebp+var_4]
.text:00000A3A                 add     ecx, 4          ; this
.text:00000A3D                 call    ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)
.text:00000A42                 mov     [ebp+var_18], eax
.text:00000A45                 cmp     [ebp+var_18], 0
.text:00000A49                 jge     short loc_A60
.text:00000A4B                 mov     [ebp+var_1C], 13377C5h
.text:00000A52                 push    offset __TI1H
.text:00000A57                 lea     eax, [ebp+var_1C]
.text:00000A5A                 push    eax
.text:00000A5B                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000A60 ; ---------------------------------------------------------------------------
.text:00000A60
.text:00000A60 loc_A60:                                ; CODE XREF: NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+B9j
.text:00000A60                 mov     ecx, [ebp+var_18]
.text:00000A63                 push    ecx
.text:00000A64                 mov     ecx, [ebp+var_4]
.text:00000A67                 add     ecx, 10h
.text:00000A6A                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00000A6F                 mov     edx, [eax+4]
.text:00000A72                 push    edx             ; unsigned int
.text:00000A73                 mov     ecx, [ebp+var_4] ; this
.text:00000A76                 call    ?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)
.text:00000A7B                 movzx   eax, al
.text:00000A7E                 test    eax, eax
.text:00000A80                 jz      short loc_A86
.text:00000A82                 mov     al, 1
.text:00000A84                 jmp     short loc_A8D
.text:00000A86 ; ---------------------------------------------------------------------------
.text:00000A86
.text:00000A86 loc_A86:                                ; CODE XREF: NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+F0j
.text:00000A86                 jmp     loc_A01
.text:00000A8B ; ---------------------------------------------------------------------------
.text:00000A8B
.text:00000A8B loc_A8B:                                ; CODE XREF: NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+80j
.text:00000A8B                 xor     al, al
.text:00000A8D
.text:00000A8D loc_A8D:                                ; CODE XREF: NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+3Bj
.text:00000A8D                                         ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)+F4j
.text:00000A8D                 add     esp, 1Ch
.text:00000A90                 cmp     ebp, esp
.text:00000A92                 call    __RTC_CheckEsp
.text:00000A97                 mov     esp, ebp
.text:00000A99                 pop     ebp
.text:00000A9A                 retn    4
.text:00000A9A ?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z endp
.text:00000A9A
.text:00000A9A ; ---------------------------------------------------------------------------
.text:00000A9D                 align 10h
.text:00000AA0
.text:00000AA0 ; =============== S U B R O U T I N E =======================================
.text:00000AA0
.text:00000AA0 ; Attributes: bp-based frame
.text:00000AA0
.text:00000AA0 ; _DWORD __thiscall NCoderMixer2::CMixerST::CMixerST(NCoderMixer2::CMixerST *this, bool)
.text:00000AA0                 public ??0CMixerST@NCoderMixer2@@QAE@_N@Z
.text:00000AA0 ??0CMixerST@NCoderMixer2@@QAE@_N@Z proc near
.text:00000AA0
.text:00000AA0 var_10          = dword ptr -10h
.text:00000AA0 var_C           = dword ptr -0Ch
.text:00000AA0 var_4           = dword ptr -4
.text:00000AA0 arg_0           = byte ptr  8
.text:00000AA0
.text:00000AA0                 push    ebp
.text:00000AA1                 mov     ebp, esp
.text:00000AA3                 push    0FFFFFFFFh
.text:00000AA5                 push    offset __ehhandler$??0CMixerST@NCoderMixer2@@QAE@_N@Z
.text:00000AAA                 mov     eax, large fs:0
.text:00000AB0                 push    eax
.text:00000AB1                 push    ecx
.text:00000AB2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000AB9                 mov     eax, dword ptr ds:___security_cookie
.text:00000ABE                 xor     eax, ebp
.text:00000AC0                 push    eax
.text:00000AC1                 lea     eax, [ebp+var_C]
.text:00000AC4                 mov     large fs:0, eax
.text:00000ACA                 mov     [ebp+var_10], ecx
.text:00000ACD                 mov     ecx, [ebp+var_10]
.text:00000AD0                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000AD5                 movzx   eax, [ebp+arg_0]
.text:00000AD9                 push    eax             ; bool
.text:00000ADA                 mov     ecx, [ebp+var_10]
.text:00000ADD                 add     ecx, 4          ; this
.text:00000AE0                 call    ??0CMixer@NCoderMixer2@@QAE@_N@Z ; NCoderMixer2::CMixer::CMixer(bool)
.text:00000AE5                 mov     [ebp+var_4], 0
.text:00000AEC                 mov     ecx, [ebp+var_10]
.text:00000AEF                 add     ecx, 68h ; 'h'  ; this
.text:00000AF2                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000AF7                 mov     ecx, [ebp+var_10]
.text:00000AFA                 mov     dword ptr [ecx], offset ??_7CMixerST@NCoderMixer2@@6BIUnknown@@@ ; const NCoderMixer2::CMixerST::`vftable'{for `IUnknown'}
.text:00000B00                 mov     edx, [ebp+var_10]
.text:00000B03                 mov     dword ptr [edx+4], offset ??_7CMixerST@NCoderMixer2@@6BCMixer@1@@ ; const NCoderMixer2::CMixerST::`vftable'{for `NCoderMixer2::CMixer'}
.text:00000B0A                 mov     ecx, [ebp+var_10]
.text:00000B0D                 add     ecx, 6Ch ; 'l'
.text:00000B10                 call    ??0?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::CObjectVector<NCoderMixer2::CCoderST>(void)
.text:00000B15                 mov     byte ptr [ebp+var_4], 1
.text:00000B19                 mov     ecx, [ebp+var_10]
.text:00000B1C                 add     ecx, 78h ; 'x'
.text:00000B1F                 call    ??0?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::CObjectVector<NCoderMixer2::CStBinderStream>(void)
.text:00000B24                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B2B                 mov     eax, [ebp+var_10]
.text:00000B2E                 mov     ecx, [ebp+var_C]
.text:00000B31                 mov     large fs:0, ecx
.text:00000B38                 pop     ecx
.text:00000B39                 add     esp, 10h
.text:00000B3C                 cmp     ebp, esp
.text:00000B3E                 call    __RTC_CheckEsp
.text:00000B43                 mov     esp, ebp
.text:00000B45                 pop     ebp
.text:00000B46                 retn    4
.text:00000B46 ??0CMixerST@NCoderMixer2@@QAE@_N@Z endp
.text:00000B46
.text:00000B46 ; ---------------------------------------------------------------------------
.text:00000B49                 align 10h
.text:00000B50
.text:00000B50 ; =============== S U B R O U T I N E =======================================
.text:00000B50
.text:00000B50 ; Attributes: bp-based frame
.text:00000B50
.text:00000B50 ; _DWORD __thiscall NCoderMixer2::CMixerST::~CMixerST(NCoderMixer2::CMixerST *__hidden this)
.text:00000B50                 public ??1CMixerST@NCoderMixer2@@QAE@XZ
.text:00000B50 ??1CMixerST@NCoderMixer2@@QAE@XZ proc near
.text:00000B50                                         ; CODE XREF: NCoderMixer2::CMixerST::`scalar deleting destructor'(uint)+11p
.text:00000B50
.text:00000B50 var_10          = dword ptr -10h
.text:00000B50 var_C           = dword ptr -0Ch
.text:00000B50 var_4           = dword ptr -4
.text:00000B50
.text:00000B50                 push    ebp
.text:00000B51                 mov     ebp, esp
.text:00000B53                 push    0FFFFFFFFh
.text:00000B55                 push    offset __ehhandler$??1CMixerST@NCoderMixer2@@QAE@XZ
.text:00000B5A                 mov     eax, large fs:0
.text:00000B60                 push    eax
.text:00000B61                 push    ecx
.text:00000B62                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000B69                 mov     eax, dword ptr ds:___security_cookie
.text:00000B6E                 xor     eax, ebp
.text:00000B70                 push    eax
.text:00000B71                 lea     eax, [ebp+var_C]
.text:00000B74                 mov     large fs:0, eax
.text:00000B7A                 mov     [ebp+var_10], ecx
.text:00000B7D                 mov     eax, [ebp+var_10]
.text:00000B80                 mov     dword ptr [eax], offset ??_7CMixerST@NCoderMixer2@@6BIUnknown@@@ ; const NCoderMixer2::CMixerST::`vftable'{for `IUnknown'}
.text:00000B86                 mov     ecx, [ebp+var_10]
.text:00000B89                 mov     dword ptr [ecx+4], offset ??_7CMixerST@NCoderMixer2@@6BCMixer@1@@ ; const NCoderMixer2::CMixerST::`vftable'{for `NCoderMixer2::CMixer'}
.text:00000B90                 mov     [ebp+var_4], 1
.text:00000B97                 mov     ecx, [ebp+var_10]
.text:00000B9A                 add     ecx, 78h ; 'x'
.text:00000B9D                 call    ??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>(void)
.text:00000BA2                 mov     byte ptr [ebp+var_4], 0
.text:00000BA6                 mov     ecx, [ebp+var_10]
.text:00000BA9                 add     ecx, 6Ch ; 'l'
.text:00000BAC                 call    ??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)
.text:00000BB1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000BB8                 mov     ecx, [ebp+var_10]
.text:00000BBB                 add     ecx, 4          ; this
.text:00000BBE                 call    ??1CMixer@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixer::~CMixer(void)
.text:00000BC3                 mov     ecx, [ebp+var_C]
.text:00000BC6                 mov     large fs:0, ecx
.text:00000BCD                 pop     ecx
.text:00000BCE                 add     esp, 10h
.text:00000BD1                 cmp     ebp, esp
.text:00000BD3                 call    __RTC_CheckEsp
.text:00000BD8                 mov     esp, ebp
.text:00000BDA                 pop     ebp
.text:00000BDB                 retn
.text:00000BDB ??1CMixerST@NCoderMixer2@@QAE@XZ endp
.text:00000BDB
.text:00000BDB ; ---------------------------------------------------------------------------
.text:00000BDC                 align 10h
.text:00000BE0
.text:00000BE0 ; =============== S U B R O U T I N E =======================================
.text:00000BE0
.text:00000BE0 ; Attributes: bp-based frame
.text:00000BE0
.text:00000BE0 ; void __thiscall NCoderMixer2::CMixerST::AddCoder(NCoderMixer2::CMixerST *this, const struct CCreatedCoder *)
.text:00000BE0                 public ?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
.text:00000BE0 ?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z proc near
.text:00000BE0                                         ; DATA XREF: .rdata:00004278o
.text:00000BE0
.text:00000BE0 var_34          = dword ptr -34h
.text:00000BE0 var_2C          = byte ptr -2Ch
.text:00000BE0 var_20          = byte ptr -20h
.text:00000BE0 var_18          = dword ptr -18h
.text:00000BE0 var_14          = dword ptr -14h
.text:00000BE0 var_10          = dword ptr -10h
.text:00000BE0 var_C           = dword ptr -0Ch
.text:00000BE0 var_4           = dword ptr -4
.text:00000BE0 arg_0           = dword ptr  8
.text:00000BE0
.text:00000BE0                 push    ebp
.text:00000BE1                 mov     ebp, esp
.text:00000BE3                 push    0FFFFFFFFh
.text:00000BE5                 push    offset __ehhandler$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
.text:00000BEA                 mov     eax, large fs:0
.text:00000BF0                 push    eax
.text:00000BF1                 sub     esp, 28h
.text:00000BF4                 push    esi
.text:00000BF5                 push    edi
.text:00000BF6                 push    ecx
.text:00000BF7                 lea     edi, [ebp+var_34]
.text:00000BFA                 mov     ecx, 0Ah
.text:00000BFF                 mov     eax, 0CCCCCCCCh
.text:00000C04                 rep stosd
.text:00000C06                 pop     ecx
.text:00000C07                 mov     eax, dword ptr ds:___security_cookie
.text:00000C0C                 xor     eax, ebp
.text:00000C0E                 push    eax
.text:00000C0F                 lea     eax, [ebp+var_C]
.text:00000C12                 mov     large fs:0, eax
.text:00000C18                 mov     [ebp+var_10], ecx
.text:00000C1B                 mov     eax, [ebp+arg_0]
.text:00000C1E                 movzx   ecx, byte ptr [eax+9]
.text:00000C22                 push    ecx
.text:00000C23                 mov     ecx, [ebp+var_10]
.text:00000C26                 add     ecx, 44h ; 'D'
.text:00000C29                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00000C2E                 mov     edx, [ebp+arg_0]
.text:00000C31                 movzx   eax, byte ptr [edx+8]
.text:00000C35                 push    eax
.text:00000C36                 mov     ecx, [ebp+var_10]
.text:00000C39                 add     ecx, 50h ; 'P'
.text:00000C3C                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00000C41                 mov     ecx, [ebp+var_10]
.text:00000C44                 add     ecx, 68h ; 'h'
.text:00000C47                 call    ?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CCoderST>::AddNew(void)
.text:00000C4C                 mov     [ebp+var_14], eax
.text:00000C4F                 mov     ecx, [ebp+var_14]
.text:00000C52                 mov     edx, [ebp+arg_0]
.text:00000C55                 mov     eax, [edx+0Ch]
.text:00000C58                 mov     [ecx+8], eax
.text:00000C5B                 mov     ecx, [ebp+arg_0]
.text:00000C5E                 push    ecx
.text:00000C5F                 mov     ecx, [ebp+var_14]
.text:00000C62                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=(CMyComPtr<ICompressCoder> const &)
.text:00000C67                 mov     edx, [ebp+arg_0]
.text:00000C6A                 add     edx, 4
.text:00000C6D                 push    edx
.text:00000C6E                 mov     ecx, [ebp+var_14]
.text:00000C71                 add     ecx, 4
.text:00000C74                 call    ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z ; CMyComPtr<ICompressCoder2>::operator=(CMyComPtr<ICompressCoder2> const &)
.text:00000C79                 mov     ecx, [ebp+arg_0]
.text:00000C7C                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00000C81                 test    eax, eax
.text:00000C83                 jz      short loc_C92
.text:00000C85                 mov     ecx, [ebp+arg_0]
.text:00000C88                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00000C8D                 mov     [ebp+var_34], eax
.text:00000C90                 jmp     short loc_CA0
.text:00000C92 ; ---------------------------------------------------------------------------
.text:00000C92
.text:00000C92 loc_C92:                                ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+A3j
.text:00000C92                 mov     ecx, [ebp+arg_0]
.text:00000C95                 add     ecx, 4
.text:00000C98                 call    ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *(void)
.text:00000C9D                 mov     [ebp+var_34], eax
.text:00000CA0
.text:00000CA0 loc_CA0:                                ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+B0j
.text:00000CA0                 mov     eax, [ebp+var_34]
.text:00000CA3                 mov     [ebp+var_18], eax
.text:00000CA6                 lea     ecx, [ebp+var_20]
.text:00000CA9                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00000CAE                 mov     [ebp+var_4], 0
.text:00000CB5                 lea     ecx, [ebp+var_20]
.text:00000CB8                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:00000CBD                 mov     esi, esp
.text:00000CBF                 push    eax
.text:00000CC0                 push    offset _IID_ISequentialInStream
.text:00000CC5                 mov     ecx, [ebp+var_18]
.text:00000CC8                 mov     edx, [ecx]
.text:00000CCA                 mov     eax, [ebp+var_18]
.text:00000CCD                 push    eax
.text:00000CCE                 mov     ecx, [edx]
.text:00000CD0                 call    ecx
.text:00000CD2                 cmp     esi, esp
.text:00000CD4                 call    __RTC_CheckEsp
.text:00000CD9                 lea     ecx, [ebp+var_20]
.text:00000CDC                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000CE1                 neg     eax
.text:00000CE3                 sbb     eax, eax
.text:00000CE5                 neg     eax
.text:00000CE7                 mov     edx, [ebp+var_14]
.text:00000CEA                 mov     [edx+38h], al
.text:00000CED                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000CF4                 lea     ecx, [ebp+var_20]
.text:00000CF7                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000CFC                 lea     ecx, [ebp+var_2C]
.text:00000CFF                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00000D04                 mov     [ebp+var_4], 1
.text:00000D0B                 lea     ecx, [ebp+var_2C]
.text:00000D0E                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00000D13                 mov     esi, esp
.text:00000D15                 push    eax
.text:00000D16                 push    offset _IID_ISequentialOutStream
.text:00000D1B                 mov     eax, [ebp+var_18]
.text:00000D1E                 mov     ecx, [eax]
.text:00000D20                 mov     edx, [ebp+var_18]
.text:00000D23                 push    edx
.text:00000D24                 mov     eax, [ecx]
.text:00000D26                 call    eax
.text:00000D28                 cmp     esi, esp
.text:00000D2A                 call    __RTC_CheckEsp
.text:00000D2F                 lea     ecx, [ebp+var_2C]
.text:00000D32                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000D37                 neg     eax
.text:00000D39                 sbb     eax, eax
.text:00000D3B                 neg     eax
.text:00000D3D                 mov     ecx, [ebp+var_14]
.text:00000D40                 mov     [ecx+39h], al
.text:00000D43                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D4A                 lea     ecx, [ebp+var_2C]
.text:00000D4D                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000D52                 push    edx
.text:00000D53                 mov     ecx, ebp
.text:00000D55                 push    eax
.text:00000D56                 lea     edx, $LN11
.text:00000D5C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D61                 pop     eax
.text:00000D62                 pop     edx
.text:00000D63                 mov     ecx, [ebp+var_C]
.text:00000D66                 mov     large fs:0, ecx
.text:00000D6D                 pop     ecx
.text:00000D6E                 pop     edi
.text:00000D6F                 pop     esi
.text:00000D70                 add     esp, 34h
.text:00000D73                 cmp     ebp, esp
.text:00000D75                 call    __RTC_CheckEsp
.text:00000D7A                 mov     esp, ebp
.text:00000D7C                 pop     ebp
.text:00000D7D                 retn    4
.text:00000D7D ?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z endp
.text:00000D7D
.text:00000D7D ; ---------------------------------------------------------------------------
.text:00000D80 $LN11           dd 2                    ; DATA XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+176o
.text:00000D84                 dd offset $LN10
.text:00000D88 $LN10           dd 0FFFFFFE0h, 4        ; DATA XREF: .text:00000D84o
.text:00000D90                 dd offset $LN7_1
.text:00000D94                 dd 0FFFFFFD4h, 4
.text:00000D9C                 dd offset $LN8_0
.text:00000DA0 $LN8_0          db 73h, 0               ; DATA XREF: .text:00000D9Co
.text:00000DA2 $LN7_1          dw 73h                  ; DATA XREF: .text:00000D90o
.text:00000DA4                 align 10h
.text:00000DB0
.text:00000DB0 ; =============== S U B R O U T I N E =======================================
.text:00000DB0
.text:00000DB0 ; Attributes: bp-based frame
.text:00000DB0
.text:00000DB0 ; struct NCoderMixer2::CCoder *__thiscall NCoderMixer2::CMixerST::GetCoder(NCoderMixer2::CMixerST *this, unsigned int)
.text:00000DB0                 public ?GetCoder@CMixerST@NCoderMixer2@@UAEAAVCCoder@2@I@Z
.text:00000DB0 ?GetCoder@CMixerST@NCoderMixer2@@UAEAAVCCoder@2@I@Z proc near
.text:00000DB0                                         ; DATA XREF: .rdata:0000427Co
.text:00000DB0
.text:00000DB0 var_4           = dword ptr -4
.text:00000DB0 arg_0           = dword ptr  8
.text:00000DB0
.text:00000DB0                 push    ebp
.text:00000DB1                 mov     ebp, esp
.text:00000DB3                 push    ecx
.text:00000DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DBB                 mov     [ebp+var_4], ecx
.text:00000DBE                 mov     eax, [ebp+arg_0]
.text:00000DC1                 push    eax
.text:00000DC2                 mov     ecx, [ebp+var_4]
.text:00000DC5                 add     ecx, 68h ; 'h'
.text:00000DC8                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:00000DCD                 add     esp, 4
.text:00000DD0                 cmp     ebp, esp
.text:00000DD2                 call    __RTC_CheckEsp
.text:00000DD7                 mov     esp, ebp
.text:00000DD9                 pop     ebp
.text:00000DDA                 retn    4
.text:00000DDA ?GetCoder@CMixerST@NCoderMixer2@@UAEAAVCCoder@2@I@Z endp
.text:00000DDA
.text:00000DDA ; ---------------------------------------------------------------------------
.text:00000DDD                 align 10h
.text:00000DE0
.text:00000DE0 ; =============== S U B R O U T I N E =======================================
.text:00000DE0
.text:00000DE0 ; Attributes: bp-based frame
.text:00000DE0
.text:00000DE0 ; void __thiscall NCoderMixer2::CMixerST::ReInit(NCoderMixer2::CMixerST *__hidden this)
.text:00000DE0                 public ?ReInit@CMixerST@NCoderMixer2@@UAEXXZ
.text:00000DE0 ?ReInit@CMixerST@NCoderMixer2@@UAEXXZ proc near ; DATA XREF: .rdata:00004284o
.text:00000DE0
.text:00000DE0 var_4           = dword ptr -4
.text:00000DE0
.text:00000DE0                 push    ebp
.text:00000DE1                 mov     ebp, esp
.text:00000DE3                 push    ecx
.text:00000DE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DEB                 mov     [ebp+var_4], ecx
.text:00000DEE                 mov     esp, ebp
.text:00000DF0                 pop     ebp
.text:00000DF1                 retn
.text:00000DF1 ?ReInit@CMixerST@NCoderMixer2@@UAEXXZ endp
.text:00000DF1
.text:00000DF1 ; ---------------------------------------------------------------------------
.text:00000DF2                 align 10h
.text:00000E00
.text:00000E00 ; =============== S U B R O U T I N E =======================================
.text:00000E00
.text:00000E00 ; Attributes: bp-based frame
.text:00000E00
.text:00000E00 ; __int32 __thiscall NCoderMixer2::CMixerST::GetInStream2(NCoderMixer2::CMixerST *this, struct ISequentialInStream *const *, unsigned int, struct ISequentialInStream **)
.text:00000E00                 public ?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
.text:00000E00 ?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z proc near
.text:00000E00                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+12Bp
.text:00000E00                                         ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+61p
.text:00000E00
.text:00000E00 var_B4          = dword ptr -0B4h
.text:00000E00 var_B0          = dword ptr -0B0h
.text:00000E00 var_AC          = dword ptr -0ACh
.text:00000E00 var_A8          = dword ptr -0A8h
.text:00000E00 var_A4          = dword ptr -0A4h
.text:00000E00 var_A0          = dword ptr -0A0h
.text:00000E00 var_9C          = dword ptr -9Ch
.text:00000E00 var_98          = dword ptr -98h
.text:00000E00 var_94          = dword ptr -94h
.text:00000E00 var_90          = dword ptr -90h
.text:00000E00 var_8C          = dword ptr -8Ch
.text:00000E00 var_88          = dword ptr -88h
.text:00000E00 var_84          = dword ptr -84h
.text:00000E00 var_7C          = byte ptr -7Ch
.text:00000E00 var_74          = dword ptr -74h
.text:00000E00 var_6C          = byte ptr -6Ch
.text:00000E00 var_64          = dword ptr -64h
.text:00000E00 var_60          = dword ptr -60h
.text:00000E00 var_58          = byte ptr -58h
.text:00000E00 var_4C          = byte ptr -4Ch
.text:00000E00 var_41          = byte ptr -41h
.text:00000E00 var_40          = dword ptr -40h
.text:00000E00 var_3C          = dword ptr -3Ch
.text:00000E00 var_34          = byte ptr -34h
.text:00000E00 var_2C          = dword ptr -2Ch
.text:00000E00 var_24          = dword ptr -24h
.text:00000E00 var_18          = dword ptr -18h
.text:00000E00 var_10          = dword ptr -10h
.text:00000E00 var_C           = dword ptr -0Ch
.text:00000E00 var_4           = dword ptr -4
.text:00000E00 arg_0           = dword ptr  8
.text:00000E00 arg_4           = dword ptr  0Ch
.text:00000E00 arg_8           = dword ptr  10h
.text:00000E00
.text:00000E00                 push    ebp
.text:00000E01                 mov     ebp, esp
.text:00000E03                 push    0FFFFFFFFh
.text:00000E05                 push    offset __ehhandler$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
.text:00000E0A                 mov     eax, large fs:0
.text:00000E10                 push    eax
.text:00000E11                 sub     esp, 0A8h
.text:00000E17                 push    esi
.text:00000E18                 push    edi
.text:00000E19                 push    ecx
.text:00000E1A                 lea     edi, [ebp+var_B4]
.text:00000E20                 mov     ecx, 2Ah ; '*'
.text:00000E25                 mov     eax, 0CCCCCCCCh
.text:00000E2A                 rep stosd
.text:00000E2C                 pop     ecx
.text:00000E2D                 mov     eax, dword ptr ds:___security_cookie
.text:00000E32                 xor     eax, ebp
.text:00000E34                 push    eax
.text:00000E35                 lea     eax, [ebp+var_C]
.text:00000E38                 mov     large fs:0, eax
.text:00000E3E                 mov     [ebp+var_10], ecx
.text:00000E41                 mov     eax, [ebp+arg_4]
.text:00000E44                 mov     [ebp+var_18], eax
.text:00000E47                 mov     [ebp+var_24], 0
.text:00000E4E                 mov     ecx, [ebp+var_10]
.text:00000E51                 movzx   edx, byte ptr [ecx+60h]
.text:00000E55                 test    edx, edx
.text:00000E57                 jz      short loc_E80
.text:00000E59                 lea     eax, [ebp+var_24]
.text:00000E5C                 push    eax             ; unsigned int *
.text:00000E5D                 lea     ecx, [ebp+var_18]
.text:00000E60                 push    ecx             ; unsigned int *
.text:00000E61                 mov     edx, [ebp+arg_4]
.text:00000E64                 push    edx             ; unsigned int
.text:00000E65                 mov     ecx, [ebp+var_10]
.text:00000E68                 add     ecx, 8          ; this
.text:00000E6B                 call    ?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream(uint,uint &,uint &)
.text:00000E70                 cmp     [ebp+var_24], 0
.text:00000E74                 jz      short loc_E80
.text:00000E76                 mov     eax, 80004001h
.text:00000E7B                 jmp     loc_125E
.text:00000E80 ; ---------------------------------------------------------------------------
.text:00000E80
.text:00000E80 loc_E80:                                ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+57j
.text:00000E80                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+74j
.text:00000E80                 mov     eax, [ebp+var_18]
.text:00000E83                 push    eax
.text:00000E84                 mov     ecx, [ebp+var_10]
.text:00000E87                 add     ecx, 6Ch ; 'l'
.text:00000E8A                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:00000E8F                 mov     [ebp+var_2C], eax
.text:00000E92                 lea     ecx, [ebp+var_34]
.text:00000E95                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00000E9A                 mov     [ebp+var_4], 0
.text:00000EA1                 lea     ecx, [ebp+var_34]
.text:00000EA4                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:00000EA9                 push    eax             ; void **
.text:00000EAA                 push    offset _IID_ISequentialInStream ; struct _GUID *
.text:00000EAF                 mov     ecx, [ebp+var_2C] ; this
.text:00000EB2                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:00000EB7                 lea     ecx, [ebp+var_34]
.text:00000EBA                 call    ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!(void)
.text:00000EBF                 movzx   ecx, al
.text:00000EC2                 test    ecx, ecx
.text:00000EC4                 jz      short loc_EEA
.text:00000EC6                 mov     [ebp+var_8C], 80004001h
.text:00000ED0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000ED7                 lea     ecx, [ebp+var_34]
.text:00000EDA                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000EDF                 mov     eax, [ebp+var_8C]
.text:00000EE5                 jmp     loc_125E
.text:00000EEA ; ---------------------------------------------------------------------------
.text:00000EEA
.text:00000EEA loc_EEA:                                ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+C4j
.text:00000EEA                 mov     edx, [ebp+var_10]
.text:00000EED                 movzx   eax, byte ptr [edx+60h]
.text:00000EF1                 test    eax, eax
.text:00000EF3                 jz      short loc_F01
.text:00000EF5                 mov     [ebp+var_A8], 1
.text:00000EFF                 jmp     short loc_F0D
.text:00000F01 ; ---------------------------------------------------------------------------
.text:00000F01
.text:00000F01 loc_F01:                                ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+F3j
.text:00000F01                 mov     ecx, [ebp+var_2C]
.text:00000F04                 mov     edx, [ecx+8]
.text:00000F07                 mov     [ebp+var_A8], edx
.text:00000F0D
.text:00000F0D loc_F0D:                                ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+FFj
.text:00000F0D                 mov     eax, [ebp+var_A8]
.text:00000F13                 mov     [ebp+var_3C], eax
.text:00000F16                 mov     ecx, [ebp+var_10]
.text:00000F19                 movzx   edx, byte ptr [ecx+60h]
.text:00000F1D                 test    edx, edx
.text:00000F1F                 jz      short loc_F2C
.text:00000F21                 mov     eax, [ebp+var_18]
.text:00000F24                 mov     [ebp+var_AC], eax
.text:00000F2A                 jmp     short loc_F43
.text:00000F2C ; ---------------------------------------------------------------------------
.text:00000F2C
.text:00000F2C loc_F2C:                                ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+11Fj
.text:00000F2C                 mov     ecx, [ebp+var_18]
.text:00000F2F                 push    ecx
.text:00000F30                 mov     ecx, [ebp+var_10]
.text:00000F33                 add     ecx, 30h ; '0'
.text:00000F36                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000F3B                 mov     edx, [eax]
.text:00000F3D                 mov     [ebp+var_AC], edx
.text:00000F43
.text:00000F43 loc_F43:                                ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+12Aj
.text:00000F43                 mov     eax, [ebp+var_AC]
.text:00000F49                 mov     [ebp+var_40], eax
.text:00000F4C                 mov     [ebp+var_41], 0
.text:00000F50                 cmp     [ebp+var_3C], 1
.text:00000F54                 jnz     loc_1089
.text:00000F5A                 lea     ecx, [ebp+var_4C]
.text:00000F5D                 call    ??0?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::CMyComPtr<ICompressSetInStream>(void)
.text:00000F62                 mov     byte ptr [ebp+var_4], 1
.text:00000F66                 lea     ecx, [ebp+var_4C]
.text:00000F69                 call    ??I?$CMyComPtr@UICompressSetInStream@@@@QAEPAPAUICompressSetInStream@@XZ ; CMyComPtr<ICompressSetInStream>::operator&(void)
.text:00000F6E                 push    eax             ; void **
.text:00000F6F                 push    offset _IID_ICompressSetInStream ; struct _GUID *
.text:00000F74                 mov     ecx, [ebp+var_2C] ; this
.text:00000F77                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:00000F7C                 lea     ecx, [ebp+var_4C]
.text:00000F7F                 call    ??B?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ ; CMyComPtr<ICompressSetInStream>::operator ICompressSetInStream *(void)
.text:00000F84                 test    eax, eax
.text:00000F86                 jz      loc_107D
.text:00000F8C                 lea     ecx, [ebp+var_58]
.text:00000F8F                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00000F94                 mov     byte ptr [ebp+var_4], 2
.text:00000F98                 lea     ecx, [ebp+var_58]
.text:00000F9B                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:00000FA0                 push    eax             ; struct ISequentialInStream **
.text:00000FA1                 mov     ecx, [ebp+var_40]
.text:00000FA4                 push    ecx             ; unsigned int
.text:00000FA5                 mov     edx, [ebp+arg_0]
.text:00000FA8                 push    edx             ; struct ISequentialInStream **
.text:00000FA9                 mov     ecx, [ebp+var_10] ; this
.text:00000FAC                 call    ?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)
.text:00000FB1                 mov     [ebp+var_60], eax
.text:00000FB4                 cmp     [ebp+var_60], 0
.text:00000FB8                 jz      short loc_FF5
.text:00000FBA                 mov     eax, [ebp+var_60]
.text:00000FBD                 mov     [ebp+var_90], eax
.text:00000FC3                 mov     byte ptr [ebp+var_4], 1
.text:00000FC7                 lea     ecx, [ebp+var_58]
.text:00000FCA                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000FCF                 mov     byte ptr [ebp+var_4], 0
.text:00000FD3                 lea     ecx, [ebp+var_4C]
.text:00000FD6                 call    ??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>(void)
.text:00000FDB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FE2                 lea     ecx, [ebp+var_34]
.text:00000FE5                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000FEA                 mov     eax, [ebp+var_90]
.text:00000FF0                 jmp     loc_125E
.text:00000FF5 ; ---------------------------------------------------------------------------
.text:00000FF5
.text:00000FF5 loc_FF5:                                ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+1B8j
.text:00000FF5                 lea     ecx, [ebp+var_4C]
.text:00000FF8                 call    ??C?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ ; CMyComPtr<ICompressSetInStream>::operator->(void)
.text:00000FFD                 mov     [ebp+var_B0], eax
.text:00001003                 lea     ecx, [ebp+var_58]
.text:00001006                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000100B                 mov     esi, esp
.text:0000100D                 push    eax
.text:0000100E                 mov     ecx, [ebp+var_B0]
.text:00001014                 push    ecx
.text:00001015                 mov     edx, [ebp+var_B0]
.text:0000101B                 mov     eax, [edx]
.text:0000101D                 mov     ecx, [eax+0Ch]
.text:00001020                 call    ecx
.text:00001022                 cmp     esi, esp
.text:00001024                 call    __RTC_CheckEsp
.text:00001029                 mov     [ebp+var_64], eax
.text:0000102C                 cmp     [ebp+var_64], 0
.text:00001030                 jz      short loc_106D
.text:00001032                 mov     edx, [ebp+var_64]
.text:00001035                 mov     [ebp+var_94], edx
.text:0000103B                 mov     byte ptr [ebp+var_4], 1
.text:0000103F                 lea     ecx, [ebp+var_58]
.text:00001042                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001047                 mov     byte ptr [ebp+var_4], 0
.text:0000104B                 lea     ecx, [ebp+var_4C]
.text:0000104E                 call    ??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>(void)
.text:00001053                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000105A                 lea     ecx, [ebp+var_34]
.text:0000105D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001062                 mov     eax, [ebp+var_94]
.text:00001068                 jmp     loc_125E
.text:0000106D ; ---------------------------------------------------------------------------
.text:0000106D
.text:0000106D loc_106D:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+230j
.text:0000106D                 mov     [ebp+var_41], 1
.text:00001071                 mov     byte ptr [ebp+var_4], 1
.text:00001075                 lea     ecx, [ebp+var_58]
.text:00001078                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000107D
.text:0000107D loc_107D:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+186j
.text:0000107D                 mov     byte ptr [ebp+var_4], 0
.text:00001081                 lea     ecx, [ebp+var_4C]
.text:00001084                 call    ??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>(void)
.text:00001089
.text:00001089 loc_1089:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+154j
.text:00001089                 movzx   eax, [ebp+var_41]
.text:0000108D                 test    eax, eax
.text:0000108F                 jnz     loc_1232
.text:00001095                 cmp     [ebp+var_3C], 0
.text:00001099                 jz      loc_1232
.text:0000109F                 lea     ecx, [ebp+var_6C]
.text:000010A2                 call    ??0?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::CMyComPtr<ICompressSetInStream2>(void)
.text:000010A7                 mov     byte ptr [ebp+var_4], 3
.text:000010AB                 lea     ecx, [ebp+var_6C]
.text:000010AE                 call    ??I?$CMyComPtr@UICompressSetInStream2@@@@QAEPAPAUICompressSetInStream2@@XZ ; CMyComPtr<ICompressSetInStream2>::operator&(void)
.text:000010B3                 push    eax             ; void **
.text:000010B4                 push    offset _IID_ICompressSetInStream2 ; struct _GUID *
.text:000010B9                 mov     ecx, [ebp+var_2C] ; this
.text:000010BC                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:000010C1                 lea     ecx, [ebp+var_6C]
.text:000010C4                 call    ??7?$CMyComPtr@UICompressSetInStream2@@@@QBE_NXZ ; CMyComPtr<ICompressSetInStream2>::operator!(void)
.text:000010C9                 movzx   ecx, al
.text:000010CC                 test    ecx, ecx
.text:000010CE                 jz      short loc_1100
.text:000010D0                 mov     [ebp+var_98], 80004001h
.text:000010DA                 mov     byte ptr [ebp+var_4], 0
.text:000010DE                 lea     ecx, [ebp+var_6C]
.text:000010E1                 call    ??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>(void)
.text:000010E6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000010ED                 lea     ecx, [ebp+var_34]
.text:000010F0                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000010F5                 mov     eax, [ebp+var_98]
.text:000010FB                 jmp     loc_125E
.text:00001100 ; ---------------------------------------------------------------------------
.text:00001100
.text:00001100 loc_1100:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+2CEj
.text:00001100                 mov     [ebp+var_74], 0
.text:00001107                 jmp     short loc_1112
.text:00001109 ; ---------------------------------------------------------------------------
.text:00001109
.text:00001109 loc_1109:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+421j
.text:00001109                 mov     edx, [ebp+var_74]
.text:0000110C                 add     edx, 1
.text:0000110F                 mov     [ebp+var_74], edx
.text:00001112
.text:00001112 loc_1112:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+307j
.text:00001112                 mov     eax, [ebp+var_74]
.text:00001115                 cmp     eax, [ebp+var_3C]
.text:00001118                 jnb     loc_1226
.text:0000111E                 lea     ecx, [ebp+var_7C]
.text:00001121                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00001126                 mov     byte ptr [ebp+var_4], 4
.text:0000112A                 lea     ecx, [ebp+var_7C]
.text:0000112D                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:00001132                 push    eax             ; struct ISequentialInStream **
.text:00001133                 mov     ecx, [ebp+var_40]
.text:00001136                 add     ecx, [ebp+var_74]
.text:00001139                 push    ecx             ; unsigned int
.text:0000113A                 mov     edx, [ebp+arg_0]
.text:0000113D                 push    edx             ; struct ISequentialInStream **
.text:0000113E                 mov     ecx, [ebp+var_10] ; this
.text:00001141                 call    ?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)
.text:00001146                 mov     [ebp+var_84], eax
.text:0000114C                 cmp     [ebp+var_84], 0
.text:00001153                 jz      short loc_1193
.text:00001155                 mov     eax, [ebp+var_84]
.text:0000115B                 mov     [ebp+var_9C], eax
.text:00001161                 mov     byte ptr [ebp+var_4], 3
.text:00001165                 lea     ecx, [ebp+var_7C]
.text:00001168                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000116D                 mov     byte ptr [ebp+var_4], 0
.text:00001171                 lea     ecx, [ebp+var_6C]
.text:00001174                 call    ??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>(void)
.text:00001179                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001180                 lea     ecx, [ebp+var_34]
.text:00001183                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001188                 mov     eax, [ebp+var_9C]
.text:0000118E                 jmp     loc_125E
.text:00001193 ; ---------------------------------------------------------------------------
.text:00001193
.text:00001193 loc_1193:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+353j
.text:00001193                 lea     ecx, [ebp+var_6C]
.text:00001196                 call    ??C?$CMyComPtr@UICompressSetInStream2@@@@QBEPAUICompressSetInStream2@@XZ ; CMyComPtr<ICompressSetInStream2>::operator->(void)
.text:0000119B                 mov     [ebp+var_B4], eax
.text:000011A1                 lea     ecx, [ebp+var_7C]
.text:000011A4                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:000011A9                 mov     esi, esp
.text:000011AB                 push    eax
.text:000011AC                 mov     ecx, [ebp+var_74]
.text:000011AF                 push    ecx
.text:000011B0                 mov     edx, [ebp+var_B4]
.text:000011B6                 push    edx
.text:000011B7                 mov     eax, [ebp+var_B4]
.text:000011BD                 mov     ecx, [eax]
.text:000011BF                 mov     edx, [ecx+0Ch]
.text:000011C2                 call    edx
.text:000011C4                 cmp     esi, esp
.text:000011C6                 call    __RTC_CheckEsp
.text:000011CB                 mov     [ebp+var_88], eax
.text:000011D1                 cmp     [ebp+var_88], 0
.text:000011D8                 jz      short loc_1215
.text:000011DA                 mov     eax, [ebp+var_88]
.text:000011E0                 mov     [ebp+var_A0], eax
.text:000011E6                 mov     byte ptr [ebp+var_4], 3
.text:000011EA                 lea     ecx, [ebp+var_7C]
.text:000011ED                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000011F2                 mov     byte ptr [ebp+var_4], 0
.text:000011F6                 lea     ecx, [ebp+var_6C]
.text:000011F9                 call    ??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>(void)
.text:000011FE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001205                 lea     ecx, [ebp+var_34]
.text:00001208                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000120D                 mov     eax, [ebp+var_A0]
.text:00001213                 jmp     short loc_125E
.text:00001215 ; ---------------------------------------------------------------------------
.text:00001215
.text:00001215 loc_1215:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+3D8j
.text:00001215                 mov     byte ptr [ebp+var_4], 3
.text:00001219                 lea     ecx, [ebp+var_7C]
.text:0000121C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001221                 jmp     loc_1109
.text:00001226 ; ---------------------------------------------------------------------------
.text:00001226
.text:00001226 loc_1226:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+318j
.text:00001226                 mov     byte ptr [ebp+var_4], 0
.text:0000122A                 lea     ecx, [ebp+var_6C]
.text:0000122D                 call    ??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>(void)
.text:00001232
.text:00001232 loc_1232:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+28Fj
.text:00001232                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+299j
.text:00001232                 lea     ecx, [ebp+var_34]
.text:00001235                 call    ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach(void)
.text:0000123A                 mov     ecx, [ebp+arg_8]
.text:0000123D                 mov     [ecx], eax
.text:0000123F                 mov     [ebp+var_A4], 0
.text:00001249                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001250                 lea     ecx, [ebp+var_34]
.text:00001253                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001258                 mov     eax, [ebp+var_A4]
.text:0000125E
.text:0000125E loc_125E:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+7Bj
.text:0000125E                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+E5j ...
.text:0000125E                 push    edx
.text:0000125F                 mov     ecx, ebp
.text:00001261                 push    eax
.text:00001262                 lea     edx, $LN35
.text:00001268                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000126D                 pop     eax
.text:0000126E                 pop     edx
.text:0000126F                 mov     ecx, [ebp+var_C]
.text:00001272                 mov     large fs:0, ecx
.text:00001279                 pop     ecx
.text:0000127A                 pop     edi
.text:0000127B                 pop     esi
.text:0000127C                 add     esp, 0B4h
.text:00001282                 cmp     ebp, esp
.text:00001284                 call    __RTC_CheckEsp
.text:00001289                 mov     esp, ebp
.text:0000128B                 pop     ebp
.text:0000128C                 retn    0Ch
.text:0000128C ?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z endp
.text:0000128C
.text:0000128C ; ---------------------------------------------------------------------------
.text:0000128F                 align 10h
.text:00001290 $LN35           dd 7                    ; DATA XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+462o
.text:00001294                 dd offset $LN34
.text:00001298 $LN34           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001294o
.text:000012A0                 dd offset $LN26         ; "coderIndex"
.text:000012A4                 dd 0FFFFFFDCh, 4
.text:000012AC                 dd offset $LN27         ; "coderStreamIndex"
.text:000012B0                 db 0CCh
.text:000012B1                 db 3 dup(0FFh)
.text:000012B4                 dd 4
.text:000012B8                 dd offset $LN28         ; "seqInStream"
.text:000012BC                 dd 0FFFFFFB4h, 4
.text:000012C4                 dd offset $LN29         ; "setStream"
.text:000012C8                 dd 0FFFFFFA8h, 4
.text:000012D0                 dd offset $LN30         ; "seqInStream2"
.text:000012D4                 dd 0FFFFFF94h, 4
.text:000012DC                 dd offset $LN31         ; "setStream2"
.text:000012E0                 dd 0FFFFFF84h, 4
.text:000012E8                 dd offset $LN32         ; "seqInStream2"
.text:000012EC $LN32           db 'seqInStream2',0     ; DATA XREF: .text:000012E8o
.text:000012F9 $LN31           db 'setStream2',0       ; DATA XREF: .text:000012DCo
.text:00001304 $LN30           db 'seqInStream2',0     ; DATA XREF: .text:000012D0o
.text:00001311 $LN29           db 'setStream',0        ; DATA XREF: .text:000012C4o
.text:0000131B $LN28           db 'seqInStream',0      ; DATA XREF: .text:000012B8o
.text:00001327 $LN27           db 'coderStreamIndex',0 ; DATA XREF: .text:000012ACo
.text:00001338 $LN26           db 'coderIndex',0       ; DATA XREF: .text:000012A0o
.text:00001343                 align 10h
.text:00001350
.text:00001350 ; =============== S U B R O U T I N E =======================================
.text:00001350
.text:00001350 ; Attributes: bp-based frame
.text:00001350
.text:00001350 ; __int32 __thiscall NCoderMixer2::CMixerST::GetInStream(NCoderMixer2::CMixerST *this, struct ISequentialInStream *const *, unsigned int, struct ISequentialInStream **)
.text:00001350                 public ?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
.text:00001350 ?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z proc near
.text:00001350                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+1ACp
.text:00001350                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+341p ...
.text:00001350
.text:00001350 var_50          = dword ptr -50h
.text:00001350 var_4C          = dword ptr -4Ch
.text:00001350 var_48          = dword ptr -48h
.text:00001350 var_44          = dword ptr -44h
.text:00001350 var_40          = dword ptr -40h
.text:00001350 var_3C          = dword ptr -3Ch
.text:00001350 var_38          = dword ptr -38h
.text:00001350 var_34          = dword ptr -34h
.text:00001350 var_30          = dword ptr -30h
.text:00001350 var_2C          = dword ptr -2Ch
.text:00001350 var_28          = dword ptr -28h
.text:00001350 var_24          = dword ptr -24h
.text:00001350 var_20          = dword ptr -20h
.text:00001350 var_18          = byte ptr -18h
.text:00001350 var_10          = dword ptr -10h
.text:00001350 var_C           = dword ptr -0Ch
.text:00001350 var_4           = dword ptr -4
.text:00001350 arg_0           = dword ptr  8
.text:00001350 arg_4           = dword ptr  0Ch
.text:00001350 arg_8           = dword ptr  10h
.text:00001350
.text:00001350                 push    ebp
.text:00001351                 mov     ebp, esp
.text:00001353                 push    0FFFFFFFFh
.text:00001355                 push    offset __ehhandler$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
.text:0000135A                 mov     eax, large fs:0
.text:00001360                 push    eax
.text:00001361                 sub     esp, 44h
.text:00001364                 push    edi
.text:00001365                 push    ecx
.text:00001366                 lea     edi, [ebp+var_50]
.text:00001369                 mov     ecx, 11h
.text:0000136E                 mov     eax, 0CCCCCCCCh
.text:00001373                 rep stosd
.text:00001375                 pop     ecx
.text:00001376                 mov     eax, dword ptr ds:___security_cookie
.text:0000137B                 xor     eax, ebp
.text:0000137D                 push    eax
.text:0000137E                 lea     eax, [ebp+var_C]
.text:00001381                 mov     large fs:0, eax
.text:00001387                 mov     [ebp+var_10], ecx
.text:0000138A                 lea     ecx, [ebp+var_18]
.text:0000138D                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00001392                 mov     [ebp+var_4], 0
.text:00001399                 mov     [ebp+var_20], 0FFFFFFFFh
.text:000013A0                 mov     eax, [ebp+var_10]
.text:000013A3                 movzx   ecx, byte ptr [eax+60h]
.text:000013A7                 test    ecx, ecx
.text:000013A9                 jz      short loc_13BF
.text:000013AB                 mov     edx, [ebp+var_10]
.text:000013AE                 mov     eax, [edx+2Ch]
.text:000013B1                 cmp     eax, [ebp+arg_4]
.text:000013B4                 jnz     short loc_13BD
.text:000013B6                 mov     [ebp+var_20], 0
.text:000013BD
.text:000013BD loc_13BD:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+64j
.text:000013BD                 jmp     short loc_13D1
.text:000013BF ; ---------------------------------------------------------------------------
.text:000013BF
.text:000013BF loc_13BF:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+59j
.text:000013BF                 mov     ecx, [ebp+arg_4]
.text:000013C2                 push    ecx             ; unsigned int
.text:000013C3                 mov     ecx, [ebp+var_10]
.text:000013C6                 add     ecx, 8          ; this
.text:000013C9                 call    ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)
.text:000013CE                 mov     [ebp+var_20], eax
.text:000013D1
.text:000013D1 loc_13D1:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *):loc_13BDj
.text:000013D1                 cmp     [ebp+var_20], 0
.text:000013D5                 jl      short loc_1414
.text:000013D7                 mov     edx, [ebp+var_20]
.text:000013DA                 mov     eax, [ebp+arg_0]
.text:000013DD                 mov     ecx, [eax+edx*4]
.text:000013E0                 push    ecx
.text:000013E1                 lea     ecx, [ebp+var_18]
.text:000013E4                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000013E9                 lea     ecx, [ebp+var_18]
.text:000013EC                 call    ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach(void)
.text:000013F1                 mov     edx, [ebp+arg_8]
.text:000013F4                 mov     [edx], eax
.text:000013F6                 mov     [ebp+var_34], 0
.text:000013FD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001404                 lea     ecx, [ebp+var_18]
.text:00001407                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000140C                 mov     eax, [ebp+var_34]
.text:0000140F                 jmp     loc_15A9
.text:00001414 ; ---------------------------------------------------------------------------
.text:00001414
.text:00001414 loc_1414:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+85j
.text:00001414                 mov     eax, [ebp+arg_4]
.text:00001417                 push    eax             ; unsigned int
.text:00001418                 push    1               ; bool
.text:0000141A                 mov     ecx, [ebp+var_10]
.text:0000141D                 add     ecx, 4          ; this
.text:00001420                 call    ?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z ; NCoderMixer2::CMixer::FindBond_for_Stream(bool,uint)
.text:00001425                 mov     [ebp+var_24], eax
.text:00001428                 cmp     [ebp+var_24], 0
.text:0000142C                 jge     short loc_144C
.text:0000142E                 mov     [ebp+var_38], 80070057h
.text:00001435                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000143C                 lea     ecx, [ebp+var_18]
.text:0000143F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001444                 mov     eax, [ebp+var_38]
.text:00001447                 jmp     loc_15A9
.text:0000144C ; ---------------------------------------------------------------------------
.text:0000144C
.text:0000144C loc_144C:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+DCj
.text:0000144C                 lea     ecx, [ebp+var_18]
.text:0000144F                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:00001454                 push    eax             ; struct ISequentialInStream **
.text:00001455                 mov     ecx, [ebp+var_10]
.text:00001458                 movzx   edx, byte ptr [ecx+60h]
.text:0000145C                 push    edx             ; bool
.text:0000145D                 mov     eax, [ebp+var_24]
.text:00001460                 push    eax
.text:00001461                 mov     ecx, [ebp+var_10]
.text:00001464                 add     ecx, 14h
.text:00001467                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:0000146C                 mov     ecx, eax        ; this
.text:0000146E                 call    ?Get_OutIndex@CBond@NCoderMixer2@@QBEI_N@Z ; NCoderMixer2::CBond::Get_OutIndex(bool)
.text:00001473                 push    eax             ; unsigned int
.text:00001474                 mov     ecx, [ebp+arg_0]
.text:00001477                 push    ecx             ; struct ISequentialInStream **
.text:00001478                 mov     ecx, [ebp+var_10] ; this
.text:0000147B                 call    ?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)
.text:00001480                 mov     [ebp+var_28], eax
.text:00001483                 cmp     [ebp+var_28], 0
.text:00001487                 jz      short loc_14A6
.text:00001489                 mov     edx, [ebp+var_28]
.text:0000148C                 mov     [ebp+var_3C], edx
.text:0000148F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001496                 lea     ecx, [ebp+var_18]
.text:00001499                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000149E                 mov     eax, [ebp+var_3C]
.text:000014A1                 jmp     loc_15A9
.text:000014A6 ; ---------------------------------------------------------------------------
.text:000014A6
.text:000014A6 loc_14A6:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+137j
.text:000014A6                                         ; NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+171j
.text:000014A6                 mov     ecx, [ebp+var_10]
.text:000014A9                 add     ecx, 78h ; 'x'
.text:000014AC                 call    ?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Size(void)
.text:000014B1                 cmp     eax, [ebp+var_24]
.text:000014B4                 ja      short loc_14C3
.text:000014B6                 mov     ecx, [ebp+var_10]
.text:000014B9                 add     ecx, 78h ; 'x'
.text:000014BC                 call    ?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::AddNew(void)
.text:000014C1                 jmp     short loc_14A6
.text:000014C3 ; ---------------------------------------------------------------------------
.text:000014C3
.text:000014C3 loc_14C3:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+164j
.text:000014C3                 mov     eax, [ebp+var_24]
.text:000014C6                 push    eax
.text:000014C7                 mov     ecx, [ebp+var_10]
.text:000014CA                 add     ecx, 78h ; 'x'
.text:000014CD                 call    ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[](uint)
.text:000014D2                 mov     [ebp+var_2C], eax
.text:000014D5                 mov     ecx, [ebp+var_2C]
.text:000014D8                 add     ecx, 8
.text:000014DB                 call    ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ ; CMyComPtr<IUnknown>::operator IUnknown *(void)
.text:000014E0                 test    eax, eax
.text:000014E2                 jnz     short loc_14EC
.text:000014E4                 mov     ecx, [ebp+var_2C]
.text:000014E7                 cmp     dword ptr [ecx], 0
.text:000014EA                 jz      short loc_150A
.text:000014EC
.text:000014EC loc_14EC:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+192j
.text:000014EC                 mov     [ebp+var_40], 80004001h
.text:000014F3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000014FA                 lea     ecx, [ebp+var_18]
.text:000014FD                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001502                 mov     eax, [ebp+var_40]
.text:00001505                 jmp     loc_15A9
.text:0000150A ; ---------------------------------------------------------------------------
.text:0000150A
.text:0000150A loc_150A:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+19Aj
.text:0000150A                 push    20h ; ' '       ; unsigned int
.text:0000150C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001511                 add     esp, 4
.text:00001514                 mov     [ebp+var_48], eax
.text:00001517                 mov     byte ptr [ebp+var_4], 1
.text:0000151B                 cmp     [ebp+var_48], 0
.text:0000151F                 jz      short loc_152E
.text:00001521                 mov     ecx, [ebp+var_48]
.text:00001524                 call    ??0CSequentialInStreamCalcSize@@QAE@XZ ; CSequentialInStreamCalcSize::CSequentialInStreamCalcSize(void)
.text:00001529                 mov     [ebp+var_50], eax
.text:0000152C                 jmp     short loc_1535
.text:0000152E ; ---------------------------------------------------------------------------
.text:0000152E
.text:0000152E loc_152E:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+1CFj
.text:0000152E                 mov     [ebp+var_50], 0
.text:00001535
.text:00001535 loc_1535:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+1DCj
.text:00001535                 mov     edx, [ebp+var_50]
.text:00001538                 mov     [ebp+var_44], edx
.text:0000153B                 mov     byte ptr [ebp+var_4], 0
.text:0000153F                 mov     eax, [ebp+var_44]
.text:00001542                 mov     [ebp+var_30], eax
.text:00001545                 mov     ecx, [ebp+var_30]
.text:00001548                 push    ecx
.text:00001549                 mov     ecx, [ebp+var_2C]
.text:0000154C                 add     ecx, 8
.text:0000154F                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:00001554                 mov     edx, [ebp+var_2C]
.text:00001557                 mov     eax, [ebp+var_30]
.text:0000155A                 mov     [edx], eax
.text:0000155C                 lea     ecx, [ebp+var_18]
.text:0000155F                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00001564                 push    eax             ; struct ISequentialInStream *
.text:00001565                 mov     ecx, [ebp+var_30] ; this
.text:00001568                 call    ?SetStream@CSequentialInStreamCalcSize@@QAEXPAUISequentialInStream@@@Z ; CSequentialInStreamCalcSize::SetStream(ISequentialInStream *)
.text:0000156D                 mov     ecx, [ebp+var_30] ; this
.text:00001570                 call    ?Init@CSequentialInStreamCalcSize@@QAEXXZ ; CSequentialInStreamCalcSize::Init(void)
.text:00001575                 mov     ecx, [ebp+var_2C]
.text:00001578                 mov     edx, [ecx]
.text:0000157A                 push    edx
.text:0000157B                 lea     ecx, [ebp+var_18]
.text:0000157E                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00001583                 lea     ecx, [ebp+var_18]
.text:00001586                 call    ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach(void)
.text:0000158B                 mov     ecx, [ebp+arg_8]
.text:0000158E                 mov     [ecx], eax
.text:00001590                 mov     [ebp+var_4C], 0
.text:00001597                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000159E                 lea     ecx, [ebp+var_18]
.text:000015A1                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000015A6                 mov     eax, [ebp+var_4C]
.text:000015A9
.text:000015A9 loc_15A9:                               ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+BFj
.text:000015A9                                         ; NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+F7j ...
.text:000015A9                 push    edx
.text:000015AA                 mov     ecx, ebp
.text:000015AC                 push    eax
.text:000015AD                 lea     edx, $LN20
.text:000015B3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000015B8                 pop     eax
.text:000015B9                 pop     edx
.text:000015BA                 mov     ecx, [ebp+var_C]
.text:000015BD                 mov     large fs:0, ecx
.text:000015C4                 pop     ecx
.text:000015C5                 pop     edi
.text:000015C6                 add     esp, 50h
.text:000015C9                 cmp     ebp, esp
.text:000015CB                 call    __RTC_CheckEsp
.text:000015D0                 mov     esp, ebp
.text:000015D2                 pop     ebp
.text:000015D3                 retn    0Ch
.text:000015D3 ?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z endp
.text:000015D3
.text:000015D3 ; ---------------------------------------------------------------------------
.text:000015D6                 align 4
.text:000015D8 $LN20           dd 1                    ; DATA XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+25Do
.text:000015DC                 dd offset $LN19
.text:000015E0 $LN19           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000015DCo
.text:000015E8                 dd offset $LN17         ; "seqInStream"
.text:000015EC $LN17           db 'seqInStream',0      ; DATA XREF: .text:000015E8o
.text:000015F8                 align 10h
.text:00001600
.text:00001600 ; =============== S U B R O U T I N E =======================================
.text:00001600
.text:00001600 ; Attributes: bp-based frame
.text:00001600
.text:00001600 ; __int32 __thiscall NCoderMixer2::CMixerST::GetOutStream(NCoderMixer2::CMixerST *this, struct ISequentialOutStream *const *, unsigned int, struct ISequentialOutStream **)
.text:00001600                 public ?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z
.text:00001600 ?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z proc near
.text:00001600                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+270p
.text:00001600                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+237p
.text:00001600
.text:00001600 var_B0          = dword ptr -0B0h
.text:00001600 var_AC          = dword ptr -0ACh
.text:00001600 var_A8          = dword ptr -0A8h
.text:00001600 var_A4          = dword ptr -0A4h
.text:00001600 var_A0          = dword ptr -0A0h
.text:00001600 var_9C          = dword ptr -9Ch
.text:00001600 var_98          = dword ptr -98h
.text:00001600 var_94          = dword ptr -94h
.text:00001600 var_90          = dword ptr -90h
.text:00001600 var_8C          = dword ptr -8Ch
.text:00001600 var_88          = dword ptr -88h
.text:00001600 var_84          = dword ptr -84h
.text:00001600 var_80          = dword ptr -80h
.text:00001600 var_7C          = dword ptr -7Ch
.text:00001600 var_78          = dword ptr -78h
.text:00001600 var_74          = dword ptr -74h
.text:00001600 var_70          = dword ptr -70h
.text:00001600 var_6C          = dword ptr -6Ch
.text:00001600 var_64          = byte ptr -64h
.text:00001600 var_58          = byte ptr -58h
.text:00001600 var_4D          = byte ptr -4Dh
.text:00001600 var_4C          = dword ptr -4Ch
.text:00001600 var_48          = dword ptr -48h
.text:00001600 var_44          = dword ptr -44h
.text:00001600 var_3C          = dword ptr -3Ch
.text:00001600 var_30          = dword ptr -30h
.text:00001600 var_28          = dword ptr -28h
.text:00001600 var_24          = dword ptr -24h
.text:00001600 var_20          = dword ptr -20h
.text:00001600 var_18          = byte ptr -18h
.text:00001600 var_10          = dword ptr -10h
.text:00001600 var_C           = dword ptr -0Ch
.text:00001600 var_4           = dword ptr -4
.text:00001600 arg_0           = dword ptr  8
.text:00001600 arg_4           = dword ptr  0Ch
.text:00001600 arg_8           = dword ptr  10h
.text:00001600
.text:00001600                 push    ebp
.text:00001601                 mov     ebp, esp
.text:00001603                 push    0FFFFFFFFh
.text:00001605                 push    offset __ehhandler$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z
.text:0000160A                 mov     eax, large fs:0
.text:00001610                 push    eax
.text:00001611                 sub     esp, 0A4h
.text:00001617                 push    esi
.text:00001618                 push    edi
.text:00001619                 push    ecx
.text:0000161A                 lea     edi, [ebp+var_B0]
.text:00001620                 mov     ecx, 29h ; ')'
.text:00001625                 mov     eax, 0CCCCCCCCh
.text:0000162A                 rep stosd
.text:0000162C                 pop     ecx
.text:0000162D                 mov     eax, dword ptr ds:___security_cookie
.text:00001632                 xor     eax, ebp
.text:00001634                 push    eax
.text:00001635                 lea     eax, [ebp+var_C]
.text:00001638                 mov     large fs:0, eax
.text:0000163E                 mov     [ebp+var_10], ecx
.text:00001641                 lea     ecx, [ebp+var_18]
.text:00001644                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00001649                 mov     [ebp+var_4], 0
.text:00001650                 mov     [ebp+var_20], 0FFFFFFFFh
.text:00001657                 mov     eax, [ebp+var_10]
.text:0000165A                 movzx   ecx, byte ptr [eax+60h]
.text:0000165E                 test    ecx, ecx
.text:00001660                 jnz     short loc_1676
.text:00001662                 mov     edx, [ebp+var_10]
.text:00001665                 mov     eax, [edx+2Ch]
.text:00001668                 cmp     eax, [ebp+arg_4]
.text:0000166B                 jnz     short loc_1674
.text:0000166D                 mov     [ebp+var_20], 0
.text:00001674
.text:00001674 loc_1674:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+6Bj
.text:00001674                 jmp     short loc_1688
.text:00001676 ; ---------------------------------------------------------------------------
.text:00001676
.text:00001676 loc_1676:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+60j
.text:00001676                 mov     ecx, [ebp+arg_4]
.text:00001679                 push    ecx             ; unsigned int
.text:0000167A                 mov     ecx, [ebp+var_10]
.text:0000167D                 add     ecx, 8          ; this
.text:00001680                 call    ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)
.text:00001685                 mov     [ebp+var_20], eax
.text:00001688
.text:00001688 loc_1688:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *):loc_1674j
.text:00001688                 cmp     [ebp+var_20], 0
.text:0000168C                 jl      short loc_16CB
.text:0000168E                 mov     edx, [ebp+var_20]
.text:00001691                 mov     eax, [ebp+arg_0]
.text:00001694                 mov     ecx, [eax+edx*4]
.text:00001697                 push    ecx
.text:00001698                 lea     ecx, [ebp+var_18]
.text:0000169B                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000016A0                 lea     ecx, [ebp+var_18]
.text:000016A3                 call    ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach(void)
.text:000016A8                 mov     edx, [ebp+arg_8]
.text:000016AB                 mov     [edx], eax
.text:000016AD                 mov     [ebp+var_7C], 0
.text:000016B4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000016BB                 lea     ecx, [ebp+var_18]
.text:000016BE                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000016C3                 mov     eax, [ebp+var_7C]
.text:000016C6                 jmp     loc_1AA9
.text:000016CB ; ---------------------------------------------------------------------------
.text:000016CB
.text:000016CB loc_16CB:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+8Cj
.text:000016CB                 mov     eax, [ebp+arg_4]
.text:000016CE                 push    eax             ; unsigned int
.text:000016CF                 push    0               ; bool
.text:000016D1                 mov     ecx, [ebp+var_10]
.text:000016D4                 add     ecx, 4          ; this
.text:000016D7                 call    ?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z ; NCoderMixer2::CMixer::FindBond_for_Stream(bool,uint)
.text:000016DC                 mov     [ebp+var_24], eax
.text:000016DF                 cmp     [ebp+var_24], 0
.text:000016E3                 jge     short loc_1703
.text:000016E5                 mov     [ebp+var_80], 80070057h
.text:000016EC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000016F3                 lea     ecx, [ebp+var_18]
.text:000016F6                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000016FB                 mov     eax, [ebp+var_80]
.text:000016FE                 jmp     loc_1AA9
.text:00001703 ; ---------------------------------------------------------------------------
.text:00001703
.text:00001703 loc_1703:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+E3j
.text:00001703                 mov     ecx, [ebp+var_10]
.text:00001706                 movzx   edx, byte ptr [ecx+60h]
.text:0000170A                 push    edx             ; bool
.text:0000170B                 mov     eax, [ebp+var_24]
.text:0000170E                 push    eax
.text:0000170F                 mov     ecx, [ebp+var_10]
.text:00001712                 add     ecx, 14h
.text:00001715                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:0000171A                 mov     ecx, eax        ; this
.text:0000171C                 call    ?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z ; NCoderMixer2::CBond::Get_InIndex(bool)
.text:00001721                 mov     [ebp+var_28], eax
.text:00001724                 mov     ecx, [ebp+var_28]
.text:00001727                 mov     [ebp+var_30], ecx
.text:0000172A                 mov     [ebp+var_3C], 0
.text:00001731                 mov     edx, [ebp+var_10]
.text:00001734                 movzx   eax, byte ptr [edx+60h]
.text:00001738                 test    eax, eax
.text:0000173A                 jnz     short loc_1753
.text:0000173C                 lea     ecx, [ebp+var_3C]
.text:0000173F                 push    ecx             ; unsigned int *
.text:00001740                 lea     edx, [ebp+var_30]
.text:00001743                 push    edx             ; unsigned int *
.text:00001744                 mov     eax, [ebp+var_28]
.text:00001747                 push    eax             ; unsigned int
.text:00001748                 mov     ecx, [ebp+var_10]
.text:0000174B                 add     ecx, 8          ; this
.text:0000174E                 call    ?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream(uint,uint &,uint &)
.text:00001753
.text:00001753 loc_1753:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+13Aj
.text:00001753                 mov     ecx, [ebp+var_30]
.text:00001756                 push    ecx
.text:00001757                 mov     ecx, [ebp+var_10]
.text:0000175A                 add     ecx, 6Ch ; 'l'
.text:0000175D                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:00001762                 mov     [ebp+var_44], eax
.text:00001765                 lea     ecx, [ebp+var_18]
.text:00001768                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:0000176D                 push    eax             ; void **
.text:0000176E                 push    offset _IID_ISequentialOutStream ; struct _GUID *
.text:00001773                 mov     ecx, [ebp+var_44] ; this
.text:00001776                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:0000177B                 lea     ecx, [ebp+var_18]
.text:0000177E                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:00001783                 movzx   edx, al
.text:00001786                 test    edx, edx
.text:00001788                 jz      short loc_17AE
.text:0000178A                 mov     [ebp+var_84], 80004001h
.text:00001794                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000179B                 lea     ecx, [ebp+var_18]
.text:0000179E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000017A3                 mov     eax, [ebp+var_84]
.text:000017A9                 jmp     loc_1AA9
.text:000017AE ; ---------------------------------------------------------------------------
.text:000017AE
.text:000017AE loc_17AE:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+188j
.text:000017AE                 mov     eax, [ebp+var_10]
.text:000017B1                 movzx   ecx, byte ptr [eax+60h]
.text:000017B5                 test    ecx, ecx
.text:000017B7                 jz      short loc_17C7
.text:000017B9                 mov     edx, [ebp+var_44]
.text:000017BC                 mov     eax, [edx+8]
.text:000017BF                 mov     [ebp+var_A4], eax
.text:000017C5                 jmp     short loc_17D1
.text:000017C7 ; ---------------------------------------------------------------------------
.text:000017C7
.text:000017C7 loc_17C7:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+1B7j
.text:000017C7                 mov     [ebp+var_A4], 1
.text:000017D1
.text:000017D1 loc_17D1:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+1C5j
.text:000017D1                 mov     ecx, [ebp+var_A4]
.text:000017D7                 mov     [ebp+var_48], ecx
.text:000017DA                 mov     edx, [ebp+var_10]
.text:000017DD                 movzx   eax, byte ptr [edx+60h]
.text:000017E1                 test    eax, eax
.text:000017E3                 jz      short loc_17FE
.text:000017E5                 mov     ecx, [ebp+var_30]
.text:000017E8                 push    ecx
.text:000017E9                 mov     ecx, [ebp+var_10]
.text:000017EC                 add     ecx, 30h ; '0'
.text:000017EF                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000017F4                 mov     edx, [eax]
.text:000017F6                 mov     [ebp+var_A8], edx
.text:000017FC                 jmp     short loc_1807
.text:000017FE ; ---------------------------------------------------------------------------
.text:000017FE
.text:000017FE loc_17FE:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+1E3j
.text:000017FE                 mov     eax, [ebp+var_30]
.text:00001801                 mov     [ebp+var_A8], eax
.text:00001807
.text:00001807 loc_1807:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+1FCj
.text:00001807                 mov     ecx, [ebp+var_A8]
.text:0000180D                 mov     [ebp+var_4C], ecx
.text:00001810                 mov     [ebp+var_4D], 0
.text:00001814                 cmp     [ebp+var_48], 1
.text:00001818                 jnz     loc_194D
.text:0000181E                 lea     ecx, [ebp+var_58]
.text:00001821                 call    ??0?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::CMyComPtr<ICompressSetOutStream>(void)
.text:00001826                 mov     byte ptr [ebp+var_4], 1
.text:0000182A                 lea     ecx, [ebp+var_58]
.text:0000182D                 call    ??I?$CMyComPtr@UICompressSetOutStream@@@@QAEPAPAUICompressSetOutStream@@XZ ; CMyComPtr<ICompressSetOutStream>::operator&(void)
.text:00001832                 push    eax
.text:00001833                 push    offset _IID_ICompressSetOutStream
.text:00001838                 mov     ecx, [ebp+var_44]
.text:0000183B                 call    ??$QueryInterface@UICompressSetOutStream@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetOutStream@@@Z ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetOutStream>(_GUID const &,ICompressSetOutStream * *)
.text:00001840                 lea     ecx, [ebp+var_58]
.text:00001843                 call    ??B?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ ; CMyComPtr<ICompressSetOutStream>::operator ICompressSetOutStream *(void)
.text:00001848                 test    eax, eax
.text:0000184A                 jz      loc_1941
.text:00001850                 lea     ecx, [ebp+var_64]
.text:00001853                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00001858                 mov     byte ptr [ebp+var_4], 2
.text:0000185C                 lea     ecx, [ebp+var_64]
.text:0000185F                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00001864                 push    eax             ; struct ISequentialOutStream **
.text:00001865                 mov     edx, [ebp+var_4C]
.text:00001868                 push    edx             ; unsigned int
.text:00001869                 mov     eax, [ebp+arg_0]
.text:0000186C                 push    eax             ; struct ISequentialOutStream **
.text:0000186D                 mov     ecx, [ebp+var_10] ; this
.text:00001870                 call    ?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)
.text:00001875                 mov     [ebp+var_6C], eax
.text:00001878                 cmp     [ebp+var_6C], 0
.text:0000187C                 jz      short loc_18B9
.text:0000187E                 mov     ecx, [ebp+var_6C]
.text:00001881                 mov     [ebp+var_88], ecx
.text:00001887                 mov     byte ptr [ebp+var_4], 1
.text:0000188B                 lea     ecx, [ebp+var_64]
.text:0000188E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001893                 mov     byte ptr [ebp+var_4], 0
.text:00001897                 lea     ecx, [ebp+var_58]
.text:0000189A                 call    ??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>(void)
.text:0000189F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000018A6                 lea     ecx, [ebp+var_18]
.text:000018A9                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000018AE                 mov     eax, [ebp+var_88]
.text:000018B4                 jmp     loc_1AA9
.text:000018B9 ; ---------------------------------------------------------------------------
.text:000018B9
.text:000018B9 loc_18B9:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+27Cj
.text:000018B9                 lea     ecx, [ebp+var_58]
.text:000018BC                 call    ??C?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ ; CMyComPtr<ICompressSetOutStream>::operator->(void)
.text:000018C1                 mov     [ebp+var_AC], eax
.text:000018C7                 lea     ecx, [ebp+var_64]
.text:000018CA                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000018CF                 mov     esi, esp
.text:000018D1                 push    eax
.text:000018D2                 mov     edx, [ebp+var_AC]
.text:000018D8                 push    edx
.text:000018D9                 mov     eax, [ebp+var_AC]
.text:000018DF                 mov     ecx, [eax]
.text:000018E1                 mov     edx, [ecx+0Ch]
.text:000018E4                 call    edx
.text:000018E6                 cmp     esi, esp
.text:000018E8                 call    __RTC_CheckEsp
.text:000018ED                 mov     [ebp+var_70], eax
.text:000018F0                 cmp     [ebp+var_70], 0
.text:000018F4                 jz      short loc_1931
.text:000018F6                 mov     eax, [ebp+var_70]
.text:000018F9                 mov     [ebp+var_8C], eax
.text:000018FF                 mov     byte ptr [ebp+var_4], 1
.text:00001903                 lea     ecx, [ebp+var_64]
.text:00001906                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000190B                 mov     byte ptr [ebp+var_4], 0
.text:0000190F                 lea     ecx, [ebp+var_58]
.text:00001912                 call    ??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>(void)
.text:00001917                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000191E                 lea     ecx, [ebp+var_18]
.text:00001921                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001926                 mov     eax, [ebp+var_8C]
.text:0000192C                 jmp     loc_1AA9
.text:00001931 ; ---------------------------------------------------------------------------
.text:00001931
.text:00001931 loc_1931:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+2F4j
.text:00001931                 mov     [ebp+var_4D], 1
.text:00001935                 mov     byte ptr [ebp+var_4], 1
.text:00001939                 lea     ecx, [ebp+var_64]
.text:0000193C                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001941
.text:00001941 loc_1941:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+24Aj
.text:00001941                 mov     byte ptr [ebp+var_4], 0
.text:00001945                 lea     ecx, [ebp+var_58]
.text:00001948                 call    ??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>(void)
.text:0000194D
.text:0000194D loc_194D:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+218j
.text:0000194D                 movzx   ecx, [ebp+var_4D]
.text:00001951                 test    ecx, ecx
.text:00001953                 jnz     short loc_197F
.text:00001955                 cmp     [ebp+var_48], 0
.text:00001959                 jz      short loc_197F
.text:0000195B                 mov     [ebp+var_90], 80004001h
.text:00001965                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000196C                 lea     ecx, [ebp+var_18]
.text:0000196F                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001974                 mov     eax, [ebp+var_90]
.text:0000197A                 jmp     loc_1AA9
.text:0000197F ; ---------------------------------------------------------------------------
.text:0000197F
.text:0000197F loc_197F:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+353j
.text:0000197F                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+359j ...
.text:0000197F                 mov     ecx, [ebp+var_10]
.text:00001982                 add     ecx, 78h ; 'x'
.text:00001985                 call    ?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Size(void)
.text:0000198A                 cmp     eax, [ebp+var_24]
.text:0000198D                 ja      short loc_199C
.text:0000198F                 mov     ecx, [ebp+var_10]
.text:00001992                 add     ecx, 78h ; 'x'
.text:00001995                 call    ?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CStBinderStream>::AddNew(void)
.text:0000199A                 jmp     short loc_197F
.text:0000199C ; ---------------------------------------------------------------------------
.text:0000199C
.text:0000199C loc_199C:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+38Dj
.text:0000199C                 mov     edx, [ebp+var_24]
.text:0000199F                 push    edx
.text:000019A0                 mov     ecx, [ebp+var_10]
.text:000019A3                 add     ecx, 78h ; 'x'
.text:000019A6                 call    ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[](uint)
.text:000019AB                 mov     [ebp+var_74], eax
.text:000019AE                 mov     ecx, [ebp+var_74]
.text:000019B1                 add     ecx, 8
.text:000019B4                 call    ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ ; CMyComPtr<IUnknown>::operator IUnknown *(void)
.text:000019B9                 test    eax, eax
.text:000019BB                 jnz     short loc_19C6
.text:000019BD                 mov     eax, [ebp+var_74]
.text:000019C0                 cmp     dword ptr [eax+4], 0
.text:000019C4                 jz      short loc_19EA
.text:000019C6
.text:000019C6 loc_19C6:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+3BBj
.text:000019C6                 mov     [ebp+var_94], 80004001h
.text:000019D0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000019D7                 lea     ecx, [ebp+var_18]
.text:000019DA                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000019DF                 mov     eax, [ebp+var_94]
.text:000019E5                 jmp     loc_1AA9
.text:000019EA ; ---------------------------------------------------------------------------
.text:000019EA
.text:000019EA loc_19EA:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+3C4j
.text:000019EA                 push    18h             ; unsigned int
.text:000019EC                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000019F1                 add     esp, 4
.text:000019F4                 mov     [ebp+var_9C], eax
.text:000019FA                 mov     byte ptr [ebp+var_4], 3
.text:000019FE                 cmp     [ebp+var_9C], 0
.text:00001A05                 jz      short loc_1A1A
.text:00001A07                 mov     ecx, [ebp+var_9C]
.text:00001A0D                 call    ??0COutStreamCalcSize@@QAE@XZ ; COutStreamCalcSize::COutStreamCalcSize(void)
.text:00001A12                 mov     [ebp+var_B0], eax
.text:00001A18                 jmp     short loc_1A24
.text:00001A1A ; ---------------------------------------------------------------------------
.text:00001A1A
.text:00001A1A loc_1A1A:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+405j
.text:00001A1A                 mov     [ebp+var_B0], 0
.text:00001A24
.text:00001A24 loc_1A24:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+418j
.text:00001A24                 mov     ecx, [ebp+var_B0]
.text:00001A2A                 mov     [ebp+var_98], ecx
.text:00001A30                 mov     byte ptr [ebp+var_4], 0
.text:00001A34                 mov     edx, [ebp+var_98]
.text:00001A3A                 mov     [ebp+var_78], edx
.text:00001A3D                 mov     eax, [ebp+var_78]
.text:00001A40                 push    eax
.text:00001A41                 mov     ecx, [ebp+var_74]
.text:00001A44                 add     ecx, 8
.text:00001A47                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:00001A4C                 mov     ecx, [ebp+var_74]
.text:00001A4F                 mov     edx, [ebp+var_78]
.text:00001A52                 mov     [ecx+4], edx
.text:00001A55                 lea     ecx, [ebp+var_18]
.text:00001A58                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001A5D                 push    eax             ; struct ISequentialOutStream *
.text:00001A5E                 mov     ecx, [ebp+var_78] ; this
.text:00001A61                 call    ?SetStream@COutStreamCalcSize@@QAEXPAUISequentialOutStream@@@Z ; COutStreamCalcSize::SetStream(ISequentialOutStream *)
.text:00001A66                 mov     ecx, [ebp+var_78] ; this
.text:00001A69                 call    ?Init@COutStreamCalcSize@@QAEXXZ ; COutStreamCalcSize::Init(void)
.text:00001A6E                 mov     eax, [ebp+var_74]
.text:00001A71                 mov     ecx, [eax+4]
.text:00001A74                 push    ecx
.text:00001A75                 lea     ecx, [ebp+var_18]
.text:00001A78                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00001A7D                 lea     ecx, [ebp+var_18]
.text:00001A80                 call    ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach(void)
.text:00001A85                 mov     edx, [ebp+arg_8]
.text:00001A88                 mov     [edx], eax
.text:00001A8A                 mov     [ebp+var_A0], 0
.text:00001A94                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A9B                 lea     ecx, [ebp+var_18]
.text:00001A9E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001AA3                 mov     eax, [ebp+var_A0]
.text:00001AA9
.text:00001AA9 loc_1AA9:                               ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+C6j
.text:00001AA9                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+FEj ...
.text:00001AA9                 push    edx
.text:00001AAA                 mov     ecx, ebp
.text:00001AAC                 push    eax
.text:00001AAD                 lea     edx, $LN36
.text:00001AB3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001AB8                 pop     eax
.text:00001AB9                 pop     edx
.text:00001ABA                 mov     ecx, [ebp+var_C]
.text:00001ABD                 mov     large fs:0, ecx
.text:00001AC4                 pop     ecx
.text:00001AC5                 pop     edi
.text:00001AC6                 pop     esi
.text:00001AC7                 add     esp, 0B0h
.text:00001ACD                 cmp     ebp, esp
.text:00001ACF                 call    __RTC_CheckEsp
.text:00001AD4                 mov     esp, ebp
.text:00001AD6                 pop     ebp
.text:00001AD7                 retn    0Ch
.text:00001AD7 ?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z endp
.text:00001AD7
.text:00001AD7 ; ---------------------------------------------------------------------------
.text:00001ADA                 align 4
.text:00001ADC $LN36           dd 5                    ; DATA XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+4ADo
.text:00001AE0                 dd offset $LN35_0
.text:00001AE4 $LN35_0         dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001AE0o
.text:00001AEC                 dd offset $LN29_0       ; "seqOutStream"
.text:00001AF0                 dd 0FFFFFFD0h, 4
.text:00001AF8                 dd offset $LN30_0       ; "coderIndex"
.text:00001AFC                 dd 0FFFFFFC4h, 4
.text:00001B04                 dd offset $LN31_0       ; "coderStreamIndex"
.text:00001B08                 dd 0FFFFFFA8h, 4
.text:00001B10                 dd offset $LN32_0       ; "setOutStream"
.text:00001B14                 dd 0FFFFFF9Ch, 4
.text:00001B1C                 dd offset $LN33         ; "seqOutStream2"
.text:00001B20 $LN33           db 'seqOutStream2',0    ; DATA XREF: .text:00001B1Co
.text:00001B2E $LN32_0         db 'setOutStream',0     ; DATA XREF: .text:00001B10o
.text:00001B3B $LN31_0         db 'coderStreamIndex',0 ; DATA XREF: .text:00001B04o
.text:00001B4C $LN30_0         db 'coderIndex',0       ; DATA XREF: .text:00001AF8o
.text:00001B57 $LN29_0         db 'seqOutStream',0     ; DATA XREF: .text:00001AECo
.text:00001B64                 align 10h
.text:00001B70
.text:00001B70 ; =============== S U B R O U T I N E =======================================
.text:00001B70
.text:00001B70 ; Attributes: bp-based frame
.text:00001B70
.text:00001B70 ; __int32 __thiscall NCoderMixer2::CMixerST::FinishStream(NCoderMixer2::CMixerST *this, unsigned int)
.text:00001B70                 public ?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z
.text:00001B70 ?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z proc near
.text:00001B70                                         ; CODE XREF: NCoderMixer2::CMixerST::FinishCoder(uint)+B3p
.text:00001B70
.text:00001B70 var_50          = dword ptr -50h
.text:00001B70 var_4C          = dword ptr -4Ch
.text:00001B70 var_48          = dword ptr -48h
.text:00001B70 var_40          = byte ptr -40h
.text:00001B70 var_38          = dword ptr -38h
.text:00001B70 var_30          = dword ptr -30h
.text:00001B70 var_24          = dword ptr -24h
.text:00001B70 var_1C          = dword ptr -1Ch
.text:00001B70 var_18          = dword ptr -18h
.text:00001B70 var_14          = dword ptr -14h
.text:00001B70 var_10          = dword ptr -10h
.text:00001B70 var_C           = dword ptr -0Ch
.text:00001B70 var_4           = dword ptr -4
.text:00001B70 arg_0           = dword ptr  8
.text:00001B70
.text:00001B70                 push    ebp
.text:00001B71                 mov     ebp, esp
.text:00001B73                 push    0FFFFFFFFh
.text:00001B75                 push    offset __ehhandler$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z
.text:00001B7A                 mov     eax, large fs:0
.text:00001B80                 push    eax
.text:00001B81                 sub     esp, 44h
.text:00001B84                 push    esi
.text:00001B85                 push    edi
.text:00001B86                 push    ecx
.text:00001B87                 lea     edi, [ebp+var_50]
.text:00001B8A                 mov     ecx, 11h
.text:00001B8F                 mov     eax, 0CCCCCCCCh
.text:00001B94                 rep stosd
.text:00001B96                 pop     ecx
.text:00001B97                 mov     eax, dword ptr ds:___security_cookie
.text:00001B9C                 xor     eax, ebp
.text:00001B9E                 push    eax
.text:00001B9F                 lea     eax, [ebp+var_C]
.text:00001BA2                 mov     large fs:0, eax
.text:00001BA8                 mov     [ebp+var_10], ecx
.text:00001BAB                 mov     [ebp+var_14], 0FFFFFFFFh
.text:00001BB2                 mov     eax, [ebp+var_10]
.text:00001BB5                 movzx   ecx, byte ptr [eax+60h]
.text:00001BB9                 test    ecx, ecx
.text:00001BBB                 jnz     short loc_1BD1
.text:00001BBD                 mov     edx, [ebp+var_10]
.text:00001BC0                 mov     eax, [edx+2Ch]
.text:00001BC3                 cmp     eax, [ebp+arg_0]
.text:00001BC6                 jnz     short loc_1BCF
.text:00001BC8                 mov     [ebp+var_14], 0
.text:00001BCF
.text:00001BCF loc_1BCF:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint)+56j
.text:00001BCF                 jmp     short loc_1BE3
.text:00001BD1 ; ---------------------------------------------------------------------------
.text:00001BD1
.text:00001BD1 loc_1BD1:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint)+4Bj
.text:00001BD1                 mov     ecx, [ebp+arg_0]
.text:00001BD4                 push    ecx             ; unsigned int
.text:00001BD5                 mov     ecx, [ebp+var_10]
.text:00001BD8                 add     ecx, 8          ; this
.text:00001BDB                 call    ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)
.text:00001BE0                 mov     [ebp+var_14], eax
.text:00001BE3
.text:00001BE3 loc_1BE3:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint):loc_1BCFj
.text:00001BE3                 cmp     [ebp+var_14], 0
.text:00001BE7                 jl      short loc_1BF0
.text:00001BE9                 xor     eax, eax
.text:00001BEB                 jmp     loc_1CFE
.text:00001BF0 ; ---------------------------------------------------------------------------
.text:00001BF0
.text:00001BF0 loc_1BF0:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint)+77j
.text:00001BF0                 mov     edx, [ebp+arg_0]
.text:00001BF3                 push    edx             ; unsigned int
.text:00001BF4                 push    0               ; bool
.text:00001BF6                 mov     ecx, [ebp+var_10]
.text:00001BF9                 add     ecx, 4          ; this
.text:00001BFC                 call    ?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z ; NCoderMixer2::CMixer::FindBond_for_Stream(bool,uint)
.text:00001C01                 mov     [ebp+var_18], eax
.text:00001C04                 cmp     [ebp+var_18], 0
.text:00001C08                 jge     short loc_1C14
.text:00001C0A                 mov     eax, 80070057h
.text:00001C0F                 jmp     loc_1CFE
.text:00001C14 ; ---------------------------------------------------------------------------
.text:00001C14
.text:00001C14 loc_1C14:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint)+98j
.text:00001C14                 mov     eax, [ebp+var_10]
.text:00001C17                 movzx   ecx, byte ptr [eax+60h]
.text:00001C1B                 push    ecx             ; bool
.text:00001C1C                 mov     edx, [ebp+var_18]
.text:00001C1F                 push    edx
.text:00001C20                 mov     ecx, [ebp+var_10]
.text:00001C23                 add     ecx, 14h
.text:00001C26                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00001C2B                 mov     ecx, eax        ; this
.text:00001C2D                 call    ?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z ; NCoderMixer2::CBond::Get_InIndex(bool)
.text:00001C32                 mov     [ebp+var_1C], eax
.text:00001C35                 mov     eax, [ebp+var_1C]
.text:00001C38                 mov     [ebp+var_24], eax
.text:00001C3B                 mov     [ebp+var_30], 0
.text:00001C42                 mov     ecx, [ebp+var_10]
.text:00001C45                 movzx   edx, byte ptr [ecx+60h]
.text:00001C49                 test    edx, edx
.text:00001C4B                 jnz     short loc_1C64
.text:00001C4D                 lea     eax, [ebp+var_30]
.text:00001C50                 push    eax             ; unsigned int *
.text:00001C51                 lea     ecx, [ebp+var_24]
.text:00001C54                 push    ecx             ; unsigned int *
.text:00001C55                 mov     edx, [ebp+var_1C]
.text:00001C58                 push    edx             ; unsigned int
.text:00001C59                 mov     ecx, [ebp+var_10]
.text:00001C5C                 add     ecx, 8          ; this
.text:00001C5F                 call    ?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream(uint,uint &,uint &)
.text:00001C64
.text:00001C64 loc_1C64:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint)+DBj
.text:00001C64                 mov     eax, [ebp+var_24]
.text:00001C67                 push    eax
.text:00001C68                 mov     ecx, [ebp+var_10]
.text:00001C6B                 add     ecx, 6Ch ; 'l'
.text:00001C6E                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:00001C73                 mov     [ebp+var_38], eax
.text:00001C76                 lea     ecx, [ebp+var_40]
.text:00001C79                 call    ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::CMyComPtr<IOutStreamFinish>(void)
.text:00001C7E                 mov     [ebp+var_4], 0
.text:00001C85                 lea     ecx, [ebp+var_40]
.text:00001C88                 call    ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator&(void)
.text:00001C8D                 push    eax             ; void **
.text:00001C8E                 push    offset _IID_IOutStreamFinish ; struct _GUID *
.text:00001C93                 mov     ecx, [ebp+var_38] ; this
.text:00001C96                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:00001C9B                 mov     [ebp+var_48], 0
.text:00001CA2                 lea     ecx, [ebp+var_40]
.text:00001CA5                 call    ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator IOutStreamFinish *(void)
.text:00001CAA                 test    eax, eax
.text:00001CAC                 jz      short loc_1CD3
.text:00001CAE                 lea     ecx, [ebp+var_40]
.text:00001CB1                 call    ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ ; CMyComPtr<IOutStreamFinish>::operator->(void)
.text:00001CB6                 mov     [ebp+var_50], eax
.text:00001CB9                 mov     ecx, [ebp+var_50]
.text:00001CBC                 mov     edx, [ecx]
.text:00001CBE                 mov     esi, esp
.text:00001CC0                 mov     eax, [ebp+var_50]
.text:00001CC3                 push    eax
.text:00001CC4                 mov     ecx, [edx+0Ch]
.text:00001CC7                 call    ecx
.text:00001CC9                 cmp     esi, esp
.text:00001CCB                 call    __RTC_CheckEsp
.text:00001CD0                 mov     [ebp+var_48], eax
.text:00001CD3
.text:00001CD3 loc_1CD3:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint)+13Cj
.text:00001CD3                 mov     edx, [ebp+var_24]
.text:00001CD6                 push    edx             ; unsigned int
.text:00001CD7                 mov     ecx, [ebp+var_10] ; this
.text:00001CDA                 call    ?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z ; NCoderMixer2::CMixerST::FinishCoder(uint)
.text:00001CDF                 push    eax
.text:00001CE0                 mov     eax, [ebp+var_48]
.text:00001CE3                 push    eax
.text:00001CE4                 call    ?GetError@NCoderMixer2@@YGJJJ@Z ; NCoderMixer2::GetError(long,long)
.text:00001CE9                 mov     [ebp+var_4C], eax
.text:00001CEC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001CF3                 lea     ecx, [ebp+var_40]
.text:00001CF6                 call    ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>(void)
.text:00001CFB                 mov     eax, [ebp+var_4C]
.text:00001CFE
.text:00001CFE loc_1CFE:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint)+7Bj
.text:00001CFE                                         ; NCoderMixer2::CMixerST::FinishStream(uint)+9Fj
.text:00001CFE                 push    edx
.text:00001CFF                 mov     ecx, ebp
.text:00001D01                 push    eax
.text:00001D02                 lea     edx, $LN16_0
.text:00001D08                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001D0D                 pop     eax
.text:00001D0E                 pop     edx
.text:00001D0F                 mov     ecx, [ebp+var_C]
.text:00001D12                 mov     large fs:0, ecx
.text:00001D19                 pop     ecx
.text:00001D1A                 pop     edi
.text:00001D1B                 pop     esi
.text:00001D1C                 add     esp, 50h
.text:00001D1F                 cmp     ebp, esp
.text:00001D21                 call    __RTC_CheckEsp
.text:00001D26                 mov     esp, ebp
.text:00001D28                 pop     ebp
.text:00001D29                 retn    4
.text:00001D29 ?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z endp
.text:00001D29
.text:00001D29 ; ---------------------------------------------------------------------------
.text:00001D2C $LN16_0         dd 3                    ; DATA XREF: NCoderMixer2::CMixerST::FinishStream(uint)+192o
.text:00001D30                 dd offset $LN15_0
.text:00001D34 $LN15_0         dd 0FFFFFFDCh, 4        ; DATA XREF: .text:00001D30o
.text:00001D3C                 dd offset $LN11_0       ; "coderIndex"
.text:00001D40                 dd 0FFFFFFD0h, 4
.text:00001D48                 dd offset $LN12         ; "coderStreamIndex"
.text:00001D4C                 dd 0FFFFFFC0h, 4
.text:00001D54                 dd offset $LN13_0       ; "finish"
.text:00001D58 $LN13_0         db 'finish',0           ; DATA XREF: .text:00001D54o
.text:00001D5F $LN12           db 'coderStreamIndex',0 ; DATA XREF: .text:00001D48o
.text:00001D70 $LN11_0         db 'coderIndex',0       ; DATA XREF: .text:00001D3Co
.text:00001D7B                 align 10h
.text:00001D80
.text:00001D80 ; =============== S U B R O U T I N E =======================================
.text:00001D80
.text:00001D80 ; Attributes: bp-based frame
.text:00001D80
.text:00001D80 ; long __stdcall NCoderMixer2::GetError(long, long)
.text:00001D80 ?GetError@NCoderMixer2@@YGJJJ@Z proc near
.text:00001D80                                         ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint)+174p
.text:00001D80                                         ; NCoderMixer2::CMixerST::FinishCoder(uint)+BDp ...
.text:00001D80
.text:00001D80 arg_0           = dword ptr  8
.text:00001D80 arg_4           = dword ptr  0Ch
.text:00001D80
.text:00001D80                 push    ebp
.text:00001D81                 mov     ebp, esp
.text:00001D83                 mov     eax, [ebp+arg_0]
.text:00001D86                 cmp     eax, [ebp+arg_4]
.text:00001D89                 jnz     short loc_1D90
.text:00001D8B                 mov     eax, [ebp+arg_0]
.text:00001D8E                 jmp     short loc_1DB2
.text:00001D90 ; ---------------------------------------------------------------------------
.text:00001D90
.text:00001D90 loc_1D90:                               ; CODE XREF: NCoderMixer2::GetError(long,long)+9j
.text:00001D90                 cmp     [ebp+arg_0], 0
.text:00001D94                 jnz     short loc_1D9B
.text:00001D96                 mov     eax, [ebp+arg_4]
.text:00001D99                 jmp     short loc_1DB2
.text:00001D9B ; ---------------------------------------------------------------------------
.text:00001D9B
.text:00001D9B loc_1D9B:                               ; CODE XREF: NCoderMixer2::GetError(long,long)+14j
.text:00001D9B                 cmp     [ebp+arg_0], 20000010h
.text:00001DA2                 jnz     short loc_1DAF
.text:00001DA4                 cmp     [ebp+arg_4], 0
.text:00001DA8                 jz      short loc_1DAF
.text:00001DAA                 mov     eax, [ebp+arg_4]
.text:00001DAD                 jmp     short loc_1DB2
.text:00001DAF ; ---------------------------------------------------------------------------
.text:00001DAF
.text:00001DAF loc_1DAF:                               ; CODE XREF: NCoderMixer2::GetError(long,long)+22j
.text:00001DAF                                         ; NCoderMixer2::GetError(long,long)+28j
.text:00001DAF                 mov     eax, [ebp+arg_0]
.text:00001DB2
.text:00001DB2 loc_1DB2:                               ; CODE XREF: NCoderMixer2::GetError(long,long)+Ej
.text:00001DB2                                         ; NCoderMixer2::GetError(long,long)+19j ...
.text:00001DB2                 pop     ebp
.text:00001DB3                 retn    8
.text:00001DB3 ?GetError@NCoderMixer2@@YGJJJ@Z endp
.text:00001DB3
.text:00001DB3 ; ---------------------------------------------------------------------------
.text:00001DB6                 align 10h
.text:00001DC0
.text:00001DC0 ; =============== S U B R O U T I N E =======================================
.text:00001DC0
.text:00001DC0 ; Attributes: bp-based frame
.text:00001DC0
.text:00001DC0 ; __int32 __thiscall NCoderMixer2::CMixerST::FinishCoder(NCoderMixer2::CMixerST *this, unsigned int)
.text:00001DC0                 public ?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z
.text:00001DC0 ?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z proc near
.text:00001DC0                                         ; CODE XREF: NCoderMixer2::CMixerST::FinishStream(uint)+16Ap
.text:00001DC0                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+715p
.text:00001DC0
.text:00001DC0 var_20          = dword ptr -20h
.text:00001DC0 var_1C          = dword ptr -1Ch
.text:00001DC0 var_18          = dword ptr -18h
.text:00001DC0 var_14          = dword ptr -14h
.text:00001DC0 var_10          = dword ptr -10h
.text:00001DC0 var_C           = dword ptr -0Ch
.text:00001DC0 var_8           = dword ptr -8
.text:00001DC0 var_4           = dword ptr -4
.text:00001DC0 arg_0           = dword ptr  8
.text:00001DC0
.text:00001DC0                 push    ebp
.text:00001DC1                 mov     ebp, esp
.text:00001DC3                 sub     esp, 20h
.text:00001DC6                 mov     eax, 0CCCCCCCCh
.text:00001DCB                 mov     [ebp+var_20], eax
.text:00001DCE                 mov     [ebp+var_1C], eax
.text:00001DD1                 mov     [ebp+var_18], eax
.text:00001DD4                 mov     [ebp+var_14], eax
.text:00001DD7                 mov     [ebp+var_10], eax
.text:00001DDA                 mov     [ebp+var_C], eax
.text:00001DDD                 mov     [ebp+var_8], eax
.text:00001DE0                 mov     [ebp+var_4], eax
.text:00001DE3                 mov     [ebp+var_4], ecx
.text:00001DE6                 mov     eax, [ebp+arg_0]
.text:00001DE9                 push    eax
.text:00001DEA                 mov     ecx, [ebp+var_4]
.text:00001DED                 add     ecx, 6Ch ; 'l'
.text:00001DF0                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:00001DF5                 mov     [ebp+var_8], eax
.text:00001DF8                 mov     ecx, [ebp+var_4]
.text:00001DFB                 movzx   edx, byte ptr [ecx+60h]
.text:00001DFF                 test    edx, edx
.text:00001E01                 jz      short loc_1E0E
.text:00001E03                 mov     eax, [ebp+var_8]
.text:00001E06                 mov     ecx, [eax+8]
.text:00001E09                 mov     [ebp+var_1C], ecx
.text:00001E0C                 jmp     short loc_1E15
.text:00001E0E ; ---------------------------------------------------------------------------
.text:00001E0E
.text:00001E0E loc_1E0E:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishCoder(uint)+41j
.text:00001E0E                 mov     [ebp+var_1C], 1
.text:00001E15
.text:00001E15 loc_1E15:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishCoder(uint)+4Cj
.text:00001E15                 mov     edx, [ebp+var_1C]
.text:00001E18                 mov     [ebp+var_C], edx
.text:00001E1B                 mov     eax, [ebp+var_4]
.text:00001E1E                 movzx   ecx, byte ptr [eax+60h]
.text:00001E22                 test    ecx, ecx
.text:00001E24                 jz      short loc_1E3C
.text:00001E26                 mov     edx, [ebp+arg_0]
.text:00001E29                 push    edx
.text:00001E2A                 mov     ecx, [ebp+var_4]
.text:00001E2D                 add     ecx, 30h ; '0'
.text:00001E30                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00001E35                 mov     eax, [eax]
.text:00001E37                 mov     [ebp+var_20], eax
.text:00001E3A                 jmp     short loc_1E42
.text:00001E3C ; ---------------------------------------------------------------------------
.text:00001E3C
.text:00001E3C loc_1E3C:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishCoder(uint)+64j
.text:00001E3C                 mov     ecx, [ebp+arg_0]
.text:00001E3F                 mov     [ebp+var_20], ecx
.text:00001E42
.text:00001E42 loc_1E42:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishCoder(uint)+7Aj
.text:00001E42                 mov     edx, [ebp+var_20]
.text:00001E45                 mov     [ebp+var_10], edx
.text:00001E48                 mov     [ebp+var_14], 0
.text:00001E4F                 mov     [ebp+var_18], 0
.text:00001E56                 jmp     short loc_1E61
.text:00001E58 ; ---------------------------------------------------------------------------
.text:00001E58
.text:00001E58 loc_1E58:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishCoder(uint)+C5j
.text:00001E58                 mov     eax, [ebp+var_18]
.text:00001E5B                 add     eax, 1
.text:00001E5E                 mov     [ebp+var_18], eax
.text:00001E61
.text:00001E61 loc_1E61:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishCoder(uint)+96j
.text:00001E61                 mov     ecx, [ebp+var_18]
.text:00001E64                 cmp     ecx, [ebp+var_C]
.text:00001E67                 jnb     short loc_1E87
.text:00001E69                 mov     edx, [ebp+var_10]
.text:00001E6C                 add     edx, [ebp+var_18]
.text:00001E6F                 push    edx             ; unsigned int
.text:00001E70                 mov     ecx, [ebp+var_4] ; this
.text:00001E73                 call    ?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z ; NCoderMixer2::CMixerST::FinishStream(uint)
.text:00001E78                 push    eax
.text:00001E79                 mov     eax, [ebp+var_14]
.text:00001E7C                 push    eax
.text:00001E7D                 call    ?GetError@NCoderMixer2@@YGJJJ@Z ; NCoderMixer2::GetError(long,long)
.text:00001E82                 mov     [ebp+var_14], eax
.text:00001E85                 jmp     short loc_1E58
.text:00001E87 ; ---------------------------------------------------------------------------
.text:00001E87
.text:00001E87 loc_1E87:                               ; CODE XREF: NCoderMixer2::CMixerST::FinishCoder(uint)+A7j
.text:00001E87                 mov     eax, [ebp+var_14]
.text:00001E8A                 add     esp, 20h
.text:00001E8D                 cmp     ebp, esp
.text:00001E8F                 call    __RTC_CheckEsp
.text:00001E94                 mov     esp, ebp
.text:00001E96                 pop     ebp
.text:00001E97                 retn    4
.text:00001E97 ?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z endp
.text:00001E97
.text:00001E97 ; ---------------------------------------------------------------------------
.text:00001E9A                 align 10h
.text:00001EA0
.text:00001EA0 ; =============== S U B R O U T I N E =======================================
.text:00001EA0
.text:00001EA0 ; Attributes: bp-based frame
.text:00001EA0
.text:00001EA0 ; void __thiscall NCoderMixer2::CMixerST::SelectMainCoder(NCoderMixer2::CMixerST *this, bool)
.text:00001EA0                 public ?SelectMainCoder@CMixerST@NCoderMixer2@@UAEX_N@Z
.text:00001EA0 ?SelectMainCoder@CMixerST@NCoderMixer2@@UAEX_N@Z proc near
.text:00001EA0                                         ; DATA XREF: .rdata:00004280o
.text:00001EA0
.text:00001EA0 var_28          = dword ptr -28h
.text:00001EA0 var_24          = dword ptr -24h
.text:00001EA0 var_20          = dword ptr -20h
.text:00001EA0 var_1C          = dword ptr -1Ch
.text:00001EA0 var_18          = dword ptr -18h
.text:00001EA0 var_14          = dword ptr -14h
.text:00001EA0 var_10          = dword ptr -10h
.text:00001EA0 var_C           = dword ptr -0Ch
.text:00001EA0 var_8           = dword ptr -8
.text:00001EA0 var_4           = dword ptr -4
.text:00001EA0 arg_0           = byte ptr  8
.text:00001EA0
.text:00001EA0                 push    ebp
.text:00001EA1                 mov     ebp, esp
.text:00001EA3                 sub     esp, 28h
.text:00001EA6                 push    edi
.text:00001EA7                 push    ecx
.text:00001EA8                 lea     edi, [ebp+var_28]
.text:00001EAB                 mov     ecx, 0Ah
.text:00001EB0                 mov     eax, 0CCCCCCCCh
.text:00001EB5                 rep stosd
.text:00001EB7                 pop     ecx
.text:00001EB8                 mov     [ebp+var_4], ecx
.text:00001EBB                 mov     eax, [ebp+var_4]
.text:00001EBE                 mov     ecx, [eax+28h]
.text:00001EC1                 mov     [ebp+var_8], ecx
.text:00001EC4                 mov     [ebp+var_C], 0FFFFFFFFh
.text:00001ECB                 mov     edx, [ebp+var_8]
.text:00001ECE                 mov     [ebp+var_10], edx
.text:00001ED1
.text:00001ED1 loc_1ED1:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+168j
.text:00001ED1                 mov     eax, [ebp+var_8]
.text:00001ED4                 push    eax
.text:00001ED5                 mov     ecx, [ebp+var_4]
.text:00001ED8                 add     ecx, 68h ; 'h'
.text:00001EDB                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:00001EE0                 mov     [ebp+var_14], eax
.text:00001EE3                 mov     ecx, [ebp+var_4]
.text:00001EE6                 mov     edx, [ebp+var_8]
.text:00001EE9                 cmp     edx, [ecx+28h]
.text:00001EEC                 jz      short loc_1F30
.text:00001EEE                 mov     eax, [ebp+var_4]
.text:00001EF1                 movzx   ecx, byte ptr [eax+5Ch]
.text:00001EF5                 test    ecx, ecx
.text:00001EF7                 jz      short loc_1F0C
.text:00001EF9                 mov     edx, [ebp+var_14]
.text:00001EFC                 movzx   eax, byte ptr [edx+39h]
.text:00001F00                 neg     eax
.text:00001F02                 sbb     eax, eax
.text:00001F04                 add     eax, 1
.text:00001F07                 mov     [ebp+var_24], eax
.text:00001F0A                 jmp     short loc_1F1D
.text:00001F0C ; ---------------------------------------------------------------------------
.text:00001F0C
.text:00001F0C loc_1F0C:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+57j
.text:00001F0C                 mov     ecx, [ebp+var_14]
.text:00001F0F                 movzx   edx, byte ptr [ecx+38h]
.text:00001F13                 neg     edx
.text:00001F15                 sbb     edx, edx
.text:00001F17                 add     edx, 1
.text:00001F1A                 mov     [ebp+var_24], edx
.text:00001F1D
.text:00001F1D loc_1F1D:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+6Aj
.text:00001F1D                 cmp     [ebp+var_24], 0
.text:00001F21                 jz      short loc_1F30
.text:00001F23                 mov     eax, [ebp+var_8]
.text:00001F26                 mov     [ebp+var_10], eax
.text:00001F29                 mov     [ebp+var_C], 0FFFFFFFEh
.text:00001F30
.text:00001F30 loc_1F30:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+4Cj
.text:00001F30                                         ; NCoderMixer2::CMixerST::SelectMainCoder(bool)+81j
.text:00001F30                 mov     ecx, [ebp+var_14]
.text:00001F33                 cmp     dword ptr [ecx+8], 1
.text:00001F37                 jz      short loc_1F3E
.text:00001F39                 jmp     loc_200D
.text:00001F3E ; ---------------------------------------------------------------------------
.text:00001F3E
.text:00001F3E loc_1F3E:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+97j
.text:00001F3E                 mov     edx, [ebp+var_8]
.text:00001F41                 push    edx
.text:00001F42                 mov     ecx, [ebp+var_4]
.text:00001F45                 add     ecx, 2Ch ; ','
.text:00001F48                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00001F4D                 mov     eax, [eax]
.text:00001F4F                 mov     [ebp+var_18], eax
.text:00001F52                 mov     ecx, [ebp+var_18]
.text:00001F55                 push    ecx             ; unsigned int
.text:00001F56                 mov     ecx, [ebp+var_4]
.text:00001F59                 add     ecx, 4          ; this
.text:00001F5C                 call    ?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams(uint)
.text:00001F61                 movzx   edx, al
.text:00001F64                 test    edx, edx
.text:00001F66                 jz      short loc_1F6D
.text:00001F68                 jmp     loc_200D
.text:00001F6D ; ---------------------------------------------------------------------------
.text:00001F6D
.text:00001F6D loc_1F6D:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+C6j
.text:00001F6D                 mov     eax, [ebp+var_18]
.text:00001F70                 push    eax             ; unsigned int
.text:00001F71                 mov     ecx, [ebp+var_4]
.text:00001F74                 add     ecx, 4          ; this
.text:00001F77                 call    ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)
.text:00001F7C                 mov     [ebp+var_1C], eax
.text:00001F7F                 cmp     [ebp+var_1C], 0
.text:00001F83                 jge     short loc_1F9A
.text:00001F85                 mov     [ebp+var_20], 13377C5h
.text:00001F8C                 push    offset __TI1H
.text:00001F91                 lea     ecx, [ebp+var_20]
.text:00001F94                 push    ecx
.text:00001F95                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001F9A ; ---------------------------------------------------------------------------
.text:00001F9A
.text:00001F9A loc_1F9A:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+E3j
.text:00001F9A                 mov     edx, [ebp+var_4]
.text:00001F9D                 movzx   eax, byte ptr [edx+5Ch]
.text:00001FA1                 test    eax, eax
.text:00001FA3                 jz      short loc_1FB8
.text:00001FA5                 mov     ecx, [ebp+var_14]
.text:00001FA8                 movzx   edx, byte ptr [ecx+38h]
.text:00001FAC                 neg     edx
.text:00001FAE                 sbb     edx, edx
.text:00001FB0                 add     edx, 1
.text:00001FB3                 mov     [ebp+var_28], edx
.text:00001FB6                 jmp     short loc_1FC9
.text:00001FB8 ; ---------------------------------------------------------------------------
.text:00001FB8
.text:00001FB8 loc_1FB8:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+103j
.text:00001FB8                 mov     eax, [ebp+var_14]
.text:00001FBB                 movzx   ecx, byte ptr [eax+39h]
.text:00001FBF                 neg     ecx
.text:00001FC1                 sbb     ecx, ecx
.text:00001FC3                 add     ecx, 1
.text:00001FC6                 mov     [ebp+var_28], ecx
.text:00001FC9
.text:00001FC9 loc_1FC9:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+116j
.text:00001FC9                 cmp     [ebp+var_28], 0
.text:00001FCD                 jz      short loc_1FD1
.text:00001FCF                 jmp     short loc_200D
.text:00001FD1 ; ---------------------------------------------------------------------------
.text:00001FD1
.text:00001FD1 loc_1FD1:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+12Dj
.text:00001FD1                 cmp     [ebp+var_C], 0FFFFFFFFh
.text:00001FD5                 jnz     short loc_1FF3
.text:00001FD7                 mov     edx, [ebp+var_8]
.text:00001FDA                 push    edx
.text:00001FDB                 mov     ecx, [ebp+var_4]
.text:00001FDE                 add     ecx, 44h ; 'D'
.text:00001FE1                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001FE6                 movzx   eax, byte ptr [eax]
.text:00001FE9                 test    eax, eax
.text:00001FEB                 jnz     short loc_1FF3
.text:00001FED                 mov     ecx, [ebp+var_8]
.text:00001FF0                 mov     [ebp+var_C], ecx
.text:00001FF3
.text:00001FF3 loc_1FF3:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+135j
.text:00001FF3                                         ; NCoderMixer2::CMixerST::SelectMainCoder(bool)+14Bj
.text:00001FF3                 mov     edx, [ebp+var_1C]
.text:00001FF6                 push    edx
.text:00001FF7                 mov     ecx, [ebp+var_4]
.text:00001FFA                 add     ecx, 10h
.text:00001FFD                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00002002                 mov     eax, [eax+4]
.text:00002005                 mov     [ebp+var_8], eax
.text:00002008                 jmp     loc_1ED1
.text:0000200D ; ---------------------------------------------------------------------------
.text:0000200D
.text:0000200D loc_200D:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+99j
.text:0000200D                                         ; NCoderMixer2::CMixerST::SelectMainCoder(bool)+C8j ...
.text:0000200D                 movzx   ecx, [ebp+arg_0]
.text:00002011                 test    ecx, ecx
.text:00002013                 jz      short loc_201D
.text:00002015                 mov     edx, [ebp+var_10]
.text:00002018                 mov     [ebp+var_8], edx
.text:0000201B                 jmp     short loc_2029
.text:0000201D ; ---------------------------------------------------------------------------
.text:0000201D
.text:0000201D loc_201D:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+173j
.text:0000201D                 cmp     [ebp+var_C], 0
.text:00002021                 jl      short loc_2029
.text:00002023                 mov     eax, [ebp+var_C]
.text:00002026                 mov     [ebp+var_8], eax
.text:00002029
.text:00002029 loc_2029:                               ; CODE XREF: NCoderMixer2::CMixerST::SelectMainCoder(bool)+17Bj
.text:00002029                                         ; NCoderMixer2::CMixerST::SelectMainCoder(bool)+181j
.text:00002029                 mov     ecx, [ebp+var_4]
.text:0000202C                 mov     edx, [ebp+var_8]
.text:0000202F                 mov     [ecx+60h], edx
.text:00002032                 pop     edi
.text:00002033                 add     esp, 28h
.text:00002036                 cmp     ebp, esp
.text:00002038                 call    __RTC_CheckEsp
.text:0000203D                 mov     esp, ebp
.text:0000203F                 pop     ebp
.text:00002040                 retn    4
.text:00002040 ?SelectMainCoder@CMixerST@NCoderMixer2@@UAEX_N@Z endp
.text:00002040
.text:00002040 ; ---------------------------------------------------------------------------
.text:00002043                 align 10h
.text:00002050
.text:00002050 ; =============== S U B R O U T I N E =======================================
.text:00002050
.text:00002050 ; Attributes: bp-based frame
.text:00002050
.text:00002050 ; __int32 __thiscall NCoderMixer2::CMixerST::Code(NCoderMixer2::CMixerST *this, struct ISequentialInStream *const *, struct ISequentialOutStream *const *, struct ICompressProgressInfo *)
.text:00002050                 public ?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:00002050 ?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text:00002050                                         ; DATA XREF: .rdata:0000428Co
.text:00002050
.text:00002050 var_110         = dword ptr -110h
.text:00002050 var_10C         = dword ptr -10Ch
.text:00002050 var_108         = dword ptr -108h
.text:00002050 var_104         = dword ptr -104h
.text:00002050 var_100         = dword ptr -100h
.text:00002050 var_FC          = dword ptr -0FCh
.text:00002050 var_F8          = dword ptr -0F8h
.text:00002050 var_F4          = dword ptr -0F4h
.text:00002050 var_F0          = dword ptr -0F0h
.text:00002050 var_EC          = dword ptr -0ECh
.text:00002050 var_E8          = dword ptr -0E8h
.text:00002050 var_E4          = dword ptr -0E4h
.text:00002050 var_E0          = dword ptr -0E0h
.text:00002050 var_DC          = dword ptr -0DCh
.text:00002050 var_D8          = dword ptr -0D8h
.text:00002050 var_D4          = dword ptr -0D4h
.text:00002050 var_D0          = dword ptr -0D0h
.text:00002050 var_CC          = dword ptr -0CCh
.text:00002050 var_C8          = dword ptr -0C8h
.text:00002050 var_C4          = dword ptr -0C4h
.text:00002050 var_C0          = dword ptr -0C0h
.text:00002050 var_B8          = byte ptr -0B8h
.text:00002050 var_B0          = dword ptr -0B0h
.text:00002050 var_A8          = byte ptr -0A8h
.text:00002050 var_A0          = dword ptr -0A0h
.text:00002050 var_98          = byte ptr -98h
.text:00002050 var_84          = byte ptr -84h
.text:00002050 var_74          = dword ptr -74h
.text:00002050 var_6C          = byte ptr -6Ch
.text:00002050 var_64          = dword ptr -64h
.text:00002050 var_5C          = byte ptr -5Ch
.text:00002050 var_54          = dword ptr -54h
.text:00002050 var_50          = dword ptr -50h
.text:00002050 var_4C          = dword ptr -4Ch
.text:00002050 var_48          = dword ptr -48h
.text:00002050 var_44          = dword ptr -44h
.text:00002050 var_3C          = byte ptr -3Ch
.text:00002050 var_28          = byte ptr -28h
.text:00002050 var_18          = dword ptr -18h
.text:00002050 var_14          = dword ptr -14h
.text:00002050 var_10          = dword ptr -10h
.text:00002050 var_C           = dword ptr -0Ch
.text:00002050 var_4           = dword ptr -4
.text:00002050 arg_0           = dword ptr  8
.text:00002050 arg_4           = dword ptr  0Ch
.text:00002050 arg_8           = dword ptr  10h
.text:00002050
.text:00002050                 push    ebp
.text:00002051                 mov     ebp, esp
.text:00002053                 push    0FFFFFFFFh
.text:00002055                 push    offset __ehhandler$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:0000205A                 mov     eax, large fs:0
.text:00002060                 push    eax
.text:00002061                 sub     esp, 104h
.text:00002067                 push    esi
.text:00002068                 push    edi
.text:00002069                 push    ecx
.text:0000206A                 lea     edi, [ebp+var_110]
.text:00002070                 mov     ecx, 41h ; 'A'
.text:00002075                 mov     eax, 0CCCCCCCCh
.text:0000207A                 rep stosd
.text:0000207C                 pop     ecx
.text:0000207D                 mov     eax, dword ptr ds:___security_cookie
.text:00002082                 xor     eax, ebp
.text:00002084                 push    eax
.text:00002085                 lea     eax, [ebp+var_C]
.text:00002088                 mov     large fs:0, eax
.text:0000208E                 mov     [ebp+var_10], ecx
.text:00002091                 mov     ecx, [ebp+var_10]
.text:00002094                 add     ecx, 74h ; 't'
.text:00002097                 call    ?Clear@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEXXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Clear(void)
.text:0000209C                 mov     eax, [ebp+var_10]
.text:0000209F                 mov     ecx, [eax+60h]
.text:000020A2                 mov     [ebp+var_14], ecx
.text:000020A5                 mov     edx, [ebp+var_10]
.text:000020A8                 mov     eax, [edx+60h]
.text:000020AB                 push    eax
.text:000020AC                 mov     ecx, [ebp+var_10]
.text:000020AF                 add     ecx, 68h ; 'h'
.text:000020B2                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:000020B7                 mov     [ebp+var_18], eax
.text:000020BA                 lea     ecx, [ebp+var_28]
.text:000020BD                 call    ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:000020C2                 mov     [ebp+var_4], 0
.text:000020C9                 lea     ecx, [ebp+var_3C]
.text:000020CC                 call    ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:000020D1                 mov     byte ptr [ebp+var_4], 1
.text:000020D5                 mov     ecx, [ebp+var_10]
.text:000020D8                 movzx   edx, byte ptr [ecx+5Ch]
.text:000020DC                 test    edx, edx
.text:000020DE                 jz      short loc_20EC
.text:000020E0                 mov     [ebp+var_E8], 1
.text:000020EA                 jmp     short loc_20F8
.text:000020EC ; ---------------------------------------------------------------------------
.text:000020EC
.text:000020EC loc_20EC:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+8Ej
.text:000020EC                 mov     eax, [ebp+var_18]
.text:000020EF                 mov     ecx, [eax+8]
.text:000020F2                 mov     [ebp+var_E8], ecx
.text:000020F8
.text:000020F8 loc_20F8:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+9Aj
.text:000020F8                 mov     edx, [ebp+var_E8]
.text:000020FE                 mov     [ebp+var_44], edx
.text:00002101                 mov     eax, [ebp+var_10]
.text:00002104                 movzx   ecx, byte ptr [eax+5Ch]
.text:00002108                 test    ecx, ecx
.text:0000210A                 jnz     short loc_2118
.text:0000210C                 mov     [ebp+var_EC], 1
.text:00002116                 jmp     short loc_2124
.text:00002118 ; ---------------------------------------------------------------------------
.text:00002118
.text:00002118 loc_2118:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+BAj
.text:00002118                 mov     edx, [ebp+var_18]
.text:0000211B                 mov     eax, [edx+8]
.text:0000211E                 mov     [ebp+var_EC], eax
.text:00002124
.text:00002124 loc_2124:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+C6j
.text:00002124                 mov     ecx, [ebp+var_EC]
.text:0000212A                 mov     [ebp+var_48], ecx
.text:0000212D                 mov     edx, [ebp+var_10]
.text:00002130                 movzx   eax, byte ptr [edx+5Ch]
.text:00002134                 test    eax, eax
.text:00002136                 jz      short loc_2143
.text:00002138                 mov     ecx, [ebp+var_14]
.text:0000213B                 mov     [ebp+var_F0], ecx
.text:00002141                 jmp     short loc_215A
.text:00002143 ; ---------------------------------------------------------------------------
.text:00002143
.text:00002143 loc_2143:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+E6j
.text:00002143                 mov     edx, [ebp+var_14]
.text:00002146                 push    edx
.text:00002147                 mov     ecx, [ebp+var_10]
.text:0000214A                 add     ecx, 2Ch ; ','
.text:0000214D                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00002152                 mov     eax, [eax]
.text:00002154                 mov     [ebp+var_F0], eax
.text:0000215A
.text:0000215A loc_215A:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+F1j
.text:0000215A                 mov     ecx, [ebp+var_F0]
.text:00002160                 mov     [ebp+var_4C], ecx
.text:00002163                 mov     edx, [ebp+var_10]
.text:00002166                 movzx   eax, byte ptr [edx+5Ch]
.text:0000216A                 test    eax, eax
.text:0000216C                 jnz     short loc_2179
.text:0000216E                 mov     ecx, [ebp+var_14]
.text:00002171                 mov     [ebp+var_F4], ecx
.text:00002177                 jmp     short loc_2190
.text:00002179 ; ---------------------------------------------------------------------------
.text:00002179
.text:00002179 loc_2179:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+11Cj
.text:00002179                 mov     edx, [ebp+var_14]
.text:0000217C                 push    edx
.text:0000217D                 mov     ecx, [ebp+var_10]
.text:00002180                 add     ecx, 2Ch ; ','
.text:00002183                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00002188                 mov     eax, [eax]
.text:0000218A                 mov     [ebp+var_F4], eax
.text:00002190
.text:00002190 loc_2190:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+127j
.text:00002190                 mov     ecx, [ebp+var_F4]
.text:00002196                 mov     [ebp+var_50], ecx
.text:00002199                 mov     [ebp+var_54], 0
.text:000021A0                 jmp     short loc_21AB
.text:000021A2 ; ---------------------------------------------------------------------------
.text:000021A2
.text:000021A2 loc_21A2:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1EEj
.text:000021A2                 mov     edx, [ebp+var_54]
.text:000021A5                 add     edx, 1
.text:000021A8                 mov     [ebp+var_54], edx
.text:000021AB
.text:000021AB loc_21AB:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+150j
.text:000021AB                 mov     eax, [ebp+var_54]
.text:000021AE                 cmp     eax, [ebp+var_44]
.text:000021B1                 jnb     loc_2243
.text:000021B7                 lea     ecx, [ebp+var_5C]
.text:000021BA                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000021BF                 mov     byte ptr [ebp+var_4], 2
.text:000021C3                 lea     ecx, [ebp+var_5C]
.text:000021C6                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:000021CB                 push    eax             ; struct ISequentialInStream **
.text:000021CC                 mov     ecx, [ebp+var_4C]
.text:000021CF                 add     ecx, [ebp+var_54]
.text:000021D2                 push    ecx             ; unsigned int
.text:000021D3                 mov     edx, [ebp+arg_0]
.text:000021D6                 push    edx             ; struct ISequentialInStream **
.text:000021D7                 mov     ecx, [ebp+var_10]
.text:000021DA                 sub     ecx, 4          ; this
.text:000021DD                 call    ?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)
.text:000021E2                 mov     [ebp+var_64], eax
.text:000021E5                 cmp     [ebp+var_64], 0
.text:000021E9                 jz      short loc_2226
.text:000021EB                 mov     eax, [ebp+var_64]
.text:000021EE                 mov     [ebp+var_D4], eax
.text:000021F4                 mov     byte ptr [ebp+var_4], 1
.text:000021F8                 lea     ecx, [ebp+var_5C]
.text:000021FB                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002200                 mov     byte ptr [ebp+var_4], 0
.text:00002204                 lea     ecx, [ebp+var_3C]
.text:00002207                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:0000220C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002213                 lea     ecx, [ebp+var_28]
.text:00002216                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:0000221B                 mov     eax, [ebp+var_D4]
.text:00002221                 jmp     loc_283F
.text:00002226 ; ---------------------------------------------------------------------------
.text:00002226
.text:00002226 loc_2226:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+199j
.text:00002226                 lea     ecx, [ebp+var_5C]
.text:00002229                 push    ecx
.text:0000222A                 lea     ecx, [ebp+var_28]
.text:0000222D                 call    ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEIABV?$CMyComPtr@UISequentialInStream@@@@@Z ; CObjectVector<CMyComPtr<ISequentialInStream>>::Add(CMyComPtr<ISequentialInStream> const &)
.text:00002232                 mov     byte ptr [ebp+var_4], 1
.text:00002236                 lea     ecx, [ebp+var_5C]
.text:00002239                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000223E                 jmp     loc_21A2
.text:00002243 ; ---------------------------------------------------------------------------
.text:00002243
.text:00002243 loc_2243:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+161j
.text:00002243                 mov     [ebp+var_54], 0
.text:0000224A                 jmp     short loc_2255
.text:0000224C ; ---------------------------------------------------------------------------
.text:0000224C
.text:0000224C loc_224C:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+298j
.text:0000224C                 mov     edx, [ebp+var_54]
.text:0000224F                 add     edx, 1
.text:00002252                 mov     [ebp+var_54], edx
.text:00002255
.text:00002255 loc_2255:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1FAj
.text:00002255                 mov     eax, [ebp+var_54]
.text:00002258                 cmp     eax, [ebp+var_48]
.text:0000225B                 jnb     loc_22ED
.text:00002261                 lea     ecx, [ebp+var_6C]
.text:00002264                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00002269                 mov     byte ptr [ebp+var_4], 3
.text:0000226D                 lea     ecx, [ebp+var_6C]
.text:00002270                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00002275                 push    eax             ; struct ISequentialOutStream **
.text:00002276                 mov     ecx, [ebp+var_50]
.text:00002279                 add     ecx, [ebp+var_54]
.text:0000227C                 push    ecx             ; unsigned int
.text:0000227D                 mov     edx, [ebp+arg_4]
.text:00002280                 push    edx             ; struct ISequentialOutStream **
.text:00002281                 mov     ecx, [ebp+var_10]
.text:00002284                 sub     ecx, 4          ; this
.text:00002287                 call    ?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)
.text:0000228C                 mov     [ebp+var_74], eax
.text:0000228F                 cmp     [ebp+var_74], 0
.text:00002293                 jz      short loc_22D0
.text:00002295                 mov     eax, [ebp+var_74]
.text:00002298                 mov     [ebp+var_D8], eax
.text:0000229E                 mov     byte ptr [ebp+var_4], 1
.text:000022A2                 lea     ecx, [ebp+var_6C]
.text:000022A5                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000022AA                 mov     byte ptr [ebp+var_4], 0
.text:000022AE                 lea     ecx, [ebp+var_3C]
.text:000022B1                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:000022B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000022BD                 lea     ecx, [ebp+var_28]
.text:000022C0                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:000022C5                 mov     eax, [ebp+var_D8]
.text:000022CB                 jmp     loc_283F
.text:000022D0 ; ---------------------------------------------------------------------------
.text:000022D0
.text:000022D0 loc_22D0:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+243j
.text:000022D0                 lea     ecx, [ebp+var_6C]
.text:000022D3                 push    ecx
.text:000022D4                 lea     ecx, [ebp+var_3C]
.text:000022D7                 call    ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z ; CObjectVector<CMyComPtr<ISequentialOutStream>>::Add(CMyComPtr<ISequentialOutStream> const &)
.text:000022DC                 mov     byte ptr [ebp+var_4], 1
.text:000022E0                 lea     ecx, [ebp+var_6C]
.text:000022E3                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000022E8                 jmp     loc_224C
.text:000022ED ; ---------------------------------------------------------------------------
.text:000022ED
.text:000022ED loc_22ED:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+20Bj
.text:000022ED                 lea     ecx, [ebp+var_84]
.text:000022F3                 call    ??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::CRecordVector<ISequentialInStream *>(void)
.text:000022F8                 mov     byte ptr [ebp+var_4], 4
.text:000022FC                 lea     ecx, [ebp+var_98]
.text:00002302                 call    ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>(void)
.text:00002307                 mov     byte ptr [ebp+var_4], 5
.text:0000230B                 mov     [ebp+var_54], 0
.text:00002312                 jmp     short loc_231D
.text:00002314 ; ---------------------------------------------------------------------------
.text:00002314
.text:00002314 loc_2314:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+2F4j
.text:00002314                 mov     edx, [ebp+var_54]
.text:00002317                 add     edx, 1
.text:0000231A                 mov     [ebp+var_54], edx
.text:0000231D
.text:0000231D loc_231D:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+2C2j
.text:0000231D                 mov     eax, [ebp+var_54]
.text:00002320                 cmp     eax, [ebp+var_44]
.text:00002323                 jnb     short loc_2346
.text:00002325                 mov     ecx, [ebp+var_54]
.text:00002328                 push    ecx
.text:00002329                 lea     ecx, [ebp+var_28]
.text:0000232C                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream>>::operator[](uint)
.text:00002331                 mov     ecx, eax
.text:00002333                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00002338                 push    eax
.text:00002339                 lea     ecx, [ebp+var_84]
.text:0000233F                 call    ?Add@?$CRecordVector@PAUISequentialInStream@@@@QAEIQAUISequentialInStream@@@Z ; CRecordVector<ISequentialInStream *>::Add(ISequentialInStream * const)
.text:00002344                 jmp     short loc_2314
.text:00002346 ; ---------------------------------------------------------------------------
.text:00002346
.text:00002346 loc_2346:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+2D3j
.text:00002346                 mov     [ebp+var_54], 0
.text:0000234D                 jmp     short loc_2358
.text:0000234F ; ---------------------------------------------------------------------------
.text:0000234F
.text:0000234F loc_234F:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+32Fj
.text:0000234F                 mov     edx, [ebp+var_54]
.text:00002352                 add     edx, 1
.text:00002355                 mov     [ebp+var_54], edx
.text:00002358
.text:00002358 loc_2358:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+2FDj
.text:00002358                 mov     eax, [ebp+var_54]
.text:0000235B                 cmp     eax, [ebp+var_48]
.text:0000235E                 jnb     short loc_2381
.text:00002360                 mov     ecx, [ebp+var_54]
.text:00002363                 push    ecx
.text:00002364                 lea     ecx, [ebp+var_3C]
.text:00002367                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream>>::operator[](uint)
.text:0000236C                 mov     ecx, eax
.text:0000236E                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00002373                 push    eax
.text:00002374                 lea     ecx, [ebp+var_98]
.text:0000237A                 call    ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::Add(ISequentialOutStream * const)
.text:0000237F                 jmp     short loc_234F
.text:00002381 ; ---------------------------------------------------------------------------
.text:00002381
.text:00002381 loc_2381:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+30Ej
.text:00002381                 mov     [ebp+var_54], 0
.text:00002388                 jmp     short loc_2393
.text:0000238A ; ---------------------------------------------------------------------------
.text:0000238A
.text:0000238A loc_238A:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+35Fj
.text:0000238A                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *):loc_25E7j
.text:0000238A                 mov     edx, [ebp+var_54]
.text:0000238D                 add     edx, 1
.text:00002390                 mov     [ebp+var_54], edx
.text:00002393
.text:00002393 loc_2393:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+338j
.text:00002393                 mov     ecx, [ebp+var_10]
.text:00002396                 add     ecx, 68h ; 'h'
.text:00002399                 call    ?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderST>::Size(void)
.text:0000239E                 cmp     [ebp+var_54], eax
.text:000023A1                 jnb     loc_25EC
.text:000023A7                 mov     eax, [ebp+var_54]
.text:000023AA                 cmp     eax, [ebp+var_14]
.text:000023AD                 jnz     short loc_23B1
.text:000023AF                 jmp     short loc_238A
.text:000023B1 ; ---------------------------------------------------------------------------
.text:000023B1
.text:000023B1 loc_23B1:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+35Dj
.text:000023B1                 mov     ecx, [ebp+var_54]
.text:000023B4                 push    ecx
.text:000023B5                 mov     ecx, [ebp+var_10]
.text:000023B8                 add     ecx, 68h ; 'h'
.text:000023BB                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:000023C0                 mov     [ebp+var_A0], eax
.text:000023C6                 mov     edx, [ebp+var_10]
.text:000023C9                 movzx   eax, byte ptr [edx+5Ch]
.text:000023CD                 test    eax, eax
.text:000023CF                 jz      loc_24C3
.text:000023D5                 lea     ecx, [ebp+var_A8]
.text:000023DB                 call    ??0?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ; CMyComPtr<ICompressInitEncoder>::CMyComPtr<ICompressInitEncoder>(void)
.text:000023E0                 mov     byte ptr [ebp+var_4], 6
.text:000023E4                 lea     ecx, [ebp+var_A8]
.text:000023EA                 call    ??I?$CMyComPtr@UICompressInitEncoder@@@@QAEPAPAUICompressInitEncoder@@XZ ; CMyComPtr<ICompressInitEncoder>::operator&(void)
.text:000023EF                 push    eax             ; void **
.text:000023F0                 push    offset _IID_ICompressInitEncoder ; struct _GUID *
.text:000023F5                 mov     ecx, [ebp+var_A0] ; this
.text:000023FB                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:00002400                 lea     ecx, [ebp+var_A8]
.text:00002406                 call    ??B?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ ; CMyComPtr<ICompressInitEncoder>::operator ICompressInitEncoder *(void)
.text:0000240B                 test    eax, eax
.text:0000240D                 jz      loc_24AF
.text:00002413                 lea     ecx, [ebp+var_A8]
.text:00002419                 call    ??C?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ ; CMyComPtr<ICompressInitEncoder>::operator->(void)
.text:0000241E                 mov     [ebp+var_F8], eax
.text:00002424                 mov     ecx, [ebp+var_F8]
.text:0000242A                 mov     edx, [ecx]
.text:0000242C                 mov     esi, esp
.text:0000242E                 mov     eax, [ebp+var_F8]
.text:00002434                 push    eax
.text:00002435                 mov     ecx, [edx+0Ch]
.text:00002438                 call    ecx
.text:0000243A                 cmp     esi, esp
.text:0000243C                 call    __RTC_CheckEsp
.text:00002441                 mov     [ebp+var_B0], eax
.text:00002447                 cmp     [ebp+var_B0], 0
.text:0000244E                 jz      short loc_24AF
.text:00002450                 mov     edx, [ebp+var_B0]
.text:00002456                 mov     [ebp+var_DC], edx
.text:0000245C                 mov     byte ptr [ebp+var_4], 5
.text:00002460                 lea     ecx, [ebp+var_A8]
.text:00002466                 call    ??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ; CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>(void)
.text:0000246B                 mov     byte ptr [ebp+var_4], 4
.text:0000246F                 lea     ecx, [ebp+var_98]
.text:00002475                 call    ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text:0000247A                 mov     byte ptr [ebp+var_4], 1
.text:0000247E                 lea     ecx, [ebp+var_84]
.text:00002484                 call    ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>(void)
.text:00002489                 mov     byte ptr [ebp+var_4], 0
.text:0000248D                 lea     ecx, [ebp+var_3C]
.text:00002490                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:00002495                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000249C                 lea     ecx, [ebp+var_28]
.text:0000249F                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:000024A4                 mov     eax, [ebp+var_DC]
.text:000024AA                 jmp     loc_283F
.text:000024AF ; ---------------------------------------------------------------------------
.text:000024AF
.text:000024AF loc_24AF:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+3BDj
.text:000024AF                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+3FEj
.text:000024AF                 mov     byte ptr [ebp+var_4], 5
.text:000024B3                 lea     ecx, [ebp+var_A8]
.text:000024B9                 call    ??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ; CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>(void)
.text:000024BE                 jmp     loc_25E7
.text:000024C3 ; ---------------------------------------------------------------------------
.text:000024C3
.text:000024C3 loc_24C3:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+37Fj
.text:000024C3                 lea     ecx, [ebp+var_B8]
.text:000024C9                 call    ??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::CMyComPtr<ICompressSetOutStreamSize>(void)
.text:000024CE                 mov     byte ptr [ebp+var_4], 7
.text:000024D2                 lea     ecx, [ebp+var_B8]
.text:000024D8                 call    ??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator&(void)
.text:000024DD                 push    eax             ; void **
.text:000024DE                 push    offset _IID_ICompressSetOutStreamSize ; struct _GUID *
.text:000024E3                 mov     ecx, [ebp+var_A0] ; this
.text:000024E9                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:000024EE                 lea     ecx, [ebp+var_B8]
.text:000024F4                 call    ??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator ICompressSetOutStreamSize *(void)
.text:000024F9                 test    eax, eax
.text:000024FB                 jz      loc_25D8
.text:00002501                 mov     eax, [ebp+var_10]
.text:00002504                 movzx   ecx, byte ptr [eax+5Ch]
.text:00002508                 test    ecx, ecx
.text:0000250A                 jz      short loc_2526
.text:0000250C                 push    0
.text:0000250E                 mov     ecx, [ebp+var_A0]
.text:00002514                 add     ecx, 28h ; '('
.text:00002517                 call    ??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z ; CRecordVector<unsigned __int64 const *>::operator[](uint)
.text:0000251C                 mov     edx, [eax]
.text:0000251E                 mov     [ebp+var_FC], edx
.text:00002524                 jmp     short loc_2535
.text:00002526 ; ---------------------------------------------------------------------------
.text:00002526
.text:00002526 loc_2526:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+4BAj
.text:00002526                 mov     eax, [ebp+var_A0]
.text:0000252C                 mov     ecx, [eax+18h]
.text:0000252F                 mov     [ebp+var_FC], ecx
.text:00002535
.text:00002535 loc_2535:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+4D4j
.text:00002535                 lea     ecx, [ebp+var_B8]
.text:0000253B                 call    ??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator->(void)
.text:00002540                 mov     [ebp+var_100], eax
.text:00002546                 mov     esi, esp
.text:00002548                 mov     edx, [ebp+var_FC]
.text:0000254E                 push    edx
.text:0000254F                 mov     eax, [ebp+var_100]
.text:00002555                 push    eax
.text:00002556                 mov     ecx, [ebp+var_100]
.text:0000255C                 mov     edx, [ecx]
.text:0000255E                 mov     eax, [edx+0Ch]
.text:00002561                 call    eax
.text:00002563                 cmp     esi, esp
.text:00002565                 call    __RTC_CheckEsp
.text:0000256A                 mov     [ebp+var_C0], eax
.text:00002570                 cmp     [ebp+var_C0], 0
.text:00002577                 jz      short loc_25D8
.text:00002579                 mov     ecx, [ebp+var_C0]
.text:0000257F                 mov     [ebp+var_E0], ecx
.text:00002585                 mov     byte ptr [ebp+var_4], 5
.text:00002589                 lea     ecx, [ebp+var_B8]
.text:0000258F                 call    ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>(void)
.text:00002594                 mov     byte ptr [ebp+var_4], 4
.text:00002598                 lea     ecx, [ebp+var_98]
.text:0000259E                 call    ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text:000025A3                 mov     byte ptr [ebp+var_4], 1
.text:000025A7                 lea     ecx, [ebp+var_84]
.text:000025AD                 call    ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>(void)
.text:000025B2                 mov     byte ptr [ebp+var_4], 0
.text:000025B6                 lea     ecx, [ebp+var_3C]
.text:000025B9                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:000025BE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000025C5                 lea     ecx, [ebp+var_28]
.text:000025C8                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:000025CD                 mov     eax, [ebp+var_E0]
.text:000025D3                 jmp     loc_283F
.text:000025D8 ; ---------------------------------------------------------------------------
.text:000025D8
.text:000025D8 loc_25D8:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+4ABj
.text:000025D8                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+527j
.text:000025D8                 mov     byte ptr [ebp+var_4], 5
.text:000025DC                 lea     ecx, [ebp+var_B8]
.text:000025E2                 call    ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>(void)
.text:000025E7
.text:000025E7 loc_25E7:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+46Ej
.text:000025E7                 jmp     loc_238A
.text:000025EC ; ---------------------------------------------------------------------------
.text:000025EC
.text:000025EC loc_25EC:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+351j
.text:000025EC                 mov     edx, [ebp+var_10]
.text:000025EF                 movzx   eax, byte ptr [edx+5Ch]
.text:000025F3                 test    eax, eax
.text:000025F5                 jz      short loc_2605
.text:000025F7                 mov     ecx, [ebp+var_18]
.text:000025FA                 add     ecx, 18h
.text:000025FD                 mov     [ebp+var_104], ecx
.text:00002603                 jmp     short loc_2616
.text:00002605 ; ---------------------------------------------------------------------------
.text:00002605
.text:00002605 loc_2605:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+5A5j
.text:00002605                 mov     ecx, [ebp+var_18]
.text:00002608                 add     ecx, 28h ; '('
.text:0000260B                 call    ?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ ; CRecordVector<unsigned __int64 const *>::Front(void)
.text:00002610                 mov     [ebp+var_104], eax
.text:00002616
.text:00002616 loc_2616:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+5B3j
.text:00002616                 mov     edx, [ebp+var_104]
.text:0000261C                 mov     [ebp+var_C4], edx
.text:00002622                 mov     eax, [ebp+var_10]
.text:00002625                 movzx   ecx, byte ptr [eax+5Ch]
.text:00002629                 test    ecx, ecx
.text:0000262B                 jz      short loc_2640
.text:0000262D                 mov     ecx, [ebp+var_18]
.text:00002630                 add     ecx, 28h ; '('
.text:00002633                 call    ?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ ; CRecordVector<unsigned __int64 const *>::Front(void)
.text:00002638                 mov     [ebp+var_108], eax
.text:0000263E                 jmp     short loc_264C
.text:00002640 ; ---------------------------------------------------------------------------
.text:00002640
.text:00002640 loc_2640:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+5DBj
.text:00002640                 mov     edx, [ebp+var_18]
.text:00002643                 add     edx, 18h
.text:00002646                 mov     [ebp+var_108], edx
.text:0000264C
.text:0000264C loc_264C:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+5EEj
.text:0000264C                 mov     eax, [ebp+var_108]
.text:00002652                 mov     [ebp+var_C8], eax
.text:00002658                 mov     ecx, [ebp+var_18]
.text:0000265B                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00002660                 test    eax, eax
.text:00002662                 jz      short loc_26CD
.text:00002664                 mov     ecx, [ebp+var_18]
.text:00002667                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:0000266C                 mov     [ebp+var_10C], eax
.text:00002672                 mov     esi, esp
.text:00002674                 mov     ecx, [ebp+arg_8]
.text:00002677                 push    ecx
.text:00002678                 mov     edx, [ebp+var_C8]
.text:0000267E                 mov     eax, [edx]
.text:00002680                 push    eax
.text:00002681                 mov     ecx, [ebp+var_C4]
.text:00002687                 mov     edx, [ecx]
.text:00002689                 push    edx
.text:0000268A                 push    0
.text:0000268C                 lea     ecx, [ebp+var_98]
.text:00002692                 call    ??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z ; CRecordVector<ISequentialOutStream *>::operator[](uint)
.text:00002697                 mov     eax, [eax]
.text:00002699                 push    eax
.text:0000269A                 push    0
.text:0000269C                 lea     ecx, [ebp+var_84]
.text:000026A2                 call    ??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z ; CRecordVector<ISequentialInStream *>::operator[](uint)
.text:000026A7                 mov     ecx, [eax]
.text:000026A9                 push    ecx
.text:000026AA                 mov     edx, [ebp+var_10C]
.text:000026B0                 push    edx
.text:000026B1                 mov     eax, [ebp+var_10C]
.text:000026B7                 mov     ecx, [eax]
.text:000026B9                 mov     edx, [ecx+0Ch]
.text:000026BC                 call    edx
.text:000026BE                 cmp     esi, esp
.text:000026C0                 call    __RTC_CheckEsp
.text:000026C5                 mov     [ebp+var_CC], eax
.text:000026CB                 jmp     short loc_2733
.text:000026CD ; ---------------------------------------------------------------------------
.text:000026CD
.text:000026CD loc_26CD:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+612j
.text:000026CD                 mov     ecx, [ebp+var_18]
.text:000026D0                 add     ecx, 4
.text:000026D3                 call    ??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator->(void)
.text:000026D8                 mov     [ebp+var_110], eax
.text:000026DE                 mov     esi, esp
.text:000026E0                 mov     eax, [ebp+arg_8]
.text:000026E3                 push    eax
.text:000026E4                 mov     ecx, [ebp+var_48]
.text:000026E7                 push    ecx
.text:000026E8                 mov     edx, [ebp+var_C8]
.text:000026EE                 push    edx
.text:000026EF                 lea     ecx, [ebp+var_98]
.text:000026F5                 call    ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ; CRecordVector<ISequentialOutStream *>::Front(void)
.text:000026FA                 push    eax
.text:000026FB                 mov     eax, [ebp+var_44]
.text:000026FE                 push    eax
.text:000026FF                 mov     ecx, [ebp+var_C4]
.text:00002705                 push    ecx
.text:00002706                 lea     ecx, [ebp+var_84]
.text:0000270C                 call    ?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ ; CRecordVector<ISequentialInStream *>::Front(void)
.text:00002711                 push    eax
.text:00002712                 mov     edx, [ebp+var_110]
.text:00002718                 push    edx
.text:00002719                 mov     eax, [ebp+var_110]
.text:0000271F                 mov     ecx, [eax]
.text:00002721                 mov     edx, [ecx+0Ch]
.text:00002724                 call    edx
.text:00002726                 cmp     esi, esp
.text:00002728                 call    __RTC_CheckEsp
.text:0000272D                 mov     [ebp+var_CC], eax
.text:00002733
.text:00002733 loc_2733:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+67Bj
.text:00002733                 cmp     [ebp+var_CC], 20000010h
.text:0000273D                 jnz     short loc_2749
.text:0000273F                 mov     [ebp+var_CC], 0
.text:00002749
.text:00002749 loc_2749:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+6EDj
.text:00002749                 cmp     [ebp+var_CC], 0
.text:00002750                 jz      short loc_275B
.text:00002752                 cmp     [ebp+var_CC], 1
.text:00002759                 jnz     short loc_277D
.text:0000275B
.text:0000275B loc_275B:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+700j
.text:0000275B                 mov     eax, [ebp+var_14]
.text:0000275E                 push    eax             ; unsigned int
.text:0000275F                 mov     ecx, [ebp+var_10]
.text:00002762                 sub     ecx, 4          ; this
.text:00002765                 call    ?FinishCoder@CMixerST@NCoderMixer2@@AAEJI@Z ; NCoderMixer2::CMixerST::FinishCoder(uint)
.text:0000276A                 push    eax
.text:0000276B                 mov     ecx, [ebp+var_CC]
.text:00002771                 push    ecx
.text:00002772                 call    ?GetError@NCoderMixer2@@YGJJJ@Z ; NCoderMixer2::GetError(long,long)
.text:00002777                 mov     [ebp+var_CC], eax
.text:0000277D
.text:0000277D loc_277D:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+709j
.text:0000277D                 mov     [ebp+var_54], 0
.text:00002784                 jmp     short loc_278F
.text:00002786 ; ---------------------------------------------------------------------------
.text:00002786
.text:00002786 loc_2786:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *):loc_27DCj
.text:00002786                 mov     edx, [ebp+var_54]
.text:00002789                 add     edx, 1
.text:0000278C                 mov     [ebp+var_54], edx
.text:0000278F
.text:0000278F loc_278F:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+734j
.text:0000278F                 mov     ecx, [ebp+var_10]
.text:00002792                 add     ecx, 74h ; 't'
.text:00002795                 call    ?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CStBinderStream>::Size(void)
.text:0000279A                 cmp     [ebp+var_54], eax
.text:0000279D                 jnb     short loc_27DE
.text:0000279F                 mov     eax, [ebp+var_54]
.text:000027A2                 push    eax
.text:000027A3                 mov     ecx, [ebp+var_10]
.text:000027A6                 add     ecx, 74h ; 't'
.text:000027A9                 call    ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[](uint)
.text:000027AE                 mov     [ebp+var_D0], eax
.text:000027B4                 mov     ecx, [ebp+var_D0]
.text:000027BA                 cmp     dword ptr [ecx], 0
.text:000027BD                 jz      short loc_27CE
.text:000027BF                 mov     edx, [ebp+var_D0]
.text:000027C5                 mov     ecx, [edx]      ; this
.text:000027C7                 call    ?ReleaseStream@CSequentialInStreamCalcSize@@QAEXXZ ; CSequentialInStreamCalcSize::ReleaseStream(void)
.text:000027CC                 jmp     short loc_27DC
.text:000027CE ; ---------------------------------------------------------------------------
.text:000027CE
.text:000027CE loc_27CE:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+76Dj
.text:000027CE                 mov     eax, [ebp+var_D0]
.text:000027D4                 mov     ecx, [eax+4]    ; this
.text:000027D7                 call    ?ReleaseStream@COutStreamCalcSize@@QAEXXZ ; COutStreamCalcSize::ReleaseStream(void)
.text:000027DC
.text:000027DC loc_27DC:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+77Cj
.text:000027DC                 jmp     short loc_2786
.text:000027DE ; ---------------------------------------------------------------------------
.text:000027DE
.text:000027DE loc_27DE:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+74Dj
.text:000027DE                 cmp     [ebp+var_CC], 20000010h
.text:000027E8                 jnz     short loc_27F4
.text:000027EA                 mov     [ebp+var_CC], 0
.text:000027F4
.text:000027F4 loc_27F4:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+798j
.text:000027F4                 mov     ecx, [ebp+var_CC]
.text:000027FA                 mov     [ebp+var_E4], ecx
.text:00002800                 mov     byte ptr [ebp+var_4], 4
.text:00002804                 lea     ecx, [ebp+var_98]
.text:0000280A                 call    ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text:0000280F                 mov     byte ptr [ebp+var_4], 1
.text:00002813                 lea     ecx, [ebp+var_84]
.text:00002819                 call    ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>(void)
.text:0000281E                 mov     byte ptr [ebp+var_4], 0
.text:00002822                 lea     ecx, [ebp+var_3C]
.text:00002825                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:0000282A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002831                 lea     ecx, [ebp+var_28]
.text:00002834                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:00002839                 mov     eax, [ebp+var_E4]
.text:0000283F
.text:0000283F loc_283F:                               ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1D1j
.text:0000283F                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+27Bj ...
.text:0000283F                 push    edx
.text:00002840                 mov     ecx, ebp
.text:00002842                 push    eax
.text:00002843                 lea     edx, $LN70
.text:00002849                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000284E                 pop     eax
.text:0000284F                 pop     edx
.text:00002850                 mov     ecx, [ebp+var_C]
.text:00002853                 mov     large fs:0, ecx
.text:0000285A                 pop     ecx
.text:0000285B                 pop     edi
.text:0000285C                 pop     esi
.text:0000285D                 add     esp, 110h
.text:00002863                 cmp     ebp, esp
.text:00002865                 call    __RTC_CheckEsp
.text:0000286A                 mov     esp, ebp
.text:0000286C                 pop     ebp
.text:0000286D                 retn    0Ch
.text:0000286D ?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text:0000286D
.text:0000286D ; ---------------------------------------------------------------------------
.text:00002870 $LN70           dd 8                    ; DATA XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+7F3o
.text:00002874                 dd offset $LN69
.text:00002878 $LN69           dd 0FFFFFFD8h, 0Ch      ; DATA XREF: .text:00002874o
.text:00002880                 dd offset $LN60         ; "seqInStreams"
.text:00002884                 dd 0FFFFFFC4h, 0Ch
.text:0000288C                 dd offset $LN61         ; "seqOutStreams"
.text:00002890                 dd 0FFFFFFA4h, 4
.text:00002898                 dd offset $LN62         ; "seqInStream"
.text:0000289C                 dd 0FFFFFF94h, 4
.text:000028A4                 dd offset $LN63         ; "seqOutStream"
.text:000028A8                 dd 0FFFFFF7Ch, 0Ch
.text:000028B0                 dd offset $LN64         ; "seqInStreamsSpec"
.text:000028B4                 dd 0FFFFFF68h, 0Ch
.text:000028BC                 dd offset $LN65         ; "seqOutStreamsSpec"
.text:000028C0                 dd 0FFFFFF58h, 4
.text:000028C8                 dd offset $LN66         ; "initEncoder"
.text:000028CC                 dd 0FFFFFF48h, 4
.text:000028D4                 dd offset $LN67         ; "setOutStreamSize"
.text:000028D8 $LN67           db 'setOutStreamSize',0 ; DATA XREF: .text:000028D4o
.text:000028E9 $LN66           db 'initEncoder',0      ; DATA XREF: .text:000028C8o
.text:000028F5 $LN65           db 'seqOutStreamsSpec',0 ; DATA XREF: .text:000028BCo
.text:00002907 $LN64           db 'seqInStreamsSpec',0 ; DATA XREF: .text:000028B0o
.text:00002918 $LN63           db 'seqOutStream',0     ; DATA XREF: .text:000028A4o
.text:00002925 $LN62           db 'seqInStream',0      ; DATA XREF: .text:00002898o
.text:00002931 $LN61           db 'seqOutStreams',0    ; DATA XREF: .text:0000288Co
.text:0000293F $LN60           db 'seqInStreams',0     ; DATA XREF: .text:00002880o
.text:0000294C                 align 10h
.text:00002950
.text:00002950 ; =============== S U B R O U T I N E =======================================
.text:00002950
.text:00002950 ; Attributes: bp-based frame
.text:00002950
.text:00002950 ; __int32 __thiscall NCoderMixer2::CMixerST::GetMainUnpackStream(NCoderMixer2::CMixerST *this, struct ISequentialInStream *const *, struct ISequentialInStream **)
.text:00002950                 public ?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z
.text:00002950 ?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z proc near
.text:00002950
.text:00002950 var_48          = dword ptr -48h
.text:00002950 var_44          = dword ptr -44h
.text:00002950 var_40          = dword ptr -40h
.text:00002950 var_3C          = dword ptr -3Ch
.text:00002950 var_38          = dword ptr -38h
.text:00002950 var_30          = byte ptr -30h
.text:00002950 var_28          = dword ptr -28h
.text:00002950 var_24          = dword ptr -24h
.text:00002950 var_20          = dword ptr -20h
.text:00002950 var_18          = byte ptr -18h
.text:00002950 var_10          = dword ptr -10h
.text:00002950 var_C           = dword ptr -0Ch
.text:00002950 var_4           = dword ptr -4
.text:00002950 arg_0           = dword ptr  8
.text:00002950 arg_4           = dword ptr  0Ch
.text:00002950
.text:00002950                 push    ebp
.text:00002951                 mov     ebp, esp
.text:00002953                 push    0FFFFFFFFh
.text:00002955                 push    offset __ehhandler$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z
.text:0000295A                 mov     eax, large fs:0
.text:00002960                 push    eax
.text:00002961                 sub     esp, 3Ch
.text:00002964                 push    esi
.text:00002965                 push    edi
.text:00002966                 push    ecx
.text:00002967                 lea     edi, [ebp+var_48]
.text:0000296A                 mov     ecx, 0Fh
.text:0000296F                 mov     eax, 0CCCCCCCCh
.text:00002974                 rep stosd
.text:00002976                 pop     ecx
.text:00002977                 mov     eax, dword ptr ds:___security_cookie
.text:0000297C                 xor     eax, ebp
.text:0000297E                 push    eax
.text:0000297F                 lea     eax, [ebp+var_C]
.text:00002982                 mov     large fs:0, eax
.text:00002988                 mov     [ebp+var_10], ecx
.text:0000298B                 lea     ecx, [ebp+var_18]
.text:0000298E                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00002993                 mov     [ebp+var_4], 0
.text:0000299A                 lea     ecx, [ebp+var_18]
.text:0000299D                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:000029A2                 push    eax             ; struct ISequentialInStream **
.text:000029A3                 mov     eax, [ebp+var_10]
.text:000029A6                 mov     ecx, [eax+2Ch]
.text:000029A9                 push    ecx             ; unsigned int
.text:000029AA                 mov     edx, [ebp+arg_0]
.text:000029AD                 push    edx             ; struct ISequentialInStream **
.text:000029AE                 mov     ecx, [ebp+var_10] ; this
.text:000029B1                 call    ?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)
.text:000029B6                 mov     [ebp+var_20], eax
.text:000029B9                 cmp     [ebp+var_20], 0
.text:000029BD                 jz      short loc_29DC
.text:000029BF                 mov     eax, [ebp+var_20]
.text:000029C2                 mov     [ebp+var_3C], eax
.text:000029C5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000029CC                 lea     ecx, [ebp+var_18]
.text:000029CF                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000029D4                 mov     eax, [ebp+var_3C]
.text:000029D7                 jmp     loc_2AD1
.text:000029DC ; ---------------------------------------------------------------------------
.text:000029DC
.text:000029DC loc_29DC:                               ; CODE XREF: NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+6Dj
.text:000029DC                 mov     [ebp+var_24], 0
.text:000029E3                 jmp     short loc_29EE
.text:000029E5 ; ---------------------------------------------------------------------------
.text:000029E5
.text:000029E5 loc_29E5:                               ; CODE XREF: NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+156j
.text:000029E5                 mov     ecx, [ebp+var_24]
.text:000029E8                 add     ecx, 1
.text:000029EB                 mov     [ebp+var_24], ecx
.text:000029EE
.text:000029EE loc_29EE:                               ; CODE XREF: NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+93j
.text:000029EE                 mov     ecx, [ebp+var_10]
.text:000029F1                 add     ecx, 6Ch ; 'l'
.text:000029F4                 call    ?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderST>::Size(void)
.text:000029F9                 cmp     [ebp+var_24], eax
.text:000029FC                 jnb     loc_2AAB
.text:00002A02                 mov     edx, [ebp+var_24]
.text:00002A05                 push    edx
.text:00002A06                 mov     ecx, [ebp+var_10]
.text:00002A09                 add     ecx, 6Ch ; 'l'
.text:00002A0C                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:00002A11                 mov     [ebp+var_28], eax
.text:00002A14                 lea     ecx, [ebp+var_30]
.text:00002A17                 call    ??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::CMyComPtr<ICompressSetOutStreamSize>(void)
.text:00002A1C                 mov     byte ptr [ebp+var_4], 1
.text:00002A20                 lea     ecx, [ebp+var_30]
.text:00002A23                 call    ??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator&(void)
.text:00002A28                 push    eax             ; void **
.text:00002A29                 push    offset _IID_ICompressSetOutStreamSize ; struct _GUID *
.text:00002A2E                 mov     ecx, [ebp+var_28] ; this
.text:00002A31                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:00002A36                 lea     ecx, [ebp+var_30]
.text:00002A39                 call    ??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator ICompressSetOutStreamSize *(void)
.text:00002A3E                 test    eax, eax
.text:00002A40                 jz      short loc_2A9A
.text:00002A42                 lea     ecx, [ebp+var_30]
.text:00002A45                 call    ??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ ; CMyComPtr<ICompressSetOutStreamSize>::operator->(void)
.text:00002A4A                 mov     [ebp+var_48], eax
.text:00002A4D                 mov     esi, esp
.text:00002A4F                 mov     eax, [ebp+var_28]
.text:00002A52                 mov     ecx, [eax+18h]
.text:00002A55                 push    ecx
.text:00002A56                 mov     edx, [ebp+var_48]
.text:00002A59                 push    edx
.text:00002A5A                 mov     eax, [ebp+var_48]
.text:00002A5D                 mov     ecx, [eax]
.text:00002A5F                 mov     edx, [ecx+0Ch]
.text:00002A62                 call    edx
.text:00002A64                 cmp     esi, esp
.text:00002A66                 call    __RTC_CheckEsp
.text:00002A6B                 mov     [ebp+var_38], eax
.text:00002A6E                 cmp     [ebp+var_38], 0
.text:00002A72                 jz      short loc_2A9A
.text:00002A74                 mov     eax, [ebp+var_38]
.text:00002A77                 mov     [ebp+var_40], eax
.text:00002A7A                 mov     byte ptr [ebp+var_4], 0
.text:00002A7E                 lea     ecx, [ebp+var_30]
.text:00002A81                 call    ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>(void)
.text:00002A86                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002A8D                 lea     ecx, [ebp+var_18]
.text:00002A90                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002A95                 mov     eax, [ebp+var_40]
.text:00002A98                 jmp     short loc_2AD1
.text:00002A9A ; ---------------------------------------------------------------------------
.text:00002A9A
.text:00002A9A loc_2A9A:                               ; CODE XREF: NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+F0j
.text:00002A9A                                         ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+122j
.text:00002A9A                 mov     byte ptr [ebp+var_4], 0
.text:00002A9E                 lea     ecx, [ebp+var_30]
.text:00002AA1                 call    ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>(void)
.text:00002AA6                 jmp     loc_29E5
.text:00002AAB ; ---------------------------------------------------------------------------
.text:00002AAB
.text:00002AAB loc_2AAB:                               ; CODE XREF: NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+ACj
.text:00002AAB                 lea     ecx, [ebp+var_18]
.text:00002AAE                 call    ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach(void)
.text:00002AB3                 mov     ecx, [ebp+arg_4]
.text:00002AB6                 mov     [ecx], eax
.text:00002AB8                 mov     [ebp+var_44], 0
.text:00002ABF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002AC6                 lea     ecx, [ebp+var_18]
.text:00002AC9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002ACE                 mov     eax, [ebp+var_44]
.text:00002AD1
.text:00002AD1 loc_2AD1:                               ; CODE XREF: NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+87j
.text:00002AD1                                         ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+148j
.text:00002AD1                 push    edx
.text:00002AD2                 mov     ecx, ebp
.text:00002AD4                 push    eax
.text:00002AD5                 lea     edx, $LN15_1
.text:00002ADB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002AE0                 pop     eax
.text:00002AE1                 pop     edx
.text:00002AE2                 mov     ecx, [ebp+var_C]
.text:00002AE5                 mov     large fs:0, ecx
.text:00002AEC                 pop     ecx
.text:00002AED                 pop     edi
.text:00002AEE                 pop     esi
.text:00002AEF                 add     esp, 48h
.text:00002AF2                 cmp     ebp, esp
.text:00002AF4                 call    __RTC_CheckEsp
.text:00002AF9                 mov     esp, ebp
.text:00002AFB                 pop     ebp
.text:00002AFC                 retn    8
.text:00002AFC ?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z endp
.text:00002AFC
.text:00002AFC ; ---------------------------------------------------------------------------
.text:00002AFF                 align 10h
.text:00002B00 $LN15_1         dd 2                    ; DATA XREF: NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+185o
.text:00002B04                 dd offset $LN14
.text:00002B08 $LN14           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00002B04o
.text:00002B10                 dd offset $LN11_1       ; "seqInStream"
.text:00002B14                 dd 0FFFFFFD0h, 4
.text:00002B1C                 dd offset $LN12_0       ; "setOutStreamSize"
.text:00002B20 $LN12_0         db 'setOutStreamSize',0 ; DATA XREF: .text:00002B1Co
.text:00002B31 $LN11_1         db 'seqInStream',0      ; DATA XREF: .text:00002B10o
.text:00002B3D                 align 10h
.text:00002B40
.text:00002B40 ; =============== S U B R O U T I N E =======================================
.text:00002B40
.text:00002B40 ; Attributes: bp-based frame
.text:00002B40
.text:00002B40 ; unsigned __int64 __thiscall NCoderMixer2::CMixerST::GetBondStreamSize(NCoderMixer2::CMixerST *this, unsigned int)
.text:00002B40                 public ?GetBondStreamSize@CMixerST@NCoderMixer2@@UBE_KI@Z
.text:00002B40 ?GetBondStreamSize@CMixerST@NCoderMixer2@@UBE_KI@Z proc near
.text:00002B40                                         ; DATA XREF: .rdata:00004290o
.text:00002B40
.text:00002B40 var_8           = dword ptr -8
.text:00002B40 var_4           = dword ptr -4
.text:00002B40 arg_0           = dword ptr  8
.text:00002B40
.text:00002B40                 push    ebp
.text:00002B41                 mov     ebp, esp
.text:00002B43                 sub     esp, 8
.text:00002B46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002B4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B54                 mov     [ebp+var_4], ecx
.text:00002B57                 mov     eax, [ebp+arg_0]
.text:00002B5A                 push    eax
.text:00002B5B                 mov     ecx, [ebp+var_4]
.text:00002B5E                 add     ecx, 74h ; 't'
.text:00002B61                 call    ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEABUCStBinderStream@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CStBinderStream>::operator[](uint)
.text:00002B66                 mov     [ebp+var_8], eax
.text:00002B69                 mov     ecx, [ebp+var_8]
.text:00002B6C                 cmp     dword ptr [ecx], 0
.text:00002B6F                 jz      short loc_2B7D
.text:00002B71                 mov     edx, [ebp+var_8]
.text:00002B74                 mov     ecx, [edx]      ; this
.text:00002B76                 call    ?GetSize@CSequentialInStreamCalcSize@@QBE_KXZ ; CSequentialInStreamCalcSize::GetSize(void)
.text:00002B7B                 jmp     short loc_2B88
.text:00002B7D ; ---------------------------------------------------------------------------
.text:00002B7D
.text:00002B7D loc_2B7D:                               ; CODE XREF: NCoderMixer2::CMixerST::GetBondStreamSize(uint)+2Fj
.text:00002B7D                 mov     eax, [ebp+var_8]
.text:00002B80                 mov     ecx, [eax+4]    ; this
.text:00002B83                 call    ?GetSize@COutStreamCalcSize@@QBE_KXZ ; COutStreamCalcSize::GetSize(void)
.text:00002B88
.text:00002B88 loc_2B88:                               ; CODE XREF: NCoderMixer2::CMixerST::GetBondStreamSize(uint)+3Bj
.text:00002B88                 add     esp, 8
.text:00002B8B                 cmp     ebp, esp
.text:00002B8D                 call    __RTC_CheckEsp
.text:00002B92                 mov     esp, ebp
.text:00002B94                 pop     ebp
.text:00002B95                 retn    4
.text:00002B95 ?GetBondStreamSize@CMixerST@NCoderMixer2@@UBE_KI@Z endp
.text:00002B95
.text:00002B95 ; ---------------------------------------------------------------------------
.text:00002B98                 align 10h
.text:00002BA0
.text:00002BA0 ; =============== S U B R O U T I N E =======================================
.text:00002BA0
.text:00002BA0 ; Attributes: bp-based frame
.text:00002BA0
.text:00002BA0 ; void __thiscall NCoderMixer2::CCoderMT::Execute(NCoderMixer2::CCoderMT *__hidden this)
.text:00002BA0                 public ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.text:00002BA0 ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ proc near
.text:00002BA0                                         ; DATA XREF: .rdata:const NCoderMixer2::CCoderMT::`vftable'o
.text:00002BA0
.text:00002BA0 var_14          = dword ptr -14h
.text:00002BA0 var_10          = dword ptr -10h
.text:00002BA0 var_C           = dword ptr -0Ch
.text:00002BA0 var_4           = dword ptr -4
.text:00002BA0
.text:00002BA0 ; FUNCTION CHUNK AT .text:00002BFE SIZE 00000023 BYTES
.text:00002BA0
.text:00002BA0                 push    ebp
.text:00002BA1                 mov     ebp, esp
.text:00002BA3                 push    0FFFFFFFFh
.text:00002BA5                 push    offset __ehhandler$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.text:00002BAA                 mov     eax, large fs:0
.text:00002BB0                 push    eax
.text:00002BB1                 push    ecx
.text:00002BB2                 push    ecx
.text:00002BB3                 push    ebx
.text:00002BB4                 push    esi
.text:00002BB5                 push    edi
.text:00002BB6                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00002BBD                 mov     eax, dword ptr ds:___security_cookie
.text:00002BC2                 xor     eax, ebp
.text:00002BC4                 push    eax
.text:00002BC5                 lea     eax, [ebp+var_C]
.text:00002BC8                 mov     large fs:0, eax
.text:00002BCE                 mov     [ebp+var_10], esp
.text:00002BD1                 mov     [ebp+var_14], ecx
.text:00002BD4                 mov     [ebp+var_4], 0
.text:00002BDB                 push    0               ; struct ICompressProgressInfo *
.text:00002BDD                 mov     ecx, [ebp+var_14] ; this
.text:00002BE0                 call    ?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)
.text:00002BE5                 jmp     short loc_2BFE
.text:00002BE5 ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ endp
.text:00002BE5
.text:00002BE7
.text:00002BE7 ; =============== S U B R O U T I N E =======================================
.text:00002BE7
.text:00002BE7
.text:00002BE7 __catch$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$0 proc near
.text:00002BE7                                         ; DATA XREF: .xdata$x:00004094o
.text:00002BE7                 mov     eax, [ebp-14h]
.text:00002BEA                 mov     dword ptr [eax+6Ch], 80004005h
.text:00002BF1                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002BF8                 mov     eax, offset $LN2
.text:00002BFD                 retn
.text:00002BFD __catch$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$0 endp
.text:00002BFD
.text:00002BFE ; ---------------------------------------------------------------------------
.text:00002BFE ; START OF FUNCTION CHUNK FOR ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.text:00002BFE
.text:00002BFE loc_2BFE:                               ; CODE XREF: NCoderMixer2::CCoderMT::Execute(void)+45j
.text:00002BFE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002C05
.text:00002C05 $LN2:                                   ; DATA XREF: __catch$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$0+11o
.text:00002C05                 mov     ecx, [ebp+var_C]
.text:00002C08                 mov     large fs:0, ecx
.text:00002C0F                 pop     ecx
.text:00002C10                 pop     edi
.text:00002C11                 pop     esi
.text:00002C12                 pop     ebx
.text:00002C13                 add     esp, 14h
.text:00002C16                 cmp     ebp, esp
.text:00002C18                 call    __RTC_CheckEsp
.text:00002C1D                 mov     esp, ebp
.text:00002C1F                 pop     ebp
.text:00002C20                 retn
.text:00002C20 ; END OF FUNCTION CHUNK FOR ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.text:00002C20 ; ---------------------------------------------------------------------------
.text:00002C21                 align 10h
.text:00002C30
.text:00002C30 ; =============== S U B R O U T I N E =======================================
.text:00002C30
.text:00002C30 ; Attributes: bp-based frame
.text:00002C30
.text:00002C30 ; void __thiscall NCoderMixer2::CCoderMT::Code(NCoderMixer2::CCoderMT *this, struct ICompressProgressInfo *)
.text:00002C30                 public ?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z
.text:00002C30 ?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z proc near
.text:00002C30                                         ; CODE XREF: NCoderMixer2::CCoderMT::Execute(void)+40p
.text:00002C30                                         ; NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+ECp
.text:00002C30
.text:00002C30 var_48          = dword ptr -48h
.text:00002C30 var_44          = dword ptr -44h
.text:00002C30 var_40          = dword ptr -40h
.text:00002C30 var_3C          = dword ptr -3Ch
.text:00002C30 var_38          = dword ptr -38h
.text:00002C30 var_34          = dword ptr -34h
.text:00002C30 var_30          = dword ptr -30h
.text:00002C30 var_2C          = dword ptr -2Ch
.text:00002C30 var_24          = byte ptr -24h
.text:00002C30 var_1C          = dword ptr -1Ch
.text:00002C30 var_18          = dword ptr -18h
.text:00002C30 var_14          = dword ptr -14h
.text:00002C30 var_10          = dword ptr -10h
.text:00002C30 var_C           = dword ptr -0Ch
.text:00002C30 var_4           = dword ptr -4
.text:00002C30 arg_0           = dword ptr  8
.text:00002C30
.text:00002C30                 push    ebp
.text:00002C31                 mov     ebp, esp
.text:00002C33                 push    0FFFFFFFFh
.text:00002C35                 push    offset __ehhandler$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z
.text:00002C3A                 mov     eax, large fs:0
.text:00002C40                 push    eax
.text:00002C41                 sub     esp, 3Ch
.text:00002C44                 push    esi
.text:00002C45                 push    edi
.text:00002C46                 push    ecx
.text:00002C47                 lea     edi, [ebp+var_48]
.text:00002C4A                 mov     ecx, 0Fh
.text:00002C4F                 mov     eax, 0CCCCCCCCh
.text:00002C54                 rep stosd
.text:00002C56                 pop     ecx
.text:00002C57                 mov     eax, dword ptr ds:___security_cookie
.text:00002C5C                 xor     eax, ebp
.text:00002C5E                 push    eax
.text:00002C5F                 lea     eax, [ebp+var_C]
.text:00002C62                 mov     large fs:0, eax
.text:00002C68                 mov     [ebp+var_10], ecx
.text:00002C6B                 mov     eax, [ebp+var_10]
.text:00002C6E                 movzx   ecx, byte ptr [eax+68h]
.text:00002C72                 test    ecx, ecx
.text:00002C74                 jz      short loc_2C7F
.text:00002C76                 mov     [ebp+var_2C], 1
.text:00002C7D                 jmp     short loc_2C88
.text:00002C7F ; ---------------------------------------------------------------------------
.text:00002C7F
.text:00002C7F loc_2C7F:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+44j
.text:00002C7F                 mov     edx, [ebp+var_10]
.text:00002C82                 mov     eax, [edx+20h]
.text:00002C85                 mov     [ebp+var_2C], eax
.text:00002C88
.text:00002C88 loc_2C88:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+4Dj
.text:00002C88                 mov     ecx, [ebp+var_2C]
.text:00002C8B                 mov     [ebp+var_14], ecx
.text:00002C8E                 mov     edx, [ebp+var_10]
.text:00002C91                 movzx   eax, byte ptr [edx+68h]
.text:00002C95                 test    eax, eax
.text:00002C97                 jz      short loc_2CA4
.text:00002C99                 mov     ecx, [ebp+var_10]
.text:00002C9C                 mov     edx, [ecx+20h]
.text:00002C9F                 mov     [ebp+var_30], edx
.text:00002CA2                 jmp     short loc_2CAB
.text:00002CA4 ; ---------------------------------------------------------------------------
.text:00002CA4
.text:00002CA4 loc_2CA4:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+67j
.text:00002CA4                 mov     [ebp+var_30], 1
.text:00002CAB
.text:00002CAB loc_2CAB:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+72j
.text:00002CAB                 mov     eax, [ebp+var_30]
.text:00002CAE                 mov     [ebp+var_18], eax
.text:00002CB1                 mov     ecx, [ebp+var_14]
.text:00002CB4                 push    ecx
.text:00002CB5                 mov     ecx, [ebp+var_10]
.text:00002CB8                 add     ecx, 50h ; 'P'
.text:00002CBB                 call    ?ClearAndReserve@?$CRecordVector@PAUISequentialInStream@@@@QAEXI@Z ; CRecordVector<ISequentialInStream *>::ClearAndReserve(uint)
.text:00002CC0                 mov     edx, [ebp+var_18]
.text:00002CC3                 push    edx
.text:00002CC4                 mov     ecx, [ebp+var_10]
.text:00002CC7                 add     ecx, 5Ch ; '\'
.text:00002CCA                 call    ?ClearAndReserve@?$CRecordVector@PAUISequentialOutStream@@@@QAEXI@Z ; CRecordVector<ISequentialOutStream *>::ClearAndReserve(uint)
.text:00002CCF                 mov     [ebp+var_1C], 0
.text:00002CD6                 jmp     short loc_2CE1
.text:00002CD8 ; ---------------------------------------------------------------------------
.text:00002CD8
.text:00002CD8 loc_2CD8:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+DBj
.text:00002CD8                 mov     eax, [ebp+var_1C]
.text:00002CDB                 add     eax, 1
.text:00002CDE                 mov     [ebp+var_1C], eax
.text:00002CE1
.text:00002CE1 loc_2CE1:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+A6j
.text:00002CE1                 mov     ecx, [ebp+var_1C]
.text:00002CE4                 cmp     ecx, [ebp+var_14]
.text:00002CE7                 jnb     short loc_2D0D
.text:00002CE9                 mov     edx, [ebp+var_1C]
.text:00002CEC                 push    edx
.text:00002CED                 mov     ecx, [ebp+var_10]
.text:00002CF0                 add     ecx, 70h ; 'p'
.text:00002CF3                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream>>::operator[](uint)
.text:00002CF8                 mov     ecx, eax
.text:00002CFA                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00002CFF                 push    eax
.text:00002D00                 mov     ecx, [ebp+var_10]
.text:00002D03                 add     ecx, 50h ; 'P'
.text:00002D06                 call    ?AddInReserved@?$CRecordVector@PAUISequentialInStream@@@@QAEXQAUISequentialInStream@@@Z ; CRecordVector<ISequentialInStream *>::AddInReserved(ISequentialInStream * const)
.text:00002D0B                 jmp     short loc_2CD8
.text:00002D0D ; ---------------------------------------------------------------------------
.text:00002D0D
.text:00002D0D loc_2D0D:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+B7j
.text:00002D0D                 mov     [ebp+var_1C], 0
.text:00002D14                 jmp     short loc_2D1F
.text:00002D16 ; ---------------------------------------------------------------------------
.text:00002D16
.text:00002D16 loc_2D16:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+119j
.text:00002D16                 mov     eax, [ebp+var_1C]
.text:00002D19                 add     eax, 1
.text:00002D1C                 mov     [ebp+var_1C], eax
.text:00002D1F
.text:00002D1F loc_2D1F:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+E4j
.text:00002D1F                 mov     ecx, [ebp+var_1C]
.text:00002D22                 cmp     ecx, [ebp+var_18]
.text:00002D25                 jnb     short loc_2D4B
.text:00002D27                 mov     edx, [ebp+var_1C]
.text:00002D2A                 push    edx
.text:00002D2B                 mov     ecx, [ebp+var_10]
.text:00002D2E                 add     ecx, 7Ch ; '|'
.text:00002D31                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream>>::operator[](uint)
.text:00002D36                 mov     ecx, eax
.text:00002D38                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00002D3D                 push    eax
.text:00002D3E                 mov     ecx, [ebp+var_10]
.text:00002D41                 add     ecx, 5Ch ; '\'
.text:00002D44                 call    ?AddInReserved@?$CRecordVector@PAUISequentialOutStream@@@@QAEXQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::AddInReserved(ISequentialOutStream * const)
.text:00002D49                 jmp     short loc_2D16
.text:00002D4B ; ---------------------------------------------------------------------------
.text:00002D4B
.text:00002D4B loc_2D4B:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+F5j
.text:00002D4B                 mov     eax, [ebp+var_10]
.text:00002D4E                 push    eax             ; struct NCoderMixer2::CCoderMT *
.text:00002D4F                 lea     ecx, [ebp+var_24] ; this
.text:00002D52                 call    ??0CReleaser@CCoderMT@NCoderMixer2@@QAE@AAV12@@Z ; NCoderMixer2::CCoderMT::CReleaser::CReleaser(NCoderMixer2::CCoderMT &)
.text:00002D57                 mov     [ebp+var_4], 0
.text:00002D5E                 mov     ecx, [ebp+var_10]
.text:00002D61                 add     ecx, 18h
.text:00002D64                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00002D69                 test    eax, eax
.text:00002D6B                 jz      loc_2E1D
.text:00002D71                 mov     ecx, [ebp+var_10]
.text:00002D74                 movzx   edx, byte ptr [ecx+68h]
.text:00002D78                 test    edx, edx
.text:00002D7A                 jz      short loc_2D90
.text:00002D7C                 push    0
.text:00002D7E                 mov     ecx, [ebp+var_10]
.text:00002D81                 add     ecx, 40h ; '@'
.text:00002D84                 call    ??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z ; CRecordVector<unsigned __int64 const *>::operator[](uint)
.text:00002D89                 mov     eax, [eax]
.text:00002D8B                 mov     [ebp+var_34], eax
.text:00002D8E                 jmp     short loc_2D99
.text:00002D90 ; ---------------------------------------------------------------------------
.text:00002D90
.text:00002D90 loc_2D90:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+14Aj
.text:00002D90                 mov     ecx, [ebp+var_10]
.text:00002D93                 mov     edx, [ecx+30h]
.text:00002D96                 mov     [ebp+var_34], edx
.text:00002D99
.text:00002D99 loc_2D99:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+15Ej
.text:00002D99                 mov     eax, [ebp+var_10]
.text:00002D9C                 movzx   ecx, byte ptr [eax+68h]
.text:00002DA0                 test    ecx, ecx
.text:00002DA2                 jz      short loc_2DAF
.text:00002DA4                 mov     edx, [ebp+var_10]
.text:00002DA7                 mov     eax, [edx+30h]
.text:00002DAA                 mov     [ebp+var_38], eax
.text:00002DAD                 jmp     short loc_2DC1
.text:00002DAF ; ---------------------------------------------------------------------------
.text:00002DAF
.text:00002DAF loc_2DAF:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+172j
.text:00002DAF                 push    0
.text:00002DB1                 mov     ecx, [ebp+var_10]
.text:00002DB4                 add     ecx, 40h ; '@'
.text:00002DB7                 call    ??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z ; CRecordVector<unsigned __int64 const *>::operator[](uint)
.text:00002DBC                 mov     ecx, [eax]
.text:00002DBE                 mov     [ebp+var_38], ecx
.text:00002DC1
.text:00002DC1 loc_2DC1:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+17Dj
.text:00002DC1                 mov     ecx, [ebp+var_10]
.text:00002DC4                 add     ecx, 18h
.text:00002DC7                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00002DCC                 mov     [ebp+var_3C], eax
.text:00002DCF                 mov     esi, esp
.text:00002DD1                 mov     edx, [ebp+arg_0]
.text:00002DD4                 push    edx
.text:00002DD5                 mov     eax, [ebp+var_34]
.text:00002DD8                 push    eax
.text:00002DD9                 mov     ecx, [ebp+var_38]
.text:00002DDC                 push    ecx
.text:00002DDD                 push    0
.text:00002DDF                 mov     ecx, [ebp+var_10]
.text:00002DE2                 add     ecx, 5Ch ; '\'
.text:00002DE5                 call    ??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z ; CRecordVector<ISequentialOutStream *>::operator[](uint)
.text:00002DEA                 mov     edx, [eax]
.text:00002DEC                 push    edx
.text:00002DED                 push    0
.text:00002DEF                 mov     ecx, [ebp+var_10]
.text:00002DF2                 add     ecx, 50h ; 'P'
.text:00002DF5                 call    ??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z ; CRecordVector<ISequentialInStream *>::operator[](uint)
.text:00002DFA                 mov     eax, [eax]
.text:00002DFC                 push    eax
.text:00002DFD                 mov     ecx, [ebp+var_3C]
.text:00002E00                 push    ecx
.text:00002E01                 mov     edx, [ebp+var_3C]
.text:00002E04                 mov     eax, [edx]
.text:00002E06                 mov     ecx, [eax+0Ch]
.text:00002E09                 call    ecx
.text:00002E0B                 cmp     esi, esp
.text:00002E0D                 call    __RTC_CheckEsp
.text:00002E12                 mov     edx, [ebp+var_10]
.text:00002E15                 mov     [edx+6Ch], eax
.text:00002E18                 jmp     loc_2EBC
.text:00002E1D ; ---------------------------------------------------------------------------
.text:00002E1D
.text:00002E1D loc_2E1D:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+13Bj
.text:00002E1D                 mov     eax, [ebp+var_10]
.text:00002E20                 movzx   ecx, byte ptr [eax+68h]
.text:00002E24                 test    ecx, ecx
.text:00002E26                 jz      short loc_2E38
.text:00002E28                 mov     ecx, [ebp+var_10]
.text:00002E2B                 add     ecx, 40h ; '@'
.text:00002E2E                 call    ?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ ; CRecordVector<unsigned __int64 const *>::Front(void)
.text:00002E33                 mov     [ebp+var_40], eax
.text:00002E36                 jmp     short loc_2E41
.text:00002E38 ; ---------------------------------------------------------------------------
.text:00002E38
.text:00002E38 loc_2E38:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+1F6j
.text:00002E38                 mov     edx, [ebp+var_10]
.text:00002E3B                 add     edx, 30h ; '0'
.text:00002E3E                 mov     [ebp+var_40], edx
.text:00002E41
.text:00002E41 loc_2E41:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+206j
.text:00002E41                 mov     eax, [ebp+var_10]
.text:00002E44                 movzx   ecx, byte ptr [eax+68h]
.text:00002E48                 test    ecx, ecx
.text:00002E4A                 jz      short loc_2E57
.text:00002E4C                 mov     edx, [ebp+var_10]
.text:00002E4F                 add     edx, 30h ; '0'
.text:00002E52                 mov     [ebp+var_44], edx
.text:00002E55                 jmp     short loc_2E65
.text:00002E57 ; ---------------------------------------------------------------------------
.text:00002E57
.text:00002E57 loc_2E57:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+21Aj
.text:00002E57                 mov     ecx, [ebp+var_10]
.text:00002E5A                 add     ecx, 40h ; '@'
.text:00002E5D                 call    ?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ ; CRecordVector<unsigned __int64 const *>::Front(void)
.text:00002E62                 mov     [ebp+var_44], eax
.text:00002E65
.text:00002E65 loc_2E65:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+225j
.text:00002E65                 mov     ecx, [ebp+var_10]
.text:00002E68                 add     ecx, 1Ch
.text:00002E6B                 call    ??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator->(void)
.text:00002E70                 mov     [ebp+var_48], eax
.text:00002E73                 mov     esi, esp
.text:00002E75                 mov     eax, [ebp+arg_0]
.text:00002E78                 push    eax
.text:00002E79                 mov     ecx, [ebp+var_18]
.text:00002E7C                 push    ecx
.text:00002E7D                 mov     edx, [ebp+var_40]
.text:00002E80                 push    edx
.text:00002E81                 mov     ecx, [ebp+var_10]
.text:00002E84                 add     ecx, 5Ch ; '\'
.text:00002E87                 call    ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ; CRecordVector<ISequentialOutStream *>::Front(void)
.text:00002E8C                 push    eax
.text:00002E8D                 mov     eax, [ebp+var_14]
.text:00002E90                 push    eax
.text:00002E91                 mov     ecx, [ebp+var_44]
.text:00002E94                 push    ecx
.text:00002E95                 mov     ecx, [ebp+var_10]
.text:00002E98                 add     ecx, 50h ; 'P'
.text:00002E9B                 call    ?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ ; CRecordVector<ISequentialInStream *>::Front(void)
.text:00002EA0                 push    eax
.text:00002EA1                 mov     edx, [ebp+var_48]
.text:00002EA4                 push    edx
.text:00002EA5                 mov     eax, [ebp+var_48]
.text:00002EA8                 mov     ecx, [eax]
.text:00002EAA                 mov     edx, [ecx+0Ch]
.text:00002EAD                 call    edx
.text:00002EAF                 cmp     esi, esp
.text:00002EB1                 call    __RTC_CheckEsp
.text:00002EB6                 mov     ecx, [ebp+var_10]
.text:00002EB9                 mov     [ecx+6Ch], eax
.text:00002EBC
.text:00002EBC loc_2EBC:                               ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+1E8j
.text:00002EBC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002EC3                 lea     ecx, [ebp+var_24] ; this
.text:00002EC6                 call    ??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoderMT::CReleaser::~CReleaser(void)
.text:00002ECB                 push    edx
.text:00002ECC                 mov     ecx, ebp
.text:00002ECE                 push    eax
.text:00002ECF                 lea     edx, $LN27_0
.text:00002ED5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002EDA                 pop     eax
.text:00002EDB                 pop     edx
.text:00002EDC                 mov     ecx, [ebp+var_C]
.text:00002EDF                 mov     large fs:0, ecx
.text:00002EE6                 pop     ecx
.text:00002EE7                 pop     edi
.text:00002EE8                 pop     esi
.text:00002EE9                 add     esp, 48h
.text:00002EEC                 cmp     ebp, esp
.text:00002EEE                 call    __RTC_CheckEsp
.text:00002EF3                 mov     esp, ebp
.text:00002EF5                 pop     ebp
.text:00002EF6                 retn    4
.text:00002EF6 ?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z endp
.text:00002EF6
.text:00002EF6 ; ---------------------------------------------------------------------------
.text:00002EF9                 align 4
.text:00002EFC $LN27_0         dd 1                    ; DATA XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+29Fo
.text:00002F00                 dd offset $LN26_0
.text:00002F04 $LN26_0         dd 0FFFFFFDCh, 4        ; DATA XREF: .text:00002F00o
.text:00002F0C                 dd offset $LN24         ; "releaser"
.text:00002F10 $LN24           db 'releaser',0         ; DATA XREF: .text:00002F0Co
.text:00002F19                 align 10h
.text:00002F20
.text:00002F20 ; =============== S U B R O U T I N E =======================================
.text:00002F20
.text:00002F20 ; Attributes: bp-based frame
.text:00002F20
.text:00002F20 ; __int32 __thiscall NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CMixerMT *this, const struct NCoderMixer2::CBindInfo *)
.text:00002F20                 public ?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.text:00002F20 ?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z proc near
.text:00002F20
.text:00002F20 var_C           = dword ptr -0Ch
.text:00002F20 var_8           = dword ptr -8
.text:00002F20 var_4           = dword ptr -4
.text:00002F20 arg_0           = dword ptr  8
.text:00002F20
.text:00002F20                 push    ebp
.text:00002F21                 mov     ebp, esp
.text:00002F23                 sub     esp, 0Ch
.text:00002F26                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002F2D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002F34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F3B                 mov     [ebp+var_4], ecx
.text:00002F3E                 mov     eax, [ebp+arg_0]
.text:00002F41                 push    eax             ; struct NCoderMixer2::CBindInfo *
.text:00002F42                 mov     ecx, [ebp+var_4] ; this
.text:00002F45                 call    ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ; NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)
.text:00002F4A                 mov     ecx, [ebp+var_4]
.text:00002F4D                 add     ecx, 68h ; 'h'
.text:00002F50                 call    ?Clear@?$CObjectVector@VCStreamBinder@@@@QAEXXZ ; CObjectVector<CStreamBinder>::Clear(void)
.text:00002F55                 mov     [ebp+var_8], 0
.text:00002F5C                 jmp     short loc_2F67
.text:00002F5E ; ---------------------------------------------------------------------------
.text:00002F5E
.text:00002F5E loc_2F5E:                               ; CODE XREF: NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &):loc_2F97j
.text:00002F5E                 mov     ecx, [ebp+var_8]
.text:00002F61                 add     ecx, 1
.text:00002F64                 mov     [ebp+var_8], ecx
.text:00002F67
.text:00002F67 loc_2F67:                               ; CODE XREF: NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)+3Cj
.text:00002F67                 mov     ecx, [ebp+var_4]
.text:00002F6A                 add     ecx, 10h
.text:00002F6D                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00002F72                 cmp     [ebp+var_8], eax
.text:00002F75                 jnb     short loc_2F99
.text:00002F77                 mov     ecx, [ebp+var_4]
.text:00002F7A                 add     ecx, 68h ; 'h'
.text:00002F7D                 call    ?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ ; CObjectVector<CStreamBinder>::AddNew(void)
.text:00002F82                 mov     ecx, eax        ; this
.text:00002F84                 call    ?CreateEvents@CStreamBinder@@QAEIXZ ; CStreamBinder::CreateEvents(void)
.text:00002F89                 mov     [ebp+var_C], eax
.text:00002F8C                 cmp     [ebp+var_C], 0
.text:00002F90                 jz      short loc_2F97
.text:00002F92                 mov     eax, [ebp+var_C]
.text:00002F95                 jmp     short loc_2F9B
.text:00002F97 ; ---------------------------------------------------------------------------
.text:00002F97
.text:00002F97 loc_2F97:                               ; CODE XREF: NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)+70j
.text:00002F97                 jmp     short loc_2F5E
.text:00002F99 ; ---------------------------------------------------------------------------
.text:00002F99
.text:00002F99 loc_2F99:                               ; CODE XREF: NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)+55j
.text:00002F99                 xor     eax, eax
.text:00002F9B
.text:00002F9B loc_2F9B:                               ; CODE XREF: NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)+75j
.text:00002F9B                 add     esp, 0Ch
.text:00002F9E                 cmp     ebp, esp
.text:00002FA0                 call    __RTC_CheckEsp
.text:00002FA5                 mov     esp, ebp
.text:00002FA7                 pop     ebp
.text:00002FA8                 retn    4
.text:00002FA8 ?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z endp
.text:00002FA8
.text:00002FA8 ; ---------------------------------------------------------------------------
.text:00002FAB                 align 10h
.text:00002FB0
.text:00002FB0 ; =============== S U B R O U T I N E =======================================
.text:00002FB0
.text:00002FB0 ; Attributes: bp-based frame
.text:00002FB0
.text:00002FB0 ; void __thiscall NCoderMixer2::CMixerMT::AddCoder(NCoderMixer2::CMixerMT *this, const struct CCreatedCoder *)
.text:00002FB0                 public ?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
.text:00002FB0 ?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z proc near
.text:00002FB0
.text:00002FB0 var_8           = dword ptr -8
.text:00002FB0 var_4           = dword ptr -4
.text:00002FB0 arg_0           = dword ptr  8
.text:00002FB0
.text:00002FB0                 push    ebp
.text:00002FB1                 mov     ebp, esp
.text:00002FB3                 sub     esp, 8
.text:00002FB6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002FBD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FC4                 mov     [ebp+var_4], ecx
.text:00002FC7                 mov     eax, [ebp+arg_0]
.text:00002FCA                 movzx   ecx, byte ptr [eax+9]
.text:00002FCE                 push    ecx
.text:00002FCF                 mov     ecx, [ebp+var_4]
.text:00002FD2                 add     ecx, 44h ; 'D'
.text:00002FD5                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00002FDA                 mov     edx, [ebp+arg_0]
.text:00002FDD                 movzx   eax, byte ptr [edx+8]
.text:00002FE1                 push    eax
.text:00002FE2                 mov     ecx, [ebp+var_4]
.text:00002FE5                 add     ecx, 50h ; 'P'
.text:00002FE8                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00002FED                 mov     ecx, [ebp+var_4]
.text:00002FF0                 add     ecx, 74h ; 't'
.text:00002FF3                 call    ?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::AddNew(void)
.text:00002FF8                 mov     [ebp+var_8], eax
.text:00002FFB                 mov     ecx, [ebp+var_8]
.text:00002FFE                 mov     edx, [ebp+arg_0]
.text:00003001                 mov     eax, [edx+0Ch]
.text:00003004                 mov     [ecx+20h], eax
.text:00003007                 mov     ecx, [ebp+arg_0]
.text:0000300A                 push    ecx
.text:0000300B                 mov     ecx, [ebp+var_8]
.text:0000300E                 add     ecx, 18h
.text:00003011                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=(CMyComPtr<ICompressCoder> const &)
.text:00003016                 mov     edx, [ebp+arg_0]
.text:00003019                 add     edx, 4
.text:0000301C                 push    edx
.text:0000301D                 mov     ecx, [ebp+var_8]
.text:00003020                 add     ecx, 1Ch
.text:00003023                 call    ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z ; CMyComPtr<ICompressCoder2>::operator=(CMyComPtr<ICompressCoder2> const &)
.text:00003028                 mov     eax, [ebp+var_8]
.text:0000302B                 mov     ecx, [ebp+var_4]
.text:0000302E                 mov     dl, [ecx+5Ch]
.text:00003031                 mov     [eax+68h], dl
.text:00003034                 add     esp, 8
.text:00003037                 cmp     ebp, esp
.text:00003039                 call    __RTC_CheckEsp
.text:0000303E                 mov     esp, ebp
.text:00003040                 pop     ebp
.text:00003041                 retn    4
.text:00003041 ?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z endp
.text:00003041
.text:00003041 ; ---------------------------------------------------------------------------
.text:00003044                 align 10h
.text:00003050
.text:00003050 ; =============== S U B R O U T I N E =======================================
.text:00003050
.text:00003050 ; Attributes: bp-based frame
.text:00003050
.text:00003050 ; struct NCoderMixer2::CCoder *__thiscall NCoderMixer2::CMixerMT::GetCoder(NCoderMixer2::CMixerMT *this, unsigned int)
.text:00003050                 public ?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z
.text:00003050 ?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z proc near
.text:00003050
.text:00003050 var_C           = dword ptr -0Ch
.text:00003050 var_8           = dword ptr -8
.text:00003050 var_4           = dword ptr -4
.text:00003050 arg_0           = dword ptr  8
.text:00003050
.text:00003050                 push    ebp
.text:00003051                 mov     ebp, esp
.text:00003053                 sub     esp, 0Ch
.text:00003056                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000305D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000306B                 mov     [ebp+var_4], ecx
.text:0000306E                 mov     eax, [ebp+arg_0]
.text:00003071                 push    eax
.text:00003072                 mov     ecx, [ebp+var_4]
.text:00003075                 add     ecx, 74h ; 't'
.text:00003078                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:0000307D                 mov     [ebp+var_8], eax
.text:00003080                 cmp     [ebp+var_8], 0
.text:00003084                 jz      short loc_3091
.text:00003086                 mov     ecx, [ebp+var_8]
.text:00003089                 add     ecx, 18h
.text:0000308C                 mov     [ebp+var_C], ecx
.text:0000308F                 jmp     short loc_3098
.text:00003091 ; ---------------------------------------------------------------------------
.text:00003091
.text:00003091 loc_3091:                               ; CODE XREF: NCoderMixer2::CMixerMT::GetCoder(uint)+34j
.text:00003091                 mov     [ebp+var_C], 0
.text:00003098
.text:00003098 loc_3098:                               ; CODE XREF: NCoderMixer2::CMixerMT::GetCoder(uint)+3Fj
.text:00003098                 mov     eax, [ebp+var_C]
.text:0000309B                 add     esp, 0Ch
.text:0000309E                 cmp     ebp, esp
.text:000030A0                 call    __RTC_CheckEsp
.text:000030A5                 mov     esp, ebp
.text:000030A7                 pop     ebp
.text:000030A8                 retn    4
.text:000030A8 ?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z endp
.text:000030A8
.text:000030A8 ; ---------------------------------------------------------------------------
.text:000030AB                 align 10h
.text:000030B0
.text:000030B0 ; =============== S U B R O U T I N E =======================================
.text:000030B0
.text:000030B0 ; Attributes: bp-based frame
.text:000030B0
.text:000030B0 ; void __thiscall NCoderMixer2::CMixerMT::ReInit(NCoderMixer2::CMixerMT *__hidden this)
.text:000030B0                 public ?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ
.text:000030B0 ?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ proc near
.text:000030B0
.text:000030B0 var_8           = dword ptr -8
.text:000030B0 var_4           = dword ptr -4
.text:000030B0
.text:000030B0                 push    ebp
.text:000030B1                 mov     ebp, esp
.text:000030B3                 sub     esp, 8
.text:000030B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000030BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030C4                 mov     [ebp+var_4], ecx
.text:000030C7                 mov     [ebp+var_8], 0
.text:000030CE                 jmp     short loc_30D9
.text:000030D0 ; ---------------------------------------------------------------------------
.text:000030D0
.text:000030D0 loc_30D0:                               ; CODE XREF: NCoderMixer2::CMixerMT::ReInit(void)+4Fj
.text:000030D0                 mov     eax, [ebp+var_8]
.text:000030D3                 add     eax, 1
.text:000030D6                 mov     [ebp+var_8], eax
.text:000030D9
.text:000030D9 loc_30D9:                               ; CODE XREF: NCoderMixer2::CMixerMT::ReInit(void)+1Ej
.text:000030D9                 mov     ecx, [ebp+var_4]
.text:000030DC                 add     ecx, 68h ; 'h'
.text:000030DF                 call    ?Size@?$CObjectVector@VCStreamBinder@@@@QBEIXZ ; CObjectVector<CStreamBinder>::Size(void)
.text:000030E4                 cmp     [ebp+var_8], eax
.text:000030E7                 jnb     short loc_3101
.text:000030E9                 mov     ecx, [ebp+var_8]
.text:000030EC                 push    ecx
.text:000030ED                 mov     ecx, [ebp+var_4]
.text:000030F0                 add     ecx, 68h ; 'h'
.text:000030F3                 call    ??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z ; CObjectVector<CStreamBinder>::operator[](uint)
.text:000030F8                 mov     ecx, eax        ; this
.text:000030FA                 call    ?ReInit@CStreamBinder@@QAEXXZ ; CStreamBinder::ReInit(void)
.text:000030FF                 jmp     short loc_30D0
.text:00003101 ; ---------------------------------------------------------------------------
.text:00003101
.text:00003101 loc_3101:                               ; CODE XREF: NCoderMixer2::CMixerMT::ReInit(void)+37j
.text:00003101                 add     esp, 8
.text:00003104                 cmp     ebp, esp
.text:00003106                 call    __RTC_CheckEsp
.text:0000310B                 mov     esp, ebp
.text:0000310D                 pop     ebp
.text:0000310E                 retn
.text:0000310E ?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ endp
.text:0000310E
.text:0000310E ; ---------------------------------------------------------------------------
.text:0000310F                 align 10h
.text:00003110
.text:00003110 ; =============== S U B R O U T I N E =======================================
.text:00003110
.text:00003110 ; Attributes: bp-based frame
.text:00003110
.text:00003110 ; void __thiscall NCoderMixer2::CMixerMT::SelectMainCoder(NCoderMixer2::CMixerMT *this, bool)
.text:00003110                 public ?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z
.text:00003110 ?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z proc near
.text:00003110
.text:00003110 var_14          = dword ptr -14h
.text:00003110 var_10          = dword ptr -10h
.text:00003110 var_C           = dword ptr -0Ch
.text:00003110 var_8           = dword ptr -8
.text:00003110 var_4           = dword ptr -4
.text:00003110 arg_0           = byte ptr  8
.text:00003110
.text:00003110                 push    ebp
.text:00003111                 mov     ebp, esp
.text:00003113                 sub     esp, 14h
.text:00003116                 mov     eax, 0CCCCCCCCh
.text:0000311B                 mov     [ebp+var_14], eax
.text:0000311E                 mov     [ebp+var_10], eax
.text:00003121                 mov     [ebp+var_C], eax
.text:00003124                 mov     [ebp+var_8], eax
.text:00003127                 mov     [ebp+var_4], eax
.text:0000312A                 mov     [ebp+var_4], ecx
.text:0000312D                 mov     eax, [ebp+var_4]
.text:00003130                 mov     ecx, [eax+28h]
.text:00003133                 mov     [ebp+var_8], ecx
.text:00003136                 movzx   edx, [ebp+arg_0]
.text:0000313A                 test    edx, edx
.text:0000313C                 jnz     loc_31E7
.text:00003142
.text:00003142 loc_3142:                               ; CODE XREF: NCoderMixer2::CMixerMT::SelectMainCoder(bool)+D2j
.text:00003142                 mov     eax, [ebp+var_8]
.text:00003145                 push    eax
.text:00003146                 mov     ecx, [ebp+var_4]
.text:00003149                 add     ecx, 74h ; 't'
.text:0000314C                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:00003151                 cmp     dword ptr [eax+20h], 1
.text:00003155                 jz      short loc_315C
.text:00003157                 jmp     loc_31E7
.text:0000315C ; ---------------------------------------------------------------------------
.text:0000315C
.text:0000315C loc_315C:                               ; CODE XREF: NCoderMixer2::CMixerMT::SelectMainCoder(bool)+45j
.text:0000315C                 mov     ecx, [ebp+var_8]
.text:0000315F                 push    ecx
.text:00003160                 mov     ecx, [ebp+var_4]
.text:00003163                 add     ecx, 44h ; 'D'
.text:00003166                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000316B                 movzx   edx, byte ptr [eax]
.text:0000316E                 test    edx, edx
.text:00003170                 jnz     short loc_3174
.text:00003172                 jmp     short loc_31E7
.text:00003174 ; ---------------------------------------------------------------------------
.text:00003174
.text:00003174 loc_3174:                               ; CODE XREF: NCoderMixer2::CMixerMT::SelectMainCoder(bool)+60j
.text:00003174                 mov     eax, [ebp+var_8]
.text:00003177                 push    eax
.text:00003178                 mov     ecx, [ebp+var_4]
.text:0000317B                 add     ecx, 2Ch ; ','
.text:0000317E                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00003183                 mov     ecx, [eax]
.text:00003185                 mov     [ebp+var_C], ecx
.text:00003188                 mov     edx, [ebp+var_C]
.text:0000318B                 push    edx             ; unsigned int
.text:0000318C                 mov     ecx, [ebp+var_4]
.text:0000318F                 add     ecx, 4          ; this
.text:00003192                 call    ?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z ; NCoderMixer2::CBindInfo::IsStream_in_PackStreams(uint)
.text:00003197                 movzx   eax, al
.text:0000319A                 test    eax, eax
.text:0000319C                 jz      short loc_31A0
.text:0000319E                 jmp     short loc_31E7
.text:000031A0 ; ---------------------------------------------------------------------------
.text:000031A0
.text:000031A0 loc_31A0:                               ; CODE XREF: NCoderMixer2::CMixerMT::SelectMainCoder(bool)+8Cj
.text:000031A0                 mov     ecx, [ebp+var_C]
.text:000031A3                 push    ecx             ; unsigned int
.text:000031A4                 mov     ecx, [ebp+var_4]
.text:000031A7                 add     ecx, 4          ; this
.text:000031AA                 call    ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)
.text:000031AF                 mov     [ebp+var_10], eax
.text:000031B2                 cmp     [ebp+var_10], 0
.text:000031B6                 jge     short loc_31CD
.text:000031B8                 mov     [ebp+var_14], 13377C5h
.text:000031BF                 push    offset __TI1H
.text:000031C4                 lea     edx, [ebp+var_14]
.text:000031C7                 push    edx
.text:000031C8                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000031CD ; ---------------------------------------------------------------------------
.text:000031CD
.text:000031CD loc_31CD:                               ; CODE XREF: NCoderMixer2::CMixerMT::SelectMainCoder(bool)+A6j
.text:000031CD                 mov     eax, [ebp+var_10]
.text:000031D0                 push    eax
.text:000031D1                 mov     ecx, [ebp+var_4]
.text:000031D4                 add     ecx, 10h
.text:000031D7                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:000031DC                 mov     ecx, [eax+4]
.text:000031DF                 mov     [ebp+var_8], ecx
.text:000031E2                 jmp     loc_3142
.text:000031E7 ; ---------------------------------------------------------------------------
.text:000031E7
.text:000031E7 loc_31E7:                               ; CODE XREF: NCoderMixer2::CMixerMT::SelectMainCoder(bool)+2Cj
.text:000031E7                                         ; NCoderMixer2::CMixerMT::SelectMainCoder(bool)+47j ...
.text:000031E7                 mov     edx, [ebp+var_4]
.text:000031EA                 mov     eax, [ebp+var_8]
.text:000031ED                 mov     [edx+60h], eax
.text:000031F0                 add     esp, 14h
.text:000031F3                 cmp     ebp, esp
.text:000031F5                 call    __RTC_CheckEsp
.text:000031FA                 mov     esp, ebp
.text:000031FC                 pop     ebp
.text:000031FD                 retn    4
.text:000031FD ?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z endp
.text:000031FD
.text:00003200
.text:00003200 ; =============== S U B R O U T I N E =======================================
.text:00003200
.text:00003200 ; Attributes: bp-based frame
.text:00003200
.text:00003200 ; __int32 __thiscall NCoderMixer2::CMixerMT::Init(NCoderMixer2::CMixerMT *this, struct ISequentialInStream *const *, struct ISequentialOutStream *const *)
.text:00003200                 public ?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z
.text:00003200 ?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z proc near
.text:00003200                                         ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+34p
.text:00003200
.text:00003200 var_B0          = dword ptr -0B0h
.text:00003200 var_AC          = dword ptr -0ACh
.text:00003200 var_A8          = dword ptr -0A8h
.text:00003200 var_A4          = dword ptr -0A4h
.text:00003200 var_A0          = dword ptr -0A0h
.text:00003200 var_9C          = dword ptr -9Ch
.text:00003200 var_98          = dword ptr -98h
.text:00003200 var_94          = dword ptr -94h
.text:00003200 var_90          = dword ptr -90h
.text:00003200 var_88          = dword ptr -88h
.text:00003200 var_7C          = dword ptr -7Ch
.text:00003200 var_74          = dword ptr -74h
.text:00003200 var_70          = dword ptr -70h
.text:00003200 var_68          = byte ptr -68h
.text:00003200 var_5C          = byte ptr -5Ch
.text:00003200 var_50          = dword ptr -50h
.text:00003200 var_44          = dword ptr -44h
.text:00003200 var_3C          = dword ptr -3Ch
.text:00003200 var_38          = dword ptr -38h
.text:00003200 var_34          = dword ptr -34h
.text:00003200 var_30          = dword ptr -30h
.text:00003200 var_2C          = dword ptr -2Ch
.text:00003200 var_28          = dword ptr -28h
.text:00003200 var_24          = dword ptr -24h
.text:00003200 var_20          = dword ptr -20h
.text:00003200 var_1C          = dword ptr -1Ch
.text:00003200 var_18          = dword ptr -18h
.text:00003200 var_14          = dword ptr -14h
.text:00003200 var_10          = dword ptr -10h
.text:00003200 var_C           = dword ptr -0Ch
.text:00003200 var_4           = dword ptr -4
.text:00003200 arg_0           = dword ptr  8
.text:00003200 arg_4           = dword ptr  0Ch
.text:00003200
.text:00003200                 push    ebp
.text:00003201                 mov     ebp, esp
.text:00003203                 push    0FFFFFFFFh
.text:00003205                 push    offset __ehhandler$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z
.text:0000320A                 mov     eax, large fs:0
.text:00003210                 push    eax
.text:00003211                 sub     esp, 0A4h
.text:00003217                 push    esi
.text:00003218                 push    edi
.text:00003219                 push    ecx
.text:0000321A                 lea     edi, [ebp+var_B0]
.text:00003220                 mov     ecx, 29h ; ')'
.text:00003225                 mov     eax, 0CCCCCCCCh
.text:0000322A                 rep stosd
.text:0000322C                 pop     ecx
.text:0000322D                 mov     eax, dword ptr ds:___security_cookie
.text:00003232                 xor     eax, ebp
.text:00003234                 push    eax
.text:00003235                 lea     eax, [ebp+var_C]
.text:00003238                 mov     large fs:0, eax
.text:0000323E                 mov     [ebp+var_10], ecx
.text:00003241                 mov     [ebp+var_14], 0
.text:00003248                 jmp     short loc_3253
.text:0000324A ; ---------------------------------------------------------------------------
.text:0000324A
.text:0000324A loc_324A:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *):loc_3345j
.text:0000324A                 mov     eax, [ebp+var_14]
.text:0000324D                 add     eax, 1
.text:00003250                 mov     [ebp+var_14], eax
.text:00003253
.text:00003253 loc_3253:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+48j
.text:00003253                 mov     ecx, [ebp+var_10]
.text:00003256                 add     ecx, 78h ; 'x'
.text:00003259                 call    ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size(void)
.text:0000325E                 cmp     [ebp+var_14], eax
.text:00003261                 jnb     loc_334A
.text:00003267                 mov     ecx, [ebp+var_14]
.text:0000326A                 push    ecx
.text:0000326B                 mov     ecx, [ebp+var_10]
.text:0000326E                 add     ecx, 78h ; 'x'
.text:00003271                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:00003276                 mov     [ebp+var_18], eax
.text:00003279                 mov     edx, [ebp+var_14]
.text:0000327C                 push    edx
.text:0000327D                 mov     ecx, [ebp+var_10]
.text:00003280                 add     ecx, 8
.text:00003283                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:00003288                 mov     [ebp+var_1C], eax
.text:0000328B                 mov     eax, [ebp+var_10]
.text:0000328E                 movzx   ecx, byte ptr [eax+60h]
.text:00003292                 test    ecx, ecx
.text:00003294                 jz      short loc_32A2
.text:00003296                 mov     [ebp+var_94], 1
.text:000032A0                 jmp     short loc_32AD
.text:000032A2 ; ---------------------------------------------------------------------------
.text:000032A2
.text:000032A2 loc_32A2:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+94j
.text:000032A2                 mov     edx, [ebp+var_1C]
.text:000032A5                 mov     eax, [edx]
.text:000032A7                 mov     [ebp+var_94], eax
.text:000032AD
.text:000032AD loc_32AD:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+A0j
.text:000032AD                 mov     ecx, [ebp+var_94]
.text:000032B3                 mov     [ebp+var_24], ecx
.text:000032B6                 mov     edx, [ebp+var_10]
.text:000032B9                 movzx   eax, byte ptr [edx+60h]
.text:000032BD                 test    eax, eax
.text:000032BF                 jz      short loc_32CE
.text:000032C1                 mov     ecx, [ebp+var_1C]
.text:000032C4                 mov     edx, [ecx]
.text:000032C6                 mov     [ebp+var_98], edx
.text:000032CC                 jmp     short loc_32D8
.text:000032CE ; ---------------------------------------------------------------------------
.text:000032CE
.text:000032CE loc_32CE:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+BFj
.text:000032CE                 mov     [ebp+var_98], 1
.text:000032D8
.text:000032D8 loc_32D8:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+CCj
.text:000032D8                 mov     eax, [ebp+var_98]
.text:000032DE                 mov     [ebp+var_28], eax
.text:000032E1                 mov     ecx, [ebp+var_18]
.text:000032E4                 add     ecx, 70h ; 'p'
.text:000032E7                 call    ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEXXZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::Clear(void)
.text:000032EC                 mov     [ebp+var_20], 0
.text:000032F3                 jmp     short loc_32FE
.text:000032F5 ; ---------------------------------------------------------------------------
.text:000032F5
.text:000032F5 loc_32F5:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+111j
.text:000032F5                 mov     ecx, [ebp+var_20]
.text:000032F8                 add     ecx, 1
.text:000032FB                 mov     [ebp+var_20], ecx
.text:000032FE
.text:000032FE loc_32FE:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+F3j
.text:000032FE                 mov     edx, [ebp+var_20]
.text:00003301                 cmp     edx, [ebp+var_24]
.text:00003304                 jnb     short loc_3313
.text:00003306                 mov     ecx, [ebp+var_18]
.text:00003309                 add     ecx, 70h ; 'p'
.text:0000330C                 call    ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::AddNew(void)
.text:00003311                 jmp     short loc_32F5
.text:00003313 ; ---------------------------------------------------------------------------
.text:00003313
.text:00003313 loc_3313:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+104j
.text:00003313                 mov     ecx, [ebp+var_18]
.text:00003316                 add     ecx, 7Ch ; '|'
.text:00003319                 call    ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEXXZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::Clear(void)
.text:0000331E                 mov     [ebp+var_20], 0
.text:00003325                 jmp     short loc_3330
.text:00003327 ; ---------------------------------------------------------------------------
.text:00003327
.text:00003327 loc_3327:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+143j
.text:00003327                 mov     eax, [ebp+var_20]
.text:0000332A                 add     eax, 1
.text:0000332D                 mov     [ebp+var_20], eax
.text:00003330
.text:00003330 loc_3330:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+125j
.text:00003330                 mov     ecx, [ebp+var_20]
.text:00003333                 cmp     ecx, [ebp+var_28]
.text:00003336                 jnb     short loc_3345
.text:00003338                 mov     ecx, [ebp+var_18]
.text:0000333B                 add     ecx, 7Ch ; '|'
.text:0000333E                 call    ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::AddNew(void)
.text:00003343                 jmp     short loc_3327
.text:00003345 ; ---------------------------------------------------------------------------
.text:00003345
.text:00003345 loc_3345:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+136j
.text:00003345                 jmp     loc_324A
.text:0000334A ; ---------------------------------------------------------------------------
.text:0000334A
.text:0000334A loc_334A:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+61j
.text:0000334A                 mov     [ebp+var_14], 0
.text:00003351                 jmp     short loc_335C
.text:00003353 ; ---------------------------------------------------------------------------
.text:00003353
.text:00003353 loc_3353:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+3AEj
.text:00003353                 mov     edx, [ebp+var_14]
.text:00003356                 add     edx, 1
.text:00003359                 mov     [ebp+var_14], edx
.text:0000335C
.text:0000335C loc_335C:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+151j
.text:0000335C                 mov     ecx, [ebp+var_10]
.text:0000335F                 add     ecx, 14h
.text:00003362                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00003367                 cmp     [ebp+var_14], eax
.text:0000336A                 jnb     loc_35B3
.text:00003370                 mov     eax, [ebp+var_14]
.text:00003373                 push    eax
.text:00003374                 mov     ecx, [ebp+var_10]
.text:00003377                 add     ecx, 14h
.text:0000337A                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:0000337F                 mov     [ebp+var_2C], eax
.text:00003382                 lea     ecx, [ebp+var_50]
.text:00003385                 push    ecx             ; unsigned int *
.text:00003386                 lea     edx, [ebp+var_44]
.text:00003389                 push    edx             ; unsigned int *
.text:0000338A                 mov     eax, [ebp+var_2C]
.text:0000338D                 mov     ecx, [eax]
.text:0000338F                 push    ecx             ; unsigned int
.text:00003390                 mov     ecx, [ebp+var_10]
.text:00003393                 add     ecx, 8          ; this
.text:00003396                 call    ?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream(uint,uint &,uint &)
.text:0000339B                 mov     edx, [ebp+var_10]
.text:0000339E                 movzx   eax, byte ptr [edx+60h]
.text:000033A2                 test    eax, eax
.text:000033A4                 jz      short loc_33B4
.text:000033A6                 mov     ecx, [ebp+var_2C]
.text:000033A9                 mov     edx, [ecx+4]
.text:000033AC                 mov     [ebp+var_9C], edx
.text:000033B2                 jmp     short loc_33BD
.text:000033B4 ; ---------------------------------------------------------------------------
.text:000033B4
.text:000033B4 loc_33B4:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+1A4j
.text:000033B4                 mov     eax, [ebp+var_44]
.text:000033B7                 mov     [ebp+var_9C], eax
.text:000033BD
.text:000033BD loc_33BD:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+1B2j
.text:000033BD                 mov     ecx, [ebp+var_9C]
.text:000033C3                 mov     [ebp+var_30], ecx
.text:000033C6                 mov     edx, [ebp+var_10]
.text:000033C9                 movzx   eax, byte ptr [edx+60h]
.text:000033CD                 test    eax, eax
.text:000033CF                 jz      short loc_33DC
.text:000033D1                 mov     ecx, [ebp+var_44]
.text:000033D4                 mov     [ebp+var_A0], ecx
.text:000033DA                 jmp     short loc_33E8
.text:000033DC ; ---------------------------------------------------------------------------
.text:000033DC
.text:000033DC loc_33DC:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+1CFj
.text:000033DC                 mov     edx, [ebp+var_2C]
.text:000033DF                 mov     eax, [edx+4]
.text:000033E2                 mov     [ebp+var_A0], eax
.text:000033E8
.text:000033E8 loc_33E8:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+1DAj
.text:000033E8                 mov     ecx, [ebp+var_A0]
.text:000033EE                 mov     [ebp+var_38], ecx
.text:000033F1                 mov     edx, [ebp+var_10]
.text:000033F4                 movzx   eax, byte ptr [edx+60h]
.text:000033F8                 test    eax, eax
.text:000033FA                 jz      short loc_3408
.text:000033FC                 mov     [ebp+var_A4], 0
.text:00003406                 jmp     short loc_3411
.text:00003408 ; ---------------------------------------------------------------------------
.text:00003408
.text:00003408 loc_3408:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+1FAj
.text:00003408                 mov     ecx, [ebp+var_50]
.text:0000340B                 mov     [ebp+var_A4], ecx
.text:00003411
.text:00003411 loc_3411:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+206j
.text:00003411                 mov     edx, [ebp+var_A4]
.text:00003417                 mov     [ebp+var_34], edx
.text:0000341A                 mov     eax, [ebp+var_10]
.text:0000341D                 movzx   ecx, byte ptr [eax+60h]
.text:00003421                 test    ecx, ecx
.text:00003423                 jz      short loc_3430
.text:00003425                 mov     edx, [ebp+var_50]
.text:00003428                 mov     [ebp+var_A8], edx
.text:0000342E                 jmp     short loc_343A
.text:00003430 ; ---------------------------------------------------------------------------
.text:00003430
.text:00003430 loc_3430:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+223j
.text:00003430                 mov     [ebp+var_A8], 0
.text:0000343A
.text:0000343A loc_343A:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+22Ej
.text:0000343A                 mov     eax, [ebp+var_A8]
.text:00003440                 mov     [ebp+var_3C], eax
.text:00003443                 mov     ecx, [ebp+var_3C]
.text:00003446                 push    ecx
.text:00003447                 mov     edx, [ebp+var_38]
.text:0000344A                 push    edx
.text:0000344B                 mov     ecx, [ebp+var_10]
.text:0000344E                 add     ecx, 78h ; 'x'
.text:00003451                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:00003456                 add     eax, 7Ch ; '|'
.text:00003459                 mov     ecx, eax
.text:0000345B                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream>>::operator[](uint)
.text:00003460                 mov     ecx, eax
.text:00003462                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00003467                 push    eax             ; struct ISequentialOutStream **
.text:00003468                 mov     eax, [ebp+var_34]
.text:0000346B                 push    eax
.text:0000346C                 mov     ecx, [ebp+var_30]
.text:0000346F                 push    ecx
.text:00003470                 mov     ecx, [ebp+var_10]
.text:00003473                 add     ecx, 78h ; 'x'
.text:00003476                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:0000347B                 add     eax, 70h ; 'p'
.text:0000347E                 mov     ecx, eax
.text:00003480                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream>>::operator[](uint)
.text:00003485                 mov     ecx, eax
.text:00003487                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:0000348C                 push    eax             ; struct ISequentialInStream **
.text:0000348D                 mov     edx, [ebp+var_14]
.text:00003490                 push    edx
.text:00003491                 mov     ecx, [ebp+var_10]
.text:00003494                 add     ecx, 6Ch ; 'l'
.text:00003497                 call    ??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z ; CObjectVector<CStreamBinder>::operator[](uint)
.text:0000349C                 mov     ecx, eax        ; this
.text:0000349E                 call    ?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z ; CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)
.text:000034A3                 lea     ecx, [ebp+var_5C]
.text:000034A6                 call    ??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::CMyComPtr<ICompressSetBufSize>(void)
.text:000034AB                 mov     [ebp+var_4], 0
.text:000034B2                 lea     ecx, [ebp+var_68]
.text:000034B5                 call    ??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::CMyComPtr<ICompressSetBufSize>(void)
.text:000034BA                 mov     byte ptr [ebp+var_4], 1
.text:000034BE                 lea     ecx, [ebp+var_5C]
.text:000034C1                 call    ??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator&(void)
.text:000034C6                 push    eax             ; void **
.text:000034C7                 push    offset _IID_ICompressSetBufSize ; struct _GUID *
.text:000034CC                 mov     eax, [ebp+var_30]
.text:000034CF                 push    eax
.text:000034D0                 mov     ecx, [ebp+var_10]
.text:000034D3                 add     ecx, 78h ; 'x'
.text:000034D6                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:000034DB                 add     eax, 18h
.text:000034DE                 mov     ecx, eax        ; this
.text:000034E0                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:000034E5                 lea     ecx, [ebp+var_68]
.text:000034E8                 call    ??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator&(void)
.text:000034ED                 push    eax             ; void **
.text:000034EE                 push    offset _IID_ICompressSetBufSize ; struct _GUID *
.text:000034F3                 mov     ecx, [ebp+var_38]
.text:000034F6                 push    ecx
.text:000034F7                 mov     ecx, [ebp+var_10]
.text:000034FA                 add     ecx, 78h ; 'x'
.text:000034FD                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:00003502                 add     eax, 18h
.text:00003505                 mov     ecx, eax        ; this
.text:00003507                 call    ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z ; NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)
.text:0000350C                 lea     ecx, [ebp+var_5C]
.text:0000350F                 call    ??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator ICompressSetBufSize *(void)
.text:00003514                 test    eax, eax
.text:00003516                 jz      short loc_3593
.text:00003518                 lea     ecx, [ebp+var_68]
.text:0000351B                 call    ??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator ICompressSetBufSize *(void)
.text:00003520                 test    eax, eax
.text:00003522                 jz      short loc_3593
.text:00003524                 mov     [ebp+var_70], 80000h
.text:0000352B                 lea     ecx, [ebp+var_5C]
.text:0000352E                 call    ??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator->(void)
.text:00003533                 mov     [ebp+var_AC], eax
.text:00003539                 mov     esi, esp
.text:0000353B                 push    80000h
.text:00003540                 mov     edx, [ebp+var_34]
.text:00003543                 push    edx
.text:00003544                 mov     eax, [ebp+var_AC]
.text:0000354A                 push    eax
.text:0000354B                 mov     ecx, [ebp+var_AC]
.text:00003551                 mov     edx, [ecx]
.text:00003553                 mov     eax, [edx+0Ch]
.text:00003556                 call    eax
.text:00003558                 cmp     esi, esp
.text:0000355A                 call    __RTC_CheckEsp
.text:0000355F                 lea     ecx, [ebp+var_68]
.text:00003562                 call    ??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ ; CMyComPtr<ICompressSetBufSize>::operator->(void)
.text:00003567                 mov     [ebp+var_B0], eax
.text:0000356D                 mov     esi, esp
.text:0000356F                 push    80000h
.text:00003574                 mov     ecx, [ebp+var_3C]
.text:00003577                 push    ecx
.text:00003578                 mov     edx, [ebp+var_B0]
.text:0000357E                 push    edx
.text:0000357F                 mov     eax, [ebp+var_B0]
.text:00003585                 mov     ecx, [eax]
.text:00003587                 mov     edx, [ecx+10h]
.text:0000358A                 call    edx
.text:0000358C                 cmp     esi, esp
.text:0000358E                 call    __RTC_CheckEsp
.text:00003593
.text:00003593 loc_3593:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+316j
.text:00003593                                         ; NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+322j
.text:00003593                 mov     byte ptr [ebp+var_4], 0
.text:00003597                 lea     ecx, [ebp+var_68]
.text:0000359A                 call    ??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>(void)
.text:0000359F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000035A6                 lea     ecx, [ebp+var_5C]
.text:000035A9                 call    ??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>(void)
.text:000035AE                 jmp     loc_3353
.text:000035B3 ; ---------------------------------------------------------------------------
.text:000035B3
.text:000035B3 loc_35B3:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+16Aj
.text:000035B3                 mov     eax, [ebp+var_10]
.text:000035B6                 mov     ecx, [eax+2Ch]
.text:000035B9                 push    ecx
.text:000035BA                 mov     ecx, [ebp+var_10]
.text:000035BD                 add     ecx, 78h ; 'x'
.text:000035C0                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:000035C5                 mov     [ebp+var_74], eax
.text:000035C8                 mov     edx, [ebp+var_10]
.text:000035CB                 movzx   eax, byte ptr [edx+60h]
.text:000035CF                 test    eax, eax
.text:000035D1                 jz      short loc_35EF
.text:000035D3                 mov     ecx, [ebp+arg_0]
.text:000035D6                 mov     edx, [ecx]
.text:000035D8                 push    edx
.text:000035D9                 push    0
.text:000035DB                 mov     ecx, [ebp+var_74]
.text:000035DE                 add     ecx, 70h ; 'p'
.text:000035E1                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream>>::operator[](uint)
.text:000035E6                 mov     ecx, eax
.text:000035E8                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000035ED                 jmp     short loc_3609
.text:000035EF ; ---------------------------------------------------------------------------
.text:000035EF
.text:000035EF loc_35EF:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+3D1j
.text:000035EF                 mov     eax, [ebp+arg_4]
.text:000035F2                 mov     ecx, [eax]
.text:000035F4                 push    ecx
.text:000035F5                 push    0
.text:000035F7                 mov     ecx, [ebp+var_74]
.text:000035FA                 add     ecx, 7Ch ; '|'
.text:000035FD                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream>>::operator[](uint)
.text:00003602                 mov     ecx, eax
.text:00003604                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00003609
.text:00003609 loc_3609:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+3EDj
.text:00003609                 mov     [ebp+var_14], 0
.text:00003610                 jmp     short loc_361B
.text:00003612 ; ---------------------------------------------------------------------------
.text:00003612
.text:00003612 loc_3612:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *):loc_36C5j
.text:00003612                 mov     edx, [ebp+var_14]
.text:00003615                 add     edx, 1
.text:00003618                 mov     [ebp+var_14], edx
.text:0000361B
.text:0000361B loc_361B:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+410j
.text:0000361B                 mov     ecx, [ebp+var_10]
.text:0000361E                 add     ecx, 20h ; ' '
.text:00003621                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00003626                 cmp     [ebp+var_14], eax
.text:00003629                 jnb     loc_36CA
.text:0000362F                 lea     eax, [ebp+var_88]
.text:00003635                 push    eax             ; unsigned int *
.text:00003636                 lea     ecx, [ebp+var_7C]
.text:00003639                 push    ecx             ; unsigned int *
.text:0000363A                 mov     edx, [ebp+var_14]
.text:0000363D                 push    edx
.text:0000363E                 mov     ecx, [ebp+var_10]
.text:00003641                 add     ecx, 20h ; ' '
.text:00003644                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00003649                 mov     eax, [eax]
.text:0000364B                 push    eax             ; unsigned int
.text:0000364C                 mov     ecx, [ebp+var_10]
.text:0000364F                 add     ecx, 8          ; this
.text:00003652                 call    ?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z ; NCoderMixer2::CBindInfo::GetCoder_for_Stream(uint,uint &,uint &)
.text:00003657                 mov     ecx, [ebp+var_7C]
.text:0000365A                 push    ecx
.text:0000365B                 mov     ecx, [ebp+var_10]
.text:0000365E                 add     ecx, 78h ; 'x'
.text:00003661                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:00003666                 mov     [ebp+var_90], eax
.text:0000366C                 mov     edx, [ebp+var_10]
.text:0000366F                 movzx   eax, byte ptr [edx+60h]
.text:00003673                 test    eax, eax
.text:00003675                 jz      short loc_369F
.text:00003677                 mov     ecx, [ebp+var_14]
.text:0000367A                 mov     edx, [ebp+arg_4]
.text:0000367D                 mov     eax, [edx+ecx*4]
.text:00003680                 push    eax
.text:00003681                 mov     ecx, [ebp+var_88]
.text:00003687                 push    ecx
.text:00003688                 mov     ecx, [ebp+var_90]
.text:0000368E                 add     ecx, 7Ch ; '|'
.text:00003691                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream>>::operator[](uint)
.text:00003696                 mov     ecx, eax
.text:00003698                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:0000369D                 jmp     short loc_36C5
.text:0000369F ; ---------------------------------------------------------------------------
.text:0000369F
.text:0000369F loc_369F:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+475j
.text:0000369F                 mov     edx, [ebp+var_14]
.text:000036A2                 mov     eax, [ebp+arg_0]
.text:000036A5                 mov     ecx, [eax+edx*4]
.text:000036A8                 push    ecx
.text:000036A9                 mov     edx, [ebp+var_88]
.text:000036AF                 push    edx
.text:000036B0                 mov     ecx, [ebp+var_90]
.text:000036B6                 add     ecx, 70h ; 'p'
.text:000036B9                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream>>::operator[](uint)
.text:000036BE                 mov     ecx, eax
.text:000036C0                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000036C5
.text:000036C5 loc_36C5:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+49Dj
.text:000036C5                 jmp     loc_3612
.text:000036CA ; ---------------------------------------------------------------------------
.text:000036CA
.text:000036CA loc_36CA:                               ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+429j
.text:000036CA                 xor     eax, eax
.text:000036CC                 push    edx
.text:000036CD                 mov     ecx, ebp
.text:000036CF                 push    eax
.text:000036D0                 lea     edx, $LN45
.text:000036D6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000036DB                 pop     eax
.text:000036DC                 pop     edx
.text:000036DD                 mov     ecx, [ebp+var_C]
.text:000036E0                 mov     large fs:0, ecx
.text:000036E7                 pop     ecx
.text:000036E8                 pop     edi
.text:000036E9                 pop     esi
.text:000036EA                 add     esp, 0B0h
.text:000036F0                 cmp     ebp, esp
.text:000036F2                 call    __RTC_CheckEsp
.text:000036F7                 mov     esp, ebp
.text:000036F9                 pop     ebp
.text:000036FA                 retn    8
.text:000036FA ?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z endp
.text:000036FA
.text:000036FA ; ---------------------------------------------------------------------------
.text:000036FD                 align 10h
.text:00003700 $LN45           dd 6                    ; DATA XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+4D0o
.text:00003704                 dd offset $LN44
.text:00003708 $LN44           dd 0FFFFFFBCh, 4        ; DATA XREF: .text:00003704o
.text:00003710                 dd offset $LN37         ; "coderIndex"
.text:00003714                 dd 0FFFFFFB0h, 4
.text:0000371C                 dd offset $LN38         ; "coderStreamIndex"
.text:00003720                 dd 0FFFFFFA4h, 4
.text:00003728                 dd offset $LN39         ; "inSetSize"
.text:0000372C                 dd 0FFFFFF98h, 4
.text:00003734                 dd offset $LN40         ; "outSetSize"
.text:00003738                 dd 0FFFFFF84h, 4
.text:00003740                 dd offset $LN41         ; "coderIndex"
.text:00003744                 dd 0FFFFFF78h, 4
.text:0000374C                 dd offset $LN42         ; "coderStreamIndex"
.text:00003750 $LN42           db 'coderStreamIndex',0 ; DATA XREF: .text:0000374Co
.text:00003761 $LN41           db 'coderIndex',0       ; DATA XREF: .text:00003740o
.text:0000376C $LN40           db 'outSetSize',0       ; DATA XREF: .text:00003734o
.text:00003777 $LN39           db 'inSetSize',0        ; DATA XREF: .text:00003728o
.text:00003781 $LN38           db 'coderStreamIndex',0 ; DATA XREF: .text:0000371Co
.text:00003792 $LN37           db 'coderIndex',0       ; DATA XREF: .text:00003710o
.text:0000379D                 align 10h
.text:000037A0
.text:000037A0 ; =============== S U B R O U T I N E =======================================
.text:000037A0
.text:000037A0 ; Attributes: bp-based frame
.text:000037A0
.text:000037A0 ; __int32 __thiscall NCoderMixer2::CMixerMT::ReturnIfError(NCoderMixer2::CMixerMT *this, __int32)
.text:000037A0                 public ?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z
.text:000037A0 ?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z proc near
.text:000037A0                                         ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+141p
.text:000037A0                                         ; NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+162p ...
.text:000037A0
.text:000037A0 var_8           = dword ptr -8
.text:000037A0 var_4           = dword ptr -4
.text:000037A0 arg_0           = dword ptr  8
.text:000037A0
.text:000037A0                 push    ebp
.text:000037A1                 mov     ebp, esp
.text:000037A3                 sub     esp, 8
.text:000037A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000037AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037B4                 mov     [ebp+var_4], ecx
.text:000037B7                 mov     [ebp+var_8], 0
.text:000037BE                 jmp     short loc_37C9
.text:000037C0 ; ---------------------------------------------------------------------------
.text:000037C0
.text:000037C0 loc_37C0:                               ; CODE XREF: NCoderMixer2::CMixerMT::ReturnIfError(long):loc_37F5j
.text:000037C0                 mov     eax, [ebp+var_8]
.text:000037C3                 add     eax, 1
.text:000037C6                 mov     [ebp+var_8], eax
.text:000037C9
.text:000037C9 loc_37C9:                               ; CODE XREF: NCoderMixer2::CMixerMT::ReturnIfError(long)+1Ej
.text:000037C9                 mov     ecx, [ebp+var_4]
.text:000037CC                 add     ecx, 78h ; 'x'
.text:000037CF                 call    ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size(void)
.text:000037D4                 cmp     [ebp+var_8], eax
.text:000037D7                 jnb     short loc_37F7
.text:000037D9                 mov     ecx, [ebp+var_8]
.text:000037DC                 push    ecx
.text:000037DD                 mov     ecx, [ebp+var_4]
.text:000037E0                 add     ecx, 78h ; 'x'
.text:000037E3                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:000037E8                 mov     edx, [eax+6Ch]
.text:000037EB                 cmp     edx, [ebp+arg_0]
.text:000037EE                 jnz     short loc_37F5
.text:000037F0                 mov     eax, [ebp+arg_0]
.text:000037F3                 jmp     short loc_37F9
.text:000037F5 ; ---------------------------------------------------------------------------
.text:000037F5
.text:000037F5 loc_37F5:                               ; CODE XREF: NCoderMixer2::CMixerMT::ReturnIfError(long)+4Ej
.text:000037F5                 jmp     short loc_37C0
.text:000037F7 ; ---------------------------------------------------------------------------
.text:000037F7
.text:000037F7 loc_37F7:                               ; CODE XREF: NCoderMixer2::CMixerMT::ReturnIfError(long)+37j
.text:000037F7                 xor     eax, eax
.text:000037F9
.text:000037F9 loc_37F9:                               ; CODE XREF: NCoderMixer2::CMixerMT::ReturnIfError(long)+53j
.text:000037F9                 add     esp, 8
.text:000037FC                 cmp     ebp, esp
.text:000037FE                 call    __RTC_CheckEsp
.text:00003803                 mov     esp, ebp
.text:00003805                 pop     ebp
.text:00003806                 retn    4
.text:00003806 ?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z endp
.text:00003806
.text:00003806 ; ---------------------------------------------------------------------------
.text:00003809                 align 10h
.text:00003810
.text:00003810 ; =============== S U B R O U T I N E =======================================
.text:00003810
.text:00003810 ; Attributes: bp-based frame
.text:00003810
.text:00003810 ; __int32 __thiscall NCoderMixer2::CMixerMT::Code(NCoderMixer2::CMixerMT *this, struct ISequentialInStream *const *, struct ISequentialOutStream *const *, struct ICompressProgressInfo *)
.text:00003810                 public ?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:00003810 ?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text:00003810
.text:00003810 var_20          = dword ptr -20h
.text:00003810 var_1C          = dword ptr -1Ch
.text:00003810 var_18          = dword ptr -18h
.text:00003810 var_14          = dword ptr -14h
.text:00003810 var_10          = dword ptr -10h
.text:00003810 var_C           = dword ptr -0Ch
.text:00003810 var_8           = dword ptr -8
.text:00003810 var_4           = dword ptr -4
.text:00003810 arg_0           = dword ptr  8
.text:00003810 arg_4           = dword ptr  0Ch
.text:00003810 arg_8           = dword ptr  10h
.text:00003810
.text:00003810                 push    ebp
.text:00003811                 mov     ebp, esp
.text:00003813                 sub     esp, 20h
.text:00003816                 mov     eax, 0CCCCCCCCh
.text:0000381B                 mov     [ebp+var_20], eax
.text:0000381E                 mov     [ebp+var_1C], eax
.text:00003821                 mov     [ebp+var_18], eax
.text:00003824                 mov     [ebp+var_14], eax
.text:00003827                 mov     [ebp+var_10], eax
.text:0000382A                 mov     [ebp+var_C], eax
.text:0000382D                 mov     [ebp+var_8], eax
.text:00003830                 mov     [ebp+var_4], eax
.text:00003833                 mov     [ebp+var_4], ecx
.text:00003836                 mov     eax, [ebp+arg_4]
.text:00003839                 push    eax             ; struct ISequentialOutStream **
.text:0000383A                 mov     ecx, [ebp+arg_0]
.text:0000383D                 push    ecx             ; struct ISequentialInStream **
.text:0000383E                 mov     ecx, [ebp+var_4]
.text:00003841                 sub     ecx, 4          ; this
.text:00003844                 call    ?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z ; NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)
.text:00003849                 mov     [ebp+var_8], 0
.text:00003850                 jmp     short loc_385B
.text:00003852 ; ---------------------------------------------------------------------------
.text:00003852
.text:00003852 loc_3852:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *):loc_389Dj
.text:00003852                 mov     edx, [ebp+var_8]
.text:00003855                 add     edx, 1
.text:00003858                 mov     [ebp+var_8], edx
.text:0000385B
.text:0000385B loc_385B:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+40j
.text:0000385B                 mov     ecx, [ebp+var_4]
.text:0000385E                 add     ecx, 74h ; 't'
.text:00003861                 call    ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size(void)
.text:00003866                 cmp     [ebp+var_8], eax
.text:00003869                 jnb     short loc_389F
.text:0000386B                 mov     eax, [ebp+var_4]
.text:0000386E                 mov     ecx, [ebp+var_8]
.text:00003871                 cmp     ecx, [eax+60h]
.text:00003874                 jz      short loc_389D
.text:00003876                 mov     edx, [ebp+var_8]
.text:00003879                 push    edx
.text:0000387A                 mov     ecx, [ebp+var_4]
.text:0000387D                 add     ecx, 74h ; 't'
.text:00003880                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:00003885                 mov     ecx, eax        ; this
.text:00003887                 call    ?Create@CVirtThread@@QAEIXZ ; CVirtThread::Create(void)
.text:0000388C                 mov     [ebp+var_C], eax
.text:0000388F                 cmp     [ebp+var_C], 0
.text:00003893                 jz      short loc_389D
.text:00003895                 mov     eax, [ebp+var_C]
.text:00003898                 jmp     loc_3A4E
.text:0000389D ; ---------------------------------------------------------------------------
.text:0000389D
.text:0000389D loc_389D:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+64j
.text:0000389D                                         ; NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+83j
.text:0000389D                 jmp     short loc_3852
.text:0000389F ; ---------------------------------------------------------------------------
.text:0000389F
.text:0000389F loc_389F:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+59j
.text:0000389F                 mov     [ebp+var_8], 0
.text:000038A6                 jmp     short loc_38B1
.text:000038A8 ; ---------------------------------------------------------------------------
.text:000038A8
.text:000038A8 loc_38A8:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *):loc_38E2j
.text:000038A8                 mov     eax, [ebp+var_8]
.text:000038AB                 add     eax, 1
.text:000038AE                 mov     [ebp+var_8], eax
.text:000038B1
.text:000038B1 loc_38B1:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+96j
.text:000038B1                 mov     ecx, [ebp+var_4]
.text:000038B4                 add     ecx, 74h ; 't'
.text:000038B7                 call    ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size(void)
.text:000038BC                 cmp     [ebp+var_8], eax
.text:000038BF                 jnb     short loc_38E4
.text:000038C1                 mov     ecx, [ebp+var_4]
.text:000038C4                 mov     edx, [ebp+var_8]
.text:000038C7                 cmp     edx, [ecx+60h]
.text:000038CA                 jz      short loc_38E2
.text:000038CC                 mov     eax, [ebp+var_8]
.text:000038CF                 push    eax
.text:000038D0                 mov     ecx, [ebp+var_4]
.text:000038D3                 add     ecx, 74h ; 't'
.text:000038D6                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:000038DB                 mov     ecx, eax        ; this
.text:000038DD                 call    ?Start@CVirtThread@@QAEXXZ ; CVirtThread::Start(void)
.text:000038E2
.text:000038E2 loc_38E2:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+BAj
.text:000038E2                 jmp     short loc_38A8
.text:000038E4 ; ---------------------------------------------------------------------------
.text:000038E4
.text:000038E4 loc_38E4:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+AFj
.text:000038E4                 mov     ecx, [ebp+arg_8]
.text:000038E7                 push    ecx             ; struct ICompressProgressInfo *
.text:000038E8                 mov     edx, [ebp+var_4]
.text:000038EB                 mov     eax, [edx+60h]
.text:000038EE                 push    eax
.text:000038EF                 mov     ecx, [ebp+var_4]
.text:000038F2                 add     ecx, 74h ; 't'
.text:000038F5                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:000038FA                 mov     ecx, eax        ; this
.text:000038FC                 call    ?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)
.text:00003901                 mov     [ebp+var_8], 0
.text:00003908                 jmp     short loc_3913
.text:0000390A ; ---------------------------------------------------------------------------
.text:0000390A
.text:0000390A loc_390A:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *):loc_3944j
.text:0000390A                 mov     ecx, [ebp+var_8]
.text:0000390D                 add     ecx, 1
.text:00003910                 mov     [ebp+var_8], ecx
.text:00003913
.text:00003913 loc_3913:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+F8j
.text:00003913                 mov     ecx, [ebp+var_4]
.text:00003916                 add     ecx, 74h ; 't'
.text:00003919                 call    ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size(void)
.text:0000391E                 cmp     [ebp+var_8], eax
.text:00003921                 jnb     short loc_3946
.text:00003923                 mov     edx, [ebp+var_4]
.text:00003926                 mov     eax, [ebp+var_8]
.text:00003929                 cmp     eax, [edx+60h]
.text:0000392C                 jz      short loc_3944
.text:0000392E                 mov     ecx, [ebp+var_8]
.text:00003931                 push    ecx
.text:00003932                 mov     ecx, [ebp+var_4]
.text:00003935                 add     ecx, 74h ; 't'
.text:00003938                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:0000393D                 mov     ecx, eax        ; this
.text:0000393F                 call    ?WaitExecuteFinish@CVirtThread@@QAEXXZ ; CVirtThread::WaitExecuteFinish(void)
.text:00003944
.text:00003944 loc_3944:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+11Cj
.text:00003944                 jmp     short loc_390A
.text:00003946 ; ---------------------------------------------------------------------------
.text:00003946
.text:00003946 loc_3946:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+111j
.text:00003946                 push    80004004h       ; __int32
.text:0000394B                 mov     ecx, [ebp+var_4]
.text:0000394E                 sub     ecx, 4          ; this
.text:00003951                 call    ?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z ; NCoderMixer2::CMixerMT::ReturnIfError(long)
.text:00003956                 mov     [ebp+var_10], eax
.text:00003959                 cmp     [ebp+var_10], 0
.text:0000395D                 jz      short loc_3967
.text:0000395F                 mov     eax, [ebp+var_10]
.text:00003962                 jmp     loc_3A4E
.text:00003967 ; ---------------------------------------------------------------------------
.text:00003967
.text:00003967 loc_3967:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+14Dj
.text:00003967                 push    8007000Eh       ; __int32
.text:0000396C                 mov     ecx, [ebp+var_4]
.text:0000396F                 sub     ecx, 4          ; this
.text:00003972                 call    ?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z ; NCoderMixer2::CMixerMT::ReturnIfError(long)
.text:00003977                 mov     [ebp+var_14], eax
.text:0000397A                 cmp     [ebp+var_14], 0
.text:0000397E                 jz      short loc_3988
.text:00003980                 mov     eax, [ebp+var_14]
.text:00003983                 jmp     loc_3A4E
.text:00003988 ; ---------------------------------------------------------------------------
.text:00003988
.text:00003988 loc_3988:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+16Ej
.text:00003988                 mov     [ebp+var_8], 0
.text:0000398F                 jmp     short loc_399A
.text:00003991 ; ---------------------------------------------------------------------------
.text:00003991
.text:00003991 loc_3991:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *):loc_39E2j
.text:00003991                 mov     edx, [ebp+var_8]
.text:00003994                 add     edx, 1
.text:00003997                 mov     [ebp+var_8], edx
.text:0000399A
.text:0000399A loc_399A:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+17Fj
.text:0000399A                 mov     ecx, [ebp+var_4]
.text:0000399D                 add     ecx, 74h ; 't'
.text:000039A0                 call    ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size(void)
.text:000039A5                 cmp     [ebp+var_8], eax
.text:000039A8                 jnb     short loc_39E4
.text:000039AA                 mov     eax, [ebp+var_8]
.text:000039AD                 push    eax
.text:000039AE                 mov     ecx, [ebp+var_4]
.text:000039B1                 add     ecx, 74h ; 't'
.text:000039B4                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:000039B9                 mov     ecx, [eax+6Ch]
.text:000039BC                 mov     [ebp+var_18], ecx
.text:000039BF                 cmp     [ebp+var_18], 0
.text:000039C3                 jz      short loc_39E2
.text:000039C5                 cmp     [ebp+var_18], 20000010h
.text:000039CC                 jz      short loc_39E2
.text:000039CE                 cmp     [ebp+var_18], 1
.text:000039D2                 jz      short loc_39E2
.text:000039D4                 cmp     [ebp+var_18], 80004005h
.text:000039DB                 jz      short loc_39E2
.text:000039DD                 mov     eax, [ebp+var_18]
.text:000039E0                 jmp     short loc_3A4E
.text:000039E2 ; ---------------------------------------------------------------------------
.text:000039E2
.text:000039E2 loc_39E2:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1B3j
.text:000039E2                                         ; NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1BCj ...
.text:000039E2                 jmp     short loc_3991
.text:000039E4 ; ---------------------------------------------------------------------------
.text:000039E4
.text:000039E4 loc_39E4:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+198j
.text:000039E4                 push    1               ; __int32
.text:000039E6                 mov     ecx, [ebp+var_4]
.text:000039E9                 sub     ecx, 4          ; this
.text:000039EC                 call    ?ReturnIfError@CMixerMT@NCoderMixer2@@AAEJJ@Z ; NCoderMixer2::CMixerMT::ReturnIfError(long)
.text:000039F1                 mov     [ebp+var_1C], eax
.text:000039F4                 cmp     [ebp+var_1C], 0
.text:000039F8                 jz      short loc_39FF
.text:000039FA                 mov     eax, [ebp+var_1C]
.text:000039FD                 jmp     short loc_3A4E
.text:000039FF ; ---------------------------------------------------------------------------
.text:000039FF
.text:000039FF loc_39FF:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1E8j
.text:000039FF                 mov     [ebp+var_8], 0
.text:00003A06                 jmp     short loc_3A11
.text:00003A08 ; ---------------------------------------------------------------------------
.text:00003A08
.text:00003A08 loc_3A08:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *):loc_3A4Aj
.text:00003A08                 mov     edx, [ebp+var_8]
.text:00003A0B                 add     edx, 1
.text:00003A0E                 mov     [ebp+var_8], edx
.text:00003A11
.text:00003A11 loc_3A11:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1F6j
.text:00003A11                 mov     ecx, [ebp+var_4]
.text:00003A14                 add     ecx, 74h ; 't'
.text:00003A17                 call    ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ ; CObjectVector<NCoderMixer2::CCoderMT>::Size(void)
.text:00003A1C                 cmp     [ebp+var_8], eax
.text:00003A1F                 jnb     short loc_3A4C
.text:00003A21                 mov     eax, [ebp+var_8]
.text:00003A24                 push    eax
.text:00003A25                 mov     ecx, [ebp+var_4]
.text:00003A28                 add     ecx, 74h ; 't'
.text:00003A2B                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:00003A30                 mov     ecx, [eax+6Ch]
.text:00003A33                 mov     [ebp+var_20], ecx
.text:00003A36                 cmp     [ebp+var_20], 0
.text:00003A3A                 jz      short loc_3A4A
.text:00003A3C                 cmp     [ebp+var_20], 20000010h
.text:00003A43                 jz      short loc_3A4A
.text:00003A45                 mov     eax, [ebp+var_20]
.text:00003A48                 jmp     short loc_3A4E
.text:00003A4A ; ---------------------------------------------------------------------------
.text:00003A4A
.text:00003A4A loc_3A4A:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+22Aj
.text:00003A4A                                         ; NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+233j
.text:00003A4A                 jmp     short loc_3A08
.text:00003A4C ; ---------------------------------------------------------------------------
.text:00003A4C
.text:00003A4C loc_3A4C:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+20Fj
.text:00003A4C                 xor     eax, eax
.text:00003A4E
.text:00003A4E loc_3A4E:                               ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+88j
.text:00003A4E                                         ; NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+152j ...
.text:00003A4E                 add     esp, 20h
.text:00003A51                 cmp     ebp, esp
.text:00003A53                 call    __RTC_CheckEsp
.text:00003A58                 mov     esp, ebp
.text:00003A5A                 pop     ebp
.text:00003A5B                 retn    0Ch
.text:00003A5B ?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text:00003A5B
.text:00003A5B ; ---------------------------------------------------------------------------
.text:00003A5E                 align 10h
.text:00003A60
.text:00003A60 ; =============== S U B R O U T I N E =======================================
.text:00003A60
.text:00003A60 ; Attributes: bp-based frame
.text:00003A60
.text:00003A60 ; unsigned __int64 __thiscall NCoderMixer2::CMixerMT::GetBondStreamSize(NCoderMixer2::CMixerMT *this, unsigned int)
.text:00003A60                 public ?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z
.text:00003A60 ?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z proc near
.text:00003A60
.text:00003A60 var_4           = dword ptr -4
.text:00003A60 arg_0           = dword ptr  8
.text:00003A60
.text:00003A60                 push    ebp
.text:00003A61                 mov     ebp, esp
.text:00003A63                 push    ecx
.text:00003A64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A6B                 mov     [ebp+var_4], ecx
.text:00003A6E                 mov     eax, [ebp+arg_0]
.text:00003A71                 push    eax
.text:00003A72                 mov     ecx, [ebp+var_4]
.text:00003A75                 add     ecx, 68h ; 'h'
.text:00003A78                 call    ??A?$CObjectVector@VCStreamBinder@@@@QBEABVCStreamBinder@@I@Z ; CObjectVector<CStreamBinder>::operator[](uint)
.text:00003A7D                 mov     ecx, eax
.text:00003A7F                 mov     eax, [ecx+18h]
.text:00003A82                 mov     edx, [ecx+1Ch]
.text:00003A85                 add     esp, 4
.text:00003A88                 cmp     ebp, esp
.text:00003A8A                 call    __RTC_CheckEsp
.text:00003A8F                 mov     esp, ebp
.text:00003A91                 pop     ebp
.text:00003A92                 retn    4
.text:00003A92 ?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z endp
.text:00003A92
.text:00003A92 ; ---------------------------------------------------------------------------
.text:00003A95                 align 4
.text:00003A95 _text           ends
.text:00003A95
.rtc$TMZ:00003A98 ; ===========================================================================
.rtc$TMZ:00003A98
.rtc$TMZ:00003A98 ; Segment type: Pure data
.rtc$TMZ:00003A98 ; Segment permissions: Read
.rtc$TMZ:00003A98 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00003A98                 assume cs:_rtc$TMZ
.rtc$TMZ:00003A98                 ;org 3A98h
.rtc$TMZ:00003A98 ; COMDAT (pick any)
.rtc$TMZ:00003A98 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00003A98 _rtc$TMZ        ends
.rtc$TMZ:00003A98
.rtc$IMZ:00003A9C ; ===========================================================================
.rtc$IMZ:00003A9C
.rtc$IMZ:00003A9C ; Segment type: Pure data
.rtc$IMZ:00003A9C ; Segment permissions: Read
.rtc$IMZ:00003A9C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003A9C                 assume cs:_rtc$IMZ
.rtc$IMZ:00003A9C                 ;org 3A9Ch
.rtc$IMZ:00003A9C ; COMDAT (pick any)
.rtc$IMZ:00003A9C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003A9C _rtc$IMZ        ends
.rtc$IMZ:00003A9C
.text:00003AA0 ; ===========================================================================
.text:00003AA0
.text:00003AA0 ; Segment type: Pure code
.text:00003AA0 ; Segment permissions: Read/Execute
.text:00003AA0 _text           segment para public 'CODE' use32
.text:00003AA0                 assume cs:_text
.text:00003AA0                 ;org 3AA0h
.text:00003AA0 ; COMDAT (pick any)
.text:00003AA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AA0
.text:00003AA0 ; =============== S U B R O U T I N E =======================================
.text:00003AA0
.text:00003AA0 ; Attributes: bp-based frame
.text:00003AA0
.text:00003AA0 ; int __thiscall NCoderMixer2::CBindInfo::FindBond_for_PackStream(NCoderMixer2::CBindInfo *this, unsigned int)
.text:00003AA0                 public ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z
.text:00003AA0 ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z proc near
.text:00003AA0                                         ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+C6p
.text:00003AA0                                         ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+3Ep ...
.text:00003AA0
.text:00003AA0 var_8           = dword ptr -8
.text:00003AA0 var_4           = dword ptr -4
.text:00003AA0 arg_0           = dword ptr  8
.text:00003AA0
.text:00003AA0                 push    ebp
.text:00003AA1                 mov     ebp, esp
.text:00003AA3                 sub     esp, 8
.text:00003AA6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003AAD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003AB4                 mov     [ebp+var_4], ecx
.text:00003AB7                 mov     [ebp+var_8], 0
.text:00003ABE                 jmp     short loc_3AC9
.text:00003AC0 ; ---------------------------------------------------------------------------
.text:00003AC0
.text:00003AC0 loc_3AC0:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint):loc_3AF4j
.text:00003AC0                 mov     eax, [ebp+var_8]
.text:00003AC3                 add     eax, 1
.text:00003AC6                 mov     [ebp+var_8], eax
.text:00003AC9
.text:00003AC9 loc_3AC9:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+1Ej
.text:00003AC9                 mov     ecx, [ebp+var_4]
.text:00003ACC                 add     ecx, 0Ch
.text:00003ACF                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00003AD4                 cmp     [ebp+var_8], eax
.text:00003AD7                 jnb     short loc_3AF6
.text:00003AD9                 mov     ecx, [ebp+var_8]
.text:00003ADC                 push    ecx
.text:00003ADD                 mov     ecx, [ebp+var_4]
.text:00003AE0                 add     ecx, 0Ch
.text:00003AE3                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00003AE8                 mov     edx, [eax]
.text:00003AEA                 cmp     edx, [ebp+arg_0]
.text:00003AED                 jnz     short loc_3AF4
.text:00003AEF                 mov     eax, [ebp+var_8]
.text:00003AF2                 jmp     short loc_3AF9
.text:00003AF4 ; ---------------------------------------------------------------------------
.text:00003AF4
.text:00003AF4 loc_3AF4:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+4Dj
.text:00003AF4                 jmp     short loc_3AC0
.text:00003AF6 ; ---------------------------------------------------------------------------
.text:00003AF6
.text:00003AF6 loc_3AF6:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+37j
.text:00003AF6                 or      eax, 0FFFFFFFFh
.text:00003AF9
.text:00003AF9 loc_3AF9:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+52j
.text:00003AF9                 add     esp, 8
.text:00003AFC                 cmp     ebp, esp
.text:00003AFE                 call    __RTC_CheckEsp
.text:00003B03                 mov     esp, ebp
.text:00003B05                 pop     ebp
.text:00003B06                 retn    4
.text:00003B06 ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z endp
.text:00003B06
.text:00003B06 ; ---------------------------------------------------------------------------
.text:00003B09                 align 4
.text:00003B09 _text           ends
.text:00003B09
.text:00003B0C ; ===========================================================================
.text:00003B0C
.text:00003B0C ; Segment type: Pure code
.text:00003B0C ; Segment permissions: Read/Execute
.text:00003B0C _text           segment para public 'CODE' use32
.text:00003B0C                 assume cs:_text
.text:00003B0C                 ;org 3B0Ch
.text:00003B0C ; COMDAT (pick any)
.text:00003B0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B0C
.text:00003B0C ; =============== S U B R O U T I N E =======================================
.text:00003B0C
.text:00003B0C ; Attributes: bp-based frame
.text:00003B0C
.text:00003B0C ; bool __thiscall NCoderMixer2::CBindInfo::IsStream_in_PackStreams(NCoderMixer2::CBindInfo *this, unsigned int)
.text:00003B0C                 public ?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z
.text:00003B0C ?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z proc near
.text:00003B0C                                         ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+AEp
.text:00003B0C                                         ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+24p ...
.text:00003B0C
.text:00003B0C var_4           = dword ptr -4
.text:00003B0C arg_0           = dword ptr  8
.text:00003B0C
.text:00003B0C                 push    ebp
.text:00003B0D                 mov     ebp, esp
.text:00003B0F                 push    ecx
.text:00003B10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B17                 mov     [ebp+var_4], ecx
.text:00003B1A                 mov     eax, [ebp+arg_0]
.text:00003B1D                 push    eax             ; unsigned int
.text:00003B1E                 mov     ecx, [ebp+var_4] ; this
.text:00003B21                 call    ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)
.text:00003B26                 xor     ecx, ecx
.text:00003B28                 test    eax, eax
.text:00003B2A                 setnl   cl
.text:00003B2D                 mov     al, cl
.text:00003B2F                 add     esp, 4
.text:00003B32                 cmp     ebp, esp
.text:00003B34                 call    __RTC_CheckEsp
.text:00003B39                 mov     esp, ebp
.text:00003B3B                 pop     ebp
.text:00003B3C                 retn    4
.text:00003B3C ?IsStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBE_NI@Z endp
.text:00003B3C
.text:00003B3C ; ---------------------------------------------------------------------------
.text:00003B3F                 align 10h
.text:00003B3F _text           ends
.text:00003B3F
.text:00003B40 ; ===========================================================================
.text:00003B40
.text:00003B40 ; Segment type: Pure code
.text:00003B40 ; Segment permissions: Read/Execute
.text:00003B40 _text           segment para public 'CODE' use32
.text:00003B40                 assume cs:_text
.text:00003B40                 ;org 3B40h
.text:00003B40 ; COMDAT (pick any)
.text:00003B40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B40
.text:00003B40 ; =============== S U B R O U T I N E =======================================
.text:00003B40
.text:00003B40 ; Attributes: bp-based frame
.text:00003B40
.text:00003B40 ; int __thiscall NCoderMixer2::CBindInfo::FindStream_in_PackStreams(NCoderMixer2::CBindInfo *this, unsigned int)
.text:00003B40                 public ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z
.text:00003B40 ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z proc near
.text:00003B40                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+79p
.text:00003B40                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+80p ...
.text:00003B40
.text:00003B40 var_8           = dword ptr -8
.text:00003B40 var_4           = dword ptr -4
.text:00003B40 arg_0           = dword ptr  8
.text:00003B40
.text:00003B40                 push    ebp
.text:00003B41                 mov     ebp, esp
.text:00003B43                 sub     esp, 8
.text:00003B46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003B4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B54                 mov     [ebp+var_4], ecx
.text:00003B57                 mov     [ebp+var_8], 0
.text:00003B5E                 jmp     short loc_3B69
.text:00003B60 ; ---------------------------------------------------------------------------
.text:00003B60
.text:00003B60 loc_3B60:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint):loc_3B94j
.text:00003B60                 mov     eax, [ebp+var_8]
.text:00003B63                 add     eax, 1
.text:00003B66                 mov     [ebp+var_8], eax
.text:00003B69
.text:00003B69 loc_3B69:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+1Ej
.text:00003B69                 mov     ecx, [ebp+var_4]
.text:00003B6C                 add     ecx, 18h
.text:00003B6F                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00003B74                 cmp     [ebp+var_8], eax
.text:00003B77                 jnb     short loc_3B96
.text:00003B79                 mov     ecx, [ebp+var_8]
.text:00003B7C                 push    ecx
.text:00003B7D                 mov     ecx, [ebp+var_4]
.text:00003B80                 add     ecx, 18h
.text:00003B83                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00003B88                 mov     edx, [eax]
.text:00003B8A                 cmp     edx, [ebp+arg_0]
.text:00003B8D                 jnz     short loc_3B94
.text:00003B8F                 mov     eax, [ebp+var_8]
.text:00003B92                 jmp     short loc_3B99
.text:00003B94 ; ---------------------------------------------------------------------------
.text:00003B94
.text:00003B94 loc_3B94:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+4Dj
.text:00003B94                 jmp     short loc_3B60
.text:00003B96 ; ---------------------------------------------------------------------------
.text:00003B96
.text:00003B96 loc_3B96:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+37j
.text:00003B96                 or      eax, 0FFFFFFFFh
.text:00003B99
.text:00003B99 loc_3B99:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+52j
.text:00003B99                 add     esp, 8
.text:00003B9C                 cmp     ebp, esp
.text:00003B9E                 call    __RTC_CheckEsp
.text:00003BA3                 mov     esp, ebp
.text:00003BA5                 pop     ebp
.text:00003BA6                 retn    4
.text:00003BA6 ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z endp
.text:00003BA6
.text:00003BA6 ; ---------------------------------------------------------------------------
.text:00003BA9                 align 4
.text:00003BA9 _text           ends
.text:00003BA9
.text$x:00003BAC ; ===========================================================================
.text$x:00003BAC
.text$x:00003BAC ; Segment type: Pure code
.text$x:00003BAC ; Segment permissions: Read/Execute
.text$x:00003BAC _text$x         segment para public 'CODE' use32
.text$x:00003BAC                 assume cs:_text$x
.text$x:00003BAC                 ;org 3BACh
.text$x:00003BAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003BAC
.text$x:00003BAC ; =============== S U B R O U T I N E =======================================
.text$x:00003BAC
.text$x:00003BAC
.text$x:00003BAC __unwindfunclet$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ$0 proc near
.text$x:00003BAC                                         ; DATA XREF: .xdata$x:00003E3Co
.text$x:00003BAC                 lea     ecx, [ebp-34h]  ; this
.text$x:00003BAF                 jmp     ??1CBondsChecks@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBondsChecks::~CBondsChecks(void)
.text$x:00003BAF __unwindfunclet$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ$0 endp
.text$x:00003BAF
.text$x:00003BB4
.text$x:00003BB4 ; =============== S U B R O U T I N E =======================================
.text$x:00003BB4
.text$x:00003BB4
.text$x:00003BB4 __ehhandler$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ proc near
.text$x:00003BB4                                         ; DATA XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+5o
.text$x:00003BB4
.text$x:00003BB4 arg_4           = dword ptr  8
.text$x:00003BB4
.text$x:00003BB4                 mov     edx, [esp+arg_4]
.text$x:00003BB8                 lea     eax, [edx+0Ch]
.text$x:00003BBB                 mov     ecx, [edx-3Ch]
.text$x:00003BBE                 xor     ecx, eax
.text$x:00003BC0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BC5                 mov     eax, offset __ehfuncinfo$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ
.text$x:00003BCA                 jmp     ___CxxFrameHandler3
.text$x:00003BCA __ehhandler$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ endp
.text$x:00003BCA
.text$x:00003BCF
.text$x:00003BCF ; =============== S U B R O U T I N E =======================================
.text$x:00003BCF
.text$x:00003BCF
.text$x:00003BCF __unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$0 proc near
.text$x:00003BCF                                         ; DATA XREF: .xdata$x:00003E68o
.text$x:00003BCF                 mov     ecx, [ebp-10h]
.text$x:00003BD2                 add     ecx, 4          ; this
.text$x:00003BD5                 jmp     ??1CMixer@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixer::~CMixer(void)
.text$x:00003BD5 __unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$0 endp
.text$x:00003BD5
.text$x:00003BDA
.text$x:00003BDA ; =============== S U B R O U T I N E =======================================
.text$x:00003BDA
.text$x:00003BDA
.text$x:00003BDA __unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$1 proc near
.text$x:00003BDA                                         ; DATA XREF: .xdata$x:00003E70o
.text$x:00003BDA                 mov     ecx, [ebp-10h]
.text$x:00003BDD                 add     ecx, 6Ch ; 'l'
.text$x:00003BE0                 jmp     ??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)
.text$x:00003BE0 __unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$1 endp
.text$x:00003BE0
.text$x:00003BE5
.text$x:00003BE5 ; =============== S U B R O U T I N E =======================================
.text$x:00003BE5
.text$x:00003BE5
.text$x:00003BE5 __ehhandler$??0CMixerST@NCoderMixer2@@QAE@_N@Z proc near
.text$x:00003BE5                                         ; DATA XREF: NCoderMixer2::CMixerST::CMixerST(bool)+5o
.text$x:00003BE5
.text$x:00003BE5 arg_4           = dword ptr  8
.text$x:00003BE5
.text$x:00003BE5                 mov     edx, [esp+arg_4]
.text$x:00003BE9                 lea     eax, [edx+0Ch]
.text$x:00003BEC                 mov     ecx, [edx-8]
.text$x:00003BEF                 xor     ecx, eax
.text$x:00003BF1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BF6                 mov     eax, offset __ehfuncinfo$??0CMixerST@NCoderMixer2@@QAE@_N@Z
.text$x:00003BFB                 jmp     ___CxxFrameHandler3
.text$x:00003BFB __ehhandler$??0CMixerST@NCoderMixer2@@QAE@_N@Z endp
.text$x:00003BFB
.text$x:00003C00
.text$x:00003C00 ; =============== S U B R O U T I N E =======================================
.text$x:00003C00
.text$x:00003C00
.text$x:00003C00 __unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00003C00                                         ; DATA XREF: .xdata$x:00003E9Co
.text$x:00003C00                 mov     ecx, [ebp-10h]
.text$x:00003C03                 add     ecx, 4          ; this
.text$x:00003C06                 jmp     ??1CMixer@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixer::~CMixer(void)
.text$x:00003C06 __unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00003C06
.text$x:00003C0B
.text$x:00003C0B ; =============== S U B R O U T I N E =======================================
.text$x:00003C0B
.text$x:00003C0B
.text$x:00003C0B __unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00003C0B                                         ; DATA XREF: .xdata$x:00003EA4o
.text$x:00003C0B                 mov     ecx, [ebp-10h]
.text$x:00003C0E                 add     ecx, 6Ch ; 'l'
.text$x:00003C11                 jmp     ??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)
.text$x:00003C11 __unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00003C11
.text$x:00003C16
.text$x:00003C16 ; =============== S U B R O U T I N E =======================================
.text$x:00003C16
.text$x:00003C16
.text$x:00003C16 __ehhandler$??1CMixerST@NCoderMixer2@@QAE@XZ proc near
.text$x:00003C16                                         ; DATA XREF: NCoderMixer2::CMixerST::~CMixerST(void)+5o
.text$x:00003C16
.text$x:00003C16 arg_4           = dword ptr  8
.text$x:00003C16
.text$x:00003C16                 mov     edx, [esp+arg_4]
.text$x:00003C1A                 lea     eax, [edx+0Ch]
.text$x:00003C1D                 mov     ecx, [edx-8]
.text$x:00003C20                 xor     ecx, eax
.text$x:00003C22                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C27                 mov     eax, offset __ehfuncinfo$??1CMixerST@NCoderMixer2@@QAE@XZ
.text$x:00003C2C                 jmp     ___CxxFrameHandler3
.text$x:00003C2C __ehhandler$??1CMixerST@NCoderMixer2@@QAE@XZ endp
.text$x:00003C2C
.text$x:00003C31
.text$x:00003C31 ; =============== S U B R O U T I N E =======================================
.text$x:00003C31
.text$x:00003C31
.text$x:00003C31 __unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$0 proc near
.text$x:00003C31                                         ; DATA XREF: .xdata$x:00003ED0o
.text$x:00003C31                 lea     ecx, [ebp-20h]
.text$x:00003C34                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003C34 __unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$0 endp
.text$x:00003C34
.text$x:00003C39
.text$x:00003C39 ; =============== S U B R O U T I N E =======================================
.text$x:00003C39
.text$x:00003C39
.text$x:00003C39 __unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$1 proc near
.text$x:00003C39                                         ; DATA XREF: .xdata$x:00003ED8o
.text$x:00003C39                 lea     ecx, [ebp-2Ch]
.text$x:00003C3C                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00003C3C __unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$1 endp
.text$x:00003C3C
.text$x:00003C41
.text$x:00003C41 ; =============== S U B R O U T I N E =======================================
.text$x:00003C41
.text$x:00003C41
.text$x:00003C41 __ehhandler$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z proc near
.text$x:00003C41                                         ; DATA XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+5o
.text$x:00003C41
.text$x:00003C41 arg_4           = dword ptr  8
.text$x:00003C41
.text$x:00003C41                 mov     edx, [esp+arg_4]
.text$x:00003C45                 lea     eax, [edx+0Ch]
.text$x:00003C48                 mov     ecx, [edx-34h]
.text$x:00003C4B                 xor     ecx, eax
.text$x:00003C4D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C52                 mov     eax, offset __ehfuncinfo$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
.text$x:00003C57                 jmp     ___CxxFrameHandler3
.text$x:00003C57 __ehhandler$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z endp
.text$x:00003C57
.text$x:00003C5C
.text$x:00003C5C ; =============== S U B R O U T I N E =======================================
.text$x:00003C5C
.text$x:00003C5C
.text$x:00003C5C __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0 proc near
.text$x:00003C5C                                         ; DATA XREF: .xdata$x:00003F28o
.text$x:00003C5C                 lea     ecx, [ebp-34h]
.text$x:00003C5F                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003C5F __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0 endp
.text$x:00003C5F
.text$x:00003C64
.text$x:00003C64 ; =============== S U B R O U T I N E =======================================
.text$x:00003C64
.text$x:00003C64
.text$x:00003C64 __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1 proc near
.text$x:00003C64                                         ; DATA XREF: .xdata$x:00003F30o
.text$x:00003C64                 lea     ecx, [ebp-4Ch]
.text$x:00003C67                 jmp     ??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>(void)
.text$x:00003C67 __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1 endp
.text$x:00003C67
.text$x:00003C6C
.text$x:00003C6C ; =============== S U B R O U T I N E =======================================
.text$x:00003C6C
.text$x:00003C6C
.text$x:00003C6C __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$2 proc near
.text$x:00003C6C                                         ; DATA XREF: .xdata$x:00003F38o
.text$x:00003C6C                 lea     ecx, [ebp-58h]
.text$x:00003C6F                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003C6F __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$2 endp
.text$x:00003C6F
.text$x:00003C74
.text$x:00003C74 ; =============== S U B R O U T I N E =======================================
.text$x:00003C74
.text$x:00003C74
.text$x:00003C74 __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$3 proc near
.text$x:00003C74                                         ; DATA XREF: .xdata$x:00003F40o
.text$x:00003C74                 lea     ecx, [ebp-6Ch]
.text$x:00003C77                 jmp     ??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ ; CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>(void)
.text$x:00003C77 __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$3 endp
.text$x:00003C77
.text$x:00003C7C
.text$x:00003C7C ; =============== S U B R O U T I N E =======================================
.text$x:00003C7C
.text$x:00003C7C
.text$x:00003C7C __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$4 proc near
.text$x:00003C7C                                         ; DATA XREF: .xdata$x:00003F48o
.text$x:00003C7C                 lea     ecx, [ebp-7Ch]
.text$x:00003C7F                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003C7F __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$4 endp
.text$x:00003C7F
.text$x:00003C84
.text$x:00003C84 ; =============== S U B R O U T I N E =======================================
.text$x:00003C84
.text$x:00003C84
.text$x:00003C84 __ehhandler$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z proc near
.text$x:00003C84                                         ; DATA XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+5o
.text$x:00003C84
.text$x:00003C84 arg_4           = dword ptr  8
.text$x:00003C84
.text$x:00003C84                 mov     edx, [esp+arg_4]
.text$x:00003C88                 lea     eax, [edx+0Ch]
.text$x:00003C8B                 mov     ecx, [edx-0B4h]
.text$x:00003C91                 xor     ecx, eax
.text$x:00003C93                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C98                 mov     eax, offset __ehfuncinfo$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
.text$x:00003C9D                 jmp     ___CxxFrameHandler3
.text$x:00003C9D __ehhandler$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z endp
.text$x:00003C9D
.text$x:00003CA2
.text$x:00003CA2 ; =============== S U B R O U T I N E =======================================
.text$x:00003CA2
.text$x:00003CA2
.text$x:00003CA2 __unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0 proc near
.text$x:00003CA2                                         ; DATA XREF: .xdata$x:00003F50o
.text$x:00003CA2                 lea     ecx, [ebp-18h]
.text$x:00003CA5                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003CA5 __unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0 endp
.text$x:00003CA5
.text$x:00003CAA
.text$x:00003CAA ; =============== S U B R O U T I N E =======================================
.text$x:00003CAA
.text$x:00003CAA
.text$x:00003CAA __unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1 proc near
.text$x:00003CAA                                         ; DATA XREF: .xdata$x:00003F58o
.text$x:00003CAA                 mov     eax, [ebp-48h]
.text$x:00003CAD                 push    eax             ; void *
.text$x:00003CAE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003CB3                 pop     ecx
.text$x:00003CB4                 retn
.text$x:00003CB4 __unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1 endp
.text$x:00003CB4
.text$x:00003CB5
.text$x:00003CB5 ; =============== S U B R O U T I N E =======================================
.text$x:00003CB5
.text$x:00003CB5
.text$x:00003CB5 __ehhandler$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z proc near
.text$x:00003CB5                                         ; DATA XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+5o
.text$x:00003CB5
.text$x:00003CB5 arg_4           = dword ptr  8
.text$x:00003CB5
.text$x:00003CB5                 mov     edx, [esp+arg_4]
.text$x:00003CB9                 lea     eax, [edx+0Ch]
.text$x:00003CBC                 mov     ecx, [edx-4Ch]
.text$x:00003CBF                 xor     ecx, eax
.text$x:00003CC1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CC6                 mov     eax, offset __ehfuncinfo$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
.text$x:00003CCB                 jmp     ___CxxFrameHandler3
.text$x:00003CCB __ehhandler$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z endp
.text$x:00003CCB
.text$x:00003CD0
.text$x:00003CD0 ; =============== S U B R O U T I N E =======================================
.text$x:00003CD0
.text$x:00003CD0
.text$x:00003CD0 __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$0 proc near
.text$x:00003CD0                                         ; DATA XREF: .xdata$x:00003F84o
.text$x:00003CD0                 lea     ecx, [ebp-18h]
.text$x:00003CD3                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00003CD3 __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$0 endp
.text$x:00003CD3
.text$x:00003CD8
.text$x:00003CD8 ; =============== S U B R O U T I N E =======================================
.text$x:00003CD8
.text$x:00003CD8
.text$x:00003CD8 __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$1 proc near
.text$x:00003CD8                                         ; DATA XREF: .xdata$x:00003F8Co
.text$x:00003CD8                 lea     ecx, [ebp-58h]
.text$x:00003CDB                 jmp     ??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>(void)
.text$x:00003CDB __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$1 endp
.text$x:00003CDB
.text$x:00003CE0
.text$x:00003CE0 ; =============== S U B R O U T I N E =======================================
.text$x:00003CE0
.text$x:00003CE0
.text$x:00003CE0 __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$2 proc near
.text$x:00003CE0                                         ; DATA XREF: .xdata$x:00003F94o
.text$x:00003CE0                 lea     ecx, [ebp-64h]
.text$x:00003CE3                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00003CE3 __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$2 endp
.text$x:00003CE3
.text$x:00003CE8
.text$x:00003CE8 ; =============== S U B R O U T I N E =======================================
.text$x:00003CE8
.text$x:00003CE8
.text$x:00003CE8 __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$3 proc near
.text$x:00003CE8                                         ; DATA XREF: .xdata$x:00003F9Co
.text$x:00003CE8                 mov     eax, [ebp-9Ch]
.text$x:00003CEE                 push    eax             ; void *
.text$x:00003CEF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003CF4                 pop     ecx
.text$x:00003CF5                 retn
.text$x:00003CF5 __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$3 endp
.text$x:00003CF5
.text$x:00003CF6
.text$x:00003CF6 ; =============== S U B R O U T I N E =======================================
.text$x:00003CF6
.text$x:00003CF6
.text$x:00003CF6 __ehhandler$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z proc near
.text$x:00003CF6                                         ; DATA XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+5o
.text$x:00003CF6
.text$x:00003CF6 arg_4           = dword ptr  8
.text$x:00003CF6
.text$x:00003CF6                 mov     edx, [esp+arg_4]
.text$x:00003CFA                 lea     eax, [edx+0Ch]
.text$x:00003CFD                 mov     ecx, [edx-0B0h]
.text$x:00003D03                 xor     ecx, eax
.text$x:00003D05                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D0A                 mov     eax, offset __ehfuncinfo$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z
.text$x:00003D0F                 jmp     ___CxxFrameHandler3
.text$x:00003D0F __ehhandler$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z endp
.text$x:00003D0F
.text$x:00003D14
.text$x:00003D14 ; =============== S U B R O U T I N E =======================================
.text$x:00003D14
.text$x:00003D14
.text$x:00003D14 __unwindfunclet$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z$0 proc near
.text$x:00003D14                                         ; DATA XREF: .xdata$x:00003FC8o
.text$x:00003D14                 lea     ecx, [ebp-40h]
.text$x:00003D17                 jmp     ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ ; CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>(void)
.text$x:00003D17 __unwindfunclet$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z$0 endp
.text$x:00003D17
.text$x:00003D1C
.text$x:00003D1C ; =============== S U B R O U T I N E =======================================
.text$x:00003D1C
.text$x:00003D1C
.text$x:00003D1C __ehhandler$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z proc near
.text$x:00003D1C                                         ; DATA XREF: NCoderMixer2::CMixerST::FinishStream(uint)+5o
.text$x:00003D1C
.text$x:00003D1C arg_4           = dword ptr  8
.text$x:00003D1C
.text$x:00003D1C                 mov     edx, [esp+arg_4]
.text$x:00003D20                 lea     eax, [edx+0Ch]
.text$x:00003D23                 mov     ecx, [edx-50h]
.text$x:00003D26                 xor     ecx, eax
.text$x:00003D28                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D2D                 mov     eax, offset __ehfuncinfo$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z
.text$x:00003D32                 jmp     ___CxxFrameHandler3
.text$x:00003D32 __ehhandler$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z endp
.text$x:00003D32
.text$x:00003D37
.text$x:00003D37 ; =============== S U B R O U T I N E =======================================
.text$x:00003D37
.text$x:00003D37
.text$x:00003D37 __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0 proc near
.text$x:00003D37                                         ; DATA XREF: .xdata$x:00004018o
.text$x:00003D37                 lea     ecx, [ebp-28h]
.text$x:00003D3A                 jmp     ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text$x:00003D3A __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0 endp
.text$x:00003D3A
.text$x:00003D3F
.text$x:00003D3F ; =============== S U B R O U T I N E =======================================
.text$x:00003D3F
.text$x:00003D3F
.text$x:00003D3F __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1 proc near
.text$x:00003D3F                                         ; DATA XREF: .xdata$x:00004020o
.text$x:00003D3F                 lea     ecx, [ebp-3Ch]
.text$x:00003D42                 jmp     ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text$x:00003D42 __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1 endp
.text$x:00003D42
.text$x:00003D47
.text$x:00003D47 ; =============== S U B R O U T I N E =======================================
.text$x:00003D47
.text$x:00003D47
.text$x:00003D47 __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$2 proc near
.text$x:00003D47                                         ; DATA XREF: .xdata$x:00004028o
.text$x:00003D47                 lea     ecx, [ebp-5Ch]
.text$x:00003D4A                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003D4A __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$2 endp
.text$x:00003D4A
.text$x:00003D4F
.text$x:00003D4F ; =============== S U B R O U T I N E =======================================
.text$x:00003D4F
.text$x:00003D4F
.text$x:00003D4F __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$3 proc near
.text$x:00003D4F                                         ; DATA XREF: .xdata$x:00004030o
.text$x:00003D4F                 lea     ecx, [ebp-6Ch]
.text$x:00003D52                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00003D52 __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$3 endp
.text$x:00003D52
.text$x:00003D57
.text$x:00003D57 ; =============== S U B R O U T I N E =======================================
.text$x:00003D57
.text$x:00003D57
.text$x:00003D57 __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$4 proc near
.text$x:00003D57                                         ; DATA XREF: .xdata$x:00004038o
.text$x:00003D57                 lea     ecx, [ebp-84h]
.text$x:00003D5D                 jmp     ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>(void)
.text$x:00003D5D __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$4 endp
.text$x:00003D5D
.text$x:00003D62
.text$x:00003D62 ; =============== S U B R O U T I N E =======================================
.text$x:00003D62
.text$x:00003D62
.text$x:00003D62 __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$5 proc near
.text$x:00003D62                                         ; DATA XREF: .xdata$x:00004040o
.text$x:00003D62                 lea     ecx, [ebp-98h]
.text$x:00003D68                 jmp     ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text$x:00003D68 __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$5 endp
.text$x:00003D68
.text$x:00003D6D
.text$x:00003D6D ; =============== S U B R O U T I N E =======================================
.text$x:00003D6D
.text$x:00003D6D
.text$x:00003D6D __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$6 proc near
.text$x:00003D6D                                         ; DATA XREF: .xdata$x:00004048o
.text$x:00003D6D                 lea     ecx, [ebp-0A8h]
.text$x:00003D73                 jmp     ??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ ; CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>(void)
.text$x:00003D73 __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$6 endp
.text$x:00003D73
.text$x:00003D78
.text$x:00003D78 ; =============== S U B R O U T I N E =======================================
.text$x:00003D78
.text$x:00003D78
.text$x:00003D78 __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$7 proc near
.text$x:00003D78                                         ; DATA XREF: .xdata$x:00004050o
.text$x:00003D78                 lea     ecx, [ebp-0B8h]
.text$x:00003D7E                 jmp     ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>(void)
.text$x:00003D7E __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$7 endp
.text$x:00003D7E
.text$x:00003D83
.text$x:00003D83 ; =============== S U B R O U T I N E =======================================
.text$x:00003D83
.text$x:00003D83
.text$x:00003D83 __ehhandler$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text$x:00003D83                                         ; DATA XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+5o
.text$x:00003D83
.text$x:00003D83 arg_4           = dword ptr  8
.text$x:00003D83
.text$x:00003D83                 mov     edx, [esp+arg_4]
.text$x:00003D87                 lea     eax, [edx+0Ch]
.text$x:00003D8A                 mov     ecx, [edx-110h]
.text$x:00003D90                 xor     ecx, eax
.text$x:00003D92                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D97                 mov     eax, offset __ehfuncinfo$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text$x:00003D9C                 jmp     ___CxxFrameHandler3
.text$x:00003D9C __ehhandler$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text$x:00003D9C
.text$x:00003DA1
.text$x:00003DA1 ; =============== S U B R O U T I N E =======================================
.text$x:00003DA1
.text$x:00003DA1
.text$x:00003DA1 __unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$0 proc near
.text$x:00003DA1                                         ; DATA XREF: .xdata$x:00004058o
.text$x:00003DA1                 lea     ecx, [ebp-18h]
.text$x:00003DA4                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003DA4 __unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$0 endp
.text$x:00003DA4
.text$x:00003DA9
.text$x:00003DA9 ; =============== S U B R O U T I N E =======================================
.text$x:00003DA9
.text$x:00003DA9
.text$x:00003DA9 __unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$1 proc near
.text$x:00003DA9                                         ; DATA XREF: .xdata$x:00004060o
.text$x:00003DA9                 lea     ecx, [ebp-30h]
.text$x:00003DAC                 jmp     ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>(void)
.text$x:00003DAC __unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$1 endp
.text$x:00003DAC
.text$x:00003DB1
.text$x:00003DB1 ; =============== S U B R O U T I N E =======================================
.text$x:00003DB1
.text$x:00003DB1
.text$x:00003DB1 __ehhandler$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z proc near
.text$x:00003DB1                                         ; DATA XREF: NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+5o
.text$x:00003DB1
.text$x:00003DB1 arg_4           = dword ptr  8
.text$x:00003DB1
.text$x:00003DB1                 mov     edx, [esp+arg_4]
.text$x:00003DB5                 lea     eax, [edx+0Ch]
.text$x:00003DB8                 mov     ecx, [edx-48h]
.text$x:00003DBB                 xor     ecx, eax
.text$x:00003DBD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DC2                 mov     eax, offset __ehfuncinfo$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z
.text$x:00003DC7                 jmp     ___CxxFrameHandler3
.text$x:00003DC7 __ehhandler$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z endp
.text$x:00003DC7
.text$x:00003DCC
.text$x:00003DCC ; =============== S U B R O U T I N E =======================================
.text$x:00003DCC
.text$x:00003DCC
.text$x:00003DCC __ehhandler$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ proc near
.text$x:00003DCC                                         ; DATA XREF: NCoderMixer2::CCoderMT::Execute(void)+5o
.text$x:00003DCC
.text$x:00003DCC arg_4           = dword ptr  8
.text$x:00003DCC
.text$x:00003DCC                 mov     edx, [esp+arg_4]
.text$x:00003DD0                 lea     eax, [edx+0Ch]
.text$x:00003DD3                 mov     ecx, [edx-18h]
.text$x:00003DD6                 xor     ecx, eax
.text$x:00003DD8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DDD                 mov     eax, offset __ehfuncinfo$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.text$x:00003DE2                 jmp     ___CxxFrameHandler3
.text$x:00003DE2 __ehhandler$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ endp
.text$x:00003DE2
.text$x:00003DE7
.text$x:00003DE7 ; =============== S U B R O U T I N E =======================================
.text$x:00003DE7
.text$x:00003DE7
.text$x:00003DE7 __unwindfunclet$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z$0 proc near
.text$x:00003DE7                                         ; DATA XREF: .xdata$x:000040E4o
.text$x:00003DE7                 lea     ecx, [ebp-24h]  ; this
.text$x:00003DEA                 jmp     ??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoderMT::CReleaser::~CReleaser(void)
.text$x:00003DEA __unwindfunclet$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z$0 endp
.text$x:00003DEA
.text$x:00003DEF
.text$x:00003DEF ; =============== S U B R O U T I N E =======================================
.text$x:00003DEF
.text$x:00003DEF
.text$x:00003DEF __ehhandler$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z proc near
.text$x:00003DEF                                         ; DATA XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+5o
.text$x:00003DEF
.text$x:00003DEF arg_4           = dword ptr  8
.text$x:00003DEF
.text$x:00003DEF                 mov     edx, [esp+arg_4]
.text$x:00003DF3                 lea     eax, [edx+0Ch]
.text$x:00003DF6                 mov     ecx, [edx-48h]
.text$x:00003DF9                 xor     ecx, eax
.text$x:00003DFB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E00                 mov     eax, offset __ehfuncinfo$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z
.text$x:00003E05                 jmp     ___CxxFrameHandler3
.text$x:00003E05 __ehhandler$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z endp
.text$x:00003E05
.text$x:00003E0A
.text$x:00003E0A ; =============== S U B R O U T I N E =======================================
.text$x:00003E0A
.text$x:00003E0A
.text$x:00003E0A __unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$0 proc near
.text$x:00003E0A                                         ; DATA XREF: .xdata$x:00004110o
.text$x:00003E0A                 lea     ecx, [ebp-5Ch]
.text$x:00003E0D                 jmp     ??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>(void)
.text$x:00003E0D __unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$0 endp
.text$x:00003E0D
.text$x:00003E12
.text$x:00003E12 ; =============== S U B R O U T I N E =======================================
.text$x:00003E12
.text$x:00003E12
.text$x:00003E12 __unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$1 proc near
.text$x:00003E12                                         ; DATA XREF: .xdata$x:00004118o
.text$x:00003E12                 lea     ecx, [ebp-68h]
.text$x:00003E15                 jmp     ??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ ; CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>(void)
.text$x:00003E15 __unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$1 endp
.text$x:00003E15
.text$x:00003E1A
.text$x:00003E1A ; =============== S U B R O U T I N E =======================================
.text$x:00003E1A
.text$x:00003E1A
.text$x:00003E1A __ehhandler$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z proc near
.text$x:00003E1A                                         ; DATA XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+5o
.text$x:00003E1A
.text$x:00003E1A arg_4           = dword ptr  8
.text$x:00003E1A
.text$x:00003E1A                 mov     edx, [esp+arg_4]
.text$x:00003E1E                 lea     eax, [edx+0Ch]
.text$x:00003E21                 mov     ecx, [edx-0B0h]
.text$x:00003E27                 xor     ecx, eax
.text$x:00003E29                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E2E                 mov     eax, offset __ehfuncinfo$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z
.text$x:00003E33                 jmp     ___CxxFrameHandler3
.text$x:00003E33 __ehhandler$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z endp
.text$x:00003E33
.text$x:00003E33 _text$x         ends
.text$x:00003E33
.xdata$x:00003E38 ; ===========================================================================
.xdata$x:00003E38
.xdata$x:00003E38 ; Segment type: Pure data
.xdata$x:00003E38 ; Segment permissions: Read
.xdata$x:00003E38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003E38                 assume cs:_xdata$x
.xdata$x:00003E38                 ;org 3E38h
.xdata$x:00003E38 __unwindtable$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ db 0FFh
.xdata$x:00003E38                                         ; DATA XREF: .xdata$x:00003E48o
.xdata$x:00003E39                 db 0FFh
.xdata$x:00003E3A                 db 0FFh
.xdata$x:00003E3B                 db 0FFh
.xdata$x:00003E3C                 dd offset __unwindfunclet$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ$0
.xdata$x:00003E40 __ehfuncinfo$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ db  22h ; "
.xdata$x:00003E40                                         ; DATA XREF: __ehhandler$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ+11o
.xdata$x:00003E41                 db    5
.xdata$x:00003E42                 db  93h ; ô
.xdata$x:00003E43                 db  19h
.xdata$x:00003E44                 db    1
.xdata$x:00003E45                 db    0
.xdata$x:00003E46                 db    0
.xdata$x:00003E47                 db    0
.xdata$x:00003E48                 dd offset __unwindtable$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ
.xdata$x:00003E4C                 align 20h
.xdata$x:00003E60                 db    1
.xdata$x:00003E61                 db    0
.xdata$x:00003E62                 db    0
.xdata$x:00003E63                 db    0
.xdata$x:00003E64 __unwindtable$??0CMixerST@NCoderMixer2@@QAE@_N@Z db 0FFh
.xdata$x:00003E64                                         ; DATA XREF: .xdata$x:00003E7Co
.xdata$x:00003E65                 db 0FFh
.xdata$x:00003E66                 db 0FFh
.xdata$x:00003E67                 db 0FFh
.xdata$x:00003E68                 dd offset __unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$0
.xdata$x:00003E6C                 align 10h
.xdata$x:00003E70                 dd offset __unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$1
.xdata$x:00003E74 __ehfuncinfo$??0CMixerST@NCoderMixer2@@QAE@_N@Z db  22h ; "
.xdata$x:00003E74                                         ; DATA XREF: __ehhandler$??0CMixerST@NCoderMixer2@@QAE@_N@Z+11o
.xdata$x:00003E75                 db    5
.xdata$x:00003E76                 db  93h ; ô
.xdata$x:00003E77                 db  19h
.xdata$x:00003E78                 db    2
.xdata$x:00003E79                 db    0
.xdata$x:00003E7A                 db    0
.xdata$x:00003E7B                 db    0
.xdata$x:00003E7C                 dd offset __unwindtable$??0CMixerST@NCoderMixer2@@QAE@_N@Z
.xdata$x:00003E80                 db    0
.xdata$x:00003E81                 db    0
.xdata$x:00003E82                 db    0
.xdata$x:00003E83                 db    0
.xdata$x:00003E84                 db    0
.xdata$x:00003E85                 db    0
.xdata$x:00003E86                 db    0
.xdata$x:00003E87                 db    0
.xdata$x:00003E88                 db    0
.xdata$x:00003E89                 db    0
.xdata$x:00003E8A                 db    0
.xdata$x:00003E8B                 db    0
.xdata$x:00003E8C                 db    0
.xdata$x:00003E8D                 db    0
.xdata$x:00003E8E                 db    0
.xdata$x:00003E8F                 db    0
.xdata$x:00003E90                 db    0
.xdata$x:00003E91                 db    0
.xdata$x:00003E92                 db    0
.xdata$x:00003E93                 db    0
.xdata$x:00003E94                 db    1
.xdata$x:00003E95                 db    0
.xdata$x:00003E96                 db    0
.xdata$x:00003E97                 db    0
.xdata$x:00003E98 __unwindtable$??1CMixerST@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00003E98                                         ; DATA XREF: .xdata$x:00003EB0o
.xdata$x:00003E99                 db 0FFh
.xdata$x:00003E9A                 db 0FFh
.xdata$x:00003E9B                 db 0FFh
.xdata$x:00003E9C                 dd offset __unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$0
.xdata$x:00003EA0                 db    0
.xdata$x:00003EA1                 db    0
.xdata$x:00003EA2                 db    0
.xdata$x:00003EA3                 db    0
.xdata$x:00003EA4                 dd offset __unwindfunclet$??1CMixerST@NCoderMixer2@@QAE@XZ$1
.xdata$x:00003EA8 __ehfuncinfo$??1CMixerST@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00003EA8                                         ; DATA XREF: __ehhandler$??1CMixerST@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00003EA9                 db    5
.xdata$x:00003EAA                 db  93h ; ô
.xdata$x:00003EAB                 db  19h
.xdata$x:00003EAC                 db    2
.xdata$x:00003EAD                 db    0
.xdata$x:00003EAE                 db    0
.xdata$x:00003EAF                 db    0
.xdata$x:00003EB0                 dd offset __unwindtable$??1CMixerST@NCoderMixer2@@QAE@XZ
.xdata$x:00003EB4                 db    0
.xdata$x:00003EB5                 db    0
.xdata$x:00003EB6                 db    0
.xdata$x:00003EB7                 db    0
.xdata$x:00003EB8                 db    0
.xdata$x:00003EB9                 db    0
.xdata$x:00003EBA                 db    0
.xdata$x:00003EBB                 db    0
.xdata$x:00003EBC                 db    0
.xdata$x:00003EBD                 db    0
.xdata$x:00003EBE                 db    0
.xdata$x:00003EBF                 db    0
.xdata$x:00003EC0                 db    0
.xdata$x:00003EC1                 db    0
.xdata$x:00003EC2                 db    0
.xdata$x:00003EC3                 db    0
.xdata$x:00003EC4                 db    0
.xdata$x:00003EC5                 db    0
.xdata$x:00003EC6                 db    0
.xdata$x:00003EC7                 db    0
.xdata$x:00003EC8                 db    1
.xdata$x:00003EC9                 db    0
.xdata$x:00003ECA                 db    0
.xdata$x:00003ECB                 db    0
.xdata$x:00003ECC __unwindtable$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z db 0FFh
.xdata$x:00003ECC                                         ; DATA XREF: .xdata$x:00003EE4o
.xdata$x:00003ECD                 db 0FFh
.xdata$x:00003ECE                 db 0FFh
.xdata$x:00003ECF                 db 0FFh
.xdata$x:00003ED0                 dd offset __unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$0
.xdata$x:00003ED4                 db 0FFh
.xdata$x:00003ED5                 db 0FFh
.xdata$x:00003ED6                 db 0FFh
.xdata$x:00003ED7                 db 0FFh
.xdata$x:00003ED8                 dd offset __unwindfunclet$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z$1
.xdata$x:00003EDC __ehfuncinfo$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z db  22h ; "
.xdata$x:00003EDC                                         ; DATA XREF: __ehhandler$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z+11o
.xdata$x:00003EDD                 db    5
.xdata$x:00003EDE                 db  93h ; ô
.xdata$x:00003EDF                 db  19h
.xdata$x:00003EE0                 db    2
.xdata$x:00003EE1                 db    0
.xdata$x:00003EE2                 db    0
.xdata$x:00003EE3                 db    0
.xdata$x:00003EE4                 dd offset __unwindtable$?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
.xdata$x:00003EE8                 db    0
.xdata$x:00003EE9                 db    0
.xdata$x:00003EEA                 db    0
.xdata$x:00003EEB                 db    0
.xdata$x:00003EEC                 db    0
.xdata$x:00003EED                 db    0
.xdata$x:00003EEE                 db    0
.xdata$x:00003EEF                 db    0
.xdata$x:00003EF0                 db    0
.xdata$x:00003EF1                 db    0
.xdata$x:00003EF2                 db    0
.xdata$x:00003EF3                 db    0
.xdata$x:00003EF4                 db    0
.xdata$x:00003EF5                 db    0
.xdata$x:00003EF6                 db    0
.xdata$x:00003EF7                 db    0
.xdata$x:00003EF8                 db    0
.xdata$x:00003EF9                 db    0
.xdata$x:00003EFA                 db    0
.xdata$x:00003EFB                 db    0
.xdata$x:00003EFC                 db    1
.xdata$x:00003EFD                 db    0
.xdata$x:00003EFE                 db    0
.xdata$x:00003EFF                 db    0
.xdata$x:00003F00 __ehfuncinfo$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z db  22h ; "
.xdata$x:00003F00                                         ; DATA XREF: __ehhandler$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z+14o
.xdata$x:00003F01                 db    5
.xdata$x:00003F02                 db  93h ; ô
.xdata$x:00003F03                 db  19h
.xdata$x:00003F04                 db    5
.xdata$x:00003F05                 db    0
.xdata$x:00003F06                 db    0
.xdata$x:00003F07                 db    0
.xdata$x:00003F08                 dd offset __unwindtable$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
.xdata$x:00003F0C                 align 20h
.xdata$x:00003F20                 db    1
.xdata$x:00003F21                 db    0
.xdata$x:00003F22                 db    0
.xdata$x:00003F23                 db    0
.xdata$x:00003F24 __unwindtable$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z db 0FFh
.xdata$x:00003F24                                         ; DATA XREF: .xdata$x:00003F08o
.xdata$x:00003F25                 db 0FFh
.xdata$x:00003F26                 db 0FFh
.xdata$x:00003F27                 db 0FFh
.xdata$x:00003F28                 dd offset __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0
.xdata$x:00003F2C                 align 10h
.xdata$x:00003F30                 dd offset __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1
.xdata$x:00003F34                 db    1
.xdata$x:00003F35                 db    0
.xdata$x:00003F36                 db    0
.xdata$x:00003F37                 db    0
.xdata$x:00003F38                 dd offset __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$2
.xdata$x:00003F3C                 align 10h
.xdata$x:00003F40                 dd offset __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$3
.xdata$x:00003F44                 db    3
.xdata$x:00003F45                 db    0
.xdata$x:00003F46                 db    0
.xdata$x:00003F47                 db    0
.xdata$x:00003F48                 dd offset __unwindfunclet$?GetInStream2@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$4
.xdata$x:00003F4C __unwindtable$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z db 0FFh
.xdata$x:00003F4C                                         ; DATA XREF: .xdata$x:00003F64o
.xdata$x:00003F4D                 db 0FFh
.xdata$x:00003F4E                 db 0FFh
.xdata$x:00003F4F                 db 0FFh
.xdata$x:00003F50                 dd offset __unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$0
.xdata$x:00003F54                 align 8
.xdata$x:00003F58                 dd offset __unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1
.xdata$x:00003F5C __ehfuncinfo$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z db  22h ; "
.xdata$x:00003F5C                                         ; DATA XREF: __ehhandler$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z+11o
.xdata$x:00003F5D                 db    5
.xdata$x:00003F5E                 db  93h ; ô
.xdata$x:00003F5F                 db  19h
.xdata$x:00003F60                 db    2
.xdata$x:00003F61                 db    0
.xdata$x:00003F62                 db    0
.xdata$x:00003F63                 db    0
.xdata$x:00003F64                 dd offset __unwindtable$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z
.xdata$x:00003F68                 db    0
.xdata$x:00003F69                 db    0
.xdata$x:00003F6A                 db    0
.xdata$x:00003F6B                 db    0
.xdata$x:00003F6C                 db    0
.xdata$x:00003F6D                 db    0
.xdata$x:00003F6E                 db    0
.xdata$x:00003F6F                 db    0
.xdata$x:00003F70                 db    0
.xdata$x:00003F71                 db    0
.xdata$x:00003F72                 db    0
.xdata$x:00003F73                 db    0
.xdata$x:00003F74                 db    0
.xdata$x:00003F75                 db    0
.xdata$x:00003F76                 db    0
.xdata$x:00003F77                 db    0
.xdata$x:00003F78                 db    0
.xdata$x:00003F79                 db    0
.xdata$x:00003F7A                 db    0
.xdata$x:00003F7B                 db    0
.xdata$x:00003F7C                 db    1
.xdata$x:00003F7D                 db    0
.xdata$x:00003F7E                 db    0
.xdata$x:00003F7F                 db    0
.xdata$x:00003F80 __unwindtable$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z db 0FFh
.xdata$x:00003F80                                         ; DATA XREF: .xdata$x:00003FA8o
.xdata$x:00003F81                 db 0FFh
.xdata$x:00003F82                 db 0FFh
.xdata$x:00003F83                 db 0FFh
.xdata$x:00003F84                 dd offset __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$0
.xdata$x:00003F88                 db    0
.xdata$x:00003F89                 db    0
.xdata$x:00003F8A                 db    0
.xdata$x:00003F8B                 db    0
.xdata$x:00003F8C                 dd offset __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$1
.xdata$x:00003F90                 db    1
.xdata$x:00003F91                 db    0
.xdata$x:00003F92                 db    0
.xdata$x:00003F93                 db    0
.xdata$x:00003F94                 dd offset __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$2
.xdata$x:00003F98                 db    0
.xdata$x:00003F99                 db    0
.xdata$x:00003F9A                 db    0
.xdata$x:00003F9B                 db    0
.xdata$x:00003F9C                 dd offset __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$3
.xdata$x:00003FA0 __ehfuncinfo$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z db  22h ; "
.xdata$x:00003FA0                                         ; DATA XREF: __ehhandler$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z+14o
.xdata$x:00003FA1                 db    5
.xdata$x:00003FA2                 db  93h ; ô
.xdata$x:00003FA3                 db  19h
.xdata$x:00003FA4                 db    4
.xdata$x:00003FA5                 db    0
.xdata$x:00003FA6                 db    0
.xdata$x:00003FA7                 db    0
.xdata$x:00003FA8                 dd offset __unwindtable$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z
.xdata$x:00003FAC                 align 20h
.xdata$x:00003FC0                 db    1
.xdata$x:00003FC1                 db    0
.xdata$x:00003FC2                 db    0
.xdata$x:00003FC3                 db    0
.xdata$x:00003FC4 __unwindtable$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z db 0FFh
.xdata$x:00003FC4                                         ; DATA XREF: .xdata$x:00003FD4o
.xdata$x:00003FC5                 db 0FFh
.xdata$x:00003FC6                 db 0FFh
.xdata$x:00003FC7                 db 0FFh
.xdata$x:00003FC8                 dd offset __unwindfunclet$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z$0
.xdata$x:00003FCC __ehfuncinfo$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z db  22h ; "
.xdata$x:00003FCC                                         ; DATA XREF: __ehhandler$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z+11o
.xdata$x:00003FCD                 db    5
.xdata$x:00003FCE                 db  93h ; ô
.xdata$x:00003FCF                 db  19h
.xdata$x:00003FD0                 db    1
.xdata$x:00003FD1                 db    0
.xdata$x:00003FD2                 db    0
.xdata$x:00003FD3                 db    0
.xdata$x:00003FD4                 dd offset __unwindtable$?FinishStream@CMixerST@NCoderMixer2@@AAEJI@Z
.xdata$x:00003FD8                 db    0
.xdata$x:00003FD9                 db    0
.xdata$x:00003FDA                 db    0
.xdata$x:00003FDB                 db    0
.xdata$x:00003FDC                 db    0
.xdata$x:00003FDD                 db    0
.xdata$x:00003FDE                 db    0
.xdata$x:00003FDF                 db    0
.xdata$x:00003FE0                 db    0
.xdata$x:00003FE1                 db    0
.xdata$x:00003FE2                 db    0
.xdata$x:00003FE3                 db    0
.xdata$x:00003FE4                 db    0
.xdata$x:00003FE5                 db    0
.xdata$x:00003FE6                 db    0
.xdata$x:00003FE7                 db    0
.xdata$x:00003FE8                 db    0
.xdata$x:00003FE9                 db    0
.xdata$x:00003FEA                 db    0
.xdata$x:00003FEB                 db    0
.xdata$x:00003FEC                 db    1
.xdata$x:00003FED                 db    0
.xdata$x:00003FEE                 db    0
.xdata$x:00003FEF                 db    0
.xdata$x:00003FF0 __ehfuncinfo$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00003FF0                                         ; DATA XREF: __ehhandler$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z+14o
.xdata$x:00003FF1                 db    5
.xdata$x:00003FF2                 db  93h ; ô
.xdata$x:00003FF3                 db  19h
.xdata$x:00003FF4                 db    8
.xdata$x:00003FF5                 db    0
.xdata$x:00003FF6                 db    0
.xdata$x:00003FF7                 db    0
.xdata$x:00003FF8                 dd offset __unwindtable$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.xdata$x:00003FFC                 db    0
.xdata$x:00003FFD                 db    0
.xdata$x:00003FFE                 db    0
.xdata$x:00003FFF                 db    0
.xdata$x:00004000                 db    0
.xdata$x:00004001                 db    0
.xdata$x:00004002                 db    0
.xdata$x:00004003                 db    0
.xdata$x:00004004                 db    0
.xdata$x:00004005                 db    0
.xdata$x:00004006                 db    0
.xdata$x:00004007                 db    0
.xdata$x:00004008                 db    0
.xdata$x:00004009                 db    0
.xdata$x:0000400A                 db    0
.xdata$x:0000400B                 db    0
.xdata$x:0000400C                 db    0
.xdata$x:0000400D                 db    0
.xdata$x:0000400E                 db    0
.xdata$x:0000400F                 db    0
.xdata$x:00004010                 db    1
.xdata$x:00004011                 db    0
.xdata$x:00004012                 db    0
.xdata$x:00004013                 db    0
.xdata$x:00004014 __unwindtable$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00004014                                         ; DATA XREF: .xdata$x:00003FF8o
.xdata$x:00004015                 db 0FFh
.xdata$x:00004016                 db 0FFh
.xdata$x:00004017                 db 0FFh
.xdata$x:00004018                 dd offset __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0
.xdata$x:0000401C                 align 10h
.xdata$x:00004020                 dd offset __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1
.xdata$x:00004024                 db    1
.xdata$x:00004025                 db    0
.xdata$x:00004026                 db    0
.xdata$x:00004027                 db    0
.xdata$x:00004028                 dd offset __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$2
.xdata$x:0000402C                 db    1
.xdata$x:0000402D                 db    0
.xdata$x:0000402E                 db    0
.xdata$x:0000402F                 db    0
.xdata$x:00004030                 dd offset __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$3
.xdata$x:00004034                 db    1
.xdata$x:00004035                 db    0
.xdata$x:00004036                 db    0
.xdata$x:00004037                 db    0
.xdata$x:00004038                 dd offset __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$4
.xdata$x:0000403C                 db    4
.xdata$x:0000403D                 db    0
.xdata$x:0000403E                 db    0
.xdata$x:0000403F                 db    0
.xdata$x:00004040                 dd offset __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$5
.xdata$x:00004044                 db    5
.xdata$x:00004045                 db    0
.xdata$x:00004046                 db    0
.xdata$x:00004047                 db    0
.xdata$x:00004048                 dd offset __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$6
.xdata$x:0000404C                 db    5
.xdata$x:0000404D                 db    0
.xdata$x:0000404E                 db    0
.xdata$x:0000404F                 db    0
.xdata$x:00004050                 dd offset __unwindfunclet$?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$7
.xdata$x:00004054 __unwindtable$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z db 0FFh
.xdata$x:00004054                                         ; DATA XREF: .xdata$x:0000406Co
.xdata$x:00004055                 db 0FFh
.xdata$x:00004056                 db 0FFh
.xdata$x:00004057                 db 0FFh
.xdata$x:00004058                 dd offset __unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$0
.xdata$x:0000405C                 align 10h
.xdata$x:00004060                 dd offset __unwindfunclet$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z$1
.xdata$x:00004064 __ehfuncinfo$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z db  22h ; "
.xdata$x:00004064                                         ; DATA XREF: __ehhandler$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z+11o
.xdata$x:00004065                 db    5
.xdata$x:00004066                 db  93h ; ô
.xdata$x:00004067                 db  19h
.xdata$x:00004068                 db    2
.xdata$x:00004069                 db    0
.xdata$x:0000406A                 db    0
.xdata$x:0000406B                 db    0
.xdata$x:0000406C                 dd offset __unwindtable$?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z
.xdata$x:00004070                 db    0
.xdata$x:00004071                 db    0
.xdata$x:00004072                 db    0
.xdata$x:00004073                 db    0
.xdata$x:00004074                 db    0
.xdata$x:00004075                 db    0
.xdata$x:00004076                 db    0
.xdata$x:00004077                 db    0
.xdata$x:00004078                 db    0
.xdata$x:00004079                 db    0
.xdata$x:0000407A                 db    0
.xdata$x:0000407B                 db    0
.xdata$x:0000407C                 db    0
.xdata$x:0000407D                 db    0
.xdata$x:0000407E                 db    0
.xdata$x:0000407F                 db    0
.xdata$x:00004080                 db    0
.xdata$x:00004081                 db    0
.xdata$x:00004082                 db    0
.xdata$x:00004083                 db    0
.xdata$x:00004084                 db    1
.xdata$x:00004085                 db    0
.xdata$x:00004086                 db    0
.xdata$x:00004087                 db    0
.xdata$x:00004088 __catchsym$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$2 dd offset loc_3E+2
.xdata$x:00004088                                         ; DATA XREF: .xdata$x:000040B8o
.xdata$x:0000408C                 db    0
.xdata$x:0000408D                 db    0
.xdata$x:0000408E                 db    0
.xdata$x:0000408F                 db    0
.xdata$x:00004090                 db    0
.xdata$x:00004091                 db    0
.xdata$x:00004092                 db    0
.xdata$x:00004093                 db    0
.xdata$x:00004094                 dd offset __catch$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$0
.xdata$x:00004098 __unwindtable$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ db 0FFh
.xdata$x:00004098                                         ; DATA XREF: .xdata$x:000040C4o
.xdata$x:00004099                 db 0FFh
.xdata$x:0000409A                 db 0FFh
.xdata$x:0000409B                 db 0FFh
.xdata$x:0000409C                 db    0
.xdata$x:0000409D                 db    0
.xdata$x:0000409E                 db    0
.xdata$x:0000409F                 db    0
.xdata$x:000040A0                 db 0FFh
.xdata$x:000040A1                 db 0FFh
.xdata$x:000040A2                 db 0FFh
.xdata$x:000040A3                 db 0FFh
.xdata$x:000040A4                 db    0
.xdata$x:000040A5                 db    0
.xdata$x:000040A6                 db    0
.xdata$x:000040A7                 db    0
.xdata$x:000040A8 __tryblocktable$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ db    0
.xdata$x:000040A8                                         ; DATA XREF: .xdata$x:000040CCo
.xdata$x:000040A9                 db    0
.xdata$x:000040AA                 db    0
.xdata$x:000040AB                 db    0
.xdata$x:000040AC                 db    0
.xdata$x:000040AD                 db    0
.xdata$x:000040AE                 db    0
.xdata$x:000040AF                 db    0
.xdata$x:000040B0                 db    1
.xdata$x:000040B1                 db    0
.xdata$x:000040B2                 db    0
.xdata$x:000040B3                 db    0
.xdata$x:000040B4                 db    1
.xdata$x:000040B5                 db    0
.xdata$x:000040B6                 db    0
.xdata$x:000040B7                 db    0
.xdata$x:000040B8                 dd offset __catchsym$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ$2
.xdata$x:000040BC __ehfuncinfo$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ db  22h ; "
.xdata$x:000040BC                                         ; DATA XREF: __ehhandler$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ+11o
.xdata$x:000040BD                 db    5
.xdata$x:000040BE                 db  93h ; ô
.xdata$x:000040BF                 db  19h
.xdata$x:000040C0                 db    2
.xdata$x:000040C1                 db    0
.xdata$x:000040C2                 db    0
.xdata$x:000040C3                 db    0
.xdata$x:000040C4                 dd offset __unwindtable$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.xdata$x:000040C8                 db    1
.xdata$x:000040C9                 db    0
.xdata$x:000040CA                 db    0
.xdata$x:000040CB                 db    0
.xdata$x:000040CC                 dd offset __tryblocktable$?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.xdata$x:000040D0                 db    0
.xdata$x:000040D1                 db    0
.xdata$x:000040D2                 db    0
.xdata$x:000040D3                 db    0
.xdata$x:000040D4                 db    0
.xdata$x:000040D5                 db    0
.xdata$x:000040D6                 db    0
.xdata$x:000040D7                 db    0
.xdata$x:000040D8                 db    0
.xdata$x:000040D9                 db    0
.xdata$x:000040DA                 db    0
.xdata$x:000040DB                 db    0
.xdata$x:000040DC                 db    1
.xdata$x:000040DD                 db    0
.xdata$x:000040DE                 db    0
.xdata$x:000040DF                 db    0
.xdata$x:000040E0 __unwindtable$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000040E0                                         ; DATA XREF: .xdata$x:000040F0o
.xdata$x:000040E1                 db 0FFh
.xdata$x:000040E2                 db 0FFh
.xdata$x:000040E3                 db 0FFh
.xdata$x:000040E4                 dd offset __unwindfunclet$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z$0
.xdata$x:000040E8 __ehfuncinfo$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:000040E8                                         ; DATA XREF: __ehhandler$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z+11o
.xdata$x:000040E9                 db    5
.xdata$x:000040EA                 db  93h ; ô
.xdata$x:000040EB                 db  19h
.xdata$x:000040EC                 db    1
.xdata$x:000040ED                 db    0
.xdata$x:000040EE                 db    0
.xdata$x:000040EF                 db    0
.xdata$x:000040F0                 dd offset __unwindtable$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z
.xdata$x:000040F4                 db    0
.xdata$x:000040F5                 db    0
.xdata$x:000040F6                 db    0
.xdata$x:000040F7                 db    0
.xdata$x:000040F8                 db    0
.xdata$x:000040F9                 db    0
.xdata$x:000040FA                 db    0
.xdata$x:000040FB                 db    0
.xdata$x:000040FC                 db    0
.xdata$x:000040FD                 db    0
.xdata$x:000040FE                 db    0
.xdata$x:000040FF                 db    0
.xdata$x:00004100                 db    0
.xdata$x:00004101                 db    0
.xdata$x:00004102                 db    0
.xdata$x:00004103                 db    0
.xdata$x:00004104                 db    0
.xdata$x:00004105                 db    0
.xdata$x:00004106                 db    0
.xdata$x:00004107                 db    0
.xdata$x:00004108                 db    1
.xdata$x:00004109                 db    0
.xdata$x:0000410A                 db    0
.xdata$x:0000410B                 db    0
.xdata$x:0000410C __unwindtable$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z db 0FFh
.xdata$x:0000410C                                         ; DATA XREF: .xdata$x:00004124o
.xdata$x:0000410D                 db 0FFh
.xdata$x:0000410E                 db 0FFh
.xdata$x:0000410F                 db 0FFh
.xdata$x:00004110                 dd offset __unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$0
.xdata$x:00004114                 align 8
.xdata$x:00004118                 dd offset __unwindfunclet$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z$1
.xdata$x:0000411C __ehfuncinfo$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z db  22h ; "
.xdata$x:0000411C                                         ; DATA XREF: __ehhandler$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z+14o
.xdata$x:0000411D                 db    5
.xdata$x:0000411E                 db  93h ; ô
.xdata$x:0000411F                 db  19h
.xdata$x:00004120                 db    2
.xdata$x:00004121                 db    0
.xdata$x:00004122                 db    0
.xdata$x:00004123                 db    0
.xdata$x:00004124                 dd offset __unwindtable$?Init@CMixerMT@NCoderMixer2@@AAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@@Z
.xdata$x:00004128                 db    0
.xdata$x:00004129                 db    0
.xdata$x:0000412A                 db    0
.xdata$x:0000412B                 db    0
.xdata$x:0000412C                 db    0
.xdata$x:0000412D                 db    0
.xdata$x:0000412E                 db    0
.xdata$x:0000412F                 db    0
.xdata$x:00004130                 db    0
.xdata$x:00004131                 db    0
.xdata$x:00004132                 db    0
.xdata$x:00004133                 db    0
.xdata$x:00004134                 db    0
.xdata$x:00004135                 db    0
.xdata$x:00004136                 db    0
.xdata$x:00004137                 db    0
.xdata$x:00004138                 db    0
.xdata$x:00004139                 db    0
.xdata$x:0000413A                 db    0
.xdata$x:0000413B                 db    0
.xdata$x:0000413C                 db    1
.xdata$x:0000413D                 db    0
.xdata$x:0000413E                 db    0
.xdata$x:0000413F                 db    0
.xdata$x:0000413F _xdata$x        ends
.xdata$x:0000413F
.text:00004140 ; ===========================================================================
.text:00004140
.text:00004140 ; Segment type: Pure code
.text:00004140 ; Segment permissions: Read/Execute
.text:00004140 _text           segment para public 'CODE' use32
.text:00004140                 assume cs:_text
.text:00004140                 ;org 4140h
.text:00004140 ; COMDAT (pick any)
.text:00004140                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004140
.text:00004140 ; =============== S U B R O U T I N E =======================================
.text:00004140
.text:00004140 ; Attributes: bp-based frame
.text:00004140
.text:00004140 ; unsigned int __thiscall NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams(NCoderMixer2::CBindInfo *__hidden this)
.text:00004140                 public ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ
.text:00004140 ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ proc near
.text:00004140                                         ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+FAp
.text:00004140
.text:00004140 var_4           = dword ptr -4
.text:00004140
.text:00004140                 push    ebp
.text:00004141                 mov     ebp, esp
.text:00004143                 push    ecx
.text:00004144                 push    esi
.text:00004145                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000414C                 mov     [ebp+var_4], ecx
.text:0000414F                 mov     ecx, [ebp+var_4]
.text:00004152                 add     ecx, 0Ch
.text:00004155                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:0000415A                 mov     esi, eax
.text:0000415C                 mov     ecx, [ebp+var_4]
.text:0000415F                 add     ecx, 18h
.text:00004162                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00004167                 add     eax, esi
.text:00004169                 pop     esi
.text:0000416A                 add     esp, 4
.text:0000416D                 cmp     ebp, esp
.text:0000416F                 call    __RTC_CheckEsp
.text:00004174                 mov     esp, ebp
.text:00004176                 pop     ebp
.text:00004177                 retn
.text:00004177 ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ endp
.text:00004177
.text:00004177 _text           ends
.text:00004177
.text:00004178 ; ===========================================================================
.text:00004178
.text:00004178 ; Segment type: Pure code
.text:00004178 ; Segment permissions: Read/Execute
.text:00004178 _text           segment para public 'CODE' use32
.text:00004178                 assume cs:_text
.text:00004178                 ;org 4178h
.text:00004178 ; COMDAT (pick any)
.text:00004178                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004178
.text:00004178 ; =============== S U B R O U T I N E =======================================
.text:00004178
.text:00004178 ; Attributes: bp-based frame
.text:00004178
.text:00004178 ; _DWORD __thiscall NCoderMixer2::CBondsChecks::CBondsChecks(NCoderMixer2::CBondsChecks *__hidden this)
.text:00004178                 public ??0CBondsChecks@NCoderMixer2@@QAE@XZ
.text:00004178 ??0CBondsChecks@NCoderMixer2@@QAE@XZ proc near
.text:00004178                                         ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+10Bp
.text:00004178
.text:00004178 var_4           = dword ptr -4
.text:00004178
.text:00004178                 push    ebp
.text:00004179                 mov     ebp, esp
.text:0000417B                 push    ecx
.text:0000417C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004183                 mov     [ebp+var_4], ecx
.text:00004186                 mov     ecx, [ebp+var_4]
.text:00004189                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:0000418E                 mov     eax, [ebp+var_4]
.text:00004191                 add     esp, 4
.text:00004194                 cmp     ebp, esp
.text:00004196                 call    __RTC_CheckEsp
.text:0000419B                 mov     esp, ebp
.text:0000419D                 pop     ebp
.text:0000419E                 retn
.text:0000419E ??0CBondsChecks@NCoderMixer2@@QAE@XZ endp
.text:0000419E
.text:0000419E ; ---------------------------------------------------------------------------
.text:0000419F                 align 10h
.text:0000419F _text           ends
.text:0000419F
.text:000041A0 ; ===========================================================================
.text:000041A0
.text:000041A0 ; Segment type: Pure code
.text:000041A0 ; Segment permissions: Read/Execute
.text:000041A0 _text           segment para public 'CODE' use32
.text:000041A0                 assume cs:_text
.text:000041A0                 ;org 41A0h
.text:000041A0 ; COMDAT (pick any)
.text:000041A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041A0
.text:000041A0 ; =============== S U B R O U T I N E =======================================
.text:000041A0
.text:000041A0 ; Attributes: bp-based frame
.text:000041A0
.text:000041A0 ; _DWORD __thiscall NCoderMixer2::CBondsChecks::~CBondsChecks(NCoderMixer2::CBondsChecks *__hidden this)
.text:000041A0                 public ??1CBondsChecks@NCoderMixer2@@QAE@XZ
.text:000041A0 ??1CBondsChecks@NCoderMixer2@@QAE@XZ proc near
.text:000041A0                                         ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+132p
.text:000041A0                                         ; __unwindfunclet$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ$0+3j
.text:000041A0
.text:000041A0 var_4           = dword ptr -4
.text:000041A0
.text:000041A0                 push    ebp
.text:000041A1                 mov     ebp, esp
.text:000041A3                 push    ecx
.text:000041A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041AB                 mov     [ebp+var_4], ecx
.text:000041AE                 mov     ecx, [ebp+var_4]
.text:000041B1                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000041B6                 add     esp, 4
.text:000041B9                 cmp     ebp, esp
.text:000041BB                 call    __RTC_CheckEsp
.text:000041C0                 mov     esp, ebp
.text:000041C2                 pop     ebp
.text:000041C3                 retn
.text:000041C3 ??1CBondsChecks@NCoderMixer2@@QAE@XZ endp
.text:000041C3
.text:000041C3 _text           ends
.text:000041C3
.xdata$x:000041C4 ; ===========================================================================
.xdata$x:000041C4
.xdata$x:000041C4 ; Segment type: Pure data
.xdata$x:000041C4 ; Segment permissions: Read
.xdata$x:000041C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000041C4                 assume cs:_xdata$x
.xdata$x:000041C4                 ;org 41C4h
.xdata$x:000041C4 ; COMDAT (pick any)
.xdata$x:000041C4                 public __TI1H
.xdata$x:000041C4 __TI1H          db    0                 ; DATA XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+48o
.xdata$x:000041C4                                         ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+53o ...
.xdata$x:000041C5                 db    0
.xdata$x:000041C6                 db    0
.xdata$x:000041C7                 db    0
.xdata$x:000041C8                 db    0
.xdata$x:000041C9                 db    0
.xdata$x:000041CA                 db    0
.xdata$x:000041CB                 db    0
.xdata$x:000041CC                 db    0
.xdata$x:000041CD                 db    0
.xdata$x:000041CE                 db    0
.xdata$x:000041CF                 db    0
.xdata$x:000041D0                 dd offset __CTA1H
.xdata$x:000041D0 _xdata$x        ends
.xdata$x:000041D0
.xdata$x:000041D4 ; ===========================================================================
.xdata$x:000041D4
.xdata$x:000041D4 ; Segment type: Pure data
.xdata$x:000041D4 ; Segment permissions: Read
.xdata$x:000041D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000041D4                 assume cs:_xdata$x
.xdata$x:000041D4                 ;org 41D4h
.xdata$x:000041D4 ; COMDAT (pick any)
.xdata$x:000041D4                 public __CTA1H
.xdata$x:000041D4 __CTA1H         db    1                 ; DATA XREF: .xdata$x:000041D0o
.xdata$x:000041D5                 db    0
.xdata$x:000041D6                 db    0
.xdata$x:000041D7                 db    0
.xdata$x:000041D8                 dd offset __CT??_R0H@84
.xdata$x:000041D8 _xdata$x        ends
.xdata$x:000041D8
.xdata$x:000041DC ; ===========================================================================
.xdata$x:000041DC
.xdata$x:000041DC ; Segment type: Pure data
.xdata$x:000041DC ; Segment permissions: Read
.xdata$x:000041DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000041DC                 assume cs:_xdata$x
.xdata$x:000041DC                 ;org 41DCh
.xdata$x:000041DC ; COMDAT (pick any)
.xdata$x:000041DC                 public __CT??_R0H@84
.xdata$x:000041DC __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:000041D8o
.xdata$x:000041DD                 db    0
.xdata$x:000041DE                 db    0
.xdata$x:000041DF                 db    0
.xdata$x:000041E0                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:000041E4                 align 8
.xdata$x:000041E8                 db 0FFh
.xdata$x:000041E9                 db 0FFh
.xdata$x:000041EA                 db 0FFh
.xdata$x:000041EB                 db 0FFh
.xdata$x:000041EC                 db    0
.xdata$x:000041ED                 db    0
.xdata$x:000041EE                 db    0
.xdata$x:000041EF                 db    0
.xdata$x:000041F0                 db    4
.xdata$x:000041F1                 db    0
.xdata$x:000041F2                 db    0
.xdata$x:000041F3                 db    0
.xdata$x:000041F4                 db    0
.xdata$x:000041F5                 db    0
.xdata$x:000041F6                 db    0
.xdata$x:000041F7                 db    0
.xdata$x:000041F7 _xdata$x        ends
.xdata$x:000041F7
.data:000041F8 ; ===========================================================================
.data:000041F8
.data:000041F8 ; Segment type: Pure data
.data:000041F8 ; Segment permissions: Read/Write
.data:000041F8 _data           segment dword public 'DATA' use32
.data:000041F8                 assume cs:_data
.data:000041F8                 ;org 41F8h
.data:000041F8 ; COMDAT (pick any)
.data:000041F8                 public ??_R0H@8
.data:000041F8 ; int `RTTI Type Descriptor'
.data:000041F8 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:000041E0o
.data:000041F8                                         ; const type_info::`vftable'
.data:000041FC                 align 10h
.data:00004200                 db  2Eh ; .
.data:00004201                 db  48h ; H
.data:00004202                 db    0
.data:00004203                 align 4
.data:00004203 _data           ends
.data:00004203
.text:00004204 ; ===========================================================================
.text:00004204
.text:00004204 ; Segment type: Pure code
.text:00004204 ; Segment permissions: Read/Execute
.text:00004204 _text           segment para public 'CODE' use32
.text:00004204                 assume cs:_text
.text:00004204                 ;org 4204h
.text:00004204 ; COMDAT (pick any)
.text:00004204                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004204
.text:00004204 ; =============== S U B R O U T I N E =======================================
.text:00004204
.text:00004204 ; Attributes: bp-based frame
.text:00004204
.text:00004204 ; int __thiscall NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(NCoderMixer2::CBindInfo *this, unsigned int)
.text:00004204                 public ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z
.text:00004204 ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z proc near
.text:00004204                                         ; CODE XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+33p
.text:00004204                                         ; NCoderMixer2::CMixer::FindBond_for_Stream(bool,uint)+27p
.text:00004204
.text:00004204 var_8           = dword ptr -8
.text:00004204 var_4           = dword ptr -4
.text:00004204 arg_0           = dword ptr  8
.text:00004204
.text:00004204                 push    ebp
.text:00004205                 mov     ebp, esp
.text:00004207                 sub     esp, 8
.text:0000420A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004211                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004218                 mov     [ebp+var_4], ecx
.text:0000421B                 mov     [ebp+var_8], 0
.text:00004222                 jmp     short loc_422D
.text:00004224 ; ---------------------------------------------------------------------------
.text:00004224
.text:00004224 loc_4224:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint):loc_4259j
.text:00004224                 mov     eax, [ebp+var_8]
.text:00004227                 add     eax, 1
.text:0000422A                 mov     [ebp+var_8], eax
.text:0000422D
.text:0000422D loc_422D:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)+1Ej
.text:0000422D                 mov     ecx, [ebp+var_4]
.text:00004230                 add     ecx, 0Ch
.text:00004233                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00004238                 cmp     [ebp+var_8], eax
.text:0000423B                 jnb     short loc_425B
.text:0000423D                 mov     ecx, [ebp+var_8]
.text:00004240                 push    ecx
.text:00004241                 mov     ecx, [ebp+var_4]
.text:00004244                 add     ecx, 0Ch
.text:00004247                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:0000424C                 mov     edx, [eax+4]
.text:0000424F                 cmp     edx, [ebp+arg_0]
.text:00004252                 jnz     short loc_4259
.text:00004254                 mov     eax, [ebp+var_8]
.text:00004257                 jmp     short loc_425E
.text:00004259 ; ---------------------------------------------------------------------------
.text:00004259
.text:00004259 loc_4259:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)+4Ej
.text:00004259                 jmp     short loc_4224
.text:0000425B ; ---------------------------------------------------------------------------
.text:0000425B
.text:0000425B loc_425B:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)+37j
.text:0000425B                 or      eax, 0FFFFFFFFh
.text:0000425E
.text:0000425E loc_425E:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)+53j
.text:0000425E                 add     esp, 8
.text:00004261                 cmp     ebp, esp
.text:00004263                 call    __RTC_CheckEsp
.text:00004268                 mov     esp, ebp
.text:0000426A                 pop     ebp
.text:0000426B                 retn    4
.text:0000426B ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z endp
.text:0000426B
.text:0000426B ; ---------------------------------------------------------------------------
.text:0000426E                 align 10h
.text:0000426E _text           ends
.text:0000426E
.rdata:00004270 ; ===========================================================================
.rdata:00004270
.rdata:00004270 ; Segment type: Pure data
.rdata:00004270 ; Segment permissions: Read
.rdata:00004270 _rdata          segment dword public 'DATA' use32
.rdata:00004270                 assume cs:_rdata
.rdata:00004270                 ;org 4270h
.rdata:00004270 ; COMDAT (pick largest)
.rdata:00004270                 dd offset ??_R4CMixerST@NCoderMixer2@@6BCMixer@1@@ ; const NCoderMixer2::CMixerST::`RTTI Complete Object Locator'{for `NCoderMixer2::CMixer'}
.rdata:00004274                 public ??_7CMixerST@NCoderMixer2@@6BCMixer@1@@
.rdata:00004274 ; const NCoderMixer2::CMixerST::`vftable'{for `NCoderMixer2::CMixer'}
.rdata:00004274 ??_7CMixerST@NCoderMixer2@@6BCMixer@1@@ dd offset ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.rdata:00004274                                         ; DATA XREF: NCoderMixer2::CMixerST::CMixerST(bool)+63o
.rdata:00004274                                         ; NCoderMixer2::CMixerST::~CMixerST(void)+39o
.rdata:00004274                                         ; NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)
.rdata:00004278                 dd offset ?AddCoder@CMixerST@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z ; NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)
.rdata:0000427C                 dd offset ?GetCoder@CMixerST@NCoderMixer2@@UAEAAVCCoder@2@I@Z ; NCoderMixer2::CMixerST::GetCoder(uint)
.rdata:00004280                 dd offset ?SelectMainCoder@CMixerST@NCoderMixer2@@UAEX_N@Z ; NCoderMixer2::CMixerST::SelectMainCoder(bool)
.rdata:00004284                 dd offset ?ReInit@CMixerST@NCoderMixer2@@UAEXXZ ; NCoderMixer2::CMixerST::ReInit(void)
.rdata:00004288                 dd offset ?SetCoderInfo@CMixerST@NCoderMixer2@@UAEXIPB_KPBQB_K@Z ; NCoderMixer2::CMixerST::SetCoderInfo(uint,unsigned __int64 const *,unsigned __int64 const * const *)
.rdata:0000428C                 dd offset ?Code@CMixerST@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)
.rdata:00004290                 dd offset ?GetBondStreamSize@CMixerST@NCoderMixer2@@UBE_KI@Z ; NCoderMixer2::CMixerST::GetBondStreamSize(uint)
.rdata:00004290 _rdata          ends
.rdata:00004290
.rdata:00004294 ; ===========================================================================
.rdata:00004294
.rdata:00004294 ; Segment type: Pure data
.rdata:00004294 ; Segment permissions: Read
.rdata:00004294 _rdata          segment dword public 'DATA' use32
.rdata:00004294                 assume cs:_rdata
.rdata:00004294                 ;org 4294h
.rdata:00004294 ; COMDAT (pick largest)
.rdata:00004294                 dd offset ??_R4CMixerST@NCoderMixer2@@6BIUnknown@@@ ; const NCoderMixer2::CMixerST::`RTTI Complete Object Locator'{for `IUnknown'}
.rdata:00004298                 public ??_7CMixerST@NCoderMixer2@@6BIUnknown@@@
.rdata:00004298 ; const NCoderMixer2::CMixerST::`vftable'{for `IUnknown'}
.rdata:00004298 ??_7CMixerST@NCoderMixer2@@6BIUnknown@@@ dd offset ?QueryInterface@CMixerST@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004298                                         ; DATA XREF: NCoderMixer2::CMixerST::CMixerST(bool)+5Ao
.rdata:00004298                                         ; NCoderMixer2::CMixerST::~CMixerST(void)+30o
.rdata:00004298                                         ; NCoderMixer2::CMixerST::QueryInterface(_GUID const &,void * *)
.rdata:0000429C                 dd offset ?AddRef@CMixerST@NCoderMixer2@@UAGKXZ ; NCoderMixer2::CMixerST::AddRef(void)
.rdata:000042A0                 dd offset ?Release@CMixerST@NCoderMixer2@@UAGKXZ ; NCoderMixer2::CMixerST::Release(void)
.rdata:000042A0 _rdata          ends
.rdata:000042A0
.rdata$r:000042A4 ; ===========================================================================
.rdata$r:000042A4
.rdata$r:000042A4 ; Segment type: Pure data
.rdata$r:000042A4 ; Segment permissions: Read
.rdata$r:000042A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000042A4                 assume cs:_rdata$r
.rdata$r:000042A4                 ;org 42A4h
.rdata$r:000042A4 ; COMDAT (pick any)
.rdata$r:000042A4                 public ??_R4CMixerST@NCoderMixer2@@6BIUnknown@@@
.rdata$r:000042A4 ; const NCoderMixer2::CMixerST::`RTTI Complete Object Locator'{for `IUnknown'}
.rdata$r:000042A4 ??_R4CMixerST@NCoderMixer2@@6BIUnknown@@@ db    0
.rdata$r:000042A4                                         ; DATA XREF: .rdata:00004294o
.rdata$r:000042A5                 db    0
.rdata$r:000042A6                 db    0
.rdata$r:000042A7                 db    0
.rdata$r:000042A8                 db    0
.rdata$r:000042A9                 db    0
.rdata$r:000042AA                 db    0
.rdata$r:000042AB                 db    0
.rdata$r:000042AC                 db    0
.rdata$r:000042AD                 db    0
.rdata$r:000042AE                 db    0
.rdata$r:000042AF                 db    0
.rdata$r:000042B0                 dd offset ??_R0?AVCMixerST@NCoderMixer2@@@8 ; NCoderMixer2::CMixerST `RTTI Type Descriptor'
.rdata$r:000042B4                 dd offset ??_R3CMixerST@NCoderMixer2@@8 ; NCoderMixer2::CMixerST::`RTTI Class Hierarchy Descriptor'
.rdata$r:000042B4 _rdata$r        ends
.rdata$r:000042B4
.data:000042B8 ; ===========================================================================
.data:000042B8
.data:000042B8 ; Segment type: Pure data
.data:000042B8 ; Segment permissions: Read/Write
.data:000042B8 _data           segment dword public 'DATA' use32
.data:000042B8                 assume cs:_data
.data:000042B8                 ;org 42B8h
.data:000042B8 ; COMDAT (pick any)
.data:000042B8                 public ??_R0?AVCMixerST@NCoderMixer2@@@8
.data:000042B8 ; class NCoderMixer2::CMixerST `RTTI Type Descriptor'
.data:000042B8 ??_R0?AVCMixerST@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:000042B8                                         ; DATA XREF: .rdata$r:000042B0o
.data:000042B8                                         ; .rdata$r:NCoderMixer2::CMixerST::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000042B8                                         ; const type_info::`vftable'
.data:000042BC                 align 10h
.data:000042C0 a_?avcmixerst@n db '.?AVCMixerST@NCoderMixer2@@',0
.data:000042C0 _data           ends
.data:000042C0
.rdata$r:000042DC ; ===========================================================================
.rdata$r:000042DC
.rdata$r:000042DC ; Segment type: Pure data
.rdata$r:000042DC ; Segment permissions: Read
.rdata$r:000042DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000042DC                 assume cs:_rdata$r
.rdata$r:000042DC                 ;org 42DCh
.rdata$r:000042DC ; COMDAT (pick any)
.rdata$r:000042DC                 public ??_R3CMixerST@NCoderMixer2@@8
.rdata$r:000042DC ; NCoderMixer2::CMixerST::`RTTI Class Hierarchy Descriptor'
.rdata$r:000042DC ??_R3CMixerST@NCoderMixer2@@8 db    0   ; DATA XREF: .rdata$r:000042B4o
.rdata$r:000042DC                                         ; .rdata$r:00004318o ...
.rdata$r:000042DD                 db    0
.rdata$r:000042DE                 db    0
.rdata$r:000042DF                 db    0
.rdata$r:000042E0                 db    1
.rdata$r:000042E1                 db    0
.rdata$r:000042E2                 db    0
.rdata$r:000042E3                 db    0
.rdata$r:000042E4                 db    4
.rdata$r:000042E5                 db    0
.rdata$r:000042E6                 db    0
.rdata$r:000042E7                 db    0
.rdata$r:000042E8                 dd offset ??_R2CMixerST@NCoderMixer2@@8 ; NCoderMixer2::CMixerST::`RTTI Base Class Array'
.rdata$r:000042E8 _rdata$r        ends
.rdata$r:000042E8
.rdata$r:000042EC ; ===========================================================================
.rdata$r:000042EC
.rdata$r:000042EC ; Segment type: Pure data
.rdata$r:000042EC ; Segment permissions: Read
.rdata$r:000042EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000042EC                 assume cs:_rdata$r
.rdata$r:000042EC                 ;org 42ECh
.rdata$r:000042EC ; COMDAT (pick any)
.rdata$r:000042EC                 public ??_R2CMixerST@NCoderMixer2@@8
.rdata$r:000042EC ; NCoderMixer2::CMixerST::`RTTI Base Class Array'
.rdata$r:000042EC ??_R2CMixerST@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CMixerST@NCoderMixer2@@8
.rdata$r:000042EC                                         ; DATA XREF: .rdata$r:000042E8o
.rdata$r:000042EC                                         ; NCoderMixer2::CMixerST::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000042F0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000042F4                 dd offset ??_R13?0A@EA@CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000042F8                 dd offset ??_R1GI@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'
.rdata$r:000042FC                 db    0
.rdata$r:000042FD                 align 10h
.rdata$r:000042FD _rdata$r        ends
.rdata$r:000042FD
.rdata$r:00004300 ; ===========================================================================
.rdata$r:00004300
.rdata$r:00004300 ; Segment type: Pure data
.rdata$r:00004300 ; Segment permissions: Read
.rdata$r:00004300 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004300                 assume cs:_rdata$r
.rdata$r:00004300                 ;org 4300h
.rdata$r:00004300 ; COMDAT (pick any)
.rdata$r:00004300                 public ??_R1A@?0A@EA@CMixerST@NCoderMixer2@@8
.rdata$r:00004300 ; NCoderMixer2::CMixerST::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004300 ??_R1A@?0A@EA@CMixerST@NCoderMixer2@@8 dd offset ??_R0?AVCMixerST@NCoderMixer2@@@8
.rdata$r:00004300                                         ; DATA XREF: .rdata$r:NCoderMixer2::CMixerST::`RTTI Base Class Array'o
.rdata$r:00004300                                         ; NCoderMixer2::CMixerST `RTTI Type Descriptor'
.rdata$r:00004304                 db    3
.rdata$r:00004305                 db    0
.rdata$r:00004306                 db    0
.rdata$r:00004307                 db    0
.rdata$r:00004308                 db    0
.rdata$r:00004309                 db    0
.rdata$r:0000430A                 db    0
.rdata$r:0000430B                 db    0
.rdata$r:0000430C                 db 0FFh
.rdata$r:0000430D                 db 0FFh
.rdata$r:0000430E                 db 0FFh
.rdata$r:0000430F                 db 0FFh
.rdata$r:00004310                 db    0
.rdata$r:00004311                 db    0
.rdata$r:00004312                 db    0
.rdata$r:00004313                 db    0
.rdata$r:00004314                 db  40h ; @
.rdata$r:00004315                 db    0
.rdata$r:00004316                 db    0
.rdata$r:00004317                 db    0
.rdata$r:00004318                 dd offset ??_R3CMixerST@NCoderMixer2@@8 ; NCoderMixer2::CMixerST::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004318 _rdata$r        ends
.rdata$r:00004318
.rdata$r:0000431C ; ===========================================================================
.rdata$r:0000431C
.rdata$r:0000431C ; Segment type: Pure data
.rdata$r:0000431C ; Segment permissions: Read
.rdata$r:0000431C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000431C                 assume cs:_rdata$r
.rdata$r:0000431C                 ;org 431Ch
.rdata$r:0000431C ; COMDAT (pick any)
.rdata$r:0000431C                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000431C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000431C ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000431C                                         ; DATA XREF: .rdata$r:000042F0o
.rdata$r:0000431C                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:0000431C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00004320                 db    0
.rdata$r:00004321                 db    0
.rdata$r:00004322                 db    0
.rdata$r:00004323                 db    0
.rdata$r:00004324                 db    0
.rdata$r:00004325                 db    0
.rdata$r:00004326                 db    0
.rdata$r:00004327                 db    0
.rdata$r:00004328                 db 0FFh
.rdata$r:00004329                 db 0FFh
.rdata$r:0000432A                 db 0FFh
.rdata$r:0000432B                 db 0FFh
.rdata$r:0000432C                 db    0
.rdata$r:0000432D                 db    0
.rdata$r:0000432E                 db    0
.rdata$r:0000432F                 db    0
.rdata$r:00004330                 db  40h ; @
.rdata$r:00004331                 db    0
.rdata$r:00004332                 db    0
.rdata$r:00004333                 db    0
.rdata$r:00004334                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004334 _rdata$r        ends
.rdata$r:00004334
.data:00004338 ; ===========================================================================
.data:00004338
.data:00004338 ; Segment type: Pure data
.data:00004338 ; Segment permissions: Read/Write
.data:00004338 _data           segment dword public 'DATA' use32
.data:00004338                 assume cs:_data
.data:00004338                 ;org 4338h
.data:00004338 ; COMDAT (pick any)
.data:00004338                 public ??_R0?AUIUnknown@@@8
.data:00004338 ; struct IUnknown `RTTI Type Descriptor'
.data:00004338 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00004338                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004338                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00004338                                         ; const type_info::`vftable'
.data:0000433C                 align 10h
.data:00004340 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:0000434F                 align 10h
.data:0000434F _data           ends
.data:0000434F
.rdata$r:00004350 ; ===========================================================================
.rdata$r:00004350
.rdata$r:00004350 ; Segment type: Pure data
.rdata$r:00004350 ; Segment permissions: Read
.rdata$r:00004350 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004350                 assume cs:_rdata$r
.rdata$r:00004350                 ;org 4350h
.rdata$r:00004350 ; COMDAT (pick any)
.rdata$r:00004350                 public ??_R3IUnknown@@8
.rdata$r:00004350 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004350 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00004334o
.rdata$r:00004350                                         ; .rdata$r:00005264o ...
.rdata$r:00004351                 db    0
.rdata$r:00004352                 db    0
.rdata$r:00004353                 db    0
.rdata$r:00004354                 db    0
.rdata$r:00004355                 db    0
.rdata$r:00004356                 db    0
.rdata$r:00004357                 db    0
.rdata$r:00004358                 db    1
.rdata$r:00004359                 db    0
.rdata$r:0000435A                 db    0
.rdata$r:0000435B                 db    0
.rdata$r:0000435C                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000435C _rdata$r        ends
.rdata$r:0000435C
.rdata$r:00004360 ; ===========================================================================
.rdata$r:00004360
.rdata$r:00004360 ; Segment type: Pure data
.rdata$r:00004360 ; Segment permissions: Read
.rdata$r:00004360 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004360                 assume cs:_rdata$r
.rdata$r:00004360                 ;org 4360h
.rdata$r:00004360 ; COMDAT (pick any)
.rdata$r:00004360                 public ??_R2IUnknown@@8
.rdata$r:00004360 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00004360 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00004360                                         ; DATA XREF: .rdata$r:0000435Co
.rdata$r:00004360                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004364                 db    0
.rdata$r:00004365                 align 4
.rdata$r:00004365 _rdata$r        ends
.rdata$r:00004365
.rdata$r:00004368 ; ===========================================================================
.rdata$r:00004368
.rdata$r:00004368 ; Segment type: Pure data
.rdata$r:00004368 ; Segment permissions: Read
.rdata$r:00004368 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004368                 assume cs:_rdata$r
.rdata$r:00004368                 ;org 4368h
.rdata$r:00004368 ; COMDAT (pick any)
.rdata$r:00004368                 public ??_R13?0A@EA@CMixer@NCoderMixer2@@8
.rdata$r:00004368 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00004368 ??_R13?0A@EA@CMixer@NCoderMixer2@@8 dd offset ??_R0?AVCMixer@NCoderMixer2@@@8
.rdata$r:00004368                                         ; DATA XREF: .rdata$r:000042F4o
.rdata$r:00004368                                         ; NCoderMixer2::CMixer `RTTI Type Descriptor'
.rdata$r:0000436C                 align 10h
.rdata$r:00004370                 db    4
.rdata$r:00004371                 db    0
.rdata$r:00004372                 db    0
.rdata$r:00004373                 db    0
.rdata$r:00004374                 db 0FFh
.rdata$r:00004375                 db 0FFh
.rdata$r:00004376                 db 0FFh
.rdata$r:00004377                 db 0FFh
.rdata$r:00004378                 db    0
.rdata$r:00004379                 db    0
.rdata$r:0000437A                 db    0
.rdata$r:0000437B                 db    0
.rdata$r:0000437C                 db  40h ; @
.rdata$r:0000437D                 db    0
.rdata$r:0000437E                 db    0
.rdata$r:0000437F                 db    0
.rdata$r:00004380                 dd offset ??_R3CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004380 _rdata$r        ends
.rdata$r:00004380
.data:00004384 ; ===========================================================================
.data:00004384
.data:00004384 ; Segment type: Pure data
.data:00004384 ; Segment permissions: Read/Write
.data:00004384 _data           segment dword public 'DATA' use32
.data:00004384                 assume cs:_data
.data:00004384                 ;org 4384h
.data:00004384 ; COMDAT (pick any)
.data:00004384                 public ??_R0?AVCMixer@NCoderMixer2@@@8
.data:00004384 ; class NCoderMixer2::CMixer `RTTI Type Descriptor'
.data:00004384 ??_R0?AVCMixer@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:00004384                                         ; DATA XREF: .rdata$r:NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00004384                                         ; .rdata$r:NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00004384                                         ; const type_info::`vftable'
.data:00004388                 db    0
.data:00004389                 db    0
.data:0000438A                 db    0
.data:0000438B                 db    0
.data:0000438C                 db  2Eh ; .
.data:0000438D                 db  3Fh ; ?
.data:0000438E                 db  41h ; A
.data:0000438F                 db  56h ; V
.data:00004390                 db  43h ; C
.data:00004391                 db  4Dh ; M
.data:00004392                 db  69h ; i
.data:00004393                 db  78h ; x
.data:00004394                 db  65h ; e
.data:00004395                 db  72h ; r
.data:00004396                 db  40h ; @
.data:00004397                 db  4Eh ; N
.data:00004398                 db  43h ; C
.data:00004399                 db  6Fh ; o
.data:0000439A                 db  64h ; d
.data:0000439B                 db  65h ; e
.data:0000439C                 db  72h ; r
.data:0000439D                 db  4Dh ; M
.data:0000439E                 db  69h ; i
.data:0000439F                 db  78h ; x
.data:000043A0                 db  65h ; e
.data:000043A1                 db  72h ; r
.data:000043A2                 db  32h ; 2
.data:000043A3                 db  40h ; @
.data:000043A4                 db  40h ; @
.data:000043A5                 db    0
.data:000043A6                 align 4
.data:000043A6 _data           ends
.data:000043A6
.rdata$r:000043A8 ; ===========================================================================
.rdata$r:000043A8
.rdata$r:000043A8 ; Segment type: Pure data
.rdata$r:000043A8 ; Segment permissions: Read
.rdata$r:000043A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000043A8                 assume cs:_rdata$r
.rdata$r:000043A8                 ;org 43A8h
.rdata$r:000043A8 ; COMDAT (pick any)
.rdata$r:000043A8                 public ??_R3CMixer@NCoderMixer2@@8
.rdata$r:000043A8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:000043A8 ??_R3CMixer@NCoderMixer2@@8 db    0     ; DATA XREF: .rdata$r:00004380o
.rdata$r:000043A8                                         ; .rdata$r:000043D8o ...
.rdata$r:000043A9                 db    0
.rdata$r:000043AA                 db    0
.rdata$r:000043AB                 db    0
.rdata$r:000043AC                 db    0
.rdata$r:000043AD                 db    0
.rdata$r:000043AE                 db    0
.rdata$r:000043AF                 db    0
.rdata$r:000043B0                 db    1
.rdata$r:000043B1                 db    0
.rdata$r:000043B2                 db    0
.rdata$r:000043B3                 db    0
.rdata$r:000043B4                 dd offset ??_R2CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Array'
.rdata$r:000043B4 _rdata$r        ends
.rdata$r:000043B4
.rdata$r:000043B8 ; ===========================================================================
.rdata$r:000043B8
.rdata$r:000043B8 ; Segment type: Pure data
.rdata$r:000043B8 ; Segment permissions: Read
.rdata$r:000043B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000043B8                 assume cs:_rdata$r
.rdata$r:000043B8                 ;org 43B8h
.rdata$r:000043B8 ; COMDAT (pick any)
.rdata$r:000043B8                 public ??_R2CMixer@NCoderMixer2@@8
.rdata$r:000043B8 ; NCoderMixer2::CMixer::`RTTI Base Class Array'
.rdata$r:000043B8 ??_R2CMixer@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8
.rdata$r:000043B8                                         ; DATA XREF: .rdata$r:000043B4o
.rdata$r:000043B8                                         ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000043BC                 db    0
.rdata$r:000043BD                 align 10h
.rdata$r:000043BD _rdata$r        ends
.rdata$r:000043BD
.rdata$r:000043C0 ; ===========================================================================
.rdata$r:000043C0
.rdata$r:000043C0 ; Segment type: Pure data
.rdata$r:000043C0 ; Segment permissions: Read
.rdata$r:000043C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000043C0                 assume cs:_rdata$r
.rdata$r:000043C0                 ;org 43C0h
.rdata$r:000043C0 ; COMDAT (pick any)
.rdata$r:000043C0                 public ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8
.rdata$r:000043C0 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000043C0 ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8 dd offset ??_R0?AVCMixer@NCoderMixer2@@@8
.rdata$r:000043C0                                         ; DATA XREF: .rdata$r:NCoderMixer2::CMixer::`RTTI Base Class Array'o
.rdata$r:000043C0                                         ; NCoderMixer2::CMixer `RTTI Type Descriptor'
.rdata$r:000043C4                 db    0
.rdata$r:000043C5                 db    0
.rdata$r:000043C6                 db    0
.rdata$r:000043C7                 db    0
.rdata$r:000043C8                 db    0
.rdata$r:000043C9                 db    0
.rdata$r:000043CA                 db    0
.rdata$r:000043CB                 db    0
.rdata$r:000043CC                 db 0FFh
.rdata$r:000043CD                 db 0FFh
.rdata$r:000043CE                 db 0FFh
.rdata$r:000043CF                 db 0FFh
.rdata$r:000043D0                 db    0
.rdata$r:000043D1                 db    0
.rdata$r:000043D2                 db    0
.rdata$r:000043D3                 db    0
.rdata$r:000043D4                 db  40h ; @
.rdata$r:000043D5                 db    0
.rdata$r:000043D6                 db    0
.rdata$r:000043D7                 db    0
.rdata$r:000043D8                 dd offset ??_R3CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:000043D8 _rdata$r        ends
.rdata$r:000043D8
.rdata$r:000043DC ; ===========================================================================
.rdata$r:000043DC
.rdata$r:000043DC ; Segment type: Pure data
.rdata$r:000043DC ; Segment permissions: Read
.rdata$r:000043DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000043DC                 assume cs:_rdata$r
.rdata$r:000043DC                 ;org 43DCh
.rdata$r:000043DC ; COMDAT (pick any)
.rdata$r:000043DC                 public ??_R1GI@?0A@EA@CMyUnknownImp@@8
.rdata$r:000043DC ; CMyUnknownImp::`RTTI Base Class Descriptor at (104, -1, 0, 64)'
.rdata$r:000043DC ??_R1GI@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000043DC                                         ; DATA XREF: .rdata$r:000042F8o
.rdata$r:000043DC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000043E0                 db    0
.rdata$r:000043E1                 db    0
.rdata$r:000043E2                 db    0
.rdata$r:000043E3                 db    0
.rdata$r:000043E4                 db  68h ; h
.rdata$r:000043E5                 db    0
.rdata$r:000043E6                 db    0
.rdata$r:000043E7                 db    0
.rdata$r:000043E8                 db 0FFh
.rdata$r:000043E9                 db 0FFh
.rdata$r:000043EA                 db 0FFh
.rdata$r:000043EB                 db 0FFh
.rdata$r:000043EC                 db    0
.rdata$r:000043ED                 db    0
.rdata$r:000043EE                 db    0
.rdata$r:000043EF                 db    0
.rdata$r:000043F0                 db  40h ; @
.rdata$r:000043F1                 db    0
.rdata$r:000043F2                 db    0
.rdata$r:000043F3                 db    0
.rdata$r:000043F4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000043F4 _rdata$r        ends
.rdata$r:000043F4
.data:000043F8 ; ===========================================================================
.data:000043F8
.data:000043F8 ; Segment type: Pure data
.data:000043F8 ; Segment permissions: Read/Write
.data:000043F8 _data           segment dword public 'DATA' use32
.data:000043F8                 assume cs:_data
.data:000043F8                 ;org 43F8h
.data:000043F8 ; COMDAT (pick any)
.data:000043F8                 public ??_R0?AVCMyUnknownImp@@@8
.data:000043F8 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000043F8 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000043F8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'o
.data:000043F8                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000043F8                                         ; const type_info::`vftable'
.data:000043FC                 align 10h
.data:00004400 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00004400 _data           ends
.data:00004400
.rdata$r:00004414 ; ===========================================================================
.rdata$r:00004414
.rdata$r:00004414 ; Segment type: Pure data
.rdata$r:00004414 ; Segment permissions: Read
.rdata$r:00004414 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004414                 assume cs:_rdata$r
.rdata$r:00004414                 ;org 4414h
.rdata$r:00004414 ; COMDAT (pick any)
.rdata$r:00004414                 public ??_R3CMyUnknownImp@@8
.rdata$r:00004414 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004414 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000043F4o
.rdata$r:00004414                                         ; .rdata$r:00004444o ...
.rdata$r:00004415                 db    0
.rdata$r:00004416                 db    0
.rdata$r:00004417                 db    0
.rdata$r:00004418                 db    0
.rdata$r:00004419                 db    0
.rdata$r:0000441A                 db    0
.rdata$r:0000441B                 db    0
.rdata$r:0000441C                 db    1
.rdata$r:0000441D                 db    0
.rdata$r:0000441E                 db    0
.rdata$r:0000441F                 db    0
.rdata$r:00004420                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00004420 _rdata$r        ends
.rdata$r:00004420
.rdata$r:00004424 ; ===========================================================================
.rdata$r:00004424
.rdata$r:00004424 ; Segment type: Pure data
.rdata$r:00004424 ; Segment permissions: Read
.rdata$r:00004424 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004424                 assume cs:_rdata$r
.rdata$r:00004424                 ;org 4424h
.rdata$r:00004424 ; COMDAT (pick any)
.rdata$r:00004424                 public ??_R2CMyUnknownImp@@8
.rdata$r:00004424 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00004424 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00004424                                         ; DATA XREF: .rdata$r:00004420o
.rdata$r:00004424                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004428                 db    0
.rdata$r:00004429                 align 4
.rdata$r:00004429 _rdata$r        ends
.rdata$r:00004429
.rdata$r:0000442C ; ===========================================================================
.rdata$r:0000442C
.rdata$r:0000442C ; Segment type: Pure data
.rdata$r:0000442C ; Segment permissions: Read
.rdata$r:0000442C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000442C                 assume cs:_rdata$r
.rdata$r:0000442C                 ;org 442Ch
.rdata$r:0000442C ; COMDAT (pick any)
.rdata$r:0000442C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000442C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000442C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000442C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:0000442C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00004430                 db    0
.rdata$r:00004431                 db    0
.rdata$r:00004432                 db    0
.rdata$r:00004433                 db    0
.rdata$r:00004434                 db    0
.rdata$r:00004435                 db    0
.rdata$r:00004436                 db    0
.rdata$r:00004437                 db    0
.rdata$r:00004438                 db 0FFh
.rdata$r:00004439                 db 0FFh
.rdata$r:0000443A                 db 0FFh
.rdata$r:0000443B                 db 0FFh
.rdata$r:0000443C                 db    0
.rdata$r:0000443D                 db    0
.rdata$r:0000443E                 db    0
.rdata$r:0000443F                 db    0
.rdata$r:00004440                 db  40h ; @
.rdata$r:00004441                 db    0
.rdata$r:00004442                 db    0
.rdata$r:00004443                 db    0
.rdata$r:00004444                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004444 _rdata$r        ends
.rdata$r:00004444
.rdata$r:00004448 ; ===========================================================================
.rdata$r:00004448
.rdata$r:00004448 ; Segment type: Pure data
.rdata$r:00004448 ; Segment permissions: Read
.rdata$r:00004448 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004448                 assume cs:_rdata$r
.rdata$r:00004448                 ;org 4448h
.rdata$r:00004448 ; COMDAT (pick any)
.rdata$r:00004448                 public ??_R4CMixerST@NCoderMixer2@@6BCMixer@1@@
.rdata$r:00004448 ; const NCoderMixer2::CMixerST::`RTTI Complete Object Locator'{for `NCoderMixer2::CMixer'}
.rdata$r:00004448 ??_R4CMixerST@NCoderMixer2@@6BCMixer@1@@ db    0
.rdata$r:00004448                                         ; DATA XREF: .rdata:00004270o
.rdata$r:00004449                 db    0
.rdata$r:0000444A                 db    0
.rdata$r:0000444B                 db    0
.rdata$r:0000444C                 db    4
.rdata$r:0000444D                 db    0
.rdata$r:0000444E                 db    0
.rdata$r:0000444F                 db    0
.rdata$r:00004450                 db    0
.rdata$r:00004451                 db    0
.rdata$r:00004452                 db    0
.rdata$r:00004453                 db    0
.rdata$r:00004454                 dd offset ??_R0?AVCMixerST@NCoderMixer2@@@8 ; NCoderMixer2::CMixerST `RTTI Type Descriptor'
.rdata$r:00004458                 dd offset ??_R3CMixerST@NCoderMixer2@@8 ; NCoderMixer2::CMixerST::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004458 _rdata$r        ends
.rdata$r:00004458
.text:0000445C ; ===========================================================================
.text:0000445C
.text:0000445C ; Segment type: Pure code
.text:0000445C ; Segment permissions: Read/Execute
.text:0000445C _text           segment para public 'CODE' use32
.text:0000445C                 assume cs:_text
.text:0000445C                 ;org 445Ch
.text:0000445C ; COMDAT (pick any)
.text:0000445C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000445C
.text:0000445C ; =============== S U B R O U T I N E =======================================
.text:0000445C
.text:0000445C ; Attributes: bp-based frame
.text:0000445C
.text:0000445C ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:0000445C                 public ??0CMyUnknownImp@@QAE@XZ
.text:0000445C ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCoderMixer2::CMixerST::CMixerST(bool)+52p
.text:0000445C                                         ; CSequentialInStreamCalcSize::CSequentialInStreamCalcSize(void)+1Cp ...
.text:0000445C
.text:0000445C var_4           = dword ptr -4
.text:0000445C
.text:0000445C                 push    ebp
.text:0000445D                 mov     ebp, esp
.text:0000445F                 push    ecx
.text:00004460                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004467                 mov     [ebp+var_4], ecx
.text:0000446A                 mov     eax, [ebp+var_4]
.text:0000446D                 mov     dword ptr [eax], 0
.text:00004473                 mov     eax, [ebp+var_4]
.text:00004476                 mov     esp, ebp
.text:00004478                 pop     ebp
.text:00004479                 retn
.text:00004479 ??0CMyUnknownImp@@QAE@XZ endp
.text:00004479
.text:00004479 ; ---------------------------------------------------------------------------
.text:0000447A                 align 4
.text:0000447A _text           ends
.text:0000447A
.text:0000447C ; ===========================================================================
.text:0000447C
.text:0000447C ; Segment type: Pure code
.text:0000447C ; Segment permissions: Read/Execute
.text:0000447C _text           segment para public 'CODE' use32
.text:0000447C                 assume cs:_text
.text:0000447C                 ;org 447Ch
.text:0000447C ; COMDAT (pick any)
.text:0000447C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000447C
.text:0000447C ; =============== S U B R O U T I N E =======================================
.text:0000447C
.text:0000447C ; Attributes: bp-based frame
.text:0000447C
.text:0000447C ; _DWORD __thiscall NCoderMixer2::CMixer::CMixer(NCoderMixer2::CMixer *this, bool)
.text:0000447C                 public ??0CMixer@NCoderMixer2@@QAE@_N@Z
.text:0000447C ??0CMixer@NCoderMixer2@@QAE@_N@Z proc near
.text:0000447C                                         ; CODE XREF: NCoderMixer2::CMixerST::CMixerST(bool)+40p
.text:0000447C
.text:0000447C var_10          = dword ptr -10h
.text:0000447C var_C           = dword ptr -0Ch
.text:0000447C var_4           = dword ptr -4
.text:0000447C arg_0           = byte ptr  8
.text:0000447C
.text:0000447C                 push    ebp
.text:0000447D                 mov     ebp, esp
.text:0000447F                 push    0FFFFFFFFh
.text:00004481                 push    offset __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z
.text:00004486                 mov     eax, large fs:0
.text:0000448C                 push    eax
.text:0000448D                 push    ecx
.text:0000448E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004495                 mov     eax, dword ptr ds:___security_cookie
.text:0000449A                 xor     eax, ebp
.text:0000449C                 push    eax
.text:0000449D                 lea     eax, [ebp+var_C]
.text:000044A0                 mov     large fs:0, eax
.text:000044A6                 mov     [ebp+var_10], ecx
.text:000044A9                 mov     eax, [ebp+var_10]
.text:000044AC                 mov     dword ptr [eax], offset ??_7CMixer@NCoderMixer2@@6B@ ; const NCoderMixer2::CMixer::`vftable'
.text:000044B2                 mov     ecx, [ebp+var_10]
.text:000044B5                 add     ecx, 4          ; this
.text:000044B8                 call    ??0CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::CBindInfo(void)
.text:000044BD                 mov     [ebp+var_4], 0
.text:000044C4                 mov     ecx, [ebp+var_10]
.text:000044C7                 add     ecx, 44h ; 'D'
.text:000044CA                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:000044CF                 mov     byte ptr [ebp+var_4], 1
.text:000044D3                 mov     ecx, [ebp+var_10]
.text:000044D6                 add     ecx, 50h ; 'P'
.text:000044D9                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:000044DE                 mov     ecx, [ebp+var_10]
.text:000044E1                 mov     dl, [ebp+arg_0]
.text:000044E4                 mov     [ecx+5Ch], dl
.text:000044E7                 mov     eax, [ebp+var_10]
.text:000044EA                 mov     dword ptr [eax+60h], 0
.text:000044F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000044F8                 mov     eax, [ebp+var_10]
.text:000044FB                 mov     ecx, [ebp+var_C]
.text:000044FE                 mov     large fs:0, ecx
.text:00004505                 pop     ecx
.text:00004506                 add     esp, 10h
.text:00004509                 cmp     ebp, esp
.text:0000450B                 call    __RTC_CheckEsp
.text:00004510                 mov     esp, ebp
.text:00004512                 pop     ebp
.text:00004513                 retn    4
.text:00004513 ??0CMixer@NCoderMixer2@@QAE@_N@Z endp
.text:00004513
.text:00004513 ; ---------------------------------------------------------------------------
.text:00004516                 align 4
.text:00004516 _text           ends
.text:00004516
.text$x:00004518 ; ===========================================================================
.text$x:00004518
.text$x:00004518 ; Segment type: Pure code
.text$x:00004518 ; Segment permissions: Read/Execute
.text$x:00004518 _text$x         segment para public 'CODE' use32
.text$x:00004518                 assume cs:_text$x
.text$x:00004518                 ;org 4518h
.text$x:00004518 ; COMDAT (pick associative to section at 447C)
.text$x:00004518                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004518
.text$x:00004518 ; =============== S U B R O U T I N E =======================================
.text$x:00004518
.text$x:00004518
.text$x:00004518 __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0 proc near
.text$x:00004518                                         ; DATA XREF: .xdata$x:00004574o
.text$x:00004518                 mov     ecx, [ebp-10h]
.text$x:0000451B                 add     ecx, 4          ; this
.text$x:0000451E                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:0000451E __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0 endp
.text$x:0000451E
.text$x:00004523
.text$x:00004523 ; =============== S U B R O U T I N E =======================================
.text$x:00004523
.text$x:00004523
.text$x:00004523 __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1 proc near
.text$x:00004523                                         ; DATA XREF: .xdata$x:0000457Co
.text$x:00004523                 mov     ecx, [ebp-10h]
.text$x:00004526                 add     ecx, 44h ; 'D'
.text$x:00004529                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00004529 __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1 endp
.text$x:00004529
.text$x:0000452E
.text$x:0000452E ; =============== S U B R O U T I N E =======================================
.text$x:0000452E
.text$x:0000452E
.text$x:0000452E __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z proc near
.text$x:0000452E                                         ; DATA XREF: NCoderMixer2::CMixer::CMixer(bool)+5o
.text$x:0000452E
.text$x:0000452E arg_4           = dword ptr  8
.text$x:0000452E
.text$x:0000452E                 mov     edx, [esp+arg_4]
.text$x:00004532                 lea     eax, [edx+0Ch]
.text$x:00004535                 mov     ecx, [edx-8]
.text$x:00004538                 xor     ecx, eax
.text$x:0000453A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000453F                 mov     eax, offset __ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z
.text$x:00004544                 jmp     ___CxxFrameHandler3
.text$x:00004544 __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z endp
.text$x:00004544
.text$x:00004544 ; ---------------------------------------------------------------------------
.text$x:00004549                 align 4
.text$x:00004549 _text$x         ends
.text$x:00004549
.rdata:0000454C ; ===========================================================================
.rdata:0000454C
.rdata:0000454C ; Segment type: Pure data
.rdata:0000454C ; Segment permissions: Read
.rdata:0000454C _rdata          segment dword public 'DATA' use32
.rdata:0000454C                 assume cs:_rdata
.rdata:0000454C                 ;org 454Ch
.rdata:0000454C ; COMDAT (pick largest)
.rdata:0000454C                 dd offset ??_R4CMixer@NCoderMixer2@@6B@ ; const NCoderMixer2::CMixer::`RTTI Complete Object Locator'
.rdata:00004550                 public ??_7CMixer@NCoderMixer2@@6B@
.rdata:00004550 ; const NCoderMixer2::CMixer::`vftable'
.rdata:00004550 ??_7CMixer@NCoderMixer2@@6B@ dd offset ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.rdata:00004550                                         ; DATA XREF: NCoderMixer2::CMixer::CMixer(bool)+30o
.rdata:00004550                                         ; NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)
.rdata:00004554                 dd offset __purecall
.rdata:00004558                 dd offset __purecall
.rdata:0000455C                 dd offset __purecall
.rdata:00004560                 dd offset __purecall
.rdata:00004564                 dd offset __purecall
.rdata:00004568                 dd offset __purecall
.rdata:0000456C                 dd offset __purecall
.rdata:0000456C _rdata          ends
.rdata:0000456C
.xdata$x:00004570 ; ===========================================================================
.xdata$x:00004570
.xdata$x:00004570 ; Segment type: Pure data
.xdata$x:00004570 ; Segment permissions: Read
.xdata$x:00004570 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004570                 assume cs:_xdata$x
.xdata$x:00004570                 ;org 4570h
.xdata$x:00004570 ; COMDAT (pick associative to section at 447C)
.xdata$x:00004570 __unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z db 0FFh
.xdata$x:00004570                                         ; DATA XREF: .xdata$x:00004588o
.xdata$x:00004571                 db 0FFh
.xdata$x:00004572                 db 0FFh
.xdata$x:00004573                 db 0FFh
.xdata$x:00004574                 dd offset __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0
.xdata$x:00004578                 db    0
.xdata$x:00004579                 db    0
.xdata$x:0000457A                 db    0
.xdata$x:0000457B                 db    0
.xdata$x:0000457C                 dd offset __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1
.xdata$x:00004580 __ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z db  22h ; "
.xdata$x:00004580                                         ; DATA XREF: __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z+11o
.xdata$x:00004581                 db    5
.xdata$x:00004582                 db  93h ; ô
.xdata$x:00004583                 db  19h
.xdata$x:00004584                 db    2
.xdata$x:00004585                 db    0
.xdata$x:00004586                 db    0
.xdata$x:00004587                 db    0
.xdata$x:00004588                 dd offset __unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z
.xdata$x:0000458C                 align 20h
.xdata$x:000045A0                 db    1
.xdata$x:000045A1                 db    0
.xdata$x:000045A2                 db    0
.xdata$x:000045A3                 db    0
.xdata$x:000045A3 _xdata$x        ends
.xdata$x:000045A3
.rdata$r:000045A4 ; ===========================================================================
.rdata$r:000045A4
.rdata$r:000045A4 ; Segment type: Pure data
.rdata$r:000045A4 ; Segment permissions: Read
.rdata$r:000045A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000045A4                 assume cs:_rdata$r
.rdata$r:000045A4                 ;org 45A4h
.rdata$r:000045A4 ; COMDAT (pick any)
.rdata$r:000045A4                 public ??_R4CMixer@NCoderMixer2@@6B@
.rdata$r:000045A4 ; const NCoderMixer2::CMixer::`RTTI Complete Object Locator'
.rdata$r:000045A4 ??_R4CMixer@NCoderMixer2@@6B@ db    0   ; DATA XREF: .rdata:0000454Co
.rdata$r:000045A5                 db    0
.rdata$r:000045A6                 db    0
.rdata$r:000045A7                 db    0
.rdata$r:000045A8                 db    0
.rdata$r:000045A9                 db    0
.rdata$r:000045AA                 db    0
.rdata$r:000045AB                 db    0
.rdata$r:000045AC                 db    0
.rdata$r:000045AD                 db    0
.rdata$r:000045AE                 db    0
.rdata$r:000045AF                 db    0
.rdata$r:000045B0                 dd offset ??_R0?AVCMixer@NCoderMixer2@@@8 ; NCoderMixer2::CMixer `RTTI Type Descriptor'
.rdata$r:000045B4                 dd offset ??_R3CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:000045B4 _rdata$r        ends
.rdata$r:000045B4
.text:000045B8 ; ===========================================================================
.text:000045B8
.text:000045B8 ; Segment type: Pure code
.text:000045B8 ; Segment permissions: Read/Execute
.text:000045B8 _text           segment para public 'CODE' use32
.text:000045B8                 assume cs:_text
.text:000045B8                 ;org 45B8h
.text:000045B8 ; COMDAT (pick any)
.text:000045B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000045B8
.text:000045B8 ; =============== S U B R O U T I N E =======================================
.text:000045B8
.text:000045B8 ; Attributes: bp-based frame
.text:000045B8
.text:000045B8 ; __int32 __thiscall NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CMixer *this, const struct NCoderMixer2::CBindInfo *)
.text:000045B8                 public ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.text:000045B8 ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z proc near
.text:000045B8                                         ; CODE XREF: NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)+25p
.text:000045B8                                         ; DATA XREF: .rdata:const NCoderMixer2::CMixerST::`vftable'{for `NCoderMixer2::CMixer'}o ...
.text:000045B8
.text:000045B8 var_4           = dword ptr -4
.text:000045B8 arg_0           = dword ptr  8
.text:000045B8
.text:000045B8                 push    ebp
.text:000045B9                 mov     ebp, esp
.text:000045BB                 push    ecx
.text:000045BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000045C3                 mov     [ebp+var_4], ecx
.text:000045C6                 mov     eax, [ebp+arg_0]
.text:000045C9                 push    eax
.text:000045CA                 mov     ecx, [ebp+var_4]
.text:000045CD                 add     ecx, 4
.text:000045D0                 call    ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z ; NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)
.text:000045D5                 mov     ecx, [ebp+var_4]
.text:000045D8                 add     ecx, 44h ; 'D'
.text:000045DB                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:000045E0                 mov     ecx, [ebp+var_4]
.text:000045E3                 mov     dword ptr [ecx+60h], 0
.text:000045EA                 xor     eax, eax
.text:000045EC                 add     esp, 4
.text:000045EF                 cmp     ebp, esp
.text:000045F1                 call    __RTC_CheckEsp
.text:000045F6                 mov     esp, ebp
.text:000045F8                 pop     ebp
.text:000045F9                 retn    4
.text:000045F9 ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z endp
.text:000045F9
.text:000045F9 _text           ends
.text:000045F9
.text:000045FC ; ===========================================================================
.text:000045FC
.text:000045FC ; Segment type: Pure code
.text:000045FC ; Segment permissions: Read/Execute
.text:000045FC _text           segment para public 'CODE' use32
.text:000045FC                 assume cs:_text
.text:000045FC                 ;org 45FCh
.text:000045FC ; COMDAT (pick any)
.text:000045FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000045FC
.text:000045FC ; =============== S U B R O U T I N E =======================================
.text:000045FC
.text:000045FC ; Attributes: bp-based frame
.text:000045FC
.text:000045FC ; _DWORD __thiscall NCoderMixer2::CBindInfo::CBindInfo(NCoderMixer2::CBindInfo *__hidden this)
.text:000045FC                 public ??0CBindInfo@NCoderMixer2@@QAE@XZ
.text:000045FC ??0CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text:000045FC                                         ; CODE XREF: NCoderMixer2::CMixer::CMixer(bool)+3Cp
.text:000045FC
.text:000045FC var_10          = dword ptr -10h
.text:000045FC var_C           = dword ptr -0Ch
.text:000045FC var_4           = dword ptr -4
.text:000045FC
.text:000045FC                 push    ebp
.text:000045FD                 mov     ebp, esp
.text:000045FF                 push    0FFFFFFFFh
.text:00004601                 push    offset __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ
.text:00004606                 mov     eax, large fs:0
.text:0000460C                 push    eax
.text:0000460D                 push    ecx
.text:0000460E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004615                 mov     eax, dword ptr ds:___security_cookie
.text:0000461A                 xor     eax, ebp
.text:0000461C                 push    eax
.text:0000461D                 lea     eax, [ebp+var_C]
.text:00004620                 mov     large fs:0, eax
.text:00004626                 mov     [ebp+var_10], ecx
.text:00004629                 mov     ecx, [ebp+var_10]
.text:0000462C                 call    ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text:00004631                 mov     [ebp+var_4], 0
.text:00004638                 mov     ecx, [ebp+var_10]
.text:0000463B                 add     ecx, 0Ch
.text:0000463E                 call    ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>(void)
.text:00004643                 mov     byte ptr [ebp+var_4], 1
.text:00004647                 mov     ecx, [ebp+var_10]
.text:0000464A                 add     ecx, 18h
.text:0000464D                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00004652                 mov     byte ptr [ebp+var_4], 2
.text:00004656                 mov     ecx, [ebp+var_10]
.text:00004659                 add     ecx, 28h ; '('
.text:0000465C                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00004661                 mov     byte ptr [ebp+var_4], 3
.text:00004665                 mov     ecx, [ebp+var_10]
.text:00004668                 add     ecx, 34h ; '4'
.text:0000466B                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00004670                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004677                 mov     eax, [ebp+var_10]
.text:0000467A                 mov     ecx, [ebp+var_C]
.text:0000467D                 mov     large fs:0, ecx
.text:00004684                 pop     ecx
.text:00004685                 add     esp, 10h
.text:00004688                 cmp     ebp, esp
.text:0000468A                 call    __RTC_CheckEsp
.text:0000468F                 mov     esp, ebp
.text:00004691                 pop     ebp
.text:00004692                 retn
.text:00004692 ??0CBindInfo@NCoderMixer2@@QAE@XZ endp
.text:00004692
.text:00004692 ; ---------------------------------------------------------------------------
.text:00004693                 align 4
.text:00004693 _text           ends
.text:00004693
.text$x:00004694 ; ===========================================================================
.text$x:00004694
.text$x:00004694 ; Segment type: Pure code
.text$x:00004694 ; Segment permissions: Read/Execute
.text$x:00004694 _text$x         segment para public 'CODE' use32
.text$x:00004694                 assume cs:_text$x
.text$x:00004694                 ;org 4694h
.text$x:00004694 ; COMDAT (pick associative to section at 45FC)
.text$x:00004694                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004694
.text$x:00004694 ; =============== S U B R O U T I N E =======================================
.text$x:00004694
.text$x:00004694
.text$x:00004694 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00004694                                         ; DATA XREF: .xdata$x:000046DCo
.text$x:00004694                 mov     ecx, [ebp-10h]
.text$x:00004697                 jmp     ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text$x:00004697 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00004697
.text$x:0000469C
.text$x:0000469C ; =============== S U B R O U T I N E =======================================
.text$x:0000469C
.text$x:0000469C
.text$x:0000469C __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:0000469C                                         ; DATA XREF: .xdata$x:000046E4o
.text$x:0000469C                 mov     ecx, [ebp-10h]
.text$x:0000469F                 add     ecx, 0Ch
.text$x:000046A2                 jmp     ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text$x:000046A2 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1 endp
.text$x:000046A2
.text$x:000046A7
.text$x:000046A7 ; =============== S U B R O U T I N E =======================================
.text$x:000046A7
.text$x:000046A7
.text$x:000046A7 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:000046A7                                         ; DATA XREF: .xdata$x:000046ECo
.text$x:000046A7                 mov     ecx, [ebp-10h]
.text$x:000046AA                 add     ecx, 18h
.text$x:000046AD                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:000046AD __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2 endp
.text$x:000046AD
.text$x:000046B2
.text$x:000046B2 ; =============== S U B R O U T I N E =======================================
.text$x:000046B2
.text$x:000046B2
.text$x:000046B2 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:000046B2                                         ; DATA XREF: .xdata$x:000046F4o
.text$x:000046B2                 mov     ecx, [ebp-10h]
.text$x:000046B5                 add     ecx, 28h ; '('
.text$x:000046B8                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:000046B8 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3 endp
.text$x:000046B8
.text$x:000046BD
.text$x:000046BD ; =============== S U B R O U T I N E =======================================
.text$x:000046BD
.text$x:000046BD
.text$x:000046BD __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text$x:000046BD                                         ; DATA XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+5o
.text$x:000046BD
.text$x:000046BD arg_4           = dword ptr  8
.text$x:000046BD
.text$x:000046BD                 mov     edx, [esp+arg_4]
.text$x:000046C1                 lea     eax, [edx+0Ch]
.text$x:000046C4                 mov     ecx, [edx-8]
.text$x:000046C7                 xor     ecx, eax
.text$x:000046C9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000046CE                 mov     eax, offset __ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ
.text$x:000046D3                 jmp     ___CxxFrameHandler3
.text$x:000046D3 __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ endp
.text$x:000046D3
.text$x:000046D3 _text$x         ends
.text$x:000046D3
.xdata$x:000046D8 ; ===========================================================================
.xdata$x:000046D8
.xdata$x:000046D8 ; Segment type: Pure data
.xdata$x:000046D8 ; Segment permissions: Read
.xdata$x:000046D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000046D8                 assume cs:_xdata$x
.xdata$x:000046D8                 ;org 46D8h
.xdata$x:000046D8 ; COMDAT (pick associative to section at 45FC)
.xdata$x:000046D8 __unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:000046D8                                         ; DATA XREF: .xdata$x:00004700o
.xdata$x:000046D9                 db 0FFh
.xdata$x:000046DA                 db 0FFh
.xdata$x:000046DB                 db 0FFh
.xdata$x:000046DC                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0
.xdata$x:000046E0                 db    0
.xdata$x:000046E1                 db    0
.xdata$x:000046E2                 db    0
.xdata$x:000046E3                 db    0
.xdata$x:000046E4                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1
.xdata$x:000046E8                 db    1
.xdata$x:000046E9                 db    0
.xdata$x:000046EA                 db    0
.xdata$x:000046EB                 db    0
.xdata$x:000046EC                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2
.xdata$x:000046F0                 db    2
.xdata$x:000046F1                 db    0
.xdata$x:000046F2                 db    0
.xdata$x:000046F3                 db    0
.xdata$x:000046F4                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3
.xdata$x:000046F8 __ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:000046F8                                         ; DATA XREF: __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ+11o
.xdata$x:000046F9                 db    5
.xdata$x:000046FA                 db  93h ; ô
.xdata$x:000046FB                 db  19h
.xdata$x:000046FC                 db    4
.xdata$x:000046FD                 db    0
.xdata$x:000046FE                 db    0
.xdata$x:000046FF                 db    0
.xdata$x:00004700                 dd offset __unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ
.xdata$x:00004704                 db    0
.xdata$x:00004705                 db    0
.xdata$x:00004706                 db    0
.xdata$x:00004707                 db    0
.xdata$x:00004708                 db    0
.xdata$x:00004709                 db    0
.xdata$x:0000470A                 db    0
.xdata$x:0000470B                 db    0
.xdata$x:0000470C                 db    0
.xdata$x:0000470D                 db    0
.xdata$x:0000470E                 db    0
.xdata$x:0000470F                 db    0
.xdata$x:00004710                 db    0
.xdata$x:00004711                 db    0
.xdata$x:00004712                 db    0
.xdata$x:00004713                 db    0
.xdata$x:00004714                 db    0
.xdata$x:00004715                 db    0
.xdata$x:00004716                 db    0
.xdata$x:00004717                 db    0
.xdata$x:00004718                 db    1
.xdata$x:00004719                 db    0
.xdata$x:0000471A                 db    0
.xdata$x:0000471B                 db    0
.xdata$x:0000471B _xdata$x        ends
.xdata$x:0000471B
.text:0000471C ; ===========================================================================
.text:0000471C
.text:0000471C ; Segment type: Pure code
.text:0000471C ; Segment permissions: Read/Execute
.text:0000471C _text           segment para public 'CODE' use32
.text:0000471C                 assume cs:_text
.text:0000471C                 ;org 471Ch
.text:0000471C ; COMDAT (pick any)
.text:0000471C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000471C
.text:0000471C ; =============== S U B R O U T I N E =======================================
.text:0000471C
.text:0000471C ; Attributes: bp-based frame
.text:0000471C
.text:0000471C ; _DWORD __thiscall NCoderMixer2::CBindInfo::~CBindInfo(NCoderMixer2::CBindInfo *__hidden this)
.text:0000471C                 public ??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:0000471C ??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text:0000471C                                         ; CODE XREF: __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0+6j
.text:0000471C                                         ; NCoderMixer2::CMixer::~CMixer(void)+5Bp ...
.text:0000471C
.text:0000471C var_10          = dword ptr -10h
.text:0000471C var_C           = dword ptr -0Ch
.text:0000471C var_4           = dword ptr -4
.text:0000471C
.text:0000471C                 push    ebp
.text:0000471D                 mov     ebp, esp
.text:0000471F                 push    0FFFFFFFFh
.text:00004721                 push    offset __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:00004726                 mov     eax, large fs:0
.text:0000472C                 push    eax
.text:0000472D                 push    ecx
.text:0000472E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004735                 mov     eax, dword ptr ds:___security_cookie
.text:0000473A                 xor     eax, ebp
.text:0000473C                 push    eax
.text:0000473D                 lea     eax, [ebp+var_C]
.text:00004740                 mov     large fs:0, eax
.text:00004746                 mov     [ebp+var_10], ecx
.text:00004749                 mov     [ebp+var_4], 3
.text:00004750                 mov     ecx, [ebp+var_10]
.text:00004753                 add     ecx, 34h ; '4'
.text:00004756                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000475B                 mov     byte ptr [ebp+var_4], 2
.text:0000475F                 mov     ecx, [ebp+var_10]
.text:00004762                 add     ecx, 28h ; '('
.text:00004765                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000476A                 mov     byte ptr [ebp+var_4], 1
.text:0000476E                 mov     ecx, [ebp+var_10]
.text:00004771                 add     ecx, 18h
.text:00004774                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00004779                 mov     byte ptr [ebp+var_4], 0
.text:0000477D                 mov     ecx, [ebp+var_10]
.text:00004780                 add     ecx, 0Ch
.text:00004783                 call    ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text:00004788                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000478F                 mov     ecx, [ebp+var_10]
.text:00004792                 call    ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text:00004797                 mov     ecx, [ebp+var_C]
.text:0000479A                 mov     large fs:0, ecx
.text:000047A1                 pop     ecx
.text:000047A2                 add     esp, 10h
.text:000047A5                 cmp     ebp, esp
.text:000047A7                 call    __RTC_CheckEsp
.text:000047AC                 mov     esp, ebp
.text:000047AE                 pop     ebp
.text:000047AF                 retn
.text:000047AF ??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text:000047AF
.text:000047AF _text           ends
.text:000047AF
.text$x:000047B0 ; ===========================================================================
.text$x:000047B0
.text$x:000047B0 ; Segment type: Pure code
.text$x:000047B0 ; Segment permissions: Read/Execute
.text$x:000047B0 _text$x         segment para public 'CODE' use32
.text$x:000047B0                 assume cs:_text$x
.text$x:000047B0                 ;org 47B0h
.text$x:000047B0 ; COMDAT (pick associative to section at 471C)
.text$x:000047B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000047B0
.text$x:000047B0 ; =============== S U B R O U T I N E =======================================
.text$x:000047B0
.text$x:000047B0
.text$x:000047B0 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:000047B0                                         ; DATA XREF: .xdata$x:000047F8o
.text$x:000047B0                 mov     ecx, [ebp-10h]
.text$x:000047B3                 jmp     ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text$x:000047B3 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 endp
.text$x:000047B3
.text$x:000047B8
.text$x:000047B8 ; =============== S U B R O U T I N E =======================================
.text$x:000047B8
.text$x:000047B8
.text$x:000047B8 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:000047B8                                         ; DATA XREF: .xdata$x:00004800o
.text$x:000047B8                 mov     ecx, [ebp-10h]
.text$x:000047BB                 add     ecx, 0Ch
.text$x:000047BE                 jmp     ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text$x:000047BE __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 endp
.text$x:000047BE
.text$x:000047C3
.text$x:000047C3 ; =============== S U B R O U T I N E =======================================
.text$x:000047C3
.text$x:000047C3
.text$x:000047C3 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:000047C3                                         ; DATA XREF: .xdata$x:00004808o
.text$x:000047C3                 mov     ecx, [ebp-10h]
.text$x:000047C6                 add     ecx, 18h
.text$x:000047C9                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:000047C9 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 endp
.text$x:000047C9
.text$x:000047CE
.text$x:000047CE ; =============== S U B R O U T I N E =======================================
.text$x:000047CE
.text$x:000047CE
.text$x:000047CE __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:000047CE                                         ; DATA XREF: .xdata$x:00004810o
.text$x:000047CE                 mov     ecx, [ebp-10h]
.text$x:000047D1                 add     ecx, 28h ; '('
.text$x:000047D4                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:000047D4 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 endp
.text$x:000047D4
.text$x:000047D9
.text$x:000047D9 ; =============== S U B R O U T I N E =======================================
.text$x:000047D9
.text$x:000047D9
.text$x:000047D9 __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text$x:000047D9                                         ; DATA XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+5o
.text$x:000047D9
.text$x:000047D9 arg_4           = dword ptr  8
.text$x:000047D9
.text$x:000047D9                 mov     edx, [esp+arg_4]
.text$x:000047DD                 lea     eax, [edx+0Ch]
.text$x:000047E0                 mov     ecx, [edx-8]
.text$x:000047E3                 xor     ecx, eax
.text$x:000047E5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000047EA                 mov     eax, offset __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text$x:000047EF                 jmp     ___CxxFrameHandler3
.text$x:000047EF __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text$x:000047EF
.text$x:000047EF _text$x         ends
.text$x:000047EF
.xdata$x:000047F4 ; ===========================================================================
.xdata$x:000047F4
.xdata$x:000047F4 ; Segment type: Pure data
.xdata$x:000047F4 ; Segment permissions: Read
.xdata$x:000047F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000047F4                 assume cs:_xdata$x
.xdata$x:000047F4                 ;org 47F4h
.xdata$x:000047F4 ; COMDAT (pick associative to section at 471C)
.xdata$x:000047F4 __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:000047F4                                         ; DATA XREF: .xdata$x:0000481Co
.xdata$x:000047F5                 db 0FFh
.xdata$x:000047F6                 db 0FFh
.xdata$x:000047F7                 db 0FFh
.xdata$x:000047F8                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
.xdata$x:000047FC                 align 10h
.xdata$x:00004800                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
.xdata$x:00004804                 db    1
.xdata$x:00004805                 db    0
.xdata$x:00004806                 db    0
.xdata$x:00004807                 db    0
.xdata$x:00004808                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
.xdata$x:0000480C                 db    2
.xdata$x:0000480D                 db    0
.xdata$x:0000480E                 db    0
.xdata$x:0000480F                 db    0
.xdata$x:00004810                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
.xdata$x:00004814 __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00004814                                         ; DATA XREF: __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00004815                 db    5
.xdata$x:00004816                 db  93h ; ô
.xdata$x:00004817                 db  19h
.xdata$x:00004818                 db    4
.xdata$x:00004819                 db    0
.xdata$x:0000481A                 db    0
.xdata$x:0000481B                 db    0
.xdata$x:0000481C                 dd offset __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
.xdata$x:00004820                 db    0
.xdata$x:00004821                 db    0
.xdata$x:00004822                 db    0
.xdata$x:00004823                 db    0
.xdata$x:00004824                 db    0
.xdata$x:00004825                 db    0
.xdata$x:00004826                 db    0
.xdata$x:00004827                 db    0
.xdata$x:00004828                 db    0
.xdata$x:00004829                 db    0
.xdata$x:0000482A                 db    0
.xdata$x:0000482B                 db    0
.xdata$x:0000482C                 db    0
.xdata$x:0000482D                 db    0
.xdata$x:0000482E                 db    0
.xdata$x:0000482F                 db    0
.xdata$x:00004830                 db    0
.xdata$x:00004831                 db    0
.xdata$x:00004832                 db    0
.xdata$x:00004833                 db    0
.xdata$x:00004834                 db    1
.xdata$x:00004835                 db    0
.xdata$x:00004836                 db    0
.xdata$x:00004837                 db    0
.xdata$x:00004837 _xdata$x        ends
.xdata$x:00004837
.text:00004838 ; ===========================================================================
.text:00004838
.text:00004838 ; Segment type: Pure code
.text:00004838 ; Segment permissions: Read/Execute
.text:00004838 _text           segment para public 'CODE' use32
.text:00004838                 assume cs:_text
.text:00004838                 ;org 4838h
.text:00004838 ; COMDAT (pick any)
.text:00004838                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004838
.text:00004838 ; =============== S U B R O U T I N E =======================================
.text:00004838
.text:00004838 ; Attributes: bp-based frame
.text:00004838
.text:00004838 ; public: struct NCoderMixer2::CBindInfo & __thiscall NCoderMixer2::CBindInfo::operator=(struct NCoderMixer2::CBindInfo const &)
.text:00004838                 public ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
.text:00004838 ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z proc near
.text:00004838                                         ; CODE XREF: NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)+18p
.text:00004838
.text:00004838 var_4           = dword ptr -4
.text:00004838 arg_0           = dword ptr  8
.text:00004838
.text:00004838                 push    ebp
.text:00004839                 mov     ebp, esp
.text:0000483B                 push    ecx
.text:0000483C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004843                 mov     [ebp+var_4], ecx
.text:00004846                 mov     eax, [ebp+arg_0]
.text:00004849                 push    eax
.text:0000484A                 mov     ecx, [ebp+var_4]
.text:0000484D                 call    ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)
.text:00004852                 mov     ecx, [ebp+arg_0]
.text:00004855                 add     ecx, 0Ch
.text:00004858                 push    ecx
.text:00004859                 mov     ecx, [ebp+var_4]
.text:0000485C                 add     ecx, 0Ch
.text:0000485F                 call    ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)
.text:00004864                 mov     edx, [ebp+arg_0]
.text:00004867                 add     edx, 18h
.text:0000486A                 push    edx
.text:0000486B                 mov     ecx, [ebp+var_4]
.text:0000486E                 add     ecx, 18h
.text:00004871                 call    ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ; CRecordVector<uint>::operator=(CRecordVector<uint> const &)
.text:00004876                 mov     eax, [ebp+var_4]
.text:00004879                 mov     ecx, [ebp+arg_0]
.text:0000487C                 mov     edx, [ecx+24h]
.text:0000487F                 mov     [eax+24h], edx
.text:00004882                 mov     eax, [ebp+arg_0]
.text:00004885                 add     eax, 28h ; '('
.text:00004888                 push    eax
.text:00004889                 mov     ecx, [ebp+var_4]
.text:0000488C                 add     ecx, 28h ; '('
.text:0000488F                 call    ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ; CRecordVector<uint>::operator=(CRecordVector<uint> const &)
.text:00004894                 mov     ecx, [ebp+arg_0]
.text:00004897                 add     ecx, 34h ; '4'
.text:0000489A                 push    ecx
.text:0000489B                 mov     ecx, [ebp+var_4]
.text:0000489E                 add     ecx, 34h ; '4'
.text:000048A1                 call    ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ; CRecordVector<uint>::operator=(CRecordVector<uint> const &)
.text:000048A6                 mov     eax, [ebp+var_4]
.text:000048A9                 add     esp, 4
.text:000048AC                 cmp     ebp, esp
.text:000048AE                 call    __RTC_CheckEsp
.text:000048B3                 mov     esp, ebp
.text:000048B5                 pop     ebp
.text:000048B6                 retn    4
.text:000048B6 ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z endp
.text:000048B6
.text:000048B6 ; ---------------------------------------------------------------------------
.text:000048B9                 align 4
.text:000048B9 _text           ends
.text:000048B9
.text:000048BC ; ===========================================================================
.text:000048BC
.text:000048BC ; Segment type: Pure code
.text:000048BC ; Segment permissions: Read/Execute
.text:000048BC _text           segment para public 'CODE' use32
.text:000048BC                 assume cs:_text
.text:000048BC                 ;org 48BCh
.text:000048BC ; COMDAT (pick any)
.text:000048BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000048BC
.text:000048BC ; =============== S U B R O U T I N E =======================================
.text:000048BC
.text:000048BC ; Attributes: bp-based frame
.text:000048BC
.text:000048BC ; __int32 __stdcall NCoderMixer2::CMixerST::QueryInterface(NCoderMixer2::CMixerST *this, const struct _GUID *Buf1, void **)
.text:000048BC                 public ?QueryInterface@CMixerST@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
.text:000048BC ?QueryInterface@CMixerST@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000048BC                                         ; DATA XREF: .rdata:const NCoderMixer2::CMixerST::`vftable'{for `IUnknown'}o
.text:000048BC
.text:000048BC this            = dword ptr  8
.text:000048BC Buf1            = dword ptr  0Ch
.text:000048BC arg_8           = dword ptr  10h
.text:000048BC
.text:000048BC                 push    ebp
.text:000048BD                 mov     ebp, esp
.text:000048BF                 mov     eax, [ebp+arg_8]
.text:000048C2                 mov     dword ptr [eax], 0
.text:000048C8                 push    offset _IID_IUnknown ; Buf2
.text:000048CD                 mov     ecx, [ebp+Buf1]
.text:000048D0                 push    ecx             ; Buf1
.text:000048D1                 call    ___@8           ; __(x,x)
.text:000048D6                 test    eax, eax
.text:000048D8                 jz      short loc_48E4
.text:000048DA                 mov     edx, [ebp+arg_8]
.text:000048DD                 mov     eax, [ebp+this]
.text:000048E0                 mov     [edx], eax
.text:000048E2                 jmp     short loc_48EB
.text:000048E4 ; ---------------------------------------------------------------------------
.text:000048E4
.text:000048E4 loc_48E4:                               ; CODE XREF: NCoderMixer2::CMixerST::QueryInterface(_GUID const &,void * *)+1Cj
.text:000048E4                 mov     eax, 80004002h
.text:000048E9                 jmp     short loc_48FC
.text:000048EB ; ---------------------------------------------------------------------------
.text:000048EB
.text:000048EB loc_48EB:                               ; CODE XREF: NCoderMixer2::CMixerST::QueryInterface(_GUID const &,void * *)+26j
.text:000048EB                 mov     ecx, [ebp+this]
.text:000048EE                 mov     edx, [ecx+68h]
.text:000048F1                 add     edx, 1
.text:000048F4                 mov     eax, [ebp+this]
.text:000048F7                 mov     [eax+68h], edx
.text:000048FA                 xor     eax, eax
.text:000048FC
.text:000048FC loc_48FC:                               ; CODE XREF: NCoderMixer2::CMixerST::QueryInterface(_GUID const &,void * *)+2Dj
.text:000048FC                 cmp     ebp, esp
.text:000048FE                 call    __RTC_CheckEsp
.text:00004903                 pop     ebp
.text:00004904                 retn    0Ch
.text:00004904 ?QueryInterface@CMixerST@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004904
.text:00004904 ; ---------------------------------------------------------------------------
.text:00004907                 align 4
.text:00004907 _text           ends
.text:00004907
.text:00004908 ; ===========================================================================
.text:00004908
.text:00004908 ; Segment type: Pure code
.text:00004908 ; Segment permissions: Read/Execute
.text:00004908 _text           segment para public 'CODE' use32
.text:00004908                 assume cs:_text
.text:00004908                 ;org 4908h
.text:00004908 ; COMDAT (pick any)
.text:00004908                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004908
.text:00004908 ; =============== S U B R O U T I N E =======================================
.text:00004908
.text:00004908 ; Attributes: bp-based frame
.text:00004908
.text:00004908 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00004908                 public ___@8
.text:00004908 ___@8           proc near               ; CODE XREF: NCoderMixer2::CMixerST::QueryInterface(_GUID const &,void * *)+15p
.text:00004908                                         ; CSequentialInStreamCalcSize::QueryInterface(_GUID const &,void * *)+15p ...
.text:00004908
.text:00004908 Buf1            = dword ptr  8
.text:00004908 Buf2            = dword ptr  0Ch
.text:00004908
.text:00004908                 push    ebp
.text:00004909                 mov     ebp, esp
.text:0000490B                 mov     eax, [ebp+Buf2]
.text:0000490E                 push    eax             ; Buf2
.text:0000490F                 mov     ecx, [ebp+Buf1]
.text:00004912                 push    ecx             ; Buf1
.text:00004913                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00004918                 cmp     ebp, esp
.text:0000491A                 call    __RTC_CheckEsp
.text:0000491F                 pop     ebp
.text:00004920                 retn    8
.text:00004920 ___@8           endp
.text:00004920
.text:00004920 ; ---------------------------------------------------------------------------
.text:00004923                 align 4
.text:00004923 _text           ends
.text:00004923
.text:00004924 ; ===========================================================================
.text:00004924
.text:00004924 ; Segment type: Pure code
.text:00004924 ; Segment permissions: Read/Execute
.text:00004924 _text           segment para public 'CODE' use32
.text:00004924                 assume cs:_text
.text:00004924                 ;org 4924h
.text:00004924 ; COMDAT (pick any)
.text:00004924                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004924
.text:00004924 ; =============== S U B R O U T I N E =======================================
.text:00004924
.text:00004924 ; Attributes: bp-based frame
.text:00004924
.text:00004924 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00004924                 public _IsEqualGUID@8
.text:00004924 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00004924
.text:00004924 Buf1            = dword ptr  8
.text:00004924 Buf2            = dword ptr  0Ch
.text:00004924
.text:00004924                 push    ebp
.text:00004925                 mov     ebp, esp
.text:00004927                 push    10h             ; Size
.text:00004929                 mov     eax, [ebp+Buf2]
.text:0000492C                 push    eax             ; Buf2
.text:0000492D                 mov     ecx, [ebp+Buf1]
.text:00004930                 push    ecx             ; Buf1
.text:00004931                 call    _memcmp
.text:00004936                 add     esp, 0Ch
.text:00004939                 neg     eax
.text:0000493B                 sbb     eax, eax
.text:0000493D                 add     eax, 1
.text:00004940                 cmp     ebp, esp
.text:00004942                 call    __RTC_CheckEsp
.text:00004947                 pop     ebp
.text:00004948                 retn    8
.text:00004948 _IsEqualGUID@8  endp
.text:00004948
.text:00004948 ; ---------------------------------------------------------------------------
.text:0000494B                 align 4
.text:0000494B _text           ends
.text:0000494B
.text:0000494C ; ===========================================================================
.text:0000494C
.text:0000494C ; Segment type: Pure code
.text:0000494C ; Segment permissions: Read/Execute
.text:0000494C _text           segment para public 'CODE' use32
.text:0000494C                 assume cs:_text
.text:0000494C                 ;org 494Ch
.text:0000494C ; COMDAT (pick any)
.text:0000494C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000494C
.text:0000494C ; =============== S U B R O U T I N E =======================================
.text:0000494C
.text:0000494C ; Attributes: bp-based frame
.text:0000494C
.text:0000494C ; unsigned __int32 __stdcall NCoderMixer2::CMixerST::AddRef(NCoderMixer2::CMixerST *this)
.text:0000494C                 public ?AddRef@CMixerST@NCoderMixer2@@UAGKXZ
.text:0000494C ?AddRef@CMixerST@NCoderMixer2@@UAGKXZ proc near ; DATA XREF: .rdata:0000429Co
.text:0000494C
.text:0000494C var_4           = dword ptr -4
.text:0000494C this            = dword ptr  8
.text:0000494C
.text:0000494C                 push    ebp
.text:0000494D                 mov     ebp, esp
.text:0000494F                 push    ecx
.text:00004950                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004957                 mov     eax, [ebp+this]
.text:0000495A                 mov     ecx, [eax+68h]
.text:0000495D                 add     ecx, 1
.text:00004960                 mov     [ebp+var_4], ecx
.text:00004963                 mov     edx, [ebp+this]
.text:00004966                 mov     eax, [ebp+var_4]
.text:00004969                 mov     [edx+68h], eax
.text:0000496C                 mov     eax, [ebp+var_4]
.text:0000496F                 mov     esp, ebp
.text:00004971                 pop     ebp
.text:00004972                 retn    4
.text:00004972 ?AddRef@CMixerST@NCoderMixer2@@UAGKXZ endp
.text:00004972
.text:00004972 ; ---------------------------------------------------------------------------
.text:00004975                 align 4
.text:00004975 _text           ends
.text:00004975
.text:00004978 ; ===========================================================================
.text:00004978
.text:00004978 ; Segment type: Pure code
.text:00004978 ; Segment permissions: Read/Execute
.text:00004978 _text           segment para public 'CODE' use32
.text:00004978                 assume cs:_text
.text:00004978                 ;org 4978h
.text:00004978 ; COMDAT (pick any)
.text:00004978                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004978
.text:00004978 ; =============== S U B R O U T I N E =======================================
.text:00004978
.text:00004978 ; Attributes: bp-based frame
.text:00004978
.text:00004978 ; unsigned __int32 __stdcall NCoderMixer2::CMixerST::Release(NCoderMixer2::CMixerST *this)
.text:00004978                 public ?Release@CMixerST@NCoderMixer2@@UAGKXZ
.text:00004978 ?Release@CMixerST@NCoderMixer2@@UAGKXZ proc near
.text:00004978                                         ; DATA XREF: .rdata:000042A0o
.text:00004978
.text:00004978 var_10          = dword ptr -10h
.text:00004978 var_C           = dword ptr -0Ch
.text:00004978 var_8           = dword ptr -8
.text:00004978 var_4           = dword ptr -4
.text:00004978 this            = dword ptr  8
.text:00004978
.text:00004978                 push    ebp
.text:00004979                 mov     ebp, esp
.text:0000497B                 sub     esp, 10h
.text:0000497E                 mov     eax, 0CCCCCCCCh
.text:00004983                 mov     [ebp+var_10], eax
.text:00004986                 mov     [ebp+var_C], eax
.text:00004989                 mov     [ebp+var_8], eax
.text:0000498C                 mov     [ebp+var_4], eax
.text:0000498F                 mov     eax, [ebp+this]
.text:00004992                 mov     ecx, [eax+68h]
.text:00004995                 sub     ecx, 1
.text:00004998                 mov     [ebp+var_C], ecx
.text:0000499B                 mov     edx, [ebp+this]
.text:0000499E                 mov     eax, [ebp+var_C]
.text:000049A1                 mov     [edx+68h], eax
.text:000049A4                 cmp     [ebp+var_C], 0
.text:000049A8                 jz      short loc_49B2
.text:000049AA                 mov     ecx, [ebp+this]
.text:000049AD                 mov     eax, [ecx+68h]
.text:000049B0                 jmp     short loc_49DC
.text:000049B2 ; ---------------------------------------------------------------------------
.text:000049B2
.text:000049B2 loc_49B2:                               ; CODE XREF: NCoderMixer2::CMixerST::Release(void)+30j
.text:000049B2                 mov     edx, [ebp+this]
.text:000049B5                 mov     [ebp+var_8], edx
.text:000049B8                 mov     eax, [ebp+var_8]
.text:000049BB                 mov     [ebp+var_4], eax
.text:000049BE                 cmp     [ebp+var_4], 0
.text:000049C2                 jz      short loc_49D3
.text:000049C4                 push    1
.text:000049C6                 mov     ecx, [ebp+var_4]
.text:000049C9                 call    ??_GCMixerST@NCoderMixer2@@QAEPAXI@Z ; NCoderMixer2::CMixerST::`scalar deleting destructor'(uint)
.text:000049CE                 mov     [ebp+var_10], eax
.text:000049D1                 jmp     short loc_49DA
.text:000049D3 ; ---------------------------------------------------------------------------
.text:000049D3
.text:000049D3 loc_49D3:                               ; CODE XREF: NCoderMixer2::CMixerST::Release(void)+4Aj
.text:000049D3                 mov     [ebp+var_10], 0
.text:000049DA
.text:000049DA loc_49DA:                               ; CODE XREF: NCoderMixer2::CMixerST::Release(void)+59j
.text:000049DA                 xor     eax, eax
.text:000049DC
.text:000049DC loc_49DC:                               ; CODE XREF: NCoderMixer2::CMixerST::Release(void)+38j
.text:000049DC                 add     esp, 10h
.text:000049DF                 cmp     ebp, esp
.text:000049E1                 call    __RTC_CheckEsp
.text:000049E6                 mov     esp, ebp
.text:000049E8                 pop     ebp
.text:000049E9                 retn    4
.text:000049E9 ?Release@CMixerST@NCoderMixer2@@UAGKXZ endp
.text:000049E9
.text:000049E9 _text           ends
.text:000049E9
.text:000049EC ; ===========================================================================
.text:000049EC
.text:000049EC ; Segment type: Pure code
.text:000049EC ; Segment permissions: Read/Execute
.text:000049EC _text           segment para public 'CODE' use32
.text:000049EC                 assume cs:_text
.text:000049EC                 ;org 49ECh
.text:000049EC ; COMDAT (pick any)
.text:000049EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000049EC
.text:000049EC ; =============== S U B R O U T I N E =======================================
.text:000049EC
.text:000049EC ; Attributes: bp-based frame
.text:000049EC
.text:000049EC ; void __thiscall NCoderMixer2::CMixerST::SetCoderInfo(NCoderMixer2::CMixerST *this, unsigned int, const unsigned __int64 *, const unsigned __int64 *const *)
.text:000049EC                 public ?SetCoderInfo@CMixerST@NCoderMixer2@@UAEXIPB_KPBQB_K@Z
.text:000049EC ?SetCoderInfo@CMixerST@NCoderMixer2@@UAEXIPB_KPBQB_K@Z proc near
.text:000049EC                                         ; DATA XREF: .rdata:00004288o
.text:000049EC
.text:000049EC var_4           = dword ptr -4
.text:000049EC arg_0           = dword ptr  8
.text:000049EC arg_4           = dword ptr  0Ch
.text:000049EC arg_8           = dword ptr  10h
.text:000049EC
.text:000049EC                 push    ebp
.text:000049ED                 mov     ebp, esp
.text:000049EF                 push    ecx
.text:000049F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049F7                 mov     [ebp+var_4], ecx
.text:000049FA                 mov     eax, [ebp+arg_8]
.text:000049FD                 push    eax             ; unsigned __int64 **
.text:000049FE                 mov     ecx, [ebp+arg_4]
.text:00004A01                 push    ecx             ; unsigned __int64 *
.text:00004A02                 mov     edx, [ebp+arg_0]
.text:00004A05                 push    edx
.text:00004A06                 mov     ecx, [ebp+var_4]
.text:00004A09                 add     ecx, 68h ; 'h'
.text:00004A0C                 call    ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)
.text:00004A11                 mov     ecx, eax        ; this
.text:00004A13                 call    ?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z ; NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)
.text:00004A18                 add     esp, 4
.text:00004A1B                 cmp     ebp, esp
.text:00004A1D                 call    __RTC_CheckEsp
.text:00004A22                 mov     esp, ebp
.text:00004A24                 pop     ebp
.text:00004A25                 retn    0Ch
.text:00004A25 ?SetCoderInfo@CMixerST@NCoderMixer2@@UAEXIPB_KPBQB_K@Z endp
.text:00004A25
.text:00004A25 _text           ends
.text:00004A25
.text:00004A28 ; ===========================================================================
.text:00004A28
.text:00004A28 ; Segment type: Pure code
.text:00004A28 ; Segment permissions: Read/Execute
.text:00004A28 _text           segment para public 'CODE' use32
.text:00004A28                 assume cs:_text
.text:00004A28                 ;org 4A28h
.text:00004A28 ; COMDAT (pick any)
.text:00004A28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004A28
.text:00004A28 ; =============== S U B R O U T I N E =======================================
.text:00004A28
.text:00004A28 ; Attributes: bp-based frame
.text:00004A28
.text:00004A28 ; public: void * __thiscall NCoderMixer2::CMixerST::`scalar deleting destructor'(unsigned int)
.text:00004A28                 public ??_GCMixerST@NCoderMixer2@@QAEPAXI@Z
.text:00004A28 ??_GCMixerST@NCoderMixer2@@QAEPAXI@Z proc near
.text:00004A28                                         ; CODE XREF: NCoderMixer2::CMixerST::Release(void)+51p
.text:00004A28
.text:00004A28 var_4           = dword ptr -4
.text:00004A28 arg_0           = dword ptr  8
.text:00004A28
.text:00004A28                 push    ebp
.text:00004A29                 mov     ebp, esp
.text:00004A2B                 push    ecx
.text:00004A2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A33                 mov     [ebp+var_4], ecx
.text:00004A36                 mov     ecx, [ebp+var_4] ; this
.text:00004A39                 call    ??1CMixerST@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixerST::~CMixerST(void)
.text:00004A3E                 mov     eax, [ebp+arg_0]
.text:00004A41                 and     eax, 1
.text:00004A44                 jz      short loc_4A52
.text:00004A46                 mov     ecx, [ebp+var_4]
.text:00004A49                 push    ecx             ; void *
.text:00004A4A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004A4F                 add     esp, 4
.text:00004A52
.text:00004A52 loc_4A52:                               ; CODE XREF: NCoderMixer2::CMixerST::`scalar deleting destructor'(uint)+1Cj
.text:00004A52                 mov     eax, [ebp+var_4]
.text:00004A55                 add     esp, 4
.text:00004A58                 cmp     ebp, esp
.text:00004A5A                 call    __RTC_CheckEsp
.text:00004A5F                 mov     esp, ebp
.text:00004A61                 pop     ebp
.text:00004A62                 retn    4
.text:00004A62 ??_GCMixerST@NCoderMixer2@@QAEPAXI@Z endp
.text:00004A62
.text:00004A62 ; ---------------------------------------------------------------------------
.text:00004A65                 align 4
.text:00004A65 _text           ends
.text:00004A65
.text:00004A68 ; ===========================================================================
.text:00004A68
.text:00004A68 ; Segment type: Pure code
.text:00004A68 ; Segment permissions: Read/Execute
.text:00004A68 _text           segment para public 'CODE' use32
.text:00004A68                 assume cs:_text
.text:00004A68                 ;org 4A68h
.text:00004A68 ; COMDAT (pick any)
.text:00004A68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004A68
.text:00004A68 ; =============== S U B R O U T I N E =======================================
.text:00004A68
.text:00004A68 ; Attributes: bp-based frame
.text:00004A68
.text:00004A68 ; public: __thiscall IUnknown::IUnknown(void)
.text:00004A68                 public ??0IUnknown@@QAE@XZ
.text:00004A68 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: NCoderMixer2::CMixerST::CMixerST(bool)+30p
.text:00004A68                                         ; ISequentialInStream::ISequentialInStream(void)+11p ...
.text:00004A68
.text:00004A68 var_4           = dword ptr -4
.text:00004A68
.text:00004A68                 push    ebp
.text:00004A69                 mov     ebp, esp
.text:00004A6B                 push    ecx
.text:00004A6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A73                 mov     [ebp+var_4], ecx
.text:00004A76                 mov     eax, [ebp+var_4]
.text:00004A79                 mov     esp, ebp
.text:00004A7B                 pop     ebp
.text:00004A7C                 retn
.text:00004A7C ??0IUnknown@@QAE@XZ endp
.text:00004A7C
.text:00004A7C ; ---------------------------------------------------------------------------
.text:00004A7D                 align 10h
.text:00004A7D _text           ends
.text:00004A7D
.text:00004A80 ; ===========================================================================
.text:00004A80
.text:00004A80 ; Segment type: Pure code
.text:00004A80 ; Segment permissions: Read/Execute
.text:00004A80 _text           segment para public 'CODE' use32
.text:00004A80                 assume cs:_text
.text:00004A80                 ;org 4A80h
.text:00004A80 ; COMDAT (pick any)
.text:00004A80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004A80
.text:00004A80 ; =============== S U B R O U T I N E =======================================
.text:00004A80
.text:00004A80 ; Attributes: bp-based frame
.text:00004A80
.text:00004A80 ; _DWORD __thiscall NCoderMixer2::CMixer::~CMixer(NCoderMixer2::CMixer *__hidden this)
.text:00004A80                 public ??1CMixer@NCoderMixer2@@QAE@XZ
.text:00004A80 ??1CMixer@NCoderMixer2@@QAE@XZ proc near
.text:00004A80                                         ; CODE XREF: NCoderMixer2::CMixerST::~CMixerST(void)+6Ep
.text:00004A80                                         ; __unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$0+6j ...
.text:00004A80
.text:00004A80 var_10          = dword ptr -10h
.text:00004A80 var_C           = dword ptr -0Ch
.text:00004A80 var_4           = dword ptr -4
.text:00004A80
.text:00004A80                 push    ebp
.text:00004A81                 mov     ebp, esp
.text:00004A83                 push    0FFFFFFFFh
.text:00004A85                 push    offset __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ
.text:00004A8A                 mov     eax, large fs:0
.text:00004A90                 push    eax
.text:00004A91                 push    ecx
.text:00004A92                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004A99                 mov     eax, dword ptr ds:___security_cookie
.text:00004A9E                 xor     eax, ebp
.text:00004AA0                 push    eax
.text:00004AA1                 lea     eax, [ebp+var_C]
.text:00004AA4                 mov     large fs:0, eax
.text:00004AAA                 mov     [ebp+var_10], ecx
.text:00004AAD                 mov     [ebp+var_4], 1
.text:00004AB4                 mov     ecx, [ebp+var_10]
.text:00004AB7                 add     ecx, 50h ; 'P'
.text:00004ABA                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004ABF                 mov     byte ptr [ebp+var_4], 0
.text:00004AC3                 mov     ecx, [ebp+var_10]
.text:00004AC6                 add     ecx, 44h ; 'D'
.text:00004AC9                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004ACE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004AD5                 mov     ecx, [ebp+var_10]
.text:00004AD8                 add     ecx, 4          ; this
.text:00004ADB                 call    ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text:00004AE0                 mov     ecx, [ebp+var_C]
.text:00004AE3                 mov     large fs:0, ecx
.text:00004AEA                 pop     ecx
.text:00004AEB                 add     esp, 10h
.text:00004AEE                 cmp     ebp, esp
.text:00004AF0                 call    __RTC_CheckEsp
.text:00004AF5                 mov     esp, ebp
.text:00004AF7                 pop     ebp
.text:00004AF8                 retn
.text:00004AF8 ??1CMixer@NCoderMixer2@@QAE@XZ endp
.text:00004AF8
.text:00004AF8 ; ---------------------------------------------------------------------------
.text:00004AF9                 align 4
.text:00004AF9 _text           ends
.text:00004AF9
.text$x:00004AFC ; ===========================================================================
.text$x:00004AFC
.text$x:00004AFC ; Segment type: Pure code
.text$x:00004AFC ; Segment permissions: Read/Execute
.text$x:00004AFC _text$x         segment para public 'CODE' use32
.text$x:00004AFC                 assume cs:_text$x
.text$x:00004AFC                 ;org 4AFCh
.text$x:00004AFC ; COMDAT (pick associative to section at 4A80)
.text$x:00004AFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004AFC
.text$x:00004AFC ; =============== S U B R O U T I N E =======================================
.text$x:00004AFC
.text$x:00004AFC
.text$x:00004AFC __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00004AFC                                         ; DATA XREF: .xdata$x:00004B34o
.text$x:00004AFC                 mov     ecx, [ebp-10h]
.text$x:00004AFF                 add     ecx, 4          ; this
.text$x:00004B02                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:00004B02 __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00004B02
.text$x:00004B07
.text$x:00004B07 ; =============== S U B R O U T I N E =======================================
.text$x:00004B07
.text$x:00004B07
.text$x:00004B07 __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00004B07                                         ; DATA XREF: .xdata$x:00004B3Co
.text$x:00004B07                 mov     ecx, [ebp-10h]
.text$x:00004B0A                 add     ecx, 44h ; 'D'
.text$x:00004B0D                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00004B0D __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00004B0D
.text$x:00004B12
.text$x:00004B12 ; =============== S U B R O U T I N E =======================================
.text$x:00004B12
.text$x:00004B12
.text$x:00004B12 __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ proc near
.text$x:00004B12                                         ; DATA XREF: NCoderMixer2::CMixer::~CMixer(void)+5o
.text$x:00004B12
.text$x:00004B12 arg_4           = dword ptr  8
.text$x:00004B12
.text$x:00004B12                 mov     edx, [esp+arg_4]
.text$x:00004B16                 lea     eax, [edx+0Ch]
.text$x:00004B19                 mov     ecx, [edx-8]
.text$x:00004B1C                 xor     ecx, eax
.text$x:00004B1E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B23                 mov     eax, offset __ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ
.text$x:00004B28                 jmp     ___CxxFrameHandler3
.text$x:00004B28 __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ endp
.text$x:00004B28
.text$x:00004B28 ; ---------------------------------------------------------------------------
.text$x:00004B2D                 align 10h
.text$x:00004B2D _text$x         ends
.text$x:00004B2D
.xdata$x:00004B30 ; ===========================================================================
.xdata$x:00004B30
.xdata$x:00004B30 ; Segment type: Pure data
.xdata$x:00004B30 ; Segment permissions: Read
.xdata$x:00004B30 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004B30                 assume cs:_xdata$x
.xdata$x:00004B30                 ;org 4B30h
.xdata$x:00004B30 ; COMDAT (pick associative to section at 4A80)
.xdata$x:00004B30 __unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00004B30                                         ; DATA XREF: .xdata$x:00004B48o
.xdata$x:00004B31                 db 0FFh
.xdata$x:00004B32                 db 0FFh
.xdata$x:00004B33                 db 0FFh
.xdata$x:00004B34                 dd offset __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0
.xdata$x:00004B38                 db    0
.xdata$x:00004B39                 db    0
.xdata$x:00004B3A                 db    0
.xdata$x:00004B3B                 db    0
.xdata$x:00004B3C                 dd offset __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1
.xdata$x:00004B40 __ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00004B40                                         ; DATA XREF: __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00004B41                 db    5
.xdata$x:00004B42                 db  93h ; ô
.xdata$x:00004B43                 db  19h
.xdata$x:00004B44                 db    2
.xdata$x:00004B45                 db    0
.xdata$x:00004B46                 db    0
.xdata$x:00004B47                 db    0
.xdata$x:00004B48                 dd offset __unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ
.xdata$x:00004B4C                 align 20h
.xdata$x:00004B60                 db    1
.xdata$x:00004B61                 db    0
.xdata$x:00004B62                 db    0
.xdata$x:00004B63                 db    0
.xdata$x:00004B63 _xdata$x        ends
.xdata$x:00004B63
.text:00004B64 ; ===========================================================================
.text:00004B64
.text:00004B64 ; Segment type: Pure code
.text:00004B64 ; Segment permissions: Read/Execute
.text:00004B64 _text           segment para public 'CODE' use32
.text:00004B64                 assume cs:_text
.text:00004B64                 ;org 4B64h
.text:00004B64 ; COMDAT (pick any)
.text:00004B64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004B64
.text:00004B64 ; =============== S U B R O U T I N E =======================================
.text:00004B64
.text:00004B64 ; Attributes: bp-based frame
.text:00004B64
.text:00004B64 ; void __thiscall NCoderMixer2::CBindInfo::GetCoder_for_Stream(NCoderMixer2::CBindInfo *this, unsigned int, unsigned int *, unsigned int *)
.text:00004B64                 public ?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z
.text:00004B64 ?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z proc near
.text:00004B64                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+6Bp
.text:00004B64                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+14Ep ...
.text:00004B64
.text:00004B64 var_4           = dword ptr -4
.text:00004B64 arg_0           = dword ptr  8
.text:00004B64 arg_4           = dword ptr  0Ch
.text:00004B64 arg_8           = dword ptr  10h
.text:00004B64
.text:00004B64                 push    ebp
.text:00004B65                 mov     ebp, esp
.text:00004B67                 push    ecx
.text:00004B68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B6F                 mov     [ebp+var_4], ecx
.text:00004B72                 mov     eax, [ebp+arg_0]
.text:00004B75                 push    eax
.text:00004B76                 mov     ecx, [ebp+var_4]
.text:00004B79                 add     ecx, 34h ; '4'
.text:00004B7C                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00004B81                 mov     ecx, [ebp+arg_4]
.text:00004B84                 mov     edx, [eax]
.text:00004B86                 mov     [ecx], edx
.text:00004B88                 mov     eax, [ebp+arg_4]
.text:00004B8B                 mov     ecx, [eax]
.text:00004B8D                 push    ecx
.text:00004B8E                 mov     ecx, [ebp+var_4]
.text:00004B91                 add     ecx, 28h ; '('
.text:00004B94                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00004B99                 mov     edx, [ebp+arg_0]
.text:00004B9C                 sub     edx, [eax]
.text:00004B9E                 mov     eax, [ebp+arg_8]
.text:00004BA1                 mov     [eax], edx
.text:00004BA3                 add     esp, 4
.text:00004BA6                 cmp     ebp, esp
.text:00004BA8                 call    __RTC_CheckEsp
.text:00004BAD                 mov     esp, ebp
.text:00004BAF                 pop     ebp
.text:00004BB0                 retn    0Ch
.text:00004BB0 ?GetCoder_for_Stream@CBindInfo@NCoderMixer2@@QBEXIAAI0@Z endp
.text:00004BB0
.text:00004BB0 ; ---------------------------------------------------------------------------
.text:00004BB3                 align 4
.text:00004BB3 _text           ends
.text:00004BB3
.text:00004BB4 ; ===========================================================================
.text:00004BB4
.text:00004BB4 ; Segment type: Pure code
.text:00004BB4 ; Segment permissions: Read/Execute
.text:00004BB4 _text           segment para public 'CODE' use32
.text:00004BB4                 assume cs:_text
.text:00004BB4                 ;org 4BB4h
.text:00004BB4 ; COMDAT (pick any)
.text:00004BB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BB4
.text:00004BB4 ; =============== S U B R O U T I N E =======================================
.text:00004BB4
.text:00004BB4 ; Attributes: bp-based frame
.text:00004BB4
.text:00004BB4 ; __int32 __thiscall NCoderMixer2::CCoder::QueryInterface(NCoderMixer2::CCoder *this, const struct _GUID *, void **)
.text:00004BB4                 public ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z
.text:00004BB4 ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z proc near
.text:00004BB4                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+B2p
.text:00004BB4                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+177p ...
.text:00004BB4
.text:00004BB4 var_8           = dword ptr -8
.text:00004BB4 var_4           = dword ptr -4
.text:00004BB4 arg_0           = dword ptr  8
.text:00004BB4 arg_4           = dword ptr  0Ch
.text:00004BB4
.text:00004BB4                 push    ebp
.text:00004BB5                 mov     ebp, esp
.text:00004BB7                 sub     esp, 8
.text:00004BBA                 push    esi
.text:00004BBB                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004BC2                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BC9                 mov     [ebp+var_4], ecx
.text:00004BCC                 mov     ecx, [ebp+var_4] ; this
.text:00004BCF                 call    ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ; NCoderMixer2::CCoder::GetUnknown(void)
.text:00004BD4                 mov     [ebp+var_8], eax
.text:00004BD7                 mov     esi, esp
.text:00004BD9                 mov     eax, [ebp+arg_4]
.text:00004BDC                 push    eax
.text:00004BDD                 mov     ecx, [ebp+arg_0]
.text:00004BE0                 push    ecx
.text:00004BE1                 mov     edx, [ebp+var_8]
.text:00004BE4                 push    edx
.text:00004BE5                 mov     eax, [ebp+var_8]
.text:00004BE8                 mov     ecx, [eax]
.text:00004BEA                 mov     edx, [ecx]
.text:00004BEC                 call    edx
.text:00004BEE                 cmp     esi, esp
.text:00004BF0                 call    __RTC_CheckEsp
.text:00004BF5                 pop     esi
.text:00004BF6                 add     esp, 8
.text:00004BF9                 cmp     ebp, esp
.text:00004BFB                 call    __RTC_CheckEsp
.text:00004C00                 mov     esp, ebp
.text:00004C02                 pop     ebp
.text:00004C03                 retn    8
.text:00004C03 ?QueryInterface@CCoder@NCoderMixer2@@QBEJABU_GUID@@PAPAX@Z endp
.text:00004C03
.text:00004C03 ; ---------------------------------------------------------------------------
.text:00004C06                 align 4
.text:00004C06 _text           ends
.text:00004C06
.text:00004C08 ; ===========================================================================
.text:00004C08
.text:00004C08 ; Segment type: Pure code
.text:00004C08 ; Segment permissions: Read/Execute
.text:00004C08 _text           segment para public 'CODE' use32
.text:00004C08                 assume cs:_text
.text:00004C08                 ;org 4C08h
.text:00004C08 ; COMDAT (pick any)
.text:00004C08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C08
.text:00004C08 ; =============== S U B R O U T I N E =======================================
.text:00004C08
.text:00004C08 ; Attributes: bp-based frame
.text:00004C08
.text:00004C08 ; struct IUnknown *__thiscall NCoderMixer2::CCoder::GetUnknown(NCoderMixer2::CCoder *__hidden this)
.text:00004C08                 public ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ
.text:00004C08 ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ proc near
.text:00004C08                                         ; CODE XREF: NCoderMixer2::CCoder::QueryInterface(_GUID const &,void * *)+1Bp
.text:00004C08
.text:00004C08 var_8           = dword ptr -8
.text:00004C08 var_4           = dword ptr -4
.text:00004C08
.text:00004C08                 push    ebp
.text:00004C09                 mov     ebp, esp
.text:00004C0B                 sub     esp, 8
.text:00004C0E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004C15                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C1C                 mov     [ebp+var_4], ecx
.text:00004C1F                 mov     ecx, [ebp+var_4]
.text:00004C22                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00004C27                 test    eax, eax
.text:00004C29                 jz      short loc_4C38
.text:00004C2B                 mov     ecx, [ebp+var_4]
.text:00004C2E                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00004C33                 mov     [ebp+var_8], eax
.text:00004C36                 jmp     short loc_4C46
.text:00004C38 ; ---------------------------------------------------------------------------
.text:00004C38
.text:00004C38 loc_4C38:                               ; CODE XREF: NCoderMixer2::CCoder::GetUnknown(void)+21j
.text:00004C38                 mov     ecx, [ebp+var_4]
.text:00004C3B                 add     ecx, 4
.text:00004C3E                 call    ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *(void)
.text:00004C43                 mov     [ebp+var_8], eax
.text:00004C46
.text:00004C46 loc_4C46:                               ; CODE XREF: NCoderMixer2::CCoder::GetUnknown(void)+2Ej
.text:00004C46                 mov     eax, [ebp+var_8]
.text:00004C49                 add     esp, 8
.text:00004C4C                 cmp     ebp, esp
.text:00004C4E                 call    __RTC_CheckEsp
.text:00004C53                 mov     esp, ebp
.text:00004C55                 pop     ebp
.text:00004C56                 retn
.text:00004C56 ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ endp
.text:00004C56
.text:00004C56 ; ---------------------------------------------------------------------------
.text:00004C57                 align 4
.text:00004C57 _text           ends
.text:00004C57
.text:00004C58 ; ===========================================================================
.text:00004C58
.text:00004C58 ; Segment type: Pure code
.text:00004C58 ; Segment permissions: Read/Execute
.text:00004C58 _text           segment para public 'CODE' use32
.text:00004C58                 assume cs:_text
.text:00004C58                 ;org 4C58h
.text:00004C58 ; COMDAT (pick any)
.text:00004C58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C58
.text:00004C58 ; =============== S U B R O U T I N E =======================================
.text:00004C58
.text:00004C58 ; Attributes: bp-based frame
.text:00004C58
.text:00004C58 ; void __thiscall CSequentialInStreamCalcSize::SetStream(CSequentialInStreamCalcSize *this, struct ISequentialInStream *)
.text:00004C58                 public ?SetStream@CSequentialInStreamCalcSize@@QAEXPAUISequentialInStream@@@Z
.text:00004C58 ?SetStream@CSequentialInStreamCalcSize@@QAEXPAUISequentialInStream@@@Z proc near
.text:00004C58                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+218p
.text:00004C58
.text:00004C58 var_4           = dword ptr -4
.text:00004C58 arg_0           = dword ptr  8
.text:00004C58
.text:00004C58                 push    ebp
.text:00004C59                 mov     ebp, esp
.text:00004C5B                 push    ecx
.text:00004C5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C63                 mov     [ebp+var_4], ecx
.text:00004C66                 mov     eax, [ebp+arg_0]
.text:00004C69                 push    eax
.text:00004C6A                 mov     ecx, [ebp+var_4]
.text:00004C6D                 add     ecx, 8
.text:00004C70                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00004C75                 add     esp, 4
.text:00004C78                 cmp     ebp, esp
.text:00004C7A                 call    __RTC_CheckEsp
.text:00004C7F                 mov     esp, ebp
.text:00004C81                 pop     ebp
.text:00004C82                 retn    4
.text:00004C82 ?SetStream@CSequentialInStreamCalcSize@@QAEXPAUISequentialInStream@@@Z endp
.text:00004C82
.text:00004C82 ; ---------------------------------------------------------------------------
.text:00004C85                 align 4
.text:00004C85 _text           ends
.text:00004C85
.text:00004C88 ; ===========================================================================
.text:00004C88
.text:00004C88 ; Segment type: Pure code
.text:00004C88 ; Segment permissions: Read/Execute
.text:00004C88 _text           segment para public 'CODE' use32
.text:00004C88                 assume cs:_text
.text:00004C88                 ;org 4C88h
.text:00004C88 ; COMDAT (pick any)
.text:00004C88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C88
.text:00004C88 ; =============== S U B R O U T I N E =======================================
.text:00004C88
.text:00004C88 ; Attributes: bp-based frame
.text:00004C88
.text:00004C88 ; void __thiscall CSequentialInStreamCalcSize::Init(CSequentialInStreamCalcSize *__hidden this)
.text:00004C88                 public ?Init@CSequentialInStreamCalcSize@@QAEXXZ
.text:00004C88 ?Init@CSequentialInStreamCalcSize@@QAEXXZ proc near
.text:00004C88                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+220p
.text:00004C88
.text:00004C88 var_4           = dword ptr -4
.text:00004C88
.text:00004C88                 push    ebp
.text:00004C89                 mov     ebp, esp
.text:00004C8B                 push    ecx
.text:00004C8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C93                 mov     [ebp+var_4], ecx
.text:00004C96                 mov     eax, [ebp+var_4]
.text:00004C99                 mov     dword ptr [eax+10h], 0
.text:00004CA0                 mov     dword ptr [eax+14h], 0
.text:00004CA7                 mov     ecx, [ebp+var_4]
.text:00004CAA                 mov     byte ptr [ecx+18h], 0
.text:00004CAE                 mov     esp, ebp
.text:00004CB0                 pop     ebp
.text:00004CB1                 retn
.text:00004CB1 ?Init@CSequentialInStreamCalcSize@@QAEXXZ endp
.text:00004CB1
.text:00004CB1 ; ---------------------------------------------------------------------------
.text:00004CB2                 align 4
.text:00004CB2 _text           ends
.text:00004CB2
.text:00004CB4 ; ===========================================================================
.text:00004CB4
.text:00004CB4 ; Segment type: Pure code
.text:00004CB4 ; Segment permissions: Read/Execute
.text:00004CB4 _text           segment para public 'CODE' use32
.text:00004CB4                 assume cs:_text
.text:00004CB4                 ;org 4CB4h
.text:00004CB4 ; COMDAT (pick any)
.text:00004CB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CB4
.text:00004CB4 ; =============== S U B R O U T I N E =======================================
.text:00004CB4
.text:00004CB4 ; Attributes: bp-based frame
.text:00004CB4
.text:00004CB4 ; unsigned int __thiscall NCoderMixer2::CBond::Get_OutIndex(NCoderMixer2::CBond *this, bool)
.text:00004CB4                 public ?Get_OutIndex@CBond@NCoderMixer2@@QBEI_N@Z
.text:00004CB4 ?Get_OutIndex@CBond@NCoderMixer2@@QBEI_N@Z proc near
.text:00004CB4                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+11Ep
.text:00004CB4
.text:00004CB4 var_8           = dword ptr -8
.text:00004CB4 var_4           = dword ptr -4
.text:00004CB4 arg_0           = byte ptr  8
.text:00004CB4
.text:00004CB4                 push    ebp
.text:00004CB5                 mov     ebp, esp
.text:00004CB7                 sub     esp, 8
.text:00004CBA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004CC1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CC8                 mov     [ebp+var_4], ecx
.text:00004CCB                 movzx   eax, [ebp+arg_0]
.text:00004CCF                 test    eax, eax
.text:00004CD1                 jz      short loc_4CDD
.text:00004CD3                 mov     ecx, [ebp+var_4]
.text:00004CD6                 mov     edx, [ecx]
.text:00004CD8                 mov     [ebp+var_8], edx
.text:00004CDB                 jmp     short loc_4CE6
.text:00004CDD ; ---------------------------------------------------------------------------
.text:00004CDD
.text:00004CDD loc_4CDD:                               ; CODE XREF: NCoderMixer2::CBond::Get_OutIndex(bool)+1Dj
.text:00004CDD                 mov     eax, [ebp+var_4]
.text:00004CE0                 mov     ecx, [eax+4]
.text:00004CE3                 mov     [ebp+var_8], ecx
.text:00004CE6
.text:00004CE6 loc_4CE6:                               ; CODE XREF: NCoderMixer2::CBond::Get_OutIndex(bool)+27j
.text:00004CE6                 mov     eax, [ebp+var_8]
.text:00004CE9                 mov     esp, ebp
.text:00004CEB                 pop     ebp
.text:00004CEC                 retn    4
.text:00004CEC ?Get_OutIndex@CBond@NCoderMixer2@@QBEI_N@Z endp
.text:00004CEC
.text:00004CEC ; ---------------------------------------------------------------------------
.text:00004CEF                 align 10h
.text:00004CEF _text           ends
.text:00004CEF
.text:00004CF0 ; ===========================================================================
.text:00004CF0
.text:00004CF0 ; Segment type: Pure code
.text:00004CF0 ; Segment permissions: Read/Execute
.text:00004CF0 _text           segment para public 'CODE' use32
.text:00004CF0                 assume cs:_text
.text:00004CF0                 ;org 4CF0h
.text:00004CF0 ; COMDAT (pick any)
.text:00004CF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CF0
.text:00004CF0 ; =============== S U B R O U T I N E =======================================
.text:00004CF0
.text:00004CF0 ; Attributes: bp-based frame
.text:00004CF0
.text:00004CF0 ; int __thiscall NCoderMixer2::CMixer::FindBond_for_Stream(NCoderMixer2::CMixer *this, bool, unsigned int)
.text:00004CF0                 public ?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z
.text:00004CF0 ?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z proc near
.text:00004CF0                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+D0p
.text:00004CF0                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+D7p ...
.text:00004CF0
.text:00004CF0 var_4           = dword ptr -4
.text:00004CF0 arg_0           = byte ptr  8
.text:00004CF0 arg_4           = dword ptr  0Ch
.text:00004CF0
.text:00004CF0                 push    ebp
.text:00004CF1                 mov     ebp, esp
.text:00004CF3                 push    ecx
.text:00004CF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CFB                 mov     [ebp+var_4], ecx
.text:00004CFE                 mov     eax, [ebp+var_4]
.text:00004D01                 movzx   ecx, byte ptr [eax+5Ch]
.text:00004D05                 movzx   edx, [ebp+arg_0]
.text:00004D09                 cmp     ecx, edx
.text:00004D0B                 jnz     short loc_4D20
.text:00004D0D                 mov     eax, [ebp+arg_4]
.text:00004D10                 push    eax             ; unsigned int
.text:00004D11                 mov     ecx, [ebp+var_4]
.text:00004D14                 add     ecx, 4          ; this
.text:00004D17                 call    ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)
.text:00004D1C                 jmp     short loc_4D2F
.text:00004D1E ; ---------------------------------------------------------------------------
.text:00004D1E                 jmp     short loc_4D2F
.text:00004D20 ; ---------------------------------------------------------------------------
.text:00004D20
.text:00004D20 loc_4D20:                               ; CODE XREF: NCoderMixer2::CMixer::FindBond_for_Stream(bool,uint)+1Bj
.text:00004D20                 mov     ecx, [ebp+arg_4]
.text:00004D23                 push    ecx             ; unsigned int
.text:00004D24                 mov     ecx, [ebp+var_4]
.text:00004D27                 add     ecx, 4          ; this
.text:00004D2A                 call    ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)
.text:00004D2F
.text:00004D2F loc_4D2F:                               ; CODE XREF: NCoderMixer2::CMixer::FindBond_for_Stream(bool,uint)+2Cj
.text:00004D2F                                         ; NCoderMixer2::CMixer::FindBond_for_Stream(bool,uint)+2Ej
.text:00004D2F                 add     esp, 4
.text:00004D32                 cmp     ebp, esp
.text:00004D34                 call    __RTC_CheckEsp
.text:00004D39                 mov     esp, ebp
.text:00004D3B                 pop     ebp
.text:00004D3C                 retn    8
.text:00004D3C ?FindBond_for_Stream@CMixer@NCoderMixer2@@IBEH_NI@Z endp
.text:00004D3C
.text:00004D3C ; ---------------------------------------------------------------------------
.text:00004D3F                 align 10h
.text:00004D3F _text           ends
.text:00004D3F
.text:00004D40 ; ===========================================================================
.text:00004D40
.text:00004D40 ; Segment type: Pure code
.text:00004D40 ; Segment permissions: Read/Execute
.text:00004D40 _text           segment para public 'CODE' use32
.text:00004D40                 assume cs:_text
.text:00004D40                 ;org 4D40h
.text:00004D40 ; COMDAT (pick any)
.text:00004D40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D40
.text:00004D40 ; =============== S U B R O U T I N E =======================================
.text:00004D40
.text:00004D40 ; Attributes: bp-based frame
.text:00004D40
.text:00004D40 ; public: __thiscall CSequentialInStreamCalcSize::CSequentialInStreamCalcSize(void)
.text:00004D40                 public ??0CSequentialInStreamCalcSize@@QAE@XZ
.text:00004D40 ??0CSequentialInStreamCalcSize@@QAE@XZ proc near
.text:00004D40                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+1D4p
.text:00004D40
.text:00004D40 var_4           = dword ptr -4
.text:00004D40
.text:00004D40                 push    ebp
.text:00004D41                 mov     ebp, esp
.text:00004D43                 push    ecx
.text:00004D44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D4B                 mov     [ebp+var_4], ecx
.text:00004D4E                 mov     ecx, [ebp+var_4] ; this
.text:00004D51                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00004D56                 mov     ecx, [ebp+var_4]
.text:00004D59                 add     ecx, 4          ; this
.text:00004D5C                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004D61                 mov     eax, [ebp+var_4]
.text:00004D64                 mov     dword ptr [eax], offset ??_7CSequentialInStreamCalcSize@@6B@ ; const CSequentialInStreamCalcSize::`vftable'
.text:00004D6A                 mov     ecx, [ebp+var_4]
.text:00004D6D                 add     ecx, 8
.text:00004D70                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00004D75                 mov     eax, [ebp+var_4]
.text:00004D78                 add     esp, 4
.text:00004D7B                 cmp     ebp, esp
.text:00004D7D                 call    __RTC_CheckEsp
.text:00004D82                 mov     esp, ebp
.text:00004D84                 pop     ebp
.text:00004D85                 retn
.text:00004D85 ??0CSequentialInStreamCalcSize@@QAE@XZ endp
.text:00004D85
.text:00004D85 ; ---------------------------------------------------------------------------
.text:00004D86                 align 4
.text:00004D86 _text           ends
.text:00004D86
.rdata:00004D88 ; ===========================================================================
.rdata:00004D88
.rdata:00004D88 ; Segment type: Pure data
.rdata:00004D88 ; Segment permissions: Read
.rdata:00004D88 _rdata          segment dword public 'DATA' use32
.rdata:00004D88                 assume cs:_rdata
.rdata:00004D88                 ;org 4D88h
.rdata:00004D88 ; COMDAT (pick largest)
.rdata:00004D88                 dd offset ??_R4CSequentialInStreamCalcSize@@6B@ ; const CSequentialInStreamCalcSize::`RTTI Complete Object Locator'
.rdata:00004D8C                 public ??_7CSequentialInStreamCalcSize@@6B@
.rdata:00004D8C ; const CSequentialInStreamCalcSize::`vftable'
.rdata:00004D8C ??_7CSequentialInStreamCalcSize@@6B@ dd offset ?QueryInterface@CSequentialInStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004D8C                                         ; DATA XREF: CSequentialInStreamCalcSize::CSequentialInStreamCalcSize(void)+24o
.rdata:00004D8C                                         ; CSequentialInStreamCalcSize::QueryInterface(_GUID const &,void * *)
.rdata:00004D90                 dd offset ?AddRef@CSequentialInStreamCalcSize@@UAGKXZ ; CSequentialInStreamCalcSize::AddRef(void)
.rdata:00004D94                 dd offset ?Release@CSequentialInStreamCalcSize@@UAGKXZ ; CSequentialInStreamCalcSize::Release(void)
.rdata:00004D98                 dd offset ?Read@CSequentialInStreamCalcSize@@UAGJPAXIPAI@Z ; CSequentialInStreamCalcSize::Read(void *,uint,uint *)
.rdata:00004D98 _rdata          ends
.rdata:00004D98
.rdata$r:00004D9C ; ===========================================================================
.rdata$r:00004D9C
.rdata$r:00004D9C ; Segment type: Pure data
.rdata$r:00004D9C ; Segment permissions: Read
.rdata$r:00004D9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004D9C                 assume cs:_rdata$r
.rdata$r:00004D9C                 ;org 4D9Ch
.rdata$r:00004D9C ; COMDAT (pick any)
.rdata$r:00004D9C                 public ??_R4CSequentialInStreamCalcSize@@6B@
.rdata$r:00004D9C ; const CSequentialInStreamCalcSize::`RTTI Complete Object Locator'
.rdata$r:00004D9C ??_R4CSequentialInStreamCalcSize@@6B@ db    0
.rdata$r:00004D9C                                         ; DATA XREF: .rdata:00004D88o
.rdata$r:00004D9D                 db    0
.rdata$r:00004D9E                 db    0
.rdata$r:00004D9F                 db    0
.rdata$r:00004DA0                 db    0
.rdata$r:00004DA1                 db    0
.rdata$r:00004DA2                 db    0
.rdata$r:00004DA3                 db    0
.rdata$r:00004DA4                 db    0
.rdata$r:00004DA5                 db    0
.rdata$r:00004DA6                 db    0
.rdata$r:00004DA7                 db    0
.rdata$r:00004DA8                 dd offset ??_R0?AVCSequentialInStreamCalcSize@@@8 ; CSequentialInStreamCalcSize `RTTI Type Descriptor'
.rdata$r:00004DAC                 dd offset ??_R3CSequentialInStreamCalcSize@@8 ; CSequentialInStreamCalcSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004DAC _rdata$r        ends
.rdata$r:00004DAC
.data:00004DB0 ; ===========================================================================
.data:00004DB0
.data:00004DB0 ; Segment type: Pure data
.data:00004DB0 ; Segment permissions: Read/Write
.data:00004DB0 _data           segment dword public 'DATA' use32
.data:00004DB0                 assume cs:_data
.data:00004DB0                 ;org 4DB0h
.data:00004DB0 ; COMDAT (pick any)
.data:00004DB0                 public ??_R0?AVCSequentialInStreamCalcSize@@@8
.data:00004DB0 ; class CSequentialInStreamCalcSize `RTTI Type Descriptor'
.data:00004DB0 ??_R0?AVCSequentialInStreamCalcSize@@@8 dd offset ??_7type_info@@6B@
.data:00004DB0                                         ; DATA XREF: .rdata$r:00004DA8o
.data:00004DB0                                         ; .rdata$r:CSequentialInStreamCalcSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004DB0                                         ; const type_info::`vftable'
.data:00004DB4                 align 8
.data:00004DB8 a_?avcsequentia db '.?AVCSequentialInStreamCalcSize@@',0
.data:00004DDA                 align 4
.data:00004DDA _data           ends
.data:00004DDA
.rdata$r:00004DDC ; ===========================================================================
.rdata$r:00004DDC
.rdata$r:00004DDC ; Segment type: Pure data
.rdata$r:00004DDC ; Segment permissions: Read
.rdata$r:00004DDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004DDC                 assume cs:_rdata$r
.rdata$r:00004DDC                 ;org 4DDCh
.rdata$r:00004DDC ; COMDAT (pick any)
.rdata$r:00004DDC                 public ??_R3CSequentialInStreamCalcSize@@8
.rdata$r:00004DDC ; CSequentialInStreamCalcSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004DDC ??_R3CSequentialInStreamCalcSize@@8 db    0
.rdata$r:00004DDC                                         ; DATA XREF: .rdata$r:00004DACo
.rdata$r:00004DDC                                         ; .rdata$r:00004E18o
.rdata$r:00004DDD                 db    0
.rdata$r:00004DDE                 db    0
.rdata$r:00004DDF                 db    0
.rdata$r:00004DE0                 db    1
.rdata$r:00004DE1                 db    0
.rdata$r:00004DE2                 db    0
.rdata$r:00004DE3                 db    0
.rdata$r:00004DE4                 db    4
.rdata$r:00004DE5                 db    0
.rdata$r:00004DE6                 db    0
.rdata$r:00004DE7                 db    0
.rdata$r:00004DE8                 dd offset ??_R2CSequentialInStreamCalcSize@@8 ; CSequentialInStreamCalcSize::`RTTI Base Class Array'
.rdata$r:00004DE8 _rdata$r        ends
.rdata$r:00004DE8
.rdata$r:00004DEC ; ===========================================================================
.rdata$r:00004DEC
.rdata$r:00004DEC ; Segment type: Pure data
.rdata$r:00004DEC ; Segment permissions: Read
.rdata$r:00004DEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004DEC                 assume cs:_rdata$r
.rdata$r:00004DEC                 ;org 4DECh
.rdata$r:00004DEC ; COMDAT (pick any)
.rdata$r:00004DEC                 public ??_R2CSequentialInStreamCalcSize@@8
.rdata$r:00004DEC ; CSequentialInStreamCalcSize::`RTTI Base Class Array'
.rdata$r:00004DEC ??_R2CSequentialInStreamCalcSize@@8 dd offset ??_R1A@?0A@EA@CSequentialInStreamCalcSize@@8
.rdata$r:00004DEC                                         ; DATA XREF: .rdata$r:00004DE8o
.rdata$r:00004DEC                                         ; CSequentialInStreamCalcSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004DF0                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004DF4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004DF8                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00004DFC                 db    0
.rdata$r:00004DFD                 align 10h
.rdata$r:00004DFD _rdata$r        ends
.rdata$r:00004DFD
.rdata$r:00004E00 ; ===========================================================================
.rdata$r:00004E00
.rdata$r:00004E00 ; Segment type: Pure data
.rdata$r:00004E00 ; Segment permissions: Read
.rdata$r:00004E00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004E00                 assume cs:_rdata$r
.rdata$r:00004E00                 ;org 4E00h
.rdata$r:00004E00 ; COMDAT (pick any)
.rdata$r:00004E00                 public ??_R1A@?0A@EA@CSequentialInStreamCalcSize@@8
.rdata$r:00004E00 ; CSequentialInStreamCalcSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004E00 ??_R1A@?0A@EA@CSequentialInStreamCalcSize@@8 dd offset ??_R0?AVCSequentialInStreamCalcSize@@@8
.rdata$r:00004E00                                         ; DATA XREF: .rdata$r:CSequentialInStreamCalcSize::`RTTI Base Class Array'o
.rdata$r:00004E00                                         ; CSequentialInStreamCalcSize `RTTI Type Descriptor'
.rdata$r:00004E04                 db    3
.rdata$r:00004E05                 db    0
.rdata$r:00004E06                 db    0
.rdata$r:00004E07                 db    0
.rdata$r:00004E08                 db    0
.rdata$r:00004E09                 db    0
.rdata$r:00004E0A                 db    0
.rdata$r:00004E0B                 db    0
.rdata$r:00004E0C                 db 0FFh
.rdata$r:00004E0D                 db 0FFh
.rdata$r:00004E0E                 db 0FFh
.rdata$r:00004E0F                 db 0FFh
.rdata$r:00004E10                 db    0
.rdata$r:00004E11                 db    0
.rdata$r:00004E12                 db    0
.rdata$r:00004E13                 db    0
.rdata$r:00004E14                 db  40h ; @
.rdata$r:00004E15                 db    0
.rdata$r:00004E16                 db    0
.rdata$r:00004E17                 db    0
.rdata$r:00004E18                 dd offset ??_R3CSequentialInStreamCalcSize@@8 ; CSequentialInStreamCalcSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004E18 _rdata$r        ends
.rdata$r:00004E18
.rdata$r:00004E1C ; ===========================================================================
.rdata$r:00004E1C
.rdata$r:00004E1C ; Segment type: Pure data
.rdata$r:00004E1C ; Segment permissions: Read
.rdata$r:00004E1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004E1C                 assume cs:_rdata$r
.rdata$r:00004E1C                 ;org 4E1Ch
.rdata$r:00004E1C ; COMDAT (pick any)
.rdata$r:00004E1C                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00004E1C ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004E1C ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00004E1C                                         ; DATA XREF: .rdata$r:00004DF0o
.rdata$r:00004E1C                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00004E1C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00004E20                 db    1
.rdata$r:00004E21                 db    0
.rdata$r:00004E22                 db    0
.rdata$r:00004E23                 db    0
.rdata$r:00004E24                 db    0
.rdata$r:00004E25                 db    0
.rdata$r:00004E26                 db    0
.rdata$r:00004E27                 db    0
.rdata$r:00004E28                 db 0FFh
.rdata$r:00004E29                 db 0FFh
.rdata$r:00004E2A                 db 0FFh
.rdata$r:00004E2B                 db 0FFh
.rdata$r:00004E2C                 db    0
.rdata$r:00004E2D                 db    0
.rdata$r:00004E2E                 db    0
.rdata$r:00004E2F                 db    0
.rdata$r:00004E30                 db  40h ; @
.rdata$r:00004E31                 db    0
.rdata$r:00004E32                 db    0
.rdata$r:00004E33                 db    0
.rdata$r:00004E34                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004E34 _rdata$r        ends
.rdata$r:00004E34
.data:00004E38 ; ===========================================================================
.data:00004E38
.data:00004E38 ; Segment type: Pure data
.data:00004E38 ; Segment permissions: Read/Write
.data:00004E38 _data           segment dword public 'DATA' use32
.data:00004E38                 assume cs:_data
.data:00004E38                 ;org 4E38h
.data:00004E38 ; COMDAT (pick any)
.data:00004E38                 public ??_R0?AUISequentialInStream@@@8
.data:00004E38 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00004E38 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00004E38                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004E38                                         ; .rdata$r:00005054o
.data:00004E38                                         ; const type_info::`vftable'
.data:00004E3C                 align 10h
.data:00004E40 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00004E5A                 align 4
.data:00004E5A _data           ends
.data:00004E5A
.rdata$r:00004E5C ; ===========================================================================
.rdata$r:00004E5C
.rdata$r:00004E5C ; Segment type: Pure data
.rdata$r:00004E5C ; Segment permissions: Read
.rdata$r:00004E5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004E5C                 assume cs:_rdata$r
.rdata$r:00004E5C                 ;org 4E5Ch
.rdata$r:00004E5C ; COMDAT (pick any)
.rdata$r:00004E5C                 public ??_R3ISequentialInStream@@8
.rdata$r:00004E5C ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004E5C ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00004E34o
.rdata$r:00004E5C                                         ; .rdata$r:00005058o
.rdata$r:00004E5D                 db    0
.rdata$r:00004E5E                 db    0
.rdata$r:00004E5F                 db    0
.rdata$r:00004E60                 db    0
.rdata$r:00004E61                 db    0
.rdata$r:00004E62                 db    0
.rdata$r:00004E63                 db    0
.rdata$r:00004E64                 db    2
.rdata$r:00004E65                 db    0
.rdata$r:00004E66                 db    0
.rdata$r:00004E67                 db    0
.rdata$r:00004E68                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00004E68 _rdata$r        ends
.rdata$r:00004E68
.rdata$r:00004E6C ; ===========================================================================
.rdata$r:00004E6C
.rdata$r:00004E6C ; Segment type: Pure data
.rdata$r:00004E6C ; Segment permissions: Read
.rdata$r:00004E6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004E6C                 assume cs:_rdata$r
.rdata$r:00004E6C                 ;org 4E6Ch
.rdata$r:00004E6C ; COMDAT (pick any)
.rdata$r:00004E6C                 public ??_R2ISequentialInStream@@8
.rdata$r:00004E6C ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00004E6C ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00004E6C                                         ; DATA XREF: .rdata$r:00004E68o
.rdata$r:00004E6C                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004E70                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004E74                 db    0
.rdata$r:00004E75                 align 4
.rdata$r:00004E75 _rdata$r        ends
.rdata$r:00004E75
.rdata$r:00004E78 ; ===========================================================================
.rdata$r:00004E78
.rdata$r:00004E78 ; Segment type: Pure data
.rdata$r:00004E78 ; Segment permissions: Read
.rdata$r:00004E78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004E78                 assume cs:_rdata$r
.rdata$r:00004E78                 ;org 4E78h
.rdata$r:00004E78 ; COMDAT (pick any)
.rdata$r:00004E78                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00004E78 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00004E78 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00004E78                                         ; DATA XREF: .rdata$r:00004DF8o
.rdata$r:00004E78                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00004E7C                 align 10h
.rdata$r:00004E80                 db    4
.rdata$r:00004E81                 db    0
.rdata$r:00004E82                 db    0
.rdata$r:00004E83                 db    0
.rdata$r:00004E84                 db 0FFh
.rdata$r:00004E85                 db 0FFh
.rdata$r:00004E86                 db 0FFh
.rdata$r:00004E87                 db 0FFh
.rdata$r:00004E88                 db    0
.rdata$r:00004E89                 db    0
.rdata$r:00004E8A                 db    0
.rdata$r:00004E8B                 db    0
.rdata$r:00004E8C                 db  40h ; @
.rdata$r:00004E8D                 db    0
.rdata$r:00004E8E                 db    0
.rdata$r:00004E8F                 db    0
.rdata$r:00004E90                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004E90 _rdata$r        ends
.rdata$r:00004E90
.text:00004E94 ; ===========================================================================
.text:00004E94
.text:00004E94 ; Segment type: Pure code
.text:00004E94 ; Segment permissions: Read/Execute
.text:00004E94 _text           segment para public 'CODE' use32
.text:00004E94                 assume cs:_text
.text:00004E94                 ;org 4E94h
.text:00004E94 ; COMDAT (pick any)
.text:00004E94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004E94
.text:00004E94 ; =============== S U B R O U T I N E =======================================
.text:00004E94
.text:00004E94 ; Attributes: bp-based frame
.text:00004E94
.text:00004E94 ; __int32 __stdcall CSequentialInStreamCalcSize::QueryInterface(CSequentialInStreamCalcSize *this, const struct _GUID *Buf1, void **)
.text:00004E94                 public ?QueryInterface@CSequentialInStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z
.text:00004E94 ?QueryInterface@CSequentialInStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004E94                                         ; DATA XREF: .rdata:const CSequentialInStreamCalcSize::`vftable'o
.text:00004E94
.text:00004E94 this            = dword ptr  8
.text:00004E94 Buf1            = dword ptr  0Ch
.text:00004E94 arg_8           = dword ptr  10h
.text:00004E94
.text:00004E94                 push    ebp
.text:00004E95                 mov     ebp, esp
.text:00004E97                 mov     eax, [ebp+arg_8]
.text:00004E9A                 mov     dword ptr [eax], 0
.text:00004EA0                 push    offset _IID_IUnknown ; Buf2
.text:00004EA5                 mov     ecx, [ebp+Buf1]
.text:00004EA8                 push    ecx             ; Buf1
.text:00004EA9                 call    ___@8           ; __(x,x)
.text:00004EAE                 test    eax, eax
.text:00004EB0                 jz      short loc_4EBC
.text:00004EB2                 mov     edx, [ebp+arg_8]
.text:00004EB5                 mov     eax, [ebp+this]
.text:00004EB8                 mov     [edx], eax
.text:00004EBA                 jmp     short loc_4EDF
.text:00004EBC ; ---------------------------------------------------------------------------
.text:00004EBC
.text:00004EBC loc_4EBC:                               ; CODE XREF: CSequentialInStreamCalcSize::QueryInterface(_GUID const &,void * *)+1Cj
.text:00004EBC                 push    offset _IID_ISequentialInStream ; Buf2
.text:00004EC1                 mov     ecx, [ebp+Buf1]
.text:00004EC4                 push    ecx             ; Buf1
.text:00004EC5                 call    ___@8           ; __(x,x)
.text:00004ECA                 test    eax, eax
.text:00004ECC                 jz      short loc_4ED8
.text:00004ECE                 mov     edx, [ebp+arg_8]
.text:00004ED1                 mov     eax, [ebp+this]
.text:00004ED4                 mov     [edx], eax
.text:00004ED6                 jmp     short loc_4EDF
.text:00004ED8 ; ---------------------------------------------------------------------------
.text:00004ED8
.text:00004ED8 loc_4ED8:                               ; CODE XREF: CSequentialInStreamCalcSize::QueryInterface(_GUID const &,void * *)+38j
.text:00004ED8                 mov     eax, 80004002h
.text:00004EDD                 jmp     short loc_4EF0
.text:00004EDF ; ---------------------------------------------------------------------------
.text:00004EDF
.text:00004EDF loc_4EDF:                               ; CODE XREF: CSequentialInStreamCalcSize::QueryInterface(_GUID const &,void * *)+26j
.text:00004EDF                                         ; CSequentialInStreamCalcSize::QueryInterface(_GUID const &,void * *)+42j
.text:00004EDF                 mov     ecx, [ebp+this]
.text:00004EE2                 mov     edx, [ecx+4]
.text:00004EE5                 add     edx, 1
.text:00004EE8                 mov     eax, [ebp+this]
.text:00004EEB                 mov     [eax+4], edx
.text:00004EEE                 xor     eax, eax
.text:00004EF0
.text:00004EF0 loc_4EF0:                               ; CODE XREF: CSequentialInStreamCalcSize::QueryInterface(_GUID const &,void * *)+49j
.text:00004EF0                 cmp     ebp, esp
.text:00004EF2                 call    __RTC_CheckEsp
.text:00004EF7                 pop     ebp
.text:00004EF8                 retn    0Ch
.text:00004EF8 ?QueryInterface@CSequentialInStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004EF8
.text:00004EF8 ; ---------------------------------------------------------------------------
.text:00004EFB                 align 4
.text:00004EFB _text           ends
.text:00004EFB
.text:00004EFC ; ===========================================================================
.text:00004EFC
.text:00004EFC ; Segment type: Pure code
.text:00004EFC ; Segment permissions: Read/Execute
.text:00004EFC _text           segment para public 'CODE' use32
.text:00004EFC                 assume cs:_text
.text:00004EFC                 ;org 4EFCh
.text:00004EFC ; COMDAT (pick any)
.text:00004EFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004EFC
.text:00004EFC ; =============== S U B R O U T I N E =======================================
.text:00004EFC
.text:00004EFC ; Attributes: bp-based frame
.text:00004EFC
.text:00004EFC ; unsigned __int32 __stdcall CSequentialInStreamCalcSize::AddRef(CSequentialInStreamCalcSize *this)
.text:00004EFC                 public ?AddRef@CSequentialInStreamCalcSize@@UAGKXZ
.text:00004EFC ?AddRef@CSequentialInStreamCalcSize@@UAGKXZ proc near
.text:00004EFC                                         ; DATA XREF: .rdata:00004D90o
.text:00004EFC
.text:00004EFC var_4           = dword ptr -4
.text:00004EFC this            = dword ptr  8
.text:00004EFC
.text:00004EFC                 push    ebp
.text:00004EFD                 mov     ebp, esp
.text:00004EFF                 push    ecx
.text:00004F00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F07                 mov     eax, [ebp+this]
.text:00004F0A                 mov     ecx, [eax+4]
.text:00004F0D                 add     ecx, 1
.text:00004F10                 mov     [ebp+var_4], ecx
.text:00004F13                 mov     edx, [ebp+this]
.text:00004F16                 mov     eax, [ebp+var_4]
.text:00004F19                 mov     [edx+4], eax
.text:00004F1C                 mov     eax, [ebp+var_4]
.text:00004F1F                 mov     esp, ebp
.text:00004F21                 pop     ebp
.text:00004F22                 retn    4
.text:00004F22 ?AddRef@CSequentialInStreamCalcSize@@UAGKXZ endp
.text:00004F22
.text:00004F22 ; ---------------------------------------------------------------------------
.text:00004F25                 align 4
.text:00004F25 _text           ends
.text:00004F25
.text:00004F28 ; ===========================================================================
.text:00004F28
.text:00004F28 ; Segment type: Pure code
.text:00004F28 ; Segment permissions: Read/Execute
.text:00004F28 _text           segment para public 'CODE' use32
.text:00004F28                 assume cs:_text
.text:00004F28                 ;org 4F28h
.text:00004F28 ; COMDAT (pick any)
.text:00004F28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004F28
.text:00004F28 ; =============== S U B R O U T I N E =======================================
.text:00004F28
.text:00004F28 ; Attributes: bp-based frame
.text:00004F28
.text:00004F28 ; unsigned __int32 __stdcall CSequentialInStreamCalcSize::Release(CSequentialInStreamCalcSize *this)
.text:00004F28                 public ?Release@CSequentialInStreamCalcSize@@UAGKXZ
.text:00004F28 ?Release@CSequentialInStreamCalcSize@@UAGKXZ proc near
.text:00004F28                                         ; DATA XREF: .rdata:00004D94o
.text:00004F28
.text:00004F28 var_10          = dword ptr -10h
.text:00004F28 var_C           = dword ptr -0Ch
.text:00004F28 var_8           = dword ptr -8
.text:00004F28 var_4           = dword ptr -4
.text:00004F28 this            = dword ptr  8
.text:00004F28
.text:00004F28                 push    ebp
.text:00004F29                 mov     ebp, esp
.text:00004F2B                 sub     esp, 10h
.text:00004F2E                 mov     eax, 0CCCCCCCCh
.text:00004F33                 mov     [ebp+var_10], eax
.text:00004F36                 mov     [ebp+var_C], eax
.text:00004F39                 mov     [ebp+var_8], eax
.text:00004F3C                 mov     [ebp+var_4], eax
.text:00004F3F                 mov     eax, [ebp+this]
.text:00004F42                 mov     ecx, [eax+4]
.text:00004F45                 sub     ecx, 1
.text:00004F48                 mov     [ebp+var_C], ecx
.text:00004F4B                 mov     edx, [ebp+this]
.text:00004F4E                 mov     eax, [ebp+var_C]
.text:00004F51                 mov     [edx+4], eax
.text:00004F54                 cmp     [ebp+var_C], 0
.text:00004F58                 jz      short loc_4F62
.text:00004F5A                 mov     ecx, [ebp+this]
.text:00004F5D                 mov     eax, [ecx+4]
.text:00004F60                 jmp     short loc_4F8C
.text:00004F62 ; ---------------------------------------------------------------------------
.text:00004F62
.text:00004F62 loc_4F62:                               ; CODE XREF: CSequentialInStreamCalcSize::Release(void)+30j
.text:00004F62                 mov     edx, [ebp+this]
.text:00004F65                 mov     [ebp+var_8], edx
.text:00004F68                 mov     eax, [ebp+var_8]
.text:00004F6B                 mov     [ebp+var_4], eax
.text:00004F6E                 cmp     [ebp+var_4], 0
.text:00004F72                 jz      short loc_4F83
.text:00004F74                 push    1
.text:00004F76                 mov     ecx, [ebp+var_4]
.text:00004F79                 call    ??_GCSequentialInStreamCalcSize@@QAEPAXI@Z ; CSequentialInStreamCalcSize::`scalar deleting destructor'(uint)
.text:00004F7E                 mov     [ebp+var_10], eax
.text:00004F81                 jmp     short loc_4F8A
.text:00004F83 ; ---------------------------------------------------------------------------
.text:00004F83
.text:00004F83 loc_4F83:                               ; CODE XREF: CSequentialInStreamCalcSize::Release(void)+4Aj
.text:00004F83                 mov     [ebp+var_10], 0
.text:00004F8A
.text:00004F8A loc_4F8A:                               ; CODE XREF: CSequentialInStreamCalcSize::Release(void)+59j
.text:00004F8A                 xor     eax, eax
.text:00004F8C
.text:00004F8C loc_4F8C:                               ; CODE XREF: CSequentialInStreamCalcSize::Release(void)+38j
.text:00004F8C                 add     esp, 10h
.text:00004F8F                 cmp     ebp, esp
.text:00004F91                 call    __RTC_CheckEsp
.text:00004F96                 mov     esp, ebp
.text:00004F98                 pop     ebp
.text:00004F99                 retn    4
.text:00004F99 ?Release@CSequentialInStreamCalcSize@@UAGKXZ endp
.text:00004F99
.text:00004F99 _text           ends
.text:00004F99
.text:00004F9C ; ===========================================================================
.text:00004F9C
.text:00004F9C ; Segment type: Pure code
.text:00004F9C ; Segment permissions: Read/Execute
.text:00004F9C _text           segment para public 'CODE' use32
.text:00004F9C                 assume cs:_text
.text:00004F9C                 ;org 4F9Ch
.text:00004F9C ; COMDAT (pick any)
.text:00004F9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004F9C
.text:00004F9C ; =============== S U B R O U T I N E =======================================
.text:00004F9C
.text:00004F9C ; Attributes: bp-based frame
.text:00004F9C
.text:00004F9C ; public: void * __thiscall CSequentialInStreamCalcSize::`scalar deleting destructor'(unsigned int)
.text:00004F9C                 public ??_GCSequentialInStreamCalcSize@@QAEPAXI@Z
.text:00004F9C ??_GCSequentialInStreamCalcSize@@QAEPAXI@Z proc near
.text:00004F9C                                         ; CODE XREF: CSequentialInStreamCalcSize::Release(void)+51p
.text:00004F9C
.text:00004F9C var_4           = dword ptr -4
.text:00004F9C arg_0           = dword ptr  8
.text:00004F9C
.text:00004F9C                 push    ebp
.text:00004F9D                 mov     ebp, esp
.text:00004F9F                 push    ecx
.text:00004FA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FA7                 mov     [ebp+var_4], ecx
.text:00004FAA                 mov     ecx, [ebp+var_4] ; this
.text:00004FAD                 call    ??1CSequentialInStreamCalcSize@@QAE@XZ ; CSequentialInStreamCalcSize::~CSequentialInStreamCalcSize(void)
.text:00004FB2                 mov     eax, [ebp+arg_0]
.text:00004FB5                 and     eax, 1
.text:00004FB8                 jz      short loc_4FC6
.text:00004FBA                 mov     ecx, [ebp+var_4]
.text:00004FBD                 push    ecx             ; void *
.text:00004FBE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004FC3                 add     esp, 4
.text:00004FC6
.text:00004FC6 loc_4FC6:                               ; CODE XREF: CSequentialInStreamCalcSize::`scalar deleting destructor'(uint)+1Cj
.text:00004FC6                 mov     eax, [ebp+var_4]
.text:00004FC9                 add     esp, 4
.text:00004FCC                 cmp     ebp, esp
.text:00004FCE                 call    __RTC_CheckEsp
.text:00004FD3                 mov     esp, ebp
.text:00004FD5                 pop     ebp
.text:00004FD6                 retn    4
.text:00004FD6 ??_GCSequentialInStreamCalcSize@@QAEPAXI@Z endp
.text:00004FD6
.text:00004FD6 ; ---------------------------------------------------------------------------
.text:00004FD9                 align 4
.text:00004FD9 _text           ends
.text:00004FD9
.text:00004FDC ; ===========================================================================
.text:00004FDC
.text:00004FDC ; Segment type: Pure code
.text:00004FDC ; Segment permissions: Read/Execute
.text:00004FDC _text           segment para public 'CODE' use32
.text:00004FDC                 assume cs:_text
.text:00004FDC                 ;org 4FDCh
.text:00004FDC ; COMDAT (pick any)
.text:00004FDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004FDC
.text:00004FDC ; =============== S U B R O U T I N E =======================================
.text:00004FDC
.text:00004FDC ; Attributes: bp-based frame
.text:00004FDC
.text:00004FDC ; _DWORD __thiscall CSequentialInStreamCalcSize::~CSequentialInStreamCalcSize(CSequentialInStreamCalcSize *__hidden this)
.text:00004FDC                 public ??1CSequentialInStreamCalcSize@@QAE@XZ
.text:00004FDC ??1CSequentialInStreamCalcSize@@QAE@XZ proc near
.text:00004FDC                                         ; CODE XREF: CSequentialInStreamCalcSize::`scalar deleting destructor'(uint)+11p
.text:00004FDC
.text:00004FDC var_4           = dword ptr -4
.text:00004FDC
.text:00004FDC                 push    ebp
.text:00004FDD                 mov     ebp, esp
.text:00004FDF                 push    ecx
.text:00004FE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FE7                 mov     [ebp+var_4], ecx
.text:00004FEA                 mov     ecx, [ebp+var_4]
.text:00004FED                 add     ecx, 8
.text:00004FF0                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004FF5                 add     esp, 4
.text:00004FF8                 cmp     ebp, esp
.text:00004FFA                 call    __RTC_CheckEsp
.text:00004FFF                 mov     esp, ebp
.text:00005001                 pop     ebp
.text:00005002                 retn
.text:00005002 ??1CSequentialInStreamCalcSize@@QAE@XZ endp
.text:00005002
.text:00005002 ; ---------------------------------------------------------------------------
.text:00005003                 align 4
.text:00005003 _text           ends
.text:00005003
.text:00005004 ; ===========================================================================
.text:00005004
.text:00005004 ; Segment type: Pure code
.text:00005004 ; Segment permissions: Read/Execute
.text:00005004 _text           segment para public 'CODE' use32
.text:00005004                 assume cs:_text
.text:00005004                 ;org 5004h
.text:00005004 ; COMDAT (pick any)
.text:00005004                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005004
.text:00005004 ; =============== S U B R O U T I N E =======================================
.text:00005004
.text:00005004 ; Attributes: bp-based frame
.text:00005004
.text:00005004 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00005004                 public ??0ISequentialInStream@@QAE@XZ
.text:00005004 ??0ISequentialInStream@@QAE@XZ proc near
.text:00005004                                         ; CODE XREF: CSequentialInStreamCalcSize::CSequentialInStreamCalcSize(void)+11p
.text:00005004
.text:00005004 var_4           = dword ptr -4
.text:00005004
.text:00005004                 push    ebp
.text:00005005                 mov     ebp, esp
.text:00005007                 push    ecx
.text:00005008                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000500F                 mov     [ebp+var_4], ecx
.text:00005012                 mov     ecx, [ebp+var_4]
.text:00005015                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000501A                 mov     eax, [ebp+var_4]
.text:0000501D                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00005023                 mov     eax, [ebp+var_4]
.text:00005026                 add     esp, 4
.text:00005029                 cmp     ebp, esp
.text:0000502B                 call    __RTC_CheckEsp
.text:00005030                 mov     esp, ebp
.text:00005032                 pop     ebp
.text:00005033                 retn
.text:00005033 ??0ISequentialInStream@@QAE@XZ endp
.text:00005033
.text:00005033 _text           ends
.text:00005033
.rdata:00005034 ; ===========================================================================
.rdata:00005034
.rdata:00005034 ; Segment type: Pure data
.rdata:00005034 ; Segment permissions: Read
.rdata:00005034 _rdata          segment dword public 'DATA' use32
.rdata:00005034                 assume cs:_rdata
.rdata:00005034                 ;org 5034h
.rdata:00005034 ; COMDAT (pick largest)
.rdata:00005034                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00005038                 public ??_7ISequentialInStream@@6B@
.rdata:00005038 ; const ISequentialInStream::`vftable'
.rdata:00005038 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00005038                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:0000503C                 dd offset __purecall
.rdata:00005040                 dd offset __purecall
.rdata:00005044                 dd offset __purecall
.rdata:00005044 _rdata          ends
.rdata:00005044
.rdata$r:00005048 ; ===========================================================================
.rdata$r:00005048
.rdata$r:00005048 ; Segment type: Pure data
.rdata$r:00005048 ; Segment permissions: Read
.rdata$r:00005048 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005048                 assume cs:_rdata$r
.rdata$r:00005048                 ;org 5048h
.rdata$r:00005048 ; COMDAT (pick any)
.rdata$r:00005048                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00005048 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00005048 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00005034o
.rdata$r:00005049                 db    0
.rdata$r:0000504A                 db    0
.rdata$r:0000504B                 db    0
.rdata$r:0000504C                 db    0
.rdata$r:0000504D                 db    0
.rdata$r:0000504E                 db    0
.rdata$r:0000504F                 db    0
.rdata$r:00005050                 db    0
.rdata$r:00005051                 db    0
.rdata$r:00005052                 db    0
.rdata$r:00005053                 db    0
.rdata$r:00005054                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00005058                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005058 _rdata$r        ends
.rdata$r:00005058
.text:0000505C ; ===========================================================================
.text:0000505C
.text:0000505C ; Segment type: Pure code
.text:0000505C ; Segment permissions: Read/Execute
.text:0000505C _text           segment para public 'CODE' use32
.text:0000505C                 assume cs:_text
.text:0000505C                 ;org 505Ch
.text:0000505C ; COMDAT (pick any)
.text:0000505C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000505C
.text:0000505C ; =============== S U B R O U T I N E =======================================
.text:0000505C
.text:0000505C ; Attributes: bp-based frame
.text:0000505C
.text:0000505C ; void __thiscall COutStreamCalcSize::SetStream(COutStreamCalcSize *this, struct ISequentialOutStream *)
.text:0000505C                 public ?SetStream@COutStreamCalcSize@@QAEXPAUISequentialOutStream@@@Z
.text:0000505C ?SetStream@COutStreamCalcSize@@QAEXPAUISequentialOutStream@@@Z proc near
.text:0000505C                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+461p
.text:0000505C
.text:0000505C var_4           = dword ptr -4
.text:0000505C arg_0           = dword ptr  8
.text:0000505C
.text:0000505C                 push    ebp
.text:0000505D                 mov     ebp, esp
.text:0000505F                 push    ecx
.text:00005060                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005067                 mov     [ebp+var_4], ecx
.text:0000506A                 mov     eax, [ebp+arg_0]
.text:0000506D                 push    eax
.text:0000506E                 mov     ecx, [ebp+var_4]
.text:00005071                 add     ecx, 0Ch
.text:00005074                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00005079                 add     esp, 4
.text:0000507C                 cmp     ebp, esp
.text:0000507E                 call    __RTC_CheckEsp
.text:00005083                 mov     esp, ebp
.text:00005085                 pop     ebp
.text:00005086                 retn    4
.text:00005086 ?SetStream@COutStreamCalcSize@@QAEXPAUISequentialOutStream@@@Z endp
.text:00005086
.text:00005086 ; ---------------------------------------------------------------------------
.text:00005089                 align 4
.text:00005089 _text           ends
.text:00005089
.text:0000508C ; ===========================================================================
.text:0000508C
.text:0000508C ; Segment type: Pure code
.text:0000508C ; Segment permissions: Read/Execute
.text:0000508C _text           segment para public 'CODE' use32
.text:0000508C                 assume cs:_text
.text:0000508C                 ;org 508Ch
.text:0000508C ; COMDAT (pick any)
.text:0000508C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000508C
.text:0000508C ; =============== S U B R O U T I N E =======================================
.text:0000508C
.text:0000508C ; Attributes: bp-based frame
.text:0000508C
.text:0000508C ; void __thiscall COutStreamCalcSize::Init(COutStreamCalcSize *__hidden this)
.text:0000508C                 public ?Init@COutStreamCalcSize@@QAEXXZ
.text:0000508C ?Init@COutStreamCalcSize@@QAEXXZ proc near
.text:0000508C                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+469p
.text:0000508C
.text:0000508C var_4           = dword ptr -4
.text:0000508C
.text:0000508C                 push    ebp
.text:0000508D                 mov     ebp, esp
.text:0000508F                 push    ecx
.text:00005090                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005097                 mov     [ebp+var_4], ecx
.text:0000509A                 mov     eax, [ebp+var_4]
.text:0000509D                 mov     dword ptr [eax+10h], 0
.text:000050A4                 mov     dword ptr [eax+14h], 0
.text:000050AB                 mov     esp, ebp
.text:000050AD                 pop     ebp
.text:000050AE                 retn
.text:000050AE ?Init@COutStreamCalcSize@@QAEXXZ endp
.text:000050AE
.text:000050AE ; ---------------------------------------------------------------------------
.text:000050AF                 align 10h
.text:000050AF _text           ends
.text:000050AF
.text:000050B0 ; ===========================================================================
.text:000050B0
.text:000050B0 ; Segment type: Pure code
.text:000050B0 ; Segment permissions: Read/Execute
.text:000050B0 _text           segment para public 'CODE' use32
.text:000050B0                 assume cs:_text
.text:000050B0                 ;org 50B0h
.text:000050B0 ; COMDAT (pick any)
.text:000050B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000050B0
.text:000050B0 ; =============== S U B R O U T I N E =======================================
.text:000050B0
.text:000050B0 ; Attributes: bp-based frame
.text:000050B0
.text:000050B0 ; unsigned int __thiscall NCoderMixer2::CBond::Get_InIndex(NCoderMixer2::CBond *this, bool)
.text:000050B0                 public ?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z
.text:000050B0 ?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z proc near
.text:000050B0                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+11Cp
.text:000050B0                                         ; NCoderMixer2::CMixerST::FinishStream(uint)+BDp
.text:000050B0
.text:000050B0 var_8           = dword ptr -8
.text:000050B0 var_4           = dword ptr -4
.text:000050B0 arg_0           = byte ptr  8
.text:000050B0
.text:000050B0                 push    ebp
.text:000050B1                 mov     ebp, esp
.text:000050B3                 sub     esp, 8
.text:000050B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000050BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050C4                 mov     [ebp+var_4], ecx
.text:000050C7                 movzx   eax, [ebp+arg_0]
.text:000050CB                 test    eax, eax
.text:000050CD                 jz      short loc_50DA
.text:000050CF                 mov     ecx, [ebp+var_4]
.text:000050D2                 mov     edx, [ecx+4]
.text:000050D5                 mov     [ebp+var_8], edx
.text:000050D8                 jmp     short loc_50E2
.text:000050DA ; ---------------------------------------------------------------------------
.text:000050DA
.text:000050DA loc_50DA:                               ; CODE XREF: NCoderMixer2::CBond::Get_InIndex(bool)+1Dj
.text:000050DA                 mov     eax, [ebp+var_4]
.text:000050DD                 mov     ecx, [eax]
.text:000050DF                 mov     [ebp+var_8], ecx
.text:000050E2
.text:000050E2 loc_50E2:                               ; CODE XREF: NCoderMixer2::CBond::Get_InIndex(bool)+28j
.text:000050E2                 mov     eax, [ebp+var_8]
.text:000050E5                 mov     esp, ebp
.text:000050E7                 pop     ebp
.text:000050E8                 retn    4
.text:000050E8 ?Get_InIndex@CBond@NCoderMixer2@@QBEI_N@Z endp
.text:000050E8
.text:000050E8 ; ---------------------------------------------------------------------------
.text:000050EB                 align 4
.text:000050EB _text           ends
.text:000050EB
.text:000050EC ; ===========================================================================
.text:000050EC
.text:000050EC ; Segment type: Pure code
.text:000050EC ; Segment permissions: Read/Execute
.text:000050EC _text           segment para public 'CODE' use32
.text:000050EC                 assume cs:_text
.text:000050EC                 ;org 50ECh
.text:000050EC ; COMDAT (pick any)
.text:000050EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000050EC
.text:000050EC ; =============== S U B R O U T I N E =======================================
.text:000050EC
.text:000050EC ; Attributes: bp-based frame
.text:000050EC
.text:000050EC ; public: __thiscall COutStreamCalcSize::COutStreamCalcSize(void)
.text:000050EC                 public ??0COutStreamCalcSize@@QAE@XZ
.text:000050EC ??0COutStreamCalcSize@@QAE@XZ proc near ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+40Dp
.text:000050EC
.text:000050EC var_4           = dword ptr -4
.text:000050EC
.text:000050EC                 push    ebp
.text:000050ED                 mov     ebp, esp
.text:000050EF                 push    ecx
.text:000050F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050F7                 mov     [ebp+var_4], ecx
.text:000050FA                 mov     ecx, [ebp+var_4] ; this
.text:000050FD                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00005102                 mov     ecx, [ebp+var_4]
.text:00005105                 add     ecx, 4          ; this
.text:00005108                 call    ??0IOutStreamFinish@@QAE@XZ ; IOutStreamFinish::IOutStreamFinish(void)
.text:0000510D                 mov     ecx, [ebp+var_4]
.text:00005110                 add     ecx, 8          ; this
.text:00005113                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00005118                 mov     eax, [ebp+var_4]
.text:0000511B                 mov     dword ptr [eax], offset ??_7COutStreamCalcSize@@6BISequentialOutStream@@@ ; const COutStreamCalcSize::`vftable'{for `ISequentialOutStream'}
.text:00005121                 mov     ecx, [ebp+var_4]
.text:00005124                 mov     dword ptr [ecx+4], offset ??_7COutStreamCalcSize@@6BIOutStreamFinish@@@ ; const COutStreamCalcSize::`vftable'{for `IOutStreamFinish'}
.text:0000512B                 mov     ecx, [ebp+var_4]
.text:0000512E                 add     ecx, 0Ch
.text:00005131                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00005136                 mov     eax, [ebp+var_4]
.text:00005139                 add     esp, 4
.text:0000513C                 cmp     ebp, esp
.text:0000513E                 call    __RTC_CheckEsp
.text:00005143                 mov     esp, ebp
.text:00005145                 pop     ebp
.text:00005146                 retn
.text:00005146 ??0COutStreamCalcSize@@QAE@XZ endp
.text:00005146
.text:00005146 ; ---------------------------------------------------------------------------
.text:00005147                 align 4
.text:00005147 _text           ends
.text:00005147
.rdata:00005148 ; ===========================================================================
.rdata:00005148
.rdata:00005148 ; Segment type: Pure data
.rdata:00005148 ; Segment permissions: Read
.rdata:00005148 _rdata          segment dword public 'DATA' use32
.rdata:00005148                 assume cs:_rdata
.rdata:00005148                 ;org 5148h
.rdata:00005148 ; COMDAT (pick largest)
.rdata:00005148                 dd offset ??_R4COutStreamCalcSize@@6BIOutStreamFinish@@@ ; const COutStreamCalcSize::`RTTI Complete Object Locator'{for `IOutStreamFinish'}
.rdata:0000514C                 public ??_7COutStreamCalcSize@@6BIOutStreamFinish@@@
.rdata:0000514C ; const COutStreamCalcSize::`vftable'{for `IOutStreamFinish'}
.rdata:0000514C ??_7COutStreamCalcSize@@6BIOutStreamFinish@@@ dd offset ?QueryInterface@COutStreamCalcSize@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000514C                                         ; DATA XREF: COutStreamCalcSize::COutStreamCalcSize(void)+38o
.rdata:0000514C                                         ; [thunk]:COutStreamCalcSize::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00005150                 dd offset ?AddRef@COutStreamCalcSize@@W3AGKXZ ; [thunk]:COutStreamCalcSize::AddRef`adjustor{4}' (void)
.rdata:00005154                 dd offset ?Release@COutStreamCalcSize@@W3AGKXZ ; [thunk]:COutStreamCalcSize::Release`adjustor{4}' (void)
.rdata:00005158                 dd offset ?OutStreamFinish@COutStreamCalcSize@@UAGJXZ ; COutStreamCalcSize::OutStreamFinish(void)
.rdata:00005158 _rdata          ends
.rdata:00005158
.rdata:0000515C ; ===========================================================================
.rdata:0000515C
.rdata:0000515C ; Segment type: Pure data
.rdata:0000515C ; Segment permissions: Read
.rdata:0000515C _rdata          segment dword public 'DATA' use32
.rdata:0000515C                 assume cs:_rdata
.rdata:0000515C                 ;org 515Ch
.rdata:0000515C ; COMDAT (pick largest)
.rdata:0000515C                 dd offset ??_R4COutStreamCalcSize@@6BISequentialOutStream@@@ ; const COutStreamCalcSize::`RTTI Complete Object Locator'{for `ISequentialOutStream'}
.rdata:00005160                 public ??_7COutStreamCalcSize@@6BISequentialOutStream@@@
.rdata:00005160 ; const COutStreamCalcSize::`vftable'{for `ISequentialOutStream'}
.rdata:00005160 ??_7COutStreamCalcSize@@6BISequentialOutStream@@@ dd offset ?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z
.rdata:00005160                                         ; DATA XREF: COutStreamCalcSize::COutStreamCalcSize(void)+2Fo
.rdata:00005160                                         ; COutStreamCalcSize::QueryInterface(_GUID const &,void * *)
.rdata:00005164                 dd offset ?AddRef@COutStreamCalcSize@@UAGKXZ ; COutStreamCalcSize::AddRef(void)
.rdata:00005168                 dd offset ?Release@COutStreamCalcSize@@UAGKXZ ; COutStreamCalcSize::Release(void)
.rdata:0000516C                 dd offset ?Write@COutStreamCalcSize@@UAGJPBXIPAI@Z ; COutStreamCalcSize::Write(void const *,uint,uint *)
.rdata:0000516C _rdata          ends
.rdata:0000516C
.rdata$r:00005170 ; ===========================================================================
.rdata$r:00005170
.rdata$r:00005170 ; Segment type: Pure data
.rdata$r:00005170 ; Segment permissions: Read
.rdata$r:00005170 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005170                 assume cs:_rdata$r
.rdata$r:00005170                 ;org 5170h
.rdata$r:00005170 ; COMDAT (pick any)
.rdata$r:00005170                 public ??_R4COutStreamCalcSize@@6BISequentialOutStream@@@
.rdata$r:00005170 ; const COutStreamCalcSize::`RTTI Complete Object Locator'{for `ISequentialOutStream'}
.rdata$r:00005170 ??_R4COutStreamCalcSize@@6BISequentialOutStream@@@ db    0
.rdata$r:00005170                                         ; DATA XREF: .rdata:0000515Co
.rdata$r:00005171                 db    0
.rdata$r:00005172                 db    0
.rdata$r:00005173                 db    0
.rdata$r:00005174                 db    0
.rdata$r:00005175                 db    0
.rdata$r:00005176                 db    0
.rdata$r:00005177                 db    0
.rdata$r:00005178                 db    0
.rdata$r:00005179                 db    0
.rdata$r:0000517A                 db    0
.rdata$r:0000517B                 db    0
.rdata$r:0000517C                 dd offset ??_R0?AVCOutStreamCalcSize@@@8 ; COutStreamCalcSize `RTTI Type Descriptor'
.rdata$r:00005180                 dd offset ??_R3COutStreamCalcSize@@8 ; COutStreamCalcSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005180 _rdata$r        ends
.rdata$r:00005180
.data:00005184 ; ===========================================================================
.data:00005184
.data:00005184 ; Segment type: Pure data
.data:00005184 ; Segment permissions: Read/Write
.data:00005184 _data           segment dword public 'DATA' use32
.data:00005184                 assume cs:_data
.data:00005184                 ;org 5184h
.data:00005184 ; COMDAT (pick any)
.data:00005184                 public ??_R0?AVCOutStreamCalcSize@@@8
.data:00005184 ; class COutStreamCalcSize `RTTI Type Descriptor'
.data:00005184 ??_R0?AVCOutStreamCalcSize@@@8 dd offset ??_7type_info@@6B@
.data:00005184                                         ; DATA XREF: .rdata$r:0000517Co
.data:00005184                                         ; .rdata$r:COutStreamCalcSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005184                                         ; const type_info::`vftable'
.data:00005188                 db    0
.data:00005189                 db    0
.data:0000518A                 db    0
.data:0000518B                 db    0
.data:0000518C                 db  2Eh ; .
.data:0000518D                 db  3Fh ; ?
.data:0000518E                 db  41h ; A
.data:0000518F                 db  56h ; V
.data:00005190                 db  43h ; C
.data:00005191                 db  4Fh ; O
.data:00005192                 db  75h ; u
.data:00005193                 db  74h ; t
.data:00005194                 db  53h ; S
.data:00005195                 db  74h ; t
.data:00005196                 db  72h ; r
.data:00005197                 db  65h ; e
.data:00005198                 db  61h ; a
.data:00005199                 db  6Dh ; m
.data:0000519A                 db  43h ; C
.data:0000519B                 db  61h ; a
.data:0000519C                 db  6Ch ; l
.data:0000519D                 db  63h ; c
.data:0000519E                 db  53h ; S
.data:0000519F                 db  69h ; i
.data:000051A0                 db  7Ah ; z
.data:000051A1                 db  65h ; e
.data:000051A2                 db  40h ; @
.data:000051A3                 db  40h ; @
.data:000051A4                 db    0
.data:000051A5                 align 4
.data:000051A5 _data           ends
.data:000051A5
.rdata$r:000051A8 ; ===========================================================================
.rdata$r:000051A8
.rdata$r:000051A8 ; Segment type: Pure data
.rdata$r:000051A8 ; Segment permissions: Read
.rdata$r:000051A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051A8                 assume cs:_rdata$r
.rdata$r:000051A8                 ;org 51A8h
.rdata$r:000051A8 ; COMDAT (pick any)
.rdata$r:000051A8                 public ??_R3COutStreamCalcSize@@8
.rdata$r:000051A8 ; COutStreamCalcSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000051A8 ??_R3COutStreamCalcSize@@8 db    0      ; DATA XREF: .rdata$r:00005180o
.rdata$r:000051A8                                         ; .rdata$r:000051ECo ...
.rdata$r:000051A9                 db    0
.rdata$r:000051AA                 db    0
.rdata$r:000051AB                 db    0
.rdata$r:000051AC                 db    5
.rdata$r:000051AD                 db    0
.rdata$r:000051AE                 db    0
.rdata$r:000051AF                 db    0
.rdata$r:000051B0                 db    6
.rdata$r:000051B1                 db    0
.rdata$r:000051B2                 db    0
.rdata$r:000051B3                 db    0
.rdata$r:000051B4                 dd offset ??_R2COutStreamCalcSize@@8 ; COutStreamCalcSize::`RTTI Base Class Array'
.rdata$r:000051B4 _rdata$r        ends
.rdata$r:000051B4
.rdata$r:000051B8 ; ===========================================================================
.rdata$r:000051B8
.rdata$r:000051B8 ; Segment type: Pure data
.rdata$r:000051B8 ; Segment permissions: Read
.rdata$r:000051B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051B8                 assume cs:_rdata$r
.rdata$r:000051B8                 ;org 51B8h
.rdata$r:000051B8 ; COMDAT (pick any)
.rdata$r:000051B8                 public ??_R2COutStreamCalcSize@@8
.rdata$r:000051B8 ; COutStreamCalcSize::`RTTI Base Class Array'
.rdata$r:000051B8 ??_R2COutStreamCalcSize@@8 dd offset ??_R1A@?0A@EA@COutStreamCalcSize@@8
.rdata$r:000051B8                                         ; DATA XREF: .rdata$r:000051B4o
.rdata$r:000051B8                                         ; COutStreamCalcSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000051BC                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000051C0                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000051C4                 dd offset ??_R13?0A@EA@IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000051C8                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000051CC                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000051D0                 db    0
.rdata$r:000051D1                 align 4
.rdata$r:000051D1 _rdata$r        ends
.rdata$r:000051D1
.rdata$r:000051D4 ; ===========================================================================
.rdata$r:000051D4
.rdata$r:000051D4 ; Segment type: Pure data
.rdata$r:000051D4 ; Segment permissions: Read
.rdata$r:000051D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051D4                 assume cs:_rdata$r
.rdata$r:000051D4                 ;org 51D4h
.rdata$r:000051D4 ; COMDAT (pick any)
.rdata$r:000051D4                 public ??_R1A@?0A@EA@COutStreamCalcSize@@8
.rdata$r:000051D4 ; COutStreamCalcSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000051D4 ??_R1A@?0A@EA@COutStreamCalcSize@@8 dd offset ??_R0?AVCOutStreamCalcSize@@@8
.rdata$r:000051D4                                         ; DATA XREF: .rdata$r:COutStreamCalcSize::`RTTI Base Class Array'o
.rdata$r:000051D4                                         ; COutStreamCalcSize `RTTI Type Descriptor'
.rdata$r:000051D8                 db    5
.rdata$r:000051D9                 db    0
.rdata$r:000051DA                 db    0
.rdata$r:000051DB                 db    0
.rdata$r:000051DC                 db    0
.rdata$r:000051DD                 db    0
.rdata$r:000051DE                 db    0
.rdata$r:000051DF                 db    0
.rdata$r:000051E0                 db 0FFh
.rdata$r:000051E1                 db 0FFh
.rdata$r:000051E2                 db 0FFh
.rdata$r:000051E3                 db 0FFh
.rdata$r:000051E4                 db    0
.rdata$r:000051E5                 db    0
.rdata$r:000051E6                 db    0
.rdata$r:000051E7                 db    0
.rdata$r:000051E8                 db  40h ; @
.rdata$r:000051E9                 db    0
.rdata$r:000051EA                 db    0
.rdata$r:000051EB                 db    0
.rdata$r:000051EC                 dd offset ??_R3COutStreamCalcSize@@8 ; COutStreamCalcSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000051EC _rdata$r        ends
.rdata$r:000051EC
.rdata$r:000051F0 ; ===========================================================================
.rdata$r:000051F0
.rdata$r:000051F0 ; Segment type: Pure data
.rdata$r:000051F0 ; Segment permissions: Read
.rdata$r:000051F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051F0                 assume cs:_rdata$r
.rdata$r:000051F0                 ;org 51F0h
.rdata$r:000051F0 ; COMDAT (pick any)
.rdata$r:000051F0                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000051F0 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000051F0 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:000051F0                                         ; DATA XREF: .rdata$r:000051BCo
.rdata$r:000051F0                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:000051F0                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000051F4                 db    1
.rdata$r:000051F5                 db    0
.rdata$r:000051F6                 db    0
.rdata$r:000051F7                 db    0
.rdata$r:000051F8                 db    0
.rdata$r:000051F9                 db    0
.rdata$r:000051FA                 db    0
.rdata$r:000051FB                 db    0
.rdata$r:000051FC                 db 0FFh
.rdata$r:000051FD                 db 0FFh
.rdata$r:000051FE                 db 0FFh
.rdata$r:000051FF                 db 0FFh
.rdata$r:00005200                 db    0
.rdata$r:00005201                 db    0
.rdata$r:00005202                 db    0
.rdata$r:00005203                 db    0
.rdata$r:00005204                 db  40h ; @
.rdata$r:00005205                 db    0
.rdata$r:00005206                 db    0
.rdata$r:00005207                 db    0
.rdata$r:00005208                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005208 _rdata$r        ends
.rdata$r:00005208
.data:0000520C ; ===========================================================================
.data:0000520C
.data:0000520C ; Segment type: Pure data
.data:0000520C ; Segment permissions: Read/Write
.data:0000520C _data           segment dword public 'DATA' use32
.data:0000520C                 assume cs:_data
.data:0000520C                 ;org 520Ch
.data:0000520C ; COMDAT (pick any)
.data:0000520C                 public ??_R0?AUISequentialOutStream@@@8
.data:0000520C ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:0000520C ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:0000520C                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000520C                                         ; .rdata$r:00005528o
.data:0000520C                                         ; const type_info::`vftable'
.data:00005210                 db    0
.data:00005211                 db    0
.data:00005212                 db    0
.data:00005213                 db    0
.data:00005214                 db  2Eh ; .
.data:00005215                 db  3Fh ; ?
.data:00005216                 db  41h ; A
.data:00005217                 db  55h ; U
.data:00005218                 db  49h ; I
.data:00005219                 db  53h ; S
.data:0000521A                 db  65h ; e
.data:0000521B                 db  71h ; q
.data:0000521C                 db  75h ; u
.data:0000521D                 db  65h ; e
.data:0000521E                 db  6Eh ; n
.data:0000521F                 db  74h ; t
.data:00005220                 db  69h ; i
.data:00005221                 db  61h ; a
.data:00005222                 db  6Ch ; l
.data:00005223                 db  4Fh ; O
.data:00005224                 db  75h ; u
.data:00005225                 db  74h ; t
.data:00005226                 db  53h ; S
.data:00005227                 db  74h ; t
.data:00005228                 db  72h ; r
.data:00005229                 db  65h ; e
.data:0000522A                 db  61h ; a
.data:0000522B                 db  6Dh ; m
.data:0000522C                 db  40h ; @
.data:0000522D                 db  40h ; @
.data:0000522E                 db    0
.data:0000522F                 align 10h
.data:0000522F _data           ends
.data:0000522F
.rdata$r:00005230 ; ===========================================================================
.rdata$r:00005230
.rdata$r:00005230 ; Segment type: Pure data
.rdata$r:00005230 ; Segment permissions: Read
.rdata$r:00005230 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005230                 assume cs:_rdata$r
.rdata$r:00005230                 ;org 5230h
.rdata$r:00005230 ; COMDAT (pick any)
.rdata$r:00005230                 public ??_R3ISequentialOutStream@@8
.rdata$r:00005230 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005230 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00005208o
.rdata$r:00005230                                         ; .rdata$r:0000552Co
.rdata$r:00005231                 db    0
.rdata$r:00005232                 db    0
.rdata$r:00005233                 db    0
.rdata$r:00005234                 db    0
.rdata$r:00005235                 db    0
.rdata$r:00005236                 db    0
.rdata$r:00005237                 db    0
.rdata$r:00005238                 db    2
.rdata$r:00005239                 db    0
.rdata$r:0000523A                 db    0
.rdata$r:0000523B                 db    0
.rdata$r:0000523C                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:0000523C _rdata$r        ends
.rdata$r:0000523C
.rdata$r:00005240 ; ===========================================================================
.rdata$r:00005240
.rdata$r:00005240 ; Segment type: Pure data
.rdata$r:00005240 ; Segment permissions: Read
.rdata$r:00005240 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005240                 assume cs:_rdata$r
.rdata$r:00005240                 ;org 5240h
.rdata$r:00005240 ; COMDAT (pick any)
.rdata$r:00005240                 public ??_R2ISequentialOutStream@@8
.rdata$r:00005240 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00005240 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00005240                                         ; DATA XREF: .rdata$r:0000523Co
.rdata$r:00005240                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005244                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005248                 db    0
.rdata$r:00005249                 align 4
.rdata$r:00005249 _rdata$r        ends
.rdata$r:00005249
.rdata$r:0000524C ; ===========================================================================
.rdata$r:0000524C
.rdata$r:0000524C ; Segment type: Pure data
.rdata$r:0000524C ; Segment permissions: Read
.rdata$r:0000524C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000524C                 assume cs:_rdata$r
.rdata$r:0000524C                 ;org 524Ch
.rdata$r:0000524C ; COMDAT (pick any)
.rdata$r:0000524C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:0000524C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:0000524C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000524C                                         ; DATA XREF: .rdata$r:000051C0o
.rdata$r:0000524C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00005250                 db    0
.rdata$r:00005251                 db    0
.rdata$r:00005252                 db    0
.rdata$r:00005253                 db    0
.rdata$r:00005254                 db    0
.rdata$r:00005255                 db    0
.rdata$r:00005256                 db    0
.rdata$r:00005257                 db    0
.rdata$r:00005258                 db 0FFh
.rdata$r:00005259                 db 0FFh
.rdata$r:0000525A                 db 0FFh
.rdata$r:0000525B                 db 0FFh
.rdata$r:0000525C                 db    0
.rdata$r:0000525D                 db    0
.rdata$r:0000525E                 db    0
.rdata$r:0000525F                 db    0
.rdata$r:00005260                 db  42h ; B
.rdata$r:00005261                 db    0
.rdata$r:00005262                 db    0
.rdata$r:00005263                 db    0
.rdata$r:00005264                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005264 _rdata$r        ends
.rdata$r:00005264
.rdata$r:00005268 ; ===========================================================================
.rdata$r:00005268
.rdata$r:00005268 ; Segment type: Pure data
.rdata$r:00005268 ; Segment permissions: Read
.rdata$r:00005268 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005268                 assume cs:_rdata$r
.rdata$r:00005268                 ;org 5268h
.rdata$r:00005268 ; COMDAT (pick any)
.rdata$r:00005268                 public ??_R13?0A@EA@IOutStreamFinish@@8
.rdata$r:00005268 ; IOutStreamFinish::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00005268 ??_R13?0A@EA@IOutStreamFinish@@8 dd offset ??_R0?AUIOutStreamFinish@@@8
.rdata$r:00005268                                         ; DATA XREF: .rdata$r:000051C4o
.rdata$r:00005268                                         ; IOutStreamFinish `RTTI Type Descriptor'
.rdata$r:0000526C                 db    1
.rdata$r:0000526D                 db    0
.rdata$r:0000526E                 db    0
.rdata$r:0000526F                 db    0
.rdata$r:00005270                 db    4
.rdata$r:00005271                 db    0
.rdata$r:00005272                 db    0
.rdata$r:00005273                 db    0
.rdata$r:00005274                 db 0FFh
.rdata$r:00005275                 db 0FFh
.rdata$r:00005276                 db 0FFh
.rdata$r:00005277                 db 0FFh
.rdata$r:00005278                 db    0
.rdata$r:00005279                 db    0
.rdata$r:0000527A                 db    0
.rdata$r:0000527B                 db    0
.rdata$r:0000527C                 db  40h ; @
.rdata$r:0000527D                 db    0
.rdata$r:0000527E                 db    0
.rdata$r:0000527F                 db    0
.rdata$r:00005280                 dd offset ??_R3IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005280 _rdata$r        ends
.rdata$r:00005280
.data:00005284 ; ===========================================================================
.data:00005284
.data:00005284 ; Segment type: Pure data
.data:00005284 ; Segment permissions: Read/Write
.data:00005284 _data           segment dword public 'DATA' use32
.data:00005284                 assume cs:_data
.data:00005284                 ;org 5284h
.data:00005284 ; COMDAT (pick any)
.data:00005284                 public ??_R0?AUIOutStreamFinish@@@8
.data:00005284 ; struct IOutStreamFinish `RTTI Type Descriptor'
.data:00005284 ??_R0?AUIOutStreamFinish@@@8 dd offset ??_7type_info@@6B@
.data:00005284                                         ; DATA XREF: .rdata$r:IOutStreamFinish::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00005284                                         ; .rdata$r:IOutStreamFinish::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005284                                         ; const type_info::`vftable'
.data:00005288                 db    0
.data:00005289                 db    0
.data:0000528A                 db    0
.data:0000528B                 db    0
.data:0000528C                 db  2Eh ; .
.data:0000528D                 db  3Fh ; ?
.data:0000528E                 db  41h ; A
.data:0000528F                 db  55h ; U
.data:00005290                 db  49h ; I
.data:00005291                 db  4Fh ; O
.data:00005292                 db  75h ; u
.data:00005293                 db  74h ; t
.data:00005294                 db  53h ; S
.data:00005295                 db  74h ; t
.data:00005296                 db  72h ; r
.data:00005297                 db  65h ; e
.data:00005298                 db  61h ; a
.data:00005299                 db  6Dh ; m
.data:0000529A                 db  46h ; F
.data:0000529B                 db  69h ; i
.data:0000529C                 db  6Eh ; n
.data:0000529D                 db  69h ; i
.data:0000529E                 db  73h ; s
.data:0000529F                 db  68h ; h
.data:000052A0                 db  40h ; @
.data:000052A1                 db  40h ; @
.data:000052A2                 db    0
.data:000052A3                 align 4
.data:000052A3 _data           ends
.data:000052A3
.rdata$r:000052A4 ; ===========================================================================
.rdata$r:000052A4
.rdata$r:000052A4 ; Segment type: Pure data
.rdata$r:000052A4 ; Segment permissions: Read
.rdata$r:000052A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000052A4                 assume cs:_rdata$r
.rdata$r:000052A4                 ;org 52A4h
.rdata$r:000052A4 ; COMDAT (pick any)
.rdata$r:000052A4                 public ??_R3IOutStreamFinish@@8
.rdata$r:000052A4 ; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
.rdata$r:000052A4 ??_R3IOutStreamFinish@@8 db    0        ; DATA XREF: .rdata$r:00005280o
.rdata$r:000052A4                                         ; .rdata$r:000052D8o ...
.rdata$r:000052A5                 db    0
.rdata$r:000052A6                 db    0
.rdata$r:000052A7                 db    0
.rdata$r:000052A8                 db    0
.rdata$r:000052A9                 db    0
.rdata$r:000052AA                 db    0
.rdata$r:000052AB                 db    0
.rdata$r:000052AC                 db    2
.rdata$r:000052AD                 db    0
.rdata$r:000052AE                 db    0
.rdata$r:000052AF                 db    0
.rdata$r:000052B0                 dd offset ??_R2IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Base Class Array'
.rdata$r:000052B0 _rdata$r        ends
.rdata$r:000052B0
.rdata$r:000052B4 ; ===========================================================================
.rdata$r:000052B4
.rdata$r:000052B4 ; Segment type: Pure data
.rdata$r:000052B4 ; Segment permissions: Read
.rdata$r:000052B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000052B4                 assume cs:_rdata$r
.rdata$r:000052B4                 ;org 52B4h
.rdata$r:000052B4 ; COMDAT (pick any)
.rdata$r:000052B4                 public ??_R2IOutStreamFinish@@8
.rdata$r:000052B4 ; IOutStreamFinish::`RTTI Base Class Array'
.rdata$r:000052B4 ??_R2IOutStreamFinish@@8 dd offset ??_R1A@?0A@EA@IOutStreamFinish@@8
.rdata$r:000052B4                                         ; DATA XREF: .rdata$r:000052B0o
.rdata$r:000052B4                                         ; IOutStreamFinish::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000052B8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000052BC                 db    0
.rdata$r:000052BD                 align 10h
.rdata$r:000052BD _rdata$r        ends
.rdata$r:000052BD
.rdata$r:000052C0 ; ===========================================================================
.rdata$r:000052C0
.rdata$r:000052C0 ; Segment type: Pure data
.rdata$r:000052C0 ; Segment permissions: Read
.rdata$r:000052C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000052C0                 assume cs:_rdata$r
.rdata$r:000052C0                 ;org 52C0h
.rdata$r:000052C0 ; COMDAT (pick any)
.rdata$r:000052C0                 public ??_R1A@?0A@EA@IOutStreamFinish@@8
.rdata$r:000052C0 ; IOutStreamFinish::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000052C0 ??_R1A@?0A@EA@IOutStreamFinish@@8 dd offset ??_R0?AUIOutStreamFinish@@@8
.rdata$r:000052C0                                         ; DATA XREF: .rdata$r:IOutStreamFinish::`RTTI Base Class Array'o
.rdata$r:000052C0                                         ; IOutStreamFinish `RTTI Type Descriptor'
.rdata$r:000052C4                 db    1
.rdata$r:000052C5                 db    0
.rdata$r:000052C6                 db    0
.rdata$r:000052C7                 db    0
.rdata$r:000052C8                 db    0
.rdata$r:000052C9                 db    0
.rdata$r:000052CA                 db    0
.rdata$r:000052CB                 db    0
.rdata$r:000052CC                 db 0FFh
.rdata$r:000052CD                 db 0FFh
.rdata$r:000052CE                 db 0FFh
.rdata$r:000052CF                 db 0FFh
.rdata$r:000052D0                 db    0
.rdata$r:000052D1                 db    0
.rdata$r:000052D2                 db    0
.rdata$r:000052D3                 db    0
.rdata$r:000052D4                 db  40h ; @
.rdata$r:000052D5                 db    0
.rdata$r:000052D6                 db    0
.rdata$r:000052D7                 db    0
.rdata$r:000052D8                 dd offset ??_R3IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
.rdata$r:000052D8 _rdata$r        ends
.rdata$r:000052D8
.rdata$r:000052DC ; ===========================================================================
.rdata$r:000052DC
.rdata$r:000052DC ; Segment type: Pure data
.rdata$r:000052DC ; Segment permissions: Read
.rdata$r:000052DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000052DC                 assume cs:_rdata$r
.rdata$r:000052DC                 ;org 52DCh
.rdata$r:000052DC ; COMDAT (pick any)
.rdata$r:000052DC                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000052DC ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000052DC ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000052DC                                         ; DATA XREF: .rdata$r:000051C8o
.rdata$r:000052DC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000052E0                 db    0
.rdata$r:000052E1                 db    0
.rdata$r:000052E2                 db    0
.rdata$r:000052E3                 db    0
.rdata$r:000052E4                 db    4
.rdata$r:000052E5                 db    0
.rdata$r:000052E6                 db    0
.rdata$r:000052E7                 db    0
.rdata$r:000052E8                 db 0FFh
.rdata$r:000052E9                 db 0FFh
.rdata$r:000052EA                 db 0FFh
.rdata$r:000052EB                 db 0FFh
.rdata$r:000052EC                 db    0
.rdata$r:000052ED                 db    0
.rdata$r:000052EE                 db    0
.rdata$r:000052EF                 db    0
.rdata$r:000052F0                 db  42h ; B
.rdata$r:000052F1                 db    0
.rdata$r:000052F2                 db    0
.rdata$r:000052F3                 db    0
.rdata$r:000052F4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000052F4 _rdata$r        ends
.rdata$r:000052F4
.rdata$r:000052F8 ; ===========================================================================
.rdata$r:000052F8
.rdata$r:000052F8 ; Segment type: Pure data
.rdata$r:000052F8 ; Segment permissions: Read
.rdata$r:000052F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000052F8                 assume cs:_rdata$r
.rdata$r:000052F8                 ;org 52F8h
.rdata$r:000052F8 ; COMDAT (pick any)
.rdata$r:000052F8                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:000052F8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000052F8 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000052F8                                         ; DATA XREF: .rdata$r:000051CCo
.rdata$r:000052F8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000052FC                 align 10h
.rdata$r:00005300                 db    8
.rdata$r:00005301                 db    0
.rdata$r:00005302                 db    0
.rdata$r:00005303                 db    0
.rdata$r:00005304                 db 0FFh
.rdata$r:00005305                 db 0FFh
.rdata$r:00005306                 db 0FFh
.rdata$r:00005307                 db 0FFh
.rdata$r:00005308                 db    0
.rdata$r:00005309                 db    0
.rdata$r:0000530A                 db    0
.rdata$r:0000530B                 db    0
.rdata$r:0000530C                 db  40h ; @
.rdata$r:0000530D                 db    0
.rdata$r:0000530E                 db    0
.rdata$r:0000530F                 db    0
.rdata$r:00005310                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005310 _rdata$r        ends
.rdata$r:00005310
.rdata$r:00005314 ; ===========================================================================
.rdata$r:00005314
.rdata$r:00005314 ; Segment type: Pure data
.rdata$r:00005314 ; Segment permissions: Read
.rdata$r:00005314 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005314                 assume cs:_rdata$r
.rdata$r:00005314                 ;org 5314h
.rdata$r:00005314 ; COMDAT (pick any)
.rdata$r:00005314                 public ??_R4COutStreamCalcSize@@6BIOutStreamFinish@@@
.rdata$r:00005314 ; const COutStreamCalcSize::`RTTI Complete Object Locator'{for `IOutStreamFinish'}
.rdata$r:00005314 ??_R4COutStreamCalcSize@@6BIOutStreamFinish@@@ db    0
.rdata$r:00005314                                         ; DATA XREF: .rdata:00005148o
.rdata$r:00005315                 db    0
.rdata$r:00005316                 db    0
.rdata$r:00005317                 db    0
.rdata$r:00005318                 db    4
.rdata$r:00005319                 db    0
.rdata$r:0000531A                 db    0
.rdata$r:0000531B                 db    0
.rdata$r:0000531C                 db    0
.rdata$r:0000531D                 db    0
.rdata$r:0000531E                 db    0
.rdata$r:0000531F                 db    0
.rdata$r:00005320                 dd offset ??_R0?AVCOutStreamCalcSize@@@8 ; COutStreamCalcSize `RTTI Type Descriptor'
.rdata$r:00005324                 dd offset ??_R3COutStreamCalcSize@@8 ; COutStreamCalcSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005324 _rdata$r        ends
.rdata$r:00005324
.text:00005328 ; ===========================================================================
.text:00005328
.text:00005328 ; Segment type: Pure code
.text:00005328 ; Segment permissions: Read/Execute
.text:00005328 _text           segment para public 'CODE' use32
.text:00005328                 assume cs:_text
.text:00005328                 ;org 5328h
.text:00005328 ; COMDAT (pick any)
.text:00005328                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005328
.text:00005328 ; =============== S U B R O U T I N E =======================================
.text:00005328
.text:00005328 ; Attributes: bp-based frame
.text:00005328
.text:00005328 ; __int32 __stdcall COutStreamCalcSize::QueryInterface(COutStreamCalcSize *this, const struct _GUID *Buf1, void **)
.text:00005328                 public ?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z
.text:00005328 ?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00005328                                         ; CODE XREF: [thunk]:COutStreamCalcSize::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00005328                                         ; DATA XREF: .rdata:const COutStreamCalcSize::`vftable'{for `ISequentialOutStream'}o
.text:00005328
.text:00005328 var_4           = dword ptr -4
.text:00005328 this            = dword ptr  8
.text:00005328 Buf1            = dword ptr  0Ch
.text:00005328 arg_8           = dword ptr  10h
.text:00005328
.text:00005328                 push    ebp
.text:00005329                 mov     ebp, esp
.text:0000532B                 push    ecx
.text:0000532C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005333                 mov     eax, [ebp+arg_8]
.text:00005336                 mov     dword ptr [eax], 0
.text:0000533C                 push    offset _IID_IUnknown ; Buf2
.text:00005341                 mov     ecx, [ebp+Buf1]
.text:00005344                 push    ecx             ; Buf1
.text:00005345                 call    ___@8           ; __(x,x)
.text:0000534A                 test    eax, eax
.text:0000534C                 jz      short loc_5358
.text:0000534E                 mov     edx, [ebp+arg_8]
.text:00005351                 mov     eax, [ebp+this]
.text:00005354                 mov     [edx], eax
.text:00005356                 jmp     short loc_53AF
.text:00005358 ; ---------------------------------------------------------------------------
.text:00005358
.text:00005358 loc_5358:                               ; CODE XREF: COutStreamCalcSize::QueryInterface(_GUID const &,void * *)+24j
.text:00005358                 push    offset _IID_ISequentialOutStream ; Buf2
.text:0000535D                 mov     ecx, [ebp+Buf1]
.text:00005360                 push    ecx             ; Buf1
.text:00005361                 call    ___@8           ; __(x,x)
.text:00005366                 test    eax, eax
.text:00005368                 jz      short loc_5374
.text:0000536A                 mov     edx, [ebp+arg_8]
.text:0000536D                 mov     eax, [ebp+this]
.text:00005370                 mov     [edx], eax
.text:00005372                 jmp     short loc_53AF
.text:00005374 ; ---------------------------------------------------------------------------
.text:00005374
.text:00005374 loc_5374:                               ; CODE XREF: COutStreamCalcSize::QueryInterface(_GUID const &,void * *)+40j
.text:00005374                 push    offset _IID_IOutStreamFinish ; Buf2
.text:00005379                 mov     ecx, [ebp+Buf1]
.text:0000537C                 push    ecx             ; Buf1
.text:0000537D                 call    ___@8           ; __(x,x)
.text:00005382                 test    eax, eax
.text:00005384                 jz      short loc_53A8
.text:00005386                 cmp     [ebp+this], 0
.text:0000538A                 jz      short loc_5397
.text:0000538C                 mov     edx, [ebp+this]
.text:0000538F                 add     edx, 4
.text:00005392                 mov     [ebp+var_4], edx
.text:00005395                 jmp     short loc_539E
.text:00005397 ; ---------------------------------------------------------------------------
.text:00005397
.text:00005397 loc_5397:                               ; CODE XREF: COutStreamCalcSize::QueryInterface(_GUID const &,void * *)+62j
.text:00005397                 mov     [ebp+var_4], 0
.text:0000539E
.text:0000539E loc_539E:                               ; CODE XREF: COutStreamCalcSize::QueryInterface(_GUID const &,void * *)+6Dj
.text:0000539E                 mov     eax, [ebp+arg_8]
.text:000053A1                 mov     ecx, [ebp+var_4]
.text:000053A4                 mov     [eax], ecx
.text:000053A6                 jmp     short loc_53AF
.text:000053A8 ; ---------------------------------------------------------------------------
.text:000053A8
.text:000053A8 loc_53A8:                               ; CODE XREF: COutStreamCalcSize::QueryInterface(_GUID const &,void * *)+5Cj
.text:000053A8                 mov     eax, 80004002h
.text:000053AD                 jmp     short loc_53C0
.text:000053AF ; ---------------------------------------------------------------------------
.text:000053AF
.text:000053AF loc_53AF:                               ; CODE XREF: COutStreamCalcSize::QueryInterface(_GUID const &,void * *)+2Ej
.text:000053AF                                         ; COutStreamCalcSize::QueryInterface(_GUID const &,void * *)+4Aj ...
.text:000053AF                 mov     edx, [ebp+this]
.text:000053B2                 mov     eax, [edx+8]
.text:000053B5                 add     eax, 1
.text:000053B8                 mov     ecx, [ebp+this]
.text:000053BB                 mov     [ecx+8], eax
.text:000053BE                 xor     eax, eax
.text:000053C0
.text:000053C0 loc_53C0:                               ; CODE XREF: COutStreamCalcSize::QueryInterface(_GUID const &,void * *)+85j
.text:000053C0                 add     esp, 4
.text:000053C3                 cmp     ebp, esp
.text:000053C5                 call    __RTC_CheckEsp
.text:000053CA                 mov     esp, ebp
.text:000053CC                 pop     ebp
.text:000053CD                 retn    0Ch
.text:000053CD ?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z endp
.text:000053CD
.text:000053CD _text           ends
.text:000053CD
.text:000053D0 ; ===========================================================================
.text:000053D0
.text:000053D0 ; Segment type: Pure code
.text:000053D0 ; Segment permissions: Read/Execute
.text:000053D0 _text           segment para public 'CODE' use32
.text:000053D0                 assume cs:_text
.text:000053D0                 ;org 53D0h
.text:000053D0 ; COMDAT (pick any)
.text:000053D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000053D0
.text:000053D0 ; =============== S U B R O U T I N E =======================================
.text:000053D0
.text:000053D0 ; Attributes: bp-based frame
.text:000053D0
.text:000053D0 ; unsigned __int32 __stdcall COutStreamCalcSize::AddRef(COutStreamCalcSize *this)
.text:000053D0                 public ?AddRef@COutStreamCalcSize@@UAGKXZ
.text:000053D0 ?AddRef@COutStreamCalcSize@@UAGKXZ proc near
.text:000053D0                                         ; CODE XREF: [thunk]:COutStreamCalcSize::AddRef`adjustor{4}' (void)+5j
.text:000053D0                                         ; DATA XREF: .rdata:00005164o
.text:000053D0
.text:000053D0 var_4           = dword ptr -4
.text:000053D0 this            = dword ptr  8
.text:000053D0
.text:000053D0                 push    ebp
.text:000053D1                 mov     ebp, esp
.text:000053D3                 push    ecx
.text:000053D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053DB                 mov     eax, [ebp+this]
.text:000053DE                 mov     ecx, [eax+8]
.text:000053E1                 add     ecx, 1
.text:000053E4                 mov     [ebp+var_4], ecx
.text:000053E7                 mov     edx, [ebp+this]
.text:000053EA                 mov     eax, [ebp+var_4]
.text:000053ED                 mov     [edx+8], eax
.text:000053F0                 mov     eax, [ebp+var_4]
.text:000053F3                 mov     esp, ebp
.text:000053F5                 pop     ebp
.text:000053F6                 retn    4
.text:000053F6 ?AddRef@COutStreamCalcSize@@UAGKXZ endp
.text:000053F6
.text:000053F6 ; ---------------------------------------------------------------------------
.text:000053F9                 align 4
.text:000053F9 _text           ends
.text:000053F9
.text:000053FC ; ===========================================================================
.text:000053FC
.text:000053FC ; Segment type: Pure code
.text:000053FC ; Segment permissions: Read/Execute
.text:000053FC _text           segment para public 'CODE' use32
.text:000053FC                 assume cs:_text
.text:000053FC                 ;org 53FCh
.text:000053FC ; COMDAT (pick any)
.text:000053FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000053FC
.text:000053FC ; =============== S U B R O U T I N E =======================================
.text:000053FC
.text:000053FC ; Attributes: bp-based frame
.text:000053FC
.text:000053FC ; unsigned __int32 __stdcall COutStreamCalcSize::Release(COutStreamCalcSize *this)
.text:000053FC                 public ?Release@COutStreamCalcSize@@UAGKXZ
.text:000053FC ?Release@COutStreamCalcSize@@UAGKXZ proc near
.text:000053FC                                         ; CODE XREF: [thunk]:COutStreamCalcSize::Release`adjustor{4}' (void)+5j
.text:000053FC                                         ; DATA XREF: .rdata:00005168o
.text:000053FC
.text:000053FC var_10          = dword ptr -10h
.text:000053FC var_C           = dword ptr -0Ch
.text:000053FC var_8           = dword ptr -8
.text:000053FC var_4           = dword ptr -4
.text:000053FC this            = dword ptr  8
.text:000053FC
.text:000053FC                 push    ebp
.text:000053FD                 mov     ebp, esp
.text:000053FF                 sub     esp, 10h
.text:00005402                 mov     eax, 0CCCCCCCCh
.text:00005407                 mov     [ebp+var_10], eax
.text:0000540A                 mov     [ebp+var_C], eax
.text:0000540D                 mov     [ebp+var_8], eax
.text:00005410                 mov     [ebp+var_4], eax
.text:00005413                 mov     eax, [ebp+this]
.text:00005416                 mov     ecx, [eax+8]
.text:00005419                 sub     ecx, 1
.text:0000541C                 mov     [ebp+var_C], ecx
.text:0000541F                 mov     edx, [ebp+this]
.text:00005422                 mov     eax, [ebp+var_C]
.text:00005425                 mov     [edx+8], eax
.text:00005428                 cmp     [ebp+var_C], 0
.text:0000542C                 jz      short loc_5436
.text:0000542E                 mov     ecx, [ebp+this]
.text:00005431                 mov     eax, [ecx+8]
.text:00005434                 jmp     short loc_5460
.text:00005436 ; ---------------------------------------------------------------------------
.text:00005436
.text:00005436 loc_5436:                               ; CODE XREF: COutStreamCalcSize::Release(void)+30j
.text:00005436                 mov     edx, [ebp+this]
.text:00005439                 mov     [ebp+var_8], edx
.text:0000543C                 mov     eax, [ebp+var_8]
.text:0000543F                 mov     [ebp+var_4], eax
.text:00005442                 cmp     [ebp+var_4], 0
.text:00005446                 jz      short loc_5457
.text:00005448                 push    1
.text:0000544A                 mov     ecx, [ebp+var_4]
.text:0000544D                 call    ??_GCOutStreamCalcSize@@QAEPAXI@Z ; COutStreamCalcSize::`scalar deleting destructor'(uint)
.text:00005452                 mov     [ebp+var_10], eax
.text:00005455                 jmp     short loc_545E
.text:00005457 ; ---------------------------------------------------------------------------
.text:00005457
.text:00005457 loc_5457:                               ; CODE XREF: COutStreamCalcSize::Release(void)+4Aj
.text:00005457                 mov     [ebp+var_10], 0
.text:0000545E
.text:0000545E loc_545E:                               ; CODE XREF: COutStreamCalcSize::Release(void)+59j
.text:0000545E                 xor     eax, eax
.text:00005460
.text:00005460 loc_5460:                               ; CODE XREF: COutStreamCalcSize::Release(void)+38j
.text:00005460                 add     esp, 10h
.text:00005463                 cmp     ebp, esp
.text:00005465                 call    __RTC_CheckEsp
.text:0000546A                 mov     esp, ebp
.text:0000546C                 pop     ebp
.text:0000546D                 retn    4
.text:0000546D ?Release@COutStreamCalcSize@@UAGKXZ endp
.text:0000546D
.text:0000546D _text           ends
.text:0000546D
.text:00005470 ; ===========================================================================
.text:00005470
.text:00005470 ; Segment type: Pure code
.text:00005470 ; Segment permissions: Read/Execute
.text:00005470 _text           segment para public 'CODE' use32
.text:00005470                 assume cs:_text
.text:00005470                 ;org 5470h
.text:00005470 ; COMDAT (pick any)
.text:00005470                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005470
.text:00005470 ; =============== S U B R O U T I N E =======================================
.text:00005470
.text:00005470 ; Attributes: bp-based frame
.text:00005470
.text:00005470 ; public: void * __thiscall COutStreamCalcSize::`scalar deleting destructor'(unsigned int)
.text:00005470                 public ??_GCOutStreamCalcSize@@QAEPAXI@Z
.text:00005470 ??_GCOutStreamCalcSize@@QAEPAXI@Z proc near
.text:00005470                                         ; CODE XREF: COutStreamCalcSize::Release(void)+51p
.text:00005470
.text:00005470 var_4           = dword ptr -4
.text:00005470 arg_0           = dword ptr  8
.text:00005470
.text:00005470                 push    ebp
.text:00005471                 mov     ebp, esp
.text:00005473                 push    ecx
.text:00005474                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000547B                 mov     [ebp+var_4], ecx
.text:0000547E                 mov     ecx, [ebp+var_4] ; this
.text:00005481                 call    ??1COutStreamCalcSize@@QAE@XZ ; COutStreamCalcSize::~COutStreamCalcSize(void)
.text:00005486                 mov     eax, [ebp+arg_0]
.text:00005489                 and     eax, 1
.text:0000548C                 jz      short loc_549A
.text:0000548E                 mov     ecx, [ebp+var_4]
.text:00005491                 push    ecx             ; void *
.text:00005492                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005497                 add     esp, 4
.text:0000549A
.text:0000549A loc_549A:                               ; CODE XREF: COutStreamCalcSize::`scalar deleting destructor'(uint)+1Cj
.text:0000549A                 mov     eax, [ebp+var_4]
.text:0000549D                 add     esp, 4
.text:000054A0                 cmp     ebp, esp
.text:000054A2                 call    __RTC_CheckEsp
.text:000054A7                 mov     esp, ebp
.text:000054A9                 pop     ebp
.text:000054AA                 retn    4
.text:000054AA ??_GCOutStreamCalcSize@@QAEPAXI@Z endp
.text:000054AA
.text:000054AA ; ---------------------------------------------------------------------------
.text:000054AD                 align 10h
.text:000054AD _text           ends
.text:000054AD
.text:000054B0 ; ===========================================================================
.text:000054B0
.text:000054B0 ; Segment type: Pure code
.text:000054B0 ; Segment permissions: Read/Execute
.text:000054B0 _text           segment para public 'CODE' use32
.text:000054B0                 assume cs:_text
.text:000054B0                 ;org 54B0h
.text:000054B0 ; COMDAT (pick any)
.text:000054B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000054B0
.text:000054B0 ; =============== S U B R O U T I N E =======================================
.text:000054B0
.text:000054B0 ; Attributes: bp-based frame
.text:000054B0
.text:000054B0 ; _DWORD __thiscall COutStreamCalcSize::~COutStreamCalcSize(COutStreamCalcSize *__hidden this)
.text:000054B0                 public ??1COutStreamCalcSize@@QAE@XZ
.text:000054B0 ??1COutStreamCalcSize@@QAE@XZ proc near ; CODE XREF: COutStreamCalcSize::`scalar deleting destructor'(uint)+11p
.text:000054B0
.text:000054B0 var_4           = dword ptr -4
.text:000054B0
.text:000054B0                 push    ebp
.text:000054B1                 mov     ebp, esp
.text:000054B3                 push    ecx
.text:000054B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054BB                 mov     [ebp+var_4], ecx
.text:000054BE                 mov     ecx, [ebp+var_4]
.text:000054C1                 add     ecx, 0Ch
.text:000054C4                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000054C9                 add     esp, 4
.text:000054CC                 cmp     ebp, esp
.text:000054CE                 call    __RTC_CheckEsp
.text:000054D3                 mov     esp, ebp
.text:000054D5                 pop     ebp
.text:000054D6                 retn
.text:000054D6 ??1COutStreamCalcSize@@QAE@XZ endp
.text:000054D6
.text:000054D6 ; ---------------------------------------------------------------------------
.text:000054D7                 align 4
.text:000054D7 _text           ends
.text:000054D7
.text:000054D8 ; ===========================================================================
.text:000054D8
.text:000054D8 ; Segment type: Pure code
.text:000054D8 ; Segment permissions: Read/Execute
.text:000054D8 _text           segment para public 'CODE' use32
.text:000054D8                 assume cs:_text
.text:000054D8                 ;org 54D8h
.text:000054D8 ; COMDAT (pick any)
.text:000054D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000054D8
.text:000054D8 ; =============== S U B R O U T I N E =======================================
.text:000054D8
.text:000054D8 ; Attributes: bp-based frame
.text:000054D8
.text:000054D8 ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:000054D8                 public ??0ISequentialOutStream@@QAE@XZ
.text:000054D8 ??0ISequentialOutStream@@QAE@XZ proc near
.text:000054D8                                         ; CODE XREF: COutStreamCalcSize::COutStreamCalcSize(void)+11p
.text:000054D8
.text:000054D8 var_4           = dword ptr -4
.text:000054D8
.text:000054D8                 push    ebp
.text:000054D9                 mov     ebp, esp
.text:000054DB                 push    ecx
.text:000054DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054E3                 mov     [ebp+var_4], ecx
.text:000054E6                 mov     ecx, [ebp+var_4]
.text:000054E9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000054EE                 mov     eax, [ebp+var_4]
.text:000054F1                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:000054F7                 mov     eax, [ebp+var_4]
.text:000054FA                 add     esp, 4
.text:000054FD                 cmp     ebp, esp
.text:000054FF                 call    __RTC_CheckEsp
.text:00005504                 mov     esp, ebp
.text:00005506                 pop     ebp
.text:00005507                 retn
.text:00005507 ??0ISequentialOutStream@@QAE@XZ endp
.text:00005507
.text:00005507 _text           ends
.text:00005507
.rdata:00005508 ; ===========================================================================
.rdata:00005508
.rdata:00005508 ; Segment type: Pure data
.rdata:00005508 ; Segment permissions: Read
.rdata:00005508 _rdata          segment dword public 'DATA' use32
.rdata:00005508                 assume cs:_rdata
.rdata:00005508                 ;org 5508h
.rdata:00005508 ; COMDAT (pick largest)
.rdata:00005508                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:0000550C                 public ??_7ISequentialOutStream@@6B@
.rdata:0000550C ; const ISequentialOutStream::`vftable'
.rdata:0000550C ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:0000550C                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00005510                 dd offset __purecall
.rdata:00005514                 dd offset __purecall
.rdata:00005518                 dd offset __purecall
.rdata:00005518 _rdata          ends
.rdata:00005518
.rdata$r:0000551C ; ===========================================================================
.rdata$r:0000551C
.rdata$r:0000551C ; Segment type: Pure data
.rdata$r:0000551C ; Segment permissions: Read
.rdata$r:0000551C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000551C                 assume cs:_rdata$r
.rdata$r:0000551C                 ;org 551Ch
.rdata$r:0000551C ; COMDAT (pick any)
.rdata$r:0000551C                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:0000551C ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:0000551C ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00005508o
.rdata$r:0000551D                 db    0
.rdata$r:0000551E                 db    0
.rdata$r:0000551F                 db    0
.rdata$r:00005520                 db    0
.rdata$r:00005521                 db    0
.rdata$r:00005522                 db    0
.rdata$r:00005523                 db    0
.rdata$r:00005524                 db    0
.rdata$r:00005525                 db    0
.rdata$r:00005526                 db    0
.rdata$r:00005527                 db    0
.rdata$r:00005528                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:0000552C                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000552C _rdata$r        ends
.rdata$r:0000552C
.text:00005530 ; ===========================================================================
.text:00005530
.text:00005530 ; Segment type: Pure code
.text:00005530 ; Segment permissions: Read/Execute
.text:00005530 _text           segment para public 'CODE' use32
.text:00005530                 assume cs:_text
.text:00005530                 ;org 5530h
.text:00005530 ; COMDAT (pick any)
.text:00005530                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005530
.text:00005530 ; =============== S U B R O U T I N E =======================================
.text:00005530
.text:00005530 ; Attributes: bp-based frame
.text:00005530
.text:00005530 ; _DWORD __thiscall IOutStreamFinish::IOutStreamFinish(IOutStreamFinish *__hidden this)
.text:00005530                 public ??0IOutStreamFinish@@QAE@XZ
.text:00005530 ??0IOutStreamFinish@@QAE@XZ proc near   ; CODE XREF: COutStreamCalcSize::COutStreamCalcSize(void)+1Cp
.text:00005530
.text:00005530 var_4           = dword ptr -4
.text:00005530
.text:00005530                 push    ebp
.text:00005531                 mov     ebp, esp
.text:00005533                 push    ecx
.text:00005534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000553B                 mov     [ebp+var_4], ecx
.text:0000553E                 mov     ecx, [ebp+var_4]
.text:00005541                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00005546                 mov     eax, [ebp+var_4]
.text:00005549                 mov     dword ptr [eax], offset ??_7IOutStreamFinish@@6B@ ; const IOutStreamFinish::`vftable'
.text:0000554F                 mov     eax, [ebp+var_4]
.text:00005552                 add     esp, 4
.text:00005555                 cmp     ebp, esp
.text:00005557                 call    __RTC_CheckEsp
.text:0000555C                 mov     esp, ebp
.text:0000555E                 pop     ebp
.text:0000555F                 retn
.text:0000555F ??0IOutStreamFinish@@QAE@XZ endp
.text:0000555F
.text:0000555F _text           ends
.text:0000555F
.rdata:00005560 ; ===========================================================================
.rdata:00005560
.rdata:00005560 ; Segment type: Pure data
.rdata:00005560 ; Segment permissions: Read
.rdata:00005560 _rdata          segment dword public 'DATA' use32
.rdata:00005560                 assume cs:_rdata
.rdata:00005560                 ;org 5560h
.rdata:00005560 ; COMDAT (pick largest)
.rdata:00005560                 dd offset ??_R4IOutStreamFinish@@6B@ ; const IOutStreamFinish::`RTTI Complete Object Locator'
.rdata:00005564                 public ??_7IOutStreamFinish@@6B@
.rdata:00005564 ; const IOutStreamFinish::`vftable'
.rdata:00005564 ??_7IOutStreamFinish@@6B@ dd offset __purecall
.rdata:00005564                                         ; DATA XREF: IOutStreamFinish::IOutStreamFinish(void)+19o
.rdata:00005568                 dd offset __purecall
.rdata:0000556C                 dd offset __purecall
.rdata:00005570                 dd offset __purecall
.rdata:00005570 _rdata          ends
.rdata:00005570
.rdata$r:00005574 ; ===========================================================================
.rdata$r:00005574
.rdata$r:00005574 ; Segment type: Pure data
.rdata$r:00005574 ; Segment permissions: Read
.rdata$r:00005574 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005574                 assume cs:_rdata$r
.rdata$r:00005574                 ;org 5574h
.rdata$r:00005574 ; COMDAT (pick any)
.rdata$r:00005574                 public ??_R4IOutStreamFinish@@6B@
.rdata$r:00005574 ; const IOutStreamFinish::`RTTI Complete Object Locator'
.rdata$r:00005574 ??_R4IOutStreamFinish@@6B@ db    0      ; DATA XREF: .rdata:00005560o
.rdata$r:00005575                 db    0
.rdata$r:00005576                 db    0
.rdata$r:00005577                 db    0
.rdata$r:00005578                 db    0
.rdata$r:00005579                 db    0
.rdata$r:0000557A                 db    0
.rdata$r:0000557B                 db    0
.rdata$r:0000557C                 db    0
.rdata$r:0000557D                 db    0
.rdata$r:0000557E                 db    0
.rdata$r:0000557F                 db    0
.rdata$r:00005580                 dd offset ??_R0?AUIOutStreamFinish@@@8 ; IOutStreamFinish `RTTI Type Descriptor'
.rdata$r:00005584                 dd offset ??_R3IOutStreamFinish@@8 ; IOutStreamFinish::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005584 _rdata$r        ends
.rdata$r:00005584
.text:00005588 ; ===========================================================================
.text:00005588
.text:00005588 ; Segment type: Pure code
.text:00005588 ; Segment permissions: Read/Execute
.text:00005588 _text           segment para public 'CODE' use32
.text:00005588                 assume cs:_text
.text:00005588                 ;org 5588h
.text:00005588 ; COMDAT (pick any)
.text:00005588                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005588
.text:00005588 ; =============== S U B R O U T I N E =======================================
.text:00005588
.text:00005588 ; Attributes: bp-based frame
.text:00005588
.text:00005588 ; void __thiscall CSequentialInStreamCalcSize::ReleaseStream(CSequentialInStreamCalcSize *__hidden this)
.text:00005588                 public ?ReleaseStream@CSequentialInStreamCalcSize@@QAEXXZ
.text:00005588 ?ReleaseStream@CSequentialInStreamCalcSize@@QAEXXZ proc near
.text:00005588                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+777p
.text:00005588
.text:00005588 var_4           = dword ptr -4
.text:00005588
.text:00005588                 push    ebp
.text:00005589                 mov     ebp, esp
.text:0000558B                 push    ecx
.text:0000558C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005593                 mov     [ebp+var_4], ecx
.text:00005596                 mov     ecx, [ebp+var_4]
.text:00005599                 add     ecx, 8
.text:0000559C                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:000055A1                 add     esp, 4
.text:000055A4                 cmp     ebp, esp
.text:000055A6                 call    __RTC_CheckEsp
.text:000055AB                 mov     esp, ebp
.text:000055AD                 pop     ebp
.text:000055AE                 retn
.text:000055AE ?ReleaseStream@CSequentialInStreamCalcSize@@QAEXXZ endp
.text:000055AE
.text:000055AE ; ---------------------------------------------------------------------------
.text:000055AF                 align 10h
.text:000055AF _text           ends
.text:000055AF
.text:000055B0 ; ===========================================================================
.text:000055B0
.text:000055B0 ; Segment type: Pure code
.text:000055B0 ; Segment permissions: Read/Execute
.text:000055B0 _text           segment para public 'CODE' use32
.text:000055B0                 assume cs:_text
.text:000055B0                 ;org 55B0h
.text:000055B0 ; COMDAT (pick any)
.text:000055B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055B0
.text:000055B0 ; =============== S U B R O U T I N E =======================================
.text:000055B0
.text:000055B0 ; Attributes: bp-based frame
.text:000055B0
.text:000055B0 ; void __thiscall COutStreamCalcSize::ReleaseStream(COutStreamCalcSize *__hidden this)
.text:000055B0                 public ?ReleaseStream@COutStreamCalcSize@@QAEXXZ
.text:000055B0 ?ReleaseStream@COutStreamCalcSize@@QAEXXZ proc near
.text:000055B0                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+787p
.text:000055B0
.text:000055B0 var_4           = dword ptr -4
.text:000055B0
.text:000055B0                 push    ebp
.text:000055B1                 mov     ebp, esp
.text:000055B3                 push    ecx
.text:000055B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055BB                 mov     [ebp+var_4], ecx
.text:000055BE                 mov     ecx, [ebp+var_4]
.text:000055C1                 add     ecx, 0Ch
.text:000055C4                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:000055C9                 add     esp, 4
.text:000055CC                 cmp     ebp, esp
.text:000055CE                 call    __RTC_CheckEsp
.text:000055D3                 mov     esp, ebp
.text:000055D5                 pop     ebp
.text:000055D6                 retn
.text:000055D6 ?ReleaseStream@COutStreamCalcSize@@QAEXXZ endp
.text:000055D6
.text:000055D6 ; ---------------------------------------------------------------------------
.text:000055D7                 align 4
.text:000055D7 _text           ends
.text:000055D7
.text:000055D8 ; ===========================================================================
.text:000055D8
.text:000055D8 ; Segment type: Pure code
.text:000055D8 ; Segment permissions: Read/Execute
.text:000055D8 _text           segment para public 'CODE' use32
.text:000055D8                 assume cs:_text
.text:000055D8                 ;org 55D8h
.text:000055D8 ; COMDAT (pick any)
.text:000055D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055D8
.text:000055D8 ; =============== S U B R O U T I N E =======================================
.text:000055D8
.text:000055D8 ; Attributes: bp-based frame
.text:000055D8
.text:000055D8 ; unsigned __int64 __thiscall CSequentialInStreamCalcSize::GetSize(CSequentialInStreamCalcSize *__hidden this)
.text:000055D8                 public ?GetSize@CSequentialInStreamCalcSize@@QBE_KXZ
.text:000055D8 ?GetSize@CSequentialInStreamCalcSize@@QBE_KXZ proc near
.text:000055D8                                         ; CODE XREF: NCoderMixer2::CMixerST::GetBondStreamSize(uint)+36p
.text:000055D8
.text:000055D8 var_4           = dword ptr -4
.text:000055D8
.text:000055D8                 push    ebp
.text:000055D9                 mov     ebp, esp
.text:000055DB                 push    ecx
.text:000055DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055E3                 mov     [ebp+var_4], ecx
.text:000055E6                 mov     ecx, [ebp+var_4]
.text:000055E9                 mov     eax, [ecx+10h]
.text:000055EC                 mov     edx, [ecx+14h]
.text:000055EF                 mov     esp, ebp
.text:000055F1                 pop     ebp
.text:000055F2                 retn
.text:000055F2 ?GetSize@CSequentialInStreamCalcSize@@QBE_KXZ endp
.text:000055F2
.text:000055F2 ; ---------------------------------------------------------------------------
.text:000055F3                 align 4
.text:000055F3 _text           ends
.text:000055F3
.text:000055F4 ; ===========================================================================
.text:000055F4
.text:000055F4 ; Segment type: Pure code
.text:000055F4 ; Segment permissions: Read/Execute
.text:000055F4 _text           segment para public 'CODE' use32
.text:000055F4                 assume cs:_text
.text:000055F4                 ;org 55F4h
.text:000055F4 ; COMDAT (pick any)
.text:000055F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055F4
.text:000055F4 ; =============== S U B R O U T I N E =======================================
.text:000055F4
.text:000055F4 ; Attributes: bp-based frame
.text:000055F4
.text:000055F4 ; unsigned __int64 __thiscall COutStreamCalcSize::GetSize(COutStreamCalcSize *__hidden this)
.text:000055F4                 public ?GetSize@COutStreamCalcSize@@QBE_KXZ
.text:000055F4 ?GetSize@COutStreamCalcSize@@QBE_KXZ proc near
.text:000055F4                                         ; CODE XREF: NCoderMixer2::CMixerST::GetBondStreamSize(uint)+43p
.text:000055F4
.text:000055F4 var_4           = dword ptr -4
.text:000055F4
.text:000055F4                 push    ebp
.text:000055F5                 mov     ebp, esp
.text:000055F7                 push    ecx
.text:000055F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055FF                 mov     [ebp+var_4], ecx
.text:00005602                 mov     ecx, [ebp+var_4]
.text:00005605                 mov     eax, [ecx+10h]
.text:00005608                 mov     edx, [ecx+14h]
.text:0000560B                 mov     esp, ebp
.text:0000560D                 pop     ebp
.text:0000560E                 retn
.text:0000560E ?GetSize@COutStreamCalcSize@@QBE_KXZ endp
.text:0000560E
.text:0000560E ; ---------------------------------------------------------------------------
.text:0000560F                 align 10h
.text:0000560F _text           ends
.text:0000560F
.text:00005610 ; ===========================================================================
.text:00005610
.text:00005610 ; Segment type: Pure code
.text:00005610 ; Segment permissions: Read/Execute
.text:00005610 _text           segment para public 'CODE' use32
.text:00005610                 assume cs:_text
.text:00005610                 ;org 5610h
.text:00005610 ; COMDAT (pick any)
.text:00005610                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005610
.text:00005610 ; =============== S U B R O U T I N E =======================================
.text:00005610
.text:00005610 ; Attributes: bp-based frame
.text:00005610
.text:00005610 ; _DWORD __thiscall NCoderMixer2::CCoderMT::CReleaser::CReleaser(NCoderMixer2::CCoderMT::CReleaser *this, struct NCoderMixer2::CCoderMT *)
.text:00005610                 public ??0CReleaser@CCoderMT@NCoderMixer2@@QAE@AAV12@@Z
.text:00005610 ??0CReleaser@CCoderMT@NCoderMixer2@@QAE@AAV12@@Z proc near
.text:00005610                                         ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+122p
.text:00005610
.text:00005610 var_4           = dword ptr -4
.text:00005610 arg_0           = dword ptr  8
.text:00005610
.text:00005610                 push    ebp
.text:00005611                 mov     ebp, esp
.text:00005613                 push    ecx
.text:00005614                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000561B                 mov     [ebp+var_4], ecx
.text:0000561E                 mov     eax, [ebp+var_4]
.text:00005621                 mov     ecx, [ebp+arg_0]
.text:00005624                 mov     [eax], ecx
.text:00005626                 mov     eax, [ebp+var_4]
.text:00005629                 mov     esp, ebp
.text:0000562B                 pop     ebp
.text:0000562C                 retn    4
.text:0000562C ??0CReleaser@CCoderMT@NCoderMixer2@@QAE@AAV12@@Z endp
.text:0000562C
.text:0000562C ; ---------------------------------------------------------------------------
.text:0000562F                 align 10h
.text:0000562F _text           ends
.text:0000562F
.text:00005630 ; ===========================================================================
.text:00005630
.text:00005630 ; Segment type: Pure code
.text:00005630 ; Segment permissions: Read/Execute
.text:00005630 _text           segment para public 'CODE' use32
.text:00005630                 assume cs:_text
.text:00005630                 ;org 5630h
.text:00005630 ; COMDAT (pick any)
.text:00005630                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005630
.text:00005630 ; =============== S U B R O U T I N E =======================================
.text:00005630
.text:00005630 ; Attributes: bp-based frame
.text:00005630
.text:00005630 ; _DWORD __thiscall NCoderMixer2::CCoderMT::CReleaser::~CReleaser(NCoderMixer2::CCoderMT::CReleaser *__hidden this)
.text:00005630                 public ??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ
.text:00005630 ??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ proc near
.text:00005630                                         ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+296p
.text:00005630                                         ; __unwindfunclet$?Code@CCoderMT@NCoderMixer2@@QAEXPAUICompressProgressInfo@@@Z$0+3j
.text:00005630
.text:00005630 var_4           = dword ptr -4
.text:00005630
.text:00005630                 push    ebp
.text:00005631                 mov     ebp, esp
.text:00005633                 push    ecx
.text:00005634                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000563B                 mov     [ebp+var_4], ecx
.text:0000563E                 mov     eax, [ebp+var_4]
.text:00005641                 mov     ecx, [eax]      ; this
.text:00005643                 call    ?Release@CCoderMT@NCoderMixer2@@QAEXXZ ; NCoderMixer2::CCoderMT::Release(void)
.text:00005648                 add     esp, 4
.text:0000564B                 cmp     ebp, esp
.text:0000564D                 call    __RTC_CheckEsp
.text:00005652                 mov     esp, ebp
.text:00005654                 pop     ebp
.text:00005655                 retn
.text:00005655 ??1CReleaser@CCoderMT@NCoderMixer2@@QAE@XZ endp
.text:00005655
.text:00005655 ; ---------------------------------------------------------------------------
.text:00005656                 align 4
.text:00005656 _text           ends
.text:00005656
.text:00005658 ; ===========================================================================
.text:00005658
.text:00005658 ; Segment type: Pure code
.text:00005658 ; Segment permissions: Read/Execute
.text:00005658 _text           segment para public 'CODE' use32
.text:00005658                 assume cs:_text
.text:00005658                 ;org 5658h
.text:00005658 ; COMDAT (pick any)
.text:00005658                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005658
.text:00005658 ; =============== S U B R O U T I N E =======================================
.text:00005658
.text:00005658 ; Attributes: bp-based frame
.text:00005658
.text:00005658 ; void __thiscall NCoderMixer2::CCoderMT::Release(NCoderMixer2::CCoderMT *__hidden this)
.text:00005658                 public ?Release@CCoderMT@NCoderMixer2@@QAEXXZ
.text:00005658 ?Release@CCoderMT@NCoderMixer2@@QAEXXZ proc near
.text:00005658                                         ; CODE XREF: NCoderMixer2::CCoderMT::CReleaser::~CReleaser(void)+13p
.text:00005658
.text:00005658 var_8           = dword ptr -8
.text:00005658 var_4           = dword ptr -4
.text:00005658
.text:00005658                 push    ebp
.text:00005659                 mov     ebp, esp
.text:0000565B                 sub     esp, 8
.text:0000565E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005665                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000566C                 mov     [ebp+var_4], ecx
.text:0000566F                 mov     ecx, [ebp+var_4]
.text:00005672                 add     ecx, 50h ; 'P'
.text:00005675                 call    ?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ ; CRecordVector<ISequentialInStream *>::Clear(void)
.text:0000567A                 mov     ecx, [ebp+var_4]
.text:0000567D                 add     ecx, 5Ch ; '\'
.text:00005680                 call    ?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ ; CRecordVector<ISequentialOutStream *>::Clear(void)
.text:00005685                 mov     [ebp+var_8], 0
.text:0000568C                 jmp     short loc_5697
.text:0000568E ; ---------------------------------------------------------------------------
.text:0000568E
.text:0000568E loc_568E:                               ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+65j
.text:0000568E                 mov     eax, [ebp+var_8]
.text:00005691                 add     eax, 1
.text:00005694                 mov     [ebp+var_8], eax
.text:00005697
.text:00005697 loc_5697:                               ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+34j
.text:00005697                 mov     ecx, [ebp+var_4]
.text:0000569A                 add     ecx, 70h ; 'p'
.text:0000569D                 call    ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::Size(void)
.text:000056A2                 cmp     [ebp+var_8], eax
.text:000056A5                 jnb     short loc_56BF
.text:000056A7                 mov     ecx, [ebp+var_8]
.text:000056AA                 push    ecx
.text:000056AB                 mov     ecx, [ebp+var_4]
.text:000056AE                 add     ecx, 70h ; 'p'
.text:000056B1                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream>>::operator[](uint)
.text:000056B6                 mov     ecx, eax
.text:000056B8                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:000056BD                 jmp     short loc_568E
.text:000056BF ; ---------------------------------------------------------------------------
.text:000056BF
.text:000056BF loc_56BF:                               ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+4Dj
.text:000056BF                 mov     [ebp+var_8], 0
.text:000056C6                 jmp     short loc_56D1
.text:000056C8 ; ---------------------------------------------------------------------------
.text:000056C8
.text:000056C8 loc_56C8:                               ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+9Fj
.text:000056C8                 mov     edx, [ebp+var_8]
.text:000056CB                 add     edx, 1
.text:000056CE                 mov     [ebp+var_8], edx
.text:000056D1
.text:000056D1 loc_56D1:                               ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+6Ej
.text:000056D1                 mov     ecx, [ebp+var_4]
.text:000056D4                 add     ecx, 7Ch ; '|'
.text:000056D7                 call    ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::Size(void)
.text:000056DC                 cmp     [ebp+var_8], eax
.text:000056DF                 jnb     short loc_56F9
.text:000056E1                 mov     eax, [ebp+var_8]
.text:000056E4                 push    eax
.text:000056E5                 mov     ecx, [ebp+var_4]
.text:000056E8                 add     ecx, 7Ch ; '|'
.text:000056EB                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream>>::operator[](uint)
.text:000056F0                 mov     ecx, eax
.text:000056F2                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:000056F7                 jmp     short loc_56C8
.text:000056F9 ; ---------------------------------------------------------------------------
.text:000056F9
.text:000056F9 loc_56F9:                               ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+87j
.text:000056F9                 add     esp, 8
.text:000056FC                 cmp     ebp, esp
.text:000056FE                 call    __RTC_CheckEsp
.text:00005703                 mov     esp, ebp
.text:00005705                 pop     ebp
.text:00005706                 retn
.text:00005706 ?Release@CCoderMT@NCoderMixer2@@QAEXXZ endp
.text:00005706
.text:00005706 ; ---------------------------------------------------------------------------
.text:00005707                 align 4
.text:00005707 _text           ends
.text:00005707
.text:00005708 ; ===========================================================================
.text:00005708
.text:00005708 ; Segment type: Pure code
.text:00005708 ; Segment permissions: Read/Execute
.text:00005708 _text           segment para public 'CODE' use32
.text:00005708                 assume cs:_text
.text:00005708                 ;org 5708h
.text:00005708 ; COMDAT (pick any)
.text:00005708                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005708
.text:00005708 ; =============== S U B R O U T I N E =======================================
.text:00005708
.text:00005708 ; Attributes: bp-based frame
.text:00005708
.text:00005708 ; void __thiscall CVirtThread::WaitExecuteFinish(CVirtThread *__hidden this)
.text:00005708                 public ?WaitExecuteFinish@CVirtThread@@QAEXXZ
.text:00005708 ?WaitExecuteFinish@CVirtThread@@QAEXXZ proc near
.text:00005708                                         ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+12Fp
.text:00005708
.text:00005708 var_4           = dword ptr -4
.text:00005708
.text:00005708                 push    ebp
.text:00005709                 mov     ebp, esp
.text:0000570B                 push    ecx
.text:0000570C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005713                 mov     [ebp+var_4], ecx
.text:00005716                 mov     ecx, [ebp+var_4]
.text:00005719                 add     ecx, 8          ; this
.text:0000571C                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:00005721                 add     esp, 4
.text:00005724                 cmp     ebp, esp
.text:00005726                 call    __RTC_CheckEsp
.text:0000572B                 mov     esp, ebp
.text:0000572D                 pop     ebp
.text:0000572E                 retn
.text:0000572E ?WaitExecuteFinish@CVirtThread@@QAEXXZ endp
.text:0000572E
.text:0000572E ; ---------------------------------------------------------------------------
.text:0000572F                 align 10h
.text:0000572F _text           ends
.text:0000572F
.text:00005730 ; ===========================================================================
.text:00005730
.text:00005730 ; Segment type: Pure code
.text:00005730 ; Segment permissions: Read/Execute
.text:00005730 _text           segment para public 'CODE' use32
.text:00005730                 assume cs:_text
.text:00005730                 ;org 5730h
.text:00005730 ; COMDAT (pick any)
.text:00005730                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005730
.text:00005730 ; =============== S U B R O U T I N E =======================================
.text:00005730
.text:00005730 ; Attributes: bp-based frame
.text:00005730
.text:00005730 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Lock(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00005730                 public ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00005730 ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00005730                                         ; CODE XREF: CVirtThread::WaitExecuteFinish(void)+14p
.text:00005730
.text:00005730 var_4           = dword ptr -4
.text:00005730
.text:00005730                 push    ebp
.text:00005731                 mov     ebp, esp
.text:00005733                 push    ecx
.text:00005734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000573B                 mov     [ebp+var_4], ecx
.text:0000573E                 mov     eax, [ebp+var_4]
.text:00005741                 mov     ecx, [eax]
.text:00005743                 push    ecx
.text:00005744                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00005749                 add     esp, 4
.text:0000574C                 cmp     ebp, esp
.text:0000574E                 call    __RTC_CheckEsp
.text:00005753                 mov     esp, ebp
.text:00005755                 pop     ebp
.text:00005756                 retn
.text:00005756 ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00005756
.text:00005756 ; ---------------------------------------------------------------------------
.text:00005757                 align 4
.text:00005757 _text           ends
.text:00005757
.text:00005758 ; ===========================================================================
.text:00005758
.text:00005758 ; Segment type: Pure code
.text:00005758 ; Segment permissions: Read/Execute
.text:00005758 _text           segment para public 'CODE' use32
.text:00005758                 assume cs:_text
.text:00005758                 ;org 5758h
.text:00005758 ; COMDAT (pick any)
.text:00005758                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005758
.text:00005758 ; =============== S U B R O U T I N E =======================================
.text:00005758
.text:00005758 ; Attributes: bp-based frame
.text:00005758
.text:00005758 ; public: __thiscall CMyComPtr<struct ICompressCoder>::operator struct ICompressCoder *(void)const
.text:00005758                 public ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00005758 ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00005758                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+9Cp
.text:00005758                                         ; NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+A8p ...
.text:00005758
.text:00005758 var_4           = dword ptr -4
.text:00005758
.text:00005758                 push    ebp
.text:00005759                 mov     ebp, esp
.text:0000575B                 push    ecx
.text:0000575C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005763                 mov     [ebp+var_4], ecx
.text:00005766                 mov     eax, [ebp+var_4]
.text:00005769                 mov     eax, [eax]
.text:0000576B                 mov     esp, ebp
.text:0000576D                 pop     ebp
.text:0000576E                 retn
.text:0000576E ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:0000576E
.text:0000576E ; ---------------------------------------------------------------------------
.text:0000576F                 align 10h
.text:0000576F _text           ends
.text:0000576F
.text:00005770 ; ===========================================================================
.text:00005770
.text:00005770 ; Segment type: Pure code
.text:00005770 ; Segment permissions: Read/Execute
.text:00005770 _text           segment para public 'CODE' use32
.text:00005770                 assume cs:_text
.text:00005770                 ;org 5770h
.text:00005770 ; COMDAT (pick any)
.text:00005770                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005770
.text:00005770 ; =============== S U B R O U T I N E =======================================
.text:00005770
.text:00005770 ; Attributes: bp-based frame
.text:00005770
.text:00005770 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:00005770                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00005770 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00005770                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+617p
.text:00005770                                         ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+197p
.text:00005770
.text:00005770 var_4           = dword ptr -4
.text:00005770
.text:00005770                 push    ebp
.text:00005771                 mov     ebp, esp
.text:00005773                 push    ecx
.text:00005774                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000577B                 mov     [ebp+var_4], ecx
.text:0000577E                 mov     eax, [ebp+var_4]
.text:00005781                 mov     eax, [eax]
.text:00005783                 mov     esp, ebp
.text:00005785                 pop     ebp
.text:00005786                 retn
.text:00005786 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:00005786
.text:00005786 ; ---------------------------------------------------------------------------
.text:00005787                 align 4
.text:00005787 _text           ends
.text:00005787
.text:00005788 ; ===========================================================================
.text:00005788
.text:00005788 ; Segment type: Pure code
.text:00005788 ; Segment permissions: Read/Execute
.text:00005788 _text           segment para public 'CODE' use32
.text:00005788                 assume cs:_text
.text:00005788                 ;org 5788h
.text:00005788 ; COMDAT (pick any)
.text:00005788                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005788
.text:00005788 ; =============== S U B R O U T I N E =======================================
.text:00005788
.text:00005788 ; Attributes: bp-based frame
.text:00005788
.text:00005788 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(class CMyComPtr<struct ICompressCoder> const &)
.text:00005788                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z
.text:00005788 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z proc near
.text:00005788                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+82p
.text:00005788                                         ; NCoderMixer2::CMixerMT::AddCoder(CCreatedCoder const &)+61p
.text:00005788
.text:00005788 var_4           = dword ptr -4
.text:00005788 arg_0           = dword ptr  8
.text:00005788
.text:00005788                 push    ebp
.text:00005789                 mov     ebp, esp
.text:0000578B                 push    ecx
.text:0000578C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005793                 mov     [ebp+var_4], ecx
.text:00005796                 mov     eax, [ebp+arg_0]
.text:00005799                 mov     ecx, [eax]
.text:0000579B                 push    ecx
.text:0000579C                 mov     ecx, [ebp+var_4]
.text:0000579F                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:000057A4                 add     esp, 4
.text:000057A7                 cmp     ebp, esp
.text:000057A9                 call    __RTC_CheckEsp
.text:000057AE                 mov     esp, ebp
.text:000057B0                 pop     ebp
.text:000057B1                 retn    4
.text:000057B1 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z endp
.text:000057B1
.text:000057B1 _text           ends
.text:000057B1
.text:000057B4 ; ===========================================================================
.text:000057B4
.text:000057B4 ; Segment type: Pure code
.text:000057B4 ; Segment permissions: Read/Execute
.text:000057B4 _text           segment para public 'CODE' use32
.text:000057B4                 assume cs:_text
.text:000057B4                 ;org 57B4h
.text:000057B4 ; COMDAT (pick any)
.text:000057B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000057B4
.text:000057B4 ; =============== S U B R O U T I N E =======================================
.text:000057B4
.text:000057B4 ; Attributes: bp-based frame
.text:000057B4
.text:000057B4 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::operator struct ICompressCoder2 *(void)const
.text:000057B4                 public ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ
.text:000057B4 ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ proc near
.text:000057B4                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+B8p
.text:000057B4                                         ; NCoderMixer2::CCoder::GetUnknown(void)+36p
.text:000057B4
.text:000057B4 var_4           = dword ptr -4
.text:000057B4
.text:000057B4                 push    ebp
.text:000057B5                 mov     ebp, esp
.text:000057B7                 push    ecx
.text:000057B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057BF                 mov     [ebp+var_4], ecx
.text:000057C2                 mov     eax, [ebp+var_4]
.text:000057C5                 mov     eax, [eax]
.text:000057C7                 mov     esp, ebp
.text:000057C9                 pop     ebp
.text:000057CA                 retn
.text:000057CA ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ endp
.text:000057CA
.text:000057CA ; ---------------------------------------------------------------------------
.text:000057CB                 align 4
.text:000057CB _text           ends
.text:000057CB
.text:000057CC ; ===========================================================================
.text:000057CC
.text:000057CC ; Segment type: Pure code
.text:000057CC ; Segment permissions: Read/Execute
.text:000057CC _text           segment para public 'CODE' use32
.text:000057CC                 assume cs:_text
.text:000057CC                 ;org 57CCh
.text:000057CC ; COMDAT (pick any)
.text:000057CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000057CC
.text:000057CC ; =============== S U B R O U T I N E =======================================
.text:000057CC
.text:000057CC ; Attributes: bp-based frame
.text:000057CC
.text:000057CC ; public: struct ICompressCoder2 * __thiscall CMyComPtr<struct ICompressCoder2>::operator->(void)const
.text:000057CC                 public ??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ
.text:000057CC ??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ proc near
.text:000057CC                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+683p
.text:000057CC                                         ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+23Bp
.text:000057CC
.text:000057CC var_4           = dword ptr -4
.text:000057CC
.text:000057CC                 push    ebp
.text:000057CD                 mov     ebp, esp
.text:000057CF                 push    ecx
.text:000057D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057D7                 mov     [ebp+var_4], ecx
.text:000057DA                 mov     eax, [ebp+var_4]
.text:000057DD                 mov     eax, [eax]
.text:000057DF                 mov     esp, ebp
.text:000057E1                 pop     ebp
.text:000057E2                 retn
.text:000057E2 ??C?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ endp
.text:000057E2
.text:000057E2 ; ---------------------------------------------------------------------------
.text:000057E3                 align 4
.text:000057E3 _text           ends
.text:000057E3
.text:000057E4 ; ===========================================================================
.text:000057E4
.text:000057E4 ; Segment type: Pure code
.text:000057E4 ; Segment permissions: Read/Execute
.text:000057E4 _text           segment para public 'CODE' use32
.text:000057E4                 assume cs:_text
.text:000057E4                 ;org 57E4h
.text:000057E4 ; COMDAT (pick any)
.text:000057E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000057E4
.text:000057E4 ; =============== S U B R O U T I N E =======================================
.text:000057E4
.text:000057E4 ; Attributes: bp-based frame
.text:000057E4
.text:000057E4 ; public: struct ICompressCoder2 * __thiscall CMyComPtr<struct ICompressCoder2>::operator=(class CMyComPtr<struct ICompressCoder2> const &)
.text:000057E4                 public ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z
.text:000057E4 ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z proc near
.text:000057E4                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+94p
.text:000057E4                                         ; NCoderMixer2::CMixerMT::AddCoder(CCreatedCoder const &)+73p
.text:000057E4
.text:000057E4 var_4           = dword ptr -4
.text:000057E4 arg_0           = dword ptr  8
.text:000057E4
.text:000057E4                 push    ebp
.text:000057E5                 mov     ebp, esp
.text:000057E7                 push    ecx
.text:000057E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057EF                 mov     [ebp+var_4], ecx
.text:000057F2                 mov     eax, [ebp+arg_0]
.text:000057F5                 mov     ecx, [eax]
.text:000057F7                 push    ecx
.text:000057F8                 mov     ecx, [ebp+var_4]
.text:000057FB                 call    ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ; CMyComPtr<ICompressCoder2>::operator=(ICompressCoder2 *)
.text:00005800                 add     esp, 4
.text:00005803                 cmp     ebp, esp
.text:00005805                 call    __RTC_CheckEsp
.text:0000580A                 mov     esp, ebp
.text:0000580C                 pop     ebp
.text:0000580D                 retn    4
.text:0000580D ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@ABV0@@Z endp
.text:0000580D
.text:0000580D _text           ends
.text:0000580D
.text:00005810 ; ===========================================================================
.text:00005810
.text:00005810 ; Segment type: Pure code
.text:00005810 ; Segment permissions: Read/Execute
.text:00005810 _text           segment para public 'CODE' use32
.text:00005810                 assume cs:_text
.text:00005810                 ;org 5810h
.text:00005810 ; COMDAT (pick any)
.text:00005810                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005810
.text:00005810 ; =============== S U B R O U T I N E =======================================
.text:00005810
.text:00005810 ; Attributes: bp-based frame
.text:00005810
.text:00005810 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00005810                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00005810 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00005810                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+C9p
.text:00005810                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+95p ...
.text:00005810
.text:00005810 var_4           = dword ptr -4
.text:00005810
.text:00005810                 push    ebp
.text:00005811                 mov     ebp, esp
.text:00005813                 push    ecx
.text:00005814                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000581B                 mov     [ebp+var_4], ecx
.text:0000581E                 mov     eax, [ebp+var_4]
.text:00005821                 mov     dword ptr [eax], 0
.text:00005827                 mov     eax, [ebp+var_4]
.text:0000582A                 mov     esp, ebp
.text:0000582C                 pop     ebp
.text:0000582D                 retn
.text:0000582D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000582D
.text:0000582D ; ---------------------------------------------------------------------------
.text:0000582E                 align 10h
.text:0000582E _text           ends
.text:0000582E
.text:00005830 ; ===========================================================================
.text:00005830
.text:00005830 ; Segment type: Pure code
.text:00005830 ; Segment permissions: Read/Execute
.text:00005830 _text           segment para public 'CODE' use32
.text:00005830                 assume cs:_text
.text:00005830                 ;org 5830h
.text:00005830 ; COMDAT (pick any)
.text:00005830                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005830
.text:00005830 ; =============== S U B R O U T I N E =======================================
.text:00005830
.text:00005830 ; Attributes: bp-based frame
.text:00005830
.text:00005830 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00005830                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00005830 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00005830                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+117p
.text:00005830                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+DAp ...
.text:00005830
.text:00005830 var_4           = dword ptr -4
.text:00005830
.text:00005830                 push    ebp
.text:00005831                 mov     ebp, esp
.text:00005833                 push    ecx
.text:00005834                 push    esi
.text:00005835                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000583C                 mov     [ebp+var_4], ecx
.text:0000583F                 mov     eax, [ebp+var_4]
.text:00005842                 cmp     dword ptr [eax], 0
.text:00005845                 jz      short loc_5862
.text:00005847                 mov     ecx, [ebp+var_4]
.text:0000584A                 mov     edx, [ecx]
.text:0000584C                 mov     eax, [ebp+var_4]
.text:0000584F                 mov     ecx, [eax]
.text:00005851                 mov     edx, [edx]
.text:00005853                 mov     esi, esp
.text:00005855                 push    ecx
.text:00005856                 mov     eax, [edx+8]
.text:00005859                 call    eax
.text:0000585B                 cmp     esi, esp
.text:0000585D                 call    __RTC_CheckEsp
.text:00005862
.text:00005862 loc_5862:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00005862                 pop     esi
.text:00005863                 add     esp, 4
.text:00005866                 cmp     ebp, esp
.text:00005868                 call    __RTC_CheckEsp
.text:0000586D                 mov     esp, ebp
.text:0000586F                 pop     ebp
.text:00005870                 retn
.text:00005870 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00005870
.text:00005870 ; ---------------------------------------------------------------------------
.text:00005871                 align 4
.text:00005871 _text           ends
.text:00005871
.text:00005874 ; ===========================================================================
.text:00005874
.text:00005874 ; Segment type: Pure code
.text:00005874 ; Segment permissions: Read/Execute
.text:00005874 _text           segment para public 'CODE' use32
.text:00005874                 assume cs:_text
.text:00005874                 ;org 5874h
.text:00005874 ; COMDAT (pick any)
.text:00005874                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005874
.text:00005874 ; =============== S U B R O U T I N E =======================================
.text:00005874
.text:00005874 ; Attributes: bp-based frame
.text:00005874
.text:00005874 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00005874                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00005874 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00005874                                         ; CODE XREF: CSequentialInStreamCalcSize::ReleaseStream(void)+14p
.text:00005874                                         ; NCoderMixer2::CCoderMT::Release(void)+60p
.text:00005874
.text:00005874 var_4           = dword ptr -4
.text:00005874
.text:00005874                 push    ebp
.text:00005875                 mov     ebp, esp
.text:00005877                 push    ecx
.text:00005878                 push    esi
.text:00005879                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005880                 mov     [ebp+var_4], ecx
.text:00005883                 mov     eax, [ebp+var_4]
.text:00005886                 cmp     dword ptr [eax], 0
.text:00005889                 jz      short loc_58AF
.text:0000588B                 mov     ecx, [ebp+var_4]
.text:0000588E                 mov     edx, [ecx]
.text:00005890                 mov     eax, [ebp+var_4]
.text:00005893                 mov     ecx, [eax]
.text:00005895                 mov     edx, [edx]
.text:00005897                 mov     esi, esp
.text:00005899                 push    ecx
.text:0000589A                 mov     eax, [edx+8]
.text:0000589D                 call    eax
.text:0000589F                 cmp     esi, esp
.text:000058A1                 call    __RTC_CheckEsp
.text:000058A6                 mov     ecx, [ebp+var_4]
.text:000058A9                 mov     dword ptr [ecx], 0
.text:000058AF
.text:000058AF loc_58AF:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:000058AF                 pop     esi
.text:000058B0                 add     esp, 4
.text:000058B3                 cmp     ebp, esp
.text:000058B5                 call    __RTC_CheckEsp
.text:000058BA                 mov     esp, ebp
.text:000058BC                 pop     ebp
.text:000058BD                 retn
.text:000058BD ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:000058BD
.text:000058BD ; ---------------------------------------------------------------------------
.text:000058BE                 align 10h
.text:000058BE _text           ends
.text:000058BE
.text:000058C0 ; ===========================================================================
.text:000058C0
.text:000058C0 ; Segment type: Pure code
.text:000058C0 ; Segment permissions: Read/Execute
.text:000058C0 _text           segment para public 'CODE' use32
.text:000058C0                 assume cs:_text
.text:000058C0                 ;org 58C0h
.text:000058C0 ; COMDAT (pick any)
.text:000058C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000058C0
.text:000058C0 ; =============== S U B R O U T I N E =======================================
.text:000058C0
.text:000058C0 ; Attributes: bp-based frame
.text:000058C0
.text:000058C0 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:000058C0                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:000058C0 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:000058C0                                         ; CODE XREF: CSequentialInStreamCalcSize::Read(void *,uint,uint *)+2Fp
.text:000058C0                                         ; NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+FCp ...
.text:000058C0
.text:000058C0 var_4           = dword ptr -4
.text:000058C0
.text:000058C0                 push    ebp
.text:000058C1                 mov     ebp, esp
.text:000058C3                 push    ecx
.text:000058C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058CB                 mov     [ebp+var_4], ecx
.text:000058CE                 mov     eax, [ebp+var_4]
.text:000058D1                 mov     eax, [eax]
.text:000058D3                 mov     esp, ebp
.text:000058D5                 pop     ebp
.text:000058D6                 retn
.text:000058D6 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000058D6
.text:000058D6 ; ---------------------------------------------------------------------------
.text:000058D7                 align 4
.text:000058D7 _text           ends
.text:000058D7
.text:000058D8 ; ===========================================================================
.text:000058D8
.text:000058D8 ; Segment type: Pure code
.text:000058D8 ; Segment permissions: Read/Execute
.text:000058D8 _text           segment para public 'CODE' use32
.text:000058D8                 assume cs:_text
.text:000058D8                 ;org 58D8h
.text:000058D8 ; COMDAT (pick any)
.text:000058D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000058D8
.text:000058D8 ; =============== S U B R O U T I N E =======================================
.text:000058D8
.text:000058D8 ; Attributes: bp-based frame
.text:000058D8
.text:000058D8 ; public: struct ISequentialInStream * * __thiscall CMyComPtr<struct ISequentialInStream>::operator&(void)
.text:000058D8                 public ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
.text:000058D8 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ proc near
.text:000058D8                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+D8p
.text:000058D8                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+A4p ...
.text:000058D8
.text:000058D8 var_4           = dword ptr -4
.text:000058D8
.text:000058D8                 push    ebp
.text:000058D9                 mov     ebp, esp
.text:000058DB                 push    ecx
.text:000058DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058E3                 mov     [ebp+var_4], ecx
.text:000058E6                 mov     eax, [ebp+var_4]
.text:000058E9                 mov     esp, ebp
.text:000058EB                 pop     ebp
.text:000058EC                 retn
.text:000058EC ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ endp
.text:000058EC
.text:000058EC ; ---------------------------------------------------------------------------
.text:000058ED                 align 10h
.text:000058ED _text           ends
.text:000058ED
.text:000058F0 ; ===========================================================================
.text:000058F0
.text:000058F0 ; Segment type: Pure code
.text:000058F0 ; Segment permissions: Read/Execute
.text:000058F0 _text           segment para public 'CODE' use32
.text:000058F0                 assume cs:_text
.text:000058F0                 ;org 58F0h
.text:000058F0 ; COMDAT (pick any)
.text:000058F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000058F0
.text:000058F0 ; =============== S U B R O U T I N E =======================================
.text:000058F0
.text:000058F0 ; Attributes: bp-based frame
.text:000058F0
.text:000058F0 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator->(void)const
.text:000058F0                 public ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:000058F0 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:000058F0                                         ; CODE XREF: CSequentialInStreamCalcSize::Read(void *,uint,uint *):loc_3Ep
.text:000058F0
.text:000058F0 var_4           = dword ptr -4
.text:000058F0
.text:000058F0                 push    ebp
.text:000058F1                 mov     ebp, esp
.text:000058F3                 push    ecx
.text:000058F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058FB                 mov     [ebp+var_4], ecx
.text:000058FE                 mov     eax, [ebp+var_4]
.text:00005901                 mov     eax, [eax]
.text:00005903                 mov     esp, ebp
.text:00005905                 pop     ebp
.text:00005906                 retn
.text:00005906 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00005906
.text:00005906 ; ---------------------------------------------------------------------------
.text:00005907                 align 4
.text:00005907 _text           ends
.text:00005907
.text:00005908 ; ===========================================================================
.text:00005908
.text:00005908 ; Segment type: Pure code
.text:00005908 ; Segment permissions: Read/Execute
.text:00005908 _text           segment para public 'CODE' use32
.text:00005908                 assume cs:_text
.text:00005908                 ;org 5908h
.text:00005908 ; COMDAT (pick any)
.text:00005908                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005908
.text:00005908 ; =============== S U B R O U T I N E =======================================
.text:00005908
.text:00005908 ; Attributes: bp-based frame
.text:00005908
.text:00005908 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00005908                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00005908 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00005908                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+94p
.text:00005908                                         ; NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+22Ep ...
.text:00005908
.text:00005908 var_4           = dword ptr -4
.text:00005908 arg_0           = dword ptr  8
.text:00005908
.text:00005908                 push    ebp
.text:00005909                 mov     ebp, esp
.text:0000590B                 push    ecx
.text:0000590C                 push    esi
.text:0000590D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005914                 mov     [ebp+var_4], ecx
.text:00005917                 cmp     [ebp+arg_0], 0
.text:0000591B                 jz      short loc_5934
.text:0000591D                 mov     eax, [ebp+arg_0]
.text:00005920                 mov     ecx, [eax]
.text:00005922                 mov     esi, esp
.text:00005924                 mov     edx, [ebp+arg_0]
.text:00005927                 push    edx
.text:00005928                 mov     eax, [ecx+4]
.text:0000592B                 call    eax
.text:0000592D                 cmp     esi, esp
.text:0000592F                 call    __RTC_CheckEsp
.text:00005934
.text:00005934 loc_5934:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00005934                 mov     ecx, [ebp+var_4]
.text:00005937                 cmp     dword ptr [ecx], 0
.text:0000593A                 jz      short loc_5957
.text:0000593C                 mov     edx, [ebp+var_4]
.text:0000593F                 mov     eax, [edx]
.text:00005941                 mov     ecx, [ebp+var_4]
.text:00005944                 mov     edx, [ecx]
.text:00005946                 mov     eax, [eax]
.text:00005948                 mov     esi, esp
.text:0000594A                 push    edx
.text:0000594B                 mov     ecx, [eax+8]
.text:0000594E                 call    ecx
.text:00005950                 cmp     esi, esp
.text:00005952                 call    __RTC_CheckEsp
.text:00005957
.text:00005957 loc_5957:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00005957                 mov     edx, [ebp+var_4]
.text:0000595A                 mov     eax, [ebp+arg_0]
.text:0000595D                 mov     [edx], eax
.text:0000595F                 mov     eax, [ebp+arg_0]
.text:00005962                 pop     esi
.text:00005963                 add     esp, 4
.text:00005966                 cmp     ebp, esp
.text:00005968                 call    __RTC_CheckEsp
.text:0000596D                 mov     esp, ebp
.text:0000596F                 pop     ebp
.text:00005970                 retn    4
.text:00005970 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00005970
.text:00005970 ; ---------------------------------------------------------------------------
.text:00005973                 align 4
.text:00005973 _text           ends
.text:00005973
.text:00005974 ; ===========================================================================
.text:00005974
.text:00005974 ; Segment type: Pure code
.text:00005974 ; Segment permissions: Read/Execute
.text:00005974 _text           segment para public 'CODE' use32
.text:00005974                 assume cs:_text
.text:00005974                 ;org 5974h
.text:00005974 ; COMDAT (pick any)
.text:00005974                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005974
.text:00005974 ; =============== S U B R O U T I N E =======================================
.text:00005974
.text:00005974 ; Attributes: bp-based frame
.text:00005974
.text:00005974 ; public: bool __thiscall CMyComPtr<struct ISequentialInStream>::operator!(void)const
.text:00005974                 public ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
.text:00005974 ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ proc near
.text:00005974                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+BAp
.text:00005974
.text:00005974 var_4           = dword ptr -4
.text:00005974
.text:00005974                 push    ebp
.text:00005975                 mov     ebp, esp
.text:00005977                 push    ecx
.text:00005978                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000597F                 mov     [ebp+var_4], ecx
.text:00005982                 mov     eax, [ebp+var_4]
.text:00005985                 xor     ecx, ecx
.text:00005987                 cmp     dword ptr [eax], 0
.text:0000598A                 setz    cl
.text:0000598D                 mov     al, cl
.text:0000598F                 mov     esp, ebp
.text:00005991                 pop     ebp
.text:00005992                 retn
.text:00005992 ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ endp
.text:00005992
.text:00005992 ; ---------------------------------------------------------------------------
.text:00005993                 align 4
.text:00005993 _text           ends
.text:00005993
.text:00005994 ; ===========================================================================
.text:00005994
.text:00005994 ; Segment type: Pure code
.text:00005994 ; Segment permissions: Read/Execute
.text:00005994 _text           segment para public 'CODE' use32
.text:00005994                 assume cs:_text
.text:00005994                 ;org 5994h
.text:00005994 ; COMDAT (pick any)
.text:00005994                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005994
.text:00005994 ; =============== S U B R O U T I N E =======================================
.text:00005994
.text:00005994 ; Attributes: bp-based frame
.text:00005994
.text:00005994 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::Detach(void)
.text:00005994                 public ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ
.text:00005994 ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ proc near
.text:00005994                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+435p
.text:00005994                                         ; NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+9Cp ...
.text:00005994
.text:00005994 var_8           = dword ptr -8
.text:00005994 var_4           = dword ptr -4
.text:00005994
.text:00005994                 push    ebp
.text:00005995                 mov     ebp, esp
.text:00005997                 sub     esp, 8
.text:0000599A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000059A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059A8                 mov     [ebp+var_4], ecx
.text:000059AB                 mov     eax, [ebp+var_4]
.text:000059AE                 mov     ecx, [eax]
.text:000059B0                 mov     [ebp+var_8], ecx
.text:000059B3                 mov     edx, [ebp+var_4]
.text:000059B6                 mov     dword ptr [edx], 0
.text:000059BC                 mov     eax, [ebp+var_8]
.text:000059BF                 mov     esp, ebp
.text:000059C1                 pop     ebp
.text:000059C2                 retn
.text:000059C2 ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ endp
.text:000059C2
.text:000059C2 ; ---------------------------------------------------------------------------
.text:000059C3                 align 4
.text:000059C3 _text           ends
.text:000059C3
.text:000059C4 ; ===========================================================================
.text:000059C4
.text:000059C4 ; Segment type: Pure code
.text:000059C4 ; Segment permissions: Read/Execute
.text:000059C4 _text           segment para public 'CODE' use32
.text:000059C4                 assume cs:_text
.text:000059C4                 ;org 59C4h
.text:000059C4 ; COMDAT (pick any)
.text:000059C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000059C4
.text:000059C4 ; =============== S U B R O U T I N E =======================================
.text:000059C4
.text:000059C4 ; Attributes: bp-based frame
.text:000059C4
.text:000059C4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:000059C4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000059C4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000059C4                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+11Fp
.text:000059C4                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+44p ...
.text:000059C4
.text:000059C4 var_4           = dword ptr -4
.text:000059C4
.text:000059C4                 push    ebp
.text:000059C5                 mov     ebp, esp
.text:000059C7                 push    ecx
.text:000059C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059CF                 mov     [ebp+var_4], ecx
.text:000059D2                 mov     eax, [ebp+var_4]
.text:000059D5                 mov     dword ptr [eax], 0
.text:000059DB                 mov     eax, [ebp+var_4]
.text:000059DE                 mov     esp, ebp
.text:000059E0                 pop     ebp
.text:000059E1                 retn
.text:000059E1 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000059E1
.text:000059E1 ; ---------------------------------------------------------------------------
.text:000059E2                 align 4
.text:000059E2 _text           ends
.text:000059E2
.text:000059E4 ; ===========================================================================
.text:000059E4
.text:000059E4 ; Segment type: Pure code
.text:000059E4 ; Segment permissions: Read/Execute
.text:000059E4 _text           segment para public 'CODE' use32
.text:000059E4                 assume cs:_text
.text:000059E4                 ;org 59E4h
.text:000059E4 ; COMDAT (pick any)
.text:000059E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000059E4
.text:000059E4 ; =============== S U B R O U T I N E =======================================
.text:000059E4
.text:000059E4 ; Attributes: bp-based frame
.text:000059E4
.text:000059E4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000059E4                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000059E4 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000059E4                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+16Dp
.text:000059E4                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+BEp ...
.text:000059E4
.text:000059E4 var_4           = dword ptr -4
.text:000059E4
.text:000059E4                 push    ebp
.text:000059E5                 mov     ebp, esp
.text:000059E7                 push    ecx
.text:000059E8                 push    esi
.text:000059E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059F0                 mov     [ebp+var_4], ecx
.text:000059F3                 mov     eax, [ebp+var_4]
.text:000059F6                 cmp     dword ptr [eax], 0
.text:000059F9                 jz      short loc_5A16
.text:000059FB                 mov     ecx, [ebp+var_4]
.text:000059FE                 mov     edx, [ecx]
.text:00005A00                 mov     eax, [ebp+var_4]
.text:00005A03                 mov     ecx, [eax]
.text:00005A05                 mov     edx, [edx]
.text:00005A07                 mov     esi, esp
.text:00005A09                 push    ecx
.text:00005A0A                 mov     eax, [edx+8]
.text:00005A0D                 call    eax
.text:00005A0F                 cmp     esi, esp
.text:00005A11                 call    __RTC_CheckEsp
.text:00005A16
.text:00005A16 loc_5A16:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00005A16                 pop     esi
.text:00005A17                 add     esp, 4
.text:00005A1A                 cmp     ebp, esp
.text:00005A1C                 call    __RTC_CheckEsp
.text:00005A21                 mov     esp, ebp
.text:00005A23                 pop     ebp
.text:00005A24                 retn
.text:00005A24 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00005A24
.text:00005A24 ; ---------------------------------------------------------------------------
.text:00005A25                 align 4
.text:00005A25 _text           ends
.text:00005A25
.text:00005A28 ; ===========================================================================
.text:00005A28
.text:00005A28 ; Segment type: Pure code
.text:00005A28 ; Segment permissions: Read/Execute
.text:00005A28 _text           segment para public 'CODE' use32
.text:00005A28                 assume cs:_text
.text:00005A28                 ;org 5A28h
.text:00005A28 ; COMDAT (pick any)
.text:00005A28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A28
.text:00005A28 ; =============== S U B R O U T I N E =======================================
.text:00005A28
.text:00005A28 ; Attributes: bp-based frame
.text:00005A28
.text:00005A28 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:00005A28                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:00005A28 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:00005A28                                         ; CODE XREF: COutStreamCalcSize::ReleaseStream(void)+14p
.text:00005A28                                         ; NCoderMixer2::CCoderMT::Release(void)+9Ap
.text:00005A28
.text:00005A28 var_4           = dword ptr -4
.text:00005A28
.text:00005A28                 push    ebp
.text:00005A29                 mov     ebp, esp
.text:00005A2B                 push    ecx
.text:00005A2C                 push    esi
.text:00005A2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A34                 mov     [ebp+var_4], ecx
.text:00005A37                 mov     eax, [ebp+var_4]
.text:00005A3A                 cmp     dword ptr [eax], 0
.text:00005A3D                 jz      short loc_5A63
.text:00005A3F                 mov     ecx, [ebp+var_4]
.text:00005A42                 mov     edx, [ecx]
.text:00005A44                 mov     eax, [ebp+var_4]
.text:00005A47                 mov     ecx, [eax]
.text:00005A49                 mov     edx, [edx]
.text:00005A4B                 mov     esi, esp
.text:00005A4D                 push    ecx
.text:00005A4E                 mov     eax, [edx+8]
.text:00005A51                 call    eax
.text:00005A53                 cmp     esi, esp
.text:00005A55                 call    __RTC_CheckEsp
.text:00005A5A                 mov     ecx, [ebp+var_4]
.text:00005A5D                 mov     dword ptr [ecx], 0
.text:00005A63
.text:00005A63 loc_5A63:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:00005A63                 pop     esi
.text:00005A64                 add     esp, 4
.text:00005A67                 cmp     ebp, esp
.text:00005A69                 call    __RTC_CheckEsp
.text:00005A6E                 mov     esp, ebp
.text:00005A70                 pop     ebp
.text:00005A71                 retn
.text:00005A71 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00005A71
.text:00005A71 ; ---------------------------------------------------------------------------
.text:00005A72                 align 4
.text:00005A72 _text           ends
.text:00005A72
.text:00005A74 ; ===========================================================================
.text:00005A74
.text:00005A74 ; Segment type: Pure code
.text:00005A74 ; Segment permissions: Read/Execute
.text:00005A74 _text           segment para public 'CODE' use32
.text:00005A74                 assume cs:_text
.text:00005A74                 ;org 5A74h
.text:00005A74 ; COMDAT (pick any)
.text:00005A74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A74
.text:00005A74 ; =============== S U B R O U T I N E =======================================
.text:00005A74
.text:00005A74 ; Attributes: bp-based frame
.text:00005A74
.text:00005A74 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00005A74                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00005A74 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00005A74                                         ; CODE XREF: COutStreamCalcSize::Write(void const *,uint,uint *)+22p
.text:00005A74                                         ; COutStreamCalcSize::OutStreamFinish(void)+28p ...
.text:00005A74
.text:00005A74 var_4           = dword ptr -4
.text:00005A74
.text:00005A74                 push    ebp
.text:00005A75                 mov     ebp, esp
.text:00005A77                 push    ecx
.text:00005A78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A7F                 mov     [ebp+var_4], ecx
.text:00005A82                 mov     eax, [ebp+var_4]
.text:00005A85                 mov     eax, [eax]
.text:00005A87                 mov     esp, ebp
.text:00005A89                 pop     ebp
.text:00005A8A                 retn
.text:00005A8A ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00005A8A
.text:00005A8A ; ---------------------------------------------------------------------------
.text:00005A8B                 align 4
.text:00005A8B _text           ends
.text:00005A8B
.text:00005A8C ; ===========================================================================
.text:00005A8C
.text:00005A8C ; Segment type: Pure code
.text:00005A8C ; Segment permissions: Read/Execute
.text:00005A8C _text           segment para public 'CODE' use32
.text:00005A8C                 assume cs:_text
.text:00005A8C                 ;org 5A8Ch
.text:00005A8C ; COMDAT (pick any)
.text:00005A8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A8C
.text:00005A8C ; =============== S U B R O U T I N E =======================================
.text:00005A8C
.text:00005A8C ; Attributes: bp-based frame
.text:00005A8C
.text:00005A8C ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:00005A8C                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:00005A8C ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:00005A8C                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+12Ep
.text:00005A8C                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+168p ...
.text:00005A8C
.text:00005A8C var_4           = dword ptr -4
.text:00005A8C
.text:00005A8C                 push    ebp
.text:00005A8D                 mov     ebp, esp
.text:00005A8F                 push    ecx
.text:00005A90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A97                 mov     [ebp+var_4], ecx
.text:00005A9A                 mov     eax, [ebp+var_4]
.text:00005A9D                 mov     esp, ebp
.text:00005A9F                 pop     ebp
.text:00005AA0                 retn
.text:00005AA0 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:00005AA0
.text:00005AA0 ; ---------------------------------------------------------------------------
.text:00005AA1                 align 4
.text:00005AA1 _text           ends
.text:00005AA1
.text:00005AA4 ; ===========================================================================
.text:00005AA4
.text:00005AA4 ; Segment type: Pure code
.text:00005AA4 ; Segment permissions: Read/Execute
.text:00005AA4 _text           segment para public 'CODE' use32
.text:00005AA4                 assume cs:_text
.text:00005AA4                 ;org 5AA4h
.text:00005AA4 ; COMDAT (pick any)
.text:00005AA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005AA4
.text:00005AA4 ; =============== S U B R O U T I N E =======================================
.text:00005AA4
.text:00005AA4 ; Attributes: bp-based frame
.text:00005AA4
.text:00005AA4 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator->(void)const
.text:00005AA4                 public ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00005AA4 ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00005AA4                                         ; CODE XREF: COutStreamCalcSize::Write(void const *,uint,uint *)+31p
.text:00005AA4
.text:00005AA4 var_4           = dword ptr -4
.text:00005AA4
.text:00005AA4                 push    ebp
.text:00005AA5                 mov     ebp, esp
.text:00005AA7                 push    ecx
.text:00005AA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AAF                 mov     [ebp+var_4], ecx
.text:00005AB2                 mov     eax, [ebp+var_4]
.text:00005AB5                 mov     eax, [eax]
.text:00005AB7                 mov     esp, ebp
.text:00005AB9                 pop     ebp
.text:00005ABA                 retn
.text:00005ABA ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00005ABA
.text:00005ABA ; ---------------------------------------------------------------------------
.text:00005ABB                 align 4
.text:00005ABB _text           ends
.text:00005ABB
.text:00005ABC ; ===========================================================================
.text:00005ABC
.text:00005ABC ; Segment type: Pure code
.text:00005ABC ; Segment permissions: Read/Execute
.text:00005ABC _text           segment para public 'CODE' use32
.text:00005ABC                 assume cs:_text
.text:00005ABC                 ;org 5ABCh
.text:00005ABC ; COMDAT (pick any)
.text:00005ABC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005ABC
.text:00005ABC ; =============== S U B R O U T I N E =======================================
.text:00005ABC
.text:00005ABC ; Attributes: bp-based frame
.text:00005ABC
.text:00005ABC ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:00005ABC                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:00005ABC ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:00005ABC                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+9Bp
.text:00005ABC                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+478p ...
.text:00005ABC
.text:00005ABC var_4           = dword ptr -4
.text:00005ABC arg_0           = dword ptr  8
.text:00005ABC
.text:00005ABC                 push    ebp
.text:00005ABD                 mov     ebp, esp
.text:00005ABF                 push    ecx
.text:00005AC0                 push    esi
.text:00005AC1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AC8                 mov     [ebp+var_4], ecx
.text:00005ACB                 cmp     [ebp+arg_0], 0
.text:00005ACF                 jz      short loc_5AE8
.text:00005AD1                 mov     eax, [ebp+arg_0]
.text:00005AD4                 mov     ecx, [eax]
.text:00005AD6                 mov     esi, esp
.text:00005AD8                 mov     edx, [ebp+arg_0]
.text:00005ADB                 push    edx
.text:00005ADC                 mov     eax, [ecx+4]
.text:00005ADF                 call    eax
.text:00005AE1                 cmp     esi, esp
.text:00005AE3                 call    __RTC_CheckEsp
.text:00005AE8
.text:00005AE8 loc_5AE8:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:00005AE8                 mov     ecx, [ebp+var_4]
.text:00005AEB                 cmp     dword ptr [ecx], 0
.text:00005AEE                 jz      short loc_5B0B
.text:00005AF0                 mov     edx, [ebp+var_4]
.text:00005AF3                 mov     eax, [edx]
.text:00005AF5                 mov     ecx, [ebp+var_4]
.text:00005AF8                 mov     edx, [ecx]
.text:00005AFA                 mov     eax, [eax]
.text:00005AFC                 mov     esi, esp
.text:00005AFE                 push    edx
.text:00005AFF                 mov     ecx, [eax+8]
.text:00005B02                 call    ecx
.text:00005B04                 cmp     esi, esp
.text:00005B06                 call    __RTC_CheckEsp
.text:00005B0B
.text:00005B0B loc_5B0B:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:00005B0B                 mov     edx, [ebp+var_4]
.text:00005B0E                 mov     eax, [ebp+arg_0]
.text:00005B11                 mov     [edx], eax
.text:00005B13                 mov     eax, [ebp+arg_0]
.text:00005B16                 pop     esi
.text:00005B17                 add     esp, 4
.text:00005B1A                 cmp     ebp, esp
.text:00005B1C                 call    __RTC_CheckEsp
.text:00005B21                 mov     esp, ebp
.text:00005B23                 pop     ebp
.text:00005B24                 retn    4
.text:00005B24 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00005B24
.text:00005B24 ; ---------------------------------------------------------------------------
.text:00005B27                 align 4
.text:00005B27 _text           ends
.text:00005B27
.text:00005B28 ; ===========================================================================
.text:00005B28
.text:00005B28 ; Segment type: Pure code
.text:00005B28 ; Segment permissions: Read/Execute
.text:00005B28 _text           segment para public 'CODE' use32
.text:00005B28                 assume cs:_text
.text:00005B28                 ;org 5B28h
.text:00005B28 ; COMDAT (pick any)
.text:00005B28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B28
.text:00005B28 ; =============== S U B R O U T I N E =======================================
.text:00005B28
.text:00005B28 ; Attributes: bp-based frame
.text:00005B28
.text:00005B28 ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:00005B28                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:00005B28 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:00005B28                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+17Ep
.text:00005B28
.text:00005B28 var_4           = dword ptr -4
.text:00005B28
.text:00005B28                 push    ebp
.text:00005B29                 mov     ebp, esp
.text:00005B2B                 push    ecx
.text:00005B2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B33                 mov     [ebp+var_4], ecx
.text:00005B36                 mov     eax, [ebp+var_4]
.text:00005B39                 xor     ecx, ecx
.text:00005B3B                 cmp     dword ptr [eax], 0
.text:00005B3E                 setz    cl
.text:00005B41                 mov     al, cl
.text:00005B43                 mov     esp, ebp
.text:00005B45                 pop     ebp
.text:00005B46                 retn
.text:00005B46 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:00005B46
.text:00005B46 ; ---------------------------------------------------------------------------
.text:00005B47                 align 4
.text:00005B47 _text           ends
.text:00005B47
.text:00005B48 ; ===========================================================================
.text:00005B48
.text:00005B48 ; Segment type: Pure code
.text:00005B48 ; Segment permissions: Read/Execute
.text:00005B48 _text           segment para public 'CODE' use32
.text:00005B48                 assume cs:_text
.text:00005B48                 ;org 5B48h
.text:00005B48 ; COMDAT (pick any)
.text:00005B48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B48
.text:00005B48 ; =============== S U B R O U T I N E =======================================
.text:00005B48
.text:00005B48 ; Attributes: bp-based frame
.text:00005B48
.text:00005B48 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::Detach(void)
.text:00005B48                 public ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ
.text:00005B48 ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ proc near
.text:00005B48                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+A3p
.text:00005B48                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+480p
.text:00005B48
.text:00005B48 var_8           = dword ptr -8
.text:00005B48 var_4           = dword ptr -4
.text:00005B48
.text:00005B48                 push    ebp
.text:00005B49                 mov     ebp, esp
.text:00005B4B                 sub     esp, 8
.text:00005B4E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005B55                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B5C                 mov     [ebp+var_4], ecx
.text:00005B5F                 mov     eax, [ebp+var_4]
.text:00005B62                 mov     ecx, [eax]
.text:00005B64                 mov     [ebp+var_8], ecx
.text:00005B67                 mov     edx, [ebp+var_4]
.text:00005B6A                 mov     dword ptr [edx], 0
.text:00005B70                 mov     eax, [ebp+var_8]
.text:00005B73                 mov     esp, ebp
.text:00005B75                 pop     ebp
.text:00005B76                 retn
.text:00005B76 ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ endp
.text:00005B76
.text:00005B76 ; ---------------------------------------------------------------------------
.text:00005B77                 align 4
.text:00005B77 _text           ends
.text:00005B77
.text:00005B78 ; ===========================================================================
.text:00005B78
.text:00005B78 ; Segment type: Pure code
.text:00005B78 ; Segment permissions: Read/Execute
.text:00005B78 _text           segment para public 'CODE' use32
.text:00005B78                 assume cs:_text
.text:00005B78                 ;org 5B78h
.text:00005B78 ; COMDAT (pick any)
.text:00005B78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B78
.text:00005B78 ; =============== S U B R O U T I N E =======================================
.text:00005B78
.text:00005B78 ; Attributes: bp-based frame
.text:00005B78
.text:00005B78 ; public: __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>(void)
.text:00005B78                 public ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
.text:00005B78 ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ proc near
.text:00005B78                                         ; CODE XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+30p
.text:00005B78
.text:00005B78 var_4           = dword ptr -4
.text:00005B78
.text:00005B78                 push    ebp
.text:00005B79                 mov     ebp, esp
.text:00005B7B                 push    ecx
.text:00005B7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B83                 mov     [ebp+var_4], ecx
.text:00005B86                 mov     eax, [ebp+var_4]
.text:00005B89                 mov     dword ptr [eax], 0
.text:00005B8F                 mov     ecx, [ebp+var_4]
.text:00005B92                 mov     dword ptr [ecx+4], 0
.text:00005B99                 mov     edx, [ebp+var_4]
.text:00005B9C                 mov     dword ptr [edx+8], 0
.text:00005BA3                 mov     eax, [ebp+var_4]
.text:00005BA6                 mov     esp, ebp
.text:00005BA8                 pop     ebp
.text:00005BA9                 retn
.text:00005BA9 ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ endp
.text:00005BA9
.text:00005BA9 ; ---------------------------------------------------------------------------
.text:00005BAA                 align 4
.text:00005BAA _text           ends
.text:00005BAA
.text:00005BAC ; ===========================================================================
.text:00005BAC
.text:00005BAC ; Segment type: Pure code
.text:00005BAC ; Segment permissions: Read/Execute
.text:00005BAC _text           segment para public 'CODE' use32
.text:00005BAC                 assume cs:_text
.text:00005BAC                 ;org 5BACh
.text:00005BAC ; COMDAT (pick any)
.text:00005BAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005BAC
.text:00005BAC ; =============== S U B R O U T I N E =======================================
.text:00005BAC
.text:00005BAC ; Attributes: bp-based frame
.text:00005BAC
.text:00005BAC ; public: unsigned int __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::Size(void)const
.text:00005BAC                 public ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ
.text:00005BAC ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ proc near
.text:00005BAC                                         ; CODE XREF: NCoderMixer2::CBondsChecks::Check(void)+1Dp
.text:00005BAC                                         ; NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+4Dp ...
.text:00005BAC
.text:00005BAC var_4           = dword ptr -4
.text:00005BAC
.text:00005BAC                 push    ebp
.text:00005BAD                 mov     ebp, esp
.text:00005BAF                 push    ecx
.text:00005BB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BB7                 mov     [ebp+var_4], ecx
.text:00005BBA                 mov     eax, [ebp+var_4]
.text:00005BBD                 mov     eax, [eax+4]
.text:00005BC0                 mov     esp, ebp
.text:00005BC2                 pop     ebp
.text:00005BC3                 retn
.text:00005BC3 ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ endp
.text:00005BC3
.text:00005BC3 _text           ends
.text:00005BC3
.text:00005BC4 ; ===========================================================================
.text:00005BC4
.text:00005BC4 ; Segment type: Pure code
.text:00005BC4 ; Segment permissions: Read/Execute
.text:00005BC4 _text           segment para public 'CODE' use32
.text:00005BC4                 assume cs:_text
.text:00005BC4                 ;org 5BC4h
.text:00005BC4 ; COMDAT (pick any)
.text:00005BC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005BC4
.text:00005BC4 ; =============== S U B R O U T I N E =======================================
.text:00005BC4
.text:00005BC4 ; Attributes: bp-based frame
.text:00005BC4
.text:00005BC4 ; public: __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>(void)
.text:00005BC4                 public ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
.text:00005BC4 ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ proc near
.text:00005BC4                                         ; CODE XREF: __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0+3j
.text:00005BC4                                         ; NCoderMixer2::CBindInfo::~CBindInfo(void)+76p ...
.text:00005BC4
.text:00005BC4 var_8           = dword ptr -8
.text:00005BC4 var_4           = dword ptr -4
.text:00005BC4
.text:00005BC4                 push    ebp
.text:00005BC5                 mov     ebp, esp
.text:00005BC7                 sub     esp, 8
.text:00005BCA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005BD1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BD8                 mov     [ebp+var_4], ecx
.text:00005BDB                 mov     eax, [ebp+var_4]
.text:00005BDE                 mov     ecx, [eax]
.text:00005BE0                 mov     [ebp+var_8], ecx
.text:00005BE3                 mov     edx, [ebp+var_8]
.text:00005BE6                 push    edx             ; void *
.text:00005BE7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005BEC                 add     esp, 4
.text:00005BEF                 add     esp, 8
.text:00005BF2                 cmp     ebp, esp
.text:00005BF4                 call    __RTC_CheckEsp
.text:00005BF9                 mov     esp, ebp
.text:00005BFB                 pop     ebp
.text:00005BFC                 retn
.text:00005BFC ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ endp
.text:00005BFC
.text:00005BFC ; ---------------------------------------------------------------------------
.text:00005BFD                 align 10h
.text:00005BFD _text           ends
.text:00005BFD
.text:00005C00 ; ===========================================================================
.text:00005C00
.text:00005C00 ; Segment type: Pure code
.text:00005C00 ; Segment permissions: Read/Execute
.text:00005C00 _text           segment para public 'CODE' use32
.text:00005C00                 assume cs:_text
.text:00005C00                 ;org 5C00h
.text:00005C00 ; COMDAT (pick any)
.text:00005C00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C00
.text:00005C00 ; =============== S U B R O U T I N E =======================================
.text:00005C00
.text:00005C00 ; Attributes: bp-based frame
.text:00005C00
.text:00005C00 ; public: class CRecordVector<struct NCoderMixer2::CCoderStreamsInfo> & __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::operator=(class CRecordVector<struct NCoderMixer2::CCoderStreamsInfo> const &)
.text:00005C00                 public ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
.text:00005C00 ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z proc near
.text:00005C00                                         ; CODE XREF: NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+15p
.text:00005C00
.text:00005C00 var_10          = dword ptr -10h
.text:00005C00 var_C           = dword ptr -0Ch
.text:00005C00 var_8           = dword ptr -8
.text:00005C00 var_4           = dword ptr -4
.text:00005C00 arg_0           = dword ptr  8
.text:00005C00
.text:00005C00                 push    ebp
.text:00005C01                 mov     ebp, esp
.text:00005C03                 sub     esp, 10h
.text:00005C06                 mov     eax, 0CCCCCCCCh
.text:00005C0B                 mov     [ebp+var_10], eax
.text:00005C0E                 mov     [ebp+var_C], eax
.text:00005C11                 mov     [ebp+var_8], eax
.text:00005C14                 mov     [ebp+var_4], eax
.text:00005C17                 mov     [ebp+var_4], ecx
.text:00005C1A                 mov     eax, [ebp+arg_0]
.text:00005C1D                 cmp     eax, [ebp+var_4]
.text:00005C20                 jnz     short loc_5C2A
.text:00005C22                 mov     eax, [ebp+var_4]
.text:00005C25                 jmp     loc_5CCE
.text:00005C2A ; ---------------------------------------------------------------------------
.text:00005C2A
.text:00005C2A loc_5C2A:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+20j
.text:00005C2A                 mov     ecx, [ebp+arg_0]
.text:00005C2D                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00005C32                 mov     [ebp+var_8], eax
.text:00005C35                 mov     ecx, [ebp+var_4]
.text:00005C38                 mov     edx, [ebp+var_8]
.text:00005C3B                 cmp     edx, [ecx+8]
.text:00005C3E                 jbe     short loc_5CA1
.text:00005C40                 mov     eax, [ebp+var_4]
.text:00005C43                 mov     ecx, [eax]
.text:00005C45                 mov     [ebp+var_C], ecx
.text:00005C48                 mov     edx, [ebp+var_C]
.text:00005C4B                 push    edx             ; void *
.text:00005C4C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005C51                 add     esp, 4
.text:00005C54                 mov     eax, [ebp+var_4]
.text:00005C57                 mov     dword ptr [eax+8], 0
.text:00005C5E                 mov     ecx, [ebp+var_4]
.text:00005C61                 mov     dword ptr [ecx+4], 0
.text:00005C68                 mov     edx, [ebp+var_4]
.text:00005C6B                 mov     dword ptr [edx], 0
.text:00005C71                 xor     ecx, ecx
.text:00005C73                 mov     eax, [ebp+var_8]
.text:00005C76                 mov     edx, 4
.text:00005C7B                 mul     edx
.text:00005C7D                 seto    cl
.text:00005C80                 neg     ecx
.text:00005C82                 or      ecx, eax
.text:00005C84                 push    ecx             ; unsigned int
.text:00005C85                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005C8A                 add     esp, 4
.text:00005C8D                 mov     [ebp+var_10], eax
.text:00005C90                 mov     eax, [ebp+var_4]
.text:00005C93                 mov     ecx, [ebp+var_10]
.text:00005C96                 mov     [eax], ecx
.text:00005C98                 mov     edx, [ebp+var_4]
.text:00005C9B                 mov     eax, [ebp+var_8]
.text:00005C9E                 mov     [edx+8], eax
.text:00005CA1
.text:00005CA1 loc_5CA1:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+3Ej
.text:00005CA1                 mov     ecx, [ebp+var_4]
.text:00005CA4                 mov     edx, [ebp+var_8]
.text:00005CA7                 mov     [ecx+4], edx
.text:00005CAA                 cmp     [ebp+var_8], 0
.text:00005CAE                 jz      short loc_5CCB
.text:00005CB0                 mov     eax, [ebp+var_8]
.text:00005CB3                 shl     eax, 2
.text:00005CB6                 push    eax             ; Size
.text:00005CB7                 mov     ecx, [ebp+arg_0]
.text:00005CBA                 mov     edx, [ecx]
.text:00005CBC                 push    edx             ; Src
.text:00005CBD                 mov     eax, [ebp+var_4]
.text:00005CC0                 mov     ecx, [eax]
.text:00005CC2                 push    ecx             ; Dst
.text:00005CC3                 call    _memcpy
.text:00005CC8                 add     esp, 0Ch
.text:00005CCB
.text:00005CCB loc_5CCB:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+AEj
.text:00005CCB                 mov     eax, [ebp+var_4]
.text:00005CCE
.text:00005CCE loc_5CCE:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+25j
.text:00005CCE                 add     esp, 10h
.text:00005CD1                 cmp     ebp, esp
.text:00005CD3                 call    __RTC_CheckEsp
.text:00005CD8                 mov     esp, ebp
.text:00005CDA                 pop     ebp
.text:00005CDB                 retn    4
.text:00005CDB ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z endp
.text:00005CDB
.text:00005CDB ; ---------------------------------------------------------------------------
.text:00005CDE                 align 10h
.text:00005CDE _text           ends
.text:00005CDE
.text:00005CE0 ; ===========================================================================
.text:00005CE0
.text:00005CE0 ; Segment type: Pure code
.text:00005CE0 ; Segment permissions: Read/Execute
.text:00005CE0 _text           segment para public 'CODE' use32
.text:00005CE0                 assume cs:_text
.text:00005CE0                 ;org 5CE0h
.text:00005CE0 ; COMDAT (pick any)
.text:00005CE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005CE0
.text:00005CE0 ; =============== S U B R O U T I N E =======================================
.text:00005CE0
.text:00005CE0 ; Attributes: bp-based frame
.text:00005CE0
.text:00005CE0 ; public: struct NCoderMixer2::CCoderStreamsInfo const & __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::operator[](unsigned int)const
.text:00005CE0                 public ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z
.text:00005CE0 ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z proc near
.text:00005CE0                                         ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+2Ap
.text:00005CE0
.text:00005CE0 var_4           = dword ptr -4
.text:00005CE0 arg_0           = dword ptr  8
.text:00005CE0
.text:00005CE0                 push    ebp
.text:00005CE1                 mov     ebp, esp
.text:00005CE3                 push    ecx
.text:00005CE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CEB                 mov     [ebp+var_4], ecx
.text:00005CEE                 mov     eax, [ebp+var_4]
.text:00005CF1                 mov     ecx, [eax]
.text:00005CF3                 mov     edx, [ebp+arg_0]
.text:00005CF6                 lea     eax, [ecx+edx*4]
.text:00005CF9                 mov     esp, ebp
.text:00005CFB                 pop     ebp
.text:00005CFC                 retn    4
.text:00005CFC ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z endp
.text:00005CFC
.text:00005CFC ; ---------------------------------------------------------------------------
.text:00005CFF                 align 10h
.text:00005CFF _text           ends
.text:00005CFF
.text:00005D00 ; ===========================================================================
.text:00005D00
.text:00005D00 ; Segment type: Pure code
.text:00005D00 ; Segment permissions: Read/Execute
.text:00005D00 _text           segment para public 'CODE' use32
.text:00005D00                 assume cs:_text
.text:00005D00                 ;org 5D00h
.text:00005D00 ; COMDAT (pick any)
.text:00005D00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D00
.text:00005D00 ; =============== S U B R O U T I N E =======================================
.text:00005D00
.text:00005D00 ; Attributes: bp-based frame
.text:00005D00
.text:00005D00 ; public: struct NCoderMixer2::CCoderStreamsInfo & __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::operator[](unsigned int)
.text:00005D00                 public ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z
.text:00005D00 ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z proc near
.text:00005D00                                         ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+B5p
.text:00005D00                                         ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)+38p ...
.text:00005D00
.text:00005D00 var_4           = dword ptr -4
.text:00005D00 arg_0           = dword ptr  8
.text:00005D00
.text:00005D00                 push    ebp
.text:00005D01                 mov     ebp, esp
.text:00005D03                 push    ecx
.text:00005D04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D0B                 mov     [ebp+var_4], ecx
.text:00005D0E                 mov     eax, [ebp+var_4]
.text:00005D11                 mov     ecx, [eax]
.text:00005D13                 mov     edx, [ebp+arg_0]
.text:00005D16                 lea     eax, [ecx+edx*4]
.text:00005D19                 mov     esp, ebp
.text:00005D1B                 pop     ebp
.text:00005D1C                 retn    4
.text:00005D1C ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z endp
.text:00005D1C
.text:00005D1C ; ---------------------------------------------------------------------------
.text:00005D1F                 align 10h
.text:00005D1F _text           ends
.text:00005D1F
.text:00005D20 ; ===========================================================================
.text:00005D20
.text:00005D20 ; Segment type: Pure code
.text:00005D20 ; Segment permissions: Read/Execute
.text:00005D20 _text           segment para public 'CODE' use32
.text:00005D20                 assume cs:_text
.text:00005D20                 ;org 5D20h
.text:00005D20 ; COMDAT (pick any)
.text:00005D20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D20
.text:00005D20 ; =============== S U B R O U T I N E =======================================
.text:00005D20
.text:00005D20 ; Attributes: bp-based frame
.text:00005D20
.text:00005D20 ; public: __thiscall CRecordVector<struct NCoderMixer2::CBond>::CRecordVector<struct NCoderMixer2::CBond>(void)
.text:00005D20                 public ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
.text:00005D20 ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ proc near
.text:00005D20                                         ; CODE XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+42p
.text:00005D20
.text:00005D20 var_4           = dword ptr -4
.text:00005D20
.text:00005D20                 push    ebp
.text:00005D21                 mov     ebp, esp
.text:00005D23                 push    ecx
.text:00005D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D2B                 mov     [ebp+var_4], ecx
.text:00005D2E                 mov     eax, [ebp+var_4]
.text:00005D31                 mov     dword ptr [eax], 0
.text:00005D37                 mov     ecx, [ebp+var_4]
.text:00005D3A                 mov     dword ptr [ecx+4], 0
.text:00005D41                 mov     edx, [ebp+var_4]
.text:00005D44                 mov     dword ptr [edx+8], 0
.text:00005D4B                 mov     eax, [ebp+var_4]
.text:00005D4E                 mov     esp, ebp
.text:00005D50                 pop     ebp
.text:00005D51                 retn
.text:00005D51 ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ endp
.text:00005D51
.text:00005D51 ; ---------------------------------------------------------------------------
.text:00005D52                 align 4
.text:00005D52 _text           ends
.text:00005D52
.text:00005D54 ; ===========================================================================
.text:00005D54
.text:00005D54 ; Segment type: Pure code
.text:00005D54 ; Segment permissions: Read/Execute
.text:00005D54 _text           segment para public 'CODE' use32
.text:00005D54                 assume cs:_text
.text:00005D54                 ;org 5D54h
.text:00005D54 ; COMDAT (pick any)
.text:00005D54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D54
.text:00005D54 ; =============== S U B R O U T I N E =======================================
.text:00005D54
.text:00005D54 ; Attributes: bp-based frame
.text:00005D54
.text:00005D54 ; public: unsigned int __thiscall CRecordVector<struct NCoderMixer2::CBond>::Size(void)const
.text:00005D54                 public ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ
.text:00005D54 ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ proc near
.text:00005D54                                         ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+70p
.text:00005D54                                         ; NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)+4Dp ...
.text:00005D54
.text:00005D54 var_4           = dword ptr -4
.text:00005D54
.text:00005D54                 push    ebp
.text:00005D55                 mov     ebp, esp
.text:00005D57                 push    ecx
.text:00005D58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D5F                 mov     [ebp+var_4], ecx
.text:00005D62                 mov     eax, [ebp+var_4]
.text:00005D65                 mov     eax, [eax+4]
.text:00005D68                 mov     esp, ebp
.text:00005D6A                 pop     ebp
.text:00005D6B                 retn
.text:00005D6B ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ endp
.text:00005D6B
.text:00005D6B _text           ends
.text:00005D6B
.text:00005D6C ; ===========================================================================
.text:00005D6C
.text:00005D6C ; Segment type: Pure code
.text:00005D6C ; Segment permissions: Read/Execute
.text:00005D6C _text           segment para public 'CODE' use32
.text:00005D6C                 assume cs:_text
.text:00005D6C                 ;org 5D6Ch
.text:00005D6C ; COMDAT (pick any)
.text:00005D6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D6C
.text:00005D6C ; =============== S U B R O U T I N E =======================================
.text:00005D6C
.text:00005D6C ; Attributes: bp-based frame
.text:00005D6C
.text:00005D6C ; public: __thiscall CRecordVector<struct NCoderMixer2::CBond>::~CRecordVector<struct NCoderMixer2::CBond>(void)
.text:00005D6C                 public ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
.text:00005D6C ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ proc near
.text:00005D6C                                         ; CODE XREF: __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1+6j
.text:00005D6C                                         ; NCoderMixer2::CBindInfo::~CBindInfo(void)+67p ...
.text:00005D6C
.text:00005D6C var_8           = dword ptr -8
.text:00005D6C var_4           = dword ptr -4
.text:00005D6C
.text:00005D6C                 push    ebp
.text:00005D6D                 mov     ebp, esp
.text:00005D6F                 sub     esp, 8
.text:00005D72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005D79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D80                 mov     [ebp+var_4], ecx
.text:00005D83                 mov     eax, [ebp+var_4]
.text:00005D86                 mov     ecx, [eax]
.text:00005D88                 mov     [ebp+var_8], ecx
.text:00005D8B                 mov     edx, [ebp+var_8]
.text:00005D8E                 push    edx             ; void *
.text:00005D8F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005D94                 add     esp, 4
.text:00005D97                 add     esp, 8
.text:00005D9A                 cmp     ebp, esp
.text:00005D9C                 call    __RTC_CheckEsp
.text:00005DA1                 mov     esp, ebp
.text:00005DA3                 pop     ebp
.text:00005DA4                 retn
.text:00005DA4 ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ endp
.text:00005DA4
.text:00005DA4 ; ---------------------------------------------------------------------------
.text:00005DA5                 align 4
.text:00005DA5 _text           ends
.text:00005DA5
.text:00005DA8 ; ===========================================================================
.text:00005DA8
.text:00005DA8 ; Segment type: Pure code
.text:00005DA8 ; Segment permissions: Read/Execute
.text:00005DA8 _text           segment para public 'CODE' use32
.text:00005DA8                 assume cs:_text
.text:00005DA8                 ;org 5DA8h
.text:00005DA8 ; COMDAT (pick any)
.text:00005DA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DA8
.text:00005DA8 ; =============== S U B R O U T I N E =======================================
.text:00005DA8
.text:00005DA8 ; Attributes: bp-based frame
.text:00005DA8
.text:00005DA8 ; public: class CRecordVector<struct NCoderMixer2::CBond> & __thiscall CRecordVector<struct NCoderMixer2::CBond>::operator=(class CRecordVector<struct NCoderMixer2::CBond> const &)
.text:00005DA8                 public ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
.text:00005DA8 ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z proc near
.text:00005DA8                                         ; CODE XREF: NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+27p
.text:00005DA8
.text:00005DA8 var_10          = dword ptr -10h
.text:00005DA8 var_C           = dword ptr -0Ch
.text:00005DA8 var_8           = dword ptr -8
.text:00005DA8 var_4           = dword ptr -4
.text:00005DA8 arg_0           = dword ptr  8
.text:00005DA8
.text:00005DA8                 push    ebp
.text:00005DA9                 mov     ebp, esp
.text:00005DAB                 sub     esp, 10h
.text:00005DAE                 mov     eax, 0CCCCCCCCh
.text:00005DB3                 mov     [ebp+var_10], eax
.text:00005DB6                 mov     [ebp+var_C], eax
.text:00005DB9                 mov     [ebp+var_8], eax
.text:00005DBC                 mov     [ebp+var_4], eax
.text:00005DBF                 mov     [ebp+var_4], ecx
.text:00005DC2                 mov     eax, [ebp+arg_0]
.text:00005DC5                 cmp     eax, [ebp+var_4]
.text:00005DC8                 jnz     short loc_5DD2
.text:00005DCA                 mov     eax, [ebp+var_4]
.text:00005DCD                 jmp     loc_5E76
.text:00005DD2 ; ---------------------------------------------------------------------------
.text:00005DD2
.text:00005DD2 loc_5DD2:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+20j
.text:00005DD2                 mov     ecx, [ebp+arg_0]
.text:00005DD5                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00005DDA                 mov     [ebp+var_8], eax
.text:00005DDD                 mov     ecx, [ebp+var_4]
.text:00005DE0                 mov     edx, [ebp+var_8]
.text:00005DE3                 cmp     edx, [ecx+8]
.text:00005DE6                 jbe     short loc_5E49
.text:00005DE8                 mov     eax, [ebp+var_4]
.text:00005DEB                 mov     ecx, [eax]
.text:00005DED                 mov     [ebp+var_C], ecx
.text:00005DF0                 mov     edx, [ebp+var_C]
.text:00005DF3                 push    edx             ; void *
.text:00005DF4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005DF9                 add     esp, 4
.text:00005DFC                 mov     eax, [ebp+var_4]
.text:00005DFF                 mov     dword ptr [eax+8], 0
.text:00005E06                 mov     ecx, [ebp+var_4]
.text:00005E09                 mov     dword ptr [ecx+4], 0
.text:00005E10                 mov     edx, [ebp+var_4]
.text:00005E13                 mov     dword ptr [edx], 0
.text:00005E19                 xor     ecx, ecx
.text:00005E1B                 mov     eax, [ebp+var_8]
.text:00005E1E                 mov     edx, 8
.text:00005E23                 mul     edx
.text:00005E25                 seto    cl
.text:00005E28                 neg     ecx
.text:00005E2A                 or      ecx, eax
.text:00005E2C                 push    ecx             ; unsigned int
.text:00005E2D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005E32                 add     esp, 4
.text:00005E35                 mov     [ebp+var_10], eax
.text:00005E38                 mov     eax, [ebp+var_4]
.text:00005E3B                 mov     ecx, [ebp+var_10]
.text:00005E3E                 mov     [eax], ecx
.text:00005E40                 mov     edx, [ebp+var_4]
.text:00005E43                 mov     eax, [ebp+var_8]
.text:00005E46                 mov     [edx+8], eax
.text:00005E49
.text:00005E49 loc_5E49:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+3Ej
.text:00005E49                 mov     ecx, [ebp+var_4]
.text:00005E4C                 mov     edx, [ebp+var_8]
.text:00005E4F                 mov     [ecx+4], edx
.text:00005E52                 cmp     [ebp+var_8], 0
.text:00005E56                 jz      short loc_5E73
.text:00005E58                 mov     eax, [ebp+var_8]
.text:00005E5B                 shl     eax, 3
.text:00005E5E                 push    eax             ; Size
.text:00005E5F                 mov     ecx, [ebp+arg_0]
.text:00005E62                 mov     edx, [ecx]
.text:00005E64                 push    edx             ; Src
.text:00005E65                 mov     eax, [ebp+var_4]
.text:00005E68                 mov     ecx, [eax]
.text:00005E6A                 push    ecx             ; Dst
.text:00005E6B                 call    _memcpy
.text:00005E70                 add     esp, 0Ch
.text:00005E73
.text:00005E73 loc_5E73:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+AEj
.text:00005E73                 mov     eax, [ebp+var_4]
.text:00005E76
.text:00005E76 loc_5E76:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+25j
.text:00005E76                 add     esp, 10h
.text:00005E79                 cmp     ebp, esp
.text:00005E7B                 call    __RTC_CheckEsp
.text:00005E80                 mov     esp, ebp
.text:00005E82                 pop     ebp
.text:00005E83                 retn    4
.text:00005E83 ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z endp
.text:00005E83
.text:00005E83 ; ---------------------------------------------------------------------------
.text:00005E86                 align 4
.text:00005E86 _text           ends
.text:00005E86
.text:00005E88 ; ===========================================================================
.text:00005E88
.text:00005E88 ; Segment type: Pure code
.text:00005E88 ; Segment permissions: Read/Execute
.text:00005E88 _text           segment para public 'CODE' use32
.text:00005E88                 assume cs:_text
.text:00005E88                 ;org 5E88h
.text:00005E88 ; COMDAT (pick any)
.text:00005E88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E88
.text:00005E88 ; =============== S U B R O U T I N E =======================================
.text:00005E88
.text:00005E88 ; Attributes: bp-based frame
.text:00005E88
.text:00005E88 ; public: struct NCoderMixer2::CBond const & __thiscall CRecordVector<struct NCoderMixer2::CBond>::operator[](unsigned int)const
.text:00005E88                 public ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z
.text:00005E88 ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z proc near
.text:00005E88                                         ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+E5p
.text:00005E88                                         ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+43p ...
.text:00005E88
.text:00005E88 var_4           = dword ptr -4
.text:00005E88 arg_0           = dword ptr  8
.text:00005E88
.text:00005E88                 push    ebp
.text:00005E89                 mov     ebp, esp
.text:00005E8B                 push    ecx
.text:00005E8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E93                 mov     [ebp+var_4], ecx
.text:00005E96                 mov     eax, [ebp+var_4]
.text:00005E99                 mov     ecx, [eax]
.text:00005E9B                 mov     edx, [ebp+arg_0]
.text:00005E9E                 lea     eax, [ecx+edx*8]
.text:00005EA1                 mov     esp, ebp
.text:00005EA3                 pop     ebp
.text:00005EA4                 retn    4
.text:00005EA4 ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z endp
.text:00005EA4
.text:00005EA4 ; ---------------------------------------------------------------------------
.text:00005EA7                 align 4
.text:00005EA7 _text           ends
.text:00005EA7
.text:00005EA8 ; ===========================================================================
.text:00005EA8
.text:00005EA8 ; Segment type: Pure code
.text:00005EA8 ; Segment permissions: Read/Execute
.text:00005EA8 _text           segment para public 'CODE' use32
.text:00005EA8                 assume cs:_text
.text:00005EA8                 ;org 5EA8h
.text:00005EA8 ; COMDAT (pick any)
.text:00005EA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EA8
.text:00005EA8 ; =============== S U B R O U T I N E =======================================
.text:00005EA8
.text:00005EA8 ; Attributes: bp-based frame
.text:00005EA8
.text:00005EA8 ; public: struct NCoderMixer2::CBond & __thiscall CRecordVector<struct NCoderMixer2::CBond>::operator[](unsigned int)
.text:00005EA8                 public ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z
.text:00005EA8 ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z proc near
.text:00005EA8                                         ; CODE XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+60p
.text:00005EA8                                         ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+6Bp ...
.text:00005EA8
.text:00005EA8 var_4           = dword ptr -4
.text:00005EA8 arg_0           = dword ptr  8
.text:00005EA8
.text:00005EA8                 push    ebp
.text:00005EA9                 mov     ebp, esp
.text:00005EAB                 push    ecx
.text:00005EAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EB3                 mov     [ebp+var_4], ecx
.text:00005EB6                 mov     eax, [ebp+var_4]
.text:00005EB9                 mov     ecx, [eax]
.text:00005EBB                 mov     edx, [ebp+arg_0]
.text:00005EBE                 lea     eax, [ecx+edx*8]
.text:00005EC1                 mov     esp, ebp
.text:00005EC3                 pop     ebp
.text:00005EC4                 retn    4
.text:00005EC4 ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z endp
.text:00005EC4
.text:00005EC4 ; ---------------------------------------------------------------------------
.text:00005EC7                 align 4
.text:00005EC7 _text           ends
.text:00005EC7
.text:00005EC8 ; ===========================================================================
.text:00005EC8
.text:00005EC8 ; Segment type: Pure code
.text:00005EC8 ; Segment permissions: Read/Execute
.text:00005EC8 _text           segment para public 'CODE' use32
.text:00005EC8                 assume cs:_text
.text:00005EC8                 ;org 5EC8h
.text:00005EC8 ; COMDAT (pick any)
.text:00005EC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EC8
.text:00005EC8 ; =============== S U B R O U T I N E =======================================
.text:00005EC8
.text:00005EC8 ; Attributes: bp-based frame
.text:00005EC8
.text:00005EC8 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:00005EC8                 public ??0?$CRecordVector@I@@QAE@XZ
.text:00005EC8 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+51p
.text:00005EC8                                         ; NCoderMixer2::CBindInfo::CBindInfo(void)+60p ...
.text:00005EC8
.text:00005EC8 var_4           = dword ptr -4
.text:00005EC8
.text:00005EC8                 push    ebp
.text:00005EC9                 mov     ebp, esp
.text:00005ECB                 push    ecx
.text:00005ECC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005ED3                 mov     [ebp+var_4], ecx
.text:00005ED6                 mov     eax, [ebp+var_4]
.text:00005ED9                 mov     dword ptr [eax], 0
.text:00005EDF                 mov     ecx, [ebp+var_4]
.text:00005EE2                 mov     dword ptr [ecx+4], 0
.text:00005EE9                 mov     edx, [ebp+var_4]
.text:00005EEC                 mov     dword ptr [edx+8], 0
.text:00005EF3                 mov     eax, [ebp+var_4]
.text:00005EF6                 mov     esp, ebp
.text:00005EF8                 pop     ebp
.text:00005EF9                 retn
.text:00005EF9 ??0?$CRecordVector@I@@QAE@XZ endp
.text:00005EF9
.text:00005EF9 ; ---------------------------------------------------------------------------
.text:00005EFA                 align 4
.text:00005EFA _text           ends
.text:00005EFA
.text:00005EFC ; ===========================================================================
.text:00005EFC
.text:00005EFC ; Segment type: Pure code
.text:00005EFC ; Segment permissions: Read/Execute
.text:00005EFC _text           segment para public 'CODE' use32
.text:00005EFC                 assume cs:_text
.text:00005EFC                 ;org 5EFCh
.text:00005EFC ; COMDAT (pick any)
.text:00005EFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EFC
.text:00005EFC ; =============== S U B R O U T I N E =======================================
.text:00005EFC
.text:00005EFC ; Attributes: bp-based frame
.text:00005EFC
.text:00005EFC ; public: unsigned int __thiscall CRecordVector<unsigned int>::Size(void)const
.text:00005EFC                 public ?Size@?$CRecordVector@I@@QBEIXZ
.text:00005EFC ?Size@?$CRecordVector@I@@QBEIXZ proc near
.text:00005EFC                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+421p
.text:00005EFC                                         ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+2Fp ...
.text:00005EFC
.text:00005EFC var_4           = dword ptr -4
.text:00005EFC
.text:00005EFC                 push    ebp
.text:00005EFD                 mov     ebp, esp
.text:00005EFF                 push    ecx
.text:00005F00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F07                 mov     [ebp+var_4], ecx
.text:00005F0A                 mov     eax, [ebp+var_4]
.text:00005F0D                 mov     eax, [eax+4]
.text:00005F10                 mov     esp, ebp
.text:00005F12                 pop     ebp
.text:00005F13                 retn
.text:00005F13 ?Size@?$CRecordVector@I@@QBEIXZ endp
.text:00005F13
.text:00005F13 _text           ends
.text:00005F13
.text:00005F14 ; ===========================================================================
.text:00005F14
.text:00005F14 ; Segment type: Pure code
.text:00005F14 ; Segment permissions: Read/Execute
.text:00005F14 _text           segment para public 'CODE' use32
.text:00005F14                 assume cs:_text
.text:00005F14                 ;org 5F14h
.text:00005F14 ; COMDAT (pick any)
.text:00005F14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F14
.text:00005F14 ; =============== S U B R O U T I N E =======================================
.text:00005F14
.text:00005F14 ; Attributes: bp-based frame
.text:00005F14
.text:00005F14 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:00005F14                 public ??1?$CRecordVector@I@@QAE@XZ
.text:00005F14 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2+6j
.text:00005F14                                         ; __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3+6j ...
.text:00005F14
.text:00005F14 var_8           = dword ptr -8
.text:00005F14 var_4           = dword ptr -4
.text:00005F14
.text:00005F14                 push    ebp
.text:00005F15                 mov     ebp, esp
.text:00005F17                 sub     esp, 8
.text:00005F1A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005F21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F28                 mov     [ebp+var_4], ecx
.text:00005F2B                 mov     eax, [ebp+var_4]
.text:00005F2E                 mov     ecx, [eax]
.text:00005F30                 mov     [ebp+var_8], ecx
.text:00005F33                 mov     edx, [ebp+var_8]
.text:00005F36                 push    edx             ; void *
.text:00005F37                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005F3C                 add     esp, 4
.text:00005F3F                 add     esp, 8
.text:00005F42                 cmp     ebp, esp
.text:00005F44                 call    __RTC_CheckEsp
.text:00005F49                 mov     esp, ebp
.text:00005F4B                 pop     ebp
.text:00005F4C                 retn
.text:00005F4C ??1?$CRecordVector@I@@QAE@XZ endp
.text:00005F4C
.text:00005F4C ; ---------------------------------------------------------------------------
.text:00005F4D                 align 10h
.text:00005F4D _text           ends
.text:00005F4D
.text:00005F50 ; ===========================================================================
.text:00005F50
.text:00005F50 ; Segment type: Pure code
.text:00005F50 ; Segment permissions: Read/Execute
.text:00005F50 _text           segment para public 'CODE' use32
.text:00005F50                 assume cs:_text
.text:00005F50                 ;org 5F50h
.text:00005F50 ; COMDAT (pick any)
.text:00005F50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F50
.text:00005F50 ; =============== S U B R O U T I N E =======================================
.text:00005F50
.text:00005F50 ; Attributes: bp-based frame
.text:00005F50
.text:00005F50 ; public: void __thiscall CRecordVector<unsigned int>::Clear(void)
.text:00005F50                 public ?Clear@?$CRecordVector@I@@QAEXXZ
.text:00005F50 ?Clear@?$CRecordVector@I@@QAEXXZ proc near
.text:00005F50                                         ; CODE XREF: NCoderMixer2::CBindInfo::ClearMaps(void)+14p
.text:00005F50                                         ; NCoderMixer2::CBindInfo::ClearMaps(void)+1Fp
.text:00005F50
.text:00005F50 var_4           = dword ptr -4
.text:00005F50
.text:00005F50                 push    ebp
.text:00005F51                 mov     ebp, esp
.text:00005F53                 push    ecx
.text:00005F54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F5B                 mov     [ebp+var_4], ecx
.text:00005F5E                 mov     eax, [ebp+var_4]
.text:00005F61                 mov     dword ptr [eax+4], 0
.text:00005F68                 mov     esp, ebp
.text:00005F6A                 pop     ebp
.text:00005F6B                 retn
.text:00005F6B ?Clear@?$CRecordVector@I@@QAEXXZ endp
.text:00005F6B
.text:00005F6B _text           ends
.text:00005F6B
.text:00005F6C ; ===========================================================================
.text:00005F6C
.text:00005F6C ; Segment type: Pure code
.text:00005F6C ; Segment permissions: Read/Execute
.text:00005F6C _text           segment para public 'CODE' use32
.text:00005F6C                 assume cs:_text
.text:00005F6C                 ;org 5F6Ch
.text:00005F6C ; COMDAT (pick any)
.text:00005F6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F6C
.text:00005F6C ; =============== S U B R O U T I N E =======================================
.text:00005F6C
.text:00005F6C ; Attributes: bp-based frame
.text:00005F6C
.text:00005F6C ; public: class CRecordVector<unsigned int> & __thiscall CRecordVector<unsigned int>::operator=(class CRecordVector<unsigned int> const &)
.text:00005F6C                 public ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z
.text:00005F6C ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z proc near
.text:00005F6C                                         ; CODE XREF: NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+39p
.text:00005F6C                                         ; NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+57p ...
.text:00005F6C
.text:00005F6C var_10          = dword ptr -10h
.text:00005F6C var_C           = dword ptr -0Ch
.text:00005F6C var_8           = dword ptr -8
.text:00005F6C var_4           = dword ptr -4
.text:00005F6C arg_0           = dword ptr  8
.text:00005F6C
.text:00005F6C                 push    ebp
.text:00005F6D                 mov     ebp, esp
.text:00005F6F                 sub     esp, 10h
.text:00005F72                 mov     eax, 0CCCCCCCCh
.text:00005F77                 mov     [ebp+var_10], eax
.text:00005F7A                 mov     [ebp+var_C], eax
.text:00005F7D                 mov     [ebp+var_8], eax
.text:00005F80                 mov     [ebp+var_4], eax
.text:00005F83                 mov     [ebp+var_4], ecx
.text:00005F86                 mov     eax, [ebp+arg_0]
.text:00005F89                 cmp     eax, [ebp+var_4]
.text:00005F8C                 jnz     short loc_5F96
.text:00005F8E                 mov     eax, [ebp+var_4]
.text:00005F91                 jmp     loc_603A
.text:00005F96 ; ---------------------------------------------------------------------------
.text:00005F96
.text:00005F96 loc_5F96:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+20j
.text:00005F96                 mov     ecx, [ebp+arg_0]
.text:00005F99                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00005F9E                 mov     [ebp+var_8], eax
.text:00005FA1                 mov     ecx, [ebp+var_4]
.text:00005FA4                 mov     edx, [ebp+var_8]
.text:00005FA7                 cmp     edx, [ecx+8]
.text:00005FAA                 jbe     short loc_600D
.text:00005FAC                 mov     eax, [ebp+var_4]
.text:00005FAF                 mov     ecx, [eax]
.text:00005FB1                 mov     [ebp+var_C], ecx
.text:00005FB4                 mov     edx, [ebp+var_C]
.text:00005FB7                 push    edx             ; void *
.text:00005FB8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005FBD                 add     esp, 4
.text:00005FC0                 mov     eax, [ebp+var_4]
.text:00005FC3                 mov     dword ptr [eax+8], 0
.text:00005FCA                 mov     ecx, [ebp+var_4]
.text:00005FCD                 mov     dword ptr [ecx+4], 0
.text:00005FD4                 mov     edx, [ebp+var_4]
.text:00005FD7                 mov     dword ptr [edx], 0
.text:00005FDD                 xor     ecx, ecx
.text:00005FDF                 mov     eax, [ebp+var_8]
.text:00005FE2                 mov     edx, 4
.text:00005FE7                 mul     edx
.text:00005FE9                 seto    cl
.text:00005FEC                 neg     ecx
.text:00005FEE                 or      ecx, eax
.text:00005FF0                 push    ecx             ; unsigned int
.text:00005FF1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005FF6                 add     esp, 4
.text:00005FF9                 mov     [ebp+var_10], eax
.text:00005FFC                 mov     eax, [ebp+var_4]
.text:00005FFF                 mov     ecx, [ebp+var_10]
.text:00006002                 mov     [eax], ecx
.text:00006004                 mov     edx, [ebp+var_4]
.text:00006007                 mov     eax, [ebp+var_8]
.text:0000600A                 mov     [edx+8], eax
.text:0000600D
.text:0000600D loc_600D:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+3Ej
.text:0000600D                 mov     ecx, [ebp+var_4]
.text:00006010                 mov     edx, [ebp+var_8]
.text:00006013                 mov     [ecx+4], edx
.text:00006016                 cmp     [ebp+var_8], 0
.text:0000601A                 jz      short loc_6037
.text:0000601C                 mov     eax, [ebp+var_8]
.text:0000601F                 shl     eax, 2
.text:00006022                 push    eax             ; Size
.text:00006023                 mov     ecx, [ebp+arg_0]
.text:00006026                 mov     edx, [ecx]
.text:00006028                 push    edx             ; Src
.text:00006029                 mov     eax, [ebp+var_4]
.text:0000602C                 mov     ecx, [eax]
.text:0000602E                 push    ecx             ; Dst
.text:0000602F                 call    _memcpy
.text:00006034                 add     esp, 0Ch
.text:00006037
.text:00006037 loc_6037:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+AEj
.text:00006037                 mov     eax, [ebp+var_4]
.text:0000603A
.text:0000603A loc_603A:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+25j
.text:0000603A                 add     esp, 10h
.text:0000603D                 cmp     ebp, esp
.text:0000603F                 call    __RTC_CheckEsp
.text:00006044                 mov     esp, ebp
.text:00006046                 pop     ebp
.text:00006047                 retn    4
.text:00006047 ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z endp
.text:00006047
.text:00006047 ; ---------------------------------------------------------------------------
.text:0000604A                 align 4
.text:0000604A _text           ends
.text:0000604A
.text:0000604C ; ===========================================================================
.text:0000604C
.text:0000604C ; Segment type: Pure code
.text:0000604C ; Segment permissions: Read/Execute
.text:0000604C _text           segment para public 'CODE' use32
.text:0000604C                 assume cs:_text
.text:0000604C                 ;org 604Ch
.text:0000604C ; COMDAT (pick any)
.text:0000604C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000604C
.text:0000604C ; =============== S U B R O U T I N E =======================================
.text:0000604C
.text:0000604C ; Attributes: bp-based frame
.text:0000604C
.text:0000604C ; public: unsigned int __thiscall CRecordVector<unsigned int>::Add(unsigned int)
.text:0000604C                 public ?Add@?$CRecordVector@I@@QAEII@Z
.text:0000604C ?Add@?$CRecordVector@I@@QAEII@Z proc near
.text:0000604C                                         ; CODE XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+A9p
.text:0000604C                                         ; NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+E3p
.text:0000604C
.text:0000604C var_8           = dword ptr -8
.text:0000604C var_4           = dword ptr -4
.text:0000604C arg_0           = dword ptr  8
.text:0000604C
.text:0000604C                 push    ebp
.text:0000604D                 mov     ebp, esp
.text:0000604F                 sub     esp, 8
.text:00006052                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006059                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006060                 mov     [ebp+var_4], ecx
.text:00006063                 mov     ecx, [ebp+var_4]
.text:00006066                 call    ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<uint>::ReserveOnePosition(void)
.text:0000606B                 mov     eax, [ebp+var_4]
.text:0000606E                 mov     ecx, [eax+4]
.text:00006071                 mov     edx, [ebp+var_4]
.text:00006074                 mov     eax, [edx]
.text:00006076                 mov     edx, [ebp+arg_0]
.text:00006079                 mov     [eax+ecx*4], edx
.text:0000607C                 mov     eax, [ebp+var_4]
.text:0000607F                 mov     ecx, [eax+4]
.text:00006082                 mov     [ebp+var_8], ecx
.text:00006085                 mov     edx, [ebp+var_4]
.text:00006088                 mov     eax, [edx+4]
.text:0000608B                 add     eax, 1
.text:0000608E                 mov     ecx, [ebp+var_4]
.text:00006091                 mov     [ecx+4], eax
.text:00006094                 mov     eax, [ebp+var_8]
.text:00006097                 add     esp, 8
.text:0000609A                 cmp     ebp, esp
.text:0000609C                 call    __RTC_CheckEsp
.text:000060A1                 mov     esp, ebp
.text:000060A3                 pop     ebp
.text:000060A4                 retn    4
.text:000060A4 ?Add@?$CRecordVector@I@@QAEII@Z endp
.text:000060A4
.text:000060A4 ; ---------------------------------------------------------------------------
.text:000060A7                 align 4
.text:000060A7 _text           ends
.text:000060A7
.text:000060A8 ; ===========================================================================
.text:000060A8
.text:000060A8 ; Segment type: Pure code
.text:000060A8 ; Segment permissions: Read/Execute
.text:000060A8 _text           segment para public 'CODE' use32
.text:000060A8                 assume cs:_text
.text:000060A8                 ;org 60A8h
.text:000060A8 ; COMDAT (pick any)
.text:000060A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000060A8
.text:000060A8 ; =============== S U B R O U T I N E =======================================
.text:000060A8
.text:000060A8 ; Attributes: bp-based frame
.text:000060A8
.text:000060A8 ; public: unsigned int const & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)const
.text:000060A8                 public ??A?$CRecordVector@I@@QBEABII@Z
.text:000060A8 ??A?$CRecordVector@I@@QBEABII@Z proc near
.text:000060A8                                         ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+75p
.text:000060A8                                         ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+43p ...
.text:000060A8
.text:000060A8 var_4           = dword ptr -4
.text:000060A8 arg_0           = dword ptr  8
.text:000060A8
.text:000060A8                 push    ebp
.text:000060A9                 mov     ebp, esp
.text:000060AB                 push    ecx
.text:000060AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060B3                 mov     [ebp+var_4], ecx
.text:000060B6                 mov     eax, [ebp+var_4]
.text:000060B9                 mov     ecx, [eax]
.text:000060BB                 mov     edx, [ebp+arg_0]
.text:000060BE                 lea     eax, [ecx+edx*4]
.text:000060C1                 mov     esp, ebp
.text:000060C3                 pop     ebp
.text:000060C4                 retn    4
.text:000060C4 ??A?$CRecordVector@I@@QBEABII@Z endp
.text:000060C4
.text:000060C4 ; ---------------------------------------------------------------------------
.text:000060C7                 align 4
.text:000060C7 _text           ends
.text:000060C7
.text:000060C8 ; ===========================================================================
.text:000060C8
.text:000060C8 ; Segment type: Pure code
.text:000060C8 ; Segment permissions: Read/Execute
.text:000060C8 _text           segment para public 'CODE' use32
.text:000060C8                 assume cs:_text
.text:000060C8                 ;org 60C8h
.text:000060C8 ; COMDAT (pick any)
.text:000060C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000060C8
.text:000060C8 ; =============== S U B R O U T I N E =======================================
.text:000060C8
.text:000060C8 ; Attributes: bp-based frame
.text:000060C8
.text:000060C8 ; public: unsigned int & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)
.text:000060C8                 public ??A?$CRecordVector@I@@QAEAAII@Z
.text:000060C8 ??A?$CRecordVector@I@@QAEAAII@Z proc near
.text:000060C8                                         ; CODE XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+6Ep
.text:000060C8                                         ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)+24p ...
.text:000060C8
.text:000060C8 var_4           = dword ptr -4
.text:000060C8 arg_0           = dword ptr  8
.text:000060C8
.text:000060C8                 push    ebp
.text:000060C9                 mov     ebp, esp
.text:000060CB                 push    ecx
.text:000060CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060D3                 mov     [ebp+var_4], ecx
.text:000060D6                 mov     eax, [ebp+var_4]
.text:000060D9                 mov     ecx, [eax]
.text:000060DB                 mov     edx, [ebp+arg_0]
.text:000060DE                 lea     eax, [ecx+edx*4]
.text:000060E1                 mov     esp, ebp
.text:000060E3                 pop     ebp
.text:000060E4                 retn    4
.text:000060E4 ??A?$CRecordVector@I@@QAEAAII@Z endp
.text:000060E4
.text:000060E4 ; ---------------------------------------------------------------------------
.text:000060E7                 align 4
.text:000060E7 _text           ends
.text:000060E7
.text:000060E8 ; ===========================================================================
.text:000060E8
.text:000060E8 ; Segment type: Pure code
.text:000060E8 ; Segment permissions: Read/Execute
.text:000060E8 _text           segment para public 'CODE' use32
.text:000060E8                 assume cs:_text
.text:000060E8                 ;org 60E8h
.text:000060E8 ; COMDAT (pick any)
.text:000060E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000060E8
.text:000060E8 ; =============== S U B R O U T I N E =======================================
.text:000060E8
.text:000060E8 ; Attributes: bp-based frame
.text:000060E8
.text:000060E8 ; public: void __thiscall CRecordVector<unsigned __int64>::ClearAndSetSize(unsigned int)
.text:000060E8                 public ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z
.text:000060E8 ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z proc near
.text:000060E8                                         ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+65p
.text:000060E8
.text:000060E8 var_4           = dword ptr -4
.text:000060E8 arg_0           = dword ptr  8
.text:000060E8
.text:000060E8                 push    ebp
.text:000060E9                 mov     ebp, esp
.text:000060EB                 push    ecx
.text:000060EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060F3                 mov     [ebp+var_4], ecx
.text:000060F6                 mov     eax, [ebp+arg_0]
.text:000060F9                 push    eax
.text:000060FA                 mov     ecx, [ebp+var_4]
.text:000060FD                 call    ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndReserve(uint)
.text:00006102                 mov     ecx, [ebp+var_4]
.text:00006105                 mov     edx, [ebp+arg_0]
.text:00006108                 mov     [ecx+4], edx
.text:0000610B                 add     esp, 4
.text:0000610E                 cmp     ebp, esp
.text:00006110                 call    __RTC_CheckEsp
.text:00006115                 mov     esp, ebp
.text:00006117                 pop     ebp
.text:00006118                 retn    4
.text:00006118 ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z endp
.text:00006118
.text:00006118 ; ---------------------------------------------------------------------------
.text:0000611B                 align 4
.text:0000611B _text           ends
.text:0000611B
.text:0000611C ; ===========================================================================
.text:0000611C
.text:0000611C ; Segment type: Pure code
.text:0000611C ; Segment permissions: Read/Execute
.text:0000611C _text           segment para public 'CODE' use32
.text:0000611C                 assume cs:_text
.text:0000611C                 ;org 611Ch
.text:0000611C ; COMDAT (pick any)
.text:0000611C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000611C
.text:0000611C ; =============== S U B R O U T I N E =======================================
.text:0000611C
.text:0000611C ; Attributes: bp-based frame
.text:0000611C
.text:0000611C ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:0000611C                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:0000611C ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:0000611C                                         ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+C2p
.text:0000611C                                         ; NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+DBp ...
.text:0000611C
.text:0000611C var_4           = dword ptr -4
.text:0000611C arg_0           = dword ptr  8
.text:0000611C
.text:0000611C                 push    ebp
.text:0000611D                 mov     ebp, esp
.text:0000611F                 push    ecx
.text:00006120                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006127                 mov     [ebp+var_4], ecx
.text:0000612A                 mov     eax, [ebp+var_4]
.text:0000612D                 mov     ecx, [eax]
.text:0000612F                 mov     edx, [ebp+arg_0]
.text:00006132                 lea     eax, [ecx+edx*8]
.text:00006135                 mov     esp, ebp
.text:00006137                 pop     ebp
.text:00006138                 retn    4
.text:00006138 ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:00006138
.text:00006138 ; ---------------------------------------------------------------------------
.text:0000613B                 align 4
.text:0000613B _text           ends
.text:0000613B
.text:0000613C ; ===========================================================================
.text:0000613C
.text:0000613C ; Segment type: Pure code
.text:0000613C ; Segment permissions: Read/Execute
.text:0000613C _text           segment para public 'CODE' use32
.text:0000613C                 assume cs:_text
.text:0000613C                 ;org 613Ch
.text:0000613C ; COMDAT (pick any)
.text:0000613C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000613C
.text:0000613C ; =============== S U B R O U T I N E =======================================
.text:0000613C
.text:0000613C ; Attributes: bp-based frame
.text:0000613C
.text:0000613C ; public: void __thiscall CRecordVector<unsigned __int64 const *>::ClearAndSetSize(unsigned int)
.text:0000613C                 public ?ClearAndSetSize@?$CRecordVector@PB_K@@QAEXI@Z
.text:0000613C ?ClearAndSetSize@?$CRecordVector@PB_K@@QAEXI@Z proc near
.text:0000613C                                         ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+77p
.text:0000613C
.text:0000613C var_4           = dword ptr -4
.text:0000613C arg_0           = dword ptr  8
.text:0000613C
.text:0000613C                 push    ebp
.text:0000613D                 mov     ebp, esp
.text:0000613F                 push    ecx
.text:00006140                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006147                 mov     [ebp+var_4], ecx
.text:0000614A                 mov     eax, [ebp+arg_0]
.text:0000614D                 push    eax
.text:0000614E                 mov     ecx, [ebp+var_4]
.text:00006151                 call    ?ClearAndReserve@?$CRecordVector@PB_K@@QAEXI@Z ; CRecordVector<unsigned __int64 const *>::ClearAndReserve(uint)
.text:00006156                 mov     ecx, [ebp+var_4]
.text:00006159                 mov     edx, [ebp+arg_0]
.text:0000615C                 mov     [ecx+4], edx
.text:0000615F                 add     esp, 4
.text:00006162                 cmp     ebp, esp
.text:00006164                 call    __RTC_CheckEsp
.text:00006169                 mov     esp, ebp
.text:0000616B                 pop     ebp
.text:0000616C                 retn    4
.text:0000616C ?ClearAndSetSize@?$CRecordVector@PB_K@@QAEXI@Z endp
.text:0000616C
.text:0000616C ; ---------------------------------------------------------------------------
.text:0000616F                 align 10h
.text:0000616F _text           ends
.text:0000616F
.text:00006170 ; ===========================================================================
.text:00006170
.text:00006170 ; Segment type: Pure code
.text:00006170 ; Segment permissions: Read/Execute
.text:00006170 _text           segment para public 'CODE' use32
.text:00006170                 assume cs:_text
.text:00006170                 ;org 6170h
.text:00006170 ; COMDAT (pick any)
.text:00006170                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006170
.text:00006170 ; =============== S U B R O U T I N E =======================================
.text:00006170
.text:00006170 ; Attributes: bp-based frame
.text:00006170
.text:00006170 ; public: unsigned __int64 const * & __thiscall CRecordVector<unsigned __int64 const *>::operator[](unsigned int)
.text:00006170                 public ??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z
.text:00006170 ??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z proc near
.text:00006170                                         ; CODE XREF: NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+ECp
.text:00006170                                         ; NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)+11Bp ...
.text:00006170
.text:00006170 var_4           = dword ptr -4
.text:00006170 arg_0           = dword ptr  8
.text:00006170
.text:00006170                 push    ebp
.text:00006171                 mov     ebp, esp
.text:00006173                 push    ecx
.text:00006174                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000617B                 mov     [ebp+var_4], ecx
.text:0000617E                 mov     eax, [ebp+var_4]
.text:00006181                 mov     ecx, [eax]
.text:00006183                 mov     edx, [ebp+arg_0]
.text:00006186                 lea     eax, [ecx+edx*4]
.text:00006189                 mov     esp, ebp
.text:0000618B                 pop     ebp
.text:0000618C                 retn    4
.text:0000618C ??A?$CRecordVector@PB_K@@QAEAAPB_KI@Z endp
.text:0000618C
.text:0000618C ; ---------------------------------------------------------------------------
.text:0000618F                 align 10h
.text:0000618F _text           ends
.text:0000618F
.text:00006190 ; ===========================================================================
.text:00006190
.text:00006190 ; Segment type: Pure code
.text:00006190 ; Segment permissions: Read/Execute
.text:00006190 _text           segment para public 'CODE' use32
.text:00006190                 assume cs:_text
.text:00006190                 ;org 6190h
.text:00006190 ; COMDAT (pick any)
.text:00006190                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006190
.text:00006190 ; =============== S U B R O U T I N E =======================================
.text:00006190
.text:00006190 ; Attributes: bp-based frame
.text:00006190
.text:00006190 ; public: unsigned __int64 const * const & __thiscall CRecordVector<unsigned __int64 const *>::Front(void)const
.text:00006190                 public ?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ
.text:00006190 ?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ proc near
.text:00006190                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+5BBp
.text:00006190                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+5E3p
.text:00006190
.text:00006190 var_4           = dword ptr -4
.text:00006190
.text:00006190                 push    ebp
.text:00006191                 mov     ebp, esp
.text:00006193                 push    ecx
.text:00006194                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000619B                 mov     [ebp+var_4], ecx
.text:0000619E                 mov     eax, [ebp+var_4]
.text:000061A1                 mov     eax, [eax]
.text:000061A3                 mov     esp, ebp
.text:000061A5                 pop     ebp
.text:000061A6                 retn
.text:000061A6 ?Front@?$CRecordVector@PB_K@@QBEABQB_KXZ endp
.text:000061A6
.text:000061A6 ; ---------------------------------------------------------------------------
.text:000061A7                 align 4
.text:000061A7 _text           ends
.text:000061A7
.text:000061A8 ; ===========================================================================
.text:000061A8
.text:000061A8 ; Segment type: Pure code
.text:000061A8 ; Segment permissions: Read/Execute
.text:000061A8 _text           segment para public 'CODE' use32
.text:000061A8                 assume cs:_text
.text:000061A8                 ;org 61A8h
.text:000061A8 ; COMDAT (pick any)
.text:000061A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000061A8
.text:000061A8 ; =============== S U B R O U T I N E =======================================
.text:000061A8
.text:000061A8 ; Attributes: bp-based frame
.text:000061A8
.text:000061A8 ; public: unsigned __int64 const * & __thiscall CRecordVector<unsigned __int64 const *>::Front(void)
.text:000061A8                 public ?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ
.text:000061A8 ?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ proc near
.text:000061A8                                         ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+1FEp
.text:000061A8                                         ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+22Dp
.text:000061A8
.text:000061A8 var_4           = dword ptr -4
.text:000061A8
.text:000061A8                 push    ebp
.text:000061A9                 mov     ebp, esp
.text:000061AB                 push    ecx
.text:000061AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061B3                 mov     [ebp+var_4], ecx
.text:000061B6                 mov     eax, [ebp+var_4]
.text:000061B9                 mov     eax, [eax]
.text:000061BB                 mov     esp, ebp
.text:000061BD                 pop     ebp
.text:000061BE                 retn
.text:000061BE ?Front@?$CRecordVector@PB_K@@QAEAAPB_KXZ endp
.text:000061BE
.text:000061BE ; ---------------------------------------------------------------------------
.text:000061BF                 align 10h
.text:000061BF _text           ends
.text:000061BF
.text:000061C0 ; ===========================================================================
.text:000061C0
.text:000061C0 ; Segment type: Pure code
.text:000061C0 ; Segment permissions: Read/Execute
.text:000061C0 _text           segment para public 'CODE' use32
.text:000061C0                 assume cs:_text
.text:000061C0                 ;org 61C0h
.text:000061C0 ; COMDAT (pick any)
.text:000061C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000061C0
.text:000061C0 ; =============== S U B R O U T I N E =======================================
.text:000061C0
.text:000061C0 ; Attributes: bp-based frame
.text:000061C0
.text:000061C0 ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:000061C0                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:000061C0 ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NCoderMixer2::CBondsChecks::CBondsChecks(void)+11p
.text:000061C0                                         ; NCoderMixer2::CMixer::CMixer(bool)+4Ep ...
.text:000061C0
.text:000061C0 var_4           = dword ptr -4
.text:000061C0
.text:000061C0                 push    ebp
.text:000061C1                 mov     ebp, esp
.text:000061C3                 push    ecx
.text:000061C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061CB                 mov     [ebp+var_4], ecx
.text:000061CE                 mov     eax, [ebp+var_4]
.text:000061D1                 mov     dword ptr [eax], 0
.text:000061D7                 mov     ecx, [ebp+var_4]
.text:000061DA                 mov     dword ptr [ecx+4], 0
.text:000061E1                 mov     edx, [ebp+var_4]
.text:000061E4                 mov     dword ptr [edx+8], 0
.text:000061EB                 mov     eax, [ebp+var_4]
.text:000061EE                 mov     esp, ebp
.text:000061F0                 pop     ebp
.text:000061F1                 retn
.text:000061F1 ??0?$CRecordVector@_N@@QAE@XZ endp
.text:000061F1
.text:000061F1 ; ---------------------------------------------------------------------------
.text:000061F2                 align 4
.text:000061F2 _text           ends
.text:000061F2
.text:000061F4 ; ===========================================================================
.text:000061F4
.text:000061F4 ; Segment type: Pure code
.text:000061F4 ; Segment permissions: Read/Execute
.text:000061F4 _text           segment para public 'CODE' use32
.text:000061F4                 assume cs:_text
.text:000061F4                 ;org 61F4h
.text:000061F4 ; COMDAT (pick any)
.text:000061F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000061F4
.text:000061F4 ; =============== S U B R O U T I N E =======================================
.text:000061F4
.text:000061F4 ; Attributes: bp-based frame
.text:000061F4
.text:000061F4 ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:000061F4                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:000061F4 ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:000061F4                                         ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+35p
.text:000061F4                                         ; NCoderMixer2::CBondsChecks::Check(void)+5Ep
.text:000061F4
.text:000061F4 var_4           = dword ptr -4
.text:000061F4
.text:000061F4                 push    ebp
.text:000061F5                 mov     ebp, esp
.text:000061F7                 push    ecx
.text:000061F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061FF                 mov     [ebp+var_4], ecx
.text:00006202                 mov     eax, [ebp+var_4]
.text:00006205                 mov     eax, [eax+4]
.text:00006208                 mov     esp, ebp
.text:0000620A                 pop     ebp
.text:0000620B                 retn
.text:0000620B ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:0000620B
.text:0000620B _text           ends
.text:0000620B
.text:0000620C ; ===========================================================================
.text:0000620C
.text:0000620C ; Segment type: Pure code
.text:0000620C ; Segment permissions: Read/Execute
.text:0000620C _text           segment para public 'CODE' use32
.text:0000620C                 assume cs:_text
.text:0000620C                 ;org 620Ch
.text:0000620C ; COMDAT (pick any)
.text:0000620C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000620C
.text:0000620C ; =============== S U B R O U T I N E =======================================
.text:0000620C
.text:0000620C ; Attributes: bp-based frame
.text:0000620C
.text:0000620C ; public: void __thiscall CRecordVector<bool>::ClearAndSetSize(unsigned int)
.text:0000620C                 public ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z
.text:0000620C ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z proc near
.text:0000620C                                         ; CODE XREF: NCoderMixer2::BoolVector_Fill_False(CRecordVector<bool> &,uint)+1Bp
.text:0000620C
.text:0000620C var_4           = dword ptr -4
.text:0000620C arg_0           = dword ptr  8
.text:0000620C
.text:0000620C                 push    ebp
.text:0000620D                 mov     ebp, esp
.text:0000620F                 push    ecx
.text:00006210                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006217                 mov     [ebp+var_4], ecx
.text:0000621A                 mov     eax, [ebp+arg_0]
.text:0000621D                 push    eax
.text:0000621E                 mov     ecx, [ebp+var_4]
.text:00006221                 call    ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndReserve(uint)
.text:00006226                 mov     ecx, [ebp+var_4]
.text:00006229                 mov     edx, [ebp+arg_0]
.text:0000622C                 mov     [ecx+4], edx
.text:0000622F                 add     esp, 4
.text:00006232                 cmp     ebp, esp
.text:00006234                 call    __RTC_CheckEsp
.text:00006239                 mov     esp, ebp
.text:0000623B                 pop     ebp
.text:0000623C                 retn    4
.text:0000623C ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z endp
.text:0000623C
.text:0000623C ; ---------------------------------------------------------------------------
.text:0000623F                 align 10h
.text:0000623F _text           ends
.text:0000623F
.text:00006240 ; ===========================================================================
.text:00006240
.text:00006240 ; Segment type: Pure code
.text:00006240 ; Segment permissions: Read/Execute
.text:00006240 _text           segment para public 'CODE' use32
.text:00006240                 assume cs:_text
.text:00006240                 ;org 6240h
.text:00006240 ; COMDAT (pick any)
.text:00006240                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006240
.text:00006240 ; =============== S U B R O U T I N E =======================================
.text:00006240
.text:00006240 ; Attributes: bp-based frame
.text:00006240
.text:00006240 ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00006240                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:00006240 ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NCoderMixer2::CBondsChecks::~CBondsChecks(void)+11p
.text:00006240                                         ; __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1+6j ...
.text:00006240
.text:00006240 var_8           = dword ptr -8
.text:00006240 var_4           = dword ptr -4
.text:00006240
.text:00006240                 push    ebp
.text:00006241                 mov     ebp, esp
.text:00006243                 sub     esp, 8
.text:00006246                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000624D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006254                 mov     [ebp+var_4], ecx
.text:00006257                 mov     eax, [ebp+var_4]
.text:0000625A                 mov     ecx, [eax]
.text:0000625C                 mov     [ebp+var_8], ecx
.text:0000625F                 mov     edx, [ebp+var_8]
.text:00006262                 push    edx             ; void *
.text:00006263                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006268                 add     esp, 4
.text:0000626B                 add     esp, 8
.text:0000626E                 cmp     ebp, esp
.text:00006270                 call    __RTC_CheckEsp
.text:00006275                 mov     esp, ebp
.text:00006277                 pop     ebp
.text:00006278                 retn
.text:00006278 ??1?$CRecordVector@_N@@QAE@XZ endp
.text:00006278
.text:00006278 ; ---------------------------------------------------------------------------
.text:00006279                 align 4
.text:00006279 _text           ends
.text:00006279
.text:0000627C ; ===========================================================================
.text:0000627C
.text:0000627C ; Segment type: Pure code
.text:0000627C ; Segment permissions: Read/Execute
.text:0000627C _text           segment para public 'CODE' use32
.text:0000627C                 assume cs:_text
.text:0000627C                 ;org 627Ch
.text:0000627C ; COMDAT (pick any)
.text:0000627C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000627C
.text:0000627C ; =============== S U B R O U T I N E =======================================
.text:0000627C
.text:0000627C ; Attributes: bp-based frame
.text:0000627C
.text:0000627C ; public: void __thiscall CRecordVector<bool>::Clear(void)
.text:0000627C                 public ?Clear@?$CRecordVector@_N@@QAEXXZ
.text:0000627C ?Clear@?$CRecordVector@_N@@QAEXXZ proc near
.text:0000627C                                         ; CODE XREF: NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)+23p
.text:0000627C                                         ; CRecordVector<bool>::ClearAndReserve(uint)+21p
.text:0000627C
.text:0000627C var_4           = dword ptr -4
.text:0000627C
.text:0000627C                 push    ebp
.text:0000627D                 mov     ebp, esp
.text:0000627F                 push    ecx
.text:00006280                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006287                 mov     [ebp+var_4], ecx
.text:0000628A                 mov     eax, [ebp+var_4]
.text:0000628D                 mov     dword ptr [eax+4], 0
.text:00006294                 mov     esp, ebp
.text:00006296                 pop     ebp
.text:00006297                 retn
.text:00006297 ?Clear@?$CRecordVector@_N@@QAEXXZ endp
.text:00006297
.text:00006297 _text           ends
.text:00006297
.text:00006298 ; ===========================================================================
.text:00006298
.text:00006298 ; Segment type: Pure code
.text:00006298 ; Segment permissions: Read/Execute
.text:00006298 _text           segment para public 'CODE' use32
.text:00006298                 assume cs:_text
.text:00006298                 ;org 6298h
.text:00006298 ; COMDAT (pick any)
.text:00006298                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006298
.text:00006298 ; =============== S U B R O U T I N E =======================================
.text:00006298
.text:00006298 ; Attributes: bp-based frame
.text:00006298
.text:00006298 ; public: unsigned int __thiscall CRecordVector<bool>::Add(bool)
.text:00006298                 public ?Add@?$CRecordVector@_N@@QAEI_N@Z
.text:00006298 ?Add@?$CRecordVector@_N@@QAEI_N@Z proc near
.text:00006298                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+49p
.text:00006298                                         ; NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+5Cp ...
.text:00006298
.text:00006298 var_8           = dword ptr -8
.text:00006298 var_4           = dword ptr -4
.text:00006298 arg_0           = byte ptr  8
.text:00006298
.text:00006298                 push    ebp
.text:00006299                 mov     ebp, esp
.text:0000629B                 sub     esp, 8
.text:0000629E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000062A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062AC                 mov     [ebp+var_4], ecx
.text:000062AF                 mov     ecx, [ebp+var_4]
.text:000062B2                 call    ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition(void)
.text:000062B7                 mov     eax, [ebp+var_4]
.text:000062BA                 mov     ecx, [eax]
.text:000062BC                 mov     edx, [ebp+var_4]
.text:000062BF                 mov     eax, [edx+4]
.text:000062C2                 mov     dl, [ebp+arg_0]
.text:000062C5                 mov     [ecx+eax], dl
.text:000062C8                 mov     eax, [ebp+var_4]
.text:000062CB                 mov     ecx, [eax+4]
.text:000062CE                 mov     [ebp+var_8], ecx
.text:000062D1                 mov     edx, [ebp+var_4]
.text:000062D4                 mov     eax, [edx+4]
.text:000062D7                 add     eax, 1
.text:000062DA                 mov     ecx, [ebp+var_4]
.text:000062DD                 mov     [ecx+4], eax
.text:000062E0                 mov     eax, [ebp+var_8]
.text:000062E3                 add     esp, 8
.text:000062E6                 cmp     ebp, esp
.text:000062E8                 call    __RTC_CheckEsp
.text:000062ED                 mov     esp, ebp
.text:000062EF                 pop     ebp
.text:000062F0                 retn    4
.text:000062F0 ?Add@?$CRecordVector@_N@@QAEI_N@Z endp
.text:000062F0
.text:000062F0 ; ---------------------------------------------------------------------------
.text:000062F3                 align 4
.text:000062F3 _text           ends
.text:000062F3
.text:000062F4 ; ===========================================================================
.text:000062F4
.text:000062F4 ; Segment type: Pure code
.text:000062F4 ; Segment permissions: Read/Execute
.text:000062F4 _text           segment para public 'CODE' use32
.text:000062F4                 assume cs:_text
.text:000062F4                 ;org 62F4h
.text:000062F4 ; COMDAT (pick any)
.text:000062F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000062F4
.text:000062F4 ; =============== S U B R O U T I N E =======================================
.text:000062F4
.text:000062F4 ; Attributes: bp-based frame
.text:000062F4
.text:000062F4 ; public: bool & __thiscall CRecordVector<bool>::operator[](unsigned int)
.text:000062F4                 public ??A?$CRecordVector@_N@@QAEAA_NI@Z
.text:000062F4 ??A?$CRecordVector@_N@@QAEAA_NI@Z proc near
.text:000062F4                                         ; CODE XREF: NCoderMixer2::CBondsChecks::CheckCoder(uint)+46p
.text:000062F4                                         ; NCoderMixer2::CBondsChecks::CheckCoder(uint)+60p ...
.text:000062F4
.text:000062F4 var_4           = dword ptr -4
.text:000062F4 arg_0           = dword ptr  8
.text:000062F4
.text:000062F4                 push    ebp
.text:000062F5                 mov     ebp, esp
.text:000062F7                 push    ecx
.text:000062F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062FF                 mov     [ebp+var_4], ecx
.text:00006302                 mov     eax, [ebp+var_4]
.text:00006305                 mov     eax, [eax]
.text:00006307                 add     eax, [ebp+arg_0]
.text:0000630A                 mov     esp, ebp
.text:0000630C                 pop     ebp
.text:0000630D                 retn    4
.text:0000630D ??A?$CRecordVector@_N@@QAEAA_NI@Z endp
.text:0000630D
.text:0000630D _text           ends
.text:0000630D
.text:00006310 ; ===========================================================================
.text:00006310
.text:00006310 ; Segment type: Pure code
.text:00006310 ; Segment permissions: Read/Execute
.text:00006310 _text           segment para public 'CODE' use32
.text:00006310                 assume cs:_text
.text:00006310                 ;org 6310h
.text:00006310 ; COMDAT (pick any)
.text:00006310                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006310
.text:00006310 ; =============== S U B R O U T I N E =======================================
.text:00006310
.text:00006310 ; Attributes: bp-based frame
.text:00006310
.text:00006310 ; public: __thiscall CMyComPtr<struct IUnknown>::operator struct IUnknown *(void)const
.text:00006310                 public ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ
.text:00006310 ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ proc near
.text:00006310                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+18Bp
.text:00006310                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+3B4p
.text:00006310
.text:00006310 var_4           = dword ptr -4
.text:00006310
.text:00006310                 push    ebp
.text:00006311                 mov     ebp, esp
.text:00006313                 push    ecx
.text:00006314                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000631B                 mov     [ebp+var_4], ecx
.text:0000631E                 mov     eax, [ebp+var_4]
.text:00006321                 mov     eax, [eax]
.text:00006323                 mov     esp, ebp
.text:00006325                 pop     ebp
.text:00006326                 retn
.text:00006326 ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ endp
.text:00006326
.text:00006326 ; ---------------------------------------------------------------------------
.text:00006327                 align 4
.text:00006327 _text           ends
.text:00006327
.text:00006328 ; ===========================================================================
.text:00006328
.text:00006328 ; Segment type: Pure code
.text:00006328 ; Segment permissions: Read/Execute
.text:00006328 _text           segment para public 'CODE' use32
.text:00006328                 assume cs:_text
.text:00006328                 ;org 6328h
.text:00006328 ; COMDAT (pick any)
.text:00006328                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006328
.text:00006328 ; =============== S U B R O U T I N E =======================================
.text:00006328
.text:00006328 ; Attributes: bp-based frame
.text:00006328
.text:00006328 ; public: struct IUnknown * __thiscall CMyComPtr<struct IUnknown>::operator=(struct IUnknown *)
.text:00006328                 public ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
.text:00006328 ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z proc near
.text:00006328                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+1FFp
.text:00006328                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+447p
.text:00006328
.text:00006328 var_4           = dword ptr -4
.text:00006328 arg_0           = dword ptr  8
.text:00006328
.text:00006328                 push    ebp
.text:00006329                 mov     ebp, esp
.text:0000632B                 push    ecx
.text:0000632C                 push    esi
.text:0000632D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006334                 mov     [ebp+var_4], ecx
.text:00006337                 cmp     [ebp+arg_0], 0
.text:0000633B                 jz      short loc_6354
.text:0000633D                 mov     eax, [ebp+arg_0]
.text:00006340                 mov     ecx, [eax]
.text:00006342                 mov     esi, esp
.text:00006344                 mov     edx, [ebp+arg_0]
.text:00006347                 push    edx
.text:00006348                 mov     eax, [ecx+4]
.text:0000634B                 call    eax
.text:0000634D                 cmp     esi, esp
.text:0000634F                 call    __RTC_CheckEsp
.text:00006354
.text:00006354 loc_6354:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+13j
.text:00006354                 mov     ecx, [ebp+var_4]
.text:00006357                 cmp     dword ptr [ecx], 0
.text:0000635A                 jz      short loc_6377
.text:0000635C                 mov     edx, [ebp+var_4]
.text:0000635F                 mov     eax, [edx]
.text:00006361                 mov     ecx, [ebp+var_4]
.text:00006364                 mov     edx, [ecx]
.text:00006366                 mov     eax, [eax]
.text:00006368                 mov     esi, esp
.text:0000636A                 push    edx
.text:0000636B                 mov     ecx, [eax+8]
.text:0000636E                 call    ecx
.text:00006370                 cmp     esi, esp
.text:00006372                 call    __RTC_CheckEsp
.text:00006377
.text:00006377 loc_6377:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+32j
.text:00006377                 mov     edx, [ebp+var_4]
.text:0000637A                 mov     eax, [ebp+arg_0]
.text:0000637D                 mov     [edx], eax
.text:0000637F                 mov     eax, [ebp+arg_0]
.text:00006382                 pop     esi
.text:00006383                 add     esp, 4
.text:00006386                 cmp     ebp, esp
.text:00006388                 call    __RTC_CheckEsp
.text:0000638D                 mov     esp, ebp
.text:0000638F                 pop     ebp
.text:00006390                 retn    4
.text:00006390 ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z endp
.text:00006390
.text:00006390 ; ---------------------------------------------------------------------------
.text:00006393                 align 4
.text:00006393 _text           ends
.text:00006393
.text:00006394 ; ===========================================================================
.text:00006394
.text:00006394 ; Segment type: Pure code
.text:00006394 ; Segment permissions: Read/Execute
.text:00006394 _text           segment para public 'CODE' use32
.text:00006394                 assume cs:_text
.text:00006394                 ;org 6394h
.text:00006394 ; COMDAT (pick any)
.text:00006394                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006394
.text:00006394 ; =============== S U B R O U T I N E =======================================
.text:00006394
.text:00006394 ; Attributes: bp-based frame
.text:00006394
.text:00006394 ; public: unsigned int __thiscall CObjectVector<struct NCoderMixer2::CCoderST>::Size(void)const
.text:00006394                 public ?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ
.text:00006394 ?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ proc near
.text:00006394                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+349p
.text:00006394                                         ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+A4p
.text:00006394
.text:00006394 var_4           = dword ptr -4
.text:00006394
.text:00006394                 push    ebp
.text:00006395                 mov     ebp, esp
.text:00006397                 push    ecx
.text:00006398                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000639F                 mov     [ebp+var_4], ecx
.text:000063A2                 mov     ecx, [ebp+var_4]
.text:000063A5                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000063AA                 add     esp, 4
.text:000063AD                 cmp     ebp, esp
.text:000063AF                 call    __RTC_CheckEsp
.text:000063B4                 mov     esp, ebp
.text:000063B6                 pop     ebp
.text:000063B7                 retn
.text:000063B7 ?Size@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QBEIXZ endp
.text:000063B7
.text:000063B7 _text           ends
.text:000063B7
.text:000063B8 ; ===========================================================================
.text:000063B8
.text:000063B8 ; Segment type: Pure code
.text:000063B8 ; Segment permissions: Read/Execute
.text:000063B8 _text           segment para public 'CODE' use32
.text:000063B8                 assume cs:_text
.text:000063B8                 ;org 63B8h
.text:000063B8 ; COMDAT (pick any)
.text:000063B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000063B8
.text:000063B8 ; =============== S U B R O U T I N E =======================================
.text:000063B8
.text:000063B8 ; Attributes: bp-based frame
.text:000063B8
.text:000063B8 ; public: __thiscall CObjectVector<struct NCoderMixer2::CCoderST>::CObjectVector<struct NCoderMixer2::CCoderST>(void)
.text:000063B8                 public ??0?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
.text:000063B8 ??0?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ proc near
.text:000063B8                                         ; CODE XREF: NCoderMixer2::CMixerST::CMixerST(bool)+70p
.text:000063B8
.text:000063B8 var_4           = dword ptr -4
.text:000063B8
.text:000063B8                 push    ebp
.text:000063B9                 mov     ebp, esp
.text:000063BB                 push    ecx
.text:000063BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063C3                 mov     [ebp+var_4], ecx
.text:000063C6                 mov     ecx, [ebp+var_4]
.text:000063C9                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000063CE                 mov     eax, [ebp+var_4]
.text:000063D1                 add     esp, 4
.text:000063D4                 cmp     ebp, esp
.text:000063D6                 call    __RTC_CheckEsp
.text:000063DB                 mov     esp, ebp
.text:000063DD                 pop     ebp
.text:000063DE                 retn
.text:000063DE ??0?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ endp
.text:000063DE
.text:000063DE ; ---------------------------------------------------------------------------
.text:000063DF                 align 10h
.text:000063DF _text           ends
.text:000063DF
.text:000063E0 ; ===========================================================================
.text:000063E0
.text:000063E0 ; Segment type: Pure code
.text:000063E0 ; Segment permissions: Read/Execute
.text:000063E0 _text           segment para public 'CODE' use32
.text:000063E0                 assume cs:_text
.text:000063E0                 ;org 63E0h
.text:000063E0 ; COMDAT (pick any)
.text:000063E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000063E0
.text:000063E0 ; =============== S U B R O U T I N E =======================================
.text:000063E0
.text:000063E0 ; Attributes: bp-based frame
.text:000063E0
.text:000063E0 ; public: struct NCoderMixer2::CCoderST & __thiscall CObjectVector<struct NCoderMixer2::CCoderST>::operator[](unsigned int)
.text:000063E0                 public ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z
.text:000063E0 ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z proc near
.text:000063E0                                         ; CODE XREF: NCoderMixer2::CMixerST::GetCoder(uint)+18p
.text:000063E0                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+8Ap ...
.text:000063E0
.text:000063E0 var_4           = dword ptr -4
.text:000063E0 arg_0           = dword ptr  8
.text:000063E0
.text:000063E0                 push    ebp
.text:000063E1                 mov     ebp, esp
.text:000063E3                 push    ecx
.text:000063E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063EB                 mov     [ebp+var_4], ecx
.text:000063EE                 mov     eax, [ebp+arg_0]
.text:000063F1                 push    eax
.text:000063F2                 mov     ecx, [ebp+var_4]
.text:000063F5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000063FA                 mov     eax, [eax]
.text:000063FC                 add     esp, 4
.text:000063FF                 cmp     ebp, esp
.text:00006401                 call    __RTC_CheckEsp
.text:00006406                 mov     esp, ebp
.text:00006408                 pop     ebp
.text:00006409                 retn    4
.text:00006409 ??A?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@I@Z endp
.text:00006409
.text:00006409 _text           ends
.text:00006409
.text:0000640C ; ===========================================================================
.text:0000640C
.text:0000640C ; Segment type: Pure code
.text:0000640C ; Segment permissions: Read/Execute
.text:0000640C _text           segment para public 'CODE' use32
.text:0000640C                 assume cs:_text
.text:0000640C                 ;org 640Ch
.text:0000640C ; COMDAT (pick any)
.text:0000640C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000640C
.text:0000640C ; =============== S U B R O U T I N E =======================================
.text:0000640C
.text:0000640C ; Attributes: bp-based frame
.text:0000640C
.text:0000640C ; public: struct NCoderMixer2::CCoderST & __thiscall CObjectVector<struct NCoderMixer2::CCoderST>::AddNew(void)
.text:0000640C                 public ?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ
.text:0000640C ?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ proc near
.text:0000640C                                         ; CODE XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+67p
.text:0000640C
.text:0000640C var_20          = dword ptr -20h
.text:0000640C var_1C          = dword ptr -1Ch
.text:0000640C var_18          = dword ptr -18h
.text:0000640C var_14          = dword ptr -14h
.text:0000640C var_10          = dword ptr -10h
.text:0000640C var_C           = dword ptr -0Ch
.text:0000640C var_4           = dword ptr -4
.text:0000640C
.text:0000640C                 push    ebp
.text:0000640D                 mov     ebp, esp
.text:0000640F                 push    0FFFFFFFFh
.text:00006411                 push    offset __ehhandler$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ
.text:00006416                 mov     eax, large fs:0
.text:0000641C                 push    eax
.text:0000641D                 sub     esp, 14h
.text:00006420                 mov     eax, 0CCCCCCCCh
.text:00006425                 mov     [ebp+var_20], eax
.text:00006428                 mov     [ebp+var_1C], eax
.text:0000642B                 mov     [ebp+var_18], eax
.text:0000642E                 mov     [ebp+var_14], eax
.text:00006431                 mov     [ebp+var_10], eax
.text:00006434                 mov     eax, dword ptr ds:___security_cookie
.text:00006439                 xor     eax, ebp
.text:0000643B                 push    eax
.text:0000643C                 lea     eax, [ebp+var_C]
.text:0000643F                 mov     large fs:0, eax
.text:00006445                 mov     [ebp+var_10], ecx
.text:00006448                 push    40h ; '@'       ; unsigned int
.text:0000644A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000644F                 add     esp, 4
.text:00006452                 mov     [ebp+var_1C], eax
.text:00006455                 mov     [ebp+var_4], 0
.text:0000645C                 cmp     [ebp+var_1C], 0
.text:00006460                 jz      short loc_646F
.text:00006462                 mov     ecx, [ebp+var_1C] ; this
.text:00006465                 call    ??0CCoderST@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoderST::CCoderST(void)
.text:0000646A                 mov     [ebp+var_20], eax
.text:0000646D                 jmp     short loc_6476
.text:0000646F ; ---------------------------------------------------------------------------
.text:0000646F
.text:0000646F loc_646F:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::AddNew(void)+54j
.text:0000646F                 mov     [ebp+var_20], 0
.text:00006476
.text:00006476 loc_6476:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::AddNew(void)+61j
.text:00006476                 mov     eax, [ebp+var_20]
.text:00006479                 mov     [ebp+var_18], eax
.text:0000647C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006483                 mov     ecx, [ebp+var_18]
.text:00006486                 mov     [ebp+var_14], ecx
.text:00006489                 mov     edx, [ebp+var_14]
.text:0000648C                 push    edx
.text:0000648D                 mov     ecx, [ebp+var_10]
.text:00006490                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00006495                 mov     eax, [ebp+var_14]
.text:00006498                 mov     ecx, [ebp+var_C]
.text:0000649B                 mov     large fs:0, ecx
.text:000064A2                 pop     ecx
.text:000064A3                 add     esp, 20h
.text:000064A6                 cmp     ebp, esp
.text:000064A8                 call    __RTC_CheckEsp
.text:000064AD                 mov     esp, ebp
.text:000064AF                 pop     ebp
.text:000064B0                 retn
.text:000064B0 ?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ endp
.text:000064B0
.text:000064B0 ; ---------------------------------------------------------------------------
.text:000064B1                 align 4
.text:000064B1 _text           ends
.text:000064B1
.text$x:000064B4 ; ===========================================================================
.text$x:000064B4
.text$x:000064B4 ; Segment type: Pure code
.text$x:000064B4 ; Segment permissions: Read/Execute
.text$x:000064B4 _text$x         segment para public 'CODE' use32
.text$x:000064B4                 assume cs:_text$x
.text$x:000064B4                 ;org 64B4h
.text$x:000064B4 ; COMDAT (pick associative to section at 640C)
.text$x:000064B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000064B4
.text$x:000064B4 ; =============== S U B R O U T I N E =======================================
.text$x:000064B4
.text$x:000064B4
.text$x:000064B4 __unwindfunclet$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ$0 proc near
.text$x:000064B4                                         ; DATA XREF: .xdata$x:000064E0o
.text$x:000064B4                 mov     eax, [ebp-1Ch]
.text$x:000064B7                 push    eax             ; void *
.text$x:000064B8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000064BD                 pop     ecx
.text$x:000064BE                 retn
.text$x:000064BE __unwindfunclet$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ$0 endp
.text$x:000064BE
.text$x:000064BF
.text$x:000064BF ; =============== S U B R O U T I N E =======================================
.text$x:000064BF
.text$x:000064BF
.text$x:000064BF __ehhandler$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ proc near
.text$x:000064BF                                         ; DATA XREF: CObjectVector<NCoderMixer2::CCoderST>::AddNew(void)+5o
.text$x:000064BF
.text$x:000064BF arg_4           = dword ptr  8
.text$x:000064BF
.text$x:000064BF                 mov     edx, [esp+arg_4]
.text$x:000064C3                 lea     eax, [edx+0Ch]
.text$x:000064C6                 mov     ecx, [edx-18h]
.text$x:000064C9                 xor     ecx, eax
.text$x:000064CB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000064D0                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ
.text$x:000064D5                 jmp     ___CxxFrameHandler3
.text$x:000064D5 __ehhandler$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ endp
.text$x:000064D5
.text$x:000064D5 ; ---------------------------------------------------------------------------
.text$x:000064DA                 align 4
.text$x:000064DA _text$x         ends
.text$x:000064DA
.xdata$x:000064DC ; ===========================================================================
.xdata$x:000064DC
.xdata$x:000064DC ; Segment type: Pure data
.xdata$x:000064DC ; Segment permissions: Read
.xdata$x:000064DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000064DC                 assume cs:_xdata$x
.xdata$x:000064DC                 ;org 64DCh
.xdata$x:000064DC ; COMDAT (pick associative to section at 640C)
.xdata$x:000064DC __unwindtable$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ db 0FFh
.xdata$x:000064DC                                         ; DATA XREF: .xdata$x:000064ECo
.xdata$x:000064DD                 db 0FFh
.xdata$x:000064DE                 db 0FFh
.xdata$x:000064DF                 db 0FFh
.xdata$x:000064E0                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ$0
.xdata$x:000064E4 __ehfuncinfo$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ db  22h ; "
.xdata$x:000064E4                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ+11o
.xdata$x:000064E5                 db    5
.xdata$x:000064E6                 db  93h ; ô
.xdata$x:000064E7                 db  19h
.xdata$x:000064E8                 db    1
.xdata$x:000064E9                 db    0
.xdata$x:000064EA                 db    0
.xdata$x:000064EB                 db    0
.xdata$x:000064EC                 dd offset __unwindtable$?AddNew@?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAEAAUCCoderST@NCoderMixer2@@XZ
.xdata$x:000064F0                 db    0
.xdata$x:000064F1                 db    0
.xdata$x:000064F2                 db    0
.xdata$x:000064F3                 db    0
.xdata$x:000064F4                 db    0
.xdata$x:000064F5                 db    0
.xdata$x:000064F6                 db    0
.xdata$x:000064F7                 db    0
.xdata$x:000064F8                 db    0
.xdata$x:000064F9                 db    0
.xdata$x:000064FA                 db    0
.xdata$x:000064FB                 db    0
.xdata$x:000064FC                 db    0
.xdata$x:000064FD                 db    0
.xdata$x:000064FE                 db    0
.xdata$x:000064FF                 db    0
.xdata$x:00006500                 db    0
.xdata$x:00006501                 db    0
.xdata$x:00006502                 db    0
.xdata$x:00006503                 db    0
.xdata$x:00006504                 db    1
.xdata$x:00006505                 db    0
.xdata$x:00006506                 db    0
.xdata$x:00006507                 db    0
.xdata$x:00006507 _xdata$x        ends
.xdata$x:00006507
.text:00006508 ; ===========================================================================
.text:00006508
.text:00006508 ; Segment type: Pure code
.text:00006508 ; Segment permissions: Read/Execute
.text:00006508 _text           segment para public 'CODE' use32
.text:00006508                 assume cs:_text
.text:00006508                 ;org 6508h
.text:00006508 ; COMDAT (pick any)
.text:00006508                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006508
.text:00006508 ; =============== S U B R O U T I N E =======================================
.text:00006508
.text:00006508 ; Attributes: bp-based frame
.text:00006508
.text:00006508 ; _DWORD __thiscall NCoderMixer2::CCoderST::CCoderST(NCoderMixer2::CCoderST *__hidden this)
.text:00006508                 public ??0CCoderST@NCoderMixer2@@QAE@XZ
.text:00006508 ??0CCoderST@NCoderMixer2@@QAE@XZ proc near
.text:00006508                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::AddNew(void)+59p
.text:00006508
.text:00006508 var_4           = dword ptr -4
.text:00006508
.text:00006508                 push    ebp
.text:00006509                 mov     ebp, esp
.text:0000650B                 push    ecx
.text:0000650C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006513                 mov     [ebp+var_4], ecx
.text:00006516                 mov     ecx, [ebp+var_4] ; this
.text:00006519                 call    ??0CCoder@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoder::CCoder(void)
.text:0000651E                 mov     eax, [ebp+var_4]
.text:00006521                 mov     byte ptr [eax+38h], 0
.text:00006525                 mov     ecx, [ebp+var_4]
.text:00006528                 mov     byte ptr [ecx+39h], 0
.text:0000652C                 mov     eax, [ebp+var_4]
.text:0000652F                 add     esp, 4
.text:00006532                 cmp     ebp, esp
.text:00006534                 call    __RTC_CheckEsp
.text:00006539                 mov     esp, ebp
.text:0000653B                 pop     ebp
.text:0000653C                 retn
.text:0000653C ??0CCoderST@NCoderMixer2@@QAE@XZ endp
.text:0000653C
.text:0000653C ; ---------------------------------------------------------------------------
.text:0000653D                 align 10h
.text:0000653D _text           ends
.text:0000653D
.text:00006540 ; ===========================================================================
.text:00006540
.text:00006540 ; Segment type: Pure code
.text:00006540 ; Segment permissions: Read/Execute
.text:00006540 _text           segment para public 'CODE' use32
.text:00006540                 assume cs:_text
.text:00006540                 ;org 6540h
.text:00006540 ; COMDAT (pick any)
.text:00006540                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006540
.text:00006540 ; =============== S U B R O U T I N E =======================================
.text:00006540
.text:00006540 ; Attributes: bp-based frame
.text:00006540
.text:00006540 ; _DWORD __thiscall NCoderMixer2::CCoder::CCoder(NCoderMixer2::CCoder *__hidden this)
.text:00006540                 public ??0CCoder@NCoderMixer2@@QAE@XZ
.text:00006540 ??0CCoder@NCoderMixer2@@QAE@XZ proc near
.text:00006540                                         ; CODE XREF: NCoderMixer2::CCoderST::CCoderST(void)+11p
.text:00006540                                         ; NCoderMixer2::CCoderMT::CCoderMT(void)+33p
.text:00006540
.text:00006540 var_10          = dword ptr -10h
.text:00006540 var_C           = dword ptr -0Ch
.text:00006540 var_4           = dword ptr -4
.text:00006540
.text:00006540                 push    ebp
.text:00006541                 mov     ebp, esp
.text:00006543                 push    0FFFFFFFFh
.text:00006545                 push    offset __ehhandler$??0CCoder@NCoderMixer2@@QAE@XZ
.text:0000654A                 mov     eax, large fs:0
.text:00006550                 push    eax
.text:00006551                 push    ecx
.text:00006552                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006559                 mov     eax, dword ptr ds:___security_cookie
.text:0000655E                 xor     eax, ebp
.text:00006560                 push    eax
.text:00006561                 lea     eax, [ebp+var_C]
.text:00006564                 mov     large fs:0, eax
.text:0000656A                 mov     [ebp+var_10], ecx
.text:0000656D                 mov     ecx, [ebp+var_10]
.text:00006570                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00006575                 mov     [ebp+var_4], 0
.text:0000657C                 mov     ecx, [ebp+var_10]
.text:0000657F                 add     ecx, 4
.text:00006582                 call    ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>(void)
.text:00006587                 mov     byte ptr [ebp+var_4], 1
.text:0000658B                 mov     ecx, [ebp+var_10]
.text:0000658E                 add     ecx, 1Ch
.text:00006591                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00006596                 mov     byte ptr [ebp+var_4], 2
.text:0000659A                 mov     ecx, [ebp+var_10]
.text:0000659D                 add     ecx, 28h ; '('
.text:000065A0                 call    ??0?$CRecordVector@PB_K@@QAE@XZ ; CRecordVector<unsigned __int64 const *>::CRecordVector<unsigned __int64 const *>(void)
.text:000065A5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000065AC                 mov     eax, [ebp+var_10]
.text:000065AF                 mov     ecx, [ebp+var_C]
.text:000065B2                 mov     large fs:0, ecx
.text:000065B9                 pop     ecx
.text:000065BA                 add     esp, 10h
.text:000065BD                 cmp     ebp, esp
.text:000065BF                 call    __RTC_CheckEsp
.text:000065C4                 mov     esp, ebp
.text:000065C6                 pop     ebp
.text:000065C7                 retn
.text:000065C7 ??0CCoder@NCoderMixer2@@QAE@XZ endp
.text:000065C7
.text:000065C7 _text           ends
.text:000065C7
.text$x:000065C8 ; ===========================================================================
.text$x:000065C8
.text$x:000065C8 ; Segment type: Pure code
.text$x:000065C8 ; Segment permissions: Read/Execute
.text$x:000065C8 _text$x         segment para public 'CODE' use32
.text$x:000065C8                 assume cs:_text$x
.text$x:000065C8                 ;org 65C8h
.text$x:000065C8 ; COMDAT (pick associative to section at 6540)
.text$x:000065C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000065C8
.text$x:000065C8 ; =============== S U B R O U T I N E =======================================
.text$x:000065C8
.text$x:000065C8
.text$x:000065C8 __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:000065C8                                         ; DATA XREF: .xdata$x:00006608o
.text$x:000065C8                 mov     ecx, [ebp-10h]
.text$x:000065CB                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:000065CB __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$0 endp
.text$x:000065CB
.text$x:000065D0
.text$x:000065D0 ; =============== S U B R O U T I N E =======================================
.text$x:000065D0
.text$x:000065D0
.text$x:000065D0 __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:000065D0                                         ; DATA XREF: .xdata$x:00006610o
.text$x:000065D0                 mov     ecx, [ebp-10h]
.text$x:000065D3                 add     ecx, 4
.text$x:000065D6                 jmp     ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text$x:000065D6 __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$1 endp
.text$x:000065D6
.text$x:000065DB
.text$x:000065DB ; =============== S U B R O U T I N E =======================================
.text$x:000065DB
.text$x:000065DB
.text$x:000065DB __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:000065DB                                         ; DATA XREF: .xdata$x:00006618o
.text$x:000065DB                 mov     ecx, [ebp-10h]
.text$x:000065DE                 add     ecx, 1Ch
.text$x:000065E1                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:000065E1 __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$2 endp
.text$x:000065E1
.text$x:000065E6
.text$x:000065E6 ; =============== S U B R O U T I N E =======================================
.text$x:000065E6
.text$x:000065E6
.text$x:000065E6 __ehhandler$??0CCoder@NCoderMixer2@@QAE@XZ proc near
.text$x:000065E6                                         ; DATA XREF: NCoderMixer2::CCoder::CCoder(void)+5o
.text$x:000065E6
.text$x:000065E6 arg_4           = dword ptr  8
.text$x:000065E6
.text$x:000065E6                 mov     edx, [esp+arg_4]
.text$x:000065EA                 lea     eax, [edx+0Ch]
.text$x:000065ED                 mov     ecx, [edx-8]
.text$x:000065F0                 xor     ecx, eax
.text$x:000065F2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065F7                 mov     eax, offset __ehfuncinfo$??0CCoder@NCoderMixer2@@QAE@XZ
.text$x:000065FC                 jmp     ___CxxFrameHandler3
.text$x:000065FC __ehhandler$??0CCoder@NCoderMixer2@@QAE@XZ endp
.text$x:000065FC
.text$x:000065FC ; ---------------------------------------------------------------------------
.text$x:00006601                 align 4
.text$x:00006601 _text$x         ends
.text$x:00006601
.xdata$x:00006604 ; ===========================================================================
.xdata$x:00006604
.xdata$x:00006604 ; Segment type: Pure data
.xdata$x:00006604 ; Segment permissions: Read
.xdata$x:00006604 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006604                 assume cs:_xdata$x
.xdata$x:00006604                 ;org 6604h
.xdata$x:00006604 ; COMDAT (pick associative to section at 6540)
.xdata$x:00006604 __unwindtable$??0CCoder@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00006604                                         ; DATA XREF: .xdata$x:00006624o
.xdata$x:00006605                 db 0FFh
.xdata$x:00006606                 db 0FFh
.xdata$x:00006607                 db 0FFh
.xdata$x:00006608                 dd offset __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$0
.xdata$x:0000660C                 align 10h
.xdata$x:00006610                 dd offset __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$1
.xdata$x:00006614                 db    1
.xdata$x:00006615                 db    0
.xdata$x:00006616                 db    0
.xdata$x:00006617                 db    0
.xdata$x:00006618                 dd offset __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$2
.xdata$x:0000661C __ehfuncinfo$??0CCoder@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:0000661C                                         ; DATA XREF: __ehhandler$??0CCoder@NCoderMixer2@@QAE@XZ+11o
.xdata$x:0000661D                 db    5
.xdata$x:0000661E                 db  93h ; ô
.xdata$x:0000661F                 db  19h
.xdata$x:00006620                 db    3
.xdata$x:00006621                 db    0
.xdata$x:00006622                 db    0
.xdata$x:00006623                 db    0
.xdata$x:00006624                 dd offset __unwindtable$??0CCoder@NCoderMixer2@@QAE@XZ
.xdata$x:00006628                 db    0
.xdata$x:00006629                 db    0
.xdata$x:0000662A                 db    0
.xdata$x:0000662B                 db    0
.xdata$x:0000662C                 db    0
.xdata$x:0000662D                 db    0
.xdata$x:0000662E                 db    0
.xdata$x:0000662F                 db    0
.xdata$x:00006630                 db    0
.xdata$x:00006631                 db    0
.xdata$x:00006632                 db    0
.xdata$x:00006633                 db    0
.xdata$x:00006634                 db    0
.xdata$x:00006635                 db    0
.xdata$x:00006636                 db    0
.xdata$x:00006637                 db    0
.xdata$x:00006638                 db    0
.xdata$x:00006639                 db    0
.xdata$x:0000663A                 db    0
.xdata$x:0000663B                 db    0
.xdata$x:0000663C                 db    1
.xdata$x:0000663D                 db    0
.xdata$x:0000663E                 db    0
.xdata$x:0000663F                 db    0
.xdata$x:0000663F _xdata$x        ends
.xdata$x:0000663F
.text:00006640 ; ===========================================================================
.text:00006640
.text:00006640 ; Segment type: Pure code
.text:00006640 ; Segment permissions: Read/Execute
.text:00006640 _text           segment para public 'CODE' use32
.text:00006640                 assume cs:_text
.text:00006640                 ;org 6640h
.text:00006640 ; COMDAT (pick any)
.text:00006640                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006640
.text:00006640 ; =============== S U B R O U T I N E =======================================
.text:00006640
.text:00006640 ; Attributes: bp-based frame
.text:00006640
.text:00006640 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:00006640                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00006640 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00006640                                         ; CODE XREF: NCoderMixer2::CCoder::CCoder(void)+30p
.text:00006640
.text:00006640 var_4           = dword ptr -4
.text:00006640
.text:00006640                 push    ebp
.text:00006641                 mov     ebp, esp
.text:00006643                 push    ecx
.text:00006644                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000664B                 mov     [ebp+var_4], ecx
.text:0000664E                 mov     eax, [ebp+var_4]
.text:00006651                 mov     dword ptr [eax], 0
.text:00006657                 mov     eax, [ebp+var_4]
.text:0000665A                 mov     esp, ebp
.text:0000665C                 pop     ebp
.text:0000665D                 retn
.text:0000665D ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:0000665D
.text:0000665D ; ---------------------------------------------------------------------------
.text:0000665E                 align 10h
.text:0000665E _text           ends
.text:0000665E
.text:00006660 ; ===========================================================================
.text:00006660
.text:00006660 ; Segment type: Pure code
.text:00006660 ; Segment permissions: Read/Execute
.text:00006660 _text           segment para public 'CODE' use32
.text:00006660                 assume cs:_text
.text:00006660                 ;org 6660h
.text:00006660 ; COMDAT (pick any)
.text:00006660                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006660
.text:00006660 ; =============== S U B R O U T I N E =======================================
.text:00006660
.text:00006660 ; Attributes: bp-based frame
.text:00006660
.text:00006660 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00006660                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00006660 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00006660                                         ; CODE XREF: __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$0+3j
.text:00006660                                         ; NCoderMixer2::CCoder::~CCoder(void)+67p ...
.text:00006660
.text:00006660 var_4           = dword ptr -4
.text:00006660
.text:00006660                 push    ebp
.text:00006661                 mov     ebp, esp
.text:00006663                 push    ecx
.text:00006664                 push    esi
.text:00006665                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000666C                 mov     [ebp+var_4], ecx
.text:0000666F                 mov     eax, [ebp+var_4]
.text:00006672                 cmp     dword ptr [eax], 0
.text:00006675                 jz      short loc_6692
.text:00006677                 mov     ecx, [ebp+var_4]
.text:0000667A                 mov     edx, [ecx]
.text:0000667C                 mov     eax, [ebp+var_4]
.text:0000667F                 mov     ecx, [eax]
.text:00006681                 mov     edx, [edx]
.text:00006683                 mov     esi, esp
.text:00006685                 push    ecx
.text:00006686                 mov     eax, [edx+8]
.text:00006689                 call    eax
.text:0000668B                 cmp     esi, esp
.text:0000668D                 call    __RTC_CheckEsp
.text:00006692
.text:00006692 loc_6692:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:00006692                 pop     esi
.text:00006693                 add     esp, 4
.text:00006696                 cmp     ebp, esp
.text:00006698                 call    __RTC_CheckEsp
.text:0000669D                 mov     esp, ebp
.text:0000669F                 pop     ebp
.text:000066A0                 retn
.text:000066A0 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:000066A0
.text:000066A0 ; ---------------------------------------------------------------------------
.text:000066A1                 align 4
.text:000066A1 _text           ends
.text:000066A1
.text:000066A4 ; ===========================================================================
.text:000066A4
.text:000066A4 ; Segment type: Pure code
.text:000066A4 ; Segment permissions: Read/Execute
.text:000066A4 _text           segment para public 'CODE' use32
.text:000066A4                 assume cs:_text
.text:000066A4                 ;org 66A4h
.text:000066A4 ; COMDAT (pick any)
.text:000066A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066A4
.text:000066A4 ; =============== S U B R O U T I N E =======================================
.text:000066A4
.text:000066A4 ; Attributes: bp-based frame
.text:000066A4
.text:000066A4 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::CMyComPtr<struct ICompressCoder2>(void)
.text:000066A4                 public ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
.text:000066A4 ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
.text:000066A4                                         ; CODE XREF: NCoderMixer2::CCoder::CCoder(void)+42p
.text:000066A4
.text:000066A4 var_4           = dword ptr -4
.text:000066A4
.text:000066A4                 push    ebp
.text:000066A5                 mov     ebp, esp
.text:000066A7                 push    ecx
.text:000066A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066AF                 mov     [ebp+var_4], ecx
.text:000066B2                 mov     eax, [ebp+var_4]
.text:000066B5                 mov     dword ptr [eax], 0
.text:000066BB                 mov     eax, [ebp+var_4]
.text:000066BE                 mov     esp, ebp
.text:000066C0                 pop     ebp
.text:000066C1                 retn
.text:000066C1 ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ endp
.text:000066C1
.text:000066C1 ; ---------------------------------------------------------------------------
.text:000066C2                 align 4
.text:000066C2 _text           ends
.text:000066C2
.text:000066C4 ; ===========================================================================
.text:000066C4
.text:000066C4 ; Segment type: Pure code
.text:000066C4 ; Segment permissions: Read/Execute
.text:000066C4 _text           segment para public 'CODE' use32
.text:000066C4                 assume cs:_text
.text:000066C4                 ;org 66C4h
.text:000066C4 ; COMDAT (pick any)
.text:000066C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066C4
.text:000066C4 ; =============== S U B R O U T I N E =======================================
.text:000066C4
.text:000066C4 ; Attributes: bp-based frame
.text:000066C4
.text:000066C4 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::~CMyComPtr<struct ICompressCoder2>(void)
.text:000066C4                 public ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
.text:000066C4 ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
.text:000066C4                                         ; CODE XREF: __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$1+6j
.text:000066C4                                         ; NCoderMixer2::CCoder::~CCoder(void)+58p ...
.text:000066C4
.text:000066C4 var_4           = dword ptr -4
.text:000066C4
.text:000066C4                 push    ebp
.text:000066C5                 mov     ebp, esp
.text:000066C7                 push    ecx
.text:000066C8                 push    esi
.text:000066C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066D0                 mov     [ebp+var_4], ecx
.text:000066D3                 mov     eax, [ebp+var_4]
.text:000066D6                 cmp     dword ptr [eax], 0
.text:000066D9                 jz      short loc_66F6
.text:000066DB                 mov     ecx, [ebp+var_4]
.text:000066DE                 mov     edx, [ecx]
.text:000066E0                 mov     eax, [ebp+var_4]
.text:000066E3                 mov     ecx, [eax]
.text:000066E5                 mov     edx, [edx]
.text:000066E7                 mov     esi, esp
.text:000066E9                 push    ecx
.text:000066EA                 mov     eax, [edx+8]
.text:000066ED                 call    eax
.text:000066EF                 cmp     esi, esp
.text:000066F1                 call    __RTC_CheckEsp
.text:000066F6
.text:000066F6 loc_66F6:                               ; CODE XREF: CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)+15j
.text:000066F6                 pop     esi
.text:000066F7                 add     esp, 4
.text:000066FA                 cmp     ebp, esp
.text:000066FC                 call    __RTC_CheckEsp
.text:00006701                 mov     esp, ebp
.text:00006703                 pop     ebp
.text:00006704                 retn
.text:00006704 ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ endp
.text:00006704
.text:00006704 ; ---------------------------------------------------------------------------
.text:00006705                 align 4
.text:00006705 _text           ends
.text:00006705
.text:00006708 ; ===========================================================================
.text:00006708
.text:00006708 ; Segment type: Pure code
.text:00006708 ; Segment permissions: Read/Execute
.text:00006708 _text           segment para public 'CODE' use32
.text:00006708                 assume cs:_text
.text:00006708                 ;org 6708h
.text:00006708 ; COMDAT (pick any)
.text:00006708                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006708
.text:00006708 ; =============== S U B R O U T I N E =======================================
.text:00006708
.text:00006708 ; Attributes: bp-based frame
.text:00006708
.text:00006708 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00006708                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:00006708 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NCoderMixer2::CCoder::CCoder(void)+51p
.text:00006708
.text:00006708 var_4           = dword ptr -4
.text:00006708
.text:00006708                 push    ebp
.text:00006709                 mov     ebp, esp
.text:0000670B                 push    ecx
.text:0000670C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006713                 mov     [ebp+var_4], ecx
.text:00006716                 mov     eax, [ebp+var_4]
.text:00006719                 mov     dword ptr [eax], 0
.text:0000671F                 mov     ecx, [ebp+var_4]
.text:00006722                 mov     dword ptr [ecx+4], 0
.text:00006729                 mov     edx, [ebp+var_4]
.text:0000672C                 mov     dword ptr [edx+8], 0
.text:00006733                 mov     eax, [ebp+var_4]
.text:00006736                 mov     esp, ebp
.text:00006738                 pop     ebp
.text:00006739                 retn
.text:00006739 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00006739
.text:00006739 ; ---------------------------------------------------------------------------
.text:0000673A                 align 4
.text:0000673A _text           ends
.text:0000673A
.text:0000673C ; ===========================================================================
.text:0000673C
.text:0000673C ; Segment type: Pure code
.text:0000673C ; Segment permissions: Read/Execute
.text:0000673C _text           segment para public 'CODE' use32
.text:0000673C                 assume cs:_text
.text:0000673C                 ;org 673Ch
.text:0000673C ; COMDAT (pick any)
.text:0000673C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000673C
.text:0000673C ; =============== S U B R O U T I N E =======================================
.text:0000673C
.text:0000673C ; Attributes: bp-based frame
.text:0000673C
.text:0000673C ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000673C                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:0000673C ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0CCoder@NCoderMixer2@@QAE@XZ$2+6j
.text:0000673C                                         ; NCoderMixer2::CCoder::~CCoder(void)+49p ...
.text:0000673C
.text:0000673C var_8           = dword ptr -8
.text:0000673C var_4           = dword ptr -4
.text:0000673C
.text:0000673C                 push    ebp
.text:0000673D                 mov     ebp, esp
.text:0000673F                 sub     esp, 8
.text:00006742                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006749                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006750                 mov     [ebp+var_4], ecx
.text:00006753                 mov     eax, [ebp+var_4]
.text:00006756                 mov     ecx, [eax]
.text:00006758                 mov     [ebp+var_8], ecx
.text:0000675B                 mov     edx, [ebp+var_8]
.text:0000675E                 push    edx             ; void *
.text:0000675F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006764                 add     esp, 4
.text:00006767                 add     esp, 8
.text:0000676A                 cmp     ebp, esp
.text:0000676C                 call    __RTC_CheckEsp
.text:00006771                 mov     esp, ebp
.text:00006773                 pop     ebp
.text:00006774                 retn
.text:00006774 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00006774
.text:00006774 ; ---------------------------------------------------------------------------
.text:00006775                 align 4
.text:00006775 _text           ends
.text:00006775
.text:00006778 ; ===========================================================================
.text:00006778
.text:00006778 ; Segment type: Pure code
.text:00006778 ; Segment permissions: Read/Execute
.text:00006778 _text           segment para public 'CODE' use32
.text:00006778                 assume cs:_text
.text:00006778                 ;org 6778h
.text:00006778 ; COMDAT (pick any)
.text:00006778                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006778
.text:00006778 ; =============== S U B R O U T I N E =======================================
.text:00006778
.text:00006778 ; Attributes: bp-based frame
.text:00006778
.text:00006778 ; public: __thiscall CRecordVector<unsigned __int64 const *>::CRecordVector<unsigned __int64 const *>(void)
.text:00006778                 public ??0?$CRecordVector@PB_K@@QAE@XZ
.text:00006778 ??0?$CRecordVector@PB_K@@QAE@XZ proc near
.text:00006778                                         ; CODE XREF: NCoderMixer2::CCoder::CCoder(void)+60p
.text:00006778
.text:00006778 var_4           = dword ptr -4
.text:00006778
.text:00006778                 push    ebp
.text:00006779                 mov     ebp, esp
.text:0000677B                 push    ecx
.text:0000677C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006783                 mov     [ebp+var_4], ecx
.text:00006786                 mov     eax, [ebp+var_4]
.text:00006789                 mov     dword ptr [eax], 0
.text:0000678F                 mov     ecx, [ebp+var_4]
.text:00006792                 mov     dword ptr [ecx+4], 0
.text:00006799                 mov     edx, [ebp+var_4]
.text:0000679C                 mov     dword ptr [edx+8], 0
.text:000067A3                 mov     eax, [ebp+var_4]
.text:000067A6                 mov     esp, ebp
.text:000067A8                 pop     ebp
.text:000067A9                 retn
.text:000067A9 ??0?$CRecordVector@PB_K@@QAE@XZ endp
.text:000067A9
.text:000067A9 ; ---------------------------------------------------------------------------
.text:000067AA                 align 4
.text:000067AA _text           ends
.text:000067AA
.text:000067AC ; ===========================================================================
.text:000067AC
.text:000067AC ; Segment type: Pure code
.text:000067AC ; Segment permissions: Read/Execute
.text:000067AC _text           segment para public 'CODE' use32
.text:000067AC                 assume cs:_text
.text:000067AC                 ;org 67ACh
.text:000067AC ; COMDAT (pick any)
.text:000067AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000067AC
.text:000067AC ; =============== S U B R O U T I N E =======================================
.text:000067AC
.text:000067AC ; Attributes: bp-based frame
.text:000067AC
.text:000067AC ; public: __thiscall CObjectVector<struct NCoderMixer2::CCoderST>::~CObjectVector<struct NCoderMixer2::CCoderST>(void)
.text:000067AC                 public ??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
.text:000067AC ??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ proc near
.text:000067AC                                         ; CODE XREF: NCoderMixer2::CMixerST::~CMixerST(void)+5Cp
.text:000067AC                                         ; __unwindfunclet$??0CMixerST@NCoderMixer2@@QAE@_N@Z$1+6j ...
.text:000067AC
.text:000067AC var_20          = dword ptr -20h
.text:000067AC var_1C          = dword ptr -1Ch
.text:000067AC var_18          = dword ptr -18h
.text:000067AC var_14          = dword ptr -14h
.text:000067AC var_10          = dword ptr -10h
.text:000067AC var_C           = dword ptr -0Ch
.text:000067AC var_4           = dword ptr -4
.text:000067AC
.text:000067AC                 push    ebp
.text:000067AD                 mov     ebp, esp
.text:000067AF                 push    0FFFFFFFFh
.text:000067B1                 push    offset __ehhandler$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
.text:000067B6                 mov     eax, large fs:0
.text:000067BC                 push    eax
.text:000067BD                 sub     esp, 14h
.text:000067C0                 mov     eax, 0CCCCCCCCh
.text:000067C5                 mov     [ebp+var_20], eax
.text:000067C8                 mov     [ebp+var_1C], eax
.text:000067CB                 mov     [ebp+var_18], eax
.text:000067CE                 mov     [ebp+var_14], eax
.text:000067D1                 mov     [ebp+var_10], eax
.text:000067D4                 mov     eax, dword ptr ds:___security_cookie
.text:000067D9                 xor     eax, ebp
.text:000067DB                 push    eax
.text:000067DC                 lea     eax, [ebp+var_C]
.text:000067DF                 mov     large fs:0, eax
.text:000067E5                 mov     [ebp+var_10], ecx
.text:000067E8                 mov     [ebp+var_4], 0
.text:000067EF                 mov     ecx, [ebp+var_10]
.text:000067F2                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000067F7                 mov     [ebp+var_14], eax
.text:000067FA
.text:000067FA loc_67FA:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void):loc_683Cj
.text:000067FA                 cmp     [ebp+var_14], 0
.text:000067FE                 jz      short loc_683E
.text:00006800                 mov     eax, [ebp+var_14]
.text:00006803                 sub     eax, 1
.text:00006806                 mov     [ebp+var_14], eax
.text:00006809                 mov     ecx, [ebp+var_14]
.text:0000680C                 push    ecx
.text:0000680D                 mov     ecx, [ebp+var_10]
.text:00006810                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006815                 mov     edx, [eax]
.text:00006817                 mov     [ebp+var_1C], edx
.text:0000681A                 mov     eax, [ebp+var_1C]
.text:0000681D                 mov     [ebp+var_18], eax
.text:00006820                 cmp     [ebp+var_18], 0
.text:00006824                 jz      short loc_6835
.text:00006826                 push    1
.text:00006828                 mov     ecx, [ebp+var_18]
.text:0000682B                 call    ??_GCCoderST@NCoderMixer2@@QAEPAXI@Z ; NCoderMixer2::CCoderST::`scalar deleting destructor'(uint)
.text:00006830                 mov     [ebp+var_20], eax
.text:00006833                 jmp     short loc_683C
.text:00006835 ; ---------------------------------------------------------------------------
.text:00006835
.text:00006835 loc_6835:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)+78j
.text:00006835                 mov     [ebp+var_20], 0
.text:0000683C
.text:0000683C loc_683C:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)+87j
.text:0000683C                 jmp     short loc_67FA
.text:0000683E ; ---------------------------------------------------------------------------
.text:0000683E
.text:0000683E loc_683E:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)+52j
.text:0000683E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006845                 mov     ecx, [ebp+var_10]
.text:00006848                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000684D                 mov     ecx, [ebp+var_C]
.text:00006850                 mov     large fs:0, ecx
.text:00006857                 pop     ecx
.text:00006858                 add     esp, 20h
.text:0000685B                 cmp     ebp, esp
.text:0000685D                 call    __RTC_CheckEsp
.text:00006862                 mov     esp, ebp
.text:00006864                 pop     ebp
.text:00006865                 retn
.text:00006865 ??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ endp
.text:00006865
.text:00006865 ; ---------------------------------------------------------------------------
.text:00006866                 align 4
.text:00006866 _text           ends
.text:00006866
.text$x:00006868 ; ===========================================================================
.text$x:00006868
.text$x:00006868 ; Segment type: Pure code
.text$x:00006868 ; Segment permissions: Read/Execute
.text$x:00006868 _text$x         segment para public 'CODE' use32
.text$x:00006868                 assume cs:_text$x
.text$x:00006868                 ;org 6868h
.text$x:00006868 ; COMDAT (pick associative to section at 67AC)
.text$x:00006868                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006868
.text$x:00006868 ; =============== S U B R O U T I N E =======================================
.text$x:00006868
.text$x:00006868
.text$x:00006868 __unwindfunclet$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ$0 proc near
.text$x:00006868                                         ; DATA XREF: .xdata$x:00006890o
.text$x:00006868                 mov     ecx, [ebp-10h]
.text$x:0000686B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000686B __unwindfunclet$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ$0 endp
.text$x:0000686B
.text$x:00006870
.text$x:00006870 ; =============== S U B R O U T I N E =======================================
.text$x:00006870
.text$x:00006870
.text$x:00006870 __ehhandler$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ proc near
.text$x:00006870                                         ; DATA XREF: CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)+5o
.text$x:00006870
.text$x:00006870 arg_4           = dword ptr  8
.text$x:00006870
.text$x:00006870                 mov     edx, [esp+arg_4]
.text$x:00006874                 lea     eax, [edx+0Ch]
.text$x:00006877                 mov     ecx, [edx-18h]
.text$x:0000687A                 xor     ecx, eax
.text$x:0000687C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006881                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
.text$x:00006886                 jmp     ___CxxFrameHandler3
.text$x:00006886 __ehhandler$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ endp
.text$x:00006886
.text$x:00006886 ; ---------------------------------------------------------------------------
.text$x:0000688B                 align 4
.text$x:0000688B _text$x         ends
.text$x:0000688B
.xdata$x:0000688C ; ===========================================================================
.xdata$x:0000688C
.xdata$x:0000688C ; Segment type: Pure data
.xdata$x:0000688C ; Segment permissions: Read
.xdata$x:0000688C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000688C                 assume cs:_xdata$x
.xdata$x:0000688C                 ;org 688Ch
.xdata$x:0000688C ; COMDAT (pick associative to section at 67AC)
.xdata$x:0000688C __unwindtable$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ db 0FFh
.xdata$x:0000688C                                         ; DATA XREF: .xdata$x:0000689Co
.xdata$x:0000688D                 db 0FFh
.xdata$x:0000688E                 db 0FFh
.xdata$x:0000688F                 db 0FFh
.xdata$x:00006890                 dd offset __unwindfunclet$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ$0
.xdata$x:00006894 __ehfuncinfo$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ db  22h ; "
.xdata$x:00006894                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ+11o
.xdata$x:00006895                 db    5
.xdata$x:00006896                 db  93h ; ô
.xdata$x:00006897                 db  19h
.xdata$x:00006898                 db    1
.xdata$x:00006899                 db    0
.xdata$x:0000689A                 db    0
.xdata$x:0000689B                 db    0
.xdata$x:0000689C                 dd offset __unwindtable$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ
.xdata$x:000068A0                 db    0
.xdata$x:000068A1                 db    0
.xdata$x:000068A2                 db    0
.xdata$x:000068A3                 db    0
.xdata$x:000068A4                 db    0
.xdata$x:000068A5                 db    0
.xdata$x:000068A6                 db    0
.xdata$x:000068A7                 db    0
.xdata$x:000068A8                 db    0
.xdata$x:000068A9                 db    0
.xdata$x:000068AA                 db    0
.xdata$x:000068AB                 db    0
.xdata$x:000068AC                 db    0
.xdata$x:000068AD                 db    0
.xdata$x:000068AE                 db    0
.xdata$x:000068AF                 db    0
.xdata$x:000068B0                 db    0
.xdata$x:000068B1                 db    0
.xdata$x:000068B2                 db    0
.xdata$x:000068B3                 db    0
.xdata$x:000068B4                 db    1
.xdata$x:000068B5                 db    0
.xdata$x:000068B6                 db    0
.xdata$x:000068B7                 db    0
.xdata$x:000068B7 _xdata$x        ends
.xdata$x:000068B7
.text:000068B8 ; ===========================================================================
.text:000068B8
.text:000068B8 ; Segment type: Pure code
.text:000068B8 ; Segment permissions: Read/Execute
.text:000068B8 _text           segment para public 'CODE' use32
.text:000068B8                 assume cs:_text
.text:000068B8                 ;org 68B8h
.text:000068B8 ; COMDAT (pick any)
.text:000068B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000068B8
.text:000068B8 ; =============== S U B R O U T I N E =======================================
.text:000068B8
.text:000068B8 ; Attributes: bp-based frame
.text:000068B8
.text:000068B8 ; public: unsigned int __thiscall CObjectVector<struct NCoderMixer2::CStBinderStream>::Size(void)const
.text:000068B8                 public ?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ
.text:000068B8 ?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ proc near
.text:000068B8                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+15Cp
.text:000068B8                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+385p ...
.text:000068B8
.text:000068B8 var_4           = dword ptr -4
.text:000068B8
.text:000068B8                 push    ebp
.text:000068B9                 mov     ebp, esp
.text:000068BB                 push    ecx
.text:000068BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068C3                 mov     [ebp+var_4], ecx
.text:000068C6                 mov     ecx, [ebp+var_4]
.text:000068C9                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000068CE                 add     esp, 4
.text:000068D1                 cmp     ebp, esp
.text:000068D3                 call    __RTC_CheckEsp
.text:000068D8                 mov     esp, ebp
.text:000068DA                 pop     ebp
.text:000068DB                 retn
.text:000068DB ?Size@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEIXZ endp
.text:000068DB
.text:000068DB _text           ends
.text:000068DB
.text:000068DC ; ===========================================================================
.text:000068DC
.text:000068DC ; Segment type: Pure code
.text:000068DC ; Segment permissions: Read/Execute
.text:000068DC _text           segment para public 'CODE' use32
.text:000068DC                 assume cs:_text
.text:000068DC                 ;org 68DCh
.text:000068DC ; COMDAT (pick any)
.text:000068DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000068DC
.text:000068DC ; =============== S U B R O U T I N E =======================================
.text:000068DC
.text:000068DC ; Attributes: bp-based frame
.text:000068DC
.text:000068DC ; public: __thiscall CObjectVector<struct NCoderMixer2::CStBinderStream>::CObjectVector<struct NCoderMixer2::CStBinderStream>(void)
.text:000068DC                 public ??0?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
.text:000068DC ??0?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ proc near
.text:000068DC                                         ; CODE XREF: NCoderMixer2::CMixerST::CMixerST(bool)+7Fp
.text:000068DC
.text:000068DC var_4           = dword ptr -4
.text:000068DC
.text:000068DC                 push    ebp
.text:000068DD                 mov     ebp, esp
.text:000068DF                 push    ecx
.text:000068E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068E7                 mov     [ebp+var_4], ecx
.text:000068EA                 mov     ecx, [ebp+var_4]
.text:000068ED                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000068F2                 mov     eax, [ebp+var_4]
.text:000068F5                 add     esp, 4
.text:000068F8                 cmp     ebp, esp
.text:000068FA                 call    __RTC_CheckEsp
.text:000068FF                 mov     esp, ebp
.text:00006901                 pop     ebp
.text:00006902                 retn
.text:00006902 ??0?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ endp
.text:00006902
.text:00006902 ; ---------------------------------------------------------------------------
.text:00006903                 align 4
.text:00006903 _text           ends
.text:00006903
.text:00006904 ; ===========================================================================
.text:00006904
.text:00006904 ; Segment type: Pure code
.text:00006904 ; Segment permissions: Read/Execute
.text:00006904 _text           segment para public 'CODE' use32
.text:00006904                 assume cs:_text
.text:00006904                 ;org 6904h
.text:00006904 ; COMDAT (pick any)
.text:00006904                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006904
.text:00006904 ; =============== S U B R O U T I N E =======================================
.text:00006904
.text:00006904 ; Attributes: bp-based frame
.text:00006904
.text:00006904 ; public: struct NCoderMixer2::CStBinderStream const & __thiscall CObjectVector<struct NCoderMixer2::CStBinderStream>::operator[](unsigned int)const
.text:00006904                 public ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEABUCStBinderStream@NCoderMixer2@@I@Z
.text:00006904 ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEABUCStBinderStream@NCoderMixer2@@I@Z proc near
.text:00006904                                         ; CODE XREF: NCoderMixer2::CMixerST::GetBondStreamSize(uint)+21p
.text:00006904
.text:00006904 var_4           = dword ptr -4
.text:00006904 arg_0           = dword ptr  8
.text:00006904
.text:00006904                 push    ebp
.text:00006905                 mov     ebp, esp
.text:00006907                 push    ecx
.text:00006908                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000690F                 mov     [ebp+var_4], ecx
.text:00006912                 mov     eax, [ebp+arg_0]
.text:00006915                 push    eax
.text:00006916                 mov     ecx, [ebp+var_4]
.text:00006919                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000691E                 mov     eax, [eax]
.text:00006920                 add     esp, 4
.text:00006923                 cmp     ebp, esp
.text:00006925                 call    __RTC_CheckEsp
.text:0000692A                 mov     esp, ebp
.text:0000692C                 pop     ebp
.text:0000692D                 retn    4
.text:0000692D ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QBEABUCStBinderStream@NCoderMixer2@@I@Z endp
.text:0000692D
.text:0000692D _text           ends
.text:0000692D
.text:00006930 ; ===========================================================================
.text:00006930
.text:00006930 ; Segment type: Pure code
.text:00006930 ; Segment permissions: Read/Execute
.text:00006930 _text           segment para public 'CODE' use32
.text:00006930                 assume cs:_text
.text:00006930                 ;org 6930h
.text:00006930 ; COMDAT (pick any)
.text:00006930                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006930
.text:00006930 ; =============== S U B R O U T I N E =======================================
.text:00006930
.text:00006930 ; Attributes: bp-based frame
.text:00006930
.text:00006930 ; public: struct NCoderMixer2::CStBinderStream & __thiscall CObjectVector<struct NCoderMixer2::CStBinderStream>::operator[](unsigned int)
.text:00006930                 public ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z
.text:00006930 ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z proc near
.text:00006930                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+17Dp
.text:00006930                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+3A6p ...
.text:00006930
.text:00006930 var_4           = dword ptr -4
.text:00006930 arg_0           = dword ptr  8
.text:00006930
.text:00006930                 push    ebp
.text:00006931                 mov     ebp, esp
.text:00006933                 push    ecx
.text:00006934                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000693B                 mov     [ebp+var_4], ecx
.text:0000693E                 mov     eax, [ebp+arg_0]
.text:00006941                 push    eax
.text:00006942                 mov     ecx, [ebp+var_4]
.text:00006945                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000694A                 mov     eax, [eax]
.text:0000694C                 add     esp, 4
.text:0000694F                 cmp     ebp, esp
.text:00006951                 call    __RTC_CheckEsp
.text:00006956                 mov     esp, ebp
.text:00006958                 pop     ebp
.text:00006959                 retn    4
.text:00006959 ??A?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@I@Z endp
.text:00006959
.text:00006959 _text           ends
.text:00006959
.text:0000695C ; ===========================================================================
.text:0000695C
.text:0000695C ; Segment type: Pure code
.text:0000695C ; Segment permissions: Read/Execute
.text:0000695C _text           segment para public 'CODE' use32
.text:0000695C                 assume cs:_text
.text:0000695C                 ;org 695Ch
.text:0000695C ; COMDAT (pick any)
.text:0000695C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000695C
.text:0000695C ; =============== S U B R O U T I N E =======================================
.text:0000695C
.text:0000695C ; Attributes: bp-based frame
.text:0000695C
.text:0000695C ; public: struct NCoderMixer2::CStBinderStream & __thiscall CObjectVector<struct NCoderMixer2::CStBinderStream>::AddNew(void)
.text:0000695C                 public ?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ
.text:0000695C ?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ proc near
.text:0000695C                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+16Cp
.text:0000695C                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+395p
.text:0000695C
.text:0000695C var_20          = dword ptr -20h
.text:0000695C var_1C          = dword ptr -1Ch
.text:0000695C var_18          = dword ptr -18h
.text:0000695C var_14          = dword ptr -14h
.text:0000695C var_10          = dword ptr -10h
.text:0000695C var_C           = dword ptr -0Ch
.text:0000695C var_4           = dword ptr -4
.text:0000695C
.text:0000695C                 push    ebp
.text:0000695D                 mov     ebp, esp
.text:0000695F                 push    0FFFFFFFFh
.text:00006961                 push    offset __ehhandler$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ
.text:00006966                 mov     eax, large fs:0
.text:0000696C                 push    eax
.text:0000696D                 sub     esp, 14h
.text:00006970                 mov     eax, 0CCCCCCCCh
.text:00006975                 mov     [ebp+var_20], eax
.text:00006978                 mov     [ebp+var_1C], eax
.text:0000697B                 mov     [ebp+var_18], eax
.text:0000697E                 mov     [ebp+var_14], eax
.text:00006981                 mov     [ebp+var_10], eax
.text:00006984                 mov     eax, dword ptr ds:___security_cookie
.text:00006989                 xor     eax, ebp
.text:0000698B                 push    eax
.text:0000698C                 lea     eax, [ebp+var_C]
.text:0000698F                 mov     large fs:0, eax
.text:00006995                 mov     [ebp+var_10], ecx
.text:00006998                 push    0Ch             ; unsigned int
.text:0000699A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000699F                 add     esp, 4
.text:000069A2                 mov     [ebp+var_1C], eax
.text:000069A5                 mov     [ebp+var_4], 0
.text:000069AC                 cmp     [ebp+var_1C], 0
.text:000069B0                 jz      short loc_69BF
.text:000069B2                 mov     ecx, [ebp+var_1C] ; this
.text:000069B5                 call    ??0CStBinderStream@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CStBinderStream::CStBinderStream(void)
.text:000069BA                 mov     [ebp+var_20], eax
.text:000069BD                 jmp     short loc_69C6
.text:000069BF ; ---------------------------------------------------------------------------
.text:000069BF
.text:000069BF loc_69BF:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::AddNew(void)+54j
.text:000069BF                 mov     [ebp+var_20], 0
.text:000069C6
.text:000069C6 loc_69C6:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::AddNew(void)+61j
.text:000069C6                 mov     eax, [ebp+var_20]
.text:000069C9                 mov     [ebp+var_18], eax
.text:000069CC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000069D3                 mov     ecx, [ebp+var_18]
.text:000069D6                 mov     [ebp+var_14], ecx
.text:000069D9                 mov     edx, [ebp+var_14]
.text:000069DC                 push    edx
.text:000069DD                 mov     ecx, [ebp+var_10]
.text:000069E0                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000069E5                 mov     eax, [ebp+var_14]
.text:000069E8                 mov     ecx, [ebp+var_C]
.text:000069EB                 mov     large fs:0, ecx
.text:000069F2                 pop     ecx
.text:000069F3                 add     esp, 20h
.text:000069F6                 cmp     ebp, esp
.text:000069F8                 call    __RTC_CheckEsp
.text:000069FD                 mov     esp, ebp
.text:000069FF                 pop     ebp
.text:00006A00                 retn
.text:00006A00 ?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ endp
.text:00006A00
.text:00006A00 ; ---------------------------------------------------------------------------
.text:00006A01                 align 4
.text:00006A01 _text           ends
.text:00006A01
.text$x:00006A04 ; ===========================================================================
.text$x:00006A04
.text$x:00006A04 ; Segment type: Pure code
.text$x:00006A04 ; Segment permissions: Read/Execute
.text$x:00006A04 _text$x         segment para public 'CODE' use32
.text$x:00006A04                 assume cs:_text$x
.text$x:00006A04                 ;org 6A04h
.text$x:00006A04 ; COMDAT (pick associative to section at 695C)
.text$x:00006A04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006A04
.text$x:00006A04 ; =============== S U B R O U T I N E =======================================
.text$x:00006A04
.text$x:00006A04
.text$x:00006A04 __unwindfunclet$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ$0 proc near
.text$x:00006A04                                         ; DATA XREF: .xdata$x:00006A30o
.text$x:00006A04                 mov     eax, [ebp-1Ch]
.text$x:00006A07                 push    eax             ; void *
.text$x:00006A08                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006A0D                 pop     ecx
.text$x:00006A0E                 retn
.text$x:00006A0E __unwindfunclet$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ$0 endp
.text$x:00006A0E
.text$x:00006A0F
.text$x:00006A0F ; =============== S U B R O U T I N E =======================================
.text$x:00006A0F
.text$x:00006A0F
.text$x:00006A0F __ehhandler$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ proc near
.text$x:00006A0F                                         ; DATA XREF: CObjectVector<NCoderMixer2::CStBinderStream>::AddNew(void)+5o
.text$x:00006A0F
.text$x:00006A0F arg_4           = dword ptr  8
.text$x:00006A0F
.text$x:00006A0F                 mov     edx, [esp+arg_4]
.text$x:00006A13                 lea     eax, [edx+0Ch]
.text$x:00006A16                 mov     ecx, [edx-18h]
.text$x:00006A19                 xor     ecx, eax
.text$x:00006A1B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A20                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ
.text$x:00006A25                 jmp     ___CxxFrameHandler3
.text$x:00006A25 __ehhandler$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ endp
.text$x:00006A25
.text$x:00006A25 ; ---------------------------------------------------------------------------
.text$x:00006A2A                 align 4
.text$x:00006A2A _text$x         ends
.text$x:00006A2A
.xdata$x:00006A2C ; ===========================================================================
.xdata$x:00006A2C
.xdata$x:00006A2C ; Segment type: Pure data
.xdata$x:00006A2C ; Segment permissions: Read
.xdata$x:00006A2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006A2C                 assume cs:_xdata$x
.xdata$x:00006A2C                 ;org 6A2Ch
.xdata$x:00006A2C ; COMDAT (pick associative to section at 695C)
.xdata$x:00006A2C __unwindtable$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ db 0FFh
.xdata$x:00006A2C                                         ; DATA XREF: .xdata$x:00006A3Co
.xdata$x:00006A2D                 db 0FFh
.xdata$x:00006A2E                 db 0FFh
.xdata$x:00006A2F                 db 0FFh
.xdata$x:00006A30                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ$0
.xdata$x:00006A34 __ehfuncinfo$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ db  22h ; "
.xdata$x:00006A34                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ+11o
.xdata$x:00006A35                 db    5
.xdata$x:00006A36                 db  93h ; ô
.xdata$x:00006A37                 db  19h
.xdata$x:00006A38                 db    1
.xdata$x:00006A39                 db    0
.xdata$x:00006A3A                 db    0
.xdata$x:00006A3B                 db    0
.xdata$x:00006A3C                 dd offset __unwindtable$?AddNew@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEAAUCStBinderStream@NCoderMixer2@@XZ
.xdata$x:00006A40                 db    0
.xdata$x:00006A41                 db    0
.xdata$x:00006A42                 db    0
.xdata$x:00006A43                 db    0
.xdata$x:00006A44                 db    0
.xdata$x:00006A45                 db    0
.xdata$x:00006A46                 db    0
.xdata$x:00006A47                 db    0
.xdata$x:00006A48                 db    0
.xdata$x:00006A49                 db    0
.xdata$x:00006A4A                 db    0
.xdata$x:00006A4B                 db    0
.xdata$x:00006A4C                 db    0
.xdata$x:00006A4D                 db    0
.xdata$x:00006A4E                 db    0
.xdata$x:00006A4F                 db    0
.xdata$x:00006A50                 db    0
.xdata$x:00006A51                 db    0
.xdata$x:00006A52                 db    0
.xdata$x:00006A53                 db    0
.xdata$x:00006A54                 db    1
.xdata$x:00006A55                 db    0
.xdata$x:00006A56                 db    0
.xdata$x:00006A57                 db    0
.xdata$x:00006A57 _xdata$x        ends
.xdata$x:00006A57
.text:00006A58 ; ===========================================================================
.text:00006A58
.text:00006A58 ; Segment type: Pure code
.text:00006A58 ; Segment permissions: Read/Execute
.text:00006A58 _text           segment para public 'CODE' use32
.text:00006A58                 assume cs:_text
.text:00006A58                 ;org 6A58h
.text:00006A58 ; COMDAT (pick any)
.text:00006A58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006A58
.text:00006A58 ; =============== S U B R O U T I N E =======================================
.text:00006A58
.text:00006A58 ; Attributes: bp-based frame
.text:00006A58
.text:00006A58 ; _DWORD __thiscall NCoderMixer2::CStBinderStream::CStBinderStream(NCoderMixer2::CStBinderStream *__hidden this)
.text:00006A58                 public ??0CStBinderStream@NCoderMixer2@@QAE@XZ
.text:00006A58 ??0CStBinderStream@NCoderMixer2@@QAE@XZ proc near
.text:00006A58                                         ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::AddNew(void)+59p
.text:00006A58
.text:00006A58 var_4           = dword ptr -4
.text:00006A58
.text:00006A58                 push    ebp
.text:00006A59                 mov     ebp, esp
.text:00006A5B                 push    ecx
.text:00006A5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A63                 mov     [ebp+var_4], ecx
.text:00006A66                 mov     eax, [ebp+var_4]
.text:00006A69                 mov     dword ptr [eax], 0
.text:00006A6F                 mov     ecx, [ebp+var_4]
.text:00006A72                 mov     dword ptr [ecx+4], 0
.text:00006A79                 mov     ecx, [ebp+var_4]
.text:00006A7C                 add     ecx, 8
.text:00006A7F                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(void)
.text:00006A84                 mov     eax, [ebp+var_4]
.text:00006A87                 add     esp, 4
.text:00006A8A                 cmp     ebp, esp
.text:00006A8C                 call    __RTC_CheckEsp
.text:00006A91                 mov     esp, ebp
.text:00006A93                 pop     ebp
.text:00006A94                 retn
.text:00006A94 ??0CStBinderStream@NCoderMixer2@@QAE@XZ endp
.text:00006A94
.text:00006A94 ; ---------------------------------------------------------------------------
.text:00006A95                 align 4
.text:00006A95 _text           ends
.text:00006A95
.text:00006A98 ; ===========================================================================
.text:00006A98
.text:00006A98 ; Segment type: Pure code
.text:00006A98 ; Segment permissions: Read/Execute
.text:00006A98 _text           segment para public 'CODE' use32
.text:00006A98                 assume cs:_text
.text:00006A98                 ;org 6A98h
.text:00006A98 ; COMDAT (pick any)
.text:00006A98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006A98
.text:00006A98 ; =============== S U B R O U T I N E =======================================
.text:00006A98
.text:00006A98 ; Attributes: bp-based frame
.text:00006A98
.text:00006A98 ; public: __thiscall CMyComPtr<struct IUnknown>::CMyComPtr<struct IUnknown>(void)
.text:00006A98                 public ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00006A98 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00006A98                                         ; CODE XREF: NCoderMixer2::CStBinderStream::CStBinderStream(void)+27p
.text:00006A98
.text:00006A98 var_4           = dword ptr -4
.text:00006A98
.text:00006A98                 push    ebp
.text:00006A99                 mov     ebp, esp
.text:00006A9B                 push    ecx
.text:00006A9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AA3                 mov     [ebp+var_4], ecx
.text:00006AA6                 mov     eax, [ebp+var_4]
.text:00006AA9                 mov     dword ptr [eax], 0
.text:00006AAF                 mov     eax, [ebp+var_4]
.text:00006AB2                 mov     esp, ebp
.text:00006AB4                 pop     ebp
.text:00006AB5                 retn
.text:00006AB5 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00006AB5
.text:00006AB5 ; ---------------------------------------------------------------------------
.text:00006AB6                 align 4
.text:00006AB6 _text           ends
.text:00006AB6
.text:00006AB8 ; ===========================================================================
.text:00006AB8
.text:00006AB8 ; Segment type: Pure code
.text:00006AB8 ; Segment permissions: Read/Execute
.text:00006AB8 _text           segment para public 'CODE' use32
.text:00006AB8                 assume cs:_text
.text:00006AB8                 ;org 6AB8h
.text:00006AB8 ; COMDAT (pick any)
.text:00006AB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006AB8
.text:00006AB8 ; =============== S U B R O U T I N E =======================================
.text:00006AB8
.text:00006AB8 ; Attributes: bp-based frame
.text:00006AB8
.text:00006AB8 ; public: __thiscall CObjectVector<struct NCoderMixer2::CStBinderStream>::~CObjectVector<struct NCoderMixer2::CStBinderStream>(void)
.text:00006AB8                 public ??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
.text:00006AB8 ??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ proc near
.text:00006AB8                                         ; CODE XREF: NCoderMixer2::CMixerST::~CMixerST(void)+4Dp
.text:00006AB8
.text:00006AB8 var_20          = dword ptr -20h
.text:00006AB8 var_1C          = dword ptr -1Ch
.text:00006AB8 var_18          = dword ptr -18h
.text:00006AB8 var_14          = dword ptr -14h
.text:00006AB8 var_10          = dword ptr -10h
.text:00006AB8 var_C           = dword ptr -0Ch
.text:00006AB8 var_4           = dword ptr -4
.text:00006AB8
.text:00006AB8                 push    ebp
.text:00006AB9                 mov     ebp, esp
.text:00006ABB                 push    0FFFFFFFFh
.text:00006ABD                 push    offset __ehhandler$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
.text:00006AC2                 mov     eax, large fs:0
.text:00006AC8                 push    eax
.text:00006AC9                 sub     esp, 14h
.text:00006ACC                 mov     eax, 0CCCCCCCCh
.text:00006AD1                 mov     [ebp+var_20], eax
.text:00006AD4                 mov     [ebp+var_1C], eax
.text:00006AD7                 mov     [ebp+var_18], eax
.text:00006ADA                 mov     [ebp+var_14], eax
.text:00006ADD                 mov     [ebp+var_10], eax
.text:00006AE0                 mov     eax, dword ptr ds:___security_cookie
.text:00006AE5                 xor     eax, ebp
.text:00006AE7                 push    eax
.text:00006AE8                 lea     eax, [ebp+var_C]
.text:00006AEB                 mov     large fs:0, eax
.text:00006AF1                 mov     [ebp+var_10], ecx
.text:00006AF4                 mov     [ebp+var_4], 0
.text:00006AFB                 mov     ecx, [ebp+var_10]
.text:00006AFE                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006B03                 mov     [ebp+var_14], eax
.text:00006B06
.text:00006B06 loc_6B06:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>(void):loc_6B48j
.text:00006B06                 cmp     [ebp+var_14], 0
.text:00006B0A                 jz      short loc_6B4A
.text:00006B0C                 mov     eax, [ebp+var_14]
.text:00006B0F                 sub     eax, 1
.text:00006B12                 mov     [ebp+var_14], eax
.text:00006B15                 mov     ecx, [ebp+var_14]
.text:00006B18                 push    ecx
.text:00006B19                 mov     ecx, [ebp+var_10]
.text:00006B1C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006B21                 mov     edx, [eax]
.text:00006B23                 mov     [ebp+var_1C], edx
.text:00006B26                 mov     eax, [ebp+var_1C]
.text:00006B29                 mov     [ebp+var_18], eax
.text:00006B2C                 cmp     [ebp+var_18], 0
.text:00006B30                 jz      short loc_6B41
.text:00006B32                 push    1
.text:00006B34                 mov     ecx, [ebp+var_18]
.text:00006B37                 call    ??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z ; NCoderMixer2::CStBinderStream::`scalar deleting destructor'(uint)
.text:00006B3C                 mov     [ebp+var_20], eax
.text:00006B3F                 jmp     short loc_6B48
.text:00006B41 ; ---------------------------------------------------------------------------
.text:00006B41
.text:00006B41 loc_6B41:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>(void)+78j
.text:00006B41                 mov     [ebp+var_20], 0
.text:00006B48
.text:00006B48 loc_6B48:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>(void)+87j
.text:00006B48                 jmp     short loc_6B06
.text:00006B4A ; ---------------------------------------------------------------------------
.text:00006B4A
.text:00006B4A loc_6B4A:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>(void)+52j
.text:00006B4A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006B51                 mov     ecx, [ebp+var_10]
.text:00006B54                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006B59                 mov     ecx, [ebp+var_C]
.text:00006B5C                 mov     large fs:0, ecx
.text:00006B63                 pop     ecx
.text:00006B64                 add     esp, 20h
.text:00006B67                 cmp     ebp, esp
.text:00006B69                 call    __RTC_CheckEsp
.text:00006B6E                 mov     esp, ebp
.text:00006B70                 pop     ebp
.text:00006B71                 retn
.text:00006B71 ??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ endp
.text:00006B71
.text:00006B71 ; ---------------------------------------------------------------------------
.text:00006B72                 align 4
.text:00006B72 _text           ends
.text:00006B72
.text$x:00006B74 ; ===========================================================================
.text$x:00006B74
.text$x:00006B74 ; Segment type: Pure code
.text$x:00006B74 ; Segment permissions: Read/Execute
.text$x:00006B74 _text$x         segment para public 'CODE' use32
.text$x:00006B74                 assume cs:_text$x
.text$x:00006B74                 ;org 6B74h
.text$x:00006B74 ; COMDAT (pick associative to section at 6AB8)
.text$x:00006B74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006B74
.text$x:00006B74 ; =============== S U B R O U T I N E =======================================
.text$x:00006B74
.text$x:00006B74
.text$x:00006B74 __unwindfunclet$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ$0 proc near
.text$x:00006B74                                         ; DATA XREF: .xdata$x:00006B9Co
.text$x:00006B74                 mov     ecx, [ebp-10h]
.text$x:00006B77                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00006B77 __unwindfunclet$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ$0 endp
.text$x:00006B77
.text$x:00006B7C
.text$x:00006B7C ; =============== S U B R O U T I N E =======================================
.text$x:00006B7C
.text$x:00006B7C
.text$x:00006B7C __ehhandler$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ proc near
.text$x:00006B7C                                         ; DATA XREF: CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>(void)+5o
.text$x:00006B7C
.text$x:00006B7C arg_4           = dword ptr  8
.text$x:00006B7C
.text$x:00006B7C                 mov     edx, [esp+arg_4]
.text$x:00006B80                 lea     eax, [edx+0Ch]
.text$x:00006B83                 mov     ecx, [edx-18h]
.text$x:00006B86                 xor     ecx, eax
.text$x:00006B88                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006B8D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
.text$x:00006B92                 jmp     ___CxxFrameHandler3
.text$x:00006B92 __ehhandler$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ endp
.text$x:00006B92
.text$x:00006B92 ; ---------------------------------------------------------------------------
.text$x:00006B97                 align 4
.text$x:00006B97 _text$x         ends
.text$x:00006B97
.xdata$x:00006B98 ; ===========================================================================
.xdata$x:00006B98
.xdata$x:00006B98 ; Segment type: Pure data
.xdata$x:00006B98 ; Segment permissions: Read
.xdata$x:00006B98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006B98                 assume cs:_xdata$x
.xdata$x:00006B98                 ;org 6B98h
.xdata$x:00006B98 ; COMDAT (pick associative to section at 6AB8)
.xdata$x:00006B98 __unwindtable$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ db 0FFh
.xdata$x:00006B98                                         ; DATA XREF: .xdata$x:00006BA8o
.xdata$x:00006B99                 db 0FFh
.xdata$x:00006B9A                 db 0FFh
.xdata$x:00006B9B                 db 0FFh
.xdata$x:00006B9C                 dd offset __unwindfunclet$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ$0
.xdata$x:00006BA0 __ehfuncinfo$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ db  22h ; "
.xdata$x:00006BA0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ+11o
.xdata$x:00006BA1                 db    5
.xdata$x:00006BA2                 db  93h ; ô
.xdata$x:00006BA3                 db  19h
.xdata$x:00006BA4                 db    1
.xdata$x:00006BA5                 db    0
.xdata$x:00006BA6                 db    0
.xdata$x:00006BA7                 db    0
.xdata$x:00006BA8                 dd offset __unwindtable$??1?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAE@XZ
.xdata$x:00006BAC                 align 20h
.xdata$x:00006BC0                 db    1
.xdata$x:00006BC1                 db    0
.xdata$x:00006BC2                 db    0
.xdata$x:00006BC3                 db    0
.xdata$x:00006BC3 _xdata$x        ends
.xdata$x:00006BC3
.text:00006BC4 ; ===========================================================================
.text:00006BC4
.text:00006BC4 ; Segment type: Pure code
.text:00006BC4 ; Segment permissions: Read/Execute
.text:00006BC4 _text           segment para public 'CODE' use32
.text:00006BC4                 assume cs:_text
.text:00006BC4                 ;org 6BC4h
.text:00006BC4 ; COMDAT (pick any)
.text:00006BC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006BC4
.text:00006BC4 ; =============== S U B R O U T I N E =======================================
.text:00006BC4
.text:00006BC4 ; Attributes: bp-based frame
.text:00006BC4
.text:00006BC4 ; public: void __thiscall CObjectVector<struct NCoderMixer2::CStBinderStream>::Clear(void)
.text:00006BC4                 public ?Clear@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEXXZ
.text:00006BC4 ?Clear@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEXXZ proc near
.text:00006BC4                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+47p
.text:00006BC4
.text:00006BC4 var_14          = dword ptr -14h
.text:00006BC4 var_10          = dword ptr -10h
.text:00006BC4 var_C           = dword ptr -0Ch
.text:00006BC4 var_8           = dword ptr -8
.text:00006BC4 var_4           = dword ptr -4
.text:00006BC4
.text:00006BC4                 push    ebp
.text:00006BC5                 mov     ebp, esp
.text:00006BC7                 sub     esp, 14h
.text:00006BCA                 mov     eax, 0CCCCCCCCh
.text:00006BCF                 mov     [ebp+var_14], eax
.text:00006BD2                 mov     [ebp+var_10], eax
.text:00006BD5                 mov     [ebp+var_C], eax
.text:00006BD8                 mov     [ebp+var_8], eax
.text:00006BDB                 mov     [ebp+var_4], eax
.text:00006BDE                 mov     [ebp+var_4], ecx
.text:00006BE1                 mov     ecx, [ebp+var_4]
.text:00006BE4                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006BE9                 mov     [ebp+var_8], eax
.text:00006BEC
.text:00006BEC loc_6BEC:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::Clear(void):loc_6C2Ej
.text:00006BEC                 cmp     [ebp+var_8], 0
.text:00006BF0                 jz      short loc_6C30
.text:00006BF2                 mov     eax, [ebp+var_8]
.text:00006BF5                 sub     eax, 1
.text:00006BF8                 mov     [ebp+var_8], eax
.text:00006BFB                 mov     ecx, [ebp+var_8]
.text:00006BFE                 push    ecx
.text:00006BFF                 mov     ecx, [ebp+var_4]
.text:00006C02                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006C07                 mov     edx, [eax]
.text:00006C09                 mov     [ebp+var_10], edx
.text:00006C0C                 mov     eax, [ebp+var_10]
.text:00006C0F                 mov     [ebp+var_C], eax
.text:00006C12                 cmp     [ebp+var_C], 0
.text:00006C16                 jz      short loc_6C27
.text:00006C18                 push    1
.text:00006C1A                 mov     ecx, [ebp+var_C]
.text:00006C1D                 call    ??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z ; NCoderMixer2::CStBinderStream::`scalar deleting destructor'(uint)
.text:00006C22                 mov     [ebp+var_14], eax
.text:00006C25                 jmp     short loc_6C2E
.text:00006C27 ; ---------------------------------------------------------------------------
.text:00006C27
.text:00006C27 loc_6C27:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::Clear(void)+52j
.text:00006C27                 mov     [ebp+var_14], 0
.text:00006C2E
.text:00006C2E loc_6C2E:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::Clear(void)+61j
.text:00006C2E                 jmp     short loc_6BEC
.text:00006C30 ; ---------------------------------------------------------------------------
.text:00006C30
.text:00006C30 loc_6C30:                               ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::Clear(void)+2Cj
.text:00006C30                 mov     ecx, [ebp+var_4]
.text:00006C33                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00006C38                 add     esp, 14h
.text:00006C3B                 cmp     ebp, esp
.text:00006C3D                 call    __RTC_CheckEsp
.text:00006C42                 mov     esp, ebp
.text:00006C44                 pop     ebp
.text:00006C45                 retn
.text:00006C45 ?Clear@?$CObjectVector@UCStBinderStream@NCoderMixer2@@@@QAEXXZ endp
.text:00006C45
.text:00006C45 ; ---------------------------------------------------------------------------
.text:00006C46                 align 4
.text:00006C46 _text           ends
.text:00006C46
.text:00006C48 ; ===========================================================================
.text:00006C48
.text:00006C48 ; Segment type: Pure code
.text:00006C48 ; Segment permissions: Read/Execute
.text:00006C48 _text           segment para public 'CODE' use32
.text:00006C48                 assume cs:_text
.text:00006C48                 ;org 6C48h
.text:00006C48 ; COMDAT (pick any)
.text:00006C48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C48
.text:00006C48 ; =============== S U B R O U T I N E =======================================
.text:00006C48
.text:00006C48 ; Attributes: bp-based frame
.text:00006C48
.text:00006C48 ; public: __thiscall CRecordVector<struct ISequentialInStream *>::CRecordVector<struct ISequentialInStream *>(void)
.text:00006C48                 public ??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ
.text:00006C48 ??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ proc near
.text:00006C48                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+2A3p
.text:00006C48                                         ; NCoderMixer2::CCoderMT::CCoderMT(void)+5Ap
.text:00006C48
.text:00006C48 var_4           = dword ptr -4
.text:00006C48
.text:00006C48                 push    ebp
.text:00006C49                 mov     ebp, esp
.text:00006C4B                 push    ecx
.text:00006C4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C53                 mov     [ebp+var_4], ecx
.text:00006C56                 mov     eax, [ebp+var_4]
.text:00006C59                 mov     dword ptr [eax], 0
.text:00006C5F                 mov     ecx, [ebp+var_4]
.text:00006C62                 mov     dword ptr [ecx+4], 0
.text:00006C69                 mov     edx, [ebp+var_4]
.text:00006C6C                 mov     dword ptr [edx+8], 0
.text:00006C73                 mov     eax, [ebp+var_4]
.text:00006C76                 mov     esp, ebp
.text:00006C78                 pop     ebp
.text:00006C79                 retn
.text:00006C79 ??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ endp
.text:00006C79
.text:00006C79 ; ---------------------------------------------------------------------------
.text:00006C7A                 align 4
.text:00006C7A _text           ends
.text:00006C7A
.text:00006C7C ; ===========================================================================
.text:00006C7C
.text:00006C7C ; Segment type: Pure code
.text:00006C7C ; Segment permissions: Read/Execute
.text:00006C7C _text           segment para public 'CODE' use32
.text:00006C7C                 assume cs:_text
.text:00006C7C                 ;org 6C7Ch
.text:00006C7C ; COMDAT (pick any)
.text:00006C7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C7C
.text:00006C7C ; =============== S U B R O U T I N E =======================================
.text:00006C7C
.text:00006C7C ; Attributes: bp-based frame
.text:00006C7C
.text:00006C7C ; public: void __thiscall CRecordVector<struct ISequentialInStream *>::ClearAndReserve(unsigned int)
.text:00006C7C                 public ?ClearAndReserve@?$CRecordVector@PAUISequentialInStream@@@@QAEXI@Z
.text:00006C7C ?ClearAndReserve@?$CRecordVector@PAUISequentialInStream@@@@QAEXI@Z proc near
.text:00006C7C                                         ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+8Bp
.text:00006C7C
.text:00006C7C var_C           = dword ptr -0Ch
.text:00006C7C var_8           = dword ptr -8
.text:00006C7C var_4           = dword ptr -4
.text:00006C7C arg_0           = dword ptr  8
.text:00006C7C
.text:00006C7C                 push    ebp
.text:00006C7D                 mov     ebp, esp
.text:00006C7F                 sub     esp, 0Ch
.text:00006C82                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006C89                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006C90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C97                 mov     [ebp+var_4], ecx
.text:00006C9A                 mov     ecx, [ebp+var_4]
.text:00006C9D                 call    ?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ ; CRecordVector<ISequentialInStream *>::Clear(void)
.text:00006CA2                 mov     eax, [ebp+var_4]
.text:00006CA5                 mov     ecx, [ebp+arg_0]
.text:00006CA8                 cmp     ecx, [eax+8]
.text:00006CAB                 jbe     short loc_6D04
.text:00006CAD                 mov     edx, [ebp+var_4]
.text:00006CB0                 mov     eax, [edx]
.text:00006CB2                 mov     [ebp+var_8], eax
.text:00006CB5                 mov     ecx, [ebp+var_8]
.text:00006CB8                 push    ecx             ; void *
.text:00006CB9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006CBE                 add     esp, 4
.text:00006CC1                 mov     edx, [ebp+var_4]
.text:00006CC4                 mov     dword ptr [edx], 0
.text:00006CCA                 mov     eax, [ebp+var_4]
.text:00006CCD                 mov     dword ptr [eax+8], 0
.text:00006CD4                 xor     ecx, ecx
.text:00006CD6                 mov     eax, [ebp+arg_0]
.text:00006CD9                 mov     edx, 4
.text:00006CDE                 mul     edx
.text:00006CE0                 seto    cl
.text:00006CE3                 neg     ecx
.text:00006CE5                 or      ecx, eax
.text:00006CE7                 push    ecx             ; unsigned int
.text:00006CE8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006CED                 add     esp, 4
.text:00006CF0                 mov     [ebp+var_C], eax
.text:00006CF3                 mov     eax, [ebp+var_4]
.text:00006CF6                 mov     ecx, [ebp+var_C]
.text:00006CF9                 mov     [eax], ecx
.text:00006CFB                 mov     edx, [ebp+var_4]
.text:00006CFE                 mov     eax, [ebp+arg_0]
.text:00006D01                 mov     [edx+8], eax
.text:00006D04
.text:00006D04 loc_6D04:                               ; CODE XREF: CRecordVector<ISequentialInStream *>::ClearAndReserve(uint)+2Fj
.text:00006D04                 add     esp, 0Ch
.text:00006D07                 cmp     ebp, esp
.text:00006D09                 call    __RTC_CheckEsp
.text:00006D0E                 mov     esp, ebp
.text:00006D10                 pop     ebp
.text:00006D11                 retn    4
.text:00006D11 ?ClearAndReserve@?$CRecordVector@PAUISequentialInStream@@@@QAEXI@Z endp
.text:00006D11
.text:00006D11 _text           ends
.text:00006D11
.text:00006D14 ; ===========================================================================
.text:00006D14
.text:00006D14 ; Segment type: Pure code
.text:00006D14 ; Segment permissions: Read/Execute
.text:00006D14 _text           segment para public 'CODE' use32
.text:00006D14                 assume cs:_text
.text:00006D14                 ;org 6D14h
.text:00006D14 ; COMDAT (pick any)
.text:00006D14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D14
.text:00006D14 ; =============== S U B R O U T I N E =======================================
.text:00006D14
.text:00006D14 ; Attributes: bp-based frame
.text:00006D14
.text:00006D14 ; public: __thiscall CRecordVector<struct ISequentialInStream *>::~CRecordVector<struct ISequentialInStream *>(void)
.text:00006D14                 public ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ
.text:00006D14 ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ proc near
.text:00006D14                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+434p
.text:00006D14                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+55Dp ...
.text:00006D14
.text:00006D14 var_8           = dword ptr -8
.text:00006D14 var_4           = dword ptr -4
.text:00006D14
.text:00006D14                 push    ebp
.text:00006D15                 mov     ebp, esp
.text:00006D17                 sub     esp, 8
.text:00006D1A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006D21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D28                 mov     [ebp+var_4], ecx
.text:00006D2B                 mov     eax, [ebp+var_4]
.text:00006D2E                 mov     ecx, [eax]
.text:00006D30                 mov     [ebp+var_8], ecx
.text:00006D33                 mov     edx, [ebp+var_8]
.text:00006D36                 push    edx             ; void *
.text:00006D37                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006D3C                 add     esp, 4
.text:00006D3F                 add     esp, 8
.text:00006D42                 cmp     ebp, esp
.text:00006D44                 call    __RTC_CheckEsp
.text:00006D49                 mov     esp, ebp
.text:00006D4B                 pop     ebp
.text:00006D4C                 retn
.text:00006D4C ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ endp
.text:00006D4C
.text:00006D4C ; ---------------------------------------------------------------------------
.text:00006D4D                 align 10h
.text:00006D4D _text           ends
.text:00006D4D
.text:00006D50 ; ===========================================================================
.text:00006D50
.text:00006D50 ; Segment type: Pure code
.text:00006D50 ; Segment permissions: Read/Execute
.text:00006D50 _text           segment para public 'CODE' use32
.text:00006D50                 assume cs:_text
.text:00006D50                 ;org 6D50h
.text:00006D50 ; COMDAT (pick any)
.text:00006D50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D50
.text:00006D50 ; =============== S U B R O U T I N E =======================================
.text:00006D50
.text:00006D50 ; Attributes: bp-based frame
.text:00006D50
.text:00006D50 ; public: void __thiscall CRecordVector<struct ISequentialInStream *>::Clear(void)
.text:00006D50                 public ?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ
.text:00006D50 ?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ proc near
.text:00006D50                                         ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+1Dp
.text:00006D50                                         ; CRecordVector<ISequentialInStream *>::ClearAndReserve(uint)+21p
.text:00006D50
.text:00006D50 var_4           = dword ptr -4
.text:00006D50
.text:00006D50                 push    ebp
.text:00006D51                 mov     ebp, esp
.text:00006D53                 push    ecx
.text:00006D54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D5B                 mov     [ebp+var_4], ecx
.text:00006D5E                 mov     eax, [ebp+var_4]
.text:00006D61                 mov     dword ptr [eax+4], 0
.text:00006D68                 mov     esp, ebp
.text:00006D6A                 pop     ebp
.text:00006D6B                 retn
.text:00006D6B ?Clear@?$CRecordVector@PAUISequentialInStream@@@@QAEXXZ endp
.text:00006D6B
.text:00006D6B _text           ends
.text:00006D6B
.text:00006D6C ; ===========================================================================
.text:00006D6C
.text:00006D6C ; Segment type: Pure code
.text:00006D6C ; Segment permissions: Read/Execute
.text:00006D6C _text           segment para public 'CODE' use32
.text:00006D6C                 assume cs:_text
.text:00006D6C                 ;org 6D6Ch
.text:00006D6C ; COMDAT (pick any)
.text:00006D6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D6C
.text:00006D6C ; =============== S U B R O U T I N E =======================================
.text:00006D6C
.text:00006D6C ; Attributes: bp-based frame
.text:00006D6C
.text:00006D6C ; public: unsigned int __thiscall CRecordVector<struct ISequentialInStream *>::Add(struct ISequentialInStream * const)
.text:00006D6C                 public ?Add@?$CRecordVector@PAUISequentialInStream@@@@QAEIQAUISequentialInStream@@@Z
.text:00006D6C ?Add@?$CRecordVector@PAUISequentialInStream@@@@QAEIQAUISequentialInStream@@@Z proc near
.text:00006D6C                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+2EFp
.text:00006D6C
.text:00006D6C var_8           = dword ptr -8
.text:00006D6C var_4           = dword ptr -4
.text:00006D6C arg_0           = dword ptr  8
.text:00006D6C
.text:00006D6C                 push    ebp
.text:00006D6D                 mov     ebp, esp
.text:00006D6F                 sub     esp, 8
.text:00006D72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006D79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D80                 mov     [ebp+var_4], ecx
.text:00006D83                 mov     ecx, [ebp+var_4]
.text:00006D86                 call    ?ReserveOnePosition@?$CRecordVector@PAUISequentialInStream@@@@AAEXXZ ; CRecordVector<ISequentialInStream *>::ReserveOnePosition(void)
.text:00006D8B                 mov     eax, [ebp+var_4]
.text:00006D8E                 mov     ecx, [eax+4]
.text:00006D91                 mov     edx, [ebp+var_4]
.text:00006D94                 mov     eax, [edx]
.text:00006D96                 mov     edx, [ebp+arg_0]
.text:00006D99                 mov     [eax+ecx*4], edx
.text:00006D9C                 mov     eax, [ebp+var_4]
.text:00006D9F                 mov     ecx, [eax+4]
.text:00006DA2                 mov     [ebp+var_8], ecx
.text:00006DA5                 mov     edx, [ebp+var_4]
.text:00006DA8                 mov     eax, [edx+4]
.text:00006DAB                 add     eax, 1
.text:00006DAE                 mov     ecx, [ebp+var_4]
.text:00006DB1                 mov     [ecx+4], eax
.text:00006DB4                 mov     eax, [ebp+var_8]
.text:00006DB7                 add     esp, 8
.text:00006DBA                 cmp     ebp, esp
.text:00006DBC                 call    __RTC_CheckEsp
.text:00006DC1                 mov     esp, ebp
.text:00006DC3                 pop     ebp
.text:00006DC4                 retn    4
.text:00006DC4 ?Add@?$CRecordVector@PAUISequentialInStream@@@@QAEIQAUISequentialInStream@@@Z endp
.text:00006DC4
.text:00006DC4 ; ---------------------------------------------------------------------------
.text:00006DC7                 align 4
.text:00006DC7 _text           ends
.text:00006DC7
.text:00006DC8 ; ===========================================================================
.text:00006DC8
.text:00006DC8 ; Segment type: Pure code
.text:00006DC8 ; Segment permissions: Read/Execute
.text:00006DC8 _text           segment para public 'CODE' use32
.text:00006DC8                 assume cs:_text
.text:00006DC8                 ;org 6DC8h
.text:00006DC8 ; COMDAT (pick any)
.text:00006DC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006DC8
.text:00006DC8 ; =============== S U B R O U T I N E =======================================
.text:00006DC8
.text:00006DC8 ; Attributes: bp-based frame
.text:00006DC8
.text:00006DC8 ; public: void __thiscall CRecordVector<struct ISequentialInStream *>::AddInReserved(struct ISequentialInStream * const)
.text:00006DC8                 public ?AddInReserved@?$CRecordVector@PAUISequentialInStream@@@@QAEXQAUISequentialInStream@@@Z
.text:00006DC8 ?AddInReserved@?$CRecordVector@PAUISequentialInStream@@@@QAEXQAUISequentialInStream@@@Z proc near
.text:00006DC8                                         ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+D6p
.text:00006DC8
.text:00006DC8 var_4           = dword ptr -4
.text:00006DC8 arg_0           = dword ptr  8
.text:00006DC8
.text:00006DC8                 push    ebp
.text:00006DC9                 mov     ebp, esp
.text:00006DCB                 push    ecx
.text:00006DCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DD3                 mov     [ebp+var_4], ecx
.text:00006DD6                 mov     eax, [ebp+var_4]
.text:00006DD9                 mov     ecx, [eax+4]
.text:00006DDC                 mov     edx, [ebp+var_4]
.text:00006DDF                 mov     eax, [edx]
.text:00006DE1                 mov     edx, [ebp+arg_0]
.text:00006DE4                 mov     [eax+ecx*4], edx
.text:00006DE7                 mov     eax, [ebp+var_4]
.text:00006DEA                 mov     ecx, [eax+4]
.text:00006DED                 add     ecx, 1
.text:00006DF0                 mov     edx, [ebp+var_4]
.text:00006DF3                 mov     [edx+4], ecx
.text:00006DF6                 mov     esp, ebp
.text:00006DF8                 pop     ebp
.text:00006DF9                 retn    4
.text:00006DF9 ?AddInReserved@?$CRecordVector@PAUISequentialInStream@@@@QAEXQAUISequentialInStream@@@Z endp
.text:00006DF9
.text:00006DF9 _text           ends
.text:00006DF9
.text:00006DFC ; ===========================================================================
.text:00006DFC
.text:00006DFC ; Segment type: Pure code
.text:00006DFC ; Segment permissions: Read/Execute
.text:00006DFC _text           segment para public 'CODE' use32
.text:00006DFC                 assume cs:_text
.text:00006DFC                 ;org 6DFCh
.text:00006DFC ; COMDAT (pick any)
.text:00006DFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006DFC
.text:00006DFC ; =============== S U B R O U T I N E =======================================
.text:00006DFC
.text:00006DFC ; Attributes: bp-based frame
.text:00006DFC
.text:00006DFC ; public: struct ISequentialInStream * & __thiscall CRecordVector<struct ISequentialInStream *>::operator[](unsigned int)
.text:00006DFC                 public ??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z
.text:00006DFC ??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z proc near
.text:00006DFC                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+652p
.text:00006DFC                                         ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+1C5p
.text:00006DFC
.text:00006DFC var_4           = dword ptr -4
.text:00006DFC arg_0           = dword ptr  8
.text:00006DFC
.text:00006DFC                 push    ebp
.text:00006DFD                 mov     ebp, esp
.text:00006DFF                 push    ecx
.text:00006E00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E07                 mov     [ebp+var_4], ecx
.text:00006E0A                 mov     eax, [ebp+var_4]
.text:00006E0D                 mov     ecx, [eax]
.text:00006E0F                 mov     edx, [ebp+arg_0]
.text:00006E12                 lea     eax, [ecx+edx*4]
.text:00006E15                 mov     esp, ebp
.text:00006E17                 pop     ebp
.text:00006E18                 retn    4
.text:00006E18 ??A?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@I@Z endp
.text:00006E18
.text:00006E18 ; ---------------------------------------------------------------------------
.text:00006E1B                 align 4
.text:00006E1B _text           ends
.text:00006E1B
.text:00006E1C ; ===========================================================================
.text:00006E1C
.text:00006E1C ; Segment type: Pure code
.text:00006E1C ; Segment permissions: Read/Execute
.text:00006E1C _text           segment para public 'CODE' use32
.text:00006E1C                 assume cs:_text
.text:00006E1C                 ;org 6E1Ch
.text:00006E1C ; COMDAT (pick any)
.text:00006E1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006E1C
.text:00006E1C ; =============== S U B R O U T I N E =======================================
.text:00006E1C
.text:00006E1C ; Attributes: bp-based frame
.text:00006E1C
.text:00006E1C ; public: struct ISequentialInStream * & __thiscall CRecordVector<struct ISequentialInStream *>::Front(void)
.text:00006E1C                 public ?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ
.text:00006E1C ?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ proc near
.text:00006E1C                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+6BCp
.text:00006E1C                                         ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+26Bp
.text:00006E1C
.text:00006E1C var_4           = dword ptr -4
.text:00006E1C
.text:00006E1C                 push    ebp
.text:00006E1D                 mov     ebp, esp
.text:00006E1F                 push    ecx
.text:00006E20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E27                 mov     [ebp+var_4], ecx
.text:00006E2A                 mov     eax, [ebp+var_4]
.text:00006E2D                 mov     eax, [eax]
.text:00006E2F                 mov     esp, ebp
.text:00006E31                 pop     ebp
.text:00006E32                 retn
.text:00006E32 ?Front@?$CRecordVector@PAUISequentialInStream@@@@QAEAAPAUISequentialInStream@@XZ endp
.text:00006E32
.text:00006E32 ; ---------------------------------------------------------------------------
.text:00006E33                 align 4
.text:00006E33 _text           ends
.text:00006E33
.text:00006E34 ; ===========================================================================
.text:00006E34
.text:00006E34 ; Segment type: Pure code
.text:00006E34 ; Segment permissions: Read/Execute
.text:00006E34 _text           segment para public 'CODE' use32
.text:00006E34                 assume cs:_text
.text:00006E34                 ;org 6E34h
.text:00006E34 ; COMDAT (pick any)
.text:00006E34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006E34
.text:00006E34 ; =============== S U B R O U T I N E =======================================
.text:00006E34
.text:00006E34 ; Attributes: bp-based frame
.text:00006E34
.text:00006E34 ; public: __thiscall CRecordVector<struct ISequentialOutStream *>::CRecordVector<struct ISequentialOutStream *>(void)
.text:00006E34                 public ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
.text:00006E34 ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ proc near
.text:00006E34                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+2B2p
.text:00006E34                                         ; NCoderMixer2::CCoderMT::CCoderMT(void)+69p
.text:00006E34
.text:00006E34 var_4           = dword ptr -4
.text:00006E34
.text:00006E34                 push    ebp
.text:00006E35                 mov     ebp, esp
.text:00006E37                 push    ecx
.text:00006E38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E3F                 mov     [ebp+var_4], ecx
.text:00006E42                 mov     eax, [ebp+var_4]
.text:00006E45                 mov     dword ptr [eax], 0
.text:00006E4B                 mov     ecx, [ebp+var_4]
.text:00006E4E                 mov     dword ptr [ecx+4], 0
.text:00006E55                 mov     edx, [ebp+var_4]
.text:00006E58                 mov     dword ptr [edx+8], 0
.text:00006E5F                 mov     eax, [ebp+var_4]
.text:00006E62                 mov     esp, ebp
.text:00006E64                 pop     ebp
.text:00006E65                 retn
.text:00006E65 ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ endp
.text:00006E65
.text:00006E65 ; ---------------------------------------------------------------------------
.text:00006E66                 align 4
.text:00006E66 _text           ends
.text:00006E66
.text:00006E68 ; ===========================================================================
.text:00006E68
.text:00006E68 ; Segment type: Pure code
.text:00006E68 ; Segment permissions: Read/Execute
.text:00006E68 _text           segment para public 'CODE' use32
.text:00006E68                 assume cs:_text
.text:00006E68                 ;org 6E68h
.text:00006E68 ; COMDAT (pick any)
.text:00006E68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006E68
.text:00006E68 ; =============== S U B R O U T I N E =======================================
.text:00006E68
.text:00006E68 ; Attributes: bp-based frame
.text:00006E68
.text:00006E68 ; public: void __thiscall CRecordVector<struct ISequentialOutStream *>::ClearAndReserve(unsigned int)
.text:00006E68                 public ?ClearAndReserve@?$CRecordVector@PAUISequentialOutStream@@@@QAEXI@Z
.text:00006E68 ?ClearAndReserve@?$CRecordVector@PAUISequentialOutStream@@@@QAEXI@Z proc near
.text:00006E68                                         ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+9Ap
.text:00006E68
.text:00006E68 var_C           = dword ptr -0Ch
.text:00006E68 var_8           = dword ptr -8
.text:00006E68 var_4           = dword ptr -4
.text:00006E68 arg_0           = dword ptr  8
.text:00006E68
.text:00006E68                 push    ebp
.text:00006E69                 mov     ebp, esp
.text:00006E6B                 sub     esp, 0Ch
.text:00006E6E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006E75                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006E7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E83                 mov     [ebp+var_4], ecx
.text:00006E86                 mov     ecx, [ebp+var_4]
.text:00006E89                 call    ?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ ; CRecordVector<ISequentialOutStream *>::Clear(void)
.text:00006E8E                 mov     eax, [ebp+var_4]
.text:00006E91                 mov     ecx, [ebp+arg_0]
.text:00006E94                 cmp     ecx, [eax+8]
.text:00006E97                 jbe     short loc_6EF0
.text:00006E99                 mov     edx, [ebp+var_4]
.text:00006E9C                 mov     eax, [edx]
.text:00006E9E                 mov     [ebp+var_8], eax
.text:00006EA1                 mov     ecx, [ebp+var_8]
.text:00006EA4                 push    ecx             ; void *
.text:00006EA5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006EAA                 add     esp, 4
.text:00006EAD                 mov     edx, [ebp+var_4]
.text:00006EB0                 mov     dword ptr [edx], 0
.text:00006EB6                 mov     eax, [ebp+var_4]
.text:00006EB9                 mov     dword ptr [eax+8], 0
.text:00006EC0                 xor     ecx, ecx
.text:00006EC2                 mov     eax, [ebp+arg_0]
.text:00006EC5                 mov     edx, 4
.text:00006ECA                 mul     edx
.text:00006ECC                 seto    cl
.text:00006ECF                 neg     ecx
.text:00006ED1                 or      ecx, eax
.text:00006ED3                 push    ecx             ; unsigned int
.text:00006ED4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006ED9                 add     esp, 4
.text:00006EDC                 mov     [ebp+var_C], eax
.text:00006EDF                 mov     eax, [ebp+var_4]
.text:00006EE2                 mov     ecx, [ebp+var_C]
.text:00006EE5                 mov     [eax], ecx
.text:00006EE7                 mov     edx, [ebp+var_4]
.text:00006EEA                 mov     eax, [ebp+arg_0]
.text:00006EED                 mov     [edx+8], eax
.text:00006EF0
.text:00006EF0 loc_6EF0:                               ; CODE XREF: CRecordVector<ISequentialOutStream *>::ClearAndReserve(uint)+2Fj
.text:00006EF0                 add     esp, 0Ch
.text:00006EF3                 cmp     ebp, esp
.text:00006EF5                 call    __RTC_CheckEsp
.text:00006EFA                 mov     esp, ebp
.text:00006EFC                 pop     ebp
.text:00006EFD                 retn    4
.text:00006EFD ?ClearAndReserve@?$CRecordVector@PAUISequentialOutStream@@@@QAEXI@Z endp
.text:00006EFD
.text:00006EFD _text           ends
.text:00006EFD
.text:00006F00 ; ===========================================================================
.text:00006F00
.text:00006F00 ; Segment type: Pure code
.text:00006F00 ; Segment permissions: Read/Execute
.text:00006F00 _text           segment para public 'CODE' use32
.text:00006F00                 assume cs:_text
.text:00006F00                 ;org 6F00h
.text:00006F00 ; COMDAT (pick any)
.text:00006F00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F00
.text:00006F00 ; =============== S U B R O U T I N E =======================================
.text:00006F00
.text:00006F00 ; Attributes: bp-based frame
.text:00006F00
.text:00006F00 ; public: __thiscall CRecordVector<struct ISequentialOutStream *>::~CRecordVector<struct ISequentialOutStream *>(void)
.text:00006F00                 public ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
.text:00006F00 ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ proc near
.text:00006F00                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+425p
.text:00006F00                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+54Ep ...
.text:00006F00
.text:00006F00 var_8           = dword ptr -8
.text:00006F00 var_4           = dword ptr -4
.text:00006F00
.text:00006F00                 push    ebp
.text:00006F01                 mov     ebp, esp
.text:00006F03                 sub     esp, 8
.text:00006F06                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006F0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F14                 mov     [ebp+var_4], ecx
.text:00006F17                 mov     eax, [ebp+var_4]
.text:00006F1A                 mov     ecx, [eax]
.text:00006F1C                 mov     [ebp+var_8], ecx
.text:00006F1F                 mov     edx, [ebp+var_8]
.text:00006F22                 push    edx             ; void *
.text:00006F23                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006F28                 add     esp, 4
.text:00006F2B                 add     esp, 8
.text:00006F2E                 cmp     ebp, esp
.text:00006F30                 call    __RTC_CheckEsp
.text:00006F35                 mov     esp, ebp
.text:00006F37                 pop     ebp
.text:00006F38                 retn
.text:00006F38 ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ endp
.text:00006F38
.text:00006F38 ; ---------------------------------------------------------------------------
.text:00006F39                 align 4
.text:00006F39 _text           ends
.text:00006F39
.text:00006F3C ; ===========================================================================
.text:00006F3C
.text:00006F3C ; Segment type: Pure code
.text:00006F3C ; Segment permissions: Read/Execute
.text:00006F3C _text           segment para public 'CODE' use32
.text:00006F3C                 assume cs:_text
.text:00006F3C                 ;org 6F3Ch
.text:00006F3C ; COMDAT (pick any)
.text:00006F3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F3C
.text:00006F3C ; =============== S U B R O U T I N E =======================================
.text:00006F3C
.text:00006F3C ; Attributes: bp-based frame
.text:00006F3C
.text:00006F3C ; public: void __thiscall CRecordVector<struct ISequentialOutStream *>::Clear(void)
.text:00006F3C                 public ?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ
.text:00006F3C ?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ proc near
.text:00006F3C                                         ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+28p
.text:00006F3C                                         ; CRecordVector<ISequentialOutStream *>::ClearAndReserve(uint)+21p
.text:00006F3C
.text:00006F3C var_4           = dword ptr -4
.text:00006F3C
.text:00006F3C                 push    ebp
.text:00006F3D                 mov     ebp, esp
.text:00006F3F                 push    ecx
.text:00006F40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F47                 mov     [ebp+var_4], ecx
.text:00006F4A                 mov     eax, [ebp+var_4]
.text:00006F4D                 mov     dword ptr [eax+4], 0
.text:00006F54                 mov     esp, ebp
.text:00006F56                 pop     ebp
.text:00006F57                 retn
.text:00006F57 ?Clear@?$CRecordVector@PAUISequentialOutStream@@@@QAEXXZ endp
.text:00006F57
.text:00006F57 _text           ends
.text:00006F57
.text:00006F58 ; ===========================================================================
.text:00006F58
.text:00006F58 ; Segment type: Pure code
.text:00006F58 ; Segment permissions: Read/Execute
.text:00006F58 _text           segment para public 'CODE' use32
.text:00006F58                 assume cs:_text
.text:00006F58                 ;org 6F58h
.text:00006F58 ; COMDAT (pick any)
.text:00006F58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F58
.text:00006F58 ; =============== S U B R O U T I N E =======================================
.text:00006F58
.text:00006F58 ; Attributes: bp-based frame
.text:00006F58
.text:00006F58 ; public: unsigned int __thiscall CRecordVector<struct ISequentialOutStream *>::Add(struct ISequentialOutStream * const)
.text:00006F58                 public ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z
.text:00006F58 ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z proc near
.text:00006F58                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+32Ap
.text:00006F58
.text:00006F58 var_8           = dword ptr -8
.text:00006F58 var_4           = dword ptr -4
.text:00006F58 arg_0           = dword ptr  8
.text:00006F58
.text:00006F58                 push    ebp
.text:00006F59                 mov     ebp, esp
.text:00006F5B                 sub     esp, 8
.text:00006F5E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006F65                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F6C                 mov     [ebp+var_4], ecx
.text:00006F6F                 mov     ecx, [ebp+var_4]
.text:00006F72                 call    ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition(void)
.text:00006F77                 mov     eax, [ebp+var_4]
.text:00006F7A                 mov     ecx, [eax+4]
.text:00006F7D                 mov     edx, [ebp+var_4]
.text:00006F80                 mov     eax, [edx]
.text:00006F82                 mov     edx, [ebp+arg_0]
.text:00006F85                 mov     [eax+ecx*4], edx
.text:00006F88                 mov     eax, [ebp+var_4]
.text:00006F8B                 mov     ecx, [eax+4]
.text:00006F8E                 mov     [ebp+var_8], ecx
.text:00006F91                 mov     edx, [ebp+var_4]
.text:00006F94                 mov     eax, [edx+4]
.text:00006F97                 add     eax, 1
.text:00006F9A                 mov     ecx, [ebp+var_4]
.text:00006F9D                 mov     [ecx+4], eax
.text:00006FA0                 mov     eax, [ebp+var_8]
.text:00006FA3                 add     esp, 8
.text:00006FA6                 cmp     ebp, esp
.text:00006FA8                 call    __RTC_CheckEsp
.text:00006FAD                 mov     esp, ebp
.text:00006FAF                 pop     ebp
.text:00006FB0                 retn    4
.text:00006FB0 ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z endp
.text:00006FB0
.text:00006FB0 ; ---------------------------------------------------------------------------
.text:00006FB3                 align 4
.text:00006FB3 _text           ends
.text:00006FB3
.text:00006FB4 ; ===========================================================================
.text:00006FB4
.text:00006FB4 ; Segment type: Pure code
.text:00006FB4 ; Segment permissions: Read/Execute
.text:00006FB4 _text           segment para public 'CODE' use32
.text:00006FB4                 assume cs:_text
.text:00006FB4                 ;org 6FB4h
.text:00006FB4 ; COMDAT (pick any)
.text:00006FB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006FB4
.text:00006FB4 ; =============== S U B R O U T I N E =======================================
.text:00006FB4
.text:00006FB4 ; Attributes: bp-based frame
.text:00006FB4
.text:00006FB4 ; public: void __thiscall CRecordVector<struct ISequentialOutStream *>::AddInReserved(struct ISequentialOutStream * const)
.text:00006FB4                 public ?AddInReserved@?$CRecordVector@PAUISequentialOutStream@@@@QAEXQAUISequentialOutStream@@@Z
.text:00006FB4 ?AddInReserved@?$CRecordVector@PAUISequentialOutStream@@@@QAEXQAUISequentialOutStream@@@Z proc near
.text:00006FB4                                         ; CODE XREF: NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+114p
.text:00006FB4
.text:00006FB4 var_4           = dword ptr -4
.text:00006FB4 arg_0           = dword ptr  8
.text:00006FB4
.text:00006FB4                 push    ebp
.text:00006FB5                 mov     ebp, esp
.text:00006FB7                 push    ecx
.text:00006FB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006FBF                 mov     [ebp+var_4], ecx
.text:00006FC2                 mov     eax, [ebp+var_4]
.text:00006FC5                 mov     ecx, [eax+4]
.text:00006FC8                 mov     edx, [ebp+var_4]
.text:00006FCB                 mov     eax, [edx]
.text:00006FCD                 mov     edx, [ebp+arg_0]
.text:00006FD0                 mov     [eax+ecx*4], edx
.text:00006FD3                 mov     eax, [ebp+var_4]
.text:00006FD6                 mov     ecx, [eax+4]
.text:00006FD9                 add     ecx, 1
.text:00006FDC                 mov     edx, [ebp+var_4]
.text:00006FDF                 mov     [edx+4], ecx
.text:00006FE2                 mov     esp, ebp
.text:00006FE4                 pop     ebp
.text:00006FE5                 retn    4
.text:00006FE5 ?AddInReserved@?$CRecordVector@PAUISequentialOutStream@@@@QAEXQAUISequentialOutStream@@@Z endp
.text:00006FE5
.text:00006FE5 _text           ends
.text:00006FE5
.text:00006FE8 ; ===========================================================================
.text:00006FE8
.text:00006FE8 ; Segment type: Pure code
.text:00006FE8 ; Segment permissions: Read/Execute
.text:00006FE8 _text           segment para public 'CODE' use32
.text:00006FE8                 assume cs:_text
.text:00006FE8                 ;org 6FE8h
.text:00006FE8 ; COMDAT (pick any)
.text:00006FE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006FE8
.text:00006FE8 ; =============== S U B R O U T I N E =======================================
.text:00006FE8
.text:00006FE8 ; Attributes: bp-based frame
.text:00006FE8
.text:00006FE8 ; public: struct ISequentialOutStream * & __thiscall CRecordVector<struct ISequentialOutStream *>::operator[](unsigned int)
.text:00006FE8                 public ??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z
.text:00006FE8 ??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z proc near
.text:00006FE8                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+642p
.text:00006FE8                                         ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+1B5p
.text:00006FE8
.text:00006FE8 var_4           = dword ptr -4
.text:00006FE8 arg_0           = dword ptr  8
.text:00006FE8
.text:00006FE8                 push    ebp
.text:00006FE9                 mov     ebp, esp
.text:00006FEB                 push    ecx
.text:00006FEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006FF3                 mov     [ebp+var_4], ecx
.text:00006FF6                 mov     eax, [ebp+var_4]
.text:00006FF9                 mov     ecx, [eax]
.text:00006FFB                 mov     edx, [ebp+arg_0]
.text:00006FFE                 lea     eax, [ecx+edx*4]
.text:00007001                 mov     esp, ebp
.text:00007003                 pop     ebp
.text:00007004                 retn    4
.text:00007004 ??A?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@I@Z endp
.text:00007004
.text:00007004 ; ---------------------------------------------------------------------------
.text:00007007                 align 4
.text:00007007 _text           ends
.text:00007007
.text:00007008 ; ===========================================================================
.text:00007008
.text:00007008 ; Segment type: Pure code
.text:00007008 ; Segment permissions: Read/Execute
.text:00007008 _text           segment para public 'CODE' use32
.text:00007008                 assume cs:_text
.text:00007008                 ;org 7008h
.text:00007008 ; COMDAT (pick any)
.text:00007008                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007008
.text:00007008 ; =============== S U B R O U T I N E =======================================
.text:00007008
.text:00007008 ; Attributes: bp-based frame
.text:00007008
.text:00007008 ; public: struct ISequentialOutStream * & __thiscall CRecordVector<struct ISequentialOutStream *>::Front(void)
.text:00007008                 public ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ
.text:00007008 ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ proc near
.text:00007008                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+6A5p
.text:00007008                                         ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+257p
.text:00007008
.text:00007008 var_4           = dword ptr -4
.text:00007008
.text:00007008                 push    ebp
.text:00007009                 mov     ebp, esp
.text:0000700B                 push    ecx
.text:0000700C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007013                 mov     [ebp+var_4], ecx
.text:00007016                 mov     eax, [ebp+var_4]
.text:00007019                 mov     eax, [eax]
.text:0000701B                 mov     esp, ebp
.text:0000701D                 pop     ebp
.text:0000701E                 retn
.text:0000701E ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ endp
.text:0000701E
.text:0000701E ; ---------------------------------------------------------------------------
.text:0000701F                 align 10h
.text:0000701F _text           ends
.text:0000701F
.text:00007020 ; ===========================================================================
.text:00007020
.text:00007020 ; Segment type: Pure code
.text:00007020 ; Segment permissions: Read/Execute
.text:00007020 _text           segment para public 'CODE' use32
.text:00007020                 assume cs:_text
.text:00007020                 ;org 7020h
.text:00007020 ; COMDAT (pick any)
.text:00007020                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007020
.text:00007020 ; =============== S U B R O U T I N E =======================================
.text:00007020
.text:00007020 ; Attributes: bp-based frame
.text:00007020
.text:00007020 ; public: unsigned int __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::Size(void)const
.text:00007020                 public ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ
.text:00007020 ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ proc near
.text:00007020                                         ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+45p
.text:00007020
.text:00007020 var_4           = dword ptr -4
.text:00007020
.text:00007020                 push    ebp
.text:00007021                 mov     ebp, esp
.text:00007023                 push    ecx
.text:00007024                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000702B                 mov     [ebp+var_4], ecx
.text:0000702E                 mov     ecx, [ebp+var_4]
.text:00007031                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00007036                 add     esp, 4
.text:00007039                 cmp     ebp, esp
.text:0000703B                 call    __RTC_CheckEsp
.text:00007040                 mov     esp, ebp
.text:00007042                 pop     ebp
.text:00007043                 retn
.text:00007043 ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ endp
.text:00007043
.text:00007043 _text           ends
.text:00007043
.text:00007044 ; ===========================================================================
.text:00007044
.text:00007044 ; Segment type: Pure code
.text:00007044 ; Segment permissions: Read/Execute
.text:00007044 _text           segment para public 'CODE' use32
.text:00007044                 assume cs:_text
.text:00007044                 ;org 7044h
.text:00007044 ; COMDAT (pick any)
.text:00007044                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007044
.text:00007044 ; =============== S U B R O U T I N E =======================================
.text:00007044
.text:00007044 ; Attributes: bp-based frame
.text:00007044
.text:00007044 ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::CObjectVector<class CMyComPtr<struct ISequentialInStream>>(void)
.text:00007044                 public ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text:00007044 ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ proc near
.text:00007044                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+6Dp
.text:00007044                                         ; NCoderMixer2::CCoderMT::CCoderMT(void)+7Fp
.text:00007044
.text:00007044 var_4           = dword ptr -4
.text:00007044
.text:00007044                 push    ebp
.text:00007045                 mov     ebp, esp
.text:00007047                 push    ecx
.text:00007048                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000704F                 mov     [ebp+var_4], ecx
.text:00007052                 mov     ecx, [ebp+var_4]
.text:00007055                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000705A                 mov     eax, [ebp+var_4]
.text:0000705D                 add     esp, 4
.text:00007060                 cmp     ebp, esp
.text:00007062                 call    __RTC_CheckEsp
.text:00007067                 mov     esp, ebp
.text:00007069                 pop     ebp
.text:0000706A                 retn
.text:0000706A ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ endp
.text:0000706A
.text:0000706A ; ---------------------------------------------------------------------------
.text:0000706B                 align 4
.text:0000706B _text           ends
.text:0000706B
.text:0000706C ; ===========================================================================
.text:0000706C
.text:0000706C ; Segment type: Pure code
.text:0000706C ; Segment permissions: Read/Execute
.text:0000706C _text           segment para public 'CODE' use32
.text:0000706C                 assume cs:_text
.text:0000706C                 ;org 706Ch
.text:0000706C ; COMDAT (pick any)
.text:0000706C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000706C
.text:0000706C ; =============== S U B R O U T I N E =======================================
.text:0000706C
.text:0000706C ; Attributes: bp-based frame
.text:0000706C
.text:0000706C ; public: class CMyComPtr<struct ISequentialInStream> & __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::operator[](unsigned int)
.text:0000706C                 public ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z
.text:0000706C ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z proc near
.text:0000706C                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+2DCp
.text:0000706C                                         ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+C3p ...
.text:0000706C
.text:0000706C var_4           = dword ptr -4
.text:0000706C arg_0           = dword ptr  8
.text:0000706C
.text:0000706C                 push    ebp
.text:0000706D                 mov     ebp, esp
.text:0000706F                 push    ecx
.text:00007070                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007077                 mov     [ebp+var_4], ecx
.text:0000707A                 mov     eax, [ebp+arg_0]
.text:0000707D                 push    eax
.text:0000707E                 mov     ecx, [ebp+var_4]
.text:00007081                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007086                 mov     eax, [eax]
.text:00007088                 add     esp, 4
.text:0000708B                 cmp     ebp, esp
.text:0000708D                 call    __RTC_CheckEsp
.text:00007092                 mov     esp, ebp
.text:00007094                 pop     ebp
.text:00007095                 retn    4
.text:00007095 ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z endp
.text:00007095
.text:00007095 _text           ends
.text:00007095
.text:00007098 ; ===========================================================================
.text:00007098
.text:00007098 ; Segment type: Pure code
.text:00007098 ; Segment permissions: Read/Execute
.text:00007098 _text           segment para public 'CODE' use32
.text:00007098                 assume cs:_text
.text:00007098                 ;org 7098h
.text:00007098 ; COMDAT (pick any)
.text:00007098                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007098
.text:00007098 ; =============== S U B R O U T I N E =======================================
.text:00007098
.text:00007098 ; Attributes: bp-based frame
.text:00007098
.text:00007098 ; public: unsigned int __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::Add(class CMyComPtr<struct ISequentialInStream> const &)
.text:00007098                 public ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEIABV?$CMyComPtr@UISequentialInStream@@@@@Z
.text:00007098 ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEIABV?$CMyComPtr@UISequentialInStream@@@@@Z proc near
.text:00007098                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1DDp
.text:00007098
.text:00007098 var_C           = dword ptr -0Ch
.text:00007098 var_8           = dword ptr -8
.text:00007098 var_4           = dword ptr -4
.text:00007098 arg_0           = dword ptr  8
.text:00007098
.text:00007098                 push    ebp
.text:00007099                 mov     ebp, esp
.text:0000709B                 sub     esp, 0Ch
.text:0000709E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000070A5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000070AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000070B3                 mov     [ebp+var_4], ecx
.text:000070B6                 push    4               ; unsigned int
.text:000070B8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000070BD                 add     esp, 4
.text:000070C0                 mov     [ebp+var_8], eax
.text:000070C3                 cmp     [ebp+var_8], 0
.text:000070C7                 jz      short loc_70DA
.text:000070C9                 mov     eax, [ebp+arg_0]
.text:000070CC                 push    eax
.text:000070CD                 mov     ecx, [ebp+var_8]
.text:000070D0                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(CMyComPtr<ISequentialInStream> const &)
.text:000070D5                 mov     [ebp+var_C], eax
.text:000070D8                 jmp     short loc_70E1
.text:000070DA ; ---------------------------------------------------------------------------
.text:000070DA
.text:000070DA loc_70DA:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::Add(CMyComPtr<ISequentialInStream> const &)+2Fj
.text:000070DA                 mov     [ebp+var_C], 0
.text:000070E1
.text:000070E1 loc_70E1:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::Add(CMyComPtr<ISequentialInStream> const &)+40j
.text:000070E1                 mov     ecx, [ebp+var_C]
.text:000070E4                 push    ecx
.text:000070E5                 mov     ecx, [ebp+var_4]
.text:000070E8                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000070ED                 add     esp, 0Ch
.text:000070F0                 cmp     ebp, esp
.text:000070F2                 call    __RTC_CheckEsp
.text:000070F7                 mov     esp, ebp
.text:000070F9                 pop     ebp
.text:000070FA                 retn    4
.text:000070FA ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEIABV?$CMyComPtr@UISequentialInStream@@@@@Z endp
.text:000070FA
.text:000070FA ; ---------------------------------------------------------------------------
.text:000070FD                 align 10h
.text:000070FD _text           ends
.text:000070FD
.text:00007100 ; ===========================================================================
.text:00007100
.text:00007100 ; Segment type: Pure code
.text:00007100 ; Segment permissions: Read/Execute
.text:00007100 _text           segment para public 'CODE' use32
.text:00007100                 assume cs:_text
.text:00007100                 ;org 7100h
.text:00007100 ; COMDAT (pick any)
.text:00007100                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007100
.text:00007100 ; =============== S U B R O U T I N E =======================================
.text:00007100
.text:00007100 ; Attributes: bp-based frame
.text:00007100
.text:00007100 ; public: class CMyComPtr<struct ISequentialInStream> & __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::AddNew(void)
.text:00007100                 public ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
.text:00007100 ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ proc near
.text:00007100                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+10Cp
.text:00007100
.text:00007100 var_20          = dword ptr -20h
.text:00007100 var_1C          = dword ptr -1Ch
.text:00007100 var_18          = dword ptr -18h
.text:00007100 var_14          = dword ptr -14h
.text:00007100 var_10          = dword ptr -10h
.text:00007100 var_C           = dword ptr -0Ch
.text:00007100 var_4           = dword ptr -4
.text:00007100
.text:00007100                 push    ebp
.text:00007101                 mov     ebp, esp
.text:00007103                 push    0FFFFFFFFh
.text:00007105                 push    offset __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
.text:0000710A                 mov     eax, large fs:0
.text:00007110                 push    eax
.text:00007111                 sub     esp, 14h
.text:00007114                 mov     eax, 0CCCCCCCCh
.text:00007119                 mov     [ebp+var_20], eax
.text:0000711C                 mov     [ebp+var_1C], eax
.text:0000711F                 mov     [ebp+var_18], eax
.text:00007122                 mov     [ebp+var_14], eax
.text:00007125                 mov     [ebp+var_10], eax
.text:00007128                 mov     eax, dword ptr ds:___security_cookie
.text:0000712D                 xor     eax, ebp
.text:0000712F                 push    eax
.text:00007130                 lea     eax, [ebp+var_C]
.text:00007133                 mov     large fs:0, eax
.text:00007139                 mov     [ebp+var_10], ecx
.text:0000713C                 push    4               ; unsigned int
.text:0000713E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00007143                 add     esp, 4
.text:00007146                 mov     [ebp+var_1C], eax
.text:00007149                 mov     [ebp+var_4], 0
.text:00007150                 cmp     [ebp+var_1C], 0
.text:00007154                 jz      short loc_7163
.text:00007156                 mov     ecx, [ebp+var_1C]
.text:00007159                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000715E                 mov     [ebp+var_20], eax
.text:00007161                 jmp     short loc_716A
.text:00007163 ; ---------------------------------------------------------------------------
.text:00007163
.text:00007163 loc_7163:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::AddNew(void)+54j
.text:00007163                 mov     [ebp+var_20], 0
.text:0000716A
.text:0000716A loc_716A:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::AddNew(void)+61j
.text:0000716A                 mov     eax, [ebp+var_20]
.text:0000716D                 mov     [ebp+var_18], eax
.text:00007170                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007177                 mov     ecx, [ebp+var_18]
.text:0000717A                 mov     [ebp+var_14], ecx
.text:0000717D                 mov     edx, [ebp+var_14]
.text:00007180                 push    edx
.text:00007181                 mov     ecx, [ebp+var_10]
.text:00007184                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00007189                 mov     eax, [ebp+var_14]
.text:0000718C                 mov     ecx, [ebp+var_C]
.text:0000718F                 mov     large fs:0, ecx
.text:00007196                 pop     ecx
.text:00007197                 add     esp, 20h
.text:0000719A                 cmp     ebp, esp
.text:0000719C                 call    __RTC_CheckEsp
.text:000071A1                 mov     esp, ebp
.text:000071A3                 pop     ebp
.text:000071A4                 retn
.text:000071A4 ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ endp
.text:000071A4
.text:000071A4 ; ---------------------------------------------------------------------------
.text:000071A5                 align 4
.text:000071A5 _text           ends
.text:000071A5
.text$x:000071A8 ; ===========================================================================
.text$x:000071A8
.text$x:000071A8 ; Segment type: Pure code
.text$x:000071A8 ; Segment permissions: Read/Execute
.text$x:000071A8 _text$x         segment para public 'CODE' use32
.text$x:000071A8                 assume cs:_text$x
.text$x:000071A8                 ;org 71A8h
.text$x:000071A8 ; COMDAT (pick associative to section at 7100)
.text$x:000071A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000071A8
.text$x:000071A8 ; =============== S U B R O U T I N E =======================================
.text$x:000071A8
.text$x:000071A8
.text$x:000071A8 __unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0 proc near
.text$x:000071A8                                         ; DATA XREF: .xdata$x:000071D4o
.text$x:000071A8                 mov     eax, [ebp-1Ch]
.text$x:000071AB                 push    eax             ; void *
.text$x:000071AC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000071B1                 pop     ecx
.text$x:000071B2                 retn
.text$x:000071B2 __unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0 endp
.text$x:000071B2
.text$x:000071B3
.text$x:000071B3 ; =============== S U B R O U T I N E =======================================
.text$x:000071B3
.text$x:000071B3
.text$x:000071B3 __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ proc near
.text$x:000071B3                                         ; DATA XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::AddNew(void)+5o
.text$x:000071B3
.text$x:000071B3 arg_4           = dword ptr  8
.text$x:000071B3
.text$x:000071B3                 mov     edx, [esp+arg_4]
.text$x:000071B7                 lea     eax, [edx+0Ch]
.text$x:000071BA                 mov     ecx, [edx-18h]
.text$x:000071BD                 xor     ecx, eax
.text$x:000071BF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000071C4                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
.text$x:000071C9                 jmp     ___CxxFrameHandler3
.text$x:000071C9 __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ endp
.text$x:000071C9
.text$x:000071C9 ; ---------------------------------------------------------------------------
.text$x:000071CE                 align 10h
.text$x:000071CE _text$x         ends
.text$x:000071CE
.xdata$x:000071D0 ; ===========================================================================
.xdata$x:000071D0
.xdata$x:000071D0 ; Segment type: Pure data
.xdata$x:000071D0 ; Segment permissions: Read
.xdata$x:000071D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000071D0                 assume cs:_xdata$x
.xdata$x:000071D0                 ;org 71D0h
.xdata$x:000071D0 ; COMDAT (pick associative to section at 7100)
.xdata$x:000071D0 __unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ db 0FFh
.xdata$x:000071D0                                         ; DATA XREF: .xdata$x:000071E0o
.xdata$x:000071D1                 db 0FFh
.xdata$x:000071D2                 db 0FFh
.xdata$x:000071D3                 db 0FFh
.xdata$x:000071D4                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0
.xdata$x:000071D8 __ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ db  22h ; "
.xdata$x:000071D8                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ+11o
.xdata$x:000071D9                 db    5
.xdata$x:000071DA                 db  93h ; ô
.xdata$x:000071DB                 db  19h
.xdata$x:000071DC                 db    1
.xdata$x:000071DD                 db    0
.xdata$x:000071DE                 db    0
.xdata$x:000071DF                 db    0
.xdata$x:000071E0                 dd offset __unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
.xdata$x:000071E4                 db    0
.xdata$x:000071E5                 db    0
.xdata$x:000071E6                 db    0
.xdata$x:000071E7                 db    0
.xdata$x:000071E8                 db    0
.xdata$x:000071E9                 db    0
.xdata$x:000071EA                 db    0
.xdata$x:000071EB                 db    0
.xdata$x:000071EC                 db    0
.xdata$x:000071ED                 db    0
.xdata$x:000071EE                 db    0
.xdata$x:000071EF                 db    0
.xdata$x:000071F0                 db    0
.xdata$x:000071F1                 db    0
.xdata$x:000071F2                 db    0
.xdata$x:000071F3                 db    0
.xdata$x:000071F4                 db    0
.xdata$x:000071F5                 db    0
.xdata$x:000071F6                 db    0
.xdata$x:000071F7                 db    0
.xdata$x:000071F8                 db    1
.xdata$x:000071F9                 db    0
.xdata$x:000071FA                 db    0
.xdata$x:000071FB                 db    0
.xdata$x:000071FB _xdata$x        ends
.xdata$x:000071FB
.text:000071FC ; ===========================================================================
.text:000071FC
.text:000071FC ; Segment type: Pure code
.text:000071FC ; Segment permissions: Read/Execute
.text:000071FC _text           segment para public 'CODE' use32
.text:000071FC                 assume cs:_text
.text:000071FC                 ;org 71FCh
.text:000071FC ; COMDAT (pick any)
.text:000071FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000071FC
.text:000071FC ; =============== S U B R O U T I N E =======================================
.text:000071FC
.text:000071FC ; Attributes: bp-based frame
.text:000071FC
.text:000071FC ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::~CObjectVector<class CMyComPtr<struct ISequentialInStream>>(void)
.text:000071FC                 public ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text:000071FC ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ proc near
.text:000071FC                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1C6p
.text:000071FC                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+270p ...
.text:000071FC
.text:000071FC var_20          = dword ptr -20h
.text:000071FC var_1C          = dword ptr -1Ch
.text:000071FC var_18          = dword ptr -18h
.text:000071FC var_14          = dword ptr -14h
.text:000071FC var_10          = dword ptr -10h
.text:000071FC var_C           = dword ptr -0Ch
.text:000071FC var_4           = dword ptr -4
.text:000071FC
.text:000071FC                 push    ebp
.text:000071FD                 mov     ebp, esp
.text:000071FF                 push    0FFFFFFFFh
.text:00007201                 push    offset __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text:00007206                 mov     eax, large fs:0
.text:0000720C                 push    eax
.text:0000720D                 sub     esp, 14h
.text:00007210                 mov     eax, 0CCCCCCCCh
.text:00007215                 mov     [ebp+var_20], eax
.text:00007218                 mov     [ebp+var_1C], eax
.text:0000721B                 mov     [ebp+var_18], eax
.text:0000721E                 mov     [ebp+var_14], eax
.text:00007221                 mov     [ebp+var_10], eax
.text:00007224                 mov     eax, dword ptr ds:___security_cookie
.text:00007229                 xor     eax, ebp
.text:0000722B                 push    eax
.text:0000722C                 lea     eax, [ebp+var_C]
.text:0000722F                 mov     large fs:0, eax
.text:00007235                 mov     [ebp+var_10], ecx
.text:00007238                 mov     [ebp+var_4], 0
.text:0000723F                 mov     ecx, [ebp+var_10]
.text:00007242                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00007247                 mov     [ebp+var_14], eax
.text:0000724A
.text:0000724A loc_724A:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void):loc_728Cj
.text:0000724A                 cmp     [ebp+var_14], 0
.text:0000724E                 jz      short loc_728E
.text:00007250                 mov     eax, [ebp+var_14]
.text:00007253                 sub     eax, 1
.text:00007256                 mov     [ebp+var_14], eax
.text:00007259                 mov     ecx, [ebp+var_14]
.text:0000725C                 push    ecx
.text:0000725D                 mov     ecx, [ebp+var_10]
.text:00007260                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007265                 mov     edx, [eax]
.text:00007267                 mov     [ebp+var_1C], edx
.text:0000726A                 mov     eax, [ebp+var_1C]
.text:0000726D                 mov     [ebp+var_18], eax
.text:00007270                 cmp     [ebp+var_18], 0
.text:00007274                 jz      short loc_7285
.text:00007276                 push    1
.text:00007278                 mov     ecx, [ebp+var_18]
.text:0000727B                 call    ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'(uint)
.text:00007280                 mov     [ebp+var_20], eax
.text:00007283                 jmp     short loc_728C
.text:00007285 ; ---------------------------------------------------------------------------
.text:00007285
.text:00007285 loc_7285:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+78j
.text:00007285                 mov     [ebp+var_20], 0
.text:0000728C
.text:0000728C loc_728C:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+87j
.text:0000728C                 jmp     short loc_724A
.text:0000728E ; ---------------------------------------------------------------------------
.text:0000728E
.text:0000728E loc_728E:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+52j
.text:0000728E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007295                 mov     ecx, [ebp+var_10]
.text:00007298                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000729D                 mov     ecx, [ebp+var_C]
.text:000072A0                 mov     large fs:0, ecx
.text:000072A7                 pop     ecx
.text:000072A8                 add     esp, 20h
.text:000072AB                 cmp     ebp, esp
.text:000072AD                 call    __RTC_CheckEsp
.text:000072B2                 mov     esp, ebp
.text:000072B4                 pop     ebp
.text:000072B5                 retn
.text:000072B5 ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ endp
.text:000072B5
.text:000072B5 ; ---------------------------------------------------------------------------
.text:000072B6                 align 4
.text:000072B6 _text           ends
.text:000072B6
.text$x:000072B8 ; ===========================================================================
.text$x:000072B8
.text$x:000072B8 ; Segment type: Pure code
.text$x:000072B8 ; Segment permissions: Read/Execute
.text$x:000072B8 _text$x         segment para public 'CODE' use32
.text$x:000072B8                 assume cs:_text$x
.text$x:000072B8                 ;org 72B8h
.text$x:000072B8 ; COMDAT (pick associative to section at 71FC)
.text$x:000072B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000072B8
.text$x:000072B8 ; =============== S U B R O U T I N E =======================================
.text$x:000072B8
.text$x:000072B8
.text$x:000072B8 __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0 proc near
.text$x:000072B8                                         ; DATA XREF: .xdata$x:000072E0o
.text$x:000072B8                 mov     ecx, [ebp-10h]
.text$x:000072BB                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000072BB __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0 endp
.text$x:000072BB
.text$x:000072C0
.text$x:000072C0 ; =============== S U B R O U T I N E =======================================
.text$x:000072C0
.text$x:000072C0
.text$x:000072C0 __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ proc near
.text$x:000072C0                                         ; DATA XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+5o
.text$x:000072C0
.text$x:000072C0 arg_4           = dword ptr  8
.text$x:000072C0
.text$x:000072C0                 mov     edx, [esp+arg_4]
.text$x:000072C4                 lea     eax, [edx+0Ch]
.text$x:000072C7                 mov     ecx, [edx-18h]
.text$x:000072CA                 xor     ecx, eax
.text$x:000072CC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000072D1                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text$x:000072D6                 jmp     ___CxxFrameHandler3
.text$x:000072D6 __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ endp
.text$x:000072D6
.text$x:000072D6 ; ---------------------------------------------------------------------------
.text$x:000072DB                 align 4
.text$x:000072DB _text$x         ends
.text$x:000072DB
.xdata$x:000072DC ; ===========================================================================
.xdata$x:000072DC
.xdata$x:000072DC ; Segment type: Pure data
.xdata$x:000072DC ; Segment permissions: Read
.xdata$x:000072DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000072DC                 assume cs:_xdata$x
.xdata$x:000072DC                 ;org 72DCh
.xdata$x:000072DC ; COMDAT (pick associative to section at 71FC)
.xdata$x:000072DC __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ db 0FFh
.xdata$x:000072DC                                         ; DATA XREF: .xdata$x:000072ECo
.xdata$x:000072DD                 db 0FFh
.xdata$x:000072DE                 db 0FFh
.xdata$x:000072DF                 db 0FFh
.xdata$x:000072E0                 dd offset __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0
.xdata$x:000072E4 __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ db  22h ; "
.xdata$x:000072E4                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ+11o
.xdata$x:000072E5                 db    5
.xdata$x:000072E6                 db  93h ; ô
.xdata$x:000072E7                 db  19h
.xdata$x:000072E8                 db    1
.xdata$x:000072E9                 db    0
.xdata$x:000072EA                 db    0
.xdata$x:000072EB                 db    0
.xdata$x:000072EC                 dd offset __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.xdata$x:000072F0                 db    0
.xdata$x:000072F1                 db    0
.xdata$x:000072F2                 db    0
.xdata$x:000072F3                 db    0
.xdata$x:000072F4                 db    0
.xdata$x:000072F5                 db    0
.xdata$x:000072F6                 db    0
.xdata$x:000072F7                 db    0
.xdata$x:000072F8                 db    0
.xdata$x:000072F9                 db    0
.xdata$x:000072FA                 db    0
.xdata$x:000072FB                 db    0
.xdata$x:000072FC                 db    0
.xdata$x:000072FD                 db    0
.xdata$x:000072FE                 db    0
.xdata$x:000072FF                 db    0
.xdata$x:00007300                 db    0
.xdata$x:00007301                 db    0
.xdata$x:00007302                 db    0
.xdata$x:00007303                 db    0
.xdata$x:00007304                 db    1
.xdata$x:00007305                 db    0
.xdata$x:00007306                 db    0
.xdata$x:00007307                 db    0
.xdata$x:00007307 _xdata$x        ends
.xdata$x:00007307
.text:00007308 ; ===========================================================================
.text:00007308
.text:00007308 ; Segment type: Pure code
.text:00007308 ; Segment permissions: Read/Execute
.text:00007308 _text           segment para public 'CODE' use32
.text:00007308                 assume cs:_text
.text:00007308                 ;org 7308h
.text:00007308 ; COMDAT (pick any)
.text:00007308                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007308
.text:00007308 ; =============== S U B R O U T I N E =======================================
.text:00007308
.text:00007308 ; Attributes: bp-based frame
.text:00007308
.text:00007308 ; public: void __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::Clear(void)
.text:00007308                 public ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEXXZ
.text:00007308 ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEXXZ proc near
.text:00007308                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+E7p
.text:00007308
.text:00007308 var_14          = dword ptr -14h
.text:00007308 var_10          = dword ptr -10h
.text:00007308 var_C           = dword ptr -0Ch
.text:00007308 var_8           = dword ptr -8
.text:00007308 var_4           = dword ptr -4
.text:00007308
.text:00007308                 push    ebp
.text:00007309                 mov     ebp, esp
.text:0000730B                 sub     esp, 14h
.text:0000730E                 mov     eax, 0CCCCCCCCh
.text:00007313                 mov     [ebp+var_14], eax
.text:00007316                 mov     [ebp+var_10], eax
.text:00007319                 mov     [ebp+var_C], eax
.text:0000731C                 mov     [ebp+var_8], eax
.text:0000731F                 mov     [ebp+var_4], eax
.text:00007322                 mov     [ebp+var_4], ecx
.text:00007325                 mov     ecx, [ebp+var_4]
.text:00007328                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000732D                 mov     [ebp+var_8], eax
.text:00007330
.text:00007330 loc_7330:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::Clear(void):loc_7372j
.text:00007330                 cmp     [ebp+var_8], 0
.text:00007334                 jz      short loc_7374
.text:00007336                 mov     eax, [ebp+var_8]
.text:00007339                 sub     eax, 1
.text:0000733C                 mov     [ebp+var_8], eax
.text:0000733F                 mov     ecx, [ebp+var_8]
.text:00007342                 push    ecx
.text:00007343                 mov     ecx, [ebp+var_4]
.text:00007346                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000734B                 mov     edx, [eax]
.text:0000734D                 mov     [ebp+var_10], edx
.text:00007350                 mov     eax, [ebp+var_10]
.text:00007353                 mov     [ebp+var_C], eax
.text:00007356                 cmp     [ebp+var_C], 0
.text:0000735A                 jz      short loc_736B
.text:0000735C                 push    1
.text:0000735E                 mov     ecx, [ebp+var_C]
.text:00007361                 call    ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'(uint)
.text:00007366                 mov     [ebp+var_14], eax
.text:00007369                 jmp     short loc_7372
.text:0000736B ; ---------------------------------------------------------------------------
.text:0000736B
.text:0000736B loc_736B:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::Clear(void)+52j
.text:0000736B                 mov     [ebp+var_14], 0
.text:00007372
.text:00007372 loc_7372:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::Clear(void)+61j
.text:00007372                 jmp     short loc_7330
.text:00007374 ; ---------------------------------------------------------------------------
.text:00007374
.text:00007374 loc_7374:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::Clear(void)+2Cj
.text:00007374                 mov     ecx, [ebp+var_4]
.text:00007377                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:0000737C                 add     esp, 14h
.text:0000737F                 cmp     ebp, esp
.text:00007381                 call    __RTC_CheckEsp
.text:00007386                 mov     esp, ebp
.text:00007388                 pop     ebp
.text:00007389                 retn
.text:00007389 ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEXXZ endp
.text:00007389
.text:00007389 ; ---------------------------------------------------------------------------
.text:0000738A                 align 4
.text:0000738A _text           ends
.text:0000738A
.text:0000738C ; ===========================================================================
.text:0000738C
.text:0000738C ; Segment type: Pure code
.text:0000738C ; Segment permissions: Read/Execute
.text:0000738C _text           segment para public 'CODE' use32
.text:0000738C                 assume cs:_text
.text:0000738C                 ;org 738Ch
.text:0000738C ; COMDAT (pick any)
.text:0000738C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000738C
.text:0000738C ; =============== S U B R O U T I N E =======================================
.text:0000738C
.text:0000738C ; Attributes: bp-based frame
.text:0000738C
.text:0000738C ; public: unsigned int __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::Size(void)const
.text:0000738C                 public ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QBEIXZ
.text:0000738C ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QBEIXZ proc near
.text:0000738C                                         ; CODE XREF: NCoderMixer2::CCoderMT::Release(void)+7Fp
.text:0000738C
.text:0000738C var_4           = dword ptr -4
.text:0000738C
.text:0000738C                 push    ebp
.text:0000738D                 mov     ebp, esp
.text:0000738F                 push    ecx
.text:00007390                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007397                 mov     [ebp+var_4], ecx
.text:0000739A                 mov     ecx, [ebp+var_4]
.text:0000739D                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000073A2                 add     esp, 4
.text:000073A5                 cmp     ebp, esp
.text:000073A7                 call    __RTC_CheckEsp
.text:000073AC                 mov     esp, ebp
.text:000073AE                 pop     ebp
.text:000073AF                 retn
.text:000073AF ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QBEIXZ endp
.text:000073AF
.text:000073AF _text           ends
.text:000073AF
.text:000073B0 ; ===========================================================================
.text:000073B0
.text:000073B0 ; Segment type: Pure code
.text:000073B0 ; Segment permissions: Read/Execute
.text:000073B0 _text           segment para public 'CODE' use32
.text:000073B0                 assume cs:_text
.text:000073B0                 ;org 73B0h
.text:000073B0 ; COMDAT (pick any)
.text:000073B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000073B0
.text:000073B0 ; =============== S U B R O U T I N E =======================================
.text:000073B0
.text:000073B0 ; Attributes: bp-based frame
.text:000073B0
.text:000073B0 ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::CObjectVector<class CMyComPtr<struct ISequentialOutStream>>(void)
.text:000073B0                 public ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text:000073B0 ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ proc near
.text:000073B0                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+7Cp
.text:000073B0                                         ; NCoderMixer2::CCoderMT::CCoderMT(void)+8Ep
.text:000073B0
.text:000073B0 var_4           = dword ptr -4
.text:000073B0
.text:000073B0                 push    ebp
.text:000073B1                 mov     ebp, esp
.text:000073B3                 push    ecx
.text:000073B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000073BB                 mov     [ebp+var_4], ecx
.text:000073BE                 mov     ecx, [ebp+var_4]
.text:000073C1                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000073C6                 mov     eax, [ebp+var_4]
.text:000073C9                 add     esp, 4
.text:000073CC                 cmp     ebp, esp
.text:000073CE                 call    __RTC_CheckEsp
.text:000073D3                 mov     esp, ebp
.text:000073D5                 pop     ebp
.text:000073D6                 retn
.text:000073D6 ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ endp
.text:000073D6
.text:000073D6 ; ---------------------------------------------------------------------------
.text:000073D7                 align 4
.text:000073D7 _text           ends
.text:000073D7
.text:000073D8 ; ===========================================================================
.text:000073D8
.text:000073D8 ; Segment type: Pure code
.text:000073D8 ; Segment permissions: Read/Execute
.text:000073D8 _text           segment para public 'CODE' use32
.text:000073D8                 assume cs:_text
.text:000073D8                 ;org 73D8h
.text:000073D8 ; COMDAT (pick any)
.text:000073D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000073D8
.text:000073D8 ; =============== S U B R O U T I N E =======================================
.text:000073D8
.text:000073D8 ; Attributes: bp-based frame
.text:000073D8
.text:000073D8 ; public: class CMyComPtr<struct ISequentialOutStream> & __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::operator[](unsigned int)
.text:000073D8                 public ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z
.text:000073D8 ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z proc near
.text:000073D8                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+317p
.text:000073D8                                         ; NCoderMixer2::CCoderMT::Code(ICompressProgressInfo *)+101p ...
.text:000073D8
.text:000073D8 var_4           = dword ptr -4
.text:000073D8 arg_0           = dword ptr  8
.text:000073D8
.text:000073D8                 push    ebp
.text:000073D9                 mov     ebp, esp
.text:000073DB                 push    ecx
.text:000073DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000073E3                 mov     [ebp+var_4], ecx
.text:000073E6                 mov     eax, [ebp+arg_0]
.text:000073E9                 push    eax
.text:000073EA                 mov     ecx, [ebp+var_4]
.text:000073ED                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000073F2                 mov     eax, [eax]
.text:000073F4                 add     esp, 4
.text:000073F7                 cmp     ebp, esp
.text:000073F9                 call    __RTC_CheckEsp
.text:000073FE                 mov     esp, ebp
.text:00007400                 pop     ebp
.text:00007401                 retn    4
.text:00007401 ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z endp
.text:00007401
.text:00007401 _text           ends
.text:00007401
.text:00007404 ; ===========================================================================
.text:00007404
.text:00007404 ; Segment type: Pure code
.text:00007404 ; Segment permissions: Read/Execute
.text:00007404 _text           segment para public 'CODE' use32
.text:00007404                 assume cs:_text
.text:00007404                 ;org 7404h
.text:00007404 ; COMDAT (pick any)
.text:00007404                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007404
.text:00007404 ; =============== S U B R O U T I N E =======================================
.text:00007404
.text:00007404 ; Attributes: bp-based frame
.text:00007404
.text:00007404 ; public: unsigned int __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::Add(class CMyComPtr<struct ISequentialOutStream> const &)
.text:00007404                 public ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z
.text:00007404 ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z proc near
.text:00007404                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+287p
.text:00007404
.text:00007404 var_C           = dword ptr -0Ch
.text:00007404 var_8           = dword ptr -8
.text:00007404 var_4           = dword ptr -4
.text:00007404 arg_0           = dword ptr  8
.text:00007404
.text:00007404                 push    ebp
.text:00007405                 mov     ebp, esp
.text:00007407                 sub     esp, 0Ch
.text:0000740A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00007411                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007418                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000741F                 mov     [ebp+var_4], ecx
.text:00007422                 push    4               ; unsigned int
.text:00007424                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00007429                 add     esp, 4
.text:0000742C                 mov     [ebp+var_8], eax
.text:0000742F                 cmp     [ebp+var_8], 0
.text:00007433                 jz      short loc_7446
.text:00007435                 mov     eax, [ebp+arg_0]
.text:00007438                 push    eax
.text:00007439                 mov     ecx, [ebp+var_8]
.text:0000743C                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(CMyComPtr<ISequentialOutStream> const &)
.text:00007441                 mov     [ebp+var_C], eax
.text:00007444                 jmp     short loc_744D
.text:00007446 ; ---------------------------------------------------------------------------
.text:00007446
.text:00007446 loc_7446:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Add(CMyComPtr<ISequentialOutStream> const &)+2Fj
.text:00007446                 mov     [ebp+var_C], 0
.text:0000744D
.text:0000744D loc_744D:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Add(CMyComPtr<ISequentialOutStream> const &)+40j
.text:0000744D                 mov     ecx, [ebp+var_C]
.text:00007450                 push    ecx
.text:00007451                 mov     ecx, [ebp+var_4]
.text:00007454                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00007459                 add     esp, 0Ch
.text:0000745C                 cmp     ebp, esp
.text:0000745E                 call    __RTC_CheckEsp
.text:00007463                 mov     esp, ebp
.text:00007465                 pop     ebp
.text:00007466                 retn    4
.text:00007466 ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z endp
.text:00007466
.text:00007466 ; ---------------------------------------------------------------------------
.text:00007469                 align 4
.text:00007469 _text           ends
.text:00007469
.text:0000746C ; ===========================================================================
.text:0000746C
.text:0000746C ; Segment type: Pure code
.text:0000746C ; Segment permissions: Read/Execute
.text:0000746C _text           segment para public 'CODE' use32
.text:0000746C                 assume cs:_text
.text:0000746C                 ;org 746Ch
.text:0000746C ; COMDAT (pick any)
.text:0000746C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000746C
.text:0000746C ; =============== S U B R O U T I N E =======================================
.text:0000746C
.text:0000746C ; Attributes: bp-based frame
.text:0000746C
.text:0000746C ; public: class CMyComPtr<struct ISequentialOutStream> & __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::AddNew(void)
.text:0000746C                 public ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ
.text:0000746C ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ proc near
.text:0000746C                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+13Ep
.text:0000746C
.text:0000746C var_20          = dword ptr -20h
.text:0000746C var_1C          = dword ptr -1Ch
.text:0000746C var_18          = dword ptr -18h
.text:0000746C var_14          = dword ptr -14h
.text:0000746C var_10          = dword ptr -10h
.text:0000746C var_C           = dword ptr -0Ch
.text:0000746C var_4           = dword ptr -4
.text:0000746C
.text:0000746C                 push    ebp
.text:0000746D                 mov     ebp, esp
.text:0000746F                 push    0FFFFFFFFh
.text:00007471                 push    offset __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ
.text:00007476                 mov     eax, large fs:0
.text:0000747C                 push    eax
.text:0000747D                 sub     esp, 14h
.text:00007480                 mov     eax, 0CCCCCCCCh
.text:00007485                 mov     [ebp+var_20], eax
.text:00007488                 mov     [ebp+var_1C], eax
.text:0000748B                 mov     [ebp+var_18], eax
.text:0000748E                 mov     [ebp+var_14], eax
.text:00007491                 mov     [ebp+var_10], eax
.text:00007494                 mov     eax, dword ptr ds:___security_cookie
.text:00007499                 xor     eax, ebp
.text:0000749B                 push    eax
.text:0000749C                 lea     eax, [ebp+var_C]
.text:0000749F                 mov     large fs:0, eax
.text:000074A5                 mov     [ebp+var_10], ecx
.text:000074A8                 push    4               ; unsigned int
.text:000074AA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000074AF                 add     esp, 4
.text:000074B2                 mov     [ebp+var_1C], eax
.text:000074B5                 mov     [ebp+var_4], 0
.text:000074BC                 cmp     [ebp+var_1C], 0
.text:000074C0                 jz      short loc_74CF
.text:000074C2                 mov     ecx, [ebp+var_1C]
.text:000074C5                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:000074CA                 mov     [ebp+var_20], eax
.text:000074CD                 jmp     short loc_74D6
.text:000074CF ; ---------------------------------------------------------------------------
.text:000074CF
.text:000074CF loc_74CF:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::AddNew(void)+54j
.text:000074CF                 mov     [ebp+var_20], 0
.text:000074D6
.text:000074D6 loc_74D6:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::AddNew(void)+61j
.text:000074D6                 mov     eax, [ebp+var_20]
.text:000074D9                 mov     [ebp+var_18], eax
.text:000074DC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000074E3                 mov     ecx, [ebp+var_18]
.text:000074E6                 mov     [ebp+var_14], ecx
.text:000074E9                 mov     edx, [ebp+var_14]
.text:000074EC                 push    edx
.text:000074ED                 mov     ecx, [ebp+var_10]
.text:000074F0                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000074F5                 mov     eax, [ebp+var_14]
.text:000074F8                 mov     ecx, [ebp+var_C]
.text:000074FB                 mov     large fs:0, ecx
.text:00007502                 pop     ecx
.text:00007503                 add     esp, 20h
.text:00007506                 cmp     ebp, esp
.text:00007508                 call    __RTC_CheckEsp
.text:0000750D                 mov     esp, ebp
.text:0000750F                 pop     ebp
.text:00007510                 retn
.text:00007510 ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ endp
.text:00007510
.text:00007510 ; ---------------------------------------------------------------------------
.text:00007511                 align 4
.text:00007511 _text           ends
.text:00007511
.text$x:00007514 ; ===========================================================================
.text$x:00007514
.text$x:00007514 ; Segment type: Pure code
.text$x:00007514 ; Segment permissions: Read/Execute
.text$x:00007514 _text$x         segment para public 'CODE' use32
.text$x:00007514                 assume cs:_text$x
.text$x:00007514                 ;org 7514h
.text$x:00007514 ; COMDAT (pick associative to section at 746C)
.text$x:00007514                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007514
.text$x:00007514 ; =============== S U B R O U T I N E =======================================
.text$x:00007514
.text$x:00007514
.text$x:00007514 __unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ$0 proc near
.text$x:00007514                                         ; DATA XREF: .xdata$x:00007540o
.text$x:00007514                 mov     eax, [ebp-1Ch]
.text$x:00007517                 push    eax             ; void *
.text$x:00007518                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000751D                 pop     ecx
.text$x:0000751E                 retn
.text$x:0000751E __unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ$0 endp
.text$x:0000751E
.text$x:0000751F
.text$x:0000751F ; =============== S U B R O U T I N E =======================================
.text$x:0000751F
.text$x:0000751F
.text$x:0000751F __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ proc near
.text$x:0000751F                                         ; DATA XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::AddNew(void)+5o
.text$x:0000751F
.text$x:0000751F arg_4           = dword ptr  8
.text$x:0000751F
.text$x:0000751F                 mov     edx, [esp+arg_4]
.text$x:00007523                 lea     eax, [edx+0Ch]
.text$x:00007526                 mov     ecx, [edx-18h]
.text$x:00007529                 xor     ecx, eax
.text$x:0000752B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007530                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ
.text$x:00007535                 jmp     ___CxxFrameHandler3
.text$x:00007535 __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ endp
.text$x:00007535
.text$x:00007535 ; ---------------------------------------------------------------------------
.text$x:0000753A                 align 4
.text$x:0000753A _text$x         ends
.text$x:0000753A
.xdata$x:0000753C ; ===========================================================================
.xdata$x:0000753C
.xdata$x:0000753C ; Segment type: Pure data
.xdata$x:0000753C ; Segment permissions: Read
.xdata$x:0000753C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000753C                 assume cs:_xdata$x
.xdata$x:0000753C                 ;org 753Ch
.xdata$x:0000753C ; COMDAT (pick associative to section at 746C)
.xdata$x:0000753C __unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ db 0FFh
.xdata$x:0000753C                                         ; DATA XREF: .xdata$x:0000754Co
.xdata$x:0000753D                 db 0FFh
.xdata$x:0000753E                 db 0FFh
.xdata$x:0000753F                 db 0FFh
.xdata$x:00007540                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ$0
.xdata$x:00007544 __ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ db  22h ; "
.xdata$x:00007544                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ+11o
.xdata$x:00007545                 db    5
.xdata$x:00007546                 db  93h ; ô
.xdata$x:00007547                 db  19h
.xdata$x:00007548                 db    1
.xdata$x:00007549                 db    0
.xdata$x:0000754A                 db    0
.xdata$x:0000754B                 db    0
.xdata$x:0000754C                 dd offset __unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@XZ
.xdata$x:00007550                 db    0
.xdata$x:00007551                 db    0
.xdata$x:00007552                 db    0
.xdata$x:00007553                 db    0
.xdata$x:00007554                 db    0
.xdata$x:00007555                 db    0
.xdata$x:00007556                 db    0
.xdata$x:00007557                 db    0
.xdata$x:00007558                 db    0
.xdata$x:00007559                 db    0
.xdata$x:0000755A                 db    0
.xdata$x:0000755B                 db    0
.xdata$x:0000755C                 db    0
.xdata$x:0000755D                 db    0
.xdata$x:0000755E                 db    0
.xdata$x:0000755F                 db    0
.xdata$x:00007560                 db    0
.xdata$x:00007561                 db    0
.xdata$x:00007562                 db    0
.xdata$x:00007563                 db    0
.xdata$x:00007564                 db    1
.xdata$x:00007565                 db    0
.xdata$x:00007566                 db    0
.xdata$x:00007567                 db    0
.xdata$x:00007567 _xdata$x        ends
.xdata$x:00007567
.text:00007568 ; ===========================================================================
.text:00007568
.text:00007568 ; Segment type: Pure code
.text:00007568 ; Segment permissions: Read/Execute
.text:00007568 _text           segment para public 'CODE' use32
.text:00007568                 assume cs:_text
.text:00007568                 ;org 7568h
.text:00007568 ; COMDAT (pick any)
.text:00007568                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007568
.text:00007568 ; =============== S U B R O U T I N E =======================================
.text:00007568
.text:00007568 ; Attributes: bp-based frame
.text:00007568
.text:00007568 ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::~CObjectVector<class CMyComPtr<struct ISequentialOutStream>>(void)
.text:00007568                 public ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text:00007568 ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ proc near
.text:00007568                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+1B7p
.text:00007568                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+261p ...
.text:00007568
.text:00007568 var_20          = dword ptr -20h
.text:00007568 var_1C          = dword ptr -1Ch
.text:00007568 var_18          = dword ptr -18h
.text:00007568 var_14          = dword ptr -14h
.text:00007568 var_10          = dword ptr -10h
.text:00007568 var_C           = dword ptr -0Ch
.text:00007568 var_4           = dword ptr -4
.text:00007568
.text:00007568                 push    ebp
.text:00007569                 mov     ebp, esp
.text:0000756B                 push    0FFFFFFFFh
.text:0000756D                 push    offset __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text:00007572                 mov     eax, large fs:0
.text:00007578                 push    eax
.text:00007579                 sub     esp, 14h
.text:0000757C                 mov     eax, 0CCCCCCCCh
.text:00007581                 mov     [ebp+var_20], eax
.text:00007584                 mov     [ebp+var_1C], eax
.text:00007587                 mov     [ebp+var_18], eax
.text:0000758A                 mov     [ebp+var_14], eax
.text:0000758D                 mov     [ebp+var_10], eax
.text:00007590                 mov     eax, dword ptr ds:___security_cookie
.text:00007595                 xor     eax, ebp
.text:00007597                 push    eax
.text:00007598                 lea     eax, [ebp+var_C]
.text:0000759B                 mov     large fs:0, eax
.text:000075A1                 mov     [ebp+var_10], ecx
.text:000075A4                 mov     [ebp+var_4], 0
.text:000075AB                 mov     ecx, [ebp+var_10]
.text:000075AE                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000075B3                 mov     [ebp+var_14], eax
.text:000075B6
.text:000075B6 loc_75B6:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void):loc_75F8j
.text:000075B6                 cmp     [ebp+var_14], 0
.text:000075BA                 jz      short loc_75FA
.text:000075BC                 mov     eax, [ebp+var_14]
.text:000075BF                 sub     eax, 1
.text:000075C2                 mov     [ebp+var_14], eax
.text:000075C5                 mov     ecx, [ebp+var_14]
.text:000075C8                 push    ecx
.text:000075C9                 mov     ecx, [ebp+var_10]
.text:000075CC                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000075D1                 mov     edx, [eax]
.text:000075D3                 mov     [ebp+var_1C], edx
.text:000075D6                 mov     eax, [ebp+var_1C]
.text:000075D9                 mov     [ebp+var_18], eax
.text:000075DC                 cmp     [ebp+var_18], 0
.text:000075E0                 jz      short loc_75F1
.text:000075E2                 push    1
.text:000075E4                 mov     ecx, [ebp+var_18]
.text:000075E7                 call    ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'(uint)
.text:000075EC                 mov     [ebp+var_20], eax
.text:000075EF                 jmp     short loc_75F8
.text:000075F1 ; ---------------------------------------------------------------------------
.text:000075F1
.text:000075F1 loc_75F1:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+78j
.text:000075F1                 mov     [ebp+var_20], 0
.text:000075F8
.text:000075F8 loc_75F8:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+87j
.text:000075F8                 jmp     short loc_75B6
.text:000075FA ; ---------------------------------------------------------------------------
.text:000075FA
.text:000075FA loc_75FA:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+52j
.text:000075FA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007601                 mov     ecx, [ebp+var_10]
.text:00007604                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00007609                 mov     ecx, [ebp+var_C]
.text:0000760C                 mov     large fs:0, ecx
.text:00007613                 pop     ecx
.text:00007614                 add     esp, 20h
.text:00007617                 cmp     ebp, esp
.text:00007619                 call    __RTC_CheckEsp
.text:0000761E                 mov     esp, ebp
.text:00007620                 pop     ebp
.text:00007621                 retn
.text:00007621 ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ endp
.text:00007621
.text:00007621 ; ---------------------------------------------------------------------------
.text:00007622                 align 4
.text:00007622 _text           ends
.text:00007622
.text$x:00007624 ; ===========================================================================
.text$x:00007624
.text$x:00007624 ; Segment type: Pure code
.text$x:00007624 ; Segment permissions: Read/Execute
.text$x:00007624 _text$x         segment para public 'CODE' use32
.text$x:00007624                 assume cs:_text$x
.text$x:00007624                 ;org 7624h
.text$x:00007624 ; COMDAT (pick associative to section at 7568)
.text$x:00007624                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007624
.text$x:00007624 ; =============== S U B R O U T I N E =======================================
.text$x:00007624
.text$x:00007624
.text$x:00007624 __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0 proc near
.text$x:00007624                                         ; DATA XREF: .xdata$x:0000764Co
.text$x:00007624                 mov     ecx, [ebp-10h]
.text$x:00007627                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00007627 __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0 endp
.text$x:00007627
.text$x:0000762C
.text$x:0000762C ; =============== S U B R O U T I N E =======================================
.text$x:0000762C
.text$x:0000762C
.text$x:0000762C __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ proc near
.text$x:0000762C                                         ; DATA XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+5o
.text$x:0000762C
.text$x:0000762C arg_4           = dword ptr  8
.text$x:0000762C
.text$x:0000762C                 mov     edx, [esp+arg_4]
.text$x:00007630                 lea     eax, [edx+0Ch]
.text$x:00007633                 mov     ecx, [edx-18h]
.text$x:00007636                 xor     ecx, eax
.text$x:00007638                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000763D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text$x:00007642                 jmp     ___CxxFrameHandler3
.text$x:00007642 __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ endp
.text$x:00007642
.text$x:00007642 ; ---------------------------------------------------------------------------
.text$x:00007647                 align 4
.text$x:00007647 _text$x         ends
.text$x:00007647
.xdata$x:00007648 ; ===========================================================================
.xdata$x:00007648
.xdata$x:00007648 ; Segment type: Pure data
.xdata$x:00007648 ; Segment permissions: Read
.xdata$x:00007648 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007648                 assume cs:_xdata$x
.xdata$x:00007648                 ;org 7648h
.xdata$x:00007648 ; COMDAT (pick associative to section at 7568)
.xdata$x:00007648 __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ db 0FFh
.xdata$x:00007648                                         ; DATA XREF: .xdata$x:00007658o
.xdata$x:00007649                 db 0FFh
.xdata$x:0000764A                 db 0FFh
.xdata$x:0000764B                 db 0FFh
.xdata$x:0000764C                 dd offset __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0
.xdata$x:00007650 __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ db  22h ; "
.xdata$x:00007650                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ+11o
.xdata$x:00007651                 db    5
.xdata$x:00007652                 db  93h ; ô
.xdata$x:00007653                 db  19h
.xdata$x:00007654                 db    1
.xdata$x:00007655                 db    0
.xdata$x:00007656                 db    0
.xdata$x:00007657                 db    0
.xdata$x:00007658                 dd offset __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.xdata$x:0000765C                 db    0
.xdata$x:0000765D                 db    0
.xdata$x:0000765E                 db    0
.xdata$x:0000765F                 db    0
.xdata$x:00007660                 db    0
.xdata$x:00007661                 db    0
.xdata$x:00007662                 db    0
.xdata$x:00007663                 db    0
.xdata$x:00007664                 db    0
.xdata$x:00007665                 db    0
.xdata$x:00007666                 db    0
.xdata$x:00007667                 db    0
.xdata$x:00007668                 db    0
.xdata$x:00007669                 db    0
.xdata$x:0000766A                 db    0
.xdata$x:0000766B                 db    0
.xdata$x:0000766C                 db    0
.xdata$x:0000766D                 db    0
.xdata$x:0000766E                 db    0
.xdata$x:0000766F                 db    0
.xdata$x:00007670                 db    1
.xdata$x:00007671                 db    0
.xdata$x:00007672                 db    0
.xdata$x:00007673                 db    0
.xdata$x:00007673 _xdata$x        ends
.xdata$x:00007673
.text:00007674 ; ===========================================================================
.text:00007674
.text:00007674 ; Segment type: Pure code
.text:00007674 ; Segment permissions: Read/Execute
.text:00007674 _text           segment para public 'CODE' use32
.text:00007674                 assume cs:_text
.text:00007674                 ;org 7674h
.text:00007674 ; COMDAT (pick any)
.text:00007674                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007674
.text:00007674 ; =============== S U B R O U T I N E =======================================
.text:00007674
.text:00007674 ; Attributes: bp-based frame
.text:00007674
.text:00007674 ; public: void __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::Clear(void)
.text:00007674                 public ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEXXZ
.text:00007674 ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEXXZ proc near
.text:00007674                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+119p
.text:00007674
.text:00007674 var_14          = dword ptr -14h
.text:00007674 var_10          = dword ptr -10h
.text:00007674 var_C           = dword ptr -0Ch
.text:00007674 var_8           = dword ptr -8
.text:00007674 var_4           = dword ptr -4
.text:00007674
.text:00007674                 push    ebp
.text:00007675                 mov     ebp, esp
.text:00007677                 sub     esp, 14h
.text:0000767A                 mov     eax, 0CCCCCCCCh
.text:0000767F                 mov     [ebp+var_14], eax
.text:00007682                 mov     [ebp+var_10], eax
.text:00007685                 mov     [ebp+var_C], eax
.text:00007688                 mov     [ebp+var_8], eax
.text:0000768B                 mov     [ebp+var_4], eax
.text:0000768E                 mov     [ebp+var_4], ecx
.text:00007691                 mov     ecx, [ebp+var_4]
.text:00007694                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00007699                 mov     [ebp+var_8], eax
.text:0000769C
.text:0000769C loc_769C:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Clear(void):loc_76DEj
.text:0000769C                 cmp     [ebp+var_8], 0
.text:000076A0                 jz      short loc_76E0
.text:000076A2                 mov     eax, [ebp+var_8]
.text:000076A5                 sub     eax, 1
.text:000076A8                 mov     [ebp+var_8], eax
.text:000076AB                 mov     ecx, [ebp+var_8]
.text:000076AE                 push    ecx
.text:000076AF                 mov     ecx, [ebp+var_4]
.text:000076B2                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000076B7                 mov     edx, [eax]
.text:000076B9                 mov     [ebp+var_10], edx
.text:000076BC                 mov     eax, [ebp+var_10]
.text:000076BF                 mov     [ebp+var_C], eax
.text:000076C2                 cmp     [ebp+var_C], 0
.text:000076C6                 jz      short loc_76D7
.text:000076C8                 push    1
.text:000076CA                 mov     ecx, [ebp+var_C]
.text:000076CD                 call    ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'(uint)
.text:000076D2                 mov     [ebp+var_14], eax
.text:000076D5                 jmp     short loc_76DE
.text:000076D7 ; ---------------------------------------------------------------------------
.text:000076D7
.text:000076D7 loc_76D7:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Clear(void)+52j
.text:000076D7                 mov     [ebp+var_14], 0
.text:000076DE
.text:000076DE loc_76DE:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Clear(void)+61j
.text:000076DE                 jmp     short loc_769C
.text:000076E0 ; ---------------------------------------------------------------------------
.text:000076E0
.text:000076E0 loc_76E0:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Clear(void)+2Cj
.text:000076E0                 mov     ecx, [ebp+var_4]
.text:000076E3                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:000076E8                 add     esp, 14h
.text:000076EB                 cmp     ebp, esp
.text:000076ED                 call    __RTC_CheckEsp
.text:000076F2                 mov     esp, ebp
.text:000076F4                 pop     ebp
.text:000076F5                 retn
.text:000076F5 ?Clear@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEXXZ endp
.text:000076F5
.text:000076F5 ; ---------------------------------------------------------------------------
.text:000076F6                 align 4
.text:000076F6 _text           ends
.text:000076F6
.text:000076F8 ; ===========================================================================
.text:000076F8
.text:000076F8 ; Segment type: Pure code
.text:000076F8 ; Segment permissions: Read/Execute
.text:000076F8 _text           segment para public 'CODE' use32
.text:000076F8                 assume cs:_text
.text:000076F8                 ;org 76F8h
.text:000076F8 ; COMDAT (pick any)
.text:000076F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000076F8
.text:000076F8 ; =============== S U B R O U T I N E =======================================
.text:000076F8
.text:000076F8 ; Attributes: bp-based frame
.text:000076F8
.text:000076F8 ; public: unsigned int __thiscall CObjectVector<class CStreamBinder>::Size(void)const
.text:000076F8                 public ?Size@?$CObjectVector@VCStreamBinder@@@@QBEIXZ
.text:000076F8 ?Size@?$CObjectVector@VCStreamBinder@@@@QBEIXZ proc near
.text:000076F8                                         ; CODE XREF: NCoderMixer2::CMixerMT::ReInit(void)+2Fp
.text:000076F8
.text:000076F8 var_4           = dword ptr -4
.text:000076F8
.text:000076F8                 push    ebp
.text:000076F9                 mov     ebp, esp
.text:000076FB                 push    ecx
.text:000076FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007703                 mov     [ebp+var_4], ecx
.text:00007706                 mov     ecx, [ebp+var_4]
.text:00007709                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000770E                 add     esp, 4
.text:00007711                 cmp     ebp, esp
.text:00007713                 call    __RTC_CheckEsp
.text:00007718                 mov     esp, ebp
.text:0000771A                 pop     ebp
.text:0000771B                 retn
.text:0000771B ?Size@?$CObjectVector@VCStreamBinder@@@@QBEIXZ endp
.text:0000771B
.text:0000771B _text           ends
.text:0000771B
.text:0000771C ; ===========================================================================
.text:0000771C
.text:0000771C ; Segment type: Pure code
.text:0000771C ; Segment permissions: Read/Execute
.text:0000771C _text           segment para public 'CODE' use32
.text:0000771C                 assume cs:_text
.text:0000771C                 ;org 771Ch
.text:0000771C ; COMDAT (pick any)
.text:0000771C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000771C
.text:0000771C ; =============== S U B R O U T I N E =======================================
.text:0000771C
.text:0000771C ; Attributes: bp-based frame
.text:0000771C
.text:0000771C ; public: class CStreamBinder const & __thiscall CObjectVector<class CStreamBinder>::operator[](unsigned int)const
.text:0000771C                 public ??A?$CObjectVector@VCStreamBinder@@@@QBEABVCStreamBinder@@I@Z
.text:0000771C ??A?$CObjectVector@VCStreamBinder@@@@QBEABVCStreamBinder@@I@Z proc near
.text:0000771C                                         ; CODE XREF: NCoderMixer2::CMixerMT::GetBondStreamSize(uint)+18p
.text:0000771C
.text:0000771C var_4           = dword ptr -4
.text:0000771C arg_0           = dword ptr  8
.text:0000771C
.text:0000771C                 push    ebp
.text:0000771D                 mov     ebp, esp
.text:0000771F                 push    ecx
.text:00007720                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007727                 mov     [ebp+var_4], ecx
.text:0000772A                 mov     eax, [ebp+arg_0]
.text:0000772D                 push    eax
.text:0000772E                 mov     ecx, [ebp+var_4]
.text:00007731                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007736                 mov     eax, [eax]
.text:00007738                 add     esp, 4
.text:0000773B                 cmp     ebp, esp
.text:0000773D                 call    __RTC_CheckEsp
.text:00007742                 mov     esp, ebp
.text:00007744                 pop     ebp
.text:00007745                 retn    4
.text:00007745 ??A?$CObjectVector@VCStreamBinder@@@@QBEABVCStreamBinder@@I@Z endp
.text:00007745
.text:00007745 _text           ends
.text:00007745
.text:00007748 ; ===========================================================================
.text:00007748
.text:00007748 ; Segment type: Pure code
.text:00007748 ; Segment permissions: Read/Execute
.text:00007748 _text           segment para public 'CODE' use32
.text:00007748                 assume cs:_text
.text:00007748                 ;org 7748h
.text:00007748 ; COMDAT (pick any)
.text:00007748                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007748
.text:00007748 ; =============== S U B R O U T I N E =======================================
.text:00007748
.text:00007748 ; Attributes: bp-based frame
.text:00007748
.text:00007748 ; public: class CStreamBinder & __thiscall CObjectVector<class CStreamBinder>::operator[](unsigned int)
.text:00007748                 public ??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z
.text:00007748 ??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z proc near
.text:00007748                                         ; CODE XREF: NCoderMixer2::CMixerMT::ReInit(void)+43p
.text:00007748                                         ; NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+297p
.text:00007748
.text:00007748 var_4           = dword ptr -4
.text:00007748 arg_0           = dword ptr  8
.text:00007748
.text:00007748                 push    ebp
.text:00007749                 mov     ebp, esp
.text:0000774B                 push    ecx
.text:0000774C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007753                 mov     [ebp+var_4], ecx
.text:00007756                 mov     eax, [ebp+arg_0]
.text:00007759                 push    eax
.text:0000775A                 mov     ecx, [ebp+var_4]
.text:0000775D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007762                 mov     eax, [eax]
.text:00007764                 add     esp, 4
.text:00007767                 cmp     ebp, esp
.text:00007769                 call    __RTC_CheckEsp
.text:0000776E                 mov     esp, ebp
.text:00007770                 pop     ebp
.text:00007771                 retn    4
.text:00007771 ??A?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@I@Z endp
.text:00007771
.text:00007771 _text           ends
.text:00007771
.text:00007774 ; ===========================================================================
.text:00007774
.text:00007774 ; Segment type: Pure code
.text:00007774 ; Segment permissions: Read/Execute
.text:00007774 _text           segment para public 'CODE' use32
.text:00007774                 assume cs:_text
.text:00007774                 ;org 7774h
.text:00007774 ; COMDAT (pick any)
.text:00007774                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007774
.text:00007774 ; =============== S U B R O U T I N E =======================================
.text:00007774
.text:00007774 ; Attributes: bp-based frame
.text:00007774
.text:00007774 ; public: class CStreamBinder & __thiscall CObjectVector<class CStreamBinder>::AddNew(void)
.text:00007774                 public ?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ
.text:00007774 ?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ proc near
.text:00007774                                         ; CODE XREF: NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)+5Dp
.text:00007774
.text:00007774 var_20          = dword ptr -20h
.text:00007774 var_1C          = dword ptr -1Ch
.text:00007774 var_18          = dword ptr -18h
.text:00007774 var_14          = dword ptr -14h
.text:00007774 var_10          = dword ptr -10h
.text:00007774 var_C           = dword ptr -0Ch
.text:00007774 var_4           = dword ptr -4
.text:00007774
.text:00007774                 push    ebp
.text:00007775                 mov     ebp, esp
.text:00007777                 push    0FFFFFFFFh
.text:00007779                 push    offset __ehhandler$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ
.text:0000777E                 mov     eax, large fs:0
.text:00007784                 push    eax
.text:00007785                 sub     esp, 14h
.text:00007788                 mov     eax, 0CCCCCCCCh
.text:0000778D                 mov     [ebp+var_20], eax
.text:00007790                 mov     [ebp+var_1C], eax
.text:00007793                 mov     [ebp+var_18], eax
.text:00007796                 mov     [ebp+var_14], eax
.text:00007799                 mov     [ebp+var_10], eax
.text:0000779C                 mov     eax, dword ptr ds:___security_cookie
.text:000077A1                 xor     eax, ebp
.text:000077A3                 push    eax
.text:000077A4                 lea     eax, [ebp+var_C]
.text:000077A7                 mov     large fs:0, eax
.text:000077AD                 mov     [ebp+var_10], ecx
.text:000077B0                 push    20h ; ' '       ; unsigned int
.text:000077B2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000077B7                 add     esp, 4
.text:000077BA                 mov     [ebp+var_1C], eax
.text:000077BD                 mov     [ebp+var_4], 0
.text:000077C4                 cmp     [ebp+var_1C], 0
.text:000077C8                 jz      short loc_77D7
.text:000077CA                 mov     ecx, [ebp+var_1C]
.text:000077CD                 call    ??0CStreamBinder@@QAE@XZ ; CStreamBinder::CStreamBinder(void)
.text:000077D2                 mov     [ebp+var_20], eax
.text:000077D5                 jmp     short loc_77DE
.text:000077D7 ; ---------------------------------------------------------------------------
.text:000077D7
.text:000077D7 loc_77D7:                               ; CODE XREF: CObjectVector<CStreamBinder>::AddNew(void)+54j
.text:000077D7                 mov     [ebp+var_20], 0
.text:000077DE
.text:000077DE loc_77DE:                               ; CODE XREF: CObjectVector<CStreamBinder>::AddNew(void)+61j
.text:000077DE                 mov     eax, [ebp+var_20]
.text:000077E1                 mov     [ebp+var_18], eax
.text:000077E4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000077EB                 mov     ecx, [ebp+var_18]
.text:000077EE                 mov     [ebp+var_14], ecx
.text:000077F1                 mov     edx, [ebp+var_14]
.text:000077F4                 push    edx
.text:000077F5                 mov     ecx, [ebp+var_10]
.text:000077F8                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000077FD                 mov     eax, [ebp+var_14]
.text:00007800                 mov     ecx, [ebp+var_C]
.text:00007803                 mov     large fs:0, ecx
.text:0000780A                 pop     ecx
.text:0000780B                 add     esp, 20h
.text:0000780E                 cmp     ebp, esp
.text:00007810                 call    __RTC_CheckEsp
.text:00007815                 mov     esp, ebp
.text:00007817                 pop     ebp
.text:00007818                 retn
.text:00007818 ?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ endp
.text:00007818
.text:00007818 ; ---------------------------------------------------------------------------
.text:00007819                 align 4
.text:00007819 _text           ends
.text:00007819
.text$x:0000781C ; ===========================================================================
.text$x:0000781C
.text$x:0000781C ; Segment type: Pure code
.text$x:0000781C ; Segment permissions: Read/Execute
.text$x:0000781C _text$x         segment para public 'CODE' use32
.text$x:0000781C                 assume cs:_text$x
.text$x:0000781C                 ;org 781Ch
.text$x:0000781C ; COMDAT (pick associative to section at 7774)
.text$x:0000781C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000781C
.text$x:0000781C ; =============== S U B R O U T I N E =======================================
.text$x:0000781C
.text$x:0000781C
.text$x:0000781C __unwindfunclet$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ$0 proc near
.text$x:0000781C                                         ; DATA XREF: .xdata$x:00007848o
.text$x:0000781C                 mov     eax, [ebp-1Ch]
.text$x:0000781F                 push    eax             ; void *
.text$x:00007820                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00007825                 pop     ecx
.text$x:00007826                 retn
.text$x:00007826 __unwindfunclet$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ$0 endp
.text$x:00007826
.text$x:00007827
.text$x:00007827 ; =============== S U B R O U T I N E =======================================
.text$x:00007827
.text$x:00007827
.text$x:00007827 __ehhandler$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ proc near
.text$x:00007827                                         ; DATA XREF: CObjectVector<CStreamBinder>::AddNew(void)+5o
.text$x:00007827
.text$x:00007827 arg_4           = dword ptr  8
.text$x:00007827
.text$x:00007827                 mov     edx, [esp+arg_4]
.text$x:0000782B                 lea     eax, [edx+0Ch]
.text$x:0000782E                 mov     ecx, [edx-18h]
.text$x:00007831                 xor     ecx, eax
.text$x:00007833                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007838                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ
.text$x:0000783D                 jmp     ___CxxFrameHandler3
.text$x:0000783D __ehhandler$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ endp
.text$x:0000783D
.text$x:0000783D ; ---------------------------------------------------------------------------
.text$x:00007842                 align 4
.text$x:00007842 _text$x         ends
.text$x:00007842
.xdata$x:00007844 ; ===========================================================================
.xdata$x:00007844
.xdata$x:00007844 ; Segment type: Pure data
.xdata$x:00007844 ; Segment permissions: Read
.xdata$x:00007844 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007844                 assume cs:_xdata$x
.xdata$x:00007844                 ;org 7844h
.xdata$x:00007844 ; COMDAT (pick associative to section at 7774)
.xdata$x:00007844 __unwindtable$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ db 0FFh
.xdata$x:00007844                                         ; DATA XREF: .xdata$x:00007854o
.xdata$x:00007845                 db 0FFh
.xdata$x:00007846                 db 0FFh
.xdata$x:00007847                 db 0FFh
.xdata$x:00007848                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ$0
.xdata$x:0000784C __ehfuncinfo$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ db  22h ; "
.xdata$x:0000784C                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ+11o
.xdata$x:0000784D                 db    5
.xdata$x:0000784E                 db  93h ; ô
.xdata$x:0000784F                 db  19h
.xdata$x:00007850                 db    1
.xdata$x:00007851                 db    0
.xdata$x:00007852                 db    0
.xdata$x:00007853                 db    0
.xdata$x:00007854                 dd offset __unwindtable$?AddNew@?$CObjectVector@VCStreamBinder@@@@QAEAAVCStreamBinder@@XZ
.xdata$x:00007858                 db    0
.xdata$x:00007859                 db    0
.xdata$x:0000785A                 db    0
.xdata$x:0000785B                 db    0
.xdata$x:0000785C                 db    0
.xdata$x:0000785D                 db    0
.xdata$x:0000785E                 db    0
.xdata$x:0000785F                 db    0
.xdata$x:00007860                 db    0
.xdata$x:00007861                 db    0
.xdata$x:00007862                 db    0
.xdata$x:00007863                 db    0
.xdata$x:00007864                 db    0
.xdata$x:00007865                 db    0
.xdata$x:00007866                 db    0
.xdata$x:00007867                 db    0
.xdata$x:00007868                 db    0
.xdata$x:00007869                 db    0
.xdata$x:0000786A                 db    0
.xdata$x:0000786B                 db    0
.xdata$x:0000786C                 db    1
.xdata$x:0000786D                 db    0
.xdata$x:0000786E                 db    0
.xdata$x:0000786F                 db    0
.xdata$x:0000786F _xdata$x        ends
.xdata$x:0000786F
.text:00007870 ; ===========================================================================
.text:00007870
.text:00007870 ; Segment type: Pure code
.text:00007870 ; Segment permissions: Read/Execute
.text:00007870 _text           segment para public 'CODE' use32
.text:00007870                 assume cs:_text
.text:00007870                 ;org 7870h
.text:00007870 ; COMDAT (pick any)
.text:00007870                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007870
.text:00007870 ; =============== S U B R O U T I N E =======================================
.text:00007870
.text:00007870 ; Attributes: bp-based frame
.text:00007870
.text:00007870 ; public: void __thiscall CObjectVector<class CStreamBinder>::Clear(void)
.text:00007870                 public ?Clear@?$CObjectVector@VCStreamBinder@@@@QAEXXZ
.text:00007870 ?Clear@?$CObjectVector@VCStreamBinder@@@@QAEXXZ proc near
.text:00007870                                         ; CODE XREF: NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)+30p
.text:00007870
.text:00007870 var_14          = dword ptr -14h
.text:00007870 var_10          = dword ptr -10h
.text:00007870 var_C           = dword ptr -0Ch
.text:00007870 var_8           = dword ptr -8
.text:00007870 var_4           = dword ptr -4
.text:00007870
.text:00007870                 push    ebp
.text:00007871                 mov     ebp, esp
.text:00007873                 sub     esp, 14h
.text:00007876                 mov     eax, 0CCCCCCCCh
.text:0000787B                 mov     [ebp+var_14], eax
.text:0000787E                 mov     [ebp+var_10], eax
.text:00007881                 mov     [ebp+var_C], eax
.text:00007884                 mov     [ebp+var_8], eax
.text:00007887                 mov     [ebp+var_4], eax
.text:0000788A                 mov     [ebp+var_4], ecx
.text:0000788D                 mov     ecx, [ebp+var_4]
.text:00007890                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00007895                 mov     [ebp+var_8], eax
.text:00007898
.text:00007898 loc_7898:                               ; CODE XREF: CObjectVector<CStreamBinder>::Clear(void):loc_78DAj
.text:00007898                 cmp     [ebp+var_8], 0
.text:0000789C                 jz      short loc_78DC
.text:0000789E                 mov     eax, [ebp+var_8]
.text:000078A1                 sub     eax, 1
.text:000078A4                 mov     [ebp+var_8], eax
.text:000078A7                 mov     ecx, [ebp+var_8]
.text:000078AA                 push    ecx
.text:000078AB                 mov     ecx, [ebp+var_4]
.text:000078AE                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000078B3                 mov     edx, [eax]
.text:000078B5                 mov     [ebp+var_10], edx
.text:000078B8                 mov     eax, [ebp+var_10]
.text:000078BB                 mov     [ebp+var_C], eax
.text:000078BE                 cmp     [ebp+var_C], 0
.text:000078C2                 jz      short loc_78D3
.text:000078C4                 push    1
.text:000078C6                 mov     ecx, [ebp+var_C]
.text:000078C9                 call    ??_GCStreamBinder@@QAEPAXI@Z ; CStreamBinder::`scalar deleting destructor'(uint)
.text:000078CE                 mov     [ebp+var_14], eax
.text:000078D1                 jmp     short loc_78DA
.text:000078D3 ; ---------------------------------------------------------------------------
.text:000078D3
.text:000078D3 loc_78D3:                               ; CODE XREF: CObjectVector<CStreamBinder>::Clear(void)+52j
.text:000078D3                 mov     [ebp+var_14], 0
.text:000078DA
.text:000078DA loc_78DA:                               ; CODE XREF: CObjectVector<CStreamBinder>::Clear(void)+61j
.text:000078DA                 jmp     short loc_7898
.text:000078DC ; ---------------------------------------------------------------------------
.text:000078DC
.text:000078DC loc_78DC:                               ; CODE XREF: CObjectVector<CStreamBinder>::Clear(void)+2Cj
.text:000078DC                 mov     ecx, [ebp+var_4]
.text:000078DF                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:000078E4                 add     esp, 14h
.text:000078E7                 cmp     ebp, esp
.text:000078E9                 call    __RTC_CheckEsp
.text:000078EE                 mov     esp, ebp
.text:000078F0                 pop     ebp
.text:000078F1                 retn
.text:000078F1 ?Clear@?$CObjectVector@VCStreamBinder@@@@QAEXXZ endp
.text:000078F1
.text:000078F1 ; ---------------------------------------------------------------------------
.text:000078F2                 align 4
.text:000078F2 _text           ends
.text:000078F2
.text:000078F4 ; ===========================================================================
.text:000078F4
.text:000078F4 ; Segment type: Pure code
.text:000078F4 ; Segment permissions: Read/Execute
.text:000078F4 _text           segment para public 'CODE' use32
.text:000078F4                 assume cs:_text
.text:000078F4                 ;org 78F4h
.text:000078F4 ; COMDAT (pick any)
.text:000078F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000078F4
.text:000078F4 ; =============== S U B R O U T I N E =======================================
.text:000078F4
.text:000078F4 ; Attributes: bp-based frame
.text:000078F4
.text:000078F4 ; public: unsigned int __thiscall CObjectVector<class NCoderMixer2::CCoderMT>::Size(void)const
.text:000078F4                 public ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ
.text:000078F4 ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ proc near
.text:000078F4                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+59p
.text:000078F4                                         ; NCoderMixer2::CMixerMT::ReturnIfError(long)+2Fp ...
.text:000078F4
.text:000078F4 var_4           = dword ptr -4
.text:000078F4
.text:000078F4                 push    ebp
.text:000078F5                 mov     ebp, esp
.text:000078F7                 push    ecx
.text:000078F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078FF                 mov     [ebp+var_4], ecx
.text:00007902                 mov     ecx, [ebp+var_4]
.text:00007905                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000790A                 add     esp, 4
.text:0000790D                 cmp     ebp, esp
.text:0000790F                 call    __RTC_CheckEsp
.text:00007914                 mov     esp, ebp
.text:00007916                 pop     ebp
.text:00007917                 retn
.text:00007917 ?Size@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QBEIXZ endp
.text:00007917
.text:00007917 _text           ends
.text:00007917
.text:00007918 ; ===========================================================================
.text:00007918
.text:00007918 ; Segment type: Pure code
.text:00007918 ; Segment permissions: Read/Execute
.text:00007918 _text           segment para public 'CODE' use32
.text:00007918                 assume cs:_text
.text:00007918                 ;org 7918h
.text:00007918 ; COMDAT (pick any)
.text:00007918                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007918
.text:00007918 ; =============== S U B R O U T I N E =======================================
.text:00007918
.text:00007918 ; Attributes: bp-based frame
.text:00007918
.text:00007918 ; public: class NCoderMixer2::CCoderMT & __thiscall CObjectVector<class NCoderMixer2::CCoderMT>::operator[](unsigned int)
.text:00007918                 public ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z
.text:00007918 ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z proc near
.text:00007918                                         ; CODE XREF: NCoderMixer2::CMixerMT::GetCoder(uint)+28p
.text:00007918                                         ; NCoderMixer2::CMixerMT::SelectMainCoder(bool)+3Cp ...
.text:00007918
.text:00007918 var_4           = dword ptr -4
.text:00007918 arg_0           = dword ptr  8
.text:00007918
.text:00007918                 push    ebp
.text:00007919                 mov     ebp, esp
.text:0000791B                 push    ecx
.text:0000791C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007923                 mov     [ebp+var_4], ecx
.text:00007926                 mov     eax, [ebp+arg_0]
.text:00007929                 push    eax
.text:0000792A                 mov     ecx, [ebp+var_4]
.text:0000792D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007932                 mov     eax, [eax]
.text:00007934                 add     esp, 4
.text:00007937                 cmp     ebp, esp
.text:00007939                 call    __RTC_CheckEsp
.text:0000793E                 mov     esp, ebp
.text:00007940                 pop     ebp
.text:00007941                 retn    4
.text:00007941 ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z endp
.text:00007941
.text:00007941 _text           ends
.text:00007941
.text:00007944 ; ===========================================================================
.text:00007944
.text:00007944 ; Segment type: Pure code
.text:00007944 ; Segment permissions: Read/Execute
.text:00007944 _text           segment para public 'CODE' use32
.text:00007944                 assume cs:_text
.text:00007944                 ;org 7944h
.text:00007944 ; COMDAT (pick any)
.text:00007944                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007944
.text:00007944 ; =============== S U B R O U T I N E =======================================
.text:00007944
.text:00007944 ; Attributes: bp-based frame
.text:00007944
.text:00007944 ; public: class NCoderMixer2::CCoderMT & __thiscall CObjectVector<class NCoderMixer2::CCoderMT>::AddNew(void)
.text:00007944                 public ?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ
.text:00007944 ?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ proc near
.text:00007944                                         ; CODE XREF: NCoderMixer2::CMixerMT::AddCoder(CCreatedCoder const &)+43p
.text:00007944
.text:00007944 var_20          = dword ptr -20h
.text:00007944 var_1C          = dword ptr -1Ch
.text:00007944 var_18          = dword ptr -18h
.text:00007944 var_14          = dword ptr -14h
.text:00007944 var_10          = dword ptr -10h
.text:00007944 var_C           = dword ptr -0Ch
.text:00007944 var_4           = dword ptr -4
.text:00007944
.text:00007944                 push    ebp
.text:00007945                 mov     ebp, esp
.text:00007947                 push    0FFFFFFFFh
.text:00007949                 push    offset __ehhandler$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ
.text:0000794E                 mov     eax, large fs:0
.text:00007954                 push    eax
.text:00007955                 sub     esp, 14h
.text:00007958                 mov     eax, 0CCCCCCCCh
.text:0000795D                 mov     [ebp+var_20], eax
.text:00007960                 mov     [ebp+var_1C], eax
.text:00007963                 mov     [ebp+var_18], eax
.text:00007966                 mov     [ebp+var_14], eax
.text:00007969                 mov     [ebp+var_10], eax
.text:0000796C                 mov     eax, dword ptr ds:___security_cookie
.text:00007971                 xor     eax, ebp
.text:00007973                 push    eax
.text:00007974                 lea     eax, [ebp+var_C]
.text:00007977                 mov     large fs:0, eax
.text:0000797D                 mov     [ebp+var_10], ecx
.text:00007980                 push    88h ; 'ê'       ; unsigned int
.text:00007985                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000798A                 add     esp, 4
.text:0000798D                 mov     [ebp+var_1C], eax
.text:00007990                 mov     [ebp+var_4], 0
.text:00007997                 cmp     [ebp+var_1C], 0
.text:0000799B                 jz      short loc_79AA
.text:0000799D                 mov     ecx, [ebp+var_1C] ; this
.text:000079A0                 call    ??0CCoderMT@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoderMT::CCoderMT(void)
.text:000079A5                 mov     [ebp+var_20], eax
.text:000079A8                 jmp     short loc_79B1
.text:000079AA ; ---------------------------------------------------------------------------
.text:000079AA
.text:000079AA loc_79AA:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::AddNew(void)+57j
.text:000079AA                 mov     [ebp+var_20], 0
.text:000079B1
.text:000079B1 loc_79B1:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::AddNew(void)+64j
.text:000079B1                 mov     eax, [ebp+var_20]
.text:000079B4                 mov     [ebp+var_18], eax
.text:000079B7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000079BE                 mov     ecx, [ebp+var_18]
.text:000079C1                 mov     [ebp+var_14], ecx
.text:000079C4                 mov     edx, [ebp+var_14]
.text:000079C7                 push    edx
.text:000079C8                 mov     ecx, [ebp+var_10]
.text:000079CB                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000079D0                 mov     eax, [ebp+var_14]
.text:000079D3                 mov     ecx, [ebp+var_C]
.text:000079D6                 mov     large fs:0, ecx
.text:000079DD                 pop     ecx
.text:000079DE                 add     esp, 20h
.text:000079E1                 cmp     ebp, esp
.text:000079E3                 call    __RTC_CheckEsp
.text:000079E8                 mov     esp, ebp
.text:000079EA                 pop     ebp
.text:000079EB                 retn
.text:000079EB ?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ endp
.text:000079EB
.text:000079EB _text           ends
.text:000079EB
.text$x:000079EC ; ===========================================================================
.text$x:000079EC
.text$x:000079EC ; Segment type: Pure code
.text$x:000079EC ; Segment permissions: Read/Execute
.text$x:000079EC _text$x         segment para public 'CODE' use32
.text$x:000079EC                 assume cs:_text$x
.text$x:000079EC                 ;org 79ECh
.text$x:000079EC ; COMDAT (pick associative to section at 7944)
.text$x:000079EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000079EC
.text$x:000079EC ; =============== S U B R O U T I N E =======================================
.text$x:000079EC
.text$x:000079EC
.text$x:000079EC __unwindfunclet$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ$0 proc near
.text$x:000079EC                                         ; DATA XREF: .xdata$x:00007A18o
.text$x:000079EC                 mov     eax, [ebp-1Ch]
.text$x:000079EF                 push    eax             ; void *
.text$x:000079F0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000079F5                 pop     ecx
.text$x:000079F6                 retn
.text$x:000079F6 __unwindfunclet$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ$0 endp
.text$x:000079F6
.text$x:000079F7
.text$x:000079F7 ; =============== S U B R O U T I N E =======================================
.text$x:000079F7
.text$x:000079F7
.text$x:000079F7 __ehhandler$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ proc near
.text$x:000079F7                                         ; DATA XREF: CObjectVector<NCoderMixer2::CCoderMT>::AddNew(void)+5o
.text$x:000079F7
.text$x:000079F7 arg_4           = dword ptr  8
.text$x:000079F7
.text$x:000079F7                 mov     edx, [esp+arg_4]
.text$x:000079FB                 lea     eax, [edx+0Ch]
.text$x:000079FE                 mov     ecx, [edx-18h]
.text$x:00007A01                 xor     ecx, eax
.text$x:00007A03                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007A08                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ
.text$x:00007A0D                 jmp     ___CxxFrameHandler3
.text$x:00007A0D __ehhandler$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ endp
.text$x:00007A0D
.text$x:00007A0D ; ---------------------------------------------------------------------------
.text$x:00007A12                 align 4
.text$x:00007A12 _text$x         ends
.text$x:00007A12
.xdata$x:00007A14 ; ===========================================================================
.xdata$x:00007A14
.xdata$x:00007A14 ; Segment type: Pure data
.xdata$x:00007A14 ; Segment permissions: Read
.xdata$x:00007A14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007A14                 assume cs:_xdata$x
.xdata$x:00007A14                 ;org 7A14h
.xdata$x:00007A14 ; COMDAT (pick associative to section at 7944)
.xdata$x:00007A14 __unwindtable$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ db 0FFh
.xdata$x:00007A14                                         ; DATA XREF: .xdata$x:00007A24o
.xdata$x:00007A15                 db 0FFh
.xdata$x:00007A16                 db 0FFh
.xdata$x:00007A17                 db 0FFh
.xdata$x:00007A18                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ$0
.xdata$x:00007A1C __ehfuncinfo$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ db  22h ; "
.xdata$x:00007A1C                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ+11o
.xdata$x:00007A1D                 db    5
.xdata$x:00007A1E                 db  93h ; ô
.xdata$x:00007A1F                 db  19h
.xdata$x:00007A20                 db    1
.xdata$x:00007A21                 db    0
.xdata$x:00007A22                 db    0
.xdata$x:00007A23                 db    0
.xdata$x:00007A24                 dd offset __unwindtable$?AddNew@?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@XZ
.xdata$x:00007A28                 db    0
.xdata$x:00007A29                 db    0
.xdata$x:00007A2A                 db    0
.xdata$x:00007A2B                 db    0
.xdata$x:00007A2C                 db    0
.xdata$x:00007A2D                 db    0
.xdata$x:00007A2E                 db    0
.xdata$x:00007A2F                 db    0
.xdata$x:00007A30                 db    0
.xdata$x:00007A31                 db    0
.xdata$x:00007A32                 db    0
.xdata$x:00007A33                 db    0
.xdata$x:00007A34                 db    0
.xdata$x:00007A35                 db    0
.xdata$x:00007A36                 db    0
.xdata$x:00007A37                 db    0
.xdata$x:00007A38                 db    0
.xdata$x:00007A39                 db    0
.xdata$x:00007A3A                 db    0
.xdata$x:00007A3B                 db    0
.xdata$x:00007A3C                 db    1
.xdata$x:00007A3D                 db    0
.xdata$x:00007A3E                 db    0
.xdata$x:00007A3F                 db    0
.xdata$x:00007A3F _xdata$x        ends
.xdata$x:00007A3F
.text:00007A40 ; ===========================================================================
.text:00007A40
.text:00007A40 ; Segment type: Pure code
.text:00007A40 ; Segment permissions: Read/Execute
.text:00007A40 _text           segment para public 'CODE' use32
.text:00007A40                 assume cs:_text
.text:00007A40                 ;org 7A40h
.text:00007A40 ; COMDAT (pick any)
.text:00007A40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007A40
.text:00007A40 ; =============== S U B R O U T I N E =======================================
.text:00007A40
.text:00007A40 ; Attributes: bp-based frame
.text:00007A40
.text:00007A40 ; _DWORD __thiscall NCoderMixer2::CCoderMT::CCoderMT(NCoderMixer2::CCoderMT *__hidden this)
.text:00007A40                 public ??0CCoderMT@NCoderMixer2@@QAE@XZ
.text:00007A40 ??0CCoderMT@NCoderMixer2@@QAE@XZ proc near
.text:00007A40                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::AddNew(void)+5Cp
.text:00007A40
.text:00007A40 var_10          = dword ptr -10h
.text:00007A40 var_C           = dword ptr -0Ch
.text:00007A40 var_4           = dword ptr -4
.text:00007A40
.text:00007A40                 push    ebp
.text:00007A41                 mov     ebp, esp
.text:00007A43                 push    0FFFFFFFFh
.text:00007A45                 push    offset __ehhandler$??0CCoderMT@NCoderMixer2@@QAE@XZ
.text:00007A4A                 mov     eax, large fs:0
.text:00007A50                 push    eax
.text:00007A51                 push    ecx
.text:00007A52                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007A59                 mov     eax, dword ptr ds:___security_cookie
.text:00007A5E                 xor     eax, ebp
.text:00007A60                 push    eax
.text:00007A61                 lea     eax, [ebp+var_C]
.text:00007A64                 mov     large fs:0, eax
.text:00007A6A                 mov     [ebp+var_10], ecx
.text:00007A6D                 mov     ecx, [ebp+var_10]
.text:00007A70                 add     ecx, 18h        ; this
.text:00007A73                 call    ??0CCoder@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoder::CCoder(void)
.text:00007A78                 mov     [ebp+var_4], 0
.text:00007A7F                 mov     ecx, [ebp+var_10]
.text:00007A82                 call    ??0CVirtThread@@QAE@XZ ; CVirtThread::CVirtThread(void)
.text:00007A87                 mov     byte ptr [ebp+var_4], 1
.text:00007A8B                 mov     eax, [ebp+var_10]
.text:00007A8E                 mov     dword ptr [eax], offset ??_7CCoderMT@NCoderMixer2@@6B@ ; const NCoderMixer2::CCoderMT::`vftable'
.text:00007A94                 mov     ecx, [ebp+var_10]
.text:00007A97                 add     ecx, 50h ; 'P'
.text:00007A9A                 call    ??0?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::CRecordVector<ISequentialInStream *>(void)
.text:00007A9F                 mov     byte ptr [ebp+var_4], 2
.text:00007AA3                 mov     ecx, [ebp+var_10]
.text:00007AA6                 add     ecx, 5Ch ; '\'
.text:00007AA9                 call    ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>(void)
.text:00007AAE                 mov     byte ptr [ebp+var_4], 3
.text:00007AB2                 mov     ecx, [ebp+var_10]
.text:00007AB5                 mov     byte ptr [ecx+68h], 0
.text:00007AB9                 mov     ecx, [ebp+var_10]
.text:00007ABC                 add     ecx, 70h ; 'p'
.text:00007ABF                 call    ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:00007AC4                 mov     byte ptr [ebp+var_4], 4
.text:00007AC8                 mov     ecx, [ebp+var_10]
.text:00007ACB                 add     ecx, 7Ch ; '|'
.text:00007ACE                 call    ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:00007AD3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007ADA                 mov     eax, [ebp+var_10]
.text:00007ADD                 mov     ecx, [ebp+var_C]
.text:00007AE0                 mov     large fs:0, ecx
.text:00007AE7                 pop     ecx
.text:00007AE8                 add     esp, 10h
.text:00007AEB                 cmp     ebp, esp
.text:00007AED                 call    __RTC_CheckEsp
.text:00007AF2                 mov     esp, ebp
.text:00007AF4                 pop     ebp
.text:00007AF5                 retn
.text:00007AF5 ??0CCoderMT@NCoderMixer2@@QAE@XZ endp
.text:00007AF5
.text:00007AF5 ; ---------------------------------------------------------------------------
.text:00007AF6                 align 4
.text:00007AF6 _text           ends
.text:00007AF6
.text$x:00007AF8 ; ===========================================================================
.text$x:00007AF8
.text$x:00007AF8 ; Segment type: Pure code
.text$x:00007AF8 ; Segment permissions: Read/Execute
.text$x:00007AF8 _text$x         segment para public 'CODE' use32
.text$x:00007AF8                 assume cs:_text$x
.text$x:00007AF8                 ;org 7AF8h
.text$x:00007AF8 ; COMDAT (pick associative to section at 7A40)
.text$x:00007AF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007AF8
.text$x:00007AF8 ; =============== S U B R O U T I N E =======================================
.text$x:00007AF8
.text$x:00007AF8
.text$x:00007AF8 __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00007AF8                                         ; DATA XREF: .xdata$x:00007B78o
.text$x:00007AF8                 mov     ecx, [ebp-10h]
.text$x:00007AFB                 add     ecx, 18h        ; this
.text$x:00007AFE                 jmp     ??1CCoder@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoder::~CCoder(void)
.text$x:00007AFE __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00007AFE
.text$x:00007B03
.text$x:00007B03 ; =============== S U B R O U T I N E =======================================
.text$x:00007B03
.text$x:00007B03
.text$x:00007B03 __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00007B03                                         ; DATA XREF: .xdata$x:00007B80o
.text$x:00007B03                 mov     ecx, [ebp-10h]  ; this
.text$x:00007B06                 jmp     ??1CVirtThread@@QAE@XZ ; CVirtThread::~CVirtThread(void)
.text$x:00007B06 __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00007B06
.text$x:00007B0B
.text$x:00007B0B ; =============== S U B R O U T I N E =======================================
.text$x:00007B0B
.text$x:00007B0B
.text$x:00007B0B __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:00007B0B                                         ; DATA XREF: .xdata$x:00007B88o
.text$x:00007B0B                 mov     ecx, [ebp-10h]
.text$x:00007B0E                 add     ecx, 50h ; 'P'
.text$x:00007B11                 jmp     ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>(void)
.text$x:00007B11 __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00007B11
.text$x:00007B16
.text$x:00007B16 ; =============== S U B R O U T I N E =======================================
.text$x:00007B16
.text$x:00007B16
.text$x:00007B16 __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:00007B16                                         ; DATA XREF: .xdata$x:00007B90o
.text$x:00007B16                 mov     ecx, [ebp-10h]
.text$x:00007B19                 add     ecx, 5Ch ; '\'
.text$x:00007B1C                 jmp     ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text$x:00007B1C __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$3 endp
.text$x:00007B1C
.text$x:00007B21
.text$x:00007B21 ; =============== S U B R O U T I N E =======================================
.text$x:00007B21
.text$x:00007B21
.text$x:00007B21 __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$4 proc near
.text$x:00007B21                                         ; DATA XREF: .xdata$x:00007B98o
.text$x:00007B21                 mov     ecx, [ebp-10h]
.text$x:00007B24                 add     ecx, 70h ; 'p'
.text$x:00007B27                 jmp     ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text$x:00007B27 __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$4 endp
.text$x:00007B27
.text$x:00007B2C
.text$x:00007B2C ; =============== S U B R O U T I N E =======================================
.text$x:00007B2C
.text$x:00007B2C
.text$x:00007B2C __ehhandler$??0CCoderMT@NCoderMixer2@@QAE@XZ proc near
.text$x:00007B2C                                         ; DATA XREF: NCoderMixer2::CCoderMT::CCoderMT(void)+5o
.text$x:00007B2C
.text$x:00007B2C arg_4           = dword ptr  8
.text$x:00007B2C
.text$x:00007B2C                 mov     edx, [esp+arg_4]
.text$x:00007B30                 lea     eax, [edx+0Ch]
.text$x:00007B33                 mov     ecx, [edx-8]
.text$x:00007B36                 xor     ecx, eax
.text$x:00007B38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007B3D                 mov     eax, offset __ehfuncinfo$??0CCoderMT@NCoderMixer2@@QAE@XZ
.text$x:00007B42                 jmp     ___CxxFrameHandler3
.text$x:00007B42 __ehhandler$??0CCoderMT@NCoderMixer2@@QAE@XZ endp
.text$x:00007B42
.text$x:00007B42 ; ---------------------------------------------------------------------------
.text$x:00007B47                 align 4
.text$x:00007B47 _text$x         ends
.text$x:00007B47
.rdata:00007B48 ; ===========================================================================
.rdata:00007B48
.rdata:00007B48 ; Segment type: Pure data
.rdata:00007B48 ; Segment permissions: Read
.rdata:00007B48 _rdata          segment dword public 'DATA' use32
.rdata:00007B48                 assume cs:_rdata
.rdata:00007B48                 ;org 7B48h
.rdata:00007B48 ; COMDAT (pick largest)
.rdata:00007B48                 dd offset ??_R4CCoderMT@NCoderMixer2@@6B@ ; const NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
.rdata:00007B4C                 public ??_7CCoderMT@NCoderMixer2@@6B@
.rdata:00007B4C ; const NCoderMixer2::CCoderMT::`vftable'
.rdata:00007B4C ??_7CCoderMT@NCoderMixer2@@6B@ dd offset ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.rdata:00007B4C                                         ; DATA XREF: NCoderMixer2::CCoderMT::CCoderMT(void)+4Eo
.rdata:00007B4C _rdata          ends                    ; NCoderMixer2::CCoderMT::Execute(void)
.rdata:00007B4C
.xdata$x:00007B50 ; ===========================================================================
.xdata$x:00007B50
.xdata$x:00007B50 ; Segment type: Pure data
.xdata$x:00007B50 ; Segment permissions: Read
.xdata$x:00007B50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007B50                 assume cs:_xdata$x
.xdata$x:00007B50                 ;org 7B50h
.xdata$x:00007B50 ; COMDAT (pick associative to section at 7A40)
.xdata$x:00007B50 __ehfuncinfo$??0CCoderMT@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00007B50                                         ; DATA XREF: __ehhandler$??0CCoderMT@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00007B51                 db    5
.xdata$x:00007B52                 db  93h ; ô
.xdata$x:00007B53                 db  19h
.xdata$x:00007B54                 db    5
.xdata$x:00007B55                 db    0
.xdata$x:00007B56                 db    0
.xdata$x:00007B57                 db    0
.xdata$x:00007B58                 dd offset __unwindtable$??0CCoderMT@NCoderMixer2@@QAE@XZ
.xdata$x:00007B5C                 db    0
.xdata$x:00007B5D                 db    0
.xdata$x:00007B5E                 db    0
.xdata$x:00007B5F                 db    0
.xdata$x:00007B60                 db    0
.xdata$x:00007B61                 db    0
.xdata$x:00007B62                 db    0
.xdata$x:00007B63                 db    0
.xdata$x:00007B64                 db    0
.xdata$x:00007B65                 db    0
.xdata$x:00007B66                 db    0
.xdata$x:00007B67                 db    0
.xdata$x:00007B68                 db    0
.xdata$x:00007B69                 db    0
.xdata$x:00007B6A                 db    0
.xdata$x:00007B6B                 db    0
.xdata$x:00007B6C                 db    0
.xdata$x:00007B6D                 db    0
.xdata$x:00007B6E                 db    0
.xdata$x:00007B6F                 db    0
.xdata$x:00007B70                 db    1
.xdata$x:00007B71                 db    0
.xdata$x:00007B72                 db    0
.xdata$x:00007B73                 db    0
.xdata$x:00007B74 __unwindtable$??0CCoderMT@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00007B74                                         ; DATA XREF: .xdata$x:00007B58o
.xdata$x:00007B75                 db 0FFh
.xdata$x:00007B76                 db 0FFh
.xdata$x:00007B77                 db 0FFh
.xdata$x:00007B78                 dd offset __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$0
.xdata$x:00007B7C                 align 10h
.xdata$x:00007B80                 dd offset __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$1
.xdata$x:00007B84                 db    1
.xdata$x:00007B85                 db    0
.xdata$x:00007B86                 db    0
.xdata$x:00007B87                 db    0
.xdata$x:00007B88                 dd offset __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$2
.xdata$x:00007B8C                 db    2
.xdata$x:00007B8D                 db    0
.xdata$x:00007B8E                 db    0
.xdata$x:00007B8F                 db    0
.xdata$x:00007B90                 dd offset __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$3
.xdata$x:00007B94                 db    3
.xdata$x:00007B95                 db    0
.xdata$x:00007B96                 db    0
.xdata$x:00007B97                 db    0
.xdata$x:00007B98                 dd offset __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$4
.xdata$x:00007B98 _xdata$x        ends
.xdata$x:00007B98
.rdata$r:00007B9C ; ===========================================================================
.rdata$r:00007B9C
.rdata$r:00007B9C ; Segment type: Pure data
.rdata$r:00007B9C ; Segment permissions: Read
.rdata$r:00007B9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007B9C                 assume cs:_rdata$r
.rdata$r:00007B9C                 ;org 7B9Ch
.rdata$r:00007B9C ; COMDAT (pick any)
.rdata$r:00007B9C                 public ??_R4CCoderMT@NCoderMixer2@@6B@
.rdata$r:00007B9C ; const NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
.rdata$r:00007B9C ??_R4CCoderMT@NCoderMixer2@@6B@ db    0 ; DATA XREF: .rdata:00007B48o
.rdata$r:00007B9D                 db    0
.rdata$r:00007B9E                 db    0
.rdata$r:00007B9F                 db    0
.rdata$r:00007BA0                 db    0
.rdata$r:00007BA1                 db    0
.rdata$r:00007BA2                 db    0
.rdata$r:00007BA3                 db    0
.rdata$r:00007BA4                 db    0
.rdata$r:00007BA5                 db    0
.rdata$r:00007BA6                 db    0
.rdata$r:00007BA7                 db    0
.rdata$r:00007BA8                 dd offset ??_R0?AVCCoderMT@NCoderMixer2@@@8 ; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
.rdata$r:00007BAC                 dd offset ??_R3CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007BAC _rdata$r        ends
.rdata$r:00007BAC
.data:00007BB0 ; ===========================================================================
.data:00007BB0
.data:00007BB0 ; Segment type: Pure data
.data:00007BB0 ; Segment permissions: Read/Write
.data:00007BB0 _data           segment dword public 'DATA' use32
.data:00007BB0                 assume cs:_data
.data:00007BB0                 ;org 7BB0h
.data:00007BB0 ; COMDAT (pick any)
.data:00007BB0                 public ??_R0?AVCCoderMT@NCoderMixer2@@@8
.data:00007BB0 ; class NCoderMixer2::CCoderMT `RTTI Type Descriptor'
.data:00007BB0 ??_R0?AVCCoderMT@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:00007BB0                                         ; DATA XREF: .rdata$r:00007BA8o
.data:00007BB0                                         ; .rdata$r:NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007BB0                                         ; const type_info::`vftable'
.data:00007BB4                 align 8
.data:00007BB8 a_?avccodermt@n db '.?AVCCoderMT@NCoderMixer2@@',0
.data:00007BB8 _data           ends
.data:00007BB8
.rdata$r:00007BD4 ; ===========================================================================
.rdata$r:00007BD4
.rdata$r:00007BD4 ; Segment type: Pure data
.rdata$r:00007BD4 ; Segment permissions: Read
.rdata$r:00007BD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007BD4                 assume cs:_rdata$r
.rdata$r:00007BD4                 ;org 7BD4h
.rdata$r:00007BD4 ; COMDAT (pick any)
.rdata$r:00007BD4                 public ??_R3CCoderMT@NCoderMixer2@@8
.rdata$r:00007BD4 ; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007BD4 ??_R3CCoderMT@NCoderMixer2@@8 db    0   ; DATA XREF: .rdata$r:00007BACo
.rdata$r:00007BD4                                         ; .rdata$r:00007C0Co
.rdata$r:00007BD5                 db    0
.rdata$r:00007BD6                 db    0
.rdata$r:00007BD7                 db    0
.rdata$r:00007BD8                 db    1
.rdata$r:00007BD9                 db    0
.rdata$r:00007BDA                 db    0
.rdata$r:00007BDB                 db    0
.rdata$r:00007BDC                 db    3
.rdata$r:00007BDD                 db    0
.rdata$r:00007BDE                 db    0
.rdata$r:00007BDF                 db    0
.rdata$r:00007BE0                 dd offset ??_R2CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
.rdata$r:00007BE0 _rdata$r        ends
.rdata$r:00007BE0
.rdata$r:00007BE4 ; ===========================================================================
.rdata$r:00007BE4
.rdata$r:00007BE4 ; Segment type: Pure data
.rdata$r:00007BE4 ; Segment permissions: Read
.rdata$r:00007BE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007BE4                 assume cs:_rdata$r
.rdata$r:00007BE4                 ;org 7BE4h
.rdata$r:00007BE4 ; COMDAT (pick any)
.rdata$r:00007BE4                 public ??_R2CCoderMT@NCoderMixer2@@8
.rdata$r:00007BE4 ; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
.rdata$r:00007BE4 ??_R2CCoderMT@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8
.rdata$r:00007BE4                                         ; DATA XREF: .rdata$r:00007BE0o
.rdata$r:00007BE4                                         ; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007BE8                 dd offset ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:00007BEC                 dd offset ??_R1A@?0A@EA@CVirtThread@@8 ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007BF0                 db    0
.rdata$r:00007BF1                 align 4
.rdata$r:00007BF1 _rdata$r        ends
.rdata$r:00007BF1
.rdata$r:00007BF4 ; ===========================================================================
.rdata$r:00007BF4
.rdata$r:00007BF4 ; Segment type: Pure data
.rdata$r:00007BF4 ; Segment permissions: Read
.rdata$r:00007BF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007BF4                 assume cs:_rdata$r
.rdata$r:00007BF4                 ;org 7BF4h
.rdata$r:00007BF4 ; COMDAT (pick any)
.rdata$r:00007BF4                 public ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8
.rdata$r:00007BF4 ; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007BF4 ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8 dd offset ??_R0?AVCCoderMT@NCoderMixer2@@@8
.rdata$r:00007BF4                                         ; DATA XREF: .rdata$r:NCoderMixer2::CCoderMT::`RTTI Base Class Array'o
.rdata$r:00007BF4                                         ; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
.rdata$r:00007BF8                 db    2
.rdata$r:00007BF9                 db    0
.rdata$r:00007BFA                 db    0
.rdata$r:00007BFB                 db    0
.rdata$r:00007BFC                 db    0
.rdata$r:00007BFD                 db    0
.rdata$r:00007BFE                 db    0
.rdata$r:00007BFF                 db    0
.rdata$r:00007C00                 db 0FFh
.rdata$r:00007C01                 db 0FFh
.rdata$r:00007C02                 db 0FFh
.rdata$r:00007C03                 db 0FFh
.rdata$r:00007C04                 db    0
.rdata$r:00007C05                 db    0
.rdata$r:00007C06                 db    0
.rdata$r:00007C07                 db    0
.rdata$r:00007C08                 db  40h ; @
.rdata$r:00007C09                 db    0
.rdata$r:00007C0A                 db    0
.rdata$r:00007C0B                 db    0
.rdata$r:00007C0C                 dd offset ??_R3CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C0C _rdata$r        ends
.rdata$r:00007C0C
.rdata$r:00007C10 ; ===========================================================================
.rdata$r:00007C10
.rdata$r:00007C10 ; Segment type: Pure data
.rdata$r:00007C10 ; Segment permissions: Read
.rdata$r:00007C10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C10                 assume cs:_rdata$r
.rdata$r:00007C10                 ;org 7C10h
.rdata$r:00007C10 ; COMDAT (pick any)
.rdata$r:00007C10                 public ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8
.rdata$r:00007C10 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:00007C10 ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8 dd offset ??_R0?AVCCoder@NCoderMixer2@@@8
.rdata$r:00007C10                                         ; DATA XREF: .rdata$r:00007BE8o
.rdata$r:00007C10                                         ; NCoderMixer2::CCoder `RTTI Type Descriptor'
.rdata$r:00007C14                 align 8
.rdata$r:00007C18                 db  18h
.rdata$r:00007C19                 db    0
.rdata$r:00007C1A                 db    0
.rdata$r:00007C1B                 db    0
.rdata$r:00007C1C                 db 0FFh
.rdata$r:00007C1D                 db 0FFh
.rdata$r:00007C1E                 db 0FFh
.rdata$r:00007C1F                 db 0FFh
.rdata$r:00007C20                 db    0
.rdata$r:00007C21                 db    0
.rdata$r:00007C22                 db    0
.rdata$r:00007C23                 db    0
.rdata$r:00007C24                 db  40h ; @
.rdata$r:00007C25                 db    0
.rdata$r:00007C26                 db    0
.rdata$r:00007C27                 db    0
.rdata$r:00007C28                 dd offset ??_R3CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C28 _rdata$r        ends
.rdata$r:00007C28
.data:00007C2C ; ===========================================================================
.data:00007C2C
.data:00007C2C ; Segment type: Pure data
.data:00007C2C ; Segment permissions: Read/Write
.data:00007C2C _data           segment dword public 'DATA' use32
.data:00007C2C                 assume cs:_data
.data:00007C2C                 ;org 7C2Ch
.data:00007C2C ; COMDAT (pick any)
.data:00007C2C                 public ??_R0?AVCCoder@NCoderMixer2@@@8
.data:00007C2C ; class NCoderMixer2::CCoder `RTTI Type Descriptor'
.data:00007C2C ??_R0?AVCCoder@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:00007C2C                                         ; DATA XREF: .rdata$r:NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'o
.data:00007C2C                                         ; .rdata$r:NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007C2C                                         ; const type_info::`vftable'
.data:00007C30                 db    0
.data:00007C31                 db    0
.data:00007C32                 db    0
.data:00007C33                 db    0
.data:00007C34                 db  2Eh ; .
.data:00007C35                 db  3Fh ; ?
.data:00007C36                 db  41h ; A
.data:00007C37                 db  56h ; V
.data:00007C38                 db  43h ; C
.data:00007C39                 db  43h ; C
.data:00007C3A                 db  6Fh ; o
.data:00007C3B                 db  64h ; d
.data:00007C3C                 db  65h ; e
.data:00007C3D                 db  72h ; r
.data:00007C3E                 db  40h ; @
.data:00007C3F                 db  4Eh ; N
.data:00007C40                 db  43h ; C
.data:00007C41                 db  6Fh ; o
.data:00007C42                 db  64h ; d
.data:00007C43                 db  65h ; e
.data:00007C44                 db  72h ; r
.data:00007C45                 db  4Dh ; M
.data:00007C46                 db  69h ; i
.data:00007C47                 db  78h ; x
.data:00007C48                 db  65h ; e
.data:00007C49                 db  72h ; r
.data:00007C4A                 db  32h ; 2
.data:00007C4B                 db  40h ; @
.data:00007C4C                 db  40h ; @
.data:00007C4D                 db    0
.data:00007C4E                 align 10h
.data:00007C4E _data           ends
.data:00007C4E
.rdata$r:00007C50 ; ===========================================================================
.rdata$r:00007C50
.rdata$r:00007C50 ; Segment type: Pure data
.rdata$r:00007C50 ; Segment permissions: Read
.rdata$r:00007C50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C50                 assume cs:_rdata$r
.rdata$r:00007C50                 ;org 7C50h
.rdata$r:00007C50 ; COMDAT (pick any)
.rdata$r:00007C50                 public ??_R3CCoder@NCoderMixer2@@8
.rdata$r:00007C50 ; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C50 ??_R3CCoder@NCoderMixer2@@8 db    0     ; DATA XREF: .rdata$r:00007C28o
.rdata$r:00007C50                                         ; .rdata$r:00007C80o
.rdata$r:00007C51                 db    0
.rdata$r:00007C52                 db    0
.rdata$r:00007C53                 db    0
.rdata$r:00007C54                 db    0
.rdata$r:00007C55                 db    0
.rdata$r:00007C56                 db    0
.rdata$r:00007C57                 db    0
.rdata$r:00007C58                 db    1
.rdata$r:00007C59                 db    0
.rdata$r:00007C5A                 db    0
.rdata$r:00007C5B                 db    0
.rdata$r:00007C5C                 dd offset ??_R2CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Array'
.rdata$r:00007C5C _rdata$r        ends
.rdata$r:00007C5C
.rdata$r:00007C60 ; ===========================================================================
.rdata$r:00007C60
.rdata$r:00007C60 ; Segment type: Pure data
.rdata$r:00007C60 ; Segment permissions: Read
.rdata$r:00007C60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C60                 assume cs:_rdata$r
.rdata$r:00007C60                 ;org 7C60h
.rdata$r:00007C60 ; COMDAT (pick any)
.rdata$r:00007C60                 public ??_R2CCoder@NCoderMixer2@@8
.rdata$r:00007C60 ; NCoderMixer2::CCoder::`RTTI Base Class Array'
.rdata$r:00007C60 ??_R2CCoder@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8
.rdata$r:00007C60                                         ; DATA XREF: .rdata$r:00007C5Co
.rdata$r:00007C60                                         ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007C64                 db    0
.rdata$r:00007C65                 align 4
.rdata$r:00007C65 _rdata$r        ends
.rdata$r:00007C65
.rdata$r:00007C68 ; ===========================================================================
.rdata$r:00007C68
.rdata$r:00007C68 ; Segment type: Pure data
.rdata$r:00007C68 ; Segment permissions: Read
.rdata$r:00007C68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C68                 assume cs:_rdata$r
.rdata$r:00007C68                 ;org 7C68h
.rdata$r:00007C68 ; COMDAT (pick any)
.rdata$r:00007C68                 public ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8
.rdata$r:00007C68 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007C68 ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8 dd offset ??_R0?AVCCoder@NCoderMixer2@@@8
.rdata$r:00007C68                                         ; DATA XREF: .rdata$r:NCoderMixer2::CCoder::`RTTI Base Class Array'o
.rdata$r:00007C68                                         ; NCoderMixer2::CCoder `RTTI Type Descriptor'
.rdata$r:00007C6C                 db    0
.rdata$r:00007C6D                 db    0
.rdata$r:00007C6E                 db    0
.rdata$r:00007C6F                 db    0
.rdata$r:00007C70                 db    0
.rdata$r:00007C71                 db    0
.rdata$r:00007C72                 db    0
.rdata$r:00007C73                 db    0
.rdata$r:00007C74                 db 0FFh
.rdata$r:00007C75                 db 0FFh
.rdata$r:00007C76                 db 0FFh
.rdata$r:00007C77                 db 0FFh
.rdata$r:00007C78                 db    0
.rdata$r:00007C79                 db    0
.rdata$r:00007C7A                 db    0
.rdata$r:00007C7B                 db    0
.rdata$r:00007C7C                 db  40h ; @
.rdata$r:00007C7D                 db    0
.rdata$r:00007C7E                 db    0
.rdata$r:00007C7F                 db    0
.rdata$r:00007C80                 dd offset ??_R3CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C80 _rdata$r        ends
.rdata$r:00007C80
.rdata$r:00007C84 ; ===========================================================================
.rdata$r:00007C84
.rdata$r:00007C84 ; Segment type: Pure data
.rdata$r:00007C84 ; Segment permissions: Read
.rdata$r:00007C84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C84                 assume cs:_rdata$r
.rdata$r:00007C84                 ;org 7C84h
.rdata$r:00007C84 ; COMDAT (pick any)
.rdata$r:00007C84                 public ??_R1A@?0A@EA@CVirtThread@@8
.rdata$r:00007C84 ; CVirtThread::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007C84 ??_R1A@?0A@EA@CVirtThread@@8 dd offset ??_R0?AUCVirtThread@@@8
.rdata$r:00007C84                                         ; DATA XREF: .rdata$r:00007BECo
.rdata$r:00007C84                                         ; .rdata$r:CVirtThread::`RTTI Base Class Array'o
.rdata$r:00007C84                                         ; CVirtThread `RTTI Type Descriptor'
.rdata$r:00007C88                 align 10h
.rdata$r:00007C90                 db 0FFh
.rdata$r:00007C91                 db 0FFh
.rdata$r:00007C92                 db 0FFh
.rdata$r:00007C93                 db 0FFh
.rdata$r:00007C94                 db    0
.rdata$r:00007C95                 db    0
.rdata$r:00007C96                 db    0
.rdata$r:00007C97                 db    0
.rdata$r:00007C98                 db  40h ; @
.rdata$r:00007C99                 db    0
.rdata$r:00007C9A                 db    0
.rdata$r:00007C9B                 db    0
.rdata$r:00007C9C                 dd offset ??_R3CVirtThread@@8 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C9C _rdata$r        ends
.rdata$r:00007C9C
.data:00007CA0 ; ===========================================================================
.data:00007CA0
.data:00007CA0 ; Segment type: Pure data
.data:00007CA0 ; Segment permissions: Read/Write
.data:00007CA0 _data           segment dword public 'DATA' use32
.data:00007CA0                 assume cs:_data
.data:00007CA0                 ;org 7CA0h
.data:00007CA0 ; COMDAT (pick any)
.data:00007CA0                 public ??_R0?AUCVirtThread@@@8
.data:00007CA0 ; struct CVirtThread `RTTI Type Descriptor'
.data:00007CA0 ??_R0?AUCVirtThread@@@8 dd offset ??_7type_info@@6B@
.data:00007CA0                                         ; DATA XREF: .rdata$r:CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007CA0                                         ; .rdata$r:00007DF0o
.data:00007CA0                                         ; const type_info::`vftable'
.data:00007CA4                 align 8
.data:00007CA8 a_?aucvirtthrea db '.?AUCVirtThread@@',0
.data:00007CBA                 align 4
.data:00007CBA _data           ends
.data:00007CBA
.rdata$r:00007CBC ; ===========================================================================
.rdata$r:00007CBC
.rdata$r:00007CBC ; Segment type: Pure data
.rdata$r:00007CBC ; Segment permissions: Read
.rdata$r:00007CBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007CBC                 assume cs:_rdata$r
.rdata$r:00007CBC                 ;org 7CBCh
.rdata$r:00007CBC ; COMDAT (pick any)
.rdata$r:00007CBC                 public ??_R3CVirtThread@@8
.rdata$r:00007CBC ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007CBC ??_R3CVirtThread@@8 db    0             ; DATA XREF: .rdata$r:00007C9Co
.rdata$r:00007CBC                                         ; .rdata$r:00007DF4o
.rdata$r:00007CBD                 db    0
.rdata$r:00007CBE                 db    0
.rdata$r:00007CBF                 db    0
.rdata$r:00007CC0                 db    0
.rdata$r:00007CC1                 db    0
.rdata$r:00007CC2                 db    0
.rdata$r:00007CC3                 db    0
.rdata$r:00007CC4                 db    1
.rdata$r:00007CC5                 db    0
.rdata$r:00007CC6                 db    0
.rdata$r:00007CC7                 db    0
.rdata$r:00007CC8                 dd offset ??_R2CVirtThread@@8 ; CVirtThread::`RTTI Base Class Array'
.rdata$r:00007CC8 _rdata$r        ends
.rdata$r:00007CC8
.rdata$r:00007CCC ; ===========================================================================
.rdata$r:00007CCC
.rdata$r:00007CCC ; Segment type: Pure data
.rdata$r:00007CCC ; Segment permissions: Read
.rdata$r:00007CCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007CCC                 assume cs:_rdata$r
.rdata$r:00007CCC                 ;org 7CCCh
.rdata$r:00007CCC ; COMDAT (pick any)
.rdata$r:00007CCC                 public ??_R2CVirtThread@@8
.rdata$r:00007CCC ; CVirtThread::`RTTI Base Class Array'
.rdata$r:00007CCC ??_R2CVirtThread@@8 dd offset ??_R1A@?0A@EA@CVirtThread@@8
.rdata$r:00007CCC                                         ; DATA XREF: .rdata$r:00007CC8o
.rdata$r:00007CCC                                         ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007CD0                 db    0
.rdata$r:00007CD1                 align 4
.rdata$r:00007CD1 _rdata$r        ends
.rdata$r:00007CD1
.text:00007CD4 ; ===========================================================================
.text:00007CD4
.text:00007CD4 ; Segment type: Pure code
.text:00007CD4 ; Segment permissions: Read/Execute
.text:00007CD4 _text           segment para public 'CODE' use32
.text:00007CD4                 assume cs:_text
.text:00007CD4                 ;org 7CD4h
.text:00007CD4 ; COMDAT (pick any)
.text:00007CD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007CD4
.text:00007CD4 ; =============== S U B R O U T I N E =======================================
.text:00007CD4
.text:00007CD4 ; Attributes: bp-based frame
.text:00007CD4
.text:00007CD4 ; _DWORD __thiscall CVirtThread::~CVirtThread(CVirtThread *__hidden this)
.text:00007CD4                 public ??1CVirtThread@@QAE@XZ
.text:00007CD4 ??1CVirtThread@@QAE@XZ proc near        ; CODE XREF: __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$1+3j
.text:00007CD4
.text:00007CD4 var_10          = dword ptr -10h
.text:00007CD4 var_C           = dword ptr -0Ch
.text:00007CD4 var_4           = dword ptr -4
.text:00007CD4
.text:00007CD4                 push    ebp
.text:00007CD5                 mov     ebp, esp
.text:00007CD7                 push    0FFFFFFFFh
.text:00007CD9                 push    offset __ehhandler$??1CVirtThread@@QAE@XZ
.text:00007CDE                 mov     eax, large fs:0
.text:00007CE4                 push    eax
.text:00007CE5                 push    ecx
.text:00007CE6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007CED                 mov     eax, dword ptr ds:___security_cookie
.text:00007CF2                 xor     eax, ebp
.text:00007CF4                 push    eax
.text:00007CF5                 lea     eax, [ebp+var_C]
.text:00007CF8                 mov     large fs:0, eax
.text:00007CFE                 mov     [ebp+var_10], ecx
.text:00007D01                 mov     eax, [ebp+var_10]
.text:00007D04                 mov     dword ptr [eax], offset ??_7CVirtThread@@6B@ ; const CVirtThread::`vftable'
.text:00007D0A                 mov     [ebp+var_4], 2
.text:00007D11                 mov     ecx, [ebp+var_10] ; this
.text:00007D14                 call    ?WaitThreadFinish@CVirtThread@@QAEXXZ ; CVirtThread::WaitThreadFinish(void)
.text:00007D19                 mov     byte ptr [ebp+var_4], 1
.text:00007D1D                 mov     ecx, [ebp+var_10]
.text:00007D20                 add     ecx, 0Ch        ; this
.text:00007D23                 call    ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text:00007D28                 mov     byte ptr [ebp+var_4], 0
.text:00007D2C                 mov     ecx, [ebp+var_10]
.text:00007D2F                 add     ecx, 8          ; this
.text:00007D32                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00007D37                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007D3E                 mov     ecx, [ebp+var_10]
.text:00007D41                 add     ecx, 4          ; this
.text:00007D44                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00007D49                 mov     ecx, [ebp+var_C]
.text:00007D4C                 mov     large fs:0, ecx
.text:00007D53                 pop     ecx
.text:00007D54                 add     esp, 10h
.text:00007D57                 cmp     ebp, esp
.text:00007D59                 call    __RTC_CheckEsp
.text:00007D5E                 mov     esp, ebp
.text:00007D60                 pop     ebp
.text:00007D61                 retn
.text:00007D61 ??1CVirtThread@@QAE@XZ endp
.text:00007D61
.text:00007D61 ; ---------------------------------------------------------------------------
.text:00007D62                 align 4
.text:00007D62 _text           ends
.text:00007D62
.text$x:00007D64 ; ===========================================================================
.text$x:00007D64
.text$x:00007D64 ; Segment type: Pure code
.text$x:00007D64 ; Segment permissions: Read/Execute
.text$x:00007D64 _text$x         segment para public 'CODE' use32
.text$x:00007D64                 assume cs:_text$x
.text$x:00007D64                 ;org 7D64h
.text$x:00007D64 ; COMDAT (pick associative to section at 7CD4)
.text$x:00007D64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007D64
.text$x:00007D64 ; =============== S U B R O U T I N E =======================================
.text$x:00007D64
.text$x:00007D64
.text$x:00007D64 __unwindfunclet$??1CVirtThread@@QAE@XZ$0 proc near
.text$x:00007D64                                         ; DATA XREF: .xdata$x:00007DACo
.text$x:00007D64                 mov     ecx, [ebp-10h]
.text$x:00007D67                 add     ecx, 4          ; this
.text$x:00007D6A                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00007D6A __unwindfunclet$??1CVirtThread@@QAE@XZ$0 endp
.text$x:00007D6A
.text$x:00007D6F
.text$x:00007D6F ; =============== S U B R O U T I N E =======================================
.text$x:00007D6F
.text$x:00007D6F
.text$x:00007D6F __unwindfunclet$??1CVirtThread@@QAE@XZ$1 proc near
.text$x:00007D6F                                         ; DATA XREF: .xdata$x:00007DB4o
.text$x:00007D6F                 mov     ecx, [ebp-10h]
.text$x:00007D72                 add     ecx, 8          ; this
.text$x:00007D75                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00007D75 __unwindfunclet$??1CVirtThread@@QAE@XZ$1 endp
.text$x:00007D75
.text$x:00007D7A
.text$x:00007D7A ; =============== S U B R O U T I N E =======================================
.text$x:00007D7A
.text$x:00007D7A
.text$x:00007D7A __unwindfunclet$??1CVirtThread@@QAE@XZ$2 proc near
.text$x:00007D7A                                         ; DATA XREF: .xdata$x:00007DBCo
.text$x:00007D7A                 mov     ecx, [ebp-10h]
.text$x:00007D7D                 add     ecx, 0Ch        ; this
.text$x:00007D80                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:00007D80 __unwindfunclet$??1CVirtThread@@QAE@XZ$2 endp
.text$x:00007D80
.text$x:00007D85
.text$x:00007D85 ; =============== S U B R O U T I N E =======================================
.text$x:00007D85
.text$x:00007D85
.text$x:00007D85 __ehhandler$??1CVirtThread@@QAE@XZ proc near
.text$x:00007D85                                         ; DATA XREF: CVirtThread::~CVirtThread(void)+5o
.text$x:00007D85
.text$x:00007D85 arg_4           = dword ptr  8
.text$x:00007D85
.text$x:00007D85                 mov     edx, [esp+arg_4]
.text$x:00007D89                 lea     eax, [edx+0Ch]
.text$x:00007D8C                 mov     ecx, [edx-8]
.text$x:00007D8F                 xor     ecx, eax
.text$x:00007D91                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007D96                 mov     eax, offset __ehfuncinfo$??1CVirtThread@@QAE@XZ
.text$x:00007D9B                 jmp     ___CxxFrameHandler3
.text$x:00007D9B __ehhandler$??1CVirtThread@@QAE@XZ endp
.text$x:00007D9B
.text$x:00007D9B _text$x         ends
.text$x:00007D9B
.rdata:00007DA0 ; ===========================================================================
.rdata:00007DA0
.rdata:00007DA0 ; Segment type: Pure data
.rdata:00007DA0 ; Segment permissions: Read
.rdata:00007DA0 _rdata          segment dword public 'DATA' use32
.rdata:00007DA0                 assume cs:_rdata
.rdata:00007DA0                 ;org 7DA0h
.rdata:00007DA0 ; COMDAT (pick largest)
.rdata:00007DA0                 dd offset ??_R4CVirtThread@@6B@ ; const CVirtThread::`RTTI Complete Object Locator'
.rdata:00007DA4                 public ??_7CVirtThread@@6B@
.rdata:00007DA4 ; const CVirtThread::`vftable'
.rdata:00007DA4 ??_7CVirtThread@@6B@ dd offset __purecall
.rdata:00007DA4                                         ; DATA XREF: CVirtThread::~CVirtThread(void)+30o
.rdata:00007DA4                                         ; CVirtThread::CVirtThread(void)+30o
.rdata:00007DA4 _rdata          ends
.rdata:00007DA4
.xdata$x:00007DA8 ; ===========================================================================
.xdata$x:00007DA8
.xdata$x:00007DA8 ; Segment type: Pure data
.xdata$x:00007DA8 ; Segment permissions: Read
.xdata$x:00007DA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007DA8                 assume cs:_xdata$x
.xdata$x:00007DA8                 ;org 7DA8h
.xdata$x:00007DA8 ; COMDAT (pick associative to section at 7CD4)
.xdata$x:00007DA8 __unwindtable$??1CVirtThread@@QAE@XZ db 0FFh
.xdata$x:00007DA8                                         ; DATA XREF: .xdata$x:00007DC8o
.xdata$x:00007DA9                 db 0FFh
.xdata$x:00007DAA                 db 0FFh
.xdata$x:00007DAB                 db 0FFh
.xdata$x:00007DAC                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$0
.xdata$x:00007DB0                 db    0
.xdata$x:00007DB1                 db    0
.xdata$x:00007DB2                 db    0
.xdata$x:00007DB3                 db    0
.xdata$x:00007DB4                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$1
.xdata$x:00007DB8                 db    1
.xdata$x:00007DB9                 db    0
.xdata$x:00007DBA                 db    0
.xdata$x:00007DBB                 db    0
.xdata$x:00007DBC                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$2
.xdata$x:00007DC0 __ehfuncinfo$??1CVirtThread@@QAE@XZ db  22h ; "
.xdata$x:00007DC0                                         ; DATA XREF: __ehhandler$??1CVirtThread@@QAE@XZ+11o
.xdata$x:00007DC1                 db    5
.xdata$x:00007DC2                 db  93h ; ô
.xdata$x:00007DC3                 db  19h
.xdata$x:00007DC4                 db    3
.xdata$x:00007DC5                 db    0
.xdata$x:00007DC6                 db    0
.xdata$x:00007DC7                 db    0
.xdata$x:00007DC8                 dd offset __unwindtable$??1CVirtThread@@QAE@XZ
.xdata$x:00007DCC                 align 20h
.xdata$x:00007DE0                 db    1
.xdata$x:00007DE1                 db    0
.xdata$x:00007DE2                 db    0
.xdata$x:00007DE3                 db    0
.xdata$x:00007DE3 _xdata$x        ends
.xdata$x:00007DE3
.rdata$r:00007DE4 ; ===========================================================================
.rdata$r:00007DE4
.rdata$r:00007DE4 ; Segment type: Pure data
.rdata$r:00007DE4 ; Segment permissions: Read
.rdata$r:00007DE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007DE4                 assume cs:_rdata$r
.rdata$r:00007DE4                 ;org 7DE4h
.rdata$r:00007DE4 ; COMDAT (pick any)
.rdata$r:00007DE4                 public ??_R4CVirtThread@@6B@
.rdata$r:00007DE4 ; const CVirtThread::`RTTI Complete Object Locator'
.rdata$r:00007DE4 ??_R4CVirtThread@@6B@ db    0           ; DATA XREF: .rdata:00007DA0o
.rdata$r:00007DE5                 db    0
.rdata$r:00007DE6                 db    0
.rdata$r:00007DE7                 db    0
.rdata$r:00007DE8                 db    0
.rdata$r:00007DE9                 db    0
.rdata$r:00007DEA                 db    0
.rdata$r:00007DEB                 db    0
.rdata$r:00007DEC                 db    0
.rdata$r:00007DED                 db    0
.rdata$r:00007DEE                 db    0
.rdata$r:00007DEF                 db    0
.rdata$r:00007DF0                 dd offset ??_R0?AUCVirtThread@@@8 ; CVirtThread `RTTI Type Descriptor'
.rdata$r:00007DF4                 dd offset ??_R3CVirtThread@@8 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007DF4 _rdata$r        ends
.rdata$r:00007DF4
.text:00007DF8 ; ===========================================================================
.text:00007DF8
.text:00007DF8 ; Segment type: Pure code
.text:00007DF8 ; Segment permissions: Read/Execute
.text:00007DF8 _text           segment para public 'CODE' use32
.text:00007DF8                 assume cs:_text
.text:00007DF8                 ;org 7DF8h
.text:00007DF8 ; COMDAT (pick any)
.text:00007DF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007DF8
.text:00007DF8 ; =============== S U B R O U T I N E =======================================
.text:00007DF8
.text:00007DF8 ; Attributes: bp-based frame
.text:00007DF8
.text:00007DF8 ; _DWORD __thiscall NWindows::CThread::~CThread(NWindows::CThread *__hidden this)
.text:00007DF8                 public ??1CThread@NWindows@@QAE@XZ
.text:00007DF8 ??1CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: CVirtThread::~CVirtThread(void)+4Fp
.text:00007DF8                                         ; __unwindfunclet$??1CVirtThread@@QAE@XZ$2+6j
.text:00007DF8
.text:00007DF8 var_4           = dword ptr -4
.text:00007DF8
.text:00007DF8                 push    ebp
.text:00007DF9                 mov     ebp, esp
.text:00007DFB                 push    ecx
.text:00007DFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007E03                 mov     [ebp+var_4], ecx
.text:00007E06                 mov     ecx, [ebp+var_4] ; this
.text:00007E09                 call    ?Close@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Close(void)
.text:00007E0E                 add     esp, 4
.text:00007E11                 cmp     ebp, esp
.text:00007E13                 call    __RTC_CheckEsp
.text:00007E18                 mov     esp, ebp
.text:00007E1A                 pop     ebp
.text:00007E1B                 retn
.text:00007E1B ??1CThread@NWindows@@QAE@XZ endp
.text:00007E1B
.text:00007E1B _text           ends
.text:00007E1B
.text:00007E1C ; ===========================================================================
.text:00007E1C
.text:00007E1C ; Segment type: Pure code
.text:00007E1C ; Segment permissions: Read/Execute
.text:00007E1C _text           segment para public 'CODE' use32
.text:00007E1C                 assume cs:_text
.text:00007E1C                 ;org 7E1Ch
.text:00007E1C ; COMDAT (pick any)
.text:00007E1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007E1C
.text:00007E1C ; =============== S U B R O U T I N E =======================================
.text:00007E1C
.text:00007E1C ; Attributes: bp-based frame
.text:00007E1C
.text:00007E1C ; unsigned int __thiscall NWindows::CThread::Close(NWindows::CThread *__hidden this)
.text:00007E1C                 public ?Close@CThread@NWindows@@QAEIXZ
.text:00007E1C ?Close@CThread@NWindows@@QAEIXZ proc near
.text:00007E1C                                         ; CODE XREF: NWindows::CThread::~CThread(void)+11p
.text:00007E1C
.text:00007E1C var_4           = dword ptr -4
.text:00007E1C
.text:00007E1C                 push    ebp
.text:00007E1D                 mov     ebp, esp
.text:00007E1F                 push    ecx
.text:00007E20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007E27                 mov     [ebp+var_4], ecx
.text:00007E2A                 mov     eax, [ebp+var_4]
.text:00007E2D                 push    eax
.text:00007E2E                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00007E33                 add     esp, 4
.text:00007E36                 cmp     ebp, esp
.text:00007E38                 call    __RTC_CheckEsp
.text:00007E3D                 mov     esp, ebp
.text:00007E3F                 pop     ebp
.text:00007E40                 retn
.text:00007E40 ?Close@CThread@NWindows@@QAEIXZ endp
.text:00007E40
.text:00007E40 ; ---------------------------------------------------------------------------
.text:00007E41                 align 4
.text:00007E41 _text           ends
.text:00007E41
.text:00007E44 ; ===========================================================================
.text:00007E44
.text:00007E44 ; Segment type: Pure code
.text:00007E44 ; Segment permissions: Read/Execute
.text:00007E44 _text           segment para public 'CODE' use32
.text:00007E44                 assume cs:_text
.text:00007E44                 ;org 7E44h
.text:00007E44 ; COMDAT (pick any)
.text:00007E44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007E44
.text:00007E44 ; =============== S U B R O U T I N E =======================================
.text:00007E44
.text:00007E44 ; Attributes: bp-based frame
.text:00007E44
.text:00007E44 ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00007E44                 public ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00007E44 ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00007E44                                         ; CODE XREF: CVirtThread::~CVirtThread(void)+5Ep
.text:00007E44                                         ; CVirtThread::~CVirtThread(void)+70p ...
.text:00007E44
.text:00007E44 var_4           = dword ptr -4
.text:00007E44
.text:00007E44                 push    ebp
.text:00007E45                 mov     ebp, esp
.text:00007E47                 push    ecx
.text:00007E48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007E4F                 mov     [ebp+var_4], ecx
.text:00007E52                 mov     ecx, [ebp+var_4] ; this
.text:00007E55                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:00007E5A                 add     esp, 4
.text:00007E5D                 cmp     ebp, esp
.text:00007E5F                 call    __RTC_CheckEsp
.text:00007E64                 mov     esp, ebp
.text:00007E66                 pop     ebp
.text:00007E67                 retn
.text:00007E67 ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00007E67
.text:00007E67 _text           ends
.text:00007E67
.text:00007E68 ; ===========================================================================
.text:00007E68
.text:00007E68 ; Segment type: Pure code
.text:00007E68 ; Segment permissions: Read/Execute
.text:00007E68 _text           segment para public 'CODE' use32
.text:00007E68                 assume cs:_text
.text:00007E68                 ;org 7E68h
.text:00007E68 ; COMDAT (pick any)
.text:00007E68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007E68
.text:00007E68 ; =============== S U B R O U T I N E =======================================
.text:00007E68
.text:00007E68 ; Attributes: bp-based frame
.text:00007E68
.text:00007E68 ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::~CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00007E68                 public ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:00007E68 ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00007E68                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)+11p
.text:00007E68                                         ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)+11p
.text:00007E68
.text:00007E68 var_4           = dword ptr -4
.text:00007E68
.text:00007E68                 push    ebp
.text:00007E69                 mov     ebp, esp
.text:00007E6B                 push    ecx
.text:00007E6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007E73                 mov     [ebp+var_4], ecx
.text:00007E76                 mov     ecx, [ebp+var_4] ; this
.text:00007E79                 call    ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close(void)
.text:00007E7E                 add     esp, 4
.text:00007E81                 cmp     ebp, esp
.text:00007E83                 call    __RTC_CheckEsp
.text:00007E88                 mov     esp, ebp
.text:00007E8A                 pop     ebp
.text:00007E8B                 retn
.text:00007E8B ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00007E8B
.text:00007E8B _text           ends
.text:00007E8B
.text:00007E8C ; ===========================================================================
.text:00007E8C
.text:00007E8C ; Segment type: Pure code
.text:00007E8C ; Segment permissions: Read/Execute
.text:00007E8C _text           segment para public 'CODE' use32
.text:00007E8C                 assume cs:_text
.text:00007E8C                 ;org 7E8Ch
.text:00007E8C ; COMDAT (pick any)
.text:00007E8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007E8C
.text:00007E8C ; =============== S U B R O U T I N E =======================================
.text:00007E8C
.text:00007E8C ; Attributes: bp-based frame
.text:00007E8C
.text:00007E8C ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Close(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00007E8C                 public ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00007E8C ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00007E8C                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)+11p
.text:00007E8C
.text:00007E8C var_4           = dword ptr -4
.text:00007E8C
.text:00007E8C                 push    ebp
.text:00007E8D                 mov     ebp, esp
.text:00007E8F                 push    ecx
.text:00007E90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007E97                 mov     [ebp+var_4], ecx
.text:00007E9A                 mov     eax, [ebp+var_4]
.text:00007E9D                 push    eax
.text:00007E9E                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00007EA3                 add     esp, 4
.text:00007EA6                 cmp     ebp, esp
.text:00007EA8                 call    __RTC_CheckEsp
.text:00007EAD                 mov     esp, ebp
.text:00007EAF                 pop     ebp
.text:00007EB0                 retn
.text:00007EB0 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00007EB0
.text:00007EB0 ; ---------------------------------------------------------------------------
.text:00007EB1                 align 4
.text:00007EB1 _text           ends
.text:00007EB1
.text:00007EB4 ; ===========================================================================
.text:00007EB4
.text:00007EB4 ; Segment type: Pure code
.text:00007EB4 ; Segment permissions: Read/Execute
.text:00007EB4 _text           segment para public 'CODE' use32
.text:00007EB4                 assume cs:_text
.text:00007EB4                 ;org 7EB4h
.text:00007EB4 ; COMDAT (pick any)
.text:00007EB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007EB4
.text:00007EB4 ; =============== S U B R O U T I N E =======================================
.text:00007EB4
.text:00007EB4 ; Attributes: bp-based frame
.text:00007EB4
.text:00007EB4 ; _DWORD __thiscall NCoderMixer2::CCoder::~CCoder(NCoderMixer2::CCoder *__hidden this)
.text:00007EB4                 public ??1CCoder@NCoderMixer2@@QAE@XZ
.text:00007EB4 ??1CCoder@NCoderMixer2@@QAE@XZ proc near
.text:00007EB4                                         ; CODE XREF: __unwindfunclet$??0CCoderMT@NCoderMixer2@@QAE@XZ$0+6j
.text:00007EB4                                         ; NCoderMixer2::CCoderST::~CCoderST(void)+11p
.text:00007EB4
.text:00007EB4 var_10          = dword ptr -10h
.text:00007EB4 var_C           = dword ptr -0Ch
.text:00007EB4 var_4           = dword ptr -4
.text:00007EB4
.text:00007EB4                 push    ebp
.text:00007EB5                 mov     ebp, esp
.text:00007EB7                 push    0FFFFFFFFh
.text:00007EB9                 push    offset __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ
.text:00007EBE                 mov     eax, large fs:0
.text:00007EC4                 push    eax
.text:00007EC5                 push    ecx
.text:00007EC6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007ECD                 mov     eax, dword ptr ds:___security_cookie
.text:00007ED2                 xor     eax, ebp
.text:00007ED4                 push    eax
.text:00007ED5                 lea     eax, [ebp+var_C]
.text:00007ED8                 mov     large fs:0, eax
.text:00007EDE                 mov     [ebp+var_10], ecx
.text:00007EE1                 mov     [ebp+var_4], 2
.text:00007EE8                 mov     ecx, [ebp+var_10]
.text:00007EEB                 add     ecx, 28h ; '('
.text:00007EEE                 call    ??1?$CRecordVector@PB_K@@QAE@XZ ; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>(void)
.text:00007EF3                 mov     byte ptr [ebp+var_4], 1
.text:00007EF7                 mov     ecx, [ebp+var_10]
.text:00007EFA                 add     ecx, 1Ch
.text:00007EFD                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00007F02                 mov     byte ptr [ebp+var_4], 0
.text:00007F06                 mov     ecx, [ebp+var_10]
.text:00007F09                 add     ecx, 4
.text:00007F0C                 call    ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text:00007F11                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007F18                 mov     ecx, [ebp+var_10]
.text:00007F1B                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00007F20                 mov     ecx, [ebp+var_C]
.text:00007F23                 mov     large fs:0, ecx
.text:00007F2A                 pop     ecx
.text:00007F2B                 add     esp, 10h
.text:00007F2E                 cmp     ebp, esp
.text:00007F30                 call    __RTC_CheckEsp
.text:00007F35                 mov     esp, ebp
.text:00007F37                 pop     ebp
.text:00007F38                 retn
.text:00007F38 ??1CCoder@NCoderMixer2@@QAE@XZ endp
.text:00007F38
.text:00007F38 ; ---------------------------------------------------------------------------
.text:00007F39                 align 4
.text:00007F39 _text           ends
.text:00007F39
.text$x:00007F3C ; ===========================================================================
.text$x:00007F3C
.text$x:00007F3C ; Segment type: Pure code
.text$x:00007F3C ; Segment permissions: Read/Execute
.text$x:00007F3C _text$x         segment para public 'CODE' use32
.text$x:00007F3C                 assume cs:_text$x
.text$x:00007F3C                 ;org 7F3Ch
.text$x:00007F3C ; COMDAT (pick associative to section at 7EB4)
.text$x:00007F3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007F3C
.text$x:00007F3C ; =============== S U B R O U T I N E =======================================
.text$x:00007F3C
.text$x:00007F3C
.text$x:00007F3C __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00007F3C                                         ; DATA XREF: .xdata$x:00007F7Co
.text$x:00007F3C                 mov     ecx, [ebp-10h]
.text$x:00007F3F                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00007F3F __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00007F3F
.text$x:00007F44
.text$x:00007F44 ; =============== S U B R O U T I N E =======================================
.text$x:00007F44
.text$x:00007F44
.text$x:00007F44 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00007F44                                         ; DATA XREF: .xdata$x:00007F84o
.text$x:00007F44                 mov     ecx, [ebp-10h]
.text$x:00007F47                 add     ecx, 4
.text$x:00007F4A                 jmp     ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text$x:00007F4A __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00007F4A
.text$x:00007F4F
.text$x:00007F4F ; =============== S U B R O U T I N E =======================================
.text$x:00007F4F
.text$x:00007F4F
.text$x:00007F4F __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:00007F4F                                         ; DATA XREF: .xdata$x:00007F8Co
.text$x:00007F4F                 mov     ecx, [ebp-10h]
.text$x:00007F52                 add     ecx, 1Ch
.text$x:00007F55                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00007F55 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00007F55
.text$x:00007F5A
.text$x:00007F5A ; =============== S U B R O U T I N E =======================================
.text$x:00007F5A
.text$x:00007F5A
.text$x:00007F5A __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ proc near
.text$x:00007F5A                                         ; DATA XREF: NCoderMixer2::CCoder::~CCoder(void)+5o
.text$x:00007F5A
.text$x:00007F5A arg_4           = dword ptr  8
.text$x:00007F5A
.text$x:00007F5A                 mov     edx, [esp+arg_4]
.text$x:00007F5E                 lea     eax, [edx+0Ch]
.text$x:00007F61                 mov     ecx, [edx-8]
.text$x:00007F64                 xor     ecx, eax
.text$x:00007F66                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007F6B                 mov     eax, offset __ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ
.text$x:00007F70                 jmp     ___CxxFrameHandler3
.text$x:00007F70 __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ endp
.text$x:00007F70
.text$x:00007F70 ; ---------------------------------------------------------------------------
.text$x:00007F75                 align 4
.text$x:00007F75 _text$x         ends
.text$x:00007F75
.xdata$x:00007F78 ; ===========================================================================
.xdata$x:00007F78
.xdata$x:00007F78 ; Segment type: Pure data
.xdata$x:00007F78 ; Segment permissions: Read
.xdata$x:00007F78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F78                 assume cs:_xdata$x
.xdata$x:00007F78                 ;org 7F78h
.xdata$x:00007F78 ; COMDAT (pick associative to section at 7EB4)
.xdata$x:00007F78 __unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00007F78                                         ; DATA XREF: .xdata$x:00007F98o
.xdata$x:00007F79                 db 0FFh
.xdata$x:00007F7A                 db 0FFh
.xdata$x:00007F7B                 db 0FFh
.xdata$x:00007F7C                 dd offset __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0
.xdata$x:00007F80                 db    0
.xdata$x:00007F81                 db    0
.xdata$x:00007F82                 db    0
.xdata$x:00007F83                 db    0
.xdata$x:00007F84                 dd offset __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1
.xdata$x:00007F88                 db    1
.xdata$x:00007F89                 db    0
.xdata$x:00007F8A                 db    0
.xdata$x:00007F8B                 db    0
.xdata$x:00007F8C                 dd offset __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2
.xdata$x:00007F90 __ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00007F90                                         ; DATA XREF: __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00007F91                 db    5
.xdata$x:00007F92                 db  93h ; ô
.xdata$x:00007F93                 db  19h
.xdata$x:00007F94                 db    3
.xdata$x:00007F95                 db    0
.xdata$x:00007F96                 db    0
.xdata$x:00007F97                 db    0
.xdata$x:00007F98                 dd offset __unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ
.xdata$x:00007F9C                 db    0
.xdata$x:00007F9D                 db    0
.xdata$x:00007F9E                 db    0
.xdata$x:00007F9F                 db    0
.xdata$x:00007FA0                 db    0
.xdata$x:00007FA1                 db    0
.xdata$x:00007FA2                 db    0
.xdata$x:00007FA3                 db    0
.xdata$x:00007FA4                 db    0
.xdata$x:00007FA5                 db    0
.xdata$x:00007FA6                 db    0
.xdata$x:00007FA7                 db    0
.xdata$x:00007FA8                 db    0
.xdata$x:00007FA9                 db    0
.xdata$x:00007FAA                 db    0
.xdata$x:00007FAB                 db    0
.xdata$x:00007FAC                 db    0
.xdata$x:00007FAD                 db    0
.xdata$x:00007FAE                 db    0
.xdata$x:00007FAF                 db    0
.xdata$x:00007FB0                 db    1
.xdata$x:00007FB1                 db    0
.xdata$x:00007FB2                 db    0
.xdata$x:00007FB3                 db    0
.xdata$x:00007FB3 _xdata$x        ends
.xdata$x:00007FB3
.text:00007FB4 ; ===========================================================================
.text:00007FB4
.text:00007FB4 ; Segment type: Pure code
.text:00007FB4 ; Segment permissions: Read/Execute
.text:00007FB4 _text           segment para public 'CODE' use32
.text:00007FB4                 assume cs:_text
.text:00007FB4                 ;org 7FB4h
.text:00007FB4 ; COMDAT (pick any)
.text:00007FB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007FB4
.text:00007FB4 ; =============== S U B R O U T I N E =======================================
.text:00007FB4
.text:00007FB4 ; Attributes: bp-based frame
.text:00007FB4
.text:00007FB4 ; public: __thiscall CVirtThread::CVirtThread(void)
.text:00007FB4                 public ??0CVirtThread@@QAE@XZ
.text:00007FB4 ??0CVirtThread@@QAE@XZ proc near        ; CODE XREF: NCoderMixer2::CCoderMT::CCoderMT(void)+42p
.text:00007FB4
.text:00007FB4 var_10          = dword ptr -10h
.text:00007FB4 var_C           = dword ptr -0Ch
.text:00007FB4 var_4           = dword ptr -4
.text:00007FB4
.text:00007FB4                 push    ebp
.text:00007FB5                 mov     ebp, esp
.text:00007FB7                 push    0FFFFFFFFh
.text:00007FB9                 push    offset __ehhandler$??0CVirtThread@@QAE@XZ
.text:00007FBE                 mov     eax, large fs:0
.text:00007FC4                 push    eax
.text:00007FC5                 push    ecx
.text:00007FC6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007FCD                 mov     eax, dword ptr ds:___security_cookie
.text:00007FD2                 xor     eax, ebp
.text:00007FD4                 push    eax
.text:00007FD5                 lea     eax, [ebp+var_C]
.text:00007FD8                 mov     large fs:0, eax
.text:00007FDE                 mov     [ebp+var_10], ecx
.text:00007FE1                 mov     eax, [ebp+var_10]
.text:00007FE4                 mov     dword ptr [eax], offset ??_7CVirtThread@@6B@ ; const CVirtThread::`vftable'
.text:00007FEA                 mov     ecx, [ebp+var_10]
.text:00007FED                 add     ecx, 4          ; this
.text:00007FF0                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:00007FF5                 mov     [ebp+var_4], 0
.text:00007FFC                 mov     ecx, [ebp+var_10]
.text:00007FFF                 add     ecx, 8          ; this
.text:00008002                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:00008007                 mov     byte ptr [ebp+var_4], 1
.text:0000800B                 mov     ecx, [ebp+var_10]
.text:0000800E                 add     ecx, 0Ch        ; this
.text:00008011                 call    ??0CThread@NWindows@@QAE@XZ ; NWindows::CThread::CThread(void)
.text:00008016                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000801D                 mov     eax, [ebp+var_10]
.text:00008020                 mov     ecx, [ebp+var_C]
.text:00008023                 mov     large fs:0, ecx
.text:0000802A                 pop     ecx
.text:0000802B                 add     esp, 10h
.text:0000802E                 cmp     ebp, esp
.text:00008030                 call    __RTC_CheckEsp
.text:00008035                 mov     esp, ebp
.text:00008037                 pop     ebp
.text:00008038                 retn
.text:00008038 ??0CVirtThread@@QAE@XZ endp
.text:00008038
.text:00008038 ; ---------------------------------------------------------------------------
.text:00008039                 align 4
.text:00008039 _text           ends
.text:00008039
.text$x:0000803C ; ===========================================================================
.text$x:0000803C
.text$x:0000803C ; Segment type: Pure code
.text$x:0000803C ; Segment permissions: Read/Execute
.text$x:0000803C _text$x         segment para public 'CODE' use32
.text$x:0000803C                 assume cs:_text$x
.text$x:0000803C                 ;org 803Ch
.text$x:0000803C ; COMDAT (pick associative to section at 7FB4)
.text$x:0000803C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000803C
.text$x:0000803C ; =============== S U B R O U T I N E =======================================
.text$x:0000803C
.text$x:0000803C
.text$x:0000803C __unwindfunclet$??0CVirtThread@@QAE@XZ$0 proc near
.text$x:0000803C                                         ; DATA XREF: .xdata$x:00008074o
.text$x:0000803C                 mov     ecx, [ebp-10h]
.text$x:0000803F                 add     ecx, 4          ; this
.text$x:00008042                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00008042 __unwindfunclet$??0CVirtThread@@QAE@XZ$0 endp
.text$x:00008042
.text$x:00008047
.text$x:00008047 ; =============== S U B R O U T I N E =======================================
.text$x:00008047
.text$x:00008047
.text$x:00008047 __unwindfunclet$??0CVirtThread@@QAE@XZ$1 proc near
.text$x:00008047                                         ; DATA XREF: .xdata$x:0000807Co
.text$x:00008047                 mov     ecx, [ebp-10h]
.text$x:0000804A                 add     ecx, 8          ; this
.text$x:0000804D                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000804D __unwindfunclet$??0CVirtThread@@QAE@XZ$1 endp
.text$x:0000804D
.text$x:00008052
.text$x:00008052 ; =============== S U B R O U T I N E =======================================
.text$x:00008052
.text$x:00008052
.text$x:00008052 __ehhandler$??0CVirtThread@@QAE@XZ proc near
.text$x:00008052                                         ; DATA XREF: CVirtThread::CVirtThread(void)+5o
.text$x:00008052
.text$x:00008052 arg_4           = dword ptr  8
.text$x:00008052
.text$x:00008052                 mov     edx, [esp+arg_4]
.text$x:00008056                 lea     eax, [edx+0Ch]
.text$x:00008059                 mov     ecx, [edx-8]
.text$x:0000805C                 xor     ecx, eax
.text$x:0000805E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008063                 mov     eax, offset __ehfuncinfo$??0CVirtThread@@QAE@XZ
.text$x:00008068                 jmp     ___CxxFrameHandler3
.text$x:00008068 __ehhandler$??0CVirtThread@@QAE@XZ endp
.text$x:00008068
.text$x:00008068 ; ---------------------------------------------------------------------------
.text$x:0000806D                 align 10h
.text$x:0000806D _text$x         ends
.text$x:0000806D
.xdata$x:00008070 ; ===========================================================================
.xdata$x:00008070
.xdata$x:00008070 ; Segment type: Pure data
.xdata$x:00008070 ; Segment permissions: Read
.xdata$x:00008070 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008070                 assume cs:_xdata$x
.xdata$x:00008070                 ;org 8070h
.xdata$x:00008070 ; COMDAT (pick associative to section at 7FB4)
.xdata$x:00008070 __unwindtable$??0CVirtThread@@QAE@XZ db 0FFh
.xdata$x:00008070                                         ; DATA XREF: .xdata$x:00008088o
.xdata$x:00008071                 db 0FFh
.xdata$x:00008072                 db 0FFh
.xdata$x:00008073                 db 0FFh
.xdata$x:00008074                 dd offset __unwindfunclet$??0CVirtThread@@QAE@XZ$0
.xdata$x:00008078                 db    0
.xdata$x:00008079                 db    0
.xdata$x:0000807A                 db    0
.xdata$x:0000807B                 db    0
.xdata$x:0000807C                 dd offset __unwindfunclet$??0CVirtThread@@QAE@XZ$1
.xdata$x:00008080 __ehfuncinfo$??0CVirtThread@@QAE@XZ db  22h ; "
.xdata$x:00008080                                         ; DATA XREF: __ehhandler$??0CVirtThread@@QAE@XZ+11o
.xdata$x:00008081                 db    5
.xdata$x:00008082                 db  93h ; ô
.xdata$x:00008083                 db  19h
.xdata$x:00008084                 db    2
.xdata$x:00008085                 db    0
.xdata$x:00008086                 db    0
.xdata$x:00008087                 db    0
.xdata$x:00008088                 dd offset __unwindtable$??0CVirtThread@@QAE@XZ
.xdata$x:0000808C                 align 20h
.xdata$x:000080A0                 db    1
.xdata$x:000080A1                 db    0
.xdata$x:000080A2                 db    0
.xdata$x:000080A3                 db    0
.xdata$x:000080A3 _xdata$x        ends
.xdata$x:000080A3
.text:000080A4 ; ===========================================================================
.text:000080A4
.text:000080A4 ; Segment type: Pure code
.text:000080A4 ; Segment permissions: Read/Execute
.text:000080A4 _text           segment para public 'CODE' use32
.text:000080A4                 assume cs:_text
.text:000080A4                 ;org 80A4h
.text:000080A4 ; COMDAT (pick any)
.text:000080A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000080A4
.text:000080A4 ; =============== S U B R O U T I N E =======================================
.text:000080A4
.text:000080A4 ; Attributes: bp-based frame
.text:000080A4
.text:000080A4 ; _DWORD __thiscall NWindows::CThread::CThread(NWindows::CThread *__hidden this)
.text:000080A4                 public ??0CThread@NWindows@@QAE@XZ
.text:000080A4 ??0CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: CVirtThread::CVirtThread(void)+5Dp
.text:000080A4
.text:000080A4 var_4           = dword ptr -4
.text:000080A4
.text:000080A4                 push    ebp
.text:000080A5                 mov     ebp, esp
.text:000080A7                 push    ecx
.text:000080A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000080AF                 mov     [ebp+var_4], ecx
.text:000080B2                 mov     eax, [ebp+var_4]
.text:000080B5                 mov     dword ptr [eax], 0
.text:000080BB                 mov     eax, [ebp+var_4]
.text:000080BE                 mov     esp, ebp
.text:000080C0                 pop     ebp
.text:000080C1                 retn
.text:000080C1 ??0CThread@NWindows@@QAE@XZ endp
.text:000080C1
.text:000080C1 ; ---------------------------------------------------------------------------
.text:000080C2                 align 4
.text:000080C2 _text           ends
.text:000080C2
.text:000080C4 ; ===========================================================================
.text:000080C4
.text:000080C4 ; Segment type: Pure code
.text:000080C4 ; Segment permissions: Read/Execute
.text:000080C4 _text           segment para public 'CODE' use32
.text:000080C4                 assume cs:_text
.text:000080C4                 ;org 80C4h
.text:000080C4 ; COMDAT (pick any)
.text:000080C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000080C4
.text:000080C4 ; =============== S U B R O U T I N E =======================================
.text:000080C4
.text:000080C4 ; Attributes: bp-based frame
.text:000080C4
.text:000080C4 ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:000080C4                 public ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:000080C4 ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:000080C4                                         ; CODE XREF: CVirtThread::CVirtThread(void)+3Cp
.text:000080C4                                         ; CVirtThread::CVirtThread(void)+4Ep ...
.text:000080C4
.text:000080C4 var_4           = dword ptr -4
.text:000080C4
.text:000080C4                 push    ebp
.text:000080C5                 mov     ebp, esp
.text:000080C7                 push    ecx
.text:000080C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000080CF                 mov     [ebp+var_4], ecx
.text:000080D2                 mov     ecx, [ebp+var_4] ; this
.text:000080D5                 call    ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent(void)
.text:000080DA                 mov     eax, [ebp+var_4]
.text:000080DD                 add     esp, 4
.text:000080E0                 cmp     ebp, esp
.text:000080E2                 call    __RTC_CheckEsp
.text:000080E7                 mov     esp, ebp
.text:000080E9                 pop     ebp
.text:000080EA                 retn
.text:000080EA ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:000080EA
.text:000080EA ; ---------------------------------------------------------------------------
.text:000080EB                 align 4
.text:000080EB _text           ends
.text:000080EB
.text:000080EC ; ===========================================================================
.text:000080EC
.text:000080EC ; Segment type: Pure code
.text:000080EC ; Segment permissions: Read/Execute
.text:000080EC _text           segment para public 'CODE' use32
.text:000080EC                 assume cs:_text
.text:000080EC                 ;org 80ECh
.text:000080EC ; COMDAT (pick any)
.text:000080EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000080EC
.text:000080EC ; =============== S U B R O U T I N E =======================================
.text:000080EC
.text:000080EC ; Attributes: bp-based frame
.text:000080EC
.text:000080EC ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000080EC                 public ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:000080EC ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:000080EC                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)+11p
.text:000080EC                                         ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)+11p
.text:000080EC
.text:000080EC var_4           = dword ptr -4
.text:000080EC
.text:000080EC                 push    ebp
.text:000080ED                 mov     ebp, esp
.text:000080EF                 push    ecx
.text:000080F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000080F7                 mov     [ebp+var_4], ecx
.text:000080FA                 mov     eax, [ebp+var_4]
.text:000080FD                 mov     dword ptr [eax], 0
.text:00008103                 mov     eax, [ebp+var_4]
.text:00008106                 mov     esp, ebp
.text:00008108                 pop     ebp
.text:00008109                 retn
.text:00008109 ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00008109
.text:00008109 ; ---------------------------------------------------------------------------
.text:0000810A                 align 4
.text:0000810A _text           ends
.text:0000810A
.text:0000810C ; ===========================================================================
.text:0000810C
.text:0000810C ; Segment type: Pure code
.text:0000810C ; Segment permissions: Read/Execute
.text:0000810C _text           segment para public 'CODE' use32
.text:0000810C                 assume cs:_text
.text:0000810C                 ;org 810Ch
.text:0000810C ; COMDAT (pick any)
.text:0000810C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000810C
.text:0000810C ; =============== S U B R O U T I N E =======================================
.text:0000810C
.text:0000810C ; Attributes: bp-based frame
.text:0000810C
.text:0000810C ; public: __thiscall CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>(void)
.text:0000810C                 public ??1?$CRecordVector@PB_K@@QAE@XZ
.text:0000810C ??1?$CRecordVector@PB_K@@QAE@XZ proc near
.text:0000810C                                         ; CODE XREF: NCoderMixer2::CCoder::~CCoder(void)+3Ap
.text:0000810C
.text:0000810C var_8           = dword ptr -8
.text:0000810C var_4           = dword ptr -4
.text:0000810C
.text:0000810C                 push    ebp
.text:0000810D                 mov     ebp, esp
.text:0000810F                 sub     esp, 8
.text:00008112                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008119                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008120                 mov     [ebp+var_4], ecx
.text:00008123                 mov     eax, [ebp+var_4]
.text:00008126                 mov     ecx, [eax]
.text:00008128                 mov     [ebp+var_8], ecx
.text:0000812B                 mov     edx, [ebp+var_8]
.text:0000812E                 push    edx             ; void *
.text:0000812F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008134                 add     esp, 4
.text:00008137                 add     esp, 8
.text:0000813A                 cmp     ebp, esp
.text:0000813C                 call    __RTC_CheckEsp
.text:00008141                 mov     esp, ebp
.text:00008143                 pop     ebp
.text:00008144                 retn
.text:00008144 ??1?$CRecordVector@PB_K@@QAE@XZ endp
.text:00008144
.text:00008144 ; ---------------------------------------------------------------------------
.text:00008145                 align 4
.text:00008145 _text           ends
.text:00008145
.text:00008148 ; ===========================================================================
.text:00008148
.text:00008148 ; Segment type: Pure code
.text:00008148 ; Segment permissions: Read/Execute
.text:00008148 _text           segment para public 'CODE' use32
.text:00008148                 assume cs:_text
.text:00008148                 ;org 8148h
.text:00008148 ; COMDAT (pick any)
.text:00008148                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008148
.text:00008148 ; =============== S U B R O U T I N E =======================================
.text:00008148
.text:00008148 ; Attributes: bp-based frame
.text:00008148
.text:00008148 ; public: __thiscall CMyComPtr<struct IOutStreamFinish>::CMyComPtr<struct IOutStreamFinish>(void)
.text:00008148                 public ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ
.text:00008148 ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ proc near
.text:00008148                                         ; CODE XREF: COutStreamCalcSize::OutStreamFinish(void)+34p
.text:00008148                                         ; NCoderMixer2::CMixerST::FinishStream(uint)+109p
.text:00008148
.text:00008148 var_4           = dword ptr -4
.text:00008148
.text:00008148                 push    ebp
.text:00008149                 mov     ebp, esp
.text:0000814B                 push    ecx
.text:0000814C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008153                 mov     [ebp+var_4], ecx
.text:00008156                 mov     eax, [ebp+var_4]
.text:00008159                 mov     dword ptr [eax], 0
.text:0000815F                 mov     eax, [ebp+var_4]
.text:00008162                 mov     esp, ebp
.text:00008164                 pop     ebp
.text:00008165                 retn
.text:00008165 ??0?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ endp
.text:00008165
.text:00008165 ; ---------------------------------------------------------------------------
.text:00008166                 align 4
.text:00008166 _text           ends
.text:00008166
.text:00008168 ; ===========================================================================
.text:00008168
.text:00008168 ; Segment type: Pure code
.text:00008168 ; Segment permissions: Read/Execute
.text:00008168 _text           segment para public 'CODE' use32
.text:00008168                 assume cs:_text
.text:00008168                 ;org 8168h
.text:00008168 ; COMDAT (pick any)
.text:00008168                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008168
.text:00008168 ; =============== S U B R O U T I N E =======================================
.text:00008168
.text:00008168 ; Attributes: bp-based frame
.text:00008168
.text:00008168 ; public: __thiscall CMyComPtr<struct IOutStreamFinish>::~CMyComPtr<struct IOutStreamFinish>(void)
.text:00008168                 public ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ
.text:00008168 ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ proc near
.text:00008168                                         ; CODE XREF: COutStreamCalcSize::OutStreamFinish(void)+86p
.text:00008168                                         ; NCoderMixer2::CMixerST::FinishStream(uint)+186p ...
.text:00008168
.text:00008168 var_4           = dword ptr -4
.text:00008168
.text:00008168                 push    ebp
.text:00008169                 mov     ebp, esp
.text:0000816B                 push    ecx
.text:0000816C                 push    esi
.text:0000816D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008174                 mov     [ebp+var_4], ecx
.text:00008177                 mov     eax, [ebp+var_4]
.text:0000817A                 cmp     dword ptr [eax], 0
.text:0000817D                 jz      short loc_819A
.text:0000817F                 mov     ecx, [ebp+var_4]
.text:00008182                 mov     edx, [ecx]
.text:00008184                 mov     eax, [ebp+var_4]
.text:00008187                 mov     ecx, [eax]
.text:00008189                 mov     edx, [edx]
.text:0000818B                 mov     esi, esp
.text:0000818D                 push    ecx
.text:0000818E                 mov     eax, [edx+8]
.text:00008191                 call    eax
.text:00008193                 cmp     esi, esp
.text:00008195                 call    __RTC_CheckEsp
.text:0000819A
.text:0000819A loc_819A:                               ; CODE XREF: CMyComPtr<IOutStreamFinish>::~CMyComPtr<IOutStreamFinish>(void)+15j
.text:0000819A                 pop     esi
.text:0000819B                 add     esp, 4
.text:0000819E                 cmp     ebp, esp
.text:000081A0                 call    __RTC_CheckEsp
.text:000081A5                 mov     esp, ebp
.text:000081A7                 pop     ebp
.text:000081A8                 retn
.text:000081A8 ??1?$CMyComPtr@UIOutStreamFinish@@@@QAE@XZ endp
.text:000081A8
.text:000081A8 ; ---------------------------------------------------------------------------
.text:000081A9                 align 4
.text:000081A9 _text           ends
.text:000081A9
.text:000081AC ; ===========================================================================
.text:000081AC
.text:000081AC ; Segment type: Pure code
.text:000081AC ; Segment permissions: Read/Execute
.text:000081AC _text           segment para public 'CODE' use32
.text:000081AC                 assume cs:_text
.text:000081AC                 ;org 81ACh
.text:000081AC ; COMDAT (pick any)
.text:000081AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000081AC
.text:000081AC ; =============== S U B R O U T I N E =======================================
.text:000081AC
.text:000081AC ; Attributes: bp-based frame
.text:000081AC
.text:000081AC ; public: __thiscall CMyComPtr<struct IOutStreamFinish>::operator struct IOutStreamFinish *(void)const
.text:000081AC                 public ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ
.text:000081AC ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ proc near
.text:000081AC                                         ; CODE XREF: COutStreamCalcSize::OutStreamFinish(void)+55p
.text:000081AC                                         ; NCoderMixer2::CMixerST::FinishStream(uint)+135p
.text:000081AC
.text:000081AC var_4           = dword ptr -4
.text:000081AC
.text:000081AC                 push    ebp
.text:000081AD                 mov     ebp, esp
.text:000081AF                 push    ecx
.text:000081B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081B7                 mov     [ebp+var_4], ecx
.text:000081BA                 mov     eax, [ebp+var_4]
.text:000081BD                 mov     eax, [eax]
.text:000081BF                 mov     esp, ebp
.text:000081C1                 pop     ebp
.text:000081C2                 retn
.text:000081C2 ??B?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ endp
.text:000081C2
.text:000081C2 ; ---------------------------------------------------------------------------
.text:000081C3                 align 4
.text:000081C3 _text           ends
.text:000081C3
.text:000081C4 ; ===========================================================================
.text:000081C4
.text:000081C4 ; Segment type: Pure code
.text:000081C4 ; Segment permissions: Read/Execute
.text:000081C4 _text           segment para public 'CODE' use32
.text:000081C4                 assume cs:_text
.text:000081C4                 ;org 81C4h
.text:000081C4 ; COMDAT (pick any)
.text:000081C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000081C4
.text:000081C4 ; =============== S U B R O U T I N E =======================================
.text:000081C4
.text:000081C4 ; Attributes: bp-based frame
.text:000081C4
.text:000081C4 ; public: struct IOutStreamFinish * * __thiscall CMyComPtr<struct IOutStreamFinish>::operator&(void)
.text:000081C4                 public ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ
.text:000081C4 ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ proc near
.text:000081C4                                         ; CODE XREF: COutStreamCalcSize::OutStreamFinish(void)+3Cp
.text:000081C4                                         ; NCoderMixer2::CMixerST::FinishStream(uint)+118p
.text:000081C4
.text:000081C4 var_4           = dword ptr -4
.text:000081C4
.text:000081C4                 push    ebp
.text:000081C5                 mov     ebp, esp
.text:000081C7                 push    ecx
.text:000081C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081CF                 mov     [ebp+var_4], ecx
.text:000081D2                 mov     eax, [ebp+var_4]
.text:000081D5                 mov     esp, ebp
.text:000081D7                 pop     ebp
.text:000081D8                 retn
.text:000081D8 ??I?$CMyComPtr@UIOutStreamFinish@@@@QAEPAPAUIOutStreamFinish@@XZ endp
.text:000081D8
.text:000081D8 ; ---------------------------------------------------------------------------
.text:000081D9                 align 4
.text:000081D9 _text           ends
.text:000081D9
.text:000081DC ; ===========================================================================
.text:000081DC
.text:000081DC ; Segment type: Pure code
.text:000081DC ; Segment permissions: Read/Execute
.text:000081DC _text           segment para public 'CODE' use32
.text:000081DC                 assume cs:_text
.text:000081DC                 ;org 81DCh
.text:000081DC ; COMDAT (pick any)
.text:000081DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000081DC
.text:000081DC ; =============== S U B R O U T I N E =======================================
.text:000081DC
.text:000081DC ; Attributes: bp-based frame
.text:000081DC
.text:000081DC ; public: struct IOutStreamFinish * __thiscall CMyComPtr<struct IOutStreamFinish>::operator->(void)const
.text:000081DC                 public ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ
.text:000081DC ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ proc near
.text:000081DC                                         ; CODE XREF: COutStreamCalcSize::OutStreamFinish(void)+61p
.text:000081DC                                         ; NCoderMixer2::CMixerST::FinishStream(uint)+141p
.text:000081DC
.text:000081DC var_4           = dword ptr -4
.text:000081DC
.text:000081DC                 push    ebp
.text:000081DD                 mov     ebp, esp
.text:000081DF                 push    ecx
.text:000081E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081E7                 mov     [ebp+var_4], ecx
.text:000081EA                 mov     eax, [ebp+var_4]
.text:000081ED                 mov     eax, [eax]
.text:000081EF                 mov     esp, ebp
.text:000081F1                 pop     ebp
.text:000081F2                 retn
.text:000081F2 ??C?$CMyComPtr@UIOutStreamFinish@@@@QBEPAUIOutStreamFinish@@XZ endp
.text:000081F2
.text:000081F2 ; ---------------------------------------------------------------------------
.text:000081F3                 align 4
.text:000081F3 _text           ends
.text:000081F3
.text:000081F4 ; ===========================================================================
.text:000081F4
.text:000081F4 ; Segment type: Pure code
.text:000081F4 ; Segment permissions: Read/Execute
.text:000081F4 _text           segment para public 'CODE' use32
.text:000081F4                 assume cs:_text
.text:000081F4                 ;org 81F4h
.text:000081F4 ; COMDAT (pick any)
.text:000081F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000081F4
.text:000081F4 ; =============== S U B R O U T I N E =======================================
.text:000081F4
.text:000081F4 ; Attributes: bp-based frame
.text:000081F4
.text:000081F4 ; public: __thiscall CMyComPtr<struct ICompressSetInStream>::CMyComPtr<struct ICompressSetInStream>(void)
.text:000081F4                 public ??0?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ
.text:000081F4 ??0?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ proc near
.text:000081F4                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+15Dp
.text:000081F4
.text:000081F4 var_4           = dword ptr -4
.text:000081F4
.text:000081F4                 push    ebp
.text:000081F5                 mov     ebp, esp
.text:000081F7                 push    ecx
.text:000081F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081FF                 mov     [ebp+var_4], ecx
.text:00008202                 mov     eax, [ebp+var_4]
.text:00008205                 mov     dword ptr [eax], 0
.text:0000820B                 mov     eax, [ebp+var_4]
.text:0000820E                 mov     esp, ebp
.text:00008210                 pop     ebp
.text:00008211                 retn
.text:00008211 ??0?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ endp
.text:00008211
.text:00008211 ; ---------------------------------------------------------------------------
.text:00008212                 align 4
.text:00008212 _text           ends
.text:00008212
.text:00008214 ; ===========================================================================
.text:00008214
.text:00008214 ; Segment type: Pure code
.text:00008214 ; Segment permissions: Read/Execute
.text:00008214 _text           segment para public 'CODE' use32
.text:00008214                 assume cs:_text
.text:00008214                 ;org 8214h
.text:00008214 ; COMDAT (pick any)
.text:00008214                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008214
.text:00008214 ; =============== S U B R O U T I N E =======================================
.text:00008214
.text:00008214 ; Attributes: bp-based frame
.text:00008214
.text:00008214 ; public: __thiscall CMyComPtr<struct ICompressSetInStream>::~CMyComPtr<struct ICompressSetInStream>(void)
.text:00008214                 public ??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ
.text:00008214 ??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ proc near
.text:00008214                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+1D6p
.text:00008214                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+24Ep ...
.text:00008214
.text:00008214 var_4           = dword ptr -4
.text:00008214
.text:00008214                 push    ebp
.text:00008215                 mov     ebp, esp
.text:00008217                 push    ecx
.text:00008218                 push    esi
.text:00008219                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008220                 mov     [ebp+var_4], ecx
.text:00008223                 mov     eax, [ebp+var_4]
.text:00008226                 cmp     dword ptr [eax], 0
.text:00008229                 jz      short loc_8246
.text:0000822B                 mov     ecx, [ebp+var_4]
.text:0000822E                 mov     edx, [ecx]
.text:00008230                 mov     eax, [ebp+var_4]
.text:00008233                 mov     ecx, [eax]
.text:00008235                 mov     edx, [edx]
.text:00008237                 mov     esi, esp
.text:00008239                 push    ecx
.text:0000823A                 mov     eax, [edx+8]
.text:0000823D                 call    eax
.text:0000823F                 cmp     esi, esp
.text:00008241                 call    __RTC_CheckEsp
.text:00008246
.text:00008246 loc_8246:                               ; CODE XREF: CMyComPtr<ICompressSetInStream>::~CMyComPtr<ICompressSetInStream>(void)+15j
.text:00008246                 pop     esi
.text:00008247                 add     esp, 4
.text:0000824A                 cmp     ebp, esp
.text:0000824C                 call    __RTC_CheckEsp
.text:00008251                 mov     esp, ebp
.text:00008253                 pop     ebp
.text:00008254                 retn
.text:00008254 ??1?$CMyComPtr@UICompressSetInStream@@@@QAE@XZ endp
.text:00008254
.text:00008254 ; ---------------------------------------------------------------------------
.text:00008255                 align 4
.text:00008255 _text           ends
.text:00008255
.text:00008258 ; ===========================================================================
.text:00008258
.text:00008258 ; Segment type: Pure code
.text:00008258 ; Segment permissions: Read/Execute
.text:00008258 _text           segment para public 'CODE' use32
.text:00008258                 assume cs:_text
.text:00008258                 ;org 8258h
.text:00008258 ; COMDAT (pick any)
.text:00008258                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008258
.text:00008258 ; =============== S U B R O U T I N E =======================================
.text:00008258
.text:00008258 ; Attributes: bp-based frame
.text:00008258
.text:00008258 ; public: __thiscall CMyComPtr<struct ICompressSetInStream>::operator struct ICompressSetInStream *(void)const
.text:00008258                 public ??B?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ
.text:00008258 ??B?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ proc near
.text:00008258                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+17Fp
.text:00008258
.text:00008258 var_4           = dword ptr -4
.text:00008258
.text:00008258                 push    ebp
.text:00008259                 mov     ebp, esp
.text:0000825B                 push    ecx
.text:0000825C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008263                 mov     [ebp+var_4], ecx
.text:00008266                 mov     eax, [ebp+var_4]
.text:00008269                 mov     eax, [eax]
.text:0000826B                 mov     esp, ebp
.text:0000826D                 pop     ebp
.text:0000826E                 retn
.text:0000826E ??B?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ endp
.text:0000826E
.text:0000826E ; ---------------------------------------------------------------------------
.text:0000826F                 align 10h
.text:0000826F _text           ends
.text:0000826F
.text:00008270 ; ===========================================================================
.text:00008270
.text:00008270 ; Segment type: Pure code
.text:00008270 ; Segment permissions: Read/Execute
.text:00008270 _text           segment para public 'CODE' use32
.text:00008270                 assume cs:_text
.text:00008270                 ;org 8270h
.text:00008270 ; COMDAT (pick any)
.text:00008270                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008270
.text:00008270 ; =============== S U B R O U T I N E =======================================
.text:00008270
.text:00008270 ; Attributes: bp-based frame
.text:00008270
.text:00008270 ; public: struct ICompressSetInStream * * __thiscall CMyComPtr<struct ICompressSetInStream>::operator&(void)
.text:00008270                 public ??I?$CMyComPtr@UICompressSetInStream@@@@QAEPAPAUICompressSetInStream@@XZ
.text:00008270 ??I?$CMyComPtr@UICompressSetInStream@@@@QAEPAPAUICompressSetInStream@@XZ proc near
.text:00008270                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+169p
.text:00008270
.text:00008270 var_4           = dword ptr -4
.text:00008270
.text:00008270                 push    ebp
.text:00008271                 mov     ebp, esp
.text:00008273                 push    ecx
.text:00008274                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000827B                 mov     [ebp+var_4], ecx
.text:0000827E                 mov     eax, [ebp+var_4]
.text:00008281                 mov     esp, ebp
.text:00008283                 pop     ebp
.text:00008284                 retn
.text:00008284 ??I?$CMyComPtr@UICompressSetInStream@@@@QAEPAPAUICompressSetInStream@@XZ endp
.text:00008284
.text:00008284 ; ---------------------------------------------------------------------------
.text:00008285                 align 4
.text:00008285 _text           ends
.text:00008285
.text:00008288 ; ===========================================================================
.text:00008288
.text:00008288 ; Segment type: Pure code
.text:00008288 ; Segment permissions: Read/Execute
.text:00008288 _text           segment para public 'CODE' use32
.text:00008288                 assume cs:_text
.text:00008288                 ;org 8288h
.text:00008288 ; COMDAT (pick any)
.text:00008288                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008288
.text:00008288 ; =============== S U B R O U T I N E =======================================
.text:00008288
.text:00008288 ; Attributes: bp-based frame
.text:00008288
.text:00008288 ; public: struct ICompressSetInStream * __thiscall CMyComPtr<struct ICompressSetInStream>::operator->(void)const
.text:00008288                 public ??C?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ
.text:00008288 ??C?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ proc near
.text:00008288                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+1F8p
.text:00008288
.text:00008288 var_4           = dword ptr -4
.text:00008288
.text:00008288                 push    ebp
.text:00008289                 mov     ebp, esp
.text:0000828B                 push    ecx
.text:0000828C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008293                 mov     [ebp+var_4], ecx
.text:00008296                 mov     eax, [ebp+var_4]
.text:00008299                 mov     eax, [eax]
.text:0000829B                 mov     esp, ebp
.text:0000829D                 pop     ebp
.text:0000829E                 retn
.text:0000829E ??C?$CMyComPtr@UICompressSetInStream@@@@QBEPAUICompressSetInStream@@XZ endp
.text:0000829E
.text:0000829E ; ---------------------------------------------------------------------------
.text:0000829F                 align 10h
.text:0000829F _text           ends
.text:0000829F
.text:000082A0 ; ===========================================================================
.text:000082A0
.text:000082A0 ; Segment type: Pure code
.text:000082A0 ; Segment permissions: Read/Execute
.text:000082A0 _text           segment para public 'CODE' use32
.text:000082A0                 assume cs:_text
.text:000082A0                 ;org 82A0h
.text:000082A0 ; COMDAT (pick any)
.text:000082A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000082A0
.text:000082A0 ; =============== S U B R O U T I N E =======================================
.text:000082A0
.text:000082A0 ; Attributes: bp-based frame
.text:000082A0
.text:000082A0 ; public: __thiscall CMyComPtr<struct ICompressSetInStream2>::CMyComPtr<struct ICompressSetInStream2>(void)
.text:000082A0                 public ??0?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ
.text:000082A0 ??0?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ proc near
.text:000082A0                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+2A2p
.text:000082A0
.text:000082A0 var_4           = dword ptr -4
.text:000082A0
.text:000082A0                 push    ebp
.text:000082A1                 mov     ebp, esp
.text:000082A3                 push    ecx
.text:000082A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000082AB                 mov     [ebp+var_4], ecx
.text:000082AE                 mov     eax, [ebp+var_4]
.text:000082B1                 mov     dword ptr [eax], 0
.text:000082B7                 mov     eax, [ebp+var_4]
.text:000082BA                 mov     esp, ebp
.text:000082BC                 pop     ebp
.text:000082BD                 retn
.text:000082BD ??0?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ endp
.text:000082BD
.text:000082BD ; ---------------------------------------------------------------------------
.text:000082BE                 align 10h
.text:000082BE _text           ends
.text:000082BE
.text:000082C0 ; ===========================================================================
.text:000082C0
.text:000082C0 ; Segment type: Pure code
.text:000082C0 ; Segment permissions: Read/Execute
.text:000082C0 _text           segment para public 'CODE' use32
.text:000082C0                 assume cs:_text
.text:000082C0                 ;org 82C0h
.text:000082C0 ; COMDAT (pick any)
.text:000082C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000082C0
.text:000082C0 ; =============== S U B R O U T I N E =======================================
.text:000082C0
.text:000082C0 ; Attributes: bp-based frame
.text:000082C0
.text:000082C0 ; public: __thiscall CMyComPtr<struct ICompressSetInStream2>::~CMyComPtr<struct ICompressSetInStream2>(void)
.text:000082C0                 public ??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ
.text:000082C0 ??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ proc near
.text:000082C0                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+2E1p
.text:000082C0                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+374p ...
.text:000082C0
.text:000082C0 var_4           = dword ptr -4
.text:000082C0
.text:000082C0                 push    ebp
.text:000082C1                 mov     ebp, esp
.text:000082C3                 push    ecx
.text:000082C4                 push    esi
.text:000082C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000082CC                 mov     [ebp+var_4], ecx
.text:000082CF                 mov     eax, [ebp+var_4]
.text:000082D2                 cmp     dword ptr [eax], 0
.text:000082D5                 jz      short loc_82F2
.text:000082D7                 mov     ecx, [ebp+var_4]
.text:000082DA                 mov     edx, [ecx]
.text:000082DC                 mov     eax, [ebp+var_4]
.text:000082DF                 mov     ecx, [eax]
.text:000082E1                 mov     edx, [edx]
.text:000082E3                 mov     esi, esp
.text:000082E5                 push    ecx
.text:000082E6                 mov     eax, [edx+8]
.text:000082E9                 call    eax
.text:000082EB                 cmp     esi, esp
.text:000082ED                 call    __RTC_CheckEsp
.text:000082F2
.text:000082F2 loc_82F2:                               ; CODE XREF: CMyComPtr<ICompressSetInStream2>::~CMyComPtr<ICompressSetInStream2>(void)+15j
.text:000082F2                 pop     esi
.text:000082F3                 add     esp, 4
.text:000082F6                 cmp     ebp, esp
.text:000082F8                 call    __RTC_CheckEsp
.text:000082FD                 mov     esp, ebp
.text:000082FF                 pop     ebp
.text:00008300                 retn
.text:00008300 ??1?$CMyComPtr@UICompressSetInStream2@@@@QAE@XZ endp
.text:00008300
.text:00008300 ; ---------------------------------------------------------------------------
.text:00008301                 align 4
.text:00008301 _text           ends
.text:00008301
.text:00008304 ; ===========================================================================
.text:00008304
.text:00008304 ; Segment type: Pure code
.text:00008304 ; Segment permissions: Read/Execute
.text:00008304 _text           segment para public 'CODE' use32
.text:00008304                 assume cs:_text
.text:00008304                 ;org 8304h
.text:00008304 ; COMDAT (pick any)
.text:00008304                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008304
.text:00008304 ; =============== S U B R O U T I N E =======================================
.text:00008304
.text:00008304 ; Attributes: bp-based frame
.text:00008304
.text:00008304 ; public: struct ICompressSetInStream2 * * __thiscall CMyComPtr<struct ICompressSetInStream2>::operator&(void)
.text:00008304                 public ??I?$CMyComPtr@UICompressSetInStream2@@@@QAEPAPAUICompressSetInStream2@@XZ
.text:00008304 ??I?$CMyComPtr@UICompressSetInStream2@@@@QAEPAPAUICompressSetInStream2@@XZ proc near
.text:00008304                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+2AEp
.text:00008304
.text:00008304 var_4           = dword ptr -4
.text:00008304
.text:00008304                 push    ebp
.text:00008305                 mov     ebp, esp
.text:00008307                 push    ecx
.text:00008308                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000830F                 mov     [ebp+var_4], ecx
.text:00008312                 mov     eax, [ebp+var_4]
.text:00008315                 mov     esp, ebp
.text:00008317                 pop     ebp
.text:00008318                 retn
.text:00008318 ??I?$CMyComPtr@UICompressSetInStream2@@@@QAEPAPAUICompressSetInStream2@@XZ endp
.text:00008318
.text:00008318 ; ---------------------------------------------------------------------------
.text:00008319                 align 4
.text:00008319 _text           ends
.text:00008319
.text:0000831C ; ===========================================================================
.text:0000831C
.text:0000831C ; Segment type: Pure code
.text:0000831C ; Segment permissions: Read/Execute
.text:0000831C _text           segment para public 'CODE' use32
.text:0000831C                 assume cs:_text
.text:0000831C                 ;org 831Ch
.text:0000831C ; COMDAT (pick any)
.text:0000831C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000831C
.text:0000831C ; =============== S U B R O U T I N E =======================================
.text:0000831C
.text:0000831C ; Attributes: bp-based frame
.text:0000831C
.text:0000831C ; public: struct ICompressSetInStream2 * __thiscall CMyComPtr<struct ICompressSetInStream2>::operator->(void)const
.text:0000831C                 public ??C?$CMyComPtr@UICompressSetInStream2@@@@QBEPAUICompressSetInStream2@@XZ
.text:0000831C ??C?$CMyComPtr@UICompressSetInStream2@@@@QBEPAUICompressSetInStream2@@XZ proc near
.text:0000831C                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+396p
.text:0000831C
.text:0000831C var_4           = dword ptr -4
.text:0000831C
.text:0000831C                 push    ebp
.text:0000831D                 mov     ebp, esp
.text:0000831F                 push    ecx
.text:00008320                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008327                 mov     [ebp+var_4], ecx
.text:0000832A                 mov     eax, [ebp+var_4]
.text:0000832D                 mov     eax, [eax]
.text:0000832F                 mov     esp, ebp
.text:00008331                 pop     ebp
.text:00008332                 retn
.text:00008332 ??C?$CMyComPtr@UICompressSetInStream2@@@@QBEPAUICompressSetInStream2@@XZ endp
.text:00008332
.text:00008332 ; ---------------------------------------------------------------------------
.text:00008333                 align 4
.text:00008333 _text           ends
.text:00008333
.text:00008334 ; ===========================================================================
.text:00008334
.text:00008334 ; Segment type: Pure code
.text:00008334 ; Segment permissions: Read/Execute
.text:00008334 _text           segment para public 'CODE' use32
.text:00008334                 assume cs:_text
.text:00008334                 ;org 8334h
.text:00008334 ; COMDAT (pick any)
.text:00008334                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008334
.text:00008334 ; =============== S U B R O U T I N E =======================================
.text:00008334
.text:00008334 ; Attributes: bp-based frame
.text:00008334
.text:00008334 ; public: bool __thiscall CMyComPtr<struct ICompressSetInStream2>::operator!(void)const
.text:00008334                 public ??7?$CMyComPtr@UICompressSetInStream2@@@@QBE_NXZ
.text:00008334 ??7?$CMyComPtr@UICompressSetInStream2@@@@QBE_NXZ proc near
.text:00008334                                         ; CODE XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+2C4p
.text:00008334
.text:00008334 var_4           = dword ptr -4
.text:00008334
.text:00008334                 push    ebp
.text:00008335                 mov     ebp, esp
.text:00008337                 push    ecx
.text:00008338                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000833F                 mov     [ebp+var_4], ecx
.text:00008342                 mov     eax, [ebp+var_4]
.text:00008345                 xor     ecx, ecx
.text:00008347                 cmp     dword ptr [eax], 0
.text:0000834A                 setz    cl
.text:0000834D                 mov     al, cl
.text:0000834F                 mov     esp, ebp
.text:00008351                 pop     ebp
.text:00008352                 retn
.text:00008352 ??7?$CMyComPtr@UICompressSetInStream2@@@@QBE_NXZ endp
.text:00008352
.text:00008352 ; ---------------------------------------------------------------------------
.text:00008353                 align 4
.text:00008353 _text           ends
.text:00008353
.text:00008354 ; ===========================================================================
.text:00008354
.text:00008354 ; Segment type: Pure code
.text:00008354 ; Segment permissions: Read/Execute
.text:00008354 _text           segment para public 'CODE' use32
.text:00008354                 assume cs:_text
.text:00008354                 ;org 8354h
.text:00008354 ; COMDAT (pick any)
.text:00008354                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008354
.text:00008354 ; =============== S U B R O U T I N E =======================================
.text:00008354
.text:00008354 ; Attributes: bp-based frame
.text:00008354
.text:00008354 ; public: __thiscall CMyComPtr<struct ICompressSetOutStream>::CMyComPtr<struct ICompressSetOutStream>(void)
.text:00008354                 public ??0?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ
.text:00008354 ??0?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ proc near
.text:00008354                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+221p
.text:00008354
.text:00008354 var_4           = dword ptr -4
.text:00008354
.text:00008354                 push    ebp
.text:00008355                 mov     ebp, esp
.text:00008357                 push    ecx
.text:00008358                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000835F                 mov     [ebp+var_4], ecx
.text:00008362                 mov     eax, [ebp+var_4]
.text:00008365                 mov     dword ptr [eax], 0
.text:0000836B                 mov     eax, [ebp+var_4]
.text:0000836E                 mov     esp, ebp
.text:00008370                 pop     ebp
.text:00008371                 retn
.text:00008371 ??0?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ endp
.text:00008371
.text:00008371 ; ---------------------------------------------------------------------------
.text:00008372                 align 4
.text:00008372 _text           ends
.text:00008372
.text:00008374 ; ===========================================================================
.text:00008374
.text:00008374 ; Segment type: Pure code
.text:00008374 ; Segment permissions: Read/Execute
.text:00008374 _text           segment para public 'CODE' use32
.text:00008374                 assume cs:_text
.text:00008374                 ;org 8374h
.text:00008374 ; COMDAT (pick any)
.text:00008374                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008374
.text:00008374 ; =============== S U B R O U T I N E =======================================
.text:00008374
.text:00008374 ; Attributes: bp-based frame
.text:00008374
.text:00008374 ; public: __thiscall CMyComPtr<struct ICompressSetOutStream>::~CMyComPtr<struct ICompressSetOutStream>(void)
.text:00008374                 public ??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ
.text:00008374 ??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ proc near
.text:00008374                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+29Ap
.text:00008374                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+312p ...
.text:00008374
.text:00008374 var_4           = dword ptr -4
.text:00008374
.text:00008374                 push    ebp
.text:00008375                 mov     ebp, esp
.text:00008377                 push    ecx
.text:00008378                 push    esi
.text:00008379                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008380                 mov     [ebp+var_4], ecx
.text:00008383                 mov     eax, [ebp+var_4]
.text:00008386                 cmp     dword ptr [eax], 0
.text:00008389                 jz      short loc_83A6
.text:0000838B                 mov     ecx, [ebp+var_4]
.text:0000838E                 mov     edx, [ecx]
.text:00008390                 mov     eax, [ebp+var_4]
.text:00008393                 mov     ecx, [eax]
.text:00008395                 mov     edx, [edx]
.text:00008397                 mov     esi, esp
.text:00008399                 push    ecx
.text:0000839A                 mov     eax, [edx+8]
.text:0000839D                 call    eax
.text:0000839F                 cmp     esi, esp
.text:000083A1                 call    __RTC_CheckEsp
.text:000083A6
.text:000083A6 loc_83A6:                               ; CODE XREF: CMyComPtr<ICompressSetOutStream>::~CMyComPtr<ICompressSetOutStream>(void)+15j
.text:000083A6                 pop     esi
.text:000083A7                 add     esp, 4
.text:000083AA                 cmp     ebp, esp
.text:000083AC                 call    __RTC_CheckEsp
.text:000083B1                 mov     esp, ebp
.text:000083B3                 pop     ebp
.text:000083B4                 retn
.text:000083B4 ??1?$CMyComPtr@UICompressSetOutStream@@@@QAE@XZ endp
.text:000083B4
.text:000083B4 ; ---------------------------------------------------------------------------
.text:000083B5                 align 4
.text:000083B5 _text           ends
.text:000083B5
.text:000083B8 ; ===========================================================================
.text:000083B8
.text:000083B8 ; Segment type: Pure code
.text:000083B8 ; Segment permissions: Read/Execute
.text:000083B8 _text           segment para public 'CODE' use32
.text:000083B8                 assume cs:_text
.text:000083B8                 ;org 83B8h
.text:000083B8 ; COMDAT (pick any)
.text:000083B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000083B8
.text:000083B8 ; =============== S U B R O U T I N E =======================================
.text:000083B8
.text:000083B8 ; Attributes: bp-based frame
.text:000083B8
.text:000083B8 ; public: __thiscall CMyComPtr<struct ICompressSetOutStream>::operator struct ICompressSetOutStream *(void)const
.text:000083B8                 public ??B?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ
.text:000083B8 ??B?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ proc near
.text:000083B8                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+243p
.text:000083B8
.text:000083B8 var_4           = dword ptr -4
.text:000083B8
.text:000083B8                 push    ebp
.text:000083B9                 mov     ebp, esp
.text:000083BB                 push    ecx
.text:000083BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000083C3                 mov     [ebp+var_4], ecx
.text:000083C6                 mov     eax, [ebp+var_4]
.text:000083C9                 mov     eax, [eax]
.text:000083CB                 mov     esp, ebp
.text:000083CD                 pop     ebp
.text:000083CE                 retn
.text:000083CE ??B?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ endp
.text:000083CE
.text:000083CE ; ---------------------------------------------------------------------------
.text:000083CF                 align 10h
.text:000083CF _text           ends
.text:000083CF
.text:000083D0 ; ===========================================================================
.text:000083D0
.text:000083D0 ; Segment type: Pure code
.text:000083D0 ; Segment permissions: Read/Execute
.text:000083D0 _text           segment para public 'CODE' use32
.text:000083D0                 assume cs:_text
.text:000083D0                 ;org 83D0h
.text:000083D0 ; COMDAT (pick any)
.text:000083D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000083D0
.text:000083D0 ; =============== S U B R O U T I N E =======================================
.text:000083D0
.text:000083D0 ; Attributes: bp-based frame
.text:000083D0
.text:000083D0 ; public: struct ICompressSetOutStream * * __thiscall CMyComPtr<struct ICompressSetOutStream>::operator&(void)
.text:000083D0                 public ??I?$CMyComPtr@UICompressSetOutStream@@@@QAEPAPAUICompressSetOutStream@@XZ
.text:000083D0 ??I?$CMyComPtr@UICompressSetOutStream@@@@QAEPAPAUICompressSetOutStream@@XZ proc near
.text:000083D0                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+22Dp
.text:000083D0
.text:000083D0 var_4           = dword ptr -4
.text:000083D0
.text:000083D0                 push    ebp
.text:000083D1                 mov     ebp, esp
.text:000083D3                 push    ecx
.text:000083D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000083DB                 mov     [ebp+var_4], ecx
.text:000083DE                 mov     eax, [ebp+var_4]
.text:000083E1                 mov     esp, ebp
.text:000083E3                 pop     ebp
.text:000083E4                 retn
.text:000083E4 ??I?$CMyComPtr@UICompressSetOutStream@@@@QAEPAPAUICompressSetOutStream@@XZ endp
.text:000083E4
.text:000083E4 ; ---------------------------------------------------------------------------
.text:000083E5                 align 4
.text:000083E5 _text           ends
.text:000083E5
.text:000083E8 ; ===========================================================================
.text:000083E8
.text:000083E8 ; Segment type: Pure code
.text:000083E8 ; Segment permissions: Read/Execute
.text:000083E8 _text           segment para public 'CODE' use32
.text:000083E8                 assume cs:_text
.text:000083E8                 ;org 83E8h
.text:000083E8 ; COMDAT (pick any)
.text:000083E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000083E8
.text:000083E8 ; =============== S U B R O U T I N E =======================================
.text:000083E8
.text:000083E8 ; Attributes: bp-based frame
.text:000083E8
.text:000083E8 ; public: struct ICompressSetOutStream * __thiscall CMyComPtr<struct ICompressSetOutStream>::operator->(void)const
.text:000083E8                 public ??C?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ
.text:000083E8 ??C?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ proc near
.text:000083E8                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+2BCp
.text:000083E8
.text:000083E8 var_4           = dword ptr -4
.text:000083E8
.text:000083E8                 push    ebp
.text:000083E9                 mov     ebp, esp
.text:000083EB                 push    ecx
.text:000083EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000083F3                 mov     [ebp+var_4], ecx
.text:000083F6                 mov     eax, [ebp+var_4]
.text:000083F9                 mov     eax, [eax]
.text:000083FB                 mov     esp, ebp
.text:000083FD                 pop     ebp
.text:000083FE                 retn
.text:000083FE ??C?$CMyComPtr@UICompressSetOutStream@@@@QBEPAUICompressSetOutStream@@XZ endp
.text:000083FE
.text:000083FE ; ---------------------------------------------------------------------------
.text:000083FF                 align 10h
.text:000083FF _text           ends
.text:000083FF
.text:00008400 ; ===========================================================================
.text:00008400
.text:00008400 ; Segment type: Pure code
.text:00008400 ; Segment permissions: Read/Execute
.text:00008400 _text           segment para public 'CODE' use32
.text:00008400                 assume cs:_text
.text:00008400                 ;org 8400h
.text:00008400 ; COMDAT (pick any)
.text:00008400                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008400
.text:00008400 ; =============== S U B R O U T I N E =======================================
.text:00008400
.text:00008400 ; Attributes: bp-based frame
.text:00008400
.text:00008400 ; public: __thiscall CMyComPtr<struct ICompressInitEncoder>::CMyComPtr<struct ICompressInitEncoder>(void)
.text:00008400                 public ??0?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ
.text:00008400 ??0?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ proc near
.text:00008400                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+38Bp
.text:00008400
.text:00008400 var_4           = dword ptr -4
.text:00008400
.text:00008400                 push    ebp
.text:00008401                 mov     ebp, esp
.text:00008403                 push    ecx
.text:00008404                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000840B                 mov     [ebp+var_4], ecx
.text:0000840E                 mov     eax, [ebp+var_4]
.text:00008411                 mov     dword ptr [eax], 0
.text:00008417                 mov     eax, [ebp+var_4]
.text:0000841A                 mov     esp, ebp
.text:0000841C                 pop     ebp
.text:0000841D                 retn
.text:0000841D ??0?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ endp
.text:0000841D
.text:0000841D ; ---------------------------------------------------------------------------
.text:0000841E                 align 10h
.text:0000841E _text           ends
.text:0000841E
.text:00008420 ; ===========================================================================
.text:00008420
.text:00008420 ; Segment type: Pure code
.text:00008420 ; Segment permissions: Read/Execute
.text:00008420 _text           segment para public 'CODE' use32
.text:00008420                 assume cs:_text
.text:00008420                 ;org 8420h
.text:00008420 ; COMDAT (pick any)
.text:00008420                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008420
.text:00008420 ; =============== S U B R O U T I N E =======================================
.text:00008420
.text:00008420 ; Attributes: bp-based frame
.text:00008420
.text:00008420 ; public: __thiscall CMyComPtr<struct ICompressInitEncoder>::~CMyComPtr<struct ICompressInitEncoder>(void)
.text:00008420                 public ??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ
.text:00008420 ??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ proc near
.text:00008420                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+416p
.text:00008420                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+469p ...
.text:00008420
.text:00008420 var_4           = dword ptr -4
.text:00008420
.text:00008420                 push    ebp
.text:00008421                 mov     ebp, esp
.text:00008423                 push    ecx
.text:00008424                 push    esi
.text:00008425                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000842C                 mov     [ebp+var_4], ecx
.text:0000842F                 mov     eax, [ebp+var_4]
.text:00008432                 cmp     dword ptr [eax], 0
.text:00008435                 jz      short loc_8452
.text:00008437                 mov     ecx, [ebp+var_4]
.text:0000843A                 mov     edx, [ecx]
.text:0000843C                 mov     eax, [ebp+var_4]
.text:0000843F                 mov     ecx, [eax]
.text:00008441                 mov     edx, [edx]
.text:00008443                 mov     esi, esp
.text:00008445                 push    ecx
.text:00008446                 mov     eax, [edx+8]
.text:00008449                 call    eax
.text:0000844B                 cmp     esi, esp
.text:0000844D                 call    __RTC_CheckEsp
.text:00008452
.text:00008452 loc_8452:                               ; CODE XREF: CMyComPtr<ICompressInitEncoder>::~CMyComPtr<ICompressInitEncoder>(void)+15j
.text:00008452                 pop     esi
.text:00008453                 add     esp, 4
.text:00008456                 cmp     ebp, esp
.text:00008458                 call    __RTC_CheckEsp
.text:0000845D                 mov     esp, ebp
.text:0000845F                 pop     ebp
.text:00008460                 retn
.text:00008460 ??1?$CMyComPtr@UICompressInitEncoder@@@@QAE@XZ endp
.text:00008460
.text:00008460 ; ---------------------------------------------------------------------------
.text:00008461                 align 4
.text:00008461 _text           ends
.text:00008461
.text:00008464 ; ===========================================================================
.text:00008464
.text:00008464 ; Segment type: Pure code
.text:00008464 ; Segment permissions: Read/Execute
.text:00008464 _text           segment para public 'CODE' use32
.text:00008464                 assume cs:_text
.text:00008464                 ;org 8464h
.text:00008464 ; COMDAT (pick any)
.text:00008464                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008464
.text:00008464 ; =============== S U B R O U T I N E =======================================
.text:00008464
.text:00008464 ; Attributes: bp-based frame
.text:00008464
.text:00008464 ; public: __thiscall CMyComPtr<struct ICompressInitEncoder>::operator struct ICompressInitEncoder *(void)const
.text:00008464                 public ??B?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ
.text:00008464 ??B?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ proc near
.text:00008464                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+3B6p
.text:00008464
.text:00008464 var_4           = dword ptr -4
.text:00008464
.text:00008464                 push    ebp
.text:00008465                 mov     ebp, esp
.text:00008467                 push    ecx
.text:00008468                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000846F                 mov     [ebp+var_4], ecx
.text:00008472                 mov     eax, [ebp+var_4]
.text:00008475                 mov     eax, [eax]
.text:00008477                 mov     esp, ebp
.text:00008479                 pop     ebp
.text:0000847A                 retn
.text:0000847A ??B?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ endp
.text:0000847A
.text:0000847A ; ---------------------------------------------------------------------------
.text:0000847B                 align 4
.text:0000847B _text           ends
.text:0000847B
.text:0000847C ; ===========================================================================
.text:0000847C
.text:0000847C ; Segment type: Pure code
.text:0000847C ; Segment permissions: Read/Execute
.text:0000847C _text           segment para public 'CODE' use32
.text:0000847C                 assume cs:_text
.text:0000847C                 ;org 847Ch
.text:0000847C ; COMDAT (pick any)
.text:0000847C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000847C
.text:0000847C ; =============== S U B R O U T I N E =======================================
.text:0000847C
.text:0000847C ; Attributes: bp-based frame
.text:0000847C
.text:0000847C ; public: struct ICompressInitEncoder * * __thiscall CMyComPtr<struct ICompressInitEncoder>::operator&(void)
.text:0000847C                 public ??I?$CMyComPtr@UICompressInitEncoder@@@@QAEPAPAUICompressInitEncoder@@XZ
.text:0000847C ??I?$CMyComPtr@UICompressInitEncoder@@@@QAEPAPAUICompressInitEncoder@@XZ proc near
.text:0000847C                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+39Ap
.text:0000847C
.text:0000847C var_4           = dword ptr -4
.text:0000847C
.text:0000847C                 push    ebp
.text:0000847D                 mov     ebp, esp
.text:0000847F                 push    ecx
.text:00008480                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008487                 mov     [ebp+var_4], ecx
.text:0000848A                 mov     eax, [ebp+var_4]
.text:0000848D                 mov     esp, ebp
.text:0000848F                 pop     ebp
.text:00008490                 retn
.text:00008490 ??I?$CMyComPtr@UICompressInitEncoder@@@@QAEPAPAUICompressInitEncoder@@XZ endp
.text:00008490
.text:00008490 ; ---------------------------------------------------------------------------
.text:00008491                 align 4
.text:00008491 _text           ends
.text:00008491
.text:00008494 ; ===========================================================================
.text:00008494
.text:00008494 ; Segment type: Pure code
.text:00008494 ; Segment permissions: Read/Execute
.text:00008494 _text           segment para public 'CODE' use32
.text:00008494                 assume cs:_text
.text:00008494                 ;org 8494h
.text:00008494 ; COMDAT (pick any)
.text:00008494                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008494
.text:00008494 ; =============== S U B R O U T I N E =======================================
.text:00008494
.text:00008494 ; Attributes: bp-based frame
.text:00008494
.text:00008494 ; public: struct ICompressInitEncoder * __thiscall CMyComPtr<struct ICompressInitEncoder>::operator->(void)const
.text:00008494                 public ??C?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ
.text:00008494 ??C?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ proc near
.text:00008494                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+3C9p
.text:00008494
.text:00008494 var_4           = dword ptr -4
.text:00008494
.text:00008494                 push    ebp
.text:00008495                 mov     ebp, esp
.text:00008497                 push    ecx
.text:00008498                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000849F                 mov     [ebp+var_4], ecx
.text:000084A2                 mov     eax, [ebp+var_4]
.text:000084A5                 mov     eax, [eax]
.text:000084A7                 mov     esp, ebp
.text:000084A9                 pop     ebp
.text:000084AA                 retn
.text:000084AA ??C?$CMyComPtr@UICompressInitEncoder@@@@QBEPAUICompressInitEncoder@@XZ endp
.text:000084AA
.text:000084AA ; ---------------------------------------------------------------------------
.text:000084AB                 align 4
.text:000084AB _text           ends
.text:000084AB
.text:000084AC ; ===========================================================================
.text:000084AC
.text:000084AC ; Segment type: Pure code
.text:000084AC ; Segment permissions: Read/Execute
.text:000084AC _text           segment para public 'CODE' use32
.text:000084AC                 assume cs:_text
.text:000084AC                 ;org 84ACh
.text:000084AC ; COMDAT (pick any)
.text:000084AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000084AC
.text:000084AC ; =============== S U B R O U T I N E =======================================
.text:000084AC
.text:000084AC ; Attributes: bp-based frame
.text:000084AC
.text:000084AC ; public: __thiscall CMyComPtr<struct ICompressSetOutStreamSize>::CMyComPtr<struct ICompressSetOutStreamSize>(void)
.text:000084AC                 public ??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ
.text:000084AC ??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ proc near
.text:000084AC                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+479p
.text:000084AC                                         ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+C7p
.text:000084AC
.text:000084AC var_4           = dword ptr -4
.text:000084AC
.text:000084AC                 push    ebp
.text:000084AD                 mov     ebp, esp
.text:000084AF                 push    ecx
.text:000084B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000084B7                 mov     [ebp+var_4], ecx
.text:000084BA                 mov     eax, [ebp+var_4]
.text:000084BD                 mov     dword ptr [eax], 0
.text:000084C3                 mov     eax, [ebp+var_4]
.text:000084C6                 mov     esp, ebp
.text:000084C8                 pop     ebp
.text:000084C9                 retn
.text:000084C9 ??0?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ endp
.text:000084C9
.text:000084C9 ; ---------------------------------------------------------------------------
.text:000084CA                 align 4
.text:000084CA _text           ends
.text:000084CA
.text:000084CC ; ===========================================================================
.text:000084CC
.text:000084CC ; Segment type: Pure code
.text:000084CC ; Segment permissions: Read/Execute
.text:000084CC _text           segment para public 'CODE' use32
.text:000084CC                 assume cs:_text
.text:000084CC                 ;org 84CCh
.text:000084CC ; COMDAT (pick any)
.text:000084CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000084CC
.text:000084CC ; =============== S U B R O U T I N E =======================================
.text:000084CC
.text:000084CC ; Attributes: bp-based frame
.text:000084CC
.text:000084CC ; public: __thiscall CMyComPtr<struct ICompressSetOutStreamSize>::~CMyComPtr<struct ICompressSetOutStreamSize>(void)
.text:000084CC                 public ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ
.text:000084CC ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ proc near
.text:000084CC                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+53Fp
.text:000084CC                                         ; NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+592p ...
.text:000084CC
.text:000084CC var_4           = dword ptr -4
.text:000084CC
.text:000084CC                 push    ebp
.text:000084CD                 mov     ebp, esp
.text:000084CF                 push    ecx
.text:000084D0                 push    esi
.text:000084D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000084D8                 mov     [ebp+var_4], ecx
.text:000084DB                 mov     eax, [ebp+var_4]
.text:000084DE                 cmp     dword ptr [eax], 0
.text:000084E1                 jz      short loc_84FE
.text:000084E3                 mov     ecx, [ebp+var_4]
.text:000084E6                 mov     edx, [ecx]
.text:000084E8                 mov     eax, [ebp+var_4]
.text:000084EB                 mov     ecx, [eax]
.text:000084ED                 mov     edx, [edx]
.text:000084EF                 mov     esi, esp
.text:000084F1                 push    ecx
.text:000084F2                 mov     eax, [edx+8]
.text:000084F5                 call    eax
.text:000084F7                 cmp     esi, esp
.text:000084F9                 call    __RTC_CheckEsp
.text:000084FE
.text:000084FE loc_84FE:                               ; CODE XREF: CMyComPtr<ICompressSetOutStreamSize>::~CMyComPtr<ICompressSetOutStreamSize>(void)+15j
.text:000084FE                 pop     esi
.text:000084FF                 add     esp, 4
.text:00008502                 cmp     ebp, esp
.text:00008504                 call    __RTC_CheckEsp
.text:00008509                 mov     esp, ebp
.text:0000850B                 pop     ebp
.text:0000850C                 retn
.text:0000850C ??1?$CMyComPtr@UICompressSetOutStreamSize@@@@QAE@XZ endp
.text:0000850C
.text:0000850C ; ---------------------------------------------------------------------------
.text:0000850D                 align 10h
.text:0000850D _text           ends
.text:0000850D
.text:00008510 ; ===========================================================================
.text:00008510
.text:00008510 ; Segment type: Pure code
.text:00008510 ; Segment permissions: Read/Execute
.text:00008510 _text           segment para public 'CODE' use32
.text:00008510                 assume cs:_text
.text:00008510                 ;org 8510h
.text:00008510 ; COMDAT (pick any)
.text:00008510                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008510
.text:00008510 ; =============== S U B R O U T I N E =======================================
.text:00008510
.text:00008510 ; Attributes: bp-based frame
.text:00008510
.text:00008510 ; public: __thiscall CMyComPtr<struct ICompressSetOutStreamSize>::operator struct ICompressSetOutStreamSize *(void)const
.text:00008510                 public ??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ
.text:00008510 ??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ proc near
.text:00008510                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+4A4p
.text:00008510                                         ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+E9p
.text:00008510
.text:00008510 var_4           = dword ptr -4
.text:00008510
.text:00008510                 push    ebp
.text:00008511                 mov     ebp, esp
.text:00008513                 push    ecx
.text:00008514                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000851B                 mov     [ebp+var_4], ecx
.text:0000851E                 mov     eax, [ebp+var_4]
.text:00008521                 mov     eax, [eax]
.text:00008523                 mov     esp, ebp
.text:00008525                 pop     ebp
.text:00008526                 retn
.text:00008526 ??B?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ endp
.text:00008526
.text:00008526 ; ---------------------------------------------------------------------------
.text:00008527                 align 4
.text:00008527 _text           ends
.text:00008527
.text:00008528 ; ===========================================================================
.text:00008528
.text:00008528 ; Segment type: Pure code
.text:00008528 ; Segment permissions: Read/Execute
.text:00008528 _text           segment para public 'CODE' use32
.text:00008528                 assume cs:_text
.text:00008528                 ;org 8528h
.text:00008528 ; COMDAT (pick any)
.text:00008528                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008528
.text:00008528 ; =============== S U B R O U T I N E =======================================
.text:00008528
.text:00008528 ; Attributes: bp-based frame
.text:00008528
.text:00008528 ; public: struct ICompressSetOutStreamSize * * __thiscall CMyComPtr<struct ICompressSetOutStreamSize>::operator&(void)
.text:00008528                 public ??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ
.text:00008528 ??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ proc near
.text:00008528                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+488p
.text:00008528                                         ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+D3p
.text:00008528
.text:00008528 var_4           = dword ptr -4
.text:00008528
.text:00008528                 push    ebp
.text:00008529                 mov     ebp, esp
.text:0000852B                 push    ecx
.text:0000852C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008533                 mov     [ebp+var_4], ecx
.text:00008536                 mov     eax, [ebp+var_4]
.text:00008539                 mov     esp, ebp
.text:0000853B                 pop     ebp
.text:0000853C                 retn
.text:0000853C ??I?$CMyComPtr@UICompressSetOutStreamSize@@@@QAEPAPAUICompressSetOutStreamSize@@XZ endp
.text:0000853C
.text:0000853C ; ---------------------------------------------------------------------------
.text:0000853D                 align 10h
.text:0000853D _text           ends
.text:0000853D
.text:00008540 ; ===========================================================================
.text:00008540
.text:00008540 ; Segment type: Pure code
.text:00008540 ; Segment permissions: Read/Execute
.text:00008540 _text           segment para public 'CODE' use32
.text:00008540                 assume cs:_text
.text:00008540                 ;org 8540h
.text:00008540 ; COMDAT (pick any)
.text:00008540                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008540
.text:00008540 ; =============== S U B R O U T I N E =======================================
.text:00008540
.text:00008540 ; Attributes: bp-based frame
.text:00008540
.text:00008540 ; public: struct ICompressSetOutStreamSize * __thiscall CMyComPtr<struct ICompressSetOutStreamSize>::operator->(void)const
.text:00008540                 public ??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ
.text:00008540 ??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ proc near
.text:00008540                                         ; CODE XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+4EBp
.text:00008540                                         ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+F5p
.text:00008540
.text:00008540 var_4           = dword ptr -4
.text:00008540
.text:00008540                 push    ebp
.text:00008541                 mov     ebp, esp
.text:00008543                 push    ecx
.text:00008544                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000854B                 mov     [ebp+var_4], ecx
.text:0000854E                 mov     eax, [ebp+var_4]
.text:00008551                 mov     eax, [eax]
.text:00008553                 mov     esp, ebp
.text:00008555                 pop     ebp
.text:00008556                 retn
.text:00008556 ??C?$CMyComPtr@UICompressSetOutStreamSize@@@@QBEPAUICompressSetOutStreamSize@@XZ endp
.text:00008556
.text:00008556 ; ---------------------------------------------------------------------------
.text:00008557                 align 4
.text:00008557 _text           ends
.text:00008557
.text:00008558 ; ===========================================================================
.text:00008558
.text:00008558 ; Segment type: Pure code
.text:00008558 ; Segment permissions: Read/Execute
.text:00008558 _text           segment para public 'CODE' use32
.text:00008558                 assume cs:_text
.text:00008558                 ;org 8558h
.text:00008558 ; COMDAT (pick any)
.text:00008558                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008558
.text:00008558 ; =============== S U B R O U T I N E =======================================
.text:00008558
.text:00008558 ; Attributes: bp-based frame
.text:00008558
.text:00008558 ; public: __thiscall CMyComPtr<struct ICompressSetBufSize>::CMyComPtr<struct ICompressSetBufSize>(void)
.text:00008558                 public ??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ
.text:00008558 ??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ proc near
.text:00008558                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+2A6p
.text:00008558                                         ; NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+2B5p
.text:00008558
.text:00008558 var_4           = dword ptr -4
.text:00008558
.text:00008558                 push    ebp
.text:00008559                 mov     ebp, esp
.text:0000855B                 push    ecx
.text:0000855C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008563                 mov     [ebp+var_4], ecx
.text:00008566                 mov     eax, [ebp+var_4]
.text:00008569                 mov     dword ptr [eax], 0
.text:0000856F                 mov     eax, [ebp+var_4]
.text:00008572                 mov     esp, ebp
.text:00008574                 pop     ebp
.text:00008575                 retn
.text:00008575 ??0?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ endp
.text:00008575
.text:00008575 ; ---------------------------------------------------------------------------
.text:00008576                 align 4
.text:00008576 _text           ends
.text:00008576
.text:00008578 ; ===========================================================================
.text:00008578
.text:00008578 ; Segment type: Pure code
.text:00008578 ; Segment permissions: Read/Execute
.text:00008578 _text           segment para public 'CODE' use32
.text:00008578                 assume cs:_text
.text:00008578                 ;org 8578h
.text:00008578 ; COMDAT (pick any)
.text:00008578                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008578
.text:00008578 ; =============== S U B R O U T I N E =======================================
.text:00008578
.text:00008578 ; Attributes: bp-based frame
.text:00008578
.text:00008578 ; public: __thiscall CMyComPtr<struct ICompressSetBufSize>::~CMyComPtr<struct ICompressSetBufSize>(void)
.text:00008578                 public ??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ
.text:00008578 ??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ proc near
.text:00008578                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+39Ap
.text:00008578                                         ; NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+3A9p ...
.text:00008578
.text:00008578 var_4           = dword ptr -4
.text:00008578
.text:00008578                 push    ebp
.text:00008579                 mov     ebp, esp
.text:0000857B                 push    ecx
.text:0000857C                 push    esi
.text:0000857D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008584                 mov     [ebp+var_4], ecx
.text:00008587                 mov     eax, [ebp+var_4]
.text:0000858A                 cmp     dword ptr [eax], 0
.text:0000858D                 jz      short loc_85AA
.text:0000858F                 mov     ecx, [ebp+var_4]
.text:00008592                 mov     edx, [ecx]
.text:00008594                 mov     eax, [ebp+var_4]
.text:00008597                 mov     ecx, [eax]
.text:00008599                 mov     edx, [edx]
.text:0000859B                 mov     esi, esp
.text:0000859D                 push    ecx
.text:0000859E                 mov     eax, [edx+8]
.text:000085A1                 call    eax
.text:000085A3                 cmp     esi, esp
.text:000085A5                 call    __RTC_CheckEsp
.text:000085AA
.text:000085AA loc_85AA:                               ; CODE XREF: CMyComPtr<ICompressSetBufSize>::~CMyComPtr<ICompressSetBufSize>(void)+15j
.text:000085AA                 pop     esi
.text:000085AB                 add     esp, 4
.text:000085AE                 cmp     ebp, esp
.text:000085B0                 call    __RTC_CheckEsp
.text:000085B5                 mov     esp, ebp
.text:000085B7                 pop     ebp
.text:000085B8                 retn
.text:000085B8 ??1?$CMyComPtr@UICompressSetBufSize@@@@QAE@XZ endp
.text:000085B8
.text:000085B8 ; ---------------------------------------------------------------------------
.text:000085B9                 align 4
.text:000085B9 _text           ends
.text:000085B9
.text:000085BC ; ===========================================================================
.text:000085BC
.text:000085BC ; Segment type: Pure code
.text:000085BC ; Segment permissions: Read/Execute
.text:000085BC _text           segment para public 'CODE' use32
.text:000085BC                 assume cs:_text
.text:000085BC                 ;org 85BCh
.text:000085BC ; COMDAT (pick any)
.text:000085BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000085BC
.text:000085BC ; =============== S U B R O U T I N E =======================================
.text:000085BC
.text:000085BC ; Attributes: bp-based frame
.text:000085BC
.text:000085BC ; public: __thiscall CMyComPtr<struct ICompressSetBufSize>::operator struct ICompressSetBufSize *(void)const
.text:000085BC                 public ??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ
.text:000085BC ??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ proc near
.text:000085BC                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+30Fp
.text:000085BC                                         ; NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+31Bp
.text:000085BC
.text:000085BC var_4           = dword ptr -4
.text:000085BC
.text:000085BC                 push    ebp
.text:000085BD                 mov     ebp, esp
.text:000085BF                 push    ecx
.text:000085C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000085C7                 mov     [ebp+var_4], ecx
.text:000085CA                 mov     eax, [ebp+var_4]
.text:000085CD                 mov     eax, [eax]
.text:000085CF                 mov     esp, ebp
.text:000085D1                 pop     ebp
.text:000085D2                 retn
.text:000085D2 ??B?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ endp
.text:000085D2
.text:000085D2 ; ---------------------------------------------------------------------------
.text:000085D3                 align 4
.text:000085D3 _text           ends
.text:000085D3
.text:000085D4 ; ===========================================================================
.text:000085D4
.text:000085D4 ; Segment type: Pure code
.text:000085D4 ; Segment permissions: Read/Execute
.text:000085D4 _text           segment para public 'CODE' use32
.text:000085D4                 assume cs:_text
.text:000085D4                 ;org 85D4h
.text:000085D4 ; COMDAT (pick any)
.text:000085D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000085D4
.text:000085D4 ; =============== S U B R O U T I N E =======================================
.text:000085D4
.text:000085D4 ; Attributes: bp-based frame
.text:000085D4
.text:000085D4 ; public: struct ICompressSetBufSize * * __thiscall CMyComPtr<struct ICompressSetBufSize>::operator&(void)
.text:000085D4                 public ??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ
.text:000085D4 ??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ proc near
.text:000085D4                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+2C1p
.text:000085D4                                         ; NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+2E8p
.text:000085D4
.text:000085D4 var_4           = dword ptr -4
.text:000085D4
.text:000085D4                 push    ebp
.text:000085D5                 mov     ebp, esp
.text:000085D7                 push    ecx
.text:000085D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000085DF                 mov     [ebp+var_4], ecx
.text:000085E2                 mov     eax, [ebp+var_4]
.text:000085E5                 mov     esp, ebp
.text:000085E7                 pop     ebp
.text:000085E8                 retn
.text:000085E8 ??I?$CMyComPtr@UICompressSetBufSize@@@@QAEPAPAUICompressSetBufSize@@XZ endp
.text:000085E8
.text:000085E8 ; ---------------------------------------------------------------------------
.text:000085E9                 align 4
.text:000085E9 _text           ends
.text:000085E9
.text:000085EC ; ===========================================================================
.text:000085EC
.text:000085EC ; Segment type: Pure code
.text:000085EC ; Segment permissions: Read/Execute
.text:000085EC _text           segment para public 'CODE' use32
.text:000085EC                 assume cs:_text
.text:000085EC                 ;org 85ECh
.text:000085EC ; COMDAT (pick any)
.text:000085EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000085EC
.text:000085EC ; =============== S U B R O U T I N E =======================================
.text:000085EC
.text:000085EC ; Attributes: bp-based frame
.text:000085EC
.text:000085EC ; public: struct ICompressSetBufSize * __thiscall CMyComPtr<struct ICompressSetBufSize>::operator->(void)const
.text:000085EC                 public ??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ
.text:000085EC ??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ proc near
.text:000085EC                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+32Ep
.text:000085EC                                         ; NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+362p
.text:000085EC
.text:000085EC var_4           = dword ptr -4
.text:000085EC
.text:000085EC                 push    ebp
.text:000085ED                 mov     ebp, esp
.text:000085EF                 push    ecx
.text:000085F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000085F7                 mov     [ebp+var_4], ecx
.text:000085FA                 mov     eax, [ebp+var_4]
.text:000085FD                 mov     eax, [eax]
.text:000085FF                 mov     esp, ebp
.text:00008601                 pop     ebp
.text:00008602                 retn
.text:00008602 ??C?$CMyComPtr@UICompressSetBufSize@@@@QBEPAUICompressSetBufSize@@XZ endp
.text:00008602
.text:00008602 ; ---------------------------------------------------------------------------
.text:00008603                 align 4
.text:00008603 _text           ends
.text:00008603
.text:00008604 ; ===========================================================================
.text:00008604
.text:00008604 ; Segment type: Pure code
.text:00008604 ; Segment permissions: Read/Execute
.text:00008604 _text           segment para public 'CODE' use32
.text:00008604                 assume cs:_text
.text:00008604                 ;org 8604h
.text:00008604 ; COMDAT (pick any)
.text:00008604                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008604
.text:00008604 ; =============== S U B R O U T I N E =======================================
.text:00008604
.text:00008604 ; Attributes: bp-based frame
.text:00008604
.text:00008604 ; public: void * __thiscall NCoderMixer2::CCoderST::`scalar deleting destructor'(unsigned int)
.text:00008604                 public ??_GCCoderST@NCoderMixer2@@QAEPAXI@Z
.text:00008604 ??_GCCoderST@NCoderMixer2@@QAEPAXI@Z proc near
.text:00008604                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)+7Fp
.text:00008604
.text:00008604 var_4           = dword ptr -4
.text:00008604 arg_0           = dword ptr  8
.text:00008604
.text:00008604                 push    ebp
.text:00008605                 mov     ebp, esp
.text:00008607                 push    ecx
.text:00008608                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000860F                 mov     [ebp+var_4], ecx
.text:00008612                 mov     ecx, [ebp+var_4] ; this
.text:00008615                 call    ??1CCoderST@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoderST::~CCoderST(void)
.text:0000861A                 mov     eax, [ebp+arg_0]
.text:0000861D                 and     eax, 1
.text:00008620                 jz      short loc_862E
.text:00008622                 mov     ecx, [ebp+var_4]
.text:00008625                 push    ecx             ; void *
.text:00008626                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000862B                 add     esp, 4
.text:0000862E
.text:0000862E loc_862E:                               ; CODE XREF: NCoderMixer2::CCoderST::`scalar deleting destructor'(uint)+1Cj
.text:0000862E                 mov     eax, [ebp+var_4]
.text:00008631                 add     esp, 4
.text:00008634                 cmp     ebp, esp
.text:00008636                 call    __RTC_CheckEsp
.text:0000863B                 mov     esp, ebp
.text:0000863D                 pop     ebp
.text:0000863E                 retn    4
.text:0000863E ??_GCCoderST@NCoderMixer2@@QAEPAXI@Z endp
.text:0000863E
.text:0000863E ; ---------------------------------------------------------------------------
.text:00008641                 align 4
.text:00008641 _text           ends
.text:00008641
.text:00008644 ; ===========================================================================
.text:00008644
.text:00008644 ; Segment type: Pure code
.text:00008644 ; Segment permissions: Read/Execute
.text:00008644 _text           segment para public 'CODE' use32
.text:00008644                 assume cs:_text
.text:00008644                 ;org 8644h
.text:00008644 ; COMDAT (pick any)
.text:00008644                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008644
.text:00008644 ; =============== S U B R O U T I N E =======================================
.text:00008644
.text:00008644 ; Attributes: bp-based frame
.text:00008644
.text:00008644 ; public: void * __thiscall NCoderMixer2::CStBinderStream::`scalar deleting destructor'(unsigned int)
.text:00008644                 public ??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z
.text:00008644 ??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z proc near
.text:00008644                                         ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::~CObjectVector<NCoderMixer2::CStBinderStream>(void)+7Fp
.text:00008644                                         ; CObjectVector<NCoderMixer2::CStBinderStream>::Clear(void)+59p
.text:00008644
.text:00008644 var_4           = dword ptr -4
.text:00008644 arg_0           = dword ptr  8
.text:00008644
.text:00008644                 push    ebp
.text:00008645                 mov     ebp, esp
.text:00008647                 push    ecx
.text:00008648                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000864F                 mov     [ebp+var_4], ecx
.text:00008652                 mov     ecx, [ebp+var_4] ; this
.text:00008655                 call    ??1CStBinderStream@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CStBinderStream::~CStBinderStream(void)
.text:0000865A                 mov     eax, [ebp+arg_0]
.text:0000865D                 and     eax, 1
.text:00008660                 jz      short loc_866E
.text:00008662                 mov     ecx, [ebp+var_4]
.text:00008665                 push    ecx             ; void *
.text:00008666                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000866B                 add     esp, 4
.text:0000866E
.text:0000866E loc_866E:                               ; CODE XREF: NCoderMixer2::CStBinderStream::`scalar deleting destructor'(uint)+1Cj
.text:0000866E                 mov     eax, [ebp+var_4]
.text:00008671                 add     esp, 4
.text:00008674                 cmp     ebp, esp
.text:00008676                 call    __RTC_CheckEsp
.text:0000867B                 mov     esp, ebp
.text:0000867D                 pop     ebp
.text:0000867E                 retn    4
.text:0000867E ??_GCStBinderStream@NCoderMixer2@@QAEPAXI@Z endp
.text:0000867E
.text:0000867E ; ---------------------------------------------------------------------------
.text:00008681                 align 4
.text:00008681 _text           ends
.text:00008681
.text:00008684 ; ===========================================================================
.text:00008684
.text:00008684 ; Segment type: Pure code
.text:00008684 ; Segment permissions: Read/Execute
.text:00008684 _text           segment para public 'CODE' use32
.text:00008684                 assume cs:_text
.text:00008684                 ;org 8684h
.text:00008684 ; COMDAT (pick any)
.text:00008684                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008684
.text:00008684 ; =============== S U B R O U T I N E =======================================
.text:00008684
.text:00008684 ; Attributes: bp-based frame
.text:00008684
.text:00008684 ; public: void * __thiscall CMyComPtr<struct ISequentialInStream>::`scalar deleting destructor'(unsigned int)
.text:00008684                 public ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
.text:00008684 ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z proc near
.text:00008684                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+7Fp
.text:00008684                                         ; CObjectVector<CMyComPtr<ISequentialInStream>>::Clear(void)+59p
.text:00008684
.text:00008684 var_4           = dword ptr -4
.text:00008684 arg_0           = dword ptr  8
.text:00008684
.text:00008684                 push    ebp
.text:00008685                 mov     ebp, esp
.text:00008687                 push    ecx
.text:00008688                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000868F                 mov     [ebp+var_4], ecx
.text:00008692                 mov     ecx, [ebp+var_4]
.text:00008695                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000869A                 mov     eax, [ebp+arg_0]
.text:0000869D                 and     eax, 1
.text:000086A0                 jz      short loc_86AE
.text:000086A2                 mov     ecx, [ebp+var_4]
.text:000086A5                 push    ecx             ; void *
.text:000086A6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000086AB                 add     esp, 4
.text:000086AE
.text:000086AE loc_86AE:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::`scalar deleting destructor'(uint)+1Cj
.text:000086AE                 mov     eax, [ebp+var_4]
.text:000086B1                 add     esp, 4
.text:000086B4                 cmp     ebp, esp
.text:000086B6                 call    __RTC_CheckEsp
.text:000086BB                 mov     esp, ebp
.text:000086BD                 pop     ebp
.text:000086BE                 retn    4
.text:000086BE ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z endp
.text:000086BE
.text:000086BE ; ---------------------------------------------------------------------------
.text:000086C1                 align 4
.text:000086C1 _text           ends
.text:000086C1
.text:000086C4 ; ===========================================================================
.text:000086C4
.text:000086C4 ; Segment type: Pure code
.text:000086C4 ; Segment permissions: Read/Execute
.text:000086C4 _text           segment para public 'CODE' use32
.text:000086C4                 assume cs:_text
.text:000086C4                 ;org 86C4h
.text:000086C4 ; COMDAT (pick any)
.text:000086C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000086C4
.text:000086C4 ; =============== S U B R O U T I N E =======================================
.text:000086C4
.text:000086C4 ; Attributes: bp-based frame
.text:000086C4
.text:000086C4 ; public: void * __thiscall CMyComPtr<struct ISequentialOutStream>::`scalar deleting destructor'(unsigned int)
.text:000086C4                 public ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
.text:000086C4 ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z proc near
.text:000086C4                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+7Fp
.text:000086C4                                         ; CObjectVector<CMyComPtr<ISequentialOutStream>>::Clear(void)+59p
.text:000086C4
.text:000086C4 var_4           = dword ptr -4
.text:000086C4 arg_0           = dword ptr  8
.text:000086C4
.text:000086C4                 push    ebp
.text:000086C5                 mov     ebp, esp
.text:000086C7                 push    ecx
.text:000086C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000086CF                 mov     [ebp+var_4], ecx
.text:000086D2                 mov     ecx, [ebp+var_4]
.text:000086D5                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000086DA                 mov     eax, [ebp+arg_0]
.text:000086DD                 and     eax, 1
.text:000086E0                 jz      short loc_86EE
.text:000086E2                 mov     ecx, [ebp+var_4]
.text:000086E5                 push    ecx             ; void *
.text:000086E6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000086EB                 add     esp, 4
.text:000086EE
.text:000086EE loc_86EE:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'(uint)+1Cj
.text:000086EE                 mov     eax, [ebp+var_4]
.text:000086F1                 add     esp, 4
.text:000086F4                 cmp     ebp, esp
.text:000086F6                 call    __RTC_CheckEsp
.text:000086FB                 mov     esp, ebp
.text:000086FD                 pop     ebp
.text:000086FE                 retn    4
.text:000086FE ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z endp
.text:000086FE
.text:000086FE ; ---------------------------------------------------------------------------
.text:00008701                 align 4
.text:00008701 _text           ends
.text:00008701
.text:00008704 ; ===========================================================================
.text:00008704
.text:00008704 ; Segment type: Pure code
.text:00008704 ; Segment permissions: Read/Execute
.text:00008704 _text           segment para public 'CODE' use32
.text:00008704                 assume cs:_text
.text:00008704                 ;org 8704h
.text:00008704 ; COMDAT (pick any)
.text:00008704                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008704
.text:00008704 ; =============== S U B R O U T I N E =======================================
.text:00008704
.text:00008704 ; Attributes: bp-based frame
.text:00008704
.text:00008704 ; public: __thiscall CStreamBinder::CStreamBinder(void)
.text:00008704                 public ??0CStreamBinder@@QAE@XZ
.text:00008704 ??0CStreamBinder@@QAE@XZ proc near      ; CODE XREF: CObjectVector<CStreamBinder>::AddNew(void)+59p
.text:00008704
.text:00008704 var_10          = dword ptr -10h
.text:00008704 var_C           = dword ptr -0Ch
.text:00008704 var_4           = dword ptr -4
.text:00008704
.text:00008704                 push    ebp
.text:00008705                 mov     ebp, esp
.text:00008707                 push    0FFFFFFFFh
.text:00008709                 push    offset __ehhandler$??0CStreamBinder@@QAE@XZ
.text:0000870E                 mov     eax, large fs:0
.text:00008714                 push    eax
.text:00008715                 push    ecx
.text:00008716                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000871D                 mov     eax, dword ptr ds:___security_cookie
.text:00008722                 xor     eax, ebp
.text:00008724                 push    eax
.text:00008725                 lea     eax, [ebp+var_C]
.text:00008728                 mov     large fs:0, eax
.text:0000872E                 mov     [ebp+var_10], ecx
.text:00008731                 mov     ecx, [ebp+var_10] ; this
.text:00008734                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:00008739                 mov     [ebp+var_4], 0
.text:00008740                 mov     ecx, [ebp+var_10]
.text:00008743                 add     ecx, 4          ; this
.text:00008746                 call    ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)
.text:0000874B                 mov     byte ptr [ebp+var_4], 1
.text:0000874F                 mov     ecx, [ebp+var_10]
.text:00008752                 add     ecx, 8          ; this
.text:00008755                 call    ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)
.text:0000875A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008761                 mov     eax, [ebp+var_10]
.text:00008764                 mov     ecx, [ebp+var_C]
.text:00008767                 mov     large fs:0, ecx
.text:0000876E                 pop     ecx
.text:0000876F                 add     esp, 10h
.text:00008772                 cmp     ebp, esp
.text:00008774                 call    __RTC_CheckEsp
.text:00008779                 mov     esp, ebp
.text:0000877B                 pop     ebp
.text:0000877C                 retn
.text:0000877C ??0CStreamBinder@@QAE@XZ endp
.text:0000877C
.text:0000877C ; ---------------------------------------------------------------------------
.text:0000877D                 align 10h
.text:0000877D _text           ends
.text:0000877D
.text$x:00008780 ; ===========================================================================
.text$x:00008780
.text$x:00008780 ; Segment type: Pure code
.text$x:00008780 ; Segment permissions: Read/Execute
.text$x:00008780 _text$x         segment para public 'CODE' use32
.text$x:00008780                 assume cs:_text$x
.text$x:00008780                 ;org 8780h
.text$x:00008780 ; COMDAT (pick associative to section at 8704)
.text$x:00008780                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00008780
.text$x:00008780 ; =============== S U B R O U T I N E =======================================
.text$x:00008780
.text$x:00008780
.text$x:00008780 __unwindfunclet$??0CStreamBinder@@QAE@XZ$0 proc near
.text$x:00008780                                         ; DATA XREF: .xdata$x:000087B4o
.text$x:00008780                 mov     ecx, [ebp-10h]  ; this
.text$x:00008783                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00008783 __unwindfunclet$??0CStreamBinder@@QAE@XZ$0 endp
.text$x:00008783
.text$x:00008788
.text$x:00008788 ; =============== S U B R O U T I N E =======================================
.text$x:00008788
.text$x:00008788
.text$x:00008788 __unwindfunclet$??0CStreamBinder@@QAE@XZ$1 proc near
.text$x:00008788                                         ; DATA XREF: .xdata$x:000087BCo
.text$x:00008788                 mov     ecx, [ebp-10h]
.text$x:0000878B                 add     ecx, 4          ; this
.text$x:0000878E                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:0000878E __unwindfunclet$??0CStreamBinder@@QAE@XZ$1 endp
.text$x:0000878E
.text$x:00008793
.text$x:00008793 ; =============== S U B R O U T I N E =======================================
.text$x:00008793
.text$x:00008793
.text$x:00008793 __ehhandler$??0CStreamBinder@@QAE@XZ proc near
.text$x:00008793                                         ; DATA XREF: CStreamBinder::CStreamBinder(void)+5o
.text$x:00008793
.text$x:00008793 arg_4           = dword ptr  8
.text$x:00008793
.text$x:00008793                 mov     edx, [esp+arg_4]
.text$x:00008797                 lea     eax, [edx+0Ch]
.text$x:0000879A                 mov     ecx, [edx-8]
.text$x:0000879D                 xor     ecx, eax
.text$x:0000879F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000087A4                 mov     eax, offset __ehfuncinfo$??0CStreamBinder@@QAE@XZ
.text$x:000087A9                 jmp     ___CxxFrameHandler3
.text$x:000087A9 __ehhandler$??0CStreamBinder@@QAE@XZ endp
.text$x:000087A9
.text$x:000087A9 ; ---------------------------------------------------------------------------
.text$x:000087AE                 align 10h
.text$x:000087AE _text$x         ends
.text$x:000087AE
.xdata$x:000087B0 ; ===========================================================================
.xdata$x:000087B0
.xdata$x:000087B0 ; Segment type: Pure data
.xdata$x:000087B0 ; Segment permissions: Read
.xdata$x:000087B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000087B0                 assume cs:_xdata$x
.xdata$x:000087B0                 ;org 87B0h
.xdata$x:000087B0 ; COMDAT (pick associative to section at 8704)
.xdata$x:000087B0 __unwindtable$??0CStreamBinder@@QAE@XZ db 0FFh
.xdata$x:000087B0                                         ; DATA XREF: .xdata$x:000087C8o
.xdata$x:000087B1                 db 0FFh
.xdata$x:000087B2                 db 0FFh
.xdata$x:000087B3                 db 0FFh
.xdata$x:000087B4                 dd offset __unwindfunclet$??0CStreamBinder@@QAE@XZ$0
.xdata$x:000087B8                 db    0
.xdata$x:000087B9                 db    0
.xdata$x:000087BA                 db    0
.xdata$x:000087BB                 db    0
.xdata$x:000087BC                 dd offset __unwindfunclet$??0CStreamBinder@@QAE@XZ$1
.xdata$x:000087C0 __ehfuncinfo$??0CStreamBinder@@QAE@XZ db  22h ; "
.xdata$x:000087C0                                         ; DATA XREF: __ehhandler$??0CStreamBinder@@QAE@XZ+11o
.xdata$x:000087C1                 db    5
.xdata$x:000087C2                 db  93h ; ô
.xdata$x:000087C3                 db  19h
.xdata$x:000087C4                 db    2
.xdata$x:000087C5                 db    0
.xdata$x:000087C6                 db    0
.xdata$x:000087C7                 db    0
.xdata$x:000087C8                 dd offset __unwindtable$??0CStreamBinder@@QAE@XZ
.xdata$x:000087CC                 align 20h
.xdata$x:000087E0                 db    1
.xdata$x:000087E1                 db    0
.xdata$x:000087E2                 db    0
.xdata$x:000087E3                 db    0
.xdata$x:000087E3 _xdata$x        ends
.xdata$x:000087E3
.text:000087E4 ; ===========================================================================
.text:000087E4
.text:000087E4 ; Segment type: Pure code
.text:000087E4 ; Segment permissions: Read/Execute
.text:000087E4 _text           segment para public 'CODE' use32
.text:000087E4                 assume cs:_text
.text:000087E4                 ;org 87E4h
.text:000087E4 ; COMDAT (pick any)
.text:000087E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000087E4
.text:000087E4 ; =============== S U B R O U T I N E =======================================
.text:000087E4
.text:000087E4 ; Attributes: bp-based frame
.text:000087E4
.text:000087E4 ; public: void * __thiscall CStreamBinder::`scalar deleting destructor'(unsigned int)
.text:000087E4                 public ??_GCStreamBinder@@QAEPAXI@Z
.text:000087E4 ??_GCStreamBinder@@QAEPAXI@Z proc near  ; CODE XREF: CObjectVector<CStreamBinder>::Clear(void)+59p
.text:000087E4
.text:000087E4 var_4           = dword ptr -4
.text:000087E4 arg_0           = dword ptr  8
.text:000087E4
.text:000087E4                 push    ebp
.text:000087E5                 mov     ebp, esp
.text:000087E7                 push    ecx
.text:000087E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000087EF                 mov     [ebp+var_4], ecx
.text:000087F2                 mov     ecx, [ebp+var_4] ; this
.text:000087F5                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000087FA                 mov     eax, [ebp+arg_0]
.text:000087FD                 and     eax, 1
.text:00008800                 jz      short loc_880E
.text:00008802                 mov     ecx, [ebp+var_4]
.text:00008805                 push    ecx             ; void *
.text:00008806                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000880B                 add     esp, 4
.text:0000880E
.text:0000880E loc_880E:                               ; CODE XREF: CStreamBinder::`scalar deleting destructor'(uint)+1Cj
.text:0000880E                 mov     eax, [ebp+var_4]
.text:00008811                 add     esp, 4
.text:00008814                 cmp     ebp, esp
.text:00008816                 call    __RTC_CheckEsp
.text:0000881B                 mov     esp, ebp
.text:0000881D                 pop     ebp
.text:0000881E                 retn    4
.text:0000881E ??_GCStreamBinder@@QAEPAXI@Z endp
.text:0000881E
.text:0000881E ; ---------------------------------------------------------------------------
.text:00008821                 align 4
.text:00008821 _text           ends
.text:00008821
.text:00008824 ; ===========================================================================
.text:00008824
.text:00008824 ; Segment type: Pure code
.text:00008824 ; Segment permissions: Read/Execute
.text:00008824 _text           segment para public 'CODE' use32
.text:00008824                 assume cs:_text
.text:00008824                 ;org 8824h
.text:00008824 ; COMDAT (pick any)
.text:00008824                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008824
.text:00008824 ; =============== S U B R O U T I N E =======================================
.text:00008824
.text:00008824 ; Attributes: bp-based frame
.text:00008824
.text:00008824 ; _DWORD __thiscall NCoderMixer2::CCoderST::~CCoderST(NCoderMixer2::CCoderST *__hidden this)
.text:00008824                 public ??1CCoderST@NCoderMixer2@@QAE@XZ
.text:00008824 ??1CCoderST@NCoderMixer2@@QAE@XZ proc near
.text:00008824                                         ; CODE XREF: NCoderMixer2::CCoderST::`scalar deleting destructor'(uint)+11p
.text:00008824
.text:00008824 var_4           = dword ptr -4
.text:00008824
.text:00008824                 push    ebp
.text:00008825                 mov     ebp, esp
.text:00008827                 push    ecx
.text:00008828                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000882F                 mov     [ebp+var_4], ecx
.text:00008832                 mov     ecx, [ebp+var_4] ; this
.text:00008835                 call    ??1CCoder@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoder::~CCoder(void)
.text:0000883A                 add     esp, 4
.text:0000883D                 cmp     ebp, esp
.text:0000883F                 call    __RTC_CheckEsp
.text:00008844                 mov     esp, ebp
.text:00008846                 pop     ebp
.text:00008847                 retn
.text:00008847 ??1CCoderST@NCoderMixer2@@QAE@XZ endp
.text:00008847
.text:00008847 _text           ends
.text:00008847
.text:00008848 ; ===========================================================================
.text:00008848
.text:00008848 ; Segment type: Pure code
.text:00008848 ; Segment permissions: Read/Execute
.text:00008848 _text           segment para public 'CODE' use32
.text:00008848                 assume cs:_text
.text:00008848                 ;org 8848h
.text:00008848 ; COMDAT (pick any)
.text:00008848                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008848
.text:00008848 ; =============== S U B R O U T I N E =======================================
.text:00008848
.text:00008848 ; Attributes: bp-based frame
.text:00008848
.text:00008848 ; _DWORD __thiscall NCoderMixer2::CStBinderStream::~CStBinderStream(NCoderMixer2::CStBinderStream *__hidden this)
.text:00008848                 public ??1CStBinderStream@NCoderMixer2@@QAE@XZ
.text:00008848 ??1CStBinderStream@NCoderMixer2@@QAE@XZ proc near
.text:00008848                                         ; CODE XREF: NCoderMixer2::CStBinderStream::`scalar deleting destructor'(uint)+11p
.text:00008848
.text:00008848 var_4           = dword ptr -4
.text:00008848
.text:00008848                 push    ebp
.text:00008849                 mov     ebp, esp
.text:0000884B                 push    ecx
.text:0000884C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008853                 mov     [ebp+var_4], ecx
.text:00008856                 mov     ecx, [ebp+var_4]
.text:00008859                 add     ecx, 8
.text:0000885C                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00008861                 add     esp, 4
.text:00008864                 cmp     ebp, esp
.text:00008866                 call    __RTC_CheckEsp
.text:0000886B                 mov     esp, ebp
.text:0000886D                 pop     ebp
.text:0000886E                 retn
.text:0000886E ??1CStBinderStream@NCoderMixer2@@QAE@XZ endp
.text:0000886E
.text:0000886E ; ---------------------------------------------------------------------------
.text:0000886F                 align 10h
.text:0000886F _text           ends
.text:0000886F
.text:00008870 ; ===========================================================================
.text:00008870
.text:00008870 ; Segment type: Pure code
.text:00008870 ; Segment permissions: Read/Execute
.text:00008870 _text           segment para public 'CODE' use32
.text:00008870                 assume cs:_text
.text:00008870                 ;org 8870h
.text:00008870 ; COMDAT (pick any)
.text:00008870                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008870
.text:00008870 ; =============== S U B R O U T I N E =======================================
.text:00008870
.text:00008870 ; Attributes: bp-based frame
.text:00008870
.text:00008870 ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:00008870                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00008870 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00008870                                         ; CODE XREF: NCoderMixer2::CStBinderStream::~CStBinderStream(void)+14p
.text:00008870
.text:00008870 var_4           = dword ptr -4
.text:00008870
.text:00008870                 push    ebp
.text:00008871                 mov     ebp, esp
.text:00008873                 push    ecx
.text:00008874                 push    esi
.text:00008875                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000887C                 mov     [ebp+var_4], ecx
.text:0000887F                 mov     eax, [ebp+var_4]
.text:00008882                 cmp     dword ptr [eax], 0
.text:00008885                 jz      short loc_88A2
.text:00008887                 mov     ecx, [ebp+var_4]
.text:0000888A                 mov     edx, [ecx]
.text:0000888C                 mov     eax, [ebp+var_4]
.text:0000888F                 mov     ecx, [eax]
.text:00008891                 mov     edx, [edx]
.text:00008893                 mov     esi, esp
.text:00008895                 push    ecx
.text:00008896                 mov     eax, [edx+8]
.text:00008899                 call    eax
.text:0000889B                 cmp     esi, esp
.text:0000889D                 call    __RTC_CheckEsp
.text:000088A2
.text:000088A2 loc_88A2:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:000088A2                 pop     esi
.text:000088A3                 add     esp, 4
.text:000088A6                 cmp     ebp, esp
.text:000088A8                 call    __RTC_CheckEsp
.text:000088AD                 mov     esp, ebp
.text:000088AF                 pop     ebp
.text:000088B0                 retn
.text:000088B0 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:000088B0
.text:000088B0 ; ---------------------------------------------------------------------------
.text:000088B1                 align 4
.text:000088B1 _text           ends
.text:000088B1
.text:000088B4 ; ===========================================================================
.text:000088B4
.text:000088B4 ; Segment type: Pure code
.text:000088B4 ; Segment permissions: Read/Execute
.text:000088B4 _text           segment para public 'CODE' use32
.text:000088B4                 assume cs:_text
.text:000088B4                 ;org 88B4h
.text:000088B4 ; COMDAT (pick any)
.text:000088B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000088B4
.text:000088B4 ; =============== S U B R O U T I N E =======================================
.text:000088B4
.text:000088B4 ; Attributes: bp-based frame
.text:000088B4
.text:000088B4 ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:000088B4                 public ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:000088B4 ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:000088B4                                         ; CODE XREF: CStreamBinder::CStreamBinder(void)+42p
.text:000088B4                                         ; CStreamBinder::CStreamBinder(void)+51p
.text:000088B4
.text:000088B4 var_4           = dword ptr -4
.text:000088B4
.text:000088B4                 push    ebp
.text:000088B5                 mov     ebp, esp
.text:000088B7                 push    ecx
.text:000088B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000088BF                 mov     [ebp+var_4], ecx
.text:000088C2                 mov     ecx, [ebp+var_4] ; this
.text:000088C5                 call    ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent(void)
.text:000088CA                 mov     eax, [ebp+var_4]
.text:000088CD                 add     esp, 4
.text:000088D0                 cmp     ebp, esp
.text:000088D2                 call    __RTC_CheckEsp
.text:000088D7                 mov     esp, ebp
.text:000088D9                 pop     ebp
.text:000088DA                 retn
.text:000088DA ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:000088DA
.text:000088DA ; ---------------------------------------------------------------------------
.text:000088DB                 align 4
.text:000088DB _text           ends
.text:000088DB
.text:000088DC ; ===========================================================================
.text:000088DC
.text:000088DC ; Segment type: Pure code
.text:000088DC ; Segment permissions: Read/Execute
.text:000088DC _text           segment para public 'CODE' use32
.text:000088DC                 assume cs:_text
.text:000088DC                 ;org 88DCh
.text:000088DC ; COMDAT (pick any)
.text:000088DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000088DC
.text:000088DC ; =============== S U B R O U T I N E =======================================
.text:000088DC
.text:000088DC ; Attributes: bp-based frame
.text:000088DC
.text:000088DC ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:000088DC                 public ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:000088DC ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:000088DC                                         ; CODE XREF: __unwindfunclet$??0CStreamBinder@@QAE@XZ$1+6j
.text:000088DC                                         ; CStreamBinder::~CStreamBinder(void)+3Ap ...
.text:000088DC
.text:000088DC var_4           = dword ptr -4
.text:000088DC
.text:000088DC                 push    ebp
.text:000088DD                 mov     ebp, esp
.text:000088DF                 push    ecx
.text:000088E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000088E7                 mov     [ebp+var_4], ecx
.text:000088EA                 mov     ecx, [ebp+var_4] ; this
.text:000088ED                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:000088F2                 add     esp, 4
.text:000088F5                 cmp     ebp, esp
.text:000088F7                 call    __RTC_CheckEsp
.text:000088FC                 mov     esp, ebp
.text:000088FE                 pop     ebp
.text:000088FF                 retn
.text:000088FF ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:000088FF
.text:000088FF _text           ends
.text:000088FF
.text:00008900 ; ===========================================================================
.text:00008900
.text:00008900 ; Segment type: Pure code
.text:00008900 ; Segment permissions: Read/Execute
.text:00008900 _text           segment para public 'CODE' use32
.text:00008900                 assume cs:_text
.text:00008900                 ;org 8900h
.text:00008900 ; COMDAT (pick any)
.text:00008900                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008900
.text:00008900 ; =============== S U B R O U T I N E =======================================
.text:00008900
.text:00008900 ; Attributes: bp-based frame
.text:00008900
.text:00008900 ; _DWORD __thiscall CStreamBinder::~CStreamBinder(CStreamBinder *__hidden this)
.text:00008900                 public ??1CStreamBinder@@QAE@XZ
.text:00008900 ??1CStreamBinder@@QAE@XZ proc near      ; CODE XREF: CStreamBinder::`scalar deleting destructor'(uint)+11p
.text:00008900
.text:00008900 var_10          = dword ptr -10h
.text:00008900 var_C           = dword ptr -0Ch
.text:00008900 var_4           = dword ptr -4
.text:00008900
.text:00008900                 push    ebp
.text:00008901                 mov     ebp, esp
.text:00008903                 push    0FFFFFFFFh
.text:00008905                 push    offset __ehhandler$??1CStreamBinder@@QAE@XZ
.text:0000890A                 mov     eax, large fs:0
.text:00008910                 push    eax
.text:00008911                 push    ecx
.text:00008912                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008919                 mov     eax, dword ptr ds:___security_cookie
.text:0000891E                 xor     eax, ebp
.text:00008920                 push    eax
.text:00008921                 lea     eax, [ebp+var_C]
.text:00008924                 mov     large fs:0, eax
.text:0000892A                 mov     [ebp+var_10], ecx
.text:0000892D                 mov     [ebp+var_4], 1
.text:00008934                 mov     ecx, [ebp+var_10]
.text:00008937                 add     ecx, 8          ; this
.text:0000893A                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:0000893F                 mov     byte ptr [ebp+var_4], 0
.text:00008943                 mov     ecx, [ebp+var_10]
.text:00008946                 add     ecx, 4          ; this
.text:00008949                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:0000894E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008955                 mov     ecx, [ebp+var_10] ; this
.text:00008958                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:0000895D                 mov     ecx, [ebp+var_C]
.text:00008960                 mov     large fs:0, ecx
.text:00008967                 pop     ecx
.text:00008968                 add     esp, 10h
.text:0000896B                 cmp     ebp, esp
.text:0000896D                 call    __RTC_CheckEsp
.text:00008972                 mov     esp, ebp
.text:00008974                 pop     ebp
.text:00008975                 retn
.text:00008975 ??1CStreamBinder@@QAE@XZ endp
.text:00008975
.text:00008975 ; ---------------------------------------------------------------------------
.text:00008976                 align 4
.text:00008976 _text           ends
.text:00008976
.text$x:00008978 ; ===========================================================================
.text$x:00008978
.text$x:00008978 ; Segment type: Pure code
.text$x:00008978 ; Segment permissions: Read/Execute
.text$x:00008978 _text$x         segment para public 'CODE' use32
.text$x:00008978                 assume cs:_text$x
.text$x:00008978                 ;org 8978h
.text$x:00008978 ; COMDAT (pick associative to section at 8900)
.text$x:00008978                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00008978
.text$x:00008978 ; =============== S U B R O U T I N E =======================================
.text$x:00008978
.text$x:00008978
.text$x:00008978 __unwindfunclet$??1CStreamBinder@@QAE@XZ$0 proc near
.text$x:00008978                                         ; DATA XREF: .xdata$x:000089ACo
.text$x:00008978                 mov     ecx, [ebp-10h]  ; this
.text$x:0000897B                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000897B __unwindfunclet$??1CStreamBinder@@QAE@XZ$0 endp
.text$x:0000897B
.text$x:00008980
.text$x:00008980 ; =============== S U B R O U T I N E =======================================
.text$x:00008980
.text$x:00008980
.text$x:00008980 __unwindfunclet$??1CStreamBinder@@QAE@XZ$1 proc near
.text$x:00008980                                         ; DATA XREF: .xdata$x:000089B4o
.text$x:00008980                 mov     ecx, [ebp-10h]
.text$x:00008983                 add     ecx, 4          ; this
.text$x:00008986                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00008986 __unwindfunclet$??1CStreamBinder@@QAE@XZ$1 endp
.text$x:00008986
.text$x:0000898B
.text$x:0000898B ; =============== S U B R O U T I N E =======================================
.text$x:0000898B
.text$x:0000898B
.text$x:0000898B __ehhandler$??1CStreamBinder@@QAE@XZ proc near
.text$x:0000898B                                         ; DATA XREF: CStreamBinder::~CStreamBinder(void)+5o
.text$x:0000898B
.text$x:0000898B arg_4           = dword ptr  8
.text$x:0000898B
.text$x:0000898B                 mov     edx, [esp+arg_4]
.text$x:0000898F                 lea     eax, [edx+0Ch]
.text$x:00008992                 mov     ecx, [edx-8]
.text$x:00008995                 xor     ecx, eax
.text$x:00008997                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000899C                 mov     eax, offset __ehfuncinfo$??1CStreamBinder@@QAE@XZ
.text$x:000089A1                 jmp     ___CxxFrameHandler3
.text$x:000089A1 __ehhandler$??1CStreamBinder@@QAE@XZ endp
.text$x:000089A1
.text$x:000089A1 ; ---------------------------------------------------------------------------
.text$x:000089A6                 align 4
.text$x:000089A6 _text$x         ends
.text$x:000089A6
.xdata$x:000089A8 ; ===========================================================================
.xdata$x:000089A8
.xdata$x:000089A8 ; Segment type: Pure data
.xdata$x:000089A8 ; Segment permissions: Read
.xdata$x:000089A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000089A8                 assume cs:_xdata$x
.xdata$x:000089A8                 ;org 89A8h
.xdata$x:000089A8 ; COMDAT (pick associative to section at 8900)
.xdata$x:000089A8 __unwindtable$??1CStreamBinder@@QAE@XZ db 0FFh
.xdata$x:000089A8                                         ; DATA XREF: .xdata$x:000089C0o
.xdata$x:000089A9                 db 0FFh
.xdata$x:000089AA                 db 0FFh
.xdata$x:000089AB                 db 0FFh
.xdata$x:000089AC                 dd offset __unwindfunclet$??1CStreamBinder@@QAE@XZ$0
.xdata$x:000089B0                 db    0
.xdata$x:000089B1                 db    0
.xdata$x:000089B2                 db    0
.xdata$x:000089B3                 db    0
.xdata$x:000089B4                 dd offset __unwindfunclet$??1CStreamBinder@@QAE@XZ$1
.xdata$x:000089B8 __ehfuncinfo$??1CStreamBinder@@QAE@XZ db  22h ; "
.xdata$x:000089B8                                         ; DATA XREF: __ehhandler$??1CStreamBinder@@QAE@XZ+11o
.xdata$x:000089B9                 db    5
.xdata$x:000089BA                 db  93h ; ô
.xdata$x:000089BB                 db  19h
.xdata$x:000089BC                 db    2
.xdata$x:000089BD                 db    0
.xdata$x:000089BE                 db    0
.xdata$x:000089BF                 db    0
.xdata$x:000089C0                 dd offset __unwindtable$??1CStreamBinder@@QAE@XZ
.xdata$x:000089C4                 db    0
.xdata$x:000089C5                 db    0
.xdata$x:000089C6                 db    0
.xdata$x:000089C7                 db    0
.xdata$x:000089C8                 db    0
.xdata$x:000089C9                 db    0
.xdata$x:000089CA                 db    0
.xdata$x:000089CB                 db    0
.xdata$x:000089CC                 db    0
.xdata$x:000089CD                 db    0
.xdata$x:000089CE                 db    0
.xdata$x:000089CF                 db    0
.xdata$x:000089D0                 db    0
.xdata$x:000089D1                 db    0
.xdata$x:000089D2                 db    0
.xdata$x:000089D3                 db    0
.xdata$x:000089D4                 db    0
.xdata$x:000089D5                 db    0
.xdata$x:000089D6                 db    0
.xdata$x:000089D7                 db    0
.xdata$x:000089D8                 db    1
.xdata$x:000089D9                 db    0
.xdata$x:000089DA                 db    0
.xdata$x:000089DB                 db    0
.xdata$x:000089DB _xdata$x        ends
.xdata$x:000089DB
.text:000089DC ; ===========================================================================
.text:000089DC
.text:000089DC ; Segment type: Pure code
.text:000089DC ; Segment permissions: Read/Execute
.text:000089DC _text           segment para public 'CODE' use32
.text:000089DC                 assume cs:_text
.text:000089DC                 ;org 89DCh
.text:000089DC ; COMDAT (pick any)
.text:000089DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000089DC
.text:000089DC ; =============== S U B R O U T I N E =======================================
.text:000089DC
.text:000089DC ; Attributes: bp-based frame
.text:000089DC
.text:000089DC ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000089DC                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000089DC ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000089DC                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::CObjectVector<NCoderMixer2::CCoderST>(void)+11p
.text:000089DC                                         ; CObjectVector<NCoderMixer2::CStBinderStream>::CObjectVector<NCoderMixer2::CStBinderStream>(void)+11p ...
.text:000089DC
.text:000089DC var_4           = dword ptr -4
.text:000089DC
.text:000089DC                 push    ebp
.text:000089DD                 mov     ebp, esp
.text:000089DF                 push    ecx
.text:000089E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000089E7                 mov     [ebp+var_4], ecx
.text:000089EA                 mov     eax, [ebp+var_4]
.text:000089ED                 mov     dword ptr [eax], 0
.text:000089F3                 mov     ecx, [ebp+var_4]
.text:000089F6                 mov     dword ptr [ecx+4], 0
.text:000089FD                 mov     edx, [ebp+var_4]
.text:00008A00                 mov     dword ptr [edx+8], 0
.text:00008A07                 mov     eax, [ebp+var_4]
.text:00008A0A                 mov     esp, ebp
.text:00008A0C                 pop     ebp
.text:00008A0D                 retn
.text:00008A0D ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00008A0D
.text:00008A0D ; ---------------------------------------------------------------------------
.text:00008A0E                 align 10h
.text:00008A0E _text           ends
.text:00008A0E
.text:00008A10 ; ===========================================================================
.text:00008A10
.text:00008A10 ; Segment type: Pure code
.text:00008A10 ; Segment permissions: Read/Execute
.text:00008A10 _text           segment para public 'CODE' use32
.text:00008A10                 assume cs:_text
.text:00008A10                 ;org 8A10h
.text:00008A10 ; COMDAT (pick any)
.text:00008A10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008A10
.text:00008A10 ; =============== S U B R O U T I N E =======================================
.text:00008A10
.text:00008A10 ; Attributes: bp-based frame
.text:00008A10
.text:00008A10 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00008A10                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00008A10 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00008A10                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::Size(void)+11p
.text:00008A10                                         ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)+46p ...
.text:00008A10
.text:00008A10 var_4           = dword ptr -4
.text:00008A10
.text:00008A10                 push    ebp
.text:00008A11                 mov     ebp, esp
.text:00008A13                 push    ecx
.text:00008A14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A1B                 mov     [ebp+var_4], ecx
.text:00008A1E                 mov     eax, [ebp+var_4]
.text:00008A21                 mov     eax, [eax+4]
.text:00008A24                 mov     esp, ebp
.text:00008A26                 pop     ebp
.text:00008A27                 retn
.text:00008A27 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00008A27
.text:00008A27 _text           ends
.text:00008A27
.text:00008A28 ; ===========================================================================
.text:00008A28
.text:00008A28 ; Segment type: Pure code
.text:00008A28 ; Segment permissions: Read/Execute
.text:00008A28 _text           segment para public 'CODE' use32
.text:00008A28                 assume cs:_text
.text:00008A28                 ;org 8A28h
.text:00008A28 ; COMDAT (pick any)
.text:00008A28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008A28
.text:00008A28 ; =============== S U B R O U T I N E =======================================
.text:00008A28
.text:00008A28 ; Attributes: bp-based frame
.text:00008A28
.text:00008A28 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00008A28                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00008A28 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00008A28                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)+9Cp
.text:00008A28                                         ; __unwindfunclet$??1?$CObjectVector@UCCoderST@NCoderMixer2@@@@QAE@XZ$0+3j ...
.text:00008A28
.text:00008A28 var_8           = dword ptr -8
.text:00008A28 var_4           = dword ptr -4
.text:00008A28
.text:00008A28                 push    ebp
.text:00008A29                 mov     ebp, esp
.text:00008A2B                 sub     esp, 8
.text:00008A2E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008A35                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A3C                 mov     [ebp+var_4], ecx
.text:00008A3F                 mov     eax, [ebp+var_4]
.text:00008A42                 mov     ecx, [eax]
.text:00008A44                 mov     [ebp+var_8], ecx
.text:00008A47                 mov     edx, [ebp+var_8]
.text:00008A4A                 push    edx             ; void *
.text:00008A4B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008A50                 add     esp, 4
.text:00008A53                 add     esp, 8
.text:00008A56                 cmp     ebp, esp
.text:00008A58                 call    __RTC_CheckEsp
.text:00008A5D                 mov     esp, ebp
.text:00008A5F                 pop     ebp
.text:00008A60                 retn
.text:00008A60 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00008A60
.text:00008A60 ; ---------------------------------------------------------------------------
.text:00008A61                 align 4
.text:00008A61 _text           ends
.text:00008A61
.text:00008A64 ; ===========================================================================
.text:00008A64
.text:00008A64 ; Segment type: Pure code
.text:00008A64 ; Segment permissions: Read/Execute
.text:00008A64 _text           segment para public 'CODE' use32
.text:00008A64                 assume cs:_text
.text:00008A64                 ;org 8A64h
.text:00008A64 ; COMDAT (pick any)
.text:00008A64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008A64
.text:00008A64 ; =============== S U B R O U T I N E =======================================
.text:00008A64
.text:00008A64 ; Attributes: bp-based frame
.text:00008A64
.text:00008A64 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00008A64                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00008A64 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00008A64                                         ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::Clear(void)+6Fp
.text:00008A64                                         ; CObjectVector<CMyComPtr<ISequentialInStream>>::Clear(void)+6Fp ...
.text:00008A64
.text:00008A64 var_4           = dword ptr -4
.text:00008A64
.text:00008A64                 push    ebp
.text:00008A65                 mov     ebp, esp
.text:00008A67                 push    ecx
.text:00008A68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A6F                 mov     [ebp+var_4], ecx
.text:00008A72                 mov     eax, [ebp+var_4]
.text:00008A75                 mov     dword ptr [eax+4], 0
.text:00008A7C                 mov     esp, ebp
.text:00008A7E                 pop     ebp
.text:00008A7F                 retn
.text:00008A7F ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00008A7F
.text:00008A7F _text           ends
.text:00008A7F
.text:00008A80 ; ===========================================================================
.text:00008A80
.text:00008A80 ; Segment type: Pure code
.text:00008A80 ; Segment permissions: Read/Execute
.text:00008A80 _text           segment para public 'CODE' use32
.text:00008A80                 assume cs:_text
.text:00008A80                 ;org 8A80h
.text:00008A80 ; COMDAT (pick any)
.text:00008A80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008A80
.text:00008A80 ; =============== S U B R O U T I N E =======================================
.text:00008A80
.text:00008A80 ; Attributes: bp-based frame
.text:00008A80
.text:00008A80 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00008A80                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00008A80 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00008A80                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::AddNew(void)+84p
.text:00008A80                                         ; CObjectVector<NCoderMixer2::CStBinderStream>::AddNew(void)+84p ...
.text:00008A80
.text:00008A80 var_8           = dword ptr -8
.text:00008A80 var_4           = dword ptr -4
.text:00008A80 arg_0           = dword ptr  8
.text:00008A80
.text:00008A80                 push    ebp
.text:00008A81                 mov     ebp, esp
.text:00008A83                 sub     esp, 8
.text:00008A86                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008A8D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A94                 mov     [ebp+var_4], ecx
.text:00008A97                 mov     ecx, [ebp+var_4]
.text:00008A9A                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00008A9F                 mov     eax, [ebp+var_4]
.text:00008AA2                 mov     ecx, [eax+4]
.text:00008AA5                 mov     edx, [ebp+var_4]
.text:00008AA8                 mov     eax, [edx]
.text:00008AAA                 mov     edx, [ebp+arg_0]
.text:00008AAD                 mov     [eax+ecx*4], edx
.text:00008AB0                 mov     eax, [ebp+var_4]
.text:00008AB3                 mov     ecx, [eax+4]
.text:00008AB6                 mov     [ebp+var_8], ecx
.text:00008AB9                 mov     edx, [ebp+var_4]
.text:00008ABC                 mov     eax, [edx+4]
.text:00008ABF                 add     eax, 1
.text:00008AC2                 mov     ecx, [ebp+var_4]
.text:00008AC5                 mov     [ecx+4], eax
.text:00008AC8                 mov     eax, [ebp+var_8]
.text:00008ACB                 add     esp, 8
.text:00008ACE                 cmp     ebp, esp
.text:00008AD0                 call    __RTC_CheckEsp
.text:00008AD5                 mov     esp, ebp
.text:00008AD7                 pop     ebp
.text:00008AD8                 retn    4
.text:00008AD8 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00008AD8
.text:00008AD8 ; ---------------------------------------------------------------------------
.text:00008ADB                 align 4
.text:00008ADB _text           ends
.text:00008ADB
.text:00008ADC ; ===========================================================================
.text:00008ADC
.text:00008ADC ; Segment type: Pure code
.text:00008ADC ; Segment permissions: Read/Execute
.text:00008ADC _text           segment para public 'CODE' use32
.text:00008ADC                 assume cs:_text
.text:00008ADC                 ;org 8ADCh
.text:00008ADC ; COMDAT (pick any)
.text:00008ADC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008ADC
.text:00008ADC ; =============== S U B R O U T I N E =======================================
.text:00008ADC
.text:00008ADC ; Attributes: bp-based frame
.text:00008ADC
.text:00008ADC ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00008ADC                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00008ADC ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00008ADC                                         ; CODE XREF: CObjectVector<NCoderMixer2::CStBinderStream>::operator[](uint)+15p
.text:00008ADC                                         ; CObjectVector<CStreamBinder>::operator[](uint)+15p
.text:00008ADC
.text:00008ADC var_4           = dword ptr -4
.text:00008ADC arg_0           = dword ptr  8
.text:00008ADC
.text:00008ADC                 push    ebp
.text:00008ADD                 mov     ebp, esp
.text:00008ADF                 push    ecx
.text:00008AE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008AE7                 mov     [ebp+var_4], ecx
.text:00008AEA                 mov     eax, [ebp+var_4]
.text:00008AED                 mov     ecx, [eax]
.text:00008AEF                 mov     edx, [ebp+arg_0]
.text:00008AF2                 lea     eax, [ecx+edx*4]
.text:00008AF5                 mov     esp, ebp
.text:00008AF7                 pop     ebp
.text:00008AF8                 retn    4
.text:00008AF8 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00008AF8
.text:00008AF8 ; ---------------------------------------------------------------------------
.text:00008AFB                 align 4
.text:00008AFB _text           ends
.text:00008AFB
.text:00008AFC ; ===========================================================================
.text:00008AFC
.text:00008AFC ; Segment type: Pure code
.text:00008AFC ; Segment permissions: Read/Execute
.text:00008AFC _text           segment para public 'CODE' use32
.text:00008AFC                 assume cs:_text
.text:00008AFC                 ;org 8AFCh
.text:00008AFC ; COMDAT (pick any)
.text:00008AFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008AFC
.text:00008AFC ; =============== S U B R O U T I N E =======================================
.text:00008AFC
.text:00008AFC ; Attributes: bp-based frame
.text:00008AFC
.text:00008AFC ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00008AFC                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00008AFC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00008AFC                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderST>::operator[](uint)+15p
.text:00008AFC                                         ; CObjectVector<NCoderMixer2::CCoderST>::~CObjectVector<NCoderMixer2::CCoderST>(void)+64p ...
.text:00008AFC
.text:00008AFC var_4           = dword ptr -4
.text:00008AFC arg_0           = dword ptr  8
.text:00008AFC
.text:00008AFC                 push    ebp
.text:00008AFD                 mov     ebp, esp
.text:00008AFF                 push    ecx
.text:00008B00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008B07                 mov     [ebp+var_4], ecx
.text:00008B0A                 mov     eax, [ebp+var_4]
.text:00008B0D                 mov     ecx, [eax]
.text:00008B0F                 mov     edx, [ebp+arg_0]
.text:00008B12                 lea     eax, [ecx+edx*4]
.text:00008B15                 mov     esp, ebp
.text:00008B17                 pop     ebp
.text:00008B18                 retn    4
.text:00008B18 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00008B18
.text:00008B18 ; ---------------------------------------------------------------------------
.text:00008B1B                 align 4
.text:00008B1B _text           ends
.text:00008B1B
.text:00008B1C ; ===========================================================================
.text:00008B1C
.text:00008B1C ; Segment type: Pure code
.text:00008B1C ; Segment permissions: Read/Execute
.text:00008B1C _text           segment para public 'CODE' use32
.text:00008B1C                 assume cs:_text
.text:00008B1C                 ;org 8B1Ch
.text:00008B1C ; COMDAT (pick any)
.text:00008B1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008B1C
.text:00008B1C ; =============== S U B R O U T I N E =======================================
.text:00008B1C
.text:00008B1C ; Attributes: bp-based frame
.text:00008B1C
.text:00008B1C ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(struct ICompressCoder *)
.text:00008B1C                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
.text:00008B1C ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z proc near
.text:00008B1C                                         ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(CMyComPtr<ICompressCoder> const &)+17p
.text:00008B1C
.text:00008B1C var_4           = dword ptr -4
.text:00008B1C arg_0           = dword ptr  8
.text:00008B1C
.text:00008B1C                 push    ebp
.text:00008B1D                 mov     ebp, esp
.text:00008B1F                 push    ecx
.text:00008B20                 push    esi
.text:00008B21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008B28                 mov     [ebp+var_4], ecx
.text:00008B2B                 cmp     [ebp+arg_0], 0
.text:00008B2F                 jz      short loc_8B48
.text:00008B31                 mov     eax, [ebp+arg_0]
.text:00008B34                 mov     ecx, [eax]
.text:00008B36                 mov     esi, esp
.text:00008B38                 mov     edx, [ebp+arg_0]
.text:00008B3B                 push    edx
.text:00008B3C                 mov     eax, [ecx+4]
.text:00008B3F                 call    eax
.text:00008B41                 cmp     esi, esp
.text:00008B43                 call    __RTC_CheckEsp
.text:00008B48
.text:00008B48 loc_8B48:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+13j
.text:00008B48                 mov     ecx, [ebp+var_4]
.text:00008B4B                 cmp     dword ptr [ecx], 0
.text:00008B4E                 jz      short loc_8B6B
.text:00008B50                 mov     edx, [ebp+var_4]
.text:00008B53                 mov     eax, [edx]
.text:00008B55                 mov     ecx, [ebp+var_4]
.text:00008B58                 mov     edx, [ecx]
.text:00008B5A                 mov     eax, [eax]
.text:00008B5C                 mov     esi, esp
.text:00008B5E                 push    edx
.text:00008B5F                 mov     ecx, [eax+8]
.text:00008B62                 call    ecx
.text:00008B64                 cmp     esi, esp
.text:00008B66                 call    __RTC_CheckEsp
.text:00008B6B
.text:00008B6B loc_8B6B:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+32j
.text:00008B6B                 mov     edx, [ebp+var_4]
.text:00008B6E                 mov     eax, [ebp+arg_0]
.text:00008B71                 mov     [edx], eax
.text:00008B73                 mov     eax, [ebp+arg_0]
.text:00008B76                 pop     esi
.text:00008B77                 add     esp, 4
.text:00008B7A                 cmp     ebp, esp
.text:00008B7C                 call    __RTC_CheckEsp
.text:00008B81                 mov     esp, ebp
.text:00008B83                 pop     ebp
.text:00008B84                 retn    4
.text:00008B84 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z endp
.text:00008B84
.text:00008B84 ; ---------------------------------------------------------------------------
.text:00008B87                 align 4
.text:00008B87 _text           ends
.text:00008B87
.text:00008B88 ; ===========================================================================
.text:00008B88
.text:00008B88 ; Segment type: Pure code
.text:00008B88 ; Segment permissions: Read/Execute
.text:00008B88 _text           segment para public 'CODE' use32
.text:00008B88                 assume cs:_text
.text:00008B88                 ;org 8B88h
.text:00008B88 ; COMDAT (pick any)
.text:00008B88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008B88
.text:00008B88 ; =============== S U B R O U T I N E =======================================
.text:00008B88
.text:00008B88 ; Attributes: bp-based frame
.text:00008B88
.text:00008B88 ; public: struct ICompressCoder2 * __thiscall CMyComPtr<struct ICompressCoder2>::operator=(struct ICompressCoder2 *)
.text:00008B88                 public ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z
.text:00008B88 ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z proc near
.text:00008B88                                         ; CODE XREF: CMyComPtr<ICompressCoder2>::operator=(CMyComPtr<ICompressCoder2> const &)+17p
.text:00008B88
.text:00008B88 var_4           = dword ptr -4
.text:00008B88 arg_0           = dword ptr  8
.text:00008B88
.text:00008B88                 push    ebp
.text:00008B89                 mov     ebp, esp
.text:00008B8B                 push    ecx
.text:00008B8C                 push    esi
.text:00008B8D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008B94                 mov     [ebp+var_4], ecx
.text:00008B97                 cmp     [ebp+arg_0], 0
.text:00008B9B                 jz      short loc_8BB4
.text:00008B9D                 mov     eax, [ebp+arg_0]
.text:00008BA0                 mov     ecx, [eax]
.text:00008BA2                 mov     esi, esp
.text:00008BA4                 mov     edx, [ebp+arg_0]
.text:00008BA7                 push    edx
.text:00008BA8                 mov     eax, [ecx+4]
.text:00008BAB                 call    eax
.text:00008BAD                 cmp     esi, esp
.text:00008BAF                 call    __RTC_CheckEsp
.text:00008BB4
.text:00008BB4 loc_8BB4:                               ; CODE XREF: CMyComPtr<ICompressCoder2>::operator=(ICompressCoder2 *)+13j
.text:00008BB4                 mov     ecx, [ebp+var_4]
.text:00008BB7                 cmp     dword ptr [ecx], 0
.text:00008BBA                 jz      short loc_8BD7
.text:00008BBC                 mov     edx, [ebp+var_4]
.text:00008BBF                 mov     eax, [edx]
.text:00008BC1                 mov     ecx, [ebp+var_4]
.text:00008BC4                 mov     edx, [ecx]
.text:00008BC6                 mov     eax, [eax]
.text:00008BC8                 mov     esi, esp
.text:00008BCA                 push    edx
.text:00008BCB                 mov     ecx, [eax+8]
.text:00008BCE                 call    ecx
.text:00008BD0                 cmp     esi, esp
.text:00008BD2                 call    __RTC_CheckEsp
.text:00008BD7
.text:00008BD7 loc_8BD7:                               ; CODE XREF: CMyComPtr<ICompressCoder2>::operator=(ICompressCoder2 *)+32j
.text:00008BD7                 mov     edx, [ebp+var_4]
.text:00008BDA                 mov     eax, [ebp+arg_0]
.text:00008BDD                 mov     [edx], eax
.text:00008BDF                 mov     eax, [ebp+arg_0]
.text:00008BE2                 pop     esi
.text:00008BE3                 add     esp, 4
.text:00008BE6                 cmp     ebp, esp
.text:00008BE8                 call    __RTC_CheckEsp
.text:00008BED                 mov     esp, ebp
.text:00008BEF                 pop     ebp
.text:00008BF0                 retn    4
.text:00008BF0 ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z endp
.text:00008BF0
.text:00008BF0 ; ---------------------------------------------------------------------------
.text:00008BF3                 align 4
.text:00008BF3 _text           ends
.text:00008BF3
.text:00008BF4 ; ===========================================================================
.text:00008BF4
.text:00008BF4 ; Segment type: Pure code
.text:00008BF4 ; Segment permissions: Read/Execute
.text:00008BF4 _text           segment para public 'CODE' use32
.text:00008BF4                 assume cs:_text
.text:00008BF4                 ;org 8BF4h
.text:00008BF4 ; COMDAT (pick any)
.text:00008BF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008BF4
.text:00008BF4 ; =============== S U B R O U T I N E =======================================
.text:00008BF4
.text:00008BF4 ; Attributes: bp-based frame
.text:00008BF4
.text:00008BF4 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(class CMyComPtr<struct ISequentialInStream> const &)
.text:00008BF4                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z
.text:00008BF4 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z proc near
.text:00008BF4                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::Add(CMyComPtr<ISequentialInStream> const &)+38p
.text:00008BF4
.text:00008BF4 var_4           = dword ptr -4
.text:00008BF4 arg_0           = dword ptr  8
.text:00008BF4
.text:00008BF4                 push    ebp
.text:00008BF5                 mov     ebp, esp
.text:00008BF7                 push    ecx
.text:00008BF8                 push    esi
.text:00008BF9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008C00                 mov     [ebp+var_4], ecx
.text:00008C03                 mov     eax, [ebp+var_4]
.text:00008C06                 mov     ecx, [ebp+arg_0]
.text:00008C09                 mov     edx, [ecx]
.text:00008C0B                 mov     [eax], edx
.text:00008C0D                 mov     eax, [ebp+var_4]
.text:00008C10                 cmp     dword ptr [eax], 0
.text:00008C13                 jz      short loc_8C30
.text:00008C15                 mov     ecx, [ebp+var_4]
.text:00008C18                 mov     edx, [ecx]
.text:00008C1A                 mov     eax, [ebp+var_4]
.text:00008C1D                 mov     ecx, [eax]
.text:00008C1F                 mov     edx, [edx]
.text:00008C21                 mov     esi, esp
.text:00008C23                 push    ecx
.text:00008C24                 mov     eax, [edx+4]
.text:00008C27                 call    eax
.text:00008C29                 cmp     esi, esp
.text:00008C2B                 call    __RTC_CheckEsp
.text:00008C30
.text:00008C30 loc_8C30:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(CMyComPtr<ISequentialInStream> const &)+1Fj
.text:00008C30                 mov     eax, [ebp+var_4]
.text:00008C33                 pop     esi
.text:00008C34                 add     esp, 4
.text:00008C37                 cmp     ebp, esp
.text:00008C39                 call    __RTC_CheckEsp
.text:00008C3E                 mov     esp, ebp
.text:00008C40                 pop     ebp
.text:00008C41                 retn    4
.text:00008C41 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@ABV0@@Z endp
.text:00008C41
.text:00008C41 _text           ends
.text:00008C41
.text:00008C44 ; ===========================================================================
.text:00008C44
.text:00008C44 ; Segment type: Pure code
.text:00008C44 ; Segment permissions: Read/Execute
.text:00008C44 _text           segment para public 'CODE' use32
.text:00008C44                 assume cs:_text
.text:00008C44                 ;org 8C44h
.text:00008C44 ; COMDAT (pick any)
.text:00008C44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008C44
.text:00008C44 ; =============== S U B R O U T I N E =======================================
.text:00008C44
.text:00008C44 ; Attributes: bp-based frame
.text:00008C44
.text:00008C44 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(class CMyComPtr<struct ISequentialOutStream> const &)
.text:00008C44                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z
.text:00008C44 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z proc near
.text:00008C44                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Add(CMyComPtr<ISequentialOutStream> const &)+38p
.text:00008C44
.text:00008C44 var_4           = dword ptr -4
.text:00008C44 arg_0           = dword ptr  8
.text:00008C44
.text:00008C44                 push    ebp
.text:00008C45                 mov     ebp, esp
.text:00008C47                 push    ecx
.text:00008C48                 push    esi
.text:00008C49                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008C50                 mov     [ebp+var_4], ecx
.text:00008C53                 mov     eax, [ebp+var_4]
.text:00008C56                 mov     ecx, [ebp+arg_0]
.text:00008C59                 mov     edx, [ecx]
.text:00008C5B                 mov     [eax], edx
.text:00008C5D                 mov     eax, [ebp+var_4]
.text:00008C60                 cmp     dword ptr [eax], 0
.text:00008C63                 jz      short loc_8C80
.text:00008C65                 mov     ecx, [ebp+var_4]
.text:00008C68                 mov     edx, [ecx]
.text:00008C6A                 mov     eax, [ebp+var_4]
.text:00008C6D                 mov     ecx, [eax]
.text:00008C6F                 mov     edx, [edx]
.text:00008C71                 mov     esi, esp
.text:00008C73                 push    ecx
.text:00008C74                 mov     eax, [edx+4]
.text:00008C77                 call    eax
.text:00008C79                 cmp     esi, esp
.text:00008C7B                 call    __RTC_CheckEsp
.text:00008C80
.text:00008C80 loc_8C80:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(CMyComPtr<ISequentialOutStream> const &)+1Fj
.text:00008C80                 mov     eax, [ebp+var_4]
.text:00008C83                 pop     esi
.text:00008C84                 add     esp, 4
.text:00008C87                 cmp     ebp, esp
.text:00008C89                 call    __RTC_CheckEsp
.text:00008C8E                 mov     esp, ebp
.text:00008C90                 pop     ebp
.text:00008C91                 retn    4
.text:00008C91 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z endp
.text:00008C91
.text:00008C91 _text           ends
.text:00008C91
.text:00008C94 ; ===========================================================================
.text:00008C94
.text:00008C94 ; Segment type: Pure code
.text:00008C94 ; Segment permissions: Read/Execute
.text:00008C94 _text           segment para public 'CODE' use32
.text:00008C94                 assume cs:_text
.text:00008C94                 ;org 8C94h
.text:00008C94 ; COMDAT (pick any)
.text:00008C94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008C94
.text:00008C94 ; =============== S U B R O U T I N E =======================================
.text:00008C94
.text:00008C94 ; Attributes: bp-based frame
.text:00008C94
.text:00008C94 ; private: void __thiscall CRecordVector<unsigned int>::ReserveOnePosition(void)
.text:00008C94                 public ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
.text:00008C94 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ proc near
.text:00008C94                                         ; CODE XREF: CRecordVector<uint>::Add(uint)+1Ap
.text:00008C94
.text:00008C94 var_14          = dword ptr -14h
.text:00008C94 var_10          = dword ptr -10h
.text:00008C94 Dst             = dword ptr -0Ch
.text:00008C94 var_8           = dword ptr -8
.text:00008C94 var_4           = dword ptr -4
.text:00008C94
.text:00008C94                 push    ebp
.text:00008C95                 mov     ebp, esp
.text:00008C97                 sub     esp, 14h
.text:00008C9A                 mov     eax, 0CCCCCCCCh
.text:00008C9F                 mov     [ebp+var_14], eax
.text:00008CA2                 mov     [ebp+var_10], eax
.text:00008CA5                 mov     [ebp+Dst], eax
.text:00008CA8                 mov     [ebp+var_8], eax
.text:00008CAB                 mov     [ebp+var_4], eax
.text:00008CAE                 mov     [ebp+var_4], ecx
.text:00008CB1                 mov     eax, [ebp+var_4]
.text:00008CB4                 mov     ecx, [ebp+var_4]
.text:00008CB7                 mov     edx, [eax+4]
.text:00008CBA                 cmp     edx, [ecx+8]
.text:00008CBD                 jnz     loc_8D48
.text:00008CC3                 mov     eax, [ebp+var_4]
.text:00008CC6                 mov     ecx, [eax+8]
.text:00008CC9                 shr     ecx, 2
.text:00008CCC                 mov     edx, [ebp+var_4]
.text:00008CCF                 mov     eax, [edx+8]
.text:00008CD2                 lea     ecx, [eax+ecx+1]
.text:00008CD6                 mov     [ebp+var_8], ecx
.text:00008CD9                 xor     ecx, ecx
.text:00008CDB                 mov     eax, [ebp+var_8]
.text:00008CDE                 mov     edx, 4
.text:00008CE3                 mul     edx
.text:00008CE5                 seto    cl
.text:00008CE8                 neg     ecx
.text:00008CEA                 or      ecx, eax
.text:00008CEC                 push    ecx             ; unsigned int
.text:00008CED                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008CF2                 add     esp, 4
.text:00008CF5                 mov     [ebp+var_10], eax
.text:00008CF8                 mov     eax, [ebp+var_10]
.text:00008CFB                 mov     [ebp+Dst], eax
.text:00008CFE                 mov     ecx, [ebp+var_4]
.text:00008D01                 cmp     dword ptr [ecx+4], 0
.text:00008D05                 jz      short loc_8D23
.text:00008D07                 mov     edx, [ebp+var_4]
.text:00008D0A                 mov     eax, [edx+4]
.text:00008D0D                 shl     eax, 2
.text:00008D10                 push    eax             ; Size
.text:00008D11                 mov     ecx, [ebp+var_4]
.text:00008D14                 mov     edx, [ecx]
.text:00008D16                 push    edx             ; Src
.text:00008D17                 mov     eax, [ebp+Dst]
.text:00008D1A                 push    eax             ; Dst
.text:00008D1B                 call    _memcpy
.text:00008D20                 add     esp, 0Ch
.text:00008D23
.text:00008D23 loc_8D23:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+71j
.text:00008D23                 mov     ecx, [ebp+var_4]
.text:00008D26                 mov     edx, [ecx]
.text:00008D28                 mov     [ebp+var_14], edx
.text:00008D2B                 mov     eax, [ebp+var_14]
.text:00008D2E                 push    eax             ; void *
.text:00008D2F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008D34                 add     esp, 4
.text:00008D37                 mov     ecx, [ebp+var_4]
.text:00008D3A                 mov     edx, [ebp+Dst]
.text:00008D3D                 mov     [ecx], edx
.text:00008D3F                 mov     eax, [ebp+var_4]
.text:00008D42                 mov     ecx, [ebp+var_8]
.text:00008D45                 mov     [eax+8], ecx
.text:00008D48
.text:00008D48 loc_8D48:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+29j
.text:00008D48                 add     esp, 14h
.text:00008D4B                 cmp     ebp, esp
.text:00008D4D                 call    __RTC_CheckEsp
.text:00008D52                 mov     esp, ebp
.text:00008D54                 pop     ebp
.text:00008D55                 retn
.text:00008D55 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ endp
.text:00008D55
.text:00008D55 ; ---------------------------------------------------------------------------
.text:00008D56                 align 4
.text:00008D56 _text           ends
.text:00008D56
.text:00008D58 ; ===========================================================================
.text:00008D58
.text:00008D58 ; Segment type: Pure code
.text:00008D58 ; Segment permissions: Read/Execute
.text:00008D58 _text           segment para public 'CODE' use32
.text:00008D58                 assume cs:_text
.text:00008D58                 ;org 8D58h
.text:00008D58 ; COMDAT (pick any)
.text:00008D58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008D58
.text:00008D58 ; =============== S U B R O U T I N E =======================================
.text:00008D58
.text:00008D58 ; Attributes: bp-based frame
.text:00008D58
.text:00008D58 ; public: void __thiscall CRecordVector<unsigned __int64>::ClearAndReserve(unsigned int)
.text:00008D58                 public ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z
.text:00008D58 ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z proc near
.text:00008D58                                         ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndSetSize(uint)+15p
.text:00008D58
.text:00008D58 var_C           = dword ptr -0Ch
.text:00008D58 var_8           = dword ptr -8
.text:00008D58 var_4           = dword ptr -4
.text:00008D58 arg_0           = dword ptr  8
.text:00008D58
.text:00008D58                 push    ebp
.text:00008D59                 mov     ebp, esp
.text:00008D5B                 sub     esp, 0Ch
.text:00008D5E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00008D65                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008D6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008D73                 mov     [ebp+var_4], ecx
.text:00008D76                 mov     ecx, [ebp+var_4]
.text:00008D79                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00008D7E                 mov     eax, [ebp+var_4]
.text:00008D81                 mov     ecx, [ebp+arg_0]
.text:00008D84                 cmp     ecx, [eax+8]
.text:00008D87                 jbe     short loc_8DE0
.text:00008D89                 mov     edx, [ebp+var_4]
.text:00008D8C                 mov     eax, [edx]
.text:00008D8E                 mov     [ebp+var_8], eax
.text:00008D91                 mov     ecx, [ebp+var_8]
.text:00008D94                 push    ecx             ; void *
.text:00008D95                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008D9A                 add     esp, 4
.text:00008D9D                 mov     edx, [ebp+var_4]
.text:00008DA0                 mov     dword ptr [edx], 0
.text:00008DA6                 mov     eax, [ebp+var_4]
.text:00008DA9                 mov     dword ptr [eax+8], 0
.text:00008DB0                 xor     ecx, ecx
.text:00008DB2                 mov     eax, [ebp+arg_0]
.text:00008DB5                 mov     edx, 8
.text:00008DBA                 mul     edx
.text:00008DBC                 seto    cl
.text:00008DBF                 neg     ecx
.text:00008DC1                 or      ecx, eax
.text:00008DC3                 push    ecx             ; unsigned int
.text:00008DC4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008DC9                 add     esp, 4
.text:00008DCC                 mov     [ebp+var_C], eax
.text:00008DCF                 mov     eax, [ebp+var_4]
.text:00008DD2                 mov     ecx, [ebp+var_C]
.text:00008DD5                 mov     [eax], ecx
.text:00008DD7                 mov     edx, [ebp+var_4]
.text:00008DDA                 mov     eax, [ebp+arg_0]
.text:00008DDD                 mov     [edx+8], eax
.text:00008DE0
.text:00008DE0 loc_8DE0:                               ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndReserve(uint)+2Fj
.text:00008DE0                 add     esp, 0Ch
.text:00008DE3                 cmp     ebp, esp
.text:00008DE5                 call    __RTC_CheckEsp
.text:00008DEA                 mov     esp, ebp
.text:00008DEC                 pop     ebp
.text:00008DED                 retn    4
.text:00008DED ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z endp
.text:00008DED
.text:00008DED _text           ends
.text:00008DED
.text:00008DF0 ; ===========================================================================
.text:00008DF0
.text:00008DF0 ; Segment type: Pure code
.text:00008DF0 ; Segment permissions: Read/Execute
.text:00008DF0 _text           segment para public 'CODE' use32
.text:00008DF0                 assume cs:_text
.text:00008DF0                 ;org 8DF0h
.text:00008DF0 ; COMDAT (pick any)
.text:00008DF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008DF0
.text:00008DF0 ; =============== S U B R O U T I N E =======================================
.text:00008DF0
.text:00008DF0 ; Attributes: bp-based frame
.text:00008DF0
.text:00008DF0 ; public: void __thiscall CRecordVector<unsigned __int64 const *>::ClearAndReserve(unsigned int)
.text:00008DF0                 public ?ClearAndReserve@?$CRecordVector@PB_K@@QAEXI@Z
.text:00008DF0 ?ClearAndReserve@?$CRecordVector@PB_K@@QAEXI@Z proc near
.text:00008DF0                                         ; CODE XREF: CRecordVector<unsigned __int64 const *>::ClearAndSetSize(uint)+15p
.text:00008DF0
.text:00008DF0 var_C           = dword ptr -0Ch
.text:00008DF0 var_8           = dword ptr -8
.text:00008DF0 var_4           = dword ptr -4
.text:00008DF0 arg_0           = dword ptr  8
.text:00008DF0
.text:00008DF0                 push    ebp
.text:00008DF1                 mov     ebp, esp
.text:00008DF3                 sub     esp, 0Ch
.text:00008DF6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00008DFD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008E04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008E0B                 mov     [ebp+var_4], ecx
.text:00008E0E                 mov     ecx, [ebp+var_4]
.text:00008E11                 call    ?Clear@?$CRecordVector@PB_K@@QAEXXZ ; CRecordVector<unsigned __int64 const *>::Clear(void)
.text:00008E16                 mov     eax, [ebp+var_4]
.text:00008E19                 mov     ecx, [ebp+arg_0]
.text:00008E1C                 cmp     ecx, [eax+8]
.text:00008E1F                 jbe     short loc_8E78
.text:00008E21                 mov     edx, [ebp+var_4]
.text:00008E24                 mov     eax, [edx]
.text:00008E26                 mov     [ebp+var_8], eax
.text:00008E29                 mov     ecx, [ebp+var_8]
.text:00008E2C                 push    ecx             ; void *
.text:00008E2D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008E32                 add     esp, 4
.text:00008E35                 mov     edx, [ebp+var_4]
.text:00008E38                 mov     dword ptr [edx], 0
.text:00008E3E                 mov     eax, [ebp+var_4]
.text:00008E41                 mov     dword ptr [eax+8], 0
.text:00008E48                 xor     ecx, ecx
.text:00008E4A                 mov     eax, [ebp+arg_0]
.text:00008E4D                 mov     edx, 4
.text:00008E52                 mul     edx
.text:00008E54                 seto    cl
.text:00008E57                 neg     ecx
.text:00008E59                 or      ecx, eax
.text:00008E5B                 push    ecx             ; unsigned int
.text:00008E5C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008E61                 add     esp, 4
.text:00008E64                 mov     [ebp+var_C], eax
.text:00008E67                 mov     eax, [ebp+var_4]
.text:00008E6A                 mov     ecx, [ebp+var_C]
.text:00008E6D                 mov     [eax], ecx
.text:00008E6F                 mov     edx, [ebp+var_4]
.text:00008E72                 mov     eax, [ebp+arg_0]
.text:00008E75                 mov     [edx+8], eax
.text:00008E78
.text:00008E78 loc_8E78:                               ; CODE XREF: CRecordVector<unsigned __int64 const *>::ClearAndReserve(uint)+2Fj
.text:00008E78                 add     esp, 0Ch
.text:00008E7B                 cmp     ebp, esp
.text:00008E7D                 call    __RTC_CheckEsp
.text:00008E82                 mov     esp, ebp
.text:00008E84                 pop     ebp
.text:00008E85                 retn    4
.text:00008E85 ?ClearAndReserve@?$CRecordVector@PB_K@@QAEXI@Z endp
.text:00008E85
.text:00008E85 _text           ends
.text:00008E85
.text:00008E88 ; ===========================================================================
.text:00008E88
.text:00008E88 ; Segment type: Pure code
.text:00008E88 ; Segment permissions: Read/Execute
.text:00008E88 _text           segment para public 'CODE' use32
.text:00008E88                 assume cs:_text
.text:00008E88                 ;org 8E88h
.text:00008E88 ; COMDAT (pick any)
.text:00008E88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008E88
.text:00008E88 ; =============== S U B R O U T I N E =======================================
.text:00008E88
.text:00008E88 ; Attributes: bp-based frame
.text:00008E88
.text:00008E88 ; private: void __thiscall CRecordVector<bool>::ReserveOnePosition(void)
.text:00008E88                 public ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
.text:00008E88 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ proc near
.text:00008E88                                         ; CODE XREF: CRecordVector<bool>::Add(bool)+1Ap
.text:00008E88
.text:00008E88 var_14          = dword ptr -14h
.text:00008E88 var_10          = dword ptr -10h
.text:00008E88 Dst             = dword ptr -0Ch
.text:00008E88 var_8           = dword ptr -8
.text:00008E88 var_4           = dword ptr -4
.text:00008E88
.text:00008E88                 push    ebp
.text:00008E89                 mov     ebp, esp
.text:00008E8B                 sub     esp, 14h
.text:00008E8E                 mov     eax, 0CCCCCCCCh
.text:00008E93                 mov     [ebp+var_14], eax
.text:00008E96                 mov     [ebp+var_10], eax
.text:00008E99                 mov     [ebp+Dst], eax
.text:00008E9C                 mov     [ebp+var_8], eax
.text:00008E9F                 mov     [ebp+var_4], eax
.text:00008EA2                 mov     [ebp+var_4], ecx
.text:00008EA5                 mov     eax, [ebp+var_4]
.text:00008EA8                 mov     ecx, [ebp+var_4]
.text:00008EAB                 mov     edx, [eax+4]
.text:00008EAE                 cmp     edx, [ecx+8]
.text:00008EB1                 jnz     short loc_8F25
.text:00008EB3                 mov     eax, [ebp+var_4]
.text:00008EB6                 mov     ecx, [eax+8]
.text:00008EB9                 shr     ecx, 2
.text:00008EBC                 mov     edx, [ebp+var_4]
.text:00008EBF                 mov     eax, [edx+8]
.text:00008EC2                 lea     ecx, [eax+ecx+1]
.text:00008EC6                 mov     [ebp+var_8], ecx
.text:00008EC9                 mov     edx, [ebp+var_8]
.text:00008ECC                 push    edx             ; unsigned int
.text:00008ECD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008ED2                 add     esp, 4
.text:00008ED5                 mov     [ebp+var_10], eax
.text:00008ED8                 mov     eax, [ebp+var_10]
.text:00008EDB                 mov     [ebp+Dst], eax
.text:00008EDE                 mov     ecx, [ebp+var_4]
.text:00008EE1                 cmp     dword ptr [ecx+4], 0
.text:00008EE5                 jz      short loc_8F00
.text:00008EE7                 mov     edx, [ebp+var_4]
.text:00008EEA                 mov     eax, [edx+4]
.text:00008EED                 push    eax             ; Size
.text:00008EEE                 mov     ecx, [ebp+var_4]
.text:00008EF1                 mov     edx, [ecx]
.text:00008EF3                 push    edx             ; Src
.text:00008EF4                 mov     eax, [ebp+Dst]
.text:00008EF7                 push    eax             ; Dst
.text:00008EF8                 call    _memcpy
.text:00008EFD                 add     esp, 0Ch
.text:00008F00
.text:00008F00 loc_8F00:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+5Dj
.text:00008F00                 mov     ecx, [ebp+var_4]
.text:00008F03                 mov     edx, [ecx]
.text:00008F05                 mov     [ebp+var_14], edx
.text:00008F08                 mov     eax, [ebp+var_14]
.text:00008F0B                 push    eax             ; void *
.text:00008F0C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008F11                 add     esp, 4
.text:00008F14                 mov     ecx, [ebp+var_4]
.text:00008F17                 mov     edx, [ebp+Dst]
.text:00008F1A                 mov     [ecx], edx
.text:00008F1C                 mov     eax, [ebp+var_4]
.text:00008F1F                 mov     ecx, [ebp+var_8]
.text:00008F22                 mov     [eax+8], ecx
.text:00008F25
.text:00008F25 loc_8F25:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+29j
.text:00008F25                 add     esp, 14h
.text:00008F28                 cmp     ebp, esp
.text:00008F2A                 call    __RTC_CheckEsp
.text:00008F2F                 mov     esp, ebp
.text:00008F31                 pop     ebp
.text:00008F32                 retn
.text:00008F32 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ endp
.text:00008F32
.text:00008F32 ; ---------------------------------------------------------------------------
.text:00008F33                 align 4
.text:00008F33 _text           ends
.text:00008F33
.text:00008F34 ; ===========================================================================
.text:00008F34
.text:00008F34 ; Segment type: Pure code
.text:00008F34 ; Segment permissions: Read/Execute
.text:00008F34 _text           segment para public 'CODE' use32
.text:00008F34                 assume cs:_text
.text:00008F34                 ;org 8F34h
.text:00008F34 ; COMDAT (pick any)
.text:00008F34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008F34
.text:00008F34 ; =============== S U B R O U T I N E =======================================
.text:00008F34
.text:00008F34 ; Attributes: bp-based frame
.text:00008F34
.text:00008F34 ; public: void __thiscall CRecordVector<bool>::ClearAndReserve(unsigned int)
.text:00008F34                 public ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z
.text:00008F34 ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z proc near
.text:00008F34                                         ; CODE XREF: CRecordVector<bool>::ClearAndSetSize(uint)+15p
.text:00008F34
.text:00008F34 var_C           = dword ptr -0Ch
.text:00008F34 var_8           = dword ptr -8
.text:00008F34 var_4           = dword ptr -4
.text:00008F34 arg_0           = dword ptr  8
.text:00008F34
.text:00008F34                 push    ebp
.text:00008F35                 mov     ebp, esp
.text:00008F37                 sub     esp, 0Ch
.text:00008F3A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00008F41                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008F48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008F4F                 mov     [ebp+var_4], ecx
.text:00008F52                 mov     ecx, [ebp+var_4]
.text:00008F55                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:00008F5A                 mov     eax, [ebp+var_4]
.text:00008F5D                 mov     ecx, [ebp+arg_0]
.text:00008F60                 cmp     ecx, [eax+8]
.text:00008F63                 jbe     short loc_8FAC
.text:00008F65                 mov     edx, [ebp+var_4]
.text:00008F68                 mov     eax, [edx]
.text:00008F6A                 mov     [ebp+var_8], eax
.text:00008F6D                 mov     ecx, [ebp+var_8]
.text:00008F70                 push    ecx             ; void *
.text:00008F71                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008F76                 add     esp, 4
.text:00008F79                 mov     edx, [ebp+var_4]
.text:00008F7C                 mov     dword ptr [edx], 0
.text:00008F82                 mov     eax, [ebp+var_4]
.text:00008F85                 mov     dword ptr [eax+8], 0
.text:00008F8C                 mov     ecx, [ebp+arg_0]
.text:00008F8F                 push    ecx             ; unsigned int
.text:00008F90                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008F95                 add     esp, 4
.text:00008F98                 mov     [ebp+var_C], eax
.text:00008F9B                 mov     edx, [ebp+var_4]
.text:00008F9E                 mov     eax, [ebp+var_C]
.text:00008FA1                 mov     [edx], eax
.text:00008FA3                 mov     ecx, [ebp+var_4]
.text:00008FA6                 mov     edx, [ebp+arg_0]
.text:00008FA9                 mov     [ecx+8], edx
.text:00008FAC
.text:00008FAC loc_8FAC:                               ; CODE XREF: CRecordVector<bool>::ClearAndReserve(uint)+2Fj
.text:00008FAC                 add     esp, 0Ch
.text:00008FAF                 cmp     ebp, esp
.text:00008FB1                 call    __RTC_CheckEsp
.text:00008FB6                 mov     esp, ebp
.text:00008FB8                 pop     ebp
.text:00008FB9                 retn    4
.text:00008FB9 ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z endp
.text:00008FB9
.text:00008FB9 _text           ends
.text:00008FB9
.text:00008FBC ; ===========================================================================
.text:00008FBC
.text:00008FBC ; Segment type: Pure code
.text:00008FBC ; Segment permissions: Read/Execute
.text:00008FBC _text           segment para public 'CODE' use32
.text:00008FBC                 assume cs:_text
.text:00008FBC                 ;org 8FBCh
.text:00008FBC ; COMDAT (pick any)
.text:00008FBC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008FBC
.text:00008FBC ; =============== S U B R O U T I N E =======================================
.text:00008FBC
.text:00008FBC ; Attributes: bp-based frame
.text:00008FBC
.text:00008FBC ; private: void __thiscall CRecordVector<struct ISequentialInStream *>::ReserveOnePosition(void)
.text:00008FBC                 public ?ReserveOnePosition@?$CRecordVector@PAUISequentialInStream@@@@AAEXXZ
.text:00008FBC ?ReserveOnePosition@?$CRecordVector@PAUISequentialInStream@@@@AAEXXZ proc near
.text:00008FBC                                         ; CODE XREF: CRecordVector<ISequentialInStream *>::Add(ISequentialInStream * const)+1Ap
.text:00008FBC
.text:00008FBC var_14          = dword ptr -14h
.text:00008FBC var_10          = dword ptr -10h
.text:00008FBC Dst             = dword ptr -0Ch
.text:00008FBC var_8           = dword ptr -8
.text:00008FBC var_4           = dword ptr -4
.text:00008FBC
.text:00008FBC                 push    ebp
.text:00008FBD                 mov     ebp, esp
.text:00008FBF                 sub     esp, 14h
.text:00008FC2                 mov     eax, 0CCCCCCCCh
.text:00008FC7                 mov     [ebp+var_14], eax
.text:00008FCA                 mov     [ebp+var_10], eax
.text:00008FCD                 mov     [ebp+Dst], eax
.text:00008FD0                 mov     [ebp+var_8], eax
.text:00008FD3                 mov     [ebp+var_4], eax
.text:00008FD6                 mov     [ebp+var_4], ecx
.text:00008FD9                 mov     eax, [ebp+var_4]
.text:00008FDC                 mov     ecx, [ebp+var_4]
.text:00008FDF                 mov     edx, [eax+4]
.text:00008FE2                 cmp     edx, [ecx+8]
.text:00008FE5                 jnz     loc_9070
.text:00008FEB                 mov     eax, [ebp+var_4]
.text:00008FEE                 mov     ecx, [eax+8]
.text:00008FF1                 shr     ecx, 2
.text:00008FF4                 mov     edx, [ebp+var_4]
.text:00008FF7                 mov     eax, [edx+8]
.text:00008FFA                 lea     ecx, [eax+ecx+1]
.text:00008FFE                 mov     [ebp+var_8], ecx
.text:00009001                 xor     ecx, ecx
.text:00009003                 mov     eax, [ebp+var_8]
.text:00009006                 mov     edx, 4
.text:0000900B                 mul     edx
.text:0000900D                 seto    cl
.text:00009010                 neg     ecx
.text:00009012                 or      ecx, eax
.text:00009014                 push    ecx             ; unsigned int
.text:00009015                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000901A                 add     esp, 4
.text:0000901D                 mov     [ebp+var_10], eax
.text:00009020                 mov     eax, [ebp+var_10]
.text:00009023                 mov     [ebp+Dst], eax
.text:00009026                 mov     ecx, [ebp+var_4]
.text:00009029                 cmp     dword ptr [ecx+4], 0
.text:0000902D                 jz      short loc_904B
.text:0000902F                 mov     edx, [ebp+var_4]
.text:00009032                 mov     eax, [edx+4]
.text:00009035                 shl     eax, 2
.text:00009038                 push    eax             ; Size
.text:00009039                 mov     ecx, [ebp+var_4]
.text:0000903C                 mov     edx, [ecx]
.text:0000903E                 push    edx             ; Src
.text:0000903F                 mov     eax, [ebp+Dst]
.text:00009042                 push    eax             ; Dst
.text:00009043                 call    _memcpy
.text:00009048                 add     esp, 0Ch
.text:0000904B
.text:0000904B loc_904B:                               ; CODE XREF: CRecordVector<ISequentialInStream *>::ReserveOnePosition(void)+71j
.text:0000904B                 mov     ecx, [ebp+var_4]
.text:0000904E                 mov     edx, [ecx]
.text:00009050                 mov     [ebp+var_14], edx
.text:00009053                 mov     eax, [ebp+var_14]
.text:00009056                 push    eax             ; void *
.text:00009057                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000905C                 add     esp, 4
.text:0000905F                 mov     ecx, [ebp+var_4]
.text:00009062                 mov     edx, [ebp+Dst]
.text:00009065                 mov     [ecx], edx
.text:00009067                 mov     eax, [ebp+var_4]
.text:0000906A                 mov     ecx, [ebp+var_8]
.text:0000906D                 mov     [eax+8], ecx
.text:00009070
.text:00009070 loc_9070:                               ; CODE XREF: CRecordVector<ISequentialInStream *>::ReserveOnePosition(void)+29j
.text:00009070                 add     esp, 14h
.text:00009073                 cmp     ebp, esp
.text:00009075                 call    __RTC_CheckEsp
.text:0000907A                 mov     esp, ebp
.text:0000907C                 pop     ebp
.text:0000907D                 retn
.text:0000907D ?ReserveOnePosition@?$CRecordVector@PAUISequentialInStream@@@@AAEXXZ endp
.text:0000907D
.text:0000907D ; ---------------------------------------------------------------------------
.text:0000907E                 align 10h
.text:0000907E _text           ends
.text:0000907E
.text:00009080 ; ===========================================================================
.text:00009080
.text:00009080 ; Segment type: Pure code
.text:00009080 ; Segment permissions: Read/Execute
.text:00009080 _text           segment para public 'CODE' use32
.text:00009080                 assume cs:_text
.text:00009080                 ;org 9080h
.text:00009080 ; COMDAT (pick any)
.text:00009080                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009080
.text:00009080 ; =============== S U B R O U T I N E =======================================
.text:00009080
.text:00009080 ; Attributes: bp-based frame
.text:00009080
.text:00009080 ; private: void __thiscall CRecordVector<struct ISequentialOutStream *>::ReserveOnePosition(void)
.text:00009080                 public ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ
.text:00009080 ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ proc near
.text:00009080                                         ; CODE XREF: CRecordVector<ISequentialOutStream *>::Add(ISequentialOutStream * const)+1Ap
.text:00009080
.text:00009080 var_14          = dword ptr -14h
.text:00009080 var_10          = dword ptr -10h
.text:00009080 Dst             = dword ptr -0Ch
.text:00009080 var_8           = dword ptr -8
.text:00009080 var_4           = dword ptr -4
.text:00009080
.text:00009080                 push    ebp
.text:00009081                 mov     ebp, esp
.text:00009083                 sub     esp, 14h
.text:00009086                 mov     eax, 0CCCCCCCCh
.text:0000908B                 mov     [ebp+var_14], eax
.text:0000908E                 mov     [ebp+var_10], eax
.text:00009091                 mov     [ebp+Dst], eax
.text:00009094                 mov     [ebp+var_8], eax
.text:00009097                 mov     [ebp+var_4], eax
.text:0000909A                 mov     [ebp+var_4], ecx
.text:0000909D                 mov     eax, [ebp+var_4]
.text:000090A0                 mov     ecx, [ebp+var_4]
.text:000090A3                 mov     edx, [eax+4]
.text:000090A6                 cmp     edx, [ecx+8]
.text:000090A9                 jnz     loc_9134
.text:000090AF                 mov     eax, [ebp+var_4]
.text:000090B2                 mov     ecx, [eax+8]
.text:000090B5                 shr     ecx, 2
.text:000090B8                 mov     edx, [ebp+var_4]
.text:000090BB                 mov     eax, [edx+8]
.text:000090BE                 lea     ecx, [eax+ecx+1]
.text:000090C2                 mov     [ebp+var_8], ecx
.text:000090C5                 xor     ecx, ecx
.text:000090C7                 mov     eax, [ebp+var_8]
.text:000090CA                 mov     edx, 4
.text:000090CF                 mul     edx
.text:000090D1                 seto    cl
.text:000090D4                 neg     ecx
.text:000090D6                 or      ecx, eax
.text:000090D8                 push    ecx             ; unsigned int
.text:000090D9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000090DE                 add     esp, 4
.text:000090E1                 mov     [ebp+var_10], eax
.text:000090E4                 mov     eax, [ebp+var_10]
.text:000090E7                 mov     [ebp+Dst], eax
.text:000090EA                 mov     ecx, [ebp+var_4]
.text:000090ED                 cmp     dword ptr [ecx+4], 0
.text:000090F1                 jz      short loc_910F
.text:000090F3                 mov     edx, [ebp+var_4]
.text:000090F6                 mov     eax, [edx+4]
.text:000090F9                 shl     eax, 2
.text:000090FC                 push    eax             ; Size
.text:000090FD                 mov     ecx, [ebp+var_4]
.text:00009100                 mov     edx, [ecx]
.text:00009102                 push    edx             ; Src
.text:00009103                 mov     eax, [ebp+Dst]
.text:00009106                 push    eax             ; Dst
.text:00009107                 call    _memcpy
.text:0000910C                 add     esp, 0Ch
.text:0000910F
.text:0000910F loc_910F:                               ; CODE XREF: CRecordVector<ISequentialOutStream *>::ReserveOnePosition(void)+71j
.text:0000910F                 mov     ecx, [ebp+var_4]
.text:00009112                 mov     edx, [ecx]
.text:00009114                 mov     [ebp+var_14], edx
.text:00009117                 mov     eax, [ebp+var_14]
.text:0000911A                 push    eax             ; void *
.text:0000911B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009120                 add     esp, 4
.text:00009123                 mov     ecx, [ebp+var_4]
.text:00009126                 mov     edx, [ebp+Dst]
.text:00009129                 mov     [ecx], edx
.text:0000912B                 mov     eax, [ebp+var_4]
.text:0000912E                 mov     ecx, [ebp+var_8]
.text:00009131                 mov     [eax+8], ecx
.text:00009134
.text:00009134 loc_9134:                               ; CODE XREF: CRecordVector<ISequentialOutStream *>::ReserveOnePosition(void)+29j
.text:00009134                 add     esp, 14h
.text:00009137                 cmp     ebp, esp
.text:00009139                 call    __RTC_CheckEsp
.text:0000913E                 mov     esp, ebp
.text:00009140                 pop     ebp
.text:00009141                 retn
.text:00009141 ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ endp
.text:00009141
.text:00009141 ; ---------------------------------------------------------------------------
.text:00009142                 align 4
.text:00009142 _text           ends
.text:00009142
.text:00009144 ; ===========================================================================
.text:00009144
.text:00009144 ; Segment type: Pure code
.text:00009144 ; Segment permissions: Read/Execute
.text:00009144 _text           segment para public 'CODE' use32
.text:00009144                 assume cs:_text
.text:00009144                 ;org 9144h
.text:00009144 ; COMDAT (pick any)
.text:00009144                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009144
.text:00009144 ; =============== S U B R O U T I N E =======================================
.text:00009144
.text:00009144 ; Attributes: bp-based frame
.text:00009144
.text:00009144 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00009144                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00009144 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00009144                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00009144
.text:00009144 var_14          = dword ptr -14h
.text:00009144 var_10          = dword ptr -10h
.text:00009144 Dst             = dword ptr -0Ch
.text:00009144 var_8           = dword ptr -8
.text:00009144 var_4           = dword ptr -4
.text:00009144
.text:00009144                 push    ebp
.text:00009145                 mov     ebp, esp
.text:00009147                 sub     esp, 14h
.text:0000914A                 mov     eax, 0CCCCCCCCh
.text:0000914F                 mov     [ebp+var_14], eax
.text:00009152                 mov     [ebp+var_10], eax
.text:00009155                 mov     [ebp+Dst], eax
.text:00009158                 mov     [ebp+var_8], eax
.text:0000915B                 mov     [ebp+var_4], eax
.text:0000915E                 mov     [ebp+var_4], ecx
.text:00009161                 mov     eax, [ebp+var_4]
.text:00009164                 mov     ecx, [ebp+var_4]
.text:00009167                 mov     edx, [eax+4]
.text:0000916A                 cmp     edx, [ecx+8]
.text:0000916D                 jnz     loc_91F8
.text:00009173                 mov     eax, [ebp+var_4]
.text:00009176                 mov     ecx, [eax+8]
.text:00009179                 shr     ecx, 2
.text:0000917C                 mov     edx, [ebp+var_4]
.text:0000917F                 mov     eax, [edx+8]
.text:00009182                 lea     ecx, [eax+ecx+1]
.text:00009186                 mov     [ebp+var_8], ecx
.text:00009189                 xor     ecx, ecx
.text:0000918B                 mov     eax, [ebp+var_8]
.text:0000918E                 mov     edx, 4
.text:00009193                 mul     edx
.text:00009195                 seto    cl
.text:00009198                 neg     ecx
.text:0000919A                 or      ecx, eax
.text:0000919C                 push    ecx             ; unsigned int
.text:0000919D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000091A2                 add     esp, 4
.text:000091A5                 mov     [ebp+var_10], eax
.text:000091A8                 mov     eax, [ebp+var_10]
.text:000091AB                 mov     [ebp+Dst], eax
.text:000091AE                 mov     ecx, [ebp+var_4]
.text:000091B1                 cmp     dword ptr [ecx+4], 0
.text:000091B5                 jz      short loc_91D3
.text:000091B7                 mov     edx, [ebp+var_4]
.text:000091BA                 mov     eax, [edx+4]
.text:000091BD                 shl     eax, 2
.text:000091C0                 push    eax             ; Size
.text:000091C1                 mov     ecx, [ebp+var_4]
.text:000091C4                 mov     edx, [ecx]
.text:000091C6                 push    edx             ; Src
.text:000091C7                 mov     eax, [ebp+Dst]
.text:000091CA                 push    eax             ; Dst
.text:000091CB                 call    _memcpy
.text:000091D0                 add     esp, 0Ch
.text:000091D3
.text:000091D3 loc_91D3:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:000091D3                 mov     ecx, [ebp+var_4]
.text:000091D6                 mov     edx, [ecx]
.text:000091D8                 mov     [ebp+var_14], edx
.text:000091DB                 mov     eax, [ebp+var_14]
.text:000091DE                 push    eax             ; void *
.text:000091DF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000091E4                 add     esp, 4
.text:000091E7                 mov     ecx, [ebp+var_4]
.text:000091EA                 mov     edx, [ebp+Dst]
.text:000091ED                 mov     [ecx], edx
.text:000091EF                 mov     eax, [ebp+var_4]
.text:000091F2                 mov     ecx, [ebp+var_8]
.text:000091F5                 mov     [eax+8], ecx
.text:000091F8
.text:000091F8 loc_91F8:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:000091F8                 add     esp, 14h
.text:000091FB                 cmp     ebp, esp
.text:000091FD                 call    __RTC_CheckEsp
.text:00009202                 mov     esp, ebp
.text:00009204                 pop     ebp
.text:00009205                 retn
.text:00009205 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00009205
.text:00009205 ; ---------------------------------------------------------------------------
.text:00009206                 align 4
.text:00009206 _text           ends
.text:00009206
.text:00009208 ; ===========================================================================
.text:00009208
.text:00009208 ; Segment type: Pure code
.text:00009208 ; Segment permissions: Read/Execute
.text:00009208 _text           segment para public 'CODE' use32
.text:00009208                 assume cs:_text
.text:00009208                 ;org 9208h
.text:00009208 ; COMDAT (pick any)
.text:00009208                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009208
.text:00009208 ; =============== S U B R O U T I N E =======================================
.text:00009208
.text:00009208 ; Attributes: bp-based frame
.text:00009208
.text:00009208 ; public: void __thiscall CRecordVector<unsigned __int64>::Clear(void)
.text:00009208                 public ?Clear@?$CRecordVector@_K@@QAEXXZ
.text:00009208 ?Clear@?$CRecordVector@_K@@QAEXXZ proc near
.text:00009208                                         ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndReserve(uint)+21p
.text:00009208
.text:00009208 var_4           = dword ptr -4
.text:00009208
.text:00009208                 push    ebp
.text:00009209                 mov     ebp, esp
.text:0000920B                 push    ecx
.text:0000920C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009213                 mov     [ebp+var_4], ecx
.text:00009216                 mov     eax, [ebp+var_4]
.text:00009219                 mov     dword ptr [eax+4], 0
.text:00009220                 mov     esp, ebp
.text:00009222                 pop     ebp
.text:00009223                 retn
.text:00009223 ?Clear@?$CRecordVector@_K@@QAEXXZ endp
.text:00009223
.text:00009223 _text           ends
.text:00009223
.text:00009224 ; ===========================================================================
.text:00009224
.text:00009224 ; Segment type: Pure code
.text:00009224 ; Segment permissions: Read/Execute
.text:00009224 _text           segment para public 'CODE' use32
.text:00009224                 assume cs:_text
.text:00009224                 ;org 9224h
.text:00009224 ; COMDAT (pick any)
.text:00009224                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009224
.text:00009224 ; =============== S U B R O U T I N E =======================================
.text:00009224
.text:00009224 ; Attributes: bp-based frame
.text:00009224
.text:00009224 ; public: void __thiscall CRecordVector<unsigned __int64 const *>::Clear(void)
.text:00009224                 public ?Clear@?$CRecordVector@PB_K@@QAEXXZ
.text:00009224 ?Clear@?$CRecordVector@PB_K@@QAEXXZ proc near
.text:00009224                                         ; CODE XREF: CRecordVector<unsigned __int64 const *>::ClearAndReserve(uint)+21p
.text:00009224
.text:00009224 var_4           = dword ptr -4
.text:00009224
.text:00009224                 push    ebp
.text:00009225                 mov     ebp, esp
.text:00009227                 push    ecx
.text:00009228                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000922F                 mov     [ebp+var_4], ecx
.text:00009232                 mov     eax, [ebp+var_4]
.text:00009235                 mov     dword ptr [eax+4], 0
.text:0000923C                 mov     esp, ebp
.text:0000923E                 pop     ebp
.text:0000923F                 retn
.text:0000923F ?Clear@?$CRecordVector@PB_K@@QAEXXZ endp
.text:0000923F
.text:0000923F _text           ends
.text:0000923F
.text:00009240 ; ===========================================================================
.text:00009240
.text:00009240 ; Segment type: Pure code
.text:00009240 ; Segment permissions: Read/Execute
.text:00009240 _text           segment para public 'CODE' use32
.text:00009240                 assume cs:_text
.text:00009240                 ;org 9240h
.text:00009240 ; COMDAT (pick any)
.text:00009240                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009240
.text:00009240 ; =============== S U B R O U T I N E =======================================
.text:00009240
.text:00009240 ; Attributes: bp-based frame
.text:00009240
.text:00009240 ; public: long __thiscall CMyComPtr<struct ISequentialOutStream>::QueryInterface<struct IOutStreamFinish>(struct _GUID const &, struct IOutStreamFinish * *)const
.text:00009240                 public ??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z
.text:00009240 ??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z proc near
.text:00009240                                         ; CODE XREF: COutStreamCalcSize::OutStreamFinish(void)+4Dp
.text:00009240
.text:00009240 var_4           = dword ptr -4
.text:00009240 arg_0           = dword ptr  8
.text:00009240 arg_4           = dword ptr  0Ch
.text:00009240
.text:00009240                 push    ebp
.text:00009241                 mov     ebp, esp
.text:00009243                 push    ecx
.text:00009244                 push    esi
.text:00009245                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000924C                 mov     [ebp+var_4], ecx
.text:0000924F                 mov     esi, esp
.text:00009251                 mov     eax, [ebp+arg_4]
.text:00009254                 push    eax
.text:00009255                 mov     ecx, [ebp+arg_0]
.text:00009258                 push    ecx
.text:00009259                 mov     edx, [ebp+var_4]
.text:0000925C                 mov     eax, [edx]
.text:0000925E                 mov     ecx, [ebp+var_4]
.text:00009261                 mov     edx, [ecx]
.text:00009263                 mov     eax, [eax]
.text:00009265                 push    edx
.text:00009266                 mov     ecx, [eax]
.text:00009268                 call    ecx
.text:0000926A                 cmp     esi, esp
.text:0000926C                 call    __RTC_CheckEsp
.text:00009271                 pop     esi
.text:00009272                 add     esp, 4
.text:00009275                 cmp     ebp, esp
.text:00009277                 call    __RTC_CheckEsp
.text:0000927C                 mov     esp, ebp
.text:0000927E                 pop     ebp
.text:0000927F                 retn    8
.text:0000927F ??$QueryInterface@UIOutStreamFinish@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStreamFinish@@@Z endp
.text:0000927F
.text:0000927F ; ---------------------------------------------------------------------------
.text:00009282                 align 4
.text:00009282 _text           ends
.text:00009282
.text:00009284 ; ===========================================================================
.text:00009284
.text:00009284 ; Segment type: Pure code
.text:00009284 ; Segment permissions: Read/Execute
.text:00009284 _text           segment para public 'CODE' use32
.text:00009284                 assume cs:_text
.text:00009284                 ;org 9284h
.text:00009284 ; COMDAT (pick any)
.text:00009284                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009284
.text:00009284 ; =============== S U B R O U T I N E =======================================
.text:00009284
.text:00009284 ; Attributes: bp-based frame
.text:00009284
.text:00009284 ; public: long __thiscall CMyComPtr<struct ICompressCoder>::QueryInterface<struct ICompressSetOutStream>(struct _GUID const &, struct ICompressSetOutStream * *)const
.text:00009284                 public ??$QueryInterface@UICompressSetOutStream@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetOutStream@@@Z
.text:00009284 ??$QueryInterface@UICompressSetOutStream@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetOutStream@@@Z proc near
.text:00009284                                         ; CODE XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+23Bp
.text:00009284
.text:00009284 var_4           = dword ptr -4
.text:00009284 arg_0           = dword ptr  8
.text:00009284 arg_4           = dword ptr  0Ch
.text:00009284
.text:00009284                 push    ebp
.text:00009285                 mov     ebp, esp
.text:00009287                 push    ecx
.text:00009288                 push    esi
.text:00009289                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009290                 mov     [ebp+var_4], ecx
.text:00009293                 mov     esi, esp
.text:00009295                 mov     eax, [ebp+arg_4]
.text:00009298                 push    eax
.text:00009299                 mov     ecx, [ebp+arg_0]
.text:0000929C                 push    ecx
.text:0000929D                 mov     edx, [ebp+var_4]
.text:000092A0                 mov     eax, [edx]
.text:000092A2                 mov     ecx, [ebp+var_4]
.text:000092A5                 mov     edx, [ecx]
.text:000092A7                 mov     eax, [eax]
.text:000092A9                 push    edx
.text:000092AA                 mov     ecx, [eax]
.text:000092AC                 call    ecx
.text:000092AE                 cmp     esi, esp
.text:000092B0                 call    __RTC_CheckEsp
.text:000092B5                 pop     esi
.text:000092B6                 add     esp, 4
.text:000092B9                 cmp     ebp, esp
.text:000092BB                 call    __RTC_CheckEsp
.text:000092C0                 mov     esp, ebp
.text:000092C2                 pop     ebp
.text:000092C3                 retn    8
.text:000092C3 ??$QueryInterface@UICompressSetOutStream@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetOutStream@@@Z endp
.text:000092C3
.text:000092C3 ; ---------------------------------------------------------------------------
.text:000092C6                 align 4
.text:000092C6 _text           ends
.text:000092C6
.text:000092C8 ; ===========================================================================
.text:000092C8
.text:000092C8 ; Segment type: Pure code
.text:000092C8 ; Segment permissions: Read/Execute
.text:000092C8 _text           segment para public 'CODE' use32
.text:000092C8                 assume cs:_text
.text:000092C8                 ;org 92C8h
.text:000092C8 ; COMDAT (pick any)
.text:000092C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000092C8
.text:000092C8 ; =============== S U B R O U T I N E =======================================
.text:000092C8
.text:000092C8
.text:000092C8 ; [thunk]:public: virtual unsigned long __stdcall COutStreamCalcSize::Release`adjustor{4}' (void)
.text:000092C8                 public ?Release@COutStreamCalcSize@@W3AGKXZ
.text:000092C8 ?Release@COutStreamCalcSize@@W3AGKXZ proc near ; DATA XREF: .rdata:00005154o
.text:000092C8
.text:000092C8 arg_0           = dword ptr  4
.text:000092C8
.text:000092C8                 sub     [esp+arg_0], 4
.text:000092CD                 jmp     ?Release@COutStreamCalcSize@@UAGKXZ ; COutStreamCalcSize::Release(void)
.text:000092CD ?Release@COutStreamCalcSize@@W3AGKXZ endp
.text:000092CD
.text:000092CD ; ---------------------------------------------------------------------------
.text:000092D2                 align 4
.text:000092D2 _text           ends
.text:000092D2
.text:000092D4 ; ===========================================================================
.text:000092D4
.text:000092D4 ; Segment type: Pure code
.text:000092D4 ; Segment permissions: Read/Execute
.text:000092D4 _text           segment para public 'CODE' use32
.text:000092D4                 assume cs:_text
.text:000092D4                 ;org 92D4h
.text:000092D4 ; COMDAT (pick any)
.text:000092D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000092D4
.text:000092D4 ; =============== S U B R O U T I N E =======================================
.text:000092D4
.text:000092D4
.text:000092D4 ; [thunk]:public: virtual unsigned long __stdcall COutStreamCalcSize::AddRef`adjustor{4}' (void)
.text:000092D4                 public ?AddRef@COutStreamCalcSize@@W3AGKXZ
.text:000092D4 ?AddRef@COutStreamCalcSize@@W3AGKXZ proc near ; DATA XREF: .rdata:00005150o
.text:000092D4
.text:000092D4 arg_0           = dword ptr  4
.text:000092D4
.text:000092D4                 sub     [esp+arg_0], 4
.text:000092D9                 jmp     ?AddRef@COutStreamCalcSize@@UAGKXZ ; COutStreamCalcSize::AddRef(void)
.text:000092D9 ?AddRef@COutStreamCalcSize@@W3AGKXZ endp
.text:000092D9
.text:000092D9 ; ---------------------------------------------------------------------------
.text:000092DE                 align 10h
.text:000092DE _text           ends
.text:000092DE
.text:000092E0 ; ===========================================================================
.text:000092E0
.text:000092E0 ; Segment type: Pure code
.text:000092E0 ; Segment permissions: Read/Execute
.text:000092E0 _text           segment para public 'CODE' use32
.text:000092E0                 assume cs:_text
.text:000092E0                 ;org 92E0h
.text:000092E0 ; COMDAT (pick any)
.text:000092E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000092E0
.text:000092E0 ; =============== S U B R O U T I N E =======================================
.text:000092E0
.text:000092E0
.text:000092E0 ; [thunk]:public: virtual long __stdcall COutStreamCalcSize::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000092E0                 public ?QueryInterface@COutStreamCalcSize@@W3AGJABU_GUID@@PAPAX@Z
.text:000092E0 ?QueryInterface@COutStreamCalcSize@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000092E0                                         ; DATA XREF: .rdata:const COutStreamCalcSize::`vftable'{for `IOutStreamFinish'}o
.text:000092E0
.text:000092E0 arg_0           = dword ptr  4
.text:000092E0
.text:000092E0                 sub     [esp+arg_0], 4
.text:000092E5                 jmp     ?QueryInterface@COutStreamCalcSize@@UAGJABU_GUID@@PAPAX@Z ; COutStreamCalcSize::QueryInterface(_GUID const &,void * *)
.text:000092E5 ?QueryInterface@COutStreamCalcSize@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000092E5
.text:000092E5 _text           ends
.text:000092E5
UNDEF:000092F0 ; ===========================================================================
UNDEF:000092F0
UNDEF:000092F0 ; Segment type: Externs
UNDEF:000092F0 ; UNDEF
UNDEF:000092F0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000092F0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000092F0                                         ; CODE XREF: CSequentialInStreamCalcSize::Read(void *,uint,uint *)+B1p
UNDEF:000092F0                                         ; COutStreamCalcSize::OutStreamFinish(void)+98p ...
UNDEF:000092F4                 extrn __RTC_CheckEsp:near
UNDEF:000092F4                                         ; CODE XREF: CSequentialInStreamCalcSize::Read(void *,uint,uint *)+64p
UNDEF:000092F4                                         ; CSequentialInStreamCalcSize::Read(void *,uint,uint *)+BEp ...
UNDEF:000092F8                 extrn __RTC_Shutdown:near
UNDEF:000092F8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000092FC                 extrn __RTC_InitBase:near
UNDEF:000092FC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00009300 ; struct _GUID IID_IOutStreamFinish
UNDEF:00009300                 extrn _IID_IOutStreamFinish:near
UNDEF:00009300                                         ; DATA XREF: COutStreamCalcSize::OutStreamFinish(void)+42o
UNDEF:00009300                                         ; NCoderMixer2::CMixerST::FinishStream(uint)+11Eo ...
UNDEF:00009304                 extrn ___security_cookie:near
UNDEF:00009304                                         ; DATA XREF: NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)+27r
UNDEF:00009304                                         ; NCoderMixer2::CMixerST::CMixerST(bool)+19r ...
UNDEF:00009308                 extrn ___CxxFrameHandler3:near
UNDEF:00009308                                         ; CODE XREF: __ehhandler$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ+16j
UNDEF:00009308                                         ; __ehhandler$??0CMixerST@NCoderMixer2@@QAE@_N@Z+16j ...
UNDEF:0000930C ; __fastcall __security_check_cookie(x)
UNDEF:0000930C                 extrn @__security_check_cookie@4:near
UNDEF:0000930C                                         ; CODE XREF: __ehhandler$?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ+Cp
UNDEF:0000930C                                         ; __ehhandler$??0CMixerST@NCoderMixer2@@QAE@_N@Z+Cp ...
UNDEF:00009310 ; __stdcall _CxxThrowException(x, x)
UNDEF:00009310                 extrn __CxxThrowException@8:near
UNDEF:00009310                                         ; CODE XREF: NCoderMixer2::CMixer::Is_UnpackSize_Correct_for_Coder(uint)+51p
UNDEF:00009310                                         ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Stream(uint)+5Cp ...
UNDEF:00009314 ; const type_info::`vftable'
UNDEF:00009314                 extrn ??_7type_info@@6B@:near
UNDEF:00009314                                         ; DATA XREF: .data:int `RTTI Type Descriptor'o
UNDEF:00009314                                         ; .data:NCoderMixer2::CMixerST `RTTI Type Descriptor'o ...
UNDEF:00009318                 extrn __purecall:near   ; DATA XREF: .rdata:00004554o
UNDEF:00009318                                         ; .rdata:00004558o ...
UNDEF:0000931C ; const IID IID_IUnknown
UNDEF:0000931C                 extrn _IID_IUnknown:near
UNDEF:0000931C                                         ; DATA XREF: NCoderMixer2::CMixerST::QueryInterface(_GUID const &,void * *)+Co
UNDEF:0000931C                                         ; CSequentialInStreamCalcSize::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:00009320 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00009320                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00009324 ; void __cdecl operator delete(void *)
UNDEF:00009324                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?GetInStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialInStream@@IPAPAU3@@Z$1+4p
UNDEF:00009324                                         ; __unwindfunclet$?GetOutStream@CMixerST@NCoderMixer2@@AAEJPBQAUISequentialOutStream@@IPAPAU3@@Z$3+7p ...
UNDEF:00009328 ; struct _GUID IID_ISequentialOutStream
UNDEF:00009328                 extrn _IID_ISequentialOutStream:near
UNDEF:00009328                                         ; DATA XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+136o
UNDEF:00009328                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+16Eo ...
UNDEF:0000932C ; struct _GUID IID_ISequentialInStream
UNDEF:0000932C                 extrn _IID_ISequentialInStream:near
UNDEF:0000932C                                         ; DATA XREF: NCoderMixer2::CMixerST::AddCoder(CCreatedCoder const &)+E0o
UNDEF:0000932C                                         ; NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+AAo ...
UNDEF:00009330 ; struct _GUID IID_ICompressSetInStream2
UNDEF:00009330                 extrn _IID_ICompressSetInStream2:near
UNDEF:00009330                                         ; DATA XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+2B4o
UNDEF:00009334 ; struct _GUID IID_ICompressSetInStream
UNDEF:00009334                 extrn _IID_ICompressSetInStream:near
UNDEF:00009334                                         ; DATA XREF: NCoderMixer2::CMixerST::GetInStream2(ISequentialInStream * const *,uint,ISequentialInStream * *)+16Fo
UNDEF:00009338 ; void *__cdecl operator new(unsigned int)
UNDEF:00009338                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NCoderMixer2::CMixerST::GetInStream(ISequentialInStream * const *,uint,ISequentialInStream * *)+1BCp
UNDEF:00009338                                         ; NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+3ECp ...
UNDEF:0000933C                 extrn _IID_ICompressSetOutStream:near
UNDEF:0000933C                                         ; DATA XREF: NCoderMixer2::CMixerST::GetOutStream(ISequentialOutStream * const *,uint,ISequentialOutStream * *)+233o
UNDEF:00009340 ; struct _GUID IID_ICompressSetOutStreamSize
UNDEF:00009340                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00009340                                         ; DATA XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+48Eo
UNDEF:00009340                                         ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)+D9o
UNDEF:00009344 ; struct _GUID IID_ICompressInitEncoder
UNDEF:00009344                 extrn _IID_ICompressInitEncoder:near
UNDEF:00009344                                         ; DATA XREF: NCoderMixer2::CMixerST::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+3A0o
UNDEF:00009348 ; unsigned int __thiscall CStreamBinder::CreateEvents(CStreamBinder *__hidden this)
UNDEF:00009348                 extrn ?CreateEvents@CStreamBinder@@QAEIXZ:near
UNDEF:00009348                                         ; CODE XREF: NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)+64p
UNDEF:0000934C ; void __thiscall CStreamBinder::ReInit(CStreamBinder *__hidden this)
UNDEF:0000934C                 extrn ?ReInit@CStreamBinder@@QAEXXZ:near
UNDEF:0000934C                                         ; CODE XREF: NCoderMixer2::CMixerMT::ReInit(void)+4Ap
UNDEF:00009350 ; struct _GUID IID_ICompressSetBufSize
UNDEF:00009350                 extrn _IID_ICompressSetBufSize:near
UNDEF:00009350                                         ; DATA XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+2C7o
UNDEF:00009350                                         ; NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+2EEo
UNDEF:00009354 ; void __thiscall CStreamBinder::CreateStreams(CStreamBinder *__hidden this, struct ISequentialInStream **, struct ISequentialOutStream **)
UNDEF:00009354                 extrn ?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z:near
UNDEF:00009354                                         ; CODE XREF: NCoderMixer2::CMixerMT::Init(ISequentialInStream * const *,ISequentialOutStream * const *)+29Ep
UNDEF:00009358 ; void __thiscall CVirtThread::Start(CVirtThread *__hidden this)
UNDEF:00009358                 extrn ?Start@CVirtThread@@QAEXXZ:near
UNDEF:00009358                                         ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+CDp
UNDEF:0000935C ; unsigned int __thiscall CVirtThread::Create(CVirtThread *__hidden this)
UNDEF:0000935C                 extrn ?Create@CVirtThread@@QAEIXZ:near
UNDEF:0000935C                                         ; CODE XREF: NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)+77p
UNDEF:00009360 ; __stdcall Handle_WaitObject(x)
UNDEF:00009360                 extrn _Handle_WaitObject@4:near
UNDEF:00009360                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Lock(void)+14p
UNDEF:00009364 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00009364                 extrn _memcpy:near      ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+C3p
UNDEF:00009364                                         ; CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+C3p ...
UNDEF:00009368 ; void __thiscall CVirtThread::WaitThreadFinish(CVirtThread *__hidden this)
UNDEF:00009368                 extrn ?WaitThreadFinish@CVirtThread@@QAEXXZ:near
UNDEF:00009368                                         ; CODE XREF: CVirtThread::~CVirtThread(void)+40p
UNDEF:0000936C ; __stdcall HandlePtr_Close(x)
UNDEF:0000936C                 extrn _HandlePtr_Close@4:near
UNDEF:0000936C                                         ; CODE XREF: NWindows::CThread::Close(void)+12p
UNDEF:0000936C                                         ; NWindows::NSynchronization::CBaseEvent::Close(void)+12p
UNDEF:0000936C
UNDEF:0000936C