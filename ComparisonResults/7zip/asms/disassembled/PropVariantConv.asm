.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : EF34DA3E4A505CBF240C5F16DB063F9B
.text:00000000 ; Input CRC32 : AE293DD4
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\PropVariantConv.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; bool __stdcall ConvertFileTimeToString(FILETIME *lpFileTime, char *, bool, bool)
.text:00000000                 public ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z
.text:00000000 ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z proc near
.text:00000000                                         ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool)+32p
.text:00000000                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+B5p
.text:00000000
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 SystemTime      = _SYSTEMTIME ptr -18h
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 lpFileTime      = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = byte ptr  10h
.text:00000000 arg_C           = byte ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 20h
.text:00000006                 push    esi
.text:00000007                 mov     eax, 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_20], eax
.text:0000000F                 mov     [ebp+var_1C], eax
.text:00000012                 mov     dword ptr [ebp+SystemTime.wYear], eax
.text:00000015                 mov     dword ptr [ebp+SystemTime.wDayOfWeek], eax
.text:00000018                 mov     dword ptr [ebp+SystemTime.wHour], eax
.text:0000001B                 mov     dword ptr [ebp+SystemTime.wSecond], eax
.text:0000001E                 mov     [ebp+var_8], eax
.text:00000021                 mov     [ebp+var_4], eax
.text:00000024                 mov     eax, dword ptr ds:___security_cookie
.text:00000029                 xor     eax, ebp
.text:0000002B                 mov     [ebp+var_4], eax
.text:0000002E                 mov     esi, esp
.text:00000030                 lea     eax, [ebp+SystemTime]
.text:00000033                 push    eax             ; lpSystemTime
.text:00000034                 mov     ecx, [ebp+lpFileTime]
.text:00000037                 push    ecx             ; lpFileTime
.text:00000038                 call    dword ptr ds:__imp__FileTimeToSystemTime@8 ; FileTimeToSystemTime(x,x)
.text:0000003E                 cmp     esi, esp
.text:00000040                 call    __RTC_CheckEsp
.text:00000045                 push    eax             ; int
.text:00000046                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:0000004B                 movzx   edx, al
.text:0000004E                 test    edx, edx
.text:00000050                 jnz     short loc_5F
.text:00000052                 mov     eax, [ebp+arg_4]
.text:00000055                 mov     byte ptr [eax], 0
.text:00000058                 xor     al, al
.text:0000005A                 jmp     loc_24E
.text:0000005F ; ---------------------------------------------------------------------------
.text:0000005F
.text:0000005F loc_5F:                                 ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+50j
.text:0000005F                 movzx   ecx, [ebp+SystemTime.wYear]
.text:00000063                 mov     [ebp+var_20], ecx
.text:00000066                 cmp     [ebp+var_20], 2710h
.text:0000006D                 jb      short loc_9B
.text:0000006F                 mov     eax, [ebp+var_20]
.text:00000072                 xor     edx, edx
.text:00000074                 mov     ecx, 2710h
.text:00000079                 div     ecx
.text:0000007B                 add     eax, 30h ; '0'
.text:0000007E                 mov     edx, [ebp+arg_4]
.text:00000081                 mov     [edx], al
.text:00000083                 mov     eax, [ebp+arg_4]
.text:00000086                 add     eax, 1
.text:00000089                 mov     [ebp+arg_4], eax
.text:0000008C                 mov     eax, [ebp+var_20]
.text:0000008F                 xor     edx, edx
.text:00000091                 mov     ecx, 2710h
.text:00000096                 div     ecx
.text:00000098                 mov     [ebp+var_20], edx
.text:0000009B
.text:0000009B loc_9B:                                 ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+6Dj
.text:0000009B                 mov     eax, [ebp+var_20]
.text:0000009E                 xor     edx, edx
.text:000000A0                 mov     ecx, 0Ah
.text:000000A5                 div     ecx
.text:000000A7                 add     edx, 30h ; '0'
.text:000000AA                 mov     eax, [ebp+arg_4]
.text:000000AD                 mov     [eax+3], dl
.text:000000B0                 mov     eax, [ebp+var_20]
.text:000000B3                 xor     edx, edx
.text:000000B5                 mov     ecx, 0Ah
.text:000000BA                 div     ecx
.text:000000BC                 mov     [ebp+var_20], eax
.text:000000BF                 mov     eax, [ebp+var_20]
.text:000000C2                 xor     edx, edx
.text:000000C4                 mov     ecx, 0Ah
.text:000000C9                 div     ecx
.text:000000CB                 add     edx, 30h ; '0'
.text:000000CE                 mov     eax, [ebp+arg_4]
.text:000000D1                 mov     [eax+2], dl
.text:000000D4                 mov     eax, [ebp+var_20]
.text:000000D7                 xor     edx, edx
.text:000000D9                 mov     ecx, 0Ah
.text:000000DE                 div     ecx
.text:000000E0                 mov     [ebp+var_20], eax
.text:000000E3                 mov     eax, [ebp+var_20]
.text:000000E6                 xor     edx, edx
.text:000000E8                 mov     ecx, 0Ah
.text:000000ED                 div     ecx
.text:000000EF                 add     edx, 30h ; '0'
.text:000000F2                 mov     eax, [ebp+arg_4]
.text:000000F5                 mov     [eax+1], dl
.text:000000F8                 mov     eax, [ebp+var_20]
.text:000000FB                 xor     edx, edx
.text:000000FD                 mov     ecx, 0Ah
.text:00000102                 div     ecx
.text:00000104                 add     eax, 30h ; '0'
.text:00000107                 mov     edx, [ebp+arg_4]
.text:0000010A                 mov     [edx], al
.text:0000010C                 mov     eax, [ebp+arg_4]
.text:0000010F                 add     eax, 4
.text:00000112                 mov     [ebp+arg_4], eax
.text:00000115                 mov     ecx, [ebp+arg_4]
.text:00000118                 mov     byte ptr [ecx], 2Dh ; '-'
.text:0000011B                 movzx   eax, [ebp+SystemTime.wMonth]
.text:0000011F                 cdq
.text:00000120                 mov     ecx, 0Ah
.text:00000125                 idiv    ecx
.text:00000127                 add     eax, 30h ; '0'
.text:0000012A                 mov     edx, [ebp+arg_4]
.text:0000012D                 mov     [edx+1], al
.text:00000130                 movzx   eax, [ebp+SystemTime.wMonth]
.text:00000134                 cdq
.text:00000135                 mov     ecx, 0Ah
.text:0000013A                 idiv    ecx
.text:0000013C                 add     edx, 30h ; '0'
.text:0000013F                 mov     eax, [ebp+arg_4]
.text:00000142                 mov     [eax+2], dl
.text:00000145                 mov     ecx, [ebp+arg_4]
.text:00000148                 add     ecx, 3
.text:0000014B                 mov     [ebp+arg_4], ecx
.text:0000014E                 mov     edx, [ebp+arg_4]
.text:00000151                 mov     byte ptr [edx], 2Dh ; '-'
.text:00000154                 movzx   eax, [ebp+SystemTime.wDay]
.text:00000158                 cdq
.text:00000159                 mov     ecx, 0Ah
.text:0000015E                 idiv    ecx
.text:00000160                 add     eax, 30h ; '0'
.text:00000163                 mov     edx, [ebp+arg_4]
.text:00000166                 mov     [edx+1], al
.text:00000169                 movzx   eax, [ebp+SystemTime.wDay]
.text:0000016D                 cdq
.text:0000016E                 mov     ecx, 0Ah
.text:00000173                 idiv    ecx
.text:00000175                 add     edx, 30h ; '0'
.text:00000178                 mov     eax, [ebp+arg_4]
.text:0000017B                 mov     [eax+2], dl
.text:0000017E                 mov     ecx, [ebp+arg_4]
.text:00000181                 add     ecx, 3
.text:00000184                 mov     [ebp+arg_4], ecx
.text:00000187                 movzx   edx, [ebp+arg_8]
.text:0000018B                 test    edx, edx
.text:0000018D                 jz      loc_246
.text:00000193                 mov     eax, [ebp+arg_4]
.text:00000196                 mov     byte ptr [eax], 20h ; ' '
.text:00000199                 movzx   eax, [ebp+SystemTime.wHour]
.text:0000019D                 cdq
.text:0000019E                 mov     ecx, 0Ah
.text:000001A3                 idiv    ecx
.text:000001A5                 add     eax, 30h ; '0'
.text:000001A8                 mov     edx, [ebp+arg_4]
.text:000001AB                 mov     [edx+1], al
.text:000001AE                 movzx   eax, [ebp+SystemTime.wHour]
.text:000001B2                 cdq
.text:000001B3                 mov     ecx, 0Ah
.text:000001B8                 idiv    ecx
.text:000001BA                 add     edx, 30h ; '0'
.text:000001BD                 mov     eax, [ebp+arg_4]
.text:000001C0                 mov     [eax+2], dl
.text:000001C3                 mov     ecx, [ebp+arg_4]
.text:000001C6                 add     ecx, 3
.text:000001C9                 mov     [ebp+arg_4], ecx
.text:000001CC                 mov     edx, [ebp+arg_4]
.text:000001CF                 mov     byte ptr [edx], 3Ah ; ':'
.text:000001D2                 movzx   eax, [ebp+SystemTime.wMinute]
.text:000001D6                 cdq
.text:000001D7                 mov     ecx, 0Ah
.text:000001DC                 idiv    ecx
.text:000001DE                 add     eax, 30h ; '0'
.text:000001E1                 mov     edx, [ebp+arg_4]
.text:000001E4                 mov     [edx+1], al
.text:000001E7                 movzx   eax, [ebp+SystemTime.wMinute]
.text:000001EB                 cdq
.text:000001EC                 mov     ecx, 0Ah
.text:000001F1                 idiv    ecx
.text:000001F3                 add     edx, 30h ; '0'
.text:000001F6                 mov     eax, [ebp+arg_4]
.text:000001F9                 mov     [eax+2], dl
.text:000001FC                 mov     ecx, [ebp+arg_4]
.text:000001FF                 add     ecx, 3
.text:00000202                 mov     [ebp+arg_4], ecx
.text:00000205                 movzx   edx, [ebp+arg_C]
.text:00000209                 test    edx, edx
.text:0000020B                 jz      short loc_246
.text:0000020D                 mov     eax, [ebp+arg_4]
.text:00000210                 mov     byte ptr [eax], 3Ah ; ':'
.text:00000213                 movzx   eax, [ebp+SystemTime.wSecond]
.text:00000217                 cdq
.text:00000218                 mov     ecx, 0Ah
.text:0000021D                 idiv    ecx
.text:0000021F                 add     eax, 30h ; '0'
.text:00000222                 mov     edx, [ebp+arg_4]
.text:00000225                 mov     [edx+1], al
.text:00000228                 movzx   eax, [ebp+SystemTime.wSecond]
.text:0000022C                 cdq
.text:0000022D                 mov     ecx, 0Ah
.text:00000232                 idiv    ecx
.text:00000234                 add     edx, 30h ; '0'
.text:00000237                 mov     eax, [ebp+arg_4]
.text:0000023A                 mov     [eax+2], dl
.text:0000023D                 mov     ecx, [ebp+arg_4]
.text:00000240                 add     ecx, 3
.text:00000243                 mov     [ebp+arg_4], ecx
.text:00000246
.text:00000246 loc_246:                                ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+18Dj
.text:00000246                                         ; ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+20Bj
.text:00000246                 mov     edx, [ebp+arg_4]
.text:00000249                 mov     byte ptr [edx], 0
.text:0000024C                 mov     al, 1
.text:0000024E
.text:0000024E loc_24E:                                ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+5Aj
.text:0000024E                 push    edx
.text:0000024F                 mov     ecx, ebp
.text:00000251                 push    eax
.text:00000252                 lea     edx, $LN9
.text:00000258                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000025D                 pop     eax
.text:0000025E                 pop     edx
.text:0000025F                 pop     esi
.text:00000260                 mov     ecx, [ebp+var_4]
.text:00000263                 xor     ecx, ebp
.text:00000265                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000026A                 add     esp, 20h
.text:0000026D                 cmp     ebp, esp
.text:0000026F                 call    __RTC_CheckEsp
.text:00000274                 mov     esp, ebp
.text:00000276                 pop     ebp
.text:00000277                 retn    10h
.text:00000277 ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z endp
.text:00000277
.text:00000277 ; ---------------------------------------------------------------------------
.text:0000027A                 align 4
.text:0000027C $LN9            dd 1                    ; DATA XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+252o
.text:00000280                 dd offset $LN8
.text:00000284 $LN8            dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00000280o
.text:0000028C                 dd offset $LN7
.text:00000290 $LN7            dd 0CC007473h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:0000028Co
.text:000002A0
.text:000002A0 ; =============== S U B R O U T I N E =======================================
.text:000002A0
.text:000002A0 ; Attributes: bp-based frame
.text:000002A0
.text:000002A0 ; void __stdcall ConvertFileTimeToString(FILETIME *lpFileTime, wchar_t *, bool, bool)
.text:000002A0                 public ?ConvertFileTimeToString@@YGXABU_FILETIME@@PA_W_N2@Z
.text:000002A0 ?ConvertFileTimeToString@@YGXABU_FILETIME@@PA_W_N2@Z proc near
.text:000002A0                                         ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+BEp
.text:000002A0
.text:000002A0 var_34          = byte ptr -34h
.text:000002A0 var_31          = byte ptr -31h
.text:000002A0 var_30          = dword ptr -30h
.text:000002A0 var_28          = byte ptr -28h
.text:000002A0 var_4           = dword ptr -4
.text:000002A0 lpFileTime      = dword ptr  8
.text:000002A0 arg_4           = dword ptr  0Ch
.text:000002A0 arg_8           = byte ptr  10h
.text:000002A0 arg_C           = byte ptr  14h
.text:000002A0
.text:000002A0                 push    ebp
.text:000002A1                 mov     ebp, esp
.text:000002A3                 sub     esp, 34h
.text:000002A6                 push    edi
.text:000002A7                 lea     edi, [ebp+var_34]
.text:000002AA                 mov     ecx, 0Dh
.text:000002AF                 mov     eax, 0CCCCCCCCh
.text:000002B4                 rep stosd
.text:000002B6                 mov     eax, dword ptr ds:___security_cookie
.text:000002BB                 xor     eax, ebp
.text:000002BD                 mov     [ebp+var_4], eax
.text:000002C0                 movzx   eax, [ebp+arg_C]
.text:000002C4                 push    eax             ; bool
.text:000002C5                 movzx   ecx, [ebp+arg_8]
.text:000002C9                 push    ecx             ; bool
.text:000002CA                 lea     edx, [ebp+var_28]
.text:000002CD                 push    edx             ; char *
.text:000002CE                 mov     eax, [ebp+lpFileTime]
.text:000002D1                 push    eax             ; lpFileTime
.text:000002D2                 call    ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ; ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)
.text:000002D7                 mov     [ebp+var_30], 0
.text:000002DE                 jmp     short loc_2E9
.text:000002E0 ; ---------------------------------------------------------------------------
.text:000002E0
.text:000002E0 loc_2E0:                                ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool):loc_30Cj
.text:000002E0                 mov     ecx, [ebp+var_30]
.text:000002E3                 add     ecx, 1
.text:000002E6                 mov     [ebp+var_30], ecx
.text:000002E9
.text:000002E9 loc_2E9:                                ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool)+3Ej
.text:000002E9                 mov     edx, [ebp+var_30]
.text:000002EC                 mov     al, [ebp+edx+var_28]
.text:000002F0                 mov     [ebp+var_31], al
.text:000002F3                 movzx   cx, [ebp+var_31]
.text:000002F8                 mov     edx, [ebp+var_30]
.text:000002FB                 mov     eax, [ebp+arg_4]
.text:000002FE                 mov     [eax+edx*2], cx
.text:00000302                 movzx   ecx, [ebp+var_31]
.text:00000306                 test    ecx, ecx
.text:00000308                 jnz     short loc_30C
.text:0000030A                 jmp     short loc_30E
.text:0000030C ; ---------------------------------------------------------------------------
.text:0000030C
.text:0000030C loc_30C:                                ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool)+68j
.text:0000030C                 jmp     short loc_2E0
.text:0000030E ; ---------------------------------------------------------------------------
.text:0000030E
.text:0000030E loc_30E:                                ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool)+6Aj
.text:0000030E                 push    edx
.text:0000030F                 mov     ecx, ebp
.text:00000311                 push    eax
.text:00000312                 lea     edx, $LN9_0
.text:00000318                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000031D                 pop     eax
.text:0000031E                 pop     edx
.text:0000031F                 pop     edi
.text:00000320                 mov     ecx, [ebp+var_4]
.text:00000323                 xor     ecx, ebp
.text:00000325                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000032A                 add     esp, 34h
.text:0000032D                 cmp     ebp, esp
.text:0000032F                 call    __RTC_CheckEsp
.text:00000334                 mov     esp, ebp
.text:00000336                 pop     ebp
.text:00000337                 retn    10h
.text:00000337 ?ConvertFileTimeToString@@YGXABU_FILETIME@@PA_W_N2@Z endp
.text:00000337
.text:00000337 ; ---------------------------------------------------------------------------
.text:0000033A                 align 4
.text:0000033C $LN9_0          dd 1                    ; DATA XREF: ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool)+72o
.text:00000340                 dd offset $LN8_0
.text:00000344 $LN8_0          dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:00000340o
.text:0000034C                 dd offset $LN7_0
.text:00000350 $LN7_0          dd 0CCCC0073h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:0000034Co
.text:00000360
.text:00000360 ; =============== S U B R O U T I N E =======================================
.text:00000360
.text:00000360 ; Attributes: bp-based frame
.text:00000360
.text:00000360 ; void __stdcall ConvertPropVariantToShortString(const struct tagPROPVARIANT *, char *)
.text:00000360                 public ?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z
.text:00000360 ?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z proc near
.text:00000360
.text:00000360 var_4           = dword ptr -4
.text:00000360 arg_0           = dword ptr  8
.text:00000360 arg_4           = dword ptr  0Ch
.text:00000360
.text:00000360                 push    ebp
.text:00000361                 mov     ebp, esp
.text:00000363                 push    ecx
.text:00000364                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000036B                 mov     eax, [ebp+arg_4]
.text:0000036E                 mov     byte ptr [eax], 0
.text:00000371                 mov     ecx, [ebp+arg_0]
.text:00000374                 movzx   edx, word ptr [ecx]
.text:00000377                 mov     [ebp+var_4], edx
.text:0000037A                 cmp     [ebp+var_4], 40h ; '@' ; switch 65 cases
.text:0000037E                 ja      $LN1            ; jumptable 0000038E default case
.text:00000384                 mov     eax, [ebp+var_4]
.text:00000387                 movzx   ecx, ds:$LN17[eax]
.text:0000038E                 jmp     ds:$LN18[ecx*4] ; switch jump
.text:00000395 ; ---------------------------------------------------------------------------
.text:00000395
.text:00000395 $LN12:                                  ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:00000395                                         ; DATA XREF: .text:$LN18o
.text:00000395                 jmp     loc_4A7         ; jumptable 0000038E case 0
.text:0000039A ; ---------------------------------------------------------------------------
.text:0000039A
.text:0000039A $LN11:                                  ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:0000039A                                         ; DATA XREF: .text:$LN18o
.text:0000039A                 mov     edx, [ebp+arg_4] ; jumptable 0000038E case 8
.text:0000039D                 mov     byte ptr [edx], 3Fh ; '?'
.text:000003A0                 mov     eax, [ebp+arg_4]
.text:000003A3                 mov     byte ptr [eax+1], 0
.text:000003A7                 jmp     loc_4A7
.text:000003AC ; ---------------------------------------------------------------------------
.text:000003AC
.text:000003AC $LN10:                                  ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:000003AC                                         ; DATA XREF: .text:$LN18o
.text:000003AC                 mov     ecx, [ebp+arg_4] ; jumptable 0000038E case 17
.text:000003AF                 push    ecx             ; char *
.text:000003B0                 mov     edx, [ebp+arg_0]
.text:000003B3                 movzx   eax, byte ptr [edx+8]
.text:000003B7                 push    eax             ; unsigned int
.text:000003B8                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000003BD                 jmp     loc_4A7
.text:000003C2 ; ---------------------------------------------------------------------------
.text:000003C2
.text:000003C2 $LN9_1:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:000003C2                                         ; DATA XREF: .text:$LN18o
.text:000003C2                 mov     ecx, [ebp+arg_4] ; jumptable 0000038E case 18
.text:000003C5                 push    ecx             ; char *
.text:000003C6                 mov     edx, [ebp+arg_0]
.text:000003C9                 movzx   eax, word ptr [edx+8]
.text:000003CD                 push    eax             ; unsigned int
.text:000003CE                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000003D3                 jmp     loc_4A7
.text:000003D8 ; ---------------------------------------------------------------------------
.text:000003D8
.text:000003D8 $LN8_1:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:000003D8                                         ; DATA XREF: .text:$LN18o
.text:000003D8                 mov     ecx, [ebp+arg_4] ; jumptable 0000038E case 19
.text:000003DB                 push    ecx             ; char *
.text:000003DC                 mov     edx, [ebp+arg_0]
.text:000003DF                 mov     eax, [edx+8]
.text:000003E2                 push    eax             ; unsigned int
.text:000003E3                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000003E8                 jmp     loc_4A7
.text:000003ED ; ---------------------------------------------------------------------------
.text:000003ED
.text:000003ED $LN7_1:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:000003ED                                         ; DATA XREF: .text:$LN18o
.text:000003ED                 mov     ecx, [ebp+arg_4] ; jumptable 0000038E case 21
.text:000003F0                 push    ecx             ; char *
.text:000003F1                 mov     edx, [ebp+arg_0]
.text:000003F4                 mov     eax, [edx+0Ch]
.text:000003F7                 push    eax
.text:000003F8                 mov     ecx, [edx+8]
.text:000003FB                 push    ecx             ; unsigned __int64
.text:000003FC                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00000401                 jmp     loc_4A7
.text:00000406 ; ---------------------------------------------------------------------------
.text:00000406
.text:00000406 $LN6:                                   ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:00000406                                         ; DATA XREF: .text:$LN18o
.text:00000406                 push    1               ; jumptable 0000038E case 64
.text:00000408                 push    1               ; bool
.text:0000040A                 mov     edx, [ebp+arg_4]
.text:0000040D                 push    edx             ; char *
.text:0000040E                 mov     eax, [ebp+arg_0]
.text:00000411                 add     eax, 8
.text:00000414                 push    eax             ; lpFileTime
.text:00000415                 call    ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ; ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)
.text:0000041A                 jmp     loc_4A7
.text:0000041F ; ---------------------------------------------------------------------------
.text:0000041F
.text:0000041F $LN5:                                   ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:0000041F                                         ; DATA XREF: .text:$LN18o
.text:0000041F                 mov     ecx, [ebp+arg_4] ; jumptable 0000038E case 2
.text:00000422                 push    ecx             ; char *
.text:00000423                 mov     edx, [ebp+arg_0]
.text:00000426                 movsx   eax, word ptr [edx+8]
.text:0000042A                 cdq
.text:0000042B                 push    edx
.text:0000042C                 push    eax             ; __int64
.text:0000042D                 call    ?ConvertInt64ToString@@YGX_JPAD@Z ; ConvertInt64ToString(__int64,char *)
.text:00000432                 jmp     short loc_4A7
.text:00000434 ; ---------------------------------------------------------------------------
.text:00000434
.text:00000434 $LN4:                                   ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:00000434                                         ; DATA XREF: .text:$LN18o
.text:00000434                 mov     eax, [ebp+arg_4] ; jumptable 0000038E case 3
.text:00000437                 push    eax             ; char *
.text:00000438                 mov     ecx, [ebp+arg_0]
.text:0000043B                 mov     eax, [ecx+8]
.text:0000043E                 cdq
.text:0000043F                 push    edx
.text:00000440                 push    eax             ; __int64
.text:00000441                 call    ?ConvertInt64ToString@@YGX_JPAD@Z ; ConvertInt64ToString(__int64,char *)
.text:00000446                 jmp     short loc_4A7
.text:00000448 ; ---------------------------------------------------------------------------
.text:00000448
.text:00000448 $LN3:                                   ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:00000448                                         ; DATA XREF: .text:$LN18o
.text:00000448                 mov     edx, [ebp+arg_4] ; jumptable 0000038E case 20
.text:0000044B                 push    edx             ; char *
.text:0000044C                 mov     eax, [ebp+arg_0]
.text:0000044F                 mov     ecx, [eax+0Ch]
.text:00000452                 push    ecx
.text:00000453                 mov     edx, [eax+8]
.text:00000456                 push    edx             ; __int64
.text:00000457                 call    ?ConvertInt64ToString@@YGX_JPAD@Z ; ConvertInt64ToString(__int64,char *)
.text:0000045C                 jmp     short loc_4A7
.text:0000045E ; ---------------------------------------------------------------------------
.text:0000045E
.text:0000045E $LN2:                                   ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:0000045E                                         ; DATA XREF: .text:$LN18o
.text:0000045E                 mov     eax, [ebp+arg_0] ; jumptable 0000038E case 11
.text:00000461                 movzx   ecx, word ptr [eax+8]
.text:00000465                 push    ecx             ; __int16
.text:00000466                 call    ?VARIANT_BOOLToBool@@YG_NF@Z ; VARIANT_BOOLToBool(short)
.text:0000046B                 movzx   edx, al
.text:0000046E                 test    edx, edx
.text:00000470                 setz    al
.text:00000473                 lea     eax, [eax+eax+2Bh]
.text:00000477                 mov     ecx, [ebp+arg_4]
.text:0000047A                 mov     [ecx], al
.text:0000047C                 mov     edx, [ebp+arg_4]
.text:0000047F                 mov     byte ptr [edx+1], 0
.text:00000483                 jmp     short loc_4A7
.text:00000485 ; ---------------------------------------------------------------------------
.text:00000485
.text:00000485 $LN1:                                   ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+1Ej
.text:00000485                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Ej
.text:00000485                                         ; DATA XREF: ...
.text:00000485                 mov     eax, [ebp+arg_4] ; jumptable 0000038E default case
.text:00000488                 mov     byte ptr [eax], 3Fh ; '?'
.text:0000048B                 mov     ecx, [ebp+arg_4]
.text:0000048E                 mov     byte ptr [ecx+1], 3Ah ; ':'
.text:00000492                 mov     edx, [ebp+arg_4]
.text:00000495                 add     edx, 2
.text:00000498                 push    edx             ; char *
.text:00000499                 mov     eax, [ebp+arg_0]
.text:0000049C                 movzx   eax, word ptr [eax]
.text:0000049F                 cdq
.text:000004A0                 push    edx
.text:000004A1                 push    eax             ; unsigned __int64
.text:000004A2                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:000004A7
.text:000004A7 loc_4A7:                                ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *):$LN12j
.text:000004A7                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+47j ...
.text:000004A7                 add     esp, 4
.text:000004AA                 cmp     ebp, esp
.text:000004AC                 call    __RTC_CheckEsp
.text:000004B1                 mov     esp, ebp
.text:000004B3                 pop     ebp
.text:000004B4                 retn    8
.text:000004B4 ?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z endp
.text:000004B4
.text:000004B4 ; ---------------------------------------------------------------------------
.text:000004B7                 align 4
.text:000004B8 $LN18           dd offset $LN12, offset $LN5, offset $LN4, offset $LN11
.text:000004B8                                         ; DATA XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+2Er
.text:000004B8                 dd offset $LN2, offset $LN10, offset $LN9_1, offset $LN8_1 ; jump table for switch statement
.text:000004B8                 dd offset $LN3, offset $LN7_1, offset $LN6, offset $LN1
.text:000004E8 $LN17           db      0,   0Bh,     1,     2
.text:000004E8                                         ; DATA XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+27r
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh ; indirect table for switch statement
.text:000004E8                 db      3,   0Bh,   0Bh,     4
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,     5,     6,     7
.text:000004E8                 db      8,     9,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000004E8                 db    0Ah
.text:00000529                 align 10h
.text:00000530
.text:00000530 ; =============== S U B R O U T I N E =======================================
.text:00000530
.text:00000530 ; Attributes: bp-based frame
.text:00000530
.text:00000530 ; void __stdcall ConvertPropVariantToShortString(const struct tagPROPVARIANT *, wchar_t *)
.text:00000530                 public ?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PA_W@Z
.text:00000530 ?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PA_W@Z proc near
.text:00000530
.text:00000530 var_4           = dword ptr -4
.text:00000530 arg_0           = dword ptr  8
.text:00000530 arg_4           = dword ptr  0Ch
.text:00000530
.text:00000530                 push    ebp
.text:00000531                 mov     ebp, esp
.text:00000533                 push    ecx
.text:00000534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000053B                 xor     eax, eax
.text:0000053D                 mov     ecx, [ebp+arg_4]
.text:00000540                 mov     [ecx], ax
.text:00000543                 mov     edx, [ebp+arg_0]
.text:00000546                 movzx   eax, word ptr [edx]
.text:00000549                 mov     [ebp+var_4], eax
.text:0000054C                 cmp     [ebp+var_4], 40h ; '@' ; switch 65 cases
.text:00000550                 ja      $LN1_0          ; jumptable 00000560 default case
.text:00000556                 mov     ecx, [ebp+var_4]
.text:00000559                 movzx   edx, ds:$LN17_0[ecx]
.text:00000560                 jmp     ds:$LN18_0[edx*4] ; switch jump
.text:00000567 ; ---------------------------------------------------------------------------
.text:00000567
.text:00000567 $LN12_0:                                ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:00000567                                         ; DATA XREF: .text:$LN18_0o
.text:00000567                 jmp     loc_68C         ; jumptable 00000560 case 0
.text:0000056C ; ---------------------------------------------------------------------------
.text:0000056C
.text:0000056C $LN11_0:                                ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:0000056C                                         ; DATA XREF: .text:$LN18_0o
.text:0000056C                 mov     eax, 3Fh ; '?'  ; jumptable 00000560 case 8
.text:00000571                 mov     ecx, [ebp+arg_4]
.text:00000574                 mov     [ecx], ax
.text:00000577                 xor     edx, edx
.text:00000579                 mov     eax, [ebp+arg_4]
.text:0000057C                 mov     [eax+2], dx
.text:00000580                 jmp     loc_68C
.text:00000585 ; ---------------------------------------------------------------------------
.text:00000585
.text:00000585 $LN10_0:                                ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:00000585                                         ; DATA XREF: .text:$LN18_0o
.text:00000585                 mov     ecx, [ebp+arg_4] ; jumptable 00000560 case 17
.text:00000588                 push    ecx             ; wchar_t *
.text:00000589                 mov     edx, [ebp+arg_0]
.text:0000058C                 movzx   eax, byte ptr [edx+8]
.text:00000590                 push    eax             ; unsigned int
.text:00000591                 call    ?ConvertUInt32ToString@@YGXIPA_W@Z ; ConvertUInt32ToString(uint,wchar_t *)
.text:00000596                 jmp     loc_68C
.text:0000059B ; ---------------------------------------------------------------------------
.text:0000059B
.text:0000059B $LN9_2:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:0000059B                                         ; DATA XREF: .text:$LN18_0o
.text:0000059B                 mov     ecx, [ebp+arg_4] ; jumptable 00000560 case 18
.text:0000059E                 push    ecx             ; wchar_t *
.text:0000059F                 mov     edx, [ebp+arg_0]
.text:000005A2                 movzx   eax, word ptr [edx+8]
.text:000005A6                 push    eax             ; unsigned int
.text:000005A7                 call    ?ConvertUInt32ToString@@YGXIPA_W@Z ; ConvertUInt32ToString(uint,wchar_t *)
.text:000005AC                 jmp     loc_68C
.text:000005B1 ; ---------------------------------------------------------------------------
.text:000005B1
.text:000005B1 $LN8_2:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:000005B1                                         ; DATA XREF: .text:$LN18_0o
.text:000005B1                 mov     ecx, [ebp+arg_4] ; jumptable 00000560 case 19
.text:000005B4                 push    ecx             ; wchar_t *
.text:000005B5                 mov     edx, [ebp+arg_0]
.text:000005B8                 mov     eax, [edx+8]
.text:000005BB                 push    eax             ; unsigned int
.text:000005BC                 call    ?ConvertUInt32ToString@@YGXIPA_W@Z ; ConvertUInt32ToString(uint,wchar_t *)
.text:000005C1                 jmp     loc_68C
.text:000005C6 ; ---------------------------------------------------------------------------
.text:000005C6
.text:000005C6 $LN7_2:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:000005C6                                         ; DATA XREF: .text:$LN18_0o
.text:000005C6                 mov     ecx, [ebp+arg_4] ; jumptable 00000560 case 21
.text:000005C9                 push    ecx             ; wchar_t *
.text:000005CA                 mov     edx, [ebp+arg_0]
.text:000005CD                 mov     eax, [edx+0Ch]
.text:000005D0                 push    eax
.text:000005D1                 mov     ecx, [edx+8]
.text:000005D4                 push    ecx             ; unsigned __int64
.text:000005D5                 call    ?ConvertUInt64ToString@@YGX_KPA_W@Z ; ConvertUInt64ToString(unsigned __int64,wchar_t *)
.text:000005DA                 jmp     loc_68C
.text:000005DF ; ---------------------------------------------------------------------------
.text:000005DF
.text:000005DF $LN6_0:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:000005DF                                         ; DATA XREF: .text:$LN18_0o
.text:000005DF                 push    1               ; jumptable 00000560 case 64
.text:000005E1                 push    1               ; bool
.text:000005E3                 mov     edx, [ebp+arg_4]
.text:000005E6                 push    edx             ; wchar_t *
.text:000005E7                 mov     eax, [ebp+arg_0]
.text:000005EA                 add     eax, 8
.text:000005ED                 push    eax             ; lpFileTime
.text:000005EE                 call    ?ConvertFileTimeToString@@YGXABU_FILETIME@@PA_W_N2@Z ; ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool)
.text:000005F3                 jmp     loc_68C
.text:000005F8 ; ---------------------------------------------------------------------------
.text:000005F8
.text:000005F8 $LN5_0:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:000005F8                                         ; DATA XREF: .text:$LN18_0o
.text:000005F8                 mov     ecx, [ebp+arg_4] ; jumptable 00000560 case 2
.text:000005FB                 push    ecx             ; wchar_t *
.text:000005FC                 mov     edx, [ebp+arg_0]
.text:000005FF                 movsx   eax, word ptr [edx+8]
.text:00000603                 cdq
.text:00000604                 push    edx
.text:00000605                 push    eax             ; __int64
.text:00000606                 call    ?ConvertInt64ToString@@YGX_JPA_W@Z ; ConvertInt64ToString(__int64,wchar_t *)
.text:0000060B                 jmp     short loc_68C
.text:0000060D ; ---------------------------------------------------------------------------
.text:0000060D
.text:0000060D $LN4_0:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:0000060D                                         ; DATA XREF: .text:$LN18_0o
.text:0000060D                 mov     eax, [ebp+arg_4] ; jumptable 00000560 case 3
.text:00000610                 push    eax             ; wchar_t *
.text:00000611                 mov     ecx, [ebp+arg_0]
.text:00000614                 mov     eax, [ecx+8]
.text:00000617                 cdq
.text:00000618                 push    edx
.text:00000619                 push    eax             ; __int64
.text:0000061A                 call    ?ConvertInt64ToString@@YGX_JPA_W@Z ; ConvertInt64ToString(__int64,wchar_t *)
.text:0000061F                 jmp     short loc_68C
.text:00000621 ; ---------------------------------------------------------------------------
.text:00000621
.text:00000621 $LN3_0:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:00000621                                         ; DATA XREF: .text:$LN18_0o
.text:00000621                 mov     edx, [ebp+arg_4] ; jumptable 00000560 case 20
.text:00000624                 push    edx             ; wchar_t *
.text:00000625                 mov     eax, [ebp+arg_0]
.text:00000628                 mov     ecx, [eax+0Ch]
.text:0000062B                 push    ecx
.text:0000062C                 mov     edx, [eax+8]
.text:0000062F                 push    edx             ; __int64
.text:00000630                 call    ?ConvertInt64ToString@@YGX_JPA_W@Z ; ConvertInt64ToString(__int64,wchar_t *)
.text:00000635                 jmp     short loc_68C
.text:00000637 ; ---------------------------------------------------------------------------
.text:00000637
.text:00000637 $LN2_0:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:00000637                                         ; DATA XREF: .text:$LN18_0o
.text:00000637                 mov     eax, [ebp+arg_0] ; jumptable 00000560 case 11
.text:0000063A                 movzx   ecx, word ptr [eax+8]
.text:0000063E                 push    ecx             ; __int16
.text:0000063F                 call    ?VARIANT_BOOLToBool@@YG_NF@Z ; VARIANT_BOOLToBool(short)
.text:00000644                 movzx   edx, al
.text:00000647                 neg     edx
.text:00000649                 sbb     edx, edx
.text:0000064B                 and     edx, 0FFFFFFFEh
.text:0000064E                 add     edx, 2Dh ; '-'
.text:00000651                 mov     eax, [ebp+arg_4]
.text:00000654                 mov     [eax], dx
.text:00000657                 xor     ecx, ecx
.text:00000659                 mov     edx, [ebp+arg_4]
.text:0000065C                 mov     [edx+2], cx
.text:00000660                 jmp     short loc_68C
.text:00000662 ; ---------------------------------------------------------------------------
.text:00000662
.text:00000662 $LN1_0:                                 ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+20j
.text:00000662                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30j
.text:00000662                                         ; DATA XREF: ...
.text:00000662                 mov     eax, 3Fh ; '?'  ; jumptable 00000560 default case
.text:00000667                 mov     ecx, [ebp+arg_4]
.text:0000066A                 mov     [ecx], ax
.text:0000066D                 mov     edx, 3Ah ; ':'
.text:00000672                 mov     eax, [ebp+arg_4]
.text:00000675                 mov     [eax+2], dx
.text:00000679                 mov     ecx, [ebp+arg_4]
.text:0000067C                 add     ecx, 4
.text:0000067F                 push    ecx             ; wchar_t *
.text:00000680                 mov     edx, [ebp+arg_0]
.text:00000683                 movzx   eax, word ptr [edx]
.text:00000686                 push    eax             ; unsigned int
.text:00000687                 call    ?ConvertUInt32ToString@@YGXIPA_W@Z ; ConvertUInt32ToString(uint,wchar_t *)
.text:0000068C
.text:0000068C loc_68C:                                ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *):$LN12_0j
.text:0000068C                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+50j ...
.text:0000068C                 add     esp, 4
.text:0000068F                 cmp     ebp, esp
.text:00000691                 call    __RTC_CheckEsp
.text:00000696                 mov     esp, ebp
.text:00000698                 pop     ebp
.text:00000699                 retn    8
.text:00000699 ?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PA_W@Z endp
.text:00000699
.text:00000699 ; ---------------------------------------------------------------------------
.text:0000069C $LN18_0         dd offset $LN12_0, offset $LN5_0, offset $LN4_0, offset $LN11_0
.text:0000069C                                         ; DATA XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+30r
.text:0000069C                 dd offset $LN2_0, offset $LN10_0, offset $LN9_2, offset $LN8_2 ; jump table for switch statement
.text:0000069C                 dd offset $LN3_0, offset $LN7_2, offset $LN6_0, offset $LN1_0
.text:000006CC $LN17_0         db      0,   0Bh,     1,     2
.text:000006CC                                         ; DATA XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+29r
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh ; indirect table for switch statement
.text:000006CC                 db      3,   0Bh,   0Bh,     4
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,     5,     6,     7
.text:000006CC                 db      8,     9,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000006CC                 db    0Ah
.text:0000070D                 align 10h
.text:0000070D _text           ends
.text:0000070D
.rtc$TMZ:00000710 ; ===========================================================================
.rtc$TMZ:00000710
.rtc$TMZ:00000710 ; Segment type: Pure data
.rtc$TMZ:00000710 ; Segment permissions: Read
.rtc$TMZ:00000710 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000710                 assume cs:_rtc$TMZ
.rtc$TMZ:00000710                 ;org 710h
.rtc$TMZ:00000710 ; COMDAT (pick any)
.rtc$TMZ:00000710 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000710 _rtc$TMZ        ends
.rtc$TMZ:00000710
.rtc$IMZ:00000714 ; ===========================================================================
.rtc$IMZ:00000714
.rtc$IMZ:00000714 ; Segment type: Pure data
.rtc$IMZ:00000714 ; Segment permissions: Read
.rtc$IMZ:00000714 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000714                 assume cs:_rtc$IMZ
.rtc$IMZ:00000714                 ;org 714h
.rtc$IMZ:00000714 ; COMDAT (pick any)
.rtc$IMZ:00000714 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000714 _rtc$IMZ        ends
.rtc$IMZ:00000714
.text:00000718 ; ===========================================================================
.text:00000718
.text:00000718 ; Segment type: Pure code
.text:00000718 ; Segment permissions: Read/Execute
.text:00000718 _text           segment para public 'CODE' use32
.text:00000718                 assume cs:_text
.text:00000718                 ;org 718h
.text:00000718 ; COMDAT (pick any)
.text:00000718                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000718
.text:00000718 ; =============== S U B R O U T I N E =======================================
.text:00000718
.text:00000718 ; Attributes: bp-based frame
.text:00000718
.text:00000718 ; bool __stdcall BOOLToBool(int)
.text:00000718                 public ?BOOLToBool@@YG_NH@Z
.text:00000718 ?BOOLToBool@@YG_NH@Z proc near          ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+46p
.text:00000718
.text:00000718 arg_0           = dword ptr  8
.text:00000718
.text:00000718                 push    ebp
.text:00000719                 mov     ebp, esp
.text:0000071B                 xor     eax, eax
.text:0000071D                 cmp     [ebp+arg_0], 0
.text:00000721                 setnz   al
.text:00000724                 pop     ebp
.text:00000725                 retn    4
.text:00000725 ?BOOLToBool@@YG_NH@Z endp
.text:00000725
.text:00000725 _text           ends
.text:00000725
.text:00000728 ; ===========================================================================
.text:00000728
.text:00000728 ; Segment type: Pure code
.text:00000728 ; Segment permissions: Read/Execute
.text:00000728 _text           segment para public 'CODE' use32
.text:00000728                 assume cs:_text
.text:00000728                 ;org 728h
.text:00000728 ; COMDAT (pick any)
.text:00000728                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000728
.text:00000728 ; =============== S U B R O U T I N E =======================================
.text:00000728
.text:00000728 ; Attributes: bp-based frame
.text:00000728
.text:00000728 ; bool __stdcall VARIANT_BOOLToBool(__int16)
.text:00000728                 public ?VARIANT_BOOLToBool@@YG_NF@Z
.text:00000728 ?VARIANT_BOOLToBool@@YG_NF@Z proc near  ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+106p
.text:00000728                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+10Fp
.text:00000728
.text:00000728 arg_0           = word ptr  8
.text:00000728
.text:00000728                 push    ebp
.text:00000729                 mov     ebp, esp
.text:0000072B                 movsx   eax, [ebp+arg_0]
.text:0000072F                 neg     eax
.text:00000731                 sbb     eax, eax
.text:00000733                 neg     eax
.text:00000735                 pop     ebp
.text:00000736                 retn    4
.text:00000736 ?VARIANT_BOOLToBool@@YG_NF@Z endp
.text:00000736
.text:00000736 _text           ends
.text:00000736
UNDEF:00000740 ; ===========================================================================
UNDEF:00000740
UNDEF:00000740 ; Segment type: Externs
UNDEF:00000740 ; UNDEF
UNDEF:00000740 ; BOOL __stdcall FileTimeToSystemTime(const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime)
UNDEF:00000740                 extrn __imp__FileTimeToSystemTime@8:near
UNDEF:00000740                                         ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+38p
UNDEF:00000740                                         ; DATA XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+38r
UNDEF:00000744                 extrn ___security_cookie:near
UNDEF:00000744                                         ; DATA XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+24r
UNDEF:00000744                                         ; ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool)+16r
UNDEF:00000748 ; __fastcall __security_check_cookie(x)
UNDEF:00000748                 extrn @__security_check_cookie@4:near
UNDEF:00000748                                         ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+265p
UNDEF:00000748                                         ; ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool)+85p
UNDEF:0000074C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000074C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000074C                                         ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+258p
UNDEF:0000074C                                         ; ConvertFileTimeToString(_FILETIME const &,wchar_t *,bool,bool)+78p
UNDEF:00000750                 extrn __RTC_CheckEsp:near
UNDEF:00000750                                         ; CODE XREF: ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+40p
UNDEF:00000750                                         ; ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)+26Fp ...
UNDEF:00000754                 extrn __RTC_Shutdown:near
UNDEF:00000754                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000758                 extrn __RTC_InitBase:near
UNDEF:00000758                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000075C ; void __stdcall ConvertInt64ToString(__int64, char *)
UNDEF:0000075C                 extrn ?ConvertInt64ToString@@YGX_JPAD@Z:near
UNDEF:0000075C                                         ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+CDp
UNDEF:0000075C                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+E1p ...
UNDEF:00000760 ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
UNDEF:00000760                 extrn ?ConvertUInt64ToString@@YGX_KPAD@Z:near
UNDEF:00000760                                         ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+9Cp
UNDEF:00000760                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+142p
UNDEF:00000764 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:00000764                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:00000764                                         ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+58p
UNDEF:00000764                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,char *)+6Ep ...
UNDEF:00000768 ; void __stdcall ConvertInt64ToString(__int64, wchar_t *)
UNDEF:00000768                 extrn ?ConvertInt64ToString@@YGX_JPA_W@Z:near
UNDEF:00000768                                         ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+D6p
UNDEF:00000768                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+EAp ...
UNDEF:0000076C ; void __stdcall ConvertUInt64ToString(unsigned __int64, wchar_t *)
UNDEF:0000076C                 extrn ?ConvertUInt64ToString@@YGX_KPA_W@Z:near
UNDEF:0000076C                                         ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+A5p
UNDEF:00000770 ; void __stdcall ConvertUInt32ToString(unsigned int, wchar_t *)
UNDEF:00000770                 extrn ?ConvertUInt32ToString@@YGXIPA_W@Z:near
UNDEF:00000770                                         ; CODE XREF: ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+61p
UNDEF:00000770                                         ; ConvertPropVariantToShortString(tagPROPVARIANT const &,wchar_t *)+77p ...
UNDEF:00000770
UNDEF:00000770
UNDEF:00000770                 end