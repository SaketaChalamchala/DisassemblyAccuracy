.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 758290ECD24321D9B6892D57BECE51F5
.rdata:00000000 ; Input CRC32 : 2D9131C2
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\OpenArchive.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kProps         db 3                    ; DATA XREF: NArchive::NParser::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000001                 db    7
.rdata:00000002                 db  0Ch
.rdata:00000003                 db  14h
.rdata:00000004                 db  1Ch
.rdata:00000005                 db  24h ; $
.rdata:00000006                 db  4Eh ; N
.rdata:00000007                 db    0
.rdata:00000008 ; wchar_t _SG73397
.rdata:00000008 $SG73397:                               ; DATA XREF: CArc::GetItemPath2(uint,UString &)+7Co
.rdata:00000008                 unicode 0, <[DELETED]\>,0
.rdata:0000001E                 align 10h
.rdata:00000020 ; char _SG73679[]
.rdata:00000020 $SG73679        db 'exe',0              ; DATA XREF: IsExeExt(UString const &)+3o
.rdata:00000020                                         ; .text:$LN399o
.rdata:00000024 $SG73681        dd offset loc_656E+2    ; DATA XREF: .rdata:_k_PreArcFormatso
.rdata:00000028 $SG73682        db  65h ; e             ; DATA XREF: .rdata:off_40o
.rdata:00000029                 db  6Ch ; l
.rdata:0000002A                 db  66h ; f
.rdata:0000002B                 db    0
.rdata:0000002C $SG73683        db 'macho',0            ; DATA XREF: .rdata:00000044o
.rdata:00000032                 align 4
.rdata:00000034 $SG73684        db 'mub',0              ; DATA XREF: .rdata:00000048o
.rdata:00000038 $SG73685        dd offset loc_6574      ; DATA XREF: .rdata:0000004Co
.rdata:0000003C _k_PreArcFormats dd offset $SG73681     ; DATA XREF: IsPreArcFormat(CArcInfoEx const &)+18o
.rdata:00000040 off_40          dd offset $SG73682      ; DATA XREF: .xdata$x:__catchsym$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2o
.rdata:00000040                                         ; .xdata$x:__catchsym$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4o ...
.rdata:00000044                 dd offset $SG73683      ; "macho"
.rdata:00000048                 dd offset $SG73684      ; "mub"
.rdata:0000004C                 dd offset $SG73685
.rdata:00000050 $SG73701        dd offset loc_7A32+5    ; DATA XREF: .rdata:_k_Formats_with_simple_signuatureo
.rdata:00000054 $SG73702        dd offset loc_7A76+2    ; DATA XREF: .rdata:00000084o
.rdata:00000058 $SG73703        db  72h ; r             ; DATA XREF: .rdata:00000088o
.rdata:00000059                 db  61h ; a
.rdata:0000005A                 db  72h ; r
.rdata:0000005B                 db    0
.rdata:0000005C $SG73704        db 'bzip2',0            ; DATA XREF: .rdata:0000008Co
.rdata:00000062                 align 4
.rdata:00000064 $SG73705        db 'gzip',0             ; DATA XREF: .rdata:00000090o
.rdata:00000069                 align 4
.rdata:0000006C $SG73706        db 'cab',0              ; DATA XREF: .rdata:00000094o
.rdata:00000070 $SG73707        db 'wim',0              ; DATA XREF: .rdata:00000098o
.rdata:00000070                                         ; .text:000090ECo
.rdata:00000074 $SG73708        db 'rpm',0              ; DATA XREF: .rdata:0000009Co
.rdata:00000078 $SG73709        db 'vhd',0              ; DATA XREF: .rdata:000000A0o
.rdata:0000007C $SG73710        db 'xar',0              ; DATA XREF: .rdata:000000A4o
.rdata:00000080 _k_Formats_with_simple_signuature dd offset $SG73701
.rdata:00000080                                         ; DATA XREF: IsNewStyleSignature(CArcInfoEx const &)+14o
.rdata:00000084                 dd offset $SG73702
.rdata:00000088                 dd offset $SG73703
.rdata:0000008C                 dd offset $SG73704      ; "bzip2"
.rdata:00000090                 dd offset $SG73705      ; "gzip"
.rdata:00000094                 dd offset $SG73706      ; "cab"
.rdata:00000098                 dd offset $SG73707      ; "wim"
.rdata:0000009C                 dd offset $SG73708      ; "rpm"
.rdata:000000A0                 dd offset $SG73709      ; "vhd"
.rdata:000000A4                 dd offset $SG73710      ; "xar"
.rdata:000000A8 $SG73878:                               ; DATA XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long):loc_2E79o
.rdata:000000A8                 unicode 0, <Unknown error>,0
.rdata:000000C4 $SG73884:                               ; DATA XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long):loc_2F18o
.rdata:000000C4                 unicode 0, <Unknown warning>,0
.rdata:000000E4 ; char _SG74318[]
.rdata:000000E4 $SG74318        db '000',0              ; DATA XREF: CArc::OpenStream2(COpenOptions const &):loc_3DA7o
.rdata:000000E8 ; char _SG74319[]
.rdata:000000E8 $SG74319        db '001',0              ; DATA XREF: CArc::OpenStream2(COpenOptions const &)+443o
.rdata:000000EC ; char _SG74322[]
.rdata:000000EC $SG74322        db 'rar',0              ; DATA XREF: CArc::OpenStream2(COpenOptions const &):loc_3DD3o
.rdata:000000F0 ; char _SG74353[]
.rdata:000000F0 $SG74353        db 'iso',0              ; DATA XREF: CArc::OpenStream2(COpenOptions const &)+843o
.rdata:000000F4 ; char _SG74356[]
.rdata:000000F4 $SG74356        db 'udf',0              ; DATA XREF: CArc::OpenStream2(COpenOptions const &)+87Fo
.rdata:000000F4 _rdata          ends
.rdata:000000F4
.text:000000F8 ; ===========================================================================
.text:000000F8
.text:000000F8 ; Segment type: Pure code
.text:000000F8 ; Segment permissions: Read/Execute
.text:000000F8 _text           segment para public 'CODE' use32
.text:000000F8                 assume cs:_text
.text:000000F8                 ;org 0F8h
.text:000000F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000000F8
.text:000000F8 ; =============== S U B R O U T I N E =======================================
.text:000000F8
.text:000000F8 ; Attributes: bp-based frame
.text:000000F8
.text:000000F8 ; int __thiscall NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CHandler *this, const struct NArchive::NParser::CParseItem *)
.text:000000F8                 public ?FindInsertPos@CHandler@NParser@NArchive@@QBEHABUCParseItem@23@@Z
.text:000000F8 ?FindInsertPos@CHandler@NParser@NArchive@@QBEHABUCParseItem@23@@Z proc near
.text:000000F8                                         ; CODE XREF: NArchive::NParser::CHandler::AddItem(NArchive::NParser::CParseItem const &)+36p
.text:000000F8
.text:000000F8 var_34          = dword ptr -34h
.text:000000F8 var_30          = dword ptr -30h
.text:000000F8 var_2C          = dword ptr -2Ch
.text:000000F8 var_28          = dword ptr -28h
.text:000000F8 var_24          = dword ptr -24h
.text:000000F8 var_20          = dword ptr -20h
.text:000000F8 var_1C          = dword ptr -1Ch
.text:000000F8 var_18          = dword ptr -18h
.text:000000F8 var_14          = dword ptr -14h
.text:000000F8 var_10          = dword ptr -10h
.text:000000F8 var_C           = dword ptr -0Ch
.text:000000F8 var_8           = dword ptr -8
.text:000000F8 var_4           = dword ptr -4
.text:000000F8 arg_0           = dword ptr  8
.text:000000F8
.text:000000F8                 push    ebp
.text:000000F9                 mov     ebp, esp
.text:000000FB                 sub     esp, 34h
.text:000000FE                 push    edi
.text:000000FF                 push    ecx
.text:00000100                 lea     edi, [ebp+var_34]
.text:00000103                 mov     ecx, 0Dh
.text:00000108                 mov     eax, 0CCCCCCCCh
.text:0000010D                 rep stosd
.text:0000010F                 pop     ecx
.text:00000110                 mov     [ebp+var_4], ecx
.text:00000113                 mov     [ebp+var_8], 0
.text:0000011A                 mov     ecx, [ebp+var_4]
.text:0000011D                 add     ecx, 0Ch
.text:00000120                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:00000125                 mov     [ebp+var_C], eax
.text:00000128
.text:00000128 loc_128:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &):loc_227j
.text:00000128                 mov     eax, [ebp+var_8]
.text:0000012B                 cmp     eax, [ebp+var_C]
.text:0000012E                 jz      loc_22C
.text:00000134                 mov     ecx, [ebp+var_8]
.text:00000137                 add     ecx, [ebp+var_C]
.text:0000013A                 shr     ecx, 1
.text:0000013C                 mov     [ebp+var_10], ecx
.text:0000013F                 mov     edx, [ebp+var_10]
.text:00000142                 push    edx
.text:00000143                 mov     ecx, [ebp+var_4]
.text:00000146                 add     ecx, 0Ch
.text:00000149                 call    ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEABUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[](uint)
.text:0000014E                 mov     [ebp+var_14], eax
.text:00000151                 mov     eax, [ebp+arg_0]
.text:00000154                 mov     ecx, [ebp+var_14]
.text:00000157                 mov     [ebp+var_18], eax
.text:0000015A                 mov     [ebp+var_1C], ecx
.text:0000015D                 mov     edx, [ebp+var_18]
.text:00000160                 mov     eax, [ebp+var_1C]
.text:00000163                 mov     ecx, [edx+4]
.text:00000166                 cmp     ecx, [eax+4]
.text:00000169                 ja      short loc_184
.text:0000016B                 jb      short loc_179
.text:0000016D                 mov     edx, [ebp+var_18]
.text:00000170                 mov     eax, [ebp+var_1C]
.text:00000173                 mov     ecx, [edx]
.text:00000175                 cmp     ecx, [eax]
.text:00000177                 jnb     short loc_184
.text:00000179
.text:00000179 loc_179:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+73j
.text:00000179                 mov     edx, [ebp+var_10]
.text:0000017C                 mov     [ebp+var_C], edx
.text:0000017F                 jmp     loc_227
.text:00000184 ; ---------------------------------------------------------------------------
.text:00000184
.text:00000184 loc_184:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+71j
.text:00000184                                         ; NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+7Fj
.text:00000184                 mov     eax, [ebp+arg_0]
.text:00000187                 mov     ecx, [ebp+var_14]
.text:0000018A                 mov     [ebp+var_20], eax
.text:0000018D                 mov     [ebp+var_24], ecx
.text:00000190                 mov     edx, [ebp+var_20]
.text:00000193                 mov     eax, [ebp+var_24]
.text:00000196                 mov     ecx, [edx+4]
.text:00000199                 cmp     ecx, [eax+4]
.text:0000019C                 jb      short loc_1B7
.text:0000019E                 ja      short loc_1AC
.text:000001A0                 mov     edx, [ebp+var_20]
.text:000001A3                 mov     eax, [ebp+var_24]
.text:000001A6                 mov     ecx, [edx]
.text:000001A8                 cmp     ecx, [eax]
.text:000001AA                 jbe     short loc_1B7
.text:000001AC
.text:000001AC loc_1AC:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+A6j
.text:000001AC                 mov     edx, [ebp+var_10]
.text:000001AF                 add     edx, 1
.text:000001B2                 mov     [ebp+var_8], edx
.text:000001B5                 jmp     short loc_227
.text:000001B7 ; ---------------------------------------------------------------------------
.text:000001B7
.text:000001B7 loc_1B7:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+A4j
.text:000001B7                                         ; NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+B2j
.text:000001B7                 mov     eax, [ebp+arg_0]
.text:000001BA                 mov     ecx, [ebp+var_14]
.text:000001BD                 mov     [ebp+var_28], eax
.text:000001C0                 mov     [ebp+var_2C], ecx
.text:000001C3                 mov     edx, [ebp+var_28]
.text:000001C6                 mov     eax, [ebp+var_2C]
.text:000001C9                 mov     ecx, [edx+0Ch]
.text:000001CC                 cmp     ecx, [eax+0Ch]
.text:000001CF                 ja      short loc_1E9
.text:000001D1                 jb      short loc_1E1
.text:000001D3                 mov     edx, [ebp+var_28]
.text:000001D6                 mov     eax, [ebp+var_2C]
.text:000001D9                 mov     ecx, [edx+8]
.text:000001DC                 cmp     ecx, [eax+8]
.text:000001DF                 jnb     short loc_1E9
.text:000001E1
.text:000001E1 loc_1E1:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+D9j
.text:000001E1                 mov     edx, [ebp+var_10]
.text:000001E4                 mov     [ebp+var_C], edx
.text:000001E7                 jmp     short loc_227
.text:000001E9 ; ---------------------------------------------------------------------------
.text:000001E9
.text:000001E9 loc_1E9:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+D7j
.text:000001E9                                         ; NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+E7j
.text:000001E9                 mov     eax, [ebp+arg_0]
.text:000001EC                 mov     ecx, [ebp+var_14]
.text:000001EF                 mov     [ebp+var_30], eax
.text:000001F2                 mov     [ebp+var_34], ecx
.text:000001F5                 mov     edx, [ebp+var_30]
.text:000001F8                 mov     eax, [ebp+var_34]
.text:000001FB                 mov     ecx, [edx+0Ch]
.text:000001FE                 cmp     ecx, [eax+0Ch]
.text:00000201                 jb      short loc_21E
.text:00000203                 ja      short loc_213
.text:00000205                 mov     edx, [ebp+var_30]
.text:00000208                 mov     eax, [ebp+var_34]
.text:0000020B                 mov     ecx, [edx+8]
.text:0000020E                 cmp     ecx, [eax+8]
.text:00000211                 jbe     short loc_21E
.text:00000213
.text:00000213 loc_213:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+10Bj
.text:00000213                 mov     edx, [ebp+var_10]
.text:00000216                 add     edx, 1
.text:00000219                 mov     [ebp+var_8], edx
.text:0000021C                 jmp     short loc_227
.text:0000021E ; ---------------------------------------------------------------------------
.text:0000021E
.text:0000021E loc_21E:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+109j
.text:0000021E                                         ; NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+119j
.text:0000021E                 mov     eax, [ebp+var_10]
.text:00000221                 add     eax, 1
.text:00000224                 mov     [ebp+var_8], eax
.text:00000227
.text:00000227 loc_227:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+87j
.text:00000227                                         ; NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+BDj ...
.text:00000227                 jmp     loc_128
.text:0000022C ; ---------------------------------------------------------------------------
.text:0000022C
.text:0000022C loc_22C:                                ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+36j
.text:0000022C                 mov     eax, [ebp+var_8]
.text:0000022F                 pop     edi
.text:00000230                 add     esp, 34h
.text:00000233                 cmp     ebp, esp
.text:00000235                 call    __RTC_CheckEsp
.text:0000023A                 mov     esp, ebp
.text:0000023C                 pop     ebp
.text:0000023D                 retn    4
.text:0000023D ?FindInsertPos@CHandler@NParser@NArchive@@QBEHABUCParseItem@23@@Z endp
.text:0000023D
.text:0000023D ; ---------------------------------------------------------------------------
.text:00000240                 db 8 dup(0CCh)
.text:00000248
.text:00000248 ; =============== S U B R O U T I N E =======================================
.text:00000248
.text:00000248 ; Attributes: bp-based frame
.text:00000248
.text:00000248 ; void __thiscall NArchive::NParser::CHandler::AddUnknownItem(NArchive::NParser::CHandler *this, unsigned __int64)
.text:00000248                 public ?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z
.text:00000248 ?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z proc near
.text:00000248                                         ; CODE XREF: NArchive::NParser::CHandler::AddItem(NArchive::NParser::CParseItem const &)+2Ap
.text:00000248                                         ; CArc::OpenStream2(COpenOptions const &)+51C9p
.text:00000248
.text:00000248 var_94          = dword ptr -94h
.text:00000248 var_90          = dword ptr -90h
.text:00000248 var_8C          = dword ptr -8Ch
.text:00000248 var_84          = dword ptr -84h
.text:00000248 var_80          = dword ptr -80h
.text:00000248 var_7C          = dword ptr -7Ch
.text:00000248 var_78          = dword ptr -78h
.text:00000248 var_10          = dword ptr -10h
.text:00000248 var_C           = dword ptr -0Ch
.text:00000248 var_4           = dword ptr -4
.text:00000248 arg_0           = qword ptr  8
.text:00000248
.text:00000248                 push    ebp
.text:00000249                 mov     ebp, esp
.text:0000024B                 push    0FFFFFFFFh
.text:0000024D                 push    offset __ehhandler$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z
.text:00000252                 mov     eax, large fs:0
.text:00000258                 push    eax
.text:00000259                 sub     esp, 88h
.text:0000025F                 push    edi
.text:00000260                 push    ecx
.text:00000261                 lea     edi, [ebp+var_94]
.text:00000267                 mov     ecx, 22h ; '"'
.text:0000026C                 mov     eax, 0CCCCCCCCh
.text:00000271                 rep stosd
.text:00000273                 pop     ecx
.text:00000274                 mov     eax, dword ptr ds:___security_cookie
.text:00000279                 xor     eax, ebp
.text:0000027B                 push    eax
.text:0000027C                 lea     eax, [ebp+var_C]
.text:0000027F                 mov     large fs:0, eax
.text:00000285                 mov     [ebp+var_10], ecx
.text:00000288                 mov     eax, [ebp+var_10]
.text:0000028B                 mov     [ebp+var_90], eax
.text:00000291                 mov     ecx, [ebp+var_90]
.text:00000297                 mov     edx, [ecx+1Ch]
.text:0000029A                 cmp     edx, dword ptr [ebp+arg_0+4]
.text:0000029D                 ja      loc_324
.text:000002A3                 jb      short loc_2B3
.text:000002A5                 mov     eax, [ebp+var_90]
.text:000002AB                 mov     ecx, [eax+18h]
.text:000002AE                 cmp     ecx, dword ptr [ebp+arg_0]
.text:000002B1                 jnb     short loc_324
.text:000002B3
.text:000002B3 loc_2B3:                                ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+5Bj
.text:000002B3                 lea     ecx, [ebp+var_84] ; this
.text:000002B9                 call    ??0CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::CParseItem(void)
.text:000002BE                 mov     [ebp+var_4], 0
.text:000002C5                 mov     edx, [ebp+var_10]
.text:000002C8                 mov     eax, [edx+18h]
.text:000002CB                 mov     [ebp+var_84], eax
.text:000002D1                 mov     ecx, [edx+1Ch]
.text:000002D4                 mov     [ebp+var_80], ecx
.text:000002D7                 mov     edx, [ebp+var_10]
.text:000002DA                 mov     eax, dword ptr [ebp+arg_0]
.text:000002DD                 sub     eax, [edx+18h]
.text:000002E0                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:000002E3                 sbb     ecx, [edx+1Ch]
.text:000002E6                 mov     [ebp+var_7C], eax
.text:000002E9                 mov     [ebp+var_78], ecx
.text:000002EC                 mov     edx, [ebp+var_10]
.text:000002EF                 mov     eax, dword ptr [ebp+arg_0]
.text:000002F2                 mov     [edx+18h], eax
.text:000002F5                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:000002F8                 mov     [edx+1Ch], ecx
.text:000002FB                 lea     edx, [ebp+var_84]
.text:00000301                 push    edx             ; struct NArchive::NParser::CParseItem *
.text:00000302                 mov     ecx, [ebp+var_10]
.text:00000305                 add     ecx, 0Ch
.text:00000308                 call    ?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z ; CObjectVector<NArchive::NParser::CParseItem>::Add(NArchive::NParser::CParseItem const &)
.text:0000030D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000314                 lea     ecx, [ebp+var_84] ; this
.text:0000031A                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:0000031F                 jmp     loc_3A8
.text:00000324 ; ---------------------------------------------------------------------------
.text:00000324
.text:00000324 loc_324:                                ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+55j
.text:00000324                                         ; NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+69j
.text:00000324                 mov     eax, [ebp+var_10]
.text:00000327                 mov     [ebp+var_94], eax
.text:0000032D                 mov     ecx, [ebp+var_94]
.text:00000333                 mov     edx, [ecx+1Ch]
.text:00000336                 cmp     edx, dword ptr [ebp+arg_0+4]
.text:00000339                 jb      short loc_3A8
.text:0000033B                 ja      short loc_34B
.text:0000033D                 mov     eax, [ebp+var_94]
.text:00000343                 mov     ecx, [eax+18h]
.text:00000346                 cmp     ecx, dword ptr [ebp+arg_0]
.text:00000349                 jbe     short loc_3A8
.text:0000034B
.text:0000034B loc_34B:                                ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+F3j
.text:0000034B                 mov     ecx, [ebp+var_10]
.text:0000034E                 add     ecx, 0Ch
.text:00000351                 call    ?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NParser::CParseItem>::IsEmpty(void)
.text:00000356                 movzx   edx, al
.text:00000359                 test    edx, edx
.text:0000035B                 jnz     short loc_3A8
.text:0000035D                 mov     ecx, [ebp+var_10]
.text:00000360                 add     ecx, 0Ch
.text:00000363                 call    ?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ ; CObjectVector<NArchive::NParser::CParseItem>::Back(void)
.text:00000368                 mov     [ebp+var_8C], eax
.text:0000036E                 mov     eax, [ebp+var_8C]
.text:00000374                 movzx   ecx, byte ptr [eax+6Ch]
.text:00000378                 test    ecx, ecx
.text:0000037A                 jz      short loc_3A8
.text:0000037C                 mov     edx, [ebp+var_8C]
.text:00000382                 mov     eax, dword ptr [ebp+arg_0]
.text:00000385                 sub     eax, [edx]
.text:00000387                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:0000038A                 sbb     ecx, [edx+4]
.text:0000038D                 mov     edx, [ebp+var_8C]
.text:00000393                 mov     [edx+8], eax
.text:00000396                 mov     [edx+0Ch], ecx
.text:00000399                 mov     eax, [ebp+var_10]
.text:0000039C                 mov     ecx, dword ptr [ebp+arg_0]
.text:0000039F                 mov     [eax+18h], ecx
.text:000003A2                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000003A5                 mov     [eax+1Ch], edx
.text:000003A8
.text:000003A8 loc_3A8:                                ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+D7j
.text:000003A8                                         ; NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+F1j ...
.text:000003A8                 push    edx
.text:000003A9                 mov     ecx, ebp
.text:000003AB                 push    eax
.text:000003AC                 lea     edx, $LN13
.text:000003B2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003B7                 pop     eax
.text:000003B8                 pop     edx
.text:000003B9                 mov     ecx, [ebp+var_C]
.text:000003BC                 mov     large fs:0, ecx
.text:000003C3                 pop     ecx
.text:000003C4                 pop     edi
.text:000003C5                 add     esp, 94h
.text:000003CB                 cmp     ebp, esp
.text:000003CD                 call    __RTC_CheckEsp
.text:000003D2                 mov     esp, ebp
.text:000003D4                 pop     ebp
.text:000003D5                 retn    8
.text:000003D5 ?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z endp
.text:000003D5
.text:000003D5 ; ---------------------------------------------------------------------------
.text:000003D8 $LN13           dd 1                    ; DATA XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+164o
.text:000003DC                 dd offset $LN12
.text:000003E0 $LN12           dd 0FFFFFF7Ch, 70h      ; DATA XREF: .text:000003DCo
.text:000003E8                 dd offset $LN10         ; "item2"
.text:000003EC $LN10           db 'item2',0            ; DATA XREF: .text:000003E8o
.text:000003F2                 align 8
.text:000003F8
.text:000003F8 ; =============== S U B R O U T I N E =======================================
.text:000003F8
.text:000003F8 ; Attributes: bp-based frame
.text:000003F8
.text:000003F8 ; void __thiscall NArchive::NParser::CHandler::AddItem(NArchive::NParser::CHandler *this, const struct NArchive::NParser::CParseItem *)
.text:000003F8                 public ?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z
.text:000003F8 ?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z proc near
.text:000003F8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2769p
.text:000003F8                                         ; CArc::OpenStream2(COpenOptions const &)+50EEp
.text:000003F8
.text:000003F8 var_14          = dword ptr -14h
.text:000003F8 var_10          = dword ptr -10h
.text:000003F8 var_C           = dword ptr -0Ch
.text:000003F8 var_8           = dword ptr -8
.text:000003F8 var_4           = dword ptr -4
.text:000003F8 arg_0           = dword ptr  8
.text:000003F8
.text:000003F8                 push    ebp
.text:000003F9                 mov     ebp, esp
.text:000003FB                 sub     esp, 14h
.text:000003FE                 mov     eax, 0CCCCCCCCh
.text:00000403                 mov     [ebp+var_14], eax
.text:00000406                 mov     [ebp+var_10], eax
.text:00000409                 mov     [ebp+var_C], eax
.text:0000040C                 mov     [ebp+var_8], eax
.text:0000040F                 mov     [ebp+var_4], eax
.text:00000412                 mov     [ebp+var_4], ecx
.text:00000415                 mov     eax, [ebp+arg_0]
.text:00000418                 mov     ecx, [eax+4]
.text:0000041B                 push    ecx
.text:0000041C                 mov     edx, [eax]
.text:0000041E                 push    edx             ; unsigned __int64
.text:0000041F                 mov     ecx, [ebp+var_4] ; this
.text:00000422                 call    ?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z ; NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)
.text:00000427                 mov     eax, [ebp+arg_0]
.text:0000042A                 push    eax             ; struct NArchive::NParser::CParseItem *
.text:0000042B                 mov     ecx, [ebp+var_4] ; this
.text:0000042E                 call    ?FindInsertPos@CHandler@NParser@NArchive@@QBEHABUCParseItem@23@@Z ; NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)
.text:00000433                 mov     [ebp+var_8], eax
.text:00000436                 cmp     [ebp+var_8], 0
.text:0000043A                 jl      short loc_493
.text:0000043C                 mov     ecx, [ebp+arg_0]
.text:0000043F                 push    ecx             ; struct NArchive::NParser::CParseItem *
.text:00000440                 mov     edx, [ebp+var_8]
.text:00000443                 push    edx             ; int
.text:00000444                 mov     ecx, [ebp+var_4]
.text:00000447                 add     ecx, 0Ch
.text:0000044A                 call    ?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z ; CObjectVector<NArchive::NParser::CParseItem>::Insert(uint,NArchive::NParser::CParseItem const &)
.text:0000044F                 mov     eax, [ebp+arg_0]
.text:00000452                 mov     ecx, [ebp+arg_0]
.text:00000455                 mov     edx, [eax]
.text:00000457                 add     edx, [ecx+8]
.text:0000045A                 mov     eax, [eax+4]
.text:0000045D                 adc     eax, [ecx+0Ch]
.text:00000460                 mov     [ebp+var_10], edx
.text:00000463                 mov     [ebp+var_C], eax
.text:00000466                 mov     ecx, [ebp+var_4]
.text:00000469                 mov     [ebp+var_14], ecx
.text:0000046C                 mov     edx, [ebp+var_14]
.text:0000046F                 mov     eax, [edx+1Ch]
.text:00000472                 cmp     eax, [ebp+var_C]
.text:00000475                 ja      short loc_493
.text:00000477                 jb      short loc_484
.text:00000479                 mov     ecx, [ebp+var_14]
.text:0000047C                 mov     edx, [ecx+18h]
.text:0000047F                 cmp     edx, [ebp+var_10]
.text:00000482                 jnb     short loc_493
.text:00000484
.text:00000484 loc_484:                                ; CODE XREF: NArchive::NParser::CHandler::AddItem(NArchive::NParser::CParseItem const &)+7Fj
.text:00000484                 mov     eax, [ebp+var_4]
.text:00000487                 mov     ecx, [ebp+var_10]
.text:0000048A                 mov     [eax+18h], ecx
.text:0000048D                 mov     edx, [ebp+var_C]
.text:00000490                 mov     [eax+1Ch], edx
.text:00000493
.text:00000493 loc_493:                                ; CODE XREF: NArchive::NParser::CHandler::AddItem(NArchive::NParser::CParseItem const &)+42j
.text:00000493                                         ; NArchive::NParser::CHandler::AddItem(NArchive::NParser::CParseItem const &)+7Dj ...
.text:00000493                 add     esp, 14h
.text:00000496                 cmp     ebp, esp
.text:00000498                 call    __RTC_CheckEsp
.text:0000049D                 mov     esp, ebp
.text:0000049F                 pop     ebp
.text:000004A0                 retn    4
.text:000004A0 ?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z endp
.text:000004A0
.text:000004A0 ; ---------------------------------------------------------------------------
.text:000004A3                 align 8
.text:000004A8
.text:000004A8 ; =============== S U B R O U T I N E =======================================
.text:000004A8
.text:000004A8 ; Attributes: bp-based frame
.text:000004A8
.text:000004A8 ; __int32 __stdcall NArchive::NParser::CHandler::GetNumberOfProperties(NArchive::NParser::CHandler *this, unsigned int *)
.text:000004A8                 public ?GetNumberOfProperties@CHandler@NParser@NArchive@@UAGJPAI@Z
.text:000004A8 ?GetNumberOfProperties@CHandler@NParser@NArchive@@UAGJPAI@Z proc near
.text:000004A8                                         ; DATA XREF: .rdata:0000EF40o
.text:000004A8
.text:000004A8 this            = dword ptr  8
.text:000004A8 arg_4           = dword ptr  0Ch
.text:000004A8
.text:000004A8                 push    ebp
.text:000004A9                 mov     ebp, esp
.text:000004AB                 mov     eax, [ebp+arg_4]
.text:000004AE                 mov     dword ptr [eax], 7
.text:000004B4                 xor     eax, eax
.text:000004B6                 pop     ebp
.text:000004B7                 retn    8
.text:000004B7 ?GetNumberOfProperties@CHandler@NParser@NArchive@@UAGJPAI@Z endp
.text:000004B7
.text:000004B7 ; ---------------------------------------------------------------------------
.text:000004BA                 db 0Eh dup(0CCh)
.text:000004C8
.text:000004C8 ; =============== S U B R O U T I N E =======================================
.text:000004C8
.text:000004C8 ; Attributes: bp-based frame
.text:000004C8
.text:000004C8 ; __int32 __stdcall NArchive::NParser::CHandler::GetPropertyInfo(NArchive::NParser::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:000004C8                 public ?GetPropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:000004C8 ?GetPropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:000004C8                                         ; DATA XREF: .rdata:0000EF44o
.text:000004C8
.text:000004C8 this            = dword ptr  8
.text:000004C8 arg_4           = dword ptr  0Ch
.text:000004C8 arg_8           = dword ptr  10h
.text:000004C8 arg_C           = dword ptr  14h
.text:000004C8 arg_10          = dword ptr  18h
.text:000004C8
.text:000004C8                 push    ebp
.text:000004C9                 mov     ebp, esp
.text:000004CB                 cmp     [ebp+arg_4], 7
.text:000004CF                 jb      short loc_4D8
.text:000004D1                 mov     eax, 80070057h
.text:000004D6                 jmp     short loc_505
.text:000004D8 ; ---------------------------------------------------------------------------
.text:000004D8
.text:000004D8 loc_4D8:                                ; CODE XREF: NArchive::NParser::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:000004D8                 mov     eax, [ebp+arg_4]
.text:000004DB                 movzx   ecx, _kProps[eax]
.text:000004E2                 mov     edx, [ebp+arg_C]
.text:000004E5                 mov     [edx], ecx
.text:000004E7                 mov     eax, [ebp+arg_C]
.text:000004EA                 mov     ecx, [eax]
.text:000004EC                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:000004F4                 mov     eax, [ebp+arg_10]
.text:000004F7                 mov     [eax], dx
.text:000004FA                 mov     ecx, [ebp+arg_8]
.text:000004FD                 mov     dword ptr [ecx], 0
.text:00000503                 xor     eax, eax
.text:00000505
.text:00000505 loc_505:                                ; CODE XREF: NArchive::NParser::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:00000505                 pop     ebp
.text:00000506                 retn    14h
.text:00000506 ?GetPropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:00000506
.text:00000506 ; ---------------------------------------------------------------------------
.text:00000509                 db 0Fh dup(0CCh)
.text:00000518
.text:00000518 ; =============== S U B R O U T I N E =======================================
.text:00000518
.text:00000518 ; Attributes: bp-based frame
.text:00000518
.text:00000518 ; __int32 __stdcall NArchive::NParser::CHandler::GetNumberOfArchiveProperties(NArchive::NParser::CHandler *this, unsigned int *)
.text:00000518                 public ?GetNumberOfArchiveProperties@CHandler@NParser@NArchive@@UAGJPAI@Z
.text:00000518 ?GetNumberOfArchiveProperties@CHandler@NParser@NArchive@@UAGJPAI@Z proc near
.text:00000518                                         ; DATA XREF: .rdata:0000EF48o
.text:00000518
.text:00000518 this            = dword ptr  8
.text:00000518 arg_4           = dword ptr  0Ch
.text:00000518
.text:00000518                 push    ebp
.text:00000519                 mov     ebp, esp
.text:0000051B                 mov     eax, [ebp+arg_4]
.text:0000051E                 mov     dword ptr [eax], 0
.text:00000524                 xor     eax, eax
.text:00000526                 pop     ebp
.text:00000527                 retn    8
.text:00000527 ?GetNumberOfArchiveProperties@CHandler@NParser@NArchive@@UAGJPAI@Z endp
.text:00000527
.text:00000527 ; ---------------------------------------------------------------------------
.text:0000052A                 db 0Eh dup(0CCh)
.text:00000538
.text:00000538 ; =============== S U B R O U T I N E =======================================
.text:00000538
.text:00000538 ; Attributes: bp-based frame
.text:00000538
.text:00000538 ; __int32 __stdcall NArchive::NParser::CHandler::GetArchivePropertyInfo(NArchive::NParser::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000538                 public ?GetArchivePropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000538 ?GetArchivePropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000538                                         ; DATA XREF: .rdata:0000EF4Co
.text:00000538
.text:00000538 this            = dword ptr  8
.text:00000538
.text:00000538                 push    ebp
.text:00000539                 mov     ebp, esp
.text:0000053B                 mov     eax, 80004001h
.text:00000540                 pop     ebp
.text:00000541                 retn    14h
.text:00000541 ?GetArchivePropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:00000541
.text:00000541 ; ---------------------------------------------------------------------------
.text:00000544                 align 8
.text:00000548
.text:00000548 ; =============== S U B R O U T I N E =======================================
.text:00000548
.text:00000548 ; Attributes: bp-based frame
.text:00000548
.text:00000548 ; __int32 __stdcall NArchive::NParser::CHandler::GetArchiveProperty(NArchive::NParser::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:00000548                 public ?GetArchiveProperty@CHandler@NParser@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000548 ?GetArchiveProperty@CHandler@NParser@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:00000548                                         ; DATA XREF: .rdata:0000EF3Co
.text:00000548
.text:00000548 this            = dword ptr  8
.text:00000548 arg_8           = dword ptr  10h
.text:00000548
.text:00000548                 push    ebp
.text:00000549                 mov     ebp, esp
.text:0000054B                 xor     eax, eax
.text:0000054D                 mov     ecx, [ebp+arg_8]
.text:00000550                 mov     [ecx], ax
.text:00000553                 xor     eax, eax
.text:00000555                 pop     ebp
.text:00000556                 retn    0Ch
.text:00000556 ?GetArchiveProperty@CHandler@NParser@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:00000556
.text:00000556 ; ---------------------------------------------------------------------------
.text:00000559                 db 0Fh dup(0CCh)
.text:00000568
.text:00000568 ; =============== S U B R O U T I N E =======================================
.text:00000568
.text:00000568 ; Attributes: bp-based frame
.text:00000568
.text:00000568 ; __int32 __cdecl NArchive::NParser::CHandler::Open(NArchive::NParser::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:00000568                 public ?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00000568 ?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:00000568                                         ; DATA XREF: .rdata:0000EF28o
.text:00000568
.text:00000568 var_14          = dword ptr -14h
.text:00000568 var_10          = dword ptr -10h
.text:00000568 var_C           = dword ptr -0Ch
.text:00000568 var_4           = dword ptr -4
.text:00000568 this            = dword ptr  8
.text:00000568 arg_4           = dword ptr  0Ch
.text:00000568
.text:00000568 ; FUNCTION CHUNK AT .text:000005F0 SIZE 0000001E BYTES
.text:00000568
.text:00000568                 push    ebp
.text:00000569                 mov     ebp, esp
.text:0000056B                 push    0FFFFFFFFh
.text:0000056D                 push    offset __ehhandler$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00000572                 mov     eax, large fs:0
.text:00000578                 push    eax
.text:00000579                 push    ecx
.text:0000057A                 push    ecx
.text:0000057B                 push    ebx
.text:0000057C                 push    esi
.text:0000057D                 push    edi
.text:0000057E                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000585                 mov     eax, dword ptr ds:___security_cookie
.text:0000058A                 xor     eax, ebp
.text:0000058C                 push    eax
.text:0000058D                 lea     eax, [ebp+var_C]
.text:00000590                 mov     large fs:0, eax
.text:00000596                 mov     [ebp+var_10], esp
.text:00000599                 mov     [ebp+var_4], 0
.text:000005A0                 mov     esi, esp
.text:000005A2                 mov     eax, [ebp+this]
.text:000005A5                 push    eax
.text:000005A6                 mov     ecx, [ebp+this]
.text:000005A9                 mov     edx, [ecx]
.text:000005AB                 mov     eax, [edx+10h]
.text:000005AE                 call    eax
.text:000005B0                 cmp     esi, esp
.text:000005B2                 call    __RTC_CheckEsp
.text:000005B7                 mov     ecx, [ebp+arg_4]
.text:000005BA                 push    ecx
.text:000005BB                 mov     ecx, [ebp+this]
.text:000005BE                 add     ecx, 20h ; ' '
.text:000005C1                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:000005C6                 xor     eax, eax
.text:000005C8                 jmp     short loc_5F0
.text:000005C8 ?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text:000005C8
.text:000005CA
.text:000005CA ; =============== S U B R O U T I N E =======================================
.text:000005CA
.text:000005CA
.text:000005CA __catch$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 proc near
.text:000005CA                                         ; DATA XREF: .xdata$x:0000CCD0o
.text:000005CA                 mov     dword ptr [ebp-14h], 8007000Eh
.text:000005D1                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000005D8                 mov     eax, offset $LN7
.text:000005DD                 retn
.text:000005DD __catch$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 endp
.text:000005DD
.text:000005DE ; ---------------------------------------------------------------------------
.text:000005DE                 mov     eax, offset __tryend$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
.text:000005E3                 retn
.text:000005E4 ; ---------------------------------------------------------------------------
.text:000005E4
.text:000005E4 __tryend$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
.text:000005E4                                         ; DATA XREF: .text:000005DEo
.text:000005E4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000005EB                 jmp     short loc_5F0
.text:000005ED ; ---------------------------------------------------------------------------
.text:000005ED
.text:000005ED $LN7:                                   ; DATA XREF: __catch$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0+Eo
.text:000005ED                 mov     eax, [ebp-14h]
.text:000005F0 ; START OF FUNCTION CHUNK FOR ?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000005F0
.text:000005F0 loc_5F0:                                ; CODE XREF: NArchive::NParser::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+60j
.text:000005F0                                         ; .text:000005EBj
.text:000005F0                 mov     ecx, [ebp+var_C]
.text:000005F3                 mov     large fs:0, ecx
.text:000005FA                 pop     ecx
.text:000005FB                 pop     edi
.text:000005FC                 pop     esi
.text:000005FD                 pop     ebx
.text:000005FE                 add     esp, 14h
.text:00000601                 cmp     ebp, esp
.text:00000603                 call    __RTC_CheckEsp
.text:00000608                 mov     esp, ebp
.text:0000060A                 pop     ebp
.text:0000060B                 retn    10h
.text:0000060B ; END OF FUNCTION CHUNK FOR ?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:0000060B ; ---------------------------------------------------------------------------
.text:0000060E                 db 0Ah dup(0CCh)
.text:00000618
.text:00000618 ; =============== S U B R O U T I N E =======================================
.text:00000618
.text:00000618 ; Attributes: bp-based frame
.text:00000618
.text:00000618 ; __int32 __stdcall NArchive::NParser::CHandler::Close(NArchive::NParser::CHandler *this)
.text:00000618                 public ?Close@CHandler@NParser@NArchive@@UAGJXZ
.text:00000618 ?Close@CHandler@NParser@NArchive@@UAGJXZ proc near
.text:00000618                                         ; DATA XREF: .rdata:0000EF2Co
.text:00000618
.text:00000618 this            = dword ptr  8
.text:00000618
.text:00000618                 push    ebp
.text:00000619                 mov     ebp, esp
.text:0000061B                 mov     ecx, [ebp+this]
.text:0000061E                 add     ecx, 0Ch
.text:00000621                 call    ?Clear@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NParser::CParseItem>::Clear(void)
.text:00000626                 mov     ecx, [ebp+this]
.text:00000629                 add     ecx, 20h ; ' '
.text:0000062C                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:00000631                 xor     eax, eax
.text:00000633                 cmp     ebp, esp
.text:00000635                 call    __RTC_CheckEsp
.text:0000063A                 pop     ebp
.text:0000063B                 retn    4
.text:0000063B ?Close@CHandler@NParser@NArchive@@UAGJXZ endp
.text:0000063B
.text:0000063B ; ---------------------------------------------------------------------------
.text:0000063E                 db 0Ah dup(0CCh)
.text:00000648
.text:00000648 ; =============== S U B R O U T I N E =======================================
.text:00000648
.text:00000648 ; Attributes: bp-based frame
.text:00000648
.text:00000648 ; __int32 __stdcall NArchive::NParser::CHandler::GetNumberOfItems(NArchive::NParser::CHandler *this, unsigned int *)
.text:00000648                 public ?GetNumberOfItems@CHandler@NParser@NArchive@@UAGJPAI@Z
.text:00000648 ?GetNumberOfItems@CHandler@NParser@NArchive@@UAGJPAI@Z proc near
.text:00000648                                         ; DATA XREF: .rdata:0000EF30o
.text:00000648
.text:00000648 this            = dword ptr  8
.text:00000648 arg_4           = dword ptr  0Ch
.text:00000648
.text:00000648                 push    ebp
.text:00000649                 mov     ebp, esp
.text:0000064B                 mov     ecx, [ebp+this]
.text:0000064E                 add     ecx, 0Ch
.text:00000651                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:00000656                 mov     ecx, [ebp+arg_4]
.text:00000659                 mov     [ecx], eax
.text:0000065B                 xor     eax, eax
.text:0000065D                 cmp     ebp, esp
.text:0000065F                 call    __RTC_CheckEsp
.text:00000664                 pop     ebp
.text:00000665                 retn    8
.text:00000665 ?GetNumberOfItems@CHandler@NParser@NArchive@@UAGJPAI@Z endp
.text:00000665
.text:00000668
.text:00000668 ; =============== S U B R O U T I N E =======================================
.text:00000668
.text:00000668 ; Attributes: bp-based frame
.text:00000668
.text:00000668 ; __int32 __cdecl NArchive::NParser::CHandler::GetProperty(NArchive::NParser::CHandler *this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:00000668                 public ?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000668 ?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:00000668                                         ; DATA XREF: .rdata:0000EF34o
.text:00000668
.text:00000668 var_A8          = byte ptr -0A8h
.text:00000668 var_A7          = byte ptr -0A7h
.text:00000668 var_A6          = byte ptr -0A6h
.text:00000668 var_A5          = byte ptr -0A5h
.text:00000668 var_A4          = dword ptr -0A4h
.text:00000668 var_A0          = dword ptr -0A0h
.text:00000668 var_9C          = dword ptr -9Ch
.text:00000668 var_98          = dword ptr -98h
.text:00000668 var_90          = dword ptr -90h
.text:00000668 var_88          = byte ptr -88h
.text:00000668 var_74          = word ptr -74h
.text:00000668 var_30          = dword ptr -30h
.text:00000668 var_28          = byte ptr -28h
.text:00000668 var_14          = dword ptr -14h
.text:00000668 var_10          = dword ptr -10h
.text:00000668 var_C           = dword ptr -0Ch
.text:00000668 var_4           = dword ptr -4
.text:00000668 this            = dword ptr  8
.text:00000668 arg_4           = dword ptr  0Ch
.text:00000668 arg_8           = dword ptr  10h
.text:00000668 arg_C           = dword ptr  14h
.text:00000668
.text:00000668 ; FUNCTION CHUNK AT .text:0000093D SIZE 0000003C BYTES
.text:00000668
.text:00000668                 push    ebp
.text:00000669                 mov     ebp, esp
.text:0000066B                 push    0FFFFFFFFh
.text:0000066D                 push    offset __ehhandler$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000672                 mov     eax, large fs:0
.text:00000678                 push    eax
.text:00000679                 push    ecx
.text:0000067A                 sub     esp, 98h
.text:00000680                 push    ebx
.text:00000681                 push    esi
.text:00000682                 push    edi
.text:00000683                 lea     edi, [ebp+var_A8]
.text:00000689                 mov     ecx, 26h ; '&'
.text:0000068E                 mov     eax, 0CCCCCCCCh
.text:00000693                 rep stosd
.text:00000695                 mov     eax, dword ptr ds:___security_cookie
.text:0000069A                 xor     eax, ebp
.text:0000069C                 mov     [ebp+var_14], eax
.text:0000069F                 push    eax
.text:000006A0                 lea     eax, [ebp+var_C]
.text:000006A3                 mov     large fs:0, eax
.text:000006A9                 mov     [ebp+var_10], esp
.text:000006AC                 mov     [ebp+var_4], 0
.text:000006B3                 lea     ecx, [ebp+var_28] ; this
.text:000006B6                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000006BB                 mov     [ebp+var_98], eax
.text:000006C1                 mov     byte ptr [ebp+var_4], 1
.text:000006C5                 mov     eax, [ebp+arg_4]
.text:000006C8                 push    eax
.text:000006C9                 mov     ecx, [ebp+this]
.text:000006CC                 add     ecx, 0Ch
.text:000006CF                 call    ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[](uint)
.text:000006D4                 mov     [ebp+var_9C], eax
.text:000006DA                 mov     ecx, [ebp+var_9C]
.text:000006E0                 mov     [ebp+var_30], ecx
.text:000006E3                 mov     edx, [ebp+arg_8]
.text:000006E6                 mov     [ebp+var_A0], edx
.text:000006EC                 mov     eax, [ebp+var_A0]
.text:000006F2                 sub     eax, 3
.text:000006F5                 mov     [ebp+var_A0], eax
.text:000006FB                 cmp     [ebp+var_A0], 4Bh ; 'K' ; switch 76 cases
.text:00000702                 ja      $LN18           ; jumptable 00000715 default case
.text:00000708                 mov     ecx, [ebp+var_A0]
.text:0000070E                 movzx   edx, ds:$LN30[ecx]
.text:00000715                 jmp     ds:$LN37[edx*4] ; switch jump
.text:0000071C ; ---------------------------------------------------------------------------
.text:0000071C
.text:0000071C $LN17:                                  ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:0000071C                                         ; DATA XREF: .text:$LN37o
.text:0000071C                 lea     eax, [ebp+var_74] ; jumptable 00000715 case 0
.text:0000071F                 push    eax             ; wchar_t *
.text:00000720                 mov     ecx, [ebp+arg_4]
.text:00000723                 add     ecx, 1
.text:00000726                 push    ecx             ; unsigned int
.text:00000727                 call    ?ConvertUInt32ToString@@YGXIPA_W@Z ; ConvertUInt32ToString(uint,wchar_t *)
.text:0000072C                 lea     edx, [ebp+var_74]
.text:0000072F                 push    edx
.text:00000730                 lea     ecx, [ebp+var_88]
.text:00000736                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:0000073B                 mov     [ebp+var_A4], eax
.text:00000741                 mov     byte ptr [ebp+var_4], 2
.text:00000745                 mov     ecx, [ebp+var_30]
.text:00000748                 add     ecx, 10h        ; this
.text:0000074B                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000750                 mov     [ebp+var_A5], al
.text:00000756                 movzx   eax, [ebp+var_A5]
.text:0000075D                 test    eax, eax
.text:0000075F                 jnz     short loc_780
.text:00000761                 push    2Eh ; '.'
.text:00000763                 lea     ecx, [ebp+var_88]
.text:00000769                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:0000076E                 mov     ecx, [ebp+var_30]
.text:00000771                 add     ecx, 10h
.text:00000774                 push    ecx
.text:00000775                 lea     ecx, [ebp+var_88]
.text:0000077B                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00000780
.text:00000780 loc_780:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F7j
.text:00000780                 mov     ecx, [ebp+var_30]
.text:00000783                 add     ecx, 1Ch        ; this
.text:00000786                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000078B                 mov     [ebp+var_A6], al
.text:00000791                 movzx   edx, [ebp+var_A6]
.text:00000798                 test    edx, edx
.text:0000079A                 jnz     short loc_7BB
.text:0000079C                 push    2Eh ; '.'
.text:0000079E                 lea     ecx, [ebp+var_88]
.text:000007A4                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:000007A9                 mov     eax, [ebp+var_30]
.text:000007AC                 add     eax, 1Ch
.text:000007AF                 push    eax
.text:000007B0                 lea     ecx, [ebp+var_88]
.text:000007B6                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:000007BB
.text:000007BB loc_7BB:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+132j
.text:000007BB                 lea     ecx, [ebp+var_88]
.text:000007C1                 push    ecx
.text:000007C2                 lea     ecx, [ebp+var_28]
.text:000007C5                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:000007CA                 mov     byte ptr [ebp+var_4], 1
.text:000007CE                 lea     ecx, [ebp+var_88] ; this
.text:000007D4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000007D9                 jmp     $LN18           ; jumptable 00000715 default case
.text:000007DE ; ---------------------------------------------------------------------------
.text:000007DE
.text:000007DE $LN14:                                  ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:000007DE                                         ; DATA XREF: .text:$LN37o
.text:000007DE                 mov     edx, [ebp+var_30] ; jumptable 00000715 cases 4,5
.text:000007E1                 mov     eax, [edx+0Ch]
.text:000007E4                 push    eax
.text:000007E5                 mov     ecx, [edx+8]
.text:000007E8                 push    ecx
.text:000007E9                 lea     ecx, [ebp+var_28]
.text:000007EC                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000007F1                 jmp     $LN18           ; jumptable 00000715 default case
.text:000007F6 ; ---------------------------------------------------------------------------
.text:000007F6
.text:000007F6 $LN13_0:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:000007F6                                         ; DATA XREF: .text:$LN37o
.text:000007F6                 mov     edx, [ebp+var_30] ; jumptable 00000715 case 33
.text:000007F9                 mov     eax, [edx+4]
.text:000007FC                 push    eax
.text:000007FD                 mov     ecx, [edx]
.text:000007FF                 push    ecx
.text:00000800                 lea     ecx, [ebp+var_28]
.text:00000803                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000808                 jmp     $LN18           ; jumptable 00000715 default case
.text:0000080D ; ---------------------------------------------------------------------------
.text:0000080D
.text:0000080D $LN12_0:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:0000080D                                         ; DATA XREF: .text:$LN37o
.text:0000080D                 mov     edx, [ebp+var_30] ; jumptable 00000715 case 75
.text:00000810                 movzx   eax, byte ptr [edx+49h]
.text:00000814                 test    eax, eax
.text:00000816                 jz      short loc_82B
.text:00000818                 mov     ecx, [ebp+var_30]
.text:0000081B                 mov     edx, [ecx+54h]
.text:0000081E                 push    edx
.text:0000081F                 mov     eax, [ecx+50h]
.text:00000822                 push    eax
.text:00000823                 lea     ecx, [ebp+var_28]
.text:00000826                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:0000082B
.text:0000082B loc_82B:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1AEj
.text:0000082B                 jmp     $LN18           ; jumptable 00000715 default case
.text:00000830 ; ---------------------------------------------------------------------------
.text:00000830
.text:00000830 $LN10_0:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000830                                         ; DATA XREF: .text:$LN37o
.text:00000830                 mov     ecx, [ebp+var_30] ; jumptable 00000715 case 29
.text:00000833                 movzx   edx, byte ptr [ecx+4Bh]
.text:00000837                 test    edx, edx
.text:00000839                 jz      short loc_84E
.text:0000083B                 mov     eax, [ebp+var_30]
.text:0000083E                 mov     ecx, [eax+64h]
.text:00000841                 push    ecx
.text:00000842                 mov     edx, [eax+60h]
.text:00000845                 push    edx
.text:00000846                 lea     ecx, [ebp+var_28]
.text:00000849                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:0000084E
.text:0000084E loc_84E:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1D1j
.text:0000084E                 jmp     $LN18           ; jumptable 00000715 default case
.text:00000853 ; ---------------------------------------------------------------------------
.text:00000853
.text:00000853 $LN8:                                   ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000853                                         ; DATA XREF: .text:$LN37o
.text:00000853                 mov     eax, [ebp+var_30] ; jumptable 00000715 case 28
.text:00000856                 movzx   ecx, byte ptr [eax+4Ah]
.text:0000085A                 test    ecx, ecx
.text:0000085C                 jz      short loc_871
.text:0000085E                 mov     edx, [ebp+var_30]
.text:00000861                 mov     eax, [edx+5Ch]
.text:00000864                 push    eax
.text:00000865                 mov     ecx, [edx+58h]
.text:00000868                 push    ecx
.text:00000869                 lea     ecx, [ebp+var_28]
.text:0000086C                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000871
.text:00000871 loc_871:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1F4j
.text:00000871                 jmp     short $LN18     ; jumptable 00000715 default case
.text:00000873 ; ---------------------------------------------------------------------------
.text:00000873
.text:00000873 $LN6:                                   ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000873                                         ; DATA XREF: .text:$LN37o
.text:00000873                 mov     edx, [ebp+var_30] ; jumptable 00000715 case 9
.text:00000876                 movzx   eax, byte ptr [edx+48h]
.text:0000087A                 test    eax, eax
.text:0000087C                 jz      short loc_88D
.text:0000087E                 mov     ecx, [ebp+var_30]
.text:00000881                 add     ecx, 28h ; '('
.text:00000884                 push    ecx
.text:00000885                 lea     ecx, [ebp+var_28]
.text:00000888                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:0000088D
.text:0000088D loc_88D:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+214j
.text:0000088D                 jmp     short $LN18     ; jumptable 00000715 default case
.text:0000088F ; ---------------------------------------------------------------------------
.text:0000088F
.text:0000088F $LN4:                                   ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:0000088F                                         ; DATA XREF: .text:$LN37o
.text:0000088F                 mov     ecx, [ebp+var_30] ; jumptable 00000715 case 25
.text:00000892                 add     ecx, 30h ; '0'  ; this
.text:00000895                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000089A                 mov     [ebp+var_A7], al
.text:000008A0                 movzx   edx, [ebp+var_A7]
.text:000008A7                 test    edx, edx
.text:000008A9                 jnz     short loc_8BA
.text:000008AB                 mov     eax, [ebp+var_30]
.text:000008AE                 add     eax, 30h ; '0'
.text:000008B1                 push    eax
.text:000008B2                 lea     ecx, [ebp+var_28]
.text:000008B5                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:000008BA
.text:000008BA loc_8BA:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+241j
.text:000008BA                 jmp     short $LN18     ; jumptable 00000715 default case
.text:000008BC ; ---------------------------------------------------------------------------
.text:000008BC
.text:000008BC $LN2:                                   ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:000008BC                                         ; DATA XREF: .text:$LN37o
.text:000008BC                 mov     ecx, [ebp+var_30] ; jumptable 00000715 case 17
.text:000008BF                 add     ecx, 3Ch ; '<'  ; this
.text:000008C2                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000008C7                 mov     [ebp+var_A8], al
.text:000008CD                 movzx   ecx, [ebp+var_A8]
.text:000008D4                 test    ecx, ecx
.text:000008D6                 jnz     short $LN18     ; jumptable 00000715 default case
.text:000008D8                 mov     edx, [ebp+var_30]
.text:000008DB                 add     edx, 3Ch ; '<'
.text:000008DE                 push    edx
.text:000008DF                 lea     ecx, [ebp+var_28]
.text:000008E2                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:000008E7
.text:000008E7 $LN18:                                  ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+9Aj
.text:000008E7                                         ; NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj ...
.text:000008E7                 mov     eax, [ebp+arg_C] ; jumptable 00000715 default case
.text:000008EA                 push    eax             ; struct tagPROPVARIANT *
.text:000008EB                 lea     ecx, [ebp+var_28] ; this
.text:000008EE                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:000008F3                 mov     [ebp+var_90], 0
.text:000008FD                 mov     byte ptr [ebp+var_4], 0
.text:00000901                 lea     ecx, [ebp+var_28] ; this
.text:00000904                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000909                 mov     eax, [ebp+var_90]
.text:0000090F                 jmp     short loc_93D
.text:0000090F ?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text:0000090F
.text:00000911
.text:00000911 ; =============== S U B R O U T I N E =======================================
.text:00000911
.text:00000911
.text:00000911 __catch$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00000911                                         ; DATA XREF: .xdata$x:0000CD28o
.text:00000911                 mov     dword ptr [ebp-94h], 8007000Eh
.text:0000091B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000922                 mov     eax, offset $LN28
.text:00000927                 retn
.text:00000927 __catch$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 endp
.text:00000927
.text:00000928 ; ---------------------------------------------------------------------------
.text:00000928                 mov     eax, offset __tryend$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
.text:0000092D                 retn
.text:0000092E ; ---------------------------------------------------------------------------
.text:0000092E
.text:0000092E __tryend$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
.text:0000092E                                         ; DATA XREF: .text:00000928o
.text:0000092E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000935                 jmp     short loc_93D
.text:00000937 ; ---------------------------------------------------------------------------
.text:00000937
.text:00000937 $LN28:                                  ; DATA XREF: __catch$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0+11o
.text:00000937                 mov     eax, [ebp-94h]
.text:0000093D ; START OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:0000093D
.text:0000093D loc_93D:                                ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2A7j
.text:0000093D                                         ; .text:00000935j
.text:0000093D                 push    edx
.text:0000093E                 mov     ecx, ebp
.text:00000940                 push    eax
.text:00000941                 lea     edx, $LN36
.text:00000947                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000094C                 pop     eax
.text:0000094D                 pop     edx
.text:0000094E                 mov     ecx, [ebp+var_C]
.text:00000951                 mov     large fs:0, ecx
.text:00000958                 pop     ecx
.text:00000959                 pop     edi
.text:0000095A                 pop     esi
.text:0000095B                 pop     ebx
.text:0000095C                 mov     ecx, [ebp+var_14]
.text:0000095F                 xor     ecx, ebp
.text:00000961                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000966                 add     esp, 0A8h
.text:0000096C                 cmp     ebp, esp
.text:0000096E                 call    __RTC_CheckEsp
.text:00000973                 mov     esp, ebp
.text:00000975                 pop     ebp
.text:00000976                 retn    10h
.text:00000976 ; END OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000976 ; ---------------------------------------------------------------------------
.text:00000979                 align 4
.text:0000097C $LN36           dd 3                    ; DATA XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2D9o
.text:00000980                 dd offset $LN35
.text:00000984 $LN35           dd 0FFFFFFD8h, 10h      ; DATA XREF: .text:00000980o
.text:0000098C                 dd offset $LN31         ; "prop"
.text:00000990                 dd 0FFFFFF8Ch, 40h
.text:00000998                 dd offset $LN32
.text:0000099C                 dd 0FFFFFF78h, 0Ch
.text:000009A4                 dd offset $LN33
.text:000009A8 $LN33           db 73h, 0               ; DATA XREF: .text:000009A4o
.text:000009AA $LN32           dw 7A73h                ; DATA XREF: .text:00000998o
.text:000009AC                 db 0
.text:000009AD $LN31           db 'prop',0             ; DATA XREF: .text:0000098Co
.text:000009B2                 align 4
.text:000009B4 $LN37           dd offset $LN17, offset $LN14, offset $LN6, offset $LN2
.text:000009B4                                         ; DATA XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADr
.text:000009B4                 dd offset $LN4, offset $LN8, offset $LN10_0, offset $LN13_0 ; jump table for switch statement
.text:000009B4                 dd offset $LN12_0, offset $LN18
.text:000009DC $LN30           db      0,     9,     9,     9
.text:000009DC                                         ; DATA XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+A6r
.text:000009DC                 db      1,     1,     9,     9 ; indirect table for switch statement
.text:000009DC                 db      9,     2,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     3,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     4,     9,     9
.text:000009DC                 db      5,     6,     9,     9
.text:000009DC                 db      9,     7,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     9,     9,     9
.text:000009DC                 db      9,     9,     9,     8
.text:00000A28
.text:00000A28 ; =============== S U B R O U T I N E =======================================
.text:00000A28
.text:00000A28 ; Attributes: bp-based frame
.text:00000A28
.text:00000A28 ; __int32 __cdecl NArchive::NParser::CHandler::Extract(NArchive::NParser::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:00000A28                 public ?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00000A28 ?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:00000A28                                         ; DATA XREF: .rdata:0000EF38o
.text:00000A28
.text:00000A28 var_180         = dword ptr -180h
.text:00000A28 var_17C         = dword ptr -17Ch
.text:00000A28 var_178         = dword ptr -178h
.text:00000A28 var_174         = dword ptr -174h
.text:00000A28 var_170         = dword ptr -170h
.text:00000A28 var_16C         = dword ptr -16Ch
.text:00000A28 var_168         = dword ptr -168h
.text:00000A28 var_164         = dword ptr -164h
.text:00000A28 var_160         = dword ptr -160h
.text:00000A28 var_15C         = dword ptr -15Ch
.text:00000A28 var_158         = dword ptr -158h
.text:00000A28 var_154         = dword ptr -154h
.text:00000A28 var_150         = qword ptr -150h
.text:00000A28 var_148         = dword ptr -148h
.text:00000A28 var_144         = dword ptr -144h
.text:00000A28 var_13D         = byte ptr -13Dh
.text:00000A28 var_13C         = dword ptr -13Ch
.text:00000A28 var_138         = dword ptr -138h
.text:00000A28 var_134         = dword ptr -134h
.text:00000A28 var_130         = dword ptr -130h
.text:00000A28 var_12C         = dword ptr -12Ch
.text:00000A28 var_128         = dword ptr -128h
.text:00000A28 var_124         = dword ptr -124h
.text:00000A28 var_120         = dword ptr -120h
.text:00000A28 var_11C         = dword ptr -11Ch
.text:00000A28 var_118         = dword ptr -118h
.text:00000A28 var_114         = dword ptr -114h
.text:00000A28 var_110         = dword ptr -110h
.text:00000A28 var_10C         = dword ptr -10Ch
.text:00000A28 var_108         = dword ptr -108h
.text:00000A28 var_104         = dword ptr -104h
.text:00000A28 var_100         = dword ptr -100h
.text:00000A28 var_FC          = dword ptr -0FCh
.text:00000A28 var_F8          = dword ptr -0F8h
.text:00000A28 var_F4          = dword ptr -0F4h
.text:00000A28 var_F0          = dword ptr -0F0h
.text:00000A28 var_EC          = dword ptr -0ECh
.text:00000A28 var_E8          = dword ptr -0E8h
.text:00000A28 var_E4          = dword ptr -0E4h
.text:00000A28 var_DC          = dword ptr -0DCh
.text:00000A28 var_D8          = dword ptr -0D8h
.text:00000A28 var_D4          = dword ptr -0D4h
.text:00000A28 var_D0          = dword ptr -0D0h
.text:00000A28 var_CC          = dword ptr -0CCh
.text:00000A28 var_C8          = dword ptr -0C8h
.text:00000A28 var_C4          = dword ptr -0C4h
.text:00000A28 var_C0          = dword ptr -0C0h
.text:00000A28 var_BC          = dword ptr -0BCh
.text:00000A28 var_B8          = dword ptr -0B8h
.text:00000A28 var_B4          = dword ptr -0B4h
.text:00000A28 var_B0          = dword ptr -0B0h
.text:00000A28 var_AC          = dword ptr -0ACh
.text:00000A28 var_A8          = dword ptr -0A8h
.text:00000A28 var_A4          = dword ptr -0A4h
.text:00000A28 var_A0          = dword ptr -0A0h
.text:00000A28 var_9C          = dword ptr -9Ch
.text:00000A28 var_98          = dword ptr -98h
.text:00000A28 var_94          = dword ptr -94h
.text:00000A28 var_90          = dword ptr -90h
.text:00000A28 var_89          = byte ptr -89h
.text:00000A28 var_88          = qword ptr -88h
.text:00000A28 var_80          = dword ptr -80h
.text:00000A28 var_7C          = dword ptr -7Ch
.text:00000A28 var_78          = dword ptr -78h
.text:00000A28 var_74          = dword ptr -74h
.text:00000A28 var_6C          = byte ptr -6Ch
.text:00000A28 var_64          = dword ptr -64h
.text:00000A28 var_5C          = byte ptr -5Ch
.text:00000A28 var_54          = dword ptr -54h
.text:00000A28 var_4C          = byte ptr -4Ch
.text:00000A28 var_44          = dword ptr -44h
.text:00000A28 var_3C          = byte ptr -3Ch
.text:00000A28 var_34          = dword ptr -34h
.text:00000A28 var_2C          = byte ptr -2Ch
.text:00000A28 var_24          = dword ptr -24h
.text:00000A28 var_20          = dword ptr -20h
.text:00000A28 var_1C          = dword ptr -1Ch
.text:00000A28 var_18          = dword ptr -18h
.text:00000A28 var_11          = byte ptr -11h
.text:00000A28 var_10          = dword ptr -10h
.text:00000A28 var_C           = dword ptr -0Ch
.text:00000A28 var_4           = dword ptr -4
.text:00000A28 this            = dword ptr  8
.text:00000A28 arg_4           = dword ptr  0Ch
.text:00000A28 arg_8           = dword ptr  10h
.text:00000A28 arg_C           = dword ptr  14h
.text:00000A28 arg_10          = dword ptr  18h
.text:00000A28
.text:00000A28 ; FUNCTION CHUNK AT .text:00001382 SIZE 00000032 BYTES
.text:00000A28
.text:00000A28                 push    ebp
.text:00000A29                 mov     ebp, esp
.text:00000A2B                 push    0FFFFFFFFh
.text:00000A2D                 push    offset __ehhandler$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00000A32                 mov     eax, large fs:0
.text:00000A38                 push    eax
.text:00000A39                 push    ecx
.text:00000A3A                 sub     esp, 170h
.text:00000A40                 push    ebx
.text:00000A41                 push    esi
.text:00000A42                 push    edi
.text:00000A43                 lea     edi, [ebp+var_180]
.text:00000A49                 mov     ecx, 5Ch ; '\'
.text:00000A4E                 mov     eax, 0CCCCCCCCh
.text:00000A53                 rep stosd
.text:00000A55                 mov     eax, dword ptr ds:___security_cookie
.text:00000A5A                 xor     eax, ebp
.text:00000A5C                 push    eax
.text:00000A5D                 lea     eax, [ebp+var_C]
.text:00000A60                 mov     large fs:0, eax
.text:00000A66                 mov     [ebp+var_10], esp
.text:00000A69                 mov     [ebp+var_4], 0
.text:00000A70                 xor     eax, eax
.text:00000A72                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:00000A76                 setz    al
.text:00000A79                 mov     [ebp+var_11], al
.text:00000A7C                 movzx   ecx, [ebp+var_11]
.text:00000A80                 test    ecx, ecx
.text:00000A82                 jz      short loc_A9E
.text:00000A84                 mov     ecx, [ebp+this]
.text:00000A87                 add     ecx, 0Ch
.text:00000A8A                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:00000A8F                 mov     [ebp+var_E4], eax
.text:00000A95                 mov     edx, [ebp+var_E4]
.text:00000A9B                 mov     [ebp+arg_8], edx
.text:00000A9E
.text:00000A9E loc_A9E:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5Aj
.text:00000A9E                 mov     ecx, [ebp+this]
.text:00000AA1                 add     ecx, 20h ; ' '
.text:00000AA4                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000AA9                 mov     [ebp+var_E8], eax
.text:00000AAF                 cmp     [ebp+var_E8], 0
.text:00000AB6                 jz      short loc_AC5
.text:00000AB8                 cmp     [ebp+arg_8], 0
.text:00000ABC                 jnz     short loc_AC5
.text:00000ABE                 xor     eax, eax
.text:00000AC0                 jmp     loc_1382
.text:00000AC5 ; ---------------------------------------------------------------------------
.text:00000AC5
.text:00000AC5 loc_AC5:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8Ej
.text:00000AC5                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+94j
.text:00000AC5                 mov     [ebp+var_1C], 0
.text:00000ACC                 mov     [ebp+var_18], 0
.text:00000AD3                 mov     [ebp+var_20], 0
.text:00000ADA                 jmp     short loc_AE5
.text:00000ADC ; ---------------------------------------------------------------------------
.text:00000ADC
.text:00000ADC loc_ADC:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+117j
.text:00000ADC                 mov     eax, [ebp+var_20]
.text:00000ADF                 add     eax, 1
.text:00000AE2                 mov     [ebp+var_20], eax
.text:00000AE5
.text:00000AE5 loc_AE5:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B2j
.text:00000AE5                 mov     ecx, [ebp+var_20]
.text:00000AE8                 cmp     ecx, [ebp+arg_8]
.text:00000AEB                 jnb     short loc_B41
.text:00000AED                 movzx   edx, [ebp+var_11]
.text:00000AF1                 test    edx, edx
.text:00000AF3                 jz      short loc_B00
.text:00000AF5                 mov     eax, [ebp+var_20]
.text:00000AF8                 mov     [ebp+var_EC], eax
.text:00000AFE                 jmp     short loc_B0F
.text:00000B00 ; ---------------------------------------------------------------------------
.text:00000B00
.text:00000B00 loc_B00:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+CBj
.text:00000B00                 mov     ecx, [ebp+var_20]
.text:00000B03                 mov     edx, [ebp+arg_4]
.text:00000B06                 mov     eax, [edx+ecx*4]
.text:00000B09                 mov     [ebp+var_EC], eax
.text:00000B0F
.text:00000B0F loc_B0F:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+D6j
.text:00000B0F                 mov     ecx, [ebp+var_EC]
.text:00000B15                 push    ecx
.text:00000B16                 mov     ecx, [ebp+this]
.text:00000B19                 add     ecx, 0Ch
.text:00000B1C                 call    ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[](uint)
.text:00000B21                 mov     [ebp+var_F0], eax
.text:00000B27                 mov     edx, [ebp+var_F0]
.text:00000B2D                 mov     eax, [ebp+var_1C]
.text:00000B30                 add     eax, [edx+8]
.text:00000B33                 mov     ecx, [ebp+var_18]
.text:00000B36                 adc     ecx, [edx+0Ch]
.text:00000B39                 mov     [ebp+var_1C], eax
.text:00000B3C                 mov     [ebp+var_18], ecx
.text:00000B3F                 jmp     short loc_ADC
.text:00000B41 ; ---------------------------------------------------------------------------
.text:00000B41
.text:00000B41 loc_B41:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C3j
.text:00000B41                 mov     esi, esp
.text:00000B43                 mov     edx, [ebp+var_18]
.text:00000B46                 push    edx
.text:00000B47                 mov     eax, [ebp+var_1C]
.text:00000B4A                 push    eax
.text:00000B4B                 mov     ecx, [ebp+arg_10]
.text:00000B4E                 push    ecx
.text:00000B4F                 mov     edx, [ebp+arg_10]
.text:00000B52                 mov     eax, [edx]
.text:00000B54                 mov     ecx, [eax+0Ch]
.text:00000B57                 call    ecx
.text:00000B59                 cmp     esi, esp
.text:00000B5B                 call    __RTC_CheckEsp
.text:00000B60                 mov     [ebp+var_1C], 0
.text:00000B67                 mov     [ebp+var_18], 0
.text:00000B6E                 push    38h ; '8'       ; unsigned int
.text:00000B70                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000B75                 add     esp, 4
.text:00000B78                 mov     [ebp+var_F4], eax
.text:00000B7E                 mov     edx, [ebp+var_F4]
.text:00000B84                 mov     [ebp+var_A8], edx
.text:00000B8A                 mov     byte ptr [ebp+var_4], 1
.text:00000B8E                 cmp     [ebp+var_A8], 0
.text:00000B95                 jz      short loc_BB6
.text:00000B97                 mov     ecx, [ebp+var_A8]
.text:00000B9D                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00000BA2                 mov     [ebp+var_F8], eax
.text:00000BA8                 mov     eax, [ebp+var_F8]
.text:00000BAE                 mov     [ebp+var_FC], eax
.text:00000BB4                 jmp     short loc_BC0
.text:00000BB6 ; ---------------------------------------------------------------------------
.text:00000BB6
.text:00000BB6 loc_BB6:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+16Dj
.text:00000BB6                 mov     [ebp+var_FC], 0
.text:00000BC0
.text:00000BC0 loc_BC0:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+18Cj
.text:00000BC0                 mov     ecx, [ebp+var_FC]
.text:00000BC6                 mov     [ebp+var_A4], ecx
.text:00000BCC                 mov     byte ptr [ebp+var_4], 0
.text:00000BD0                 mov     edx, [ebp+var_A4]
.text:00000BD6                 mov     [ebp+var_24], edx
.text:00000BD9                 mov     eax, [ebp+var_24]
.text:00000BDC                 push    eax
.text:00000BDD                 lea     ecx, [ebp+var_2C]
.text:00000BE0                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00000BE5                 mov     byte ptr [ebp+var_4], 2
.text:00000BE9                 push    0               ; bool
.text:00000BEB                 mov     ecx, [ebp+arg_10]
.text:00000BEE                 push    ecx             ; struct IProgress *
.text:00000BEF                 mov     ecx, [ebp+var_24] ; this
.text:00000BF2                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00000BF7                 push    28h ; '('       ; unsigned int
.text:00000BF9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000BFE                 add     esp, 4
.text:00000C01                 mov     [ebp+var_100], eax
.text:00000C07                 mov     edx, [ebp+var_100]
.text:00000C0D                 mov     [ebp+var_B0], edx
.text:00000C13                 mov     byte ptr [ebp+var_4], 3
.text:00000C17                 cmp     [ebp+var_B0], 0
.text:00000C1E                 jz      short loc_C3F
.text:00000C20                 mov     ecx, [ebp+var_B0]
.text:00000C26                 call    ??0CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:00000C2B                 mov     [ebp+var_104], eax
.text:00000C31                 mov     eax, [ebp+var_104]
.text:00000C37                 mov     [ebp+var_108], eax
.text:00000C3D                 jmp     short loc_C49
.text:00000C3F ; ---------------------------------------------------------------------------
.text:00000C3F
.text:00000C3F loc_C3F:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1F6j
.text:00000C3F                 mov     [ebp+var_108], 0
.text:00000C49
.text:00000C49 loc_C49:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+215j
.text:00000C49                 mov     ecx, [ebp+var_108]
.text:00000C4F                 mov     [ebp+var_AC], ecx
.text:00000C55                 mov     byte ptr [ebp+var_4], 2
.text:00000C59                 mov     edx, [ebp+var_AC]
.text:00000C5F                 mov     [ebp+var_34], edx
.text:00000C62                 mov     eax, [ebp+var_34]
.text:00000C65                 push    eax
.text:00000C66                 lea     ecx, [ebp+var_3C]
.text:00000C69                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00000C6E                 mov     byte ptr [ebp+var_4], 4
.text:00000C72                 mov     ecx, [ebp+this]
.text:00000C75                 add     ecx, 20h ; ' '
.text:00000C78                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000C7D                 mov     [ebp+var_10C], eax
.text:00000C83                 mov     ecx, [ebp+var_10C]
.text:00000C89                 push    ecx             ; struct ISequentialInStream *
.text:00000C8A                 mov     ecx, [ebp+var_34] ; this
.text:00000C8D                 call    ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)
.text:00000C92                 push    20h ; ' '       ; unsigned int
.text:00000C94                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000C99                 add     esp, 4
.text:00000C9C                 mov     [ebp+var_110], eax
.text:00000CA2                 mov     edx, [ebp+var_110]
.text:00000CA8                 mov     [ebp+var_B8], edx
.text:00000CAE                 mov     byte ptr [ebp+var_4], 5
.text:00000CB2                 cmp     [ebp+var_B8], 0
.text:00000CB9                 jz      short loc_CDA
.text:00000CBB                 mov     ecx, [ebp+var_B8]
.text:00000CC1                 call    ??0CLimitedSequentialOutStream@@QAE@XZ ; CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)
.text:00000CC6                 mov     [ebp+var_114], eax
.text:00000CCC                 mov     eax, [ebp+var_114]
.text:00000CD2                 mov     [ebp+var_118], eax
.text:00000CD8                 jmp     short loc_CE4
.text:00000CDA ; ---------------------------------------------------------------------------
.text:00000CDA
.text:00000CDA loc_CDA:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+291j
.text:00000CDA                 mov     [ebp+var_118], 0
.text:00000CE4
.text:00000CE4 loc_CE4:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2B0j
.text:00000CE4                 mov     ecx, [ebp+var_118]
.text:00000CEA                 mov     [ebp+var_B4], ecx
.text:00000CF0                 mov     byte ptr [ebp+var_4], 4
.text:00000CF4                 mov     edx, [ebp+var_B4]
.text:00000CFA                 mov     [ebp+var_44], edx
.text:00000CFD                 mov     eax, [ebp+var_44]
.text:00000D00                 push    eax
.text:00000D01                 lea     ecx, [ebp+var_4C]
.text:00000D04                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:00000D09                 mov     byte ptr [ebp+var_4], 6
.text:00000D0D                 push    28h ; '('       ; unsigned int
.text:00000D0F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000D14                 add     esp, 4
.text:00000D17                 mov     [ebp+var_11C], eax
.text:00000D1D                 mov     ecx, [ebp+var_11C]
.text:00000D23                 mov     [ebp+var_C0], ecx
.text:00000D29                 mov     byte ptr [ebp+var_4], 7
.text:00000D2D                 cmp     [ebp+var_C0], 0
.text:00000D34                 jz      short loc_D55
.text:00000D36                 mov     ecx, [ebp+var_C0] ; this
.text:00000D3C                 call    ??0CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::CCopyCoder(void)
.text:00000D41                 mov     [ebp+var_120], eax
.text:00000D47                 mov     edx, [ebp+var_120]
.text:00000D4D                 mov     [ebp+var_124], edx
.text:00000D53                 jmp     short loc_D5F
.text:00000D55 ; ---------------------------------------------------------------------------
.text:00000D55
.text:00000D55 loc_D55:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+30Cj
.text:00000D55                 mov     [ebp+var_124], 0
.text:00000D5F
.text:00000D5F loc_D5F:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+32Bj
.text:00000D5F                 mov     eax, [ebp+var_124]
.text:00000D65                 mov     [ebp+var_BC], eax
.text:00000D6B                 mov     byte ptr [ebp+var_4], 6
.text:00000D6F                 mov     ecx, [ebp+var_BC]
.text:00000D75                 mov     [ebp+var_54], ecx
.text:00000D78                 mov     edx, [ebp+var_54]
.text:00000D7B                 push    edx
.text:00000D7C                 lea     ecx, [ebp+var_5C]
.text:00000D7F                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:00000D84                 mov     byte ptr [ebp+var_4], 8
.text:00000D88                 mov     [ebp+var_20], 0
.text:00000D8F                 jmp     short loc_D9A
.text:00000D91 ; ---------------------------------------------------------------------------
.text:00000D91
.text:00000D91 loc_D91:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+55Cj
.text:00000D91                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8E7j
.text:00000D91                 mov     eax, [ebp+var_20]
.text:00000D94                 add     eax, 1
.text:00000D97                 mov     [ebp+var_20], eax
.text:00000D9A
.text:00000D9A loc_D9A:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+367j
.text:00000D9A                 mov     ecx, [ebp+var_20]
.text:00000D9D                 cmp     ecx, [ebp+arg_8]
.text:00000DA0                 jnb     loc_1314
.text:00000DA6                 mov     edx, [ebp+var_24]
.text:00000DA9                 mov     eax, [ebp+var_1C]
.text:00000DAC                 mov     [edx+20h], eax
.text:00000DAF                 mov     ecx, [ebp+var_18]
.text:00000DB2                 mov     [edx+24h], ecx
.text:00000DB5                 mov     edx, [ebp+var_24]
.text:00000DB8                 mov     eax, [ebp+var_1C]
.text:00000DBB                 mov     [edx+28h], eax
.text:00000DBE                 mov     ecx, [ebp+var_18]
.text:00000DC1                 mov     [edx+2Ch], ecx
.text:00000DC4                 mov     ecx, [ebp+var_24] ; this
.text:00000DC7                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00000DCC                 mov     [ebp+var_128], eax
.text:00000DD2                 mov     edx, [ebp+var_128]
.text:00000DD8                 mov     [ebp+var_64], edx
.text:00000DDB                 cmp     [ebp+var_64], 0
.text:00000DDF                 jz      short loc_E25
.text:00000DE1                 mov     eax, [ebp+var_64]
.text:00000DE4                 mov     [ebp+var_C4], eax
.text:00000DEA                 mov     byte ptr [ebp+var_4], 6
.text:00000DEE                 lea     ecx, [ebp+var_5C]
.text:00000DF1                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000DF6                 mov     byte ptr [ebp+var_4], 4
.text:00000DFA                 lea     ecx, [ebp+var_4C]
.text:00000DFD                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000E02                 mov     byte ptr [ebp+var_4], 2
.text:00000E06                 lea     ecx, [ebp+var_3C]
.text:00000E09                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000E0E                 mov     byte ptr [ebp+var_4], 0
.text:00000E12                 lea     ecx, [ebp+var_2C]
.text:00000E15                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000E1A                 mov     eax, [ebp+var_C4]
.text:00000E20                 jmp     loc_1382
.text:00000E25 ; ---------------------------------------------------------------------------
.text:00000E25
.text:00000E25 loc_E25:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3B7j
.text:00000E25                 lea     ecx, [ebp+var_6C]
.text:00000E28                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00000E2D                 mov     [ebp+var_12C], eax
.text:00000E33                 mov     byte ptr [ebp+var_4], 9
.text:00000E37                 xor     ecx, ecx
.text:00000E39                 cmp     [ebp+arg_C], 0
.text:00000E3D                 setnz   cl
.text:00000E40                 mov     [ebp+var_74], ecx
.text:00000E43                 movzx   edx, [ebp+var_11]
.text:00000E47                 test    edx, edx
.text:00000E49                 jz      short loc_E56
.text:00000E4B                 mov     eax, [ebp+var_20]
.text:00000E4E                 mov     [ebp+var_130], eax
.text:00000E54                 jmp     short loc_E65
.text:00000E56 ; ---------------------------------------------------------------------------
.text:00000E56
.text:00000E56 loc_E56:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+421j
.text:00000E56                 mov     ecx, [ebp+var_20]
.text:00000E59                 mov     edx, [ebp+arg_4]
.text:00000E5C                 mov     eax, [edx+ecx*4]
.text:00000E5F                 mov     [ebp+var_130], eax
.text:00000E65
.text:00000E65 loc_E65:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+42Cj
.text:00000E65                 mov     ecx, [ebp+var_130]
.text:00000E6B                 mov     [ebp+var_78], ecx
.text:00000E6E                 mov     edx, [ebp+var_78]
.text:00000E71                 push    edx
.text:00000E72                 mov     ecx, [ebp+this]
.text:00000E75                 add     ecx, 0Ch
.text:00000E78                 call    ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[](uint)
.text:00000E7D                 mov     [ebp+var_134], eax
.text:00000E83                 mov     eax, [ebp+var_134]
.text:00000E89                 mov     [ebp+var_7C], eax
.text:00000E8C                 lea     ecx, [ebp+var_6C]
.text:00000E8F                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00000E94                 mov     [ebp+var_138], eax
.text:00000E9A                 mov     esi, esp
.text:00000E9C                 mov     ecx, [ebp+var_74]
.text:00000E9F                 push    ecx
.text:00000EA0                 mov     edx, [ebp+var_138]
.text:00000EA6                 push    edx
.text:00000EA7                 mov     eax, [ebp+var_78]
.text:00000EAA                 push    eax
.text:00000EAB                 mov     ecx, [ebp+arg_10]
.text:00000EAE                 push    ecx
.text:00000EAF                 mov     edx, [ebp+arg_10]
.text:00000EB2                 mov     eax, [edx]
.text:00000EB4                 mov     ecx, [eax+14h]
.text:00000EB7                 call    ecx
.text:00000EB9                 cmp     esi, esp
.text:00000EBB                 call    __RTC_CheckEsp
.text:00000EC0                 mov     [ebp+var_13C], eax
.text:00000EC6                 mov     edx, [ebp+var_13C]
.text:00000ECC                 mov     [ebp+var_80], edx
.text:00000ECF                 cmp     [ebp+var_80], 0
.text:00000ED3                 jz      short loc_F25
.text:00000ED5                 mov     eax, [ebp+var_80]
.text:00000ED8                 mov     [ebp+var_C8], eax
.text:00000EDE                 mov     byte ptr [ebp+var_4], 8
.text:00000EE2                 lea     ecx, [ebp+var_6C]
.text:00000EE5                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000EEA                 mov     byte ptr [ebp+var_4], 6
.text:00000EEE                 lea     ecx, [ebp+var_5C]
.text:00000EF1                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000EF6                 mov     byte ptr [ebp+var_4], 4
.text:00000EFA                 lea     ecx, [ebp+var_4C]
.text:00000EFD                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000F02                 mov     byte ptr [ebp+var_4], 2
.text:00000F06                 lea     ecx, [ebp+var_3C]
.text:00000F09                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000F0E                 mov     byte ptr [ebp+var_4], 0
.text:00000F12                 lea     ecx, [ebp+var_2C]
.text:00000F15                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000F1A                 mov     eax, [ebp+var_C8]
.text:00000F20                 jmp     loc_1382
.text:00000F25 ; ---------------------------------------------------------------------------
.text:00000F25
.text:00000F25 loc_F25:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4ABj
.text:00000F25                 mov     ecx, [ebp+var_7C]
.text:00000F28                 mov     edx, [ecx+8]
.text:00000F2B                 mov     dword ptr [ebp+var_88], edx
.text:00000F31                 mov     eax, [ecx+0Ch]
.text:00000F34                 mov     dword ptr [ebp+var_88+4], eax
.text:00000F3A                 mov     ecx, [ebp+var_1C]
.text:00000F3D                 add     ecx, dword ptr [ebp+var_88]
.text:00000F43                 mov     edx, [ebp+var_18]
.text:00000F46                 adc     edx, dword ptr [ebp+var_88+4]
.text:00000F4C                 mov     [ebp+var_1C], ecx
.text:00000F4F                 mov     [ebp+var_18], edx
.text:00000F52                 mov     [ebp+var_89], 0
.text:00000F59                 cmp     [ebp+arg_C], 0
.text:00000F5D                 jnz     short loc_F89
.text:00000F5F                 lea     ecx, [ebp+var_6C]
.text:00000F62                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:00000F67                 mov     [ebp+var_13D], al
.text:00000F6D                 movzx   eax, [ebp+var_13D]
.text:00000F74                 test    eax, eax
.text:00000F76                 jz      short loc_F89
.text:00000F78                 mov     byte ptr [ebp+var_4], 8
.text:00000F7C                 lea     ecx, [ebp+var_6C]
.text:00000F7F                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000F84                 jmp     loc_D91
.text:00000F89 ; ---------------------------------------------------------------------------
.text:00000F89
.text:00000F89 loc_F89:                                ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+535j
.text:00000F89                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+54Ej
.text:00000F89                 mov     esi, esp
.text:00000F8B                 mov     ecx, [ebp+var_74]
.text:00000F8E                 push    ecx
.text:00000F8F                 mov     edx, [ebp+arg_10]
.text:00000F92                 push    edx
.text:00000F93                 mov     eax, [ebp+arg_10]
.text:00000F96                 mov     ecx, [eax]
.text:00000F98                 mov     edx, [ecx+18h]
.text:00000F9B                 call    edx
.text:00000F9D                 cmp     esi, esp
.text:00000F9F                 call    __RTC_CheckEsp
.text:00000FA4                 mov     [ebp+var_144], eax
.text:00000FAA                 mov     eax, [ebp+var_144]
.text:00000FB0                 mov     [ebp+var_90], eax
.text:00000FB6                 cmp     [ebp+var_90], 0
.text:00000FBD                 jz      short loc_1012
.text:00000FBF                 mov     ecx, [ebp+var_90]
.text:00000FC5                 mov     [ebp+var_CC], ecx
.text:00000FCB                 mov     byte ptr [ebp+var_4], 8
.text:00000FCF                 lea     ecx, [ebp+var_6C]
.text:00000FD2                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000FD7                 mov     byte ptr [ebp+var_4], 6
.text:00000FDB                 lea     ecx, [ebp+var_5C]
.text:00000FDE                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000FE3                 mov     byte ptr [ebp+var_4], 4
.text:00000FE7                 lea     ecx, [ebp+var_4C]
.text:00000FEA                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000FEF                 mov     byte ptr [ebp+var_4], 2
.text:00000FF3                 lea     ecx, [ebp+var_3C]
.text:00000FF6                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000FFB                 mov     byte ptr [ebp+var_4], 0
.text:00000FFF                 lea     ecx, [ebp+var_2C]
.text:00001002                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001007                 mov     eax, [ebp+var_CC]
.text:0000100D                 jmp     loc_1382
.text:00001012 ; ---------------------------------------------------------------------------
.text:00001012
.text:00001012 loc_1012:                               ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+595j
.text:00001012                 lea     ecx, [ebp+var_6C]
.text:00001015                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:0000101A                 mov     [ebp+var_148], eax
.text:00001020                 mov     edx, [ebp+var_148]
.text:00001026                 push    edx             ; struct ISequentialOutStream *
.text:00001027                 mov     ecx, [ebp+var_44] ; this
.text:0000102A                 call    ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z ; CLimitedSequentialOutStream::SetStream(ISequentialOutStream *)
.text:0000102F                 lea     ecx, [ebp+var_6C]
.text:00001032                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00001037                 movzx   eax, [ebp+var_89]
.text:0000103E                 test    eax, eax
.text:00001040                 jz      short loc_1058
.text:00001042                 mov     dword ptr [ebp+var_150], 0
.text:0000104C                 mov     dword ptr [ebp+var_150+4], 0
.text:00001056                 jmp     short loc_1070
.text:00001058 ; ---------------------------------------------------------------------------
.text:00001058
.text:00001058 loc_1058:                               ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+618j
.text:00001058                 mov     ecx, dword ptr [ebp+var_88]
.text:0000105E                 mov     dword ptr [ebp+var_150], ecx
.text:00001064                 mov     edx, dword ptr [ebp+var_88+4]
.text:0000106A                 mov     dword ptr [ebp+var_150+4], edx
.text:00001070
.text:00001070 loc_1070:                               ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+62Ej
.text:00001070                 push    1               ; bool
.text:00001072                 mov     eax, dword ptr [ebp+var_150+4]
.text:00001078                 push    eax
.text:00001079                 mov     ecx, dword ptr [ebp+var_150]
.text:0000107F                 push    ecx             ; unsigned __int64
.text:00001080                 mov     ecx, [ebp+var_44] ; this
.text:00001083                 call    ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z ; CLimitedSequentialOutStream::Init(unsigned __int64,bool)
.text:00001088                 mov     [ebp+var_94], 0
.text:00001092                 mov     ecx, [ebp+this]
.text:00001095                 add     ecx, 20h ; ' '
.text:00001098                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000109D                 mov     [ebp+var_154], eax
.text:000010A3                 mov     edx, [ebp+var_154]
.text:000010A9                 mov     [ebp+var_158], edx
.text:000010AF                 mov     esi, esp
.text:000010B1                 push    0
.text:000010B3                 push    0
.text:000010B5                 mov     eax, [ebp+var_7C]
.text:000010B8                 mov     ecx, [eax+4]
.text:000010BB                 push    ecx
.text:000010BC                 mov     edx, [eax]
.text:000010BE                 push    edx
.text:000010BF                 mov     eax, [ebp+var_158]
.text:000010C5                 push    eax
.text:000010C6                 mov     ecx, [ebp+var_158]
.text:000010CC                 mov     edx, [ecx]
.text:000010CE                 mov     eax, [edx+10h]
.text:000010D1                 call    eax
.text:000010D3                 cmp     esi, esp
.text:000010D5                 call    __RTC_CheckEsp
.text:000010DA                 mov     [ebp+var_15C], eax
.text:000010E0                 mov     ecx, [ebp+var_15C]
.text:000010E6                 mov     [ebp+var_98], ecx
.text:000010EC                 cmp     [ebp+var_98], 0
.text:000010F3                 jz      short loc_1148
.text:000010F5                 mov     edx, [ebp+var_98]
.text:000010FB                 mov     [ebp+var_D0], edx
.text:00001101                 mov     byte ptr [ebp+var_4], 8
.text:00001105                 lea     ecx, [ebp+var_6C]
.text:00001108                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000110D                 mov     byte ptr [ebp+var_4], 6
.text:00001111                 lea     ecx, [ebp+var_5C]
.text:00001114                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00001119                 mov     byte ptr [ebp+var_4], 4
.text:0000111D                 lea     ecx, [ebp+var_4C]
.text:00001120                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001125                 mov     byte ptr [ebp+var_4], 2
.text:00001129                 lea     ecx, [ebp+var_3C]
.text:0000112C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001131                 mov     byte ptr [ebp+var_4], 0
.text:00001135                 lea     ecx, [ebp+var_2C]
.text:00001138                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000113D                 mov     eax, [ebp+var_D0]
.text:00001143                 jmp     loc_1382
.text:00001148 ; ---------------------------------------------------------------------------
.text:00001148
.text:00001148 loc_1148:                               ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6CBj
.text:00001148                 mov     eax, dword ptr [ebp+var_88+4]
.text:0000114E                 push    eax
.text:0000114F                 mov     ecx, dword ptr [ebp+var_88]
.text:00001155                 push    ecx             ; unsigned __int64
.text:00001156                 mov     ecx, [ebp+var_34] ; this
.text:00001159                 call    ?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init(unsigned __int64)
.text:0000115E                 lea     ecx, [ebp+var_5C]
.text:00001161                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00001166                 mov     [ebp+var_160], eax
.text:0000116C                 mov     edx, [ebp+var_160]
.text:00001172                 mov     [ebp+var_164], edx
.text:00001178                 lea     ecx, [ebp+var_2C]
.text:0000117B                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00001180                 mov     [ebp+var_168], eax
.text:00001186                 lea     ecx, [ebp+var_4C]
.text:00001189                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:0000118E                 mov     [ebp+var_16C], eax
.text:00001194                 lea     ecx, [ebp+var_3C]
.text:00001197                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000119C                 mov     [ebp+var_170], eax
.text:000011A2                 mov     esi, esp
.text:000011A4                 mov     eax, [ebp+var_168]
.text:000011AA                 push    eax
.text:000011AB                 push    0
.text:000011AD                 push    0
.text:000011AF                 mov     ecx, [ebp+var_16C]
.text:000011B5                 push    ecx
.text:000011B6                 mov     edx, [ebp+var_170]
.text:000011BC                 push    edx
.text:000011BD                 mov     eax, [ebp+var_164]
.text:000011C3                 push    eax
.text:000011C4                 mov     ecx, [ebp+var_164]
.text:000011CA                 mov     edx, [ecx]
.text:000011CC                 mov     eax, [edx+0Ch]
.text:000011CF                 call    eax
.text:000011D1                 cmp     esi, esp
.text:000011D3                 call    __RTC_CheckEsp
.text:000011D8                 mov     [ebp+var_174], eax
.text:000011DE                 mov     ecx, [ebp+var_174]
.text:000011E4                 mov     [ebp+var_9C], ecx
.text:000011EA                 cmp     [ebp+var_9C], 0
.text:000011F1                 jz      short loc_1246
.text:000011F3                 mov     edx, [ebp+var_9C]
.text:000011F9                 mov     [ebp+var_D4], edx
.text:000011FF                 mov     byte ptr [ebp+var_4], 8
.text:00001203                 lea     ecx, [ebp+var_6C]
.text:00001206                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000120B                 mov     byte ptr [ebp+var_4], 6
.text:0000120F                 lea     ecx, [ebp+var_5C]
.text:00001212                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00001217                 mov     byte ptr [ebp+var_4], 4
.text:0000121B                 lea     ecx, [ebp+var_4C]
.text:0000121E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001223                 mov     byte ptr [ebp+var_4], 2
.text:00001227                 lea     ecx, [ebp+var_3C]
.text:0000122A                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000122F                 mov     byte ptr [ebp+var_4], 0
.text:00001233                 lea     ecx, [ebp+var_2C]
.text:00001236                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000123B                 mov     eax, [ebp+var_D4]
.text:00001241                 jmp     loc_1382
.text:00001246 ; ---------------------------------------------------------------------------
.text:00001246
.text:00001246 loc_1246:                               ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7C9j
.text:00001246                 mov     ecx, [ebp+var_44] ; this
.text:00001249                 call    ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ ; CLimitedSequentialOutStream::GetRem(void)
.text:0000124E                 mov     [ebp+var_17C], eax
.text:00001254                 mov     [ebp+var_178], edx
.text:0000125A                 mov     eax, [ebp+var_17C]
.text:00001260                 or      eax, [ebp+var_178]
.text:00001266                 jz      short loc_1272
.text:00001268                 mov     [ebp+var_94], 2
.text:00001272
.text:00001272 loc_1272:                               ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+83Ej
.text:00001272                 mov     ecx, [ebp+var_44] ; this
.text:00001275                 call    ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ ; CLimitedSequentialOutStream::ReleaseStream(void)
.text:0000127A                 mov     esi, esp
.text:0000127C                 mov     ecx, [ebp+var_94]
.text:00001282                 push    ecx
.text:00001283                 mov     edx, [ebp+arg_10]
.text:00001286                 push    edx
.text:00001287                 mov     eax, [ebp+arg_10]
.text:0000128A                 mov     ecx, [eax]
.text:0000128C                 mov     edx, [ecx+1Ch]
.text:0000128F                 call    edx
.text:00001291                 cmp     esi, esp
.text:00001293                 call    __RTC_CheckEsp
.text:00001298                 mov     [ebp+var_180], eax
.text:0000129E                 mov     eax, [ebp+var_180]
.text:000012A4                 mov     [ebp+var_A0], eax
.text:000012AA                 cmp     [ebp+var_A0], 0
.text:000012B1                 jz      short loc_1303
.text:000012B3                 mov     ecx, [ebp+var_A0]
.text:000012B9                 mov     [ebp+var_D8], ecx
.text:000012BF                 mov     byte ptr [ebp+var_4], 8
.text:000012C3                 lea     ecx, [ebp+var_6C]
.text:000012C6                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000012CB                 mov     byte ptr [ebp+var_4], 6
.text:000012CF                 lea     ecx, [ebp+var_5C]
.text:000012D2                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000012D7                 mov     byte ptr [ebp+var_4], 4
.text:000012DB                 lea     ecx, [ebp+var_4C]
.text:000012DE                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000012E3                 mov     byte ptr [ebp+var_4], 2
.text:000012E7                 lea     ecx, [ebp+var_3C]
.text:000012EA                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000012EF                 mov     byte ptr [ebp+var_4], 0
.text:000012F3                 lea     ecx, [ebp+var_2C]
.text:000012F6                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000012FB                 mov     eax, [ebp+var_D8]
.text:00001301                 jmp     short loc_1382
.text:00001303 ; ---------------------------------------------------------------------------
.text:00001303
.text:00001303 loc_1303:                               ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+889j
.text:00001303                 mov     byte ptr [ebp+var_4], 8
.text:00001307                 lea     ecx, [ebp+var_6C]
.text:0000130A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000130F                 jmp     loc_D91
.text:00001314 ; ---------------------------------------------------------------------------
.text:00001314
.text:00001314 loc_1314:                               ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+378j
.text:00001314                 mov     [ebp+var_DC], 0
.text:0000131E                 mov     byte ptr [ebp+var_4], 6
.text:00001322                 lea     ecx, [ebp+var_5C]
.text:00001325                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000132A                 mov     byte ptr [ebp+var_4], 4
.text:0000132E                 lea     ecx, [ebp+var_4C]
.text:00001331                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001336                 mov     byte ptr [ebp+var_4], 2
.text:0000133A                 lea     ecx, [ebp+var_3C]
.text:0000133D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001342                 mov     byte ptr [ebp+var_4], 0
.text:00001346                 lea     ecx, [ebp+var_2C]
.text:00001349                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000134E                 mov     eax, [ebp+var_DC]
.text:00001354                 jmp     short loc_1382
.text:00001354 ?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:00001354
.text:00001356
.text:00001356 ; =============== S U B R O U T I N E =======================================
.text:00001356
.text:00001356
.text:00001356 __catch$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:00001356                                         ; DATA XREF: .xdata$x:0000CD90o
.text:00001356                 mov     dword ptr [ebp-0E0h], 8007000Eh
.text:00001360                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001367                 mov     eax, offset $LN46
.text:0000136C                 retn
.text:0000136C __catch$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:0000136C
.text:0000136D ; ---------------------------------------------------------------------------
.text:0000136D                 mov     eax, offset __tryend$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
.text:00001372                 retn
.text:00001373 ; ---------------------------------------------------------------------------
.text:00001373
.text:00001373 __tryend$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
.text:00001373                                         ; DATA XREF: .text:0000136Do
.text:00001373                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000137A                 jmp     short loc_1382
.text:0000137C ; ---------------------------------------------------------------------------
.text:0000137C
.text:0000137C $LN46:                                  ; DATA XREF: __catch$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+11o
.text:0000137C                 mov     eax, [ebp-0E0h]
.text:00001382 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001382
.text:00001382 loc_1382:                               ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+98j
.text:00001382                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3F8j ...
.text:00001382                 push    edx
.text:00001383                 mov     ecx, ebp
.text:00001385                 push    eax
.text:00001386                 lea     edx, $LN55
.text:0000138C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001391                 pop     eax
.text:00001392                 pop     edx
.text:00001393                 mov     ecx, [ebp+var_C]
.text:00001396                 mov     large fs:0, ecx
.text:0000139D                 pop     ecx
.text:0000139E                 pop     edi
.text:0000139F                 pop     esi
.text:000013A0                 pop     ebx
.text:000013A1                 add     esp, 180h
.text:000013A7                 cmp     ebp, esp
.text:000013A9                 call    __RTC_CheckEsp
.text:000013AE                 mov     esp, ebp
.text:000013B0                 pop     ebp
.text:000013B1                 retn    14h
.text:000013B1 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000013B1 ; ---------------------------------------------------------------------------
.text:000013B4 $LN55           dd 5                    ; DATA XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+95Eo
.text:000013B8                 dd offset $LN54
.text:000013BC $LN54           dd 0FFFFFFD4h, 4        ; DATA XREF: .text:000013B8o
.text:000013C4                 dd offset $LN48         ; "progress"
.text:000013C8                 dd 0FFFFFFC4h, 4
.text:000013D0                 dd offset $LN49         ; "inStream"
.text:000013D4                 dd 0FFFFFFB4h, 4
.text:000013DC                 dd offset $LN50         ; "outStream"
.text:000013E0                 dd 0FFFFFFA4h, 4
.text:000013E8                 dd offset $LN51         ; "copyCoder"
.text:000013EC                 dd 0FFFFFF94h, 4
.text:000013F4                 dd offset $LN52         ; "realOutStream"
.text:000013F8 $LN52           db 'realOutStream',0    ; DATA XREF: .text:000013F4o
.text:00001406 $LN51           db 'copyCoder',0        ; DATA XREF: .text:000013E8o
.text:00001410 $LN50           db 'outStream',0        ; DATA XREF: .text:000013DCo
.text:0000141A $LN49           db 'inStream',0         ; DATA XREF: .text:000013D0o
.text:00001423 $LN48           db 'progress',0         ; DATA XREF: .text:000013C4o
.text:0000142C                 db 0Ch dup(0CCh)
.text:00001438
.text:00001438 ; =============== S U B R O U T I N E =======================================
.text:00001438
.text:00001438 ; Attributes: bp-based frame
.text:00001438
.text:00001438 ; __int32 __cdecl NArchive::NParser::CHandler::GetStream(NArchive::NParser::CHandler *this, unsigned int, struct ISequentialInStream **)
.text:00001438                 public ?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text:00001438 ?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z proc near
.text:00001438                                         ; DATA XREF: .rdata:0000EF14o
.text:00001438
.text:00001438 var_24          = dword ptr -24h
.text:00001438 var_20          = dword ptr -20h
.text:00001438 var_1C          = dword ptr -1Ch
.text:00001438 var_18          = dword ptr -18h
.text:00001438 var_14          = dword ptr -14h
.text:00001438 var_10          = dword ptr -10h
.text:00001438 var_C           = dword ptr -0Ch
.text:00001438 var_4           = dword ptr -4
.text:00001438 this            = dword ptr  8
.text:00001438 arg_4           = dword ptr  0Ch
.text:00001438 arg_8           = dword ptr  10h
.text:00001438
.text:00001438 ; FUNCTION CHUNK AT .text:000014F5 SIZE 0000001E BYTES
.text:00001438
.text:00001438                 push    ebp
.text:00001439                 mov     ebp, esp
.text:0000143B                 push    0FFFFFFFFh
.text:0000143D                 push    offset __ehhandler$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text:00001442                 mov     eax, large fs:0
.text:00001448                 push    eax
.text:00001449                 push    ecx
.text:0000144A                 sub     esp, 14h
.text:0000144D                 push    ebx
.text:0000144E                 push    esi
.text:0000144F                 push    edi
.text:00001450                 mov     eax, 0CCCCCCCCh
.text:00001455                 mov     [ebp+var_24], eax
.text:00001458                 mov     [ebp+var_20], eax
.text:0000145B                 mov     [ebp+var_1C], eax
.text:0000145E                 mov     [ebp+var_18], eax
.text:00001461                 mov     [ebp+var_14], eax
.text:00001464                 mov     eax, dword ptr ds:___security_cookie
.text:00001469                 xor     eax, ebp
.text:0000146B                 push    eax
.text:0000146C                 lea     eax, [ebp+var_C]
.text:0000146F                 mov     large fs:0, eax
.text:00001475                 mov     [ebp+var_10], esp
.text:00001478                 mov     [ebp+var_4], 0
.text:0000147F                 mov     eax, [ebp+arg_4]
.text:00001482                 push    eax
.text:00001483                 mov     ecx, [ebp+this]
.text:00001486                 add     ecx, 8
.text:00001489                 call    ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[](uint)
.text:0000148E                 mov     [ebp+var_1C], eax
.text:00001491                 mov     ecx, [ebp+var_1C]
.text:00001494                 mov     [ebp+var_14], ecx
.text:00001497                 mov     ecx, [ebp+this]
.text:0000149A                 add     ecx, 1Ch
.text:0000149D                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000014A2                 mov     [ebp+var_20], eax
.text:000014A5                 mov     edx, [ebp+arg_8]
.text:000014A8                 push    edx             ; struct ISequentialInStream **
.text:000014A9                 mov     eax, [ebp+var_14]
.text:000014AC                 mov     ecx, [eax+0Ch]
.text:000014AF                 push    ecx
.text:000014B0                 mov     edx, [eax+8]
.text:000014B3                 push    edx             ; unsigned __int64
.text:000014B4                 mov     eax, [ebp+var_14]
.text:000014B7                 mov     ecx, [eax+4]
.text:000014BA                 push    ecx
.text:000014BB                 mov     edx, [eax]
.text:000014BD                 push    edx             ; unsigned __int64
.text:000014BE                 mov     eax, [ebp+var_20]
.text:000014C1                 push    eax             ; struct IInStream *
.text:000014C2                 call    ?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z ; CreateLimitedInStream(IInStream *,unsigned __int64,unsigned __int64,ISequentialInStream * *)
.text:000014C7                 mov     [ebp+var_24], eax
.text:000014CA                 mov     eax, [ebp+var_24]
.text:000014CD                 jmp     short loc_14F5
.text:000014CD ?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z endp
.text:000014CD
.text:000014CF
.text:000014CF ; =============== S U B R O U T I N E =======================================
.text:000014CF
.text:000014CF
.text:000014CF __catch$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0 proc near
.text:000014CF                                         ; DATA XREF: .xdata$x:0000CE30o
.text:000014CF                 mov     dword ptr [ebp-18h], 8007000Eh
.text:000014D6                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000014DD                 mov     eax, offset $LN7_0
.text:000014E2                 retn
.text:000014E2 __catch$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0 endp
.text:000014E2
.text:000014E3 ; ---------------------------------------------------------------------------
.text:000014E3                 mov     eax, offset __tryend$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1
.text:000014E8                 retn
.text:000014E9 ; ---------------------------------------------------------------------------
.text:000014E9
.text:000014E9 __tryend$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1:
.text:000014E9                                         ; DATA XREF: .text:000014E3o
.text:000014E9                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000014F0                 jmp     short loc_14F5
.text:000014F2 ; ---------------------------------------------------------------------------
.text:000014F2
.text:000014F2 $LN7_0:                                 ; DATA XREF: __catch$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0+Eo
.text:000014F2                 mov     eax, [ebp-18h]
.text:000014F5 ; START OF FUNCTION CHUNK FOR ?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text:000014F5
.text:000014F5 loc_14F5:                               ; CODE XREF: NArchive::NParser::CHandler::GetStream(uint,ISequentialInStream * *)+95j
.text:000014F5                                         ; .text:000014F0j
.text:000014F5                 mov     ecx, [ebp+var_C]
.text:000014F8                 mov     large fs:0, ecx
.text:000014FF                 pop     ecx
.text:00001500                 pop     edi
.text:00001501                 pop     esi
.text:00001502                 pop     ebx
.text:00001503                 add     esp, 24h
.text:00001506                 cmp     ebp, esp
.text:00001508                 call    __RTC_CheckEsp
.text:0000150D                 mov     esp, ebp
.text:0000150F                 pop     ebp
.text:00001510                 retn    0Ch
.text:00001510 ; END OF FUNCTION CHUNK FOR ?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text:00001510 ; ---------------------------------------------------------------------------
.text:00001513                 align 8
.text:00001518
.text:00001518 ; =============== S U B R O U T I N E =======================================
.text:00001518
.text:00001518 ; Attributes: bp-based frame
.text:00001518
.text:00001518 ; __int32 __stdcall Archive_GetItemBoolProp(struct IInArchive *, unsigned int, unsigned __int32, bool *)
.text:00001518                 public ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z
.text:00001518 ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z proc near
.text:00001518                                         ; CODE XREF: Archive_IsItem_Dir(IInArchive *,uint,bool &)+11p
.text:00001518                                         ; Archive_IsItem_Aux(IInArchive *,uint,bool &)+11p ...
.text:00001518
.text:00001518 var_28          = dword ptr -28h
.text:00001518 var_24          = dword ptr -24h
.text:00001518 var_20          = dword ptr -20h
.text:00001518 var_1C          = dword ptr -1Ch
.text:00001518 var_14          = word ptr -14h
.text:00001518 var_C           = word ptr -0Ch
.text:00001518 arg_0           = dword ptr  8
.text:00001518 arg_4           = dword ptr  0Ch
.text:00001518 arg_8           = dword ptr  10h
.text:00001518 arg_C           = dword ptr  14h
.text:00001518
.text:00001518                 push    ebp
.text:00001519                 mov     ebp, esp
.text:0000151B                 sub     esp, 28h
.text:0000151E                 push    esi
.text:0000151F                 push    edi
.text:00001520                 lea     edi, [ebp+var_28]
.text:00001523                 mov     ecx, 0Ah
.text:00001528                 mov     eax, 0CCCCCCCCh
.text:0000152D                 rep stosd
.text:0000152F                 lea     ecx, [ebp+var_14] ; this
.text:00001532                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00001537                 mov     eax, [ebp+arg_C]
.text:0000153A                 mov     byte ptr [eax], 0
.text:0000153D                 mov     esi, esp
.text:0000153F                 lea     ecx, [ebp+var_14]
.text:00001542                 push    ecx
.text:00001543                 mov     edx, [ebp+arg_8]
.text:00001546                 push    edx
.text:00001547                 mov     eax, [ebp+arg_4]
.text:0000154A                 push    eax
.text:0000154B                 mov     ecx, [ebp+arg_0]
.text:0000154E                 mov     edx, [ecx]
.text:00001550                 mov     eax, [ebp+arg_0]
.text:00001553                 push    eax
.text:00001554                 mov     ecx, [edx+18h]
.text:00001557                 call    ecx
.text:00001559                 cmp     esi, esp
.text:0000155B                 call    __RTC_CheckEsp
.text:00001560                 mov     [ebp+var_1C], eax
.text:00001563                 cmp     [ebp+var_1C], 0
.text:00001567                 jz      short loc_157C
.text:00001569                 mov     edx, [ebp+var_1C]
.text:0000156C                 mov     [ebp+var_20], edx
.text:0000156F                 lea     ecx, [ebp+var_14] ; this
.text:00001572                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001577                 mov     eax, [ebp+var_20]
.text:0000157A                 jmp     short loc_15C4
.text:0000157C ; ---------------------------------------------------------------------------
.text:0000157C
.text:0000157C loc_157C:                               ; CODE XREF: Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+4Fj
.text:0000157C                 movzx   eax, [ebp+var_14]
.text:00001580                 cmp     eax, 0Bh
.text:00001583                 jnz     short loc_1596
.text:00001585                 movzx   ecx, [ebp+var_C]
.text:00001589                 push    ecx             ; __int16
.text:0000158A                 call    ?VARIANT_BOOLToBool@@YG_NF@Z ; VARIANT_BOOLToBool(short)
.text:0000158F                 mov     edx, [ebp+arg_C]
.text:00001592                 mov     [edx], al
.text:00001594                 jmp     short loc_15B2
.text:00001596 ; ---------------------------------------------------------------------------
.text:00001596
.text:00001596 loc_1596:                               ; CODE XREF: Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+6Bj
.text:00001596                 movzx   eax, [ebp+var_14]
.text:0000159A                 test    eax, eax
.text:0000159C                 jz      short loc_15B2
.text:0000159E                 mov     [ebp+var_24], 80004005h
.text:000015A5                 lea     ecx, [ebp+var_14] ; this
.text:000015A8                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000015AD                 mov     eax, [ebp+var_24]
.text:000015B0                 jmp     short loc_15C4
.text:000015B2 ; ---------------------------------------------------------------------------
.text:000015B2
.text:000015B2 loc_15B2:                               ; CODE XREF: Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+7Cj
.text:000015B2                                         ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+84j
.text:000015B2                 mov     [ebp+var_28], 0
.text:000015B9                 lea     ecx, [ebp+var_14] ; this
.text:000015BC                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000015C1                 mov     eax, [ebp+var_28]
.text:000015C4
.text:000015C4 loc_15C4:                               ; CODE XREF: Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+62j
.text:000015C4                                         ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+98j
.text:000015C4                 push    edx
.text:000015C5                 mov     ecx, ebp
.text:000015C7                 push    eax
.text:000015C8                 lea     edx, $LN9
.text:000015CE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000015D3                 pop     eax
.text:000015D4                 pop     edx
.text:000015D5                 pop     edi
.text:000015D6                 pop     esi
.text:000015D7                 add     esp, 28h
.text:000015DA                 cmp     ebp, esp
.text:000015DC                 call    __RTC_CheckEsp
.text:000015E1                 mov     esp, ebp
.text:000015E3                 pop     ebp
.text:000015E4                 retn    10h
.text:000015E4 ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z endp
.text:000015E4
.text:000015E4 ; ---------------------------------------------------------------------------
.text:000015E7                 align 4
.text:000015E8 $LN9            dd 1                    ; DATA XREF: Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+B0o
.text:000015EC                 dd offset $LN8_0
.text:000015F0 $LN8_0          dd 0FFFFFFECh, 10h      ; DATA XREF: .text:000015ECo
.text:000015F8                 dd offset $LN7_1        ; "prop"
.text:000015FC $LN7_1          db 'prop',0             ; DATA XREF: .text:000015F8o
.text:00001601                 align 8
.text:00001608
.text:00001608 ; =============== S U B R O U T I N E =======================================
.text:00001608
.text:00001608 ; Attributes: bp-based frame
.text:00001608
.text:00001608 ; __int32 __stdcall Archive_IsItem_Dir(struct IInArchive *, unsigned int, bool *)
.text:00001608                 public ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z
.text:00001608 ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z proc near
.text:00001608                                         ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+54p
.text:00001608                                         ; CArc::GetItem(uint,CReadArcItem &)+96p ...
.text:00001608
.text:00001608 arg_0           = dword ptr  8
.text:00001608 arg_4           = dword ptr  0Ch
.text:00001608 arg_8           = dword ptr  10h
.text:00001608
.text:00001608                 push    ebp
.text:00001609                 mov     ebp, esp
.text:0000160B                 mov     eax, [ebp+arg_8]
.text:0000160E                 push    eax             ; bool *
.text:0000160F                 push    6               ; unsigned __int32
.text:00001611                 mov     ecx, [ebp+arg_4]
.text:00001614                 push    ecx             ; unsigned int
.text:00001615                 mov     edx, [ebp+arg_0]
.text:00001618                 push    edx             ; struct IInArchive *
.text:00001619                 call    ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)
.text:0000161E                 cmp     ebp, esp
.text:00001620                 call    __RTC_CheckEsp
.text:00001625                 pop     ebp
.text:00001626                 retn    0Ch
.text:00001626 ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z endp
.text:00001626
.text:00001626 ; ---------------------------------------------------------------------------
.text:00001629                 db 0Fh dup(0CCh)
.text:00001638
.text:00001638 ; =============== S U B R O U T I N E =======================================
.text:00001638
.text:00001638 ; Attributes: bp-based frame
.text:00001638
.text:00001638 ; __int32 __stdcall Archive_IsItem_Aux(struct IInArchive *, unsigned int, bool *)
.text:00001638                 public ?Archive_IsItem_Aux@@YGJPAUIInArchive@@IAA_N@Z
.text:00001638 ?Archive_IsItem_Aux@@YGJPAUIInArchive@@IAA_N@Z proc near
.text:00001638
.text:00001638 arg_0           = dword ptr  8
.text:00001638 arg_4           = dword ptr  0Ch
.text:00001638 arg_8           = dword ptr  10h
.text:00001638
.text:00001638                 push    ebp
.text:00001639                 mov     ebp, esp
.text:0000163B                 mov     eax, [ebp+arg_8]
.text:0000163E                 push    eax             ; bool *
.text:0000163F                 push    40h ; '@'       ; unsigned __int32
.text:00001641                 mov     ecx, [ebp+arg_4]
.text:00001644                 push    ecx             ; unsigned int
.text:00001645                 mov     edx, [ebp+arg_0]
.text:00001648                 push    edx             ; struct IInArchive *
.text:00001649                 call    ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)
.text:0000164E                 cmp     ebp, esp
.text:00001650                 call    __RTC_CheckEsp
.text:00001655                 pop     ebp
.text:00001656                 retn    0Ch
.text:00001656 ?Archive_IsItem_Aux@@YGJPAUIInArchive@@IAA_N@Z endp
.text:00001656
.text:00001656 ; ---------------------------------------------------------------------------
.text:00001659                 db 0Fh dup(0CCh)
.text:00001668
.text:00001668 ; =============== S U B R O U T I N E =======================================
.text:00001668
.text:00001668 ; Attributes: bp-based frame
.text:00001668
.text:00001668 ; __int32 __stdcall Archive_IsItem_AltStream(struct IInArchive *, unsigned int, bool *)
.text:00001668                 public ?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z
.text:00001668 ?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z proc near
.text:00001668                                         ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+110p
.text:00001668
.text:00001668 arg_0           = dword ptr  8
.text:00001668 arg_4           = dword ptr  0Ch
.text:00001668 arg_8           = dword ptr  10h
.text:00001668
.text:00001668                 push    ebp
.text:00001669                 mov     ebp, esp
.text:0000166B                 mov     eax, [ebp+arg_8]
.text:0000166E                 push    eax             ; bool *
.text:0000166F                 push    3Fh ; '?'       ; unsigned __int32
.text:00001671                 mov     ecx, [ebp+arg_4]
.text:00001674                 push    ecx             ; unsigned int
.text:00001675                 mov     edx, [ebp+arg_0]
.text:00001678                 push    edx             ; struct IInArchive *
.text:00001679                 call    ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)
.text:0000167E                 cmp     ebp, esp
.text:00001680                 call    __RTC_CheckEsp
.text:00001685                 pop     ebp
.text:00001686                 retn    0Ch
.text:00001686 ?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z endp
.text:00001686
.text:00001686 ; ---------------------------------------------------------------------------
.text:00001689                 db 0Fh dup(0CCh)
.text:00001698
.text:00001698 ; =============== S U B R O U T I N E =======================================
.text:00001698
.text:00001698 ; Attributes: bp-based frame
.text:00001698
.text:00001698 ; __int32 __stdcall Archive_IsItem_Deleted(struct IInArchive *, unsigned int, bool *)
.text:00001698                 public ?Archive_IsItem_Deleted@@YGJPAUIInArchive@@IAA_N@Z
.text:00001698 ?Archive_IsItem_Deleted@@YGJPAUIInArchive@@IAA_N@Z proc near
.text:00001698                                         ; CODE XREF: CArc::GetItemPath2(uint,UString &)+61p
.text:00001698
.text:00001698 arg_0           = dword ptr  8
.text:00001698 arg_4           = dword ptr  0Ch
.text:00001698 arg_8           = dword ptr  10h
.text:00001698
.text:00001698                 push    ebp
.text:00001699                 mov     ebp, esp
.text:0000169B                 mov     eax, [ebp+arg_8]
.text:0000169E                 push    eax             ; bool *
.text:0000169F                 push    41h ; 'A'       ; unsigned __int32
.text:000016A1                 mov     ecx, [ebp+arg_4]
.text:000016A4                 push    ecx             ; unsigned int
.text:000016A5                 mov     edx, [ebp+arg_0]
.text:000016A8                 push    edx             ; struct IInArchive *
.text:000016A9                 call    ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)
.text:000016AE                 cmp     ebp, esp
.text:000016B0                 call    __RTC_CheckEsp
.text:000016B5                 pop     ebp
.text:000016B6                 retn    0Ch
.text:000016B6 ?Archive_IsItem_Deleted@@YGJPAUIInArchive@@IAA_N@Z endp
.text:000016B6
.text:000016B6 ; ---------------------------------------------------------------------------
.text:000016B9                 db 0Fh dup(0CCh)
.text:000016C8
.text:000016C8 ; =============== S U B R O U T I N E =======================================
.text:000016C8
.text:000016C8 ; Attributes: bp-based frame
.text:000016C8
.text:000016C8 ; private: long __thiscall CArc::GetItemPathToParent(unsigned int, unsigned int, class CObjectVector<class UString> &)const
.text:000016C8                 public ?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z
.text:000016C8 ?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z proc near
.text:000016C8                                         ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+3DEp
.text:000016C8
.text:000016C8 var_C4          = dword ptr -0C4h
.text:000016C8 var_C0          = dword ptr -0C0h
.text:000016C8 var_BC          = dword ptr -0BCh
.text:000016C8 var_B8          = dword ptr -0B8h
.text:000016C8 var_B4          = dword ptr -0B4h
.text:000016C8 var_B0          = byte ptr -0B0h
.text:000016C8 var_A4          = dword ptr -0A4h
.text:000016C8 var_A0          = dword ptr -0A0h
.text:000016C8 var_9C          = dword ptr -9Ch
.text:000016C8 var_98          = dword ptr -98h
.text:000016C8 var_94          = dword ptr -94h
.text:000016C8 var_90          = dword ptr -90h
.text:000016C8 var_8C          = dword ptr -8Ch
.text:000016C8 var_84          = dword ptr -84h
.text:000016C8 var_78          = dword ptr -78h
.text:000016C8 var_70          = dword ptr -70h
.text:000016C8 var_68          = word ptr -68h
.text:000016C8 var_60          = dword ptr -60h
.text:000016C8 var_54          = dword ptr -54h
.text:000016C8 var_4C          = dword ptr -4Ch
.text:000016C8 var_40          = byte ptr -40h
.text:000016C8 var_34          = dword ptr -34h
.text:000016C8 var_29          = byte ptr -29h
.text:000016C8 var_24          = byte ptr -24h
.text:000016C8 var_14          = dword ptr -14h
.text:000016C8 var_10          = dword ptr -10h
.text:000016C8 var_C           = dword ptr -0Ch
.text:000016C8 var_4           = dword ptr -4
.text:000016C8 arg_0           = dword ptr  8
.text:000016C8 arg_4           = dword ptr  0Ch
.text:000016C8 arg_8           = dword ptr  10h
.text:000016C8
.text:000016C8                 push    ebp
.text:000016C9                 mov     ebp, esp
.text:000016CB                 push    0FFFFFFFFh
.text:000016CD                 push    offset __ehhandler$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z
.text:000016D2                 mov     eax, large fs:0
.text:000016D8                 push    eax
.text:000016D9                 sub     esp, 0B8h
.text:000016DF                 push    esi
.text:000016E0                 push    edi
.text:000016E1                 push    ecx
.text:000016E2                 lea     edi, [ebp+var_C4]
.text:000016E8                 mov     ecx, 2Eh ; '.'
.text:000016ED                 mov     eax, 0CCCCCCCCh
.text:000016F2                 rep stosd
.text:000016F4                 pop     ecx
.text:000016F5                 mov     eax, dword ptr ds:___security_cookie
.text:000016FA                 xor     eax, ebp
.text:000016FC                 push    eax
.text:000016FD                 lea     eax, [ebp+var_C]
.text:00001700                 mov     large fs:0, eax
.text:00001706                 mov     [ebp+var_10], ecx
.text:00001709                 mov     ecx, [ebp+var_10]
.text:0000170C                 add     ecx, 8
.text:0000170F                 call    ??7?$CMyComPtr@UIArchiveGetRawProps@@@@QBE_NXZ ; CMyComPtr<IArchiveGetRawProps>::operator!(void)
.text:00001714                 movzx   eax, al
.text:00001717                 test    eax, eax
.text:00001719                 jz      short loc_1725
.text:0000171B                 mov     eax, 80004005h
.text:00001720                 jmp     loc_1A86
.text:00001725 ; ---------------------------------------------------------------------------
.text:00001725
.text:00001725 loc_1725:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+51j
.text:00001725                 mov     ecx, [ebp+arg_0]
.text:00001728                 cmp     ecx, [ebp+arg_4]
.text:0000172B                 jnz     short loc_1734
.text:0000172D                 xor     eax, eax
.text:0000172F                 jmp     loc_1A86
.text:00001734 ; ---------------------------------------------------------------------------
.text:00001734
.text:00001734 loc_1734:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+63j
.text:00001734                 mov     edx, [ebp+arg_0]
.text:00001737                 mov     [ebp+var_14], edx
.text:0000173A                 lea     ecx, [ebp+var_24]
.text:0000173D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00001742                 mov     [ebp+var_4], 0
.text:00001749                 mov     [ebp+var_29], 0
.text:0000174D
.text:0000174D loc_174D:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+3AAj
.text:0000174D                 mov     ecx, [ebp+var_10]
.text:00001750                 add     ecx, 8
.text:00001753                 call    ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->(void)
.text:00001758                 mov     [ebp+var_BC], eax
.text:0000175E                 mov     esi, esp
.text:00001760                 lea     eax, [ebp+var_4C]
.text:00001763                 push    eax
.text:00001764                 lea     ecx, [ebp+var_40]
.text:00001767                 push    ecx
.text:00001768                 lea     edx, [ebp+var_34]
.text:0000176B                 push    edx
.text:0000176C                 push    4
.text:0000176E                 mov     eax, [ebp+var_14]
.text:00001771                 push    eax
.text:00001772                 mov     ecx, [ebp+var_BC]
.text:00001778                 push    ecx
.text:00001779                 mov     edx, [ebp+var_BC]
.text:0000177F                 mov     eax, [edx]
.text:00001781                 mov     ecx, [eax+10h]
.text:00001784                 call    ecx
.text:00001786                 cmp     esi, esp
.text:00001788                 call    __RTC_CheckEsp
.text:0000178D                 mov     [ebp+var_54], eax
.text:00001790                 cmp     [ebp+var_54], 0
.text:00001794                 jz      short loc_17B9
.text:00001796                 mov     edx, [ebp+var_54]
.text:00001799                 mov     [ebp+var_98], edx
.text:0000179F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000017A6                 lea     ecx, [ebp+var_24] ; this
.text:000017A9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000017AE                 mov     eax, [ebp+var_98]
.text:000017B4                 jmp     loc_1A86
.text:000017B9 ; ---------------------------------------------------------------------------
.text:000017B9
.text:000017B9 loc_17B9:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+CCj
.text:000017B9                 cmp     [ebp+var_34], 0
.text:000017BD                 jz      short loc_17D6
.text:000017BF                 cmp     [ebp+var_4C], 51h ; 'Q'
.text:000017C3                 jnz     short loc_17D6
.text:000017C5                 mov     eax, [ebp+var_34]
.text:000017C8                 push    eax
.text:000017C9                 lea     ecx, [ebp+var_24]
.text:000017CC                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:000017D1                 jmp     loc_18BA
.text:000017D6 ; ---------------------------------------------------------------------------
.text:000017D6
.text:000017D6 loc_17D6:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+F5j
.text:000017D6                                         ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+FBj
.text:000017D6                 lea     ecx, [ebp+var_68] ; this
.text:000017D9                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000017DE                 mov     byte ptr [ebp+var_4], 1
.text:000017E2                 mov     ecx, [ebp+var_10]
.text:000017E5                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:000017EA                 mov     [ebp+var_C0], eax
.text:000017F0                 mov     esi, esp
.text:000017F2                 lea     ecx, [ebp+var_68]
.text:000017F5                 push    ecx
.text:000017F6                 push    4
.text:000017F8                 mov     edx, [ebp+var_14]
.text:000017FB                 push    edx
.text:000017FC                 mov     eax, [ebp+var_C0]
.text:00001802                 push    eax
.text:00001803                 mov     ecx, [ebp+var_C0]
.text:00001809                 mov     edx, [ecx]
.text:0000180B                 mov     eax, [edx+18h]
.text:0000180E                 call    eax
.text:00001810                 cmp     esi, esp
.text:00001812                 call    __RTC_CheckEsp
.text:00001817                 mov     [ebp+var_70], eax
.text:0000181A                 cmp     [ebp+var_70], 0
.text:0000181E                 jz      short loc_184F
.text:00001820                 mov     ecx, [ebp+var_70]
.text:00001823                 mov     [ebp+var_9C], ecx
.text:00001829                 mov     byte ptr [ebp+var_4], 0
.text:0000182D                 lea     ecx, [ebp+var_68] ; this
.text:00001830                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001835                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000183C                 lea     ecx, [ebp+var_24] ; this
.text:0000183F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001844                 mov     eax, [ebp+var_9C]
.text:0000184A                 jmp     loc_1A86
.text:0000184F ; ---------------------------------------------------------------------------
.text:0000184F
.text:0000184F loc_184F:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+156j
.text:0000184F                 movzx   edx, [ebp+var_68]
.text:00001853                 cmp     edx, 8
.text:00001856                 jnz     short loc_186C
.text:00001858                 cmp     [ebp+var_60], 0
.text:0000185C                 jz      short loc_186C
.text:0000185E                 mov     eax, [ebp+var_60]
.text:00001861                 push    eax             ; wchar_t *
.text:00001862                 lea     ecx, [ebp+var_24] ; this
.text:00001865                 call    ?SetFromBstr@UString@@QAEXPA_W@Z ; UString::SetFromBstr(wchar_t *)
.text:0000186A                 jmp     short loc_18AE
.text:0000186C ; ---------------------------------------------------------------------------
.text:0000186C
.text:0000186C loc_186C:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+18Ej
.text:0000186C                                         ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+194j
.text:0000186C                 movzx   ecx, [ebp+var_68]
.text:00001870                 test    ecx, ecx
.text:00001872                 jnz     short loc_187E
.text:00001874                 lea     ecx, [ebp+var_24] ; this
.text:00001877                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:0000187C                 jmp     short loc_18AE
.text:0000187E ; ---------------------------------------------------------------------------
.text:0000187E
.text:0000187E loc_187E:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+1AAj
.text:0000187E                 mov     [ebp+var_A0], 80004005h
.text:00001888                 mov     byte ptr [ebp+var_4], 0
.text:0000188C                 lea     ecx, [ebp+var_68] ; this
.text:0000188F                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001894                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000189B                 lea     ecx, [ebp+var_24] ; this
.text:0000189E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000018A3                 mov     eax, [ebp+var_A0]
.text:000018A9                 jmp     loc_1A86
.text:000018AE ; ---------------------------------------------------------------------------
.text:000018AE
.text:000018AE loc_18AE:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+1A2j
.text:000018AE                                         ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+1B4j
.text:000018AE                 mov     byte ptr [ebp+var_4], 0
.text:000018B2                 lea     ecx, [ebp+var_68] ; this
.text:000018B5                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000018BA
.text:000018BA loc_18BA:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+109j
.text:000018BA                 mov     [ebp+var_78], 0FFFFFFFFh
.text:000018C1                 mov     [ebp+var_84], 0
.text:000018CB                 mov     ecx, [ebp+var_10]
.text:000018CE                 add     ecx, 8
.text:000018D1                 call    ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->(void)
.text:000018D6                 mov     [ebp+var_C4], eax
.text:000018DC                 mov     esi, esp
.text:000018DE                 lea     edx, [ebp+var_84]
.text:000018E4                 push    edx
.text:000018E5                 lea     eax, [ebp+var_78]
.text:000018E8                 push    eax
.text:000018E9                 mov     ecx, [ebp+var_14]
.text:000018EC                 push    ecx
.text:000018ED                 mov     edx, [ebp+var_C4]
.text:000018F3                 push    edx
.text:000018F4                 mov     eax, [ebp+var_C4]
.text:000018FA                 mov     ecx, [eax]
.text:000018FC                 mov     edx, [ecx+0Ch]
.text:000018FF                 call    edx
.text:00001901                 cmp     esi, esp
.text:00001903                 call    __RTC_CheckEsp
.text:00001908                 mov     [ebp+var_8C], eax
.text:0000190E                 cmp     [ebp+var_8C], 0
.text:00001915                 jz      short loc_193D
.text:00001917                 mov     eax, [ebp+var_8C]
.text:0000191D                 mov     [ebp+var_A4], eax
.text:00001923                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000192A                 lea     ecx, [ebp+var_24] ; this
.text:0000192D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001932                 mov     eax, [ebp+var_A4]
.text:00001938                 jmp     loc_1A86
.text:0000193D ; ---------------------------------------------------------------------------
.text:0000193D
.text:0000193D loc_193D:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+24Dj
.text:0000193D                 cmp     [ebp+var_84], 1
.text:00001944                 jz      short loc_19B2
.text:00001946
.text:00001946 loc_1946:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+2E8j
.text:00001946                 lea     ecx, [ebp+var_24] ; this
.text:00001949                 call    ?ReverseFind_PathSepar@UString@@QBEHXZ ; UString::ReverseFind_PathSepar(void)
.text:0000194E                 mov     [ebp+var_90], eax
.text:00001954                 cmp     [ebp+var_90], 0
.text:0000195B                 jge     short loc_195F
.text:0000195D                 jmp     short loc_19B2
.text:0000195F ; ---------------------------------------------------------------------------
.text:0000195F
.text:0000195F loc_195F:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+293j
.text:0000195F                 mov     ecx, [ebp+var_90]
.text:00001965                 add     ecx, 1
.text:00001968                 push    ecx             ; unsigned int
.text:00001969                 lea     ecx, [ebp+var_24] ; this
.text:0000196C                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00001971                 push    eax
.text:00001972                 lea     ecx, [ebp+var_B0]
.text:00001978                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:0000197D                 mov     byte ptr [ebp+var_4], 2
.text:00001981                 lea     edx, [ebp+var_B0]
.text:00001987                 push    edx
.text:00001988                 push    0
.text:0000198A                 mov     ecx, [ebp+arg_8]
.text:0000198D                 call    ?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ; CObjectVector<UString>::Insert(uint,UString const &)
.text:00001992                 mov     byte ptr [ebp+var_4], 0
.text:00001996                 lea     ecx, [ebp+var_B0] ; this
.text:0000199C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000019A1                 mov     eax, [ebp+var_90]
.text:000019A7                 push    eax             ; unsigned int
.text:000019A8                 lea     ecx, [ebp+var_24] ; this
.text:000019AB                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:000019B0                 jmp     short loc_1946
.text:000019B2 ; ---------------------------------------------------------------------------
.text:000019B2
.text:000019B2 loc_19B2:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+27Cj
.text:000019B2                                         ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+295j
.text:000019B2                 lea     ecx, [ebp+var_24]
.text:000019B5                 push    ecx
.text:000019B6                 push    0
.text:000019B8                 mov     ecx, [ebp+arg_8]
.text:000019BB                 call    ?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ; CObjectVector<UString>::Insert(uint,UString const &)
.text:000019C0                 movzx   edx, [ebp+var_29]
.text:000019C4                 test    edx, edx
.text:000019C6                 jz      short loc_1A0B
.text:000019C8                 mov     ecx, [ebp+arg_8]
.text:000019CB                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:000019D0                 sub     eax, 2
.text:000019D3                 push    eax
.text:000019D4                 mov     ecx, [ebp+arg_8]
.text:000019D7                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:000019DC                 mov     [ebp+var_94], eax
.text:000019E2                 push    3Ah ; ':'
.text:000019E4                 mov     ecx, [ebp+var_94]
.text:000019EA                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:000019EF                 mov     ecx, [ebp+arg_8]
.text:000019F2                 call    ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back(void)
.text:000019F7                 push    eax
.text:000019F8                 mov     ecx, [ebp+var_94]
.text:000019FE                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00001A03                 mov     ecx, [ebp+arg_8]
.text:00001A06                 call    ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::DeleteBack(void)
.text:00001A0B
.text:00001A0B loc_1A0B:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+2FEj
.text:00001A0B                 mov     eax, [ebp+arg_4]
.text:00001A0E                 cmp     eax, [ebp+var_78]
.text:00001A11                 jnz     short loc_1A34
.text:00001A13                 mov     [ebp+var_B4], 0
.text:00001A1D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A24                 lea     ecx, [ebp+var_24] ; this
.text:00001A27                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001A2C                 mov     eax, [ebp+var_B4]
.text:00001A32                 jmp     short loc_1A86
.text:00001A34 ; ---------------------------------------------------------------------------
.text:00001A34
.text:00001A34 loc_1A34:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+349j
.text:00001A34                 mov     [ebp+var_29], 0
.text:00001A38                 cmp     [ebp+var_84], 1
.text:00001A3F                 jnz     short loc_1A45
.text:00001A41                 mov     [ebp+var_29], 1
.text:00001A45
.text:00001A45 loc_1A45:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+377j
.text:00001A45                 cmp     [ebp+var_78], 0FFFFFFFFh
.text:00001A49                 jnz     short loc_1A6C
.text:00001A4B                 mov     [ebp+var_B8], 80004005h
.text:00001A55                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A5C                 lea     ecx, [ebp+var_24] ; this
.text:00001A5F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001A64                 mov     eax, [ebp+var_B8]
.text:00001A6A                 jmp     short loc_1A86
.text:00001A6C ; ---------------------------------------------------------------------------
.text:00001A6C
.text:00001A6C loc_1A6C:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+381j
.text:00001A6C                 mov     ecx, [ebp+var_78]
.text:00001A6F                 mov     [ebp+var_14], ecx
.text:00001A72                 jmp     loc_174D
.text:00001A77 ; ---------------------------------------------------------------------------
.text:00001A77                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A7E                 lea     ecx, [ebp+var_24] ; this
.text:00001A81                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001A86
.text:00001A86 loc_1A86:                               ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+58j
.text:00001A86                                         ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+67j ...
.text:00001A86                 push    edx
.text:00001A87                 mov     ecx, ebp
.text:00001A89                 push    eax
.text:00001A8A                 lea     edx, $LN36_0
.text:00001A90                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001A95                 pop     eax
.text:00001A96                 pop     edx
.text:00001A97                 mov     ecx, [ebp+var_C]
.text:00001A9A                 mov     large fs:0, ecx
.text:00001AA1                 pop     ecx
.text:00001AA2                 pop     edi
.text:00001AA3                 pop     esi
.text:00001AA4                 add     esp, 0C4h
.text:00001AAA                 cmp     ebp, esp
.text:00001AAC                 call    __RTC_CheckEsp
.text:00001AB1                 mov     esp, ebp
.text:00001AB3                 pop     ebp
.text:00001AB4                 retn    0Ch
.text:00001AB4 ?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z endp
.text:00001AB4
.text:00001AB4 ; ---------------------------------------------------------------------------
.text:00001AB7                 align 4
.text:00001AB8 $LN36_0         dd 7                    ; DATA XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+3C2o
.text:00001ABC                 dd offset $LN35_0
.text:00001AC0 $LN35_0         dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:00001ABCo
.text:00001AC8                 dd offset $LN27         ; "s"
.text:00001ACC                 db 0CCh
.text:00001ACD                 db 3 dup(0FFh)
.text:00001AD0                 dd 4
.text:00001AD4                 dd offset $LN28_0       ; "p"
.text:00001AD8                 dd 0FFFFFFC0h, 4
.text:00001AE0                 dd offset $LN29         ; "size"
.text:00001AE4                 dd 0FFFFFFB4h, 4
.text:00001AEC                 dd offset $LN30_0       ; "propType"
.text:00001AF0                 dd 0FFFFFF98h, 10h
.text:00001AF8                 dd offset $LN31_0       ; "prop"
.text:00001AFC                 db 88h, 0FFh
.text:00001AFE                 dw 0FFFFh
.text:00001B00                 dd 4
.text:00001B04                 dd offset $LN32_0       ; "curParent"
.text:00001B08                 dd 0FFFFFF7Ch, 4
.text:00001B10                 dd offset $LN33_0       ; "parentType"
.text:00001B14 $LN33_0         db 'parentType',0       ; DATA XREF: .text:00001B10o
.text:00001B1F $LN32_0         db 'curParent',0        ; DATA XREF: .text:00001B04o
.text:00001B29 $LN31_0         db 'prop',0             ; DATA XREF: .text:00001AF8o
.text:00001B2E $LN30_0         db 'propType',0         ; DATA XREF: .text:00001AECo
.text:00001B37 $LN29           db 'size',0             ; DATA XREF: .text:00001AE0o
.text:00001B3C $LN28_0         db 'p',0                ; DATA XREF: .text:00001AD4o
.text:00001B3E $LN27           db 's',0                ; DATA XREF: .text:00001AC8o
.text:00001B40                 db 8 dup(0CCh)
.text:00001B48
.text:00001B48 ; =============== S U B R O U T I N E =======================================
.text:00001B48
.text:00001B48 ; Attributes: bp-based frame
.text:00001B48
.text:00001B48 ; __int32 __thiscall CArc::GetItemPath(CArc *this, unsigned int, struct UString *)
.text:00001B48                 public ?GetItemPath@CArc@@QBEJIAAVUString@@@Z
.text:00001B48 ?GetItemPath@CArc@@QBEJIAAVUString@@@Z proc near
.text:00001B48                                         ; CODE XREF: CArc::GetItemPath2(uint,UString &)+2Bp
.text:00001B48                                         ; CArchiveLink::Open(COpenOptions &)+54Ap
.text:00001B48
.text:00001B48 var_70          = dword ptr -70h
.text:00001B48 var_6C          = dword ptr -6Ch
.text:00001B48 var_68          = dword ptr -68h
.text:00001B48 var_64          = dword ptr -64h
.text:00001B48 var_60          = dword ptr -60h
.text:00001B48 var_58          = word ptr -58h
.text:00001B48 var_50          = dword ptr -50h
.text:00001B48 var_44          = word ptr -44h
.text:00001B48 var_40          = dword ptr -40h
.text:00001B48 var_3C          = dword ptr -3Ch
.text:00001B48 var_38          = dword ptr -38h
.text:00001B48 var_30          = dword ptr -30h
.text:00001B48 var_24          = dword ptr -24h
.text:00001B48 var_18          = dword ptr -18h
.text:00001B48 var_10          = dword ptr -10h
.text:00001B48 var_C           = dword ptr -0Ch
.text:00001B48 var_4           = dword ptr -4
.text:00001B48 arg_0           = dword ptr  8
.text:00001B48 arg_4           = dword ptr  0Ch
.text:00001B48
.text:00001B48                 push    ebp
.text:00001B49                 mov     ebp, esp
.text:00001B4B                 push    0FFFFFFFFh
.text:00001B4D                 push    offset __ehhandler$?GetItemPath@CArc@@QBEJIAAVUString@@@Z
.text:00001B52                 mov     eax, large fs:0
.text:00001B58                 push    eax
.text:00001B59                 sub     esp, 64h
.text:00001B5C                 push    esi
.text:00001B5D                 push    edi
.text:00001B5E                 push    ecx
.text:00001B5F                 lea     edi, [ebp+var_70]
.text:00001B62                 mov     ecx, 19h
.text:00001B67                 mov     eax, 0CCCCCCCCh
.text:00001B6C                 rep stosd
.text:00001B6E                 pop     ecx
.text:00001B6F                 mov     eax, dword ptr ds:___security_cookie
.text:00001B74                 xor     eax, ebp
.text:00001B76                 push    eax
.text:00001B77                 lea     eax, [ebp+var_C]
.text:00001B7A                 mov     large fs:0, eax
.text:00001B80                 mov     [ebp+var_10], ecx
.text:00001B83                 mov     ecx, [ebp+var_10]
.text:00001B86                 add     ecx, 8
.text:00001B89                 call    ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *(void)
.text:00001B8E                 test    eax, eax
.text:00001B90                 jz      loc_1C80
.text:00001B96                 mov     eax, [ebp+var_10]
.text:00001B99                 movzx   ecx, byte ptr [eax+0D9h]
.text:00001BA0                 test    ecx, ecx
.text:00001BA2                 jnz     loc_1C80
.text:00001BA8                 mov     ecx, [ebp+var_10]
.text:00001BAB                 add     ecx, 8
.text:00001BAE                 call    ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->(void)
.text:00001BB3                 mov     [ebp+var_6C], eax
.text:00001BB6                 mov     esi, esp
.text:00001BB8                 lea     edx, [ebp+var_30]
.text:00001BBB                 push    edx
.text:00001BBC                 lea     eax, [ebp+var_24]
.text:00001BBF                 push    eax
.text:00001BC0                 lea     ecx, [ebp+var_18]
.text:00001BC3                 push    ecx
.text:00001BC4                 push    3
.text:00001BC6                 mov     edx, [ebp+arg_0]
.text:00001BC9                 push    edx
.text:00001BCA                 mov     eax, [ebp+var_6C]
.text:00001BCD                 push    eax
.text:00001BCE                 mov     ecx, [ebp+var_6C]
.text:00001BD1                 mov     edx, [ecx]
.text:00001BD3                 mov     eax, [edx+10h]
.text:00001BD6                 call    eax
.text:00001BD8                 cmp     esi, esp
.text:00001BDA                 call    __RTC_CheckEsp
.text:00001BDF                 test    eax, eax
.text:00001BE1                 jnz     loc_1C80
.text:00001BE7                 cmp     [ebp+var_30], 51h ; 'Q'
.text:00001BEB                 jnz     loc_1C80
.text:00001BF1                 mov     ecx, [ebp+var_24]
.text:00001BF4                 shr     ecx, 1
.text:00001BF6                 sub     ecx, 1
.text:00001BF9                 mov     [ebp+var_38], ecx
.text:00001BFC                 mov     edx, [ebp+var_38]
.text:00001BFF                 push    edx             ; unsigned int
.text:00001C00                 mov     ecx, [ebp+arg_4] ; this
.text:00001C03                 call    ?GetBuf@UString@@QAEPA_WI@Z ; UString::GetBuf(uint)
.text:00001C08                 mov     [ebp+var_3C], eax
.text:00001C0B                 mov     [ebp+var_40], 0
.text:00001C12                 jmp     short loc_1C1D
.text:00001C14 ; ---------------------------------------------------------------------------
.text:00001C14
.text:00001C14 loc_1C14:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+115j
.text:00001C14                 mov     eax, [ebp+var_40]
.text:00001C17                 add     eax, 1
.text:00001C1A                 mov     [ebp+var_40], eax
.text:00001C1D
.text:00001C1D loc_1C1D:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+CAj
.text:00001C1D                 mov     ecx, [ebp+var_40]
.text:00001C20                 cmp     ecx, [ebp+var_38]
.text:00001C23                 jnb     short loc_1C5F
.text:00001C25                 mov     edx, [ebp+var_18]
.text:00001C28                 mov     ax, [edx]
.text:00001C2B                 mov     [ebp+var_44], ax
.text:00001C2F                 mov     ecx, [ebp+var_18]
.text:00001C32                 add     ecx, 2
.text:00001C35                 mov     [ebp+var_18], ecx
.text:00001C38                 movzx   edx, [ebp+var_44]
.text:00001C3C                 cmp     edx, 2Fh ; '/'
.text:00001C3F                 jnz     short loc_1C4A
.text:00001C41                 mov     eax, 5Ch ; '\'
.text:00001C46                 mov     [ebp+var_44], ax
.text:00001C4A
.text:00001C4A loc_1C4A:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+F7j
.text:00001C4A                 mov     ecx, [ebp+var_3C]
.text:00001C4D                 mov     dx, [ebp+var_44]
.text:00001C51                 mov     [ecx], dx
.text:00001C54                 mov     eax, [ebp+var_3C]
.text:00001C57                 add     eax, 2
.text:00001C5A                 mov     [ebp+var_3C], eax
.text:00001C5D                 jmp     short loc_1C14
.text:00001C5F ; ---------------------------------------------------------------------------
.text:00001C5F
.text:00001C5F loc_1C5F:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+DBj
.text:00001C5F                 xor     ecx, ecx
.text:00001C61                 mov     edx, [ebp+var_3C]
.text:00001C64                 mov     [edx], cx
.text:00001C67                 mov     eax, [ebp+var_38]
.text:00001C6A                 push    eax             ; unsigned int
.text:00001C6B                 mov     ecx, [ebp+arg_4] ; this
.text:00001C6E                 call    ?ReleaseBuf_SetLen@UString@@QAEXI@Z ; UString::ReleaseBuf_SetLen(uint)
.text:00001C73                 cmp     [ebp+var_38], 0
.text:00001C77                 jz      short loc_1C80
.text:00001C79                 xor     eax, eax
.text:00001C7B                 jmp     loc_1D5A
.text:00001C80 ; ---------------------------------------------------------------------------
.text:00001C80
.text:00001C80 loc_1C80:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+48j
.text:00001C80                                         ; CArc::GetItemPath(uint,UString &)+5Aj ...
.text:00001C80                 lea     ecx, [ebp+var_58] ; this
.text:00001C83                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00001C88                 mov     [ebp+var_4], 0
.text:00001C8F                 mov     ecx, [ebp+var_10]
.text:00001C92                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:00001C97                 mov     [ebp+var_70], eax
.text:00001C9A                 mov     esi, esp
.text:00001C9C                 lea     ecx, [ebp+var_58]
.text:00001C9F                 push    ecx
.text:00001CA0                 push    3
.text:00001CA2                 mov     edx, [ebp+arg_0]
.text:00001CA5                 push    edx
.text:00001CA6                 mov     eax, [ebp+var_70]
.text:00001CA9                 push    eax
.text:00001CAA                 mov     ecx, [ebp+var_70]
.text:00001CAD                 mov     edx, [ecx]
.text:00001CAF                 mov     eax, [edx+18h]
.text:00001CB2                 call    eax
.text:00001CB4                 cmp     esi, esp
.text:00001CB6                 call    __RTC_CheckEsp
.text:00001CBB                 mov     [ebp+var_60], eax
.text:00001CBE                 cmp     [ebp+var_60], 0
.text:00001CC2                 jz      short loc_1CDE
.text:00001CC4                 mov     ecx, [ebp+var_60]
.text:00001CC7                 mov     [ebp+var_64], ecx
.text:00001CCA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001CD1                 lea     ecx, [ebp+var_58] ; this
.text:00001CD4                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001CD9                 mov     eax, [ebp+var_64]
.text:00001CDC                 jmp     short loc_1D5A
.text:00001CDE ; ---------------------------------------------------------------------------
.text:00001CDE
.text:00001CDE loc_1CDE:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+17Aj
.text:00001CDE                 movzx   edx, [ebp+var_58]
.text:00001CE2                 cmp     edx, 8
.text:00001CE5                 jnz     short loc_1CFB
.text:00001CE7                 cmp     [ebp+var_50], 0
.text:00001CEB                 jz      short loc_1CFB
.text:00001CED                 mov     eax, [ebp+var_50]
.text:00001CF0                 push    eax             ; wchar_t *
.text:00001CF1                 mov     ecx, [ebp+arg_4] ; this
.text:00001CF4                 call    ?SetFromBstr@UString@@QAEXPA_W@Z ; UString::SetFromBstr(wchar_t *)
.text:00001CF9                 jmp     short loc_1D28
.text:00001CFB ; ---------------------------------------------------------------------------
.text:00001CFB
.text:00001CFB loc_1CFB:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+19Dj
.text:00001CFB                                         ; CArc::GetItemPath(uint,UString &)+1A3j
.text:00001CFB                 movzx   ecx, [ebp+var_58]
.text:00001CFF                 test    ecx, ecx
.text:00001D01                 jnz     short loc_1D0D
.text:00001D03                 mov     ecx, [ebp+arg_4] ; this
.text:00001D06                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00001D0B                 jmp     short loc_1D28
.text:00001D0D ; ---------------------------------------------------------------------------
.text:00001D0D
.text:00001D0D loc_1D0D:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+1B9j
.text:00001D0D                 mov     [ebp+var_68], 80004005h
.text:00001D14                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001D1B                 lea     ecx, [ebp+var_58] ; this
.text:00001D1E                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001D23                 mov     eax, [ebp+var_68]
.text:00001D26                 jmp     short loc_1D5A
.text:00001D28 ; ---------------------------------------------------------------------------
.text:00001D28
.text:00001D28 loc_1D28:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+1B1j
.text:00001D28                                         ; CArc::GetItemPath(uint,UString &)+1C3j
.text:00001D28                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001D2F                 lea     ecx, [ebp+var_58] ; this
.text:00001D32                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001D37                 mov     ecx, [ebp+arg_4] ; this
.text:00001D3A                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001D3F                 movzx   edx, al
.text:00001D42                 test    edx, edx
.text:00001D44                 jz      short loc_1D58
.text:00001D46                 mov     eax, [ebp+arg_4]
.text:00001D49                 push    eax             ; struct UString *
.text:00001D4A                 mov     ecx, [ebp+arg_0]
.text:00001D4D                 push    ecx             ; unsigned int
.text:00001D4E                 mov     ecx, [ebp+var_10] ; this
.text:00001D51                 call    ?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z ; CArc::GetDefaultItemPath(uint,UString &)
.text:00001D56                 jmp     short loc_1D5A
.text:00001D58 ; ---------------------------------------------------------------------------
.text:00001D58
.text:00001D58 loc_1D58:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+1FCj
.text:00001D58                 xor     eax, eax
.text:00001D5A
.text:00001D5A loc_1D5A:                               ; CODE XREF: CArc::GetItemPath(uint,UString &)+133j
.text:00001D5A                                         ; CArc::GetItemPath(uint,UString &)+194j ...
.text:00001D5A                 push    edx
.text:00001D5B                 mov     ecx, ebp
.text:00001D5D                 push    eax
.text:00001D5E                 lea     edx, $LN24
.text:00001D64                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001D69                 pop     eax
.text:00001D6A                 pop     edx
.text:00001D6B                 mov     ecx, [ebp+var_C]
.text:00001D6E                 mov     large fs:0, ecx
.text:00001D75                 pop     ecx
.text:00001D76                 pop     edi
.text:00001D77                 pop     esi
.text:00001D78                 add     esp, 70h
.text:00001D7B                 cmp     ebp, esp
.text:00001D7D                 call    __RTC_CheckEsp
.text:00001D82                 mov     esp, ebp
.text:00001D84                 pop     ebp
.text:00001D85                 retn    8
.text:00001D85 ?GetItemPath@CArc@@QBEJIAAVUString@@@Z endp
.text:00001D85
.text:00001D85 ; ---------------------------------------------------------------------------
.text:00001D88 $LN24           dd 4                    ; DATA XREF: CArc::GetItemPath(uint,UString &)+216o
.text:00001D8C                 dd offset $LN23
.text:00001D90 $LN23           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001D8Co
.text:00001D98                 dd offset $LN18_0       ; "p"
.text:00001D9C                 dd 0FFFFFFDCh, 4
.text:00001DA4                 dd offset $LN19         ; "size"
.text:00001DA8                 dd 0FFFFFFD0h, 4
.text:00001DB0                 dd offset $LN20         ; "propType"
.text:00001DB4                 dd 0FFFFFFA8h, 10h
.text:00001DBC                 dd offset $LN21         ; "prop"
.text:00001DC0 $LN21           db 'prop',0             ; DATA XREF: .text:00001DBCo
.text:00001DC5 $LN20           db 'propType',0         ; DATA XREF: .text:00001DB0o
.text:00001DCE $LN19           db 'size',0             ; DATA XREF: .text:00001DA4o
.text:00001DD3 $LN18_0         db 'p',0                ; DATA XREF: .text:00001D98o
.text:00001DD5                 align 4
.text:00001DD8
.text:00001DD8 ; =============== S U B R O U T I N E =======================================
.text:00001DD8
.text:00001DD8 ; Attributes: bp-based frame
.text:00001DD8
.text:00001DD8 ; __int32 __thiscall CArc::GetDefaultItemPath(CArc *this, unsigned int, struct UString *)
.text:00001DD8                 public ?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z
.text:00001DD8 ?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z proc near
.text:00001DD8                                         ; CODE XREF: CArc::GetItemPath(uint,UString &)+209p
.text:00001DD8
.text:00001DD8 var_48          = dword ptr -48h
.text:00001DD8 var_44          = dword ptr -44h
.text:00001DD8 var_40          = dword ptr -40h
.text:00001DD8 var_3C          = dword ptr -3Ch
.text:00001DD8 var_34          = word ptr -34h
.text:00001DD8 var_2C          = dword ptr -2Ch
.text:00001DD8 var_20          = dword ptr -20h
.text:00001DD8 var_15          = byte ptr -15h
.text:00001DD8 var_10          = dword ptr -10h
.text:00001DD8 var_C           = dword ptr -0Ch
.text:00001DD8 var_4           = dword ptr -4
.text:00001DD8 arg_0           = dword ptr  8
.text:00001DD8 arg_4           = dword ptr  0Ch
.text:00001DD8
.text:00001DD8                 push    ebp
.text:00001DD9                 mov     ebp, esp
.text:00001DDB                 push    0FFFFFFFFh
.text:00001DDD                 push    offset __ehhandler$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z
.text:00001DE2                 mov     eax, large fs:0
.text:00001DE8                 push    eax
.text:00001DE9                 sub     esp, 3Ch
.text:00001DEC                 push    esi
.text:00001DED                 push    edi
.text:00001DEE                 push    ecx
.text:00001DEF                 lea     edi, [ebp+var_48]
.text:00001DF2                 mov     ecx, 0Fh
.text:00001DF7                 mov     eax, 0CCCCCCCCh
.text:00001DFC                 rep stosd
.text:00001DFE                 pop     ecx
.text:00001DFF                 mov     eax, dword ptr ds:___security_cookie
.text:00001E04                 xor     eax, ebp
.text:00001E06                 push    eax
.text:00001E07                 lea     eax, [ebp+var_C]
.text:00001E0A                 mov     large fs:0, eax
.text:00001E10                 mov     [ebp+var_10], ecx
.text:00001E13                 mov     ecx, [ebp+arg_4] ; this
.text:00001E16                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00001E1B                 lea     eax, [ebp+var_15]
.text:00001E1E                 push    eax             ; bool *
.text:00001E1F                 mov     ecx, [ebp+arg_0]
.text:00001E22                 push    ecx             ; unsigned int
.text:00001E23                 mov     ecx, [ebp+var_10]
.text:00001E26                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:00001E2B                 push    eax             ; struct IInArchive *
.text:00001E2C                 call    ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir(IInArchive *,uint,bool &)
.text:00001E31                 mov     [ebp+var_20], eax
.text:00001E34                 cmp     [ebp+var_20], 0
.text:00001E38                 jz      short loc_1E42
.text:00001E3A                 mov     eax, [ebp+var_20]
.text:00001E3D                 jmp     loc_1F12
.text:00001E42 ; ---------------------------------------------------------------------------
.text:00001E42
.text:00001E42 loc_1E42:                               ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+60j
.text:00001E42                 movzx   edx, [ebp+var_15]
.text:00001E46                 test    edx, edx
.text:00001E48                 jnz     loc_1F10
.text:00001E4E                 mov     eax, [ebp+var_10]
.text:00001E51                 add     eax, 88h ; 'ê'
.text:00001E56                 push    eax
.text:00001E57                 mov     ecx, [ebp+arg_4]
.text:00001E5A                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00001E5F                 lea     ecx, [ebp+var_34] ; this
.text:00001E62                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00001E67                 mov     [ebp+var_4], 0
.text:00001E6E                 mov     ecx, [ebp+var_10]
.text:00001E71                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:00001E76                 mov     [ebp+var_48], eax
.text:00001E79                 mov     esi, esp
.text:00001E7B                 lea     ecx, [ebp+var_34]
.text:00001E7E                 push    ecx
.text:00001E7F                 push    5
.text:00001E81                 mov     edx, [ebp+arg_0]
.text:00001E84                 push    edx
.text:00001E85                 mov     eax, [ebp+var_48]
.text:00001E88                 push    eax
.text:00001E89                 mov     ecx, [ebp+var_48]
.text:00001E8C                 mov     edx, [ecx]
.text:00001E8E                 mov     eax, [edx+18h]
.text:00001E91                 call    eax
.text:00001E93                 cmp     esi, esp
.text:00001E95                 call    __RTC_CheckEsp
.text:00001E9A                 mov     [ebp+var_3C], eax
.text:00001E9D                 cmp     [ebp+var_3C], 0
.text:00001EA1                 jz      short loc_1EBD
.text:00001EA3                 mov     ecx, [ebp+var_3C]
.text:00001EA6                 mov     [ebp+var_40], ecx
.text:00001EA9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001EB0                 lea     ecx, [ebp+var_34] ; this
.text:00001EB3                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001EB8                 mov     eax, [ebp+var_40]
.text:00001EBB                 jmp     short loc_1F12
.text:00001EBD ; ---------------------------------------------------------------------------
.text:00001EBD
.text:00001EBD loc_1EBD:                               ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+C9j
.text:00001EBD                 movzx   edx, [ebp+var_34]
.text:00001EC1                 cmp     edx, 8
.text:00001EC4                 jnz     short loc_1EDE
.text:00001EC6                 push    2Eh ; '.'
.text:00001EC8                 mov     ecx, [ebp+arg_4]
.text:00001ECB                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00001ED0                 mov     eax, [ebp+var_2C]
.text:00001ED3                 push    eax
.text:00001ED4                 mov     ecx, [ebp+arg_4]
.text:00001ED7                 call    ??YUString@@QAEAAV0@PB_W@Z ; UString::operator+=(wchar_t const *)
.text:00001EDC                 jmp     short loc_1F01
.text:00001EDE ; ---------------------------------------------------------------------------
.text:00001EDE
.text:00001EDE loc_1EDE:                               ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+ECj
.text:00001EDE                 movzx   ecx, [ebp+var_34]
.text:00001EE2                 test    ecx, ecx
.text:00001EE4                 jz      short loc_1F01
.text:00001EE6                 mov     [ebp+var_44], 80004005h
.text:00001EED                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001EF4                 lea     ecx, [ebp+var_34] ; this
.text:00001EF7                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001EFC                 mov     eax, [ebp+var_44]
.text:00001EFF                 jmp     short loc_1F12
.text:00001F01 ; ---------------------------------------------------------------------------
.text:00001F01
.text:00001F01 loc_1F01:                               ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+104j
.text:00001F01                                         ; CArc::GetDefaultItemPath(uint,UString &)+10Cj
.text:00001F01                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001F08                 lea     ecx, [ebp+var_34] ; this
.text:00001F0B                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001F10
.text:00001F10 loc_1F10:                               ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+70j
.text:00001F10                 xor     eax, eax
.text:00001F12
.text:00001F12 loc_1F12:                               ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+65j
.text:00001F12                                         ; CArc::GetDefaultItemPath(uint,UString &)+E3j ...
.text:00001F12                 push    edx
.text:00001F13                 mov     ecx, ebp
.text:00001F15                 push    eax
.text:00001F16                 lea     edx, $LN14_0
.text:00001F1C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001F21                 pop     eax
.text:00001F22                 pop     edx
.text:00001F23                 mov     ecx, [ebp+var_C]
.text:00001F26                 mov     large fs:0, ecx
.text:00001F2D                 pop     ecx
.text:00001F2E                 pop     edi
.text:00001F2F                 pop     esi
.text:00001F30                 add     esp, 48h
.text:00001F33                 cmp     ebp, esp
.text:00001F35                 call    __RTC_CheckEsp
.text:00001F3A                 mov     esp, ebp
.text:00001F3C                 pop     ebp
.text:00001F3D                 retn    8
.text:00001F3D ?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z endp
.text:00001F3D
.text:00001F3D ; ---------------------------------------------------------------------------
.text:00001F40 $LN14_0         dd 2                    ; DATA XREF: CArc::GetDefaultItemPath(uint,UString &)+13Eo
.text:00001F44                 dd offset $LN13_1
.text:00001F48 $LN13_1         dd 0FFFFFFEBh, 1        ; DATA XREF: .text:00001F44o
.text:00001F50                 dd offset $LN10_1       ; "isDir"
.text:00001F54                 db 0CCh
.text:00001F55                 db 3 dup(0FFh)
.text:00001F58                 dd 10h
.text:00001F5C                 dd offset $LN11         ; "prop"
.text:00001F60 $LN11           db 'prop',0             ; DATA XREF: .text:00001F5Co
.text:00001F65 $LN10_1         db 'isDir',0            ; DATA XREF: .text:00001F50o
.text:00001F6B                 db 0Dh dup(0CCh)
.text:00001F78
.text:00001F78 ; =============== S U B R O U T I N E =======================================
.text:00001F78
.text:00001F78 ; Attributes: bp-based frame
.text:00001F78
.text:00001F78 ; __int32 __thiscall CArc::GetItemPath2(CArc *this, unsigned int, struct UString *)
.text:00001F78                 public ?GetItemPath2@CArc@@QBEJIAAVUString@@@Z
.text:00001F78 ?GetItemPath2@CArc@@QBEJIAAVUString@@@Z proc near
.text:00001F78                                         ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+C3p
.text:00001F78                                         ; CArc::GetItem(uint,CReadArcItem &)+297p
.text:00001F78
.text:00001F78 var_18          = dword ptr -18h
.text:00001F78 var_14          = dword ptr -14h
.text:00001F78 var_10          = byte ptr -10h
.text:00001F78 var_C           = dword ptr -0Ch
.text:00001F78 var_8           = dword ptr -8
.text:00001F78 var_4           = dword ptr -4
.text:00001F78 arg_0           = dword ptr  8
.text:00001F78 arg_4           = dword ptr  0Ch
.text:00001F78
.text:00001F78                 push    ebp
.text:00001F79                 mov     ebp, esp
.text:00001F7B                 sub     esp, 18h
.text:00001F7E                 mov     eax, 0CCCCCCCCh
.text:00001F83                 mov     [ebp+var_18], eax
.text:00001F86                 mov     [ebp+var_14], eax
.text:00001F89                 mov     dword ptr [ebp+var_10], eax
.text:00001F8C                 mov     [ebp+var_C], eax
.text:00001F8F                 mov     [ebp+var_8], eax
.text:00001F92                 mov     [ebp+var_4], eax
.text:00001F95                 mov     [ebp+var_4], ecx
.text:00001F98                 mov     eax, [ebp+arg_4]
.text:00001F9B                 push    eax             ; struct UString *
.text:00001F9C                 mov     ecx, [ebp+arg_0]
.text:00001F9F                 push    ecx             ; unsigned int
.text:00001FA0                 mov     ecx, [ebp+var_4] ; this
.text:00001FA3                 call    ?GetItemPath@CArc@@QBEJIAAVUString@@@Z ; CArc::GetItemPath(uint,UString &)
.text:00001FA8                 mov     [ebp+var_8], eax
.text:00001FAB                 cmp     [ebp+var_8], 0
.text:00001FAF                 jz      short loc_1FB6
.text:00001FB1                 mov     eax, [ebp+var_8]
.text:00001FB4                 jmp     short loc_2005
.text:00001FB6 ; ---------------------------------------------------------------------------
.text:00001FB6
.text:00001FB6 loc_1FB6:                               ; CODE XREF: CArc::GetItemPath2(uint,UString &)+37j
.text:00001FB6                 mov     edx, [ebp+var_4]
.text:00001FB9                 movzx   eax, byte ptr [edx+0DBh]
.text:00001FC0                 test    eax, eax
.text:00001FC2                 jz      short loc_2003
.text:00001FC4                 mov     [ebp+var_10+3], 0
.text:00001FC8                 lea     ecx, [ebp+var_10+3]
.text:00001FCB                 push    ecx             ; bool *
.text:00001FCC                 mov     edx, [ebp+arg_0]
.text:00001FCF                 push    edx             ; unsigned int
.text:00001FD0                 mov     ecx, [ebp+var_4]
.text:00001FD3                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:00001FD8                 push    eax             ; struct IInArchive *
.text:00001FD9                 call    ?Archive_IsItem_Deleted@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Deleted(IInArchive *,uint,bool &)
.text:00001FDE                 mov     [ebp+var_18], eax
.text:00001FE1                 cmp     [ebp+var_18], 0
.text:00001FE5                 jz      short loc_1FEC
.text:00001FE7                 mov     eax, [ebp+var_18]
.text:00001FEA                 jmp     short loc_2005
.text:00001FEC ; ---------------------------------------------------------------------------
.text:00001FEC
.text:00001FEC loc_1FEC:                               ; CODE XREF: CArc::GetItemPath2(uint,UString &)+6Dj
.text:00001FEC                 movzx   eax, [ebp+var_10+3]
.text:00001FF0                 test    eax, eax
.text:00001FF2                 jz      short loc_2003
.text:00001FF4                 push    offset $SG73397 ; "[DELETED]\\"
.text:00001FF9                 push    0               ; unsigned int
.text:00001FFB                 mov     ecx, [ebp+arg_4] ; this
.text:00001FFE                 call    ?Insert@UString@@QAEXIPB_W@Z ; UString::Insert(uint,wchar_t const *)
.text:00002003
.text:00002003 loc_2003:                               ; CODE XREF: CArc::GetItemPath2(uint,UString &)+4Aj
.text:00002003                                         ; CArc::GetItemPath2(uint,UString &)+7Aj
.text:00002003                 xor     eax, eax
.text:00002005
.text:00002005 loc_2005:                               ; CODE XREF: CArc::GetItemPath2(uint,UString &)+3Cj
.text:00002005                                         ; CArc::GetItemPath2(uint,UString &)+72j
.text:00002005                 push    edx
.text:00002006                 mov     ecx, ebp
.text:00002008                 push    eax
.text:00002009                 lea     edx, $LN9_0
.text:0000200F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002014                 pop     eax
.text:00002015                 pop     edx
.text:00002016                 add     esp, 18h
.text:00002019                 cmp     ebp, esp
.text:0000201B                 call    __RTC_CheckEsp
.text:00002020                 mov     esp, ebp
.text:00002022                 pop     ebp
.text:00002023                 retn    8
.text:00002023 ?GetItemPath2@CArc@@QBEJIAAVUString@@@Z endp
.text:00002023
.text:00002023 ; ---------------------------------------------------------------------------
.text:00002026                 align 4
.text:00002028 $LN9_0          dd 1                    ; DATA XREF: CArc::GetItemPath2(uint,UString &)+91o
.text:0000202C                 dd offset $LN8_1
.text:00002030 $LN8_1          dd 0FFFFFFF3h, 1        ; DATA XREF: .text:0000202Co
.text:00002038                 dd offset $LN7_2        ; "isDeleted"
.text:0000203C $LN7_2          db 'isDeleted',0        ; DATA XREF: .text:00002038o
.text:00002046                 align 4
.text:00002048
.text:00002048 ; =============== S U B R O U T I N E =======================================
.text:00002048
.text:00002048 ; Attributes: bp-based frame
.text:00002048
.text:00002048 ; int __stdcall FindAltStreamColon_in_Path(const wchar_t *)
.text:00002048                 public ?FindAltStreamColon_in_Path@@YGHPB_W@Z
.text:00002048 ?FindAltStreamColon_in_Path@@YGHPB_W@Z proc near
.text:00002048                                         ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+336p
.text:00002048                                         ; CArc::GetItem(uint,CReadArcItem &)+438p
.text:00002048
.text:00002048 var_C           = dword ptr -0Ch
.text:00002048 var_8           = dword ptr -8
.text:00002048 var_4           = dword ptr -4
.text:00002048 arg_0           = dword ptr  8
.text:00002048
.text:00002048                 push    ebp
.text:00002049                 mov     ebp, esp
.text:0000204B                 sub     esp, 0Ch
.text:0000204E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002055                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000205C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002063                 mov     [ebp+var_4], 0
.text:0000206A                 mov     [ebp+var_8], 0FFFFFFFFh
.text:00002071                 jmp     short loc_207C
.text:00002073 ; ---------------------------------------------------------------------------
.text:00002073
.text:00002073 loc_2073:                               ; CODE XREF: FindAltStreamColon_in_Path(wchar_t const *):loc_20ACj
.text:00002073                                         ; FindAltStreamColon_in_Path(wchar_t const *):loc_20BEj
.text:00002073                 mov     eax, [ebp+var_4]
.text:00002076                 add     eax, 1
.text:00002079                 mov     [ebp+var_4], eax
.text:0000207C
.text:0000207C loc_207C:                               ; CODE XREF: FindAltStreamColon_in_Path(wchar_t const *)+29j
.text:0000207C                 mov     ecx, [ebp+var_4]
.text:0000207F                 mov     edx, [ebp+arg_0]
.text:00002082                 mov     ax, [edx+ecx*2]
.text:00002086                 mov     word ptr [ebp+var_C], ax
.text:0000208A                 movzx   ecx, word ptr [ebp+var_C]
.text:0000208E                 test    ecx, ecx
.text:00002090                 jnz     short loc_2097
.text:00002092                 mov     eax, [ebp+var_8]
.text:00002095                 jmp     short loc_20C0
.text:00002097 ; ---------------------------------------------------------------------------
.text:00002097
.text:00002097 loc_2097:                               ; CODE XREF: FindAltStreamColon_in_Path(wchar_t const *)+48j
.text:00002097                 movzx   edx, word ptr [ebp+var_C]
.text:0000209B                 cmp     edx, 3Ah ; ':'
.text:0000209E                 jnz     short loc_20AE
.text:000020A0                 cmp     [ebp+var_8], 0
.text:000020A4                 jge     short loc_20AC
.text:000020A6                 mov     eax, [ebp+var_4]
.text:000020A9                 mov     [ebp+var_8], eax
.text:000020AC
.text:000020AC loc_20AC:                               ; CODE XREF: FindAltStreamColon_in_Path(wchar_t const *)+5Cj
.text:000020AC                 jmp     short loc_2073
.text:000020AE ; ---------------------------------------------------------------------------
.text:000020AE
.text:000020AE loc_20AE:                               ; CODE XREF: FindAltStreamColon_in_Path(wchar_t const *)+56j
.text:000020AE                 movzx   ecx, word ptr [ebp+var_C]
.text:000020B2                 cmp     ecx, 5Ch ; '\'
.text:000020B5                 jnz     short loc_20BE
.text:000020B7                 mov     [ebp+var_8], 0FFFFFFFFh
.text:000020BE
.text:000020BE loc_20BE:                               ; CODE XREF: FindAltStreamColon_in_Path(wchar_t const *)+6Dj
.text:000020BE                 jmp     short loc_2073
.text:000020C0 ; ---------------------------------------------------------------------------
.text:000020C0
.text:000020C0 loc_20C0:                               ; CODE XREF: FindAltStreamColon_in_Path(wchar_t const *)+4Dj
.text:000020C0                 mov     esp, ebp
.text:000020C2                 pop     ebp
.text:000020C3                 retn    4
.text:000020C3 ?FindAltStreamColon_in_Path@@YGHPB_W@Z endp
.text:000020C3
.text:000020C3 ; ---------------------------------------------------------------------------
.text:000020C6                 align 4
.text:000020C8
.text:000020C8 ; =============== S U B R O U T I N E =======================================
.text:000020C8
.text:000020C8 ; Attributes: bp-based frame
.text:000020C8
.text:000020C8 ; __int32 __thiscall CArc::GetItem(CArc *this, unsigned int, struct CReadArcItem *)
.text:000020C8                 public ?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z
.text:000020C8 ?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z proc near
.text:000020C8
.text:000020C8 var_94          = dword ptr -94h
.text:000020C8 var_90          = dword ptr -90h
.text:000020C8 var_8C          = dword ptr -8Ch
.text:000020C8 var_88          = dword ptr -88h
.text:000020C8 var_84          = dword ptr -84h
.text:000020C8 var_80          = dword ptr -80h
.text:000020C8 var_7C          = dword ptr -7Ch
.text:000020C8 var_78          = dword ptr -78h
.text:000020C8 var_74          = dword ptr -74h
.text:000020C8 var_70          = dword ptr -70h
.text:000020C8 var_6C          = dword ptr -6Ch
.text:000020C8 var_68          = dword ptr -68h
.text:000020C8 var_64          = dword ptr -64h
.text:000020C8 var_60          = dword ptr -60h
.text:000020C8 var_5C          = dword ptr -5Ch
.text:000020C8 var_54          = word ptr -54h
.text:000020C8 var_4C          = dword ptr -4Ch
.text:000020C8 var_40          = dword ptr -40h
.text:000020C8 var_38          = dword ptr -38h
.text:000020C8 var_2C          = dword ptr -2Ch
.text:000020C8 var_21          = byte ptr -21h
.text:000020C8 var_20          = dword ptr -20h
.text:000020C8 var_1C          = dword ptr -1Ch
.text:000020C8 var_18          = dword ptr -18h
.text:000020C8 var_14          = dword ptr -14h
.text:000020C8 var_10          = dword ptr -10h
.text:000020C8 var_C           = dword ptr -0Ch
.text:000020C8 var_4           = dword ptr -4
.text:000020C8 arg_0           = dword ptr  8
.text:000020C8 arg_4           = dword ptr  0Ch
.text:000020C8
.text:000020C8                 push    ebp
.text:000020C9                 mov     ebp, esp
.text:000020CB                 push    0FFFFFFFFh
.text:000020CD                 push    offset __ehhandler$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z
.text:000020D2                 mov     eax, large fs:0
.text:000020D8                 push    eax
.text:000020D9                 sub     esp, 88h
.text:000020DF                 push    esi
.text:000020E0                 push    edi
.text:000020E1                 push    ecx
.text:000020E2                 lea     edi, [ebp+var_94]
.text:000020E8                 mov     ecx, 22h ; '"'
.text:000020ED                 mov     eax, 0CCCCCCCCh
.text:000020F2                 rep stosd
.text:000020F4                 pop     ecx
.text:000020F5                 mov     eax, dword ptr ds:___security_cookie
.text:000020FA                 xor     eax, ebp
.text:000020FC                 push    eax
.text:000020FD                 lea     eax, [ebp+var_C]
.text:00002100                 mov     large fs:0, eax
.text:00002106                 mov     [ebp+var_10], ecx
.text:00002109                 mov     eax, [ebp+arg_4]
.text:0000210C                 mov     byte ptr [eax+30h], 0
.text:00002110                 mov     ecx, [ebp+arg_4]
.text:00002113                 add     ecx, 24h ; '$'  ; this
.text:00002116                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:0000211B                 mov     ecx, [ebp+arg_4]
.text:0000211E                 add     ecx, 18h        ; this
.text:00002121                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00002126                 mov     ecx, [ebp+arg_4]
.text:00002129                 mov     byte ptr [ecx+32h], 0
.text:0000212D                 mov     ecx, [ebp+arg_4] ; this
.text:00002130                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00002135                 mov     edx, [ebp+arg_4]
.text:00002138                 mov     dword ptr [edx+34h], 0FFFFFFFFh
.text:0000213F                 mov     ecx, [ebp+arg_4]
.text:00002142                 add     ecx, 0Ch
.text:00002145                 call    ?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear(void)
.text:0000214A                 mov     eax, [ebp+arg_4]
.text:0000214D                 add     eax, 32h ; '2'
.text:00002150                 push    eax             ; bool *
.text:00002151                 mov     ecx, [ebp+arg_0]
.text:00002154                 push    ecx             ; unsigned int
.text:00002155                 mov     ecx, [ebp+var_10]
.text:00002158                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000215D                 push    eax             ; struct IInArchive *
.text:0000215E                 call    ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir(IInArchive *,uint,bool &)
.text:00002163                 mov     [ebp+var_14], eax
.text:00002166                 cmp     [ebp+var_14], 0
.text:0000216A                 jz      short loc_2174
.text:0000216C                 mov     eax, [ebp+var_14]
.text:0000216F                 jmp     loc_25A9
.text:00002174 ; ---------------------------------------------------------------------------
.text:00002174
.text:00002174 loc_2174:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+A2j
.text:00002174                 mov     edx, [ebp+arg_4]
.text:00002177                 mov     eax, [ebp+arg_4]
.text:0000217A                 mov     cl, [eax+32h]
.text:0000217D                 mov     [edx+33h], cl
.text:00002180                 mov     edx, [ebp+arg_4]
.text:00002183                 push    edx             ; struct UString *
.text:00002184                 mov     eax, [ebp+arg_0]
.text:00002187                 push    eax             ; unsigned int
.text:00002188                 mov     ecx, [ebp+var_10] ; this
.text:0000218B                 call    ?GetItemPath2@CArc@@QBEJIAAVUString@@@Z ; CArc::GetItemPath2(uint,UString &)
.text:00002190                 mov     [ebp+var_18], eax
.text:00002193                 cmp     [ebp+var_18], 0
.text:00002197                 jz      short loc_21A1
.text:00002199                 mov     eax, [ebp+var_18]
.text:0000219C                 jmp     loc_25A9
.text:000021A1 ; ---------------------------------------------------------------------------
.text:000021A1
.text:000021A1 loc_21A1:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+CFj
.text:000021A1                 mov     ecx, [ebp+arg_0]
.text:000021A4                 mov     [ebp+var_1C], ecx
.text:000021A7                 mov     edx, [ebp+arg_4]
.text:000021AA                 push    edx
.text:000021AB                 mov     ecx, [ebp+arg_4]
.text:000021AE                 add     ecx, 18h
.text:000021B1                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000021B6                 mov     eax, [ebp+var_10]
.text:000021B9                 movzx   ecx, byte ptr [eax+0DCh]
.text:000021C0                 test    ecx, ecx
.text:000021C2                 jz      short loc_21EE
.text:000021C4                 mov     edx, [ebp+arg_4]
.text:000021C7                 add     edx, 30h ; '0'
.text:000021CA                 push    edx             ; bool *
.text:000021CB                 mov     eax, [ebp+arg_0]
.text:000021CE                 push    eax             ; unsigned int
.text:000021CF                 mov     ecx, [ebp+var_10]
.text:000021D2                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:000021D7                 push    eax             ; struct IInArchive *
.text:000021D8                 call    ?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_AltStream(IInArchive *,uint,bool &)
.text:000021DD                 mov     [ebp+var_20], eax
.text:000021E0                 cmp     [ebp+var_20], 0
.text:000021E4                 jz      short loc_21EE
.text:000021E6                 mov     eax, [ebp+var_20]
.text:000021E9                 jmp     loc_25A9
.text:000021EE ; ---------------------------------------------------------------------------
.text:000021EE
.text:000021EE loc_21EE:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+FAj
.text:000021EE                                         ; CArc::GetItem(uint,CReadArcItem &)+11Cj
.text:000021EE                 mov     [ebp+var_21], 0
.text:000021F2                 mov     ecx, [ebp+arg_4]
.text:000021F5                 movzx   edx, byte ptr [ecx+30h]
.text:000021F9                 test    edx, edx
.text:000021FB                 jz      loc_23DE
.text:00002201                 mov     [ebp+var_21], 1
.text:00002205                 mov     ecx, [ebp+var_10]
.text:00002208                 add     ecx, 8
.text:0000220B                 call    ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *(void)
.text:00002210                 test    eax, eax
.text:00002212                 jz      loc_23DE
.text:00002218                 mov     [ebp+var_2C], 0
.text:0000221F                 mov     ecx, [ebp+var_10]
.text:00002222                 add     ecx, 8
.text:00002225                 call    ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->(void)
.text:0000222A                 mov     [ebp+var_88], eax
.text:00002230                 mov     esi, esp
.text:00002232                 lea     eax, [ebp+var_2C]
.text:00002235                 push    eax
.text:00002236                 lea     ecx, [ebp+var_38]
.text:00002239                 push    ecx
.text:0000223A                 mov     edx, [ebp+arg_0]
.text:0000223D                 push    edx
.text:0000223E                 mov     eax, [ebp+var_88]
.text:00002244                 push    eax
.text:00002245                 mov     ecx, [ebp+var_88]
.text:0000224B                 mov     edx, [ecx]
.text:0000224D                 mov     eax, [edx+0Ch]
.text:00002250                 call    eax
.text:00002252                 cmp     esi, esp
.text:00002254                 call    __RTC_CheckEsp
.text:00002259                 mov     [ebp+var_40], eax
.text:0000225C                 cmp     [ebp+var_40], 0
.text:00002260                 jz      short loc_226A
.text:00002262                 mov     eax, [ebp+var_40]
.text:00002265                 jmp     loc_25A9
.text:0000226A ; ---------------------------------------------------------------------------
.text:0000226A
.text:0000226A loc_226A:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+198j
.text:0000226A                 cmp     [ebp+var_2C], 1
.text:0000226E                 jnz     loc_23DE
.text:00002274                 lea     ecx, [ebp+var_54] ; this
.text:00002277                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000227C                 mov     [ebp+var_4], 0
.text:00002283                 mov     ecx, [ebp+var_10]
.text:00002286                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000228B                 mov     [ebp+var_8C], eax
.text:00002291                 mov     esi, esp
.text:00002293                 lea     ecx, [ebp+var_54]
.text:00002296                 push    ecx
.text:00002297                 push    4
.text:00002299                 mov     edx, [ebp+arg_0]
.text:0000229C                 push    edx
.text:0000229D                 mov     eax, [ebp+var_8C]
.text:000022A3                 push    eax
.text:000022A4                 mov     ecx, [ebp+var_8C]
.text:000022AA                 mov     edx, [ecx]
.text:000022AC                 mov     eax, [edx+18h]
.text:000022AF                 call    eax
.text:000022B1                 cmp     esi, esp
.text:000022B3                 call    __RTC_CheckEsp
.text:000022B8                 mov     [ebp+var_5C], eax
.text:000022BB                 cmp     [ebp+var_5C], 0
.text:000022BF                 jz      short loc_22DE
.text:000022C1                 mov     ecx, [ebp+var_5C]
.text:000022C4                 mov     [ebp+var_78], ecx
.text:000022C7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000022CE                 lea     ecx, [ebp+var_54] ; this
.text:000022D1                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000022D6                 mov     eax, [ebp+var_78]
.text:000022D9                 jmp     loc_25A9
.text:000022DE ; ---------------------------------------------------------------------------
.text:000022DE
.text:000022DE loc_22DE:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+1F7j
.text:000022DE                 movzx   edx, [ebp+var_54]
.text:000022E2                 cmp     edx, 8
.text:000022E5                 jnz     short loc_22FE
.text:000022E7                 cmp     [ebp+var_4C], 0
.text:000022EB                 jz      short loc_22FE
.text:000022ED                 mov     eax, [ebp+var_4C]
.text:000022F0                 push    eax             ; wchar_t *
.text:000022F1                 mov     ecx, [ebp+arg_4]
.text:000022F4                 add     ecx, 24h ; '$'  ; this
.text:000022F7                 call    ?SetFromBstr@UString@@QAEXPA_W@Z ; UString::SetFromBstr(wchar_t *)
.text:000022FC                 jmp     short loc_2324
.text:000022FE ; ---------------------------------------------------------------------------
.text:000022FE
.text:000022FE loc_22FE:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+21Dj
.text:000022FE                                         ; CArc::GetItem(uint,CReadArcItem &)+223j
.text:000022FE                 movzx   ecx, [ebp+var_54]
.text:00002302                 test    ecx, ecx
.text:00002304                 jz      short loc_2324
.text:00002306                 mov     [ebp+var_7C], 80004005h
.text:0000230D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002314                 lea     ecx, [ebp+var_54] ; this
.text:00002317                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000231C                 mov     eax, [ebp+var_7C]
.text:0000231F                 jmp     loc_25A9
.text:00002324 ; ---------------------------------------------------------------------------
.text:00002324
.text:00002324 loc_2324:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+234j
.text:00002324                                         ; CArc::GetItem(uint,CReadArcItem &)+23Cj
.text:00002324                 mov     [ebp+var_21], 0
.text:00002328                 mov     edx, [ebp+arg_4]
.text:0000232B                 mov     eax, [ebp+var_38]
.text:0000232E                 mov     [edx+34h], eax
.text:00002331                 mov     ecx, [ebp+var_38]
.text:00002334                 mov     [ebp+var_1C], ecx
.text:00002337                 cmp     [ebp+var_38], 0FFFFFFFFh
.text:0000233B                 jnz     short loc_2351
.text:0000233D                 mov     ecx, [ebp+arg_4]
.text:00002340                 add     ecx, 18h        ; this
.text:00002343                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00002348                 mov     edx, [ebp+arg_4]
.text:0000234B                 mov     byte ptr [edx+33h], 1
.text:0000234F                 jmp     short loc_23CF
.text:00002351 ; ---------------------------------------------------------------------------
.text:00002351
.text:00002351 loc_2351:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+273j
.text:00002351                 mov     eax, [ebp+arg_4]
.text:00002354                 add     eax, 18h
.text:00002357                 push    eax             ; struct UString *
.text:00002358                 mov     ecx, [ebp+var_38]
.text:0000235B                 push    ecx             ; unsigned int
.text:0000235C                 mov     ecx, [ebp+var_10] ; this
.text:0000235F                 call    ?GetItemPath2@CArc@@QBEJIAAVUString@@@Z ; CArc::GetItemPath2(uint,UString &)
.text:00002364                 mov     [ebp+var_60], eax
.text:00002367                 cmp     [ebp+var_60], 0
.text:0000236B                 jz      short loc_238A
.text:0000236D                 mov     edx, [ebp+var_60]
.text:00002370                 mov     [ebp+var_80], edx
.text:00002373                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000237A                 lea     ecx, [ebp+var_54] ; this
.text:0000237D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002382                 mov     eax, [ebp+var_80]
.text:00002385                 jmp     loc_25A9
.text:0000238A ; ---------------------------------------------------------------------------
.text:0000238A
.text:0000238A loc_238A:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+2A3j
.text:0000238A                 mov     eax, [ebp+arg_4]
.text:0000238D                 add     eax, 33h ; '3'
.text:00002390                 push    eax             ; bool *
.text:00002391                 mov     ecx, [ebp+var_38]
.text:00002394                 push    ecx             ; unsigned int
.text:00002395                 mov     ecx, [ebp+var_10]
.text:00002398                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000239D                 push    eax             ; struct IInArchive *
.text:0000239E                 call    ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir(IInArchive *,uint,bool &)
.text:000023A3                 mov     [ebp+var_64], eax
.text:000023A6                 cmp     [ebp+var_64], 0
.text:000023AA                 jz      short loc_23CF
.text:000023AC                 mov     edx, [ebp+var_64]
.text:000023AF                 mov     [ebp+var_84], edx
.text:000023B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000023BC                 lea     ecx, [ebp+var_54] ; this
.text:000023BF                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000023C4                 mov     eax, [ebp+var_84]
.text:000023CA                 jmp     loc_25A9
.text:000023CF ; ---------------------------------------------------------------------------
.text:000023CF
.text:000023CF loc_23CF:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+287j
.text:000023CF                                         ; CArc::GetItem(uint,CReadArcItem &)+2E2j
.text:000023CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000023D6                 lea     ecx, [ebp+var_54] ; this
.text:000023D9                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000023DE
.text:000023DE loc_23DE:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+133j
.text:000023DE                                         ; CArc::GetItem(uint,CReadArcItem &)+14Aj ...
.text:000023DE                 mov     eax, [ebp+arg_4]
.text:000023E1                 movzx   ecx, byte ptr [eax+31h]
.text:000023E5                 test    ecx, ecx
.text:000023E7                 jnz     short loc_23F5
.text:000023E9                 movzx   edx, [ebp+var_21]
.text:000023ED                 test    edx, edx
.text:000023EF                 jz      loc_2482
.text:000023F5
.text:000023F5 loc_23F5:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+31Fj
.text:000023F5                 mov     ecx, [ebp+arg_4]
.text:000023F8                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000023FD                 push    eax             ; wchar_t *
.text:000023FE                 call    ?FindAltStreamColon_in_Path@@YGHPB_W@Z ; FindAltStreamColon_in_Path(wchar_t const *)
.text:00002403                 mov     [ebp+var_68], eax
.text:00002406                 cmp     [ebp+var_68], 0
.text:0000240A                 jl      short loc_2482
.text:0000240C                 mov     eax, [ebp+var_68]
.text:0000240F                 push    eax             ; unsigned int
.text:00002410                 mov     ecx, [ebp+arg_4]
.text:00002413                 add     ecx, 18h        ; this
.text:00002416                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:0000241B                 mov     ecx, [ebp+var_68]
.text:0000241E                 add     ecx, 1
.text:00002421                 push    ecx             ; unsigned int
.text:00002422                 mov     ecx, [ebp+arg_4] ; this
.text:00002425                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000242A                 push    eax
.text:0000242B                 mov     ecx, [ebp+arg_4]
.text:0000242E                 add     ecx, 24h ; '$'
.text:00002431                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00002436                 cmp     [ebp+var_68], 0
.text:0000243A                 jz      short loc_2465
.text:0000243C                 mov     ecx, [ebp+arg_4]
.text:0000243F                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002444                 mov     edx, [ebp+var_68]
.text:00002447                 movzx   eax, word ptr [eax+edx*2-2]
.text:0000244C                 push    eax             ; wchar_t
.text:0000244D                 call    ?IsPathSepar@@YG_N_W@Z ; IsPathSepar(wchar_t)
.text:00002452                 movzx   ecx, al
.text:00002455                 test    ecx, ecx
.text:00002457                 jnz     short loc_2465
.text:00002459                 mov     [ebp+var_90], 0
.text:00002463                 jmp     short loc_246F
.text:00002465 ; ---------------------------------------------------------------------------
.text:00002465
.text:00002465 loc_2465:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+372j
.text:00002465                                         ; CArc::GetItem(uint,CReadArcItem &)+38Fj
.text:00002465                 mov     [ebp+var_90], 1
.text:0000246F
.text:0000246F loc_246F:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+39Bj
.text:0000246F                 mov     edx, [ebp+arg_4]
.text:00002472                 mov     al, byte ptr [ebp+var_90]
.text:00002478                 mov     [edx+33h], al
.text:0000247B                 mov     ecx, [ebp+arg_4]
.text:0000247E                 mov     byte ptr [ecx+30h], 1
.text:00002482
.text:00002482 loc_2482:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+327j
.text:00002482                                         ; CArc::GetItem(uint,CReadArcItem &)+342j
.text:00002482                 mov     edx, [ebp+arg_4]
.text:00002485                 movzx   eax, byte ptr [edx+38h]
.text:00002489                 test    eax, eax
.text:0000248B                 jz      loc_2594
.text:00002491                 mov     ecx, [ebp+arg_4]
.text:00002494                 add     ecx, 0Ch
.text:00002497                 push    ecx
.text:00002498                 mov     edx, [ebp+arg_4]
.text:0000249B                 mov     eax, [edx+3Ch]
.text:0000249E                 push    eax
.text:0000249F                 mov     ecx, [ebp+var_1C]
.text:000024A2                 push    ecx
.text:000024A3                 mov     ecx, [ebp+var_10]
.text:000024A6                 call    ?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)
.text:000024AB                 mov     [ebp+var_6C], eax
.text:000024AE                 cmp     [ebp+var_6C], 0
.text:000024B2                 jz      short loc_24BC
.text:000024B4                 mov     eax, [ebp+var_6C]
.text:000024B7                 jmp     loc_25A9
.text:000024BC ; ---------------------------------------------------------------------------
.text:000024BC
.text:000024BC loc_24BC:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+3EAj
.text:000024BC                 mov     edx, [ebp+arg_4]
.text:000024BF                 movzx   eax, byte ptr [edx+31h]
.text:000024C3                 test    eax, eax
.text:000024C5                 jnz     short loc_24D3
.text:000024C7                 movzx   ecx, [ebp+var_21]
.text:000024CB                 test    ecx, ecx
.text:000024CD                 jz      loc_2592
.text:000024D3
.text:000024D3 loc_24D3:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+3FDj
.text:000024D3                 mov     ecx, [ebp+arg_4]
.text:000024D6                 add     ecx, 0Ch
.text:000024D9                 call    ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty(void)
.text:000024DE                 movzx   edx, al
.text:000024E1                 test    edx, edx
.text:000024E3                 jnz     loc_2592
.text:000024E9                 mov     ecx, [ebp+arg_4]
.text:000024EC                 add     ecx, 0Ch
.text:000024EF                 call    ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back(void)
.text:000024F4                 mov     [ebp+var_74], eax
.text:000024F7                 mov     ecx, [ebp+var_74]
.text:000024FA                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000024FF                 push    eax             ; wchar_t *
.text:00002500                 call    ?FindAltStreamColon_in_Path@@YGHPB_W@Z ; FindAltStreamColon_in_Path(wchar_t const *)
.text:00002505                 mov     [ebp+var_70], eax
.text:00002508                 cmp     [ebp+var_70], 0
.text:0000250C                 jl      short loc_2581
.text:0000250E                 mov     eax, [ebp+var_70]
.text:00002511                 add     eax, 1
.text:00002514                 push    eax             ; unsigned int
.text:00002515                 mov     ecx, [ebp+var_74] ; this
.text:00002518                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000251D                 push    eax
.text:0000251E                 mov     ecx, [ebp+arg_4]
.text:00002521                 add     ecx, 24h ; '$'
.text:00002524                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00002529                 cmp     [ebp+var_70], 0
.text:0000252D                 jz      short loc_2558
.text:0000252F                 mov     ecx, [ebp+var_74]
.text:00002532                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002537                 mov     ecx, [ebp+var_70]
.text:0000253A                 movzx   edx, word ptr [eax+ecx*2-2]
.text:0000253F                 push    edx             ; wchar_t
.text:00002540                 call    ?IsPathSepar@@YG_N_W@Z ; IsPathSepar(wchar_t)
.text:00002545                 movzx   eax, al
.text:00002548                 test    eax, eax
.text:0000254A                 jnz     short loc_2558
.text:0000254C                 mov     [ebp+var_94], 0
.text:00002556                 jmp     short loc_2562
.text:00002558 ; ---------------------------------------------------------------------------
.text:00002558
.text:00002558 loc_2558:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+465j
.text:00002558                                         ; CArc::GetItem(uint,CReadArcItem &)+482j
.text:00002558                 mov     [ebp+var_94], 1
.text:00002562
.text:00002562 loc_2562:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+48Ej
.text:00002562                 mov     ecx, [ebp+arg_4]
.text:00002565                 mov     dl, byte ptr [ebp+var_94]
.text:0000256B                 mov     [ecx+33h], dl
.text:0000256E                 mov     eax, [ebp+arg_4]
.text:00002571                 mov     byte ptr [eax+30h], 1
.text:00002575                 mov     ecx, [ebp+var_70]
.text:00002578                 push    ecx             ; unsigned int
.text:00002579                 mov     ecx, [ebp+var_74] ; this
.text:0000257C                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00002581
.text:00002581 loc_2581:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+444j
.text:00002581                 cmp     [ebp+var_70], 0
.text:00002585                 jnz     short loc_2592
.text:00002587                 mov     ecx, [ebp+arg_4]
.text:0000258A                 add     ecx, 0Ch
.text:0000258D                 call    ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::DeleteBack(void)
.text:00002592
.text:00002592 loc_2592:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+405j
.text:00002592                                         ; CArc::GetItem(uint,CReadArcItem &)+41Bj ...
.text:00002592                 jmp     short loc_25A7
.text:00002594 ; ---------------------------------------------------------------------------
.text:00002594
.text:00002594 loc_2594:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+3C3j
.text:00002594                 mov     edx, [ebp+arg_4]
.text:00002597                 add     edx, 0Ch
.text:0000259A                 push    edx
.text:0000259B                 mov     eax, [ebp+arg_4]
.text:0000259E                 add     eax, 18h
.text:000025A1                 push    eax
.text:000025A2                 call    ?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts(UString const &,CObjectVector<UString> &)
.text:000025A7
.text:000025A7 loc_25A7:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &):loc_2592j
.text:000025A7                 xor     eax, eax
.text:000025A9
.text:000025A9 loc_25A9:                               ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+A7j
.text:000025A9                                         ; CArc::GetItem(uint,CReadArcItem &)+D4j ...
.text:000025A9                 push    edx
.text:000025AA                 mov     ecx, ebp
.text:000025AC                 push    eax
.text:000025AD                 lea     edx, $LN40
.text:000025B3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000025B8                 pop     eax
.text:000025B9                 pop     edx
.text:000025BA                 mov     ecx, [ebp+var_C]
.text:000025BD                 mov     large fs:0, ecx
.text:000025C4                 pop     ecx
.text:000025C5                 pop     edi
.text:000025C6                 pop     esi
.text:000025C7                 add     esp, 94h
.text:000025CD                 cmp     ebp, esp
.text:000025CF                 call    __RTC_CheckEsp
.text:000025D4                 mov     esp, ebp
.text:000025D6                 pop     ebp
.text:000025D7                 retn    8
.text:000025D7 ?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z endp
.text:000025D7
.text:000025D7 ; ---------------------------------------------------------------------------
.text:000025DA                 align 4
.text:000025DC $LN40           dd 3                    ; DATA XREF: CArc::GetItem(uint,CReadArcItem &)+4E5o
.text:000025E0                 dd offset $LN39
.text:000025E4 $LN39           dd 0FFFFFFD4h, 4        ; DATA XREF: .text:000025E0o
.text:000025EC                 dd offset $LN35_1       ; "parentType"
.text:000025F0                 dd 0FFFFFFC8h, 4
.text:000025F8                 dd offset $LN36_1       ; "parentIndex"
.text:000025FC                 dd 0FFFFFFACh, 10h
.text:00002604                 dd offset $LN37_0       ; "prop"
.text:00002608 $LN37_0         db 'prop',0             ; DATA XREF: .text:00002604o
.text:0000260D $LN36_1         db 'parentIndex',0      ; DATA XREF: .text:000025F8o
.text:00002619 $LN35_1         db 'parentType',0       ; DATA XREF: .text:000025ECo
.text:00002624                 align 8
.text:00002628
.text:00002628 ; =============== S U B R O U T I N E =======================================
.text:00002628
.text:00002628 ; Attributes: bp-based frame
.text:00002628
.text:00002628 ; __int32 __thiscall CArc::GetItemSize(CArc *this, unsigned int, unsigned __int64 *, bool *)
.text:00002628                 public ?GetItemSize@CArc@@QBEJIAA_KAA_N@Z
.text:00002628 ?GetItemSize@CArc@@QBEJIAA_KAA_N@Z proc near
.text:00002628
.text:00002628 var_44          = dword ptr -44h
.text:00002628 var_40          = dword ptr -40h
.text:00002628 var_3C          = dword ptr -3Ch
.text:00002628 var_38          = dword ptr -38h
.text:00002628 var_34          = dword ptr -34h
.text:00002628 var_30          = dword ptr -30h
.text:00002628 var_2C          = dword ptr -2Ch
.text:00002628 var_24          = word ptr -24h
.text:00002628 var_1C          = dword ptr -1Ch
.text:00002628 var_18          = dword ptr -18h
.text:00002628 var_10          = dword ptr -10h
.text:00002628 var_C           = dword ptr -0Ch
.text:00002628 var_4           = dword ptr -4
.text:00002628 arg_0           = dword ptr  8
.text:00002628 arg_4           = dword ptr  0Ch
.text:00002628 arg_8           = dword ptr  10h
.text:00002628
.text:00002628                 push    ebp
.text:00002629                 mov     ebp, esp
.text:0000262B                 push    0FFFFFFFFh
.text:0000262D                 push    offset __ehhandler$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z
.text:00002632                 mov     eax, large fs:0
.text:00002638                 push    eax
.text:00002639                 sub     esp, 38h
.text:0000263C                 push    esi
.text:0000263D                 push    edi
.text:0000263E                 push    ecx
.text:0000263F                 lea     edi, [ebp+var_44]
.text:00002642                 mov     ecx, 0Eh
.text:00002647                 mov     eax, 0CCCCCCCCh
.text:0000264C                 rep stosd
.text:0000264E                 pop     ecx
.text:0000264F                 mov     eax, dword ptr ds:___security_cookie
.text:00002654                 xor     eax, ebp
.text:00002656                 push    eax
.text:00002657                 lea     eax, [ebp+var_C]
.text:0000265A                 mov     large fs:0, eax
.text:00002660                 mov     [ebp+var_10], ecx
.text:00002663                 lea     ecx, [ebp+var_24] ; this
.text:00002666                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000266B                 mov     [ebp+var_4], 0
.text:00002672                 mov     eax, [ebp+arg_8]
.text:00002675                 mov     byte ptr [eax], 0
.text:00002678                 mov     ecx, [ebp+arg_4]
.text:0000267B                 mov     dword ptr [ecx], 0
.text:00002681                 mov     dword ptr [ecx+4], 0
.text:00002688                 mov     ecx, [ebp+var_10]
.text:0000268B                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:00002690                 mov     [ebp+var_40], eax
.text:00002693                 mov     esi, esp
.text:00002695                 lea     edx, [ebp+var_24]
.text:00002698                 push    edx
.text:00002699                 push    7
.text:0000269B                 mov     eax, [ebp+arg_0]
.text:0000269E                 push    eax
.text:0000269F                 mov     ecx, [ebp+var_40]
.text:000026A2                 push    ecx
.text:000026A3                 mov     edx, [ebp+var_40]
.text:000026A6                 mov     eax, [edx]
.text:000026A8                 mov     ecx, [eax+18h]
.text:000026AB                 call    ecx
.text:000026AD                 cmp     esi, esp
.text:000026AF                 call    __RTC_CheckEsp
.text:000026B4                 mov     [ebp+var_2C], eax
.text:000026B7                 cmp     [ebp+var_2C], 0
.text:000026BB                 jz      short loc_26DA
.text:000026BD                 mov     edx, [ebp+var_2C]
.text:000026C0                 mov     [ebp+var_30], edx
.text:000026C3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000026CA                 lea     ecx, [ebp+var_24] ; this
.text:000026CD                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000026D2                 mov     eax, [ebp+var_30]
.text:000026D5                 jmp     loc_278A
.text:000026DA ; ---------------------------------------------------------------------------
.text:000026DA
.text:000026DA loc_26DA:                               ; CODE XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+93j
.text:000026DA                 movzx   eax, [ebp+var_24]
.text:000026DE                 mov     [ebp+var_44], eax
.text:000026E1                 cmp     [ebp+var_44], 15h ; switch 22 cases
.text:000026E5                 ja      short $LN1      ; jumptable 000026F1 default case
.text:000026E7                 mov     ecx, [ebp+var_44]
.text:000026EA                 movzx   edx, ds:$LN13_2[ecx]
.text:000026F1                 jmp     ds:$LN18_1[edx*4] ; switch jump
.text:000026F8 ; ---------------------------------------------------------------------------
.text:000026F8
.text:000026F8 $LN6_0:                                 ; CODE XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+C9j
.text:000026F8                                         ; DATA XREF: .text:$LN18_1o
.text:000026F8                 movzx   eax, byte ptr [ebp+var_1C] ; jumptable 000026F1 case 17
.text:000026FC                 cdq
.text:000026FD                 mov     ecx, [ebp+arg_4]
.text:00002700                 mov     [ecx], eax
.text:00002702                 mov     [ecx+4], edx
.text:00002705                 jmp     short loc_276B
.text:00002707 ; ---------------------------------------------------------------------------
.text:00002707
.text:00002707 $LN5:                                   ; CODE XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+C9j
.text:00002707                                         ; DATA XREF: .text:$LN18_1o
.text:00002707                 movzx   eax, word ptr [ebp+var_1C] ; jumptable 000026F1 case 18
.text:0000270B                 cdq
.text:0000270C                 mov     ecx, [ebp+arg_4]
.text:0000270F                 mov     [ecx], eax
.text:00002711                 mov     [ecx+4], edx
.text:00002714                 jmp     short loc_276B
.text:00002716 ; ---------------------------------------------------------------------------
.text:00002716
.text:00002716 $LN4_0:                                 ; CODE XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+C9j
.text:00002716                                         ; DATA XREF: .text:$LN18_1o
.text:00002716                 mov     edx, [ebp+var_1C] ; jumptable 000026F1 case 19
.text:00002719                 xor     eax, eax
.text:0000271B                 mov     ecx, [ebp+arg_4]
.text:0000271E                 mov     [ecx], edx
.text:00002720                 mov     [ecx+4], eax
.text:00002723                 jmp     short loc_276B
.text:00002725 ; ---------------------------------------------------------------------------
.text:00002725
.text:00002725 $LN3:                                   ; CODE XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+C9j
.text:00002725                                         ; DATA XREF: .text:$LN18_1o
.text:00002725                 mov     edx, [ebp+arg_4] ; jumptable 000026F1 case 21
.text:00002728                 mov     eax, [ebp+var_1C]
.text:0000272B                 mov     [edx], eax
.text:0000272D                 mov     ecx, [ebp+var_18]
.text:00002730                 mov     [edx+4], ecx
.text:00002733                 jmp     short loc_276B
.text:00002735 ; ---------------------------------------------------------------------------
.text:00002735
.text:00002735 $LN2_0:                                 ; CODE XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+C9j
.text:00002735                                         ; DATA XREF: .text:$LN18_1o
.text:00002735                 mov     [ebp+var_34], 0 ; jumptable 000026F1 case 0
.text:0000273C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002743                 lea     ecx, [ebp+var_24] ; this
.text:00002746                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000274B                 mov     eax, [ebp+var_34]
.text:0000274E                 jmp     short loc_278A
.text:00002750 ; ---------------------------------------------------------------------------
.text:00002750
.text:00002750 $LN1:                                   ; CODE XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+BDj
.text:00002750                                         ; CArc::GetItemSize(uint,unsigned __int64 &,bool &)+C9j
.text:00002750                                         ; DATA XREF: ...
.text:00002750                 mov     [ebp+var_38], 80004005h ; jumptable 000026F1 default case
.text:00002757                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000275E                 lea     ecx, [ebp+var_24] ; this
.text:00002761                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002766                 mov     eax, [ebp+var_38]
.text:00002769                 jmp     short loc_278A
.text:0000276B ; ---------------------------------------------------------------------------
.text:0000276B
.text:0000276B loc_276B:                               ; CODE XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+DDj
.text:0000276B                                         ; CArc::GetItemSize(uint,unsigned __int64 &,bool &)+ECj ...
.text:0000276B                 mov     edx, [ebp+arg_8]
.text:0000276E                 mov     byte ptr [edx], 1
.text:00002771                 mov     [ebp+var_3C], 0
.text:00002778                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000277F                 lea     ecx, [ebp+var_24] ; this
.text:00002782                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002787                 mov     eax, [ebp+var_3C]
.text:0000278A
.text:0000278A loc_278A:                               ; CODE XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+ADj
.text:0000278A                                         ; CArc::GetItemSize(uint,unsigned __int64 &,bool &)+126j ...
.text:0000278A                 push    edx
.text:0000278B                 mov     ecx, ebp
.text:0000278D                 push    eax
.text:0000278E                 lea     edx, $LN17_0
.text:00002794                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002799                 pop     eax
.text:0000279A                 pop     edx
.text:0000279B                 mov     ecx, [ebp+var_C]
.text:0000279E                 mov     large fs:0, ecx
.text:000027A5                 pop     ecx
.text:000027A6                 pop     edi
.text:000027A7                 pop     esi
.text:000027A8                 add     esp, 44h
.text:000027AB                 cmp     ebp, esp
.text:000027AD                 call    __RTC_CheckEsp
.text:000027B2                 mov     esp, ebp
.text:000027B4                 pop     ebp
.text:000027B5                 retn    0Ch
.text:000027B5 ?GetItemSize@CArc@@QBEJIAA_KAA_N@Z endp
.text:000027B5
.text:000027B5 ; ---------------------------------------------------------------------------
.text:000027B8 $LN17_0         dd 1                    ; DATA XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+166o
.text:000027BC                 dd offset $LN16
.text:000027C0 $LN16           dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:000027BCo
.text:000027C8                 dd offset $LN14_1       ; "prop"
.text:000027CC $LN14_1         db 'prop',0             ; DATA XREF: .text:000027C8o
.text:000027D1                 align 4
.text:000027D4 $LN18_1         dd offset $LN2_0        ; DATA XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+C9r
.text:000027D4                 dd offset $LN6_0        ; jump table for switch statement
.text:000027D4                 dd offset $LN5
.text:000027D4                 dd offset $LN4_0
.text:000027D4                 dd offset $LN3
.text:000027D4                 dd offset $LN1
.text:000027EC $LN13_2         db      0,     5,     5,     5
.text:000027EC                                         ; DATA XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+C2r
.text:000027EC                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:000027EC                 db      5,     5,     5,     5
.text:000027EC                 db      5,     5,     5,     5
.text:000027EC                 db      5,     1,     2,     3
.text:000027EC                 db      5,     4
.text:00002802                 align 8
.text:00002808
.text:00002808 ; =============== S U B R O U T I N E =======================================
.text:00002808
.text:00002808 ; Attributes: bp-based frame
.text:00002808
.text:00002808 ; __int32 __thiscall CArc::GetItemMTime(CArc *this, unsigned int, struct _FILETIME *, bool *)
.text:00002808                 public ?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z
.text:00002808 ?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z proc near
.text:00002808                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+8ECp
.text:00002808
.text:00002808 var_3C          = dword ptr -3Ch
.text:00002808 var_38          = dword ptr -38h
.text:00002808 var_34          = dword ptr -34h
.text:00002808 var_30          = dword ptr -30h
.text:00002808 var_2C          = dword ptr -2Ch
.text:00002808 var_24          = word ptr -24h
.text:00002808 var_1C          = dword ptr -1Ch
.text:00002808 var_18          = dword ptr -18h
.text:00002808 var_10          = dword ptr -10h
.text:00002808 var_C           = dword ptr -0Ch
.text:00002808 var_4           = dword ptr -4
.text:00002808 arg_0           = dword ptr  8
.text:00002808 arg_4           = dword ptr  0Ch
.text:00002808 arg_8           = dword ptr  10h
.text:00002808
.text:00002808                 push    ebp
.text:00002809                 mov     ebp, esp
.text:0000280B                 push    0FFFFFFFFh
.text:0000280D                 push    offset __ehhandler$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z
.text:00002812                 mov     eax, large fs:0
.text:00002818                 push    eax
.text:00002819                 sub     esp, 30h
.text:0000281C                 push    esi
.text:0000281D                 push    edi
.text:0000281E                 push    ecx
.text:0000281F                 lea     edi, [ebp+var_3C]
.text:00002822                 mov     ecx, 0Ch
.text:00002827                 mov     eax, 0CCCCCCCCh
.text:0000282C                 rep stosd
.text:0000282E                 pop     ecx
.text:0000282F                 mov     eax, dword ptr ds:___security_cookie
.text:00002834                 xor     eax, ebp
.text:00002836                 push    eax
.text:00002837                 lea     eax, [ebp+var_C]
.text:0000283A                 mov     large fs:0, eax
.text:00002840                 mov     [ebp+var_10], ecx
.text:00002843                 lea     ecx, [ebp+var_24] ; this
.text:00002846                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000284B                 mov     [ebp+var_4], 0
.text:00002852                 mov     eax, [ebp+arg_8]
.text:00002855                 mov     byte ptr [eax], 0
.text:00002858                 mov     ecx, [ebp+arg_4]
.text:0000285B                 mov     dword ptr [ecx], 0
.text:00002861                 mov     edx, [ebp+arg_4]
.text:00002864                 mov     dword ptr [edx+4], 0
.text:0000286B                 mov     ecx, [ebp+var_10]
.text:0000286E                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:00002873                 mov     [ebp+var_3C], eax
.text:00002876                 mov     esi, esp
.text:00002878                 lea     eax, [ebp+var_24]
.text:0000287B                 push    eax
.text:0000287C                 push    0Ch
.text:0000287E                 mov     ecx, [ebp+arg_0]
.text:00002881                 push    ecx
.text:00002882                 mov     edx, [ebp+var_3C]
.text:00002885                 push    edx
.text:00002886                 mov     eax, [ebp+var_3C]
.text:00002889                 mov     ecx, [eax]
.text:0000288B                 mov     edx, [ecx+18h]
.text:0000288E                 call    edx
.text:00002890                 cmp     esi, esp
.text:00002892                 call    __RTC_CheckEsp
.text:00002897                 mov     [ebp+var_2C], eax
.text:0000289A                 cmp     [ebp+var_2C], 0
.text:0000289E                 jz      short loc_28BD
.text:000028A0                 mov     eax, [ebp+var_2C]
.text:000028A3                 mov     [ebp+var_30], eax
.text:000028A6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000028AD                 lea     ecx, [ebp+var_24] ; this
.text:000028B0                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000028B5                 mov     eax, [ebp+var_30]
.text:000028B8                 jmp     loc_2945
.text:000028BD ; ---------------------------------------------------------------------------
.text:000028BD
.text:000028BD loc_28BD:                               ; CODE XREF: CArc::GetItemMTime(uint,_FILETIME &,bool &)+96j
.text:000028BD                 movzx   ecx, [ebp+var_24]
.text:000028C1                 cmp     ecx, 40h ; '@'
.text:000028C4                 jnz     short loc_28DC
.text:000028C6                 mov     edx, [ebp+arg_4]
.text:000028C9                 mov     eax, [ebp+var_1C]
.text:000028CC                 mov     [edx], eax
.text:000028CE                 mov     ecx, [ebp+var_18]
.text:000028D1                 mov     [edx+4], ecx
.text:000028D4                 mov     edx, [ebp+arg_8]
.text:000028D7                 mov     byte ptr [edx], 1
.text:000028DA                 jmp     short loc_292C
.text:000028DC ; ---------------------------------------------------------------------------
.text:000028DC
.text:000028DC loc_28DC:                               ; CODE XREF: CArc::GetItemMTime(uint,_FILETIME &,bool &)+BCj
.text:000028DC                 movzx   eax, [ebp+var_24]
.text:000028E0                 test    eax, eax
.text:000028E2                 jz      short loc_2901
.text:000028E4                 mov     [ebp+var_34], 80004005h
.text:000028EB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000028F2                 lea     ecx, [ebp+var_24] ; this
.text:000028F5                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000028FA                 mov     eax, [ebp+var_34]
.text:000028FD                 jmp     short loc_2945
.text:000028FF ; ---------------------------------------------------------------------------
.text:000028FF                 jmp     short loc_292C
.text:00002901 ; ---------------------------------------------------------------------------
.text:00002901
.text:00002901 loc_2901:                               ; CODE XREF: CArc::GetItemMTime(uint,_FILETIME &,bool &)+DAj
.text:00002901                 mov     ecx, [ebp+var_10]
.text:00002904                 movzx   edx, byte ptr [ecx+0A4h]
.text:0000290B                 test    edx, edx
.text:0000290D                 jz      short loc_292C
.text:0000290F                 mov     eax, [ebp+var_10]
.text:00002912                 mov     ecx, [eax+9Ch]
.text:00002918                 mov     edx, [eax+0A0h]
.text:0000291E                 mov     eax, [ebp+arg_4]
.text:00002921                 mov     [eax], ecx
.text:00002923                 mov     [eax+4], edx
.text:00002926                 mov     ecx, [ebp+arg_8]
.text:00002929                 mov     byte ptr [ecx], 1
.text:0000292C
.text:0000292C loc_292C:                               ; CODE XREF: CArc::GetItemMTime(uint,_FILETIME &,bool &)+D2j
.text:0000292C                                         ; CArc::GetItemMTime(uint,_FILETIME &,bool &)+F7j ...
.text:0000292C                 mov     [ebp+var_38], 0
.text:00002933                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000293A                 lea     ecx, [ebp+var_24] ; this
.text:0000293D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002942                 mov     eax, [ebp+var_38]
.text:00002945
.text:00002945 loc_2945:                               ; CODE XREF: CArc::GetItemMTime(uint,_FILETIME &,bool &)+B0j
.text:00002945                                         ; CArc::GetItemMTime(uint,_FILETIME &,bool &)+F5j
.text:00002945                 push    edx
.text:00002946                 mov     ecx, ebp
.text:00002948                 push    eax
.text:00002949                 lea     edx, $LN13_3
.text:0000294F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002954                 pop     eax
.text:00002955                 pop     edx
.text:00002956                 mov     ecx, [ebp+var_C]
.text:00002959                 mov     large fs:0, ecx
.text:00002960                 pop     ecx
.text:00002961                 pop     edi
.text:00002962                 pop     esi
.text:00002963                 add     esp, 3Ch
.text:00002966                 cmp     ebp, esp
.text:00002968                 call    __RTC_CheckEsp
.text:0000296D                 mov     esp, ebp
.text:0000296F                 pop     ebp
.text:00002970                 retn    0Ch
.text:00002970 ?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z endp
.text:00002970
.text:00002970 ; ---------------------------------------------------------------------------
.text:00002973                 align 4
.text:00002974 $LN13_3         dd 1                    ; DATA XREF: CArc::GetItemMTime(uint,_FILETIME &,bool &)+141o
.text:00002978                 dd offset $LN12_1
.text:0000297C $LN12_1         dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00002978o
.text:00002984                 dd offset $LN10_2       ; "prop"
.text:00002988 $LN10_2         db 'prop',0             ; DATA XREF: .text:00002984o
.text:0000298D                 db 0Bh dup(0CCh)
.text:00002998
.text:00002998 ; =============== S U B R O U T I N E =======================================
.text:00002998
.text:00002998 ; Attributes: bp-based frame
.text:00002998
.text:00002998 ; __int32 __cdecl CArchiveOpenCallback_Offset::CryptoGetTextPassword(CArchiveOpenCallback_Offset *this, wchar_t **)
.text:00002998                 public ?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
.text:00002998 ?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z proc near
.text:00002998                                         ; DATA XREF: .rdata:0000FAA8o
.text:00002998
.text:00002998 var_24          = dword ptr -24h
.text:00002998 var_20          = dword ptr -20h
.text:00002998 var_1C          = dword ptr -1Ch
.text:00002998 var_18          = dword ptr -18h
.text:00002998 var_14          = dword ptr -14h
.text:00002998 var_10          = dword ptr -10h
.text:00002998 var_C           = dword ptr -0Ch
.text:00002998 var_4           = dword ptr -4
.text:00002998 this            = dword ptr  8
.text:00002998 arg_4           = dword ptr  0Ch
.text:00002998
.text:00002998 ; FUNCTION CHUNK AT .text:00002A57 SIZE 0000001E BYTES
.text:00002998
.text:00002998                 push    ebp
.text:00002999                 mov     ebp, esp
.text:0000299B                 push    0FFFFFFFFh
.text:0000299D                 push    offset __ehhandler$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
.text:000029A2                 mov     eax, large fs:0
.text:000029A8                 push    eax
.text:000029A9                 push    ecx
.text:000029AA                 sub     esp, 14h
.text:000029AD                 push    ebx
.text:000029AE                 push    esi
.text:000029AF                 push    edi
.text:000029B0                 mov     eax, 0CCCCCCCCh
.text:000029B5                 mov     [ebp+var_24], eax
.text:000029B8                 mov     [ebp+var_20], eax
.text:000029BB                 mov     [ebp+var_1C], eax
.text:000029BE                 mov     [ebp+var_18], eax
.text:000029C1                 mov     [ebp+var_14], eax
.text:000029C4                 mov     eax, dword ptr ds:___security_cookie
.text:000029C9                 xor     eax, ebp
.text:000029CB                 push    eax
.text:000029CC                 lea     eax, [ebp+var_C]
.text:000029CF                 mov     large fs:0, eax
.text:000029D5                 mov     [ebp+var_10], esp
.text:000029D8                 mov     [ebp+var_4], 0
.text:000029DF                 mov     ecx, [ebp+this]
.text:000029E2                 add     ecx, 1Ch
.text:000029E5                 call    ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *(void)
.text:000029EA                 mov     [ebp+var_18], eax
.text:000029ED                 cmp     [ebp+var_18], 0
.text:000029F1                 jz      short loc_2A2A
.text:000029F3                 mov     ecx, [ebp+this]
.text:000029F6                 add     ecx, 1Ch
.text:000029F9                 call    ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator->(void)
.text:000029FE                 mov     [ebp+var_1C], eax
.text:00002A01                 mov     eax, [ebp+var_1C]
.text:00002A04                 mov     [ebp+var_20], eax
.text:00002A07                 mov     esi, esp
.text:00002A09                 mov     ecx, [ebp+arg_4]
.text:00002A0C                 push    ecx
.text:00002A0D                 mov     edx, [ebp+var_20]
.text:00002A10                 push    edx
.text:00002A11                 mov     eax, [ebp+var_20]
.text:00002A14                 mov     ecx, [eax]
.text:00002A16                 mov     edx, [ecx+0Ch]
.text:00002A19                 call    edx
.text:00002A1B                 cmp     esi, esp
.text:00002A1D                 call    __RTC_CheckEsp
.text:00002A22                 mov     [ebp+var_24], eax
.text:00002A25                 mov     eax, [ebp+var_24]
.text:00002A28                 jmp     short loc_2A57
.text:00002A2A ; ---------------------------------------------------------------------------
.text:00002A2A
.text:00002A2A loc_2A2A:                               ; CODE XREF: CArchiveOpenCallback_Offset::CryptoGetTextPassword(wchar_t * *)+59j
.text:00002A2A                 mov     eax, 80004001h
.text:00002A2F                 jmp     short loc_2A57
.text:00002A2F ?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z endp
.text:00002A2F
.text:00002A31
.text:00002A31 ; =============== S U B R O U T I N E =======================================
.text:00002A31
.text:00002A31
.text:00002A31 __catch$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$0 proc near
.text:00002A31                                         ; DATA XREF: .xdata$x:0000CFA0o
.text:00002A31                 mov     dword ptr [ebp-14h], 8007000Eh
.text:00002A38                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002A3F                 mov     eax, offset $LN8_2
.text:00002A44                 retn
.text:00002A44 __catch$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$0 endp
.text:00002A44
.text:00002A45 ; ---------------------------------------------------------------------------
.text:00002A45                 mov     eax, offset __tryend$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$1
.text:00002A4A                 retn
.text:00002A4B ; ---------------------------------------------------------------------------
.text:00002A4B
.text:00002A4B __tryend$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$1:
.text:00002A4B                                         ; DATA XREF: .text:00002A45o
.text:00002A4B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002A52                 jmp     short loc_2A57
.text:00002A54 ; ---------------------------------------------------------------------------
.text:00002A54
.text:00002A54 $LN8_2:                                 ; DATA XREF: __catch$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$0+Eo
.text:00002A54                 mov     eax, [ebp-14h]
.text:00002A57 ; START OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
.text:00002A57
.text:00002A57 loc_2A57:                               ; CODE XREF: CArchiveOpenCallback_Offset::CryptoGetTextPassword(wchar_t * *)+90j
.text:00002A57                                         ; CArchiveOpenCallback_Offset::CryptoGetTextPassword(wchar_t * *)+97j ...
.text:00002A57                 mov     ecx, [ebp+var_C]
.text:00002A5A                 mov     large fs:0, ecx
.text:00002A61                 pop     ecx
.text:00002A62                 pop     edi
.text:00002A63                 pop     esi
.text:00002A64                 pop     ebx
.text:00002A65                 add     esp, 24h
.text:00002A68                 cmp     ebp, esp
.text:00002A6A                 call    __RTC_CheckEsp
.text:00002A6F                 mov     esp, ebp
.text:00002A71                 pop     ebp
.text:00002A72                 retn    8
.text:00002A72 ; END OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
.text:00002A72 ; ---------------------------------------------------------------------------
.text:00002A75                 align 4
.text:00002A78
.text:00002A78 ; =============== S U B R O U T I N E =======================================
.text:00002A78
.text:00002A78 ; Attributes: bp-based frame
.text:00002A78
.text:00002A78 ; __int32 __stdcall CArchiveOpenCallback_Offset::SetTotal(CArchiveOpenCallback_Offset *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00002A78                 public ?SetTotal@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z
.text:00002A78 ?SetTotal@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z proc near
.text:00002A78                                         ; DATA XREF: .rdata:0000FABCo
.text:00002A78
.text:00002A78 this            = dword ptr  8
.text:00002A78
.text:00002A78                 push    ebp
.text:00002A79                 mov     ebp, esp
.text:00002A7B                 xor     eax, eax
.text:00002A7D                 pop     ebp
.text:00002A7E                 retn    0Ch
.text:00002A7E ?SetTotal@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z endp
.text:00002A7E
.text:00002A7E ; ---------------------------------------------------------------------------
.text:00002A81                 align 8
.text:00002A88
.text:00002A88 ; =============== S U B R O U T I N E =======================================
.text:00002A88
.text:00002A88 ; Attributes: bp-based frame
.text:00002A88
.text:00002A88 ; __int32 __stdcall CArchiveOpenCallback_Offset::SetCompleted(CArchiveOpenCallback_Offset *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00002A88                 public ?SetCompleted@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z
.text:00002A88 ?SetCompleted@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z proc near
.text:00002A88                                         ; DATA XREF: .rdata:0000FAC0o
.text:00002A88
.text:00002A88 var_14          = dword ptr -14h
.text:00002A88 var_10          = dword ptr -10h
.text:00002A88 var_C           = dword ptr -0Ch
.text:00002A88 var_8           = dword ptr -8
.text:00002A88 var_4           = dword ptr -4
.text:00002A88 this            = dword ptr  8
.text:00002A88 arg_8           = dword ptr  10h
.text:00002A88
.text:00002A88                 push    ebp
.text:00002A89                 mov     ebp, esp
.text:00002A8B                 sub     esp, 14h
.text:00002A8E                 push    esi
.text:00002A8F                 mov     eax, 0CCCCCCCCh
.text:00002A94                 mov     [ebp+var_14], eax
.text:00002A97                 mov     [ebp+var_10], eax
.text:00002A9A                 mov     [ebp+var_C], eax
.text:00002A9D                 mov     [ebp+var_8], eax
.text:00002AA0                 mov     [ebp+var_4], eax
.text:00002AA3                 mov     ecx, [ebp+this]
.text:00002AA6                 add     ecx, 0Ch
.text:00002AA9                 call    ??7?$CMyComPtr@UIArchiveOpenCallback@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenCallback>::operator!(void)
.text:00002AAE                 movzx   eax, al
.text:00002AB1                 test    eax, eax
.text:00002AB3                 jz      short loc_2AB9
.text:00002AB5                 xor     eax, eax
.text:00002AB7                 jmp     short loc_2B12
.text:00002AB9 ; ---------------------------------------------------------------------------
.text:00002AB9
.text:00002AB9 loc_2AB9:                               ; CODE XREF: CArchiveOpenCallback_Offset::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+2Bj
.text:00002AB9                 mov     ecx, [ebp+this]
.text:00002ABC                 mov     edx, [ecx+18h]
.text:00002ABF                 mov     [ebp+var_C], edx
.text:00002AC2                 mov     eax, [ecx+1Ch]
.text:00002AC5                 mov     [ebp+var_8], eax
.text:00002AC8                 cmp     [ebp+arg_8], 0
.text:00002ACC                 jz      short loc_2AE2
.text:00002ACE                 mov     ecx, [ebp+arg_8]
.text:00002AD1                 mov     edx, [ebp+var_C]
.text:00002AD4                 add     edx, [ecx]
.text:00002AD6                 mov     eax, [ebp+var_8]
.text:00002AD9                 adc     eax, [ecx+4]
.text:00002ADC                 mov     [ebp+var_C], edx
.text:00002ADF                 mov     [ebp+var_8], eax
.text:00002AE2
.text:00002AE2 loc_2AE2:                               ; CODE XREF: CArchiveOpenCallback_Offset::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+44j
.text:00002AE2                 mov     ecx, [ebp+this]
.text:00002AE5                 add     ecx, 0Ch
.text:00002AE8                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:00002AED                 mov     [ebp+var_14], eax
.text:00002AF0                 mov     esi, esp
.text:00002AF2                 lea     ecx, [ebp+var_C]
.text:00002AF5                 push    ecx
.text:00002AF6                 mov     edx, [ebp+this]
.text:00002AF9                 add     edx, 10h
.text:00002AFC                 push    edx
.text:00002AFD                 mov     eax, [ebp+var_14]
.text:00002B00                 push    eax
.text:00002B01                 mov     ecx, [ebp+var_14]
.text:00002B04                 mov     edx, [ecx]
.text:00002B06                 mov     eax, [edx+10h]
.text:00002B09                 call    eax
.text:00002B0B                 cmp     esi, esp
.text:00002B0D                 call    __RTC_CheckEsp
.text:00002B12
.text:00002B12 loc_2B12:                               ; CODE XREF: CArchiveOpenCallback_Offset::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+2Fj
.text:00002B12                 push    edx
.text:00002B13                 mov     ecx, ebp
.text:00002B15                 push    eax
.text:00002B16                 lea     edx, $LN7_3
.text:00002B1C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002B21                 pop     eax
.text:00002B22                 pop     edx
.text:00002B23                 pop     esi
.text:00002B24                 add     esp, 14h
.text:00002B27                 cmp     ebp, esp
.text:00002B29                 call    __RTC_CheckEsp
.text:00002B2E                 mov     esp, ebp
.text:00002B30                 pop     ebp
.text:00002B31                 retn    0Ch
.text:00002B31 ?SetCompleted@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z endp
.text:00002B31
.text:00002B31 ; ---------------------------------------------------------------------------
.text:00002B34 $LN7_3          dd 1                    ; DATA XREF: CArchiveOpenCallback_Offset::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+8Eo
.text:00002B38                 dd offset $LN6_1
.text:00002B3C $LN6_1          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00002B38o
.text:00002B44                 dd offset $LN5_0        ; "value"
.text:00002B48 $LN5_0          db 'value',0            ; DATA XREF: .text:00002B44o
.text:00002B4E                 db 0Ah dup(0CCh)
.text:00002B58
.text:00002B58 ; =============== S U B R O U T I N E =======================================
.text:00002B58
.text:00002B58 ; Attributes: bp-based frame
.text:00002B58
.text:00002B58 ; unsigned int __stdcall GetOpenArcErrorFlags(const struct NWindows::NCOM::CPropVariant *, bool *)
.text:00002B58                 public ?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z
.text:00002B58 ?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z proc near
.text:00002B58                                         ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+10Bp
.text:00002B58                                         ; CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+183p
.text:00002B58
.text:00002B58 var_8           = dword ptr -8
.text:00002B58 var_4           = dword ptr -4
.text:00002B58 arg_0           = dword ptr  8
.text:00002B58 arg_4           = dword ptr  0Ch
.text:00002B58
.text:00002B58                 push    ebp
.text:00002B59                 mov     ebp, esp
.text:00002B5B                 sub     esp, 8
.text:00002B5E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002B65                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B6C                 cmp     [ebp+arg_4], 0
.text:00002B70                 jz      short loc_2B78
.text:00002B72                 mov     eax, [ebp+arg_4]
.text:00002B75                 mov     byte ptr [eax], 0
.text:00002B78
.text:00002B78 loc_2B78:                               ; CODE XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+18j
.text:00002B78                 mov     ecx, [ebp+arg_0]
.text:00002B7B                 movzx   edx, word ptr [ecx]
.text:00002B7E                 mov     [ebp+var_8], edx
.text:00002B81                 cmp     [ebp+var_8], 0
.text:00002B85                 jz      short loc_2BBD
.text:00002B87                 cmp     [ebp+var_8], 13h
.text:00002B8B                 jz      short loc_2BA9
.text:00002B8D                 cmp     [ebp+var_8], 15h
.text:00002B91                 jz      short loc_2B95
.text:00002B93                 jmp     short loc_2BC1
.text:00002B95 ; ---------------------------------------------------------------------------
.text:00002B95
.text:00002B95 loc_2B95:                               ; CODE XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+39j
.text:00002B95                 cmp     [ebp+arg_4], 0
.text:00002B99                 jz      short loc_2BA1
.text:00002B9B                 mov     eax, [ebp+arg_4]
.text:00002B9E                 mov     byte ptr [eax], 1
.text:00002BA1
.text:00002BA1 loc_2BA1:                               ; CODE XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+41j
.text:00002BA1                 mov     ecx, [ebp+arg_0]
.text:00002BA4                 mov     eax, [ecx+8]
.text:00002BA7                 jmp     short loc_2BD6
.text:00002BA9 ; ---------------------------------------------------------------------------
.text:00002BA9
.text:00002BA9 loc_2BA9:                               ; CODE XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+33j
.text:00002BA9                 cmp     [ebp+arg_4], 0
.text:00002BAD                 jz      short loc_2BB5
.text:00002BAF                 mov     edx, [ebp+arg_4]
.text:00002BB2                 mov     byte ptr [edx], 1
.text:00002BB5
.text:00002BB5 loc_2BB5:                               ; CODE XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+55j
.text:00002BB5                 mov     eax, [ebp+arg_0]
.text:00002BB8                 mov     eax, [eax+8]
.text:00002BBB                 jmp     short loc_2BD6
.text:00002BBD ; ---------------------------------------------------------------------------
.text:00002BBD
.text:00002BBD loc_2BBD:                               ; CODE XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+2Dj
.text:00002BBD                 xor     eax, eax
.text:00002BBF                 jmp     short loc_2BD6
.text:00002BC1 ; ---------------------------------------------------------------------------
.text:00002BC1
.text:00002BC1 loc_2BC1:                               ; CODE XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+3Bj
.text:00002BC1                 mov     [ebp+var_4], 24E9Fh
.text:00002BC8                 push    offset __TI1H
.text:00002BCD                 lea     ecx, [ebp+var_4]
.text:00002BD0                 push    ecx
.text:00002BD1                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00002BD6 ; ---------------------------------------------------------------------------
.text:00002BD6
.text:00002BD6 loc_2BD6:                               ; CODE XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+4Fj
.text:00002BD6                                         ; GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+63j ...
.text:00002BD6                 add     esp, 8
.text:00002BD9                 cmp     ebp, esp
.text:00002BDB                 call    __RTC_CheckEsp
.text:00002BE0                 mov     esp, ebp
.text:00002BE2                 pop     ebp
.text:00002BE3                 retn    8
.text:00002BE3 ?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z endp
.text:00002BE3
.text:00002BE3 ; ---------------------------------------------------------------------------
.text:00002BE6                 align 4
.text:00002BE8
.text:00002BE8 ; =============== S U B R O U T I N E =======================================
.text:00002BE8
.text:00002BE8 ; Attributes: bp-based frame
.text:00002BE8
.text:00002BE8 ; void __thiscall CArcErrorInfo::ClearErrors(CArcErrorInfo *__hidden this)
.text:00002BE8                 public ?ClearErrors@CArcErrorInfo@@QAEXXZ
.text:00002BE8 ?ClearErrors@CArcErrorInfo@@QAEXXZ proc near
.text:00002BE8                                         ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+A3p
.text:00002BE8                                         ; CArc::OpenStream2(COpenOptions const &)+68p ...
.text:00002BE8
.text:00002BE8 var_4           = dword ptr -4
.text:00002BE8
.text:00002BE8                 push    ebp
.text:00002BE9                 mov     ebp, esp
.text:00002BEB                 push    ecx
.text:00002BEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BF3                 mov     [ebp+var_4], ecx
.text:00002BF6                 mov     eax, [ebp+var_4]
.text:00002BF9                 mov     byte ptr [eax], 0
.text:00002BFC                 mov     ecx, [ebp+var_4]
.text:00002BFF                 mov     byte ptr [ecx+1], 0
.text:00002C03                 mov     edx, [ebp+var_4]
.text:00002C06                 mov     byte ptr [edx+2], 0
.text:00002C0A                 mov     eax, [ebp+var_4]
.text:00002C0D                 mov     byte ptr [eax+3], 0
.text:00002C11                 mov     ecx, [ebp+var_4]
.text:00002C14                 mov     dword ptr [ecx+4], 0
.text:00002C1B                 mov     edx, [ebp+var_4]
.text:00002C1E                 mov     dword ptr [edx+8], 0
.text:00002C25                 mov     eax, [ebp+var_4]
.text:00002C28                 mov     dword ptr [eax+10h], 0
.text:00002C2F                 mov     dword ptr [eax+14h], 0
.text:00002C36                 mov     ecx, [ebp+var_4]
.text:00002C39                 add     ecx, 18h        ; this
.text:00002C3C                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00002C41                 mov     ecx, [ebp+var_4]
.text:00002C44                 add     ecx, 24h ; '$'  ; this
.text:00002C47                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00002C4C                 add     esp, 4
.text:00002C4F                 cmp     ebp, esp
.text:00002C51                 call    __RTC_CheckEsp
.text:00002C56                 mov     esp, ebp
.text:00002C58                 pop     ebp
.text:00002C59                 retn
.text:00002C59 ?ClearErrors@CArcErrorInfo@@QAEXXZ endp
.text:00002C59
.text:00002C59 ; ---------------------------------------------------------------------------
.text:00002C5A                 db 0Eh dup(0CCh)
.text:00002C68
.text:00002C68 ; =============== S U B R O U T I N E =======================================
.text:00002C68
.text:00002C68 ; Attributes: bp-based frame
.text:00002C68
.text:00002C68 ; __int32 __thiscall CArc::ReadBasicProps(CArc *this, struct IInArchive *, unsigned __int64, __int32)
.text:00002C68                 public ?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z
.text:00002C68 ?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z proc near
.text:00002C68                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+F93p
.text:00002C68                                         ; CArc::OpenStream2(COpenOptions const &)+21F5p ...
.text:00002C68
.text:00002C68 var_C4          = dword ptr -0C4h
.text:00002C68 var_C0          = dword ptr -0C0h
.text:00002C68 var_BC          = dword ptr -0BCh
.text:00002C68 var_B8          = dword ptr -0B8h
.text:00002C68 var_B4          = dword ptr -0B4h
.text:00002C68 var_B0          = dword ptr -0B0h
.text:00002C68 var_AC          = dword ptr -0ACh
.text:00002C68 var_A8          = dword ptr -0A8h
.text:00002C68 var_A4          = dword ptr -0A4h
.text:00002C68 var_A0          = dword ptr -0A0h
.text:00002C68 var_9C          = dword ptr -9Ch
.text:00002C68 var_98          = dword ptr -98h
.text:00002C68 var_94          = dword ptr -94h
.text:00002C68 var_89          = byte ptr -89h
.text:00002C68 var_84          = dword ptr -84h
.text:00002C68 var_80          = dword ptr -80h
.text:00002C68 var_78          = word ptr -78h
.text:00002C68 var_70          = dword ptr -70h
.text:00002C68 var_64          = dword ptr -64h
.text:00002C68 var_5C          = word ptr -5Ch
.text:00002C68 var_54          = dword ptr -54h
.text:00002C68 var_48          = dword ptr -48h
.text:00002C68 var_40          = byte ptr -40h
.text:00002C68 var_2C          = dword ptr -2Ch
.text:00002C68 var_24          = byte ptr -24h
.text:00002C68 var_10          = dword ptr -10h
.text:00002C68 var_C           = dword ptr -0Ch
.text:00002C68 var_4           = dword ptr -4
.text:00002C68 arg_0           = dword ptr  8
.text:00002C68 arg_4           = qword ptr  0Ch
.text:00002C68 arg_C           = dword ptr  14h
.text:00002C68
.text:00002C68                 push    ebp
.text:00002C69                 mov     ebp, esp
.text:00002C6B                 push    0FFFFFFFFh
.text:00002C6D                 push    offset __ehhandler$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z
.text:00002C72                 mov     eax, large fs:0
.text:00002C78                 push    eax
.text:00002C79                 sub     esp, 0B8h
.text:00002C7F                 push    esi
.text:00002C80                 push    edi
.text:00002C81                 push    ecx
.text:00002C82                 lea     edi, [ebp+var_C4]
.text:00002C88                 mov     ecx, 2Eh ; '.'
.text:00002C8D                 mov     eax, 0CCCCCCCCh
.text:00002C92                 rep stosd
.text:00002C94                 pop     ecx
.text:00002C95                 mov     eax, dword ptr ds:___security_cookie
.text:00002C9A                 xor     eax, ebp
.text:00002C9C                 push    eax
.text:00002C9D                 lea     eax, [ebp+var_C]
.text:00002CA0                 mov     large fs:0, eax
.text:00002CA6                 mov     [ebp+var_10], ecx
.text:00002CA9                 mov     eax, [ebp+var_10]
.text:00002CAC                 mov     byte ptr [eax+0B8h], 0
.text:00002CB3                 mov     ecx, [ebp+var_10]
.text:00002CB6                 mov     dword ptr [ecx+0B0h], 0
.text:00002CC0                 mov     dword ptr [ecx+0B4h], 0
.text:00002CCA                 mov     edx, [ebp+var_10]
.text:00002CCD                 mov     dword ptr [edx+0A8h], 0
.text:00002CD7                 mov     dword ptr [edx+0ACh], 0
.text:00002CE1                 mov     eax, [ebp+var_10]
.text:00002CE4                 mov     ecx, [eax+0C0h]
.text:00002CEA                 sub     ecx, dword ptr [ebp+arg_4]
.text:00002CED                 mov     edx, [eax+0C4h]
.text:00002CF3                 sbb     edx, dword ptr [ebp+arg_4+4]
.text:00002CF6                 mov     eax, [ebp+var_10]
.text:00002CF9                 mov     [eax+0C8h], ecx
.text:00002CFF                 mov     [eax+0CCh], edx
.text:00002D05                 mov     ecx, [ebp+var_10]
.text:00002D08                 add     ecx, 10h        ; this
.text:00002D0B                 call    ?ClearErrors@CArcErrorInfo@@QAEXXZ ; CArcErrorInfo::ClearErrors(void)
.text:00002D10                 lea     ecx, [ebp+var_24] ; this
.text:00002D13                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002D18                 mov     [ebp+var_4], 0
.text:00002D1F                 mov     esi, esp
.text:00002D21                 lea     ecx, [ebp+var_24]
.text:00002D24                 push    ecx
.text:00002D25                 push    47h ; 'G'
.text:00002D27                 mov     edx, [ebp+arg_0]
.text:00002D2A                 mov     eax, [edx]
.text:00002D2C                 mov     ecx, [ebp+arg_0]
.text:00002D2F                 push    ecx
.text:00002D30                 mov     edx, [eax+20h]
.text:00002D33                 call    edx
.text:00002D35                 cmp     esi, esp
.text:00002D37                 call    __RTC_CheckEsp
.text:00002D3C                 mov     [ebp+var_2C], eax
.text:00002D3F                 cmp     [ebp+var_2C], 0
.text:00002D43                 jz      short loc_2D68
.text:00002D45                 mov     eax, [ebp+var_2C]
.text:00002D48                 mov     [ebp+var_A8], eax
.text:00002D4E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002D55                 lea     ecx, [ebp+var_24] ; this
.text:00002D58                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002D5D                 mov     eax, [ebp+var_A8]
.text:00002D63                 jmp     loc_310A
.text:00002D68 ; ---------------------------------------------------------------------------
.text:00002D68
.text:00002D68 loc_2D68:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+DBj
.text:00002D68                 mov     ecx, [ebp+var_10]
.text:00002D6B                 add     ecx, 13h
.text:00002D6E                 push    ecx             ; bool *
.text:00002D6F                 lea     edx, [ebp+var_24]
.text:00002D72                 push    edx             ; struct NWindows::NCOM::CPropVariant *
.text:00002D73                 call    ?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z ; GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)
.text:00002D78                 mov     ecx, [ebp+var_10]
.text:00002D7B                 mov     [ecx+14h], eax
.text:00002D7E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002D85                 lea     ecx, [ebp+var_24] ; this
.text:00002D88                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002D8D                 lea     ecx, [ebp+var_40] ; this
.text:00002D90                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002D95                 mov     [ebp+var_4], 1
.text:00002D9C                 mov     esi, esp
.text:00002D9E                 lea     edx, [ebp+var_40]
.text:00002DA1                 push    edx
.text:00002DA2                 push    48h ; 'H'
.text:00002DA4                 mov     eax, [ebp+arg_0]
.text:00002DA7                 mov     ecx, [eax]
.text:00002DA9                 mov     edx, [ebp+arg_0]
.text:00002DAC                 push    edx
.text:00002DAD                 mov     eax, [ecx+20h]
.text:00002DB0                 call    eax
.text:00002DB2                 cmp     esi, esp
.text:00002DB4                 call    __RTC_CheckEsp
.text:00002DB9                 mov     [ebp+var_48], eax
.text:00002DBC                 cmp     [ebp+var_48], 0
.text:00002DC0                 jz      short loc_2DE5
.text:00002DC2                 mov     ecx, [ebp+var_48]
.text:00002DC5                 mov     [ebp+var_AC], ecx
.text:00002DCB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002DD2                 lea     ecx, [ebp+var_40] ; this
.text:00002DD5                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002DDA                 mov     eax, [ebp+var_AC]
.text:00002DE0                 jmp     loc_310A
.text:00002DE5 ; ---------------------------------------------------------------------------
.text:00002DE5
.text:00002DE5 loc_2DE5:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+158j
.text:00002DE5                 push    0               ; bool *
.text:00002DE7                 lea     edx, [ebp+var_40]
.text:00002DEA                 push    edx             ; struct NWindows::NCOM::CPropVariant *
.text:00002DEB                 call    ?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z ; GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)
.text:00002DF0                 mov     ecx, [ebp+var_10]
.text:00002DF3                 mov     [ecx+18h], eax
.text:00002DF6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002DFD                 lea     ecx, [ebp+var_40] ; this
.text:00002E00                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002E05                 lea     ecx, [ebp+var_5C] ; this
.text:00002E08                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002E0D                 mov     [ebp+var_4], 2
.text:00002E14                 mov     esi, esp
.text:00002E16                 lea     edx, [ebp+var_5C]
.text:00002E19                 push    edx
.text:00002E1A                 push    37h ; '7'
.text:00002E1C                 mov     eax, [ebp+arg_0]
.text:00002E1F                 mov     ecx, [eax]
.text:00002E21                 mov     edx, [ebp+arg_0]
.text:00002E24                 push    edx
.text:00002E25                 mov     eax, [ecx+20h]
.text:00002E28                 call    eax
.text:00002E2A                 cmp     esi, esp
.text:00002E2C                 call    __RTC_CheckEsp
.text:00002E31                 mov     [ebp+var_64], eax
.text:00002E34                 cmp     [ebp+var_64], 0
.text:00002E38                 jz      short loc_2E5D
.text:00002E3A                 mov     ecx, [ebp+var_64]
.text:00002E3D                 mov     [ebp+var_B0], ecx
.text:00002E43                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002E4A                 lea     ecx, [ebp+var_5C] ; this
.text:00002E4D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002E52                 mov     eax, [ebp+var_B0]
.text:00002E58                 jmp     loc_310A
.text:00002E5D ; ---------------------------------------------------------------------------
.text:00002E5D
.text:00002E5D loc_2E5D:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+1D0j
.text:00002E5D                 movzx   edx, [ebp+var_5C]
.text:00002E61                 test    edx, edx
.text:00002E63                 jz      short loc_2E95
.text:00002E65                 movzx   eax, [ebp+var_5C]
.text:00002E69                 cmp     eax, 8
.text:00002E6C                 jnz     short loc_2E79
.text:00002E6E                 mov     ecx, [ebp+var_54]
.text:00002E71                 mov     [ebp+var_B8], ecx
.text:00002E77                 jmp     short loc_2E83
.text:00002E79 ; ---------------------------------------------------------------------------
.text:00002E79
.text:00002E79 loc_2E79:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+204j
.text:00002E79                 mov     [ebp+var_B8], offset $SG73878 ; "Unknown error"
.text:00002E83
.text:00002E83 loc_2E83:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+20Fj
.text:00002E83                 mov     edx, [ebp+var_B8]
.text:00002E89                 push    edx
.text:00002E8A                 mov     ecx, [ebp+var_10]
.text:00002E8D                 add     ecx, 28h ; '('
.text:00002E90                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00002E95
.text:00002E95 loc_2E95:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+1FBj
.text:00002E95                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002E9C                 lea     ecx, [ebp+var_5C] ; this
.text:00002E9F                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002EA4                 lea     ecx, [ebp+var_78] ; this
.text:00002EA7                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002EAC                 mov     [ebp+var_4], 3
.text:00002EB3                 mov     esi, esp
.text:00002EB5                 lea     eax, [ebp+var_78]
.text:00002EB8                 push    eax
.text:00002EB9                 push    49h ; 'I'
.text:00002EBB                 mov     ecx, [ebp+arg_0]
.text:00002EBE                 mov     edx, [ecx]
.text:00002EC0                 mov     eax, [ebp+arg_0]
.text:00002EC3                 push    eax
.text:00002EC4                 mov     ecx, [edx+20h]
.text:00002EC7                 call    ecx
.text:00002EC9                 cmp     esi, esp
.text:00002ECB                 call    __RTC_CheckEsp
.text:00002ED0                 mov     [ebp+var_80], eax
.text:00002ED3                 cmp     [ebp+var_80], 0
.text:00002ED7                 jz      short loc_2EFC
.text:00002ED9                 mov     edx, [ebp+var_80]
.text:00002EDC                 mov     [ebp+var_B4], edx
.text:00002EE2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002EE9                 lea     ecx, [ebp+var_78] ; this
.text:00002EEC                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002EF1                 mov     eax, [ebp+var_B4]
.text:00002EF7                 jmp     loc_310A
.text:00002EFC ; ---------------------------------------------------------------------------
.text:00002EFC
.text:00002EFC loc_2EFC:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+26Fj
.text:00002EFC                 movzx   eax, [ebp+var_78]
.text:00002F00                 test    eax, eax
.text:00002F02                 jz      short loc_2F34
.text:00002F04                 movzx   ecx, [ebp+var_78]
.text:00002F08                 cmp     ecx, 8
.text:00002F0B                 jnz     short loc_2F18
.text:00002F0D                 mov     edx, [ebp+var_70]
.text:00002F10                 mov     [ebp+var_BC], edx
.text:00002F16                 jmp     short loc_2F22
.text:00002F18 ; ---------------------------------------------------------------------------
.text:00002F18
.text:00002F18 loc_2F18:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+2A3j
.text:00002F18                 mov     [ebp+var_BC], offset $SG73884 ; "Unknown warning"
.text:00002F22
.text:00002F22 loc_2F22:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+2AEj
.text:00002F22                 mov     eax, [ebp+var_BC]
.text:00002F28                 push    eax
.text:00002F29                 mov     ecx, [ebp+var_10]
.text:00002F2C                 add     ecx, 34h ; '4'
.text:00002F2F                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00002F34
.text:00002F34 loc_2F34:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+29Aj
.text:00002F34                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F3B                 lea     ecx, [ebp+var_78] ; this
.text:00002F3E                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002F43                 cmp     [ebp+arg_C], 0
.text:00002F47                 jz      short loc_2F5F
.text:00002F49                 mov     ecx, [ebp+var_10]
.text:00002F4C                 add     ecx, 10h        ; this
.text:00002F4F                 call    ?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::IsArc_After_NonOpen(void)
.text:00002F54                 movzx   ecx, al
.text:00002F57                 test    ecx, ecx
.text:00002F59                 jz      loc_3108
.text:00002F5F
.text:00002F5F loc_2F5F:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+2DFj
.text:00002F5F                 mov     edx, [ebp+var_10]
.text:00002F62                 add     edx, 0B8h ; '+'
.text:00002F68                 push    edx
.text:00002F69                 mov     eax, [ebp+var_10]
.text:00002F6C                 add     eax, 0B0h ; '¦'
.text:00002F71                 push    eax
.text:00002F72                 push    2Ch ; ','
.text:00002F74                 mov     ecx, [ebp+arg_0]
.text:00002F77                 push    ecx
.text:00002F78                 call    ?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z ; Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)
.text:00002F7D                 mov     [ebp+var_84], eax
.text:00002F83                 cmp     [ebp+var_84], 0
.text:00002F8A                 jz      short loc_2F97
.text:00002F8C                 mov     eax, [ebp+var_84]
.text:00002F92                 jmp     loc_310A
.text:00002F97 ; ---------------------------------------------------------------------------
.text:00002F97
.text:00002F97 loc_2F97:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+322j
.text:00002F97                 lea     edx, [ebp+var_89]
.text:00002F9D                 push    edx
.text:00002F9E                 mov     eax, [ebp+var_10]
.text:00002FA1                 add     eax, 0A8h ; '¿'
.text:00002FA6                 push    eax
.text:00002FA7                 push    24h ; '$'
.text:00002FA9                 mov     ecx, [ebp+arg_0]
.text:00002FAC                 push    ecx
.text:00002FAD                 call    ?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z ; Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)
.text:00002FB2                 mov     [ebp+var_94], eax
.text:00002FB8                 cmp     [ebp+var_94], 0
.text:00002FBF                 jz      short loc_2FCC
.text:00002FC1                 mov     eax, [ebp+var_94]
.text:00002FC7                 jmp     loc_310A
.text:00002FCC ; ---------------------------------------------------------------------------
.text:00002FCC
.text:00002FCC loc_2FCC:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+357j
.text:00002FCC                 mov     edx, [ebp+var_10]
.text:00002FCF                 mov     eax, dword ptr [ebp+arg_4]
.text:00002FD2                 add     eax, [edx+0A8h]
.text:00002FD8                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00002FDB                 adc     ecx, [edx+0ACh]
.text:00002FE1                 mov     [ebp+var_9C], eax
.text:00002FE7                 mov     [ebp+var_98], ecx
.text:00002FED                 mov     edx, [ebp+var_10]
.text:00002FF0                 mov     eax, [edx+0C0h]
.text:00002FF6                 sub     eax, [ebp+var_9C]
.text:00002FFC                 mov     ecx, [edx+0C4h]
.text:00003002                 sbb     ecx, [ebp+var_98]
.text:00003008                 mov     edx, [ebp+var_10]
.text:0000300B                 mov     [edx+0C8h], eax
.text:00003011                 mov     [edx+0CCh], ecx
.text:00003017                 mov     eax, [ebp+var_10]
.text:0000301A                 movzx   ecx, byte ptr [eax+0B8h]
.text:00003021                 test    ecx, ecx
.text:00003023                 jz      loc_3108
.text:00003029                 mov     edx, [ebp+var_10]
.text:0000302C                 mov     eax, [ebp+var_9C]
.text:00003032                 add     eax, [edx+0B0h]
.text:00003038                 mov     ecx, [ebp+var_98]
.text:0000303E                 adc     ecx, [edx+0B4h]
.text:00003044                 mov     [ebp+var_A4], eax
.text:0000304A                 mov     [ebp+var_A0], ecx
.text:00003050                 mov     edx, [ebp+var_10]
.text:00003053                 mov     [ebp+var_C0], edx
.text:00003059                 mov     eax, [ebp+var_C0]
.text:0000305F                 mov     ecx, [ebp+var_A0]
.text:00003065                 cmp     ecx, [eax+0C4h]
.text:0000306B                 ja      short loc_30CE
.text:0000306D                 jb      short loc_3083
.text:0000306F                 mov     edx, [ebp+var_C0]
.text:00003075                 mov     eax, [ebp+var_A4]
.text:0000307B                 cmp     eax, [edx+0C0h]
.text:00003081                 jnb     short loc_30CE
.text:00003083
.text:00003083 loc_3083:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+405j
.text:00003083                 mov     ecx, [ebp+var_10]
.text:00003086                 mov     edx, [ebp+var_10]
.text:00003089                 mov     eax, [edx+0B0h]
.text:0000308F                 mov     [ecx+0C8h], eax
.text:00003095                 mov     edx, [edx+0B4h]
.text:0000309B                 mov     [ecx+0CCh], edx
.text:000030A1                 mov     eax, [ebp+var_10]
.text:000030A4                 mov     byte ptr [eax+10h], 1
.text:000030A8                 mov     ecx, [ebp+var_10]
.text:000030AB                 mov     edx, [ecx+0C0h]
.text:000030B1                 sub     edx, [ebp+var_A4]
.text:000030B7                 mov     eax, [ecx+0C4h]
.text:000030BD                 sbb     eax, [ebp+var_A0]
.text:000030C3                 mov     ecx, [ebp+var_10]
.text:000030C6                 mov     [ecx+20h], edx
.text:000030C9                 mov     [ecx+24h], eax
.text:000030CC                 jmp     short loc_3108
.text:000030CE ; ---------------------------------------------------------------------------
.text:000030CE
.text:000030CE loc_30CE:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+403j
.text:000030CE                                         ; CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+419j
.text:000030CE                 mov     edx, [ebp+var_10]
.text:000030D1                 mov     [ebp+var_C4], edx
.text:000030D7                 mov     eax, [ebp+var_C4]
.text:000030DD                 mov     ecx, [ebp+var_A0]
.text:000030E3                 cmp     ecx, [eax+0C4h]
.text:000030E9                 jb      short loc_3108
.text:000030EB                 ja      short loc_3101
.text:000030ED                 mov     edx, [ebp+var_C4]
.text:000030F3                 mov     eax, [ebp+var_A4]
.text:000030F9                 cmp     eax, [edx+0C0h]
.text:000030FF                 jbe     short loc_3108
.text:00003101
.text:00003101 loc_3101:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+483j
.text:00003101                 mov     ecx, [ebp+var_10]
.text:00003104                 mov     byte ptr [ecx+11h], 1
.text:00003108
.text:00003108 loc_3108:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+2F1j
.text:00003108                                         ; CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+3BBj ...
.text:00003108                 xor     eax, eax
.text:0000310A
.text:0000310A loc_310A:                               ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+FBj
.text:0000310A                                         ; CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+178j ...
.text:0000310A                 push    edx
.text:0000310B                 mov     ecx, ebp
.text:0000310D                 push    eax
.text:0000310E                 lea     edx, $LN34
.text:00003114                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003119                 pop     eax
.text:0000311A                 pop     edx
.text:0000311B                 mov     ecx, [ebp+var_C]
.text:0000311E                 mov     large fs:0, ecx
.text:00003125                 pop     ecx
.text:00003126                 pop     edi
.text:00003127                 pop     esi
.text:00003128                 add     esp, 0C4h
.text:0000312E                 cmp     ebp, esp
.text:00003130                 call    __RTC_CheckEsp
.text:00003135                 mov     esp, ebp
.text:00003137                 pop     ebp
.text:00003138                 retn    10h
.text:00003138 ?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z endp
.text:00003138
.text:00003138 ; ---------------------------------------------------------------------------
.text:0000313B                 align 4
.text:0000313C $LN34           dd 5                    ; DATA XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+4A6o
.text:00003140                 dd offset $LN33_1
.text:00003144 $LN33_1         dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00003140o
.text:0000314C                 dd offset $LN27_0       ; "prop"
.text:00003150                 dd 0FFFFFFC0h, 10h
.text:00003158                 dd offset $LN28_1       ; "prop"
.text:0000315C                 dd 0FFFFFFA4h, 10h
.text:00003164                 dd offset $LN29_0       ; "prop"
.text:00003168                 db 88h, 0FFh
.text:0000316A                 dw 0FFFFh
.text:0000316C                 dd 10h
.text:00003170                 dd offset $LN30_1       ; "prop"
.text:00003174                 dd 0FFFFFF77h, 1
.text:0000317C                 dd offset $LN31_1       ; "offsetDefined"
.text:00003180 $LN31_1         db 'offsetDefined',0    ; DATA XREF: .text:0000317Co
.text:0000318E $LN30_1         db 'prop',0             ; DATA XREF: .text:00003170o
.text:00003193 $LN29_0         db 'prop',0             ; DATA XREF: .text:00003164o
.text:00003198 $LN28_1         db 'prop',0             ; DATA XREF: .text:00003158o
.text:0000319D $LN27_0         db 'prop',0             ; DATA XREF: .text:0000314Co
.text:000031A2                 align 8
.text:000031A8
.text:000031A8 ; =============== S U B R O U T I N E =======================================
.text:000031A8
.text:000031A8 ; Attributes: bp-based frame
.text:000031A8
.text:000031A8 ; long __stdcall Archive_GetArcProp_UInt(struct IInArchive *, unsigned long, unsigned __int64 &, bool &)
.text:000031A8 ?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z proc near
.text:000031A8                                         ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+310p
.text:000031A8                                         ; OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+77p
.text:000031A8
.text:000031A8 var_38          = dword ptr -38h
.text:000031A8 var_34          = dword ptr -34h
.text:000031A8 var_30          = dword ptr -30h
.text:000031A8 var_2C          = dword ptr -2Ch
.text:000031A8 var_28          = dword ptr -28h
.text:000031A8 var_20          = word ptr -20h
.text:000031A8 var_18          = dword ptr -18h
.text:000031A8 var_14          = dword ptr -14h
.text:000031A8 var_C           = dword ptr -0Ch
.text:000031A8 var_4           = dword ptr -4
.text:000031A8 arg_0           = dword ptr  8
.text:000031A8 arg_4           = dword ptr  0Ch
.text:000031A8 arg_8           = dword ptr  10h
.text:000031A8 arg_C           = dword ptr  14h
.text:000031A8
.text:000031A8                 push    ebp
.text:000031A9                 mov     ebp, esp
.text:000031AB                 push    0FFFFFFFFh
.text:000031AD                 push    offset __ehhandler$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z
.text:000031B2                 mov     eax, large fs:0
.text:000031B8                 push    eax
.text:000031B9                 sub     esp, 2Ch
.text:000031BC                 push    esi
.text:000031BD                 push    edi
.text:000031BE                 lea     edi, [ebp+var_38]
.text:000031C1                 mov     ecx, 0Bh
.text:000031C6                 mov     eax, 0CCCCCCCCh
.text:000031CB                 rep stosd
.text:000031CD                 mov     eax, dword ptr ds:___security_cookie
.text:000031D2                 xor     eax, ebp
.text:000031D4                 push    eax
.text:000031D5                 lea     eax, [ebp+var_C]
.text:000031D8                 mov     large fs:0, eax
.text:000031DE                 mov     eax, [ebp+arg_C]
.text:000031E1                 mov     byte ptr [eax], 0
.text:000031E4                 lea     ecx, [ebp+var_20] ; this
.text:000031E7                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000031EC                 mov     [ebp+var_4], 0
.text:000031F3                 mov     esi, esp
.text:000031F5                 lea     ecx, [ebp+var_20]
.text:000031F8                 push    ecx
.text:000031F9                 mov     edx, [ebp+arg_4]
.text:000031FC                 push    edx
.text:000031FD                 mov     eax, [ebp+arg_0]
.text:00003200                 mov     ecx, [eax]
.text:00003202                 mov     edx, [ebp+arg_0]
.text:00003205                 push    edx
.text:00003206                 mov     eax, [ecx+20h]
.text:00003209                 call    eax
.text:0000320B                 cmp     esi, esp
.text:0000320D                 call    __RTC_CheckEsp
.text:00003212                 mov     [ebp+var_28], eax
.text:00003215                 cmp     [ebp+var_28], 0
.text:00003219                 jz      short loc_3238
.text:0000321B                 mov     ecx, [ebp+var_28]
.text:0000321E                 mov     [ebp+var_2C], ecx
.text:00003221                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003228                 lea     ecx, [ebp+var_20] ; this
.text:0000322B                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00003230                 mov     eax, [ebp+var_2C]
.text:00003233                 jmp     loc_32E1
.text:00003238 ; ---------------------------------------------------------------------------
.text:00003238
.text:00003238 loc_3238:                               ; CODE XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+71j
.text:00003238                 movzx   edx, [ebp+var_20]
.text:0000323C                 mov     [ebp+var_38], edx
.text:0000323F                 cmp     [ebp+var_38], 15h ; switch 22 cases
.text:00003243                 ja      short $LN1_0    ; jumptable 0000324F default case
.text:00003245                 mov     eax, [ebp+var_38]
.text:00003248                 movzx   ecx, ds:$LN13_4[eax]
.text:0000324F                 jmp     ds:$LN18_2[ecx*4] ; switch jump
.text:00003256 ; ---------------------------------------------------------------------------
.text:00003256
.text:00003256 $LN6_2:                                 ; CODE XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+A7j
.text:00003256                                         ; DATA XREF: .text:$LN18_2o
.text:00003256                 mov     edx, [ebp+var_18] ; jumptable 0000324F case 19
.text:00003259                 xor     eax, eax
.text:0000325B                 mov     ecx, [ebp+arg_8]
.text:0000325E                 mov     [ecx], edx
.text:00003260                 mov     [ecx+4], eax
.text:00003263                 mov     edx, [ebp+arg_C]
.text:00003266                 mov     byte ptr [edx], 1
.text:00003269                 jmp     short loc_32C8
.text:0000326B ; ---------------------------------------------------------------------------
.text:0000326B
.text:0000326B $LN5_1:                                 ; CODE XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+A7j
.text:0000326B                                         ; DATA XREF: .text:$LN18_2o
.text:0000326B                 mov     eax, [ebp+var_18] ; jumptable 0000324F case 3
.text:0000326E                 cdq
.text:0000326F                 mov     ecx, [ebp+arg_8]
.text:00003272                 mov     [ecx], eax
.text:00003274                 mov     [ecx+4], edx
.text:00003277                 mov     edx, [ebp+arg_C]
.text:0000327A                 mov     byte ptr [edx], 1
.text:0000327D                 jmp     short loc_32C8
.text:0000327F ; ---------------------------------------------------------------------------
.text:0000327F
.text:0000327F $LN4_1:                                 ; CODE XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+A7j
.text:0000327F                                         ; DATA XREF: .text:$LN18_2o
.text:0000327F                 mov     eax, [ebp+arg_8] ; jumptable 0000324F case 21
.text:00003282                 mov     ecx, [ebp+var_18]
.text:00003285                 mov     [eax], ecx
.text:00003287                 mov     edx, [ebp+var_14]
.text:0000328A                 mov     [eax+4], edx
.text:0000328D                 mov     eax, [ebp+arg_C]
.text:00003290                 mov     byte ptr [eax], 1
.text:00003293                 jmp     short loc_32C8
.text:00003295 ; ---------------------------------------------------------------------------
.text:00003295
.text:00003295 $LN3_0:                                 ; CODE XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+A7j
.text:00003295                                         ; DATA XREF: .text:$LN18_2o
.text:00003295                 mov     ecx, [ebp+arg_8] ; jumptable 0000324F case 20
.text:00003298                 mov     edx, [ebp+var_18]
.text:0000329B                 mov     [ecx], edx
.text:0000329D                 mov     eax, [ebp+var_14]
.text:000032A0                 mov     [ecx+4], eax
.text:000032A3                 mov     ecx, [ebp+arg_C]
.text:000032A6                 mov     byte ptr [ecx], 1
.text:000032A9                 jmp     short loc_32C8
.text:000032AB ; ---------------------------------------------------------------------------
.text:000032AB
.text:000032AB $LN2_1:                                 ; CODE XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+A7j
.text:000032AB                                         ; DATA XREF: .text:$LN18_2o
.text:000032AB                 jmp     short loc_32C8  ; jumptable 0000324F case 0
.text:000032AD ; ---------------------------------------------------------------------------
.text:000032AD
.text:000032AD $LN1_0:                                 ; CODE XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+9Bj
.text:000032AD                                         ; Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+A7j
.text:000032AD                                         ; DATA XREF: ...
.text:000032AD                 mov     [ebp+var_30], 80004005h ; jumptable 0000324F default case
.text:000032B4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000032BB                 lea     ecx, [ebp+var_20] ; this
.text:000032BE                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000032C3                 mov     eax, [ebp+var_30]
.text:000032C6                 jmp     short loc_32E1
.text:000032C8 ; ---------------------------------------------------------------------------
.text:000032C8
.text:000032C8 loc_32C8:                               ; CODE XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+C1j
.text:000032C8                                         ; Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+D5j ...
.text:000032C8                 mov     [ebp+var_34], 0
.text:000032CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000032D6                 lea     ecx, [ebp+var_20] ; this
.text:000032D9                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000032DE                 mov     eax, [ebp+var_34]
.text:000032E1
.text:000032E1 loc_32E1:                               ; CODE XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+8Bj
.text:000032E1                                         ; Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+11Ej
.text:000032E1                 push    edx
.text:000032E2                 mov     ecx, ebp
.text:000032E4                 push    eax
.text:000032E5                 lea     edx, $LN17_1
.text:000032EB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000032F0                 pop     eax
.text:000032F1                 pop     edx
.text:000032F2                 mov     ecx, [ebp+var_C]
.text:000032F5                 mov     large fs:0, ecx
.text:000032FC                 pop     ecx
.text:000032FD                 pop     edi
.text:000032FE                 pop     esi
.text:000032FF                 add     esp, 38h
.text:00003302                 cmp     ebp, esp
.text:00003304                 call    __RTC_CheckEsp
.text:00003309                 mov     esp, ebp
.text:0000330B                 pop     ebp
.text:0000330C                 retn    10h
.text:0000330C ?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z endp
.text:0000330C
.text:0000330C ; ---------------------------------------------------------------------------
.text:0000330F                 align 10h
.text:00003310 $LN17_1         dd 1                    ; DATA XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+13Do
.text:00003314                 dd offset $LN16_0
.text:00003318 $LN16_0         dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:00003314o
.text:00003320                 dd offset $LN14_2       ; "prop"
.text:00003324 $LN14_2         db 'prop',0             ; DATA XREF: .text:00003320o
.text:00003329                 align 4
.text:0000332C $LN18_2         dd offset $LN2_1        ; DATA XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+A7r
.text:0000332C                 dd offset $LN5_1        ; jump table for switch statement
.text:0000332C                 dd offset $LN6_2
.text:0000332C                 dd offset $LN3_0
.text:0000332C                 dd offset $LN4_1
.text:0000332C                 dd offset $LN1_0
.text:00003344 $LN13_4         db      0,     5,     5,     1
.text:00003344                                         ; DATA XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+A0r
.text:00003344                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:00003344                 db      5,     5,     5,     5
.text:00003344                 db      5,     5,     5,     5
.text:00003344                 db      5,     5,     5,     2
.text:00003344                 db      3,     4
.text:0000335A                 db 0Eh dup(0CCh)
.text:00003368
.text:00003368 ; =============== S U B R O U T I N E =======================================
.text:00003368
.text:00003368 ; Attributes: bp-based frame
.text:00003368
.text:00003368 ; long __stdcall Archive_GetArcProp_Int(struct IInArchive *, unsigned long, __int64 &, bool &)
.text:00003368 ?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z proc near
.text:00003368                                         ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+345p
.text:00003368
.text:00003368 var_38          = dword ptr -38h
.text:00003368 var_34          = dword ptr -34h
.text:00003368 var_30          = dword ptr -30h
.text:00003368 var_2C          = dword ptr -2Ch
.text:00003368 var_28          = dword ptr -28h
.text:00003368 var_20          = word ptr -20h
.text:00003368 var_18          = dword ptr -18h
.text:00003368 var_14          = dword ptr -14h
.text:00003368 var_C           = dword ptr -0Ch
.text:00003368 var_4           = dword ptr -4
.text:00003368 arg_0           = dword ptr  8
.text:00003368 arg_4           = dword ptr  0Ch
.text:00003368 arg_8           = dword ptr  10h
.text:00003368 arg_C           = dword ptr  14h
.text:00003368
.text:00003368                 push    ebp
.text:00003369                 mov     ebp, esp
.text:0000336B                 push    0FFFFFFFFh
.text:0000336D                 push    offset __ehhandler$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z
.text:00003372                 mov     eax, large fs:0
.text:00003378                 push    eax
.text:00003379                 sub     esp, 2Ch
.text:0000337C                 push    esi
.text:0000337D                 push    edi
.text:0000337E                 lea     edi, [ebp+var_38]
.text:00003381                 mov     ecx, 0Bh
.text:00003386                 mov     eax, 0CCCCCCCCh
.text:0000338B                 rep stosd
.text:0000338D                 mov     eax, dword ptr ds:___security_cookie
.text:00003392                 xor     eax, ebp
.text:00003394                 push    eax
.text:00003395                 lea     eax, [ebp+var_C]
.text:00003398                 mov     large fs:0, eax
.text:0000339E                 mov     eax, [ebp+arg_C]
.text:000033A1                 mov     byte ptr [eax], 0
.text:000033A4                 lea     ecx, [ebp+var_20] ; this
.text:000033A7                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000033AC                 mov     [ebp+var_4], 0
.text:000033B3                 mov     esi, esp
.text:000033B5                 lea     ecx, [ebp+var_20]
.text:000033B8                 push    ecx
.text:000033B9                 mov     edx, [ebp+arg_4]
.text:000033BC                 push    edx
.text:000033BD                 mov     eax, [ebp+arg_0]
.text:000033C0                 mov     ecx, [eax]
.text:000033C2                 mov     edx, [ebp+arg_0]
.text:000033C5                 push    edx
.text:000033C6                 mov     eax, [ecx+20h]
.text:000033C9                 call    eax
.text:000033CB                 cmp     esi, esp
.text:000033CD                 call    __RTC_CheckEsp
.text:000033D2                 mov     [ebp+var_28], eax
.text:000033D5                 cmp     [ebp+var_28], 0
.text:000033D9                 jz      short loc_33F8
.text:000033DB                 mov     ecx, [ebp+var_28]
.text:000033DE                 mov     [ebp+var_2C], ecx
.text:000033E1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000033E8                 lea     ecx, [ebp+var_20] ; this
.text:000033EB                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000033F0                 mov     eax, [ebp+var_2C]
.text:000033F3                 jmp     loc_34A1
.text:000033F8 ; ---------------------------------------------------------------------------
.text:000033F8
.text:000033F8 loc_33F8:                               ; CODE XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+71j
.text:000033F8                 movzx   edx, [ebp+var_20]
.text:000033FC                 mov     [ebp+var_38], edx
.text:000033FF                 cmp     [ebp+var_38], 15h ; switch 22 cases
.text:00003403                 ja      short $LN1_1    ; jumptable 0000340F default case
.text:00003405                 mov     eax, [ebp+var_38]
.text:00003408                 movzx   ecx, ds:$LN13_5[eax]
.text:0000340F                 jmp     ds:$LN18_3[ecx*4] ; switch jump
.text:00003416 ; ---------------------------------------------------------------------------
.text:00003416
.text:00003416 $LN6_3:                                 ; CODE XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+A7j
.text:00003416                                         ; DATA XREF: .text:$LN18_3o
.text:00003416                 mov     edx, [ebp+var_18] ; jumptable 0000340F case 19
.text:00003419                 xor     eax, eax
.text:0000341B                 mov     ecx, [ebp+arg_8]
.text:0000341E                 mov     [ecx], edx
.text:00003420                 mov     [ecx+4], eax
.text:00003423                 mov     edx, [ebp+arg_C]
.text:00003426                 mov     byte ptr [edx], 1
.text:00003429                 jmp     short loc_3488
.text:0000342B ; ---------------------------------------------------------------------------
.text:0000342B
.text:0000342B $LN5_2:                                 ; CODE XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+A7j
.text:0000342B                                         ; DATA XREF: .text:$LN18_3o
.text:0000342B                 mov     eax, [ebp+var_18] ; jumptable 0000340F case 3
.text:0000342E                 cdq
.text:0000342F                 mov     ecx, [ebp+arg_8]
.text:00003432                 mov     [ecx], eax
.text:00003434                 mov     [ecx+4], edx
.text:00003437                 mov     edx, [ebp+arg_C]
.text:0000343A                 mov     byte ptr [edx], 1
.text:0000343D                 jmp     short loc_3488
.text:0000343F ; ---------------------------------------------------------------------------
.text:0000343F
.text:0000343F $LN4_2:                                 ; CODE XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+A7j
.text:0000343F                                         ; DATA XREF: .text:$LN18_3o
.text:0000343F                 mov     eax, [ebp+arg_8] ; jumptable 0000340F case 21
.text:00003442                 mov     ecx, [ebp+var_18]
.text:00003445                 mov     [eax], ecx
.text:00003447                 mov     edx, [ebp+var_14]
.text:0000344A                 mov     [eax+4], edx
.text:0000344D                 mov     eax, [ebp+arg_C]
.text:00003450                 mov     byte ptr [eax], 1
.text:00003453                 jmp     short loc_3488
.text:00003455 ; ---------------------------------------------------------------------------
.text:00003455
.text:00003455 $LN3_1:                                 ; CODE XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+A7j
.text:00003455                                         ; DATA XREF: .text:$LN18_3o
.text:00003455                 mov     ecx, [ebp+arg_8] ; jumptable 0000340F case 20
.text:00003458                 mov     edx, [ebp+var_18]
.text:0000345B                 mov     [ecx], edx
.text:0000345D                 mov     eax, [ebp+var_14]
.text:00003460                 mov     [ecx+4], eax
.text:00003463                 mov     ecx, [ebp+arg_C]
.text:00003466                 mov     byte ptr [ecx], 1
.text:00003469                 jmp     short loc_3488
.text:0000346B ; ---------------------------------------------------------------------------
.text:0000346B
.text:0000346B $LN2_2:                                 ; CODE XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+A7j
.text:0000346B                                         ; DATA XREF: .text:$LN18_3o
.text:0000346B                 jmp     short loc_3488  ; jumptable 0000340F case 0
.text:0000346D ; ---------------------------------------------------------------------------
.text:0000346D
.text:0000346D $LN1_1:                                 ; CODE XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+9Bj
.text:0000346D                                         ; Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+A7j
.text:0000346D                                         ; DATA XREF: ...
.text:0000346D                 mov     [ebp+var_30], 80004005h ; jumptable 0000340F default case
.text:00003474                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000347B                 lea     ecx, [ebp+var_20] ; this
.text:0000347E                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00003483                 mov     eax, [ebp+var_30]
.text:00003486                 jmp     short loc_34A1
.text:00003488 ; ---------------------------------------------------------------------------
.text:00003488
.text:00003488 loc_3488:                               ; CODE XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+C1j
.text:00003488                                         ; Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+D5j ...
.text:00003488                 mov     [ebp+var_34], 0
.text:0000348F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003496                 lea     ecx, [ebp+var_20] ; this
.text:00003499                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000349E                 mov     eax, [ebp+var_34]
.text:000034A1
.text:000034A1 loc_34A1:                               ; CODE XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+8Bj
.text:000034A1                                         ; Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+11Ej
.text:000034A1                 push    edx
.text:000034A2                 mov     ecx, ebp
.text:000034A4                 push    eax
.text:000034A5                 lea     edx, $LN17_2
.text:000034AB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000034B0                 pop     eax
.text:000034B1                 pop     edx
.text:000034B2                 mov     ecx, [ebp+var_C]
.text:000034B5                 mov     large fs:0, ecx
.text:000034BC                 pop     ecx
.text:000034BD                 pop     edi
.text:000034BE                 pop     esi
.text:000034BF                 add     esp, 38h
.text:000034C2                 cmp     ebp, esp
.text:000034C4                 call    __RTC_CheckEsp
.text:000034C9                 mov     esp, ebp
.text:000034CB                 pop     ebp
.text:000034CC                 retn    10h
.text:000034CC ?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z endp
.text:000034CC
.text:000034CC ; ---------------------------------------------------------------------------
.text:000034CF                 align 10h
.text:000034D0 $LN17_2         dd 1                    ; DATA XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+13Do
.text:000034D4                 dd offset $LN16_1
.text:000034D8 $LN16_1         dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:000034D4o
.text:000034E0                 dd offset $LN14_3       ; "prop"
.text:000034E4 $LN14_3         db 'prop',0             ; DATA XREF: .text:000034E0o
.text:000034E9                 align 4
.text:000034EC $LN18_3         dd offset $LN2_2        ; DATA XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+A7r
.text:000034EC                 dd offset $LN5_2        ; jump table for switch statement
.text:000034EC                 dd offset $LN6_3
.text:000034EC                 dd offset $LN3_1
.text:000034EC                 dd offset $LN4_2
.text:000034EC                 dd offset $LN1_1
.text:00003504 $LN13_5         db      0,     5,     5,     1
.text:00003504                                         ; DATA XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+A0r
.text:00003504                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:00003504                 db      5,     5,     5,     5
.text:00003504                 db      5,     5,     5,     5
.text:00003504                 db      5,     5,     5,     2
.text:00003504                 db      3,     4
.text:0000351A                 db 0Eh dup(0CCh)
.text:00003528
.text:00003528 ; =============== S U B R O U T I N E =======================================
.text:00003528
.text:00003528 ; Attributes: bp-based frame
.text:00003528
.text:00003528 ; private: long __thiscall CArc::PrepareToOpen(struct COpenOptions const &, unsigned int, class CMyComPtr<struct IInArchive> &)
.text:00003528                 public ?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z
.text:00003528 ?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z proc near
.text:00003528                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+D2Dp
.text:00003528                                         ; CArc::OpenStream2(COpenOptions const &)+1FA8p ...
.text:00003528
.text:00003528 var_2C          = dword ptr -2Ch
.text:00003528 var_28          = dword ptr -28h
.text:00003528 var_24          = dword ptr -24h
.text:00003528 var_20          = dword ptr -20h
.text:00003528 var_1C          = dword ptr -1Ch
.text:00003528 var_18          = dword ptr -18h
.text:00003528 var_14          = dword ptr -14h
.text:00003528 var_10          = dword ptr -10h
.text:00003528 var_C           = dword ptr -0Ch
.text:00003528 var_4           = dword ptr -4
.text:00003528 arg_0           = dword ptr  8
.text:00003528 arg_4           = dword ptr  0Ch
.text:00003528 arg_8           = dword ptr  10h
.text:00003528
.text:00003528                 push    ebp
.text:00003529                 mov     ebp, esp
.text:0000352B                 push    0FFFFFFFFh
.text:0000352D                 push    offset __ehhandler$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z
.text:00003532                 mov     eax, large fs:0
.text:00003538                 push    eax
.text:00003539                 sub     esp, 20h
.text:0000353C                 push    esi
.text:0000353D                 mov     eax, 0CCCCCCCCh
.text:00003542                 mov     [ebp+var_2C], eax
.text:00003545                 mov     [ebp+var_28], eax
.text:00003548                 mov     [ebp+var_24], eax
.text:0000354B                 mov     [ebp+var_20], eax
.text:0000354E                 mov     [ebp+var_1C], eax
.text:00003551                 mov     [ebp+var_18], eax
.text:00003554                 mov     [ebp+var_14], eax
.text:00003557                 mov     [ebp+var_10], eax
.text:0000355A                 mov     eax, dword ptr ds:___security_cookie
.text:0000355F                 xor     eax, ebp
.text:00003561                 push    eax
.text:00003562                 lea     eax, [ebp+var_C]
.text:00003565                 mov     large fs:0, eax
.text:0000356B                 mov     [ebp+var_10], ecx
.text:0000356E                 mov     eax, [ebp+arg_8]
.text:00003571                 push    eax
.text:00003572                 mov     ecx, [ebp+arg_4]
.text:00003575                 push    ecx
.text:00003576                 mov     edx, [ebp+arg_0]
.text:00003579                 mov     ecx, [edx]
.text:0000357B                 call    ?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z ; CCodecs::CreateInArchive(uint,CMyComPtr<IInArchive> &)
.text:00003580                 mov     [ebp+var_14], eax
.text:00003583                 cmp     [ebp+var_14], 0
.text:00003587                 jz      short loc_3591
.text:00003589                 mov     eax, [ebp+var_14]
.text:0000358C                 jmp     loc_3662
.text:00003591 ; ---------------------------------------------------------------------------
.text:00003591
.text:00003591 loc_3591:                               ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+5Fj
.text:00003591                 mov     ecx, [ebp+arg_8]
.text:00003594                 call    ??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ ; CMyComPtr<IInArchive>::operator!(void)
.text:00003599                 movzx   eax, al
.text:0000359C                 test    eax, eax
.text:0000359E                 jz      short loc_35A7
.text:000035A0                 xor     eax, eax
.text:000035A2                 jmp     loc_3662
.text:000035A7 ; ---------------------------------------------------------------------------
.text:000035A7
.text:000035A7 loc_35A7:                               ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+76j
.text:000035A7                 mov     ecx, [ebp+arg_4]
.text:000035AA                 push    ecx
.text:000035AB                 mov     edx, [ebp+arg_0]
.text:000035AE                 mov     ecx, [edx]
.text:000035B0                 add     ecx, 8
.text:000035B3                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:000035B8                 mov     [ebp+var_18], eax
.text:000035BB                 mov     ecx, [ebp+var_18] ; this
.text:000035BE                 call    ?Flags_PreArc@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_PreArc(void)
.text:000035C3                 movzx   eax, al
.text:000035C6                 test    eax, eax
.text:000035C8                 jz      short loc_3634
.text:000035CA                 lea     ecx, [ebp+var_20]
.text:000035CD                 call    ??0?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ ; CMyComPtr<IArchiveAllowTail>::CMyComPtr<IArchiveAllowTail>(void)
.text:000035D2                 mov     [ebp+var_4], 0
.text:000035D9                 lea     ecx, [ebp+var_20]
.text:000035DC                 call    ??I?$CMyComPtr@UIArchiveAllowTail@@@@QAEPAPAUIArchiveAllowTail@@XZ ; CMyComPtr<IArchiveAllowTail>::operator&(void)
.text:000035E1                 push    eax
.text:000035E2                 push    offset _IID_IArchiveAllowTail
.text:000035E7                 mov     ecx, [ebp+arg_8]
.text:000035EA                 call    ??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z ; CMyComPtr<IInArchive>::QueryInterface<void>(_GUID const &,void * *)
.text:000035EF                 lea     ecx, [ebp+var_20]
.text:000035F2                 call    ??B?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ ; CMyComPtr<IArchiveAllowTail>::operator IArchiveAllowTail *(void)
.text:000035F7                 test    eax, eax
.text:000035F9                 jz      short loc_3625
.text:000035FB                 lea     ecx, [ebp+var_20]
.text:000035FE                 call    ??C?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ ; CMyComPtr<IArchiveAllowTail>::operator->(void)
.text:00003603                 mov     [ebp+var_2C], eax
.text:00003606                 push    1               ; bool
.text:00003608                 call    ?BoolToInt@@YGH_N@Z ; BoolToInt(bool)
.text:0000360D                 mov     esi, esp
.text:0000360F                 push    eax
.text:00003610                 mov     ecx, [ebp+var_2C]
.text:00003613                 push    ecx
.text:00003614                 mov     edx, [ebp+var_2C]
.text:00003617                 mov     eax, [edx]
.text:00003619                 mov     ecx, [eax+0Ch]
.text:0000361C                 call    ecx
.text:0000361E                 cmp     esi, esp
.text:00003620                 call    __RTC_CheckEsp
.text:00003625
.text:00003625 loc_3625:                               ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+D1j
.text:00003625                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000362C                 lea     ecx, [ebp+var_20]
.text:0000362F                 call    ??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ ; CMyComPtr<IArchiveAllowTail>::~CMyComPtr<IArchiveAllowTail>(void)
.text:00003634
.text:00003634 loc_3634:                               ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+A0j
.text:00003634                 mov     edx, [ebp+arg_0]
.text:00003637                 cmp     dword ptr [edx+40h], 0
.text:0000363B                 jz      short loc_3660
.text:0000363D                 mov     eax, [ebp+arg_0]
.text:00003640                 mov     ecx, [eax+40h]
.text:00003643                 push    ecx
.text:00003644                 mov     ecx, [ebp+arg_8]
.text:00003647                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000364C                 push    eax
.text:0000364D                 call    ?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)
.text:00003652                 mov     [ebp+var_28], eax
.text:00003655                 cmp     [ebp+var_28], 0
.text:00003659                 jz      short loc_3660
.text:0000365B                 mov     eax, [ebp+var_28]
.text:0000365E                 jmp     short loc_3662
.text:00003660 ; ---------------------------------------------------------------------------
.text:00003660
.text:00003660 loc_3660:                               ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+113j
.text:00003660                                         ; CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+131j
.text:00003660                 xor     eax, eax
.text:00003662
.text:00003662 loc_3662:                               ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+64j
.text:00003662                                         ; CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+7Aj ...
.text:00003662                 push    edx
.text:00003663                 mov     ecx, ebp
.text:00003665                 push    eax
.text:00003666                 lea     edx, $LN13_6
.text:0000366C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003671                 pop     eax
.text:00003672                 pop     edx
.text:00003673                 mov     ecx, [ebp+var_C]
.text:00003676                 mov     large fs:0, ecx
.text:0000367D                 pop     ecx
.text:0000367E                 pop     esi
.text:0000367F                 add     esp, 2Ch
.text:00003682                 cmp     ebp, esp
.text:00003684                 call    __RTC_CheckEsp
.text:00003689                 mov     esp, ebp
.text:0000368B                 pop     ebp
.text:0000368C                 retn    0Ch
.text:0000368C ?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z endp
.text:0000368C
.text:0000368C ; ---------------------------------------------------------------------------
.text:0000368F                 align 10h
.text:00003690 $LN13_6         dd 1                    ; DATA XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+13Eo
.text:00003694                 dd offset $LN12_2
.text:00003698 $LN12_2         dd 0FFFFFFE0h, 4        ; DATA XREF: .text:00003694o
.text:000036A0                 dd offset $LN10_3       ; "allowTail"
.text:000036A4 $LN10_3         db 'allowTail',0        ; DATA XREF: .text:000036A0o
.text:000036AE                 db 0Ah dup(0CCh)
.text:000036B8
.text:000036B8 ; =============== S U B R O U T I N E =======================================
.text:000036B8
.text:000036B8 ; Attributes: bp-based frame
.text:000036B8
.text:000036B8 ; __int32 __thiscall CArc::CheckZerosTail(CArc *this, const struct COpenOptions *, unsigned __int64)
.text:000036B8                 public ?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z
.text:000036B8 ?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z proc near
.text:000036B8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+126Dp
.text:000036B8                                         ; CArc::OpenStream2(COpenOptions const &)+23F9p ...
.text:000036B8
.text:000036B8 var_82C         = dword ptr -82Ch
.text:000036B8 var_828         = dword ptr -828h
.text:000036B8 var_820         = dword ptr -820h
.text:000036B8 var_814         = byte ptr -814h
.text:000036B8 var_10          = dword ptr -10h
.text:000036B8 var_C           = dword ptr -0Ch
.text:000036B8 var_8           = dword ptr -8
.text:000036B8 var_4           = dword ptr -4
.text:000036B8 arg_0           = dword ptr  8
.text:000036B8 arg_4           = qword ptr  0Ch
.text:000036B8
.text:000036B8                 push    ebp
.text:000036B9                 mov     ebp, esp
.text:000036BB                 sub     esp, 82Ch
.text:000036C1                 push    esi
.text:000036C2                 push    edi
.text:000036C3                 push    ecx
.text:000036C4                 lea     edi, [ebp+var_82C]
.text:000036CA                 mov     ecx, 20Bh
.text:000036CF                 mov     eax, 0CCCCCCCCh
.text:000036D4                 rep stosd
.text:000036D6                 pop     ecx
.text:000036D7                 mov     eax, dword ptr ds:___security_cookie
.text:000036DC                 xor     eax, ebp
.text:000036DE                 mov     [ebp+var_4], eax
.text:000036E1                 mov     [ebp+var_8], ecx
.text:000036E4                 mov     eax, [ebp+arg_0]
.text:000036E7                 cmp     dword ptr [eax+30h], 0
.text:000036EB                 jnz     short loc_36F4
.text:000036ED                 xor     eax, eax
.text:000036EF                 jmp     loc_37E0
.text:000036F4 ; ---------------------------------------------------------------------------
.text:000036F4
.text:000036F4 loc_36F4:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+33j
.text:000036F4                 mov     esi, esp
.text:000036F6                 push    0
.text:000036F8                 push    0
.text:000036FA                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:000036FD                 push    ecx
.text:000036FE                 mov     edx, dword ptr [ebp+arg_4]
.text:00003701                 push    edx
.text:00003702                 mov     eax, [ebp+arg_0]
.text:00003705                 mov     ecx, [eax+30h]
.text:00003708                 mov     edx, [ebp+arg_0]
.text:0000370B                 mov     eax, [edx+30h]
.text:0000370E                 mov     ecx, [ecx]
.text:00003710                 push    eax
.text:00003711                 mov     edx, [ecx+10h]
.text:00003714                 call    edx
.text:00003716                 cmp     esi, esp
.text:00003718                 call    __RTC_CheckEsp
.text:0000371D                 mov     [ebp+var_C], eax
.text:00003720                 cmp     [ebp+var_C], 0
.text:00003724                 jz      short loc_372E
.text:00003726                 mov     eax, [ebp+var_C]
.text:00003729                 jmp     loc_37E0
.text:0000372E ; ---------------------------------------------------------------------------
.text:0000372E
.text:0000372E loc_372E:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+6Cj
.text:0000372E                 mov     [ebp+var_10], 800h
.text:00003735
.text:00003735 loc_3735:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64):loc_37DBj
.text:00003735                 mov     [ebp+var_820], 0
.text:0000373F                 mov     esi, esp
.text:00003741                 lea     eax, [ebp+var_820]
.text:00003747                 push    eax
.text:00003748                 push    800h
.text:0000374D                 lea     ecx, [ebp+var_814]
.text:00003753                 push    ecx
.text:00003754                 mov     edx, [ebp+arg_0]
.text:00003757                 mov     eax, [edx+30h]
.text:0000375A                 mov     ecx, [ebp+arg_0]
.text:0000375D                 mov     edx, [ecx+30h]
.text:00003760                 mov     eax, [eax]
.text:00003762                 push    edx
.text:00003763                 mov     ecx, [eax+0Ch]
.text:00003766                 call    ecx
.text:00003768                 cmp     esi, esp
.text:0000376A                 call    __RTC_CheckEsp
.text:0000376F                 mov     [ebp+var_828], eax
.text:00003775                 cmp     [ebp+var_828], 0
.text:0000377C                 jz      short loc_3786
.text:0000377E                 mov     eax, [ebp+var_828]
.text:00003784                 jmp     short loc_37E0
.text:00003786 ; ---------------------------------------------------------------------------
.text:00003786
.text:00003786 loc_3786:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+C4j
.text:00003786                 cmp     [ebp+var_820], 0
.text:0000378D                 jnz     short loc_379A
.text:0000378F                 mov     edx, [ebp+var_8]
.text:00003792                 mov     byte ptr [edx+12h], 1
.text:00003796                 xor     eax, eax
.text:00003798                 jmp     short loc_37E0
.text:0000379A ; ---------------------------------------------------------------------------
.text:0000379A
.text:0000379A loc_379A:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+D5j
.text:0000379A                 mov     [ebp+var_82C], 0
.text:000037A4                 jmp     short loc_37B5
.text:000037A6 ; ---------------------------------------------------------------------------
.text:000037A6
.text:000037A6 loc_37A6:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64):loc_37D9j
.text:000037A6                 mov     eax, [ebp+var_82C]
.text:000037AC                 add     eax, 1
.text:000037AF                 mov     [ebp+var_82C], eax
.text:000037B5
.text:000037B5 loc_37B5:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+ECj
.text:000037B5                 mov     ecx, [ebp+var_82C]
.text:000037BB                 cmp     ecx, [ebp+var_820]
.text:000037C1                 jnb     short loc_37DB
.text:000037C3                 mov     edx, [ebp+var_82C]
.text:000037C9                 movzx   eax, [ebp+edx+var_814]
.text:000037D1                 test    eax, eax
.text:000037D3                 jz      short loc_37D9
.text:000037D5                 xor     eax, eax
.text:000037D7                 jmp     short loc_37E0
.text:000037D9 ; ---------------------------------------------------------------------------
.text:000037D9
.text:000037D9 loc_37D9:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+11Bj
.text:000037D9                 jmp     short loc_37A6
.text:000037DB ; ---------------------------------------------------------------------------
.text:000037DB
.text:000037DB loc_37DB:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+109j
.text:000037DB                 jmp     loc_3735
.text:000037E0 ; ---------------------------------------------------------------------------
.text:000037E0
.text:000037E0 loc_37E0:                               ; CODE XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+37j
.text:000037E0                                         ; CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+71j ...
.text:000037E0                 push    edx
.text:000037E1                 mov     ecx, ebp
.text:000037E3                 push    eax
.text:000037E4                 lea     edx, $LN16_2
.text:000037EA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000037EF                 pop     eax
.text:000037F0                 pop     edx
.text:000037F1                 pop     edi
.text:000037F2                 pop     esi
.text:000037F3                 mov     ecx, [ebp+var_4]
.text:000037F6                 xor     ecx, ebp
.text:000037F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000037FD                 add     esp, 82Ch
.text:00003803                 cmp     ebp, esp
.text:00003805                 call    __RTC_CheckEsp
.text:0000380A                 mov     esp, ebp
.text:0000380C                 pop     ebp
.text:0000380D                 retn    0Ch
.text:0000380D ?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z endp
.text:0000380D
.text:0000380D ; ---------------------------------------------------------------------------
.text:00003810 $LN16_2         dd 2                    ; DATA XREF: CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+12Co
.text:00003814                 dd offset $LN15
.text:00003818 $LN15           dd 0FFFFF7ECh, 800h     ; DATA XREF: .text:00003814o
.text:00003820                 db  3Ah ; : OFF32 SEGDEF [_text,383A]
.text:00003821                 db  38h ; 8
.text:00003822                 db    0
.text:00003823                 db    0
.text:00003824                 dd 0FFFFF7E0h, 4
.text:0000382C                 dd offset $LN14_4       ; "processed"
.text:00003830 $LN14_4         db 'processed',0        ; DATA XREF: .text:0000382Co
.text:0000383A $LN13_7         db 'buf',0
.text:0000383E                 db 0Ah dup(0CCh)
.text:00003848
.text:00003848 ; =============== S U B R O U T I N E =======================================
.text:00003848
.text:00003848 ; Attributes: bp-based frame
.text:00003848
.text:00003848 ; __int32 __stdcall CExtractCallback_To_OpenCallback::SetTotal(CExtractCallback_To_OpenCallback *this, unsigned __int64)
.text:00003848                 public ?SetTotal@CExtractCallback_To_OpenCallback@@UAGJ_K@Z
.text:00003848 ?SetTotal@CExtractCallback_To_OpenCallback@@UAGJ_K@Z proc near
.text:00003848                                         ; DATA XREF: .rdata:0000F63Co
.text:00003848
.text:00003848 this            = dword ptr  8
.text:00003848
.text:00003848                 push    ebp
.text:00003849                 mov     ebp, esp
.text:0000384B                 xor     eax, eax
.text:0000384D                 pop     ebp
.text:0000384E                 retn    0Ch
.text:0000384E ?SetTotal@CExtractCallback_To_OpenCallback@@UAGJ_K@Z endp
.text:0000384E
.text:0000384E ; ---------------------------------------------------------------------------
.text:00003851                 align 8
.text:00003858
.text:00003858 ; =============== S U B R O U T I N E =======================================
.text:00003858
.text:00003858 ; Attributes: bp-based frame
.text:00003858
.text:00003858 ; __int32 __stdcall CExtractCallback_To_OpenCallback::SetCompleted(CExtractCallback_To_OpenCallback *this, const unsigned __int64 *)
.text:00003858                 public ?SetCompleted@CExtractCallback_To_OpenCallback@@UAGJPB_K@Z
.text:00003858 ?SetCompleted@CExtractCallback_To_OpenCallback@@UAGJPB_K@Z proc near
.text:00003858                                         ; DATA XREF: .rdata:0000F640o
.text:00003858
.text:00003858 this            = dword ptr  8
.text:00003858
.text:00003858                 push    ebp
.text:00003859                 mov     ebp, esp
.text:0000385B                 xor     eax, eax
.text:0000385D                 pop     ebp
.text:0000385E                 retn    8
.text:0000385E ?SetCompleted@CExtractCallback_To_OpenCallback@@UAGJPB_K@Z endp
.text:0000385E
.text:0000385E ; ---------------------------------------------------------------------------
.text:00003861                 align 8
.text:00003868
.text:00003868 ; =============== S U B R O U T I N E =======================================
.text:00003868
.text:00003868 ; Attributes: bp-based frame
.text:00003868
.text:00003868 ; __int32 __stdcall CExtractCallback_To_OpenCallback::SetRatioInfo(CExtractCallback_To_OpenCallback *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00003868                 public ?SetRatioInfo@CExtractCallback_To_OpenCallback@@UAGJPB_K0@Z
.text:00003868 ?SetRatioInfo@CExtractCallback_To_OpenCallback@@UAGJPB_K0@Z proc near
.text:00003868                                         ; DATA XREF: .rdata:0000F628o
.text:00003868
.text:00003868 var_14          = dword ptr -14h
.text:00003868 var_10          = dword ptr -10h
.text:00003868 var_C           = dword ptr -0Ch
.text:00003868 var_8           = dword ptr -8
.text:00003868 var_4           = dword ptr -4
.text:00003868 this            = dword ptr  8
.text:00003868 arg_4           = dword ptr  0Ch
.text:00003868
.text:00003868                 push    ebp
.text:00003869                 mov     ebp, esp
.text:0000386B                 sub     esp, 14h
.text:0000386E                 push    esi
.text:0000386F                 mov     eax, 0CCCCCCCCh
.text:00003874                 mov     [ebp+var_14], eax
.text:00003877                 mov     [ebp+var_10], eax
.text:0000387A                 mov     [ebp+var_C], eax
.text:0000387D                 mov     [ebp+var_8], eax
.text:00003880                 mov     [ebp+var_4], eax
.text:00003883                 mov     ecx, [ebp+this]
.text:00003886                 add     ecx, 8
.text:00003889                 call    ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *(void)
.text:0000388E                 test    eax, eax
.text:00003890                 jz      short loc_38ED
.text:00003892                 mov     eax, [ebp+this]
.text:00003895                 mov     ecx, [eax+14h]
.text:00003898                 mov     [ebp+var_C], ecx
.text:0000389B                 mov     edx, [eax+18h]
.text:0000389E                 mov     [ebp+var_8], edx
.text:000038A1                 cmp     [ebp+arg_4], 0
.text:000038A5                 jz      short loc_38BB
.text:000038A7                 mov     eax, [ebp+arg_4]
.text:000038AA                 mov     ecx, [ebp+var_C]
.text:000038AD                 add     ecx, [eax]
.text:000038AF                 mov     edx, [ebp+var_8]
.text:000038B2                 adc     edx, [eax+4]
.text:000038B5                 mov     [ebp+var_C], ecx
.text:000038B8                 mov     [ebp+var_8], edx
.text:000038BB
.text:000038BB loc_38BB:                               ; CODE XREF: CExtractCallback_To_OpenCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+3Dj
.text:000038BB                 mov     ecx, [ebp+this]
.text:000038BE                 add     ecx, 8
.text:000038C1                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:000038C6                 mov     [ebp+var_14], eax
.text:000038C9                 mov     esi, esp
.text:000038CB                 lea     eax, [ebp+var_C]
.text:000038CE                 push    eax
.text:000038CF                 mov     ecx, [ebp+this]
.text:000038D2                 add     ecx, 0Ch
.text:000038D5                 push    ecx
.text:000038D6                 mov     edx, [ebp+var_14]
.text:000038D9                 push    edx
.text:000038DA                 mov     eax, [ebp+var_14]
.text:000038DD                 mov     ecx, [eax]
.text:000038DF                 mov     edx, [ecx+10h]
.text:000038E2                 call    edx
.text:000038E4                 cmp     esi, esp
.text:000038E6                 call    __RTC_CheckEsp
.text:000038EB                 jmp     short loc_38EF
.text:000038ED ; ---------------------------------------------------------------------------
.text:000038ED
.text:000038ED loc_38ED:                               ; CODE XREF: CExtractCallback_To_OpenCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+28j
.text:000038ED                 xor     eax, eax
.text:000038EF
.text:000038EF loc_38EF:                               ; CODE XREF: CExtractCallback_To_OpenCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+83j
.text:000038EF                 push    edx
.text:000038F0                 mov     ecx, ebp
.text:000038F2                 push    eax
.text:000038F3                 lea     edx, $LN7_5
.text:000038F9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000038FE                 pop     eax
.text:000038FF                 pop     edx
.text:00003900                 pop     esi
.text:00003901                 add     esp, 14h
.text:00003904                 cmp     ebp, esp
.text:00003906                 call    __RTC_CheckEsp
.text:0000390B                 mov     esp, ebp
.text:0000390D                 pop     ebp
.text:0000390E                 retn    0Ch
.text:0000390E ?SetRatioInfo@CExtractCallback_To_OpenCallback@@UAGJPB_K0@Z endp
.text:0000390E
.text:0000390E ; ---------------------------------------------------------------------------
.text:00003911                 align 4
.text:00003914 $LN7_5          dd 1                    ; DATA XREF: CExtractCallback_To_OpenCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+8Bo
.text:00003918                 dd offset $LN6_4
.text:0000391C $LN6_4          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00003918o
.text:00003924                 dd offset $LN5_3        ; "value"
.text:00003928 $LN5_3          db 'value',0            ; DATA XREF: .text:00003924o
.text:0000392E                 db 0Ah dup(0CCh)
.text:00003938
.text:00003938 ; =============== S U B R O U T I N E =======================================
.text:00003938
.text:00003938 ; Attributes: bp-based frame
.text:00003938
.text:00003938 ; __int32 __stdcall CExtractCallback_To_OpenCallback::GetStream(CExtractCallback_To_OpenCallback *this, unsigned int, struct ISequentialOutStream **, int)
.text:00003938                 public ?GetStream@CExtractCallback_To_OpenCallback@@UAGJIPAPAUISequentialOutStream@@H@Z
.text:00003938 ?GetStream@CExtractCallback_To_OpenCallback@@UAGJIPAPAUISequentialOutStream@@H@Z proc near
.text:00003938                                         ; DATA XREF: .rdata:0000F644o
.text:00003938
.text:00003938 this            = dword ptr  8
.text:00003938 arg_8           = dword ptr  10h
.text:00003938
.text:00003938                 push    ebp
.text:00003939                 mov     ebp, esp
.text:0000393B                 mov     eax, [ebp+arg_8]
.text:0000393E                 mov     dword ptr [eax], 0
.text:00003944                 xor     eax, eax
.text:00003946                 pop     ebp
.text:00003947                 retn    10h
.text:00003947 ?GetStream@CExtractCallback_To_OpenCallback@@UAGJIPAPAUISequentialOutStream@@H@Z endp
.text:00003947
.text:00003947 ; ---------------------------------------------------------------------------
.text:0000394A                 db 0Eh dup(0CCh)
.text:00003958
.text:00003958 ; =============== S U B R O U T I N E =======================================
.text:00003958
.text:00003958 ; Attributes: bp-based frame
.text:00003958
.text:00003958 ; __int32 __stdcall CExtractCallback_To_OpenCallback::PrepareOperation(CExtractCallback_To_OpenCallback *this, int)
.text:00003958                 public ?PrepareOperation@CExtractCallback_To_OpenCallback@@UAGJH@Z
.text:00003958 ?PrepareOperation@CExtractCallback_To_OpenCallback@@UAGJH@Z proc near
.text:00003958                                         ; DATA XREF: .rdata:0000F648o
.text:00003958
.text:00003958 this            = dword ptr  8
.text:00003958
.text:00003958                 push    ebp
.text:00003959                 mov     ebp, esp
.text:0000395B                 xor     eax, eax
.text:0000395D                 pop     ebp
.text:0000395E                 retn    8
.text:0000395E ?PrepareOperation@CExtractCallback_To_OpenCallback@@UAGJH@Z endp
.text:0000395E
.text:0000395E ; ---------------------------------------------------------------------------
.text:00003961                 align 8
.text:00003968
.text:00003968 ; =============== S U B R O U T I N E =======================================
.text:00003968
.text:00003968 ; Attributes: bp-based frame
.text:00003968
.text:00003968 ; __int32 __stdcall CExtractCallback_To_OpenCallback::SetOperationResult(CExtractCallback_To_OpenCallback *this, int)
.text:00003968                 public ?SetOperationResult@CExtractCallback_To_OpenCallback@@UAGJH@Z
.text:00003968 ?SetOperationResult@CExtractCallback_To_OpenCallback@@UAGJH@Z proc near
.text:00003968                                         ; DATA XREF: .rdata:0000F64Co
.text:00003968
.text:00003968 this            = dword ptr  8
.text:00003968
.text:00003968                 push    ebp
.text:00003969                 mov     ebp, esp
.text:0000396B                 xor     eax, eax
.text:0000396D                 pop     ebp
.text:0000396E                 retn    8
.text:0000396E ?SetOperationResult@CExtractCallback_To_OpenCallback@@UAGJH@Z endp
.text:0000396E
.text:0000396E ; ---------------------------------------------------------------------------
.text:00003971                 align 8
.text:00003978
.text:00003978 ; =============== S U B R O U T I N E =======================================
.text:00003978
.text:00003978 ; Attributes: bp-based frame
.text:00003978
.text:00003978 ; __int32 __thiscall CArc::OpenStream2(CArc *this, const struct COpenOptions *)
.text:00003978                 public ?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z
.text:00003978 ?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z proc near
.text:00003978                                         ; CODE XREF: CArc::OpenStream(COpenOptions const &)+48p
.text:00003978
.text:00003978 var_848         = dword ptr -848h
.text:00003978 var_844         = dword ptr -844h
.text:00003978 var_840         = dword ptr -840h
.text:00003978 var_83C         = dword ptr -83Ch
.text:00003978 var_838         = dword ptr -838h
.text:00003978 var_834         = dword ptr -834h
.text:00003978 var_830         = dword ptr -830h
.text:00003978 var_82C         = dword ptr -82Ch
.text:00003978 var_828         = dword ptr -828h
.text:00003978 var_824         = dword ptr -824h
.text:00003978 var_820         = dword ptr -820h
.text:00003978 var_81C         = dword ptr -81Ch
.text:00003978 var_818         = qword ptr -818h
.text:00003978 var_810         = dword ptr -810h
.text:00003978 var_80C         = dword ptr -80Ch
.text:00003978 var_808         = dword ptr -808h
.text:00003978 var_804         = dword ptr -804h
.text:00003978 var_800         = dword ptr -800h
.text:00003978 var_7FC         = dword ptr -7FCh
.text:00003978 var_7F8         = dword ptr -7F8h
.text:00003978 var_7F4         = dword ptr -7F4h
.text:00003978 var_7F0         = dword ptr -7F0h
.text:00003978 var_7EC         = dword ptr -7ECh
.text:00003978 var_7E8         = dword ptr -7E8h
.text:00003978 var_7E4         = dword ptr -7E4h
.text:00003978 var_7E0         = dword ptr -7E0h
.text:00003978 var_7DC         = dword ptr -7DCh
.text:00003978 var_7D8         = dword ptr -7D8h
.text:00003978 var_7D4         = dword ptr -7D4h
.text:00003978 var_7D0         = dword ptr -7D0h
.text:00003978 var_7CC         = dword ptr -7CCh
.text:00003978 var_7C8         = dword ptr -7C8h
.text:00003978 var_7C4         = dword ptr -7C4h
.text:00003978 var_7C0         = dword ptr -7C0h
.text:00003978 var_7BC         = dword ptr -7BCh
.text:00003978 var_7B8         = dword ptr -7B8h
.text:00003978 var_7B4         = dword ptr -7B4h
.text:00003978 var_7B0         = dword ptr -7B0h
.text:00003978 var_7AC         = dword ptr -7ACh
.text:00003978 var_7A8         = dword ptr -7A8h
.text:00003978 var_7A4         = dword ptr -7A4h
.text:00003978 var_7A0         = dword ptr -7A0h
.text:00003978 var_79C         = dword ptr -79Ch
.text:00003978 var_798         = dword ptr -798h
.text:00003978 var_794         = dword ptr -794h
.text:00003978 var_790         = dword ptr -790h
.text:00003978 var_78C         = dword ptr -78Ch
.text:00003978 var_788         = dword ptr -788h
.text:00003978 var_784         = dword ptr -784h
.text:00003978 var_780         = dword ptr -780h
.text:00003978 var_77C         = dword ptr -77Ch
.text:00003978 var_778         = dword ptr -778h
.text:00003978 var_774         = dword ptr -774h
.text:00003978 var_770         = dword ptr -770h
.text:00003978 var_76C         = dword ptr -76Ch
.text:00003978 var_768         = dword ptr -768h
.text:00003978 var_764         = dword ptr -764h
.text:00003978 var_760         = dword ptr -760h
.text:00003978 var_75C         = dword ptr -75Ch
.text:00003978 var_758         = dword ptr -758h
.text:00003978 var_754         = dword ptr -754h
.text:00003978 var_750         = dword ptr -750h
.text:00003978 var_74C         = dword ptr -74Ch
.text:00003978 var_748         = dword ptr -748h
.text:00003978 var_744         = dword ptr -744h
.text:00003978 var_740         = dword ptr -740h
.text:00003978 var_73C         = dword ptr -73Ch
.text:00003978 var_738         = dword ptr -738h
.text:00003978 var_734         = dword ptr -734h
.text:00003978 var_730         = dword ptr -730h
.text:00003978 var_72C         = dword ptr -72Ch
.text:00003978 var_728         = dword ptr -728h
.text:00003978 var_724         = dword ptr -724h
.text:00003978 var_720         = dword ptr -720h
.text:00003978 var_71C         = dword ptr -71Ch
.text:00003978 var_718         = dword ptr -718h
.text:00003978 var_714         = dword ptr -714h
.text:00003978 var_710         = dword ptr -710h
.text:00003978 var_70C         = dword ptr -70Ch
.text:00003978 var_708         = dword ptr -708h
.text:00003978 var_704         = dword ptr -704h
.text:00003978 var_700         = dword ptr -700h
.text:00003978 var_6FC         = dword ptr -6FCh
.text:00003978 var_6F8         = dword ptr -6F8h
.text:00003978 var_6F4         = dword ptr -6F4h
.text:00003978 var_6F0         = dword ptr -6F0h
.text:00003978 var_6EC         = dword ptr -6ECh
.text:00003978 var_6E8         = dword ptr -6E8h
.text:00003978 var_6E4         = dword ptr -6E4h
.text:00003978 var_6E0         = dword ptr -6E0h
.text:00003978 var_6DC         = dword ptr -6DCh
.text:00003978 var_6D8         = dword ptr -6D8h
.text:00003978 var_6D4         = dword ptr -6D4h
.text:00003978 var_6D0         = dword ptr -6D0h
.text:00003978 var_6CC         = dword ptr -6CCh
.text:00003978 var_6C8         = dword ptr -6C8h
.text:00003978 var_6C4         = dword ptr -6C4h
.text:00003978 var_6C0         = dword ptr -6C0h
.text:00003978 var_6BC         = dword ptr -6BCh
.text:00003978 var_6B8         = dword ptr -6B8h
.text:00003978 var_6B4         = dword ptr -6B4h
.text:00003978 var_6B0         = dword ptr -6B0h
.text:00003978 var_6AC         = dword ptr -6ACh
.text:00003978 var_6A8         = dword ptr -6A8h
.text:00003978 var_6A4         = dword ptr -6A4h
.text:00003978 var_6A0         = dword ptr -6A0h
.text:00003978 var_69C         = dword ptr -69Ch
.text:00003978 var_698         = dword ptr -698h
.text:00003978 var_694         = dword ptr -694h
.text:00003978 var_690         = dword ptr -690h
.text:00003978 var_68C         = dword ptr -68Ch
.text:00003978 var_688         = dword ptr -688h
.text:00003978 var_684         = dword ptr -684h
.text:00003978 var_680         = dword ptr -680h
.text:00003978 var_67C         = dword ptr -67Ch
.text:00003978 var_678         = dword ptr -678h
.text:00003978 var_674         = dword ptr -674h
.text:00003978 var_670         = dword ptr -670h
.text:00003978 var_66C         = dword ptr -66Ch
.text:00003978 var_668         = dword ptr -668h
.text:00003978 var_664         = dword ptr -664h
.text:00003978 var_65D         = byte ptr -65Dh
.text:00003978 var_65C         = dword ptr -65Ch
.text:00003978 var_656         = byte ptr -656h
.text:00003978 var_655         = byte ptr -655h
.text:00003978 var_654         = dword ptr -654h
.text:00003978 var_650         = dword ptr -650h
.text:00003978 var_64A         = byte ptr -64Ah
.text:00003978 var_649         = byte ptr -649h
.text:00003978 var_648         = dword ptr -648h
.text:00003978 var_644         = dword ptr -644h
.text:00003978 var_640         = dword ptr -640h
.text:00003978 var_63C         = dword ptr -63Ch
.text:00003978 var_634         = dword ptr -634h
.text:00003978 var_630         = dword ptr -630h
.text:00003978 var_62C         = dword ptr -62Ch
.text:00003978 var_628         = dword ptr -628h
.text:00003978 var_5E8         = byte ptr -5E8h
.text:00003978 var_5E7         = byte ptr -5E7h
.text:00003978 var_5CC         = dword ptr -5CCh
.text:00003978 var_5C8         = byte ptr -5C8h
.text:00003978 var_5C0         = dword ptr -5C0h
.text:00003978 var_5B9         = byte ptr -5B9h
.text:00003978 var_5B8         = dword ptr -5B8h
.text:00003978 var_5B4         = dword ptr -5B4h
.text:00003978 var_5AC         = dword ptr -5ACh
.text:00003978 var_5A8         = dword ptr -5A8h
.text:00003978 var_5A0         = dword ptr -5A0h
.text:00003978 var_59C         = dword ptr -59Ch
.text:00003978 var_598         = qword ptr -598h
.text:00003978 var_590         = dword ptr -590h
.text:00003978 var_588         = byte ptr -588h
.text:00003978 var_580         = dword ptr -580h
.text:00003978 var_579         = byte ptr -579h
.text:00003978 var_578         = dword ptr -578h
.text:00003978 var_574         = dword ptr -574h
.text:00003978 var_570         = qword ptr -570h
.text:00003978 var_568         = dword ptr -568h
.text:00003978 var_564         = dword ptr -564h
.text:00003978 var_560         = dword ptr -560h
.text:00003978 var_55C         = dword ptr -55Ch
.text:00003978 var_555         = byte ptr -555h
.text:00003978 var_554         = dword ptr -554h
.text:00003978 var_54D         = byte ptr -54Dh
.text:00003978 var_54C         = dword ptr -54Ch
.text:00003978 var_548         = dword ptr -548h
.text:00003978 var_541         = byte ptr -541h
.text:00003978 var_540         = dword ptr -540h
.text:00003978 var_53C         = dword ptr -53Ch
.text:00003978 var_538         = dword ptr -538h
.text:00003978 var_534         = dword ptr -534h
.text:00003978 var_530         = dword ptr -530h
.text:00003978 var_52C         = dword ptr -52Ch
.text:00003978 var_528         = dword ptr -528h
.text:00003978 var_524         = dword ptr -524h
.text:00003978 var_520         = dword ptr -520h
.text:00003978 var_51C         = dword ptr -51Ch
.text:00003978 var_518         = dword ptr -518h
.text:00003978 Size            = dword ptr -514h
.text:00003978 var_510         = dword ptr -510h
.text:00003978 var_50C         = dword ptr -50Ch
.text:00003978 var_508         = dword ptr -508h
.text:00003978 var_504         = dword ptr -504h
.text:00003978 var_500         = dword ptr -500h
.text:00003978 var_4FC         = dword ptr -4FCh
.text:00003978 var_4F4         = dword ptr -4F4h
.text:00003978 var_4EC         = dword ptr -4ECh
.text:00003978 var_4E8         = dword ptr -4E8h
.text:00003978 var_4E4         = dword ptr -4E4h
.text:00003978 var_4E0         = dword ptr -4E0h
.text:00003978 var_4DC         = dword ptr -4DCh
.text:00003978 var_4D8         = dword ptr -4D8h
.text:00003978 var_4D4         = dword ptr -4D4h
.text:00003978 var_4D0         = dword ptr -4D0h
.text:00003978 var_4CA         = byte ptr -4CAh
.text:00003978 var_4C9         = byte ptr -4C9h
.text:00003978 var_4C8         = dword ptr -4C8h
.text:00003978 var_4C4         = dword ptr -4C4h
.text:00003978 var_4C0         = dword ptr -4C0h
.text:00003978 var_4BC         = dword ptr -4BCh
.text:00003978 var_4B4         = byte ptr -4B4h
.text:00003978 var_4AC         = dword ptr -4ACh
.text:00003978 var_4A8         = dword ptr -4A8h
.text:00003978 var_4A4         = dword ptr -4A4h
.text:00003978 var_4A0         = dword ptr -4A0h
.text:00003978 var_49C         = dword ptr -49Ch
.text:00003978 var_498         = dword ptr -498h
.text:00003978 var_491         = byte ptr -491h
.text:00003978 var_490         = dword ptr -490h
.text:00003978 var_48C         = dword ptr -48Ch
.text:00003978 var_488         = dword ptr -488h
.text:00003978 var_481         = byte ptr -481h
.text:00003978 var_480         = dword ptr -480h
.text:00003978 var_478         = byte ptr -478h
.text:00003978 var_46C         = byte ptr -46Ch
.text:00003978 var_458         = byte ptr -458h
.text:00003978 Dst             = dword ptr -354h
.text:00003978 var_34C         = byte ptr -34Ch
.text:00003978 var_344         = dword ptr -344h
.text:00003978 var_340         = dword ptr -340h
.text:00003978 var_33C         = dword ptr -33Ch
.text:00003978 var_338         = dword ptr -338h
.text:00003978 var_330         = byte ptr -330h
.text:00003978 var_328         = dword ptr -328h
.text:00003978 var_324         = dword ptr -324h
.text:00003978 var_320         = dword ptr -320h
.text:00003978 var_31C         = dword ptr -31Ch
.text:00003978 var_318         = dword ptr -318h
.text:00003978 var_310         = byte ptr -310h
.text:00003978 var_2FC         = byte ptr -2FCh
.text:00003978 var_2EC         = dword ptr -2ECh
.text:00003978 var_2E8         = dword ptr -2E8h
.text:00003978 var_2E1         = byte ptr -2E1h
.text:00003978 var_2E0         = dword ptr -2E0h
.text:00003978 var_2D9         = byte ptr -2D9h
.text:00003978 var_2D4         = dword ptr -2D4h
.text:00003978 var_2D0         = dword ptr -2D0h
.text:00003978 var_2CC         = dword ptr -2CCh
.text:00003978 var_2C8         = dword ptr -2C8h
.text:00003978 var_268         = byte ptr -268h
.text:00003978 var_260         = dword ptr -260h
.text:00003978 var_25C         = dword ptr -25Ch
.text:00003978 var_254         = dword ptr -254h
.text:00003978 var_250         = dword ptr -250h
.text:00003978 var_248         = dword ptr -248h
.text:00003978 var_244         = dword ptr -244h
.text:00003978 var_23C         = byte ptr -23Ch
.text:00003978 var_234         = dword ptr -234h
.text:00003978 var_230         = dword ptr -230h
.text:00003978 var_22C         = dword ptr -22Ch
.text:00003978 var_228         = dword ptr -228h
.text:00003978 var_224         = dword ptr -224h
.text:00003978 var_220         = dword ptr -220h
.text:00003978 var_21A         = byte ptr -21Ah
.text:00003978 var_219         = byte ptr -219h
.text:00003978 var_218         = dword ptr -218h
.text:00003978 var_214         = dword ptr -214h
.text:00003978 var_210         = dword ptr -210h
.text:00003978 var_20C         = dword ptr -20Ch
.text:00003978 var_208         = dword ptr -208h
.text:00003978 var_200         = byte ptr -200h
.text:00003978 var_1F0         = dword ptr -1F0h
.text:00003978 var_1EC         = dword ptr -1ECh
.text:00003978 var_1E8         = dword ptr -1E8h
.text:00003978 var_1E0         = dword ptr -1E0h
.text:00003978 var_1D5         = byte ptr -1D5h
.text:00003978 var_1D0         = byte ptr -1D0h
.text:00003978 var_1C0         = byte ptr -1C0h
.text:00003978 var_1B8         = dword ptr -1B8h
.text:00003978 var_1B0         = byte ptr -1B0h
.text:00003978 var_1A8         = dword ptr -1A8h
.text:00003978 var_1A4         = dword ptr -1A4h
.text:00003978 var_1A0         = dword ptr -1A0h
.text:00003978 var_19C         = dword ptr -19Ch
.text:00003978 var_195         = byte ptr -195h
.text:00003978 var_194         = dword ptr -194h
.text:00003978 var_18D         = byte ptr -18Dh
.text:00003978 var_18C         = dword ptr -18Ch
.text:00003978 var_185         = byte ptr -185h
.text:00003978 var_184         = dword ptr -184h
.text:00003978 var_17C         = byte ptr -17Ch
.text:00003978 var_170         = dword ptr -170h
.text:00003978 var_16C         = dword ptr -16Ch
.text:00003978 var_164         = dword ptr -164h
.text:00003978 var_160         = dword ptr -160h
.text:00003978 var_158         = byte ptr -158h
.text:00003978 var_150         = dword ptr -150h
.text:00003978 var_14C         = dword ptr -14Ch
.text:00003978 var_148         = dword ptr -148h
.text:00003978 var_141         = byte ptr -141h
.text:00003978 var_140         = dword ptr -140h
.text:00003978 var_13C         = dword ptr -13Ch
.text:00003978 var_138         = dword ptr -138h
.text:00003978 var_134         = dword ptr -134h
.text:00003978 var_12C         = byte ptr -12Ch
.text:00003978 var_124         = dword ptr -124h
.text:00003978 var_120         = dword ptr -120h
.text:00003978 var_118         = qword ptr -118h
.text:00003978 var_10C         = dword ptr -10Ch
.text:00003978 var_108         = dword ptr -108h
.text:00003978 var_104         = dword ptr -104h
.text:00003978 var_100         = dword ptr -100h
.text:00003978 var_FC          = dword ptr -0FCh
.text:00003978 var_F8          = dword ptr -0F8h
.text:00003978 var_F4          = dword ptr -0F4h
.text:00003978 var_EC          = dword ptr -0ECh
.text:00003978 var_E4          = dword ptr -0E4h
.text:00003978 var_DC          = byte ptr -0DCh
.text:00003978 var_DB          = byte ptr -0DBh
.text:00003978 var_DA          = byte ptr -0DAh
.text:00003978 var_D9          = byte ptr -0D9h
.text:00003978 var_D8          = byte ptr -0D8h
.text:00003978 var_D7          = byte ptr -0D7h
.text:00003978 var_D6          = byte ptr -0D6h
.text:00003978 var_D0          = dword ptr -0D0h
.text:00003978 var_CC          = dword ptr -0CCh
.text:00003978 var_C4          = dword ptr -0C4h
.text:00003978 var_BC          = dword ptr -0BCh
.text:00003978 var_B8          = dword ptr -0B8h
.text:00003978 var_B0          = byte ptr -0B0h
.text:00003978 var_9C          = byte ptr -9Ch
.text:00003978 var_90          = dword ptr -90h
.text:00003978 var_8C          = dword ptr -8Ch
.text:00003978 var_88          = dword ptr -88h
.text:00003978 var_81          = byte ptr -81h
.text:00003978 var_80          = dword ptr -80h
.text:00003978 var_7C          = dword ptr -7Ch
.text:00003978 var_78          = dword ptr -78h
.text:00003978 var_72          = byte ptr -72h
.text:00003978 var_71          = byte ptr -71h
.text:00003978 var_70          = dword ptr -70h
.text:00003978 var_6C          = dword ptr -6Ch
.text:00003978 var_68          = dword ptr -68h
.text:00003978 var_60          = byte ptr -60h
.text:00003978 var_55          = byte ptr -55h
.text:00003978 var_50          = byte ptr -50h
.text:00003978 var_40          = dword ptr -40h
.text:00003978 var_38          = byte ptr -38h
.text:00003978 var_24          = byte ptr -24h
.text:00003978 var_14          = dword ptr -14h
.text:00003978 var_10          = dword ptr -10h
.text:00003978 var_C           = dword ptr -0Ch
.text:00003978 var_4           = dword ptr -4
.text:00003978 arg_0           = dword ptr  8
.text:00003978
.text:00003978                 push    ebp
.text:00003979                 mov     ebp, esp
.text:0000397B                 push    0FFFFFFFFh
.text:0000397D                 push    offset __ehhandler$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z
.text:00003982                 mov     eax, large fs:0
.text:00003988                 push    eax
.text:00003989                 sub     esp, 83Ch
.text:0000398F                 push    esi
.text:00003990                 push    edi
.text:00003991                 push    ecx
.text:00003992                 lea     edi, [ebp+var_848]
.text:00003998                 mov     ecx, 20Fh
.text:0000399D                 mov     eax, 0CCCCCCCCh
.text:000039A2                 rep stosd
.text:000039A4                 pop     ecx
.text:000039A5                 mov     eax, dword ptr ds:___security_cookie
.text:000039AA                 xor     eax, ebp
.text:000039AC                 mov     [ebp+var_10], eax
.text:000039AF                 push    eax
.text:000039B0                 lea     eax, [ebp+var_C]
.text:000039B3                 mov     large fs:0, eax
.text:000039B9                 mov     [ebp+var_14], ecx
.text:000039BC                 mov     ecx, [ebp+var_14]
.text:000039BF                 call    ?Release@?$CMyComPtr@UIInArchive@@@@QAEXXZ ; CMyComPtr<IInArchive>::Release(void)
.text:000039C4                 mov     ecx, [ebp+var_14]
.text:000039C7                 add     ecx, 8
.text:000039CA                 call    ?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRawProps>::Release(void)
.text:000039CF                 mov     ecx, [ebp+var_14]
.text:000039D2                 add     ecx, 0Ch
.text:000039D5                 call    ?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRootProps>::Release(void)
.text:000039DA                 mov     ecx, [ebp+var_14]
.text:000039DD                 add     ecx, 10h        ; this
.text:000039E0                 call    ?ClearErrors@CArcErrorInfo@@QAEXXZ ; CArcErrorInfo::ClearErrors(void)
.text:000039E5                 mov     eax, [ebp+var_14]
.text:000039E8                 mov     dword ptr [eax+1Ch], 0FFFFFFFFh
.text:000039EF                 mov     ecx, [ebp+var_14]
.text:000039F2                 mov     byte ptr [ecx+0D8h], 0
.text:000039F9                 mov     edx, [ebp+var_14]
.text:000039FC                 mov     dword ptr [edx+0D0h], 0
.text:00003A06                 mov     dword ptr [edx+0D4h], 0
.text:00003A10                 mov     eax, [ebp+var_14]
.text:00003A13                 add     eax, 70h ; 'p'
.text:00003A16                 push    eax
.text:00003A17                 lea     ecx, [ebp+var_24]
.text:00003A1A                 push    ecx
.text:00003A1B                 call    ?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z ; ExtractFileNameFromPath(UString const &)
.text:00003A20                 mov     [ebp+var_4], 0
.text:00003A27                 lea     ecx, [ebp+var_38]
.text:00003A2A                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00003A2F                 mov     byte ptr [ebp+var_4], 1
.text:00003A33                 lea     ecx, [ebp+var_24] ; this
.text:00003A36                 call    ?ReverseFind_Dot@UString@@QBEHXZ ; UString::ReverseFind_Dot(void)
.text:00003A3B                 mov     [ebp+var_40], eax
.text:00003A3E                 cmp     [ebp+var_40], 0
.text:00003A42                 jl      short loc_3A5C
.text:00003A44                 mov     edx, [ebp+var_40]
.text:00003A47                 add     edx, 1
.text:00003A4A                 push    edx             ; unsigned int
.text:00003A4B                 lea     ecx, [ebp+var_24] ; this
.text:00003A4E                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00003A53                 push    eax
.text:00003A54                 lea     ecx, [ebp+var_38]
.text:00003A57                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00003A5C
.text:00003A5C loc_3A5C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+CAj
.text:00003A5C                 lea     ecx, [ebp+var_50]
.text:00003A5F                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:00003A64                 mov     byte ptr [ebp+var_4], 2
.text:00003A68                 mov     [ebp+var_55], 0
.text:00003A6C                 mov     eax, [ebp+arg_0]
.text:00003A6F                 mov     ecx, [eax]
.text:00003A71                 add     ecx, 8
.text:00003A74                 call    ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size(void)
.text:00003A79                 push    eax
.text:00003A7A                 lea     ecx, [ebp+var_60]
.text:00003A7D                 call    ??0?$CObjArray@_N@@QAE@I@Z ; CObjArray<bool>::CObjArray<bool>(uint)
.text:00003A82                 mov     byte ptr [ebp+var_4], 3
.text:00003A86                 mov     [ebp+var_68], 0
.text:00003A8D                 jmp     short loc_3A98
.text:00003A8F ; ---------------------------------------------------------------------------
.text:00003A8F
.text:00003A8F loc_3A8F:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+141j
.text:00003A8F                 mov     ecx, [ebp+var_68]
.text:00003A92                 add     ecx, 1
.text:00003A95                 mov     [ebp+var_68], ecx
.text:00003A98
.text:00003A98 loc_3A98:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+115j
.text:00003A98                 mov     edx, [ebp+arg_0]
.text:00003A9B                 mov     ecx, [edx]
.text:00003A9D                 add     ecx, 8
.text:00003AA0                 call    ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size(void)
.text:00003AA5                 cmp     [ebp+var_68], eax
.text:00003AA8                 jnb     short loc_3ABB
.text:00003AAA                 lea     ecx, [ebp+var_60]
.text:00003AAD                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00003AB2                 mov     ecx, [ebp+var_68]
.text:00003AB5                 mov     byte ptr [eax+ecx], 0
.text:00003AB9                 jmp     short loc_3A8F
.text:00003ABB ; ---------------------------------------------------------------------------
.text:00003ABB
.text:00003ABB loc_3ABB:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+130j
.text:00003ABB                 mov     edx, [ebp+arg_0]
.text:00003ABE                 movzx   eax, byte ptr [edx+1Dh]
.text:00003AC2                 test    eax, eax
.text:00003AC4                 jz      short loc_3ADD
.text:00003AC6                 mov     ecx, [ebp+arg_0]
.text:00003AC9                 mov     edx, [ecx+20h]
.text:00003ACC                 mov     [ebp+var_75C], edx
.text:00003AD2                 mov     eax, [ecx+24h]
.text:00003AD5                 mov     [ebp+var_758], eax
.text:00003ADB                 jmp     short loc_3AF1
.text:00003ADD ; ---------------------------------------------------------------------------
.text:00003ADD
.text:00003ADD loc_3ADD:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+14Cj
.text:00003ADD                 mov     [ebp+var_75C], 400000h
.text:00003AE7                 mov     [ebp+var_758], 0
.text:00003AF1
.text:00003AF1 loc_3AF1:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+163j
.text:00003AF1                 mov     ecx, [ebp+var_75C]
.text:00003AF7                 mov     [ebp+var_70], ecx
.text:00003AFA                 mov     edx, [ebp+var_758]
.text:00003B00                 mov     [ebp+var_6C], edx
.text:00003B03                 mov     [ebp+var_71], 0
.text:00003B07                 mov     [ebp+var_72], 0
.text:00003B0B                 mov     [ebp+var_78], 0
.text:00003B12                 mov     eax, [ebp+arg_0]
.text:00003B15                 mov     ecx, [eax+8]
.text:00003B18                 mov     [ebp+var_7C], ecx
.text:00003B1B                 cmp     [ebp+var_7C], 0
.text:00003B1F                 jl      short loc_3B50
.text:00003B21                 mov     [ebp+var_72], 1
.text:00003B25                 mov     edx, [ebp+var_7C]
.text:00003B28                 push    edx
.text:00003B29                 lea     ecx, [ebp+var_50]
.text:00003B2C                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:00003B31                 mov     [ebp+var_78], 1
.text:00003B38                 lea     ecx, [ebp+var_60]
.text:00003B3B                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00003B40                 mov     ecx, [ebp+var_7C]
.text:00003B43                 mov     byte ptr [eax+ecx], 1
.text:00003B47                 mov     [ebp+var_55], 1
.text:00003B4B                 jmp     loc_42DC
.text:00003B50 ; ---------------------------------------------------------------------------
.text:00003B50
.text:00003B50 loc_3B50:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1A7j
.text:00003B50                 mov     [ebp+var_80], 0
.text:00003B57                 mov     [ebp+var_81], 0
.text:00003B5E                 mov     [ebp+var_88], 0
.text:00003B68                 jmp     short loc_3B79
.text:00003B6A ; ---------------------------------------------------------------------------
.text:00003B6A
.text:00003B6A loc_3B6A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+25Fj
.text:00003B6A                                         ; CArc::OpenStream2(COpenOptions const &)+277j ...
.text:00003B6A                 mov     edx, [ebp+var_88]
.text:00003B70                 add     edx, 1
.text:00003B73                 mov     [ebp+var_88], edx
.text:00003B79
.text:00003B79 loc_3B79:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1F0j
.text:00003B79                 mov     eax, [ebp+arg_0]
.text:00003B7C                 mov     ecx, [eax]
.text:00003B7E                 add     ecx, 8
.text:00003B81                 call    ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size(void)
.text:00003B86                 cmp     [ebp+var_88], eax
.text:00003B8C                 jnb     loc_3C71
.text:00003B92                 mov     ecx, [ebp+var_88]
.text:00003B98                 push    ecx
.text:00003B99                 mov     edx, [ebp+arg_0]
.text:00003B9C                 mov     ecx, [edx]
.text:00003B9E                 add     ecx, 8
.text:00003BA1                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:00003BA6                 mov     [ebp+var_8C], eax
.text:00003BAC                 mov     eax, [ebp+var_14]
.text:00003BAF                 movzx   ecx, byte ptr [eax+0DFh]
.text:00003BB6                 test    ecx, ecx
.text:00003BB8                 jnz     short loc_3BC5
.text:00003BBA                 mov     edx, [ebp+arg_0]
.text:00003BBD                 movzx   eax, byte ptr [edx+19h]
.text:00003BC1                 test    eax, eax
.text:00003BC3                 jnz     short loc_3BD9
.text:00003BC5
.text:00003BC5 loc_3BC5:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+240j
.text:00003BC5                 mov     ecx, [ebp+var_8C] ; this
.text:00003BCB                 call    ?IsSplit@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::IsSplit(void)
.text:00003BD0                 movzx   ecx, al
.text:00003BD3                 test    ecx, ecx
.text:00003BD5                 jz      short loc_3BD9
.text:00003BD7                 jmp     short loc_3B6A
.text:00003BD9 ; ---------------------------------------------------------------------------
.text:00003BD9
.text:00003BD9 loc_3BD9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+24Bj
.text:00003BD9                                         ; CArc::OpenStream2(COpenOptions const &)+25Dj
.text:00003BD9                 mov     edx, [ebp+var_88]
.text:00003BDF                 push    edx
.text:00003BE0                 mov     eax, [ebp+arg_0]
.text:00003BE3                 mov     ecx, [eax+2Ch]
.text:00003BE6                 call    ?FindInSorted@?$CRecordVector@H@@QBEHH@Z ; CRecordVector<int>::FindInSorted(int)
.text:00003BEB                 test    eax, eax
.text:00003BED                 jl      short loc_3BF4
.text:00003BEF                 jmp     loc_3B6A
.text:00003BF4 ; ---------------------------------------------------------------------------
.text:00003BF4
.text:00003BF4 loc_3BF4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+275j
.text:00003BF4                 mov     ecx, [ebp+var_8C]
.text:00003BFA                 push    ecx             ; CArcInfoEx *
.text:00003BFB                 call    ?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z ; IsPreArcFormat(CArcInfoEx const &)
.text:00003C00                 movzx   edx, al
.text:00003C03                 test    edx, edx
.text:00003C05                 jz      short loc_3C0E
.text:00003C07                 mov     [ebp+var_81], 1
.text:00003C0E
.text:00003C0E loc_3C0E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+28Dj
.text:00003C0E                 lea     eax, [ebp+var_38]
.text:00003C11                 push    eax             ; struct UString *
.text:00003C12                 mov     ecx, [ebp+var_8C] ; this
.text:00003C18                 call    ?FindExtension@CArcInfoEx@@QBEHABVUString@@@Z ; CArcInfoEx::FindExtension(UString const &)
.text:00003C1D                 test    eax, eax
.text:00003C1F                 jl      short loc_3C5D
.text:00003C21                 mov     ecx, [ebp+var_80]
.text:00003C24                 mov     [ebp+var_760], ecx
.text:00003C2A                 mov     edx, [ebp+var_80]
.text:00003C2D                 add     edx, 1
.text:00003C30                 mov     [ebp+var_80], edx
.text:00003C33                 mov     eax, [ebp+var_88]
.text:00003C39                 push    eax
.text:00003C3A                 mov     ecx, [ebp+var_760]
.text:00003C40                 push    ecx
.text:00003C41                 lea     ecx, [ebp+var_50]
.text:00003C44                 call    ?Insert@?$CRecordVector@H@@QAEXIH@Z ; CRecordVector<int>::Insert(uint,int)
.text:00003C49                 lea     ecx, [ebp+var_60]
.text:00003C4C                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00003C51                 mov     edx, [ebp+var_88]
.text:00003C57                 mov     byte ptr [eax+edx], 1
.text:00003C5B                 jmp     short loc_3C6C
.text:00003C5D ; ---------------------------------------------------------------------------
.text:00003C5D
.text:00003C5D loc_3C5D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2A7j
.text:00003C5D                 mov     eax, [ebp+var_88]
.text:00003C63                 push    eax
.text:00003C64                 lea     ecx, [ebp+var_50]
.text:00003C67                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:00003C6C
.text:00003C6C loc_3C6C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2E3j
.text:00003C6C                 jmp     loc_3B6A
.text:00003C71 ; ---------------------------------------------------------------------------
.text:00003C71
.text:00003C71 loc_3C71:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+214j
.text:00003C71                 mov     ecx, [ebp+arg_0]
.text:00003C74                 cmp     dword ptr [ecx+30h], 0
.text:00003C78                 jnz     short loc_3CD2
.text:00003C7A                 cmp     [ebp+var_80], 1
.text:00003C7E                 jz      short loc_3CC8
.text:00003C80                 mov     [ebp+var_664], 80004001h
.text:00003C8A                 mov     byte ptr [ebp+var_4], 2
.text:00003C8E                 lea     ecx, [ebp+var_60]
.text:00003C91                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003C96                 mov     byte ptr [ebp+var_4], 1
.text:00003C9A                 lea     ecx, [ebp+var_50]
.text:00003C9D                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00003CA2                 mov     byte ptr [ebp+var_4], 0
.text:00003CA6                 lea     ecx, [ebp+var_38] ; this
.text:00003CA9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003CAE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003CB5                 lea     ecx, [ebp+var_24] ; this
.text:00003CB8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003CBD                 mov     eax, [ebp+var_664]
.text:00003CC3                 jmp     loc_8F16
.text:00003CC8 ; ---------------------------------------------------------------------------
.text:00003CC8
.text:00003CC8 loc_3CC8:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+306j
.text:00003CC8                 push    1
.text:00003CCA                 lea     ecx, [ebp+var_50]
.text:00003CCD                 call    ?DeleteFrom@?$CRecordVector@H@@QAEXI@Z ; CRecordVector<int>::DeleteFrom(uint)
.text:00003CD2
.text:00003CD2 loc_3CD2:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+300j
.text:00003CD2                 mov     edx, [ebp+arg_0]
.text:00003CD5                 cmp     dword ptr [edx+30h], 0
.text:00003CD9                 jz      loc_41AA
.text:00003CDF                 lea     ecx, [ebp+var_50]
.text:00003CE2                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:00003CE7                 cmp     eax, 2
.text:00003CEA                 jb      loc_41AA
.text:00003CF0                 mov     esi, esp
.text:00003CF2                 push    0
.text:00003CF4                 push    0               ; int
.text:00003CF6                 push    0               ; int
.text:00003CF8                 push    0               ; char
.text:00003CFA                 mov     eax, [ebp+arg_0]
.text:00003CFD                 mov     ecx, [eax+30h]
.text:00003D00                 mov     edx, [ebp+arg_0]
.text:00003D03                 mov     eax, [edx+30h]
.text:00003D06                 mov     ecx, [ecx]
.text:00003D08                 push    eax
.text:00003D09                 mov     edx, [ecx+10h]
.text:00003D0C                 call    edx
.text:00003D0E                 cmp     esi, esp
.text:00003D10                 call    __RTC_CheckEsp
.text:00003D15                 mov     [ebp+var_90], eax
.text:00003D1B                 cmp     [ebp+var_90], 0
.text:00003D22                 jz      short loc_3D6E
.text:00003D24                 mov     eax, [ebp+var_90]
.text:00003D2A                 mov     [ebp+var_668], eax
.text:00003D30                 mov     byte ptr [ebp+var_4], 2
.text:00003D34                 lea     ecx, [ebp+var_60]
.text:00003D37                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003D3C                 mov     byte ptr [ebp+var_4], 1
.text:00003D40                 lea     ecx, [ebp+var_50]
.text:00003D43                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00003D48                 mov     byte ptr [ebp+var_4], 0
.text:00003D4C                 lea     ecx, [ebp+var_38] ; this
.text:00003D4F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003D54                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003D5B                 lea     ecx, [ebp+var_24] ; this
.text:00003D5E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003D63                 mov     eax, [ebp+var_668]
.text:00003D69                 jmp     loc_8F16
.text:00003D6E ; ---------------------------------------------------------------------------
.text:00003D6E
.text:00003D6E loc_3D6E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3AAj
.text:00003D6E                 lea     ecx, [ebp+var_9C]
.text:00003D74                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00003D79                 mov     byte ptr [ebp+var_4], 4
.text:00003D7D                 lea     ecx, [ebp+var_B0]
.text:00003D83                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:00003D88                 mov     byte ptr [ebp+var_4], 5
.text:00003D8C                 cmp     [ebp+var_80], 0
.text:00003D90                 jz      short loc_3DA2
.text:00003D92                 lea     ecx, [ebp+var_38]
.text:00003D95                 push    ecx             ; UString *
.text:00003D96                 call    ?IsExeExt@@YG_NABVUString@@@Z ; IsExeExt(UString const &)
.text:00003D9B                 movzx   edx, al
.text:00003D9E                 test    edx, edx
.text:00003DA0                 jz      short loc_3DA7
.text:00003DA2
.text:00003DA2 loc_3DA2:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+418j
.text:00003DA2                 jmp     loc_411E
.text:00003DA7 ; ---------------------------------------------------------------------------
.text:00003DA7
.text:00003DA7 loc_3DA7:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+428j
.text:00003DA7                 push    offset $SG74318 ; "000"
.text:00003DAC                 lea     ecx, [ebp+var_38] ; this
.text:00003DAF                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00003DB4                 movzx   eax, al
.text:00003DB7                 test    eax, eax
.text:00003DB9                 jnz     short loc_3DD3
.text:00003DBB                 push    offset $SG74319 ; "001"
.text:00003DC0                 lea     ecx, [ebp+var_38] ; this
.text:00003DC3                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00003DC8                 movzx   ecx, al
.text:00003DCB                 test    ecx, ecx
.text:00003DCD                 jz      loc_3FAA
.text:00003DD3
.text:00003DD3 loc_3DD3:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+441j
.text:00003DD3                 push    offset $SG74322 ; "rar"
.text:00003DD8                 sub     esp, 0Ch
.text:00003DDB                 mov     ecx, esp
.text:00003DDD                 mov     [ebp+var_66C], esp
.text:00003DE3                 lea     edx, [ebp+var_50]
.text:00003DE6                 push    edx
.text:00003DE7                 call    ??0?$CRecordVector@H@@QAE@ABV0@@Z ; CRecordVector<int>::CRecordVector<int>(CRecordVector<int> const &)
.text:00003DEC                 mov     [ebp+var_764], eax
.text:00003DF2                 mov     eax, [ebp+arg_0]
.text:00003DF5                 mov     ecx, [eax]
.text:00003DF7                 push    ecx             ; int
.text:00003DF8                 call    ?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z ; FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *)
.text:00003DFD                 mov     [ebp+var_768], eax
.text:00003E03                 mov     edx, [ebp+var_768]
.text:00003E09                 mov     [ebp+var_B8], edx
.text:00003E0F                 cmp     [ebp+var_B8], 0
.text:00003E16                 jl      loc_3FA5
.text:00003E1C                 mov     [ebp+var_BC], 400h
.text:00003E26                 push    400h
.text:00003E2B                 lea     ecx, [ebp+var_9C]
.text:00003E31                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00003E36                 mov     [ebp+var_C4], 400h
.text:00003E40                 lea     eax, [ebp+var_C4]
.text:00003E46                 push    eax             ; unsigned int *
.text:00003E47                 lea     ecx, [ebp+var_9C]
.text:00003E4D                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00003E52                 push    eax             ; void *
.text:00003E53                 mov     ecx, [ebp+arg_0]
.text:00003E56                 mov     edx, [ecx+30h]
.text:00003E59                 push    edx             ; struct ISequentialInStream *
.text:00003E5A                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00003E5F                 mov     [ebp+var_CC], eax
.text:00003E65                 cmp     [ebp+var_CC], 0
.text:00003E6C                 jz      short loc_3ED6
.text:00003E6E                 mov     eax, [ebp+var_CC]
.text:00003E74                 mov     [ebp+var_670], eax
.text:00003E7A                 mov     byte ptr [ebp+var_4], 4
.text:00003E7E                 lea     ecx, [ebp+var_B0]
.text:00003E84                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00003E89                 mov     byte ptr [ebp+var_4], 3
.text:00003E8D                 lea     ecx, [ebp+var_9C]
.text:00003E93                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00003E98                 mov     byte ptr [ebp+var_4], 2
.text:00003E9C                 lea     ecx, [ebp+var_60]
.text:00003E9F                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00003EA4                 mov     byte ptr [ebp+var_4], 1
.text:00003EA8                 lea     ecx, [ebp+var_50]
.text:00003EAB                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00003EB0                 mov     byte ptr [ebp+var_4], 0
.text:00003EB4                 lea     ecx, [ebp+var_38] ; this
.text:00003EB7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003EBC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003EC3                 lea     ecx, [ebp+var_24] ; this
.text:00003EC6                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003ECB                 mov     eax, [ebp+var_670]
.text:00003ED1                 jmp     loc_8F16
.text:00003ED6 ; ---------------------------------------------------------------------------
.text:00003ED6
.text:00003ED6 loc_3ED6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4F4j
.text:00003ED6                 cmp     [ebp+var_C4], 10h
.text:00003EDD                 jb      loc_3FA5
.text:00003EE3                 lea     ecx, [ebp+var_9C]
.text:00003EE9                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00003EEE                 mov     [ebp+var_D0], eax
.text:00003EF4                 mov     [ebp+var_DC], 52h ; 'R'
.text:00003EFB                 mov     [ebp+var_DB], 61h ; 'a'
.text:00003F02                 mov     [ebp+var_DA], 72h ; 'r'
.text:00003F09                 mov     [ebp+var_D9], 21h ; '!'
.text:00003F10                 mov     [ebp+var_D8], 1Ah
.text:00003F17                 mov     [ebp+var_D7], 7
.text:00003F1E                 mov     [ebp+var_D6], 0
.text:00003F25                 push    7
.text:00003F27                 lea     ecx, [ebp+var_DC]
.text:00003F2D                 push    ecx
.text:00003F2E                 mov     edx, [ebp+var_D0]
.text:00003F34                 push    edx
.text:00003F35                 call    ?TestSignature@@YG_NPBE0I@Z ; TestSignature(uchar const *,uchar const *,uint)
.text:00003F3A                 movzx   eax, al
.text:00003F3D                 test    eax, eax
.text:00003F3F                 jz      short loc_3FA5
.text:00003F41                 mov     ecx, [ebp+var_D0]
.text:00003F47                 movzx   edx, byte ptr [ecx+9]
.text:00003F4B                 cmp     edx, 73h ; 's'
.text:00003F4E                 jnz     short loc_3FA5
.text:00003F50                 mov     eax, [ebp+var_D0]
.text:00003F56                 movzx   ecx, byte ptr [eax+0Ah]
.text:00003F5A                 and     ecx, 1
.text:00003F5D                 jz      short loc_3FA5
.text:00003F5F                 mov     edx, [ebp+var_B8]
.text:00003F65                 push    edx
.text:00003F66                 lea     ecx, [ebp+var_50]
.text:00003F69                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00003F6E                 mov     eax, [eax]
.text:00003F70                 push    eax
.text:00003F71                 lea     ecx, [ebp+var_B0]
.text:00003F77                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:00003F7C                 mov     ecx, [ebp+var_B8]
.text:00003F82                 push    ecx
.text:00003F83                 lea     ecx, [ebp+var_50]
.text:00003F86                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00003F8B                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00003F91                 mov     edx, [ebp+var_B8]
.text:00003F97                 cmp     edx, [ebp+var_80]
.text:00003F9A                 jl      short loc_3FA5
.text:00003F9C                 mov     eax, [ebp+var_80]
.text:00003F9F                 add     eax, 1
.text:00003FA2                 mov     [ebp+var_80], eax
.text:00003FA5
.text:00003FA5 loc_3FA5:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+49Ej
.text:00003FA5                                         ; CArc::OpenStream2(COpenOptions const &)+565j ...
.text:00003FA5                 jmp     loc_411E
.text:00003FAA ; ---------------------------------------------------------------------------
.text:00003FAA
.text:00003FAA loc_3FAA:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+455j
.text:00003FAA                 mov     [ebp+var_E4], 400h
.text:00003FB4                 push    400h
.text:00003FB9                 lea     ecx, [ebp+var_9C]
.text:00003FBF                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00003FC4                 mov     [ebp+var_EC], 400h
.text:00003FCE                 lea     ecx, [ebp+var_EC]
.text:00003FD4                 push    ecx             ; unsigned int *
.text:00003FD5                 lea     ecx, [ebp+var_9C]
.text:00003FDB                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00003FE0                 push    eax             ; void *
.text:00003FE1                 mov     edx, [ebp+arg_0]
.text:00003FE4                 mov     eax, [edx+30h]
.text:00003FE7                 push    eax             ; struct ISequentialInStream *
.text:00003FE8                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00003FED                 mov     [ebp+var_F4], eax
.text:00003FF3                 cmp     [ebp+var_F4], 0
.text:00003FFA                 jz      short loc_4064
.text:00003FFC                 mov     ecx, [ebp+var_F4]
.text:00004002                 mov     [ebp+var_674], ecx
.text:00004008                 mov     byte ptr [ebp+var_4], 4
.text:0000400C                 lea     ecx, [ebp+var_B0]
.text:00004012                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004017                 mov     byte ptr [ebp+var_4], 3
.text:0000401B                 lea     ecx, [ebp+var_9C]
.text:00004021                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00004026                 mov     byte ptr [ebp+var_4], 2
.text:0000402A                 lea     ecx, [ebp+var_60]
.text:0000402D                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004032                 mov     byte ptr [ebp+var_4], 1
.text:00004036                 lea     ecx, [ebp+var_50]
.text:00004039                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000403E                 mov     byte ptr [ebp+var_4], 0
.text:00004042                 lea     ecx, [ebp+var_38] ; this
.text:00004045                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000404A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004051                 lea     ecx, [ebp+var_24] ; this
.text:00004054                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004059                 mov     eax, [ebp+var_674]
.text:0000405F                 jmp     loc_8F16
.text:00004064 ; ---------------------------------------------------------------------------
.text:00004064
.text:00004064 loc_4064:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+682j
.text:00004064                 cmp     [ebp+var_EC], 0
.text:0000406B                 jnz     short loc_40D3
.text:0000406D                 mov     [ebp+var_678], 1
.text:00004077                 mov     byte ptr [ebp+var_4], 4
.text:0000407B                 lea     ecx, [ebp+var_B0]
.text:00004081                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004086                 mov     byte ptr [ebp+var_4], 3
.text:0000408A                 lea     ecx, [ebp+var_9C]
.text:00004090                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00004095                 mov     byte ptr [ebp+var_4], 2
.text:00004099                 lea     ecx, [ebp+var_60]
.text:0000409C                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000040A1                 mov     byte ptr [ebp+var_4], 1
.text:000040A5                 lea     ecx, [ebp+var_50]
.text:000040A8                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000040AD                 mov     byte ptr [ebp+var_4], 0
.text:000040B1                 lea     ecx, [ebp+var_38] ; this
.text:000040B4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000040B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000040C0                 lea     ecx, [ebp+var_24] ; this
.text:000040C3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000040C8                 mov     eax, [ebp+var_678]
.text:000040CE                 jmp     loc_8F16
.text:000040D3 ; ---------------------------------------------------------------------------
.text:000040D3
.text:000040D3 loc_40D3:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+6F3j
.text:000040D3                 push    0
.text:000040D5                 push    0
.text:000040D7                 lea     edx, [ebp+var_B0]
.text:000040DD                 push    edx
.text:000040DE                 mov     eax, [ebp+var_80]
.text:000040E1                 push    eax
.text:000040E2                 lea     ecx, [ebp+var_50]
.text:000040E5                 push    ecx
.text:000040E6                 mov     edx, [ebp+arg_0]
.text:000040E9                 mov     eax, [edx]
.text:000040EB                 push    eax
.text:000040EC                 call    ?MakeCheckOrder@@YGXPAVCCodecs@@AAV?$CRecordVector@H@@I1PBEI@Z ; MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)
.text:000040F1                 mov     ecx, [ebp+var_EC]
.text:000040F7                 push    ecx
.text:000040F8                 lea     ecx, [ebp+var_9C]
.text:000040FE                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00004103                 push    eax
.text:00004104                 lea     edx, [ebp+var_B0]
.text:0000410A                 push    edx
.text:0000410B                 mov     eax, [ebp+var_80]
.text:0000410E                 push    eax
.text:0000410F                 lea     ecx, [ebp+var_50]
.text:00004112                 push    ecx
.text:00004113                 mov     edx, [ebp+arg_0]
.text:00004116                 mov     eax, [edx]
.text:00004118                 push    eax
.text:00004119                 call    ?MakeCheckOrder@@YGXPAVCCodecs@@AAV?$CRecordVector@H@@I1PBEI@Z ; MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)
.text:0000411E
.text:0000411E loc_411E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &):loc_3DA2j
.text:0000411E                                         ; CArc::OpenStream2(COpenOptions const &):loc_3FA5j
.text:0000411E                 mov     [ebp+var_F8], 0
.text:00004128                 jmp     short loc_4139
.text:0000412A ; ---------------------------------------------------------------------------
.text:0000412A
.text:0000412A loc_412A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &):loc_417Bj
.text:0000412A                 mov     ecx, [ebp+var_F8]
.text:00004130                 add     ecx, 1
.text:00004133                 mov     [ebp+var_F8], ecx
.text:00004139
.text:00004139 loc_4139:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+7B0j
.text:00004139                 lea     ecx, [ebp+var_50]
.text:0000413C                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:00004141                 cmp     [ebp+var_F8], eax
.text:00004147                 jnb     short loc_417D
.text:00004149                 mov     edx, [ebp+var_F8]
.text:0000414F                 push    edx
.text:00004150                 lea     ecx, [ebp+var_50]
.text:00004153                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00004158                 mov     eax, [eax]
.text:0000415A                 mov     [ebp+var_FC], eax
.text:00004160                 cmp     [ebp+var_FC], 0FFFFFFFFh
.text:00004167                 jz      short loc_417B
.text:00004169                 mov     ecx, [ebp+var_FC]
.text:0000416F                 push    ecx
.text:00004170                 lea     ecx, [ebp+var_B0]
.text:00004176                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:0000417B
.text:0000417B loc_417B:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+7EFj
.text:0000417B                 jmp     short loc_412A
.text:0000417D ; ---------------------------------------------------------------------------
.text:0000417D
.text:0000417D loc_417D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+7CFj
.text:0000417D                 lea     edx, [ebp+var_B0]
.text:00004183                 push    edx
.text:00004184                 lea     ecx, [ebp+var_50]
.text:00004187                 call    ??4?$CRecordVector@H@@QAEAAV0@ABV0@@Z ; CRecordVector<int>::operator=(CRecordVector<int> const &)
.text:0000418C                 mov     byte ptr [ebp+var_4], 4
.text:00004190                 lea     ecx, [ebp+var_B0]
.text:00004196                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000419B                 mov     byte ptr [ebp+var_4], 3
.text:0000419F                 lea     ecx, [ebp+var_9C]
.text:000041A5                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000041AA
.text:000041AA loc_41AA:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+361j
.text:000041AA                                         ; CArc::OpenStream2(COpenOptions const &)+372j
.text:000041AA                 lea     ecx, [ebp+var_50]
.text:000041AD                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:000041B2                 cmp     eax, 2
.text:000041B5                 jb      loc_42A6
.text:000041BB                 push    offset $SG74353 ; "iso"
.text:000041C0                 sub     esp, 0Ch
.text:000041C3                 mov     ecx, esp
.text:000041C5                 mov     [ebp+var_67C], esp
.text:000041CB                 lea     eax, [ebp+var_50]
.text:000041CE                 push    eax
.text:000041CF                 call    ??0?$CRecordVector@H@@QAE@ABV0@@Z ; CRecordVector<int>::CRecordVector<int>(CRecordVector<int> const &)
.text:000041D4                 mov     [ebp+var_76C], eax
.text:000041DA                 mov     ecx, [ebp+arg_0]
.text:000041DD                 mov     edx, [ecx]
.text:000041DF                 push    edx             ; int
.text:000041E0                 call    ?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z ; FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *)
.text:000041E5                 mov     [ebp+var_770], eax
.text:000041EB                 mov     eax, [ebp+var_770]
.text:000041F1                 mov     [ebp+var_100], eax
.text:000041F7                 push    offset $SG74356 ; "udf"
.text:000041FC                 sub     esp, 0Ch
.text:000041FF                 mov     ecx, esp
.text:00004201                 mov     [ebp+var_680], esp
.text:00004207                 lea     edx, [ebp+var_50]
.text:0000420A                 push    edx
.text:0000420B                 call    ??0?$CRecordVector@H@@QAE@ABV0@@Z ; CRecordVector<int>::CRecordVector<int>(CRecordVector<int> const &)
.text:00004210                 mov     [ebp+var_774], eax
.text:00004216                 mov     eax, [ebp+arg_0]
.text:00004219                 mov     ecx, [eax]
.text:0000421B                 push    ecx             ; int
.text:0000421C                 call    ?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z ; FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *)
.text:00004221                 mov     [ebp+var_778], eax
.text:00004227                 mov     edx, [ebp+var_778]
.text:0000422D                 mov     [ebp+var_104], edx
.text:00004233                 mov     eax, [ebp+var_104]
.text:00004239                 cmp     eax, [ebp+var_100]
.text:0000423F                 jle     short loc_42A6
.text:00004241                 cmp     [ebp+var_100], 0
.text:00004248                 jl      short loc_42A6
.text:0000424A                 mov     ecx, [ebp+var_100]
.text:00004250                 push    ecx
.text:00004251                 lea     ecx, [ebp+var_50]
.text:00004254                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00004259                 mov     edx, [eax]
.text:0000425B                 mov     [ebp+var_108], edx
.text:00004261                 mov     eax, [ebp+var_104]
.text:00004267                 push    eax
.text:00004268                 lea     ecx, [ebp+var_50]
.text:0000426B                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00004270                 mov     ecx, [eax]
.text:00004272                 mov     [ebp+var_10C], ecx
.text:00004278                 mov     edx, [ebp+var_104]
.text:0000427E                 push    edx
.text:0000427F                 lea     ecx, [ebp+var_50]
.text:00004282                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00004287                 mov     ecx, [ebp+var_108]
.text:0000428D                 mov     [eax], ecx
.text:0000428F                 mov     edx, [ebp+var_100]
.text:00004295                 push    edx
.text:00004296                 lea     ecx, [ebp+var_50]
.text:00004299                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:0000429E                 mov     ecx, [ebp+var_10C]
.text:000042A4                 mov     [eax], ecx
.text:000042A6
.text:000042A6 loc_42A6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+83Dj
.text:000042A6                                         ; CArc::OpenStream2(COpenOptions const &)+8C7j ...
.text:000042A6                 mov     edx, [ebp+var_80]
.text:000042A9                 mov     [ebp+var_78], edx
.text:000042AC                 cmp     [ebp+var_78], 0
.text:000042B0                 jz      short loc_42C9
.text:000042B2                 movzx   eax, [ebp+var_81]
.text:000042B9                 test    eax, eax
.text:000042BB                 jnz     short loc_42C9
.text:000042BD                 mov     [ebp+var_77C], 0
.text:000042C7                 jmp     short loc_42D3
.text:000042C9 ; ---------------------------------------------------------------------------
.text:000042C9
.text:000042C9 loc_42C9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+938j
.text:000042C9                                         ; CArc::OpenStream2(COpenOptions const &)+943j
.text:000042C9                 mov     [ebp+var_77C], 1
.text:000042D3
.text:000042D3 loc_42D3:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+94Fj
.text:000042D3                 mov     cl, byte ptr [ebp+var_77C]
.text:000042D9                 mov     [ebp+var_71], cl
.text:000042DC
.text:000042DC loc_42DC:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1D3j
.text:000042DC                 mov     dword ptr [ebp+var_118], 0
.text:000042E6                 mov     dword ptr [ebp+var_118+4], 0
.text:000042F0                 mov     edx, [ebp+arg_0]
.text:000042F3                 cmp     dword ptr [edx+30h], 0
.text:000042F7                 jz      loc_43FE
.text:000042FD                 mov     esi, esp
.text:000042FF                 lea     eax, [ebp+var_118]
.text:00004305                 push    eax
.text:00004306                 push    2
.text:00004308                 push    0
.text:0000430A                 push    0
.text:0000430C                 mov     ecx, [ebp+arg_0]
.text:0000430F                 mov     edx, [ecx+30h]
.text:00004312                 mov     eax, [ebp+arg_0]
.text:00004315                 mov     ecx, [eax+30h]
.text:00004318                 mov     edx, [edx]
.text:0000431A                 push    ecx
.text:0000431B                 mov     eax, [edx+10h]
.text:0000431E                 call    eax
.text:00004320                 cmp     esi, esp
.text:00004322                 call    __RTC_CheckEsp
.text:00004327                 mov     [ebp+var_120], eax
.text:0000432D                 cmp     [ebp+var_120], 0
.text:00004334                 jz      short loc_4380
.text:00004336                 mov     ecx, [ebp+var_120]
.text:0000433C                 mov     [ebp+var_684], ecx
.text:00004342                 mov     byte ptr [ebp+var_4], 2
.text:00004346                 lea     ecx, [ebp+var_60]
.text:00004349                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000434E                 mov     byte ptr [ebp+var_4], 1
.text:00004352                 lea     ecx, [ebp+var_50]
.text:00004355                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000435A                 mov     byte ptr [ebp+var_4], 0
.text:0000435E                 lea     ecx, [ebp+var_38] ; this
.text:00004361                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004366                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000436D                 lea     ecx, [ebp+var_24] ; this
.text:00004370                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004375                 mov     eax, [ebp+var_684]
.text:0000437B                 jmp     loc_8F16
.text:00004380 ; ---------------------------------------------------------------------------
.text:00004380
.text:00004380 loc_4380:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+9BCj
.text:00004380                 mov     esi, esp
.text:00004382                 push    0
.text:00004384                 push    0
.text:00004386                 push    0
.text:00004388                 push    0
.text:0000438A                 mov     edx, [ebp+arg_0]
.text:0000438D                 mov     eax, [edx+30h]
.text:00004390                 mov     ecx, [ebp+arg_0]
.text:00004393                 mov     edx, [ecx+30h]
.text:00004396                 mov     eax, [eax]
.text:00004398                 push    edx
.text:00004399                 mov     ecx, [eax+10h]
.text:0000439C                 call    ecx
.text:0000439E                 cmp     esi, esp
.text:000043A0                 call    __RTC_CheckEsp
.text:000043A5                 mov     [ebp+var_124], eax
.text:000043AB                 cmp     [ebp+var_124], 0
.text:000043B2                 jz      short loc_43FE
.text:000043B4                 mov     edx, [ebp+var_124]
.text:000043BA                 mov     [ebp+var_688], edx
.text:000043C0                 mov     byte ptr [ebp+var_4], 2
.text:000043C4                 lea     ecx, [ebp+var_60]
.text:000043C7                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000043CC                 mov     byte ptr [ebp+var_4], 1
.text:000043D0                 lea     ecx, [ebp+var_50]
.text:000043D3                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000043D8                 mov     byte ptr [ebp+var_4], 0
.text:000043DC                 lea     ecx, [ebp+var_38] ; this
.text:000043DF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000043E4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000043EB                 lea     ecx, [ebp+var_24] ; this
.text:000043EE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000043F3                 mov     eax, [ebp+var_688]
.text:000043F9                 jmp     loc_8F16
.text:000043FE ; ---------------------------------------------------------------------------
.text:000043FE
.text:000043FE loc_43FE:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+97Fj
.text:000043FE                                         ; CArc::OpenStream2(COpenOptions const &)+A3Aj
.text:000043FE                 mov     eax, [ebp+var_14]
.text:00004401                 mov     ecx, dword ptr [ebp+var_118]
.text:00004407                 mov     [eax+0C0h], ecx
.text:0000440D                 mov     edx, dword ptr [ebp+var_118+4]
.text:00004413                 mov     [eax+0C4h], edx
.text:00004419                 mov     eax, [ebp+arg_0]
.text:0000441C                 mov     ecx, [eax]
.text:0000441E                 add     ecx, 8
.text:00004421                 call    ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size(void)
.text:00004426                 push    eax
.text:00004427                 lea     ecx, [ebp+var_12C]
.text:0000442D                 call    ??0?$CObjArray@_N@@QAE@I@Z ; CObjArray<bool>::CObjArray<bool>(uint)
.text:00004432                 mov     byte ptr [ebp+var_4], 6
.text:00004436                 mov     [ebp+var_134], 0
.text:00004440                 jmp     short loc_4451
.text:00004442 ; ---------------------------------------------------------------------------
.text:00004442
.text:00004442 loc_4442:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+B03j
.text:00004442                 mov     ecx, [ebp+var_134]
.text:00004448                 add     ecx, 1
.text:0000444B                 mov     [ebp+var_134], ecx
.text:00004451
.text:00004451 loc_4451:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+AC8j
.text:00004451                 mov     edx, [ebp+arg_0]
.text:00004454                 mov     ecx, [edx]
.text:00004456                 add     ecx, 8
.text:00004459                 call    ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size(void)
.text:0000445E                 cmp     [ebp+var_134], eax
.text:00004464                 jnb     short loc_447D
.text:00004466                 lea     ecx, [ebp+var_12C]
.text:0000446C                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00004471                 mov     ecx, [ebp+var_134]
.text:00004477                 mov     byte ptr [eax+ecx], 0
.text:0000447B                 jmp     short loc_4442
.text:0000447D ; ---------------------------------------------------------------------------
.text:0000447D
.text:0000447D loc_447D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+AECj
.text:0000447D                 mov     edx, [ebp+arg_0]
.text:00004480                 add     edx, 8
.text:00004483                 mov     [ebp+var_138], edx
.text:00004489                 mov     eax, [ebp+var_138]
.text:0000448F                 movzx   ecx, byte ptr [eax+11h]
.text:00004493                 test    ecx, ecx
.text:00004495                 jz      loc_4E84
.text:0000449B                 lea     ecx, [ebp+var_50]
.text:0000449E                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:000044A3                 mov     [ebp+var_13C], eax
.text:000044A9                 cmp     [ebp+var_7C], 0
.text:000044AD                 jl      short loc_44B8
.text:000044AF                 mov     edx, [ebp+var_78]
.text:000044B2                 mov     [ebp+var_13C], edx
.text:000044B8
.text:000044B8 loc_44B8:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+B35j
.text:000044B8                 mov     [ebp+var_140], 0
.text:000044C2                 jmp     short loc_44D3
.text:000044C4 ; ---------------------------------------------------------------------------
.text:000044C4
.text:000044C4 loc_44C4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+BC8j
.text:000044C4                                         ; CArc::OpenStream2(COpenOptions const &)+DCAj ...
.text:000044C4                 mov     eax, [ebp+var_140]
.text:000044CA                 add     eax, 1
.text:000044CD                 mov     [ebp+var_140], eax
.text:000044D3
.text:000044D3 loc_44D3:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+B4Aj
.text:000044D3                 mov     ecx, [ebp+var_140]
.text:000044D9                 cmp     ecx, [ebp+var_13C]
.text:000044DF                 jnb     loc_4E84
.text:000044E5                 mov     edx, [ebp+var_140]
.text:000044EB                 push    edx
.text:000044EC                 lea     ecx, [ebp+var_50]
.text:000044EF                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:000044F4                 mov     ecx, [ebp+var_14]
.text:000044F7                 mov     edx, [eax]
.text:000044F9                 mov     [ecx+94h], edx
.text:000044FF                 mov     [ebp+var_141], 0
.text:00004506                 mov     eax, [ebp+var_14]
.text:00004509                 mov     ecx, [eax+94h]
.text:0000450F                 push    ecx
.text:00004510                 mov     edx, [ebp+arg_0]
.text:00004513                 mov     ecx, [edx]
.text:00004515                 add     ecx, 8
.text:00004518                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:0000451D                 mov     [ebp+var_148], eax
.text:00004523                 mov     eax, [ebp+var_140]
.text:00004529                 cmp     eax, [ebp+var_78]
.text:0000452C                 jb      short loc_4549
.text:0000452E                 mov     ecx, [ebp+var_148] ; this
.text:00004534                 call    ?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_BackwardOpen(void)
.text:00004539                 movzx   ecx, al
.text:0000453C                 test    ecx, ecx
.text:0000453E                 jnz     short loc_4542
.text:00004540                 jmp     short loc_44C4
.text:00004542 ; ---------------------------------------------------------------------------
.text:00004542
.text:00004542 loc_4542:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+BC6j
.text:00004542                 mov     [ebp+var_141], 1
.text:00004549
.text:00004549 loc_4549:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+BB4j
.text:00004549                 mov     edx, [ebp+arg_0]
.text:0000454C                 cmp     dword ptr [edx+38h], 0
.text:00004550                 jz      loc_45E4
.text:00004556                 mov     esi, esp
.text:00004558                 lea     eax, [ebp+var_118]
.text:0000455E                 push    eax
.text:0000455F                 push    0
.text:00004561                 mov     ecx, [ebp+arg_0]
.text:00004564                 mov     edx, [ecx+38h]
.text:00004567                 mov     eax, [ebp+arg_0]
.text:0000456A                 mov     ecx, [eax+38h]
.text:0000456D                 mov     edx, [edx]
.text:0000456F                 push    ecx
.text:00004570                 mov     eax, [edx+0Ch]
.text:00004573                 call    eax
.text:00004575                 cmp     esi, esp
.text:00004577                 call    __RTC_CheckEsp
.text:0000457C                 mov     [ebp+var_14C], eax
.text:00004582                 cmp     [ebp+var_14C], 0
.text:00004589                 jz      short loc_45E4
.text:0000458B                 mov     ecx, [ebp+var_14C]
.text:00004591                 mov     [ebp+var_68C], ecx
.text:00004597                 mov     byte ptr [ebp+var_4], 3
.text:0000459B                 lea     ecx, [ebp+var_12C]
.text:000045A1                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000045A6                 mov     byte ptr [ebp+var_4], 2
.text:000045AA                 lea     ecx, [ebp+var_60]
.text:000045AD                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000045B2                 mov     byte ptr [ebp+var_4], 1
.text:000045B6                 lea     ecx, [ebp+var_50]
.text:000045B9                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000045BE                 mov     byte ptr [ebp+var_4], 0
.text:000045C2                 lea     ecx, [ebp+var_38] ; this
.text:000045C5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000045CA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000045D1                 lea     ecx, [ebp+var_24] ; this
.text:000045D4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000045D9                 mov     eax, [ebp+var_68C]
.text:000045DF                 jmp     loc_8F16
.text:000045E4 ; ---------------------------------------------------------------------------
.text:000045E4
.text:000045E4 loc_45E4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+BD8j
.text:000045E4                                         ; CArc::OpenStream2(COpenOptions const &)+C11j
.text:000045E4                 mov     edx, [ebp+arg_0]
.text:000045E7                 cmp     dword ptr [edx+30h], 0
.text:000045EB                 jz      loc_467E
.text:000045F1                 mov     esi, esp
.text:000045F3                 push    0
.text:000045F5                 push    0
.text:000045F7                 push    0
.text:000045F9                 push    0
.text:000045FB                 mov     eax, [ebp+arg_0]
.text:000045FE                 mov     ecx, [eax+30h]
.text:00004601                 mov     edx, [ebp+arg_0]
.text:00004604                 mov     eax, [edx+30h]
.text:00004607                 mov     ecx, [ecx]
.text:00004609                 push    eax
.text:0000460A                 mov     edx, [ecx+10h]
.text:0000460D                 call    edx
.text:0000460F                 cmp     esi, esp
.text:00004611                 call    __RTC_CheckEsp
.text:00004616                 mov     [ebp+var_150], eax
.text:0000461C                 cmp     [ebp+var_150], 0
.text:00004623                 jz      short loc_467E
.text:00004625                 mov     eax, [ebp+var_150]
.text:0000462B                 mov     [ebp+var_690], eax
.text:00004631                 mov     byte ptr [ebp+var_4], 3
.text:00004635                 lea     ecx, [ebp+var_12C]
.text:0000463B                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004640                 mov     byte ptr [ebp+var_4], 2
.text:00004644                 lea     ecx, [ebp+var_60]
.text:00004647                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000464C                 mov     byte ptr [ebp+var_4], 1
.text:00004650                 lea     ecx, [ebp+var_50]
.text:00004653                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004658                 mov     byte ptr [ebp+var_4], 0
.text:0000465C                 lea     ecx, [ebp+var_38] ; this
.text:0000465F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004664                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000466B                 lea     ecx, [ebp+var_24] ; this
.text:0000466E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004673                 mov     eax, [ebp+var_690]
.text:00004679                 jmp     loc_8F16
.text:0000467E ; ---------------------------------------------------------------------------
.text:0000467E
.text:0000467E loc_467E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+C73j
.text:0000467E                                         ; CArc::OpenStream2(COpenOptions const &)+CABj
.text:0000467E                 lea     ecx, [ebp+var_158]
.text:00004684                 call    ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>(void)
.text:00004689                 mov     byte ptr [ebp+var_4], 7
.text:0000468D                 lea     ecx, [ebp+var_158]
.text:00004693                 push    ecx
.text:00004694                 mov     edx, [ebp+var_14]
.text:00004697                 mov     eax, [edx+94h]
.text:0000469D                 push    eax
.text:0000469E                 mov     ecx, [ebp+arg_0]
.text:000046A1                 push    ecx
.text:000046A2                 mov     ecx, [ebp+var_14]
.text:000046A5                 call    ?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z ; CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)
.text:000046AA                 mov     [ebp+var_160], eax
.text:000046B0                 cmp     [ebp+var_160], 0
.text:000046B7                 jz      short loc_4721
.text:000046B9                 mov     edx, [ebp+var_160]
.text:000046BF                 mov     [ebp+var_694], edx
.text:000046C5                 mov     byte ptr [ebp+var_4], 6
.text:000046C9                 lea     ecx, [ebp+var_158]
.text:000046CF                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000046D4                 mov     byte ptr [ebp+var_4], 3
.text:000046D8                 lea     ecx, [ebp+var_12C]
.text:000046DE                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000046E3                 mov     byte ptr [ebp+var_4], 2
.text:000046E7                 lea     ecx, [ebp+var_60]
.text:000046EA                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000046EF                 mov     byte ptr [ebp+var_4], 1
.text:000046F3                 lea     ecx, [ebp+var_50]
.text:000046F6                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000046FB                 mov     byte ptr [ebp+var_4], 0
.text:000046FF                 lea     ecx, [ebp+var_38] ; this
.text:00004702                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004707                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000470E                 lea     ecx, [ebp+var_24] ; this
.text:00004711                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004716                 mov     eax, [ebp+var_694]
.text:0000471C                 jmp     loc_8F16
.text:00004721 ; ---------------------------------------------------------------------------
.text:00004721
.text:00004721 loc_4721:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+D3Fj
.text:00004721                 lea     ecx, [ebp+var_158]
.text:00004727                 call    ??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ ; CMyComPtr<IInArchive>::operator!(void)
.text:0000472C                 movzx   eax, al
.text:0000472F                 test    eax, eax
.text:00004731                 jz      short loc_4747
.text:00004733                 mov     byte ptr [ebp+var_4], 6
.text:00004737                 lea     ecx, [ebp+var_158]
.text:0000473D                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004742                 jmp     loc_44C4
.text:00004747 ; ---------------------------------------------------------------------------
.text:00004747
.text:00004747 loc_4747:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+DB9j
.text:00004747                 mov     ecx, [ebp+arg_0]
.text:0000474A                 cmp     dword ptr [ecx+30h], 0
.text:0000474E                 jz      loc_47F5
.text:00004754                 movzx   edx, [ebp+var_141]
.text:0000475B                 test    edx, edx
.text:0000475D                 jnz     short loc_477B
.text:0000475F                 movzx   eax, [ebp+var_55]
.text:00004763                 test    eax, eax
.text:00004765                 jz      short loc_477B
.text:00004767                 mov     ecx, [ebp+var_70]
.text:0000476A                 mov     [ebp+var_784], ecx
.text:00004770                 mov     edx, [ebp+var_6C]
.text:00004773                 mov     [ebp+var_780], edx
.text:00004779                 jmp     short loc_478F
.text:0000477B ; ---------------------------------------------------------------------------
.text:0000477B
.text:0000477B loc_477B:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+DE5j
.text:0000477B                                         ; CArc::OpenStream2(COpenOptions const &)+DEDj
.text:0000477B                 mov     [ebp+var_784], 0
.text:00004785                 mov     [ebp+var_780], 0
.text:0000478F
.text:0000478F loc_478F:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+E01j
.text:0000478F                 mov     eax, [ebp+var_784]
.text:00004795                 mov     [ebp+var_170], eax
.text:0000479B                 mov     ecx, [ebp+var_780]
.text:000047A1                 mov     [ebp+var_16C], ecx
.text:000047A7                 lea     ecx, [ebp+var_158]
.text:000047AD                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:000047B2                 mov     [ebp+var_788], eax
.text:000047B8                 mov     esi, esp
.text:000047BA                 mov     edx, [ebp+arg_0]
.text:000047BD                 mov     eax, [edx+38h]
.text:000047C0                 push    eax
.text:000047C1                 lea     ecx, [ebp+var_170]
.text:000047C7                 push    ecx
.text:000047C8                 mov     edx, [ebp+arg_0]
.text:000047CB                 mov     eax, [edx+30h]
.text:000047CE                 push    eax
.text:000047CF                 mov     ecx, [ebp+var_788]
.text:000047D5                 push    ecx
.text:000047D6                 mov     edx, [ebp+var_788]
.text:000047DC                 mov     eax, [edx]
.text:000047DE                 mov     ecx, [eax+0Ch]
.text:000047E1                 call    ecx
.text:000047E3                 cmp     esi, esp
.text:000047E5                 call    __RTC_CheckEsp
.text:000047EA                 mov     [ebp+var_164], eax
.text:000047F0                 jmp     loc_48F1
.text:000047F5 ; ---------------------------------------------------------------------------
.text:000047F5
.text:000047F5 loc_47F5:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+DD6j
.text:000047F5                 lea     ecx, [ebp+var_17C]
.text:000047FB                 call    ??0?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSeq>::CMyComPtr<IArchiveOpenSeq>(void)
.text:00004800                 mov     byte ptr [ebp+var_4], 8
.text:00004804                 lea     ecx, [ebp+var_17C]
.text:0000480A                 call    ??I?$CMyComPtr@UIArchiveOpenSeq@@@@QAEPAPAUIArchiveOpenSeq@@XZ ; CMyComPtr<IArchiveOpenSeq>::operator&(void)
.text:0000480F                 push    eax
.text:00004810                 push    offset _IID_IArchiveOpenSeq
.text:00004815                 lea     ecx, [ebp+var_158]
.text:0000481B                 call    ??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z ; CMyComPtr<IInArchive>::QueryInterface<void>(_GUID const &,void * *)
.text:00004820                 lea     ecx, [ebp+var_17C]
.text:00004826                 call    ??7?$CMyComPtr@UIArchiveOpenSeq@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenSeq>::operator!(void)
.text:0000482B                 movzx   edx, al
.text:0000482E                 test    edx, edx
.text:00004830                 jz      short loc_48A7
.text:00004832                 mov     [ebp+var_698], 80004001h
.text:0000483C                 mov     byte ptr [ebp+var_4], 7
.text:00004840                 lea     ecx, [ebp+var_17C]
.text:00004846                 call    ??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>(void)
.text:0000484B                 mov     byte ptr [ebp+var_4], 6
.text:0000484F                 lea     ecx, [ebp+var_158]
.text:00004855                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:0000485A                 mov     byte ptr [ebp+var_4], 3
.text:0000485E                 lea     ecx, [ebp+var_12C]
.text:00004864                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004869                 mov     byte ptr [ebp+var_4], 2
.text:0000486D                 lea     ecx, [ebp+var_60]
.text:00004870                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004875                 mov     byte ptr [ebp+var_4], 1
.text:00004879                 lea     ecx, [ebp+var_50]
.text:0000487C                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004881                 mov     byte ptr [ebp+var_4], 0
.text:00004885                 lea     ecx, [ebp+var_38] ; this
.text:00004888                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000488D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004894                 lea     ecx, [ebp+var_24] ; this
.text:00004897                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000489C                 mov     eax, [ebp+var_698]
.text:000048A2                 jmp     loc_8F16
.text:000048A7 ; ---------------------------------------------------------------------------
.text:000048A7
.text:000048A7 loc_48A7:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+EB8j
.text:000048A7                 lea     ecx, [ebp+var_17C]
.text:000048AD                 call    ??C?$CMyComPtr@UIArchiveOpenSeq@@@@QBEPAUIArchiveOpenSeq@@XZ ; CMyComPtr<IArchiveOpenSeq>::operator->(void)
.text:000048B2                 mov     [ebp+var_78C], eax
.text:000048B8                 mov     esi, esp
.text:000048BA                 mov     eax, [ebp+arg_0]
.text:000048BD                 mov     ecx, [eax+34h]
.text:000048C0                 push    ecx
.text:000048C1                 mov     edx, [ebp+var_78C]
.text:000048C7                 push    edx
.text:000048C8                 mov     eax, [ebp+var_78C]
.text:000048CE                 mov     ecx, [eax]
.text:000048D0                 mov     edx, [ecx+0Ch]
.text:000048D3                 call    edx
.text:000048D5                 cmp     esi, esp
.text:000048D7                 call    __RTC_CheckEsp
.text:000048DC                 mov     [ebp+var_164], eax
.text:000048E2                 mov     byte ptr [ebp+var_4], 7
.text:000048E6                 lea     ecx, [ebp+var_17C]
.text:000048EC                 call    ??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>(void)
.text:000048F1
.text:000048F1 loc_48F1:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+E78j
.text:000048F1                 mov     eax, [ebp+var_164]
.text:000048F7                 push    eax             ; __int32
.text:000048F8                 push    0
.text:000048FA                 push    0               ; unsigned __int64
.text:000048FC                 lea     ecx, [ebp+var_158]
.text:00004902                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:00004907                 push    eax             ; struct IInArchive *
.text:00004908                 mov     ecx, [ebp+var_14] ; this
.text:0000490B                 call    ?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z ; CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)
.text:00004910                 mov     [ebp+var_184], eax
.text:00004916                 cmp     [ebp+var_184], 0
.text:0000491D                 jz      short loc_4987
.text:0000491F                 mov     ecx, [ebp+var_184]
.text:00004925                 mov     [ebp+var_69C], ecx
.text:0000492B                 mov     byte ptr [ebp+var_4], 6
.text:0000492F                 lea     ecx, [ebp+var_158]
.text:00004935                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:0000493A                 mov     byte ptr [ebp+var_4], 3
.text:0000493E                 lea     ecx, [ebp+var_12C]
.text:00004944                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004949                 mov     byte ptr [ebp+var_4], 2
.text:0000494D                 lea     ecx, [ebp+var_60]
.text:00004950                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004955                 mov     byte ptr [ebp+var_4], 1
.text:00004959                 lea     ecx, [ebp+var_50]
.text:0000495C                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004961                 mov     byte ptr [ebp+var_4], 0
.text:00004965                 lea     ecx, [ebp+var_38] ; this
.text:00004968                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000496D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004974                 lea     ecx, [ebp+var_24] ; this
.text:00004977                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000497C                 mov     eax, [ebp+var_69C]
.text:00004982                 jmp     loc_8F16
.text:00004987 ; ---------------------------------------------------------------------------
.text:00004987
.text:00004987 loc_4987:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+FA5j
.text:00004987                 cmp     [ebp+var_164], 1
.text:0000498E                 jnz     loc_4AD7
.text:00004994                 mov     ecx, [ebp+var_14]
.text:00004997                 add     ecx, 10h        ; this
.text:0000499A                 call    ?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::IsArc_After_NonOpen(void)
.text:0000499F                 mov     [ebp+var_185], al
.text:000049A5                 mov     edx, [ebp+var_138]
.text:000049AB                 movzx   eax, byte ptr [edx+12h]
.text:000049AF                 test    eax, eax
.text:000049B1                 jz      short loc_49BE
.text:000049B3                 movzx   ecx, [ebp+var_185]
.text:000049BA                 test    ecx, ecx
.text:000049BC                 jnz     short loc_49D6
.text:000049BE
.text:000049BE loc_49BE:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1039j
.text:000049BE                 lea     ecx, [ebp+var_12C]
.text:000049C4                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:000049C9                 mov     edx, [ebp+var_14]
.text:000049CC                 mov     ecx, [edx+94h]
.text:000049D2                 mov     byte ptr [eax+ecx], 1
.text:000049D6
.text:000049D6 loc_49D6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1044j
.text:000049D6                 movzx   edx, [ebp+var_141]
.text:000049DD                 test    edx, edx
.text:000049DF                 jz      short loc_49F5
.text:000049E1                 mov     byte ptr [ebp+var_4], 6
.text:000049E5                 lea     ecx, [ebp+var_158]
.text:000049EB                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000049F0                 jmp     loc_44C4
.text:000049F5 ; ---------------------------------------------------------------------------
.text:000049F5
.text:000049F5 loc_49F5:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1067j
.text:000049F5                 cmp     [ebp+var_140], 0
.text:000049FC                 jnz     loc_4AC3
.text:00004A02                 cmp     [ebp+var_78], 1
.text:00004A06                 jnz     loc_4AC3
.text:00004A0C                 mov     eax, [ebp+var_14]
.text:00004A0F                 mov     ecx, [ebp+var_14]
.text:00004A12                 mov     edx, [ecx+94h]
.text:00004A18                 mov     [eax+1Ch], edx
.text:00004A1B                 mov     eax, [ebp+var_14]
.text:00004A1E                 add     eax, 10h
.text:00004A21                 push    eax
.text:00004A22                 mov     ecx, [ebp+var_14]
.text:00004A25                 add     ecx, 40h ; '@'
.text:00004A28                 call    ??4CArcErrorInfo@@QAEAAU0@ABU0@@Z ; CArcErrorInfo::operator=(CArcErrorInfo const &)
.text:00004A2D                 mov     ecx, [ebp+var_138]
.text:00004A33                 movzx   edx, byte ptr [ecx+12h]
.text:00004A37                 test    edx, edx
.text:00004A39                 jnz     loc_4AC3
.text:00004A3F                 movzx   eax, [ebp+var_185]
.text:00004A46                 test    eax, eax
.text:00004A48                 jz      short loc_4AC3
.text:00004A4A                 mov     ecx, [ebp+var_148]
.text:00004A50                 push    ecx             ; CArcInfoEx *
.text:00004A51                 call    ?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z ; IsPreArcFormat(CArcInfoEx const &)
.text:00004A56                 movzx   edx, al
.text:00004A59                 test    edx, edx
.text:00004A5B                 jnz     short loc_4AC3
.text:00004A5D                 mov     [ebp+var_6A0], 1
.text:00004A67                 mov     byte ptr [ebp+var_4], 6
.text:00004A6B                 lea     ecx, [ebp+var_158]
.text:00004A71                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004A76                 mov     byte ptr [ebp+var_4], 3
.text:00004A7A                 lea     ecx, [ebp+var_12C]
.text:00004A80                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004A85                 mov     byte ptr [ebp+var_4], 2
.text:00004A89                 lea     ecx, [ebp+var_60]
.text:00004A8C                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004A91                 mov     byte ptr [ebp+var_4], 1
.text:00004A95                 lea     ecx, [ebp+var_50]
.text:00004A98                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004A9D                 mov     byte ptr [ebp+var_4], 0
.text:00004AA1                 lea     ecx, [ebp+var_38] ; this
.text:00004AA4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004AA9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004AB0                 lea     ecx, [ebp+var_24] ; this
.text:00004AB3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004AB8                 mov     eax, [ebp+var_6A0]
.text:00004ABE                 jmp     loc_8F16
.text:00004AC3 ; ---------------------------------------------------------------------------
.text:00004AC3
.text:00004AC3 loc_4AC3:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1084j
.text:00004AC3                                         ; CArc::OpenStream2(COpenOptions const &)+108Ej ...
.text:00004AC3                 mov     byte ptr [ebp+var_4], 6
.text:00004AC7                 lea     ecx, [ebp+var_158]
.text:00004ACD                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004AD2                 jmp     loc_44C4
.text:00004AD7 ; ---------------------------------------------------------------------------
.text:00004AD7
.text:00004AD7 loc_4AD7:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1016j
.text:00004AD7                 mov     eax, [ebp+var_164]
.text:00004ADD                 mov     [ebp+var_18C], eax
.text:00004AE3                 cmp     [ebp+var_18C], 0
.text:00004AEA                 jz      short loc_4B54
.text:00004AEC                 mov     ecx, [ebp+var_18C]
.text:00004AF2                 mov     [ebp+var_6A4], ecx
.text:00004AF8                 mov     byte ptr [ebp+var_4], 6
.text:00004AFC                 lea     ecx, [ebp+var_158]
.text:00004B02                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004B07                 mov     byte ptr [ebp+var_4], 3
.text:00004B0B                 lea     ecx, [ebp+var_12C]
.text:00004B11                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004B16                 mov     byte ptr [ebp+var_4], 2
.text:00004B1A                 lea     ecx, [ebp+var_60]
.text:00004B1D                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004B22                 mov     byte ptr [ebp+var_4], 1
.text:00004B26                 lea     ecx, [ebp+var_50]
.text:00004B29                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004B2E                 mov     byte ptr [ebp+var_4], 0
.text:00004B32                 lea     ecx, [ebp+var_38] ; this
.text:00004B35                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004B3A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004B41                 lea     ecx, [ebp+var_24] ; this
.text:00004B44                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004B49                 mov     eax, [ebp+var_6A4]
.text:00004B4F                 jmp     loc_8F16
.text:00004B54 ; ---------------------------------------------------------------------------
.text:00004B54
.text:00004B54 loc_4B54:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1172j
.text:00004B54                 lea     ecx, [ebp+var_60]
.text:00004B57                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00004B5C                 mov     edx, [ebp+var_14]
.text:00004B5F                 mov     ecx, [edx+94h]
.text:00004B65                 mov     dl, [eax+ecx]
.text:00004B68                 mov     [ebp+var_18D], dl
.text:00004B6E                 movzx   eax, [ebp+var_71]
.text:00004B72                 push    eax             ; bool
.text:00004B73                 movzx   ecx, [ebp+var_18D]
.text:00004B7A                 push    ecx             ; bool
.text:00004B7B                 movzx   edx, [ebp+var_72]
.text:00004B7F                 push    edx             ; bool
.text:00004B80                 mov     ecx, [ebp+var_138] ; this
.text:00004B86                 call    ?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z ; COpenType::GetSpec(bool,bool,bool)
.text:00004B8B                 mov     [ebp+var_194], eax
.text:00004B91                 mov     eax, [ebp+var_14]
.text:00004B94                 mov     cl, [eax+10h]
.text:00004B97                 mov     [ebp+var_195], cl
.text:00004B9D                 movzx   edx, [ebp+var_195]
.text:00004BA4                 test    edx, edx
.text:00004BA6                 jz      loc_4C73
.text:00004BAC                 mov     eax, [ebp+var_138]
.text:00004BB2                 movzx   ecx, byte ptr [eax+14h]
.text:00004BB6                 test    ecx, ecx
.text:00004BB8                 jz      loc_4C73
.text:00004BBE                 mov     edx, [ebp+var_14]
.text:00004BC1                 mov     eax, [ebp+var_14]
.text:00004BC4                 mov     ecx, [edx+0A8h]
.text:00004BCA                 add     ecx, [eax+0B0h]
.text:00004BD0                 mov     edx, [edx+0ACh]
.text:00004BD6                 adc     edx, [eax+0B4h]
.text:00004BDC                 push    edx
.text:00004BDD                 push    ecx             ; unsigned __int64
.text:00004BDE                 mov     eax, [ebp+arg_0]
.text:00004BE1                 push    eax             ; struct COpenOptions *
.text:00004BE2                 mov     ecx, [ebp+var_14] ; this
.text:00004BE5                 call    ?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z ; CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)
.text:00004BEA                 mov     [ebp+var_19C], eax
.text:00004BF0                 cmp     [ebp+var_19C], 0
.text:00004BF7                 jz      short loc_4C61
.text:00004BF9                 mov     ecx, [ebp+var_19C]
.text:00004BFF                 mov     [ebp+var_6A8], ecx
.text:00004C05                 mov     byte ptr [ebp+var_4], 6
.text:00004C09                 lea     ecx, [ebp+var_158]
.text:00004C0F                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004C14                 mov     byte ptr [ebp+var_4], 3
.text:00004C18                 lea     ecx, [ebp+var_12C]
.text:00004C1E                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004C23                 mov     byte ptr [ebp+var_4], 2
.text:00004C27                 lea     ecx, [ebp+var_60]
.text:00004C2A                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004C2F                 mov     byte ptr [ebp+var_4], 1
.text:00004C33                 lea     ecx, [ebp+var_50]
.text:00004C36                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004C3B                 mov     byte ptr [ebp+var_4], 0
.text:00004C3F                 lea     ecx, [ebp+var_38] ; this
.text:00004C42                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004C47                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004C4E                 lea     ecx, [ebp+var_24] ; this
.text:00004C51                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004C56                 mov     eax, [ebp+var_6A8]
.text:00004C5C                 jmp     loc_8F16
.text:00004C61 ; ---------------------------------------------------------------------------
.text:00004C61
.text:00004C61 loc_4C61:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+127Fj
.text:00004C61                 mov     edx, [ebp+var_14]
.text:00004C64                 movzx   eax, byte ptr [edx+12h]
.text:00004C68                 test    eax, eax
.text:00004C6A                 jz      short loc_4C73
.text:00004C6C                 mov     [ebp+var_195], 0
.text:00004C73
.text:00004C73 loc_4C73:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+122Ej
.text:00004C73                                         ; CArc::OpenStream2(COpenOptions const &)+1240j ...
.text:00004C73                 mov     ecx, [ebp+var_14]
.text:00004C76                 mov     [ebp+var_790], ecx
.text:00004C7C                 mov     edx, [ebp+var_790]
.text:00004C82                 cmp     dword ptr [edx+0ACh], 0
.text:00004C89                 jl      loc_4D30
.text:00004C8F                 jg      short loc_4CA4
.text:00004C91                 mov     eax, [ebp+var_790]
.text:00004C97                 cmp     dword ptr [eax+0A8h], 0
.text:00004C9E                 jbe     loc_4D30
.text:00004CA4
.text:00004CA4 loc_4CA4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1317j
.text:00004CA4                 movzx   ecx, [ebp+var_141]
.text:00004CAB                 test    ecx, ecx
.text:00004CAD                 jnz     short loc_4D1C
.text:00004CAF                 movzx   edx, [ebp+var_55]
.text:00004CB3                 test    edx, edx
.text:00004CB5                 jz      short loc_4D1C
.text:00004CB7                 mov     ecx, [ebp+var_194] ; this
.text:00004CBD                 call    ?CanReturn_NonStart@COpenSpecFlags@@QBE_NXZ ; COpenSpecFlags::CanReturn_NonStart(void)
.text:00004CC2                 movzx   eax, al
.text:00004CC5                 test    eax, eax
.text:00004CC7                 jz      short loc_4D1C
.text:00004CC9                 mov     ecx, [ebp+var_138]
.text:00004CCF                 movzx   edx, byte ptr [ecx+15h]
.text:00004CD3                 test    edx, edx
.text:00004CD5                 jz      short loc_4D30
.text:00004CD7                 mov     eax, [ebp+var_14]
.text:00004CDA                 mov     ecx, [ebp+var_138]
.text:00004CE0                 mov     [ebp+var_794], eax
.text:00004CE6                 mov     [ebp+var_798], ecx
.text:00004CEC                 mov     edx, [ebp+var_794]
.text:00004CF2                 mov     eax, [ebp+var_798]
.text:00004CF8                 mov     ecx, [edx+0ACh]
.text:00004CFE                 cmp     ecx, [eax+1Ch]
.text:00004D01                 jb      short loc_4D30
.text:00004D03                 ja      short loc_4D1C
.text:00004D05                 mov     edx, [ebp+var_794]
.text:00004D0B                 mov     eax, [ebp+var_798]
.text:00004D11                 mov     ecx, [edx+0A8h]
.text:00004D17                 cmp     ecx, [eax+18h]
.text:00004D1A                 jbe     short loc_4D30
.text:00004D1C
.text:00004D1C loc_4D1C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1335j
.text:00004D1C                                         ; CArc::OpenStream2(COpenOptions const &)+133Dj ...
.text:00004D1C                 mov     byte ptr [ebp+var_4], 6
.text:00004D20                 lea     ecx, [ebp+var_158]
.text:00004D26                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004D2B                 jmp     loc_44C4
.text:00004D30 ; ---------------------------------------------------------------------------
.text:00004D30
.text:00004D30 loc_4D30:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1311j
.text:00004D30                                         ; CArc::OpenStream2(COpenOptions const &)+1326j ...
.text:00004D30                 movzx   edx, [ebp+var_195]
.text:00004D37                 test    edx, edx
.text:00004D39                 jz      short loc_4DA9
.text:00004D3B                 mov     eax, [ebp+var_14]
.text:00004D3E                 mov     [ebp+var_79C], eax
.text:00004D44                 mov     ecx, [ebp+var_79C]
.text:00004D4A                 cmp     dword ptr [ecx+0ACh], 0
.text:00004D51                 jl      short loc_4D88
.text:00004D53                 jg      short loc_4D64
.text:00004D55                 mov     edx, [ebp+var_79C]
.text:00004D5B                 cmp     dword ptr [edx+0A8h], 0
.text:00004D62                 jbe     short loc_4D88
.text:00004D64
.text:00004D64 loc_4D64:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+13DBj
.text:00004D64                 mov     eax, [ebp+var_194]
.text:00004D6A                 movzx   ecx, byte ptr [eax+2]
.text:00004D6E                 test    ecx, ecx
.text:00004D70                 jnz     short loc_4D86
.text:00004D72                 mov     byte ptr [ebp+var_4], 6
.text:00004D76                 lea     ecx, [ebp+var_158]
.text:00004D7C                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004D81                 jmp     loc_44C4
.text:00004D86 ; ---------------------------------------------------------------------------
.text:00004D86
.text:00004D86 loc_4D86:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+13F8j
.text:00004D86                 jmp     short loc_4DA9
.text:00004D88 ; ---------------------------------------------------------------------------
.text:00004D88
.text:00004D88 loc_4D88:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+13D9j
.text:00004D88                                         ; CArc::OpenStream2(COpenOptions const &)+13EAj
.text:00004D88                 mov     edx, [ebp+var_194]
.text:00004D8E                 movzx   eax, byte ptr [edx]
.text:00004D91                 test    eax, eax
.text:00004D93                 jnz     short loc_4DA9
.text:00004D95                 mov     byte ptr [ebp+var_4], 6
.text:00004D99                 lea     ecx, [ebp+var_158]
.text:00004D9F                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004DA4                 jmp     loc_44C4
.text:00004DA9 ; ---------------------------------------------------------------------------
.text:00004DA9
.text:00004DA9 loc_4DA9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+13C1j
.text:00004DA9                                         ; CArc::OpenStream2(COpenOptions const &):loc_4D86j ...
.text:00004DA9                 mov     ecx, [ebp+var_14]
.text:00004DAC                 mov     [ebp+var_7A0], ecx
.text:00004DB2                 mov     edx, [ebp+var_7A0]
.text:00004DB8                 cmp     dword ptr [edx+0ACh], 0
.text:00004DBF                 jg      short loc_4DDD
.text:00004DC1                 jl      short loc_4DD2
.text:00004DC3                 mov     eax, [ebp+var_7A0]
.text:00004DC9                 cmp     dword ptr [eax+0A8h], 0
.text:00004DD0                 ja      short loc_4DDD
.text:00004DD2
.text:00004DD2 loc_4DD2:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1449j
.text:00004DD2                 movzx   ecx, [ebp+var_195]
.text:00004DD9                 test    ecx, ecx
.text:00004DDB                 jz      short loc_4E0A
.text:00004DDD
.text:00004DDD loc_4DDD:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1447j
.text:00004DDD                                         ; CArc::OpenStream2(COpenOptions const &)+1458j
.text:00004DDD                 cmp     [ebp+var_7C], 0
.text:00004DE1                 jge     short loc_4E0A
.text:00004DE3                 mov     edx, [ebp+var_148]
.text:00004DE9                 push    edx             ; CArcInfoEx *
.text:00004DEA                 call    ?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z ; IsPreArcFormat(CArcInfoEx const &)
.text:00004DEF                 movzx   eax, al
.text:00004DF2                 test    eax, eax
.text:00004DF4                 jz      short loc_4E0A
.text:00004DF6                 mov     byte ptr [ebp+var_4], 6
.text:00004DFA                 lea     ecx, [ebp+var_158]
.text:00004E00                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004E05                 jmp     loc_44C4
.text:00004E0A ; ---------------------------------------------------------------------------
.text:00004E0A
.text:00004E0A loc_4E0A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1463j
.text:00004E0A                                         ; CArc::OpenStream2(COpenOptions const &)+1469j ...
.text:00004E0A                 lea     ecx, [ebp+var_158]
.text:00004E10                 push    ecx
.text:00004E11                 mov     ecx, [ebp+var_14]
.text:00004E14                 call    ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=(CMyComPtr<IInArchive> const &)
.text:00004E19                 mov     [ebp+var_6AC], 0
.text:00004E23                 mov     byte ptr [ebp+var_4], 6
.text:00004E27                 lea     ecx, [ebp+var_158]
.text:00004E2D                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004E32                 mov     byte ptr [ebp+var_4], 3
.text:00004E36                 lea     ecx, [ebp+var_12C]
.text:00004E3C                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004E41                 mov     byte ptr [ebp+var_4], 2
.text:00004E45                 lea     ecx, [ebp+var_60]
.text:00004E48                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004E4D                 mov     byte ptr [ebp+var_4], 1
.text:00004E51                 lea     ecx, [ebp+var_50]
.text:00004E54                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004E59                 mov     byte ptr [ebp+var_4], 0
.text:00004E5D                 lea     ecx, [ebp+var_38] ; this
.text:00004E60                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004E65                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004E6C                 lea     ecx, [ebp+var_24] ; this
.text:00004E6F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004E74                 mov     eax, [ebp+var_6AC]
.text:00004E7A                 jmp     loc_8F16
.text:00004E7F ; ---------------------------------------------------------------------------
.text:00004E7F                 jmp     loc_44C4
.text:00004E84 ; ---------------------------------------------------------------------------
.text:00004E84
.text:00004E84 loc_4E84:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+B1Dj
.text:00004E84                                         ; CArc::OpenStream2(COpenOptions const &)+B67j
.text:00004E84                 mov     edx, [ebp+arg_0]
.text:00004E87                 cmp     dword ptr [edx+30h], 0
.text:00004E8B                 jnz     short loc_4EE4
.text:00004E8D                 mov     [ebp+var_6B0], 1
.text:00004E97                 mov     byte ptr [ebp+var_4], 3
.text:00004E9B                 lea     ecx, [ebp+var_12C]
.text:00004EA1                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004EA6                 mov     byte ptr [ebp+var_4], 2
.text:00004EAA                 lea     ecx, [ebp+var_60]
.text:00004EAD                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004EB2                 mov     byte ptr [ebp+var_4], 1
.text:00004EB6                 lea     ecx, [ebp+var_50]
.text:00004EB9                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004EBE                 mov     byte ptr [ebp+var_4], 0
.text:00004EC2                 lea     ecx, [ebp+var_38] ; this
.text:00004EC5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004ECA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004ED1                 lea     ecx, [ebp+var_24] ; this
.text:00004ED4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004ED9                 mov     eax, [ebp+var_6B0]
.text:00004EDF                 jmp     loc_8F16
.text:00004EE4 ; ---------------------------------------------------------------------------
.text:00004EE4
.text:00004EE4 loc_4EE4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1513j
.text:00004EE4                 cmp     [ebp+var_7C], 0
.text:00004EE8                 jl      loc_5040
.text:00004EEE                 mov     eax, [ebp+var_138]
.text:00004EF4                 movzx   ecx, byte ptr [eax+12h]
.text:00004EF8                 test    ecx, ecx
.text:00004EFA                 jnz     loc_5040
.text:00004F00                 mov     edx, [ebp+var_138]
.text:00004F06                 movzx   eax, byte ptr [edx+15h]
.text:00004F0A                 test    eax, eax
.text:00004F0C                 jz      short loc_4F8A
.text:00004F0E                 mov     ecx, [ebp+var_138]
.text:00004F14                 mov     [ebp+var_7A4], ecx
.text:00004F1A                 mov     edx, [ebp+var_7A4]
.text:00004F20                 mov     eax, [ebp+var_7A4]
.text:00004F26                 mov     ecx, [edx+18h]
.text:00004F29                 or      ecx, [eax+1Ch]
.text:00004F2C                 jnz     short loc_4F85
.text:00004F2E                 mov     [ebp+var_6B4], 1
.text:00004F38                 mov     byte ptr [ebp+var_4], 3
.text:00004F3C                 lea     ecx, [ebp+var_12C]
.text:00004F42                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004F47                 mov     byte ptr [ebp+var_4], 2
.text:00004F4B                 lea     ecx, [ebp+var_60]
.text:00004F4E                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00004F53                 mov     byte ptr [ebp+var_4], 1
.text:00004F57                 lea     ecx, [ebp+var_50]
.text:00004F5A                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00004F5F                 mov     byte ptr [ebp+var_4], 0
.text:00004F63                 lea     ecx, [ebp+var_38] ; this
.text:00004F66                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004F6B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004F72                 lea     ecx, [ebp+var_24] ; this
.text:00004F75                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004F7A                 mov     eax, [ebp+var_6B4]
.text:00004F80                 jmp     loc_8F16
.text:00004F85 ; ---------------------------------------------------------------------------
.text:00004F85
.text:00004F85 loc_4F85:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+15B4j
.text:00004F85                 jmp     loc_5040
.text:00004F8A ; ---------------------------------------------------------------------------
.text:00004F8A
.text:00004F8A loc_4F8A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1594j
.text:00004F8A                 mov     edx, [ebp+var_7C]
.text:00004F8D                 push    edx
.text:00004F8E                 mov     eax, [ebp+arg_0]
.text:00004F91                 mov     ecx, [eax]
.text:00004F93                 add     ecx, 8
.text:00004F96                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:00004F9B                 mov     [ebp+var_1A0], eax
.text:00004FA1                 lea     ecx, [ebp+var_38]
.text:00004FA4                 push    ecx             ; struct UString *
.text:00004FA5                 mov     ecx, [ebp+var_1A0] ; this
.text:00004FAB                 call    ?FindExtension@CArcInfoEx@@QBEHABVUString@@@Z ; CArcInfoEx::FindExtension(UString const &)
.text:00004FB0                 test    eax, eax
.text:00004FB2                 jl      loc_5040
.text:00004FB8                 mov     edx, [ebp+var_7C]
.text:00004FBB                 push    edx
.text:00004FBC                 mov     eax, [ebp+arg_0]
.text:00004FBF                 mov     ecx, [eax]
.text:00004FC1                 add     ecx, 8
.text:00004FC4                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:00004FC9                 mov     [ebp+var_1A4], eax
.text:00004FCF                 mov     ecx, [ebp+var_1A4] ; this
.text:00004FD5                 call    ?Flags_FindSignature@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_FindSignature(void)
.text:00004FDA                 movzx   ecx, al
.text:00004FDD                 test    ecx, ecx
.text:00004FDF                 jz      short loc_5040
.text:00004FE1                 movzx   edx, [ebp+var_55]
.text:00004FE5                 test    edx, edx
.text:00004FE7                 jz      short loc_5040
.text:00004FE9                 mov     [ebp+var_6B8], 1
.text:00004FF3                 mov     byte ptr [ebp+var_4], 3
.text:00004FF7                 lea     ecx, [ebp+var_12C]
.text:00004FFD                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005002                 mov     byte ptr [ebp+var_4], 2
.text:00005006                 lea     ecx, [ebp+var_60]
.text:00005009                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000500E                 mov     byte ptr [ebp+var_4], 1
.text:00005012                 lea     ecx, [ebp+var_50]
.text:00005015                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000501A                 mov     byte ptr [ebp+var_4], 0
.text:0000501E                 lea     ecx, [ebp+var_38] ; this
.text:00005021                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005026                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000502D                 lea     ecx, [ebp+var_24] ; this
.text:00005030                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005035                 mov     eax, [ebp+var_6B8]
.text:0000503B                 jmp     loc_8F16
.text:00005040 ; ---------------------------------------------------------------------------
.text:00005040
.text:00005040 loc_5040:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1570j
.text:00005040                                         ; CArc::OpenStream2(COpenOptions const &)+1582j ...
.text:00005040                 push    28h ; '('       ; unsigned int
.text:00005042                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005047                 add     esp, 4
.text:0000504A                 mov     [ebp+var_6C0], eax
.text:00005050                 mov     byte ptr [ebp+var_4], 9
.text:00005054                 cmp     [ebp+var_6C0], 0
.text:0000505B                 jz      short loc_5070
.text:0000505D                 mov     ecx, [ebp+var_6C0] ; this
.text:00005063                 call    ??0CHandler@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CHandler::CHandler(void)
.text:00005068                 mov     [ebp+var_7A8], eax
.text:0000506E                 jmp     short loc_507A
.text:00005070 ; ---------------------------------------------------------------------------
.text:00005070
.text:00005070 loc_5070:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+16E3j
.text:00005070                 mov     [ebp+var_7A8], 0
.text:0000507A
.text:0000507A loc_507A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+16F6j
.text:0000507A                 mov     eax, [ebp+var_7A8]
.text:00005080                 mov     [ebp+var_6BC], eax
.text:00005086                 mov     byte ptr [ebp+var_4], 6
.text:0000508A                 mov     ecx, [ebp+var_6BC]
.text:00005090                 mov     [ebp+var_1A8], ecx
.text:00005096                 mov     edx, [ebp+var_1A8]
.text:0000509C                 push    edx
.text:0000509D                 lea     ecx, [ebp+var_1B0]
.text:000050A3                 call    ??0?$CMyComPtr@UIInArchive@@@@QAE@PAUIInArchive@@@Z ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>(IInArchive *)
.text:000050A8                 mov     byte ptr [ebp+var_4], 0Ah
.text:000050AC                 push    20h ; ' '       ; unsigned int
.text:000050AE                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000050B3                 add     esp, 4
.text:000050B6                 mov     [ebp+var_6C8], eax
.text:000050BC                 mov     byte ptr [ebp+var_4], 0Bh
.text:000050C0                 cmp     [ebp+var_6C8], 0
.text:000050C7                 jz      short loc_50DC
.text:000050C9                 mov     ecx, [ebp+var_6C8]
.text:000050CF                 call    ??0CExtractCallback_To_OpenCallback@@QAE@XZ ; CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback(void)
.text:000050D4                 mov     [ebp+var_7AC], eax
.text:000050DA                 jmp     short loc_50E6
.text:000050DC ; ---------------------------------------------------------------------------
.text:000050DC
.text:000050DC loc_50DC:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+174Fj
.text:000050DC                 mov     [ebp+var_7AC], 0
.text:000050E6
.text:000050E6 loc_50E6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1762j
.text:000050E6                 mov     eax, [ebp+var_7AC]
.text:000050EC                 mov     [ebp+var_6C4], eax
.text:000050F2                 mov     byte ptr [ebp+var_4], 0Ah
.text:000050F6                 mov     ecx, [ebp+var_6C4]
.text:000050FC                 mov     [ebp+var_1B8], ecx
.text:00005102                 mov     edx, [ebp+var_1B8]
.text:00005108                 push    edx
.text:00005109                 lea     ecx, [ebp+var_1C0]
.text:0000510F                 call    ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>(IArchiveExtractCallback *)
.text:00005114                 mov     byte ptr [ebp+var_4], 0Ch
.text:00005118                 mov     eax, [ebp+arg_0]
.text:0000511B                 mov     ecx, [eax+38h]
.text:0000511E                 push    ecx             ; struct IArchiveOpenCallback *
.text:0000511F                 mov     ecx, [ebp+var_1B8] ; this
.text:00005125                 call    ?Init@CExtractCallback_To_OpenCallback@@QAEXPAUIArchiveOpenCallback@@@Z ; CExtractCallback_To_OpenCallback::Init(IArchiveOpenCallback *)
.text:0000512A                 lea     ecx, [ebp+var_1D0]
.text:00005130                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00005135                 mov     byte ptr [ebp+var_4], 0Dh
.text:00005139                 mov     [ebp+var_1D5], 0
.text:00005140                 mov     [ebp+var_1E8], 100000h
.text:0000514A                 mov     edx, [ebp+var_1E8]
.text:00005150                 xor     eax, eax
.text:00005152                 mov     [ebp+var_7B4], edx
.text:00005158                 mov     [ebp+var_7B0], eax
.text:0000515E                 mov     ecx, [ebp+var_7B0]
.text:00005164                 cmp     ecx, dword ptr [ebp+var_118+4]
.text:0000516A                 jb      short loc_518F
.text:0000516C                 ja      short loc_517C
.text:0000516E                 mov     edx, [ebp+var_7B4]
.text:00005174                 cmp     edx, dword ptr [ebp+var_118]
.text:0000517A                 jbe     short loc_518F
.text:0000517C
.text:0000517C loc_517C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+17F4j
.text:0000517C                 mov     eax, dword ptr [ebp+var_118]
.text:00005182                 mov     [ebp+var_1E8], eax
.text:00005188                 mov     [ebp+var_1D5], 1
.text:0000518F
.text:0000518F loc_518F:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+17F2j
.text:0000518F                                         ; CArc::OpenStream2(COpenOptions const &)+1802j
.text:0000518F                 mov     ecx, [ebp+var_1E8]
.text:00005195                 push    ecx
.text:00005196                 lea     ecx, [ebp+var_1D0]
.text:0000519C                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:000051A1                 mov     esi, esp
.text:000051A3                 push    0
.text:000051A5                 push    0
.text:000051A7                 push    0
.text:000051A9                 push    0
.text:000051AB                 mov     edx, [ebp+arg_0]
.text:000051AE                 mov     eax, [edx+30h]
.text:000051B1                 mov     ecx, [ebp+arg_0]
.text:000051B4                 mov     edx, [ecx+30h]
.text:000051B7                 mov     eax, [eax]
.text:000051B9                 push    edx
.text:000051BA                 mov     ecx, [eax+10h]
.text:000051BD                 call    ecx
.text:000051BF                 cmp     esi, esp
.text:000051C1                 call    __RTC_CheckEsp
.text:000051C6                 mov     [ebp+var_1EC], eax
.text:000051CC                 cmp     [ebp+var_1EC], 0
.text:000051D3                 jz      loc_525F
.text:000051D9                 mov     edx, [ebp+var_1EC]
.text:000051DF                 mov     [ebp+var_6CC], edx
.text:000051E5                 mov     byte ptr [ebp+var_4], 0Ch
.text:000051E9                 lea     ecx, [ebp+var_1D0]
.text:000051EF                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000051F4                 mov     byte ptr [ebp+var_4], 0Ah
.text:000051F8                 lea     ecx, [ebp+var_1C0]
.text:000051FE                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00005203                 mov     byte ptr [ebp+var_4], 6
.text:00005207                 lea     ecx, [ebp+var_1B0]
.text:0000520D                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005212                 mov     byte ptr [ebp+var_4], 3
.text:00005216                 lea     ecx, [ebp+var_12C]
.text:0000521C                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005221                 mov     byte ptr [ebp+var_4], 2
.text:00005225                 lea     ecx, [ebp+var_60]
.text:00005228                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000522D                 mov     byte ptr [ebp+var_4], 1
.text:00005231                 lea     ecx, [ebp+var_50]
.text:00005234                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00005239                 mov     byte ptr [ebp+var_4], 0
.text:0000523D                 lea     ecx, [ebp+var_38] ; this
.text:00005240                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005245                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000524C                 lea     ecx, [ebp+var_24] ; this
.text:0000524F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005254                 mov     eax, [ebp+var_6CC]
.text:0000525A                 jmp     loc_8F16
.text:0000525F ; ---------------------------------------------------------------------------
.text:0000525F
.text:0000525F loc_525F:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+185Bj
.text:0000525F                 mov     eax, [ebp+var_1E8]
.text:00005265                 mov     [ebp+var_1E0], eax
.text:0000526B                 lea     ecx, [ebp+var_1E0]
.text:00005271                 push    ecx             ; unsigned int *
.text:00005272                 lea     ecx, [ebp+var_1D0]
.text:00005278                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:0000527D                 push    eax             ; void *
.text:0000527E                 mov     edx, [ebp+arg_0]
.text:00005281                 mov     eax, [edx+30h]
.text:00005284                 push    eax             ; struct ISequentialInStream *
.text:00005285                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:0000528A                 mov     [ebp+var_1F0], eax
.text:00005290                 cmp     [ebp+var_1F0], 0
.text:00005297                 jz      loc_5323
.text:0000529D                 mov     ecx, [ebp+var_1F0]
.text:000052A3                 mov     [ebp+var_6D0], ecx
.text:000052A9                 mov     byte ptr [ebp+var_4], 0Ch
.text:000052AD                 lea     ecx, [ebp+var_1D0]
.text:000052B3                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000052B8                 mov     byte ptr [ebp+var_4], 0Ah
.text:000052BC                 lea     ecx, [ebp+var_1C0]
.text:000052C2                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:000052C7                 mov     byte ptr [ebp+var_4], 6
.text:000052CB                 lea     ecx, [ebp+var_1B0]
.text:000052D1                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000052D6                 mov     byte ptr [ebp+var_4], 3
.text:000052DA                 lea     ecx, [ebp+var_12C]
.text:000052E0                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000052E5                 mov     byte ptr [ebp+var_4], 2
.text:000052E9                 lea     ecx, [ebp+var_60]
.text:000052EC                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000052F1                 mov     byte ptr [ebp+var_4], 1
.text:000052F5                 lea     ecx, [ebp+var_50]
.text:000052F8                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000052FD                 mov     byte ptr [ebp+var_4], 0
.text:00005301                 lea     ecx, [ebp+var_38] ; this
.text:00005304                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005309                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005310                 lea     ecx, [ebp+var_24] ; this
.text:00005313                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005318                 mov     eax, [ebp+var_6D0]
.text:0000531E                 jmp     loc_8F16
.text:00005323 ; ---------------------------------------------------------------------------
.text:00005323
.text:00005323 loc_5323:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+191Fj
.text:00005323                 cmp     [ebp+var_1E0], 0
.text:0000532A                 jnz     loc_53B4
.text:00005330                 mov     [ebp+var_6D4], 1
.text:0000533A                 mov     byte ptr [ebp+var_4], 0Ch
.text:0000533E                 lea     ecx, [ebp+var_1D0]
.text:00005344                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00005349                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000534D                 lea     ecx, [ebp+var_1C0]
.text:00005353                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00005358                 mov     byte ptr [ebp+var_4], 6
.text:0000535C                 lea     ecx, [ebp+var_1B0]
.text:00005362                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005367                 mov     byte ptr [ebp+var_4], 3
.text:0000536B                 lea     ecx, [ebp+var_12C]
.text:00005371                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005376                 mov     byte ptr [ebp+var_4], 2
.text:0000537A                 lea     ecx, [ebp+var_60]
.text:0000537D                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005382                 mov     byte ptr [ebp+var_4], 1
.text:00005386                 lea     ecx, [ebp+var_50]
.text:00005389                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000538E                 mov     byte ptr [ebp+var_4], 0
.text:00005392                 lea     ecx, [ebp+var_38] ; this
.text:00005395                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000539A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000053A1                 lea     ecx, [ebp+var_24] ; this
.text:000053A4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000053A9                 mov     eax, [ebp+var_6D4]
.text:000053AF                 jmp     loc_8F16
.text:000053B4 ; ---------------------------------------------------------------------------
.text:000053B4
.text:000053B4 loc_53B4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+19B2j
.text:000053B4                 mov     edx, [ebp+var_1E0]
.text:000053BA                 cmp     edx, [ebp+var_1E8]
.text:000053C0                 jnb     short loc_53C9
.text:000053C2                 mov     [ebp+var_1D5], 1
.text:000053C9
.text:000053C9 loc_53C9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1A48j
.text:000053C9                 lea     ecx, [ebp+var_200]
.text:000053CF                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:000053D4                 mov     byte ptr [ebp+var_4], 0Eh
.text:000053D8                 mov     [ebp+var_20C], 0FFFFFFFFh
.text:000053E2                 mov     [ebp+var_208], 0
.text:000053EC                 jmp     short loc_53FD
.text:000053EE ; ---------------------------------------------------------------------------
.text:000053EE
.text:000053EE loc_53EE:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1AC9j
.text:000053EE                                         ; CArc::OpenStream2(COpenOptions const &)+1B03j ...
.text:000053EE                 mov     eax, [ebp+var_208]
.text:000053F4                 add     eax, 1
.text:000053F7                 mov     [ebp+var_208], eax
.text:000053FD
.text:000053FD loc_53FD:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1A74j
.text:000053FD                 lea     ecx, [ebp+var_50]
.text:00005400                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:00005405                 cmp     [ebp+var_208], eax
.text:0000540B                 jnb     loc_56C8
.text:00005411                 mov     ecx, [ebp+var_208]
.text:00005417                 push    ecx
.text:00005418                 lea     ecx, [ebp+var_50]
.text:0000541B                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00005420                 mov     edx, [eax]
.text:00005422                 mov     [ebp+var_210], edx
.text:00005428                 lea     ecx, [ebp+var_12C]
.text:0000542E                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00005433                 mov     ecx, [ebp+var_210]
.text:00005439                 movzx   edx, byte ptr [eax+ecx]
.text:0000543D                 test    edx, edx
.text:0000543F                 jz      short loc_5443
.text:00005441                 jmp     short loc_53EE
.text:00005443 ; ---------------------------------------------------------------------------
.text:00005443
.text:00005443 loc_5443:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1AC7j
.text:00005443                 mov     eax, [ebp+var_210]
.text:00005449                 push    eax
.text:0000544A                 mov     ecx, [ebp+arg_0]
.text:0000544D                 mov     ecx, [ecx]
.text:0000544F                 add     ecx, 8
.text:00005452                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:00005457                 mov     [ebp+var_214], eax
.text:0000545D                 mov     ecx, [ebp+var_214] ; this
.text:00005463                 call    ?IsSplit@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::IsSplit(void)
.text:00005468                 movzx   edx, al
.text:0000546B                 test    edx, edx
.text:0000546D                 jz      short loc_5480
.text:0000546F                 mov     eax, [ebp+var_210]
.text:00005475                 mov     [ebp+var_20C], eax
.text:0000547B                 jmp     loc_53EE
.text:00005480 ; ---------------------------------------------------------------------------
.text:00005480
.text:00005480 loc_5480:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1AF5j
.text:00005480                 mov     ecx, [ebp+var_214]
.text:00005486                 cmp     dword ptr [ecx+8], 0
.text:0000548A                 jz      short loc_54F9
.text:0000548C                 mov     esi, esp
.text:0000548E                 mov     edx, [ebp+var_1E0]
.text:00005494                 push    edx
.text:00005495                 lea     ecx, [ebp+var_1D0]
.text:0000549B                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000054A0                 push    eax
.text:000054A1                 mov     eax, [ebp+var_214]
.text:000054A7                 mov     ecx, [eax+8]
.text:000054AA                 call    ecx
.text:000054AC                 cmp     esi, esp
.text:000054AE                 call    __RTC_CheckEsp
.text:000054B3                 mov     [ebp+var_218], eax
.text:000054B9                 cmp     [ebp+var_218], 0
.text:000054C0                 jnz     short loc_54C7
.text:000054C2                 jmp     loc_53EE
.text:000054C7 ; ---------------------------------------------------------------------------
.text:000054C7
.text:000054C7 loc_54C7:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1B48j
.text:000054C7                 cmp     [ebp+var_218], 2
.text:000054CE                 jnz     short loc_54E0
.text:000054D0                 movzx   edx, [ebp+var_1D5]
.text:000054D7                 test    edx, edx
.text:000054D9                 jz      short loc_54E0
.text:000054DB                 jmp     loc_53EE
.text:000054E0 ; ---------------------------------------------------------------------------
.text:000054E0
.text:000054E0 loc_54E0:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1B56j
.text:000054E0                                         ; CArc::OpenStream2(COpenOptions const &)+1B61j
.text:000054E0                 mov     eax, [ebp+var_210]
.text:000054E6                 push    eax
.text:000054E7                 push    0
.text:000054E9                 lea     ecx, [ebp+var_200]
.text:000054EF                 call    ?Insert@?$CRecordVector@I@@QAEXII@Z ; CRecordVector<uint>::Insert(uint,uint)
.text:000054F4                 jmp     loc_53EE
.text:000054F9 ; ---------------------------------------------------------------------------
.text:000054F9
.text:000054F9 loc_54F9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1B12j
.text:000054F9                 mov     ecx, [ebp+var_214]
.text:000054FF                 push    ecx
.text:00005500                 call    ?IsNewStyleSignature@@YG_NABUCArcInfoEx@@@Z ; IsNewStyleSignature(CArcInfoEx const &)
.text:00005505                 mov     [ebp+var_219], al
.text:0000550B                 movzx   edx, [ebp+var_219]
.text:00005512                 test    edx, edx
.text:00005514                 jz      short loc_556D
.text:00005516                 mov     ecx, [ebp+var_214]
.text:0000551C                 add     ecx, 30h ; '0'
.text:0000551F                 call    ?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ ; CObjectVector<CBuffer<uchar>>::IsEmpty(void)
.text:00005524                 movzx   eax, al
.text:00005527                 test    eax, eax
.text:00005529                 jnz     short loc_556D
.text:0000552B                 mov     ecx, [ebp+var_214] ; this
.text:00005531                 call    ?Flags_PureStartOpen@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_PureStartOpen(void)
.text:00005536                 movzx   ecx, al
.text:00005539                 test    ecx, ecx
.text:0000553B                 jnz     short loc_556D
.text:0000553D                 mov     ecx, [ebp+var_214] ; this
.text:00005543                 call    ?Flags_StartOpen@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_StartOpen(void)
.text:00005548                 movzx   edx, al
.text:0000554B                 test    edx, edx
.text:0000554D                 jnz     short loc_556D
.text:0000554F                 mov     ecx, [ebp+var_214] ; this
.text:00005555                 call    ?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_BackwardOpen(void)
.text:0000555A                 movzx   eax, al
.text:0000555D                 test    eax, eax
.text:0000555F                 jnz     short loc_556D
.text:00005561                 mov     [ebp+var_7B8], 0
.text:0000556B                 jmp     short loc_5577
.text:0000556D ; ---------------------------------------------------------------------------
.text:0000556D
.text:0000556D loc_556D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1B9Cj
.text:0000556D                                         ; CArc::OpenStream2(COpenOptions const &)+1BB1j ...
.text:0000556D                 mov     [ebp+var_7B8], 1
.text:00005577
.text:00005577 loc_5577:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1BF3j
.text:00005577                 mov     cl, byte ptr [ebp+var_7B8]
.text:0000557D                 mov     [ebp+var_21A], cl
.text:00005583                 movzx   edx, [ebp+var_219]
.text:0000558A                 test    edx, edx
.text:0000558C                 jz      loc_56A6
.text:00005592                 mov     ecx, [ebp+var_214]
.text:00005598                 add     ecx, 30h ; '0'
.text:0000559B                 call    ?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ ; CObjectVector<CBuffer<uchar>>::IsEmpty(void)
.text:000055A0                 movzx   eax, al
.text:000055A3                 test    eax, eax
.text:000055A5                 jnz     loc_56A6
.text:000055AB                 mov     [ebp+var_220], 0
.text:000055B5                 jmp     short loc_55C6
.text:000055B7 ; ---------------------------------------------------------------------------
.text:000055B7
.text:000055B7 loc_55B7:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &):loc_5672j
.text:000055B7                 mov     ecx, [ebp+var_220]
.text:000055BD                 add     ecx, 1
.text:000055C0                 mov     [ebp+var_220], ecx
.text:000055C6
.text:000055C6 loc_55C6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1C3Dj
.text:000055C6                 mov     ecx, [ebp+var_214]
.text:000055CC                 add     ecx, 30h ; '0'
.text:000055CF                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:000055D4                 cmp     [ebp+var_220], eax
.text:000055DA                 jnb     loc_5677
.text:000055E0                 mov     edx, [ebp+var_220]
.text:000055E6                 push    edx
.text:000055E7                 mov     ecx, [ebp+var_214]
.text:000055ED                 add     ecx, 30h ; '0'
.text:000055F0                 call    ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<uchar>>::operator[](uint)
.text:000055F5                 mov     [ebp+var_224], eax
.text:000055FB                 mov     ecx, [ebp+var_224]
.text:00005601                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00005606                 mov     ecx, [ebp+var_214]
.text:0000560C                 add     eax, [ecx+2Ch]
.text:0000560F                 mov     [ebp+var_228], eax
.text:00005615                 mov     edx, [ebp+var_1E0]
.text:0000561B                 cmp     edx, [ebp+var_228]
.text:00005621                 jnb     short loc_5637
.text:00005623                 movzx   eax, [ebp+var_1D5]
.text:0000562A                 test    eax, eax
.text:0000562C                 jnz     short loc_5635
.text:0000562E                 mov     [ebp+var_21A], 1
.text:00005635
.text:00005635 loc_5635:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1CB4j
.text:00005635                 jmp     short loc_5672
.text:00005637 ; ---------------------------------------------------------------------------
.text:00005637
.text:00005637 loc_5637:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1CA9j
.text:00005637                 mov     ecx, [ebp+var_224]
.text:0000563D                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00005642                 push    eax             ; Size
.text:00005643                 lea     ecx, [ebp+var_1D0]
.text:00005649                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:0000564E                 mov     ecx, [ebp+var_214]
.text:00005654                 add     eax, [ecx+2Ch]
.text:00005657                 push    eax             ; Buf2
.text:00005658                 mov     ecx, [ebp+var_224]
.text:0000565E                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00005663                 push    eax             ; Buf1
.text:00005664                 call    _memcmp
.text:00005669                 add     esp, 0Ch
.text:0000566C                 test    eax, eax
.text:0000566E                 jnz     short loc_5672
.text:00005670                 jmp     short loc_5677
.text:00005672 ; ---------------------------------------------------------------------------
.text:00005672
.text:00005672 loc_5672:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &):loc_5635j
.text:00005672                                         ; CArc::OpenStream2(COpenOptions const &)+1CF6j
.text:00005672                 jmp     loc_55B7
.text:00005677 ; ---------------------------------------------------------------------------
.text:00005677
.text:00005677 loc_5677:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1C62j
.text:00005677                                         ; CArc::OpenStream2(COpenOptions const &)+1CF8j
.text:00005677                 mov     ecx, [ebp+var_214]
.text:0000567D                 add     ecx, 30h ; '0'
.text:00005680                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:00005685                 cmp     [ebp+var_220], eax
.text:0000568B                 jz      short loc_56A6
.text:0000568D                 mov     edx, [ebp+var_210]
.text:00005693                 push    edx
.text:00005694                 push    0
.text:00005696                 lea     ecx, [ebp+var_200]
.text:0000569C                 call    ?Insert@?$CRecordVector@I@@QAEXII@Z ; CRecordVector<uint>::Insert(uint,uint)
.text:000056A1                 jmp     loc_53EE
.text:000056A6 ; ---------------------------------------------------------------------------
.text:000056A6
.text:000056A6 loc_56A6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1C14j
.text:000056A6                                         ; CArc::OpenStream2(COpenOptions const &)+1C2Dj ...
.text:000056A6                 movzx   eax, [ebp+var_21A]
.text:000056AD                 test    eax, eax
.text:000056AF                 jz      short loc_56C3
.text:000056B1                 mov     ecx, [ebp+var_210]
.text:000056B7                 push    ecx
.text:000056B8                 lea     ecx, [ebp+var_200]
.text:000056BE                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:000056C3
.text:000056C3 loc_56C3:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1D37j
.text:000056C3                 jmp     loc_53EE
.text:000056C8 ; ---------------------------------------------------------------------------
.text:000056C8
.text:000056C8 loc_56C8:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1A93j
.text:000056C8                 cmp     [ebp+var_20C], 0
.text:000056CF                 jl      short loc_56E5
.text:000056D1                 mov     edx, [ebp+var_20C]
.text:000056D7                 push    edx
.text:000056D8                 push    0
.text:000056DA                 lea     ecx, [ebp+var_200]
.text:000056E0                 call    ?Insert@?$CRecordVector@I@@QAEXII@Z ; CRecordVector<uint>::Insert(uint,uint)
.text:000056E5
.text:000056E5 loc_56E5:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1D57j
.text:000056E5                 mov     [ebp+var_208], 0
.text:000056EF                 jmp     short loc_5700
.text:000056F1 ; ---------------------------------------------------------------------------
.text:000056F1
.text:000056F1 loc_56F1:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2085j
.text:000056F1                                         ; CArc::OpenStream2(COpenOptions const &)+2119j ...
.text:000056F1                 mov     eax, [ebp+var_208]
.text:000056F7                 add     eax, 1
.text:000056FA                 mov     [ebp+var_208], eax
.text:00005700
.text:00005700 loc_5700:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1D77j
.text:00005700                 lea     ecx, [ebp+var_200]
.text:00005706                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:0000570B                 cmp     [ebp+var_208], eax
.text:00005711                 jnb     loc_6109
.text:00005717                 mov     ecx, [ebp+var_208]
.text:0000571D                 push    ecx
.text:0000571E                 lea     ecx, [ebp+var_200]
.text:00005724                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00005729                 mov     edx, [ebp+var_14]
.text:0000572C                 mov     eax, [eax]
.text:0000572E                 mov     [edx+94h], eax
.text:00005734                 mov     ecx, [ebp+var_14]
.text:00005737                 mov     edx, [ecx+94h]
.text:0000573D                 push    edx
.text:0000573E                 mov     eax, [ebp+arg_0]
.text:00005741                 mov     ecx, [eax]
.text:00005743                 add     ecx, 8
.text:00005746                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:0000574B                 mov     [ebp+var_22C], eax
.text:00005751                 mov     ecx, [ebp+arg_0]
.text:00005754                 cmp     dword ptr [ecx+38h], 0
.text:00005758                 jz      loc_582C
.text:0000575E                 mov     esi, esp
.text:00005760                 lea     edx, [ebp+var_118]
.text:00005766                 push    edx
.text:00005767                 push    0
.text:00005769                 mov     eax, [ebp+arg_0]
.text:0000576C                 mov     ecx, [eax+38h]
.text:0000576F                 mov     edx, [ebp+arg_0]
.text:00005772                 mov     eax, [edx+38h]
.text:00005775                 mov     ecx, [ecx]
.text:00005777                 push    eax
.text:00005778                 mov     edx, [ecx+0Ch]
.text:0000577B                 call    edx
.text:0000577D                 cmp     esi, esp
.text:0000577F                 call    __RTC_CheckEsp
.text:00005784                 mov     [ebp+var_230], eax
.text:0000578A                 cmp     [ebp+var_230], 0
.text:00005791                 jz      loc_582C
.text:00005797                 mov     eax, [ebp+var_230]
.text:0000579D                 mov     [ebp+var_6D8], eax
.text:000057A3                 mov     byte ptr [ebp+var_4], 0Dh
.text:000057A7                 lea     ecx, [ebp+var_200]
.text:000057AD                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000057B2                 mov     byte ptr [ebp+var_4], 0Ch
.text:000057B6                 lea     ecx, [ebp+var_1D0]
.text:000057BC                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000057C1                 mov     byte ptr [ebp+var_4], 0Ah
.text:000057C5                 lea     ecx, [ebp+var_1C0]
.text:000057CB                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:000057D0                 mov     byte ptr [ebp+var_4], 6
.text:000057D4                 lea     ecx, [ebp+var_1B0]
.text:000057DA                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000057DF                 mov     byte ptr [ebp+var_4], 3
.text:000057E3                 lea     ecx, [ebp+var_12C]
.text:000057E9                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000057EE                 mov     byte ptr [ebp+var_4], 2
.text:000057F2                 lea     ecx, [ebp+var_60]
.text:000057F5                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000057FA                 mov     byte ptr [ebp+var_4], 1
.text:000057FE                 lea     ecx, [ebp+var_50]
.text:00005801                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00005806                 mov     byte ptr [ebp+var_4], 0
.text:0000580A                 lea     ecx, [ebp+var_38] ; this
.text:0000580D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005812                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005819                 lea     ecx, [ebp+var_24] ; this
.text:0000581C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005821                 mov     eax, [ebp+var_6D8]
.text:00005827                 jmp     loc_8F16
.text:0000582C ; ---------------------------------------------------------------------------
.text:0000582C
.text:0000582C loc_582C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1DE0j
.text:0000582C                                         ; CArc::OpenStream2(COpenOptions const &)+1E19j
.text:0000582C                 mov     esi, esp
.text:0000582E                 push    0
.text:00005830                 push    0
.text:00005832                 push    0
.text:00005834                 push    0
.text:00005836                 mov     ecx, [ebp+arg_0]
.text:00005839                 mov     edx, [ecx+30h]
.text:0000583C                 mov     eax, [ebp+arg_0]
.text:0000583F                 mov     ecx, [eax+30h]
.text:00005842                 mov     edx, [edx]
.text:00005844                 push    ecx
.text:00005845                 mov     eax, [edx+10h]
.text:00005848                 call    eax
.text:0000584A                 cmp     esi, esp
.text:0000584C                 call    __RTC_CheckEsp
.text:00005851                 mov     [ebp+var_234], eax
.text:00005857                 cmp     [ebp+var_234], 0
.text:0000585E                 jz      loc_58F9
.text:00005864                 mov     ecx, [ebp+var_234]
.text:0000586A                 mov     [ebp+var_6DC], ecx
.text:00005870                 mov     byte ptr [ebp+var_4], 0Dh
.text:00005874                 lea     ecx, [ebp+var_200]
.text:0000587A                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000587F                 mov     byte ptr [ebp+var_4], 0Ch
.text:00005883                 lea     ecx, [ebp+var_1D0]
.text:00005889                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000588E                 mov     byte ptr [ebp+var_4], 0Ah
.text:00005892                 lea     ecx, [ebp+var_1C0]
.text:00005898                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:0000589D                 mov     byte ptr [ebp+var_4], 6
.text:000058A1                 lea     ecx, [ebp+var_1B0]
.text:000058A7                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000058AC                 mov     byte ptr [ebp+var_4], 3
.text:000058B0                 lea     ecx, [ebp+var_12C]
.text:000058B6                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000058BB                 mov     byte ptr [ebp+var_4], 2
.text:000058BF                 lea     ecx, [ebp+var_60]
.text:000058C2                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000058C7                 mov     byte ptr [ebp+var_4], 1
.text:000058CB                 lea     ecx, [ebp+var_50]
.text:000058CE                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000058D3                 mov     byte ptr [ebp+var_4], 0
.text:000058D7                 lea     ecx, [ebp+var_38] ; this
.text:000058DA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000058DF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000058E6                 lea     ecx, [ebp+var_24] ; this
.text:000058E9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000058EE                 mov     eax, [ebp+var_6DC]
.text:000058F4                 jmp     loc_8F16
.text:000058F9 ; ---------------------------------------------------------------------------
.text:000058F9
.text:000058F9 loc_58F9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1EE6j
.text:000058F9                 lea     ecx, [ebp+var_23C]
.text:000058FF                 call    ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>(void)
.text:00005904                 mov     byte ptr [ebp+var_4], 0Fh
.text:00005908                 lea     edx, [ebp+var_23C]
.text:0000590E                 push    edx
.text:0000590F                 mov     eax, [ebp+var_14]
.text:00005912                 mov     ecx, [eax+94h]
.text:00005918                 push    ecx
.text:00005919                 mov     edx, [ebp+arg_0]
.text:0000591C                 push    edx
.text:0000591D                 mov     ecx, [ebp+var_14]
.text:00005920                 call    ?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z ; CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)
.text:00005925                 mov     [ebp+var_244], eax
.text:0000592B                 cmp     [ebp+var_244], 0
.text:00005932                 jz      loc_59DC
.text:00005938                 mov     eax, [ebp+var_244]
.text:0000593E                 mov     [ebp+var_6E0], eax
.text:00005944                 mov     byte ptr [ebp+var_4], 0Eh
.text:00005948                 lea     ecx, [ebp+var_23C]
.text:0000594E                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005953                 mov     byte ptr [ebp+var_4], 0Dh
.text:00005957                 lea     ecx, [ebp+var_200]
.text:0000595D                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00005962                 mov     byte ptr [ebp+var_4], 0Ch
.text:00005966                 lea     ecx, [ebp+var_1D0]
.text:0000596C                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00005971                 mov     byte ptr [ebp+var_4], 0Ah
.text:00005975                 lea     ecx, [ebp+var_1C0]
.text:0000597B                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00005980                 mov     byte ptr [ebp+var_4], 6
.text:00005984                 lea     ecx, [ebp+var_1B0]
.text:0000598A                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:0000598F                 mov     byte ptr [ebp+var_4], 3
.text:00005993                 lea     ecx, [ebp+var_12C]
.text:00005999                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000599E                 mov     byte ptr [ebp+var_4], 2
.text:000059A2                 lea     ecx, [ebp+var_60]
.text:000059A5                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000059AA                 mov     byte ptr [ebp+var_4], 1
.text:000059AE                 lea     ecx, [ebp+var_50]
.text:000059B1                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000059B6                 mov     byte ptr [ebp+var_4], 0
.text:000059BA                 lea     ecx, [ebp+var_38] ; this
.text:000059BD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000059C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000059C9                 lea     ecx, [ebp+var_24] ; this
.text:000059CC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000059D1                 mov     eax, [ebp+var_6E0]
.text:000059D7                 jmp     loc_8F16
.text:000059DC ; ---------------------------------------------------------------------------
.text:000059DC
.text:000059DC loc_59DC:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1FBAj
.text:000059DC                 lea     ecx, [ebp+var_23C]
.text:000059E2                 call    ??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ ; CMyComPtr<IInArchive>::operator!(void)
.text:000059E7                 movzx   ecx, al
.text:000059EA                 test    ecx, ecx
.text:000059EC                 jz      short loc_5A02
.text:000059EE                 mov     byte ptr [ebp+var_4], 0Eh
.text:000059F2                 lea     ecx, [ebp+var_23C]
.text:000059F8                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000059FD                 jmp     loc_56F1
.text:00005A02 ; ---------------------------------------------------------------------------
.text:00005A02
.text:00005A02 loc_5A02:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2074j
.text:00005A02                 mov     [ebp+var_254], 0
.text:00005A0C                 mov     [ebp+var_250], 0
.text:00005A16                 lea     ecx, [ebp+var_1C0]
.text:00005A1C                 call    ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *(void)
.text:00005A21                 push    eax
.text:00005A22                 mov     edx, [ebp+arg_0]
.text:00005A25                 mov     eax, [edx+38h]
.text:00005A28                 push    eax
.text:00005A29                 lea     ecx, [ebp+var_254]
.text:00005A2F                 push    ecx
.text:00005A30                 mov     edx, [ebp+arg_0]
.text:00005A33                 mov     eax, [edx+30h]
.text:00005A36                 push    eax
.text:00005A37                 mov     ecx, [ebp+var_138]
.text:00005A3D                 movzx   edx, byte ptr [ecx+11h]
.text:00005A41                 test    edx, edx
.text:00005A43                 setz    al
.text:00005A46                 movzx   ecx, al
.text:00005A49                 push    ecx
.text:00005A4A                 lea     ecx, [ebp+var_23C]
.text:00005A50                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:00005A55                 push    eax
.text:00005A56                 call    ?OpenArchiveSpec@@YGJPAUIInArchive@@_NPAUIInStream@@PB_KPAUIArchiveOpenCallback@@PAUIArchiveExtractCallback@@@Z ; OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)
.text:00005A5B                 mov     [ebp+var_248], eax
.text:00005A61                 cmp     [ebp+var_248], 1
.text:00005A68                 jnz     short loc_5A96
.text:00005A6A                 lea     ecx, [ebp+var_12C]
.text:00005A70                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00005A75                 mov     edx, [ebp+var_14]
.text:00005A78                 mov     ecx, [edx+94h]
.text:00005A7E                 mov     byte ptr [eax+ecx], 1
.text:00005A82                 mov     byte ptr [ebp+var_4], 0Eh
.text:00005A86                 lea     ecx, [ebp+var_23C]
.text:00005A8C                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005A91                 jmp     loc_56F1
.text:00005A96 ; ---------------------------------------------------------------------------
.text:00005A96
.text:00005A96 loc_5A96:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+20F0j
.text:00005A96                 mov     edx, [ebp+var_248]
.text:00005A9C                 mov     [ebp+var_25C], edx
.text:00005AA2                 cmp     [ebp+var_25C], 0
.text:00005AA9                 jz      loc_5B53
.text:00005AAF                 mov     eax, [ebp+var_25C]
.text:00005AB5                 mov     [ebp+var_6E4], eax
.text:00005ABB                 mov     byte ptr [ebp+var_4], 0Eh
.text:00005ABF                 lea     ecx, [ebp+var_23C]
.text:00005AC5                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005ACA                 mov     byte ptr [ebp+var_4], 0Dh
.text:00005ACE                 lea     ecx, [ebp+var_200]
.text:00005AD4                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00005AD9                 mov     byte ptr [ebp+var_4], 0Ch
.text:00005ADD                 lea     ecx, [ebp+var_1D0]
.text:00005AE3                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00005AE8                 mov     byte ptr [ebp+var_4], 0Ah
.text:00005AEC                 lea     ecx, [ebp+var_1C0]
.text:00005AF2                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00005AF7                 mov     byte ptr [ebp+var_4], 6
.text:00005AFB                 lea     ecx, [ebp+var_1B0]
.text:00005B01                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005B06                 mov     byte ptr [ebp+var_4], 3
.text:00005B0A                 lea     ecx, [ebp+var_12C]
.text:00005B10                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005B15                 mov     byte ptr [ebp+var_4], 2
.text:00005B19                 lea     ecx, [ebp+var_60]
.text:00005B1C                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005B21                 mov     byte ptr [ebp+var_4], 1
.text:00005B25                 lea     ecx, [ebp+var_50]
.text:00005B28                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00005B2D                 mov     byte ptr [ebp+var_4], 0
.text:00005B31                 lea     ecx, [ebp+var_38] ; this
.text:00005B34                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005B39                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005B40                 lea     ecx, [ebp+var_24] ; this
.text:00005B43                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005B48                 mov     eax, [ebp+var_6E4]
.text:00005B4E                 jmp     loc_8F16
.text:00005B53 ; ---------------------------------------------------------------------------
.text:00005B53
.text:00005B53 loc_5B53:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2131j
.text:00005B53                 mov     ecx, [ebp+var_248]
.text:00005B59                 push    ecx             ; __int32
.text:00005B5A                 push    0
.text:00005B5C                 push    0               ; unsigned __int64
.text:00005B5E                 lea     ecx, [ebp+var_23C]
.text:00005B64                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:00005B69                 push    eax             ; struct IInArchive *
.text:00005B6A                 mov     ecx, [ebp+var_14] ; this
.text:00005B6D                 call    ?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z ; CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)
.text:00005B72                 mov     [ebp+var_260], eax
.text:00005B78                 cmp     [ebp+var_260], 0
.text:00005B7F                 jz      loc_5C29
.text:00005B85                 mov     edx, [ebp+var_260]
.text:00005B8B                 mov     [ebp+var_6E8], edx
.text:00005B91                 mov     byte ptr [ebp+var_4], 0Eh
.text:00005B95                 lea     ecx, [ebp+var_23C]
.text:00005B9B                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005BA0                 mov     byte ptr [ebp+var_4], 0Dh
.text:00005BA4                 lea     ecx, [ebp+var_200]
.text:00005BAA                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00005BAF                 mov     byte ptr [ebp+var_4], 0Ch
.text:00005BB3                 lea     ecx, [ebp+var_1D0]
.text:00005BB9                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00005BBE                 mov     byte ptr [ebp+var_4], 0Ah
.text:00005BC2                 lea     ecx, [ebp+var_1C0]
.text:00005BC8                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00005BCD                 mov     byte ptr [ebp+var_4], 6
.text:00005BD1                 lea     ecx, [ebp+var_1B0]
.text:00005BD7                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005BDC                 mov     byte ptr [ebp+var_4], 3
.text:00005BE0                 lea     ecx, [ebp+var_12C]
.text:00005BE6                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005BEB                 mov     byte ptr [ebp+var_4], 2
.text:00005BEF                 lea     ecx, [ebp+var_60]
.text:00005BF2                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005BF7                 mov     byte ptr [ebp+var_4], 1
.text:00005BFB                 lea     ecx, [ebp+var_50]
.text:00005BFE                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00005C03                 mov     byte ptr [ebp+var_4], 0
.text:00005C07                 lea     ecx, [ebp+var_38] ; this
.text:00005C0A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005C0F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005C16                 lea     ecx, [ebp+var_24] ; this
.text:00005C19                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005C1E                 mov     eax, [ebp+var_6E8]
.text:00005C24                 jmp     loc_8F16
.text:00005C29 ; ---------------------------------------------------------------------------
.text:00005C29
.text:00005C29 loc_5C29:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2207j
.text:00005C29                 mov     eax, [ebp+var_14]
.text:00005C2C                 mov     [ebp+var_7BC], eax
.text:00005C32                 mov     ecx, [ebp+var_7BC]
.text:00005C38                 cmp     dword ptr [ecx+0ACh], 0
.text:00005C3F                 jl      short loc_5C66
.text:00005C41                 jg      short loc_5C52
.text:00005C43                 mov     edx, [ebp+var_7BC]
.text:00005C49                 cmp     dword ptr [edx+0A8h], 0
.text:00005C50                 jbe     short loc_5C66
.text:00005C52
.text:00005C52 loc_5C52:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+22C9j
.text:00005C52                 mov     byte ptr [ebp+var_4], 0Eh
.text:00005C56                 lea     ecx, [ebp+var_23C]
.text:00005C5C                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005C61                 jmp     loc_56F1
.text:00005C66 ; ---------------------------------------------------------------------------
.text:00005C66
.text:00005C66 loc_5C66:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+22C7j
.text:00005C66                                         ; CArc::OpenStream2(COpenOptions const &)+22D8j
.text:00005C66                 lea     ecx, [ebp+var_2D4] ; this
.text:00005C6C                 call    ??0CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::CParseItem(void)
.text:00005C71                 mov     byte ptr [ebp+var_4], 10h
.text:00005C75                 mov     eax, [ebp+var_14]
.text:00005C78                 mov     ecx, [eax+0A8h]
.text:00005C7E                 mov     [ebp+var_2D4], ecx
.text:00005C84                 mov     edx, [eax+0ACh]
.text:00005C8A                 mov     [ebp+var_2D0], edx
.text:00005C90                 mov     eax, [ebp+var_14]
.text:00005C93                 mov     ecx, [eax+0C8h]
.text:00005C99                 mov     [ebp+var_2CC], ecx
.text:00005C9F                 mov     edx, [eax+0CCh]
.text:00005CA5                 mov     [ebp+var_2C8], edx
.text:00005CAB                 mov     eax, [ebp+var_14]
.text:00005CAE                 movzx   ecx, byte ptr [eax+0B8h]
.text:00005CB5                 test    ecx, ecx
.text:00005CB7                 jnz     short loc_5CC0
.text:00005CB9                 mov     [ebp+var_268], 1
.text:00005CC0
.text:00005CC0 loc_5CC0:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+233Fj
.text:00005CC0                 lea     ecx, [ebp+var_2D4] ; this
.text:00005CC6                 call    ?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ ; NArchive::NParser::CParseItem::NormalizeOffset(void)
.text:00005CCB                 mov     edx, [ebp+var_138]
.text:00005CD1                 movzx   eax, byte ptr [edx+11h]
.text:00005CD5                 test    eax, eax
.text:00005CD7                 jz      loc_5F68
.text:00005CDD                 lea     ecx, [ebp+var_60]
.text:00005CE0                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00005CE5                 mov     ecx, [ebp+var_14]
.text:00005CE8                 mov     edx, [ecx+94h]
.text:00005CEE                 mov     al, [eax+edx]
.text:00005CF1                 mov     [ebp+var_2D9], al
.text:00005CF7                 movzx   ecx, [ebp+var_71]
.text:00005CFB                 push    ecx             ; bool
.text:00005CFC                 movzx   edx, [ebp+var_2D9]
.text:00005D03                 push    edx             ; bool
.text:00005D04                 movzx   eax, [ebp+var_72]
.text:00005D08                 push    eax             ; bool
.text:00005D09                 mov     ecx, [ebp+var_138] ; this
.text:00005D0F                 call    ?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z ; COpenType::GetSpec(bool,bool,bool)
.text:00005D14                 mov     [ebp+var_2E0], eax
.text:00005D1A                 mov     [ebp+var_2E1], 0
.text:00005D21                 mov     ecx, [ebp+var_14]
.text:00005D24                 movzx   edx, byte ptr [ecx+10h]
.text:00005D28                 test    edx, edx
.text:00005D2A                 jnz     short loc_5D38
.text:00005D2C                 mov     [ebp+var_2E1], 1
.text:00005D33                 jmp     loc_5E87
.text:00005D38 ; ---------------------------------------------------------------------------
.text:00005D38
.text:00005D38 loc_5D38:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+23B2j
.text:00005D38                 mov     eax, [ebp+var_138]
.text:00005D3E                 movzx   ecx, byte ptr [eax+14h]
.text:00005D42                 test    ecx, ecx
.text:00005D44                 jz      loc_5E4E
.text:00005D4A                 mov     edx, [ebp+var_14]
.text:00005D4D                 mov     eax, [ebp+var_14]
.text:00005D50                 mov     ecx, [edx+0A8h]
.text:00005D56                 add     ecx, [eax+0B0h]
.text:00005D5C                 mov     edx, [edx+0ACh]
.text:00005D62                 adc     edx, [eax+0B4h]
.text:00005D68                 push    edx
.text:00005D69                 push    ecx             ; unsigned __int64
.text:00005D6A                 mov     eax, [ebp+arg_0]
.text:00005D6D                 push    eax             ; struct COpenOptions *
.text:00005D6E                 mov     ecx, [ebp+var_14] ; this
.text:00005D71                 call    ?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z ; CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)
.text:00005D76                 mov     [ebp+var_2E8], eax
.text:00005D7C                 cmp     [ebp+var_2E8], 0
.text:00005D83                 jz      loc_5E3C
.text:00005D89                 mov     ecx, [ebp+var_2E8]
.text:00005D8F                 mov     [ebp+var_6EC], ecx
.text:00005D95                 mov     byte ptr [ebp+var_4], 0Fh
.text:00005D99                 lea     ecx, [ebp+var_2D4] ; this
.text:00005D9F                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:00005DA4                 mov     byte ptr [ebp+var_4], 0Eh
.text:00005DA8                 lea     ecx, [ebp+var_23C]
.text:00005DAE                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005DB3                 mov     byte ptr [ebp+var_4], 0Dh
.text:00005DB7                 lea     ecx, [ebp+var_200]
.text:00005DBD                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00005DC2                 mov     byte ptr [ebp+var_4], 0Ch
.text:00005DC6                 lea     ecx, [ebp+var_1D0]
.text:00005DCC                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00005DD1                 mov     byte ptr [ebp+var_4], 0Ah
.text:00005DD5                 lea     ecx, [ebp+var_1C0]
.text:00005DDB                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00005DE0                 mov     byte ptr [ebp+var_4], 6
.text:00005DE4                 lea     ecx, [ebp+var_1B0]
.text:00005DEA                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005DEF                 mov     byte ptr [ebp+var_4], 3
.text:00005DF3                 lea     ecx, [ebp+var_12C]
.text:00005DF9                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005DFE                 mov     byte ptr [ebp+var_4], 2
.text:00005E02                 lea     ecx, [ebp+var_60]
.text:00005E05                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005E0A                 mov     byte ptr [ebp+var_4], 1
.text:00005E0E                 lea     ecx, [ebp+var_50]
.text:00005E11                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00005E16                 mov     byte ptr [ebp+var_4], 0
.text:00005E1A                 lea     ecx, [ebp+var_38] ; this
.text:00005E1D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005E22                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005E29                 lea     ecx, [ebp+var_24] ; this
.text:00005E2C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005E31                 mov     eax, [ebp+var_6EC]
.text:00005E37                 jmp     loc_8F16
.text:00005E3C ; ---------------------------------------------------------------------------
.text:00005E3C
.text:00005E3C loc_5E3C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+240Bj
.text:00005E3C                 mov     edx, [ebp+var_14]
.text:00005E3F                 movzx   eax, byte ptr [edx+12h]
.text:00005E43                 test    eax, eax
.text:00005E45                 jz      short loc_5E4E
.text:00005E47                 mov     [ebp+var_2E1], 1
.text:00005E4E
.text:00005E4E loc_5E4E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+23CCj
.text:00005E4E                                         ; CArc::OpenStream2(COpenOptions const &)+24CDj
.text:00005E4E                 movzx   ecx, [ebp+var_2E1]
.text:00005E55                 test    ecx, ecx
.text:00005E57                 jnz     short loc_5E87
.text:00005E59                 mov     edx, [ebp+var_2E0]
.text:00005E5F                 mov     al, [edx]
.text:00005E61                 mov     [ebp+var_2E1], al
.text:00005E67                 cmp     [ebp+var_7C], 0
.text:00005E6B                 jge     short loc_5E87
.text:00005E6D                 mov     ecx, [ebp+var_22C]
.text:00005E73                 push    ecx             ; CArcInfoEx *
.text:00005E74                 call    ?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z ; IsPreArcFormat(CArcInfoEx const &)
.text:00005E79                 movzx   edx, al
.text:00005E7C                 test    edx, edx
.text:00005E7E                 jz      short loc_5E87
.text:00005E80                 mov     [ebp+var_2E1], 0
.text:00005E87
.text:00005E87 loc_5E87:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+23BBj
.text:00005E87                                         ; CArc::OpenStream2(COpenOptions const &)+24DFj ...
.text:00005E87                 movzx   eax, [ebp+var_2E1]
.text:00005E8E                 test    eax, eax
.text:00005E90                 jz      loc_5F68
.text:00005E96                 mov     ecx, [ebp+arg_0]
.text:00005E99                 mov     edx, [ecx+30h]
.text:00005E9C                 push    edx
.text:00005E9D                 mov     ecx, [ebp+var_14]
.text:00005EA0                 add     ecx, 4
.text:00005EA3                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00005EA8                 lea     eax, [ebp+var_23C]
.text:00005EAE                 push    eax
.text:00005EAF                 mov     ecx, [ebp+var_14]
.text:00005EB2                 call    ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=(CMyComPtr<IInArchive> const &)
.text:00005EB7                 mov     [ebp+var_6F0], 0
.text:00005EC1                 mov     byte ptr [ebp+var_4], 0Fh
.text:00005EC5                 lea     ecx, [ebp+var_2D4] ; this
.text:00005ECB                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:00005ED0                 mov     byte ptr [ebp+var_4], 0Eh
.text:00005ED4                 lea     ecx, [ebp+var_23C]
.text:00005EDA                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005EDF                 mov     byte ptr [ebp+var_4], 0Dh
.text:00005EE3                 lea     ecx, [ebp+var_200]
.text:00005EE9                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00005EEE                 mov     byte ptr [ebp+var_4], 0Ch
.text:00005EF2                 lea     ecx, [ebp+var_1D0]
.text:00005EF8                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00005EFD                 mov     byte ptr [ebp+var_4], 0Ah
.text:00005F01                 lea     ecx, [ebp+var_1C0]
.text:00005F07                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00005F0C                 mov     byte ptr [ebp+var_4], 6
.text:00005F10                 lea     ecx, [ebp+var_1B0]
.text:00005F16                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005F1B                 mov     byte ptr [ebp+var_4], 3
.text:00005F1F                 lea     ecx, [ebp+var_12C]
.text:00005F25                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005F2A                 mov     byte ptr [ebp+var_4], 2
.text:00005F2E                 lea     ecx, [ebp+var_60]
.text:00005F31                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00005F36                 mov     byte ptr [ebp+var_4], 1
.text:00005F3A                 lea     ecx, [ebp+var_50]
.text:00005F3D                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00005F42                 mov     byte ptr [ebp+var_4], 0
.text:00005F46                 lea     ecx, [ebp+var_38] ; this
.text:00005F49                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005F4E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005F55                 lea     ecx, [ebp+var_24] ; this
.text:00005F58                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005F5D                 mov     eax, [ebp+var_6F0]
.text:00005F63                 jmp     loc_8F16
.text:00005F68 ; ---------------------------------------------------------------------------
.text:00005F68
.text:00005F68 loc_5F68:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+235Fj
.text:00005F68                                         ; CArc::OpenStream2(COpenOptions const &)+2518j
.text:00005F68                 lea     ecx, [ebp+var_12C]
.text:00005F6E                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00005F73                 mov     ecx, [ebp+var_14]
.text:00005F76                 mov     edx, [ecx+94h]
.text:00005F7C                 mov     byte ptr [eax+edx], 1
.text:00005F80                 mov     eax, [ebp+var_2D4]
.text:00005F86                 or      eax, [ebp+var_2D0]
.text:00005F8C                 jnz     short loc_5FEF
.text:00005F8E                 movzx   ecx, [ebp+var_268]
.text:00005F95                 test    ecx, ecx
.text:00005F97                 jnz     short loc_5FEF
.text:00005F99                 mov     edx, [ebp+var_14]
.text:00005F9C                 mov     [ebp+var_7C0], edx
.text:00005FA2                 mov     eax, [ebp+var_7C0]
.text:00005FA8                 mov     ecx, [ebp+var_2C8]
.text:00005FAE                 cmp     ecx, [eax+0C4h]
.text:00005FB4                 jb      short loc_5FEF
.text:00005FB6                 ja      short loc_5FCC
.text:00005FB8                 mov     edx, [ebp+var_7C0]
.text:00005FBE                 mov     eax, [ebp+var_2CC]
.text:00005FC4                 cmp     eax, [edx+0C0h]
.text:00005FCA                 jb      short loc_5FEF
.text:00005FCC
.text:00005FCC loc_5FCC:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+263Ej
.text:00005FCC                 mov     byte ptr [ebp+var_4], 0Fh
.text:00005FD0                 lea     ecx, [ebp+var_2D4] ; this
.text:00005FD6                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:00005FDB                 mov     byte ptr [ebp+var_4], 0Eh
.text:00005FDF                 lea     ecx, [ebp+var_23C]
.text:00005FE5                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00005FEA                 jmp     loc_56F1
.text:00005FEF ; ---------------------------------------------------------------------------
.text:00005FEF
.text:00005FEF loc_5FEF:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2614j
.text:00005FEF                                         ; CArc::OpenStream2(COpenOptions const &)+261Fj ...
.text:00005FEF                 lea     ecx, [ebp+var_2D4]
.text:00005FF5                 push    ecx             ; int
.text:00005FF6                 mov     edx, [ebp+var_22C]
.text:00005FFC                 push    edx             ; CArcInfoEx *
.text:00005FFD                 lea     ecx, [ebp+var_23C]
.text:00006003                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:00006008                 push    eax             ; struct IInArchive *
.text:00006009                 call    ?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z ; ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)
.text:0000600E                 mov     [ebp+var_2EC], eax
.text:00006014                 cmp     [ebp+var_2EC], 0
.text:0000601B                 jz      loc_60D4
.text:00006021                 mov     eax, [ebp+var_2EC]
.text:00006027                 mov     [ebp+var_6F4], eax
.text:0000602D                 mov     byte ptr [ebp+var_4], 0Fh
.text:00006031                 lea     ecx, [ebp+var_2D4] ; this
.text:00006037                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:0000603C                 mov     byte ptr [ebp+var_4], 0Eh
.text:00006040                 lea     ecx, [ebp+var_23C]
.text:00006046                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:0000604B                 mov     byte ptr [ebp+var_4], 0Dh
.text:0000604F                 lea     ecx, [ebp+var_200]
.text:00006055                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000605A                 mov     byte ptr [ebp+var_4], 0Ch
.text:0000605E                 lea     ecx, [ebp+var_1D0]
.text:00006064                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00006069                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000606D                 lea     ecx, [ebp+var_1C0]
.text:00006073                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00006078                 mov     byte ptr [ebp+var_4], 6
.text:0000607C                 lea     ecx, [ebp+var_1B0]
.text:00006082                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00006087                 mov     byte ptr [ebp+var_4], 3
.text:0000608B                 lea     ecx, [ebp+var_12C]
.text:00006091                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006096                 mov     byte ptr [ebp+var_4], 2
.text:0000609A                 lea     ecx, [ebp+var_60]
.text:0000609D                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000060A2                 mov     byte ptr [ebp+var_4], 1
.text:000060A6                 lea     ecx, [ebp+var_50]
.text:000060A9                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000060AE                 mov     byte ptr [ebp+var_4], 0
.text:000060B2                 lea     ecx, [ebp+var_38] ; this
.text:000060B5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000060BA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000060C1                 lea     ecx, [ebp+var_24] ; this
.text:000060C4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000060C9                 mov     eax, [ebp+var_6F4]
.text:000060CF                 jmp     loc_8F16
.text:000060D4 ; ---------------------------------------------------------------------------
.text:000060D4
.text:000060D4 loc_60D4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+26A3j
.text:000060D4                 lea     ecx, [ebp+var_2D4]
.text:000060DA                 push    ecx             ; struct NArchive::NParser::CParseItem *
.text:000060DB                 mov     ecx, [ebp+var_1A8] ; this
.text:000060E1                 call    ?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z ; NArchive::NParser::CHandler::AddItem(NArchive::NParser::CParseItem const &)
.text:000060E6                 mov     byte ptr [ebp+var_4], 0Fh
.text:000060EA                 lea     ecx, [ebp+var_2D4] ; this
.text:000060F0                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:000060F5                 mov     byte ptr [ebp+var_4], 0Eh
.text:000060F9                 lea     ecx, [ebp+var_23C]
.text:000060FF                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00006104                 jmp     loc_56F1
.text:00006109 ; ---------------------------------------------------------------------------
.text:00006109
.text:00006109 loc_6109:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1D99j
.text:00006109                 mov     byte ptr [ebp+var_4], 0Dh
.text:0000610D                 lea     ecx, [ebp+var_200]
.text:00006113                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006118                 mov     byte ptr [ebp+var_4], 0Ch
.text:0000611C                 lea     ecx, [ebp+var_1D0]
.text:00006122                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00006127                 lea     ecx, [ebp+var_2FC]
.text:0000612D                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00006132                 mov     byte ptr [ebp+var_4], 11h
.text:00006136                 lea     ecx, [ebp+var_310]
.text:0000613C                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00006141                 mov     byte ptr [ebp+var_4], 12h
.text:00006145                 mov     [ebp+var_318], 0
.text:0000614F                 mov     [ebp+var_31C], 0
.text:00006159                 jmp     short loc_616A
.text:0000615B ; ---------------------------------------------------------------------------
.text:0000615B
.text:0000615B loc_615B:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &):loc_620Bj
.text:0000615B                 mov     edx, [ebp+var_31C]
.text:00006161                 add     edx, 1
.text:00006164                 mov     [ebp+var_31C], edx
.text:0000616A
.text:0000616A loc_616A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+27E1j
.text:0000616A                 mov     eax, [ebp+arg_0]
.text:0000616D                 mov     ecx, [eax]
.text:0000616F                 add     ecx, 8
.text:00006172                 call    ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size(void)
.text:00006177                 cmp     [ebp+var_31C], eax
.text:0000617D                 jnb     loc_6210
.text:00006183                 mov     ecx, [ebp+var_318]
.text:00006189                 push    ecx
.text:0000618A                 lea     ecx, [ebp+var_2FC]
.text:00006190                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:00006195                 mov     edx, [ebp+var_31C]
.text:0000619B                 push    edx
.text:0000619C                 mov     eax, [ebp+arg_0]
.text:0000619F                 mov     ecx, [eax]
.text:000061A1                 add     ecx, 8
.text:000061A4                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:000061A9                 add     eax, 30h ; '0'
.text:000061AC                 mov     [ebp+var_320], eax
.text:000061B2                 mov     ecx, [ebp+var_320]
.text:000061B8                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:000061BD                 add     eax, [ebp+var_318]
.text:000061C3                 mov     [ebp+var_318], eax
.text:000061C9                 mov     [ebp+var_324], 0
.text:000061D3                 jmp     short loc_61E4
.text:000061D5 ; ---------------------------------------------------------------------------
.text:000061D5
.text:000061D5 loc_61D5:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2891j
.text:000061D5                 mov     ecx, [ebp+var_324]
.text:000061DB                 add     ecx, 1
.text:000061DE                 mov     [ebp+var_324], ecx
.text:000061E4
.text:000061E4 loc_61E4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+285Bj
.text:000061E4                 mov     ecx, [ebp+var_320]
.text:000061EA                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:000061EF                 cmp     [ebp+var_324], eax
.text:000061F5                 jnb     short loc_620B
.text:000061F7                 mov     edx, [ebp+var_31C]
.text:000061FD                 push    edx
.text:000061FE                 lea     ecx, [ebp+var_310]
.text:00006204                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:00006209                 jmp     short loc_61D5
.text:0000620B ; ---------------------------------------------------------------------------
.text:0000620B
.text:0000620B loc_620B:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+287Dj
.text:0000620B                 jmp     loc_615B
.text:00006210 ; ---------------------------------------------------------------------------
.text:00006210
.text:00006210 loc_6210:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2805j
.text:00006210                 push    28h ; '('       ; unsigned int
.text:00006212                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006217                 add     esp, 4
.text:0000621A                 mov     [ebp+var_6FC], eax
.text:00006220                 mov     byte ptr [ebp+var_4], 13h
.text:00006224                 cmp     [ebp+var_6FC], 0
.text:0000622B                 jz      short loc_6240
.text:0000622D                 mov     ecx, [ebp+var_6FC]
.text:00006233                 call    ??0CArchiveOpenCallback_Offset@@QAE@XZ ; CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset(void)
.text:00006238                 mov     [ebp+var_7C4], eax
.text:0000623E                 jmp     short loc_624A
.text:00006240 ; ---------------------------------------------------------------------------
.text:00006240
.text:00006240 loc_6240:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+28B3j
.text:00006240                 mov     [ebp+var_7C4], 0
.text:0000624A
.text:0000624A loc_624A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+28C6j
.text:0000624A                 mov     eax, [ebp+var_7C4]
.text:00006250                 mov     [ebp+var_6F8], eax
.text:00006256                 mov     byte ptr [ebp+var_4], 12h
.text:0000625A                 mov     ecx, [ebp+var_6F8]
.text:00006260                 mov     [ebp+var_328], ecx
.text:00006266                 mov     edx, [ebp+var_328]
.text:0000626C                 push    edx
.text:0000626D                 lea     ecx, [ebp+var_330]
.text:00006273                 call    ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(IArchiveOpenCallback *)
.text:00006278                 mov     byte ptr [ebp+var_4], 14h
.text:0000627C                 mov     [ebp+var_338], (offset loc_FFFE+2)
.text:00006286                 mov     [ebp+var_33C], 100000h
.text:00006290                 mov     [ebp+var_340], 400000h
.text:0000629A                 mov     [ebp+var_344], (offset loc_FFFE+2)
.text:000062A4                 push    (offset loc_FFFE+2)
.text:000062A9                 lea     ecx, [ebp+var_34C]
.text:000062AF                 call    ??0?$CObjArray@E@@QAE@I@Z ; CObjArray<uchar>::CObjArray<uchar>(uint)
.text:000062B4                 mov     byte ptr [ebp+var_4], 15h
.text:000062B8                 lea     ecx, [ebp+var_34C]
.text:000062BE                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000062C3                 mov     [ebp+Dst], eax
.text:000062C9                 push    (offset loc_FFFE+2) ; Size
.text:000062CE                 push    0FFh            ; Val
.text:000062D3                 mov     eax, [ebp+Dst]
.text:000062D9                 push    eax             ; Dst
.text:000062DA                 call    _memset
.text:000062DF                 add     esp, 0Ch
.text:000062E2                 push    100h            ; Size
.text:000062E7                 push    0FFh            ; Val
.text:000062EC                 lea     ecx, [ebp+var_458]
.text:000062F2                 push    ecx             ; Dst
.text:000062F3                 call    _memset
.text:000062F8                 add     esp, 0Ch
.text:000062FB                 lea     ecx, [ebp+var_310]
.text:00006301                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00006306                 cmp     eax, 0FFh
.text:0000630B                 jb      loc_63C2
.text:00006311                 mov     [ebp+var_700], 1
.text:0000631B                 mov     byte ptr [ebp+var_4], 14h
.text:0000631F                 lea     ecx, [ebp+var_34C]
.text:00006325                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000632A                 mov     byte ptr [ebp+var_4], 12h
.text:0000632E                 lea     ecx, [ebp+var_330]
.text:00006334                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00006339                 mov     byte ptr [ebp+var_4], 11h
.text:0000633D                 lea     ecx, [ebp+var_310]
.text:00006343                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006348                 mov     byte ptr [ebp+var_4], 0Ch
.text:0000634C                 lea     ecx, [ebp+var_2FC]
.text:00006352                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006357                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000635B                 lea     ecx, [ebp+var_1C0]
.text:00006361                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00006366                 mov     byte ptr [ebp+var_4], 6
.text:0000636A                 lea     ecx, [ebp+var_1B0]
.text:00006370                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00006375                 mov     byte ptr [ebp+var_4], 3
.text:00006379                 lea     ecx, [ebp+var_12C]
.text:0000637F                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006384                 mov     byte ptr [ebp+var_4], 2
.text:00006388                 lea     ecx, [ebp+var_60]
.text:0000638B                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006390                 mov     byte ptr [ebp+var_4], 1
.text:00006394                 lea     ecx, [ebp+var_50]
.text:00006397                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000639C                 mov     byte ptr [ebp+var_4], 0
.text:000063A0                 lea     ecx, [ebp+var_38] ; this
.text:000063A3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000063A8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000063AF                 lea     ecx, [ebp+var_24] ; this
.text:000063B2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000063B7                 mov     eax, [ebp+var_700]
.text:000063BD                 jmp     loc_8F16
.text:000063C2 ; ---------------------------------------------------------------------------
.text:000063C2
.text:000063C2 loc_63C2:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2993j
.text:000063C2                 lea     ecx, [ebp+var_46C]
.text:000063C8                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:000063CD                 mov     byte ptr [ebp+var_4], 16h
.text:000063D1                 push    100h
.text:000063D6                 lea     ecx, [ebp+var_478]
.text:000063DC                 call    ??0?$CObjArray@_N@@QAE@I@Z ; CObjArray<bool>::CObjArray<bool>(uint)
.text:000063E1                 mov     byte ptr [ebp+var_4], 17h
.text:000063E5                 mov     [ebp+var_480], 0
.text:000063EF                 jmp     short loc_6400
.text:000063F1 ; ---------------------------------------------------------------------------
.text:000063F1
.text:000063F1 loc_63F1:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2AA9j
.text:000063F1                 mov     edx, [ebp+var_480]
.text:000063F7                 add     edx, 1
.text:000063FA                 mov     [ebp+var_480], edx
.text:00006400
.text:00006400 loc_6400:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2A77j
.text:00006400                 cmp     [ebp+var_480], 100h
.text:0000640A                 jnb     short loc_6423
.text:0000640C                 lea     ecx, [ebp+var_478]
.text:00006412                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00006417                 mov     ecx, [ebp+var_480]
.text:0000641D                 mov     byte ptr [eax+ecx], 0
.text:00006421                 jmp     short loc_63F1
.text:00006423 ; ---------------------------------------------------------------------------
.text:00006423
.text:00006423 loc_6423:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2A92j
.text:00006423                 mov     [ebp+var_481], 0
.text:0000642A                 mov     [ebp+var_488], 0
.text:00006434                 jmp     short loc_6445
.text:00006436 ; ---------------------------------------------------------------------------
.text:00006436
.text:00006436 loc_6436:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2B01j
.text:00006436                                         ; CArc::OpenStream2(COpenOptions const &):loc_65EDj
.text:00006436                 mov     edx, [ebp+var_488]
.text:0000643C                 add     edx, 1
.text:0000643F                 mov     [ebp+var_488], edx
.text:00006445
.text:00006445 loc_6445:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2ABCj
.text:00006445                 lea     ecx, [ebp+var_50]
.text:00006448                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:0000644D                 cmp     [ebp+var_488], eax
.text:00006453                 jnb     loc_65F2
.text:00006459                 mov     eax, [ebp+var_488]
.text:0000645F                 push    eax
.text:00006460                 lea     ecx, [ebp+var_50]
.text:00006463                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00006468                 mov     ecx, [eax]
.text:0000646A                 mov     [ebp+var_48C], ecx
.text:00006470                 cmp     [ebp+var_48C], 0
.text:00006477                 jge     short loc_647B
.text:00006479                 jmp     short loc_6436
.text:0000647B ; ---------------------------------------------------------------------------
.text:0000647B
.text:0000647B loc_647B:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2AFFj
.text:0000647B                 mov     edx, [ebp+var_48C]
.text:00006481                 push    edx
.text:00006482                 mov     eax, [ebp+arg_0]
.text:00006485                 mov     ecx, [eax]
.text:00006487                 add     ecx, 8
.text:0000648A                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:0000648F                 mov     [ebp+var_490], eax
.text:00006495                 mov     [ebp+var_491], 0
.text:0000649C                 mov     ecx, [ebp+var_490]
.text:000064A2                 movzx   edx, byte ptr [ecx+29h]
.text:000064A6                 test    edx, edx
.text:000064A8                 jnz     short loc_64B6
.text:000064AA                 mov     [ebp+var_491], 1
.text:000064B1                 jmp     loc_65BB
.text:000064B6 ; ---------------------------------------------------------------------------
.text:000064B6
.text:000064B6 loc_64B6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2B30j
.text:000064B6                 mov     ecx, [ebp+var_490] ; this
.text:000064BC                 call    ?Flags_StartOpen@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_StartOpen(void)
.text:000064C1                 movzx   eax, al
.text:000064C4                 test    eax, eax
.text:000064C6                 jz      short loc_64CF
.text:000064C8                 mov     [ebp+var_491], 1
.text:000064CF
.text:000064CF loc_64CF:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2B4Ej
.text:000064CF                 mov     [ebp+var_498], 0
.text:000064D9                 jmp     short loc_64EA
.text:000064DB ; ---------------------------------------------------------------------------
.text:000064DB
.text:000064DB loc_64DB:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2BBEj
.text:000064DB                                         ; CArc::OpenStream2(COpenOptions const &)+2C3Ej
.text:000064DB                 mov     ecx, [ebp+var_498]
.text:000064E1                 add     ecx, 1
.text:000064E4                 mov     [ebp+var_498], ecx
.text:000064EA
.text:000064EA loc_64EA:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2B61j
.text:000064EA                 mov     ecx, [ebp+var_490]
.text:000064F0                 add     ecx, 30h ; '0'
.text:000064F3                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:000064F8                 cmp     [ebp+var_498], eax
.text:000064FE                 jnb     loc_65BB
.text:00006504                 mov     edx, [ebp+var_498]
.text:0000650A                 push    edx
.text:0000650B                 mov     ecx, [ebp+var_490]
.text:00006511                 add     ecx, 30h ; '0'
.text:00006514                 call    ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<uchar>>::operator[](uint)
.text:00006519                 mov     [ebp+var_49C], eax
.text:0000651F                 mov     ecx, [ebp+var_49C]
.text:00006525                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000652A                 cmp     eax, 2
.text:0000652D                 jnb     short loc_6538
.text:0000652F                 mov     [ebp+var_491], 1
.text:00006536                 jmp     short loc_64DB
.text:00006538 ; ---------------------------------------------------------------------------
.text:00006538
.text:00006538 loc_6538:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2BB5j
.text:00006538                 mov     [ebp+var_481], 1
.text:0000653F                 mov     ecx, [ebp+var_49C]
.text:00006545                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:0000654A                 movzx   esi, byte ptr [eax]
.text:0000654D                 mov     ecx, [ebp+var_49C]
.text:00006553                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00006558                 movzx   eax, byte ptr [eax+1]
.text:0000655C                 shl     eax, 8
.text:0000655F                 or      esi, eax
.text:00006561                 mov     [ebp+var_4A0], esi
.text:00006567                 mov     ecx, [ebp+var_48C]
.text:0000656D                 push    ecx
.text:0000656E
.text:0000656E loc_656E:                               ; DATA XREF: .rdata:$SG73681o
.text:0000656E                 lea     ecx, [ebp+var_2FC]
.text:00006574
.text:00006574 loc_6574:                               ; DATA XREF: .rdata:$SG73685o
.text:00006574                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00006579                 mov     edx, [eax]
.text:0000657B                 add     edx, [ebp+var_498]
.text:00006581                 mov     [ebp+var_4A4], edx
.text:00006587                 mov     eax, [ebp+Dst]
.text:0000658D                 add     eax, [ebp+var_4A0]
.text:00006593                 mov     ecx, [ebp+var_4A4]
.text:00006599                 mov     dl, [eax]
.text:0000659B                 mov     [ebp+ecx+var_458], dl
.text:000065A2                 mov     eax, [ebp+Dst]
.text:000065A8                 add     eax, [ebp+var_4A0]
.text:000065AE                 mov     cl, byte ptr [ebp+var_4A4]
.text:000065B4                 mov     [eax], cl
.text:000065B6                 jmp     loc_64DB
.text:000065BB ; ---------------------------------------------------------------------------
.text:000065BB
.text:000065BB loc_65BB:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2B39j
.text:000065BB                                         ; CArc::OpenStream2(COpenOptions const &)+2B86j
.text:000065BB                 movzx   edx, [ebp+var_491]
.text:000065C2                 test    edx, edx
.text:000065C4                 jz      short loc_65ED
.text:000065C6                 mov     eax, [ebp+var_48C]
.text:000065CC                 push    eax
.text:000065CD                 lea     ecx, [ebp+var_46C]
.text:000065D3                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:000065D8                 lea     ecx, [ebp+var_478]
.text:000065DE                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:000065E3                 mov     ecx, [ebp+var_48C]
.text:000065E9                 mov     byte ptr [eax+ecx], 1
.text:000065ED
.text:000065ED loc_65ED:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2C4Cj
.text:000065ED                 jmp     loc_6436
.text:000065F2 ; ---------------------------------------------------------------------------
.text:000065F2
.text:000065F2 loc_65F2:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2ADBj
.text:000065F2                 mov     esi, esp
.text:000065F4                 push    0
.text:000065F6                 push    0
.text:000065F8                 push    0
.text:000065FA                 push    0
.text:000065FC                 mov     eax, [ebp+arg_0]
.text:000065FF                 mov     ecx, [eax+30h]
.text:00006602                 mov     edx, [ebp+arg_0]
.text:00006605                 mov     eax, [edx+30h]
.text:00006608                 mov     ecx, [ecx]
.text:0000660A                 push    eax
.text:0000660B                 mov     edx, [ecx+10h]
.text:0000660E                 call    edx
.text:00006610                 cmp     esi, esp
.text:00006612                 call    __RTC_CheckEsp
.text:00006617                 mov     [ebp+var_4A8], eax
.text:0000661D                 cmp     [ebp+var_4A8], 0
.text:00006624                 jz      loc_66FB
.text:0000662A                 mov     eax, [ebp+var_4A8]
.text:00006630                 mov     [ebp+var_704], eax
.text:00006636                 mov     byte ptr [ebp+var_4], 16h
.text:0000663A                 lea     ecx, [ebp+var_478]
.text:00006640                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006645                 mov     byte ptr [ebp+var_4], 15h
.text:00006649                 lea     ecx, [ebp+var_46C]
.text:0000664F                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006654                 mov     byte ptr [ebp+var_4], 14h
.text:00006658                 lea     ecx, [ebp+var_34C]
.text:0000665E                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00006663                 mov     byte ptr [ebp+var_4], 12h
.text:00006667                 lea     ecx, [ebp+var_330]
.text:0000666D                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00006672                 mov     byte ptr [ebp+var_4], 11h
.text:00006676                 lea     ecx, [ebp+var_310]
.text:0000667C                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006681                 mov     byte ptr [ebp+var_4], 0Ch
.text:00006685                 lea     ecx, [ebp+var_2FC]
.text:0000668B                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006690                 mov     byte ptr [ebp+var_4], 0Ah
.text:00006694                 lea     ecx, [ebp+var_1C0]
.text:0000669A                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:0000669F                 mov     byte ptr [ebp+var_4], 6
.text:000066A3                 lea     ecx, [ebp+var_1B0]
.text:000066A9                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000066AE                 mov     byte ptr [ebp+var_4], 3
.text:000066B2                 lea     ecx, [ebp+var_12C]
.text:000066B8                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000066BD                 mov     byte ptr [ebp+var_4], 2
.text:000066C1                 lea     ecx, [ebp+var_60]
.text:000066C4                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000066C9                 mov     byte ptr [ebp+var_4], 1
.text:000066CD                 lea     ecx, [ebp+var_50]
.text:000066D0                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000066D5                 mov     byte ptr [ebp+var_4], 0
.text:000066D9                 lea     ecx, [ebp+var_38] ; this
.text:000066DC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000066E1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000066E8                 lea     ecx, [ebp+var_24] ; this
.text:000066EB                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000066F0                 mov     eax, [ebp+var_704]
.text:000066F6                 jmp     loc_8F16
.text:000066FB ; ---------------------------------------------------------------------------
.text:000066FB
.text:000066FB loc_66FB:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2CACj
.text:000066FB                 push    48h ; 'H'       ; unsigned int
.text:000066FD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006702                 add     esp, 4
.text:00006705                 mov     [ebp+var_70C], eax
.text:0000670B                 mov     byte ptr [ebp+var_4], 18h
.text:0000670F                 cmp     [ebp+var_70C], 0
.text:00006716                 jz      short loc_672B
.text:00006718                 mov     ecx, [ebp+var_70C]
.text:0000671E                 call    ??0CLimitedCachedInStream@@QAE@XZ ; CLimitedCachedInStream::CLimitedCachedInStream(void)
.text:00006723                 mov     [ebp+var_7C8], eax
.text:00006729                 jmp     short loc_6735
.text:0000672B ; ---------------------------------------------------------------------------
.text:0000672B
.text:0000672B loc_672B:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2D9Ej
.text:0000672B                 mov     [ebp+var_7C8], 0
.text:00006735
.text:00006735 loc_6735:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2DB1j
.text:00006735                 mov     ecx, [ebp+var_7C8]
.text:0000673B                 mov     [ebp+var_708], ecx
.text:00006741                 mov     byte ptr [ebp+var_4], 17h
.text:00006745                 mov     edx, [ebp+var_708]
.text:0000674B                 mov     [ebp+var_4AC], edx
.text:00006751                 mov     eax, [ebp+var_4AC]
.text:00006757                 push    eax
.text:00006758                 lea     ecx, [ebp+var_4B4]
.text:0000675E                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(IInStream *)
.text:00006763                 mov     byte ptr [ebp+var_4], 19h
.text:00006767                 mov     ecx, [ebp+arg_0]
.text:0000676A                 mov     edx, [ecx+30h]
.text:0000676D                 push    edx             ; struct IInStream *
.text:0000676E                 mov     ecx, [ebp+var_4AC] ; this
.text:00006774                 call    ?SetStream@CLimitedCachedInStream@@QAEXPAUIInStream@@@Z ; CLimitedCachedInStream::SetStream(IInStream *)
.text:00006779                 mov     eax, [ebp+arg_0]
.text:0000677C                 mov     ecx, [eax+38h]
.text:0000677F                 push    ecx
.text:00006780                 mov     ecx, [ebp+var_328]
.text:00006786                 add     ecx, 0Ch
.text:00006789                 call    ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z ; CMyComPtr<IArchiveOpenCallback>::operator=(IArchiveOpenCallback *)
.text:0000678E                 mov     edx, [ebp+arg_0]
.text:00006791                 cmp     dword ptr [edx+38h], 0
.text:00006795                 jz      short loc_67B9
.text:00006797                 mov     ecx, [ebp+var_328]
.text:0000679D                 add     ecx, 20h ; ' '
.text:000067A0                 call    ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&(void)
.text:000067A5                 push    eax
.text:000067A6                 push    offset _IID_ICryptoGetTextPassword
.text:000067AB                 mov     ecx, [ebp+var_328]
.text:000067B1                 add     ecx, 0Ch
.text:000067B4                 call    ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IArchiveOpenCallback>::QueryInterface<ICryptoGetTextPassword>(_GUID const &,ICryptoGetTextPassword * *)
.text:000067B9
.text:000067B9 loc_67B9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2E1Dj
.text:000067B9                 mov     eax, [ebp+arg_0]
.text:000067BC                 cmp     dword ptr [eax+38h], 0
.text:000067C0                 jz      loc_68DF
.text:000067C6                 mov     esi, esp
.text:000067C8                 lea     ecx, [ebp+var_118]
.text:000067CE                 push    ecx
.text:000067CF                 push    0
.text:000067D1                 mov     edx, [ebp+arg_0]
.text:000067D4                 mov     eax, [edx+38h]
.text:000067D7                 mov     ecx, [ebp+arg_0]
.text:000067DA                 mov     edx, [ecx+38h]
.text:000067DD                 mov     eax, [eax]
.text:000067DF                 push    edx
.text:000067E0                 mov     ecx, [eax+0Ch]
.text:000067E3                 call    ecx
.text:000067E5                 cmp     esi, esp
.text:000067E7                 call    __RTC_CheckEsp
.text:000067EC                 mov     [ebp+var_4BC], eax
.text:000067F2                 cmp     [ebp+var_4BC], 0
.text:000067F9                 jz      loc_68DF
.text:000067FF                 mov     edx, [ebp+var_4BC]
.text:00006805                 mov     [ebp+var_710], edx
.text:0000680B                 mov     byte ptr [ebp+var_4], 17h
.text:0000680F                 lea     ecx, [ebp+var_4B4]
.text:00006815                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000681A                 mov     byte ptr [ebp+var_4], 16h
.text:0000681E                 lea     ecx, [ebp+var_478]
.text:00006824                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006829                 mov     byte ptr [ebp+var_4], 15h
.text:0000682D                 lea     ecx, [ebp+var_46C]
.text:00006833                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006838                 mov     byte ptr [ebp+var_4], 14h
.text:0000683C                 lea     ecx, [ebp+var_34C]
.text:00006842                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00006847                 mov     byte ptr [ebp+var_4], 12h
.text:0000684B                 lea     ecx, [ebp+var_330]
.text:00006851                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00006856                 mov     byte ptr [ebp+var_4], 11h
.text:0000685A                 lea     ecx, [ebp+var_310]
.text:00006860                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006865                 mov     byte ptr [ebp+var_4], 0Ch
.text:00006869                 lea     ecx, [ebp+var_2FC]
.text:0000686F                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006874                 mov     byte ptr [ebp+var_4], 0Ah
.text:00006878                 lea     ecx, [ebp+var_1C0]
.text:0000687E                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00006883                 mov     byte ptr [ebp+var_4], 6
.text:00006887                 lea     ecx, [ebp+var_1B0]
.text:0000688D                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00006892                 mov     byte ptr [ebp+var_4], 3
.text:00006896                 lea     ecx, [ebp+var_12C]
.text:0000689C                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000068A1                 mov     byte ptr [ebp+var_4], 2
.text:000068A5                 lea     ecx, [ebp+var_60]
.text:000068A8                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000068AD                 mov     byte ptr [ebp+var_4], 1
.text:000068B1                 lea     ecx, [ebp+var_50]
.text:000068B4                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000068B9                 mov     byte ptr [ebp+var_4], 0
.text:000068BD                 lea     ecx, [ebp+var_38] ; this
.text:000068C0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000068C5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000068CC                 lea     ecx, [ebp+var_24] ; this
.text:000068CF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000068D4                 mov     eax, [ebp+var_710]
.text:000068DA                 jmp     loc_8F16
.text:000068DF ; ---------------------------------------------------------------------------
.text:000068DF
.text:000068DF loc_68DF:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2E48j
.text:000068DF                                         ; CArc::OpenStream2(COpenOptions const &)+2E81j
.text:000068DF                 mov     eax, [ebp+var_4AC]
.text:000068E5                 add     eax, 3Ch ; '<'
.text:000068E8                 mov     [ebp+var_4C0], eax
.text:000068EE                 push    400000h
.text:000068F3                 mov     ecx, [ebp+var_4C0]
.text:000068F9                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:000068FE                 mov     [ebp+var_4C8], 0
.text:00006908                 mov     [ebp+var_4C4], 0
.text:00006912                 mov     [ebp+var_4C9], 1
.text:00006919                 mov     [ebp+var_4CA], 0
.text:00006920                 mov     [ebp+var_4D4], 0
.text:0000692A                 mov     [ebp+var_4D0], 0
.text:00006934                 mov     [ebp+var_4D8], 0
.text:0000693E                 mov     [ebp+var_4E0], 0
.text:00006948                 mov     [ebp+var_4DC], 0
.text:00006952                 mov     ecx, [ebp+var_138]
.text:00006958                 movzx   edx, byte ptr [ecx+13h]
.text:0000695C                 test    edx, edx
.text:0000695E                 jnz     short loc_69CE
.text:00006960                 mov     ecx, [ebp+var_1A8]
.text:00006966                 add     ecx, 0Ch
.text:00006969                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:0000696E                 cmp     eax, 1
.text:00006971                 jnz     short loc_69CE
.text:00006973                 push    0
.text:00006975                 mov     ecx, [ebp+var_1A8]
.text:0000697B                 add     ecx, 0Ch
.text:0000697E                 call    ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[](uint)
.text:00006983                 mov     [ebp+var_4E4], eax
.text:00006989                 mov     eax, [ebp+var_4E4]
.text:0000698F                 movzx   ecx, byte ptr [eax+6Ch]
.text:00006993                 test    ecx, ecx
.text:00006995                 jnz     short loc_69CE
.text:00006997                 mov     edx, [ebp+var_4E4]
.text:0000699D                 mov     [ebp+var_7CC], edx
.text:000069A3                 mov     eax, [ebp+var_7CC]
.text:000069A9                 mov     ecx, [ebp+var_7CC]
.text:000069AF                 mov     edx, [eax]
.text:000069B1                 or      edx, [ecx+4]
.text:000069B4                 jnz     short loc_69CE
.text:000069B6                 mov     eax, [ebp+var_4E4]
.text:000069BC                 mov     ecx, [eax+8]
.text:000069BF                 mov     [ebp+var_4E0], ecx
.text:000069C5                 mov     edx, [eax+0Ch]
.text:000069C8                 mov     [ebp+var_4DC], edx
.text:000069CE
.text:000069CE loc_69CE:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2FE6j
.text:000069CE                                         ; CArc::OpenStream2(COpenOptions const &)+2FF9j ...
.text:000069CE                 mov     eax, [ebp+var_4E0]
.text:000069D4                 sub     eax, [ebp+var_4D4]
.text:000069DA                 mov     ecx, [ebp+var_4DC]
.text:000069E0                 sbb     ecx, [ebp+var_4D0]
.text:000069E6                 mov     [ebp+var_4EC], eax
.text:000069EC                 mov     [ebp+var_4E8], ecx
.text:000069F2                 movzx   edx, [ebp+var_4CA]
.text:000069F9                 test    edx, edx
.text:000069FB                 jnz     loc_6EDE
.text:00006A01                 cmp     [ebp+var_4D8], 400000h
.text:00006A0B                 jnb     loc_6CDE
.text:00006A11                 mov     eax, 400000h
.text:00006A16                 sub     eax, [ebp+var_4D8]
.text:00006A1C                 mov     [ebp+var_4F4], eax
.text:00006A22                 mov     ecx, [ebp+var_4D8]
.text:00006A28                 xor     edx, edx
.text:00006A2A                 add     ecx, [ebp+var_4D4]
.text:00006A30                 adc     edx, [ebp+var_4D0]
.text:00006A36                 mov     [ebp+var_500], ecx
.text:00006A3C                 mov     [ebp+var_4FC], edx
.text:00006A42                 mov     esi, esp
.text:00006A44                 push    0
.text:00006A46                 push    0
.text:00006A48                 mov     eax, [ebp+var_4D8]
.text:00006A4E                 xor     ecx, ecx
.text:00006A50                 add     eax, [ebp+var_4D4]
.text:00006A56                 adc     ecx, [ebp+var_4D0]
.text:00006A5C                 push    ecx
.text:00006A5D                 push    eax
.text:00006A5E                 mov     edx, [ebp+arg_0]
.text:00006A61                 mov     eax, [edx+30h]
.text:00006A64                 mov     ecx, [ebp+arg_0]
.text:00006A67                 mov     edx, [ecx+30h]
.text:00006A6A                 mov     eax, [eax]
.text:00006A6C                 push    edx
.text:00006A6D                 mov     ecx, [eax+10h]
.text:00006A70                 call    ecx
.text:00006A72                 cmp     esi, esp
.text:00006A74                 call    __RTC_CheckEsp
.text:00006A79                 mov     [ebp+var_504], eax
.text:00006A7F                 cmp     [ebp+var_504], 0
.text:00006A86                 jz      loc_6B6C
.text:00006A8C                 mov     edx, [ebp+var_504]
.text:00006A92                 mov     [ebp+var_714], edx
.text:00006A98                 mov     byte ptr [ebp+var_4], 17h
.text:00006A9C                 lea     ecx, [ebp+var_4B4]
.text:00006AA2                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00006AA7                 mov     byte ptr [ebp+var_4], 16h
.text:00006AAB                 lea     ecx, [ebp+var_478]
.text:00006AB1                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006AB6                 mov     byte ptr [ebp+var_4], 15h
.text:00006ABA                 lea     ecx, [ebp+var_46C]
.text:00006AC0                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006AC5                 mov     byte ptr [ebp+var_4], 14h
.text:00006AC9                 lea     ecx, [ebp+var_34C]
.text:00006ACF                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00006AD4                 mov     byte ptr [ebp+var_4], 12h
.text:00006AD8                 lea     ecx, [ebp+var_330]
.text:00006ADE                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00006AE3                 mov     byte ptr [ebp+var_4], 11h
.text:00006AE7                 lea     ecx, [ebp+var_310]
.text:00006AED                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006AF2                 mov     byte ptr [ebp+var_4], 0Ch
.text:00006AF6                 lea     ecx, [ebp+var_2FC]
.text:00006AFC                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006B01                 mov     byte ptr [ebp+var_4], 0Ah
.text:00006B05                 lea     ecx, [ebp+var_1C0]
.text:00006B0B                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00006B10                 mov     byte ptr [ebp+var_4], 6
.text:00006B14                 lea     ecx, [ebp+var_1B0]
.text:00006B1A                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00006B1F                 mov     byte ptr [ebp+var_4], 3
.text:00006B23                 lea     ecx, [ebp+var_12C]
.text:00006B29                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006B2E                 mov     byte ptr [ebp+var_4], 2
.text:00006B32                 lea     ecx, [ebp+var_60]
.text:00006B35                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006B3A                 mov     byte ptr [ebp+var_4], 1
.text:00006B3E                 lea     ecx, [ebp+var_50]
.text:00006B41                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00006B46                 mov     byte ptr [ebp+var_4], 0
.text:00006B4A                 lea     ecx, [ebp+var_38] ; this
.text:00006B4D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00006B52                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006B59                 lea     ecx, [ebp+var_24] ; this
.text:00006B5C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00006B61                 mov     eax, [ebp+var_714]
.text:00006B67                 jmp     loc_8F16
.text:00006B6C ; ---------------------------------------------------------------------------
.text:00006B6C
.text:00006B6C loc_6B6C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+310Ej
.text:00006B6C                 lea     eax, [ebp+var_4F4]
.text:00006B72                 push    eax             ; unsigned int *
.text:00006B73                 mov     ecx, [ebp+var_4C0]
.text:00006B79                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00006B7E                 add     eax, [ebp+var_4D8]
.text:00006B84                 push    eax             ; void *
.text:00006B85                 mov     ecx, [ebp+arg_0]
.text:00006B88                 mov     edx, [ecx+30h]
.text:00006B8B                 push    edx             ; struct ISequentialInStream *
.text:00006B8C                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00006B91                 mov     [ebp+var_508], eax
.text:00006B97                 cmp     [ebp+var_508], 0
.text:00006B9E                 jz      loc_6C84
.text:00006BA4                 mov     eax, [ebp+var_508]
.text:00006BAA                 mov     [ebp+var_718], eax
.text:00006BB0                 mov     byte ptr [ebp+var_4], 17h
.text:00006BB4                 lea     ecx, [ebp+var_4B4]
.text:00006BBA                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00006BBF                 mov     byte ptr [ebp+var_4], 16h
.text:00006BC3                 lea     ecx, [ebp+var_478]
.text:00006BC9                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006BCE                 mov     byte ptr [ebp+var_4], 15h
.text:00006BD2                 lea     ecx, [ebp+var_46C]
.text:00006BD8                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006BDD                 mov     byte ptr [ebp+var_4], 14h
.text:00006BE1                 lea     ecx, [ebp+var_34C]
.text:00006BE7                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00006BEC                 mov     byte ptr [ebp+var_4], 12h
.text:00006BF0                 lea     ecx, [ebp+var_330]
.text:00006BF6                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00006BFB                 mov     byte ptr [ebp+var_4], 11h
.text:00006BFF                 lea     ecx, [ebp+var_310]
.text:00006C05                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006C0A                 mov     byte ptr [ebp+var_4], 0Ch
.text:00006C0E                 lea     ecx, [ebp+var_2FC]
.text:00006C14                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006C19                 mov     byte ptr [ebp+var_4], 0Ah
.text:00006C1D                 lea     ecx, [ebp+var_1C0]
.text:00006C23                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00006C28                 mov     byte ptr [ebp+var_4], 6
.text:00006C2C                 lea     ecx, [ebp+var_1B0]
.text:00006C32                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00006C37                 mov     byte ptr [ebp+var_4], 3
.text:00006C3B                 lea     ecx, [ebp+var_12C]
.text:00006C41                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006C46                 mov     byte ptr [ebp+var_4], 2
.text:00006C4A                 lea     ecx, [ebp+var_60]
.text:00006C4D                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006C52                 mov     byte ptr [ebp+var_4], 1
.text:00006C56                 lea     ecx, [ebp+var_50]
.text:00006C59                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00006C5E                 mov     byte ptr [ebp+var_4], 0
.text:00006C62                 lea     ecx, [ebp+var_38] ; this
.text:00006C65                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00006C6A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006C71                 lea     ecx, [ebp+var_24] ; this
.text:00006C74                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00006C79                 mov     eax, [ebp+var_718]
.text:00006C7F                 jmp     loc_8F16
.text:00006C84 ; ---------------------------------------------------------------------------
.text:00006C84
.text:00006C84 loc_6C84:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3226j
.text:00006C84                 cmp     [ebp+var_4F4], 0
.text:00006C8B                 jnz     short loc_6CAE
.text:00006C8D                 mov     ecx, [ebp+var_500]
.text:00006C93                 mov     dword ptr [ebp+var_118], ecx
.text:00006C99                 mov     edx, [ebp+var_4FC]
.text:00006C9F                 mov     dword ptr [ebp+var_118+4], edx
.text:00006CA5                 mov     [ebp+var_4CA], 1
.text:00006CAC                 jmp     short loc_6CD9
.text:00006CAE ; ---------------------------------------------------------------------------
.text:00006CAE
.text:00006CAE loc_6CAE:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3313j
.text:00006CAE                 mov     eax, [ebp+var_4D8]
.text:00006CB4                 add     eax, [ebp+var_4F4]
.text:00006CBA                 mov     [ebp+var_4D8], eax
.text:00006CC0                 mov     ecx, [ebp+var_4D4]
.text:00006CC6                 push    ecx             ; unsigned int
.text:00006CC7                 mov     edx, [ebp+var_4F4]
.text:00006CCD                 push    edx             ; unsigned int
.text:00006CCE                 mov     ecx, [ebp+var_4AC] ; this
.text:00006CD4                 call    ?SetCache@CLimitedCachedInStream@@QAEXII@Z ; CLimitedCachedInStream::SetCache(uint,uint)
.text:00006CD9
.text:00006CD9 loc_6CD9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3334j
.text:00006CD9                 jmp     loc_69CE
.text:00006CDE ; ---------------------------------------------------------------------------
.text:00006CDE
.text:00006CDE loc_6CDE:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3093j
.text:00006CDE                 mov     eax, [ebp+var_4D8]
.text:00006CE4                 xor     ecx, ecx
.text:00006CE6                 mov     [ebp+var_7D4], eax
.text:00006CEC                 mov     [ebp+var_7D0], ecx
.text:00006CF2                 mov     edx, [ebp+var_7D0]
.text:00006CF8                 cmp     edx, [ebp+var_4E8]
.text:00006CFE                 ja      loc_6E19
.text:00006D04                 jb      short loc_6D18
.text:00006D06                 mov     eax, [ebp+var_7D4]
.text:00006D0C                 cmp     eax, [ebp+var_4EC]
.text:00006D12                 jnb     loc_6E19
.text:00006D18
.text:00006D18 loc_6D18:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+338Cj
.text:00006D18                 mov     ecx, [ebp+var_4D8]
.text:00006D1E                 xor     edx, edx
.text:00006D20                 mov     eax, [ebp+var_4EC]
.text:00006D26                 sub     eax, ecx
.text:00006D28                 mov     ecx, [ebp+var_4E8]
.text:00006D2E                 sbb     ecx, edx
.text:00006D30                 mov     [ebp+var_510], eax
.text:00006D36                 mov     [ebp+var_50C], ecx
.text:00006D3C                 cmp     [ebp+var_50C], 0
.text:00006D43                 ja      loc_6DE9
.text:00006D49                 jb      short loc_6D5B
.text:00006D4B                 cmp     [ebp+var_510], (offset loc_FFFE+2)
.text:00006D55                 ja      loc_6DE9
.text:00006D5B
.text:00006D5B loc_6D5B:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+33D1j
.text:00006D5B                 mov     edx, (offset loc_FFFE+2)
.text:00006D60                 sub     edx, [ebp+var_510]
.text:00006D66                 mov     eax, 0
.text:00006D6B                 sbb     eax, [ebp+var_50C]
.text:00006D71                 mov     [ebp+Size], edx
.text:00006D77                 mov     esi, esp
.text:00006D79                 mov     ecx, [ebp+Size]
.text:00006D7F                 push    ecx             ; Size
.text:00006D80                 mov     ecx, [ebp+var_4C0]
.text:00006D86                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00006D8B                 add     eax, [ebp+var_4D8]
.text:00006D91                 sub     eax, [ebp+Size]
.text:00006D97                 push    eax             ; Src
.text:00006D98                 mov     ecx, [ebp+var_4C0]
.text:00006D9E                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00006DA3                 push    eax             ; Dst
.text:00006DA4                 call    dword ptr ds:__imp__memmove
.text:00006DAA                 add     esp, 0Ch
.text:00006DAD                 cmp     esi, esp
.text:00006DAF                 call    __RTC_CheckEsp
.text:00006DB4                 mov     edx, [ebp+Size]
.text:00006DBA                 mov     [ebp+var_4D8], edx
.text:00006DC0                 mov     eax, [ebp+Size]
.text:00006DC6                 xor     ecx, ecx
.text:00006DC8                 mov     edx, [ebp+var_4E0]
.text:00006DCE                 sub     edx, eax
.text:00006DD0                 mov     eax, [ebp+var_4DC]
.text:00006DD6                 sbb     eax, ecx
.text:00006DD8                 mov     [ebp+var_4D4], edx
.text:00006DDE                 mov     [ebp+var_4D0], eax
.text:00006DE4                 jmp     loc_69CE
.text:00006DE9 ; ---------------------------------------------------------------------------
.text:00006DE9
.text:00006DE9 loc_6DE9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+33CBj
.text:00006DE9                                         ; CArc::OpenStream2(COpenOptions const &)+33DDj
.text:00006DE9                 mov     [ebp+var_4D8], 0
.text:00006DF3                 mov     ecx, [ebp+var_4E0]
.text:00006DF9                 sub     ecx, (offset loc_FFFE+2)
.text:00006DFF                 mov     edx, [ebp+var_4DC]
.text:00006E05                 sbb     edx, 0
.text:00006E08                 mov     [ebp+var_4D4], ecx
.text:00006E0E                 mov     [ebp+var_4D0], edx
.text:00006E14                 jmp     loc_69CE
.text:00006E19 ; ---------------------------------------------------------------------------
.text:00006E19
.text:00006E19 loc_6E19:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3386j
.text:00006E19                                         ; CArc::OpenStream2(COpenOptions const &)+339Aj
.text:00006E19                 mov     eax, [ebp+var_4D8]
.text:00006E1F                 xor     ecx, ecx
.text:00006E21                 sub     eax, [ebp+var_4EC]
.text:00006E27                 sbb     ecx, [ebp+var_4E8]
.text:00006E2D                 mov     [ebp+var_7DC], eax
.text:00006E33                 mov     [ebp+var_7D8], ecx
.text:00006E39                 cmp     [ebp+var_7D8], 0
.text:00006E40                 ja      loc_6EDE
.text:00006E46                 jb      short loc_6E58
.text:00006E48                 cmp     [ebp+var_7DC], 100000h
.text:00006E52                 jnb     loc_6EDE
.text:00006E58
.text:00006E58 loc_6E58:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+34CEj
.text:00006E58                 mov     edx, [ebp+var_4EC]
.text:00006E5E                 sub     edx, (offset loc_FFFE+2)
.text:00006E64                 mov     [ebp+var_518], edx
.text:00006E6A                 mov     eax, [ebp+var_4D8]
.text:00006E70                 sub     eax, [ebp+var_518]
.text:00006E76                 mov     esi, esp
.text:00006E78                 push    eax             ; Size
.text:00006E79                 mov     ecx, [ebp+var_4C0]
.text:00006E7F                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00006E84                 add     eax, [ebp+var_518]
.text:00006E8A                 push    eax             ; Src
.text:00006E8B                 mov     ecx, [ebp+var_4C0]
.text:00006E91                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00006E96                 push    eax             ; Dst
.text:00006E97                 call    dword ptr ds:__imp__memmove
.text:00006E9D                 add     esp, 0Ch
.text:00006EA0                 cmp     esi, esp
.text:00006EA2                 call    __RTC_CheckEsp
.text:00006EA7                 mov     ecx, [ebp+var_518]
.text:00006EAD                 xor     edx, edx
.text:00006EAF                 add     ecx, [ebp+var_4D4]
.text:00006EB5                 adc     edx, [ebp+var_4D0]
.text:00006EBB                 mov     [ebp+var_4D4], ecx
.text:00006EC1                 mov     [ebp+var_4D0], edx
.text:00006EC7                 mov     eax, [ebp+var_4D8]
.text:00006ECD                 sub     eax, [ebp+var_518]
.text:00006ED3                 mov     [ebp+var_4D8], eax
.text:00006ED9                 jmp     loc_69CE
.text:00006EDE ; ---------------------------------------------------------------------------
.text:00006EDE
.text:00006EDE loc_6EDE:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3083j
.text:00006EDE                                         ; CArc::OpenStream2(COpenOptions const &)+34C8j ...
.text:00006EDE                 mov     ecx, [ebp+var_4C8]
.text:00006EE4                 add     ecx, 800000h
.text:00006EEA                 mov     edx, [ebp+var_4C4]
.text:00006EF0                 adc     edx, 0
.text:00006EF3                 mov     [ebp+var_7E4], ecx
.text:00006EF9                 mov     [ebp+var_7E0], edx
.text:00006EFF                 mov     eax, [ebp+var_4DC]
.text:00006F05                 cmp     eax, [ebp+var_7E0]
.text:00006F0B                 jb      loc_7096
.text:00006F11                 ja      short loc_6F25
.text:00006F13                 mov     ecx, [ebp+var_4E0]
.text:00006F19                 cmp     ecx, [ebp+var_7E4]
.text:00006F1F                 jb      loc_7096
.text:00006F25
.text:00006F25 loc_6F25:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3599j
.text:00006F25                 mov     ecx, [ebp+var_1A8]
.text:00006F2B                 add     ecx, 0Ch
.text:00006F2E                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:00006F33                 xor     edx, edx
.text:00006F35                 mov     ecx, [ebp+var_328]
.text:00006F3B                 mov     [ecx+10h], eax
.text:00006F3E                 mov     [ecx+14h], edx
.text:00006F41                 mov     edx, [ebp+var_328]
.text:00006F47                 mov     eax, [ebp+var_4E0]
.text:00006F4D                 mov     [edx+18h], eax
.text:00006F50                 mov     ecx, [ebp+var_4DC]
.text:00006F56                 mov     [edx+1Ch], ecx
.text:00006F59                 lea     ecx, [ebp+var_330]
.text:00006F5F                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:00006F64                 mov     [ebp+var_7E8], eax
.text:00006F6A                 mov     esi, esp
.text:00006F6C                 push    0
.text:00006F6E                 push    0
.text:00006F70                 mov     edx, [ebp+var_7E8]
.text:00006F76                 push    edx
.text:00006F77                 mov     eax, [ebp+var_7E8]
.text:00006F7D                 mov     ecx, [eax]
.text:00006F7F                 mov     edx, [ecx+10h]
.text:00006F82                 call    edx
.text:00006F84                 cmp     esi, esp
.text:00006F86                 call    __RTC_CheckEsp
.text:00006F8B                 mov     [ebp+var_51C], eax
.text:00006F91                 cmp     [ebp+var_51C], 0
.text:00006F98                 jz      loc_707E
.text:00006F9E                 mov     eax, [ebp+var_51C]
.text:00006FA4                 mov     [ebp+var_71C], eax
.text:00006FAA                 mov     byte ptr [ebp+var_4], 17h
.text:00006FAE                 lea     ecx, [ebp+var_4B4]
.text:00006FB4                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00006FB9                 mov     byte ptr [ebp+var_4], 16h
.text:00006FBD                 lea     ecx, [ebp+var_478]
.text:00006FC3                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00006FC8                 mov     byte ptr [ebp+var_4], 15h
.text:00006FCC                 lea     ecx, [ebp+var_46C]
.text:00006FD2                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00006FD7                 mov     byte ptr [ebp+var_4], 14h
.text:00006FDB                 lea     ecx, [ebp+var_34C]
.text:00006FE1                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00006FE6                 mov     byte ptr [ebp+var_4], 12h
.text:00006FEA                 lea     ecx, [ebp+var_330]
.text:00006FF0                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00006FF5                 mov     byte ptr [ebp+var_4], 11h
.text:00006FF9                 lea     ecx, [ebp+var_310]
.text:00006FFF                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007004                 mov     byte ptr [ebp+var_4], 0Ch
.text:00007008                 lea     ecx, [ebp+var_2FC]
.text:0000700E                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007013                 mov     byte ptr [ebp+var_4], 0Ah
.text:00007017                 lea     ecx, [ebp+var_1C0]
.text:0000701D                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00007022                 mov     byte ptr [ebp+var_4], 6
.text:00007026                 lea     ecx, [ebp+var_1B0]
.text:0000702C                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007031                 mov     byte ptr [ebp+var_4], 3
.text:00007035                 lea     ecx, [ebp+var_12C]
.text:0000703B                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007040                 mov     byte ptr [ebp+var_4], 2
.text:00007044                 lea     ecx, [ebp+var_60]
.text:00007047                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000704C                 mov     byte ptr [ebp+var_4], 1
.text:00007050                 lea     ecx, [ebp+var_50]
.text:00007053                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00007058                 mov     byte ptr [ebp+var_4], 0
.text:0000705C                 lea     ecx, [ebp+var_38] ; this
.text:0000705F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007064                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000706B                 lea     ecx, [ebp+var_24] ; this
.text:0000706E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007073                 mov     eax, [ebp+var_71C]
.text:00007079                 jmp     loc_8F16
.text:0000707E ; ---------------------------------------------------------------------------
.text:0000707E
.text:0000707E loc_707E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3620j
.text:0000707E                 mov     ecx, [ebp+var_4E0]
.text:00007084                 mov     [ebp+var_4C8], ecx
.text:0000708A                 mov     edx, [ebp+var_4DC]
.text:00007090                 mov     [ebp+var_4C4], edx
.text:00007096
.text:00007096 loc_7096:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3593j
.text:00007096                                         ; CArc::OpenStream2(COpenOptions const &)+35A7j
.text:00007096                 mov     eax, [ebp+var_4D8]
.text:0000709C                 xor     ecx, ecx
.text:0000709E                 add     eax, [ebp+var_4D4]
.text:000070A4                 adc     ecx, [ebp+var_4D0]
.text:000070AA                 mov     [ebp+var_524], eax
.text:000070B0                 mov     [ebp+var_520], ecx
.text:000070B6                 mov     edx, dword ptr [ebp+var_118+4]
.text:000070BC                 cmp     edx, [ebp+var_520]
.text:000070C2                 ja      short loc_7107
.text:000070C4                 jb      short loc_70D4
.text:000070C6                 mov     eax, dword ptr [ebp+var_118]
.text:000070CC                 cmp     eax, [ebp+var_524]
.text:000070D2                 jnb     short loc_7107
.text:000070D4
.text:000070D4 loc_70D4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+374Cj
.text:000070D4                 mov     ecx, [ebp+var_14]
.text:000070D7                 mov     edx, dword ptr [ebp+var_118]
.text:000070DD                 mov     [ecx+0C0h], edx
.text:000070E3                 mov     eax, dword ptr [ebp+var_118+4]
.text:000070E9                 mov     [ecx+0C4h], eax
.text:000070EF                 mov     ecx, [ebp+var_524]
.text:000070F5                 mov     dword ptr [ebp+var_118], ecx
.text:000070FB                 mov     edx, [ebp+var_520]
.text:00007101                 mov     dword ptr [ebp+var_118+4], edx
.text:00007107
.text:00007107 loc_7107:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+374Aj
.text:00007107                                         ; CArc::OpenStream2(COpenOptions const &)+375Aj
.text:00007107                 mov     eax, [ebp+var_4EC]
.text:0000710D                 mov     ecx, [ebp+var_4D8]
.text:00007113                 sub     ecx, eax
.text:00007115                 mov     [ebp+var_528], ecx
.text:0000711B                 cmp     [ebp+var_528], 2
.text:00007122                 jnb     short loc_7129
.text:00007124                 jmp     loc_8AFD
.text:00007129 ; ---------------------------------------------------------------------------
.text:00007129
.text:00007129 loc_7129:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+37AAj
.text:00007129                 cmp     [ebp+var_528], 100000h
.text:00007133                 sbb     edx, edx
.text:00007135                 and     edx, 0FFF00002h
.text:0000713B                 add     edx, 100000h
.text:00007141                 mov     eax, [ebp+var_528]
.text:00007147                 sub     eax, edx
.text:00007149                 mov     [ebp+var_52C], eax
.text:0000714F                 mov     ecx, [ebp+var_138]
.text:00007155                 movzx   edx, byte ptr [ecx+12h]
.text:00007159                 test    edx, edx
.text:0000715B                 jnz     short loc_71D6
.text:0000715D                 mov     eax, [ebp+var_4DC]
.text:00007163                 cmp     eax, [ebp+var_6C]
.text:00007166                 jb      short loc_717A
.text:00007168                 ja      short loc_7175
.text:0000716A                 mov     ecx, [ebp+var_4E0]
.text:00007170                 cmp     ecx, [ebp+var_70]
.text:00007173                 jbe     short loc_717A
.text:00007175
.text:00007175 loc_7175:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+37F0j
.text:00007175                 jmp     loc_8AFD
.text:0000717A ; ---------------------------------------------------------------------------
.text:0000717A
.text:0000717A loc_717A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+37EEj
.text:0000717A                                         ; CArc::OpenStream2(COpenOptions const &)+37FBj
.text:0000717A                 mov     edx, [ebp+var_70]
.text:0000717D                 sub     edx, [ebp+var_4E0]
.text:00007183                 mov     eax, [ebp+var_6C]
.text:00007186                 sbb     eax, [ebp+var_4DC]
.text:0000718C                 mov     [ebp+var_534], edx
.text:00007192                 mov     [ebp+var_530], eax
.text:00007198                 mov     ecx, [ebp+var_52C]
.text:0000719E                 xor     edx, edx
.text:000071A0                 mov     [ebp+var_7F0], ecx
.text:000071A6                 mov     [ebp+var_7EC], edx
.text:000071AC                 mov     eax, [ebp+var_7EC]
.text:000071B2                 cmp     eax, [ebp+var_530]
.text:000071B8                 jb      short loc_71D6
.text:000071BA                 ja      short loc_71CA
.text:000071BC                 mov     ecx, [ebp+var_7F0]
.text:000071C2                 cmp     ecx, [ebp+var_534]
.text:000071C8                 jbe     short loc_71D6
.text:000071CA
.text:000071CA loc_71CA:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3842j
.text:000071CA                 mov     edx, [ebp+var_534]
.text:000071D0                 mov     [ebp+var_52C], edx
.text:000071D6
.text:000071D6 loc_71D6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+37E3j
.text:000071D6                                         ; CArc::OpenStream2(COpenOptions const &)+3840j ...
.text:000071D6                 mov     eax, [ebp+var_52C]
.text:000071DC                 add     eax, 1
.text:000071DF                 mov     [ebp+var_52C], eax
.text:000071E5                 mov     ecx, [ebp+var_4C0]
.text:000071EB                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000071F0                 mov     ecx, [ebp+var_4EC]
.text:000071F6                 add     eax, ecx
.text:000071F8                 mov     [ebp+var_538], eax
.text:000071FE                 mov     [ebp+var_53C], 0
.text:00007208                 movzx   edx, [ebp+var_4C9]
.text:0000720F                 test    edx, edx
.text:00007211                 jnz     loc_72A1
.text:00007217                 jmp     short loc_7228
.text:00007219 ; ---------------------------------------------------------------------------
.text:00007219
.text:00007219 loc_7219:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+38F4j
.text:00007219                 mov     eax, [ebp+var_53C]
.text:0000721F                 add     eax, 1
.text:00007222                 mov     [ebp+var_53C], eax
.text:00007228
.text:00007228 loc_7228:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+389Fj
.text:00007228                 mov     ecx, [ebp+var_53C]
.text:0000722E                 cmp     ecx, [ebp+var_52C]
.text:00007234                 jnb     short loc_726E
.text:00007236                 mov     edx, [ebp+var_538]
.text:0000723C                 add     edx, [ebp+var_53C]
.text:00007242                 movzx   eax, byte ptr [edx]
.text:00007245                 mov     ecx, [ebp+var_538]
.text:0000724B                 add     ecx, [ebp+var_53C]
.text:00007251                 movzx   edx, byte ptr [ecx+1]
.text:00007255                 shl     edx, 8
.text:00007258                 or      eax, edx
.text:0000725A                 mov     ecx, [ebp+Dst]
.text:00007260                 movzx   edx, byte ptr [ecx+eax]
.text:00007264                 cmp     edx, 0FFh
.text:0000726A                 jnz     short loc_726E
.text:0000726C                 jmp     short loc_7219
.text:0000726E ; ---------------------------------------------------------------------------
.text:0000726E
.text:0000726E loc_726E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+38BCj
.text:0000726E                                         ; CArc::OpenStream2(COpenOptions const &)+38F2j
.text:0000726E                 mov     eax, [ebp+var_53C]
.text:00007274                 xor     ecx, ecx
.text:00007276                 add     eax, [ebp+var_4E0]
.text:0000727C                 adc     ecx, [ebp+var_4DC]
.text:00007282                 mov     [ebp+var_4E0], eax
.text:00007288                 mov     [ebp+var_4DC], ecx
.text:0000728E                 mov     edx, [ebp+var_53C]
.text:00007294                 cmp     edx, [ebp+var_52C]
.text:0000729A                 jnz     short loc_72A1
.text:0000729C                 jmp     loc_69CE
.text:000072A1 ; ---------------------------------------------------------------------------
.text:000072A1
.text:000072A1 loc_72A1:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3899j
.text:000072A1                                         ; CArc::OpenStream2(COpenOptions const &)+3922j
.text:000072A1                 mov     eax, [ebp+var_538]
.text:000072A7                 add     eax, [ebp+var_53C]
.text:000072AD                 movzx   ecx, byte ptr [eax]
.text:000072B0                 mov     edx, [ebp+var_538]
.text:000072B6                 add     edx, [ebp+var_53C]
.text:000072BC                 movzx   eax, byte ptr [edx+1]
.text:000072C0                 shl     eax, 8
.text:000072C3                 or      ecx, eax
.text:000072C5                 mov     [ebp+var_540], ecx
.text:000072CB                 mov     [ebp+var_541], 1
.text:000072D2                 mov     ecx, [ebp+Dst]
.text:000072D8                 add     ecx, [ebp+var_540]
.text:000072DE                 movzx   edx, byte ptr [ecx]
.text:000072E1                 mov     [ebp+var_548], edx
.text:000072E7                 mov     [ebp+var_54C], 0
.text:000072F1                 mov     [ebp+var_54D], 0
.text:000072F8
.text:000072F8 loc_72F8:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3A62j
.text:000072F8                                         ; CArc::OpenStream2(COpenOptions const &):loc_742Ej ...
.text:000072F8                 movzx   eax, [ebp+var_4C9]
.text:000072FF                 test    eax, eax
.text:00007301                 jz      short loc_7357
.text:00007303                 lea     ecx, [ebp+var_46C]
.text:00007309                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:0000730E                 cmp     [ebp+var_54C], eax
.text:00007314                 jnb     short loc_7357
.text:00007316                 mov     ecx, [ebp+var_54C]
.text:0000731C                 mov     [ebp+var_7F4], ecx
.text:00007322                 mov     edx, [ebp+var_54C]
.text:00007328                 add     edx, 1
.text:0000732B                 mov     [ebp+var_54C], edx
.text:00007331                 mov     eax, [ebp+var_7F4]
.text:00007337                 push    eax
.text:00007338                 lea     ecx, [ebp+var_46C]
.text:0000733E                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00007343                 mov     ecx, [eax]
.text:00007345                 mov     [ebp+var_554], ecx
.text:0000734B                 mov     [ebp+var_555], 1
.text:00007352                 jmp     loc_74A4
.text:00007357 ; ---------------------------------------------------------------------------
.text:00007357
.text:00007357 loc_7357:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3989j
.text:00007357                                         ; CArc::OpenStream2(COpenOptions const &)+399Cj
.text:00007357                 cmp     [ebp+var_548], 0FFh
.text:00007361                 jnz     short loc_7368
.text:00007363                 jmp     loc_8A97
.text:00007368 ; ---------------------------------------------------------------------------
.text:00007368
.text:00007368 loc_7368:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+39E9j
.text:00007368                 mov     edx, [ebp+var_548]
.text:0000736E                 push    edx
.text:0000736F                 lea     ecx, [ebp+var_310]
.text:00007375                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:0000737A                 mov     eax, [eax]
.text:0000737C                 mov     [ebp+var_554], eax
.text:00007382                 mov     ecx, [ebp+var_554]
.text:00007388                 push    ecx
.text:00007389                 lea     ecx, [ebp+var_2FC]
.text:0000738F                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00007394                 mov     edx, [ebp+var_548]
.text:0000739A                 sub     edx, [eax]
.text:0000739C                 mov     [ebp+var_55C], edx
.text:000073A2                 mov     eax, [ebp+var_548]
.text:000073A8                 movzx   ecx, [ebp+eax+var_458]
.text:000073B0                 mov     [ebp+var_548], ecx
.text:000073B6                 movzx   edx, [ebp+var_4C9]
.text:000073BD                 test    edx, edx
.text:000073BF                 jz      short loc_73DF
.text:000073C1                 lea     ecx, [ebp+var_478]
.text:000073C7                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:000073CC                 mov     ecx, [ebp+var_554]
.text:000073D2                 movzx   edx, byte ptr [eax+ecx]
.text:000073D6                 test    edx, edx
.text:000073D8                 jz      short loc_73DF
.text:000073DA                 jmp     loc_72F8
.text:000073DF ; ---------------------------------------------------------------------------
.text:000073DF
.text:000073DF loc_73DF:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3A47j
.text:000073DF                                         ; CArc::OpenStream2(COpenOptions const &)+3A60j
.text:000073DF                 mov     eax, [ebp+var_554]
.text:000073E5                 push    eax
.text:000073E6                 mov     ecx, [ebp+arg_0]
.text:000073E9                 mov     ecx, [ecx]
.text:000073EB                 add     ecx, 8
.text:000073EE                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:000073F3                 mov     [ebp+var_560], eax
.text:000073F9                 mov     edx, [ebp+var_560]
.text:000073FF                 mov     eax, [edx+2Ch]
.text:00007402                 xor     ecx, ecx
.text:00007404                 mov     [ebp+var_7FC], eax
.text:0000740A                 mov     [ebp+var_7F8], ecx
.text:00007410                 mov     edx, [ebp+var_4DC]
.text:00007416                 cmp     edx, [ebp+var_7F8]
.text:0000741C                 ja      short loc_7433
.text:0000741E                 jb      short loc_742E
.text:00007420                 mov     eax, [ebp+var_4E0]
.text:00007426                 cmp     eax, [ebp+var_7FC]
.text:0000742C                 jnb     short loc_7433
.text:0000742E
.text:0000742E loc_742E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3AA6j
.text:0000742E                 jmp     loc_72F8
.text:00007433 ; ---------------------------------------------------------------------------
.text:00007433
.text:00007433 loc_7433:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3AA4j
.text:00007433                                         ; CArc::OpenStream2(COpenOptions const &)+3AB4j
.text:00007433                 mov     ecx, [ebp+var_55C]
.text:00007439                 push    ecx
.text:0000743A                 mov     ecx, [ebp+var_560]
.text:00007440                 add     ecx, 30h ; '0'
.text:00007443                 call    ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<uchar>>::operator[](uint)
.text:00007448                 mov     [ebp+var_564], eax
.text:0000744E                 mov     ecx, [ebp+var_564]
.text:00007454                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00007459                 add     eax, [ebp+var_53C]
.text:0000745F                 cmp     eax, [ebp+var_528]
.text:00007465                 ja      short loc_7498
.text:00007467                 mov     ecx, [ebp+var_564]
.text:0000746D                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00007472                 push    eax
.text:00007473                 mov     ecx, [ebp+var_564]
.text:00007479                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:0000747E                 push    eax
.text:0000747F                 mov     edx, [ebp+var_538]
.text:00007485                 add     edx, [ebp+var_53C]
.text:0000748B                 push    edx
.text:0000748C                 call    ?TestSignature@@YG_NPBE0I@Z ; TestSignature(uchar const *,uchar const *,uint)
.text:00007491                 movzx   eax, al
.text:00007494                 test    eax, eax
.text:00007496                 jnz     short loc_749D
.text:00007498
.text:00007498 loc_7498:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3AEDj
.text:00007498                 jmp     loc_72F8
.text:0000749D ; ---------------------------------------------------------------------------
.text:0000749D
.text:0000749D loc_749D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3B1Ej
.text:0000749D                 mov     [ebp+var_555], 0
.text:000074A4
.text:000074A4 loc_74A4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+39DAj
.text:000074A4                 mov     ecx, [ebp+var_554]
.text:000074AA                 push    ecx
.text:000074AB                 mov     edx, [ebp+arg_0]
.text:000074AE                 mov     ecx, [edx]
.text:000074B0                 add     ecx, 8
.text:000074B3                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:000074B8                 mov     [ebp+var_568], eax
.text:000074BE                 movzx   eax, [ebp+var_555]
.text:000074C5                 test    eax, eax
.text:000074C7                 jz      short loc_74D7
.text:000074C9                 mov     ecx, [ebp+var_4E0]
.text:000074CF                 or      ecx, [ebp+var_4DC]
.text:000074D5                 jz      short loc_750A
.text:000074D7
.text:000074D7 loc_74D7:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3B4Fj
.text:000074D7                 mov     edx, [ebp+var_568]
.text:000074DD                 mov     eax, [edx+2Ch]
.text:000074E0                 xor     ecx, ecx
.text:000074E2                 mov     [ebp+var_804], eax
.text:000074E8                 mov     [ebp+var_800], ecx
.text:000074EE                 mov     edx, [ebp+var_804]
.text:000074F4                 cmp     edx, [ebp+var_4E0]
.text:000074FA                 jnz     short loc_7528
.text:000074FC                 mov     eax, [ebp+var_800]
.text:00007502                 cmp     eax, [ebp+var_4DC]
.text:00007508                 jnz     short loc_7528
.text:0000750A
.text:0000750A loc_750A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3B5Dj
.text:0000750A                 lea     ecx, [ebp+var_12C]
.text:00007510                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00007515                 mov     ecx, [ebp+var_554]
.text:0000751B                 movzx   edx, byte ptr [eax+ecx]
.text:0000751F                 test    edx, edx
.text:00007521                 jz      short loc_7528
.text:00007523                 jmp     loc_72F8
.text:00007528 ; ---------------------------------------------------------------------------
.text:00007528
.text:00007528 loc_7528:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3B82j
.text:00007528                                         ; CArc::OpenStream2(COpenOptions const &)+3B90j ...
.text:00007528                 mov     eax, [ebp+var_4E0]
.text:0000752E                 mov     dword ptr [ebp+var_570], eax
.text:00007534                 mov     ecx, [ebp+var_4DC]
.text:0000753A                 mov     dword ptr [ebp+var_570+4], ecx
.text:00007540                 movzx   edx, [ebp+var_555]
.text:00007547                 test    edx, edx
.text:00007549                 jnz     short loc_75AC
.text:0000754B                 mov     eax, [ebp+var_568]
.text:00007551                 mov     ecx, [eax+2Ch]
.text:00007554                 xor     edx, edx
.text:00007556                 mov     [ebp+var_80C], ecx
.text:0000755C                 mov     [ebp+var_808], edx
.text:00007562                 mov     eax, [ebp+var_4DC]
.text:00007568                 cmp     eax, [ebp+var_808]
.text:0000756E                 ja      short loc_7585
.text:00007570                 jb      short loc_7580
.text:00007572                 mov     ecx, [ebp+var_4E0]
.text:00007578                 cmp     ecx, [ebp+var_80C]
.text:0000757E                 jnb     short loc_7585
.text:00007580
.text:00007580 loc_7580:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3BF8j
.text:00007580                 jmp     loc_72F8
.text:00007585 ; ---------------------------------------------------------------------------
.text:00007585
.text:00007585 loc_7585:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3BF6j
.text:00007585                                         ; CArc::OpenStream2(COpenOptions const &)+3C06j
.text:00007585                 mov     edx, [ebp+var_568]
.text:0000758B                 mov     eax, [edx+2Ch]
.text:0000758E                 xor     ecx, ecx
.text:00007590                 mov     edx, [ebp+var_4E0]
.text:00007596                 sub     edx, eax
.text:00007598                 mov     eax, [ebp+var_4DC]
.text:0000759E                 sbb     eax, ecx
.text:000075A0                 mov     dword ptr [ebp+var_570], edx
.text:000075A6                 mov     dword ptr [ebp+var_570+4], eax
.text:000075AC
.text:000075AC loc_75AC:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3BD1j
.text:000075AC                 mov     ecx, [ebp+var_568]
.text:000075B2                 cmp     dword ptr [ecx+8], 0
.text:000075B6                 jz      loc_766E
.text:000075BC                 mov     edx, dword ptr [ebp+var_570+4]
.text:000075C2                 cmp     edx, [ebp+var_4D0]
.text:000075C8                 jb      loc_766E
.text:000075CE                 ja      short loc_75E2
.text:000075D0                 mov     eax, dword ptr [ebp+var_570]
.text:000075D6                 cmp     eax, [ebp+var_4D4]
.text:000075DC                 jb      loc_766E
.text:000075E2
.text:000075E2 loc_75E2:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3C56j
.text:000075E2                 mov     ecx, dword ptr [ebp+var_570]
.text:000075E8                 sub     ecx, [ebp+var_4D4]
.text:000075EE                 mov     edx, dword ptr [ebp+var_570+4]
.text:000075F4                 sbb     edx, [ebp+var_4D0]
.text:000075FA                 mov     [ebp+var_574], ecx
.text:00007600                 mov     eax, [ebp+var_574]
.text:00007606                 cmp     eax, [ebp+var_4D8]
.text:0000760C                 jnb     short loc_766E
.text:0000760E                 mov     ecx, [ebp+var_4D8]
.text:00007614                 sub     ecx, [ebp+var_574]
.text:0000761A                 mov     esi, esp
.text:0000761C                 push    ecx
.text:0000761D                 mov     ecx, [ebp+var_4C0]
.text:00007623                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00007628                 add     eax, [ebp+var_574]
.text:0000762E                 push    eax
.text:0000762F                 mov     edx, [ebp+var_568]
.text:00007635                 mov     eax, [edx+8]
.text:00007638                 call    eax
.text:0000763A                 cmp     esi, esp
.text:0000763C                 call    __RTC_CheckEsp
.text:00007641                 mov     [ebp+var_578], eax
.text:00007647                 cmp     [ebp+var_578], 0
.text:0000764E                 jnz     short loc_7655
.text:00007650                 jmp     loc_72F8
.text:00007655 ; ---------------------------------------------------------------------------
.text:00007655
.text:00007655 loc_7655:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3CD6j
.text:00007655                 cmp     [ebp+var_578], 2
.text:0000765C                 jnz     short loc_766E
.text:0000765E                 movzx   ecx, [ebp+var_4CA]
.text:00007665                 test    ecx, ecx
.text:00007667                 jz      short loc_766E
.text:00007669                 jmp     loc_72F8
.text:0000766E ; ---------------------------------------------------------------------------
.text:0000766E
.text:0000766E loc_766E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3C3Ej
.text:0000766E                                         ; CArc::OpenStream2(COpenOptions const &)+3C50j ...
.text:0000766E                 lea     ecx, [ebp+var_60]
.text:00007671                 call    ??B?$CObjArray@_N@@QAEPA_NXZ ; CObjArray<bool>::operator bool *(void)
.text:00007676                 mov     edx, [ebp+var_554]
.text:0000767C                 mov     al, [eax+edx]
.text:0000767F                 mov     [ebp+var_579], al
.text:00007685                 movzx   ecx, [ebp+var_71]
.text:00007689                 push    ecx             ; bool
.text:0000768A                 movzx   edx, [ebp+var_579]
.text:00007691                 push    edx             ; bool
.text:00007692                 movzx   eax, [ebp+var_72]
.text:00007696                 push    eax             ; bool
.text:00007697                 mov     ecx, [ebp+var_138] ; this
.text:0000769D                 call    ?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z ; COpenType::GetSpec(bool,bool,bool)
.text:000076A2                 mov     [ebp+var_580], eax
.text:000076A8                 lea     ecx, [ebp+var_588]
.text:000076AE                 call    ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>(void)
.text:000076B3                 mov     byte ptr [ebp+var_4], 1Ah
.text:000076B7                 lea     ecx, [ebp+var_588]
.text:000076BD                 push    ecx
.text:000076BE                 mov     edx, [ebp+var_554]
.text:000076C4                 push    edx
.text:000076C5                 mov     eax, [ebp+arg_0]
.text:000076C8                 push    eax
.text:000076C9                 mov     ecx, [ebp+var_14]
.text:000076CC                 call    ?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z ; CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)
.text:000076D1                 mov     [ebp+var_590], eax
.text:000076D7                 cmp     [ebp+var_590], 0
.text:000076DE                 jz      loc_77D3
.text:000076E4                 mov     ecx, [ebp+var_590]
.text:000076EA                 mov     [ebp+var_720], ecx
.text:000076F0                 mov     byte ptr [ebp+var_4], 19h
.text:000076F4                 lea     ecx, [ebp+var_588]
.text:000076FA                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000076FF                 mov     byte ptr [ebp+var_4], 17h
.text:00007703                 lea     ecx, [ebp+var_4B4]
.text:00007709                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000770E                 mov     byte ptr [ebp+var_4], 16h
.text:00007712                 lea     ecx, [ebp+var_478]
.text:00007718                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000771D                 mov     byte ptr [ebp+var_4], 15h
.text:00007721                 lea     ecx, [ebp+var_46C]
.text:00007727                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000772C                 mov     byte ptr [ebp+var_4], 14h
.text:00007730                 lea     ecx, [ebp+var_34C]
.text:00007736                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000773B                 mov     byte ptr [ebp+var_4], 12h
.text:0000773F                 lea     ecx, [ebp+var_330]
.text:00007745                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:0000774A                 mov     byte ptr [ebp+var_4], 11h
.text:0000774E                 lea     ecx, [ebp+var_310]
.text:00007754                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007759                 mov     byte ptr [ebp+var_4], 0Ch
.text:0000775D                 lea     ecx, [ebp+var_2FC]
.text:00007763                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007768                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000776C                 lea     ecx, [ebp+var_1C0]
.text:00007772                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00007777                 mov     byte ptr [ebp+var_4], 6
.text:0000777B                 lea     ecx, [ebp+var_1B0]
.text:00007781                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007786                 mov     byte ptr [ebp+var_4], 3
.text:0000778A                 lea     ecx, [ebp+var_12C]
.text:00007790                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007795                 mov     byte ptr [ebp+var_4], 2
.text:00007799                 lea     ecx, [ebp+var_60]
.text:0000779C                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000077A1                 mov     byte ptr [ebp+var_4], 1
.text:000077A5                 lea     ecx, [ebp+var_50]
.text:000077A8                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000077AD                 mov     byte ptr [ebp+var_4], 0
.text:000077B1                 lea     ecx, [ebp+var_38] ; this
.text:000077B4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000077B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000077C0                 lea     ecx, [ebp+var_24] ; this
.text:000077C3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000077C8                 mov     eax, [ebp+var_720]
.text:000077CE                 jmp     loc_8F16
.text:000077D3 ; ---------------------------------------------------------------------------
.text:000077D3
.text:000077D3 loc_77D3:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3D66j
.text:000077D3                 lea     ecx, [ebp+var_588]
.text:000077D9                 call    ??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ ; CMyComPtr<IInArchive>::operator!(void)
.text:000077DE                 movzx   edx, al
.text:000077E1                 test    edx, edx
.text:000077E3                 jz      loc_78D6
.text:000077E9                 mov     [ebp+var_724], 80004005h
.text:000077F3                 mov     byte ptr [ebp+var_4], 19h
.text:000077F7                 lea     ecx, [ebp+var_588]
.text:000077FD                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007802                 mov     byte ptr [ebp+var_4], 17h
.text:00007806                 lea     ecx, [ebp+var_4B4]
.text:0000780C                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00007811                 mov     byte ptr [ebp+var_4], 16h
.text:00007815                 lea     ecx, [ebp+var_478]
.text:0000781B                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007820                 mov     byte ptr [ebp+var_4], 15h
.text:00007824                 lea     ecx, [ebp+var_46C]
.text:0000782A                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000782F                 mov     byte ptr [ebp+var_4], 14h
.text:00007833                 lea     ecx, [ebp+var_34C]
.text:00007839                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000783E                 mov     byte ptr [ebp+var_4], 12h
.text:00007842                 lea     ecx, [ebp+var_330]
.text:00007848                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:0000784D                 mov     byte ptr [ebp+var_4], 11h
.text:00007851                 lea     ecx, [ebp+var_310]
.text:00007857                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000785C                 mov     byte ptr [ebp+var_4], 0Ch
.text:00007860                 lea     ecx, [ebp+var_2FC]
.text:00007866                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000786B                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000786F                 lea     ecx, [ebp+var_1C0]
.text:00007875                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:0000787A                 mov     byte ptr [ebp+var_4], 6
.text:0000787E                 lea     ecx, [ebp+var_1B0]
.text:00007884                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007889                 mov     byte ptr [ebp+var_4], 3
.text:0000788D                 lea     ecx, [ebp+var_12C]
.text:00007893                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007898                 mov     byte ptr [ebp+var_4], 2
.text:0000789C                 lea     ecx, [ebp+var_60]
.text:0000789F                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000078A4                 mov     byte ptr [ebp+var_4], 1
.text:000078A8                 lea     ecx, [ebp+var_50]
.text:000078AB                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000078B0                 mov     byte ptr [ebp+var_4], 0
.text:000078B4                 lea     ecx, [ebp+var_38] ; this
.text:000078B7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000078BC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000078C3                 lea     ecx, [ebp+var_24] ; this
.text:000078C6                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000078CB                 mov     eax, [ebp+var_724]
.text:000078D1                 jmp     loc_8F16
.text:000078D6 ; ---------------------------------------------------------------------------
.text:000078D6
.text:000078D6 loc_78D6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3E6Bj
.text:000078D6                 mov     eax, dword ptr [ebp+var_118]
.text:000078DC                 sub     eax, dword ptr [ebp+var_570]
.text:000078E2                 mov     ecx, dword ptr [ebp+var_118+4]
.text:000078E8                 sbb     ecx, dword ptr [ebp+var_570+4]
.text:000078EE                 mov     dword ptr [ebp+var_598], eax
.text:000078F4                 mov     dword ptr [ebp+var_598+4], ecx
.text:000078FA                 mov     [ebp+var_5A0], 0
.text:00007904                 mov     [ebp+var_59C], 0
.text:0000790E                 mov     ecx, [ebp+var_568] ; this
.text:00007914                 call    ?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_UseGlobalOffset(void)
.text:00007919                 movzx   edx, al
.text:0000791C                 test    edx, edx
.text:0000791E                 jz      short loc_797F
.text:00007920                 mov     eax, dword ptr [ebp+var_118+4]
.text:00007926                 push    eax
.text:00007927                 mov     ecx, dword ptr [ebp+var_118]
.text:0000792D                 push    ecx             ; unsigned __int64
.text:0000792E                 push    0
.text:00007930                 push    0               ; unsigned __int64
.text:00007932                 mov     ecx, [ebp+var_4AC] ; this
.text:00007938                 call    ?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z ; CLimitedCachedInStream::InitAndSeek(unsigned __int64,unsigned __int64)
.text:0000793D                 lea     ecx, [ebp+var_4B4]
.text:00007943                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00007948                 mov     [ebp+var_810], eax
.text:0000794E                 mov     esi, esp
.text:00007950                 push    0
.text:00007952                 push    0
.text:00007954                 mov     edx, dword ptr [ebp+var_570+4]
.text:0000795A                 push    edx
.text:0000795B                 mov     eax, dword ptr [ebp+var_570]
.text:00007961                 push    eax
.text:00007962                 mov     ecx, [ebp+var_810]
.text:00007968                 push    ecx
.text:00007969                 mov     edx, [ebp+var_810]
.text:0000796F                 mov     eax, [edx]
.text:00007971                 mov     ecx, [eax+10h]
.text:00007974                 call    ecx
.text:00007976                 cmp     esi, esp
.text:00007978                 call    __RTC_CheckEsp
.text:0000797D                 jmp     short loc_79BE
.text:0000797F ; ---------------------------------------------------------------------------
.text:0000797F
.text:0000797F loc_797F:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3FA6j
.text:0000797F                 mov     edx, dword ptr [ebp+var_598+4]
.text:00007985                 push    edx
.text:00007986                 mov     eax, dword ptr [ebp+var_598]
.text:0000798C                 push    eax             ; unsigned __int64
.text:0000798D                 mov     ecx, dword ptr [ebp+var_570+4]
.text:00007993                 push    ecx
.text:00007994                 mov     edx, dword ptr [ebp+var_570]
.text:0000799A                 push    edx             ; unsigned __int64
.text:0000799B                 mov     ecx, [ebp+var_4AC] ; this
.text:000079A1                 call    ?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z ; CLimitedCachedInStream::InitAndSeek(unsigned __int64,unsigned __int64)
.text:000079A6                 mov     eax, dword ptr [ebp+var_570]
.text:000079AC                 mov     [ebp+var_5A0], eax
.text:000079B2                 mov     ecx, dword ptr [ebp+var_570+4]
.text:000079B8                 mov     [ebp+var_59C], ecx
.text:000079BE
.text:000079BE loc_79BE:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4005j
.text:000079BE                 mov     [ebp+var_5AC], 0
.text:000079C8                 mov     [ebp+var_5A8], 0
.text:000079D2                 mov     ecx, [ebp+var_1A8]
.text:000079D8                 add     ecx, 0Ch
.text:000079DB                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:000079E0                 xor     edx, edx
.text:000079E2                 mov     ecx, [ebp+var_328]
.text:000079E8                 mov     [ecx+10h], eax
.text:000079EB                 mov     [ecx+14h], edx
.text:000079EE                 mov     edx, [ebp+var_328]
.text:000079F4                 mov     eax, dword ptr [ebp+var_570]
.text:000079FA                 mov     [edx+18h], eax
.text:000079FD                 mov     ecx, dword ptr [ebp+var_570+4]
.text:00007A03                 mov     [edx+1Ch], ecx
.text:00007A06                 mov     edx, [ebp+var_1B8]
.text:00007A0C                 mov     dword ptr [edx+10h], 0
.text:00007A13                 mov     dword ptr [edx+14h], 0
.text:00007A1A                 mov     eax, [ebp+var_1B8]
.text:00007A20                 mov     ecx, dword ptr [ebp+var_570]
.text:00007A26                 mov     [eax+18h], ecx
.text:00007A29                 mov     edx, dword ptr [ebp+var_570+4]
.text:00007A2F                 mov     [eax+1Ch], edx
.text:00007A32
.text:00007A32 loc_7A32:                               ; DATA XREF: .rdata:$SG73701o
.text:00007A32                 lea     ecx, [ebp+var_1C0]
.text:00007A38                 call    ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *(void)
.text:00007A3D                 push    eax
.text:00007A3E                 lea     ecx, [ebp+var_330]
.text:00007A44                 call    ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *(void)
.text:00007A49                 push    eax
.text:00007A4A                 lea     eax, [ebp+var_5AC]
.text:00007A50                 push    eax
.text:00007A51                 lea     ecx, [ebp+var_4B4]
.text:00007A57                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00007A5C                 push    eax
.text:00007A5D                 push    1
.text:00007A5F                 lea     ecx, [ebp+var_588]
.text:00007A65                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:00007A6A                 push    eax
.text:00007A6B                 call    ?OpenArchiveSpec@@YGJPAUIInArchive@@_NPAUIInStream@@PB_KPAUIArchiveOpenCallback@@PAUIArchiveExtractCallback@@@Z ; OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)
.text:00007A70                 mov     [ebp+var_5B4], eax
.text:00007A76
.text:00007A76 loc_7A76:                               ; DATA XREF: .rdata:$SG73702o
.text:00007A76                 mov     ecx, [ebp+var_568] ; this
.text:00007A7C                 call    ?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_UseGlobalOffset(void)
.text:00007A81                 movzx   ecx, al
.text:00007A84                 test    ecx, ecx
.text:00007A86                 jz      short loc_7A9E
.text:00007A88                 mov     dword ptr [ebp+var_818], 0
.text:00007A92                 mov     dword ptr [ebp+var_818+4], 0
.text:00007A9C                 jmp     short loc_7AB6
.text:00007A9E ; ---------------------------------------------------------------------------
.text:00007A9E
.text:00007A9E loc_7A9E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+410Ej
.text:00007A9E                 mov     edx, dword ptr [ebp+var_570]
.text:00007AA4                 mov     dword ptr [ebp+var_818], edx
.text:00007AAA                 mov     eax, dword ptr [ebp+var_570+4]
.text:00007AB0                 mov     dword ptr [ebp+var_818+4], eax
.text:00007AB6
.text:00007AB6 loc_7AB6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4124j
.text:00007AB6                 mov     ecx, [ebp+var_5B4]
.text:00007ABC                 push    ecx             ; __int32
.text:00007ABD                 mov     edx, dword ptr [ebp+var_818+4]
.text:00007AC3                 push    edx
.text:00007AC4                 mov     eax, dword ptr [ebp+var_818]
.text:00007ACA                 push    eax             ; unsigned __int64
.text:00007ACB                 lea     ecx, [ebp+var_588]
.text:00007AD1                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:00007AD6                 push    eax             ; struct IInArchive *
.text:00007AD7                 mov     ecx, [ebp+var_14] ; this
.text:00007ADA                 call    ?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z ; CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)
.text:00007ADF                 mov     [ebp+var_5B8], eax
.text:00007AE5                 cmp     [ebp+var_5B8], 0
.text:00007AEC                 jz      loc_7BE1
.text:00007AF2                 mov     ecx, [ebp+var_5B8]
.text:00007AF8                 mov     [ebp+var_728], ecx
.text:00007AFE                 mov     byte ptr [ebp+var_4], 19h
.text:00007B02                 lea     ecx, [ebp+var_588]
.text:00007B08                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007B0D                 mov     byte ptr [ebp+var_4], 17h
.text:00007B11                 lea     ecx, [ebp+var_4B4]
.text:00007B17                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00007B1C                 mov     byte ptr [ebp+var_4], 16h
.text:00007B20                 lea     ecx, [ebp+var_478]
.text:00007B26                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007B2B                 mov     byte ptr [ebp+var_4], 15h
.text:00007B2F                 lea     ecx, [ebp+var_46C]
.text:00007B35                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007B3A                 mov     byte ptr [ebp+var_4], 14h
.text:00007B3E                 lea     ecx, [ebp+var_34C]
.text:00007B44                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00007B49                 mov     byte ptr [ebp+var_4], 12h
.text:00007B4D                 lea     ecx, [ebp+var_330]
.text:00007B53                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00007B58                 mov     byte ptr [ebp+var_4], 11h
.text:00007B5C                 lea     ecx, [ebp+var_310]
.text:00007B62                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007B67                 mov     byte ptr [ebp+var_4], 0Ch
.text:00007B6B                 lea     ecx, [ebp+var_2FC]
.text:00007B71                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007B76                 mov     byte ptr [ebp+var_4], 0Ah
.text:00007B7A                 lea     ecx, [ebp+var_1C0]
.text:00007B80                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00007B85                 mov     byte ptr [ebp+var_4], 6
.text:00007B89                 lea     ecx, [ebp+var_1B0]
.text:00007B8F                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007B94                 mov     byte ptr [ebp+var_4], 3
.text:00007B98                 lea     ecx, [ebp+var_12C]
.text:00007B9E                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007BA3                 mov     byte ptr [ebp+var_4], 2
.text:00007BA7                 lea     ecx, [ebp+var_60]
.text:00007BAA                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007BAF                 mov     byte ptr [ebp+var_4], 1
.text:00007BB3                 lea     ecx, [ebp+var_50]
.text:00007BB6                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00007BBB                 mov     byte ptr [ebp+var_4], 0
.text:00007BBF                 lea     ecx, [ebp+var_38] ; this
.text:00007BC2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007BC7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007BCE                 lea     ecx, [ebp+var_24] ; this
.text:00007BD1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007BD6                 mov     eax, [ebp+var_728]
.text:00007BDC                 jmp     loc_8F16
.text:00007BE1 ; ---------------------------------------------------------------------------
.text:00007BE1
.text:00007BE1 loc_7BE1:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4174j
.text:00007BE1                 mov     [ebp+var_5B9], 0
.text:00007BE8                 cmp     [ebp+var_5B4], 1
.text:00007BEF                 jnz     loc_7DA2
.text:00007BF5                 mov     edx, [ebp+var_138]
.text:00007BFB                 movzx   eax, byte ptr [edx+12h]
.text:00007BFF                 test    eax, eax
.text:00007C01                 jnz     loc_7D46
.text:00007C07                 cmp     [ebp+var_7C], 0
.text:00007C0B                 jge     loc_7D32
.text:00007C11                 mov     ecx, [ebp+var_14]
.text:00007C14                 add     ecx, 10h        ; this
.text:00007C17                 call    ?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::IsArc_After_NonOpen(void)
.text:00007C1C                 movzx   ecx, al
.text:00007C1F                 test    ecx, ecx
.text:00007C21                 jz      loc_7D32
.text:00007C27                 mov     edx, [ebp+var_14]
.text:00007C2A                 mov     eax, [ebp+var_554]
.text:00007C30                 mov     [edx+1Ch], eax
.text:00007C33                 mov     ecx, [ebp+var_14]
.text:00007C36                 add     ecx, 10h
.text:00007C39                 push    ecx
.text:00007C3A                 mov     ecx, [ebp+var_14]
.text:00007C3D                 add     ecx, 40h ; '@'
.text:00007C40                 call    ??4CArcErrorInfo@@QAEAAU0@ABU0@@Z ; CArcErrorInfo::operator=(CArcErrorInfo const &)
.text:00007C45                 mov     [ebp+var_72C], 1
.text:00007C4F                 mov     byte ptr [ebp+var_4], 19h
.text:00007C53                 lea     ecx, [ebp+var_588]
.text:00007C59                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007C5E                 mov     byte ptr [ebp+var_4], 17h
.text:00007C62                 lea     ecx, [ebp+var_4B4]
.text:00007C68                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00007C6D                 mov     byte ptr [ebp+var_4], 16h
.text:00007C71                 lea     ecx, [ebp+var_478]
.text:00007C77                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007C7C                 mov     byte ptr [ebp+var_4], 15h
.text:00007C80                 lea     ecx, [ebp+var_46C]
.text:00007C86                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007C8B                 mov     byte ptr [ebp+var_4], 14h
.text:00007C8F                 lea     ecx, [ebp+var_34C]
.text:00007C95                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00007C9A                 mov     byte ptr [ebp+var_4], 12h
.text:00007C9E                 lea     ecx, [ebp+var_330]
.text:00007CA4                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00007CA9                 mov     byte ptr [ebp+var_4], 11h
.text:00007CAD                 lea     ecx, [ebp+var_310]
.text:00007CB3                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007CB8                 mov     byte ptr [ebp+var_4], 0Ch
.text:00007CBC                 lea     ecx, [ebp+var_2FC]
.text:00007CC2                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007CC7                 mov     byte ptr [ebp+var_4], 0Ah
.text:00007CCB                 lea     ecx, [ebp+var_1C0]
.text:00007CD1                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00007CD6                 mov     byte ptr [ebp+var_4], 6
.text:00007CDA                 lea     ecx, [ebp+var_1B0]
.text:00007CE0                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007CE5                 mov     byte ptr [ebp+var_4], 3
.text:00007CE9                 lea     ecx, [ebp+var_12C]
.text:00007CEF                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007CF4                 mov     byte ptr [ebp+var_4], 2
.text:00007CF8                 lea     ecx, [ebp+var_60]
.text:00007CFB                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007D00                 mov     byte ptr [ebp+var_4], 1
.text:00007D04                 lea     ecx, [ebp+var_50]
.text:00007D07                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00007D0C                 mov     byte ptr [ebp+var_4], 0
.text:00007D10                 lea     ecx, [ebp+var_38] ; this
.text:00007D13                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007D18                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007D1F                 lea     ecx, [ebp+var_24] ; this
.text:00007D22                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007D27                 mov     eax, [ebp+var_72C]
.text:00007D2D                 jmp     loc_8F16
.text:00007D32 ; ---------------------------------------------------------------------------
.text:00007D32
.text:00007D32 loc_7D32:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4293j
.text:00007D32                                         ; CArc::OpenStream2(COpenOptions const &)+42A9j
.text:00007D32                 mov     byte ptr [ebp+var_4], 19h
.text:00007D36                 lea     ecx, [ebp+var_588]
.text:00007D3C                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007D41                 jmp     loc_72F8
.text:00007D46 ; ---------------------------------------------------------------------------
.text:00007D46
.text:00007D46 loc_7D46:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4289j
.text:00007D46                 mov     ecx, [ebp+var_14]
.text:00007D49                 add     ecx, 10h        ; this
.text:00007D4C                 call    ?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::IsArc_After_NonOpen(void)
.text:00007D51                 movzx   edx, al
.text:00007D54                 test    edx, edx
.text:00007D56                 jz      short loc_7D89
.text:00007D58                 mov     eax, [ebp+var_14]
.text:00007D5B                 movzx   ecx, byte ptr [eax+0B8h]
.text:00007D62                 test    ecx, ecx
.text:00007D64                 jz      short loc_7D89
.text:00007D66                 mov     edx, [ebp+var_14]
.text:00007D69                 mov     [ebp+var_81C], edx
.text:00007D6F                 mov     eax, [ebp+var_81C]
.text:00007D75                 mov     ecx, [ebp+var_81C]
.text:00007D7B                 mov     edx, [eax+0B0h]
.text:00007D81                 or      edx, [ecx+0B4h]
.text:00007D87                 jnz     short loc_7D9D
.text:00007D89
.text:00007D89 loc_7D89:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+43DEj
.text:00007D89                                         ; CArc::OpenStream2(COpenOptions const &)+43ECj
.text:00007D89                 mov     byte ptr [ebp+var_4], 19h
.text:00007D8D                 lea     ecx, [ebp+var_588]
.text:00007D93                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007D98                 jmp     loc_72F8
.text:00007D9D ; ---------------------------------------------------------------------------
.text:00007D9D
.text:00007D9D loc_7D9D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+440Fj
.text:00007D9D                 jmp     loc_7EB1
.text:00007DA2 ; ---------------------------------------------------------------------------
.text:00007DA2
.text:00007DA2 loc_7DA2:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4277j
.text:00007DA2                 mov     [ebp+var_5B9], 1
.text:00007DA9                 mov     eax, [ebp+var_5B4]
.text:00007DAF                 mov     [ebp+var_5C0], eax
.text:00007DB5                 cmp     [ebp+var_5C0], 0
.text:00007DBC                 jz      loc_7EB1
.text:00007DC2                 mov     ecx, [ebp+var_5C0]
.text:00007DC8                 mov     [ebp+var_730], ecx
.text:00007DCE                 mov     byte ptr [ebp+var_4], 19h
.text:00007DD2                 lea     ecx, [ebp+var_588]
.text:00007DD8                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007DDD                 mov     byte ptr [ebp+var_4], 17h
.text:00007DE1                 lea     ecx, [ebp+var_4B4]
.text:00007DE7                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00007DEC                 mov     byte ptr [ebp+var_4], 16h
.text:00007DF0                 lea     ecx, [ebp+var_478]
.text:00007DF6                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007DFB                 mov     byte ptr [ebp+var_4], 15h
.text:00007DFF                 lea     ecx, [ebp+var_46C]
.text:00007E05                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007E0A                 mov     byte ptr [ebp+var_4], 14h
.text:00007E0E                 lea     ecx, [ebp+var_34C]
.text:00007E14                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00007E19                 mov     byte ptr [ebp+var_4], 12h
.text:00007E1D                 lea     ecx, [ebp+var_330]
.text:00007E23                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00007E28                 mov     byte ptr [ebp+var_4], 11h
.text:00007E2C                 lea     ecx, [ebp+var_310]
.text:00007E32                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007E37                 mov     byte ptr [ebp+var_4], 0Ch
.text:00007E3B                 lea     ecx, [ebp+var_2FC]
.text:00007E41                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007E46                 mov     byte ptr [ebp+var_4], 0Ah
.text:00007E4A                 lea     ecx, [ebp+var_1C0]
.text:00007E50                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00007E55                 mov     byte ptr [ebp+var_4], 6
.text:00007E59                 lea     ecx, [ebp+var_1B0]
.text:00007E5F                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007E64                 mov     byte ptr [ebp+var_4], 3
.text:00007E68                 lea     ecx, [ebp+var_12C]
.text:00007E6E                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007E73                 mov     byte ptr [ebp+var_4], 2
.text:00007E77                 lea     ecx, [ebp+var_60]
.text:00007E7A                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007E7F                 mov     byte ptr [ebp+var_4], 1
.text:00007E83                 lea     ecx, [ebp+var_50]
.text:00007E86                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00007E8B                 mov     byte ptr [ebp+var_4], 0
.text:00007E8F                 lea     ecx, [ebp+var_38] ; this
.text:00007E92                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007E97                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007E9E                 lea     ecx, [ebp+var_24] ; this
.text:00007EA1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007EA6                 mov     eax, [ebp+var_730]
.text:00007EAC                 jmp     loc_8F16
.text:00007EB1 ; ---------------------------------------------------------------------------
.text:00007EB1
.text:00007EB1 loc_7EB1:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &):loc_7D9Dj
.text:00007EB1                                         ; CArc::OpenStream2(COpenOptions const &)+4444j
.text:00007EB1                 lea     ecx, [ebp+var_634] ; this
.text:00007EB7                 call    ??0CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::CParseItem(void)
.text:00007EBC                 mov     byte ptr [ebp+var_4], 1Bh
.text:00007EC0                 mov     edx, dword ptr [ebp+var_570]
.text:00007EC6                 mov     [ebp+var_634], edx
.text:00007ECC                 mov     eax, dword ptr [ebp+var_570+4]
.text:00007ED2                 mov     [ebp+var_630], eax
.text:00007ED8                 mov     ecx, [ebp+var_568] ; this
.text:00007EDE                 call    ?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_UseGlobalOffset(void)
.text:00007EE3                 movzx   ecx, al
.text:00007EE6                 test    ecx, ecx
.text:00007EE8                 jz      short loc_7F0A
.text:00007EEA                 mov     edx, [ebp+var_14]
.text:00007EED                 mov     eax, [edx+0A8h]
.text:00007EF3                 mov     [ebp+var_634], eax
.text:00007EF9                 mov     ecx, [edx+0ACh]
.text:00007EFF                 mov     [ebp+var_630], ecx
.text:00007F05                 jmp     loc_802D
.text:00007F0A ; ---------------------------------------------------------------------------
.text:00007F0A
.text:00007F0A loc_7F0A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4570j
.text:00007F0A                 mov     edx, [ebp+var_14]
.text:00007F0D                 mov     [ebp+var_820], edx
.text:00007F13                 mov     eax, [ebp+var_820]
.text:00007F19                 mov     ecx, [ebp+var_820]
.text:00007F1F                 mov     edx, [eax+0A8h]
.text:00007F25                 or      edx, [ecx+0ACh]
.text:00007F2B                 jz      loc_802D
.text:00007F31                 mov     [ebp+var_734], 80004005h
.text:00007F3B                 mov     byte ptr [ebp+var_4], 1Ah
.text:00007F3F                 lea     ecx, [ebp+var_634] ; this
.text:00007F45                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:00007F4A                 mov     byte ptr [ebp+var_4], 19h
.text:00007F4E                 lea     ecx, [ebp+var_588]
.text:00007F54                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007F59                 mov     byte ptr [ebp+var_4], 17h
.text:00007F5D                 lea     ecx, [ebp+var_4B4]
.text:00007F63                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00007F68                 mov     byte ptr [ebp+var_4], 16h
.text:00007F6C                 lea     ecx, [ebp+var_478]
.text:00007F72                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007F77                 mov     byte ptr [ebp+var_4], 15h
.text:00007F7B                 lea     ecx, [ebp+var_46C]
.text:00007F81                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007F86                 mov     byte ptr [ebp+var_4], 14h
.text:00007F8A                 lea     ecx, [ebp+var_34C]
.text:00007F90                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00007F95                 mov     byte ptr [ebp+var_4], 12h
.text:00007F99                 lea     ecx, [ebp+var_330]
.text:00007F9F                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00007FA4                 mov     byte ptr [ebp+var_4], 11h
.text:00007FA8                 lea     ecx, [ebp+var_310]
.text:00007FAE                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007FB3                 mov     byte ptr [ebp+var_4], 0Ch
.text:00007FB7                 lea     ecx, [ebp+var_2FC]
.text:00007FBD                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00007FC2                 mov     byte ptr [ebp+var_4], 0Ah
.text:00007FC6                 lea     ecx, [ebp+var_1C0]
.text:00007FCC                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00007FD1                 mov     byte ptr [ebp+var_4], 6
.text:00007FD5                 lea     ecx, [ebp+var_1B0]
.text:00007FDB                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00007FE0                 mov     byte ptr [ebp+var_4], 3
.text:00007FE4                 lea     ecx, [ebp+var_12C]
.text:00007FEA                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007FEF                 mov     byte ptr [ebp+var_4], 2
.text:00007FF3                 lea     ecx, [ebp+var_60]
.text:00007FF6                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00007FFB                 mov     byte ptr [ebp+var_4], 1
.text:00007FFF                 lea     ecx, [ebp+var_50]
.text:00008002                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00008007                 mov     byte ptr [ebp+var_4], 0
.text:0000800B                 lea     ecx, [ebp+var_38] ; this
.text:0000800E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008013                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000801A                 lea     ecx, [ebp+var_24] ; this
.text:0000801D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008022                 mov     eax, [ebp+var_734]
.text:00008028                 jmp     loc_8F16
.text:0000802D ; ---------------------------------------------------------------------------
.text:0000802D
.text:0000802D loc_802D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+458Dj
.text:0000802D                                         ; CArc::OpenStream2(COpenOptions const &)+45B3j
.text:0000802D                 mov     eax, [ebp+var_14]
.text:00008030                 mov     ecx, [eax+0C0h]
.text:00008036                 sub     ecx, [ebp+var_634]
.text:0000803C                 mov     edx, [eax+0C4h]
.text:00008042                 sbb     edx, [ebp+var_630]
.text:00008048                 mov     [ebp+var_640], ecx
.text:0000804E                 mov     [ebp+var_63C], edx
.text:00008054                 mov     eax, [ebp+var_640]
.text:0000805A                 mov     [ebp+var_648], eax
.text:00008060                 mov     ecx, [ebp+var_63C]
.text:00008066                 mov     [ebp+var_644], ecx
.text:0000806C                 mov     edx, [ebp+var_14]
.text:0000806F                 mov     al, [edx+0B8h]
.text:00008075                 mov     [ebp+var_649], al
.text:0000807B                 movzx   ecx, [ebp+var_649]
.text:00008082                 test    ecx, ecx
.text:00008084                 jz      loc_8129
.text:0000808A                 mov     edx, [ebp+var_14]
.text:0000808D                 mov     eax, [ebp+var_634]
.text:00008093                 add     eax, [edx+0B0h]
.text:00008099                 mov     ecx, [ebp+var_630]
.text:0000809F                 adc     ecx, [edx+0B4h]
.text:000080A5                 mov     edx, [ebp+var_14]
.text:000080A8                 mov     [ebp+var_828], eax
.text:000080AE                 mov     [ebp+var_824], ecx
.text:000080B4                 mov     [ebp+var_82C], edx
.text:000080BA                 mov     eax, [ebp+var_82C]
.text:000080C0                 mov     ecx, [ebp+var_824]
.text:000080C6                 cmp     ecx, [eax+0C4h]
.text:000080CC                 jb      short loc_810E
.text:000080CE                 ja      short loc_80E4
.text:000080D0                 mov     edx, [ebp+var_82C]
.text:000080D6                 mov     eax, [ebp+var_828]
.text:000080DC                 cmp     eax, [edx+0C0h]
.text:000080E2                 jbe     short loc_810E
.text:000080E4
.text:000080E4 loc_80E4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4756j
.text:000080E4                 mov     ecx, [ebp+var_14]
.text:000080E7                 mov     edx, [ecx+0C0h]
.text:000080ED                 sub     edx, [ebp+var_634]
.text:000080F3                 mov     eax, [ecx+0C4h]
.text:000080F9                 sbb     eax, [ebp+var_630]
.text:000080FF                 mov     ecx, [ebp+var_14]
.text:00008102                 mov     [ecx+0B0h], edx
.text:00008108                 mov     [ecx+0B4h], eax
.text:0000810E
.text:0000810E loc_810E:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4754j
.text:0000810E                                         ; CArc::OpenStream2(COpenOptions const &)+476Aj
.text:0000810E                 mov     edx, [ebp+var_14]
.text:00008111                 mov     eax, [edx+0B0h]
.text:00008117                 mov     [ebp+var_648], eax
.text:0000811D                 mov     ecx, [edx+0B4h]
.text:00008123                 mov     [ebp+var_644], ecx
.text:00008129
.text:00008129 loc_8129:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+470Cj
.text:00008129                 mov     edx, [ebp+var_648]
.text:0000812F                 or      edx, [ebp+var_644]
.text:00008135                 jz      short loc_8156
.text:00008137                 cmp     [ebp+var_644], 80000000h
.text:00008141                 jb      loc_8252
.text:00008147                 ja      short loc_8156
.text:00008149                 cmp     [ebp+var_648], 0
.text:00008150                 jbe     loc_8252
.text:00008156
.text:00008156 loc_8156:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+47BDj
.text:00008156                                         ; CArc::OpenStream2(COpenOptions const &)+47CFj
.text:00008156                 mov     [ebp+var_738], 80004005h
.text:00008160                 mov     byte ptr [ebp+var_4], 1Ah
.text:00008164                 lea     ecx, [ebp+var_634] ; this
.text:0000816A                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:0000816F                 mov     byte ptr [ebp+var_4], 19h
.text:00008173                 lea     ecx, [ebp+var_588]
.text:00008179                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:0000817E                 mov     byte ptr [ebp+var_4], 17h
.text:00008182                 lea     ecx, [ebp+var_4B4]
.text:00008188                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000818D                 mov     byte ptr [ebp+var_4], 16h
.text:00008191                 lea     ecx, [ebp+var_478]
.text:00008197                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:0000819C                 mov     byte ptr [ebp+var_4], 15h
.text:000081A0                 lea     ecx, [ebp+var_46C]
.text:000081A6                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000081AB                 mov     byte ptr [ebp+var_4], 14h
.text:000081AF                 lea     ecx, [ebp+var_34C]
.text:000081B5                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:000081BA                 mov     byte ptr [ebp+var_4], 12h
.text:000081BE                 lea     ecx, [ebp+var_330]
.text:000081C4                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:000081C9                 mov     byte ptr [ebp+var_4], 11h
.text:000081CD                 lea     ecx, [ebp+var_310]
.text:000081D3                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000081D8                 mov     byte ptr [ebp+var_4], 0Ch
.text:000081DC                 lea     ecx, [ebp+var_2FC]
.text:000081E2                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000081E7                 mov     byte ptr [ebp+var_4], 0Ah
.text:000081EB                 lea     ecx, [ebp+var_1C0]
.text:000081F1                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:000081F6                 mov     byte ptr [ebp+var_4], 6
.text:000081FA                 lea     ecx, [ebp+var_1B0]
.text:00008200                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008205                 mov     byte ptr [ebp+var_4], 3
.text:00008209                 lea     ecx, [ebp+var_12C]
.text:0000820F                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008214                 mov     byte ptr [ebp+var_4], 2
.text:00008218                 lea     ecx, [ebp+var_60]
.text:0000821B                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008220                 mov     byte ptr [ebp+var_4], 1
.text:00008224                 lea     ecx, [ebp+var_50]
.text:00008227                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000822C                 mov     byte ptr [ebp+var_4], 0
.text:00008230                 lea     ecx, [ebp+var_38] ; this
.text:00008233                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008238                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000823F                 lea     ecx, [ebp+var_24] ; this
.text:00008242                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008247                 mov     eax, [ebp+var_738]
.text:0000824D                 jmp     loc_8F16
.text:00008252 ; ---------------------------------------------------------------------------
.text:00008252
.text:00008252 loc_8252:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+47C9j
.text:00008252                                         ; CArc::OpenStream2(COpenOptions const &)+47D8j
.text:00008252                 mov     [ebp+var_64A], 0
.text:00008259                 movzx   eax, [ebp+var_5B9]
.text:00008260                 test    eax, eax
.text:00008262                 jz      short loc_829C
.text:00008264                 movzx   ecx, [ebp+var_649]
.text:0000826B                 test    ecx, ecx
.text:0000826D                 jnz     short loc_829C
.text:0000826F                 mov     [ebp+var_5C8], 1
.text:00008276                 mov     [ebp+var_64A], 1
.text:0000827D                 mov     edx, [ebp+var_640]
.text:00008283                 mov     [ebp+var_648], edx
.text:00008289                 mov     eax, [ebp+var_63C]
.text:0000828F                 mov     [ebp+var_644], eax
.text:00008295                 mov     [ebp+var_541], 0
.text:0000829C
.text:0000829C loc_829C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+48EAj
.text:0000829C                                         ; CArc::OpenStream2(COpenOptions const &)+48F5j
.text:0000829C                 mov     ecx, [ebp+var_648]
.text:000082A2                 mov     [ebp+var_62C], ecx
.text:000082A8                 mov     edx, [ebp+var_644]
.text:000082AE                 mov     [ebp+var_628], edx
.text:000082B4                 lea     ecx, [ebp+var_634] ; this
.text:000082BA                 call    ?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ ; NArchive::NParser::CParseItem::NormalizeOffset(void)
.text:000082BF                 mov     eax, [ebp+var_634]
.text:000082C5                 or      eax, [ebp+var_630]
.text:000082CB                 jnz     short loc_833C
.text:000082CD                 movzx   ecx, [ebp+var_5C8]
.text:000082D4                 test    ecx, ecx
.text:000082D6                 jnz     short loc_833C
.text:000082D8                 mov     edx, [ebp+var_14]
.text:000082DB                 mov     [ebp+var_830], edx
.text:000082E1                 mov     eax, [ebp+var_830]
.text:000082E7                 mov     ecx, [ebp+var_628]
.text:000082ED                 cmp     ecx, [eax+0C4h]
.text:000082F3                 jb      short loc_833C
.text:000082F5                 ja      short loc_830B
.text:000082F7                 mov     edx, [ebp+var_830]
.text:000082FD                 mov     eax, [ebp+var_62C]
.text:00008303                 cmp     eax, [edx+0C0h]
.text:00008309                 jb      short loc_833C
.text:0000830B
.text:0000830B loc_830B:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+497Dj
.text:0000830B                 mov     ecx, [ebp+var_138]
.text:00008311                 movzx   edx, byte ptr [ecx+11h]
.text:00008315                 test    edx, edx
.text:00008317                 jnz     short loc_833C
.text:00008319                 mov     byte ptr [ebp+var_4], 1Ah
.text:0000831D                 lea     ecx, [ebp+var_634] ; this
.text:00008323                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:00008328                 mov     byte ptr [ebp+var_4], 19h
.text:0000832C                 lea     ecx, [ebp+var_588]
.text:00008332                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008337                 jmp     loc_72F8
.text:0000833C ; ---------------------------------------------------------------------------
.text:0000833C
.text:0000833C loc_833C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4953j
.text:0000833C                                         ; CArc::OpenStream2(COpenOptions const &)+495Ej ...
.text:0000833C                 mov     eax, [ebp+var_138]
.text:00008342                 movzx   ecx, byte ptr [eax+13h]
.text:00008346                 test    ecx, ecx
.text:00008348                 jz      short loc_836A
.text:0000834A                 mov     edx, [ebp+var_4E0]
.text:00008350                 add     edx, 1
.text:00008353                 mov     eax, [ebp+var_4DC]
.text:00008359                 adc     eax, 0
.text:0000835C                 mov     [ebp+var_4E0], edx
.text:00008362                 mov     [ebp+var_4DC], eax
.text:00008368                 jmp     short loc_83B9
.text:0000836A ; ---------------------------------------------------------------------------
.text:0000836A
.text:0000836A loc_836A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+49D0j
.text:0000836A                 movzx   ecx, [ebp+var_64A]
.text:00008371                 test    ecx, ecx
.text:00008373                 jz      short loc_8395
.text:00008375                 mov     edx, [ebp+var_4E0]
.text:0000837B                 add     edx, 1
.text:0000837E                 mov     eax, [ebp+var_4DC]
.text:00008384                 adc     eax, 0
.text:00008387                 mov     [ebp+var_4E0], edx
.text:0000838D                 mov     [ebp+var_4DC], eax
.text:00008393                 jmp     short loc_83B9
.text:00008395 ; ---------------------------------------------------------------------------
.text:00008395
.text:00008395 loc_8395:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+49FBj
.text:00008395                 mov     ecx, [ebp+var_634]
.text:0000839B                 add     ecx, [ebp+var_62C]
.text:000083A1                 mov     edx, [ebp+var_630]
.text:000083A7                 adc     edx, [ebp+var_628]
.text:000083AD                 mov     [ebp+var_4E0], ecx
.text:000083B3                 mov     [ebp+var_4DC], edx
.text:000083B9
.text:000083B9 loc_83B9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+49F0j
.text:000083B9                                         ; CArc::OpenStream2(COpenOptions const &)+4A1Bj
.text:000083B9                 lea     eax, [ebp+var_634]
.text:000083BF                 push    eax             ; int
.text:000083C0                 mov     ecx, [ebp+var_568]
.text:000083C6                 push    ecx             ; CArcInfoEx *
.text:000083C7                 lea     ecx, [ebp+var_588]
.text:000083CD                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:000083D2                 push    eax             ; struct IInArchive *
.text:000083D3                 call    ?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z ; ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)
.text:000083D8                 mov     [ebp+var_650], eax
.text:000083DE                 cmp     [ebp+var_650], 0
.text:000083E5                 jz      loc_84E9
.text:000083EB                 mov     edx, [ebp+var_650]
.text:000083F1                 mov     [ebp+var_73C], edx
.text:000083F7                 mov     byte ptr [ebp+var_4], 1Ah
.text:000083FB                 lea     ecx, [ebp+var_634] ; this
.text:00008401                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:00008406                 mov     byte ptr [ebp+var_4], 19h
.text:0000840A                 lea     ecx, [ebp+var_588]
.text:00008410                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008415                 mov     byte ptr [ebp+var_4], 17h
.text:00008419                 lea     ecx, [ebp+var_4B4]
.text:0000841F                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00008424                 mov     byte ptr [ebp+var_4], 16h
.text:00008428                 lea     ecx, [ebp+var_478]
.text:0000842E                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008433                 mov     byte ptr [ebp+var_4], 15h
.text:00008437                 lea     ecx, [ebp+var_46C]
.text:0000843D                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008442                 mov     byte ptr [ebp+var_4], 14h
.text:00008446                 lea     ecx, [ebp+var_34C]
.text:0000844C                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00008451                 mov     byte ptr [ebp+var_4], 12h
.text:00008455                 lea     ecx, [ebp+var_330]
.text:0000845B                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00008460                 mov     byte ptr [ebp+var_4], 11h
.text:00008464                 lea     ecx, [ebp+var_310]
.text:0000846A                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000846F                 mov     byte ptr [ebp+var_4], 0Ch
.text:00008473                 lea     ecx, [ebp+var_2FC]
.text:00008479                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000847E                 mov     byte ptr [ebp+var_4], 0Ah
.text:00008482                 lea     ecx, [ebp+var_1C0]
.text:00008488                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:0000848D                 mov     byte ptr [ebp+var_4], 6
.text:00008491                 lea     ecx, [ebp+var_1B0]
.text:00008497                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:0000849C                 mov     byte ptr [ebp+var_4], 3
.text:000084A0                 lea     ecx, [ebp+var_12C]
.text:000084A6                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000084AB                 mov     byte ptr [ebp+var_4], 2
.text:000084AF                 lea     ecx, [ebp+var_60]
.text:000084B2                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000084B7                 mov     byte ptr [ebp+var_4], 1
.text:000084BB                 lea     ecx, [ebp+var_50]
.text:000084BE                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000084C3                 mov     byte ptr [ebp+var_4], 0
.text:000084C7                 lea     ecx, [ebp+var_38] ; this
.text:000084CA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000084CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000084D6                 lea     ecx, [ebp+var_24] ; this
.text:000084D9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000084DE                 mov     eax, [ebp+var_73C]
.text:000084E4                 jmp     loc_8F16
.text:000084E9 ; ---------------------------------------------------------------------------
.text:000084E9
.text:000084E9 loc_84E9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4A6Dj
.text:000084E9                 mov     eax, [ebp+var_630]
.text:000084EF                 cmp     eax, dword ptr [ebp+var_570+4]
.text:000084F5                 ja      loc_85F9
.text:000084FB                 jb      short loc_850F
.text:000084FD                 mov     ecx, [ebp+var_634]
.text:00008503                 cmp     ecx, dword ptr [ebp+var_570]
.text:00008509                 jnb     loc_85F9
.text:0000850F
.text:0000850F loc_850F:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4B83j
.text:0000850F                 mov     edx, [ebp+var_138]
.text:00008515                 movzx   eax, byte ptr [edx+13h]
.text:00008519                 test    eax, eax
.text:0000851B                 jnz     loc_85F9
.text:00008521
.text:00008521 loc_8521:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4C7Cj
.text:00008521                 mov     ecx, [ebp+var_1A8]
.text:00008527                 add     ecx, 0Ch
.text:0000852A                 call    ?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NParser::CParseItem>::IsEmpty(void)
.text:0000852F                 movzx   ecx, al
.text:00008532                 test    ecx, ecx
.text:00008534                 jnz     loc_85F9
.text:0000853A                 mov     ecx, [ebp+var_1A8]
.text:00008540                 add     ecx, 0Ch
.text:00008543                 call    ?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ ; CObjectVector<NArchive::NParser::CParseItem>::Back(void)
.text:00008548                 mov     [ebp+var_654], eax
.text:0000854E                 mov     edx, [ebp+var_654]
.text:00008554                 mov     [ebp+var_834], edx
.text:0000855A                 mov     eax, [ebp+var_834]
.text:00008560                 mov     ecx, [eax+4]
.text:00008563                 cmp     ecx, [ebp+var_630]
.text:00008569                 ja      short loc_857F
.text:0000856B                 jb      short loc_857D
.text:0000856D                 mov     edx, [ebp+var_834]
.text:00008573                 mov     eax, [edx]
.text:00008575                 cmp     eax, [ebp+var_634]
.text:0000857B                 jnb     short loc_857F
.text:0000857D
.text:0000857D loc_857D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4BF3j
.text:0000857D                 jmp     short loc_85F9
.text:0000857F ; ---------------------------------------------------------------------------
.text:0000857F
.text:0000857F loc_857F:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4BF1j
.text:0000857F                                         ; CArc::OpenStream2(COpenOptions const &)+4C03j
.text:0000857F                 mov     ecx, [ebp+var_654]
.text:00008585                 mov     edx, [ebp+var_654]
.text:0000858B                 mov     eax, [ecx]
.text:0000858D                 add     eax, [edx+8]
.text:00008590                 mov     ecx, [ecx+4]
.text:00008593                 adc     ecx, [edx+0Ch]
.text:00008596                 mov     edx, [ebp+var_634]
.text:0000859C                 add     edx, [ebp+var_62C]
.text:000085A2                 mov     esi, [ebp+var_630]
.text:000085A8                 adc     esi, [ebp+var_628]
.text:000085AE                 mov     [ebp+var_83C], eax
.text:000085B4                 mov     [ebp+var_838], ecx
.text:000085BA                 mov     [ebp+var_844], edx
.text:000085C0                 mov     [ebp+var_840], esi
.text:000085C6                 mov     eax, [ebp+var_838]
.text:000085CC                 cmp     eax, [ebp+var_840]
.text:000085D2                 jb      short loc_85E6
.text:000085D4                 ja      short loc_85E4
.text:000085D6                 mov     ecx, [ebp+var_83C]
.text:000085DC                 cmp     ecx, [ebp+var_844]
.text:000085E2                 jbe     short loc_85E6
.text:000085E4
.text:000085E4 loc_85E4:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4C5Cj
.text:000085E4                 jmp     short loc_85F9
.text:000085E6 ; ---------------------------------------------------------------------------
.text:000085E6
.text:000085E6 loc_85E6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4C5Aj
.text:000085E6                                         ; CArc::OpenStream2(COpenOptions const &)+4C6Aj
.text:000085E6                 mov     ecx, [ebp+var_1A8]
.text:000085EC                 add     ecx, 0Ch
.text:000085EF                 call    ?DeleteBack@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NParser::CParseItem>::DeleteBack(void)
.text:000085F4                 jmp     loc_8521
.text:000085F9 ; ---------------------------------------------------------------------------
.text:000085F9
.text:000085F9 loc_85F9:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4B7Dj
.text:000085F9                                         ; CArc::OpenStream2(COpenOptions const &)+4B91j ...
.text:000085F9                 movzx   edx, [ebp+var_5B9]
.text:00008600                 test    edx, edx
.text:00008602                 jz      loc_8A4D
.text:00008608                 mov     eax, [ebp+var_138]
.text:0000860E                 movzx   ecx, byte ptr [eax+11h]
.text:00008612                 test    ecx, ecx
.text:00008614                 jz      loc_8A4D
.text:0000861A                 movzx   edx, [ebp+var_649]
.text:00008621                 test    edx, edx
.text:00008623                 jz      loc_8A4D
.text:00008629                 mov     [ebp+var_655], 0
.text:00008630                 mov     eax, [ebp+var_14]
.text:00008633                 mov     cl, [eax+10h]
.text:00008636                 mov     [ebp+var_656], cl
.text:0000863C                 movzx   edx, [ebp+var_656]
.text:00008643                 test    edx, edx
.text:00008645                 jz      loc_87B8
.text:0000864B                 mov     eax, [ebp+var_138]
.text:00008651                 movzx   ecx, byte ptr [eax+14h]
.text:00008655                 test    ecx, ecx
.text:00008657                 jz      loc_87B8
.text:0000865D                 mov     edx, [ebp+var_14]
.text:00008660                 mov     eax, [ebp+var_5A0]
.text:00008666                 add     eax, [edx+0A8h]
.text:0000866C                 mov     ecx, [ebp+var_59C]
.text:00008672                 adc     ecx, [edx+0ACh]
.text:00008678                 mov     edx, [ebp+var_14]
.text:0000867B                 add     eax, [edx+0B0h]
.text:00008681                 adc     ecx, [edx+0B4h]
.text:00008687                 push    ecx
.text:00008688                 push    eax             ; unsigned __int64
.text:00008689                 mov     eax, [ebp+arg_0]
.text:0000868C                 push    eax             ; struct COpenOptions *
.text:0000868D                 mov     ecx, [ebp+var_14] ; this
.text:00008690                 call    ?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z ; CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)
.text:00008695                 mov     [ebp+var_65C], eax
.text:0000869B                 cmp     [ebp+var_65C], 0
.text:000086A2                 jz      loc_87A6
.text:000086A8                 mov     ecx, [ebp+var_65C]
.text:000086AE                 mov     [ebp+var_740], ecx
.text:000086B4                 mov     byte ptr [ebp+var_4], 1Ah
.text:000086B8                 lea     ecx, [ebp+var_634] ; this
.text:000086BE                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:000086C3                 mov     byte ptr [ebp+var_4], 19h
.text:000086C7                 lea     ecx, [ebp+var_588]
.text:000086CD                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:000086D2                 mov     byte ptr [ebp+var_4], 17h
.text:000086D6                 lea     ecx, [ebp+var_4B4]
.text:000086DC                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000086E1                 mov     byte ptr [ebp+var_4], 16h
.text:000086E5                 lea     ecx, [ebp+var_478]
.text:000086EB                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:000086F0                 mov     byte ptr [ebp+var_4], 15h
.text:000086F4                 lea     ecx, [ebp+var_46C]
.text:000086FA                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000086FF                 mov     byte ptr [ebp+var_4], 14h
.text:00008703                 lea     ecx, [ebp+var_34C]
.text:00008709                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000870E                 mov     byte ptr [ebp+var_4], 12h
.text:00008712                 lea     ecx, [ebp+var_330]
.text:00008718                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:0000871D                 mov     byte ptr [ebp+var_4], 11h
.text:00008721                 lea     ecx, [ebp+var_310]
.text:00008727                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000872C                 mov     byte ptr [ebp+var_4], 0Ch
.text:00008730                 lea     ecx, [ebp+var_2FC]
.text:00008736                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000873B                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000873F                 lea     ecx, [ebp+var_1C0]
.text:00008745                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:0000874A                 mov     byte ptr [ebp+var_4], 6
.text:0000874E                 lea     ecx, [ebp+var_1B0]
.text:00008754                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008759                 mov     byte ptr [ebp+var_4], 3
.text:0000875D                 lea     ecx, [ebp+var_12C]
.text:00008763                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008768                 mov     byte ptr [ebp+var_4], 2
.text:0000876C                 lea     ecx, [ebp+var_60]
.text:0000876F                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008774                 mov     byte ptr [ebp+var_4], 1
.text:00008778                 lea     ecx, [ebp+var_50]
.text:0000877B                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00008780                 mov     byte ptr [ebp+var_4], 0
.text:00008784                 lea     ecx, [ebp+var_38] ; this
.text:00008787                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000878C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008793                 lea     ecx, [ebp+var_24] ; this
.text:00008796                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000879B                 mov     eax, [ebp+var_740]
.text:000087A1                 jmp     loc_8F16
.text:000087A6 ; ---------------------------------------------------------------------------
.text:000087A6
.text:000087A6 loc_87A6:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4D2Aj
.text:000087A6                 mov     edx, [ebp+var_14]
.text:000087A9                 movzx   eax, byte ptr [edx+12h]
.text:000087AD                 test    eax, eax
.text:000087AF                 jz      short loc_87B8
.text:000087B1                 mov     [ebp+var_656], 0
.text:000087B8
.text:000087B8 loc_87B8:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4CCDj
.text:000087B8                                         ; CArc::OpenStream2(COpenOptions const &)+4CDFj ...
.text:000087B8                 mov     ecx, [ebp+var_634]
.text:000087BE                 or      ecx, [ebp+var_630]
.text:000087C4                 jz      short loc_87FE
.text:000087C6                 movzx   edx, [ebp+var_5E7]
.text:000087CD                 test    edx, edx
.text:000087CF                 jnz     short loc_87FC
.text:000087D1                 movzx   eax, [ebp+var_656]
.text:000087D8                 test    eax, eax
.text:000087DA                 jz      short loc_87ED
.text:000087DC                 mov     ecx, [ebp+var_580]
.text:000087E2                 mov     dl, [ecx+2]
.text:000087E5                 mov     [ebp+var_655], dl
.text:000087EB                 jmp     short loc_87FC
.text:000087ED ; ---------------------------------------------------------------------------
.text:000087ED
.text:000087ED loc_87ED:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4E62j
.text:000087ED                 mov     eax, [ebp+var_580]
.text:000087F3                 mov     cl, [eax+1]
.text:000087F6                 mov     [ebp+var_655], cl
.text:000087FC
.text:000087FC loc_87FC:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4E57j
.text:000087FC                                         ; CArc::OpenStream2(COpenOptions const &)+4E73j
.text:000087FC                 jmp     short loc_882D
.text:000087FE ; ---------------------------------------------------------------------------
.text:000087FE
.text:000087FE loc_87FE:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4E4Cj
.text:000087FE                 movzx   edx, [ebp+var_656]
.text:00008805                 test    edx, edx
.text:00008807                 jnz     short loc_8812
.text:00008809                 mov     [ebp+var_655], 1
.text:00008810                 jmp     short loc_8820
.text:00008812 ; ---------------------------------------------------------------------------
.text:00008812
.text:00008812 loc_8812:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4E8Fj
.text:00008812                 mov     eax, [ebp+var_580]
.text:00008818                 mov     cl, [eax]
.text:0000881A                 mov     [ebp+var_655], cl
.text:00008820
.text:00008820 loc_8820:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4E98j
.text:00008820                 cmp     [ebp+var_7C], 0FFFFFFFEh
.text:00008824                 jl      short loc_882D
.text:00008826                 mov     [ebp+var_655], 1
.text:0000882D
.text:0000882D loc_882D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &):loc_87FCj
.text:0000882D                                         ; CArc::OpenStream2(COpenOptions const &)+4EACj
.text:0000882D                 cmp     [ebp+var_7C], 0
.text:00008831                 jge     short loc_8845
.text:00008833                 movzx   edx, [ebp+var_5E8]
.text:0000883A                 test    edx, edx
.text:0000883C                 jz      short loc_8845
.text:0000883E                 mov     [ebp+var_655], 0
.text:00008845
.text:00008845 loc_8845:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4EB9j
.text:00008845                                         ; CArc::OpenStream2(COpenOptions const &)+4EC4j
.text:00008845                 movzx   eax, [ebp+var_655]
.text:0000884C                 test    eax, eax
.text:0000884E                 jnz     loc_88F7
.text:00008854                 movzx   ecx, [ebp+var_5E8]
.text:0000885B                 test    ecx, ecx
.text:0000885D                 jnz     loc_88F7
.text:00008863                 movzx   edx, [ebp+var_656]
.text:0000886A                 test    edx, edx
.text:0000886C                 jnz     loc_88F7
.text:00008872                 movzx   eax, [ebp+var_5E7]
.text:00008879                 test    eax, eax
.text:0000887B                 jz      short loc_888B
.text:0000887D                 mov     ecx, [ebp+var_634]
.text:00008883                 or      ecx, [ebp+var_630]
.text:00008889                 jnz     short loc_88F7
.text:0000888B
.text:0000888B loc_888B:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4F03j
.text:0000888B                 mov     ecx, [ebp+var_1A8]
.text:00008891                 add     ecx, 0Ch
.text:00008894                 call    ?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NParser::CParseItem>::IsEmpty(void)
.text:00008899                 movzx   edx, al
.text:0000889C                 test    edx, edx
.text:0000889E                 jz      short loc_88B7
.text:000088A0                 mov     eax, [ebp+var_580]
.text:000088A6                 movzx   ecx, byte ptr [eax+1]
.text:000088AA                 test    ecx, ecx
.text:000088AC                 jz      short loc_88B5
.text:000088AE                 mov     [ebp+var_655], 1
.text:000088B5
.text:000088B5 loc_88B5:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4F34j
.text:000088B5                 jmp     short loc_88F7
.text:000088B7 ; ---------------------------------------------------------------------------
.text:000088B7
.text:000088B7 loc_88B7:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4F26j
.text:000088B7                 mov     ecx, [ebp+var_1A8]
.text:000088BD                 add     ecx, 0Ch
.text:000088C0                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:000088C5                 cmp     eax, 1
.text:000088C8                 jnz     short loc_88F7
.text:000088CA                 push    0
.text:000088CC                 mov     ecx, [ebp+var_1A8]
.text:000088D2                 add     ecx, 0Ch
.text:000088D5                 call    ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[](uint)
.text:000088DA                 movzx   edx, byte ptr [eax+4Ch]
.text:000088DE                 test    edx, edx
.text:000088E0                 jz      short loc_88F7
.text:000088E2                 mov     eax, [ebp+var_138]
.text:000088E8                 movzx   ecx, byte ptr [eax+0Eh]
.text:000088EC                 test    ecx, ecx
.text:000088EE                 jz      short loc_88F7
.text:000088F0                 mov     [ebp+var_655], 1
.text:000088F7
.text:000088F7 loc_88F7:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4ED6j
.text:000088F7                                         ; CArc::OpenStream2(COpenOptions const &)+4EE5j ...
.text:000088F7                 movzx   edx, [ebp+var_655]
.text:000088FE                 test    edx, edx
.text:00008900                 jz      loc_8A4D
.text:00008906                 mov     eax, [ebp+arg_0]
.text:00008909                 mov     ecx, [eax+30h]
.text:0000890C                 push    ecx
.text:0000890D                 mov     ecx, [ebp+var_14]
.text:00008910                 add     ecx, 4
.text:00008913                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00008918                 lea     edx, [ebp+var_588]
.text:0000891E                 push    edx
.text:0000891F                 mov     ecx, [ebp+var_14]
.text:00008922                 call    ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=(CMyComPtr<IInArchive> const &)
.text:00008927                 mov     eax, [ebp+var_14]
.text:0000892A                 mov     ecx, [ebp+var_554]
.text:00008930                 mov     [eax+94h], ecx
.text:00008936                 mov     edx, [ebp+var_14]
.text:00008939                 mov     eax, [ebp+var_5A0]
.text:0000893F                 mov     [edx+0D0h], eax
.text:00008945                 mov     ecx, [ebp+var_59C]
.text:0000894B                 mov     [edx+0D4h], ecx
.text:00008951                 mov     [ebp+var_744], 0
.text:0000895B                 mov     byte ptr [ebp+var_4], 1Ah
.text:0000895F                 lea     ecx, [ebp+var_634] ; this
.text:00008965                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:0000896A                 mov     byte ptr [ebp+var_4], 19h
.text:0000896E                 lea     ecx, [ebp+var_588]
.text:00008974                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008979                 mov     byte ptr [ebp+var_4], 17h
.text:0000897D                 lea     ecx, [ebp+var_4B4]
.text:00008983                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00008988                 mov     byte ptr [ebp+var_4], 16h
.text:0000898C                 lea     ecx, [ebp+var_478]
.text:00008992                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008997                 mov     byte ptr [ebp+var_4], 15h
.text:0000899B                 lea     ecx, [ebp+var_46C]
.text:000089A1                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000089A6                 mov     byte ptr [ebp+var_4], 14h
.text:000089AA                 lea     ecx, [ebp+var_34C]
.text:000089B0                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:000089B5                 mov     byte ptr [ebp+var_4], 12h
.text:000089B9                 lea     ecx, [ebp+var_330]
.text:000089BF                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:000089C4                 mov     byte ptr [ebp+var_4], 11h
.text:000089C8                 lea     ecx, [ebp+var_310]
.text:000089CE                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000089D3                 mov     byte ptr [ebp+var_4], 0Ch
.text:000089D7                 lea     ecx, [ebp+var_2FC]
.text:000089DD                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000089E2                 mov     byte ptr [ebp+var_4], 0Ah
.text:000089E6                 lea     ecx, [ebp+var_1C0]
.text:000089EC                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:000089F1                 mov     byte ptr [ebp+var_4], 6
.text:000089F5                 lea     ecx, [ebp+var_1B0]
.text:000089FB                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008A00                 mov     byte ptr [ebp+var_4], 3
.text:00008A04                 lea     ecx, [ebp+var_12C]
.text:00008A0A                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008A0F                 mov     byte ptr [ebp+var_4], 2
.text:00008A13                 lea     ecx, [ebp+var_60]
.text:00008A16                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008A1B                 mov     byte ptr [ebp+var_4], 1
.text:00008A1F                 lea     ecx, [ebp+var_50]
.text:00008A22                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00008A27                 mov     byte ptr [ebp+var_4], 0
.text:00008A2B                 lea     ecx, [ebp+var_38] ; this
.text:00008A2E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008A33                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008A3A                 lea     ecx, [ebp+var_24] ; this
.text:00008A3D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008A42                 mov     eax, [ebp+var_744]
.text:00008A48                 jmp     loc_8F16
.text:00008A4D ; ---------------------------------------------------------------------------
.text:00008A4D
.text:00008A4D loc_8A4D:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4C8Aj
.text:00008A4D                                         ; CArc::OpenStream2(COpenOptions const &)+4C9Cj ...
.text:00008A4D                 mov     edx, [ebp+var_554]
.text:00008A53                 mov     [ebp+var_5CC], edx
.text:00008A59                 lea     eax, [ebp+var_634]
.text:00008A5F                 push    eax             ; struct NArchive::NParser::CParseItem *
.text:00008A60                 mov     ecx, [ebp+var_1A8] ; this
.text:00008A66                 call    ?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z ; NArchive::NParser::CHandler::AddItem(NArchive::NParser::CParseItem const &)
.text:00008A6B                 mov     [ebp+var_54D], 1
.text:00008A72                 mov     byte ptr [ebp+var_4], 1Ah
.text:00008A76                 lea     ecx, [ebp+var_634] ; this
.text:00008A7C                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:00008A81                 mov     byte ptr [ebp+var_4], 19h
.text:00008A85                 lea     ecx, [ebp+var_588]
.text:00008A8B                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008A90                 jmp     short loc_8A97
.text:00008A92 ; ---------------------------------------------------------------------------
.text:00008A92                 jmp     loc_72F8
.text:00008A97 ; ---------------------------------------------------------------------------
.text:00008A97
.text:00008A97 loc_8A97:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+39EBj
.text:00008A97                                         ; CArc::OpenStream2(COpenOptions const &)+5118j
.text:00008A97                 movzx   ecx, [ebp+var_54D]
.text:00008A9E                 test    ecx, ecx
.text:00008AA0                 jnz     short loc_8AC0
.text:00008AA2                 mov     edx, [ebp+var_4E0]
.text:00008AA8                 add     edx, 1
.text:00008AAB                 mov     eax, [ebp+var_4DC]
.text:00008AB1                 adc     eax, 0
.text:00008AB4                 mov     [ebp+var_4E0], edx
.text:00008ABA                 mov     [ebp+var_4DC], eax
.text:00008AC0
.text:00008AC0 loc_8AC0:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+5128j
.text:00008AC0                 movzx   ecx, [ebp+var_541]
.text:00008AC7                 test    ecx, ecx
.text:00008AC9                 jz      short loc_8AE2
.text:00008ACB                 movzx   edx, [ebp+var_54D]
.text:00008AD2                 test    edx, edx
.text:00008AD4                 jz      short loc_8AE2
.text:00008AD6                 mov     [ebp+var_848], 1
.text:00008AE0                 jmp     short loc_8AEC
.text:00008AE2 ; ---------------------------------------------------------------------------
.text:00008AE2
.text:00008AE2 loc_8AE2:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+5151j
.text:00008AE2                                         ; CArc::OpenStream2(COpenOptions const &)+515Cj
.text:00008AE2                 mov     [ebp+var_848], 0
.text:00008AEC
.text:00008AEC loc_8AEC:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+5168j
.text:00008AEC                 mov     al, byte ptr [ebp+var_848]
.text:00008AF2                 mov     [ebp+var_4C9], al
.text:00008AF8                 jmp     loc_69CE
.text:00008AFD ; ---------------------------------------------------------------------------
.text:00008AFD
.text:00008AFD loc_8AFD:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+37ACj
.text:00008AFD                                         ; CArc::OpenStream2(COpenOptions const &):loc_7175j
.text:00008AFD                 mov     ecx, [ebp+var_138]
.text:00008B03                 movzx   edx, byte ptr [ecx+12h]
.text:00008B07                 test    edx, edx
.text:00008B09                 jz      loc_8D97
.text:00008B0F                 mov     ecx, [ebp+var_1A8]
.text:00008B15                 add     ecx, 0Ch
.text:00008B18                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:00008B1D                 sub     eax, 1
.text:00008B20                 neg     eax
.text:00008B22                 sbb     eax, eax
.text:00008B24                 add     eax, 1
.text:00008B27                 mov     [ebp+var_65D], al
.text:00008B2D                 mov     eax, dword ptr [ebp+var_118+4]
.text:00008B33                 push    eax
.text:00008B34                 mov     ecx, dword ptr [ebp+var_118]
.text:00008B3A                 push    ecx             ; unsigned __int64
.text:00008B3B                 mov     ecx, [ebp+var_1A8] ; this
.text:00008B41                 call    ?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z ; NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)
.text:00008B46                 mov     ecx, [ebp+var_1A8]
.text:00008B4C                 add     ecx, 0Ch
.text:00008B4F                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:00008B54                 test    eax, eax
.text:00008B56                 jnz     loc_8C3A
.text:00008B5C                 mov     [ebp+var_748], 1
.text:00008B66                 mov     byte ptr [ebp+var_4], 17h
.text:00008B6A                 lea     ecx, [ebp+var_4B4]
.text:00008B70                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00008B75                 mov     byte ptr [ebp+var_4], 16h
.text:00008B79                 lea     ecx, [ebp+var_478]
.text:00008B7F                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008B84                 mov     byte ptr [ebp+var_4], 15h
.text:00008B88                 lea     ecx, [ebp+var_46C]
.text:00008B8E                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008B93                 mov     byte ptr [ebp+var_4], 14h
.text:00008B97                 lea     ecx, [ebp+var_34C]
.text:00008B9D                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00008BA2                 mov     byte ptr [ebp+var_4], 12h
.text:00008BA6                 lea     ecx, [ebp+var_330]
.text:00008BAC                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00008BB1                 mov     byte ptr [ebp+var_4], 11h
.text:00008BB5                 lea     ecx, [ebp+var_310]
.text:00008BBB                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008BC0                 mov     byte ptr [ebp+var_4], 0Ch
.text:00008BC4                 lea     ecx, [ebp+var_2FC]
.text:00008BCA                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008BCF                 mov     byte ptr [ebp+var_4], 0Ah
.text:00008BD3                 lea     ecx, [ebp+var_1C0]
.text:00008BD9                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00008BDE                 mov     byte ptr [ebp+var_4], 6
.text:00008BE2                 lea     ecx, [ebp+var_1B0]
.text:00008BE8                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008BED                 mov     byte ptr [ebp+var_4], 3
.text:00008BF1                 lea     ecx, [ebp+var_12C]
.text:00008BF7                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008BFC                 mov     byte ptr [ebp+var_4], 2
.text:00008C00                 lea     ecx, [ebp+var_60]
.text:00008C03                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008C08                 mov     byte ptr [ebp+var_4], 1
.text:00008C0C                 lea     ecx, [ebp+var_50]
.text:00008C0F                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00008C14                 mov     byte ptr [ebp+var_4], 0
.text:00008C18                 lea     ecx, [ebp+var_38] ; this
.text:00008C1B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008C20                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008C27                 lea     ecx, [ebp+var_24] ; this
.text:00008C2A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008C2F                 mov     eax, [ebp+var_748]
.text:00008C35                 jmp     loc_8F16
.text:00008C3A ; ---------------------------------------------------------------------------
.text:00008C3A
.text:00008C3A loc_8C3A:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+51DEj
.text:00008C3A                 movzx   edx, [ebp+var_65D]
.text:00008C41                 test    edx, edx
.text:00008C43                 jnz     short loc_8C5C
.text:00008C45                 mov     ecx, [ebp+var_1A8]
.text:00008C4B                 add     ecx, 0Ch
.text:00008C4E                 call    ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size(void)
.text:00008C53                 cmp     eax, 1
.text:00008C56                 jz      loc_8D97
.text:00008C5C
.text:00008C5C loc_8C5C:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+52CBj
.text:00008C5C                 mov     eax, [ebp+arg_0]
.text:00008C5F                 mov     ecx, [eax+30h]
.text:00008C62                 push    ecx
.text:00008C63                 mov     ecx, [ebp+var_1A8]
.text:00008C69                 add     ecx, 20h ; ' '
.text:00008C6C                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00008C71                 lea     edx, [ebp+var_1B0]
.text:00008C77                 push    edx
.text:00008C78                 mov     ecx, [ebp+var_14]
.text:00008C7B                 call    ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=(CMyComPtr<IInArchive> const &)
.text:00008C80                 mov     ecx, [ebp+var_14]
.text:00008C83                 add     ecx, 10h        ; this
.text:00008C86                 call    ?ClearErrors@CArcErrorInfo@@QAEXXZ ; CArcErrorInfo::ClearErrors(void)
.text:00008C8B                 mov     eax, [ebp+var_14]
.text:00008C8E                 mov     byte ptr [eax+0D8h], 1
.text:00008C95                 mov     ecx, [ebp+var_14]
.text:00008C98                 mov     dword ptr [ecx+94h], 0FFFFFFFFh
.text:00008CA2                 mov     edx, [ebp+var_14]
.text:00008CA5                 mov     dword ptr [edx+0A8h], 0
.text:00008CAF                 mov     dword ptr [edx+0ACh], 0
.text:00008CB9                 mov     [ebp+var_74C], 0
.text:00008CC3                 mov     byte ptr [ebp+var_4], 17h
.text:00008CC7                 lea     ecx, [ebp+var_4B4]
.text:00008CCD                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00008CD2                 mov     byte ptr [ebp+var_4], 16h
.text:00008CD6                 lea     ecx, [ebp+var_478]
.text:00008CDC                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008CE1                 mov     byte ptr [ebp+var_4], 15h
.text:00008CE5                 lea     ecx, [ebp+var_46C]
.text:00008CEB                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008CF0                 mov     byte ptr [ebp+var_4], 14h
.text:00008CF4                 lea     ecx, [ebp+var_34C]
.text:00008CFA                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00008CFF                 mov     byte ptr [ebp+var_4], 12h
.text:00008D03                 lea     ecx, [ebp+var_330]
.text:00008D09                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00008D0E                 mov     byte ptr [ebp+var_4], 11h
.text:00008D12                 lea     ecx, [ebp+var_310]
.text:00008D18                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008D1D                 mov     byte ptr [ebp+var_4], 0Ch
.text:00008D21                 lea     ecx, [ebp+var_2FC]
.text:00008D27                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008D2C                 mov     byte ptr [ebp+var_4], 0Ah
.text:00008D30                 lea     ecx, [ebp+var_1C0]
.text:00008D36                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00008D3B                 mov     byte ptr [ebp+var_4], 6
.text:00008D3F                 lea     ecx, [ebp+var_1B0]
.text:00008D45                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008D4A                 mov     byte ptr [ebp+var_4], 3
.text:00008D4E                 lea     ecx, [ebp+var_12C]
.text:00008D54                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008D59                 mov     byte ptr [ebp+var_4], 2
.text:00008D5D                 lea     ecx, [ebp+var_60]
.text:00008D60                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008D65                 mov     byte ptr [ebp+var_4], 1
.text:00008D69                 lea     ecx, [ebp+var_50]
.text:00008D6C                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00008D71                 mov     byte ptr [ebp+var_4], 0
.text:00008D75                 lea     ecx, [ebp+var_38] ; this
.text:00008D78                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008D7D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008D84                 lea     ecx, [ebp+var_24] ; this
.text:00008D87                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008D8C                 mov     eax, [ebp+var_74C]
.text:00008D92                 jmp     loc_8F16
.text:00008D97 ; ---------------------------------------------------------------------------
.text:00008D97
.text:00008D97 loc_8D97:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+5191j
.text:00008D97                                         ; CArc::OpenStream2(COpenOptions const &)+52DEj
.text:00008D97                 mov     byte ptr [ebp+var_4], 17h
.text:00008D9B                 lea     ecx, [ebp+var_4B4]
.text:00008DA1                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00008DA6                 mov     byte ptr [ebp+var_4], 16h
.text:00008DAA                 lea     ecx, [ebp+var_478]
.text:00008DB0                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008DB5                 mov     byte ptr [ebp+var_4], 15h
.text:00008DB9                 lea     ecx, [ebp+var_46C]
.text:00008DBF                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008DC4                 mov     byte ptr [ebp+var_4], 14h
.text:00008DC8                 lea     ecx, [ebp+var_34C]
.text:00008DCE                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00008DD3                 mov     byte ptr [ebp+var_4], 12h
.text:00008DD7                 lea     ecx, [ebp+var_330]
.text:00008DDD                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00008DE2                 mov     ecx, [ebp+var_14]
.text:00008DE5                 call    ??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ ; CMyComPtr<IInArchive>::operator!(void)
.text:00008DEA                 movzx   eax, al
.text:00008DED                 test    eax, eax
.text:00008DEF                 jz      loc_8E88
.text:00008DF5                 mov     [ebp+var_750], 1
.text:00008DFF                 mov     byte ptr [ebp+var_4], 11h
.text:00008E03                 lea     ecx, [ebp+var_310]
.text:00008E09                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008E0E                 mov     byte ptr [ebp+var_4], 0Ch
.text:00008E12                 lea     ecx, [ebp+var_2FC]
.text:00008E18                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008E1D                 mov     byte ptr [ebp+var_4], 0Ah
.text:00008E21                 lea     ecx, [ebp+var_1C0]
.text:00008E27                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00008E2C                 mov     byte ptr [ebp+var_4], 6
.text:00008E30                 lea     ecx, [ebp+var_1B0]
.text:00008E36                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008E3B                 mov     byte ptr [ebp+var_4], 3
.text:00008E3F                 lea     ecx, [ebp+var_12C]
.text:00008E45                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008E4A                 mov     byte ptr [ebp+var_4], 2
.text:00008E4E                 lea     ecx, [ebp+var_60]
.text:00008E51                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008E56                 mov     byte ptr [ebp+var_4], 1
.text:00008E5A                 lea     ecx, [ebp+var_50]
.text:00008E5D                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00008E62                 mov     byte ptr [ebp+var_4], 0
.text:00008E66                 lea     ecx, [ebp+var_38] ; this
.text:00008E69                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008E6E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008E75                 lea     ecx, [ebp+var_24] ; this
.text:00008E78                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008E7D                 mov     eax, [ebp+var_750]
.text:00008E83                 jmp     loc_8F16
.text:00008E88 ; ---------------------------------------------------------------------------
.text:00008E88
.text:00008E88 loc_8E88:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+5477j
.text:00008E88                 mov     [ebp+var_754], 0
.text:00008E92                 mov     byte ptr [ebp+var_4], 11h
.text:00008E96                 lea     ecx, [ebp+var_310]
.text:00008E9C                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008EA1                 mov     byte ptr [ebp+var_4], 0Ch
.text:00008EA5                 lea     ecx, [ebp+var_2FC]
.text:00008EAB                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00008EB0                 mov     byte ptr [ebp+var_4], 0Ah
.text:00008EB4                 lea     ecx, [ebp+var_1C0]
.text:00008EBA                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:00008EBF                 mov     byte ptr [ebp+var_4], 6
.text:00008EC3                 lea     ecx, [ebp+var_1B0]
.text:00008EC9                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00008ECE                 mov     byte ptr [ebp+var_4], 3
.text:00008ED2                 lea     ecx, [ebp+var_12C]
.text:00008ED8                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008EDD                 mov     byte ptr [ebp+var_4], 2
.text:00008EE1                 lea     ecx, [ebp+var_60]
.text:00008EE4                 call    ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text:00008EE9                 mov     byte ptr [ebp+var_4], 1
.text:00008EED                 lea     ecx, [ebp+var_50]
.text:00008EF0                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00008EF5                 mov     byte ptr [ebp+var_4], 0
.text:00008EF9                 lea     ecx, [ebp+var_38] ; this
.text:00008EFC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008F01                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008F08                 lea     ecx, [ebp+var_24] ; this
.text:00008F0B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00008F10                 mov     eax, [ebp+var_754]
.text:00008F16
.text:00008F16 loc_8F16:                               ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+34Bj
.text:00008F16                                         ; CArc::OpenStream2(COpenOptions const &)+3F1j ...
.text:00008F16                 push    edx
.text:00008F17                 mov     ecx, ebp
.text:00008F19                 push    eax
.text:00008F1A                 lea     edx, $LN399
.text:00008F20                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00008F25                 pop     eax
.text:00008F26                 pop     edx
.text:00008F27                 mov     ecx, [ebp+var_C]
.text:00008F2A                 mov     large fs:0, ecx
.text:00008F31                 pop     ecx
.text:00008F32                 pop     edi
.text:00008F33                 pop     esi
.text:00008F34                 mov     ecx, [ebp+var_10]
.text:00008F37                 xor     ecx, ebp
.text:00008F39                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00008F3E                 add     esp, 848h
.text:00008F44                 cmp     ebp, esp
.text:00008F46                 call    __RTC_CheckEsp
.text:00008F4B                 mov     esp, ebp
.text:00008F4D                 pop     ebp
.text:00008F4E                 retn    4
.text:00008F4E ?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z endp
.text:00008F4E
.text:00008F4E ; ---------------------------------------------------------------------------
.text:00008F51                 align 4
.text:00008F54 $LN399          dd offset $SG73679+2    ; DATA XREF: CArc::OpenStream2(COpenOptions const &)+55A2o
.text:00008F54                                         ; "e"
.text:00008F58                 dd offset $LN398
.text:00008F5C $LN398          dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:00008F58o
.text:00008F64                 dd offset $LN363        ; "fileName"
.text:00008F68                 dd 0FFFFFFC8h, 0Ch
.text:00008F70                 dd offset $LN364        ; "extension"
.text:00008F74                 dd 0FFFFFFB0h, 0Ch
.text:00008F7C                 dd offset $LN365        ; "orderIndices"
.text:00008F80                 dd 0FFFFFFA0h, 4
.text:00008F88                 dd offset $LN366        ; "isMainFormatArr"
.text:00008F8C                 dd 0FFFFFF64h, 8
.text:00008F94                 dd offset $LN367        ; "byteBuffer"
.text:00008F98                 dd 0FFFFFF50h, 0Ch
.text:00008FA0                 dd offset $LN368        ; "orderIndices2"
.text:00008FA4                 dd 0FFFFFF3Ch, 4
.text:00008FAC                 dd offset $LN369        ; "processedSize"
.text:00008FB0                 dd 0FFFFFF24h, 7
.text:00008FB8                 dd offset $LN370        ; "kRarHeader"
.text:00008FBC                 dd 0FFFFFF14h, 4
.text:00008FC4                 dd offset $LN371        ; "processedSize"
.text:00008FC8                 dd 0FFFFFEE8h, 8
.text:00008FD0                 dd offset $LN372        ; "fileSize"
.text:00008FD4                 dd 0FFFFFED4h, 4
.text:00008FDC                 dd offset $LN373        ; "skipFrontalFormat"
.text:00008FE0                 dd 0FFFFFEA8h, 4
.text:00008FE8                 dd offset $LN374        ; "archive"
.text:00008FEC                 db 90h
.text:00008FED                 db 0FEh, 2 dup(0FFh)
.text:00008FF0                 dd 8
.text:00008FF4                 dd offset $LN375        ; "searchLimit"
.text:00008FF8                 dd 0FFFFFE84h, 4
.text:00009000                 dd offset $LN376        ; "openSeq"
.text:00009004                 dd 0FFFFFE50h, 4
.text:0000900C                 dd offset $LN377        ; "handler"
.text:00009010                 dd 0FFFFFE40h, 4
.text:00009018                 dd offset $LN378        ; "extractCallback_To_OpenCallback"
.text:0000901C                 dd 0FFFFFE30h, 8
.text:00009024                 dd offset $LN379        ; "byteBuffer"
.text:00009028                 dd 0FFFFFE20h, 4
.text:00009030                 dd offset $LN380        ; "processedSize"
.text:00009034                 dd 0FFFFFE00h, 0Ch
.text:0000903C                 dd offset $LN381        ; "sortedFormats"
.text:00009040                 dd 0FFFFFDC4h, 4
.text:00009048                 dd offset $LN382        ; "archive"
.text:0000904C                 dd 0FFFFFDACh, 8
.text:00009054                 dd offset $LN383        ; "searchLimit"
.text:00009058                 dd 0FFFFFD2Ch, 70h
.text:00009060                 dd offset $LN384        ; "pi"
.text:00009064                 dd 0FFFFFD04h, 0Ch
.text:0000906C                 dd offset $LN385        ; "arc2sig"
.text:00009070                 dd 0FFFFFCF0h, 0Ch
.text:00009078                 dd offset $LN386        ; "sig2arc"
.text:0000907C                 dd 0FFFFFCD0h, 4
.text:00009084                 dd offset $LN387        ; "openCallback_Offset"
.text:00009088                 dd 0FFFFFCB4h, 4
.text:00009090                 dd offset $LN388        ; "hashBuffer"
.text:00009094                 dd 0FFFFFBA8h, 100h
.text:0000909C                 dd offset $LN389        ; "prevs"
.text:000090A0                 dd 0FFFFFB94h, 0Ch
.text:000090A8                 dd offset $LN390        ; "difficultFormats"
.text:000090AC                 dd 0FFFFFB88h, 4
.text:000090B4                 dd offset $LN391        ; "difficultBools"
.text:000090B8                 dd 0FFFFFB4Ch, 4
.text:000090C0                 dd offset $LN392        ; "limitedStream"
.text:000090C4                 dd 0FFFFFB0Ch, 4
.text:000090CC                 dd offset $LN393        ; "processedSize"
.text:000090D0                 dd 0FFFFFA78h, 4
.text:000090D8                 dd offset $LN394        ; "archive"
.text:000090DC                 dd 0FFFFFA54h, 8
.text:000090E4                 dd offset $LN395        ; "maxCheckStartPosition"
.text:000090E8                 db 0CCh
.text:000090E9                 db 0F9h, 2 dup(0FFh)
.text:000090EC                 dd offset $SG73707      ; "wim"
.text:000090F0                 dd offset $LN396
.text:000090F4 $LN396          db 70h, 69h, 0          ; DATA XREF: .text:000090F0o
.text:000090F7 $LN395          db 'maxCheckStartPosition',0 ; DATA XREF: .text:000090E4o
.text:0000910D $LN394          db 'archive',0          ; DATA XREF: .text:000090D8o
.text:00009115 $LN393          db 'processedSize',0    ; DATA XREF: .text:000090CCo
.text:00009123 $LN392          db 'limitedStream',0    ; DATA XREF: .text:000090C0o
.text:00009131 $LN391          db 'difficultBools',0   ; DATA XREF: .text:000090B4o
.text:00009140 $LN390          db 'difficultFormats',0 ; DATA XREF: .text:000090A8o
.text:00009151 $LN389          db 'prevs',0            ; DATA XREF: .text:0000909Co
.text:00009157 $LN388          db 'hashBuffer',0       ; DATA XREF: .text:00009090o
.text:00009162 $LN387          db 'openCallback_Offset',0 ; DATA XREF: .text:00009084o
.text:00009176 $LN386          db 'sig2arc',0          ; DATA XREF: .text:00009078o
.text:0000917E $LN385          db 'arc2sig',0          ; DATA XREF: .text:0000906Co
.text:00009186 $LN384          db 'pi',0               ; DATA XREF: .text:00009060o
.text:00009189 $LN383          db 'searchLimit',0      ; DATA XREF: .text:00009054o
.text:00009195 $LN382          db 'archive',0          ; DATA XREF: .text:00009048o
.text:0000919D $LN381          db 'sortedFormats',0    ; DATA XREF: .text:0000903Co
.text:000091AB $LN380          db 'processedSize',0    ; DATA XREF: .text:00009030o
.text:000091B9 $LN379          db 'byteBuffer',0       ; DATA XREF: .text:00009024o
.text:000091C4 $LN378          db 'extractCallback_To_OpenCallback',0
.text:000091C4                                         ; DATA XREF: .text:00009018o
.text:000091E4 $LN377          db 'handler',0          ; DATA XREF: .text:0000900Co
.text:000091EC $LN376          db 'openSeq',0          ; DATA XREF: .text:00009000o
.text:000091F4 $LN375          db 'searchLimit',0      ; DATA XREF: .text:00008FF4o
.text:00009200 $LN374          db 'archive',0          ; DATA XREF: .text:00008FE8o
.text:00009208 $LN373          db 'skipFrontalFormat',0 ; DATA XREF: .text:00008FDCo
.text:0000921A $LN372          db 'fileSize',0         ; DATA XREF: .text:00008FD0o
.text:00009223 $LN371          db 'processedSize',0    ; DATA XREF: .text:00008FC4o
.text:00009231 $LN370          db 'kRarHeader',0       ; DATA XREF: .text:00008FB8o
.text:0000923C $LN369          db 'processedSize',0    ; DATA XREF: .text:00008FACo
.text:0000924A $LN368          db 'orderIndices2',0    ; DATA XREF: .text:00008FA0o
.text:00009258 $LN367          db 'byteBuffer',0       ; DATA XREF: .text:00008F94o
.text:00009263 $LN366          db 'isMainFormatArr',0  ; DATA XREF: .text:00008F88o
.text:00009273 $LN365          db 'orderIndices',0     ; DATA XREF: .text:00008F7Co
.text:00009280 $LN364          db 'extension',0        ; DATA XREF: .text:00008F70o
.text:0000928A $LN363          db 'fileName',0         ; DATA XREF: .text:00008F64o
.text:00009293                 align 8
.text:00009298
.text:00009298 ; =============== S U B R O U T I N E =======================================
.text:00009298
.text:00009298 ; Attributes: bp-based frame
.text:00009298
.text:00009298 ; bool __stdcall TestSignature(unsigned char const *, unsigned char const *, unsigned int)
.text:00009298 ?TestSignature@@YG_NPBE0I@Z proc near   ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+5BDp
.text:00009298                                         ; CArc::OpenStream2(COpenOptions const &)+3B14p ...
.text:00009298
.text:00009298 var_4           = dword ptr -4
.text:00009298 arg_0           = dword ptr  8
.text:00009298 arg_4           = dword ptr  0Ch
.text:00009298 arg_8           = dword ptr  10h
.text:00009298
.text:00009298                 push    ebp
.text:00009299                 mov     ebp, esp
.text:0000929B                 push    ecx
.text:0000929C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000092A3                 mov     [ebp+var_4], 0
.text:000092AA                 jmp     short loc_92B5
.text:000092AC ; ---------------------------------------------------------------------------
.text:000092AC
.text:000092AC loc_92AC:                               ; CODE XREF: TestSignature(uchar const *,uchar const *,uint):loc_92D7j
.text:000092AC                 mov     eax, [ebp+var_4]
.text:000092AF                 add     eax, 1
.text:000092B2                 mov     [ebp+var_4], eax
.text:000092B5
.text:000092B5 loc_92B5:                               ; CODE XREF: TestSignature(uchar const *,uchar const *,uint)+12j
.text:000092B5                 mov     ecx, [ebp+var_4]
.text:000092B8                 cmp     ecx, [ebp+arg_8]
.text:000092BB                 jnb     short loc_92D9
.text:000092BD                 mov     edx, [ebp+arg_0]
.text:000092C0                 add     edx, [ebp+var_4]
.text:000092C3                 movzx   eax, byte ptr [edx]
.text:000092C6                 mov     ecx, [ebp+arg_4]
.text:000092C9                 add     ecx, [ebp+var_4]
.text:000092CC                 movzx   edx, byte ptr [ecx]
.text:000092CF                 cmp     eax, edx
.text:000092D1                 jz      short loc_92D7
.text:000092D3                 xor     al, al
.text:000092D5                 jmp     short loc_92DB
.text:000092D7 ; ---------------------------------------------------------------------------
.text:000092D7
.text:000092D7 loc_92D7:                               ; CODE XREF: TestSignature(uchar const *,uchar const *,uint)+39j
.text:000092D7                 jmp     short loc_92AC
.text:000092D9 ; ---------------------------------------------------------------------------
.text:000092D9
.text:000092D9 loc_92D9:                               ; CODE XREF: TestSignature(uchar const *,uchar const *,uint)+23j
.text:000092D9                 mov     al, 1
.text:000092DB
.text:000092DB loc_92DB:                               ; CODE XREF: TestSignature(uchar const *,uchar const *,uint)+3Dj
.text:000092DB                 mov     esp, ebp
.text:000092DD                 pop     ebp
.text:000092DE                 retn    0Ch
.text:000092DE ?TestSignature@@YG_NPBE0I@Z endp
.text:000092DE
.text:000092DE ; ---------------------------------------------------------------------------
.text:000092E1                 align 8
.text:000092E8
.text:000092E8 ; =============== S U B R O U T I N E =======================================
.text:000092E8
.text:000092E8 ; Attributes: bp-based frame
.text:000092E8
.text:000092E8 ; void __stdcall MakeCheckOrder(class CCodecs *, class CRecordVector<int> &, unsigned int, class CRecordVector<int> &, unsigned char const *, unsigned int)
.text:000092E8 ?MakeCheckOrder@@YGXPAVCCodecs@@AAV?$CRecordVector@H@@I1PBEI@Z proc near
.text:000092E8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+774p
.text:000092E8                                         ; CArc::OpenStream2(COpenOptions const &)+7A1p
.text:000092E8
.text:000092E8 var_18          = dword ptr -18h
.text:000092E8 var_14          = dword ptr -14h
.text:000092E8 var_10          = dword ptr -10h
.text:000092E8 var_C           = dword ptr -0Ch
.text:000092E8 var_8           = dword ptr -8
.text:000092E8 var_4           = dword ptr -4
.text:000092E8 arg_0           = dword ptr  8
.text:000092E8 arg_4           = dword ptr  0Ch
.text:000092E8 arg_8           = dword ptr  10h
.text:000092E8 arg_C           = dword ptr  14h
.text:000092E8 arg_10          = dword ptr  18h
.text:000092E8 arg_14          = dword ptr  1Ch
.text:000092E8
.text:000092E8                 push    ebp
.text:000092E9                 mov     ebp, esp
.text:000092EB                 sub     esp, 18h
.text:000092EE                 mov     eax, 0CCCCCCCCh
.text:000092F3                 mov     [ebp+var_18], eax
.text:000092F6                 mov     [ebp+var_14], eax
.text:000092F9                 mov     [ebp+var_10], eax
.text:000092FC                 mov     [ebp+var_C], eax
.text:000092FF                 mov     [ebp+var_8], eax
.text:00009302                 mov     [ebp+var_4], eax
.text:00009305                 mov     [ebp+var_4], 0
.text:0000930C                 jmp     short loc_9317
.text:0000930E ; ---------------------------------------------------------------------------
.text:0000930E
.text:0000930E loc_930E:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+52j
.text:0000930E                                         ; MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+8Dj ...
.text:0000930E                 mov     eax, [ebp+var_4]
.text:00009311                 add     eax, 1
.text:00009314                 mov     [ebp+var_4], eax
.text:00009317
.text:00009317 loc_9317:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+24j
.text:00009317                 mov     ecx, [ebp+var_4]
.text:0000931A                 cmp     ecx, [ebp+arg_8]
.text:0000931D                 jnb     loc_9429
.text:00009323                 mov     edx, [ebp+var_4]
.text:00009326                 push    edx
.text:00009327                 mov     ecx, [ebp+arg_4]
.text:0000932A                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:0000932F                 mov     eax, [eax]
.text:00009331                 mov     [ebp+var_8], eax
.text:00009334                 cmp     [ebp+var_8], 0
.text:00009338                 jge     short loc_933C
.text:0000933A                 jmp     short loc_930E
.text:0000933C ; ---------------------------------------------------------------------------
.text:0000933C
.text:0000933C loc_933C:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+50j
.text:0000933C                 mov     ecx, [ebp+var_8]
.text:0000933F                 push    ecx
.text:00009340                 mov     ecx, [ebp+arg_0]
.text:00009343                 add     ecx, 8
.text:00009346                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:0000934B                 mov     [ebp+var_C], eax
.text:0000934E                 mov     edx, [ebp+var_C]
.text:00009351                 cmp     dword ptr [edx+2Ch], 0
.text:00009355                 jz      short loc_9377
.text:00009357                 mov     eax, [ebp+var_8]
.text:0000935A                 push    eax
.text:0000935B                 mov     ecx, [ebp+arg_C]
.text:0000935E                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:00009363                 mov     ecx, [ebp+var_4]
.text:00009366                 push    ecx
.text:00009367                 mov     ecx, [ebp+arg_4]
.text:0000936A                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:0000936F                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00009375                 jmp     short loc_930E
.text:00009377 ; ---------------------------------------------------------------------------
.text:00009377
.text:00009377 loc_9377:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+6Dj
.text:00009377                 mov     edx, [ebp+var_C]
.text:0000937A                 add     edx, 30h ; '0'
.text:0000937D                 mov     [ebp+var_10], edx
.text:00009380                 mov     [ebp+var_14], 0
.text:00009387                 jmp     short loc_9392
.text:00009389 ; ---------------------------------------------------------------------------
.text:00009389
.text:00009389 loc_9389:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint):loc_941Fj
.text:00009389                 mov     eax, [ebp+var_14]
.text:0000938C                 add     eax, 1
.text:0000938F                 mov     [ebp+var_14], eax
.text:00009392
.text:00009392 loc_9392:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+9Fj
.text:00009392                 mov     ecx, [ebp+var_10]
.text:00009395                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:0000939A                 cmp     [ebp+var_14], eax
.text:0000939D                 jnb     loc_9424
.text:000093A3                 mov     ecx, [ebp+var_14]
.text:000093A6                 push    ecx
.text:000093A7                 mov     ecx, [ebp+var_10]
.text:000093AA                 call    ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<uchar>>::operator[](uint)
.text:000093AF                 mov     [ebp+var_18], eax
.text:000093B2                 mov     ecx, [ebp+var_18]
.text:000093B5                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000093BA                 test    eax, eax
.text:000093BC                 jnz     short loc_93C4
.text:000093BE                 cmp     [ebp+arg_14], 0
.text:000093C2                 jz      short loc_93FF
.text:000093C4
.text:000093C4 loc_93C4:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+D4j
.text:000093C4                 mov     ecx, [ebp+var_18]
.text:000093C7                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000093CC                 test    eax, eax
.text:000093CE                 jz      short loc_941F
.text:000093D0                 mov     ecx, [ebp+var_18]
.text:000093D3                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000093D8                 cmp     eax, [ebp+arg_14]
.text:000093DB                 ja      short loc_941F
.text:000093DD                 mov     ecx, [ebp+var_18]
.text:000093E0                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000093E5                 push    eax
.text:000093E6                 mov     ecx, [ebp+var_18]
.text:000093E9                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:000093EE                 push    eax
.text:000093EF                 mov     edx, [ebp+arg_10]
.text:000093F2                 push    edx
.text:000093F3                 call    ?TestSignature@@YG_NPBE0I@Z ; TestSignature(uchar const *,uchar const *,uint)
.text:000093F8                 movzx   eax, al
.text:000093FB                 test    eax, eax
.text:000093FD                 jz      short loc_941F
.text:000093FF
.text:000093FF loc_93FF:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+DAj
.text:000093FF                 mov     ecx, [ebp+var_8]
.text:00009402                 push    ecx
.text:00009403                 mov     ecx, [ebp+arg_C]
.text:00009406                 call    ?Add@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::Add(int)
.text:0000940B                 mov     edx, [ebp+var_4]
.text:0000940E                 push    edx
.text:0000940F                 mov     ecx, [ebp+arg_4]
.text:00009412                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00009417                 mov     dword ptr [eax], 0FFFFFFFFh
.text:0000941D                 jmp     short loc_9424
.text:0000941F ; ---------------------------------------------------------------------------
.text:0000941F
.text:0000941F loc_941F:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+E6j
.text:0000941F                                         ; MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+F3j ...
.text:0000941F                 jmp     loc_9389
.text:00009424 ; ---------------------------------------------------------------------------
.text:00009424
.text:00009424 loc_9424:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+B5j
.text:00009424                                         ; MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+135j
.text:00009424                 jmp     loc_930E
.text:00009429 ; ---------------------------------------------------------------------------
.text:00009429
.text:00009429 loc_9429:                               ; CODE XREF: MakeCheckOrder(CCodecs *,CRecordVector<int> &,uint,CRecordVector<int> &,uchar const *,uint)+35j
.text:00009429                 add     esp, 18h
.text:0000942C                 cmp     ebp, esp
.text:0000942E                 call    __RTC_CheckEsp
.text:00009433                 mov     esp, ebp
.text:00009435                 pop     ebp
.text:00009436                 retn    18h
.text:00009436 ?MakeCheckOrder@@YGXPAVCCodecs@@AAV?$CRecordVector@H@@I1PBEI@Z endp
.text:00009436
.text:00009436 ; ---------------------------------------------------------------------------
.text:00009439                 db 0Fh dup(0CCh)
.text:00009448
.text:00009448 ; =============== S U B R O U T I N E =======================================
.text:00009448
.text:00009448 ; Attributes: bp-based frame
.text:00009448
.text:00009448 ; int __stdcall IsExeExt(UString *)
.text:00009448 ?IsExeExt@@YG_NABVUString@@@Z proc near ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+41Ep
.text:00009448
.text:00009448 arg_0           = dword ptr  8
.text:00009448
.text:00009448                 push    ebp
.text:00009449                 mov     ebp, esp
.text:0000944B                 push    offset $SG73679 ; "exe"
.text:00009450                 mov     ecx, [ebp+arg_0] ; this
.text:00009453                 call    ?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsEqualTo_Ascii_NoCase(char const *)
.text:00009458                 cmp     ebp, esp
.text:0000945A                 call    __RTC_CheckEsp
.text:0000945F                 pop     ebp
.text:00009460                 retn    4
.text:00009460 ?IsExeExt@@YG_NABVUString@@@Z endp
.text:00009460
.text:00009460 ; ---------------------------------------------------------------------------
.text:00009463                 align 8
.text:00009468
.text:00009468 ; =============== S U B R O U T I N E =======================================
.text:00009468
.text:00009468 ; Attributes: bp-based frame
.text:00009468
.text:00009468 ; int __stdcall IsPreArcFormat(CArcInfoEx *)
.text:00009468 ?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z proc near
.text:00009468                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+283p
.text:00009468                                         ; CArc::OpenStream2(COpenOptions const &)+10D9p ...
.text:00009468
.text:00009468 arg_0           = dword ptr  8
.text:00009468
.text:00009468                 push    ebp
.text:00009469                 mov     ebp, esp
.text:0000946B                 mov     ecx, [ebp+arg_0] ; this
.text:0000946E                 call    ?Flags_PreArc@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_PreArc(void)
.text:00009473                 movzx   eax, al
.text:00009476                 test    eax, eax
.text:00009478                 jz      short loc_947E
.text:0000947A                 mov     al, 1
.text:0000947C                 jmp     short loc_9491
.text:0000947E ; ---------------------------------------------------------------------------
.text:0000947E
.text:0000947E loc_947E:                               ; CODE XREF: IsPreArcFormat(CArcInfoEx const &)+10j
.text:0000947E                 push    5
.text:00009480                 push    offset _k_PreArcFormats
.text:00009485                 mov     ecx, [ebp+arg_0]
.text:00009488                 add     ecx, 0Ch
.text:0000948B                 push    ecx
.text:0000948C                 call    ?IsNameFromList@@YG_NABVUString@@QBQBDI@Z ; IsNameFromList(UString const &,char const * const * const,uint)
.text:00009491
.text:00009491 loc_9491:                               ; CODE XREF: IsPreArcFormat(CArcInfoEx const &)+14j
.text:00009491                 cmp     ebp, esp
.text:00009493                 call    __RTC_CheckEsp
.text:00009498                 pop     ebp
.text:00009499                 retn    4
.text:00009499 ?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z endp
.text:00009499
.text:00009499 ; ---------------------------------------------------------------------------
.text:0000949C                 db 0Ch dup(0CCh)
.text:000094A8
.text:000094A8 ; =============== S U B R O U T I N E =======================================
.text:000094A8
.text:000094A8 ; Attributes: bp-based frame
.text:000094A8
.text:000094A8 ; bool __stdcall IsNameFromList(class UString const &, char const * const * const, unsigned int)
.text:000094A8 ?IsNameFromList@@YG_NABVUString@@QBQBDI@Z proc near
.text:000094A8                                         ; CODE XREF: IsPreArcFormat(CArcInfoEx const &)+24p
.text:000094A8                                         ; IsNewStyleSignature(CArcInfoEx const &)+20p
.text:000094A8
.text:000094A8 var_4           = dword ptr -4
.text:000094A8 arg_0           = dword ptr  8
.text:000094A8 arg_4           = dword ptr  0Ch
.text:000094A8 arg_8           = dword ptr  10h
.text:000094A8
.text:000094A8                 push    ebp
.text:000094A9                 mov     ebp, esp
.text:000094AB                 push    ecx
.text:000094AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000094B3                 mov     [ebp+var_4], 0
.text:000094BA                 jmp     short loc_94C5
.text:000094BC ; ---------------------------------------------------------------------------
.text:000094BC
.text:000094BC loc_94BC:                               ; CODE XREF: IsNameFromList(UString const &,char const * const * const,uint):loc_94F0j
.text:000094BC                 mov     eax, [ebp+var_4]
.text:000094BF                 add     eax, 1
.text:000094C2                 mov     [ebp+var_4], eax
.text:000094C5
.text:000094C5 loc_94C5:                               ; CODE XREF: IsNameFromList(UString const &,char const * const * const,uint)+12j
.text:000094C5                 mov     ecx, [ebp+var_4]
.text:000094C8                 cmp     ecx, [ebp+arg_8]
.text:000094CB                 jnb     short loc_94F2
.text:000094CD                 mov     edx, [ebp+var_4]
.text:000094D0                 mov     eax, [ebp+arg_4]
.text:000094D3                 mov     ecx, [eax+edx*4]
.text:000094D6                 push    ecx             ; char *
.text:000094D7                 mov     ecx, [ebp+arg_0]
.text:000094DA                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000094DF                 push    eax             ; wchar_t *
.text:000094E0                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:000094E5                 movzx   edx, al
.text:000094E8                 test    edx, edx
.text:000094EA                 jz      short loc_94F0
.text:000094EC                 mov     al, 1
.text:000094EE                 jmp     short loc_94F4
.text:000094F0 ; ---------------------------------------------------------------------------
.text:000094F0
.text:000094F0 loc_94F0:                               ; CODE XREF: IsNameFromList(UString const &,char const * const * const,uint)+42j
.text:000094F0                 jmp     short loc_94BC
.text:000094F2 ; ---------------------------------------------------------------------------
.text:000094F2
.text:000094F2 loc_94F2:                               ; CODE XREF: IsNameFromList(UString const &,char const * const * const,uint)+23j
.text:000094F2                 xor     al, al
.text:000094F4
.text:000094F4 loc_94F4:                               ; CODE XREF: IsNameFromList(UString const &,char const * const * const,uint)+46j
.text:000094F4                 add     esp, 4
.text:000094F7                 cmp     ebp, esp
.text:000094F9                 call    __RTC_CheckEsp
.text:000094FE                 mov     esp, ebp
.text:00009500                 pop     ebp
.text:00009501                 retn    0Ch
.text:00009501 ?IsNameFromList@@YG_NABVUString@@QBQBDI@Z endp
.text:00009501
.text:00009501 ; ---------------------------------------------------------------------------
.text:00009504                 align 8
.text:00009508
.text:00009508 ; =============== S U B R O U T I N E =======================================
.text:00009508
.text:00009508 ; Attributes: bp-based frame
.text:00009508
.text:00009508 ; bool __stdcall IsNewStyleSignature(struct CArcInfoEx const &)
.text:00009508 ?IsNewStyleSignature@@YG_NABUCArcInfoEx@@@Z proc near
.text:00009508                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1B88p
.text:00009508
.text:00009508 arg_0           = dword ptr  8
.text:00009508
.text:00009508                 push    ebp
.text:00009509                 mov     ebp, esp
.text:0000950B                 mov     eax, [ebp+arg_0]
.text:0000950E                 movzx   ecx, byte ptr [eax+29h]
.text:00009512                 test    ecx, ecx
.text:00009514                 jz      short loc_951A
.text:00009516                 mov     al, 1
.text:00009518                 jmp     short loc_952D
.text:0000951A ; ---------------------------------------------------------------------------
.text:0000951A
.text:0000951A loc_951A:                               ; CODE XREF: IsNewStyleSignature(CArcInfoEx const &)+Cj
.text:0000951A                 push    0Ah
.text:0000951C                 push    offset _k_Formats_with_simple_signuature
.text:00009521                 mov     edx, [ebp+arg_0]
.text:00009524                 add     edx, 0Ch
.text:00009527                 push    edx
.text:00009528                 call    ?IsNameFromList@@YG_NABVUString@@QBQBDI@Z ; IsNameFromList(UString const &,char const * const * const,uint)
.text:0000952D
.text:0000952D loc_952D:                               ; CODE XREF: IsNewStyleSignature(CArcInfoEx const &)+10j
.text:0000952D                 cmp     ebp, esp
.text:0000952F                 call    __RTC_CheckEsp
.text:00009534                 pop     ebp
.text:00009535                 retn    4
.text:00009535 ?IsNewStyleSignature@@YG_NABUCArcInfoEx@@@Z endp
.text:00009535
.text:00009538
.text:00009538 ; =============== S U B R O U T I N E =======================================
.text:00009538
.text:00009538 ; Attributes: bp-based frame
.text:00009538
.text:00009538 ; int __stdcall ReadParseItemProps(struct IInArchive *, CArcInfoEx *, int)
.text:00009538 ?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z proc near
.text:00009538                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2691p
.text:00009538                                         ; CArc::OpenStream2(COpenOptions const &)+4A5Bp
.text:00009538
.text:00009538 var_EC          = dword ptr -0ECh
.text:00009538 var_E8          = dword ptr -0E8h
.text:00009538 var_E4          = dword ptr -0E4h
.text:00009538 var_E0          = dword ptr -0E0h
.text:00009538 var_DC          = dword ptr -0DCh
.text:00009538 var_D8          = dword ptr -0D8h
.text:00009538 var_D4          = dword ptr -0D4h
.text:00009538 var_D0          = dword ptr -0D0h
.text:00009538 var_CC          = byte ptr -0CCh
.text:00009538 var_B9          = byte ptr -0B9h
.text:00009538 var_AD          = byte ptr -0ADh
.text:00009538 var_A4          = dword ptr -0A4h
.text:00009538 var_A0          = dword ptr -0A0h
.text:00009538 var_98          = dword ptr -98h
.text:00009538 var_94          = dword ptr -94h
.text:00009538 var_8C          = dword ptr -8Ch
.text:00009538 var_84          = dword ptr -84h
.text:00009538 var_7C          = word ptr -7Ch
.text:00009538 var_74          = dword ptr -74h
.text:00009538 var_68          = dword ptr -68h
.text:00009538 var_64          = dword ptr -64h
.text:00009538 var_5C          = word ptr -5Ch
.text:00009538 var_54          = dword ptr -54h
.text:00009538 var_48          = dword ptr -48h
.text:00009538 var_40          = word ptr -40h
.text:00009538 var_38          = dword ptr -38h
.text:00009538 var_34          = dword ptr -34h
.text:00009538 var_2C          = dword ptr -2Ch
.text:00009538 var_24          = word ptr -24h
.text:00009538 var_1C          = dword ptr -1Ch
.text:00009538 var_18          = dword ptr -18h
.text:00009538 var_10          = dword ptr -10h
.text:00009538 var_C           = dword ptr -0Ch
.text:00009538 var_4           = dword ptr -4
.text:00009538 arg_0           = dword ptr  8
.text:00009538 arg_4           = dword ptr  0Ch
.text:00009538 arg_8           = dword ptr  10h
.text:00009538
.text:00009538                 push    ebp
.text:00009539                 mov     ebp, esp
.text:0000953B                 push    0FFFFFFFFh
.text:0000953D                 push    offset __ehhandler$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z
.text:00009542                 mov     eax, large fs:0
.text:00009548                 push    eax
.text:00009549                 sub     esp, 0E0h
.text:0000954F                 push    esi
.text:00009550                 push    edi
.text:00009551                 lea     edi, [ebp+var_EC]
.text:00009557                 mov     ecx, 38h ; '8'
.text:0000955C                 mov     eax, 0CCCCCCCCh
.text:00009561                 rep stosd
.text:00009563                 mov     eax, dword ptr ds:___security_cookie
.text:00009568                 xor     eax, ebp
.text:0000956A                 push    eax
.text:0000956B                 lea     eax, [ebp+var_C]
.text:0000956E                 mov     large fs:0, eax
.text:00009574                 lea     eax, [ebp+var_CC]
.text:0000957A                 push    eax
.text:0000957B                 mov     ecx, [ebp+arg_4]
.text:0000957E                 call    ?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ ; CArcInfoEx::GetMainExt(void)
.text:00009583                 mov     [ebp+var_E4], eax
.text:00009589                 mov     ecx, [ebp+var_E4]
.text:0000958F                 mov     [ebp+var_E8], ecx
.text:00009595                 mov     [ebp+var_4], 0
.text:0000959C                 mov     edx, [ebp+var_E8]
.text:000095A2                 push    edx
.text:000095A3                 mov     ecx, [ebp+arg_8]
.text:000095A6                 add     ecx, 1Ch
.text:000095A9                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000095AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000095B5                 lea     ecx, [ebp+var_CC] ; this
.text:000095BB                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000095C0                 mov     eax, [ebp+arg_8]
.text:000095C3                 mov     byte ptr [eax+48h], 0
.text:000095C7                 mov     ecx, [ebp+arg_4]
.text:000095CA                 add     ecx, 0Ch
.text:000095CD                 push    ecx
.text:000095CE                 mov     ecx, [ebp+arg_8]
.text:000095D1                 add     ecx, 3Ch ; '<'
.text:000095D4                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000095D9                 mov     edx, [ebp+arg_8]
.text:000095DC                 add     edx, 4Dh ; 'M'
.text:000095DF                 push    edx
.text:000095E0                 push    54h ; 'T'
.text:000095E2                 mov     eax, [ebp+arg_0]
.text:000095E5                 push    eax
.text:000095E6                 call    ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)
.text:000095EB                 mov     [ebp+var_10], eax
.text:000095EE                 cmp     [ebp+var_10], 0
.text:000095F2                 jz      short loc_95FC
.text:000095F4                 mov     eax, [ebp+var_10]
.text:000095F7                 jmp     loc_9A28
.text:000095FC ; ---------------------------------------------------------------------------
.text:000095FC
.text:000095FC loc_95FC:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+BAj
.text:000095FC                 mov     ecx, [ebp+arg_4] ; this
.text:000095FF                 call    ?Flags_PreArc@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_PreArc(void)
.text:00009604                 mov     ecx, [ebp+arg_8]
.text:00009607                 mov     [ecx+4Ch], al
.text:0000960A                 lea     ecx, [ebp+var_24] ; this
.text:0000960D                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00009612                 mov     [ebp+var_4], 1
.text:00009619                 mov     esi, esp
.text:0000961B                 lea     edx, [ebp+var_24]
.text:0000961E                 push    edx
.text:0000961F                 push    0Ch
.text:00009621                 mov     eax, [ebp+arg_0]
.text:00009624                 mov     ecx, [eax]
.text:00009626                 mov     edx, [ebp+arg_0]
.text:00009629                 push    edx
.text:0000962A                 mov     eax, [ecx+20h]
.text:0000962D                 call    eax
.text:0000962F                 cmp     esi, esp
.text:00009631                 call    __RTC_CheckEsp
.text:00009636                 mov     [ebp+var_2C], eax
.text:00009639                 cmp     [ebp+var_2C], 0
.text:0000963D                 jz      short loc_9662
.text:0000963F                 mov     ecx, [ebp+var_2C]
.text:00009642                 mov     [ebp+var_D0], ecx
.text:00009648                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000964F                 lea     ecx, [ebp+var_24] ; this
.text:00009652                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009657                 mov     eax, [ebp+var_D0]
.text:0000965D                 jmp     loc_9A28
.text:00009662 ; ---------------------------------------------------------------------------
.text:00009662
.text:00009662 loc_9662:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+105j
.text:00009662                 movzx   edx, [ebp+var_24]
.text:00009666                 cmp     edx, 40h ; '@'
.text:00009669                 jnz     short loc_9681
.text:0000966B                 mov     eax, [ebp+arg_8]
.text:0000966E                 mov     byte ptr [eax+48h], 1
.text:00009672                 mov     ecx, [ebp+arg_8]
.text:00009675                 mov     edx, [ebp+var_1C]
.text:00009678                 mov     [ecx+28h], edx
.text:0000967B                 mov     eax, [ebp+var_18]
.text:0000967E                 mov     [ecx+2Ch], eax
.text:00009681
.text:00009681 loc_9681:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+131j
.text:00009681                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009688                 lea     ecx, [ebp+var_24] ; this
.text:0000968B                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009690                 mov     ecx, [ebp+arg_8]
.text:00009693                 movzx   edx, byte ptr [ecx+48h]
.text:00009697                 test    edx, edx
.text:00009699                 jnz     loc_9725
.text:0000969F                 lea     ecx, [ebp+var_40] ; this
.text:000096A2                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000096A7                 mov     [ebp+var_4], 2
.text:000096AE                 mov     esi, esp
.text:000096B0                 lea     eax, [ebp+var_40]
.text:000096B3                 push    eax
.text:000096B4                 push    0Ah
.text:000096B6                 mov     ecx, [ebp+arg_0]
.text:000096B9                 mov     edx, [ecx]
.text:000096BB                 mov     eax, [ebp+arg_0]
.text:000096BE                 push    eax
.text:000096BF                 mov     ecx, [edx+20h]
.text:000096C2                 call    ecx
.text:000096C4                 cmp     esi, esp
.text:000096C6                 call    __RTC_CheckEsp
.text:000096CB                 mov     [ebp+var_48], eax
.text:000096CE                 cmp     [ebp+var_48], 0
.text:000096D2                 jz      short loc_96F7
.text:000096D4                 mov     edx, [ebp+var_48]
.text:000096D7                 mov     [ebp+var_D4], edx
.text:000096DD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000096E4                 lea     ecx, [ebp+var_40] ; this
.text:000096E7                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000096EC                 mov     eax, [ebp+var_D4]
.text:000096F2                 jmp     loc_9A28
.text:000096F7 ; ---------------------------------------------------------------------------
.text:000096F7
.text:000096F7 loc_96F7:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+19Aj
.text:000096F7                 movzx   eax, [ebp+var_40]
.text:000096FB                 cmp     eax, 40h ; '@'
.text:000096FE                 jnz     short loc_9716
.text:00009700                 mov     ecx, [ebp+arg_8]
.text:00009703                 mov     byte ptr [ecx+48h], 1
.text:00009707                 mov     edx, [ebp+arg_8]
.text:0000970A                 mov     eax, [ebp+var_38]
.text:0000970D                 mov     [edx+28h], eax
.text:00009710                 mov     ecx, [ebp+var_34]
.text:00009713                 mov     [edx+2Ch], ecx
.text:00009716
.text:00009716 loc_9716:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+1C6j
.text:00009716                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000971D                 lea     ecx, [ebp+var_40] ; this
.text:00009720                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009725
.text:00009725 loc_9725:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+161j
.text:00009725                 lea     ecx, [ebp+var_5C] ; this
.text:00009728                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000972D                 mov     [ebp+var_4], 3
.text:00009734                 mov     esi, esp
.text:00009736                 lea     edx, [ebp+var_5C]
.text:00009739                 push    edx
.text:0000973A                 push    4
.text:0000973C                 mov     eax, [ebp+arg_0]
.text:0000973F                 mov     ecx, [eax]
.text:00009741                 mov     edx, [ebp+arg_0]
.text:00009744                 push    edx
.text:00009745                 mov     eax, [ecx+20h]
.text:00009748                 call    eax
.text:0000974A                 cmp     esi, esp
.text:0000974C                 call    __RTC_CheckEsp
.text:00009751                 mov     [ebp+var_64], eax
.text:00009754                 cmp     [ebp+var_64], 0
.text:00009758                 jz      short loc_977D
.text:0000975A                 mov     ecx, [ebp+var_64]
.text:0000975D                 mov     [ebp+var_D8], ecx
.text:00009763                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000976A                 lea     ecx, [ebp+var_5C] ; this
.text:0000976D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009772                 mov     eax, [ebp+var_D8]
.text:00009778                 jmp     loc_9A28
.text:0000977D ; ---------------------------------------------------------------------------
.text:0000977D
.text:0000977D loc_977D:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+220j
.text:0000977D                 movzx   edx, [ebp+var_5C]
.text:00009781                 cmp     edx, 8
.text:00009784                 jnz     short loc_97A2
.text:00009786                 mov     eax, [ebp+var_54]
.text:00009789                 push    eax             ; wchar_t *
.text:0000978A                 mov     ecx, [ebp+arg_8]
.text:0000978D                 add     ecx, 10h        ; this
.text:00009790                 call    ?SetFromBstr@UString@@QAEXPA_W@Z ; UString::SetFromBstr(wchar_t *)
.text:00009795                 mov     ecx, [ebp+arg_8]
.text:00009798                 add     ecx, 1Ch        ; this
.text:0000979B                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:000097A0                 jmp     short loc_9803
.text:000097A2 ; ---------------------------------------------------------------------------
.text:000097A2
.text:000097A2 loc_97A2:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+24Cj
.text:000097A2                 mov     esi, esp
.text:000097A4                 lea     ecx, [ebp+var_5C]
.text:000097A7                 push    ecx
.text:000097A8                 push    5
.text:000097AA                 mov     edx, [ebp+arg_0]
.text:000097AD                 mov     eax, [edx]
.text:000097AF                 mov     ecx, [ebp+arg_0]
.text:000097B2                 push    ecx
.text:000097B3                 mov     edx, [eax+20h]
.text:000097B6                 call    edx
.text:000097B8                 cmp     esi, esp
.text:000097BA                 call    __RTC_CheckEsp
.text:000097BF                 mov     [ebp+var_68], eax
.text:000097C2                 cmp     [ebp+var_68], 0
.text:000097C6                 jz      short loc_97EB
.text:000097C8                 mov     eax, [ebp+var_68]
.text:000097CB                 mov     [ebp+var_DC], eax
.text:000097D1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000097D8                 lea     ecx, [ebp+var_5C] ; this
.text:000097DB                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000097E0                 mov     eax, [ebp+var_DC]
.text:000097E6                 jmp     loc_9A28
.text:000097EB ; ---------------------------------------------------------------------------
.text:000097EB
.text:000097EB loc_97EB:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+28Ej
.text:000097EB                 movzx   ecx, [ebp+var_5C]
.text:000097EF                 cmp     ecx, 8
.text:000097F2                 jnz     short loc_9803
.text:000097F4                 mov     edx, [ebp+var_54]
.text:000097F7                 push    edx             ; wchar_t *
.text:000097F8                 mov     ecx, [ebp+arg_8]
.text:000097FB                 add     ecx, 1Ch        ; this
.text:000097FE                 call    ?SetFromBstr@UString@@QAEXPA_W@Z ; UString::SetFromBstr(wchar_t *)
.text:00009803
.text:00009803 loc_9803:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+268j
.text:00009803                                         ; ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+2BAj
.text:00009803                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000980A                 lea     ecx, [ebp+var_5C] ; this
.text:0000980D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009812                 lea     ecx, [ebp+var_7C] ; this
.text:00009815                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000981A                 mov     [ebp+var_4], 4
.text:00009821                 mov     esi, esp
.text:00009823                 lea     eax, [ebp+var_7C]
.text:00009826                 push    eax
.text:00009827                 push    52h ; 'R'
.text:00009829                 mov     ecx, [ebp+arg_0]
.text:0000982C                 mov     edx, [ecx]
.text:0000982E                 mov     eax, [ebp+arg_0]
.text:00009831                 push    eax
.text:00009832                 mov     ecx, [edx+20h]
.text:00009835                 call    ecx
.text:00009837                 cmp     esi, esp
.text:00009839                 call    __RTC_CheckEsp
.text:0000983E                 mov     [ebp+var_84], eax
.text:00009844                 cmp     [ebp+var_84], 0
.text:0000984B                 jz      short loc_9873
.text:0000984D                 mov     edx, [ebp+var_84]
.text:00009853                 mov     [ebp+var_E0], edx
.text:00009859                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009860                 lea     ecx, [ebp+var_7C] ; this
.text:00009863                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009868                 mov     eax, [ebp+var_E0]
.text:0000986E                 jmp     loc_9A28
.text:00009873 ; ---------------------------------------------------------------------------
.text:00009873
.text:00009873 loc_9873:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+313j
.text:00009873                 movzx   eax, [ebp+var_7C]
.text:00009877                 cmp     eax, 8
.text:0000987A                 jnz     short loc_988B
.text:0000987C                 mov     ecx, [ebp+var_74]
.text:0000987F                 push    ecx             ; wchar_t *
.text:00009880                 mov     ecx, [ebp+arg_8]
.text:00009883                 add     ecx, 30h ; '0'  ; this
.text:00009886                 call    ?SetFromBstr@UString@@QAEXPA_W@Z ; UString::SetFromBstr(wchar_t *)
.text:0000988B
.text:0000988B loc_988B:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+342j
.text:0000988B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009892                 lea     ecx, [ebp+var_7C] ; this
.text:00009895                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000989A                 mov     esi, esp
.text:0000989C                 lea     edx, [ebp+var_8C]
.text:000098A2                 push    edx
.text:000098A3                 mov     eax, [ebp+arg_0]
.text:000098A6                 mov     ecx, [eax]
.text:000098A8                 mov     edx, [ebp+arg_0]
.text:000098AB                 push    edx
.text:000098AC                 mov     eax, [ecx+14h]
.text:000098AF                 call    eax
.text:000098B1                 cmp     esi, esp
.text:000098B3                 call    __RTC_CheckEsp
.text:000098B8                 mov     [ebp+var_94], eax
.text:000098BE                 cmp     [ebp+var_94], 0
.text:000098C5                 jz      short loc_98D2
.text:000098C7                 mov     eax, [ebp+var_94]
.text:000098CD                 jmp     loc_9A28
.text:000098D2 ; ---------------------------------------------------------------------------
.text:000098D2
.text:000098D2 loc_98D2:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+38Dj
.text:000098D2                 mov     ecx, [ebp+arg_8]
.text:000098D5                 mov     dword ptr [ecx+60h], 0
.text:000098DC                 mov     dword ptr [ecx+64h], 0
.text:000098E3                 mov     edx, [ebp+arg_8]
.text:000098E6                 mov     dword ptr [edx+58h], 0
.text:000098ED                 mov     dword ptr [edx+5Ch], 0
.text:000098F4                 mov     eax, [ebp+arg_8]
.text:000098F7                 mov     dword ptr [eax+50h], 0
.text:000098FE                 mov     dword ptr [eax+54h], 0
.text:00009905                 mov     [ebp+var_98], 0
.text:0000990F                 jmp     short loc_9920
.text:00009911 ; ---------------------------------------------------------------------------
.text:00009911
.text:00009911 loc_9911:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &):loc_99F6j
.text:00009911                 mov     ecx, [ebp+var_98]
.text:00009917                 add     ecx, 1
.text:0000991A                 mov     [ebp+var_98], ecx
.text:00009920
.text:00009920 loc_9920:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+3D7j
.text:00009920                 mov     edx, [ebp+var_98]
.text:00009926                 cmp     edx, [ebp+var_8C]
.text:0000992C                 jnb     loc_99FB
.text:00009932                 mov     [ebp+var_A4], 0
.text:0000993C                 mov     [ebp+var_A0], 0
.text:00009946                 mov     [ebp+var_AD], 0
.text:0000994D                 lea     eax, [ebp+var_AD]
.text:00009953                 push    eax
.text:00009954                 lea     ecx, [ebp+var_A4]
.text:0000995A                 push    ecx
.text:0000995B                 mov     edx, [ebp+var_98]
.text:00009961                 push    edx
.text:00009962                 mov     eax, [ebp+arg_0]
.text:00009965                 push    eax
.text:00009966                 call    ?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z ; Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)
.text:0000996B                 movzx   ecx, [ebp+var_AD]
.text:00009972                 test    ecx, ecx
.text:00009974                 jz      short loc_999B
.text:00009976                 mov     edx, [ebp+arg_8]
.text:00009979                 mov     byte ptr [edx+49h], 1
.text:0000997D                 mov     eax, [ebp+arg_8]
.text:00009980                 mov     ecx, [eax+50h]
.text:00009983                 add     ecx, [ebp+var_A4]
.text:00009989                 mov     edx, [eax+54h]
.text:0000998C                 adc     edx, [ebp+var_A0]
.text:00009992                 mov     eax, [ebp+arg_8]
.text:00009995                 mov     [eax+50h], ecx
.text:00009998                 mov     [eax+54h], edx
.text:0000999B
.text:0000999B loc_999B:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+43Cj
.text:0000999B                 mov     [ebp+var_B9], 0
.text:000099A2                 lea     ecx, [ebp+var_B9]
.text:000099A8                 push    ecx             ; bool *
.text:000099A9                 mov     edx, [ebp+var_98]
.text:000099AF                 push    edx             ; unsigned int
.text:000099B0                 mov     eax, [ebp+arg_0]
.text:000099B3                 push    eax             ; struct IInArchive *
.text:000099B4                 call    ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir(IInArchive *,uint,bool &)
.text:000099B9                 movzx   ecx, [ebp+var_B9]
.text:000099C0                 test    ecx, ecx
.text:000099C2                 jz      short loc_99DE
.text:000099C4                 mov     edx, [ebp+arg_8]
.text:000099C7                 mov     eax, [edx+58h]
.text:000099CA                 add     eax, 1
.text:000099CD                 mov     ecx, [edx+5Ch]
.text:000099D0                 adc     ecx, 0
.text:000099D3                 mov     edx, [ebp+arg_8]
.text:000099D6                 mov     [edx+58h], eax
.text:000099D9                 mov     [edx+5Ch], ecx
.text:000099DC                 jmp     short loc_99F6
.text:000099DE ; ---------------------------------------------------------------------------
.text:000099DE
.text:000099DE loc_99DE:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+48Aj
.text:000099DE                 mov     eax, [ebp+arg_8]
.text:000099E1                 mov     ecx, [eax+60h]
.text:000099E4                 add     ecx, 1
.text:000099E7                 mov     edx, [eax+64h]
.text:000099EA                 adc     edx, 0
.text:000099ED                 mov     eax, [ebp+arg_8]
.text:000099F0                 mov     [eax+60h], ecx
.text:000099F3                 mov     [eax+64h], edx
.text:000099F6
.text:000099F6 loc_99F6:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+4A4j
.text:000099F6                 jmp     loc_9911
.text:000099FB ; ---------------------------------------------------------------------------
.text:000099FB
.text:000099FB loc_99FB:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+3F4j
.text:000099FB                 mov     ecx, [ebp+arg_8]
.text:000099FE                 mov     [ebp+var_EC], ecx
.text:00009A04                 mov     edx, [ebp+var_EC]
.text:00009A0A                 mov     eax, [ebp+var_EC]
.text:00009A10                 mov     ecx, [edx+58h]
.text:00009A13                 or      ecx, [eax+5Ch]
.text:00009A16                 jz      short loc_9A1F
.text:00009A18                 mov     edx, [ebp+arg_8]
.text:00009A1B                 mov     byte ptr [edx+4Ah], 1
.text:00009A1F
.text:00009A1F loc_9A1F:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+4DEj
.text:00009A1F                 mov     eax, [ebp+arg_8]
.text:00009A22                 mov     byte ptr [eax+4Bh], 1
.text:00009A26                 xor     eax, eax
.text:00009A28
.text:00009A28 loc_9A28:                               ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+BFj
.text:00009A28                                         ; ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+125j ...
.text:00009A28                 push    edx
.text:00009A29                 mov     ecx, ebp
.text:00009A2B                 push    eax
.text:00009A2C                 lea     edx, $LN39_0
.text:00009A32                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00009A37                 pop     eax
.text:00009A38                 pop     edx
.text:00009A39                 mov     ecx, [ebp+var_C]
.text:00009A3C                 mov     large fs:0, ecx
.text:00009A43                 pop     ecx
.text:00009A44                 pop     edi
.text:00009A45                 pop     esi
.text:00009A46                 add     esp, 0ECh
.text:00009A4C                 cmp     ebp, esp
.text:00009A4E                 call    __RTC_CheckEsp
.text:00009A53                 mov     esp, ebp
.text:00009A55                 pop     ebp
.text:00009A56                 retn    0Ch
.text:00009A56 ?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z endp
.text:00009A56
.text:00009A56 ; ---------------------------------------------------------------------------
.text:00009A59                 align 4
.text:00009A5C $LN39_0         dd 8                    ; DATA XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+4F4o
.text:00009A60                 dd offset $LN38
.text:00009A64 $LN38           dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00009A60o
.text:00009A6C                 dd offset $LN29_1       ; "prop"
.text:00009A70                 dd 0FFFFFFC0h, 10h
.text:00009A78                 dd offset $LN30_2       ; "prop"
.text:00009A7C                 dd 0FFFFFFA4h, 10h
.text:00009A84                 dd offset $LN31_2       ; "prop"
.text:00009A88                 dd 0FFFFFF84h, 10h
.text:00009A90                 dd offset $LN32_1       ; "prop"
.text:00009A94                 dd 0FFFFFF74h, 4
.text:00009A9C                 dd offset $LN33_2       ; "numItems"
.text:00009AA0                 dd 0FFFFFF5Ch, 8
.text:00009AA8                 dd offset $LN34_0       ; "size"
.text:00009AAC                 dd 0FFFFFF53h, 1
.text:00009AB4                 dd offset $LN35_2       ; "defined"
.text:00009AB8                 dd 0FFFFFF47h, 1
.text:00009AC0                 dd offset $LN36_2       ; "isDir"
.text:00009AC4 $LN36_2         db 'isDir',0            ; DATA XREF: .text:00009AC0o
.text:00009ACA $LN35_2         db 'defined',0          ; DATA XREF: .text:00009AB4o
.text:00009AD2 $LN34_0         db 'size',0             ; DATA XREF: .text:00009AA8o
.text:00009AD7 $LN33_2         db 'numItems',0         ; DATA XREF: .text:00009A9Co
.text:00009AE0 $LN32_1         db 'prop',0             ; DATA XREF: .text:00009A90o
.text:00009AE5 $LN31_2         db 'prop',0             ; DATA XREF: .text:00009A84o
.text:00009AEA $LN30_2         db 'prop',0             ; DATA XREF: .text:00009A78o
.text:00009AEF $LN29_1         db 'prop',0             ; DATA XREF: .text:00009A6Co
.text:00009AF4                 align 8
.text:00009AF8
.text:00009AF8 ; =============== S U B R O U T I N E =======================================
.text:00009AF8
.text:00009AF8 ; Attributes: bp-based frame
.text:00009AF8
.text:00009AF8 ; long __stdcall Archive_GetArcBoolProp(struct IInArchive *, unsigned long, bool &)
.text:00009AF8 ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z proc near
.text:00009AF8                                         ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+AEp
.text:00009AF8                                         ; OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+A4p ...
.text:00009AF8
.text:00009AF8 var_28          = dword ptr -28h
.text:00009AF8 var_24          = dword ptr -24h
.text:00009AF8 var_20          = dword ptr -20h
.text:00009AF8 var_1C          = dword ptr -1Ch
.text:00009AF8 var_14          = word ptr -14h
.text:00009AF8 var_C           = word ptr -0Ch
.text:00009AF8 arg_0           = dword ptr  8
.text:00009AF8 arg_4           = dword ptr  0Ch
.text:00009AF8 arg_8           = dword ptr  10h
.text:00009AF8
.text:00009AF8                 push    ebp
.text:00009AF9                 mov     ebp, esp
.text:00009AFB                 sub     esp, 28h
.text:00009AFE                 push    esi
.text:00009AFF                 push    edi
.text:00009B00                 lea     edi, [ebp+var_28]
.text:00009B03                 mov     ecx, 0Ah
.text:00009B08                 mov     eax, 0CCCCCCCCh
.text:00009B0D                 rep stosd
.text:00009B0F                 lea     ecx, [ebp+var_14] ; this
.text:00009B12                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00009B17                 mov     eax, [ebp+arg_8]
.text:00009B1A                 mov     byte ptr [eax], 0
.text:00009B1D                 mov     esi, esp
.text:00009B1F                 lea     ecx, [ebp+var_14]
.text:00009B22                 push    ecx
.text:00009B23                 mov     edx, [ebp+arg_4]
.text:00009B26                 push    edx
.text:00009B27                 mov     eax, [ebp+arg_0]
.text:00009B2A                 mov     ecx, [eax]
.text:00009B2C                 mov     edx, [ebp+arg_0]
.text:00009B2F                 push    edx
.text:00009B30                 mov     eax, [ecx+20h]
.text:00009B33                 call    eax
.text:00009B35                 cmp     esi, esp
.text:00009B37                 call    __RTC_CheckEsp
.text:00009B3C                 mov     [ebp+var_1C], eax
.text:00009B3F                 cmp     [ebp+var_1C], 0
.text:00009B43                 jz      short loc_9B58
.text:00009B45                 mov     ecx, [ebp+var_1C]
.text:00009B48                 mov     [ebp+var_20], ecx
.text:00009B4B                 lea     ecx, [ebp+var_14] ; this
.text:00009B4E                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009B53                 mov     eax, [ebp+var_20]
.text:00009B56                 jmp     short loc_9BA0
.text:00009B58 ; ---------------------------------------------------------------------------
.text:00009B58
.text:00009B58 loc_9B58:                               ; CODE XREF: Archive_GetArcBoolProp(IInArchive *,ulong,bool &)+4Bj
.text:00009B58                 movzx   edx, [ebp+var_14]
.text:00009B5C                 cmp     edx, 0Bh
.text:00009B5F                 jnz     short loc_9B72
.text:00009B61                 movzx   eax, [ebp+var_C]
.text:00009B65                 push    eax             ; __int16
.text:00009B66                 call    ?VARIANT_BOOLToBool@@YG_NF@Z ; VARIANT_BOOLToBool(short)
.text:00009B6B                 mov     ecx, [ebp+arg_8]
.text:00009B6E                 mov     [ecx], al
.text:00009B70                 jmp     short loc_9B8E
.text:00009B72 ; ---------------------------------------------------------------------------
.text:00009B72
.text:00009B72 loc_9B72:                               ; CODE XREF: Archive_GetArcBoolProp(IInArchive *,ulong,bool &)+67j
.text:00009B72                 movzx   edx, [ebp+var_14]
.text:00009B76                 test    edx, edx
.text:00009B78                 jz      short loc_9B8E
.text:00009B7A                 mov     [ebp+var_24], 80004005h
.text:00009B81                 lea     ecx, [ebp+var_14] ; this
.text:00009B84                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009B89                 mov     eax, [ebp+var_24]
.text:00009B8C                 jmp     short loc_9BA0
.text:00009B8E ; ---------------------------------------------------------------------------
.text:00009B8E
.text:00009B8E loc_9B8E:                               ; CODE XREF: Archive_GetArcBoolProp(IInArchive *,ulong,bool &)+78j
.text:00009B8E                                         ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)+80j
.text:00009B8E                 mov     [ebp+var_28], 0
.text:00009B95                 lea     ecx, [ebp+var_14] ; this
.text:00009B98                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009B9D                 mov     eax, [ebp+var_28]
.text:00009BA0
.text:00009BA0 loc_9BA0:                               ; CODE XREF: Archive_GetArcBoolProp(IInArchive *,ulong,bool &)+5Ej
.text:00009BA0                                         ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)+94j
.text:00009BA0                 push    edx
.text:00009BA1                 mov     ecx, ebp
.text:00009BA3                 push    eax
.text:00009BA4                 lea     edx, $LN9_1
.text:00009BAA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00009BAF                 pop     eax
.text:00009BB0                 pop     edx
.text:00009BB1                 pop     edi
.text:00009BB2                 pop     esi
.text:00009BB3                 add     esp, 28h
.text:00009BB6                 cmp     ebp, esp
.text:00009BB8                 call    __RTC_CheckEsp
.text:00009BBD                 mov     esp, ebp
.text:00009BBF                 pop     ebp
.text:00009BC0                 retn    0Ch
.text:00009BC0 ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z endp
.text:00009BC0
.text:00009BC0 ; ---------------------------------------------------------------------------
.text:00009BC3                 align 4
.text:00009BC4 $LN9_1          dd 1                    ; DATA XREF: Archive_GetArcBoolProp(IInArchive *,ulong,bool &)+ACo
.text:00009BC8                 dd offset $LN8_3
.text:00009BCC $LN8_3          dd 0FFFFFFECh, 10h      ; DATA XREF: .text:00009BC8o
.text:00009BD4                 dd offset $LN7_6        ; "prop"
.text:00009BD8 $LN7_6          db 'prop',0             ; DATA XREF: .text:00009BD4o
.text:00009BDD                 db 0Bh dup(0CCh)
.text:00009BE8
.text:00009BE8 ; =============== S U B R O U T I N E =======================================
.text:00009BE8
.text:00009BE8 ; Attributes: bp-based frame
.text:00009BE8
.text:00009BE8 ; long __stdcall Archive_GetItem_Size(struct IInArchive *, unsigned int, unsigned __int64 &, bool &)
.text:00009BE8 ?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z proc near
.text:00009BE8                                         ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+42Ep
.text:00009BE8
.text:00009BE8 var_3C          = dword ptr -3Ch
.text:00009BE8 var_38          = dword ptr -38h
.text:00009BE8 var_34          = dword ptr -34h
.text:00009BE8 var_30          = dword ptr -30h
.text:00009BE8 var_2C          = dword ptr -2Ch
.text:00009BE8 var_28          = dword ptr -28h
.text:00009BE8 var_20          = word ptr -20h
.text:00009BE8 var_18          = dword ptr -18h
.text:00009BE8 var_14          = dword ptr -14h
.text:00009BE8 var_C           = dword ptr -0Ch
.text:00009BE8 var_4           = dword ptr -4
.text:00009BE8 arg_0           = dword ptr  8
.text:00009BE8 arg_4           = dword ptr  0Ch
.text:00009BE8 arg_8           = dword ptr  10h
.text:00009BE8 arg_C           = dword ptr  14h
.text:00009BE8
.text:00009BE8                 push    ebp
.text:00009BE9                 mov     ebp, esp
.text:00009BEB                 push    0FFFFFFFFh
.text:00009BED                 push    offset __ehhandler$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z
.text:00009BF2                 mov     eax, large fs:0
.text:00009BF8                 push    eax
.text:00009BF9                 sub     esp, 30h
.text:00009BFC                 push    esi
.text:00009BFD                 push    edi
.text:00009BFE                 lea     edi, [ebp+var_3C]
.text:00009C01                 mov     ecx, 0Ch
.text:00009C06                 mov     eax, 0CCCCCCCCh
.text:00009C0B                 rep stosd
.text:00009C0D                 mov     eax, dword ptr ds:___security_cookie
.text:00009C12                 xor     eax, ebp
.text:00009C14                 push    eax
.text:00009C15                 lea     eax, [ebp+var_C]
.text:00009C18                 mov     large fs:0, eax
.text:00009C1E                 lea     ecx, [ebp+var_20] ; this
.text:00009C21                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00009C26                 mov     [ebp+var_4], 0
.text:00009C2D                 mov     eax, [ebp+arg_C]
.text:00009C30                 mov     byte ptr [eax], 0
.text:00009C33                 mov     ecx, [ebp+arg_8]
.text:00009C36                 mov     dword ptr [ecx], 0
.text:00009C3C                 mov     dword ptr [ecx+4], 0
.text:00009C43                 mov     esi, esp
.text:00009C45                 lea     edx, [ebp+var_20]
.text:00009C48                 push    edx
.text:00009C49                 push    7
.text:00009C4B                 mov     eax, [ebp+arg_4]
.text:00009C4E                 push    eax
.text:00009C4F                 mov     ecx, [ebp+arg_0]
.text:00009C52                 mov     edx, [ecx]
.text:00009C54                 mov     eax, [ebp+arg_0]
.text:00009C57                 push    eax
.text:00009C58                 mov     ecx, [edx+18h]
.text:00009C5B                 call    ecx
.text:00009C5D                 cmp     esi, esp
.text:00009C5F                 call    __RTC_CheckEsp
.text:00009C64                 mov     [ebp+var_28], eax
.text:00009C67                 cmp     [ebp+var_28], 0
.text:00009C6B                 jz      short loc_9C8A
.text:00009C6D                 mov     edx, [ebp+var_28]
.text:00009C70                 mov     [ebp+var_2C], edx
.text:00009C73                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009C7A                 lea     ecx, [ebp+var_20] ; this
.text:00009C7D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009C82                 mov     eax, [ebp+var_2C]
.text:00009C85                 jmp     loc_9D3A
.text:00009C8A ; ---------------------------------------------------------------------------
.text:00009C8A
.text:00009C8A loc_9C8A:                               ; CODE XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+83j
.text:00009C8A                 movzx   eax, [ebp+var_20]
.text:00009C8E                 mov     [ebp+var_3C], eax
.text:00009C91                 cmp     [ebp+var_3C], 15h ; switch 22 cases
.text:00009C95                 ja      short $LN1_2    ; jumptable 00009CA1 default case
.text:00009C97                 mov     ecx, [ebp+var_3C]
.text:00009C9A                 movzx   edx, ds:$LN13_8[ecx]
.text:00009CA1                 jmp     ds:$LN18_4[edx*4] ; switch jump
.text:00009CA8 ; ---------------------------------------------------------------------------
.text:00009CA8
.text:00009CA8 $LN6_5:                                 ; CODE XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+B9j
.text:00009CA8                                         ; DATA XREF: .text:$LN18_4o
.text:00009CA8                 movzx   eax, byte ptr [ebp+var_18] ; jumptable 00009CA1 case 17
.text:00009CAC                 cdq
.text:00009CAD                 mov     ecx, [ebp+arg_8]
.text:00009CB0                 mov     [ecx], eax
.text:00009CB2                 mov     [ecx+4], edx
.text:00009CB5                 jmp     short loc_9D1B
.text:00009CB7 ; ---------------------------------------------------------------------------
.text:00009CB7
.text:00009CB7 $LN5_4:                                 ; CODE XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+B9j
.text:00009CB7                                         ; DATA XREF: .text:$LN18_4o
.text:00009CB7                 movzx   eax, word ptr [ebp+var_18] ; jumptable 00009CA1 case 18
.text:00009CBB                 cdq
.text:00009CBC                 mov     ecx, [ebp+arg_8]
.text:00009CBF                 mov     [ecx], eax
.text:00009CC1                 mov     [ecx+4], edx
.text:00009CC4                 jmp     short loc_9D1B
.text:00009CC6 ; ---------------------------------------------------------------------------
.text:00009CC6
.text:00009CC6 $LN4_3:                                 ; CODE XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+B9j
.text:00009CC6                                         ; DATA XREF: .text:$LN18_4o
.text:00009CC6                 mov     edx, [ebp+var_18] ; jumptable 00009CA1 case 19
.text:00009CC9                 xor     eax, eax
.text:00009CCB                 mov     ecx, [ebp+arg_8]
.text:00009CCE                 mov     [ecx], edx
.text:00009CD0                 mov     [ecx+4], eax
.text:00009CD3                 jmp     short loc_9D1B
.text:00009CD5 ; ---------------------------------------------------------------------------
.text:00009CD5
.text:00009CD5 $LN3_2:                                 ; CODE XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+B9j
.text:00009CD5                                         ; DATA XREF: .text:$LN18_4o
.text:00009CD5                 mov     edx, [ebp+arg_8] ; jumptable 00009CA1 case 21
.text:00009CD8                 mov     eax, [ebp+var_18]
.text:00009CDB                 mov     [edx], eax
.text:00009CDD                 mov     ecx, [ebp+var_14]
.text:00009CE0                 mov     [edx+4], ecx
.text:00009CE3                 jmp     short loc_9D1B
.text:00009CE5 ; ---------------------------------------------------------------------------
.text:00009CE5
.text:00009CE5 $LN2_3:                                 ; CODE XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+B9j
.text:00009CE5                                         ; DATA XREF: .text:$LN18_4o
.text:00009CE5                 mov     [ebp+var_30], 0 ; jumptable 00009CA1 case 0
.text:00009CEC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009CF3                 lea     ecx, [ebp+var_20] ; this
.text:00009CF6                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009CFB                 mov     eax, [ebp+var_30]
.text:00009CFE                 jmp     short loc_9D3A
.text:00009D00 ; ---------------------------------------------------------------------------
.text:00009D00
.text:00009D00 $LN1_2:                                 ; CODE XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+ADj
.text:00009D00                                         ; Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+B9j
.text:00009D00                                         ; DATA XREF: ...
.text:00009D00                 mov     [ebp+var_34], 80004005h ; jumptable 00009CA1 default case
.text:00009D07                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009D0E                 lea     ecx, [ebp+var_20] ; this
.text:00009D11                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009D16                 mov     eax, [ebp+var_34]
.text:00009D19                 jmp     short loc_9D3A
.text:00009D1B ; ---------------------------------------------------------------------------
.text:00009D1B
.text:00009D1B loc_9D1B:                               ; CODE XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+CDj
.text:00009D1B                                         ; Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+DCj ...
.text:00009D1B                 mov     edx, [ebp+arg_C]
.text:00009D1E                 mov     byte ptr [edx], 1
.text:00009D21                 mov     [ebp+var_38], 0
.text:00009D28                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009D2F                 lea     ecx, [ebp+var_20] ; this
.text:00009D32                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00009D37                 mov     eax, [ebp+var_38]
.text:00009D3A
.text:00009D3A loc_9D3A:                               ; CODE XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+9Dj
.text:00009D3A                                         ; Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+116j ...
.text:00009D3A                 push    edx
.text:00009D3B                 mov     ecx, ebp
.text:00009D3D                 push    eax
.text:00009D3E                 lea     edx, $LN17_3
.text:00009D44                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00009D49                 pop     eax
.text:00009D4A                 pop     edx
.text:00009D4B                 mov     ecx, [ebp+var_C]
.text:00009D4E                 mov     large fs:0, ecx
.text:00009D55                 pop     ecx
.text:00009D56                 pop     edi
.text:00009D57                 pop     esi
.text:00009D58                 add     esp, 3Ch
.text:00009D5B                 cmp     ebp, esp
.text:00009D5D                 call    __RTC_CheckEsp
.text:00009D62                 mov     esp, ebp
.text:00009D64                 pop     ebp
.text:00009D65                 retn    10h
.text:00009D65 ?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z endp
.text:00009D65
.text:00009D65 ; ---------------------------------------------------------------------------
.text:00009D68 $LN17_3         dd 1                    ; DATA XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+156o
.text:00009D6C                 dd offset $LN16_3
.text:00009D70 $LN16_3         dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:00009D6Co
.text:00009D78                 dd offset $LN14_5       ; "prop"
.text:00009D7C $LN14_5         db 'prop',0             ; DATA XREF: .text:00009D78o
.text:00009D81                 align 4
.text:00009D84 $LN18_4         dd offset $LN2_3        ; DATA XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+B9r
.text:00009D84                 dd offset $LN6_5        ; jump table for switch statement
.text:00009D84                 dd offset $LN5_4
.text:00009D84                 dd offset $LN4_3
.text:00009D84                 dd offset $LN3_2
.text:00009D84                 dd offset $LN1_2
.text:00009D9C $LN13_8         db      0,     5,     5,     5
.text:00009D9C                                         ; DATA XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+B2r
.text:00009D9C                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:00009D9C                 db      5,     5,     5,     5
.text:00009D9C                 db      5,     5,     5,     5
.text:00009D9C                 db      5,     1,     2,     3
.text:00009D9C                 db      5,     4
.text:00009DB2                 align 8
.text:00009DB8
.text:00009DB8 ; =============== S U B R O U T I N E =======================================
.text:00009DB8
.text:00009DB8 ; Attributes: bp-based frame
.text:00009DB8
.text:00009DB8 ; long __stdcall OpenArchiveSpec(struct IInArchive *, bool, struct IInStream *, unsigned __int64 const *, struct IArchiveOpenCallback *, struct IArchiveExtractCallback *)
.text:00009DB8 ?OpenArchiveSpec@@YGJPAUIInArchive@@_NPAUIInStream@@PB_KPAUIArchiveOpenCallback@@PAUIArchiveExtractCallback@@@Z proc near
.text:00009DB8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+20DEp
.text:00009DB8                                         ; CArc::OpenStream2(COpenOptions const &)+40F3p
.text:00009DB8
.text:00009DB8 var_38          = dword ptr -38h
.text:00009DB8 var_34          = dword ptr -34h
.text:00009DB8 var_29          = byte ptr -29h
.text:00009DB8 var_24          = dword ptr -24h
.text:00009DB8 var_1C          = dword ptr -1Ch
.text:00009DB8 var_18          = dword ptr -18h
.text:00009DB8 var_9           = byte ptr -9
.text:00009DB8 var_4           = dword ptr -4
.text:00009DB8 arg_0           = dword ptr  8
.text:00009DB8 arg_4           = byte ptr  0Ch
.text:00009DB8 arg_8           = dword ptr  10h
.text:00009DB8 arg_C           = dword ptr  14h
.text:00009DB8 arg_10          = dword ptr  18h
.text:00009DB8 arg_14          = dword ptr  1Ch
.text:00009DB8
.text:00009DB8                 push    ebp
.text:00009DB9                 mov     ebp, esp
.text:00009DBB                 sub     esp, 38h
.text:00009DBE                 push    esi
.text:00009DBF                 push    edi
.text:00009DC0                 lea     edi, [ebp+var_38]
.text:00009DC3                 mov     ecx, 0Eh
.text:00009DC8                 mov     eax, 0CCCCCCCCh
.text:00009DCD                 rep stosd
.text:00009DCF                 mov     esi, esp
.text:00009DD1                 mov     eax, [ebp+arg_10]
.text:00009DD4                 push    eax
.text:00009DD5                 mov     ecx, [ebp+arg_C]
.text:00009DD8                 push    ecx
.text:00009DD9                 mov     edx, [ebp+arg_8]
.text:00009DDC                 push    edx
.text:00009DDD                 mov     eax, [ebp+arg_0]
.text:00009DE0                 mov     ecx, [eax]
.text:00009DE2                 mov     edx, [ebp+arg_0]
.text:00009DE5                 push    edx
.text:00009DE6                 mov     eax, [ecx+0Ch]
.text:00009DE9                 call    eax
.text:00009DEB                 cmp     esi, esp
.text:00009DED                 call    __RTC_CheckEsp
.text:00009DF2                 mov     [ebp+var_4], eax
.text:00009DF5                 cmp     [ebp+var_4], 0
.text:00009DF9                 jz      short loc_9E03
.text:00009DFB                 mov     eax, [ebp+var_4]
.text:00009DFE                 jmp     loc_9EAE
.text:00009E03 ; ---------------------------------------------------------------------------
.text:00009E03
.text:00009E03 loc_9E03:                               ; CODE XREF: OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+41j
.text:00009E03                 movzx   ecx, [ebp+arg_4]
.text:00009E07                 test    ecx, ecx
.text:00009E09                 jz      loc_9EAC
.text:00009E0F                 mov     [ebp+var_9], 0
.text:00009E13                 mov     [ebp+var_1C], 0
.text:00009E1A                 mov     [ebp+var_18], 0
.text:00009E21                 lea     edx, [ebp+var_9]
.text:00009E24                 push    edx
.text:00009E25                 lea     eax, [ebp+var_1C]
.text:00009E28                 push    eax
.text:00009E29                 push    2Ch ; ','
.text:00009E2B                 mov     ecx, [ebp+arg_0]
.text:00009E2E                 push    ecx
.text:00009E2F                 call    ?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z ; Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)
.text:00009E34                 mov     [ebp+var_24], eax
.text:00009E37                 cmp     [ebp+var_24], 0
.text:00009E3B                 jz      short loc_9E42
.text:00009E3D                 mov     eax, [ebp+var_24]
.text:00009E40                 jmp     short loc_9EAE
.text:00009E42 ; ---------------------------------------------------------------------------
.text:00009E42
.text:00009E42 loc_9E42:                               ; CODE XREF: OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+83j
.text:00009E42                 movzx   edx, [ebp+var_9]
.text:00009E46                 test    edx, edx
.text:00009E48                 jz      short loc_9E4E
.text:00009E4A                 xor     eax, eax
.text:00009E4C                 jmp     short loc_9EAE
.text:00009E4E ; ---------------------------------------------------------------------------
.text:00009E4E
.text:00009E4E loc_9E4E:                               ; CODE XREF: OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+90j
.text:00009E4E                 mov     [ebp+var_29], 0
.text:00009E52                 lea     eax, [ebp+var_29]
.text:00009E55                 push    eax
.text:00009E56                 push    55h ; 'U'
.text:00009E58                 mov     ecx, [ebp+arg_0]
.text:00009E5B                 push    ecx
.text:00009E5C                 call    ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)
.text:00009E61                 mov     [ebp+var_34], eax
.text:00009E64                 cmp     [ebp+var_34], 0
.text:00009E68                 jz      short loc_9E6F
.text:00009E6A                 mov     eax, [ebp+var_34]
.text:00009E6D                 jmp     short loc_9EAE
.text:00009E6F ; ---------------------------------------------------------------------------
.text:00009E6F
.text:00009E6F loc_9E6F:                               ; CODE XREF: OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+B0j
.text:00009E6F                 movzx   edx, [ebp+var_29]
.text:00009E73                 test    edx, edx
.text:00009E75                 jnz     short loc_9EAC
.text:00009E77                 mov     esi, esp
.text:00009E79                 mov     eax, [ebp+arg_14]
.text:00009E7C                 push    eax
.text:00009E7D                 push    1               ; bool
.text:00009E7F                 call    ?BoolToInt@@YGH_N@Z ; BoolToInt(bool)
.text:00009E84                 push    eax
.text:00009E85                 push    0FFFFFFFFh
.text:00009E87                 push    0
.text:00009E89                 mov     ecx, [ebp+arg_0]
.text:00009E8C                 mov     edx, [ecx]
.text:00009E8E                 mov     eax, [ebp+arg_0]
.text:00009E91                 push    eax
.text:00009E92                 mov     ecx, [edx+1Ch]
.text:00009E95                 call    ecx
.text:00009E97                 cmp     esi, esp
.text:00009E99                 call    __RTC_CheckEsp
.text:00009E9E                 mov     [ebp+var_38], eax
.text:00009EA1                 cmp     [ebp+var_38], 0
.text:00009EA5                 jz      short loc_9EAC
.text:00009EA7                 mov     eax, [ebp+var_38]
.text:00009EAA                 jmp     short loc_9EAE
.text:00009EAC ; ---------------------------------------------------------------------------
.text:00009EAC
.text:00009EAC loc_9EAC:                               ; CODE XREF: OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+51j
.text:00009EAC                                         ; OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+BDj ...
.text:00009EAC                 xor     eax, eax
.text:00009EAE
.text:00009EAE loc_9EAE:                               ; CODE XREF: OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+46j
.text:00009EAE                                         ; OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+88j ...
.text:00009EAE                 push    edx
.text:00009EAF                 mov     ecx, ebp
.text:00009EB1                 push    eax
.text:00009EB2                 lea     edx, $LN14_6
.text:00009EB8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00009EBD                 pop     eax
.text:00009EBE                 pop     edx
.text:00009EBF                 pop     edi
.text:00009EC0                 pop     esi
.text:00009EC1                 add     esp, 38h
.text:00009EC4                 cmp     ebp, esp
.text:00009EC6                 call    __RTC_CheckEsp
.text:00009ECB                 mov     esp, ebp
.text:00009ECD                 pop     ebp
.text:00009ECE                 retn    18h
.text:00009ECE ?OpenArchiveSpec@@YGJPAUIInArchive@@_NPAUIInStream@@PB_KPAUIArchiveOpenCallback@@PAUIArchiveExtractCallback@@@Z endp
.text:00009ECE
.text:00009ECE ; ---------------------------------------------------------------------------
.text:00009ED1                 align 4
.text:00009ED4 $LN14_6         dd 3                    ; DATA XREF: OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+FAo
.text:00009ED8                 dd offset $LN13_9
.text:00009EDC $LN13_9         dd 0FFFFFFF7h, 1        ; DATA XREF: .text:00009ED8o
.text:00009EE4                 dd offset $LN10_4       ; "phySize_Defined"
.text:00009EE8                 dd 0FFFFFFE4h, 8
.text:00009EF0                 dd offset $LN11_0       ; "phySize"
.text:00009EF4                 dd 0FFFFFFD7h, 1
.text:00009EFC                 dd offset $LN12_3       ; "phySizeCantBeDetected"
.text:00009F00 $LN12_3         db 'phySizeCantBeDetected',0 ; DATA XREF: .text:00009EFCo
.text:00009F16 $LN11_0         db 'phySize',0          ; DATA XREF: .text:00009EF0o
.text:00009F1E $LN10_4         db 'phySize_Defined',0  ; DATA XREF: .text:00009EE4o
.text:00009F2E                 db 0Ah dup(0CCh)
.text:00009F38
.text:00009F38 ; =============== S U B R O U T I N E =======================================
.text:00009F38
.text:00009F38 ; Attributes: bp-based frame
.text:00009F38
.text:00009F38 ; int __stdcall FindFormatForArchiveType(int, char, int, int, char *)
.text:00009F38 ?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z proc near
.text:00009F38                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+480p
.text:00009F38                                         ; CArc::OpenStream2(COpenOptions const &)+868p ...
.text:00009F38
.text:00009F38 var_18          = dword ptr -18h
.text:00009F38 var_14          = dword ptr -14h
.text:00009F38 var_10          = dword ptr -10h
.text:00009F38 var_C           = dword ptr -0Ch
.text:00009F38 var_4           = dword ptr -4
.text:00009F38 arg_0           = dword ptr  8
.text:00009F38 arg_4           = byte ptr  0Ch
.text:00009F38 arg_10          = dword ptr  18h
.text:00009F38
.text:00009F38                 push    ebp
.text:00009F39                 mov     ebp, esp
.text:00009F3B                 push    0FFFFFFFFh
.text:00009F3D                 push    offset __ehhandler$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z
.text:00009F42                 mov     eax, large fs:0
.text:00009F48                 push    eax
.text:00009F49                 sub     esp, 0Ch
.text:00009F4C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00009F53                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00009F5A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009F61                 mov     eax, dword ptr ds:___security_cookie
.text:00009F66                 xor     eax, ebp
.text:00009F68                 push    eax
.text:00009F69                 lea     eax, [ebp+var_C]
.text:00009F6C                 mov     large fs:0, eax
.text:00009F72                 mov     [ebp+var_4], 0
.text:00009F79                 mov     [ebp+var_10], 0
.text:00009F80                 jmp     short loc_9F8B
.text:00009F82 ; ---------------------------------------------------------------------------
.text:00009F82
.text:00009F82 loc_9F82:                               ; CODE XREF: FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *):loc_9FE7j
.text:00009F82                 mov     eax, [ebp+var_10]
.text:00009F85                 add     eax, 1
.text:00009F88                 mov     [ebp+var_10], eax
.text:00009F8B
.text:00009F8B loc_9F8B:                               ; CODE XREF: FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *)+48j
.text:00009F8B                 lea     ecx, [ebp+arg_4]
.text:00009F8E                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:00009F93                 cmp     [ebp+var_10], eax
.text:00009F96                 jnb     short loc_9FE9
.text:00009F98                 mov     ecx, [ebp+arg_10]
.text:00009F9B                 push    ecx             ; char *
.text:00009F9C                 mov     edx, [ebp+var_10]
.text:00009F9F                 push    edx
.text:00009FA0                 lea     ecx, [ebp+arg_4]
.text:00009FA3                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00009FA8                 mov     eax, [eax]
.text:00009FAA                 push    eax
.text:00009FAB                 mov     ecx, [ebp+arg_0]
.text:00009FAE                 add     ecx, 8
.text:00009FB1                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:00009FB6                 add     eax, 0Ch
.text:00009FB9                 mov     ecx, eax
.text:00009FBB                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00009FC0                 push    eax             ; wchar_t *
.text:00009FC1                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:00009FC6                 movzx   ecx, al
.text:00009FC9                 test    ecx, ecx
.text:00009FCB                 jz      short loc_9FE7
.text:00009FCD                 mov     edx, [ebp+var_10]
.text:00009FD0                 mov     [ebp+var_14], edx
.text:00009FD3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009FDA                 lea     ecx, [ebp+arg_4]
.text:00009FDD                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00009FE2                 mov     eax, [ebp+var_14]
.text:00009FE5                 jmp     short loc_A002
.text:00009FE7 ; ---------------------------------------------------------------------------
.text:00009FE7
.text:00009FE7 loc_9FE7:                               ; CODE XREF: FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *)+93j
.text:00009FE7                 jmp     short loc_9F82
.text:00009FE9 ; ---------------------------------------------------------------------------
.text:00009FE9
.text:00009FE9 loc_9FE9:                               ; CODE XREF: FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *)+5Ej
.text:00009FE9                 mov     [ebp+var_18], 0FFFFFFFFh
.text:00009FF0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009FF7                 lea     ecx, [ebp+arg_4]
.text:00009FFA                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00009FFF                 mov     eax, [ebp+var_18]
.text:0000A002
.text:0000A002 loc_A002:                               ; CODE XREF: FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *)+ADj
.text:0000A002                 mov     ecx, [ebp+var_C]
.text:0000A005                 mov     large fs:0, ecx
.text:0000A00C                 pop     ecx
.text:0000A00D                 add     esp, 18h
.text:0000A010                 cmp     ebp, esp
.text:0000A012                 call    __RTC_CheckEsp
.text:0000A017                 mov     esp, ebp
.text:0000A019                 pop     ebp
.text:0000A01A                 retn    14h
.text:0000A01A ?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z endp
.text:0000A01A
.text:0000A01A ; ---------------------------------------------------------------------------
.text:0000A01D                 db 0Bh dup(0CCh)
.text:0000A028
.text:0000A028 ; =============== S U B R O U T I N E =======================================
.text:0000A028
.text:0000A028 ; Attributes: bp-based frame
.text:0000A028
.text:0000A028 ; __int32 __thiscall CArc::OpenStream(CArc *this, const struct COpenOptions *)
.text:0000A028                 public ?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z
.text:0000A028 ?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z proc near
.text:0000A028                                         ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+184p
.text:0000A028                                         ; CArchiveLink::Open(COpenOptions &)+796p
.text:0000A028
.text:0000A028 var_BC          = dword ptr -0BCh
.text:0000A028 var_B8          = dword ptr -0B8h
.text:0000A028 var_B4          = dword ptr -0B4h
.text:0000A028 var_B0          = dword ptr -0B0h
.text:0000A028 var_AC          = dword ptr -0ACh
.text:0000A028 var_A8          = dword ptr -0A8h
.text:0000A028 var_A4          = dword ptr -0A4h
.text:0000A028 var_A0          = dword ptr -0A0h
.text:0000A028 var_9C          = dword ptr -9Ch
.text:0000A028 var_98          = dword ptr -98h
.text:0000A028 var_94          = byte ptr -94h
.text:0000A028 var_88          = byte ptr -88h
.text:0000A028 var_7C          = byte ptr -7Ch
.text:0000A028 var_70          = byte ptr -70h
.text:0000A028 var_64          = dword ptr -64h
.text:0000A028 var_60          = dword ptr -60h
.text:0000A028 var_5C          = dword ptr -5Ch
.text:0000A028 var_58          = dword ptr -58h
.text:0000A028 var_50          = byte ptr -50h
.text:0000A028 var_3C          = byte ptr -3Ch
.text:0000A028 var_2C          = dword ptr -2Ch
.text:0000A028 var_28          = dword ptr -28h
.text:0000A028 var_24          = dword ptr -24h
.text:0000A028 var_20          = dword ptr -20h
.text:0000A028 var_1C          = dword ptr -1Ch
.text:0000A028 var_18          = dword ptr -18h
.text:0000A028 var_14          = dword ptr -14h
.text:0000A028 var_10          = dword ptr -10h
.text:0000A028 var_C           = dword ptr -0Ch
.text:0000A028 var_4           = dword ptr -4
.text:0000A028 arg_0           = dword ptr  8
.text:0000A028
.text:0000A028                 push    ebp
.text:0000A029                 mov     ebp, esp
.text:0000A02B                 push    0FFFFFFFFh
.text:0000A02D                 push    offset __ehhandler$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z
.text:0000A032                 mov     eax, large fs:0
.text:0000A038                 push    eax
.text:0000A039                 sub     esp, 0B0h
.text:0000A03F                 push    esi
.text:0000A040                 push    edi
.text:0000A041                 push    ecx
.text:0000A042                 lea     edi, [ebp+var_BC]
.text:0000A048                 mov     ecx, 2Ch ; ','
.text:0000A04D                 mov     eax, 0CCCCCCCCh
.text:0000A052                 rep stosd
.text:0000A054                 pop     ecx
.text:0000A055                 mov     eax, dword ptr ds:___security_cookie
.text:0000A05A                 xor     eax, ebp
.text:0000A05C                 push    eax
.text:0000A05D                 lea     eax, [ebp+var_C]
.text:0000A060                 mov     large fs:0, eax
.text:0000A066                 mov     [ebp+var_10], ecx
.text:0000A069                 mov     eax, [ebp+arg_0]
.text:0000A06C                 push    eax             ; struct COpenOptions *
.text:0000A06D                 mov     ecx, [ebp+var_10] ; this
.text:0000A070                 call    ?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z ; CArc::OpenStream2(COpenOptions const &)
.text:0000A075                 mov     [ebp+var_14], eax
.text:0000A078                 cmp     [ebp+var_14], 0
.text:0000A07C                 jz      short loc_A086
.text:0000A07E                 mov     eax, [ebp+var_14]
.text:0000A081                 jmp     loc_A40A
.text:0000A086 ; ---------------------------------------------------------------------------
.text:0000A086
.text:0000A086 loc_A086:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+54j
.text:0000A086                 mov     ecx, [ebp+var_10]
.text:0000A089                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000A08E                 test    eax, eax
.text:0000A090                 jz      loc_A408
.text:0000A096                 mov     ecx, [ebp+var_10]
.text:0000A099                 add     ecx, 8
.text:0000A09C                 call    ?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRawProps>::Release(void)
.text:0000A0A1                 mov     ecx, [ebp+var_10]
.text:0000A0A4                 add     ecx, 0Ch
.text:0000A0A7                 call    ?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRootProps>::Release(void)
.text:0000A0AC                 mov     ecx, [ebp+var_10]
.text:0000A0AF                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000A0B4                 mov     [ebp+var_98], eax
.text:0000A0BA                 mov     ecx, [ebp+var_10]
.text:0000A0BD                 add     ecx, 8
.text:0000A0C0                 call    ??I?$CMyComPtr@UIArchiveGetRawProps@@@@QAEPAPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator&(void)
.text:0000A0C5                 mov     esi, esp
.text:0000A0C7                 push    eax
.text:0000A0C8                 push    offset _IID_IArchiveGetRawProps
.text:0000A0CD                 mov     ecx, [ebp+var_98]
.text:0000A0D3                 push    ecx
.text:0000A0D4                 mov     edx, [ebp+var_98]
.text:0000A0DA                 mov     eax, [edx]
.text:0000A0DC                 mov     ecx, [eax]
.text:0000A0DE                 call    ecx
.text:0000A0E0                 cmp     esi, esp
.text:0000A0E2                 call    __RTC_CheckEsp
.text:0000A0E7                 mov     ecx, [ebp+var_10]
.text:0000A0EA                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000A0EF                 mov     [ebp+var_9C], eax
.text:0000A0F5                 mov     ecx, [ebp+var_10]
.text:0000A0F8                 add     ecx, 0Ch
.text:0000A0FB                 call    ??I?$CMyComPtr@UIArchiveGetRootProps@@@@QAEPAPAUIArchiveGetRootProps@@XZ ; CMyComPtr<IArchiveGetRootProps>::operator&(void)
.text:0000A100                 mov     esi, esp
.text:0000A102                 push    eax
.text:0000A103                 push    offset _IID_IArchiveGetRootProps
.text:0000A108                 mov     edx, [ebp+var_9C]
.text:0000A10E                 push    edx
.text:0000A10F                 mov     eax, [ebp+var_9C]
.text:0000A115                 mov     ecx, [eax]
.text:0000A117                 mov     edx, [ecx]
.text:0000A119                 call    edx
.text:0000A11B                 cmp     esi, esp
.text:0000A11D                 call    __RTC_CheckEsp
.text:0000A122                 mov     eax, [ebp+var_10]
.text:0000A125                 add     eax, 0D9h ; '+'
.text:0000A12A                 push    eax
.text:0000A12B                 push    42h ; 'B'
.text:0000A12D                 mov     ecx, [ebp+var_10]
.text:0000A130                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000A135                 push    eax
.text:0000A136                 call    ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)
.text:0000A13B                 mov     [ebp+var_18], eax
.text:0000A13E                 cmp     [ebp+var_18], 0
.text:0000A142                 jz      short loc_A14C
.text:0000A144                 mov     eax, [ebp+var_18]
.text:0000A147                 jmp     loc_A40A
.text:0000A14C ; ---------------------------------------------------------------------------
.text:0000A14C
.text:0000A14C loc_A14C:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+11Aj
.text:0000A14C                 mov     ecx, [ebp+var_10]
.text:0000A14F                 add     ecx, 0DBh ; '¦'
.text:0000A155                 push    ecx
.text:0000A156                 push    41h ; 'A'
.text:0000A158                 mov     ecx, [ebp+var_10]
.text:0000A15B                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000A160                 push    eax
.text:0000A161                 call    ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)
.text:0000A166                 mov     [ebp+var_1C], eax
.text:0000A169                 cmp     [ebp+var_1C], 0
.text:0000A16D                 jz      short loc_A177
.text:0000A16F                 mov     eax, [ebp+var_1C]
.text:0000A172                 jmp     loc_A40A
.text:0000A177 ; ---------------------------------------------------------------------------
.text:0000A177
.text:0000A177 loc_A177:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+145j
.text:0000A177                 mov     edx, [ebp+var_10]
.text:0000A17A                 add     edx, 0DCh ; '_'
.text:0000A180                 push    edx
.text:0000A181                 push    3Fh ; '?'
.text:0000A183                 mov     ecx, [ebp+var_10]
.text:0000A186                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000A18B                 push    eax
.text:0000A18C                 call    ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)
.text:0000A191                 mov     [ebp+var_20], eax
.text:0000A194                 cmp     [ebp+var_20], 0
.text:0000A198                 jz      short loc_A1A2
.text:0000A19A                 mov     eax, [ebp+var_20]
.text:0000A19D                 jmp     loc_A40A
.text:0000A1A2 ; ---------------------------------------------------------------------------
.text:0000A1A2
.text:0000A1A2 loc_A1A2:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+170j
.text:0000A1A2                 mov     eax, [ebp+var_10]
.text:0000A1A5                 add     eax, 0DDh ; '¦'
.text:0000A1AA                 push    eax
.text:0000A1AB                 push    40h ; '@'
.text:0000A1AD                 mov     ecx, [ebp+var_10]
.text:0000A1B0                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000A1B5                 push    eax
.text:0000A1B6                 call    ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)
.text:0000A1BB                 mov     [ebp+var_24], eax
.text:0000A1BE                 cmp     [ebp+var_24], 0
.text:0000A1C2                 jz      short loc_A1CC
.text:0000A1C4                 mov     eax, [ebp+var_24]
.text:0000A1C7                 jmp     loc_A40A
.text:0000A1CC ; ---------------------------------------------------------------------------
.text:0000A1CC
.text:0000A1CC loc_A1CC:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+19Aj
.text:0000A1CC                 mov     ecx, [ebp+var_10]
.text:0000A1CF                 add     ecx, 0DEh ; '¦'
.text:0000A1D5                 push    ecx
.text:0000A1D6                 push    5Bh ; '['
.text:0000A1D8                 mov     ecx, [ebp+var_10]
.text:0000A1DB                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000A1E0                 push    eax
.text:0000A1E1                 call    ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)
.text:0000A1E6                 mov     [ebp+var_28], eax
.text:0000A1E9                 cmp     [ebp+var_28], 0
.text:0000A1ED                 jz      short loc_A1F7
.text:0000A1EF                 mov     eax, [ebp+var_28]
.text:0000A1F2                 jmp     loc_A40A
.text:0000A1F7 ; ---------------------------------------------------------------------------
.text:0000A1F7
.text:0000A1F7 loc_A1F7:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+1C5j
.text:0000A1F7                 mov     edx, [ebp+var_10]
.text:0000A1FA                 add     edx, 0DAh ; '+'
.text:0000A200                 push    edx
.text:0000A201                 push    5Dh ; ']'
.text:0000A203                 mov     ecx, [ebp+var_10]
.text:0000A206                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000A20B                 push    eax
.text:0000A20C                 call    ?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)
.text:0000A211                 mov     [ebp+var_2C], eax
.text:0000A214                 cmp     [ebp+var_2C], 0
.text:0000A218                 jz      short loc_A222
.text:0000A21A                 mov     eax, [ebp+var_2C]
.text:0000A21D                 jmp     loc_A40A
.text:0000A222 ; ---------------------------------------------------------------------------
.text:0000A222
.text:0000A222 loc_A222:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+1F0j
.text:0000A222                 mov     eax, [ebp+var_10]
.text:0000A225                 add     eax, 70h ; 'p'
.text:0000A228                 push    eax
.text:0000A229                 lea     ecx, [ebp+var_3C]
.text:0000A22C                 push    ecx
.text:0000A22D                 call    ?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z ; ExtractFileNameFromPath(UString const &)
.text:0000A232                 mov     [ebp+var_4], 0
.text:0000A239                 lea     ecx, [ebp+var_50]
.text:0000A23C                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000A241                 mov     byte ptr [ebp+var_4], 1
.text:0000A245                 lea     ecx, [ebp+var_3C] ; this
.text:0000A248                 call    ?ReverseFind_Dot@UString@@QBEHXZ ; UString::ReverseFind_Dot(void)
.text:0000A24D                 mov     [ebp+var_58], eax
.text:0000A250                 cmp     [ebp+var_58], 0
.text:0000A254                 jl      short loc_A26E
.text:0000A256                 mov     edx, [ebp+var_58]
.text:0000A259                 add     edx, 1
.text:0000A25C                 push    edx             ; unsigned int
.text:0000A25D                 lea     ecx, [ebp+var_3C] ; this
.text:0000A260                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000A265                 push    eax
.text:0000A266                 lea     ecx, [ebp+var_50]
.text:0000A269                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:0000A26E
.text:0000A26E loc_A26E:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+22Cj
.text:0000A26E                 mov     ecx, [ebp+var_10]
.text:0000A271                 add     ecx, 88h ; 'ê'  ; this
.text:0000A277                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:0000A27C                 mov     eax, [ebp+var_10]
.text:0000A27F                 cmp     dword ptr [eax+94h], 0
.text:0000A286                 jl      loc_A3ED
.text:0000A28C                 mov     ecx, [ebp+var_10]
.text:0000A28F                 mov     edx, [ecx+94h]
.text:0000A295                 push    edx
.text:0000A296                 mov     eax, [ebp+arg_0]
.text:0000A299                 mov     ecx, [eax]
.text:0000A29B                 add     ecx, 8
.text:0000A29E                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:0000A2A3                 mov     [ebp+var_5C], eax
.text:0000A2A6                 mov     ecx, [ebp+var_5C]
.text:0000A2A9                 add     ecx, 18h
.text:0000A2AC                 call    ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ ; CObjectVector<CArcExtInfo>::Size(void)
.text:0000A2B1                 test    eax, eax
.text:0000A2B3                 jnz     loc_A36A
.text:0000A2B9                 lea     ecx, [ebp+var_70]
.text:0000A2BC                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000A2C1                 mov     [ebp+var_A0], eax
.text:0000A2C7                 mov     ecx, [ebp+var_A0]
.text:0000A2CD                 mov     [ebp+var_A4], ecx
.text:0000A2D3                 mov     byte ptr [ebp+var_4], 2
.text:0000A2D7                 mov     edx, [ebp+var_A4]
.text:0000A2DD                 push    edx
.text:0000A2DE                 lea     ecx, [ebp+var_7C]
.text:0000A2E1                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000A2E6                 mov     [ebp+var_A8], eax
.text:0000A2EC                 mov     eax, [ebp+var_A8]
.text:0000A2F2                 mov     [ebp+var_AC], eax
.text:0000A2F8                 mov     byte ptr [ebp+var_4], 3
.text:0000A2FC                 mov     ecx, [ebp+var_AC]
.text:0000A302                 push    ecx
.text:0000A303                 lea     edx, [ebp+var_3C]
.text:0000A306                 push    edx
.text:0000A307                 lea     eax, [ebp+var_88]
.text:0000A30D                 push    eax
.text:0000A30E                 call    ?GetDefaultName2@@YG?AVUString@@ABV1@00@Z ; GetDefaultName2(UString const &,UString const &,UString const &)
.text:0000A313                 mov     [ebp+var_B0], eax
.text:0000A319                 mov     ecx, [ebp+var_B0]
.text:0000A31F                 mov     [ebp+var_B4], ecx
.text:0000A325                 mov     byte ptr [ebp+var_4], 4
.text:0000A329                 mov     edx, [ebp+var_B4]
.text:0000A32F                 push    edx
.text:0000A330                 mov     ecx, [ebp+var_10]
.text:0000A333                 add     ecx, 88h ; 'ê'
.text:0000A339                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000A33E                 mov     byte ptr [ebp+var_4], 3
.text:0000A342                 lea     ecx, [ebp+var_88] ; this
.text:0000A348                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A34D                 mov     byte ptr [ebp+var_4], 2
.text:0000A351                 lea     ecx, [ebp+var_7C] ; this
.text:0000A354                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A359                 mov     byte ptr [ebp+var_4], 1
.text:0000A35D                 lea     ecx, [ebp+var_70] ; this
.text:0000A360                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A365                 jmp     loc_A3ED
.text:0000A36A ; ---------------------------------------------------------------------------
.text:0000A36A
.text:0000A36A loc_A36A:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+28Bj
.text:0000A36A                 lea     eax, [ebp+var_50]
.text:0000A36D                 push    eax             ; struct UString *
.text:0000A36E                 mov     ecx, [ebp+var_5C] ; this
.text:0000A371                 call    ?FindExtension@CArcInfoEx@@QBEHABVUString@@@Z ; CArcInfoEx::FindExtension(UString const &)
.text:0000A376                 mov     [ebp+var_60], eax
.text:0000A379                 cmp     [ebp+var_60], 0
.text:0000A37D                 jge     short loc_A386
.text:0000A37F                 mov     [ebp+var_60], 0
.text:0000A386
.text:0000A386 loc_A386:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+355j
.text:0000A386                 mov     ecx, [ebp+var_60]
.text:0000A389                 push    ecx
.text:0000A38A                 mov     ecx, [ebp+var_5C]
.text:0000A38D                 add     ecx, 18h
.text:0000A390                 call    ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[](uint)
.text:0000A395                 mov     [ebp+var_64], eax
.text:0000A398                 mov     edx, [ebp+var_64]
.text:0000A39B                 add     edx, 0Ch
.text:0000A39E                 push    edx
.text:0000A39F                 mov     eax, [ebp+var_64]
.text:0000A3A2                 push    eax
.text:0000A3A3                 lea     ecx, [ebp+var_3C]
.text:0000A3A6                 push    ecx
.text:0000A3A7                 lea     edx, [ebp+var_94]
.text:0000A3AD                 push    edx
.text:0000A3AE                 call    ?GetDefaultName2@@YG?AVUString@@ABV1@00@Z ; GetDefaultName2(UString const &,UString const &,UString const &)
.text:0000A3B3                 mov     [ebp+var_B8], eax
.text:0000A3B9                 mov     eax, [ebp+var_B8]
.text:0000A3BF                 mov     [ebp+var_BC], eax
.text:0000A3C5                 mov     byte ptr [ebp+var_4], 5
.text:0000A3C9                 mov     ecx, [ebp+var_BC]
.text:0000A3CF                 push    ecx
.text:0000A3D0                 mov     ecx, [ebp+var_10]
.text:0000A3D3                 add     ecx, 88h ; 'ê'
.text:0000A3D9                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000A3DE                 mov     byte ptr [ebp+var_4], 1
.text:0000A3E2                 lea     ecx, [ebp+var_94] ; this
.text:0000A3E8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A3ED
.text:0000A3ED loc_A3ED:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+25Ej
.text:0000A3ED                                         ; CArc::OpenStream(COpenOptions const &)+33Dj
.text:0000A3ED                 mov     byte ptr [ebp+var_4], 0
.text:0000A3F1                 lea     ecx, [ebp+var_50] ; this
.text:0000A3F4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A3F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A400                 lea     ecx, [ebp+var_3C] ; this
.text:0000A403                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A408
.text:0000A408 loc_A408:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+68j
.text:0000A408                 xor     eax, eax
.text:0000A40A
.text:0000A40A loc_A40A:                               ; CODE XREF: CArc::OpenStream(COpenOptions const &)+59j
.text:0000A40A                                         ; CArc::OpenStream(COpenOptions const &)+11Fj ...
.text:0000A40A                 push    edx
.text:0000A40B                 mov     ecx, ebp
.text:0000A40D                 push    eax
.text:0000A40E                 lea     edx, $LN26
.text:0000A414                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000A419                 pop     eax
.text:0000A41A                 pop     edx
.text:0000A41B                 mov     ecx, [ebp+var_C]
.text:0000A41E                 mov     large fs:0, ecx
.text:0000A425                 pop     ecx
.text:0000A426                 pop     edi
.text:0000A427                 pop     esi
.text:0000A428                 add     esp, 0BCh
.text:0000A42E                 cmp     ebp, esp
.text:0000A430                 call    __RTC_CheckEsp
.text:0000A435                 mov     esp, ebp
.text:0000A437                 pop     ebp
.text:0000A438                 retn    4
.text:0000A438 ?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z endp
.text:0000A438
.text:0000A438 ; ---------------------------------------------------------------------------
.text:0000A43B                 align 4
.text:0000A43C $LN26           dd 2                    ; DATA XREF: CArc::OpenStream(COpenOptions const &)+3E6o
.text:0000A440                 dd offset $LN25
.text:0000A444 $LN25           dd 0FFFFFFC4h, 0Ch      ; DATA XREF: .text:0000A440o
.text:0000A44C                 dd offset $LN22         ; "fileName"
.text:0000A450                 dd 0FFFFFFB0h, 0Ch
.text:0000A458                 dd offset $LN23_0       ; "extension"
.text:0000A45C $LN23_0         db 'extension',0        ; DATA XREF: .text:0000A458o
.text:0000A466 $LN22           db 'fileName',0         ; DATA XREF: .text:0000A44Co
.text:0000A46F                 db 9 dup(0CCh)
.text:0000A478
.text:0000A478 ; =============== S U B R O U T I N E =======================================
.text:0000A478
.text:0000A478 ; Attributes: bp-based frame
.text:0000A478
.text:0000A478 ; __int32 __thiscall CArc::OpenStreamOrFile(CArc *this, struct COpenOptions *)
.text:0000A478                 public ?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z
.text:0000A478 ?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z proc near
.text:0000A478                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+194p
.text:0000A478
.text:0000A478 var_50          = dword ptr -50h
.text:0000A478 var_4C          = dword ptr -4Ch
.text:0000A478 var_48          = dword ptr -48h
.text:0000A478 var_44          = dword ptr -44h
.text:0000A478 var_40          = dword ptr -40h
.text:0000A478 var_3C          = dword ptr -3Ch
.text:0000A478 var_38          = dword ptr -38h
.text:0000A478 var_34          = dword ptr -34h
.text:0000A478 var_30          = dword ptr -30h
.text:0000A478 var_2C          = dword ptr -2Ch
.text:0000A478 var_24          = byte ptr -24h
.text:0000A478 var_18          = byte ptr -18h
.text:0000A478 var_10          = dword ptr -10h
.text:0000A478 var_C           = dword ptr -0Ch
.text:0000A478 var_4           = dword ptr -4
.text:0000A478 arg_0           = dword ptr  8
.text:0000A478
.text:0000A478                 push    ebp
.text:0000A479                 mov     ebp, esp
.text:0000A47B                 push    0FFFFFFFFh
.text:0000A47D                 push    offset __ehhandler$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z
.text:0000A482                 mov     eax, large fs:0
.text:0000A488                 push    eax
.text:0000A489                 sub     esp, 44h
.text:0000A48C                 push    esi
.text:0000A48D                 push    edi
.text:0000A48E                 push    ecx
.text:0000A48F                 lea     edi, [ebp+var_50]
.text:0000A492                 mov     ecx, 11h
.text:0000A497                 mov     eax, 0CCCCCCCCh
.text:0000A49C                 rep stosd
.text:0000A49E                 pop     ecx
.text:0000A49F                 mov     eax, dword ptr ds:___security_cookie
.text:0000A4A4                 xor     eax, ebp
.text:0000A4A6                 push    eax
.text:0000A4A7                 lea     eax, [ebp+var_C]
.text:0000A4AA                 mov     large fs:0, eax
.text:0000A4B0                 mov     [ebp+var_10], ecx
.text:0000A4B3                 lea     ecx, [ebp+var_18]
.text:0000A4B6                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:0000A4BB                 mov     [ebp+var_4], 0
.text:0000A4C2                 lea     ecx, [ebp+var_24]
.text:0000A4C5                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000A4CA                 mov     byte ptr [ebp+var_4], 1
.text:0000A4CE                 mov     [ebp+var_2C], 0
.text:0000A4D5                 mov     eax, [ebp+arg_0]
.text:0000A4D8                 movzx   ecx, byte ptr [eax+44h]
.text:0000A4DC                 test    ecx, ecx
.text:0000A4DE                 jz      short loc_A534
.text:0000A4E0                 push    8               ; unsigned int
.text:0000A4E2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A4E7                 add     esp, 4
.text:0000A4EA                 mov     [ebp+var_38], eax
.text:0000A4ED                 mov     byte ptr [ebp+var_4], 2
.text:0000A4F1                 cmp     [ebp+var_38], 0
.text:0000A4F5                 jz      short loc_A504
.text:0000A4F7                 mov     ecx, [ebp+var_38]
.text:0000A4FA                 call    ??0CStdInFileStream@@QAE@XZ ; CStdInFileStream::CStdInFileStream(void)
.text:0000A4FF                 mov     [ebp+var_4C], eax
.text:0000A502                 jmp     short loc_A50B
.text:0000A504 ; ---------------------------------------------------------------------------
.text:0000A504
.text:0000A504 loc_A504:                               ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+7Dj
.text:0000A504                 mov     [ebp+var_4C], 0
.text:0000A50B
.text:0000A50B loc_A50B:                               ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+8Aj
.text:0000A50B                 mov     edx, [ebp+var_4C]
.text:0000A50E                 mov     [ebp+var_34], edx
.text:0000A511                 mov     byte ptr [ebp+var_4], 1
.text:0000A515                 mov     eax, [ebp+var_34]
.text:0000A518                 push    eax
.text:0000A519                 lea     ecx, [ebp+var_24]
.text:0000A51C                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:0000A521                 lea     ecx, [ebp+var_24]
.text:0000A524                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000A529                 mov     ecx, [ebp+arg_0]
.text:0000A52C                 mov     [ecx+34h], eax
.text:0000A52F                 jmp     loc_A5F5
.text:0000A534 ; ---------------------------------------------------------------------------
.text:0000A534
.text:0000A534 loc_A534:                               ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+66j
.text:0000A534                 mov     edx, [ebp+arg_0]
.text:0000A537                 cmp     dword ptr [edx+30h], 0
.text:0000A53B                 jnz     loc_A5F5
.text:0000A541                 push    58h ; 'X'       ; unsigned int
.text:0000A543                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A548                 add     esp, 4
.text:0000A54B                 mov     [ebp+var_40], eax
.text:0000A54E                 mov     byte ptr [ebp+var_4], 3
.text:0000A552                 cmp     [ebp+var_40], 0
.text:0000A556                 jz      short loc_A565
.text:0000A558                 mov     ecx, [ebp+var_40] ; this
.text:0000A55B                 call    ??0CInFileStream@@QAE@XZ ; CInFileStream::CInFileStream(void)
.text:0000A560                 mov     [ebp+var_50], eax
.text:0000A563                 jmp     short loc_A56C
.text:0000A565 ; ---------------------------------------------------------------------------
.text:0000A565
.text:0000A565 loc_A565:                               ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+DEj
.text:0000A565                 mov     [ebp+var_50], 0
.text:0000A56C
.text:0000A56C loc_A56C:                               ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+EBj
.text:0000A56C                 mov     eax, [ebp+var_50]
.text:0000A56F                 mov     [ebp+var_3C], eax
.text:0000A572                 mov     byte ptr [ebp+var_4], 1
.text:0000A576                 mov     ecx, [ebp+var_3C]
.text:0000A579                 mov     [ebp+var_2C], ecx
.text:0000A57C                 mov     edx, [ebp+var_2C]
.text:0000A57F                 push    edx
.text:0000A580                 lea     ecx, [ebp+var_18]
.text:0000A583                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:0000A588                 mov     eax, [ebp+var_10]
.text:0000A58B                 add     eax, 7Ch ; '|'
.text:0000A58E                 push    eax
.text:0000A58F                 mov     ecx, [ebp+var_10]
.text:0000A592                 add     ecx, 70h ; 'p'
.text:0000A595                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000A59A                 mov     ecx, [ebp+var_10]
.text:0000A59D                 add     ecx, 70h ; 'p'
.text:0000A5A0                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000A5A5                 push    eax             ; wchar_t *
.text:0000A5A6                 mov     ecx, [ebp+var_2C] ; this
.text:0000A5A9                 call    ?Open@CInFileStream@@QAE_NPB_W@Z ; CInFileStream::Open(wchar_t const *)
.text:0000A5AE                 movzx   ecx, al
.text:0000A5B1                 test    ecx, ecx
.text:0000A5B3                 jnz     short loc_A5E7
.text:0000A5B5                 mov     esi, esp
.text:0000A5B7                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000A5BD                 cmp     esi, esp
.text:0000A5BF                 call    __RTC_CheckEsp
.text:0000A5C4                 mov     [ebp+var_44], eax
.text:0000A5C7                 mov     byte ptr [ebp+var_4], 0
.text:0000A5CB                 lea     ecx, [ebp+var_24]
.text:0000A5CE                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000A5D3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A5DA                 lea     ecx, [ebp+var_18]
.text:0000A5DD                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000A5E2                 mov     eax, [ebp+var_44]
.text:0000A5E5                 jmp     short loc_A632
.text:0000A5E7 ; ---------------------------------------------------------------------------
.text:0000A5E7
.text:0000A5E7 loc_A5E7:                               ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+13Bj
.text:0000A5E7                 lea     ecx, [ebp+var_18]
.text:0000A5EA                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000A5EF                 mov     edx, [ebp+arg_0]
.text:0000A5F2                 mov     [edx+30h], eax
.text:0000A5F5
.text:0000A5F5 loc_A5F5:                               ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+B7j
.text:0000A5F5                                         ; CArc::OpenStreamOrFile(COpenOptions &)+C3j
.text:0000A5F5                 mov     eax, [ebp+arg_0]
.text:0000A5F8                 push    eax             ; struct COpenOptions *
.text:0000A5F9                 mov     ecx, [ebp+var_10] ; this
.text:0000A5FC                 call    ?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z ; CArc::OpenStream(COpenOptions const &)
.text:0000A601                 mov     [ebp+var_30], eax
.text:0000A604                 mov     ecx, [ebp+var_10]
.text:0000A607                 mov     byte ptr [ecx+0DFh], 0
.text:0000A60E                 mov     edx, [ebp+var_30]
.text:0000A611                 mov     [ebp+var_48], edx
.text:0000A614                 mov     byte ptr [ebp+var_4], 0
.text:0000A618                 lea     ecx, [ebp+var_24]
.text:0000A61B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000A620                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A627                 lea     ecx, [ebp+var_18]
.text:0000A62A                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000A62F                 mov     eax, [ebp+var_48]
.text:0000A632
.text:0000A632 loc_A632:                               ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+16Dj
.text:0000A632                 push    edx
.text:0000A633                 mov     ecx, ebp
.text:0000A635                 push    eax
.text:0000A636                 lea     edx, $LN19_0
.text:0000A63C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000A641                 pop     eax
.text:0000A642                 pop     edx
.text:0000A643                 mov     ecx, [ebp+var_C]
.text:0000A646                 mov     large fs:0, ecx
.text:0000A64D                 pop     ecx
.text:0000A64E                 pop     edi
.text:0000A64F                 pop     esi
.text:0000A650                 add     esp, 50h
.text:0000A653                 cmp     ebp, esp
.text:0000A655                 call    __RTC_CheckEsp
.text:0000A65A                 mov     esp, ebp
.text:0000A65C                 pop     ebp
.text:0000A65D                 retn    4
.text:0000A65D ?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z endp
.text:0000A65D
.text:0000A65D ; ---------------------------------------------------------------------------
.text:0000A660 $LN19_0         dd 2                    ; DATA XREF: CArc::OpenStreamOrFile(COpenOptions &)+1BEo
.text:0000A664                 dd offset $LN18_5
.text:0000A668 $LN18_5         dd 0FFFFFFE8h, 4        ; DATA XREF: .text:0000A664o
.text:0000A670                 dd offset $LN15_0       ; "fileStream"
.text:0000A674                 dd 0FFFFFFDCh, 4
.text:0000A67C                 dd offset $LN16_4       ; "seqStream"
.text:0000A680 $LN16_4         db 'seqStream',0        ; DATA XREF: .text:0000A67Co
.text:0000A68A $LN15_0         db 'fileStream',0       ; DATA XREF: .text:0000A670o
.text:0000A695                 align 4
.text:0000A698
.text:0000A698 ; =============== S U B R O U T I N E =======================================
.text:0000A698
.text:0000A698 ; Attributes: bp-based frame
.text:0000A698
.text:0000A698 ; void __thiscall CArchiveLink::KeepModeForNextOpen(CArchiveLink *__hidden this)
.text:0000A698                 public ?KeepModeForNextOpen@CArchiveLink@@QAEXXZ
.text:0000A698 ?KeepModeForNextOpen@CArchiveLink@@QAEXXZ proc near
.text:0000A698
.text:0000A698 var_28          = dword ptr -28h
.text:0000A698 var_24          = dword ptr -24h
.text:0000A698 var_20          = dword ptr -20h
.text:0000A698 var_1C          = dword ptr -1Ch
.text:0000A698 var_18          = dword ptr -18h
.text:0000A698 var_14          = dword ptr -14h
.text:0000A698 var_10          = dword ptr -10h
.text:0000A698 var_C           = dword ptr -0Ch
.text:0000A698 var_4           = dword ptr -4
.text:0000A698
.text:0000A698                 push    ebp
.text:0000A699                 mov     ebp, esp
.text:0000A69B                 push    0FFFFFFFFh
.text:0000A69D                 push    offset __ehhandler$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ
.text:0000A6A2                 mov     eax, large fs:0
.text:0000A6A8                 push    eax
.text:0000A6A9                 sub     esp, 1Ch
.text:0000A6AC                 push    esi
.text:0000A6AD                 mov     eax, 0CCCCCCCCh
.text:0000A6B2                 mov     [ebp+var_28], eax
.text:0000A6B5                 mov     [ebp+var_24], eax
.text:0000A6B8                 mov     [ebp+var_20], eax
.text:0000A6BB                 mov     [ebp+var_1C], eax
.text:0000A6BE                 mov     [ebp+var_18], eax
.text:0000A6C1                 mov     [ebp+var_14], eax
.text:0000A6C4                 mov     [ebp+var_10], eax
.text:0000A6C7                 mov     eax, dword ptr ds:___security_cookie
.text:0000A6CC                 xor     eax, ebp
.text:0000A6CE                 push    eax
.text:0000A6CF                 lea     eax, [ebp+var_C]
.text:0000A6D2                 mov     large fs:0, eax
.text:0000A6D8                 mov     [ebp+var_10], ecx
.text:0000A6DB                 mov     ecx, [ebp+var_10]
.text:0000A6DE                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:0000A6E3                 mov     [ebp+var_14], eax
.text:0000A6E6
.text:0000A6E6 loc_A6E6:                               ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+E7j
.text:0000A6E6                 cmp     [ebp+var_14], 0
.text:0000A6EA                 jz      loc_A784
.text:0000A6F0                 mov     eax, [ebp+var_14]
.text:0000A6F3                 sub     eax, 1
.text:0000A6F6                 mov     [ebp+var_14], eax
.text:0000A6F9                 lea     ecx, [ebp+var_1C]
.text:0000A6FC                 call    ??0?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::CMyComPtr<IArchiveKeepModeForNextOpen>(void)
.text:0000A701                 mov     [ebp+var_4], 0
.text:0000A708                 mov     ecx, [ebp+var_14]
.text:0000A70B                 push    ecx
.text:0000A70C                 mov     ecx, [ebp+var_10]
.text:0000A70F                 call    ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:0000A714                 mov     ecx, eax
.text:0000A716                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000A71B                 mov     [ebp+var_24], eax
.text:0000A71E                 lea     ecx, [ebp+var_1C]
.text:0000A721                 call    ??I?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAEPAPAUIArchiveKeepModeForNextOpen@@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator&(void)
.text:0000A726                 mov     esi, esp
.text:0000A728                 push    eax
.text:0000A729                 push    offset _IID_IArchiveKeepModeForNextOpen
.text:0000A72E                 mov     edx, [ebp+var_24]
.text:0000A731                 push    edx
.text:0000A732                 mov     eax, [ebp+var_24]
.text:0000A735                 mov     ecx, [eax]
.text:0000A737                 mov     edx, [ecx]
.text:0000A739                 call    edx
.text:0000A73B                 cmp     esi, esp
.text:0000A73D                 call    __RTC_CheckEsp
.text:0000A742                 lea     ecx, [ebp+var_1C]
.text:0000A745                 call    ??B?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator IArchiveKeepModeForNextOpen *(void)
.text:0000A74A                 test    eax, eax
.text:0000A74C                 jz      short loc_A770
.text:0000A74E                 lea     ecx, [ebp+var_1C]
.text:0000A751                 call    ??C?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator->(void)
.text:0000A756                 mov     [ebp+var_28], eax
.text:0000A759                 mov     eax, [ebp+var_28]
.text:0000A75C                 mov     ecx, [eax]
.text:0000A75E                 mov     esi, esp
.text:0000A760                 mov     edx, [ebp+var_28]
.text:0000A763                 push    edx
.text:0000A764                 mov     eax, [ecx+0Ch]
.text:0000A767                 call    eax
.text:0000A769                 cmp     esi, esp
.text:0000A76B                 call    __RTC_CheckEsp
.text:0000A770
.text:0000A770 loc_A770:                               ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+B4j
.text:0000A770                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A777                 lea     ecx, [ebp+var_1C]
.text:0000A77A                 call    ??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::~CMyComPtr<IArchiveKeepModeForNextOpen>(void)
.text:0000A77F                 jmp     loc_A6E6
.text:0000A784 ; ---------------------------------------------------------------------------
.text:0000A784
.text:0000A784 loc_A784:                               ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+52j
.text:0000A784                 push    edx
.text:0000A785                 mov     ecx, ebp
.text:0000A787                 push    eax
.text:0000A788                 lea     edx, $LN10_5
.text:0000A78E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000A793                 pop     eax
.text:0000A794                 pop     edx
.text:0000A795                 mov     ecx, [ebp+var_C]
.text:0000A798                 mov     large fs:0, ecx
.text:0000A79F                 pop     ecx
.text:0000A7A0                 pop     esi
.text:0000A7A1                 add     esp, 28h
.text:0000A7A4                 cmp     ebp, esp
.text:0000A7A6                 call    __RTC_CheckEsp
.text:0000A7AB                 mov     esp, ebp
.text:0000A7AD                 pop     ebp
.text:0000A7AE                 retn
.text:0000A7AE ?KeepModeForNextOpen@CArchiveLink@@QAEXXZ endp
.text:0000A7AE
.text:0000A7AE ; ---------------------------------------------------------------------------
.text:0000A7AF                 align 10h
.text:0000A7B0 $LN10_5         dd 1                    ; DATA XREF: CArchiveLink::KeepModeForNextOpen(void)+F0o
.text:0000A7B4                 dd offset $LN9_2
.text:0000A7B8 $LN9_2          dd 0FFFFFFE4h, 4        ; DATA XREF: .text:0000A7B4o
.text:0000A7C0                 dd offset $LN7_7        ; "keep"
.text:0000A7C4 $LN7_7          db 'keep',0             ; DATA XREF: .text:0000A7C0o
.text:0000A7C9                 db 0Fh dup(0CCh)
.text:0000A7D8
.text:0000A7D8 ; =============== S U B R O U T I N E =======================================
.text:0000A7D8
.text:0000A7D8 ; Attributes: bp-based frame
.text:0000A7D8
.text:0000A7D8 ; __int32 __thiscall CArchiveLink::Close(CArchiveLink *__hidden this)
.text:0000A7D8                 public ?Close@CArchiveLink@@QAEJXZ
.text:0000A7D8 ?Close@CArchiveLink@@QAEJXZ proc near
.text:0000A7D8
.text:0000A7D8 var_C           = dword ptr -0Ch
.text:0000A7D8 var_8           = dword ptr -8
.text:0000A7D8 var_4           = dword ptr -4
.text:0000A7D8
.text:0000A7D8                 push    ebp
.text:0000A7D9                 mov     ebp, esp
.text:0000A7DB                 sub     esp, 0Ch
.text:0000A7DE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000A7E5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000A7EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A7F3                 mov     [ebp+var_4], ecx
.text:0000A7F6                 mov     ecx, [ebp+var_4]
.text:0000A7F9                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:0000A7FE                 mov     [ebp+var_8], eax
.text:0000A801
.text:0000A801 loc_A801:                               ; CODE XREF: CArchiveLink::Close(void):loc_A831j
.text:0000A801                 cmp     [ebp+var_8], 0
.text:0000A805                 jz      short loc_A833
.text:0000A807                 mov     eax, [ebp+var_8]
.text:0000A80A                 sub     eax, 1
.text:0000A80D                 mov     [ebp+var_8], eax
.text:0000A810                 mov     ecx, [ebp+var_8]
.text:0000A813                 push    ecx
.text:0000A814                 mov     ecx, [ebp+var_4]
.text:0000A817                 call    ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:0000A81C                 mov     ecx, eax        ; this
.text:0000A81E                 call    ?Close@CArc@@QAEJXZ ; CArc::Close(void)
.text:0000A823                 mov     [ebp+var_C], eax
.text:0000A826                 cmp     [ebp+var_C], 0
.text:0000A82A                 jz      short loc_A831
.text:0000A82C                 mov     eax, [ebp+var_C]
.text:0000A82F                 jmp     short loc_A83C
.text:0000A831 ; ---------------------------------------------------------------------------
.text:0000A831
.text:0000A831 loc_A831:                               ; CODE XREF: CArchiveLink::Close(void)+52j
.text:0000A831                 jmp     short loc_A801
.text:0000A833 ; ---------------------------------------------------------------------------
.text:0000A833
.text:0000A833 loc_A833:                               ; CODE XREF: CArchiveLink::Close(void)+2Dj
.text:0000A833                 mov     edx, [ebp+var_4]
.text:0000A836                 mov     byte ptr [edx+20h], 0
.text:0000A83A                 xor     eax, eax
.text:0000A83C
.text:0000A83C loc_A83C:                               ; CODE XREF: CArchiveLink::Close(void)+57j
.text:0000A83C                 add     esp, 0Ch
.text:0000A83F                 cmp     ebp, esp
.text:0000A841                 call    __RTC_CheckEsp
.text:0000A846                 mov     esp, ebp
.text:0000A848                 pop     ebp
.text:0000A849                 retn
.text:0000A849 ?Close@CArchiveLink@@QAEJXZ endp
.text:0000A849
.text:0000A849 ; ---------------------------------------------------------------------------
.text:0000A84A                 db 0Eh dup(0CCh)
.text:0000A858
.text:0000A858 ; =============== S U B R O U T I N E =======================================
.text:0000A858
.text:0000A858 ; Attributes: bp-based frame
.text:0000A858
.text:0000A858 ; void __thiscall CArchiveLink::Release(CArchiveLink *__hidden this)
.text:0000A858                 public ?Release@CArchiveLink@@QAEXXZ
.text:0000A858 ?Release@CArchiveLink@@QAEXXZ proc near ; CODE XREF: CArchiveLink::Open(COpenOptions &)+44p
.text:0000A858
.text:0000A858 var_4           = dword ptr -4
.text:0000A858
.text:0000A858                 push    ebp
.text:0000A859                 mov     ebp, esp
.text:0000A85B                 push    ecx
.text:0000A85C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A863                 mov     [ebp+var_4], ecx
.text:0000A866                 mov     ecx, [ebp+var_4]
.text:0000A869                 add     ecx, 30h ; '0'  ; this
.text:0000A86C                 call    ?ClearErrors@CArcErrorInfo@@QAEXXZ ; CArcErrorInfo::ClearErrors(void)
.text:0000A871                 mov     ecx, [ebp+var_4]
.text:0000A874                 add     ecx, 24h ; '$'  ; this
.text:0000A877                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:0000A87C
.text:0000A87C loc_A87C:                               ; CODE XREF: CArchiveLink::Release(void)+3Bj
.text:0000A87C                 mov     ecx, [ebp+var_4]
.text:0000A87F                 call    ?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ ; CObjectVector<CArc>::IsEmpty(void)
.text:0000A884                 movzx   eax, al
.text:0000A887                 test    eax, eax
.text:0000A889                 jnz     short loc_A895
.text:0000A88B                 mov     ecx, [ebp+var_4]
.text:0000A88E                 call    ?DeleteBack@?$CObjectVector@VCArc@@@@QAEXXZ ; CObjectVector<CArc>::DeleteBack(void)
.text:0000A893                 jmp     short loc_A87C
.text:0000A895 ; ---------------------------------------------------------------------------
.text:0000A895
.text:0000A895 loc_A895:                               ; CODE XREF: CArchiveLink::Release(void)+31j
.text:0000A895                 add     esp, 4
.text:0000A898                 cmp     ebp, esp
.text:0000A89A                 call    __RTC_CheckEsp
.text:0000A89F                 mov     esp, ebp
.text:0000A8A1                 pop     ebp
.text:0000A8A2                 retn
.text:0000A8A2 ?Release@CArchiveLink@@QAEXXZ endp
.text:0000A8A2
.text:0000A8A2 ; ---------------------------------------------------------------------------
.text:0000A8A3                 align 8
.text:0000A8A8
.text:0000A8A8 ; =============== S U B R O U T I N E =======================================
.text:0000A8A8
.text:0000A8A8 ; Attributes: bp-based frame
.text:0000A8A8
.text:0000A8A8 ; __int32 __thiscall CArchiveLink::Open(CArchiveLink *this, struct COpenOptions *)
.text:0000A8A8                 public ?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
.text:0000A8A8 ?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z proc near
.text:0000A8A8                                         ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+14Bp
.text:0000A8A8
.text:0000A8A8 var_358         = dword ptr -358h
.text:0000A8A8 var_354         = dword ptr -354h
.text:0000A8A8 var_350         = dword ptr -350h
.text:0000A8A8 var_34C         = dword ptr -34Ch
.text:0000A8A8 var_348         = dword ptr -348h
.text:0000A8A8 var_344         = dword ptr -344h
.text:0000A8A8 var_340         = dword ptr -340h
.text:0000A8A8 var_33C         = dword ptr -33Ch
.text:0000A8A8 var_338         = dword ptr -338h
.text:0000A8A8 var_334         = dword ptr -334h
.text:0000A8A8 var_330         = dword ptr -330h
.text:0000A8A8 var_32C         = dword ptr -32Ch
.text:0000A8A8 var_328         = byte ptr -328h
.text:0000A8A8 var_308         = dword ptr -308h
.text:0000A8A8 var_304         = dword ptr -304h
.text:0000A8A8 var_300         = dword ptr -300h
.text:0000A8A8 var_2F8         = dword ptr -2F8h
.text:0000A8A8 var_2F0         = byte ptr -2F0h
.text:0000A8A8 var_2DC         = byte ptr -2DCh
.text:0000A8A8 var_2CC         = dword ptr -2CCh
.text:0000A8A8 var_2C8         = dword ptr -2C8h
.text:0000A8A8 var_2C0         = dword ptr -2C0h
.text:0000A8A8 var_2BC         = dword ptr -2BCh
.text:0000A8A8 var_2B8         = dword ptr -2B8h
.text:0000A8A8 var_2B4         = byte ptr -2B4h
.text:0000A8A8 var_2B0         = byte ptr -2B0h
.text:0000A8A8 var_298         = byte ptr -298h
.text:0000A8A8 var_284         = byte ptr -284h
.text:0000A8A8 var_27C         = dword ptr -27Ch
.text:0000A8A8 var_271         = byte ptr -271h
.text:0000A8A8 var_26C         = dword ptr -26Ch
.text:0000A8A8 var_264         = byte ptr -264h
.text:0000A8A8 var_254         = byte ptr -254h
.text:0000A8A8 var_1F4         = byte ptr -1F4h
.text:0000A8A8 var_1CC         = dword ptr -1CCh
.text:0000A8A8 var_1C8         = _FILETIME ptr -1C8h
.text:0000A8A8 var_1C0         = byte ptr -1C0h
.text:0000A8A8 var_17C         = byte ptr -17Ch
.text:0000A8A8 var_170         = byte ptr -170h
.text:0000A8A8 var_164         = byte ptr -164h
.text:0000A8A8 var_15C         = dword ptr -15Ch
.text:0000A8A8 var_154         = dword ptr -154h
.text:0000A8A8 var_14C         = dword ptr -14Ch
.text:0000A8A8 var_144         = word ptr -144h
.text:0000A8A8 var_13C         = dword ptr -13Ch
.text:0000A8A8 var_130         = dword ptr -130h
.text:0000A8A8 var_12C         = dword ptr -12Ch
.text:0000A8A8 var_128         = dword ptr -128h
.text:0000A8A8 var_120         = byte ptr -120h
.text:0000A8A8 var_E0          = byte ptr -0E0h
.text:0000A8A8 var_B0          = byte ptr -0B0h
.text:0000A8A8 var_A4          = byte ptr -0A4h
.text:0000A8A8 var_88          = dword ptr -88h
.text:0000A8A8 var_38          = byte ptr -38h
.text:0000A8A8 var_28          = byte ptr -28h
.text:0000A8A8 var_14          = dword ptr -14h
.text:0000A8A8 var_10          = dword ptr -10h
.text:0000A8A8 var_C           = dword ptr -0Ch
.text:0000A8A8 var_4           = dword ptr -4
.text:0000A8A8 arg_0           = dword ptr  8
.text:0000A8A8
.text:0000A8A8                 push    ebp
.text:0000A8A9                 mov     ebp, esp
.text:0000A8AB                 push    0FFFFFFFFh
.text:0000A8AD                 push    offset __ehhandler$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
.text:0000A8B2                 mov     eax, large fs:0
.text:0000A8B8                 push    eax
.text:0000A8B9                 sub     esp, 34Ch
.text:0000A8BF                 push    esi
.text:0000A8C0                 push    edi
.text:0000A8C1                 push    ecx
.text:0000A8C2                 lea     edi, [ebp+var_358]
.text:0000A8C8                 mov     ecx, 0D3h ; '+'
.text:0000A8CD                 mov     eax, 0CCCCCCCCh
.text:0000A8D2                 rep stosd
.text:0000A8D4                 pop     ecx
.text:0000A8D5                 mov     eax, dword ptr ds:___security_cookie
.text:0000A8DA                 xor     eax, ebp
.text:0000A8DC                 push    eax
.text:0000A8DD                 lea     eax, [ebp+var_C]
.text:0000A8E0                 mov     large fs:0, eax
.text:0000A8E6                 mov     [ebp+var_10], ecx
.text:0000A8E9                 mov     ecx, [ebp+var_10] ; this
.text:0000A8EC                 call    ?Release@CArchiveLink@@QAEXXZ ; CArchiveLink::Release(void)
.text:0000A8F1                 mov     eax, [ebp+arg_0]
.text:0000A8F4                 mov     ecx, [eax+28h]
.text:0000A8F7                 call    ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size(void)
.text:0000A8FC                 cmp     eax, 20h ; ' '
.text:0000A8FF                 jb      short loc_A90B
.text:0000A901                 mov     eax, 80004001h
.text:0000A906                 jmp     loc_B2A8
.text:0000A90B ; ---------------------------------------------------------------------------
.text:0000A90B
.text:0000A90B loc_A90B:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+57j
.text:0000A90B                                         ; CArchiveLink::Open(COpenOptions &)+21Fj ...
.text:0000A90B                 mov     [ebp+var_14], 0
.text:0000A912                 lea     ecx, [ebp+var_328]
.text:0000A918                 call    ??0COpenType@@QAE@XZ ; COpenType::COpenType(void)
.text:0000A91D                 mov     edi, [ebp+arg_0]
.text:0000A920                 add     edi, 8
.text:0000A923                 mov     ecx, 8
.text:0000A928                 mov     esi, eax
.text:0000A92A                 rep movsd
.text:0000A92C                 mov     ecx, [ebp+arg_0]
.text:0000A92F                 mov     ecx, [ecx+28h]
.text:0000A932                 call    ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size(void)
.text:0000A937                 cmp     eax, 1
.text:0000A93A                 jb      loc_A9CD
.text:0000A940                 lea     ecx, [ebp+var_38]
.text:0000A943                 call    ??0COpenType@@QAE@XZ ; COpenType::COpenType(void)
.text:0000A948                 mov     ecx, [ebp+var_10]
.text:0000A94B                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:0000A950                 mov     esi, eax
.text:0000A952                 mov     edx, [ebp+arg_0]
.text:0000A955                 mov     ecx, [edx+28h]
.text:0000A958                 call    ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size(void)
.text:0000A95D                 cmp     esi, eax
.text:0000A95F                 jnb     short loc_A995
.text:0000A961                 mov     eax, [ebp+arg_0]
.text:0000A964                 mov     ecx, [eax+28h]
.text:0000A967                 call    ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size(void)
.text:0000A96C                 mov     esi, eax
.text:0000A96E                 mov     ecx, [ebp+var_10]
.text:0000A971                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:0000A976                 sub     esi, eax
.text:0000A978                 sub     esi, 1
.text:0000A97B                 push    esi
.text:0000A97C                 mov     ecx, [ebp+arg_0]
.text:0000A97F                 mov     ecx, [ecx+28h]
.text:0000A982                 call    ??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ; CObjectVector<COpenType>::operator[](uint)
.text:0000A987                 mov     ecx, 8
.text:0000A98C                 mov     esi, eax
.text:0000A98E                 lea     edi, [ebp+var_38]
.text:0000A991                 rep movsd
.text:0000A993                 jmp     short loc_A9BB
.text:0000A995 ; ---------------------------------------------------------------------------
.text:0000A995
.text:0000A995 loc_A995:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+B7j
.text:0000A995                 push    0
.text:0000A997                 mov     edx, [ebp+arg_0]
.text:0000A99A                 mov     ecx, [edx+28h]
.text:0000A99D                 call    ??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ; CObjectVector<COpenType>::operator[](uint)
.text:0000A9A2                 mov     ecx, 8
.text:0000A9A7                 mov     esi, eax
.text:0000A9A9                 lea     edi, [ebp+var_38]
.text:0000A9AC                 rep movsd
.text:0000A9AE                 movzx   eax, [ebp+var_28]
.text:0000A9B2                 test    eax, eax
.text:0000A9B4                 jnz     short loc_A9BB
.text:0000A9B6                 jmp     loc_B28D
.text:0000A9BB ; ---------------------------------------------------------------------------
.text:0000A9BB
.text:0000A9BB loc_A9BB:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+EBj
.text:0000A9BB                                         ; CArchiveLink::Open(COpenOptions &)+10Cj
.text:0000A9BB                 mov     edi, [ebp+arg_0]
.text:0000A9BE                 add     edi, 8
.text:0000A9C1                 mov     ecx, 8
.text:0000A9C6                 lea     esi, [ebp+var_38]
.text:0000A9C9                 rep movsd
.text:0000A9CB                 jmp     short loc_A9DF
.text:0000A9CD ; ---------------------------------------------------------------------------
.text:0000A9CD
.text:0000A9CD loc_A9CD:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+92j
.text:0000A9CD                 mov     ecx, [ebp+var_10]
.text:0000A9D0                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:0000A9D5                 cmp     eax, 20h ; ' '
.text:0000A9D8                 jb      short loc_A9DF
.text:0000A9DA                 jmp     loc_B28D
.text:0000A9DF ; ---------------------------------------------------------------------------
.text:0000A9DF
.text:0000A9DF loc_A9DF:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+123j
.text:0000A9DF                                         ; CArchiveLink::Open(COpenOptions &)+130j
.text:0000A9DF                 mov     ecx, [ebp+var_10]
.text:0000A9E2                 call    ?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ ; CObjectVector<CArc>::IsEmpty(void)
.text:0000A9E7                 movzx   ecx, al
.text:0000A9EA                 test    ecx, ecx
.text:0000A9EC                 jz      loc_AACC
.text:0000A9F2                 lea     ecx, [ebp+var_120]
.text:0000A9F8                 call    ??0CArc@@QAE@XZ ; CArc::CArc(void)
.text:0000A9FD                 mov     [ebp+var_4], 0
.text:0000AA04                 mov     edx, [ebp+arg_0]
.text:0000AA07                 add     edx, 48h ; 'H'
.text:0000AA0A                 push    edx
.text:0000AA0B                 lea     ecx, [ebp+var_A4]
.text:0000AA11                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000AA16                 mov     eax, [ebp+arg_0]
.text:0000AA19                 add     eax, 48h ; 'H'
.text:0000AA1C                 push    eax
.text:0000AA1D                 lea     ecx, [ebp+var_B0]
.text:0000AA23                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000AA28                 mov     [ebp+var_88], 0FFFFFFFFh
.text:0000AA32                 mov     ecx, [ebp+arg_0]
.text:0000AA35                 push    ecx             ; struct COpenOptions *
.text:0000AA36                 lea     ecx, [ebp+var_120] ; this
.text:0000AA3C                 call    ?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z ; CArc::OpenStreamOrFile(COpenOptions &)
.text:0000AA41                 mov     [ebp+var_128], eax
.text:0000AA47                 cmp     [ebp+var_128], 0
.text:0000AA4E                 jz      short loc_AAA6
.text:0000AA50                 cmp     [ebp+var_128], 1
.text:0000AA57                 jnz     short loc_AA7D
.text:0000AA59                 lea     edx, [ebp+var_E0]
.text:0000AA5F                 push    edx
.text:0000AA60                 mov     ecx, [ebp+var_10]
.text:0000AA63                 add     ecx, 30h ; '0'
.text:0000AA66                 call    ??4CArcErrorInfo@@QAEAAU0@ABU0@@Z ; CArcErrorInfo::operator=(CArcErrorInfo const &)
.text:0000AA6B                 lea     eax, [ebp+var_B0]
.text:0000AA71                 push    eax
.text:0000AA72                 mov     ecx, [ebp+var_10]
.text:0000AA75                 add     ecx, 24h ; '$'
.text:0000AA78                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000AA7D
.text:0000AA7D loc_AA7D:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+1AFj
.text:0000AA7D                 mov     ecx, [ebp+var_128]
.text:0000AA83                 mov     [ebp+var_32C], ecx
.text:0000AA89                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AA90                 lea     ecx, [ebp+var_120] ; this
.text:0000AA96                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:0000AA9B                 mov     eax, [ebp+var_32C]
.text:0000AAA1                 jmp     loc_B2A8
.text:0000AAA6 ; ---------------------------------------------------------------------------
.text:0000AAA6
.text:0000AAA6 loc_AAA6:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+1A6j
.text:0000AAA6                 lea     edx, [ebp+var_120]
.text:0000AAAC                 push    edx
.text:0000AAAD                 mov     ecx, [ebp+var_10]
.text:0000AAB0                 call    ?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z ; CObjectVector<CArc>::Add(CArc const &)
.text:0000AAB5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AABC                 lea     ecx, [ebp+var_120] ; this
.text:0000AAC2                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:0000AAC7                 jmp     loc_A90B
.text:0000AACC ; ---------------------------------------------------------------------------
.text:0000AACC
.text:0000AACC loc_AACC:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+144j
.text:0000AACC                 mov     ecx, [ebp+var_10]
.text:0000AACF                 call    ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ ; CObjectVector<CArc>::Back(void)
.text:0000AAD4                 mov     [ebp+var_12C], eax
.text:0000AADA                 mov     eax, [ebp+arg_0]
.text:0000AADD                 mov     ecx, [eax+28h]
.text:0000AAE0                 call    ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size(void)
.text:0000AAE5                 mov     esi, eax
.text:0000AAE7                 mov     ecx, [ebp+var_10]
.text:0000AAEA                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:0000AAEF                 cmp     esi, eax
.text:0000AAF1                 jbe     short loc_AAFA
.text:0000AAF3                 mov     [ebp+var_14], 80004001h
.text:0000AAFA
.text:0000AAFA loc_AAFA:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+249j
.text:0000AAFA                 lea     ecx, [ebp+var_144] ; this
.text:0000AB00                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000AB05                 mov     [ebp+var_4], 1
.text:0000AB0C                 mov     ecx, [ebp+var_12C]
.text:0000AB12                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000AB17                 mov     [ebp+var_348], eax
.text:0000AB1D                 mov     esi, esp
.text:0000AB1F                 lea     ecx, [ebp+var_144]
.text:0000AB25                 push    ecx
.text:0000AB26                 push    1
.text:0000AB28                 mov     edx, [ebp+var_348]
.text:0000AB2E                 push    edx
.text:0000AB2F                 mov     eax, [ebp+var_348]
.text:0000AB35                 mov     ecx, [eax]
.text:0000AB37                 mov     edx, [ecx+20h]
.text:0000AB3A                 call    edx
.text:0000AB3C                 cmp     esi, esp
.text:0000AB3E                 call    __RTC_CheckEsp
.text:0000AB43                 mov     [ebp+var_14C], eax
.text:0000AB49                 cmp     [ebp+var_14C], 0
.text:0000AB50                 jz      short loc_AB7B
.text:0000AB52                 mov     eax, [ebp+var_14C]
.text:0000AB58                 mov     [ebp+var_330], eax
.text:0000AB5E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AB65                 lea     ecx, [ebp+var_144] ; this
.text:0000AB6B                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000AB70                 mov     eax, [ebp+var_330]
.text:0000AB76                 jmp     loc_B2A8
.text:0000AB7B ; ---------------------------------------------------------------------------
.text:0000AB7B
.text:0000AB7B loc_AB7B:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+2A8j
.text:0000AB7B                 movzx   ecx, [ebp+var_144]
.text:0000AB82                 cmp     ecx, 13h
.text:0000AB85                 jnz     short loc_AB95
.text:0000AB87                 mov     edx, [ebp+var_13C]
.text:0000AB8D                 mov     [ebp+var_130], edx
.text:0000AB93                 jmp     short loc_ABAC
.text:0000AB95 ; ---------------------------------------------------------------------------
.text:0000AB95
.text:0000AB95 loc_AB95:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+2DDj
.text:0000AB95                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AB9C                 lea     ecx, [ebp+var_144] ; this
.text:0000ABA2                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000ABA7                 jmp     loc_B28D
.text:0000ABAC ; ---------------------------------------------------------------------------
.text:0000ABAC
.text:0000ABAC loc_ABAC:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+2EBj
.text:0000ABAC                 mov     ecx, [ebp+var_12C]
.text:0000ABB2                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000ABB7                 mov     [ebp+var_34C], eax
.text:0000ABBD                 mov     esi, esp
.text:0000ABBF                 lea     eax, [ebp+var_154]
.text:0000ABC5                 push    eax
.text:0000ABC6                 mov     ecx, [ebp+var_34C]
.text:0000ABCC                 push    ecx
.text:0000ABCD                 mov     edx, [ebp+var_34C]
.text:0000ABD3                 mov     eax, [edx]
.text:0000ABD5                 mov     ecx, [eax+14h]
.text:0000ABD8                 call    ecx
.text:0000ABDA                 cmp     esi, esp
.text:0000ABDC                 call    __RTC_CheckEsp
.text:0000ABE1                 mov     [ebp+var_15C], eax
.text:0000ABE7                 cmp     [ebp+var_15C], 0
.text:0000ABEE                 jz      short loc_AC19
.text:0000ABF0                 mov     edx, [ebp+var_15C]
.text:0000ABF6                 mov     [ebp+var_334], edx
.text:0000ABFC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AC03                 lea     ecx, [ebp+var_144] ; this
.text:0000AC09                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000AC0E                 mov     eax, [ebp+var_334]
.text:0000AC14                 jmp     loc_B2A8
.text:0000AC19 ; ---------------------------------------------------------------------------
.text:0000AC19
.text:0000AC19 loc_AC19:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+346j
.text:0000AC19                 mov     eax, [ebp+var_130]
.text:0000AC1F                 cmp     eax, [ebp+var_154]
.text:0000AC25                 jb      short loc_AC3E
.text:0000AC27                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AC2E                 lea     ecx, [ebp+var_144] ; this
.text:0000AC34                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000AC39                 jmp     loc_B28D
.text:0000AC3E ; ---------------------------------------------------------------------------
.text:0000AC3E
.text:0000AC3E loc_AC3E:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+37Dj
.text:0000AC3E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AC45                 lea     ecx, [ebp+var_144] ; this
.text:0000AC4B                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000AC50                 lea     ecx, [ebp+var_164]
.text:0000AC56                 call    ??0?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::CMyComPtr<IInArchiveGetStream>(void)
.text:0000AC5B                 mov     [ebp+var_4], 2
.text:0000AC62                 mov     ecx, [ebp+var_12C]
.text:0000AC68                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000AC6D                 mov     [ebp+var_350], eax
.text:0000AC73                 lea     ecx, [ebp+var_164]
.text:0000AC79                 call    ??I?$CMyComPtr@UIInArchiveGetStream@@@@QAEPAPAUIInArchiveGetStream@@XZ ; CMyComPtr<IInArchiveGetStream>::operator&(void)
.text:0000AC7E                 mov     esi, esp
.text:0000AC80                 push    eax
.text:0000AC81                 push    offset _IID_IInArchiveGetStream
.text:0000AC86                 mov     ecx, [ebp+var_350]
.text:0000AC8C                 push    ecx
.text:0000AC8D                 mov     edx, [ebp+var_350]
.text:0000AC93                 mov     eax, [edx]
.text:0000AC95                 mov     ecx, [eax]
.text:0000AC97                 call    ecx
.text:0000AC99                 cmp     esi, esp
.text:0000AC9B                 call    __RTC_CheckEsp
.text:0000ACA0                 test    eax, eax
.text:0000ACA2                 jnz     short loc_ACB6
.text:0000ACA4                 lea     ecx, [ebp+var_164]
.text:0000ACAA                 call    ??7?$CMyComPtr@UIInArchiveGetStream@@@@QBE_NXZ ; CMyComPtr<IInArchiveGetStream>::operator!(void)
.text:0000ACAF                 movzx   edx, al
.text:0000ACB2                 test    edx, edx
.text:0000ACB4                 jz      short loc_ACCD
.text:0000ACB6
.text:0000ACB6 loc_ACB6:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+3FAj
.text:0000ACB6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000ACBD                 lea     ecx, [ebp+var_164]
.text:0000ACC3                 call    ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text:0000ACC8                 jmp     loc_B28D
.text:0000ACCD ; ---------------------------------------------------------------------------
.text:0000ACCD
.text:0000ACCD loc_ACCD:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+40Cj
.text:0000ACCD                 lea     ecx, [ebp+var_170]
.text:0000ACD3                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000ACD8                 mov     byte ptr [ebp+var_4], 3
.text:0000ACDC                 lea     ecx, [ebp+var_164]
.text:0000ACE2                 call    ??C?$CMyComPtr@UIInArchiveGetStream@@@@QBEPAUIInArchiveGetStream@@XZ ; CMyComPtr<IInArchiveGetStream>::operator->(void)
.text:0000ACE7                 mov     [ebp+var_354], eax
.text:0000ACED                 lea     ecx, [ebp+var_170]
.text:0000ACF3                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:0000ACF8                 mov     esi, esp
.text:0000ACFA                 push    eax
.text:0000ACFB                 mov     eax, [ebp+var_130]
.text:0000AD01                 push    eax
.text:0000AD02                 mov     ecx, [ebp+var_354]
.text:0000AD08                 push    ecx
.text:0000AD09                 mov     edx, [ebp+var_354]
.text:0000AD0F                 mov     eax, [edx]
.text:0000AD11                 mov     ecx, [eax+0Ch]
.text:0000AD14                 call    ecx
.text:0000AD16                 cmp     esi, esp
.text:0000AD18                 call    __RTC_CheckEsp
.text:0000AD1D                 test    eax, eax
.text:0000AD1F                 jnz     short loc_AD33
.text:0000AD21                 lea     ecx, [ebp+var_170]
.text:0000AD27                 call    ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!(void)
.text:0000AD2C                 movzx   edx, al
.text:0000AD2F                 test    edx, edx
.text:0000AD31                 jz      short loc_AD59
.text:0000AD33
.text:0000AD33 loc_AD33:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+477j
.text:0000AD33                 mov     byte ptr [ebp+var_4], 2
.text:0000AD37                 lea     ecx, [ebp+var_170]
.text:0000AD3D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000AD42                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AD49                 lea     ecx, [ebp+var_164]
.text:0000AD4F                 call    ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text:0000AD54                 jmp     loc_B28D
.text:0000AD59 ; ---------------------------------------------------------------------------
.text:0000AD59
.text:0000AD59 loc_AD59:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+489j
.text:0000AD59                 lea     ecx, [ebp+var_17C]
.text:0000AD5F                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:0000AD64                 mov     byte ptr [ebp+var_4], 4
.text:0000AD68                 lea     ecx, [ebp+var_17C]
.text:0000AD6E                 call    ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator&(void)
.text:0000AD73                 push    eax
.text:0000AD74                 push    offset _IID_IInStream
.text:0000AD79                 lea     ecx, [ebp+var_170]
.text:0000AD7F                 call    ??$QueryInterface@UIInStream@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUIInStream@@@Z ; CMyComPtr<ISequentialInStream>::QueryInterface<IInStream>(_GUID const &,IInStream * *)
.text:0000AD84                 test    eax, eax
.text:0000AD86                 jnz     short loc_AD9A
.text:0000AD88                 lea     ecx, [ebp+var_17C]
.text:0000AD8E                 call    ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ; CMyComPtr<IInStream>::operator!(void)
.text:0000AD93                 movzx   eax, al
.text:0000AD96                 test    eax, eax
.text:0000AD98                 jz      short loc_ADCF
.text:0000AD9A
.text:0000AD9A loc_AD9A:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+4DEj
.text:0000AD9A                 mov     byte ptr [ebp+var_4], 3
.text:0000AD9E                 lea     ecx, [ebp+var_17C]
.text:0000ADA4                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000ADA9                 mov     byte ptr [ebp+var_4], 2
.text:0000ADAD                 lea     ecx, [ebp+var_170]
.text:0000ADB3                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000ADB8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000ADBF                 lea     ecx, [ebp+var_164]
.text:0000ADC5                 call    ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text:0000ADCA                 jmp     loc_B28D
.text:0000ADCF ; ---------------------------------------------------------------------------
.text:0000ADCF
.text:0000ADCF loc_ADCF:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+4F0j
.text:0000ADCF                 lea     ecx, [ebp+var_264]
.text:0000ADD5                 call    ??0CArc@@QAE@XZ ; CArc::CArc(void)
.text:0000ADDA                 mov     byte ptr [ebp+var_4], 5
.text:0000ADDE                 lea     ecx, [ebp+var_1F4]
.text:0000ADE4                 push    ecx             ; struct UString *
.text:0000ADE5                 mov     edx, [ebp+var_130]
.text:0000ADEB                 push    edx             ; unsigned int
.text:0000ADEC                 mov     ecx, [ebp+var_12C] ; this
.text:0000ADF2                 call    ?GetItemPath@CArc@@QBEJIAAVUString@@@Z ; CArc::GetItemPath(uint,UString &)
.text:0000ADF7                 mov     [ebp+var_26C], eax
.text:0000ADFD                 cmp     [ebp+var_26C], 0
.text:0000AE04                 jz      short loc_AE5C
.text:0000AE06                 mov     eax, [ebp+var_26C]
.text:0000AE0C                 mov     [ebp+var_338], eax
.text:0000AE12                 mov     byte ptr [ebp+var_4], 4
.text:0000AE16                 lea     ecx, [ebp+var_264] ; this
.text:0000AE1C                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:0000AE21                 mov     byte ptr [ebp+var_4], 3
.text:0000AE25                 lea     ecx, [ebp+var_17C]
.text:0000AE2B                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000AE30                 mov     byte ptr [ebp+var_4], 2
.text:0000AE34                 lea     ecx, [ebp+var_170]
.text:0000AE3A                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000AE3F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AE46                 lea     ecx, [ebp+var_164]
.text:0000AE4C                 call    ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text:0000AE51                 mov     eax, [ebp+var_338]
.text:0000AE57                 jmp     loc_B2A8
.text:0000AE5C ; ---------------------------------------------------------------------------
.text:0000AE5C
.text:0000AE5C loc_AE5C:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+55Cj
.text:0000AE5C                 lea     ecx, [ebp+var_271]
.text:0000AE62                 push    ecx             ; bool *
.text:0000AE63                 push    56h ; 'V'       ; unsigned __int32
.text:0000AE65                 mov     edx, [ebp+var_130]
.text:0000AE6B                 push    edx             ; unsigned int
.text:0000AE6C                 mov     ecx, [ebp+var_12C]
.text:0000AE72                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000AE77                 push    eax             ; struct IInArchive *
.text:0000AE78                 call    ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)
.text:0000AE7D                 mov     [ebp+var_27C], eax
.text:0000AE83                 cmp     [ebp+var_27C], 0
.text:0000AE8A                 jz      short loc_AEE2
.text:0000AE8C                 mov     eax, [ebp+var_27C]
.text:0000AE92                 mov     [ebp+var_33C], eax
.text:0000AE98                 mov     byte ptr [ebp+var_4], 4
.text:0000AE9C                 lea     ecx, [ebp+var_264] ; this
.text:0000AEA2                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:0000AEA7                 mov     byte ptr [ebp+var_4], 3
.text:0000AEAB                 lea     ecx, [ebp+var_17C]
.text:0000AEB1                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000AEB6                 mov     byte ptr [ebp+var_4], 2
.text:0000AEBA                 lea     ecx, [ebp+var_170]
.text:0000AEC0                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000AEC5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AECC                 lea     ecx, [ebp+var_164]
.text:0000AED2                 call    ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text:0000AED7                 mov     eax, [ebp+var_33C]
.text:0000AEDD                 jmp     loc_B2A8
.text:0000AEE2 ; ---------------------------------------------------------------------------
.text:0000AEE2
.text:0000AEE2 loc_AEE2:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+5E2j
.text:0000AEE2                 mov     ecx, [ebp+arg_0]
.text:0000AEE5                 cmp     dword ptr [ecx+38h], 0
.text:0000AEE9                 jz      loc_AF83
.text:0000AEEF                 lea     ecx, [ebp+var_284]
.text:0000AEF5                 call    ??0?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::CMyComPtr<IArchiveOpenSetSubArchiveName>(void)
.text:0000AEFA                 mov     byte ptr [ebp+var_4], 6
.text:0000AEFE                 lea     ecx, [ebp+var_284]
.text:0000AF04                 call    ??I?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAEPAPAUIArchiveOpenSetSubArchiveName@@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator&(void)
.text:0000AF09                 mov     esi, esp
.text:0000AF0B                 push    eax
.text:0000AF0C                 push    offset _IID_IArchiveOpenSetSubArchiveName
.text:0000AF11                 mov     edx, [ebp+arg_0]
.text:0000AF14                 mov     eax, [edx+38h]
.text:0000AF17                 mov     ecx, [ebp+arg_0]
.text:0000AF1A                 mov     edx, [ecx+38h]
.text:0000AF1D                 mov     eax, [eax]
.text:0000AF1F                 push    edx
.text:0000AF20                 mov     ecx, [eax]
.text:0000AF22                 call    ecx
.text:0000AF24                 cmp     esi, esp
.text:0000AF26                 call    __RTC_CheckEsp
.text:0000AF2B                 lea     ecx, [ebp+var_284]
.text:0000AF31                 call    ??B?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator IArchiveOpenSetSubArchiveName *(void)
.text:0000AF36                 test    eax, eax
.text:0000AF38                 jz      short loc_AF74
.text:0000AF3A                 lea     ecx, [ebp+var_284]
.text:0000AF40                 call    ??C?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator->(void)
.text:0000AF45                 mov     [ebp+var_358], eax
.text:0000AF4B                 lea     ecx, [ebp+var_1F4]
.text:0000AF51                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000AF56                 mov     esi, esp
.text:0000AF58                 push    eax
.text:0000AF59                 mov     edx, [ebp+var_358]
.text:0000AF5F                 push    edx
.text:0000AF60                 mov     eax, [ebp+var_358]
.text:0000AF66                 mov     ecx, [eax]
.text:0000AF68                 mov     edx, [ecx+0Ch]
.text:0000AF6B                 call    edx
.text:0000AF6D                 cmp     esi, esp
.text:0000AF6F                 call    __RTC_CheckEsp
.text:0000AF74
.text:0000AF74 loc_AF74:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+690j
.text:0000AF74                 mov     byte ptr [ebp+var_4], 5
.text:0000AF78                 lea     ecx, [ebp+var_284]
.text:0000AF7E                 call    ??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::~CMyComPtr<IArchiveOpenSetSubArchiveName>(void)
.text:0000AF83
.text:0000AF83 loc_AF83:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+641j
.text:0000AF83                 mov     eax, [ebp+var_130]
.text:0000AF89                 mov     [ebp+var_1CC], eax
.text:0000AF8F                 lea     ecx, [ebp+var_298]
.text:0000AF95                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:0000AF9A                 mov     byte ptr [ebp+var_4], 7
.text:0000AF9E                 lea     ecx, [ebp+var_2F8] ; this
.text:0000AFA4                 call    ??0COpenOptions@@QAE@XZ ; COpenOptions::COpenOptions(void)
.text:0000AFA9                 mov     byte ptr [ebp+var_4], 8
.text:0000AFAD                 mov     ecx, [ebp+arg_0]
.text:0000AFB0                 mov     edx, [ecx+40h]
.text:0000AFB3                 mov     [ebp+var_2B8], edx
.text:0000AFB9                 mov     eax, [ebp+arg_0]
.text:0000AFBC                 mov     ecx, [eax]
.text:0000AFBE                 mov     [ebp+var_2F8], ecx
.text:0000AFC4                 mov     esi, [ebp+arg_0]
.text:0000AFC7                 add     esi, 8
.text:0000AFCA                 mov     ecx, 8
.text:0000AFCF                 lea     edi, [ebp+var_2F0]
.text:0000AFD5                 rep movsd
.text:0000AFD7                 mov     dl, [ebp+var_271]
.text:0000AFDD                 mov     [ebp+var_2DC], dl
.text:0000AFE3                 lea     eax, [ebp+var_298]
.text:0000AFE9                 mov     [ebp+var_2CC], eax
.text:0000AFEF                 mov     [ebp+var_2B4], 0
.text:0000AFF6                 lea     ecx, [ebp+var_17C]
.text:0000AFFC                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000B001                 mov     [ebp+var_2C8], eax
.text:0000B007                 lea     ecx, [ebp+var_1F4]
.text:0000B00D                 push    ecx
.text:0000B00E                 lea     ecx, [ebp+var_2B0]
.text:0000B014                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000B019                 mov     edx, [ebp+arg_0]
.text:0000B01C                 mov     eax, [edx+38h]
.text:0000B01F                 mov     [ebp+var_2C0], eax
.text:0000B025                 mov     ecx, [ebp+arg_0]
.text:0000B028                 mov     edx, [ecx+3Ch]
.text:0000B02B                 mov     [ebp+var_2BC], edx
.text:0000B031                 lea     eax, [ebp+var_2F8]
.text:0000B037                 push    eax             ; struct COpenOptions *
.text:0000B038                 lea     ecx, [ebp+var_264] ; this
.text:0000B03E                 call    ?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z ; CArc::OpenStream(COpenOptions const &)
.text:0000B043                 mov     [ebp+var_300], eax
.text:0000B049                 mov     ecx, [ebp+arg_0]
.text:0000B04C                 mov     ecx, [ecx+28h]
.text:0000B04F                 call    ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size(void)
.text:0000B054                 neg     eax
.text:0000B056                 sbb     eax, eax
.text:0000B058                 neg     eax
.text:0000B05A                 mov     [ebp+var_14], eax
.text:0000B05D                 cmp     [ebp+var_300], 1
.text:0000B064                 jnz     loc_B0F0
.text:0000B06A                 lea     edx, [ebp+var_254]
.text:0000B070                 push    edx
.text:0000B071                 mov     ecx, [ebp+var_10]
.text:0000B074                 add     ecx, 30h ; '0'
.text:0000B077                 call    ??4CArcErrorInfo@@QAEAAU0@ABU0@@Z ; CArcErrorInfo::operator=(CArcErrorInfo const &)
.text:0000B07C                 lea     eax, [ebp+var_1F4]
.text:0000B082                 push    eax
.text:0000B083                 mov     ecx, [ebp+var_10]
.text:0000B086                 add     ecx, 24h ; '$'
.text:0000B089                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000B08E                 mov     byte ptr [ebp+var_4], 7
.text:0000B092                 lea     ecx, [ebp+var_2F8] ; this
.text:0000B098                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:0000B09D                 mov     byte ptr [ebp+var_4], 5
.text:0000B0A1                 lea     ecx, [ebp+var_298]
.text:0000B0A7                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000B0AC                 mov     byte ptr [ebp+var_4], 4
.text:0000B0B0                 lea     ecx, [ebp+var_264] ; this
.text:0000B0B6                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:0000B0BB                 mov     byte ptr [ebp+var_4], 3
.text:0000B0BF                 lea     ecx, [ebp+var_17C]
.text:0000B0C5                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000B0CA                 mov     byte ptr [ebp+var_4], 2
.text:0000B0CE                 lea     ecx, [ebp+var_170]
.text:0000B0D4                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000B0D9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B0E0                 lea     ecx, [ebp+var_164]
.text:0000B0E6                 call    ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text:0000B0EB                 jmp     loc_B28D
.text:0000B0F0 ; ---------------------------------------------------------------------------
.text:0000B0F0
.text:0000B0F0 loc_B0F0:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+7BCj
.text:0000B0F0                 mov     ecx, [ebp+var_300]
.text:0000B0F6                 mov     [ebp+var_304], ecx
.text:0000B0FC                 cmp     [ebp+var_304], 0
.text:0000B103                 jz      short loc_B179
.text:0000B105                 mov     edx, [ebp+var_304]
.text:0000B10B                 mov     [ebp+var_340], edx
.text:0000B111                 mov     byte ptr [ebp+var_4], 7
.text:0000B115                 lea     ecx, [ebp+var_2F8] ; this
.text:0000B11B                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:0000B120                 mov     byte ptr [ebp+var_4], 5
.text:0000B124                 lea     ecx, [ebp+var_298]
.text:0000B12A                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000B12F                 mov     byte ptr [ebp+var_4], 4
.text:0000B133                 lea     ecx, [ebp+var_264] ; this
.text:0000B139                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:0000B13E                 mov     byte ptr [ebp+var_4], 3
.text:0000B142                 lea     ecx, [ebp+var_17C]
.text:0000B148                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000B14D                 mov     byte ptr [ebp+var_4], 2
.text:0000B151                 lea     ecx, [ebp+var_170]
.text:0000B157                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000B15C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B163                 lea     ecx, [ebp+var_164]
.text:0000B169                 call    ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text:0000B16E                 mov     eax, [ebp+var_340]
.text:0000B174                 jmp     loc_B2A8
.text:0000B179 ; ---------------------------------------------------------------------------
.text:0000B179
.text:0000B179 loc_B179:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+85Bj
.text:0000B179                 lea     eax, [ebp+var_1C0]
.text:0000B17F                 push    eax             ; bool *
.text:0000B180                 lea     ecx, [ebp+var_1C8]
.text:0000B186                 push    ecx             ; struct _FILETIME *
.text:0000B187                 mov     edx, [ebp+var_130]
.text:0000B18D                 push    edx             ; unsigned int
.text:0000B18E                 mov     ecx, [ebp+var_12C] ; this
.text:0000B194                 call    ?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z ; CArc::GetItemMTime(uint,_FILETIME &,bool &)
.text:0000B199                 mov     [ebp+var_308], eax
.text:0000B19F                 cmp     [ebp+var_308], 0
.text:0000B1A6                 jz      short loc_B21C
.text:0000B1A8                 mov     eax, [ebp+var_308]
.text:0000B1AE                 mov     [ebp+var_344], eax
.text:0000B1B4                 mov     byte ptr [ebp+var_4], 7
.text:0000B1B8                 lea     ecx, [ebp+var_2F8] ; this
.text:0000B1BE                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:0000B1C3                 mov     byte ptr [ebp+var_4], 5
.text:0000B1C7                 lea     ecx, [ebp+var_298]
.text:0000B1CD                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000B1D2                 mov     byte ptr [ebp+var_4], 4
.text:0000B1D6                 lea     ecx, [ebp+var_264] ; this
.text:0000B1DC                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:0000B1E1                 mov     byte ptr [ebp+var_4], 3
.text:0000B1E5                 lea     ecx, [ebp+var_17C]
.text:0000B1EB                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000B1F0                 mov     byte ptr [ebp+var_4], 2
.text:0000B1F4                 lea     ecx, [ebp+var_170]
.text:0000B1FA                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000B1FF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B206                 lea     ecx, [ebp+var_164]
.text:0000B20C                 call    ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text:0000B211                 mov     eax, [ebp+var_344]
.text:0000B217                 jmp     loc_B2A8
.text:0000B21C ; ---------------------------------------------------------------------------
.text:0000B21C
.text:0000B21C loc_B21C:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+8FEj
.text:0000B21C                 lea     ecx, [ebp+var_264]
.text:0000B222                 push    ecx
.text:0000B223                 mov     ecx, [ebp+var_10]
.text:0000B226                 call    ?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z ; CObjectVector<CArc>::Add(CArc const &)
.text:0000B22B                 mov     byte ptr [ebp+var_4], 7
.text:0000B22F                 lea     ecx, [ebp+var_2F8] ; this
.text:0000B235                 call    ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text:0000B23A                 mov     byte ptr [ebp+var_4], 5
.text:0000B23E                 lea     ecx, [ebp+var_298]
.text:0000B244                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000B249                 mov     byte ptr [ebp+var_4], 4
.text:0000B24D                 lea     ecx, [ebp+var_264] ; this
.text:0000B253                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:0000B258                 mov     byte ptr [ebp+var_4], 3
.text:0000B25C                 lea     ecx, [ebp+var_17C]
.text:0000B262                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000B267                 mov     byte ptr [ebp+var_4], 2
.text:0000B26B                 lea     ecx, [ebp+var_170]
.text:0000B271                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000B276                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B27D                 lea     ecx, [ebp+var_164]
.text:0000B283                 call    ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text:0000B288                 jmp     loc_A90B
.text:0000B28D ; ---------------------------------------------------------------------------
.text:0000B28D
.text:0000B28D loc_B28D:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+10Ej
.text:0000B28D                                         ; CArchiveLink::Open(COpenOptions &)+132j ...
.text:0000B28D                 mov     ecx, [ebp+var_10]
.text:0000B290                 call    ?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ ; CObjectVector<CArc>::IsEmpty(void)
.text:0000B295                 movzx   edx, al
.text:0000B298                 neg     edx
.text:0000B29A                 sbb     edx, edx
.text:0000B29C                 add     edx, 1
.text:0000B29F                 mov     eax, [ebp+var_10]
.text:0000B2A2                 mov     [eax+20h], dl
.text:0000B2A5                 mov     eax, [ebp+var_14]
.text:0000B2A8
.text:0000B2A8 loc_B2A8:                               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+5Ej
.text:0000B2A8                                         ; CArchiveLink::Open(COpenOptions &)+1F9j ...
.text:0000B2A8                 push    edx
.text:0000B2A9                 mov     ecx, ebp
.text:0000B2AB                 push    eax
.text:0000B2AC                 lea     edx, $LN58
.text:0000B2B2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000B2B7                 pop     eax
.text:0000B2B8                 pop     edx
.text:0000B2B9                 mov     ecx, [ebp+var_C]
.text:0000B2BC                 mov     large fs:0, ecx
.text:0000B2C3                 pop     ecx
.text:0000B2C4                 pop     edi
.text:0000B2C5                 pop     esi
.text:0000B2C6                 add     esp, 358h
.text:0000B2CC                 cmp     ebp, esp
.text:0000B2CE                 call    __RTC_CheckEsp
.text:0000B2D3                 mov     esp, ebp
.text:0000B2D5                 pop     ebp
.text:0000B2D6                 retn    4
.text:0000B2D6 ?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z endp
.text:0000B2D6
.text:0000B2D6 ; ---------------------------------------------------------------------------
.text:0000B2D9                 align 4
.text:0000B2DC $LN58           dd 0Ch                  ; DATA XREF: CArchiveLink::Open(COpenOptions &)+A04o
.text:0000B2E0                 dd offset $LN57
.text:0000B2E4 $LN57           dd 0FFFFFFC8h, 20h      ; DATA XREF: .text:0000B2E0o
.text:0000B2EC                 dd offset $LN44         ; "latest"
.text:0000B2F0                 dd 0FFFFFEE0h, 0E0h
.text:0000B2F8                 dd offset $LN45         ; "arc"
.text:0000B2FC                 dd 0FFFFFEBCh, 10h
.text:0000B304                 dd offset $LN46_0       ; "prop"
.text:0000B308                 dd 0FFFFFEACh, 4
.text:0000B310                 dd offset $LN47         ; "numItems"
.text:0000B314                 dd 0FFFFFE9Ch, 4
.text:0000B31C                 dd offset $LN48_0       ; "getStream"
.text:0000B320                 db 90h
.text:0000B321                 db 0FEh, 2 dup(0FFh)
.text:0000B324                 dd 4
.text:0000B328                 dd offset $LN49_0       ; "subSeqStream"
.text:0000B32C                 dd 0FFFFFE84h, 4
.text:0000B334                 dd offset $LN50_0       ; "subStream"
.text:0000B338                 dd 0FFFFFD9Ch, 0E0h
.text:0000B340                 dd offset $LN51_0       ; "arc2"
.text:0000B344                 dd 0FFFFFD8Fh, 1
.text:0000B34C                 dd offset $LN52_0       ; "zerosTailIsAllowed"
.text:0000B350                 dd 0FFFFFD7Ch, 4
.text:0000B358                 dd offset $LN53         ; "setSubArchiveName"
.text:0000B35C                 dd 0FFFFFD68h, 0Ch
.text:0000B364                 dd offset $LN54_0       ; "excl"
.text:0000B368                 dd 0FFFFFD08h, 58h
.text:0000B370                 dd offset $LN55_0
.text:0000B374 $LN55_0         dd 32706Fh              ; DATA XREF: .text:0000B370o
.text:0000B378 $LN54_0         db 'excl',0             ; DATA XREF: .text:0000B364o
.text:0000B37D $LN53           db 'setSubArchiveName',0 ; DATA XREF: .text:0000B358o
.text:0000B38F $LN52_0         db 'zerosTailIsAllowed',0 ; DATA XREF: .text:0000B34Co
.text:0000B3A2 $LN51_0         db 'arc2',0             ; DATA XREF: .text:0000B340o
.text:0000B3A7 $LN50_0         db 'subStream',0        ; DATA XREF: .text:0000B334o
.text:0000B3B1 $LN49_0         db 'subSeqStream',0     ; DATA XREF: .text:0000B328o
.text:0000B3BE $LN48_0         db 'getStream',0        ; DATA XREF: .text:0000B31Co
.text:0000B3C8 $LN47           db 'numItems',0         ; DATA XREF: .text:0000B310o
.text:0000B3D1 $LN46_0         db 'prop',0             ; DATA XREF: .text:0000B304o
.text:0000B3D6 $LN45           db 'arc',0              ; DATA XREF: .text:0000B2F8o
.text:0000B3DA $LN44           db 'latest',0           ; DATA XREF: .text:0000B2ECo
.text:0000B3E1                 align 8
.text:0000B3E8
.text:0000B3E8 ; =============== S U B R O U T I N E =======================================
.text:0000B3E8
.text:0000B3E8 ; Attributes: bp-based frame
.text:0000B3E8
.text:0000B3E8 ; __int32 __thiscall CArchiveLink::Open2(CArchiveLink *__hidden this, struct COpenOptions *, struct IOpenCallbackUI *)
.text:0000B3E8                 public ?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z
.text:0000B3E8 ?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z proc near
.text:0000B3E8                                         ; CODE XREF: CArchiveLink::Open3(COpenOptions &,IOpenCallbackUI *)+2Ap
.text:0000B3E8                                         ; CArchiveLink::ReOpen(COpenOptions &)+ABp
.text:0000B3E8
.text:0000B3E8 var_7C          = dword ptr -7Ch
.text:0000B3E8 var_78          = dword ptr -78h
.text:0000B3E8 var_74          = dword ptr -74h
.text:0000B3E8 var_70          = dword ptr -70h
.text:0000B3E8 var_6C          = byte ptr -6Ch
.text:0000B3E8 var_60          = dword ptr -60h
.text:0000B3E8 var_5C          = dword ptr -5Ch
.text:0000B3E8 var_58          = dword ptr -58h
.text:0000B3E8 var_54          = dword ptr -54h
.text:0000B3E8 var_50          = dword ptr -50h
.text:0000B3E8 var_4C          = dword ptr -4Ch
.text:0000B3E8 var_44          = byte ptr -44h
.text:0000B3E8 var_30          = word ptr -30h
.text:0000B3E8 var_1C          = byte ptr -1Ch
.text:0000B3E8 var_14          = dword ptr -14h
.text:0000B3E8 var_10          = dword ptr -10h
.text:0000B3E8 var_C           = dword ptr -0Ch
.text:0000B3E8 var_4           = dword ptr -4
.text:0000B3E8 arg_0           = dword ptr  8
.text:0000B3E8 arg_4           = dword ptr  0Ch
.text:0000B3E8
.text:0000B3E8                 push    ebp
.text:0000B3E9                 mov     ebp, esp
.text:0000B3EB                 push    0FFFFFFFFh
.text:0000B3ED                 push    offset __ehhandler$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z
.text:0000B3F2                 mov     eax, large fs:0
.text:0000B3F8                 push    eax
.text:0000B3F9                 sub     esp, 70h
.text:0000B3FC                 push    esi
.text:0000B3FD                 push    edi             ; struct UString *
.text:0000B3FE                 push    ecx
.text:0000B3FF                 lea     edi, [ebp+var_7C]
.text:0000B402                 mov     ecx, 1Ch
.text:0000B407                 mov     eax, 0CCCCCCCCh
.text:0000B40C                 rep stosd
.text:0000B40E                 pop     ecx
.text:0000B40F                 mov     eax, dword ptr ds:___security_cookie
.text:0000B414                 xor     eax, ebp
.text:0000B416                 push    eax             ; struct UString *
.text:0000B417                 lea     eax, [ebp+var_C]
.text:0000B41A                 mov     large fs:0, eax
.text:0000B420                 mov     [ebp+var_10], ecx
.text:0000B423                 mov     eax, [ebp+var_10]
.text:0000B426                 mov     dword ptr [eax+18h], 0
.text:0000B42D                 mov     dword ptr [eax+1Ch], 0
.text:0000B434                 push    98h ; 'ÿ'       ; unsigned int
.text:0000B439                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000B43E                 add     esp, 4
.text:0000B441                 mov     [ebp+var_5C], eax
.text:0000B444                 mov     [ebp+var_4], 0
.text:0000B44B                 cmp     [ebp+var_5C], 0
.text:0000B44F                 jz      short loc_B45E
.text:0000B451                 mov     ecx, [ebp+var_5C]
.text:0000B454                 call    ??0COpenCallbackImp@@QAE@XZ ; COpenCallbackImp::COpenCallbackImp(void)
.text:0000B459                 mov     [ebp+var_74], eax
.text:0000B45C                 jmp     short loc_B465
.text:0000B45E ; ---------------------------------------------------------------------------
.text:0000B45E
.text:0000B45E loc_B45E:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+67j
.text:0000B45E                 mov     [ebp+var_74], 0
.text:0000B465
.text:0000B465 loc_B465:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+74j
.text:0000B465                 mov     ecx, [ebp+var_74]
.text:0000B468                 mov     [ebp+var_58], ecx
.text:0000B46B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B472                 mov     edx, [ebp+var_58]
.text:0000B475                 mov     [ebp+var_14], edx
.text:0000B478                 mov     eax, [ebp+var_14]
.text:0000B47B                 push    eax
.text:0000B47C                 lea     ecx, [ebp+var_1C]
.text:0000B47F                 call    ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(IArchiveOpenCallback *)
.text:0000B484                 mov     [ebp+var_4], 1
.text:0000B48B                 mov     ecx, [ebp+var_14]
.text:0000B48E                 mov     edx, [ebp+arg_4]
.text:0000B491                 mov     [ecx+90h], edx
.text:0000B497                 lea     ecx, [ebp+var_30]
.text:0000B49A                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000B49F                 mov     byte ptr [ebp+var_4], 2
.text:0000B4A3                 lea     ecx, [ebp+var_44]
.text:0000B4A6                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000B4AB                 mov     byte ptr [ebp+var_4], 3
.text:0000B4AF                 mov     eax, [ebp+arg_0]
.text:0000B4B2                 cmp     dword ptr [eax+30h], 0
.text:0000B4B6                 jnz     short loc_B4EE
.text:0000B4B8                 mov     ecx, [ebp+arg_0]
.text:0000B4BB                 movzx   edx, byte ptr [ecx+44h]
.text:0000B4BF                 test    edx, edx
.text:0000B4C1                 jnz     short loc_B4EE
.text:0000B4C3                 lea     eax, [ebp+var_44]
.text:0000B4C6                 push    eax             ; struct UString *
.text:0000B4C7                 lea     ecx, [ebp+var_30]
.text:0000B4CA                 push    ecx             ; wchar_t *
.text:0000B4CB                 mov     ecx, [ebp+arg_0]
.text:0000B4CE                 add     ecx, 48h ; 'H'
.text:0000B4D1                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000B4D6                 push    eax             ; this
.text:0000B4D7                 call    ?GetFullPathAndSplit@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@1@Z ; NWindows::NFile::NDir::GetFullPathAndSplit(wchar_t const *,UString &,UString &)
.text:0000B4DC                 lea     edx, [ebp+var_44]
.text:0000B4DF                 push    edx             ; struct UString *
.text:0000B4E0                 lea     eax, [ebp+var_30]
.text:0000B4E3                 push    eax             ; struct UString *
.text:0000B4E4                 mov     ecx, [ebp+var_14] ; this
.text:0000B4E7                 call    ?Init@COpenCallbackImp@@QAEXABVUString@@0@Z ; COpenCallbackImp::Init(UString const &,UString const &)
.text:0000B4EC                 jmp     short loc_B515
.text:0000B4EE ; ---------------------------------------------------------------------------
.text:0000B4EE
.text:0000B4EE loc_B4EE:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+CEj
.text:0000B4EE                                         ; CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+D9j
.text:0000B4EE                 mov     ecx, [ebp+arg_0]
.text:0000B4F1                 add     ecx, 48h ; 'H'
.text:0000B4F4                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000B4F9                 mov     esi, esp
.text:0000B4FB                 push    eax
.text:0000B4FC                 mov     ecx, [ebp+var_14]
.text:0000B4FF                 add     ecx, 8
.text:0000B502                 mov     edx, [ebp+var_14]
.text:0000B505                 mov     eax, [edx+8]
.text:0000B508                 push    ecx
.text:0000B509                 mov     ecx, [eax+0Ch]
.text:0000B50C                 call    ecx
.text:0000B50E                 cmp     esi, esp
.text:0000B510                 call    __RTC_CheckEsp
.text:0000B515
.text:0000B515 loc_B515:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+104j
.text:0000B515                 lea     ecx, [ebp+var_1C]
.text:0000B518                 call    ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *(void)
.text:0000B51D                 mov     edx, [ebp+arg_0]
.text:0000B520                 mov     [edx+38h], eax
.text:0000B523                 mov     eax, [ebp+arg_0]
.text:0000B526                 mov     ecx, [ebp+var_14]
.text:0000B529                 mov     [eax+3Ch], ecx
.text:0000B52C                 mov     edx, [ebp+arg_0]
.text:0000B52F                 push    edx             ; struct COpenOptions *
.text:0000B530                 mov     ecx, [ebp+var_10] ; this
.text:0000B533                 call    ?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z ; CArchiveLink::Open(COpenOptions &)
.text:0000B538                 mov     [ebp+var_4C], eax
.text:0000B53B                 mov     eax, [ebp+var_10]
.text:0000B53E                 mov     ecx, [ebp+var_14]
.text:0000B541                 mov     dl, [ecx+8Ch]
.text:0000B547                 mov     [eax+21h], dl
.text:0000B54A                 mov     eax, [ebp+var_4C]
.text:0000B54D                 mov     [ebp+var_50], eax
.text:0000B550                 cmp     [ebp+var_50], 0
.text:0000B554                 jz      short loc_B58B
.text:0000B556                 mov     ecx, [ebp+var_50]
.text:0000B559                 mov     [ebp+var_60], ecx
.text:0000B55C                 mov     byte ptr [ebp+var_4], 2
.text:0000B560                 lea     ecx, [ebp+var_44] ; this
.text:0000B563                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000B568                 mov     byte ptr [ebp+var_4], 1
.text:0000B56C                 lea     ecx, [ebp+var_30] ; this
.text:0000B56F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000B574                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B57B                 lea     ecx, [ebp+var_1C]
.text:0000B57E                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:0000B583                 mov     eax, [ebp+var_60]
.text:0000B586                 jmp     loc_B66B
.text:0000B58B ; ---------------------------------------------------------------------------
.text:0000B58B
.text:0000B58B loc_B58B:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+16Cj
.text:0000B58B                 mov     [ebp+var_54], 0
.text:0000B592                 jmp     short loc_B59D
.text:0000B594 ; ---------------------------------------------------------------------------
.text:0000B594
.text:0000B594 loc_B594:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *):loc_B635j
.text:0000B594                 mov     edx, [ebp+var_54]
.text:0000B597                 add     edx, 1
.text:0000B59A                 mov     [ebp+var_54], edx
.text:0000B59D
.text:0000B59D loc_B59D:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+1AAj
.text:0000B59D                 mov     ecx, [ebp+var_14]
.text:0000B5A0                 add     ecx, 74h ; 't'
.text:0000B5A3                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:0000B5A8                 cmp     [ebp+var_54], eax
.text:0000B5AB                 jnb     loc_B63A
.text:0000B5B1                 mov     eax, [ebp+var_54]
.text:0000B5B4                 push    eax
.text:0000B5B5                 mov     ecx, [ebp+var_14]
.text:0000B5B8                 add     ecx, 74h ; 't'
.text:0000B5BB                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000B5C0                 movzx   ecx, byte ptr [eax]
.text:0000B5C3                 test    ecx, ecx
.text:0000B5C5                 jz      short loc_B635
.text:0000B5C7                 mov     edx, [ebp+var_54]
.text:0000B5CA                 push    edx
.text:0000B5CB                 mov     ecx, [ebp+var_14]
.text:0000B5CE                 add     ecx, 68h ; 'h'
.text:0000B5D1                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:0000B5D6                 push    eax
.text:0000B5D7                 lea     eax, [ebp+var_30]
.text:0000B5DA                 push    eax
.text:0000B5DB                 lea     ecx, [ebp+var_6C]
.text:0000B5DE                 push    ecx
.text:0000B5DF                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:0000B5E4                 mov     [ebp+var_78], eax
.text:0000B5E7                 mov     edx, [ebp+var_78]
.text:0000B5EA                 mov     [ebp+var_7C], edx
.text:0000B5ED                 mov     byte ptr [ebp+var_4], 4
.text:0000B5F1                 mov     eax, [ebp+var_7C]
.text:0000B5F4                 push    eax
.text:0000B5F5                 mov     ecx, [ebp+var_10]
.text:0000B5F8                 add     ecx, 0Ch
.text:0000B5FB                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:0000B600                 mov     byte ptr [ebp+var_4], 3
.text:0000B604                 lea     ecx, [ebp+var_6C] ; this
.text:0000B607                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000B60C                 mov     ecx, [ebp+var_54]
.text:0000B60F                 push    ecx
.text:0000B610                 mov     ecx, [ebp+var_14]
.text:0000B613                 add     ecx, 80h ; 'Ç'
.text:0000B619                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:0000B61E                 mov     edx, [ebp+var_10]
.text:0000B621                 mov     ecx, [edx+18h]
.text:0000B624                 add     ecx, [eax]
.text:0000B626                 mov     edx, [edx+1Ch]
.text:0000B629                 adc     edx, [eax+4]
.text:0000B62C                 mov     eax, [ebp+var_10]
.text:0000B62F                 mov     [eax+18h], ecx
.text:0000B632                 mov     [eax+1Ch], edx
.text:0000B635
.text:0000B635 loc_B635:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+1DDj
.text:0000B635                 jmp     loc_B594
.text:0000B63A ; ---------------------------------------------------------------------------
.text:0000B63A
.text:0000B63A loc_B63A:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+1C3j
.text:0000B63A                 mov     [ebp+var_70], 0
.text:0000B641                 mov     byte ptr [ebp+var_4], 2
.text:0000B645                 lea     ecx, [ebp+var_44] ; this
.text:0000B648                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000B64D                 mov     byte ptr [ebp+var_4], 1
.text:0000B651                 lea     ecx, [ebp+var_30] ; this
.text:0000B654                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000B659                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B660                 lea     ecx, [ebp+var_1C]
.text:0000B663                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:0000B668                 mov     eax, [ebp+var_70]
.text:0000B66B
.text:0000B66B loc_B66B:                               ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+19Ej
.text:0000B66B                 push    edx
.text:0000B66C                 mov     ecx, ebp
.text:0000B66E                 push    eax
.text:0000B66F                 lea     edx, $LN22_0
.text:0000B675                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000B67A                 pop     eax
.text:0000B67B                 pop     edx
.text:0000B67C                 mov     ecx, [ebp+var_C]
.text:0000B67F                 mov     large fs:0, ecx
.text:0000B686                 pop     ecx
.text:0000B687                 pop     edi
.text:0000B688                 pop     esi
.text:0000B689                 add     esp, 7Ch
.text:0000B68C                 cmp     ebp, esp
.text:0000B68E                 call    __RTC_CheckEsp
.text:0000B693                 mov     esp, ebp
.text:0000B695                 pop     ebp
.text:0000B696                 retn    8
.text:0000B696 ?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z endp ; sp-analysis failed
.text:0000B696
.text:0000B696 ; ---------------------------------------------------------------------------
.text:0000B699                 align 4
.text:0000B69C $LN22_0         dd 3                    ; DATA XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+287o
.text:0000B6A0                 dd offset $LN21_0
.text:0000B6A4 $LN21_0         dd 0FFFFFFE4h, 4        ; DATA XREF: .text:0000B6A0o
.text:0000B6AC                 dd offset $LN17_4       ; "callback"
.text:0000B6B0                 dd 0FFFFFFD0h, 0Ch
.text:0000B6B8                 dd offset $LN18_6       ; "prefix"
.text:0000B6BC                 dd 0FFFFFFBCh, 0Ch
.text:0000B6C4                 dd offset $LN19_1       ; "name"
.text:0000B6C8 $LN19_1         db 'name',0             ; DATA XREF: .text:0000B6C4o
.text:0000B6CD $LN18_6         db 'prefix',0           ; DATA XREF: .text:0000B6B8o
.text:0000B6D4 $LN17_4         db 'callback',0         ; DATA XREF: .text:0000B6ACo
.text:0000B6DD                 db 0Bh dup(0CCh)
.text:0000B6E8
.text:0000B6E8 ; =============== S U B R O U T I N E =======================================
.text:0000B6E8
.text:0000B6E8 ; Attributes: bp-based frame
.text:0000B6E8
.text:0000B6E8 ; __int32 __thiscall CArc::ReOpen(CArc *this, const struct COpenOptions *)
.text:0000B6E8                 public ?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z
.text:0000B6E8 ?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z proc near
.text:0000B6E8                                         ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+2B6p
.text:0000B6E8
.text:0000B6E8 var_7C          = dword ptr -7Ch
.text:0000B6E8 var_78          = dword ptr -78h
.text:0000B6E8 var_74          = dword ptr -74h
.text:0000B6E8 var_70          = dword ptr -70h
.text:0000B6E8 var_6C          = dword ptr -6Ch
.text:0000B6E8 var_68          = dword ptr -68h
.text:0000B6E8 var_64          = dword ptr -64h
.text:0000B6E8 var_60          = dword ptr -60h
.text:0000B6E8 var_5C          = dword ptr -5Ch
.text:0000B6E8 var_58          = dword ptr -58h
.text:0000B6E8 var_50          = dword ptr -50h
.text:0000B6E8 var_4C          = dword ptr -4Ch
.text:0000B6E8 var_44          = dword ptr -44h
.text:0000B6E8 var_40          = dword ptr -40h
.text:0000B6E8 var_3C          = qword ptr -3Ch
.text:0000B6E8 var_30          = byte ptr -30h
.text:0000B6E8 var_28          = dword ptr -28h
.text:0000B6E8 var_24          = dword ptr -24h
.text:0000B6E8 var_1C          = dword ptr -1Ch
.text:0000B6E8 var_18          = dword ptr -18h
.text:0000B6E8 var_10          = dword ptr -10h
.text:0000B6E8 var_C           = dword ptr -0Ch
.text:0000B6E8 var_4           = dword ptr -4
.text:0000B6E8 arg_0           = dword ptr  8
.text:0000B6E8
.text:0000B6E8                 push    ebp
.text:0000B6E9                 mov     ebp, esp
.text:0000B6EB                 push    0FFFFFFFFh
.text:0000B6ED                 push    offset __ehhandler$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z
.text:0000B6F2                 mov     eax, large fs:0
.text:0000B6F8                 push    eax
.text:0000B6F9                 sub     esp, 70h
.text:0000B6FC                 push    esi
.text:0000B6FD                 push    edi
.text:0000B6FE                 push    ecx
.text:0000B6FF                 lea     edi, [ebp+var_7C]
.text:0000B702                 mov     ecx, 1Ch
.text:0000B707                 mov     eax, 0CCCCCCCCh
.text:0000B70C                 rep stosd
.text:0000B70E                 pop     ecx
.text:0000B70F                 mov     eax, dword ptr ds:___security_cookie
.text:0000B714                 xor     eax, ebp
.text:0000B716                 push    eax
.text:0000B717                 lea     eax, [ebp+var_C]
.text:0000B71A                 mov     large fs:0, eax
.text:0000B720                 mov     [ebp+var_10], ecx
.text:0000B723                 mov     ecx, [ebp+var_10]
.text:0000B726                 add     ecx, 10h        ; this
.text:0000B729                 call    ?ClearErrors@CArcErrorInfo@@QAEXXZ ; CArcErrorInfo::ClearErrors(void)
.text:0000B72E                 mov     eax, [ebp+var_10]
.text:0000B731                 mov     dword ptr [eax+1Ch], 0FFFFFFFFh
.text:0000B738                 mov     [ebp+var_1C], 0
.text:0000B73F                 mov     [ebp+var_18], 0
.text:0000B746                 mov     ecx, [ebp+arg_0]
.text:0000B749                 cmp     dword ptr [ecx+30h], 0
.text:0000B74D                 jz      short loc_B7BD
.text:0000B74F                 mov     esi, esp
.text:0000B751                 lea     edx, [ebp+var_1C]
.text:0000B754                 push    edx
.text:0000B755                 push    2
.text:0000B757                 push    0
.text:0000B759                 push    0
.text:0000B75B                 mov     eax, [ebp+arg_0]
.text:0000B75E                 mov     ecx, [eax+30h]
.text:0000B761                 mov     edx, [ebp+arg_0]
.text:0000B764                 mov     eax, [edx+30h]
.text:0000B767                 mov     ecx, [ecx]
.text:0000B769                 push    eax
.text:0000B76A                 mov     edx, [ecx+10h]
.text:0000B76D                 call    edx
.text:0000B76F                 cmp     esi, esp
.text:0000B771                 call    __RTC_CheckEsp
.text:0000B776                 mov     [ebp+var_24], eax
.text:0000B779                 cmp     [ebp+var_24], 0
.text:0000B77D                 jz      short loc_B787
.text:0000B77F                 mov     eax, [ebp+var_24]
.text:0000B782                 jmp     loc_B999
.text:0000B787 ; ---------------------------------------------------------------------------
.text:0000B787
.text:0000B787 loc_B787:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+95j
.text:0000B787                 mov     esi, esp
.text:0000B789                 push    0
.text:0000B78B                 push    0
.text:0000B78D                 push    0
.text:0000B78F                 push    0
.text:0000B791                 mov     eax, [ebp+arg_0]
.text:0000B794                 mov     ecx, [eax+30h]
.text:0000B797                 mov     edx, [ebp+arg_0]
.text:0000B79A                 mov     eax, [edx+30h]
.text:0000B79D                 mov     ecx, [ecx]
.text:0000B79F                 push    eax
.text:0000B7A0                 mov     edx, [ecx+10h]
.text:0000B7A3                 call    edx
.text:0000B7A5                 cmp     esi, esp
.text:0000B7A7                 call    __RTC_CheckEsp
.text:0000B7AC                 mov     [ebp+var_28], eax
.text:0000B7AF                 cmp     [ebp+var_28], 0
.text:0000B7B3                 jz      short loc_B7BD
.text:0000B7B5                 mov     eax, [ebp+var_28]
.text:0000B7B8                 jmp     loc_B999
.text:0000B7BD ; ---------------------------------------------------------------------------
.text:0000B7BD
.text:0000B7BD loc_B7BD:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+65j
.text:0000B7BD                                         ; CArc::ReOpen(COpenOptions const &)+CBj
.text:0000B7BD                 mov     eax, [ebp+var_10]
.text:0000B7C0                 mov     ecx, [ebp+var_1C]
.text:0000B7C3                 mov     [eax+0C0h], ecx
.text:0000B7C9                 mov     edx, [ebp+var_18]
.text:0000B7CC                 mov     [eax+0C4h], edx
.text:0000B7D2                 lea     ecx, [ebp+var_30]
.text:0000B7D5                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:0000B7DA                 mov     [ebp+var_4], 0
.text:0000B7E1                 mov     ecx, [ebp+var_10] ; this
.text:0000B7E4                 call    ?GetGlobalOffset@CArc@@QBE_JXZ ; CArc::GetGlobalOffset(void)
.text:0000B7E9                 mov     dword ptr [ebp+var_3C], eax
.text:0000B7EC                 mov     dword ptr [ebp+var_3C+4], edx
.text:0000B7EF                 cmp     dword ptr [ebp+var_3C+4], 0
.text:0000B7F3                 jg      short loc_B811
.text:0000B7F5                 jl      short loc_B7FD
.text:0000B7F7                 cmp     dword ptr [ebp+var_3C], 0
.text:0000B7FB                 ja      short loc_B811
.text:0000B7FD
.text:0000B7FD loc_B7FD:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+10Dj
.text:0000B7FD                 mov     eax, [ebp+arg_0]
.text:0000B800                 mov     ecx, [eax+30h]
.text:0000B803                 push    ecx
.text:0000B804                 lea     ecx, [ebp+var_30]
.text:0000B807                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:0000B80C                 jmp     loc_B8AF
.text:0000B811 ; ---------------------------------------------------------------------------
.text:0000B811
.text:0000B811 loc_B811:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+10Bj
.text:0000B811                                         ; CArc::ReOpen(COpenOptions const &)+113j
.text:0000B811                 push    20h ; ' '       ; unsigned int
.text:0000B813                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000B818                 add     esp, 4
.text:0000B81B                 mov     [ebp+var_64], eax
.text:0000B81E                 mov     byte ptr [ebp+var_4], 1
.text:0000B822                 cmp     [ebp+var_64], 0
.text:0000B826                 jz      short loc_B835
.text:0000B828                 mov     ecx, [ebp+var_64]
.text:0000B82B                 call    ??0CTailInStream@@QAE@XZ ; CTailInStream::CTailInStream(void)
.text:0000B830                 mov     [ebp+var_74], eax
.text:0000B833                 jmp     short loc_B83C
.text:0000B835 ; ---------------------------------------------------------------------------
.text:0000B835
.text:0000B835 loc_B835:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+13Ej
.text:0000B835                 mov     [ebp+var_74], 0
.text:0000B83C
.text:0000B83C loc_B83C:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+14Bj
.text:0000B83C                 mov     edx, [ebp+var_74]
.text:0000B83F                 mov     [ebp+var_60], edx
.text:0000B842                 mov     byte ptr [ebp+var_4], 0
.text:0000B846                 mov     eax, [ebp+var_60]
.text:0000B849                 mov     [ebp+var_40], eax
.text:0000B84C                 mov     ecx, [ebp+var_40]
.text:0000B84F                 push    ecx
.text:0000B850                 lea     ecx, [ebp+var_30]
.text:0000B853                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:0000B858                 mov     edx, [ebp+arg_0]
.text:0000B85B                 mov     eax, [edx+30h]
.text:0000B85E                 push    eax
.text:0000B85F                 mov     ecx, [ebp+var_40]
.text:0000B862                 add     ecx, 10h
.text:0000B865                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:0000B86A                 mov     ecx, [ebp+var_40]
.text:0000B86D                 mov     edx, dword ptr [ebp+var_3C]
.text:0000B870                 mov     [ecx+18h], edx
.text:0000B873                 mov     eax, dword ptr [ebp+var_3C+4]
.text:0000B876                 mov     [ecx+1Ch], eax
.text:0000B879                 mov     ecx, [ebp+var_40] ; this
.text:0000B87C                 call    ?Init@CTailInStream@@QAEXXZ ; CTailInStream::Init(void)
.text:0000B881                 mov     ecx, [ebp+var_40] ; this
.text:0000B884                 call    ?SeekToStart@CTailInStream@@QAEJXZ ; CTailInStream::SeekToStart(void)
.text:0000B889                 mov     [ebp+var_44], eax
.text:0000B88C                 cmp     [ebp+var_44], 0
.text:0000B890                 jz      short loc_B8AF
.text:0000B892                 mov     ecx, [ebp+var_44]
.text:0000B895                 mov     [ebp+var_68], ecx
.text:0000B898                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B89F                 lea     ecx, [ebp+var_30]
.text:0000B8A2                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000B8A7                 mov     eax, [ebp+var_68]
.text:0000B8AA                 jmp     loc_B999
.text:0000B8AF ; ---------------------------------------------------------------------------
.text:0000B8AF
.text:0000B8AF loc_B8AF:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+124j
.text:0000B8AF                                         ; CArc::ReOpen(COpenOptions const &)+1A8j
.text:0000B8AF                 mov     [ebp+var_50], 400000h
.text:0000B8B6                 mov     [ebp+var_4C], 0
.text:0000B8BD                 mov     ecx, [ebp+var_10]
.text:0000B8C0                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000B8C5                 mov     [ebp+var_78], eax
.text:0000B8C8                 mov     esi, esp
.text:0000B8CA                 mov     edx, [ebp+arg_0]
.text:0000B8CD                 mov     eax, [edx+38h]
.text:0000B8D0                 push    eax
.text:0000B8D1                 lea     ecx, [ebp+var_50]
.text:0000B8D4                 push    ecx
.text:0000B8D5                 lea     ecx, [ebp+var_30]
.text:0000B8D8                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000B8DD                 push    eax
.text:0000B8DE                 mov     edx, [ebp+var_78]
.text:0000B8E1                 push    edx
.text:0000B8E2                 mov     eax, [ebp+var_78]
.text:0000B8E5                 mov     ecx, [eax]
.text:0000B8E7                 mov     edx, [ecx+0Ch]
.text:0000B8EA                 call    edx
.text:0000B8EC                 cmp     esi, esp
.text:0000B8EE                 call    __RTC_CheckEsp
.text:0000B8F3                 mov     [ebp+var_58], eax
.text:0000B8F6                 cmp     [ebp+var_58], 0
.text:0000B8FA                 jnz     loc_B981
.text:0000B900                 mov     eax, [ebp+var_58]
.text:0000B903                 push    eax             ; __int32
.text:0000B904                 mov     ecx, dword ptr [ebp+var_3C+4]
.text:0000B907                 push    ecx
.text:0000B908                 mov     edx, dword ptr [ebp+var_3C]
.text:0000B90B                 push    edx             ; unsigned __int64
.text:0000B90C                 mov     ecx, [ebp+var_10]
.text:0000B90F                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000B914                 push    eax             ; struct IInArchive *
.text:0000B915                 mov     ecx, [ebp+var_10] ; this
.text:0000B918                 call    ?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z ; CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)
.text:0000B91D                 mov     [ebp+var_5C], eax
.text:0000B920                 cmp     [ebp+var_5C], 0
.text:0000B924                 jz      short loc_B940
.text:0000B926                 mov     eax, [ebp+var_5C]
.text:0000B929                 mov     [ebp+var_6C], eax
.text:0000B92C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B933                 lea     ecx, [ebp+var_30]
.text:0000B936                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000B93B                 mov     eax, [ebp+var_6C]
.text:0000B93E                 jmp     short loc_B999
.text:0000B940 ; ---------------------------------------------------------------------------
.text:0000B940
.text:0000B940 loc_B940:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+23Cj
.text:0000B940                 mov     ecx, [ebp+var_10]
.text:0000B943                 mov     edx, dword ptr [ebp+var_3C]
.text:0000B946                 mov     [ecx+0D0h], edx
.text:0000B94C                 mov     eax, dword ptr [ebp+var_3C+4]
.text:0000B94F                 mov     [ecx+0D4h], eax
.text:0000B955                 mov     ecx, [ebp+var_10]
.text:0000B958                 mov     [ebp+var_7C], ecx
.text:0000B95B                 mov     edx, [ebp+var_7C]
.text:0000B95E                 mov     eax, [ebp+var_7C]
.text:0000B961                 mov     ecx, [edx+0D0h]
.text:0000B967                 or      ecx, [eax+0D4h]
.text:0000B96D                 jz      short loc_B981
.text:0000B96F                 mov     edx, [ebp+arg_0]
.text:0000B972                 mov     eax, [edx+30h]
.text:0000B975                 push    eax
.text:0000B976                 mov     ecx, [ebp+var_10]
.text:0000B979                 add     ecx, 4
.text:0000B97C                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:0000B981
.text:0000B981 loc_B981:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+212j
.text:0000B981                                         ; CArc::ReOpen(COpenOptions const &)+285j
.text:0000B981                 mov     ecx, [ebp+var_58]
.text:0000B984                 mov     [ebp+var_70], ecx
.text:0000B987                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B98E                 lea     ecx, [ebp+var_30]
.text:0000B991                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000B996                 mov     eax, [ebp+var_70]
.text:0000B999
.text:0000B999 loc_B999:                               ; CODE XREF: CArc::ReOpen(COpenOptions const &)+9Aj
.text:0000B999                                         ; CArc::ReOpen(COpenOptions const &)+D0j ...
.text:0000B999                 push    edx
.text:0000B99A                 mov     ecx, ebp
.text:0000B99C                 push    eax
.text:0000B99D                 lea     edx, $LN22_1
.text:0000B9A3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000B9A8                 pop     eax
.text:0000B9A9                 pop     edx
.text:0000B9AA                 mov     ecx, [ebp+var_C]
.text:0000B9AD                 mov     large fs:0, ecx
.text:0000B9B4                 pop     ecx
.text:0000B9B5                 pop     edi
.text:0000B9B6                 pop     esi
.text:0000B9B7                 add     esp, 7Ch
.text:0000B9BA                 cmp     ebp, esp
.text:0000B9BC                 call    __RTC_CheckEsp
.text:0000B9C1                 mov     esp, ebp
.text:0000B9C3                 pop     ebp
.text:0000B9C4                 retn    4
.text:0000B9C4 ?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z endp
.text:0000B9C4
.text:0000B9C4 ; ---------------------------------------------------------------------------
.text:0000B9C7                 align 4
.text:0000B9C8 $LN22_1         dd 3                    ; DATA XREF: CArc::ReOpen(COpenOptions const &)+2B5o
.text:0000B9CC                 dd offset $LN21_1
.text:0000B9D0 $LN21_1         dd 0FFFFFFE4h, 8        ; DATA XREF: .text:0000B9CCo
.text:0000B9D8                 dd offset $LN17_5       ; "fileSize"
.text:0000B9DC                 dd 0FFFFFFD0h, 4
.text:0000B9E4                 dd offset $LN18_7       ; "stream2"
.text:0000B9E8                 dd 0FFFFFFB0h, 8
.text:0000B9F0                 dd offset $LN19_2       ; "maxStartPosition"
.text:0000B9F4 $LN19_2         db 'maxStartPosition',0 ; DATA XREF: .text:0000B9F0o
.text:0000BA05 $LN18_7         db 'stream2',0          ; DATA XREF: .text:0000B9E4o
.text:0000BA0D $LN17_5         db 'fileSize',0         ; DATA XREF: .text:0000B9D8o
.text:0000BA16                 align 4
.text:0000BA18
.text:0000BA18 ; =============== S U B R O U T I N E =======================================
.text:0000BA18
.text:0000BA18 ; Attributes: bp-based frame
.text:0000BA18
.text:0000BA18 ; __int32 __thiscall CArchiveLink::Open3(CArchiveLink *this, struct COpenOptions *, struct IOpenCallbackUI *)
.text:0000BA18                 public ?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z
.text:0000BA18 ?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z proc near
.text:0000BA18
.text:0000BA18 var_C           = dword ptr -0Ch
.text:0000BA18 var_8           = dword ptr -8
.text:0000BA18 var_4           = dword ptr -4
.text:0000BA18 arg_0           = dword ptr  8
.text:0000BA18 arg_4           = dword ptr  0Ch
.text:0000BA18
.text:0000BA18                 push    ebp
.text:0000BA19                 mov     ebp, esp
.text:0000BA1B                 sub     esp, 0Ch
.text:0000BA1E                 push    esi
.text:0000BA1F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000BA26                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BA2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BA34                 mov     [ebp+var_4], ecx
.text:0000BA37                 mov     eax, [ebp+arg_4]
.text:0000BA3A                 push    eax             ; struct IOpenCallbackUI *
.text:0000BA3B                 mov     ecx, [ebp+arg_0]
.text:0000BA3E                 push    ecx             ; struct COpenOptions *
.text:0000BA3F                 mov     ecx, [ebp+var_4] ; this
.text:0000BA42                 call    ?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ; CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)
.text:0000BA47                 mov     [ebp+var_8], eax
.text:0000BA4A                 cmp     [ebp+arg_4], 0
.text:0000BA4E                 jz      short loc_BA74
.text:0000BA50                 mov     edx, [ebp+arg_4]
.text:0000BA53                 mov     eax, [edx]
.text:0000BA55                 mov     esi, esp
.text:0000BA57                 mov     ecx, [ebp+arg_4]
.text:0000BA5A                 mov     edx, [eax+0Ch]
.text:0000BA5D                 call    edx
.text:0000BA5F                 cmp     esi, esp
.text:0000BA61                 call    __RTC_CheckEsp
.text:0000BA66                 mov     [ebp+var_C], eax
.text:0000BA69                 cmp     [ebp+var_C], 0
.text:0000BA6D                 jz      short loc_BA74
.text:0000BA6F                 mov     eax, [ebp+var_C]
.text:0000BA72                 jmp     short loc_BA77
.text:0000BA74 ; ---------------------------------------------------------------------------
.text:0000BA74
.text:0000BA74 loc_BA74:                               ; CODE XREF: CArchiveLink::Open3(COpenOptions &,IOpenCallbackUI *)+36j
.text:0000BA74                                         ; CArchiveLink::Open3(COpenOptions &,IOpenCallbackUI *)+55j
.text:0000BA74                 mov     eax, [ebp+var_8]
.text:0000BA77
.text:0000BA77 loc_BA77:                               ; CODE XREF: CArchiveLink::Open3(COpenOptions &,IOpenCallbackUI *)+5Aj
.text:0000BA77                 pop     esi
.text:0000BA78                 add     esp, 0Ch
.text:0000BA7B                 cmp     ebp, esp
.text:0000BA7D                 call    __RTC_CheckEsp
.text:0000BA82                 mov     esp, ebp
.text:0000BA84                 pop     ebp
.text:0000BA85                 retn    8
.text:0000BA85 ?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z endp
.text:0000BA85
.text:0000BA88
.text:0000BA88 ; =============== S U B R O U T I N E =======================================
.text:0000BA88
.text:0000BA88 ; Attributes: bp-based frame
.text:0000BA88
.text:0000BA88 ; __int32 __thiscall CArchiveLink::ReOpen(CArchiveLink *this, struct COpenOptions *)
.text:0000BA88                 public ?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
.text:0000BA88 ?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z proc near
.text:0000BA88
.text:0000BA88 var_AC          = dword ptr -0ACh
.text:0000BA88 var_A8          = dword ptr -0A8h
.text:0000BA88 var_A4          = dword ptr -0A4h
.text:0000BA88 var_A0          = dword ptr -0A0h
.text:0000BA88 var_9C          = dword ptr -9Ch
.text:0000BA88 var_98          = dword ptr -98h
.text:0000BA88 var_94          = dword ptr -94h
.text:0000BA88 var_90          = dword ptr -90h
.text:0000BA88 var_8C          = dword ptr -8Ch
.text:0000BA88 var_88          = dword ptr -88h
.text:0000BA88 var_84          = dword ptr -84h
.text:0000BA88 var_7C          = byte ptr -7Ch
.text:0000BA88 var_74          = dword ptr -74h
.text:0000BA88 var_6C          = byte ptr -6Ch
.text:0000BA88 var_58          = word ptr -58h
.text:0000BA88 var_44          = byte ptr -44h
.text:0000BA88 var_3C          = dword ptr -3Ch
.text:0000BA88 var_34          = byte ptr -34h
.text:0000BA88 var_20          = byte ptr -20h
.text:0000BA88 var_10          = dword ptr -10h
.text:0000BA88 var_C           = dword ptr -0Ch
.text:0000BA88 var_4           = dword ptr -4
.text:0000BA88 arg_0           = dword ptr  8
.text:0000BA88
.text:0000BA88                 push    ebp
.text:0000BA89                 mov     ebp, esp
.text:0000BA8B                 push    0FFFFFFFFh
.text:0000BA8D                 push    offset __ehhandler$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
.text:0000BA92                 mov     eax, large fs:0
.text:0000BA98                 push    eax
.text:0000BA99                 sub     esp, 0A0h
.text:0000BA9F                 push    esi
.text:0000BAA0                 push    edi
.text:0000BAA1                 push    ecx
.text:0000BAA2                 lea     edi, [ebp+var_AC]
.text:0000BAA8                 mov     ecx, 28h ; '('
.text:0000BAAD                 mov     eax, 0CCCCCCCCh
.text:0000BAB2                 rep stosd
.text:0000BAB4                 pop     ecx
.text:0000BAB5                 mov     eax, dword ptr ds:___security_cookie
.text:0000BABA                 xor     eax, ebp
.text:0000BABC                 push    eax
.text:0000BABD                 lea     eax, [ebp+var_C]
.text:0000BAC0                 mov     large fs:0, eax
.text:0000BAC6                 mov     [ebp+var_10], ecx
.text:0000BAC9                 mov     ecx, [ebp+var_10]
.text:0000BACC                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:0000BAD1                 cmp     eax, 1
.text:0000BAD4                 jbe     short loc_BAE0
.text:0000BAD6                 mov     eax, 80004001h
.text:0000BADB                 jmp     loc_BDAF
.text:0000BAE0 ; ---------------------------------------------------------------------------
.text:0000BAE0
.text:0000BAE0 loc_BAE0:                               ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+4Cj
.text:0000BAE0                 lea     ecx, [ebp+var_20]
.text:0000BAE3                 call    ??0?$CObjectVector@UCOpenType@@@@QAE@XZ ; CObjectVector<COpenType>::CObjectVector<COpenType>(void)
.text:0000BAE8                 mov     [ebp+var_4], 0
.text:0000BAEF                 lea     ecx, [ebp+var_34]
.text:0000BAF2                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:0000BAF7                 mov     byte ptr [ebp+var_4], 1
.text:0000BAFB                 mov     eax, [ebp+arg_0]
.text:0000BAFE                 lea     ecx, [ebp+var_20]
.text:0000BB01                 mov     [eax+28h], ecx
.text:0000BB04                 mov     edx, [ebp+arg_0]
.text:0000BB07                 lea     eax, [ebp+var_34]
.text:0000BB0A                 mov     [edx+2Ch], eax
.text:0000BB0D                 mov     ecx, [ebp+arg_0]
.text:0000BB10                 mov     byte ptr [ecx+44h], 0
.text:0000BB14                 mov     edx, [ebp+arg_0]
.text:0000BB17                 mov     dword ptr [edx+30h], 0
.text:0000BB1E                 mov     ecx, [ebp+var_10]
.text:0000BB21                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:0000BB26                 test    eax, eax
.text:0000BB28                 jnz     short loc_BB64
.text:0000BB2A                 push    0               ; struct IOpenCallbackUI *
.text:0000BB2C                 mov     eax, [ebp+arg_0]
.text:0000BB2F                 push    eax             ; struct COpenOptions *
.text:0000BB30                 mov     ecx, [ebp+var_10] ; this
.text:0000BB33                 call    ?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ; CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)
.text:0000BB38                 mov     [ebp+var_8C], eax
.text:0000BB3E                 mov     byte ptr [ebp+var_4], 0
.text:0000BB42                 lea     ecx, [ebp+var_34]
.text:0000BB45                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000BB4A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000BB51                 lea     ecx, [ebp+var_20]
.text:0000BB54                 call    ??1?$CObjectVector@UCOpenType@@@@QAE@XZ ; CObjectVector<COpenType>::~CObjectVector<COpenType>(void)
.text:0000BB59                 mov     eax, [ebp+var_8C]
.text:0000BB5F                 jmp     loc_BDAF
.text:0000BB64 ; ---------------------------------------------------------------------------
.text:0000BB64
.text:0000BB64 loc_BB64:                               ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+A0j
.text:0000BB64                 push    98h ; 'ÿ'       ; unsigned int
.text:0000BB69                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000BB6E                 add     esp, 4
.text:0000BB71                 mov     [ebp+var_94], eax
.text:0000BB77                 mov     byte ptr [ebp+var_4], 2
.text:0000BB7B                 cmp     [ebp+var_94], 0
.text:0000BB82                 jz      short loc_BB97
.text:0000BB84                 mov     ecx, [ebp+var_94]
.text:0000BB8A                 call    ??0COpenCallbackImp@@QAE@XZ ; COpenCallbackImp::COpenCallbackImp(void)
.text:0000BB8F                 mov     [ebp+var_A8], eax
.text:0000BB95                 jmp     short loc_BBA1
.text:0000BB97 ; ---------------------------------------------------------------------------
.text:0000BB97
.text:0000BB97 loc_BB97:                               ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+FAj
.text:0000BB97                 mov     [ebp+var_A8], 0
.text:0000BBA1
.text:0000BBA1 loc_BBA1:                               ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+10Dj
.text:0000BBA1                 mov     ecx, [ebp+var_A8]
.text:0000BBA7                 mov     [ebp+var_90], ecx
.text:0000BBAD                 mov     byte ptr [ebp+var_4], 1
.text:0000BBB1                 mov     edx, [ebp+var_90]
.text:0000BBB7                 mov     [ebp+var_3C], edx
.text:0000BBBA                 mov     eax, [ebp+var_3C]
.text:0000BBBD                 push    eax
.text:0000BBBE                 lea     ecx, [ebp+var_44]
.text:0000BBC1                 call    ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(IArchiveOpenCallback *)
.text:0000BBC6                 mov     byte ptr [ebp+var_4], 3
.text:0000BBCA                 mov     ecx, [ebp+var_3C]
.text:0000BBCD                 mov     dword ptr [ecx+90h], 0
.text:0000BBD7                 mov     edx, [ebp+arg_0]
.text:0000BBDA                 mov     eax, [edx+38h]
.text:0000BBDD                 push    eax
.text:0000BBDE                 mov     ecx, [ebp+var_3C]
.text:0000BBE1                 add     ecx, 94h ; 'ö'
.text:0000BBE7                 call    ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z ; CMyComPtr<IArchiveOpenCallback>::operator=(IArchiveOpenCallback *)
.text:0000BBEC                 lea     ecx, [ebp+var_58]
.text:0000BBEF                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000BBF4                 mov     byte ptr [ebp+var_4], 4
.text:0000BBF8                 lea     ecx, [ebp+var_6C]
.text:0000BBFB                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000BC00                 mov     byte ptr [ebp+var_4], 5
.text:0000BC04                 lea     ecx, [ebp+var_6C]
.text:0000BC07                 push    ecx             ; struct UString *
.text:0000BC08                 lea     edx, [ebp+var_58]
.text:0000BC0B                 push    edx             ; wchar_t *
.text:0000BC0C                 mov     ecx, [ebp+arg_0]
.text:0000BC0F                 add     ecx, 48h ; 'H'
.text:0000BC12                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000BC17                 push    eax             ; this
.text:0000BC18                 call    ?GetFullPathAndSplit@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@1@Z ; NWindows::NFile::NDir::GetFullPathAndSplit(wchar_t const *,UString &,UString &)
.text:0000BC1D                 lea     eax, [ebp+var_6C]
.text:0000BC20                 push    eax             ; struct UString *
.text:0000BC21                 lea     ecx, [ebp+var_58]
.text:0000BC24                 push    ecx             ; struct UString *
.text:0000BC25                 mov     ecx, [ebp+var_3C] ; this
.text:0000BC28                 call    ?Init@COpenCallbackImp@@QAEXABVUString@@0@Z ; COpenCallbackImp::Init(UString const &,UString const &)
.text:0000BC2D                 mov     byte ptr [ebp+var_4], 4
.text:0000BC31                 lea     ecx, [ebp+var_6C] ; this
.text:0000BC34                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000BC39                 mov     byte ptr [ebp+var_4], 3
.text:0000BC3D                 lea     ecx, [ebp+var_58] ; this
.text:0000BC40                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000BC45                 push    58h ; 'X'       ; unsigned int
.text:0000BC47                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000BC4C                 add     esp, 4
.text:0000BC4F                 mov     [ebp+var_9C], eax
.text:0000BC55                 mov     byte ptr [ebp+var_4], 6
.text:0000BC59                 cmp     [ebp+var_9C], 0
.text:0000BC60                 jz      short loc_BC75
.text:0000BC62                 mov     ecx, [ebp+var_9C] ; this
.text:0000BC68                 call    ??0CInFileStream@@QAE@XZ ; CInFileStream::CInFileStream(void)
.text:0000BC6D                 mov     [ebp+var_AC], eax
.text:0000BC73                 jmp     short loc_BC7F
.text:0000BC75 ; ---------------------------------------------------------------------------
.text:0000BC75
.text:0000BC75 loc_BC75:                               ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+1D8j
.text:0000BC75                 mov     [ebp+var_AC], 0
.text:0000BC7F
.text:0000BC7F loc_BC7F:                               ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+1EBj
.text:0000BC7F                 mov     edx, [ebp+var_AC]
.text:0000BC85                 mov     [ebp+var_98], edx
.text:0000BC8B                 mov     byte ptr [ebp+var_4], 3
.text:0000BC8F                 mov     eax, [ebp+var_98]
.text:0000BC95                 mov     [ebp+var_74], eax
.text:0000BC98                 mov     ecx, [ebp+var_74]
.text:0000BC9B                 push    ecx
.text:0000BC9C                 lea     ecx, [ebp+var_7C]
.text:0000BC9F                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(IInStream *)
.text:0000BCA4                 mov     byte ptr [ebp+var_4], 7
.text:0000BCA8                 mov     ecx, [ebp+arg_0]
.text:0000BCAB                 add     ecx, 48h ; 'H'
.text:0000BCAE                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000BCB3                 push    eax             ; wchar_t *
.text:0000BCB4                 mov     ecx, [ebp+var_74] ; this
.text:0000BCB7                 call    ?Open@CInFileStream@@QAE_NPB_W@Z ; CInFileStream::Open(wchar_t const *)
.text:0000BCBC                 movzx   edx, al
.text:0000BCBF                 test    edx, edx
.text:0000BCC1                 jnz     short loc_BD16
.text:0000BCC3                 mov     esi, esp
.text:0000BCC5                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000BCCB                 cmp     esi, esp
.text:0000BCCD                 call    __RTC_CheckEsp
.text:0000BCD2                 mov     [ebp+var_A0], eax
.text:0000BCD8                 mov     byte ptr [ebp+var_4], 3
.text:0000BCDC                 lea     ecx, [ebp+var_7C]
.text:0000BCDF                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000BCE4                 mov     byte ptr [ebp+var_4], 1
.text:0000BCE8                 lea     ecx, [ebp+var_44]
.text:0000BCEB                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:0000BCF0                 mov     byte ptr [ebp+var_4], 0
.text:0000BCF4                 lea     ecx, [ebp+var_34]
.text:0000BCF7                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000BCFC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000BD03                 lea     ecx, [ebp+var_20]
.text:0000BD06                 call    ??1?$CObjectVector@UCOpenType@@@@QAE@XZ ; CObjectVector<COpenType>::~CObjectVector<COpenType>(void)
.text:0000BD0B                 mov     eax, [ebp+var_A0]
.text:0000BD11                 jmp     loc_BDAF
.text:0000BD16 ; ---------------------------------------------------------------------------
.text:0000BD16
.text:0000BD16 loc_BD16:                               ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+239j
.text:0000BD16                 lea     ecx, [ebp+var_7C]
.text:0000BD19                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000BD1E                 mov     ecx, [ebp+arg_0]
.text:0000BD21                 mov     [ecx+30h], eax
.text:0000BD24                 push    0
.text:0000BD26                 mov     ecx, [ebp+var_10]
.text:0000BD29                 call    ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:0000BD2E                 mov     [ebp+var_84], eax
.text:0000BD34                 mov     edx, [ebp+arg_0]
.text:0000BD37                 push    edx             ; struct COpenOptions *
.text:0000BD38                 mov     ecx, [ebp+var_84] ; this
.text:0000BD3E                 call    ?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z ; CArc::ReOpen(COpenOptions const &)
.text:0000BD43                 mov     [ebp+var_88], eax
.text:0000BD49                 mov     eax, [ebp+var_10]
.text:0000BD4C                 mov     ecx, [ebp+var_3C]
.text:0000BD4F                 mov     dl, [ecx+8Ch]
.text:0000BD55                 mov     [eax+21h], dl
.text:0000BD58                 xor     eax, eax
.text:0000BD5A                 cmp     [ebp+var_88], 0
.text:0000BD61                 setz    al
.text:0000BD64                 mov     ecx, [ebp+var_10]
.text:0000BD67                 mov     [ecx+20h], al
.text:0000BD6A                 mov     edx, [ebp+var_88]
.text:0000BD70                 mov     [ebp+var_A4], edx
.text:0000BD76                 mov     byte ptr [ebp+var_4], 3
.text:0000BD7A                 lea     ecx, [ebp+var_7C]
.text:0000BD7D                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000BD82                 mov     byte ptr [ebp+var_4], 1
.text:0000BD86                 lea     ecx, [ebp+var_44]
.text:0000BD89                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:0000BD8E                 mov     byte ptr [ebp+var_4], 0
.text:0000BD92                 lea     ecx, [ebp+var_34]
.text:0000BD95                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000BD9A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000BDA1                 lea     ecx, [ebp+var_20]
.text:0000BDA4                 call    ??1?$CObjectVector@UCOpenType@@@@QAE@XZ ; CObjectVector<COpenType>::~CObjectVector<COpenType>(void)
.text:0000BDA9                 mov     eax, [ebp+var_A4]
.text:0000BDAF
.text:0000BDAF loc_BDAF:                               ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+53j
.text:0000BDAF                                         ; CArchiveLink::ReOpen(COpenOptions &)+D7j ...
.text:0000BDAF                 push    edx
.text:0000BDB0                 mov     ecx, ebp
.text:0000BDB2                 push    eax
.text:0000BDB3                 lea     edx, $LN26_0
.text:0000BDB9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000BDBE                 pop     eax
.text:0000BDBF                 pop     edx
.text:0000BDC0                 mov     ecx, [ebp+var_C]
.text:0000BDC3                 mov     large fs:0, ecx
.text:0000BDCA                 pop     ecx
.text:0000BDCB                 pop     edi
.text:0000BDCC                 pop     esi
.text:0000BDCD                 add     esp, 0ACh
.text:0000BDD3                 cmp     ebp, esp
.text:0000BDD5                 call    __RTC_CheckEsp
.text:0000BDDA                 mov     esp, ebp
.text:0000BDDC                 pop     ebp
.text:0000BDDD                 retn    4
.text:0000BDDD ?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z endp
.text:0000BDDD
.text:0000BDDD ; ---------------------------------------------------------------------------
.text:0000BDE0 $LN26_0         dd 6                    ; DATA XREF: CArchiveLink::ReOpen(COpenOptions &)+32Bo
.text:0000BDE4                 dd offset $LN25_0
.text:0000BDE8 $LN25_0         dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:0000BDE4o
.text:0000BDF0                 dd offset $LN18_8       ; "inc"
.text:0000BDF4                 db 0CCh
.text:0000BDF5                 db 3 dup(0FFh)
.text:0000BDF8                 dd 0Ch
.text:0000BDFC                 dd offset $LN19_3       ; "excl"
.text:0000BE00                 dd 0FFFFFFBCh, 4
.text:0000BE08                 dd offset $LN20_0       ; "openCallbackNew"
.text:0000BE0C                 dd 0FFFFFFA8h, 0Ch
.text:0000BE14                 dd offset $LN21_2       ; "dirPrefix"
.text:0000BE18                 dd 0FFFFFF94h, 0Ch
.text:0000BE20                 dd offset $LN22_2       ; "fileName"
.text:0000BE24                 dd 0FFFFFF84h, 4
.text:0000BE2C                 dd offset $LN23_1       ; "stream"
.text:0000BE30 $LN23_1         db 'stream',0           ; DATA XREF: .text:0000BE2Co
.text:0000BE37 $LN22_2         db 'fileName',0         ; DATA XREF: .text:0000BE20o
.text:0000BE40 $LN21_2         db 'dirPrefix',0        ; DATA XREF: .text:0000BE14o
.text:0000BE4A $LN20_0         db 'openCallbackNew',0  ; DATA XREF: .text:0000BE08o
.text:0000BE5A $LN19_3         db 'excl',0             ; DATA XREF: .text:0000BDFCo
.text:0000BE5F $LN18_8         db 'inc',0              ; DATA XREF: .text:0000BDF0o
.text:0000BE63                 align 8
.text:0000BE68
.text:0000BE68 ; =============== S U B R O U T I N E =======================================
.text:0000BE68
.text:0000BE68 ; Attributes: bp-based frame
.text:0000BE68
.text:0000BE68 ; bool __stdcall ParseComplexSize(const wchar_t *, unsigned __int64 *)
.text:0000BE68                 public ?ParseComplexSize@@YG_NPB_WAA_K@Z
.text:0000BE68 ?ParseComplexSize@@YG_NPB_WAA_K@Z proc near
.text:0000BE68                                         ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+A5p
.text:0000BE68
.text:0000BE68 var_24          = dword ptr -24h
.text:0000BE68 var_20          = dword ptr -20h
.text:0000BE68 var_1C          = dword ptr -1Ch
.text:0000BE68 var_18          = dword ptr -18h
.text:0000BE68 var_14          = dword ptr -14h
.text:0000BE68 var_10          = dword ptr -10h
.text:0000BE68 var_C           = dword ptr -0Ch
.text:0000BE68 var_8           = dword ptr -8
.text:0000BE68 var_4           = dword ptr -4
.text:0000BE68 arg_0           = dword ptr  8
.text:0000BE68 arg_4           = dword ptr  0Ch
.text:0000BE68
.text:0000BE68                 push    ebp
.text:0000BE69                 mov     ebp, esp
.text:0000BE6B                 sub     esp, 24h
.text:0000BE6E                 mov     eax, 0CCCCCCCCh
.text:0000BE73                 mov     [ebp+var_24], eax
.text:0000BE76                 mov     [ebp+var_20], eax
.text:0000BE79                 mov     [ebp+var_1C], eax
.text:0000BE7C                 mov     [ebp+var_18], eax
.text:0000BE7F                 mov     [ebp+var_14], eax
.text:0000BE82                 mov     [ebp+var_10], eax
.text:0000BE85                 mov     [ebp+var_C], eax
.text:0000BE88                 mov     [ebp+var_8], eax
.text:0000BE8B                 mov     [ebp+var_4], eax
.text:0000BE8E                 mov     eax, [ebp+arg_4]
.text:0000BE91                 mov     dword ptr [eax], 0
.text:0000BE97                 mov     dword ptr [eax+4], 0
.text:0000BE9E                 lea     ecx, [ebp+var_8]
.text:0000BEA1                 push    ecx             ; wchar_t **
.text:0000BEA2                 mov     edx, [ebp+arg_0]
.text:0000BEA5                 push    edx             ; wchar_t *
.text:0000BEA6                 call    ?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z ; ConvertStringToUInt64(wchar_t const *,wchar_t const * *)
.text:0000BEAB                 mov     [ebp+var_14], eax
.text:0000BEAE                 mov     [ebp+var_10], edx
.text:0000BEB1                 mov     eax, [ebp+var_8]
.text:0000BEB4                 cmp     eax, [ebp+arg_0]
.text:0000BEB7                 jnz     short loc_BEC0
.text:0000BEB9                 xor     al, al
.text:0000BEBB                 jmp     loc_BFA5
.text:0000BEC0 ; ---------------------------------------------------------------------------
.text:0000BEC0
.text:0000BEC0 loc_BEC0:                               ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+4Fj
.text:0000BEC0                 mov     ecx, [ebp+var_8]
.text:0000BEC3                 movzx   edx, word ptr [ecx]
.text:0000BEC6                 test    edx, edx
.text:0000BEC8                 jnz     short loc_BEDF
.text:0000BECA                 mov     eax, [ebp+arg_4]
.text:0000BECD                 mov     ecx, [ebp+var_14]
.text:0000BED0                 mov     [eax], ecx
.text:0000BED2                 mov     edx, [ebp+var_10]
.text:0000BED5                 mov     [eax+4], edx
.text:0000BED8                 mov     al, 1
.text:0000BEDA                 jmp     loc_BFA5
.text:0000BEDF ; ---------------------------------------------------------------------------
.text:0000BEDF
.text:0000BEDF loc_BEDF:                               ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+60j
.text:0000BEDF                 mov     eax, [ebp+var_8]
.text:0000BEE2                 movzx   ecx, word ptr [eax+2]
.text:0000BEE6                 test    ecx, ecx
.text:0000BEE8                 jz      short loc_BEF1
.text:0000BEEA                 xor     al, al
.text:0000BEEC                 jmp     loc_BFA5
.text:0000BEF1 ; ---------------------------------------------------------------------------
.text:0000BEF1
.text:0000BEF1 loc_BEF1:                               ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+80j
.text:0000BEF1                 mov     edx, [ebp+var_8]
.text:0000BEF4                 movzx   eax, word ptr [edx]
.text:0000BEF7                 push    eax             ; wchar_t
.text:0000BEF8                 call    ?MyCharLower_Ascii@@YG_W_W@Z ; MyCharLower_Ascii(wchar_t)
.text:0000BEFD                 movzx   ecx, ax
.text:0000BF00                 mov     [ebp+var_1C], ecx
.text:0000BF03                 mov     edx, [ebp+var_1C]
.text:0000BF06                 sub     edx, 62h ; 'b'
.text:0000BF09                 mov     [ebp+var_1C], edx
.text:0000BF0C                 cmp     [ebp+var_1C], 12h ; switch 19 cases
.text:0000BF10                 ja      short $LN2_4    ; jumptable 0000BF1C default case
.text:0000BF12                 mov     eax, [ebp+var_1C]
.text:0000BF15                 movzx   ecx, ds:$LN15_1[eax]
.text:0000BF1C                 jmp     ds:$LN20_1[ecx*4] ; switch jump
.text:0000BF23 ; ---------------------------------------------------------------------------
.text:0000BF23
.text:0000BF23 $LN7_8:                                 ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+B4j
.text:0000BF23                                         ; DATA XREF: .text:$LN20_1o
.text:0000BF23                 mov     edx, [ebp+arg_4] ; jumptable 0000BF1C case 0
.text:0000BF26                 mov     eax, [ebp+var_14]
.text:0000BF29                 mov     [edx], eax
.text:0000BF2B                 mov     ecx, [ebp+var_10]
.text:0000BF2E                 mov     [edx+4], ecx
.text:0000BF31                 mov     al, 1
.text:0000BF33                 jmp     short loc_BFA5
.text:0000BF35 ; ---------------------------------------------------------------------------
.text:0000BF35
.text:0000BF35 $LN6_6:                                 ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+B4j
.text:0000BF35                                         ; DATA XREF: .text:$LN20_1o
.text:0000BF35                 mov     [ebp+var_18], 0Ah ; jumptable 0000BF1C case 9
.text:0000BF3C                 jmp     short loc_BF5D
.text:0000BF3E ; ---------------------------------------------------------------------------
.text:0000BF3E
.text:0000BF3E $LN5_5:                                 ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+B4j
.text:0000BF3E                                         ; DATA XREF: .text:$LN20_1o
.text:0000BF3E                 mov     [ebp+var_18], 14h ; jumptable 0000BF1C case 11
.text:0000BF45                 jmp     short loc_BF5D
.text:0000BF47 ; ---------------------------------------------------------------------------
.text:0000BF47
.text:0000BF47 $LN4_4:                                 ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+B4j
.text:0000BF47                                         ; DATA XREF: .text:$LN20_1o
.text:0000BF47                 mov     [ebp+var_18], 1Eh ; jumptable 0000BF1C case 5
.text:0000BF4E                 jmp     short loc_BF5D
.text:0000BF50 ; ---------------------------------------------------------------------------
.text:0000BF50
.text:0000BF50 $LN3_3:                                 ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+B4j
.text:0000BF50                                         ; DATA XREF: .text:$LN20_1o
.text:0000BF50                 mov     [ebp+var_18], 28h ; '(' ; jumptable 0000BF1C case 18
.text:0000BF57                 jmp     short loc_BF5D
.text:0000BF59 ; ---------------------------------------------------------------------------
.text:0000BF59
.text:0000BF59 $LN2_4:                                 ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+A8j
.text:0000BF59                                         ; ParseComplexSize(wchar_t const *,unsigned __int64 &)+B4j
.text:0000BF59                                         ; DATA XREF: ...
.text:0000BF59                 xor     al, al          ; jumptable 0000BF1C default case
.text:0000BF5B                 jmp     short loc_BFA5
.text:0000BF5D ; ---------------------------------------------------------------------------
.text:0000BF5D
.text:0000BF5D loc_BF5D:                               ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+D4j
.text:0000BF5D                                         ; ParseComplexSize(wchar_t const *,unsigned __int64 &)+DDj ...
.text:0000BF5D                 mov     ecx, 40h ; '@'
.text:0000BF62                 sub     ecx, [ebp+var_18]
.text:0000BF65                 mov     eax, 1
.text:0000BF6A                 xor     edx, edx
.text:0000BF6C                 call    __allshl
.text:0000BF71                 mov     [ebp+var_24], eax
.text:0000BF74                 mov     [ebp+var_20], edx
.text:0000BF77                 mov     edx, [ebp+var_10]
.text:0000BF7A                 cmp     edx, [ebp+var_20]
.text:0000BF7D                 jb      short loc_BF8D
.text:0000BF7F                 ja      short loc_BF89
.text:0000BF81                 mov     eax, [ebp+var_14]
.text:0000BF84                 cmp     eax, [ebp+var_24]
.text:0000BF87                 jb      short loc_BF8D
.text:0000BF89
.text:0000BF89 loc_BF89:                               ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+117j
.text:0000BF89                 xor     al, al
.text:0000BF8B                 jmp     short loc_BFA5
.text:0000BF8D ; ---------------------------------------------------------------------------
.text:0000BF8D
.text:0000BF8D loc_BF8D:                               ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+115j
.text:0000BF8D                                         ; ParseComplexSize(wchar_t const *,unsigned __int64 &)+11Fj
.text:0000BF8D                 mov     eax, [ebp+var_14]
.text:0000BF90                 mov     edx, [ebp+var_10]
.text:0000BF93                 mov     ecx, [ebp+var_18]
.text:0000BF96                 call    __allshl
.text:0000BF9B                 mov     ecx, [ebp+arg_4]
.text:0000BF9E                 mov     [ecx], eax
.text:0000BFA0                 mov     [ecx+4], edx
.text:0000BFA3                 mov     al, 1
.text:0000BFA5
.text:0000BFA5 loc_BFA5:                               ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+53j
.text:0000BFA5                                         ; ParseComplexSize(wchar_t const *,unsigned __int64 &)+72j ...
.text:0000BFA5                 push    edx
.text:0000BFA6                 mov     ecx, ebp
.text:0000BFA8                 push    eax
.text:0000BFA9                 lea     edx, $LN19_4
.text:0000BFAF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000BFB4                 pop     eax
.text:0000BFB5                 pop     edx
.text:0000BFB6                 add     esp, 24h
.text:0000BFB9                 cmp     ebp, esp
.text:0000BFBB                 call    __RTC_CheckEsp
.text:0000BFC0                 mov     esp, ebp
.text:0000BFC2                 pop     ebp
.text:0000BFC3                 retn    8
.text:0000BFC3 ?ParseComplexSize@@YG_NPB_WAA_K@Z endp
.text:0000BFC3
.text:0000BFC3 ; ---------------------------------------------------------------------------
.text:0000BFC6                 align 4
.text:0000BFC8 $LN19_4         dd 1                    ; DATA XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+141o
.text:0000BFCC                 dd offset $LN18_9
.text:0000BFD0 $LN18_9         dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000BFCCo
.text:0000BFD8                 dd offset $LN17_6
.text:0000BFDC $LN17_6         dd 646E65h              ; DATA XREF: .text:0000BFD8o
.text:0000BFE0 $LN20_1         dd offset $LN7_8        ; DATA XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+B4r
.text:0000BFE0                 dd offset $LN4_4        ; jump table for switch statement
.text:0000BFE0                 dd offset $LN6_6
.text:0000BFE0                 dd offset $LN5_5
.text:0000BFE0                 dd offset $LN3_3
.text:0000BFE0                 dd offset $LN2_4
.text:0000BFF8 $LN15_1         db      0,     5,     5,     5
.text:0000BFF8                                         ; DATA XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+ADr
.text:0000BFF8                 db      5,     1,     5,     5 ; indirect table for switch statement
.text:0000BFF8                 db      5,     2,     5,     3
.text:0000BFF8                 db      5,     5,     5,     5
.text:0000BFF8                 db      5,     5,     4
.text:0000C00B                 db 0Dh dup(0CCh)
.text:0000C018
.text:0000C018 ; =============== S U B R O U T I N E =======================================
.text:0000C018
.text:0000C018 ; Attributes: bp-based frame
.text:0000C018
.text:0000C018 ; bool __stdcall ParseType(struct CCodecs *, const struct UString *, struct COpenType *)
.text:0000C018                 public ?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z
.text:0000C018 ?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z proc near
.text:0000C018                                         ; CODE XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+D0p
.text:0000C018
.text:0000C018 var_60          = dword ptr -60h
.text:0000C018 var_5C          = dword ptr -5Ch
.text:0000C018 var_56          = byte ptr -56h
.text:0000C018 var_55          = byte ptr -55h
.text:0000C018 var_54          = byte ptr -54h
.text:0000C018 var_53          = byte ptr -53h
.text:0000C018 var_52          = byte ptr -52h
.text:0000C018 var_51          = byte ptr -51h
.text:0000C018 var_50          = byte ptr -50h
.text:0000C018 var_40          = byte ptr -40h
.text:0000C018 var_30          = dword ptr -30h
.text:0000C018 var_2C          = dword ptr -2Ch
.text:0000C018 var_28          = dword ptr -28h
.text:0000C018 var_20          = byte ptr -20h
.text:0000C018 var_10          = dword ptr -10h
.text:0000C018 var_C           = dword ptr -0Ch
.text:0000C018 var_4           = dword ptr -4
.text:0000C018 arg_0           = dword ptr  8
.text:0000C018 arg_4           = dword ptr  0Ch
.text:0000C018 arg_8           = dword ptr  10h
.text:0000C018
.text:0000C018                 push    ebp
.text:0000C019                 mov     ebp, esp
.text:0000C01B                 push    0FFFFFFFFh
.text:0000C01D                 push    offset __ehhandler$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z
.text:0000C022                 mov     eax, large fs:0
.text:0000C028                 push    eax
.text:0000C029                 sub     esp, 54h
.text:0000C02C                 push    edi
.text:0000C02D                 lea     edi, [ebp+var_60]
.text:0000C030                 mov     ecx, 15h
.text:0000C035                 mov     eax, 0CCCCCCCCh
.text:0000C03A                 rep stosd
.text:0000C03C                 mov     eax, dword ptr ds:___security_cookie
.text:0000C041                 xor     eax, ebp
.text:0000C043                 push    eax
.text:0000C044                 lea     eax, [ebp+var_C]
.text:0000C047                 mov     large fs:0, eax
.text:0000C04D                 push    3Ah ; ':'       ; wchar_t
.text:0000C04F                 mov     ecx, [ebp+arg_4] ; this
.text:0000C052                 call    ?Find@UString@@QBEH_W@Z ; UString::Find(wchar_t)
.text:0000C057                 mov     [ebp+var_10], eax
.text:0000C05A                 lea     ecx, [ebp+var_20]
.text:0000C05D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000C062                 mov     [ebp+var_4], 0
.text:0000C069                 cmp     [ebp+var_10], 0
.text:0000C06D                 jge     short loc_C088
.text:0000C06F                 mov     eax, [ebp+arg_4]
.text:0000C072                 push    eax
.text:0000C073                 lea     ecx, [ebp+var_20]
.text:0000C076                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000C07B                 mov     ecx, [ebp+arg_4] ; this
.text:0000C07E                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000C083                 mov     [ebp+var_10], eax
.text:0000C086                 jmp     short loc_C0C6
.text:0000C088 ; ---------------------------------------------------------------------------
.text:0000C088
.text:0000C088 loc_C088:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+55j
.text:0000C088                 mov     ecx, [ebp+var_10]
.text:0000C08B                 push    ecx
.text:0000C08C                 lea     edx, [ebp+var_50]
.text:0000C08F                 push    edx
.text:0000C090                 mov     ecx, [ebp+arg_4]
.text:0000C093                 call    ?Left@UString@@QBE?AV1@I@Z ; UString::Left(uint)
.text:0000C098                 mov     [ebp+var_5C], eax
.text:0000C09B                 mov     eax, [ebp+var_5C]
.text:0000C09E                 mov     [ebp+var_60], eax
.text:0000C0A1                 mov     byte ptr [ebp+var_4], 1
.text:0000C0A5                 mov     ecx, [ebp+var_60]
.text:0000C0A8                 push    ecx
.text:0000C0A9                 lea     ecx, [ebp+var_20]
.text:0000C0AC                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000C0B1                 mov     byte ptr [ebp+var_4], 0
.text:0000C0B5                 lea     ecx, [ebp+var_50] ; this
.text:0000C0B8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C0BD                 mov     edx, [ebp+var_10]
.text:0000C0C0                 add     edx, 1
.text:0000C0C3                 mov     [ebp+var_10], edx
.text:0000C0C6
.text:0000C0C6 loc_C0C6:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+6Ej
.text:0000C0C6                 lea     eax, [ebp+var_20]
.text:0000C0C9                 push    eax             ; struct UString *
.text:0000C0CA                 mov     ecx, [ebp+arg_0] ; this
.text:0000C0CD                 call    ?FindFormatForArchiveType@CCodecs@@QBEHABVUString@@@Z ; CCodecs::FindFormatForArchiveType(UString const &)
.text:0000C0D2                 mov     [ebp+var_28], eax
.text:0000C0D5                 mov     ecx, [ebp+arg_8]
.text:0000C0D8                 mov     byte ptr [ecx+10h], 0
.text:0000C0DC                 cmp     [ebp+var_28], 0
.text:0000C0E0                 jge     loc_C189
.text:0000C0E6                 lea     ecx, [ebp+var_20]
.text:0000C0E9                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000C0EE                 movzx   edx, word ptr [eax]
.text:0000C0F1                 cmp     edx, 2Ah ; '*'
.text:0000C0F4                 jnz     short loc_C123
.text:0000C0F6                 lea     ecx, [ebp+var_20]
.text:0000C0F9                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000C0FE                 movzx   eax, word ptr [eax+2]
.text:0000C102                 test    eax, eax
.text:0000C104                 jz      short loc_C121
.text:0000C106                 mov     [ebp+var_51], 0
.text:0000C10A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C111                 lea     ecx, [ebp+var_20] ; this
.text:0000C114                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C119                 mov     al, [ebp+var_51]
.text:0000C11C                 jmp     loc_C280
.text:0000C121 ; ---------------------------------------------------------------------------
.text:0000C121
.text:0000C121 loc_C121:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+ECj
.text:0000C121                 jmp     short loc_C189
.text:0000C123 ; ---------------------------------------------------------------------------
.text:0000C123
.text:0000C123 loc_C123:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+DCj
.text:0000C123                 lea     ecx, [ebp+var_20]
.text:0000C126                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000C12B                 movzx   ecx, word ptr [eax]
.text:0000C12E                 cmp     ecx, 23h ; '#'
.text:0000C131                 jnz     short loc_C16E
.text:0000C133                 lea     ecx, [ebp+var_20]
.text:0000C136                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000C13B                 movzx   edx, word ptr [eax+2]
.text:0000C13F                 test    edx, edx
.text:0000C141                 jz      short loc_C15E
.text:0000C143                 mov     [ebp+var_52], 0
.text:0000C147                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C14E                 lea     ecx, [ebp+var_20] ; this
.text:0000C151                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C156                 mov     al, [ebp+var_52]
.text:0000C159                 jmp     loc_C280
.text:0000C15E ; ---------------------------------------------------------------------------
.text:0000C15E
.text:0000C15E loc_C15E:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+129j
.text:0000C15E                 mov     eax, [ebp+arg_8]
.text:0000C161                 mov     byte ptr [eax+11h], 0
.text:0000C165                 mov     ecx, [ebp+arg_8]
.text:0000C168                 mov     byte ptr [ecx+12h], 1
.text:0000C16C                 jmp     short loc_C189
.text:0000C16E ; ---------------------------------------------------------------------------
.text:0000C16E
.text:0000C16E loc_C16E:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+119j
.text:0000C16E                 mov     [ebp+var_53], 0
.text:0000C172                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C179                 lea     ecx, [ebp+var_20] ; this
.text:0000C17C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C181                 mov     al, [ebp+var_53]
.text:0000C184                 jmp     loc_C280
.text:0000C189 ; ---------------------------------------------------------------------------
.text:0000C189
.text:0000C189 loc_C189:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+C8j
.text:0000C189                                         ; ParseType(CCodecs &,UString const &,COpenType &):loc_C121j ...
.text:0000C189                 mov     edx, [ebp+arg_8]
.text:0000C18C                 mov     eax, [ebp+var_28]
.text:0000C18F                 mov     [edx], eax
.text:0000C191                 mov     ecx, [ebp+var_10]
.text:0000C194                 mov     [ebp+var_2C], ecx
.text:0000C197
.text:0000C197 loc_C197:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+24Dj
.text:0000C197                 mov     ecx, [ebp+arg_4] ; this
.text:0000C19A                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000C19F                 cmp     [ebp+var_2C], eax
.text:0000C1A2                 jnb     loc_C26A
.text:0000C1A8                 mov     edx, [ebp+var_2C]
.text:0000C1AB                 push    edx             ; unsigned int
.text:0000C1AC                 push    3Ah ; ':'       ; wchar_t
.text:0000C1AE                 mov     ecx, [ebp+arg_4] ; this
.text:0000C1B1                 call    ?Find@UString@@QBEH_WI@Z ; UString::Find(wchar_t,uint)
.text:0000C1B6                 mov     [ebp+var_30], eax
.text:0000C1B9                 cmp     [ebp+var_30], 0
.text:0000C1BD                 jge     short loc_C1CA
.text:0000C1BF                 mov     ecx, [ebp+arg_4] ; this
.text:0000C1C2                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000C1C7                 mov     [ebp+var_30], eax
.text:0000C1CA
.text:0000C1CA loc_C1CA:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+1A5j
.text:0000C1CA                 mov     eax, [ebp+var_30]
.text:0000C1CD                 sub     eax, [ebp+var_2C]
.text:0000C1D0                 push    eax
.text:0000C1D1                 mov     ecx, [ebp+var_2C]
.text:0000C1D4                 push    ecx
.text:0000C1D5                 lea     edx, [ebp+var_40]
.text:0000C1D8                 push    edx
.text:0000C1D9                 mov     ecx, [ebp+arg_4]
.text:0000C1DC                 call    ?Mid@UString@@QBE?AV1@II@Z ; UString::Mid(uint,uint)
.text:0000C1E1                 mov     byte ptr [ebp+var_4], 2
.text:0000C1E5                 lea     ecx, [ebp+var_40] ; this
.text:0000C1E8                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000C1ED                 movzx   eax, al
.text:0000C1F0                 test    eax, eax
.text:0000C1F2                 jz      short loc_C218
.text:0000C1F4                 mov     [ebp+var_54], 0
.text:0000C1F8                 mov     byte ptr [ebp+var_4], 0
.text:0000C1FC                 lea     ecx, [ebp+var_40] ; this
.text:0000C1FF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C204                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C20B                 lea     ecx, [ebp+var_20] ; this
.text:0000C20E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C213                 mov     al, [ebp+var_54]
.text:0000C216                 jmp     short loc_C280
.text:0000C218 ; ---------------------------------------------------------------------------
.text:0000C218
.text:0000C218 loc_C218:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+1DAj
.text:0000C218                 mov     ecx, [ebp+arg_8]
.text:0000C21B                 push    ecx             ; int
.text:0000C21C                 lea     edx, [ebp+var_40]
.text:0000C21F                 push    edx             ; UString *
.text:0000C220                 call    ?ParseTypeParams@@YG_NABVUString@@AAUCOpenType@@@Z ; ParseTypeParams(UString const &,COpenType &)
.text:0000C225                 movzx   eax, al
.text:0000C228                 test    eax, eax
.text:0000C22A                 jnz     short loc_C250
.text:0000C22C                 mov     [ebp+var_55], 0
.text:0000C230                 mov     byte ptr [ebp+var_4], 0
.text:0000C234                 lea     ecx, [ebp+var_40] ; this
.text:0000C237                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C23C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C243                 lea     ecx, [ebp+var_20] ; this
.text:0000C246                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C24B                 mov     al, [ebp+var_55]
.text:0000C24E                 jmp     short loc_C280
.text:0000C250 ; ---------------------------------------------------------------------------
.text:0000C250
.text:0000C250 loc_C250:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+212j
.text:0000C250                 mov     ecx, [ebp+var_30]
.text:0000C253                 add     ecx, 1
.text:0000C256                 mov     [ebp+var_2C], ecx
.text:0000C259                 mov     byte ptr [ebp+var_4], 0
.text:0000C25D                 lea     ecx, [ebp+var_40] ; this
.text:0000C260                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C265                 jmp     loc_C197
.text:0000C26A ; ---------------------------------------------------------------------------
.text:0000C26A
.text:0000C26A loc_C26A:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+18Aj
.text:0000C26A                 mov     [ebp+var_56], 1
.text:0000C26E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C275                 lea     ecx, [ebp+var_20] ; this
.text:0000C278                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C27D                 mov     al, [ebp+var_56]
.text:0000C280
.text:0000C280 loc_C280:                               ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+104j
.text:0000C280                                         ; ParseType(CCodecs &,UString const &,COpenType &)+141j ...
.text:0000C280                 push    edx
.text:0000C281                 mov     ecx, ebp
.text:0000C283                 push    eax
.text:0000C284                 lea     edx, $LN24_0
.text:0000C28A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000C28F                 pop     eax
.text:0000C290                 pop     edx
.text:0000C291                 mov     ecx, [ebp+var_C]
.text:0000C294                 mov     large fs:0, ecx
.text:0000C29B                 pop     ecx
.text:0000C29C                 pop     edi
.text:0000C29D                 add     esp, 60h
.text:0000C2A0                 cmp     ebp, esp
.text:0000C2A2                 call    __RTC_CheckEsp
.text:0000C2A7                 mov     esp, ebp
.text:0000C2A9                 pop     ebp
.text:0000C2AA                 retn    0Ch
.text:0000C2AA ?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z endp
.text:0000C2AA
.text:0000C2AA ; ---------------------------------------------------------------------------
.text:0000C2AD                 align 10h
.text:0000C2B0 $LN24_0         dd 2                    ; DATA XREF: ParseType(CCodecs &,UString const &,COpenType &)+26Co
.text:0000C2B4                 dd offset $LN23_2
.text:0000C2B8 $LN23_2         dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:0000C2B4o
.text:0000C2C0                 dd offset $LN20_2       ; "name"
.text:0000C2C4                 dd 0FFFFFFC0h, 0Ch
.text:0000C2CC                 dd offset $LN21_3       ; "name"
.text:0000C2D0 $LN21_3         db 'name',0             ; DATA XREF: .text:0000C2CCo
.text:0000C2D5 $LN20_2         db 'name',0             ; DATA XREF: .text:0000C2C0o
.text:0000C2DA                 db 0Eh dup(0CCh)
.text:0000C2E8
.text:0000C2E8 ; =============== S U B R O U T I N E =======================================
.text:0000C2E8
.text:0000C2E8 ; Attributes: bp-based frame
.text:0000C2E8
.text:0000C2E8 ; int __stdcall ParseTypeParams(UString *, int)
.text:0000C2E8 ?ParseTypeParams@@YG_NABVUString@@AAUCOpenType@@@Z proc near
.text:0000C2E8                                         ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+208p
.text:0000C2E8
.text:0000C2E8 var_14          = dword ptr -14h
.text:0000C2E8 var_10          = dword ptr -10h
.text:0000C2E8 var_C           = qword ptr -0Ch
.text:0000C2E8 var_4           = dword ptr -4
.text:0000C2E8 arg_0           = dword ptr  8
.text:0000C2E8 arg_4           = dword ptr  0Ch
.text:0000C2E8
.text:0000C2E8                 push    ebp
.text:0000C2E9                 mov     ebp, esp
.text:0000C2EB                 sub     esp, 14h
.text:0000C2EE                 mov     eax, 0CCCCCCCCh
.text:0000C2F3                 mov     [ebp+var_14], eax
.text:0000C2F6                 mov     [ebp+var_10], eax
.text:0000C2F9                 mov     dword ptr [ebp+var_C], eax
.text:0000C2FC                 mov     dword ptr [ebp+var_C+4], eax
.text:0000C2FF                 mov     [ebp+var_4], eax
.text:0000C302                 mov     ecx, [ebp+arg_0]
.text:0000C305                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000C30A                 movzx   eax, word ptr [eax]
.text:0000C30D                 test    eax, eax
.text:0000C30F                 jnz     short loc_C318
.text:0000C311                 mov     al, 1
.text:0000C313                 jmp     loc_C3B9
.text:0000C318 ; ---------------------------------------------------------------------------
.text:0000C318
.text:0000C318 loc_C318:                               ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+27j
.text:0000C318                 mov     ecx, [ebp+arg_0]
.text:0000C31B                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000C320                 movzx   ecx, word ptr [eax+2]
.text:0000C324                 test    ecx, ecx
.text:0000C326                 jnz     short loc_C36E
.text:0000C328                 mov     ecx, [ebp+arg_0]
.text:0000C32B                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000C330                 mov     dl, [eax]
.text:0000C332                 mov     byte ptr [ebp+var_14], dl
.text:0000C335                 cmp     byte ptr [ebp+var_14], 61h ; 'a'
.text:0000C339                 jz      short loc_C354
.text:0000C33B                 cmp     byte ptr [ebp+var_14], 65h ; 'e'
.text:0000C33F                 jz      short loc_C349
.text:0000C341                 cmp     byte ptr [ebp+var_14], 72h ; 'r'
.text:0000C345                 jz      short loc_C35F
.text:0000C347                 jmp     short loc_C36A
.text:0000C349 ; ---------------------------------------------------------------------------
.text:0000C349
.text:0000C349 loc_C349:                               ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+57j
.text:0000C349                 mov     eax, [ebp+arg_4]
.text:0000C34C                 mov     byte ptr [eax+13h], 1
.text:0000C350                 mov     al, 1
.text:0000C352                 jmp     short loc_C3B9
.text:0000C354 ; ---------------------------------------------------------------------------
.text:0000C354
.text:0000C354 loc_C354:                               ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+51j
.text:0000C354                 mov     ecx, [ebp+arg_4]
.text:0000C357                 mov     byte ptr [ecx+11h], 1
.text:0000C35B                 mov     al, 1
.text:0000C35D                 jmp     short loc_C3B9
.text:0000C35F ; ---------------------------------------------------------------------------
.text:0000C35F
.text:0000C35F loc_C35F:                               ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+5Dj
.text:0000C35F                 mov     edx, [ebp+arg_4]
.text:0000C362                 mov     byte ptr [edx+10h], 1
.text:0000C366                 mov     al, 1
.text:0000C368                 jmp     short loc_C3B9
.text:0000C36A ; ---------------------------------------------------------------------------
.text:0000C36A
.text:0000C36A loc_C36A:                               ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+5Fj
.text:0000C36A                 xor     al, al
.text:0000C36C                 jmp     short loc_C3B9
.text:0000C36E ; ---------------------------------------------------------------------------
.text:0000C36E
.text:0000C36E loc_C36E:                               ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+3Ej
.text:0000C36E                 mov     ecx, [ebp+arg_0]
.text:0000C371                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000C376                 movzx   eax, word ptr [eax]
.text:0000C379                 cmp     eax, 73h ; 's'
.text:0000C37C                 jnz     short loc_C3B7
.text:0000C37E                 lea     ecx, [ebp+var_C]
.text:0000C381                 push    ecx             ; unsigned __int64 *
.text:0000C382                 push    1               ; unsigned int
.text:0000C384                 mov     ecx, [ebp+arg_0] ; this
.text:0000C387                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000C38C                 push    eax             ; wchar_t *
.text:0000C38D                 call    ?ParseComplexSize@@YG_NPB_WAA_K@Z ; ParseComplexSize(wchar_t const *,unsigned __int64 &)
.text:0000C392                 movzx   edx, al
.text:0000C395                 test    edx, edx
.text:0000C397                 jnz     short loc_C39D
.text:0000C399                 xor     al, al
.text:0000C39B                 jmp     short loc_C3B9
.text:0000C39D ; ---------------------------------------------------------------------------
.text:0000C39D
.text:0000C39D loc_C39D:                               ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+AFj
.text:0000C39D                 mov     eax, [ebp+arg_4]
.text:0000C3A0                 mov     ecx, dword ptr [ebp+var_C]
.text:0000C3A3                 mov     [eax+18h], ecx
.text:0000C3A6                 mov     edx, dword ptr [ebp+var_C+4]
.text:0000C3A9                 mov     [eax+1Ch], edx
.text:0000C3AC                 mov     eax, [ebp+arg_4]
.text:0000C3AF                 mov     byte ptr [eax+15h], 1
.text:0000C3B3                 mov     al, 1
.text:0000C3B5                 jmp     short loc_C3B9
.text:0000C3B7 ; ---------------------------------------------------------------------------
.text:0000C3B7
.text:0000C3B7 loc_C3B7:                               ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+94j
.text:0000C3B7                 xor     al, al
.text:0000C3B9
.text:0000C3B9 loc_C3B9:                               ; CODE XREF: ParseTypeParams(UString const &,COpenType &)+2Bj
.text:0000C3B9                                         ; ParseTypeParams(UString const &,COpenType &)+6Aj ...
.text:0000C3B9                 push    edx
.text:0000C3BA                 mov     ecx, ebp
.text:0000C3BC                 push    eax
.text:0000C3BD                 lea     edx, $LN14_7
.text:0000C3C3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000C3C8                 pop     eax
.text:0000C3C9                 pop     edx
.text:0000C3CA                 add     esp, 14h
.text:0000C3CD                 cmp     ebp, esp
.text:0000C3CF                 call    __RTC_CheckEsp
.text:0000C3D4                 mov     esp, ebp
.text:0000C3D6                 pop     ebp
.text:0000C3D7                 retn    8
.text:0000C3D7 ?ParseTypeParams@@YG_NABVUString@@AAUCOpenType@@@Z endp
.text:0000C3D7
.text:0000C3D7 ; ---------------------------------------------------------------------------
.text:0000C3DA                 align 4
.text:0000C3DC $LN14_7         dd 1                    ; DATA XREF: ParseTypeParams(UString const &,COpenType &)+D5o
.text:0000C3E0                 dd offset $LN13_10
.text:0000C3E4 $LN13_10        dd 0FFFFFFF4h, 8        ; DATA XREF: .text:0000C3E0o
.text:0000C3EC                 dd offset $LN12_4       ; "result"
.text:0000C3F0 $LN12_4         db 'result',0           ; DATA XREF: .text:0000C3ECo
.text:0000C3F7                 align 4
.text:0000C3F8
.text:0000C3F8 ; =============== S U B R O U T I N E =======================================
.text:0000C3F8
.text:0000C3F8 ; Attributes: bp-based frame
.text:0000C3F8
.text:0000C3F8 ; int __stdcall ParseOpenTypes(struct CCodecs *, UString *, int)
.text:0000C3F8                 public ?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z
.text:0000C3F8 ?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z proc near
.text:0000C3F8
.text:0000C3F8 var_54          = byte ptr -54h
.text:0000C3F8 var_52          = byte ptr -52h
.text:0000C3F8 var_51          = byte ptr -51h
.text:0000C3F8 var_4C          = byte ptr -4Ch
.text:0000C3F8 var_24          = byte ptr -24h
.text:0000C3F8 var_14          = dword ptr -14h
.text:0000C3F8 var_10          = dword ptr -10h
.text:0000C3F8 var_C           = dword ptr -0Ch
.text:0000C3F8 var_4           = dword ptr -4
.text:0000C3F8 arg_0           = dword ptr  8
.text:0000C3F8 arg_4           = dword ptr  0Ch
.text:0000C3F8 arg_8           = dword ptr  10h
.text:0000C3F8
.text:0000C3F8                 push    ebp
.text:0000C3F9                 mov     ebp, esp
.text:0000C3FB                 push    0FFFFFFFFh
.text:0000C3FD                 push    offset __ehhandler$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z
.text:0000C402                 mov     eax, large fs:0
.text:0000C408                 push    eax
.text:0000C409                 sub     esp, 48h
.text:0000C40C                 push    edi
.text:0000C40D                 lea     edi, [ebp+var_54]
.text:0000C410                 mov     ecx, 12h
.text:0000C415                 mov     eax, 0CCCCCCCCh
.text:0000C41A                 rep stosd
.text:0000C41C                 mov     eax, dword ptr ds:___security_cookie
.text:0000C421                 xor     eax, ebp
.text:0000C423                 push    eax
.text:0000C424                 lea     eax, [ebp+var_C]
.text:0000C427                 mov     large fs:0, eax
.text:0000C42D                 mov     ecx, [ebp+arg_8]
.text:0000C430                 call    ?Clear@?$CObjectVector@UCOpenType@@@@QAEXXZ ; CObjectVector<COpenType>::Clear(void)
.text:0000C435                 mov     [ebp+var_10], 0
.text:0000C43C
.text:0000C43C loc_C43C:                               ; CODE XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+118j
.text:0000C43C                 mov     ecx, [ebp+arg_4] ; this
.text:0000C43F                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000C444                 cmp     [ebp+var_10], eax
.text:0000C447                 jnb     loc_C515
.text:0000C44D                 mov     eax, [ebp+var_10]
.text:0000C450                 push    eax             ; unsigned int
.text:0000C451                 push    2Eh ; '.'       ; wchar_t
.text:0000C453                 mov     ecx, [ebp+arg_4] ; this
.text:0000C456                 call    ?Find@UString@@QBEH_WI@Z ; UString::Find(wchar_t,uint)
.text:0000C45B                 mov     [ebp+var_14], eax
.text:0000C45E                 cmp     [ebp+var_14], 0
.text:0000C462                 jge     short loc_C46F
.text:0000C464                 mov     ecx, [ebp+arg_4] ; this
.text:0000C467                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000C46C                 mov     [ebp+var_14], eax
.text:0000C46F
.text:0000C46F loc_C46F:                               ; CODE XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+6Aj
.text:0000C46F                 mov     ecx, [ebp+var_14]
.text:0000C472                 sub     ecx, [ebp+var_10]
.text:0000C475                 push    ecx
.text:0000C476                 mov     edx, [ebp+var_10]
.text:0000C479                 push    edx
.text:0000C47A                 lea     eax, [ebp+var_24]
.text:0000C47D                 push    eax
.text:0000C47E                 mov     ecx, [ebp+arg_4]
.text:0000C481                 call    ?Mid@UString@@QBE?AV1@II@Z ; UString::Mid(uint,uint)
.text:0000C486                 mov     [ebp+var_4], 0
.text:0000C48D                 lea     ecx, [ebp+var_24] ; this
.text:0000C490                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000C495                 movzx   ecx, al
.text:0000C498                 test    ecx, ecx
.text:0000C49A                 jz      short loc_C4B4
.text:0000C49C                 mov     [ebp+var_51], 0
.text:0000C4A0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C4A7                 lea     ecx, [ebp+var_24] ; this
.text:0000C4AA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C4AF                 mov     al, [ebp+var_51]
.text:0000C4B2                 jmp     short loc_C517
.text:0000C4B4 ; ---------------------------------------------------------------------------
.text:0000C4B4
.text:0000C4B4 loc_C4B4:                               ; CODE XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+A2j
.text:0000C4B4                 lea     ecx, [ebp+var_4C]
.text:0000C4B7                 call    ??0COpenType@@QAE@XZ ; COpenType::COpenType(void)
.text:0000C4BC                 lea     edx, [ebp+var_4C]
.text:0000C4BF                 push    edx             ; struct COpenType *
.text:0000C4C0                 lea     eax, [ebp+var_24]
.text:0000C4C3                 push    eax             ; struct UString *
.text:0000C4C4                 mov     ecx, [ebp+arg_0]
.text:0000C4C7                 push    ecx             ; struct CCodecs *
.text:0000C4C8                 call    ?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z ; ParseType(CCodecs &,UString const &,COpenType &)
.text:0000C4CD                 movzx   edx, al
.text:0000C4D0                 test    edx, edx
.text:0000C4D2                 jnz     short loc_C4EC
.text:0000C4D4                 mov     [ebp+var_52], 0
.text:0000C4D8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C4DF                 lea     ecx, [ebp+var_24] ; this
.text:0000C4E2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C4E7                 mov     al, [ebp+var_52]
.text:0000C4EA                 jmp     short loc_C517
.text:0000C4EC ; ---------------------------------------------------------------------------
.text:0000C4EC
.text:0000C4EC loc_C4EC:                               ; CODE XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+DAj
.text:0000C4EC                 lea     eax, [ebp+var_4C]
.text:0000C4EF                 push    eax
.text:0000C4F0                 mov     ecx, [ebp+arg_8]
.text:0000C4F3                 call    ?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z ; CObjectVector<COpenType>::Add(COpenType const &)
.text:0000C4F8                 mov     ecx, [ebp+var_14]
.text:0000C4FB                 add     ecx, 1
.text:0000C4FE                 mov     [ebp+var_10], ecx
.text:0000C501                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C508                 lea     ecx, [ebp+var_24] ; this
.text:0000C50B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000C510                 jmp     loc_C43C
.text:0000C515 ; ---------------------------------------------------------------------------
.text:0000C515
.text:0000C515 loc_C515:                               ; CODE XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+4Fj
.text:0000C515                 mov     al, 1
.text:0000C517
.text:0000C517 loc_C517:                               ; CODE XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+BAj
.text:0000C517                                         ; ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+F2j
.text:0000C517                 push    edx
.text:0000C518                 mov     ecx, ebp
.text:0000C51A                 push    eax
.text:0000C51B                 lea     edx, $LN13_11
.text:0000C521                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000C526                 pop     eax
.text:0000C527                 pop     edx
.text:0000C528                 mov     ecx, [ebp+var_C]
.text:0000C52B                 mov     large fs:0, ecx
.text:0000C532                 pop     ecx
.text:0000C533                 pop     edi
.text:0000C534                 add     esp, 54h
.text:0000C537                 cmp     ebp, esp
.text:0000C539                 call    __RTC_CheckEsp
.text:0000C53E                 mov     esp, ebp
.text:0000C540                 pop     ebp
.text:0000C541                 retn    0Ch
.text:0000C541 ?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z endp
.text:0000C541
.text:0000C541 ; ---------------------------------------------------------------------------
.text:0000C544 $LN13_11        dd 2                    ; DATA XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+123o
.text:0000C548                 dd offset $LN12_5
.text:0000C54C $LN12_5         dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:0000C548o
.text:0000C554                 dd offset $LN9_3        ; "name"
.text:0000C558                 dd 0FFFFFFB4h, 20h
.text:0000C560                 dd offset $LN10_6       ; "type"
.text:0000C564 $LN10_6         db 'type',0             ; DATA XREF: .text:0000C560o
.text:0000C569 $LN9_3          db 'name',0             ; DATA XREF: .text:0000C554o
.text:0000C56E                 align 10h
.text:0000C56E _text           ends
.text:0000C56E
.rtc$TMZ:0000C570 ; ===========================================================================
.rtc$TMZ:0000C570
.rtc$TMZ:0000C570 ; Segment type: Pure data
.rtc$TMZ:0000C570 ; Segment permissions: Read
.rtc$TMZ:0000C570 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000C570                 assume cs:_rtc$TMZ
.rtc$TMZ:0000C570                 ;org 0C570h
.rtc$TMZ:0000C570 ; COMDAT (pick any)
.rtc$TMZ:0000C570 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000C570 _rtc$TMZ        ends
.rtc$TMZ:0000C570
.rtc$IMZ:0000C574 ; ===========================================================================
.rtc$IMZ:0000C574
.rtc$IMZ:0000C574 ; Segment type: Pure data
.rtc$IMZ:0000C574 ; Segment permissions: Read
.rtc$IMZ:0000C574 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000C574                 assume cs:_rtc$IMZ
.rtc$IMZ:0000C574                 ;org 0C574h
.rtc$IMZ:0000C574 ; COMDAT (pick any)
.rtc$IMZ:0000C574 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000C574 _rtc$IMZ        ends
.rtc$IMZ:0000C574
.text$x:0000C578 ; ===========================================================================
.text$x:0000C578
.text$x:0000C578 ; Segment type: Pure code
.text$x:0000C578 ; Segment permissions: Read/Execute
.text$x:0000C578 _text$x         segment para public 'CODE' use32
.text$x:0000C578                 assume cs:_text$x
.text$x:0000C578                 ;org 0C578h
.text$x:0000C578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C578
.text$x:0000C578 ; =============== S U B R O U T I N E =======================================
.text$x:0000C578
.text$x:0000C578
.text$x:0000C578 __unwindfunclet$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z$0 proc near
.text$x:0000C578                                         ; DATA XREF: .xdata$x:0000CC9Co
.text$x:0000C578                 lea     ecx, [ebp-84h]  ; this
.text$x:0000C57E                 jmp     ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text$x:0000C57E __unwindfunclet$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z$0 endp
.text$x:0000C57E
.text$x:0000C583
.text$x:0000C583 ; =============== S U B R O U T I N E =======================================
.text$x:0000C583
.text$x:0000C583
.text$x:0000C583 __ehhandler$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z proc near
.text$x:0000C583                                         ; DATA XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+5o
.text$x:0000C583
.text$x:0000C583 arg_4           = dword ptr  8
.text$x:0000C583
.text$x:0000C583                 mov     edx, [esp+arg_4]
.text$x:0000C587                 lea     eax, [edx+0Ch]
.text$x:0000C58A                 mov     ecx, [edx-90h]
.text$x:0000C590                 xor     ecx, eax
.text$x:0000C592                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C597                 mov     eax, offset __ehfuncinfo$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z
.text$x:0000C59C                 jmp     ___CxxFrameHandler3
.text$x:0000C59C __ehhandler$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z endp
.text$x:0000C59C
.text$x:0000C5A1
.text$x:0000C5A1 ; =============== S U B R O U T I N E =======================================
.text$x:0000C5A1
.text$x:0000C5A1
.text$x:0000C5A1 __ehhandler$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text$x:0000C5A1                                         ; DATA XREF: NArchive::NParser::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5o
.text$x:0000C5A1
.text$x:0000C5A1 arg_4           = dword ptr  8
.text$x:0000C5A1
.text$x:0000C5A1                 mov     edx, [esp+arg_4]
.text$x:0000C5A5                 lea     eax, [edx+0Ch]
.text$x:0000C5A8                 mov     ecx, [edx-18h]
.text$x:0000C5AB                 xor     ecx, eax
.text$x:0000C5AD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C5B2                 mov     eax, offset __ehfuncinfo$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text$x:0000C5B7                 jmp     ___CxxFrameHandler3
.text$x:0000C5B7 __ehhandler$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text$x:0000C5B7
.text$x:0000C5BC
.text$x:0000C5BC ; =============== S U B R O U T I N E =======================================
.text$x:0000C5BC
.text$x:0000C5BC
.text$x:0000C5BC __unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:0000C5BC                                         ; DATA XREF: .xdata$x:0000CD4Co
.text$x:0000C5BC                 lea     ecx, [ebp-28h]  ; this
.text$x:0000C5BF                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C5BF __unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:0000C5BF
.text$x:0000C5C4
.text$x:0000C5C4 ; =============== S U B R O U T I N E =======================================
.text$x:0000C5C4
.text$x:0000C5C4
.text$x:0000C5C4 __unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 proc near
.text$x:0000C5C4                                         ; DATA XREF: .xdata$x:0000CD54o
.text$x:0000C5C4                 lea     ecx, [ebp-88h]  ; this
.text$x:0000C5CA                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000C5CA __unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 endp
.text$x:0000C5CA
.text$x:0000C5CF
.text$x:0000C5CF ; =============== S U B R O U T I N E =======================================
.text$x:0000C5CF
.text$x:0000C5CF
.text$x:0000C5CF __ehhandler$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text$x:0000C5CF                                         ; DATA XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5o
.text$x:0000C5CF
.text$x:0000C5CF arg_4           = dword ptr  8
.text$x:0000C5CF
.text$x:0000C5CF                 mov     edx, [esp+arg_4]
.text$x:0000C5D3                 lea     eax, [edx+0Ch]
.text$x:0000C5D6                 mov     ecx, [edx-0ACh]
.text$x:0000C5DC                 xor     ecx, eax
.text$x:0000C5DE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C5E3                 mov     ecx, [edx-8]
.text$x:0000C5E6                 xor     ecx, eax
.text$x:0000C5E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C5ED                 mov     eax, offset __ehfuncinfo$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text$x:0000C5F2                 jmp     ___CxxFrameHandler3
.text$x:0000C5F2 __ehhandler$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text$x:0000C5F2
.text$x:0000C5F7
.text$x:0000C5F7 ; =============== S U B R O U T I N E =======================================
.text$x:0000C5F7
.text$x:0000C5F7
.text$x:0000C5F7 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text$x:0000C5F7                                         ; DATA XREF: .xdata$x:0000CDD8o
.text$x:0000C5F7                 mov     eax, [ebp-0A8h]
.text$x:0000C5FD                 push    eax             ; void *
.text$x:0000C5FE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C603                 pop     ecx
.text$x:0000C604                 retn
.text$x:0000C604 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text$x:0000C604
.text$x:0000C605
.text$x:0000C605 ; =============== S U B R O U T I N E =======================================
.text$x:0000C605
.text$x:0000C605
.text$x:0000C605 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 proc near
.text$x:0000C605                                         ; DATA XREF: .xdata$x:0000CDE0o
.text$x:0000C605                 lea     ecx, [ebp-2Ch]
.text$x:0000C608                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000C608 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 endp
.text$x:0000C608
.text$x:0000C60D
.text$x:0000C60D ; =============== S U B R O U T I N E =======================================
.text$x:0000C60D
.text$x:0000C60D
.text$x:0000C60D __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:0000C60D                                         ; DATA XREF: .xdata$x:0000CDE8o
.text$x:0000C60D                 mov     eax, [ebp-0B0h]
.text$x:0000C613                 push    eax             ; void *
.text$x:0000C614                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C619                 pop     ecx
.text$x:0000C61A                 retn
.text$x:0000C61A __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:0000C61A
.text$x:0000C61B
.text$x:0000C61B ; =============== S U B R O U T I N E =======================================
.text$x:0000C61B
.text$x:0000C61B
.text$x:0000C61B __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:0000C61B                                         ; DATA XREF: .xdata$x:0000CDF0o
.text$x:0000C61B                 lea     ecx, [ebp-3Ch]
.text$x:0000C61E                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:0000C61E __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:0000C61E
.text$x:0000C623
.text$x:0000C623 ; =============== S U B R O U T I N E =======================================
.text$x:0000C623
.text$x:0000C623
.text$x:0000C623 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 proc near
.text$x:0000C623                                         ; DATA XREF: .xdata$x:0000CDF8o
.text$x:0000C623                 mov     eax, [ebp-0B8h]
.text$x:0000C629                 push    eax             ; void *
.text$x:0000C62A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C62F                 pop     ecx
.text$x:0000C630                 retn
.text$x:0000C630 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 endp
.text$x:0000C630
.text$x:0000C631
.text$x:0000C631 ; =============== S U B R O U T I N E =======================================
.text$x:0000C631
.text$x:0000C631
.text$x:0000C631 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 proc near
.text$x:0000C631                                         ; DATA XREF: .xdata$x:0000CE00o
.text$x:0000C631                 lea     ecx, [ebp-4Ch]
.text$x:0000C634                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000C634 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 endp
.text$x:0000C634
.text$x:0000C639
.text$x:0000C639 ; =============== S U B R O U T I N E =======================================
.text$x:0000C639
.text$x:0000C639
.text$x:0000C639 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 proc near
.text$x:0000C639                                         ; DATA XREF: .xdata$x:0000CE08o
.text$x:0000C639                 mov     eax, [ebp-0C0h]
.text$x:0000C63F                 push    eax             ; void *
.text$x:0000C640                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C645                 pop     ecx
.text$x:0000C646                 retn
.text$x:0000C646 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 endp
.text$x:0000C646
.text$x:0000C647
.text$x:0000C647 ; =============== S U B R O U T I N E =======================================
.text$x:0000C647
.text$x:0000C647
.text$x:0000C647 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 proc near
.text$x:0000C647                                         ; DATA XREF: .xdata$x:0000CE10o
.text$x:0000C647                 lea     ecx, [ebp-5Ch]
.text$x:0000C64A                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:0000C64A __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 endp
.text$x:0000C64A
.text$x:0000C64F
.text$x:0000C64F ; =============== S U B R O U T I N E =======================================
.text$x:0000C64F
.text$x:0000C64F
.text$x:0000C64F __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 proc near
.text$x:0000C64F                                         ; DATA XREF: .xdata$x:0000CE18o
.text$x:0000C64F                 lea     ecx, [ebp-6Ch]
.text$x:0000C652                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000C652 __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 endp
.text$x:0000C652
.text$x:0000C657
.text$x:0000C657 ; =============== S U B R O U T I N E =======================================
.text$x:0000C657
.text$x:0000C657
.text$x:0000C657 __ehhandler$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:0000C657                                         ; DATA XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:0000C657
.text$x:0000C657 arg_4           = dword ptr  8
.text$x:0000C657
.text$x:0000C657                 mov     edx, [esp+arg_4]
.text$x:0000C65B                 lea     eax, [edx+0Ch]
.text$x:0000C65E                 mov     ecx, [edx-184h]
.text$x:0000C664                 xor     ecx, eax
.text$x:0000C666                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C66B                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:0000C670                 jmp     ___CxxFrameHandler3
.text$x:0000C670 __ehhandler$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:0000C670
.text$x:0000C675
.text$x:0000C675 ; =============== S U B R O U T I N E =======================================
.text$x:0000C675
.text$x:0000C675
.text$x:0000C675 __ehhandler$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z proc near
.text$x:0000C675                                         ; DATA XREF: NArchive::NParser::CHandler::GetStream(uint,ISequentialInStream * *)+5o
.text$x:0000C675
.text$x:0000C675 arg_4           = dword ptr  8
.text$x:0000C675
.text$x:0000C675                 mov     edx, [esp+arg_4]
.text$x:0000C679                 lea     eax, [edx+0Ch]
.text$x:0000C67C                 mov     ecx, [edx-28h]
.text$x:0000C67F                 xor     ecx, eax
.text$x:0000C681                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C686                 mov     eax, offset __ehfuncinfo$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text$x:0000C68B                 jmp     ___CxxFrameHandler3
.text$x:0000C68B __ehhandler$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z endp
.text$x:0000C68B
.text$x:0000C690
.text$x:0000C690 ; =============== S U B R O U T I N E =======================================
.text$x:0000C690
.text$x:0000C690
.text$x:0000C690 __unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$0 proc near
.text$x:0000C690                                         ; DATA XREF: .xdata$x:0000CE80o
.text$x:0000C690                 lea     ecx, [ebp-24h]  ; this
.text$x:0000C693                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000C693 __unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$0 endp
.text$x:0000C693
.text$x:0000C698
.text$x:0000C698 ; =============== S U B R O U T I N E =======================================
.text$x:0000C698
.text$x:0000C698
.text$x:0000C698 __unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$1 proc near
.text$x:0000C698                                         ; DATA XREF: .xdata$x:0000CE88o
.text$x:0000C698                 lea     ecx, [ebp-68h]  ; this
.text$x:0000C69B                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C69B __unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$1 endp
.text$x:0000C69B
.text$x:0000C6A0
.text$x:0000C6A0 ; =============== S U B R O U T I N E =======================================
.text$x:0000C6A0
.text$x:0000C6A0
.text$x:0000C6A0 __unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$2 proc near
.text$x:0000C6A0                                         ; DATA XREF: .xdata$x:0000CE90o
.text$x:0000C6A0                 lea     ecx, [ebp-0B0h] ; this
.text$x:0000C6A6                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000C6A6 __unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$2 endp
.text$x:0000C6A6
.text$x:0000C6AB
.text$x:0000C6AB ; =============== S U B R O U T I N E =======================================
.text$x:0000C6AB
.text$x:0000C6AB
.text$x:0000C6AB __ehhandler$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z proc near
.text$x:0000C6AB                                         ; DATA XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+5o
.text$x:0000C6AB
.text$x:0000C6AB arg_4           = dword ptr  8
.text$x:0000C6AB
.text$x:0000C6AB                 mov     edx, [esp+arg_4]
.text$x:0000C6AF                 lea     eax, [edx+0Ch]
.text$x:0000C6B2                 mov     ecx, [edx-0C4h]
.text$x:0000C6B8                 xor     ecx, eax
.text$x:0000C6BA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C6BF                 mov     eax, offset __ehfuncinfo$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z
.text$x:0000C6C4                 jmp     ___CxxFrameHandler3
.text$x:0000C6C4 __ehhandler$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z endp
.text$x:0000C6C4
.text$x:0000C6C9
.text$x:0000C6C9 ; =============== S U B R O U T I N E =======================================
.text$x:0000C6C9
.text$x:0000C6C9
.text$x:0000C6C9 __unwindfunclet$?GetItemPath@CArc@@QBEJIAAVUString@@@Z$0 proc near
.text$x:0000C6C9                                         ; DATA XREF: .xdata$x:0000CEBCo
.text$x:0000C6C9                 lea     ecx, [ebp-58h]  ; this
.text$x:0000C6CC                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C6CC __unwindfunclet$?GetItemPath@CArc@@QBEJIAAVUString@@@Z$0 endp
.text$x:0000C6CC
.text$x:0000C6D1
.text$x:0000C6D1 ; =============== S U B R O U T I N E =======================================
.text$x:0000C6D1
.text$x:0000C6D1
.text$x:0000C6D1 __ehhandler$?GetItemPath@CArc@@QBEJIAAVUString@@@Z proc near
.text$x:0000C6D1                                         ; DATA XREF: CArc::GetItemPath(uint,UString &)+5o
.text$x:0000C6D1
.text$x:0000C6D1 arg_4           = dword ptr  8
.text$x:0000C6D1
.text$x:0000C6D1                 mov     edx, [esp+arg_4]
.text$x:0000C6D5                 lea     eax, [edx+0Ch]
.text$x:0000C6D8                 mov     ecx, [edx-70h]
.text$x:0000C6DB                 xor     ecx, eax
.text$x:0000C6DD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C6E2                 mov     eax, offset __ehfuncinfo$?GetItemPath@CArc@@QBEJIAAVUString@@@Z
.text$x:0000C6E7                 jmp     ___CxxFrameHandler3
.text$x:0000C6E7 __ehhandler$?GetItemPath@CArc@@QBEJIAAVUString@@@Z endp
.text$x:0000C6E7
.text$x:0000C6EC
.text$x:0000C6EC ; =============== S U B R O U T I N E =======================================
.text$x:0000C6EC
.text$x:0000C6EC
.text$x:0000C6EC __unwindfunclet$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z$0 proc near
.text$x:0000C6EC                                         ; DATA XREF: .xdata$x:0000CEE8o
.text$x:0000C6EC                 lea     ecx, [ebp-34h]  ; this
.text$x:0000C6EF                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C6EF __unwindfunclet$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z$0 endp
.text$x:0000C6EF
.text$x:0000C6F4
.text$x:0000C6F4 ; =============== S U B R O U T I N E =======================================
.text$x:0000C6F4
.text$x:0000C6F4
.text$x:0000C6F4 __ehhandler$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z proc near
.text$x:0000C6F4                                         ; DATA XREF: CArc::GetDefaultItemPath(uint,UString &)+5o
.text$x:0000C6F4
.text$x:0000C6F4 arg_4           = dword ptr  8
.text$x:0000C6F4
.text$x:0000C6F4                 mov     edx, [esp+arg_4]
.text$x:0000C6F8                 lea     eax, [edx+0Ch]
.text$x:0000C6FB                 mov     ecx, [edx-48h]
.text$x:0000C6FE                 xor     ecx, eax
.text$x:0000C700                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C705                 mov     eax, offset __ehfuncinfo$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z
.text$x:0000C70A                 jmp     ___CxxFrameHandler3
.text$x:0000C70A __ehhandler$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z endp
.text$x:0000C70A
.text$x:0000C70F
.text$x:0000C70F ; =============== S U B R O U T I N E =======================================
.text$x:0000C70F
.text$x:0000C70F
.text$x:0000C70F __unwindfunclet$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z$0 proc near
.text$x:0000C70F                                         ; DATA XREF: .xdata$x:0000CF14o
.text$x:0000C70F                 lea     ecx, [ebp-54h]  ; this
.text$x:0000C712                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C712 __unwindfunclet$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z$0 endp
.text$x:0000C712
.text$x:0000C717
.text$x:0000C717 ; =============== S U B R O U T I N E =======================================
.text$x:0000C717
.text$x:0000C717
.text$x:0000C717 __ehhandler$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z proc near
.text$x:0000C717                                         ; DATA XREF: CArc::GetItem(uint,CReadArcItem &)+5o
.text$x:0000C717
.text$x:0000C717 arg_4           = dword ptr  8
.text$x:0000C717
.text$x:0000C717                 mov     edx, [esp+arg_4]
.text$x:0000C71B                 lea     eax, [edx+0Ch]
.text$x:0000C71E                 mov     ecx, [edx-94h]
.text$x:0000C724                 xor     ecx, eax
.text$x:0000C726                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C72B                 mov     eax, offset __ehfuncinfo$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z
.text$x:0000C730                 jmp     ___CxxFrameHandler3
.text$x:0000C730 __ehhandler$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z endp
.text$x:0000C730
.text$x:0000C735
.text$x:0000C735 ; =============== S U B R O U T I N E =======================================
.text$x:0000C735
.text$x:0000C735
.text$x:0000C735 __unwindfunclet$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z$0 proc near
.text$x:0000C735                                         ; DATA XREF: .xdata$x:0000CF40o
.text$x:0000C735                 lea     ecx, [ebp-24h]  ; this
.text$x:0000C738                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C738 __unwindfunclet$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z$0 endp
.text$x:0000C738
.text$x:0000C73D
.text$x:0000C73D ; =============== S U B R O U T I N E =======================================
.text$x:0000C73D
.text$x:0000C73D
.text$x:0000C73D __ehhandler$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z proc near
.text$x:0000C73D                                         ; DATA XREF: CArc::GetItemSize(uint,unsigned __int64 &,bool &)+5o
.text$x:0000C73D
.text$x:0000C73D arg_4           = dword ptr  8
.text$x:0000C73D
.text$x:0000C73D                 mov     edx, [esp+arg_4]
.text$x:0000C741                 lea     eax, [edx+0Ch]
.text$x:0000C744                 mov     ecx, [edx-44h]
.text$x:0000C747                 xor     ecx, eax
.text$x:0000C749                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C74E                 mov     eax, offset __ehfuncinfo$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z
.text$x:0000C753                 jmp     ___CxxFrameHandler3
.text$x:0000C753 __ehhandler$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z endp
.text$x:0000C753
.text$x:0000C758
.text$x:0000C758 ; =============== S U B R O U T I N E =======================================
.text$x:0000C758
.text$x:0000C758
.text$x:0000C758 __unwindfunclet$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z$0 proc near
.text$x:0000C758                                         ; DATA XREF: .xdata$x:0000CF6Co
.text$x:0000C758                 lea     ecx, [ebp-24h]  ; this
.text$x:0000C75B                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C75B __unwindfunclet$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z$0 endp
.text$x:0000C75B
.text$x:0000C760
.text$x:0000C760 ; =============== S U B R O U T I N E =======================================
.text$x:0000C760
.text$x:0000C760
.text$x:0000C760 __ehhandler$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z proc near
.text$x:0000C760                                         ; DATA XREF: CArc::GetItemMTime(uint,_FILETIME &,bool &)+5o
.text$x:0000C760
.text$x:0000C760 arg_4           = dword ptr  8
.text$x:0000C760
.text$x:0000C760                 mov     edx, [esp+arg_4]
.text$x:0000C764                 lea     eax, [edx+0Ch]
.text$x:0000C767                 mov     ecx, [edx-3Ch]
.text$x:0000C76A                 xor     ecx, eax
.text$x:0000C76C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C771                 mov     eax, offset __ehfuncinfo$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z
.text$x:0000C776                 jmp     ___CxxFrameHandler3
.text$x:0000C776 __ehhandler$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z endp
.text$x:0000C776
.text$x:0000C77B
.text$x:0000C77B ; =============== S U B R O U T I N E =======================================
.text$x:0000C77B
.text$x:0000C77B
.text$x:0000C77B __ehhandler$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z proc near
.text$x:0000C77B                                         ; DATA XREF: CArchiveOpenCallback_Offset::CryptoGetTextPassword(wchar_t * *)+5o
.text$x:0000C77B
.text$x:0000C77B arg_4           = dword ptr  8
.text$x:0000C77B
.text$x:0000C77B                 mov     edx, [esp+arg_4]
.text$x:0000C77F                 lea     eax, [edx+0Ch]
.text$x:0000C782                 mov     ecx, [edx-28h]
.text$x:0000C785                 xor     ecx, eax
.text$x:0000C787                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C78C                 mov     eax, offset __ehfuncinfo$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
.text$x:0000C791                 jmp     ___CxxFrameHandler3
.text$x:0000C791 __ehhandler$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z endp
.text$x:0000C791
.text$x:0000C796
.text$x:0000C796 ; =============== S U B R O U T I N E =======================================
.text$x:0000C796
.text$x:0000C796
.text$x:0000C796 __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$0 proc near
.text$x:0000C796                                         ; DATA XREF: .xdata$x:0000CFF0o
.text$x:0000C796                 lea     ecx, [ebp-24h]  ; this
.text$x:0000C799                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C799 __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$0 endp
.text$x:0000C799
.text$x:0000C79E
.text$x:0000C79E ; =============== S U B R O U T I N E =======================================
.text$x:0000C79E
.text$x:0000C79E
.text$x:0000C79E __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$1 proc near
.text$x:0000C79E                                         ; DATA XREF: .xdata$x:0000CFF8o
.text$x:0000C79E                 lea     ecx, [ebp-40h]  ; this
.text$x:0000C7A1                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C7A1 __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$1 endp
.text$x:0000C7A1
.text$x:0000C7A6
.text$x:0000C7A6 ; =============== S U B R O U T I N E =======================================
.text$x:0000C7A6
.text$x:0000C7A6
.text$x:0000C7A6 __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$2 proc near
.text$x:0000C7A6                                         ; DATA XREF: .xdata$x:0000D000o
.text$x:0000C7A6                 lea     ecx, [ebp-5Ch]  ; this
.text$x:0000C7A9                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C7A9 __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$2 endp
.text$x:0000C7A9
.text$x:0000C7AE
.text$x:0000C7AE ; =============== S U B R O U T I N E =======================================
.text$x:0000C7AE
.text$x:0000C7AE
.text$x:0000C7AE __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$3 proc near
.text$x:0000C7AE                                         ; DATA XREF: .xdata$x:0000D008o
.text$x:0000C7AE                 lea     ecx, [ebp-78h]  ; this
.text$x:0000C7B1                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C7B1 __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$3 endp
.text$x:0000C7B1
.text$x:0000C7B6
.text$x:0000C7B6 ; =============== S U B R O U T I N E =======================================
.text$x:0000C7B6
.text$x:0000C7B6
.text$x:0000C7B6 __ehhandler$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z proc near
.text$x:0000C7B6                                         ; DATA XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+5o
.text$x:0000C7B6
.text$x:0000C7B6 arg_4           = dword ptr  8
.text$x:0000C7B6
.text$x:0000C7B6                 mov     edx, [esp+arg_4]
.text$x:0000C7BA                 lea     eax, [edx+0Ch]
.text$x:0000C7BD                 mov     ecx, [edx-0C4h]
.text$x:0000C7C3                 xor     ecx, eax
.text$x:0000C7C5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C7CA                 mov     eax, offset __ehfuncinfo$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z
.text$x:0000C7CF                 jmp     ___CxxFrameHandler3
.text$x:0000C7CF __ehhandler$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z endp
.text$x:0000C7CF
.text$x:0000C7D4
.text$x:0000C7D4 ; =============== S U B R O U T I N E =======================================
.text$x:0000C7D4
.text$x:0000C7D4
.text$x:0000C7D4 __unwindfunclet$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z$0 proc near
.text$x:0000C7D4                                         ; DATA XREF: .xdata$x:0000D034o
.text$x:0000C7D4                 lea     ecx, [ebp-20h]  ; this
.text$x:0000C7D7                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C7D7 __unwindfunclet$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z$0 endp
.text$x:0000C7D7
.text$x:0000C7DC
.text$x:0000C7DC ; =============== S U B R O U T I N E =======================================
.text$x:0000C7DC
.text$x:0000C7DC
.text$x:0000C7DC __ehhandler$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z proc near
.text$x:0000C7DC                                         ; DATA XREF: Archive_GetArcProp_UInt(IInArchive *,ulong,unsigned __int64 &,bool &)+5o
.text$x:0000C7DC
.text$x:0000C7DC arg_4           = dword ptr  8
.text$x:0000C7DC
.text$x:0000C7DC                 mov     edx, [esp+arg_4]
.text$x:0000C7E0                 lea     eax, [edx+0Ch]
.text$x:0000C7E3                 mov     ecx, [edx-38h]
.text$x:0000C7E6                 xor     ecx, eax
.text$x:0000C7E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C7ED                 mov     eax, offset __ehfuncinfo$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z
.text$x:0000C7F2                 jmp     ___CxxFrameHandler3
.text$x:0000C7F2 __ehhandler$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z endp
.text$x:0000C7F2
.text$x:0000C7F7
.text$x:0000C7F7 ; =============== S U B R O U T I N E =======================================
.text$x:0000C7F7
.text$x:0000C7F7
.text$x:0000C7F7 __unwindfunclet$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z$0 proc near
.text$x:0000C7F7                                         ; DATA XREF: .xdata$x:0000D060o
.text$x:0000C7F7                 lea     ecx, [ebp-20h]  ; this
.text$x:0000C7FA                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C7FA __unwindfunclet$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z$0 endp
.text$x:0000C7FA
.text$x:0000C7FF
.text$x:0000C7FF ; =============== S U B R O U T I N E =======================================
.text$x:0000C7FF
.text$x:0000C7FF
.text$x:0000C7FF __ehhandler$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z proc near
.text$x:0000C7FF                                         ; DATA XREF: Archive_GetArcProp_Int(IInArchive *,ulong,__int64 &,bool &)+5o
.text$x:0000C7FF
.text$x:0000C7FF arg_4           = dword ptr  8
.text$x:0000C7FF
.text$x:0000C7FF                 mov     edx, [esp+arg_4]
.text$x:0000C803                 lea     eax, [edx+0Ch]
.text$x:0000C806                 mov     ecx, [edx-38h]
.text$x:0000C809                 xor     ecx, eax
.text$x:0000C80B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C810                 mov     eax, offset __ehfuncinfo$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z
.text$x:0000C815                 jmp     ___CxxFrameHandler3
.text$x:0000C815 __ehhandler$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z endp
.text$x:0000C815
.text$x:0000C81A
.text$x:0000C81A ; =============== S U B R O U T I N E =======================================
.text$x:0000C81A
.text$x:0000C81A
.text$x:0000C81A __unwindfunclet$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z$0 proc near
.text$x:0000C81A                                         ; DATA XREF: .xdata$x:0000D08Co
.text$x:0000C81A                 lea     ecx, [ebp-20h]
.text$x:0000C81D                 jmp     ??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ ; CMyComPtr<IArchiveAllowTail>::~CMyComPtr<IArchiveAllowTail>(void)
.text$x:0000C81D __unwindfunclet$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z$0 endp
.text$x:0000C81D
.text$x:0000C822
.text$x:0000C822 ; =============== S U B R O U T I N E =======================================
.text$x:0000C822
.text$x:0000C822
.text$x:0000C822 __ehhandler$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z proc near
.text$x:0000C822                                         ; DATA XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+5o
.text$x:0000C822
.text$x:0000C822 arg_4           = dword ptr  8
.text$x:0000C822
.text$x:0000C822                 mov     edx, [esp+arg_4]
.text$x:0000C826                 lea     eax, [edx+0Ch]
.text$x:0000C829                 mov     ecx, [edx-28h]
.text$x:0000C82C                 xor     ecx, eax
.text$x:0000C82E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C833                 mov     eax, offset __ehfuncinfo$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z
.text$x:0000C838                 jmp     ___CxxFrameHandler3
.text$x:0000C838 __ehhandler$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z endp
.text$x:0000C838
.text$x:0000C83D
.text$x:0000C83D ; =============== S U B R O U T I N E =======================================
.text$x:0000C83D
.text$x:0000C83D
.text$x:0000C83D __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$0 proc near
.text$x:0000C83D                                         ; DATA XREF: .xdata$x:0000D0DCo
.text$x:0000C83D                 lea     ecx, [ebp-24h]  ; this
.text$x:0000C840                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000C840 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$0 endp
.text$x:0000C840
.text$x:0000C845
.text$x:0000C845 ; =============== S U B R O U T I N E =======================================
.text$x:0000C845
.text$x:0000C845
.text$x:0000C845 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$1 proc near
.text$x:0000C845                                         ; DATA XREF: .xdata$x:0000D0E4o
.text$x:0000C845                 lea     ecx, [ebp-38h]  ; this
.text$x:0000C848                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000C848 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$1 endp
.text$x:0000C848
.text$x:0000C84D
.text$x:0000C84D ; =============== S U B R O U T I N E =======================================
.text$x:0000C84D
.text$x:0000C84D
.text$x:0000C84D __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$2 proc near
.text$x:0000C84D                                         ; DATA XREF: .xdata$x:0000D0ECo
.text$x:0000C84D                 lea     ecx, [ebp-50h]
.text$x:0000C850                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:0000C850 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$2 endp
.text$x:0000C850
.text$x:0000C855
.text$x:0000C855 ; =============== S U B R O U T I N E =======================================
.text$x:0000C855
.text$x:0000C855
.text$x:0000C855 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$3 proc near
.text$x:0000C855                                         ; DATA XREF: .xdata$x:0000D0F4o
.text$x:0000C855                 lea     ecx, [ebp-60h]
.text$x:0000C858                 jmp     ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text$x:0000C858 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$3 endp
.text$x:0000C858
.text$x:0000C85D
.text$x:0000C85D ; =============== S U B R O U T I N E =======================================
.text$x:0000C85D
.text$x:0000C85D
.text$x:0000C85D __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$4 proc near
.text$x:0000C85D                                         ; DATA XREF: .xdata$x:0000D0FCo
.text$x:0000C85D                 lea     ecx, [ebp-9Ch]
.text$x:0000C863                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:0000C863 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$4 endp
.text$x:0000C863
.text$x:0000C868
.text$x:0000C868 ; =============== S U B R O U T I N E =======================================
.text$x:0000C868
.text$x:0000C868
.text$x:0000C868 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$5 proc near
.text$x:0000C868                                         ; DATA XREF: .xdata$x:0000D104o
.text$x:0000C868                 lea     ecx, [ebp-0B0h]
.text$x:0000C86E                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:0000C86E __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$5 endp
.text$x:0000C86E
.text$x:0000C873
.text$x:0000C873 ; =============== S U B R O U T I N E =======================================
.text$x:0000C873
.text$x:0000C873
.text$x:0000C873 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$9 proc near
.text$x:0000C873                                         ; DATA XREF: .xdata$x:0000D10Co
.text$x:0000C873                 lea     ecx, [ebp-12Ch]
.text$x:0000C879                 jmp     ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text$x:0000C879 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$9 endp
.text$x:0000C879
.text$x:0000C87E
.text$x:0000C87E ; =============== S U B R O U T I N E =======================================
.text$x:0000C87E
.text$x:0000C87E
.text$x:0000C87E __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$10 proc near
.text$x:0000C87E                                         ; DATA XREF: .xdata$x:0000D114o
.text$x:0000C87E                 lea     ecx, [ebp-158h]
.text$x:0000C884                 jmp     ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text$x:0000C884 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$10 endp
.text$x:0000C884
.text$x:0000C889
.text$x:0000C889 ; =============== S U B R O U T I N E =======================================
.text$x:0000C889
.text$x:0000C889
.text$x:0000C889 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$11 proc near
.text$x:0000C889                                         ; DATA XREF: .xdata$x:0000D11Co
.text$x:0000C889                 lea     ecx, [ebp-17Ch]
.text$x:0000C88F                 jmp     ??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>(void)
.text$x:0000C88F __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$11 endp
.text$x:0000C88F
.text$x:0000C894
.text$x:0000C894 ; =============== S U B R O U T I N E =======================================
.text$x:0000C894
.text$x:0000C894
.text$x:0000C894 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$12 proc near
.text$x:0000C894                                         ; DATA XREF: .xdata$x:0000D124o
.text$x:0000C894                 mov     eax, [ebp-6C0h]
.text$x:0000C89A                 push    eax             ; void *
.text$x:0000C89B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C8A0                 pop     ecx
.text$x:0000C8A1                 retn
.text$x:0000C8A1 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$12 endp
.text$x:0000C8A1
.text$x:0000C8A2
.text$x:0000C8A2 ; =============== S U B R O U T I N E =======================================
.text$x:0000C8A2
.text$x:0000C8A2
.text$x:0000C8A2 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$13 proc near
.text$x:0000C8A2                                         ; DATA XREF: .xdata$x:0000D12Co
.text$x:0000C8A2                 lea     ecx, [ebp-1B0h]
.text$x:0000C8A8                 jmp     ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text$x:0000C8A8 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$13 endp
.text$x:0000C8A8
.text$x:0000C8AD
.text$x:0000C8AD ; =============== S U B R O U T I N E =======================================
.text$x:0000C8AD
.text$x:0000C8AD
.text$x:0000C8AD __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$14 proc near
.text$x:0000C8AD                                         ; DATA XREF: .xdata$x:0000D134o
.text$x:0000C8AD                 mov     eax, [ebp-6C8h]
.text$x:0000C8B3                 push    eax             ; void *
.text$x:0000C8B4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C8B9                 pop     ecx
.text$x:0000C8BA                 retn
.text$x:0000C8BA __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$14 endp
.text$x:0000C8BA
.text$x:0000C8BB
.text$x:0000C8BB ; =============== S U B R O U T I N E =======================================
.text$x:0000C8BB
.text$x:0000C8BB
.text$x:0000C8BB __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$15 proc near
.text$x:0000C8BB                                         ; DATA XREF: .xdata$x:0000D13Co
.text$x:0000C8BB                 lea     ecx, [ebp-1C0h]
.text$x:0000C8C1                 jmp     ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text$x:0000C8C1 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$15 endp
.text$x:0000C8C1
.text$x:0000C8C6
.text$x:0000C8C6 ; =============== S U B R O U T I N E =======================================
.text$x:0000C8C6
.text$x:0000C8C6
.text$x:0000C8C6 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$16 proc near
.text$x:0000C8C6                                         ; DATA XREF: .xdata$x:0000D144o
.text$x:0000C8C6                 lea     ecx, [ebp-1D0h]
.text$x:0000C8CC                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:0000C8CC __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$16 endp
.text$x:0000C8CC
.text$x:0000C8D1
.text$x:0000C8D1 ; =============== S U B R O U T I N E =======================================
.text$x:0000C8D1
.text$x:0000C8D1
.text$x:0000C8D1 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$17 proc near
.text$x:0000C8D1                                         ; DATA XREF: .xdata$x:0000D14Co
.text$x:0000C8D1                 lea     ecx, [ebp-200h]
.text$x:0000C8D7                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000C8D7 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$17 endp
.text$x:0000C8D7
.text$x:0000C8DC
.text$x:0000C8DC ; =============== S U B R O U T I N E =======================================
.text$x:0000C8DC
.text$x:0000C8DC
.text$x:0000C8DC __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$18 proc near
.text$x:0000C8DC                                         ; DATA XREF: .xdata$x:0000D154o
.text$x:0000C8DC                 lea     ecx, [ebp-23Ch]
.text$x:0000C8E2                 jmp     ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text$x:0000C8E2 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$18 endp
.text$x:0000C8E2
.text$x:0000C8E7
.text$x:0000C8E7 ; =============== S U B R O U T I N E =======================================
.text$x:0000C8E7
.text$x:0000C8E7
.text$x:0000C8E7 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$19 proc near
.text$x:0000C8E7                                         ; DATA XREF: .xdata$x:0000D15Co
.text$x:0000C8E7                 lea     ecx, [ebp-2D4h] ; this
.text$x:0000C8ED                 jmp     ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text$x:0000C8ED __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$19 endp
.text$x:0000C8ED
.text$x:0000C8F2
.text$x:0000C8F2 ; =============== S U B R O U T I N E =======================================
.text$x:0000C8F2
.text$x:0000C8F2
.text$x:0000C8F2 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$20 proc near
.text$x:0000C8F2                                         ; DATA XREF: .xdata$x:0000D164o
.text$x:0000C8F2                 lea     ecx, [ebp-2FCh]
.text$x:0000C8F8                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000C8F8 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$20 endp
.text$x:0000C8F8
.text$x:0000C8FD
.text$x:0000C8FD ; =============== S U B R O U T I N E =======================================
.text$x:0000C8FD
.text$x:0000C8FD
.text$x:0000C8FD __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$21 proc near
.text$x:0000C8FD                                         ; DATA XREF: .xdata$x:0000D16Co
.text$x:0000C8FD                 lea     ecx, [ebp-310h]
.text$x:0000C903                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000C903 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$21 endp
.text$x:0000C903
.text$x:0000C908
.text$x:0000C908 ; =============== S U B R O U T I N E =======================================
.text$x:0000C908
.text$x:0000C908
.text$x:0000C908 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$22 proc near
.text$x:0000C908                                         ; DATA XREF: .xdata$x:0000D174o
.text$x:0000C908                 mov     eax, [ebp-6FCh]
.text$x:0000C90E                 push    eax             ; void *
.text$x:0000C90F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C914                 pop     ecx
.text$x:0000C915                 retn
.text$x:0000C915 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$22 endp
.text$x:0000C915
.text$x:0000C916
.text$x:0000C916 ; =============== S U B R O U T I N E =======================================
.text$x:0000C916
.text$x:0000C916
.text$x:0000C916 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$23 proc near
.text$x:0000C916                                         ; DATA XREF: .xdata$x:0000D17Co
.text$x:0000C916                 lea     ecx, [ebp-330h]
.text$x:0000C91C                 jmp     ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text$x:0000C91C __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$23 endp
.text$x:0000C91C
.text$x:0000C921
.text$x:0000C921 ; =============== S U B R O U T I N E =======================================
.text$x:0000C921
.text$x:0000C921
.text$x:0000C921 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$24 proc near
.text$x:0000C921                                         ; DATA XREF: .xdata$x:0000D184o
.text$x:0000C921                 lea     ecx, [ebp-34Ch]
.text$x:0000C927                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:0000C927 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$24 endp
.text$x:0000C927
.text$x:0000C92C
.text$x:0000C92C ; =============== S U B R O U T I N E =======================================
.text$x:0000C92C
.text$x:0000C92C
.text$x:0000C92C __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$25 proc near
.text$x:0000C92C                                         ; DATA XREF: .xdata$x:0000D18Co
.text$x:0000C92C                 lea     ecx, [ebp-46Ch]
.text$x:0000C932                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000C932 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$25 endp
.text$x:0000C932
.text$x:0000C937
.text$x:0000C937 ; =============== S U B R O U T I N E =======================================
.text$x:0000C937
.text$x:0000C937
.text$x:0000C937 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$26 proc near
.text$x:0000C937                                         ; DATA XREF: .xdata$x:0000D194o
.text$x:0000C937                 lea     ecx, [ebp-478h]
.text$x:0000C93D                 jmp     ??1?$CObjArray@_N@@QAE@XZ ; CObjArray<bool>::~CObjArray<bool>(void)
.text$x:0000C93D __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$26 endp
.text$x:0000C93D
.text$x:0000C942
.text$x:0000C942 ; =============== S U B R O U T I N E =======================================
.text$x:0000C942
.text$x:0000C942
.text$x:0000C942 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$27 proc near
.text$x:0000C942                                         ; DATA XREF: .xdata$x:0000D19Co
.text$x:0000C942                 mov     eax, [ebp-70Ch]
.text$x:0000C948                 push    eax             ; void *
.text$x:0000C949                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C94E                 pop     ecx
.text$x:0000C94F                 retn
.text$x:0000C94F __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$27 endp
.text$x:0000C94F
.text$x:0000C950
.text$x:0000C950 ; =============== S U B R O U T I N E =======================================
.text$x:0000C950
.text$x:0000C950
.text$x:0000C950 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$28 proc near
.text$x:0000C950                                         ; DATA XREF: .xdata$x:0000D1A4o
.text$x:0000C950                 lea     ecx, [ebp-4B4h]
.text$x:0000C956                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:0000C956 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$28 endp
.text$x:0000C956
.text$x:0000C95B
.text$x:0000C95B ; =============== S U B R O U T I N E =======================================
.text$x:0000C95B
.text$x:0000C95B
.text$x:0000C95B __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$29 proc near
.text$x:0000C95B                                         ; DATA XREF: .xdata$x:0000D1ACo
.text$x:0000C95B                 lea     ecx, [ebp-588h]
.text$x:0000C961                 jmp     ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text$x:0000C961 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$29 endp
.text$x:0000C961
.text$x:0000C966
.text$x:0000C966 ; =============== S U B R O U T I N E =======================================
.text$x:0000C966
.text$x:0000C966
.text$x:0000C966 __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$30 proc near
.text$x:0000C966                                         ; DATA XREF: .xdata$x:0000D1B4o
.text$x:0000C966                 lea     ecx, [ebp-634h] ; this
.text$x:0000C96C                 jmp     ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text$x:0000C96C __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$30 endp
.text$x:0000C96C
.text$x:0000C971
.text$x:0000C971 ; =============== S U B R O U T I N E =======================================
.text$x:0000C971
.text$x:0000C971
.text$x:0000C971 __ehhandler$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z proc near
.text$x:0000C971                                         ; DATA XREF: CArc::OpenStream2(COpenOptions const &)+5o
.text$x:0000C971
.text$x:0000C971 arg_4           = dword ptr  8
.text$x:0000C971
.text$x:0000C971                 mov     edx, [esp+arg_4]
.text$x:0000C975                 lea     eax, [edx+0Ch]
.text$x:0000C978                 mov     ecx, [edx-848h]
.text$x:0000C97E                 xor     ecx, eax
.text$x:0000C980                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C985                 mov     ecx, [edx-4]
.text$x:0000C988                 xor     ecx, eax
.text$x:0000C98A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C98F                 mov     eax, offset __ehfuncinfo$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z
.text$x:0000C994                 jmp     ___CxxFrameHandler3
.text$x:0000C994 __ehhandler$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z endp
.text$x:0000C994
.text$x:0000C999
.text$x:0000C999 ; =============== S U B R O U T I N E =======================================
.text$x:0000C999
.text$x:0000C999
.text$x:0000C999 __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$0 proc near
.text$x:0000C999                                         ; DATA XREF: .xdata$x:0000D1E0o
.text$x:0000C999                 lea     ecx, [ebp-0CCh] ; this
.text$x:0000C99F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000C99F __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$0 endp
.text$x:0000C99F
.text$x:0000C9A4
.text$x:0000C9A4 ; =============== S U B R O U T I N E =======================================
.text$x:0000C9A4
.text$x:0000C9A4
.text$x:0000C9A4 __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$1 proc near
.text$x:0000C9A4                                         ; DATA XREF: .xdata$x:0000D1E8o
.text$x:0000C9A4                 lea     ecx, [ebp-24h]  ; this
.text$x:0000C9A7                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C9A7 __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$1 endp
.text$x:0000C9A7
.text$x:0000C9AC
.text$x:0000C9AC ; =============== S U B R O U T I N E =======================================
.text$x:0000C9AC
.text$x:0000C9AC
.text$x:0000C9AC __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$2 proc near
.text$x:0000C9AC                                         ; DATA XREF: .xdata$x:0000D1F0o
.text$x:0000C9AC                 lea     ecx, [ebp-40h]  ; this
.text$x:0000C9AF                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C9AF __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$2 endp
.text$x:0000C9AF
.text$x:0000C9B4
.text$x:0000C9B4 ; =============== S U B R O U T I N E =======================================
.text$x:0000C9B4
.text$x:0000C9B4
.text$x:0000C9B4 __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$3 proc near
.text$x:0000C9B4                                         ; DATA XREF: .xdata$x:0000D1F8o
.text$x:0000C9B4                 lea     ecx, [ebp-5Ch]  ; this
.text$x:0000C9B7                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C9B7 __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$3 endp
.text$x:0000C9B7
.text$x:0000C9BC
.text$x:0000C9BC ; =============== S U B R O U T I N E =======================================
.text$x:0000C9BC
.text$x:0000C9BC
.text$x:0000C9BC __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$4 proc near
.text$x:0000C9BC                                         ; DATA XREF: .xdata$x:0000D200o
.text$x:0000C9BC                 lea     ecx, [ebp-7Ch]  ; this
.text$x:0000C9BF                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C9BF __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$4 endp
.text$x:0000C9BF
.text$x:0000C9C4
.text$x:0000C9C4 ; =============== S U B R O U T I N E =======================================
.text$x:0000C9C4
.text$x:0000C9C4
.text$x:0000C9C4 __ehhandler$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z proc near
.text$x:0000C9C4                                         ; DATA XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+5o
.text$x:0000C9C4
.text$x:0000C9C4 arg_4           = dword ptr  8
.text$x:0000C9C4
.text$x:0000C9C4                 mov     edx, [esp+arg_4]
.text$x:0000C9C8                 lea     eax, [edx+0Ch]
.text$x:0000C9CB                 mov     ecx, [edx-0ECh]
.text$x:0000C9D1                 xor     ecx, eax
.text$x:0000C9D3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C9D8                 mov     eax, offset __ehfuncinfo$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z
.text$x:0000C9DD                 jmp     ___CxxFrameHandler3
.text$x:0000C9DD __ehhandler$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z endp
.text$x:0000C9DD
.text$x:0000C9E2
.text$x:0000C9E2 ; =============== S U B R O U T I N E =======================================
.text$x:0000C9E2
.text$x:0000C9E2
.text$x:0000C9E2 __unwindfunclet$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z$0 proc near
.text$x:0000C9E2                                         ; DATA XREF: .xdata$x:0000D208o
.text$x:0000C9E2                 lea     ecx, [ebp-20h]  ; this
.text$x:0000C9E5                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000C9E5 __unwindfunclet$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z$0 endp
.text$x:0000C9E5
.text$x:0000C9EA
.text$x:0000C9EA ; =============== S U B R O U T I N E =======================================
.text$x:0000C9EA
.text$x:0000C9EA
.text$x:0000C9EA __ehhandler$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z proc near
.text$x:0000C9EA                                         ; DATA XREF: Archive_GetItem_Size(IInArchive *,uint,unsigned __int64 &,bool &)+5o
.text$x:0000C9EA
.text$x:0000C9EA arg_4           = dword ptr  8
.text$x:0000C9EA
.text$x:0000C9EA                 mov     edx, [esp+arg_4]
.text$x:0000C9EE                 lea     eax, [edx+0Ch]
.text$x:0000C9F1                 mov     ecx, [edx-3Ch]
.text$x:0000C9F4                 xor     ecx, eax
.text$x:0000C9F6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C9FB                 mov     eax, offset __ehfuncinfo$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z
.text$x:0000CA00                 jmp     ___CxxFrameHandler3
.text$x:0000CA00 __ehhandler$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z endp
.text$x:0000CA00
.text$x:0000CA05
.text$x:0000CA05 ; =============== S U B R O U T I N E =======================================
.text$x:0000CA05
.text$x:0000CA05
.text$x:0000CA05 __unwindfunclet$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z$0 proc near
.text$x:0000CA05                                         ; DATA XREF: .xdata$x:0000D234o
.text$x:0000CA05                 lea     ecx, [ebp+0Ch]
.text$x:0000CA08                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:0000CA08 __unwindfunclet$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z$0 endp
.text$x:0000CA08
.text$x:0000CA0D
.text$x:0000CA0D ; =============== S U B R O U T I N E =======================================
.text$x:0000CA0D
.text$x:0000CA0D
.text$x:0000CA0D __ehhandler$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z proc near
.text$x:0000CA0D                                         ; DATA XREF: FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *)+5o
.text$x:0000CA0D
.text$x:0000CA0D arg_4           = dword ptr  8
.text$x:0000CA0D
.text$x:0000CA0D                 mov     edx, [esp+arg_4]
.text$x:0000CA11                 lea     eax, [edx+0Ch]
.text$x:0000CA14                 mov     ecx, [edx-10h]
.text$x:0000CA17                 xor     ecx, eax
.text$x:0000CA19                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CA1E                 mov     eax, offset __ehfuncinfo$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z
.text$x:0000CA23                 jmp     ___CxxFrameHandler3
.text$x:0000CA23 __ehhandler$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z endp
.text$x:0000CA23
.text$x:0000CA28
.text$x:0000CA28 ; =============== S U B R O U T I N E =======================================
.text$x:0000CA28
.text$x:0000CA28
.text$x:0000CA28 __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$0 proc near
.text$x:0000CA28                                         ; DATA XREF: .xdata$x:0000D284o
.text$x:0000CA28                 lea     ecx, [ebp-3Ch]  ; this
.text$x:0000CA2B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CA2B __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$0 endp
.text$x:0000CA2B
.text$x:0000CA30
.text$x:0000CA30 ; =============== S U B R O U T I N E =======================================
.text$x:0000CA30
.text$x:0000CA30
.text$x:0000CA30 __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$1 proc near
.text$x:0000CA30                                         ; DATA XREF: .xdata$x:0000D28Co
.text$x:0000CA30                 lea     ecx, [ebp-50h]  ; this
.text$x:0000CA33                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CA33 __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$1 endp
.text$x:0000CA33
.text$x:0000CA38
.text$x:0000CA38 ; =============== S U B R O U T I N E =======================================
.text$x:0000CA38
.text$x:0000CA38
.text$x:0000CA38 __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$2 proc near
.text$x:0000CA38                                         ; DATA XREF: .xdata$x:0000D294o
.text$x:0000CA38                 lea     ecx, [ebp-70h]  ; this
.text$x:0000CA3B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CA3B __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$2 endp
.text$x:0000CA3B
.text$x:0000CA40
.text$x:0000CA40 ; =============== S U B R O U T I N E =======================================
.text$x:0000CA40
.text$x:0000CA40
.text$x:0000CA40 __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$3 proc near
.text$x:0000CA40                                         ; DATA XREF: .xdata$x:0000D29Co
.text$x:0000CA40                 lea     ecx, [ebp-7Ch]  ; this
.text$x:0000CA43                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CA43 __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$3 endp
.text$x:0000CA43
.text$x:0000CA48
.text$x:0000CA48 ; =============== S U B R O U T I N E =======================================
.text$x:0000CA48
.text$x:0000CA48
.text$x:0000CA48 __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$4 proc near
.text$x:0000CA48                                         ; DATA XREF: .xdata$x:0000D2A4o
.text$x:0000CA48                 lea     ecx, [ebp-88h]  ; this
.text$x:0000CA4E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CA4E __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$4 endp
.text$x:0000CA4E
.text$x:0000CA53
.text$x:0000CA53 ; =============== S U B R O U T I N E =======================================
.text$x:0000CA53
.text$x:0000CA53
.text$x:0000CA53 __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$5 proc near
.text$x:0000CA53                                         ; DATA XREF: .xdata$x:0000D2ACo
.text$x:0000CA53                 lea     ecx, [ebp-94h]  ; this
.text$x:0000CA59                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CA59 __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$5 endp
.text$x:0000CA59
.text$x:0000CA5E
.text$x:0000CA5E ; =============== S U B R O U T I N E =======================================
.text$x:0000CA5E
.text$x:0000CA5E
.text$x:0000CA5E __ehhandler$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z proc near
.text$x:0000CA5E                                         ; DATA XREF: CArc::OpenStream(COpenOptions const &)+5o
.text$x:0000CA5E
.text$x:0000CA5E arg_4           = dword ptr  8
.text$x:0000CA5E
.text$x:0000CA5E                 mov     edx, [esp+arg_4]
.text$x:0000CA62                 lea     eax, [edx+0Ch]
.text$x:0000CA65                 mov     ecx, [edx-0BCh]
.text$x:0000CA6B                 xor     ecx, eax
.text$x:0000CA6D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CA72                 mov     eax, offset __ehfuncinfo$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z
.text$x:0000CA77                 jmp     ___CxxFrameHandler3
.text$x:0000CA77 __ehhandler$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z endp
.text$x:0000CA77
.text$x:0000CA7C
.text$x:0000CA7C ; =============== S U B R O U T I N E =======================================
.text$x:0000CA7C
.text$x:0000CA7C
.text$x:0000CA7C __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$0 proc near
.text$x:0000CA7C                                         ; DATA XREF: .xdata$x:0000D2B4o
.text$x:0000CA7C                 lea     ecx, [ebp-18h]
.text$x:0000CA7F                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:0000CA7F __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$0 endp
.text$x:0000CA7F
.text$x:0000CA84
.text$x:0000CA84 ; =============== S U B R O U T I N E =======================================
.text$x:0000CA84
.text$x:0000CA84
.text$x:0000CA84 __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$1 proc near
.text$x:0000CA84                                         ; DATA XREF: .xdata$x:0000D2BCo
.text$x:0000CA84                 lea     ecx, [ebp-24h]
.text$x:0000CA87                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:0000CA87 __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$1 endp
.text$x:0000CA87
.text$x:0000CA8C
.text$x:0000CA8C ; =============== S U B R O U T I N E =======================================
.text$x:0000CA8C
.text$x:0000CA8C
.text$x:0000CA8C __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$2 proc near
.text$x:0000CA8C                                         ; DATA XREF: .xdata$x:0000D2C4o
.text$x:0000CA8C                 mov     eax, [ebp-38h]
.text$x:0000CA8F                 push    eax             ; void *
.text$x:0000CA90                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000CA95                 pop     ecx
.text$x:0000CA96                 retn
.text$x:0000CA96 __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$2 endp
.text$x:0000CA96
.text$x:0000CA97
.text$x:0000CA97 ; =============== S U B R O U T I N E =======================================
.text$x:0000CA97
.text$x:0000CA97
.text$x:0000CA97 __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$3 proc near
.text$x:0000CA97                                         ; DATA XREF: .xdata$x:0000D2CCo
.text$x:0000CA97                 mov     eax, [ebp-40h]
.text$x:0000CA9A                 push    eax             ; void *
.text$x:0000CA9B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000CAA0                 pop     ecx
.text$x:0000CAA1                 retn
.text$x:0000CAA1 __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$3 endp
.text$x:0000CAA1
.text$x:0000CAA2
.text$x:0000CAA2 ; =============== S U B R O U T I N E =======================================
.text$x:0000CAA2
.text$x:0000CAA2
.text$x:0000CAA2 __ehhandler$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z proc near
.text$x:0000CAA2                                         ; DATA XREF: CArc::OpenStreamOrFile(COpenOptions &)+5o
.text$x:0000CAA2
.text$x:0000CAA2 arg_4           = dword ptr  8
.text$x:0000CAA2
.text$x:0000CAA2                 mov     edx, [esp+arg_4]
.text$x:0000CAA6                 lea     eax, [edx+0Ch]
.text$x:0000CAA9                 mov     ecx, [edx-50h]
.text$x:0000CAAC                 xor     ecx, eax
.text$x:0000CAAE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CAB3                 mov     eax, offset __ehfuncinfo$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z
.text$x:0000CAB8                 jmp     ___CxxFrameHandler3
.text$x:0000CAB8 __ehhandler$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z endp
.text$x:0000CAB8
.text$x:0000CABD
.text$x:0000CABD ; =============== S U B R O U T I N E =======================================
.text$x:0000CABD
.text$x:0000CABD
.text$x:0000CABD __unwindfunclet$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ$0 proc near
.text$x:0000CABD                                         ; DATA XREF: .xdata$x:0000D2F8o
.text$x:0000CABD                 lea     ecx, [ebp-1Ch]
.text$x:0000CAC0                 jmp     ??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::~CMyComPtr<IArchiveKeepModeForNextOpen>(void)
.text$x:0000CAC0 __unwindfunclet$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ$0 endp
.text$x:0000CAC0
.text$x:0000CAC5
.text$x:0000CAC5 ; =============== S U B R O U T I N E =======================================
.text$x:0000CAC5
.text$x:0000CAC5
.text$x:0000CAC5 __ehhandler$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ proc near
.text$x:0000CAC5                                         ; DATA XREF: CArchiveLink::KeepModeForNextOpen(void)+5o
.text$x:0000CAC5
.text$x:0000CAC5 arg_4           = dword ptr  8
.text$x:0000CAC5
.text$x:0000CAC5                 mov     edx, [esp+arg_4]
.text$x:0000CAC9                 lea     eax, [edx+0Ch]
.text$x:0000CACC                 mov     ecx, [edx-24h]
.text$x:0000CACF                 xor     ecx, eax
.text$x:0000CAD1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CAD6                 mov     eax, offset __ehfuncinfo$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ
.text$x:0000CADB                 jmp     ___CxxFrameHandler3
.text$x:0000CADB __ehhandler$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ endp
.text$x:0000CADB
.text$x:0000CAE0
.text$x:0000CAE0 ; =============== S U B R O U T I N E =======================================
.text$x:0000CAE0
.text$x:0000CAE0
.text$x:0000CAE0 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0 proc near
.text$x:0000CAE0                                         ; DATA XREF: .xdata$x:0000D348o
.text$x:0000CAE0                 lea     ecx, [ebp-120h] ; this
.text$x:0000CAE6                 jmp     ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text$x:0000CAE6 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0 endp
.text$x:0000CAE6
.text$x:0000CAEB
.text$x:0000CAEB ; =============== S U B R O U T I N E =======================================
.text$x:0000CAEB
.text$x:0000CAEB
.text$x:0000CAEB __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1 proc near
.text$x:0000CAEB                                         ; DATA XREF: .xdata$x:0000D350o
.text$x:0000CAEB                 lea     ecx, [ebp-144h] ; this
.text$x:0000CAF1                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000CAF1 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1 endp
.text$x:0000CAF1
.text$x:0000CAF6
.text$x:0000CAF6 ; =============== S U B R O U T I N E =======================================
.text$x:0000CAF6
.text$x:0000CAF6
.text$x:0000CAF6 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2 proc near
.text$x:0000CAF6                                         ; DATA XREF: .xdata$x:0000D358o
.text$x:0000CAF6                 lea     ecx, [ebp-164h]
.text$x:0000CAFC                 jmp     ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)
.text$x:0000CAFC __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2 endp
.text$x:0000CAFC
.text$x:0000CB01
.text$x:0000CB01 ; =============== S U B R O U T I N E =======================================
.text$x:0000CB01
.text$x:0000CB01
.text$x:0000CB01 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3 proc near
.text$x:0000CB01                                         ; DATA XREF: .xdata$x:0000D360o
.text$x:0000CB01                 lea     ecx, [ebp-170h]
.text$x:0000CB07                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:0000CB07 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3 endp
.text$x:0000CB07
.text$x:0000CB0C
.text$x:0000CB0C ; =============== S U B R O U T I N E =======================================
.text$x:0000CB0C
.text$x:0000CB0C
.text$x:0000CB0C __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4 proc near
.text$x:0000CB0C                                         ; DATA XREF: .xdata$x:0000D368o
.text$x:0000CB0C                 lea     ecx, [ebp-17Ch]
.text$x:0000CB12                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:0000CB12 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4 endp
.text$x:0000CB12
.text$x:0000CB17
.text$x:0000CB17 ; =============== S U B R O U T I N E =======================================
.text$x:0000CB17
.text$x:0000CB17
.text$x:0000CB17 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5 proc near
.text$x:0000CB17                                         ; DATA XREF: .xdata$x:0000D370o
.text$x:0000CB17                 lea     ecx, [ebp-264h] ; this
.text$x:0000CB1D                 jmp     ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text$x:0000CB1D __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5 endp
.text$x:0000CB1D
.text$x:0000CB22
.text$x:0000CB22 ; =============== S U B R O U T I N E =======================================
.text$x:0000CB22
.text$x:0000CB22
.text$x:0000CB22 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6 proc near
.text$x:0000CB22                                         ; DATA XREF: .xdata$x:0000D378o
.text$x:0000CB22                 lea     ecx, [ebp-284h]
.text$x:0000CB28                 jmp     ??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::~CMyComPtr<IArchiveOpenSetSubArchiveName>(void)
.text$x:0000CB28 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6 endp
.text$x:0000CB28
.text$x:0000CB2D
.text$x:0000CB2D ; =============== S U B R O U T I N E =======================================
.text$x:0000CB2D
.text$x:0000CB2D
.text$x:0000CB2D __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7 proc near
.text$x:0000CB2D                                         ; DATA XREF: .xdata$x:0000D380o
.text$x:0000CB2D                 lea     ecx, [ebp-298h]
.text$x:0000CB33                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:0000CB33 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7 endp
.text$x:0000CB33
.text$x:0000CB38
.text$x:0000CB38 ; =============== S U B R O U T I N E =======================================
.text$x:0000CB38
.text$x:0000CB38
.text$x:0000CB38 __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$8 proc near
.text$x:0000CB38                                         ; DATA XREF: .xdata$x:0000D388o
.text$x:0000CB38                 lea     ecx, [ebp-2F8h] ; this
.text$x:0000CB3E                 jmp     ??1COpenOptions@@QAE@XZ ; COpenOptions::~COpenOptions(void)
.text$x:0000CB3E __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$8 endp
.text$x:0000CB3E
.text$x:0000CB43
.text$x:0000CB43 ; =============== S U B R O U T I N E =======================================
.text$x:0000CB43
.text$x:0000CB43
.text$x:0000CB43 __ehhandler$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z proc near
.text$x:0000CB43                                         ; DATA XREF: CArchiveLink::Open(COpenOptions &)+5o
.text$x:0000CB43
.text$x:0000CB43 arg_4           = dword ptr  8
.text$x:0000CB43
.text$x:0000CB43                 mov     edx, [esp+arg_4]
.text$x:0000CB47                 lea     eax, [edx+0Ch]
.text$x:0000CB4A                 mov     ecx, [edx-358h]
.text$x:0000CB50                 xor     ecx, eax
.text$x:0000CB52                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CB57                 mov     eax, offset __ehfuncinfo$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
.text$x:0000CB5C                 jmp     ___CxxFrameHandler3
.text$x:0000CB5C __ehhandler$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z endp
.text$x:0000CB5C
.text$x:0000CB61
.text$x:0000CB61 ; =============== S U B R O U T I N E =======================================
.text$x:0000CB61
.text$x:0000CB61
.text$x:0000CB61 __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$0 proc near
.text$x:0000CB61                                         ; DATA XREF: .xdata$x:0000D3B4o
.text$x:0000CB61                 mov     eax, [ebp-5Ch]
.text$x:0000CB64                 push    eax             ; void *
.text$x:0000CB65                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000CB6A                 pop     ecx
.text$x:0000CB6B                 retn
.text$x:0000CB6B __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$0 endp
.text$x:0000CB6B
.text$x:0000CB6C
.text$x:0000CB6C ; =============== S U B R O U T I N E =======================================
.text$x:0000CB6C
.text$x:0000CB6C
.text$x:0000CB6C __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$1 proc near
.text$x:0000CB6C                                         ; DATA XREF: .xdata$x:0000D3BCo
.text$x:0000CB6C                 lea     ecx, [ebp-1Ch]
.text$x:0000CB6F                 jmp     ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text$x:0000CB6F __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$1 endp
.text$x:0000CB6F
.text$x:0000CB74
.text$x:0000CB74 ; =============== S U B R O U T I N E =======================================
.text$x:0000CB74
.text$x:0000CB74
.text$x:0000CB74 __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$2 proc near
.text$x:0000CB74                                         ; DATA XREF: .xdata$x:0000D3C4o
.text$x:0000CB74                 lea     ecx, [ebp-30h]  ; this
.text$x:0000CB77                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CB77 __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$2 endp
.text$x:0000CB77
.text$x:0000CB7C
.text$x:0000CB7C ; =============== S U B R O U T I N E =======================================
.text$x:0000CB7C
.text$x:0000CB7C
.text$x:0000CB7C __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$3 proc near
.text$x:0000CB7C                                         ; DATA XREF: .xdata$x:0000D3CCo
.text$x:0000CB7C                 lea     ecx, [ebp-44h]  ; this
.text$x:0000CB7F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CB7F __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$3 endp
.text$x:0000CB7F
.text$x:0000CB84
.text$x:0000CB84 ; =============== S U B R O U T I N E =======================================
.text$x:0000CB84
.text$x:0000CB84
.text$x:0000CB84 __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$4 proc near
.text$x:0000CB84                                         ; DATA XREF: .xdata$x:0000D3D4o
.text$x:0000CB84                 lea     ecx, [ebp-6Ch]  ; this
.text$x:0000CB87                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CB87 __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$4 endp
.text$x:0000CB87
.text$x:0000CB8C
.text$x:0000CB8C ; =============== S U B R O U T I N E =======================================
.text$x:0000CB8C
.text$x:0000CB8C
.text$x:0000CB8C __ehhandler$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z proc near
.text$x:0000CB8C                                         ; DATA XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+5o
.text$x:0000CB8C
.text$x:0000CB8C arg_4           = dword ptr  8
.text$x:0000CB8C
.text$x:0000CB8C                 mov     edx, [esp+arg_4]
.text$x:0000CB90                 lea     eax, [edx+0Ch]
.text$x:0000CB93                 mov     ecx, [edx-7Ch]
.text$x:0000CB96                 xor     ecx, eax
.text$x:0000CB98                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CB9D                 mov     eax, offset __ehfuncinfo$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z
.text$x:0000CBA2                 jmp     ___CxxFrameHandler3
.text$x:0000CBA2 __ehhandler$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z endp
.text$x:0000CBA2
.text$x:0000CBA7
.text$x:0000CBA7 ; =============== S U B R O U T I N E =======================================
.text$x:0000CBA7
.text$x:0000CBA7
.text$x:0000CBA7 __unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$0 proc near
.text$x:0000CBA7                                         ; DATA XREF: .xdata$x:0000D3DCo
.text$x:0000CBA7                 lea     ecx, [ebp-30h]
.text$x:0000CBAA                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:0000CBAA __unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$0 endp
.text$x:0000CBAA
.text$x:0000CBAF
.text$x:0000CBAF ; =============== S U B R O U T I N E =======================================
.text$x:0000CBAF
.text$x:0000CBAF
.text$x:0000CBAF __unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$1 proc near
.text$x:0000CBAF                                         ; DATA XREF: .xdata$x:0000D3E4o
.text$x:0000CBAF                 mov     eax, [ebp-64h]
.text$x:0000CBB2                 push    eax             ; void *
.text$x:0000CBB3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000CBB8                 pop     ecx
.text$x:0000CBB9                 retn
.text$x:0000CBB9 __unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$1 endp
.text$x:0000CBB9
.text$x:0000CBBA
.text$x:0000CBBA ; =============== S U B R O U T I N E =======================================
.text$x:0000CBBA
.text$x:0000CBBA
.text$x:0000CBBA __ehhandler$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z proc near
.text$x:0000CBBA                                         ; DATA XREF: CArc::ReOpen(COpenOptions const &)+5o
.text$x:0000CBBA
.text$x:0000CBBA arg_4           = dword ptr  8
.text$x:0000CBBA
.text$x:0000CBBA                 mov     edx, [esp+arg_4]
.text$x:0000CBBE                 lea     eax, [edx+0Ch]
.text$x:0000CBC1                 mov     ecx, [edx-7Ch]
.text$x:0000CBC4                 xor     ecx, eax
.text$x:0000CBC6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CBCB                 mov     eax, offset __ehfuncinfo$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z
.text$x:0000CBD0                 jmp     ___CxxFrameHandler3
.text$x:0000CBD0 __ehhandler$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z endp
.text$x:0000CBD0
.text$x:0000CBD5
.text$x:0000CBD5 ; =============== S U B R O U T I N E =======================================
.text$x:0000CBD5
.text$x:0000CBD5
.text$x:0000CBD5 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0 proc near
.text$x:0000CBD5                                         ; DATA XREF: .xdata$x:0000D434o
.text$x:0000CBD5                 lea     ecx, [ebp-20h]
.text$x:0000CBD8                 jmp     ??1?$CObjectVector@UCOpenType@@@@QAE@XZ ; CObjectVector<COpenType>::~CObjectVector<COpenType>(void)
.text$x:0000CBD8 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0 endp
.text$x:0000CBD8
.text$x:0000CBDD
.text$x:0000CBDD ; =============== S U B R O U T I N E =======================================
.text$x:0000CBDD
.text$x:0000CBDD
.text$x:0000CBDD __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1 proc near
.text$x:0000CBDD                                         ; DATA XREF: .xdata$x:0000D43Co
.text$x:0000CBDD                 lea     ecx, [ebp-34h]
.text$x:0000CBE0                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:0000CBE0 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1 endp
.text$x:0000CBE0
.text$x:0000CBE5
.text$x:0000CBE5 ; =============== S U B R O U T I N E =======================================
.text$x:0000CBE5
.text$x:0000CBE5
.text$x:0000CBE5 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2 proc near
.text$x:0000CBE5                                         ; DATA XREF: .xdata$x:0000D444o
.text$x:0000CBE5                 mov     eax, [ebp-94h]
.text$x:0000CBEB                 push    eax             ; void *
.text$x:0000CBEC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000CBF1                 pop     ecx
.text$x:0000CBF2                 retn
.text$x:0000CBF2 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2 endp
.text$x:0000CBF2
.text$x:0000CBF3
.text$x:0000CBF3 ; =============== S U B R O U T I N E =======================================
.text$x:0000CBF3
.text$x:0000CBF3
.text$x:0000CBF3 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3 proc near
.text$x:0000CBF3                                         ; DATA XREF: .xdata$x:0000D44Co
.text$x:0000CBF3                 lea     ecx, [ebp-44h]
.text$x:0000CBF6                 jmp     ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text$x:0000CBF6 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3 endp
.text$x:0000CBF6
.text$x:0000CBFB
.text$x:0000CBFB ; =============== S U B R O U T I N E =======================================
.text$x:0000CBFB
.text$x:0000CBFB
.text$x:0000CBFB __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4 proc near
.text$x:0000CBFB                                         ; DATA XREF: .xdata$x:0000D454o
.text$x:0000CBFB                 lea     ecx, [ebp-58h]  ; this
.text$x:0000CBFE                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CBFE __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4 endp
.text$x:0000CBFE
.text$x:0000CC03
.text$x:0000CC03 ; =============== S U B R O U T I N E =======================================
.text$x:0000CC03
.text$x:0000CC03
.text$x:0000CC03 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5 proc near
.text$x:0000CC03                                         ; DATA XREF: .xdata$x:0000D45Co
.text$x:0000CC03                 lea     ecx, [ebp-6Ch]  ; this
.text$x:0000CC06                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CC06 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5 endp
.text$x:0000CC06
.text$x:0000CC0B
.text$x:0000CC0B ; =============== S U B R O U T I N E =======================================
.text$x:0000CC0B
.text$x:0000CC0B
.text$x:0000CC0B __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6 proc near
.text$x:0000CC0B                                         ; DATA XREF: .xdata$x:0000D464o
.text$x:0000CC0B                 mov     eax, [ebp-9Ch]
.text$x:0000CC11                 push    eax             ; void *
.text$x:0000CC12                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000CC17                 pop     ecx
.text$x:0000CC18                 retn
.text$x:0000CC18 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6 endp
.text$x:0000CC18
.text$x:0000CC19
.text$x:0000CC19 ; =============== S U B R O U T I N E =======================================
.text$x:0000CC19
.text$x:0000CC19
.text$x:0000CC19 __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7 proc near
.text$x:0000CC19                                         ; DATA XREF: .xdata$x:0000D46Co
.text$x:0000CC19                 lea     ecx, [ebp-7Ch]
.text$x:0000CC1C                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:0000CC1C __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7 endp
.text$x:0000CC1C
.text$x:0000CC21
.text$x:0000CC21 ; =============== S U B R O U T I N E =======================================
.text$x:0000CC21
.text$x:0000CC21
.text$x:0000CC21 __ehhandler$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z proc near
.text$x:0000CC21                                         ; DATA XREF: CArchiveLink::ReOpen(COpenOptions &)+5o
.text$x:0000CC21
.text$x:0000CC21 arg_4           = dword ptr  8
.text$x:0000CC21
.text$x:0000CC21                 mov     edx, [esp+arg_4]
.text$x:0000CC25                 lea     eax, [edx+0Ch]
.text$x:0000CC28                 mov     ecx, [edx-0ACh]
.text$x:0000CC2E                 xor     ecx, eax
.text$x:0000CC30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CC35                 mov     eax, offset __ehfuncinfo$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
.text$x:0000CC3A                 jmp     ___CxxFrameHandler3
.text$x:0000CC3A __ehhandler$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z endp
.text$x:0000CC3A
.text$x:0000CC3F
.text$x:0000CC3F ; =============== S U B R O U T I N E =======================================
.text$x:0000CC3F
.text$x:0000CC3F
.text$x:0000CC3F __unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$0 proc near
.text$x:0000CC3F                                         ; DATA XREF: .xdata$x:0000D474o
.text$x:0000CC3F                 lea     ecx, [ebp-20h]  ; this
.text$x:0000CC42                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CC42 __unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$0 endp
.text$x:0000CC42
.text$x:0000CC47
.text$x:0000CC47 ; =============== S U B R O U T I N E =======================================
.text$x:0000CC47
.text$x:0000CC47
.text$x:0000CC47 __unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$1 proc near
.text$x:0000CC47                                         ; DATA XREF: .xdata$x:0000D47Co
.text$x:0000CC47                 lea     ecx, [ebp-50h]  ; this
.text$x:0000CC4A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CC4A __unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$1 endp
.text$x:0000CC4A
.text$x:0000CC4F
.text$x:0000CC4F ; =============== S U B R O U T I N E =======================================
.text$x:0000CC4F
.text$x:0000CC4F
.text$x:0000CC4F __unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$2 proc near
.text$x:0000CC4F                                         ; DATA XREF: .xdata$x:0000D484o
.text$x:0000CC4F                 lea     ecx, [ebp-40h]  ; this
.text$x:0000CC52                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CC52 __unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$2 endp
.text$x:0000CC52
.text$x:0000CC57
.text$x:0000CC57 ; =============== S U B R O U T I N E =======================================
.text$x:0000CC57
.text$x:0000CC57
.text$x:0000CC57 __ehhandler$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z proc near
.text$x:0000CC57                                         ; DATA XREF: ParseType(CCodecs &,UString const &,COpenType &)+5o
.text$x:0000CC57
.text$x:0000CC57 arg_4           = dword ptr  8
.text$x:0000CC57
.text$x:0000CC57                 mov     edx, [esp+arg_4]
.text$x:0000CC5B                 lea     eax, [edx+0Ch]
.text$x:0000CC5E                 mov     ecx, [edx-5Ch]
.text$x:0000CC61                 xor     ecx, eax
.text$x:0000CC63                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CC68                 mov     eax, offset __ehfuncinfo$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z
.text$x:0000CC6D                 jmp     ___CxxFrameHandler3
.text$x:0000CC6D __ehhandler$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z endp
.text$x:0000CC6D
.text$x:0000CC72
.text$x:0000CC72 ; =============== S U B R O U T I N E =======================================
.text$x:0000CC72
.text$x:0000CC72
.text$x:0000CC72 __unwindfunclet$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z$0 proc near
.text$x:0000CC72                                         ; DATA XREF: .xdata$x:0000D4B0o
.text$x:0000CC72                 lea     ecx, [ebp-24h]  ; this
.text$x:0000CC75                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000CC75 __unwindfunclet$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z$0 endp
.text$x:0000CC75
.text$x:0000CC7A
.text$x:0000CC7A ; =============== S U B R O U T I N E =======================================
.text$x:0000CC7A
.text$x:0000CC7A
.text$x:0000CC7A __ehhandler$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z proc near
.text$x:0000CC7A                                         ; DATA XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+5o
.text$x:0000CC7A
.text$x:0000CC7A arg_4           = dword ptr  8
.text$x:0000CC7A
.text$x:0000CC7A                 mov     edx, [esp+arg_4]
.text$x:0000CC7E                 lea     eax, [edx+0Ch]
.text$x:0000CC81                 mov     ecx, [edx-50h]
.text$x:0000CC84                 xor     ecx, eax
.text$x:0000CC86                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CC8B                 mov     eax, offset __ehfuncinfo$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z
.text$x:0000CC90                 jmp     ___CxxFrameHandler3
.text$x:0000CC90 __ehhandler$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z endp
.text$x:0000CC90
.text$x:0000CC90 ; ---------------------------------------------------------------------------
.text$x:0000CC95                 align 4
.text$x:0000CC95 _text$x         ends
.text$x:0000CC95
.xdata$x:0000CC98 ; ===========================================================================
.xdata$x:0000CC98
.xdata$x:0000CC98 ; Segment type: Pure data
.xdata$x:0000CC98 ; Segment permissions: Read
.xdata$x:0000CC98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC98                 assume cs:_xdata$x
.xdata$x:0000CC98                 ;org 0CC98h
.xdata$x:0000CC98 __unwindtable$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z db 0FFh
.xdata$x:0000CC98                                         ; DATA XREF: .xdata$x:0000CCA8o
.xdata$x:0000CC99                 db 0FFh
.xdata$x:0000CC9A                 db 0FFh
.xdata$x:0000CC9B                 db 0FFh
.xdata$x:0000CC9C                 dd offset __unwindfunclet$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z$0
.xdata$x:0000CCA0 __ehfuncinfo$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z db  22h ; "
.xdata$x:0000CCA0                                         ; DATA XREF: __ehhandler$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z+14o
.xdata$x:0000CCA1                 db    5
.xdata$x:0000CCA2                 db  93h ; ô
.xdata$x:0000CCA3                 db  19h
.xdata$x:0000CCA4                 db    1
.xdata$x:0000CCA5                 db    0
.xdata$x:0000CCA6                 db    0
.xdata$x:0000CCA7                 db    0
.xdata$x:0000CCA8                 dd offset __unwindtable$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z
.xdata$x:0000CCAC                 align 20h
.xdata$x:0000CCC0                 db    1
.xdata$x:0000CCC1                 db    0
.xdata$x:0000CCC2                 db    0
.xdata$x:0000CCC3                 db    0
.xdata$x:0000CCC4 __catchsym$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 dd offset off_40
.xdata$x:0000CCC4                                         ; DATA XREF: .xdata$x:0000CCF4o
.xdata$x:0000CCC8                 align 10h
.xdata$x:0000CCD0                 dd offset __catch$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
.xdata$x:0000CCD4 __unwindtable$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:0000CCD4                                         ; DATA XREF: .xdata$x:0000CD00o
.xdata$x:0000CCD5                 db 0FFh
.xdata$x:0000CCD6                 db 0FFh
.xdata$x:0000CCD7                 db 0FFh
.xdata$x:0000CCD8                 db    0
.xdata$x:0000CCD9                 db    0
.xdata$x:0000CCDA                 db    0
.xdata$x:0000CCDB                 db    0
.xdata$x:0000CCDC                 db 0FFh
.xdata$x:0000CCDD                 db 0FFh
.xdata$x:0000CCDE                 db 0FFh
.xdata$x:0000CCDF                 db 0FFh
.xdata$x:0000CCE0                 db    0
.xdata$x:0000CCE1                 db    0
.xdata$x:0000CCE2                 db    0
.xdata$x:0000CCE3                 db    0
.xdata$x:0000CCE4 __tryblocktable$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db    0
.xdata$x:0000CCE4                                         ; DATA XREF: .xdata$x:0000CD08o
.xdata$x:0000CCE5                 db    0
.xdata$x:0000CCE6                 db    0
.xdata$x:0000CCE7                 db    0
.xdata$x:0000CCE8                 db    0
.xdata$x:0000CCE9                 db    0
.xdata$x:0000CCEA                 db    0
.xdata$x:0000CCEB                 db    0
.xdata$x:0000CCEC                 db    1
.xdata$x:0000CCED                 db    0
.xdata$x:0000CCEE                 db    0
.xdata$x:0000CCEF                 db    0
.xdata$x:0000CCF0                 db    1
.xdata$x:0000CCF1                 db    0
.xdata$x:0000CCF2                 db    0
.xdata$x:0000CCF3                 db    0
.xdata$x:0000CCF4                 dd offset __catchsym$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
.xdata$x:0000CCF8 __ehfuncinfo$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:0000CCF8                                         ; DATA XREF: __ehhandler$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+11o
.xdata$x:0000CCF9                 db    5
.xdata$x:0000CCFA                 db  93h ; ô
.xdata$x:0000CCFB                 db  19h
.xdata$x:0000CCFC                 db    2
.xdata$x:0000CCFD                 db    0
.xdata$x:0000CCFE                 db    0
.xdata$x:0000CCFF                 db    0
.xdata$x:0000CD00                 dd offset __unwindtable$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:0000CD04                 db    1
.xdata$x:0000CD05                 db    0
.xdata$x:0000CD06                 db    0
.xdata$x:0000CD07                 db    0
.xdata$x:0000CD08                 dd offset __tryblocktable$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:0000CD0C                 db    0
.xdata$x:0000CD0D                 db    0
.xdata$x:0000CD0E                 db    0
.xdata$x:0000CD0F                 db    0
.xdata$x:0000CD10                 db    0
.xdata$x:0000CD11                 db    0
.xdata$x:0000CD12                 db    0
.xdata$x:0000CD13                 db    0
.xdata$x:0000CD14                 db    0
.xdata$x:0000CD15                 db    0
.xdata$x:0000CD16                 db    0
.xdata$x:0000CD17                 db    0
.xdata$x:0000CD18                 db    1
.xdata$x:0000CD19                 db    0
.xdata$x:0000CD1A                 db    0
.xdata$x:0000CD1B                 db    0
.xdata$x:0000CD1C __catchsym$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4 dd offset off_40
.xdata$x:0000CD1C                                         ; DATA XREF: .xdata$x:0000CD3Co
.xdata$x:0000CD20                 db    0
.xdata$x:0000CD21                 db    0
.xdata$x:0000CD22                 db    0
.xdata$x:0000CD23                 db    0
.xdata$x:0000CD24                 db    0
.xdata$x:0000CD25                 db    0
.xdata$x:0000CD26                 db    0
.xdata$x:0000CD27                 db    0
.xdata$x:0000CD28                 dd offset __catch$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
.xdata$x:0000CD2C __tryblocktable$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:0000CD2C                                         ; DATA XREF: .xdata$x:0000CD70o
.xdata$x:0000CD2D                 db    0
.xdata$x:0000CD2E                 db    0
.xdata$x:0000CD2F                 db    0
.xdata$x:0000CD30                 db    2
.xdata$x:0000CD31                 db    0
.xdata$x:0000CD32                 db    0
.xdata$x:0000CD33                 db    0
.xdata$x:0000CD34                 db    3
.xdata$x:0000CD35                 db    0
.xdata$x:0000CD36                 db    0
.xdata$x:0000CD37                 db    0
.xdata$x:0000CD38                 db    1
.xdata$x:0000CD39                 db    0
.xdata$x:0000CD3A                 db    0
.xdata$x:0000CD3B                 db    0
.xdata$x:0000CD3C                 dd offset __catchsym$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4
.xdata$x:0000CD40 __unwindtable$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:0000CD40                                         ; DATA XREF: .xdata$x:0000CD68o
.xdata$x:0000CD41                 db 0FFh
.xdata$x:0000CD42                 db 0FFh
.xdata$x:0000CD43                 db 0FFh
.xdata$x:0000CD44                 db    0
.xdata$x:0000CD45                 db    0
.xdata$x:0000CD46                 db    0
.xdata$x:0000CD47                 db    0
.xdata$x:0000CD48                 db    0
.xdata$x:0000CD49                 db    0
.xdata$x:0000CD4A                 db    0
.xdata$x:0000CD4B                 db    0
.xdata$x:0000CD4C                 dd offset __unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
.xdata$x:0000CD50                 db    1
.xdata$x:0000CD51                 db    0
.xdata$x:0000CD52                 db    0
.xdata$x:0000CD53                 db    0
.xdata$x:0000CD54                 dd offset __unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
.xdata$x:0000CD58                 db 0FFh
.xdata$x:0000CD59                 db 0FFh
.xdata$x:0000CD5A                 db 0FFh
.xdata$x:0000CD5B                 db 0FFh
.xdata$x:0000CD5C                 db    0
.xdata$x:0000CD5D                 db    0
.xdata$x:0000CD5E                 db    0
.xdata$x:0000CD5F                 db    0
.xdata$x:0000CD60 __ehfuncinfo$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:0000CD60                                         ; DATA XREF: __ehhandler$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z+1Eo
.xdata$x:0000CD61                 db    5
.xdata$x:0000CD62                 db  93h ; ô
.xdata$x:0000CD63                 db  19h
.xdata$x:0000CD64                 db    4
.xdata$x:0000CD65                 db    0
.xdata$x:0000CD66                 db    0
.xdata$x:0000CD67                 db    0
.xdata$x:0000CD68                 dd offset __unwindtable$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:0000CD6C                 db    1
.xdata$x:0000CD6D                 db    0
.xdata$x:0000CD6E                 db    0
.xdata$x:0000CD6F                 db    0
.xdata$x:0000CD70                 dd offset __tryblocktable$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:0000CD74                 align 10h
.xdata$x:0000CD80                 db    1
.xdata$x:0000CD81                 db    0
.xdata$x:0000CD82                 db    0
.xdata$x:0000CD83                 db    0
.xdata$x:0000CD84 __catchsym$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11 dd offset off_40
.xdata$x:0000CD84                                         ; DATA XREF: .xdata$x:0000CDA4o
.xdata$x:0000CD88                 align 10h
.xdata$x:0000CD90                 dd offset __catch$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:0000CD94 __tryblocktable$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    0
.xdata$x:0000CD94                                         ; DATA XREF: .xdata$x:0000CDB8o
.xdata$x:0000CD95                 db    0
.xdata$x:0000CD96                 db    0
.xdata$x:0000CD97                 db    0
.xdata$x:0000CD98                 db    9
.xdata$x:0000CD99                 db    0
.xdata$x:0000CD9A                 db    0
.xdata$x:0000CD9B                 db    0
.xdata$x:0000CD9C                 db  0Ah
.xdata$x:0000CD9D                 db    0
.xdata$x:0000CD9E                 db    0
.xdata$x:0000CD9F                 db    0
.xdata$x:0000CDA0                 db    1
.xdata$x:0000CDA1                 db    0
.xdata$x:0000CDA2                 db    0
.xdata$x:0000CDA3                 db    0
.xdata$x:0000CDA4                 dd offset __catchsym$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11
.xdata$x:0000CDA8 __ehfuncinfo$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:0000CDA8                                         ; DATA XREF: __ehhandler$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+14o
.xdata$x:0000CDA9                 db    5
.xdata$x:0000CDAA                 db  93h ; ô
.xdata$x:0000CDAB                 db  19h
.xdata$x:0000CDAC                 db  0Bh
.xdata$x:0000CDAD                 db    0
.xdata$x:0000CDAE                 db    0
.xdata$x:0000CDAF                 db    0
.xdata$x:0000CDB0                 dd offset __unwindtable$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:0000CDB4                 db    1
.xdata$x:0000CDB5                 db    0
.xdata$x:0000CDB6                 db    0
.xdata$x:0000CDB7                 db    0
.xdata$x:0000CDB8                 dd offset __tryblocktable$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:0000CDBC                 db    0
.xdata$x:0000CDBD                 db    0
.xdata$x:0000CDBE                 db    0
.xdata$x:0000CDBF                 db    0
.xdata$x:0000CDC0                 db    0
.xdata$x:0000CDC1                 db    0
.xdata$x:0000CDC2                 db    0
.xdata$x:0000CDC3                 db    0
.xdata$x:0000CDC4                 db    0
.xdata$x:0000CDC5                 db    0
.xdata$x:0000CDC6                 db    0
.xdata$x:0000CDC7                 db    0
.xdata$x:0000CDC8                 db    1
.xdata$x:0000CDC9                 db    0
.xdata$x:0000CDCA                 db    0
.xdata$x:0000CDCB                 db    0
.xdata$x:0000CDCC __unwindtable$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:0000CDCC                                         ; DATA XREF: .xdata$x:0000CDB0o
.xdata$x:0000CDCD                 db 0FFh
.xdata$x:0000CDCE                 db 0FFh
.xdata$x:0000CDCF                 db 0FFh
.xdata$x:0000CDD0                 db    0
.xdata$x:0000CDD1                 db    0
.xdata$x:0000CDD2                 db    0
.xdata$x:0000CDD3                 db    0
.xdata$x:0000CDD4                 db    0
.xdata$x:0000CDD5                 db    0
.xdata$x:0000CDD6                 db    0
.xdata$x:0000CDD7                 db    0
.xdata$x:0000CDD8                 dd offset __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:0000CDDC                 align 10h
.xdata$x:0000CDE0                 dd offset __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.xdata$x:0000CDE4                 db    2
.xdata$x:0000CDE5                 db    0
.xdata$x:0000CDE6                 db    0
.xdata$x:0000CDE7                 db    0
.xdata$x:0000CDE8                 dd offset __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:0000CDEC                 db    2
.xdata$x:0000CDED                 db    0
.xdata$x:0000CDEE                 db    0
.xdata$x:0000CDEF                 db    0
.xdata$x:0000CDF0                 dd offset __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:0000CDF4                 db    4
.xdata$x:0000CDF5                 db    0
.xdata$x:0000CDF6                 db    0
.xdata$x:0000CDF7                 db    0
.xdata$x:0000CDF8                 dd offset __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:0000CDFC                 db    4
.xdata$x:0000CDFD                 db    0
.xdata$x:0000CDFE                 db    0
.xdata$x:0000CDFF                 db    0
.xdata$x:0000CE00                 dd offset __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
.xdata$x:0000CE04                 db    6
.xdata$x:0000CE05                 db    0
.xdata$x:0000CE06                 db    0
.xdata$x:0000CE07                 db    0
.xdata$x:0000CE08                 dd offset __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
.xdata$x:0000CE0C                 db    6
.xdata$x:0000CE0D                 db    0
.xdata$x:0000CE0E                 db    0
.xdata$x:0000CE0F                 db    0
.xdata$x:0000CE10                 dd offset __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
.xdata$x:0000CE14                 db    8
.xdata$x:0000CE15                 db    0
.xdata$x:0000CE16                 db    0
.xdata$x:0000CE17                 db    0
.xdata$x:0000CE18                 dd offset __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
.xdata$x:0000CE1C                 db 0FFh
.xdata$x:0000CE1D                 db 0FFh
.xdata$x:0000CE1E                 db 0FFh
.xdata$x:0000CE1F                 db 0FFh
.xdata$x:0000CE20                 db    0
.xdata$x:0000CE21                 db    0
.xdata$x:0000CE22                 db    0
.xdata$x:0000CE23                 db    0
.xdata$x:0000CE24 __catchsym$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2 dd offset off_40
.xdata$x:0000CE24                                         ; DATA XREF: .xdata$x:0000CE54o
.xdata$x:0000CE28                 align 10h
.xdata$x:0000CE30                 dd offset __catch$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0
.xdata$x:0000CE34 __unwindtable$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z db 0FFh
.xdata$x:0000CE34                                         ; DATA XREF: .xdata$x:0000CE60o
.xdata$x:0000CE35                 db 0FFh
.xdata$x:0000CE36                 db 0FFh
.xdata$x:0000CE37                 db 0FFh
.xdata$x:0000CE38                 db    0
.xdata$x:0000CE39                 db    0
.xdata$x:0000CE3A                 db    0
.xdata$x:0000CE3B                 db    0
.xdata$x:0000CE3C                 db 0FFh
.xdata$x:0000CE3D                 db 0FFh
.xdata$x:0000CE3E                 db 0FFh
.xdata$x:0000CE3F                 db 0FFh
.xdata$x:0000CE40                 db    0
.xdata$x:0000CE41                 db    0
.xdata$x:0000CE42                 db    0
.xdata$x:0000CE43                 db    0
.xdata$x:0000CE44 __tryblocktable$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z db    0
.xdata$x:0000CE44                                         ; DATA XREF: .xdata$x:0000CE68o
.xdata$x:0000CE45                 db    0
.xdata$x:0000CE46                 db    0
.xdata$x:0000CE47                 db    0
.xdata$x:0000CE48                 db    0
.xdata$x:0000CE49                 db    0
.xdata$x:0000CE4A                 db    0
.xdata$x:0000CE4B                 db    0
.xdata$x:0000CE4C                 db    1
.xdata$x:0000CE4D                 db    0
.xdata$x:0000CE4E                 db    0
.xdata$x:0000CE4F                 db    0
.xdata$x:0000CE50                 db    1
.xdata$x:0000CE51                 db    0
.xdata$x:0000CE52                 db    0
.xdata$x:0000CE53                 db    0
.xdata$x:0000CE54                 dd offset __catchsym$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2
.xdata$x:0000CE58 __ehfuncinfo$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z db  22h ; "
.xdata$x:0000CE58                                         ; DATA XREF: __ehhandler$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z+11o
.xdata$x:0000CE59                 db    5
.xdata$x:0000CE5A                 db  93h ; ô
.xdata$x:0000CE5B                 db  19h
.xdata$x:0000CE5C                 db    2
.xdata$x:0000CE5D                 db    0
.xdata$x:0000CE5E                 db    0
.xdata$x:0000CE5F                 db    0
.xdata$x:0000CE60                 dd offset __unwindtable$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.xdata$x:0000CE64                 db    1
.xdata$x:0000CE65                 db    0
.xdata$x:0000CE66                 db    0
.xdata$x:0000CE67                 db    0
.xdata$x:0000CE68                 dd offset __tryblocktable$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.xdata$x:0000CE6C                 db    0
.xdata$x:0000CE6D                 db    0
.xdata$x:0000CE6E                 db    0
.xdata$x:0000CE6F                 db    0
.xdata$x:0000CE70                 db    0
.xdata$x:0000CE71                 db    0
.xdata$x:0000CE72                 db    0
.xdata$x:0000CE73                 db    0
.xdata$x:0000CE74                 db    0
.xdata$x:0000CE75                 db    0
.xdata$x:0000CE76                 db    0
.xdata$x:0000CE77                 db    0
.xdata$x:0000CE78                 db    1
.xdata$x:0000CE79                 db    0
.xdata$x:0000CE7A                 db    0
.xdata$x:0000CE7B                 db    0
.xdata$x:0000CE7C __unwindtable$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z db 0FFh
.xdata$x:0000CE7C                                         ; DATA XREF: .xdata$x:0000CE9Co
.xdata$x:0000CE7D                 db 0FFh
.xdata$x:0000CE7E                 db 0FFh
.xdata$x:0000CE7F                 db 0FFh
.xdata$x:0000CE80                 dd offset __unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$0
.xdata$x:0000CE84                 align 8
.xdata$x:0000CE88                 dd offset __unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$1
.xdata$x:0000CE8C                 align 10h
.xdata$x:0000CE90                 dd offset __unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$2
.xdata$x:0000CE94 __ehfuncinfo$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z db  22h ; "
.xdata$x:0000CE94                                         ; DATA XREF: __ehhandler$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z+14o
.xdata$x:0000CE95                 db    5
.xdata$x:0000CE96                 db  93h ; ô
.xdata$x:0000CE97                 db  19h
.xdata$x:0000CE98                 db    3
.xdata$x:0000CE99                 db    0
.xdata$x:0000CE9A                 db    0
.xdata$x:0000CE9B                 db    0
.xdata$x:0000CE9C                 dd offset __unwindtable$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z
.xdata$x:0000CEA0                 db    0
.xdata$x:0000CEA1                 db    0
.xdata$x:0000CEA2                 db    0
.xdata$x:0000CEA3                 db    0
.xdata$x:0000CEA4                 db    0
.xdata$x:0000CEA5                 db    0
.xdata$x:0000CEA6                 db    0
.xdata$x:0000CEA7                 db    0
.xdata$x:0000CEA8                 db    0
.xdata$x:0000CEA9                 db    0
.xdata$x:0000CEAA                 db    0
.xdata$x:0000CEAB                 db    0
.xdata$x:0000CEAC                 db    0
.xdata$x:0000CEAD                 db    0
.xdata$x:0000CEAE                 db    0
.xdata$x:0000CEAF                 db    0
.xdata$x:0000CEB0                 db    0
.xdata$x:0000CEB1                 db    0
.xdata$x:0000CEB2                 db    0
.xdata$x:0000CEB3                 db    0
.xdata$x:0000CEB4                 db    1
.xdata$x:0000CEB5                 db    0
.xdata$x:0000CEB6                 db    0
.xdata$x:0000CEB7                 db    0
.xdata$x:0000CEB8 __unwindtable$?GetItemPath@CArc@@QBEJIAAVUString@@@Z db 0FFh
.xdata$x:0000CEB8                                         ; DATA XREF: .xdata$x:0000CEC8o
.xdata$x:0000CEB9                 db 0FFh
.xdata$x:0000CEBA                 db 0FFh
.xdata$x:0000CEBB                 db 0FFh
.xdata$x:0000CEBC                 dd offset __unwindfunclet$?GetItemPath@CArc@@QBEJIAAVUString@@@Z$0
.xdata$x:0000CEC0 __ehfuncinfo$?GetItemPath@CArc@@QBEJIAAVUString@@@Z db  22h ; "
.xdata$x:0000CEC0                                         ; DATA XREF: __ehhandler$?GetItemPath@CArc@@QBEJIAAVUString@@@Z+11o
.xdata$x:0000CEC1                 db    5
.xdata$x:0000CEC2                 db  93h ; ô
.xdata$x:0000CEC3                 db  19h
.xdata$x:0000CEC4                 db    1
.xdata$x:0000CEC5                 db    0
.xdata$x:0000CEC6                 db    0
.xdata$x:0000CEC7                 db    0
.xdata$x:0000CEC8                 dd offset __unwindtable$?GetItemPath@CArc@@QBEJIAAVUString@@@Z
.xdata$x:0000CECC                 align 20h
.xdata$x:0000CEE0                 db    1
.xdata$x:0000CEE1                 db    0
.xdata$x:0000CEE2                 db    0
.xdata$x:0000CEE3                 db    0
.xdata$x:0000CEE4 __unwindtable$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z db 0FFh
.xdata$x:0000CEE4                                         ; DATA XREF: .xdata$x:0000CEF4o
.xdata$x:0000CEE5                 db 0FFh
.xdata$x:0000CEE6                 db 0FFh
.xdata$x:0000CEE7                 db 0FFh
.xdata$x:0000CEE8                 dd offset __unwindfunclet$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z$0
.xdata$x:0000CEEC __ehfuncinfo$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z db  22h ; "
.xdata$x:0000CEEC                                         ; DATA XREF: __ehhandler$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z+11o
.xdata$x:0000CEED                 db    5
.xdata$x:0000CEEE                 db  93h ; ô
.xdata$x:0000CEEF                 db  19h
.xdata$x:0000CEF0                 db    1
.xdata$x:0000CEF1                 db    0
.xdata$x:0000CEF2                 db    0
.xdata$x:0000CEF3                 db    0
.xdata$x:0000CEF4                 dd offset __unwindtable$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z
.xdata$x:0000CEF8                 db    0
.xdata$x:0000CEF9                 db    0
.xdata$x:0000CEFA                 db    0
.xdata$x:0000CEFB                 db    0
.xdata$x:0000CEFC                 db    0
.xdata$x:0000CEFD                 db    0
.xdata$x:0000CEFE                 db    0
.xdata$x:0000CEFF                 db    0
.xdata$x:0000CF00                 db    0
.xdata$x:0000CF01                 db    0
.xdata$x:0000CF02                 db    0
.xdata$x:0000CF03                 db    0
.xdata$x:0000CF04                 db    0
.xdata$x:0000CF05                 db    0
.xdata$x:0000CF06                 db    0
.xdata$x:0000CF07                 db    0
.xdata$x:0000CF08                 db    0
.xdata$x:0000CF09                 db    0
.xdata$x:0000CF0A                 db    0
.xdata$x:0000CF0B                 db    0
.xdata$x:0000CF0C                 db    1
.xdata$x:0000CF0D                 db    0
.xdata$x:0000CF0E                 db    0
.xdata$x:0000CF0F                 db    0
.xdata$x:0000CF10 __unwindtable$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z db 0FFh
.xdata$x:0000CF10                                         ; DATA XREF: .xdata$x:0000CF20o
.xdata$x:0000CF11                 db 0FFh
.xdata$x:0000CF12                 db 0FFh
.xdata$x:0000CF13                 db 0FFh
.xdata$x:0000CF14                 dd offset __unwindfunclet$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z$0
.xdata$x:0000CF18 __ehfuncinfo$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z db  22h ; "
.xdata$x:0000CF18                                         ; DATA XREF: __ehhandler$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z+14o
.xdata$x:0000CF19                 db    5
.xdata$x:0000CF1A                 db  93h ; ô
.xdata$x:0000CF1B                 db  19h
.xdata$x:0000CF1C                 db    1
.xdata$x:0000CF1D                 db    0
.xdata$x:0000CF1E                 db    0
.xdata$x:0000CF1F                 db    0
.xdata$x:0000CF20                 dd offset __unwindtable$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z
.xdata$x:0000CF24                 db    0
.xdata$x:0000CF25                 db    0
.xdata$x:0000CF26                 db    0
.xdata$x:0000CF27                 db    0
.xdata$x:0000CF28                 db    0
.xdata$x:0000CF29                 db    0
.xdata$x:0000CF2A                 db    0
.xdata$x:0000CF2B                 db    0
.xdata$x:0000CF2C                 db    0
.xdata$x:0000CF2D                 db    0
.xdata$x:0000CF2E                 db    0
.xdata$x:0000CF2F                 db    0
.xdata$x:0000CF30                 db    0
.xdata$x:0000CF31                 db    0
.xdata$x:0000CF32                 db    0
.xdata$x:0000CF33                 db    0
.xdata$x:0000CF34                 db    0
.xdata$x:0000CF35                 db    0
.xdata$x:0000CF36                 db    0
.xdata$x:0000CF37                 db    0
.xdata$x:0000CF38                 db    1
.xdata$x:0000CF39                 db    0
.xdata$x:0000CF3A                 db    0
.xdata$x:0000CF3B                 db    0
.xdata$x:0000CF3C __unwindtable$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z db 0FFh
.xdata$x:0000CF3C                                         ; DATA XREF: .xdata$x:0000CF4Co
.xdata$x:0000CF3D                 db 0FFh
.xdata$x:0000CF3E                 db 0FFh
.xdata$x:0000CF3F                 db 0FFh
.xdata$x:0000CF40                 dd offset __unwindfunclet$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z$0
.xdata$x:0000CF44 __ehfuncinfo$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z db  22h ; "
.xdata$x:0000CF44                                         ; DATA XREF: __ehhandler$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z+11o
.xdata$x:0000CF45                 db    5
.xdata$x:0000CF46                 db  93h ; ô
.xdata$x:0000CF47                 db  19h
.xdata$x:0000CF48                 db    1
.xdata$x:0000CF49                 db    0
.xdata$x:0000CF4A                 db    0
.xdata$x:0000CF4B                 db    0
.xdata$x:0000CF4C                 dd offset __unwindtable$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z
.xdata$x:0000CF50                 db    0
.xdata$x:0000CF51                 db    0
.xdata$x:0000CF52                 db    0
.xdata$x:0000CF53                 db    0
.xdata$x:0000CF54                 db    0
.xdata$x:0000CF55                 db    0
.xdata$x:0000CF56                 db    0
.xdata$x:0000CF57                 db    0
.xdata$x:0000CF58                 db    0
.xdata$x:0000CF59                 db    0
.xdata$x:0000CF5A                 db    0
.xdata$x:0000CF5B                 db    0
.xdata$x:0000CF5C                 db    0
.xdata$x:0000CF5D                 db    0
.xdata$x:0000CF5E                 db    0
.xdata$x:0000CF5F                 db    0
.xdata$x:0000CF60                 db    0
.xdata$x:0000CF61                 db    0
.xdata$x:0000CF62                 db    0
.xdata$x:0000CF63                 db    0
.xdata$x:0000CF64                 db    1
.xdata$x:0000CF65                 db    0
.xdata$x:0000CF66                 db    0
.xdata$x:0000CF67                 db    0
.xdata$x:0000CF68 __unwindtable$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z db 0FFh
.xdata$x:0000CF68                                         ; DATA XREF: .xdata$x:0000CF78o
.xdata$x:0000CF69                 db 0FFh
.xdata$x:0000CF6A                 db 0FFh
.xdata$x:0000CF6B                 db 0FFh
.xdata$x:0000CF6C                 dd offset __unwindfunclet$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z$0
.xdata$x:0000CF70 __ehfuncinfo$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z db  22h ; "
.xdata$x:0000CF70                                         ; DATA XREF: __ehhandler$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z+11o
.xdata$x:0000CF71                 db    5
.xdata$x:0000CF72                 db  93h ; ô
.xdata$x:0000CF73                 db  19h
.xdata$x:0000CF74                 db    1
.xdata$x:0000CF75                 db    0
.xdata$x:0000CF76                 db    0
.xdata$x:0000CF77                 db    0
.xdata$x:0000CF78                 dd offset __unwindtable$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z
.xdata$x:0000CF7C                 db    0
.xdata$x:0000CF7D                 db    0
.xdata$x:0000CF7E                 db    0
.xdata$x:0000CF7F                 db    0
.xdata$x:0000CF80                 db    0
.xdata$x:0000CF81                 db    0
.xdata$x:0000CF82                 db    0
.xdata$x:0000CF83                 db    0
.xdata$x:0000CF84                 db    0
.xdata$x:0000CF85                 db    0
.xdata$x:0000CF86                 db    0
.xdata$x:0000CF87                 db    0
.xdata$x:0000CF88                 db    0
.xdata$x:0000CF89                 db    0
.xdata$x:0000CF8A                 db    0
.xdata$x:0000CF8B                 db    0
.xdata$x:0000CF8C                 db    0
.xdata$x:0000CF8D                 db    0
.xdata$x:0000CF8E                 db    0
.xdata$x:0000CF8F                 db    0
.xdata$x:0000CF90                 db    1
.xdata$x:0000CF91                 db    0
.xdata$x:0000CF92                 db    0
.xdata$x:0000CF93                 db    0
.xdata$x:0000CF94 __catchsym$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$2 dd offset off_40
.xdata$x:0000CF94                                         ; DATA XREF: .xdata$x:0000CFC4o
.xdata$x:0000CF98                 align 10h
.xdata$x:0000CFA0                 dd offset __catch$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$0
.xdata$x:0000CFA4 __unwindtable$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z db 0FFh
.xdata$x:0000CFA4                                         ; DATA XREF: .xdata$x:0000CFD0o
.xdata$x:0000CFA5                 db 0FFh
.xdata$x:0000CFA6                 db 0FFh
.xdata$x:0000CFA7                 db 0FFh
.xdata$x:0000CFA8                 db    0
.xdata$x:0000CFA9                 db    0
.xdata$x:0000CFAA                 db    0
.xdata$x:0000CFAB                 db    0
.xdata$x:0000CFAC                 db 0FFh
.xdata$x:0000CFAD                 db 0FFh
.xdata$x:0000CFAE                 db 0FFh
.xdata$x:0000CFAF                 db 0FFh
.xdata$x:0000CFB0                 db    0
.xdata$x:0000CFB1                 db    0
.xdata$x:0000CFB2                 db    0
.xdata$x:0000CFB3                 db    0
.xdata$x:0000CFB4 __tryblocktable$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z db    0
.xdata$x:0000CFB4                                         ; DATA XREF: .xdata$x:0000CFD8o
.xdata$x:0000CFB5                 db    0
.xdata$x:0000CFB6                 db    0
.xdata$x:0000CFB7                 db    0
.xdata$x:0000CFB8                 db    0
.xdata$x:0000CFB9                 db    0
.xdata$x:0000CFBA                 db    0
.xdata$x:0000CFBB                 db    0
.xdata$x:0000CFBC                 db    1
.xdata$x:0000CFBD                 db    0
.xdata$x:0000CFBE                 db    0
.xdata$x:0000CFBF                 db    0
.xdata$x:0000CFC0                 db    1
.xdata$x:0000CFC1                 db    0
.xdata$x:0000CFC2                 db    0
.xdata$x:0000CFC3                 db    0
.xdata$x:0000CFC4                 dd offset __catchsym$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$2
.xdata$x:0000CFC8 __ehfuncinfo$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z db  22h ; "
.xdata$x:0000CFC8                                         ; DATA XREF: __ehhandler$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z+11o
.xdata$x:0000CFC9                 db    5
.xdata$x:0000CFCA                 db  93h ; ô
.xdata$x:0000CFCB                 db  19h
.xdata$x:0000CFCC                 db    2
.xdata$x:0000CFCD                 db    0
.xdata$x:0000CFCE                 db    0
.xdata$x:0000CFCF                 db    0
.xdata$x:0000CFD0                 dd offset __unwindtable$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
.xdata$x:0000CFD4                 db    1
.xdata$x:0000CFD5                 db    0
.xdata$x:0000CFD6                 db    0
.xdata$x:0000CFD7                 db    0
.xdata$x:0000CFD8                 dd offset __tryblocktable$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
.xdata$x:0000CFDC                 db    0
.xdata$x:0000CFDD                 db    0
.xdata$x:0000CFDE                 db    0
.xdata$x:0000CFDF                 db    0
.xdata$x:0000CFE0                 db    0
.xdata$x:0000CFE1                 db    0
.xdata$x:0000CFE2                 db    0
.xdata$x:0000CFE3                 db    0
.xdata$x:0000CFE4                 db    0
.xdata$x:0000CFE5                 db    0
.xdata$x:0000CFE6                 db    0
.xdata$x:0000CFE7                 db    0
.xdata$x:0000CFE8                 db    1
.xdata$x:0000CFE9                 db    0
.xdata$x:0000CFEA                 db    0
.xdata$x:0000CFEB                 db    0
.xdata$x:0000CFEC __unwindtable$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z db 0FFh
.xdata$x:0000CFEC                                         ; DATA XREF: .xdata$x:0000D014o
.xdata$x:0000CFED                 db 0FFh
.xdata$x:0000CFEE                 db 0FFh
.xdata$x:0000CFEF                 db 0FFh
.xdata$x:0000CFF0                 dd offset __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$0
.xdata$x:0000CFF4                 db 0FFh
.xdata$x:0000CFF5                 db 0FFh
.xdata$x:0000CFF6                 db 0FFh
.xdata$x:0000CFF7                 db 0FFh
.xdata$x:0000CFF8                 dd offset __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$1
.xdata$x:0000CFFC                 db 0FFh
.xdata$x:0000CFFD                 db 0FFh
.xdata$x:0000CFFE                 db 0FFh
.xdata$x:0000CFFF                 db 0FFh
.xdata$x:0000D000                 dd offset __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$2
.xdata$x:0000D004                 db 0FFh
.xdata$x:0000D005                 db 0FFh
.xdata$x:0000D006                 db 0FFh
.xdata$x:0000D007                 db 0FFh
.xdata$x:0000D008                 dd offset __unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$3
.xdata$x:0000D00C __ehfuncinfo$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z db  22h ; "
.xdata$x:0000D00C                                         ; DATA XREF: __ehhandler$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z+14o
.xdata$x:0000D00D                 db    5
.xdata$x:0000D00E                 db  93h ; ô
.xdata$x:0000D00F                 db  19h
.xdata$x:0000D010                 db    4
.xdata$x:0000D011                 db    0
.xdata$x:0000D012                 db    0
.xdata$x:0000D013                 db    0
.xdata$x:0000D014                 dd offset __unwindtable$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z
.xdata$x:0000D018                 db    0
.xdata$x:0000D019                 db    0
.xdata$x:0000D01A                 db    0
.xdata$x:0000D01B                 db    0
.xdata$x:0000D01C                 db    0
.xdata$x:0000D01D                 db    0
.xdata$x:0000D01E                 db    0
.xdata$x:0000D01F                 db    0
.xdata$x:0000D020                 db    0
.xdata$x:0000D021                 db    0
.xdata$x:0000D022                 db    0
.xdata$x:0000D023                 db    0
.xdata$x:0000D024                 db    0
.xdata$x:0000D025                 db    0
.xdata$x:0000D026                 db    0
.xdata$x:0000D027                 db    0
.xdata$x:0000D028                 db    0
.xdata$x:0000D029                 db    0
.xdata$x:0000D02A                 db    0
.xdata$x:0000D02B                 db    0
.xdata$x:0000D02C                 db    1
.xdata$x:0000D02D                 db    0
.xdata$x:0000D02E                 db    0
.xdata$x:0000D02F                 db    0
.xdata$x:0000D030 __unwindtable$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z db 0FFh
.xdata$x:0000D030                                         ; DATA XREF: .xdata$x:0000D040o
.xdata$x:0000D031                 db 0FFh
.xdata$x:0000D032                 db 0FFh
.xdata$x:0000D033                 db 0FFh
.xdata$x:0000D034                 dd offset __unwindfunclet$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z$0
.xdata$x:0000D038 __ehfuncinfo$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z db  22h ; "
.xdata$x:0000D038                                         ; DATA XREF: __ehhandler$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z+11o
.xdata$x:0000D039                 db    5
.xdata$x:0000D03A                 db  93h ; ô
.xdata$x:0000D03B                 db  19h
.xdata$x:0000D03C                 db    1
.xdata$x:0000D03D                 db    0
.xdata$x:0000D03E                 db    0
.xdata$x:0000D03F                 db    0
.xdata$x:0000D040                 dd offset __unwindtable$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z
.xdata$x:0000D044                 db    0
.xdata$x:0000D045                 db    0
.xdata$x:0000D046                 db    0
.xdata$x:0000D047                 db    0
.xdata$x:0000D048                 db    0
.xdata$x:0000D049                 db    0
.xdata$x:0000D04A                 db    0
.xdata$x:0000D04B                 db    0
.xdata$x:0000D04C                 db    0
.xdata$x:0000D04D                 db    0
.xdata$x:0000D04E                 db    0
.xdata$x:0000D04F                 db    0
.xdata$x:0000D050                 db    0
.xdata$x:0000D051                 db    0
.xdata$x:0000D052                 db    0
.xdata$x:0000D053                 db    0
.xdata$x:0000D054                 db    0
.xdata$x:0000D055                 db    0
.xdata$x:0000D056                 db    0
.xdata$x:0000D057                 db    0
.xdata$x:0000D058                 db    1
.xdata$x:0000D059                 db    0
.xdata$x:0000D05A                 db    0
.xdata$x:0000D05B                 db    0
.xdata$x:0000D05C __unwindtable$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z db 0FFh
.xdata$x:0000D05C                                         ; DATA XREF: .xdata$x:0000D06Co
.xdata$x:0000D05D                 db 0FFh
.xdata$x:0000D05E                 db 0FFh
.xdata$x:0000D05F                 db 0FFh
.xdata$x:0000D060                 dd offset __unwindfunclet$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z$0
.xdata$x:0000D064 __ehfuncinfo$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z db  22h ; "
.xdata$x:0000D064                                         ; DATA XREF: __ehhandler$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z+11o
.xdata$x:0000D065                 db    5
.xdata$x:0000D066                 db  93h ; ô
.xdata$x:0000D067                 db  19h
.xdata$x:0000D068                 db    1
.xdata$x:0000D069                 db    0
.xdata$x:0000D06A                 db    0
.xdata$x:0000D06B                 db    0
.xdata$x:0000D06C                 dd offset __unwindtable$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z
.xdata$x:0000D070                 db    0
.xdata$x:0000D071                 db    0
.xdata$x:0000D072                 db    0
.xdata$x:0000D073                 db    0
.xdata$x:0000D074                 db    0
.xdata$x:0000D075                 db    0
.xdata$x:0000D076                 db    0
.xdata$x:0000D077                 db    0
.xdata$x:0000D078                 db    0
.xdata$x:0000D079                 db    0
.xdata$x:0000D07A                 db    0
.xdata$x:0000D07B                 db    0
.xdata$x:0000D07C                 db    0
.xdata$x:0000D07D                 db    0
.xdata$x:0000D07E                 db    0
.xdata$x:0000D07F                 db    0
.xdata$x:0000D080                 db    0
.xdata$x:0000D081                 db    0
.xdata$x:0000D082                 db    0
.xdata$x:0000D083                 db    0
.xdata$x:0000D084                 db    1
.xdata$x:0000D085                 db    0
.xdata$x:0000D086                 db    0
.xdata$x:0000D087                 db    0
.xdata$x:0000D088 __unwindtable$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z db 0FFh
.xdata$x:0000D088                                         ; DATA XREF: .xdata$x:0000D098o
.xdata$x:0000D089                 db 0FFh
.xdata$x:0000D08A                 db 0FFh
.xdata$x:0000D08B                 db 0FFh
.xdata$x:0000D08C                 dd offset __unwindfunclet$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z$0
.xdata$x:0000D090 __ehfuncinfo$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z db  22h ; "
.xdata$x:0000D090                                         ; DATA XREF: __ehhandler$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z+11o
.xdata$x:0000D091                 db    5
.xdata$x:0000D092                 db  93h ; ô
.xdata$x:0000D093                 db  19h
.xdata$x:0000D094                 db    1
.xdata$x:0000D095                 db    0
.xdata$x:0000D096                 db    0
.xdata$x:0000D097                 db    0
.xdata$x:0000D098                 dd offset __unwindtable$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z
.xdata$x:0000D09C                 db    0
.xdata$x:0000D09D                 db    0
.xdata$x:0000D09E                 db    0
.xdata$x:0000D09F                 db    0
.xdata$x:0000D0A0                 db    0
.xdata$x:0000D0A1                 db    0
.xdata$x:0000D0A2                 db    0
.xdata$x:0000D0A3                 db    0
.xdata$x:0000D0A4                 db    0
.xdata$x:0000D0A5                 db    0
.xdata$x:0000D0A6                 db    0
.xdata$x:0000D0A7                 db    0
.xdata$x:0000D0A8                 db    0
.xdata$x:0000D0A9                 db    0
.xdata$x:0000D0AA                 db    0
.xdata$x:0000D0AB                 db    0
.xdata$x:0000D0AC                 db    0
.xdata$x:0000D0AD                 db    0
.xdata$x:0000D0AE                 db    0
.xdata$x:0000D0AF                 db    0
.xdata$x:0000D0B0                 db    1
.xdata$x:0000D0B1                 db    0
.xdata$x:0000D0B2                 db    0
.xdata$x:0000D0B3                 db    0
.xdata$x:0000D0B4 __ehfuncinfo$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z db  22h ; "
.xdata$x:0000D0B4                                         ; DATA XREF: __ehhandler$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z+1Eo
.xdata$x:0000D0B5                 db    5
.xdata$x:0000D0B6                 db  93h ; ô
.xdata$x:0000D0B7                 db  19h
.xdata$x:0000D0B8                 db  1Ch
.xdata$x:0000D0B9                 db    0
.xdata$x:0000D0BA                 db    0
.xdata$x:0000D0BB                 db    0
.xdata$x:0000D0BC                 dd offset __unwindtable$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z
.xdata$x:0000D0C0                 db    0
.xdata$x:0000D0C1                 db    0
.xdata$x:0000D0C2                 db    0
.xdata$x:0000D0C3                 db    0
.xdata$x:0000D0C4                 db    0
.xdata$x:0000D0C5                 db    0
.xdata$x:0000D0C6                 db    0
.xdata$x:0000D0C7                 db    0
.xdata$x:0000D0C8                 db    0
.xdata$x:0000D0C9                 db    0
.xdata$x:0000D0CA                 db    0
.xdata$x:0000D0CB                 db    0
.xdata$x:0000D0CC                 db    0
.xdata$x:0000D0CD                 db    0
.xdata$x:0000D0CE                 db    0
.xdata$x:0000D0CF                 db    0
.xdata$x:0000D0D0                 db    0
.xdata$x:0000D0D1                 db    0
.xdata$x:0000D0D2                 db    0
.xdata$x:0000D0D3                 db    0
.xdata$x:0000D0D4                 db    1
.xdata$x:0000D0D5                 db    0
.xdata$x:0000D0D6                 db    0
.xdata$x:0000D0D7                 db    0
.xdata$x:0000D0D8 __unwindtable$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z db 0FFh
.xdata$x:0000D0D8                                         ; DATA XREF: .xdata$x:0000D0BCo
.xdata$x:0000D0D9                 db 0FFh
.xdata$x:0000D0DA                 db 0FFh
.xdata$x:0000D0DB                 db 0FFh
.xdata$x:0000D0DC                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$0
.xdata$x:0000D0E0                 db    0
.xdata$x:0000D0E1                 db    0
.xdata$x:0000D0E2                 db    0
.xdata$x:0000D0E3                 db    0
.xdata$x:0000D0E4                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$1
.xdata$x:0000D0E8                 db    1
.xdata$x:0000D0E9                 db    0
.xdata$x:0000D0EA                 db    0
.xdata$x:0000D0EB                 db    0
.xdata$x:0000D0EC                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$2
.xdata$x:0000D0F0                 db    2
.xdata$x:0000D0F1                 db    0
.xdata$x:0000D0F2                 db    0
.xdata$x:0000D0F3                 db    0
.xdata$x:0000D0F4                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$3
.xdata$x:0000D0F8                 db    3
.xdata$x:0000D0F9                 db    0
.xdata$x:0000D0FA                 db    0
.xdata$x:0000D0FB                 db    0
.xdata$x:0000D0FC                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$4
.xdata$x:0000D100                 db    4
.xdata$x:0000D101                 db    0
.xdata$x:0000D102                 db    0
.xdata$x:0000D103                 db    0
.xdata$x:0000D104                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$5
.xdata$x:0000D108                 db    3
.xdata$x:0000D109                 db    0
.xdata$x:0000D10A                 db    0
.xdata$x:0000D10B                 db    0
.xdata$x:0000D10C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$9
.xdata$x:0000D110                 db    6
.xdata$x:0000D111                 db    0
.xdata$x:0000D112                 db    0
.xdata$x:0000D113                 db    0
.xdata$x:0000D114                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$10
.xdata$x:0000D118                 db    7
.xdata$x:0000D119                 db    0
.xdata$x:0000D11A                 db    0
.xdata$x:0000D11B                 db    0
.xdata$x:0000D11C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$11
.xdata$x:0000D120                 db    6
.xdata$x:0000D121                 db    0
.xdata$x:0000D122                 db    0
.xdata$x:0000D123                 db    0
.xdata$x:0000D124                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$12
.xdata$x:0000D128                 db    6
.xdata$x:0000D129                 db    0
.xdata$x:0000D12A                 db    0
.xdata$x:0000D12B                 db    0
.xdata$x:0000D12C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$13
.xdata$x:0000D130                 db  0Ah
.xdata$x:0000D131                 db    0
.xdata$x:0000D132                 db    0
.xdata$x:0000D133                 db    0
.xdata$x:0000D134                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$14
.xdata$x:0000D138                 db  0Ah
.xdata$x:0000D139                 db    0
.xdata$x:0000D13A                 db    0
.xdata$x:0000D13B                 db    0
.xdata$x:0000D13C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$15
.xdata$x:0000D140                 db  0Ch
.xdata$x:0000D141                 db    0
.xdata$x:0000D142                 db    0
.xdata$x:0000D143                 db    0
.xdata$x:0000D144                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$16
.xdata$x:0000D148                 db  0Dh
.xdata$x:0000D149                 db    0
.xdata$x:0000D14A                 db    0
.xdata$x:0000D14B                 db    0
.xdata$x:0000D14C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$17
.xdata$x:0000D150                 db  0Eh
.xdata$x:0000D151                 db    0
.xdata$x:0000D152                 db    0
.xdata$x:0000D153                 db    0
.xdata$x:0000D154                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$18
.xdata$x:0000D158                 db  0Fh
.xdata$x:0000D159                 db    0
.xdata$x:0000D15A                 db    0
.xdata$x:0000D15B                 db    0
.xdata$x:0000D15C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$19
.xdata$x:0000D160                 db  0Ch
.xdata$x:0000D161                 db    0
.xdata$x:0000D162                 db    0
.xdata$x:0000D163                 db    0
.xdata$x:0000D164                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$20
.xdata$x:0000D168                 db  11h
.xdata$x:0000D169                 db    0
.xdata$x:0000D16A                 db    0
.xdata$x:0000D16B                 db    0
.xdata$x:0000D16C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$21
.xdata$x:0000D170                 db  12h
.xdata$x:0000D171                 db    0
.xdata$x:0000D172                 db    0
.xdata$x:0000D173                 db    0
.xdata$x:0000D174                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$22
.xdata$x:0000D178                 db  12h
.xdata$x:0000D179                 db    0
.xdata$x:0000D17A                 db    0
.xdata$x:0000D17B                 db    0
.xdata$x:0000D17C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$23
.xdata$x:0000D180                 db  14h
.xdata$x:0000D181                 db    0
.xdata$x:0000D182                 db    0
.xdata$x:0000D183                 db    0
.xdata$x:0000D184                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$24
.xdata$x:0000D188                 db  15h
.xdata$x:0000D189                 db    0
.xdata$x:0000D18A                 db    0
.xdata$x:0000D18B                 db    0
.xdata$x:0000D18C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$25
.xdata$x:0000D190                 db  16h
.xdata$x:0000D191                 db    0
.xdata$x:0000D192                 db    0
.xdata$x:0000D193                 db    0
.xdata$x:0000D194                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$26
.xdata$x:0000D198                 db  17h
.xdata$x:0000D199                 db    0
.xdata$x:0000D19A                 db    0
.xdata$x:0000D19B                 db    0
.xdata$x:0000D19C                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$27
.xdata$x:0000D1A0                 db  17h
.xdata$x:0000D1A1                 db    0
.xdata$x:0000D1A2                 db    0
.xdata$x:0000D1A3                 db    0
.xdata$x:0000D1A4                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$28
.xdata$x:0000D1A8                 db  19h
.xdata$x:0000D1A9                 db    0
.xdata$x:0000D1AA                 db    0
.xdata$x:0000D1AB                 db    0
.xdata$x:0000D1AC                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$29
.xdata$x:0000D1B0                 db  1Ah
.xdata$x:0000D1B1                 db    0
.xdata$x:0000D1B2                 db    0
.xdata$x:0000D1B3                 db    0
.xdata$x:0000D1B4                 dd offset __unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$30
.xdata$x:0000D1B8 __ehfuncinfo$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z db  22h ; "
.xdata$x:0000D1B8                                         ; DATA XREF: __ehhandler$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z+14o
.xdata$x:0000D1B9                 db    5
.xdata$x:0000D1BA                 db  93h ; ô
.xdata$x:0000D1BB                 db  19h
.xdata$x:0000D1BC                 db    5
.xdata$x:0000D1BD                 db    0
.xdata$x:0000D1BE                 db    0
.xdata$x:0000D1BF                 db    0
.xdata$x:0000D1C0                 dd offset __unwindtable$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z
.xdata$x:0000D1C4                 db    0
.xdata$x:0000D1C5                 db    0
.xdata$x:0000D1C6                 db    0
.xdata$x:0000D1C7                 db    0
.xdata$x:0000D1C8                 db    0
.xdata$x:0000D1C9                 db    0
.xdata$x:0000D1CA                 db    0
.xdata$x:0000D1CB                 db    0
.xdata$x:0000D1CC                 db    0
.xdata$x:0000D1CD                 db    0
.xdata$x:0000D1CE                 db    0
.xdata$x:0000D1CF                 db    0
.xdata$x:0000D1D0                 db    0
.xdata$x:0000D1D1                 db    0
.xdata$x:0000D1D2                 db    0
.xdata$x:0000D1D3                 db    0
.xdata$x:0000D1D4                 db    0
.xdata$x:0000D1D5                 db    0
.xdata$x:0000D1D6                 db    0
.xdata$x:0000D1D7                 db    0
.xdata$x:0000D1D8                 db    1
.xdata$x:0000D1D9                 db    0
.xdata$x:0000D1DA                 db    0
.xdata$x:0000D1DB                 db    0
.xdata$x:0000D1DC __unwindtable$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z db 0FFh
.xdata$x:0000D1DC                                         ; DATA XREF: .xdata$x:0000D1C0o
.xdata$x:0000D1DD                 db 0FFh
.xdata$x:0000D1DE                 db 0FFh
.xdata$x:0000D1DF                 db 0FFh
.xdata$x:0000D1E0                 dd offset __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$0
.xdata$x:0000D1E4                 db 0FFh
.xdata$x:0000D1E5                 db 0FFh
.xdata$x:0000D1E6                 db 0FFh
.xdata$x:0000D1E7                 db 0FFh
.xdata$x:0000D1E8                 dd offset __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$1
.xdata$x:0000D1EC                 db 0FFh
.xdata$x:0000D1ED                 db 0FFh
.xdata$x:0000D1EE                 db 0FFh
.xdata$x:0000D1EF                 db 0FFh
.xdata$x:0000D1F0                 dd offset __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$2
.xdata$x:0000D1F4                 db 0FFh
.xdata$x:0000D1F5                 db 0FFh
.xdata$x:0000D1F6                 db 0FFh
.xdata$x:0000D1F7                 db 0FFh
.xdata$x:0000D1F8                 dd offset __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$3
.xdata$x:0000D1FC                 db 0FFh
.xdata$x:0000D1FD                 db 0FFh
.xdata$x:0000D1FE                 db 0FFh
.xdata$x:0000D1FF                 db 0FFh
.xdata$x:0000D200                 dd offset __unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$4
.xdata$x:0000D204 __unwindtable$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z db 0FFh
.xdata$x:0000D204                                         ; DATA XREF: .xdata$x:0000D214o
.xdata$x:0000D205                 db 0FFh
.xdata$x:0000D206                 db 0FFh
.xdata$x:0000D207                 db 0FFh
.xdata$x:0000D208                 dd offset __unwindfunclet$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z$0
.xdata$x:0000D20C __ehfuncinfo$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z db  22h ; "
.xdata$x:0000D20C                                         ; DATA XREF: __ehhandler$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z+11o
.xdata$x:0000D20D                 db    5
.xdata$x:0000D20E                 db  93h ; ô
.xdata$x:0000D20F                 db  19h
.xdata$x:0000D210                 db    1
.xdata$x:0000D211                 db    0
.xdata$x:0000D212                 db    0
.xdata$x:0000D213                 db    0
.xdata$x:0000D214                 dd offset __unwindtable$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z
.xdata$x:0000D218                 db    0
.xdata$x:0000D219                 db    0
.xdata$x:0000D21A                 db    0
.xdata$x:0000D21B                 db    0
.xdata$x:0000D21C                 db    0
.xdata$x:0000D21D                 db    0
.xdata$x:0000D21E                 db    0
.xdata$x:0000D21F                 db    0
.xdata$x:0000D220                 db    0
.xdata$x:0000D221                 db    0
.xdata$x:0000D222                 db    0
.xdata$x:0000D223                 db    0
.xdata$x:0000D224                 db    0
.xdata$x:0000D225                 db    0
.xdata$x:0000D226                 db    0
.xdata$x:0000D227                 db    0
.xdata$x:0000D228                 db    0
.xdata$x:0000D229                 db    0
.xdata$x:0000D22A                 db    0
.xdata$x:0000D22B                 db    0
.xdata$x:0000D22C                 db    1
.xdata$x:0000D22D                 db    0
.xdata$x:0000D22E                 db    0
.xdata$x:0000D22F                 db    0
.xdata$x:0000D230 __unwindtable$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z db 0FFh
.xdata$x:0000D230                                         ; DATA XREF: .xdata$x:0000D240o
.xdata$x:0000D231                 db 0FFh
.xdata$x:0000D232                 db 0FFh
.xdata$x:0000D233                 db 0FFh
.xdata$x:0000D234                 dd offset __unwindfunclet$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z$0
.xdata$x:0000D238 __ehfuncinfo$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z db  22h ; "
.xdata$x:0000D238                                         ; DATA XREF: __ehhandler$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z+11o
.xdata$x:0000D239                 db    5
.xdata$x:0000D23A                 db  93h ; ô
.xdata$x:0000D23B                 db  19h
.xdata$x:0000D23C                 db    1
.xdata$x:0000D23D                 db    0
.xdata$x:0000D23E                 db    0
.xdata$x:0000D23F                 db    0
.xdata$x:0000D240                 dd offset __unwindtable$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z
.xdata$x:0000D244                 db    0
.xdata$x:0000D245                 db    0
.xdata$x:0000D246                 db    0
.xdata$x:0000D247                 db    0
.xdata$x:0000D248                 db    0
.xdata$x:0000D249                 db    0
.xdata$x:0000D24A                 db    0
.xdata$x:0000D24B                 db    0
.xdata$x:0000D24C                 db    0
.xdata$x:0000D24D                 db    0
.xdata$x:0000D24E                 db    0
.xdata$x:0000D24F                 db    0
.xdata$x:0000D250                 db    0
.xdata$x:0000D251                 db    0
.xdata$x:0000D252                 db    0
.xdata$x:0000D253                 db    0
.xdata$x:0000D254                 db    0
.xdata$x:0000D255                 db    0
.xdata$x:0000D256                 db    0
.xdata$x:0000D257                 db    0
.xdata$x:0000D258                 db    1
.xdata$x:0000D259                 db    0
.xdata$x:0000D25A                 db    0
.xdata$x:0000D25B                 db    0
.xdata$x:0000D25C __ehfuncinfo$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z db  22h ; "
.xdata$x:0000D25C                                         ; DATA XREF: __ehhandler$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z+14o
.xdata$x:0000D25D                 db    5
.xdata$x:0000D25E                 db  93h ; ô
.xdata$x:0000D25F                 db  19h
.xdata$x:0000D260                 db    6
.xdata$x:0000D261                 db    0
.xdata$x:0000D262                 db    0
.xdata$x:0000D263                 db    0
.xdata$x:0000D264                 dd offset __unwindtable$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z
.xdata$x:0000D268                 db    0
.xdata$x:0000D269                 db    0
.xdata$x:0000D26A                 db    0
.xdata$x:0000D26B                 db    0
.xdata$x:0000D26C                 db    0
.xdata$x:0000D26D                 db    0
.xdata$x:0000D26E                 db    0
.xdata$x:0000D26F                 db    0
.xdata$x:0000D270                 db    0
.xdata$x:0000D271                 db    0
.xdata$x:0000D272                 db    0
.xdata$x:0000D273                 db    0
.xdata$x:0000D274                 db    0
.xdata$x:0000D275                 db    0
.xdata$x:0000D276                 db    0
.xdata$x:0000D277                 db    0
.xdata$x:0000D278                 db    0
.xdata$x:0000D279                 db    0
.xdata$x:0000D27A                 db    0
.xdata$x:0000D27B                 db    0
.xdata$x:0000D27C                 db    1
.xdata$x:0000D27D                 db    0
.xdata$x:0000D27E                 db    0
.xdata$x:0000D27F                 db    0
.xdata$x:0000D280 __unwindtable$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z db 0FFh
.xdata$x:0000D280                                         ; DATA XREF: .xdata$x:0000D264o
.xdata$x:0000D281                 db 0FFh
.xdata$x:0000D282                 db 0FFh
.xdata$x:0000D283                 db 0FFh
.xdata$x:0000D284                 dd offset __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$0
.xdata$x:0000D288                 db    0
.xdata$x:0000D289                 db    0
.xdata$x:0000D28A                 db    0
.xdata$x:0000D28B                 db    0
.xdata$x:0000D28C                 dd offset __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$1
.xdata$x:0000D290                 db    1
.xdata$x:0000D291                 db    0
.xdata$x:0000D292                 db    0
.xdata$x:0000D293                 db    0
.xdata$x:0000D294                 dd offset __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$2
.xdata$x:0000D298                 db    2
.xdata$x:0000D299                 db    0
.xdata$x:0000D29A                 db    0
.xdata$x:0000D29B                 db    0
.xdata$x:0000D29C                 dd offset __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$3
.xdata$x:0000D2A0                 db    3
.xdata$x:0000D2A1                 db    0
.xdata$x:0000D2A2                 db    0
.xdata$x:0000D2A3                 db    0
.xdata$x:0000D2A4                 dd offset __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$4
.xdata$x:0000D2A8                 db    1
.xdata$x:0000D2A9                 db    0
.xdata$x:0000D2AA                 db    0
.xdata$x:0000D2AB                 db    0
.xdata$x:0000D2AC                 dd offset __unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$5
.xdata$x:0000D2B0 __unwindtable$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z db 0FFh
.xdata$x:0000D2B0                                         ; DATA XREF: .xdata$x:0000D2D8o
.xdata$x:0000D2B1                 db 0FFh
.xdata$x:0000D2B2                 db 0FFh
.xdata$x:0000D2B3                 db 0FFh
.xdata$x:0000D2B4                 dd offset __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$0
.xdata$x:0000D2B8                 db    0
.xdata$x:0000D2B9                 db    0
.xdata$x:0000D2BA                 db    0
.xdata$x:0000D2BB                 db    0
.xdata$x:0000D2BC                 dd offset __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$1
.xdata$x:0000D2C0                 db    1
.xdata$x:0000D2C1                 db    0
.xdata$x:0000D2C2                 db    0
.xdata$x:0000D2C3                 db    0
.xdata$x:0000D2C4                 dd offset __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$2
.xdata$x:0000D2C8                 db    1
.xdata$x:0000D2C9                 db    0
.xdata$x:0000D2CA                 db    0
.xdata$x:0000D2CB                 db    0
.xdata$x:0000D2CC                 dd offset __unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$3
.xdata$x:0000D2D0 __ehfuncinfo$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z db  22h ; "
.xdata$x:0000D2D0                                         ; DATA XREF: __ehhandler$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z+11o
.xdata$x:0000D2D1                 db    5
.xdata$x:0000D2D2                 db  93h ; ô
.xdata$x:0000D2D3                 db  19h
.xdata$x:0000D2D4                 db    4
.xdata$x:0000D2D5                 db    0
.xdata$x:0000D2D6                 db    0
.xdata$x:0000D2D7                 db    0
.xdata$x:0000D2D8                 dd offset __unwindtable$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z
.xdata$x:0000D2DC                 db    0
.xdata$x:0000D2DD                 db    0
.xdata$x:0000D2DE                 db    0
.xdata$x:0000D2DF                 db    0
.xdata$x:0000D2E0                 db    0
.xdata$x:0000D2E1                 db    0
.xdata$x:0000D2E2                 db    0
.xdata$x:0000D2E3                 db    0
.xdata$x:0000D2E4                 db    0
.xdata$x:0000D2E5                 db    0
.xdata$x:0000D2E6                 db    0
.xdata$x:0000D2E7                 db    0
.xdata$x:0000D2E8                 db    0
.xdata$x:0000D2E9                 db    0
.xdata$x:0000D2EA                 db    0
.xdata$x:0000D2EB                 db    0
.xdata$x:0000D2EC                 db    0
.xdata$x:0000D2ED                 db    0
.xdata$x:0000D2EE                 db    0
.xdata$x:0000D2EF                 db    0
.xdata$x:0000D2F0                 db    1
.xdata$x:0000D2F1                 db    0
.xdata$x:0000D2F2                 db    0
.xdata$x:0000D2F3                 db    0
.xdata$x:0000D2F4 __unwindtable$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ db 0FFh
.xdata$x:0000D2F4                                         ; DATA XREF: .xdata$x:0000D304o
.xdata$x:0000D2F5                 db 0FFh
.xdata$x:0000D2F6                 db 0FFh
.xdata$x:0000D2F7                 db 0FFh
.xdata$x:0000D2F8                 dd offset __unwindfunclet$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ$0
.xdata$x:0000D2FC __ehfuncinfo$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ db  22h ; "
.xdata$x:0000D2FC                                         ; DATA XREF: __ehhandler$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ+11o
.xdata$x:0000D2FD                 db    5
.xdata$x:0000D2FE                 db  93h ; ô
.xdata$x:0000D2FF                 db  19h
.xdata$x:0000D300                 db    1
.xdata$x:0000D301                 db    0
.xdata$x:0000D302                 db    0
.xdata$x:0000D303                 db    0
.xdata$x:0000D304                 dd offset __unwindtable$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ
.xdata$x:0000D308                 db    0
.xdata$x:0000D309                 db    0
.xdata$x:0000D30A                 db    0
.xdata$x:0000D30B                 db    0
.xdata$x:0000D30C                 db    0
.xdata$x:0000D30D                 db    0
.xdata$x:0000D30E                 db    0
.xdata$x:0000D30F                 db    0
.xdata$x:0000D310                 db    0
.xdata$x:0000D311                 db    0
.xdata$x:0000D312                 db    0
.xdata$x:0000D313                 db    0
.xdata$x:0000D314                 db    0
.xdata$x:0000D315                 db    0
.xdata$x:0000D316                 db    0
.xdata$x:0000D317                 db    0
.xdata$x:0000D318                 db    0
.xdata$x:0000D319                 db    0
.xdata$x:0000D31A                 db    0
.xdata$x:0000D31B                 db    0
.xdata$x:0000D31C                 db    1
.xdata$x:0000D31D                 db    0
.xdata$x:0000D31E                 db    0
.xdata$x:0000D31F                 db    0
.xdata$x:0000D320 __ehfuncinfo$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z db  22h ; "
.xdata$x:0000D320                                         ; DATA XREF: __ehhandler$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z+14o
.xdata$x:0000D321                 db    5
.xdata$x:0000D322                 db  93h ; ô
.xdata$x:0000D323                 db  19h
.xdata$x:0000D324                 db    9
.xdata$x:0000D325                 db    0
.xdata$x:0000D326                 db    0
.xdata$x:0000D327                 db    0
.xdata$x:0000D328                 dd offset __unwindtable$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
.xdata$x:0000D32C                 align 20h
.xdata$x:0000D340                 db    1
.xdata$x:0000D341                 db    0
.xdata$x:0000D342                 db    0
.xdata$x:0000D343                 db    0
.xdata$x:0000D344 __unwindtable$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z db 0FFh
.xdata$x:0000D344                                         ; DATA XREF: .xdata$x:0000D328o
.xdata$x:0000D345                 db 0FFh
.xdata$x:0000D346                 db 0FFh
.xdata$x:0000D347                 db 0FFh
.xdata$x:0000D348                 dd offset __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0
.xdata$x:0000D34C                 db 0FFh
.xdata$x:0000D34D                 db 0FFh
.xdata$x:0000D34E                 db 0FFh
.xdata$x:0000D34F                 db 0FFh
.xdata$x:0000D350                 dd offset __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1
.xdata$x:0000D354                 db 0FFh
.xdata$x:0000D355                 db 0FFh
.xdata$x:0000D356                 db 0FFh
.xdata$x:0000D357                 db 0FFh
.xdata$x:0000D358                 dd offset __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2
.xdata$x:0000D35C                 db    2
.xdata$x:0000D35D                 db    0
.xdata$x:0000D35E                 db    0
.xdata$x:0000D35F                 db    0
.xdata$x:0000D360                 dd offset __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3
.xdata$x:0000D364                 db    3
.xdata$x:0000D365                 db    0
.xdata$x:0000D366                 db    0
.xdata$x:0000D367                 db    0
.xdata$x:0000D368                 dd offset __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4
.xdata$x:0000D36C                 db    4
.xdata$x:0000D36D                 db    0
.xdata$x:0000D36E                 db    0
.xdata$x:0000D36F                 db    0
.xdata$x:0000D370                 dd offset __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5
.xdata$x:0000D374                 db    5
.xdata$x:0000D375                 db    0
.xdata$x:0000D376                 db    0
.xdata$x:0000D377                 db    0
.xdata$x:0000D378                 dd offset __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6
.xdata$x:0000D37C                 db    5
.xdata$x:0000D37D                 db    0
.xdata$x:0000D37E                 db    0
.xdata$x:0000D37F                 db    0
.xdata$x:0000D380                 dd offset __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7
.xdata$x:0000D384                 db    7
.xdata$x:0000D385                 db    0
.xdata$x:0000D386                 db    0
.xdata$x:0000D387                 db    0
.xdata$x:0000D388                 dd offset __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$8
.xdata$x:0000D38C __ehfuncinfo$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z db  22h ; "
.xdata$x:0000D38C                                         ; DATA XREF: __ehhandler$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z+11o
.xdata$x:0000D38D                 db    5
.xdata$x:0000D38E                 db  93h ; ô
.xdata$x:0000D38F                 db  19h
.xdata$x:0000D390                 db    5
.xdata$x:0000D391                 db    0
.xdata$x:0000D392                 db    0
.xdata$x:0000D393                 db    0
.xdata$x:0000D394                 dd offset __unwindtable$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z
.xdata$x:0000D398                 db    0
.xdata$x:0000D399                 db    0
.xdata$x:0000D39A                 db    0
.xdata$x:0000D39B                 db    0
.xdata$x:0000D39C                 db    0
.xdata$x:0000D39D                 db    0
.xdata$x:0000D39E                 db    0
.xdata$x:0000D39F                 db    0
.xdata$x:0000D3A0                 db    0
.xdata$x:0000D3A1                 db    0
.xdata$x:0000D3A2                 db    0
.xdata$x:0000D3A3                 db    0
.xdata$x:0000D3A4                 db    0
.xdata$x:0000D3A5                 db    0
.xdata$x:0000D3A6                 db    0
.xdata$x:0000D3A7                 db    0
.xdata$x:0000D3A8                 db    0
.xdata$x:0000D3A9                 db    0
.xdata$x:0000D3AA                 db    0
.xdata$x:0000D3AB                 db    0
.xdata$x:0000D3AC                 db    1
.xdata$x:0000D3AD                 db    0
.xdata$x:0000D3AE                 db    0
.xdata$x:0000D3AF                 db    0
.xdata$x:0000D3B0 __unwindtable$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z db 0FFh
.xdata$x:0000D3B0                                         ; DATA XREF: .xdata$x:0000D394o
.xdata$x:0000D3B1                 db 0FFh
.xdata$x:0000D3B2                 db 0FFh
.xdata$x:0000D3B3                 db 0FFh
.xdata$x:0000D3B4                 dd offset __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$0
.xdata$x:0000D3B8                 db 0FFh
.xdata$x:0000D3B9                 db 0FFh
.xdata$x:0000D3BA                 db 0FFh
.xdata$x:0000D3BB                 db 0FFh
.xdata$x:0000D3BC                 dd offset __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$1
.xdata$x:0000D3C0                 db    1
.xdata$x:0000D3C1                 db    0
.xdata$x:0000D3C2                 db    0
.xdata$x:0000D3C3                 db    0
.xdata$x:0000D3C4                 dd offset __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$2
.xdata$x:0000D3C8                 db    2
.xdata$x:0000D3C9                 db    0
.xdata$x:0000D3CA                 db    0
.xdata$x:0000D3CB                 db    0
.xdata$x:0000D3CC                 dd offset __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$3
.xdata$x:0000D3D0                 db    3
.xdata$x:0000D3D1                 db    0
.xdata$x:0000D3D2                 db    0
.xdata$x:0000D3D3                 db    0
.xdata$x:0000D3D4                 dd offset __unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$4
.xdata$x:0000D3D8 __unwindtable$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z db 0FFh
.xdata$x:0000D3D8                                         ; DATA XREF: .xdata$x:0000D3F0o
.xdata$x:0000D3D9                 db 0FFh
.xdata$x:0000D3DA                 db 0FFh
.xdata$x:0000D3DB                 db 0FFh
.xdata$x:0000D3DC                 dd offset __unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$0
.xdata$x:0000D3E0                 db    0
.xdata$x:0000D3E1                 db    0
.xdata$x:0000D3E2                 db    0
.xdata$x:0000D3E3                 db    0
.xdata$x:0000D3E4                 dd offset __unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$1
.xdata$x:0000D3E8 __ehfuncinfo$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z db  22h ; "
.xdata$x:0000D3E8                                         ; DATA XREF: __ehhandler$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z+11o
.xdata$x:0000D3E9                 db    5
.xdata$x:0000D3EA                 db  93h ; ô
.xdata$x:0000D3EB                 db  19h
.xdata$x:0000D3EC                 db    2
.xdata$x:0000D3ED                 db    0
.xdata$x:0000D3EE                 db    0
.xdata$x:0000D3EF                 db    0
.xdata$x:0000D3F0                 dd offset __unwindtable$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z
.xdata$x:0000D3F4                 db    0
.xdata$x:0000D3F5                 db    0
.xdata$x:0000D3F6                 db    0
.xdata$x:0000D3F7                 db    0
.xdata$x:0000D3F8                 db    0
.xdata$x:0000D3F9                 db    0
.xdata$x:0000D3FA                 db    0
.xdata$x:0000D3FB                 db    0
.xdata$x:0000D3FC                 db    0
.xdata$x:0000D3FD                 db    0
.xdata$x:0000D3FE                 db    0
.xdata$x:0000D3FF                 db    0
.xdata$x:0000D400                 db    0
.xdata$x:0000D401                 db    0
.xdata$x:0000D402                 db    0
.xdata$x:0000D403                 db    0
.xdata$x:0000D404                 db    0
.xdata$x:0000D405                 db    0
.xdata$x:0000D406                 db    0
.xdata$x:0000D407                 db    0
.xdata$x:0000D408                 db    1
.xdata$x:0000D409                 db    0
.xdata$x:0000D40A                 db    0
.xdata$x:0000D40B                 db    0
.xdata$x:0000D40C __ehfuncinfo$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z db  22h ; "
.xdata$x:0000D40C                                         ; DATA XREF: __ehhandler$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z+14o
.xdata$x:0000D40D                 db    5
.xdata$x:0000D40E                 db  93h ; ô
.xdata$x:0000D40F                 db  19h
.xdata$x:0000D410                 db    8
.xdata$x:0000D411                 db    0
.xdata$x:0000D412                 db    0
.xdata$x:0000D413                 db    0
.xdata$x:0000D414                 dd offset __unwindtable$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
.xdata$x:0000D418                 db    0
.xdata$x:0000D419                 db    0
.xdata$x:0000D41A                 db    0
.xdata$x:0000D41B                 db    0
.xdata$x:0000D41C                 db    0
.xdata$x:0000D41D                 db    0
.xdata$x:0000D41E                 db    0
.xdata$x:0000D41F                 db    0
.xdata$x:0000D420                 db    0
.xdata$x:0000D421                 db    0
.xdata$x:0000D422                 db    0
.xdata$x:0000D423                 db    0
.xdata$x:0000D424                 db    0
.xdata$x:0000D425                 db    0
.xdata$x:0000D426                 db    0
.xdata$x:0000D427                 db    0
.xdata$x:0000D428                 db    0
.xdata$x:0000D429                 db    0
.xdata$x:0000D42A                 db    0
.xdata$x:0000D42B                 db    0
.xdata$x:0000D42C                 db    1
.xdata$x:0000D42D                 db    0
.xdata$x:0000D42E                 db    0
.xdata$x:0000D42F                 db    0
.xdata$x:0000D430 __unwindtable$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z db 0FFh
.xdata$x:0000D430                                         ; DATA XREF: .xdata$x:0000D414o
.xdata$x:0000D431                 db 0FFh
.xdata$x:0000D432                 db 0FFh
.xdata$x:0000D433                 db 0FFh
.xdata$x:0000D434                 dd offset __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0
.xdata$x:0000D438                 db    0
.xdata$x:0000D439                 db    0
.xdata$x:0000D43A                 db    0
.xdata$x:0000D43B                 db    0
.xdata$x:0000D43C                 dd offset __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1
.xdata$x:0000D440                 db    1
.xdata$x:0000D441                 db    0
.xdata$x:0000D442                 db    0
.xdata$x:0000D443                 db    0
.xdata$x:0000D444                 dd offset __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2
.xdata$x:0000D448                 db    1
.xdata$x:0000D449                 db    0
.xdata$x:0000D44A                 db    0
.xdata$x:0000D44B                 db    0
.xdata$x:0000D44C                 dd offset __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3
.xdata$x:0000D450                 db    3
.xdata$x:0000D451                 db    0
.xdata$x:0000D452                 db    0
.xdata$x:0000D453                 db    0
.xdata$x:0000D454                 dd offset __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4
.xdata$x:0000D458                 db    4
.xdata$x:0000D459                 db    0
.xdata$x:0000D45A                 db    0
.xdata$x:0000D45B                 db    0
.xdata$x:0000D45C                 dd offset __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5
.xdata$x:0000D460                 db    3
.xdata$x:0000D461                 db    0
.xdata$x:0000D462                 db    0
.xdata$x:0000D463                 db    0
.xdata$x:0000D464                 dd offset __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6
.xdata$x:0000D468                 db    3
.xdata$x:0000D469                 db    0
.xdata$x:0000D46A                 db    0
.xdata$x:0000D46B                 db    0
.xdata$x:0000D46C                 dd offset __unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7
.xdata$x:0000D470 __unwindtable$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z db 0FFh
.xdata$x:0000D470                                         ; DATA XREF: .xdata$x:0000D490o
.xdata$x:0000D471                 db 0FFh
.xdata$x:0000D472                 db 0FFh
.xdata$x:0000D473                 db 0FFh
.xdata$x:0000D474                 dd offset __unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$0
.xdata$x:0000D478                 db    0
.xdata$x:0000D479                 db    0
.xdata$x:0000D47A                 db    0
.xdata$x:0000D47B                 db    0
.xdata$x:0000D47C                 dd offset __unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$1
.xdata$x:0000D480                 db    0
.xdata$x:0000D481                 db    0
.xdata$x:0000D482                 db    0
.xdata$x:0000D483                 db    0
.xdata$x:0000D484                 dd offset __unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$2
.xdata$x:0000D488 __ehfuncinfo$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z db  22h ; "
.xdata$x:0000D488                                         ; DATA XREF: __ehhandler$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z+11o
.xdata$x:0000D489                 db    5
.xdata$x:0000D48A                 db  93h ; ô
.xdata$x:0000D48B                 db  19h
.xdata$x:0000D48C                 db    3
.xdata$x:0000D48D                 db    0
.xdata$x:0000D48E                 db    0
.xdata$x:0000D48F                 db    0
.xdata$x:0000D490                 dd offset __unwindtable$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z
.xdata$x:0000D494                 db    0
.xdata$x:0000D495                 db    0
.xdata$x:0000D496                 db    0
.xdata$x:0000D497                 db    0
.xdata$x:0000D498                 db    0
.xdata$x:0000D499                 db    0
.xdata$x:0000D49A                 db    0
.xdata$x:0000D49B                 db    0
.xdata$x:0000D49C                 db    0
.xdata$x:0000D49D                 db    0
.xdata$x:0000D49E                 db    0
.xdata$x:0000D49F                 db    0
.xdata$x:0000D4A0                 db    0
.xdata$x:0000D4A1                 db    0
.xdata$x:0000D4A2                 db    0
.xdata$x:0000D4A3                 db    0
.xdata$x:0000D4A4                 db    0
.xdata$x:0000D4A5                 db    0
.xdata$x:0000D4A6                 db    0
.xdata$x:0000D4A7                 db    0
.xdata$x:0000D4A8                 db    1
.xdata$x:0000D4A9                 db    0
.xdata$x:0000D4AA                 db    0
.xdata$x:0000D4AB                 db    0
.xdata$x:0000D4AC __unwindtable$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z db 0FFh
.xdata$x:0000D4AC                                         ; DATA XREF: .xdata$x:0000D4BCo
.xdata$x:0000D4AD                 db 0FFh
.xdata$x:0000D4AE                 db 0FFh
.xdata$x:0000D4AF                 db 0FFh
.xdata$x:0000D4B0                 dd offset __unwindfunclet$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z$0
.xdata$x:0000D4B4 __ehfuncinfo$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z db  22h ; "
.xdata$x:0000D4B4                                         ; DATA XREF: __ehhandler$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z+11o
.xdata$x:0000D4B5                 db    5
.xdata$x:0000D4B6                 db  93h ; ô
.xdata$x:0000D4B7                 db  19h
.xdata$x:0000D4B8                 db    1
.xdata$x:0000D4B9                 db    0
.xdata$x:0000D4BA                 db    0
.xdata$x:0000D4BB                 db    0
.xdata$x:0000D4BC                 dd offset __unwindtable$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z
.xdata$x:0000D4C0                 db    0
.xdata$x:0000D4C1                 db    0
.xdata$x:0000D4C2                 db    0
.xdata$x:0000D4C3                 db    0
.xdata$x:0000D4C4                 db    0
.xdata$x:0000D4C5                 db    0
.xdata$x:0000D4C6                 db    0
.xdata$x:0000D4C7                 db    0
.xdata$x:0000D4C8                 db    0
.xdata$x:0000D4C9                 db    0
.xdata$x:0000D4CA                 db    0
.xdata$x:0000D4CB                 db    0
.xdata$x:0000D4CC                 db    0
.xdata$x:0000D4CD                 db    0
.xdata$x:0000D4CE                 db    0
.xdata$x:0000D4CF                 db    0
.xdata$x:0000D4D0                 db    0
.xdata$x:0000D4D1                 db    0
.xdata$x:0000D4D2                 db    0
.xdata$x:0000D4D3                 db    0
.xdata$x:0000D4D4                 db    1
.xdata$x:0000D4D5                 db    0
.xdata$x:0000D4D6                 db    0
.xdata$x:0000D4D7                 db    0
.xdata$x:0000D4D7 _xdata$x        ends
.xdata$x:0000D4D7
.text:0000D4D8 ; ===========================================================================
.text:0000D4D8
.text:0000D4D8 ; Segment type: Pure code
.text:0000D4D8 ; Segment permissions: Read/Execute
.text:0000D4D8 _text           segment para public 'CODE' use32
.text:0000D4D8                 assume cs:_text
.text:0000D4D8                 ;org 0D4D8h
.text:0000D4D8 ; COMDAT (pick any)
.text:0000D4D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D4D8
.text:0000D4D8 ; =============== S U B R O U T I N E =======================================
.text:0000D4D8
.text:0000D4D8 ; Attributes: bp-based frame
.text:0000D4D8
.text:0000D4D8 ; _DWORD __thiscall NArchive::NParser::CParseItem::CParseItem(NArchive::NParser::CParseItem *__hidden this)
.text:0000D4D8                 public ??0CParseItem@NParser@NArchive@@QAE@XZ
.text:0000D4D8 ??0CParseItem@NParser@NArchive@@QAE@XZ proc near
.text:0000D4D8                                         ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+71p
.text:0000D4D8                                         ; CArc::OpenStream2(COpenOptions const &)+22F4p ...
.text:0000D4D8
.text:0000D4D8 var_10          = dword ptr -10h
.text:0000D4D8 var_C           = dword ptr -0Ch
.text:0000D4D8 var_4           = dword ptr -4
.text:0000D4D8
.text:0000D4D8                 push    ebp
.text:0000D4D9                 mov     ebp, esp
.text:0000D4DB                 push    0FFFFFFFFh
.text:0000D4DD                 push    offset __ehhandler$??0CParseItem@NParser@NArchive@@QAE@XZ
.text:0000D4E2                 mov     eax, large fs:0
.text:0000D4E8                 push    eax
.text:0000D4E9                 push    ecx
.text:0000D4EA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000D4F1                 mov     eax, dword ptr ds:___security_cookie
.text:0000D4F6                 xor     eax, ebp
.text:0000D4F8                 push    eax
.text:0000D4F9                 lea     eax, [ebp+var_C]
.text:0000D4FC                 mov     large fs:0, eax
.text:0000D502                 mov     [ebp+var_10], ecx
.text:0000D505                 mov     ecx, [ebp+var_10]
.text:0000D508                 add     ecx, 10h
.text:0000D50B                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000D510                 mov     [ebp+var_4], 0
.text:0000D517                 mov     ecx, [ebp+var_10]
.text:0000D51A                 add     ecx, 1Ch
.text:0000D51D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000D522                 mov     byte ptr [ebp+var_4], 1
.text:0000D526                 mov     ecx, [ebp+var_10]
.text:0000D529                 add     ecx, 30h ; '0'
.text:0000D52C                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000D531                 mov     byte ptr [ebp+var_4], 2
.text:0000D535                 mov     ecx, [ebp+var_10]
.text:0000D538                 add     ecx, 3Ch ; '<'
.text:0000D53B                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000D540                 mov     eax, [ebp+var_10]
.text:0000D543                 mov     byte ptr [eax+48h], 0
.text:0000D547                 mov     ecx, [ebp+var_10]
.text:0000D54A                 mov     byte ptr [ecx+49h], 0
.text:0000D54E                 mov     edx, [ebp+var_10]
.text:0000D551                 mov     byte ptr [edx+4Ah], 0
.text:0000D555                 mov     eax, [ebp+var_10]
.text:0000D558                 mov     byte ptr [eax+4Bh], 0
.text:0000D55C                 mov     ecx, [ebp+var_10]
.text:0000D55F                 mov     byte ptr [ecx+4Ch], 0
.text:0000D563                 mov     edx, [ebp+var_10]
.text:0000D566                 mov     byte ptr [edx+4Dh], 0
.text:0000D56A                 mov     eax, [ebp+var_10]
.text:0000D56D                 mov     byte ptr [eax+6Ch], 0
.text:0000D571                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000D578                 mov     eax, [ebp+var_10]
.text:0000D57B                 mov     ecx, [ebp+var_C]
.text:0000D57E                 mov     large fs:0, ecx
.text:0000D585                 pop     ecx
.text:0000D586                 add     esp, 10h
.text:0000D589                 cmp     ebp, esp
.text:0000D58B                 call    __RTC_CheckEsp
.text:0000D590                 mov     esp, ebp
.text:0000D592                 pop     ebp
.text:0000D593                 retn
.text:0000D593 ??0CParseItem@NParser@NArchive@@QAE@XZ endp
.text:0000D593
.text:0000D593 _text           ends
.text:0000D593
.text$x:0000D594 ; ===========================================================================
.text$x:0000D594
.text$x:0000D594 ; Segment type: Pure code
.text$x:0000D594 ; Segment permissions: Read/Execute
.text$x:0000D594 _text$x         segment para public 'CODE' use32
.text$x:0000D594                 assume cs:_text$x
.text$x:0000D594                 ;org 0D594h
.text$x:0000D594 ; COMDAT (pick associative to section at D4D8)
.text$x:0000D594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D594
.text$x:0000D594 ; =============== S U B R O U T I N E =======================================
.text$x:0000D594
.text$x:0000D594
.text$x:0000D594 __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$0 proc near
.text$x:0000D594                                         ; DATA XREF: .xdata$x:0000D5D4o
.text$x:0000D594                 mov     ecx, [ebp-10h]
.text$x:0000D597                 add     ecx, 10h        ; this
.text$x:0000D59A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000D59A __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$0 endp
.text$x:0000D59A
.text$x:0000D59F
.text$x:0000D59F ; =============== S U B R O U T I N E =======================================
.text$x:0000D59F
.text$x:0000D59F
.text$x:0000D59F __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$1 proc near
.text$x:0000D59F                                         ; DATA XREF: .xdata$x:0000D5DCo
.text$x:0000D59F                 mov     ecx, [ebp-10h]
.text$x:0000D5A2                 add     ecx, 1Ch        ; this
.text$x:0000D5A5                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000D5A5 __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$1 endp
.text$x:0000D5A5
.text$x:0000D5AA
.text$x:0000D5AA ; =============== S U B R O U T I N E =======================================
.text$x:0000D5AA
.text$x:0000D5AA
.text$x:0000D5AA __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$2 proc near
.text$x:0000D5AA                                         ; DATA XREF: .xdata$x:0000D5E4o
.text$x:0000D5AA                 mov     ecx, [ebp-10h]
.text$x:0000D5AD                 add     ecx, 30h ; '0'  ; this
.text$x:0000D5B0                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000D5B0 __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$2 endp
.text$x:0000D5B0
.text$x:0000D5B5
.text$x:0000D5B5 ; =============== S U B R O U T I N E =======================================
.text$x:0000D5B5
.text$x:0000D5B5
.text$x:0000D5B5 __ehhandler$??0CParseItem@NParser@NArchive@@QAE@XZ proc near
.text$x:0000D5B5                                         ; DATA XREF: NArchive::NParser::CParseItem::CParseItem(void)+5o
.text$x:0000D5B5
.text$x:0000D5B5 arg_4           = dword ptr  8
.text$x:0000D5B5
.text$x:0000D5B5                 mov     edx, [esp+arg_4]
.text$x:0000D5B9                 lea     eax, [edx+0Ch]
.text$x:0000D5BC                 mov     ecx, [edx-8]
.text$x:0000D5BF                 xor     ecx, eax
.text$x:0000D5C1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D5C6                 mov     eax, offset __ehfuncinfo$??0CParseItem@NParser@NArchive@@QAE@XZ
.text$x:0000D5CB                 jmp     ___CxxFrameHandler3
.text$x:0000D5CB __ehhandler$??0CParseItem@NParser@NArchive@@QAE@XZ endp
.text$x:0000D5CB
.text$x:0000D5CB _text$x         ends
.text$x:0000D5CB
.xdata$x:0000D5D0 ; ===========================================================================
.xdata$x:0000D5D0
.xdata$x:0000D5D0 ; Segment type: Pure data
.xdata$x:0000D5D0 ; Segment permissions: Read
.xdata$x:0000D5D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D5D0                 assume cs:_xdata$x
.xdata$x:0000D5D0                 ;org 0D5D0h
.xdata$x:0000D5D0 ; COMDAT (pick associative to section at D4D8)
.xdata$x:0000D5D0 __unwindtable$??0CParseItem@NParser@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000D5D0                                         ; DATA XREF: .xdata$x:0000D5F0o
.xdata$x:0000D5D1                 db 0FFh
.xdata$x:0000D5D2                 db 0FFh
.xdata$x:0000D5D3                 db 0FFh
.xdata$x:0000D5D4                 dd offset __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$0
.xdata$x:0000D5D8                 db    0
.xdata$x:0000D5D9                 db    0
.xdata$x:0000D5DA                 db    0
.xdata$x:0000D5DB                 db    0
.xdata$x:0000D5DC                 dd offset __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$1
.xdata$x:0000D5E0                 db    1
.xdata$x:0000D5E1                 db    0
.xdata$x:0000D5E2                 db    0
.xdata$x:0000D5E3                 db    0
.xdata$x:0000D5E4                 dd offset __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$2
.xdata$x:0000D5E8 __ehfuncinfo$??0CParseItem@NParser@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000D5E8                                         ; DATA XREF: __ehhandler$??0CParseItem@NParser@NArchive@@QAE@XZ+11o
.xdata$x:0000D5E9                 db    5
.xdata$x:0000D5EA                 db  93h ; ô
.xdata$x:0000D5EB                 db  19h
.xdata$x:0000D5EC                 db    3
.xdata$x:0000D5ED                 db    0
.xdata$x:0000D5EE                 db    0
.xdata$x:0000D5EF                 db    0
.xdata$x:0000D5F0                 dd offset __unwindtable$??0CParseItem@NParser@NArchive@@QAE@XZ
.xdata$x:0000D5F4                 db    0
.xdata$x:0000D5F5                 db    0
.xdata$x:0000D5F6                 db    0
.xdata$x:0000D5F7                 db    0
.xdata$x:0000D5F8                 db    0
.xdata$x:0000D5F9                 db    0
.xdata$x:0000D5FA                 db    0
.xdata$x:0000D5FB                 db    0
.xdata$x:0000D5FC                 db    0
.xdata$x:0000D5FD                 db    0
.xdata$x:0000D5FE                 db    0
.xdata$x:0000D5FF                 db    0
.xdata$x:0000D600                 db    0
.xdata$x:0000D601                 db    0
.xdata$x:0000D602                 db    0
.xdata$x:0000D603                 db    0
.xdata$x:0000D604                 db    0
.xdata$x:0000D605                 db    0
.xdata$x:0000D606                 db    0
.xdata$x:0000D607                 db    0
.xdata$x:0000D608                 db    1
.xdata$x:0000D609                 db    0
.xdata$x:0000D60A                 db    0
.xdata$x:0000D60B                 db    0
.xdata$x:0000D60B _xdata$x        ends
.xdata$x:0000D60B
.text:0000D60C ; ===========================================================================
.text:0000D60C
.text:0000D60C ; Segment type: Pure code
.text:0000D60C ; Segment permissions: Read/Execute
.text:0000D60C _text           segment para public 'CODE' use32
.text:0000D60C                 assume cs:_text
.text:0000D60C                 ;org 0D60Ch
.text:0000D60C ; COMDAT (pick any)
.text:0000D60C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D60C
.text:0000D60C ; =============== S U B R O U T I N E =======================================
.text:0000D60C
.text:0000D60C ; Attributes: bp-based frame
.text:0000D60C
.text:0000D60C ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:0000D60C                 public ??1UString@@QAE@XZ
.text:0000D60C ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+16Cp
.text:0000D60C                                         ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+E1p ...
.text:0000D60C
.text:0000D60C var_8           = dword ptr -8
.text:0000D60C var_4           = dword ptr -4
.text:0000D60C
.text:0000D60C                 push    ebp
.text:0000D60D                 mov     ebp, esp
.text:0000D60F                 sub     esp, 8
.text:0000D612                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000D619                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D620                 mov     [ebp+var_4], ecx
.text:0000D623                 mov     eax, [ebp+var_4]
.text:0000D626                 mov     ecx, [eax]
.text:0000D628                 mov     [ebp+var_8], ecx
.text:0000D62B                 mov     edx, [ebp+var_8]
.text:0000D62E                 push    edx             ; void *
.text:0000D62F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000D634                 add     esp, 4
.text:0000D637                 add     esp, 8
.text:0000D63A                 cmp     ebp, esp
.text:0000D63C                 call    __RTC_CheckEsp
.text:0000D641                 mov     esp, ebp
.text:0000D643                 pop     ebp
.text:0000D644                 retn
.text:0000D644 ??1UString@@QAE@XZ endp
.text:0000D644
.text:0000D644 ; ---------------------------------------------------------------------------
.text:0000D645                 align 4
.text:0000D645 _text           ends
.text:0000D645
.text:0000D648 ; ===========================================================================
.text:0000D648
.text:0000D648 ; Segment type: Pure code
.text:0000D648 ; Segment permissions: Read/Execute
.text:0000D648 _text           segment para public 'CODE' use32
.text:0000D648                 assume cs:_text
.text:0000D648                 ;org 0D648h
.text:0000D648 ; COMDAT (pick any)
.text:0000D648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D648
.text:0000D648 ; =============== S U B R O U T I N E =======================================
.text:0000D648
.text:0000D648 ; Attributes: bp-based frame
.text:0000D648
.text:0000D648 ; _DWORD __thiscall NArchive::NParser::CParseItem::~CParseItem(NArchive::NParser::CParseItem *__hidden this)
.text:0000D648                 public ??1CParseItem@NParser@NArchive@@QAE@XZ
.text:0000D648 ??1CParseItem@NParser@NArchive@@QAE@XZ proc near
.text:0000D648                                         ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+D2p
.text:0000D648                                         ; CArc::OpenStream2(COpenOptions const &)+2427p ...
.text:0000D648
.text:0000D648 var_10          = dword ptr -10h
.text:0000D648 var_C           = dword ptr -0Ch
.text:0000D648 var_4           = dword ptr -4
.text:0000D648
.text:0000D648                 push    ebp
.text:0000D649                 mov     ebp, esp
.text:0000D64B                 push    0FFFFFFFFh
.text:0000D64D                 push    offset __ehhandler$??1CParseItem@NParser@NArchive@@QAE@XZ
.text:0000D652                 mov     eax, large fs:0
.text:0000D658                 push    eax
.text:0000D659                 push    ecx
.text:0000D65A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000D661                 mov     eax, dword ptr ds:___security_cookie
.text:0000D666                 xor     eax, ebp
.text:0000D668                 push    eax
.text:0000D669                 lea     eax, [ebp+var_C]
.text:0000D66C                 mov     large fs:0, eax
.text:0000D672                 mov     [ebp+var_10], ecx
.text:0000D675                 mov     [ebp+var_4], 2
.text:0000D67C                 mov     ecx, [ebp+var_10]
.text:0000D67F                 add     ecx, 3Ch ; '<'  ; this
.text:0000D682                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000D687                 mov     byte ptr [ebp+var_4], 1
.text:0000D68B                 mov     ecx, [ebp+var_10]
.text:0000D68E                 add     ecx, 30h ; '0'  ; this
.text:0000D691                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000D696                 mov     byte ptr [ebp+var_4], 0
.text:0000D69A                 mov     ecx, [ebp+var_10]
.text:0000D69D                 add     ecx, 1Ch        ; this
.text:0000D6A0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000D6A5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000D6AC                 mov     ecx, [ebp+var_10]
.text:0000D6AF                 add     ecx, 10h        ; this
.text:0000D6B2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000D6B7                 mov     ecx, [ebp+var_C]
.text:0000D6BA                 mov     large fs:0, ecx
.text:0000D6C1                 pop     ecx
.text:0000D6C2                 add     esp, 10h
.text:0000D6C5                 cmp     ebp, esp
.text:0000D6C7                 call    __RTC_CheckEsp
.text:0000D6CC                 mov     esp, ebp
.text:0000D6CE                 pop     ebp
.text:0000D6CF                 retn
.text:0000D6CF ??1CParseItem@NParser@NArchive@@QAE@XZ endp
.text:0000D6CF
.text:0000D6CF _text           ends
.text:0000D6CF
.text$x:0000D6D0 ; ===========================================================================
.text$x:0000D6D0
.text$x:0000D6D0 ; Segment type: Pure code
.text$x:0000D6D0 ; Segment permissions: Read/Execute
.text$x:0000D6D0 _text$x         segment para public 'CODE' use32
.text$x:0000D6D0                 assume cs:_text$x
.text$x:0000D6D0                 ;org 0D6D0h
.text$x:0000D6D0 ; COMDAT (pick associative to section at D648)
.text$x:0000D6D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D6D0
.text$x:0000D6D0 ; =============== S U B R O U T I N E =======================================
.text$x:0000D6D0
.text$x:0000D6D0
.text$x:0000D6D0 __unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$0 proc near
.text$x:0000D6D0                                         ; DATA XREF: .xdata$x:0000D710o
.text$x:0000D6D0                 mov     ecx, [ebp-10h]
.text$x:0000D6D3                 add     ecx, 10h        ; this
.text$x:0000D6D6                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000D6D6 __unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$0 endp
.text$x:0000D6D6
.text$x:0000D6DB
.text$x:0000D6DB ; =============== S U B R O U T I N E =======================================
.text$x:0000D6DB
.text$x:0000D6DB
.text$x:0000D6DB __unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$1 proc near
.text$x:0000D6DB                                         ; DATA XREF: .xdata$x:0000D718o
.text$x:0000D6DB                 mov     ecx, [ebp-10h]
.text$x:0000D6DE                 add     ecx, 1Ch        ; this
.text$x:0000D6E1                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000D6E1 __unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$1 endp
.text$x:0000D6E1
.text$x:0000D6E6
.text$x:0000D6E6 ; =============== S U B R O U T I N E =======================================
.text$x:0000D6E6
.text$x:0000D6E6
.text$x:0000D6E6 __unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$2 proc near
.text$x:0000D6E6                                         ; DATA XREF: .xdata$x:0000D720o
.text$x:0000D6E6                 mov     ecx, [ebp-10h]
.text$x:0000D6E9                 add     ecx, 30h ; '0'  ; this
.text$x:0000D6EC                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000D6EC __unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$2 endp
.text$x:0000D6EC
.text$x:0000D6F1
.text$x:0000D6F1 ; =============== S U B R O U T I N E =======================================
.text$x:0000D6F1
.text$x:0000D6F1
.text$x:0000D6F1 __ehhandler$??1CParseItem@NParser@NArchive@@QAE@XZ proc near
.text$x:0000D6F1                                         ; DATA XREF: NArchive::NParser::CParseItem::~CParseItem(void)+5o
.text$x:0000D6F1
.text$x:0000D6F1 arg_4           = dword ptr  8
.text$x:0000D6F1
.text$x:0000D6F1                 mov     edx, [esp+arg_4]
.text$x:0000D6F5                 lea     eax, [edx+0Ch]
.text$x:0000D6F8                 mov     ecx, [edx-8]
.text$x:0000D6FB                 xor     ecx, eax
.text$x:0000D6FD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D702                 mov     eax, offset __ehfuncinfo$??1CParseItem@NParser@NArchive@@QAE@XZ
.text$x:0000D707                 jmp     ___CxxFrameHandler3
.text$x:0000D707 __ehhandler$??1CParseItem@NParser@NArchive@@QAE@XZ endp
.text$x:0000D707
.text$x:0000D707 _text$x         ends
.text$x:0000D707
.xdata$x:0000D70C ; ===========================================================================
.xdata$x:0000D70C
.xdata$x:0000D70C ; Segment type: Pure data
.xdata$x:0000D70C ; Segment permissions: Read
.xdata$x:0000D70C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D70C                 assume cs:_xdata$x
.xdata$x:0000D70C                 ;org 0D70Ch
.xdata$x:0000D70C ; COMDAT (pick associative to section at D648)
.xdata$x:0000D70C __unwindtable$??1CParseItem@NParser@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000D70C                                         ; DATA XREF: .xdata$x:0000D72Co
.xdata$x:0000D70D                 db 0FFh
.xdata$x:0000D70E                 db 0FFh
.xdata$x:0000D70F                 db 0FFh
.xdata$x:0000D710                 dd offset __unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$0
.xdata$x:0000D714                 align 8
.xdata$x:0000D718                 dd offset __unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$1
.xdata$x:0000D71C                 db    1
.xdata$x:0000D71D                 db    0
.xdata$x:0000D71E                 db    0
.xdata$x:0000D71F                 db    0
.xdata$x:0000D720                 dd offset __unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$2
.xdata$x:0000D724 __ehfuncinfo$??1CParseItem@NParser@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000D724                                         ; DATA XREF: __ehhandler$??1CParseItem@NParser@NArchive@@QAE@XZ+11o
.xdata$x:0000D725                 db    5
.xdata$x:0000D726                 db  93h ; ô
.xdata$x:0000D727                 db  19h
.xdata$x:0000D728                 db    3
.xdata$x:0000D729                 db    0
.xdata$x:0000D72A                 db    0
.xdata$x:0000D72B                 db    0
.xdata$x:0000D72C                 dd offset __unwindtable$??1CParseItem@NParser@NArchive@@QAE@XZ
.xdata$x:0000D730                 db    0
.xdata$x:0000D731                 db    0
.xdata$x:0000D732                 db    0
.xdata$x:0000D733                 db    0
.xdata$x:0000D734                 db    0
.xdata$x:0000D735                 db    0
.xdata$x:0000D736                 db    0
.xdata$x:0000D737                 db    0
.xdata$x:0000D738                 db    0
.xdata$x:0000D739                 db    0
.xdata$x:0000D73A                 db    0
.xdata$x:0000D73B                 db    0
.xdata$x:0000D73C                 db    0
.xdata$x:0000D73D                 db    0
.xdata$x:0000D73E                 db    0
.xdata$x:0000D73F                 db    0
.xdata$x:0000D740                 db    0
.xdata$x:0000D741                 db    0
.xdata$x:0000D742                 db    0
.xdata$x:0000D743                 db    0
.xdata$x:0000D744                 db    1
.xdata$x:0000D745                 db    0
.xdata$x:0000D746                 db    0
.xdata$x:0000D747                 db    0
.xdata$x:0000D747 _xdata$x        ends
.xdata$x:0000D747
.text:0000D748 ; ===========================================================================
.text:0000D748
.text:0000D748 ; Segment type: Pure code
.text:0000D748 ; Segment permissions: Read/Execute
.text:0000D748 _text           segment para public 'CODE' use32
.text:0000D748                 assume cs:_text
.text:0000D748                 ;org 0D748h
.text:0000D748 ; COMDAT (pick any)
.text:0000D748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D748
.text:0000D748 ; =============== S U B R O U T I N E =======================================
.text:0000D748
.text:0000D748 ; Attributes: bp-based frame
.text:0000D748
.text:0000D748 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:0000D748                 public ?IsEmpty@UString@@QBE_NXZ
.text:0000D748 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+E3p
.text:0000D748                                         ; NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+11Ep ...
.text:0000D748
.text:0000D748 var_4           = dword ptr -4
.text:0000D748
.text:0000D748                 push    ebp
.text:0000D749                 mov     ebp, esp
.text:0000D74B                 push    ecx
.text:0000D74C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D753                 mov     [ebp+var_4], ecx
.text:0000D756                 mov     eax, [ebp+var_4]
.text:0000D759                 xor     ecx, ecx
.text:0000D75B                 cmp     dword ptr [eax+4], 0
.text:0000D75F                 setz    cl
.text:0000D762                 mov     al, cl
.text:0000D764                 mov     esp, ebp
.text:0000D766                 pop     ebp
.text:0000D767                 retn
.text:0000D767 ?IsEmpty@UString@@QBE_NXZ endp
.text:0000D767
.text:0000D767 _text           ends
.text:0000D767
.text:0000D768 ; ===========================================================================
.text:0000D768
.text:0000D768 ; Segment type: Pure code
.text:0000D768 ; Segment permissions: Read/Execute
.text:0000D768 _text           segment para public 'CODE' use32
.text:0000D768                 assume cs:_text
.text:0000D768                 ;org 0D768h
.text:0000D768 ; COMDAT (pick any)
.text:0000D768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D768
.text:0000D768 ; =============== S U B R O U T I N E =======================================
.text:0000D768
.text:0000D768 ; Attributes: bp-based frame
.text:0000D768
.text:0000D768 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:0000D768                 public ??YUString@@QAEAAV0@_W@Z
.text:0000D768 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+101p
.text:0000D768                                         ; NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+13Cp ...
.text:0000D768
.text:0000D768 var_C           = dword ptr -0Ch
.text:0000D768 var_8           = dword ptr -8
.text:0000D768 var_4           = dword ptr -4
.text:0000D768 arg_0           = word ptr  8
.text:0000D768
.text:0000D768                 push    ebp
.text:0000D769                 mov     ebp, esp
.text:0000D76B                 sub     esp, 0Ch
.text:0000D76E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000D775                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000D77C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D783                 mov     [ebp+var_4], ecx
.text:0000D786                 mov     eax, [ebp+var_4]
.text:0000D789                 mov     ecx, [ebp+var_4]
.text:0000D78C                 mov     edx, [eax+8]
.text:0000D78F                 cmp     edx, [ecx+4]
.text:0000D792                 jnz     short loc_D79C
.text:0000D794                 mov     ecx, [ebp+var_4] ; this
.text:0000D797                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:0000D79C
.text:0000D79C loc_D79C:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:0000D79C                 mov     eax, [ebp+var_4]
.text:0000D79F                 mov     ecx, [eax+4]
.text:0000D7A2                 mov     [ebp+var_8], ecx
.text:0000D7A5                 mov     edx, [ebp+var_4]
.text:0000D7A8                 mov     eax, [edx]
.text:0000D7AA                 mov     [ebp+var_C], eax
.text:0000D7AD                 mov     ecx, [ebp+var_8]
.text:0000D7B0                 mov     edx, [ebp+var_C]
.text:0000D7B3                 mov     ax, [ebp+arg_0]
.text:0000D7B7                 mov     [edx+ecx*2], ax
.text:0000D7BB                 mov     ecx, [ebp+var_8]
.text:0000D7BE                 add     ecx, 1
.text:0000D7C1                 mov     [ebp+var_8], ecx
.text:0000D7C4                 xor     edx, edx
.text:0000D7C6                 mov     eax, [ebp+var_8]
.text:0000D7C9                 mov     ecx, [ebp+var_C]
.text:0000D7CC                 mov     [ecx+eax*2], dx
.text:0000D7D0                 mov     edx, [ebp+var_4]
.text:0000D7D3                 mov     eax, [ebp+var_8]
.text:0000D7D6                 mov     [edx+4], eax
.text:0000D7D9                 mov     eax, [ebp+var_4]
.text:0000D7DC                 add     esp, 0Ch
.text:0000D7DF                 cmp     ebp, esp
.text:0000D7E1                 call    __RTC_CheckEsp
.text:0000D7E6                 mov     esp, ebp
.text:0000D7E8                 pop     ebp
.text:0000D7E9                 retn    4
.text:0000D7E9 ??YUString@@QAEAAV0@_W@Z endp
.text:0000D7E9
.text:0000D7E9 _text           ends
.text:0000D7E9
.text:0000D7EC ; ===========================================================================
.text:0000D7EC
.text:0000D7EC ; Segment type: Pure code
.text:0000D7EC ; Segment permissions: Read/Execute
.text:0000D7EC _text           segment para public 'CODE' use32
.text:0000D7EC                 assume cs:_text
.text:0000D7EC                 ;org 0D7ECh
.text:0000D7EC ; COMDAT (pick any)
.text:0000D7EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D7EC
.text:0000D7EC ; =============== S U B R O U T I N E =======================================
.text:0000D7EC
.text:0000D7EC ; Attributes: bp-based frame
.text:0000D7EC
.text:0000D7EC ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000D7EC                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000D7EC ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000D7EC                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4Ep
.text:0000D7EC                                         ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+1Ap ...
.text:0000D7EC
.text:0000D7EC var_4           = dword ptr -4
.text:0000D7EC
.text:0000D7EC                 push    ebp
.text:0000D7ED                 mov     ebp, esp
.text:0000D7EF                 push    ecx
.text:0000D7F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D7F7                 mov     [ebp+var_4], ecx
.text:0000D7FA                 xor     eax, eax
.text:0000D7FC                 mov     ecx, [ebp+var_4]
.text:0000D7FF                 mov     [ecx], ax
.text:0000D802                 xor     edx, edx
.text:0000D804                 mov     eax, [ebp+var_4]
.text:0000D807                 mov     [eax+2], dx
.text:0000D80B                 mov     ecx, [ebp+var_4]
.text:0000D80E                 mov     dword ptr [ecx+8], 0
.text:0000D815                 mov     eax, [ebp+var_4]
.text:0000D818                 mov     esp, ebp
.text:0000D81A                 pop     ebp
.text:0000D81B                 retn
.text:0000D81B ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:0000D81B
.text:0000D81B _text           ends
.text:0000D81B
.text:0000D81C ; ===========================================================================
.text:0000D81C
.text:0000D81C ; Segment type: Pure code
.text:0000D81C ; Segment permissions: Read/Execute
.text:0000D81C _text           segment para public 'CODE' use32
.text:0000D81C                 assume cs:_text
.text:0000D81C                 ;org 0D81Ch
.text:0000D81C ; COMDAT (pick any)
.text:0000D81C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D81C
.text:0000D81C ; =============== S U B R O U T I N E =======================================
.text:0000D81C
.text:0000D81C ; Attributes: bp-based frame
.text:0000D81C
.text:0000D81C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000D81C                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000D81C ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000D81C                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+29Cp
.text:0000D81C                                         ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+5Ap ...
.text:0000D81C
.text:0000D81C var_4           = dword ptr -4
.text:0000D81C
.text:0000D81C                 push    ebp
.text:0000D81D                 mov     ebp, esp
.text:0000D81F                 push    ecx
.text:0000D820                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D827                 mov     [ebp+var_4], ecx
.text:0000D82A                 mov     ecx, [ebp+var_4] ; this
.text:0000D82D                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:0000D832                 add     esp, 4
.text:0000D835                 cmp     ebp, esp
.text:0000D837                 call    __RTC_CheckEsp
.text:0000D83C                 mov     esp, ebp
.text:0000D83E                 pop     ebp
.text:0000D83F                 retn
.text:0000D83F ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:0000D83F
.text:0000D83F _text           ends
.text:0000D83F
.text:0000D840 ; ===========================================================================
.text:0000D840
.text:0000D840 ; Segment type: Pure code
.text:0000D840 ; Segment permissions: Read/Execute
.text:0000D840 _text           segment para public 'CODE' use32
.text:0000D840                 assume cs:_text
.text:0000D840                 ;org 0D840h
.text:0000D840 ; COMDAT (pick any)
.text:0000D840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D840
.text:0000D840 ; =============== S U B R O U T I N E =======================================
.text:0000D840
.text:0000D840 ; Attributes: bp-based frame
.text:0000D840
.text:0000D840 ; void __thiscall CLimitedSequentialInStream::SetStream(CLimitedSequentialInStream *this, struct ISequentialInStream *)
.text:0000D840                 public ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
.text:0000D840 ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z proc near
.text:0000D840                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+265p
.text:0000D840
.text:0000D840 var_4           = dword ptr -4
.text:0000D840 arg_0           = dword ptr  8
.text:0000D840
.text:0000D840                 push    ebp
.text:0000D841                 mov     ebp, esp
.text:0000D843                 push    ecx
.text:0000D844                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D84B                 mov     [ebp+var_4], ecx
.text:0000D84E                 mov     eax, [ebp+arg_0]
.text:0000D851                 push    eax
.text:0000D852                 mov     ecx, [ebp+var_4]
.text:0000D855                 add     ecx, 8
.text:0000D858                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:0000D85D                 add     esp, 4
.text:0000D860                 cmp     ebp, esp
.text:0000D862                 call    __RTC_CheckEsp
.text:0000D867                 mov     esp, ebp
.text:0000D869                 pop     ebp
.text:0000D86A                 retn    4
.text:0000D86A ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z endp
.text:0000D86A
.text:0000D86A ; ---------------------------------------------------------------------------
.text:0000D86D                 align 10h
.text:0000D86D _text           ends
.text:0000D86D
.text:0000D870 ; ===========================================================================
.text:0000D870
.text:0000D870 ; Segment type: Pure code
.text:0000D870 ; Segment permissions: Read/Execute
.text:0000D870 _text           segment para public 'CODE' use32
.text:0000D870                 assume cs:_text
.text:0000D870                 ;org 0D870h
.text:0000D870 ; COMDAT (pick any)
.text:0000D870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D870
.text:0000D870 ; =============== S U B R O U T I N E =======================================
.text:0000D870
.text:0000D870 ; Attributes: bp-based frame
.text:0000D870
.text:0000D870 ; void __thiscall CLimitedSequentialInStream::Init(CLimitedSequentialInStream *this, unsigned __int64)
.text:0000D870                 public ?Init@CLimitedSequentialInStream@@QAEX_K@Z
.text:0000D870 ?Init@CLimitedSequentialInStream@@QAEX_K@Z proc near
.text:0000D870                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+731p
.text:0000D870
.text:0000D870 var_4           = dword ptr -4
.text:0000D870 arg_0           = qword ptr  8
.text:0000D870
.text:0000D870                 push    ebp
.text:0000D871                 mov     ebp, esp
.text:0000D873                 push    ecx
.text:0000D874                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D87B                 mov     [ebp+var_4], ecx
.text:0000D87E                 mov     eax, [ebp+var_4]
.text:0000D881                 mov     ecx, dword ptr [ebp+arg_0]
.text:0000D884                 mov     [eax+10h], ecx
.text:0000D887                 mov     edx, dword ptr [ebp+arg_0+4]
.text:0000D88A                 mov     [eax+14h], edx
.text:0000D88D                 mov     eax, [ebp+var_4]
.text:0000D890                 mov     dword ptr [eax+18h], 0
.text:0000D897                 mov     dword ptr [eax+1Ch], 0
.text:0000D89E                 mov     ecx, [ebp+var_4]
.text:0000D8A1                 mov     byte ptr [ecx+20h], 0
.text:0000D8A5                 mov     esp, ebp
.text:0000D8A7                 pop     ebp
.text:0000D8A8                 retn    8
.text:0000D8A8 ?Init@CLimitedSequentialInStream@@QAEX_K@Z endp
.text:0000D8A8
.text:0000D8A8 ; ---------------------------------------------------------------------------
.text:0000D8AB                 align 4
.text:0000D8AB _text           ends
.text:0000D8AB
.text:0000D8AC ; ===========================================================================
.text:0000D8AC
.text:0000D8AC ; Segment type: Pure code
.text:0000D8AC ; Segment permissions: Read/Execute
.text:0000D8AC _text           segment para public 'CODE' use32
.text:0000D8AC                 assume cs:_text
.text:0000D8AC                 ;org 0D8ACh
.text:0000D8AC ; COMDAT (pick any)
.text:0000D8AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D8AC
.text:0000D8AC ; =============== S U B R O U T I N E =======================================
.text:0000D8AC
.text:0000D8AC ; Attributes: bp-based frame
.text:0000D8AC
.text:0000D8AC ; void __thiscall CLimitedSequentialOutStream::SetStream(CLimitedSequentialOutStream *this, struct ISequentialOutStream *)
.text:0000D8AC                 public ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z
.text:0000D8AC ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z proc near
.text:0000D8AC                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+602p
.text:0000D8AC
.text:0000D8AC var_4           = dword ptr -4
.text:0000D8AC arg_0           = dword ptr  8
.text:0000D8AC
.text:0000D8AC                 push    ebp
.text:0000D8AD                 mov     ebp, esp
.text:0000D8AF                 push    ecx
.text:0000D8B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D8B7                 mov     [ebp+var_4], ecx
.text:0000D8BA                 mov     eax, [ebp+arg_0]
.text:0000D8BD                 push    eax
.text:0000D8BE                 mov     ecx, [ebp+var_4]
.text:0000D8C1                 add     ecx, 8
.text:0000D8C4                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:0000D8C9                 add     esp, 4
.text:0000D8CC                 cmp     ebp, esp
.text:0000D8CE                 call    __RTC_CheckEsp
.text:0000D8D3                 mov     esp, ebp
.text:0000D8D5                 pop     ebp
.text:0000D8D6                 retn    4
.text:0000D8D6 ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z endp
.text:0000D8D6
.text:0000D8D6 ; ---------------------------------------------------------------------------
.text:0000D8D9                 align 4
.text:0000D8D9 _text           ends
.text:0000D8D9
.text:0000D8DC ; ===========================================================================
.text:0000D8DC
.text:0000D8DC ; Segment type: Pure code
.text:0000D8DC ; Segment permissions: Read/Execute
.text:0000D8DC _text           segment para public 'CODE' use32
.text:0000D8DC                 assume cs:_text
.text:0000D8DC                 ;org 0D8DCh
.text:0000D8DC ; COMDAT (pick any)
.text:0000D8DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D8DC
.text:0000D8DC ; =============== S U B R O U T I N E =======================================
.text:0000D8DC
.text:0000D8DC ; Attributes: bp-based frame
.text:0000D8DC
.text:0000D8DC ; void __thiscall CLimitedSequentialOutStream::ReleaseStream(CLimitedSequentialOutStream *__hidden this)
.text:0000D8DC                 public ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ
.text:0000D8DC ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ proc near
.text:0000D8DC                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+84Dp
.text:0000D8DC
.text:0000D8DC var_4           = dword ptr -4
.text:0000D8DC
.text:0000D8DC                 push    ebp
.text:0000D8DD                 mov     ebp, esp
.text:0000D8DF                 push    ecx
.text:0000D8E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D8E7                 mov     [ebp+var_4], ecx
.text:0000D8EA                 mov     ecx, [ebp+var_4]
.text:0000D8ED                 add     ecx, 8
.text:0000D8F0                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:0000D8F5                 add     esp, 4
.text:0000D8F8                 cmp     ebp, esp
.text:0000D8FA                 call    __RTC_CheckEsp
.text:0000D8FF                 mov     esp, ebp
.text:0000D901                 pop     ebp
.text:0000D902                 retn
.text:0000D902 ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ endp
.text:0000D902
.text:0000D902 ; ---------------------------------------------------------------------------
.text:0000D903                 align 4
.text:0000D903 _text           ends
.text:0000D903
.text:0000D904 ; ===========================================================================
.text:0000D904
.text:0000D904 ; Segment type: Pure code
.text:0000D904 ; Segment permissions: Read/Execute
.text:0000D904 _text           segment para public 'CODE' use32
.text:0000D904                 assume cs:_text
.text:0000D904                 ;org 0D904h
.text:0000D904 ; COMDAT (pick any)
.text:0000D904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D904
.text:0000D904 ; =============== S U B R O U T I N E =======================================
.text:0000D904
.text:0000D904 ; Attributes: bp-based frame
.text:0000D904
.text:0000D904 ; void __thiscall CLimitedSequentialOutStream::Init(CLimitedSequentialOutStream *this, unsigned __int64, bool)
.text:0000D904                 public ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z
.text:0000D904 ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z proc near
.text:0000D904                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+65Bp
.text:0000D904
.text:0000D904 var_4           = dword ptr -4
.text:0000D904 arg_0           = qword ptr  8
.text:0000D904 arg_8           = byte ptr  10h
.text:0000D904
.text:0000D904                 push    ebp
.text:0000D905                 mov     ebp, esp
.text:0000D907                 push    ecx
.text:0000D908                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D90F                 mov     [ebp+var_4], ecx
.text:0000D912                 mov     eax, [ebp+var_4]
.text:0000D915                 mov     ecx, dword ptr [ebp+arg_0]
.text:0000D918                 mov     [eax+10h], ecx
.text:0000D91B                 mov     edx, dword ptr [ebp+arg_0+4]
.text:0000D91E                 mov     [eax+14h], edx
.text:0000D921                 mov     eax, [ebp+var_4]
.text:0000D924                 mov     byte ptr [eax+18h], 0
.text:0000D928                 mov     ecx, [ebp+var_4]
.text:0000D92B                 mov     dl, [ebp+arg_8]
.text:0000D92E                 mov     [ecx+19h], dl
.text:0000D931                 mov     esp, ebp
.text:0000D933                 pop     ebp
.text:0000D934                 retn    0Ch
.text:0000D934 ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z endp
.text:0000D934
.text:0000D934 ; ---------------------------------------------------------------------------
.text:0000D937                 align 4
.text:0000D937 _text           ends
.text:0000D937
.text:0000D938 ; ===========================================================================
.text:0000D938
.text:0000D938 ; Segment type: Pure code
.text:0000D938 ; Segment permissions: Read/Execute
.text:0000D938 _text           segment para public 'CODE' use32
.text:0000D938                 assume cs:_text
.text:0000D938                 ;org 0D938h
.text:0000D938 ; COMDAT (pick any)
.text:0000D938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D938
.text:0000D938 ; =============== S U B R O U T I N E =======================================
.text:0000D938
.text:0000D938 ; Attributes: bp-based frame
.text:0000D938
.text:0000D938 ; unsigned __int64 __thiscall CLimitedSequentialOutStream::GetRem(CLimitedSequentialOutStream *__hidden this)
.text:0000D938                 public ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ
.text:0000D938 ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ proc near
.text:0000D938                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+821p
.text:0000D938
.text:0000D938 var_4           = dword ptr -4
.text:0000D938
.text:0000D938                 push    ebp
.text:0000D939                 mov     ebp, esp
.text:0000D93B                 push    ecx
.text:0000D93C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D943                 mov     [ebp+var_4], ecx
.text:0000D946                 mov     ecx, [ebp+var_4]
.text:0000D949                 mov     eax, [ecx+10h]
.text:0000D94C                 mov     edx, [ecx+14h]
.text:0000D94F                 mov     esp, ebp
.text:0000D951                 pop     ebp
.text:0000D952                 retn
.text:0000D952 ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ endp
.text:0000D952
.text:0000D952 ; ---------------------------------------------------------------------------
.text:0000D953                 align 4
.text:0000D953 _text           ends
.text:0000D953
.text:0000D954 ; ===========================================================================
.text:0000D954
.text:0000D954 ; Segment type: Pure code
.text:0000D954 ; Segment permissions: Read/Execute
.text:0000D954 _text           segment para public 'CODE' use32
.text:0000D954                 assume cs:_text
.text:0000D954                 ;org 0D954h
.text:0000D954 ; COMDAT (pick any)
.text:0000D954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D954
.text:0000D954 ; =============== S U B R O U T I N E =======================================
.text:0000D954
.text:0000D954 ; Attributes: bp-based frame
.text:0000D954
.text:0000D954 ; _DWORD __thiscall NCompress::CCopyCoder::CCopyCoder(NCompress::CCopyCoder *__hidden this)
.text:0000D954                 public ??0CCopyCoder@NCompress@@QAE@XZ
.text:0000D954 ??0CCopyCoder@NCompress@@QAE@XZ proc near
.text:0000D954                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+314p
.text:0000D954
.text:0000D954 var_4           = dword ptr -4
.text:0000D954
.text:0000D954                 push    ebp
.text:0000D955                 mov     ebp, esp
.text:0000D957                 push    ecx
.text:0000D958                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D95F                 mov     [ebp+var_4], ecx
.text:0000D962                 mov     ecx, [ebp+var_4] ; this
.text:0000D965                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:0000D96A                 mov     ecx, [ebp+var_4]
.text:0000D96D                 add     ecx, 4          ; this
.text:0000D970                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:0000D975                 mov     ecx, [ebp+var_4]
.text:0000D978                 add     ecx, 8          ; this
.text:0000D97B                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:0000D980                 mov     ecx, [ebp+var_4]
.text:0000D983                 add     ecx, 0Ch        ; this
.text:0000D986                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:0000D98B                 mov     ecx, [ebp+var_4]
.text:0000D98E                 add     ecx, 10h        ; this
.text:0000D991                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000D996                 mov     eax, [ebp+var_4]
.text:0000D999                 mov     dword ptr [eax], offset ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.text:0000D99F                 mov     ecx, [ebp+var_4]
.text:0000D9A2                 mov     dword ptr [ecx+4], offset ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.text:0000D9A9                 mov     edx, [ebp+var_4]
.text:0000D9AC                 mov     dword ptr [edx+8], offset ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.text:0000D9B3                 mov     eax, [ebp+var_4]
.text:0000D9B6                 mov     dword ptr [eax+0Ch], offset ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:0000D9BD                 mov     ecx, [ebp+var_4]
.text:0000D9C0                 mov     dword ptr [ecx+14h], 0
.text:0000D9C7                 mov     ecx, [ebp+var_4]
.text:0000D9CA                 add     ecx, 18h
.text:0000D9CD                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000D9D2                 mov     edx, [ebp+var_4]
.text:0000D9D5                 mov     dword ptr [edx+20h], 0
.text:0000D9DC                 mov     dword ptr [edx+24h], 0
.text:0000D9E3                 mov     eax, [ebp+var_4]
.text:0000D9E6                 add     esp, 4
.text:0000D9E9                 cmp     ebp, esp
.text:0000D9EB                 call    __RTC_CheckEsp
.text:0000D9F0                 mov     esp, ebp
.text:0000D9F2                 pop     ebp
.text:0000D9F3                 retn
.text:0000D9F3 ??0CCopyCoder@NCompress@@QAE@XZ endp
.text:0000D9F3
.text:0000D9F3 _text           ends
.text:0000D9F3
.rdata:0000D9F4 ; ===========================================================================
.rdata:0000D9F4
.rdata:0000D9F4 ; Segment type: Pure data
.rdata:0000D9F4 ; Segment permissions: Read
.rdata:0000D9F4 _rdata          segment dword public 'DATA' use32
.rdata:0000D9F4                 assume cs:_rdata
.rdata:0000D9F4                 ;org 0D9F4h
.rdata:0000D9F4 ; COMDAT (pick largest)
.rdata:0000D9F4                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:0000D9F8                 public ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:0000D9F8 ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:0000D9F8 ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:0000D9F8                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+62o
.rdata:0000D9F8                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:0000D9FC                 dd offset ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.rdata:0000DA00                 dd offset ?Release@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}' (void)
.rdata:0000DA04                 dd offset ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z ; NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:0000DA04 _rdata          ends
.rdata:0000DA04
.rdata:0000DA08 ; ===========================================================================
.rdata:0000DA08
.rdata:0000DA08 ; Segment type: Pure data
.rdata:0000DA08 ; Segment permissions: Read
.rdata:0000DA08 _rdata          segment dword public 'DATA' use32
.rdata:0000DA08                 assume cs:_rdata
.rdata:0000DA08                 ;org 0DA08h
.rdata:0000DA08 ; COMDAT (pick largest)
.rdata:0000DA08                 dd offset ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:0000DA0C                 public ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata:0000DA0C ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.rdata:0000DA0C ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:0000DA0C                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+58o
.rdata:0000DA0C                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:0000DA10                 dd offset ?AddRef@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.rdata:0000DA14                 dd offset ?Release@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)
.rdata:0000DA18                 dd offset ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z ; NCompress::CCopyCoder::Read(void *,uint,uint *)
.rdata:0000DA18 _rdata          ends
.rdata:0000DA18
.rdata:0000DA1C ; ===========================================================================
.rdata:0000DA1C
.rdata:0000DA1C ; Segment type: Pure data
.rdata:0000DA1C ; Segment permissions: Read
.rdata:0000DA1C _rdata          segment dword public 'DATA' use32
.rdata:0000DA1C                 assume cs:_rdata
.rdata:0000DA1C                 ;org 0DA1Ch
.rdata:0000DA1C ; COMDAT (pick largest)
.rdata:0000DA1C                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:0000DA20                 public ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata:0000DA20 ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.rdata:0000DA20 ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000DA20                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+4Eo
.rdata:0000DA20                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000DA24                 dd offset ?AddRef@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.rdata:0000DA28                 dd offset ?Release@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)
.rdata:0000DA2C                 dd offset ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::CCopyCoder::SetInStream(ISequentialInStream *)
.rdata:0000DA30                 dd offset ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ ; NCompress::CCopyCoder::ReleaseInStream(void)
.rdata:0000DA30 _rdata          ends
.rdata:0000DA30
.rdata:0000DA34 ; ===========================================================================
.rdata:0000DA34
.rdata:0000DA34 ; Segment type: Pure data
.rdata:0000DA34 ; Segment permissions: Read
.rdata:0000DA34 _rdata          segment dword public 'DATA' use32
.rdata:0000DA34                 assume cs:_rdata
.rdata:0000DA34                 ;org 0DA34h
.rdata:0000DA34 ; COMDAT (pick largest)
.rdata:0000DA34                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:0000DA38                 public ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata:0000DA38 ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.rdata:0000DA38 ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000DA38                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+45o
.rdata:0000DA38                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.rdata:0000DA3C                 dd offset ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.rdata:0000DA40                 dd offset ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.rdata:0000DA44                 dd offset ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:0000DA44 _rdata          ends
.rdata:0000DA44
.rdata$r:0000DA48 ; ===========================================================================
.rdata$r:0000DA48
.rdata$r:0000DA48 ; Segment type: Pure data
.rdata$r:0000DA48 ; Segment permissions: Read
.rdata$r:0000DA48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DA48                 assume cs:_rdata$r
.rdata$r:0000DA48                 ;org 0DA48h
.rdata$r:0000DA48 ; COMDAT (pick any)
.rdata$r:0000DA48                 public ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata$r:0000DA48 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:0000DA48 ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:0000DA48                                         ; DATA XREF: .rdata:0000DA34o
.rdata$r:0000DA49                 db    0
.rdata$r:0000DA4A                 db    0
.rdata$r:0000DA4B                 db    0
.rdata$r:0000DA4C                 db    0
.rdata$r:0000DA4D                 db    0
.rdata$r:0000DA4E                 db    0
.rdata$r:0000DA4F                 db    0
.rdata$r:0000DA50                 db    0
.rdata$r:0000DA51                 db    0
.rdata$r:0000DA52                 db    0
.rdata$r:0000DA53                 db    0
.rdata$r:0000DA54                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:0000DA58                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DA58 _rdata$r        ends
.rdata$r:0000DA58
.data:0000DA5C ; ===========================================================================
.data:0000DA5C
.data:0000DA5C ; Segment type: Pure data
.data:0000DA5C ; Segment permissions: Read/Write
.data:0000DA5C _data           segment dword public 'DATA' use32
.data:0000DA5C                 assume cs:_data
.data:0000DA5C                 ;org 0DA5Ch
.data:0000DA5C ; COMDAT (pick any)
.data:0000DA5C                 public ??_R0?AVCCopyCoder@NCompress@@@8
.data:0000DA5C ; class NCompress::CCopyCoder `RTTI Type Descriptor'
.data:0000DA5C ??_R0?AVCCopyCoder@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:0000DA5C                                         ; DATA XREF: .rdata$r:0000DA54o
.data:0000DA5C                                         ; .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000DA5C                                         ; const type_info::`vftable'
.data:0000DA60                 db    0
.data:0000DA61                 db    0
.data:0000DA62                 db    0
.data:0000DA63                 db    0
.data:0000DA64                 db  2Eh ; .
.data:0000DA65                 db  3Fh ; ?
.data:0000DA66                 db  41h ; A
.data:0000DA67                 db  56h ; V
.data:0000DA68                 db  43h ; C
.data:0000DA69                 db  43h ; C
.data:0000DA6A                 db  6Fh ; o
.data:0000DA6B                 db  70h ; p
.data:0000DA6C                 db  79h ; y
.data:0000DA6D                 db  43h ; C
.data:0000DA6E                 db  6Fh ; o
.data:0000DA6F                 db  64h ; d
.data:0000DA70                 db  65h ; e
.data:0000DA71                 db  72h ; r
.data:0000DA72                 db  40h ; @
.data:0000DA73                 db  4Eh ; N
.data:0000DA74                 db  43h ; C
.data:0000DA75                 db  6Fh ; o
.data:0000DA76                 db  6Dh ; m
.data:0000DA77                 db  70h ; p
.data:0000DA78                 db  72h ; r
.data:0000DA79                 db  65h ; e
.data:0000DA7A                 db  73h ; s
.data:0000DA7B                 db  73h ; s
.data:0000DA7C                 db  40h ; @
.data:0000DA7D                 db  40h ; @
.data:0000DA7E                 db    0
.data:0000DA7F                 align 10h
.data:0000DA7F _data           ends
.data:0000DA7F
.rdata$r:0000DA80 ; ===========================================================================
.rdata$r:0000DA80
.rdata$r:0000DA80 ; Segment type: Pure data
.rdata$r:0000DA80 ; Segment permissions: Read
.rdata$r:0000DA80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DA80                 assume cs:_rdata$r
.rdata$r:0000DA80                 ;org 0DA80h
.rdata$r:0000DA80 ; COMDAT (pick any)
.rdata$r:0000DA80                 public ??_R3CCopyCoder@NCompress@@8
.rdata$r:0000DA80 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DA80 ??_R3CCopyCoder@NCompress@@8 db    0    ; DATA XREF: .rdata$r:0000DA58o
.rdata$r:0000DA80                                         ; .rdata$r:0000DAD4o ...
.rdata$r:0000DA81                 db    0
.rdata$r:0000DA82                 db    0
.rdata$r:0000DA83                 db    0
.rdata$r:0000DA84                 db    5
.rdata$r:0000DA85                 db    0
.rdata$r:0000DA86                 db    0
.rdata$r:0000DA87                 db    0
.rdata$r:0000DA88                 db  0Ah
.rdata$r:0000DA89                 db    0
.rdata$r:0000DA8A                 db    0
.rdata$r:0000DA8B                 db    0
.rdata$r:0000DA8C                 dd offset ??_R2CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:0000DA8C _rdata$r        ends
.rdata$r:0000DA8C
.rdata$r:0000DA90 ; ===========================================================================
.rdata$r:0000DA90
.rdata$r:0000DA90 ; Segment type: Pure data
.rdata$r:0000DA90 ; Segment permissions: Read
.rdata$r:0000DA90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DA90                 assume cs:_rdata$r
.rdata$r:0000DA90                 ;org 0DA90h
.rdata$r:0000DA90 ; COMDAT (pick any)
.rdata$r:0000DA90                 public ??_R2CCopyCoder@NCompress@@8
.rdata$r:0000DA90 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:0000DA90 ??_R2CCopyCoder@NCompress@@8 dd offset ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:0000DA90                                         ; DATA XREF: .rdata$r:0000DA8Co
.rdata$r:0000DA90                                         ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DA94                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DA98                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000DA9C                 dd offset ??_R13?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000DAA0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000DAA4                 dd offset ??_R17?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000DAA8                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:0000DAAC                 dd offset ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:0000DAB0                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:0000DAB4                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:0000DAB8                 db    0
.rdata$r:0000DAB9                 align 4
.rdata$r:0000DAB9 _rdata$r        ends
.rdata$r:0000DAB9
.rdata$r:0000DABC ; ===========================================================================
.rdata$r:0000DABC
.rdata$r:0000DABC ; Segment type: Pure data
.rdata$r:0000DABC ; Segment permissions: Read
.rdata$r:0000DABC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DABC                 assume cs:_rdata$r
.rdata$r:0000DABC                 ;org 0DABCh
.rdata$r:0000DABC ; COMDAT (pick any)
.rdata$r:0000DABC                 public ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:0000DABC ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DABC ??_R1A@?0A@EA@CCopyCoder@NCompress@@8 dd offset ??_R0?AVCCopyCoder@NCompress@@@8
.rdata$r:0000DABC                                         ; DATA XREF: .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Array'o
.rdata$r:0000DABC                                         ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:0000DAC0                 db    9
.rdata$r:0000DAC1                 db    0
.rdata$r:0000DAC2                 db    0
.rdata$r:0000DAC3                 db    0
.rdata$r:0000DAC4                 db    0
.rdata$r:0000DAC5                 db    0
.rdata$r:0000DAC6                 db    0
.rdata$r:0000DAC7                 db    0
.rdata$r:0000DAC8                 db 0FFh
.rdata$r:0000DAC9                 db 0FFh
.rdata$r:0000DACA                 db 0FFh
.rdata$r:0000DACB                 db 0FFh
.rdata$r:0000DACC                 db    0
.rdata$r:0000DACD                 db    0
.rdata$r:0000DACE                 db    0
.rdata$r:0000DACF                 db    0
.rdata$r:0000DAD0                 db  40h ; @
.rdata$r:0000DAD1                 db    0
.rdata$r:0000DAD2                 db    0
.rdata$r:0000DAD3                 db    0
.rdata$r:0000DAD4                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DAD4 _rdata$r        ends
.rdata$r:0000DAD4
.rdata$r:0000DAD8 ; ===========================================================================
.rdata$r:0000DAD8
.rdata$r:0000DAD8 ; Segment type: Pure data
.rdata$r:0000DAD8 ; Segment permissions: Read
.rdata$r:0000DAD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DAD8                 assume cs:_rdata$r
.rdata$r:0000DAD8                 ;org 0DAD8h
.rdata$r:0000DAD8 ; COMDAT (pick any)
.rdata$r:0000DAD8                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:0000DAD8 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DAD8 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:0000DAD8                                         ; DATA XREF: .rdata$r:0000DA94o
.rdata$r:0000DAD8                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:0000DAD8                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:0000DADC                 db    1
.rdata$r:0000DADD                 db    0
.rdata$r:0000DADE                 db    0
.rdata$r:0000DADF                 db    0
.rdata$r:0000DAE0                 db    0
.rdata$r:0000DAE1                 db    0
.rdata$r:0000DAE2                 db    0
.rdata$r:0000DAE3                 db    0
.rdata$r:0000DAE4                 db 0FFh
.rdata$r:0000DAE5                 db 0FFh
.rdata$r:0000DAE6                 db 0FFh
.rdata$r:0000DAE7                 db 0FFh
.rdata$r:0000DAE8                 db    0
.rdata$r:0000DAE9                 db    0
.rdata$r:0000DAEA                 db    0
.rdata$r:0000DAEB                 db    0
.rdata$r:0000DAEC                 db  40h ; @
.rdata$r:0000DAED                 db    0
.rdata$r:0000DAEE                 db    0
.rdata$r:0000DAEF                 db    0
.rdata$r:0000DAF0                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DAF0 _rdata$r        ends
.rdata$r:0000DAF0
.data:0000DAF4 ; ===========================================================================
.data:0000DAF4
.data:0000DAF4 ; Segment type: Pure data
.data:0000DAF4 ; Segment permissions: Read/Write
.data:0000DAF4 _data           segment dword public 'DATA' use32
.data:0000DAF4                 assume cs:_data
.data:0000DAF4                 ;org 0DAF4h
.data:0000DAF4 ; COMDAT (pick any)
.data:0000DAF4                 public ??_R0?AUICompressCoder@@@8
.data:0000DAF4 ; struct ICompressCoder `RTTI Type Descriptor'
.data:0000DAF4 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:0000DAF4                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000DAF4                                         ; .rdata$r:0000E084o
.data:0000DAF4                                         ; const type_info::`vftable'
.data:0000DAF8                 db    0
.data:0000DAF9                 db    0
.data:0000DAFA                 db    0
.data:0000DAFB                 db    0
.data:0000DAFC                 db  2Eh ; .
.data:0000DAFD                 db  3Fh ; ?
.data:0000DAFE                 db  41h ; A
.data:0000DAFF                 db  55h ; U
.data:0000DB00                 db  49h ; I
.data:0000DB01                 db  43h ; C
.data:0000DB02                 db  6Fh ; o
.data:0000DB03                 db  6Dh ; m
.data:0000DB04                 db  70h ; p
.data:0000DB05                 db  72h ; r
.data:0000DB06                 db  65h ; e
.data:0000DB07                 db  73h ; s
.data:0000DB08                 db  73h ; s
.data:0000DB09                 db  43h ; C
.data:0000DB0A                 db  6Fh ; o
.data:0000DB0B                 db  64h ; d
.data:0000DB0C                 db  65h ; e
.data:0000DB0D                 db  72h ; r
.data:0000DB0E                 db  40h ; @
.data:0000DB0F                 db  40h ; @
.data:0000DB10                 db    0
.data:0000DB11                 align 4
.data:0000DB11 _data           ends
.data:0000DB11
.rdata$r:0000DB14 ; ===========================================================================
.rdata$r:0000DB14
.rdata$r:0000DB14 ; Segment type: Pure data
.rdata$r:0000DB14 ; Segment permissions: Read
.rdata$r:0000DB14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB14                 assume cs:_rdata$r
.rdata$r:0000DB14                 ;org 0DB14h
.rdata$r:0000DB14 ; COMDAT (pick any)
.rdata$r:0000DB14                 public ??_R3ICompressCoder@@8
.rdata$r:0000DB14 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB14 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:0000DAF0o
.rdata$r:0000DB14                                         ; .rdata$r:0000E088o
.rdata$r:0000DB15                 db    0
.rdata$r:0000DB16                 db    0
.rdata$r:0000DB17                 db    0
.rdata$r:0000DB18                 db    0
.rdata$r:0000DB19                 db    0
.rdata$r:0000DB1A                 db    0
.rdata$r:0000DB1B                 db    0
.rdata$r:0000DB1C                 db    2
.rdata$r:0000DB1D                 db    0
.rdata$r:0000DB1E                 db    0
.rdata$r:0000DB1F                 db    0
.rdata$r:0000DB20                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:0000DB20 _rdata$r        ends
.rdata$r:0000DB20
.rdata$r:0000DB24 ; ===========================================================================
.rdata$r:0000DB24
.rdata$r:0000DB24 ; Segment type: Pure data
.rdata$r:0000DB24 ; Segment permissions: Read
.rdata$r:0000DB24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB24                 assume cs:_rdata$r
.rdata$r:0000DB24                 ;org 0DB24h
.rdata$r:0000DB24 ; COMDAT (pick any)
.rdata$r:0000DB24                 public ??_R2ICompressCoder@@8
.rdata$r:0000DB24 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:0000DB24 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:0000DB24                                         ; DATA XREF: .rdata$r:0000DB20o
.rdata$r:0000DB24                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DB28                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DB2C                 db    0
.rdata$r:0000DB2D                 align 10h
.rdata$r:0000DB2D _rdata$r        ends
.rdata$r:0000DB2D
.rdata$r:0000DB30 ; ===========================================================================
.rdata$r:0000DB30
.rdata$r:0000DB30 ; Segment type: Pure data
.rdata$r:0000DB30 ; Segment permissions: Read
.rdata$r:0000DB30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB30                 assume cs:_rdata$r
.rdata$r:0000DB30                 ;org 0DB30h
.rdata$r:0000DB30 ; COMDAT (pick any)
.rdata$r:0000DB30                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000DB30 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DB30 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000DB30                                         ; DATA XREF: .rdata$r:0000DB28o
.rdata$r:0000DB30                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:0000DB30                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000DB34                 db    0
.rdata$r:0000DB35                 db    0
.rdata$r:0000DB36                 db    0
.rdata$r:0000DB37                 db    0
.rdata$r:0000DB38                 db    0
.rdata$r:0000DB39                 db    0
.rdata$r:0000DB3A                 db    0
.rdata$r:0000DB3B                 db    0
.rdata$r:0000DB3C                 db 0FFh
.rdata$r:0000DB3D                 db 0FFh
.rdata$r:0000DB3E                 db 0FFh
.rdata$r:0000DB3F                 db 0FFh
.rdata$r:0000DB40                 db    0
.rdata$r:0000DB41                 db    0
.rdata$r:0000DB42                 db    0
.rdata$r:0000DB43                 db    0
.rdata$r:0000DB44                 db  40h ; @
.rdata$r:0000DB45                 db    0
.rdata$r:0000DB46                 db    0
.rdata$r:0000DB47                 db    0
.rdata$r:0000DB48                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB48 _rdata$r        ends
.rdata$r:0000DB48
.data:0000DB4C ; ===========================================================================
.data:0000DB4C
.data:0000DB4C ; Segment type: Pure data
.data:0000DB4C ; Segment permissions: Read/Write
.data:0000DB4C _data           segment dword public 'DATA' use32
.data:0000DB4C                 assume cs:_data
.data:0000DB4C                 ;org 0DB4Ch
.data:0000DB4C ; COMDAT (pick any)
.data:0000DB4C                 public ??_R0?AUIUnknown@@@8
.data:0000DB4C ; struct IUnknown `RTTI Type Descriptor'
.data:0000DB4C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:0000DB4C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000DB4C                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:0000DB4C                                         ; const type_info::`vftable'
.data:0000DB50                 db    0
.data:0000DB51                 db    0
.data:0000DB52                 db    0
.data:0000DB53                 db    0
.data:0000DB54                 db  2Eh ; .
.data:0000DB55                 db  3Fh ; ?
.data:0000DB56                 db  41h ; A
.data:0000DB57                 db  55h ; U
.data:0000DB58                 db  49h ; I
.data:0000DB59                 db  55h ; U
.data:0000DB5A                 db  6Eh ; n
.data:0000DB5B                 db  6Bh ; k
.data:0000DB5C                 db  6Eh ; n
.data:0000DB5D                 db  6Fh ; o
.data:0000DB5E                 db  77h ; w
.data:0000DB5F                 db  6Eh ; n
.data:0000DB60                 db  40h ; @
.data:0000DB61                 db  40h ; @
.data:0000DB62                 db    0
.data:0000DB63                 align 4
.data:0000DB63 _data           ends
.data:0000DB63
.rdata$r:0000DB64 ; ===========================================================================
.rdata$r:0000DB64
.rdata$r:0000DB64 ; Segment type: Pure data
.rdata$r:0000DB64 ; Segment permissions: Read
.rdata$r:0000DB64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB64                 assume cs:_rdata$r
.rdata$r:0000DB64                 ;org 0DB64h
.rdata$r:0000DB64 ; COMDAT (pick any)
.rdata$r:0000DB64                 public ??_R3IUnknown@@8
.rdata$r:0000DB64 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB64 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:0000DB48o
.rdata$r:0000DB64                                         ; .rdata$r:0000DB94o ...
.rdata$r:0000DB65                 db    0
.rdata$r:0000DB66                 db    0
.rdata$r:0000DB67                 db    0
.rdata$r:0000DB68                 db    0
.rdata$r:0000DB69                 db    0
.rdata$r:0000DB6A                 db    0
.rdata$r:0000DB6B                 db    0
.rdata$r:0000DB6C                 db    1
.rdata$r:0000DB6D                 db    0
.rdata$r:0000DB6E                 db    0
.rdata$r:0000DB6F                 db    0
.rdata$r:0000DB70                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000DB70 _rdata$r        ends
.rdata$r:0000DB70
.rdata$r:0000DB74 ; ===========================================================================
.rdata$r:0000DB74
.rdata$r:0000DB74 ; Segment type: Pure data
.rdata$r:0000DB74 ; Segment permissions: Read
.rdata$r:0000DB74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB74                 assume cs:_rdata$r
.rdata$r:0000DB74                 ;org 0DB74h
.rdata$r:0000DB74 ; COMDAT (pick any)
.rdata$r:0000DB74                 public ??_R2IUnknown@@8
.rdata$r:0000DB74 ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000DB74 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000DB74                                         ; DATA XREF: .rdata$r:0000DB70o
.rdata$r:0000DB74                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DB78                 db    0
.rdata$r:0000DB79                 align 4
.rdata$r:0000DB79 _rdata$r        ends
.rdata$r:0000DB79
.rdata$r:0000DB7C ; ===========================================================================
.rdata$r:0000DB7C
.rdata$r:0000DB7C ; Segment type: Pure data
.rdata$r:0000DB7C ; Segment permissions: Read
.rdata$r:0000DB7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB7C                 assume cs:_rdata$r
.rdata$r:0000DB7C                 ;org 0DB7Ch
.rdata$r:0000DB7C ; COMDAT (pick any)
.rdata$r:0000DB7C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:0000DB7C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:0000DB7C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000DB7C                                         ; DATA XREF: .rdata$r:0000DA98o
.rdata$r:0000DB7C                                         ; .rdata$r:0000EFD0o ...
.rdata$r:0000DB7C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000DB80                 db    0
.rdata$r:0000DB81                 db    0
.rdata$r:0000DB82                 db    0
.rdata$r:0000DB83                 db    0
.rdata$r:0000DB84                 db    0
.rdata$r:0000DB85                 db    0
.rdata$r:0000DB86                 db    0
.rdata$r:0000DB87                 db    0
.rdata$r:0000DB88                 db 0FFh
.rdata$r:0000DB89                 db 0FFh
.rdata$r:0000DB8A                 db 0FFh
.rdata$r:0000DB8B                 db 0FFh
.rdata$r:0000DB8C                 db    0
.rdata$r:0000DB8D                 db    0
.rdata$r:0000DB8E                 db    0
.rdata$r:0000DB8F                 db    0
.rdata$r:0000DB90                 db  42h ; B
.rdata$r:0000DB91                 db    0
.rdata$r:0000DB92                 db    0
.rdata$r:0000DB93                 db    0
.rdata$r:0000DB94                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB94 _rdata$r        ends
.rdata$r:0000DB94
.rdata$r:0000DB98 ; ===========================================================================
.rdata$r:0000DB98
.rdata$r:0000DB98 ; Segment type: Pure data
.rdata$r:0000DB98 ; Segment permissions: Read
.rdata$r:0000DB98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB98                 assume cs:_rdata$r
.rdata$r:0000DB98                 ;org 0DB98h
.rdata$r:0000DB98 ; COMDAT (pick any)
.rdata$r:0000DB98                 public ??_R13?0A@EA@ICompressSetInStream@@8
.rdata$r:0000DB98 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000DB98 ??_R13?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:0000DB98                                         ; DATA XREF: .rdata$r:0000DA9Co
.rdata$r:0000DB98                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:0000DB9C                 db    1
.rdata$r:0000DB9D                 db    0
.rdata$r:0000DB9E                 db    0
.rdata$r:0000DB9F                 db    0
.rdata$r:0000DBA0                 db    4
.rdata$r:0000DBA1                 db    0
.rdata$r:0000DBA2                 db    0
.rdata$r:0000DBA3                 db    0
.rdata$r:0000DBA4                 db 0FFh
.rdata$r:0000DBA5                 db 0FFh
.rdata$r:0000DBA6                 db 0FFh
.rdata$r:0000DBA7                 db 0FFh
.rdata$r:0000DBA8                 db    0
.rdata$r:0000DBA9                 db    0
.rdata$r:0000DBAA                 db    0
.rdata$r:0000DBAB                 db    0
.rdata$r:0000DBAC                 db  40h ; @
.rdata$r:0000DBAD                 db    0
.rdata$r:0000DBAE                 db    0
.rdata$r:0000DBAF                 db    0
.rdata$r:0000DBB0                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DBB0 _rdata$r        ends
.rdata$r:0000DBB0
.data:0000DBB4 ; ===========================================================================
.data:0000DBB4
.data:0000DBB4 ; Segment type: Pure data
.data:0000DBB4 ; Segment permissions: Read/Write
.data:0000DBB4 _data           segment dword public 'DATA' use32
.data:0000DBB4                 assume cs:_data
.data:0000DBB4                 ;org 0DBB4h
.data:0000DBB4 ; COMDAT (pick any)
.data:0000DBB4                 public ??_R0?AUICompressSetInStream@@@8
.data:0000DBB4 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:0000DBB4 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000DBB4                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000DBB4                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000DBB4                                         ; const type_info::`vftable'
.data:0000DBB8                 db    0
.data:0000DBB9                 db    0
.data:0000DBBA                 db    0
.data:0000DBBB                 db    0
.data:0000DBBC                 db  2Eh ; .
.data:0000DBBD                 db  3Fh ; ?
.data:0000DBBE                 db  41h ; A
.data:0000DBBF                 db  55h ; U
.data:0000DBC0                 db  49h ; I
.data:0000DBC1                 db  43h ; C
.data:0000DBC2                 db  6Fh ; o
.data:0000DBC3                 db  6Dh ; m
.data:0000DBC4                 db  70h ; p
.data:0000DBC5                 db  72h ; r
.data:0000DBC6                 db  65h ; e
.data:0000DBC7                 db  73h ; s
.data:0000DBC8                 db  73h ; s
.data:0000DBC9                 db  53h ; S
.data:0000DBCA                 db  65h ; e
.data:0000DBCB                 db  74h ; t
.data:0000DBCC                 db  49h ; I
.data:0000DBCD                 db  6Eh ; n
.data:0000DBCE                 db  53h ; S
.data:0000DBCF                 db  74h ; t
.data:0000DBD0                 db  72h ; r
.data:0000DBD1                 db  65h ; e
.data:0000DBD2                 db  61h ; a
.data:0000DBD3                 db  6Dh ; m
.data:0000DBD4                 db  40h ; @
.data:0000DBD5                 db  40h ; @
.data:0000DBD6                 db    0
.data:0000DBD7                 align 4
.data:0000DBD7 _data           ends
.data:0000DBD7
.rdata$r:0000DBD8 ; ===========================================================================
.rdata$r:0000DBD8
.rdata$r:0000DBD8 ; Segment type: Pure data
.rdata$r:0000DBD8 ; Segment permissions: Read
.rdata$r:0000DBD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBD8                 assume cs:_rdata$r
.rdata$r:0000DBD8                 ;org 0DBD8h
.rdata$r:0000DBD8 ; COMDAT (pick any)
.rdata$r:0000DBD8                 public ??_R3ICompressSetInStream@@8
.rdata$r:0000DBD8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DBD8 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:0000DBB0o
.rdata$r:0000DBD8                                         ; .rdata$r:0000DC0Co ...
.rdata$r:0000DBD9                 db    0
.rdata$r:0000DBDA                 db    0
.rdata$r:0000DBDB                 db    0
.rdata$r:0000DBDC                 db    0
.rdata$r:0000DBDD                 db    0
.rdata$r:0000DBDE                 db    0
.rdata$r:0000DBDF                 db    0
.rdata$r:0000DBE0                 db    2
.rdata$r:0000DBE1                 db    0
.rdata$r:0000DBE2                 db    0
.rdata$r:0000DBE3                 db    0
.rdata$r:0000DBE4                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:0000DBE4 _rdata$r        ends
.rdata$r:0000DBE4
.rdata$r:0000DBE8 ; ===========================================================================
.rdata$r:0000DBE8
.rdata$r:0000DBE8 ; Segment type: Pure data
.rdata$r:0000DBE8 ; Segment permissions: Read
.rdata$r:0000DBE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBE8                 assume cs:_rdata$r
.rdata$r:0000DBE8                 ;org 0DBE8h
.rdata$r:0000DBE8 ; COMDAT (pick any)
.rdata$r:0000DBE8                 public ??_R2ICompressSetInStream@@8
.rdata$r:0000DBE8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:0000DBE8 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:0000DBE8                                         ; DATA XREF: .rdata$r:0000DBE4o
.rdata$r:0000DBE8                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DBEC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DBF0                 db    0
.rdata$r:0000DBF1                 align 4
.rdata$r:0000DBF1 _rdata$r        ends
.rdata$r:0000DBF1
.rdata$r:0000DBF4 ; ===========================================================================
.rdata$r:0000DBF4
.rdata$r:0000DBF4 ; Segment type: Pure data
.rdata$r:0000DBF4 ; Segment permissions: Read
.rdata$r:0000DBF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBF4                 assume cs:_rdata$r
.rdata$r:0000DBF4                 ;org 0DBF4h
.rdata$r:0000DBF4 ; COMDAT (pick any)
.rdata$r:0000DBF4                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:0000DBF4 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DBF4 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:0000DBF4                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:0000DBF4                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:0000DBF8                 db    1
.rdata$r:0000DBF9                 db    0
.rdata$r:0000DBFA                 db    0
.rdata$r:0000DBFB                 db    0
.rdata$r:0000DBFC                 db    0
.rdata$r:0000DBFD                 db    0
.rdata$r:0000DBFE                 db    0
.rdata$r:0000DBFF                 db    0
.rdata$r:0000DC00                 db 0FFh
.rdata$r:0000DC01                 db 0FFh
.rdata$r:0000DC02                 db 0FFh
.rdata$r:0000DC03                 db 0FFh
.rdata$r:0000DC04                 db    0
.rdata$r:0000DC05                 db    0
.rdata$r:0000DC06                 db    0
.rdata$r:0000DC07                 db    0
.rdata$r:0000DC08                 db  40h ; @
.rdata$r:0000DC09                 db    0
.rdata$r:0000DC0A                 db    0
.rdata$r:0000DC0B                 db    0
.rdata$r:0000DC0C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC0C _rdata$r        ends
.rdata$r:0000DC0C
.rdata$r:0000DC10 ; ===========================================================================
.rdata$r:0000DC10
.rdata$r:0000DC10 ; Segment type: Pure data
.rdata$r:0000DC10 ; Segment permissions: Read
.rdata$r:0000DC10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC10                 assume cs:_rdata$r
.rdata$r:0000DC10                 ;org 0DC10h
.rdata$r:0000DC10 ; COMDAT (pick any)
.rdata$r:0000DC10                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:0000DC10 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:0000DC10 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000DC10                                         ; DATA XREF: .rdata$r:0000DAA0o
.rdata$r:0000DC10                                         ; .rdata$r:0000EFD8o ...
.rdata$r:0000DC10                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000DC14                 align 8
.rdata$r:0000DC18                 db    4
.rdata$r:0000DC19                 db    0
.rdata$r:0000DC1A                 db    0
.rdata$r:0000DC1B                 db    0
.rdata$r:0000DC1C                 db 0FFh
.rdata$r:0000DC1D                 db 0FFh
.rdata$r:0000DC1E                 db 0FFh
.rdata$r:0000DC1F                 db 0FFh
.rdata$r:0000DC20                 db    0
.rdata$r:0000DC21                 db    0
.rdata$r:0000DC22                 db    0
.rdata$r:0000DC23                 db    0
.rdata$r:0000DC24                 db  42h ; B
.rdata$r:0000DC25                 db    0
.rdata$r:0000DC26                 db    0
.rdata$r:0000DC27                 db    0
.rdata$r:0000DC28                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC28 _rdata$r        ends
.rdata$r:0000DC28
.rdata$r:0000DC2C ; ===========================================================================
.rdata$r:0000DC2C
.rdata$r:0000DC2C ; Segment type: Pure data
.rdata$r:0000DC2C ; Segment permissions: Read
.rdata$r:0000DC2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC2C                 assume cs:_rdata$r
.rdata$r:0000DC2C                 ;org 0DC2Ch
.rdata$r:0000DC2C ; COMDAT (pick any)
.rdata$r:0000DC2C                 public ??_R17?0A@EA@ISequentialInStream@@8
.rdata$r:0000DC2C ; ISequentialInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:0000DC2C ??_R17?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:0000DC2C                                         ; DATA XREF: .rdata$r:0000DAA4o
.rdata$r:0000DC2C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:0000DC30                 db    1
.rdata$r:0000DC31                 db    0
.rdata$r:0000DC32                 db    0
.rdata$r:0000DC33                 db    0
.rdata$r:0000DC34                 db    8
.rdata$r:0000DC35                 db    0
.rdata$r:0000DC36                 db    0
.rdata$r:0000DC37                 db    0
.rdata$r:0000DC38                 db 0FFh
.rdata$r:0000DC39                 db 0FFh
.rdata$r:0000DC3A                 db 0FFh
.rdata$r:0000DC3B                 db 0FFh
.rdata$r:0000DC3C                 db    0
.rdata$r:0000DC3D                 db    0
.rdata$r:0000DC3E                 db    0
.rdata$r:0000DC3F                 db    0
.rdata$r:0000DC40                 db  40h ; @
.rdata$r:0000DC41                 db    0
.rdata$r:0000DC42                 db    0
.rdata$r:0000DC43                 db    0
.rdata$r:0000DC44                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC44 _rdata$r        ends
.rdata$r:0000DC44
.data:0000DC48 ; ===========================================================================
.data:0000DC48
.data:0000DC48 ; Segment type: Pure data
.data:0000DC48 ; Segment permissions: Read/Write
.data:0000DC48 _data           segment dword public 'DATA' use32
.data:0000DC48                 assume cs:_data
.data:0000DC48                 ;org 0DC48h
.data:0000DC48 ; COMDAT (pick any)
.data:0000DC48                 public ??_R0?AUISequentialInStream@@@8
.data:0000DC48 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:0000DC48 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000DC48                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:0000DC48                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000DC48                                         ; const type_info::`vftable'
.data:0000DC4C                 align 10h
.data:0000DC50 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:0000DC6A                 align 4
.data:0000DC6A _data           ends
.data:0000DC6A
.rdata$r:0000DC6C ; ===========================================================================
.rdata$r:0000DC6C
.rdata$r:0000DC6C ; Segment type: Pure data
.rdata$r:0000DC6C ; Segment permissions: Read
.rdata$r:0000DC6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC6C                 assume cs:_rdata$r
.rdata$r:0000DC6C                 ;org 0DC6Ch
.rdata$r:0000DC6C ; COMDAT (pick any)
.rdata$r:0000DC6C                 public ??_R3ISequentialInStream@@8
.rdata$r:0000DC6C ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC6C ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:0000DC44o
.rdata$r:0000DC6C                                         ; .rdata$r:0000DCA0o ...
.rdata$r:0000DC6D                 db    0
.rdata$r:0000DC6E                 db    0
.rdata$r:0000DC6F                 db    0
.rdata$r:0000DC70                 db    0
.rdata$r:0000DC71                 db    0
.rdata$r:0000DC72                 db    0
.rdata$r:0000DC73                 db    0
.rdata$r:0000DC74                 db    2
.rdata$r:0000DC75                 db    0
.rdata$r:0000DC76                 db    0
.rdata$r:0000DC77                 db    0
.rdata$r:0000DC78                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000DC78 _rdata$r        ends
.rdata$r:0000DC78
.rdata$r:0000DC7C ; ===========================================================================
.rdata$r:0000DC7C
.rdata$r:0000DC7C ; Segment type: Pure data
.rdata$r:0000DC7C ; Segment permissions: Read
.rdata$r:0000DC7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC7C                 assume cs:_rdata$r
.rdata$r:0000DC7C                 ;org 0DC7Ch
.rdata$r:0000DC7C ; COMDAT (pick any)
.rdata$r:0000DC7C                 public ??_R2ISequentialInStream@@8
.rdata$r:0000DC7C ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000DC7C ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000DC7C                                         ; DATA XREF: .rdata$r:0000DC78o
.rdata$r:0000DC7C                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DC80                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DC84                 db    0
.rdata$r:0000DC85                 align 4
.rdata$r:0000DC85 _rdata$r        ends
.rdata$r:0000DC85
.rdata$r:0000DC88 ; ===========================================================================
.rdata$r:0000DC88
.rdata$r:0000DC88 ; Segment type: Pure data
.rdata$r:0000DC88 ; Segment permissions: Read
.rdata$r:0000DC88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC88                 assume cs:_rdata$r
.rdata$r:0000DC88                 ;org 0DC88h
.rdata$r:0000DC88 ; COMDAT (pick any)
.rdata$r:0000DC88                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000DC88 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DC88 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:0000DC88                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:0000DC88                                         ; .rdata$r:0000E2A0o ...
.rdata$r:0000DC88                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:0000DC8C                 db    1
.rdata$r:0000DC8D                 db    0
.rdata$r:0000DC8E                 db    0
.rdata$r:0000DC8F                 db    0
.rdata$r:0000DC90                 db    0
.rdata$r:0000DC91                 db    0
.rdata$r:0000DC92                 db    0
.rdata$r:0000DC93                 db    0
.rdata$r:0000DC94                 db 0FFh
.rdata$r:0000DC95                 db 0FFh
.rdata$r:0000DC96                 db 0FFh
.rdata$r:0000DC97                 db 0FFh
.rdata$r:0000DC98                 db    0
.rdata$r:0000DC99                 db    0
.rdata$r:0000DC9A                 db    0
.rdata$r:0000DC9B                 db    0
.rdata$r:0000DC9C                 db  40h ; @
.rdata$r:0000DC9D                 db    0
.rdata$r:0000DC9E                 db    0
.rdata$r:0000DC9F                 db    0
.rdata$r:0000DCA0                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DCA0 _rdata$r        ends
.rdata$r:0000DCA0
.rdata$r:0000DCA4 ; ===========================================================================
.rdata$r:0000DCA4
.rdata$r:0000DCA4 ; Segment type: Pure data
.rdata$r:0000DCA4 ; Segment permissions: Read
.rdata$r:0000DCA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DCA4                 assume cs:_rdata$r
.rdata$r:0000DCA4                 ;org 0DCA4h
.rdata$r:0000DCA4 ; COMDAT (pick any)
.rdata$r:0000DCA4                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:0000DCA4 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:0000DCA4 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000DCA4                                         ; DATA XREF: .rdata$r:0000DAA8o
.rdata$r:0000DCA4                                         ; .rdata$r:00011104o
.rdata$r:0000DCA4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000DCA8                 db    0
.rdata$r:0000DCA9                 db    0
.rdata$r:0000DCAA                 db    0
.rdata$r:0000DCAB                 db    0
.rdata$r:0000DCAC                 db    8
.rdata$r:0000DCAD                 db    0
.rdata$r:0000DCAE                 db    0
.rdata$r:0000DCAF                 db    0
.rdata$r:0000DCB0                 db 0FFh
.rdata$r:0000DCB1                 db 0FFh
.rdata$r:0000DCB2                 db 0FFh
.rdata$r:0000DCB3                 db 0FFh
.rdata$r:0000DCB4                 db    0
.rdata$r:0000DCB5                 db    0
.rdata$r:0000DCB6                 db    0
.rdata$r:0000DCB7                 db    0
.rdata$r:0000DCB8                 db  42h ; B
.rdata$r:0000DCB9                 db    0
.rdata$r:0000DCBA                 db    0
.rdata$r:0000DCBB                 db    0
.rdata$r:0000DCBC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DCBC _rdata$r        ends
.rdata$r:0000DCBC
.rdata$r:0000DCC0 ; ===========================================================================
.rdata$r:0000DCC0
.rdata$r:0000DCC0 ; Segment type: Pure data
.rdata$r:0000DCC0 ; Segment permissions: Read
.rdata$r:0000DCC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DCC0                 assume cs:_rdata$r
.rdata$r:0000DCC0                 ;org 0DCC0h
.rdata$r:0000DCC0 ; COMDAT (pick any)
.rdata$r:0000DCC0                 public ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:0000DCC0 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:0000DCC0 ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:0000DCC0                                         ; DATA XREF: .rdata$r:0000DAACo
.rdata$r:0000DCC0                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:0000DCC4                 db    1
.rdata$r:0000DCC5                 db    0
.rdata$r:0000DCC6                 db    0
.rdata$r:0000DCC7                 db    0
.rdata$r:0000DCC8                 db  0Ch
.rdata$r:0000DCC9                 db    0
.rdata$r:0000DCCA                 db    0
.rdata$r:0000DCCB                 db    0
.rdata$r:0000DCCC                 db 0FFh
.rdata$r:0000DCCD                 db 0FFh
.rdata$r:0000DCCE                 db 0FFh
.rdata$r:0000DCCF                 db 0FFh
.rdata$r:0000DCD0                 db    0
.rdata$r:0000DCD1                 db    0
.rdata$r:0000DCD2                 db    0
.rdata$r:0000DCD3                 db    0
.rdata$r:0000DCD4                 db  40h ; @
.rdata$r:0000DCD5                 db    0
.rdata$r:0000DCD6                 db    0
.rdata$r:0000DCD7                 db    0
.rdata$r:0000DCD8                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DCD8 _rdata$r        ends
.rdata$r:0000DCD8
.data:0000DCDC ; ===========================================================================
.data:0000DCDC
.data:0000DCDC ; Segment type: Pure data
.data:0000DCDC ; Segment permissions: Read/Write
.data:0000DCDC _data           segment dword public 'DATA' use32
.data:0000DCDC                 assume cs:_data
.data:0000DCDC                 ;org 0DCDCh
.data:0000DCDC ; COMDAT (pick any)
.data:0000DCDC                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:0000DCDC ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:0000DCDC ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:0000DCDC                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:0000DCDC                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000DCDC                                         ; const type_info::`vftable'
.data:0000DCE0                 db    0
.data:0000DCE1                 db    0
.data:0000DCE2                 db    0
.data:0000DCE3                 db    0
.data:0000DCE4                 db  2Eh ; .
.data:0000DCE5                 db  3Fh ; ?
.data:0000DCE6                 db  41h ; A
.data:0000DCE7                 db  55h ; U
.data:0000DCE8                 db  49h ; I
.data:0000DCE9                 db  43h ; C
.data:0000DCEA                 db  6Fh ; o
.data:0000DCEB                 db  6Dh ; m
.data:0000DCEC                 db  70h ; p
.data:0000DCED                 db  72h ; r
.data:0000DCEE                 db  65h ; e
.data:0000DCEF                 db  73h ; s
.data:0000DCF0                 db  73h ; s
.data:0000DCF1                 db  47h ; G
.data:0000DCF2                 db  65h ; e
.data:0000DCF3                 db  74h ; t
.data:0000DCF4                 db  49h ; I
.data:0000DCF5                 db  6Eh ; n
.data:0000DCF6                 db  53h ; S
.data:0000DCF7                 db  74h ; t
.data:0000DCF8                 db  72h ; r
.data:0000DCF9                 db  65h ; e
.data:0000DCFA                 db  61h ; a
.data:0000DCFB                 db  6Dh ; m
.data:0000DCFC                 db  50h ; P
.data:0000DCFD                 db  72h ; r
.data:0000DCFE                 db  6Fh ; o
.data:0000DCFF                 db  63h ; c
.data:0000DD00                 db  65h ; e
.data:0000DD01                 db  73h ; s
.data:0000DD02                 db  73h ; s
.data:0000DD03                 db  65h ; e
.data:0000DD04                 db  64h ; d
.data:0000DD05                 db  53h ; S
.data:0000DD06                 db  69h ; i
.data:0000DD07                 db  7Ah ; z
.data:0000DD08                 db  65h ; e
.data:0000DD09                 db  40h ; @
.data:0000DD0A                 db  40h ; @
.data:0000DD0B                 db    0
.data:0000DD0B _data           ends
.data:0000DD0B
.rdata$r:0000DD0C ; ===========================================================================
.rdata$r:0000DD0C
.rdata$r:0000DD0C ; Segment type: Pure data
.rdata$r:0000DD0C ; Segment permissions: Read
.rdata$r:0000DD0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD0C                 assume cs:_rdata$r
.rdata$r:0000DD0C                 ;org 0DD0Ch
.rdata$r:0000DD0C ; COMDAT (pick any)
.rdata$r:0000DD0C                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:0000DD0C ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD0C ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:0000DD0C                                         ; DATA XREF: .rdata$r:0000DCD8o
.rdata$r:0000DD0C                                         ; .rdata$r:0000DD40o ...
.rdata$r:0000DD0D                 db    0
.rdata$r:0000DD0E                 db    0
.rdata$r:0000DD0F                 db    0
.rdata$r:0000DD10                 db    0
.rdata$r:0000DD11                 db    0
.rdata$r:0000DD12                 db    0
.rdata$r:0000DD13                 db    0
.rdata$r:0000DD14                 db    2
.rdata$r:0000DD15                 db    0
.rdata$r:0000DD16                 db    0
.rdata$r:0000DD17                 db    0
.rdata$r:0000DD18                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:0000DD18 _rdata$r        ends
.rdata$r:0000DD18
.rdata$r:0000DD1C ; ===========================================================================
.rdata$r:0000DD1C
.rdata$r:0000DD1C ; Segment type: Pure data
.rdata$r:0000DD1C ; Segment permissions: Read
.rdata$r:0000DD1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD1C                 assume cs:_rdata$r
.rdata$r:0000DD1C                 ;org 0DD1Ch
.rdata$r:0000DD1C ; COMDAT (pick any)
.rdata$r:0000DD1C                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:0000DD1C ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:0000DD1C ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:0000DD1C                                         ; DATA XREF: .rdata$r:0000DD18o
.rdata$r:0000DD1C                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD20                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD24                 db    0
.rdata$r:0000DD25                 align 4
.rdata$r:0000DD25 _rdata$r        ends
.rdata$r:0000DD25
.rdata$r:0000DD28 ; ===========================================================================
.rdata$r:0000DD28
.rdata$r:0000DD28 ; Segment type: Pure data
.rdata$r:0000DD28 ; Segment permissions: Read
.rdata$r:0000DD28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD28                 assume cs:_rdata$r
.rdata$r:0000DD28                 ;org 0DD28h
.rdata$r:0000DD28 ; COMDAT (pick any)
.rdata$r:0000DD28                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:0000DD28 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DD28 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:0000DD28                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:0000DD28                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:0000DD2C                 db    1
.rdata$r:0000DD2D                 db    0
.rdata$r:0000DD2E                 db    0
.rdata$r:0000DD2F                 db    0
.rdata$r:0000DD30                 db    0
.rdata$r:0000DD31                 db    0
.rdata$r:0000DD32                 db    0
.rdata$r:0000DD33                 db    0
.rdata$r:0000DD34                 db 0FFh
.rdata$r:0000DD35                 db 0FFh
.rdata$r:0000DD36                 db 0FFh
.rdata$r:0000DD37                 db 0FFh
.rdata$r:0000DD38                 db    0
.rdata$r:0000DD39                 db    0
.rdata$r:0000DD3A                 db    0
.rdata$r:0000DD3B                 db    0
.rdata$r:0000DD3C                 db  40h ; @
.rdata$r:0000DD3D                 db    0
.rdata$r:0000DD3E                 db    0
.rdata$r:0000DD3F                 db    0
.rdata$r:0000DD40                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD40 _rdata$r        ends
.rdata$r:0000DD40
.rdata$r:0000DD44 ; ===========================================================================
.rdata$r:0000DD44
.rdata$r:0000DD44 ; Segment type: Pure data
.rdata$r:0000DD44 ; Segment permissions: Read
.rdata$r:0000DD44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD44                 assume cs:_rdata$r
.rdata$r:0000DD44                 ;org 0DD44h
.rdata$r:0000DD44 ; COMDAT (pick any)
.rdata$r:0000DD44                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:0000DD44 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:0000DD44 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000DD44                                         ; DATA XREF: .rdata$r:0000DAB0o
.rdata$r:0000DD44                                         ; .rdata$r:0001110Co
.rdata$r:0000DD44                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000DD48                 db    0
.rdata$r:0000DD49                 db    0
.rdata$r:0000DD4A                 db    0
.rdata$r:0000DD4B                 db    0
.rdata$r:0000DD4C                 db  0Ch
.rdata$r:0000DD4D                 db    0
.rdata$r:0000DD4E                 db    0
.rdata$r:0000DD4F                 db    0
.rdata$r:0000DD50                 db 0FFh
.rdata$r:0000DD51                 db 0FFh
.rdata$r:0000DD52                 db 0FFh
.rdata$r:0000DD53                 db 0FFh
.rdata$r:0000DD54                 db    0
.rdata$r:0000DD55                 db    0
.rdata$r:0000DD56                 db    0
.rdata$r:0000DD57                 db    0
.rdata$r:0000DD58                 db  42h ; B
.rdata$r:0000DD59                 db    0
.rdata$r:0000DD5A                 db    0
.rdata$r:0000DD5B                 db    0
.rdata$r:0000DD5C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD5C _rdata$r        ends
.rdata$r:0000DD5C
.rdata$r:0000DD60 ; ===========================================================================
.rdata$r:0000DD60
.rdata$r:0000DD60 ; Segment type: Pure data
.rdata$r:0000DD60 ; Segment permissions: Read
.rdata$r:0000DD60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD60                 assume cs:_rdata$r
.rdata$r:0000DD60                 ;org 0DD60h
.rdata$r:0000DD60 ; COMDAT (pick any)
.rdata$r:0000DD60                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000DD60 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:0000DD60 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000DD60                                         ; DATA XREF: .rdata$r:0000DAB4o
.rdata$r:0000DD60                                         ; .rdata$r:00011110o
.rdata$r:0000DD60                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000DD64                 align 8
.rdata$r:0000DD68                 db  10h
.rdata$r:0000DD69                 db    0
.rdata$r:0000DD6A                 db    0
.rdata$r:0000DD6B                 db    0
.rdata$r:0000DD6C                 db 0FFh
.rdata$r:0000DD6D                 db 0FFh
.rdata$r:0000DD6E                 db 0FFh
.rdata$r:0000DD6F                 db 0FFh
.rdata$r:0000DD70                 db    0
.rdata$r:0000DD71                 db    0
.rdata$r:0000DD72                 db    0
.rdata$r:0000DD73                 db    0
.rdata$r:0000DD74                 db  40h ; @
.rdata$r:0000DD75                 db    0
.rdata$r:0000DD76                 db    0
.rdata$r:0000DD77                 db    0
.rdata$r:0000DD78                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD78 _rdata$r        ends
.rdata$r:0000DD78
.data:0000DD7C ; ===========================================================================
.data:0000DD7C
.data:0000DD7C ; Segment type: Pure data
.data:0000DD7C ; Segment permissions: Read/Write
.data:0000DD7C _data           segment dword public 'DATA' use32
.data:0000DD7C                 assume cs:_data
.data:0000DD7C                 ;org 0DD7Ch
.data:0000DD7C ; COMDAT (pick any)
.data:0000DD7C                 public ??_R0?AVCMyUnknownImp@@@8
.data:0000DD7C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:0000DD7C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:0000DD7C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:0000DD7C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000DD7C                                         ; const type_info::`vftable'
.data:0000DD80                 db    0
.data:0000DD81                 db    0
.data:0000DD82                 db    0
.data:0000DD83                 db    0
.data:0000DD84                 db  2Eh ; .
.data:0000DD85                 db  3Fh ; ?
.data:0000DD86                 db  41h ; A
.data:0000DD87                 db  56h ; V
.data:0000DD88                 db  43h ; C
.data:0000DD89                 db  4Dh ; M
.data:0000DD8A                 db  79h ; y
.data:0000DD8B                 db  55h ; U
.data:0000DD8C                 db  6Eh ; n
.data:0000DD8D                 db  6Bh ; k
.data:0000DD8E                 db  6Eh ; n
.data:0000DD8F                 db  6Fh ; o
.data:0000DD90                 db  77h ; w
.data:0000DD91                 db  6Eh ; n
.data:0000DD92                 db  49h ; I
.data:0000DD93                 db  6Dh ; m
.data:0000DD94                 db  70h ; p
.data:0000DD95                 db  40h ; @
.data:0000DD96                 db  40h ; @
.data:0000DD97                 db    0
.data:0000DD97 _data           ends
.data:0000DD97
.rdata$r:0000DD98 ; ===========================================================================
.rdata$r:0000DD98
.rdata$r:0000DD98 ; Segment type: Pure data
.rdata$r:0000DD98 ; Segment permissions: Read
.rdata$r:0000DD98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD98                 assume cs:_rdata$r
.rdata$r:0000DD98                 ;org 0DD98h
.rdata$r:0000DD98 ; COMDAT (pick any)
.rdata$r:0000DD98                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000DD98 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD98 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000DD78o
.rdata$r:0000DD98                                         ; .rdata$r:0000DDC8o ...
.rdata$r:0000DD99                 db    0
.rdata$r:0000DD9A                 db    0
.rdata$r:0000DD9B                 db    0
.rdata$r:0000DD9C                 db    0
.rdata$r:0000DD9D                 db    0
.rdata$r:0000DD9E                 db    0
.rdata$r:0000DD9F                 db    0
.rdata$r:0000DDA0                 db    1
.rdata$r:0000DDA1                 db    0
.rdata$r:0000DDA2                 db    0
.rdata$r:0000DDA3                 db    0
.rdata$r:0000DDA4                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000DDA4 _rdata$r        ends
.rdata$r:0000DDA4
.rdata$r:0000DDA8 ; ===========================================================================
.rdata$r:0000DDA8
.rdata$r:0000DDA8 ; Segment type: Pure data
.rdata$r:0000DDA8 ; Segment permissions: Read
.rdata$r:0000DDA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DDA8                 assume cs:_rdata$r
.rdata$r:0000DDA8                 ;org 0DDA8h
.rdata$r:0000DDA8 ; COMDAT (pick any)
.rdata$r:0000DDA8                 public ??_R2CMyUnknownImp@@8
.rdata$r:0000DDA8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000DDA8 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000DDA8                                         ; DATA XREF: .rdata$r:0000DDA4o
.rdata$r:0000DDA8                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DDAC                 db    0
.rdata$r:0000DDAD                 align 10h
.rdata$r:0000DDAD _rdata$r        ends
.rdata$r:0000DDAD
.rdata$r:0000DDB0 ; ===========================================================================
.rdata$r:0000DDB0
.rdata$r:0000DDB0 ; Segment type: Pure data
.rdata$r:0000DDB0 ; Segment permissions: Read
.rdata$r:0000DDB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DDB0                 assume cs:_rdata$r
.rdata$r:0000DDB0                 ;org 0DDB0h
.rdata$r:0000DDB0 ; COMDAT (pick any)
.rdata$r:0000DDB0                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000DDB0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DDB0 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000DDB0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:0000DDB0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000DDB4                 db    0
.rdata$r:0000DDB5                 db    0
.rdata$r:0000DDB6                 db    0
.rdata$r:0000DDB7                 db    0
.rdata$r:0000DDB8                 db    0
.rdata$r:0000DDB9                 db    0
.rdata$r:0000DDBA                 db    0
.rdata$r:0000DDBB                 db    0
.rdata$r:0000DDBC                 db 0FFh
.rdata$r:0000DDBD                 db 0FFh
.rdata$r:0000DDBE                 db 0FFh
.rdata$r:0000DDBF                 db 0FFh
.rdata$r:0000DDC0                 db    0
.rdata$r:0000DDC1                 db    0
.rdata$r:0000DDC2                 db    0
.rdata$r:0000DDC3                 db    0
.rdata$r:0000DDC4                 db  40h ; @
.rdata$r:0000DDC5                 db    0
.rdata$r:0000DDC6                 db    0
.rdata$r:0000DDC7                 db    0
.rdata$r:0000DDC8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DDC8 _rdata$r        ends
.rdata$r:0000DDC8
.rdata$r:0000DDCC ; ===========================================================================
.rdata$r:0000DDCC
.rdata$r:0000DDCC ; Segment type: Pure data
.rdata$r:0000DDCC ; Segment permissions: Read
.rdata$r:0000DDCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DDCC                 assume cs:_rdata$r
.rdata$r:0000DDCC                 ;org 0DDCCh
.rdata$r:0000DDCC ; COMDAT (pick any)
.rdata$r:0000DDCC                 public ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata$r:0000DDCC ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:0000DDCC ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:0000DDCC                                         ; DATA XREF: .rdata:0000DA1Co
.rdata$r:0000DDCD                 db    0
.rdata$r:0000DDCE                 db    0
.rdata$r:0000DDCF                 db    0
.rdata$r:0000DDD0                 db    4
.rdata$r:0000DDD1                 db    0
.rdata$r:0000DDD2                 db    0
.rdata$r:0000DDD3                 db    0
.rdata$r:0000DDD4                 db    0
.rdata$r:0000DDD5                 db    0
.rdata$r:0000DDD6                 db    0
.rdata$r:0000DDD7                 db    0
.rdata$r:0000DDD8                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:0000DDDC                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DDDC _rdata$r        ends
.rdata$r:0000DDDC
.rdata$r:0000DDE0 ; ===========================================================================
.rdata$r:0000DDE0
.rdata$r:0000DDE0 ; Segment type: Pure data
.rdata$r:0000DDE0 ; Segment permissions: Read
.rdata$r:0000DDE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DDE0                 assume cs:_rdata$r
.rdata$r:0000DDE0                 ;org 0DDE0h
.rdata$r:0000DDE0 ; COMDAT (pick any)
.rdata$r:0000DDE0                 public ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata$r:0000DDE0 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:0000DDE0 ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:0000DDE0                                         ; DATA XREF: .rdata:0000DA08o
.rdata$r:0000DDE1                 db    0
.rdata$r:0000DDE2                 db    0
.rdata$r:0000DDE3                 db    0
.rdata$r:0000DDE4                 db    8
.rdata$r:0000DDE5                 db    0
.rdata$r:0000DDE6                 db    0
.rdata$r:0000DDE7                 db    0
.rdata$r:0000DDE8                 db    0
.rdata$r:0000DDE9                 db    0
.rdata$r:0000DDEA                 db    0
.rdata$r:0000DDEB                 db    0
.rdata$r:0000DDEC                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:0000DDF0                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DDF0 _rdata$r        ends
.rdata$r:0000DDF0
.rdata$r:0000DDF4 ; ===========================================================================
.rdata$r:0000DDF4
.rdata$r:0000DDF4 ; Segment type: Pure data
.rdata$r:0000DDF4 ; Segment permissions: Read
.rdata$r:0000DDF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DDF4                 assume cs:_rdata$r
.rdata$r:0000DDF4                 ;org 0DDF4h
.rdata$r:0000DDF4 ; COMDAT (pick any)
.rdata$r:0000DDF4                 public ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:0000DDF4 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:0000DDF4 ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:0000DDF4                                         ; DATA XREF: .rdata:0000D9F4o
.rdata$r:0000DDF5                 db    0
.rdata$r:0000DDF6                 db    0
.rdata$r:0000DDF7                 db    0
.rdata$r:0000DDF8                 db  0Ch
.rdata$r:0000DDF9                 db    0
.rdata$r:0000DDFA                 db    0
.rdata$r:0000DDFB                 db    0
.rdata$r:0000DDFC                 db    0
.rdata$r:0000DDFD                 db    0
.rdata$r:0000DDFE                 db    0
.rdata$r:0000DDFF                 db    0
.rdata$r:0000DE00                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:0000DE04                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DE04 _rdata$r        ends
.rdata$r:0000DE04
.text:0000DE08 ; ===========================================================================
.text:0000DE08
.text:0000DE08 ; Segment type: Pure code
.text:0000DE08 ; Segment permissions: Read/Execute
.text:0000DE08 _text           segment para public 'CODE' use32
.text:0000DE08                 assume cs:_text
.text:0000DE08                 ;org 0DE08h
.text:0000DE08 ; COMDAT (pick any)
.text:0000DE08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DE08
.text:0000DE08 ; =============== S U B R O U T I N E =======================================
.text:0000DE08
.text:0000DE08 ; Attributes: bp-based frame
.text:0000DE08
.text:0000DE08 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:0000DE08                 public ??0CMyUnknownImp@@QAE@XZ
.text:0000DE08 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+3Dp
.text:0000DE08                                         ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)+1Cp ...
.text:0000DE08
.text:0000DE08 var_4           = dword ptr -4
.text:0000DE08
.text:0000DE08                 push    ebp
.text:0000DE09                 mov     ebp, esp
.text:0000DE0B                 push    ecx
.text:0000DE0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DE13                 mov     [ebp+var_4], ecx
.text:0000DE16                 mov     eax, [ebp+var_4]
.text:0000DE19                 mov     dword ptr [eax], 0
.text:0000DE1F                 mov     eax, [ebp+var_4]
.text:0000DE22                 mov     esp, ebp
.text:0000DE24                 pop     ebp
.text:0000DE25                 retn
.text:0000DE25 ??0CMyUnknownImp@@QAE@XZ endp
.text:0000DE25
.text:0000DE25 ; ---------------------------------------------------------------------------
.text:0000DE26                 align 4
.text:0000DE26 _text           ends
.text:0000DE26
.text:0000DE28 ; ===========================================================================
.text:0000DE28
.text:0000DE28 ; Segment type: Pure code
.text:0000DE28 ; Segment permissions: Read/Execute
.text:0000DE28 _text           segment para public 'CODE' use32
.text:0000DE28                 assume cs:_text
.text:0000DE28                 ;org 0DE28h
.text:0000DE28 ; COMDAT (pick any)
.text:0000DE28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DE28
.text:0000DE28 ; =============== S U B R O U T I N E =======================================
.text:0000DE28
.text:0000DE28 ; Attributes: bp-based frame
.text:0000DE28
.text:0000DE28 ; __int32 __stdcall NCompress::CCopyCoder::QueryInterface(NCompress::CCopyCoder *this, const struct _GUID *Buf1, void **)
.text:0000DE28                 public ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:0000DE28 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000DE28                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000DE28                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:0000DE28
.text:0000DE28 var_C           = dword ptr -0Ch
.text:0000DE28 var_8           = dword ptr -8
.text:0000DE28 var_4           = dword ptr -4
.text:0000DE28 this            = dword ptr  8
.text:0000DE28 Buf1            = dword ptr  0Ch
.text:0000DE28 arg_8           = dword ptr  10h
.text:0000DE28
.text:0000DE28                 push    ebp
.text:0000DE29                 mov     ebp, esp
.text:0000DE2B                 sub     esp, 0Ch
.text:0000DE2E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000DE35                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000DE3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DE43                 mov     eax, [ebp+arg_8]
.text:0000DE46                 mov     dword ptr [eax], 0
.text:0000DE4C                 push    offset _IID_IUnknown ; Buf2
.text:0000DE51                 mov     ecx, [ebp+Buf1]
.text:0000DE54                 push    ecx             ; Buf1
.text:0000DE55                 call    ___@8           ; __(x,x)
.text:0000DE5A                 test    eax, eax
.text:0000DE5C                 jz      short loc_DE6B
.text:0000DE5E                 mov     edx, [ebp+arg_8]
.text:0000DE61                 mov     eax, [ebp+this]
.text:0000DE64                 mov     [edx], eax
.text:0000DE66                 jmp     loc_DF2D
.text:0000DE6B ; ---------------------------------------------------------------------------
.text:0000DE6B
.text:0000DE6B loc_DE6B:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+34j
.text:0000DE6B                 push    offset _IID_ICompressCoder ; Buf2
.text:0000DE70                 mov     ecx, [ebp+Buf1]
.text:0000DE73                 push    ecx             ; Buf1
.text:0000DE74                 call    ___@8           ; __(x,x)
.text:0000DE79                 test    eax, eax
.text:0000DE7B                 jz      short loc_DE8A
.text:0000DE7D                 mov     edx, [ebp+arg_8]
.text:0000DE80                 mov     eax, [ebp+this]
.text:0000DE83                 mov     [edx], eax
.text:0000DE85                 jmp     loc_DF2D
.text:0000DE8A ; ---------------------------------------------------------------------------
.text:0000DE8A
.text:0000DE8A loc_DE8A:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+53j
.text:0000DE8A                 push    offset _IID_ICompressSetInStream ; Buf2
.text:0000DE8F                 mov     ecx, [ebp+Buf1]
.text:0000DE92                 push    ecx             ; Buf1
.text:0000DE93                 call    ___@8           ; __(x,x)
.text:0000DE98                 test    eax, eax
.text:0000DE9A                 jz      short loc_DEBE
.text:0000DE9C                 cmp     [ebp+this], 0
.text:0000DEA0                 jz      short loc_DEAD
.text:0000DEA2                 mov     edx, [ebp+this]
.text:0000DEA5                 add     edx, 4
.text:0000DEA8                 mov     [ebp+var_4], edx
.text:0000DEAB                 jmp     short loc_DEB4
.text:0000DEAD ; ---------------------------------------------------------------------------
.text:0000DEAD
.text:0000DEAD loc_DEAD:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+78j
.text:0000DEAD                 mov     [ebp+var_4], 0
.text:0000DEB4
.text:0000DEB4 loc_DEB4:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+83j
.text:0000DEB4                 mov     eax, [ebp+arg_8]
.text:0000DEB7                 mov     ecx, [ebp+var_4]
.text:0000DEBA                 mov     [eax], ecx
.text:0000DEBC                 jmp     short loc_DF2D
.text:0000DEBE ; ---------------------------------------------------------------------------
.text:0000DEBE
.text:0000DEBE loc_DEBE:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+72j
.text:0000DEBE                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000DEC3                 mov     edx, [ebp+Buf1]
.text:0000DEC6                 push    edx             ; Buf1
.text:0000DEC7                 call    ___@8           ; __(x,x)
.text:0000DECC                 test    eax, eax
.text:0000DECE                 jz      short loc_DEF2
.text:0000DED0                 cmp     [ebp+this], 0
.text:0000DED4                 jz      short loc_DEE1
.text:0000DED6                 mov     eax, [ebp+this]
.text:0000DED9                 add     eax, 8
.text:0000DEDC                 mov     [ebp+var_8], eax
.text:0000DEDF                 jmp     short loc_DEE8
.text:0000DEE1 ; ---------------------------------------------------------------------------
.text:0000DEE1
.text:0000DEE1 loc_DEE1:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+ACj
.text:0000DEE1                 mov     [ebp+var_8], 0
.text:0000DEE8
.text:0000DEE8 loc_DEE8:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+B7j
.text:0000DEE8                 mov     ecx, [ebp+arg_8]
.text:0000DEEB                 mov     edx, [ebp+var_8]
.text:0000DEEE                 mov     [ecx], edx
.text:0000DEF0                 jmp     short loc_DF2D
.text:0000DEF2 ; ---------------------------------------------------------------------------
.text:0000DEF2
.text:0000DEF2 loc_DEF2:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+A6j
.text:0000DEF2                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:0000DEF7                 mov     eax, [ebp+Buf1]
.text:0000DEFA                 push    eax             ; Buf1
.text:0000DEFB                 call    ___@8           ; __(x,x)
.text:0000DF00                 test    eax, eax
.text:0000DF02                 jz      short loc_DF26
.text:0000DF04                 cmp     [ebp+this], 0
.text:0000DF08                 jz      short loc_DF15
.text:0000DF0A                 mov     ecx, [ebp+this]
.text:0000DF0D                 add     ecx, 0Ch
.text:0000DF10                 mov     [ebp+var_C], ecx
.text:0000DF13                 jmp     short loc_DF1C
.text:0000DF15 ; ---------------------------------------------------------------------------
.text:0000DF15
.text:0000DF15 loc_DF15:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+E0j
.text:0000DF15                 mov     [ebp+var_C], 0
.text:0000DF1C
.text:0000DF1C loc_DF1C:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+EBj
.text:0000DF1C                 mov     edx, [ebp+arg_8]
.text:0000DF1F                 mov     eax, [ebp+var_C]
.text:0000DF22                 mov     [edx], eax
.text:0000DF24                 jmp     short loc_DF2D
.text:0000DF26 ; ---------------------------------------------------------------------------
.text:0000DF26
.text:0000DF26 loc_DF26:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+DAj
.text:0000DF26                 mov     eax, 80004002h
.text:0000DF2B                 jmp     short loc_DF3E
.text:0000DF2D ; ---------------------------------------------------------------------------
.text:0000DF2D
.text:0000DF2D loc_DF2D:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:0000DF2D                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:0000DF2D                 mov     ecx, [ebp+this]
.text:0000DF30                 mov     edx, [ecx+10h]
.text:0000DF33                 add     edx, 1
.text:0000DF36                 mov     eax, [ebp+this]
.text:0000DF39                 mov     [eax+10h], edx
.text:0000DF3C                 xor     eax, eax
.text:0000DF3E
.text:0000DF3E loc_DF3E:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+103j
.text:0000DF3E                 add     esp, 0Ch
.text:0000DF41                 cmp     ebp, esp
.text:0000DF43                 call    __RTC_CheckEsp
.text:0000DF48                 mov     esp, ebp
.text:0000DF4A                 pop     ebp
.text:0000DF4B                 retn    0Ch
.text:0000DF4B ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000DF4B
.text:0000DF4B ; ---------------------------------------------------------------------------
.text:0000DF4E                 align 10h
.text:0000DF4E _text           ends
.text:0000DF4E
.text:0000DF50 ; ===========================================================================
.text:0000DF50
.text:0000DF50 ; Segment type: Pure code
.text:0000DF50 ; Segment permissions: Read/Execute
.text:0000DF50 _text           segment para public 'CODE' use32
.text:0000DF50                 assume cs:_text
.text:0000DF50                 ;org 0DF50h
.text:0000DF50 ; COMDAT (pick any)
.text:0000DF50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DF50
.text:0000DF50 ; =============== S U B R O U T I N E =======================================
.text:0000DF50
.text:0000DF50 ; Attributes: bp-based frame
.text:0000DF50
.text:0000DF50 ; int __stdcall __(void *Buf1, void *Buf2)
.text:0000DF50                 public ___@8
.text:0000DF50 ___@8           proc near               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:0000DF50                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:0000DF50
.text:0000DF50 Buf1            = dword ptr  8
.text:0000DF50 Buf2            = dword ptr  0Ch
.text:0000DF50
.text:0000DF50                 push    ebp
.text:0000DF51                 mov     ebp, esp
.text:0000DF53                 mov     eax, [ebp+Buf2]
.text:0000DF56                 push    eax             ; Buf2
.text:0000DF57                 mov     ecx, [ebp+Buf1]
.text:0000DF5A                 push    ecx             ; Buf1
.text:0000DF5B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:0000DF60                 cmp     ebp, esp
.text:0000DF62                 call    __RTC_CheckEsp
.text:0000DF67                 pop     ebp
.text:0000DF68                 retn    8
.text:0000DF68 ___@8           endp
.text:0000DF68
.text:0000DF68 ; ---------------------------------------------------------------------------
.text:0000DF6B                 align 4
.text:0000DF6B _text           ends
.text:0000DF6B
.text:0000DF6C ; ===========================================================================
.text:0000DF6C
.text:0000DF6C ; Segment type: Pure code
.text:0000DF6C ; Segment permissions: Read/Execute
.text:0000DF6C _text           segment para public 'CODE' use32
.text:0000DF6C                 assume cs:_text
.text:0000DF6C                 ;org 0DF6Ch
.text:0000DF6C ; COMDAT (pick any)
.text:0000DF6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DF6C
.text:0000DF6C ; =============== S U B R O U T I N E =======================================
.text:0000DF6C
.text:0000DF6C ; Attributes: bp-based frame
.text:0000DF6C
.text:0000DF6C ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:0000DF6C                 public _IsEqualGUID@8
.text:0000DF6C _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:0000DF6C
.text:0000DF6C Buf1            = dword ptr  8
.text:0000DF6C Buf2            = dword ptr  0Ch
.text:0000DF6C
.text:0000DF6C                 push    ebp
.text:0000DF6D                 mov     ebp, esp
.text:0000DF6F                 push    10h             ; Size
.text:0000DF71                 mov     eax, [ebp+Buf2]
.text:0000DF74                 push    eax             ; Buf2
.text:0000DF75                 mov     ecx, [ebp+Buf1]
.text:0000DF78                 push    ecx             ; Buf1
.text:0000DF79                 call    _memcmp
.text:0000DF7E                 add     esp, 0Ch
.text:0000DF81                 neg     eax
.text:0000DF83                 sbb     eax, eax
.text:0000DF85                 add     eax, 1
.text:0000DF88                 cmp     ebp, esp
.text:0000DF8A                 call    __RTC_CheckEsp
.text:0000DF8F                 pop     ebp
.text:0000DF90                 retn    8
.text:0000DF90 _IsEqualGUID@8  endp
.text:0000DF90
.text:0000DF90 ; ---------------------------------------------------------------------------
.text:0000DF93                 align 4
.text:0000DF93 _text           ends
.text:0000DF93
.text:0000DF94 ; ===========================================================================
.text:0000DF94
.text:0000DF94 ; Segment type: Pure code
.text:0000DF94 ; Segment permissions: Read/Execute
.text:0000DF94 _text           segment para public 'CODE' use32
.text:0000DF94                 assume cs:_text
.text:0000DF94                 ;org 0DF94h
.text:0000DF94 ; COMDAT (pick any)
.text:0000DF94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DF94
.text:0000DF94 ; =============== S U B R O U T I N E =======================================
.text:0000DF94
.text:0000DF94 ; Attributes: bp-based frame
.text:0000DF94
.text:0000DF94 ; unsigned __int32 __stdcall NCompress::CCopyCoder::AddRef(NCompress::CCopyCoder *this)
.text:0000DF94                 public ?AddRef@CCopyCoder@NCompress@@UAGKXZ
.text:0000DF94 ?AddRef@CCopyCoder@NCompress@@UAGKXZ proc near
.text:0000DF94                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)+5j
.text:0000DF94                                         ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)+5j ...
.text:0000DF94
.text:0000DF94 var_4           = dword ptr -4
.text:0000DF94 this            = dword ptr  8
.text:0000DF94
.text:0000DF94                 push    ebp
.text:0000DF95                 mov     ebp, esp
.text:0000DF97                 push    ecx
.text:0000DF98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DF9F                 mov     eax, [ebp+this]
.text:0000DFA2                 mov     ecx, [eax+10h]
.text:0000DFA5                 add     ecx, 1
.text:0000DFA8                 mov     [ebp+var_4], ecx
.text:0000DFAB                 mov     edx, [ebp+this]
.text:0000DFAE                 mov     eax, [ebp+var_4]
.text:0000DFB1                 mov     [edx+10h], eax
.text:0000DFB4                 mov     eax, [ebp+var_4]
.text:0000DFB7                 mov     esp, ebp
.text:0000DFB9                 pop     ebp
.text:0000DFBA                 retn    4
.text:0000DFBA ?AddRef@CCopyCoder@NCompress@@UAGKXZ endp
.text:0000DFBA
.text:0000DFBA ; ---------------------------------------------------------------------------
.text:0000DFBD                 align 10h
.text:0000DFBD _text           ends
.text:0000DFBD
.text:0000DFC0 ; ===========================================================================
.text:0000DFC0
.text:0000DFC0 ; Segment type: Pure code
.text:0000DFC0 ; Segment permissions: Read/Execute
.text:0000DFC0 _text           segment para public 'CODE' use32
.text:0000DFC0                 assume cs:_text
.text:0000DFC0                 ;org 0DFC0h
.text:0000DFC0 ; COMDAT (pick any)
.text:0000DFC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DFC0
.text:0000DFC0 ; =============== S U B R O U T I N E =======================================
.text:0000DFC0
.text:0000DFC0 ; Attributes: bp-based frame
.text:0000DFC0
.text:0000DFC0 ; unsigned __int32 __stdcall NCompress::CCopyCoder::Release(NCompress::CCopyCoder *this)
.text:0000DFC0                 public ?Release@CCopyCoder@NCompress@@UAGKXZ
.text:0000DFC0 ?Release@CCopyCoder@NCompress@@UAGKXZ proc near
.text:0000DFC0                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)+5j
.text:0000DFC0                                         ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)+5j ...
.text:0000DFC0
.text:0000DFC0 var_10          = dword ptr -10h
.text:0000DFC0 var_C           = dword ptr -0Ch
.text:0000DFC0 var_8           = dword ptr -8
.text:0000DFC0 var_4           = dword ptr -4
.text:0000DFC0 this            = dword ptr  8
.text:0000DFC0
.text:0000DFC0                 push    ebp
.text:0000DFC1                 mov     ebp, esp
.text:0000DFC3                 sub     esp, 10h
.text:0000DFC6                 mov     eax, 0CCCCCCCCh
.text:0000DFCB                 mov     [ebp+var_10], eax
.text:0000DFCE                 mov     [ebp+var_C], eax
.text:0000DFD1                 mov     [ebp+var_8], eax
.text:0000DFD4                 mov     [ebp+var_4], eax
.text:0000DFD7                 mov     eax, [ebp+this]
.text:0000DFDA                 mov     ecx, [eax+10h]
.text:0000DFDD                 sub     ecx, 1
.text:0000DFE0                 mov     [ebp+var_C], ecx
.text:0000DFE3                 mov     edx, [ebp+this]
.text:0000DFE6                 mov     eax, [ebp+var_C]
.text:0000DFE9                 mov     [edx+10h], eax
.text:0000DFEC                 cmp     [ebp+var_C], 0
.text:0000DFF0                 jz      short loc_DFFA
.text:0000DFF2                 mov     ecx, [ebp+this]
.text:0000DFF5                 mov     eax, [ecx+10h]
.text:0000DFF8                 jmp     short loc_E024
.text:0000DFFA ; ---------------------------------------------------------------------------
.text:0000DFFA
.text:0000DFFA loc_DFFA:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+30j
.text:0000DFFA                 mov     edx, [ebp+this]
.text:0000DFFD                 mov     [ebp+var_8], edx
.text:0000E000                 mov     eax, [ebp+var_8]
.text:0000E003                 mov     [ebp+var_4], eax
.text:0000E006                 cmp     [ebp+var_4], 0
.text:0000E00A                 jz      short loc_E01B
.text:0000E00C                 push    1
.text:0000E00E                 mov     ecx, [ebp+var_4]
.text:0000E011                 call    ??_GCCopyCoder@NCompress@@QAEPAXI@Z ; NCompress::CCopyCoder::`scalar deleting destructor'(uint)
.text:0000E016                 mov     [ebp+var_10], eax
.text:0000E019                 jmp     short loc_E022
.text:0000E01B ; ---------------------------------------------------------------------------
.text:0000E01B
.text:0000E01B loc_E01B:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+4Aj
.text:0000E01B                 mov     [ebp+var_10], 0
.text:0000E022
.text:0000E022 loc_E022:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+59j
.text:0000E022                 xor     eax, eax
.text:0000E024
.text:0000E024 loc_E024:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+38j
.text:0000E024                 add     esp, 10h
.text:0000E027                 cmp     ebp, esp
.text:0000E029                 call    __RTC_CheckEsp
.text:0000E02E                 mov     esp, ebp
.text:0000E030                 pop     ebp
.text:0000E031                 retn    4
.text:0000E031 ?Release@CCopyCoder@NCompress@@UAGKXZ endp
.text:0000E031
.text:0000E031 _text           ends
.text:0000E031
.text:0000E034 ; ===========================================================================
.text:0000E034
.text:0000E034 ; Segment type: Pure code
.text:0000E034 ; Segment permissions: Read/Execute
.text:0000E034 _text           segment para public 'CODE' use32
.text:0000E034                 assume cs:_text
.text:0000E034                 ;org 0E034h
.text:0000E034 ; COMDAT (pick any)
.text:0000E034                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E034
.text:0000E034 ; =============== S U B R O U T I N E =======================================
.text:0000E034
.text:0000E034 ; Attributes: bp-based frame
.text:0000E034
.text:0000E034 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:0000E034                 public ??0ICompressCoder@@QAE@XZ
.text:0000E034 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+11p
.text:0000E034
.text:0000E034 var_4           = dword ptr -4
.text:0000E034
.text:0000E034                 push    ebp
.text:0000E035                 mov     ebp, esp
.text:0000E037                 push    ecx
.text:0000E038                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E03F                 mov     [ebp+var_4], ecx
.text:0000E042                 mov     ecx, [ebp+var_4]
.text:0000E045                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000E04A                 mov     eax, [ebp+var_4]
.text:0000E04D                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:0000E053                 mov     eax, [ebp+var_4]
.text:0000E056                 add     esp, 4
.text:0000E059                 cmp     ebp, esp
.text:0000E05B                 call    __RTC_CheckEsp
.text:0000E060                 mov     esp, ebp
.text:0000E062                 pop     ebp
.text:0000E063                 retn
.text:0000E063 ??0ICompressCoder@@QAE@XZ endp
.text:0000E063
.text:0000E063 _text           ends
.text:0000E063
.rdata:0000E064 ; ===========================================================================
.rdata:0000E064
.rdata:0000E064 ; Segment type: Pure data
.rdata:0000E064 ; Segment permissions: Read
.rdata:0000E064 _rdata          segment dword public 'DATA' use32
.rdata:0000E064                 assume cs:_rdata
.rdata:0000E064                 ;org 0E064h
.rdata:0000E064 ; COMDAT (pick largest)
.rdata:0000E064                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:0000E068                 public ??_7ICompressCoder@@6B@
.rdata:0000E068 ; const ICompressCoder::`vftable'
.rdata:0000E068 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:0000E068                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:0000E06C                 dd offset __purecall
.rdata:0000E070                 dd offset __purecall
.rdata:0000E074                 dd offset __purecall
.rdata:0000E074 _rdata          ends
.rdata:0000E074
.rdata$r:0000E078 ; ===========================================================================
.rdata$r:0000E078
.rdata$r:0000E078 ; Segment type: Pure data
.rdata$r:0000E078 ; Segment permissions: Read
.rdata$r:0000E078 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E078                 assume cs:_rdata$r
.rdata$r:0000E078                 ;org 0E078h
.rdata$r:0000E078 ; COMDAT (pick any)
.rdata$r:0000E078                 public ??_R4ICompressCoder@@6B@
.rdata$r:0000E078 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:0000E078 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:0000E064o
.rdata$r:0000E079                 db    0
.rdata$r:0000E07A                 db    0
.rdata$r:0000E07B                 db    0
.rdata$r:0000E07C                 db    0
.rdata$r:0000E07D                 db    0
.rdata$r:0000E07E                 db    0
.rdata$r:0000E07F                 db    0
.rdata$r:0000E080                 db    0
.rdata$r:0000E081                 db    0
.rdata$r:0000E082                 db    0
.rdata$r:0000E083                 db    0
.rdata$r:0000E084                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:0000E088                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E088 _rdata$r        ends
.rdata$r:0000E088
.text:0000E08C ; ===========================================================================
.text:0000E08C
.text:0000E08C ; Segment type: Pure code
.text:0000E08C ; Segment permissions: Read/Execute
.text:0000E08C _text           segment para public 'CODE' use32
.text:0000E08C                 assume cs:_text
.text:0000E08C                 ;org 0E08Ch
.text:0000E08C ; COMDAT (pick any)
.text:0000E08C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E08C
.text:0000E08C ; =============== S U B R O U T I N E =======================================
.text:0000E08C
.text:0000E08C ; Attributes: bp-based frame
.text:0000E08C
.text:0000E08C ; public: __thiscall IUnknown::IUnknown(void)
.text:0000E08C                 public ??0IUnknown@@QAE@XZ
.text:0000E08C ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:0000E08C                                         ; ICompressSetInStream::ICompressSetInStream(void)+11p ...
.text:0000E08C
.text:0000E08C var_4           = dword ptr -4
.text:0000E08C
.text:0000E08C                 push    ebp
.text:0000E08D                 mov     ebp, esp
.text:0000E08F                 push    ecx
.text:0000E090                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E097                 mov     [ebp+var_4], ecx
.text:0000E09A                 mov     eax, [ebp+var_4]
.text:0000E09D                 mov     esp, ebp
.text:0000E09F                 pop     ebp
.text:0000E0A0                 retn
.text:0000E0A0 ??0IUnknown@@QAE@XZ endp
.text:0000E0A0
.text:0000E0A0 ; ---------------------------------------------------------------------------
.text:0000E0A1                 align 4
.text:0000E0A1 _text           ends
.text:0000E0A1
.text:0000E0A4 ; ===========================================================================
.text:0000E0A4
.text:0000E0A4 ; Segment type: Pure code
.text:0000E0A4 ; Segment permissions: Read/Execute
.text:0000E0A4 _text           segment para public 'CODE' use32
.text:0000E0A4                 assume cs:_text
.text:0000E0A4                 ;org 0E0A4h
.text:0000E0A4 ; COMDAT (pick any)
.text:0000E0A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E0A4
.text:0000E0A4 ; =============== S U B R O U T I N E =======================================
.text:0000E0A4
.text:0000E0A4 ; Attributes: bp-based frame
.text:0000E0A4
.text:0000E0A4 ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:0000E0A4                 public ??0ICompressSetInStream@@QAE@XZ
.text:0000E0A4 ??0ICompressSetInStream@@QAE@XZ proc near
.text:0000E0A4                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+1Cp
.text:0000E0A4
.text:0000E0A4 var_4           = dword ptr -4
.text:0000E0A4
.text:0000E0A4                 push    ebp
.text:0000E0A5                 mov     ebp, esp
.text:0000E0A7                 push    ecx
.text:0000E0A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E0AF                 mov     [ebp+var_4], ecx
.text:0000E0B2                 mov     ecx, [ebp+var_4]
.text:0000E0B5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000E0BA                 mov     eax, [ebp+var_4]
.text:0000E0BD                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:0000E0C3                 mov     eax, [ebp+var_4]
.text:0000E0C6                 add     esp, 4
.text:0000E0C9                 cmp     ebp, esp
.text:0000E0CB                 call    __RTC_CheckEsp
.text:0000E0D0                 mov     esp, ebp
.text:0000E0D2                 pop     ebp
.text:0000E0D3                 retn
.text:0000E0D3 ??0ICompressSetInStream@@QAE@XZ endp
.text:0000E0D3
.text:0000E0D3 _text           ends
.text:0000E0D3
.rdata:0000E0D4 ; ===========================================================================
.rdata:0000E0D4
.rdata:0000E0D4 ; Segment type: Pure data
.rdata:0000E0D4 ; Segment permissions: Read
.rdata:0000E0D4 _rdata          segment dword public 'DATA' use32
.rdata:0000E0D4                 assume cs:_rdata
.rdata:0000E0D4                 ;org 0E0D4h
.rdata:0000E0D4 ; COMDAT (pick largest)
.rdata:0000E0D4                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:0000E0D8                 public ??_7ICompressSetInStream@@6B@
.rdata:0000E0D8 ; const ICompressSetInStream::`vftable'
.rdata:0000E0D8 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:0000E0D8                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:0000E0DC                 dd offset __purecall
.rdata:0000E0E0                 dd offset __purecall
.rdata:0000E0E4                 dd offset __purecall
.rdata:0000E0E8                 dd offset __purecall
.rdata:0000E0E8 _rdata          ends
.rdata:0000E0E8
.rdata$r:0000E0EC ; ===========================================================================
.rdata$r:0000E0EC
.rdata$r:0000E0EC ; Segment type: Pure data
.rdata$r:0000E0EC ; Segment permissions: Read
.rdata$r:0000E0EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E0EC                 assume cs:_rdata$r
.rdata$r:0000E0EC                 ;org 0E0ECh
.rdata$r:0000E0EC ; COMDAT (pick any)
.rdata$r:0000E0EC                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:0000E0EC ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:0000E0EC ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:0000E0D4o
.rdata$r:0000E0ED                 db    0
.rdata$r:0000E0EE                 db    0
.rdata$r:0000E0EF                 db    0
.rdata$r:0000E0F0                 db    0
.rdata$r:0000E0F1                 db    0
.rdata$r:0000E0F2                 db    0
.rdata$r:0000E0F3                 db    0
.rdata$r:0000E0F4                 db    0
.rdata$r:0000E0F5                 db    0
.rdata$r:0000E0F6                 db    0
.rdata$r:0000E0F7                 db    0
.rdata$r:0000E0F8                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:0000E0FC                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E0FC _rdata$r        ends
.rdata$r:0000E0FC
.text:0000E100 ; ===========================================================================
.text:0000E100
.text:0000E100 ; Segment type: Pure code
.text:0000E100 ; Segment permissions: Read/Execute
.text:0000E100 _text           segment para public 'CODE' use32
.text:0000E100                 assume cs:_text
.text:0000E100                 ;org 0E100h
.text:0000E100 ; COMDAT (pick any)
.text:0000E100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E100
.text:0000E100 ; =============== S U B R O U T I N E =======================================
.text:0000E100
.text:0000E100 ; Attributes: bp-based frame
.text:0000E100
.text:0000E100 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:0000E100                 public ??0ISequentialInStream@@QAE@XZ
.text:0000E100 ??0ISequentialInStream@@QAE@XZ proc near
.text:0000E100                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+27p
.text:0000E100                                         ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)+11p ...
.text:0000E100
.text:0000E100 var_4           = dword ptr -4
.text:0000E100
.text:0000E100                 push    ebp
.text:0000E101                 mov     ebp, esp
.text:0000E103                 push    ecx
.text:0000E104                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E10B                 mov     [ebp+var_4], ecx
.text:0000E10E                 mov     ecx, [ebp+var_4]
.text:0000E111                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000E116                 mov     eax, [ebp+var_4]
.text:0000E119                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:0000E11F                 mov     eax, [ebp+var_4]
.text:0000E122                 add     esp, 4
.text:0000E125                 cmp     ebp, esp
.text:0000E127                 call    __RTC_CheckEsp
.text:0000E12C                 mov     esp, ebp
.text:0000E12E                 pop     ebp
.text:0000E12F                 retn
.text:0000E12F ??0ISequentialInStream@@QAE@XZ endp
.text:0000E12F
.text:0000E12F _text           ends
.text:0000E12F
.rdata:0000E130 ; ===========================================================================
.rdata:0000E130
.rdata:0000E130 ; Segment type: Pure data
.rdata:0000E130 ; Segment permissions: Read
.rdata:0000E130 _rdata          segment dword public 'DATA' use32
.rdata:0000E130                 assume cs:_rdata
.rdata:0000E130                 ;org 0E130h
.rdata:0000E130 ; COMDAT (pick largest)
.rdata:0000E130                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:0000E134                 public ??_7ISequentialInStream@@6B@
.rdata:0000E134 ; const ISequentialInStream::`vftable'
.rdata:0000E134 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:0000E134                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:0000E138                 dd offset __purecall
.rdata:0000E13C                 dd offset __purecall
.rdata:0000E140                 dd offset __purecall
.rdata:0000E140 _rdata          ends
.rdata:0000E140
.rdata$r:0000E144 ; ===========================================================================
.rdata$r:0000E144
.rdata$r:0000E144 ; Segment type: Pure data
.rdata$r:0000E144 ; Segment permissions: Read
.rdata$r:0000E144 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E144                 assume cs:_rdata$r
.rdata$r:0000E144                 ;org 0E144h
.rdata$r:0000E144 ; COMDAT (pick any)
.rdata$r:0000E144                 public ??_R4ISequentialInStream@@6B@
.rdata$r:0000E144 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:0000E144 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:0000E130o
.rdata$r:0000E145                 db    0
.rdata$r:0000E146                 db    0
.rdata$r:0000E147                 db    0
.rdata$r:0000E148                 db    0
.rdata$r:0000E149                 db    0
.rdata$r:0000E14A                 db    0
.rdata$r:0000E14B                 db    0
.rdata$r:0000E14C                 db    0
.rdata$r:0000E14D                 db    0
.rdata$r:0000E14E                 db    0
.rdata$r:0000E14F                 db    0
.rdata$r:0000E150                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:0000E154                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E154 _rdata$r        ends
.rdata$r:0000E154
.text:0000E158 ; ===========================================================================
.text:0000E158
.text:0000E158 ; Segment type: Pure code
.text:0000E158 ; Segment permissions: Read/Execute
.text:0000E158 _text           segment para public 'CODE' use32
.text:0000E158                 assume cs:_text
.text:0000E158                 ;org 0E158h
.text:0000E158 ; COMDAT (pick any)
.text:0000E158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E158
.text:0000E158 ; =============== S U B R O U T I N E =======================================
.text:0000E158
.text:0000E158 ; Attributes: bp-based frame
.text:0000E158
.text:0000E158 ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:0000E158                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:0000E158 ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:0000E158                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+32p
.text:0000E158
.text:0000E158 var_4           = dword ptr -4
.text:0000E158
.text:0000E158                 push    ebp
.text:0000E159                 mov     ebp, esp
.text:0000E15B                 push    ecx
.text:0000E15C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E163                 mov     [ebp+var_4], ecx
.text:0000E166                 mov     ecx, [ebp+var_4]
.text:0000E169                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000E16E                 mov     eax, [ebp+var_4]
.text:0000E171                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:0000E177                 mov     eax, [ebp+var_4]
.text:0000E17A                 add     esp, 4
.text:0000E17D                 cmp     ebp, esp
.text:0000E17F                 call    __RTC_CheckEsp
.text:0000E184                 mov     esp, ebp
.text:0000E186                 pop     ebp
.text:0000E187                 retn
.text:0000E187 ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:0000E187
.text:0000E187 _text           ends
.text:0000E187
.rdata:0000E188 ; ===========================================================================
.rdata:0000E188
.rdata:0000E188 ; Segment type: Pure data
.rdata:0000E188 ; Segment permissions: Read
.rdata:0000E188 _rdata          segment dword public 'DATA' use32
.rdata:0000E188                 assume cs:_rdata
.rdata:0000E188                 ;org 0E188h
.rdata:0000E188 ; COMDAT (pick largest)
.rdata:0000E188                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:0000E18C                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:0000E18C ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:0000E18C ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:0000E18C                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:0000E190                 dd offset __purecall
.rdata:0000E194                 dd offset __purecall
.rdata:0000E198                 dd offset __purecall
.rdata:0000E198 _rdata          ends
.rdata:0000E198
.rdata$r:0000E19C ; ===========================================================================
.rdata$r:0000E19C
.rdata$r:0000E19C ; Segment type: Pure data
.rdata$r:0000E19C ; Segment permissions: Read
.rdata$r:0000E19C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E19C                 assume cs:_rdata$r
.rdata$r:0000E19C                 ;org 0E19Ch
.rdata$r:0000E19C ; COMDAT (pick any)
.rdata$r:0000E19C                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:0000E19C ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:0000E19C ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:0000E19C                                         ; DATA XREF: .rdata:0000E188o
.rdata$r:0000E19D                 db    0
.rdata$r:0000E19E                 db    0
.rdata$r:0000E19F                 db    0
.rdata$r:0000E1A0                 db    0
.rdata$r:0000E1A1                 db    0
.rdata$r:0000E1A2                 db    0
.rdata$r:0000E1A3                 db    0
.rdata$r:0000E1A4                 db    0
.rdata$r:0000E1A5                 db    0
.rdata$r:0000E1A6                 db    0
.rdata$r:0000E1A7                 db    0
.rdata$r:0000E1A8                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:0000E1AC                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E1AC _rdata$r        ends
.rdata$r:0000E1AC
.text:0000E1B0 ; ===========================================================================
.text:0000E1B0
.text:0000E1B0 ; Segment type: Pure code
.text:0000E1B0 ; Segment permissions: Read/Execute
.text:0000E1B0 _text           segment para public 'CODE' use32
.text:0000E1B0                 assume cs:_text
.text:0000E1B0                 ;org 0E1B0h
.text:0000E1B0 ; COMDAT (pick any)
.text:0000E1B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E1B0
.text:0000E1B0 ; =============== S U B R O U T I N E =======================================
.text:0000E1B0
.text:0000E1B0 ; Attributes: bp-based frame
.text:0000E1B0
.text:0000E1B0 ; public: void * __thiscall NCompress::CCopyCoder::`scalar deleting destructor'(unsigned int)
.text:0000E1B0                 public ??_GCCopyCoder@NCompress@@QAEPAXI@Z
.text:0000E1B0 ??_GCCopyCoder@NCompress@@QAEPAXI@Z proc near
.text:0000E1B0                                         ; CODE XREF: NCompress::CCopyCoder::Release(void)+51p
.text:0000E1B0
.text:0000E1B0 var_4           = dword ptr -4
.text:0000E1B0 arg_0           = dword ptr  8
.text:0000E1B0
.text:0000E1B0                 push    ebp
.text:0000E1B1                 mov     ebp, esp
.text:0000E1B3                 push    ecx
.text:0000E1B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E1BB                 mov     [ebp+var_4], ecx
.text:0000E1BE                 mov     ecx, [ebp+var_4] ; this
.text:0000E1C1                 call    ??1CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::~CCopyCoder(void)
.text:0000E1C6                 mov     eax, [ebp+arg_0]
.text:0000E1C9                 and     eax, 1
.text:0000E1CC                 jz      short loc_E1DA
.text:0000E1CE                 mov     ecx, [ebp+var_4]
.text:0000E1D1                 push    ecx             ; void *
.text:0000E1D2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000E1D7                 add     esp, 4
.text:0000E1DA
.text:0000E1DA loc_E1DA:                               ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+1Cj
.text:0000E1DA                 mov     eax, [ebp+var_4]
.text:0000E1DD                 add     esp, 4
.text:0000E1E0                 cmp     ebp, esp
.text:0000E1E2                 call    __RTC_CheckEsp
.text:0000E1E7                 mov     esp, ebp
.text:0000E1E9                 pop     ebp
.text:0000E1EA                 retn    4
.text:0000E1EA ??_GCCopyCoder@NCompress@@QAEPAXI@Z endp
.text:0000E1EA
.text:0000E1EA ; ---------------------------------------------------------------------------
.text:0000E1ED                 align 10h
.text:0000E1ED _text           ends
.text:0000E1ED
.text:0000E1F0 ; ===========================================================================
.text:0000E1F0
.text:0000E1F0 ; Segment type: Pure code
.text:0000E1F0 ; Segment permissions: Read/Execute
.text:0000E1F0 _text           segment para public 'CODE' use32
.text:0000E1F0                 assume cs:_text
.text:0000E1F0                 ;org 0E1F0h
.text:0000E1F0 ; COMDAT (pick any)
.text:0000E1F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E1F0
.text:0000E1F0 ; =============== S U B R O U T I N E =======================================
.text:0000E1F0
.text:0000E1F0 ; Attributes: bp-based frame
.text:0000E1F0
.text:0000E1F0 ; public: __thiscall CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:0000E1F0                 public ??0CLimitedSequentialInStream@@QAE@XZ
.text:0000E1F0 ??0CLimitedSequentialInStream@@QAE@XZ proc near
.text:0000E1F0                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1FEp
.text:0000E1F0
.text:0000E1F0 var_4           = dword ptr -4
.text:0000E1F0
.text:0000E1F0                 push    ebp
.text:0000E1F1                 mov     ebp, esp
.text:0000E1F3                 push    ecx
.text:0000E1F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E1FB                 mov     [ebp+var_4], ecx
.text:0000E1FE                 mov     ecx, [ebp+var_4] ; this
.text:0000E201                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:0000E206                 mov     ecx, [ebp+var_4]
.text:0000E209                 add     ecx, 4          ; this
.text:0000E20C                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000E211                 mov     eax, [ebp+var_4]
.text:0000E214                 mov     dword ptr [eax], offset ??_7CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`vftable'
.text:0000E21A                 mov     ecx, [ebp+var_4]
.text:0000E21D                 add     ecx, 8
.text:0000E220                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000E225                 mov     eax, [ebp+var_4]
.text:0000E228                 add     esp, 4
.text:0000E22B                 cmp     ebp, esp
.text:0000E22D                 call    __RTC_CheckEsp
.text:0000E232                 mov     esp, ebp
.text:0000E234                 pop     ebp
.text:0000E235                 retn
.text:0000E235 ??0CLimitedSequentialInStream@@QAE@XZ endp
.text:0000E235
.text:0000E235 ; ---------------------------------------------------------------------------
.text:0000E236                 align 4
.text:0000E236 _text           ends
.text:0000E236
.rdata:0000E238 ; ===========================================================================
.rdata:0000E238
.rdata:0000E238 ; Segment type: Pure data
.rdata:0000E238 ; Segment permissions: Read
.rdata:0000E238 _rdata          segment dword public 'DATA' use32
.rdata:0000E238                 assume cs:_rdata
.rdata:0000E238                 ;org 0E238h
.rdata:0000E238 ; COMDAT (pick largest)
.rdata:0000E238                 dd offset ??_R4CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata:0000E23C                 public ??_7CLimitedSequentialInStream@@6B@
.rdata:0000E23C ; const CLimitedSequentialInStream::`vftable'
.rdata:0000E23C ??_7CLimitedSequentialInStream@@6B@ dd offset ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000E23C                                         ; DATA XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+24o
.rdata:0000E23C                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)
.rdata:0000E240                 dd offset ?AddRef@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::AddRef(void)
.rdata:0000E244                 dd offset ?Release@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::Release(void)
.rdata:0000E248                 dd offset ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z ; CLimitedSequentialInStream::Read(void *,uint,uint *)
.rdata:0000E248 _rdata          ends
.rdata:0000E248
.rdata$r:0000E24C ; ===========================================================================
.rdata$r:0000E24C
.rdata$r:0000E24C ; Segment type: Pure data
.rdata$r:0000E24C ; Segment permissions: Read
.rdata$r:0000E24C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E24C                 assume cs:_rdata$r
.rdata$r:0000E24C                 ;org 0E24Ch
.rdata$r:0000E24C ; COMDAT (pick any)
.rdata$r:0000E24C                 public ??_R4CLimitedSequentialInStream@@6B@
.rdata$r:0000E24C ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata$r:0000E24C ??_R4CLimitedSequentialInStream@@6B@ db    0 ; DATA XREF: .rdata:0000E238o
.rdata$r:0000E24D                 db    0
.rdata$r:0000E24E                 db    0
.rdata$r:0000E24F                 db    0
.rdata$r:0000E250                 db    0
.rdata$r:0000E251                 db    0
.rdata$r:0000E252                 db    0
.rdata$r:0000E253                 db    0
.rdata$r:0000E254                 db    0
.rdata$r:0000E255                 db    0
.rdata$r:0000E256                 db    0
.rdata$r:0000E257                 db    0
.rdata$r:0000E258                 dd offset ??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:0000E25C                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E25C _rdata$r        ends
.rdata$r:0000E25C
.data:0000E260 ; ===========================================================================
.data:0000E260
.data:0000E260 ; Segment type: Pure data
.data:0000E260 ; Segment permissions: Read/Write
.data:0000E260 _data           segment dword public 'DATA' use32
.data:0000E260                 assume cs:_data
.data:0000E260                 ;org 0E260h
.data:0000E260 ; COMDAT (pick any)
.data:0000E260                 public ??_R0?AVCLimitedSequentialInStream@@@8
.data:0000E260 ; class CLimitedSequentialInStream `RTTI Type Descriptor'
.data:0000E260 ??_R0?AVCLimitedSequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000E260                                         ; DATA XREF: .rdata$r:0000E258o
.data:0000E260                                         ; .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000E260                                         ; const type_info::`vftable'
.data:0000E264                 align 8
.data:0000E268 a_?avclimitedse db '.?AVCLimitedSequentialInStream@@',0
.data:0000E289                 align 4
.data:0000E289 _data           ends
.data:0000E289
.rdata$r:0000E28C ; ===========================================================================
.rdata$r:0000E28C
.rdata$r:0000E28C ; Segment type: Pure data
.rdata$r:0000E28C ; Segment permissions: Read
.rdata$r:0000E28C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E28C                 assume cs:_rdata$r
.rdata$r:0000E28C                 ;org 0E28Ch
.rdata$r:0000E28C ; COMDAT (pick any)
.rdata$r:0000E28C                 public ??_R3CLimitedSequentialInStream@@8
.rdata$r:0000E28C ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E28C ??_R3CLimitedSequentialInStream@@8 db    0 ; DATA XREF: .rdata$r:0000E25Co
.rdata$r:0000E28C                                         ; .rdata$r:0000E2C8o
.rdata$r:0000E28D                 db    0
.rdata$r:0000E28E                 db    0
.rdata$r:0000E28F                 db    0
.rdata$r:0000E290                 db    1
.rdata$r:0000E291                 db    0
.rdata$r:0000E292                 db    0
.rdata$r:0000E293                 db    0
.rdata$r:0000E294                 db    4
.rdata$r:0000E295                 db    0
.rdata$r:0000E296                 db    0
.rdata$r:0000E297                 db    0
.rdata$r:0000E298                 dd offset ??_R2CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:0000E298 _rdata$r        ends
.rdata$r:0000E298
.rdata$r:0000E29C ; ===========================================================================
.rdata$r:0000E29C
.rdata$r:0000E29C ; Segment type: Pure data
.rdata$r:0000E29C ; Segment permissions: Read
.rdata$r:0000E29C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E29C                 assume cs:_rdata$r
.rdata$r:0000E29C                 ;org 0E29Ch
.rdata$r:0000E29C ; COMDAT (pick any)
.rdata$r:0000E29C                 public ??_R2CLimitedSequentialInStream@@8
.rdata$r:0000E29C ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:0000E29C ??_R2CLimitedSequentialInStream@@8 dd offset ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:0000E29C                                         ; DATA XREF: .rdata$r:0000E298o
.rdata$r:0000E29C                                         ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E2A0                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E2A4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E2A8                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000E2AC                 db    0
.rdata$r:0000E2AD                 align 10h
.rdata$r:0000E2AD _rdata$r        ends
.rdata$r:0000E2AD
.rdata$r:0000E2B0 ; ===========================================================================
.rdata$r:0000E2B0
.rdata$r:0000E2B0 ; Segment type: Pure data
.rdata$r:0000E2B0 ; Segment permissions: Read
.rdata$r:0000E2B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E2B0                 assume cs:_rdata$r
.rdata$r:0000E2B0                 ;org 0E2B0h
.rdata$r:0000E2B0 ; COMDAT (pick any)
.rdata$r:0000E2B0                 public ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:0000E2B0 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000E2B0 ??_R1A@?0A@EA@CLimitedSequentialInStream@@8 dd offset ??_R0?AVCLimitedSequentialInStream@@@8
.rdata$r:0000E2B0                                         ; DATA XREF: .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Array'o
.rdata$r:0000E2B0                                         ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:0000E2B4                 db    3
.rdata$r:0000E2B5                 db    0
.rdata$r:0000E2B6                 db    0
.rdata$r:0000E2B7                 db    0
.rdata$r:0000E2B8                 db    0
.rdata$r:0000E2B9                 db    0
.rdata$r:0000E2BA                 db    0
.rdata$r:0000E2BB                 db    0
.rdata$r:0000E2BC                 db 0FFh
.rdata$r:0000E2BD                 db 0FFh
.rdata$r:0000E2BE                 db 0FFh
.rdata$r:0000E2BF                 db 0FFh
.rdata$r:0000E2C0                 db    0
.rdata$r:0000E2C1                 db    0
.rdata$r:0000E2C2                 db    0
.rdata$r:0000E2C3                 db    0
.rdata$r:0000E2C4                 db  40h ; @
.rdata$r:0000E2C5                 db    0
.rdata$r:0000E2C6                 db    0
.rdata$r:0000E2C7                 db    0
.rdata$r:0000E2C8                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E2C8 _rdata$r        ends
.rdata$r:0000E2C8
.rdata$r:0000E2CC ; ===========================================================================
.rdata$r:0000E2CC
.rdata$r:0000E2CC ; Segment type: Pure data
.rdata$r:0000E2CC ; Segment permissions: Read
.rdata$r:0000E2CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E2CC                 assume cs:_rdata$r
.rdata$r:0000E2CC                 ;org 0E2CCh
.rdata$r:0000E2CC ; COMDAT (pick any)
.rdata$r:0000E2CC                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:0000E2CC ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000E2CC ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000E2CC                                         ; DATA XREF: .rdata$r:0000E2A8o
.rdata$r:0000E2CC                                         ; .rdata$r:0000E510o ...
.rdata$r:0000E2CC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000E2D0                 db    0
.rdata$r:0000E2D1                 db    0
.rdata$r:0000E2D2                 db    0
.rdata$r:0000E2D3                 db    0
.rdata$r:0000E2D4                 db    4
.rdata$r:0000E2D5                 db    0
.rdata$r:0000E2D6                 db    0
.rdata$r:0000E2D7                 db    0
.rdata$r:0000E2D8                 db 0FFh
.rdata$r:0000E2D9                 db 0FFh
.rdata$r:0000E2DA                 db 0FFh
.rdata$r:0000E2DB                 db 0FFh
.rdata$r:0000E2DC                 db    0
.rdata$r:0000E2DD                 db    0
.rdata$r:0000E2DE                 db    0
.rdata$r:0000E2DF                 db    0
.rdata$r:0000E2E0                 db  40h ; @
.rdata$r:0000E2E1                 db    0
.rdata$r:0000E2E2                 db    0
.rdata$r:0000E2E3                 db    0
.rdata$r:0000E2E4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E2E4 _rdata$r        ends
.rdata$r:0000E2E4
.text:0000E2E8 ; ===========================================================================
.text:0000E2E8
.text:0000E2E8 ; Segment type: Pure code
.text:0000E2E8 ; Segment permissions: Read/Execute
.text:0000E2E8 _text           segment para public 'CODE' use32
.text:0000E2E8                 assume cs:_text
.text:0000E2E8                 ;org 0E2E8h
.text:0000E2E8 ; COMDAT (pick any)
.text:0000E2E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E2E8
.text:0000E2E8 ; =============== S U B R O U T I N E =======================================
.text:0000E2E8
.text:0000E2E8 ; Attributes: bp-based frame
.text:0000E2E8
.text:0000E2E8 ; __int32 __stdcall CLimitedSequentialInStream::QueryInterface(CLimitedSequentialInStream *this, const struct _GUID *Buf1, void **)
.text:0000E2E8                 public ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.text:0000E2E8 ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000E2E8                                         ; DATA XREF: .rdata:const CLimitedSequentialInStream::`vftable'o
.text:0000E2E8
.text:0000E2E8 this            = dword ptr  8
.text:0000E2E8 Buf1            = dword ptr  0Ch
.text:0000E2E8 arg_8           = dword ptr  10h
.text:0000E2E8
.text:0000E2E8                 push    ebp
.text:0000E2E9                 mov     ebp, esp
.text:0000E2EB                 mov     eax, [ebp+arg_8]
.text:0000E2EE                 mov     dword ptr [eax], 0
.text:0000E2F4                 push    offset _IID_IUnknown ; Buf2
.text:0000E2F9                 mov     ecx, [ebp+Buf1]
.text:0000E2FC                 push    ecx             ; Buf1
.text:0000E2FD                 call    ___@8           ; __(x,x)
.text:0000E302                 test    eax, eax
.text:0000E304                 jz      short loc_E310
.text:0000E306                 mov     edx, [ebp+arg_8]
.text:0000E309                 mov     eax, [ebp+this]
.text:0000E30C                 mov     [edx], eax
.text:0000E30E                 jmp     short loc_E333
.text:0000E310 ; ---------------------------------------------------------------------------
.text:0000E310
.text:0000E310 loc_E310:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:0000E310                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000E315                 mov     ecx, [ebp+Buf1]
.text:0000E318                 push    ecx             ; Buf1
.text:0000E319                 call    ___@8           ; __(x,x)
.text:0000E31E                 test    eax, eax
.text:0000E320                 jz      short loc_E32C
.text:0000E322                 mov     edx, [ebp+arg_8]
.text:0000E325                 mov     eax, [ebp+this]
.text:0000E328                 mov     [edx], eax
.text:0000E32A                 jmp     short loc_E333
.text:0000E32C ; ---------------------------------------------------------------------------
.text:0000E32C
.text:0000E32C loc_E32C:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+38j
.text:0000E32C                 mov     eax, 80004002h
.text:0000E331                 jmp     short loc_E344
.text:0000E333 ; ---------------------------------------------------------------------------
.text:0000E333
.text:0000E333 loc_E333:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000E333                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+42j
.text:0000E333                 mov     ecx, [ebp+this]
.text:0000E336                 mov     edx, [ecx+4]
.text:0000E339                 add     edx, 1
.text:0000E33C                 mov     eax, [ebp+this]
.text:0000E33F                 mov     [eax+4], edx
.text:0000E342                 xor     eax, eax
.text:0000E344
.text:0000E344 loc_E344:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+49j
.text:0000E344                 cmp     ebp, esp
.text:0000E346                 call    __RTC_CheckEsp
.text:0000E34B                 pop     ebp
.text:0000E34C                 retn    0Ch
.text:0000E34C ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000E34C
.text:0000E34C ; ---------------------------------------------------------------------------
.text:0000E34F                 align 10h
.text:0000E34F _text           ends
.text:0000E34F
.text:0000E350 ; ===========================================================================
.text:0000E350
.text:0000E350 ; Segment type: Pure code
.text:0000E350 ; Segment permissions: Read/Execute
.text:0000E350 _text           segment para public 'CODE' use32
.text:0000E350                 assume cs:_text
.text:0000E350                 ;org 0E350h
.text:0000E350 ; COMDAT (pick any)
.text:0000E350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E350
.text:0000E350 ; =============== S U B R O U T I N E =======================================
.text:0000E350
.text:0000E350 ; Attributes: bp-based frame
.text:0000E350
.text:0000E350 ; unsigned __int32 __stdcall CLimitedSequentialInStream::AddRef(CLimitedSequentialInStream *this)
.text:0000E350                 public ?AddRef@CLimitedSequentialInStream@@UAGKXZ
.text:0000E350 ?AddRef@CLimitedSequentialInStream@@UAGKXZ proc near
.text:0000E350                                         ; DATA XREF: .rdata:0000E240o
.text:0000E350
.text:0000E350 var_4           = dword ptr -4
.text:0000E350 this            = dword ptr  8
.text:0000E350
.text:0000E350                 push    ebp
.text:0000E351                 mov     ebp, esp
.text:0000E353                 push    ecx
.text:0000E354                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E35B                 mov     eax, [ebp+this]
.text:0000E35E                 mov     ecx, [eax+4]
.text:0000E361                 add     ecx, 1
.text:0000E364                 mov     [ebp+var_4], ecx
.text:0000E367                 mov     edx, [ebp+this]
.text:0000E36A                 mov     eax, [ebp+var_4]
.text:0000E36D                 mov     [edx+4], eax
.text:0000E370                 mov     eax, [ebp+var_4]
.text:0000E373                 mov     esp, ebp
.text:0000E375                 pop     ebp
.text:0000E376                 retn    4
.text:0000E376 ?AddRef@CLimitedSequentialInStream@@UAGKXZ endp
.text:0000E376
.text:0000E376 ; ---------------------------------------------------------------------------
.text:0000E379                 align 4
.text:0000E379 _text           ends
.text:0000E379
.text:0000E37C ; ===========================================================================
.text:0000E37C
.text:0000E37C ; Segment type: Pure code
.text:0000E37C ; Segment permissions: Read/Execute
.text:0000E37C _text           segment para public 'CODE' use32
.text:0000E37C                 assume cs:_text
.text:0000E37C                 ;org 0E37Ch
.text:0000E37C ; COMDAT (pick any)
.text:0000E37C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E37C
.text:0000E37C ; =============== S U B R O U T I N E =======================================
.text:0000E37C
.text:0000E37C ; Attributes: bp-based frame
.text:0000E37C
.text:0000E37C ; unsigned __int32 __stdcall CLimitedSequentialInStream::Release(CLimitedSequentialInStream *this)
.text:0000E37C                 public ?Release@CLimitedSequentialInStream@@UAGKXZ
.text:0000E37C ?Release@CLimitedSequentialInStream@@UAGKXZ proc near
.text:0000E37C                                         ; DATA XREF: .rdata:0000E244o
.text:0000E37C
.text:0000E37C var_10          = dword ptr -10h
.text:0000E37C var_C           = dword ptr -0Ch
.text:0000E37C var_8           = dword ptr -8
.text:0000E37C var_4           = dword ptr -4
.text:0000E37C this            = dword ptr  8
.text:0000E37C
.text:0000E37C                 push    ebp
.text:0000E37D                 mov     ebp, esp
.text:0000E37F                 sub     esp, 10h
.text:0000E382                 mov     eax, 0CCCCCCCCh
.text:0000E387                 mov     [ebp+var_10], eax
.text:0000E38A                 mov     [ebp+var_C], eax
.text:0000E38D                 mov     [ebp+var_8], eax
.text:0000E390                 mov     [ebp+var_4], eax
.text:0000E393                 mov     eax, [ebp+this]
.text:0000E396                 mov     ecx, [eax+4]
.text:0000E399                 sub     ecx, 1
.text:0000E39C                 mov     [ebp+var_C], ecx
.text:0000E39F                 mov     edx, [ebp+this]
.text:0000E3A2                 mov     eax, [ebp+var_C]
.text:0000E3A5                 mov     [edx+4], eax
.text:0000E3A8                 cmp     [ebp+var_C], 0
.text:0000E3AC                 jz      short loc_E3B6
.text:0000E3AE                 mov     ecx, [ebp+this]
.text:0000E3B1                 mov     eax, [ecx+4]
.text:0000E3B4                 jmp     short loc_E3E0
.text:0000E3B6 ; ---------------------------------------------------------------------------
.text:0000E3B6
.text:0000E3B6 loc_E3B6:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+30j
.text:0000E3B6                 mov     edx, [ebp+this]
.text:0000E3B9                 mov     [ebp+var_8], edx
.text:0000E3BC                 mov     eax, [ebp+var_8]
.text:0000E3BF                 mov     [ebp+var_4], eax
.text:0000E3C2                 cmp     [ebp+var_4], 0
.text:0000E3C6                 jz      short loc_E3D7
.text:0000E3C8                 push    1
.text:0000E3CA                 mov     ecx, [ebp+var_4]
.text:0000E3CD                 call    ??_GCLimitedSequentialInStream@@QAEPAXI@Z ; CLimitedSequentialInStream::`scalar deleting destructor'(uint)
.text:0000E3D2                 mov     [ebp+var_10], eax
.text:0000E3D5                 jmp     short loc_E3DE
.text:0000E3D7 ; ---------------------------------------------------------------------------
.text:0000E3D7
.text:0000E3D7 loc_E3D7:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+4Aj
.text:0000E3D7                 mov     [ebp+var_10], 0
.text:0000E3DE
.text:0000E3DE loc_E3DE:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+59j
.text:0000E3DE                 xor     eax, eax
.text:0000E3E0
.text:0000E3E0 loc_E3E0:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+38j
.text:0000E3E0                 add     esp, 10h
.text:0000E3E3                 cmp     ebp, esp
.text:0000E3E5                 call    __RTC_CheckEsp
.text:0000E3EA                 mov     esp, ebp
.text:0000E3EC                 pop     ebp
.text:0000E3ED                 retn    4
.text:0000E3ED ?Release@CLimitedSequentialInStream@@UAGKXZ endp
.text:0000E3ED
.text:0000E3ED _text           ends
.text:0000E3ED
.text:0000E3F0 ; ===========================================================================
.text:0000E3F0
.text:0000E3F0 ; Segment type: Pure code
.text:0000E3F0 ; Segment permissions: Read/Execute
.text:0000E3F0 _text           segment para public 'CODE' use32
.text:0000E3F0                 assume cs:_text
.text:0000E3F0                 ;org 0E3F0h
.text:0000E3F0 ; COMDAT (pick any)
.text:0000E3F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E3F0
.text:0000E3F0 ; =============== S U B R O U T I N E =======================================
.text:0000E3F0
.text:0000E3F0 ; Attributes: bp-based frame
.text:0000E3F0
.text:0000E3F0 ; public: void * __thiscall CLimitedSequentialInStream::`scalar deleting destructor'(unsigned int)
.text:0000E3F0                 public ??_GCLimitedSequentialInStream@@QAEPAXI@Z
.text:0000E3F0 ??_GCLimitedSequentialInStream@@QAEPAXI@Z proc near
.text:0000E3F0                                         ; CODE XREF: CLimitedSequentialInStream::Release(void)+51p
.text:0000E3F0
.text:0000E3F0 var_4           = dword ptr -4
.text:0000E3F0 arg_0           = dword ptr  8
.text:0000E3F0
.text:0000E3F0                 push    ebp
.text:0000E3F1                 mov     ebp, esp
.text:0000E3F3                 push    ecx
.text:0000E3F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E3FB                 mov     [ebp+var_4], ecx
.text:0000E3FE                 mov     ecx, [ebp+var_4] ; this
.text:0000E401                 call    ??1CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::~CLimitedSequentialInStream(void)
.text:0000E406                 mov     eax, [ebp+arg_0]
.text:0000E409                 and     eax, 1
.text:0000E40C                 jz      short loc_E41A
.text:0000E40E                 mov     ecx, [ebp+var_4]
.text:0000E411                 push    ecx             ; void *
.text:0000E412                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000E417                 add     esp, 4
.text:0000E41A
.text:0000E41A loc_E41A:                               ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+1Cj
.text:0000E41A                 mov     eax, [ebp+var_4]
.text:0000E41D                 add     esp, 4
.text:0000E420                 cmp     ebp, esp
.text:0000E422                 call    __RTC_CheckEsp
.text:0000E427                 mov     esp, ebp
.text:0000E429                 pop     ebp
.text:0000E42A                 retn    4
.text:0000E42A ??_GCLimitedSequentialInStream@@QAEPAXI@Z endp
.text:0000E42A
.text:0000E42A ; ---------------------------------------------------------------------------
.text:0000E42D                 align 10h
.text:0000E42D _text           ends
.text:0000E42D
.text:0000E430 ; ===========================================================================
.text:0000E430
.text:0000E430 ; Segment type: Pure code
.text:0000E430 ; Segment permissions: Read/Execute
.text:0000E430 _text           segment para public 'CODE' use32
.text:0000E430                 assume cs:_text
.text:0000E430                 ;org 0E430h
.text:0000E430 ; COMDAT (pick any)
.text:0000E430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E430
.text:0000E430 ; =============== S U B R O U T I N E =======================================
.text:0000E430
.text:0000E430 ; Attributes: bp-based frame
.text:0000E430
.text:0000E430 ; _DWORD __thiscall CLimitedSequentialInStream::~CLimitedSequentialInStream(CLimitedSequentialInStream *__hidden this)
.text:0000E430                 public ??1CLimitedSequentialInStream@@QAE@XZ
.text:0000E430 ??1CLimitedSequentialInStream@@QAE@XZ proc near
.text:0000E430                                         ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+11p
.text:0000E430
.text:0000E430 var_4           = dword ptr -4
.text:0000E430
.text:0000E430                 push    ebp
.text:0000E431                 mov     ebp, esp
.text:0000E433                 push    ecx
.text:0000E434                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E43B                 mov     [ebp+var_4], ecx
.text:0000E43E                 mov     ecx, [ebp+var_4]
.text:0000E441                 add     ecx, 8
.text:0000E444                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000E449                 add     esp, 4
.text:0000E44C                 cmp     ebp, esp
.text:0000E44E                 call    __RTC_CheckEsp
.text:0000E453                 mov     esp, ebp
.text:0000E455                 pop     ebp
.text:0000E456                 retn
.text:0000E456 ??1CLimitedSequentialInStream@@QAE@XZ endp
.text:0000E456
.text:0000E456 ; ---------------------------------------------------------------------------
.text:0000E457                 align 4
.text:0000E457 _text           ends
.text:0000E457
.text:0000E458 ; ===========================================================================
.text:0000E458
.text:0000E458 ; Segment type: Pure code
.text:0000E458 ; Segment permissions: Read/Execute
.text:0000E458 _text           segment para public 'CODE' use32
.text:0000E458                 assume cs:_text
.text:0000E458                 ;org 0E458h
.text:0000E458 ; COMDAT (pick any)
.text:0000E458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E458
.text:0000E458 ; =============== S U B R O U T I N E =======================================
.text:0000E458
.text:0000E458 ; Attributes: bp-based frame
.text:0000E458
.text:0000E458 ; public: __thiscall CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)
.text:0000E458                 public ??0CLimitedSequentialOutStream@@QAE@XZ
.text:0000E458 ??0CLimitedSequentialOutStream@@QAE@XZ proc near
.text:0000E458                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+299p
.text:0000E458
.text:0000E458 var_4           = dword ptr -4
.text:0000E458
.text:0000E458                 push    ebp
.text:0000E459                 mov     ebp, esp
.text:0000E45B                 push    ecx
.text:0000E45C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E463                 mov     [ebp+var_4], ecx
.text:0000E466                 mov     ecx, [ebp+var_4] ; this
.text:0000E469                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:0000E46E                 mov     ecx, [ebp+var_4]
.text:0000E471                 add     ecx, 4          ; this
.text:0000E474                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000E479                 mov     eax, [ebp+var_4]
.text:0000E47C                 mov     dword ptr [eax], offset ??_7CLimitedSequentialOutStream@@6B@ ; const CLimitedSequentialOutStream::`vftable'
.text:0000E482                 mov     ecx, [ebp+var_4]
.text:0000E485                 add     ecx, 8
.text:0000E488                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:0000E48D                 mov     eax, [ebp+var_4]
.text:0000E490                 add     esp, 4
.text:0000E493                 cmp     ebp, esp
.text:0000E495                 call    __RTC_CheckEsp
.text:0000E49A                 mov     esp, ebp
.text:0000E49C                 pop     ebp
.text:0000E49D                 retn
.text:0000E49D ??0CLimitedSequentialOutStream@@QAE@XZ endp
.text:0000E49D
.text:0000E49D ; ---------------------------------------------------------------------------
.text:0000E49E                 align 10h
.text:0000E49E _text           ends
.text:0000E49E
.rdata:0000E4A0 ; ===========================================================================
.rdata:0000E4A0
.rdata:0000E4A0 ; Segment type: Pure data
.rdata:0000E4A0 ; Segment permissions: Read
.rdata:0000E4A0 _rdata          segment dword public 'DATA' use32
.rdata:0000E4A0                 assume cs:_rdata
.rdata:0000E4A0                 ;org 0E4A0h
.rdata:0000E4A0 ; COMDAT (pick largest)
.rdata:0000E4A0                 dd offset ??_R4CLimitedSequentialOutStream@@6B@ ; const CLimitedSequentialOutStream::`RTTI Complete Object Locator'
.rdata:0000E4A4                 public ??_7CLimitedSequentialOutStream@@6B@
.rdata:0000E4A4 ; const CLimitedSequentialOutStream::`vftable'
.rdata:0000E4A4 ??_7CLimitedSequentialOutStream@@6B@ dd offset ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000E4A4                                         ; DATA XREF: CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)+24o
.rdata:0000E4A4                                         ; CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)
.rdata:0000E4A8                 dd offset ?AddRef@CLimitedSequentialOutStream@@UAGKXZ ; CLimitedSequentialOutStream::AddRef(void)
.rdata:0000E4AC                 dd offset ?Release@CLimitedSequentialOutStream@@UAGKXZ ; CLimitedSequentialOutStream::Release(void)
.rdata:0000E4B0                 dd offset ?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z ; CLimitedSequentialOutStream::Write(void const *,uint,uint *)
.rdata:0000E4B0 _rdata          ends
.rdata:0000E4B0
.rdata$r:0000E4B4 ; ===========================================================================
.rdata$r:0000E4B4
.rdata$r:0000E4B4 ; Segment type: Pure data
.rdata$r:0000E4B4 ; Segment permissions: Read
.rdata$r:0000E4B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E4B4                 assume cs:_rdata$r
.rdata$r:0000E4B4                 ;org 0E4B4h
.rdata$r:0000E4B4 ; COMDAT (pick any)
.rdata$r:0000E4B4                 public ??_R4CLimitedSequentialOutStream@@6B@
.rdata$r:0000E4B4 ; const CLimitedSequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:0000E4B4 ??_R4CLimitedSequentialOutStream@@6B@ db    0
.rdata$r:0000E4B4                                         ; DATA XREF: .rdata:0000E4A0o
.rdata$r:0000E4B5                 db    0
.rdata$r:0000E4B6                 db    0
.rdata$r:0000E4B7                 db    0
.rdata$r:0000E4B8                 db    0
.rdata$r:0000E4B9                 db    0
.rdata$r:0000E4BA                 db    0
.rdata$r:0000E4BB                 db    0
.rdata$r:0000E4BC                 db    0
.rdata$r:0000E4BD                 db    0
.rdata$r:0000E4BE                 db    0
.rdata$r:0000E4BF                 db    0
.rdata$r:0000E4C0                 dd offset ??_R0?AVCLimitedSequentialOutStream@@@8 ; CLimitedSequentialOutStream `RTTI Type Descriptor'
.rdata$r:0000E4C4                 dd offset ??_R3CLimitedSequentialOutStream@@8 ; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E4C4 _rdata$r        ends
.rdata$r:0000E4C4
.data:0000E4C8 ; ===========================================================================
.data:0000E4C8
.data:0000E4C8 ; Segment type: Pure data
.data:0000E4C8 ; Segment permissions: Read/Write
.data:0000E4C8 _data           segment dword public 'DATA' use32
.data:0000E4C8                 assume cs:_data
.data:0000E4C8                 ;org 0E4C8h
.data:0000E4C8 ; COMDAT (pick any)
.data:0000E4C8                 public ??_R0?AVCLimitedSequentialOutStream@@@8
.data:0000E4C8 ; class CLimitedSequentialOutStream `RTTI Type Descriptor'
.data:0000E4C8 ??_R0?AVCLimitedSequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:0000E4C8                                         ; DATA XREF: .rdata$r:0000E4C0o
.data:0000E4C8                                         ; .rdata$r:CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000E4C8                                         ; const type_info::`vftable'
.data:0000E4CC                 align 10h
.data:0000E4D0 a_?avclimited_0 db '.?AVCLimitedSequentialOutStream@@',0
.data:0000E4F2                 align 4
.data:0000E4F2 _data           ends
.data:0000E4F2
.rdata$r:0000E4F4 ; ===========================================================================
.rdata$r:0000E4F4
.rdata$r:0000E4F4 ; Segment type: Pure data
.rdata$r:0000E4F4 ; Segment permissions: Read
.rdata$r:0000E4F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E4F4                 assume cs:_rdata$r
.rdata$r:0000E4F4                 ;org 0E4F4h
.rdata$r:0000E4F4 ; COMDAT (pick any)
.rdata$r:0000E4F4                 public ??_R3CLimitedSequentialOutStream@@8
.rdata$r:0000E4F4 ; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E4F4 ??_R3CLimitedSequentialOutStream@@8 db    0
.rdata$r:0000E4F4                                         ; DATA XREF: .rdata$r:0000E4C4o
.rdata$r:0000E4F4                                         ; .rdata$r:0000E530o
.rdata$r:0000E4F5                 db    0
.rdata$r:0000E4F6                 db    0
.rdata$r:0000E4F7                 db    0
.rdata$r:0000E4F8                 db    1
.rdata$r:0000E4F9                 db    0
.rdata$r:0000E4FA                 db    0
.rdata$r:0000E4FB                 db    0
.rdata$r:0000E4FC                 db    4
.rdata$r:0000E4FD                 db    0
.rdata$r:0000E4FE                 db    0
.rdata$r:0000E4FF                 db    0
.rdata$r:0000E500                 dd offset ??_R2CLimitedSequentialOutStream@@8 ; CLimitedSequentialOutStream::`RTTI Base Class Array'
.rdata$r:0000E500 _rdata$r        ends
.rdata$r:0000E500
.rdata$r:0000E504 ; ===========================================================================
.rdata$r:0000E504
.rdata$r:0000E504 ; Segment type: Pure data
.rdata$r:0000E504 ; Segment permissions: Read
.rdata$r:0000E504 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E504                 assume cs:_rdata$r
.rdata$r:0000E504                 ;org 0E504h
.rdata$r:0000E504 ; COMDAT (pick any)
.rdata$r:0000E504                 public ??_R2CLimitedSequentialOutStream@@8
.rdata$r:0000E504 ; CLimitedSequentialOutStream::`RTTI Base Class Array'
.rdata$r:0000E504 ??_R2CLimitedSequentialOutStream@@8 dd offset ??_R1A@?0A@EA@CLimitedSequentialOutStream@@8
.rdata$r:0000E504                                         ; DATA XREF: .rdata$r:0000E500o
.rdata$r:0000E504                                         ; CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E508                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E50C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E510                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000E514                 db    0
.rdata$r:0000E515                 align 4
.rdata$r:0000E515 _rdata$r        ends
.rdata$r:0000E515
.rdata$r:0000E518 ; ===========================================================================
.rdata$r:0000E518
.rdata$r:0000E518 ; Segment type: Pure data
.rdata$r:0000E518 ; Segment permissions: Read
.rdata$r:0000E518 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E518                 assume cs:_rdata$r
.rdata$r:0000E518                 ;org 0E518h
.rdata$r:0000E518 ; COMDAT (pick any)
.rdata$r:0000E518                 public ??_R1A@?0A@EA@CLimitedSequentialOutStream@@8
.rdata$r:0000E518 ; CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000E518 ??_R1A@?0A@EA@CLimitedSequentialOutStream@@8 dd offset ??_R0?AVCLimitedSequentialOutStream@@@8
.rdata$r:0000E518                                         ; DATA XREF: .rdata$r:CLimitedSequentialOutStream::`RTTI Base Class Array'o
.rdata$r:0000E518                                         ; CLimitedSequentialOutStream `RTTI Type Descriptor'
.rdata$r:0000E51C                 db    3
.rdata$r:0000E51D                 db    0
.rdata$r:0000E51E                 db    0
.rdata$r:0000E51F                 db    0
.rdata$r:0000E520                 db    0
.rdata$r:0000E521                 db    0
.rdata$r:0000E522                 db    0
.rdata$r:0000E523                 db    0
.rdata$r:0000E524                 db 0FFh
.rdata$r:0000E525                 db 0FFh
.rdata$r:0000E526                 db 0FFh
.rdata$r:0000E527                 db 0FFh
.rdata$r:0000E528                 db    0
.rdata$r:0000E529                 db    0
.rdata$r:0000E52A                 db    0
.rdata$r:0000E52B                 db    0
.rdata$r:0000E52C                 db  40h ; @
.rdata$r:0000E52D                 db    0
.rdata$r:0000E52E                 db    0
.rdata$r:0000E52F                 db    0
.rdata$r:0000E530                 dd offset ??_R3CLimitedSequentialOutStream@@8 ; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E530 _rdata$r        ends
.rdata$r:0000E530
.rdata$r:0000E534 ; ===========================================================================
.rdata$r:0000E534
.rdata$r:0000E534 ; Segment type: Pure data
.rdata$r:0000E534 ; Segment permissions: Read
.rdata$r:0000E534 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E534                 assume cs:_rdata$r
.rdata$r:0000E534                 ;org 0E534h
.rdata$r:0000E534 ; COMDAT (pick any)
.rdata$r:0000E534                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:0000E534 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000E534 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:0000E534                                         ; DATA XREF: .rdata$r:0000E508o
.rdata$r:0000E534                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:0000E534                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:0000E538                 db    1
.rdata$r:0000E539                 db    0
.rdata$r:0000E53A                 db    0
.rdata$r:0000E53B                 db    0
.rdata$r:0000E53C                 db    0
.rdata$r:0000E53D                 db    0
.rdata$r:0000E53E                 db    0
.rdata$r:0000E53F                 db    0
.rdata$r:0000E540                 db 0FFh
.rdata$r:0000E541                 db 0FFh
.rdata$r:0000E542                 db 0FFh
.rdata$r:0000E543                 db 0FFh
.rdata$r:0000E544                 db    0
.rdata$r:0000E545                 db    0
.rdata$r:0000E546                 db    0
.rdata$r:0000E547                 db    0
.rdata$r:0000E548                 db  40h ; @
.rdata$r:0000E549                 db    0
.rdata$r:0000E54A                 db    0
.rdata$r:0000E54B                 db    0
.rdata$r:0000E54C                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E54C _rdata$r        ends
.rdata$r:0000E54C
.data:0000E550 ; ===========================================================================
.data:0000E550
.data:0000E550 ; Segment type: Pure data
.data:0000E550 ; Segment permissions: Read/Write
.data:0000E550 _data           segment dword public 'DATA' use32
.data:0000E550                 assume cs:_data
.data:0000E550                 ;org 0E550h
.data:0000E550 ; COMDAT (pick any)
.data:0000E550                 public ??_R0?AUISequentialOutStream@@@8
.data:0000E550 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:0000E550 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:0000E550                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000E550                                         ; .rdata$r:0000E5E0o
.data:0000E550                                         ; const type_info::`vftable'
.data:0000E554                 align 8
.data:0000E558 a_?auisequent_0 db '.?AUISequentialOutStream@@',0
.data:0000E573                 align 4
.data:0000E573 _data           ends
.data:0000E573
.rdata$r:0000E574 ; ===========================================================================
.rdata$r:0000E574
.rdata$r:0000E574 ; Segment type: Pure data
.rdata$r:0000E574 ; Segment permissions: Read
.rdata$r:0000E574 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E574                 assume cs:_rdata$r
.rdata$r:0000E574                 ;org 0E574h
.rdata$r:0000E574 ; COMDAT (pick any)
.rdata$r:0000E574                 public ??_R3ISequentialOutStream@@8
.rdata$r:0000E574 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E574 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:0000E54Co
.rdata$r:0000E574                                         ; .rdata$r:0000E5E4o
.rdata$r:0000E575                 db    0
.rdata$r:0000E576                 db    0
.rdata$r:0000E577                 db    0
.rdata$r:0000E578                 db    0
.rdata$r:0000E579                 db    0
.rdata$r:0000E57A                 db    0
.rdata$r:0000E57B                 db    0
.rdata$r:0000E57C                 db    2
.rdata$r:0000E57D                 db    0
.rdata$r:0000E57E                 db    0
.rdata$r:0000E57F                 db    0
.rdata$r:0000E580                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:0000E580 _rdata$r        ends
.rdata$r:0000E580
.rdata$r:0000E584 ; ===========================================================================
.rdata$r:0000E584
.rdata$r:0000E584 ; Segment type: Pure data
.rdata$r:0000E584 ; Segment permissions: Read
.rdata$r:0000E584 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E584                 assume cs:_rdata$r
.rdata$r:0000E584                 ;org 0E584h
.rdata$r:0000E584 ; COMDAT (pick any)
.rdata$r:0000E584                 public ??_R2ISequentialOutStream@@8
.rdata$r:0000E584 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:0000E584 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:0000E584                                         ; DATA XREF: .rdata$r:0000E580o
.rdata$r:0000E584                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E588                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000E58C                 db    0
.rdata$r:0000E58D                 align 10h
.rdata$r:0000E58D _rdata$r        ends
.rdata$r:0000E58D
.text:0000E590 ; ===========================================================================
.text:0000E590
.text:0000E590 ; Segment type: Pure code
.text:0000E590 ; Segment permissions: Read/Execute
.text:0000E590 _text           segment para public 'CODE' use32
.text:0000E590                 assume cs:_text
.text:0000E590                 ;org 0E590h
.text:0000E590 ; COMDAT (pick any)
.text:0000E590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E590
.text:0000E590 ; =============== S U B R O U T I N E =======================================
.text:0000E590
.text:0000E590 ; Attributes: bp-based frame
.text:0000E590
.text:0000E590 ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:0000E590                 public ??0ISequentialOutStream@@QAE@XZ
.text:0000E590 ??0ISequentialOutStream@@QAE@XZ proc near
.text:0000E590                                         ; CODE XREF: CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)+11p
.text:0000E590
.text:0000E590 var_4           = dword ptr -4
.text:0000E590
.text:0000E590                 push    ebp
.text:0000E591                 mov     ebp, esp
.text:0000E593                 push    ecx
.text:0000E594                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E59B                 mov     [ebp+var_4], ecx
.text:0000E59E                 mov     ecx, [ebp+var_4]
.text:0000E5A1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000E5A6                 mov     eax, [ebp+var_4]
.text:0000E5A9                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:0000E5AF                 mov     eax, [ebp+var_4]
.text:0000E5B2                 add     esp, 4
.text:0000E5B5                 cmp     ebp, esp
.text:0000E5B7                 call    __RTC_CheckEsp
.text:0000E5BC                 mov     esp, ebp
.text:0000E5BE                 pop     ebp
.text:0000E5BF                 retn
.text:0000E5BF ??0ISequentialOutStream@@QAE@XZ endp
.text:0000E5BF
.text:0000E5BF _text           ends
.text:0000E5BF
.rdata:0000E5C0 ; ===========================================================================
.rdata:0000E5C0
.rdata:0000E5C0 ; Segment type: Pure data
.rdata:0000E5C0 ; Segment permissions: Read
.rdata:0000E5C0 _rdata          segment dword public 'DATA' use32
.rdata:0000E5C0                 assume cs:_rdata
.rdata:0000E5C0                 ;org 0E5C0h
.rdata:0000E5C0 ; COMDAT (pick largest)
.rdata:0000E5C0                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:0000E5C4                 public ??_7ISequentialOutStream@@6B@
.rdata:0000E5C4 ; const ISequentialOutStream::`vftable'
.rdata:0000E5C4 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:0000E5C4                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:0000E5C8                 dd offset __purecall
.rdata:0000E5CC                 dd offset __purecall
.rdata:0000E5D0                 dd offset __purecall
.rdata:0000E5D0 _rdata          ends
.rdata:0000E5D0
.rdata$r:0000E5D4 ; ===========================================================================
.rdata$r:0000E5D4
.rdata$r:0000E5D4 ; Segment type: Pure data
.rdata$r:0000E5D4 ; Segment permissions: Read
.rdata$r:0000E5D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000E5D4                 assume cs:_rdata$r
.rdata$r:0000E5D4                 ;org 0E5D4h
.rdata$r:0000E5D4 ; COMDAT (pick any)
.rdata$r:0000E5D4                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:0000E5D4 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:0000E5D4 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:0000E5C0o
.rdata$r:0000E5D5                 db    0
.rdata$r:0000E5D6                 db    0
.rdata$r:0000E5D7                 db    0
.rdata$r:0000E5D8                 db    0
.rdata$r:0000E5D9                 db    0
.rdata$r:0000E5DA                 db    0
.rdata$r:0000E5DB                 db    0
.rdata$r:0000E5DC                 db    0
.rdata$r:0000E5DD                 db    0
.rdata$r:0000E5DE                 db    0
.rdata$r:0000E5DF                 db    0
.rdata$r:0000E5E0                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:0000E5E4                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000E5E4 _rdata$r        ends
.rdata$r:0000E5E4
.text:0000E5E8 ; ===========================================================================
.text:0000E5E8
.text:0000E5E8 ; Segment type: Pure code
.text:0000E5E8 ; Segment permissions: Read/Execute
.text:0000E5E8 _text           segment para public 'CODE' use32
.text:0000E5E8                 assume cs:_text
.text:0000E5E8                 ;org 0E5E8h
.text:0000E5E8 ; COMDAT (pick any)
.text:0000E5E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E5E8
.text:0000E5E8 ; =============== S U B R O U T I N E =======================================
.text:0000E5E8
.text:0000E5E8 ; Attributes: bp-based frame
.text:0000E5E8
.text:0000E5E8 ; __int32 __stdcall CLimitedSequentialOutStream::QueryInterface(CLimitedSequentialOutStream *this, const struct _GUID *Buf1, void **)
.text:0000E5E8                 public ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:0000E5E8 ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000E5E8                                         ; DATA XREF: .rdata:const CLimitedSequentialOutStream::`vftable'o
.text:0000E5E8
.text:0000E5E8 this            = dword ptr  8
.text:0000E5E8 Buf1            = dword ptr  0Ch
.text:0000E5E8 arg_8           = dword ptr  10h
.text:0000E5E8
.text:0000E5E8                 push    ebp
.text:0000E5E9                 mov     ebp, esp
.text:0000E5EB                 mov     eax, [ebp+arg_8]
.text:0000E5EE                 mov     dword ptr [eax], 0
.text:0000E5F4                 push    offset _IID_IUnknown ; Buf2
.text:0000E5F9                 mov     ecx, [ebp+Buf1]
.text:0000E5FC                 push    ecx             ; Buf1
.text:0000E5FD                 call    ___@8           ; __(x,x)
.text:0000E602                 test    eax, eax
.text:0000E604                 jz      short loc_E610
.text:0000E606                 mov     edx, [ebp+arg_8]
.text:0000E609                 mov     eax, [ebp+this]
.text:0000E60C                 mov     [edx], eax
.text:0000E60E                 jmp     short loc_E633
.text:0000E610 ; ---------------------------------------------------------------------------
.text:0000E610
.text:0000E610 loc_E610:                               ; CODE XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:0000E610                 push    offset _IID_ISequentialOutStream ; Buf2
.text:0000E615                 mov     ecx, [ebp+Buf1]
.text:0000E618                 push    ecx             ; Buf1
.text:0000E619                 call    ___@8           ; __(x,x)
.text:0000E61E                 test    eax, eax
.text:0000E620                 jz      short loc_E62C
.text:0000E622                 mov     edx, [ebp+arg_8]
.text:0000E625                 mov     eax, [ebp+this]
.text:0000E628                 mov     [edx], eax
.text:0000E62A                 jmp     short loc_E633
.text:0000E62C ; ---------------------------------------------------------------------------
.text:0000E62C
.text:0000E62C loc_E62C:                               ; CODE XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+38j
.text:0000E62C                 mov     eax, 80004002h
.text:0000E631                 jmp     short loc_E644
.text:0000E633 ; ---------------------------------------------------------------------------
.text:0000E633
.text:0000E633 loc_E633:                               ; CODE XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000E633                                         ; CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+42j
.text:0000E633                 mov     ecx, [ebp+this]
.text:0000E636                 mov     edx, [ecx+4]
.text:0000E639                 add     edx, 1
.text:0000E63C                 mov     eax, [ebp+this]
.text:0000E63F                 mov     [eax+4], edx
.text:0000E642                 xor     eax, eax
.text:0000E644
.text:0000E644 loc_E644:                               ; CODE XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+49j
.text:0000E644                 cmp     ebp, esp
.text:0000E646                 call    __RTC_CheckEsp
.text:0000E64B                 pop     ebp
.text:0000E64C                 retn    0Ch
.text:0000E64C ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000E64C
.text:0000E64C ; ---------------------------------------------------------------------------
.text:0000E64F                 align 10h
.text:0000E64F _text           ends
.text:0000E64F
.text:0000E650 ; ===========================================================================
.text:0000E650
.text:0000E650 ; Segment type: Pure code
.text:0000E650 ; Segment permissions: Read/Execute
.text:0000E650 _text           segment para public 'CODE' use32
.text:0000E650                 assume cs:_text
.text:0000E650                 ;org 0E650h
.text:0000E650 ; COMDAT (pick any)
.text:0000E650                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E650
.text:0000E650 ; =============== S U B R O U T I N E =======================================
.text:0000E650
.text:0000E650 ; Attributes: bp-based frame
.text:0000E650
.text:0000E650 ; unsigned __int32 __stdcall CLimitedSequentialOutStream::AddRef(CLimitedSequentialOutStream *this)
.text:0000E650                 public ?AddRef@CLimitedSequentialOutStream@@UAGKXZ
.text:0000E650 ?AddRef@CLimitedSequentialOutStream@@UAGKXZ proc near
.text:0000E650                                         ; DATA XREF: .rdata:0000E4A8o
.text:0000E650
.text:0000E650 var_4           = dword ptr -4
.text:0000E650 this            = dword ptr  8
.text:0000E650
.text:0000E650                 push    ebp
.text:0000E651                 mov     ebp, esp
.text:0000E653                 push    ecx
.text:0000E654                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E65B                 mov     eax, [ebp+this]
.text:0000E65E                 mov     ecx, [eax+4]
.text:0000E661                 add     ecx, 1
.text:0000E664                 mov     [ebp+var_4], ecx
.text:0000E667                 mov     edx, [ebp+this]
.text:0000E66A                 mov     eax, [ebp+var_4]
.text:0000E66D                 mov     [edx+4], eax
.text:0000E670                 mov     eax, [ebp+var_4]
.text:0000E673                 mov     esp, ebp
.text:0000E675                 pop     ebp
.text:0000E676                 retn    4
.text:0000E676 ?AddRef@CLimitedSequentialOutStream@@UAGKXZ endp
.text:0000E676
.text:0000E676 ; ---------------------------------------------------------------------------
.text:0000E679                 align 4
.text:0000E679 _text           ends
.text:0000E679
.text:0000E67C ; ===========================================================================
.text:0000E67C
.text:0000E67C ; Segment type: Pure code
.text:0000E67C ; Segment permissions: Read/Execute
.text:0000E67C _text           segment para public 'CODE' use32
.text:0000E67C                 assume cs:_text
.text:0000E67C                 ;org 0E67Ch
.text:0000E67C ; COMDAT (pick any)
.text:0000E67C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E67C
.text:0000E67C ; =============== S U B R O U T I N E =======================================
.text:0000E67C
.text:0000E67C ; Attributes: bp-based frame
.text:0000E67C
.text:0000E67C ; unsigned __int32 __stdcall CLimitedSequentialOutStream::Release(CLimitedSequentialOutStream *this)
.text:0000E67C                 public ?Release@CLimitedSequentialOutStream@@UAGKXZ
.text:0000E67C ?Release@CLimitedSequentialOutStream@@UAGKXZ proc near
.text:0000E67C                                         ; DATA XREF: .rdata:0000E4ACo
.text:0000E67C
.text:0000E67C var_10          = dword ptr -10h
.text:0000E67C var_C           = dword ptr -0Ch
.text:0000E67C var_8           = dword ptr -8
.text:0000E67C var_4           = dword ptr -4
.text:0000E67C this            = dword ptr  8
.text:0000E67C
.text:0000E67C                 push    ebp
.text:0000E67D                 mov     ebp, esp
.text:0000E67F                 sub     esp, 10h
.text:0000E682                 mov     eax, 0CCCCCCCCh
.text:0000E687                 mov     [ebp+var_10], eax
.text:0000E68A                 mov     [ebp+var_C], eax
.text:0000E68D                 mov     [ebp+var_8], eax
.text:0000E690                 mov     [ebp+var_4], eax
.text:0000E693                 mov     eax, [ebp+this]
.text:0000E696                 mov     ecx, [eax+4]
.text:0000E699                 sub     ecx, 1
.text:0000E69C                 mov     [ebp+var_C], ecx
.text:0000E69F                 mov     edx, [ebp+this]
.text:0000E6A2                 mov     eax, [ebp+var_C]
.text:0000E6A5                 mov     [edx+4], eax
.text:0000E6A8                 cmp     [ebp+var_C], 0
.text:0000E6AC                 jz      short loc_E6B6
.text:0000E6AE                 mov     ecx, [ebp+this]
.text:0000E6B1                 mov     eax, [ecx+4]
.text:0000E6B4                 jmp     short loc_E6E0
.text:0000E6B6 ; ---------------------------------------------------------------------------
.text:0000E6B6
.text:0000E6B6 loc_E6B6:                               ; CODE XREF: CLimitedSequentialOutStream::Release(void)+30j
.text:0000E6B6                 mov     edx, [ebp+this]
.text:0000E6B9                 mov     [ebp+var_8], edx
.text:0000E6BC                 mov     eax, [ebp+var_8]
.text:0000E6BF                 mov     [ebp+var_4], eax
.text:0000E6C2                 cmp     [ebp+var_4], 0
.text:0000E6C6                 jz      short loc_E6D7
.text:0000E6C8                 push    1
.text:0000E6CA                 mov     ecx, [ebp+var_4]
.text:0000E6CD                 call    ??_GCLimitedSequentialOutStream@@QAEPAXI@Z ; CLimitedSequentialOutStream::`scalar deleting destructor'(uint)
.text:0000E6D2                 mov     [ebp+var_10], eax
.text:0000E6D5                 jmp     short loc_E6DE
.text:0000E6D7 ; ---------------------------------------------------------------------------
.text:0000E6D7
.text:0000E6D7 loc_E6D7:                               ; CODE XREF: CLimitedSequentialOutStream::Release(void)+4Aj
.text:0000E6D7                 mov     [ebp+var_10], 0
.text:0000E6DE
.text:0000E6DE loc_E6DE:                               ; CODE XREF: CLimitedSequentialOutStream::Release(void)+59j
.text:0000E6DE                 xor     eax, eax
.text:0000E6E0
.text:0000E6E0 loc_E6E0:                               ; CODE XREF: CLimitedSequentialOutStream::Release(void)+38j
.text:0000E6E0                 add     esp, 10h
.text:0000E6E3                 cmp     ebp, esp
.text:0000E6E5                 call    __RTC_CheckEsp
.text:0000E6EA                 mov     esp, ebp
.text:0000E6EC                 pop     ebp
.text:0000E6ED                 retn    4
.text:0000E6ED ?Release@CLimitedSequentialOutStream@@UAGKXZ endp
.text:0000E6ED
.text:0000E6ED _text           ends
.text:0000E6ED
.text:0000E6F0 ; ===========================================================================
.text:0000E6F0
.text:0000E6F0 ; Segment type: Pure code
.text:0000E6F0 ; Segment permissions: Read/Execute
.text:0000E6F0 _text           segment para public 'CODE' use32
.text:0000E6F0                 assume cs:_text
.text:0000E6F0                 ;org 0E6F0h
.text:0000E6F0 ; COMDAT (pick any)
.text:0000E6F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E6F0
.text:0000E6F0 ; =============== S U B R O U T I N E =======================================
.text:0000E6F0
.text:0000E6F0 ; Attributes: bp-based frame
.text:0000E6F0
.text:0000E6F0 ; public: void * __thiscall CLimitedSequentialOutStream::`scalar deleting destructor'(unsigned int)
.text:0000E6F0                 public ??_GCLimitedSequentialOutStream@@QAEPAXI@Z
.text:0000E6F0 ??_GCLimitedSequentialOutStream@@QAEPAXI@Z proc near
.text:0000E6F0                                         ; CODE XREF: CLimitedSequentialOutStream::Release(void)+51p
.text:0000E6F0
.text:0000E6F0 var_4           = dword ptr -4
.text:0000E6F0 arg_0           = dword ptr  8
.text:0000E6F0
.text:0000E6F0                 push    ebp
.text:0000E6F1                 mov     ebp, esp
.text:0000E6F3                 push    ecx
.text:0000E6F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E6FB                 mov     [ebp+var_4], ecx
.text:0000E6FE                 mov     ecx, [ebp+var_4] ; this
.text:0000E701                 call    ??1CLimitedSequentialOutStream@@QAE@XZ ; CLimitedSequentialOutStream::~CLimitedSequentialOutStream(void)
.text:0000E706                 mov     eax, [ebp+arg_0]
.text:0000E709                 and     eax, 1
.text:0000E70C                 jz      short loc_E71A
.text:0000E70E                 mov     ecx, [ebp+var_4]
.text:0000E711                 push    ecx             ; void *
.text:0000E712                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000E717                 add     esp, 4
.text:0000E71A
.text:0000E71A loc_E71A:                               ; CODE XREF: CLimitedSequentialOutStream::`scalar deleting destructor'(uint)+1Cj
.text:0000E71A                 mov     eax, [ebp+var_4]
.text:0000E71D                 add     esp, 4
.text:0000E720                 cmp     ebp, esp
.text:0000E722                 call    __RTC_CheckEsp
.text:0000E727                 mov     esp, ebp
.text:0000E729                 pop     ebp
.text:0000E72A                 retn    4
.text:0000E72A ??_GCLimitedSequentialOutStream@@QAEPAXI@Z endp
.text:0000E72A
.text:0000E72A ; ---------------------------------------------------------------------------
.text:0000E72D                 align 10h
.text:0000E72D _text           ends
.text:0000E72D
.text:0000E730 ; ===========================================================================
.text:0000E730
.text:0000E730 ; Segment type: Pure code
.text:0000E730 ; Segment permissions: Read/Execute
.text:0000E730 _text           segment para public 'CODE' use32
.text:0000E730                 assume cs:_text
.text:0000E730                 ;org 0E730h
.text:0000E730 ; COMDAT (pick any)
.text:0000E730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E730
.text:0000E730 ; =============== S U B R O U T I N E =======================================
.text:0000E730
.text:0000E730 ; Attributes: bp-based frame
.text:0000E730
.text:0000E730 ; _DWORD __thiscall CLimitedSequentialOutStream::~CLimitedSequentialOutStream(CLimitedSequentialOutStream *__hidden this)
.text:0000E730                 public ??1CLimitedSequentialOutStream@@QAE@XZ
.text:0000E730 ??1CLimitedSequentialOutStream@@QAE@XZ proc near
.text:0000E730                                         ; CODE XREF: CLimitedSequentialOutStream::`scalar deleting destructor'(uint)+11p
.text:0000E730
.text:0000E730 var_4           = dword ptr -4
.text:0000E730
.text:0000E730                 push    ebp
.text:0000E731                 mov     ebp, esp
.text:0000E733                 push    ecx
.text:0000E734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E73B                 mov     [ebp+var_4], ecx
.text:0000E73E                 mov     ecx, [ebp+var_4]
.text:0000E741                 add     ecx, 8
.text:0000E744                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000E749                 add     esp, 4
.text:0000E74C                 cmp     ebp, esp
.text:0000E74E                 call    __RTC_CheckEsp
.text:0000E753                 mov     esp, ebp
.text:0000E755                 pop     ebp
.text:0000E756                 retn
.text:0000E756 ??1CLimitedSequentialOutStream@@QAE@XZ endp
.text:0000E756
.text:0000E756 ; ---------------------------------------------------------------------------
.text:0000E757                 align 4
.text:0000E757 _text           ends
.text:0000E757
.text:0000E758 ; ===========================================================================
.text:0000E758
.text:0000E758 ; Segment type: Pure code
.text:0000E758 ; Segment permissions: Read/Execute
.text:0000E758 _text           segment para public 'CODE' use32
.text:0000E758                 assume cs:_text
.text:0000E758                 ;org 0E758h
.text:0000E758 ; COMDAT (pick any)
.text:0000E758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E758
.text:0000E758 ; =============== S U B R O U T I N E =======================================
.text:0000E758
.text:0000E758 ; Attributes: bp-based frame
.text:0000E758
.text:0000E758 ; bool __stdcall VARIANT_BOOLToBool(__int16)
.text:0000E758                 public ?VARIANT_BOOLToBool@@YG_NF@Z
.text:0000E758 ?VARIANT_BOOLToBool@@YG_NF@Z proc near  ; CODE XREF: Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)+72p
.text:0000E758                                         ; Archive_GetArcBoolProp(IInArchive *,ulong,bool &)+6Ep
.text:0000E758
.text:0000E758 arg_0           = word ptr  8
.text:0000E758
.text:0000E758                 push    ebp
.text:0000E759                 mov     ebp, esp
.text:0000E75B                 movsx   eax, [ebp+arg_0]
.text:0000E75F                 neg     eax
.text:0000E761                 sbb     eax, eax
.text:0000E763                 neg     eax
.text:0000E765                 pop     ebp
.text:0000E766                 retn    4
.text:0000E766 ?VARIANT_BOOLToBool@@YG_NF@Z endp
.text:0000E766
.text:0000E766 ; ---------------------------------------------------------------------------
.text:0000E769                 align 4
.text:0000E769 _text           ends
.text:0000E769
.text:0000E76C ; ===========================================================================
.text:0000E76C
.text:0000E76C ; Segment type: Pure code
.text:0000E76C ; Segment permissions: Read/Execute
.text:0000E76C _text           segment para public 'CODE' use32
.text:0000E76C                 assume cs:_text
.text:0000E76C                 ;org 0E76Ch
.text:0000E76C ; COMDAT (pick any)
.text:0000E76C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E76C
.text:0000E76C ; =============== S U B R O U T I N E =======================================
.text:0000E76C
.text:0000E76C ; Attributes: bp-based frame
.text:0000E76C
.text:0000E76C ; void __thiscall UString::Empty(UString *__hidden this)
.text:0000E76C                 public ?Empty@UString@@QAEXXZ
.text:0000E76C ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+1AFp
.text:0000E76C                                         ; CArc::GetItemPath(uint,UString &)+1BEp ...
.text:0000E76C
.text:0000E76C var_4           = dword ptr -4
.text:0000E76C
.text:0000E76C                 push    ebp
.text:0000E76D                 mov     ebp, esp
.text:0000E76F                 push    ecx
.text:0000E770                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E777                 mov     [ebp+var_4], ecx
.text:0000E77A                 mov     eax, [ebp+var_4]
.text:0000E77D                 mov     dword ptr [eax+4], 0
.text:0000E784                 mov     ecx, [ebp+var_4]
.text:0000E787                 mov     edx, [ecx]
.text:0000E789                 xor     eax, eax
.text:0000E78B                 mov     [edx], ax
.text:0000E78E                 mov     esp, ebp
.text:0000E790                 pop     ebp
.text:0000E791                 retn
.text:0000E791 ?Empty@UString@@QAEXXZ endp
.text:0000E791
.text:0000E791 ; ---------------------------------------------------------------------------
.text:0000E792                 align 4
.text:0000E792 _text           ends
.text:0000E792
.text:0000E794 ; ===========================================================================
.text:0000E794
.text:0000E794 ; Segment type: Pure code
.text:0000E794 ; Segment permissions: Read/Execute
.text:0000E794 _text           segment para public 'CODE' use32
.text:0000E794                 assume cs:_text
.text:0000E794                 ;org 0E794h
.text:0000E794 ; COMDAT (pick any)
.text:0000E794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E794
.text:0000E794 ; =============== S U B R O U T I N E =======================================
.text:0000E794
.text:0000E794 ; Attributes: bp-based frame
.text:0000E794
.text:0000E794 ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:0000E794                 public ?Ptr@UString@@QBEPB_WI@Z
.text:0000E794 ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+2A4p
.text:0000E794                                         ; CArc::GetItem(uint,CReadArcItem &)+35Dp ...
.text:0000E794
.text:0000E794 var_4           = dword ptr -4
.text:0000E794 arg_0           = dword ptr  8
.text:0000E794
.text:0000E794                 push    ebp
.text:0000E795                 mov     ebp, esp
.text:0000E797                 push    ecx
.text:0000E798                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E79F                 mov     [ebp+var_4], ecx
.text:0000E7A2                 mov     eax, [ebp+var_4]
.text:0000E7A5                 mov     ecx, [eax]
.text:0000E7A7                 mov     edx, [ebp+arg_0]
.text:0000E7AA                 lea     eax, [ecx+edx*2]
.text:0000E7AD                 mov     esp, ebp
.text:0000E7AF                 pop     ebp
.text:0000E7B0                 retn    4
.text:0000E7B0 ?Ptr@UString@@QBEPB_WI@Z endp
.text:0000E7B0
.text:0000E7B0 ; ---------------------------------------------------------------------------
.text:0000E7B3                 align 4
.text:0000E7B3 _text           ends
.text:0000E7B3
.text:0000E7B4 ; ===========================================================================
.text:0000E7B4
.text:0000E7B4 ; Segment type: Pure code
.text:0000E7B4 ; Segment permissions: Read/Execute
.text:0000E7B4 _text           segment para public 'CODE' use32
.text:0000E7B4                 assume cs:_text
.text:0000E7B4                 ;org 0E7B4h
.text:0000E7B4 ; COMDAT (pick any)
.text:0000E7B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E7B4
.text:0000E7B4 ; =============== S U B R O U T I N E =======================================
.text:0000E7B4
.text:0000E7B4 ; Attributes: bp-based frame
.text:0000E7B4
.text:0000E7B4 ; void __thiscall UString::DeleteFrom(UString *this, unsigned int)
.text:0000E7B4                 public ?DeleteFrom@UString@@QAEXI@Z
.text:0000E7B4 ?DeleteFrom@UString@@QAEXI@Z proc near  ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+2E3p
.text:0000E7B4                                         ; CArc::GetItem(uint,CReadArcItem &)+34Ep ...
.text:0000E7B4
.text:0000E7B4 var_4           = dword ptr -4
.text:0000E7B4 arg_0           = dword ptr  8
.text:0000E7B4
.text:0000E7B4                 push    ebp
.text:0000E7B5                 mov     ebp, esp
.text:0000E7B7                 push    ecx
.text:0000E7B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E7BF                 mov     [ebp+var_4], ecx
.text:0000E7C2                 mov     eax, [ebp+var_4]
.text:0000E7C5                 mov     ecx, [ebp+arg_0]
.text:0000E7C8                 cmp     ecx, [eax+4]
.text:0000E7CB                 jnb     short loc_E7E4
.text:0000E7CD                 mov     edx, [ebp+var_4]
.text:0000E7D0                 mov     eax, [ebp+arg_0]
.text:0000E7D3                 mov     [edx+4], eax
.text:0000E7D6                 mov     ecx, [ebp+var_4]
.text:0000E7D9                 mov     edx, [ecx]
.text:0000E7DB                 xor     eax, eax
.text:0000E7DD                 mov     ecx, [ebp+arg_0]
.text:0000E7E0                 mov     [edx+ecx*2], ax
.text:0000E7E4
.text:0000E7E4 loc_E7E4:                               ; CODE XREF: UString::DeleteFrom(uint)+17j
.text:0000E7E4                 mov     esp, ebp
.text:0000E7E6                 pop     ebp
.text:0000E7E7                 retn    4
.text:0000E7E7 ?DeleteFrom@UString@@QAEXI@Z endp
.text:0000E7E7
.text:0000E7E7 ; ---------------------------------------------------------------------------
.text:0000E7EA                 align 4
.text:0000E7EA _text           ends
.text:0000E7EA
.text:0000E7EC ; ===========================================================================
.text:0000E7EC
.text:0000E7EC ; Segment type: Pure code
.text:0000E7EC ; Segment permissions: Read/Execute
.text:0000E7EC _text           segment para public 'CODE' use32
.text:0000E7EC                 assume cs:_text
.text:0000E7EC                 ;org 0E7ECh
.text:0000E7EC ; COMDAT (pick any)
.text:0000E7EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E7EC
.text:0000E7EC ; =============== S U B R O U T I N E =======================================
.text:0000E7EC
.text:0000E7EC ; Attributes: bp-based frame
.text:0000E7EC
.text:0000E7EC ; wchar_t *__thiscall UString::GetBuf(UString *this, unsigned int)
.text:0000E7EC                 public ?GetBuf@UString@@QAEPA_WI@Z
.text:0000E7EC ?GetBuf@UString@@QAEPA_WI@Z proc near   ; CODE XREF: CArc::GetItemPath(uint,UString &)+BBp
.text:0000E7EC
.text:0000E7EC var_4           = dword ptr -4
.text:0000E7EC arg_0           = dword ptr  8
.text:0000E7EC
.text:0000E7EC                 push    ebp
.text:0000E7ED                 mov     ebp, esp
.text:0000E7EF                 push    ecx
.text:0000E7F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E7F7                 mov     [ebp+var_4], ecx
.text:0000E7FA                 mov     eax, [ebp+var_4]
.text:0000E7FD                 mov     ecx, [ebp+arg_0]
.text:0000E800                 cmp     ecx, [eax+8]
.text:0000E803                 jbe     short loc_E811
.text:0000E805                 mov     edx, [ebp+arg_0]
.text:0000E808                 push    edx             ; unsigned int
.text:0000E809                 mov     ecx, [ebp+var_4] ; this
.text:0000E80C                 call    ?ReAlloc2@UString@@AAEXI@Z ; UString::ReAlloc2(uint)
.text:0000E811
.text:0000E811 loc_E811:                               ; CODE XREF: UString::GetBuf(uint)+17j
.text:0000E811                 mov     eax, [ebp+var_4]
.text:0000E814                 mov     eax, [eax]
.text:0000E816                 add     esp, 4
.text:0000E819                 cmp     ebp, esp
.text:0000E81B                 call    __RTC_CheckEsp
.text:0000E820                 mov     esp, ebp
.text:0000E822                 pop     ebp
.text:0000E823                 retn    4
.text:0000E823 ?GetBuf@UString@@QAEPA_WI@Z endp
.text:0000E823
.text:0000E823 ; ---------------------------------------------------------------------------
.text:0000E826                 align 4
.text:0000E826 _text           ends
.text:0000E826
.text:0000E828 ; ===========================================================================
.text:0000E828
.text:0000E828 ; Segment type: Pure code
.text:0000E828 ; Segment permissions: Read/Execute
.text:0000E828 _text           segment para public 'CODE' use32
.text:0000E828                 assume cs:_text
.text:0000E828                 ;org 0E828h
.text:0000E828 ; COMDAT (pick any)
.text:0000E828                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E828
.text:0000E828 ; =============== S U B R O U T I N E =======================================
.text:0000E828
.text:0000E828 ; Attributes: bp-based frame
.text:0000E828
.text:0000E828 ; void __thiscall UString::ReleaseBuf_SetLen(UString *this, unsigned int)
.text:0000E828                 public ?ReleaseBuf_SetLen@UString@@QAEXI@Z
.text:0000E828 ?ReleaseBuf_SetLen@UString@@QAEXI@Z proc near
.text:0000E828                                         ; CODE XREF: CArc::GetItemPath(uint,UString &)+126p
.text:0000E828
.text:0000E828 var_4           = dword ptr -4
.text:0000E828 arg_0           = dword ptr  8
.text:0000E828
.text:0000E828                 push    ebp
.text:0000E829                 mov     ebp, esp
.text:0000E82B                 push    ecx
.text:0000E82C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E833                 mov     [ebp+var_4], ecx
.text:0000E836                 mov     eax, [ebp+var_4]
.text:0000E839                 mov     ecx, [ebp+arg_0]
.text:0000E83C                 mov     [eax+4], ecx
.text:0000E83F                 mov     esp, ebp
.text:0000E841                 pop     ebp
.text:0000E842                 retn    4
.text:0000E842 ?ReleaseBuf_SetLen@UString@@QAEXI@Z endp
.text:0000E842
.text:0000E842 ; ---------------------------------------------------------------------------
.text:0000E845                 align 4
.text:0000E845 _text           ends
.text:0000E845
.text:0000E848 ; ===========================================================================
.text:0000E848
.text:0000E848 ; Segment type: Pure code
.text:0000E848 ; Segment permissions: Read/Execute
.text:0000E848 _text           segment para public 'CODE' use32
.text:0000E848                 assume cs:_text
.text:0000E848                 ;org 0E848h
.text:0000E848 ; COMDAT (pick any)
.text:0000E848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E848
.text:0000E848 ; =============== S U B R O U T I N E =======================================
.text:0000E848
.text:0000E848 ; Attributes: bp-based frame
.text:0000E848
.text:0000E848 ; bool __stdcall IsPathSepar(wchar_t)
.text:0000E848                 public ?IsPathSepar@@YG_N_W@Z
.text:0000E848 ?IsPathSepar@@YG_N_W@Z proc near        ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+385p
.text:0000E848                                         ; CArc::GetItem(uint,CReadArcItem &)+478p
.text:0000E848
.text:0000E848 var_4           = dword ptr -4
.text:0000E848 arg_0           = word ptr  8
.text:0000E848
.text:0000E848                 push    ebp
.text:0000E849                 mov     ebp, esp
.text:0000E84B                 push    ecx
.text:0000E84C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E853                 movzx   eax, [ebp+arg_0]
.text:0000E857                 cmp     eax, 5Ch ; '\'
.text:0000E85A                 jz      short loc_E86E
.text:0000E85C                 movzx   ecx, [ebp+arg_0]
.text:0000E860                 cmp     ecx, 2Fh ; '/'
.text:0000E863                 jz      short loc_E86E
.text:0000E865                 mov     [ebp+var_4], 0
.text:0000E86C                 jmp     short loc_E875
.text:0000E86E ; ---------------------------------------------------------------------------
.text:0000E86E
.text:0000E86E loc_E86E:                               ; CODE XREF: IsPathSepar(wchar_t)+12j
.text:0000E86E                                         ; IsPathSepar(wchar_t)+1Bj
.text:0000E86E                 mov     [ebp+var_4], 1
.text:0000E875
.text:0000E875 loc_E875:                               ; CODE XREF: IsPathSepar(wchar_t)+24j
.text:0000E875                 mov     al, byte ptr [ebp+var_4]
.text:0000E878                 mov     esp, ebp
.text:0000E87A                 pop     ebp
.text:0000E87B                 retn    4
.text:0000E87B ?IsPathSepar@@YG_N_W@Z endp
.text:0000E87B
.text:0000E87B ; ---------------------------------------------------------------------------
.text:0000E87E                 align 10h
.text:0000E87E _text           ends
.text:0000E87E
.text:0000E880 ; ===========================================================================
.text:0000E880
.text:0000E880 ; Segment type: Pure code
.text:0000E880 ; Segment permissions: Read/Execute
.text:0000E880 _text           segment para public 'CODE' use32
.text:0000E880                 assume cs:_text
.text:0000E880                 ;org 0E880h
.text:0000E880 ; COMDAT (pick any)
.text:0000E880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E880
.text:0000E880 ; =============== S U B R O U T I N E =======================================
.text:0000E880
.text:0000E880 ; Attributes: bp-based frame
.text:0000E880
.text:0000E880 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:0000E880                 public ??BUString@@QBEPB_WXZ
.text:0000E880 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+330p
.text:0000E880                                         ; CArc::GetItem(uint,CReadArcItem &)+377p ...
.text:0000E880
.text:0000E880 var_4           = dword ptr -4
.text:0000E880
.text:0000E880                 push    ebp
.text:0000E881                 mov     ebp, esp
.text:0000E883                 push    ecx
.text:0000E884                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E88B                 mov     [ebp+var_4], ecx
.text:0000E88E                 mov     eax, [ebp+var_4]
.text:0000E891                 mov     eax, [eax]
.text:0000E893                 mov     esp, ebp
.text:0000E895                 pop     ebp
.text:0000E896                 retn
.text:0000E896 ??BUString@@QBEPB_WXZ endp
.text:0000E896
.text:0000E896 ; ---------------------------------------------------------------------------
.text:0000E897                 align 4
.text:0000E897 _text           ends
.text:0000E897
.xdata$x:0000E898 ; ===========================================================================
.xdata$x:0000E898
.xdata$x:0000E898 ; Segment type: Pure data
.xdata$x:0000E898 ; Segment permissions: Read
.xdata$x:0000E898 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E898                 assume cs:_xdata$x
.xdata$x:0000E898                 ;org 0E898h
.xdata$x:0000E898 ; COMDAT (pick any)
.xdata$x:0000E898                 public __TI1H
.xdata$x:0000E898 __TI1H          db    0                 ; DATA XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+70o
.xdata$x:0000E898                                         ; COpenCallbackImp::Init(UString const &,UString const &)+B7o
.xdata$x:0000E899                 db    0
.xdata$x:0000E89A                 db    0
.xdata$x:0000E89B                 db    0
.xdata$x:0000E89C                 db    0
.xdata$x:0000E89D                 db    0
.xdata$x:0000E89E                 db    0
.xdata$x:0000E89F                 db    0
.xdata$x:0000E8A0                 db    0
.xdata$x:0000E8A1                 db    0
.xdata$x:0000E8A2                 db    0
.xdata$x:0000E8A3                 db    0
.xdata$x:0000E8A4                 dd offset __CTA1H
.xdata$x:0000E8A4 _xdata$x        ends
.xdata$x:0000E8A4
.xdata$x:0000E8A8 ; ===========================================================================
.xdata$x:0000E8A8
.xdata$x:0000E8A8 ; Segment type: Pure data
.xdata$x:0000E8A8 ; Segment permissions: Read
.xdata$x:0000E8A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E8A8                 assume cs:_xdata$x
.xdata$x:0000E8A8                 ;org 0E8A8h
.xdata$x:0000E8A8 ; COMDAT (pick any)
.xdata$x:0000E8A8                 public __CTA1H
.xdata$x:0000E8A8 __CTA1H         db    1                 ; DATA XREF: .xdata$x:0000E8A4o
.xdata$x:0000E8A9                 db    0
.xdata$x:0000E8AA                 db    0
.xdata$x:0000E8AB                 db    0
.xdata$x:0000E8AC                 dd offset __CT??_R0H@84
.xdata$x:0000E8AC _xdata$x        ends
.xdata$x:0000E8AC
.xdata$x:0000E8B0 ; ===========================================================================
.xdata$x:0000E8B0
.xdata$x:0000E8B0 ; Segment type: Pure data
.xdata$x:0000E8B0 ; Segment permissions: Read
.xdata$x:0000E8B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E8B0                 assume cs:_xdata$x
.xdata$x:0000E8B0                 ;org 0E8B0h
.xdata$x:0000E8B0 ; COMDAT (pick any)
.xdata$x:0000E8B0                 public __CT??_R0H@84
.xdata$x:0000E8B0 __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:0000E8ACo
.xdata$x:0000E8B1                 db    0
.xdata$x:0000E8B2                 db    0
.xdata$x:0000E8B3                 db    0
.xdata$x:0000E8B4                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:0000E8B8                 db    0
.xdata$x:0000E8B9                 db    0
.xdata$x:0000E8BA                 db    0
.xdata$x:0000E8BB                 db    0
.xdata$x:0000E8BC                 db 0FFh
.xdata$x:0000E8BD                 db 0FFh
.xdata$x:0000E8BE                 db 0FFh
.xdata$x:0000E8BF                 db 0FFh
.xdata$x:0000E8C0                 db    0
.xdata$x:0000E8C1                 db    0
.xdata$x:0000E8C2                 db    0
.xdata$x:0000E8C3                 db    0
.xdata$x:0000E8C4                 db    4
.xdata$x:0000E8C5                 db    0
.xdata$x:0000E8C6                 db    0
.xdata$x:0000E8C7                 db    0
.xdata$x:0000E8C8                 db    0
.xdata$x:0000E8C9                 db    0
.xdata$x:0000E8CA                 db    0
.xdata$x:0000E8CB                 db    0
.xdata$x:0000E8CB _xdata$x        ends
.xdata$x:0000E8CB
.data:0000E8CC ; ===========================================================================
.data:0000E8CC
.data:0000E8CC ; Segment type: Pure data
.data:0000E8CC ; Segment permissions: Read/Write
.data:0000E8CC _data           segment dword public 'DATA' use32
.data:0000E8CC                 assume cs:_data
.data:0000E8CC                 ;org 0E8CCh
.data:0000E8CC ; COMDAT (pick any)
.data:0000E8CC                 public ??_R0H@8
.data:0000E8CC ; int `RTTI Type Descriptor'
.data:0000E8CC ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:0000E8B4o
.data:0000E8CC                                         ; const type_info::`vftable'
.data:0000E8D0                 db    0
.data:0000E8D1                 db    0
.data:0000E8D2                 db    0
.data:0000E8D3                 db    0
.data:0000E8D4                 db  2Eh ; .
.data:0000E8D5                 db  48h ; H
.data:0000E8D6                 db    0
.data:0000E8D7                 align 4
.data:0000E8D7 _data           ends
.data:0000E8D7
.text:0000E8D8 ; ===========================================================================
.text:0000E8D8
.text:0000E8D8 ; Segment type: Pure code
.text:0000E8D8 ; Segment permissions: Read/Execute
.text:0000E8D8 _text           segment para public 'CODE' use32
.text:0000E8D8                 assume cs:_text
.text:0000E8D8                 ;org 0E8D8h
.text:0000E8D8 ; COMDAT (pick any)
.text:0000E8D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E8D8
.text:0000E8D8 ; =============== S U B R O U T I N E =======================================
.text:0000E8D8
.text:0000E8D8 ; Attributes: bp-based frame
.text:0000E8D8
.text:0000E8D8 ; bool __thiscall CArcErrorInfo::IsArc_After_NonOpen(CArcErrorInfo *__hidden this)
.text:0000E8D8                 public ?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ
.text:0000E8D8 ?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ proc near
.text:0000E8D8                                         ; CODE XREF: CArc::ReadBasicProps(IInArchive *,unsigned __int64,long)+2E7p
.text:0000E8D8                                         ; CArc::OpenStream2(COpenOptions const &)+1022p ...
.text:0000E8D8
.text:0000E8D8 var_8           = dword ptr -8
.text:0000E8D8 var_4           = dword ptr -4
.text:0000E8D8
.text:0000E8D8                 push    ebp
.text:0000E8D9                 mov     ebp, esp
.text:0000E8DB                 sub     esp, 8
.text:0000E8DE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000E8E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E8EC                 mov     [ebp+var_4], ecx
.text:0000E8EF                 mov     eax, [ebp+var_4]
.text:0000E8F2                 movzx   ecx, byte ptr [eax+3]
.text:0000E8F6                 test    ecx, ecx
.text:0000E8F8                 jz      short loc_E90E
.text:0000E8FA                 mov     edx, [ebp+var_4]
.text:0000E8FD                 mov     eax, [edx+4]
.text:0000E900                 and     eax, 1
.text:0000E903                 jnz     short loc_E90E
.text:0000E905                 mov     [ebp+var_8], 1
.text:0000E90C                 jmp     short loc_E915
.text:0000E90E ; ---------------------------------------------------------------------------
.text:0000E90E
.text:0000E90E loc_E90E:                               ; CODE XREF: CArcErrorInfo::IsArc_After_NonOpen(void)+20j
.text:0000E90E                                         ; CArcErrorInfo::IsArc_After_NonOpen(void)+2Bj
.text:0000E90E                 mov     [ebp+var_8], 0
.text:0000E915
.text:0000E915 loc_E915:                               ; CODE XREF: CArcErrorInfo::IsArc_After_NonOpen(void)+34j
.text:0000E915                 mov     al, byte ptr [ebp+var_8]
.text:0000E918                 mov     esp, ebp
.text:0000E91A                 pop     ebp
.text:0000E91B                 retn
.text:0000E91B ?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ endp
.text:0000E91B
.text:0000E91B _text           ends
.text:0000E91B
.text:0000E91C ; ===========================================================================
.text:0000E91C
.text:0000E91C ; Segment type: Pure code
.text:0000E91C ; Segment permissions: Read/Execute
.text:0000E91C _text           segment para public 'CODE' use32
.text:0000E91C                 assume cs:_text
.text:0000E91C                 ;org 0E91Ch
.text:0000E91C ; COMDAT (pick any)
.text:0000E91C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E91C
.text:0000E91C ; =============== S U B R O U T I N E =======================================
.text:0000E91C
.text:0000E91C ; Attributes: bp-based frame
.text:0000E91C
.text:0000E91C ; int __stdcall BoolToInt(bool)
.text:0000E91C                 public ?BoolToInt@@YGH_N@Z
.text:0000E91C ?BoolToInt@@YGH_N@Z proc near           ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+E0p
.text:0000E91C                                         ; OpenArchiveSpec(IInArchive *,bool,IInStream *,unsigned __int64 const *,IArchiveOpenCallback *,IArchiveExtractCallback *)+C7p
.text:0000E91C
.text:0000E91C arg_0           = byte ptr  8
.text:0000E91C
.text:0000E91C                 push    ebp
.text:0000E91D                 mov     ebp, esp
.text:0000E91F                 movzx   eax, [ebp+arg_0]
.text:0000E923                 neg     eax
.text:0000E925                 sbb     eax, eax
.text:0000E927                 neg     eax
.text:0000E929                 pop     ebp
.text:0000E92A                 retn    4
.text:0000E92A ?BoolToInt@@YGH_N@Z endp
.text:0000E92A
.text:0000E92A ; ---------------------------------------------------------------------------
.text:0000E92D                 align 10h
.text:0000E92D _text           ends
.text:0000E92D
.text:0000E930 ; ===========================================================================
.text:0000E930
.text:0000E930 ; Segment type: Pure code
.text:0000E930 ; Segment permissions: Read/Execute
.text:0000E930 _text           segment para public 'CODE' use32
.text:0000E930                 assume cs:_text
.text:0000E930                 ;org 0E930h
.text:0000E930 ; COMDAT (pick any)
.text:0000E930                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E930
.text:0000E930 ; =============== S U B R O U T I N E =======================================
.text:0000E930
.text:0000E930 ; Attributes: bp-based frame
.text:0000E930
.text:0000E930 ; bool __thiscall CArcInfoEx::Flags_PreArc(CArcInfoEx *__hidden this)
.text:0000E930                 public ?Flags_PreArc@CArcInfoEx@@QBE_NXZ
.text:0000E930 ?Flags_PreArc@CArcInfoEx@@QBE_NXZ proc near
.text:0000E930                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+96p
.text:0000E930                                         ; IsPreArcFormat(CArcInfoEx const &)+6p ...
.text:0000E930
.text:0000E930 var_4           = dword ptr -4
.text:0000E930
.text:0000E930                 push    ebp
.text:0000E931                 mov     ebp, esp
.text:0000E933                 push    ecx
.text:0000E934                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E93B                 mov     [ebp+var_4], ecx
.text:0000E93E                 mov     eax, [ebp+var_4]
.text:0000E941                 mov     eax, [eax]
.text:0000E943                 and     eax, 200h
.text:0000E948                 neg     eax
.text:0000E94A                 sbb     eax, eax
.text:0000E94C                 neg     eax
.text:0000E94E                 mov     esp, ebp
.text:0000E950                 pop     ebp
.text:0000E951                 retn
.text:0000E951 ?Flags_PreArc@CArcInfoEx@@QBE_NXZ endp
.text:0000E951
.text:0000E951 ; ---------------------------------------------------------------------------
.text:0000E952                 align 4
.text:0000E952 _text           ends
.text:0000E952
.text:0000E954 ; ===========================================================================
.text:0000E954
.text:0000E954 ; Segment type: Pure code
.text:0000E954 ; Segment permissions: Read/Execute
.text:0000E954 _text           segment para public 'CODE' use32
.text:0000E954                 assume cs:_text
.text:0000E954                 ;org 0E954h
.text:0000E954 ; COMDAT (pick any)
.text:0000E954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E954
.text:0000E954 ; =============== S U B R O U T I N E =======================================
.text:0000E954
.text:0000E954 ; Attributes: bp-based frame
.text:0000E954
.text:0000E954 ; public: long __thiscall CCodecs::CreateInArchive(unsigned int, class CMyComPtr<struct IInArchive> &)const
.text:0000E954                 public ?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
.text:0000E954 ?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z proc near
.text:0000E954                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+53p
.text:0000E954
.text:0000E954 var_20          = dword ptr -20h
.text:0000E954 var_1C          = dword ptr -1Ch
.text:0000E954 var_18          = dword ptr -18h
.text:0000E954 var_14          = dword ptr -14h
.text:0000E954 var_10          = dword ptr -10h
.text:0000E954 var_C           = dword ptr -0Ch
.text:0000E954 var_4           = dword ptr -4
.text:0000E954 arg_0           = dword ptr  8
.text:0000E954 arg_4           = dword ptr  0Ch
.text:0000E954
.text:0000E954 ; FUNCTION CHUNK AT .text:0000E9F7 SIZE 0000001E BYTES
.text:0000E954
.text:0000E954                 push    ebp
.text:0000E955                 mov     ebp, esp
.text:0000E957                 push    0FFFFFFFFh
.text:0000E959                 push    offset __ehhandler$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
.text:0000E95E                 mov     eax, large fs:0
.text:0000E964                 push    eax
.text:0000E965                 push    ecx
.text:0000E966                 sub     esp, 10h
.text:0000E969                 push    ebx
.text:0000E96A                 push    esi
.text:0000E96B                 push    edi
.text:0000E96C                 mov     eax, 0CCCCCCCCh
.text:0000E971                 mov     [ebp+var_20], eax
.text:0000E974                 mov     [ebp+var_1C], eax
.text:0000E977                 mov     [ebp+var_18], eax
.text:0000E97A                 mov     [ebp+var_14], eax
.text:0000E97D                 mov     eax, dword ptr ds:___security_cookie
.text:0000E982                 xor     eax, ebp
.text:0000E984                 push    eax
.text:0000E985                 lea     eax, [ebp+var_C]
.text:0000E988                 mov     large fs:0, eax
.text:0000E98E                 mov     [ebp+var_10], esp
.text:0000E991                 mov     [ebp+var_14], ecx
.text:0000E994                 mov     eax, [ebp+arg_0]
.text:0000E997                 push    eax
.text:0000E998                 mov     ecx, [ebp+var_14]
.text:0000E99B                 add     ecx, 8
.text:0000E99E                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:0000E9A3                 mov     [ebp+var_18], eax
.text:0000E9A6                 mov     [ebp+var_4], 0
.text:0000E9AD                 mov     ecx, [ebp+var_18]
.text:0000E9B0                 mov     esi, esp
.text:0000E9B2                 mov     edx, [ecx+4]
.text:0000E9B5                 call    edx
.text:0000E9B7                 cmp     esi, esp
.text:0000E9B9                 call    __RTC_CheckEsp
.text:0000E9BE                 mov     [ebp+var_20], eax
.text:0000E9C1                 mov     eax, [ebp+var_20]
.text:0000E9C4                 push    eax
.text:0000E9C5                 mov     ecx, [ebp+arg_4]
.text:0000E9C8                 call    ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z ; CMyComPtr<IInArchive>::operator=(IInArchive *)
.text:0000E9CD                 xor     eax, eax
.text:0000E9CF                 jmp     short loc_E9F7
.text:0000E9CF ?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z endp
.text:0000E9CF
.text:0000E9D1
.text:0000E9D1 ; =============== S U B R O U T I N E =======================================
.text:0000E9D1
.text:0000E9D1
.text:0000E9D1 __catch$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$0 proc near
.text:0000E9D1                                         ; DATA XREF: .xdata$x:0000EA40o
.text:0000E9D1                 mov     dword ptr [ebp-1Ch], 8007000Eh
.text:0000E9D8                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000E9DF                 mov     eax, offset $LN7_4
.text:0000E9E4                 retn
.text:0000E9E4 __catch$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$0 endp
.text:0000E9E4
.text:0000E9E5 ; ---------------------------------------------------------------------------
.text:0000E9E5                 mov     eax, offset __tryend$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$1
.text:0000E9EA                 retn
.text:0000E9EB ; ---------------------------------------------------------------------------
.text:0000E9EB
.text:0000E9EB __tryend$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$1:
.text:0000E9EB                                         ; DATA XREF: .text:0000E9E5o
.text:0000E9EB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000E9F2                 jmp     short loc_E9F7
.text:0000E9F4 ; ---------------------------------------------------------------------------
.text:0000E9F4
.text:0000E9F4 $LN7_4:                                 ; DATA XREF: __catch$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$0+Eo
.text:0000E9F4                 mov     eax, [ebp-1Ch]
.text:0000E9F7 ; START OF FUNCTION CHUNK FOR ?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
.text:0000E9F7
.text:0000E9F7 loc_E9F7:                               ; CODE XREF: CCodecs::CreateInArchive(uint,CMyComPtr<IInArchive> &)+7Bj
.text:0000E9F7                                         ; .text:0000E9F2j
.text:0000E9F7                 mov     ecx, [ebp+var_C]
.text:0000E9FA                 mov     large fs:0, ecx
.text:0000EA01                 pop     ecx
.text:0000EA02                 pop     edi
.text:0000EA03                 pop     esi
.text:0000EA04                 pop     ebx
.text:0000EA05                 add     esp, 20h
.text:0000EA08                 cmp     ebp, esp
.text:0000EA0A                 call    __RTC_CheckEsp
.text:0000EA0F                 mov     esp, ebp
.text:0000EA11                 pop     ebp
.text:0000EA12                 retn    8
.text:0000EA12 ; END OF FUNCTION CHUNK FOR ?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
.text:0000EA12 ; ---------------------------------------------------------------------------
.text:0000EA15                 align 4
.text:0000EA15 _text           ends
.text:0000EA15
.text$x:0000EA18 ; ===========================================================================
.text$x:0000EA18
.text$x:0000EA18 ; Segment type: Pure code
.text$x:0000EA18 ; Segment permissions: Read/Execute
.text$x:0000EA18 _text$x         segment para public 'CODE' use32
.text$x:0000EA18                 assume cs:_text$x
.text$x:0000EA18                 ;org 0EA18h
.text$x:0000EA18 ; COMDAT (pick associative to section at E954)
.text$x:0000EA18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000EA18
.text$x:0000EA18 ; =============== S U B R O U T I N E =======================================
.text$x:0000EA18
.text$x:0000EA18
.text$x:0000EA18 __ehhandler$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z proc near
.text$x:0000EA18                                         ; DATA XREF: CCodecs::CreateInArchive(uint,CMyComPtr<IInArchive> &)+5o
.text$x:0000EA18
.text$x:0000EA18 arg_4           = dword ptr  8
.text$x:0000EA18
.text$x:0000EA18                 mov     edx, [esp+arg_4]
.text$x:0000EA1C                 lea     eax, [edx+0Ch]
.text$x:0000EA1F                 mov     ecx, [edx-24h]
.text$x:0000EA22                 xor     ecx, eax
.text$x:0000EA24                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000EA29                 mov     eax, offset __ehfuncinfo$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
.text$x:0000EA2E                 jmp     ___CxxFrameHandler3
.text$x:0000EA2E __ehhandler$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z endp
.text$x:0000EA2E
.text$x:0000EA2E ; ---------------------------------------------------------------------------
.text$x:0000EA33                 align 4
.text$x:0000EA33 _text$x         ends
.text$x:0000EA33
.xdata$x:0000EA34 ; ===========================================================================
.xdata$x:0000EA34
.xdata$x:0000EA34 ; Segment type: Pure data
.xdata$x:0000EA34 ; Segment permissions: Read
.xdata$x:0000EA34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EA34                 assume cs:_xdata$x
.xdata$x:0000EA34                 ;org 0EA34h
.xdata$x:0000EA34 ; COMDAT (pick associative to section at E954)
.xdata$x:0000EA34 __catchsym$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$2 dd offset off_40
.xdata$x:0000EA34                                         ; DATA XREF: .xdata$x:0000EA64o
.xdata$x:0000EA38                 align 10h
.xdata$x:0000EA40                 dd offset __catch$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$0
.xdata$x:0000EA44 __unwindtable$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z db 0FFh
.xdata$x:0000EA44                                         ; DATA XREF: .xdata$x:0000EA70o
.xdata$x:0000EA45                 db 0FFh
.xdata$x:0000EA46                 db 0FFh
.xdata$x:0000EA47                 db 0FFh
.xdata$x:0000EA48                 db    0
.xdata$x:0000EA49                 db    0
.xdata$x:0000EA4A                 db    0
.xdata$x:0000EA4B                 db    0
.xdata$x:0000EA4C                 db 0FFh
.xdata$x:0000EA4D                 db 0FFh
.xdata$x:0000EA4E                 db 0FFh
.xdata$x:0000EA4F                 db 0FFh
.xdata$x:0000EA50                 db    0
.xdata$x:0000EA51                 db    0
.xdata$x:0000EA52                 db    0
.xdata$x:0000EA53                 db    0
.xdata$x:0000EA54 __tryblocktable$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z db    0
.xdata$x:0000EA54                                         ; DATA XREF: .xdata$x:0000EA78o
.xdata$x:0000EA55                 db    0
.xdata$x:0000EA56                 db    0
.xdata$x:0000EA57                 db    0
.xdata$x:0000EA58                 db    0
.xdata$x:0000EA59                 db    0
.xdata$x:0000EA5A                 db    0
.xdata$x:0000EA5B                 db    0
.xdata$x:0000EA5C                 db    1
.xdata$x:0000EA5D                 db    0
.xdata$x:0000EA5E                 db    0
.xdata$x:0000EA5F                 db    0
.xdata$x:0000EA60                 db    1
.xdata$x:0000EA61                 db    0
.xdata$x:0000EA62                 db    0
.xdata$x:0000EA63                 db    0
.xdata$x:0000EA64                 dd offset __catchsym$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$2
.xdata$x:0000EA68 __ehfuncinfo$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z db  22h ; "
.xdata$x:0000EA68                                         ; DATA XREF: __ehhandler$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z+11o
.xdata$x:0000EA69                 db    5
.xdata$x:0000EA6A                 db  93h ; ô
.xdata$x:0000EA6B                 db  19h
.xdata$x:0000EA6C                 db    2
.xdata$x:0000EA6D                 db    0
.xdata$x:0000EA6E                 db    0
.xdata$x:0000EA6F                 db    0
.xdata$x:0000EA70                 dd offset __unwindtable$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
.xdata$x:0000EA74                 db    1
.xdata$x:0000EA75                 db    0
.xdata$x:0000EA76                 db    0
.xdata$x:0000EA77                 db    0
.xdata$x:0000EA78                 dd offset __tryblocktable$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
.xdata$x:0000EA7C                 db    0
.xdata$x:0000EA7D                 db    0
.xdata$x:0000EA7E                 db    0
.xdata$x:0000EA7F                 db    0
.xdata$x:0000EA80                 db    0
.xdata$x:0000EA81                 db    0
.xdata$x:0000EA82                 db    0
.xdata$x:0000EA83                 db    0
.xdata$x:0000EA84                 db    0
.xdata$x:0000EA85                 db    0
.xdata$x:0000EA86                 db    0
.xdata$x:0000EA87                 db    0
.xdata$x:0000EA88                 db    1
.xdata$x:0000EA89                 db    0
.xdata$x:0000EA8A                 db    0
.xdata$x:0000EA8B                 db    0
.xdata$x:0000EA8B _xdata$x        ends
.xdata$x:0000EA8B
.text:0000EA8C ; ===========================================================================
.text:0000EA8C
.text:0000EA8C ; Segment type: Pure code
.text:0000EA8C ; Segment permissions: Read/Execute
.text:0000EA8C _text           segment para public 'CODE' use32
.text:0000EA8C                 assume cs:_text
.text:0000EA8C                 ;org 0EA8Ch
.text:0000EA8C ; COMDAT (pick any)
.text:0000EA8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EA8C
.text:0000EA8C ; =============== S U B R O U T I N E =======================================
.text:0000EA8C
.text:0000EA8C ; Attributes: bp-based frame
.text:0000EA8C
.text:0000EA8C ; bool __thiscall UString::IsEqualTo(UString *this, const char *)
.text:0000EA8C                 public ?IsEqualTo@UString@@QBE_NPBD@Z
.text:0000EA8C ?IsEqualTo@UString@@QBE_NPBD@Z proc near
.text:0000EA8C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+437p
.text:0000EA8C                                         ; CArc::OpenStream2(COpenOptions const &)+44Bp
.text:0000EA8C
.text:0000EA8C var_4           = dword ptr -4
.text:0000EA8C arg_0           = dword ptr  8
.text:0000EA8C
.text:0000EA8C                 push    ebp
.text:0000EA8D                 mov     ebp, esp
.text:0000EA8F                 push    ecx
.text:0000EA90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EA97                 mov     [ebp+var_4], ecx
.text:0000EA9A                 mov     eax, [ebp+arg_0]
.text:0000EA9D                 push    eax             ; char *
.text:0000EA9E                 mov     ecx, [ebp+var_4]
.text:0000EAA1                 mov     edx, [ecx]
.text:0000EAA3                 push    edx             ; wchar_t *
.text:0000EAA4                 call    ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqual_Ascii(wchar_t const *,char const *)
.text:0000EAA9                 add     esp, 4
.text:0000EAAC                 cmp     ebp, esp
.text:0000EAAE                 call    __RTC_CheckEsp
.text:0000EAB3                 mov     esp, ebp
.text:0000EAB5                 pop     ebp
.text:0000EAB6                 retn    4
.text:0000EAB6 ?IsEqualTo@UString@@QBE_NPBD@Z endp
.text:0000EAB6
.text:0000EAB6 ; ---------------------------------------------------------------------------
.text:0000EAB9                 align 4
.text:0000EAB9 _text           ends
.text:0000EAB9
.text:0000EABC ; ===========================================================================
.text:0000EABC
.text:0000EABC ; Segment type: Pure code
.text:0000EABC ; Segment permissions: Read/Execute
.text:0000EABC _text           segment para public 'CODE' use32
.text:0000EABC                 assume cs:_text
.text:0000EABC                 ;org 0EABCh
.text:0000EABC ; COMDAT (pick any)
.text:0000EABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EABC
.text:0000EABC ; =============== S U B R O U T I N E =======================================
.text:0000EABC
.text:0000EABC ; Attributes: bp-based frame
.text:0000EABC
.text:0000EABC ; int __thiscall UString::ReverseFind_Dot(UString *__hidden this)
.text:0000EABC                 public ?ReverseFind_Dot@UString@@QBEHXZ
.text:0000EABC ?ReverseFind_Dot@UString@@QBEHXZ proc near
.text:0000EABC                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+BEp
.text:0000EABC                                         ; CArc::OpenStream(COpenOptions const &)+220p
.text:0000EABC
.text:0000EABC var_4           = dword ptr -4
.text:0000EABC
.text:0000EABC                 push    ebp
.text:0000EABD                 mov     ebp, esp
.text:0000EABF                 push    ecx
.text:0000EAC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EAC7                 mov     [ebp+var_4], ecx
.text:0000EACA                 push    2Eh ; '.'       ; wchar_t
.text:0000EACC                 mov     ecx, [ebp+var_4] ; this
.text:0000EACF                 call    ?ReverseFind@UString@@QBEH_W@Z ; UString::ReverseFind(wchar_t)
.text:0000EAD4                 add     esp, 4
.text:0000EAD7                 cmp     ebp, esp
.text:0000EAD9                 call    __RTC_CheckEsp
.text:0000EADE                 mov     esp, ebp
.text:0000EAE0                 pop     ebp
.text:0000EAE1                 retn
.text:0000EAE1 ?ReverseFind_Dot@UString@@QBEHXZ endp
.text:0000EAE1
.text:0000EAE1 ; ---------------------------------------------------------------------------
.text:0000EAE2                 align 4
.text:0000EAE2 _text           ends
.text:0000EAE2
.text:0000EAE4 ; ===========================================================================
.text:0000EAE4
.text:0000EAE4 ; Segment type: Pure code
.text:0000EAE4 ; Segment permissions: Read/Execute
.text:0000EAE4 _text           segment para public 'CODE' use32
.text:0000EAE4                 assume cs:_text
.text:0000EAE4                 ;org 0EAE4h
.text:0000EAE4 ; COMDAT (pick any)
.text:0000EAE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EAE4
.text:0000EAE4 ; =============== S U B R O U T I N E =======================================
.text:0000EAE4
.text:0000EAE4 ; Attributes: bp-based frame
.text:0000EAE4
.text:0000EAE4 ; void __thiscall CLimitedCachedInStream::SetStream(CLimitedCachedInStream *this, struct IInStream *)
.text:0000EAE4                 public ?SetStream@CLimitedCachedInStream@@QAEXPAUIInStream@@@Z
.text:0000EAE4 ?SetStream@CLimitedCachedInStream@@QAEXPAUIInStream@@@Z proc near
.text:0000EAE4                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2DFCp
.text:0000EAE4
.text:0000EAE4 var_4           = dword ptr -4
.text:0000EAE4 arg_0           = dword ptr  8
.text:0000EAE4
.text:0000EAE4                 push    ebp
.text:0000EAE5                 mov     ebp, esp
.text:0000EAE7                 push    ecx
.text:0000EAE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EAEF                 mov     [ebp+var_4], ecx
.text:0000EAF2                 mov     eax, [ebp+arg_0]
.text:0000EAF5                 push    eax
.text:0000EAF6                 mov     ecx, [ebp+var_4]
.text:0000EAF9                 add     ecx, 8
.text:0000EAFC                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:0000EB01                 add     esp, 4
.text:0000EB04                 cmp     ebp, esp
.text:0000EB06                 call    __RTC_CheckEsp
.text:0000EB0B                 mov     esp, ebp
.text:0000EB0D                 pop     ebp
.text:0000EB0E                 retn    4
.text:0000EB0E ?SetStream@CLimitedCachedInStream@@QAEXPAUIInStream@@@Z endp
.text:0000EB0E
.text:0000EB0E ; ---------------------------------------------------------------------------
.text:0000EB11                 align 4
.text:0000EB11 _text           ends
.text:0000EB11
.text:0000EB14 ; ===========================================================================
.text:0000EB14
.text:0000EB14 ; Segment type: Pure code
.text:0000EB14 ; Segment permissions: Read/Execute
.text:0000EB14 _text           segment para public 'CODE' use32
.text:0000EB14                 assume cs:_text
.text:0000EB14                 ;org 0EB14h
.text:0000EB14 ; COMDAT (pick any)
.text:0000EB14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EB14
.text:0000EB14 ; =============== S U B R O U T I N E =======================================
.text:0000EB14
.text:0000EB14 ; Attributes: bp-based frame
.text:0000EB14
.text:0000EB14 ; void __thiscall CLimitedCachedInStream::SetCache(CLimitedCachedInStream *this, unsigned int, unsigned int)
.text:0000EB14                 public ?SetCache@CLimitedCachedInStream@@QAEXII@Z
.text:0000EB14 ?SetCache@CLimitedCachedInStream@@QAEXII@Z proc near
.text:0000EB14                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+335Cp
.text:0000EB14
.text:0000EB14 var_4           = dword ptr -4
.text:0000EB14 arg_0           = dword ptr  8
.text:0000EB14 arg_4           = dword ptr  0Ch
.text:0000EB14
.text:0000EB14                 push    ebp
.text:0000EB15                 mov     ebp, esp
.text:0000EB17                 push    ecx
.text:0000EB18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EB1F                 mov     [ebp+var_4], ecx
.text:0000EB22                 mov     ecx, [ebp+var_4]
.text:0000EB25                 add     ecx, 3Ch ; '<'
.text:0000EB28                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:0000EB2D                 mov     ecx, [ebp+var_4]
.text:0000EB30                 mov     [ecx+30h], eax
.text:0000EB33                 mov     edx, [ebp+var_4]
.text:0000EB36                 mov     eax, [ebp+arg_0]
.text:0000EB39                 mov     [edx+34h], eax
.text:0000EB3C                 mov     ecx, [ebp+var_4]
.text:0000EB3F                 mov     edx, [ebp+arg_4]
.text:0000EB42                 mov     [ecx+38h], edx
.text:0000EB45                 add     esp, 4
.text:0000EB48                 cmp     ebp, esp
.text:0000EB4A                 call    __RTC_CheckEsp
.text:0000EB4F                 mov     esp, ebp
.text:0000EB51                 pop     ebp
.text:0000EB52                 retn    8
.text:0000EB52 ?SetCache@CLimitedCachedInStream@@QAEXII@Z endp
.text:0000EB52
.text:0000EB52 ; ---------------------------------------------------------------------------
.text:0000EB55                 align 4
.text:0000EB55 _text           ends
.text:0000EB55
.text:0000EB58 ; ===========================================================================
.text:0000EB58
.text:0000EB58 ; Segment type: Pure code
.text:0000EB58 ; Segment permissions: Read/Execute
.text:0000EB58 _text           segment para public 'CODE' use32
.text:0000EB58                 assume cs:_text
.text:0000EB58                 ;org 0EB58h
.text:0000EB58 ; COMDAT (pick any)
.text:0000EB58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EB58
.text:0000EB58 ; =============== S U B R O U T I N E =======================================
.text:0000EB58
.text:0000EB58 ; Attributes: bp-based frame
.text:0000EB58
.text:0000EB58 ; __int32 __thiscall CLimitedCachedInStream::InitAndSeek(CLimitedCachedInStream *this, unsigned __int64, unsigned __int64)
.text:0000EB58                 public ?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z
.text:0000EB58 ?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z proc near
.text:0000EB58                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3FC0p
.text:0000EB58                                         ; CArc::OpenStream2(COpenOptions const &)+4029p
.text:0000EB58
.text:0000EB58 var_4           = dword ptr -4
.text:0000EB58 arg_0           = qword ptr  8
.text:0000EB58 arg_8           = qword ptr  10h
.text:0000EB58
.text:0000EB58                 push    ebp
.text:0000EB59                 mov     ebp, esp
.text:0000EB5B                 push    ecx
.text:0000EB5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EB63                 mov     [ebp+var_4], ecx
.text:0000EB66                 mov     eax, [ebp+var_4]
.text:0000EB69                 mov     ecx, dword ptr [ebp+arg_0]
.text:0000EB6C                 mov     [eax+28h], ecx
.text:0000EB6F                 mov     edx, dword ptr [ebp+arg_0+4]
.text:0000EB72                 mov     [eax+2Ch], edx
.text:0000EB75                 mov     eax, [ebp+var_4]
.text:0000EB78                 mov     ecx, dword ptr [ebp+arg_0]
.text:0000EB7B                 mov     [eax+18h], ecx
.text:0000EB7E                 mov     edx, dword ptr [ebp+arg_0+4]
.text:0000EB81                 mov     [eax+1Ch], edx
.text:0000EB84                 mov     eax, [ebp+var_4]
.text:0000EB87                 mov     dword ptr [eax+10h], 0
.text:0000EB8E                 mov     dword ptr [eax+14h], 0
.text:0000EB95                 mov     ecx, [ebp+var_4]
.text:0000EB98                 mov     edx, dword ptr [ebp+arg_8]
.text:0000EB9B                 mov     [ecx+20h], edx
.text:0000EB9E                 mov     eax, dword ptr [ebp+arg_8+4]
.text:0000EBA1                 mov     [ecx+24h], eax
.text:0000EBA4                 mov     ecx, [ebp+var_4] ; this
.text:0000EBA7                 call    ?SeekToPhys@CLimitedCachedInStream@@AAEJXZ ; CLimitedCachedInStream::SeekToPhys(void)
.text:0000EBAC                 add     esp, 4
.text:0000EBAF                 cmp     ebp, esp
.text:0000EBB1                 call    __RTC_CheckEsp
.text:0000EBB6                 mov     esp, ebp
.text:0000EBB8                 pop     ebp
.text:0000EBB9                 retn    10h
.text:0000EBB9 ?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z endp
.text:0000EBB9
.text:0000EBB9 _text           ends
.text:0000EBB9
.text:0000EBBC ; ===========================================================================
.text:0000EBBC
.text:0000EBBC ; Segment type: Pure code
.text:0000EBBC ; Segment permissions: Read/Execute
.text:0000EBBC _text           segment para public 'CODE' use32
.text:0000EBBC                 assume cs:_text
.text:0000EBBC                 ;org 0EBBCh
.text:0000EBBC ; COMDAT (pick any)
.text:0000EBBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EBBC
.text:0000EBBC ; =============== S U B R O U T I N E =======================================
.text:0000EBBC
.text:0000EBBC ; Attributes: bp-based frame
.text:0000EBBC
.text:0000EBBC ; __int32 __thiscall CLimitedCachedInStream::SeekToPhys(CLimitedCachedInStream *__hidden this)
.text:0000EBBC                 public ?SeekToPhys@CLimitedCachedInStream@@AAEJXZ
.text:0000EBBC ?SeekToPhys@CLimitedCachedInStream@@AAEJXZ proc near
.text:0000EBBC                                         ; CODE XREF: CLimitedCachedInStream::InitAndSeek(unsigned __int64,unsigned __int64)+4Fp
.text:0000EBBC
.text:0000EBBC var_8           = dword ptr -8
.text:0000EBBC var_4           = dword ptr -4
.text:0000EBBC
.text:0000EBBC                 push    ebp
.text:0000EBBD                 mov     ebp, esp
.text:0000EBBF                 sub     esp, 8
.text:0000EBC2                 push    esi
.text:0000EBC3                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000EBCA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EBD1                 mov     [ebp+var_4], ecx
.text:0000EBD4                 mov     ecx, [ebp+var_4]
.text:0000EBD7                 add     ecx, 8
.text:0000EBDA                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000EBDF                 mov     [ebp+var_8], eax
.text:0000EBE2                 mov     esi, esp
.text:0000EBE4                 push    0
.text:0000EBE6                 push    0
.text:0000EBE8                 mov     eax, [ebp+var_4]
.text:0000EBEB                 mov     ecx, [eax+1Ch]
.text:0000EBEE                 push    ecx
.text:0000EBEF                 mov     edx, [eax+18h]
.text:0000EBF2                 push    edx
.text:0000EBF3                 mov     eax, [ebp+var_8]
.text:0000EBF6                 push    eax
.text:0000EBF7                 mov     ecx, [ebp+var_8]
.text:0000EBFA                 mov     edx, [ecx]
.text:0000EBFC                 mov     eax, [edx+10h]
.text:0000EBFF                 call    eax
.text:0000EC01                 cmp     esi, esp
.text:0000EC03                 call    __RTC_CheckEsp
.text:0000EC08                 pop     esi
.text:0000EC09                 add     esp, 8
.text:0000EC0C                 cmp     ebp, esp
.text:0000EC0E                 call    __RTC_CheckEsp
.text:0000EC13                 mov     esp, ebp
.text:0000EC15                 pop     ebp
.text:0000EC16                 retn
.text:0000EC16 ?SeekToPhys@CLimitedCachedInStream@@AAEJXZ endp
.text:0000EC16
.text:0000EC16 ; ---------------------------------------------------------------------------
.text:0000EC17                 align 4
.text:0000EC17 _text           ends
.text:0000EC17
.text:0000EC18 ; ===========================================================================
.text:0000EC18
.text:0000EC18 ; Segment type: Pure code
.text:0000EC18 ; Segment permissions: Read/Execute
.text:0000EC18 _text           segment para public 'CODE' use32
.text:0000EC18                 assume cs:_text
.text:0000EC18                 ;org 0EC18h
.text:0000EC18 ; COMDAT (pick any)
.text:0000EC18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EC18
.text:0000EC18 ; =============== S U B R O U T I N E =======================================
.text:0000EC18
.text:0000EC18 ; Attributes: bp-based frame
.text:0000EC18
.text:0000EC18 ; bool __thiscall CArcInfoEx::Flags_FindSignature(CArcInfoEx *__hidden this)
.text:0000EC18                 public ?Flags_FindSignature@CArcInfoEx@@QBE_NXZ
.text:0000EC18 ?Flags_FindSignature@CArcInfoEx@@QBE_NXZ proc near
.text:0000EC18                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+165Dp
.text:0000EC18
.text:0000EC18 var_4           = dword ptr -4
.text:0000EC18
.text:0000EC18                 push    ebp
.text:0000EC19                 mov     ebp, esp
.text:0000EC1B                 push    ecx
.text:0000EC1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EC23                 mov     [ebp+var_4], ecx
.text:0000EC26                 mov     eax, [ebp+var_4]
.text:0000EC29                 mov     eax, [eax]
.text:0000EC2B                 and     eax, 8
.text:0000EC2E                 neg     eax
.text:0000EC30                 sbb     eax, eax
.text:0000EC32                 neg     eax
.text:0000EC34                 mov     esp, ebp
.text:0000EC36                 pop     ebp
.text:0000EC37                 retn
.text:0000EC37 ?Flags_FindSignature@CArcInfoEx@@QBE_NXZ endp
.text:0000EC37
.text:0000EC37 _text           ends
.text:0000EC37
.text:0000EC38 ; ===========================================================================
.text:0000EC38
.text:0000EC38 ; Segment type: Pure code
.text:0000EC38 ; Segment permissions: Read/Execute
.text:0000EC38 _text           segment para public 'CODE' use32
.text:0000EC38                 assume cs:_text
.text:0000EC38                 ;org 0EC38h
.text:0000EC38 ; COMDAT (pick any)
.text:0000EC38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EC38
.text:0000EC38 ; =============== S U B R O U T I N E =======================================
.text:0000EC38
.text:0000EC38 ; Attributes: bp-based frame
.text:0000EC38
.text:0000EC38 ; bool __thiscall CArcInfoEx::Flags_UseGlobalOffset(CArcInfoEx *__hidden this)
.text:0000EC38                 public ?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ
.text:0000EC38 ?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ proc near
.text:0000EC38                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3F9Cp
.text:0000EC38                                         ; CArc::OpenStream2(COpenOptions const &)+4104p ...
.text:0000EC38
.text:0000EC38 var_4           = dword ptr -4
.text:0000EC38
.text:0000EC38                 push    ebp
.text:0000EC39                 mov     ebp, esp
.text:0000EC3B                 push    ecx
.text:0000EC3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EC43                 mov     [ebp+var_4], ecx
.text:0000EC46                 mov     eax, [ebp+var_4]
.text:0000EC49                 mov     eax, [eax]
.text:0000EC4B                 and     eax, 20h
.text:0000EC4E                 neg     eax
.text:0000EC50                 sbb     eax, eax
.text:0000EC52                 neg     eax
.text:0000EC54                 mov     esp, ebp
.text:0000EC56                 pop     ebp
.text:0000EC57                 retn
.text:0000EC57 ?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ endp
.text:0000EC57
.text:0000EC57 _text           ends
.text:0000EC57
.text:0000EC58 ; ===========================================================================
.text:0000EC58
.text:0000EC58 ; Segment type: Pure code
.text:0000EC58 ; Segment permissions: Read/Execute
.text:0000EC58 _text           segment para public 'CODE' use32
.text:0000EC58                 assume cs:_text
.text:0000EC58                 ;org 0EC58h
.text:0000EC58 ; COMDAT (pick any)
.text:0000EC58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EC58
.text:0000EC58 ; =============== S U B R O U T I N E =======================================
.text:0000EC58
.text:0000EC58 ; Attributes: bp-based frame
.text:0000EC58
.text:0000EC58 ; bool __thiscall CArcInfoEx::Flags_StartOpen(CArcInfoEx *__hidden this)
.text:0000EC58                 public ?Flags_StartOpen@CArcInfoEx@@QBE_NXZ
.text:0000EC58 ?Flags_StartOpen@CArcInfoEx@@QBE_NXZ proc near
.text:0000EC58                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1BCBp
.text:0000EC58                                         ; CArc::OpenStream2(COpenOptions const &)+2B44p
.text:0000EC58
.text:0000EC58 var_4           = dword ptr -4
.text:0000EC58
.text:0000EC58                 push    ebp
.text:0000EC59                 mov     ebp, esp
.text:0000EC5B                 push    ecx
.text:0000EC5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EC63                 mov     [ebp+var_4], ecx
.text:0000EC66                 mov     eax, [ebp+var_4]
.text:0000EC69                 mov     eax, [eax]
.text:0000EC6B                 and     eax, 40h
.text:0000EC6E                 neg     eax
.text:0000EC70                 sbb     eax, eax
.text:0000EC72                 neg     eax
.text:0000EC74                 mov     esp, ebp
.text:0000EC76                 pop     ebp
.text:0000EC77                 retn
.text:0000EC77 ?Flags_StartOpen@CArcInfoEx@@QBE_NXZ endp
.text:0000EC77
.text:0000EC77 _text           ends
.text:0000EC77
.text:0000EC78 ; ===========================================================================
.text:0000EC78
.text:0000EC78 ; Segment type: Pure code
.text:0000EC78 ; Segment permissions: Read/Execute
.text:0000EC78 _text           segment para public 'CODE' use32
.text:0000EC78                 assume cs:_text
.text:0000EC78                 ;org 0EC78h
.text:0000EC78 ; COMDAT (pick any)
.text:0000EC78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EC78
.text:0000EC78 ; =============== S U B R O U T I N E =======================================
.text:0000EC78
.text:0000EC78 ; Attributes: bp-based frame
.text:0000EC78
.text:0000EC78 ; bool __thiscall CArcInfoEx::Flags_BackwardOpen(CArcInfoEx *__hidden this)
.text:0000EC78                 public ?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ
.text:0000EC78 ?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ proc near
.text:0000EC78                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+BBCp
.text:0000EC78                                         ; CArc::OpenStream2(COpenOptions const &)+1BDDp
.text:0000EC78
.text:0000EC78 var_4           = dword ptr -4
.text:0000EC78
.text:0000EC78                 push    ebp
.text:0000EC79                 mov     ebp, esp
.text:0000EC7B                 push    ecx
.text:0000EC7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EC83                 mov     [ebp+var_4], ecx
.text:0000EC86                 mov     eax, [ebp+var_4]
.text:0000EC89                 mov     eax, [eax]
.text:0000EC8B                 and     eax, 100h
.text:0000EC90                 neg     eax
.text:0000EC92                 sbb     eax, eax
.text:0000EC94                 neg     eax
.text:0000EC96                 mov     esp, ebp
.text:0000EC98                 pop     ebp
.text:0000EC99                 retn
.text:0000EC99 ?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ endp
.text:0000EC99
.text:0000EC99 ; ---------------------------------------------------------------------------
.text:0000EC9A                 align 4
.text:0000EC9A _text           ends
.text:0000EC9A
.text:0000EC9C ; ===========================================================================
.text:0000EC9C
.text:0000EC9C ; Segment type: Pure code
.text:0000EC9C ; Segment permissions: Read/Execute
.text:0000EC9C _text           segment para public 'CODE' use32
.text:0000EC9C                 assume cs:_text
.text:0000EC9C                 ;org 0EC9Ch
.text:0000EC9C ; COMDAT (pick any)
.text:0000EC9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EC9C
.text:0000EC9C ; =============== S U B R O U T I N E =======================================
.text:0000EC9C
.text:0000EC9C ; Attributes: bp-based frame
.text:0000EC9C
.text:0000EC9C ; bool __thiscall CArcInfoEx::Flags_PureStartOpen(CArcInfoEx *__hidden this)
.text:0000EC9C                 public ?Flags_PureStartOpen@CArcInfoEx@@QBE_NXZ
.text:0000EC9C ?Flags_PureStartOpen@CArcInfoEx@@QBE_NXZ proc near
.text:0000EC9C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1BB9p
.text:0000EC9C
.text:0000EC9C var_4           = dword ptr -4
.text:0000EC9C
.text:0000EC9C                 push    ebp
.text:0000EC9D                 mov     ebp, esp
.text:0000EC9F                 push    ecx
.text:0000ECA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000ECA7                 mov     [ebp+var_4], ecx
.text:0000ECAA                 mov     eax, [ebp+var_4]
.text:0000ECAD                 mov     eax, [eax]
.text:0000ECAF                 and     eax, 80h
.text:0000ECB4                 neg     eax
.text:0000ECB6                 sbb     eax, eax
.text:0000ECB8                 neg     eax
.text:0000ECBA                 mov     esp, ebp
.text:0000ECBC                 pop     ebp
.text:0000ECBD                 retn
.text:0000ECBD ?Flags_PureStartOpen@CArcInfoEx@@QBE_NXZ endp
.text:0000ECBD
.text:0000ECBD ; ---------------------------------------------------------------------------
.text:0000ECBE                 align 10h
.text:0000ECBE _text           ends
.text:0000ECBE
.text:0000ECC0 ; ===========================================================================
.text:0000ECC0
.text:0000ECC0 ; Segment type: Pure code
.text:0000ECC0 ; Segment permissions: Read/Execute
.text:0000ECC0 _text           segment para public 'CODE' use32
.text:0000ECC0                 assume cs:_text
.text:0000ECC0                 ;org 0ECC0h
.text:0000ECC0 ; COMDAT (pick any)
.text:0000ECC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000ECC0
.text:0000ECC0 ; =============== S U B R O U T I N E =======================================
.text:0000ECC0
.text:0000ECC0 ; Attributes: bp-based frame
.text:0000ECC0
.text:0000ECC0 ; bool __thiscall CArcInfoEx::IsSplit(CArcInfoEx *__hidden this)
.text:0000ECC0                 public ?IsSplit@CArcInfoEx@@QBE_NXZ
.text:0000ECC0 ?IsSplit@CArcInfoEx@@QBE_NXZ proc near  ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+253p
.text:0000ECC0                                         ; CArc::OpenStream2(COpenOptions const &)+1AEBp
.text:0000ECC0
.text:0000ECC0 var_4           = dword ptr -4
.text:0000ECC0
.text:0000ECC0                 push    ebp
.text:0000ECC1                 mov     ebp, esp
.text:0000ECC3                 push    ecx
.text:0000ECC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000ECCB                 mov     [ebp+var_4], ecx
.text:0000ECCE                 push    offset ??_C@_05EAFAMACM@Split?$AA@ ; "Split"
.text:0000ECD3                 mov     ecx, [ebp+var_4]
.text:0000ECD6                 add     ecx, 0Ch
.text:0000ECD9                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000ECDE                 push    eax             ; wchar_t *
.text:0000ECDF                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:0000ECE4                 add     esp, 4
.text:0000ECE7                 cmp     ebp, esp
.text:0000ECE9                 call    __RTC_CheckEsp
.text:0000ECEE                 mov     esp, ebp
.text:0000ECF0                 pop     ebp
.text:0000ECF1                 retn
.text:0000ECF1 ?IsSplit@CArcInfoEx@@QBE_NXZ endp
.text:0000ECF1
.text:0000ECF1 ; ---------------------------------------------------------------------------
.text:0000ECF2                 align 4
.text:0000ECF2 _text           ends
.text:0000ECF2
.rdata:0000ECF4 ; ===========================================================================
.rdata:0000ECF4
.rdata:0000ECF4 ; Segment type: Pure data
.rdata:0000ECF4 ; Segment permissions: Read
.rdata:0000ECF4 _rdata          segment dword public 'DATA' use32
.rdata:0000ECF4                 assume cs:_rdata
.rdata:0000ECF4                 ;org 0ECF4h
.rdata:0000ECF4 ; COMDAT (pick any)
.rdata:0000ECF4                 public ??_C@_05EAFAMACM@Split?$AA@
.rdata:0000ECF4 ; char `string'[]
.rdata:0000ECF4 ??_C@_05EAFAMACM@Split?$AA@ db 'Split',0
.rdata:0000ECF4                                         ; DATA XREF: CArcInfoEx::IsSplit(void)+Eo
.rdata:0000ECFA                 align 4
.rdata:0000ECFA _rdata          ends
.rdata:0000ECFA
.text:0000ECFC ; ===========================================================================
.text:0000ECFC
.text:0000ECFC ; Segment type: Pure code
.text:0000ECFC ; Segment permissions: Read/Execute
.text:0000ECFC _text           segment para public 'CODE' use32
.text:0000ECFC                 assume cs:_text
.text:0000ECFC                 ;org 0ECFCh
.text:0000ECFC ; COMDAT (pick any)
.text:0000ECFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000ECFC
.text:0000ECFC ; =============== S U B R O U T I N E =======================================
.text:0000ECFC
.text:0000ECFC ; Attributes: bp-based frame
.text:0000ECFC
.text:0000ECFC ; bool __thiscall COpenSpecFlags::CanReturn_NonStart(COpenSpecFlags *__hidden this)
.text:0000ECFC                 public ?CanReturn_NonStart@COpenSpecFlags@@QBE_NXZ
.text:0000ECFC ?CanReturn_NonStart@COpenSpecFlags@@QBE_NXZ proc near
.text:0000ECFC                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1345p
.text:0000ECFC
.text:0000ECFC var_8           = dword ptr -8
.text:0000ECFC var_4           = dword ptr -4
.text:0000ECFC
.text:0000ECFC                 push    ebp
.text:0000ECFD                 mov     ebp, esp
.text:0000ECFF                 sub     esp, 8
.text:0000ED02                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000ED09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000ED10                 mov     [ebp+var_4], ecx
.text:0000ED13                 mov     eax, [ebp+var_4]
.text:0000ED16                 movzx   ecx, byte ptr [eax+1]
.text:0000ED1A                 test    ecx, ecx
.text:0000ED1C                 jnz     short loc_ED32
.text:0000ED1E                 mov     edx, [ebp+var_4]
.text:0000ED21                 movzx   eax, byte ptr [edx+2]
.text:0000ED25                 test    eax, eax
.text:0000ED27                 jnz     short loc_ED32
.text:0000ED29                 mov     [ebp+var_8], 0
.text:0000ED30                 jmp     short loc_ED39
.text:0000ED32 ; ---------------------------------------------------------------------------
.text:0000ED32
.text:0000ED32 loc_ED32:                               ; CODE XREF: COpenSpecFlags::CanReturn_NonStart(void)+20j
.text:0000ED32                                         ; COpenSpecFlags::CanReturn_NonStart(void)+2Bj
.text:0000ED32                 mov     [ebp+var_8], 1
.text:0000ED39
.text:0000ED39 loc_ED39:                               ; CODE XREF: COpenSpecFlags::CanReturn_NonStart(void)+34j
.text:0000ED39                 mov     al, byte ptr [ebp+var_8]
.text:0000ED3C                 mov     esp, ebp
.text:0000ED3E                 pop     ebp
.text:0000ED3F                 retn
.text:0000ED3F ?CanReturn_NonStart@COpenSpecFlags@@QBE_NXZ endp
.text:0000ED3F
.text:0000ED3F _text           ends
.text:0000ED3F
.text:0000ED40 ; ===========================================================================
.text:0000ED40
.text:0000ED40 ; Segment type: Pure code
.text:0000ED40 ; Segment permissions: Read/Execute
.text:0000ED40 _text           segment para public 'CODE' use32
.text:0000ED40                 assume cs:_text
.text:0000ED40                 ;org 0ED40h
.text:0000ED40 ; COMDAT (pick any)
.text:0000ED40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000ED40
.text:0000ED40 ; =============== S U B R O U T I N E =======================================
.text:0000ED40
.text:0000ED40 ; Attributes: bp-based frame
.text:0000ED40
.text:0000ED40 ; const struct COpenSpecFlags *__thiscall COpenType::GetSpec(COpenType *this, bool, bool, bool)
.text:0000ED40                 public ?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z
.text:0000ED40 ?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z proc near
.text:0000ED40                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+120Ep
.text:0000ED40                                         ; CArc::OpenStream2(COpenOptions const &)+2397p ...
.text:0000ED40
.text:0000ED40 var_1C          = dword ptr -1Ch
.text:0000ED40 var_18          = dword ptr -18h
.text:0000ED40 var_14          = dword ptr -14h
.text:0000ED40 var_10          = dword ptr -10h
.text:0000ED40 var_C           = dword ptr -0Ch
.text:0000ED40 var_8           = dword ptr -8
.text:0000ED40 var_4           = dword ptr -4
.text:0000ED40 arg_0           = byte ptr  8
.text:0000ED40 arg_4           = byte ptr  0Ch
.text:0000ED40 arg_8           = byte ptr  10h
.text:0000ED40
.text:0000ED40                 push    ebp
.text:0000ED41                 mov     ebp, esp
.text:0000ED43                 sub     esp, 1Ch
.text:0000ED46                 mov     eax, 0CCCCCCCCh
.text:0000ED4B                 mov     [ebp+var_1C], eax
.text:0000ED4E                 mov     [ebp+var_18], eax
.text:0000ED51                 mov     [ebp+var_14], eax
.text:0000ED54                 mov     [ebp+var_10], eax
.text:0000ED57                 mov     [ebp+var_C], eax
.text:0000ED5A                 mov     [ebp+var_8], eax
.text:0000ED5D                 mov     [ebp+var_4], eax
.text:0000ED60                 mov     [ebp+var_4], ecx
.text:0000ED63                 movzx   eax, [ebp+arg_0]
.text:0000ED67                 test    eax, eax
.text:0000ED69                 jz      short loc_ED76
.text:0000ED6B                 mov     ecx, [ebp+var_4]
.text:0000ED6E                 add     ecx, 4
.text:0000ED71                 mov     [ebp+var_14], ecx
.text:0000ED74                 jmp     short loc_EDBD
.text:0000ED76 ; ---------------------------------------------------------------------------
.text:0000ED76
.text:0000ED76 loc_ED76:                               ; CODE XREF: COpenType::GetSpec(bool,bool,bool)+29j
.text:0000ED76                 movzx   edx, [ebp+arg_4]
.text:0000ED7A                 test    edx, edx
.text:0000ED7C                 jz      short loc_ED89
.text:0000ED7E                 mov     eax, [ebp+var_4]
.text:0000ED81                 add     eax, 7
.text:0000ED84                 mov     [ebp+var_18], eax
.text:0000ED87                 jmp     short loc_EDB1
.text:0000ED89 ; ---------------------------------------------------------------------------
.text:0000ED89
.text:0000ED89 loc_ED89:                               ; CODE XREF: COpenType::GetSpec(bool,bool,bool)+3Cj
.text:0000ED89                 movzx   ecx, [ebp+arg_8]
.text:0000ED8D                 test    ecx, ecx
.text:0000ED8F                 jz      short loc_ED9C
.text:0000ED91                 mov     edx, [ebp+var_4]
.text:0000ED94                 add     edx, 0Dh
.text:0000ED97                 mov     [ebp+var_1C], edx
.text:0000ED9A                 jmp     short loc_EDA5
.text:0000ED9C ; ---------------------------------------------------------------------------
.text:0000ED9C
.text:0000ED9C loc_ED9C:                               ; CODE XREF: COpenType::GetSpec(bool,bool,bool)+4Fj
.text:0000ED9C                 mov     eax, [ebp+var_4]
.text:0000ED9F                 add     eax, 0Ah
.text:0000EDA2                 mov     [ebp+var_1C], eax
.text:0000EDA5
.text:0000EDA5 loc_EDA5:                               ; CODE XREF: COpenType::GetSpec(bool,bool,bool)+5Aj
.text:0000EDA5                 mov     ecx, [ebp+var_1C]
.text:0000EDA8                 mov     [ebp+var_10], ecx
.text:0000EDAB                 mov     edx, [ebp+var_10]
.text:0000EDAE                 mov     [ebp+var_18], edx
.text:0000EDB1
.text:0000EDB1 loc_EDB1:                               ; CODE XREF: COpenType::GetSpec(bool,bool,bool)+47j
.text:0000EDB1                 mov     eax, [ebp+var_18]
.text:0000EDB4                 mov     [ebp+var_C], eax
.text:0000EDB7                 mov     ecx, [ebp+var_C]
.text:0000EDBA                 mov     [ebp+var_14], ecx
.text:0000EDBD
.text:0000EDBD loc_EDBD:                               ; CODE XREF: COpenType::GetSpec(bool,bool,bool)+34j
.text:0000EDBD                 mov     edx, [ebp+var_14]
.text:0000EDC0                 mov     [ebp+var_8], edx
.text:0000EDC3                 mov     eax, [ebp+var_8]
.text:0000EDC6                 mov     esp, ebp
.text:0000EDC8                 pop     ebp
.text:0000EDC9                 retn    0Ch
.text:0000EDC9 ?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z endp
.text:0000EDC9
.text:0000EDC9 _text           ends
.text:0000EDC9
.text:0000EDCC ; ===========================================================================
.text:0000EDCC
.text:0000EDCC ; Segment type: Pure code
.text:0000EDCC ; Segment permissions: Read/Execute
.text:0000EDCC _text           segment para public 'CODE' use32
.text:0000EDCC                 assume cs:_text
.text:0000EDCC                 ;org 0EDCCh
.text:0000EDCC ; COMDAT (pick any)
.text:0000EDCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EDCC
.text:0000EDCC ; =============== S U B R O U T I N E =======================================
.text:0000EDCC
.text:0000EDCC ; Attributes: bp-based frame
.text:0000EDCC
.text:0000EDCC ; void __thiscall NArchive::NParser::CParseItem::NormalizeOffset(NArchive::NParser::CParseItem *__hidden this)
.text:0000EDCC                 public ?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ
.text:0000EDCC ?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ proc near
.text:0000EDCC                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+234Ep
.text:0000EDCC                                         ; CArc::OpenStream2(COpenOptions const &)+4942p
.text:0000EDCC
.text:0000EDCC var_8           = dword ptr -8
.text:0000EDCC var_4           = dword ptr -4
.text:0000EDCC
.text:0000EDCC                 push    ebp
.text:0000EDCD                 mov     ebp, esp
.text:0000EDCF                 sub     esp, 8
.text:0000EDD2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000EDD9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EDE0                 mov     [ebp+var_4], ecx
.text:0000EDE3                 mov     eax, [ebp+var_4]
.text:0000EDE6                 mov     [ebp+var_8], eax
.text:0000EDE9                 mov     ecx, [ebp+var_8]
.text:0000EDEC                 cmp     dword ptr [ecx+4], 0
.text:0000EDF0                 jg      short loc_EE26
.text:0000EDF2                 jl      short loc_EDFC
.text:0000EDF4                 mov     edx, [ebp+var_8]
.text:0000EDF7                 cmp     dword ptr [edx], 0
.text:0000EDFA                 jnb     short loc_EE26
.text:0000EDFC
.text:0000EDFC loc_EDFC:                               ; CODE XREF: NArchive::NParser::CParseItem::NormalizeOffset(void)+26j
.text:0000EDFC                 mov     eax, [ebp+var_4]
.text:0000EDFF                 mov     ecx, [ebp+var_4]
.text:0000EE02                 mov     edx, [eax+8]
.text:0000EE05                 add     edx, [ecx]
.text:0000EE07                 mov     eax, [eax+0Ch]
.text:0000EE0A                 adc     eax, [ecx+4]
.text:0000EE0D                 mov     ecx, [ebp+var_4]
.text:0000EE10                 mov     [ecx+8], edx
.text:0000EE13                 mov     [ecx+0Ch], eax
.text:0000EE16                 mov     edx, [ebp+var_4]
.text:0000EE19                 mov     dword ptr [edx], 0
.text:0000EE1F                 mov     dword ptr [edx+4], 0
.text:0000EE26
.text:0000EE26 loc_EE26:                               ; CODE XREF: NArchive::NParser::CParseItem::NormalizeOffset(void)+24j
.text:0000EE26                                         ; NArchive::NParser::CParseItem::NormalizeOffset(void)+2Ej
.text:0000EE26                 mov     esp, ebp
.text:0000EE28                 pop     ebp
.text:0000EE29                 retn
.text:0000EE29 ?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ endp
.text:0000EE29
.text:0000EE29 ; ---------------------------------------------------------------------------
.text:0000EE2A                 align 4
.text:0000EE2A _text           ends
.text:0000EE2A
.text:0000EE2C ; ===========================================================================
.text:0000EE2C
.text:0000EE2C ; Segment type: Pure code
.text:0000EE2C ; Segment permissions: Read/Execute
.text:0000EE2C _text           segment para public 'CODE' use32
.text:0000EE2C                 assume cs:_text
.text:0000EE2C                 ;org 0EE2Ch
.text:0000EE2C ; COMDAT (pick any)
.text:0000EE2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EE2C
.text:0000EE2C ; =============== S U B R O U T I N E =======================================
.text:0000EE2C
.text:0000EE2C ; Attributes: bp-based frame
.text:0000EE2C
.text:0000EE2C ; _DWORD __thiscall NArchive::NParser::CHandler::CHandler(NArchive::NParser::CHandler *__hidden this)
.text:0000EE2C                 public ??0CHandler@NParser@NArchive@@QAE@XZ
.text:0000EE2C ??0CHandler@NParser@NArchive@@QAE@XZ proc near
.text:0000EE2C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+16EBp
.text:0000EE2C
.text:0000EE2C var_10          = dword ptr -10h
.text:0000EE2C var_C           = dword ptr -0Ch
.text:0000EE2C var_4           = dword ptr -4
.text:0000EE2C
.text:0000EE2C                 push    ebp
.text:0000EE2D                 mov     ebp, esp
.text:0000EE2F                 push    0FFFFFFFFh
.text:0000EE31                 push    offset __ehhandler$??0CHandler@NParser@NArchive@@QAE@XZ
.text:0000EE36                 mov     eax, large fs:0
.text:0000EE3C                 push    eax
.text:0000EE3D                 push    ecx
.text:0000EE3E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000EE45                 mov     eax, dword ptr ds:___security_cookie
.text:0000EE4A                 xor     eax, ebp
.text:0000EE4C                 push    eax
.text:0000EE4D                 lea     eax, [ebp+var_C]
.text:0000EE50                 mov     large fs:0, eax
.text:0000EE56                 mov     [ebp+var_10], ecx
.text:0000EE59                 mov     ecx, [ebp+var_10] ; this
.text:0000EE5C                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:0000EE61                 mov     ecx, [ebp+var_10]
.text:0000EE64                 add     ecx, 4          ; this
.text:0000EE67                 call    ??0IInArchiveGetStream@@QAE@XZ ; IInArchiveGetStream::IInArchiveGetStream(void)
.text:0000EE6C                 mov     ecx, [ebp+var_10]
.text:0000EE6F                 add     ecx, 8          ; this
.text:0000EE72                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000EE77                 mov     eax, [ebp+var_10]
.text:0000EE7A                 mov     dword ptr [eax], offset ??_7CHandler@NParser@NArchive@@6BIInArchive@@@ ; const NArchive::NParser::CHandler::`vftable'{for `IInArchive'}
.text:0000EE80                 mov     ecx, [ebp+var_10]
.text:0000EE83                 mov     dword ptr [ecx+4], offset ??_7CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@ ; const NArchive::NParser::CHandler::`vftable'{for `IInArchiveGetStream'}
.text:0000EE8A                 mov     ecx, [ebp+var_10]
.text:0000EE8D                 add     ecx, 0Ch
.text:0000EE90                 call    ??0?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::CObjectVector<NArchive::NParser::CParseItem>(void)
.text:0000EE95                 mov     [ebp+var_4], 0
.text:0000EE9C                 mov     edx, [ebp+var_10]
.text:0000EE9F                 mov     dword ptr [edx+18h], 0
.text:0000EEA6                 mov     dword ptr [edx+1Ch], 0
.text:0000EEAD                 mov     ecx, [ebp+var_10]
.text:0000EEB0                 add     ecx, 20h ; ' '
.text:0000EEB3                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:0000EEB8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000EEBF                 mov     eax, [ebp+var_10]
.text:0000EEC2                 mov     ecx, [ebp+var_C]
.text:0000EEC5                 mov     large fs:0, ecx
.text:0000EECC                 pop     ecx
.text:0000EECD                 add     esp, 10h
.text:0000EED0                 cmp     ebp, esp
.text:0000EED2                 call    __RTC_CheckEsp
.text:0000EED7                 mov     esp, ebp
.text:0000EED9                 pop     ebp
.text:0000EEDA                 retn
.text:0000EEDA ??0CHandler@NParser@NArchive@@QAE@XZ endp
.text:0000EEDA
.text:0000EEDA ; ---------------------------------------------------------------------------
.text:0000EEDB                 align 4
.text:0000EEDB _text           ends
.text:0000EEDB
.text$x:0000EEDC ; ===========================================================================
.text$x:0000EEDC
.text$x:0000EEDC ; Segment type: Pure code
.text$x:0000EEDC ; Segment permissions: Read/Execute
.text$x:0000EEDC _text$x         segment para public 'CODE' use32
.text$x:0000EEDC                 assume cs:_text$x
.text$x:0000EEDC                 ;org 0EEDCh
.text$x:0000EEDC ; COMDAT (pick associative to section at EE2C)
.text$x:0000EEDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000EEDC
.text$x:0000EEDC ; =============== S U B R O U T I N E =======================================
.text$x:0000EEDC
.text$x:0000EEDC
.text$x:0000EEDC __unwindfunclet$??0CHandler@NParser@NArchive@@QAE@XZ$0 proc near
.text$x:0000EEDC                                         ; DATA XREF: .xdata$x:0000EF54o
.text$x:0000EEDC                 mov     ecx, [ebp-10h]
.text$x:0000EEDF                 add     ecx, 0Ch
.text$x:0000EEE2                 jmp     ??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>(void)
.text$x:0000EEE2 __unwindfunclet$??0CHandler@NParser@NArchive@@QAE@XZ$0 endp
.text$x:0000EEE2
.text$x:0000EEE7
.text$x:0000EEE7 ; =============== S U B R O U T I N E =======================================
.text$x:0000EEE7
.text$x:0000EEE7
.text$x:0000EEE7 __ehhandler$??0CHandler@NParser@NArchive@@QAE@XZ proc near
.text$x:0000EEE7                                         ; DATA XREF: NArchive::NParser::CHandler::CHandler(void)+5o
.text$x:0000EEE7
.text$x:0000EEE7 arg_4           = dword ptr  8
.text$x:0000EEE7
.text$x:0000EEE7                 mov     edx, [esp+arg_4]
.text$x:0000EEEB                 lea     eax, [edx+0Ch]
.text$x:0000EEEE                 mov     ecx, [edx-8]
.text$x:0000EEF1                 xor     ecx, eax
.text$x:0000EEF3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000EEF8                 mov     eax, offset __ehfuncinfo$??0CHandler@NParser@NArchive@@QAE@XZ
.text$x:0000EEFD                 jmp     ___CxxFrameHandler3
.text$x:0000EEFD __ehhandler$??0CHandler@NParser@NArchive@@QAE@XZ endp
.text$x:0000EEFD
.text$x:0000EEFD ; ---------------------------------------------------------------------------
.text$x:0000EF02                 align 4
.text$x:0000EF02 _text$x         ends
.text$x:0000EF02
.rdata:0000EF04 ; ===========================================================================
.rdata:0000EF04
.rdata:0000EF04 ; Segment type: Pure data
.rdata:0000EF04 ; Segment permissions: Read
.rdata:0000EF04 _rdata          segment dword public 'DATA' use32
.rdata:0000EF04                 assume cs:_rdata
.rdata:0000EF04                 ;org 0EF04h
.rdata:0000EF04 ; COMDAT (pick largest)
.rdata:0000EF04                 dd offset ??_R4CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@ ; const NArchive::NParser::CHandler::`RTTI Complete Object Locator'{for `IInArchiveGetStream'}
.rdata:0000EF08                 public ??_7CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@
.rdata:0000EF08 ; const NArchive::NParser::CHandler::`vftable'{for `IInArchiveGetStream'}
.rdata:0000EF08 ??_7CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@ dd offset ?QueryInterface@CHandler@NParser@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000EF08                                         ; DATA XREF: NArchive::NParser::CHandler::CHandler(void)+57o
.rdata:0000EF08                                         ; [thunk]:NArchive::NParser::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000EF0C                 dd offset ?AddRef@CHandler@NParser@NArchive@@W3AGKXZ ; [thunk]:NArchive::NParser::CHandler::AddRef`adjustor{4}' (void)
.rdata:0000EF10                 dd offset ?Release@CHandler@NParser@NArchive@@W3AGKXZ ; [thunk]:NArchive::NParser::CHandler::Release`adjustor{4}' (void)
.rdata:0000EF14                 dd offset ?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z ; NArchive::NParser::CHandler::GetStream(uint,ISequentialInStream * *)
.rdata:0000EF14 _rdata          ends
.rdata:0000EF14
.rdata:0000EF18 ; ===========================================================================
.rdata:0000EF18
.rdata:0000EF18 ; Segment type: Pure data
.rdata:0000EF18 ; Segment permissions: Read
.rdata:0000EF18 _rdata          segment dword public 'DATA' use32
.rdata:0000EF18                 assume cs:_rdata
.rdata:0000EF18                 ;org 0EF18h
.rdata:0000EF18 ; COMDAT (pick largest)
.rdata:0000EF18                 dd offset ??_R4CHandler@NParser@NArchive@@6BIInArchive@@@ ; const NArchive::NParser::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata:0000EF1C                 public ??_7CHandler@NParser@NArchive@@6BIInArchive@@@
.rdata:0000EF1C ; const NArchive::NParser::CHandler::`vftable'{for `IInArchive'}
.rdata:0000EF1C ??_7CHandler@NParser@NArchive@@6BIInArchive@@@ dd offset ?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000EF1C                                         ; DATA XREF: NArchive::NParser::CHandler::CHandler(void)+4Eo
.rdata:0000EF1C                                         ; NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:0000EF20                 dd offset ?AddRef@CHandler@NParser@NArchive@@UAGKXZ ; NArchive::NParser::CHandler::AddRef(void)
.rdata:0000EF24                 dd offset ?Release@CHandler@NParser@NArchive@@UAGKXZ ; NArchive::NParser::CHandler::Release(void)
.rdata:0000EF28                 dd offset ?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NParser::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:0000EF2C                 dd offset ?Close@CHandler@NParser@NArchive@@UAGJXZ ; NArchive::NParser::CHandler::Close(void)
.rdata:0000EF30                 dd offset ?GetNumberOfItems@CHandler@NParser@NArchive@@UAGJPAI@Z ; NArchive::NParser::CHandler::GetNumberOfItems(uint *)
.rdata:0000EF34                 dd offset ?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:0000EF38                 dd offset ?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:0000EF3C                 dd offset ?GetArchiveProperty@CHandler@NParser@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NParser::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:0000EF40                 dd offset ?GetNumberOfProperties@CHandler@NParser@NArchive@@UAGJPAI@Z ; NArchive::NParser::CHandler::GetNumberOfProperties(uint *)
.rdata:0000EF44                 dd offset ?GetPropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NParser::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:0000EF48                 dd offset ?GetNumberOfArchiveProperties@CHandler@NParser@NArchive@@UAGJPAI@Z ; NArchive::NParser::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:0000EF4C                 dd offset ?GetArchivePropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NParser::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:0000EF4C _rdata          ends
.rdata:0000EF4C
.xdata$x:0000EF50 ; ===========================================================================
.xdata$x:0000EF50
.xdata$x:0000EF50 ; Segment type: Pure data
.xdata$x:0000EF50 ; Segment permissions: Read
.xdata$x:0000EF50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EF50                 assume cs:_xdata$x
.xdata$x:0000EF50                 ;org 0EF50h
.xdata$x:0000EF50 ; COMDAT (pick associative to section at EE2C)
.xdata$x:0000EF50 __unwindtable$??0CHandler@NParser@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000EF50                                         ; DATA XREF: .xdata$x:0000EF60o
.xdata$x:0000EF51                 db 0FFh
.xdata$x:0000EF52                 db 0FFh
.xdata$x:0000EF53                 db 0FFh
.xdata$x:0000EF54                 dd offset __unwindfunclet$??0CHandler@NParser@NArchive@@QAE@XZ$0
.xdata$x:0000EF58 __ehfuncinfo$??0CHandler@NParser@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000EF58                                         ; DATA XREF: __ehhandler$??0CHandler@NParser@NArchive@@QAE@XZ+11o
.xdata$x:0000EF59                 db    5
.xdata$x:0000EF5A                 db  93h ; ô
.xdata$x:0000EF5B                 db  19h
.xdata$x:0000EF5C                 db    1
.xdata$x:0000EF5D                 db    0
.xdata$x:0000EF5E                 db    0
.xdata$x:0000EF5F                 db    0
.xdata$x:0000EF60                 dd offset __unwindtable$??0CHandler@NParser@NArchive@@QAE@XZ
.xdata$x:0000EF64                 db    0
.xdata$x:0000EF65                 db    0
.xdata$x:0000EF66                 db    0
.xdata$x:0000EF67                 db    0
.xdata$x:0000EF68                 db    0
.xdata$x:0000EF69                 db    0
.xdata$x:0000EF6A                 db    0
.xdata$x:0000EF6B                 db    0
.xdata$x:0000EF6C                 db    0
.xdata$x:0000EF6D                 db    0
.xdata$x:0000EF6E                 db    0
.xdata$x:0000EF6F                 db    0
.xdata$x:0000EF70                 db    0
.xdata$x:0000EF71                 db    0
.xdata$x:0000EF72                 db    0
.xdata$x:0000EF73                 db    0
.xdata$x:0000EF74                 db    0
.xdata$x:0000EF75                 db    0
.xdata$x:0000EF76                 db    0
.xdata$x:0000EF77                 db    0
.xdata$x:0000EF78                 db    1
.xdata$x:0000EF79                 db    0
.xdata$x:0000EF7A                 db    0
.xdata$x:0000EF7B                 db    0
.xdata$x:0000EF7B _xdata$x        ends
.xdata$x:0000EF7B
.rdata$r:0000EF7C ; ===========================================================================
.rdata$r:0000EF7C
.rdata$r:0000EF7C ; Segment type: Pure data
.rdata$r:0000EF7C ; Segment permissions: Read
.rdata$r:0000EF7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EF7C                 assume cs:_rdata$r
.rdata$r:0000EF7C                 ;org 0EF7Ch
.rdata$r:0000EF7C ; COMDAT (pick any)
.rdata$r:0000EF7C                 public ??_R4CHandler@NParser@NArchive@@6BIInArchive@@@
.rdata$r:0000EF7C ; const NArchive::NParser::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata$r:0000EF7C ??_R4CHandler@NParser@NArchive@@6BIInArchive@@@ db    0
.rdata$r:0000EF7C                                         ; DATA XREF: .rdata:0000EF18o
.rdata$r:0000EF7D                 db    0
.rdata$r:0000EF7E                 db    0
.rdata$r:0000EF7F                 db    0
.rdata$r:0000EF80                 db    0
.rdata$r:0000EF81                 db    0
.rdata$r:0000EF82                 db    0
.rdata$r:0000EF83                 db    0
.rdata$r:0000EF84                 db    0
.rdata$r:0000EF85                 db    0
.rdata$r:0000EF86                 db    0
.rdata$r:0000EF87                 db    0
.rdata$r:0000EF88                 dd offset ??_R0?AVCHandler@NParser@NArchive@@@8 ; NArchive::NParser::CHandler `RTTI Type Descriptor'
.rdata$r:0000EF8C                 dd offset ??_R3CHandler@NParser@NArchive@@8 ; NArchive::NParser::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EF8C _rdata$r        ends
.rdata$r:0000EF8C
.data:0000EF90 ; ===========================================================================
.data:0000EF90
.data:0000EF90 ; Segment type: Pure data
.data:0000EF90 ; Segment permissions: Read/Write
.data:0000EF90 _data           segment dword public 'DATA' use32
.data:0000EF90                 assume cs:_data
.data:0000EF90                 ;org 0EF90h
.data:0000EF90 ; COMDAT (pick any)
.data:0000EF90                 public ??_R0?AVCHandler@NParser@NArchive@@@8
.data:0000EF90 ; class NArchive::NParser::CHandler `RTTI Type Descriptor'
.data:0000EF90 ??_R0?AVCHandler@NParser@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:0000EF90                                         ; DATA XREF: .rdata$r:0000EF88o
.data:0000EF90                                         ; .rdata$r:NArchive::NParser::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000EF90                                         ; const type_info::`vftable'
.data:0000EF94                 align 8
.data:0000EF98 a_?avchandler@n db '.?AVCHandler@NParser@NArchive@@',0
.data:0000EF98 _data           ends
.data:0000EF98
.rdata$r:0000EFB8 ; ===========================================================================
.rdata$r:0000EFB8
.rdata$r:0000EFB8 ; Segment type: Pure data
.rdata$r:0000EFB8 ; Segment permissions: Read
.rdata$r:0000EFB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EFB8                 assume cs:_rdata$r
.rdata$r:0000EFB8                 ;org 0EFB8h
.rdata$r:0000EFB8 ; COMDAT (pick any)
.rdata$r:0000EFB8                 public ??_R3CHandler@NParser@NArchive@@8
.rdata$r:0000EFB8 ; NArchive::NParser::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EFB8 ??_R3CHandler@NParser@NArchive@@8 db    0 ; DATA XREF: .rdata$r:0000EF8Co
.rdata$r:0000EFB8                                         ; .rdata$r:0000EFFCo ...
.rdata$r:0000EFB9                 db    0
.rdata$r:0000EFBA                 db    0
.rdata$r:0000EFBB                 db    0
.rdata$r:0000EFBC                 db    1
.rdata$r:0000EFBD                 db    0
.rdata$r:0000EFBE                 db    0
.rdata$r:0000EFBF                 db    0
.rdata$r:0000EFC0                 db    6
.rdata$r:0000EFC1                 db    0
.rdata$r:0000EFC2                 db    0
.rdata$r:0000EFC3                 db    0
.rdata$r:0000EFC4                 dd offset ??_R2CHandler@NParser@NArchive@@8 ; NArchive::NParser::CHandler::`RTTI Base Class Array'
.rdata$r:0000EFC4 _rdata$r        ends
.rdata$r:0000EFC4
.rdata$r:0000EFC8 ; ===========================================================================
.rdata$r:0000EFC8
.rdata$r:0000EFC8 ; Segment type: Pure data
.rdata$r:0000EFC8 ; Segment permissions: Read
.rdata$r:0000EFC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EFC8                 assume cs:_rdata$r
.rdata$r:0000EFC8                 ;org 0EFC8h
.rdata$r:0000EFC8 ; COMDAT (pick any)
.rdata$r:0000EFC8                 public ??_R2CHandler@NParser@NArchive@@8
.rdata$r:0000EFC8 ; NArchive::NParser::CHandler::`RTTI Base Class Array'
.rdata$r:0000EFC8 ??_R2CHandler@NParser@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@NParser@NArchive@@8
.rdata$r:0000EFC8                                         ; DATA XREF: .rdata$r:0000EFC4o
.rdata$r:0000EFC8                                         ; NArchive::NParser::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EFCC                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000EFD0                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000EFD4                 dd offset ??_R13?0A@EA@IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000EFD8                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000EFDC                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000EFE0                 db    0
.rdata$r:0000EFE1                 align 4
.rdata$r:0000EFE1 _rdata$r        ends
.rdata$r:0000EFE1
.rdata$r:0000EFE4 ; ===========================================================================
.rdata$r:0000EFE4
.rdata$r:0000EFE4 ; Segment type: Pure data
.rdata$r:0000EFE4 ; Segment permissions: Read
.rdata$r:0000EFE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000EFE4                 assume cs:_rdata$r
.rdata$r:0000EFE4                 ;org 0EFE4h
.rdata$r:0000EFE4 ; COMDAT (pick any)
.rdata$r:0000EFE4                 public ??_R1A@?0A@EA@CHandler@NParser@NArchive@@8
.rdata$r:0000EFE4 ; NArchive::NParser::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000EFE4 ??_R1A@?0A@EA@CHandler@NParser@NArchive@@8 dd offset ??_R0?AVCHandler@NParser@NArchive@@@8
.rdata$r:0000EFE4                                         ; DATA XREF: .rdata$r:NArchive::NParser::CHandler::`RTTI Base Class Array'o
.rdata$r:0000EFE4                                         ; NArchive::NParser::CHandler `RTTI Type Descriptor'
.rdata$r:0000EFE8                 db    5
.rdata$r:0000EFE9                 db    0
.rdata$r:0000EFEA                 db    0
.rdata$r:0000EFEB                 db    0
.rdata$r:0000EFEC                 db    0
.rdata$r:0000EFED                 db    0
.rdata$r:0000EFEE                 db    0
.rdata$r:0000EFEF                 db    0
.rdata$r:0000EFF0                 db 0FFh
.rdata$r:0000EFF1                 db 0FFh
.rdata$r:0000EFF2                 db 0FFh
.rdata$r:0000EFF3                 db 0FFh
.rdata$r:0000EFF4                 db    0
.rdata$r:0000EFF5                 db    0
.rdata$r:0000EFF6                 db    0
.rdata$r:0000EFF7                 db    0
.rdata$r:0000EFF8                 db  40h ; @
.rdata$r:0000EFF9                 db    0
.rdata$r:0000EFFA                 db    0
.rdata$r:0000EFFB                 db    0
.rdata$r:0000EFFC                 dd offset ??_R3CHandler@NParser@NArchive@@8 ; NArchive::NParser::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000EFFC _rdata$r        ends
.rdata$r:0000EFFC
.rdata$r:0000F000 ; ===========================================================================
.rdata$r:0000F000
.rdata$r:0000F000 ; Segment type: Pure data
.rdata$r:0000F000 ; Segment permissions: Read
.rdata$r:0000F000 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F000                 assume cs:_rdata$r
.rdata$r:0000F000                 ;org 0F000h
.rdata$r:0000F000 ; COMDAT (pick any)
.rdata$r:0000F000                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:0000F000 ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F000 ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:0000F000                                         ; DATA XREF: .rdata$r:0000EFCCo
.rdata$r:0000F000                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:0000F000                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:0000F004                 db    1
.rdata$r:0000F005                 db    0
.rdata$r:0000F006                 db    0
.rdata$r:0000F007                 db    0
.rdata$r:0000F008                 db    0
.rdata$r:0000F009                 db    0
.rdata$r:0000F00A                 db    0
.rdata$r:0000F00B                 db    0
.rdata$r:0000F00C                 db 0FFh
.rdata$r:0000F00D                 db 0FFh
.rdata$r:0000F00E                 db 0FFh
.rdata$r:0000F00F                 db 0FFh
.rdata$r:0000F010                 db    0
.rdata$r:0000F011                 db    0
.rdata$r:0000F012                 db    0
.rdata$r:0000F013                 db    0
.rdata$r:0000F014                 db  40h ; @
.rdata$r:0000F015                 db    0
.rdata$r:0000F016                 db    0
.rdata$r:0000F017                 db    0
.rdata$r:0000F018                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F018 _rdata$r        ends
.rdata$r:0000F018
.data:0000F01C ; ===========================================================================
.data:0000F01C
.data:0000F01C ; Segment type: Pure data
.data:0000F01C ; Segment permissions: Read/Write
.data:0000F01C _data           segment dword public 'DATA' use32
.data:0000F01C                 assume cs:_data
.data:0000F01C                 ;org 0F01Ch
.data:0000F01C ; COMDAT (pick any)
.data:0000F01C                 public ??_R0?AUIInArchive@@@8
.data:0000F01C ; struct IInArchive `RTTI Type Descriptor'
.data:0000F01C ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:0000F01C                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000F01C                                         ; .rdata$r:0000F2F8o
.data:0000F01C                                         ; const type_info::`vftable'
.data:0000F020                 db    0
.data:0000F021                 db    0
.data:0000F022                 db    0
.data:0000F023                 db    0
.data:0000F024                 db  2Eh ; .
.data:0000F025                 db  3Fh ; ?
.data:0000F026                 db  41h ; A
.data:0000F027                 db  55h ; U
.data:0000F028                 db  49h ; I
.data:0000F029                 db  49h ; I
.data:0000F02A                 db  6Eh ; n
.data:0000F02B                 db  41h ; A
.data:0000F02C                 db  72h ; r
.data:0000F02D                 db  63h ; c
.data:0000F02E                 db  68h ; h
.data:0000F02F                 db  69h ; i
.data:0000F030                 db  76h ; v
.data:0000F031                 db  65h ; e
.data:0000F032                 db  40h ; @
.data:0000F033                 db  40h ; @
.data:0000F034                 db    0
.data:0000F035                 align 4
.data:0000F035 _data           ends
.data:0000F035
.rdata$r:0000F038 ; ===========================================================================
.rdata$r:0000F038
.rdata$r:0000F038 ; Segment type: Pure data
.rdata$r:0000F038 ; Segment permissions: Read
.rdata$r:0000F038 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F038                 assume cs:_rdata$r
.rdata$r:0000F038                 ;org 0F038h
.rdata$r:0000F038 ; COMDAT (pick any)
.rdata$r:0000F038                 public ??_R3IInArchive@@8
.rdata$r:0000F038 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F038 ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:0000F018o
.rdata$r:0000F038                                         ; .rdata$r:0000F2FCo
.rdata$r:0000F039                 db    0
.rdata$r:0000F03A                 db    0
.rdata$r:0000F03B                 db    0
.rdata$r:0000F03C                 db    0
.rdata$r:0000F03D                 db    0
.rdata$r:0000F03E                 db    0
.rdata$r:0000F03F                 db    0
.rdata$r:0000F040                 db    2
.rdata$r:0000F041                 db    0
.rdata$r:0000F042                 db    0
.rdata$r:0000F043                 db    0
.rdata$r:0000F044                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:0000F044 _rdata$r        ends
.rdata$r:0000F044
.rdata$r:0000F048 ; ===========================================================================
.rdata$r:0000F048
.rdata$r:0000F048 ; Segment type: Pure data
.rdata$r:0000F048 ; Segment permissions: Read
.rdata$r:0000F048 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F048                 assume cs:_rdata$r
.rdata$r:0000F048                 ;org 0F048h
.rdata$r:0000F048 ; COMDAT (pick any)
.rdata$r:0000F048                 public ??_R2IInArchive@@8
.rdata$r:0000F048 ; IInArchive::`RTTI Base Class Array'
.rdata$r:0000F048 ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:0000F048                                         ; DATA XREF: .rdata$r:0000F044o
.rdata$r:0000F048                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F04C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F050                 db    0
.rdata$r:0000F051                 align 4
.rdata$r:0000F051 _rdata$r        ends
.rdata$r:0000F051
.rdata$r:0000F054 ; ===========================================================================
.rdata$r:0000F054
.rdata$r:0000F054 ; Segment type: Pure data
.rdata$r:0000F054 ; Segment permissions: Read
.rdata$r:0000F054 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F054                 assume cs:_rdata$r
.rdata$r:0000F054                 ;org 0F054h
.rdata$r:0000F054 ; COMDAT (pick any)
.rdata$r:0000F054                 public ??_R13?0A@EA@IInArchiveGetStream@@8
.rdata$r:0000F054 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000F054 ??_R13?0A@EA@IInArchiveGetStream@@8 dd offset ??_R0?AUIInArchiveGetStream@@@8
.rdata$r:0000F054                                         ; DATA XREF: .rdata$r:0000EFD4o
.rdata$r:0000F054                                         ; IInArchiveGetStream `RTTI Type Descriptor'
.rdata$r:0000F058                 db    1
.rdata$r:0000F059                 db    0
.rdata$r:0000F05A                 db    0
.rdata$r:0000F05B                 db    0
.rdata$r:0000F05C                 db    4
.rdata$r:0000F05D                 db    0
.rdata$r:0000F05E                 db    0
.rdata$r:0000F05F                 db    0
.rdata$r:0000F060                 db 0FFh
.rdata$r:0000F061                 db 0FFh
.rdata$r:0000F062                 db 0FFh
.rdata$r:0000F063                 db 0FFh
.rdata$r:0000F064                 db    0
.rdata$r:0000F065                 db    0
.rdata$r:0000F066                 db    0
.rdata$r:0000F067                 db    0
.rdata$r:0000F068                 db  40h ; @
.rdata$r:0000F069                 db    0
.rdata$r:0000F06A                 db    0
.rdata$r:0000F06B                 db    0
.rdata$r:0000F06C                 dd offset ??_R3IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F06C _rdata$r        ends
.rdata$r:0000F06C
.data:0000F070 ; ===========================================================================
.data:0000F070
.data:0000F070 ; Segment type: Pure data
.data:0000F070 ; Segment permissions: Read/Write
.data:0000F070 _data           segment dword public 'DATA' use32
.data:0000F070                 assume cs:_data
.data:0000F070                 ;org 0F070h
.data:0000F070 ; COMDAT (pick any)
.data:0000F070                 public ??_R0?AUIInArchiveGetStream@@@8
.data:0000F070 ; struct IInArchiveGetStream `RTTI Type Descriptor'
.data:0000F070 ??_R0?AUIInArchiveGetStream@@@8 dd offset ??_7type_info@@6B@
.data:0000F070                                         ; DATA XREF: .rdata$r:IInArchiveGetStream::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000F070                                         ; .rdata$r:IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000F070                                         ; const type_info::`vftable'
.data:0000F074                 align 8
.data:0000F078 a_?auiinarchive db '.?AUIInArchiveGetStream@@',0
.data:0000F092                 align 4
.data:0000F092 _data           ends
.data:0000F092
.rdata$r:0000F094 ; ===========================================================================
.rdata$r:0000F094
.rdata$r:0000F094 ; Segment type: Pure data
.rdata$r:0000F094 ; Segment permissions: Read
.rdata$r:0000F094 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F094                 assume cs:_rdata$r
.rdata$r:0000F094                 ;org 0F094h
.rdata$r:0000F094 ; COMDAT (pick any)
.rdata$r:0000F094                 public ??_R3IInArchiveGetStream@@8
.rdata$r:0000F094 ; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F094 ??_R3IInArchiveGetStream@@8 db    0     ; DATA XREF: .rdata$r:0000F06Co
.rdata$r:0000F094                                         ; .rdata$r:0000F0C8o ...
.rdata$r:0000F095                 db    0
.rdata$r:0000F096                 db    0
.rdata$r:0000F097                 db    0
.rdata$r:0000F098                 db    0
.rdata$r:0000F099                 db    0
.rdata$r:0000F09A                 db    0
.rdata$r:0000F09B                 db    0
.rdata$r:0000F09C                 db    2
.rdata$r:0000F09D                 db    0
.rdata$r:0000F09E                 db    0
.rdata$r:0000F09F                 db    0
.rdata$r:0000F0A0                 dd offset ??_R2IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Base Class Array'
.rdata$r:0000F0A0 _rdata$r        ends
.rdata$r:0000F0A0
.rdata$r:0000F0A4 ; ===========================================================================
.rdata$r:0000F0A4
.rdata$r:0000F0A4 ; Segment type: Pure data
.rdata$r:0000F0A4 ; Segment permissions: Read
.rdata$r:0000F0A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F0A4                 assume cs:_rdata$r
.rdata$r:0000F0A4                 ;org 0F0A4h
.rdata$r:0000F0A4 ; COMDAT (pick any)
.rdata$r:0000F0A4                 public ??_R2IInArchiveGetStream@@8
.rdata$r:0000F0A4 ; IInArchiveGetStream::`RTTI Base Class Array'
.rdata$r:0000F0A4 ??_R2IInArchiveGetStream@@8 dd offset ??_R1A@?0A@EA@IInArchiveGetStream@@8
.rdata$r:0000F0A4                                         ; DATA XREF: .rdata$r:0000F0A0o
.rdata$r:0000F0A4                                         ; IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F0A8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F0AC                 db    0
.rdata$r:0000F0AD                 align 10h
.rdata$r:0000F0AD _rdata$r        ends
.rdata$r:0000F0AD
.rdata$r:0000F0B0 ; ===========================================================================
.rdata$r:0000F0B0
.rdata$r:0000F0B0 ; Segment type: Pure data
.rdata$r:0000F0B0 ; Segment permissions: Read
.rdata$r:0000F0B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F0B0                 assume cs:_rdata$r
.rdata$r:0000F0B0                 ;org 0F0B0h
.rdata$r:0000F0B0 ; COMDAT (pick any)
.rdata$r:0000F0B0                 public ??_R1A@?0A@EA@IInArchiveGetStream@@8
.rdata$r:0000F0B0 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F0B0 ??_R1A@?0A@EA@IInArchiveGetStream@@8 dd offset ??_R0?AUIInArchiveGetStream@@@8
.rdata$r:0000F0B0                                         ; DATA XREF: .rdata$r:IInArchiveGetStream::`RTTI Base Class Array'o
.rdata$r:0000F0B0                                         ; IInArchiveGetStream `RTTI Type Descriptor'
.rdata$r:0000F0B4                 db    1
.rdata$r:0000F0B5                 db    0
.rdata$r:0000F0B6                 db    0
.rdata$r:0000F0B7                 db    0
.rdata$r:0000F0B8                 db    0
.rdata$r:0000F0B9                 db    0
.rdata$r:0000F0BA                 db    0
.rdata$r:0000F0BB                 db    0
.rdata$r:0000F0BC                 db 0FFh
.rdata$r:0000F0BD                 db 0FFh
.rdata$r:0000F0BE                 db 0FFh
.rdata$r:0000F0BF                 db 0FFh
.rdata$r:0000F0C0                 db    0
.rdata$r:0000F0C1                 db    0
.rdata$r:0000F0C2                 db    0
.rdata$r:0000F0C3                 db    0
.rdata$r:0000F0C4                 db  40h ; @
.rdata$r:0000F0C5                 db    0
.rdata$r:0000F0C6                 db    0
.rdata$r:0000F0C7                 db    0
.rdata$r:0000F0C8                 dd offset ??_R3IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F0C8 _rdata$r        ends
.rdata$r:0000F0C8
.rdata$r:0000F0CC ; ===========================================================================
.rdata$r:0000F0CC
.rdata$r:0000F0CC ; Segment type: Pure data
.rdata$r:0000F0CC ; Segment permissions: Read
.rdata$r:0000F0CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F0CC                 assume cs:_rdata$r
.rdata$r:0000F0CC                 ;org 0F0CCh
.rdata$r:0000F0CC ; COMDAT (pick any)
.rdata$r:0000F0CC                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:0000F0CC ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:0000F0CC ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000F0CC                                         ; DATA XREF: .rdata$r:0000EFDCo
.rdata$r:0000F0CC                                         ; .rdata$r:0000F6BCo ...
.rdata$r:0000F0CC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000F0D0                 db    0
.rdata$r:0000F0D1                 db    0
.rdata$r:0000F0D2                 db    0
.rdata$r:0000F0D3                 db    0
.rdata$r:0000F0D4                 db    8
.rdata$r:0000F0D5                 db    0
.rdata$r:0000F0D6                 db    0
.rdata$r:0000F0D7                 db    0
.rdata$r:0000F0D8                 db 0FFh
.rdata$r:0000F0D9                 db 0FFh
.rdata$r:0000F0DA                 db 0FFh
.rdata$r:0000F0DB                 db 0FFh
.rdata$r:0000F0DC                 db    0
.rdata$r:0000F0DD                 db    0
.rdata$r:0000F0DE                 db    0
.rdata$r:0000F0DF                 db    0
.rdata$r:0000F0E0                 db  40h ; @
.rdata$r:0000F0E1                 db    0
.rdata$r:0000F0E2                 db    0
.rdata$r:0000F0E3                 db    0
.rdata$r:0000F0E4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F0E4 _rdata$r        ends
.rdata$r:0000F0E4
.rdata$r:0000F0E8 ; ===========================================================================
.rdata$r:0000F0E8
.rdata$r:0000F0E8 ; Segment type: Pure data
.rdata$r:0000F0E8 ; Segment permissions: Read
.rdata$r:0000F0E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F0E8                 assume cs:_rdata$r
.rdata$r:0000F0E8                 ;org 0F0E8h
.rdata$r:0000F0E8 ; COMDAT (pick any)
.rdata$r:0000F0E8                 public ??_R4CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@
.rdata$r:0000F0E8 ; const NArchive::NParser::CHandler::`RTTI Complete Object Locator'{for `IInArchiveGetStream'}
.rdata$r:0000F0E8 ??_R4CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@ db    0
.rdata$r:0000F0E8                                         ; DATA XREF: .rdata:0000EF04o
.rdata$r:0000F0E9                 db    0
.rdata$r:0000F0EA                 db    0
.rdata$r:0000F0EB                 db    0
.rdata$r:0000F0EC                 db    4
.rdata$r:0000F0ED                 db    0
.rdata$r:0000F0EE                 db    0
.rdata$r:0000F0EF                 db    0
.rdata$r:0000F0F0                 db    0
.rdata$r:0000F0F1                 db    0
.rdata$r:0000F0F2                 db    0
.rdata$r:0000F0F3                 db    0
.rdata$r:0000F0F4                 dd offset ??_R0?AVCHandler@NParser@NArchive@@@8 ; NArchive::NParser::CHandler `RTTI Type Descriptor'
.rdata$r:0000F0F8                 dd offset ??_R3CHandler@NParser@NArchive@@8 ; NArchive::NParser::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F0F8 _rdata$r        ends
.rdata$r:0000F0F8
.text:0000F0FC ; ===========================================================================
.text:0000F0FC
.text:0000F0FC ; Segment type: Pure code
.text:0000F0FC ; Segment permissions: Read/Execute
.text:0000F0FC _text           segment para public 'CODE' use32
.text:0000F0FC                 assume cs:_text
.text:0000F0FC                 ;org 0F0FCh
.text:0000F0FC ; COMDAT (pick any)
.text:0000F0FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F0FC
.text:0000F0FC ; =============== S U B R O U T I N E =======================================
.text:0000F0FC
.text:0000F0FC ; Attributes: bp-based frame
.text:0000F0FC
.text:0000F0FC ; __int32 __stdcall NArchive::NParser::CHandler::QueryInterface(NArchive::NParser::CHandler *this, const struct _GUID *Buf1, void **)
.text:0000F0FC                 public ?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:0000F0FC ?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000F0FC                                         ; CODE XREF: [thunk]:NArchive::NParser::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000F0FC                                         ; DATA XREF: .rdata:const NArchive::NParser::CHandler::`vftable'{for `IInArchive'}o
.text:0000F0FC
.text:0000F0FC var_4           = dword ptr -4
.text:0000F0FC this            = dword ptr  8
.text:0000F0FC Buf1            = dword ptr  0Ch
.text:0000F0FC arg_8           = dword ptr  10h
.text:0000F0FC
.text:0000F0FC                 push    ebp
.text:0000F0FD                 mov     ebp, esp
.text:0000F0FF                 push    ecx
.text:0000F100                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F107                 mov     eax, [ebp+arg_8]
.text:0000F10A                 mov     dword ptr [eax], 0
.text:0000F110                 push    offset _IID_IUnknown ; Buf2
.text:0000F115                 mov     ecx, [ebp+Buf1]
.text:0000F118                 push    ecx             ; Buf1
.text:0000F119                 call    ___@8           ; __(x,x)
.text:0000F11E                 test    eax, eax
.text:0000F120                 jz      short loc_F12C
.text:0000F122                 mov     edx, [ebp+arg_8]
.text:0000F125                 mov     eax, [ebp+this]
.text:0000F128                 mov     [edx], eax
.text:0000F12A                 jmp     short loc_F183
.text:0000F12C ; ---------------------------------------------------------------------------
.text:0000F12C
.text:0000F12C loc_F12C:                               ; CODE XREF: NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)+24j
.text:0000F12C                 push    offset _IID_IInArchive ; Buf2
.text:0000F131                 mov     ecx, [ebp+Buf1]
.text:0000F134                 push    ecx             ; Buf1
.text:0000F135                 call    ___@8           ; __(x,x)
.text:0000F13A                 test    eax, eax
.text:0000F13C                 jz      short loc_F148
.text:0000F13E                 mov     edx, [ebp+arg_8]
.text:0000F141                 mov     eax, [ebp+this]
.text:0000F144                 mov     [edx], eax
.text:0000F146                 jmp     short loc_F183
.text:0000F148 ; ---------------------------------------------------------------------------
.text:0000F148
.text:0000F148 loc_F148:                               ; CODE XREF: NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)+40j
.text:0000F148                 push    offset _IID_IInArchiveGetStream ; Buf2
.text:0000F14D                 mov     ecx, [ebp+Buf1]
.text:0000F150                 push    ecx             ; Buf1
.text:0000F151                 call    ___@8           ; __(x,x)
.text:0000F156                 test    eax, eax
.text:0000F158                 jz      short loc_F17C
.text:0000F15A                 cmp     [ebp+this], 0
.text:0000F15E                 jz      short loc_F16B
.text:0000F160                 mov     edx, [ebp+this]
.text:0000F163                 add     edx, 4
.text:0000F166                 mov     [ebp+var_4], edx
.text:0000F169                 jmp     short loc_F172
.text:0000F16B ; ---------------------------------------------------------------------------
.text:0000F16B
.text:0000F16B loc_F16B:                               ; CODE XREF: NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)+62j
.text:0000F16B                 mov     [ebp+var_4], 0
.text:0000F172
.text:0000F172 loc_F172:                               ; CODE XREF: NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)+6Dj
.text:0000F172                 mov     eax, [ebp+arg_8]
.text:0000F175                 mov     ecx, [ebp+var_4]
.text:0000F178                 mov     [eax], ecx
.text:0000F17A                 jmp     short loc_F183
.text:0000F17C ; ---------------------------------------------------------------------------
.text:0000F17C
.text:0000F17C loc_F17C:                               ; CODE XREF: NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)+5Cj
.text:0000F17C                 mov     eax, 80004002h
.text:0000F181                 jmp     short loc_F194
.text:0000F183 ; ---------------------------------------------------------------------------
.text:0000F183
.text:0000F183 loc_F183:                               ; CODE XREF: NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)+2Ej
.text:0000F183                                         ; NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)+4Aj ...
.text:0000F183                 mov     edx, [ebp+this]
.text:0000F186                 mov     eax, [edx+8]
.text:0000F189                 add     eax, 1
.text:0000F18C                 mov     ecx, [ebp+this]
.text:0000F18F                 mov     [ecx+8], eax
.text:0000F192                 xor     eax, eax
.text:0000F194
.text:0000F194 loc_F194:                               ; CODE XREF: NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)+85j
.text:0000F194                 add     esp, 4
.text:0000F197                 cmp     ebp, esp
.text:0000F199                 call    __RTC_CheckEsp
.text:0000F19E                 mov     esp, ebp
.text:0000F1A0                 pop     ebp
.text:0000F1A1                 retn    0Ch
.text:0000F1A1 ?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000F1A1
.text:0000F1A1 _text           ends
.text:0000F1A1
.text:0000F1A4 ; ===========================================================================
.text:0000F1A4
.text:0000F1A4 ; Segment type: Pure code
.text:0000F1A4 ; Segment permissions: Read/Execute
.text:0000F1A4 _text           segment para public 'CODE' use32
.text:0000F1A4                 assume cs:_text
.text:0000F1A4                 ;org 0F1A4h
.text:0000F1A4 ; COMDAT (pick any)
.text:0000F1A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F1A4
.text:0000F1A4 ; =============== S U B R O U T I N E =======================================
.text:0000F1A4
.text:0000F1A4 ; Attributes: bp-based frame
.text:0000F1A4
.text:0000F1A4 ; unsigned __int32 __stdcall NArchive::NParser::CHandler::AddRef(NArchive::NParser::CHandler *this)
.text:0000F1A4                 public ?AddRef@CHandler@NParser@NArchive@@UAGKXZ
.text:0000F1A4 ?AddRef@CHandler@NParser@NArchive@@UAGKXZ proc near
.text:0000F1A4                                         ; CODE XREF: [thunk]:NArchive::NParser::CHandler::AddRef`adjustor{4}' (void)+5j
.text:0000F1A4                                         ; DATA XREF: .rdata:0000EF20o
.text:0000F1A4
.text:0000F1A4 var_4           = dword ptr -4
.text:0000F1A4 this            = dword ptr  8
.text:0000F1A4
.text:0000F1A4                 push    ebp
.text:0000F1A5                 mov     ebp, esp
.text:0000F1A7                 push    ecx
.text:0000F1A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F1AF                 mov     eax, [ebp+this]
.text:0000F1B2                 mov     ecx, [eax+8]
.text:0000F1B5                 add     ecx, 1
.text:0000F1B8                 mov     [ebp+var_4], ecx
.text:0000F1BB                 mov     edx, [ebp+this]
.text:0000F1BE                 mov     eax, [ebp+var_4]
.text:0000F1C1                 mov     [edx+8], eax
.text:0000F1C4                 mov     eax, [ebp+var_4]
.text:0000F1C7                 mov     esp, ebp
.text:0000F1C9                 pop     ebp
.text:0000F1CA                 retn    4
.text:0000F1CA ?AddRef@CHandler@NParser@NArchive@@UAGKXZ endp
.text:0000F1CA
.text:0000F1CA ; ---------------------------------------------------------------------------
.text:0000F1CD                 align 10h
.text:0000F1CD _text           ends
.text:0000F1CD
.text:0000F1D0 ; ===========================================================================
.text:0000F1D0
.text:0000F1D0 ; Segment type: Pure code
.text:0000F1D0 ; Segment permissions: Read/Execute
.text:0000F1D0 _text           segment para public 'CODE' use32
.text:0000F1D0                 assume cs:_text
.text:0000F1D0                 ;org 0F1D0h
.text:0000F1D0 ; COMDAT (pick any)
.text:0000F1D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F1D0
.text:0000F1D0 ; =============== S U B R O U T I N E =======================================
.text:0000F1D0
.text:0000F1D0 ; Attributes: bp-based frame
.text:0000F1D0
.text:0000F1D0 ; unsigned __int32 __stdcall NArchive::NParser::CHandler::Release(NArchive::NParser::CHandler *this)
.text:0000F1D0                 public ?Release@CHandler@NParser@NArchive@@UAGKXZ
.text:0000F1D0 ?Release@CHandler@NParser@NArchive@@UAGKXZ proc near
.text:0000F1D0                                         ; CODE XREF: [thunk]:NArchive::NParser::CHandler::Release`adjustor{4}' (void)+5j
.text:0000F1D0                                         ; DATA XREF: .rdata:0000EF24o
.text:0000F1D0
.text:0000F1D0 var_10          = dword ptr -10h
.text:0000F1D0 var_C           = dword ptr -0Ch
.text:0000F1D0 var_8           = dword ptr -8
.text:0000F1D0 var_4           = dword ptr -4
.text:0000F1D0 this            = dword ptr  8
.text:0000F1D0
.text:0000F1D0                 push    ebp
.text:0000F1D1                 mov     ebp, esp
.text:0000F1D3                 sub     esp, 10h
.text:0000F1D6                 mov     eax, 0CCCCCCCCh
.text:0000F1DB                 mov     [ebp+var_10], eax
.text:0000F1DE                 mov     [ebp+var_C], eax
.text:0000F1E1                 mov     [ebp+var_8], eax
.text:0000F1E4                 mov     [ebp+var_4], eax
.text:0000F1E7                 mov     eax, [ebp+this]
.text:0000F1EA                 mov     ecx, [eax+8]
.text:0000F1ED                 sub     ecx, 1
.text:0000F1F0                 mov     [ebp+var_C], ecx
.text:0000F1F3                 mov     edx, [ebp+this]
.text:0000F1F6                 mov     eax, [ebp+var_C]
.text:0000F1F9                 mov     [edx+8], eax
.text:0000F1FC                 cmp     [ebp+var_C], 0
.text:0000F200                 jz      short loc_F20A
.text:0000F202                 mov     ecx, [ebp+this]
.text:0000F205                 mov     eax, [ecx+8]
.text:0000F208                 jmp     short loc_F234
.text:0000F20A ; ---------------------------------------------------------------------------
.text:0000F20A
.text:0000F20A loc_F20A:                               ; CODE XREF: NArchive::NParser::CHandler::Release(void)+30j
.text:0000F20A                 mov     edx, [ebp+this]
.text:0000F20D                 mov     [ebp+var_8], edx
.text:0000F210                 mov     eax, [ebp+var_8]
.text:0000F213                 mov     [ebp+var_4], eax
.text:0000F216                 cmp     [ebp+var_4], 0
.text:0000F21A                 jz      short loc_F22B
.text:0000F21C                 push    1
.text:0000F21E                 mov     ecx, [ebp+var_4]
.text:0000F221                 call    ??_GCHandler@NParser@NArchive@@QAEPAXI@Z ; NArchive::NParser::CHandler::`scalar deleting destructor'(uint)
.text:0000F226                 mov     [ebp+var_10], eax
.text:0000F229                 jmp     short loc_F232
.text:0000F22B ; ---------------------------------------------------------------------------
.text:0000F22B
.text:0000F22B loc_F22B:                               ; CODE XREF: NArchive::NParser::CHandler::Release(void)+4Aj
.text:0000F22B                 mov     [ebp+var_10], 0
.text:0000F232
.text:0000F232 loc_F232:                               ; CODE XREF: NArchive::NParser::CHandler::Release(void)+59j
.text:0000F232                 xor     eax, eax
.text:0000F234
.text:0000F234 loc_F234:                               ; CODE XREF: NArchive::NParser::CHandler::Release(void)+38j
.text:0000F234                 add     esp, 10h
.text:0000F237                 cmp     ebp, esp
.text:0000F239                 call    __RTC_CheckEsp
.text:0000F23E                 mov     esp, ebp
.text:0000F240                 pop     ebp
.text:0000F241                 retn    4
.text:0000F241 ?Release@CHandler@NParser@NArchive@@UAGKXZ endp
.text:0000F241
.text:0000F241 _text           ends
.text:0000F241
.text:0000F244 ; ===========================================================================
.text:0000F244
.text:0000F244 ; Segment type: Pure code
.text:0000F244 ; Segment permissions: Read/Execute
.text:0000F244 _text           segment para public 'CODE' use32
.text:0000F244                 assume cs:_text
.text:0000F244                 ;org 0F244h
.text:0000F244 ; COMDAT (pick any)
.text:0000F244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F244
.text:0000F244 ; =============== S U B R O U T I N E =======================================
.text:0000F244
.text:0000F244 ; Attributes: bp-based frame
.text:0000F244
.text:0000F244 ; public: void * __thiscall NArchive::NParser::CHandler::`scalar deleting destructor'(unsigned int)
.text:0000F244                 public ??_GCHandler@NParser@NArchive@@QAEPAXI@Z
.text:0000F244 ??_GCHandler@NParser@NArchive@@QAEPAXI@Z proc near
.text:0000F244                                         ; CODE XREF: NArchive::NParser::CHandler::Release(void)+51p
.text:0000F244
.text:0000F244 var_4           = dword ptr -4
.text:0000F244 arg_0           = dword ptr  8
.text:0000F244
.text:0000F244                 push    ebp
.text:0000F245                 mov     ebp, esp
.text:0000F247                 push    ecx
.text:0000F248                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F24F                 mov     [ebp+var_4], ecx
.text:0000F252                 mov     ecx, [ebp+var_4] ; this
.text:0000F255                 call    ??1CHandler@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CHandler::~CHandler(void)
.text:0000F25A                 mov     eax, [ebp+arg_0]
.text:0000F25D                 and     eax, 1
.text:0000F260                 jz      short loc_F26E
.text:0000F262                 mov     ecx, [ebp+var_4]
.text:0000F265                 push    ecx             ; void *
.text:0000F266                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000F26B                 add     esp, 4
.text:0000F26E
.text:0000F26E loc_F26E:                               ; CODE XREF: NArchive::NParser::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:0000F26E                 mov     eax, [ebp+var_4]
.text:0000F271                 add     esp, 4
.text:0000F274                 cmp     ebp, esp
.text:0000F276                 call    __RTC_CheckEsp
.text:0000F27B                 mov     esp, ebp
.text:0000F27D                 pop     ebp
.text:0000F27E                 retn    4
.text:0000F27E ??_GCHandler@NParser@NArchive@@QAEPAXI@Z endp
.text:0000F27E
.text:0000F27E ; ---------------------------------------------------------------------------
.text:0000F281                 align 4
.text:0000F281 _text           ends
.text:0000F281
.text:0000F284 ; ===========================================================================
.text:0000F284
.text:0000F284 ; Segment type: Pure code
.text:0000F284 ; Segment permissions: Read/Execute
.text:0000F284 _text           segment para public 'CODE' use32
.text:0000F284                 assume cs:_text
.text:0000F284                 ;org 0F284h
.text:0000F284 ; COMDAT (pick any)
.text:0000F284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F284
.text:0000F284 ; =============== S U B R O U T I N E =======================================
.text:0000F284
.text:0000F284 ; Attributes: bp-based frame
.text:0000F284
.text:0000F284 ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:0000F284                 public ??0IInArchive@@QAE@XZ
.text:0000F284 ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::NParser::CHandler::CHandler(void)+30p
.text:0000F284
.text:0000F284 var_4           = dword ptr -4
.text:0000F284
.text:0000F284                 push    ebp
.text:0000F285                 mov     ebp, esp
.text:0000F287                 push    ecx
.text:0000F288                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F28F                 mov     [ebp+var_4], ecx
.text:0000F292                 mov     ecx, [ebp+var_4]
.text:0000F295                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000F29A                 mov     eax, [ebp+var_4]
.text:0000F29D                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:0000F2A3                 mov     eax, [ebp+var_4]
.text:0000F2A6                 add     esp, 4
.text:0000F2A9                 cmp     ebp, esp
.text:0000F2AB                 call    __RTC_CheckEsp
.text:0000F2B0                 mov     esp, ebp
.text:0000F2B2                 pop     ebp
.text:0000F2B3                 retn
.text:0000F2B3 ??0IInArchive@@QAE@XZ endp
.text:0000F2B3
.text:0000F2B3 _text           ends
.text:0000F2B3
.rdata:0000F2B4 ; ===========================================================================
.rdata:0000F2B4
.rdata:0000F2B4 ; Segment type: Pure data
.rdata:0000F2B4 ; Segment permissions: Read
.rdata:0000F2B4 _rdata          segment dword public 'DATA' use32
.rdata:0000F2B4                 assume cs:_rdata
.rdata:0000F2B4                 ;org 0F2B4h
.rdata:0000F2B4 ; COMDAT (pick largest)
.rdata:0000F2B4                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:0000F2B8                 public ??_7IInArchive@@6B@
.rdata:0000F2B8 ; const IInArchive::`vftable'
.rdata:0000F2B8 ??_7IInArchive@@6B@ dd offset __purecall
.rdata:0000F2B8                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:0000F2BC                 dd offset __purecall
.rdata:0000F2C0                 dd offset __purecall
.rdata:0000F2C4                 dd offset __purecall
.rdata:0000F2C8                 dd offset __purecall
.rdata:0000F2CC                 dd offset __purecall
.rdata:0000F2D0                 dd offset __purecall
.rdata:0000F2D4                 dd offset __purecall
.rdata:0000F2D8                 dd offset __purecall
.rdata:0000F2DC                 dd offset __purecall
.rdata:0000F2E0                 dd offset __purecall
.rdata:0000F2E4                 dd offset __purecall
.rdata:0000F2E8                 dd offset __purecall
.rdata:0000F2E8 _rdata          ends
.rdata:0000F2E8
.rdata$r:0000F2EC ; ===========================================================================
.rdata$r:0000F2EC
.rdata$r:0000F2EC ; Segment type: Pure data
.rdata$r:0000F2EC ; Segment permissions: Read
.rdata$r:0000F2EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F2EC                 assume cs:_rdata$r
.rdata$r:0000F2EC                 ;org 0F2ECh
.rdata$r:0000F2EC ; COMDAT (pick any)
.rdata$r:0000F2EC                 public ??_R4IInArchive@@6B@
.rdata$r:0000F2EC ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:0000F2EC ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:0000F2B4o
.rdata$r:0000F2ED                 db    0
.rdata$r:0000F2EE                 db    0
.rdata$r:0000F2EF                 db    0
.rdata$r:0000F2F0                 db    0
.rdata$r:0000F2F1                 db    0
.rdata$r:0000F2F2                 db    0
.rdata$r:0000F2F3                 db    0
.rdata$r:0000F2F4                 db    0
.rdata$r:0000F2F5                 db    0
.rdata$r:0000F2F6                 db    0
.rdata$r:0000F2F7                 db    0
.rdata$r:0000F2F8                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:0000F2FC                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F2FC _rdata$r        ends
.rdata$r:0000F2FC
.text:0000F300 ; ===========================================================================
.text:0000F300
.text:0000F300 ; Segment type: Pure code
.text:0000F300 ; Segment permissions: Read/Execute
.text:0000F300 _text           segment para public 'CODE' use32
.text:0000F300                 assume cs:_text
.text:0000F300                 ;org 0F300h
.text:0000F300 ; COMDAT (pick any)
.text:0000F300                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F300
.text:0000F300 ; =============== S U B R O U T I N E =======================================
.text:0000F300
.text:0000F300 ; Attributes: bp-based frame
.text:0000F300
.text:0000F300 ; _DWORD __thiscall IInArchiveGetStream::IInArchiveGetStream(IInArchiveGetStream *__hidden this)
.text:0000F300                 public ??0IInArchiveGetStream@@QAE@XZ
.text:0000F300 ??0IInArchiveGetStream@@QAE@XZ proc near
.text:0000F300                                         ; CODE XREF: NArchive::NParser::CHandler::CHandler(void)+3Bp
.text:0000F300
.text:0000F300 var_4           = dword ptr -4
.text:0000F300
.text:0000F300                 push    ebp
.text:0000F301                 mov     ebp, esp
.text:0000F303                 push    ecx
.text:0000F304                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F30B                 mov     [ebp+var_4], ecx
.text:0000F30E                 mov     ecx, [ebp+var_4]
.text:0000F311                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000F316                 mov     eax, [ebp+var_4]
.text:0000F319                 mov     dword ptr [eax], offset ??_7IInArchiveGetStream@@6B@ ; const IInArchiveGetStream::`vftable'
.text:0000F31F                 mov     eax, [ebp+var_4]
.text:0000F322                 add     esp, 4
.text:0000F325                 cmp     ebp, esp
.text:0000F327                 call    __RTC_CheckEsp
.text:0000F32C                 mov     esp, ebp
.text:0000F32E                 pop     ebp
.text:0000F32F                 retn
.text:0000F32F ??0IInArchiveGetStream@@QAE@XZ endp
.text:0000F32F
.text:0000F32F _text           ends
.text:0000F32F
.rdata:0000F330 ; ===========================================================================
.rdata:0000F330
.rdata:0000F330 ; Segment type: Pure data
.rdata:0000F330 ; Segment permissions: Read
.rdata:0000F330 _rdata          segment dword public 'DATA' use32
.rdata:0000F330                 assume cs:_rdata
.rdata:0000F330                 ;org 0F330h
.rdata:0000F330 ; COMDAT (pick largest)
.rdata:0000F330                 dd offset ??_R4IInArchiveGetStream@@6B@ ; const IInArchiveGetStream::`RTTI Complete Object Locator'
.rdata:0000F334                 public ??_7IInArchiveGetStream@@6B@
.rdata:0000F334 ; const IInArchiveGetStream::`vftable'
.rdata:0000F334 ??_7IInArchiveGetStream@@6B@ dd offset __purecall
.rdata:0000F334                                         ; DATA XREF: IInArchiveGetStream::IInArchiveGetStream(void)+19o
.rdata:0000F338                 dd offset __purecall
.rdata:0000F33C                 dd offset __purecall
.rdata:0000F340                 dd offset __purecall
.rdata:0000F340 _rdata          ends
.rdata:0000F340
.rdata$r:0000F344 ; ===========================================================================
.rdata$r:0000F344
.rdata$r:0000F344 ; Segment type: Pure data
.rdata$r:0000F344 ; Segment permissions: Read
.rdata$r:0000F344 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F344                 assume cs:_rdata$r
.rdata$r:0000F344                 ;org 0F344h
.rdata$r:0000F344 ; COMDAT (pick any)
.rdata$r:0000F344                 public ??_R4IInArchiveGetStream@@6B@
.rdata$r:0000F344 ; const IInArchiveGetStream::`RTTI Complete Object Locator'
.rdata$r:0000F344 ??_R4IInArchiveGetStream@@6B@ db    0   ; DATA XREF: .rdata:0000F330o
.rdata$r:0000F345                 db    0
.rdata$r:0000F346                 db    0
.rdata$r:0000F347                 db    0
.rdata$r:0000F348                 db    0
.rdata$r:0000F349                 db    0
.rdata$r:0000F34A                 db    0
.rdata$r:0000F34B                 db    0
.rdata$r:0000F34C                 db    0
.rdata$r:0000F34D                 db    0
.rdata$r:0000F34E                 db    0
.rdata$r:0000F34F                 db    0
.rdata$r:0000F350                 dd offset ??_R0?AUIInArchiveGetStream@@@8 ; IInArchiveGetStream `RTTI Type Descriptor'
.rdata$r:0000F354                 dd offset ??_R3IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F354 _rdata$r        ends
.rdata$r:0000F354
.text:0000F358 ; ===========================================================================
.text:0000F358
.text:0000F358 ; Segment type: Pure code
.text:0000F358 ; Segment permissions: Read/Execute
.text:0000F358 _text           segment para public 'CODE' use32
.text:0000F358                 assume cs:_text
.text:0000F358                 ;org 0F358h
.text:0000F358 ; COMDAT (pick any)
.text:0000F358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F358
.text:0000F358 ; =============== S U B R O U T I N E =======================================
.text:0000F358
.text:0000F358 ; Attributes: bp-based frame
.text:0000F358
.text:0000F358 ; _DWORD __thiscall NArchive::NParser::CHandler::~CHandler(NArchive::NParser::CHandler *__hidden this)
.text:0000F358                 public ??1CHandler@NParser@NArchive@@QAE@XZ
.text:0000F358 ??1CHandler@NParser@NArchive@@QAE@XZ proc near
.text:0000F358                                         ; CODE XREF: NArchive::NParser::CHandler::`scalar deleting destructor'(uint)+11p
.text:0000F358
.text:0000F358 var_10          = dword ptr -10h
.text:0000F358 var_C           = dword ptr -0Ch
.text:0000F358 var_4           = dword ptr -4
.text:0000F358
.text:0000F358                 push    ebp
.text:0000F359                 mov     ebp, esp
.text:0000F35B                 push    0FFFFFFFFh
.text:0000F35D                 push    offset __ehhandler$??1CHandler@NParser@NArchive@@QAE@XZ
.text:0000F362                 mov     eax, large fs:0
.text:0000F368                 push    eax
.text:0000F369                 push    ecx
.text:0000F36A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000F371                 mov     eax, dword ptr ds:___security_cookie
.text:0000F376                 xor     eax, ebp
.text:0000F378                 push    eax
.text:0000F379                 lea     eax, [ebp+var_C]
.text:0000F37C                 mov     large fs:0, eax
.text:0000F382                 mov     [ebp+var_10], ecx
.text:0000F385                 mov     [ebp+var_4], 0
.text:0000F38C                 mov     ecx, [ebp+var_10]
.text:0000F38F                 add     ecx, 20h ; ' '
.text:0000F392                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000F397                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000F39E                 mov     ecx, [ebp+var_10]
.text:0000F3A1                 add     ecx, 0Ch
.text:0000F3A4                 call    ??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>(void)
.text:0000F3A9                 mov     ecx, [ebp+var_C]
.text:0000F3AC                 mov     large fs:0, ecx
.text:0000F3B3                 pop     ecx
.text:0000F3B4                 add     esp, 10h
.text:0000F3B7                 cmp     ebp, esp
.text:0000F3B9                 call    __RTC_CheckEsp
.text:0000F3BE                 mov     esp, ebp
.text:0000F3C0                 pop     ebp
.text:0000F3C1                 retn
.text:0000F3C1 ??1CHandler@NParser@NArchive@@QAE@XZ endp
.text:0000F3C1
.text:0000F3C1 ; ---------------------------------------------------------------------------
.text:0000F3C2                 align 4
.text:0000F3C2 _text           ends
.text:0000F3C2
.text$x:0000F3C4 ; ===========================================================================
.text$x:0000F3C4
.text$x:0000F3C4 ; Segment type: Pure code
.text$x:0000F3C4 ; Segment permissions: Read/Execute
.text$x:0000F3C4 _text$x         segment para public 'CODE' use32
.text$x:0000F3C4                 assume cs:_text$x
.text$x:0000F3C4                 ;org 0F3C4h
.text$x:0000F3C4 ; COMDAT (pick associative to section at F358)
.text$x:0000F3C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000F3C4
.text$x:0000F3C4 ; =============== S U B R O U T I N E =======================================
.text$x:0000F3C4
.text$x:0000F3C4
.text$x:0000F3C4 __unwindfunclet$??1CHandler@NParser@NArchive@@QAE@XZ$0 proc near
.text$x:0000F3C4                                         ; DATA XREF: .xdata$x:0000F3F0o
.text$x:0000F3C4                 mov     ecx, [ebp-10h]
.text$x:0000F3C7                 add     ecx, 0Ch
.text$x:0000F3CA                 jmp     ??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>(void)
.text$x:0000F3CA __unwindfunclet$??1CHandler@NParser@NArchive@@QAE@XZ$0 endp
.text$x:0000F3CA
.text$x:0000F3CF
.text$x:0000F3CF ; =============== S U B R O U T I N E =======================================
.text$x:0000F3CF
.text$x:0000F3CF
.text$x:0000F3CF __ehhandler$??1CHandler@NParser@NArchive@@QAE@XZ proc near
.text$x:0000F3CF                                         ; DATA XREF: NArchive::NParser::CHandler::~CHandler(void)+5o
.text$x:0000F3CF
.text$x:0000F3CF arg_4           = dword ptr  8
.text$x:0000F3CF
.text$x:0000F3CF                 mov     edx, [esp+arg_4]
.text$x:0000F3D3                 lea     eax, [edx+0Ch]
.text$x:0000F3D6                 mov     ecx, [edx-8]
.text$x:0000F3D9                 xor     ecx, eax
.text$x:0000F3DB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000F3E0                 mov     eax, offset __ehfuncinfo$??1CHandler@NParser@NArchive@@QAE@XZ
.text$x:0000F3E5                 jmp     ___CxxFrameHandler3
.text$x:0000F3E5 __ehhandler$??1CHandler@NParser@NArchive@@QAE@XZ endp
.text$x:0000F3E5
.text$x:0000F3E5 ; ---------------------------------------------------------------------------
.text$x:0000F3EA                 align 4
.text$x:0000F3EA _text$x         ends
.text$x:0000F3EA
.xdata$x:0000F3EC ; ===========================================================================
.xdata$x:0000F3EC
.xdata$x:0000F3EC ; Segment type: Pure data
.xdata$x:0000F3EC ; Segment permissions: Read
.xdata$x:0000F3EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F3EC                 assume cs:_xdata$x
.xdata$x:0000F3EC                 ;org 0F3ECh
.xdata$x:0000F3EC ; COMDAT (pick associative to section at F358)
.xdata$x:0000F3EC __unwindtable$??1CHandler@NParser@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000F3EC                                         ; DATA XREF: .xdata$x:0000F3FCo
.xdata$x:0000F3ED                 db 0FFh
.xdata$x:0000F3EE                 db 0FFh
.xdata$x:0000F3EF                 db 0FFh
.xdata$x:0000F3F0                 dd offset __unwindfunclet$??1CHandler@NParser@NArchive@@QAE@XZ$0
.xdata$x:0000F3F4 __ehfuncinfo$??1CHandler@NParser@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000F3F4                                         ; DATA XREF: __ehhandler$??1CHandler@NParser@NArchive@@QAE@XZ+11o
.xdata$x:0000F3F5                 db    5
.xdata$x:0000F3F6                 db  93h ; ô
.xdata$x:0000F3F7                 db  19h
.xdata$x:0000F3F8                 db    1
.xdata$x:0000F3F9                 db    0
.xdata$x:0000F3FA                 db    0
.xdata$x:0000F3FB                 db    0
.xdata$x:0000F3FC                 dd offset __unwindtable$??1CHandler@NParser@NArchive@@QAE@XZ
.xdata$x:0000F400                 db    0
.xdata$x:0000F401                 db    0
.xdata$x:0000F402                 db    0
.xdata$x:0000F403                 db    0
.xdata$x:0000F404                 db    0
.xdata$x:0000F405                 db    0
.xdata$x:0000F406                 db    0
.xdata$x:0000F407                 db    0
.xdata$x:0000F408                 db    0
.xdata$x:0000F409                 db    0
.xdata$x:0000F40A                 db    0
.xdata$x:0000F40B                 db    0
.xdata$x:0000F40C                 db    0
.xdata$x:0000F40D                 db    0
.xdata$x:0000F40E                 db    0
.xdata$x:0000F40F                 db    0
.xdata$x:0000F410                 db    0
.xdata$x:0000F411                 db    0
.xdata$x:0000F412                 db    0
.xdata$x:0000F413                 db    0
.xdata$x:0000F414                 db    1
.xdata$x:0000F415                 db    0
.xdata$x:0000F416                 db    0
.xdata$x:0000F417                 db    0
.xdata$x:0000F417 _xdata$x        ends
.xdata$x:0000F417
.text:0000F418 ; ===========================================================================
.text:0000F418
.text:0000F418 ; Segment type: Pure code
.text:0000F418 ; Segment permissions: Read/Execute
.text:0000F418 _text           segment para public 'CODE' use32
.text:0000F418                 assume cs:_text
.text:0000F418                 ;org 0F418h
.text:0000F418 ; COMDAT (pick any)
.text:0000F418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F418
.text:0000F418 ; =============== S U B R O U T I N E =======================================
.text:0000F418
.text:0000F418 ; Attributes: bp-based frame
.text:0000F418
.text:0000F418 ; bool __thiscall UString::IsEqualTo_Ascii_NoCase(UString *this, const char *)
.text:0000F418                 public ?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z
.text:0000F418 ?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z proc near
.text:0000F418                                         ; CODE XREF: IsExeExt(UString const &)+Bp
.text:0000F418
.text:0000F418 var_4           = dword ptr -4
.text:0000F418 arg_0           = dword ptr  8
.text:0000F418
.text:0000F418                 push    ebp
.text:0000F419                 mov     ebp, esp
.text:0000F41B                 push    ecx
.text:0000F41C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F423                 mov     [ebp+var_4], ecx
.text:0000F426                 mov     eax, [ebp+arg_0]
.text:0000F429                 push    eax             ; char *
.text:0000F42A                 mov     ecx, [ebp+var_4]
.text:0000F42D                 mov     edx, [ecx]
.text:0000F42F                 push    edx             ; wchar_t *
.text:0000F430                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:0000F435                 add     esp, 4
.text:0000F438                 cmp     ebp, esp
.text:0000F43A                 call    __RTC_CheckEsp
.text:0000F43F                 mov     esp, ebp
.text:0000F441                 pop     ebp
.text:0000F442                 retn    4
.text:0000F442 ?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z endp
.text:0000F442
.text:0000F442 ; ---------------------------------------------------------------------------
.text:0000F445                 align 4
.text:0000F445 _text           ends
.text:0000F445
.text:0000F448 ; ===========================================================================
.text:0000F448
.text:0000F448 ; Segment type: Pure code
.text:0000F448 ; Segment permissions: Read/Execute
.text:0000F448 _text           segment para public 'CODE' use32
.text:0000F448                 assume cs:_text
.text:0000F448                 ;org 0F448h
.text:0000F448 ; COMDAT (pick any)
.text:0000F448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F448
.text:0000F448 ; =============== S U B R O U T I N E =======================================
.text:0000F448
.text:0000F448 ; Attributes: bp-based frame
.text:0000F448
.text:0000F448 ; public: class UString __thiscall CArcInfoEx::GetMainExt(void)const
.text:0000F448                 public ?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ
.text:0000F448 ?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ proc near
.text:0000F448                                         ; CODE XREF: ReadParseItemProps(IInArchive *,CArcInfoEx const &,NArchive::NParser::CParseItem &)+46p
.text:0000F448
.text:0000F448 var_8           = dword ptr -8
.text:0000F448 var_4           = dword ptr -4
.text:0000F448 arg_0           = dword ptr  8
.text:0000F448
.text:0000F448                 push    ebp
.text:0000F449                 mov     ebp, esp
.text:0000F44B                 sub     esp, 8
.text:0000F44E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000F455                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F45C                 mov     [ebp+var_4], ecx
.text:0000F45F                 mov     [ebp+var_8], 0
.text:0000F466                 mov     ecx, [ebp+var_4]
.text:0000F469                 add     ecx, 18h
.text:0000F46C                 call    ?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ ; CObjectVector<CArcExtInfo>::IsEmpty(void)
.text:0000F471                 movzx   eax, al
.text:0000F474                 test    eax, eax
.text:0000F476                 jz      short loc_F48E
.text:0000F478                 mov     ecx, [ebp+arg_0]
.text:0000F47B                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000F480                 mov     ecx, [ebp+var_8]
.text:0000F483                 or      ecx, 1
.text:0000F486                 mov     [ebp+var_8], ecx
.text:0000F489                 mov     eax, [ebp+arg_0]
.text:0000F48C                 jmp     short loc_F4B0
.text:0000F48E ; ---------------------------------------------------------------------------
.text:0000F48E
.text:0000F48E loc_F48E:                               ; CODE XREF: CArcInfoEx::GetMainExt(void)+2Ej
.text:0000F48E                 push    0
.text:0000F490                 mov     ecx, [ebp+var_4]
.text:0000F493                 add     ecx, 18h
.text:0000F496                 call    ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[](uint)
.text:0000F49B                 push    eax
.text:0000F49C                 mov     ecx, [ebp+arg_0]
.text:0000F49F                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000F4A4                 mov     edx, [ebp+var_8]
.text:0000F4A7                 or      edx, 1
.text:0000F4AA                 mov     [ebp+var_8], edx
.text:0000F4AD                 mov     eax, [ebp+arg_0]
.text:0000F4B0
.text:0000F4B0 loc_F4B0:                               ; CODE XREF: CArcInfoEx::GetMainExt(void)+44j
.text:0000F4B0                 add     esp, 8
.text:0000F4B3                 cmp     ebp, esp
.text:0000F4B5                 call    __RTC_CheckEsp
.text:0000F4BA                 mov     esp, ebp
.text:0000F4BC                 pop     ebp
.text:0000F4BD                 retn    4
.text:0000F4BD ?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ endp
.text:0000F4BD
.text:0000F4BD _text           ends
.text:0000F4BD
.text:0000F4C0 ; ===========================================================================
.text:0000F4C0
.text:0000F4C0 ; Segment type: Pure code
.text:0000F4C0 ; Segment permissions: Read/Execute
.text:0000F4C0 _text           segment para public 'CODE' use32
.text:0000F4C0                 assume cs:_text
.text:0000F4C0                 ;org 0F4C0h
.text:0000F4C0 ; COMDAT (pick any)
.text:0000F4C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F4C0
.text:0000F4C0 ; =============== S U B R O U T I N E =======================================
.text:0000F4C0
.text:0000F4C0 ; Attributes: bp-based frame
.text:0000F4C0
.text:0000F4C0 ; void __thiscall CExtractCallback_To_OpenCallback::Init(CExtractCallback_To_OpenCallback *this, struct IArchiveOpenCallback *)
.text:0000F4C0                 public ?Init@CExtractCallback_To_OpenCallback@@QAEXPAUIArchiveOpenCallback@@@Z
.text:0000F4C0 ?Init@CExtractCallback_To_OpenCallback@@QAEXPAUIArchiveOpenCallback@@@Z proc near
.text:0000F4C0                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+17ADp
.text:0000F4C0
.text:0000F4C0 var_4           = dword ptr -4
.text:0000F4C0 arg_0           = dword ptr  8
.text:0000F4C0
.text:0000F4C0                 push    ebp
.text:0000F4C1                 mov     ebp, esp
.text:0000F4C3                 push    ecx
.text:0000F4C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F4CB                 mov     [ebp+var_4], ecx
.text:0000F4CE                 mov     eax, [ebp+arg_0]
.text:0000F4D1                 push    eax
.text:0000F4D2                 mov     ecx, [ebp+var_4]
.text:0000F4D5                 add     ecx, 0Ch
.text:0000F4D8                 call    ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z ; CMyComPtr<IArchiveOpenCallback>::operator=(IArchiveOpenCallback *)
.text:0000F4DD                 mov     ecx, [ebp+var_4]
.text:0000F4E0                 mov     dword ptr [ecx+10h], 0
.text:0000F4E7                 mov     dword ptr [ecx+14h], 0
.text:0000F4EE                 mov     edx, [ebp+var_4]
.text:0000F4F1                 mov     dword ptr [edx+18h], 0
.text:0000F4F8                 mov     dword ptr [edx+1Ch], 0
.text:0000F4FF                 add     esp, 4
.text:0000F502                 cmp     ebp, esp
.text:0000F504                 call    __RTC_CheckEsp
.text:0000F509                 mov     esp, ebp
.text:0000F50B                 pop     ebp
.text:0000F50C                 retn    4
.text:0000F50C ?Init@CExtractCallback_To_OpenCallback@@QAEXPAUIArchiveOpenCallback@@@Z endp
.text:0000F50C
.text:0000F50C ; ---------------------------------------------------------------------------
.text:0000F50F                 align 10h
.text:0000F50F _text           ends
.text:0000F50F
.text:0000F510 ; ===========================================================================
.text:0000F510
.text:0000F510 ; Segment type: Pure code
.text:0000F510 ; Segment permissions: Read/Execute
.text:0000F510 _text           segment para public 'CODE' use32
.text:0000F510                 assume cs:_text
.text:0000F510                 ;org 0F510h
.text:0000F510 ; COMDAT (pick any)
.text:0000F510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F510
.text:0000F510 ; =============== S U B R O U T I N E =======================================
.text:0000F510
.text:0000F510 ; Attributes: bp-based frame
.text:0000F510
.text:0000F510 ; public: struct CArcErrorInfo & __thiscall CArcErrorInfo::operator=(struct CArcErrorInfo const &)
.text:0000F510                 public ??4CArcErrorInfo@@QAEAAU0@ABU0@@Z
.text:0000F510 ??4CArcErrorInfo@@QAEAAU0@ABU0@@Z proc near
.text:0000F510                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+10B0p
.text:0000F510                                         ; CArc::OpenStream2(COpenOptions const &)+42C8p ...
.text:0000F510
.text:0000F510 var_4           = dword ptr -4
.text:0000F510 arg_0           = dword ptr  8
.text:0000F510
.text:0000F510                 push    ebp
.text:0000F511                 mov     ebp, esp
.text:0000F513                 push    ecx
.text:0000F514                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F51B                 mov     [ebp+var_4], ecx
.text:0000F51E                 mov     eax, [ebp+var_4]
.text:0000F521                 mov     ecx, [ebp+arg_0]
.text:0000F524                 mov     dl, [ecx]
.text:0000F526                 mov     [eax], dl
.text:0000F528                 mov     eax, [ebp+var_4]
.text:0000F52B                 mov     ecx, [ebp+arg_0]
.text:0000F52E                 mov     dl, [ecx+1]
.text:0000F531                 mov     [eax+1], dl
.text:0000F534                 mov     eax, [ebp+var_4]
.text:0000F537                 mov     ecx, [ebp+arg_0]
.text:0000F53A                 mov     dl, [ecx+2]
.text:0000F53D                 mov     [eax+2], dl
.text:0000F540                 mov     eax, [ebp+var_4]
.text:0000F543                 mov     ecx, [ebp+arg_0]
.text:0000F546                 mov     dl, [ecx+3]
.text:0000F549                 mov     [eax+3], dl
.text:0000F54C                 mov     eax, [ebp+var_4]
.text:0000F54F                 mov     ecx, [ebp+arg_0]
.text:0000F552                 mov     edx, [ecx+4]
.text:0000F555                 mov     [eax+4], edx
.text:0000F558                 mov     eax, [ebp+var_4]
.text:0000F55B                 mov     ecx, [ebp+arg_0]
.text:0000F55E                 mov     edx, [ecx+8]
.text:0000F561                 mov     [eax+8], edx
.text:0000F564                 mov     eax, [ebp+var_4]
.text:0000F567                 mov     ecx, [ebp+arg_0]
.text:0000F56A                 mov     edx, [ecx+0Ch]
.text:0000F56D                 mov     [eax+0Ch], edx
.text:0000F570                 mov     eax, [ebp+var_4]
.text:0000F573                 mov     ecx, [ebp+arg_0]
.text:0000F576                 mov     edx, [ecx+10h]
.text:0000F579                 mov     [eax+10h], edx
.text:0000F57C                 mov     ecx, [ecx+14h]
.text:0000F57F                 mov     [eax+14h], ecx
.text:0000F582                 mov     edx, [ebp+arg_0]
.text:0000F585                 add     edx, 18h
.text:0000F588                 push    edx
.text:0000F589                 mov     ecx, [ebp+var_4]
.text:0000F58C                 add     ecx, 18h
.text:0000F58F                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000F594                 mov     eax, [ebp+arg_0]
.text:0000F597                 add     eax, 24h ; '$'
.text:0000F59A                 push    eax
.text:0000F59B                 mov     ecx, [ebp+var_4]
.text:0000F59E                 add     ecx, 24h ; '$'
.text:0000F5A1                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000F5A6                 mov     eax, [ebp+var_4]
.text:0000F5A9                 add     esp, 4
.text:0000F5AC                 cmp     ebp, esp
.text:0000F5AE                 call    __RTC_CheckEsp
.text:0000F5B3                 mov     esp, ebp
.text:0000F5B5                 pop     ebp
.text:0000F5B6                 retn    4
.text:0000F5B6 ??4CArcErrorInfo@@QAEAAU0@ABU0@@Z endp
.text:0000F5B6
.text:0000F5B6 ; ---------------------------------------------------------------------------
.text:0000F5B9                 align 4
.text:0000F5B9 _text           ends
.text:0000F5B9
.text:0000F5BC ; ===========================================================================
.text:0000F5BC
.text:0000F5BC ; Segment type: Pure code
.text:0000F5BC ; Segment permissions: Read/Execute
.text:0000F5BC _text           segment para public 'CODE' use32
.text:0000F5BC                 assume cs:_text
.text:0000F5BC                 ;org 0F5BCh
.text:0000F5BC ; COMDAT (pick any)
.text:0000F5BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F5BC
.text:0000F5BC ; =============== S U B R O U T I N E =======================================
.text:0000F5BC
.text:0000F5BC ; Attributes: bp-based frame
.text:0000F5BC
.text:0000F5BC ; public: __thiscall CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback(void)
.text:0000F5BC                 public ??0CExtractCallback_To_OpenCallback@@QAE@XZ
.text:0000F5BC ??0CExtractCallback_To_OpenCallback@@QAE@XZ proc near
.text:0000F5BC                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1757p
.text:0000F5BC
.text:0000F5BC var_4           = dword ptr -4
.text:0000F5BC
.text:0000F5BC                 push    ebp
.text:0000F5BD                 mov     ebp, esp
.text:0000F5BF                 push    ecx
.text:0000F5C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F5C7                 mov     [ebp+var_4], ecx
.text:0000F5CA                 mov     ecx, [ebp+var_4] ; this
.text:0000F5CD                 call    ??0IArchiveExtractCallback@@QAE@XZ ; IArchiveExtractCallback::IArchiveExtractCallback(void)
.text:0000F5D2                 mov     ecx, [ebp+var_4]
.text:0000F5D5                 add     ecx, 4          ; this
.text:0000F5D8                 call    ??0ICompressProgressInfo@@QAE@XZ ; ICompressProgressInfo::ICompressProgressInfo(void)
.text:0000F5DD                 mov     ecx, [ebp+var_4]
.text:0000F5E0                 add     ecx, 8          ; this
.text:0000F5E3                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000F5E8                 mov     eax, [ebp+var_4]
.text:0000F5EB                 mov     dword ptr [eax], offset ??_7CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@ ; const CExtractCallback_To_OpenCallback::`vftable'{for `IArchiveExtractCallback'}
.text:0000F5F1                 mov     ecx, [ebp+var_4]
.text:0000F5F4                 mov     dword ptr [ecx+4], offset ??_7CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@ ; const CExtractCallback_To_OpenCallback::`vftable'{for `ICompressProgressInfo'}
.text:0000F5FB                 mov     ecx, [ebp+var_4]
.text:0000F5FE                 add     ecx, 0Ch
.text:0000F601                 call    ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(void)
.text:0000F606                 mov     eax, [ebp+var_4]
.text:0000F609                 add     esp, 4
.text:0000F60C                 cmp     ebp, esp
.text:0000F60E                 call    __RTC_CheckEsp
.text:0000F613                 mov     esp, ebp
.text:0000F615                 pop     ebp
.text:0000F616                 retn
.text:0000F616 ??0CExtractCallback_To_OpenCallback@@QAE@XZ endp
.text:0000F616
.text:0000F616 ; ---------------------------------------------------------------------------
.text:0000F617                 align 4
.text:0000F617 _text           ends
.text:0000F617
.rdata:0000F618 ; ===========================================================================
.rdata:0000F618
.rdata:0000F618 ; Segment type: Pure data
.rdata:0000F618 ; Segment permissions: Read
.rdata:0000F618 _rdata          segment dword public 'DATA' use32
.rdata:0000F618                 assume cs:_rdata
.rdata:0000F618                 ;org 0F618h
.rdata:0000F618 ; COMDAT (pick largest)
.rdata:0000F618                 dd offset ??_R4CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@ ; const CExtractCallback_To_OpenCallback::`RTTI Complete Object Locator'{for `ICompressProgressInfo'}
.rdata:0000F61C                 public ??_7CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@
.rdata:0000F61C ; const CExtractCallback_To_OpenCallback::`vftable'{for `ICompressProgressInfo'}
.rdata:0000F61C ??_7CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@ dd offset ?QueryInterface@CExtractCallback_To_OpenCallback@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000F61C                                         ; DATA XREF: CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback(void)+38o
.rdata:0000F61C                                         ; [thunk]:CExtractCallback_To_OpenCallback::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000F620                 dd offset ?AddRef@CExtractCallback_To_OpenCallback@@W3AGKXZ ; [thunk]:CExtractCallback_To_OpenCallback::AddRef`adjustor{4}' (void)
.rdata:0000F624                 dd offset ?Release@CExtractCallback_To_OpenCallback@@W3AGKXZ ; [thunk]:CExtractCallback_To_OpenCallback::Release`adjustor{4}' (void)
.rdata:0000F628                 dd offset ?SetRatioInfo@CExtractCallback_To_OpenCallback@@UAGJPB_K0@Z ; CExtractCallback_To_OpenCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)
.rdata:0000F628 _rdata          ends
.rdata:0000F628
.rdata:0000F62C ; ===========================================================================
.rdata:0000F62C
.rdata:0000F62C ; Segment type: Pure data
.rdata:0000F62C ; Segment permissions: Read
.rdata:0000F62C _rdata          segment dword public 'DATA' use32
.rdata:0000F62C                 assume cs:_rdata
.rdata:0000F62C                 ;org 0F62Ch
.rdata:0000F62C ; COMDAT (pick largest)
.rdata:0000F62C                 dd offset ??_R4CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@ ; const CExtractCallback_To_OpenCallback::`RTTI Complete Object Locator'{for `IArchiveExtractCallback'}
.rdata:0000F630                 public ??_7CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@
.rdata:0000F630 ; const CExtractCallback_To_OpenCallback::`vftable'{for `IArchiveExtractCallback'}
.rdata:0000F630 ??_7CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@ dd offset ?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000F630                                         ; DATA XREF: CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback(void)+2Fo
.rdata:0000F630                                         ; CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)
.rdata:0000F634                 dd offset ?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ ; CExtractCallback_To_OpenCallback::AddRef(void)
.rdata:0000F638                 dd offset ?Release@CExtractCallback_To_OpenCallback@@UAGKXZ ; CExtractCallback_To_OpenCallback::Release(void)
.rdata:0000F63C                 dd offset ?SetTotal@CExtractCallback_To_OpenCallback@@UAGJ_K@Z ; CExtractCallback_To_OpenCallback::SetTotal(unsigned __int64)
.rdata:0000F640                 dd offset ?SetCompleted@CExtractCallback_To_OpenCallback@@UAGJPB_K@Z ; CExtractCallback_To_OpenCallback::SetCompleted(unsigned __int64 const *)
.rdata:0000F644                 dd offset ?GetStream@CExtractCallback_To_OpenCallback@@UAGJIPAPAUISequentialOutStream@@H@Z ; CExtractCallback_To_OpenCallback::GetStream(uint,ISequentialOutStream * *,int)
.rdata:0000F648                 dd offset ?PrepareOperation@CExtractCallback_To_OpenCallback@@UAGJH@Z ; CExtractCallback_To_OpenCallback::PrepareOperation(int)
.rdata:0000F64C                 dd offset ?SetOperationResult@CExtractCallback_To_OpenCallback@@UAGJH@Z ; CExtractCallback_To_OpenCallback::SetOperationResult(int)
.rdata:0000F64C _rdata          ends
.rdata:0000F64C
.rdata$r:0000F650 ; ===========================================================================
.rdata$r:0000F650
.rdata$r:0000F650 ; Segment type: Pure data
.rdata$r:0000F650 ; Segment permissions: Read
.rdata$r:0000F650 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F650                 assume cs:_rdata$r
.rdata$r:0000F650                 ;org 0F650h
.rdata$r:0000F650 ; COMDAT (pick any)
.rdata$r:0000F650                 public ??_R4CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@
.rdata$r:0000F650 ; const CExtractCallback_To_OpenCallback::`RTTI Complete Object Locator'{for `IArchiveExtractCallback'}
.rdata$r:0000F650 ??_R4CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@ db    0
.rdata$r:0000F650                                         ; DATA XREF: .rdata:0000F62Co
.rdata$r:0000F651                 db    0
.rdata$r:0000F652                 db    0
.rdata$r:0000F653                 db    0
.rdata$r:0000F654                 db    0
.rdata$r:0000F655                 db    0
.rdata$r:0000F656                 db    0
.rdata$r:0000F657                 db    0
.rdata$r:0000F658                 db    0
.rdata$r:0000F659                 db    0
.rdata$r:0000F65A                 db    0
.rdata$r:0000F65B                 db    0
.rdata$r:0000F65C                 dd offset ??_R0?AVCExtractCallback_To_OpenCallback@@@8 ; CExtractCallback_To_OpenCallback `RTTI Type Descriptor'
.rdata$r:0000F660                 dd offset ??_R3CExtractCallback_To_OpenCallback@@8 ; CExtractCallback_To_OpenCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F660 _rdata$r        ends
.rdata$r:0000F660
.data:0000F664 ; ===========================================================================
.data:0000F664
.data:0000F664 ; Segment type: Pure data
.data:0000F664 ; Segment permissions: Read/Write
.data:0000F664 _data           segment dword public 'DATA' use32
.data:0000F664                 assume cs:_data
.data:0000F664                 ;org 0F664h
.data:0000F664 ; COMDAT (pick any)
.data:0000F664                 public ??_R0?AVCExtractCallback_To_OpenCallback@@@8
.data:0000F664 ; class CExtractCallback_To_OpenCallback `RTTI Type Descriptor'
.data:0000F664 ??_R0?AVCExtractCallback_To_OpenCallback@@@8 dd offset ??_7type_info@@6B@
.data:0000F664                                         ; DATA XREF: .rdata$r:0000F65Co
.data:0000F664                                         ; .rdata$r:CExtractCallback_To_OpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000F664                                         ; const type_info::`vftable'
.data:0000F668                 db    0
.data:0000F669                 db    0
.data:0000F66A                 db    0
.data:0000F66B                 db    0
.data:0000F66C                 db  2Eh ; .
.data:0000F66D                 db  3Fh ; ?
.data:0000F66E                 db  41h ; A
.data:0000F66F                 db  56h ; V
.data:0000F670                 db  43h ; C
.data:0000F671                 db  45h ; E
.data:0000F672                 db  78h ; x
.data:0000F673                 db  74h ; t
.data:0000F674                 db  72h ; r
.data:0000F675                 db  61h ; a
.data:0000F676                 db  63h ; c
.data:0000F677                 db  74h ; t
.data:0000F678                 db  43h ; C
.data:0000F679                 db  61h ; a
.data:0000F67A                 db  6Ch ; l
.data:0000F67B                 db  6Ch ; l
.data:0000F67C                 db  62h ; b
.data:0000F67D                 db  61h ; a
.data:0000F67E                 db  63h ; c
.data:0000F67F                 db  6Bh ; k
.data:0000F680                 db  5Fh ; _
.data:0000F681                 db  54h ; T
.data:0000F682                 db  6Fh ; o
.data:0000F683                 db  5Fh ; _
.data:0000F684                 db  4Fh ; O
.data:0000F685                 db  70h ; p
.data:0000F686                 db  65h ; e
.data:0000F687                 db  6Eh ; n
.data:0000F688                 db  43h ; C
.data:0000F689                 db  61h ; a
.data:0000F68A                 db  6Ch ; l
.data:0000F68B                 db  6Ch ; l
.data:0000F68C                 db  62h ; b
.data:0000F68D                 db  61h ; a
.data:0000F68E                 db  63h ; c
.data:0000F68F                 db  6Bh ; k
.data:0000F690                 db  40h ; @
.data:0000F691                 db  40h ; @
.data:0000F692                 db    0
.data:0000F693                 align 4
.data:0000F693 _data           ends
.data:0000F693
.rdata$r:0000F694 ; ===========================================================================
.rdata$r:0000F694
.rdata$r:0000F694 ; Segment type: Pure data
.rdata$r:0000F694 ; Segment permissions: Read
.rdata$r:0000F694 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F694                 assume cs:_rdata$r
.rdata$r:0000F694                 ;org 0F694h
.rdata$r:0000F694 ; COMDAT (pick any)
.rdata$r:0000F694                 public ??_R3CExtractCallback_To_OpenCallback@@8
.rdata$r:0000F694 ; CExtractCallback_To_OpenCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F694 ??_R3CExtractCallback_To_OpenCallback@@8 db    0
.rdata$r:0000F694                                         ; DATA XREF: .rdata$r:0000F660o
.rdata$r:0000F694                                         ; .rdata$r:0000F6DCo ...
.rdata$r:0000F695                 db    0
.rdata$r:0000F696                 db    0
.rdata$r:0000F697                 db    0
.rdata$r:0000F698                 db    1
.rdata$r:0000F699                 db    0
.rdata$r:0000F69A                 db    0
.rdata$r:0000F69B                 db    0
.rdata$r:0000F69C                 db    7
.rdata$r:0000F69D                 db    0
.rdata$r:0000F69E                 db    0
.rdata$r:0000F69F                 db    0
.rdata$r:0000F6A0                 dd offset ??_R2CExtractCallback_To_OpenCallback@@8 ; CExtractCallback_To_OpenCallback::`RTTI Base Class Array'
.rdata$r:0000F6A0 _rdata$r        ends
.rdata$r:0000F6A0
.rdata$r:0000F6A4 ; ===========================================================================
.rdata$r:0000F6A4
.rdata$r:0000F6A4 ; Segment type: Pure data
.rdata$r:0000F6A4 ; Segment permissions: Read
.rdata$r:0000F6A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F6A4                 assume cs:_rdata$r
.rdata$r:0000F6A4                 ;org 0F6A4h
.rdata$r:0000F6A4 ; COMDAT (pick any)
.rdata$r:0000F6A4                 public ??_R2CExtractCallback_To_OpenCallback@@8
.rdata$r:0000F6A4 ; CExtractCallback_To_OpenCallback::`RTTI Base Class Array'
.rdata$r:0000F6A4 ??_R2CExtractCallback_To_OpenCallback@@8 dd offset ??_R1A@?0A@EA@CExtractCallback_To_OpenCallback@@8
.rdata$r:0000F6A4                                         ; DATA XREF: .rdata$r:0000F6A0o
.rdata$r:0000F6A4                                         ; CExtractCallback_To_OpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F6A8                 dd offset ??_R1A@?0A@EA@IArchiveExtractCallback@@8 ; IArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F6AC                 dd offset ??_R1A@?0A@EA@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F6B0                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000F6B4                 dd offset ??_R13?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000F6B8                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000F6BC                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000F6C0                 db    0
.rdata$r:0000F6C1                 align 4
.rdata$r:0000F6C1 _rdata$r        ends
.rdata$r:0000F6C1
.rdata$r:0000F6C4 ; ===========================================================================
.rdata$r:0000F6C4
.rdata$r:0000F6C4 ; Segment type: Pure data
.rdata$r:0000F6C4 ; Segment permissions: Read
.rdata$r:0000F6C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F6C4                 assume cs:_rdata$r
.rdata$r:0000F6C4                 ;org 0F6C4h
.rdata$r:0000F6C4 ; COMDAT (pick any)
.rdata$r:0000F6C4                 public ??_R1A@?0A@EA@CExtractCallback_To_OpenCallback@@8
.rdata$r:0000F6C4 ; CExtractCallback_To_OpenCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F6C4 ??_R1A@?0A@EA@CExtractCallback_To_OpenCallback@@8 dd offset ??_R0?AVCExtractCallback_To_OpenCallback@@@8
.rdata$r:0000F6C4                                         ; DATA XREF: .rdata$r:CExtractCallback_To_OpenCallback::`RTTI Base Class Array'o
.rdata$r:0000F6C4                                         ; CExtractCallback_To_OpenCallback `RTTI Type Descriptor'
.rdata$r:0000F6C8                 db    6
.rdata$r:0000F6C9                 db    0
.rdata$r:0000F6CA                 db    0
.rdata$r:0000F6CB                 db    0
.rdata$r:0000F6CC                 db    0
.rdata$r:0000F6CD                 db    0
.rdata$r:0000F6CE                 db    0
.rdata$r:0000F6CF                 db    0
.rdata$r:0000F6D0                 db 0FFh
.rdata$r:0000F6D1                 db 0FFh
.rdata$r:0000F6D2                 db 0FFh
.rdata$r:0000F6D3                 db 0FFh
.rdata$r:0000F6D4                 db    0
.rdata$r:0000F6D5                 db    0
.rdata$r:0000F6D6                 db    0
.rdata$r:0000F6D7                 db    0
.rdata$r:0000F6D8                 db  40h ; @
.rdata$r:0000F6D9                 db    0
.rdata$r:0000F6DA                 db    0
.rdata$r:0000F6DB                 db    0
.rdata$r:0000F6DC                 dd offset ??_R3CExtractCallback_To_OpenCallback@@8 ; CExtractCallback_To_OpenCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F6DC _rdata$r        ends
.rdata$r:0000F6DC
.rdata$r:0000F6E0 ; ===========================================================================
.rdata$r:0000F6E0
.rdata$r:0000F6E0 ; Segment type: Pure data
.rdata$r:0000F6E0 ; Segment permissions: Read
.rdata$r:0000F6E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F6E0                 assume cs:_rdata$r
.rdata$r:0000F6E0                 ;org 0F6E0h
.rdata$r:0000F6E0 ; COMDAT (pick any)
.rdata$r:0000F6E0                 public ??_R1A@?0A@EA@IArchiveExtractCallback@@8
.rdata$r:0000F6E0 ; IArchiveExtractCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F6E0 ??_R1A@?0A@EA@IArchiveExtractCallback@@8 dd offset ??_R0?AUIArchiveExtractCallback@@@8
.rdata$r:0000F6E0                                         ; DATA XREF: .rdata$r:0000F6A8o
.rdata$r:0000F6E0                                         ; .rdata$r:IArchiveExtractCallback::`RTTI Base Class Array'o
.rdata$r:0000F6E0                                         ; IArchiveExtractCallback `RTTI Type Descriptor'
.rdata$r:0000F6E4                 db    2
.rdata$r:0000F6E5                 db    0
.rdata$r:0000F6E6                 db    0
.rdata$r:0000F6E7                 db    0
.rdata$r:0000F6E8                 db    0
.rdata$r:0000F6E9                 db    0
.rdata$r:0000F6EA                 db    0
.rdata$r:0000F6EB                 db    0
.rdata$r:0000F6EC                 db 0FFh
.rdata$r:0000F6ED                 db 0FFh
.rdata$r:0000F6EE                 db 0FFh
.rdata$r:0000F6EF                 db 0FFh
.rdata$r:0000F6F0                 db    0
.rdata$r:0000F6F1                 db    0
.rdata$r:0000F6F2                 db    0
.rdata$r:0000F6F3                 db    0
.rdata$r:0000F6F4                 db  40h ; @
.rdata$r:0000F6F5                 db    0
.rdata$r:0000F6F6                 db    0
.rdata$r:0000F6F7                 db    0
.rdata$r:0000F6F8                 dd offset ??_R3IArchiveExtractCallback@@8 ; IArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F6F8 _rdata$r        ends
.rdata$r:0000F6F8
.data:0000F6FC ; ===========================================================================
.data:0000F6FC
.data:0000F6FC ; Segment type: Pure data
.data:0000F6FC ; Segment permissions: Read/Write
.data:0000F6FC _data           segment dword public 'DATA' use32
.data:0000F6FC                 assume cs:_data
.data:0000F6FC                 ;org 0F6FCh
.data:0000F6FC ; COMDAT (pick any)
.data:0000F6FC                 public ??_R0?AUIArchiveExtractCallback@@@8
.data:0000F6FC ; struct IArchiveExtractCallback `RTTI Type Descriptor'
.data:0000F6FC ??_R0?AUIArchiveExtractCallback@@@8 dd offset ??_7type_info@@6B@
.data:0000F6FC                                         ; DATA XREF: .rdata$r:IArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000F6FC                                         ; .rdata$r:000103B0o
.data:0000F6FC                                         ; const type_info::`vftable'
.data:0000F700                 db    0
.data:0000F701                 db    0
.data:0000F702                 db    0
.data:0000F703                 db    0
.data:0000F704                 db  2Eh ; .
.data:0000F705                 db  3Fh ; ?
.data:0000F706                 db  41h ; A
.data:0000F707                 db  55h ; U
.data:0000F708                 db  49h ; I
.data:0000F709                 db  41h ; A
.data:0000F70A                 db  72h ; r
.data:0000F70B                 db  63h ; c
.data:0000F70C                 db  68h ; h
.data:0000F70D                 db  69h ; i
.data:0000F70E                 db  76h ; v
.data:0000F70F                 db  65h ; e
.data:0000F710                 db  45h ; E
.data:0000F711                 db  78h ; x
.data:0000F712                 db  74h ; t
.data:0000F713                 db  72h ; r
.data:0000F714                 db  61h ; a
.data:0000F715                 db  63h ; c
.data:0000F716                 db  74h ; t
.data:0000F717                 db  43h ; C
.data:0000F718                 db  61h ; a
.data:0000F719                 db  6Ch ; l
.data:0000F71A                 db  6Ch ; l
.data:0000F71B                 db  62h ; b
.data:0000F71C                 db  61h ; a
.data:0000F71D                 db  63h ; c
.data:0000F71E                 db  6Bh ; k
.data:0000F71F                 db  40h ; @
.data:0000F720                 db  40h ; @
.data:0000F721                 db    0
.data:0000F722                 align 4
.data:0000F722 _data           ends
.data:0000F722
.rdata$r:0000F724 ; ===========================================================================
.rdata$r:0000F724
.rdata$r:0000F724 ; Segment type: Pure data
.rdata$r:0000F724 ; Segment permissions: Read
.rdata$r:0000F724 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F724                 assume cs:_rdata$r
.rdata$r:0000F724                 ;org 0F724h
.rdata$r:0000F724 ; COMDAT (pick any)
.rdata$r:0000F724                 public ??_R3IArchiveExtractCallback@@8
.rdata$r:0000F724 ; IArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F724 ??_R3IArchiveExtractCallback@@8 db    0 ; DATA XREF: .rdata$r:0000F6F8o
.rdata$r:0000F724                                         ; .rdata$r:000103B4o
.rdata$r:0000F725                 db    0
.rdata$r:0000F726                 db    0
.rdata$r:0000F727                 db    0
.rdata$r:0000F728                 db    0
.rdata$r:0000F729                 db    0
.rdata$r:0000F72A                 db    0
.rdata$r:0000F72B                 db    0
.rdata$r:0000F72C                 db    3
.rdata$r:0000F72D                 db    0
.rdata$r:0000F72E                 db    0
.rdata$r:0000F72F                 db    0
.rdata$r:0000F730                 dd offset ??_R2IArchiveExtractCallback@@8 ; IArchiveExtractCallback::`RTTI Base Class Array'
.rdata$r:0000F730 _rdata$r        ends
.rdata$r:0000F730
.rdata$r:0000F734 ; ===========================================================================
.rdata$r:0000F734
.rdata$r:0000F734 ; Segment type: Pure data
.rdata$r:0000F734 ; Segment permissions: Read
.rdata$r:0000F734 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F734                 assume cs:_rdata$r
.rdata$r:0000F734                 ;org 0F734h
.rdata$r:0000F734 ; COMDAT (pick any)
.rdata$r:0000F734                 public ??_R2IArchiveExtractCallback@@8
.rdata$r:0000F734 ; IArchiveExtractCallback::`RTTI Base Class Array'
.rdata$r:0000F734 ??_R2IArchiveExtractCallback@@8 dd offset ??_R1A@?0A@EA@IArchiveExtractCallback@@8
.rdata$r:0000F734                                         ; DATA XREF: .rdata$r:0000F730o
.rdata$r:0000F734                                         ; IArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F738                 dd offset ??_R1A@?0A@EA@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F73C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F740                 db    0
.rdata$r:0000F741                 align 4
.rdata$r:0000F741 _rdata$r        ends
.rdata$r:0000F741
.rdata$r:0000F744 ; ===========================================================================
.rdata$r:0000F744
.rdata$r:0000F744 ; Segment type: Pure data
.rdata$r:0000F744 ; Segment permissions: Read
.rdata$r:0000F744 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F744                 assume cs:_rdata$r
.rdata$r:0000F744                 ;org 0F744h
.rdata$r:0000F744 ; COMDAT (pick any)
.rdata$r:0000F744                 public ??_R1A@?0A@EA@IProgress@@8
.rdata$r:0000F744 ; IProgress::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F744 ??_R1A@?0A@EA@IProgress@@8 dd offset ??_R0?AUIProgress@@@8
.rdata$r:0000F744                                         ; DATA XREF: .rdata$r:0000F6ACo
.rdata$r:0000F744                                         ; .rdata$r:0000F738o ...
.rdata$r:0000F744                                         ; IProgress `RTTI Type Descriptor'
.rdata$r:0000F748                 db    1
.rdata$r:0000F749                 db    0
.rdata$r:0000F74A                 db    0
.rdata$r:0000F74B                 db    0
.rdata$r:0000F74C                 db    0
.rdata$r:0000F74D                 db    0
.rdata$r:0000F74E                 db    0
.rdata$r:0000F74F                 db    0
.rdata$r:0000F750                 db 0FFh
.rdata$r:0000F751                 db 0FFh
.rdata$r:0000F752                 db 0FFh
.rdata$r:0000F753                 db 0FFh
.rdata$r:0000F754                 db    0
.rdata$r:0000F755                 db    0
.rdata$r:0000F756                 db    0
.rdata$r:0000F757                 db    0
.rdata$r:0000F758                 db  40h ; @
.rdata$r:0000F759                 db    0
.rdata$r:0000F75A                 db    0
.rdata$r:0000F75B                 db    0
.rdata$r:0000F75C                 dd offset ??_R3IProgress@@8 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F75C _rdata$r        ends
.rdata$r:0000F75C
.data:0000F760 ; ===========================================================================
.data:0000F760
.data:0000F760 ; Segment type: Pure data
.data:0000F760 ; Segment permissions: Read/Write
.data:0000F760 _data           segment dword public 'DATA' use32
.data:0000F760                 assume cs:_data
.data:0000F760                 ;org 0F760h
.data:0000F760 ; COMDAT (pick any)
.data:0000F760                 public ??_R0?AUIProgress@@@8
.data:0000F760 ; struct IProgress `RTTI Type Descriptor'
.data:0000F760 ??_R0?AUIProgress@@@8 dd offset ??_7type_info@@6B@
.data:0000F760                                         ; DATA XREF: .rdata$r:IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000F760                                         ; .rdata$r:000104C0o
.data:0000F760                                         ; const type_info::`vftable'
.data:0000F764                 align 8
.data:0000F768 a_?auiprogress@ db '.?AUIProgress@@',0
.data:0000F768 _data           ends
.data:0000F768
.rdata$r:0000F778 ; ===========================================================================
.rdata$r:0000F778
.rdata$r:0000F778 ; Segment type: Pure data
.rdata$r:0000F778 ; Segment permissions: Read
.rdata$r:0000F778 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F778                 assume cs:_rdata$r
.rdata$r:0000F778                 ;org 0F778h
.rdata$r:0000F778 ; COMDAT (pick any)
.rdata$r:0000F778                 public ??_R3IProgress@@8
.rdata$r:0000F778 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F778 ??_R3IProgress@@8 db    0               ; DATA XREF: .rdata$r:0000F75Co
.rdata$r:0000F778                                         ; .rdata$r:000104C4o
.rdata$r:0000F779                 db    0
.rdata$r:0000F77A                 db    0
.rdata$r:0000F77B                 db    0
.rdata$r:0000F77C                 db    0
.rdata$r:0000F77D                 db    0
.rdata$r:0000F77E                 db    0
.rdata$r:0000F77F                 db    0
.rdata$r:0000F780                 db    2
.rdata$r:0000F781                 db    0
.rdata$r:0000F782                 db    0
.rdata$r:0000F783                 db    0
.rdata$r:0000F784                 dd offset ??_R2IProgress@@8 ; IProgress::`RTTI Base Class Array'
.rdata$r:0000F784 _rdata$r        ends
.rdata$r:0000F784
.rdata$r:0000F788 ; ===========================================================================
.rdata$r:0000F788
.rdata$r:0000F788 ; Segment type: Pure data
.rdata$r:0000F788 ; Segment permissions: Read
.rdata$r:0000F788 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F788                 assume cs:_rdata$r
.rdata$r:0000F788                 ;org 0F788h
.rdata$r:0000F788 ; COMDAT (pick any)
.rdata$r:0000F788                 public ??_R2IProgress@@8
.rdata$r:0000F788 ; IProgress::`RTTI Base Class Array'
.rdata$r:0000F788 ??_R2IProgress@@8 dd offset ??_R1A@?0A@EA@IProgress@@8
.rdata$r:0000F788                                         ; DATA XREF: .rdata$r:0000F784o
.rdata$r:0000F788                                         ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F78C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F790                 db    0
.rdata$r:0000F791                 align 4
.rdata$r:0000F791 _rdata$r        ends
.rdata$r:0000F791
.rdata$r:0000F794 ; ===========================================================================
.rdata$r:0000F794
.rdata$r:0000F794 ; Segment type: Pure data
.rdata$r:0000F794 ; Segment permissions: Read
.rdata$r:0000F794 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F794                 assume cs:_rdata$r
.rdata$r:0000F794                 ;org 0F794h
.rdata$r:0000F794 ; COMDAT (pick any)
.rdata$r:0000F794                 public ??_R13?0A@EA@ICompressProgressInfo@@8
.rdata$r:0000F794 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000F794 ??_R13?0A@EA@ICompressProgressInfo@@8 dd offset ??_R0?AUICompressProgressInfo@@@8
.rdata$r:0000F794                                         ; DATA XREF: .rdata$r:0000F6B4o
.rdata$r:0000F794                                         ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:0000F798                 db    1
.rdata$r:0000F799                 db    0
.rdata$r:0000F79A                 db    0
.rdata$r:0000F79B                 db    0
.rdata$r:0000F79C                 db    4
.rdata$r:0000F79D                 db    0
.rdata$r:0000F79E                 db    0
.rdata$r:0000F79F                 db    0
.rdata$r:0000F7A0                 db 0FFh
.rdata$r:0000F7A1                 db 0FFh
.rdata$r:0000F7A2                 db 0FFh
.rdata$r:0000F7A3                 db 0FFh
.rdata$r:0000F7A4                 db    0
.rdata$r:0000F7A5                 db    0
.rdata$r:0000F7A6                 db    0
.rdata$r:0000F7A7                 db    0
.rdata$r:0000F7A8                 db  40h ; @
.rdata$r:0000F7A9                 db    0
.rdata$r:0000F7AA                 db    0
.rdata$r:0000F7AB                 db    0
.rdata$r:0000F7AC                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F7AC _rdata$r        ends
.rdata$r:0000F7AC
.data:0000F7B0 ; ===========================================================================
.data:0000F7B0
.data:0000F7B0 ; Segment type: Pure data
.data:0000F7B0 ; Segment permissions: Read/Write
.data:0000F7B0 _data           segment dword public 'DATA' use32
.data:0000F7B0                 assume cs:_data
.data:0000F7B0                 ;org 0F7B0h
.data:0000F7B0 ; COMDAT (pick any)
.data:0000F7B0                 public ??_R0?AUICompressProgressInfo@@@8
.data:0000F7B0 ; struct ICompressProgressInfo `RTTI Type Descriptor'
.data:0000F7B0 ??_R0?AUICompressProgressInfo@@@8 dd offset ??_7type_info@@6B@
.data:0000F7B0                                         ; DATA XREF: .rdata$r:ICompressProgressInfo::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000F7B0                                         ; .rdata$r:ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000F7B0                                         ; const type_info::`vftable'
.data:0000F7B4                 align 8
.data:0000F7B8 a_?auicompressp db '.?AUICompressProgressInfo@@',0
.data:0000F7B8 _data           ends
.data:0000F7B8
.rdata$r:0000F7D4 ; ===========================================================================
.rdata$r:0000F7D4
.rdata$r:0000F7D4 ; Segment type: Pure data
.rdata$r:0000F7D4 ; Segment permissions: Read
.rdata$r:0000F7D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F7D4                 assume cs:_rdata$r
.rdata$r:0000F7D4                 ;org 0F7D4h
.rdata$r:0000F7D4 ; COMDAT (pick any)
.rdata$r:0000F7D4                 public ??_R3ICompressProgressInfo@@8
.rdata$r:0000F7D4 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F7D4 ??_R3ICompressProgressInfo@@8 db    0   ; DATA XREF: .rdata$r:0000F7ACo
.rdata$r:0000F7D4                                         ; .rdata$r:0000F808o ...
.rdata$r:0000F7D5                 db    0
.rdata$r:0000F7D6                 db    0
.rdata$r:0000F7D7                 db    0
.rdata$r:0000F7D8                 db    0
.rdata$r:0000F7D9                 db    0
.rdata$r:0000F7DA                 db    0
.rdata$r:0000F7DB                 db    0
.rdata$r:0000F7DC                 db    2
.rdata$r:0000F7DD                 db    0
.rdata$r:0000F7DE                 db    0
.rdata$r:0000F7DF                 db    0
.rdata$r:0000F7E0                 dd offset ??_R2ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:0000F7E0 _rdata$r        ends
.rdata$r:0000F7E0
.rdata$r:0000F7E4 ; ===========================================================================
.rdata$r:0000F7E4
.rdata$r:0000F7E4 ; Segment type: Pure data
.rdata$r:0000F7E4 ; Segment permissions: Read
.rdata$r:0000F7E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F7E4                 assume cs:_rdata$r
.rdata$r:0000F7E4                 ;org 0F7E4h
.rdata$r:0000F7E4 ; COMDAT (pick any)
.rdata$r:0000F7E4                 public ??_R2ICompressProgressInfo@@8
.rdata$r:0000F7E4 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:0000F7E4 ??_R2ICompressProgressInfo@@8 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:0000F7E4                                         ; DATA XREF: .rdata$r:0000F7E0o
.rdata$r:0000F7E4                                         ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F7E8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000F7EC                 db    0
.rdata$r:0000F7ED                 align 10h
.rdata$r:0000F7ED _rdata$r        ends
.rdata$r:0000F7ED
.rdata$r:0000F7F0 ; ===========================================================================
.rdata$r:0000F7F0
.rdata$r:0000F7F0 ; Segment type: Pure data
.rdata$r:0000F7F0 ; Segment permissions: Read
.rdata$r:0000F7F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F7F0                 assume cs:_rdata$r
.rdata$r:0000F7F0                 ;org 0F7F0h
.rdata$r:0000F7F0 ; COMDAT (pick any)
.rdata$r:0000F7F0                 public ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:0000F7F0 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000F7F0 ??_R1A@?0A@EA@ICompressProgressInfo@@8 dd offset ??_R0?AUICompressProgressInfo@@@8
.rdata$r:0000F7F0                                         ; DATA XREF: .rdata$r:ICompressProgressInfo::`RTTI Base Class Array'o
.rdata$r:0000F7F0                                         ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:0000F7F4                 db    1
.rdata$r:0000F7F5                 db    0
.rdata$r:0000F7F6                 db    0
.rdata$r:0000F7F7                 db    0
.rdata$r:0000F7F8                 db    0
.rdata$r:0000F7F9                 db    0
.rdata$r:0000F7FA                 db    0
.rdata$r:0000F7FB                 db    0
.rdata$r:0000F7FC                 db 0FFh
.rdata$r:0000F7FD                 db 0FFh
.rdata$r:0000F7FE                 db 0FFh
.rdata$r:0000F7FF                 db 0FFh
.rdata$r:0000F800                 db    0
.rdata$r:0000F801                 db    0
.rdata$r:0000F802                 db    0
.rdata$r:0000F803                 db    0
.rdata$r:0000F804                 db  40h ; @
.rdata$r:0000F805                 db    0
.rdata$r:0000F806                 db    0
.rdata$r:0000F807                 db    0
.rdata$r:0000F808                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F808 _rdata$r        ends
.rdata$r:0000F808
.rdata$r:0000F80C ; ===========================================================================
.rdata$r:0000F80C
.rdata$r:0000F80C ; Segment type: Pure data
.rdata$r:0000F80C ; Segment permissions: Read
.rdata$r:0000F80C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000F80C                 assume cs:_rdata$r
.rdata$r:0000F80C                 ;org 0F80Ch
.rdata$r:0000F80C ; COMDAT (pick any)
.rdata$r:0000F80C                 public ??_R4CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@
.rdata$r:0000F80C ; const CExtractCallback_To_OpenCallback::`RTTI Complete Object Locator'{for `ICompressProgressInfo'}
.rdata$r:0000F80C ??_R4CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@ db    0
.rdata$r:0000F80C                                         ; DATA XREF: .rdata:0000F618o
.rdata$r:0000F80D                 db    0
.rdata$r:0000F80E                 db    0
.rdata$r:0000F80F                 db    0
.rdata$r:0000F810                 db    4
.rdata$r:0000F811                 db    0
.rdata$r:0000F812                 db    0
.rdata$r:0000F813                 db    0
.rdata$r:0000F814                 db    0
.rdata$r:0000F815                 db    0
.rdata$r:0000F816                 db    0
.rdata$r:0000F817                 db    0
.rdata$r:0000F818                 dd offset ??_R0?AVCExtractCallback_To_OpenCallback@@@8 ; CExtractCallback_To_OpenCallback `RTTI Type Descriptor'
.rdata$r:0000F81C                 dd offset ??_R3CExtractCallback_To_OpenCallback@@8 ; CExtractCallback_To_OpenCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000F81C _rdata$r        ends
.rdata$r:0000F81C
.text:0000F820 ; ===========================================================================
.text:0000F820
.text:0000F820 ; Segment type: Pure code
.text:0000F820 ; Segment permissions: Read/Execute
.text:0000F820 _text           segment para public 'CODE' use32
.text:0000F820                 assume cs:_text
.text:0000F820                 ;org 0F820h
.text:0000F820 ; COMDAT (pick any)
.text:0000F820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F820
.text:0000F820 ; =============== S U B R O U T I N E =======================================
.text:0000F820
.text:0000F820 ; Attributes: bp-based frame
.text:0000F820
.text:0000F820 ; __int32 __stdcall CExtractCallback_To_OpenCallback::QueryInterface(CExtractCallback_To_OpenCallback *this, const struct _GUID *Buf1, void **)
.text:0000F820                 public ?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z
.text:0000F820 ?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000F820                                         ; CODE XREF: [thunk]:CExtractCallback_To_OpenCallback::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000F820                                         ; DATA XREF: .rdata:const CExtractCallback_To_OpenCallback::`vftable'{for `IArchiveExtractCallback'}o
.text:0000F820
.text:0000F820 var_4           = dword ptr -4
.text:0000F820 this            = dword ptr  8
.text:0000F820 Buf1            = dword ptr  0Ch
.text:0000F820 arg_8           = dword ptr  10h
.text:0000F820
.text:0000F820                 push    ebp
.text:0000F821                 mov     ebp, esp
.text:0000F823                 push    ecx
.text:0000F824                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F82B                 mov     eax, [ebp+arg_8]
.text:0000F82E                 mov     dword ptr [eax], 0
.text:0000F834                 push    offset _IID_IUnknown ; Buf2
.text:0000F839                 mov     ecx, [ebp+Buf1]
.text:0000F83C                 push    ecx             ; Buf1
.text:0000F83D                 call    ___@8           ; __(x,x)
.text:0000F842                 test    eax, eax
.text:0000F844                 jz      short loc_F850
.text:0000F846                 mov     edx, [ebp+arg_8]
.text:0000F849                 mov     eax, [ebp+this]
.text:0000F84C                 mov     [edx], eax
.text:0000F84E                 jmp     short loc_F8A7
.text:0000F850 ; ---------------------------------------------------------------------------
.text:0000F850
.text:0000F850 loc_F850:                               ; CODE XREF: CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)+24j
.text:0000F850                 push    offset _IID_IArchiveExtractCallback ; Buf2
.text:0000F855                 mov     ecx, [ebp+Buf1]
.text:0000F858                 push    ecx             ; Buf1
.text:0000F859                 call    ___@8           ; __(x,x)
.text:0000F85E                 test    eax, eax
.text:0000F860                 jz      short loc_F86C
.text:0000F862                 mov     edx, [ebp+arg_8]
.text:0000F865                 mov     eax, [ebp+this]
.text:0000F868                 mov     [edx], eax
.text:0000F86A                 jmp     short loc_F8A7
.text:0000F86C ; ---------------------------------------------------------------------------
.text:0000F86C
.text:0000F86C loc_F86C:                               ; CODE XREF: CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)+40j
.text:0000F86C                 push    offset _IID_ICompressProgressInfo ; Buf2
.text:0000F871                 mov     ecx, [ebp+Buf1]
.text:0000F874                 push    ecx             ; Buf1
.text:0000F875                 call    ___@8           ; __(x,x)
.text:0000F87A                 test    eax, eax
.text:0000F87C                 jz      short loc_F8A0
.text:0000F87E                 cmp     [ebp+this], 0
.text:0000F882                 jz      short loc_F88F
.text:0000F884                 mov     edx, [ebp+this]
.text:0000F887                 add     edx, 4
.text:0000F88A                 mov     [ebp+var_4], edx
.text:0000F88D                 jmp     short loc_F896
.text:0000F88F ; ---------------------------------------------------------------------------
.text:0000F88F
.text:0000F88F loc_F88F:                               ; CODE XREF: CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)+62j
.text:0000F88F                 mov     [ebp+var_4], 0
.text:0000F896
.text:0000F896 loc_F896:                               ; CODE XREF: CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)+6Dj
.text:0000F896                 mov     eax, [ebp+arg_8]
.text:0000F899                 mov     ecx, [ebp+var_4]
.text:0000F89C                 mov     [eax], ecx
.text:0000F89E                 jmp     short loc_F8A7
.text:0000F8A0 ; ---------------------------------------------------------------------------
.text:0000F8A0
.text:0000F8A0 loc_F8A0:                               ; CODE XREF: CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)+5Cj
.text:0000F8A0                 mov     eax, 80004002h
.text:0000F8A5                 jmp     short loc_F8B8
.text:0000F8A7 ; ---------------------------------------------------------------------------
.text:0000F8A7
.text:0000F8A7 loc_F8A7:                               ; CODE XREF: CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)+2Ej
.text:0000F8A7                                         ; CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)+4Aj ...
.text:0000F8A7                 mov     edx, [ebp+this]
.text:0000F8AA                 mov     eax, [edx+8]
.text:0000F8AD                 add     eax, 1
.text:0000F8B0                 mov     ecx, [ebp+this]
.text:0000F8B3                 mov     [ecx+8], eax
.text:0000F8B6                 xor     eax, eax
.text:0000F8B8
.text:0000F8B8 loc_F8B8:                               ; CODE XREF: CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)+85j
.text:0000F8B8                 add     esp, 4
.text:0000F8BB                 cmp     ebp, esp
.text:0000F8BD                 call    __RTC_CheckEsp
.text:0000F8C2                 mov     esp, ebp
.text:0000F8C4                 pop     ebp
.text:0000F8C5                 retn    0Ch
.text:0000F8C5 ?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000F8C5
.text:0000F8C5 _text           ends
.text:0000F8C5
.text:0000F8C8 ; ===========================================================================
.text:0000F8C8
.text:0000F8C8 ; Segment type: Pure code
.text:0000F8C8 ; Segment permissions: Read/Execute
.text:0000F8C8 _text           segment para public 'CODE' use32
.text:0000F8C8                 assume cs:_text
.text:0000F8C8                 ;org 0F8C8h
.text:0000F8C8 ; COMDAT (pick any)
.text:0000F8C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F8C8
.text:0000F8C8 ; =============== S U B R O U T I N E =======================================
.text:0000F8C8
.text:0000F8C8 ; Attributes: bp-based frame
.text:0000F8C8
.text:0000F8C8 ; unsigned __int32 __stdcall CExtractCallback_To_OpenCallback::AddRef(CExtractCallback_To_OpenCallback *this)
.text:0000F8C8                 public ?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ
.text:0000F8C8 ?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ proc near
.text:0000F8C8                                         ; CODE XREF: [thunk]:CExtractCallback_To_OpenCallback::AddRef`adjustor{4}' (void)+5j
.text:0000F8C8                                         ; DATA XREF: .rdata:0000F634o
.text:0000F8C8
.text:0000F8C8 var_4           = dword ptr -4
.text:0000F8C8 this            = dword ptr  8
.text:0000F8C8
.text:0000F8C8                 push    ebp
.text:0000F8C9                 mov     ebp, esp
.text:0000F8CB                 push    ecx
.text:0000F8CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F8D3                 mov     eax, [ebp+this]
.text:0000F8D6                 mov     ecx, [eax+8]
.text:0000F8D9                 add     ecx, 1
.text:0000F8DC                 mov     [ebp+var_4], ecx
.text:0000F8DF                 mov     edx, [ebp+this]
.text:0000F8E2                 mov     eax, [ebp+var_4]
.text:0000F8E5                 mov     [edx+8], eax
.text:0000F8E8                 mov     eax, [ebp+var_4]
.text:0000F8EB                 mov     esp, ebp
.text:0000F8ED                 pop     ebp
.text:0000F8EE                 retn    4
.text:0000F8EE ?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ endp
.text:0000F8EE
.text:0000F8EE ; ---------------------------------------------------------------------------
.text:0000F8F1                 align 4
.text:0000F8F1 _text           ends
.text:0000F8F1
.text:0000F8F4 ; ===========================================================================
.text:0000F8F4
.text:0000F8F4 ; Segment type: Pure code
.text:0000F8F4 ; Segment permissions: Read/Execute
.text:0000F8F4 _text           segment para public 'CODE' use32
.text:0000F8F4                 assume cs:_text
.text:0000F8F4                 ;org 0F8F4h
.text:0000F8F4 ; COMDAT (pick any)
.text:0000F8F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F8F4
.text:0000F8F4 ; =============== S U B R O U T I N E =======================================
.text:0000F8F4
.text:0000F8F4 ; Attributes: bp-based frame
.text:0000F8F4
.text:0000F8F4 ; unsigned __int32 __stdcall CExtractCallback_To_OpenCallback::Release(CExtractCallback_To_OpenCallback *this)
.text:0000F8F4                 public ?Release@CExtractCallback_To_OpenCallback@@UAGKXZ
.text:0000F8F4 ?Release@CExtractCallback_To_OpenCallback@@UAGKXZ proc near
.text:0000F8F4                                         ; CODE XREF: [thunk]:CExtractCallback_To_OpenCallback::Release`adjustor{4}' (void)+5j
.text:0000F8F4                                         ; DATA XREF: .rdata:0000F638o
.text:0000F8F4
.text:0000F8F4 var_10          = dword ptr -10h
.text:0000F8F4 var_C           = dword ptr -0Ch
.text:0000F8F4 var_8           = dword ptr -8
.text:0000F8F4 var_4           = dword ptr -4
.text:0000F8F4 this            = dword ptr  8
.text:0000F8F4
.text:0000F8F4                 push    ebp
.text:0000F8F5                 mov     ebp, esp
.text:0000F8F7                 sub     esp, 10h
.text:0000F8FA                 mov     eax, 0CCCCCCCCh
.text:0000F8FF                 mov     [ebp+var_10], eax
.text:0000F902                 mov     [ebp+var_C], eax
.text:0000F905                 mov     [ebp+var_8], eax
.text:0000F908                 mov     [ebp+var_4], eax
.text:0000F90B                 mov     eax, [ebp+this]
.text:0000F90E                 mov     ecx, [eax+8]
.text:0000F911                 sub     ecx, 1
.text:0000F914                 mov     [ebp+var_C], ecx
.text:0000F917                 mov     edx, [ebp+this]
.text:0000F91A                 mov     eax, [ebp+var_C]
.text:0000F91D                 mov     [edx+8], eax
.text:0000F920                 cmp     [ebp+var_C], 0
.text:0000F924                 jz      short loc_F92E
.text:0000F926                 mov     ecx, [ebp+this]
.text:0000F929                 mov     eax, [ecx+8]
.text:0000F92C                 jmp     short loc_F958
.text:0000F92E ; ---------------------------------------------------------------------------
.text:0000F92E
.text:0000F92E loc_F92E:                               ; CODE XREF: CExtractCallback_To_OpenCallback::Release(void)+30j
.text:0000F92E                 mov     edx, [ebp+this]
.text:0000F931                 mov     [ebp+var_8], edx
.text:0000F934                 mov     eax, [ebp+var_8]
.text:0000F937                 mov     [ebp+var_4], eax
.text:0000F93A                 cmp     [ebp+var_4], 0
.text:0000F93E                 jz      short loc_F94F
.text:0000F940                 push    1
.text:0000F942                 mov     ecx, [ebp+var_4]
.text:0000F945                 call    ??_GCExtractCallback_To_OpenCallback@@QAEPAXI@Z ; CExtractCallback_To_OpenCallback::`scalar deleting destructor'(uint)
.text:0000F94A                 mov     [ebp+var_10], eax
.text:0000F94D                 jmp     short loc_F956
.text:0000F94F ; ---------------------------------------------------------------------------
.text:0000F94F
.text:0000F94F loc_F94F:                               ; CODE XREF: CExtractCallback_To_OpenCallback::Release(void)+4Aj
.text:0000F94F                 mov     [ebp+var_10], 0
.text:0000F956
.text:0000F956 loc_F956:                               ; CODE XREF: CExtractCallback_To_OpenCallback::Release(void)+59j
.text:0000F956                 xor     eax, eax
.text:0000F958
.text:0000F958 loc_F958:                               ; CODE XREF: CExtractCallback_To_OpenCallback::Release(void)+38j
.text:0000F958                 add     esp, 10h
.text:0000F95B                 cmp     ebp, esp
.text:0000F95D                 call    __RTC_CheckEsp
.text:0000F962                 mov     esp, ebp
.text:0000F964                 pop     ebp
.text:0000F965                 retn    4
.text:0000F965 ?Release@CExtractCallback_To_OpenCallback@@UAGKXZ endp
.text:0000F965
.text:0000F965 _text           ends
.text:0000F965
.text:0000F968 ; ===========================================================================
.text:0000F968
.text:0000F968 ; Segment type: Pure code
.text:0000F968 ; Segment permissions: Read/Execute
.text:0000F968 _text           segment para public 'CODE' use32
.text:0000F968                 assume cs:_text
.text:0000F968                 ;org 0F968h
.text:0000F968 ; COMDAT (pick any)
.text:0000F968                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F968
.text:0000F968 ; =============== S U B R O U T I N E =======================================
.text:0000F968
.text:0000F968 ; Attributes: bp-based frame
.text:0000F968
.text:0000F968 ; public: void * __thiscall CExtractCallback_To_OpenCallback::`scalar deleting destructor'(unsigned int)
.text:0000F968                 public ??_GCExtractCallback_To_OpenCallback@@QAEPAXI@Z
.text:0000F968 ??_GCExtractCallback_To_OpenCallback@@QAEPAXI@Z proc near
.text:0000F968                                         ; CODE XREF: CExtractCallback_To_OpenCallback::Release(void)+51p
.text:0000F968
.text:0000F968 var_4           = dword ptr -4
.text:0000F968 arg_0           = dword ptr  8
.text:0000F968
.text:0000F968                 push    ebp
.text:0000F969                 mov     ebp, esp
.text:0000F96B                 push    ecx
.text:0000F96C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F973                 mov     [ebp+var_4], ecx
.text:0000F976                 mov     ecx, [ebp+var_4] ; this
.text:0000F979                 call    ??1CExtractCallback_To_OpenCallback@@QAE@XZ ; CExtractCallback_To_OpenCallback::~CExtractCallback_To_OpenCallback(void)
.text:0000F97E                 mov     eax, [ebp+arg_0]
.text:0000F981                 and     eax, 1
.text:0000F984                 jz      short loc_F992
.text:0000F986                 mov     ecx, [ebp+var_4]
.text:0000F989                 push    ecx             ; void *
.text:0000F98A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000F98F                 add     esp, 4
.text:0000F992
.text:0000F992 loc_F992:                               ; CODE XREF: CExtractCallback_To_OpenCallback::`scalar deleting destructor'(uint)+1Cj
.text:0000F992                 mov     eax, [ebp+var_4]
.text:0000F995                 add     esp, 4
.text:0000F998                 cmp     ebp, esp
.text:0000F99A                 call    __RTC_CheckEsp
.text:0000F99F                 mov     esp, ebp
.text:0000F9A1                 pop     ebp
.text:0000F9A2                 retn    4
.text:0000F9A2 ??_GCExtractCallback_To_OpenCallback@@QAEPAXI@Z endp
.text:0000F9A2
.text:0000F9A2 ; ---------------------------------------------------------------------------
.text:0000F9A5                 align 4
.text:0000F9A5 _text           ends
.text:0000F9A5
.text:0000F9A8 ; ===========================================================================
.text:0000F9A8
.text:0000F9A8 ; Segment type: Pure code
.text:0000F9A8 ; Segment permissions: Read/Execute
.text:0000F9A8 _text           segment para public 'CODE' use32
.text:0000F9A8                 assume cs:_text
.text:0000F9A8                 ;org 0F9A8h
.text:0000F9A8 ; COMDAT (pick any)
.text:0000F9A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F9A8
.text:0000F9A8 ; =============== S U B R O U T I N E =======================================
.text:0000F9A8
.text:0000F9A8 ; Attributes: bp-based frame
.text:0000F9A8
.text:0000F9A8 ; _DWORD __thiscall CExtractCallback_To_OpenCallback::~CExtractCallback_To_OpenCallback(CExtractCallback_To_OpenCallback *__hidden this)
.text:0000F9A8                 public ??1CExtractCallback_To_OpenCallback@@QAE@XZ
.text:0000F9A8 ??1CExtractCallback_To_OpenCallback@@QAE@XZ proc near
.text:0000F9A8                                         ; CODE XREF: CExtractCallback_To_OpenCallback::`scalar deleting destructor'(uint)+11p
.text:0000F9A8
.text:0000F9A8 var_4           = dword ptr -4
.text:0000F9A8
.text:0000F9A8                 push    ebp
.text:0000F9A9                 mov     ebp, esp
.text:0000F9AB                 push    ecx
.text:0000F9AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F9B3                 mov     [ebp+var_4], ecx
.text:0000F9B6                 mov     ecx, [ebp+var_4]
.text:0000F9B9                 add     ecx, 0Ch
.text:0000F9BC                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:0000F9C1                 add     esp, 4
.text:0000F9C4                 cmp     ebp, esp
.text:0000F9C6                 call    __RTC_CheckEsp
.text:0000F9CB                 mov     esp, ebp
.text:0000F9CD                 pop     ebp
.text:0000F9CE                 retn
.text:0000F9CE ??1CExtractCallback_To_OpenCallback@@QAE@XZ endp
.text:0000F9CE
.text:0000F9CE ; ---------------------------------------------------------------------------
.text:0000F9CF                 align 10h
.text:0000F9CF _text           ends
.text:0000F9CF
.text:0000F9D0 ; ===========================================================================
.text:0000F9D0
.text:0000F9D0 ; Segment type: Pure code
.text:0000F9D0 ; Segment permissions: Read/Execute
.text:0000F9D0 _text           segment para public 'CODE' use32
.text:0000F9D0                 assume cs:_text
.text:0000F9D0                 ;org 0F9D0h
.text:0000F9D0 ; COMDAT (pick any)
.text:0000F9D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F9D0
.text:0000F9D0 ; =============== S U B R O U T I N E =======================================
.text:0000F9D0
.text:0000F9D0 ; Attributes: bp-based frame
.text:0000F9D0
.text:0000F9D0 ; public: __thiscall CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset(void)
.text:0000F9D0                 public ??0CArchiveOpenCallback_Offset@@QAE@XZ
.text:0000F9D0 ??0CArchiveOpenCallback_Offset@@QAE@XZ proc near
.text:0000F9D0                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+28BBp
.text:0000F9D0
.text:0000F9D0 var_10          = dword ptr -10h
.text:0000F9D0 var_C           = dword ptr -0Ch
.text:0000F9D0 var_4           = dword ptr -4
.text:0000F9D0
.text:0000F9D0                 push    ebp
.text:0000F9D1                 mov     ebp, esp
.text:0000F9D3                 push    0FFFFFFFFh
.text:0000F9D5                 push    offset __ehhandler$??0CArchiveOpenCallback_Offset@@QAE@XZ
.text:0000F9DA                 mov     eax, large fs:0
.text:0000F9E0                 push    eax
.text:0000F9E1                 push    ecx
.text:0000F9E2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000F9E9                 mov     eax, dword ptr ds:___security_cookie
.text:0000F9EE                 xor     eax, ebp
.text:0000F9F0                 push    eax
.text:0000F9F1                 lea     eax, [ebp+var_C]
.text:0000F9F4                 mov     large fs:0, eax
.text:0000F9FA                 mov     [ebp+var_10], ecx
.text:0000F9FD                 mov     ecx, [ebp+var_10] ; this
.text:0000FA00                 call    ??0IArchiveOpenCallback@@QAE@XZ ; IArchiveOpenCallback::IArchiveOpenCallback(void)
.text:0000FA05                 mov     ecx, [ebp+var_10]
.text:0000FA08                 add     ecx, 4          ; this
.text:0000FA0B                 call    ??0ICryptoGetTextPassword@@QAE@XZ ; ICryptoGetTextPassword::ICryptoGetTextPassword(void)
.text:0000FA10                 mov     ecx, [ebp+var_10]
.text:0000FA13                 add     ecx, 8          ; this
.text:0000FA16                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000FA1B                 mov     eax, [ebp+var_10]
.text:0000FA1E                 mov     dword ptr [eax], offset ??_7CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@ ; const CArchiveOpenCallback_Offset::`vftable'{for `IArchiveOpenCallback'}
.text:0000FA24                 mov     ecx, [ebp+var_10]
.text:0000FA27                 mov     dword ptr [ecx+4], offset ??_7CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@ ; const CArchiveOpenCallback_Offset::`vftable'{for `ICryptoGetTextPassword'}
.text:0000FA2E                 mov     ecx, [ebp+var_10]
.text:0000FA31                 add     ecx, 0Ch
.text:0000FA34                 call    ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(void)
.text:0000FA39                 mov     [ebp+var_4], 0
.text:0000FA40                 mov     ecx, [ebp+var_10]
.text:0000FA43                 add     ecx, 20h ; ' '
.text:0000FA46                 call    ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000FA4B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000FA52                 mov     eax, [ebp+var_10]
.text:0000FA55                 mov     ecx, [ebp+var_C]
.text:0000FA58                 mov     large fs:0, ecx
.text:0000FA5F                 pop     ecx
.text:0000FA60                 add     esp, 10h
.text:0000FA63                 cmp     ebp, esp
.text:0000FA65                 call    __RTC_CheckEsp
.text:0000FA6A                 mov     esp, ebp
.text:0000FA6C                 pop     ebp
.text:0000FA6D                 retn
.text:0000FA6D ??0CArchiveOpenCallback_Offset@@QAE@XZ endp
.text:0000FA6D
.text:0000FA6D ; ---------------------------------------------------------------------------
.text:0000FA6E                 align 10h
.text:0000FA6E _text           ends
.text:0000FA6E
.text$x:0000FA70 ; ===========================================================================
.text$x:0000FA70
.text$x:0000FA70 ; Segment type: Pure code
.text$x:0000FA70 ; Segment permissions: Read/Execute
.text$x:0000FA70 _text$x         segment para public 'CODE' use32
.text$x:0000FA70                 assume cs:_text$x
.text$x:0000FA70                 ;org 0FA70h
.text$x:0000FA70 ; COMDAT (pick associative to section at F9D0)
.text$x:0000FA70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000FA70
.text$x:0000FA70 ; =============== S U B R O U T I N E =======================================
.text$x:0000FA70
.text$x:0000FA70
.text$x:0000FA70 __unwindfunclet$??0CArchiveOpenCallback_Offset@@QAE@XZ$0 proc near
.text$x:0000FA70                                         ; DATA XREF: .xdata$x:0000FAC8o
.text$x:0000FA70                 mov     ecx, [ebp-10h]
.text$x:0000FA73                 add     ecx, 0Ch
.text$x:0000FA76                 jmp     ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text$x:0000FA76 __unwindfunclet$??0CArchiveOpenCallback_Offset@@QAE@XZ$0 endp
.text$x:0000FA76
.text$x:0000FA7B
.text$x:0000FA7B ; =============== S U B R O U T I N E =======================================
.text$x:0000FA7B
.text$x:0000FA7B
.text$x:0000FA7B __ehhandler$??0CArchiveOpenCallback_Offset@@QAE@XZ proc near
.text$x:0000FA7B                                         ; DATA XREF: CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset(void)+5o
.text$x:0000FA7B
.text$x:0000FA7B arg_4           = dword ptr  8
.text$x:0000FA7B
.text$x:0000FA7B                 mov     edx, [esp+arg_4]
.text$x:0000FA7F                 lea     eax, [edx+0Ch]
.text$x:0000FA82                 mov     ecx, [edx-8]
.text$x:0000FA85                 xor     ecx, eax
.text$x:0000FA87                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000FA8C                 mov     eax, offset __ehfuncinfo$??0CArchiveOpenCallback_Offset@@QAE@XZ
.text$x:0000FA91                 jmp     ___CxxFrameHandler3
.text$x:0000FA91 __ehhandler$??0CArchiveOpenCallback_Offset@@QAE@XZ endp
.text$x:0000FA91
.text$x:0000FA91 ; ---------------------------------------------------------------------------
.text$x:0000FA96                 align 4
.text$x:0000FA96 _text$x         ends
.text$x:0000FA96
.rdata:0000FA98 ; ===========================================================================
.rdata:0000FA98
.rdata:0000FA98 ; Segment type: Pure data
.rdata:0000FA98 ; Segment permissions: Read
.rdata:0000FA98 _rdata          segment dword public 'DATA' use32
.rdata:0000FA98                 assume cs:_rdata
.rdata:0000FA98                 ;org 0FA98h
.rdata:0000FA98 ; COMDAT (pick largest)
.rdata:0000FA98                 dd offset ??_R4CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@ ; const CArchiveOpenCallback_Offset::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword'}
.rdata:0000FA9C                 public ??_7CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@
.rdata:0000FA9C ; const CArchiveOpenCallback_Offset::`vftable'{for `ICryptoGetTextPassword'}
.rdata:0000FA9C ??_7CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@ dd offset ?QueryInterface@CArchiveOpenCallback_Offset@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000FA9C                                         ; DATA XREF: CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset(void)+57o
.rdata:0000FA9C                                         ; [thunk]:CArchiveOpenCallback_Offset::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000FAA0                 dd offset ?AddRef@CArchiveOpenCallback_Offset@@W3AGKXZ ; [thunk]:CArchiveOpenCallback_Offset::AddRef`adjustor{4}' (void)
.rdata:0000FAA4                 dd offset ?Release@CArchiveOpenCallback_Offset@@W3AGKXZ ; [thunk]:CArchiveOpenCallback_Offset::Release`adjustor{4}' (void)
.rdata:0000FAA8                 dd offset ?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z ; CArchiveOpenCallback_Offset::CryptoGetTextPassword(wchar_t * *)
.rdata:0000FAA8 _rdata          ends
.rdata:0000FAA8
.rdata:0000FAAC ; ===========================================================================
.rdata:0000FAAC
.rdata:0000FAAC ; Segment type: Pure data
.rdata:0000FAAC ; Segment permissions: Read
.rdata:0000FAAC _rdata          segment dword public 'DATA' use32
.rdata:0000FAAC                 assume cs:_rdata
.rdata:0000FAAC                 ;org 0FAACh
.rdata:0000FAAC ; COMDAT (pick largest)
.rdata:0000FAAC                 dd offset ??_R4CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@ ; const CArchiveOpenCallback_Offset::`RTTI Complete Object Locator'{for `IArchiveOpenCallback'}
.rdata:0000FAB0                 public ??_7CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@
.rdata:0000FAB0 ; const CArchiveOpenCallback_Offset::`vftable'{for `IArchiveOpenCallback'}
.rdata:0000FAB0 ??_7CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@ dd offset ?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000FAB0                                         ; DATA XREF: CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset(void)+4Eo
.rdata:0000FAB0                                         ; CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)
.rdata:0000FAB4                 dd offset ?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ ; CArchiveOpenCallback_Offset::AddRef(void)
.rdata:0000FAB8                 dd offset ?Release@CArchiveOpenCallback_Offset@@UAGKXZ ; CArchiveOpenCallback_Offset::Release(void)
.rdata:0000FABC                 dd offset ?SetTotal@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z ; CArchiveOpenCallback_Offset::SetTotal(unsigned __int64 const *,unsigned __int64 const *)
.rdata:0000FAC0                 dd offset ?SetCompleted@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z ; CArchiveOpenCallback_Offset::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)
.rdata:0000FAC0 _rdata          ends
.rdata:0000FAC0
.xdata$x:0000FAC4 ; ===========================================================================
.xdata$x:0000FAC4
.xdata$x:0000FAC4 ; Segment type: Pure data
.xdata$x:0000FAC4 ; Segment permissions: Read
.xdata$x:0000FAC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FAC4                 assume cs:_xdata$x
.xdata$x:0000FAC4                 ;org 0FAC4h
.xdata$x:0000FAC4 ; COMDAT (pick associative to section at F9D0)
.xdata$x:0000FAC4 __unwindtable$??0CArchiveOpenCallback_Offset@@QAE@XZ db 0FFh
.xdata$x:0000FAC4                                         ; DATA XREF: .xdata$x:0000FAD4o
.xdata$x:0000FAC5                 db 0FFh
.xdata$x:0000FAC6                 db 0FFh
.xdata$x:0000FAC7                 db 0FFh
.xdata$x:0000FAC8                 dd offset __unwindfunclet$??0CArchiveOpenCallback_Offset@@QAE@XZ$0
.xdata$x:0000FACC __ehfuncinfo$??0CArchiveOpenCallback_Offset@@QAE@XZ db  22h ; "
.xdata$x:0000FACC                                         ; DATA XREF: __ehhandler$??0CArchiveOpenCallback_Offset@@QAE@XZ+11o
.xdata$x:0000FACD                 db    5
.xdata$x:0000FACE                 db  93h ; ô
.xdata$x:0000FACF                 db  19h
.xdata$x:0000FAD0                 db    1
.xdata$x:0000FAD1                 db    0
.xdata$x:0000FAD2                 db    0
.xdata$x:0000FAD3                 db    0
.xdata$x:0000FAD4                 dd offset __unwindtable$??0CArchiveOpenCallback_Offset@@QAE@XZ
.xdata$x:0000FAD8                 db    0
.xdata$x:0000FAD9                 db    0
.xdata$x:0000FADA                 db    0
.xdata$x:0000FADB                 db    0
.xdata$x:0000FADC                 db    0
.xdata$x:0000FADD                 db    0
.xdata$x:0000FADE                 db    0
.xdata$x:0000FADF                 db    0
.xdata$x:0000FAE0                 db    0
.xdata$x:0000FAE1                 db    0
.xdata$x:0000FAE2                 db    0
.xdata$x:0000FAE3                 db    0
.xdata$x:0000FAE4                 db    0
.xdata$x:0000FAE5                 db    0
.xdata$x:0000FAE6                 db    0
.xdata$x:0000FAE7                 db    0
.xdata$x:0000FAE8                 db    0
.xdata$x:0000FAE9                 db    0
.xdata$x:0000FAEA                 db    0
.xdata$x:0000FAEB                 db    0
.xdata$x:0000FAEC                 db    1
.xdata$x:0000FAED                 db    0
.xdata$x:0000FAEE                 db    0
.xdata$x:0000FAEF                 db    0
.xdata$x:0000FAEF _xdata$x        ends
.xdata$x:0000FAEF
.rdata$r:0000FAF0 ; ===========================================================================
.rdata$r:0000FAF0
.rdata$r:0000FAF0 ; Segment type: Pure data
.rdata$r:0000FAF0 ; Segment permissions: Read
.rdata$r:0000FAF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FAF0                 assume cs:_rdata$r
.rdata$r:0000FAF0                 ;org 0FAF0h
.rdata$r:0000FAF0 ; COMDAT (pick any)
.rdata$r:0000FAF0                 public ??_R4CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@
.rdata$r:0000FAF0 ; const CArchiveOpenCallback_Offset::`RTTI Complete Object Locator'{for `IArchiveOpenCallback'}
.rdata$r:0000FAF0 ??_R4CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@ db    0
.rdata$r:0000FAF0                                         ; DATA XREF: .rdata:0000FAACo
.rdata$r:0000FAF1                 db    0
.rdata$r:0000FAF2                 db    0
.rdata$r:0000FAF3                 db    0
.rdata$r:0000FAF4                 db    0
.rdata$r:0000FAF5                 db    0
.rdata$r:0000FAF6                 db    0
.rdata$r:0000FAF7                 db    0
.rdata$r:0000FAF8                 db    0
.rdata$r:0000FAF9                 db    0
.rdata$r:0000FAFA                 db    0
.rdata$r:0000FAFB                 db    0
.rdata$r:0000FAFC                 dd offset ??_R0?AVCArchiveOpenCallback_Offset@@@8 ; CArchiveOpenCallback_Offset `RTTI Type Descriptor'
.rdata$r:0000FB00                 dd offset ??_R3CArchiveOpenCallback_Offset@@8 ; CArchiveOpenCallback_Offset::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FB00 _rdata$r        ends
.rdata$r:0000FB00
.data:0000FB04 ; ===========================================================================
.data:0000FB04
.data:0000FB04 ; Segment type: Pure data
.data:0000FB04 ; Segment permissions: Read/Write
.data:0000FB04 _data           segment dword public 'DATA' use32
.data:0000FB04                 assume cs:_data
.data:0000FB04                 ;org 0FB04h
.data:0000FB04 ; COMDAT (pick any)
.data:0000FB04                 public ??_R0?AVCArchiveOpenCallback_Offset@@@8
.data:0000FB04 ; class CArchiveOpenCallback_Offset `RTTI Type Descriptor'
.data:0000FB04 ??_R0?AVCArchiveOpenCallback_Offset@@@8 dd offset ??_7type_info@@6B@
.data:0000FB04                                         ; DATA XREF: .rdata$r:0000FAFCo
.data:0000FB04                                         ; .rdata$r:CArchiveOpenCallback_Offset::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000FB04                                         ; const type_info::`vftable'
.data:0000FB08                 db    0
.data:0000FB09                 db    0
.data:0000FB0A                 db    0
.data:0000FB0B                 db    0
.data:0000FB0C                 db  2Eh ; .
.data:0000FB0D                 db  3Fh ; ?
.data:0000FB0E                 db  41h ; A
.data:0000FB0F                 db  56h ; V
.data:0000FB10                 db  43h ; C
.data:0000FB11                 db  41h ; A
.data:0000FB12                 db  72h ; r
.data:0000FB13                 db  63h ; c
.data:0000FB14                 db  68h ; h
.data:0000FB15                 db  69h ; i
.data:0000FB16                 db  76h ; v
.data:0000FB17                 db  65h ; e
.data:0000FB18                 db  4Fh ; O
.data:0000FB19                 db  70h ; p
.data:0000FB1A                 db  65h ; e
.data:0000FB1B                 db  6Eh ; n
.data:0000FB1C                 db  43h ; C
.data:0000FB1D                 db  61h ; a
.data:0000FB1E                 db  6Ch ; l
.data:0000FB1F                 db  6Ch ; l
.data:0000FB20                 db  62h ; b
.data:0000FB21                 db  61h ; a
.data:0000FB22                 db  63h ; c
.data:0000FB23                 db  6Bh ; k
.data:0000FB24                 db  5Fh ; _
.data:0000FB25                 db  4Fh ; O
.data:0000FB26                 db  66h ; f
.data:0000FB27                 db  66h ; f
.data:0000FB28                 db  73h ; s
.data:0000FB29                 db  65h ; e
.data:0000FB2A                 db  74h ; t
.data:0000FB2B                 db  40h ; @
.data:0000FB2C                 db  40h ; @
.data:0000FB2D                 db    0
.data:0000FB2E                 align 10h
.data:0000FB2E _data           ends
.data:0000FB2E
.rdata$r:0000FB30 ; ===========================================================================
.rdata$r:0000FB30
.rdata$r:0000FB30 ; Segment type: Pure data
.rdata$r:0000FB30 ; Segment permissions: Read
.rdata$r:0000FB30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FB30                 assume cs:_rdata$r
.rdata$r:0000FB30                 ;org 0FB30h
.rdata$r:0000FB30 ; COMDAT (pick any)
.rdata$r:0000FB30                 public ??_R3CArchiveOpenCallback_Offset@@8
.rdata$r:0000FB30 ; CArchiveOpenCallback_Offset::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FB30 ??_R3CArchiveOpenCallback_Offset@@8 db    0
.rdata$r:0000FB30                                         ; DATA XREF: .rdata$r:0000FB00o
.rdata$r:0000FB30                                         ; .rdata$r:0000FB74o ...
.rdata$r:0000FB31                 db    0
.rdata$r:0000FB32                 db    0
.rdata$r:0000FB33                 db    0
.rdata$r:0000FB34                 db    1
.rdata$r:0000FB35                 db    0
.rdata$r:0000FB36                 db    0
.rdata$r:0000FB37                 db    0
.rdata$r:0000FB38                 db    6
.rdata$r:0000FB39                 db    0
.rdata$r:0000FB3A                 db    0
.rdata$r:0000FB3B                 db    0
.rdata$r:0000FB3C                 dd offset ??_R2CArchiveOpenCallback_Offset@@8 ; CArchiveOpenCallback_Offset::`RTTI Base Class Array'
.rdata$r:0000FB3C _rdata$r        ends
.rdata$r:0000FB3C
.rdata$r:0000FB40 ; ===========================================================================
.rdata$r:0000FB40
.rdata$r:0000FB40 ; Segment type: Pure data
.rdata$r:0000FB40 ; Segment permissions: Read
.rdata$r:0000FB40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FB40                 assume cs:_rdata$r
.rdata$r:0000FB40                 ;org 0FB40h
.rdata$r:0000FB40 ; COMDAT (pick any)
.rdata$r:0000FB40                 public ??_R2CArchiveOpenCallback_Offset@@8
.rdata$r:0000FB40 ; CArchiveOpenCallback_Offset::`RTTI Base Class Array'
.rdata$r:0000FB40 ??_R2CArchiveOpenCallback_Offset@@8 dd offset ??_R1A@?0A@EA@CArchiveOpenCallback_Offset@@8
.rdata$r:0000FB40                                         ; DATA XREF: .rdata$r:0000FB3Co
.rdata$r:0000FB40                                         ; CArchiveOpenCallback_Offset::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000FB44                 dd offset ??_R1A@?0A@EA@IArchiveOpenCallback@@8 ; IArchiveOpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000FB48                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000FB4C                 dd offset ??_R13?0A@EA@ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000FB50                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000FB54                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000FB58                 db    0
.rdata$r:0000FB59                 align 4
.rdata$r:0000FB59 _rdata$r        ends
.rdata$r:0000FB59
.rdata$r:0000FB5C ; ===========================================================================
.rdata$r:0000FB5C
.rdata$r:0000FB5C ; Segment type: Pure data
.rdata$r:0000FB5C ; Segment permissions: Read
.rdata$r:0000FB5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FB5C                 assume cs:_rdata$r
.rdata$r:0000FB5C                 ;org 0FB5Ch
.rdata$r:0000FB5C ; COMDAT (pick any)
.rdata$r:0000FB5C                 public ??_R1A@?0A@EA@CArchiveOpenCallback_Offset@@8
.rdata$r:0000FB5C ; CArchiveOpenCallback_Offset::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000FB5C ??_R1A@?0A@EA@CArchiveOpenCallback_Offset@@8 dd offset ??_R0?AVCArchiveOpenCallback_Offset@@@8
.rdata$r:0000FB5C                                         ; DATA XREF: .rdata$r:CArchiveOpenCallback_Offset::`RTTI Base Class Array'o
.rdata$r:0000FB5C                                         ; CArchiveOpenCallback_Offset `RTTI Type Descriptor'
.rdata$r:0000FB60                 db    5
.rdata$r:0000FB61                 db    0
.rdata$r:0000FB62                 db    0
.rdata$r:0000FB63                 db    0
.rdata$r:0000FB64                 db    0
.rdata$r:0000FB65                 db    0
.rdata$r:0000FB66                 db    0
.rdata$r:0000FB67                 db    0
.rdata$r:0000FB68                 db 0FFh
.rdata$r:0000FB69                 db 0FFh
.rdata$r:0000FB6A                 db 0FFh
.rdata$r:0000FB6B                 db 0FFh
.rdata$r:0000FB6C                 db    0
.rdata$r:0000FB6D                 db    0
.rdata$r:0000FB6E                 db    0
.rdata$r:0000FB6F                 db    0
.rdata$r:0000FB70                 db  40h ; @
.rdata$r:0000FB71                 db    0
.rdata$r:0000FB72                 db    0
.rdata$r:0000FB73                 db    0
.rdata$r:0000FB74                 dd offset ??_R3CArchiveOpenCallback_Offset@@8 ; CArchiveOpenCallback_Offset::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FB74 _rdata$r        ends
.rdata$r:0000FB74
.rdata$r:0000FB78 ; ===========================================================================
.rdata$r:0000FB78
.rdata$r:0000FB78 ; Segment type: Pure data
.rdata$r:0000FB78 ; Segment permissions: Read
.rdata$r:0000FB78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FB78                 assume cs:_rdata$r
.rdata$r:0000FB78                 ;org 0FB78h
.rdata$r:0000FB78 ; COMDAT (pick any)
.rdata$r:0000FB78                 public ??_R1A@?0A@EA@IArchiveOpenCallback@@8
.rdata$r:0000FB78 ; IArchiveOpenCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000FB78 ??_R1A@?0A@EA@IArchiveOpenCallback@@8 dd offset ??_R0?AUIArchiveOpenCallback@@@8
.rdata$r:0000FB78                                         ; DATA XREF: .rdata$r:0000FB44o
.rdata$r:0000FB78                                         ; .rdata$r:IArchiveOpenCallback::`RTTI Base Class Array'o ...
.rdata$r:0000FB78                                         ; IArchiveOpenCallback `RTTI Type Descriptor'
.rdata$r:0000FB7C                 db    1
.rdata$r:0000FB7D                 db    0
.rdata$r:0000FB7E                 db    0
.rdata$r:0000FB7F                 db    0
.rdata$r:0000FB80                 db    0
.rdata$r:0000FB81                 db    0
.rdata$r:0000FB82                 db    0
.rdata$r:0000FB83                 db    0
.rdata$r:0000FB84                 db 0FFh
.rdata$r:0000FB85                 db 0FFh
.rdata$r:0000FB86                 db 0FFh
.rdata$r:0000FB87                 db 0FFh
.rdata$r:0000FB88                 db    0
.rdata$r:0000FB89                 db    0
.rdata$r:0000FB8A                 db    0
.rdata$r:0000FB8B                 db    0
.rdata$r:0000FB8C                 db  40h ; @
.rdata$r:0000FB8D                 db    0
.rdata$r:0000FB8E                 db    0
.rdata$r:0000FB8F                 db    0
.rdata$r:0000FB90                 dd offset ??_R3IArchiveOpenCallback@@8 ; IArchiveOpenCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FB90 _rdata$r        ends
.rdata$r:0000FB90
.data:0000FB94 ; ===========================================================================
.data:0000FB94
.data:0000FB94 ; Segment type: Pure data
.data:0000FB94 ; Segment permissions: Read/Write
.data:0000FB94 _data           segment dword public 'DATA' use32
.data:0000FB94                 assume cs:_data
.data:0000FB94                 ;org 0FB94h
.data:0000FB94 ; COMDAT (pick any)
.data:0000FB94                 public ??_R0?AUIArchiveOpenCallback@@@8
.data:0000FB94 ; struct IArchiveOpenCallback `RTTI Type Descriptor'
.data:0000FB94 ??_R0?AUIArchiveOpenCallback@@@8 dd offset ??_7type_info@@6B@
.data:0000FB94                                         ; DATA XREF: .rdata$r:IArchiveOpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000FB94                                         ; .rdata$r:0000FCB8o
.data:0000FB94                                         ; const type_info::`vftable'
.data:0000FB98                 db    0
.data:0000FB99                 db    0
.data:0000FB9A                 db    0
.data:0000FB9B                 db    0
.data:0000FB9C                 db  2Eh ; .
.data:0000FB9D                 db  3Fh ; ?
.data:0000FB9E                 db  41h ; A
.data:0000FB9F                 db  55h ; U
.data:0000FBA0                 db  49h ; I
.data:0000FBA1                 db  41h ; A
.data:0000FBA2                 db  72h ; r
.data:0000FBA3                 db  63h ; c
.data:0000FBA4                 db  68h ; h
.data:0000FBA5                 db  69h ; i
.data:0000FBA6                 db  76h ; v
.data:0000FBA7                 db  65h ; e
.data:0000FBA8                 db  4Fh ; O
.data:0000FBA9                 db  70h ; p
.data:0000FBAA                 db  65h ; e
.data:0000FBAB                 db  6Eh ; n
.data:0000FBAC                 db  43h ; C
.data:0000FBAD                 db  61h ; a
.data:0000FBAE                 db  6Ch ; l
.data:0000FBAF                 db  6Ch ; l
.data:0000FBB0                 db  62h ; b
.data:0000FBB1                 db  61h ; a
.data:0000FBB2                 db  63h ; c
.data:0000FBB3                 db  6Bh ; k
.data:0000FBB4                 db  40h ; @
.data:0000FBB5                 db  40h ; @
.data:0000FBB6                 db    0
.data:0000FBB7                 align 4
.data:0000FBB7 _data           ends
.data:0000FBB7
.rdata$r:0000FBB8 ; ===========================================================================
.rdata$r:0000FBB8
.rdata$r:0000FBB8 ; Segment type: Pure data
.rdata$r:0000FBB8 ; Segment permissions: Read
.rdata$r:0000FBB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FBB8                 assume cs:_rdata$r
.rdata$r:0000FBB8                 ;org 0FBB8h
.rdata$r:0000FBB8 ; COMDAT (pick any)
.rdata$r:0000FBB8                 public ??_R3IArchiveOpenCallback@@8
.rdata$r:0000FBB8 ; IArchiveOpenCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FBB8 ??_R3IArchiveOpenCallback@@8 db    0    ; DATA XREF: .rdata$r:0000FB90o
.rdata$r:0000FBB8                                         ; .rdata$r:0000FCBCo
.rdata$r:0000FBB9                 db    0
.rdata$r:0000FBBA                 db    0
.rdata$r:0000FBBB                 db    0
.rdata$r:0000FBBC                 db    0
.rdata$r:0000FBBD                 db    0
.rdata$r:0000FBBE                 db    0
.rdata$r:0000FBBF                 db    0
.rdata$r:0000FBC0                 db    2
.rdata$r:0000FBC1                 db    0
.rdata$r:0000FBC2                 db    0
.rdata$r:0000FBC3                 db    0
.rdata$r:0000FBC4                 dd offset ??_R2IArchiveOpenCallback@@8 ; IArchiveOpenCallback::`RTTI Base Class Array'
.rdata$r:0000FBC4 _rdata$r        ends
.rdata$r:0000FBC4
.rdata$r:0000FBC8 ; ===========================================================================
.rdata$r:0000FBC8
.rdata$r:0000FBC8 ; Segment type: Pure data
.rdata$r:0000FBC8 ; Segment permissions: Read
.rdata$r:0000FBC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FBC8                 assume cs:_rdata$r
.rdata$r:0000FBC8                 ;org 0FBC8h
.rdata$r:0000FBC8 ; COMDAT (pick any)
.rdata$r:0000FBC8                 public ??_R2IArchiveOpenCallback@@8
.rdata$r:0000FBC8 ; IArchiveOpenCallback::`RTTI Base Class Array'
.rdata$r:0000FBC8 ??_R2IArchiveOpenCallback@@8 dd offset ??_R1A@?0A@EA@IArchiveOpenCallback@@8
.rdata$r:0000FBC8                                         ; DATA XREF: .rdata$r:0000FBC4o
.rdata$r:0000FBC8                                         ; IArchiveOpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000FBCC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000FBD0                 db    0
.rdata$r:0000FBD1                 align 4
.rdata$r:0000FBD1 _rdata$r        ends
.rdata$r:0000FBD1
.rdata$r:0000FBD4 ; ===========================================================================
.rdata$r:0000FBD4
.rdata$r:0000FBD4 ; Segment type: Pure data
.rdata$r:0000FBD4 ; Segment permissions: Read
.rdata$r:0000FBD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FBD4                 assume cs:_rdata$r
.rdata$r:0000FBD4                 ;org 0FBD4h
.rdata$r:0000FBD4 ; COMDAT (pick any)
.rdata$r:0000FBD4                 public ??_R13?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:0000FBD4 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000FBD4 ??_R13?0A@EA@ICryptoGetTextPassword@@8 dd offset ??_R0?AUICryptoGetTextPassword@@@8
.rdata$r:0000FBD4                                         ; DATA XREF: .rdata$r:0000FB4Co
.rdata$r:0000FBD4                                         ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:0000FBD8                 db    1
.rdata$r:0000FBD9                 db    0
.rdata$r:0000FBDA                 db    0
.rdata$r:0000FBDB                 db    0
.rdata$r:0000FBDC                 db    4
.rdata$r:0000FBDD                 db    0
.rdata$r:0000FBDE                 db    0
.rdata$r:0000FBDF                 db    0
.rdata$r:0000FBE0                 db 0FFh
.rdata$r:0000FBE1                 db 0FFh
.rdata$r:0000FBE2                 db 0FFh
.rdata$r:0000FBE3                 db 0FFh
.rdata$r:0000FBE4                 db    0
.rdata$r:0000FBE5                 db    0
.rdata$r:0000FBE6                 db    0
.rdata$r:0000FBE7                 db    0
.rdata$r:0000FBE8                 db  40h ; @
.rdata$r:0000FBE9                 db    0
.rdata$r:0000FBEA                 db    0
.rdata$r:0000FBEB                 db    0
.rdata$r:0000FBEC                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FBEC _rdata$r        ends
.rdata$r:0000FBEC
.data:0000FBF0 ; ===========================================================================
.data:0000FBF0
.data:0000FBF0 ; Segment type: Pure data
.data:0000FBF0 ; Segment permissions: Read/Write
.data:0000FBF0 _data           segment dword public 'DATA' use32
.data:0000FBF0                 assume cs:_data
.data:0000FBF0                 ;org 0FBF0h
.data:0000FBF0 ; COMDAT (pick any)
.data:0000FBF0                 public ??_R0?AUICryptoGetTextPassword@@@8
.data:0000FBF0 ; struct ICryptoGetTextPassword `RTTI Type Descriptor'
.data:0000FBF0 ??_R0?AUICryptoGetTextPassword@@@8 dd offset ??_7type_info@@6B@
.data:0000FBF0                                         ; DATA XREF: .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000FBF0                                         ; .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000FBF0                                         ; const type_info::`vftable'
.data:0000FBF4                 align 8
.data:0000FBF8 a_?auicryptoget db '.?AUICryptoGetTextPassword@@',0
.data:0000FC15                 align 4
.data:0000FC15 _data           ends
.data:0000FC15
.rdata$r:0000FC18 ; ===========================================================================
.rdata$r:0000FC18
.rdata$r:0000FC18 ; Segment type: Pure data
.rdata$r:0000FC18 ; Segment permissions: Read
.rdata$r:0000FC18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FC18                 assume cs:_rdata$r
.rdata$r:0000FC18                 ;org 0FC18h
.rdata$r:0000FC18 ; COMDAT (pick any)
.rdata$r:0000FC18                 public ??_R3ICryptoGetTextPassword@@8
.rdata$r:0000FC18 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FC18 ??_R3ICryptoGetTextPassword@@8 db    0  ; DATA XREF: .rdata$r:0000FBECo
.rdata$r:0000FC18                                         ; .rdata$r:0000FC4Co ...
.rdata$r:0000FC19                 db    0
.rdata$r:0000FC1A                 db    0
.rdata$r:0000FC1B                 db    0
.rdata$r:0000FC1C                 db    0
.rdata$r:0000FC1D                 db    0
.rdata$r:0000FC1E                 db    0
.rdata$r:0000FC1F                 db    0
.rdata$r:0000FC20                 db    2
.rdata$r:0000FC21                 db    0
.rdata$r:0000FC22                 db    0
.rdata$r:0000FC23                 db    0
.rdata$r:0000FC24                 dd offset ??_R2ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:0000FC24 _rdata$r        ends
.rdata$r:0000FC24
.rdata$r:0000FC28 ; ===========================================================================
.rdata$r:0000FC28
.rdata$r:0000FC28 ; Segment type: Pure data
.rdata$r:0000FC28 ; Segment permissions: Read
.rdata$r:0000FC28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FC28                 assume cs:_rdata$r
.rdata$r:0000FC28                 ;org 0FC28h
.rdata$r:0000FC28 ; COMDAT (pick any)
.rdata$r:0000FC28                 public ??_R2ICryptoGetTextPassword@@8
.rdata$r:0000FC28 ; ICryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:0000FC28 ??_R2ICryptoGetTextPassword@@8 dd offset ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:0000FC28                                         ; DATA XREF: .rdata$r:0000FC24o
.rdata$r:0000FC28                                         ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000FC2C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000FC30                 db    0
.rdata$r:0000FC31                 align 4
.rdata$r:0000FC31 _rdata$r        ends
.rdata$r:0000FC31
.rdata$r:0000FC34 ; ===========================================================================
.rdata$r:0000FC34
.rdata$r:0000FC34 ; Segment type: Pure data
.rdata$r:0000FC34 ; Segment permissions: Read
.rdata$r:0000FC34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FC34                 assume cs:_rdata$r
.rdata$r:0000FC34                 ;org 0FC34h
.rdata$r:0000FC34 ; COMDAT (pick any)
.rdata$r:0000FC34                 public ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:0000FC34 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000FC34 ??_R1A@?0A@EA@ICryptoGetTextPassword@@8 dd offset ??_R0?AUICryptoGetTextPassword@@@8
.rdata$r:0000FC34                                         ; DATA XREF: .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Array'o
.rdata$r:0000FC34                                         ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:0000FC38                 db    1
.rdata$r:0000FC39                 db    0
.rdata$r:0000FC3A                 db    0
.rdata$r:0000FC3B                 db    0
.rdata$r:0000FC3C                 db    0
.rdata$r:0000FC3D                 db    0
.rdata$r:0000FC3E                 db    0
.rdata$r:0000FC3F                 db    0
.rdata$r:0000FC40                 db 0FFh
.rdata$r:0000FC41                 db 0FFh
.rdata$r:0000FC42                 db 0FFh
.rdata$r:0000FC43                 db 0FFh
.rdata$r:0000FC44                 db    0
.rdata$r:0000FC45                 db    0
.rdata$r:0000FC46                 db    0
.rdata$r:0000FC47                 db    0
.rdata$r:0000FC48                 db  40h ; @
.rdata$r:0000FC49                 db    0
.rdata$r:0000FC4A                 db    0
.rdata$r:0000FC4B                 db    0
.rdata$r:0000FC4C                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FC4C _rdata$r        ends
.rdata$r:0000FC4C
.rdata$r:0000FC50 ; ===========================================================================
.rdata$r:0000FC50
.rdata$r:0000FC50 ; Segment type: Pure data
.rdata$r:0000FC50 ; Segment permissions: Read
.rdata$r:0000FC50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FC50                 assume cs:_rdata$r
.rdata$r:0000FC50                 ;org 0FC50h
.rdata$r:0000FC50 ; COMDAT (pick any)
.rdata$r:0000FC50                 public ??_R4CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@
.rdata$r:0000FC50 ; const CArchiveOpenCallback_Offset::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword'}
.rdata$r:0000FC50 ??_R4CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@ db    0
.rdata$r:0000FC50                                         ; DATA XREF: .rdata:0000FA98o
.rdata$r:0000FC51                 db    0
.rdata$r:0000FC52                 db    0
.rdata$r:0000FC53                 db    0
.rdata$r:0000FC54                 db    4
.rdata$r:0000FC55                 db    0
.rdata$r:0000FC56                 db    0
.rdata$r:0000FC57                 db    0
.rdata$r:0000FC58                 db    0
.rdata$r:0000FC59                 db    0
.rdata$r:0000FC5A                 db    0
.rdata$r:0000FC5B                 db    0
.rdata$r:0000FC5C                 dd offset ??_R0?AVCArchiveOpenCallback_Offset@@@8 ; CArchiveOpenCallback_Offset `RTTI Type Descriptor'
.rdata$r:0000FC60                 dd offset ??_R3CArchiveOpenCallback_Offset@@8 ; CArchiveOpenCallback_Offset::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FC60 _rdata$r        ends
.rdata$r:0000FC60
.text:0000FC64 ; ===========================================================================
.text:0000FC64
.text:0000FC64 ; Segment type: Pure code
.text:0000FC64 ; Segment permissions: Read/Execute
.text:0000FC64 _text           segment para public 'CODE' use32
.text:0000FC64                 assume cs:_text
.text:0000FC64                 ;org 0FC64h
.text:0000FC64 ; COMDAT (pick any)
.text:0000FC64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000FC64
.text:0000FC64 ; =============== S U B R O U T I N E =======================================
.text:0000FC64
.text:0000FC64 ; Attributes: bp-based frame
.text:0000FC64
.text:0000FC64 ; _DWORD __thiscall IArchiveOpenCallback::IArchiveOpenCallback(IArchiveOpenCallback *__hidden this)
.text:0000FC64                 public ??0IArchiveOpenCallback@@QAE@XZ
.text:0000FC64 ??0IArchiveOpenCallback@@QAE@XZ proc near
.text:0000FC64                                         ; CODE XREF: CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset(void)+30p
.text:0000FC64                                         ; COpenCallbackImp::COpenCallbackImp(void)+30p
.text:0000FC64
.text:0000FC64 var_4           = dword ptr -4
.text:0000FC64
.text:0000FC64                 push    ebp
.text:0000FC65                 mov     ebp, esp
.text:0000FC67                 push    ecx
.text:0000FC68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000FC6F                 mov     [ebp+var_4], ecx
.text:0000FC72                 mov     ecx, [ebp+var_4]
.text:0000FC75                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000FC7A                 mov     eax, [ebp+var_4]
.text:0000FC7D                 mov     dword ptr [eax], offset ??_7IArchiveOpenCallback@@6B@ ; const IArchiveOpenCallback::`vftable'
.text:0000FC83                 mov     eax, [ebp+var_4]
.text:0000FC86                 add     esp, 4
.text:0000FC89                 cmp     ebp, esp
.text:0000FC8B                 call    __RTC_CheckEsp
.text:0000FC90                 mov     esp, ebp
.text:0000FC92                 pop     ebp
.text:0000FC93                 retn
.text:0000FC93 ??0IArchiveOpenCallback@@QAE@XZ endp
.text:0000FC93
.text:0000FC93 _text           ends
.text:0000FC93
.rdata:0000FC94 ; ===========================================================================
.rdata:0000FC94
.rdata:0000FC94 ; Segment type: Pure data
.rdata:0000FC94 ; Segment permissions: Read
.rdata:0000FC94 _rdata          segment dword public 'DATA' use32
.rdata:0000FC94                 assume cs:_rdata
.rdata:0000FC94                 ;org 0FC94h
.rdata:0000FC94 ; COMDAT (pick largest)
.rdata:0000FC94                 dd offset ??_R4IArchiveOpenCallback@@6B@ ; const IArchiveOpenCallback::`RTTI Complete Object Locator'
.rdata:0000FC98                 public ??_7IArchiveOpenCallback@@6B@
.rdata:0000FC98 ; const IArchiveOpenCallback::`vftable'
.rdata:0000FC98 ??_7IArchiveOpenCallback@@6B@ dd offset __purecall
.rdata:0000FC98                                         ; DATA XREF: IArchiveOpenCallback::IArchiveOpenCallback(void)+19o
.rdata:0000FC9C                 dd offset __purecall
.rdata:0000FCA0                 dd offset __purecall
.rdata:0000FCA4                 dd offset __purecall
.rdata:0000FCA8                 dd offset __purecall
.rdata:0000FCA8 _rdata          ends
.rdata:0000FCA8
.rdata$r:0000FCAC ; ===========================================================================
.rdata$r:0000FCAC
.rdata$r:0000FCAC ; Segment type: Pure data
.rdata$r:0000FCAC ; Segment permissions: Read
.rdata$r:0000FCAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FCAC                 assume cs:_rdata$r
.rdata$r:0000FCAC                 ;org 0FCACh
.rdata$r:0000FCAC ; COMDAT (pick any)
.rdata$r:0000FCAC                 public ??_R4IArchiveOpenCallback@@6B@
.rdata$r:0000FCAC ; const IArchiveOpenCallback::`RTTI Complete Object Locator'
.rdata$r:0000FCAC ??_R4IArchiveOpenCallback@@6B@ db    0  ; DATA XREF: .rdata:0000FC94o
.rdata$r:0000FCAD                 db    0
.rdata$r:0000FCAE                 db    0
.rdata$r:0000FCAF                 db    0
.rdata$r:0000FCB0                 db    0
.rdata$r:0000FCB1                 db    0
.rdata$r:0000FCB2                 db    0
.rdata$r:0000FCB3                 db    0
.rdata$r:0000FCB4                 db    0
.rdata$r:0000FCB5                 db    0
.rdata$r:0000FCB6                 db    0
.rdata$r:0000FCB7                 db    0
.rdata$r:0000FCB8                 dd offset ??_R0?AUIArchiveOpenCallback@@@8 ; IArchiveOpenCallback `RTTI Type Descriptor'
.rdata$r:0000FCBC                 dd offset ??_R3IArchiveOpenCallback@@8 ; IArchiveOpenCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FCBC _rdata$r        ends
.rdata$r:0000FCBC
.text:0000FCC0 ; ===========================================================================
.text:0000FCC0
.text:0000FCC0 ; Segment type: Pure code
.text:0000FCC0 ; Segment permissions: Read/Execute
.text:0000FCC0 _text           segment para public 'CODE' use32
.text:0000FCC0                 assume cs:_text
.text:0000FCC0                 ;org 0FCC0h
.text:0000FCC0 ; COMDAT (pick any)
.text:0000FCC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000FCC0
.text:0000FCC0 ; =============== S U B R O U T I N E =======================================
.text:0000FCC0
.text:0000FCC0 ; Attributes: bp-based frame
.text:0000FCC0
.text:0000FCC0 ; _DWORD __thiscall ICryptoGetTextPassword::ICryptoGetTextPassword(ICryptoGetTextPassword *__hidden this)
.text:0000FCC0                 public ??0ICryptoGetTextPassword@@QAE@XZ
.text:0000FCC0 ??0ICryptoGetTextPassword@@QAE@XZ proc near
.text:0000FCC0                                         ; CODE XREF: CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset(void)+3Bp
.text:0000FCC0                                         ; COpenCallbackImp::COpenCallbackImp(void)+51p
.text:0000FCC0
.text:0000FCC0 var_4           = dword ptr -4
.text:0000FCC0
.text:0000FCC0                 push    ebp
.text:0000FCC1                 mov     ebp, esp
.text:0000FCC3                 push    ecx
.text:0000FCC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000FCCB                 mov     [ebp+var_4], ecx
.text:0000FCCE                 mov     ecx, [ebp+var_4]
.text:0000FCD1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000FCD6                 mov     eax, [ebp+var_4]
.text:0000FCD9                 mov     dword ptr [eax], offset ??_7ICryptoGetTextPassword@@6B@ ; const ICryptoGetTextPassword::`vftable'
.text:0000FCDF                 mov     eax, [ebp+var_4]
.text:0000FCE2                 add     esp, 4
.text:0000FCE5                 cmp     ebp, esp
.text:0000FCE7                 call    __RTC_CheckEsp
.text:0000FCEC                 mov     esp, ebp
.text:0000FCEE                 pop     ebp
.text:0000FCEF                 retn
.text:0000FCEF ??0ICryptoGetTextPassword@@QAE@XZ endp
.text:0000FCEF
.text:0000FCEF _text           ends
.text:0000FCEF
.rdata:0000FCF0 ; ===========================================================================
.rdata:0000FCF0
.rdata:0000FCF0 ; Segment type: Pure data
.rdata:0000FCF0 ; Segment permissions: Read
.rdata:0000FCF0 _rdata          segment dword public 'DATA' use32
.rdata:0000FCF0                 assume cs:_rdata
.rdata:0000FCF0                 ;org 0FCF0h
.rdata:0000FCF0 ; COMDAT (pick largest)
.rdata:0000FCF0                 dd offset ??_R4ICryptoGetTextPassword@@6B@ ; const ICryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata:0000FCF4                 public ??_7ICryptoGetTextPassword@@6B@
.rdata:0000FCF4 ; const ICryptoGetTextPassword::`vftable'
.rdata:0000FCF4 ??_7ICryptoGetTextPassword@@6B@ dd offset __purecall
.rdata:0000FCF4                                         ; DATA XREF: ICryptoGetTextPassword::ICryptoGetTextPassword(void)+19o
.rdata:0000FCF8                 dd offset __purecall
.rdata:0000FCFC                 dd offset __purecall
.rdata:0000FD00                 dd offset __purecall
.rdata:0000FD00 _rdata          ends
.rdata:0000FD00
.rdata$r:0000FD04 ; ===========================================================================
.rdata$r:0000FD04
.rdata$r:0000FD04 ; Segment type: Pure data
.rdata$r:0000FD04 ; Segment permissions: Read
.rdata$r:0000FD04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000FD04                 assume cs:_rdata$r
.rdata$r:0000FD04                 ;org 0FD04h
.rdata$r:0000FD04 ; COMDAT (pick any)
.rdata$r:0000FD04                 public ??_R4ICryptoGetTextPassword@@6B@
.rdata$r:0000FD04 ; const ICryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata$r:0000FD04 ??_R4ICryptoGetTextPassword@@6B@ db    0 ; DATA XREF: .rdata:0000FCF0o
.rdata$r:0000FD05                 db    0
.rdata$r:0000FD06                 db    0
.rdata$r:0000FD07                 db    0
.rdata$r:0000FD08                 db    0
.rdata$r:0000FD09                 db    0
.rdata$r:0000FD0A                 db    0
.rdata$r:0000FD0B                 db    0
.rdata$r:0000FD0C                 db    0
.rdata$r:0000FD0D                 db    0
.rdata$r:0000FD0E                 db    0
.rdata$r:0000FD0F                 db    0
.rdata$r:0000FD10                 dd offset ??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:0000FD14                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000FD14 _rdata$r        ends
.rdata$r:0000FD14
.text:0000FD18 ; ===========================================================================
.text:0000FD18
.text:0000FD18 ; Segment type: Pure code
.text:0000FD18 ; Segment permissions: Read/Execute
.text:0000FD18 _text           segment para public 'CODE' use32
.text:0000FD18                 assume cs:_text
.text:0000FD18                 ;org 0FD18h
.text:0000FD18 ; COMDAT (pick any)
.text:0000FD18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000FD18
.text:0000FD18 ; =============== S U B R O U T I N E =======================================
.text:0000FD18
.text:0000FD18 ; Attributes: bp-based frame
.text:0000FD18
.text:0000FD18 ; __int32 __stdcall CArchiveOpenCallback_Offset::QueryInterface(CArchiveOpenCallback_Offset *this, const struct _GUID *Buf1, void **)
.text:0000FD18                 public ?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z
.text:0000FD18 ?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000FD18                                         ; CODE XREF: [thunk]:CArchiveOpenCallback_Offset::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000FD18                                         ; DATA XREF: .rdata:const CArchiveOpenCallback_Offset::`vftable'{for `IArchiveOpenCallback'}o
.text:0000FD18
.text:0000FD18 var_4           = dword ptr -4
.text:0000FD18 this            = dword ptr  8
.text:0000FD18 Buf1            = dword ptr  0Ch
.text:0000FD18 arg_8           = dword ptr  10h
.text:0000FD18
.text:0000FD18                 push    ebp
.text:0000FD19                 mov     ebp, esp
.text:0000FD1B                 push    ecx
.text:0000FD1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000FD23                 mov     eax, [ebp+arg_8]
.text:0000FD26                 mov     dword ptr [eax], 0
.text:0000FD2C                 push    offset _IID_IUnknown ; Buf2
.text:0000FD31                 mov     ecx, [ebp+Buf1]
.text:0000FD34                 push    ecx             ; Buf1
.text:0000FD35                 call    ___@8           ; __(x,x)
.text:0000FD3A                 test    eax, eax
.text:0000FD3C                 jz      short loc_FD48
.text:0000FD3E                 mov     edx, [ebp+arg_8]
.text:0000FD41                 mov     eax, [ebp+this]
.text:0000FD44                 mov     [edx], eax
.text:0000FD46                 jmp     short loc_FD9F
.text:0000FD48 ; ---------------------------------------------------------------------------
.text:0000FD48
.text:0000FD48 loc_FD48:                               ; CODE XREF: CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)+24j
.text:0000FD48                 push    offset _IID_IArchiveOpenCallback ; Buf2
.text:0000FD4D                 mov     ecx, [ebp+Buf1]
.text:0000FD50                 push    ecx             ; Buf1
.text:0000FD51                 call    ___@8           ; __(x,x)
.text:0000FD56                 test    eax, eax
.text:0000FD58                 jz      short loc_FD64
.text:0000FD5A                 mov     edx, [ebp+arg_8]
.text:0000FD5D                 mov     eax, [ebp+this]
.text:0000FD60                 mov     [edx], eax
.text:0000FD62                 jmp     short loc_FD9F
.text:0000FD64 ; ---------------------------------------------------------------------------
.text:0000FD64
.text:0000FD64 loc_FD64:                               ; CODE XREF: CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)+40j
.text:0000FD64                 push    offset _IID_ICryptoGetTextPassword ; Buf2
.text:0000FD69                 mov     ecx, [ebp+Buf1]
.text:0000FD6C                 push    ecx             ; Buf1
.text:0000FD6D                 call    ___@8           ; __(x,x)
.text:0000FD72                 test    eax, eax
.text:0000FD74                 jz      short loc_FD98
.text:0000FD76                 cmp     [ebp+this], 0
.text:0000FD7A                 jz      short loc_FD87
.text:0000FD7C                 mov     edx, [ebp+this]
.text:0000FD7F                 add     edx, 4
.text:0000FD82                 mov     [ebp+var_4], edx
.text:0000FD85                 jmp     short loc_FD8E
.text:0000FD87 ; ---------------------------------------------------------------------------
.text:0000FD87
.text:0000FD87 loc_FD87:                               ; CODE XREF: CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)+62j
.text:0000FD87                 mov     [ebp+var_4], 0
.text:0000FD8E
.text:0000FD8E loc_FD8E:                               ; CODE XREF: CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)+6Dj
.text:0000FD8E                 mov     eax, [ebp+arg_8]
.text:0000FD91                 mov     ecx, [ebp+var_4]
.text:0000FD94                 mov     [eax], ecx
.text:0000FD96                 jmp     short loc_FD9F
.text:0000FD98 ; ---------------------------------------------------------------------------
.text:0000FD98
.text:0000FD98 loc_FD98:                               ; CODE XREF: CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)+5Cj
.text:0000FD98                 mov     eax, 80004002h
.text:0000FD9D                 jmp     short loc_FDB0
.text:0000FD9F ; ---------------------------------------------------------------------------
.text:0000FD9F
.text:0000FD9F loc_FD9F:                               ; CODE XREF: CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)+2Ej
.text:0000FD9F                                         ; CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)+4Aj ...
.text:0000FD9F                 mov     edx, [ebp+this]
.text:0000FDA2                 mov     eax, [edx+8]
.text:0000FDA5                 add     eax, 1
.text:0000FDA8                 mov     ecx, [ebp+this]
.text:0000FDAB                 mov     [ecx+8], eax
.text:0000FDAE                 xor     eax, eax
.text:0000FDB0
.text:0000FDB0 loc_FDB0:                               ; CODE XREF: CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)+85j
.text:0000FDB0                 add     esp, 4
.text:0000FDB3                 cmp     ebp, esp
.text:0000FDB5                 call    __RTC_CheckEsp
.text:0000FDBA                 mov     esp, ebp
.text:0000FDBC                 pop     ebp
.text:0000FDBD                 retn    0Ch
.text:0000FDBD ?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000FDBD
.text:0000FDBD _text           ends
.text:0000FDBD
.text:0000FDC0 ; ===========================================================================
.text:0000FDC0
.text:0000FDC0 ; Segment type: Pure code
.text:0000FDC0 ; Segment permissions: Read/Execute
.text:0000FDC0 _text           segment para public 'CODE' use32
.text:0000FDC0                 assume cs:_text
.text:0000FDC0                 ;org 0FDC0h
.text:0000FDC0 ; COMDAT (pick any)
.text:0000FDC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000FDC0
.text:0000FDC0 ; =============== S U B R O U T I N E =======================================
.text:0000FDC0
.text:0000FDC0 ; Attributes: bp-based frame
.text:0000FDC0
.text:0000FDC0 ; unsigned __int32 __stdcall CArchiveOpenCallback_Offset::AddRef(CArchiveOpenCallback_Offset *this)
.text:0000FDC0                 public ?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ
.text:0000FDC0 ?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ proc near
.text:0000FDC0                                         ; CODE XREF: [thunk]:CArchiveOpenCallback_Offset::AddRef`adjustor{4}' (void)+5j
.text:0000FDC0                                         ; DATA XREF: .rdata:0000FAB4o
.text:0000FDC0
.text:0000FDC0 var_4           = dword ptr -4
.text:0000FDC0 this            = dword ptr  8
.text:0000FDC0
.text:0000FDC0                 push    ebp
.text:0000FDC1                 mov     ebp, esp
.text:0000FDC3                 push    ecx
.text:0000FDC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000FDCB                 mov     eax, [ebp+this]
.text:0000FDCE                 mov     ecx, [eax+8]
.text:0000FDD1                 add     ecx, 1
.text:0000FDD4                 mov     [ebp+var_4], ecx
.text:0000FDD7                 mov     edx, [ebp+this]
.text:0000FDDA                 mov     eax, [ebp+var_4]
.text:0000FDDD                 mov     [edx+8], eax
.text:0000FDE0                 mov     eax, [ebp+var_4]
.text:0000FDE3                 mov     esp, ebp
.text:0000FDE5                 pop     ebp
.text:0000FDE6                 retn    4
.text:0000FDE6 ?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ endp
.text:0000FDE6
.text:0000FDE6 ; ---------------------------------------------------------------------------
.text:0000FDE9                 align 4
.text:0000FDE9 _text           ends
.text:0000FDE9
.text:0000FDEC ; ===========================================================================
.text:0000FDEC
.text:0000FDEC ; Segment type: Pure code
.text:0000FDEC ; Segment permissions: Read/Execute
.text:0000FDEC _text           segment para public 'CODE' use32
.text:0000FDEC                 assume cs:_text
.text:0000FDEC                 ;org 0FDECh
.text:0000FDEC ; COMDAT (pick any)
.text:0000FDEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000FDEC
.text:0000FDEC ; =============== S U B R O U T I N E =======================================
.text:0000FDEC
.text:0000FDEC ; Attributes: bp-based frame
.text:0000FDEC
.text:0000FDEC ; unsigned __int32 __stdcall CArchiveOpenCallback_Offset::Release(CArchiveOpenCallback_Offset *this)
.text:0000FDEC                 public ?Release@CArchiveOpenCallback_Offset@@UAGKXZ
.text:0000FDEC ?Release@CArchiveOpenCallback_Offset@@UAGKXZ proc near
.text:0000FDEC                                         ; CODE XREF: [thunk]:CArchiveOpenCallback_Offset::Release`adjustor{4}' (void)+5j
.text:0000FDEC                                         ; DATA XREF: .rdata:0000FAB8o
.text:0000FDEC
.text:0000FDEC var_10          = dword ptr -10h
.text:0000FDEC var_C           = dword ptr -0Ch
.text:0000FDEC var_8           = dword ptr -8
.text:0000FDEC var_4           = dword ptr -4
.text:0000FDEC this            = dword ptr  8
.text:0000FDEC
.text:0000FDEC                 push    ebp
.text:0000FDED                 mov     ebp, esp
.text:0000FDEF                 sub     esp, 10h
.text:0000FDF2                 mov     eax, 0CCCCCCCCh
.text:0000FDF7                 mov     [ebp+var_10], eax
.text:0000FDFA                 mov     [ebp+var_C], eax
.text:0000FDFD                 mov     [ebp+var_8], eax
.text:0000FE00                 mov     [ebp+var_4], eax
.text:0000FE03                 mov     eax, [ebp+this]
.text:0000FE06                 mov     ecx, [eax+8]
.text:0000FE09                 sub     ecx, 1
.text:0000FE0C                 mov     [ebp+var_C], ecx
.text:0000FE0F                 mov     edx, [ebp+this]
.text:0000FE12                 mov     eax, [ebp+var_C]
.text:0000FE15                 mov     [edx+8], eax
.text:0000FE18                 cmp     [ebp+var_C], 0
.text:0000FE1C                 jz      short loc_FE26
.text:0000FE1E                 mov     ecx, [ebp+this]
.text:0000FE21                 mov     eax, [ecx+8]
.text:0000FE24                 jmp     short loc_FE50
.text:0000FE26 ; ---------------------------------------------------------------------------
.text:0000FE26
.text:0000FE26 loc_FE26:                               ; CODE XREF: CArchiveOpenCallback_Offset::Release(void)+30j
.text:0000FE26                 mov     edx, [ebp+this]
.text:0000FE29                 mov     [ebp+var_8], edx
.text:0000FE2C                 mov     eax, [ebp+var_8]
.text:0000FE2F                 mov     [ebp+var_4], eax
.text:0000FE32                 cmp     [ebp+var_4], 0
.text:0000FE36                 jz      short loc_FE47
.text:0000FE38                 push    1
.text:0000FE3A                 mov     ecx, [ebp+var_4]
.text:0000FE3D                 call    ??_GCArchiveOpenCallback_Offset@@QAEPAXI@Z ; CArchiveOpenCallback_Offset::`scalar deleting destructor'(uint)
.text:0000FE42                 mov     [ebp+var_10], eax
.text:0000FE45                 jmp     short loc_FE4E
.text:0000FE47 ; ---------------------------------------------------------------------------
.text:0000FE47
.text:0000FE47 loc_FE47:                               ; CODE XREF: CArchiveOpenCallback_Offset::Release(void)+4Aj
.text:0000FE47                 mov     [ebp+var_10], 0
.text:0000FE4E
.text:0000FE4E loc_FE4E:                               ; CODE XREF: CArchiveOpenCallback_Offset::Release(void)+59j
.text:0000FE4E                 xor     eax, eax
.text:0000FE50
.text:0000FE50 loc_FE50:                               ; CODE XREF: CArchiveOpenCallback_Offset::Release(void)+38j
.text:0000FE50                 add     esp, 10h
.text:0000FE53                 cmp     ebp, esp
.text:0000FE55                 call    __RTC_CheckEsp
.text:0000FE5A                 mov     esp, ebp
.text:0000FE5C                 pop     ebp
.text:0000FE5D                 retn    4
.text:0000FE5D ?Release@CArchiveOpenCallback_Offset@@UAGKXZ endp
.text:0000FE5D
.text:0000FE5D _text           ends
.text:0000FE5D
.text:0000FE60 ; ===========================================================================
.text:0000FE60
.text:0000FE60 ; Segment type: Pure code
.text:0000FE60 ; Segment permissions: Read/Execute
.text:0000FE60 _text           segment para public 'CODE' use32
.text:0000FE60                 assume cs:_text
.text:0000FE60                 ;org 0FE60h
.text:0000FE60 ; COMDAT (pick any)
.text:0000FE60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000FE60
.text:0000FE60 ; =============== S U B R O U T I N E =======================================
.text:0000FE60
.text:0000FE60 ; Attributes: bp-based frame
.text:0000FE60
.text:0000FE60 ; public: void * __thiscall CArchiveOpenCallback_Offset::`scalar deleting destructor'(unsigned int)
.text:0000FE60                 public ??_GCArchiveOpenCallback_Offset@@QAEPAXI@Z
.text:0000FE60 ??_GCArchiveOpenCallback_Offset@@QAEPAXI@Z proc near
.text:0000FE60                                         ; CODE XREF: CArchiveOpenCallback_Offset::Release(void)+51p
.text:0000FE60
.text:0000FE60 var_4           = dword ptr -4
.text:0000FE60 arg_0           = dword ptr  8
.text:0000FE60
.text:0000FE60                 push    ebp
.text:0000FE61                 mov     ebp, esp
.text:0000FE63                 push    ecx
.text:0000FE64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000FE6B                 mov     [ebp+var_4], ecx
.text:0000FE6E                 mov     ecx, [ebp+var_4] ; this
.text:0000FE71                 call    ??1CArchiveOpenCallback_Offset@@QAE@XZ ; CArchiveOpenCallback_Offset::~CArchiveOpenCallback_Offset(void)
.text:0000FE76                 mov     eax, [ebp+arg_0]
.text:0000FE79                 and     eax, 1
.text:0000FE7C                 jz      short loc_FE8A
.text:0000FE7E                 mov     ecx, [ebp+var_4]
.text:0000FE81                 push    ecx             ; void *
.text:0000FE82                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000FE87                 add     esp, 4
.text:0000FE8A
.text:0000FE8A loc_FE8A:                               ; CODE XREF: CArchiveOpenCallback_Offset::`scalar deleting destructor'(uint)+1Cj
.text:0000FE8A                 mov     eax, [ebp+var_4]
.text:0000FE8D                 add     esp, 4
.text:0000FE90                 cmp     ebp, esp
.text:0000FE92                 call    __RTC_CheckEsp
.text:0000FE97                 mov     esp, ebp
.text:0000FE99                 pop     ebp
.text:0000FE9A                 retn    4
.text:0000FE9A ??_GCArchiveOpenCallback_Offset@@QAEPAXI@Z endp
.text:0000FE9A
.text:0000FE9A ; ---------------------------------------------------------------------------
.text:0000FE9D                 align 10h
.text:0000FE9D _text           ends
.text:0000FE9D
.text:0000FEA0 ; ===========================================================================
.text:0000FEA0
.text:0000FEA0 ; Segment type: Pure code
.text:0000FEA0 ; Segment permissions: Read/Execute
.text:0000FEA0 _text           segment para public 'CODE' use32
.text:0000FEA0                 assume cs:_text
.text:0000FEA0                 ;org 0FEA0h
.text:0000FEA0 ; COMDAT (pick any)
.text:0000FEA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000FEA0
.text:0000FEA0 ; =============== S U B R O U T I N E =======================================
.text:0000FEA0
.text:0000FEA0 ; Attributes: bp-based frame
.text:0000FEA0
.text:0000FEA0 ; _DWORD __thiscall CArchiveOpenCallback_Offset::~CArchiveOpenCallback_Offset(CArchiveOpenCallback_Offset *__hidden this)
.text:0000FEA0                 public ??1CArchiveOpenCallback_Offset@@QAE@XZ
.text:0000FEA0 ??1CArchiveOpenCallback_Offset@@QAE@XZ proc near
.text:0000FEA0                                         ; CODE XREF: CArchiveOpenCallback_Offset::`scalar deleting destructor'(uint)+11p
.text:0000FEA0
.text:0000FEA0 var_10          = dword ptr -10h
.text:0000FEA0 var_C           = dword ptr -0Ch
.text:0000FEA0 var_4           = dword ptr -4
.text:0000FEA0
.text:0000FEA0                 push    ebp
.text:0000FEA1                 mov     ebp, esp
.text:0000FEA3                 push    0FFFFFFFFh
.text:0000FEA5                 push    offset __ehhandler$??1CArchiveOpenCallback_Offset@@QAE@XZ
.text:0000FEAA                 mov     eax, large fs:0
.text:0000FEB0                 push    eax
.text:0000FEB1                 push    ecx
.text:0000FEB2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000FEB9                 mov     eax, dword ptr ds:___security_cookie
.text:0000FEBE                 xor     eax, ebp
.text:0000FEC0                 push    eax
.text:0000FEC1                 lea     eax, [ebp+var_C]
.text:0000FEC4                 mov     large fs:0, eax
.text:0000FECA                 mov     [ebp+var_10], ecx
.text:0000FECD                 mov     [ebp+var_4], 0
.text:0000FED4                 mov     ecx, [ebp+var_10]
.text:0000FED7                 add     ecx, 20h ; ' '
.text:0000FEDA                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000FEDF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000FEE6                 mov     ecx, [ebp+var_10]
.text:0000FEE9                 add     ecx, 0Ch
.text:0000FEEC                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:0000FEF1                 mov     ecx, [ebp+var_C]
.text:0000FEF4                 mov     large fs:0, ecx
.text:0000FEFB                 pop     ecx
.text:0000FEFC                 add     esp, 10h
.text:0000FEFF                 cmp     ebp, esp
.text:0000FF01                 call    __RTC_CheckEsp
.text:0000FF06                 mov     esp, ebp
.text:0000FF08                 pop     ebp
.text:0000FF09                 retn
.text:0000FF09 ??1CArchiveOpenCallback_Offset@@QAE@XZ endp
.text:0000FF09
.text:0000FF09 ; ---------------------------------------------------------------------------
.text:0000FF0A                 align 4
.text:0000FF0A _text           ends
.text:0000FF0A
.text$x:0000FF0C ; ===========================================================================
.text$x:0000FF0C
.text$x:0000FF0C ; Segment type: Pure code
.text$x:0000FF0C ; Segment permissions: Read/Execute
.text$x:0000FF0C _text$x         segment para public 'CODE' use32
.text$x:0000FF0C                 assume cs:_text$x
.text$x:0000FF0C                 ;org 0FF0Ch
.text$x:0000FF0C ; COMDAT (pick associative to section at FEA0)
.text$x:0000FF0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000FF0C
.text$x:0000FF0C ; =============== S U B R O U T I N E =======================================
.text$x:0000FF0C
.text$x:0000FF0C
.text$x:0000FF0C __unwindfunclet$??1CArchiveOpenCallback_Offset@@QAE@XZ$0 proc near
.text$x:0000FF0C                                         ; DATA XREF: .xdata$x:0000FF38o
.text$x:0000FF0C                 mov     ecx, [ebp-10h]
.text$x:0000FF0F                 add     ecx, 0Ch
.text$x:0000FF12                 jmp     ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text$x:0000FF12 __unwindfunclet$??1CArchiveOpenCallback_Offset@@QAE@XZ$0 endp
.text$x:0000FF12
.text$x:0000FF17
.text$x:0000FF17 ; =============== S U B R O U T I N E =======================================
.text$x:0000FF17
.text$x:0000FF17
.text$x:0000FF17 __ehhandler$??1CArchiveOpenCallback_Offset@@QAE@XZ proc near
.text$x:0000FF17                                         ; DATA XREF: CArchiveOpenCallback_Offset::~CArchiveOpenCallback_Offset(void)+5o
.text$x:0000FF17
.text$x:0000FF17 arg_4           = dword ptr  8
.text$x:0000FF17
.text$x:0000FF17                 mov     edx, [esp+arg_4]
.text$x:0000FF1B                 lea     eax, [edx+0Ch]
.text$x:0000FF1E                 mov     ecx, [edx-8]
.text$x:0000FF21                 xor     ecx, eax
.text$x:0000FF23                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000FF28                 mov     eax, offset __ehfuncinfo$??1CArchiveOpenCallback_Offset@@QAE@XZ
.text$x:0000FF2D                 jmp     ___CxxFrameHandler3
.text$x:0000FF2D __ehhandler$??1CArchiveOpenCallback_Offset@@QAE@XZ endp
.text$x:0000FF2D
.text$x:0000FF2D ; ---------------------------------------------------------------------------
.text$x:0000FF32                 align 4
.text$x:0000FF32 _text$x         ends
.text$x:0000FF32
.xdata$x:0000FF34 ; ===========================================================================
.xdata$x:0000FF34
.xdata$x:0000FF34 ; Segment type: Pure data
.xdata$x:0000FF34 ; Segment permissions: Read
.xdata$x:0000FF34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FF34                 assume cs:_xdata$x
.xdata$x:0000FF34                 ;org 0FF34h
.xdata$x:0000FF34 ; COMDAT (pick associative to section at FEA0)
.xdata$x:0000FF34 __unwindtable$??1CArchiveOpenCallback_Offset@@QAE@XZ db 0FFh
.xdata$x:0000FF34                                         ; DATA XREF: .xdata$x:0000FF44o
.xdata$x:0000FF35                 db 0FFh
.xdata$x:0000FF36                 db 0FFh
.xdata$x:0000FF37                 db 0FFh
.xdata$x:0000FF38                 dd offset __unwindfunclet$??1CArchiveOpenCallback_Offset@@QAE@XZ$0
.xdata$x:0000FF3C __ehfuncinfo$??1CArchiveOpenCallback_Offset@@QAE@XZ db  22h ; "
.xdata$x:0000FF3C                                         ; DATA XREF: __ehhandler$??1CArchiveOpenCallback_Offset@@QAE@XZ+11o
.xdata$x:0000FF3D                 db    5
.xdata$x:0000FF3E                 db  93h ; ô
.xdata$x:0000FF3F                 db  19h
.xdata$x:0000FF40                 db    1
.xdata$x:0000FF41                 db    0
.xdata$x:0000FF42                 db    0
.xdata$x:0000FF43                 db    0
.xdata$x:0000FF44                 dd offset __unwindtable$??1CArchiveOpenCallback_Offset@@QAE@XZ
.xdata$x:0000FF48                 db    0
.xdata$x:0000FF49                 db    0
.xdata$x:0000FF4A                 db    0
.xdata$x:0000FF4B                 db    0
.xdata$x:0000FF4C                 db    0
.xdata$x:0000FF4D                 db    0
.xdata$x:0000FF4E                 db    0
.xdata$x:0000FF4F                 db    0
.xdata$x:0000FF50                 db    0
.xdata$x:0000FF51                 db    0
.xdata$x:0000FF52                 db    0
.xdata$x:0000FF53                 db    0
.xdata$x:0000FF54                 db    0
.xdata$x:0000FF55                 db    0
.xdata$x:0000FF56                 db    0
.xdata$x:0000FF57                 db    0
.xdata$x:0000FF58                 db    0
.xdata$x:0000FF59                 db    0
.xdata$x:0000FF5A                 db    0
.xdata$x:0000FF5B                 db    0
.xdata$x:0000FF5C                 db    1
.xdata$x:0000FF5D                 db    0
.xdata$x:0000FF5E                 db    0
.xdata$x:0000FF5F                 db    0
.xdata$x:0000FF5F _xdata$x        ends
.xdata$x:0000FF5F
.text:0000FF60 ; ===========================================================================
.text:0000FF60
.text:0000FF60 ; Segment type: Pure code
.text:0000FF60 ; Segment permissions: Read/Execute
.text:0000FF60 _text           segment para public 'CODE' use32
.text:0000FF60                 assume cs:_text
.text:0000FF60                 ;org 0FF60h
.text:0000FF60 ; COMDAT (pick any)
.text:0000FF60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000FF60
.text:0000FF60 ; =============== S U B R O U T I N E =======================================
.text:0000FF60
.text:0000FF60 ; Attributes: bp-based frame
.text:0000FF60
.text:0000FF60 ; public: __thiscall CLimitedCachedInStream::CLimitedCachedInStream(void)
.text:0000FF60                 public ??0CLimitedCachedInStream@@QAE@XZ
.text:0000FF60 ??0CLimitedCachedInStream@@QAE@XZ proc near
.text:0000FF60                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2DA6p
.text:0000FF60
.text:0000FF60 var_10          = dword ptr -10h
.text:0000FF60 var_C           = dword ptr -0Ch
.text:0000FF60 var_4           = dword ptr -4
.text:0000FF60
.text:0000FF60                 push    ebp
.text:0000FF61                 mov     ebp, esp
.text:0000FF63                 push    0FFFFFFFFh
.text:0000FF65                 push    offset __ehhandler$??0CLimitedCachedInStream@@QAE@XZ
.text:0000FF6A                 mov     eax, large fs:0
.text:0000FF70                 push    eax
.text:0000FF71                 push    ecx
.text:0000FF72                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000FF79                 mov     eax, dword ptr ds:___security_cookie
.text:0000FF7E                 xor     eax, ebp
.text:0000FF80                 push    eax
.text:0000FF81                 lea     eax, [ebp+var_C]
.text:0000FF84                 mov     large fs:0, eax
.text:0000FF8A                 mov     [ebp+var_10], ecx
.text:0000FF8D                 mov     ecx, [ebp+var_10] ; this
.text:0000FF90                 call    ??0IInStream@@QAE@XZ ; IInStream::IInStream(void)
.text:0000FF95                 mov     ecx, [ebp+var_10]
.text:0000FF98                 add     ecx, 4          ; this
.text:0000FF9B                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000FFA0                 mov     eax, [ebp+var_10]
.text:0000FFA3                 mov     dword ptr [eax], offset ??_7CLimitedCachedInStream@@6B@ ; const CLimitedCachedInStream::`vftable'
.text:0000FFA9                 mov     ecx, [ebp+var_10]
.text:0000FFAC                 add     ecx, 8
.text:0000FFAF                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:0000FFB4                 mov     [ebp+var_4], 0
.text:0000FFBB                 mov     ecx, [ebp+var_10]
.text:0000FFBE                 add     ecx, 3Ch ; '<'
.text:0000FFC1                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:0000FFC6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000FFCD                 mov     eax, [ebp+var_10]
.text:0000FFD0                 mov     ecx, [ebp+var_C]
.text:0000FFD3                 mov     large fs:0, ecx
.text:0000FFDA                 pop     ecx
.text:0000FFDB                 add     esp, 10h
.text:0000FFDE                 cmp     ebp, esp
.text:0000FFE0                 call    __RTC_CheckEsp
.text:0000FFE5                 mov     esp, ebp
.text:0000FFE7                 pop     ebp
.text:0000FFE8                 retn
.text:0000FFE8 ??0CLimitedCachedInStream@@QAE@XZ endp
.text:0000FFE8
.text:0000FFE8 ; ---------------------------------------------------------------------------
.text:0000FFE9                 align 4
.text:0000FFE9 _text           ends
.text:0000FFE9
.text$x:0000FFEC ; ===========================================================================
.text$x:0000FFEC
.text$x:0000FFEC ; Segment type: Pure code
.text$x:0000FFEC ; Segment permissions: Read/Execute
.text$x:0000FFEC _text$x         segment para public 'CODE' use32
.text$x:0000FFEC                 assume cs:_text$x
.text$x:0000FFEC                 ;org 0FFECh
.text$x:0000FFEC ; COMDAT (pick associative to section at FF60)
.text$x:0000FFEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000FFEC
.text$x:0000FFEC ; =============== S U B R O U T I N E =======================================
.text$x:0000FFEC
.text$x:0000FFEC
.text$x:0000FFEC __unwindfunclet$??0CLimitedCachedInStream@@QAE@XZ$0 proc near
.text$x:0000FFEC                                         ; DATA XREF: .xdata$x:00010030o
.text$x:0000FFEC                 mov     ecx, [ebp-10h]
.text$x:0000FFEF                 add     ecx, 8
.text$x:0000FFF2                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:0000FFF2 __unwindfunclet$??0CLimitedCachedInStream@@QAE@XZ$0 endp
.text$x:0000FFF2
.text$x:0000FFF7
.text$x:0000FFF7 ; =============== S U B R O U T I N E =======================================
.text$x:0000FFF7
.text$x:0000FFF7
.text$x:0000FFF7 __ehhandler$??0CLimitedCachedInStream@@QAE@XZ proc near
.text$x:0000FFF7                                         ; DATA XREF: CLimitedCachedInStream::CLimitedCachedInStream(void)+5o
.text$x:0000FFF7
.text$x:0000FFF7 arg_4           = dword ptr  8
.text$x:0000FFF7
.text$x:0000FFF7                 mov     edx, [esp+arg_4]
.text$x:0000FFFB                 lea     eax, [edx+0Ch]
.text$x:0000FFFE
.text$x:0000FFFE loc_FFFE:                               ; DATA XREF: CArc::OpenStream2(COpenOptions const &)+2904o
.text$x:0000FFFE                                         ; CArc::OpenStream2(COpenOptions const &)+2922o ...
.text$x:0000FFFE                 mov     ecx, [edx-8]
.text$x:00010001                 xor     ecx, eax
.text$x:00010003                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00010008                 mov     eax, offset __ehfuncinfo$??0CLimitedCachedInStream@@QAE@XZ
.text$x:0001000D                 jmp     ___CxxFrameHandler3
.text$x:0001000D __ehhandler$??0CLimitedCachedInStream@@QAE@XZ endp
.text$x:0001000D
.text$x:0001000D ; ---------------------------------------------------------------------------
.text$x:00010012                 align 4
.text$x:00010012 _text$x         ends
.text$x:00010012
.rdata:00010014 ; ===========================================================================
.rdata:00010014
.rdata:00010014 ; Segment type: Pure data
.rdata:00010014 ; Segment permissions: Read
.rdata:00010014 _rdata          segment dword public 'DATA' use32
.rdata:00010014                 assume cs:_rdata
.rdata:00010014                 ;org 10014h
.rdata:00010014 ; COMDAT (pick largest)
.rdata:00010014                 dd offset ??_R4CLimitedCachedInStream@@6B@ ; const CLimitedCachedInStream::`RTTI Complete Object Locator'
.rdata:00010018                 public ??_7CLimitedCachedInStream@@6B@
.rdata:00010018 ; const CLimitedCachedInStream::`vftable'
.rdata:00010018 ??_7CLimitedCachedInStream@@6B@ dd offset ?QueryInterface@CLimitedCachedInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00010018                                         ; DATA XREF: CLimitedCachedInStream::CLimitedCachedInStream(void)+43o
.rdata:00010018                                         ; CLimitedCachedInStream::QueryInterface(_GUID const &,void * *)
.rdata:0001001C                 dd offset ?AddRef@CLimitedCachedInStream@@UAGKXZ ; CLimitedCachedInStream::AddRef(void)
.rdata:00010020                 dd offset ?Release@CLimitedCachedInStream@@UAGKXZ ; CLimitedCachedInStream::Release(void)
.rdata:00010024                 dd offset ?Read@CLimitedCachedInStream@@UAGJPAXIPAI@Z ; CLimitedCachedInStream::Read(void *,uint,uint *)
.rdata:00010028                 dd offset ?Seek@CLimitedCachedInStream@@UAGJ_JIPA_K@Z ; CLimitedCachedInStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:00010028 _rdata          ends
.rdata:00010028
.xdata$x:0001002C ; ===========================================================================
.xdata$x:0001002C
.xdata$x:0001002C ; Segment type: Pure data
.xdata$x:0001002C ; Segment permissions: Read
.xdata$x:0001002C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001002C                 assume cs:_xdata$x
.xdata$x:0001002C                 ;org 1002Ch
.xdata$x:0001002C ; COMDAT (pick associative to section at FF60)
.xdata$x:0001002C __unwindtable$??0CLimitedCachedInStream@@QAE@XZ db 0FFh
.xdata$x:0001002C                                         ; DATA XREF: .xdata$x:0001003Co
.xdata$x:0001002D                 db 0FFh
.xdata$x:0001002E                 db 0FFh
.xdata$x:0001002F                 db 0FFh
.xdata$x:00010030                 dd offset __unwindfunclet$??0CLimitedCachedInStream@@QAE@XZ$0
.xdata$x:00010034 __ehfuncinfo$??0CLimitedCachedInStream@@QAE@XZ db  22h ; "
.xdata$x:00010034                                         ; DATA XREF: __ehhandler$??0CLimitedCachedInStream@@QAE@XZ+11o
.xdata$x:00010035                 db    5
.xdata$x:00010036                 db  93h ; ô
.xdata$x:00010037                 db  19h
.xdata$x:00010038                 db    1
.xdata$x:00010039                 db    0
.xdata$x:0001003A                 db    0
.xdata$x:0001003B                 db    0
.xdata$x:0001003C                 dd offset __unwindtable$??0CLimitedCachedInStream@@QAE@XZ
.xdata$x:00010040                 db    0
.xdata$x:00010041                 db    0
.xdata$x:00010042                 db    0
.xdata$x:00010043                 db    0
.xdata$x:00010044                 db    0
.xdata$x:00010045                 db    0
.xdata$x:00010046                 db    0
.xdata$x:00010047                 db    0
.xdata$x:00010048                 db    0
.xdata$x:00010049                 db    0
.xdata$x:0001004A                 db    0
.xdata$x:0001004B                 db    0
.xdata$x:0001004C                 db    0
.xdata$x:0001004D                 db    0
.xdata$x:0001004E                 db    0
.xdata$x:0001004F                 db    0
.xdata$x:00010050                 db    0
.xdata$x:00010051                 db    0
.xdata$x:00010052                 db    0
.xdata$x:00010053                 db    0
.xdata$x:00010054                 db    1
.xdata$x:00010055                 db    0
.xdata$x:00010056                 db    0
.xdata$x:00010057                 db    0
.xdata$x:00010057 _xdata$x        ends
.xdata$x:00010057
.rdata$r:00010058 ; ===========================================================================
.rdata$r:00010058
.rdata$r:00010058 ; Segment type: Pure data
.rdata$r:00010058 ; Segment permissions: Read
.rdata$r:00010058 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00010058                 assume cs:_rdata$r
.rdata$r:00010058                 ;org 10058h
.rdata$r:00010058 ; COMDAT (pick any)
.rdata$r:00010058                 public ??_R4CLimitedCachedInStream@@6B@
.rdata$r:00010058 ; const CLimitedCachedInStream::`RTTI Complete Object Locator'
.rdata$r:00010058 ??_R4CLimitedCachedInStream@@6B@ db    0 ; DATA XREF: .rdata:00010014o
.rdata$r:00010059                 db    0
.rdata$r:0001005A                 db    0
.rdata$r:0001005B                 db    0
.rdata$r:0001005C                 db    0
.rdata$r:0001005D                 db    0
.rdata$r:0001005E                 db    0
.rdata$r:0001005F                 db    0
.rdata$r:00010060                 db    0
.rdata$r:00010061                 db    0
.rdata$r:00010062                 db    0
.rdata$r:00010063                 db    0
.rdata$r:00010064                 dd offset ??_R0?AVCLimitedCachedInStream@@@8 ; CLimitedCachedInStream `RTTI Type Descriptor'
.rdata$r:00010068                 dd offset ??_R3CLimitedCachedInStream@@8 ; CLimitedCachedInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00010068 _rdata$r        ends
.rdata$r:00010068
.data:0001006C ; ===========================================================================
.data:0001006C
.data:0001006C ; Segment type: Pure data
.data:0001006C ; Segment permissions: Read/Write
.data:0001006C _data           segment dword public 'DATA' use32
.data:0001006C                 assume cs:_data
.data:0001006C                 ;org 1006Ch
.data:0001006C ; COMDAT (pick any)
.data:0001006C                 public ??_R0?AVCLimitedCachedInStream@@@8
.data:0001006C ; class CLimitedCachedInStream `RTTI Type Descriptor'
.data:0001006C ??_R0?AVCLimitedCachedInStream@@@8 dd offset ??_7type_info@@6B@
.data:0001006C                                         ; DATA XREF: .rdata$r:00010064o
.data:0001006C                                         ; .rdata$r:CLimitedCachedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0001006C                                         ; const type_info::`vftable'
.data:00010070                 db    0
.data:00010071                 db    0
.data:00010072                 db    0
.data:00010073                 db    0
.data:00010074                 db  2Eh ; .
.data:00010075                 db  3Fh ; ?
.data:00010076                 db  41h ; A
.data:00010077                 db  56h ; V
.data:00010078                 db  43h ; C
.data:00010079                 db  4Ch ; L
.data:0001007A                 db  69h ; i
.data:0001007B                 db  6Dh ; m
.data:0001007C                 db  69h ; i
.data:0001007D                 db  74h ; t
.data:0001007E                 db  65h ; e
.data:0001007F                 db  64h ; d
.data:00010080                 db  43h ; C
.data:00010081                 db  61h ; a
.data:00010082                 db  63h ; c
.data:00010083                 db  68h ; h
.data:00010084                 db  65h ; e
.data:00010085                 db  64h ; d
.data:00010086                 db  49h ; I
.data:00010087                 db  6Eh ; n
.data:00010088                 db  53h ; S
.data:00010089                 db  74h ; t
.data:0001008A                 db  72h ; r
.data:0001008B                 db  65h ; e
.data:0001008C                 db  61h ; a
.data:0001008D                 db  6Dh ; m
.data:0001008E                 db  40h ; @
.data:0001008F                 db  40h ; @
.data:00010090                 db    0
.data:00010091                 align 4
.data:00010091 _data           ends
.data:00010091
.rdata$r:00010094 ; ===========================================================================
.rdata$r:00010094
.rdata$r:00010094 ; Segment type: Pure data
.rdata$r:00010094 ; Segment permissions: Read
.rdata$r:00010094 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00010094                 assume cs:_rdata$r
.rdata$r:00010094                 ;org 10094h
.rdata$r:00010094 ; COMDAT (pick any)
.rdata$r:00010094                 public ??_R3CLimitedCachedInStream@@8
.rdata$r:00010094 ; CLimitedCachedInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00010094 ??_R3CLimitedCachedInStream@@8 db    0  ; DATA XREF: .rdata$r:00010068o
.rdata$r:00010094                                         ; .rdata$r:000100D4o
.rdata$r:00010095                 db    0
.rdata$r:00010096                 db    0
.rdata$r:00010097                 db    0
.rdata$r:00010098                 db    1
.rdata$r:00010099                 db    0
.rdata$r:0001009A                 db    0
.rdata$r:0001009B                 db    0
.rdata$r:0001009C                 db    5
.rdata$r:0001009D                 db    0
.rdata$r:0001009E                 db    0
.rdata$r:0001009F                 db    0
.rdata$r:000100A0                 dd offset ??_R2CLimitedCachedInStream@@8 ; CLimitedCachedInStream::`RTTI Base Class Array'
.rdata$r:000100A0 _rdata$r        ends
.rdata$r:000100A0
.rdata$r:000100A4 ; ===========================================================================
.rdata$r:000100A4
.rdata$r:000100A4 ; Segment type: Pure data
.rdata$r:000100A4 ; Segment permissions: Read
.rdata$r:000100A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000100A4                 assume cs:_rdata$r
.rdata$r:000100A4                 ;org 100A4h
.rdata$r:000100A4 ; COMDAT (pick any)
.rdata$r:000100A4                 public ??_R2CLimitedCachedInStream@@8
.rdata$r:000100A4 ; CLimitedCachedInStream::`RTTI Base Class Array'
.rdata$r:000100A4 ??_R2CLimitedCachedInStream@@8 dd offset ??_R1A@?0A@EA@CLimitedCachedInStream@@8
.rdata$r:000100A4                                         ; DATA XREF: .rdata$r:000100A0o
.rdata$r:000100A4                                         ; CLimitedCachedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000100A8                 dd offset ??_R1A@?0A@EA@IInStream@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000100AC                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000100B0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000100B4                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000100B8                 db    0
.rdata$r:000100B9                 align 4
.rdata$r:000100B9 _rdata$r        ends
.rdata$r:000100B9
.rdata$r:000100BC ; ===========================================================================
.rdata$r:000100BC
.rdata$r:000100BC ; Segment type: Pure data
.rdata$r:000100BC ; Segment permissions: Read
.rdata$r:000100BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000100BC                 assume cs:_rdata$r
.rdata$r:000100BC                 ;org 100BCh
.rdata$r:000100BC ; COMDAT (pick any)
.rdata$r:000100BC                 public ??_R1A@?0A@EA@CLimitedCachedInStream@@8
.rdata$r:000100BC ; CLimitedCachedInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000100BC ??_R1A@?0A@EA@CLimitedCachedInStream@@8 dd offset ??_R0?AVCLimitedCachedInStream@@@8
.rdata$r:000100BC                                         ; DATA XREF: .rdata$r:CLimitedCachedInStream::`RTTI Base Class Array'o
.rdata$r:000100BC                                         ; CLimitedCachedInStream `RTTI Type Descriptor'
.rdata$r:000100C0                 db    4
.rdata$r:000100C1                 db    0
.rdata$r:000100C2                 db    0
.rdata$r:000100C3                 db    0
.rdata$r:000100C4                 db    0
.rdata$r:000100C5                 db    0
.rdata$r:000100C6                 db    0
.rdata$r:000100C7                 db    0
.rdata$r:000100C8                 db 0FFh
.rdata$r:000100C9                 db 0FFh
.rdata$r:000100CA                 db 0FFh
.rdata$r:000100CB                 db 0FFh
.rdata$r:000100CC                 db    0
.rdata$r:000100CD                 db    0
.rdata$r:000100CE                 db    0
.rdata$r:000100CF                 db    0
.rdata$r:000100D0                 db  40h ; @
.rdata$r:000100D1                 db    0
.rdata$r:000100D2                 db    0
.rdata$r:000100D3                 db    0
.rdata$r:000100D4                 dd offset ??_R3CLimitedCachedInStream@@8 ; CLimitedCachedInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000100D4 _rdata$r        ends
.rdata$r:000100D4
.rdata$r:000100D8 ; ===========================================================================
.rdata$r:000100D8
.rdata$r:000100D8 ; Segment type: Pure data
.rdata$r:000100D8 ; Segment permissions: Read
.rdata$r:000100D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000100D8                 assume cs:_rdata$r
.rdata$r:000100D8                 ;org 100D8h
.rdata$r:000100D8 ; COMDAT (pick any)
.rdata$r:000100D8                 public ??_R1A@?0A@EA@IInStream@@8
.rdata$r:000100D8 ; IInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000100D8 ??_R1A@?0A@EA@IInStream@@8 dd offset ??_R0?AUIInStream@@@8
.rdata$r:000100D8                                         ; DATA XREF: .rdata$r:000100A8o
.rdata$r:000100D8                                         ; .rdata$r:IInStream::`RTTI Base Class Array'o ...
.rdata$r:000100D8                                         ; IInStream `RTTI Type Descriptor'
.rdata$r:000100DC                 db    2
.rdata$r:000100DD                 db    0
.rdata$r:000100DE                 db    0
.rdata$r:000100DF                 db    0
.rdata$r:000100E0                 db    0
.rdata$r:000100E1                 db    0
.rdata$r:000100E2                 db    0
.rdata$r:000100E3                 db    0
.rdata$r:000100E4                 db 0FFh
.rdata$r:000100E5                 db 0FFh
.rdata$r:000100E6                 db 0FFh
.rdata$r:000100E7                 db 0FFh
.rdata$r:000100E8                 db    0
.rdata$r:000100E9                 db    0
.rdata$r:000100EA                 db    0
.rdata$r:000100EB                 db    0
.rdata$r:000100EC                 db  40h ; @
.rdata$r:000100ED                 db    0
.rdata$r:000100EE                 db    0
.rdata$r:000100EF                 db    0
.rdata$r:000100F0                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000100F0 _rdata$r        ends
.rdata$r:000100F0
.data:000100F4 ; ===========================================================================
.data:000100F4
.data:000100F4 ; Segment type: Pure data
.data:000100F4 ; Segment permissions: Read/Write
.data:000100F4 _data           segment dword public 'DATA' use32
.data:000100F4                 assume cs:_data
.data:000100F4                 ;org 100F4h
.data:000100F4 ; COMDAT (pick any)
.data:000100F4                 public ??_R0?AUIInStream@@@8
.data:000100F4 ; struct IInStream `RTTI Type Descriptor'
.data:000100F4 ??_R0?AUIInStream@@@8 dd offset ??_7type_info@@6B@
.data:000100F4                                         ; DATA XREF: .rdata$r:IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000100F4                                         ; .rdata$r:00010464o
.data:000100F4                                         ; const type_info::`vftable'
.data:000100F8                 db    0
.data:000100F9                 db    0
.data:000100FA                 db    0
.data:000100FB                 db    0
.data:000100FC                 db  2Eh ; .
.data:000100FD                 db  3Fh ; ?
.data:000100FE                 db  41h ; A
.data:000100FF                 db  55h ; U
.data:00010100                 db  49h ; I
.data:00010101                 db  49h ; I
.data:00010102                 db  6Eh ; n
.data:00010103                 db  53h ; S
.data:00010104                 db  74h ; t
.data:00010105                 db  72h ; r
.data:00010106                 db  65h ; e
.data:00010107                 db  61h ; a
.data:00010108                 db  6Dh ; m
.data:00010109                 db  40h ; @
.data:0001010A                 db  40h ; @
.data:0001010B                 db    0
.data:0001010B _data           ends
.data:0001010B
.rdata$r:0001010C ; ===========================================================================
.rdata$r:0001010C
.rdata$r:0001010C ; Segment type: Pure data
.rdata$r:0001010C ; Segment permissions: Read
.rdata$r:0001010C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001010C                 assume cs:_rdata$r
.rdata$r:0001010C                 ;org 1010Ch
.rdata$r:0001010C ; COMDAT (pick any)
.rdata$r:0001010C                 public ??_R3IInStream@@8
.rdata$r:0001010C ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001010C ??_R3IInStream@@8 db    0               ; DATA XREF: .rdata$r:000100F0o
.rdata$r:0001010C                                         ; .rdata$r:00010468o
.rdata$r:0001010D                 db    0
.rdata$r:0001010E                 db    0
.rdata$r:0001010F                 db    0
.rdata$r:00010110                 db    0
.rdata$r:00010111                 db    0
.rdata$r:00010112                 db    0
.rdata$r:00010113                 db    0
.rdata$r:00010114                 db    3
.rdata$r:00010115                 db    0
.rdata$r:00010116                 db    0
.rdata$r:00010117                 db    0
.rdata$r:00010118                 dd offset ??_R2IInStream@@8 ; IInStream::`RTTI Base Class Array'
.rdata$r:00010118 _rdata$r        ends
.rdata$r:00010118
.rdata$r:0001011C ; ===========================================================================
.rdata$r:0001011C
.rdata$r:0001011C ; Segment type: Pure data
.rdata$r:0001011C ; Segment permissions: Read
.rdata$r:0001011C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001011C                 assume cs:_rdata$r
.rdata$r:0001011C                 ;org 1011Ch
.rdata$r:0001011C ; COMDAT (pick any)
.rdata$r:0001011C                 public ??_R2IInStream@@8
.rdata$r:0001011C ; IInStream::`RTTI Base Class Array'
.rdata$r:0001011C ??_R2IInStream@@8 dd offset ??_R1A@?0A@EA@IInStream@@8
.rdata$r:0001011C                                         ; DATA XREF: .rdata$r:00010118o
.rdata$r:0001011C                                         ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00010120                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00010124                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00010128                 db    0
.rdata$r:00010129                 align 4
.rdata$r:00010129 _rdata$r        ends
.rdata$r:00010129
.text:0001012C ; ===========================================================================
.text:0001012C
.text:0001012C ; Segment type: Pure code
.text:0001012C ; Segment permissions: Read/Execute
.text:0001012C _text           segment para public 'CODE' use32
.text:0001012C                 assume cs:_text
.text:0001012C                 ;org 1012Ch
.text:0001012C ; COMDAT (pick any)
.text:0001012C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001012C
.text:0001012C ; =============== S U B R O U T I N E =======================================
.text:0001012C
.text:0001012C ; Attributes: bp-based frame
.text:0001012C
.text:0001012C ; __int32 __stdcall CLimitedCachedInStream::QueryInterface(CLimitedCachedInStream *this, const struct _GUID *Buf1, void **)
.text:0001012C                 public ?QueryInterface@CLimitedCachedInStream@@UAGJABU_GUID@@PAPAX@Z
.text:0001012C ?QueryInterface@CLimitedCachedInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0001012C                                         ; DATA XREF: .rdata:const CLimitedCachedInStream::`vftable'o
.text:0001012C
.text:0001012C this            = dword ptr  8
.text:0001012C Buf1            = dword ptr  0Ch
.text:0001012C arg_8           = dword ptr  10h
.text:0001012C
.text:0001012C                 push    ebp
.text:0001012D                 mov     ebp, esp
.text:0001012F                 mov     eax, [ebp+arg_8]
.text:00010132                 mov     dword ptr [eax], 0
.text:00010138                 push    offset _IID_IUnknown ; Buf2
.text:0001013D                 mov     ecx, [ebp+Buf1]
.text:00010140                 push    ecx             ; Buf1
.text:00010141                 call    ___@8           ; __(x,x)
.text:00010146                 test    eax, eax
.text:00010148                 jz      short loc_10154
.text:0001014A                 mov     edx, [ebp+arg_8]
.text:0001014D                 mov     eax, [ebp+this]
.text:00010150                 mov     [edx], eax
.text:00010152                 jmp     short loc_10193
.text:00010154 ; ---------------------------------------------------------------------------
.text:00010154
.text:00010154 loc_10154:                              ; CODE XREF: CLimitedCachedInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00010154                 push    offset _IID_ISequentialInStream ; Buf2
.text:00010159                 mov     ecx, [ebp+Buf1]
.text:0001015C                 push    ecx             ; Buf1
.text:0001015D                 call    ___@8           ; __(x,x)
.text:00010162                 test    eax, eax
.text:00010164                 jz      short loc_10170
.text:00010166                 mov     edx, [ebp+arg_8]
.text:00010169                 mov     eax, [ebp+this]
.text:0001016C                 mov     [edx], eax
.text:0001016E                 jmp     short loc_10193
.text:00010170 ; ---------------------------------------------------------------------------
.text:00010170
.text:00010170 loc_10170:                              ; CODE XREF: CLimitedCachedInStream::QueryInterface(_GUID const &,void * *)+38j
.text:00010170                 push    offset _IID_IInStream ; Buf2
.text:00010175                 mov     ecx, [ebp+Buf1]
.text:00010178                 push    ecx             ; Buf1
.text:00010179                 call    ___@8           ; __(x,x)
.text:0001017E                 test    eax, eax
.text:00010180                 jz      short loc_1018C
.text:00010182                 mov     edx, [ebp+arg_8]
.text:00010185                 mov     eax, [ebp+this]
.text:00010188                 mov     [edx], eax
.text:0001018A                 jmp     short loc_10193
.text:0001018C ; ---------------------------------------------------------------------------
.text:0001018C
.text:0001018C loc_1018C:                              ; CODE XREF: CLimitedCachedInStream::QueryInterface(_GUID const &,void * *)+54j
.text:0001018C                 mov     eax, 80004002h
.text:00010191                 jmp     short loc_101A4
.text:00010193 ; ---------------------------------------------------------------------------
.text:00010193
.text:00010193 loc_10193:                              ; CODE XREF: CLimitedCachedInStream::QueryInterface(_GUID const &,void * *)+26j
.text:00010193                                         ; CLimitedCachedInStream::QueryInterface(_GUID const &,void * *)+42j ...
.text:00010193                 mov     ecx, [ebp+this]
.text:00010196                 mov     edx, [ecx+4]
.text:00010199                 add     edx, 1
.text:0001019C                 mov     eax, [ebp+this]
.text:0001019F                 mov     [eax+4], edx
.text:000101A2                 xor     eax, eax
.text:000101A4
.text:000101A4 loc_101A4:                              ; CODE XREF: CLimitedCachedInStream::QueryInterface(_GUID const &,void * *)+65j
.text:000101A4                 cmp     ebp, esp
.text:000101A6                 call    __RTC_CheckEsp
.text:000101AB                 pop     ebp
.text:000101AC                 retn    0Ch
.text:000101AC ?QueryInterface@CLimitedCachedInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:000101AC
.text:000101AC ; ---------------------------------------------------------------------------
.text:000101AF                 align 10h
.text:000101AF _text           ends
.text:000101AF
.text:000101B0 ; ===========================================================================
.text:000101B0
.text:000101B0 ; Segment type: Pure code
.text:000101B0 ; Segment permissions: Read/Execute
.text:000101B0 _text           segment para public 'CODE' use32
.text:000101B0                 assume cs:_text
.text:000101B0                 ;org 101B0h
.text:000101B0 ; COMDAT (pick any)
.text:000101B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000101B0
.text:000101B0 ; =============== S U B R O U T I N E =======================================
.text:000101B0
.text:000101B0 ; Attributes: bp-based frame
.text:000101B0
.text:000101B0 ; unsigned __int32 __stdcall CLimitedCachedInStream::AddRef(CLimitedCachedInStream *this)
.text:000101B0                 public ?AddRef@CLimitedCachedInStream@@UAGKXZ
.text:000101B0 ?AddRef@CLimitedCachedInStream@@UAGKXZ proc near
.text:000101B0                                         ; DATA XREF: .rdata:0001001Co
.text:000101B0
.text:000101B0 var_4           = dword ptr -4
.text:000101B0 this            = dword ptr  8
.text:000101B0
.text:000101B0                 push    ebp
.text:000101B1                 mov     ebp, esp
.text:000101B3                 push    ecx
.text:000101B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000101BB                 mov     eax, [ebp+this]
.text:000101BE                 mov     ecx, [eax+4]
.text:000101C1                 add     ecx, 1
.text:000101C4                 mov     [ebp+var_4], ecx
.text:000101C7                 mov     edx, [ebp+this]
.text:000101CA                 mov     eax, [ebp+var_4]
.text:000101CD                 mov     [edx+4], eax
.text:000101D0                 mov     eax, [ebp+var_4]
.text:000101D3                 mov     esp, ebp
.text:000101D5                 pop     ebp
.text:000101D6                 retn    4
.text:000101D6 ?AddRef@CLimitedCachedInStream@@UAGKXZ endp
.text:000101D6
.text:000101D6 ; ---------------------------------------------------------------------------
.text:000101D9                 align 4
.text:000101D9 _text           ends
.text:000101D9
.text:000101DC ; ===========================================================================
.text:000101DC
.text:000101DC ; Segment type: Pure code
.text:000101DC ; Segment permissions: Read/Execute
.text:000101DC _text           segment para public 'CODE' use32
.text:000101DC                 assume cs:_text
.text:000101DC                 ;org 101DCh
.text:000101DC ; COMDAT (pick any)
.text:000101DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000101DC
.text:000101DC ; =============== S U B R O U T I N E =======================================
.text:000101DC
.text:000101DC ; Attributes: bp-based frame
.text:000101DC
.text:000101DC ; unsigned __int32 __stdcall CLimitedCachedInStream::Release(CLimitedCachedInStream *this)
.text:000101DC                 public ?Release@CLimitedCachedInStream@@UAGKXZ
.text:000101DC ?Release@CLimitedCachedInStream@@UAGKXZ proc near
.text:000101DC                                         ; DATA XREF: .rdata:00010020o
.text:000101DC
.text:000101DC var_10          = dword ptr -10h
.text:000101DC var_C           = dword ptr -0Ch
.text:000101DC var_8           = dword ptr -8
.text:000101DC var_4           = dword ptr -4
.text:000101DC this            = dword ptr  8
.text:000101DC
.text:000101DC                 push    ebp
.text:000101DD                 mov     ebp, esp
.text:000101DF                 sub     esp, 10h
.text:000101E2                 mov     eax, 0CCCCCCCCh
.text:000101E7                 mov     [ebp+var_10], eax
.text:000101EA                 mov     [ebp+var_C], eax
.text:000101ED                 mov     [ebp+var_8], eax
.text:000101F0                 mov     [ebp+var_4], eax
.text:000101F3                 mov     eax, [ebp+this]
.text:000101F6                 mov     ecx, [eax+4]
.text:000101F9                 sub     ecx, 1
.text:000101FC                 mov     [ebp+var_C], ecx
.text:000101FF                 mov     edx, [ebp+this]
.text:00010202                 mov     eax, [ebp+var_C]
.text:00010205                 mov     [edx+4], eax
.text:00010208                 cmp     [ebp+var_C], 0
.text:0001020C                 jz      short loc_10216
.text:0001020E                 mov     ecx, [ebp+this]
.text:00010211                 mov     eax, [ecx+4]
.text:00010214                 jmp     short loc_10240
.text:00010216 ; ---------------------------------------------------------------------------
.text:00010216
.text:00010216 loc_10216:                              ; CODE XREF: CLimitedCachedInStream::Release(void)+30j
.text:00010216                 mov     edx, [ebp+this]
.text:00010219                 mov     [ebp+var_8], edx
.text:0001021C                 mov     eax, [ebp+var_8]
.text:0001021F                 mov     [ebp+var_4], eax
.text:00010222                 cmp     [ebp+var_4], 0
.text:00010226                 jz      short loc_10237
.text:00010228                 push    1
.text:0001022A                 mov     ecx, [ebp+var_4]
.text:0001022D                 call    ??_GCLimitedCachedInStream@@QAEPAXI@Z ; CLimitedCachedInStream::`scalar deleting destructor'(uint)
.text:00010232                 mov     [ebp+var_10], eax
.text:00010235                 jmp     short loc_1023E
.text:00010237 ; ---------------------------------------------------------------------------
.text:00010237
.text:00010237 loc_10237:                              ; CODE XREF: CLimitedCachedInStream::Release(void)+4Aj
.text:00010237                 mov     [ebp+var_10], 0
.text:0001023E
.text:0001023E loc_1023E:                              ; CODE XREF: CLimitedCachedInStream::Release(void)+59j
.text:0001023E                 xor     eax, eax
.text:00010240
.text:00010240 loc_10240:                              ; CODE XREF: CLimitedCachedInStream::Release(void)+38j
.text:00010240                 add     esp, 10h
.text:00010243                 cmp     ebp, esp
.text:00010245                 call    __RTC_CheckEsp
.text:0001024A                 mov     esp, ebp
.text:0001024C                 pop     ebp
.text:0001024D                 retn    4
.text:0001024D ?Release@CLimitedCachedInStream@@UAGKXZ endp
.text:0001024D
.text:0001024D _text           ends
.text:0001024D
.text:00010250 ; ===========================================================================
.text:00010250
.text:00010250 ; Segment type: Pure code
.text:00010250 ; Segment permissions: Read/Execute
.text:00010250 _text           segment para public 'CODE' use32
.text:00010250                 assume cs:_text
.text:00010250                 ;org 10250h
.text:00010250 ; COMDAT (pick any)
.text:00010250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010250
.text:00010250 ; =============== S U B R O U T I N E =======================================
.text:00010250
.text:00010250 ; Attributes: bp-based frame
.text:00010250
.text:00010250 ; public: void * __thiscall CLimitedCachedInStream::`scalar deleting destructor'(unsigned int)
.text:00010250                 public ??_GCLimitedCachedInStream@@QAEPAXI@Z
.text:00010250 ??_GCLimitedCachedInStream@@QAEPAXI@Z proc near
.text:00010250                                         ; CODE XREF: CLimitedCachedInStream::Release(void)+51p
.text:00010250
.text:00010250 var_4           = dword ptr -4
.text:00010250 arg_0           = dword ptr  8
.text:00010250
.text:00010250                 push    ebp
.text:00010251                 mov     ebp, esp
.text:00010253                 push    ecx
.text:00010254                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001025B                 mov     [ebp+var_4], ecx
.text:0001025E                 mov     ecx, [ebp+var_4] ; this
.text:00010261                 call    ??1CLimitedCachedInStream@@QAE@XZ ; CLimitedCachedInStream::~CLimitedCachedInStream(void)
.text:00010266                 mov     eax, [ebp+arg_0]
.text:00010269                 and     eax, 1
.text:0001026C                 jz      short loc_1027A
.text:0001026E                 mov     ecx, [ebp+var_4]
.text:00010271                 push    ecx             ; void *
.text:00010272                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00010277                 add     esp, 4
.text:0001027A
.text:0001027A loc_1027A:                              ; CODE XREF: CLimitedCachedInStream::`scalar deleting destructor'(uint)+1Cj
.text:0001027A                 mov     eax, [ebp+var_4]
.text:0001027D                 add     esp, 4
.text:00010280                 cmp     ebp, esp
.text:00010282                 call    __RTC_CheckEsp
.text:00010287                 mov     esp, ebp
.text:00010289                 pop     ebp
.text:0001028A                 retn    4
.text:0001028A ??_GCLimitedCachedInStream@@QAEPAXI@Z endp
.text:0001028A
.text:0001028A ; ---------------------------------------------------------------------------
.text:0001028D                 align 10h
.text:0001028D _text           ends
.text:0001028D
.text:00010290 ; ===========================================================================
.text:00010290
.text:00010290 ; Segment type: Pure code
.text:00010290 ; Segment permissions: Read/Execute
.text:00010290 _text           segment para public 'CODE' use32
.text:00010290                 assume cs:_text
.text:00010290                 ;org 10290h
.text:00010290 ; COMDAT (pick any)
.text:00010290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010290
.text:00010290 ; =============== S U B R O U T I N E =======================================
.text:00010290
.text:00010290 ; Attributes: bp-based frame
.text:00010290
.text:00010290 ; _DWORD __thiscall CLimitedCachedInStream::~CLimitedCachedInStream(CLimitedCachedInStream *__hidden this)
.text:00010290                 public ??1CLimitedCachedInStream@@QAE@XZ
.text:00010290 ??1CLimitedCachedInStream@@QAE@XZ proc near
.text:00010290                                         ; CODE XREF: CLimitedCachedInStream::`scalar deleting destructor'(uint)+11p
.text:00010290
.text:00010290 var_10          = dword ptr -10h
.text:00010290 var_C           = dword ptr -0Ch
.text:00010290 var_4           = dword ptr -4
.text:00010290
.text:00010290                 push    ebp
.text:00010291                 mov     ebp, esp
.text:00010293                 push    0FFFFFFFFh
.text:00010295                 push    offset __ehhandler$??1CLimitedCachedInStream@@QAE@XZ
.text:0001029A                 mov     eax, large fs:0
.text:000102A0                 push    eax
.text:000102A1                 push    ecx
.text:000102A2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000102A9                 mov     eax, dword ptr ds:___security_cookie
.text:000102AE                 xor     eax, ebp
.text:000102B0                 push    eax
.text:000102B1                 lea     eax, [ebp+var_C]
.text:000102B4                 mov     large fs:0, eax
.text:000102BA                 mov     [ebp+var_10], ecx
.text:000102BD                 mov     [ebp+var_4], 0
.text:000102C4                 mov     ecx, [ebp+var_10]
.text:000102C7                 add     ecx, 3Ch ; '<'
.text:000102CA                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000102CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000102D6                 mov     ecx, [ebp+var_10]
.text:000102D9                 add     ecx, 8
.text:000102DC                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000102E1                 mov     ecx, [ebp+var_C]
.text:000102E4                 mov     large fs:0, ecx
.text:000102EB                 pop     ecx
.text:000102EC                 add     esp, 10h
.text:000102EF                 cmp     ebp, esp
.text:000102F1                 call    __RTC_CheckEsp
.text:000102F6                 mov     esp, ebp
.text:000102F8                 pop     ebp
.text:000102F9                 retn
.text:000102F9 ??1CLimitedCachedInStream@@QAE@XZ endp
.text:000102F9
.text:000102F9 ; ---------------------------------------------------------------------------
.text:000102FA                 align 4
.text:000102FA _text           ends
.text:000102FA
.text$x:000102FC ; ===========================================================================
.text$x:000102FC
.text$x:000102FC ; Segment type: Pure code
.text$x:000102FC ; Segment permissions: Read/Execute
.text$x:000102FC _text$x         segment para public 'CODE' use32
.text$x:000102FC                 assume cs:_text$x
.text$x:000102FC                 ;org 102FCh
.text$x:000102FC ; COMDAT (pick associative to section at 10290)
.text$x:000102FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000102FC
.text$x:000102FC ; =============== S U B R O U T I N E =======================================
.text$x:000102FC
.text$x:000102FC
.text$x:000102FC __unwindfunclet$??1CLimitedCachedInStream@@QAE@XZ$0 proc near
.text$x:000102FC                                         ; DATA XREF: .xdata$x:00010328o
.text$x:000102FC                 mov     ecx, [ebp-10h]
.text$x:000102FF                 add     ecx, 8
.text$x:00010302                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00010302 __unwindfunclet$??1CLimitedCachedInStream@@QAE@XZ$0 endp
.text$x:00010302
.text$x:00010307
.text$x:00010307 ; =============== S U B R O U T I N E =======================================
.text$x:00010307
.text$x:00010307
.text$x:00010307 __ehhandler$??1CLimitedCachedInStream@@QAE@XZ proc near
.text$x:00010307                                         ; DATA XREF: CLimitedCachedInStream::~CLimitedCachedInStream(void)+5o
.text$x:00010307
.text$x:00010307 arg_4           = dword ptr  8
.text$x:00010307
.text$x:00010307                 mov     edx, [esp+arg_4]
.text$x:0001030B                 lea     eax, [edx+0Ch]
.text$x:0001030E                 mov     ecx, [edx-8]
.text$x:00010311                 xor     ecx, eax
.text$x:00010313                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00010318                 mov     eax, offset __ehfuncinfo$??1CLimitedCachedInStream@@QAE@XZ
.text$x:0001031D                 jmp     ___CxxFrameHandler3
.text$x:0001031D __ehhandler$??1CLimitedCachedInStream@@QAE@XZ endp
.text$x:0001031D
.text$x:0001031D ; ---------------------------------------------------------------------------
.text$x:00010322                 align 4
.text$x:00010322 _text$x         ends
.text$x:00010322
.xdata$x:00010324 ; ===========================================================================
.xdata$x:00010324
.xdata$x:00010324 ; Segment type: Pure data
.xdata$x:00010324 ; Segment permissions: Read
.xdata$x:00010324 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010324                 assume cs:_xdata$x
.xdata$x:00010324                 ;org 10324h
.xdata$x:00010324 ; COMDAT (pick associative to section at 10290)
.xdata$x:00010324 __unwindtable$??1CLimitedCachedInStream@@QAE@XZ db 0FFh
.xdata$x:00010324                                         ; DATA XREF: .xdata$x:00010334o
.xdata$x:00010325                 db 0FFh
.xdata$x:00010326                 db 0FFh
.xdata$x:00010327                 db 0FFh
.xdata$x:00010328                 dd offset __unwindfunclet$??1CLimitedCachedInStream@@QAE@XZ$0
.xdata$x:0001032C __ehfuncinfo$??1CLimitedCachedInStream@@QAE@XZ db  22h ; "
.xdata$x:0001032C                                         ; DATA XREF: __ehhandler$??1CLimitedCachedInStream@@QAE@XZ+11o
.xdata$x:0001032D                 db    5
.xdata$x:0001032E                 db  93h ; ô
.xdata$x:0001032F                 db  19h
.xdata$x:00010330                 db    1
.xdata$x:00010331                 db    0
.xdata$x:00010332                 db    0
.xdata$x:00010333                 db    0
.xdata$x:00010334                 dd offset __unwindtable$??1CLimitedCachedInStream@@QAE@XZ
.xdata$x:00010338                 db    0
.xdata$x:00010339                 db    0
.xdata$x:0001033A                 db    0
.xdata$x:0001033B                 db    0
.xdata$x:0001033C                 db    0
.xdata$x:0001033D                 db    0
.xdata$x:0001033E                 db    0
.xdata$x:0001033F                 db    0
.xdata$x:00010340                 db    0
.xdata$x:00010341                 db    0
.xdata$x:00010342                 db    0
.xdata$x:00010343                 db    0
.xdata$x:00010344                 db    0
.xdata$x:00010345                 db    0
.xdata$x:00010346                 db    0
.xdata$x:00010347                 db    0
.xdata$x:00010348                 db    0
.xdata$x:00010349                 db    0
.xdata$x:0001034A                 db    0
.xdata$x:0001034B                 db    0
.xdata$x:0001034C                 db    1
.xdata$x:0001034D                 db    0
.xdata$x:0001034E                 db    0
.xdata$x:0001034F                 db    0
.xdata$x:0001034F _xdata$x        ends
.xdata$x:0001034F
.text:00010350 ; ===========================================================================
.text:00010350
.text:00010350 ; Segment type: Pure code
.text:00010350 ; Segment permissions: Read/Execute
.text:00010350 _text           segment para public 'CODE' use32
.text:00010350                 assume cs:_text
.text:00010350                 ;org 10350h
.text:00010350 ; COMDAT (pick any)
.text:00010350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010350
.text:00010350 ; =============== S U B R O U T I N E =======================================
.text:00010350
.text:00010350 ; Attributes: bp-based frame
.text:00010350
.text:00010350 ; _DWORD __thiscall IArchiveExtractCallback::IArchiveExtractCallback(IArchiveExtractCallback *__hidden this)
.text:00010350                 public ??0IArchiveExtractCallback@@QAE@XZ
.text:00010350 ??0IArchiveExtractCallback@@QAE@XZ proc near
.text:00010350                                         ; CODE XREF: CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback(void)+11p
.text:00010350
.text:00010350 var_4           = dword ptr -4
.text:00010350
.text:00010350                 push    ebp
.text:00010351                 mov     ebp, esp
.text:00010353                 push    ecx
.text:00010354                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001035B                 mov     [ebp+var_4], ecx
.text:0001035E                 mov     ecx, [ebp+var_4] ; this
.text:00010361                 call    ??0IProgress@@QAE@XZ ; IProgress::IProgress(void)
.text:00010366                 mov     eax, [ebp+var_4]
.text:00010369                 mov     dword ptr [eax], offset ??_7IArchiveExtractCallback@@6B@ ; const IArchiveExtractCallback::`vftable'
.text:0001036F                 mov     eax, [ebp+var_4]
.text:00010372                 add     esp, 4
.text:00010375                 cmp     ebp, esp
.text:00010377                 call    __RTC_CheckEsp
.text:0001037C                 mov     esp, ebp
.text:0001037E                 pop     ebp
.text:0001037F                 retn
.text:0001037F ??0IArchiveExtractCallback@@QAE@XZ endp
.text:0001037F
.text:0001037F _text           ends
.text:0001037F
.rdata:00010380 ; ===========================================================================
.rdata:00010380
.rdata:00010380 ; Segment type: Pure data
.rdata:00010380 ; Segment permissions: Read
.rdata:00010380 _rdata          segment dword public 'DATA' use32
.rdata:00010380                 assume cs:_rdata
.rdata:00010380                 ;org 10380h
.rdata:00010380 ; COMDAT (pick largest)
.rdata:00010380                 dd offset ??_R4IArchiveExtractCallback@@6B@ ; const IArchiveExtractCallback::`RTTI Complete Object Locator'
.rdata:00010384                 public ??_7IArchiveExtractCallback@@6B@
.rdata:00010384 ; const IArchiveExtractCallback::`vftable'
.rdata:00010384 ??_7IArchiveExtractCallback@@6B@ dd offset __purecall
.rdata:00010384                                         ; DATA XREF: IArchiveExtractCallback::IArchiveExtractCallback(void)+19o
.rdata:00010388                 dd offset __purecall
.rdata:0001038C                 dd offset __purecall
.rdata:00010390                 dd offset __purecall
.rdata:00010394                 dd offset __purecall
.rdata:00010398                 dd offset __purecall
.rdata:0001039C                 dd offset __purecall
.rdata:000103A0                 dd offset __purecall
.rdata:000103A0 _rdata          ends
.rdata:000103A0
.rdata$r:000103A4 ; ===========================================================================
.rdata$r:000103A4
.rdata$r:000103A4 ; Segment type: Pure data
.rdata$r:000103A4 ; Segment permissions: Read
.rdata$r:000103A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000103A4                 assume cs:_rdata$r
.rdata$r:000103A4                 ;org 103A4h
.rdata$r:000103A4 ; COMDAT (pick any)
.rdata$r:000103A4                 public ??_R4IArchiveExtractCallback@@6B@
.rdata$r:000103A4 ; const IArchiveExtractCallback::`RTTI Complete Object Locator'
.rdata$r:000103A4 ??_R4IArchiveExtractCallback@@6B@ db    0 ; DATA XREF: .rdata:00010380o
.rdata$r:000103A5                 db    0
.rdata$r:000103A6                 db    0
.rdata$r:000103A7                 db    0
.rdata$r:000103A8                 db    0
.rdata$r:000103A9                 db    0
.rdata$r:000103AA                 db    0
.rdata$r:000103AB                 db    0
.rdata$r:000103AC                 db    0
.rdata$r:000103AD                 db    0
.rdata$r:000103AE                 db    0
.rdata$r:000103AF                 db    0
.rdata$r:000103B0                 dd offset ??_R0?AUIArchiveExtractCallback@@@8 ; IArchiveExtractCallback `RTTI Type Descriptor'
.rdata$r:000103B4                 dd offset ??_R3IArchiveExtractCallback@@8 ; IArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000103B4 _rdata$r        ends
.rdata$r:000103B4
.text:000103B8 ; ===========================================================================
.text:000103B8
.text:000103B8 ; Segment type: Pure code
.text:000103B8 ; Segment permissions: Read/Execute
.text:000103B8 _text           segment para public 'CODE' use32
.text:000103B8                 assume cs:_text
.text:000103B8                 ;org 103B8h
.text:000103B8 ; COMDAT (pick any)
.text:000103B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000103B8
.text:000103B8 ; =============== S U B R O U T I N E =======================================
.text:000103B8
.text:000103B8 ; Attributes: bp-based frame
.text:000103B8
.text:000103B8 ; _DWORD __thiscall ICompressProgressInfo::ICompressProgressInfo(ICompressProgressInfo *__hidden this)
.text:000103B8                 public ??0ICompressProgressInfo@@QAE@XZ
.text:000103B8 ??0ICompressProgressInfo@@QAE@XZ proc near
.text:000103B8                                         ; CODE XREF: CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback(void)+1Cp
.text:000103B8
.text:000103B8 var_4           = dword ptr -4
.text:000103B8
.text:000103B8                 push    ebp
.text:000103B9                 mov     ebp, esp
.text:000103BB                 push    ecx
.text:000103BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000103C3                 mov     [ebp+var_4], ecx
.text:000103C6                 mov     ecx, [ebp+var_4]
.text:000103C9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000103CE                 mov     eax, [ebp+var_4]
.text:000103D1                 mov     dword ptr [eax], offset ??_7ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`vftable'
.text:000103D7                 mov     eax, [ebp+var_4]
.text:000103DA                 add     esp, 4
.text:000103DD                 cmp     ebp, esp
.text:000103DF                 call    __RTC_CheckEsp
.text:000103E4                 mov     esp, ebp
.text:000103E6                 pop     ebp
.text:000103E7                 retn
.text:000103E7 ??0ICompressProgressInfo@@QAE@XZ endp
.text:000103E7
.text:000103E7 _text           ends
.text:000103E7
.rdata:000103E8 ; ===========================================================================
.rdata:000103E8
.rdata:000103E8 ; Segment type: Pure data
.rdata:000103E8 ; Segment permissions: Read
.rdata:000103E8 _rdata          segment dword public 'DATA' use32
.rdata:000103E8                 assume cs:_rdata
.rdata:000103E8                 ;org 103E8h
.rdata:000103E8 ; COMDAT (pick largest)
.rdata:000103E8                 dd offset ??_R4ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata:000103EC                 public ??_7ICompressProgressInfo@@6B@
.rdata:000103EC ; const ICompressProgressInfo::`vftable'
.rdata:000103EC ??_7ICompressProgressInfo@@6B@ dd offset __purecall
.rdata:000103EC                                         ; DATA XREF: ICompressProgressInfo::ICompressProgressInfo(void)+19o
.rdata:000103F0                 dd offset __purecall
.rdata:000103F4                 dd offset __purecall
.rdata:000103F8                 dd offset __purecall
.rdata:000103F8 _rdata          ends
.rdata:000103F8
.rdata$r:000103FC ; ===========================================================================
.rdata$r:000103FC
.rdata$r:000103FC ; Segment type: Pure data
.rdata$r:000103FC ; Segment permissions: Read
.rdata$r:000103FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000103FC                 assume cs:_rdata$r
.rdata$r:000103FC                 ;org 103FCh
.rdata$r:000103FC ; COMDAT (pick any)
.rdata$r:000103FC                 public ??_R4ICompressProgressInfo@@6B@
.rdata$r:000103FC ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata$r:000103FC ??_R4ICompressProgressInfo@@6B@ db    0 ; DATA XREF: .rdata:000103E8o
.rdata$r:000103FD                 db    0
.rdata$r:000103FE                 db    0
.rdata$r:000103FF                 db    0
.rdata$r:00010400                 db    0
.rdata$r:00010401                 db    0
.rdata$r:00010402                 db    0
.rdata$r:00010403                 db    0
.rdata$r:00010404                 db    0
.rdata$r:00010405                 db    0
.rdata$r:00010406                 db    0
.rdata$r:00010407                 db    0
.rdata$r:00010408                 dd offset ??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:0001040C                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001040C _rdata$r        ends
.rdata$r:0001040C
.text:00010410 ; ===========================================================================
.text:00010410
.text:00010410 ; Segment type: Pure code
.text:00010410 ; Segment permissions: Read/Execute
.text:00010410 _text           segment para public 'CODE' use32
.text:00010410                 assume cs:_text
.text:00010410                 ;org 10410h
.text:00010410 ; COMDAT (pick any)
.text:00010410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010410
.text:00010410 ; =============== S U B R O U T I N E =======================================
.text:00010410
.text:00010410 ; Attributes: bp-based frame
.text:00010410
.text:00010410 ; _DWORD __thiscall IInStream::IInStream(IInStream *__hidden this)
.text:00010410                 public ??0IInStream@@QAE@XZ
.text:00010410 ??0IInStream@@QAE@XZ proc near          ; CODE XREF: CLimitedCachedInStream::CLimitedCachedInStream(void)+30p
.text:00010410                                         ; CTailInStream::CTailInStream(void)+11p
.text:00010410
.text:00010410 var_4           = dword ptr -4
.text:00010410
.text:00010410                 push    ebp
.text:00010411                 mov     ebp, esp
.text:00010413                 push    ecx
.text:00010414                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001041B                 mov     [ebp+var_4], ecx
.text:0001041E                 mov     ecx, [ebp+var_4] ; this
.text:00010421                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00010426                 mov     eax, [ebp+var_4]
.text:00010429                 mov     dword ptr [eax], offset ??_7IInStream@@6B@ ; const IInStream::`vftable'
.text:0001042F                 mov     eax, [ebp+var_4]
.text:00010432                 add     esp, 4
.text:00010435                 cmp     ebp, esp
.text:00010437                 call    __RTC_CheckEsp
.text:0001043C                 mov     esp, ebp
.text:0001043E                 pop     ebp
.text:0001043F                 retn
.text:0001043F ??0IInStream@@QAE@XZ endp
.text:0001043F
.text:0001043F _text           ends
.text:0001043F
.rdata:00010440 ; ===========================================================================
.rdata:00010440
.rdata:00010440 ; Segment type: Pure data
.rdata:00010440 ; Segment permissions: Read
.rdata:00010440 _rdata          segment dword public 'DATA' use32
.rdata:00010440                 assume cs:_rdata
.rdata:00010440                 ;org 10440h
.rdata:00010440 ; COMDAT (pick largest)
.rdata:00010440                 dd offset ??_R4IInStream@@6B@ ; const IInStream::`RTTI Complete Object Locator'
.rdata:00010444                 public ??_7IInStream@@6B@
.rdata:00010444 ; const IInStream::`vftable'
.rdata:00010444 ??_7IInStream@@6B@ dd offset __purecall ; DATA XREF: IInStream::IInStream(void)+19o
.rdata:00010448                 dd offset __purecall
.rdata:0001044C                 dd offset __purecall
.rdata:00010450                 dd offset __purecall
.rdata:00010454                 dd offset __purecall
.rdata:00010454 _rdata          ends
.rdata:00010454
.rdata$r:00010458 ; ===========================================================================
.rdata$r:00010458
.rdata$r:00010458 ; Segment type: Pure data
.rdata$r:00010458 ; Segment permissions: Read
.rdata$r:00010458 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00010458                 assume cs:_rdata$r
.rdata$r:00010458                 ;org 10458h
.rdata$r:00010458 ; COMDAT (pick any)
.rdata$r:00010458                 public ??_R4IInStream@@6B@
.rdata$r:00010458 ; const IInStream::`RTTI Complete Object Locator'
.rdata$r:00010458 ??_R4IInStream@@6B@ db    0             ; DATA XREF: .rdata:00010440o
.rdata$r:00010459                 db    0
.rdata$r:0001045A                 db    0
.rdata$r:0001045B                 db    0
.rdata$r:0001045C                 db    0
.rdata$r:0001045D                 db    0
.rdata$r:0001045E                 db    0
.rdata$r:0001045F                 db    0
.rdata$r:00010460                 db    0
.rdata$r:00010461                 db    0
.rdata$r:00010462                 db    0
.rdata$r:00010463                 db    0
.rdata$r:00010464                 dd offset ??_R0?AUIInStream@@@8 ; IInStream `RTTI Type Descriptor'
.rdata$r:00010468                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00010468 _rdata$r        ends
.rdata$r:00010468
.text:0001046C ; ===========================================================================
.text:0001046C
.text:0001046C ; Segment type: Pure code
.text:0001046C ; Segment permissions: Read/Execute
.text:0001046C _text           segment para public 'CODE' use32
.text:0001046C                 assume cs:_text
.text:0001046C                 ;org 1046Ch
.text:0001046C ; COMDAT (pick any)
.text:0001046C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001046C
.text:0001046C ; =============== S U B R O U T I N E =======================================
.text:0001046C
.text:0001046C ; Attributes: bp-based frame
.text:0001046C
.text:0001046C ; _DWORD __thiscall IProgress::IProgress(IProgress *__hidden this)
.text:0001046C                 public ??0IProgress@@QAE@XZ
.text:0001046C ??0IProgress@@QAE@XZ proc near          ; CODE XREF: IArchiveExtractCallback::IArchiveExtractCallback(void)+11p
.text:0001046C
.text:0001046C var_4           = dword ptr -4
.text:0001046C
.text:0001046C                 push    ebp
.text:0001046D                 mov     ebp, esp
.text:0001046F                 push    ecx
.text:00010470                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010477                 mov     [ebp+var_4], ecx
.text:0001047A                 mov     ecx, [ebp+var_4]
.text:0001047D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00010482                 mov     eax, [ebp+var_4]
.text:00010485                 mov     dword ptr [eax], offset ??_7IProgress@@6B@ ; const IProgress::`vftable'
.text:0001048B                 mov     eax, [ebp+var_4]
.text:0001048E                 add     esp, 4
.text:00010491                 cmp     ebp, esp
.text:00010493                 call    __RTC_CheckEsp
.text:00010498                 mov     esp, ebp
.text:0001049A                 pop     ebp
.text:0001049B                 retn
.text:0001049B ??0IProgress@@QAE@XZ endp
.text:0001049B
.text:0001049B _text           ends
.text:0001049B
.rdata:0001049C ; ===========================================================================
.rdata:0001049C
.rdata:0001049C ; Segment type: Pure data
.rdata:0001049C ; Segment permissions: Read
.rdata:0001049C _rdata          segment dword public 'DATA' use32
.rdata:0001049C                 assume cs:_rdata
.rdata:0001049C                 ;org 1049Ch
.rdata:0001049C ; COMDAT (pick largest)
.rdata:0001049C                 dd offset ??_R4IProgress@@6B@ ; const IProgress::`RTTI Complete Object Locator'
.rdata:000104A0                 public ??_7IProgress@@6B@
.rdata:000104A0 ; const IProgress::`vftable'
.rdata:000104A0 ??_7IProgress@@6B@ dd offset __purecall ; DATA XREF: IProgress::IProgress(void)+19o
.rdata:000104A4                 dd offset __purecall
.rdata:000104A8                 dd offset __purecall
.rdata:000104AC                 dd offset __purecall
.rdata:000104B0                 dd offset __purecall
.rdata:000104B0 _rdata          ends
.rdata:000104B0
.rdata$r:000104B4 ; ===========================================================================
.rdata$r:000104B4
.rdata$r:000104B4 ; Segment type: Pure data
.rdata$r:000104B4 ; Segment permissions: Read
.rdata$r:000104B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000104B4                 assume cs:_rdata$r
.rdata$r:000104B4                 ;org 104B4h
.rdata$r:000104B4 ; COMDAT (pick any)
.rdata$r:000104B4                 public ??_R4IProgress@@6B@
.rdata$r:000104B4 ; const IProgress::`RTTI Complete Object Locator'
.rdata$r:000104B4 ??_R4IProgress@@6B@ db    0             ; DATA XREF: .rdata:0001049Co
.rdata$r:000104B5                 db    0
.rdata$r:000104B6                 db    0
.rdata$r:000104B7                 db    0
.rdata$r:000104B8                 db    0
.rdata$r:000104B9                 db    0
.rdata$r:000104BA                 db    0
.rdata$r:000104BB                 db    0
.rdata$r:000104BC                 db    0
.rdata$r:000104BD                 db    0
.rdata$r:000104BE                 db    0
.rdata$r:000104BF                 db    0
.rdata$r:000104C0                 dd offset ??_R0?AUIProgress@@@8 ; IProgress `RTTI Type Descriptor'
.rdata$r:000104C4                 dd offset ??_R3IProgress@@8 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:000104C4 _rdata$r        ends
.rdata$r:000104C4
.text:000104C8 ; ===========================================================================
.text:000104C8
.text:000104C8 ; Segment type: Pure code
.text:000104C8 ; Segment permissions: Read/Execute
.text:000104C8 _text           segment para public 'CODE' use32
.text:000104C8                 assume cs:_text
.text:000104C8                 ;org 104C8h
.text:000104C8 ; COMDAT (pick any)
.text:000104C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000104C8
.text:000104C8 ; =============== S U B R O U T I N E =======================================
.text:000104C8
.text:000104C8 ; Attributes: bp-based frame
.text:000104C8
.text:000104C8 ; bool __thiscall CInFileStream::Open(CInFileStream *this, const wchar_t *)
.text:000104C8                 public ?Open@CInFileStream@@QAE_NPB_W@Z
.text:000104C8 ?Open@CInFileStream@@QAE_NPB_W@Z proc near
.text:000104C8                                         ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+131p
.text:000104C8                                         ; CArchiveLink::ReOpen(COpenOptions &)+22Fp
.text:000104C8
.text:000104C8 var_4           = dword ptr -4
.text:000104C8 arg_0           = dword ptr  8
.text:000104C8
.text:000104C8                 push    ebp
.text:000104C9                 mov     ebp, esp
.text:000104CB                 push    ecx
.text:000104CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000104D3                 mov     [ebp+var_4], ecx
.text:000104D6                 mov     eax, [ebp+arg_0]
.text:000104D9                 push    eax             ; wchar_t *
.text:000104DA                 mov     ecx, [ebp+var_4]
.text:000104DD                 add     ecx, 18h        ; this
.text:000104E0                 call    ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NIO::CInFile::Open(wchar_t const *)
.text:000104E5                 add     esp, 4
.text:000104E8                 cmp     ebp, esp
.text:000104EA                 call    __RTC_CheckEsp
.text:000104EF                 mov     esp, ebp
.text:000104F1                 pop     ebp
.text:000104F2                 retn    4
.text:000104F2 ?Open@CInFileStream@@QAE_NPB_W@Z endp
.text:000104F2
.text:000104F2 ; ---------------------------------------------------------------------------
.text:000104F5                 align 4
.text:000104F5 _text           ends
.text:000104F5
.text:000104F8 ; ===========================================================================
.text:000104F8
.text:000104F8 ; Segment type: Pure code
.text:000104F8 ; Segment permissions: Read/Execute
.text:000104F8 _text           segment para public 'CODE' use32
.text:000104F8                 assume cs:_text
.text:000104F8                 ;org 104F8h
.text:000104F8 ; COMDAT (pick any)
.text:000104F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000104F8
.text:000104F8 ; =============== S U B R O U T I N E =======================================
.text:000104F8
.text:000104F8 ; Attributes: bp-based frame
.text:000104F8
.text:000104F8 ; public: __thiscall CStdInFileStream::CStdInFileStream(void)
.text:000104F8                 public ??0CStdInFileStream@@QAE@XZ
.text:000104F8 ??0CStdInFileStream@@QAE@XZ proc near   ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+82p
.text:000104F8
.text:000104F8 var_4           = dword ptr -4
.text:000104F8
.text:000104F8                 push    ebp
.text:000104F9                 mov     ebp, esp
.text:000104FB                 push    ecx
.text:000104FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010503                 mov     [ebp+var_4], ecx
.text:00010506                 mov     ecx, [ebp+var_4] ; this
.text:00010509                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:0001050E                 mov     ecx, [ebp+var_4]
.text:00010511                 add     ecx, 4          ; this
.text:00010514                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00010519                 mov     eax, [ebp+var_4]
.text:0001051C                 mov     dword ptr [eax], offset ??_7CStdInFileStream@@6B@ ; const CStdInFileStream::`vftable'
.text:00010522                 mov     eax, [ebp+var_4]
.text:00010525                 add     esp, 4
.text:00010528                 cmp     ebp, esp
.text:0001052A                 call    __RTC_CheckEsp
.text:0001052F                 mov     esp, ebp
.text:00010531                 pop     ebp
.text:00010532                 retn
.text:00010532 ??0CStdInFileStream@@QAE@XZ endp
.text:00010532
.text:00010532 ; ---------------------------------------------------------------------------
.text:00010533                 align 4
.text:00010533 _text           ends
.text:00010533
.rdata:00010534 ; ===========================================================================
.rdata:00010534
.rdata:00010534 ; Segment type: Pure data
.rdata:00010534 ; Segment permissions: Read
.rdata:00010534 _rdata          segment dword public 'DATA' use32
.rdata:00010534                 assume cs:_rdata
.rdata:00010534                 ;org 10534h
.rdata:00010534 ; COMDAT (pick largest)
.rdata:00010534                 dd offset ??_R4CStdInFileStream@@6B@ ; const CStdInFileStream::`RTTI Complete Object Locator'
.rdata:00010538                 public ??_7CStdInFileStream@@6B@
.rdata:00010538 ; const CStdInFileStream::`vftable'
.rdata:00010538 ??_7CStdInFileStream@@6B@ dd offset ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00010538                                         ; DATA XREF: CStdInFileStream::CStdInFileStream(void)+24o
.rdata:00010538                                         ; CStdInFileStream::~CStdInFileStream(void)+11o
.rdata:00010538                                         ; CStdInFileStream::QueryInterface(_GUID const &,void * *)
.rdata:0001053C                 dd offset ?AddRef@CStdInFileStream@@UAGKXZ ; CStdInFileStream::AddRef(void)
.rdata:00010540                 dd offset ?Release@CStdInFileStream@@UAGKXZ ; CStdInFileStream::Release(void)
.rdata:00010544                 dd offset ?Read@CStdInFileStream@@UAGJPAXIPAI@Z ; CStdInFileStream::Read(void *,uint,uint *)
.rdata:00010548                 dd offset ??_ECStdInFileStream@@UAEPAXI@Z ; CStdInFileStream::`vector deleting destructor'(uint)
.rdata:00010548 _rdata          ends
.rdata:00010548
.rdata$r:0001054C ; ===========================================================================
.rdata$r:0001054C
.rdata$r:0001054C ; Segment type: Pure data
.rdata$r:0001054C ; Segment permissions: Read
.rdata$r:0001054C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001054C                 assume cs:_rdata$r
.rdata$r:0001054C                 ;org 1054Ch
.rdata$r:0001054C ; COMDAT (pick any)
.rdata$r:0001054C                 public ??_R4CStdInFileStream@@6B@
.rdata$r:0001054C ; const CStdInFileStream::`RTTI Complete Object Locator'
.rdata$r:0001054C ??_R4CStdInFileStream@@6B@ db    0      ; DATA XREF: .rdata:00010534o
.rdata$r:0001054D                 db    0
.rdata$r:0001054E                 db    0
.rdata$r:0001054F                 db    0
.rdata$r:00010550                 db    0
.rdata$r:00010551                 db    0
.rdata$r:00010552                 db    0
.rdata$r:00010553                 db    0
.rdata$r:00010554                 db    0
.rdata$r:00010555                 db    0
.rdata$r:00010556                 db    0
.rdata$r:00010557                 db    0
.rdata$r:00010558                 dd offset ??_R0?AVCStdInFileStream@@@8 ; CStdInFileStream `RTTI Type Descriptor'
.rdata$r:0001055C                 dd offset ??_R3CStdInFileStream@@8 ; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001055C _rdata$r        ends
.rdata$r:0001055C
.data:00010560 ; ===========================================================================
.data:00010560
.data:00010560 ; Segment type: Pure data
.data:00010560 ; Segment permissions: Read/Write
.data:00010560 _data           segment dword public 'DATA' use32
.data:00010560                 assume cs:_data
.data:00010560                 ;org 10560h
.data:00010560 ; COMDAT (pick any)
.data:00010560                 public ??_R0?AVCStdInFileStream@@@8
.data:00010560 ; class CStdInFileStream `RTTI Type Descriptor'
.data:00010560 ??_R0?AVCStdInFileStream@@@8 dd offset ??_7type_info@@6B@
.data:00010560                                         ; DATA XREF: .rdata$r:00010558o
.data:00010560                                         ; .rdata$r:CStdInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00010560                                         ; const type_info::`vftable'
.data:00010564                 align 8
.data:00010568 a_?avcstdinfile db '.?AVCStdInFileStream@@',0
.data:0001057F                 align 10h
.data:0001057F _data           ends
.data:0001057F
.rdata$r:00010580 ; ===========================================================================
.rdata$r:00010580
.rdata$r:00010580 ; Segment type: Pure data
.rdata$r:00010580 ; Segment permissions: Read
.rdata$r:00010580 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00010580                 assume cs:_rdata$r
.rdata$r:00010580                 ;org 10580h
.rdata$r:00010580 ; COMDAT (pick any)
.rdata$r:00010580                 public ??_R3CStdInFileStream@@8
.rdata$r:00010580 ; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00010580 ??_R3CStdInFileStream@@8 db    0        ; DATA XREF: .rdata$r:0001055Co
.rdata$r:00010580                                         ; .rdata$r:000105BCo
.rdata$r:00010581                 db    0
.rdata$r:00010582                 db    0
.rdata$r:00010583                 db    0
.rdata$r:00010584                 db    1
.rdata$r:00010585                 db    0
.rdata$r:00010586                 db    0
.rdata$r:00010587                 db    0
.rdata$r:00010588                 db    4
.rdata$r:00010589                 db    0
.rdata$r:0001058A                 db    0
.rdata$r:0001058B                 db    0
.rdata$r:0001058C                 dd offset ??_R2CStdInFileStream@@8 ; CStdInFileStream::`RTTI Base Class Array'
.rdata$r:0001058C _rdata$r        ends
.rdata$r:0001058C
.rdata$r:00010590 ; ===========================================================================
.rdata$r:00010590
.rdata$r:00010590 ; Segment type: Pure data
.rdata$r:00010590 ; Segment permissions: Read
.rdata$r:00010590 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00010590                 assume cs:_rdata$r
.rdata$r:00010590                 ;org 10590h
.rdata$r:00010590 ; COMDAT (pick any)
.rdata$r:00010590                 public ??_R2CStdInFileStream@@8
.rdata$r:00010590 ; CStdInFileStream::`RTTI Base Class Array'
.rdata$r:00010590 ??_R2CStdInFileStream@@8 dd offset ??_R1A@?0A@EA@CStdInFileStream@@8
.rdata$r:00010590                                         ; DATA XREF: .rdata$r:0001058Co
.rdata$r:00010590                                         ; CStdInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00010594                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00010598                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0001059C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000105A0                 db    0
.rdata$r:000105A1                 align 4
.rdata$r:000105A1 _rdata$r        ends
.rdata$r:000105A1
.rdata$r:000105A4 ; ===========================================================================
.rdata$r:000105A4
.rdata$r:000105A4 ; Segment type: Pure data
.rdata$r:000105A4 ; Segment permissions: Read
.rdata$r:000105A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000105A4                 assume cs:_rdata$r
.rdata$r:000105A4                 ;org 105A4h
.rdata$r:000105A4 ; COMDAT (pick any)
.rdata$r:000105A4                 public ??_R1A@?0A@EA@CStdInFileStream@@8
.rdata$r:000105A4 ; CStdInFileStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000105A4 ??_R1A@?0A@EA@CStdInFileStream@@8 dd offset ??_R0?AVCStdInFileStream@@@8
.rdata$r:000105A4                                         ; DATA XREF: .rdata$r:CStdInFileStream::`RTTI Base Class Array'o
.rdata$r:000105A4                                         ; CStdInFileStream `RTTI Type Descriptor'
.rdata$r:000105A8                 db    3
.rdata$r:000105A9                 db    0
.rdata$r:000105AA                 db    0
.rdata$r:000105AB                 db    0
.rdata$r:000105AC                 db    0
.rdata$r:000105AD                 db    0
.rdata$r:000105AE                 db    0
.rdata$r:000105AF                 db    0
.rdata$r:000105B0                 db 0FFh
.rdata$r:000105B1                 db 0FFh
.rdata$r:000105B2                 db 0FFh
.rdata$r:000105B3                 db 0FFh
.rdata$r:000105B4                 db    0
.rdata$r:000105B5                 db    0
.rdata$r:000105B6                 db    0
.rdata$r:000105B7                 db    0
.rdata$r:000105B8                 db  40h ; @
.rdata$r:000105B9                 db    0
.rdata$r:000105BA                 db    0
.rdata$r:000105BB                 db    0
.rdata$r:000105BC                 dd offset ??_R3CStdInFileStream@@8 ; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000105BC _rdata$r        ends
.rdata$r:000105BC
.text:000105C0 ; ===========================================================================
.text:000105C0
.text:000105C0 ; Segment type: Pure code
.text:000105C0 ; Segment permissions: Read/Execute
.text:000105C0 _text           segment para public 'CODE' use32
.text:000105C0                 assume cs:_text
.text:000105C0                 ;org 105C0h
.text:000105C0 ; COMDAT (pick any)
.text:000105C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000105C0
.text:000105C0 ; =============== S U B R O U T I N E =======================================
.text:000105C0
.text:000105C0 ; Attributes: bp-based frame
.text:000105C0
.text:000105C0 ; __int32 __stdcall CStdInFileStream::QueryInterface(CStdInFileStream *this, const struct _GUID *Buf1, void **)
.text:000105C0                 public ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z
.text:000105C0 ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000105C0                                         ; DATA XREF: .rdata:const CStdInFileStream::`vftable'o
.text:000105C0
.text:000105C0 this            = dword ptr  8
.text:000105C0 Buf1            = dword ptr  0Ch
.text:000105C0 arg_8           = dword ptr  10h
.text:000105C0
.text:000105C0                 push    ebp
.text:000105C1                 mov     ebp, esp
.text:000105C3                 mov     eax, [ebp+arg_8]
.text:000105C6                 mov     dword ptr [eax], 0
.text:000105CC                 push    offset _IID_IUnknown ; Buf2
.text:000105D1                 mov     ecx, [ebp+Buf1]
.text:000105D4                 push    ecx             ; Buf1
.text:000105D5                 call    ___@8           ; __(x,x)
.text:000105DA                 test    eax, eax
.text:000105DC                 jz      short loc_105E8
.text:000105DE                 mov     edx, [ebp+arg_8]
.text:000105E1                 mov     eax, [ebp+this]
.text:000105E4                 mov     [edx], eax
.text:000105E6                 jmp     short loc_105EF
.text:000105E8 ; ---------------------------------------------------------------------------
.text:000105E8
.text:000105E8 loc_105E8:                              ; CODE XREF: CStdInFileStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:000105E8                 mov     eax, 80004002h
.text:000105ED                 jmp     short loc_10600
.text:000105EF ; ---------------------------------------------------------------------------
.text:000105EF
.text:000105EF loc_105EF:                              ; CODE XREF: CStdInFileStream::QueryInterface(_GUID const &,void * *)+26j
.text:000105EF                 mov     ecx, [ebp+this]
.text:000105F2                 mov     edx, [ecx+4]
.text:000105F5                 add     edx, 1
.text:000105F8                 mov     eax, [ebp+this]
.text:000105FB                 mov     [eax+4], edx
.text:000105FE                 xor     eax, eax
.text:00010600
.text:00010600 loc_10600:                              ; CODE XREF: CStdInFileStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:00010600                 cmp     ebp, esp
.text:00010602                 call    __RTC_CheckEsp
.text:00010607                 pop     ebp
.text:00010608                 retn    0Ch
.text:00010608 ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00010608
.text:00010608 ; ---------------------------------------------------------------------------
.text:0001060B                 align 4
.text:0001060B _text           ends
.text:0001060B
.text:0001060C ; ===========================================================================
.text:0001060C
.text:0001060C ; Segment type: Pure code
.text:0001060C ; Segment permissions: Read/Execute
.text:0001060C _text           segment para public 'CODE' use32
.text:0001060C                 assume cs:_text
.text:0001060C                 ;org 1060Ch
.text:0001060C ; COMDAT (pick any)
.text:0001060C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001060C
.text:0001060C ; =============== S U B R O U T I N E =======================================
.text:0001060C
.text:0001060C ; Attributes: bp-based frame
.text:0001060C
.text:0001060C ; unsigned __int32 __stdcall CStdInFileStream::AddRef(CStdInFileStream *this)
.text:0001060C                 public ?AddRef@CStdInFileStream@@UAGKXZ
.text:0001060C ?AddRef@CStdInFileStream@@UAGKXZ proc near ; DATA XREF: .rdata:0001053Co
.text:0001060C
.text:0001060C var_4           = dword ptr -4
.text:0001060C this            = dword ptr  8
.text:0001060C
.text:0001060C                 push    ebp
.text:0001060D                 mov     ebp, esp
.text:0001060F                 push    ecx
.text:00010610                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010617                 mov     eax, [ebp+this]
.text:0001061A                 mov     ecx, [eax+4]
.text:0001061D                 add     ecx, 1
.text:00010620                 mov     [ebp+var_4], ecx
.text:00010623                 mov     edx, [ebp+this]
.text:00010626                 mov     eax, [ebp+var_4]
.text:00010629                 mov     [edx+4], eax
.text:0001062C                 mov     eax, [ebp+var_4]
.text:0001062F                 mov     esp, ebp
.text:00010631                 pop     ebp
.text:00010632                 retn    4
.text:00010632 ?AddRef@CStdInFileStream@@UAGKXZ endp
.text:00010632
.text:00010632 ; ---------------------------------------------------------------------------
.text:00010635                 align 4
.text:00010635 _text           ends
.text:00010635
.text:00010638 ; ===========================================================================
.text:00010638
.text:00010638 ; Segment type: Pure code
.text:00010638 ; Segment permissions: Read/Execute
.text:00010638 _text           segment para public 'CODE' use32
.text:00010638                 assume cs:_text
.text:00010638                 ;org 10638h
.text:00010638 ; COMDAT (pick any)
.text:00010638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010638
.text:00010638 ; =============== S U B R O U T I N E =======================================
.text:00010638
.text:00010638 ; Attributes: bp-based frame
.text:00010638
.text:00010638 ; unsigned __int32 __stdcall CStdInFileStream::Release(CStdInFileStream *this)
.text:00010638                 public ?Release@CStdInFileStream@@UAGKXZ
.text:00010638 ?Release@CStdInFileStream@@UAGKXZ proc near ; DATA XREF: .rdata:00010540o
.text:00010638
.text:00010638 var_10          = dword ptr -10h
.text:00010638 var_C           = dword ptr -0Ch
.text:00010638 var_8           = dword ptr -8
.text:00010638 var_4           = dword ptr -4
.text:00010638 this            = dword ptr  8
.text:00010638
.text:00010638                 push    ebp
.text:00010639                 mov     ebp, esp
.text:0001063B                 sub     esp, 10h
.text:0001063E                 push    esi
.text:0001063F                 mov     eax, 0CCCCCCCCh
.text:00010644                 mov     [ebp+var_10], eax
.text:00010647                 mov     [ebp+var_C], eax
.text:0001064A                 mov     [ebp+var_8], eax
.text:0001064D                 mov     [ebp+var_4], eax
.text:00010650                 mov     eax, [ebp+this]
.text:00010653                 mov     ecx, [eax+4]
.text:00010656                 sub     ecx, 1
.text:00010659                 mov     [ebp+var_C], ecx
.text:0001065C                 mov     edx, [ebp+this]
.text:0001065F                 mov     eax, [ebp+var_C]
.text:00010662                 mov     [edx+4], eax
.text:00010665                 cmp     [ebp+var_C], 0
.text:00010669                 jz      short loc_10673
.text:0001066B                 mov     ecx, [ebp+this]
.text:0001066E                 mov     eax, [ecx+4]
.text:00010671                 jmp     short loc_106AB
.text:00010673 ; ---------------------------------------------------------------------------
.text:00010673
.text:00010673 loc_10673:                              ; CODE XREF: CStdInFileStream::Release(void)+31j
.text:00010673                 mov     edx, [ebp+this]
.text:00010676                 mov     [ebp+var_8], edx
.text:00010679                 mov     eax, [ebp+var_8]
.text:0001067C                 mov     [ebp+var_4], eax
.text:0001067F                 cmp     [ebp+var_4], 0
.text:00010683                 jz      short loc_106A2
.text:00010685                 mov     esi, esp
.text:00010687                 push    1
.text:00010689                 mov     ecx, [ebp+var_4]
.text:0001068C                 mov     edx, [ecx]
.text:0001068E                 mov     ecx, [ebp+var_4]
.text:00010691                 mov     eax, [edx+10h]
.text:00010694                 call    eax
.text:00010696                 cmp     esi, esp
.text:00010698                 call    __RTC_CheckEsp
.text:0001069D                 mov     [ebp+var_10], eax
.text:000106A0                 jmp     short loc_106A9
.text:000106A2 ; ---------------------------------------------------------------------------
.text:000106A2
.text:000106A2 loc_106A2:                              ; CODE XREF: CStdInFileStream::Release(void)+4Bj
.text:000106A2                 mov     [ebp+var_10], 0
.text:000106A9
.text:000106A9 loc_106A9:                              ; CODE XREF: CStdInFileStream::Release(void)+68j
.text:000106A9                 xor     eax, eax
.text:000106AB
.text:000106AB loc_106AB:                              ; CODE XREF: CStdInFileStream::Release(void)+39j
.text:000106AB                 pop     esi
.text:000106AC                 add     esp, 10h
.text:000106AF                 cmp     ebp, esp
.text:000106B1                 call    __RTC_CheckEsp
.text:000106B6                 mov     esp, ebp
.text:000106B8                 pop     ebp
.text:000106B9                 retn    4
.text:000106B9 ?Release@CStdInFileStream@@UAGKXZ endp
.text:000106B9
.text:000106B9 _text           ends
.text:000106B9
.text:000106BC ; ===========================================================================
.text:000106BC
.text:000106BC ; Segment type: Pure code
.text:000106BC ; Segment permissions: Read/Execute
.text:000106BC _text           segment para public 'CODE' use32
.text:000106BC                 assume cs:_text
.text:000106BC                 ;org 106BCh
.text:000106BC ; COMDAT (pick any)
.text:000106BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000106BC
.text:000106BC ; =============== S U B R O U T I N E =======================================
.text:000106BC
.text:000106BC ; Attributes: bp-based frame
.text:000106BC
.text:000106BC ; public: virtual void * __thiscall CStdInFileStream::`scalar deleting destructor'(unsigned int)
.text:000106BC                 public ??_GCStdInFileStream@@UAEPAXI@Z
.text:000106BC ??_GCStdInFileStream@@UAEPAXI@Z proc near
.text:000106BC
.text:000106BC var_4           = dword ptr -4
.text:000106BC arg_0           = dword ptr  8
.text:000106BC
.text:000106BC                 push    ebp
.text:000106BD                 mov     ebp, esp
.text:000106BF                 push    ecx
.text:000106C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000106C7                 mov     [ebp+var_4], ecx
.text:000106CA                 mov     ecx, [ebp+var_4] ; this
.text:000106CD                 call    ??1CStdInFileStream@@UAE@XZ ; CStdInFileStream::~CStdInFileStream(void)
.text:000106D2                 mov     eax, [ebp+arg_0]
.text:000106D5                 and     eax, 1
.text:000106D8                 jz      short loc_106E6
.text:000106DA                 mov     ecx, [ebp+var_4]
.text:000106DD                 push    ecx             ; void *
.text:000106DE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000106E3                 add     esp, 4
.text:000106E6
.text:000106E6 loc_106E6:                              ; CODE XREF: CStdInFileStream::`scalar deleting destructor'(uint)+1Cj
.text:000106E6                 mov     eax, [ebp+var_4]
.text:000106E9                 add     esp, 4
.text:000106EC                 cmp     ebp, esp
.text:000106EE                 call    __RTC_CheckEsp
.text:000106F3                 mov     esp, ebp
.text:000106F5                 pop     ebp
.text:000106F6                 retn    4
.text:000106F6 ??_GCStdInFileStream@@UAEPAXI@Z endp
.text:000106F6
.text:000106F6 ; ---------------------------------------------------------------------------
.text:000106F9                 align 4
.text:000106F9 _text           ends
.text:000106F9
.text:000106FC ; ===========================================================================
.text:000106FC
.text:000106FC ; Segment type: Pure code
.text:000106FC ; Segment permissions: Read/Execute
.text:000106FC _text           segment para public 'CODE' use32
.text:000106FC                 assume cs:_text
.text:000106FC                 ;org 106FCh
.text:000106FC ; COMDAT (pick any)
.text:000106FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000106FC
.text:000106FC ; =============== S U B R O U T I N E =======================================
.text:000106FC
.text:000106FC ; Attributes: bp-based frame
.text:000106FC
.text:000106FC ; _DWORD __thiscall CStdInFileStream::~CStdInFileStream(CStdInFileStream *__hidden this)
.text:000106FC                 public ??1CStdInFileStream@@UAE@XZ
.text:000106FC ??1CStdInFileStream@@UAE@XZ proc near   ; CODE XREF: CStdInFileStream::`scalar deleting destructor'(uint)+11p
.text:000106FC
.text:000106FC var_4           = dword ptr -4
.text:000106FC
.text:000106FC                 push    ebp
.text:000106FD                 mov     ebp, esp
.text:000106FF                 push    ecx
.text:00010700                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010707                 mov     [ebp+var_4], ecx
.text:0001070A                 mov     eax, [ebp+var_4]
.text:0001070D                 mov     dword ptr [eax], offset ??_7CStdInFileStream@@6B@ ; const CStdInFileStream::`vftable'
.text:00010713                 mov     esp, ebp
.text:00010715                 pop     ebp
.text:00010716                 retn
.text:00010716 ??1CStdInFileStream@@UAE@XZ endp
.text:00010716
.text:00010716 ; ---------------------------------------------------------------------------
.text:00010717                 align 4
.text:00010717 _text           ends
.text:00010717
.text:00010718 ; ===========================================================================
.text:00010718
.text:00010718 ; Segment type: Pure code
.text:00010718 ; Segment permissions: Read/Execute
.text:00010718 _text           segment para public 'CODE' use32
.text:00010718                 assume cs:_text
.text:00010718                 ;org 10718h
.text:00010718 ; COMDAT (pick any)
.text:00010718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010718
.text:00010718 ; =============== S U B R O U T I N E =======================================
.text:00010718
.text:00010718 ; Attributes: bp-based frame
.text:00010718
.text:00010718 ; __int32 __thiscall CArc::Close(CArc *__hidden this)
.text:00010718                 public ?Close@CArc@@QAEJXZ
.text:00010718 ?Close@CArc@@QAEJXZ proc near           ; CODE XREF: CArchiveLink::Close(void)+46p
.text:00010718
.text:00010718 var_8           = dword ptr -8
.text:00010718 var_4           = dword ptr -4
.text:00010718
.text:00010718                 push    ebp
.text:00010719                 mov     ebp, esp
.text:0001071B                 sub     esp, 8
.text:0001071E                 push    esi
.text:0001071F                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00010726                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001072D                 mov     [ebp+var_4], ecx
.text:00010730                 mov     ecx, [ebp+var_4]
.text:00010733                 add     ecx, 4
.text:00010736                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:0001073B                 mov     ecx, [ebp+var_4]
.text:0001073E                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:00010743                 mov     [ebp+var_8], eax
.text:00010746                 mov     eax, [ebp+var_8]
.text:00010749                 mov     ecx, [eax]
.text:0001074B                 mov     esi, esp
.text:0001074D                 mov     edx, [ebp+var_8]
.text:00010750                 push    edx
.text:00010751                 mov     eax, [ecx+10h]
.text:00010754                 call    eax
.text:00010756                 cmp     esi, esp
.text:00010758                 call    __RTC_CheckEsp
.text:0001075D                 pop     esi
.text:0001075E                 add     esp, 8
.text:00010761                 cmp     ebp, esp
.text:00010763                 call    __RTC_CheckEsp
.text:00010768                 mov     esp, ebp
.text:0001076A                 pop     ebp
.text:0001076B                 retn
.text:0001076B ?Close@CArc@@QAEJXZ endp
.text:0001076B
.text:0001076B _text           ends
.text:0001076B
.text:0001076C ; ===========================================================================
.text:0001076C
.text:0001076C ; Segment type: Pure code
.text:0001076C ; Segment permissions: Read/Execute
.text:0001076C _text           segment para public 'CODE' use32
.text:0001076C                 assume cs:_text
.text:0001076C                 ;org 1076Ch
.text:0001076C ; COMDAT (pick any)
.text:0001076C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001076C
.text:0001076C ; =============== S U B R O U T I N E =======================================
.text:0001076C
.text:0001076C ; Attributes: bp-based frame
.text:0001076C
.text:0001076C ; public: __thiscall COpenType::COpenType(void)
.text:0001076C                 public ??0COpenType@@QAE@XZ
.text:0001076C ??0COpenType@@QAE@XZ proc near          ; CODE XREF: CArchiveLink::Open(COpenOptions &)+70p
.text:0001076C                                         ; CArchiveLink::Open(COpenOptions &)+9Bp ...
.text:0001076C
.text:0001076C var_4           = dword ptr -4
.text:0001076C
.text:0001076C                 push    ebp
.text:0001076D                 mov     ebp, esp
.text:0001076F                 push    ecx
.text:00010770                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010777                 mov     [ebp+var_4], ecx
.text:0001077A                 mov     eax, [ebp+var_4]
.text:0001077D                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00010783                 mov     ecx, [ebp+var_4]
.text:00010786                 add     ecx, 4
.text:00010789                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:0001078E                 mov     ecx, [ebp+var_4]
.text:00010791                 add     ecx, 7
.text:00010794                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:00010799                 mov     ecx, [ebp+var_4]
.text:0001079C                 add     ecx, 0Ah
.text:0001079F                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:000107A4                 mov     ecx, [ebp+var_4]
.text:000107A7                 add     ecx, 0Dh
.text:000107AA                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:000107AF                 mov     ecx, [ebp+var_4]
.text:000107B2                 mov     byte ptr [ecx+10h], 1
.text:000107B6                 mov     edx, [ebp+var_4]
.text:000107B9                 mov     byte ptr [edx+11h], 1
.text:000107BD                 mov     eax, [ebp+var_4]
.text:000107C0                 mov     byte ptr [eax+12h], 0
.text:000107C4                 mov     ecx, [ebp+var_4]
.text:000107C7                 mov     byte ptr [ecx+13h], 0
.text:000107CB                 mov     edx, [ebp+var_4]
.text:000107CE                 mov     byte ptr [edx+14h], 0
.text:000107D2                 mov     eax, [ebp+var_4]
.text:000107D5                 mov     byte ptr [eax+15h], 0
.text:000107D9                 mov     ecx, [ebp+var_4]
.text:000107DC                 mov     dword ptr [ecx+18h], 0
.text:000107E3                 mov     dword ptr [ecx+1Ch], 0
.text:000107EA                 mov     edx, [ebp+var_4]
.text:000107ED                 mov     byte ptr [edx+4], 1
.text:000107F1                 mov     eax, [ebp+var_4]
.text:000107F4                 mov     byte ptr [eax+5], 1
.text:000107F8                 mov     ecx, [ebp+var_4]
.text:000107FB                 mov     byte ptr [ecx+6], 1
.text:000107FF                 mov     edx, [ebp+var_4]
.text:00010802                 mov     byte ptr [edx+7], 1
.text:00010806                 mov     eax, [ebp+var_4]
.text:00010809                 mov     byte ptr [eax+0Eh], 1
.text:0001080D                 mov     ecx, [ebp+var_4]
.text:00010810                 mov     byte ptr [ecx+0Fh], 1
.text:00010814                 mov     edx, [ebp+var_4]
.text:00010817                 mov     byte ptr [edx+0Dh], 1
.text:0001081B                 mov     eax, [ebp+var_4]
.text:0001081E                 add     esp, 4
.text:00010821                 cmp     ebp, esp
.text:00010823                 call    __RTC_CheckEsp
.text:00010828                 mov     esp, ebp
.text:0001082A                 pop     ebp
.text:0001082B                 retn
.text:0001082B ??0COpenType@@QAE@XZ endp
.text:0001082B
.text:0001082B _text           ends
.text:0001082B
.text:0001082C ; ===========================================================================
.text:0001082C
.text:0001082C ; Segment type: Pure code
.text:0001082C ; Segment permissions: Read/Execute
.text:0001082C _text           segment para public 'CODE' use32
.text:0001082C                 assume cs:_text
.text:0001082C                 ;org 1082Ch
.text:0001082C ; COMDAT (pick any)
.text:0001082C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001082C
.text:0001082C ; =============== S U B R O U T I N E =======================================
.text:0001082C
.text:0001082C ; Attributes: bp-based frame
.text:0001082C
.text:0001082C ; public: __thiscall COpenSpecFlags::COpenSpecFlags(void)
.text:0001082C                 public ??0COpenSpecFlags@@QAE@XZ
.text:0001082C ??0COpenSpecFlags@@QAE@XZ proc near     ; CODE XREF: COpenType::COpenType(void)+1Dp
.text:0001082C                                         ; COpenType::COpenType(void)+28p ...
.text:0001082C
.text:0001082C var_4           = dword ptr -4
.text:0001082C
.text:0001082C                 push    ebp
.text:0001082D                 mov     ebp, esp
.text:0001082F                 push    ecx
.text:00010830                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010837                 mov     [ebp+var_4], ecx
.text:0001083A                 mov     eax, [ebp+var_4]
.text:0001083D                 mov     byte ptr [eax], 0
.text:00010840                 mov     ecx, [ebp+var_4]
.text:00010843                 mov     byte ptr [ecx+1], 0
.text:00010847                 mov     edx, [ebp+var_4]
.text:0001084A                 mov     byte ptr [edx+2], 0
.text:0001084E                 mov     eax, [ebp+var_4]
.text:00010851                 mov     esp, ebp
.text:00010853                 pop     ebp
.text:00010854                 retn
.text:00010854 ??0COpenSpecFlags@@QAE@XZ endp
.text:00010854
.text:00010854 ; ---------------------------------------------------------------------------
.text:00010855                 align 4
.text:00010855 _text           ends
.text:00010855
.text:00010858 ; ===========================================================================
.text:00010858
.text:00010858 ; Segment type: Pure code
.text:00010858 ; Segment permissions: Read/Execute
.text:00010858 _text           segment para public 'CODE' use32
.text:00010858                 assume cs:_text
.text:00010858                 ;org 10858h
.text:00010858 ; COMDAT (pick any)
.text:00010858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010858
.text:00010858 ; =============== S U B R O U T I N E =======================================
.text:00010858
.text:00010858 ; Attributes: bp-based frame
.text:00010858
.text:00010858 ; _DWORD __thiscall COpenOptions::COpenOptions(COpenOptions *__hidden this)
.text:00010858                 public ??0COpenOptions@@QAE@XZ
.text:00010858 ??0COpenOptions@@QAE@XZ proc near       ; CODE XREF: CArchiveLink::Open(COpenOptions &)+6FCp
.text:00010858
.text:00010858 var_4           = dword ptr -4
.text:00010858
.text:00010858                 push    ebp
.text:00010859                 mov     ebp, esp
.text:0001085B                 push    ecx
.text:0001085C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010863                 mov     [ebp+var_4], ecx
.text:00010866                 mov     eax, [ebp+var_4]
.text:00010869                 mov     dword ptr [eax], 0
.text:0001086F                 mov     ecx, [ebp+var_4]
.text:00010872                 add     ecx, 8
.text:00010875                 call    ??0COpenType@@QAE@XZ ; COpenType::COpenType(void)
.text:0001087A                 mov     ecx, [ebp+var_4]
.text:0001087D                 mov     dword ptr [ecx+28h], 0
.text:00010884                 mov     edx, [ebp+var_4]
.text:00010887                 mov     dword ptr [edx+2Ch], 0
.text:0001088E                 mov     eax, [ebp+var_4]
.text:00010891                 mov     dword ptr [eax+30h], 0
.text:00010898                 mov     ecx, [ebp+var_4]
.text:0001089B                 mov     dword ptr [ecx+34h], 0
.text:000108A2                 mov     edx, [ebp+var_4]
.text:000108A5                 mov     dword ptr [edx+38h], 0
.text:000108AC                 mov     eax, [ebp+var_4]
.text:000108AF                 mov     dword ptr [eax+3Ch], 0
.text:000108B6                 mov     ecx, [ebp+var_4]
.text:000108B9                 mov     byte ptr [ecx+44h], 0
.text:000108BD                 mov     ecx, [ebp+var_4]
.text:000108C0                 add     ecx, 48h ; 'H'
.text:000108C3                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000108C8                 mov     eax, [ebp+var_4]
.text:000108CB                 add     esp, 4
.text:000108CE                 cmp     ebp, esp
.text:000108D0                 call    __RTC_CheckEsp
.text:000108D5                 mov     esp, ebp
.text:000108D7                 pop     ebp
.text:000108D8                 retn
.text:000108D8 ??0COpenOptions@@QAE@XZ endp
.text:000108D8
.text:000108D8 ; ---------------------------------------------------------------------------
.text:000108D9                 align 4
.text:000108D9 _text           ends
.text:000108D9
.text:000108DC ; ===========================================================================
.text:000108DC
.text:000108DC ; Segment type: Pure code
.text:000108DC ; Segment permissions: Read/Execute
.text:000108DC _text           segment para public 'CODE' use32
.text:000108DC                 assume cs:_text
.text:000108DC                 ;org 108DCh
.text:000108DC ; COMDAT (pick any)
.text:000108DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000108DC
.text:000108DC ; =============== S U B R O U T I N E =======================================
.text:000108DC
.text:000108DC ; Attributes: bp-based frame
.text:000108DC
.text:000108DC ; public: __thiscall CArc::CArc(void)
.text:000108DC                 public ??0CArc@@QAE@XZ
.text:000108DC ??0CArc@@QAE@XZ proc near               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+150p
.text:000108DC                                         ; CArchiveLink::Open(COpenOptions &)+52Dp
.text:000108DC
.text:000108DC var_10          = dword ptr -10h
.text:000108DC var_C           = dword ptr -0Ch
.text:000108DC var_4           = dword ptr -4
.text:000108DC
.text:000108DC                 push    ebp
.text:000108DD                 mov     ebp, esp
.text:000108DF                 push    0FFFFFFFFh
.text:000108E1                 push    offset __ehhandler$??0CArc@@QAE@XZ
.text:000108E6                 mov     eax, large fs:0
.text:000108EC                 push    eax
.text:000108ED                 push    ecx
.text:000108EE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000108F5                 mov     eax, dword ptr ds:___security_cookie
.text:000108FA                 xor     eax, ebp
.text:000108FC                 push    eax
.text:000108FD                 lea     eax, [ebp+var_C]
.text:00010900                 mov     large fs:0, eax
.text:00010906                 mov     [ebp+var_10], ecx
.text:00010909                 mov     ecx, [ebp+var_10]
.text:0001090C                 call    ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>(void)
.text:00010911                 mov     [ebp+var_4], 0
.text:00010918                 mov     ecx, [ebp+var_10]
.text:0001091B                 add     ecx, 4
.text:0001091E                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:00010923                 mov     byte ptr [ebp+var_4], 1
.text:00010927                 mov     ecx, [ebp+var_10]
.text:0001092A                 add     ecx, 8
.text:0001092D                 call    ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>(void)
.text:00010932                 mov     byte ptr [ebp+var_4], 2
.text:00010936                 mov     ecx, [ebp+var_10]
.text:00010939                 add     ecx, 0Ch
.text:0001093C                 call    ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>(void)
.text:00010941                 mov     byte ptr [ebp+var_4], 3
.text:00010945                 mov     ecx, [ebp+var_10]
.text:00010948                 add     ecx, 10h
.text:0001094B                 call    ??0CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::CArcErrorInfo(void)
.text:00010950                 mov     byte ptr [ebp+var_4], 4
.text:00010954                 mov     ecx, [ebp+var_10]
.text:00010957                 add     ecx, 40h ; '@'
.text:0001095A                 call    ??0CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::CArcErrorInfo(void)
.text:0001095F                 mov     byte ptr [ebp+var_4], 5
.text:00010963                 mov     ecx, [ebp+var_10]
.text:00010966                 add     ecx, 70h ; 'p'
.text:00010969                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0001096E                 mov     byte ptr [ebp+var_4], 6
.text:00010972                 mov     ecx, [ebp+var_10]
.text:00010975                 add     ecx, 7Ch ; '|'
.text:00010978                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0001097D                 mov     byte ptr [ebp+var_4], 7
.text:00010981                 mov     ecx, [ebp+var_10]
.text:00010984                 add     ecx, 88h ; 'ê'
.text:0001098A                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0001098F                 mov     eax, [ebp+var_10]
.text:00010992                 mov     byte ptr [eax+0A4h], 0
.text:00010999                 mov     ecx, [ebp+var_10]
.text:0001099C                 mov     byte ptr [ecx+0D9h], 0
.text:000109A3                 mov     edx, [ebp+var_10]
.text:000109A6                 mov     byte ptr [edx+0DAh], 0
.text:000109AD                 mov     eax, [ebp+var_10]
.text:000109B0                 mov     byte ptr [eax+0DBh], 0
.text:000109B7                 mov     ecx, [ebp+var_10]
.text:000109BA                 mov     byte ptr [ecx+0DCh], 0
.text:000109C1                 mov     edx, [ebp+var_10]
.text:000109C4                 mov     byte ptr [edx+0DDh], 0
.text:000109CB                 mov     eax, [ebp+var_10]
.text:000109CE                 mov     byte ptr [eax+0DEh], 0
.text:000109D5                 mov     ecx, [ebp+var_10]
.text:000109D8                 mov     byte ptr [ecx+0DFh], 0
.text:000109DF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000109E6                 mov     eax, [ebp+var_10]
.text:000109E9                 mov     ecx, [ebp+var_C]
.text:000109EC                 mov     large fs:0, ecx
.text:000109F3                 pop     ecx
.text:000109F4                 add     esp, 10h
.text:000109F7                 cmp     ebp, esp
.text:000109F9                 call    __RTC_CheckEsp
.text:000109FE                 mov     esp, ebp
.text:00010A00                 pop     ebp
.text:00010A01                 retn
.text:00010A01 ??0CArc@@QAE@XZ endp
.text:00010A01
.text:00010A01 ; ---------------------------------------------------------------------------
.text:00010A02                 align 4
.text:00010A02 _text           ends
.text:00010A02
.text$x:00010A04 ; ===========================================================================
.text$x:00010A04
.text$x:00010A04 ; Segment type: Pure code
.text$x:00010A04 ; Segment permissions: Read/Execute
.text$x:00010A04 _text$x         segment para public 'CODE' use32
.text$x:00010A04                 assume cs:_text$x
.text$x:00010A04                 ;org 10A04h
.text$x:00010A04 ; COMDAT (pick associative to section at 108DC)
.text$x:00010A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00010A04
.text$x:00010A04 ; =============== S U B R O U T I N E =======================================
.text$x:00010A04
.text$x:00010A04
.text$x:00010A04 __unwindfunclet$??0CArc@@QAE@XZ$0 proc near ; DATA XREF: .xdata$x:00010A9Co
.text$x:00010A04                 mov     ecx, [ebp-10h]
.text$x:00010A07                 jmp     ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text$x:00010A07 __unwindfunclet$??0CArc@@QAE@XZ$0 endp
.text$x:00010A07
.text$x:00010A0C
.text$x:00010A0C ; =============== S U B R O U T I N E =======================================
.text$x:00010A0C
.text$x:00010A0C
.text$x:00010A0C __unwindfunclet$??0CArc@@QAE@XZ$1 proc near ; DATA XREF: .xdata$x:00010AA4o
.text$x:00010A0C                 mov     ecx, [ebp-10h]
.text$x:00010A0F                 add     ecx, 4
.text$x:00010A12                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00010A12 __unwindfunclet$??0CArc@@QAE@XZ$1 endp
.text$x:00010A12
.text$x:00010A17
.text$x:00010A17 ; =============== S U B R O U T I N E =======================================
.text$x:00010A17
.text$x:00010A17
.text$x:00010A17 __unwindfunclet$??0CArc@@QAE@XZ$2 proc near ; DATA XREF: .xdata$x:00010AACo
.text$x:00010A17                 mov     ecx, [ebp-10h]
.text$x:00010A1A                 add     ecx, 8
.text$x:00010A1D                 jmp     ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>(void)
.text$x:00010A1D __unwindfunclet$??0CArc@@QAE@XZ$2 endp
.text$x:00010A1D
.text$x:00010A22
.text$x:00010A22 ; =============== S U B R O U T I N E =======================================
.text$x:00010A22
.text$x:00010A22
.text$x:00010A22 __unwindfunclet$??0CArc@@QAE@XZ$3 proc near ; DATA XREF: .xdata$x:00010AB4o
.text$x:00010A22                 mov     ecx, [ebp-10h]
.text$x:00010A25                 add     ecx, 0Ch
.text$x:00010A28                 jmp     ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>(void)
.text$x:00010A28 __unwindfunclet$??0CArc@@QAE@XZ$3 endp
.text$x:00010A28
.text$x:00010A2D
.text$x:00010A2D ; =============== S U B R O U T I N E =======================================
.text$x:00010A2D
.text$x:00010A2D
.text$x:00010A2D __unwindfunclet$??0CArc@@QAE@XZ$4 proc near ; DATA XREF: .xdata$x:00010ABCo
.text$x:00010A2D                 mov     ecx, [ebp-10h]
.text$x:00010A30                 add     ecx, 10h        ; this
.text$x:00010A33                 jmp     ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text$x:00010A33 __unwindfunclet$??0CArc@@QAE@XZ$4 endp
.text$x:00010A33
.text$x:00010A38
.text$x:00010A38 ; =============== S U B R O U T I N E =======================================
.text$x:00010A38
.text$x:00010A38
.text$x:00010A38 __unwindfunclet$??0CArc@@QAE@XZ$5 proc near ; DATA XREF: .xdata$x:00010AC4o
.text$x:00010A38                 mov     ecx, [ebp-10h]
.text$x:00010A3B                 add     ecx, 40h ; '@'  ; this
.text$x:00010A3E                 jmp     ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text$x:00010A3E __unwindfunclet$??0CArc@@QAE@XZ$5 endp
.text$x:00010A3E
.text$x:00010A43
.text$x:00010A43 ; =============== S U B R O U T I N E =======================================
.text$x:00010A43
.text$x:00010A43
.text$x:00010A43 __unwindfunclet$??0CArc@@QAE@XZ$6 proc near ; DATA XREF: .xdata$x:00010ACCo
.text$x:00010A43                 mov     ecx, [ebp-10h]
.text$x:00010A46                 add     ecx, 70h ; 'p'  ; this
.text$x:00010A49                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00010A49 __unwindfunclet$??0CArc@@QAE@XZ$6 endp
.text$x:00010A49
.text$x:00010A4E
.text$x:00010A4E ; =============== S U B R O U T I N E =======================================
.text$x:00010A4E
.text$x:00010A4E
.text$x:00010A4E __unwindfunclet$??0CArc@@QAE@XZ$7 proc near ; DATA XREF: .xdata$x:00010AD4o
.text$x:00010A4E                 mov     ecx, [ebp-10h]
.text$x:00010A51                 add     ecx, 7Ch ; '|'  ; this
.text$x:00010A54                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00010A54 __unwindfunclet$??0CArc@@QAE@XZ$7 endp
.text$x:00010A54
.text$x:00010A59
.text$x:00010A59 ; =============== S U B R O U T I N E =======================================
.text$x:00010A59
.text$x:00010A59
.text$x:00010A59 __ehhandler$??0CArc@@QAE@XZ proc near   ; DATA XREF: CArc::CArc(void)+5o
.text$x:00010A59
.text$x:00010A59 arg_4           = dword ptr  8
.text$x:00010A59
.text$x:00010A59                 mov     edx, [esp+arg_4]
.text$x:00010A5D                 lea     eax, [edx+0Ch]
.text$x:00010A60                 mov     ecx, [edx-8]
.text$x:00010A63                 xor     ecx, eax
.text$x:00010A65                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00010A6A                 mov     eax, offset __ehfuncinfo$??0CArc@@QAE@XZ
.text$x:00010A6F                 jmp     ___CxxFrameHandler3
.text$x:00010A6F __ehhandler$??0CArc@@QAE@XZ endp
.text$x:00010A6F
.text$x:00010A6F _text$x         ends
.text$x:00010A6F
.xdata$x:00010A74 ; ===========================================================================
.xdata$x:00010A74
.xdata$x:00010A74 ; Segment type: Pure data
.xdata$x:00010A74 ; Segment permissions: Read
.xdata$x:00010A74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010A74                 assume cs:_xdata$x
.xdata$x:00010A74                 ;org 10A74h
.xdata$x:00010A74 ; COMDAT (pick associative to section at 108DC)
.xdata$x:00010A74 __ehfuncinfo$??0CArc@@QAE@XZ db  22h ; "
.xdata$x:00010A74                                         ; DATA XREF: __ehhandler$??0CArc@@QAE@XZ+11o
.xdata$x:00010A75                 db    5
.xdata$x:00010A76                 db  93h ; ô
.xdata$x:00010A77                 db  19h
.xdata$x:00010A78                 db    8
.xdata$x:00010A79                 db    0
.xdata$x:00010A7A                 db    0
.xdata$x:00010A7B                 db    0
.xdata$x:00010A7C                 dd offset __unwindtable$??0CArc@@QAE@XZ
.xdata$x:00010A80                 db    0
.xdata$x:00010A81                 db    0
.xdata$x:00010A82                 db    0
.xdata$x:00010A83                 db    0
.xdata$x:00010A84                 db    0
.xdata$x:00010A85                 db    0
.xdata$x:00010A86                 db    0
.xdata$x:00010A87                 db    0
.xdata$x:00010A88                 db    0
.xdata$x:00010A89                 db    0
.xdata$x:00010A8A                 db    0
.xdata$x:00010A8B                 db    0
.xdata$x:00010A8C                 db    0
.xdata$x:00010A8D                 db    0
.xdata$x:00010A8E                 db    0
.xdata$x:00010A8F                 db    0
.xdata$x:00010A90                 db    0
.xdata$x:00010A91                 db    0
.xdata$x:00010A92                 db    0
.xdata$x:00010A93                 db    0
.xdata$x:00010A94                 db    1
.xdata$x:00010A95                 db    0
.xdata$x:00010A96                 db    0
.xdata$x:00010A97                 db    0
.xdata$x:00010A98 __unwindtable$??0CArc@@QAE@XZ db 0FFh   ; DATA XREF: .xdata$x:00010A7Co
.xdata$x:00010A99                 db 0FFh
.xdata$x:00010A9A                 db 0FFh
.xdata$x:00010A9B                 db 0FFh
.xdata$x:00010A9C                 dd offset __unwindfunclet$??0CArc@@QAE@XZ$0
.xdata$x:00010AA0                 db    0
.xdata$x:00010AA1                 db    0
.xdata$x:00010AA2                 db    0
.xdata$x:00010AA3                 db    0
.xdata$x:00010AA4                 dd offset __unwindfunclet$??0CArc@@QAE@XZ$1
.xdata$x:00010AA8                 db    1
.xdata$x:00010AA9                 db    0
.xdata$x:00010AAA                 db    0
.xdata$x:00010AAB                 db    0
.xdata$x:00010AAC                 dd offset __unwindfunclet$??0CArc@@QAE@XZ$2
.xdata$x:00010AB0                 db    2
.xdata$x:00010AB1                 db    0
.xdata$x:00010AB2                 db    0
.xdata$x:00010AB3                 db    0
.xdata$x:00010AB4                 dd offset __unwindfunclet$??0CArc@@QAE@XZ$3
.xdata$x:00010AB8                 db    3
.xdata$x:00010AB9                 db    0
.xdata$x:00010ABA                 db    0
.xdata$x:00010ABB                 db    0
.xdata$x:00010ABC                 dd offset __unwindfunclet$??0CArc@@QAE@XZ$4
.xdata$x:00010AC0                 db    4
.xdata$x:00010AC1                 db    0
.xdata$x:00010AC2                 db    0
.xdata$x:00010AC3                 db    0
.xdata$x:00010AC4                 dd offset __unwindfunclet$??0CArc@@QAE@XZ$5
.xdata$x:00010AC8                 db    5
.xdata$x:00010AC9                 db    0
.xdata$x:00010ACA                 db    0
.xdata$x:00010ACB                 db    0
.xdata$x:00010ACC                 dd offset __unwindfunclet$??0CArc@@QAE@XZ$6
.xdata$x:00010AD0                 db    6
.xdata$x:00010AD1                 db    0
.xdata$x:00010AD2                 db    0
.xdata$x:00010AD3                 db    0
.xdata$x:00010AD4                 dd offset __unwindfunclet$??0CArc@@QAE@XZ$7
.xdata$x:00010AD4 _xdata$x        ends
.xdata$x:00010AD4
.text:00010AD8 ; ===========================================================================
.text:00010AD8
.text:00010AD8 ; Segment type: Pure code
.text:00010AD8 ; Segment permissions: Read/Execute
.text:00010AD8 _text           segment para public 'CODE' use32
.text:00010AD8                 assume cs:_text
.text:00010AD8                 ;org 10AD8h
.text:00010AD8 ; COMDAT (pick any)
.text:00010AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010AD8
.text:00010AD8 ; =============== S U B R O U T I N E =======================================
.text:00010AD8
.text:00010AD8 ; Attributes: bp-based frame
.text:00010AD8
.text:00010AD8 ; public: __thiscall CArcErrorInfo::CArcErrorInfo(void)
.text:00010AD8                 public ??0CArcErrorInfo@@QAE@XZ
.text:00010AD8 ??0CArcErrorInfo@@QAE@XZ proc near      ; CODE XREF: CArc::CArc(void)+6Fp
.text:00010AD8                                         ; CArc::CArc(void)+7Ep
.text:00010AD8
.text:00010AD8 var_10          = dword ptr -10h
.text:00010AD8 var_C           = dword ptr -0Ch
.text:00010AD8 var_4           = dword ptr -4
.text:00010AD8
.text:00010AD8                 push    ebp
.text:00010AD9                 mov     ebp, esp
.text:00010ADB                 push    0FFFFFFFFh
.text:00010ADD                 push    offset __ehhandler$??0CArcErrorInfo@@QAE@XZ
.text:00010AE2                 mov     eax, large fs:0
.text:00010AE8                 push    eax
.text:00010AE9                 push    ecx
.text:00010AEA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00010AF1                 mov     eax, dword ptr ds:___security_cookie
.text:00010AF6                 xor     eax, ebp
.text:00010AF8                 push    eax
.text:00010AF9                 lea     eax, [ebp+var_C]
.text:00010AFC                 mov     large fs:0, eax
.text:00010B02                 mov     [ebp+var_10], ecx
.text:00010B05                 mov     eax, [ebp+var_10]
.text:00010B08                 mov     byte ptr [eax], 0
.text:00010B0B                 mov     ecx, [ebp+var_10]
.text:00010B0E                 mov     byte ptr [ecx+1], 0
.text:00010B12                 mov     edx, [ebp+var_10]
.text:00010B15                 mov     byte ptr [edx+2], 0
.text:00010B19                 mov     eax, [ebp+var_10]
.text:00010B1C                 mov     byte ptr [eax+3], 0
.text:00010B20                 mov     ecx, [ebp+var_10]
.text:00010B23                 mov     dword ptr [ecx+4], 0
.text:00010B2A                 mov     edx, [ebp+var_10]
.text:00010B2D                 mov     dword ptr [edx+8], 0
.text:00010B34                 mov     eax, [ebp+var_10]
.text:00010B37                 mov     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:00010B3E                 mov     ecx, [ebp+var_10]
.text:00010B41                 mov     dword ptr [ecx+10h], 0
.text:00010B48                 mov     dword ptr [ecx+14h], 0
.text:00010B4F                 mov     ecx, [ebp+var_10]
.text:00010B52                 add     ecx, 18h
.text:00010B55                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00010B5A                 mov     [ebp+var_4], 0
.text:00010B61                 mov     ecx, [ebp+var_10]
.text:00010B64                 add     ecx, 24h ; '$'
.text:00010B67                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00010B6C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00010B73                 mov     eax, [ebp+var_10]
.text:00010B76                 mov     ecx, [ebp+var_C]
.text:00010B79                 mov     large fs:0, ecx
.text:00010B80                 pop     ecx
.text:00010B81                 add     esp, 10h
.text:00010B84                 cmp     ebp, esp
.text:00010B86                 call    __RTC_CheckEsp
.text:00010B8B                 mov     esp, ebp
.text:00010B8D                 pop     ebp
.text:00010B8E                 retn
.text:00010B8E ??0CArcErrorInfo@@QAE@XZ endp
.text:00010B8E
.text:00010B8E ; ---------------------------------------------------------------------------
.text:00010B8F                 align 10h
.text:00010B8F _text           ends
.text:00010B8F
.text$x:00010B90 ; ===========================================================================
.text$x:00010B90
.text$x:00010B90 ; Segment type: Pure code
.text$x:00010B90 ; Segment permissions: Read/Execute
.text$x:00010B90 _text$x         segment para public 'CODE' use32
.text$x:00010B90                 assume cs:_text$x
.text$x:00010B90                 ;org 10B90h
.text$x:00010B90 ; COMDAT (pick associative to section at 10AD8)
.text$x:00010B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00010B90
.text$x:00010B90 ; =============== S U B R O U T I N E =======================================
.text$x:00010B90
.text$x:00010B90
.text$x:00010B90 __unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0 proc near
.text$x:00010B90                                         ; DATA XREF: .xdata$x:00010BBCo
.text$x:00010B90                 mov     ecx, [ebp-10h]
.text$x:00010B93                 add     ecx, 18h        ; this
.text$x:00010B96                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00010B96 __unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0 endp
.text$x:00010B96
.text$x:00010B9B
.text$x:00010B9B ; =============== S U B R O U T I N E =======================================
.text$x:00010B9B
.text$x:00010B9B
.text$x:00010B9B __ehhandler$??0CArcErrorInfo@@QAE@XZ proc near
.text$x:00010B9B                                         ; DATA XREF: CArcErrorInfo::CArcErrorInfo(void)+5o
.text$x:00010B9B
.text$x:00010B9B arg_4           = dword ptr  8
.text$x:00010B9B
.text$x:00010B9B                 mov     edx, [esp+arg_4]
.text$x:00010B9F                 lea     eax, [edx+0Ch]
.text$x:00010BA2                 mov     ecx, [edx-8]
.text$x:00010BA5                 xor     ecx, eax
.text$x:00010BA7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00010BAC                 mov     eax, offset __ehfuncinfo$??0CArcErrorInfo@@QAE@XZ
.text$x:00010BB1                 jmp     ___CxxFrameHandler3
.text$x:00010BB1 __ehhandler$??0CArcErrorInfo@@QAE@XZ endp
.text$x:00010BB1
.text$x:00010BB1 ; ---------------------------------------------------------------------------
.text$x:00010BB6                 align 4
.text$x:00010BB6 _text$x         ends
.text$x:00010BB6
.xdata$x:00010BB8 ; ===========================================================================
.xdata$x:00010BB8
.xdata$x:00010BB8 ; Segment type: Pure data
.xdata$x:00010BB8 ; Segment permissions: Read
.xdata$x:00010BB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010BB8                 assume cs:_xdata$x
.xdata$x:00010BB8                 ;org 10BB8h
.xdata$x:00010BB8 ; COMDAT (pick associative to section at 10AD8)
.xdata$x:00010BB8 __unwindtable$??0CArcErrorInfo@@QAE@XZ db 0FFh
.xdata$x:00010BB8                                         ; DATA XREF: .xdata$x:00010BC8o
.xdata$x:00010BB9                 db 0FFh
.xdata$x:00010BBA                 db 0FFh
.xdata$x:00010BBB                 db 0FFh
.xdata$x:00010BBC                 dd offset __unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0
.xdata$x:00010BC0 __ehfuncinfo$??0CArcErrorInfo@@QAE@XZ db  22h ; "
.xdata$x:00010BC0                                         ; DATA XREF: __ehhandler$??0CArcErrorInfo@@QAE@XZ+11o
.xdata$x:00010BC1                 db    5
.xdata$x:00010BC2                 db  93h ; ô
.xdata$x:00010BC3                 db  19h
.xdata$x:00010BC4                 db    1
.xdata$x:00010BC5                 db    0
.xdata$x:00010BC6                 db    0
.xdata$x:00010BC7                 db    0
.xdata$x:00010BC8                 dd offset __unwindtable$??0CArcErrorInfo@@QAE@XZ
.xdata$x:00010BCC                 align 20h
.xdata$x:00010BE0                 db    1
.xdata$x:00010BE1                 db    0
.xdata$x:00010BE2                 db    0
.xdata$x:00010BE3                 db    0
.xdata$x:00010BE3 _xdata$x        ends
.xdata$x:00010BE3
.text:00010BE4 ; ===========================================================================
.text:00010BE4
.text:00010BE4 ; Segment type: Pure code
.text:00010BE4 ; Segment permissions: Read/Execute
.text:00010BE4 _text           segment para public 'CODE' use32
.text:00010BE4                 assume cs:_text
.text:00010BE4                 ;org 10BE4h
.text:00010BE4 ; COMDAT (pick any)
.text:00010BE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010BE4
.text:00010BE4 ; =============== S U B R O U T I N E =======================================
.text:00010BE4
.text:00010BE4 ; Attributes: bp-based frame
.text:00010BE4
.text:00010BE4 ; _DWORD __thiscall CArcErrorInfo::~CArcErrorInfo(CArcErrorInfo *__hidden this)
.text:00010BE4                 public ??1CArcErrorInfo@@QAE@XZ
.text:00010BE4 ??1CArcErrorInfo@@QAE@XZ proc near      ; CODE XREF: __unwindfunclet$??0CArc@@QAE@XZ$4+6j
.text:00010BE4                                         ; __unwindfunclet$??0CArc@@QAE@XZ$5+6j ...
.text:00010BE4
.text:00010BE4 var_10          = dword ptr -10h
.text:00010BE4 var_C           = dword ptr -0Ch
.text:00010BE4 var_4           = dword ptr -4
.text:00010BE4
.text:00010BE4                 push    ebp
.text:00010BE5                 mov     ebp, esp
.text:00010BE7                 push    0FFFFFFFFh
.text:00010BE9                 push    offset __ehhandler$??1CArcErrorInfo@@QAE@XZ
.text:00010BEE                 mov     eax, large fs:0
.text:00010BF4                 push    eax
.text:00010BF5                 push    ecx
.text:00010BF6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00010BFD                 mov     eax, dword ptr ds:___security_cookie
.text:00010C02                 xor     eax, ebp
.text:00010C04                 push    eax
.text:00010C05                 lea     eax, [ebp+var_C]
.text:00010C08                 mov     large fs:0, eax
.text:00010C0E                 mov     [ebp+var_10], ecx
.text:00010C11                 mov     [ebp+var_4], 0
.text:00010C18                 mov     ecx, [ebp+var_10]
.text:00010C1B                 add     ecx, 24h ; '$'  ; this
.text:00010C1E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00010C23                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00010C2A                 mov     ecx, [ebp+var_10]
.text:00010C2D                 add     ecx, 18h        ; this
.text:00010C30                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00010C35                 mov     ecx, [ebp+var_C]
.text:00010C38                 mov     large fs:0, ecx
.text:00010C3F                 pop     ecx
.text:00010C40                 add     esp, 10h
.text:00010C43                 cmp     ebp, esp
.text:00010C45                 call    __RTC_CheckEsp
.text:00010C4A                 mov     esp, ebp
.text:00010C4C                 pop     ebp
.text:00010C4D                 retn
.text:00010C4D ??1CArcErrorInfo@@QAE@XZ endp
.text:00010C4D
.text:00010C4D ; ---------------------------------------------------------------------------
.text:00010C4E                 align 10h
.text:00010C4E _text           ends
.text:00010C4E
.text$x:00010C50 ; ===========================================================================
.text$x:00010C50
.text$x:00010C50 ; Segment type: Pure code
.text$x:00010C50 ; Segment permissions: Read/Execute
.text$x:00010C50 _text$x         segment para public 'CODE' use32
.text$x:00010C50                 assume cs:_text$x
.text$x:00010C50                 ;org 10C50h
.text$x:00010C50 ; COMDAT (pick associative to section at 10BE4)
.text$x:00010C50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00010C50
.text$x:00010C50 ; =============== S U B R O U T I N E =======================================
.text$x:00010C50
.text$x:00010C50
.text$x:00010C50 __unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0 proc near
.text$x:00010C50                                         ; DATA XREF: .xdata$x:00010C7Co
.text$x:00010C50                 mov     ecx, [ebp-10h]
.text$x:00010C53                 add     ecx, 18h        ; this
.text$x:00010C56                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00010C56 __unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0 endp
.text$x:00010C56
.text$x:00010C5B
.text$x:00010C5B ; =============== S U B R O U T I N E =======================================
.text$x:00010C5B
.text$x:00010C5B
.text$x:00010C5B __ehhandler$??1CArcErrorInfo@@QAE@XZ proc near
.text$x:00010C5B                                         ; DATA XREF: CArcErrorInfo::~CArcErrorInfo(void)+5o
.text$x:00010C5B
.text$x:00010C5B arg_4           = dword ptr  8
.text$x:00010C5B
.text$x:00010C5B                 mov     edx, [esp+arg_4]
.text$x:00010C5F                 lea     eax, [edx+0Ch]
.text$x:00010C62                 mov     ecx, [edx-8]
.text$x:00010C65                 xor     ecx, eax
.text$x:00010C67                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00010C6C                 mov     eax, offset __ehfuncinfo$??1CArcErrorInfo@@QAE@XZ
.text$x:00010C71                 jmp     ___CxxFrameHandler3
.text$x:00010C71 __ehhandler$??1CArcErrorInfo@@QAE@XZ endp
.text$x:00010C71
.text$x:00010C71 ; ---------------------------------------------------------------------------
.text$x:00010C76                 align 4
.text$x:00010C76 _text$x         ends
.text$x:00010C76
.xdata$x:00010C78 ; ===========================================================================
.xdata$x:00010C78
.xdata$x:00010C78 ; Segment type: Pure data
.xdata$x:00010C78 ; Segment permissions: Read
.xdata$x:00010C78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010C78                 assume cs:_xdata$x
.xdata$x:00010C78                 ;org 10C78h
.xdata$x:00010C78 ; COMDAT (pick associative to section at 10BE4)
.xdata$x:00010C78 __unwindtable$??1CArcErrorInfo@@QAE@XZ db 0FFh
.xdata$x:00010C78                                         ; DATA XREF: .xdata$x:00010C88o
.xdata$x:00010C79                 db 0FFh
.xdata$x:00010C7A                 db 0FFh
.xdata$x:00010C7B                 db 0FFh
.xdata$x:00010C7C                 dd offset __unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0
.xdata$x:00010C80 __ehfuncinfo$??1CArcErrorInfo@@QAE@XZ db  22h ; "
.xdata$x:00010C80                                         ; DATA XREF: __ehhandler$??1CArcErrorInfo@@QAE@XZ+11o
.xdata$x:00010C81                 db    5
.xdata$x:00010C82                 db  93h ; ô
.xdata$x:00010C83                 db  19h
.xdata$x:00010C84                 db    1
.xdata$x:00010C85                 db    0
.xdata$x:00010C86                 db    0
.xdata$x:00010C87                 db    0
.xdata$x:00010C88                 dd offset __unwindtable$??1CArcErrorInfo@@QAE@XZ
.xdata$x:00010C8C                 align 20h
.xdata$x:00010CA0                 db    1
.xdata$x:00010CA1                 db    0
.xdata$x:00010CA2                 db    0
.xdata$x:00010CA3                 db    0
.xdata$x:00010CA3 _xdata$x        ends
.xdata$x:00010CA3
.text:00010CA4 ; ===========================================================================
.text:00010CA4
.text:00010CA4 ; Segment type: Pure code
.text:00010CA4 ; Segment permissions: Read/Execute
.text:00010CA4 _text           segment para public 'CODE' use32
.text:00010CA4                 assume cs:_text
.text:00010CA4                 ;org 10CA4h
.text:00010CA4 ; COMDAT (pick any)
.text:00010CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010CA4
.text:00010CA4 ; =============== S U B R O U T I N E =======================================
.text:00010CA4
.text:00010CA4 ; Attributes: bp-based frame
.text:00010CA4
.text:00010CA4 ; _DWORD __thiscall CArc::~CArc(CArc *__hidden this)
.text:00010CA4                 public ??1CArc@@QAE@XZ
.text:00010CA4 ??1CArc@@QAE@XZ proc near               ; CODE XREF: CArchiveLink::Open(COpenOptions &)+1EEp
.text:00010CA4                                         ; CArchiveLink::Open(COpenOptions &)+21Ap ...
.text:00010CA4
.text:00010CA4 var_10          = dword ptr -10h
.text:00010CA4 var_C           = dword ptr -0Ch
.text:00010CA4 var_4           = dword ptr -4
.text:00010CA4
.text:00010CA4                 push    ebp
.text:00010CA5                 mov     ebp, esp
.text:00010CA7                 push    0FFFFFFFFh
.text:00010CA9                 push    offset __ehhandler$??1CArc@@QAE@XZ
.text:00010CAE                 mov     eax, large fs:0
.text:00010CB4                 push    eax
.text:00010CB5                 push    ecx
.text:00010CB6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00010CBD                 mov     eax, dword ptr ds:___security_cookie
.text:00010CC2                 xor     eax, ebp
.text:00010CC4                 push    eax
.text:00010CC5                 lea     eax, [ebp+var_C]
.text:00010CC8                 mov     large fs:0, eax
.text:00010CCE                 mov     [ebp+var_10], ecx
.text:00010CD1                 mov     [ebp+var_4], 7
.text:00010CD8                 mov     ecx, [ebp+var_10]
.text:00010CDB                 add     ecx, 88h ; 'ê'  ; this
.text:00010CE1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00010CE6                 mov     byte ptr [ebp+var_4], 6
.text:00010CEA                 mov     ecx, [ebp+var_10]
.text:00010CED                 add     ecx, 7Ch ; '|'  ; this
.text:00010CF0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00010CF5                 mov     byte ptr [ebp+var_4], 5
.text:00010CF9                 mov     ecx, [ebp+var_10]
.text:00010CFC                 add     ecx, 70h ; 'p'  ; this
.text:00010CFF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00010D04                 mov     byte ptr [ebp+var_4], 4
.text:00010D08                 mov     ecx, [ebp+var_10]
.text:00010D0B                 add     ecx, 40h ; '@'  ; this
.text:00010D0E                 call    ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text:00010D13                 mov     byte ptr [ebp+var_4], 3
.text:00010D17                 mov     ecx, [ebp+var_10]
.text:00010D1A                 add     ecx, 10h        ; this
.text:00010D1D                 call    ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text:00010D22                 mov     byte ptr [ebp+var_4], 2
.text:00010D26                 mov     ecx, [ebp+var_10]
.text:00010D29                 add     ecx, 0Ch
.text:00010D2C                 call    ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>(void)
.text:00010D31                 mov     byte ptr [ebp+var_4], 1
.text:00010D35                 mov     ecx, [ebp+var_10]
.text:00010D38                 add     ecx, 8
.text:00010D3B                 call    ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>(void)
.text:00010D40                 mov     byte ptr [ebp+var_4], 0
.text:00010D44                 mov     ecx, [ebp+var_10]
.text:00010D47                 add     ecx, 4
.text:00010D4A                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00010D4F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00010D56                 mov     ecx, [ebp+var_10]
.text:00010D59                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00010D5E                 mov     ecx, [ebp+var_C]
.text:00010D61                 mov     large fs:0, ecx
.text:00010D68                 pop     ecx
.text:00010D69                 add     esp, 10h
.text:00010D6C                 cmp     ebp, esp
.text:00010D6E                 call    __RTC_CheckEsp
.text:00010D73                 mov     esp, ebp
.text:00010D75                 pop     ebp
.text:00010D76                 retn
.text:00010D76 ??1CArc@@QAE@XZ endp
.text:00010D76
.text:00010D76 ; ---------------------------------------------------------------------------
.text:00010D77                 align 4
.text:00010D77 _text           ends
.text:00010D77
.text$x:00010D78 ; ===========================================================================
.text$x:00010D78
.text$x:00010D78 ; Segment type: Pure code
.text$x:00010D78 ; Segment permissions: Read/Execute
.text$x:00010D78 _text$x         segment para public 'CODE' use32
.text$x:00010D78                 assume cs:_text$x
.text$x:00010D78                 ;org 10D78h
.text$x:00010D78 ; COMDAT (pick associative to section at 10CA4)
.text$x:00010D78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00010D78
.text$x:00010D78 ; =============== S U B R O U T I N E =======================================
.text$x:00010D78
.text$x:00010D78
.text$x:00010D78 __unwindfunclet$??1CArc@@QAE@XZ$0 proc near ; DATA XREF: .xdata$x:00010E10o
.text$x:00010D78                 mov     ecx, [ebp-10h]
.text$x:00010D7B                 jmp     ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text$x:00010D7B __unwindfunclet$??1CArc@@QAE@XZ$0 endp
.text$x:00010D7B
.text$x:00010D80
.text$x:00010D80 ; =============== S U B R O U T I N E =======================================
.text$x:00010D80
.text$x:00010D80
.text$x:00010D80 __unwindfunclet$??1CArc@@QAE@XZ$1 proc near ; DATA XREF: .xdata$x:00010E18o
.text$x:00010D80                 mov     ecx, [ebp-10h]
.text$x:00010D83                 add     ecx, 4
.text$x:00010D86                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00010D86 __unwindfunclet$??1CArc@@QAE@XZ$1 endp
.text$x:00010D86
.text$x:00010D8B
.text$x:00010D8B ; =============== S U B R O U T I N E =======================================
.text$x:00010D8B
.text$x:00010D8B
.text$x:00010D8B __unwindfunclet$??1CArc@@QAE@XZ$2 proc near ; DATA XREF: .xdata$x:00010E20o
.text$x:00010D8B                 mov     ecx, [ebp-10h]
.text$x:00010D8E                 add     ecx, 8
.text$x:00010D91                 jmp     ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>(void)
.text$x:00010D91 __unwindfunclet$??1CArc@@QAE@XZ$2 endp
.text$x:00010D91
.text$x:00010D96
.text$x:00010D96 ; =============== S U B R O U T I N E =======================================
.text$x:00010D96
.text$x:00010D96
.text$x:00010D96 __unwindfunclet$??1CArc@@QAE@XZ$3 proc near ; DATA XREF: .xdata$x:00010E28o
.text$x:00010D96                 mov     ecx, [ebp-10h]
.text$x:00010D99                 add     ecx, 0Ch
.text$x:00010D9C                 jmp     ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>(void)
.text$x:00010D9C __unwindfunclet$??1CArc@@QAE@XZ$3 endp
.text$x:00010D9C
.text$x:00010DA1
.text$x:00010DA1 ; =============== S U B R O U T I N E =======================================
.text$x:00010DA1
.text$x:00010DA1
.text$x:00010DA1 __unwindfunclet$??1CArc@@QAE@XZ$4 proc near ; DATA XREF: .xdata$x:00010E30o
.text$x:00010DA1                 mov     ecx, [ebp-10h]
.text$x:00010DA4                 add     ecx, 10h        ; this
.text$x:00010DA7                 jmp     ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text$x:00010DA7 __unwindfunclet$??1CArc@@QAE@XZ$4 endp
.text$x:00010DA7
.text$x:00010DAC
.text$x:00010DAC ; =============== S U B R O U T I N E =======================================
.text$x:00010DAC
.text$x:00010DAC
.text$x:00010DAC __unwindfunclet$??1CArc@@QAE@XZ$5 proc near ; DATA XREF: .xdata$x:00010E38o
.text$x:00010DAC                 mov     ecx, [ebp-10h]
.text$x:00010DAF                 add     ecx, 40h ; '@'  ; this
.text$x:00010DB2                 jmp     ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text$x:00010DB2 __unwindfunclet$??1CArc@@QAE@XZ$5 endp
.text$x:00010DB2
.text$x:00010DB7
.text$x:00010DB7 ; =============== S U B R O U T I N E =======================================
.text$x:00010DB7
.text$x:00010DB7
.text$x:00010DB7 __unwindfunclet$??1CArc@@QAE@XZ$6 proc near ; DATA XREF: .xdata$x:00010E40o
.text$x:00010DB7                 mov     ecx, [ebp-10h]
.text$x:00010DBA                 add     ecx, 70h ; 'p'  ; this
.text$x:00010DBD                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00010DBD __unwindfunclet$??1CArc@@QAE@XZ$6 endp
.text$x:00010DBD
.text$x:00010DC2
.text$x:00010DC2 ; =============== S U B R O U T I N E =======================================
.text$x:00010DC2
.text$x:00010DC2
.text$x:00010DC2 __unwindfunclet$??1CArc@@QAE@XZ$7 proc near ; DATA XREF: .xdata$x:00010E48o
.text$x:00010DC2                 mov     ecx, [ebp-10h]
.text$x:00010DC5                 add     ecx, 7Ch ; '|'  ; this
.text$x:00010DC8                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00010DC8 __unwindfunclet$??1CArc@@QAE@XZ$7 endp
.text$x:00010DC8
.text$x:00010DCD
.text$x:00010DCD ; =============== S U B R O U T I N E =======================================
.text$x:00010DCD
.text$x:00010DCD
.text$x:00010DCD __ehhandler$??1CArc@@QAE@XZ proc near   ; DATA XREF: CArc::~CArc(void)+5o
.text$x:00010DCD
.text$x:00010DCD arg_4           = dword ptr  8
.text$x:00010DCD
.text$x:00010DCD                 mov     edx, [esp+arg_4]
.text$x:00010DD1                 lea     eax, [edx+0Ch]
.text$x:00010DD4                 mov     ecx, [edx-8]
.text$x:00010DD7                 xor     ecx, eax
.text$x:00010DD9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00010DDE                 mov     eax, offset __ehfuncinfo$??1CArc@@QAE@XZ
.text$x:00010DE3                 jmp     ___CxxFrameHandler3
.text$x:00010DE3 __ehhandler$??1CArc@@QAE@XZ endp
.text$x:00010DE3
.text$x:00010DE3 _text$x         ends
.text$x:00010DE3
.xdata$x:00010DE8 ; ===========================================================================
.xdata$x:00010DE8
.xdata$x:00010DE8 ; Segment type: Pure data
.xdata$x:00010DE8 ; Segment permissions: Read
.xdata$x:00010DE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010DE8                 assume cs:_xdata$x
.xdata$x:00010DE8                 ;org 10DE8h
.xdata$x:00010DE8 ; COMDAT (pick associative to section at 10CA4)
.xdata$x:00010DE8 __ehfuncinfo$??1CArc@@QAE@XZ db  22h ; "
.xdata$x:00010DE8                                         ; DATA XREF: __ehhandler$??1CArc@@QAE@XZ+11o
.xdata$x:00010DE9                 db    5
.xdata$x:00010DEA                 db  93h ; ô
.xdata$x:00010DEB                 db  19h
.xdata$x:00010DEC                 db    8
.xdata$x:00010DED                 db    0
.xdata$x:00010DEE                 db    0
.xdata$x:00010DEF                 db    0
.xdata$x:00010DF0                 dd offset __unwindtable$??1CArc@@QAE@XZ
.xdata$x:00010DF4                 db    0
.xdata$x:00010DF5                 db    0
.xdata$x:00010DF6                 db    0
.xdata$x:00010DF7                 db    0
.xdata$x:00010DF8                 db    0
.xdata$x:00010DF9                 db    0
.xdata$x:00010DFA                 db    0
.xdata$x:00010DFB                 db    0
.xdata$x:00010DFC                 db    0
.xdata$x:00010DFD                 db    0
.xdata$x:00010DFE                 db    0
.xdata$x:00010DFF                 db    0
.xdata$x:00010E00                 db    0
.xdata$x:00010E01                 db    0
.xdata$x:00010E02                 db    0
.xdata$x:00010E03                 db    0
.xdata$x:00010E04                 db    0
.xdata$x:00010E05                 db    0
.xdata$x:00010E06                 db    0
.xdata$x:00010E07                 db    0
.xdata$x:00010E08                 db    1
.xdata$x:00010E09                 db    0
.xdata$x:00010E0A                 db    0
.xdata$x:00010E0B                 db    0
.xdata$x:00010E0C __unwindtable$??1CArc@@QAE@XZ db 0FFh   ; DATA XREF: .xdata$x:00010DF0o
.xdata$x:00010E0D                 db 0FFh
.xdata$x:00010E0E                 db 0FFh
.xdata$x:00010E0F                 db 0FFh
.xdata$x:00010E10                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$0
.xdata$x:00010E14                 align 8
.xdata$x:00010E18                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$1
.xdata$x:00010E1C                 db    1
.xdata$x:00010E1D                 db    0
.xdata$x:00010E1E                 db    0
.xdata$x:00010E1F                 db    0
.xdata$x:00010E20                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$2
.xdata$x:00010E24                 db    2
.xdata$x:00010E25                 db    0
.xdata$x:00010E26                 db    0
.xdata$x:00010E27                 db    0
.xdata$x:00010E28                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$3
.xdata$x:00010E2C                 db    3
.xdata$x:00010E2D                 db    0
.xdata$x:00010E2E                 db    0
.xdata$x:00010E2F                 db    0
.xdata$x:00010E30                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$4
.xdata$x:00010E34                 db    4
.xdata$x:00010E35                 db    0
.xdata$x:00010E36                 db    0
.xdata$x:00010E37                 db    0
.xdata$x:00010E38                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$5
.xdata$x:00010E3C                 db    5
.xdata$x:00010E3D                 db    0
.xdata$x:00010E3E                 db    0
.xdata$x:00010E3F                 db    0
.xdata$x:00010E40                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$6
.xdata$x:00010E44                 db    6
.xdata$x:00010E45                 db    0
.xdata$x:00010E46                 db    0
.xdata$x:00010E47                 db    0
.xdata$x:00010E48                 dd offset __unwindfunclet$??1CArc@@QAE@XZ$7
.xdata$x:00010E48 _xdata$x        ends
.xdata$x:00010E48
.text:00010E4C ; ===========================================================================
.text:00010E4C
.text:00010E4C ; Segment type: Pure code
.text:00010E4C ; Segment permissions: Read/Execute
.text:00010E4C _text           segment para public 'CODE' use32
.text:00010E4C                 assume cs:_text
.text:00010E4C                 ;org 10E4Ch
.text:00010E4C ; COMDAT (pick any)
.text:00010E4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010E4C
.text:00010E4C ; =============== S U B R O U T I N E =======================================
.text:00010E4C
.text:00010E4C ; Attributes: bp-based frame
.text:00010E4C
.text:00010E4C ; _DWORD __thiscall COpenOptions::~COpenOptions(COpenOptions *__hidden this)
.text:00010E4C                 public ??1COpenOptions@@QAE@XZ
.text:00010E4C ??1COpenOptions@@QAE@XZ proc near       ; CODE XREF: CArchiveLink::Open(COpenOptions &)+7F0p
.text:00010E4C                                         ; CArchiveLink::Open(COpenOptions &)+873p ...
.text:00010E4C
.text:00010E4C var_4           = dword ptr -4
.text:00010E4C
.text:00010E4C                 push    ebp
.text:00010E4D                 mov     ebp, esp
.text:00010E4F                 push    ecx
.text:00010E50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010E57                 mov     [ebp+var_4], ecx
.text:00010E5A                 mov     ecx, [ebp+var_4]
.text:00010E5D                 add     ecx, 48h ; 'H'  ; this
.text:00010E60                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00010E65                 add     esp, 4
.text:00010E68                 cmp     ebp, esp
.text:00010E6A                 call    __RTC_CheckEsp
.text:00010E6F                 mov     esp, ebp
.text:00010E71                 pop     ebp
.text:00010E72                 retn
.text:00010E72 ??1COpenOptions@@QAE@XZ endp
.text:00010E72
.text:00010E72 ; ---------------------------------------------------------------------------
.text:00010E73                 align 4
.text:00010E73 _text           ends
.text:00010E73
.text:00010E74 ; ===========================================================================
.text:00010E74
.text:00010E74 ; Segment type: Pure code
.text:00010E74 ; Segment permissions: Read/Execute
.text:00010E74 _text           segment para public 'CODE' use32
.text:00010E74                 assume cs:_text
.text:00010E74                 ;org 10E74h
.text:00010E74 ; COMDAT (pick any)
.text:00010E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00010E74
.text:00010E74 ; =============== S U B R O U T I N E =======================================
.text:00010E74
.text:00010E74 ; Attributes: bp-based frame
.text:00010E74
.text:00010E74 ; public: __thiscall COpenCallbackImp::COpenCallbackImp(void)
.text:00010E74                 public ??0COpenCallbackImp@@QAE@XZ
.text:00010E74 ??0COpenCallbackImp@@QAE@XZ proc near   ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+6Cp
.text:00010E74                                         ; CArchiveLink::ReOpen(COpenOptions &)+102p
.text:00010E74
.text:00010E74 var_10          = dword ptr -10h
.text:00010E74 var_C           = dword ptr -0Ch
.text:00010E74 var_4           = dword ptr -4
.text:00010E74
.text:00010E74                 push    ebp
.text:00010E75                 mov     ebp, esp
.text:00010E77                 push    0FFFFFFFFh
.text:00010E79                 push    offset __ehhandler$??0COpenCallbackImp@@QAE@XZ
.text:00010E7E                 mov     eax, large fs:0
.text:00010E84                 push    eax
.text:00010E85                 push    ecx
.text:00010E86                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00010E8D                 mov     eax, dword ptr ds:___security_cookie
.text:00010E92                 xor     eax, ebp
.text:00010E94                 push    eax
.text:00010E95                 lea     eax, [ebp+var_C]
.text:00010E98                 mov     large fs:0, eax
.text:00010E9E                 mov     [ebp+var_10], ecx
.text:00010EA1                 mov     ecx, [ebp+var_10] ; this
.text:00010EA4                 call    ??0IArchiveOpenCallback@@QAE@XZ ; IArchiveOpenCallback::IArchiveOpenCallback(void)
.text:00010EA9                 mov     ecx, [ebp+var_10]
.text:00010EAC                 add     ecx, 4          ; this
.text:00010EAF                 call    ??0IArchiveOpenVolumeCallback@@QAE@XZ ; IArchiveOpenVolumeCallback::IArchiveOpenVolumeCallback(void)
.text:00010EB4                 mov     ecx, [ebp+var_10]
.text:00010EB7                 add     ecx, 8          ; this
.text:00010EBA                 call    ??0IArchiveOpenSetSubArchiveName@@QAE@XZ ; IArchiveOpenSetSubArchiveName::IArchiveOpenSetSubArchiveName(void)
.text:00010EBF                 mov     ecx, [ebp+var_10]
.text:00010EC2                 add     ecx, 0Ch        ; this
.text:00010EC5                 call    ??0ICryptoGetTextPassword@@QAE@XZ ; ICryptoGetTextPassword::ICryptoGetTextPassword(void)
.text:00010ECA                 mov     ecx, [ebp+var_10]
.text:00010ECD                 add     ecx, 10h        ; this
.text:00010ED0                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00010ED5                 mov     eax, [ebp+var_10]
.text:00010ED8                 mov     dword ptr [eax], offset ??_7COpenCallbackImp@@6BIArchiveOpenCallback@@@ ; const COpenCallbackImp::`vftable'{for `IArchiveOpenCallback'}
.text:00010EDE                 mov     ecx, [ebp+var_10]
.text:00010EE1                 mov     dword ptr [ecx+4], offset ??_7COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@ ; const COpenCallbackImp::`vftable'{for `IArchiveOpenVolumeCallback'}
.text:00010EE8                 mov     edx, [ebp+var_10]
.text:00010EEB                 mov     dword ptr [edx+8], offset ??_7COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@ ; const COpenCallbackImp::`vftable'{for `IArchiveOpenSetSubArchiveName'}
.text:00010EF2                 mov     eax, [ebp+var_10]
.text:00010EF5                 mov     dword ptr [eax+0Ch], offset ??_7COpenCallbackImp@@6BICryptoGetTextPassword@@@ ; const COpenCallbackImp::`vftable'{for `ICryptoGetTextPassword'}
.text:00010EFC                 mov     ecx, [ebp+var_10]
.text:00010EFF                 add     ecx, 14h
.text:00010F02                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00010F07                 mov     [ebp+var_4], 0
.text:00010F0E                 mov     ecx, [ebp+var_10]
.text:00010F11                 add     ecx, 20h ; ' '  ; this
.text:00010F14                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:00010F19                 mov     byte ptr [ebp+var_4], 1
.text:00010F1D                 mov     ecx, [ebp+var_10]
.text:00010F20                 add     ecx, 5Ch ; '\'
.text:00010F23                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00010F28                 mov     byte ptr [ebp+var_4], 2
.text:00010F2C                 mov     ecx, [ebp+var_10]
.text:00010F2F                 add     ecx, 68h ; 'h'
.text:00010F32                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00010F37                 mov     byte ptr [ebp+var_4], 3
.text:00010F3B                 mov     ecx, [ebp+var_10]
.text:00010F3E                 add     ecx, 74h ; 't'
.text:00010F41                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00010F46                 mov     byte ptr [ebp+var_4], 4
.text:00010F4A                 mov     ecx, [ebp+var_10]
.text:00010F4D                 add     ecx, 80h ; 'Ç'
.text:00010F53                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00010F58                 mov     byte ptr [ebp+var_4], 5
.text:00010F5C                 mov     ecx, [ebp+var_10]
.text:00010F5F                 mov     dword ptr [ecx+90h], 0
.text:00010F69                 mov     ecx, [ebp+var_10]
.text:00010F6C                 add     ecx, 94h ; 'ö'
.text:00010F72                 call    ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(void)
.text:00010F77                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00010F7E                 mov     eax, [ebp+var_10]
.text:00010F81                 mov     ecx, [ebp+var_C]
.text:00010F84                 mov     large fs:0, ecx
.text:00010F8B                 pop     ecx
.text:00010F8C                 add     esp, 10h
.text:00010F8F                 cmp     ebp, esp
.text:00010F91                 call    __RTC_CheckEsp
.text:00010F96                 mov     esp, ebp
.text:00010F98                 pop     ebp
.text:00010F99                 retn
.text:00010F99 ??0COpenCallbackImp@@QAE@XZ endp
.text:00010F99
.text:00010F99 ; ---------------------------------------------------------------------------
.text:00010F9A                 align 4
.text:00010F9A _text           ends
.text:00010F9A
.text$x:00010F9C ; ===========================================================================
.text$x:00010F9C
.text$x:00010F9C ; Segment type: Pure code
.text$x:00010F9C ; Segment permissions: Read/Execute
.text$x:00010F9C _text$x         segment para public 'CODE' use32
.text$x:00010F9C                 assume cs:_text$x
.text$x:00010F9C                 ;org 10F9Ch
.text$x:00010F9C ; COMDAT (pick associative to section at 10E74)
.text$x:00010F9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00010F9C
.text$x:00010F9C ; =============== S U B R O U T I N E =======================================
.text$x:00010F9C
.text$x:00010F9C
.text$x:00010F9C __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$0 proc near
.text$x:00010F9C                                         ; DATA XREF: .xdata$x:0001107Co
.text$x:00010F9C                 mov     ecx, [ebp-10h]
.text$x:00010F9F                 add     ecx, 14h        ; this
.text$x:00010FA2                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00010FA2 __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$0 endp
.text$x:00010FA2
.text$x:00010FA7
.text$x:00010FA7 ; =============== S U B R O U T I N E =======================================
.text$x:00010FA7
.text$x:00010FA7
.text$x:00010FA7 __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$1 proc near
.text$x:00010FA7                                         ; DATA XREF: .xdata$x:00011084o
.text$x:00010FA7                 mov     ecx, [ebp-10h]
.text$x:00010FAA                 add     ecx, 20h ; ' '  ; this
.text$x:00010FAD                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00010FAD __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$1 endp
.text$x:00010FAD
.text$x:00010FB2
.text$x:00010FB2 ; =============== S U B R O U T I N E =======================================
.text$x:00010FB2
.text$x:00010FB2
.text$x:00010FB2 __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$2 proc near
.text$x:00010FB2                                         ; DATA XREF: .xdata$x:0001108Co
.text$x:00010FB2                 mov     ecx, [ebp-10h]
.text$x:00010FB5                 add     ecx, 5Ch ; '\'  ; this
.text$x:00010FB8                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00010FB8 __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$2 endp
.text$x:00010FB8
.text$x:00010FBD
.text$x:00010FBD ; =============== S U B R O U T I N E =======================================
.text$x:00010FBD
.text$x:00010FBD
.text$x:00010FBD __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$3 proc near
.text$x:00010FBD                                         ; DATA XREF: .xdata$x:00011094o
.text$x:00010FBD                 mov     ecx, [ebp-10h]
.text$x:00010FC0                 add     ecx, 68h ; 'h'
.text$x:00010FC3                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00010FC3 __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$3 endp
.text$x:00010FC3
.text$x:00010FC8
.text$x:00010FC8 ; =============== S U B R O U T I N E =======================================
.text$x:00010FC8
.text$x:00010FC8
.text$x:00010FC8 __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$4 proc near
.text$x:00010FC8                                         ; DATA XREF: .xdata$x:0001109Co
.text$x:00010FC8                 mov     ecx, [ebp-10h]
.text$x:00010FCB                 add     ecx, 74h ; 't'
.text$x:00010FCE                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00010FCE __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$4 endp
.text$x:00010FCE
.text$x:00010FD3
.text$x:00010FD3 ; =============== S U B R O U T I N E =======================================
.text$x:00010FD3
.text$x:00010FD3
.text$x:00010FD3 __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$5 proc near
.text$x:00010FD3                                         ; DATA XREF: .xdata$x:000110A4o
.text$x:00010FD3                 mov     ecx, [ebp-10h]
.text$x:00010FD6                 add     ecx, 80h ; 'Ç'
.text$x:00010FDC                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00010FDC __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$5 endp
.text$x:00010FDC
.text$x:00010FE1
.text$x:00010FE1 ; =============== S U B R O U T I N E =======================================
.text$x:00010FE1
.text$x:00010FE1
.text$x:00010FE1 __ehhandler$??0COpenCallbackImp@@QAE@XZ proc near
.text$x:00010FE1                                         ; DATA XREF: COpenCallbackImp::COpenCallbackImp(void)+5o
.text$x:00010FE1
.text$x:00010FE1 arg_4           = dword ptr  8
.text$x:00010FE1
.text$x:00010FE1                 mov     edx, [esp+arg_4]
.text$x:00010FE5                 lea     eax, [edx+0Ch]
.text$x:00010FE8                 mov     ecx, [edx-8]
.text$x:00010FEB                 xor     ecx, eax
.text$x:00010FED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00010FF2                 mov     eax, offset __ehfuncinfo$??0COpenCallbackImp@@QAE@XZ
.text$x:00010FF7                 jmp     ___CxxFrameHandler3
.text$x:00010FF7 __ehhandler$??0COpenCallbackImp@@QAE@XZ endp
.text$x:00010FF7
.text$x:00010FF7 _text$x         ends
.text$x:00010FF7
.rdata:00010FFC ; ===========================================================================
.rdata:00010FFC
.rdata:00010FFC ; Segment type: Pure data
.rdata:00010FFC ; Segment permissions: Read
.rdata:00010FFC _rdata          segment dword public 'DATA' use32
.rdata:00010FFC                 assume cs:_rdata
.rdata:00010FFC                 ;org 10FFCh
.rdata:00010FFC ; COMDAT (pick largest)
.rdata:00010FFC                 dd offset ??_R4COpenCallbackImp@@6BICryptoGetTextPassword@@@ ; const COpenCallbackImp::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword'}
.rdata:00011000                 public ??_7COpenCallbackImp@@6BICryptoGetTextPassword@@@
.rdata:00011000 ; const COpenCallbackImp::`vftable'{for `ICryptoGetTextPassword'}
.rdata:00011000 ??_7COpenCallbackImp@@6BICryptoGetTextPassword@@@ dd offset ?QueryInterface@COpenCallbackImp@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00011000                                         ; DATA XREF: COpenCallbackImp::COpenCallbackImp(void)+81o
.rdata:00011000                                         ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00011004                 dd offset ?AddRef@COpenCallbackImp@@WM@AGKXZ ; [thunk]:COpenCallbackImp::AddRef`adjustor{12}' (void)
.rdata:00011008                 dd offset ?Release@COpenCallbackImp@@WM@AGKXZ ; [thunk]:COpenCallbackImp::Release`adjustor{12}' (void)
.rdata:0001100C                 dd offset ?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z ; COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)
.rdata:0001100C _rdata          ends
.rdata:0001100C
.rdata:00011010 ; ===========================================================================
.rdata:00011010
.rdata:00011010 ; Segment type: Pure data
.rdata:00011010 ; Segment permissions: Read
.rdata:00011010 _rdata          segment dword public 'DATA' use32
.rdata:00011010                 assume cs:_rdata
.rdata:00011010                 ;org 11010h
.rdata:00011010 ; COMDAT (pick largest)
.rdata:00011010                 dd offset ??_R4COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@ ; const COpenCallbackImp::`RTTI Complete Object Locator'{for `IArchiveOpenSetSubArchiveName'}
.rdata:00011014                 public ??_7COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@
.rdata:00011014 ; const COpenCallbackImp::`vftable'{for `IArchiveOpenSetSubArchiveName'}
.rdata:00011014 ??_7COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@ dd offset ?QueryInterface@COpenCallbackImp@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00011014                                         ; DATA XREF: COpenCallbackImp::COpenCallbackImp(void)+77o
.rdata:00011014                                         ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00011018                 dd offset ?AddRef@COpenCallbackImp@@W7AGKXZ ; [thunk]:COpenCallbackImp::AddRef`adjustor{8}' (void)
.rdata:0001101C                 dd offset ?Release@COpenCallbackImp@@W7AGKXZ ; [thunk]:COpenCallbackImp::Release`adjustor{8}' (void)
.rdata:00011020                 dd offset ?SetSubArchiveName@COpenCallbackImp@@UAGJPB_W@Z ; COpenCallbackImp::SetSubArchiveName(wchar_t const *)
.rdata:00011020 _rdata          ends
.rdata:00011020
.rdata:00011024 ; ===========================================================================
.rdata:00011024
.rdata:00011024 ; Segment type: Pure data
.rdata:00011024 ; Segment permissions: Read
.rdata:00011024 _rdata          segment dword public 'DATA' use32
.rdata:00011024                 assume cs:_rdata
.rdata:00011024                 ;org 11024h
.rdata:00011024 ; COMDAT (pick largest)
.rdata:00011024                 dd offset ??_R4COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@ ; const COpenCallbackImp::`RTTI Complete Object Locator'{for `IArchiveOpenVolumeCallback'}
.rdata:00011028                 public ??_7COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@
.rdata:00011028 ; const COpenCallbackImp::`vftable'{for `IArchiveOpenVolumeCallback'}
.rdata:00011028 ??_7COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@ dd offset ?QueryInterface@COpenCallbackImp@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00011028                                         ; DATA XREF: COpenCallbackImp::COpenCallbackImp(void)+6Do
.rdata:00011028                                         ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0001102C                 dd offset ?AddRef@COpenCallbackImp@@W3AGKXZ ; [thunk]:COpenCallbackImp::AddRef`adjustor{4}' (void)
.rdata:00011030                 dd offset ?Release@COpenCallbackImp@@W3AGKXZ ; [thunk]:COpenCallbackImp::Release`adjustor{4}' (void)
.rdata:00011034                 dd offset ?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z ; COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)
.rdata:00011038                 dd offset ?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z ; COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)
.rdata:00011038 _rdata          ends
.rdata:00011038
.rdata:0001103C ; ===========================================================================
.rdata:0001103C
.rdata:0001103C ; Segment type: Pure data
.rdata:0001103C ; Segment permissions: Read
.rdata:0001103C _rdata          segment dword public 'DATA' use32
.rdata:0001103C                 assume cs:_rdata
.rdata:0001103C                 ;org 1103Ch
.rdata:0001103C ; COMDAT (pick largest)
.rdata:0001103C                 dd offset ??_R4COpenCallbackImp@@6BIArchiveOpenCallback@@@ ; const COpenCallbackImp::`RTTI Complete Object Locator'{for `IArchiveOpenCallback'}
.rdata:00011040                 public ??_7COpenCallbackImp@@6BIArchiveOpenCallback@@@
.rdata:00011040 ; const COpenCallbackImp::`vftable'{for `IArchiveOpenCallback'}
.rdata:00011040 ??_7COpenCallbackImp@@6BIArchiveOpenCallback@@@ dd offset ?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z
.rdata:00011040                                         ; DATA XREF: COpenCallbackImp::COpenCallbackImp(void)+64o
.rdata:00011040                                         ; COpenCallbackImp::QueryInterface(_GUID const &,void * *)
.rdata:00011044                 dd offset ?AddRef@COpenCallbackImp@@UAGKXZ ; COpenCallbackImp::AddRef(void)
.rdata:00011048                 dd offset ?Release@COpenCallbackImp@@UAGKXZ ; COpenCallbackImp::Release(void)
.rdata:0001104C                 dd offset ?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z ; COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00011050                 dd offset ?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z ; COpenCallbackImp::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00011050 _rdata          ends
.rdata:00011050
.xdata$x:00011054 ; ===========================================================================
.xdata$x:00011054
.xdata$x:00011054 ; Segment type: Pure data
.xdata$x:00011054 ; Segment permissions: Read
.xdata$x:00011054 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00011054                 assume cs:_xdata$x
.xdata$x:00011054                 ;org 11054h
.xdata$x:00011054 ; COMDAT (pick associative to section at 10E74)
.xdata$x:00011054 __ehfuncinfo$??0COpenCallbackImp@@QAE@XZ db  22h ; "
.xdata$x:00011054                                         ; DATA XREF: __ehhandler$??0COpenCallbackImp@@QAE@XZ+11o
.xdata$x:00011055                 db    5
.xdata$x:00011056                 db  93h ; ô
.xdata$x:00011057                 db  19h
.xdata$x:00011058                 db    6
.xdata$x:00011059                 db    0
.xdata$x:0001105A                 db    0
.xdata$x:0001105B                 db    0
.xdata$x:0001105C                 dd offset __unwindtable$??0COpenCallbackImp@@QAE@XZ
.xdata$x:00011060                 db    0
.xdata$x:00011061                 db    0
.xdata$x:00011062                 db    0
.xdata$x:00011063                 db    0
.xdata$x:00011064                 db    0
.xdata$x:00011065                 db    0
.xdata$x:00011066                 db    0
.xdata$x:00011067                 db    0
.xdata$x:00011068                 db    0
.xdata$x:00011069                 db    0
.xdata$x:0001106A                 db    0
.xdata$x:0001106B                 db    0
.xdata$x:0001106C                 db    0
.xdata$x:0001106D                 db    0
.xdata$x:0001106E                 db    0
.xdata$x:0001106F                 db    0
.xdata$x:00011070                 db    0
.xdata$x:00011071                 db    0
.xdata$x:00011072                 db    0
.xdata$x:00011073                 db    0
.xdata$x:00011074                 db    1
.xdata$x:00011075                 db    0
.xdata$x:00011076                 db    0
.xdata$x:00011077                 db    0
.xdata$x:00011078 __unwindtable$??0COpenCallbackImp@@QAE@XZ db 0FFh
.xdata$x:00011078                                         ; DATA XREF: .xdata$x:0001105Co
.xdata$x:00011079                 db 0FFh
.xdata$x:0001107A                 db 0FFh
.xdata$x:0001107B                 db 0FFh
.xdata$x:0001107C                 dd offset __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$0
.xdata$x:00011080                 db    0
.xdata$x:00011081                 db    0
.xdata$x:00011082                 db    0
.xdata$x:00011083                 db    0
.xdata$x:00011084                 dd offset __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$1
.xdata$x:00011088                 db    1
.xdata$x:00011089                 db    0
.xdata$x:0001108A                 db    0
.xdata$x:0001108B                 db    0
.xdata$x:0001108C                 dd offset __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$2
.xdata$x:00011090                 db    2
.xdata$x:00011091                 db    0
.xdata$x:00011092                 db    0
.xdata$x:00011093                 db    0
.xdata$x:00011094                 dd offset __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$3
.xdata$x:00011098                 db    3
.xdata$x:00011099                 db    0
.xdata$x:0001109A                 db    0
.xdata$x:0001109B                 db    0
.xdata$x:0001109C                 dd offset __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$4
.xdata$x:000110A0                 db    4
.xdata$x:000110A1                 db    0
.xdata$x:000110A2                 db    0
.xdata$x:000110A3                 db    0
.xdata$x:000110A4                 dd offset __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$5
.xdata$x:000110A4 _xdata$x        ends
.xdata$x:000110A4
.rdata$r:000110A8 ; ===========================================================================
.rdata$r:000110A8
.rdata$r:000110A8 ; Segment type: Pure data
.rdata$r:000110A8 ; Segment permissions: Read
.rdata$r:000110A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000110A8                 assume cs:_rdata$r
.rdata$r:000110A8                 ;org 110A8h
.rdata$r:000110A8 ; COMDAT (pick any)
.rdata$r:000110A8                 public ??_R4COpenCallbackImp@@6BIArchiveOpenCallback@@@
.rdata$r:000110A8 ; const COpenCallbackImp::`RTTI Complete Object Locator'{for `IArchiveOpenCallback'}
.rdata$r:000110A8 ??_R4COpenCallbackImp@@6BIArchiveOpenCallback@@@ db    0
.rdata$r:000110A8                                         ; DATA XREF: .rdata:0001103Co
.rdata$r:000110A9                 db    0
.rdata$r:000110AA                 db    0
.rdata$r:000110AB                 db    0
.rdata$r:000110AC                 db    0
.rdata$r:000110AD                 db    0
.rdata$r:000110AE                 db    0
.rdata$r:000110AF                 db    0
.rdata$r:000110B0                 db    0
.rdata$r:000110B1                 db    0
.rdata$r:000110B2                 db    0
.rdata$r:000110B3                 db    0
.rdata$r:000110B4                 dd offset ??_R0?AVCOpenCallbackImp@@@8 ; COpenCallbackImp `RTTI Type Descriptor'
.rdata$r:000110B8                 dd offset ??_R3COpenCallbackImp@@8 ; COpenCallbackImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000110B8 _rdata$r        ends
.rdata$r:000110B8
.data:000110BC ; ===========================================================================
.data:000110BC
.data:000110BC ; Segment type: Pure data
.data:000110BC ; Segment permissions: Read/Write
.data:000110BC _data           segment dword public 'DATA' use32
.data:000110BC                 assume cs:_data
.data:000110BC                 ;org 110BCh
.data:000110BC ; COMDAT (pick any)
.data:000110BC                 public ??_R0?AVCOpenCallbackImp@@@8
.data:000110BC ; class COpenCallbackImp `RTTI Type Descriptor'
.data:000110BC ??_R0?AVCOpenCallbackImp@@@8 dd offset ??_7type_info@@6B@
.data:000110BC                                         ; DATA XREF: .rdata$r:000110B4o
.data:000110BC                                         ; .rdata$r:COpenCallbackImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000110BC                                         ; const type_info::`vftable'
.data:000110C0                 db    0
.data:000110C1                 db    0
.data:000110C2                 db    0
.data:000110C3                 db    0
.data:000110C4                 db  2Eh ; .
.data:000110C5                 db  3Fh ; ?
.data:000110C6                 db  41h ; A
.data:000110C7                 db  56h ; V
.data:000110C8                 db  43h ; C
.data:000110C9                 db  4Fh ; O
.data:000110CA                 db  70h ; p
.data:000110CB                 db  65h ; e
.data:000110CC                 db  6Eh ; n
.data:000110CD                 db  43h ; C
.data:000110CE                 db  61h ; a
.data:000110CF                 db  6Ch ; l
.data:000110D0                 db  6Ch ; l
.data:000110D1                 db  62h ; b
.data:000110D2                 db  61h ; a
.data:000110D3                 db  63h ; c
.data:000110D4                 db  6Bh ; k
.data:000110D5                 db  49h ; I
.data:000110D6                 db  6Dh ; m
.data:000110D7                 db  70h ; p
.data:000110D8                 db  40h ; @
.data:000110D9                 db  40h ; @
.data:000110DA                 db    0
.data:000110DB                 align 4
.data:000110DB _data           ends
.data:000110DB
.rdata$r:000110DC ; ===========================================================================
.rdata$r:000110DC
.rdata$r:000110DC ; Segment type: Pure data
.rdata$r:000110DC ; Segment permissions: Read
.rdata$r:000110DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000110DC                 assume cs:_rdata$r
.rdata$r:000110DC                 ;org 110DCh
.rdata$r:000110DC ; COMDAT (pick any)
.rdata$r:000110DC                 public ??_R3COpenCallbackImp@@8
.rdata$r:000110DC ; COpenCallbackImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000110DC ??_R3COpenCallbackImp@@8 db    0        ; DATA XREF: .rdata$r:000110B8o
.rdata$r:000110DC                                         ; .rdata$r:00011130o ...
.rdata$r:000110DD                 db    0
.rdata$r:000110DE                 db    0
.rdata$r:000110DF                 db    0
.rdata$r:000110E0                 db    1
.rdata$r:000110E1                 db    0
.rdata$r:000110E2                 db    0
.rdata$r:000110E3                 db    0
.rdata$r:000110E4                 db  0Ah
.rdata$r:000110E5                 db    0
.rdata$r:000110E6                 db    0
.rdata$r:000110E7                 db    0
.rdata$r:000110E8                 dd offset ??_R2COpenCallbackImp@@8 ; COpenCallbackImp::`RTTI Base Class Array'
.rdata$r:000110E8 _rdata$r        ends
.rdata$r:000110E8
.rdata$r:000110EC ; ===========================================================================
.rdata$r:000110EC
.rdata$r:000110EC ; Segment type: Pure data
.rdata$r:000110EC ; Segment permissions: Read
.rdata$r:000110EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000110EC                 assume cs:_rdata$r
.rdata$r:000110EC                 ;org 110ECh
.rdata$r:000110EC ; COMDAT (pick any)
.rdata$r:000110EC                 public ??_R2COpenCallbackImp@@8
.rdata$r:000110EC ; COpenCallbackImp::`RTTI Base Class Array'
.rdata$r:000110EC ??_R2COpenCallbackImp@@8 dd offset ??_R1A@?0A@EA@COpenCallbackImp@@8
.rdata$r:000110EC                                         ; DATA XREF: .rdata$r:000110E8o
.rdata$r:000110EC                                         ; COpenCallbackImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000110F0                 dd offset ??_R1A@?0A@EA@IArchiveOpenCallback@@8 ; IArchiveOpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000110F4                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000110F8                 dd offset ??_R13?0A@EA@IArchiveOpenVolumeCallback@@8 ; IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000110FC                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00011100                 dd offset ??_R17?0A@EA@IArchiveOpenSetSubArchiveName@@8 ; IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00011104                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00011108                 dd offset ??_R1M@?0A@EA@ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:0001110C                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00011110                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00011114                 db    0
.rdata$r:00011115                 align 4
.rdata$r:00011115 _rdata$r        ends
.rdata$r:00011115
.rdata$r:00011118 ; ===========================================================================
.rdata$r:00011118
.rdata$r:00011118 ; Segment type: Pure data
.rdata$r:00011118 ; Segment permissions: Read
.rdata$r:00011118 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011118                 assume cs:_rdata$r
.rdata$r:00011118                 ;org 11118h
.rdata$r:00011118 ; COMDAT (pick any)
.rdata$r:00011118                 public ??_R1A@?0A@EA@COpenCallbackImp@@8
.rdata$r:00011118 ; COpenCallbackImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011118 ??_R1A@?0A@EA@COpenCallbackImp@@8 dd offset ??_R0?AVCOpenCallbackImp@@@8
.rdata$r:00011118                                         ; DATA XREF: .rdata$r:COpenCallbackImp::`RTTI Base Class Array'o
.rdata$r:00011118                                         ; COpenCallbackImp `RTTI Type Descriptor'
.rdata$r:0001111C                 db    9
.rdata$r:0001111D                 db    0
.rdata$r:0001111E                 db    0
.rdata$r:0001111F                 db    0
.rdata$r:00011120                 db    0
.rdata$r:00011121                 db    0
.rdata$r:00011122                 db    0
.rdata$r:00011123                 db    0
.rdata$r:00011124                 db 0FFh
.rdata$r:00011125                 db 0FFh
.rdata$r:00011126                 db 0FFh
.rdata$r:00011127                 db 0FFh
.rdata$r:00011128                 db    0
.rdata$r:00011129                 db    0
.rdata$r:0001112A                 db    0
.rdata$r:0001112B                 db    0
.rdata$r:0001112C                 db  40h ; @
.rdata$r:0001112D                 db    0
.rdata$r:0001112E                 db    0
.rdata$r:0001112F                 db    0
.rdata$r:00011130                 dd offset ??_R3COpenCallbackImp@@8 ; COpenCallbackImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011130 _rdata$r        ends
.rdata$r:00011130
.rdata$r:00011134 ; ===========================================================================
.rdata$r:00011134
.rdata$r:00011134 ; Segment type: Pure data
.rdata$r:00011134 ; Segment permissions: Read
.rdata$r:00011134 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011134                 assume cs:_rdata$r
.rdata$r:00011134                 ;org 11134h
.rdata$r:00011134 ; COMDAT (pick any)
.rdata$r:00011134                 public ??_R13?0A@EA@IArchiveOpenVolumeCallback@@8
.rdata$r:00011134 ; IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00011134 ??_R13?0A@EA@IArchiveOpenVolumeCallback@@8 dd offset ??_R0?AUIArchiveOpenVolumeCallback@@@8
.rdata$r:00011134                                         ; DATA XREF: .rdata$r:000110F8o
.rdata$r:00011134                                         ; IArchiveOpenVolumeCallback `RTTI Type Descriptor'
.rdata$r:00011138                 db    1
.rdata$r:00011139                 db    0
.rdata$r:0001113A                 db    0
.rdata$r:0001113B                 db    0
.rdata$r:0001113C                 db    4
.rdata$r:0001113D                 db    0
.rdata$r:0001113E                 db    0
.rdata$r:0001113F                 db    0
.rdata$r:00011140                 db 0FFh
.rdata$r:00011141                 db 0FFh
.rdata$r:00011142                 db 0FFh
.rdata$r:00011143                 db 0FFh
.rdata$r:00011144                 db    0
.rdata$r:00011145                 db    0
.rdata$r:00011146                 db    0
.rdata$r:00011147                 db    0
.rdata$r:00011148                 db  40h ; @
.rdata$r:00011149                 db    0
.rdata$r:0001114A                 db    0
.rdata$r:0001114B                 db    0
.rdata$r:0001114C                 dd offset ??_R3IArchiveOpenVolumeCallback@@8 ; IArchiveOpenVolumeCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001114C _rdata$r        ends
.rdata$r:0001114C
.data:00011150 ; ===========================================================================
.data:00011150
.data:00011150 ; Segment type: Pure data
.data:00011150 ; Segment permissions: Read/Write
.data:00011150 _data           segment dword public 'DATA' use32
.data:00011150                 assume cs:_data
.data:00011150                 ;org 11150h
.data:00011150 ; COMDAT (pick any)
.data:00011150                 public ??_R0?AUIArchiveOpenVolumeCallback@@@8
.data:00011150 ; struct IArchiveOpenVolumeCallback `RTTI Type Descriptor'
.data:00011150 ??_R0?AUIArchiveOpenVolumeCallback@@@8 dd offset ??_7type_info@@6B@
.data:00011150                                         ; DATA XREF: .rdata$r:IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00011150                                         ; .rdata$r:IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00011150                                         ; const type_info::`vftable'
.data:00011154                 align 8
.data:00011158 a_?auiarchiveop db '.?AUIArchiveOpenVolumeCallback@@',0
.data:00011179                 align 4
.data:00011179 _data           ends
.data:00011179
.rdata$r:0001117C ; ===========================================================================
.rdata$r:0001117C
.rdata$r:0001117C ; Segment type: Pure data
.rdata$r:0001117C ; Segment permissions: Read
.rdata$r:0001117C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001117C                 assume cs:_rdata$r
.rdata$r:0001117C                 ;org 1117Ch
.rdata$r:0001117C ; COMDAT (pick any)
.rdata$r:0001117C                 public ??_R3IArchiveOpenVolumeCallback@@8
.rdata$r:0001117C ; IArchiveOpenVolumeCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001117C ??_R3IArchiveOpenVolumeCallback@@8 db    0 ; DATA XREF: .rdata$r:0001114Co
.rdata$r:0001117C                                         ; .rdata$r:000111B0o ...
.rdata$r:0001117D                 db    0
.rdata$r:0001117E                 db    0
.rdata$r:0001117F                 db    0
.rdata$r:00011180                 db    0
.rdata$r:00011181                 db    0
.rdata$r:00011182                 db    0
.rdata$r:00011183                 db    0
.rdata$r:00011184                 db    2
.rdata$r:00011185                 db    0
.rdata$r:00011186                 db    0
.rdata$r:00011187                 db    0
.rdata$r:00011188                 dd offset ??_R2IArchiveOpenVolumeCallback@@8 ; IArchiveOpenVolumeCallback::`RTTI Base Class Array'
.rdata$r:00011188 _rdata$r        ends
.rdata$r:00011188
.rdata$r:0001118C ; ===========================================================================
.rdata$r:0001118C
.rdata$r:0001118C ; Segment type: Pure data
.rdata$r:0001118C ; Segment permissions: Read
.rdata$r:0001118C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001118C                 assume cs:_rdata$r
.rdata$r:0001118C                 ;org 1118Ch
.rdata$r:0001118C ; COMDAT (pick any)
.rdata$r:0001118C                 public ??_R2IArchiveOpenVolumeCallback@@8
.rdata$r:0001118C ; IArchiveOpenVolumeCallback::`RTTI Base Class Array'
.rdata$r:0001118C ??_R2IArchiveOpenVolumeCallback@@8 dd offset ??_R1A@?0A@EA@IArchiveOpenVolumeCallback@@8
.rdata$r:0001118C                                         ; DATA XREF: .rdata$r:00011188o
.rdata$r:0001118C                                         ; IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011190                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011194                 db    0
.rdata$r:00011195                 align 4
.rdata$r:00011195 _rdata$r        ends
.rdata$r:00011195
.rdata$r:00011198 ; ===========================================================================
.rdata$r:00011198
.rdata$r:00011198 ; Segment type: Pure data
.rdata$r:00011198 ; Segment permissions: Read
.rdata$r:00011198 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011198                 assume cs:_rdata$r
.rdata$r:00011198                 ;org 11198h
.rdata$r:00011198 ; COMDAT (pick any)
.rdata$r:00011198                 public ??_R1A@?0A@EA@IArchiveOpenVolumeCallback@@8
.rdata$r:00011198 ; IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011198 ??_R1A@?0A@EA@IArchiveOpenVolumeCallback@@8 dd offset ??_R0?AUIArchiveOpenVolumeCallback@@@8
.rdata$r:00011198                                         ; DATA XREF: .rdata$r:IArchiveOpenVolumeCallback::`RTTI Base Class Array'o
.rdata$r:00011198                                         ; IArchiveOpenVolumeCallback `RTTI Type Descriptor'
.rdata$r:0001119C                 db    1
.rdata$r:0001119D                 db    0
.rdata$r:0001119E                 db    0
.rdata$r:0001119F                 db    0
.rdata$r:000111A0                 db    0
.rdata$r:000111A1                 db    0
.rdata$r:000111A2                 db    0
.rdata$r:000111A3                 db    0
.rdata$r:000111A4                 db 0FFh
.rdata$r:000111A5                 db 0FFh
.rdata$r:000111A6                 db 0FFh
.rdata$r:000111A7                 db 0FFh
.rdata$r:000111A8                 db    0
.rdata$r:000111A9                 db    0
.rdata$r:000111AA                 db    0
.rdata$r:000111AB                 db    0
.rdata$r:000111AC                 db  40h ; @
.rdata$r:000111AD                 db    0
.rdata$r:000111AE                 db    0
.rdata$r:000111AF                 db    0
.rdata$r:000111B0                 dd offset ??_R3IArchiveOpenVolumeCallback@@8 ; IArchiveOpenVolumeCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000111B0 _rdata$r        ends
.rdata$r:000111B0
.rdata$r:000111B4 ; ===========================================================================
.rdata$r:000111B4
.rdata$r:000111B4 ; Segment type: Pure data
.rdata$r:000111B4 ; Segment permissions: Read
.rdata$r:000111B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000111B4                 assume cs:_rdata$r
.rdata$r:000111B4                 ;org 111B4h
.rdata$r:000111B4 ; COMDAT (pick any)
.rdata$r:000111B4                 public ??_R17?0A@EA@IArchiveOpenSetSubArchiveName@@8
.rdata$r:000111B4 ; IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000111B4 ??_R17?0A@EA@IArchiveOpenSetSubArchiveName@@8 dd offset ??_R0?AUIArchiveOpenSetSubArchiveName@@@8
.rdata$r:000111B4                                         ; DATA XREF: .rdata$r:00011100o
.rdata$r:000111B4                                         ; IArchiveOpenSetSubArchiveName `RTTI Type Descriptor'
.rdata$r:000111B8                 db    1
.rdata$r:000111B9                 db    0
.rdata$r:000111BA                 db    0
.rdata$r:000111BB                 db    0
.rdata$r:000111BC                 db    8
.rdata$r:000111BD                 db    0
.rdata$r:000111BE                 db    0
.rdata$r:000111BF                 db    0
.rdata$r:000111C0                 db 0FFh
.rdata$r:000111C1                 db 0FFh
.rdata$r:000111C2                 db 0FFh
.rdata$r:000111C3                 db 0FFh
.rdata$r:000111C4                 db    0
.rdata$r:000111C5                 db    0
.rdata$r:000111C6                 db    0
.rdata$r:000111C7                 db    0
.rdata$r:000111C8                 db  40h ; @
.rdata$r:000111C9                 db    0
.rdata$r:000111CA                 db    0
.rdata$r:000111CB                 db    0
.rdata$r:000111CC                 dd offset ??_R3IArchiveOpenSetSubArchiveName@@8 ; IArchiveOpenSetSubArchiveName::`RTTI Class Hierarchy Descriptor'
.rdata$r:000111CC _rdata$r        ends
.rdata$r:000111CC
.data:000111D0 ; ===========================================================================
.data:000111D0
.data:000111D0 ; Segment type: Pure data
.data:000111D0 ; Segment permissions: Read/Write
.data:000111D0 _data           segment dword public 'DATA' use32
.data:000111D0                 assume cs:_data
.data:000111D0                 ;org 111D0h
.data:000111D0 ; COMDAT (pick any)
.data:000111D0                 public ??_R0?AUIArchiveOpenSetSubArchiveName@@@8
.data:000111D0 ; struct IArchiveOpenSetSubArchiveName `RTTI Type Descriptor'
.data:000111D0 ??_R0?AUIArchiveOpenSetSubArchiveName@@@8 dd offset ??_7type_info@@6B@
.data:000111D0                                         ; DATA XREF: .rdata$r:IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000111D0                                         ; .rdata$r:IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000111D0                                         ; const type_info::`vftable'
.data:000111D4                 align 8
.data:000111D8 a_?auiarchive_0 db '.?AUIArchiveOpenSetSubArchiveName@@',0
.data:000111D8 _data           ends
.data:000111D8
.rdata$r:000111FC ; ===========================================================================
.rdata$r:000111FC
.rdata$r:000111FC ; Segment type: Pure data
.rdata$r:000111FC ; Segment permissions: Read
.rdata$r:000111FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000111FC                 assume cs:_rdata$r
.rdata$r:000111FC                 ;org 111FCh
.rdata$r:000111FC ; COMDAT (pick any)
.rdata$r:000111FC                 public ??_R3IArchiveOpenSetSubArchiveName@@8
.rdata$r:000111FC ; IArchiveOpenSetSubArchiveName::`RTTI Class Hierarchy Descriptor'
.rdata$r:000111FC ??_R3IArchiveOpenSetSubArchiveName@@8 db    0
.rdata$r:000111FC                                         ; DATA XREF: .rdata$r:000111CCo
.rdata$r:000111FC                                         ; .rdata$r:00011230o ...
.rdata$r:000111FD                 db    0
.rdata$r:000111FE                 db    0
.rdata$r:000111FF                 db    0
.rdata$r:00011200                 db    0
.rdata$r:00011201                 db    0
.rdata$r:00011202                 db    0
.rdata$r:00011203                 db    0
.rdata$r:00011204                 db    2
.rdata$r:00011205                 db    0
.rdata$r:00011206                 db    0
.rdata$r:00011207                 db    0
.rdata$r:00011208                 dd offset ??_R2IArchiveOpenSetSubArchiveName@@8 ; IArchiveOpenSetSubArchiveName::`RTTI Base Class Array'
.rdata$r:00011208 _rdata$r        ends
.rdata$r:00011208
.rdata$r:0001120C ; ===========================================================================
.rdata$r:0001120C
.rdata$r:0001120C ; Segment type: Pure data
.rdata$r:0001120C ; Segment permissions: Read
.rdata$r:0001120C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001120C                 assume cs:_rdata$r
.rdata$r:0001120C                 ;org 1120Ch
.rdata$r:0001120C ; COMDAT (pick any)
.rdata$r:0001120C                 public ??_R2IArchiveOpenSetSubArchiveName@@8
.rdata$r:0001120C ; IArchiveOpenSetSubArchiveName::`RTTI Base Class Array'
.rdata$r:0001120C ??_R2IArchiveOpenSetSubArchiveName@@8 dd offset ??_R1A@?0A@EA@IArchiveOpenSetSubArchiveName@@8
.rdata$r:0001120C                                         ; DATA XREF: .rdata$r:00011208o
.rdata$r:0001120C                                         ; IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011210                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011214                 db    0
.rdata$r:00011215                 align 4
.rdata$r:00011215 _rdata$r        ends
.rdata$r:00011215
.rdata$r:00011218 ; ===========================================================================
.rdata$r:00011218
.rdata$r:00011218 ; Segment type: Pure data
.rdata$r:00011218 ; Segment permissions: Read
.rdata$r:00011218 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011218                 assume cs:_rdata$r
.rdata$r:00011218                 ;org 11218h
.rdata$r:00011218 ; COMDAT (pick any)
.rdata$r:00011218                 public ??_R1A@?0A@EA@IArchiveOpenSetSubArchiveName@@8
.rdata$r:00011218 ; IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011218 ??_R1A@?0A@EA@IArchiveOpenSetSubArchiveName@@8 dd offset ??_R0?AUIArchiveOpenSetSubArchiveName@@@8
.rdata$r:00011218                                         ; DATA XREF: .rdata$r:IArchiveOpenSetSubArchiveName::`RTTI Base Class Array'o
.rdata$r:00011218                                         ; IArchiveOpenSetSubArchiveName `RTTI Type Descriptor'
.rdata$r:0001121C                 db    1
.rdata$r:0001121D                 db    0
.rdata$r:0001121E                 db    0
.rdata$r:0001121F                 db    0
.rdata$r:00011220                 db    0
.rdata$r:00011221                 db    0
.rdata$r:00011222                 db    0
.rdata$r:00011223                 db    0
.rdata$r:00011224                 db 0FFh
.rdata$r:00011225                 db 0FFh
.rdata$r:00011226                 db 0FFh
.rdata$r:00011227                 db 0FFh
.rdata$r:00011228                 db    0
.rdata$r:00011229                 db    0
.rdata$r:0001122A                 db    0
.rdata$r:0001122B                 db    0
.rdata$r:0001122C                 db  40h ; @
.rdata$r:0001122D                 db    0
.rdata$r:0001122E                 db    0
.rdata$r:0001122F                 db    0
.rdata$r:00011230                 dd offset ??_R3IArchiveOpenSetSubArchiveName@@8 ; IArchiveOpenSetSubArchiveName::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011230 _rdata$r        ends
.rdata$r:00011230
.rdata$r:00011234 ; ===========================================================================
.rdata$r:00011234
.rdata$r:00011234 ; Segment type: Pure data
.rdata$r:00011234 ; Segment permissions: Read
.rdata$r:00011234 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011234                 assume cs:_rdata$r
.rdata$r:00011234                 ;org 11234h
.rdata$r:00011234 ; COMDAT (pick any)
.rdata$r:00011234                 public ??_R1M@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:00011234 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00011234 ??_R1M@?0A@EA@ICryptoGetTextPassword@@8 dd offset ??_R0?AUICryptoGetTextPassword@@@8
.rdata$r:00011234                                         ; DATA XREF: .rdata$r:00011108o
.rdata$r:00011234                                         ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:00011238                 db    1
.rdata$r:00011239                 db    0
.rdata$r:0001123A                 db    0
.rdata$r:0001123B                 db    0
.rdata$r:0001123C                 db  0Ch
.rdata$r:0001123D                 db    0
.rdata$r:0001123E                 db    0
.rdata$r:0001123F                 db    0
.rdata$r:00011240                 db 0FFh
.rdata$r:00011241                 db 0FFh
.rdata$r:00011242                 db 0FFh
.rdata$r:00011243                 db 0FFh
.rdata$r:00011244                 db    0
.rdata$r:00011245                 db    0
.rdata$r:00011246                 db    0
.rdata$r:00011247                 db    0
.rdata$r:00011248                 db  40h ; @
.rdata$r:00011249                 db    0
.rdata$r:0001124A                 db    0
.rdata$r:0001124B                 db    0
.rdata$r:0001124C                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001124C _rdata$r        ends
.rdata$r:0001124C
.rdata$r:00011250 ; ===========================================================================
.rdata$r:00011250
.rdata$r:00011250 ; Segment type: Pure data
.rdata$r:00011250 ; Segment permissions: Read
.rdata$r:00011250 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011250                 assume cs:_rdata$r
.rdata$r:00011250                 ;org 11250h
.rdata$r:00011250 ; COMDAT (pick any)
.rdata$r:00011250                 public ??_R4COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@
.rdata$r:00011250 ; const COpenCallbackImp::`RTTI Complete Object Locator'{for `IArchiveOpenVolumeCallback'}
.rdata$r:00011250 ??_R4COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@ db    0
.rdata$r:00011250                                         ; DATA XREF: .rdata:00011024o
.rdata$r:00011251                 db    0
.rdata$r:00011252                 db    0
.rdata$r:00011253                 db    0
.rdata$r:00011254                 db    4
.rdata$r:00011255                 db    0
.rdata$r:00011256                 db    0
.rdata$r:00011257                 db    0
.rdata$r:00011258                 db    0
.rdata$r:00011259                 db    0
.rdata$r:0001125A                 db    0
.rdata$r:0001125B                 db    0
.rdata$r:0001125C                 dd offset ??_R0?AVCOpenCallbackImp@@@8 ; COpenCallbackImp `RTTI Type Descriptor'
.rdata$r:00011260                 dd offset ??_R3COpenCallbackImp@@8 ; COpenCallbackImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011260 _rdata$r        ends
.rdata$r:00011260
.rdata$r:00011264 ; ===========================================================================
.rdata$r:00011264
.rdata$r:00011264 ; Segment type: Pure data
.rdata$r:00011264 ; Segment permissions: Read
.rdata$r:00011264 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011264                 assume cs:_rdata$r
.rdata$r:00011264                 ;org 11264h
.rdata$r:00011264 ; COMDAT (pick any)
.rdata$r:00011264                 public ??_R4COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@
.rdata$r:00011264 ; const COpenCallbackImp::`RTTI Complete Object Locator'{for `IArchiveOpenSetSubArchiveName'}
.rdata$r:00011264 ??_R4COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@ db    0
.rdata$r:00011264                                         ; DATA XREF: .rdata:00011010o
.rdata$r:00011265                 db    0
.rdata$r:00011266                 db    0
.rdata$r:00011267                 db    0
.rdata$r:00011268                 db    8
.rdata$r:00011269                 db    0
.rdata$r:0001126A                 db    0
.rdata$r:0001126B                 db    0
.rdata$r:0001126C                 db    0
.rdata$r:0001126D                 db    0
.rdata$r:0001126E                 db    0
.rdata$r:0001126F                 db    0
.rdata$r:00011270                 dd offset ??_R0?AVCOpenCallbackImp@@@8 ; COpenCallbackImp `RTTI Type Descriptor'
.rdata$r:00011274                 dd offset ??_R3COpenCallbackImp@@8 ; COpenCallbackImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011274 _rdata$r        ends
.rdata$r:00011274
.rdata$r:00011278 ; ===========================================================================
.rdata$r:00011278
.rdata$r:00011278 ; Segment type: Pure data
.rdata$r:00011278 ; Segment permissions: Read
.rdata$r:00011278 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011278                 assume cs:_rdata$r
.rdata$r:00011278                 ;org 11278h
.rdata$r:00011278 ; COMDAT (pick any)
.rdata$r:00011278                 public ??_R4COpenCallbackImp@@6BICryptoGetTextPassword@@@
.rdata$r:00011278 ; const COpenCallbackImp::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword'}
.rdata$r:00011278 ??_R4COpenCallbackImp@@6BICryptoGetTextPassword@@@ db    0
.rdata$r:00011278                                         ; DATA XREF: .rdata:00010FFCo
.rdata$r:00011279                 db    0
.rdata$r:0001127A                 db    0
.rdata$r:0001127B                 db    0
.rdata$r:0001127C                 db  0Ch
.rdata$r:0001127D                 db    0
.rdata$r:0001127E                 db    0
.rdata$r:0001127F                 db    0
.rdata$r:00011280                 db    0
.rdata$r:00011281                 db    0
.rdata$r:00011282                 db    0
.rdata$r:00011283                 db    0
.rdata$r:00011284                 dd offset ??_R0?AVCOpenCallbackImp@@@8 ; COpenCallbackImp `RTTI Type Descriptor'
.rdata$r:00011288                 dd offset ??_R3COpenCallbackImp@@8 ; COpenCallbackImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011288 _rdata$r        ends
.rdata$r:00011288
.text:0001128C ; ===========================================================================
.text:0001128C
.text:0001128C ; Segment type: Pure code
.text:0001128C ; Segment permissions: Read/Execute
.text:0001128C _text           segment para public 'CODE' use32
.text:0001128C                 assume cs:_text
.text:0001128C                 ;org 1128Ch
.text:0001128C ; COMDAT (pick any)
.text:0001128C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001128C
.text:0001128C ; =============== S U B R O U T I N E =======================================
.text:0001128C
.text:0001128C ; Attributes: bp-based frame
.text:0001128C
.text:0001128C ; __int32 __stdcall COpenCallbackImp::QueryInterface(COpenCallbackImp *this, const struct _GUID *Buf1, void **)
.text:0001128C                 public ?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z
.text:0001128C ?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0001128C                                         ; CODE XREF: [thunk]:COpenCallbackImp::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0001128C                                         ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:0001128C
.text:0001128C var_10          = dword ptr -10h
.text:0001128C var_C           = dword ptr -0Ch
.text:0001128C var_8           = dword ptr -8
.text:0001128C var_4           = dword ptr -4
.text:0001128C this            = dword ptr  8
.text:0001128C Buf1            = dword ptr  0Ch
.text:0001128C arg_8           = dword ptr  10h
.text:0001128C
.text:0001128C                 push    ebp
.text:0001128D                 mov     ebp, esp
.text:0001128F                 sub     esp, 10h
.text:00011292                 mov     eax, 0CCCCCCCCh
.text:00011297                 mov     [ebp+var_10], eax
.text:0001129A                 mov     [ebp+var_C], eax
.text:0001129D                 mov     [ebp+var_8], eax
.text:000112A0                 mov     [ebp+var_4], eax
.text:000112A3                 mov     eax, [ebp+arg_8]
.text:000112A6                 mov     dword ptr [eax], 0
.text:000112AC                 push    offset _IID_IUnknown ; Buf2
.text:000112B1                 mov     ecx, [ebp+Buf1]
.text:000112B4                 push    ecx             ; Buf1
.text:000112B5                 call    ___@8           ; __(x,x)
.text:000112BA                 test    eax, eax
.text:000112BC                 jz      short loc_112E3
.text:000112BE                 cmp     [ebp+this], 0
.text:000112C2                 jz      short loc_112CF
.text:000112C4                 mov     edx, [ebp+this]
.text:000112C7                 add     edx, 4
.text:000112CA                 mov     [ebp+var_4], edx
.text:000112CD                 jmp     short loc_112D6
.text:000112CF ; ---------------------------------------------------------------------------
.text:000112CF
.text:000112CF loc_112CF:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+36j
.text:000112CF                 mov     [ebp+var_4], 0
.text:000112D6
.text:000112D6 loc_112D6:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+41j
.text:000112D6                 mov     eax, [ebp+arg_8]
.text:000112D9                 mov     ecx, [ebp+var_4]
.text:000112DC                 mov     [eax], ecx
.text:000112DE                 jmp     loc_11386
.text:000112E3 ; ---------------------------------------------------------------------------
.text:000112E3
.text:000112E3 loc_112E3:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+30j
.text:000112E3                 push    offset _IID_IArchiveOpenVolumeCallback ; Buf2
.text:000112E8                 mov     edx, [ebp+Buf1]
.text:000112EB                 push    edx             ; Buf1
.text:000112EC                 call    ___@8           ; __(x,x)
.text:000112F1                 test    eax, eax
.text:000112F3                 jz      short loc_11317
.text:000112F5                 cmp     [ebp+this], 0
.text:000112F9                 jz      short loc_11306
.text:000112FB                 mov     eax, [ebp+this]
.text:000112FE                 add     eax, 4
.text:00011301                 mov     [ebp+var_8], eax
.text:00011304                 jmp     short loc_1130D
.text:00011306 ; ---------------------------------------------------------------------------
.text:00011306
.text:00011306 loc_11306:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+6Dj
.text:00011306                 mov     [ebp+var_8], 0
.text:0001130D
.text:0001130D loc_1130D:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+78j
.text:0001130D                 mov     ecx, [ebp+arg_8]
.text:00011310                 mov     edx, [ebp+var_8]
.text:00011313                 mov     [ecx], edx
.text:00011315                 jmp     short loc_11386
.text:00011317 ; ---------------------------------------------------------------------------
.text:00011317
.text:00011317 loc_11317:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+67j
.text:00011317                 push    offset _IID_ICryptoGetTextPassword ; Buf2
.text:0001131C                 mov     eax, [ebp+Buf1]
.text:0001131F                 push    eax             ; Buf1
.text:00011320                 call    ___@8           ; __(x,x)
.text:00011325                 test    eax, eax
.text:00011327                 jz      short loc_1134B
.text:00011329                 cmp     [ebp+this], 0
.text:0001132D                 jz      short loc_1133A
.text:0001132F                 mov     ecx, [ebp+this]
.text:00011332                 add     ecx, 0Ch
.text:00011335                 mov     [ebp+var_C], ecx
.text:00011338                 jmp     short loc_11341
.text:0001133A ; ---------------------------------------------------------------------------
.text:0001133A
.text:0001133A loc_1133A:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+A1j
.text:0001133A                 mov     [ebp+var_C], 0
.text:00011341
.text:00011341 loc_11341:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+ACj
.text:00011341                 mov     edx, [ebp+arg_8]
.text:00011344                 mov     eax, [ebp+var_C]
.text:00011347                 mov     [edx], eax
.text:00011349                 jmp     short loc_11386
.text:0001134B ; ---------------------------------------------------------------------------
.text:0001134B
.text:0001134B loc_1134B:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+9Bj
.text:0001134B                 push    offset _IID_IArchiveOpenSetSubArchiveName ; Buf2
.text:00011350                 mov     ecx, [ebp+Buf1]
.text:00011353                 push    ecx             ; Buf1
.text:00011354                 call    ___@8           ; __(x,x)
.text:00011359                 test    eax, eax
.text:0001135B                 jz      short loc_1137F
.text:0001135D                 cmp     [ebp+this], 0
.text:00011361                 jz      short loc_1136E
.text:00011363                 mov     edx, [ebp+this]
.text:00011366                 add     edx, 8
.text:00011369                 mov     [ebp+var_10], edx
.text:0001136C                 jmp     short loc_11375
.text:0001136E ; ---------------------------------------------------------------------------
.text:0001136E
.text:0001136E loc_1136E:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+D5j
.text:0001136E                 mov     [ebp+var_10], 0
.text:00011375
.text:00011375 loc_11375:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+E0j
.text:00011375                 mov     eax, [ebp+arg_8]
.text:00011378                 mov     ecx, [ebp+var_10]
.text:0001137B                 mov     [eax], ecx
.text:0001137D                 jmp     short loc_11386
.text:0001137F ; ---------------------------------------------------------------------------
.text:0001137F
.text:0001137F loc_1137F:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+CFj
.text:0001137F                 mov     eax, 80004002h
.text:00011384                 jmp     short loc_11397
.text:00011386 ; ---------------------------------------------------------------------------
.text:00011386
.text:00011386 loc_11386:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+52j
.text:00011386                                         ; COpenCallbackImp::QueryInterface(_GUID const &,void * *)+89j ...
.text:00011386                 mov     edx, [ebp+this]
.text:00011389                 mov     eax, [edx+10h]
.text:0001138C                 add     eax, 1
.text:0001138F                 mov     ecx, [ebp+this]
.text:00011392                 mov     [ecx+10h], eax
.text:00011395                 xor     eax, eax
.text:00011397
.text:00011397 loc_11397:                              ; CODE XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *)+F8j
.text:00011397                 add     esp, 10h
.text:0001139A                 cmp     ebp, esp
.text:0001139C                 call    __RTC_CheckEsp
.text:000113A1                 mov     esp, ebp
.text:000113A3                 pop     ebp
.text:000113A4                 retn    0Ch
.text:000113A4 ?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z endp
.text:000113A4
.text:000113A4 ; ---------------------------------------------------------------------------
.text:000113A7                 align 4
.text:000113A7 _text           ends
.text:000113A7
.text:000113A8 ; ===========================================================================
.text:000113A8
.text:000113A8 ; Segment type: Pure code
.text:000113A8 ; Segment permissions: Read/Execute
.text:000113A8 _text           segment para public 'CODE' use32
.text:000113A8                 assume cs:_text
.text:000113A8                 ;org 113A8h
.text:000113A8 ; COMDAT (pick any)
.text:000113A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000113A8
.text:000113A8 ; =============== S U B R O U T I N E =======================================
.text:000113A8
.text:000113A8 ; Attributes: bp-based frame
.text:000113A8
.text:000113A8 ; unsigned __int32 __stdcall COpenCallbackImp::AddRef(COpenCallbackImp *this)
.text:000113A8                 public ?AddRef@COpenCallbackImp@@UAGKXZ
.text:000113A8 ?AddRef@COpenCallbackImp@@UAGKXZ proc near
.text:000113A8                                         ; CODE XREF: [thunk]:COpenCallbackImp::AddRef`adjustor{4}' (void)+5j
.text:000113A8                                         ; [thunk]:COpenCallbackImp::AddRef`adjustor{8}' (void)+5j ...
.text:000113A8
.text:000113A8 var_4           = dword ptr -4
.text:000113A8 this            = dword ptr  8
.text:000113A8
.text:000113A8                 push    ebp
.text:000113A9                 mov     ebp, esp
.text:000113AB                 push    ecx
.text:000113AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000113B3                 mov     eax, [ebp+this]
.text:000113B6                 mov     ecx, [eax+10h]
.text:000113B9                 add     ecx, 1
.text:000113BC                 mov     [ebp+var_4], ecx
.text:000113BF                 mov     edx, [ebp+this]
.text:000113C2                 mov     eax, [ebp+var_4]
.text:000113C5                 mov     [edx+10h], eax
.text:000113C8                 mov     eax, [ebp+var_4]
.text:000113CB                 mov     esp, ebp
.text:000113CD                 pop     ebp
.text:000113CE                 retn    4
.text:000113CE ?AddRef@COpenCallbackImp@@UAGKXZ endp
.text:000113CE
.text:000113CE ; ---------------------------------------------------------------------------
.text:000113D1                 align 4
.text:000113D1 _text           ends
.text:000113D1
.text:000113D4 ; ===========================================================================
.text:000113D4
.text:000113D4 ; Segment type: Pure code
.text:000113D4 ; Segment permissions: Read/Execute
.text:000113D4 _text           segment para public 'CODE' use32
.text:000113D4                 assume cs:_text
.text:000113D4                 ;org 113D4h
.text:000113D4 ; COMDAT (pick any)
.text:000113D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000113D4
.text:000113D4 ; =============== S U B R O U T I N E =======================================
.text:000113D4
.text:000113D4 ; Attributes: bp-based frame
.text:000113D4
.text:000113D4 ; unsigned __int32 __stdcall COpenCallbackImp::Release(COpenCallbackImp *this)
.text:000113D4                 public ?Release@COpenCallbackImp@@UAGKXZ
.text:000113D4 ?Release@COpenCallbackImp@@UAGKXZ proc near
.text:000113D4                                         ; CODE XREF: [thunk]:COpenCallbackImp::Release`adjustor{4}' (void)+5j
.text:000113D4                                         ; [thunk]:COpenCallbackImp::Release`adjustor{8}' (void)+5j ...
.text:000113D4
.text:000113D4 var_10          = dword ptr -10h
.text:000113D4 var_C           = dword ptr -0Ch
.text:000113D4 var_8           = dword ptr -8
.text:000113D4 var_4           = dword ptr -4
.text:000113D4 this            = dword ptr  8
.text:000113D4
.text:000113D4                 push    ebp
.text:000113D5                 mov     ebp, esp
.text:000113D7                 sub     esp, 10h
.text:000113DA                 mov     eax, 0CCCCCCCCh
.text:000113DF                 mov     [ebp+var_10], eax
.text:000113E2                 mov     [ebp+var_C], eax
.text:000113E5                 mov     [ebp+var_8], eax
.text:000113E8                 mov     [ebp+var_4], eax
.text:000113EB                 mov     eax, [ebp+this]
.text:000113EE                 mov     ecx, [eax+10h]
.text:000113F1                 sub     ecx, 1
.text:000113F4                 mov     [ebp+var_C], ecx
.text:000113F7                 mov     edx, [ebp+this]
.text:000113FA                 mov     eax, [ebp+var_C]
.text:000113FD                 mov     [edx+10h], eax
.text:00011400                 cmp     [ebp+var_C], 0
.text:00011404                 jz      short loc_1140E
.text:00011406                 mov     ecx, [ebp+this]
.text:00011409                 mov     eax, [ecx+10h]
.text:0001140C                 jmp     short loc_11438
.text:0001140E ; ---------------------------------------------------------------------------
.text:0001140E
.text:0001140E loc_1140E:                              ; CODE XREF: COpenCallbackImp::Release(void)+30j
.text:0001140E                 mov     edx, [ebp+this]
.text:00011411                 mov     [ebp+var_8], edx
.text:00011414                 mov     eax, [ebp+var_8]
.text:00011417                 mov     [ebp+var_4], eax
.text:0001141A                 cmp     [ebp+var_4], 0
.text:0001141E                 jz      short loc_1142F
.text:00011420                 push    1
.text:00011422                 mov     ecx, [ebp+var_4]
.text:00011425                 call    ??_GCOpenCallbackImp@@QAEPAXI@Z ; COpenCallbackImp::`scalar deleting destructor'(uint)
.text:0001142A                 mov     [ebp+var_10], eax
.text:0001142D                 jmp     short loc_11436
.text:0001142F ; ---------------------------------------------------------------------------
.text:0001142F
.text:0001142F loc_1142F:                              ; CODE XREF: COpenCallbackImp::Release(void)+4Aj
.text:0001142F                 mov     [ebp+var_10], 0
.text:00011436
.text:00011436 loc_11436:                              ; CODE XREF: COpenCallbackImp::Release(void)+59j
.text:00011436                 xor     eax, eax
.text:00011438
.text:00011438 loc_11438:                              ; CODE XREF: COpenCallbackImp::Release(void)+38j
.text:00011438                 add     esp, 10h
.text:0001143B                 cmp     ebp, esp
.text:0001143D                 call    __RTC_CheckEsp
.text:00011442                 mov     esp, ebp
.text:00011444                 pop     ebp
.text:00011445                 retn    4
.text:00011445 ?Release@COpenCallbackImp@@UAGKXZ endp
.text:00011445
.text:00011445 _text           ends
.text:00011445
.text:00011448 ; ===========================================================================
.text:00011448
.text:00011448 ; Segment type: Pure code
.text:00011448 ; Segment permissions: Read/Execute
.text:00011448 _text           segment para public 'CODE' use32
.text:00011448                 assume cs:_text
.text:00011448                 ;org 11448h
.text:00011448 ; COMDAT (pick any)
.text:00011448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011448
.text:00011448 ; =============== S U B R O U T I N E =======================================
.text:00011448
.text:00011448 ; Attributes: bp-based frame
.text:00011448
.text:00011448 ; __int32 __stdcall COpenCallbackImp::SetSubArchiveName(COpenCallbackImp *this, const wchar_t *)
.text:00011448                 public ?SetSubArchiveName@COpenCallbackImp@@UAGJPB_W@Z
.text:00011448 ?SetSubArchiveName@COpenCallbackImp@@UAGJPB_W@Z proc near
.text:00011448                                         ; DATA XREF: .rdata:00011020o
.text:00011448
.text:00011448 this            = dword ptr  8
.text:00011448 arg_4           = dword ptr  0Ch
.text:00011448
.text:00011448                 push    ebp
.text:00011449                 mov     ebp, esp
.text:0001144B                 mov     eax, [ebp+this]
.text:0001144E                 mov     byte ptr [eax+50h], 1
.text:00011452                 mov     ecx, [ebp+arg_4]
.text:00011455                 push    ecx
.text:00011456                 mov     ecx, [ebp+this]
.text:00011459                 add     ecx, 54h ; 'T'
.text:0001145C                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00011461                 xor     eax, eax
.text:00011463                 cmp     ebp, esp
.text:00011465                 call    __RTC_CheckEsp
.text:0001146A                 pop     ebp
.text:0001146B                 retn    8
.text:0001146B ?SetSubArchiveName@COpenCallbackImp@@UAGJPB_W@Z endp
.text:0001146B
.text:0001146B ; ---------------------------------------------------------------------------
.text:0001146E                 align 10h
.text:0001146E _text           ends
.text:0001146E
.text:00011470 ; ===========================================================================
.text:00011470
.text:00011470 ; Segment type: Pure code
.text:00011470 ; Segment permissions: Read/Execute
.text:00011470 _text           segment para public 'CODE' use32
.text:00011470                 assume cs:_text
.text:00011470                 ;org 11470h
.text:00011470 ; COMDAT (pick any)
.text:00011470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011470
.text:00011470 ; =============== S U B R O U T I N E =======================================
.text:00011470
.text:00011470 ; Attributes: bp-based frame
.text:00011470
.text:00011470 ; void __thiscall COpenCallbackImp::Init(COpenCallbackImp *this, const struct UString *, const struct UString *)
.text:00011470                 public ?Init@COpenCallbackImp@@QAEXABVUString@@0@Z
.text:00011470 ?Init@COpenCallbackImp@@QAEXABVUString@@0@Z proc near
.text:00011470                                         ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+FFp
.text:00011470                                         ; CArchiveLink::ReOpen(COpenOptions &)+1A0p
.text:00011470
.text:00011470 var_2C          = dword ptr -2Ch
.text:00011470 var_28          = dword ptr -28h
.text:00011470 var_24          = dword ptr -24h
.text:00011470 var_20          = dword ptr -20h
.text:00011470 var_1C          = dword ptr -1Ch
.text:00011470 var_18          = dword ptr -18h
.text:00011470 var_14          = dword ptr -14h
.text:00011470 var_10          = dword ptr -10h
.text:00011470 var_C           = dword ptr -0Ch
.text:00011470 var_4           = dword ptr -4
.text:00011470 arg_0           = dword ptr  8
.text:00011470 arg_4           = dword ptr  0Ch
.text:00011470
.text:00011470                 push    ebp
.text:00011471                 mov     ebp, esp
.text:00011473                 push    0FFFFFFFFh
.text:00011475                 push    offset __ehhandler$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z
.text:0001147A                 mov     eax, large fs:0
.text:00011480                 push    eax
.text:00011481                 sub     esp, 20h
.text:00011484                 mov     eax, 0CCCCCCCCh
.text:00011489                 mov     [ebp+var_2C], eax
.text:0001148C                 mov     [ebp+var_28], eax
.text:0001148F                 mov     [ebp+var_24], eax
.text:00011492                 mov     [ebp+var_20], eax
.text:00011495                 mov     [ebp+var_1C], eax
.text:00011498                 mov     [ebp+var_18], eax
.text:0001149B                 mov     [ebp+var_14], eax
.text:0001149E                 mov     [ebp+var_10], eax
.text:000114A1                 mov     eax, dword ptr ds:___security_cookie
.text:000114A6                 xor     eax, ebp
.text:000114A8                 push    eax
.text:000114A9                 lea     eax, [ebp+var_C]
.text:000114AC                 mov     large fs:0, eax
.text:000114B2                 mov     [ebp+var_10], ecx
.text:000114B5                 mov     eax, [ebp+arg_0]
.text:000114B8                 push    eax
.text:000114B9                 mov     ecx, [ebp+var_10]
.text:000114BC                 add     ecx, 14h
.text:000114BF                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000114C4                 mov     ecx, [ebp+arg_4]
.text:000114C7                 push    ecx
.text:000114C8                 mov     edx, [ebp+var_10]
.text:000114CB                 add     edx, 14h
.text:000114CE                 push    edx
.text:000114CF                 lea     eax, [ebp+var_20]
.text:000114D2                 push    eax
.text:000114D3                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:000114D8                 mov     [ebp+var_28], eax
.text:000114DB                 mov     ecx, [ebp+var_28]
.text:000114DE                 mov     [ebp+var_2C], ecx
.text:000114E1                 mov     [ebp+var_4], 0
.text:000114E8                 mov     ecx, [ebp+var_2C]
.text:000114EB                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000114F0                 push    eax             ; wchar_t *
.text:000114F1                 mov     ecx, [ebp+var_10]
.text:000114F4                 add     ecx, 20h ; ' '  ; this
.text:000114F7                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:000114FC                 movzx   edx, al
.text:000114FF                 neg     edx
.text:00011501                 sbb     edx, edx
.text:00011503                 add     edx, 1
.text:00011506                 mov     byte ptr [ebp+var_14+3], dl
.text:00011509                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00011510                 lea     ecx, [ebp+var_20] ; this
.text:00011513                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00011518                 movzx   eax, byte ptr [ebp+var_14+3]
.text:0001151C                 test    eax, eax
.text:0001151E                 jz      short loc_11535
.text:00011520                 mov     [ebp+var_24], 133061Eh
.text:00011527                 push    offset __TI1H
.text:0001152C                 lea     ecx, [ebp+var_24]
.text:0001152F                 push    ecx
.text:00011530                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00011535 ; ---------------------------------------------------------------------------
.text:00011535
.text:00011535 loc_11535:                              ; CODE XREF: COpenCallbackImp::Init(UString const &,UString const &)+AEj
.text:00011535                 mov     ecx, [ebp+var_10]
.text:00011538                 add     ecx, 68h ; 'h'
.text:0001153B                 call    ?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear(void)
.text:00011540                 mov     ecx, [ebp+var_10]
.text:00011543                 add     ecx, 74h ; 't'
.text:00011546                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:0001154B                 mov     ecx, [ebp+var_10]
.text:0001154E                 add     ecx, 80h ; 'Ç'
.text:00011554                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00011559                 mov     edx, [ebp+var_10]
.text:0001155C                 mov     byte ptr [edx+58h], 0
.text:00011560                 mov     eax, [ebp+var_10]
.text:00011563                 mov     byte ptr [eax+8Ch], 0
.text:0001156A                 mov     ecx, [ebp+var_C]
.text:0001156D                 mov     large fs:0, ecx
.text:00011574                 pop     ecx
.text:00011575                 add     esp, 2Ch
.text:00011578                 cmp     ebp, esp
.text:0001157A                 call    __RTC_CheckEsp
.text:0001157F                 mov     esp, ebp
.text:00011581                 pop     ebp
.text:00011582                 retn    8
.text:00011582 ?Init@COpenCallbackImp@@QAEXABVUString@@0@Z endp
.text:00011582
.text:00011582 ; ---------------------------------------------------------------------------
.text:00011585                 align 4
.text:00011585 _text           ends
.text:00011585
.text$x:00011588 ; ===========================================================================
.text$x:00011588
.text$x:00011588 ; Segment type: Pure code
.text$x:00011588 ; Segment permissions: Read/Execute
.text$x:00011588 _text$x         segment para public 'CODE' use32
.text$x:00011588                 assume cs:_text$x
.text$x:00011588                 ;org 11588h
.text$x:00011588 ; COMDAT (pick associative to section at 11470)
.text$x:00011588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00011588
.text$x:00011588 ; =============== S U B R O U T I N E =======================================
.text$x:00011588
.text$x:00011588
.text$x:00011588 __unwindfunclet$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z$0 proc near
.text$x:00011588                                         ; DATA XREF: .xdata$x:000115B0o
.text$x:00011588                 lea     ecx, [ebp-20h]  ; this
.text$x:0001158B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0001158B __unwindfunclet$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z$0 endp
.text$x:0001158B
.text$x:00011590
.text$x:00011590 ; =============== S U B R O U T I N E =======================================
.text$x:00011590
.text$x:00011590
.text$x:00011590 __ehhandler$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z proc near
.text$x:00011590                                         ; DATA XREF: COpenCallbackImp::Init(UString const &,UString const &)+5o
.text$x:00011590
.text$x:00011590 arg_4           = dword ptr  8
.text$x:00011590
.text$x:00011590                 mov     edx, [esp+arg_4]
.text$x:00011594                 lea     eax, [edx+0Ch]
.text$x:00011597                 mov     ecx, [edx-24h]
.text$x:0001159A                 xor     ecx, eax
.text$x:0001159C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000115A1                 mov     eax, offset __ehfuncinfo$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z
.text$x:000115A6                 jmp     ___CxxFrameHandler3
.text$x:000115A6 __ehhandler$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z endp
.text$x:000115A6
.text$x:000115A6 ; ---------------------------------------------------------------------------
.text$x:000115AB                 align 4
.text$x:000115AB _text$x         ends
.text$x:000115AB
.xdata$x:000115AC ; ===========================================================================
.xdata$x:000115AC
.xdata$x:000115AC ; Segment type: Pure data
.xdata$x:000115AC ; Segment permissions: Read
.xdata$x:000115AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000115AC                 assume cs:_xdata$x
.xdata$x:000115AC                 ;org 115ACh
.xdata$x:000115AC ; COMDAT (pick associative to section at 11470)
.xdata$x:000115AC __unwindtable$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z db 0FFh
.xdata$x:000115AC                                         ; DATA XREF: .xdata$x:000115BCo
.xdata$x:000115AD                 db 0FFh
.xdata$x:000115AE                 db 0FFh
.xdata$x:000115AF                 db 0FFh
.xdata$x:000115B0                 dd offset __unwindfunclet$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z$0
.xdata$x:000115B4 __ehfuncinfo$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z db  22h ; "
.xdata$x:000115B4                                         ; DATA XREF: __ehhandler$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z+11o
.xdata$x:000115B5                 db    5
.xdata$x:000115B6                 db  93h ; ô
.xdata$x:000115B7                 db  19h
.xdata$x:000115B8                 db    1
.xdata$x:000115B9                 db    0
.xdata$x:000115BA                 db    0
.xdata$x:000115BB                 db    0
.xdata$x:000115BC                 dd offset __unwindtable$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z
.xdata$x:000115C0                 db    0
.xdata$x:000115C1                 db    0
.xdata$x:000115C2                 db    0
.xdata$x:000115C3                 db    0
.xdata$x:000115C4                 db    0
.xdata$x:000115C5                 db    0
.xdata$x:000115C6                 db    0
.xdata$x:000115C7                 db    0
.xdata$x:000115C8                 db    0
.xdata$x:000115C9                 db    0
.xdata$x:000115CA                 db    0
.xdata$x:000115CB                 db    0
.xdata$x:000115CC                 db    0
.xdata$x:000115CD                 db    0
.xdata$x:000115CE                 db    0
.xdata$x:000115CF                 db    0
.xdata$x:000115D0                 db    0
.xdata$x:000115D1                 db    0
.xdata$x:000115D2                 db    0
.xdata$x:000115D3                 db    0
.xdata$x:000115D4                 db    1
.xdata$x:000115D5                 db    0
.xdata$x:000115D6                 db    0
.xdata$x:000115D7                 db    0
.xdata$x:000115D7 _xdata$x        ends
.xdata$x:000115D7
.text:000115D8 ; ===========================================================================
.text:000115D8
.text:000115D8 ; Segment type: Pure code
.text:000115D8 ; Segment permissions: Read/Execute
.text:000115D8 _text           segment para public 'CODE' use32
.text:000115D8                 assume cs:_text
.text:000115D8                 ;org 115D8h
.text:000115D8 ; COMDAT (pick any)
.text:000115D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000115D8
.text:000115D8 ; =============== S U B R O U T I N E =======================================
.text:000115D8
.text:000115D8 ; Attributes: bp-based frame
.text:000115D8
.text:000115D8 ; public: void * __thiscall COpenCallbackImp::`scalar deleting destructor'(unsigned int)
.text:000115D8                 public ??_GCOpenCallbackImp@@QAEPAXI@Z
.text:000115D8 ??_GCOpenCallbackImp@@QAEPAXI@Z proc near
.text:000115D8                                         ; CODE XREF: COpenCallbackImp::Release(void)+51p
.text:000115D8
.text:000115D8 var_4           = dword ptr -4
.text:000115D8 arg_0           = dword ptr  8
.text:000115D8
.text:000115D8                 push    ebp
.text:000115D9                 mov     ebp, esp
.text:000115DB                 push    ecx
.text:000115DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000115E3                 mov     [ebp+var_4], ecx
.text:000115E6                 mov     ecx, [ebp+var_4] ; this
.text:000115E9                 call    ??1COpenCallbackImp@@QAE@XZ ; COpenCallbackImp::~COpenCallbackImp(void)
.text:000115EE                 mov     eax, [ebp+arg_0]
.text:000115F1                 and     eax, 1
.text:000115F4                 jz      short loc_11602
.text:000115F6                 mov     ecx, [ebp+var_4]
.text:000115F9                 push    ecx             ; void *
.text:000115FA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000115FF                 add     esp, 4
.text:00011602
.text:00011602 loc_11602:                              ; CODE XREF: COpenCallbackImp::`scalar deleting destructor'(uint)+1Cj
.text:00011602                 mov     eax, [ebp+var_4]
.text:00011605                 add     esp, 4
.text:00011608                 cmp     ebp, esp
.text:0001160A                 call    __RTC_CheckEsp
.text:0001160F                 mov     esp, ebp
.text:00011611                 pop     ebp
.text:00011612                 retn    4
.text:00011612 ??_GCOpenCallbackImp@@QAEPAXI@Z endp
.text:00011612
.text:00011612 ; ---------------------------------------------------------------------------
.text:00011615                 align 4
.text:00011615 _text           ends
.text:00011615
.text:00011618 ; ===========================================================================
.text:00011618
.text:00011618 ; Segment type: Pure code
.text:00011618 ; Segment permissions: Read/Execute
.text:00011618 _text           segment para public 'CODE' use32
.text:00011618                 assume cs:_text
.text:00011618                 ;org 11618h
.text:00011618 ; COMDAT (pick any)
.text:00011618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011618
.text:00011618 ; =============== S U B R O U T I N E =======================================
.text:00011618
.text:00011618 ; Attributes: bp-based frame
.text:00011618
.text:00011618 ; _DWORD __thiscall IArchiveOpenVolumeCallback::IArchiveOpenVolumeCallback(IArchiveOpenVolumeCallback *__hidden this)
.text:00011618                 public ??0IArchiveOpenVolumeCallback@@QAE@XZ
.text:00011618 ??0IArchiveOpenVolumeCallback@@QAE@XZ proc near
.text:00011618                                         ; CODE XREF: COpenCallbackImp::COpenCallbackImp(void)+3Bp
.text:00011618
.text:00011618 var_4           = dword ptr -4
.text:00011618
.text:00011618                 push    ebp
.text:00011619                 mov     ebp, esp
.text:0001161B                 push    ecx
.text:0001161C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011623                 mov     [ebp+var_4], ecx
.text:00011626                 mov     ecx, [ebp+var_4]
.text:00011629                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0001162E                 mov     eax, [ebp+var_4]
.text:00011631                 mov     dword ptr [eax], offset ??_7IArchiveOpenVolumeCallback@@6B@ ; const IArchiveOpenVolumeCallback::`vftable'
.text:00011637                 mov     eax, [ebp+var_4]
.text:0001163A                 add     esp, 4
.text:0001163D                 cmp     ebp, esp
.text:0001163F                 call    __RTC_CheckEsp
.text:00011644                 mov     esp, ebp
.text:00011646                 pop     ebp
.text:00011647                 retn
.text:00011647 ??0IArchiveOpenVolumeCallback@@QAE@XZ endp
.text:00011647
.text:00011647 _text           ends
.text:00011647
.rdata:00011648 ; ===========================================================================
.rdata:00011648
.rdata:00011648 ; Segment type: Pure data
.rdata:00011648 ; Segment permissions: Read
.rdata:00011648 _rdata          segment dword public 'DATA' use32
.rdata:00011648                 assume cs:_rdata
.rdata:00011648                 ;org 11648h
.rdata:00011648 ; COMDAT (pick largest)
.rdata:00011648                 dd offset ??_R4IArchiveOpenVolumeCallback@@6B@ ; const IArchiveOpenVolumeCallback::`RTTI Complete Object Locator'
.rdata:0001164C                 public ??_7IArchiveOpenVolumeCallback@@6B@
.rdata:0001164C ; const IArchiveOpenVolumeCallback::`vftable'
.rdata:0001164C ??_7IArchiveOpenVolumeCallback@@6B@ dd offset __purecall
.rdata:0001164C                                         ; DATA XREF: IArchiveOpenVolumeCallback::IArchiveOpenVolumeCallback(void)+19o
.rdata:00011650                 dd offset __purecall
.rdata:00011654                 dd offset __purecall
.rdata:00011658                 dd offset __purecall
.rdata:0001165C                 dd offset __purecall
.rdata:0001165C _rdata          ends
.rdata:0001165C
.rdata$r:00011660 ; ===========================================================================
.rdata$r:00011660
.rdata$r:00011660 ; Segment type: Pure data
.rdata$r:00011660 ; Segment permissions: Read
.rdata$r:00011660 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011660                 assume cs:_rdata$r
.rdata$r:00011660                 ;org 11660h
.rdata$r:00011660 ; COMDAT (pick any)
.rdata$r:00011660                 public ??_R4IArchiveOpenVolumeCallback@@6B@
.rdata$r:00011660 ; const IArchiveOpenVolumeCallback::`RTTI Complete Object Locator'
.rdata$r:00011660 ??_R4IArchiveOpenVolumeCallback@@6B@ db    0 ; DATA XREF: .rdata:00011648o
.rdata$r:00011661                 db    0
.rdata$r:00011662                 db    0
.rdata$r:00011663                 db    0
.rdata$r:00011664                 db    0
.rdata$r:00011665                 db    0
.rdata$r:00011666                 db    0
.rdata$r:00011667                 db    0
.rdata$r:00011668                 db    0
.rdata$r:00011669                 db    0
.rdata$r:0001166A                 db    0
.rdata$r:0001166B                 db    0
.rdata$r:0001166C                 dd offset ??_R0?AUIArchiveOpenVolumeCallback@@@8 ; IArchiveOpenVolumeCallback `RTTI Type Descriptor'
.rdata$r:00011670                 dd offset ??_R3IArchiveOpenVolumeCallback@@8 ; IArchiveOpenVolumeCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011670 _rdata$r        ends
.rdata$r:00011670
.text:00011674 ; ===========================================================================
.text:00011674
.text:00011674 ; Segment type: Pure code
.text:00011674 ; Segment permissions: Read/Execute
.text:00011674 _text           segment para public 'CODE' use32
.text:00011674                 assume cs:_text
.text:00011674                 ;org 11674h
.text:00011674 ; COMDAT (pick any)
.text:00011674                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011674
.text:00011674 ; =============== S U B R O U T I N E =======================================
.text:00011674
.text:00011674 ; Attributes: bp-based frame
.text:00011674
.text:00011674 ; _DWORD __thiscall IArchiveOpenSetSubArchiveName::IArchiveOpenSetSubArchiveName(IArchiveOpenSetSubArchiveName *__hidden this)
.text:00011674                 public ??0IArchiveOpenSetSubArchiveName@@QAE@XZ
.text:00011674 ??0IArchiveOpenSetSubArchiveName@@QAE@XZ proc near
.text:00011674                                         ; CODE XREF: COpenCallbackImp::COpenCallbackImp(void)+46p
.text:00011674
.text:00011674 var_4           = dword ptr -4
.text:00011674
.text:00011674                 push    ebp
.text:00011675                 mov     ebp, esp
.text:00011677                 push    ecx
.text:00011678                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001167F                 mov     [ebp+var_4], ecx
.text:00011682                 mov     ecx, [ebp+var_4]
.text:00011685                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0001168A                 mov     eax, [ebp+var_4]
.text:0001168D                 mov     dword ptr [eax], offset ??_7IArchiveOpenSetSubArchiveName@@6B@ ; const IArchiveOpenSetSubArchiveName::`vftable'
.text:00011693                 mov     eax, [ebp+var_4]
.text:00011696                 add     esp, 4
.text:00011699                 cmp     ebp, esp
.text:0001169B                 call    __RTC_CheckEsp
.text:000116A0                 mov     esp, ebp
.text:000116A2                 pop     ebp
.text:000116A3                 retn
.text:000116A3 ??0IArchiveOpenSetSubArchiveName@@QAE@XZ endp
.text:000116A3
.text:000116A3 _text           ends
.text:000116A3
.rdata:000116A4 ; ===========================================================================
.rdata:000116A4
.rdata:000116A4 ; Segment type: Pure data
.rdata:000116A4 ; Segment permissions: Read
.rdata:000116A4 _rdata          segment dword public 'DATA' use32
.rdata:000116A4                 assume cs:_rdata
.rdata:000116A4                 ;org 116A4h
.rdata:000116A4 ; COMDAT (pick largest)
.rdata:000116A4                 dd offset ??_R4IArchiveOpenSetSubArchiveName@@6B@ ; const IArchiveOpenSetSubArchiveName::`RTTI Complete Object Locator'
.rdata:000116A8                 public ??_7IArchiveOpenSetSubArchiveName@@6B@
.rdata:000116A8 ; const IArchiveOpenSetSubArchiveName::`vftable'
.rdata:000116A8 ??_7IArchiveOpenSetSubArchiveName@@6B@ dd offset __purecall
.rdata:000116A8                                         ; DATA XREF: IArchiveOpenSetSubArchiveName::IArchiveOpenSetSubArchiveName(void)+19o
.rdata:000116AC                 dd offset __purecall
.rdata:000116B0                 dd offset __purecall
.rdata:000116B4                 dd offset __purecall
.rdata:000116B4 _rdata          ends
.rdata:000116B4
.rdata$r:000116B8 ; ===========================================================================
.rdata$r:000116B8
.rdata$r:000116B8 ; Segment type: Pure data
.rdata$r:000116B8 ; Segment permissions: Read
.rdata$r:000116B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000116B8                 assume cs:_rdata$r
.rdata$r:000116B8                 ;org 116B8h
.rdata$r:000116B8 ; COMDAT (pick any)
.rdata$r:000116B8                 public ??_R4IArchiveOpenSetSubArchiveName@@6B@
.rdata$r:000116B8 ; const IArchiveOpenSetSubArchiveName::`RTTI Complete Object Locator'
.rdata$r:000116B8 ??_R4IArchiveOpenSetSubArchiveName@@6B@ db    0
.rdata$r:000116B8                                         ; DATA XREF: .rdata:000116A4o
.rdata$r:000116B9                 db    0
.rdata$r:000116BA                 db    0
.rdata$r:000116BB                 db    0
.rdata$r:000116BC                 db    0
.rdata$r:000116BD                 db    0
.rdata$r:000116BE                 db    0
.rdata$r:000116BF                 db    0
.rdata$r:000116C0                 db    0
.rdata$r:000116C1                 db    0
.rdata$r:000116C2                 db    0
.rdata$r:000116C3                 db    0
.rdata$r:000116C4                 dd offset ??_R0?AUIArchiveOpenSetSubArchiveName@@@8 ; IArchiveOpenSetSubArchiveName `RTTI Type Descriptor'
.rdata$r:000116C8                 dd offset ??_R3IArchiveOpenSetSubArchiveName@@8 ; IArchiveOpenSetSubArchiveName::`RTTI Class Hierarchy Descriptor'
.rdata$r:000116C8 _rdata$r        ends
.rdata$r:000116C8
.text:000116CC ; ===========================================================================
.text:000116CC
.text:000116CC ; Segment type: Pure code
.text:000116CC ; Segment permissions: Read/Execute
.text:000116CC _text           segment para public 'CODE' use32
.text:000116CC                 assume cs:_text
.text:000116CC                 ;org 116CCh
.text:000116CC ; COMDAT (pick any)
.text:000116CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000116CC
.text:000116CC ; =============== S U B R O U T I N E =======================================
.text:000116CC
.text:000116CC ; Attributes: bp-based frame
.text:000116CC
.text:000116CC ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:000116CC                 public ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:000116CC ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:000116CC                                         ; CODE XREF: COpenCallbackImp::COpenCallbackImp(void)+A0p
.text:000116CC
.text:000116CC var_4           = dword ptr -4
.text:000116CC
.text:000116CC                 push    ebp
.text:000116CD                 mov     ebp, esp
.text:000116CF                 push    ecx
.text:000116D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000116D7                 mov     [ebp+var_4], ecx
.text:000116DA                 mov     ecx, [ebp+var_4] ; this
.text:000116DD                 call    ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(void)
.text:000116E2                 mov     ecx, [ebp+var_4]
.text:000116E5                 add     ecx, 28h ; '('
.text:000116E8                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000116ED                 mov     eax, [ebp+var_4]
.text:000116F0                 add     esp, 4
.text:000116F3                 cmp     ebp, esp
.text:000116F5                 call    __RTC_CheckEsp
.text:000116FA                 mov     esp, ebp
.text:000116FC                 pop     ebp
.text:000116FD                 retn
.text:000116FD ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:000116FD
.text:000116FD ; ---------------------------------------------------------------------------
.text:000116FE                 align 10h
.text:000116FE _text           ends
.text:000116FE
.text:00011700 ; ===========================================================================
.text:00011700
.text:00011700 ; Segment type: Pure code
.text:00011700 ; Segment permissions: Read/Execute
.text:00011700 _text           segment para public 'CODE' use32
.text:00011700                 assume cs:_text
.text:00011700                 ;org 11700h
.text:00011700 ; COMDAT (pick any)
.text:00011700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011700
.text:00011700 ; =============== S U B R O U T I N E =======================================
.text:00011700
.text:00011700 ; Attributes: bp-based frame
.text:00011700
.text:00011700 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00011700                 public ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
.text:00011700 ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00011700                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::CFileInfo(void)+11p
.text:00011700
.text:00011700 var_4           = dword ptr -4
.text:00011700
.text:00011700                 push    ebp
.text:00011701                 mov     ebp, esp
.text:00011703                 push    ecx
.text:00011704                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001170B                 mov     [ebp+var_4], ecx
.text:0001170E                 mov     ecx, [ebp+var_4] ; this
.text:00011711                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:00011716                 mov     eax, [ebp+var_4]
.text:00011719                 add     esp, 4
.text:0001171C                 cmp     ebp, esp
.text:0001171E                 call    __RTC_CheckEsp
.text:00011723                 mov     esp, ebp
.text:00011725                 pop     ebp
.text:00011726                 retn
.text:00011726 ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ endp
.text:00011726
.text:00011726 ; ---------------------------------------------------------------------------
.text:00011727                 align 4
.text:00011727 _text           ends
.text:00011727
.text:00011728 ; ===========================================================================
.text:00011728
.text:00011728 ; Segment type: Pure code
.text:00011728 ; Segment permissions: Read/Execute
.text:00011728 _text           segment para public 'CODE' use32
.text:00011728                 assume cs:_text
.text:00011728                 ;org 11728h
.text:00011728 ; COMDAT (pick any)
.text:00011728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011728
.text:00011728 ; =============== S U B R O U T I N E =======================================
.text:00011728
.text:00011728 ; Attributes: bp-based frame
.text:00011728
.text:00011728 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::~CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:00011728                 public ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:00011728 ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00011728                                         ; CODE XREF: __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$1+6j
.text:00011728                                         ; COpenCallbackImp::~COpenCallbackImp(void)+8Bp ...
.text:00011728
.text:00011728 var_4           = dword ptr -4
.text:00011728
.text:00011728                 push    ebp
.text:00011729                 mov     ebp, esp
.text:0001172B                 push    ecx
.text:0001172C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011733                 mov     [ebp+var_4], ecx
.text:00011736                 mov     ecx, [ebp+var_4]
.text:00011739                 add     ecx, 28h ; '('  ; this
.text:0001173C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00011741                 add     esp, 4
.text:00011744                 cmp     ebp, esp
.text:00011746                 call    __RTC_CheckEsp
.text:0001174B                 mov     esp, ebp
.text:0001174D                 pop     ebp
.text:0001174E                 retn
.text:0001174E ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:0001174E
.text:0001174E ; ---------------------------------------------------------------------------
.text:0001174F                 align 10h
.text:0001174F _text           ends
.text:0001174F
.text:00011750 ; ===========================================================================
.text:00011750
.text:00011750 ; Segment type: Pure code
.text:00011750 ; Segment permissions: Read/Execute
.text:00011750 _text           segment para public 'CODE' use32
.text:00011750                 assume cs:_text
.text:00011750                 ;org 11750h
.text:00011750 ; COMDAT (pick any)
.text:00011750                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011750
.text:00011750 ; =============== S U B R O U T I N E =======================================
.text:00011750
.text:00011750 ; Attributes: bp-based frame
.text:00011750
.text:00011750 ; _DWORD __thiscall COpenCallbackImp::~COpenCallbackImp(COpenCallbackImp *__hidden this)
.text:00011750                 public ??1COpenCallbackImp@@QAE@XZ
.text:00011750 ??1COpenCallbackImp@@QAE@XZ proc near   ; CODE XREF: COpenCallbackImp::`scalar deleting destructor'(uint)+11p
.text:00011750
.text:00011750 var_10          = dword ptr -10h
.text:00011750 var_C           = dword ptr -0Ch
.text:00011750 var_4           = dword ptr -4
.text:00011750
.text:00011750                 push    ebp
.text:00011751                 mov     ebp, esp
.text:00011753                 push    0FFFFFFFFh
.text:00011755                 push    offset __ehhandler$??1COpenCallbackImp@@QAE@XZ
.text:0001175A                 mov     eax, large fs:0
.text:00011760                 push    eax
.text:00011761                 push    ecx
.text:00011762                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00011769                 mov     eax, dword ptr ds:___security_cookie
.text:0001176E                 xor     eax, ebp
.text:00011770                 push    eax
.text:00011771                 lea     eax, [ebp+var_C]
.text:00011774                 mov     large fs:0, eax
.text:0001177A                 mov     [ebp+var_10], ecx
.text:0001177D                 mov     [ebp+var_4], 5
.text:00011784                 mov     ecx, [ebp+var_10]
.text:00011787                 add     ecx, 94h ; 'ö'
.text:0001178D                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00011792                 mov     byte ptr [ebp+var_4], 4
.text:00011796                 mov     ecx, [ebp+var_10]
.text:00011799                 add     ecx, 80h ; 'Ç'
.text:0001179F                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000117A4                 mov     byte ptr [ebp+var_4], 3
.text:000117A8                 mov     ecx, [ebp+var_10]
.text:000117AB                 add     ecx, 74h ; 't'
.text:000117AE                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000117B3                 mov     byte ptr [ebp+var_4], 2
.text:000117B7                 mov     ecx, [ebp+var_10]
.text:000117BA                 add     ecx, 68h ; 'h'
.text:000117BD                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000117C2                 mov     byte ptr [ebp+var_4], 1
.text:000117C6                 mov     ecx, [ebp+var_10]
.text:000117C9                 add     ecx, 5Ch ; '\'  ; this
.text:000117CC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000117D1                 mov     byte ptr [ebp+var_4], 0
.text:000117D5                 mov     ecx, [ebp+var_10]
.text:000117D8                 add     ecx, 20h ; ' '  ; this
.text:000117DB                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000117E0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000117E7                 mov     ecx, [ebp+var_10]
.text:000117EA                 add     ecx, 14h        ; this
.text:000117ED                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000117F2                 mov     ecx, [ebp+var_C]
.text:000117F5                 mov     large fs:0, ecx
.text:000117FC                 pop     ecx
.text:000117FD                 add     esp, 10h
.text:00011800                 cmp     ebp, esp
.text:00011802                 call    __RTC_CheckEsp
.text:00011807                 mov     esp, ebp
.text:00011809                 pop     ebp
.text:0001180A                 retn
.text:0001180A ??1COpenCallbackImp@@QAE@XZ endp
.text:0001180A
.text:0001180A ; ---------------------------------------------------------------------------
.text:0001180B                 align 4
.text:0001180B _text           ends
.text:0001180B
.text$x:0001180C ; ===========================================================================
.text$x:0001180C
.text$x:0001180C ; Segment type: Pure code
.text$x:0001180C ; Segment permissions: Read/Execute
.text$x:0001180C _text$x         segment para public 'CODE' use32
.text$x:0001180C                 assume cs:_text$x
.text$x:0001180C                 ;org 1180Ch
.text$x:0001180C ; COMDAT (pick associative to section at 11750)
.text$x:0001180C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0001180C
.text$x:0001180C ; =============== S U B R O U T I N E =======================================
.text$x:0001180C
.text$x:0001180C
.text$x:0001180C __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$0 proc near
.text$x:0001180C                                         ; DATA XREF: .xdata$x:00011894o
.text$x:0001180C                 mov     ecx, [ebp-10h]
.text$x:0001180F                 add     ecx, 14h        ; this
.text$x:00011812                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00011812 __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$0 endp
.text$x:00011812
.text$x:00011817
.text$x:00011817 ; =============== S U B R O U T I N E =======================================
.text$x:00011817
.text$x:00011817
.text$x:00011817 __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$1 proc near
.text$x:00011817                                         ; DATA XREF: .xdata$x:0001189Co
.text$x:00011817                 mov     ecx, [ebp-10h]
.text$x:0001181A                 add     ecx, 20h ; ' '  ; this
.text$x:0001181D                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:0001181D __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$1 endp
.text$x:0001181D
.text$x:00011822
.text$x:00011822 ; =============== S U B R O U T I N E =======================================
.text$x:00011822
.text$x:00011822
.text$x:00011822 __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$2 proc near
.text$x:00011822                                         ; DATA XREF: .xdata$x:000118A4o
.text$x:00011822                 mov     ecx, [ebp-10h]
.text$x:00011825                 add     ecx, 5Ch ; '\'  ; this
.text$x:00011828                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00011828 __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$2 endp
.text$x:00011828
.text$x:0001182D
.text$x:0001182D ; =============== S U B R O U T I N E =======================================
.text$x:0001182D
.text$x:0001182D
.text$x:0001182D __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$3 proc near
.text$x:0001182D                                         ; DATA XREF: .xdata$x:000118ACo
.text$x:0001182D                 mov     ecx, [ebp-10h]
.text$x:00011830                 add     ecx, 68h ; 'h'
.text$x:00011833                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00011833 __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$3 endp
.text$x:00011833
.text$x:00011838
.text$x:00011838 ; =============== S U B R O U T I N E =======================================
.text$x:00011838
.text$x:00011838
.text$x:00011838 __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$4 proc near
.text$x:00011838                                         ; DATA XREF: .xdata$x:000118B4o
.text$x:00011838                 mov     ecx, [ebp-10h]
.text$x:0001183B                 add     ecx, 74h ; 't'
.text$x:0001183E                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:0001183E __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$4 endp
.text$x:0001183E
.text$x:00011843
.text$x:00011843 ; =============== S U B R O U T I N E =======================================
.text$x:00011843
.text$x:00011843
.text$x:00011843 __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$5 proc near
.text$x:00011843                                         ; DATA XREF: .xdata$x:000118BCo
.text$x:00011843                 mov     ecx, [ebp-10h]
.text$x:00011846                 add     ecx, 80h ; 'Ç'
.text$x:0001184C                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:0001184C __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$5 endp
.text$x:0001184C
.text$x:00011851
.text$x:00011851 ; =============== S U B R O U T I N E =======================================
.text$x:00011851
.text$x:00011851
.text$x:00011851 __ehhandler$??1COpenCallbackImp@@QAE@XZ proc near
.text$x:00011851                                         ; DATA XREF: COpenCallbackImp::~COpenCallbackImp(void)+5o
.text$x:00011851
.text$x:00011851 arg_4           = dword ptr  8
.text$x:00011851
.text$x:00011851                 mov     edx, [esp+arg_4]
.text$x:00011855                 lea     eax, [edx+0Ch]
.text$x:00011858                 mov     ecx, [edx-8]
.text$x:0001185B                 xor     ecx, eax
.text$x:0001185D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00011862                 mov     eax, offset __ehfuncinfo$??1COpenCallbackImp@@QAE@XZ
.text$x:00011867                 jmp     ___CxxFrameHandler3
.text$x:00011867 __ehhandler$??1COpenCallbackImp@@QAE@XZ endp
.text$x:00011867
.text$x:00011867 _text$x         ends
.text$x:00011867
.xdata$x:0001186C ; ===========================================================================
.xdata$x:0001186C
.xdata$x:0001186C ; Segment type: Pure data
.xdata$x:0001186C ; Segment permissions: Read
.xdata$x:0001186C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001186C                 assume cs:_xdata$x
.xdata$x:0001186C                 ;org 1186Ch
.xdata$x:0001186C ; COMDAT (pick associative to section at 11750)
.xdata$x:0001186C __ehfuncinfo$??1COpenCallbackImp@@QAE@XZ db  22h ; "
.xdata$x:0001186C                                         ; DATA XREF: __ehhandler$??1COpenCallbackImp@@QAE@XZ+11o
.xdata$x:0001186D                 db    5
.xdata$x:0001186E                 db  93h ; ô
.xdata$x:0001186F                 db  19h
.xdata$x:00011870                 db    6
.xdata$x:00011871                 db    0
.xdata$x:00011872                 db    0
.xdata$x:00011873                 db    0
.xdata$x:00011874                 dd offset __unwindtable$??1COpenCallbackImp@@QAE@XZ
.xdata$x:00011878                 db    0
.xdata$x:00011879                 db    0
.xdata$x:0001187A                 db    0
.xdata$x:0001187B                 db    0
.xdata$x:0001187C                 db    0
.xdata$x:0001187D                 db    0
.xdata$x:0001187E                 db    0
.xdata$x:0001187F                 db    0
.xdata$x:00011880                 db    0
.xdata$x:00011881                 db    0
.xdata$x:00011882                 db    0
.xdata$x:00011883                 db    0
.xdata$x:00011884                 db    0
.xdata$x:00011885                 db    0
.xdata$x:00011886                 db    0
.xdata$x:00011887                 db    0
.xdata$x:00011888                 db    0
.xdata$x:00011889                 db    0
.xdata$x:0001188A                 db    0
.xdata$x:0001188B                 db    0
.xdata$x:0001188C                 db    1
.xdata$x:0001188D                 db    0
.xdata$x:0001188E                 db    0
.xdata$x:0001188F                 db    0
.xdata$x:00011890 __unwindtable$??1COpenCallbackImp@@QAE@XZ db 0FFh
.xdata$x:00011890                                         ; DATA XREF: .xdata$x:00011874o
.xdata$x:00011891                 db 0FFh
.xdata$x:00011892                 db 0FFh
.xdata$x:00011893                 db 0FFh
.xdata$x:00011894                 dd offset __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$0
.xdata$x:00011898                 db    0
.xdata$x:00011899                 db    0
.xdata$x:0001189A                 db    0
.xdata$x:0001189B                 db    0
.xdata$x:0001189C                 dd offset __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$1
.xdata$x:000118A0                 db    1
.xdata$x:000118A1                 db    0
.xdata$x:000118A2                 db    0
.xdata$x:000118A3                 db    0
.xdata$x:000118A4                 dd offset __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$2
.xdata$x:000118A8                 db    2
.xdata$x:000118A9                 db    0
.xdata$x:000118AA                 db    0
.xdata$x:000118AB                 db    0
.xdata$x:000118AC                 dd offset __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$3
.xdata$x:000118B0                 db    3
.xdata$x:000118B1                 db    0
.xdata$x:000118B2                 db    0
.xdata$x:000118B3                 db    0
.xdata$x:000118B4                 dd offset __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$4
.xdata$x:000118B8                 db    4
.xdata$x:000118B9                 db    0
.xdata$x:000118BA                 db    0
.xdata$x:000118BB                 db    0
.xdata$x:000118BC                 dd offset __unwindfunclet$??1COpenCallbackImp@@QAE@XZ$5
.xdata$x:000118BC _xdata$x        ends
.xdata$x:000118BC
.text:000118C0 ; ===========================================================================
.text:000118C0
.text:000118C0 ; Segment type: Pure code
.text:000118C0 ; Segment permissions: Read/Execute
.text:000118C0 _text           segment para public 'CODE' use32
.text:000118C0                 assume cs:_text
.text:000118C0                 ;org 118C0h
.text:000118C0 ; COMDAT (pick any)
.text:000118C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000118C0
.text:000118C0 ; =============== S U B R O U T I N E =======================================
.text:000118C0
.text:000118C0 ; Attributes: bp-based frame
.text:000118C0
.text:000118C0 ; void __thiscall CTailInStream::Init(CTailInStream *__hidden this)
.text:000118C0                 public ?Init@CTailInStream@@QAEXXZ
.text:000118C0 ?Init@CTailInStream@@QAEXXZ proc near   ; CODE XREF: CArc::ReOpen(COpenOptions const &)+194p
.text:000118C0
.text:000118C0 var_4           = dword ptr -4
.text:000118C0
.text:000118C0                 push    ebp
.text:000118C1                 mov     ebp, esp
.text:000118C3                 push    ecx
.text:000118C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000118CB                 mov     [ebp+var_4], ecx
.text:000118CE                 mov     eax, [ebp+var_4]
.text:000118D1                 mov     dword ptr [eax+8], 0
.text:000118D8                 mov     dword ptr [eax+0Ch], 0
.text:000118DF                 mov     esp, ebp
.text:000118E1                 pop     ebp
.text:000118E2                 retn
.text:000118E2 ?Init@CTailInStream@@QAEXXZ endp
.text:000118E2
.text:000118E2 ; ---------------------------------------------------------------------------
.text:000118E3                 align 4
.text:000118E3 _text           ends
.text:000118E3
.text:000118E4 ; ===========================================================================
.text:000118E4
.text:000118E4 ; Segment type: Pure code
.text:000118E4 ; Segment permissions: Read/Execute
.text:000118E4 _text           segment para public 'CODE' use32
.text:000118E4                 assume cs:_text
.text:000118E4                 ;org 118E4h
.text:000118E4 ; COMDAT (pick any)
.text:000118E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000118E4
.text:000118E4 ; =============== S U B R O U T I N E =======================================
.text:000118E4
.text:000118E4 ; Attributes: bp-based frame
.text:000118E4
.text:000118E4 ; __int32 __thiscall CTailInStream::SeekToStart(CTailInStream *__hidden this)
.text:000118E4                 public ?SeekToStart@CTailInStream@@QAEJXZ
.text:000118E4 ?SeekToStart@CTailInStream@@QAEJXZ proc near
.text:000118E4                                         ; CODE XREF: CArc::ReOpen(COpenOptions const &)+19Cp
.text:000118E4
.text:000118E4 var_8           = dword ptr -8
.text:000118E4 var_4           = dword ptr -4
.text:000118E4
.text:000118E4                 push    ebp
.text:000118E5                 mov     ebp, esp
.text:000118E7                 sub     esp, 8
.text:000118EA                 push    esi
.text:000118EB                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000118F2                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000118F9                 mov     [ebp+var_4], ecx
.text:000118FC                 mov     ecx, [ebp+var_4]
.text:000118FF                 add     ecx, 10h
.text:00011902                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00011907                 mov     [ebp+var_8], eax
.text:0001190A                 mov     esi, esp
.text:0001190C                 push    0
.text:0001190E                 push    0
.text:00011910                 mov     eax, [ebp+var_4]
.text:00011913                 mov     ecx, [eax+1Ch]
.text:00011916                 push    ecx
.text:00011917                 mov     edx, [eax+18h]
.text:0001191A                 push    edx
.text:0001191B                 mov     eax, [ebp+var_8]
.text:0001191E                 push    eax
.text:0001191F                 mov     ecx, [ebp+var_8]
.text:00011922                 mov     edx, [ecx]
.text:00011924                 mov     eax, [edx+10h]
.text:00011927                 call    eax
.text:00011929                 cmp     esi, esp
.text:0001192B                 call    __RTC_CheckEsp
.text:00011930                 pop     esi
.text:00011931                 add     esp, 8
.text:00011934                 cmp     ebp, esp
.text:00011936                 call    __RTC_CheckEsp
.text:0001193B                 mov     esp, ebp
.text:0001193D                 pop     ebp
.text:0001193E                 retn
.text:0001193E ?SeekToStart@CTailInStream@@QAEJXZ endp
.text:0001193E
.text:0001193E ; ---------------------------------------------------------------------------
.text:0001193F                 align 10h
.text:0001193F _text           ends
.text:0001193F
.text:00011940 ; ===========================================================================
.text:00011940
.text:00011940 ; Segment type: Pure code
.text:00011940 ; Segment permissions: Read/Execute
.text:00011940 _text           segment para public 'CODE' use32
.text:00011940                 assume cs:_text
.text:00011940                 ;org 11940h
.text:00011940 ; COMDAT (pick any)
.text:00011940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011940
.text:00011940 ; =============== S U B R O U T I N E =======================================
.text:00011940
.text:00011940 ; Attributes: bp-based frame
.text:00011940
.text:00011940 ; __int64 __thiscall CArc::GetGlobalOffset(CArc *__hidden this)
.text:00011940                 public ?GetGlobalOffset@CArc@@QBE_JXZ
.text:00011940 ?GetGlobalOffset@CArc@@QBE_JXZ proc near
.text:00011940                                         ; CODE XREF: CArc::ReOpen(COpenOptions const &)+FCp
.text:00011940
.text:00011940 var_4           = dword ptr -4
.text:00011940
.text:00011940                 push    ebp
.text:00011941                 mov     ebp, esp
.text:00011943                 push    ecx
.text:00011944                 push    esi
.text:00011945                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001194C                 mov     [ebp+var_4], ecx
.text:0001194F                 mov     eax, [ebp+var_4]
.text:00011952                 mov     ecx, [ebp+var_4]
.text:00011955                 mov     edx, [eax+0D0h]
.text:0001195B                 add     edx, [ecx+0A8h]
.text:00011961                 mov     esi, [eax+0D4h]
.text:00011967                 adc     esi, [ecx+0ACh]
.text:0001196D                 mov     eax, edx
.text:0001196F                 mov     edx, esi
.text:00011971                 pop     esi
.text:00011972                 mov     esp, ebp
.text:00011974                 pop     ebp
.text:00011975                 retn
.text:00011975 ?GetGlobalOffset@CArc@@QBE_JXZ endp
.text:00011975
.text:00011975 ; ---------------------------------------------------------------------------
.text:00011976                 align 4
.text:00011976 _text           ends
.text:00011976
.text:00011978 ; ===========================================================================
.text:00011978
.text:00011978 ; Segment type: Pure code
.text:00011978 ; Segment permissions: Read/Execute
.text:00011978 _text           segment para public 'CODE' use32
.text:00011978                 assume cs:_text
.text:00011978                 ;org 11978h
.text:00011978 ; COMDAT (pick any)
.text:00011978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011978
.text:00011978 ; =============== S U B R O U T I N E =======================================
.text:00011978
.text:00011978 ; Attributes: bp-based frame
.text:00011978
.text:00011978 ; public: __thiscall CTailInStream::CTailInStream(void)
.text:00011978                 public ??0CTailInStream@@QAE@XZ
.text:00011978 ??0CTailInStream@@QAE@XZ proc near      ; CODE XREF: CArc::ReOpen(COpenOptions const &)+143p
.text:00011978
.text:00011978 var_4           = dword ptr -4
.text:00011978
.text:00011978                 push    ebp
.text:00011979                 mov     ebp, esp
.text:0001197B                 push    ecx
.text:0001197C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011983                 mov     [ebp+var_4], ecx
.text:00011986                 mov     ecx, [ebp+var_4] ; this
.text:00011989                 call    ??0IInStream@@QAE@XZ ; IInStream::IInStream(void)
.text:0001198E                 mov     ecx, [ebp+var_4]
.text:00011991                 add     ecx, 4          ; this
.text:00011994                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00011999                 mov     eax, [ebp+var_4]
.text:0001199C                 mov     dword ptr [eax], offset ??_7CTailInStream@@6B@ ; const CTailInStream::`vftable'
.text:000119A2                 mov     ecx, [ebp+var_4]
.text:000119A5                 add     ecx, 10h
.text:000119A8                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:000119AD                 mov     eax, [ebp+var_4]
.text:000119B0                 add     esp, 4
.text:000119B3                 cmp     ebp, esp
.text:000119B5                 call    __RTC_CheckEsp
.text:000119BA                 mov     esp, ebp
.text:000119BC                 pop     ebp
.text:000119BD                 retn
.text:000119BD ??0CTailInStream@@QAE@XZ endp
.text:000119BD
.text:000119BD ; ---------------------------------------------------------------------------
.text:000119BE                 align 10h
.text:000119BE _text           ends
.text:000119BE
.rdata:000119C0 ; ===========================================================================
.rdata:000119C0
.rdata:000119C0 ; Segment type: Pure data
.rdata:000119C0 ; Segment permissions: Read
.rdata:000119C0 _rdata          segment dword public 'DATA' use32
.rdata:000119C0                 assume cs:_rdata
.rdata:000119C0                 ;org 119C0h
.rdata:000119C0 ; COMDAT (pick largest)
.rdata:000119C0                 dd offset ??_R4CTailInStream@@6B@ ; const CTailInStream::`RTTI Complete Object Locator'
.rdata:000119C4                 public ??_7CTailInStream@@6B@
.rdata:000119C4 ; const CTailInStream::`vftable'
.rdata:000119C4 ??_7CTailInStream@@6B@ dd offset ?QueryInterface@CTailInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:000119C4                                         ; DATA XREF: CTailInStream::CTailInStream(void)+24o
.rdata:000119C4                                         ; CTailInStream::QueryInterface(_GUID const &,void * *)
.rdata:000119C8                 dd offset ?AddRef@CTailInStream@@UAGKXZ ; CTailInStream::AddRef(void)
.rdata:000119CC                 dd offset ?Release@CTailInStream@@UAGKXZ ; CTailInStream::Release(void)
.rdata:000119D0                 dd offset ?Read@CTailInStream@@UAGJPAXIPAI@Z ; CTailInStream::Read(void *,uint,uint *)
.rdata:000119D4                 dd offset ?Seek@CTailInStream@@UAGJ_JIPA_K@Z ; CTailInStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:000119D4 _rdata          ends
.rdata:000119D4
.rdata$r:000119D8 ; ===========================================================================
.rdata$r:000119D8
.rdata$r:000119D8 ; Segment type: Pure data
.rdata$r:000119D8 ; Segment permissions: Read
.rdata$r:000119D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000119D8                 assume cs:_rdata$r
.rdata$r:000119D8                 ;org 119D8h
.rdata$r:000119D8 ; COMDAT (pick any)
.rdata$r:000119D8                 public ??_R4CTailInStream@@6B@
.rdata$r:000119D8 ; const CTailInStream::`RTTI Complete Object Locator'
.rdata$r:000119D8 ??_R4CTailInStream@@6B@ db    0         ; DATA XREF: .rdata:000119C0o
.rdata$r:000119D9                 db    0
.rdata$r:000119DA                 db    0
.rdata$r:000119DB                 db    0
.rdata$r:000119DC                 db    0
.rdata$r:000119DD                 db    0
.rdata$r:000119DE                 db    0
.rdata$r:000119DF                 db    0
.rdata$r:000119E0                 db    0
.rdata$r:000119E1                 db    0
.rdata$r:000119E2                 db    0
.rdata$r:000119E3                 db    0
.rdata$r:000119E4                 dd offset ??_R0?AVCTailInStream@@@8 ; CTailInStream `RTTI Type Descriptor'
.rdata$r:000119E8                 dd offset ??_R3CTailInStream@@8 ; CTailInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000119E8 _rdata$r        ends
.rdata$r:000119E8
.data:000119EC ; ===========================================================================
.data:000119EC
.data:000119EC ; Segment type: Pure data
.data:000119EC ; Segment permissions: Read/Write
.data:000119EC _data           segment dword public 'DATA' use32
.data:000119EC                 assume cs:_data
.data:000119EC                 ;org 119ECh
.data:000119EC ; COMDAT (pick any)
.data:000119EC                 public ??_R0?AVCTailInStream@@@8
.data:000119EC ; class CTailInStream `RTTI Type Descriptor'
.data:000119EC ??_R0?AVCTailInStream@@@8 dd offset ??_7type_info@@6B@
.data:000119EC                                         ; DATA XREF: .rdata$r:000119E4o
.data:000119EC                                         ; .rdata$r:CTailInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000119EC                                         ; const type_info::`vftable'
.data:000119F0                 db    0
.data:000119F1                 db    0
.data:000119F2                 db    0
.data:000119F3                 db    0
.data:000119F4                 db  2Eh ; .
.data:000119F5                 db  3Fh ; ?
.data:000119F6                 db  41h ; A
.data:000119F7                 db  56h ; V
.data:000119F8                 db  43h ; C
.data:000119F9                 db  54h ; T
.data:000119FA                 db  61h ; a
.data:000119FB                 db  69h ; i
.data:000119FC                 db  6Ch ; l
.data:000119FD                 db  49h ; I
.data:000119FE                 db  6Eh ; n
.data:000119FF                 db  53h ; S
.data:00011A00                 db  74h ; t
.data:00011A01                 db  72h ; r
.data:00011A02                 db  65h ; e
.data:00011A03                 db  61h ; a
.data:00011A04                 db  6Dh ; m
.data:00011A05                 db  40h ; @
.data:00011A06                 db  40h ; @
.data:00011A07                 db    0
.data:00011A07 _data           ends
.data:00011A07
.rdata$r:00011A08 ; ===========================================================================
.rdata$r:00011A08
.rdata$r:00011A08 ; Segment type: Pure data
.rdata$r:00011A08 ; Segment permissions: Read
.rdata$r:00011A08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011A08                 assume cs:_rdata$r
.rdata$r:00011A08                 ;org 11A08h
.rdata$r:00011A08 ; COMDAT (pick any)
.rdata$r:00011A08                 public ??_R3CTailInStream@@8
.rdata$r:00011A08 ; CTailInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011A08 ??_R3CTailInStream@@8 db    0           ; DATA XREF: .rdata$r:000119E8o
.rdata$r:00011A08                                         ; .rdata$r:00011A48o
.rdata$r:00011A09                 db    0
.rdata$r:00011A0A                 db    0
.rdata$r:00011A0B                 db    0
.rdata$r:00011A0C                 db    1
.rdata$r:00011A0D                 db    0
.rdata$r:00011A0E                 db    0
.rdata$r:00011A0F                 db    0
.rdata$r:00011A10                 db    5
.rdata$r:00011A11                 db    0
.rdata$r:00011A12                 db    0
.rdata$r:00011A13                 db    0
.rdata$r:00011A14                 dd offset ??_R2CTailInStream@@8 ; CTailInStream::`RTTI Base Class Array'
.rdata$r:00011A14 _rdata$r        ends
.rdata$r:00011A14
.rdata$r:00011A18 ; ===========================================================================
.rdata$r:00011A18
.rdata$r:00011A18 ; Segment type: Pure data
.rdata$r:00011A18 ; Segment permissions: Read
.rdata$r:00011A18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011A18                 assume cs:_rdata$r
.rdata$r:00011A18                 ;org 11A18h
.rdata$r:00011A18 ; COMDAT (pick any)
.rdata$r:00011A18                 public ??_R2CTailInStream@@8
.rdata$r:00011A18 ; CTailInStream::`RTTI Base Class Array'
.rdata$r:00011A18 ??_R2CTailInStream@@8 dd offset ??_R1A@?0A@EA@CTailInStream@@8
.rdata$r:00011A18                                         ; DATA XREF: .rdata$r:00011A14o
.rdata$r:00011A18                                         ; CTailInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011A1C                 dd offset ??_R1A@?0A@EA@IInStream@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011A20                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011A24                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011A28                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00011A2C                 db    0
.rdata$r:00011A2D                 align 10h
.rdata$r:00011A2D _rdata$r        ends
.rdata$r:00011A2D
.rdata$r:00011A30 ; ===========================================================================
.rdata$r:00011A30
.rdata$r:00011A30 ; Segment type: Pure data
.rdata$r:00011A30 ; Segment permissions: Read
.rdata$r:00011A30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011A30                 assume cs:_rdata$r
.rdata$r:00011A30                 ;org 11A30h
.rdata$r:00011A30 ; COMDAT (pick any)
.rdata$r:00011A30                 public ??_R1A@?0A@EA@CTailInStream@@8
.rdata$r:00011A30 ; CTailInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011A30 ??_R1A@?0A@EA@CTailInStream@@8 dd offset ??_R0?AVCTailInStream@@@8
.rdata$r:00011A30                                         ; DATA XREF: .rdata$r:CTailInStream::`RTTI Base Class Array'o
.rdata$r:00011A30                                         ; CTailInStream `RTTI Type Descriptor'
.rdata$r:00011A34                 db    4
.rdata$r:00011A35                 db    0
.rdata$r:00011A36                 db    0
.rdata$r:00011A37                 db    0
.rdata$r:00011A38                 db    0
.rdata$r:00011A39                 db    0
.rdata$r:00011A3A                 db    0
.rdata$r:00011A3B                 db    0
.rdata$r:00011A3C                 db 0FFh
.rdata$r:00011A3D                 db 0FFh
.rdata$r:00011A3E                 db 0FFh
.rdata$r:00011A3F                 db 0FFh
.rdata$r:00011A40                 db    0
.rdata$r:00011A41                 db    0
.rdata$r:00011A42                 db    0
.rdata$r:00011A43                 db    0
.rdata$r:00011A44                 db  40h ; @
.rdata$r:00011A45                 db    0
.rdata$r:00011A46                 db    0
.rdata$r:00011A47                 db    0
.rdata$r:00011A48                 dd offset ??_R3CTailInStream@@8 ; CTailInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011A48 _rdata$r        ends
.rdata$r:00011A48
.text:00011A4C ; ===========================================================================
.text:00011A4C
.text:00011A4C ; Segment type: Pure code
.text:00011A4C ; Segment permissions: Read/Execute
.text:00011A4C _text           segment para public 'CODE' use32
.text:00011A4C                 assume cs:_text
.text:00011A4C                 ;org 11A4Ch
.text:00011A4C ; COMDAT (pick any)
.text:00011A4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011A4C
.text:00011A4C ; =============== S U B R O U T I N E =======================================
.text:00011A4C
.text:00011A4C ; Attributes: bp-based frame
.text:00011A4C
.text:00011A4C ; __int32 __stdcall CTailInStream::QueryInterface(CTailInStream *this, const struct _GUID *Buf1, void **)
.text:00011A4C                 public ?QueryInterface@CTailInStream@@UAGJABU_GUID@@PAPAX@Z
.text:00011A4C ?QueryInterface@CTailInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00011A4C                                         ; DATA XREF: .rdata:const CTailInStream::`vftable'o
.text:00011A4C
.text:00011A4C this            = dword ptr  8
.text:00011A4C Buf1            = dword ptr  0Ch
.text:00011A4C arg_8           = dword ptr  10h
.text:00011A4C
.text:00011A4C                 push    ebp
.text:00011A4D                 mov     ebp, esp
.text:00011A4F                 mov     eax, [ebp+arg_8]
.text:00011A52                 mov     dword ptr [eax], 0
.text:00011A58                 push    offset _IID_IUnknown ; Buf2
.text:00011A5D                 mov     ecx, [ebp+Buf1]
.text:00011A60                 push    ecx             ; Buf1
.text:00011A61                 call    ___@8           ; __(x,x)
.text:00011A66                 test    eax, eax
.text:00011A68                 jz      short loc_11A74
.text:00011A6A                 mov     edx, [ebp+arg_8]
.text:00011A6D                 mov     eax, [ebp+this]
.text:00011A70                 mov     [edx], eax
.text:00011A72                 jmp     short loc_11AB3
.text:00011A74 ; ---------------------------------------------------------------------------
.text:00011A74
.text:00011A74 loc_11A74:                              ; CODE XREF: CTailInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00011A74                 push    offset _IID_ISequentialInStream ; Buf2
.text:00011A79                 mov     ecx, [ebp+Buf1]
.text:00011A7C                 push    ecx             ; Buf1
.text:00011A7D                 call    ___@8           ; __(x,x)
.text:00011A82                 test    eax, eax
.text:00011A84                 jz      short loc_11A90
.text:00011A86                 mov     edx, [ebp+arg_8]
.text:00011A89                 mov     eax, [ebp+this]
.text:00011A8C                 mov     [edx], eax
.text:00011A8E                 jmp     short loc_11AB3
.text:00011A90 ; ---------------------------------------------------------------------------
.text:00011A90
.text:00011A90 loc_11A90:                              ; CODE XREF: CTailInStream::QueryInterface(_GUID const &,void * *)+38j
.text:00011A90                 push    offset _IID_IInStream ; Buf2
.text:00011A95                 mov     ecx, [ebp+Buf1]
.text:00011A98                 push    ecx             ; Buf1
.text:00011A99                 call    ___@8           ; __(x,x)
.text:00011A9E                 test    eax, eax
.text:00011AA0                 jz      short loc_11AAC
.text:00011AA2                 mov     edx, [ebp+arg_8]
.text:00011AA5                 mov     eax, [ebp+this]
.text:00011AA8                 mov     [edx], eax
.text:00011AAA                 jmp     short loc_11AB3
.text:00011AAC ; ---------------------------------------------------------------------------
.text:00011AAC
.text:00011AAC loc_11AAC:                              ; CODE XREF: CTailInStream::QueryInterface(_GUID const &,void * *)+54j
.text:00011AAC                 mov     eax, 80004002h
.text:00011AB1                 jmp     short loc_11AC4
.text:00011AB3 ; ---------------------------------------------------------------------------
.text:00011AB3
.text:00011AB3 loc_11AB3:                              ; CODE XREF: CTailInStream::QueryInterface(_GUID const &,void * *)+26j
.text:00011AB3                                         ; CTailInStream::QueryInterface(_GUID const &,void * *)+42j ...
.text:00011AB3                 mov     ecx, [ebp+this]
.text:00011AB6                 mov     edx, [ecx+4]
.text:00011AB9                 add     edx, 1
.text:00011ABC                 mov     eax, [ebp+this]
.text:00011ABF                 mov     [eax+4], edx
.text:00011AC2                 xor     eax, eax
.text:00011AC4
.text:00011AC4 loc_11AC4:                              ; CODE XREF: CTailInStream::QueryInterface(_GUID const &,void * *)+65j
.text:00011AC4                 cmp     ebp, esp
.text:00011AC6                 call    __RTC_CheckEsp
.text:00011ACB                 pop     ebp
.text:00011ACC                 retn    0Ch
.text:00011ACC ?QueryInterface@CTailInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00011ACC
.text:00011ACC ; ---------------------------------------------------------------------------
.text:00011ACF                 align 10h
.text:00011ACF _text           ends
.text:00011ACF
.text:00011AD0 ; ===========================================================================
.text:00011AD0
.text:00011AD0 ; Segment type: Pure code
.text:00011AD0 ; Segment permissions: Read/Execute
.text:00011AD0 _text           segment para public 'CODE' use32
.text:00011AD0                 assume cs:_text
.text:00011AD0                 ;org 11AD0h
.text:00011AD0 ; COMDAT (pick any)
.text:00011AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011AD0
.text:00011AD0 ; =============== S U B R O U T I N E =======================================
.text:00011AD0
.text:00011AD0 ; Attributes: bp-based frame
.text:00011AD0
.text:00011AD0 ; unsigned __int32 __stdcall CTailInStream::AddRef(CTailInStream *this)
.text:00011AD0                 public ?AddRef@CTailInStream@@UAGKXZ
.text:00011AD0 ?AddRef@CTailInStream@@UAGKXZ proc near ; DATA XREF: .rdata:000119C8o
.text:00011AD0
.text:00011AD0 var_4           = dword ptr -4
.text:00011AD0 this            = dword ptr  8
.text:00011AD0
.text:00011AD0                 push    ebp
.text:00011AD1                 mov     ebp, esp
.text:00011AD3                 push    ecx
.text:00011AD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011ADB                 mov     eax, [ebp+this]
.text:00011ADE                 mov     ecx, [eax+4]
.text:00011AE1                 add     ecx, 1
.text:00011AE4                 mov     [ebp+var_4], ecx
.text:00011AE7                 mov     edx, [ebp+this]
.text:00011AEA                 mov     eax, [ebp+var_4]
.text:00011AED                 mov     [edx+4], eax
.text:00011AF0                 mov     eax, [ebp+var_4]
.text:00011AF3                 mov     esp, ebp
.text:00011AF5                 pop     ebp
.text:00011AF6                 retn    4
.text:00011AF6 ?AddRef@CTailInStream@@UAGKXZ endp
.text:00011AF6
.text:00011AF6 ; ---------------------------------------------------------------------------
.text:00011AF9                 align 4
.text:00011AF9 _text           ends
.text:00011AF9
.text:00011AFC ; ===========================================================================
.text:00011AFC
.text:00011AFC ; Segment type: Pure code
.text:00011AFC ; Segment permissions: Read/Execute
.text:00011AFC _text           segment para public 'CODE' use32
.text:00011AFC                 assume cs:_text
.text:00011AFC                 ;org 11AFCh
.text:00011AFC ; COMDAT (pick any)
.text:00011AFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011AFC
.text:00011AFC ; =============== S U B R O U T I N E =======================================
.text:00011AFC
.text:00011AFC ; Attributes: bp-based frame
.text:00011AFC
.text:00011AFC ; unsigned __int32 __stdcall CTailInStream::Release(CTailInStream *this)
.text:00011AFC                 public ?Release@CTailInStream@@UAGKXZ
.text:00011AFC ?Release@CTailInStream@@UAGKXZ proc near ; DATA XREF: .rdata:000119CCo
.text:00011AFC
.text:00011AFC var_10          = dword ptr -10h
.text:00011AFC var_C           = dword ptr -0Ch
.text:00011AFC var_8           = dword ptr -8
.text:00011AFC var_4           = dword ptr -4
.text:00011AFC this            = dword ptr  8
.text:00011AFC
.text:00011AFC                 push    ebp
.text:00011AFD                 mov     ebp, esp
.text:00011AFF                 sub     esp, 10h
.text:00011B02                 mov     eax, 0CCCCCCCCh
.text:00011B07                 mov     [ebp+var_10], eax
.text:00011B0A                 mov     [ebp+var_C], eax
.text:00011B0D                 mov     [ebp+var_8], eax
.text:00011B10                 mov     [ebp+var_4], eax
.text:00011B13                 mov     eax, [ebp+this]
.text:00011B16                 mov     ecx, [eax+4]
.text:00011B19                 sub     ecx, 1
.text:00011B1C                 mov     [ebp+var_C], ecx
.text:00011B1F                 mov     edx, [ebp+this]
.text:00011B22                 mov     eax, [ebp+var_C]
.text:00011B25                 mov     [edx+4], eax
.text:00011B28                 cmp     [ebp+var_C], 0
.text:00011B2C                 jz      short loc_11B36
.text:00011B2E                 mov     ecx, [ebp+this]
.text:00011B31                 mov     eax, [ecx+4]
.text:00011B34                 jmp     short loc_11B60
.text:00011B36 ; ---------------------------------------------------------------------------
.text:00011B36
.text:00011B36 loc_11B36:                              ; CODE XREF: CTailInStream::Release(void)+30j
.text:00011B36                 mov     edx, [ebp+this]
.text:00011B39                 mov     [ebp+var_8], edx
.text:00011B3C                 mov     eax, [ebp+var_8]
.text:00011B3F                 mov     [ebp+var_4], eax
.text:00011B42                 cmp     [ebp+var_4], 0
.text:00011B46                 jz      short loc_11B57
.text:00011B48                 push    1
.text:00011B4A                 mov     ecx, [ebp+var_4]
.text:00011B4D                 call    ??_GCTailInStream@@QAEPAXI@Z ; CTailInStream::`scalar deleting destructor'(uint)
.text:00011B52                 mov     [ebp+var_10], eax
.text:00011B55                 jmp     short loc_11B5E
.text:00011B57 ; ---------------------------------------------------------------------------
.text:00011B57
.text:00011B57 loc_11B57:                              ; CODE XREF: CTailInStream::Release(void)+4Aj
.text:00011B57                 mov     [ebp+var_10], 0
.text:00011B5E
.text:00011B5E loc_11B5E:                              ; CODE XREF: CTailInStream::Release(void)+59j
.text:00011B5E                 xor     eax, eax
.text:00011B60
.text:00011B60 loc_11B60:                              ; CODE XREF: CTailInStream::Release(void)+38j
.text:00011B60                 add     esp, 10h
.text:00011B63                 cmp     ebp, esp
.text:00011B65                 call    __RTC_CheckEsp
.text:00011B6A                 mov     esp, ebp
.text:00011B6C                 pop     ebp
.text:00011B6D                 retn    4
.text:00011B6D ?Release@CTailInStream@@UAGKXZ endp
.text:00011B6D
.text:00011B6D _text           ends
.text:00011B6D
.text:00011B70 ; ===========================================================================
.text:00011B70
.text:00011B70 ; Segment type: Pure code
.text:00011B70 ; Segment permissions: Read/Execute
.text:00011B70 _text           segment para public 'CODE' use32
.text:00011B70                 assume cs:_text
.text:00011B70                 ;org 11B70h
.text:00011B70 ; COMDAT (pick any)
.text:00011B70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011B70
.text:00011B70 ; =============== S U B R O U T I N E =======================================
.text:00011B70
.text:00011B70 ; Attributes: bp-based frame
.text:00011B70
.text:00011B70 ; public: void * __thiscall CTailInStream::`scalar deleting destructor'(unsigned int)
.text:00011B70                 public ??_GCTailInStream@@QAEPAXI@Z
.text:00011B70 ??_GCTailInStream@@QAEPAXI@Z proc near  ; CODE XREF: CTailInStream::Release(void)+51p
.text:00011B70
.text:00011B70 var_4           = dword ptr -4
.text:00011B70 arg_0           = dword ptr  8
.text:00011B70
.text:00011B70                 push    ebp
.text:00011B71                 mov     ebp, esp
.text:00011B73                 push    ecx
.text:00011B74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011B7B                 mov     [ebp+var_4], ecx
.text:00011B7E                 mov     ecx, [ebp+var_4] ; this
.text:00011B81                 call    ??1CTailInStream@@QAE@XZ ; CTailInStream::~CTailInStream(void)
.text:00011B86                 mov     eax, [ebp+arg_0]
.text:00011B89                 and     eax, 1
.text:00011B8C                 jz      short loc_11B9A
.text:00011B8E                 mov     ecx, [ebp+var_4]
.text:00011B91                 push    ecx             ; void *
.text:00011B92                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00011B97                 add     esp, 4
.text:00011B9A
.text:00011B9A loc_11B9A:                              ; CODE XREF: CTailInStream::`scalar deleting destructor'(uint)+1Cj
.text:00011B9A                 mov     eax, [ebp+var_4]
.text:00011B9D                 add     esp, 4
.text:00011BA0                 cmp     ebp, esp
.text:00011BA2                 call    __RTC_CheckEsp
.text:00011BA7                 mov     esp, ebp
.text:00011BA9                 pop     ebp
.text:00011BAA                 retn    4
.text:00011BAA ??_GCTailInStream@@QAEPAXI@Z endp
.text:00011BAA
.text:00011BAA ; ---------------------------------------------------------------------------
.text:00011BAD                 align 10h
.text:00011BAD _text           ends
.text:00011BAD
.text:00011BB0 ; ===========================================================================
.text:00011BB0
.text:00011BB0 ; Segment type: Pure code
.text:00011BB0 ; Segment permissions: Read/Execute
.text:00011BB0 _text           segment para public 'CODE' use32
.text:00011BB0                 assume cs:_text
.text:00011BB0                 ;org 11BB0h
.text:00011BB0 ; COMDAT (pick any)
.text:00011BB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011BB0
.text:00011BB0 ; =============== S U B R O U T I N E =======================================
.text:00011BB0
.text:00011BB0 ; Attributes: bp-based frame
.text:00011BB0
.text:00011BB0 ; _DWORD __thiscall CTailInStream::~CTailInStream(CTailInStream *__hidden this)
.text:00011BB0                 public ??1CTailInStream@@QAE@XZ
.text:00011BB0 ??1CTailInStream@@QAE@XZ proc near      ; CODE XREF: CTailInStream::`scalar deleting destructor'(uint)+11p
.text:00011BB0
.text:00011BB0 var_4           = dword ptr -4
.text:00011BB0
.text:00011BB0                 push    ebp
.text:00011BB1                 mov     ebp, esp
.text:00011BB3                 push    ecx
.text:00011BB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011BBB                 mov     [ebp+var_4], ecx
.text:00011BBE                 mov     ecx, [ebp+var_4]
.text:00011BC1                 add     ecx, 10h
.text:00011BC4                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00011BC9                 add     esp, 4
.text:00011BCC                 cmp     ebp, esp
.text:00011BCE                 call    __RTC_CheckEsp
.text:00011BD3                 mov     esp, ebp
.text:00011BD5                 pop     ebp
.text:00011BD6                 retn
.text:00011BD6 ??1CTailInStream@@QAE@XZ endp
.text:00011BD6
.text:00011BD6 ; ---------------------------------------------------------------------------
.text:00011BD7                 align 4
.text:00011BD7 _text           ends
.text:00011BD7
.text:00011BD8 ; ===========================================================================
.text:00011BD8
.text:00011BD8 ; Segment type: Pure code
.text:00011BD8 ; Segment permissions: Read/Execute
.text:00011BD8 _text           segment para public 'CODE' use32
.text:00011BD8                 assume cs:_text
.text:00011BD8                 ;org 11BD8h
.text:00011BD8 ; COMDAT (pick any)
.text:00011BD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011BD8
.text:00011BD8 ; =============== S U B R O U T I N E =======================================
.text:00011BD8
.text:00011BD8 ; Attributes: bp-based frame
.text:00011BD8
.text:00011BD8 ; wchar_t __stdcall MyCharLower_Ascii(wchar_t)
.text:00011BD8                 public ?MyCharLower_Ascii@@YG_W_W@Z
.text:00011BD8 ?MyCharLower_Ascii@@YG_W_W@Z proc near  ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+90p
.text:00011BD8
.text:00011BD8 arg_0           = word ptr  8
.text:00011BD8
.text:00011BD8                 push    ebp
.text:00011BD9                 mov     ebp, esp
.text:00011BDB                 movzx   eax, [ebp+arg_0]
.text:00011BDF                 cmp     eax, 41h ; 'A'
.text:00011BE2                 jl      short loc_11BF6
.text:00011BE4                 movzx   ecx, [ebp+arg_0]
.text:00011BE8                 cmp     ecx, 5Ah ; 'Z'
.text:00011BEB                 jg      short loc_11BF6
.text:00011BED                 movzx   eax, [ebp+arg_0]
.text:00011BF1                 add     eax, 20h ; ' '
.text:00011BF4                 jmp     short loc_11BFA
.text:00011BF6 ; ---------------------------------------------------------------------------
.text:00011BF6
.text:00011BF6 loc_11BF6:                              ; CODE XREF: MyCharLower_Ascii(wchar_t)+Aj
.text:00011BF6                                         ; MyCharLower_Ascii(wchar_t)+13j
.text:00011BF6                 mov     ax, [ebp+arg_0]
.text:00011BFA
.text:00011BFA loc_11BFA:                              ; CODE XREF: MyCharLower_Ascii(wchar_t)+1Cj
.text:00011BFA                 pop     ebp
.text:00011BFB                 retn    4
.text:00011BFB ?MyCharLower_Ascii@@YG_W_W@Z endp
.text:00011BFB
.text:00011BFB ; ---------------------------------------------------------------------------
.text:00011BFE                 align 10h
.text:00011BFE _text           ends
.text:00011BFE
.text:00011C00 ; ===========================================================================
.text:00011C00
.text:00011C00 ; Segment type: Pure code
.text:00011C00 ; Segment permissions: Read/Execute
.text:00011C00 _text           segment para public 'CODE' use32
.text:00011C00                 assume cs:_text
.text:00011C00                 ;org 11C00h
.text:00011C00 ; COMDAT (pick any)
.text:00011C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011C00
.text:00011C00 ; =============== S U B R O U T I N E =======================================
.text:00011C00
.text:00011C00 ; Attributes: bp-based frame
.text:00011C00
.text:00011C00 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00011C00                 public ?Len@UString@@QBEIXZ
.text:00011C00 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+66p
.text:00011C00                                         ; ParseType(CCodecs &,UString const &,COpenType &)+182p ...
.text:00011C00
.text:00011C00 var_4           = dword ptr -4
.text:00011C00
.text:00011C00                 push    ebp
.text:00011C01                 mov     ebp, esp
.text:00011C03                 push    ecx
.text:00011C04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011C0B                 mov     [ebp+var_4], ecx
.text:00011C0E                 mov     eax, [ebp+var_4]
.text:00011C11                 mov     eax, [eax+4]
.text:00011C14                 mov     esp, ebp
.text:00011C16                 pop     ebp
.text:00011C17                 retn
.text:00011C17 ?Len@UString@@QBEIXZ endp
.text:00011C17
.text:00011C17 _text           ends
.text:00011C17
.text:00011C18 ; ===========================================================================
.text:00011C18
.text:00011C18 ; Segment type: Pure code
.text:00011C18 ; Segment permissions: Read/Execute
.text:00011C18 _text           segment para public 'CODE' use32
.text:00011C18                 assume cs:_text
.text:00011C18                 ;org 11C18h
.text:00011C18 ; COMDAT (pick any)
.text:00011C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011C18
.text:00011C18 ; =============== S U B R O U T I N E =======================================
.text:00011C18
.text:00011C18 ; Attributes: bp-based frame
.text:00011C18
.text:00011C18 ; public: class UString __thiscall UString::Mid(unsigned int, unsigned int)const
.text:00011C18                 public ?Mid@UString@@QBE?AV1@II@Z
.text:00011C18 ?Mid@UString@@QBE?AV1@II@Z proc near    ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+1C4p
.text:00011C18                                         ; ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+89p
.text:00011C18
.text:00011C18 var_8           = dword ptr -8
.text:00011C18 var_4           = dword ptr -4
.text:00011C18 arg_0           = dword ptr  8
.text:00011C18 arg_4           = dword ptr  0Ch
.text:00011C18 arg_8           = dword ptr  10h
.text:00011C18
.text:00011C18                 push    ebp
.text:00011C19                 mov     ebp, esp
.text:00011C1B                 sub     esp, 8
.text:00011C1E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00011C25                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011C2C                 mov     [ebp+var_4], ecx
.text:00011C2F                 mov     [ebp+var_8], 0
.text:00011C36                 mov     eax, [ebp+var_4]
.text:00011C39                 mov     ecx, [eax]
.text:00011C3B                 mov     edx, [ebp+arg_4]
.text:00011C3E                 lea     eax, [ecx+edx*2]
.text:00011C41                 push    eax
.text:00011C42                 mov     ecx, [ebp+arg_8]
.text:00011C45                 push    ecx
.text:00011C46                 mov     ecx, [ebp+arg_0]
.text:00011C49                 call    ??0UString@@AAE@IPB_W@Z ; UString::UString(uint,wchar_t const *)
.text:00011C4E                 mov     edx, [ebp+var_8]
.text:00011C51                 or      edx, 1
.text:00011C54                 mov     [ebp+var_8], edx
.text:00011C57                 mov     eax, [ebp+arg_0]
.text:00011C5A                 add     esp, 8
.text:00011C5D                 cmp     ebp, esp
.text:00011C5F                 call    __RTC_CheckEsp
.text:00011C64                 mov     esp, ebp
.text:00011C66                 pop     ebp
.text:00011C67                 retn    0Ch
.text:00011C67 ?Mid@UString@@QBE?AV1@II@Z endp
.text:00011C67
.text:00011C67 ; ---------------------------------------------------------------------------
.text:00011C6A                 align 4
.text:00011C6A _text           ends
.text:00011C6A
.text:00011C6C ; ===========================================================================
.text:00011C6C
.text:00011C6C ; Segment type: Pure code
.text:00011C6C ; Segment permissions: Read/Execute
.text:00011C6C _text           segment para public 'CODE' use32
.text:00011C6C                 assume cs:_text
.text:00011C6C                 ;org 11C6Ch
.text:00011C6C ; COMDAT (pick any)
.text:00011C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011C6C
.text:00011C6C ; =============== S U B R O U T I N E =======================================
.text:00011C6C
.text:00011C6C ; Attributes: bp-based frame
.text:00011C6C
.text:00011C6C ; public: class UString __thiscall UString::Left(unsigned int)const
.text:00011C6C                 public ?Left@UString@@QBE?AV1@I@Z
.text:00011C6C ?Left@UString@@QBE?AV1@I@Z proc near    ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+7Bp
.text:00011C6C
.text:00011C6C var_8           = dword ptr -8
.text:00011C6C var_4           = dword ptr -4
.text:00011C6C arg_0           = dword ptr  8
.text:00011C6C arg_4           = dword ptr  0Ch
.text:00011C6C
.text:00011C6C                 push    ebp
.text:00011C6D                 mov     ebp, esp
.text:00011C6F                 sub     esp, 8
.text:00011C72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00011C79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011C80                 mov     [ebp+var_4], ecx
.text:00011C83                 mov     [ebp+var_8], 0
.text:00011C8A                 mov     eax, [ebp+var_4]
.text:00011C8D                 push    eax
.text:00011C8E                 mov     ecx, [ebp+arg_4]
.text:00011C91                 push    ecx
.text:00011C92                 mov     ecx, [ebp+arg_0]
.text:00011C95                 call    ??0UString@@AAE@IABV0@@Z ; UString::UString(uint,UString const &)
.text:00011C9A                 mov     edx, [ebp+var_8]
.text:00011C9D                 or      edx, 1
.text:00011CA0                 mov     [ebp+var_8], edx
.text:00011CA3                 mov     eax, [ebp+arg_0]
.text:00011CA6                 add     esp, 8
.text:00011CA9                 cmp     ebp, esp
.text:00011CAB                 call    __RTC_CheckEsp
.text:00011CB0                 mov     esp, ebp
.text:00011CB2                 pop     ebp
.text:00011CB3                 retn    8
.text:00011CB3 ?Left@UString@@QBE?AV1@I@Z endp
.text:00011CB3
.text:00011CB3 ; ---------------------------------------------------------------------------
.text:00011CB6                 align 4
.text:00011CB6 _text           ends
.text:00011CB6
.text:00011CB8 ; ===========================================================================
.text:00011CB8
.text:00011CB8 ; Segment type: Pure code
.text:00011CB8 ; Segment permissions: Read/Execute
.text:00011CB8 _text           segment para public 'CODE' use32
.text:00011CB8                 assume cs:_text
.text:00011CB8                 ;org 11CB8h
.text:00011CB8 ; COMDAT (pick any)
.text:00011CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011CB8
.text:00011CB8 ; =============== S U B R O U T I N E =======================================
.text:00011CB8
.text:00011CB8 ; Attributes: bp-based frame
.text:00011CB8
.text:00011CB8 ; int __thiscall UString::Find(UString *this, wchar_t)
.text:00011CB8                 public ?Find@UString@@QBEH_W@Z
.text:00011CB8 ?Find@UString@@QBEH_W@Z proc near       ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+3Ap
.text:00011CB8
.text:00011CB8 var_4           = dword ptr -4
.text:00011CB8 arg_0           = word ptr  8
.text:00011CB8
.text:00011CB8                 push    ebp
.text:00011CB9                 mov     ebp, esp
.text:00011CBB                 push    ecx
.text:00011CBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011CC3                 mov     [ebp+var_4], ecx
.text:00011CC6                 movzx   eax, [ebp+arg_0]
.text:00011CCA                 push    eax             ; wchar_t
.text:00011CCB                 mov     ecx, [ebp+var_4]
.text:00011CCE                 mov     edx, [ecx]
.text:00011CD0                 push    edx             ; wchar_t *
.text:00011CD1                 call    ?FindCharPosInString@@YGHPB_W_W@Z ; FindCharPosInString(wchar_t const *,wchar_t)
.text:00011CD6                 add     esp, 4
.text:00011CD9                 cmp     ebp, esp
.text:00011CDB                 call    __RTC_CheckEsp
.text:00011CE0                 mov     esp, ebp
.text:00011CE2                 pop     ebp
.text:00011CE3                 retn    4
.text:00011CE3 ?Find@UString@@QBEH_W@Z endp
.text:00011CE3
.text:00011CE3 ; ---------------------------------------------------------------------------
.text:00011CE6                 align 4
.text:00011CE6 _text           ends
.text:00011CE6
.text:00011CE8 ; ===========================================================================
.text:00011CE8
.text:00011CE8 ; Segment type: Pure code
.text:00011CE8 ; Segment permissions: Read/Execute
.text:00011CE8 _text           segment para public 'CODE' use32
.text:00011CE8                 assume cs:_text
.text:00011CE8                 ;org 11CE8h
.text:00011CE8 ; COMDAT (pick any)
.text:00011CE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011CE8
.text:00011CE8 ; =============== S U B R O U T I N E =======================================
.text:00011CE8
.text:00011CE8 ; Attributes: bp-based frame
.text:00011CE8
.text:00011CE8 ; int __thiscall UString::Find(UString *this, wchar_t, unsigned int)
.text:00011CE8                 public ?Find@UString@@QBEH_WI@Z
.text:00011CE8 ?Find@UString@@QBEH_WI@Z proc near      ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+199p
.text:00011CE8                                         ; ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+5Ep
.text:00011CE8
.text:00011CE8 var_C           = dword ptr -0Ch
.text:00011CE8 var_8           = dword ptr -8
.text:00011CE8 var_4           = dword ptr -4
.text:00011CE8 arg_0           = word ptr  8
.text:00011CE8 arg_4           = dword ptr  0Ch
.text:00011CE8
.text:00011CE8                 push    ebp
.text:00011CE9                 mov     ebp, esp
.text:00011CEB                 sub     esp, 0Ch
.text:00011CEE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00011CF5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00011CFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011D03                 mov     [ebp+var_4], ecx
.text:00011D06                 movzx   eax, [ebp+arg_0]
.text:00011D0A                 push    eax             ; wchar_t
.text:00011D0B                 mov     ecx, [ebp+var_4]
.text:00011D0E                 mov     edx, [ecx]
.text:00011D10                 mov     eax, [ebp+arg_4]
.text:00011D13                 lea     ecx, [edx+eax*2]
.text:00011D16                 push    ecx             ; wchar_t *
.text:00011D17                 call    ?FindCharPosInString@@YGHPB_W_W@Z ; FindCharPosInString(wchar_t const *,wchar_t)
.text:00011D1C                 mov     [ebp+var_8], eax
.text:00011D1F                 cmp     [ebp+var_8], 0
.text:00011D23                 jge     short loc_11D2E
.text:00011D25                 mov     [ebp+var_C], 0FFFFFFFFh
.text:00011D2C                 jmp     short loc_11D37
.text:00011D2E ; ---------------------------------------------------------------------------
.text:00011D2E
.text:00011D2E loc_11D2E:                              ; CODE XREF: UString::Find(wchar_t,uint)+3Bj
.text:00011D2E                 mov     edx, [ebp+arg_4]
.text:00011D31                 add     edx, [ebp+var_8]
.text:00011D34                 mov     [ebp+var_C], edx
.text:00011D37
.text:00011D37 loc_11D37:                              ; CODE XREF: UString::Find(wchar_t,uint)+44j
.text:00011D37                 mov     eax, [ebp+var_C]
.text:00011D3A                 add     esp, 0Ch
.text:00011D3D                 cmp     ebp, esp
.text:00011D3F                 call    __RTC_CheckEsp
.text:00011D44                 mov     esp, ebp
.text:00011D46                 pop     ebp
.text:00011D47                 retn    8
.text:00011D47 ?Find@UString@@QBEH_WI@Z endp
.text:00011D47
.text:00011D47 ; ---------------------------------------------------------------------------
.text:00011D4A                 align 4
.text:00011D4A _text           ends
.text:00011D4A
.text:00011D4C ; ===========================================================================
.text:00011D4C
.text:00011D4C ; Segment type: Pure code
.text:00011D4C ; Segment permissions: Read/Execute
.text:00011D4C _text           segment para public 'CODE' use32
.text:00011D4C                 assume cs:_text
.text:00011D4C                 ;org 11D4Ch
.text:00011D4C ; COMDAT (pick any)
.text:00011D4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011D4C
.text:00011D4C ; =============== S U B R O U T I N E =======================================
.text:00011D4C
.text:00011D4C ; Attributes: bp-based frame
.text:00011D4C
.text:00011D4C ; public: unsigned int __thiscall CObjectVector<class UString>::Size(void)const
.text:00011D4C                 public ?Size@?$CObjectVector@VUString@@@@QBEIXZ
.text:00011D4C ?Size@?$CObjectVector@VUString@@@@QBEIXZ proc near
.text:00011D4C                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+303p
.text:00011D4C
.text:00011D4C var_4           = dword ptr -4
.text:00011D4C
.text:00011D4C                 push    ebp
.text:00011D4D                 mov     ebp, esp
.text:00011D4F                 push    ecx
.text:00011D50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011D57                 mov     [ebp+var_4], ecx
.text:00011D5A                 mov     ecx, [ebp+var_4]
.text:00011D5D                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00011D62                 add     esp, 4
.text:00011D65                 cmp     ebp, esp
.text:00011D67                 call    __RTC_CheckEsp
.text:00011D6C                 mov     esp, ebp
.text:00011D6E                 pop     ebp
.text:00011D6F                 retn
.text:00011D6F ?Size@?$CObjectVector@VUString@@@@QBEIXZ endp
.text:00011D6F
.text:00011D6F _text           ends
.text:00011D6F
.text:00011D70 ; ===========================================================================
.text:00011D70
.text:00011D70 ; Segment type: Pure code
.text:00011D70 ; Segment permissions: Read/Execute
.text:00011D70 _text           segment para public 'CODE' use32
.text:00011D70                 assume cs:_text
.text:00011D70                 ;org 11D70h
.text:00011D70 ; COMDAT (pick any)
.text:00011D70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011D70
.text:00011D70 ; =============== S U B R O U T I N E =======================================
.text:00011D70
.text:00011D70 ; Attributes: bp-based frame
.text:00011D70
.text:00011D70 ; public: bool __thiscall CObjectVector<class UString>::IsEmpty(void)const
.text:00011D70                 public ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
.text:00011D70 ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ proc near
.text:00011D70                                         ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+411p
.text:00011D70
.text:00011D70 var_4           = dword ptr -4
.text:00011D70
.text:00011D70                 push    ebp
.text:00011D71                 mov     ebp, esp
.text:00011D73                 push    ecx
.text:00011D74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011D7B                 mov     [ebp+var_4], ecx
.text:00011D7E                 mov     ecx, [ebp+var_4]
.text:00011D81                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00011D86                 add     esp, 4
.text:00011D89                 cmp     ebp, esp
.text:00011D8B                 call    __RTC_CheckEsp
.text:00011D90                 mov     esp, ebp
.text:00011D92                 pop     ebp
.text:00011D93                 retn
.text:00011D93 ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ endp
.text:00011D93
.text:00011D93 _text           ends
.text:00011D93
.text:00011D94 ; ===========================================================================
.text:00011D94
.text:00011D94 ; Segment type: Pure code
.text:00011D94 ; Segment permissions: Read/Execute
.text:00011D94 _text           segment para public 'CODE' use32
.text:00011D94                 assume cs:_text
.text:00011D94                 ;org 11D94h
.text:00011D94 ; COMDAT (pick any)
.text:00011D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011D94
.text:00011D94 ; =============== S U B R O U T I N E =======================================
.text:00011D94
.text:00011D94 ; Attributes: bp-based frame
.text:00011D94
.text:00011D94 ; public: __thiscall CObjectVector<class UString>::CObjectVector<class UString>(void)
.text:00011D94                 public ??0?$CObjectVector@VUString@@@@QAE@XZ
.text:00011D94 ??0?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00011D94                                         ; CODE XREF: COpenCallbackImp::COpenCallbackImp(void)+BEp
.text:00011D94
.text:00011D94 var_4           = dword ptr -4
.text:00011D94
.text:00011D94                 push    ebp
.text:00011D95                 mov     ebp, esp
.text:00011D97                 push    ecx
.text:00011D98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011D9F                 mov     [ebp+var_4], ecx
.text:00011DA2                 mov     ecx, [ebp+var_4]
.text:00011DA5                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00011DAA                 mov     eax, [ebp+var_4]
.text:00011DAD                 add     esp, 4
.text:00011DB0                 cmp     ebp, esp
.text:00011DB2                 call    __RTC_CheckEsp
.text:00011DB7                 mov     esp, ebp
.text:00011DB9                 pop     ebp
.text:00011DBA                 retn
.text:00011DBA ??0?$CObjectVector@VUString@@@@QAE@XZ endp
.text:00011DBA
.text:00011DBA ; ---------------------------------------------------------------------------
.text:00011DBB                 align 4
.text:00011DBB _text           ends
.text:00011DBB
.text:00011DBC ; ===========================================================================
.text:00011DBC
.text:00011DBC ; Segment type: Pure code
.text:00011DBC ; Segment permissions: Read/Execute
.text:00011DBC _text           segment para public 'CODE' use32
.text:00011DBC                 assume cs:_text
.text:00011DBC                 ;org 11DBCh
.text:00011DBC ; COMDAT (pick any)
.text:00011DBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011DBC
.text:00011DBC ; =============== S U B R O U T I N E =======================================
.text:00011DBC
.text:00011DBC ; Attributes: bp-based frame
.text:00011DBC
.text:00011DBC ; public: class UString & __thiscall CObjectVector<class UString>::operator[](unsigned int)
.text:00011DBC                 public ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
.text:00011DBC ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z proc near
.text:00011DBC                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+30Fp
.text:00011DBC                                         ; CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+1E9p ...
.text:00011DBC
.text:00011DBC var_4           = dword ptr -4
.text:00011DBC arg_0           = dword ptr  8
.text:00011DBC
.text:00011DBC                 push    ebp
.text:00011DBD                 mov     ebp, esp
.text:00011DBF                 push    ecx
.text:00011DC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011DC7                 mov     [ebp+var_4], ecx
.text:00011DCA                 mov     eax, [ebp+arg_0]
.text:00011DCD                 push    eax
.text:00011DCE                 mov     ecx, [ebp+var_4]
.text:00011DD1                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00011DD6                 mov     eax, [eax]
.text:00011DD8                 add     esp, 4
.text:00011DDB                 cmp     ebp, esp
.text:00011DDD                 call    __RTC_CheckEsp
.text:00011DE2                 mov     esp, ebp
.text:00011DE4                 pop     ebp
.text:00011DE5                 retn    4
.text:00011DE5 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z endp
.text:00011DE5
.text:00011DE5 _text           ends
.text:00011DE5
.text:00011DE8 ; ===========================================================================
.text:00011DE8
.text:00011DE8 ; Segment type: Pure code
.text:00011DE8 ; Segment permissions: Read/Execute
.text:00011DE8 _text           segment para public 'CODE' use32
.text:00011DE8                 assume cs:_text
.text:00011DE8                 ;org 11DE8h
.text:00011DE8 ; COMDAT (pick any)
.text:00011DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011DE8
.text:00011DE8 ; =============== S U B R O U T I N E =======================================
.text:00011DE8
.text:00011DE8 ; Attributes: bp-based frame
.text:00011DE8
.text:00011DE8 ; public: class UString & __thiscall CObjectVector<class UString>::Back(void)
.text:00011DE8                 public ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
.text:00011DE8 ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ proc near
.text:00011DE8                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+32Ap
.text:00011DE8                                         ; CArc::GetItem(uint,CReadArcItem &)+427p
.text:00011DE8
.text:00011DE8 var_4           = dword ptr -4
.text:00011DE8
.text:00011DE8                 push    ebp
.text:00011DE9                 mov     ebp, esp
.text:00011DEB                 push    ecx
.text:00011DEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011DF3                 mov     [ebp+var_4], ecx
.text:00011DF6                 mov     ecx, [ebp+var_4]
.text:00011DF9                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00011DFE                 sub     eax, 1
.text:00011E01                 push    eax
.text:00011E02                 mov     ecx, [ebp+var_4]
.text:00011E05                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00011E0A                 add     esp, 4
.text:00011E0D                 cmp     ebp, esp
.text:00011E0F                 call    __RTC_CheckEsp
.text:00011E14                 mov     esp, ebp
.text:00011E16                 pop     ebp
.text:00011E17                 retn
.text:00011E17 ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ endp
.text:00011E17
.text:00011E17 _text           ends
.text:00011E17
.text:00011E18 ; ===========================================================================
.text:00011E18
.text:00011E18 ; Segment type: Pure code
.text:00011E18 ; Segment permissions: Read/Execute
.text:00011E18 _text           segment para public 'CODE' use32
.text:00011E18                 assume cs:_text
.text:00011E18                 ;org 11E18h
.text:00011E18 ; COMDAT (pick any)
.text:00011E18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011E18
.text:00011E18 ; =============== S U B R O U T I N E =======================================
.text:00011E18
.text:00011E18 ; Attributes: bp-based frame
.text:00011E18
.text:00011E18 ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00011E18                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00011E18 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00011E18                                         ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+213p
.text:00011E18
.text:00011E18 var_1C          = dword ptr -1Ch
.text:00011E18 var_18          = dword ptr -18h
.text:00011E18 var_14          = dword ptr -14h
.text:00011E18 var_10          = dword ptr -10h
.text:00011E18 var_C           = dword ptr -0Ch
.text:00011E18 var_4           = dword ptr -4
.text:00011E18 arg_0           = dword ptr  8
.text:00011E18
.text:00011E18                 push    ebp
.text:00011E19                 mov     ebp, esp
.text:00011E1B                 push    0FFFFFFFFh
.text:00011E1D                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00011E22                 mov     eax, large fs:0
.text:00011E28                 push    eax
.text:00011E29                 sub     esp, 10h
.text:00011E2C                 mov     eax, 0CCCCCCCCh
.text:00011E31                 mov     [ebp+var_1C], eax
.text:00011E34                 mov     [ebp+var_18], eax
.text:00011E37                 mov     [ebp+var_14], eax
.text:00011E3A                 mov     [ebp+var_10], eax
.text:00011E3D                 mov     eax, dword ptr ds:___security_cookie
.text:00011E42                 xor     eax, ebp
.text:00011E44                 push    eax
.text:00011E45                 lea     eax, [ebp+var_C]
.text:00011E48                 mov     large fs:0, eax
.text:00011E4E                 mov     [ebp+var_10], ecx
.text:00011E51                 push    0Ch             ; unsigned int
.text:00011E53                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00011E58                 add     esp, 4
.text:00011E5B                 mov     [ebp+var_18], eax
.text:00011E5E                 mov     [ebp+var_4], 0
.text:00011E65                 cmp     [ebp+var_18], 0
.text:00011E69                 jz      short loc_11E7C
.text:00011E6B                 mov     eax, [ebp+arg_0]
.text:00011E6E                 push    eax
.text:00011E6F                 mov     ecx, [ebp+var_18]
.text:00011E72                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00011E77                 mov     [ebp+var_1C], eax
.text:00011E7A                 jmp     short loc_11E83
.text:00011E7C ; ---------------------------------------------------------------------------
.text:00011E7C
.text:00011E7C loc_11E7C:                              ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:00011E7C                 mov     [ebp+var_1C], 0
.text:00011E83
.text:00011E83 loc_11E83:                              ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:00011E83                 mov     ecx, [ebp+var_1C]
.text:00011E86                 mov     [ebp+var_14], ecx
.text:00011E89                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00011E90                 mov     edx, [ebp+var_14]
.text:00011E93                 push    edx
.text:00011E94                 mov     ecx, [ebp+var_10]
.text:00011E97                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00011E9C                 mov     ecx, [ebp+var_C]
.text:00011E9F                 mov     large fs:0, ecx
.text:00011EA6                 pop     ecx
.text:00011EA7                 add     esp, 1Ch
.text:00011EAA                 cmp     ebp, esp
.text:00011EAC                 call    __RTC_CheckEsp
.text:00011EB1                 mov     esp, ebp
.text:00011EB3                 pop     ebp
.text:00011EB4                 retn    4
.text:00011EB4 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:00011EB4
.text:00011EB4 ; ---------------------------------------------------------------------------
.text:00011EB7                 align 4
.text:00011EB7 _text           ends
.text:00011EB7
.text$x:00011EB8 ; ===========================================================================
.text$x:00011EB8
.text$x:00011EB8 ; Segment type: Pure code
.text$x:00011EB8 ; Segment permissions: Read/Execute
.text$x:00011EB8 _text$x         segment para public 'CODE' use32
.text$x:00011EB8                 assume cs:_text$x
.text$x:00011EB8                 ;org 11EB8h
.text$x:00011EB8 ; COMDAT (pick associative to section at 11E18)
.text$x:00011EB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00011EB8
.text$x:00011EB8 ; =============== S U B R O U T I N E =======================================
.text$x:00011EB8
.text$x:00011EB8
.text$x:00011EB8 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:00011EB8                                         ; DATA XREF: .xdata$x:00011EE4o
.text$x:00011EB8                 mov     eax, [ebp-18h]
.text$x:00011EBB                 push    eax             ; void *
.text$x:00011EBC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00011EC1                 pop     ecx
.text$x:00011EC2                 retn
.text$x:00011EC2 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:00011EC2
.text$x:00011EC3
.text$x:00011EC3 ; =============== S U B R O U T I N E =======================================
.text$x:00011EC3
.text$x:00011EC3
.text$x:00011EC3 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:00011EC3                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:00011EC3
.text$x:00011EC3 arg_4           = dword ptr  8
.text$x:00011EC3
.text$x:00011EC3                 mov     edx, [esp+arg_4]
.text$x:00011EC7                 lea     eax, [edx+0Ch]
.text$x:00011ECA                 mov     ecx, [edx-14h]
.text$x:00011ECD                 xor     ecx, eax
.text$x:00011ECF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00011ED4                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:00011ED9                 jmp     ___CxxFrameHandler3
.text$x:00011ED9 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:00011ED9
.text$x:00011ED9 ; ---------------------------------------------------------------------------
.text$x:00011EDE                 align 10h
.text$x:00011EDE _text$x         ends
.text$x:00011EDE
.xdata$x:00011EE0 ; ===========================================================================
.xdata$x:00011EE0
.xdata$x:00011EE0 ; Segment type: Pure data
.xdata$x:00011EE0 ; Segment permissions: Read
.xdata$x:00011EE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00011EE0                 assume cs:_xdata$x
.xdata$x:00011EE0                 ;org 11EE0h
.xdata$x:00011EE0 ; COMDAT (pick associative to section at 11E18)
.xdata$x:00011EE0 __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:00011EE0                                         ; DATA XREF: .xdata$x:00011EF0o
.xdata$x:00011EE1                 db 0FFh
.xdata$x:00011EE2                 db 0FFh
.xdata$x:00011EE3                 db 0FFh
.xdata$x:00011EE4                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:00011EE8 __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:00011EE8                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:00011EE9                 db    5
.xdata$x:00011EEA                 db  93h ; ô
.xdata$x:00011EEB                 db  19h
.xdata$x:00011EEC                 db    1
.xdata$x:00011EED                 db    0
.xdata$x:00011EEE                 db    0
.xdata$x:00011EEF                 db    0
.xdata$x:00011EF0                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:00011EF4                 db    0
.xdata$x:00011EF5                 db    0
.xdata$x:00011EF6                 db    0
.xdata$x:00011EF7                 db    0
.xdata$x:00011EF8                 db    0
.xdata$x:00011EF9                 db    0
.xdata$x:00011EFA                 db    0
.xdata$x:00011EFB                 db    0
.xdata$x:00011EFC                 db    0
.xdata$x:00011EFD                 db    0
.xdata$x:00011EFE                 db    0
.xdata$x:00011EFF                 db    0
.xdata$x:00011F00                 db    0
.xdata$x:00011F01                 db    0
.xdata$x:00011F02                 db    0
.xdata$x:00011F03                 db    0
.xdata$x:00011F04                 db    0
.xdata$x:00011F05                 db    0
.xdata$x:00011F06                 db    0
.xdata$x:00011F07                 db    0
.xdata$x:00011F08                 db    1
.xdata$x:00011F09                 db    0
.xdata$x:00011F0A                 db    0
.xdata$x:00011F0B                 db    0
.xdata$x:00011F0B _xdata$x        ends
.xdata$x:00011F0B
.text:00011F0C ; ===========================================================================
.text:00011F0C
.text:00011F0C ; Segment type: Pure code
.text:00011F0C ; Segment permissions: Read/Execute
.text:00011F0C _text           segment para public 'CODE' use32
.text:00011F0C                 assume cs:_text
.text:00011F0C                 ;org 11F0Ch
.text:00011F0C ; COMDAT (pick any)
.text:00011F0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00011F0C
.text:00011F0C ; =============== S U B R O U T I N E =======================================
.text:00011F0C
.text:00011F0C ; Attributes: bp-based frame
.text:00011F0C
.text:00011F0C ; public: void __thiscall CObjectVector<class UString>::Insert(unsigned int, class UString const &)
.text:00011F0C                 public ?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
.text:00011F0C ?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z proc near
.text:00011F0C                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+2C5p
.text:00011F0C                                         ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+2F3p
.text:00011F0C
.text:00011F0C var_1C          = dword ptr -1Ch
.text:00011F0C var_18          = dword ptr -18h
.text:00011F0C var_14          = dword ptr -14h
.text:00011F0C var_10          = dword ptr -10h
.text:00011F0C var_C           = dword ptr -0Ch
.text:00011F0C var_4           = dword ptr -4
.text:00011F0C arg_0           = dword ptr  8
.text:00011F0C arg_4           = dword ptr  0Ch
.text:00011F0C
.text:00011F0C                 push    ebp
.text:00011F0D                 mov     ebp, esp
.text:00011F0F                 push    0FFFFFFFFh
.text:00011F11                 push    offset __ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
.text:00011F16                 mov     eax, large fs:0
.text:00011F1C                 push    eax
.text:00011F1D                 sub     esp, 10h
.text:00011F20                 mov     eax, 0CCCCCCCCh
.text:00011F25                 mov     [ebp+var_1C], eax
.text:00011F28                 mov     [ebp+var_18], eax
.text:00011F2B                 mov     [ebp+var_14], eax
.text:00011F2E                 mov     [ebp+var_10], eax
.text:00011F31                 mov     eax, dword ptr ds:___security_cookie
.text:00011F36                 xor     eax, ebp
.text:00011F38                 push    eax
.text:00011F39                 lea     eax, [ebp+var_C]
.text:00011F3C                 mov     large fs:0, eax
.text:00011F42                 mov     [ebp+var_10], ecx
.text:00011F45                 push    0Ch             ; unsigned int
.text:00011F47                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00011F4C                 add     esp, 4
.text:00011F4F                 mov     [ebp+var_18], eax
.text:00011F52                 mov     [ebp+var_4], 0
.text:00011F59                 cmp     [ebp+var_18], 0
.text:00011F5D                 jz      short loc_11F70
.text:00011F5F                 mov     eax, [ebp+arg_4]
.text:00011F62                 push    eax
.text:00011F63                 mov     ecx, [ebp+var_18]
.text:00011F66                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00011F6B                 mov     [ebp+var_1C], eax
.text:00011F6E                 jmp     short loc_11F77
.text:00011F70 ; ---------------------------------------------------------------------------
.text:00011F70
.text:00011F70 loc_11F70:                              ; CODE XREF: CObjectVector<UString>::Insert(uint,UString const &)+51j
.text:00011F70                 mov     [ebp+var_1C], 0
.text:00011F77
.text:00011F77 loc_11F77:                              ; CODE XREF: CObjectVector<UString>::Insert(uint,UString const &)+62j
.text:00011F77                 mov     ecx, [ebp+var_1C]
.text:00011F7A                 mov     [ebp+var_14], ecx
.text:00011F7D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00011F84                 mov     edx, [ebp+var_14]
.text:00011F87                 push    edx
.text:00011F88                 mov     eax, [ebp+arg_0]
.text:00011F8B                 push    eax
.text:00011F8C                 mov     ecx, [ebp+var_10]
.text:00011F8F                 call    ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ; CRecordVector<void *>::Insert(uint,void * const)
.text:00011F94                 mov     ecx, [ebp+var_C]
.text:00011F97                 mov     large fs:0, ecx
.text:00011F9E                 pop     ecx
.text:00011F9F                 add     esp, 1Ch
.text:00011FA2                 cmp     ebp, esp
.text:00011FA4                 call    __RTC_CheckEsp
.text:00011FA9                 mov     esp, ebp
.text:00011FAB                 pop     ebp
.text:00011FAC                 retn    8
.text:00011FAC ?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z endp
.text:00011FAC
.text:00011FAC ; ---------------------------------------------------------------------------
.text:00011FAF                 align 10h
.text:00011FAF _text           ends
.text:00011FAF
.text$x:00011FB0 ; ===========================================================================
.text$x:00011FB0
.text$x:00011FB0 ; Segment type: Pure code
.text$x:00011FB0 ; Segment permissions: Read/Execute
.text$x:00011FB0 _text$x         segment para public 'CODE' use32
.text$x:00011FB0                 assume cs:_text$x
.text$x:00011FB0                 ;org 11FB0h
.text$x:00011FB0 ; COMDAT (pick associative to section at 11F0C)
.text$x:00011FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00011FB0
.text$x:00011FB0 ; =============== S U B R O U T I N E =======================================
.text$x:00011FB0
.text$x:00011FB0
.text$x:00011FB0 __unwindfunclet$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z$0 proc near
.text$x:00011FB0                                         ; DATA XREF: .xdata$x:00011FDCo
.text$x:00011FB0                 mov     eax, [ebp-18h]
.text$x:00011FB3                 push    eax             ; void *
.text$x:00011FB4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00011FB9                 pop     ecx
.text$x:00011FBA                 retn
.text$x:00011FBA __unwindfunclet$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z$0 endp
.text$x:00011FBA
.text$x:00011FBB
.text$x:00011FBB ; =============== S U B R O U T I N E =======================================
.text$x:00011FBB
.text$x:00011FBB
.text$x:00011FBB __ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z proc near
.text$x:00011FBB                                         ; DATA XREF: CObjectVector<UString>::Insert(uint,UString const &)+5o
.text$x:00011FBB
.text$x:00011FBB arg_4           = dword ptr  8
.text$x:00011FBB
.text$x:00011FBB                 mov     edx, [esp+arg_4]
.text$x:00011FBF                 lea     eax, [edx+0Ch]
.text$x:00011FC2                 mov     ecx, [edx-14h]
.text$x:00011FC5                 xor     ecx, eax
.text$x:00011FC7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00011FCC                 mov     eax, offset __ehfuncinfo$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
.text$x:00011FD1                 jmp     ___CxxFrameHandler3
.text$x:00011FD1 __ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z endp
.text$x:00011FD1
.text$x:00011FD1 ; ---------------------------------------------------------------------------
.text$x:00011FD6                 align 4
.text$x:00011FD6 _text$x         ends
.text$x:00011FD6
.xdata$x:00011FD8 ; ===========================================================================
.xdata$x:00011FD8
.xdata$x:00011FD8 ; Segment type: Pure data
.xdata$x:00011FD8 ; Segment permissions: Read
.xdata$x:00011FD8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00011FD8                 assume cs:_xdata$x
.xdata$x:00011FD8                 ;org 11FD8h
.xdata$x:00011FD8 ; COMDAT (pick associative to section at 11F0C)
.xdata$x:00011FD8 __unwindtable$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z db 0FFh
.xdata$x:00011FD8                                         ; DATA XREF: .xdata$x:00011FE8o
.xdata$x:00011FD9                 db 0FFh
.xdata$x:00011FDA                 db 0FFh
.xdata$x:00011FDB                 db 0FFh
.xdata$x:00011FDC                 dd offset __unwindfunclet$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z$0
.xdata$x:00011FE0 __ehfuncinfo$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z db  22h ; "
.xdata$x:00011FE0                                         ; DATA XREF: __ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z+11o
.xdata$x:00011FE1                 db    5
.xdata$x:00011FE2                 db  93h ; ô
.xdata$x:00011FE3                 db  19h
.xdata$x:00011FE4                 db    1
.xdata$x:00011FE5                 db    0
.xdata$x:00011FE6                 db    0
.xdata$x:00011FE7                 db    0
.xdata$x:00011FE8                 dd offset __unwindtable$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
.xdata$x:00011FEC                 align 20h
.xdata$x:00012000                 db    1
.xdata$x:00012001                 db    0
.xdata$x:00012002                 db    0
.xdata$x:00012003                 db    0
.xdata$x:00012003 _xdata$x        ends
.xdata$x:00012003
.text:00012004 ; ===========================================================================
.text:00012004
.text:00012004 ; Segment type: Pure code
.text:00012004 ; Segment permissions: Read/Execute
.text:00012004 _text           segment para public 'CODE' use32
.text:00012004                 assume cs:_text
.text:00012004                 ;org 12004h
.text:00012004 ; COMDAT (pick any)
.text:00012004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012004
.text:00012004 ; =============== S U B R O U T I N E =======================================
.text:00012004
.text:00012004 ; Attributes: bp-based frame
.text:00012004
.text:00012004 ; public: __thiscall CObjectVector<class UString>::~CObjectVector<class UString>(void)
.text:00012004                 public ??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00012004 ??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00012004                                         ; CODE XREF: __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$3+6j
.text:00012004                                         ; COpenCallbackImp::~COpenCallbackImp(void)+6Dp ...
.text:00012004
.text:00012004 var_20          = dword ptr -20h
.text:00012004 var_1C          = dword ptr -1Ch
.text:00012004 var_18          = dword ptr -18h
.text:00012004 var_14          = dword ptr -14h
.text:00012004 var_10          = dword ptr -10h
.text:00012004 var_C           = dword ptr -0Ch
.text:00012004 var_4           = dword ptr -4
.text:00012004
.text:00012004                 push    ebp
.text:00012005                 mov     ebp, esp
.text:00012007                 push    0FFFFFFFFh
.text:00012009                 push    offset __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
.text:0001200E                 mov     eax, large fs:0
.text:00012014                 push    eax
.text:00012015                 sub     esp, 14h
.text:00012018                 mov     eax, 0CCCCCCCCh
.text:0001201D                 mov     [ebp+var_20], eax
.text:00012020                 mov     [ebp+var_1C], eax
.text:00012023                 mov     [ebp+var_18], eax
.text:00012026                 mov     [ebp+var_14], eax
.text:00012029                 mov     [ebp+var_10], eax
.text:0001202C                 mov     eax, dword ptr ds:___security_cookie
.text:00012031                 xor     eax, ebp
.text:00012033                 push    eax
.text:00012034                 lea     eax, [ebp+var_C]
.text:00012037                 mov     large fs:0, eax
.text:0001203D                 mov     [ebp+var_10], ecx
.text:00012040                 mov     [ebp+var_4], 0
.text:00012047                 mov     ecx, [ebp+var_10]
.text:0001204A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0001204F                 mov     [ebp+var_14], eax
.text:00012052
.text:00012052 loc_12052:                              ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void):loc_12094j
.text:00012052                 cmp     [ebp+var_14], 0
.text:00012056                 jz      short loc_12096
.text:00012058                 mov     eax, [ebp+var_14]
.text:0001205B                 sub     eax, 1
.text:0001205E                 mov     [ebp+var_14], eax
.text:00012061                 mov     ecx, [ebp+var_14]
.text:00012064                 push    ecx
.text:00012065                 mov     ecx, [ebp+var_10]
.text:00012068                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0001206D                 mov     edx, [eax]
.text:0001206F                 mov     [ebp+var_1C], edx
.text:00012072                 mov     eax, [ebp+var_1C]
.text:00012075                 mov     [ebp+var_18], eax
.text:00012078                 cmp     [ebp+var_18], 0
.text:0001207C                 jz      short loc_1208D
.text:0001207E                 push    1
.text:00012080                 mov     ecx, [ebp+var_18]
.text:00012083                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00012088                 mov     [ebp+var_20], eax
.text:0001208B                 jmp     short loc_12094
.text:0001208D ; ---------------------------------------------------------------------------
.text:0001208D
.text:0001208D loc_1208D:                              ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+78j
.text:0001208D                 mov     [ebp+var_20], 0
.text:00012094
.text:00012094 loc_12094:                              ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+87j
.text:00012094                 jmp     short loc_12052
.text:00012096 ; ---------------------------------------------------------------------------
.text:00012096
.text:00012096 loc_12096:                              ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+52j
.text:00012096                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0001209D                 mov     ecx, [ebp+var_10]
.text:000120A0                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000120A5                 mov     ecx, [ebp+var_C]
.text:000120A8                 mov     large fs:0, ecx
.text:000120AF                 pop     ecx
.text:000120B0                 add     esp, 20h
.text:000120B3                 cmp     ebp, esp
.text:000120B5                 call    __RTC_CheckEsp
.text:000120BA                 mov     esp, ebp
.text:000120BC                 pop     ebp
.text:000120BD                 retn
.text:000120BD ??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text:000120BD
.text:000120BD ; ---------------------------------------------------------------------------
.text:000120BE                 align 10h
.text:000120BE _text           ends
.text:000120BE
.text$x:000120C0 ; ===========================================================================
.text$x:000120C0
.text$x:000120C0 ; Segment type: Pure code
.text$x:000120C0 ; Segment permissions: Read/Execute
.text$x:000120C0 _text$x         segment para public 'CODE' use32
.text$x:000120C0                 assume cs:_text$x
.text$x:000120C0                 ;org 120C0h
.text$x:000120C0 ; COMDAT (pick associative to section at 12004)
.text$x:000120C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000120C0
.text$x:000120C0 ; =============== S U B R O U T I N E =======================================
.text$x:000120C0
.text$x:000120C0
.text$x:000120C0 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 proc near
.text$x:000120C0                                         ; DATA XREF: .xdata$x:000120E8o
.text$x:000120C0                 mov     ecx, [ebp-10h]
.text$x:000120C3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000120C3 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 endp
.text$x:000120C3
.text$x:000120C8
.text$x:000120C8 ; =============== S U B R O U T I N E =======================================
.text$x:000120C8
.text$x:000120C8
.text$x:000120C8 __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text$x:000120C8                                         ; DATA XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+5o
.text$x:000120C8
.text$x:000120C8 arg_4           = dword ptr  8
.text$x:000120C8
.text$x:000120C8                 mov     edx, [esp+arg_4]
.text$x:000120CC                 lea     eax, [edx+0Ch]
.text$x:000120CF                 mov     ecx, [edx-18h]
.text$x:000120D2                 xor     ecx, eax
.text$x:000120D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000120D9                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
.text$x:000120DE                 jmp     ___CxxFrameHandler3
.text$x:000120DE __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text$x:000120DE
.text$x:000120DE ; ---------------------------------------------------------------------------
.text$x:000120E3                 align 4
.text$x:000120E3 _text$x         ends
.text$x:000120E3
.xdata$x:000120E4 ; ===========================================================================
.xdata$x:000120E4
.xdata$x:000120E4 ; Segment type: Pure data
.xdata$x:000120E4 ; Segment permissions: Read
.xdata$x:000120E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000120E4                 assume cs:_xdata$x
.xdata$x:000120E4                 ;org 120E4h
.xdata$x:000120E4 ; COMDAT (pick associative to section at 12004)
.xdata$x:000120E4 __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ db 0FFh
.xdata$x:000120E4                                         ; DATA XREF: .xdata$x:000120F4o
.xdata$x:000120E5                 db 0FFh
.xdata$x:000120E6                 db 0FFh
.xdata$x:000120E7                 db 0FFh
.xdata$x:000120E8                 dd offset __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
.xdata$x:000120EC __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ db  22h ; "
.xdata$x:000120EC                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ+11o
.xdata$x:000120ED                 db    5
.xdata$x:000120EE                 db  93h ; ô
.xdata$x:000120EF                 db  19h
.xdata$x:000120F0                 db    1
.xdata$x:000120F1                 db    0
.xdata$x:000120F2                 db    0
.xdata$x:000120F3                 db    0
.xdata$x:000120F4                 dd offset __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
.xdata$x:000120F8                 db    0
.xdata$x:000120F9                 db    0
.xdata$x:000120FA                 db    0
.xdata$x:000120FB                 db    0
.xdata$x:000120FC                 db    0
.xdata$x:000120FD                 db    0
.xdata$x:000120FE                 db    0
.xdata$x:000120FF                 db    0
.xdata$x:00012100                 db    0
.xdata$x:00012101                 db    0
.xdata$x:00012102                 db    0
.xdata$x:00012103                 db    0
.xdata$x:00012104                 db    0
.xdata$x:00012105                 db    0
.xdata$x:00012106                 db    0
.xdata$x:00012107                 db    0
.xdata$x:00012108                 db    0
.xdata$x:00012109                 db    0
.xdata$x:0001210A                 db    0
.xdata$x:0001210B                 db    0
.xdata$x:0001210C                 db    1
.xdata$x:0001210D                 db    0
.xdata$x:0001210E                 db    0
.xdata$x:0001210F                 db    0
.xdata$x:0001210F _xdata$x        ends
.xdata$x:0001210F
.text:00012110 ; ===========================================================================
.text:00012110
.text:00012110 ; Segment type: Pure code
.text:00012110 ; Segment permissions: Read/Execute
.text:00012110 _text           segment para public 'CODE' use32
.text:00012110                 assume cs:_text
.text:00012110                 ;org 12110h
.text:00012110 ; COMDAT (pick any)
.text:00012110                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012110
.text:00012110 ; =============== S U B R O U T I N E =======================================
.text:00012110
.text:00012110 ; Attributes: bp-based frame
.text:00012110
.text:00012110 ; public: void __thiscall CObjectVector<class UString>::Clear(void)
.text:00012110                 public ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
.text:00012110 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:00012110                                         ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+7Dp
.text:00012110                                         ; COpenCallbackImp::Init(UString const &,UString const &)+CBp
.text:00012110
.text:00012110 var_14          = dword ptr -14h
.text:00012110 var_10          = dword ptr -10h
.text:00012110 var_C           = dword ptr -0Ch
.text:00012110 var_8           = dword ptr -8
.text:00012110 var_4           = dword ptr -4
.text:00012110
.text:00012110                 push    ebp
.text:00012111                 mov     ebp, esp
.text:00012113                 sub     esp, 14h
.text:00012116                 mov     eax, 0CCCCCCCCh
.text:0001211B                 mov     [ebp+var_14], eax
.text:0001211E                 mov     [ebp+var_10], eax
.text:00012121                 mov     [ebp+var_C], eax
.text:00012124                 mov     [ebp+var_8], eax
.text:00012127                 mov     [ebp+var_4], eax
.text:0001212A                 mov     [ebp+var_4], ecx
.text:0001212D                 mov     ecx, [ebp+var_4]
.text:00012130                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00012135                 mov     [ebp+var_8], eax
.text:00012138
.text:00012138 loc_12138:                              ; CODE XREF: CObjectVector<UString>::Clear(void):loc_1217Aj
.text:00012138                 cmp     [ebp+var_8], 0
.text:0001213C                 jz      short loc_1217C
.text:0001213E                 mov     eax, [ebp+var_8]
.text:00012141                 sub     eax, 1
.text:00012144                 mov     [ebp+var_8], eax
.text:00012147                 mov     ecx, [ebp+var_8]
.text:0001214A                 push    ecx
.text:0001214B                 mov     ecx, [ebp+var_4]
.text:0001214E                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00012153                 mov     edx, [eax]
.text:00012155                 mov     [ebp+var_10], edx
.text:00012158                 mov     eax, [ebp+var_10]
.text:0001215B                 mov     [ebp+var_C], eax
.text:0001215E                 cmp     [ebp+var_C], 0
.text:00012162                 jz      short loc_12173
.text:00012164                 push    1
.text:00012166                 mov     ecx, [ebp+var_C]
.text:00012169                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:0001216E                 mov     [ebp+var_14], eax
.text:00012171                 jmp     short loc_1217A
.text:00012173 ; ---------------------------------------------------------------------------
.text:00012173
.text:00012173 loc_12173:                              ; CODE XREF: CObjectVector<UString>::Clear(void)+52j
.text:00012173                 mov     [ebp+var_14], 0
.text:0001217A
.text:0001217A loc_1217A:                              ; CODE XREF: CObjectVector<UString>::Clear(void)+61j
.text:0001217A                 jmp     short loc_12138
.text:0001217C ; ---------------------------------------------------------------------------
.text:0001217C
.text:0001217C loc_1217C:                              ; CODE XREF: CObjectVector<UString>::Clear(void)+2Cj
.text:0001217C                 mov     ecx, [ebp+var_4]
.text:0001217F                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00012184                 add     esp, 14h
.text:00012187                 cmp     ebp, esp
.text:00012189                 call    __RTC_CheckEsp
.text:0001218E                 mov     esp, ebp
.text:00012190                 pop     ebp
.text:00012191                 retn
.text:00012191 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:00012191
.text:00012191 ; ---------------------------------------------------------------------------
.text:00012192                 align 4
.text:00012192 _text           ends
.text:00012192
.text:00012194 ; ===========================================================================
.text:00012194
.text:00012194 ; Segment type: Pure code
.text:00012194 ; Segment permissions: Read/Execute
.text:00012194 _text           segment para public 'CODE' use32
.text:00012194                 assume cs:_text
.text:00012194                 ;org 12194h
.text:00012194 ; COMDAT (pick any)
.text:00012194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012194
.text:00012194 ; =============== S U B R O U T I N E =======================================
.text:00012194
.text:00012194 ; Attributes: bp-based frame
.text:00012194
.text:00012194 ; public: void __thiscall CObjectVector<class UString>::DeleteBack(void)
.text:00012194                 public ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ
.text:00012194 ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:00012194                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+33Ep
.text:00012194                                         ; CArc::GetItem(uint,CReadArcItem &)+4C5p
.text:00012194
.text:00012194 var_10          = dword ptr -10h
.text:00012194 var_C           = dword ptr -0Ch
.text:00012194 var_8           = dword ptr -8
.text:00012194 var_4           = dword ptr -4
.text:00012194
.text:00012194                 push    ebp
.text:00012195                 mov     ebp, esp
.text:00012197                 sub     esp, 10h
.text:0001219A                 mov     eax, 0CCCCCCCCh
.text:0001219F                 mov     [ebp+var_10], eax
.text:000121A2                 mov     [ebp+var_C], eax
.text:000121A5                 mov     [ebp+var_8], eax
.text:000121A8                 mov     [ebp+var_4], eax
.text:000121AB                 mov     [ebp+var_4], ecx
.text:000121AE                 mov     ecx, [ebp+var_4]
.text:000121B1                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000121B6                 sub     eax, 1
.text:000121B9                 push    eax
.text:000121BA                 mov     ecx, [ebp+var_4]
.text:000121BD                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000121C2                 mov     eax, [eax]
.text:000121C4                 mov     [ebp+var_C], eax
.text:000121C7                 mov     ecx, [ebp+var_C]
.text:000121CA                 mov     [ebp+var_8], ecx
.text:000121CD                 cmp     [ebp+var_8], 0
.text:000121D1                 jz      short loc_121E2
.text:000121D3                 push    1
.text:000121D5                 mov     ecx, [ebp+var_8]
.text:000121D8                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:000121DD                 mov     [ebp+var_10], eax
.text:000121E0                 jmp     short loc_121E9
.text:000121E2 ; ---------------------------------------------------------------------------
.text:000121E2
.text:000121E2 loc_121E2:                              ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+3Dj
.text:000121E2                 mov     [ebp+var_10], 0
.text:000121E9
.text:000121E9 loc_121E9:                              ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+4Cj
.text:000121E9                 mov     ecx, [ebp+var_4]
.text:000121EC                 call    ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::DeleteBack(void)
.text:000121F1                 add     esp, 10h
.text:000121F4                 cmp     ebp, esp
.text:000121F6                 call    __RTC_CheckEsp
.text:000121FB                 mov     esp, ebp
.text:000121FD                 pop     ebp
.text:000121FE                 retn
.text:000121FE ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:000121FE
.text:000121FE ; ---------------------------------------------------------------------------
.text:000121FF                 align 10h
.text:000121FF _text           ends
.text:000121FF
.text:00012200 ; ===========================================================================
.text:00012200
.text:00012200 ; Segment type: Pure code
.text:00012200 ; Segment permissions: Read/Execute
.text:00012200 _text           segment para public 'CODE' use32
.text:00012200                 assume cs:_text
.text:00012200                 ;org 12200h
.text:00012200 ; COMDAT (pick any)
.text:00012200                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012200
.text:00012200 ; =============== S U B R O U T I N E =======================================
.text:00012200
.text:00012200 ; Attributes: bp-based frame
.text:00012200
.text:00012200 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00012200                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00012200 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00012200                                         ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+4Dp
.text:00012200                                         ; CArchiveLink::Open(COpenOptions &)+42Bp ...
.text:00012200
.text:00012200 var_4           = dword ptr -4
.text:00012200
.text:00012200                 push    ebp
.text:00012201                 mov     ebp, esp
.text:00012203                 push    ecx
.text:00012204                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001220B                 mov     [ebp+var_4], ecx
.text:0001220E                 mov     eax, [ebp+var_4]
.text:00012211                 mov     dword ptr [eax], 0
.text:00012217                 mov     eax, [ebp+var_4]
.text:0001221A                 mov     esp, ebp
.text:0001221C                 pop     ebp
.text:0001221D                 retn
.text:0001221D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0001221D
.text:0001221D ; ---------------------------------------------------------------------------
.text:0001221E                 align 10h
.text:0001221E _text           ends
.text:0001221E
.text:00012220 ; ===========================================================================
.text:00012220
.text:00012220 ; Segment type: Pure code
.text:00012220 ; Segment permissions: Read/Execute
.text:00012220 _text           segment para public 'CODE' use32
.text:00012220                 assume cs:_text
.text:00012220                 ;org 12220h
.text:00012220 ; COMDAT (pick any)
.text:00012220                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012220
.text:00012220 ; =============== S U B R O U T I N E =======================================
.text:00012220
.text:00012220 ; Attributes: bp-based frame
.text:00012220
.text:00012220 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:00012220                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:00012220 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:00012220                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+241p
.text:00012220
.text:00012220 var_4           = dword ptr -4
.text:00012220 arg_0           = dword ptr  8
.text:00012220
.text:00012220                 push    ebp
.text:00012221                 mov     ebp, esp
.text:00012223                 push    ecx
.text:00012224                 push    esi
.text:00012225                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001222C                 mov     [ebp+var_4], ecx
.text:0001222F                 mov     eax, [ebp+var_4]
.text:00012232                 mov     ecx, [ebp+arg_0]
.text:00012235                 mov     [eax], ecx
.text:00012237                 cmp     [ebp+arg_0], 0
.text:0001223B                 jz      short loc_12254
.text:0001223D                 mov     edx, [ebp+arg_0]
.text:00012240                 mov     eax, [edx]
.text:00012242                 mov     esi, esp
.text:00012244                 mov     ecx, [ebp+arg_0]
.text:00012247                 push    ecx
.text:00012248                 mov     edx, [eax+4]
.text:0001224B                 call    edx
.text:0001224D                 cmp     esi, esp
.text:0001224F                 call    __RTC_CheckEsp
.text:00012254
.text:00012254 loc_12254:                              ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:00012254                 mov     eax, [ebp+var_4]
.text:00012257                 pop     esi
.text:00012258                 add     esp, 4
.text:0001225B                 cmp     ebp, esp
.text:0001225D                 call    __RTC_CheckEsp
.text:00012262                 mov     esp, ebp
.text:00012264                 pop     ebp
.text:00012265                 retn    4
.text:00012265 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:00012265
.text:00012265 _text           ends
.text:00012265
.text:00012268 ; ===========================================================================
.text:00012268
.text:00012268 ; Segment type: Pure code
.text:00012268 ; Segment permissions: Read/Execute
.text:00012268 _text           segment para public 'CODE' use32
.text:00012268                 assume cs:_text
.text:00012268                 ;org 12268h
.text:00012268 ; COMDAT (pick any)
.text:00012268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012268
.text:00012268 ; =============== S U B R O U T I N E =======================================
.text:00012268
.text:00012268 ; Attributes: bp-based frame
.text:00012268
.text:00012268 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00012268                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00012268 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00012268                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3E1p
.text:00012268                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4E1p ...
.text:00012268
.text:00012268 var_4           = dword ptr -4
.text:00012268
.text:00012268                 push    ebp
.text:00012269                 mov     ebp, esp
.text:0001226B                 push    ecx
.text:0001226C                 push    esi
.text:0001226D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012274                 mov     [ebp+var_4], ecx
.text:00012277                 mov     eax, [ebp+var_4]
.text:0001227A                 cmp     dword ptr [eax], 0
.text:0001227D                 jz      short loc_1229A
.text:0001227F                 mov     ecx, [ebp+var_4]
.text:00012282                 mov     edx, [ecx]
.text:00012284                 mov     eax, [ebp+var_4]
.text:00012287                 mov     ecx, [eax]
.text:00012289                 mov     edx, [edx]
.text:0001228B                 mov     esi, esp
.text:0001228D                 push    ecx
.text:0001228E                 mov     eax, [edx+8]
.text:00012291                 call    eax
.text:00012293                 cmp     esi, esp
.text:00012295                 call    __RTC_CheckEsp
.text:0001229A
.text:0001229A loc_1229A:                              ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:0001229A                 pop     esi
.text:0001229B                 add     esp, 4
.text:0001229E                 cmp     ebp, esp
.text:000122A0                 call    __RTC_CheckEsp
.text:000122A5                 mov     esp, ebp
.text:000122A7                 pop     ebp
.text:000122A8                 retn
.text:000122A8 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000122A8
.text:000122A8 ; ---------------------------------------------------------------------------
.text:000122A9                 align 4
.text:000122A9 _text           ends
.text:000122A9
.text:000122AC ; ===========================================================================
.text:000122AC
.text:000122AC ; Segment type: Pure code
.text:000122AC ; Segment permissions: Read/Execute
.text:000122AC _text           segment para public 'CODE' use32
.text:000122AC                 assume cs:_text
.text:000122AC                 ;org 122ACh
.text:000122AC ; COMDAT (pick any)
.text:000122AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000122AC
.text:000122AC ; =============== S U B R O U T I N E =======================================
.text:000122AC
.text:000122AC ; Attributes: bp-based frame
.text:000122AC
.text:000122AC ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:000122AC                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:000122AC ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:000122AC                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+76Fp
.text:000122AC                                         ; CArc::OpenStreamOrFile(COpenOptions &)+ACp
.text:000122AC
.text:000122AC var_4           = dword ptr -4
.text:000122AC
.text:000122AC                 push    ebp
.text:000122AD                 mov     ebp, esp
.text:000122AF                 push    ecx
.text:000122B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000122B7                 mov     [ebp+var_4], ecx
.text:000122BA                 mov     eax, [ebp+var_4]
.text:000122BD                 mov     eax, [eax]
.text:000122BF                 mov     esp, ebp
.text:000122C1                 pop     ebp
.text:000122C2                 retn
.text:000122C2 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000122C2
.text:000122C2 ; ---------------------------------------------------------------------------
.text:000122C3                 align 4
.text:000122C3 _text           ends
.text:000122C3
.text:000122C4 ; ===========================================================================
.text:000122C4
.text:000122C4 ; Segment type: Pure code
.text:000122C4 ; Segment permissions: Read/Execute
.text:000122C4 _text           segment para public 'CODE' use32
.text:000122C4                 assume cs:_text
.text:000122C4                 ;org 122C4h
.text:000122C4 ; COMDAT (pick any)
.text:000122C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000122C4
.text:000122C4 ; =============== S U B R O U T I N E =======================================
.text:000122C4
.text:000122C4 ; Attributes: bp-based frame
.text:000122C4
.text:000122C4 ; public: struct ISequentialInStream * * __thiscall CMyComPtr<struct ISequentialInStream>::operator&(void)
.text:000122C4                 public ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
.text:000122C4 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ proc near
.text:000122C4                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+44Bp
.text:000122C4
.text:000122C4 var_4           = dword ptr -4
.text:000122C4
.text:000122C4                 push    ebp
.text:000122C5                 mov     ebp, esp
.text:000122C7                 push    ecx
.text:000122C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000122CF                 mov     [ebp+var_4], ecx
.text:000122D2                 mov     eax, [ebp+var_4]
.text:000122D5                 mov     esp, ebp
.text:000122D7                 pop     ebp
.text:000122D8                 retn
.text:000122D8 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ endp
.text:000122D8
.text:000122D8 ; ---------------------------------------------------------------------------
.text:000122D9                 align 4
.text:000122D9 _text           ends
.text:000122D9
.text:000122DC ; ===========================================================================
.text:000122DC
.text:000122DC ; Segment type: Pure code
.text:000122DC ; Segment permissions: Read/Execute
.text:000122DC _text           segment para public 'CODE' use32
.text:000122DC                 assume cs:_text
.text:000122DC                 ;org 122DCh
.text:000122DC ; COMDAT (pick any)
.text:000122DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000122DC
.text:000122DC ; =============== S U B R O U T I N E =======================================
.text:000122DC
.text:000122DC ; Attributes: bp-based frame
.text:000122DC
.text:000122DC ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:000122DC                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:000122DC ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:000122DC                                         ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+A4p
.text:000122DC                                         ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)+18p
.text:000122DC
.text:000122DC var_4           = dword ptr -4
.text:000122DC arg_0           = dword ptr  8
.text:000122DC
.text:000122DC                 push    ebp
.text:000122DD                 mov     ebp, esp
.text:000122DF                 push    ecx
.text:000122E0                 push    esi
.text:000122E1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000122E8                 mov     [ebp+var_4], ecx
.text:000122EB                 cmp     [ebp+arg_0], 0
.text:000122EF                 jz      short loc_12308
.text:000122F1                 mov     eax, [ebp+arg_0]
.text:000122F4                 mov     ecx, [eax]
.text:000122F6                 mov     esi, esp
.text:000122F8                 mov     edx, [ebp+arg_0]
.text:000122FB                 push    edx
.text:000122FC                 mov     eax, [ecx+4]
.text:000122FF                 call    eax
.text:00012301                 cmp     esi, esp
.text:00012303                 call    __RTC_CheckEsp
.text:00012308
.text:00012308 loc_12308:                              ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00012308                 mov     ecx, [ebp+var_4]
.text:0001230B                 cmp     dword ptr [ecx], 0
.text:0001230E                 jz      short loc_1232B
.text:00012310                 mov     edx, [ebp+var_4]
.text:00012313                 mov     eax, [edx]
.text:00012315                 mov     ecx, [ebp+var_4]
.text:00012318                 mov     edx, [ecx]
.text:0001231A                 mov     eax, [eax]
.text:0001231C                 mov     esi, esp
.text:0001231E                 push    edx
.text:0001231F                 mov     ecx, [eax+8]
.text:00012322                 call    ecx
.text:00012324                 cmp     esi, esp
.text:00012326                 call    __RTC_CheckEsp
.text:0001232B
.text:0001232B loc_1232B:                              ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:0001232B                 mov     edx, [ebp+var_4]
.text:0001232E                 mov     eax, [ebp+arg_0]
.text:00012331                 mov     [edx], eax
.text:00012333                 mov     eax, [ebp+arg_0]
.text:00012336                 pop     esi
.text:00012337                 add     esp, 4
.text:0001233A                 cmp     ebp, esp
.text:0001233C                 call    __RTC_CheckEsp
.text:00012341                 mov     esp, ebp
.text:00012343                 pop     ebp
.text:00012344                 retn    4
.text:00012344 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00012344
.text:00012344 ; ---------------------------------------------------------------------------
.text:00012347                 align 4
.text:00012347 _text           ends
.text:00012347
.text:00012348 ; ===========================================================================
.text:00012348
.text:00012348 ; Segment type: Pure code
.text:00012348 ; Segment permissions: Read/Execute
.text:00012348 _text           segment para public 'CODE' use32
.text:00012348                 assume cs:_text
.text:00012348                 ;org 12348h
.text:00012348 ; COMDAT (pick any)
.text:00012348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012348
.text:00012348 ; =============== S U B R O U T I N E =======================================
.text:00012348
.text:00012348 ; Attributes: bp-based frame
.text:00012348
.text:00012348 ; public: bool __thiscall CMyComPtr<struct ISequentialInStream>::operator!(void)const
.text:00012348                 public ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
.text:00012348 ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ proc near
.text:00012348                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+47Fp
.text:00012348
.text:00012348 var_4           = dword ptr -4
.text:00012348
.text:00012348                 push    ebp
.text:00012349                 mov     ebp, esp
.text:0001234B                 push    ecx
.text:0001234C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012353                 mov     [ebp+var_4], ecx
.text:00012356                 mov     eax, [ebp+var_4]
.text:00012359                 xor     ecx, ecx
.text:0001235B                 cmp     dword ptr [eax], 0
.text:0001235E                 setz    cl
.text:00012361                 mov     al, cl
.text:00012363                 mov     esp, ebp
.text:00012365                 pop     ebp
.text:00012366                 retn
.text:00012366 ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ endp
.text:00012366
.text:00012366 ; ---------------------------------------------------------------------------
.text:00012367                 align 4
.text:00012367 _text           ends
.text:00012367
.text:00012368 ; ===========================================================================
.text:00012368
.text:00012368 ; Segment type: Pure code
.text:00012368 ; Segment permissions: Read/Execute
.text:00012368 _text           segment para public 'CODE' use32
.text:00012368                 assume cs:_text
.text:00012368                 ;org 12368h
.text:00012368 ; COMDAT (pick any)
.text:00012368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012368
.text:00012368 ; =============== S U B R O U T I N E =======================================
.text:00012368
.text:00012368 ; Attributes: bp-based frame
.text:00012368
.text:00012368 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:00012368                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00012368 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00012368                                         ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+3Ep
.text:00012368                                         ; CArchiveLink::Open(COpenOptions &)+4B7p ...
.text:00012368
.text:00012368 var_4           = dword ptr -4
.text:00012368
.text:00012368                 push    ebp
.text:00012369                 mov     ebp, esp
.text:0001236B                 push    ecx
.text:0001236C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012373                 mov     [ebp+var_4], ecx
.text:00012376                 mov     eax, [ebp+var_4]
.text:00012379                 mov     dword ptr [eax], 0
.text:0001237F                 mov     eax, [ebp+var_4]
.text:00012382                 mov     esp, ebp
.text:00012384                 pop     ebp
.text:00012385                 retn
.text:00012385 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00012385
.text:00012385 ; ---------------------------------------------------------------------------
.text:00012386                 align 4
.text:00012386 _text           ends
.text:00012386
.text:00012388 ; ===========================================================================
.text:00012388
.text:00012388 ; Segment type: Pure code
.text:00012388 ; Segment permissions: Read/Execute
.text:00012388 _text           segment para public 'CODE' use32
.text:00012388                 assume cs:_text
.text:00012388                 ;org 12388h
.text:00012388 ; COMDAT (pick any)
.text:00012388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012388
.text:00012388 ; =============== S U B R O U T I N E =======================================
.text:00012388
.text:00012388 ; Attributes: bp-based frame
.text:00012388
.text:00012388 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(struct IInStream *)
.text:00012388                 public ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z
.text:00012388 ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z proc near
.text:00012388                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2DE6p
.text:00012388                                         ; CArchiveLink::ReOpen(COpenOptions &)+217p
.text:00012388
.text:00012388 var_4           = dword ptr -4
.text:00012388 arg_0           = dword ptr  8
.text:00012388
.text:00012388                 push    ebp
.text:00012389                 mov     ebp, esp
.text:0001238B                 push    ecx
.text:0001238C                 push    esi
.text:0001238D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012394                 mov     [ebp+var_4], ecx
.text:00012397                 mov     eax, [ebp+var_4]
.text:0001239A                 mov     ecx, [ebp+arg_0]
.text:0001239D                 mov     [eax], ecx
.text:0001239F                 cmp     [ebp+arg_0], 0
.text:000123A3                 jz      short loc_123BC
.text:000123A5                 mov     edx, [ebp+arg_0]
.text:000123A8                 mov     eax, [edx]
.text:000123AA                 mov     esi, esp
.text:000123AC                 mov     ecx, [ebp+arg_0]
.text:000123AF                 push    ecx
.text:000123B0                 mov     edx, [eax+4]
.text:000123B3                 call    edx
.text:000123B5                 cmp     esi, esp
.text:000123B7                 call    __RTC_CheckEsp
.text:000123BC
.text:000123BC loc_123BC:                              ; CODE XREF: CMyComPtr<IInStream>::CMyComPtr<IInStream>(IInStream *)+1Bj
.text:000123BC                 mov     eax, [ebp+var_4]
.text:000123BF                 pop     esi
.text:000123C0                 add     esp, 4
.text:000123C3                 cmp     ebp, esp
.text:000123C5                 call    __RTC_CheckEsp
.text:000123CA                 mov     esp, ebp
.text:000123CC                 pop     ebp
.text:000123CD                 retn    4
.text:000123CD ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z endp
.text:000123CD
.text:000123CD _text           ends
.text:000123CD
.text:000123D0 ; ===========================================================================
.text:000123D0
.text:000123D0 ; Segment type: Pure code
.text:000123D0 ; Segment permissions: Read/Execute
.text:000123D0 _text           segment para public 'CODE' use32
.text:000123D0                 assume cs:_text
.text:000123D0                 ;org 123D0h
.text:000123D0 ; COMDAT (pick any)
.text:000123D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000123D0
.text:000123D0 ; =============== S U B R O U T I N E =======================================
.text:000123D0
.text:000123D0 ; Attributes: bp-based frame
.text:000123D0
.text:000123D0 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:000123D0                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:000123D0 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:000123D0                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2E9Dp
.text:000123D0                                         ; CArc::OpenStream2(COpenOptions const &)+312Ap ...
.text:000123D0
.text:000123D0 var_4           = dword ptr -4
.text:000123D0
.text:000123D0                 push    ebp
.text:000123D1                 mov     ebp, esp
.text:000123D3                 push    ecx
.text:000123D4                 push    esi
.text:000123D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000123DC                 mov     [ebp+var_4], ecx
.text:000123DF                 mov     eax, [ebp+var_4]
.text:000123E2                 cmp     dword ptr [eax], 0
.text:000123E5                 jz      short loc_12402
.text:000123E7                 mov     ecx, [ebp+var_4]
.text:000123EA                 mov     edx, [ecx]
.text:000123EC                 mov     eax, [ebp+var_4]
.text:000123EF                 mov     ecx, [eax]
.text:000123F1                 mov     edx, [edx]
.text:000123F3                 mov     esi, esp
.text:000123F5                 push    ecx
.text:000123F6                 mov     eax, [edx+8]
.text:000123F9                 call    eax
.text:000123FB                 cmp     esi, esp
.text:000123FD                 call    __RTC_CheckEsp
.text:00012402
.text:00012402 loc_12402:                              ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:00012402                 pop     esi
.text:00012403                 add     esp, 4
.text:00012406                 cmp     ebp, esp
.text:00012408                 call    __RTC_CheckEsp
.text:0001240D                 mov     esp, ebp
.text:0001240F                 pop     ebp
.text:00012410                 retn
.text:00012410 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00012410
.text:00012410 ; ---------------------------------------------------------------------------
.text:00012411                 align 4
.text:00012411 _text           ends
.text:00012411
.text:00012414 ; ===========================================================================
.text:00012414
.text:00012414 ; Segment type: Pure code
.text:00012414 ; Segment permissions: Read/Execute
.text:00012414 _text           segment para public 'CODE' use32
.text:00012414                 assume cs:_text
.text:00012414                 ;org 12414h
.text:00012414 ; COMDAT (pick any)
.text:00012414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012414
.text:00012414 ; =============== S U B R O U T I N E =======================================
.text:00012414
.text:00012414 ; Attributes: bp-based frame
.text:00012414
.text:00012414 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:00012414                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:00012414 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:00012414                                         ; CODE XREF: NArchive::NParser::CHandler::Close(void)+14p
.text:00012414                                         ; CArc::Close(void)+1Ep
.text:00012414
.text:00012414 var_4           = dword ptr -4
.text:00012414
.text:00012414                 push    ebp
.text:00012415                 mov     ebp, esp
.text:00012417                 push    ecx
.text:00012418                 push    esi
.text:00012419                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012420                 mov     [ebp+var_4], ecx
.text:00012423                 mov     eax, [ebp+var_4]
.text:00012426                 cmp     dword ptr [eax], 0
.text:00012429                 jz      short loc_1244F
.text:0001242B                 mov     ecx, [ebp+var_4]
.text:0001242E                 mov     edx, [ecx]
.text:00012430                 mov     eax, [ebp+var_4]
.text:00012433                 mov     ecx, [eax]
.text:00012435                 mov     edx, [edx]
.text:00012437                 mov     esi, esp
.text:00012439                 push    ecx
.text:0001243A                 mov     eax, [edx+8]
.text:0001243D                 call    eax
.text:0001243F                 cmp     esi, esp
.text:00012441                 call    __RTC_CheckEsp
.text:00012446                 mov     ecx, [ebp+var_4]
.text:00012449                 mov     dword ptr [ecx], 0
.text:0001244F
.text:0001244F loc_1244F:                              ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:0001244F                 pop     esi
.text:00012450                 add     esp, 4
.text:00012453                 cmp     ebp, esp
.text:00012455                 call    __RTC_CheckEsp
.text:0001245A                 mov     esp, ebp
.text:0001245C                 pop     ebp
.text:0001245D                 retn
.text:0001245D ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:0001245D
.text:0001245D ; ---------------------------------------------------------------------------
.text:0001245E                 align 10h
.text:0001245E _text           ends
.text:0001245E
.text:00012460 ; ===========================================================================
.text:00012460
.text:00012460 ; Segment type: Pure code
.text:00012460 ; Segment permissions: Read/Execute
.text:00012460 _text           segment para public 'CODE' use32
.text:00012460                 assume cs:_text
.text:00012460                 ;org 12460h
.text:00012460 ; COMDAT (pick any)
.text:00012460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012460
.text:00012460 ; =============== S U B R O U T I N E =======================================
.text:00012460
.text:00012460 ; Attributes: bp-based frame
.text:00012460
.text:00012460 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:00012460                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00012460 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00012460                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7Cp
.text:00012460                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+250p ...
.text:00012460
.text:00012460 var_4           = dword ptr -4
.text:00012460
.text:00012460                 push    ebp
.text:00012461                 mov     ebp, esp
.text:00012463                 push    ecx
.text:00012464                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001246B                 mov     [ebp+var_4], ecx
.text:0001246E                 mov     eax, [ebp+var_4]
.text:00012471                 mov     eax, [eax]
.text:00012473                 mov     esp, ebp
.text:00012475                 pop     ebp
.text:00012476                 retn
.text:00012476 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00012476
.text:00012476 ; ---------------------------------------------------------------------------
.text:00012477                 align 4
.text:00012477 _text           ends
.text:00012477
.text:00012478 ; ===========================================================================
.text:00012478
.text:00012478 ; Segment type: Pure code
.text:00012478 ; Segment permissions: Read/Execute
.text:00012478 _text           segment para public 'CODE' use32
.text:00012478                 assume cs:_text
.text:00012478                 ;org 12478h
.text:00012478 ; COMDAT (pick any)
.text:00012478                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012478
.text:00012478 ; =============== S U B R O U T I N E =======================================
.text:00012478
.text:00012478 ; Attributes: bp-based frame
.text:00012478
.text:00012478 ; public: struct IInStream * * __thiscall CMyComPtr<struct IInStream>::operator&(void)
.text:00012478                 public ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ
.text:00012478 ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ proc near
.text:00012478                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+4C6p
.text:00012478
.text:00012478 var_4           = dword ptr -4
.text:00012478
.text:00012478                 push    ebp
.text:00012479                 mov     ebp, esp
.text:0001247B                 push    ecx
.text:0001247C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012483                 mov     [ebp+var_4], ecx
.text:00012486                 mov     eax, [ebp+var_4]
.text:00012489                 mov     esp, ebp
.text:0001248B                 pop     ebp
.text:0001248C                 retn
.text:0001248C ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ endp
.text:0001248C
.text:0001248C ; ---------------------------------------------------------------------------
.text:0001248D                 align 10h
.text:0001248D _text           ends
.text:0001248D
.text:00012490 ; ===========================================================================
.text:00012490
.text:00012490 ; Segment type: Pure code
.text:00012490 ; Segment permissions: Read/Execute
.text:00012490 _text           segment para public 'CODE' use32
.text:00012490                 assume cs:_text
.text:00012490                 ;org 12490h
.text:00012490 ; COMDAT (pick any)
.text:00012490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012490
.text:00012490 ; =============== S U B R O U T I N E =======================================
.text:00012490
.text:00012490 ; Attributes: bp-based frame
.text:00012490
.text:00012490 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:00012490                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00012490 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00012490                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+670p
.text:00012490                                         ; CArc::OpenStream2(COpenOptions const &)+3FCBp ...
.text:00012490
.text:00012490 var_4           = dword ptr -4
.text:00012490
.text:00012490                 push    ebp
.text:00012491                 mov     ebp, esp
.text:00012493                 push    ecx
.text:00012494                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001249B                 mov     [ebp+var_4], ecx
.text:0001249E                 mov     eax, [ebp+var_4]
.text:000124A1                 mov     eax, [eax]
.text:000124A3                 mov     esp, ebp
.text:000124A5                 pop     ebp
.text:000124A6                 retn
.text:000124A6 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000124A6
.text:000124A6 ; ---------------------------------------------------------------------------
.text:000124A7                 align 4
.text:000124A7 _text           ends
.text:000124A7
.text:000124A8 ; ===========================================================================
.text:000124A8
.text:000124A8 ; Segment type: Pure code
.text:000124A8 ; Segment permissions: Read/Execute
.text:000124A8 _text           segment para public 'CODE' use32
.text:000124A8                 assume cs:_text
.text:000124A8                 ;org 124A8h
.text:000124A8 ; COMDAT (pick any)
.text:000124A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000124A8
.text:000124A8 ; =============== S U B R O U T I N E =======================================
.text:000124A8
.text:000124A8 ; Attributes: bp-based frame
.text:000124A8
.text:000124A8 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:000124A8                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:000124A8 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:000124A8                                         ; CODE XREF: NArchive::NParser::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+59p
.text:000124A8                                         ; CArc::OpenStream2(COpenOptions const &)+252Bp ...
.text:000124A8
.text:000124A8 var_4           = dword ptr -4
.text:000124A8 arg_0           = dword ptr  8
.text:000124A8
.text:000124A8                 push    ebp
.text:000124A9                 mov     ebp, esp
.text:000124AB                 push    ecx
.text:000124AC                 push    esi
.text:000124AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000124B4                 mov     [ebp+var_4], ecx
.text:000124B7                 cmp     [ebp+arg_0], 0
.text:000124BB                 jz      short loc_124D4
.text:000124BD                 mov     eax, [ebp+arg_0]
.text:000124C0                 mov     ecx, [eax]
.text:000124C2                 mov     esi, esp
.text:000124C4                 mov     edx, [ebp+arg_0]
.text:000124C7                 push    edx
.text:000124C8                 mov     eax, [ecx+4]
.text:000124CB                 call    eax
.text:000124CD                 cmp     esi, esp
.text:000124CF                 call    __RTC_CheckEsp
.text:000124D4
.text:000124D4 loc_124D4:                              ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:000124D4                 mov     ecx, [ebp+var_4]
.text:000124D7                 cmp     dword ptr [ecx], 0
.text:000124DA                 jz      short loc_124F7
.text:000124DC                 mov     edx, [ebp+var_4]
.text:000124DF                 mov     eax, [edx]
.text:000124E1                 mov     ecx, [ebp+var_4]
.text:000124E4                 mov     edx, [ecx]
.text:000124E6                 mov     eax, [eax]
.text:000124E8                 mov     esi, esp
.text:000124EA                 push    edx
.text:000124EB                 mov     ecx, [eax+8]
.text:000124EE                 call    ecx
.text:000124F0                 cmp     esi, esp
.text:000124F2                 call    __RTC_CheckEsp
.text:000124F7
.text:000124F7 loc_124F7:                              ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:000124F7                 mov     edx, [ebp+var_4]
.text:000124FA                 mov     eax, [ebp+arg_0]
.text:000124FD                 mov     [edx], eax
.text:000124FF                 mov     eax, [ebp+arg_0]
.text:00012502                 pop     esi
.text:00012503                 add     esp, 4
.text:00012506                 cmp     ebp, esp
.text:00012508                 call    __RTC_CheckEsp
.text:0001250D                 mov     esp, ebp
.text:0001250F                 pop     ebp
.text:00012510                 retn    4
.text:00012510 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00012510
.text:00012510 ; ---------------------------------------------------------------------------
.text:00012513                 align 4
.text:00012513 _text           ends
.text:00012513
.text:00012514 ; ===========================================================================
.text:00012514
.text:00012514 ; Segment type: Pure code
.text:00012514 ; Segment permissions: Read/Execute
.text:00012514 _text           segment para public 'CODE' use32
.text:00012514                 assume cs:_text
.text:00012514                 ;org 12514h
.text:00012514 ; COMDAT (pick any)
.text:00012514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012514
.text:00012514 ; =============== S U B R O U T I N E =======================================
.text:00012514
.text:00012514 ; Attributes: bp-based frame
.text:00012514
.text:00012514 ; public: bool __thiscall CMyComPtr<struct IInStream>::operator!(void)const
.text:00012514                 public ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ
.text:00012514 ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ proc near
.text:00012514                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+4E6p
.text:00012514
.text:00012514 var_4           = dword ptr -4
.text:00012514
.text:00012514                 push    ebp
.text:00012515                 mov     ebp, esp
.text:00012517                 push    ecx
.text:00012518                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001251F                 mov     [ebp+var_4], ecx
.text:00012522                 mov     eax, [ebp+var_4]
.text:00012525                 xor     ecx, ecx
.text:00012527                 cmp     dword ptr [eax], 0
.text:0001252A                 setz    cl
.text:0001252D                 mov     al, cl
.text:0001252F                 mov     esp, ebp
.text:00012531                 pop     ebp
.text:00012532                 retn
.text:00012532 ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ endp
.text:00012532
.text:00012532 ; ---------------------------------------------------------------------------
.text:00012533                 align 4
.text:00012533 _text           ends
.text:00012533
.text:00012534 ; ===========================================================================
.text:00012534
.text:00012534 ; Segment type: Pure code
.text:00012534 ; Segment permissions: Read/Execute
.text:00012534 _text           segment para public 'CODE' use32
.text:00012534                 assume cs:_text
.text:00012534                 ;org 12534h
.text:00012534 ; COMDAT (pick any)
.text:00012534                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012534
.text:00012534 ; =============== S U B R O U T I N E =======================================
.text:00012534
.text:00012534 ; Attributes: bp-based frame
.text:00012534
.text:00012534 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:00012534                 public ??0?$CRecordVector@I@@QAE@XZ
.text:00012534 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1A57p
.text:00012534                                         ; CArc::OpenStream2(COpenOptions const &)+27B5p ...
.text:00012534
.text:00012534 var_4           = dword ptr -4
.text:00012534
.text:00012534                 push    ebp
.text:00012535                 mov     ebp, esp
.text:00012537                 push    ecx
.text:00012538                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001253F                 mov     [ebp+var_4], ecx
.text:00012542                 mov     eax, [ebp+var_4]
.text:00012545                 mov     dword ptr [eax], 0
.text:0001254B                 mov     ecx, [ebp+var_4]
.text:0001254E                 mov     dword ptr [ecx+4], 0
.text:00012555                 mov     edx, [ebp+var_4]
.text:00012558                 mov     dword ptr [edx+8], 0
.text:0001255F                 mov     eax, [ebp+var_4]
.text:00012562                 mov     esp, ebp
.text:00012564                 pop     ebp
.text:00012565                 retn
.text:00012565 ??0?$CRecordVector@I@@QAE@XZ endp
.text:00012565
.text:00012565 ; ---------------------------------------------------------------------------
.text:00012566                 align 4
.text:00012566 _text           ends
.text:00012566
.text:00012568 ; ===========================================================================
.text:00012568
.text:00012568 ; Segment type: Pure code
.text:00012568 ; Segment permissions: Read/Execute
.text:00012568 _text           segment para public 'CODE' use32
.text:00012568                 assume cs:_text
.text:00012568                 ;org 12568h
.text:00012568 ; COMDAT (pick any)
.text:00012568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012568
.text:00012568 ; =============== S U B R O U T I N E =======================================
.text:00012568
.text:00012568 ; Attributes: bp-based frame
.text:00012568
.text:00012568 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Size(void)const
.text:00012568                 public ?Size@?$CRecordVector@I@@QBEIXZ
.text:00012568 ?Size@?$CRecordVector@I@@QBEIXZ proc near
.text:00012568                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1D8Ep
.text:00012568                                         ; CArc::OpenStream2(COpenOptions const &)+2989p ...
.text:00012568
.text:00012568 var_4           = dword ptr -4
.text:00012568
.text:00012568                 push    ebp
.text:00012569                 mov     ebp, esp
.text:0001256B                 push    ecx
.text:0001256C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012573                 mov     [ebp+var_4], ecx
.text:00012576                 mov     eax, [ebp+var_4]
.text:00012579                 mov     eax, [eax+4]
.text:0001257C                 mov     esp, ebp
.text:0001257E                 pop     ebp
.text:0001257F                 retn
.text:0001257F ?Size@?$CRecordVector@I@@QBEIXZ endp
.text:0001257F
.text:0001257F _text           ends
.text:0001257F
.text:00012580 ; ===========================================================================
.text:00012580
.text:00012580 ; Segment type: Pure code
.text:00012580 ; Segment permissions: Read/Execute
.text:00012580 _text           segment para public 'CODE' use32
.text:00012580                 assume cs:_text
.text:00012580                 ;org 12580h
.text:00012580 ; COMDAT (pick any)
.text:00012580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012580
.text:00012580 ; =============== S U B R O U T I N E =======================================
.text:00012580
.text:00012580 ; Attributes: bp-based frame
.text:00012580
.text:00012580 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:00012580                 public ??1?$CRecordVector@I@@QAE@XZ
.text:00012580 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1E35p
.text:00012580                                         ; CArc::OpenStream2(COpenOptions const &)+1F02p ...
.text:00012580
.text:00012580 var_8           = dword ptr -8
.text:00012580 var_4           = dword ptr -4
.text:00012580
.text:00012580                 push    ebp
.text:00012581                 mov     ebp, esp
.text:00012583                 sub     esp, 8
.text:00012586                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0001258D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012594                 mov     [ebp+var_4], ecx
.text:00012597                 mov     eax, [ebp+var_4]
.text:0001259A                 mov     ecx, [eax]
.text:0001259C                 mov     [ebp+var_8], ecx
.text:0001259F                 mov     edx, [ebp+var_8]
.text:000125A2                 push    edx             ; void *
.text:000125A3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000125A8                 add     esp, 4
.text:000125AB                 add     esp, 8
.text:000125AE                 cmp     ebp, esp
.text:000125B0                 call    __RTC_CheckEsp
.text:000125B5                 mov     esp, ebp
.text:000125B7                 pop     ebp
.text:000125B8                 retn
.text:000125B8 ??1?$CRecordVector@I@@QAE@XZ endp
.text:000125B8
.text:000125B8 ; ---------------------------------------------------------------------------
.text:000125B9                 align 4
.text:000125B9 _text           ends
.text:000125B9
.text:000125BC ; ===========================================================================
.text:000125BC
.text:000125BC ; Segment type: Pure code
.text:000125BC ; Segment permissions: Read/Execute
.text:000125BC _text           segment para public 'CODE' use32
.text:000125BC                 assume cs:_text
.text:000125BC                 ;org 125BCh
.text:000125BC ; COMDAT (pick any)
.text:000125BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000125BC
.text:000125BC ; =============== S U B R O U T I N E =======================================
.text:000125BC
.text:000125BC ; Attributes: bp-based frame
.text:000125BC
.text:000125BC ; public: unsigned int __thiscall CRecordVector<unsigned int>::Add(unsigned int)
.text:000125BC                 public ?Add@?$CRecordVector@I@@QAEII@Z
.text:000125BC ?Add@?$CRecordVector@I@@QAEII@Z proc near
.text:000125BC                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1D46p
.text:000125BC                                         ; CArc::OpenStream2(COpenOptions const &)+2818p ...
.text:000125BC
.text:000125BC var_8           = dword ptr -8
.text:000125BC var_4           = dword ptr -4
.text:000125BC arg_0           = dword ptr  8
.text:000125BC
.text:000125BC                 push    ebp
.text:000125BD                 mov     ebp, esp
.text:000125BF                 sub     esp, 8
.text:000125C2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000125C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000125D0                 mov     [ebp+var_4], ecx
.text:000125D3                 mov     ecx, [ebp+var_4]
.text:000125D6                 call    ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<uint>::ReserveOnePosition(void)
.text:000125DB                 mov     eax, [ebp+var_4]
.text:000125DE                 mov     ecx, [eax+4]
.text:000125E1                 mov     edx, [ebp+var_4]
.text:000125E4                 mov     eax, [edx]
.text:000125E6                 mov     edx, [ebp+arg_0]
.text:000125E9                 mov     [eax+ecx*4], edx
.text:000125EC                 mov     eax, [ebp+var_4]
.text:000125EF                 mov     ecx, [eax+4]
.text:000125F2                 mov     [ebp+var_8], ecx
.text:000125F5                 mov     edx, [ebp+var_4]
.text:000125F8                 mov     eax, [edx+4]
.text:000125FB                 add     eax, 1
.text:000125FE                 mov     ecx, [ebp+var_4]
.text:00012601                 mov     [ecx+4], eax
.text:00012604                 mov     eax, [ebp+var_8]
.text:00012607                 add     esp, 8
.text:0001260A                 cmp     ebp, esp
.text:0001260C                 call    __RTC_CheckEsp
.text:00012611                 mov     esp, ebp
.text:00012613                 pop     ebp
.text:00012614                 retn    4
.text:00012614 ?Add@?$CRecordVector@I@@QAEII@Z endp
.text:00012614
.text:00012614 ; ---------------------------------------------------------------------------
.text:00012617                 align 4
.text:00012617 _text           ends
.text:00012617
.text:00012618 ; ===========================================================================
.text:00012618
.text:00012618 ; Segment type: Pure code
.text:00012618 ; Segment permissions: Read/Execute
.text:00012618 _text           segment para public 'CODE' use32
.text:00012618                 assume cs:_text
.text:00012618                 ;org 12618h
.text:00012618 ; COMDAT (pick any)
.text:00012618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012618
.text:00012618 ; =============== S U B R O U T I N E =======================================
.text:00012618
.text:00012618 ; Attributes: bp-based frame
.text:00012618
.text:00012618 ; public: void __thiscall CRecordVector<unsigned int>::Insert(unsigned int, unsigned int)
.text:00012618                 public ?Insert@?$CRecordVector@I@@QAEXII@Z
.text:00012618 ?Insert@?$CRecordVector@I@@QAEXII@Z proc near
.text:00012618                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1B77p
.text:00012618                                         ; CArc::OpenStream2(COpenOptions const &)+1D24p ...
.text:00012618
.text:00012618 var_4           = dword ptr -4
.text:00012618 arg_0           = dword ptr  8
.text:00012618 arg_4           = dword ptr  0Ch
.text:00012618
.text:00012618                 push    ebp
.text:00012619                 mov     ebp, esp
.text:0001261B                 push    ecx
.text:0001261C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012623                 mov     [ebp+var_4], ecx
.text:00012626                 mov     ecx, [ebp+var_4]
.text:00012629                 call    ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<uint>::ReserveOnePosition(void)
.text:0001262E                 mov     eax, [ebp+arg_0]
.text:00012631                 push    eax
.text:00012632                 mov     ecx, [ebp+arg_0]
.text:00012635                 add     ecx, 1
.text:00012638                 push    ecx
.text:00012639                 mov     ecx, [ebp+var_4]
.text:0001263C                 call    ?MoveItems@?$CRecordVector@I@@AAEXII@Z ; CRecordVector<uint>::MoveItems(uint,uint)
.text:00012641                 mov     edx, [ebp+var_4]
.text:00012644                 mov     eax, [edx]
.text:00012646                 mov     ecx, [ebp+arg_0]
.text:00012649                 mov     edx, [ebp+arg_4]
.text:0001264C                 mov     [eax+ecx*4], edx
.text:0001264F                 mov     eax, [ebp+var_4]
.text:00012652                 mov     ecx, [eax+4]
.text:00012655                 add     ecx, 1
.text:00012658                 mov     edx, [ebp+var_4]
.text:0001265B                 mov     [edx+4], ecx
.text:0001265E                 add     esp, 4
.text:00012661                 cmp     ebp, esp
.text:00012663                 call    __RTC_CheckEsp
.text:00012668                 mov     esp, ebp
.text:0001266A                 pop     ebp
.text:0001266B                 retn    8
.text:0001266B ?Insert@?$CRecordVector@I@@QAEXII@Z endp
.text:0001266B
.text:0001266B ; ---------------------------------------------------------------------------
.text:0001266E                 align 10h
.text:0001266E _text           ends
.text:0001266E
.text:00012670 ; ===========================================================================
.text:00012670
.text:00012670 ; Segment type: Pure code
.text:00012670 ; Segment permissions: Read/Execute
.text:00012670 _text           segment para public 'CODE' use32
.text:00012670                 assume cs:_text
.text:00012670                 ;org 12670h
.text:00012670 ; COMDAT (pick any)
.text:00012670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012670
.text:00012670 ; =============== S U B R O U T I N E =======================================
.text:00012670
.text:00012670 ; Attributes: bp-based frame
.text:00012670
.text:00012670 ; public: unsigned int & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)
.text:00012670                 public ??A?$CRecordVector@I@@QAEAAII@Z
.text:00012670 ??A?$CRecordVector@I@@QAEAAII@Z proc near
.text:00012670                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1DACp
.text:00012670                                         ; CArc::OpenStream2(COpenOptions const &):loc_6574p ...
.text:00012670
.text:00012670 var_4           = dword ptr -4
.text:00012670 arg_0           = dword ptr  8
.text:00012670
.text:00012670                 push    ebp
.text:00012671                 mov     ebp, esp
.text:00012673                 push    ecx
.text:00012674                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001267B                 mov     [ebp+var_4], ecx
.text:0001267E                 mov     eax, [ebp+var_4]
.text:00012681                 mov     ecx, [eax]
.text:00012683                 mov     edx, [ebp+arg_0]
.text:00012686                 lea     eax, [ecx+edx*4]
.text:00012689                 mov     esp, ebp
.text:0001268B                 pop     ebp
.text:0001268C                 retn    4
.text:0001268C ??A?$CRecordVector@I@@QAEAAII@Z endp
.text:0001268C
.text:0001268C ; ---------------------------------------------------------------------------
.text:0001268F                 align 10h
.text:0001268F _text           ends
.text:0001268F
.text:00012690 ; ===========================================================================
.text:00012690
.text:00012690 ; Segment type: Pure code
.text:00012690 ; Segment permissions: Read/Execute
.text:00012690 _text           segment para public 'CODE' use32
.text:00012690                 assume cs:_text
.text:00012690                 ;org 12690h
.text:00012690 ; COMDAT (pick any)
.text:00012690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012690
.text:00012690 ; =============== S U B R O U T I N E =======================================
.text:00012690
.text:00012690 ; Attributes: bp-based frame
.text:00012690
.text:00012690 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00012690                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00012690 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00012690                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+400p
.text:00012690                                         ; CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)+30p
.text:00012690
.text:00012690 var_4           = dword ptr -4
.text:00012690
.text:00012690                 push    ebp
.text:00012691                 mov     ebp, esp
.text:00012693                 push    ecx
.text:00012694                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001269B                 mov     [ebp+var_4], ecx
.text:0001269E                 mov     eax, [ebp+var_4]
.text:000126A1                 mov     dword ptr [eax], 0
.text:000126A7                 mov     eax, [ebp+var_4]
.text:000126AA                 mov     esp, ebp
.text:000126AC                 pop     ebp
.text:000126AD                 retn
.text:000126AD ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000126AD
.text:000126AD ; ---------------------------------------------------------------------------
.text:000126AE                 align 10h
.text:000126AE _text           ends
.text:000126AE
.text:000126B0 ; ===========================================================================
.text:000126B0
.text:000126B0 ; Segment type: Pure code
.text:000126B0 ; Segment permissions: Read/Execute
.text:000126B0 _text           segment para public 'CODE' use32
.text:000126B0                 assume cs:_text
.text:000126B0                 ;org 126B0h
.text:000126B0 ; COMDAT (pick any)
.text:000126B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000126B0
.text:000126B0 ; =============== S U B R O U T I N E =======================================
.text:000126B0
.text:000126B0 ; Attributes: bp-based frame
.text:000126B0
.text:000126B0 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:000126B0                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:000126B0 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:000126B0                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2DCp
.text:000126B0
.text:000126B0 var_4           = dword ptr -4
.text:000126B0 arg_0           = dword ptr  8
.text:000126B0
.text:000126B0                 push    ebp
.text:000126B1                 mov     ebp, esp
.text:000126B3                 push    ecx
.text:000126B4                 push    esi
.text:000126B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000126BC                 mov     [ebp+var_4], ecx
.text:000126BF                 mov     eax, [ebp+var_4]
.text:000126C2                 mov     ecx, [ebp+arg_0]
.text:000126C5                 mov     [eax], ecx
.text:000126C7                 cmp     [ebp+arg_0], 0
.text:000126CB                 jz      short loc_126E4
.text:000126CD                 mov     edx, [ebp+arg_0]
.text:000126D0                 mov     eax, [edx]
.text:000126D2                 mov     esi, esp
.text:000126D4                 mov     ecx, [ebp+arg_0]
.text:000126D7                 push    ecx
.text:000126D8                 mov     edx, [eax+4]
.text:000126DB                 call    edx
.text:000126DD                 cmp     esi, esp
.text:000126DF                 call    __RTC_CheckEsp
.text:000126E4
.text:000126E4 loc_126E4:                              ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000126E4                 mov     eax, [ebp+var_4]
.text:000126E7                 pop     esi
.text:000126E8                 add     esp, 4
.text:000126EB                 cmp     ebp, esp
.text:000126ED                 call    __RTC_CheckEsp
.text:000126F2                 mov     esp, ebp
.text:000126F4                 pop     ebp
.text:000126F5                 retn    4
.text:000126F5 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:000126F5
.text:000126F5 _text           ends
.text:000126F5
.text:000126F8 ; ===========================================================================
.text:000126F8
.text:000126F8 ; Segment type: Pure code
.text:000126F8 ; Segment permissions: Read/Execute
.text:000126F8 _text           segment para public 'CODE' use32
.text:000126F8                 assume cs:_text
.text:000126F8                 ;org 126F8h
.text:000126F8 ; COMDAT (pick any)
.text:000126F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000126F8
.text:000126F8 ; =============== S U B R O U T I N E =======================================
.text:000126F8
.text:000126F8 ; Attributes: bp-based frame
.text:000126F8
.text:000126F8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000126F8                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000126F8 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000126F8                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3D5p
.text:000126F8                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4BDp ...
.text:000126F8
.text:000126F8 var_4           = dword ptr -4
.text:000126F8
.text:000126F8                 push    ebp
.text:000126F9                 mov     ebp, esp
.text:000126FB                 push    ecx
.text:000126FC                 push    esi
.text:000126FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012704                 mov     [ebp+var_4], ecx
.text:00012707                 mov     eax, [ebp+var_4]
.text:0001270A                 cmp     dword ptr [eax], 0
.text:0001270D                 jz      short loc_1272A
.text:0001270F                 mov     ecx, [ebp+var_4]
.text:00012712                 mov     edx, [ecx]
.text:00012714                 mov     eax, [ebp+var_4]
.text:00012717                 mov     ecx, [eax]
.text:00012719                 mov     edx, [edx]
.text:0001271B                 mov     esi, esp
.text:0001271D                 push    ecx
.text:0001271E                 mov     eax, [edx+8]
.text:00012721                 call    eax
.text:00012723                 cmp     esi, esp
.text:00012725                 call    __RTC_CheckEsp
.text:0001272A
.text:0001272A loc_1272A:                              ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:0001272A                 pop     esi
.text:0001272B                 add     esp, 4
.text:0001272E                 cmp     ebp, esp
.text:00012730                 call    __RTC_CheckEsp
.text:00012735                 mov     esp, ebp
.text:00012737                 pop     ebp
.text:00012738                 retn
.text:00012738 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00012738
.text:00012738 ; ---------------------------------------------------------------------------
.text:00012739                 align 4
.text:00012739 _text           ends
.text:00012739
.text:0001273C ; ===========================================================================
.text:0001273C
.text:0001273C ; Segment type: Pure code
.text:0001273C ; Segment permissions: Read/Execute
.text:0001273C _text           segment para public 'CODE' use32
.text:0001273C                 assume cs:_text
.text:0001273C                 ;org 1273Ch
.text:0001273C ; COMDAT (pick any)
.text:0001273C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001273C
.text:0001273C ; =============== S U B R O U T I N E =======================================
.text:0001273C
.text:0001273C ; Attributes: bp-based frame
.text:0001273C
.text:0001273C ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:0001273C                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:0001273C ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:0001273C                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+60Ap
.text:0001273C                                         ; CLimitedSequentialOutStream::ReleaseStream(void)+14p
.text:0001273C
.text:0001273C var_4           = dword ptr -4
.text:0001273C
.text:0001273C                 push    ebp
.text:0001273D                 mov     ebp, esp
.text:0001273F                 push    ecx
.text:00012740                 push    esi
.text:00012741                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012748                 mov     [ebp+var_4], ecx
.text:0001274B                 mov     eax, [ebp+var_4]
.text:0001274E                 cmp     dword ptr [eax], 0
.text:00012751                 jz      short loc_12777
.text:00012753                 mov     ecx, [ebp+var_4]
.text:00012756                 mov     edx, [ecx]
.text:00012758                 mov     eax, [ebp+var_4]
.text:0001275B                 mov     ecx, [eax]
.text:0001275D                 mov     edx, [edx]
.text:0001275F                 mov     esi, esp
.text:00012761                 push    ecx
.text:00012762                 mov     eax, [edx+8]
.text:00012765                 call    eax
.text:00012767                 cmp     esi, esp
.text:00012769                 call    __RTC_CheckEsp
.text:0001276E                 mov     ecx, [ebp+var_4]
.text:00012771                 mov     dword ptr [ecx], 0
.text:00012777
.text:00012777 loc_12777:                              ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:00012777                 pop     esi
.text:00012778                 add     esp, 4
.text:0001277B                 cmp     ebp, esp
.text:0001277D                 call    __RTC_CheckEsp
.text:00012782                 mov     esp, ebp
.text:00012784                 pop     ebp
.text:00012785                 retn
.text:00012785 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00012785
.text:00012785 ; ---------------------------------------------------------------------------
.text:00012786                 align 4
.text:00012786 _text           ends
.text:00012786
.text:00012788 ; ===========================================================================
.text:00012788
.text:00012788 ; Segment type: Pure code
.text:00012788 ; Segment permissions: Read/Execute
.text:00012788 _text           segment para public 'CODE' use32
.text:00012788                 assume cs:_text
.text:00012788                 ;org 12788h
.text:00012788 ; COMDAT (pick any)
.text:00012788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012788
.text:00012788 ; =============== S U B R O U T I N E =======================================
.text:00012788
.text:00012788 ; Attributes: bp-based frame
.text:00012788
.text:00012788 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00012788                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00012788 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00012788                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5EDp
.text:00012788                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+761p
.text:00012788
.text:00012788 var_4           = dword ptr -4
.text:00012788
.text:00012788                 push    ebp
.text:00012789                 mov     ebp, esp
.text:0001278B                 push    ecx
.text:0001278C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012793                 mov     [ebp+var_4], ecx
.text:00012796                 mov     eax, [ebp+var_4]
.text:00012799                 mov     eax, [eax]
.text:0001279B                 mov     esp, ebp
.text:0001279D                 pop     ebp
.text:0001279E                 retn
.text:0001279E ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:0001279E
.text:0001279E ; ---------------------------------------------------------------------------
.text:0001279F                 align 10h
.text:0001279F _text           ends
.text:0001279F
.text:000127A0 ; ===========================================================================
.text:000127A0
.text:000127A0 ; Segment type: Pure code
.text:000127A0 ; Segment permissions: Read/Execute
.text:000127A0 _text           segment para public 'CODE' use32
.text:000127A0                 assume cs:_text
.text:000127A0                 ;org 127A0h
.text:000127A0 ; COMDAT (pick any)
.text:000127A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000127A0
.text:000127A0 ; =============== S U B R O U T I N E =======================================
.text:000127A0
.text:000127A0 ; Attributes: bp-based frame
.text:000127A0
.text:000127A0 ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:000127A0                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:000127A0 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:000127A0                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+467p
.text:000127A0
.text:000127A0 var_4           = dword ptr -4
.text:000127A0
.text:000127A0                 push    ebp
.text:000127A1                 mov     ebp, esp
.text:000127A3                 push    ecx
.text:000127A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000127AB                 mov     [ebp+var_4], ecx
.text:000127AE                 mov     eax, [ebp+var_4]
.text:000127B1                 mov     esp, ebp
.text:000127B3                 pop     ebp
.text:000127B4                 retn
.text:000127B4 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:000127B4
.text:000127B4 ; ---------------------------------------------------------------------------
.text:000127B5                 align 4
.text:000127B5 _text           ends
.text:000127B5
.text:000127B8 ; ===========================================================================
.text:000127B8
.text:000127B8 ; Segment type: Pure code
.text:000127B8 ; Segment permissions: Read/Execute
.text:000127B8 _text           segment para public 'CODE' use32
.text:000127B8                 assume cs:_text
.text:000127B8                 ;org 127B8h
.text:000127B8 ; COMDAT (pick any)
.text:000127B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000127B8
.text:000127B8 ; =============== S U B R O U T I N E =======================================
.text:000127B8
.text:000127B8 ; Attributes: bp-based frame
.text:000127B8
.text:000127B8 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:000127B8                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:000127B8 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:000127B8                                         ; CODE XREF: CLimitedSequentialOutStream::SetStream(ISequentialOutStream *)+18p
.text:000127B8
.text:000127B8 var_4           = dword ptr -4
.text:000127B8 arg_0           = dword ptr  8
.text:000127B8
.text:000127B8                 push    ebp
.text:000127B9                 mov     ebp, esp
.text:000127BB                 push    ecx
.text:000127BC                 push    esi
.text:000127BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000127C4                 mov     [ebp+var_4], ecx
.text:000127C7                 cmp     [ebp+arg_0], 0
.text:000127CB                 jz      short loc_127E4
.text:000127CD                 mov     eax, [ebp+arg_0]
.text:000127D0                 mov     ecx, [eax]
.text:000127D2                 mov     esi, esp
.text:000127D4                 mov     edx, [ebp+arg_0]
.text:000127D7                 push    edx
.text:000127D8                 mov     eax, [ecx+4]
.text:000127DB                 call    eax
.text:000127DD                 cmp     esi, esp
.text:000127DF                 call    __RTC_CheckEsp
.text:000127E4
.text:000127E4 loc_127E4:                              ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:000127E4                 mov     ecx, [ebp+var_4]
.text:000127E7                 cmp     dword ptr [ecx], 0
.text:000127EA                 jz      short loc_12807
.text:000127EC                 mov     edx, [ebp+var_4]
.text:000127EF                 mov     eax, [edx]
.text:000127F1                 mov     ecx, [ebp+var_4]
.text:000127F4                 mov     edx, [ecx]
.text:000127F6                 mov     eax, [eax]
.text:000127F8                 mov     esi, esp
.text:000127FA                 push    edx
.text:000127FB                 mov     ecx, [eax+8]
.text:000127FE                 call    ecx
.text:00012800                 cmp     esi, esp
.text:00012802                 call    __RTC_CheckEsp
.text:00012807
.text:00012807 loc_12807:                              ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:00012807                 mov     edx, [ebp+var_4]
.text:0001280A                 mov     eax, [ebp+arg_0]
.text:0001280D                 mov     [edx], eax
.text:0001280F                 mov     eax, [ebp+arg_0]
.text:00012812                 pop     esi
.text:00012813                 add     esp, 4
.text:00012816                 cmp     ebp, esp
.text:00012818                 call    __RTC_CheckEsp
.text:0001281D                 mov     esp, ebp
.text:0001281F                 pop     ebp
.text:00012820                 retn    4
.text:00012820 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00012820
.text:00012820 ; ---------------------------------------------------------------------------
.text:00012823                 align 4
.text:00012823 _text           ends
.text:00012823
.text:00012824 ; ===========================================================================
.text:00012824
.text:00012824 ; Segment type: Pure code
.text:00012824 ; Segment permissions: Read/Execute
.text:00012824 _text           segment para public 'CODE' use32
.text:00012824                 assume cs:_text
.text:00012824                 ;org 12824h
.text:00012824 ; COMDAT (pick any)
.text:00012824                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012824
.text:00012824 ; =============== S U B R O U T I N E =======================================
.text:00012824
.text:00012824 ; Attributes: bp-based frame
.text:00012824
.text:00012824 ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:00012824                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:00012824 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:00012824                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+53Ap
.text:00012824
.text:00012824 var_4           = dword ptr -4
.text:00012824
.text:00012824                 push    ebp
.text:00012825                 mov     ebp, esp
.text:00012827                 push    ecx
.text:00012828                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001282F                 mov     [ebp+var_4], ecx
.text:00012832                 mov     eax, [ebp+var_4]
.text:00012835                 xor     ecx, ecx
.text:00012837                 cmp     dword ptr [eax], 0
.text:0001283A                 setz    cl
.text:0001283D                 mov     al, cl
.text:0001283F                 mov     esp, ebp
.text:00012841                 pop     ebp
.text:00012842                 retn
.text:00012842 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:00012842
.text:00012842 ; ---------------------------------------------------------------------------
.text:00012843                 align 4
.text:00012843 _text           ends
.text:00012843
.text:00012844 ; ===========================================================================
.text:00012844
.text:00012844 ; Segment type: Pure code
.text:00012844 ; Segment permissions: Read/Execute
.text:00012844 _text           segment para public 'CODE' use32
.text:00012844                 assume cs:_text
.text:00012844                 ;org 12844h
.text:00012844 ; COMDAT (pick any)
.text:00012844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012844
.text:00012844 ; =============== S U B R O U T I N E =======================================
.text:00012844
.text:00012844 ; Attributes: bp-based frame
.text:00012844
.text:00012844 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:00012844                 public ??0?$CBuffer@E@@QAE@XZ
.text:00012844 ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+3FCp
.text:00012844                                         ; CArc::OpenStream2(COpenOptions const &)+17B8p ...
.text:00012844
.text:00012844 var_4           = dword ptr -4
.text:00012844
.text:00012844                 push    ebp
.text:00012845                 mov     ebp, esp
.text:00012847                 push    ecx
.text:00012848                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001284F                 mov     [ebp+var_4], ecx
.text:00012852                 mov     eax, [ebp+var_4]
.text:00012855                 mov     dword ptr [eax], 0
.text:0001285B                 mov     ecx, [ebp+var_4]
.text:0001285E                 mov     dword ptr [ecx+4], 0
.text:00012865                 mov     eax, [ebp+var_4]
.text:00012868                 mov     esp, ebp
.text:0001286A                 pop     ebp
.text:0001286B                 retn
.text:0001286B ??0?$CBuffer@E@@QAE@XZ endp
.text:0001286B
.text:0001286B _text           ends
.text:0001286B
.text:0001286C ; ===========================================================================
.text:0001286C
.text:0001286C ; Segment type: Pure code
.text:0001286C ; Segment permissions: Read/Execute
.text:0001286C _text           segment para public 'CODE' use32
.text:0001286C                 assume cs:_text
.text:0001286C                 ;org 1286Ch
.text:0001286C ; COMDAT (pick any)
.text:0001286C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001286C
.text:0001286C ; =============== S U B R O U T I N E =======================================
.text:0001286C
.text:0001286C ; Attributes: bp-based frame
.text:0001286C
.text:0001286C ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:0001286C                 public ??1?$CBuffer@E@@QAE@XZ
.text:0001286C ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+51Bp
.text:0001286C                                         ; CArc::OpenStream2(COpenOptions const &)+6A9p ...
.text:0001286C
.text:0001286C var_8           = dword ptr -8
.text:0001286C var_4           = dword ptr -4
.text:0001286C
.text:0001286C                 push    ebp
.text:0001286D                 mov     ebp, esp
.text:0001286F                 sub     esp, 8
.text:00012872                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00012879                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012880                 mov     [ebp+var_4], ecx
.text:00012883                 mov     eax, [ebp+var_4]
.text:00012886                 mov     ecx, [eax]
.text:00012888                 mov     [ebp+var_8], ecx
.text:0001288B                 mov     edx, [ebp+var_8]
.text:0001288E                 push    edx             ; void *
.text:0001288F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00012894                 add     esp, 4
.text:00012897                 add     esp, 8
.text:0001289A                 cmp     ebp, esp
.text:0001289C                 call    __RTC_CheckEsp
.text:000128A1                 mov     esp, ebp
.text:000128A3                 pop     ebp
.text:000128A4                 retn
.text:000128A4 ??1?$CBuffer@E@@QAE@XZ endp
.text:000128A4
.text:000128A4 ; ---------------------------------------------------------------------------
.text:000128A5                 align 4
.text:000128A5 _text           ends
.text:000128A5
.text:000128A8 ; ===========================================================================
.text:000128A8
.text:000128A8 ; Segment type: Pure code
.text:000128A8 ; Segment permissions: Read/Execute
.text:000128A8 _text           segment para public 'CODE' use32
.text:000128A8                 assume cs:_text
.text:000128A8                 ;org 128A8h
.text:000128A8 ; COMDAT (pick any)
.text:000128A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000128A8
.text:000128A8 ; =============== S U B R O U T I N E =======================================
.text:000128A8
.text:000128A8 ; Attributes: bp-based frame
.text:000128A8
.text:000128A8 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:000128A8                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:000128A8 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4D5p
.text:000128A8                                         ; CArc::OpenStream2(COpenOptions const &)+571p ...
.text:000128A8
.text:000128A8 var_4           = dword ptr -4
.text:000128A8
.text:000128A8                 push    ebp
.text:000128A9                 mov     ebp, esp
.text:000128AB                 push    ecx
.text:000128AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000128B3                 mov     [ebp+var_4], ecx
.text:000128B6                 mov     eax, [ebp+var_4]
.text:000128B9                 mov     eax, [eax]
.text:000128BB                 mov     esp, ebp
.text:000128BD                 pop     ebp
.text:000128BE                 retn
.text:000128BE ??B?$CBuffer@E@@QAEPAEXZ endp
.text:000128BE
.text:000128BE ; ---------------------------------------------------------------------------
.text:000128BF                 align 10h
.text:000128BF _text           ends
.text:000128BF
.text:000128C0 ; ===========================================================================
.text:000128C0
.text:000128C0 ; Segment type: Pure code
.text:000128C0 ; Segment permissions: Read/Execute
.text:000128C0 _text           segment para public 'CODE' use32
.text:000128C0                 assume cs:_text
.text:000128C0                 ;org 128C0h
.text:000128C0 ; COMDAT (pick any)
.text:000128C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000128C0
.text:000128C0 ; =============== S U B R O U T I N E =======================================
.text:000128C0
.text:000128C0 ; Attributes: bp-based frame
.text:000128C0
.text:000128C0 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:000128C0                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:000128C0 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1CE6p
.text:000128C0                                         ; CArc::OpenStream2(COpenOptions const &)+2BCDp ...
.text:000128C0
.text:000128C0 var_4           = dword ptr -4
.text:000128C0
.text:000128C0                 push    ebp
.text:000128C1                 mov     ebp, esp
.text:000128C3                 push    ecx
.text:000128C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000128CB                 mov     [ebp+var_4], ecx
.text:000128CE                 mov     eax, [ebp+var_4]
.text:000128D1                 mov     eax, [eax]
.text:000128D3                 mov     esp, ebp
.text:000128D5                 pop     ebp
.text:000128D6                 retn
.text:000128D6 ??B?$CBuffer@E@@QBEPBEXZ endp
.text:000128D6
.text:000128D6 ; ---------------------------------------------------------------------------
.text:000128D7                 align 4
.text:000128D7 _text           ends
.text:000128D7
.text:000128D8 ; ===========================================================================
.text:000128D8
.text:000128D8 ; Segment type: Pure code
.text:000128D8 ; Segment permissions: Read/Execute
.text:000128D8 _text           segment para public 'CODE' use32
.text:000128D8                 assume cs:_text
.text:000128D8                 ;org 128D8h
.text:000128D8 ; COMDAT (pick any)
.text:000128D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000128D8
.text:000128D8 ; =============== S U B R O U T I N E =======================================
.text:000128D8
.text:000128D8 ; Attributes: bp-based frame
.text:000128D8
.text:000128D8 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:000128D8                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:000128D8 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1C89p
.text:000128D8                                         ; CArc::OpenStream2(COpenOptions const &)+1CC5p ...
.text:000128D8
.text:000128D8 var_4           = dword ptr -4
.text:000128D8
.text:000128D8                 push    ebp
.text:000128D9                 mov     ebp, esp
.text:000128DB                 push    ecx
.text:000128DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000128E3                 mov     [ebp+var_4], ecx
.text:000128E6                 mov     eax, [ebp+var_4]
.text:000128E9                 mov     eax, [eax+4]
.text:000128EC                 mov     esp, ebp
.text:000128EE                 pop     ebp
.text:000128EF                 retn
.text:000128EF ?Size@?$CBuffer@E@@QBEIXZ endp
.text:000128EF
.text:000128EF _text           ends
.text:000128EF
.text:000128F0 ; ===========================================================================
.text:000128F0
.text:000128F0 ; Segment type: Pure code
.text:000128F0 ; Segment permissions: Read/Execute
.text:000128F0 _text           segment para public 'CODE' use32
.text:000128F0                 assume cs:_text
.text:000128F0                 ;org 128F0h
.text:000128F0 ; COMDAT (pick any)
.text:000128F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000128F0
.text:000128F0 ; =============== S U B R O U T I N E =======================================
.text:000128F0
.text:000128F0 ; Attributes: bp-based frame
.text:000128F0
.text:000128F0 ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:000128F0                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:000128F0 ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4B9p
.text:000128F0                                         ; CArc::OpenStream2(COpenOptions const &)+647p ...
.text:000128F0
.text:000128F0 var_8           = dword ptr -8
.text:000128F0 var_4           = dword ptr -4
.text:000128F0 arg_0           = dword ptr  8
.text:000128F0
.text:000128F0                 push    ebp
.text:000128F1                 mov     ebp, esp
.text:000128F3                 sub     esp, 8
.text:000128F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000128FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012904                 mov     [ebp+var_4], ecx
.text:00012907                 mov     eax, [ebp+var_4]
.text:0001290A                 mov     ecx, [ebp+arg_0]
.text:0001290D                 cmp     ecx, [eax+4]
.text:00012910                 jz      short loc_12940
.text:00012912                 mov     ecx, [ebp+var_4]
.text:00012915                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:0001291A                 cmp     [ebp+arg_0], 0
.text:0001291E                 jz      short loc_12940
.text:00012920                 mov     edx, [ebp+arg_0]
.text:00012923                 push    edx             ; unsigned int
.text:00012924                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00012929                 add     esp, 4
.text:0001292C                 mov     [ebp+var_8], eax
.text:0001292F                 mov     eax, [ebp+var_4]
.text:00012932                 mov     ecx, [ebp+var_8]
.text:00012935                 mov     [eax], ecx
.text:00012937                 mov     edx, [ebp+var_4]
.text:0001293A                 mov     eax, [ebp+arg_0]
.text:0001293D                 mov     [edx+4], eax
.text:00012940
.text:00012940 loc_12940:                              ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:00012940                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:00012940                 add     esp, 8
.text:00012943                 cmp     ebp, esp
.text:00012945                 call    __RTC_CheckEsp
.text:0001294A                 mov     esp, ebp
.text:0001294C                 pop     ebp
.text:0001294D                 retn    4
.text:0001294D ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:0001294D
.text:0001294D _text           ends
.text:0001294D
.text:00012950 ; ===========================================================================
.text:00012950
.text:00012950 ; Segment type: Pure code
.text:00012950 ; Segment permissions: Read/Execute
.text:00012950 _text           segment para public 'CODE' use32
.text:00012950                 assume cs:_text
.text:00012950                 ;org 12950h
.text:00012950 ; COMDAT (pick any)
.text:00012950                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012950
.text:00012950 ; =============== S U B R O U T I N E =======================================
.text:00012950
.text:00012950 ; Attributes: bp-based frame
.text:00012950
.text:00012950 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:00012950                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:00012950 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00012950                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1B8p
.text:00012950
.text:00012950 var_4           = dword ptr -4
.text:00012950 arg_0           = dword ptr  8
.text:00012950
.text:00012950                 push    ebp
.text:00012951                 mov     ebp, esp
.text:00012953                 push    ecx
.text:00012954                 push    esi
.text:00012955                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001295C                 mov     [ebp+var_4], ecx
.text:0001295F                 mov     eax, [ebp+var_4]
.text:00012962                 mov     ecx, [ebp+arg_0]
.text:00012965                 mov     [eax], ecx
.text:00012967                 cmp     [ebp+arg_0], 0
.text:0001296B                 jz      short loc_12984
.text:0001296D                 mov     edx, [ebp+arg_0]
.text:00012970                 mov     eax, [edx]
.text:00012972                 mov     esi, esp
.text:00012974                 mov     ecx, [ebp+arg_0]
.text:00012977                 push    ecx
.text:00012978                 mov     edx, [eax+4]
.text:0001297B                 call    edx
.text:0001297D                 cmp     esi, esp
.text:0001297F                 call    __RTC_CheckEsp
.text:00012984
.text:00012984 loc_12984:                              ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00012984                 mov     eax, [ebp+var_4]
.text:00012987                 pop     esi
.text:00012988                 add     esp, 4
.text:0001298B                 cmp     ebp, esp
.text:0001298D                 call    __RTC_CheckEsp
.text:00012992                 mov     esp, ebp
.text:00012994                 pop     ebp
.text:00012995                 retn    4
.text:00012995 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00012995
.text:00012995 _text           ends
.text:00012995
.text:00012998 ; ===========================================================================
.text:00012998
.text:00012998 ; Segment type: Pure code
.text:00012998 ; Segment permissions: Read/Execute
.text:00012998 _text           segment para public 'CODE' use32
.text:00012998                 assume cs:_text
.text:00012998                 ;org 12998h
.text:00012998 ; COMDAT (pick any)
.text:00012998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012998
.text:00012998 ; =============== S U B R O U T I N E =======================================
.text:00012998
.text:00012998 ; Attributes: bp-based frame
.text:00012998
.text:00012998 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:00012998                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00012998 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00012998                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3EDp
.text:00012998                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4EDp ...
.text:00012998
.text:00012998 var_4           = dword ptr -4
.text:00012998
.text:00012998                 push    ebp
.text:00012999                 mov     ebp, esp
.text:0001299B                 push    ecx
.text:0001299C                 push    esi
.text:0001299D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000129A4                 mov     [ebp+var_4], ecx
.text:000129A7                 mov     eax, [ebp+var_4]
.text:000129AA                 cmp     dword ptr [eax], 0
.text:000129AD                 jz      short loc_129CA
.text:000129AF                 mov     ecx, [ebp+var_4]
.text:000129B2                 mov     edx, [ecx]
.text:000129B4                 mov     eax, [ebp+var_4]
.text:000129B7                 mov     ecx, [eax]
.text:000129B9                 mov     edx, [edx]
.text:000129BB                 mov     esi, esp
.text:000129BD                 push    ecx
.text:000129BE                 mov     eax, [edx+8]
.text:000129C1                 call    eax
.text:000129C3                 cmp     esi, esp
.text:000129C5                 call    __RTC_CheckEsp
.text:000129CA
.text:000129CA loc_129CA:                              ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:000129CA                 pop     esi
.text:000129CB                 add     esp, 4
.text:000129CE                 cmp     ebp, esp
.text:000129D0                 call    __RTC_CheckEsp
.text:000129D5                 mov     esp, ebp
.text:000129D7                 pop     ebp
.text:000129D8                 retn
.text:000129D8 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:000129D8
.text:000129D8 ; ---------------------------------------------------------------------------
.text:000129D9                 align 4
.text:000129D9 _text           ends
.text:000129D9
.text:000129DC ; ===========================================================================
.text:000129DC
.text:000129DC ; Segment type: Pure code
.text:000129DC ; Segment permissions: Read/Execute
.text:000129DC _text           segment para public 'CODE' use32
.text:000129DC                 assume cs:_text
.text:000129DC                 ;org 129DCh
.text:000129DC ; COMDAT (pick any)
.text:000129DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000129DC
.text:000129DC ; =============== S U B R O U T I N E =======================================
.text:000129DC
.text:000129DC ; Attributes: bp-based frame
.text:000129DC
.text:000129DC ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:000129DC                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:000129DC ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:000129DC                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+753p
.text:000129DC
.text:000129DC var_4           = dword ptr -4
.text:000129DC
.text:000129DC                 push    ebp
.text:000129DD                 mov     ebp, esp
.text:000129DF                 push    ecx
.text:000129E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000129E7                 mov     [ebp+var_4], ecx
.text:000129EA                 mov     eax, [ebp+var_4]
.text:000129ED                 mov     eax, [eax]
.text:000129EF                 mov     esp, ebp
.text:000129F1                 pop     ebp
.text:000129F2                 retn
.text:000129F2 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:000129F2
.text:000129F2 ; ---------------------------------------------------------------------------
.text:000129F3                 align 4
.text:000129F3 _text           ends
.text:000129F3
.text:000129F4 ; ===========================================================================
.text:000129F4
.text:000129F4 ; Segment type: Pure code
.text:000129F4 ; Segment permissions: Read/Execute
.text:000129F4 _text           segment para public 'CODE' use32
.text:000129F4                 assume cs:_text
.text:000129F4                 ;org 129F4h
.text:000129F4 ; COMDAT (pick any)
.text:000129F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000129F4
.text:000129F4 ; =============== S U B R O U T I N E =======================================
.text:000129F4
.text:000129F4 ; Attributes: bp-based frame
.text:000129F4
.text:000129F4 ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:000129F4                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:000129F4 ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: COpenCallbackImp::COpenCallbackImp(void)+CDp
.text:000129F4
.text:000129F4 var_4           = dword ptr -4
.text:000129F4
.text:000129F4                 push    ebp
.text:000129F5                 mov     ebp, esp
.text:000129F7                 push    ecx
.text:000129F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000129FF                 mov     [ebp+var_4], ecx
.text:00012A02                 mov     eax, [ebp+var_4]
.text:00012A05                 mov     dword ptr [eax], 0
.text:00012A0B                 mov     ecx, [ebp+var_4]
.text:00012A0E                 mov     dword ptr [ecx+4], 0
.text:00012A15                 mov     edx, [ebp+var_4]
.text:00012A18                 mov     dword ptr [edx+8], 0
.text:00012A1F                 mov     eax, [ebp+var_4]
.text:00012A22                 mov     esp, ebp
.text:00012A24                 pop     ebp
.text:00012A25                 retn
.text:00012A25 ??0?$CRecordVector@_N@@QAE@XZ endp
.text:00012A25
.text:00012A25 ; ---------------------------------------------------------------------------
.text:00012A26                 align 4
.text:00012A26 _text           ends
.text:00012A26
.text:00012A28 ; ===========================================================================
.text:00012A28
.text:00012A28 ; Segment type: Pure code
.text:00012A28 ; Segment permissions: Read/Execute
.text:00012A28 _text           segment para public 'CODE' use32
.text:00012A28                 assume cs:_text
.text:00012A28                 ;org 12A28h
.text:00012A28 ; COMDAT (pick any)
.text:00012A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012A28
.text:00012A28 ; =============== S U B R O U T I N E =======================================
.text:00012A28
.text:00012A28 ; Attributes: bp-based frame
.text:00012A28
.text:00012A28 ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:00012A28                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:00012A28 ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:00012A28                                         ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+1BBp
.text:00012A28
.text:00012A28 var_4           = dword ptr -4
.text:00012A28
.text:00012A28                 push    ebp
.text:00012A29                 mov     ebp, esp
.text:00012A2B                 push    ecx
.text:00012A2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012A33                 mov     [ebp+var_4], ecx
.text:00012A36                 mov     eax, [ebp+var_4]
.text:00012A39                 mov     eax, [eax+4]
.text:00012A3C                 mov     esp, ebp
.text:00012A3E                 pop     ebp
.text:00012A3F                 retn
.text:00012A3F ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:00012A3F
.text:00012A3F _text           ends
.text:00012A3F
.text:00012A40 ; ===========================================================================
.text:00012A40
.text:00012A40 ; Segment type: Pure code
.text:00012A40 ; Segment permissions: Read/Execute
.text:00012A40 _text           segment para public 'CODE' use32
.text:00012A40                 assume cs:_text
.text:00012A40                 ;org 12A40h
.text:00012A40 ; COMDAT (pick any)
.text:00012A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012A40
.text:00012A40 ; =============== S U B R O U T I N E =======================================
.text:00012A40
.text:00012A40 ; Attributes: bp-based frame
.text:00012A40
.text:00012A40 ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00012A40                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:00012A40 ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$4+6j
.text:00012A40                                         ; COpenCallbackImp::~COpenCallbackImp(void)+5Ep ...
.text:00012A40
.text:00012A40 var_8           = dword ptr -8
.text:00012A40 var_4           = dword ptr -4
.text:00012A40
.text:00012A40                 push    ebp
.text:00012A41                 mov     ebp, esp
.text:00012A43                 sub     esp, 8
.text:00012A46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00012A4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012A54                 mov     [ebp+var_4], ecx
.text:00012A57                 mov     eax, [ebp+var_4]
.text:00012A5A                 mov     ecx, [eax]
.text:00012A5C                 mov     [ebp+var_8], ecx
.text:00012A5F                 mov     edx, [ebp+var_8]
.text:00012A62                 push    edx             ; void *
.text:00012A63                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00012A68                 add     esp, 4
.text:00012A6B                 add     esp, 8
.text:00012A6E                 cmp     ebp, esp
.text:00012A70                 call    __RTC_CheckEsp
.text:00012A75                 mov     esp, ebp
.text:00012A77                 pop     ebp
.text:00012A78                 retn
.text:00012A78 ??1?$CRecordVector@_N@@QAE@XZ endp
.text:00012A78
.text:00012A78 ; ---------------------------------------------------------------------------
.text:00012A79                 align 4
.text:00012A79 _text           ends
.text:00012A79
.text:00012A7C ; ===========================================================================
.text:00012A7C
.text:00012A7C ; Segment type: Pure code
.text:00012A7C ; Segment permissions: Read/Execute
.text:00012A7C _text           segment para public 'CODE' use32
.text:00012A7C                 assume cs:_text
.text:00012A7C                 ;org 12A7Ch
.text:00012A7C ; COMDAT (pick any)
.text:00012A7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012A7C
.text:00012A7C ; =============== S U B R O U T I N E =======================================
.text:00012A7C
.text:00012A7C ; Attributes: bp-based frame
.text:00012A7C
.text:00012A7C ; public: void __thiscall CRecordVector<bool>::Clear(void)
.text:00012A7C                 public ?Clear@?$CRecordVector@_N@@QAEXXZ
.text:00012A7C ?Clear@?$CRecordVector@_N@@QAEXXZ proc near
.text:00012A7C                                         ; CODE XREF: COpenCallbackImp::Init(UString const &,UString const &)+D6p
.text:00012A7C
.text:00012A7C var_4           = dword ptr -4
.text:00012A7C
.text:00012A7C                 push    ebp
.text:00012A7D                 mov     ebp, esp
.text:00012A7F                 push    ecx
.text:00012A80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012A87                 mov     [ebp+var_4], ecx
.text:00012A8A                 mov     eax, [ebp+var_4]
.text:00012A8D                 mov     dword ptr [eax+4], 0
.text:00012A94                 mov     esp, ebp
.text:00012A96                 pop     ebp
.text:00012A97                 retn
.text:00012A97 ?Clear@?$CRecordVector@_N@@QAEXXZ endp
.text:00012A97
.text:00012A97 _text           ends
.text:00012A97
.text:00012A98 ; ===========================================================================
.text:00012A98
.text:00012A98 ; Segment type: Pure code
.text:00012A98 ; Segment permissions: Read/Execute
.text:00012A98 _text           segment para public 'CODE' use32
.text:00012A98                 assume cs:_text
.text:00012A98                 ;org 12A98h
.text:00012A98 ; COMDAT (pick any)
.text:00012A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012A98
.text:00012A98 ; =============== S U B R O U T I N E =======================================
.text:00012A98
.text:00012A98 ; Attributes: bp-based frame
.text:00012A98
.text:00012A98 ; public: bool & __thiscall CRecordVector<bool>::operator[](unsigned int)
.text:00012A98                 public ??A?$CRecordVector@_N@@QAEAA_NI@Z
.text:00012A98 ??A?$CRecordVector@_N@@QAEAA_NI@Z proc near
.text:00012A98                                         ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+1D3p
.text:00012A98
.text:00012A98 var_4           = dword ptr -4
.text:00012A98 arg_0           = dword ptr  8
.text:00012A98
.text:00012A98                 push    ebp
.text:00012A99                 mov     ebp, esp
.text:00012A9B                 push    ecx
.text:00012A9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012AA3                 mov     [ebp+var_4], ecx
.text:00012AA6                 mov     eax, [ebp+var_4]
.text:00012AA9                 mov     eax, [eax]
.text:00012AAB                 add     eax, [ebp+arg_0]
.text:00012AAE                 mov     esp, ebp
.text:00012AB0                 pop     ebp
.text:00012AB1                 retn    4
.text:00012AB1 ??A?$CRecordVector@_N@@QAEAA_NI@Z endp
.text:00012AB1
.text:00012AB1 _text           ends
.text:00012AB1
.text:00012AB4 ; ===========================================================================
.text:00012AB4
.text:00012AB4 ; Segment type: Pure code
.text:00012AB4 ; Segment permissions: Read/Execute
.text:00012AB4 _text           segment para public 'CODE' use32
.text:00012AB4                 assume cs:_text
.text:00012AB4                 ;org 12AB4h
.text:00012AB4 ; COMDAT (pick any)
.text:00012AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012AB4
.text:00012AB4 ; =============== S U B R O U T I N E =======================================
.text:00012AB4
.text:00012AB4 ; Attributes: bp-based frame
.text:00012AB4
.text:00012AB4 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00012AB4                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:00012AB4 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: COpenCallbackImp::COpenCallbackImp(void)+DFp
.text:00012AB4
.text:00012AB4 var_4           = dword ptr -4
.text:00012AB4
.text:00012AB4                 push    ebp
.text:00012AB5                 mov     ebp, esp
.text:00012AB7                 push    ecx
.text:00012AB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012ABF                 mov     [ebp+var_4], ecx
.text:00012AC2                 mov     eax, [ebp+var_4]
.text:00012AC5                 mov     dword ptr [eax], 0
.text:00012ACB                 mov     ecx, [ebp+var_4]
.text:00012ACE                 mov     dword ptr [ecx+4], 0
.text:00012AD5                 mov     edx, [ebp+var_4]
.text:00012AD8                 mov     dword ptr [edx+8], 0
.text:00012ADF                 mov     eax, [ebp+var_4]
.text:00012AE2                 mov     esp, ebp
.text:00012AE4                 pop     ebp
.text:00012AE5                 retn
.text:00012AE5 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00012AE5
.text:00012AE5 ; ---------------------------------------------------------------------------
.text:00012AE6                 align 4
.text:00012AE6 _text           ends
.text:00012AE6
.text:00012AE8 ; ===========================================================================
.text:00012AE8
.text:00012AE8 ; Segment type: Pure code
.text:00012AE8 ; Segment permissions: Read/Execute
.text:00012AE8 _text           segment para public 'CODE' use32
.text:00012AE8                 assume cs:_text
.text:00012AE8                 ;org 12AE8h
.text:00012AE8 ; COMDAT (pick any)
.text:00012AE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012AE8
.text:00012AE8 ; =============== S U B R O U T I N E =======================================
.text:00012AE8
.text:00012AE8 ; Attributes: bp-based frame
.text:00012AE8
.text:00012AE8 ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00012AE8                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:00012AE8 ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0COpenCallbackImp@@QAE@XZ$5+9j
.text:00012AE8                                         ; COpenCallbackImp::~COpenCallbackImp(void)+4Fp ...
.text:00012AE8
.text:00012AE8 var_8           = dword ptr -8
.text:00012AE8 var_4           = dword ptr -4
.text:00012AE8
.text:00012AE8                 push    ebp
.text:00012AE9                 mov     ebp, esp
.text:00012AEB                 sub     esp, 8
.text:00012AEE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00012AF5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012AFC                 mov     [ebp+var_4], ecx
.text:00012AFF                 mov     eax, [ebp+var_4]
.text:00012B02                 mov     ecx, [eax]
.text:00012B04                 mov     [ebp+var_8], ecx
.text:00012B07                 mov     edx, [ebp+var_8]
.text:00012B0A                 push    edx             ; void *
.text:00012B0B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00012B10                 add     esp, 4
.text:00012B13                 add     esp, 8
.text:00012B16                 cmp     ebp, esp
.text:00012B18                 call    __RTC_CheckEsp
.text:00012B1D                 mov     esp, ebp
.text:00012B1F                 pop     ebp
.text:00012B20                 retn
.text:00012B20 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00012B20
.text:00012B20 ; ---------------------------------------------------------------------------
.text:00012B21                 align 4
.text:00012B21 _text           ends
.text:00012B21
.text:00012B24 ; ===========================================================================
.text:00012B24
.text:00012B24 ; Segment type: Pure code
.text:00012B24 ; Segment permissions: Read/Execute
.text:00012B24 _text           segment para public 'CODE' use32
.text:00012B24                 assume cs:_text
.text:00012B24                 ;org 12B24h
.text:00012B24 ; COMDAT (pick any)
.text:00012B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012B24
.text:00012B24 ; =============== S U B R O U T I N E =======================================
.text:00012B24
.text:00012B24 ; Attributes: bp-based frame
.text:00012B24
.text:00012B24 ; public: void __thiscall CRecordVector<unsigned __int64>::Clear(void)
.text:00012B24                 public ?Clear@?$CRecordVector@_K@@QAEXXZ
.text:00012B24 ?Clear@?$CRecordVector@_K@@QAEXXZ proc near
.text:00012B24                                         ; CODE XREF: COpenCallbackImp::Init(UString const &,UString const &)+E4p
.text:00012B24
.text:00012B24 var_4           = dword ptr -4
.text:00012B24
.text:00012B24                 push    ebp
.text:00012B25                 mov     ebp, esp
.text:00012B27                 push    ecx
.text:00012B28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012B2F                 mov     [ebp+var_4], ecx
.text:00012B32                 mov     eax, [ebp+var_4]
.text:00012B35                 mov     dword ptr [eax+4], 0
.text:00012B3C                 mov     esp, ebp
.text:00012B3E                 pop     ebp
.text:00012B3F                 retn
.text:00012B3F ?Clear@?$CRecordVector@_K@@QAEXXZ endp
.text:00012B3F
.text:00012B3F _text           ends
.text:00012B3F
.text:00012B40 ; ===========================================================================
.text:00012B40
.text:00012B40 ; Segment type: Pure code
.text:00012B40 ; Segment permissions: Read/Execute
.text:00012B40 _text           segment para public 'CODE' use32
.text:00012B40                 assume cs:_text
.text:00012B40                 ;org 12B40h
.text:00012B40 ; COMDAT (pick any)
.text:00012B40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012B40
.text:00012B40 ; =============== S U B R O U T I N E =======================================
.text:00012B40
.text:00012B40 ; Attributes: bp-based frame
.text:00012B40
.text:00012B40 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:00012B40                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:00012B40 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:00012B40                                         ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+231p
.text:00012B40
.text:00012B40 var_4           = dword ptr -4
.text:00012B40 arg_0           = dword ptr  8
.text:00012B40
.text:00012B40                 push    ebp
.text:00012B41                 mov     ebp, esp
.text:00012B43                 push    ecx
.text:00012B44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012B4B                 mov     [ebp+var_4], ecx
.text:00012B4E                 mov     eax, [ebp+var_4]
.text:00012B51                 mov     ecx, [eax]
.text:00012B53                 mov     edx, [ebp+arg_0]
.text:00012B56                 lea     eax, [ecx+edx*8]
.text:00012B59                 mov     esp, ebp
.text:00012B5B                 pop     ebp
.text:00012B5C                 retn    4
.text:00012B5C ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:00012B5C
.text:00012B5C ; ---------------------------------------------------------------------------
.text:00012B5F                 align 10h
.text:00012B5F _text           ends
.text:00012B5F
.text:00012B60 ; ===========================================================================
.text:00012B60
.text:00012B60 ; Segment type: Pure code
.text:00012B60 ; Segment permissions: Read/Execute
.text:00012B60 _text           segment para public 'CODE' use32
.text:00012B60                 assume cs:_text
.text:00012B60                 ;org 12B60h
.text:00012B60 ; COMDAT (pick any)
.text:00012B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012B60
.text:00012B60 ; =============== S U B R O U T I N E =======================================
.text:00012B60
.text:00012B60 ; Attributes: bp-based frame
.text:00012B60
.text:00012B60 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::CMyComPtr<struct IArchiveOpenCallback>(void)
.text:00012B60                 public ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ
.text:00012B60 ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ proc near
.text:00012B60                                         ; CODE XREF: CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback(void)+45p
.text:00012B60                                         ; CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset(void)+64p ...
.text:00012B60
.text:00012B60 var_4           = dword ptr -4
.text:00012B60
.text:00012B60                 push    ebp
.text:00012B61                 mov     ebp, esp
.text:00012B63                 push    ecx
.text:00012B64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012B6B                 mov     [ebp+var_4], ecx
.text:00012B6E                 mov     eax, [ebp+var_4]
.text:00012B71                 mov     dword ptr [eax], 0
.text:00012B77                 mov     eax, [ebp+var_4]
.text:00012B7A                 mov     esp, ebp
.text:00012B7C                 pop     ebp
.text:00012B7D                 retn
.text:00012B7D ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ endp
.text:00012B7D
.text:00012B7D ; ---------------------------------------------------------------------------
.text:00012B7E                 align 10h
.text:00012B7E _text           ends
.text:00012B7E
.text:00012B80 ; ===========================================================================
.text:00012B80
.text:00012B80 ; Segment type: Pure code
.text:00012B80 ; Segment permissions: Read/Execute
.text:00012B80 _text           segment para public 'CODE' use32
.text:00012B80                 assume cs:_text
.text:00012B80                 ;org 12B80h
.text:00012B80 ; COMDAT (pick any)
.text:00012B80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012B80
.text:00012B80 ; =============== S U B R O U T I N E =======================================
.text:00012B80
.text:00012B80 ; Attributes: bp-based frame
.text:00012B80
.text:00012B80 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::CMyComPtr<struct IArchiveOpenCallback>(struct IArchiveOpenCallback *)
.text:00012B80                 public ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z
.text:00012B80 ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z proc near
.text:00012B80                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+28FBp
.text:00012B80                                         ; CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+97p ...
.text:00012B80
.text:00012B80 var_4           = dword ptr -4
.text:00012B80 arg_0           = dword ptr  8
.text:00012B80
.text:00012B80                 push    ebp
.text:00012B81                 mov     ebp, esp
.text:00012B83                 push    ecx
.text:00012B84                 push    esi
.text:00012B85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012B8C                 mov     [ebp+var_4], ecx
.text:00012B8F                 mov     eax, [ebp+var_4]
.text:00012B92                 mov     ecx, [ebp+arg_0]
.text:00012B95                 mov     [eax], ecx
.text:00012B97                 cmp     [ebp+arg_0], 0
.text:00012B9B                 jz      short loc_12BB4
.text:00012B9D                 mov     edx, [ebp+arg_0]
.text:00012BA0                 mov     eax, [edx]
.text:00012BA2                 mov     esi, esp
.text:00012BA4                 mov     ecx, [ebp+arg_0]
.text:00012BA7                 push    ecx
.text:00012BA8                 mov     edx, [eax+4]
.text:00012BAB                 call    edx
.text:00012BAD                 cmp     esi, esp
.text:00012BAF                 call    __RTC_CheckEsp
.text:00012BB4
.text:00012BB4 loc_12BB4:                              ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(IArchiveOpenCallback *)+1Bj
.text:00012BB4                 mov     eax, [ebp+var_4]
.text:00012BB7                 pop     esi
.text:00012BB8                 add     esp, 4
.text:00012BBB                 cmp     ebp, esp
.text:00012BBD                 call    __RTC_CheckEsp
.text:00012BC2                 mov     esp, ebp
.text:00012BC4                 pop     ebp
.text:00012BC5                 retn    4
.text:00012BC5 ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z endp
.text:00012BC5
.text:00012BC5 _text           ends
.text:00012BC5
.text:00012BC8 ; ===========================================================================
.text:00012BC8
.text:00012BC8 ; Segment type: Pure code
.text:00012BC8 ; Segment permissions: Read/Execute
.text:00012BC8 _text           segment para public 'CODE' use32
.text:00012BC8                 assume cs:_text
.text:00012BC8                 ;org 12BC8h
.text:00012BC8 ; COMDAT (pick any)
.text:00012BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012BC8
.text:00012BC8 ; =============== S U B R O U T I N E =======================================
.text:00012BC8
.text:00012BC8 ; Attributes: bp-based frame
.text:00012BC8
.text:00012BC8 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::~CMyComPtr<struct IArchiveOpenCallback>(void)
.text:00012BC8                 public ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ
.text:00012BC8 ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ proc near
.text:00012BC8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+29BCp
.text:00012BC8                                         ; CArc::OpenStream2(COpenOptions const &)+2CF5p ...
.text:00012BC8
.text:00012BC8 var_4           = dword ptr -4
.text:00012BC8
.text:00012BC8                 push    ebp
.text:00012BC9                 mov     ebp, esp
.text:00012BCB                 push    ecx
.text:00012BCC                 push    esi
.text:00012BCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012BD4                 mov     [ebp+var_4], ecx
.text:00012BD7                 mov     eax, [ebp+var_4]
.text:00012BDA                 cmp     dword ptr [eax], 0
.text:00012BDD                 jz      short loc_12BFA
.text:00012BDF                 mov     ecx, [ebp+var_4]
.text:00012BE2                 mov     edx, [ecx]
.text:00012BE4                 mov     eax, [ebp+var_4]
.text:00012BE7                 mov     ecx, [eax]
.text:00012BE9                 mov     edx, [edx]
.text:00012BEB                 mov     esi, esp
.text:00012BED                 push    ecx
.text:00012BEE                 mov     eax, [edx+8]
.text:00012BF1                 call    eax
.text:00012BF3                 cmp     esi, esp
.text:00012BF5                 call    __RTC_CheckEsp
.text:00012BFA
.text:00012BFA loc_12BFA:                              ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)+15j
.text:00012BFA                 pop     esi
.text:00012BFB                 add     esp, 4
.text:00012BFE                 cmp     ebp, esp
.text:00012C00                 call    __RTC_CheckEsp
.text:00012C05                 mov     esp, ebp
.text:00012C07                 pop     ebp
.text:00012C08                 retn
.text:00012C08 ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ endp
.text:00012C08
.text:00012C08 ; ---------------------------------------------------------------------------
.text:00012C09                 align 4
.text:00012C09 _text           ends
.text:00012C09
.text:00012C0C ; ===========================================================================
.text:00012C0C
.text:00012C0C ; Segment type: Pure code
.text:00012C0C ; Segment permissions: Read/Execute
.text:00012C0C _text           segment para public 'CODE' use32
.text:00012C0C                 assume cs:_text
.text:00012C0C                 ;org 12C0Ch
.text:00012C0C ; COMDAT (pick any)
.text:00012C0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012C0C
.text:00012C0C ; =============== S U B R O U T I N E =======================================
.text:00012C0C
.text:00012C0C ; Attributes: bp-based frame
.text:00012C0C
.text:00012C0C ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator struct IArchiveOpenCallback *(void)const
.text:00012C0C                 public ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
.text:00012C0C ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ proc near
.text:00012C0C                                         ; CODE XREF: CExtractCallback_To_OpenCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+21p
.text:00012C0C                                         ; CArc::OpenStream2(COpenOptions const &)+40CCp ...
.text:00012C0C
.text:00012C0C var_4           = dword ptr -4
.text:00012C0C
.text:00012C0C                 push    ebp
.text:00012C0D                 mov     ebp, esp
.text:00012C0F                 push    ecx
.text:00012C10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012C17                 mov     [ebp+var_4], ecx
.text:00012C1A                 mov     eax, [ebp+var_4]
.text:00012C1D                 mov     eax, [eax]
.text:00012C1F                 mov     esp, ebp
.text:00012C21                 pop     ebp
.text:00012C22                 retn
.text:00012C22 ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ endp
.text:00012C22
.text:00012C22 ; ---------------------------------------------------------------------------
.text:00012C23                 align 4
.text:00012C23 _text           ends
.text:00012C23
.text:00012C24 ; ===========================================================================
.text:00012C24
.text:00012C24 ; Segment type: Pure code
.text:00012C24 ; Segment permissions: Read/Execute
.text:00012C24 _text           segment para public 'CODE' use32
.text:00012C24                 assume cs:_text
.text:00012C24                 ;org 12C24h
.text:00012C24 ; COMDAT (pick any)
.text:00012C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012C24
.text:00012C24 ; =============== S U B R O U T I N E =======================================
.text:00012C24
.text:00012C24 ; Attributes: bp-based frame
.text:00012C24
.text:00012C24 ; public: struct IArchiveOpenCallback * __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator->(void)const
.text:00012C24                 public ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
.text:00012C24 ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ proc near
.text:00012C24                                         ; CODE XREF: CArchiveOpenCallback_Offset::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+60p
.text:00012C24                                         ; CExtractCallback_To_OpenCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+59p ...
.text:00012C24
.text:00012C24 var_4           = dword ptr -4
.text:00012C24
.text:00012C24                 push    ebp
.text:00012C25                 mov     ebp, esp
.text:00012C27                 push    ecx
.text:00012C28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012C2F                 mov     [ebp+var_4], ecx
.text:00012C32                 mov     eax, [ebp+var_4]
.text:00012C35                 mov     eax, [eax]
.text:00012C37                 mov     esp, ebp
.text:00012C39                 pop     ebp
.text:00012C3A                 retn
.text:00012C3A ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ endp
.text:00012C3A
.text:00012C3A ; ---------------------------------------------------------------------------
.text:00012C3B                 align 4
.text:00012C3B _text           ends
.text:00012C3B
.text:00012C3C ; ===========================================================================
.text:00012C3C
.text:00012C3C ; Segment type: Pure code
.text:00012C3C ; Segment permissions: Read/Execute
.text:00012C3C _text           segment para public 'CODE' use32
.text:00012C3C                 assume cs:_text
.text:00012C3C                 ;org 12C3Ch
.text:00012C3C ; COMDAT (pick any)
.text:00012C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012C3C
.text:00012C3C ; =============== S U B R O U T I N E =======================================
.text:00012C3C
.text:00012C3C ; Attributes: bp-based frame
.text:00012C3C
.text:00012C3C ; public: struct IArchiveOpenCallback * __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator=(struct IArchiveOpenCallback *)
.text:00012C3C                 public ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z
.text:00012C3C ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z proc near
.text:00012C3C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2E11p
.text:00012C3C                                         ; CArchiveLink::ReOpen(COpenOptions &)+15Fp ...
.text:00012C3C
.text:00012C3C var_4           = dword ptr -4
.text:00012C3C arg_0           = dword ptr  8
.text:00012C3C
.text:00012C3C                 push    ebp
.text:00012C3D                 mov     ebp, esp
.text:00012C3F                 push    ecx
.text:00012C40                 push    esi
.text:00012C41                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012C48                 mov     [ebp+var_4], ecx
.text:00012C4B                 cmp     [ebp+arg_0], 0
.text:00012C4F                 jz      short loc_12C68
.text:00012C51                 mov     eax, [ebp+arg_0]
.text:00012C54                 mov     ecx, [eax]
.text:00012C56                 mov     esi, esp
.text:00012C58                 mov     edx, [ebp+arg_0]
.text:00012C5B                 push    edx
.text:00012C5C                 mov     eax, [ecx+4]
.text:00012C5F                 call    eax
.text:00012C61                 cmp     esi, esp
.text:00012C63                 call    __RTC_CheckEsp
.text:00012C68
.text:00012C68 loc_12C68:                              ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::operator=(IArchiveOpenCallback *)+13j
.text:00012C68                 mov     ecx, [ebp+var_4]
.text:00012C6B                 cmp     dword ptr [ecx], 0
.text:00012C6E                 jz      short loc_12C8B
.text:00012C70                 mov     edx, [ebp+var_4]
.text:00012C73                 mov     eax, [edx]
.text:00012C75                 mov     ecx, [ebp+var_4]
.text:00012C78                 mov     edx, [ecx]
.text:00012C7A                 mov     eax, [eax]
.text:00012C7C                 mov     esi, esp
.text:00012C7E                 push    edx
.text:00012C7F                 mov     ecx, [eax+8]
.text:00012C82                 call    ecx
.text:00012C84                 cmp     esi, esp
.text:00012C86                 call    __RTC_CheckEsp
.text:00012C8B
.text:00012C8B loc_12C8B:                              ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::operator=(IArchiveOpenCallback *)+32j
.text:00012C8B                 mov     edx, [ebp+var_4]
.text:00012C8E                 mov     eax, [ebp+arg_0]
.text:00012C91                 mov     [edx], eax
.text:00012C93                 mov     eax, [ebp+arg_0]
.text:00012C96                 pop     esi
.text:00012C97                 add     esp, 4
.text:00012C9A                 cmp     ebp, esp
.text:00012C9C                 call    __RTC_CheckEsp
.text:00012CA1                 mov     esp, ebp
.text:00012CA3                 pop     ebp
.text:00012CA4                 retn    4
.text:00012CA4 ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z endp
.text:00012CA4
.text:00012CA4 ; ---------------------------------------------------------------------------
.text:00012CA7                 align 4
.text:00012CA7 _text           ends
.text:00012CA7
.text:00012CA8 ; ===========================================================================
.text:00012CA8
.text:00012CA8 ; Segment type: Pure code
.text:00012CA8 ; Segment permissions: Read/Execute
.text:00012CA8 _text           segment para public 'CODE' use32
.text:00012CA8                 assume cs:_text
.text:00012CA8                 ;org 12CA8h
.text:00012CA8 ; COMDAT (pick any)
.text:00012CA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012CA8
.text:00012CA8 ; =============== S U B R O U T I N E =======================================
.text:00012CA8
.text:00012CA8 ; Attributes: bp-based frame
.text:00012CA8
.text:00012CA8 ; public: bool __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator!(void)const
.text:00012CA8                 public ??7?$CMyComPtr@UIArchiveOpenCallback@@@@QBE_NXZ
.text:00012CA8 ??7?$CMyComPtr@UIArchiveOpenCallback@@@@QBE_NXZ proc near
.text:00012CA8                                         ; CODE XREF: CArchiveOpenCallback_Offset::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+21p
.text:00012CA8
.text:00012CA8 var_4           = dword ptr -4
.text:00012CA8
.text:00012CA8                 push    ebp
.text:00012CA9                 mov     ebp, esp
.text:00012CAB                 push    ecx
.text:00012CAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012CB3                 mov     [ebp+var_4], ecx
.text:00012CB6                 mov     eax, [ebp+var_4]
.text:00012CB9                 xor     ecx, ecx
.text:00012CBB                 cmp     dword ptr [eax], 0
.text:00012CBE                 setz    cl
.text:00012CC1                 mov     al, cl
.text:00012CC3                 mov     esp, ebp
.text:00012CC5                 pop     ebp
.text:00012CC6                 retn
.text:00012CC6 ??7?$CMyComPtr@UIArchiveOpenCallback@@@@QBE_NXZ endp
.text:00012CC6
.text:00012CC6 ; ---------------------------------------------------------------------------
.text:00012CC7                 align 4
.text:00012CC7 _text           ends
.text:00012CC7
.text:00012CC8 ; ===========================================================================
.text:00012CC8
.text:00012CC8 ; Segment type: Pure code
.text:00012CC8 ; Segment permissions: Read/Execute
.text:00012CC8 _text           segment para public 'CODE' use32
.text:00012CC8                 assume cs:_text
.text:00012CC8                 ;org 12CC8h
.text:00012CC8 ; COMDAT (pick any)
.text:00012CC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012CC8
.text:00012CC8 ; =============== S U B R O U T I N E =======================================
.text:00012CC8
.text:00012CC8 ; Attributes: bp-based frame
.text:00012CC8
.text:00012CC8 ; public: unsigned int __thiscall CObjectVector<struct CArcExtInfo>::Size(void)const
.text:00012CC8                 public ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ
.text:00012CC8 ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ proc near
.text:00012CC8                                         ; CODE XREF: CArc::OpenStream(COpenOptions const &)+284p
.text:00012CC8
.text:00012CC8 var_4           = dword ptr -4
.text:00012CC8
.text:00012CC8                 push    ebp
.text:00012CC9                 mov     ebp, esp
.text:00012CCB                 push    ecx
.text:00012CCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012CD3                 mov     [ebp+var_4], ecx
.text:00012CD6                 mov     ecx, [ebp+var_4]
.text:00012CD9                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00012CDE                 add     esp, 4
.text:00012CE1                 cmp     ebp, esp
.text:00012CE3                 call    __RTC_CheckEsp
.text:00012CE8                 mov     esp, ebp
.text:00012CEA                 pop     ebp
.text:00012CEB                 retn
.text:00012CEB ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ endp
.text:00012CEB
.text:00012CEB _text           ends
.text:00012CEB
.text:00012CEC ; ===========================================================================
.text:00012CEC
.text:00012CEC ; Segment type: Pure code
.text:00012CEC ; Segment permissions: Read/Execute
.text:00012CEC _text           segment para public 'CODE' use32
.text:00012CEC                 assume cs:_text
.text:00012CEC                 ;org 12CECh
.text:00012CEC ; COMDAT (pick any)
.text:00012CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012CEC
.text:00012CEC ; =============== S U B R O U T I N E =======================================
.text:00012CEC
.text:00012CEC ; Attributes: bp-based frame
.text:00012CEC
.text:00012CEC ; public: bool __thiscall CObjectVector<struct CArcExtInfo>::IsEmpty(void)const
.text:00012CEC                 public ?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ
.text:00012CEC ?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ proc near
.text:00012CEC                                         ; CODE XREF: CArcInfoEx::GetMainExt(void)+24p
.text:00012CEC
.text:00012CEC var_4           = dword ptr -4
.text:00012CEC
.text:00012CEC                 push    ebp
.text:00012CED                 mov     ebp, esp
.text:00012CEF                 push    ecx
.text:00012CF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012CF7                 mov     [ebp+var_4], ecx
.text:00012CFA                 mov     ecx, [ebp+var_4]
.text:00012CFD                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00012D02                 add     esp, 4
.text:00012D05                 cmp     ebp, esp
.text:00012D07                 call    __RTC_CheckEsp
.text:00012D0C                 mov     esp, ebp
.text:00012D0E                 pop     ebp
.text:00012D0F                 retn
.text:00012D0F ?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ endp
.text:00012D0F
.text:00012D0F _text           ends
.text:00012D0F
.text:00012D10 ; ===========================================================================
.text:00012D10
.text:00012D10 ; Segment type: Pure code
.text:00012D10 ; Segment permissions: Read/Execute
.text:00012D10 _text           segment para public 'CODE' use32
.text:00012D10                 assume cs:_text
.text:00012D10                 ;org 12D10h
.text:00012D10 ; COMDAT (pick any)
.text:00012D10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012D10
.text:00012D10 ; =============== S U B R O U T I N E =======================================
.text:00012D10
.text:00012D10 ; Attributes: bp-based frame
.text:00012D10
.text:00012D10 ; public: struct CArcExtInfo const & __thiscall CObjectVector<struct CArcExtInfo>::operator[](unsigned int)const
.text:00012D10                 public ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z
.text:00012D10 ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z proc near
.text:00012D10                                         ; CODE XREF: CArc::OpenStream(COpenOptions const &)+368p
.text:00012D10                                         ; CArcInfoEx::GetMainExt(void)+4Ep
.text:00012D10
.text:00012D10 var_4           = dword ptr -4
.text:00012D10 arg_0           = dword ptr  8
.text:00012D10
.text:00012D10                 push    ebp
.text:00012D11                 mov     ebp, esp
.text:00012D13                 push    ecx
.text:00012D14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012D1B                 mov     [ebp+var_4], ecx
.text:00012D1E                 mov     eax, [ebp+arg_0]
.text:00012D21                 push    eax
.text:00012D22                 mov     ecx, [ebp+var_4]
.text:00012D25                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00012D2A                 mov     eax, [eax]
.text:00012D2C                 add     esp, 4
.text:00012D2F                 cmp     ebp, esp
.text:00012D31                 call    __RTC_CheckEsp
.text:00012D36                 mov     esp, ebp
.text:00012D38                 pop     ebp
.text:00012D39                 retn    4
.text:00012D39 ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z endp
.text:00012D39
.text:00012D39 _text           ends
.text:00012D39
.text:00012D3C ; ===========================================================================
.text:00012D3C
.text:00012D3C ; Segment type: Pure code
.text:00012D3C ; Segment permissions: Read/Execute
.text:00012D3C _text           segment para public 'CODE' use32
.text:00012D3C                 assume cs:_text
.text:00012D3C                 ;org 12D3Ch
.text:00012D3C ; COMDAT (pick any)
.text:00012D3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012D3C
.text:00012D3C ; =============== S U B R O U T I N E =======================================
.text:00012D3C
.text:00012D3C ; Attributes: bp-based frame
.text:00012D3C
.text:00012D3C ; public: unsigned int __thiscall CObjectVector<class CBuffer<unsigned char>>::Size(void)const
.text:00012D3C                 public ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ
.text:00012D3C ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ proc near
.text:00012D3C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1C57p
.text:00012D3C                                         ; CArc::OpenStream2(COpenOptions const &)+1D08p ...
.text:00012D3C
.text:00012D3C var_4           = dword ptr -4
.text:00012D3C
.text:00012D3C                 push    ebp
.text:00012D3D                 mov     ebp, esp
.text:00012D3F                 push    ecx
.text:00012D40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012D47                 mov     [ebp+var_4], ecx
.text:00012D4A                 mov     ecx, [ebp+var_4]
.text:00012D4D                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00012D52                 add     esp, 4
.text:00012D55                 cmp     ebp, esp
.text:00012D57                 call    __RTC_CheckEsp
.text:00012D5C                 mov     esp, ebp
.text:00012D5E                 pop     ebp
.text:00012D5F                 retn
.text:00012D5F ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ endp
.text:00012D5F
.text:00012D5F _text           ends
.text:00012D5F
.text:00012D60 ; ===========================================================================
.text:00012D60
.text:00012D60 ; Segment type: Pure code
.text:00012D60 ; Segment permissions: Read/Execute
.text:00012D60 _text           segment para public 'CODE' use32
.text:00012D60                 assume cs:_text
.text:00012D60                 ;org 12D60h
.text:00012D60 ; COMDAT (pick any)
.text:00012D60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012D60
.text:00012D60 ; =============== S U B R O U T I N E =======================================
.text:00012D60
.text:00012D60 ; Attributes: bp-based frame
.text:00012D60
.text:00012D60 ; public: bool __thiscall CObjectVector<class CBuffer<unsigned char>>::IsEmpty(void)const
.text:00012D60                 public ?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ
.text:00012D60 ?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ proc near
.text:00012D60                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1BA7p
.text:00012D60                                         ; CArc::OpenStream2(COpenOptions const &)+1C23p
.text:00012D60
.text:00012D60 var_4           = dword ptr -4
.text:00012D60
.text:00012D60                 push    ebp
.text:00012D61                 mov     ebp, esp
.text:00012D63                 push    ecx
.text:00012D64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012D6B                 mov     [ebp+var_4], ecx
.text:00012D6E                 mov     ecx, [ebp+var_4]
.text:00012D71                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00012D76                 add     esp, 4
.text:00012D79                 cmp     ebp, esp
.text:00012D7B                 call    __RTC_CheckEsp
.text:00012D80                 mov     esp, ebp
.text:00012D82                 pop     ebp
.text:00012D83                 retn
.text:00012D83 ?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ endp
.text:00012D83
.text:00012D83 _text           ends
.text:00012D83
.text:00012D84 ; ===========================================================================
.text:00012D84
.text:00012D84 ; Segment type: Pure code
.text:00012D84 ; Segment permissions: Read/Execute
.text:00012D84 _text           segment para public 'CODE' use32
.text:00012D84                 assume cs:_text
.text:00012D84                 ;org 12D84h
.text:00012D84 ; COMDAT (pick any)
.text:00012D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012D84
.text:00012D84 ; =============== S U B R O U T I N E =======================================
.text:00012D84
.text:00012D84 ; Attributes: bp-based frame
.text:00012D84
.text:00012D84 ; public: class CBuffer<unsigned char> const & __thiscall CObjectVector<class CBuffer<unsigned char>>::operator[](unsigned int)const
.text:00012D84                 public ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z
.text:00012D84 ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z proc near
.text:00012D84                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1C78p
.text:00012D84                                         ; CArc::OpenStream2(COpenOptions const &)+2B9Cp ...
.text:00012D84
.text:00012D84 var_4           = dword ptr -4
.text:00012D84 arg_0           = dword ptr  8
.text:00012D84
.text:00012D84                 push    ebp
.text:00012D85                 mov     ebp, esp
.text:00012D87                 push    ecx
.text:00012D88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012D8F                 mov     [ebp+var_4], ecx
.text:00012D92                 mov     eax, [ebp+arg_0]
.text:00012D95                 push    eax
.text:00012D96                 mov     ecx, [ebp+var_4]
.text:00012D99                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00012D9E                 mov     eax, [eax]
.text:00012DA0                 add     esp, 4
.text:00012DA3                 cmp     ebp, esp
.text:00012DA5                 call    __RTC_CheckEsp
.text:00012DAA                 mov     esp, ebp
.text:00012DAC                 pop     ebp
.text:00012DAD                 retn    4
.text:00012DAD ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z endp
.text:00012DAD
.text:00012DAD _text           ends
.text:00012DAD
.text:00012DB0 ; ===========================================================================
.text:00012DB0
.text:00012DB0 ; Segment type: Pure code
.text:00012DB0 ; Segment permissions: Read/Execute
.text:00012DB0 _text           segment para public 'CODE' use32
.text:00012DB0                 assume cs:_text
.text:00012DB0                 ;org 12DB0h
.text:00012DB0 ; COMDAT (pick any)
.text:00012DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012DB0
.text:00012DB0 ; =============== S U B R O U T I N E =======================================
.text:00012DB0
.text:00012DB0 ; Attributes: bp-based frame
.text:00012DB0
.text:00012DB0 ; public: unsigned int __thiscall CObjectVector<struct CArcInfoEx>::Size(void)const
.text:00012DB0                 public ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ
.text:00012DB0 ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ proc near
.text:00012DB0                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+FCp
.text:00012DB0                                         ; CArc::OpenStream2(COpenOptions const &)+128p ...
.text:00012DB0
.text:00012DB0 var_4           = dword ptr -4
.text:00012DB0
.text:00012DB0                 push    ebp
.text:00012DB1                 mov     ebp, esp
.text:00012DB3                 push    ecx
.text:00012DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012DBB                 mov     [ebp+var_4], ecx
.text:00012DBE                 mov     ecx, [ebp+var_4]
.text:00012DC1                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00012DC6                 add     esp, 4
.text:00012DC9                 cmp     ebp, esp
.text:00012DCB                 call    __RTC_CheckEsp
.text:00012DD0                 mov     esp, ebp
.text:00012DD2                 pop     ebp
.text:00012DD3                 retn
.text:00012DD3 ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ endp
.text:00012DD3
.text:00012DD3 _text           ends
.text:00012DD3
.text:00012DD4 ; ===========================================================================
.text:00012DD4
.text:00012DD4 ; Segment type: Pure code
.text:00012DD4 ; Segment permissions: Read/Execute
.text:00012DD4 _text           segment para public 'CODE' use32
.text:00012DD4                 assume cs:_text
.text:00012DD4                 ;org 12DD4h
.text:00012DD4 ; COMDAT (pick any)
.text:00012DD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012DD4
.text:00012DD4 ; =============== S U B R O U T I N E =======================================
.text:00012DD4
.text:00012DD4 ; Attributes: bp-based frame
.text:00012DD4
.text:00012DD4 ; public: struct CArcInfoEx const & __thiscall CObjectVector<struct CArcInfoEx>::operator[](unsigned int)const
.text:00012DD4                 public ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z
.text:00012DD4 ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z proc near
.text:00012DD4                                         ; CODE XREF: CCodecs::CreateInArchive(uint,CMyComPtr<IInArchive> &)+4Ap
.text:00012DD4
.text:00012DD4 var_4           = dword ptr -4
.text:00012DD4 arg_0           = dword ptr  8
.text:00012DD4
.text:00012DD4                 push    ebp
.text:00012DD5                 mov     ebp, esp
.text:00012DD7                 push    ecx
.text:00012DD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012DDF                 mov     [ebp+var_4], ecx
.text:00012DE2                 mov     eax, [ebp+arg_0]
.text:00012DE5                 push    eax
.text:00012DE6                 mov     ecx, [ebp+var_4]
.text:00012DE9                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00012DEE                 mov     eax, [eax]
.text:00012DF0                 add     esp, 4
.text:00012DF3                 cmp     ebp, esp
.text:00012DF5                 call    __RTC_CheckEsp
.text:00012DFA                 mov     esp, ebp
.text:00012DFC                 pop     ebp
.text:00012DFD                 retn    4
.text:00012DFD ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z endp
.text:00012DFD
.text:00012DFD _text           ends
.text:00012DFD
.text:00012E00 ; ===========================================================================
.text:00012E00
.text:00012E00 ; Segment type: Pure code
.text:00012E00 ; Segment permissions: Read/Execute
.text:00012E00 _text           segment para public 'CODE' use32
.text:00012E00                 assume cs:_text
.text:00012E00                 ;org 12E00h
.text:00012E00 ; COMDAT (pick any)
.text:00012E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012E00
.text:00012E00 ; =============== S U B R O U T I N E =======================================
.text:00012E00
.text:00012E00 ; Attributes: bp-based frame
.text:00012E00
.text:00012E00 ; public: struct CArcInfoEx & __thiscall CObjectVector<struct CArcInfoEx>::operator[](unsigned int)
.text:00012E00                 public ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z
.text:00012E00 ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z proc near
.text:00012E00                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+8Bp
.text:00012E00                                         ; CArc::OpenStream2(COpenOptions const &)+229p ...
.text:00012E00
.text:00012E00 var_4           = dword ptr -4
.text:00012E00 arg_0           = dword ptr  8
.text:00012E00
.text:00012E00                 push    ebp
.text:00012E01                 mov     ebp, esp
.text:00012E03                 push    ecx
.text:00012E04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012E0B                 mov     [ebp+var_4], ecx
.text:00012E0E                 mov     eax, [ebp+arg_0]
.text:00012E11                 push    eax
.text:00012E12                 mov     ecx, [ebp+var_4]
.text:00012E15                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00012E1A                 mov     eax, [eax]
.text:00012E1C                 add     esp, 4
.text:00012E1F                 cmp     ebp, esp
.text:00012E21                 call    __RTC_CheckEsp
.text:00012E26                 mov     esp, ebp
.text:00012E28                 pop     ebp
.text:00012E29                 retn    4
.text:00012E29 ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z endp
.text:00012E29
.text:00012E29 _text           ends
.text:00012E29
.text:00012E2C ; ===========================================================================
.text:00012E2C
.text:00012E2C ; Segment type: Pure code
.text:00012E2C ; Segment permissions: Read/Execute
.text:00012E2C _text           segment para public 'CODE' use32
.text:00012E2C                 assume cs:_text
.text:00012E2C                 ;org 12E2Ch
.text:00012E2C ; COMDAT (pick any)
.text:00012E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012E2C
.text:00012E2C ; =============== S U B R O U T I N E =======================================
.text:00012E2C
.text:00012E2C ; Attributes: bp-based frame
.text:00012E2C
.text:00012E2C ; public: __thiscall CMyComPtr<struct IInArchive>::CMyComPtr<struct IInArchive>(void)
.text:00012E2C                 public ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ
.text:00012E2C ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ proc near
.text:00012E2C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+D0Cp
.text:00012E2C                                         ; CArc::OpenStream2(COpenOptions const &)+1F87p ...
.text:00012E2C
.text:00012E2C var_4           = dword ptr -4
.text:00012E2C
.text:00012E2C                 push    ebp
.text:00012E2D                 mov     ebp, esp
.text:00012E2F                 push    ecx
.text:00012E30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012E37                 mov     [ebp+var_4], ecx
.text:00012E3A                 mov     eax, [ebp+var_4]
.text:00012E3D                 mov     dword ptr [eax], 0
.text:00012E43                 mov     eax, [ebp+var_4]
.text:00012E46                 mov     esp, ebp
.text:00012E48                 pop     ebp
.text:00012E49                 retn
.text:00012E49 ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ endp
.text:00012E49
.text:00012E49 ; ---------------------------------------------------------------------------
.text:00012E4A                 align 4
.text:00012E4A _text           ends
.text:00012E4A
.text:00012E4C ; ===========================================================================
.text:00012E4C
.text:00012E4C ; Segment type: Pure code
.text:00012E4C ; Segment permissions: Read/Execute
.text:00012E4C _text           segment para public 'CODE' use32
.text:00012E4C                 assume cs:_text
.text:00012E4C                 ;org 12E4Ch
.text:00012E4C ; COMDAT (pick any)
.text:00012E4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012E4C
.text:00012E4C ; =============== S U B R O U T I N E =======================================
.text:00012E4C
.text:00012E4C ; Attributes: bp-based frame
.text:00012E4C
.text:00012E4C ; public: __thiscall CMyComPtr<struct IInArchive>::CMyComPtr<struct IInArchive>(struct IInArchive *)
.text:00012E4C                 public ??0?$CMyComPtr@UIInArchive@@@@QAE@PAUIInArchive@@@Z
.text:00012E4C ??0?$CMyComPtr@UIInArchive@@@@QAE@PAUIInArchive@@@Z proc near
.text:00012E4C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+172Bp
.text:00012E4C
.text:00012E4C var_4           = dword ptr -4
.text:00012E4C arg_0           = dword ptr  8
.text:00012E4C
.text:00012E4C                 push    ebp
.text:00012E4D                 mov     ebp, esp
.text:00012E4F                 push    ecx
.text:00012E50                 push    esi
.text:00012E51                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012E58                 mov     [ebp+var_4], ecx
.text:00012E5B                 mov     eax, [ebp+var_4]
.text:00012E5E                 mov     ecx, [ebp+arg_0]
.text:00012E61                 mov     [eax], ecx
.text:00012E63                 cmp     [ebp+arg_0], 0
.text:00012E67                 jz      short loc_12E80
.text:00012E69                 mov     edx, [ebp+arg_0]
.text:00012E6C                 mov     eax, [edx]
.text:00012E6E                 mov     esi, esp
.text:00012E70                 mov     ecx, [ebp+arg_0]
.text:00012E73                 push    ecx
.text:00012E74                 mov     edx, [eax+4]
.text:00012E77                 call    edx
.text:00012E79                 cmp     esi, esp
.text:00012E7B                 call    __RTC_CheckEsp
.text:00012E80
.text:00012E80 loc_12E80:                              ; CODE XREF: CMyComPtr<IInArchive>::CMyComPtr<IInArchive>(IInArchive *)+1Bj
.text:00012E80                 mov     eax, [ebp+var_4]
.text:00012E83                 pop     esi
.text:00012E84                 add     esp, 4
.text:00012E87                 cmp     ebp, esp
.text:00012E89                 call    __RTC_CheckEsp
.text:00012E8E                 mov     esp, ebp
.text:00012E90                 pop     ebp
.text:00012E91                 retn    4
.text:00012E91 ??0?$CMyComPtr@UIInArchive@@@@QAE@PAUIInArchive@@@Z endp
.text:00012E91
.text:00012E91 _text           ends
.text:00012E91
.text:00012E94 ; ===========================================================================
.text:00012E94
.text:00012E94 ; Segment type: Pure code
.text:00012E94 ; Segment permissions: Read/Execute
.text:00012E94 _text           segment para public 'CODE' use32
.text:00012E94                 assume cs:_text
.text:00012E94                 ;org 12E94h
.text:00012E94 ; COMDAT (pick any)
.text:00012E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012E94
.text:00012E94 ; =============== S U B R O U T I N E =======================================
.text:00012E94
.text:00012E94 ; Attributes: bp-based frame
.text:00012E94
.text:00012E94 ; public: __thiscall CMyComPtr<struct IInArchive>::~CMyComPtr<struct IInArchive>(void)
.text:00012E94                 public ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ
.text:00012E94 ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ proc near
.text:00012E94                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+D57p
.text:00012E94                                         ; CArc::OpenStream2(COpenOptions const &)+DC5p ...
.text:00012E94
.text:00012E94 var_4           = dword ptr -4
.text:00012E94
.text:00012E94                 push    ebp
.text:00012E95                 mov     ebp, esp
.text:00012E97                 push    ecx
.text:00012E98                 push    esi
.text:00012E99                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012EA0                 mov     [ebp+var_4], ecx
.text:00012EA3                 mov     eax, [ebp+var_4]
.text:00012EA6                 cmp     dword ptr [eax], 0
.text:00012EA9                 jz      short loc_12EC6
.text:00012EAB                 mov     ecx, [ebp+var_4]
.text:00012EAE                 mov     edx, [ecx]
.text:00012EB0                 mov     eax, [ebp+var_4]
.text:00012EB3                 mov     ecx, [eax]
.text:00012EB5                 mov     edx, [edx]
.text:00012EB7                 mov     esi, esp
.text:00012EB9                 push    ecx
.text:00012EBA                 mov     eax, [edx+8]
.text:00012EBD                 call    eax
.text:00012EBF                 cmp     esi, esp
.text:00012EC1                 call    __RTC_CheckEsp
.text:00012EC6
.text:00012EC6 loc_12EC6:                              ; CODE XREF: CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)+15j
.text:00012EC6                 pop     esi
.text:00012EC7                 add     esp, 4
.text:00012ECA                 cmp     ebp, esp
.text:00012ECC                 call    __RTC_CheckEsp
.text:00012ED1                 mov     esp, ebp
.text:00012ED3                 pop     ebp
.text:00012ED4                 retn
.text:00012ED4 ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ endp
.text:00012ED4
.text:00012ED4 ; ---------------------------------------------------------------------------
.text:00012ED5                 align 4
.text:00012ED5 _text           ends
.text:00012ED5
.text:00012ED8 ; ===========================================================================
.text:00012ED8
.text:00012ED8 ; Segment type: Pure code
.text:00012ED8 ; Segment permissions: Read/Execute
.text:00012ED8 _text           segment para public 'CODE' use32
.text:00012ED8                 assume cs:_text
.text:00012ED8                 ;org 12ED8h
.text:00012ED8 ; COMDAT (pick any)
.text:00012ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012ED8
.text:00012ED8 ; =============== S U B R O U T I N E =======================================
.text:00012ED8
.text:00012ED8 ; Attributes: bp-based frame
.text:00012ED8
.text:00012ED8 ; public: void __thiscall CMyComPtr<struct IInArchive>::Release(void)
.text:00012ED8                 public ?Release@?$CMyComPtr@UIInArchive@@@@QAEXXZ
.text:00012ED8 ?Release@?$CMyComPtr@UIInArchive@@@@QAEXXZ proc near
.text:00012ED8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+47p
.text:00012ED8
.text:00012ED8 var_4           = dword ptr -4
.text:00012ED8
.text:00012ED8                 push    ebp
.text:00012ED9                 mov     ebp, esp
.text:00012EDB                 push    ecx
.text:00012EDC                 push    esi
.text:00012EDD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012EE4                 mov     [ebp+var_4], ecx
.text:00012EE7                 mov     eax, [ebp+var_4]
.text:00012EEA                 cmp     dword ptr [eax], 0
.text:00012EED                 jz      short loc_12F13
.text:00012EEF                 mov     ecx, [ebp+var_4]
.text:00012EF2                 mov     edx, [ecx]
.text:00012EF4                 mov     eax, [ebp+var_4]
.text:00012EF7                 mov     ecx, [eax]
.text:00012EF9                 mov     edx, [edx]
.text:00012EFB                 mov     esi, esp
.text:00012EFD                 push    ecx
.text:00012EFE                 mov     eax, [edx+8]
.text:00012F01                 call    eax
.text:00012F03                 cmp     esi, esp
.text:00012F05                 call    __RTC_CheckEsp
.text:00012F0A                 mov     ecx, [ebp+var_4]
.text:00012F0D                 mov     dword ptr [ecx], 0
.text:00012F13
.text:00012F13 loc_12F13:                              ; CODE XREF: CMyComPtr<IInArchive>::Release(void)+15j
.text:00012F13                 pop     esi
.text:00012F14                 add     esp, 4
.text:00012F17                 cmp     ebp, esp
.text:00012F19                 call    __RTC_CheckEsp
.text:00012F1E                 mov     esp, ebp
.text:00012F20                 pop     ebp
.text:00012F21                 retn
.text:00012F21 ?Release@?$CMyComPtr@UIInArchive@@@@QAEXXZ endp
.text:00012F21
.text:00012F21 ; ---------------------------------------------------------------------------
.text:00012F22                 align 4
.text:00012F22 _text           ends
.text:00012F22
.text:00012F24 ; ===========================================================================
.text:00012F24
.text:00012F24 ; Segment type: Pure code
.text:00012F24 ; Segment permissions: Read/Execute
.text:00012F24 _text           segment para public 'CODE' use32
.text:00012F24                 assume cs:_text
.text:00012F24                 ;org 12F24h
.text:00012F24 ; COMDAT (pick any)
.text:00012F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012F24
.text:00012F24 ; =============== S U B R O U T I N E =======================================
.text:00012F24
.text:00012F24 ; Attributes: bp-based frame
.text:00012F24
.text:00012F24 ; public: __thiscall CMyComPtr<struct IInArchive>::operator struct IInArchive *(void)const
.text:00012F24                 public ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
.text:00012F24 ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ proc near
.text:00012F24                                         ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+4Ep
.text:00012F24                                         ; CArc::GetItemPath2(uint,UString &)+5Bp ...
.text:00012F24
.text:00012F24 var_4           = dword ptr -4
.text:00012F24
.text:00012F24                 push    ebp
.text:00012F25                 mov     ebp, esp
.text:00012F27                 push    ecx
.text:00012F28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012F2F                 mov     [ebp+var_4], ecx
.text:00012F32                 mov     eax, [ebp+var_4]
.text:00012F35                 mov     eax, [eax]
.text:00012F37                 mov     esp, ebp
.text:00012F39                 pop     ebp
.text:00012F3A                 retn
.text:00012F3A ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ endp
.text:00012F3A
.text:00012F3A ; ---------------------------------------------------------------------------
.text:00012F3B                 align 4
.text:00012F3B _text           ends
.text:00012F3B
.text:00012F3C ; ===========================================================================
.text:00012F3C
.text:00012F3C ; Segment type: Pure code
.text:00012F3C ; Segment permissions: Read/Execute
.text:00012F3C _text           segment para public 'CODE' use32
.text:00012F3C                 assume cs:_text
.text:00012F3C                 ;org 12F3Ch
.text:00012F3C ; COMDAT (pick any)
.text:00012F3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012F3C
.text:00012F3C ; =============== S U B R O U T I N E =======================================
.text:00012F3C
.text:00012F3C ; Attributes: bp-based frame
.text:00012F3C
.text:00012F3C ; public: struct IInArchive * __thiscall CMyComPtr<struct IInArchive>::operator->(void)const
.text:00012F3C                 public ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
.text:00012F3C ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ proc near
.text:00012F3C                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+11Dp
.text:00012F3C                                         ; CArc::GetItemPath(uint,UString &)+14Ap ...
.text:00012F3C
.text:00012F3C var_4           = dword ptr -4
.text:00012F3C
.text:00012F3C                 push    ebp
.text:00012F3D                 mov     ebp, esp
.text:00012F3F                 push    ecx
.text:00012F40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012F47                 mov     [ebp+var_4], ecx
.text:00012F4A                 mov     eax, [ebp+var_4]
.text:00012F4D                 mov     eax, [eax]
.text:00012F4F                 mov     esp, ebp
.text:00012F51                 pop     ebp
.text:00012F52                 retn
.text:00012F52 ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ endp
.text:00012F52
.text:00012F52 ; ---------------------------------------------------------------------------
.text:00012F53                 align 4
.text:00012F53 _text           ends
.text:00012F53
.text:00012F54 ; ===========================================================================
.text:00012F54
.text:00012F54 ; Segment type: Pure code
.text:00012F54 ; Segment permissions: Read/Execute
.text:00012F54 _text           segment para public 'CODE' use32
.text:00012F54                 assume cs:_text
.text:00012F54                 ;org 12F54h
.text:00012F54 ; COMDAT (pick any)
.text:00012F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012F54
.text:00012F54 ; =============== S U B R O U T I N E =======================================
.text:00012F54
.text:00012F54 ; Attributes: bp-based frame
.text:00012F54
.text:00012F54 ; public: struct IInArchive * __thiscall CMyComPtr<struct IInArchive>::operator=(struct IInArchive *)
.text:00012F54                 public ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z
.text:00012F54 ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z proc near
.text:00012F54                                         ; CODE XREF: CCodecs::CreateInArchive(uint,CMyComPtr<IInArchive> &)+74p
.text:00012F54                                         ; CMyComPtr<IInArchive>::operator=(CMyComPtr<IInArchive> const &)+17p
.text:00012F54
.text:00012F54 var_4           = dword ptr -4
.text:00012F54 arg_0           = dword ptr  8
.text:00012F54
.text:00012F54                 push    ebp
.text:00012F55                 mov     ebp, esp
.text:00012F57                 push    ecx
.text:00012F58                 push    esi
.text:00012F59                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012F60                 mov     [ebp+var_4], ecx
.text:00012F63                 cmp     [ebp+arg_0], 0
.text:00012F67                 jz      short loc_12F80
.text:00012F69                 mov     eax, [ebp+arg_0]
.text:00012F6C                 mov     ecx, [eax]
.text:00012F6E                 mov     esi, esp
.text:00012F70                 mov     edx, [ebp+arg_0]
.text:00012F73                 push    edx
.text:00012F74                 mov     eax, [ecx+4]
.text:00012F77                 call    eax
.text:00012F79                 cmp     esi, esp
.text:00012F7B                 call    __RTC_CheckEsp
.text:00012F80
.text:00012F80 loc_12F80:                              ; CODE XREF: CMyComPtr<IInArchive>::operator=(IInArchive *)+13j
.text:00012F80                 mov     ecx, [ebp+var_4]
.text:00012F83                 cmp     dword ptr [ecx], 0
.text:00012F86                 jz      short loc_12FA3
.text:00012F88                 mov     edx, [ebp+var_4]
.text:00012F8B                 mov     eax, [edx]
.text:00012F8D                 mov     ecx, [ebp+var_4]
.text:00012F90                 mov     edx, [ecx]
.text:00012F92                 mov     eax, [eax]
.text:00012F94                 mov     esi, esp
.text:00012F96                 push    edx
.text:00012F97                 mov     ecx, [eax+8]
.text:00012F9A                 call    ecx
.text:00012F9C                 cmp     esi, esp
.text:00012F9E                 call    __RTC_CheckEsp
.text:00012FA3
.text:00012FA3 loc_12FA3:                              ; CODE XREF: CMyComPtr<IInArchive>::operator=(IInArchive *)+32j
.text:00012FA3                 mov     edx, [ebp+var_4]
.text:00012FA6                 mov     eax, [ebp+arg_0]
.text:00012FA9                 mov     [edx], eax
.text:00012FAB                 mov     eax, [ebp+arg_0]
.text:00012FAE                 pop     esi
.text:00012FAF                 add     esp, 4
.text:00012FB2                 cmp     ebp, esp
.text:00012FB4                 call    __RTC_CheckEsp
.text:00012FB9                 mov     esp, ebp
.text:00012FBB                 pop     ebp
.text:00012FBC                 retn    4
.text:00012FBC ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z endp
.text:00012FBC
.text:00012FBC ; ---------------------------------------------------------------------------
.text:00012FBF                 align 10h
.text:00012FBF _text           ends
.text:00012FBF
.text:00012FC0 ; ===========================================================================
.text:00012FC0
.text:00012FC0 ; Segment type: Pure code
.text:00012FC0 ; Segment permissions: Read/Execute
.text:00012FC0 _text           segment para public 'CODE' use32
.text:00012FC0                 assume cs:_text
.text:00012FC0                 ;org 12FC0h
.text:00012FC0 ; COMDAT (pick any)
.text:00012FC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012FC0
.text:00012FC0 ; =============== S U B R O U T I N E =======================================
.text:00012FC0
.text:00012FC0 ; Attributes: bp-based frame
.text:00012FC0
.text:00012FC0 ; public: struct IInArchive * __thiscall CMyComPtr<struct IInArchive>::operator=(class CMyComPtr<struct IInArchive> const &)
.text:00012FC0                 public ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z
.text:00012FC0 ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z proc near
.text:00012FC0                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+149Cp
.text:00012FC0                                         ; CArc::OpenStream2(COpenOptions const &)+253Ap ...
.text:00012FC0
.text:00012FC0 var_4           = dword ptr -4
.text:00012FC0 arg_0           = dword ptr  8
.text:00012FC0
.text:00012FC0                 push    ebp
.text:00012FC1                 mov     ebp, esp
.text:00012FC3                 push    ecx
.text:00012FC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012FCB                 mov     [ebp+var_4], ecx
.text:00012FCE                 mov     eax, [ebp+arg_0]
.text:00012FD1                 mov     ecx, [eax]
.text:00012FD3                 push    ecx
.text:00012FD4                 mov     ecx, [ebp+var_4]
.text:00012FD7                 call    ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z ; CMyComPtr<IInArchive>::operator=(IInArchive *)
.text:00012FDC                 add     esp, 4
.text:00012FDF                 cmp     ebp, esp
.text:00012FE1                 call    __RTC_CheckEsp
.text:00012FE6                 mov     esp, ebp
.text:00012FE8                 pop     ebp
.text:00012FE9                 retn    4
.text:00012FE9 ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z endp
.text:00012FE9
.text:00012FE9 _text           ends
.text:00012FE9
.text:00012FEC ; ===========================================================================
.text:00012FEC
.text:00012FEC ; Segment type: Pure code
.text:00012FEC ; Segment permissions: Read/Execute
.text:00012FEC _text           segment para public 'CODE' use32
.text:00012FEC                 assume cs:_text
.text:00012FEC                 ;org 12FECh
.text:00012FEC ; COMDAT (pick any)
.text:00012FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00012FEC
.text:00012FEC ; =============== S U B R O U T I N E =======================================
.text:00012FEC
.text:00012FEC ; Attributes: bp-based frame
.text:00012FEC
.text:00012FEC ; public: bool __thiscall CMyComPtr<struct IInArchive>::operator!(void)const
.text:00012FEC                 public ??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ
.text:00012FEC ??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ proc near
.text:00012FEC                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+6Cp
.text:00012FEC                                         ; CArc::OpenStream2(COpenOptions const &)+DAFp ...
.text:00012FEC
.text:00012FEC var_4           = dword ptr -4
.text:00012FEC
.text:00012FEC                 push    ebp
.text:00012FED                 mov     ebp, esp
.text:00012FEF                 push    ecx
.text:00012FF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00012FF7                 mov     [ebp+var_4], ecx
.text:00012FFA                 mov     eax, [ebp+var_4]
.text:00012FFD                 xor     ecx, ecx
.text:00012FFF                 cmp     dword ptr [eax], 0
.text:00013002                 setz    cl
.text:00013005                 mov     al, cl
.text:00013007                 mov     esp, ebp
.text:00013009                 pop     ebp
.text:0001300A                 retn
.text:0001300A ??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ endp
.text:0001300A
.text:0001300A ; ---------------------------------------------------------------------------
.text:0001300B                 align 4
.text:0001300B _text           ends
.text:0001300B
.text:0001300C ; ===========================================================================
.text:0001300C
.text:0001300C ; Segment type: Pure code
.text:0001300C ; Segment permissions: Read/Execute
.text:0001300C _text           segment para public 'CODE' use32
.text:0001300C                 assume cs:_text
.text:0001300C                 ;org 1300Ch
.text:0001300C ; COMDAT (pick any)
.text:0001300C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001300C
.text:0001300C ; =============== S U B R O U T I N E =======================================
.text:0001300C
.text:0001300C ; Attributes: bp-based frame
.text:0001300C
.text:0001300C ; public: __thiscall CMyComPtr<struct IArchiveGetRawProps>::CMyComPtr<struct IArchiveGetRawProps>(void)
.text:0001300C                 public ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ
.text:0001300C ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ proc near
.text:0001300C                                         ; CODE XREF: CArc::CArc(void)+51p
.text:0001300C
.text:0001300C var_4           = dword ptr -4
.text:0001300C
.text:0001300C                 push    ebp
.text:0001300D                 mov     ebp, esp
.text:0001300F                 push    ecx
.text:00013010                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013017                 mov     [ebp+var_4], ecx
.text:0001301A                 mov     eax, [ebp+var_4]
.text:0001301D                 mov     dword ptr [eax], 0
.text:00013023                 mov     eax, [ebp+var_4]
.text:00013026                 mov     esp, ebp
.text:00013028                 pop     ebp
.text:00013029                 retn
.text:00013029 ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ endp
.text:00013029
.text:00013029 ; ---------------------------------------------------------------------------
.text:0001302A                 align 4
.text:0001302A _text           ends
.text:0001302A
.text:0001302C ; ===========================================================================
.text:0001302C
.text:0001302C ; Segment type: Pure code
.text:0001302C ; Segment permissions: Read/Execute
.text:0001302C _text           segment para public 'CODE' use32
.text:0001302C                 assume cs:_text
.text:0001302C                 ;org 1302Ch
.text:0001302C ; COMDAT (pick any)
.text:0001302C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001302C
.text:0001302C ; =============== S U B R O U T I N E =======================================
.text:0001302C
.text:0001302C ; Attributes: bp-based frame
.text:0001302C
.text:0001302C ; public: __thiscall CMyComPtr<struct IArchiveGetRawProps>::~CMyComPtr<struct IArchiveGetRawProps>(void)
.text:0001302C                 public ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ
.text:0001302C ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ proc near
.text:0001302C                                         ; CODE XREF: __unwindfunclet$??0CArc@@QAE@XZ$2+6j
.text:0001302C                                         ; CArc::~CArc(void)+97p ...
.text:0001302C
.text:0001302C var_4           = dword ptr -4
.text:0001302C
.text:0001302C                 push    ebp
.text:0001302D                 mov     ebp, esp
.text:0001302F                 push    ecx
.text:00013030                 push    esi
.text:00013031                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013038                 mov     [ebp+var_4], ecx
.text:0001303B                 mov     eax, [ebp+var_4]
.text:0001303E                 cmp     dword ptr [eax], 0
.text:00013041                 jz      short loc_1305E
.text:00013043                 mov     ecx, [ebp+var_4]
.text:00013046                 mov     edx, [ecx]
.text:00013048                 mov     eax, [ebp+var_4]
.text:0001304B                 mov     ecx, [eax]
.text:0001304D                 mov     edx, [edx]
.text:0001304F                 mov     esi, esp
.text:00013051                 push    ecx
.text:00013052                 mov     eax, [edx+8]
.text:00013055                 call    eax
.text:00013057                 cmp     esi, esp
.text:00013059                 call    __RTC_CheckEsp
.text:0001305E
.text:0001305E loc_1305E:                              ; CODE XREF: CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>(void)+15j
.text:0001305E                 pop     esi
.text:0001305F                 add     esp, 4
.text:00013062                 cmp     ebp, esp
.text:00013064                 call    __RTC_CheckEsp
.text:00013069                 mov     esp, ebp
.text:0001306B                 pop     ebp
.text:0001306C                 retn
.text:0001306C ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ endp
.text:0001306C
.text:0001306C ; ---------------------------------------------------------------------------
.text:0001306D                 align 10h
.text:0001306D _text           ends
.text:0001306D
.text:00013070 ; ===========================================================================
.text:00013070
.text:00013070 ; Segment type: Pure code
.text:00013070 ; Segment permissions: Read/Execute
.text:00013070 _text           segment para public 'CODE' use32
.text:00013070                 assume cs:_text
.text:00013070                 ;org 13070h
.text:00013070 ; COMDAT (pick any)
.text:00013070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013070
.text:00013070 ; =============== S U B R O U T I N E =======================================
.text:00013070
.text:00013070 ; Attributes: bp-based frame
.text:00013070
.text:00013070 ; public: void __thiscall CMyComPtr<struct IArchiveGetRawProps>::Release(void)
.text:00013070                 public ?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ
.text:00013070 ?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ proc near
.text:00013070                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+52p
.text:00013070                                         ; CArc::OpenStream(COpenOptions const &)+74p
.text:00013070
.text:00013070 var_4           = dword ptr -4
.text:00013070
.text:00013070                 push    ebp
.text:00013071                 mov     ebp, esp
.text:00013073                 push    ecx
.text:00013074                 push    esi
.text:00013075                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001307C                 mov     [ebp+var_4], ecx
.text:0001307F                 mov     eax, [ebp+var_4]
.text:00013082                 cmp     dword ptr [eax], 0
.text:00013085                 jz      short loc_130AB
.text:00013087                 mov     ecx, [ebp+var_4]
.text:0001308A                 mov     edx, [ecx]
.text:0001308C                 mov     eax, [ebp+var_4]
.text:0001308F                 mov     ecx, [eax]
.text:00013091                 mov     edx, [edx]
.text:00013093                 mov     esi, esp
.text:00013095                 push    ecx
.text:00013096                 mov     eax, [edx+8]
.text:00013099                 call    eax
.text:0001309B                 cmp     esi, esp
.text:0001309D                 call    __RTC_CheckEsp
.text:000130A2                 mov     ecx, [ebp+var_4]
.text:000130A5                 mov     dword ptr [ecx], 0
.text:000130AB
.text:000130AB loc_130AB:                              ; CODE XREF: CMyComPtr<IArchiveGetRawProps>::Release(void)+15j
.text:000130AB                 pop     esi
.text:000130AC                 add     esp, 4
.text:000130AF                 cmp     ebp, esp
.text:000130B1                 call    __RTC_CheckEsp
.text:000130B6                 mov     esp, ebp
.text:000130B8                 pop     ebp
.text:000130B9                 retn
.text:000130B9 ?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ endp
.text:000130B9
.text:000130B9 ; ---------------------------------------------------------------------------
.text:000130BA                 align 4
.text:000130BA _text           ends
.text:000130BA
.text:000130BC ; ===========================================================================
.text:000130BC
.text:000130BC ; Segment type: Pure code
.text:000130BC ; Segment permissions: Read/Execute
.text:000130BC _text           segment para public 'CODE' use32
.text:000130BC                 assume cs:_text
.text:000130BC                 ;org 130BCh
.text:000130BC ; COMDAT (pick any)
.text:000130BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000130BC
.text:000130BC ; =============== S U B R O U T I N E =======================================
.text:000130BC
.text:000130BC ; Attributes: bp-based frame
.text:000130BC
.text:000130BC ; public: __thiscall CMyComPtr<struct IArchiveGetRawProps>::operator struct IArchiveGetRawProps *(void)const
.text:000130BC                 public ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
.text:000130BC ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ proc near
.text:000130BC                                         ; CODE XREF: CArc::GetItemPath(uint,UString &)+41p
.text:000130BC                                         ; CArc::GetItem(uint,CReadArcItem &)+143p
.text:000130BC
.text:000130BC var_4           = dword ptr -4
.text:000130BC
.text:000130BC                 push    ebp
.text:000130BD                 mov     ebp, esp
.text:000130BF                 push    ecx
.text:000130C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000130C7                 mov     [ebp+var_4], ecx
.text:000130CA                 mov     eax, [ebp+var_4]
.text:000130CD                 mov     eax, [eax]
.text:000130CF                 mov     esp, ebp
.text:000130D1                 pop     ebp
.text:000130D2                 retn
.text:000130D2 ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ endp
.text:000130D2
.text:000130D2 ; ---------------------------------------------------------------------------
.text:000130D3                 align 4
.text:000130D3 _text           ends
.text:000130D3
.text:000130D4 ; ===========================================================================
.text:000130D4
.text:000130D4 ; Segment type: Pure code
.text:000130D4 ; Segment permissions: Read/Execute
.text:000130D4 _text           segment para public 'CODE' use32
.text:000130D4                 assume cs:_text
.text:000130D4                 ;org 130D4h
.text:000130D4 ; COMDAT (pick any)
.text:000130D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000130D4
.text:000130D4 ; =============== S U B R O U T I N E =======================================
.text:000130D4
.text:000130D4 ; Attributes: bp-based frame
.text:000130D4
.text:000130D4 ; public: struct IArchiveGetRawProps * * __thiscall CMyComPtr<struct IArchiveGetRawProps>::operator&(void)
.text:000130D4                 public ??I?$CMyComPtr@UIArchiveGetRawProps@@@@QAEPAPAUIArchiveGetRawProps@@XZ
.text:000130D4 ??I?$CMyComPtr@UIArchiveGetRawProps@@@@QAEPAPAUIArchiveGetRawProps@@XZ proc near
.text:000130D4                                         ; CODE XREF: CArc::OpenStream(COpenOptions const &)+98p
.text:000130D4
.text:000130D4 var_4           = dword ptr -4
.text:000130D4
.text:000130D4                 push    ebp
.text:000130D5                 mov     ebp, esp
.text:000130D7                 push    ecx
.text:000130D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000130DF                 mov     [ebp+var_4], ecx
.text:000130E2                 mov     eax, [ebp+var_4]
.text:000130E5                 mov     esp, ebp
.text:000130E7                 pop     ebp
.text:000130E8                 retn
.text:000130E8 ??I?$CMyComPtr@UIArchiveGetRawProps@@@@QAEPAPAUIArchiveGetRawProps@@XZ endp
.text:000130E8
.text:000130E8 ; ---------------------------------------------------------------------------
.text:000130E9                 align 4
.text:000130E9 _text           ends
.text:000130E9
.text:000130EC ; ===========================================================================
.text:000130EC
.text:000130EC ; Segment type: Pure code
.text:000130EC ; Segment permissions: Read/Execute
.text:000130EC _text           segment para public 'CODE' use32
.text:000130EC                 assume cs:_text
.text:000130EC                 ;org 130ECh
.text:000130EC ; COMDAT (pick any)
.text:000130EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000130EC
.text:000130EC ; =============== S U B R O U T I N E =======================================
.text:000130EC
.text:000130EC ; Attributes: bp-based frame
.text:000130EC
.text:000130EC ; public: struct IArchiveGetRawProps * __thiscall CMyComPtr<struct IArchiveGetRawProps>::operator->(void)const
.text:000130EC                 public ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
.text:000130EC ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ proc near
.text:000130EC                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+8Bp
.text:000130EC                                         ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+209p ...
.text:000130EC
.text:000130EC var_4           = dword ptr -4
.text:000130EC
.text:000130EC                 push    ebp
.text:000130ED                 mov     ebp, esp
.text:000130EF                 push    ecx
.text:000130F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000130F7                 mov     [ebp+var_4], ecx
.text:000130FA                 mov     eax, [ebp+var_4]
.text:000130FD                 mov     eax, [eax]
.text:000130FF                 mov     esp, ebp
.text:00013101                 pop     ebp
.text:00013102                 retn
.text:00013102 ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ endp
.text:00013102
.text:00013102 ; ---------------------------------------------------------------------------
.text:00013103                 align 4
.text:00013103 _text           ends
.text:00013103
.text:00013104 ; ===========================================================================
.text:00013104
.text:00013104 ; Segment type: Pure code
.text:00013104 ; Segment permissions: Read/Execute
.text:00013104 _text           segment para public 'CODE' use32
.text:00013104                 assume cs:_text
.text:00013104                 ;org 13104h
.text:00013104 ; COMDAT (pick any)
.text:00013104                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013104
.text:00013104 ; =============== S U B R O U T I N E =======================================
.text:00013104
.text:00013104 ; Attributes: bp-based frame
.text:00013104
.text:00013104 ; public: bool __thiscall CMyComPtr<struct IArchiveGetRawProps>::operator!(void)const
.text:00013104                 public ??7?$CMyComPtr@UIArchiveGetRawProps@@@@QBE_NXZ
.text:00013104 ??7?$CMyComPtr@UIArchiveGetRawProps@@@@QBE_NXZ proc near
.text:00013104                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+47p
.text:00013104
.text:00013104 var_4           = dword ptr -4
.text:00013104
.text:00013104                 push    ebp
.text:00013105                 mov     ebp, esp
.text:00013107                 push    ecx
.text:00013108                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001310F                 mov     [ebp+var_4], ecx
.text:00013112                 mov     eax, [ebp+var_4]
.text:00013115                 xor     ecx, ecx
.text:00013117                 cmp     dword ptr [eax], 0
.text:0001311A                 setz    cl
.text:0001311D                 mov     al, cl
.text:0001311F                 mov     esp, ebp
.text:00013121                 pop     ebp
.text:00013122                 retn
.text:00013122 ??7?$CMyComPtr@UIArchiveGetRawProps@@@@QBE_NXZ endp
.text:00013122
.text:00013122 ; ---------------------------------------------------------------------------
.text:00013123                 align 4
.text:00013123 _text           ends
.text:00013123
.text:00013124 ; ===========================================================================
.text:00013124
.text:00013124 ; Segment type: Pure code
.text:00013124 ; Segment permissions: Read/Execute
.text:00013124 _text           segment para public 'CODE' use32
.text:00013124                 assume cs:_text
.text:00013124                 ;org 13124h
.text:00013124 ; COMDAT (pick any)
.text:00013124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013124
.text:00013124 ; =============== S U B R O U T I N E =======================================
.text:00013124
.text:00013124 ; Attributes: bp-based frame
.text:00013124
.text:00013124 ; public: __thiscall CMyComPtr<struct IArchiveGetRootProps>::CMyComPtr<struct IArchiveGetRootProps>(void)
.text:00013124                 public ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ
.text:00013124 ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ proc near
.text:00013124                                         ; CODE XREF: CArc::CArc(void)+60p
.text:00013124
.text:00013124 var_4           = dword ptr -4
.text:00013124
.text:00013124                 push    ebp
.text:00013125                 mov     ebp, esp
.text:00013127                 push    ecx
.text:00013128                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001312F                 mov     [ebp+var_4], ecx
.text:00013132                 mov     eax, [ebp+var_4]
.text:00013135                 mov     dword ptr [eax], 0
.text:0001313B                 mov     eax, [ebp+var_4]
.text:0001313E                 mov     esp, ebp
.text:00013140                 pop     ebp
.text:00013141                 retn
.text:00013141 ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ endp
.text:00013141
.text:00013141 ; ---------------------------------------------------------------------------
.text:00013142                 align 4
.text:00013142 _text           ends
.text:00013142
.text:00013144 ; ===========================================================================
.text:00013144
.text:00013144 ; Segment type: Pure code
.text:00013144 ; Segment permissions: Read/Execute
.text:00013144 _text           segment para public 'CODE' use32
.text:00013144                 assume cs:_text
.text:00013144                 ;org 13144h
.text:00013144 ; COMDAT (pick any)
.text:00013144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013144
.text:00013144 ; =============== S U B R O U T I N E =======================================
.text:00013144
.text:00013144 ; Attributes: bp-based frame
.text:00013144
.text:00013144 ; public: __thiscall CMyComPtr<struct IArchiveGetRootProps>::~CMyComPtr<struct IArchiveGetRootProps>(void)
.text:00013144                 public ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ
.text:00013144 ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ proc near
.text:00013144                                         ; CODE XREF: __unwindfunclet$??0CArc@@QAE@XZ$3+6j
.text:00013144                                         ; CArc::~CArc(void)+88p ...
.text:00013144
.text:00013144 var_4           = dword ptr -4
.text:00013144
.text:00013144                 push    ebp
.text:00013145                 mov     ebp, esp
.text:00013147                 push    ecx
.text:00013148                 push    esi
.text:00013149                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013150                 mov     [ebp+var_4], ecx
.text:00013153                 mov     eax, [ebp+var_4]
.text:00013156                 cmp     dword ptr [eax], 0
.text:00013159                 jz      short loc_13176
.text:0001315B                 mov     ecx, [ebp+var_4]
.text:0001315E                 mov     edx, [ecx]
.text:00013160                 mov     eax, [ebp+var_4]
.text:00013163                 mov     ecx, [eax]
.text:00013165                 mov     edx, [edx]
.text:00013167                 mov     esi, esp
.text:00013169                 push    ecx
.text:0001316A                 mov     eax, [edx+8]
.text:0001316D                 call    eax
.text:0001316F                 cmp     esi, esp
.text:00013171                 call    __RTC_CheckEsp
.text:00013176
.text:00013176 loc_13176:                              ; CODE XREF: CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>(void)+15j
.text:00013176                 pop     esi
.text:00013177                 add     esp, 4
.text:0001317A                 cmp     ebp, esp
.text:0001317C                 call    __RTC_CheckEsp
.text:00013181                 mov     esp, ebp
.text:00013183                 pop     ebp
.text:00013184                 retn
.text:00013184 ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ endp
.text:00013184
.text:00013184 ; ---------------------------------------------------------------------------
.text:00013185                 align 4
.text:00013185 _text           ends
.text:00013185
.text:00013188 ; ===========================================================================
.text:00013188
.text:00013188 ; Segment type: Pure code
.text:00013188 ; Segment permissions: Read/Execute
.text:00013188 _text           segment para public 'CODE' use32
.text:00013188                 assume cs:_text
.text:00013188                 ;org 13188h
.text:00013188 ; COMDAT (pick any)
.text:00013188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013188
.text:00013188 ; =============== S U B R O U T I N E =======================================
.text:00013188
.text:00013188 ; Attributes: bp-based frame
.text:00013188
.text:00013188 ; public: void __thiscall CMyComPtr<struct IArchiveGetRootProps>::Release(void)
.text:00013188                 public ?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ
.text:00013188 ?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ proc near
.text:00013188                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+5Dp
.text:00013188                                         ; CArc::OpenStream(COpenOptions const &)+7Fp
.text:00013188
.text:00013188 var_4           = dword ptr -4
.text:00013188
.text:00013188                 push    ebp
.text:00013189                 mov     ebp, esp
.text:0001318B                 push    ecx
.text:0001318C                 push    esi
.text:0001318D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013194                 mov     [ebp+var_4], ecx
.text:00013197                 mov     eax, [ebp+var_4]
.text:0001319A                 cmp     dword ptr [eax], 0
.text:0001319D                 jz      short loc_131C3
.text:0001319F                 mov     ecx, [ebp+var_4]
.text:000131A2                 mov     edx, [ecx]
.text:000131A4                 mov     eax, [ebp+var_4]
.text:000131A7                 mov     ecx, [eax]
.text:000131A9                 mov     edx, [edx]
.text:000131AB                 mov     esi, esp
.text:000131AD                 push    ecx
.text:000131AE                 mov     eax, [edx+8]
.text:000131B1                 call    eax
.text:000131B3                 cmp     esi, esp
.text:000131B5                 call    __RTC_CheckEsp
.text:000131BA                 mov     ecx, [ebp+var_4]
.text:000131BD                 mov     dword ptr [ecx], 0
.text:000131C3
.text:000131C3 loc_131C3:                              ; CODE XREF: CMyComPtr<IArchiveGetRootProps>::Release(void)+15j
.text:000131C3                 pop     esi
.text:000131C4                 add     esp, 4
.text:000131C7                 cmp     ebp, esp
.text:000131C9                 call    __RTC_CheckEsp
.text:000131CE                 mov     esp, ebp
.text:000131D0                 pop     ebp
.text:000131D1                 retn
.text:000131D1 ?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ endp
.text:000131D1
.text:000131D1 ; ---------------------------------------------------------------------------
.text:000131D2                 align 4
.text:000131D2 _text           ends
.text:000131D2
.text:000131D4 ; ===========================================================================
.text:000131D4
.text:000131D4 ; Segment type: Pure code
.text:000131D4 ; Segment permissions: Read/Execute
.text:000131D4 _text           segment para public 'CODE' use32
.text:000131D4                 assume cs:_text
.text:000131D4                 ;org 131D4h
.text:000131D4 ; COMDAT (pick any)
.text:000131D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000131D4
.text:000131D4 ; =============== S U B R O U T I N E =======================================
.text:000131D4
.text:000131D4 ; Attributes: bp-based frame
.text:000131D4
.text:000131D4 ; public: struct IArchiveGetRootProps * * __thiscall CMyComPtr<struct IArchiveGetRootProps>::operator&(void)
.text:000131D4                 public ??I?$CMyComPtr@UIArchiveGetRootProps@@@@QAEPAPAUIArchiveGetRootProps@@XZ
.text:000131D4 ??I?$CMyComPtr@UIArchiveGetRootProps@@@@QAEPAPAUIArchiveGetRootProps@@XZ proc near
.text:000131D4                                         ; CODE XREF: CArc::OpenStream(COpenOptions const &)+D3p
.text:000131D4
.text:000131D4 var_4           = dword ptr -4
.text:000131D4
.text:000131D4                 push    ebp
.text:000131D5                 mov     ebp, esp
.text:000131D7                 push    ecx
.text:000131D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000131DF                 mov     [ebp+var_4], ecx
.text:000131E2                 mov     eax, [ebp+var_4]
.text:000131E5                 mov     esp, ebp
.text:000131E7                 pop     ebp
.text:000131E8                 retn
.text:000131E8 ??I?$CMyComPtr@UIArchiveGetRootProps@@@@QAEPAPAUIArchiveGetRootProps@@XZ endp
.text:000131E8
.text:000131E8 ; ---------------------------------------------------------------------------
.text:000131E9                 align 4
.text:000131E9 _text           ends
.text:000131E9
.text:000131EC ; ===========================================================================
.text:000131EC
.text:000131EC ; Segment type: Pure code
.text:000131EC ; Segment permissions: Read/Execute
.text:000131EC _text           segment para public 'CODE' use32
.text:000131EC                 assume cs:_text
.text:000131EC                 ;org 131ECh
.text:000131EC ; COMDAT (pick any)
.text:000131EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000131EC
.text:000131EC ; =============== S U B R O U T I N E =======================================
.text:000131EC
.text:000131EC ; Attributes: bp-based frame
.text:000131EC
.text:000131EC ; public: unsigned int __thiscall CObjectVector<class CArc>::Size(void)const
.text:000131EC                 public ?Size@?$CObjectVector@VCArc@@@@QBEIXZ
.text:000131EC ?Size@?$CObjectVector@VCArc@@@@QBEIXZ proc near
.text:000131EC                                         ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+46p
.text:000131EC                                         ; CArchiveLink::Close(void)+21p ...
.text:000131EC
.text:000131EC var_4           = dword ptr -4
.text:000131EC
.text:000131EC                 push    ebp
.text:000131ED                 mov     ebp, esp
.text:000131EF                 push    ecx
.text:000131F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000131F7                 mov     [ebp+var_4], ecx
.text:000131FA                 mov     ecx, [ebp+var_4]
.text:000131FD                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00013202                 add     esp, 4
.text:00013205                 cmp     ebp, esp
.text:00013207                 call    __RTC_CheckEsp
.text:0001320C                 mov     esp, ebp
.text:0001320E                 pop     ebp
.text:0001320F                 retn
.text:0001320F ?Size@?$CObjectVector@VCArc@@@@QBEIXZ endp
.text:0001320F
.text:0001320F _text           ends
.text:0001320F
.text:00013210 ; ===========================================================================
.text:00013210
.text:00013210 ; Segment type: Pure code
.text:00013210 ; Segment permissions: Read/Execute
.text:00013210 _text           segment para public 'CODE' use32
.text:00013210                 assume cs:_text
.text:00013210                 ;org 13210h
.text:00013210 ; COMDAT (pick any)
.text:00013210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013210
.text:00013210 ; =============== S U B R O U T I N E =======================================
.text:00013210
.text:00013210 ; Attributes: bp-based frame
.text:00013210
.text:00013210 ; public: bool __thiscall CObjectVector<class CArc>::IsEmpty(void)const
.text:00013210                 public ?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ
.text:00013210 ?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ proc near
.text:00013210                                         ; CODE XREF: CArchiveLink::Release(void)+27p
.text:00013210                                         ; CArchiveLink::Open(COpenOptions &)+13Ap ...
.text:00013210
.text:00013210 var_4           = dword ptr -4
.text:00013210
.text:00013210                 push    ebp
.text:00013211                 mov     ebp, esp
.text:00013213                 push    ecx
.text:00013214                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001321B                 mov     [ebp+var_4], ecx
.text:0001321E                 mov     ecx, [ebp+var_4]
.text:00013221                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00013226                 add     esp, 4
.text:00013229                 cmp     ebp, esp
.text:0001322B                 call    __RTC_CheckEsp
.text:00013230                 mov     esp, ebp
.text:00013232                 pop     ebp
.text:00013233                 retn
.text:00013233 ?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ endp
.text:00013233
.text:00013233 _text           ends
.text:00013233
.text:00013234 ; ===========================================================================
.text:00013234
.text:00013234 ; Segment type: Pure code
.text:00013234 ; Segment permissions: Read/Execute
.text:00013234 _text           segment para public 'CODE' use32
.text:00013234                 assume cs:_text
.text:00013234                 ;org 13234h
.text:00013234 ; COMDAT (pick any)
.text:00013234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013234
.text:00013234 ; =============== S U B R O U T I N E =======================================
.text:00013234
.text:00013234 ; Attributes: bp-based frame
.text:00013234
.text:00013234 ; public: class CArc & __thiscall CObjectVector<class CArc>::operator[](unsigned int)
.text:00013234                 public ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z
.text:00013234 ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z proc near
.text:00013234                                         ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+77p
.text:00013234                                         ; CArchiveLink::Close(void)+3Fp ...
.text:00013234
.text:00013234 var_4           = dword ptr -4
.text:00013234 arg_0           = dword ptr  8
.text:00013234
.text:00013234                 push    ebp
.text:00013235                 mov     ebp, esp
.text:00013237                 push    ecx
.text:00013238                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001323F                 mov     [ebp+var_4], ecx
.text:00013242                 mov     eax, [ebp+arg_0]
.text:00013245                 push    eax
.text:00013246                 mov     ecx, [ebp+var_4]
.text:00013249                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0001324E                 mov     eax, [eax]
.text:00013250                 add     esp, 4
.text:00013253                 cmp     ebp, esp
.text:00013255                 call    __RTC_CheckEsp
.text:0001325A                 mov     esp, ebp
.text:0001325C                 pop     ebp
.text:0001325D                 retn    4
.text:0001325D ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z endp
.text:0001325D
.text:0001325D _text           ends
.text:0001325D
.text:00013260 ; ===========================================================================
.text:00013260
.text:00013260 ; Segment type: Pure code
.text:00013260 ; Segment permissions: Read/Execute
.text:00013260 _text           segment para public 'CODE' use32
.text:00013260                 assume cs:_text
.text:00013260                 ;org 13260h
.text:00013260 ; COMDAT (pick any)
.text:00013260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013260
.text:00013260 ; =============== S U B R O U T I N E =======================================
.text:00013260
.text:00013260 ; Attributes: bp-based frame
.text:00013260
.text:00013260 ; public: class CArc & __thiscall CObjectVector<class CArc>::Back(void)
.text:00013260                 public ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ
.text:00013260 ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ proc near
.text:00013260                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+227p
.text:00013260
.text:00013260 var_4           = dword ptr -4
.text:00013260
.text:00013260                 push    ebp
.text:00013261                 mov     ebp, esp
.text:00013263                 push    ecx
.text:00013264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001326B                 mov     [ebp+var_4], ecx
.text:0001326E                 mov     ecx, [ebp+var_4]
.text:00013271                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00013276                 sub     eax, 1
.text:00013279                 push    eax
.text:0001327A                 mov     ecx, [ebp+var_4]
.text:0001327D                 call    ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:00013282                 add     esp, 4
.text:00013285                 cmp     ebp, esp
.text:00013287                 call    __RTC_CheckEsp
.text:0001328C                 mov     esp, ebp
.text:0001328E                 pop     ebp
.text:0001328F                 retn
.text:0001328F ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ endp
.text:0001328F
.text:0001328F _text           ends
.text:0001328F
.text:00013290 ; ===========================================================================
.text:00013290
.text:00013290 ; Segment type: Pure code
.text:00013290 ; Segment permissions: Read/Execute
.text:00013290 _text           segment para public 'CODE' use32
.text:00013290                 assume cs:_text
.text:00013290                 ;org 13290h
.text:00013290 ; COMDAT (pick any)
.text:00013290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013290
.text:00013290 ; =============== S U B R O U T I N E =======================================
.text:00013290
.text:00013290 ; Attributes: bp-based frame
.text:00013290
.text:00013290 ; public: unsigned int __thiscall CObjectVector<class CArc>::Add(class CArc const &)
.text:00013290                 public ?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z
.text:00013290 ?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z proc near
.text:00013290                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+208p
.text:00013290                                         ; CArchiveLink::Open(COpenOptions &)+97Ep
.text:00013290
.text:00013290 var_1C          = dword ptr -1Ch
.text:00013290 var_18          = dword ptr -18h
.text:00013290 var_14          = dword ptr -14h
.text:00013290 var_10          = dword ptr -10h
.text:00013290 var_C           = dword ptr -0Ch
.text:00013290 var_4           = dword ptr -4
.text:00013290 arg_0           = dword ptr  8
.text:00013290
.text:00013290                 push    ebp
.text:00013291                 mov     ebp, esp
.text:00013293                 push    0FFFFFFFFh
.text:00013295                 push    offset __ehhandler$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z
.text:0001329A                 mov     eax, large fs:0
.text:000132A0                 push    eax
.text:000132A1                 sub     esp, 10h
.text:000132A4                 mov     eax, 0CCCCCCCCh
.text:000132A9                 mov     [ebp+var_1C], eax
.text:000132AC                 mov     [ebp+var_18], eax
.text:000132AF                 mov     [ebp+var_14], eax
.text:000132B2                 mov     [ebp+var_10], eax
.text:000132B5                 mov     eax, dword ptr ds:___security_cookie
.text:000132BA                 xor     eax, ebp
.text:000132BC                 push    eax
.text:000132BD                 lea     eax, [ebp+var_C]
.text:000132C0                 mov     large fs:0, eax
.text:000132C6                 mov     [ebp+var_10], ecx
.text:000132C9                 push    0E0h ; 'a'      ; unsigned int
.text:000132CE                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000132D3                 add     esp, 4
.text:000132D6                 mov     [ebp+var_18], eax
.text:000132D9                 mov     [ebp+var_4], 0
.text:000132E0                 cmp     [ebp+var_18], 0
.text:000132E4                 jz      short loc_132F7
.text:000132E6                 mov     eax, [ebp+arg_0]
.text:000132E9                 push    eax
.text:000132EA                 mov     ecx, [ebp+var_18]
.text:000132ED                 call    ??0CArc@@QAE@ABV0@@Z ; CArc::CArc(CArc const &)
.text:000132F2                 mov     [ebp+var_1C], eax
.text:000132F5                 jmp     short loc_132FE
.text:000132F7 ; ---------------------------------------------------------------------------
.text:000132F7
.text:000132F7 loc_132F7:                              ; CODE XREF: CObjectVector<CArc>::Add(CArc const &)+54j
.text:000132F7                 mov     [ebp+var_1C], 0
.text:000132FE
.text:000132FE loc_132FE:                              ; CODE XREF: CObjectVector<CArc>::Add(CArc const &)+65j
.text:000132FE                 mov     ecx, [ebp+var_1C]
.text:00013301                 mov     [ebp+var_14], ecx
.text:00013304                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0001330B                 mov     edx, [ebp+var_14]
.text:0001330E                 push    edx
.text:0001330F                 mov     ecx, [ebp+var_10]
.text:00013312                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00013317                 mov     ecx, [ebp+var_C]
.text:0001331A                 mov     large fs:0, ecx
.text:00013321                 pop     ecx
.text:00013322                 add     esp, 1Ch
.text:00013325                 cmp     ebp, esp
.text:00013327                 call    __RTC_CheckEsp
.text:0001332C                 mov     esp, ebp
.text:0001332E                 pop     ebp
.text:0001332F                 retn    4
.text:0001332F ?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z endp
.text:0001332F
.text:0001332F ; ---------------------------------------------------------------------------
.text:00013332                 align 4
.text:00013332 _text           ends
.text:00013332
.text$x:00013334 ; ===========================================================================
.text$x:00013334
.text$x:00013334 ; Segment type: Pure code
.text$x:00013334 ; Segment permissions: Read/Execute
.text$x:00013334 _text$x         segment para public 'CODE' use32
.text$x:00013334                 assume cs:_text$x
.text$x:00013334                 ;org 13334h
.text$x:00013334 ; COMDAT (pick associative to section at 13290)
.text$x:00013334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00013334
.text$x:00013334 ; =============== S U B R O U T I N E =======================================
.text$x:00013334
.text$x:00013334
.text$x:00013334 __unwindfunclet$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z$0 proc near
.text$x:00013334                                         ; DATA XREF: .xdata$x:00013360o
.text$x:00013334                 mov     eax, [ebp-18h]
.text$x:00013337                 push    eax             ; void *
.text$x:00013338                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0001333D                 pop     ecx
.text$x:0001333E                 retn
.text$x:0001333E __unwindfunclet$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z$0 endp
.text$x:0001333E
.text$x:0001333F
.text$x:0001333F ; =============== S U B R O U T I N E =======================================
.text$x:0001333F
.text$x:0001333F
.text$x:0001333F __ehhandler$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z proc near
.text$x:0001333F                                         ; DATA XREF: CObjectVector<CArc>::Add(CArc const &)+5o
.text$x:0001333F
.text$x:0001333F arg_4           = dword ptr  8
.text$x:0001333F
.text$x:0001333F                 mov     edx, [esp+arg_4]
.text$x:00013343                 lea     eax, [edx+0Ch]
.text$x:00013346                 mov     ecx, [edx-14h]
.text$x:00013349                 xor     ecx, eax
.text$x:0001334B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00013350                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z
.text$x:00013355                 jmp     ___CxxFrameHandler3
.text$x:00013355 __ehhandler$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z endp
.text$x:00013355
.text$x:00013355 ; ---------------------------------------------------------------------------
.text$x:0001335A                 align 4
.text$x:0001335A _text$x         ends
.text$x:0001335A
.xdata$x:0001335C ; ===========================================================================
.xdata$x:0001335C
.xdata$x:0001335C ; Segment type: Pure data
.xdata$x:0001335C ; Segment permissions: Read
.xdata$x:0001335C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001335C                 assume cs:_xdata$x
.xdata$x:0001335C                 ;org 1335Ch
.xdata$x:0001335C ; COMDAT (pick associative to section at 13290)
.xdata$x:0001335C __unwindtable$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z db 0FFh
.xdata$x:0001335C                                         ; DATA XREF: .xdata$x:0001336Co
.xdata$x:0001335D                 db 0FFh
.xdata$x:0001335E                 db 0FFh
.xdata$x:0001335F                 db 0FFh
.xdata$x:00013360                 dd offset __unwindfunclet$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z$0
.xdata$x:00013364 __ehfuncinfo$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z db  22h ; "
.xdata$x:00013364                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z+11o
.xdata$x:00013365                 db    5
.xdata$x:00013366                 db  93h ; ô
.xdata$x:00013367                 db  19h
.xdata$x:00013368                 db    1
.xdata$x:00013369                 db    0
.xdata$x:0001336A                 db    0
.xdata$x:0001336B                 db    0
.xdata$x:0001336C                 dd offset __unwindtable$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z
.xdata$x:00013370                 db    0
.xdata$x:00013371                 db    0
.xdata$x:00013372                 db    0
.xdata$x:00013373                 db    0
.xdata$x:00013374                 db    0
.xdata$x:00013375                 db    0
.xdata$x:00013376                 db    0
.xdata$x:00013377                 db    0
.xdata$x:00013378                 db    0
.xdata$x:00013379                 db    0
.xdata$x:0001337A                 db    0
.xdata$x:0001337B                 db    0
.xdata$x:0001337C                 db    0
.xdata$x:0001337D                 db    0
.xdata$x:0001337E                 db    0
.xdata$x:0001337F                 db    0
.xdata$x:00013380                 db    0
.xdata$x:00013381                 db    0
.xdata$x:00013382                 db    0
.xdata$x:00013383                 db    0
.xdata$x:00013384                 db    1
.xdata$x:00013385                 db    0
.xdata$x:00013386                 db    0
.xdata$x:00013387                 db    0
.xdata$x:00013387 _xdata$x        ends
.xdata$x:00013387
.text:00013388 ; ===========================================================================
.text:00013388
.text:00013388 ; Segment type: Pure code
.text:00013388 ; Segment permissions: Read/Execute
.text:00013388 _text           segment para public 'CODE' use32
.text:00013388                 assume cs:_text
.text:00013388                 ;org 13388h
.text:00013388 ; COMDAT (pick any)
.text:00013388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013388
.text:00013388 ; =============== S U B R O U T I N E =======================================
.text:00013388
.text:00013388 ; Attributes: bp-based frame
.text:00013388
.text:00013388 ; public: void __thiscall CObjectVector<class CArc>::DeleteBack(void)
.text:00013388                 public ?DeleteBack@?$CObjectVector@VCArc@@@@QAEXXZ
.text:00013388 ?DeleteBack@?$CObjectVector@VCArc@@@@QAEXXZ proc near
.text:00013388                                         ; CODE XREF: CArchiveLink::Release(void)+36p
.text:00013388
.text:00013388 var_10          = dword ptr -10h
.text:00013388 var_C           = dword ptr -0Ch
.text:00013388 var_8           = dword ptr -8
.text:00013388 var_4           = dword ptr -4
.text:00013388
.text:00013388                 push    ebp
.text:00013389                 mov     ebp, esp
.text:0001338B                 sub     esp, 10h
.text:0001338E                 mov     eax, 0CCCCCCCCh
.text:00013393                 mov     [ebp+var_10], eax
.text:00013396                 mov     [ebp+var_C], eax
.text:00013399                 mov     [ebp+var_8], eax
.text:0001339C                 mov     [ebp+var_4], eax
.text:0001339F                 mov     [ebp+var_4], ecx
.text:000133A2                 mov     ecx, [ebp+var_4]
.text:000133A5                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000133AA                 sub     eax, 1
.text:000133AD                 push    eax
.text:000133AE                 mov     ecx, [ebp+var_4]
.text:000133B1                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000133B6                 mov     eax, [eax]
.text:000133B8                 mov     [ebp+var_C], eax
.text:000133BB                 mov     ecx, [ebp+var_C]
.text:000133BE                 mov     [ebp+var_8], ecx
.text:000133C1                 cmp     [ebp+var_8], 0
.text:000133C5                 jz      short loc_133D6
.text:000133C7                 push    1
.text:000133C9                 mov     ecx, [ebp+var_8]
.text:000133CC                 call    ??_GCArc@@QAEPAXI@Z ; CArc::`scalar deleting destructor'(uint)
.text:000133D1                 mov     [ebp+var_10], eax
.text:000133D4                 jmp     short loc_133DD
.text:000133D6 ; ---------------------------------------------------------------------------
.text:000133D6
.text:000133D6 loc_133D6:                              ; CODE XREF: CObjectVector<CArc>::DeleteBack(void)+3Dj
.text:000133D6                 mov     [ebp+var_10], 0
.text:000133DD
.text:000133DD loc_133DD:                              ; CODE XREF: CObjectVector<CArc>::DeleteBack(void)+4Cj
.text:000133DD                 mov     ecx, [ebp+var_4]
.text:000133E0                 call    ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::DeleteBack(void)
.text:000133E5                 add     esp, 10h
.text:000133E8                 cmp     ebp, esp
.text:000133EA                 call    __RTC_CheckEsp
.text:000133EF                 mov     esp, ebp
.text:000133F1                 pop     ebp
.text:000133F2                 retn
.text:000133F2 ?DeleteBack@?$CObjectVector@VCArc@@@@QAEXXZ endp
.text:000133F2
.text:000133F2 ; ---------------------------------------------------------------------------
.text:000133F3                 align 4
.text:000133F3 _text           ends
.text:000133F3
.text:000133F4 ; ===========================================================================
.text:000133F4
.text:000133F4 ; Segment type: Pure code
.text:000133F4 ; Segment permissions: Read/Execute
.text:000133F4 _text           segment para public 'CODE' use32
.text:000133F4                 assume cs:_text
.text:000133F4                 ;org 133F4h
.text:000133F4 ; COMDAT (pick any)
.text:000133F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000133F4
.text:000133F4 ; =============== S U B R O U T I N E =======================================
.text:000133F4
.text:000133F4 ; Attributes: bp-based frame
.text:000133F4
.text:000133F4 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NParser::CParseItem>::Size(void)const
.text:000133F4                 public ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ
.text:000133F4 ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ proc near
.text:000133F4                                         ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+28p
.text:000133F4                                         ; NArchive::NParser::CHandler::GetNumberOfItems(uint *)+9p ...
.text:000133F4
.text:000133F4 var_4           = dword ptr -4
.text:000133F4
.text:000133F4                 push    ebp
.text:000133F5                 mov     ebp, esp
.text:000133F7                 push    ecx
.text:000133F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000133FF                 mov     [ebp+var_4], ecx
.text:00013402                 mov     ecx, [ebp+var_4]
.text:00013405                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0001340A                 add     esp, 4
.text:0001340D                 cmp     ebp, esp
.text:0001340F                 call    __RTC_CheckEsp
.text:00013414                 mov     esp, ebp
.text:00013416                 pop     ebp
.text:00013417                 retn
.text:00013417 ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ endp
.text:00013417
.text:00013417 _text           ends
.text:00013417
.text:00013418 ; ===========================================================================
.text:00013418
.text:00013418 ; Segment type: Pure code
.text:00013418 ; Segment permissions: Read/Execute
.text:00013418 _text           segment para public 'CODE' use32
.text:00013418                 assume cs:_text
.text:00013418                 ;org 13418h
.text:00013418 ; COMDAT (pick any)
.text:00013418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013418
.text:00013418 ; =============== S U B R O U T I N E =======================================
.text:00013418
.text:00013418 ; Attributes: bp-based frame
.text:00013418
.text:00013418 ; public: bool __thiscall CObjectVector<struct NArchive::NParser::CParseItem>::IsEmpty(void)const
.text:00013418                 public ?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ
.text:00013418 ?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ proc near
.text:00013418                                         ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+109p
.text:00013418                                         ; CArc::OpenStream2(COpenOptions const &)+4BB2p ...
.text:00013418
.text:00013418 var_4           = dword ptr -4
.text:00013418
.text:00013418                 push    ebp
.text:00013419                 mov     ebp, esp
.text:0001341B                 push    ecx
.text:0001341C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013423                 mov     [ebp+var_4], ecx
.text:00013426                 mov     ecx, [ebp+var_4]
.text:00013429                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:0001342E                 add     esp, 4
.text:00013431                 cmp     ebp, esp
.text:00013433                 call    __RTC_CheckEsp
.text:00013438                 mov     esp, ebp
.text:0001343A                 pop     ebp
.text:0001343B                 retn
.text:0001343B ?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ endp
.text:0001343B
.text:0001343B _text           ends
.text:0001343B
.text:0001343C ; ===========================================================================
.text:0001343C
.text:0001343C ; Segment type: Pure code
.text:0001343C ; Segment permissions: Read/Execute
.text:0001343C _text           segment para public 'CODE' use32
.text:0001343C                 assume cs:_text
.text:0001343C                 ;org 1343Ch
.text:0001343C ; COMDAT (pick any)
.text:0001343C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001343C
.text:0001343C ; =============== S U B R O U T I N E =======================================
.text:0001343C
.text:0001343C ; Attributes: bp-based frame
.text:0001343C
.text:0001343C ; public: __thiscall CObjectVector<struct NArchive::NParser::CParseItem>::CObjectVector<struct NArchive::NParser::CParseItem>(void)
.text:0001343C                 public ??0?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
.text:0001343C ??0?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ proc near
.text:0001343C                                         ; CODE XREF: NArchive::NParser::CHandler::CHandler(void)+64p
.text:0001343C
.text:0001343C var_4           = dword ptr -4
.text:0001343C
.text:0001343C                 push    ebp
.text:0001343D                 mov     ebp, esp
.text:0001343F                 push    ecx
.text:00013440                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013447                 mov     [ebp+var_4], ecx
.text:0001344A                 mov     ecx, [ebp+var_4]
.text:0001344D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00013452                 mov     eax, [ebp+var_4]
.text:00013455                 add     esp, 4
.text:00013458                 cmp     ebp, esp
.text:0001345A                 call    __RTC_CheckEsp
.text:0001345F                 mov     esp, ebp
.text:00013461                 pop     ebp
.text:00013462                 retn
.text:00013462 ??0?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ endp
.text:00013462
.text:00013462 ; ---------------------------------------------------------------------------
.text:00013463                 align 4
.text:00013463 _text           ends
.text:00013463
.text:00013464 ; ===========================================================================
.text:00013464
.text:00013464 ; Segment type: Pure code
.text:00013464 ; Segment permissions: Read/Execute
.text:00013464 _text           segment para public 'CODE' use32
.text:00013464                 assume cs:_text
.text:00013464                 ;org 13464h
.text:00013464 ; COMDAT (pick any)
.text:00013464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013464
.text:00013464 ; =============== S U B R O U T I N E =======================================
.text:00013464
.text:00013464 ; Attributes: bp-based frame
.text:00013464
.text:00013464 ; public: struct NArchive::NParser::CParseItem const & __thiscall CObjectVector<struct NArchive::NParser::CParseItem>::operator[](unsigned int)const
.text:00013464                 public ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEABUCParseItem@NParser@NArchive@@I@Z
.text:00013464 ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEABUCParseItem@NParser@NArchive@@I@Z proc near
.text:00013464                                         ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+51p
.text:00013464
.text:00013464 var_4           = dword ptr -4
.text:00013464 arg_0           = dword ptr  8
.text:00013464
.text:00013464                 push    ebp
.text:00013465                 mov     ebp, esp
.text:00013467                 push    ecx
.text:00013468                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001346F                 mov     [ebp+var_4], ecx
.text:00013472                 mov     eax, [ebp+arg_0]
.text:00013475                 push    eax
.text:00013476                 mov     ecx, [ebp+var_4]
.text:00013479                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0001347E                 mov     eax, [eax]
.text:00013480                 add     esp, 4
.text:00013483                 cmp     ebp, esp
.text:00013485                 call    __RTC_CheckEsp
.text:0001348A                 mov     esp, ebp
.text:0001348C                 pop     ebp
.text:0001348D                 retn    4
.text:0001348D ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEABUCParseItem@NParser@NArchive@@I@Z endp
.text:0001348D
.text:0001348D _text           ends
.text:0001348D
.text:00013490 ; ===========================================================================
.text:00013490
.text:00013490 ; Segment type: Pure code
.text:00013490 ; Segment permissions: Read/Execute
.text:00013490 _text           segment para public 'CODE' use32
.text:00013490                 assume cs:_text
.text:00013490                 ;org 13490h
.text:00013490 ; COMDAT (pick any)
.text:00013490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013490
.text:00013490 ; =============== S U B R O U T I N E =======================================
.text:00013490
.text:00013490 ; Attributes: bp-based frame
.text:00013490
.text:00013490 ; public: struct NArchive::NParser::CParseItem & __thiscall CObjectVector<struct NArchive::NParser::CParseItem>::operator[](unsigned int)
.text:00013490                 public ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z
.text:00013490 ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z proc near
.text:00013490                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+67p
.text:00013490                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F4p ...
.text:00013490
.text:00013490 var_4           = dword ptr -4
.text:00013490 arg_0           = dword ptr  8
.text:00013490
.text:00013490                 push    ebp
.text:00013491                 mov     ebp, esp
.text:00013493                 push    ecx
.text:00013494                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001349B                 mov     [ebp+var_4], ecx
.text:0001349E                 mov     eax, [ebp+arg_0]
.text:000134A1                 push    eax
.text:000134A2                 mov     ecx, [ebp+var_4]
.text:000134A5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000134AA                 mov     eax, [eax]
.text:000134AC                 add     esp, 4
.text:000134AF                 cmp     ebp, esp
.text:000134B1                 call    __RTC_CheckEsp
.text:000134B6                 mov     esp, ebp
.text:000134B8                 pop     ebp
.text:000134B9                 retn    4
.text:000134B9 ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z endp
.text:000134B9
.text:000134B9 _text           ends
.text:000134B9
.text:000134BC ; ===========================================================================
.text:000134BC
.text:000134BC ; Segment type: Pure code
.text:000134BC ; Segment permissions: Read/Execute
.text:000134BC _text           segment para public 'CODE' use32
.text:000134BC                 assume cs:_text
.text:000134BC                 ;org 134BCh
.text:000134BC ; COMDAT (pick any)
.text:000134BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000134BC
.text:000134BC ; =============== S U B R O U T I N E =======================================
.text:000134BC
.text:000134BC ; Attributes: bp-based frame
.text:000134BC
.text:000134BC ; public: struct NArchive::NParser::CParseItem & __thiscall CObjectVector<struct NArchive::NParser::CParseItem>::Back(void)
.text:000134BC                 public ?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ
.text:000134BC ?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ proc near
.text:000134BC                                         ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+11Bp
.text:000134BC                                         ; CArc::OpenStream2(COpenOptions const &)+4BCBp
.text:000134BC
.text:000134BC var_4           = dword ptr -4
.text:000134BC
.text:000134BC                 push    ebp
.text:000134BD                 mov     ebp, esp
.text:000134BF                 push    ecx
.text:000134C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000134C7                 mov     [ebp+var_4], ecx
.text:000134CA                 mov     ecx, [ebp+var_4]
.text:000134CD                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000134D2                 sub     eax, 1
.text:000134D5                 push    eax
.text:000134D6                 mov     ecx, [ebp+var_4]
.text:000134D9                 call    ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[](uint)
.text:000134DE                 add     esp, 4
.text:000134E1                 cmp     ebp, esp
.text:000134E3                 call    __RTC_CheckEsp
.text:000134E8                 mov     esp, ebp
.text:000134EA                 pop     ebp
.text:000134EB                 retn
.text:000134EB ?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ endp
.text:000134EB
.text:000134EB _text           ends
.text:000134EB
.text:000134EC ; ===========================================================================
.text:000134EC
.text:000134EC ; Segment type: Pure code
.text:000134EC ; Segment permissions: Read/Execute
.text:000134EC _text           segment para public 'CODE' use32
.text:000134EC                 assume cs:_text
.text:000134EC                 ;org 134ECh
.text:000134EC ; COMDAT (pick any)
.text:000134EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000134EC
.text:000134EC ; =============== S U B R O U T I N E =======================================
.text:000134EC
.text:000134EC ; Attributes: bp-based frame
.text:000134EC
.text:000134EC ; int __stdcall CObjectVector<NArchive::NParser::CParseItem>::Add(struct NArchive::NParser::CParseItem *)
.text:000134EC                 public ?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z
.text:000134EC ?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z proc near
.text:000134EC                                         ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+C0p
.text:000134EC
.text:000134EC var_1C          = dword ptr -1Ch
.text:000134EC var_18          = dword ptr -18h
.text:000134EC var_14          = dword ptr -14h
.text:000134EC var_10          = dword ptr -10h
.text:000134EC var_C           = dword ptr -0Ch
.text:000134EC var_4           = dword ptr -4
.text:000134EC arg_0           = dword ptr  8
.text:000134EC
.text:000134EC                 push    ebp
.text:000134ED                 mov     ebp, esp
.text:000134EF                 push    0FFFFFFFFh
.text:000134F1                 push    offset __ehhandler$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z
.text:000134F6                 mov     eax, large fs:0
.text:000134FC                 push    eax
.text:000134FD                 sub     esp, 10h
.text:00013500                 mov     eax, 0CCCCCCCCh
.text:00013505                 mov     [ebp+var_1C], eax
.text:00013508                 mov     [ebp+var_18], eax
.text:0001350B                 mov     [ebp+var_14], eax
.text:0001350E                 mov     [ebp+var_10], eax
.text:00013511                 mov     eax, dword ptr ds:___security_cookie
.text:00013516                 xor     eax, ebp
.text:00013518                 push    eax
.text:00013519                 lea     eax, [ebp+var_C]
.text:0001351C                 mov     large fs:0, eax
.text:00013522                 mov     [ebp+var_10], ecx
.text:00013525                 push    70h ; 'p'       ; unsigned int
.text:00013527                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0001352C                 add     esp, 4
.text:0001352F                 mov     [ebp+var_18], eax
.text:00013532                 mov     [ebp+var_4], 0
.text:00013539                 cmp     [ebp+var_18], 0
.text:0001353D                 jz      short loc_13550
.text:0001353F                 mov     eax, [ebp+arg_0]
.text:00013542                 push    eax             ; struct NArchive::NParser::CParseItem *
.text:00013543                 mov     ecx, [ebp+var_18] ; this
.text:00013546                 call    ??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z ; NArchive::NParser::CParseItem::CParseItem(NArchive::NParser::CParseItem const &)
.text:0001354B                 mov     [ebp+var_1C], eax
.text:0001354E                 jmp     short loc_13557
.text:00013550 ; ---------------------------------------------------------------------------
.text:00013550
.text:00013550 loc_13550:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::Add(NArchive::NParser::CParseItem const &)+51j
.text:00013550                 mov     [ebp+var_1C], 0
.text:00013557
.text:00013557 loc_13557:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::Add(NArchive::NParser::CParseItem const &)+62j
.text:00013557                 mov     ecx, [ebp+var_1C]
.text:0001355A                 mov     [ebp+var_14], ecx
.text:0001355D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00013564                 mov     edx, [ebp+var_14]
.text:00013567                 push    edx
.text:00013568                 mov     ecx, [ebp+var_10]
.text:0001356B                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00013570                 mov     ecx, [ebp+var_C]
.text:00013573                 mov     large fs:0, ecx
.text:0001357A                 pop     ecx
.text:0001357B                 add     esp, 1Ch
.text:0001357E                 cmp     ebp, esp
.text:00013580                 call    __RTC_CheckEsp
.text:00013585                 mov     esp, ebp
.text:00013587                 pop     ebp
.text:00013588                 retn    4
.text:00013588 ?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z endp
.text:00013588
.text:00013588 ; ---------------------------------------------------------------------------
.text:0001358B                 align 4
.text:0001358B _text           ends
.text:0001358B
.text$x:0001358C ; ===========================================================================
.text$x:0001358C
.text$x:0001358C ; Segment type: Pure code
.text$x:0001358C ; Segment permissions: Read/Execute
.text$x:0001358C _text$x         segment para public 'CODE' use32
.text$x:0001358C                 assume cs:_text$x
.text$x:0001358C                 ;org 1358Ch
.text$x:0001358C ; COMDAT (pick associative to section at 134EC)
.text$x:0001358C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0001358C
.text$x:0001358C ; =============== S U B R O U T I N E =======================================
.text$x:0001358C
.text$x:0001358C
.text$x:0001358C __unwindfunclet$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z$0 proc near
.text$x:0001358C                                         ; DATA XREF: .xdata$x:000135B8o
.text$x:0001358C                 mov     eax, [ebp-18h]
.text$x:0001358F                 push    eax             ; void *
.text$x:00013590                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00013595                 pop     ecx
.text$x:00013596                 retn
.text$x:00013596 __unwindfunclet$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z$0 endp
.text$x:00013596
.text$x:00013597
.text$x:00013597 ; =============== S U B R O U T I N E =======================================
.text$x:00013597
.text$x:00013597
.text$x:00013597 __ehhandler$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z proc near
.text$x:00013597                                         ; DATA XREF: CObjectVector<NArchive::NParser::CParseItem>::Add(NArchive::NParser::CParseItem const &)+5o
.text$x:00013597
.text$x:00013597 arg_4           = dword ptr  8
.text$x:00013597
.text$x:00013597                 mov     edx, [esp+arg_4]
.text$x:0001359B                 lea     eax, [edx+0Ch]
.text$x:0001359E                 mov     ecx, [edx-14h]
.text$x:000135A1                 xor     ecx, eax
.text$x:000135A3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000135A8                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z
.text$x:000135AD                 jmp     ___CxxFrameHandler3
.text$x:000135AD __ehhandler$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z endp
.text$x:000135AD
.text$x:000135AD ; ---------------------------------------------------------------------------
.text$x:000135B2                 align 4
.text$x:000135B2 _text$x         ends
.text$x:000135B2
.xdata$x:000135B4 ; ===========================================================================
.xdata$x:000135B4
.xdata$x:000135B4 ; Segment type: Pure data
.xdata$x:000135B4 ; Segment permissions: Read
.xdata$x:000135B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000135B4                 assume cs:_xdata$x
.xdata$x:000135B4                 ;org 135B4h
.xdata$x:000135B4 ; COMDAT (pick associative to section at 134EC)
.xdata$x:000135B4 __unwindtable$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z db 0FFh
.xdata$x:000135B4                                         ; DATA XREF: .xdata$x:000135C4o
.xdata$x:000135B5                 db 0FFh
.xdata$x:000135B6                 db 0FFh
.xdata$x:000135B7                 db 0FFh
.xdata$x:000135B8                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z$0
.xdata$x:000135BC __ehfuncinfo$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z db  22h ; "
.xdata$x:000135BC                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z+11o
.xdata$x:000135BD                 db    5
.xdata$x:000135BE                 db  93h ; ô
.xdata$x:000135BF                 db  19h
.xdata$x:000135C0                 db    1
.xdata$x:000135C1                 db    0
.xdata$x:000135C2                 db    0
.xdata$x:000135C3                 db    0
.xdata$x:000135C4                 dd offset __unwindtable$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z
.xdata$x:000135C8                 db    0
.xdata$x:000135C9                 db    0
.xdata$x:000135CA                 db    0
.xdata$x:000135CB                 db    0
.xdata$x:000135CC                 db    0
.xdata$x:000135CD                 db    0
.xdata$x:000135CE                 db    0
.xdata$x:000135CF                 db    0
.xdata$x:000135D0                 db    0
.xdata$x:000135D1                 db    0
.xdata$x:000135D2                 db    0
.xdata$x:000135D3                 db    0
.xdata$x:000135D4                 db    0
.xdata$x:000135D5                 db    0
.xdata$x:000135D6                 db    0
.xdata$x:000135D7                 db    0
.xdata$x:000135D8                 db    0
.xdata$x:000135D9                 db    0
.xdata$x:000135DA                 db    0
.xdata$x:000135DB                 db    0
.xdata$x:000135DC                 db    1
.xdata$x:000135DD                 db    0
.xdata$x:000135DE                 db    0
.xdata$x:000135DF                 db    0
.xdata$x:000135DF _xdata$x        ends
.xdata$x:000135DF
.text:000135E0 ; ===========================================================================
.text:000135E0
.text:000135E0 ; Segment type: Pure code
.text:000135E0 ; Segment permissions: Read/Execute
.text:000135E0 _text           segment para public 'CODE' use32
.text:000135E0                 assume cs:_text
.text:000135E0                 ;org 135E0h
.text:000135E0 ; COMDAT (pick any)
.text:000135E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000135E0
.text:000135E0 ; =============== S U B R O U T I N E =======================================
.text:000135E0
.text:000135E0 ; Attributes: bp-based frame
.text:000135E0
.text:000135E0 ; int __stdcall CObjectVector<NArchive::NParser::CParseItem>::Insert(int, struct NArchive::NParser::CParseItem *)
.text:000135E0                 public ?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z
.text:000135E0 ?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z proc near
.text:000135E0                                         ; CODE XREF: NArchive::NParser::CHandler::AddItem(NArchive::NParser::CParseItem const &)+52p
.text:000135E0
.text:000135E0 var_1C          = dword ptr -1Ch
.text:000135E0 var_18          = dword ptr -18h
.text:000135E0 var_14          = dword ptr -14h
.text:000135E0 var_10          = dword ptr -10h
.text:000135E0 var_C           = dword ptr -0Ch
.text:000135E0 var_4           = dword ptr -4
.text:000135E0 arg_0           = dword ptr  8
.text:000135E0 arg_4           = dword ptr  0Ch
.text:000135E0
.text:000135E0                 push    ebp
.text:000135E1                 mov     ebp, esp
.text:000135E3                 push    0FFFFFFFFh
.text:000135E5                 push    offset __ehhandler$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z
.text:000135EA                 mov     eax, large fs:0
.text:000135F0                 push    eax
.text:000135F1                 sub     esp, 10h
.text:000135F4                 mov     eax, 0CCCCCCCCh
.text:000135F9                 mov     [ebp+var_1C], eax
.text:000135FC                 mov     [ebp+var_18], eax
.text:000135FF                 mov     [ebp+var_14], eax
.text:00013602                 mov     [ebp+var_10], eax
.text:00013605                 mov     eax, dword ptr ds:___security_cookie
.text:0001360A                 xor     eax, ebp
.text:0001360C                 push    eax
.text:0001360D                 lea     eax, [ebp+var_C]
.text:00013610                 mov     large fs:0, eax
.text:00013616                 mov     [ebp+var_10], ecx
.text:00013619                 push    70h ; 'p'       ; unsigned int
.text:0001361B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00013620                 add     esp, 4
.text:00013623                 mov     [ebp+var_18], eax
.text:00013626                 mov     [ebp+var_4], 0
.text:0001362D                 cmp     [ebp+var_18], 0
.text:00013631                 jz      short loc_13644
.text:00013633                 mov     eax, [ebp+arg_4]
.text:00013636                 push    eax             ; struct NArchive::NParser::CParseItem *
.text:00013637                 mov     ecx, [ebp+var_18] ; this
.text:0001363A                 call    ??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z ; NArchive::NParser::CParseItem::CParseItem(NArchive::NParser::CParseItem const &)
.text:0001363F                 mov     [ebp+var_1C], eax
.text:00013642                 jmp     short loc_1364B
.text:00013644 ; ---------------------------------------------------------------------------
.text:00013644
.text:00013644 loc_13644:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::Insert(uint,NArchive::NParser::CParseItem const &)+51j
.text:00013644                 mov     [ebp+var_1C], 0
.text:0001364B
.text:0001364B loc_1364B:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::Insert(uint,NArchive::NParser::CParseItem const &)+62j
.text:0001364B                 mov     ecx, [ebp+var_1C]
.text:0001364E                 mov     [ebp+var_14], ecx
.text:00013651                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00013658                 mov     edx, [ebp+var_14]
.text:0001365B                 push    edx
.text:0001365C                 mov     eax, [ebp+arg_0]
.text:0001365F                 push    eax
.text:00013660                 mov     ecx, [ebp+var_10]
.text:00013663                 call    ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ; CRecordVector<void *>::Insert(uint,void * const)
.text:00013668                 mov     ecx, [ebp+var_C]
.text:0001366B                 mov     large fs:0, ecx
.text:00013672                 pop     ecx
.text:00013673                 add     esp, 1Ch
.text:00013676                 cmp     ebp, esp
.text:00013678                 call    __RTC_CheckEsp
.text:0001367D                 mov     esp, ebp
.text:0001367F                 pop     ebp
.text:00013680                 retn    8
.text:00013680 ?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z endp
.text:00013680
.text:00013680 ; ---------------------------------------------------------------------------
.text:00013683                 align 4
.text:00013683 _text           ends
.text:00013683
.text$x:00013684 ; ===========================================================================
.text$x:00013684
.text$x:00013684 ; Segment type: Pure code
.text$x:00013684 ; Segment permissions: Read/Execute
.text$x:00013684 _text$x         segment para public 'CODE' use32
.text$x:00013684                 assume cs:_text$x
.text$x:00013684                 ;org 13684h
.text$x:00013684 ; COMDAT (pick associative to section at 135E0)
.text$x:00013684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00013684
.text$x:00013684 ; =============== S U B R O U T I N E =======================================
.text$x:00013684
.text$x:00013684
.text$x:00013684 __unwindfunclet$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z$0 proc near
.text$x:00013684                                         ; DATA XREF: .xdata$x:000136B0o
.text$x:00013684                 mov     eax, [ebp-18h]
.text$x:00013687                 push    eax             ; void *
.text$x:00013688                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0001368D                 pop     ecx
.text$x:0001368E                 retn
.text$x:0001368E __unwindfunclet$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z$0 endp
.text$x:0001368E
.text$x:0001368F
.text$x:0001368F ; =============== S U B R O U T I N E =======================================
.text$x:0001368F
.text$x:0001368F
.text$x:0001368F __ehhandler$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z proc near
.text$x:0001368F                                         ; DATA XREF: CObjectVector<NArchive::NParser::CParseItem>::Insert(uint,NArchive::NParser::CParseItem const &)+5o
.text$x:0001368F
.text$x:0001368F arg_4           = dword ptr  8
.text$x:0001368F
.text$x:0001368F                 mov     edx, [esp+arg_4]
.text$x:00013693                 lea     eax, [edx+0Ch]
.text$x:00013696                 mov     ecx, [edx-14h]
.text$x:00013699                 xor     ecx, eax
.text$x:0001369B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000136A0                 mov     eax, offset __ehfuncinfo$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z
.text$x:000136A5                 jmp     ___CxxFrameHandler3
.text$x:000136A5 __ehhandler$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z endp
.text$x:000136A5
.text$x:000136A5 ; ---------------------------------------------------------------------------
.text$x:000136AA                 align 4
.text$x:000136AA _text$x         ends
.text$x:000136AA
.xdata$x:000136AC ; ===========================================================================
.xdata$x:000136AC
.xdata$x:000136AC ; Segment type: Pure data
.xdata$x:000136AC ; Segment permissions: Read
.xdata$x:000136AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000136AC                 assume cs:_xdata$x
.xdata$x:000136AC                 ;org 136ACh
.xdata$x:000136AC ; COMDAT (pick associative to section at 135E0)
.xdata$x:000136AC __unwindtable$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z db 0FFh
.xdata$x:000136AC                                         ; DATA XREF: .xdata$x:000136BCo
.xdata$x:000136AD                 db 0FFh
.xdata$x:000136AE                 db 0FFh
.xdata$x:000136AF                 db 0FFh
.xdata$x:000136B0                 dd offset __unwindfunclet$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z$0
.xdata$x:000136B4 __ehfuncinfo$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z db  22h ; "
.xdata$x:000136B4                                         ; DATA XREF: __ehhandler$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z+11o
.xdata$x:000136B5                 db    5
.xdata$x:000136B6                 db  93h ; ô
.xdata$x:000136B7                 db  19h
.xdata$x:000136B8                 db    1
.xdata$x:000136B9                 db    0
.xdata$x:000136BA                 db    0
.xdata$x:000136BB                 db    0
.xdata$x:000136BC                 dd offset __unwindtable$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z
.xdata$x:000136C0                 db    0
.xdata$x:000136C1                 db    0
.xdata$x:000136C2                 db    0
.xdata$x:000136C3                 db    0
.xdata$x:000136C4                 db    0
.xdata$x:000136C5                 db    0
.xdata$x:000136C6                 db    0
.xdata$x:000136C7                 db    0
.xdata$x:000136C8                 db    0
.xdata$x:000136C9                 db    0
.xdata$x:000136CA                 db    0
.xdata$x:000136CB                 db    0
.xdata$x:000136CC                 db    0
.xdata$x:000136CD                 db    0
.xdata$x:000136CE                 db    0
.xdata$x:000136CF                 db    0
.xdata$x:000136D0                 db    0
.xdata$x:000136D1                 db    0
.xdata$x:000136D2                 db    0
.xdata$x:000136D3                 db    0
.xdata$x:000136D4                 db    1
.xdata$x:000136D5                 db    0
.xdata$x:000136D6                 db    0
.xdata$x:000136D7                 db    0
.xdata$x:000136D7 _xdata$x        ends
.xdata$x:000136D7
.text:000136D8 ; ===========================================================================
.text:000136D8
.text:000136D8 ; Segment type: Pure code
.text:000136D8 ; Segment permissions: Read/Execute
.text:000136D8 _text           segment para public 'CODE' use32
.text:000136D8                 assume cs:_text
.text:000136D8                 ;org 136D8h
.text:000136D8 ; COMDAT (pick any)
.text:000136D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000136D8
.text:000136D8 ; =============== S U B R O U T I N E =======================================
.text:000136D8
.text:000136D8 ; Attributes: bp-based frame
.text:000136D8
.text:000136D8 ; public: __thiscall CObjectVector<struct NArchive::NParser::CParseItem>::~CObjectVector<struct NArchive::NParser::CParseItem>(void)
.text:000136D8                 public ??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
.text:000136D8 ??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ proc near
.text:000136D8                                         ; CODE XREF: __unwindfunclet$??0CHandler@NParser@NArchive@@QAE@XZ$0+6j
.text:000136D8                                         ; NArchive::NParser::CHandler::~CHandler(void)+4Cp ...
.text:000136D8
.text:000136D8 var_20          = dword ptr -20h
.text:000136D8 var_1C          = dword ptr -1Ch
.text:000136D8 var_18          = dword ptr -18h
.text:000136D8 var_14          = dword ptr -14h
.text:000136D8 var_10          = dword ptr -10h
.text:000136D8 var_C           = dword ptr -0Ch
.text:000136D8 var_4           = dword ptr -4
.text:000136D8
.text:000136D8                 push    ebp
.text:000136D9                 mov     ebp, esp
.text:000136DB                 push    0FFFFFFFFh
.text:000136DD                 push    offset __ehhandler$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
.text:000136E2                 mov     eax, large fs:0
.text:000136E8                 push    eax
.text:000136E9                 sub     esp, 14h
.text:000136EC                 mov     eax, 0CCCCCCCCh
.text:000136F1                 mov     [ebp+var_20], eax
.text:000136F4                 mov     [ebp+var_1C], eax
.text:000136F7                 mov     [ebp+var_18], eax
.text:000136FA                 mov     [ebp+var_14], eax
.text:000136FD                 mov     [ebp+var_10], eax
.text:00013700                 mov     eax, dword ptr ds:___security_cookie
.text:00013705                 xor     eax, ebp
.text:00013707                 push    eax
.text:00013708                 lea     eax, [ebp+var_C]
.text:0001370B                 mov     large fs:0, eax
.text:00013711                 mov     [ebp+var_10], ecx
.text:00013714                 mov     [ebp+var_4], 0
.text:0001371B                 mov     ecx, [ebp+var_10]
.text:0001371E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00013723                 mov     [ebp+var_14], eax
.text:00013726
.text:00013726 loc_13726:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>(void):loc_13768j
.text:00013726                 cmp     [ebp+var_14], 0
.text:0001372A                 jz      short loc_1376A
.text:0001372C                 mov     eax, [ebp+var_14]
.text:0001372F                 sub     eax, 1
.text:00013732                 mov     [ebp+var_14], eax
.text:00013735                 mov     ecx, [ebp+var_14]
.text:00013738                 push    ecx
.text:00013739                 mov     ecx, [ebp+var_10]
.text:0001373C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00013741                 mov     edx, [eax]
.text:00013743                 mov     [ebp+var_1C], edx
.text:00013746                 mov     eax, [ebp+var_1C]
.text:00013749                 mov     [ebp+var_18], eax
.text:0001374C                 cmp     [ebp+var_18], 0
.text:00013750                 jz      short loc_13761
.text:00013752                 push    1
.text:00013754                 mov     ecx, [ebp+var_18]
.text:00013757                 call    ??_GCParseItem@NParser@NArchive@@QAEPAXI@Z ; NArchive::NParser::CParseItem::`scalar deleting destructor'(uint)
.text:0001375C                 mov     [ebp+var_20], eax
.text:0001375F                 jmp     short loc_13768
.text:00013761 ; ---------------------------------------------------------------------------
.text:00013761
.text:00013761 loc_13761:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>(void)+78j
.text:00013761                 mov     [ebp+var_20], 0
.text:00013768
.text:00013768 loc_13768:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>(void)+87j
.text:00013768                 jmp     short loc_13726
.text:0001376A ; ---------------------------------------------------------------------------
.text:0001376A
.text:0001376A loc_1376A:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>(void)+52j
.text:0001376A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00013771                 mov     ecx, [ebp+var_10]
.text:00013774                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00013779                 mov     ecx, [ebp+var_C]
.text:0001377C                 mov     large fs:0, ecx
.text:00013783                 pop     ecx
.text:00013784                 add     esp, 20h
.text:00013787                 cmp     ebp, esp
.text:00013789                 call    __RTC_CheckEsp
.text:0001378E                 mov     esp, ebp
.text:00013790                 pop     ebp
.text:00013791                 retn
.text:00013791 ??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ endp
.text:00013791
.text:00013791 ; ---------------------------------------------------------------------------
.text:00013792                 align 4
.text:00013792 _text           ends
.text:00013792
.text$x:00013794 ; ===========================================================================
.text$x:00013794
.text$x:00013794 ; Segment type: Pure code
.text$x:00013794 ; Segment permissions: Read/Execute
.text$x:00013794 _text$x         segment para public 'CODE' use32
.text$x:00013794                 assume cs:_text$x
.text$x:00013794                 ;org 13794h
.text$x:00013794 ; COMDAT (pick associative to section at 136D8)
.text$x:00013794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00013794
.text$x:00013794 ; =============== S U B R O U T I N E =======================================
.text$x:00013794
.text$x:00013794
.text$x:00013794 __unwindfunclet$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ$0 proc near
.text$x:00013794                                         ; DATA XREF: .xdata$x:000137BCo
.text$x:00013794                 mov     ecx, [ebp-10h]
.text$x:00013797                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00013797 __unwindfunclet$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ$0 endp
.text$x:00013797
.text$x:0001379C
.text$x:0001379C ; =============== S U B R O U T I N E =======================================
.text$x:0001379C
.text$x:0001379C
.text$x:0001379C __ehhandler$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ proc near
.text$x:0001379C                                         ; DATA XREF: CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>(void)+5o
.text$x:0001379C
.text$x:0001379C arg_4           = dword ptr  8
.text$x:0001379C
.text$x:0001379C                 mov     edx, [esp+arg_4]
.text$x:000137A0                 lea     eax, [edx+0Ch]
.text$x:000137A3                 mov     ecx, [edx-18h]
.text$x:000137A6                 xor     ecx, eax
.text$x:000137A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000137AD                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
.text$x:000137B2                 jmp     ___CxxFrameHandler3
.text$x:000137B2 __ehhandler$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ endp
.text$x:000137B2
.text$x:000137B2 ; ---------------------------------------------------------------------------
.text$x:000137B7                 align 4
.text$x:000137B7 _text$x         ends
.text$x:000137B7
.xdata$x:000137B8 ; ===========================================================================
.xdata$x:000137B8
.xdata$x:000137B8 ; Segment type: Pure data
.xdata$x:000137B8 ; Segment permissions: Read
.xdata$x:000137B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000137B8                 assume cs:_xdata$x
.xdata$x:000137B8                 ;org 137B8h
.xdata$x:000137B8 ; COMDAT (pick associative to section at 136D8)
.xdata$x:000137B8 __unwindtable$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:000137B8                                         ; DATA XREF: .xdata$x:000137C8o
.xdata$x:000137B9                 db 0FFh
.xdata$x:000137BA                 db 0FFh
.xdata$x:000137BB                 db 0FFh
.xdata$x:000137BC                 dd offset __unwindfunclet$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ$0
.xdata$x:000137C0 __ehfuncinfo$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:000137C0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ+11o
.xdata$x:000137C1                 db    5
.xdata$x:000137C2                 db  93h ; ô
.xdata$x:000137C3                 db  19h
.xdata$x:000137C4                 db    1
.xdata$x:000137C5                 db    0
.xdata$x:000137C6                 db    0
.xdata$x:000137C7                 db    0
.xdata$x:000137C8                 dd offset __unwindtable$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
.xdata$x:000137CC                 align 20h
.xdata$x:000137E0                 db    1
.xdata$x:000137E1                 db    0
.xdata$x:000137E2                 db    0
.xdata$x:000137E3                 db    0
.xdata$x:000137E3 _xdata$x        ends
.xdata$x:000137E3
.text:000137E4 ; ===========================================================================
.text:000137E4
.text:000137E4 ; Segment type: Pure code
.text:000137E4 ; Segment permissions: Read/Execute
.text:000137E4 _text           segment para public 'CODE' use32
.text:000137E4                 assume cs:_text
.text:000137E4                 ;org 137E4h
.text:000137E4 ; COMDAT (pick any)
.text:000137E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000137E4
.text:000137E4 ; =============== S U B R O U T I N E =======================================
.text:000137E4
.text:000137E4 ; Attributes: bp-based frame
.text:000137E4
.text:000137E4 ; public: void __thiscall CObjectVector<struct NArchive::NParser::CParseItem>::Clear(void)
.text:000137E4                 public ?Clear@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ
.text:000137E4 ?Clear@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ proc near
.text:000137E4                                         ; CODE XREF: NArchive::NParser::CHandler::Close(void)+9p
.text:000137E4
.text:000137E4 var_14          = dword ptr -14h
.text:000137E4 var_10          = dword ptr -10h
.text:000137E4 var_C           = dword ptr -0Ch
.text:000137E4 var_8           = dword ptr -8
.text:000137E4 var_4           = dword ptr -4
.text:000137E4
.text:000137E4                 push    ebp
.text:000137E5                 mov     ebp, esp
.text:000137E7                 sub     esp, 14h
.text:000137EA                 mov     eax, 0CCCCCCCCh
.text:000137EF                 mov     [ebp+var_14], eax
.text:000137F2                 mov     [ebp+var_10], eax
.text:000137F5                 mov     [ebp+var_C], eax
.text:000137F8                 mov     [ebp+var_8], eax
.text:000137FB                 mov     [ebp+var_4], eax
.text:000137FE                 mov     [ebp+var_4], ecx
.text:00013801                 mov     ecx, [ebp+var_4]
.text:00013804                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00013809                 mov     [ebp+var_8], eax
.text:0001380C
.text:0001380C loc_1380C:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::Clear(void):loc_1384Ej
.text:0001380C                 cmp     [ebp+var_8], 0
.text:00013810                 jz      short loc_13850
.text:00013812                 mov     eax, [ebp+var_8]
.text:00013815                 sub     eax, 1
.text:00013818                 mov     [ebp+var_8], eax
.text:0001381B                 mov     ecx, [ebp+var_8]
.text:0001381E                 push    ecx
.text:0001381F                 mov     ecx, [ebp+var_4]
.text:00013822                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00013827                 mov     edx, [eax]
.text:00013829                 mov     [ebp+var_10], edx
.text:0001382C                 mov     eax, [ebp+var_10]
.text:0001382F                 mov     [ebp+var_C], eax
.text:00013832                 cmp     [ebp+var_C], 0
.text:00013836                 jz      short loc_13847
.text:00013838                 push    1
.text:0001383A                 mov     ecx, [ebp+var_C]
.text:0001383D                 call    ??_GCParseItem@NParser@NArchive@@QAEPAXI@Z ; NArchive::NParser::CParseItem::`scalar deleting destructor'(uint)
.text:00013842                 mov     [ebp+var_14], eax
.text:00013845                 jmp     short loc_1384E
.text:00013847 ; ---------------------------------------------------------------------------
.text:00013847
.text:00013847 loc_13847:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::Clear(void)+52j
.text:00013847                 mov     [ebp+var_14], 0
.text:0001384E
.text:0001384E loc_1384E:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::Clear(void)+61j
.text:0001384E                 jmp     short loc_1380C
.text:00013850 ; ---------------------------------------------------------------------------
.text:00013850
.text:00013850 loc_13850:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::Clear(void)+2Cj
.text:00013850                 mov     ecx, [ebp+var_4]
.text:00013853                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00013858                 add     esp, 14h
.text:0001385B                 cmp     ebp, esp
.text:0001385D                 call    __RTC_CheckEsp
.text:00013862                 mov     esp, ebp
.text:00013864                 pop     ebp
.text:00013865                 retn
.text:00013865 ?Clear@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ endp
.text:00013865
.text:00013865 ; ---------------------------------------------------------------------------
.text:00013866                 align 4
.text:00013866 _text           ends
.text:00013866
.text:00013868 ; ===========================================================================
.text:00013868
.text:00013868 ; Segment type: Pure code
.text:00013868 ; Segment permissions: Read/Execute
.text:00013868 _text           segment para public 'CODE' use32
.text:00013868                 assume cs:_text
.text:00013868                 ;org 13868h
.text:00013868 ; COMDAT (pick any)
.text:00013868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013868
.text:00013868 ; =============== S U B R O U T I N E =======================================
.text:00013868
.text:00013868 ; Attributes: bp-based frame
.text:00013868
.text:00013868 ; public: void __thiscall CObjectVector<struct NArchive::NParser::CParseItem>::DeleteBack(void)
.text:00013868                 public ?DeleteBack@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ
.text:00013868 ?DeleteBack@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ proc near
.text:00013868                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4C77p
.text:00013868
.text:00013868 var_10          = dword ptr -10h
.text:00013868 var_C           = dword ptr -0Ch
.text:00013868 var_8           = dword ptr -8
.text:00013868 var_4           = dword ptr -4
.text:00013868
.text:00013868                 push    ebp
.text:00013869                 mov     ebp, esp
.text:0001386B                 sub     esp, 10h
.text:0001386E                 mov     eax, 0CCCCCCCCh
.text:00013873                 mov     [ebp+var_10], eax
.text:00013876                 mov     [ebp+var_C], eax
.text:00013879                 mov     [ebp+var_8], eax
.text:0001387C                 mov     [ebp+var_4], eax
.text:0001387F                 mov     [ebp+var_4], ecx
.text:00013882                 mov     ecx, [ebp+var_4]
.text:00013885                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0001388A                 sub     eax, 1
.text:0001388D                 push    eax
.text:0001388E                 mov     ecx, [ebp+var_4]
.text:00013891                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00013896                 mov     eax, [eax]
.text:00013898                 mov     [ebp+var_C], eax
.text:0001389B                 mov     ecx, [ebp+var_C]
.text:0001389E                 mov     [ebp+var_8], ecx
.text:000138A1                 cmp     [ebp+var_8], 0
.text:000138A5                 jz      short loc_138B6
.text:000138A7                 push    1
.text:000138A9                 mov     ecx, [ebp+var_8]
.text:000138AC                 call    ??_GCParseItem@NParser@NArchive@@QAEPAXI@Z ; NArchive::NParser::CParseItem::`scalar deleting destructor'(uint)
.text:000138B1                 mov     [ebp+var_10], eax
.text:000138B4                 jmp     short loc_138BD
.text:000138B6 ; ---------------------------------------------------------------------------
.text:000138B6
.text:000138B6 loc_138B6:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::DeleteBack(void)+3Dj
.text:000138B6                 mov     [ebp+var_10], 0
.text:000138BD
.text:000138BD loc_138BD:                              ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::DeleteBack(void)+4Cj
.text:000138BD                 mov     ecx, [ebp+var_4]
.text:000138C0                 call    ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::DeleteBack(void)
.text:000138C5                 add     esp, 10h
.text:000138C8                 cmp     ebp, esp
.text:000138CA                 call    __RTC_CheckEsp
.text:000138CF                 mov     esp, ebp
.text:000138D1                 pop     ebp
.text:000138D2                 retn
.text:000138D2 ?DeleteBack@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ endp
.text:000138D2
.text:000138D2 ; ---------------------------------------------------------------------------
.text:000138D3                 align 4
.text:000138D3 _text           ends
.text:000138D3
.text:000138D4 ; ===========================================================================
.text:000138D4
.text:000138D4 ; Segment type: Pure code
.text:000138D4 ; Segment permissions: Read/Execute
.text:000138D4 _text           segment para public 'CODE' use32
.text:000138D4                 assume cs:_text
.text:000138D4                 ;org 138D4h
.text:000138D4 ; COMDAT (pick any)
.text:000138D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000138D4
.text:000138D4 ; =============== S U B R O U T I N E =======================================
.text:000138D4
.text:000138D4 ; Attributes: bp-based frame
.text:000138D4
.text:000138D4 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(struct ICompressCoder *)
.text:000138D4                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
.text:000138D4 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z proc near
.text:000138D4                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+357p
.text:000138D4
.text:000138D4 var_4           = dword ptr -4
.text:000138D4 arg_0           = dword ptr  8
.text:000138D4
.text:000138D4                 push    ebp
.text:000138D5                 mov     ebp, esp
.text:000138D7                 push    ecx
.text:000138D8                 push    esi
.text:000138D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000138E0                 mov     [ebp+var_4], ecx
.text:000138E3                 mov     eax, [ebp+var_4]
.text:000138E6                 mov     ecx, [ebp+arg_0]
.text:000138E9                 mov     [eax], ecx
.text:000138EB                 cmp     [ebp+arg_0], 0
.text:000138EF                 jz      short loc_13908
.text:000138F1                 mov     edx, [ebp+arg_0]
.text:000138F4                 mov     eax, [edx]
.text:000138F6                 mov     esi, esp
.text:000138F8                 mov     ecx, [ebp+arg_0]
.text:000138FB                 push    ecx
.text:000138FC                 mov     edx, [eax+4]
.text:000138FF                 call    edx
.text:00013901                 cmp     esi, esp
.text:00013903                 call    __RTC_CheckEsp
.text:00013908
.text:00013908 loc_13908:                              ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)+1Bj
.text:00013908                 mov     eax, [ebp+var_4]
.text:0001390B                 pop     esi
.text:0001390C                 add     esp, 4
.text:0001390F                 cmp     ebp, esp
.text:00013911                 call    __RTC_CheckEsp
.text:00013916                 mov     esp, ebp
.text:00013918                 pop     ebp
.text:00013919                 retn    4
.text:00013919 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z endp
.text:00013919
.text:00013919 _text           ends
.text:00013919
.text:0001391C ; ===========================================================================
.text:0001391C
.text:0001391C ; Segment type: Pure code
.text:0001391C ; Segment permissions: Read/Execute
.text:0001391C _text           segment para public 'CODE' use32
.text:0001391C                 assume cs:_text
.text:0001391C                 ;org 1391Ch
.text:0001391C ; COMDAT (pick any)
.text:0001391C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001391C
.text:0001391C ; =============== S U B R O U T I N E =======================================
.text:0001391C
.text:0001391C ; Attributes: bp-based frame
.text:0001391C
.text:0001391C ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:0001391C                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:0001391C ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:0001391C                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3C9p
.text:0001391C                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4C9p ...
.text:0001391C
.text:0001391C var_4           = dword ptr -4
.text:0001391C
.text:0001391C                 push    ebp
.text:0001391D                 mov     ebp, esp
.text:0001391F                 push    ecx
.text:00013920                 push    esi
.text:00013921                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013928                 mov     [ebp+var_4], ecx
.text:0001392B                 mov     eax, [ebp+var_4]
.text:0001392E                 cmp     dword ptr [eax], 0
.text:00013931                 jz      short loc_1394E
.text:00013933                 mov     ecx, [ebp+var_4]
.text:00013936                 mov     edx, [ecx]
.text:00013938                 mov     eax, [ebp+var_4]
.text:0001393B                 mov     ecx, [eax]
.text:0001393D                 mov     edx, [edx]
.text:0001393F                 mov     esi, esp
.text:00013941                 push    ecx
.text:00013942                 mov     eax, [edx+8]
.text:00013945                 call    eax
.text:00013947                 cmp     esi, esp
.text:00013949                 call    __RTC_CheckEsp
.text:0001394E
.text:0001394E loc_1394E:                              ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:0001394E                 pop     esi
.text:0001394F                 add     esp, 4
.text:00013952                 cmp     ebp, esp
.text:00013954                 call    __RTC_CheckEsp
.text:00013959                 mov     esp, ebp
.text:0001395B                 pop     ebp
.text:0001395C                 retn
.text:0001395C ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:0001395C
.text:0001395C ; ---------------------------------------------------------------------------
.text:0001395D                 align 10h
.text:0001395D _text           ends
.text:0001395D
.text:00013960 ; ===========================================================================
.text:00013960
.text:00013960 ; Segment type: Pure code
.text:00013960 ; Segment permissions: Read/Execute
.text:00013960 _text           segment para public 'CODE' use32
.text:00013960                 assume cs:_text
.text:00013960                 ;org 13960h
.text:00013960 ; COMDAT (pick any)
.text:00013960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013960
.text:00013960 ; =============== S U B R O U T I N E =======================================
.text:00013960
.text:00013960 ; Attributes: bp-based frame
.text:00013960
.text:00013960 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:00013960                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00013960 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00013960                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+739p
.text:00013960
.text:00013960 var_4           = dword ptr -4
.text:00013960
.text:00013960                 push    ebp
.text:00013961                 mov     ebp, esp
.text:00013963                 push    ecx
.text:00013964                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001396B                 mov     [ebp+var_4], ecx
.text:0001396E                 mov     eax, [ebp+var_4]
.text:00013971                 mov     eax, [eax]
.text:00013973                 mov     esp, ebp
.text:00013975                 pop     ebp
.text:00013976                 retn
.text:00013976 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:00013976
.text:00013976 ; ---------------------------------------------------------------------------
.text:00013977                 align 4
.text:00013977 _text           ends
.text:00013977
.text:00013978 ; ===========================================================================
.text:00013978
.text:00013978 ; Segment type: Pure code
.text:00013978 ; Segment permissions: Read/Execute
.text:00013978 _text           segment para public 'CODE' use32
.text:00013978                 assume cs:_text
.text:00013978                 ;org 13978h
.text:00013978 ; COMDAT (pick any)
.text:00013978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013978
.text:00013978 ; =============== S U B R O U T I N E =======================================
.text:00013978
.text:00013978 ; Attributes: bp-based frame
.text:00013978
.text:00013978 ; public: __thiscall CRecordVector<int>::CRecordVector<int>(void)
.text:00013978                 public ??0?$CRecordVector@H@@QAE@XZ
.text:00013978 ??0?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+E7p
.text:00013978                                         ; CArc::OpenStream2(COpenOptions const &)+40Bp ...
.text:00013978
.text:00013978 var_4           = dword ptr -4
.text:00013978
.text:00013978                 push    ebp
.text:00013979                 mov     ebp, esp
.text:0001397B                 push    ecx
.text:0001397C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013983                 mov     [ebp+var_4], ecx
.text:00013986                 mov     eax, [ebp+var_4]
.text:00013989                 mov     dword ptr [eax], 0
.text:0001398F                 mov     ecx, [ebp+var_4]
.text:00013992                 mov     dword ptr [ecx+4], 0
.text:00013999                 mov     edx, [ebp+var_4]
.text:0001399C                 mov     dword ptr [edx+8], 0
.text:000139A3                 mov     eax, [ebp+var_4]
.text:000139A6                 mov     esp, ebp
.text:000139A8                 pop     ebp
.text:000139A9                 retn
.text:000139A9 ??0?$CRecordVector@H@@QAE@XZ endp
.text:000139A9
.text:000139A9 ; ---------------------------------------------------------------------------
.text:000139AA                 align 4
.text:000139AA _text           ends
.text:000139AA
.text:000139AC ; ===========================================================================
.text:000139AC
.text:000139AC ; Segment type: Pure code
.text:000139AC ; Segment permissions: Read/Execute
.text:000139AC _text           segment para public 'CODE' use32
.text:000139AC                 assume cs:_text
.text:000139AC                 ;org 139ACh
.text:000139AC ; COMDAT (pick any)
.text:000139AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000139AC
.text:000139AC ; =============== S U B R O U T I N E =======================================
.text:000139AC
.text:000139AC ; Attributes: bp-based frame
.text:000139AC
.text:000139AC ; public: __thiscall CRecordVector<int>::CRecordVector<int>(class CRecordVector<int> const &)
.text:000139AC                 public ??0?$CRecordVector@H@@QAE@ABV0@@Z
.text:000139AC ??0?$CRecordVector@H@@QAE@ABV0@@Z proc near
.text:000139AC                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+46Fp
.text:000139AC                                         ; CArc::OpenStream2(COpenOptions const &)+857p ...
.text:000139AC
.text:000139AC var_C           = dword ptr -0Ch
.text:000139AC var_8           = dword ptr -8
.text:000139AC var_4           = dword ptr -4
.text:000139AC arg_0           = dword ptr  8
.text:000139AC
.text:000139AC                 push    ebp
.text:000139AD                 mov     ebp, esp
.text:000139AF                 sub     esp, 0Ch
.text:000139B2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000139B9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000139C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000139C7                 mov     [ebp+var_4], ecx
.text:000139CA                 mov     eax, [ebp+var_4]
.text:000139CD                 mov     dword ptr [eax], 0
.text:000139D3                 mov     ecx, [ebp+var_4]
.text:000139D6                 mov     dword ptr [ecx+4], 0
.text:000139DD                 mov     edx, [ebp+var_4]
.text:000139E0                 mov     dword ptr [edx+8], 0
.text:000139E7                 mov     ecx, [ebp+arg_0]
.text:000139EA                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:000139EF                 mov     [ebp+var_8], eax
.text:000139F2                 cmp     [ebp+var_8], 0
.text:000139F6                 jz      short loc_13A4C
.text:000139F8                 xor     ecx, ecx
.text:000139FA                 mov     eax, [ebp+var_8]
.text:000139FD                 mov     edx, 4
.text:00013A02                 mul     edx
.text:00013A04                 seto    cl
.text:00013A07                 neg     ecx
.text:00013A09                 or      ecx, eax
.text:00013A0B                 push    ecx             ; unsigned int
.text:00013A0C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00013A11                 add     esp, 4
.text:00013A14                 mov     [ebp+var_C], eax
.text:00013A17                 mov     eax, [ebp+var_4]
.text:00013A1A                 mov     ecx, [ebp+var_C]
.text:00013A1D                 mov     [eax], ecx
.text:00013A1F                 mov     edx, [ebp+var_4]
.text:00013A22                 mov     eax, [ebp+var_8]
.text:00013A25                 mov     [edx+4], eax
.text:00013A28                 mov     ecx, [ebp+var_4]
.text:00013A2B                 mov     edx, [ebp+var_8]
.text:00013A2E                 mov     [ecx+8], edx
.text:00013A31                 mov     eax, [ebp+var_8]
.text:00013A34                 shl     eax, 2
.text:00013A37                 push    eax             ; Size
.text:00013A38                 mov     ecx, [ebp+arg_0]
.text:00013A3B                 mov     edx, [ecx]
.text:00013A3D                 push    edx             ; Src
.text:00013A3E                 mov     eax, [ebp+var_4]
.text:00013A41                 mov     ecx, [eax]
.text:00013A43                 push    ecx             ; Dst
.text:00013A44                 call    _memcpy
.text:00013A49                 add     esp, 0Ch
.text:00013A4C
.text:00013A4C loc_13A4C:                              ; CODE XREF: CRecordVector<int>::CRecordVector<int>(CRecordVector<int> const &)+4Aj
.text:00013A4C                 mov     eax, [ebp+var_4]
.text:00013A4F                 add     esp, 0Ch
.text:00013A52                 cmp     ebp, esp
.text:00013A54                 call    __RTC_CheckEsp
.text:00013A59                 mov     esp, ebp
.text:00013A5B                 pop     ebp
.text:00013A5C                 retn    4
.text:00013A5C ??0?$CRecordVector@H@@QAE@ABV0@@Z endp
.text:00013A5C
.text:00013A5C ; ---------------------------------------------------------------------------
.text:00013A5F                 align 10h
.text:00013A5F _text           ends
.text:00013A5F
.text:00013A60 ; ===========================================================================
.text:00013A60
.text:00013A60 ; Segment type: Pure code
.text:00013A60 ; Segment permissions: Read/Execute
.text:00013A60 _text           segment para public 'CODE' use32
.text:00013A60                 assume cs:_text
.text:00013A60                 ;org 13A60h
.text:00013A60 ; COMDAT (pick any)
.text:00013A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013A60
.text:00013A60 ; =============== S U B R O U T I N E =======================================
.text:00013A60
.text:00013A60 ; Attributes: bp-based frame
.text:00013A60
.text:00013A60 ; public: unsigned int __thiscall CRecordVector<int>::Size(void)const
.text:00013A60                 public ?Size@?$CRecordVector@H@@QBEIXZ
.text:00013A60 ?Size@?$CRecordVector@H@@QBEIXZ proc near
.text:00013A60                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+36Ap
.text:00013A60                                         ; CArc::OpenStream2(COpenOptions const &)+7C4p ...
.text:00013A60
.text:00013A60 var_4           = dword ptr -4
.text:00013A60
.text:00013A60                 push    ebp
.text:00013A61                 mov     ebp, esp
.text:00013A63                 push    ecx
.text:00013A64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013A6B                 mov     [ebp+var_4], ecx
.text:00013A6E                 mov     eax, [ebp+var_4]
.text:00013A71                 mov     eax, [eax+4]
.text:00013A74                 mov     esp, ebp
.text:00013A76                 pop     ebp
.text:00013A77                 retn
.text:00013A77 ?Size@?$CRecordVector@H@@QBEIXZ endp
.text:00013A77
.text:00013A77 _text           ends
.text:00013A77
.text:00013A78 ; ===========================================================================
.text:00013A78
.text:00013A78 ; Segment type: Pure code
.text:00013A78 ; Segment permissions: Read/Execute
.text:00013A78 _text           segment para public 'CODE' use32
.text:00013A78                 assume cs:_text
.text:00013A78                 ;org 13A78h
.text:00013A78 ; COMDAT (pick any)
.text:00013A78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013A78
.text:00013A78 ; =============== S U B R O U T I N E =======================================
.text:00013A78
.text:00013A78 ; Attributes: bp-based frame
.text:00013A78
.text:00013A78 ; public: __thiscall CRecordVector<int>::~CRecordVector<int>(void)
.text:00013A78                 public ??1?$CRecordVector@H@@QAE@XZ
.text:00013A78 ??1?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+325p
.text:00013A78                                         ; CArc::OpenStream2(COpenOptions const &)+3CBp ...
.text:00013A78
.text:00013A78 var_8           = dword ptr -8
.text:00013A78 var_4           = dword ptr -4
.text:00013A78
.text:00013A78                 push    ebp
.text:00013A79                 mov     ebp, esp
.text:00013A7B                 sub     esp, 8
.text:00013A7E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00013A85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013A8C                 mov     [ebp+var_4], ecx
.text:00013A8F                 mov     eax, [ebp+var_4]
.text:00013A92                 mov     ecx, [eax]
.text:00013A94                 mov     [ebp+var_8], ecx
.text:00013A97                 mov     edx, [ebp+var_8]
.text:00013A9A                 push    edx             ; void *
.text:00013A9B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00013AA0                 add     esp, 4
.text:00013AA3                 add     esp, 8
.text:00013AA6                 cmp     ebp, esp
.text:00013AA8                 call    __RTC_CheckEsp
.text:00013AAD                 mov     esp, ebp
.text:00013AAF                 pop     ebp
.text:00013AB0                 retn
.text:00013AB0 ??1?$CRecordVector@H@@QAE@XZ endp
.text:00013AB0
.text:00013AB0 ; ---------------------------------------------------------------------------
.text:00013AB1                 align 4
.text:00013AB1 _text           ends
.text:00013AB1
.text:00013AB4 ; ===========================================================================
.text:00013AB4
.text:00013AB4 ; Segment type: Pure code
.text:00013AB4 ; Segment permissions: Read/Execute
.text:00013AB4 _text           segment para public 'CODE' use32
.text:00013AB4                 assume cs:_text
.text:00013AB4                 ;org 13AB4h
.text:00013AB4 ; COMDAT (pick any)
.text:00013AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013AB4
.text:00013AB4 ; =============== S U B R O U T I N E =======================================
.text:00013AB4
.text:00013AB4 ; Attributes: bp-based frame
.text:00013AB4
.text:00013AB4 ; public: void __thiscall CRecordVector<int>::DeleteFrom(unsigned int)
.text:00013AB4                 public ?DeleteFrom@?$CRecordVector@H@@QAEXI@Z
.text:00013AB4 ?DeleteFrom@?$CRecordVector@H@@QAEXI@Z proc near
.text:00013AB4                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+355p
.text:00013AB4
.text:00013AB4 var_4           = dword ptr -4
.text:00013AB4 arg_0           = dword ptr  8
.text:00013AB4
.text:00013AB4                 push    ebp
.text:00013AB5                 mov     ebp, esp
.text:00013AB7                 push    ecx
.text:00013AB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013ABF                 mov     [ebp+var_4], ecx
.text:00013AC2                 mov     eax, [ebp+var_4]
.text:00013AC5                 mov     ecx, [ebp+arg_0]
.text:00013AC8                 mov     [eax+4], ecx
.text:00013ACB                 mov     esp, ebp
.text:00013ACD                 pop     ebp
.text:00013ACE                 retn    4
.text:00013ACE ?DeleteFrom@?$CRecordVector@H@@QAEXI@Z endp
.text:00013ACE
.text:00013ACE ; ---------------------------------------------------------------------------
.text:00013AD1                 align 4
.text:00013AD1 _text           ends
.text:00013AD1
.text:00013AD4 ; ===========================================================================
.text:00013AD4
.text:00013AD4 ; Segment type: Pure code
.text:00013AD4 ; Segment permissions: Read/Execute
.text:00013AD4 _text           segment para public 'CODE' use32
.text:00013AD4                 assume cs:_text
.text:00013AD4                 ;org 13AD4h
.text:00013AD4 ; COMDAT (pick any)
.text:00013AD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013AD4
.text:00013AD4 ; =============== S U B R O U T I N E =======================================
.text:00013AD4
.text:00013AD4 ; Attributes: bp-based frame
.text:00013AD4
.text:00013AD4 ; public: class CRecordVector<int> & __thiscall CRecordVector<int>::operator=(class CRecordVector<int> const &)
.text:00013AD4                 public ??4?$CRecordVector@H@@QAEAAV0@ABV0@@Z
.text:00013AD4 ??4?$CRecordVector@H@@QAEAAV0@ABV0@@Z proc near
.text:00013AD4                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+80Fp
.text:00013AD4
.text:00013AD4 var_10          = dword ptr -10h
.text:00013AD4 var_C           = dword ptr -0Ch
.text:00013AD4 var_8           = dword ptr -8
.text:00013AD4 var_4           = dword ptr -4
.text:00013AD4 arg_0           = dword ptr  8
.text:00013AD4
.text:00013AD4                 push    ebp
.text:00013AD5                 mov     ebp, esp
.text:00013AD7                 sub     esp, 10h
.text:00013ADA                 mov     eax, 0CCCCCCCCh
.text:00013ADF                 mov     [ebp+var_10], eax
.text:00013AE2                 mov     [ebp+var_C], eax
.text:00013AE5                 mov     [ebp+var_8], eax
.text:00013AE8                 mov     [ebp+var_4], eax
.text:00013AEB                 mov     [ebp+var_4], ecx
.text:00013AEE                 mov     eax, [ebp+arg_0]
.text:00013AF1                 cmp     eax, [ebp+var_4]
.text:00013AF4                 jnz     short loc_13AFE
.text:00013AF6                 mov     eax, [ebp+var_4]
.text:00013AF9                 jmp     loc_13BA2
.text:00013AFE ; ---------------------------------------------------------------------------
.text:00013AFE
.text:00013AFE loc_13AFE:                              ; CODE XREF: CRecordVector<int>::operator=(CRecordVector<int> const &)+20j
.text:00013AFE                 mov     ecx, [ebp+arg_0]
.text:00013B01                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:00013B06                 mov     [ebp+var_8], eax
.text:00013B09                 mov     ecx, [ebp+var_4]
.text:00013B0C                 mov     edx, [ebp+var_8]
.text:00013B0F                 cmp     edx, [ecx+8]
.text:00013B12                 jbe     short loc_13B75
.text:00013B14                 mov     eax, [ebp+var_4]
.text:00013B17                 mov     ecx, [eax]
.text:00013B19                 mov     [ebp+var_C], ecx
.text:00013B1C                 mov     edx, [ebp+var_C]
.text:00013B1F                 push    edx             ; void *
.text:00013B20                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00013B25                 add     esp, 4
.text:00013B28                 mov     eax, [ebp+var_4]
.text:00013B2B                 mov     dword ptr [eax+8], 0
.text:00013B32                 mov     ecx, [ebp+var_4]
.text:00013B35                 mov     dword ptr [ecx+4], 0
.text:00013B3C                 mov     edx, [ebp+var_4]
.text:00013B3F                 mov     dword ptr [edx], 0
.text:00013B45                 xor     ecx, ecx
.text:00013B47                 mov     eax, [ebp+var_8]
.text:00013B4A                 mov     edx, 4
.text:00013B4F                 mul     edx
.text:00013B51                 seto    cl
.text:00013B54                 neg     ecx
.text:00013B56                 or      ecx, eax
.text:00013B58                 push    ecx             ; unsigned int
.text:00013B59                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00013B5E                 add     esp, 4
.text:00013B61                 mov     [ebp+var_10], eax
.text:00013B64                 mov     eax, [ebp+var_4]
.text:00013B67                 mov     ecx, [ebp+var_10]
.text:00013B6A                 mov     [eax], ecx
.text:00013B6C                 mov     edx, [ebp+var_4]
.text:00013B6F                 mov     eax, [ebp+var_8]
.text:00013B72                 mov     [edx+8], eax
.text:00013B75
.text:00013B75 loc_13B75:                              ; CODE XREF: CRecordVector<int>::operator=(CRecordVector<int> const &)+3Ej
.text:00013B75                 mov     ecx, [ebp+var_4]
.text:00013B78                 mov     edx, [ebp+var_8]
.text:00013B7B                 mov     [ecx+4], edx
.text:00013B7E                 cmp     [ebp+var_8], 0
.text:00013B82                 jz      short loc_13B9F
.text:00013B84                 mov     eax, [ebp+var_8]
.text:00013B87                 shl     eax, 2
.text:00013B8A                 push    eax             ; Size
.text:00013B8B                 mov     ecx, [ebp+arg_0]
.text:00013B8E                 mov     edx, [ecx]
.text:00013B90                 push    edx             ; Src
.text:00013B91                 mov     eax, [ebp+var_4]
.text:00013B94                 mov     ecx, [eax]
.text:00013B96                 push    ecx             ; Dst
.text:00013B97                 call    _memcpy
.text:00013B9C                 add     esp, 0Ch
.text:00013B9F
.text:00013B9F loc_13B9F:                              ; CODE XREF: CRecordVector<int>::operator=(CRecordVector<int> const &)+AEj
.text:00013B9F                 mov     eax, [ebp+var_4]
.text:00013BA2
.text:00013BA2 loc_13BA2:                              ; CODE XREF: CRecordVector<int>::operator=(CRecordVector<int> const &)+25j
.text:00013BA2                 add     esp, 10h
.text:00013BA5                 cmp     ebp, esp
.text:00013BA7                 call    __RTC_CheckEsp
.text:00013BAC                 mov     esp, ebp
.text:00013BAE                 pop     ebp
.text:00013BAF                 retn    4
.text:00013BAF ??4?$CRecordVector@H@@QAEAAV0@ABV0@@Z endp
.text:00013BAF
.text:00013BAF ; ---------------------------------------------------------------------------
.text:00013BB2                 align 4
.text:00013BB2 _text           ends
.text:00013BB2
.text:00013BB4 ; ===========================================================================
.text:00013BB4
.text:00013BB4 ; Segment type: Pure code
.text:00013BB4 ; Segment permissions: Read/Execute
.text:00013BB4 _text           segment para public 'CODE' use32
.text:00013BB4                 assume cs:_text
.text:00013BB4                 ;org 13BB4h
.text:00013BB4 ; COMDAT (pick any)
.text:00013BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013BB4
.text:00013BB4 ; =============== S U B R O U T I N E =======================================
.text:00013BB4
.text:00013BB4 ; Attributes: bp-based frame
.text:00013BB4
.text:00013BB4 ; public: unsigned int __thiscall CRecordVector<int>::Add(int)
.text:00013BB4                 public ?Add@?$CRecordVector@H@@QAEIH@Z
.text:00013BB4 ?Add@?$CRecordVector@H@@QAEIH@Z proc near
.text:00013BB4                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1B4p
.text:00013BB4                                         ; CArc::OpenStream2(COpenOptions const &)+2EFp ...
.text:00013BB4
.text:00013BB4 var_8           = dword ptr -8
.text:00013BB4 var_4           = dword ptr -4
.text:00013BB4 arg_0           = dword ptr  8
.text:00013BB4
.text:00013BB4                 push    ebp
.text:00013BB5                 mov     ebp, esp
.text:00013BB7                 sub     esp, 8
.text:00013BBA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00013BC1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013BC8                 mov     [ebp+var_4], ecx
.text:00013BCB                 mov     ecx, [ebp+var_4]
.text:00013BCE                 call    ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition(void)
.text:00013BD3                 mov     eax, [ebp+var_4]
.text:00013BD6                 mov     ecx, [eax+4]
.text:00013BD9                 mov     edx, [ebp+var_4]
.text:00013BDC                 mov     eax, [edx]
.text:00013BDE                 mov     edx, [ebp+arg_0]
.text:00013BE1                 mov     [eax+ecx*4], edx
.text:00013BE4                 mov     eax, [ebp+var_4]
.text:00013BE7                 mov     ecx, [eax+4]
.text:00013BEA                 mov     [ebp+var_8], ecx
.text:00013BED                 mov     edx, [ebp+var_4]
.text:00013BF0                 mov     eax, [edx+4]
.text:00013BF3                 add     eax, 1
.text:00013BF6                 mov     ecx, [ebp+var_4]
.text:00013BF9                 mov     [ecx+4], eax
.text:00013BFC                 mov     eax, [ebp+var_8]
.text:00013BFF                 add     esp, 8
.text:00013C02                 cmp     ebp, esp
.text:00013C04                 call    __RTC_CheckEsp
.text:00013C09                 mov     esp, ebp
.text:00013C0B                 pop     ebp
.text:00013C0C                 retn    4
.text:00013C0C ?Add@?$CRecordVector@H@@QAEIH@Z endp
.text:00013C0C
.text:00013C0C ; ---------------------------------------------------------------------------
.text:00013C0F                 align 10h
.text:00013C0F _text           ends
.text:00013C0F
.text:00013C10 ; ===========================================================================
.text:00013C10
.text:00013C10 ; Segment type: Pure code
.text:00013C10 ; Segment permissions: Read/Execute
.text:00013C10 _text           segment para public 'CODE' use32
.text:00013C10                 assume cs:_text
.text:00013C10                 ;org 13C10h
.text:00013C10 ; COMDAT (pick any)
.text:00013C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013C10
.text:00013C10 ; =============== S U B R O U T I N E =======================================
.text:00013C10
.text:00013C10 ; Attributes: bp-based frame
.text:00013C10
.text:00013C10 ; public: void __thiscall CRecordVector<int>::Insert(unsigned int, int)
.text:00013C10                 public ?Insert@?$CRecordVector@H@@QAEXIH@Z
.text:00013C10 ?Insert@?$CRecordVector@H@@QAEXIH@Z proc near
.text:00013C10                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2CCp
.text:00013C10
.text:00013C10 var_4           = dword ptr -4
.text:00013C10 arg_0           = dword ptr  8
.text:00013C10 arg_4           = dword ptr  0Ch
.text:00013C10
.text:00013C10                 push    ebp
.text:00013C11                 mov     ebp, esp
.text:00013C13                 push    ecx
.text:00013C14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013C1B                 mov     [ebp+var_4], ecx
.text:00013C1E                 mov     ecx, [ebp+var_4]
.text:00013C21                 call    ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition(void)
.text:00013C26                 mov     eax, [ebp+arg_0]
.text:00013C29                 push    eax
.text:00013C2A                 mov     ecx, [ebp+arg_0]
.text:00013C2D                 add     ecx, 1
.text:00013C30                 push    ecx
.text:00013C31                 mov     ecx, [ebp+var_4]
.text:00013C34                 call    ?MoveItems@?$CRecordVector@H@@AAEXII@Z ; CRecordVector<int>::MoveItems(uint,uint)
.text:00013C39                 mov     edx, [ebp+var_4]
.text:00013C3C                 mov     eax, [edx]
.text:00013C3E                 mov     ecx, [ebp+arg_0]
.text:00013C41                 mov     edx, [ebp+arg_4]
.text:00013C44                 mov     [eax+ecx*4], edx
.text:00013C47                 mov     eax, [ebp+var_4]
.text:00013C4A                 mov     ecx, [eax+4]
.text:00013C4D                 add     ecx, 1
.text:00013C50                 mov     edx, [ebp+var_4]
.text:00013C53                 mov     [edx+4], ecx
.text:00013C56                 add     esp, 4
.text:00013C59                 cmp     ebp, esp
.text:00013C5B                 call    __RTC_CheckEsp
.text:00013C60                 mov     esp, ebp
.text:00013C62                 pop     ebp
.text:00013C63                 retn    8
.text:00013C63 ?Insert@?$CRecordVector@H@@QAEXIH@Z endp
.text:00013C63
.text:00013C63 ; ---------------------------------------------------------------------------
.text:00013C66                 align 4
.text:00013C66 _text           ends
.text:00013C66
.text:00013C68 ; ===========================================================================
.text:00013C68
.text:00013C68 ; Segment type: Pure code
.text:00013C68 ; Segment permissions: Read/Execute
.text:00013C68 _text           segment para public 'CODE' use32
.text:00013C68                 assume cs:_text
.text:00013C68                 ;org 13C68h
.text:00013C68 ; COMDAT (pick any)
.text:00013C68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013C68
.text:00013C68 ; =============== S U B R O U T I N E =======================================
.text:00013C68
.text:00013C68 ; Attributes: bp-based frame
.text:00013C68
.text:00013C68 ; public: int & __thiscall CRecordVector<int>::operator[](unsigned int)
.text:00013C68                 public ??A?$CRecordVector@H@@QAEAAHI@Z
.text:00013C68 ??A?$CRecordVector@H@@QAEAAHI@Z proc near
.text:00013C68                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+5F1p
.text:00013C68                                         ; CArc::OpenStream2(COpenOptions const &)+60Ep ...
.text:00013C68
.text:00013C68 var_4           = dword ptr -4
.text:00013C68 arg_0           = dword ptr  8
.text:00013C68
.text:00013C68                 push    ebp
.text:00013C69                 mov     ebp, esp
.text:00013C6B                 push    ecx
.text:00013C6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013C73                 mov     [ebp+var_4], ecx
.text:00013C76                 mov     eax, [ebp+var_4]
.text:00013C79                 mov     ecx, [eax]
.text:00013C7B                 mov     edx, [ebp+arg_0]
.text:00013C7E                 lea     eax, [ecx+edx*4]
.text:00013C81                 mov     esp, ebp
.text:00013C83                 pop     ebp
.text:00013C84                 retn    4
.text:00013C84 ??A?$CRecordVector@H@@QAEAAHI@Z endp
.text:00013C84
.text:00013C84 ; ---------------------------------------------------------------------------
.text:00013C87                 align 4
.text:00013C87 _text           ends
.text:00013C87
.text:00013C88 ; ===========================================================================
.text:00013C88
.text:00013C88 ; Segment type: Pure code
.text:00013C88 ; Segment permissions: Read/Execute
.text:00013C88 _text           segment para public 'CODE' use32
.text:00013C88                 assume cs:_text
.text:00013C88                 ;org 13C88h
.text:00013C88 ; COMDAT (pick any)
.text:00013C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013C88
.text:00013C88 ; =============== S U B R O U T I N E =======================================
.text:00013C88
.text:00013C88 ; Attributes: bp-based frame
.text:00013C88
.text:00013C88 ; public: int __thiscall CRecordVector<int>::FindInSorted(int)const
.text:00013C88                 public ?FindInSorted@?$CRecordVector@H@@QBEHH@Z
.text:00013C88 ?FindInSorted@?$CRecordVector@H@@QBEHH@Z proc near
.text:00013C88                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+26Ep
.text:00013C88
.text:00013C88 var_4           = dword ptr -4
.text:00013C88 arg_0           = dword ptr  8
.text:00013C88
.text:00013C88                 push    ebp
.text:00013C89                 mov     ebp, esp
.text:00013C8B                 push    ecx
.text:00013C8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013C93                 mov     [ebp+var_4], ecx
.text:00013C96                 mov     eax, [ebp+var_4]
.text:00013C99                 mov     ecx, [eax+4]
.text:00013C9C                 push    ecx
.text:00013C9D                 push    0
.text:00013C9F                 mov     edx, [ebp+arg_0]
.text:00013CA2                 push    edx
.text:00013CA3                 mov     ecx, [ebp+var_4]
.text:00013CA6                 call    ?FindInSorted@?$CRecordVector@H@@QBEHHII@Z ; CRecordVector<int>::FindInSorted(int,uint,uint)
.text:00013CAB                 add     esp, 4
.text:00013CAE                 cmp     ebp, esp
.text:00013CB0                 call    __RTC_CheckEsp
.text:00013CB5                 mov     esp, ebp
.text:00013CB7                 pop     ebp
.text:00013CB8                 retn    4
.text:00013CB8 ?FindInSorted@?$CRecordVector@H@@QBEHH@Z endp
.text:00013CB8
.text:00013CB8 ; ---------------------------------------------------------------------------
.text:00013CBB                 align 4
.text:00013CBB _text           ends
.text:00013CBB
.text:00013CBC ; ===========================================================================
.text:00013CBC
.text:00013CBC ; Segment type: Pure code
.text:00013CBC ; Segment permissions: Read/Execute
.text:00013CBC _text           segment para public 'CODE' use32
.text:00013CBC                 assume cs:_text
.text:00013CBC                 ;org 13CBCh
.text:00013CBC ; COMDAT (pick any)
.text:00013CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013CBC
.text:00013CBC ; =============== S U B R O U T I N E =======================================
.text:00013CBC
.text:00013CBC ; Attributes: bp-based frame
.text:00013CBC
.text:00013CBC ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00013CBC                 public ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00013CBC ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00013CBC                                         ; CODE XREF: CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset(void)+76p
.text:00013CBC
.text:00013CBC var_4           = dword ptr -4
.text:00013CBC
.text:00013CBC                 push    ebp
.text:00013CBD                 mov     ebp, esp
.text:00013CBF                 push    ecx
.text:00013CC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013CC7                 mov     [ebp+var_4], ecx
.text:00013CCA                 mov     eax, [ebp+var_4]
.text:00013CCD                 mov     dword ptr [eax], 0
.text:00013CD3                 mov     eax, [ebp+var_4]
.text:00013CD6                 mov     esp, ebp
.text:00013CD8                 pop     ebp
.text:00013CD9                 retn
.text:00013CD9 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:00013CD9
.text:00013CD9 ; ---------------------------------------------------------------------------
.text:00013CDA                 align 4
.text:00013CDA _text           ends
.text:00013CDA
.text:00013CDC ; ===========================================================================
.text:00013CDC
.text:00013CDC ; Segment type: Pure code
.text:00013CDC ; Segment permissions: Read/Execute
.text:00013CDC _text           segment para public 'CODE' use32
.text:00013CDC                 assume cs:_text
.text:00013CDC                 ;org 13CDCh
.text:00013CDC ; COMDAT (pick any)
.text:00013CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013CDC
.text:00013CDC ; =============== S U B R O U T I N E =======================================
.text:00013CDC
.text:00013CDC ; Attributes: bp-based frame
.text:00013CDC
.text:00013CDC ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::~CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00013CDC                 public ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00013CDC ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00013CDC                                         ; CODE XREF: CArchiveOpenCallback_Offset::~CArchiveOpenCallback_Offset(void)+3Ap
.text:00013CDC
.text:00013CDC var_4           = dword ptr -4
.text:00013CDC
.text:00013CDC                 push    ebp
.text:00013CDD                 mov     ebp, esp
.text:00013CDF                 push    ecx
.text:00013CE0                 push    esi
.text:00013CE1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013CE8                 mov     [ebp+var_4], ecx
.text:00013CEB                 mov     eax, [ebp+var_4]
.text:00013CEE                 cmp     dword ptr [eax], 0
.text:00013CF1                 jz      short loc_13D0E
.text:00013CF3                 mov     ecx, [ebp+var_4]
.text:00013CF6                 mov     edx, [ecx]
.text:00013CF8                 mov     eax, [ebp+var_4]
.text:00013CFB                 mov     ecx, [eax]
.text:00013CFD                 mov     edx, [edx]
.text:00013CFF                 mov     esi, esp
.text:00013D01                 push    ecx
.text:00013D02                 mov     eax, [edx+8]
.text:00013D05                 call    eax
.text:00013D07                 cmp     esi, esp
.text:00013D09                 call    __RTC_CheckEsp
.text:00013D0E
.text:00013D0E loc_13D0E:                              ; CODE XREF: CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)+15j
.text:00013D0E                 pop     esi
.text:00013D0F                 add     esp, 4
.text:00013D12                 cmp     ebp, esp
.text:00013D14                 call    __RTC_CheckEsp
.text:00013D19                 mov     esp, ebp
.text:00013D1B                 pop     ebp
.text:00013D1C                 retn
.text:00013D1C ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:00013D1C
.text:00013D1C ; ---------------------------------------------------------------------------
.text:00013D1D                 align 10h
.text:00013D1D _text           ends
.text:00013D1D
.text:00013D20 ; ===========================================================================
.text:00013D20
.text:00013D20 ; Segment type: Pure code
.text:00013D20 ; Segment permissions: Read/Execute
.text:00013D20 _text           segment para public 'CODE' use32
.text:00013D20                 assume cs:_text
.text:00013D20                 ;org 13D20h
.text:00013D20 ; COMDAT (pick any)
.text:00013D20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013D20
.text:00013D20 ; =============== S U B R O U T I N E =======================================
.text:00013D20
.text:00013D20 ; Attributes: bp-based frame
.text:00013D20
.text:00013D20 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator struct ICryptoGetTextPassword *(void)const
.text:00013D20                 public ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:00013D20 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:00013D20                                         ; CODE XREF: CArchiveOpenCallback_Offset::CryptoGetTextPassword(wchar_t * *)+4Dp
.text:00013D20
.text:00013D20 var_4           = dword ptr -4
.text:00013D20
.text:00013D20                 push    ebp
.text:00013D21                 mov     ebp, esp
.text:00013D23                 push    ecx
.text:00013D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013D2B                 mov     [ebp+var_4], ecx
.text:00013D2E                 mov     eax, [ebp+var_4]
.text:00013D31                 mov     eax, [eax]
.text:00013D33                 mov     esp, ebp
.text:00013D35                 pop     ebp
.text:00013D36                 retn
.text:00013D36 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:00013D36
.text:00013D36 ; ---------------------------------------------------------------------------
.text:00013D37                 align 4
.text:00013D37 _text           ends
.text:00013D37
.text:00013D38 ; ===========================================================================
.text:00013D38
.text:00013D38 ; Segment type: Pure code
.text:00013D38 ; Segment permissions: Read/Execute
.text:00013D38 _text           segment para public 'CODE' use32
.text:00013D38                 assume cs:_text
.text:00013D38                 ;org 13D38h
.text:00013D38 ; COMDAT (pick any)
.text:00013D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013D38
.text:00013D38 ; =============== S U B R O U T I N E =======================================
.text:00013D38
.text:00013D38 ; Attributes: bp-based frame
.text:00013D38
.text:00013D38 ; public: struct ICryptoGetTextPassword * * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator&(void)
.text:00013D38                 public ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
.text:00013D38 ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ proc near
.text:00013D38                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2E28p
.text:00013D38
.text:00013D38 var_4           = dword ptr -4
.text:00013D38
.text:00013D38                 push    ebp
.text:00013D39                 mov     ebp, esp
.text:00013D3B                 push    ecx
.text:00013D3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013D43                 mov     [ebp+var_4], ecx
.text:00013D46                 mov     eax, [ebp+var_4]
.text:00013D49                 mov     esp, ebp
.text:00013D4B                 pop     ebp
.text:00013D4C                 retn
.text:00013D4C ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ endp
.text:00013D4C
.text:00013D4C ; ---------------------------------------------------------------------------
.text:00013D4D                 align 10h
.text:00013D4D _text           ends
.text:00013D4D
.text:00013D50 ; ===========================================================================
.text:00013D50
.text:00013D50 ; Segment type: Pure code
.text:00013D50 ; Segment permissions: Read/Execute
.text:00013D50 _text           segment para public 'CODE' use32
.text:00013D50                 assume cs:_text
.text:00013D50                 ;org 13D50h
.text:00013D50 ; COMDAT (pick any)
.text:00013D50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013D50
.text:00013D50 ; =============== S U B R O U T I N E =======================================
.text:00013D50
.text:00013D50 ; Attributes: bp-based frame
.text:00013D50
.text:00013D50 ; public: struct ICryptoGetTextPassword * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator->(void)const
.text:00013D50                 public ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:00013D50 ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:00013D50                                         ; CODE XREF: CArchiveOpenCallback_Offset::CryptoGetTextPassword(wchar_t * *)+61p
.text:00013D50
.text:00013D50 var_4           = dword ptr -4
.text:00013D50
.text:00013D50                 push    ebp
.text:00013D51                 mov     ebp, esp
.text:00013D53                 push    ecx
.text:00013D54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013D5B                 mov     [ebp+var_4], ecx
.text:00013D5E                 mov     eax, [ebp+var_4]
.text:00013D61                 mov     eax, [eax]
.text:00013D63                 mov     esp, ebp
.text:00013D65                 pop     ebp
.text:00013D66                 retn
.text:00013D66 ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:00013D66
.text:00013D66 ; ---------------------------------------------------------------------------
.text:00013D67                 align 4
.text:00013D67 _text           ends
.text:00013D67
.text:00013D68 ; ===========================================================================
.text:00013D68
.text:00013D68 ; Segment type: Pure code
.text:00013D68 ; Segment permissions: Read/Execute
.text:00013D68 _text           segment para public 'CODE' use32
.text:00013D68                 assume cs:_text
.text:00013D68                 ;org 13D68h
.text:00013D68 ; COMDAT (pick any)
.text:00013D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013D68
.text:00013D68 ; =============== S U B R O U T I N E =======================================
.text:00013D68
.text:00013D68 ; Attributes: bp-based frame
.text:00013D68
.text:00013D68 ; public: __thiscall CMyComPtr<struct IArchiveAllowTail>::CMyComPtr<struct IArchiveAllowTail>(void)
.text:00013D68                 public ??0?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ
.text:00013D68 ??0?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ proc near
.text:00013D68                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+A5p
.text:00013D68
.text:00013D68 var_4           = dword ptr -4
.text:00013D68
.text:00013D68                 push    ebp
.text:00013D69                 mov     ebp, esp
.text:00013D6B                 push    ecx
.text:00013D6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013D73                 mov     [ebp+var_4], ecx
.text:00013D76                 mov     eax, [ebp+var_4]
.text:00013D79                 mov     dword ptr [eax], 0
.text:00013D7F                 mov     eax, [ebp+var_4]
.text:00013D82                 mov     esp, ebp
.text:00013D84                 pop     ebp
.text:00013D85                 retn
.text:00013D85 ??0?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ endp
.text:00013D85
.text:00013D85 ; ---------------------------------------------------------------------------
.text:00013D86                 align 4
.text:00013D86 _text           ends
.text:00013D86
.text:00013D88 ; ===========================================================================
.text:00013D88
.text:00013D88 ; Segment type: Pure code
.text:00013D88 ; Segment permissions: Read/Execute
.text:00013D88 _text           segment para public 'CODE' use32
.text:00013D88                 assume cs:_text
.text:00013D88                 ;org 13D88h
.text:00013D88 ; COMDAT (pick any)
.text:00013D88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013D88
.text:00013D88 ; =============== S U B R O U T I N E =======================================
.text:00013D88
.text:00013D88 ; Attributes: bp-based frame
.text:00013D88
.text:00013D88 ; public: __thiscall CMyComPtr<struct IArchiveAllowTail>::~CMyComPtr<struct IArchiveAllowTail>(void)
.text:00013D88                 public ??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ
.text:00013D88 ??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ proc near
.text:00013D88                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+107p
.text:00013D88                                         ; __unwindfunclet$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z$0+3j
.text:00013D88
.text:00013D88 var_4           = dword ptr -4
.text:00013D88
.text:00013D88                 push    ebp
.text:00013D89                 mov     ebp, esp
.text:00013D8B                 push    ecx
.text:00013D8C                 push    esi
.text:00013D8D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013D94                 mov     [ebp+var_4], ecx
.text:00013D97                 mov     eax, [ebp+var_4]
.text:00013D9A                 cmp     dword ptr [eax], 0
.text:00013D9D                 jz      short loc_13DBA
.text:00013D9F                 mov     ecx, [ebp+var_4]
.text:00013DA2                 mov     edx, [ecx]
.text:00013DA4                 mov     eax, [ebp+var_4]
.text:00013DA7                 mov     ecx, [eax]
.text:00013DA9                 mov     edx, [edx]
.text:00013DAB                 mov     esi, esp
.text:00013DAD                 push    ecx
.text:00013DAE                 mov     eax, [edx+8]
.text:00013DB1                 call    eax
.text:00013DB3                 cmp     esi, esp
.text:00013DB5                 call    __RTC_CheckEsp
.text:00013DBA
.text:00013DBA loc_13DBA:                              ; CODE XREF: CMyComPtr<IArchiveAllowTail>::~CMyComPtr<IArchiveAllowTail>(void)+15j
.text:00013DBA                 pop     esi
.text:00013DBB                 add     esp, 4
.text:00013DBE                 cmp     ebp, esp
.text:00013DC0                 call    __RTC_CheckEsp
.text:00013DC5                 mov     esp, ebp
.text:00013DC7                 pop     ebp
.text:00013DC8                 retn
.text:00013DC8 ??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ endp
.text:00013DC8
.text:00013DC8 ; ---------------------------------------------------------------------------
.text:00013DC9                 align 4
.text:00013DC9 _text           ends
.text:00013DC9
.text:00013DCC ; ===========================================================================
.text:00013DCC
.text:00013DCC ; Segment type: Pure code
.text:00013DCC ; Segment permissions: Read/Execute
.text:00013DCC _text           segment para public 'CODE' use32
.text:00013DCC                 assume cs:_text
.text:00013DCC                 ;org 13DCCh
.text:00013DCC ; COMDAT (pick any)
.text:00013DCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013DCC
.text:00013DCC ; =============== S U B R O U T I N E =======================================
.text:00013DCC
.text:00013DCC ; Attributes: bp-based frame
.text:00013DCC
.text:00013DCC ; public: __thiscall CMyComPtr<struct IArchiveAllowTail>::operator struct IArchiveAllowTail *(void)const
.text:00013DCC                 public ??B?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ
.text:00013DCC ??B?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ proc near
.text:00013DCC                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+CAp
.text:00013DCC
.text:00013DCC var_4           = dword ptr -4
.text:00013DCC
.text:00013DCC                 push    ebp
.text:00013DCD                 mov     ebp, esp
.text:00013DCF                 push    ecx
.text:00013DD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013DD7                 mov     [ebp+var_4], ecx
.text:00013DDA                 mov     eax, [ebp+var_4]
.text:00013DDD                 mov     eax, [eax]
.text:00013DDF                 mov     esp, ebp
.text:00013DE1                 pop     ebp
.text:00013DE2                 retn
.text:00013DE2 ??B?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ endp
.text:00013DE2
.text:00013DE2 ; ---------------------------------------------------------------------------
.text:00013DE3                 align 4
.text:00013DE3 _text           ends
.text:00013DE3
.text:00013DE4 ; ===========================================================================
.text:00013DE4
.text:00013DE4 ; Segment type: Pure code
.text:00013DE4 ; Segment permissions: Read/Execute
.text:00013DE4 _text           segment para public 'CODE' use32
.text:00013DE4                 assume cs:_text
.text:00013DE4                 ;org 13DE4h
.text:00013DE4 ; COMDAT (pick any)
.text:00013DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013DE4
.text:00013DE4 ; =============== S U B R O U T I N E =======================================
.text:00013DE4
.text:00013DE4 ; Attributes: bp-based frame
.text:00013DE4
.text:00013DE4 ; public: struct IArchiveAllowTail * * __thiscall CMyComPtr<struct IArchiveAllowTail>::operator&(void)
.text:00013DE4                 public ??I?$CMyComPtr@UIArchiveAllowTail@@@@QAEPAPAUIArchiveAllowTail@@XZ
.text:00013DE4 ??I?$CMyComPtr@UIArchiveAllowTail@@@@QAEPAPAUIArchiveAllowTail@@XZ proc near
.text:00013DE4                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+B4p
.text:00013DE4
.text:00013DE4 var_4           = dword ptr -4
.text:00013DE4
.text:00013DE4                 push    ebp
.text:00013DE5                 mov     ebp, esp
.text:00013DE7                 push    ecx
.text:00013DE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013DEF                 mov     [ebp+var_4], ecx
.text:00013DF2                 mov     eax, [ebp+var_4]
.text:00013DF5                 mov     esp, ebp
.text:00013DF7                 pop     ebp
.text:00013DF8                 retn
.text:00013DF8 ??I?$CMyComPtr@UIArchiveAllowTail@@@@QAEPAPAUIArchiveAllowTail@@XZ endp
.text:00013DF8
.text:00013DF8 ; ---------------------------------------------------------------------------
.text:00013DF9                 align 4
.text:00013DF9 _text           ends
.text:00013DF9
.text:00013DFC ; ===========================================================================
.text:00013DFC
.text:00013DFC ; Segment type: Pure code
.text:00013DFC ; Segment permissions: Read/Execute
.text:00013DFC _text           segment para public 'CODE' use32
.text:00013DFC                 assume cs:_text
.text:00013DFC                 ;org 13DFCh
.text:00013DFC ; COMDAT (pick any)
.text:00013DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013DFC
.text:00013DFC ; =============== S U B R O U T I N E =======================================
.text:00013DFC
.text:00013DFC ; Attributes: bp-based frame
.text:00013DFC
.text:00013DFC ; public: struct IArchiveAllowTail * __thiscall CMyComPtr<struct IArchiveAllowTail>::operator->(void)const
.text:00013DFC                 public ??C?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ
.text:00013DFC ??C?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ proc near
.text:00013DFC                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+D6p
.text:00013DFC
.text:00013DFC var_4           = dword ptr -4
.text:00013DFC
.text:00013DFC                 push    ebp
.text:00013DFD                 mov     ebp, esp
.text:00013DFF                 push    ecx
.text:00013E00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013E07                 mov     [ebp+var_4], ecx
.text:00013E0A                 mov     eax, [ebp+var_4]
.text:00013E0D                 mov     eax, [eax]
.text:00013E0F                 mov     esp, ebp
.text:00013E11                 pop     ebp
.text:00013E12                 retn
.text:00013E12 ??C?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ endp
.text:00013E12
.text:00013E12 ; ---------------------------------------------------------------------------
.text:00013E13                 align 4
.text:00013E13 _text           ends
.text:00013E13
.text:00013E14 ; ===========================================================================
.text:00013E14
.text:00013E14 ; Segment type: Pure code
.text:00013E14 ; Segment permissions: Read/Execute
.text:00013E14 _text           segment para public 'CODE' use32
.text:00013E14                 assume cs:_text
.text:00013E14                 ;org 13E14h
.text:00013E14 ; COMDAT (pick any)
.text:00013E14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013E14
.text:00013E14 ; =============== S U B R O U T I N E =======================================
.text:00013E14
.text:00013E14 ; Attributes: bp-based frame
.text:00013E14
.text:00013E14 ; public: __thiscall CObjArray<bool>::CObjArray<bool>(unsigned int)
.text:00013E14                 public ??0?$CObjArray@_N@@QAE@I@Z
.text:00013E14 ??0?$CObjArray@_N@@QAE@I@Z proc near    ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+105p
.text:00013E14                                         ; CArc::OpenStream2(COpenOptions const &)+AB5p ...
.text:00013E14
.text:00013E14 var_8           = dword ptr -8
.text:00013E14 var_4           = dword ptr -4
.text:00013E14 arg_0           = dword ptr  8
.text:00013E14
.text:00013E14                 push    ebp
.text:00013E15                 mov     ebp, esp
.text:00013E17                 sub     esp, 8
.text:00013E1A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00013E21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013E28                 mov     [ebp+var_4], ecx
.text:00013E2B                 mov     eax, [ebp+var_4]
.text:00013E2E                 mov     dword ptr [eax], 0
.text:00013E34                 cmp     [ebp+arg_0], 0
.text:00013E38                 jz      short loc_13E51
.text:00013E3A                 mov     ecx, [ebp+arg_0]
.text:00013E3D                 push    ecx             ; unsigned int
.text:00013E3E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00013E43                 add     esp, 4
.text:00013E46                 mov     [ebp+var_8], eax
.text:00013E49                 mov     edx, [ebp+var_4]
.text:00013E4C                 mov     eax, [ebp+var_8]
.text:00013E4F                 mov     [edx], eax
.text:00013E51
.text:00013E51 loc_13E51:                              ; CODE XREF: CObjArray<bool>::CObjArray<bool>(uint)+24j
.text:00013E51                 mov     eax, [ebp+var_4]
.text:00013E54                 add     esp, 8
.text:00013E57                 cmp     ebp, esp
.text:00013E59                 call    __RTC_CheckEsp
.text:00013E5E                 mov     esp, ebp
.text:00013E60                 pop     ebp
.text:00013E61                 retn    4
.text:00013E61 ??0?$CObjArray@_N@@QAE@I@Z endp
.text:00013E61
.text:00013E61 _text           ends
.text:00013E61
.text:00013E64 ; ===========================================================================
.text:00013E64
.text:00013E64 ; Segment type: Pure code
.text:00013E64 ; Segment permissions: Read/Execute
.text:00013E64 _text           segment para public 'CODE' use32
.text:00013E64                 assume cs:_text
.text:00013E64                 ;org 13E64h
.text:00013E64 ; COMDAT (pick any)
.text:00013E64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013E64
.text:00013E64 ; =============== S U B R O U T I N E =======================================
.text:00013E64
.text:00013E64 ; Attributes: bp-based frame
.text:00013E64
.text:00013E64 ; public: __thiscall CObjArray<bool>::~CObjArray<bool>(void)
.text:00013E64                 public ??1?$CObjArray@_N@@QAE@XZ
.text:00013E64 ??1?$CObjArray@_N@@QAE@XZ proc near     ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+319p
.text:00013E64                                         ; CArc::OpenStream2(COpenOptions const &)+3BFp ...
.text:00013E64
.text:00013E64 var_8           = dword ptr -8
.text:00013E64 var_4           = dword ptr -4
.text:00013E64
.text:00013E64                 push    ebp
.text:00013E65                 mov     ebp, esp
.text:00013E67                 sub     esp, 8
.text:00013E6A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00013E71                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013E78                 mov     [ebp+var_4], ecx
.text:00013E7B                 mov     eax, [ebp+var_4]
.text:00013E7E                 mov     ecx, [eax]
.text:00013E80                 mov     [ebp+var_8], ecx
.text:00013E83                 mov     edx, [ebp+var_8]
.text:00013E86                 push    edx             ; void *
.text:00013E87                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00013E8C                 add     esp, 4
.text:00013E8F                 add     esp, 8
.text:00013E92                 cmp     ebp, esp
.text:00013E94                 call    __RTC_CheckEsp
.text:00013E99                 mov     esp, ebp
.text:00013E9B                 pop     ebp
.text:00013E9C                 retn
.text:00013E9C ??1?$CObjArray@_N@@QAE@XZ endp
.text:00013E9C
.text:00013E9C ; ---------------------------------------------------------------------------
.text:00013E9D                 align 10h
.text:00013E9D _text           ends
.text:00013E9D
.text:00013EA0 ; ===========================================================================
.text:00013EA0
.text:00013EA0 ; Segment type: Pure code
.text:00013EA0 ; Segment permissions: Read/Execute
.text:00013EA0 _text           segment para public 'CODE' use32
.text:00013EA0                 assume cs:_text
.text:00013EA0                 ;org 13EA0h
.text:00013EA0 ; COMDAT (pick any)
.text:00013EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013EA0
.text:00013EA0 ; =============== S U B R O U T I N E =======================================
.text:00013EA0
.text:00013EA0 ; Attributes: bp-based frame
.text:00013EA0
.text:00013EA0 ; public: __thiscall CObjArray<bool>::operator bool *(void)
.text:00013EA0                 public ??B?$CObjArray@_N@@QAEPA_NXZ
.text:00013EA0 ??B?$CObjArray@_N@@QAEPA_NXZ proc near  ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+135p
.text:00013EA0                                         ; CArc::OpenStream2(COpenOptions const &)+1C3p ...
.text:00013EA0
.text:00013EA0 var_4           = dword ptr -4
.text:00013EA0
.text:00013EA0                 push    ebp
.text:00013EA1                 mov     ebp, esp
.text:00013EA3                 push    ecx
.text:00013EA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013EAB                 mov     [ebp+var_4], ecx
.text:00013EAE                 mov     eax, [ebp+var_4]
.text:00013EB1                 mov     eax, [eax]
.text:00013EB3                 mov     esp, ebp
.text:00013EB5                 pop     ebp
.text:00013EB6                 retn
.text:00013EB6 ??B?$CObjArray@_N@@QAEPA_NXZ endp
.text:00013EB6
.text:00013EB6 ; ---------------------------------------------------------------------------
.text:00013EB7                 align 4
.text:00013EB7 _text           ends
.text:00013EB7
.text:00013EB8 ; ===========================================================================
.text:00013EB8
.text:00013EB8 ; Segment type: Pure code
.text:00013EB8 ; Segment permissions: Read/Execute
.text:00013EB8 _text           segment para public 'CODE' use32
.text:00013EB8                 assume cs:_text
.text:00013EB8                 ;org 13EB8h
.text:00013EB8 ; COMDAT (pick any)
.text:00013EB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013EB8
.text:00013EB8 ; =============== S U B R O U T I N E =======================================
.text:00013EB8
.text:00013EB8 ; Attributes: bp-based frame
.text:00013EB8
.text:00013EB8 ; public: __thiscall CMyComPtr<struct IArchiveOpenSeq>::CMyComPtr<struct IArchiveOpenSeq>(void)
.text:00013EB8                 public ??0?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ
.text:00013EB8 ??0?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ proc near
.text:00013EB8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+E83p
.text:00013EB8
.text:00013EB8 var_4           = dword ptr -4
.text:00013EB8
.text:00013EB8                 push    ebp
.text:00013EB9                 mov     ebp, esp
.text:00013EBB                 push    ecx
.text:00013EBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013EC3                 mov     [ebp+var_4], ecx
.text:00013EC6                 mov     eax, [ebp+var_4]
.text:00013EC9                 mov     dword ptr [eax], 0
.text:00013ECF                 mov     eax, [ebp+var_4]
.text:00013ED2                 mov     esp, ebp
.text:00013ED4                 pop     ebp
.text:00013ED5                 retn
.text:00013ED5 ??0?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ endp
.text:00013ED5
.text:00013ED5 ; ---------------------------------------------------------------------------
.text:00013ED6                 align 4
.text:00013ED6 _text           ends
.text:00013ED6
.text:00013ED8 ; ===========================================================================
.text:00013ED8
.text:00013ED8 ; Segment type: Pure code
.text:00013ED8 ; Segment permissions: Read/Execute
.text:00013ED8 _text           segment para public 'CODE' use32
.text:00013ED8                 assume cs:_text
.text:00013ED8                 ;org 13ED8h
.text:00013ED8 ; COMDAT (pick any)
.text:00013ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013ED8
.text:00013ED8 ; =============== S U B R O U T I N E =======================================
.text:00013ED8
.text:00013ED8 ; Attributes: bp-based frame
.text:00013ED8
.text:00013ED8 ; public: __thiscall CMyComPtr<struct IArchiveOpenSeq>::~CMyComPtr<struct IArchiveOpenSeq>(void)
.text:00013ED8                 public ??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ
.text:00013ED8 ??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ proc near
.text:00013ED8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+ECEp
.text:00013ED8                                         ; CArc::OpenStream2(COpenOptions const &)+F74p ...
.text:00013ED8
.text:00013ED8 var_4           = dword ptr -4
.text:00013ED8
.text:00013ED8                 push    ebp
.text:00013ED9                 mov     ebp, esp
.text:00013EDB                 push    ecx
.text:00013EDC                 push    esi
.text:00013EDD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013EE4                 mov     [ebp+var_4], ecx
.text:00013EE7                 mov     eax, [ebp+var_4]
.text:00013EEA                 cmp     dword ptr [eax], 0
.text:00013EED                 jz      short loc_13F0A
.text:00013EEF                 mov     ecx, [ebp+var_4]
.text:00013EF2                 mov     edx, [ecx]
.text:00013EF4                 mov     eax, [ebp+var_4]
.text:00013EF7                 mov     ecx, [eax]
.text:00013EF9                 mov     edx, [edx]
.text:00013EFB                 mov     esi, esp
.text:00013EFD                 push    ecx
.text:00013EFE                 mov     eax, [edx+8]
.text:00013F01                 call    eax
.text:00013F03                 cmp     esi, esp
.text:00013F05                 call    __RTC_CheckEsp
.text:00013F0A
.text:00013F0A loc_13F0A:                              ; CODE XREF: CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>(void)+15j
.text:00013F0A                 pop     esi
.text:00013F0B                 add     esp, 4
.text:00013F0E                 cmp     ebp, esp
.text:00013F10                 call    __RTC_CheckEsp
.text:00013F15                 mov     esp, ebp
.text:00013F17                 pop     ebp
.text:00013F18                 retn
.text:00013F18 ??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ endp
.text:00013F18
.text:00013F18 ; ---------------------------------------------------------------------------
.text:00013F19                 align 4
.text:00013F19 _text           ends
.text:00013F19
.text:00013F1C ; ===========================================================================
.text:00013F1C
.text:00013F1C ; Segment type: Pure code
.text:00013F1C ; Segment permissions: Read/Execute
.text:00013F1C _text           segment para public 'CODE' use32
.text:00013F1C                 assume cs:_text
.text:00013F1C                 ;org 13F1Ch
.text:00013F1C ; COMDAT (pick any)
.text:00013F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013F1C
.text:00013F1C ; =============== S U B R O U T I N E =======================================
.text:00013F1C
.text:00013F1C ; Attributes: bp-based frame
.text:00013F1C
.text:00013F1C ; public: struct IArchiveOpenSeq * * __thiscall CMyComPtr<struct IArchiveOpenSeq>::operator&(void)
.text:00013F1C                 public ??I?$CMyComPtr@UIArchiveOpenSeq@@@@QAEPAPAUIArchiveOpenSeq@@XZ
.text:00013F1C ??I?$CMyComPtr@UIArchiveOpenSeq@@@@QAEPAPAUIArchiveOpenSeq@@XZ proc near
.text:00013F1C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+E92p
.text:00013F1C
.text:00013F1C var_4           = dword ptr -4
.text:00013F1C
.text:00013F1C                 push    ebp
.text:00013F1D                 mov     ebp, esp
.text:00013F1F                 push    ecx
.text:00013F20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013F27                 mov     [ebp+var_4], ecx
.text:00013F2A                 mov     eax, [ebp+var_4]
.text:00013F2D                 mov     esp, ebp
.text:00013F2F                 pop     ebp
.text:00013F30                 retn
.text:00013F30 ??I?$CMyComPtr@UIArchiveOpenSeq@@@@QAEPAPAUIArchiveOpenSeq@@XZ endp
.text:00013F30
.text:00013F30 ; ---------------------------------------------------------------------------
.text:00013F31                 align 4
.text:00013F31 _text           ends
.text:00013F31
.text:00013F34 ; ===========================================================================
.text:00013F34
.text:00013F34 ; Segment type: Pure code
.text:00013F34 ; Segment permissions: Read/Execute
.text:00013F34 _text           segment para public 'CODE' use32
.text:00013F34                 assume cs:_text
.text:00013F34                 ;org 13F34h
.text:00013F34 ; COMDAT (pick any)
.text:00013F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013F34
.text:00013F34 ; =============== S U B R O U T I N E =======================================
.text:00013F34
.text:00013F34 ; Attributes: bp-based frame
.text:00013F34
.text:00013F34 ; public: struct IArchiveOpenSeq * __thiscall CMyComPtr<struct IArchiveOpenSeq>::operator->(void)const
.text:00013F34                 public ??C?$CMyComPtr@UIArchiveOpenSeq@@@@QBEPAUIArchiveOpenSeq@@XZ
.text:00013F34 ??C?$CMyComPtr@UIArchiveOpenSeq@@@@QBEPAUIArchiveOpenSeq@@XZ proc near
.text:00013F34                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+F35p
.text:00013F34
.text:00013F34 var_4           = dword ptr -4
.text:00013F34
.text:00013F34                 push    ebp
.text:00013F35                 mov     ebp, esp
.text:00013F37                 push    ecx
.text:00013F38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013F3F                 mov     [ebp+var_4], ecx
.text:00013F42                 mov     eax, [ebp+var_4]
.text:00013F45                 mov     eax, [eax]
.text:00013F47                 mov     esp, ebp
.text:00013F49                 pop     ebp
.text:00013F4A                 retn
.text:00013F4A ??C?$CMyComPtr@UIArchiveOpenSeq@@@@QBEPAUIArchiveOpenSeq@@XZ endp
.text:00013F4A
.text:00013F4A ; ---------------------------------------------------------------------------
.text:00013F4B                 align 4
.text:00013F4B _text           ends
.text:00013F4B
.text:00013F4C ; ===========================================================================
.text:00013F4C
.text:00013F4C ; Segment type: Pure code
.text:00013F4C ; Segment permissions: Read/Execute
.text:00013F4C _text           segment para public 'CODE' use32
.text:00013F4C                 assume cs:_text
.text:00013F4C                 ;org 13F4Ch
.text:00013F4C ; COMDAT (pick any)
.text:00013F4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013F4C
.text:00013F4C ; =============== S U B R O U T I N E =======================================
.text:00013F4C
.text:00013F4C ; Attributes: bp-based frame
.text:00013F4C
.text:00013F4C ; public: bool __thiscall CMyComPtr<struct IArchiveOpenSeq>::operator!(void)const
.text:00013F4C                 public ??7?$CMyComPtr@UIArchiveOpenSeq@@@@QBE_NXZ
.text:00013F4C ??7?$CMyComPtr@UIArchiveOpenSeq@@@@QBE_NXZ proc near
.text:00013F4C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+EAEp
.text:00013F4C
.text:00013F4C var_4           = dword ptr -4
.text:00013F4C
.text:00013F4C                 push    ebp
.text:00013F4D                 mov     ebp, esp
.text:00013F4F                 push    ecx
.text:00013F50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013F57                 mov     [ebp+var_4], ecx
.text:00013F5A                 mov     eax, [ebp+var_4]
.text:00013F5D                 xor     ecx, ecx
.text:00013F5F                 cmp     dword ptr [eax], 0
.text:00013F62                 setz    cl
.text:00013F65                 mov     al, cl
.text:00013F67                 mov     esp, ebp
.text:00013F69                 pop     ebp
.text:00013F6A                 retn
.text:00013F6A ??7?$CMyComPtr@UIArchiveOpenSeq@@@@QBE_NXZ endp
.text:00013F6A
.text:00013F6A ; ---------------------------------------------------------------------------
.text:00013F6B                 align 4
.text:00013F6B _text           ends
.text:00013F6B
.text:00013F6C ; ===========================================================================
.text:00013F6C
.text:00013F6C ; Segment type: Pure code
.text:00013F6C ; Segment permissions: Read/Execute
.text:00013F6C _text           segment para public 'CODE' use32
.text:00013F6C                 assume cs:_text
.text:00013F6C                 ;org 13F6Ch
.text:00013F6C ; COMDAT (pick any)
.text:00013F6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013F6C
.text:00013F6C ; =============== S U B R O U T I N E =======================================
.text:00013F6C
.text:00013F6C ; Attributes: bp-based frame
.text:00013F6C
.text:00013F6C ; public: __thiscall CMyComPtr<struct IArchiveExtractCallback>::CMyComPtr<struct IArchiveExtractCallback>(struct IArchiveExtractCallback *)
.text:00013F6C                 public ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z
.text:00013F6C ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z proc near
.text:00013F6C                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1797p
.text:00013F6C
.text:00013F6C var_4           = dword ptr -4
.text:00013F6C arg_0           = dword ptr  8
.text:00013F6C
.text:00013F6C                 push    ebp
.text:00013F6D                 mov     ebp, esp
.text:00013F6F                 push    ecx
.text:00013F70                 push    esi
.text:00013F71                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013F78                 mov     [ebp+var_4], ecx
.text:00013F7B                 mov     eax, [ebp+var_4]
.text:00013F7E                 mov     ecx, [ebp+arg_0]
.text:00013F81                 mov     [eax], ecx
.text:00013F83                 cmp     [ebp+arg_0], 0
.text:00013F87                 jz      short loc_13FA0
.text:00013F89                 mov     edx, [ebp+arg_0]
.text:00013F8C                 mov     eax, [edx]
.text:00013F8E                 mov     esi, esp
.text:00013F90                 mov     ecx, [ebp+arg_0]
.text:00013F93                 push    ecx
.text:00013F94                 mov     edx, [eax+4]
.text:00013F97                 call    edx
.text:00013F99                 cmp     esi, esp
.text:00013F9B                 call    __RTC_CheckEsp
.text:00013FA0
.text:00013FA0 loc_13FA0:                              ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>(IArchiveExtractCallback *)+1Bj
.text:00013FA0                 mov     eax, [ebp+var_4]
.text:00013FA3                 pop     esi
.text:00013FA4                 add     esp, 4
.text:00013FA7                 cmp     ebp, esp
.text:00013FA9                 call    __RTC_CheckEsp
.text:00013FAE                 mov     esp, ebp
.text:00013FB0                 pop     ebp
.text:00013FB1                 retn    4
.text:00013FB1 ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z endp
.text:00013FB1
.text:00013FB1 _text           ends
.text:00013FB1
.text:00013FB4 ; ===========================================================================
.text:00013FB4
.text:00013FB4 ; Segment type: Pure code
.text:00013FB4 ; Segment permissions: Read/Execute
.text:00013FB4 _text           segment para public 'CODE' use32
.text:00013FB4                 assume cs:_text
.text:00013FB4                 ;org 13FB4h
.text:00013FB4 ; COMDAT (pick any)
.text:00013FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013FB4
.text:00013FB4 ; =============== S U B R O U T I N E =======================================
.text:00013FB4
.text:00013FB4 ; Attributes: bp-based frame
.text:00013FB4
.text:00013FB4 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallback>::~CMyComPtr<struct IArchiveExtractCallback>(void)
.text:00013FB4                 public ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ
.text:00013FB4 ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ proc near
.text:00013FB4                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1886p
.text:00013FB4                                         ; CArc::OpenStream2(COpenOptions const &)+194Ap ...
.text:00013FB4
.text:00013FB4 var_4           = dword ptr -4
.text:00013FB4
.text:00013FB4                 push    ebp
.text:00013FB5                 mov     ebp, esp
.text:00013FB7                 push    ecx
.text:00013FB8                 push    esi
.text:00013FB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00013FC0                 mov     [ebp+var_4], ecx
.text:00013FC3                 mov     eax, [ebp+var_4]
.text:00013FC6                 cmp     dword ptr [eax], 0
.text:00013FC9                 jz      short loc_13FE6
.text:00013FCB                 mov     ecx, [ebp+var_4]
.text:00013FCE                 mov     edx, [ecx]
.text:00013FD0                 mov     eax, [ebp+var_4]
.text:00013FD3                 mov     ecx, [eax]
.text:00013FD5                 mov     edx, [edx]
.text:00013FD7                 mov     esi, esp
.text:00013FD9                 push    ecx
.text:00013FDA                 mov     eax, [edx+8]
.text:00013FDD                 call    eax
.text:00013FDF                 cmp     esi, esp
.text:00013FE1                 call    __RTC_CheckEsp
.text:00013FE6
.text:00013FE6 loc_13FE6:                              ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)+15j
.text:00013FE6                 pop     esi
.text:00013FE7                 add     esp, 4
.text:00013FEA                 cmp     ebp, esp
.text:00013FEC                 call    __RTC_CheckEsp
.text:00013FF1                 mov     esp, ebp
.text:00013FF3                 pop     ebp
.text:00013FF4                 retn
.text:00013FF4 ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ endp
.text:00013FF4
.text:00013FF4 ; ---------------------------------------------------------------------------
.text:00013FF5                 align 4
.text:00013FF5 _text           ends
.text:00013FF5
.text:00013FF8 ; ===========================================================================
.text:00013FF8
.text:00013FF8 ; Segment type: Pure code
.text:00013FF8 ; Segment permissions: Read/Execute
.text:00013FF8 _text           segment para public 'CODE' use32
.text:00013FF8                 assume cs:_text
.text:00013FF8                 ;org 13FF8h
.text:00013FF8 ; COMDAT (pick any)
.text:00013FF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00013FF8
.text:00013FF8 ; =============== S U B R O U T I N E =======================================
.text:00013FF8
.text:00013FF8 ; Attributes: bp-based frame
.text:00013FF8
.text:00013FF8 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallback>::operator struct IArchiveExtractCallback *(void)const
.text:00013FF8                 public ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ
.text:00013FF8 ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ proc near
.text:00013FF8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+20A4p
.text:00013FF8                                         ; CArc::OpenStream2(COpenOptions const &)+40C0p
.text:00013FF8
.text:00013FF8 var_4           = dword ptr -4
.text:00013FF8
.text:00013FF8                 push    ebp
.text:00013FF9                 mov     ebp, esp
.text:00013FFB                 push    ecx
.text:00013FFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014003                 mov     [ebp+var_4], ecx
.text:00014006                 mov     eax, [ebp+var_4]
.text:00014009                 mov     eax, [eax]
.text:0001400B                 mov     esp, ebp
.text:0001400D                 pop     ebp
.text:0001400E                 retn
.text:0001400E ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ endp
.text:0001400E
.text:0001400E ; ---------------------------------------------------------------------------
.text:0001400F                 align 10h
.text:0001400F _text           ends
.text:0001400F
.text:00014010 ; ===========================================================================
.text:00014010
.text:00014010 ; Segment type: Pure code
.text:00014010 ; Segment permissions: Read/Execute
.text:00014010 _text           segment para public 'CODE' use32
.text:00014010                 assume cs:_text
.text:00014010                 ;org 14010h
.text:00014010 ; COMDAT (pick any)
.text:00014010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014010
.text:00014010 ; =============== S U B R O U T I N E =======================================
.text:00014010
.text:00014010 ; Attributes: bp-based frame
.text:00014010
.text:00014010 ; public: __thiscall CObjArray<unsigned char>::CObjArray<unsigned char>(unsigned int)
.text:00014010                 public ??0?$CObjArray@E@@QAE@I@Z
.text:00014010 ??0?$CObjArray@E@@QAE@I@Z proc near     ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2937p
.text:00014010
.text:00014010 var_8           = dword ptr -8
.text:00014010 var_4           = dword ptr -4
.text:00014010 arg_0           = dword ptr  8
.text:00014010
.text:00014010                 push    ebp
.text:00014011                 mov     ebp, esp
.text:00014013                 sub     esp, 8
.text:00014016                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0001401D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014024                 mov     [ebp+var_4], ecx
.text:00014027                 mov     eax, [ebp+var_4]
.text:0001402A                 mov     dword ptr [eax], 0
.text:00014030                 cmp     [ebp+arg_0], 0
.text:00014034                 jz      short loc_1404D
.text:00014036                 mov     ecx, [ebp+arg_0]
.text:00014039                 push    ecx             ; unsigned int
.text:0001403A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0001403F                 add     esp, 4
.text:00014042                 mov     [ebp+var_8], eax
.text:00014045                 mov     edx, [ebp+var_4]
.text:00014048                 mov     eax, [ebp+var_8]
.text:0001404B                 mov     [edx], eax
.text:0001404D
.text:0001404D loc_1404D:                              ; CODE XREF: CObjArray<uchar>::CObjArray<uchar>(uint)+24j
.text:0001404D                 mov     eax, [ebp+var_4]
.text:00014050                 add     esp, 8
.text:00014053                 cmp     ebp, esp
.text:00014055                 call    __RTC_CheckEsp
.text:0001405A                 mov     esp, ebp
.text:0001405C                 pop     ebp
.text:0001405D                 retn    4
.text:0001405D ??0?$CObjArray@E@@QAE@I@Z endp
.text:0001405D
.text:0001405D _text           ends
.text:0001405D
.text:00014060 ; ===========================================================================
.text:00014060
.text:00014060 ; Segment type: Pure code
.text:00014060 ; Segment permissions: Read/Execute
.text:00014060 _text           segment para public 'CODE' use32
.text:00014060                 assume cs:_text
.text:00014060                 ;org 14060h
.text:00014060 ; COMDAT (pick any)
.text:00014060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014060
.text:00014060 ; =============== S U B R O U T I N E =======================================
.text:00014060
.text:00014060 ; Attributes: bp-based frame
.text:00014060
.text:00014060 ; public: __thiscall CObjArray<unsigned char>::~CObjArray<unsigned char>(void)
.text:00014060                 public ??1?$CObjArray@E@@QAE@XZ
.text:00014060 ??1?$CObjArray@E@@QAE@XZ proc near      ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+29ADp
.text:00014060                                         ; CArc::OpenStream2(COpenOptions const &)+2CE6p ...
.text:00014060
.text:00014060 var_8           = dword ptr -8
.text:00014060 var_4           = dword ptr -4
.text:00014060
.text:00014060                 push    ebp
.text:00014061                 mov     ebp, esp
.text:00014063                 sub     esp, 8
.text:00014066                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0001406D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014074                 mov     [ebp+var_4], ecx
.text:00014077                 mov     eax, [ebp+var_4]
.text:0001407A                 mov     ecx, [eax]
.text:0001407C                 mov     [ebp+var_8], ecx
.text:0001407F                 mov     edx, [ebp+var_8]
.text:00014082                 push    edx             ; void *
.text:00014083                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00014088                 add     esp, 4
.text:0001408B                 add     esp, 8
.text:0001408E                 cmp     ebp, esp
.text:00014090                 call    __RTC_CheckEsp
.text:00014095                 mov     esp, ebp
.text:00014097                 pop     ebp
.text:00014098                 retn
.text:00014098 ??1?$CObjArray@E@@QAE@XZ endp
.text:00014098
.text:00014098 ; ---------------------------------------------------------------------------
.text:00014099                 align 4
.text:00014099 _text           ends
.text:00014099
.text:0001409C ; ===========================================================================
.text:0001409C
.text:0001409C ; Segment type: Pure code
.text:0001409C ; Segment permissions: Read/Execute
.text:0001409C _text           segment para public 'CODE' use32
.text:0001409C                 assume cs:_text
.text:0001409C                 ;org 1409Ch
.text:0001409C ; COMDAT (pick any)
.text:0001409C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001409C
.text:0001409C ; =============== S U B R O U T I N E =======================================
.text:0001409C
.text:0001409C ; Attributes: bp-based frame
.text:0001409C
.text:0001409C ; public: __thiscall CObjArray<unsigned char>::operator unsigned char *(void)
.text:0001409C                 public ??B?$CObjArray@E@@QAEPAEXZ
.text:0001409C ??B?$CObjArray@E@@QAEPAEXZ proc near    ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2946p
.text:0001409C
.text:0001409C var_4           = dword ptr -4
.text:0001409C
.text:0001409C                 push    ebp
.text:0001409D                 mov     ebp, esp
.text:0001409F                 push    ecx
.text:000140A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000140A7                 mov     [ebp+var_4], ecx
.text:000140AA                 mov     eax, [ebp+var_4]
.text:000140AD                 mov     eax, [eax]
.text:000140AF                 mov     esp, ebp
.text:000140B1                 pop     ebp
.text:000140B2                 retn
.text:000140B2 ??B?$CObjArray@E@@QAEPAEXZ endp
.text:000140B2
.text:000140B2 ; ---------------------------------------------------------------------------
.text:000140B3                 align 4
.text:000140B3 _text           ends
.text:000140B3
.text:000140B4 ; ===========================================================================
.text:000140B4
.text:000140B4 ; Segment type: Pure code
.text:000140B4 ; Segment permissions: Read/Execute
.text:000140B4 _text           segment para public 'CODE' use32
.text:000140B4                 assume cs:_text
.text:000140B4                 ;org 140B4h
.text:000140B4 ; COMDAT (pick any)
.text:000140B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000140B4
.text:000140B4 ; =============== S U B R O U T I N E =======================================
.text:000140B4
.text:000140B4 ; Attributes: bp-based frame
.text:000140B4
.text:000140B4 ; public: __thiscall CMyComPtr<struct IArchiveKeepModeForNextOpen>::CMyComPtr<struct IArchiveKeepModeForNextOpen>(void)
.text:000140B4                 public ??0?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ
.text:000140B4 ??0?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ proc near
.text:000140B4                                         ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+64p
.text:000140B4
.text:000140B4 var_4           = dword ptr -4
.text:000140B4
.text:000140B4                 push    ebp
.text:000140B5                 mov     ebp, esp
.text:000140B7                 push    ecx
.text:000140B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000140BF                 mov     [ebp+var_4], ecx
.text:000140C2                 mov     eax, [ebp+var_4]
.text:000140C5                 mov     dword ptr [eax], 0
.text:000140CB                 mov     eax, [ebp+var_4]
.text:000140CE                 mov     esp, ebp
.text:000140D0                 pop     ebp
.text:000140D1                 retn
.text:000140D1 ??0?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ endp
.text:000140D1
.text:000140D1 ; ---------------------------------------------------------------------------
.text:000140D2                 align 4
.text:000140D2 _text           ends
.text:000140D2
.text:000140D4 ; ===========================================================================
.text:000140D4
.text:000140D4 ; Segment type: Pure code
.text:000140D4 ; Segment permissions: Read/Execute
.text:000140D4 _text           segment para public 'CODE' use32
.text:000140D4                 assume cs:_text
.text:000140D4                 ;org 140D4h
.text:000140D4 ; COMDAT (pick any)
.text:000140D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000140D4
.text:000140D4 ; =============== S U B R O U T I N E =======================================
.text:000140D4
.text:000140D4 ; Attributes: bp-based frame
.text:000140D4
.text:000140D4 ; public: __thiscall CMyComPtr<struct IArchiveKeepModeForNextOpen>::~CMyComPtr<struct IArchiveKeepModeForNextOpen>(void)
.text:000140D4                 public ??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ
.text:000140D4 ??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ proc near
.text:000140D4                                         ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+E2p
.text:000140D4                                         ; __unwindfunclet$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ$0+3j
.text:000140D4
.text:000140D4 var_4           = dword ptr -4
.text:000140D4
.text:000140D4                 push    ebp
.text:000140D5                 mov     ebp, esp
.text:000140D7                 push    ecx
.text:000140D8                 push    esi
.text:000140D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000140E0                 mov     [ebp+var_4], ecx
.text:000140E3                 mov     eax, [ebp+var_4]
.text:000140E6                 cmp     dword ptr [eax], 0
.text:000140E9                 jz      short loc_14106
.text:000140EB                 mov     ecx, [ebp+var_4]
.text:000140EE                 mov     edx, [ecx]
.text:000140F0                 mov     eax, [ebp+var_4]
.text:000140F3                 mov     ecx, [eax]
.text:000140F5                 mov     edx, [edx]
.text:000140F7                 mov     esi, esp
.text:000140F9                 push    ecx
.text:000140FA                 mov     eax, [edx+8]
.text:000140FD                 call    eax
.text:000140FF                 cmp     esi, esp
.text:00014101                 call    __RTC_CheckEsp
.text:00014106
.text:00014106 loc_14106:                              ; CODE XREF: CMyComPtr<IArchiveKeepModeForNextOpen>::~CMyComPtr<IArchiveKeepModeForNextOpen>(void)+15j
.text:00014106                 pop     esi
.text:00014107                 add     esp, 4
.text:0001410A                 cmp     ebp, esp
.text:0001410C                 call    __RTC_CheckEsp
.text:00014111                 mov     esp, ebp
.text:00014113                 pop     ebp
.text:00014114                 retn
.text:00014114 ??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ endp
.text:00014114
.text:00014114 ; ---------------------------------------------------------------------------
.text:00014115                 align 4
.text:00014115 _text           ends
.text:00014115
.text:00014118 ; ===========================================================================
.text:00014118
.text:00014118 ; Segment type: Pure code
.text:00014118 ; Segment permissions: Read/Execute
.text:00014118 _text           segment para public 'CODE' use32
.text:00014118                 assume cs:_text
.text:00014118                 ;org 14118h
.text:00014118 ; COMDAT (pick any)
.text:00014118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014118
.text:00014118 ; =============== S U B R O U T I N E =======================================
.text:00014118
.text:00014118 ; Attributes: bp-based frame
.text:00014118
.text:00014118 ; public: __thiscall CMyComPtr<struct IArchiveKeepModeForNextOpen>::operator struct IArchiveKeepModeForNextOpen *(void)const
.text:00014118                 public ??B?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ
.text:00014118 ??B?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ proc near
.text:00014118                                         ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+ADp
.text:00014118
.text:00014118 var_4           = dword ptr -4
.text:00014118
.text:00014118                 push    ebp
.text:00014119                 mov     ebp, esp
.text:0001411B                 push    ecx
.text:0001411C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014123                 mov     [ebp+var_4], ecx
.text:00014126                 mov     eax, [ebp+var_4]
.text:00014129                 mov     eax, [eax]
.text:0001412B                 mov     esp, ebp
.text:0001412D                 pop     ebp
.text:0001412E                 retn
.text:0001412E ??B?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ endp
.text:0001412E
.text:0001412E ; ---------------------------------------------------------------------------
.text:0001412F                 align 10h
.text:0001412F _text           ends
.text:0001412F
.text:00014130 ; ===========================================================================
.text:00014130
.text:00014130 ; Segment type: Pure code
.text:00014130 ; Segment permissions: Read/Execute
.text:00014130 _text           segment para public 'CODE' use32
.text:00014130                 assume cs:_text
.text:00014130                 ;org 14130h
.text:00014130 ; COMDAT (pick any)
.text:00014130                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014130
.text:00014130 ; =============== S U B R O U T I N E =======================================
.text:00014130
.text:00014130 ; Attributes: bp-based frame
.text:00014130
.text:00014130 ; public: struct IArchiveKeepModeForNextOpen * * __thiscall CMyComPtr<struct IArchiveKeepModeForNextOpen>::operator&(void)
.text:00014130                 public ??I?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAEPAPAUIArchiveKeepModeForNextOpen@@XZ
.text:00014130 ??I?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAEPAPAUIArchiveKeepModeForNextOpen@@XZ proc near
.text:00014130                                         ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+89p
.text:00014130
.text:00014130 var_4           = dword ptr -4
.text:00014130
.text:00014130                 push    ebp
.text:00014131                 mov     ebp, esp
.text:00014133                 push    ecx
.text:00014134                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001413B                 mov     [ebp+var_4], ecx
.text:0001413E                 mov     eax, [ebp+var_4]
.text:00014141                 mov     esp, ebp
.text:00014143                 pop     ebp
.text:00014144                 retn
.text:00014144 ??I?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAEPAPAUIArchiveKeepModeForNextOpen@@XZ endp
.text:00014144
.text:00014144 ; ---------------------------------------------------------------------------
.text:00014145                 align 4
.text:00014145 _text           ends
.text:00014145
.text:00014148 ; ===========================================================================
.text:00014148
.text:00014148 ; Segment type: Pure code
.text:00014148 ; Segment permissions: Read/Execute
.text:00014148 _text           segment para public 'CODE' use32
.text:00014148                 assume cs:_text
.text:00014148                 ;org 14148h
.text:00014148 ; COMDAT (pick any)
.text:00014148                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014148
.text:00014148 ; =============== S U B R O U T I N E =======================================
.text:00014148
.text:00014148 ; Attributes: bp-based frame
.text:00014148
.text:00014148 ; public: struct IArchiveKeepModeForNextOpen * __thiscall CMyComPtr<struct IArchiveKeepModeForNextOpen>::operator->(void)const
.text:00014148                 public ??C?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ
.text:00014148 ??C?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ proc near
.text:00014148                                         ; CODE XREF: CArchiveLink::KeepModeForNextOpen(void)+B9p
.text:00014148
.text:00014148 var_4           = dword ptr -4
.text:00014148
.text:00014148                 push    ebp
.text:00014149                 mov     ebp, esp
.text:0001414B                 push    ecx
.text:0001414C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014153                 mov     [ebp+var_4], ecx
.text:00014156                 mov     eax, [ebp+var_4]
.text:00014159                 mov     eax, [eax]
.text:0001415B                 mov     esp, ebp
.text:0001415D                 pop     ebp
.text:0001415E                 retn
.text:0001415E ??C?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ endp
.text:0001415E
.text:0001415E ; ---------------------------------------------------------------------------
.text:0001415F                 align 10h
.text:0001415F _text           ends
.text:0001415F
.text:00014160 ; ===========================================================================
.text:00014160
.text:00014160 ; Segment type: Pure code
.text:00014160 ; Segment permissions: Read/Execute
.text:00014160 _text           segment para public 'CODE' use32
.text:00014160                 assume cs:_text
.text:00014160                 ;org 14160h
.text:00014160 ; COMDAT (pick any)
.text:00014160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014160
.text:00014160 ; =============== S U B R O U T I N E =======================================
.text:00014160
.text:00014160 ; Attributes: bp-based frame
.text:00014160
.text:00014160 ; public: unsigned int __thiscall CObjectVector<struct COpenType>::Size(void)const
.text:00014160                 public ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ
.text:00014160 ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ proc near
.text:00014160                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+4Fp
.text:00014160                                         ; CArchiveLink::Open(COpenOptions &)+8Ap ...
.text:00014160
.text:00014160 var_4           = dword ptr -4
.text:00014160
.text:00014160                 push    ebp
.text:00014161                 mov     ebp, esp
.text:00014163                 push    ecx
.text:00014164                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001416B                 mov     [ebp+var_4], ecx
.text:0001416E                 mov     ecx, [ebp+var_4]
.text:00014171                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00014176                 add     esp, 4
.text:00014179                 cmp     ebp, esp
.text:0001417B                 call    __RTC_CheckEsp
.text:00014180                 mov     esp, ebp
.text:00014182                 pop     ebp
.text:00014183                 retn
.text:00014183 ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ endp
.text:00014183
.text:00014183 _text           ends
.text:00014183
.text:00014184 ; ===========================================================================
.text:00014184
.text:00014184 ; Segment type: Pure code
.text:00014184 ; Segment permissions: Read/Execute
.text:00014184 _text           segment para public 'CODE' use32
.text:00014184                 assume cs:_text
.text:00014184                 ;org 14184h
.text:00014184 ; COMDAT (pick any)
.text:00014184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014184
.text:00014184 ; =============== S U B R O U T I N E =======================================
.text:00014184
.text:00014184 ; Attributes: bp-based frame
.text:00014184
.text:00014184 ; public: __thiscall CObjectVector<struct COpenType>::CObjectVector<struct COpenType>(void)
.text:00014184                 public ??0?$CObjectVector@UCOpenType@@@@QAE@XZ
.text:00014184 ??0?$CObjectVector@UCOpenType@@@@QAE@XZ proc near
.text:00014184                                         ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+5Bp
.text:00014184
.text:00014184 var_4           = dword ptr -4
.text:00014184
.text:00014184                 push    ebp
.text:00014185                 mov     ebp, esp
.text:00014187                 push    ecx
.text:00014188                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001418F                 mov     [ebp+var_4], ecx
.text:00014192                 mov     ecx, [ebp+var_4]
.text:00014195                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0001419A                 mov     eax, [ebp+var_4]
.text:0001419D                 add     esp, 4
.text:000141A0                 cmp     ebp, esp
.text:000141A2                 call    __RTC_CheckEsp
.text:000141A7                 mov     esp, ebp
.text:000141A9                 pop     ebp
.text:000141AA                 retn
.text:000141AA ??0?$CObjectVector@UCOpenType@@@@QAE@XZ endp
.text:000141AA
.text:000141AA ; ---------------------------------------------------------------------------
.text:000141AB                 align 4
.text:000141AB _text           ends
.text:000141AB
.text:000141AC ; ===========================================================================
.text:000141AC
.text:000141AC ; Segment type: Pure code
.text:000141AC ; Segment permissions: Read/Execute
.text:000141AC _text           segment para public 'CODE' use32
.text:000141AC                 assume cs:_text
.text:000141AC                 ;org 141ACh
.text:000141AC ; COMDAT (pick any)
.text:000141AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000141AC
.text:000141AC ; =============== S U B R O U T I N E =======================================
.text:000141AC
.text:000141AC ; Attributes: bp-based frame
.text:000141AC
.text:000141AC ; public: struct COpenType const & __thiscall CObjectVector<struct COpenType>::operator[](unsigned int)const
.text:000141AC                 public ??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z
.text:000141AC ??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z proc near
.text:000141AC                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+DAp
.text:000141AC                                         ; CArchiveLink::Open(COpenOptions &)+F5p
.text:000141AC
.text:000141AC var_4           = dword ptr -4
.text:000141AC arg_0           = dword ptr  8
.text:000141AC
.text:000141AC                 push    ebp
.text:000141AD                 mov     ebp, esp
.text:000141AF                 push    ecx
.text:000141B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000141B7                 mov     [ebp+var_4], ecx
.text:000141BA                 mov     eax, [ebp+arg_0]
.text:000141BD                 push    eax
.text:000141BE                 mov     ecx, [ebp+var_4]
.text:000141C1                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000141C6                 mov     eax, [eax]
.text:000141C8                 add     esp, 4
.text:000141CB                 cmp     ebp, esp
.text:000141CD                 call    __RTC_CheckEsp
.text:000141D2                 mov     esp, ebp
.text:000141D4                 pop     ebp
.text:000141D5                 retn    4
.text:000141D5 ??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z endp
.text:000141D5
.text:000141D5 _text           ends
.text:000141D5
.text:000141D8 ; ===========================================================================
.text:000141D8
.text:000141D8 ; Segment type: Pure code
.text:000141D8 ; Segment permissions: Read/Execute
.text:000141D8 _text           segment para public 'CODE' use32
.text:000141D8                 assume cs:_text
.text:000141D8                 ;org 141D8h
.text:000141D8 ; COMDAT (pick any)
.text:000141D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000141D8
.text:000141D8 ; =============== S U B R O U T I N E =======================================
.text:000141D8
.text:000141D8 ; Attributes: bp-based frame
.text:000141D8
.text:000141D8 ; public: unsigned int __thiscall CObjectVector<struct COpenType>::Add(struct COpenType const &)
.text:000141D8                 public ?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z
.text:000141D8 ?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z proc near
.text:000141D8                                         ; CODE XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+FBp
.text:000141D8
.text:000141D8 var_C           = dword ptr -0Ch
.text:000141D8 var_8           = dword ptr -8
.text:000141D8 var_4           = dword ptr -4
.text:000141D8 arg_0           = dword ptr  8
.text:000141D8
.text:000141D8                 push    ebp
.text:000141D9                 mov     ebp, esp
.text:000141DB                 sub     esp, 0Ch
.text:000141DE                 push    esi
.text:000141DF                 push    edi
.text:000141E0                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000141E7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000141EE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000141F5                 mov     [ebp+var_4], ecx
.text:000141F8                 push    20h ; ' '       ; unsigned int
.text:000141FA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000141FF                 add     esp, 4
.text:00014202                 mov     [ebp+var_8], eax
.text:00014205                 cmp     [ebp+var_8], 0
.text:00014209                 jz      short loc_14220
.text:0001420B                 mov     esi, [ebp+arg_0]
.text:0001420E                 mov     ecx, 8
.text:00014213                 mov     edi, [ebp+var_8]
.text:00014216                 rep movsd
.text:00014218                 mov     eax, [ebp+var_8]
.text:0001421B                 mov     [ebp+var_C], eax
.text:0001421E                 jmp     short loc_14227
.text:00014220 ; ---------------------------------------------------------------------------
.text:00014220
.text:00014220 loc_14220:                              ; CODE XREF: CObjectVector<COpenType>::Add(COpenType const &)+31j
.text:00014220                 mov     [ebp+var_C], 0
.text:00014227
.text:00014227 loc_14227:                              ; CODE XREF: CObjectVector<COpenType>::Add(COpenType const &)+46j
.text:00014227                 mov     ecx, [ebp+var_C]
.text:0001422A                 push    ecx
.text:0001422B                 mov     ecx, [ebp+var_4]
.text:0001422E                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00014233                 pop     edi
.text:00014234                 pop     esi
.text:00014235                 add     esp, 0Ch
.text:00014238                 cmp     ebp, esp
.text:0001423A                 call    __RTC_CheckEsp
.text:0001423F                 mov     esp, ebp
.text:00014241                 pop     ebp
.text:00014242                 retn    4
.text:00014242 ?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z endp
.text:00014242
.text:00014242 ; ---------------------------------------------------------------------------
.text:00014245                 align 4
.text:00014245 _text           ends
.text:00014245
.text:00014248 ; ===========================================================================
.text:00014248
.text:00014248 ; Segment type: Pure code
.text:00014248 ; Segment permissions: Read/Execute
.text:00014248 _text           segment para public 'CODE' use32
.text:00014248                 assume cs:_text
.text:00014248                 ;org 14248h
.text:00014248 ; COMDAT (pick any)
.text:00014248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014248
.text:00014248 ; =============== S U B R O U T I N E =======================================
.text:00014248
.text:00014248 ; Attributes: bp-based frame
.text:00014248
.text:00014248 ; public: __thiscall CObjectVector<struct COpenType>::~CObjectVector<struct COpenType>(void)
.text:00014248                 public ??1?$CObjectVector@UCOpenType@@@@QAE@XZ
.text:00014248 ??1?$CObjectVector@UCOpenType@@@@QAE@XZ proc near
.text:00014248                                         ; CODE XREF: CArchiveLink::ReOpen(COpenOptions &)+CCp
.text:00014248                                         ; CArchiveLink::ReOpen(COpenOptions &)+27Ep ...
.text:00014248
.text:00014248 var_18          = dword ptr -18h
.text:00014248 var_14          = dword ptr -14h
.text:00014248 var_10          = dword ptr -10h
.text:00014248 var_C           = dword ptr -0Ch
.text:00014248 var_4           = dword ptr -4
.text:00014248
.text:00014248                 push    ebp
.text:00014249                 mov     ebp, esp
.text:0001424B                 push    0FFFFFFFFh
.text:0001424D                 push    offset __ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
.text:00014252                 mov     eax, large fs:0
.text:00014258                 push    eax
.text:00014259                 sub     esp, 0Ch
.text:0001425C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00014263                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0001426A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00014271                 mov     eax, dword ptr ds:___security_cookie
.text:00014276                 xor     eax, ebp
.text:00014278                 push    eax
.text:00014279                 lea     eax, [ebp+var_C]
.text:0001427C                 mov     large fs:0, eax
.text:00014282                 mov     [ebp+var_10], ecx
.text:00014285                 mov     [ebp+var_4], 0
.text:0001428C                 mov     ecx, [ebp+var_10]
.text:0001428F                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00014294                 mov     [ebp+var_14], eax
.text:00014297
.text:00014297 loc_14297:                              ; CODE XREF: CObjectVector<COpenType>::~CObjectVector<COpenType>(void)+7Bj
.text:00014297                 cmp     [ebp+var_14], 0
.text:0001429B                 jz      short loc_142C5
.text:0001429D                 mov     eax, [ebp+var_14]
.text:000142A0                 sub     eax, 1
.text:000142A3                 mov     [ebp+var_14], eax
.text:000142A6                 mov     ecx, [ebp+var_14]
.text:000142A9                 push    ecx
.text:000142AA                 mov     ecx, [ebp+var_10]
.text:000142AD                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000142B2                 mov     edx, [eax]
.text:000142B4                 mov     [ebp+var_18], edx
.text:000142B7                 mov     eax, [ebp+var_18]
.text:000142BA                 push    eax             ; void *
.text:000142BB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000142C0                 add     esp, 4
.text:000142C3                 jmp     short loc_14297
.text:000142C5 ; ---------------------------------------------------------------------------
.text:000142C5
.text:000142C5 loc_142C5:                              ; CODE XREF: CObjectVector<COpenType>::~CObjectVector<COpenType>(void)+53j
.text:000142C5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000142CC                 mov     ecx, [ebp+var_10]
.text:000142CF                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000142D4                 mov     ecx, [ebp+var_C]
.text:000142D7                 mov     large fs:0, ecx
.text:000142DE                 pop     ecx
.text:000142DF                 add     esp, 18h
.text:000142E2                 cmp     ebp, esp
.text:000142E4                 call    __RTC_CheckEsp
.text:000142E9                 mov     esp, ebp
.text:000142EB                 pop     ebp
.text:000142EC                 retn
.text:000142EC ??1?$CObjectVector@UCOpenType@@@@QAE@XZ endp
.text:000142EC
.text:000142EC ; ---------------------------------------------------------------------------
.text:000142ED                 align 10h
.text:000142ED _text           ends
.text:000142ED
.text$x:000142F0 ; ===========================================================================
.text$x:000142F0
.text$x:000142F0 ; Segment type: Pure code
.text$x:000142F0 ; Segment permissions: Read/Execute
.text$x:000142F0 _text$x         segment para public 'CODE' use32
.text$x:000142F0                 assume cs:_text$x
.text$x:000142F0                 ;org 142F0h
.text$x:000142F0 ; COMDAT (pick associative to section at 14248)
.text$x:000142F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000142F0
.text$x:000142F0 ; =============== S U B R O U T I N E =======================================
.text$x:000142F0
.text$x:000142F0
.text$x:000142F0 __unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0 proc near
.text$x:000142F0                                         ; DATA XREF: .xdata$x:00014318o
.text$x:000142F0                 mov     ecx, [ebp-10h]
.text$x:000142F3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000142F3 __unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0 endp
.text$x:000142F3
.text$x:000142F8
.text$x:000142F8 ; =============== S U B R O U T I N E =======================================
.text$x:000142F8
.text$x:000142F8
.text$x:000142F8 __ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ proc near
.text$x:000142F8                                         ; DATA XREF: CObjectVector<COpenType>::~CObjectVector<COpenType>(void)+5o
.text$x:000142F8
.text$x:000142F8 arg_4           = dword ptr  8
.text$x:000142F8
.text$x:000142F8                 mov     edx, [esp+arg_4]
.text$x:000142FC                 lea     eax, [edx+0Ch]
.text$x:000142FF                 mov     ecx, [edx-10h]
.text$x:00014302                 xor     ecx, eax
.text$x:00014304                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00014309                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
.text$x:0001430E                 jmp     ___CxxFrameHandler3
.text$x:0001430E __ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ endp
.text$x:0001430E
.text$x:0001430E ; ---------------------------------------------------------------------------
.text$x:00014313                 align 4
.text$x:00014313 _text$x         ends
.text$x:00014313
.xdata$x:00014314 ; ===========================================================================
.xdata$x:00014314
.xdata$x:00014314 ; Segment type: Pure data
.xdata$x:00014314 ; Segment permissions: Read
.xdata$x:00014314 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00014314                 assume cs:_xdata$x
.xdata$x:00014314                 ;org 14314h
.xdata$x:00014314 ; COMDAT (pick associative to section at 14248)
.xdata$x:00014314 __unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ db 0FFh
.xdata$x:00014314                                         ; DATA XREF: .xdata$x:00014324o
.xdata$x:00014315                 db 0FFh
.xdata$x:00014316                 db 0FFh
.xdata$x:00014317                 db 0FFh
.xdata$x:00014318                 dd offset __unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0
.xdata$x:0001431C __ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ db  22h ; "
.xdata$x:0001431C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ+11o
.xdata$x:0001431D                 db    5
.xdata$x:0001431E                 db  93h ; ô
.xdata$x:0001431F                 db  19h
.xdata$x:00014320                 db    1
.xdata$x:00014321                 db    0
.xdata$x:00014322                 db    0
.xdata$x:00014323                 db    0
.xdata$x:00014324                 dd offset __unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
.xdata$x:00014328                 db    0
.xdata$x:00014329                 db    0
.xdata$x:0001432A                 db    0
.xdata$x:0001432B                 db    0
.xdata$x:0001432C                 db    0
.xdata$x:0001432D                 db    0
.xdata$x:0001432E                 db    0
.xdata$x:0001432F                 db    0
.xdata$x:00014330                 db    0
.xdata$x:00014331                 db    0
.xdata$x:00014332                 db    0
.xdata$x:00014333                 db    0
.xdata$x:00014334                 db    0
.xdata$x:00014335                 db    0
.xdata$x:00014336                 db    0
.xdata$x:00014337                 db    0
.xdata$x:00014338                 db    0
.xdata$x:00014339                 db    0
.xdata$x:0001433A                 db    0
.xdata$x:0001433B                 db    0
.xdata$x:0001433C                 db    1
.xdata$x:0001433D                 db    0
.xdata$x:0001433E                 db    0
.xdata$x:0001433F                 db    0
.xdata$x:0001433F _xdata$x        ends
.xdata$x:0001433F
.text:00014340 ; ===========================================================================
.text:00014340
.text:00014340 ; Segment type: Pure code
.text:00014340 ; Segment permissions: Read/Execute
.text:00014340 _text           segment para public 'CODE' use32
.text:00014340                 assume cs:_text
.text:00014340                 ;org 14340h
.text:00014340 ; COMDAT (pick any)
.text:00014340                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014340
.text:00014340 ; =============== S U B R O U T I N E =======================================
.text:00014340
.text:00014340 ; Attributes: bp-based frame
.text:00014340
.text:00014340 ; public: void __thiscall CObjectVector<struct COpenType>::Clear(void)
.text:00014340                 public ?Clear@?$CObjectVector@UCOpenType@@@@QAEXXZ
.text:00014340 ?Clear@?$CObjectVector@UCOpenType@@@@QAEXXZ proc near
.text:00014340                                         ; CODE XREF: ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)+38p
.text:00014340
.text:00014340 var_C           = dword ptr -0Ch
.text:00014340 var_8           = dword ptr -8
.text:00014340 var_4           = dword ptr -4
.text:00014340
.text:00014340                 push    ebp
.text:00014341                 mov     ebp, esp
.text:00014343                 sub     esp, 0Ch
.text:00014346                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0001434D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00014354                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001435B                 mov     [ebp+var_4], ecx
.text:0001435E                 mov     ecx, [ebp+var_4]
.text:00014361                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00014366                 mov     [ebp+var_8], eax
.text:00014369
.text:00014369 loc_14369:                              ; CODE XREF: CObjectVector<COpenType>::Clear(void)+55j
.text:00014369                 cmp     [ebp+var_8], 0
.text:0001436D                 jz      short loc_14397
.text:0001436F                 mov     eax, [ebp+var_8]
.text:00014372                 sub     eax, 1
.text:00014375                 mov     [ebp+var_8], eax
.text:00014378                 mov     ecx, [ebp+var_8]
.text:0001437B                 push    ecx
.text:0001437C                 mov     ecx, [ebp+var_4]
.text:0001437F                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00014384                 mov     edx, [eax]
.text:00014386                 mov     [ebp+var_C], edx
.text:00014389                 mov     eax, [ebp+var_C]
.text:0001438C                 push    eax             ; void *
.text:0001438D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00014392                 add     esp, 4
.text:00014395                 jmp     short loc_14369
.text:00014397 ; ---------------------------------------------------------------------------
.text:00014397
.text:00014397 loc_14397:                              ; CODE XREF: CObjectVector<COpenType>::Clear(void)+2Dj
.text:00014397                 mov     ecx, [ebp+var_4]
.text:0001439A                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:0001439F                 add     esp, 0Ch
.text:000143A2                 cmp     ebp, esp
.text:000143A4                 call    __RTC_CheckEsp
.text:000143A9                 mov     esp, ebp
.text:000143AB                 pop     ebp
.text:000143AC                 retn
.text:000143AC ?Clear@?$CObjectVector@UCOpenType@@@@QAEXXZ endp
.text:000143AC
.text:000143AC ; ---------------------------------------------------------------------------
.text:000143AD                 align 10h
.text:000143AD _text           ends
.text:000143AD
.text:000143B0 ; ===========================================================================
.text:000143B0
.text:000143B0 ; Segment type: Pure code
.text:000143B0 ; Segment permissions: Read/Execute
.text:000143B0 _text           segment para public 'CODE' use32
.text:000143B0                 assume cs:_text
.text:000143B0                 ;org 143B0h
.text:000143B0 ; COMDAT (pick any)
.text:000143B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000143B0
.text:000143B0 ; =============== S U B R O U T I N E =======================================
.text:000143B0
.text:000143B0 ; Attributes: bp-based frame
.text:000143B0
.text:000143B0 ; public: __thiscall CMyComPtr<struct IInArchiveGetStream>::CMyComPtr<struct IInArchiveGetStream>(void)
.text:000143B0                 public ??0?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ
.text:000143B0 ??0?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ proc near
.text:000143B0                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+3AEp
.text:000143B0
.text:000143B0 var_4           = dword ptr -4
.text:000143B0
.text:000143B0                 push    ebp
.text:000143B1                 mov     ebp, esp
.text:000143B3                 push    ecx
.text:000143B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000143BB                 mov     [ebp+var_4], ecx
.text:000143BE                 mov     eax, [ebp+var_4]
.text:000143C1                 mov     dword ptr [eax], 0
.text:000143C7                 mov     eax, [ebp+var_4]
.text:000143CA                 mov     esp, ebp
.text:000143CC                 pop     ebp
.text:000143CD                 retn
.text:000143CD ??0?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ endp
.text:000143CD
.text:000143CD ; ---------------------------------------------------------------------------
.text:000143CE                 align 10h
.text:000143CE _text           ends
.text:000143CE
.text:000143D0 ; ===========================================================================
.text:000143D0
.text:000143D0 ; Segment type: Pure code
.text:000143D0 ; Segment permissions: Read/Execute
.text:000143D0 _text           segment para public 'CODE' use32
.text:000143D0                 assume cs:_text
.text:000143D0                 ;org 143D0h
.text:000143D0 ; COMDAT (pick any)
.text:000143D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000143D0
.text:000143D0 ; =============== S U B R O U T I N E =======================================
.text:000143D0
.text:000143D0 ; Attributes: bp-based frame
.text:000143D0
.text:000143D0 ; public: __thiscall CMyComPtr<struct IInArchiveGetStream>::~CMyComPtr<struct IInArchiveGetStream>(void)
.text:000143D0                 public ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ
.text:000143D0 ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ proc near
.text:000143D0                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+41Bp
.text:000143D0                                         ; CArchiveLink::Open(COpenOptions &)+4A7p ...
.text:000143D0
.text:000143D0 var_4           = dword ptr -4
.text:000143D0
.text:000143D0                 push    ebp
.text:000143D1                 mov     ebp, esp
.text:000143D3                 push    ecx
.text:000143D4                 push    esi
.text:000143D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000143DC                 mov     [ebp+var_4], ecx
.text:000143DF                 mov     eax, [ebp+var_4]
.text:000143E2                 cmp     dword ptr [eax], 0
.text:000143E5                 jz      short loc_14402
.text:000143E7                 mov     ecx, [ebp+var_4]
.text:000143EA                 mov     edx, [ecx]
.text:000143EC                 mov     eax, [ebp+var_4]
.text:000143EF                 mov     ecx, [eax]
.text:000143F1                 mov     edx, [edx]
.text:000143F3                 mov     esi, esp
.text:000143F5                 push    ecx
.text:000143F6                 mov     eax, [edx+8]
.text:000143F9                 call    eax
.text:000143FB                 cmp     esi, esp
.text:000143FD                 call    __RTC_CheckEsp
.text:00014402
.text:00014402 loc_14402:                              ; CODE XREF: CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>(void)+15j
.text:00014402                 pop     esi
.text:00014403                 add     esp, 4
.text:00014406                 cmp     ebp, esp
.text:00014408                 call    __RTC_CheckEsp
.text:0001440D                 mov     esp, ebp
.text:0001440F                 pop     ebp
.text:00014410                 retn
.text:00014410 ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ endp
.text:00014410
.text:00014410 ; ---------------------------------------------------------------------------
.text:00014411                 align 4
.text:00014411 _text           ends
.text:00014411
.text:00014414 ; ===========================================================================
.text:00014414
.text:00014414 ; Segment type: Pure code
.text:00014414 ; Segment permissions: Read/Execute
.text:00014414 _text           segment para public 'CODE' use32
.text:00014414                 assume cs:_text
.text:00014414                 ;org 14414h
.text:00014414 ; COMDAT (pick any)
.text:00014414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014414
.text:00014414 ; =============== S U B R O U T I N E =======================================
.text:00014414
.text:00014414 ; Attributes: bp-based frame
.text:00014414
.text:00014414 ; public: struct IInArchiveGetStream * * __thiscall CMyComPtr<struct IInArchiveGetStream>::operator&(void)
.text:00014414                 public ??I?$CMyComPtr@UIInArchiveGetStream@@@@QAEPAPAUIInArchiveGetStream@@XZ
.text:00014414 ??I?$CMyComPtr@UIInArchiveGetStream@@@@QAEPAPAUIInArchiveGetStream@@XZ proc near
.text:00014414                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+3D1p
.text:00014414
.text:00014414 var_4           = dword ptr -4
.text:00014414
.text:00014414                 push    ebp
.text:00014415                 mov     ebp, esp
.text:00014417                 push    ecx
.text:00014418                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001441F                 mov     [ebp+var_4], ecx
.text:00014422                 mov     eax, [ebp+var_4]
.text:00014425                 mov     esp, ebp
.text:00014427                 pop     ebp
.text:00014428                 retn
.text:00014428 ??I?$CMyComPtr@UIInArchiveGetStream@@@@QAEPAPAUIInArchiveGetStream@@XZ endp
.text:00014428
.text:00014428 ; ---------------------------------------------------------------------------
.text:00014429                 align 4
.text:00014429 _text           ends
.text:00014429
.text:0001442C ; ===========================================================================
.text:0001442C
.text:0001442C ; Segment type: Pure code
.text:0001442C ; Segment permissions: Read/Execute
.text:0001442C _text           segment para public 'CODE' use32
.text:0001442C                 assume cs:_text
.text:0001442C                 ;org 1442Ch
.text:0001442C ; COMDAT (pick any)
.text:0001442C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001442C
.text:0001442C ; =============== S U B R O U T I N E =======================================
.text:0001442C
.text:0001442C ; Attributes: bp-based frame
.text:0001442C
.text:0001442C ; public: struct IInArchiveGetStream * __thiscall CMyComPtr<struct IInArchiveGetStream>::operator->(void)const
.text:0001442C                 public ??C?$CMyComPtr@UIInArchiveGetStream@@@@QBEPAUIInArchiveGetStream@@XZ
.text:0001442C ??C?$CMyComPtr@UIInArchiveGetStream@@@@QBEPAUIInArchiveGetStream@@XZ proc near
.text:0001442C                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+43Ap
.text:0001442C
.text:0001442C var_4           = dword ptr -4
.text:0001442C
.text:0001442C                 push    ebp
.text:0001442D                 mov     ebp, esp
.text:0001442F                 push    ecx
.text:00014430                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014437                 mov     [ebp+var_4], ecx
.text:0001443A                 mov     eax, [ebp+var_4]
.text:0001443D                 mov     eax, [eax]
.text:0001443F                 mov     esp, ebp
.text:00014441                 pop     ebp
.text:00014442                 retn
.text:00014442 ??C?$CMyComPtr@UIInArchiveGetStream@@@@QBEPAUIInArchiveGetStream@@XZ endp
.text:00014442
.text:00014442 ; ---------------------------------------------------------------------------
.text:00014443                 align 4
.text:00014443 _text           ends
.text:00014443
.text:00014444 ; ===========================================================================
.text:00014444
.text:00014444 ; Segment type: Pure code
.text:00014444 ; Segment permissions: Read/Execute
.text:00014444 _text           segment para public 'CODE' use32
.text:00014444                 assume cs:_text
.text:00014444                 ;org 14444h
.text:00014444 ; COMDAT (pick any)
.text:00014444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014444
.text:00014444 ; =============== S U B R O U T I N E =======================================
.text:00014444
.text:00014444 ; Attributes: bp-based frame
.text:00014444
.text:00014444 ; public: bool __thiscall CMyComPtr<struct IInArchiveGetStream>::operator!(void)const
.text:00014444                 public ??7?$CMyComPtr@UIInArchiveGetStream@@@@QBE_NXZ
.text:00014444 ??7?$CMyComPtr@UIInArchiveGetStream@@@@QBE_NXZ proc near
.text:00014444                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+402p
.text:00014444
.text:00014444 var_4           = dword ptr -4
.text:00014444
.text:00014444                 push    ebp
.text:00014445                 mov     ebp, esp
.text:00014447                 push    ecx
.text:00014448                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001444F                 mov     [ebp+var_4], ecx
.text:00014452                 mov     eax, [ebp+var_4]
.text:00014455                 xor     ecx, ecx
.text:00014457                 cmp     dword ptr [eax], 0
.text:0001445A                 setz    cl
.text:0001445D                 mov     al, cl
.text:0001445F                 mov     esp, ebp
.text:00014461                 pop     ebp
.text:00014462                 retn
.text:00014462 ??7?$CMyComPtr@UIInArchiveGetStream@@@@QBE_NXZ endp
.text:00014462
.text:00014462 ; ---------------------------------------------------------------------------
.text:00014463                 align 4
.text:00014463 _text           ends
.text:00014463
.text:00014464 ; ===========================================================================
.text:00014464
.text:00014464 ; Segment type: Pure code
.text:00014464 ; Segment permissions: Read/Execute
.text:00014464 _text           segment para public 'CODE' use32
.text:00014464                 assume cs:_text
.text:00014464                 ;org 14464h
.text:00014464 ; COMDAT (pick any)
.text:00014464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014464
.text:00014464 ; =============== S U B R O U T I N E =======================================
.text:00014464
.text:00014464 ; Attributes: bp-based frame
.text:00014464
.text:00014464 ; public: __thiscall CMyComPtr<struct IArchiveOpenSetSubArchiveName>::CMyComPtr<struct IArchiveOpenSetSubArchiveName>(void)
.text:00014464                 public ??0?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ
.text:00014464 ??0?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ proc near
.text:00014464                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+64Dp
.text:00014464
.text:00014464 var_4           = dword ptr -4
.text:00014464
.text:00014464                 push    ebp
.text:00014465                 mov     ebp, esp
.text:00014467                 push    ecx
.text:00014468                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001446F                 mov     [ebp+var_4], ecx
.text:00014472                 mov     eax, [ebp+var_4]
.text:00014475                 mov     dword ptr [eax], 0
.text:0001447B                 mov     eax, [ebp+var_4]
.text:0001447E                 mov     esp, ebp
.text:00014480                 pop     ebp
.text:00014481                 retn
.text:00014481 ??0?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ endp
.text:00014481
.text:00014481 ; ---------------------------------------------------------------------------
.text:00014482                 align 4
.text:00014482 _text           ends
.text:00014482
.text:00014484 ; ===========================================================================
.text:00014484
.text:00014484 ; Segment type: Pure code
.text:00014484 ; Segment permissions: Read/Execute
.text:00014484 _text           segment para public 'CODE' use32
.text:00014484                 assume cs:_text
.text:00014484                 ;org 14484h
.text:00014484 ; COMDAT (pick any)
.text:00014484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014484
.text:00014484 ; =============== S U B R O U T I N E =======================================
.text:00014484
.text:00014484 ; Attributes: bp-based frame
.text:00014484
.text:00014484 ; public: __thiscall CMyComPtr<struct IArchiveOpenSetSubArchiveName>::~CMyComPtr<struct IArchiveOpenSetSubArchiveName>(void)
.text:00014484                 public ??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ
.text:00014484 ??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ proc near
.text:00014484                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+6D6p
.text:00014484                                         ; __unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6+6j
.text:00014484
.text:00014484 var_4           = dword ptr -4
.text:00014484
.text:00014484                 push    ebp
.text:00014485                 mov     ebp, esp
.text:00014487                 push    ecx
.text:00014488                 push    esi
.text:00014489                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014490                 mov     [ebp+var_4], ecx
.text:00014493                 mov     eax, [ebp+var_4]
.text:00014496                 cmp     dword ptr [eax], 0
.text:00014499                 jz      short loc_144B6
.text:0001449B                 mov     ecx, [ebp+var_4]
.text:0001449E                 mov     edx, [ecx]
.text:000144A0                 mov     eax, [ebp+var_4]
.text:000144A3                 mov     ecx, [eax]
.text:000144A5                 mov     edx, [edx]
.text:000144A7                 mov     esi, esp
.text:000144A9                 push    ecx
.text:000144AA                 mov     eax, [edx+8]
.text:000144AD                 call    eax
.text:000144AF                 cmp     esi, esp
.text:000144B1                 call    __RTC_CheckEsp
.text:000144B6
.text:000144B6 loc_144B6:                              ; CODE XREF: CMyComPtr<IArchiveOpenSetSubArchiveName>::~CMyComPtr<IArchiveOpenSetSubArchiveName>(void)+15j
.text:000144B6                 pop     esi
.text:000144B7                 add     esp, 4
.text:000144BA                 cmp     ebp, esp
.text:000144BC                 call    __RTC_CheckEsp
.text:000144C1                 mov     esp, ebp
.text:000144C3                 pop     ebp
.text:000144C4                 retn
.text:000144C4 ??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ endp
.text:000144C4
.text:000144C4 ; ---------------------------------------------------------------------------
.text:000144C5                 align 4
.text:000144C5 _text           ends
.text:000144C5
.text:000144C8 ; ===========================================================================
.text:000144C8
.text:000144C8 ; Segment type: Pure code
.text:000144C8 ; Segment permissions: Read/Execute
.text:000144C8 _text           segment para public 'CODE' use32
.text:000144C8                 assume cs:_text
.text:000144C8                 ;org 144C8h
.text:000144C8 ; COMDAT (pick any)
.text:000144C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000144C8
.text:000144C8 ; =============== S U B R O U T I N E =======================================
.text:000144C8
.text:000144C8 ; Attributes: bp-based frame
.text:000144C8
.text:000144C8 ; public: __thiscall CMyComPtr<struct IArchiveOpenSetSubArchiveName>::operator struct IArchiveOpenSetSubArchiveName *(void)const
.text:000144C8                 public ??B?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ
.text:000144C8 ??B?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ proc near
.text:000144C8                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+689p
.text:000144C8
.text:000144C8 var_4           = dword ptr -4
.text:000144C8
.text:000144C8                 push    ebp
.text:000144C9                 mov     ebp, esp
.text:000144CB                 push    ecx
.text:000144CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000144D3                 mov     [ebp+var_4], ecx
.text:000144D6                 mov     eax, [ebp+var_4]
.text:000144D9                 mov     eax, [eax]
.text:000144DB                 mov     esp, ebp
.text:000144DD                 pop     ebp
.text:000144DE                 retn
.text:000144DE ??B?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ endp
.text:000144DE
.text:000144DE ; ---------------------------------------------------------------------------
.text:000144DF                 align 10h
.text:000144DF _text           ends
.text:000144DF
.text:000144E0 ; ===========================================================================
.text:000144E0
.text:000144E0 ; Segment type: Pure code
.text:000144E0 ; Segment permissions: Read/Execute
.text:000144E0 _text           segment para public 'CODE' use32
.text:000144E0                 assume cs:_text
.text:000144E0                 ;org 144E0h
.text:000144E0 ; COMDAT (pick any)
.text:000144E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000144E0
.text:000144E0 ; =============== S U B R O U T I N E =======================================
.text:000144E0
.text:000144E0 ; Attributes: bp-based frame
.text:000144E0
.text:000144E0 ; public: struct IArchiveOpenSetSubArchiveName * * __thiscall CMyComPtr<struct IArchiveOpenSetSubArchiveName>::operator&(void)
.text:000144E0                 public ??I?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAEPAPAUIArchiveOpenSetSubArchiveName@@XZ
.text:000144E0 ??I?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAEPAPAUIArchiveOpenSetSubArchiveName@@XZ proc near
.text:000144E0                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+65Cp
.text:000144E0
.text:000144E0 var_4           = dword ptr -4
.text:000144E0
.text:000144E0                 push    ebp
.text:000144E1                 mov     ebp, esp
.text:000144E3                 push    ecx
.text:000144E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000144EB                 mov     [ebp+var_4], ecx
.text:000144EE                 mov     eax, [ebp+var_4]
.text:000144F1                 mov     esp, ebp
.text:000144F3                 pop     ebp
.text:000144F4                 retn
.text:000144F4 ??I?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAEPAPAUIArchiveOpenSetSubArchiveName@@XZ endp
.text:000144F4
.text:000144F4 ; ---------------------------------------------------------------------------
.text:000144F5                 align 4
.text:000144F5 _text           ends
.text:000144F5
.text:000144F8 ; ===========================================================================
.text:000144F8
.text:000144F8 ; Segment type: Pure code
.text:000144F8 ; Segment permissions: Read/Execute
.text:000144F8 _text           segment para public 'CODE' use32
.text:000144F8                 assume cs:_text
.text:000144F8                 ;org 144F8h
.text:000144F8 ; COMDAT (pick any)
.text:000144F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000144F8
.text:000144F8 ; =============== S U B R O U T I N E =======================================
.text:000144F8
.text:000144F8 ; Attributes: bp-based frame
.text:000144F8
.text:000144F8 ; public: struct IArchiveOpenSetSubArchiveName * __thiscall CMyComPtr<struct IArchiveOpenSetSubArchiveName>::operator->(void)const
.text:000144F8                 public ??C?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ
.text:000144F8 ??C?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ proc near
.text:000144F8                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+698p
.text:000144F8
.text:000144F8 var_4           = dword ptr -4
.text:000144F8
.text:000144F8                 push    ebp
.text:000144F9                 mov     ebp, esp
.text:000144FB                 push    ecx
.text:000144FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014503                 mov     [ebp+var_4], ecx
.text:00014506                 mov     eax, [ebp+var_4]
.text:00014509                 mov     eax, [eax]
.text:0001450B                 mov     esp, ebp
.text:0001450D                 pop     ebp
.text:0001450E                 retn
.text:0001450E ??C?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ endp
.text:0001450E
.text:0001450E ; ---------------------------------------------------------------------------
.text:0001450F                 align 10h
.text:0001450F _text           ends
.text:0001450F
.text:00014510 ; ===========================================================================
.text:00014510
.text:00014510 ; Segment type: Pure code
.text:00014510 ; Segment permissions: Read/Execute
.text:00014510 _text           segment para public 'CODE' use32
.text:00014510                 assume cs:_text
.text:00014510                 ;org 14510h
.text:00014510 ; COMDAT (pick any)
.text:00014510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014510
.text:00014510 ; =============== S U B R O U T I N E =======================================
.text:00014510
.text:00014510 ; Attributes: bp-based frame
.text:00014510
.text:00014510 ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:00014510                 public ??_GUString@@QAEPAXI@Z
.text:00014510 ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+7Fp
.text:00014510                                         ; CObjectVector<UString>::Clear(void)+59p ...
.text:00014510
.text:00014510 var_4           = dword ptr -4
.text:00014510 arg_0           = dword ptr  8
.text:00014510
.text:00014510                 push    ebp
.text:00014511                 mov     ebp, esp
.text:00014513                 push    ecx
.text:00014514                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001451B                 mov     [ebp+var_4], ecx
.text:0001451E                 mov     ecx, [ebp+var_4] ; this
.text:00014521                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00014526                 mov     eax, [ebp+arg_0]
.text:00014529                 and     eax, 1
.text:0001452C                 jz      short loc_1453A
.text:0001452E                 mov     ecx, [ebp+var_4]
.text:00014531                 push    ecx             ; void *
.text:00014532                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00014537                 add     esp, 4
.text:0001453A
.text:0001453A loc_1453A:                              ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:0001453A                 mov     eax, [ebp+var_4]
.text:0001453D                 add     esp, 4
.text:00014540                 cmp     ebp, esp
.text:00014542                 call    __RTC_CheckEsp
.text:00014547                 mov     esp, ebp
.text:00014549                 pop     ebp
.text:0001454A                 retn    4
.text:0001454A ??_GUString@@QAEPAXI@Z endp
.text:0001454A
.text:0001454A ; ---------------------------------------------------------------------------
.text:0001454D                 align 10h
.text:0001454D _text           ends
.text:0001454D
.text:00014550 ; ===========================================================================
.text:00014550
.text:00014550 ; Segment type: Pure code
.text:00014550 ; Segment permissions: Read/Execute
.text:00014550 _text           segment para public 'CODE' use32
.text:00014550                 assume cs:_text
.text:00014550                 ;org 14550h
.text:00014550 ; COMDAT (pick any)
.text:00014550                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014550
.text:00014550 ; =============== S U B R O U T I N E =======================================
.text:00014550
.text:00014550 ; Attributes: bp-based frame
.text:00014550
.text:00014550 ; public: __thiscall CArc::CArc(class CArc const &)
.text:00014550                 public ??0CArc@@QAE@ABV0@@Z
.text:00014550 ??0CArc@@QAE@ABV0@@Z proc near          ; CODE XREF: CObjectVector<CArc>::Add(CArc const &)+5Dp
.text:00014550
.text:00014550 var_10          = dword ptr -10h
.text:00014550 var_C           = dword ptr -0Ch
.text:00014550 var_4           = dword ptr -4
.text:00014550 arg_0           = dword ptr  8
.text:00014550
.text:00014550                 push    ebp
.text:00014551                 mov     ebp, esp
.text:00014553                 push    0FFFFFFFFh
.text:00014555                 push    offset __ehhandler$??0CArc@@QAE@ABV0@@Z
.text:0001455A                 mov     eax, large fs:0
.text:00014560                 push    eax
.text:00014561                 push    ecx
.text:00014562                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00014569                 mov     eax, dword ptr ds:___security_cookie
.text:0001456E                 xor     eax, ebp
.text:00014570                 push    eax
.text:00014571                 lea     eax, [ebp+var_C]
.text:00014574                 mov     large fs:0, eax
.text:0001457A                 mov     [ebp+var_10], ecx
.text:0001457D                 mov     eax, [ebp+arg_0]
.text:00014580                 push    eax
.text:00014581                 mov     ecx, [ebp+var_10]
.text:00014584                 call    ??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>(CMyComPtr<IInArchive> const &)
.text:00014589                 mov     [ebp+var_4], 0
.text:00014590                 mov     ecx, [ebp+arg_0]
.text:00014593                 add     ecx, 4
.text:00014596                 push    ecx
.text:00014597                 mov     ecx, [ebp+var_10]
.text:0001459A                 add     ecx, 4
.text:0001459D                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(CMyComPtr<IInStream> const &)
.text:000145A2                 mov     byte ptr [ebp+var_4], 1
.text:000145A6                 mov     edx, [ebp+arg_0]
.text:000145A9                 add     edx, 8
.text:000145AC                 push    edx
.text:000145AD                 mov     ecx, [ebp+var_10]
.text:000145B0                 add     ecx, 8
.text:000145B3                 call    ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@ABV0@@Z ; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>(CMyComPtr<IArchiveGetRawProps> const &)
.text:000145B8                 mov     byte ptr [ebp+var_4], 2
.text:000145BC                 mov     eax, [ebp+arg_0]
.text:000145BF                 add     eax, 0Ch
.text:000145C2                 push    eax
.text:000145C3                 mov     ecx, [ebp+var_10]
.text:000145C6                 add     ecx, 0Ch
.text:000145C9                 call    ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@ABV0@@Z ; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>(CMyComPtr<IArchiveGetRootProps> const &)
.text:000145CE                 mov     byte ptr [ebp+var_4], 3
.text:000145D2                 mov     ecx, [ebp+arg_0]
.text:000145D5                 add     ecx, 10h
.text:000145D8                 push    ecx
.text:000145D9                 mov     ecx, [ebp+var_10]
.text:000145DC                 add     ecx, 10h
.text:000145DF                 call    ??0CArcErrorInfo@@QAE@ABU0@@Z ; CArcErrorInfo::CArcErrorInfo(CArcErrorInfo const &)
.text:000145E4                 mov     byte ptr [ebp+var_4], 4
.text:000145E8                 mov     edx, [ebp+arg_0]
.text:000145EB                 add     edx, 40h ; '@'
.text:000145EE                 push    edx
.text:000145EF                 mov     ecx, [ebp+var_10]
.text:000145F2                 add     ecx, 40h ; '@'
.text:000145F5                 call    ??0CArcErrorInfo@@QAE@ABU0@@Z ; CArcErrorInfo::CArcErrorInfo(CArcErrorInfo const &)
.text:000145FA                 mov     byte ptr [ebp+var_4], 5
.text:000145FE                 mov     eax, [ebp+arg_0]
.text:00014601                 add     eax, 70h ; 'p'
.text:00014604                 push    eax
.text:00014605                 mov     ecx, [ebp+var_10]
.text:00014608                 add     ecx, 70h ; 'p'
.text:0001460B                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00014610                 mov     byte ptr [ebp+var_4], 6
.text:00014614                 mov     ecx, [ebp+arg_0]
.text:00014617                 add     ecx, 7Ch ; '|'
.text:0001461A                 push    ecx
.text:0001461B                 mov     ecx, [ebp+var_10]
.text:0001461E                 add     ecx, 7Ch ; '|'
.text:00014621                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00014626                 mov     byte ptr [ebp+var_4], 7
.text:0001462A                 mov     edx, [ebp+arg_0]
.text:0001462D                 add     edx, 88h ; 'ê'
.text:00014633                 push    edx
.text:00014634                 mov     ecx, [ebp+var_10]
.text:00014637                 add     ecx, 88h ; 'ê'
.text:0001463D                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00014642                 mov     eax, [ebp+var_10]
.text:00014645                 mov     ecx, [ebp+arg_0]
.text:00014648                 mov     edx, [ecx+94h]
.text:0001464E                 mov     [eax+94h], edx
.text:00014654                 mov     eax, [ebp+var_10]
.text:00014657                 mov     ecx, [ebp+arg_0]
.text:0001465A                 mov     edx, [ecx+98h]
.text:00014660                 mov     [eax+98h], edx
.text:00014666                 mov     eax, [ebp+arg_0]
.text:00014669                 mov     ecx, [eax+9Ch]
.text:0001466F                 mov     edx, [eax+0A0h]
.text:00014675                 mov     eax, [ebp+var_10]
.text:00014678                 mov     [eax+9Ch], ecx
.text:0001467E                 mov     [eax+0A0h], edx
.text:00014684                 mov     ecx, [ebp+var_10]
.text:00014687                 mov     edx, [ebp+arg_0]
.text:0001468A                 mov     al, [edx+0A4h]
.text:00014690                 mov     [ecx+0A4h], al
.text:00014696                 mov     ecx, [ebp+var_10]
.text:00014699                 mov     edx, [ebp+arg_0]
.text:0001469C                 mov     eax, [edx+0A8h]
.text:000146A2                 mov     [ecx+0A8h], eax
.text:000146A8                 mov     edx, [edx+0ACh]
.text:000146AE                 mov     [ecx+0ACh], edx
.text:000146B4                 mov     eax, [ebp+var_10]
.text:000146B7                 mov     ecx, [ebp+arg_0]
.text:000146BA                 mov     edx, [ecx+0B0h]
.text:000146C0                 mov     [eax+0B0h], edx
.text:000146C6                 mov     ecx, [ecx+0B4h]
.text:000146CC                 mov     [eax+0B4h], ecx
.text:000146D2                 mov     edx, [ebp+var_10]
.text:000146D5                 mov     eax, [ebp+arg_0]
.text:000146D8                 mov     cl, [eax+0B8h]
.text:000146DE                 mov     [edx+0B8h], cl
.text:000146E4                 mov     edx, [ebp+var_10]
.text:000146E7                 mov     eax, [ebp+arg_0]
.text:000146EA                 mov     ecx, [eax+0C0h]
.text:000146F0                 mov     [edx+0C0h], ecx
.text:000146F6                 mov     eax, [eax+0C4h]
.text:000146FC                 mov     [edx+0C4h], eax
.text:00014702                 mov     ecx, [ebp+var_10]
.text:00014705                 mov     edx, [ebp+arg_0]
.text:00014708                 mov     eax, [edx+0C8h]
.text:0001470E                 mov     [ecx+0C8h], eax
.text:00014714                 mov     edx, [edx+0CCh]
.text:0001471A                 mov     [ecx+0CCh], edx
.text:00014720                 mov     eax, [ebp+var_10]
.text:00014723                 mov     ecx, [ebp+arg_0]
.text:00014726                 mov     edx, [ecx+0D0h]
.text:0001472C                 mov     [eax+0D0h], edx
.text:00014732                 mov     ecx, [ecx+0D4h]
.text:00014738                 mov     [eax+0D4h], ecx
.text:0001473E                 mov     edx, [ebp+var_10]
.text:00014741                 mov     eax, [ebp+arg_0]
.text:00014744                 mov     cl, [eax+0D8h]
.text:0001474A                 mov     [edx+0D8h], cl
.text:00014750                 mov     edx, [ebp+var_10]
.text:00014753                 mov     eax, [ebp+arg_0]
.text:00014756                 mov     cl, [eax+0D9h]
.text:0001475C                 mov     [edx+0D9h], cl
.text:00014762                 mov     edx, [ebp+var_10]
.text:00014765                 mov     eax, [ebp+arg_0]
.text:00014768                 mov     cl, [eax+0DAh]
.text:0001476E                 mov     [edx+0DAh], cl
.text:00014774                 mov     edx, [ebp+var_10]
.text:00014777                 mov     eax, [ebp+arg_0]
.text:0001477A                 mov     cl, [eax+0DBh]
.text:00014780                 mov     [edx+0DBh], cl
.text:00014786                 mov     edx, [ebp+var_10]
.text:00014789                 mov     eax, [ebp+arg_0]
.text:0001478C                 mov     cl, [eax+0DCh]
.text:00014792                 mov     [edx+0DCh], cl
.text:00014798                 mov     edx, [ebp+var_10]
.text:0001479B                 mov     eax, [ebp+arg_0]
.text:0001479E                 mov     cl, [eax+0DDh]
.text:000147A4                 mov     [edx+0DDh], cl
.text:000147AA                 mov     edx, [ebp+var_10]
.text:000147AD                 mov     eax, [ebp+arg_0]
.text:000147B0                 mov     cl, [eax+0DEh]
.text:000147B6                 mov     [edx+0DEh], cl
.text:000147BC                 mov     edx, [ebp+var_10]
.text:000147BF                 mov     eax, [ebp+arg_0]
.text:000147C2                 mov     cl, [eax+0DFh]
.text:000147C8                 mov     [edx+0DFh], cl
.text:000147CE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000147D5                 mov     eax, [ebp+var_10]
.text:000147D8                 mov     ecx, [ebp+var_C]
.text:000147DB                 mov     large fs:0, ecx
.text:000147E2                 pop     ecx
.text:000147E3                 add     esp, 10h
.text:000147E6                 cmp     ebp, esp
.text:000147E8                 call    __RTC_CheckEsp
.text:000147ED                 mov     esp, ebp
.text:000147EF                 pop     ebp
.text:000147F0                 retn    4
.text:000147F0 ??0CArc@@QAE@ABV0@@Z endp
.text:000147F0
.text:000147F0 ; ---------------------------------------------------------------------------
.text:000147F3                 align 4
.text:000147F3 _text           ends
.text:000147F3
.text$x:000147F4 ; ===========================================================================
.text$x:000147F4
.text$x:000147F4 ; Segment type: Pure code
.text$x:000147F4 ; Segment permissions: Read/Execute
.text$x:000147F4 _text$x         segment para public 'CODE' use32
.text$x:000147F4                 assume cs:_text$x
.text$x:000147F4                 ;org 147F4h
.text$x:000147F4 ; COMDAT (pick associative to section at 14550)
.text$x:000147F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000147F4
.text$x:000147F4 ; =============== S U B R O U T I N E =======================================
.text$x:000147F4
.text$x:000147F4
.text$x:000147F4 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$0 proc near
.text$x:000147F4                                         ; DATA XREF: .xdata$x:0001488Co
.text$x:000147F4                 mov     ecx, [ebp-10h]
.text$x:000147F7                 jmp     ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text$x:000147F7 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$0 endp
.text$x:000147F7
.text$x:000147FC
.text$x:000147FC ; =============== S U B R O U T I N E =======================================
.text$x:000147FC
.text$x:000147FC
.text$x:000147FC __unwindfunclet$??0CArc@@QAE@ABV0@@Z$1 proc near
.text$x:000147FC                                         ; DATA XREF: .xdata$x:00014894o
.text$x:000147FC                 mov     ecx, [ebp-10h]
.text$x:000147FF                 add     ecx, 4
.text$x:00014802                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00014802 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$1 endp
.text$x:00014802
.text$x:00014807
.text$x:00014807 ; =============== S U B R O U T I N E =======================================
.text$x:00014807
.text$x:00014807
.text$x:00014807 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$2 proc near
.text$x:00014807                                         ; DATA XREF: .xdata$x:0001489Co
.text$x:00014807                 mov     ecx, [ebp-10h]
.text$x:0001480A                 add     ecx, 8
.text$x:0001480D                 jmp     ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>(void)
.text$x:0001480D __unwindfunclet$??0CArc@@QAE@ABV0@@Z$2 endp
.text$x:0001480D
.text$x:00014812
.text$x:00014812 ; =============== S U B R O U T I N E =======================================
.text$x:00014812
.text$x:00014812
.text$x:00014812 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$3 proc near
.text$x:00014812                                         ; DATA XREF: .xdata$x:000148A4o
.text$x:00014812                 mov     ecx, [ebp-10h]
.text$x:00014815                 add     ecx, 0Ch
.text$x:00014818                 jmp     ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>(void)
.text$x:00014818 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$3 endp
.text$x:00014818
.text$x:0001481D
.text$x:0001481D ; =============== S U B R O U T I N E =======================================
.text$x:0001481D
.text$x:0001481D
.text$x:0001481D __unwindfunclet$??0CArc@@QAE@ABV0@@Z$4 proc near
.text$x:0001481D                                         ; DATA XREF: .xdata$x:000148ACo
.text$x:0001481D                 mov     ecx, [ebp-10h]
.text$x:00014820                 add     ecx, 10h        ; this
.text$x:00014823                 jmp     ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text$x:00014823 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$4 endp
.text$x:00014823
.text$x:00014828
.text$x:00014828 ; =============== S U B R O U T I N E =======================================
.text$x:00014828
.text$x:00014828
.text$x:00014828 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$5 proc near
.text$x:00014828                                         ; DATA XREF: .xdata$x:000148B4o
.text$x:00014828                 mov     ecx, [ebp-10h]
.text$x:0001482B                 add     ecx, 40h ; '@'  ; this
.text$x:0001482E                 jmp     ??1CArcErrorInfo@@QAE@XZ ; CArcErrorInfo::~CArcErrorInfo(void)
.text$x:0001482E __unwindfunclet$??0CArc@@QAE@ABV0@@Z$5 endp
.text$x:0001482E
.text$x:00014833
.text$x:00014833 ; =============== S U B R O U T I N E =======================================
.text$x:00014833
.text$x:00014833
.text$x:00014833 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$6 proc near
.text$x:00014833                                         ; DATA XREF: .xdata$x:000148BCo
.text$x:00014833                 mov     ecx, [ebp-10h]
.text$x:00014836                 add     ecx, 70h ; 'p'  ; this
.text$x:00014839                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00014839 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$6 endp
.text$x:00014839
.text$x:0001483E
.text$x:0001483E ; =============== S U B R O U T I N E =======================================
.text$x:0001483E
.text$x:0001483E
.text$x:0001483E __unwindfunclet$??0CArc@@QAE@ABV0@@Z$7 proc near
.text$x:0001483E                                         ; DATA XREF: .xdata$x:000148C4o
.text$x:0001483E                 mov     ecx, [ebp-10h]
.text$x:00014841                 add     ecx, 7Ch ; '|'  ; this
.text$x:00014844                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00014844 __unwindfunclet$??0CArc@@QAE@ABV0@@Z$7 endp
.text$x:00014844
.text$x:00014849
.text$x:00014849 ; =============== S U B R O U T I N E =======================================
.text$x:00014849
.text$x:00014849
.text$x:00014849 __ehhandler$??0CArc@@QAE@ABV0@@Z proc near
.text$x:00014849                                         ; DATA XREF: CArc::CArc(CArc const &)+5o
.text$x:00014849
.text$x:00014849 arg_4           = dword ptr  8
.text$x:00014849
.text$x:00014849                 mov     edx, [esp+arg_4]
.text$x:0001484D                 lea     eax, [edx+0Ch]
.text$x:00014850                 mov     ecx, [edx-8]
.text$x:00014853                 xor     ecx, eax
.text$x:00014855                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0001485A                 mov     eax, offset __ehfuncinfo$??0CArc@@QAE@ABV0@@Z
.text$x:0001485F                 jmp     ___CxxFrameHandler3
.text$x:0001485F __ehhandler$??0CArc@@QAE@ABV0@@Z endp
.text$x:0001485F
.text$x:0001485F _text$x         ends
.text$x:0001485F
.xdata$x:00014864 ; ===========================================================================
.xdata$x:00014864
.xdata$x:00014864 ; Segment type: Pure data
.xdata$x:00014864 ; Segment permissions: Read
.xdata$x:00014864 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00014864                 assume cs:_xdata$x
.xdata$x:00014864                 ;org 14864h
.xdata$x:00014864 ; COMDAT (pick associative to section at 14550)
.xdata$x:00014864 __ehfuncinfo$??0CArc@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00014864                                         ; DATA XREF: __ehhandler$??0CArc@@QAE@ABV0@@Z+11o
.xdata$x:00014865                 db    5
.xdata$x:00014866                 db  93h ; ô
.xdata$x:00014867                 db  19h
.xdata$x:00014868                 db    8
.xdata$x:00014869                 db    0
.xdata$x:0001486A                 db    0
.xdata$x:0001486B                 db    0
.xdata$x:0001486C                 dd offset __unwindtable$??0CArc@@QAE@ABV0@@Z
.xdata$x:00014870                 db    0
.xdata$x:00014871                 db    0
.xdata$x:00014872                 db    0
.xdata$x:00014873                 db    0
.xdata$x:00014874                 db    0
.xdata$x:00014875                 db    0
.xdata$x:00014876                 db    0
.xdata$x:00014877                 db    0
.xdata$x:00014878                 db    0
.xdata$x:00014879                 db    0
.xdata$x:0001487A                 db    0
.xdata$x:0001487B                 db    0
.xdata$x:0001487C                 db    0
.xdata$x:0001487D                 db    0
.xdata$x:0001487E                 db    0
.xdata$x:0001487F                 db    0
.xdata$x:00014880                 db    0
.xdata$x:00014881                 db    0
.xdata$x:00014882                 db    0
.xdata$x:00014883                 db    0
.xdata$x:00014884                 db    1
.xdata$x:00014885                 db    0
.xdata$x:00014886                 db    0
.xdata$x:00014887                 db    0
.xdata$x:00014888 __unwindtable$??0CArc@@QAE@ABV0@@Z db 0FFh ; DATA XREF: .xdata$x:0001486Co
.xdata$x:00014889                 db 0FFh
.xdata$x:0001488A                 db 0FFh
.xdata$x:0001488B                 db 0FFh
.xdata$x:0001488C                 dd offset __unwindfunclet$??0CArc@@QAE@ABV0@@Z$0
.xdata$x:00014890                 db    0
.xdata$x:00014891                 db    0
.xdata$x:00014892                 db    0
.xdata$x:00014893                 db    0
.xdata$x:00014894                 dd offset __unwindfunclet$??0CArc@@QAE@ABV0@@Z$1
.xdata$x:00014898                 db    1
.xdata$x:00014899                 db    0
.xdata$x:0001489A                 db    0
.xdata$x:0001489B                 db    0
.xdata$x:0001489C                 dd offset __unwindfunclet$??0CArc@@QAE@ABV0@@Z$2
.xdata$x:000148A0                 db    2
.xdata$x:000148A1                 db    0
.xdata$x:000148A2                 db    0
.xdata$x:000148A3                 db    0
.xdata$x:000148A4                 dd offset __unwindfunclet$??0CArc@@QAE@ABV0@@Z$3
.xdata$x:000148A8                 db    3
.xdata$x:000148A9                 db    0
.xdata$x:000148AA                 db    0
.xdata$x:000148AB                 db    0
.xdata$x:000148AC                 dd offset __unwindfunclet$??0CArc@@QAE@ABV0@@Z$4
.xdata$x:000148B0                 db    4
.xdata$x:000148B1                 db    0
.xdata$x:000148B2                 db    0
.xdata$x:000148B3                 db    0
.xdata$x:000148B4                 dd offset __unwindfunclet$??0CArc@@QAE@ABV0@@Z$5
.xdata$x:000148B8                 db    5
.xdata$x:000148B9                 db    0
.xdata$x:000148BA                 db    0
.xdata$x:000148BB                 db    0
.xdata$x:000148BC                 dd offset __unwindfunclet$??0CArc@@QAE@ABV0@@Z$6
.xdata$x:000148C0                 db    6
.xdata$x:000148C1                 db    0
.xdata$x:000148C2                 db    0
.xdata$x:000148C3                 db    0
.xdata$x:000148C4                 dd offset __unwindfunclet$??0CArc@@QAE@ABV0@@Z$7
.xdata$x:000148C4 _xdata$x        ends
.xdata$x:000148C4
.text:000148C8 ; ===========================================================================
.text:000148C8
.text:000148C8 ; Segment type: Pure code
.text:000148C8 ; Segment permissions: Read/Execute
.text:000148C8 _text           segment para public 'CODE' use32
.text:000148C8                 assume cs:_text
.text:000148C8                 ;org 148C8h
.text:000148C8 ; COMDAT (pick any)
.text:000148C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000148C8
.text:000148C8 ; =============== S U B R O U T I N E =======================================
.text:000148C8
.text:000148C8 ; Attributes: bp-based frame
.text:000148C8
.text:000148C8 ; public: void * __thiscall CArc::`scalar deleting destructor'(unsigned int)
.text:000148C8                 public ??_GCArc@@QAEPAXI@Z
.text:000148C8 ??_GCArc@@QAEPAXI@Z proc near           ; CODE XREF: CObjectVector<CArc>::DeleteBack(void)+44p
.text:000148C8
.text:000148C8 var_4           = dword ptr -4
.text:000148C8 arg_0           = dword ptr  8
.text:000148C8
.text:000148C8                 push    ebp
.text:000148C9                 mov     ebp, esp
.text:000148CB                 push    ecx
.text:000148CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000148D3                 mov     [ebp+var_4], ecx
.text:000148D6                 mov     ecx, [ebp+var_4] ; this
.text:000148D9                 call    ??1CArc@@QAE@XZ ; CArc::~CArc(void)
.text:000148DE                 mov     eax, [ebp+arg_0]
.text:000148E1                 and     eax, 1
.text:000148E4                 jz      short loc_148F2
.text:000148E6                 mov     ecx, [ebp+var_4]
.text:000148E9                 push    ecx             ; void *
.text:000148EA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000148EF                 add     esp, 4
.text:000148F2
.text:000148F2 loc_148F2:                              ; CODE XREF: CArc::`scalar deleting destructor'(uint)+1Cj
.text:000148F2                 mov     eax, [ebp+var_4]
.text:000148F5                 add     esp, 4
.text:000148F8                 cmp     ebp, esp
.text:000148FA                 call    __RTC_CheckEsp
.text:000148FF                 mov     esp, ebp
.text:00014901                 pop     ebp
.text:00014902                 retn    4
.text:00014902 ??_GCArc@@QAEPAXI@Z endp
.text:00014902
.text:00014902 ; ---------------------------------------------------------------------------
.text:00014905                 align 4
.text:00014905 _text           ends
.text:00014905
.text:00014908 ; ===========================================================================
.text:00014908
.text:00014908 ; Segment type: Pure code
.text:00014908 ; Segment permissions: Read/Execute
.text:00014908 _text           segment para public 'CODE' use32
.text:00014908                 assume cs:_text
.text:00014908                 ;org 14908h
.text:00014908 ; COMDAT (pick any)
.text:00014908                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014908
.text:00014908 ; =============== S U B R O U T I N E =======================================
.text:00014908
.text:00014908 ; Attributes: bp-based frame
.text:00014908
.text:00014908 ; _DWORD __thiscall NArchive::NParser::CParseItem::CParseItem(NArchive::NParser::CParseItem *this, const struct NArchive::NParser::CParseItem *)
.text:00014908                 public ??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
.text:00014908 ??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z proc near
.text:00014908                                         ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::Add(NArchive::NParser::CParseItem const &)+5Ap
.text:00014908                                         ; CObjectVector<NArchive::NParser::CParseItem>::Insert(uint,NArchive::NParser::CParseItem const &)+5Ap
.text:00014908
.text:00014908 var_10          = dword ptr -10h
.text:00014908 var_C           = dword ptr -0Ch
.text:00014908 var_4           = dword ptr -4
.text:00014908 arg_0           = dword ptr  8
.text:00014908
.text:00014908                 push    ebp
.text:00014909                 mov     ebp, esp
.text:0001490B                 push    0FFFFFFFFh
.text:0001490D                 push    offset __ehhandler$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
.text:00014912                 mov     eax, large fs:0
.text:00014918                 push    eax
.text:00014919                 push    ecx
.text:0001491A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00014921                 mov     eax, dword ptr ds:___security_cookie
.text:00014926                 xor     eax, ebp
.text:00014928                 push    eax
.text:00014929                 lea     eax, [ebp+var_C]
.text:0001492C                 mov     large fs:0, eax
.text:00014932                 mov     [ebp+var_10], ecx
.text:00014935                 mov     eax, [ebp+var_10]
.text:00014938                 mov     ecx, [ebp+arg_0]
.text:0001493B                 mov     edx, [ecx]
.text:0001493D                 mov     [eax], edx
.text:0001493F                 mov     ecx, [ecx+4]
.text:00014942                 mov     [eax+4], ecx
.text:00014945                 mov     edx, [ebp+var_10]
.text:00014948                 mov     eax, [ebp+arg_0]
.text:0001494B                 mov     ecx, [eax+8]
.text:0001494E                 mov     [edx+8], ecx
.text:00014951                 mov     eax, [eax+0Ch]
.text:00014954                 mov     [edx+0Ch], eax
.text:00014957                 mov     ecx, [ebp+arg_0]
.text:0001495A                 add     ecx, 10h
.text:0001495D                 push    ecx
.text:0001495E                 mov     ecx, [ebp+var_10]
.text:00014961                 add     ecx, 10h
.text:00014964                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00014969                 mov     [ebp+var_4], 0
.text:00014970                 mov     edx, [ebp+arg_0]
.text:00014973                 add     edx, 1Ch
.text:00014976                 push    edx
.text:00014977                 mov     ecx, [ebp+var_10]
.text:0001497A                 add     ecx, 1Ch
.text:0001497D                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00014982                 mov     byte ptr [ebp+var_4], 1
.text:00014986                 mov     eax, [ebp+arg_0]
.text:00014989                 mov     ecx, [eax+28h]
.text:0001498C                 mov     edx, [eax+2Ch]
.text:0001498F                 mov     eax, [ebp+var_10]
.text:00014992                 mov     [eax+28h], ecx
.text:00014995                 mov     [eax+2Ch], edx
.text:00014998                 mov     ecx, [ebp+arg_0]
.text:0001499B                 add     ecx, 30h ; '0'
.text:0001499E                 push    ecx
.text:0001499F                 mov     ecx, [ebp+var_10]
.text:000149A2                 add     ecx, 30h ; '0'
.text:000149A5                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000149AA                 mov     byte ptr [ebp+var_4], 2
.text:000149AE                 mov     edx, [ebp+arg_0]
.text:000149B1                 add     edx, 3Ch ; '<'
.text:000149B4                 push    edx
.text:000149B5                 mov     ecx, [ebp+var_10]
.text:000149B8                 add     ecx, 3Ch ; '<'
.text:000149BB                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000149C0                 mov     eax, [ebp+var_10]
.text:000149C3                 mov     ecx, [ebp+arg_0]
.text:000149C6                 mov     dl, [ecx+48h]
.text:000149C9                 mov     [eax+48h], dl
.text:000149CC                 mov     eax, [ebp+var_10]
.text:000149CF                 mov     ecx, [ebp+arg_0]
.text:000149D2                 mov     dl, [ecx+49h]
.text:000149D5                 mov     [eax+49h], dl
.text:000149D8                 mov     eax, [ebp+var_10]
.text:000149DB                 mov     ecx, [ebp+arg_0]
.text:000149DE                 mov     dl, [ecx+4Ah]
.text:000149E1                 mov     [eax+4Ah], dl
.text:000149E4                 mov     eax, [ebp+var_10]
.text:000149E7                 mov     ecx, [ebp+arg_0]
.text:000149EA                 mov     dl, [ecx+4Bh]
.text:000149ED                 mov     [eax+4Bh], dl
.text:000149F0                 mov     eax, [ebp+var_10]
.text:000149F3                 mov     ecx, [ebp+arg_0]
.text:000149F6                 mov     dl, [ecx+4Ch]
.text:000149F9                 mov     [eax+4Ch], dl
.text:000149FC                 mov     eax, [ebp+var_10]
.text:000149FF                 mov     ecx, [ebp+arg_0]
.text:00014A02                 mov     dl, [ecx+4Dh]
.text:00014A05                 mov     [eax+4Dh], dl
.text:00014A08                 mov     eax, [ebp+var_10]
.text:00014A0B                 mov     ecx, [ebp+arg_0]
.text:00014A0E                 mov     edx, [ecx+50h]
.text:00014A11                 mov     [eax+50h], edx
.text:00014A14                 mov     ecx, [ecx+54h]
.text:00014A17                 mov     [eax+54h], ecx
.text:00014A1A                 mov     edx, [ebp+var_10]
.text:00014A1D                 mov     eax, [ebp+arg_0]
.text:00014A20                 mov     ecx, [eax+58h]
.text:00014A23                 mov     [edx+58h], ecx
.text:00014A26                 mov     eax, [eax+5Ch]
.text:00014A29                 mov     [edx+5Ch], eax
.text:00014A2C                 mov     ecx, [ebp+var_10]
.text:00014A2F                 mov     edx, [ebp+arg_0]
.text:00014A32                 mov     eax, [edx+60h]
.text:00014A35                 mov     [ecx+60h], eax
.text:00014A38                 mov     edx, [edx+64h]
.text:00014A3B                 mov     [ecx+64h], edx
.text:00014A3E                 mov     eax, [ebp+var_10]
.text:00014A41                 mov     ecx, [ebp+arg_0]
.text:00014A44                 mov     edx, [ecx+68h]
.text:00014A47                 mov     [eax+68h], edx
.text:00014A4A                 mov     eax, [ebp+var_10]
.text:00014A4D                 mov     ecx, [ebp+arg_0]
.text:00014A50                 mov     dl, [ecx+6Ch]
.text:00014A53                 mov     [eax+6Ch], dl
.text:00014A56                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00014A5D                 mov     eax, [ebp+var_10]
.text:00014A60                 mov     ecx, [ebp+var_C]
.text:00014A63                 mov     large fs:0, ecx
.text:00014A6A                 pop     ecx
.text:00014A6B                 add     esp, 10h
.text:00014A6E                 cmp     ebp, esp
.text:00014A70                 call    __RTC_CheckEsp
.text:00014A75                 mov     esp, ebp
.text:00014A77                 pop     ebp
.text:00014A78                 retn    4
.text:00014A78 ??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z endp
.text:00014A78
.text:00014A78 ; ---------------------------------------------------------------------------
.text:00014A7B                 align 4
.text:00014A7B _text           ends
.text:00014A7B
.text$x:00014A7C ; ===========================================================================
.text$x:00014A7C
.text$x:00014A7C ; Segment type: Pure code
.text$x:00014A7C ; Segment permissions: Read/Execute
.text$x:00014A7C _text$x         segment para public 'CODE' use32
.text$x:00014A7C                 assume cs:_text$x
.text$x:00014A7C                 ;org 14A7Ch
.text$x:00014A7C ; COMDAT (pick associative to section at 14908)
.text$x:00014A7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00014A7C
.text$x:00014A7C ; =============== S U B R O U T I N E =======================================
.text$x:00014A7C
.text$x:00014A7C
.text$x:00014A7C __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:00014A7C                                         ; DATA XREF: .xdata$x:00014ABCo
.text$x:00014A7C                 mov     ecx, [ebp-10h]
.text$x:00014A7F                 add     ecx, 10h        ; this
.text$x:00014A82                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00014A82 __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:00014A82
.text$x:00014A87
.text$x:00014A87 ; =============== S U B R O U T I N E =======================================
.text$x:00014A87
.text$x:00014A87
.text$x:00014A87 __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$1 proc near
.text$x:00014A87                                         ; DATA XREF: .xdata$x:00014AC4o
.text$x:00014A87                 mov     ecx, [ebp-10h]
.text$x:00014A8A                 add     ecx, 1Ch        ; this
.text$x:00014A8D                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00014A8D __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$1 endp
.text$x:00014A8D
.text$x:00014A92
.text$x:00014A92 ; =============== S U B R O U T I N E =======================================
.text$x:00014A92
.text$x:00014A92
.text$x:00014A92 __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$2 proc near
.text$x:00014A92                                         ; DATA XREF: .xdata$x:00014ACCo
.text$x:00014A92                 mov     ecx, [ebp-10h]
.text$x:00014A95                 add     ecx, 30h ; '0'  ; this
.text$x:00014A98                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00014A98 __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$2 endp
.text$x:00014A98
.text$x:00014A9D
.text$x:00014A9D ; =============== S U B R O U T I N E =======================================
.text$x:00014A9D
.text$x:00014A9D
.text$x:00014A9D __ehhandler$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z proc near
.text$x:00014A9D                                         ; DATA XREF: NArchive::NParser::CParseItem::CParseItem(NArchive::NParser::CParseItem const &)+5o
.text$x:00014A9D
.text$x:00014A9D arg_4           = dword ptr  8
.text$x:00014A9D
.text$x:00014A9D                 mov     edx, [esp+arg_4]
.text$x:00014AA1                 lea     eax, [edx+0Ch]
.text$x:00014AA4                 mov     ecx, [edx-8]
.text$x:00014AA7                 xor     ecx, eax
.text$x:00014AA9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00014AAE                 mov     eax, offset __ehfuncinfo$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
.text$x:00014AB3                 jmp     ___CxxFrameHandler3
.text$x:00014AB3 __ehhandler$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z endp
.text$x:00014AB3
.text$x:00014AB3 _text$x         ends
.text$x:00014AB3
.xdata$x:00014AB8 ; ===========================================================================
.xdata$x:00014AB8
.xdata$x:00014AB8 ; Segment type: Pure data
.xdata$x:00014AB8 ; Segment permissions: Read
.xdata$x:00014AB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00014AB8                 assume cs:_xdata$x
.xdata$x:00014AB8                 ;org 14AB8h
.xdata$x:00014AB8 ; COMDAT (pick associative to section at 14908)
.xdata$x:00014AB8 __unwindtable$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:00014AB8                                         ; DATA XREF: .xdata$x:00014AD8o
.xdata$x:00014AB9                 db 0FFh
.xdata$x:00014ABA                 db 0FFh
.xdata$x:00014ABB                 db 0FFh
.xdata$x:00014ABC                 dd offset __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$0
.xdata$x:00014AC0                 db    0
.xdata$x:00014AC1                 db    0
.xdata$x:00014AC2                 db    0
.xdata$x:00014AC3                 db    0
.xdata$x:00014AC4                 dd offset __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$1
.xdata$x:00014AC8                 db    1
.xdata$x:00014AC9                 db    0
.xdata$x:00014ACA                 db    0
.xdata$x:00014ACB                 db    0
.xdata$x:00014ACC                 dd offset __unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$2
.xdata$x:00014AD0 __ehfuncinfo$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:00014AD0                                         ; DATA XREF: __ehhandler$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:00014AD1                 db    5
.xdata$x:00014AD2                 db  93h ; ô
.xdata$x:00014AD3                 db  19h
.xdata$x:00014AD4                 db    3
.xdata$x:00014AD5                 db    0
.xdata$x:00014AD6                 db    0
.xdata$x:00014AD7                 db    0
.xdata$x:00014AD8                 dd offset __unwindtable$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
.xdata$x:00014ADC                 db    0
.xdata$x:00014ADD                 db    0
.xdata$x:00014ADE                 db    0
.xdata$x:00014ADF                 db    0
.xdata$x:00014AE0                 db    0
.xdata$x:00014AE1                 db    0
.xdata$x:00014AE2                 db    0
.xdata$x:00014AE3                 db    0
.xdata$x:00014AE4                 db    0
.xdata$x:00014AE5                 db    0
.xdata$x:00014AE6                 db    0
.xdata$x:00014AE7                 db    0
.xdata$x:00014AE8                 db    0
.xdata$x:00014AE9                 db    0
.xdata$x:00014AEA                 db    0
.xdata$x:00014AEB                 db    0
.xdata$x:00014AEC                 db    0
.xdata$x:00014AED                 db    0
.xdata$x:00014AEE                 db    0
.xdata$x:00014AEF                 db    0
.xdata$x:00014AF0                 db    1
.xdata$x:00014AF1                 db    0
.xdata$x:00014AF2                 db    0
.xdata$x:00014AF3                 db    0
.xdata$x:00014AF3 _xdata$x        ends
.xdata$x:00014AF3
.text:00014AF4 ; ===========================================================================
.text:00014AF4
.text:00014AF4 ; Segment type: Pure code
.text:00014AF4 ; Segment permissions: Read/Execute
.text:00014AF4 _text           segment para public 'CODE' use32
.text:00014AF4                 assume cs:_text
.text:00014AF4                 ;org 14AF4h
.text:00014AF4 ; COMDAT (pick any)
.text:00014AF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014AF4
.text:00014AF4 ; =============== S U B R O U T I N E =======================================
.text:00014AF4
.text:00014AF4 ; Attributes: bp-based frame
.text:00014AF4
.text:00014AF4 ; public: void * __thiscall NArchive::NParser::CParseItem::`scalar deleting destructor'(unsigned int)
.text:00014AF4                 public ??_GCParseItem@NParser@NArchive@@QAEPAXI@Z
.text:00014AF4 ??_GCParseItem@NParser@NArchive@@QAEPAXI@Z proc near
.text:00014AF4                                         ; CODE XREF: CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>(void)+7Fp
.text:00014AF4                                         ; CObjectVector<NArchive::NParser::CParseItem>::Clear(void)+59p ...
.text:00014AF4
.text:00014AF4 var_4           = dword ptr -4
.text:00014AF4 arg_0           = dword ptr  8
.text:00014AF4
.text:00014AF4                 push    ebp
.text:00014AF5                 mov     ebp, esp
.text:00014AF7                 push    ecx
.text:00014AF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014AFF                 mov     [ebp+var_4], ecx
.text:00014B02                 mov     ecx, [ebp+var_4] ; this
.text:00014B05                 call    ??1CParseItem@NParser@NArchive@@QAE@XZ ; NArchive::NParser::CParseItem::~CParseItem(void)
.text:00014B0A                 mov     eax, [ebp+arg_0]
.text:00014B0D                 and     eax, 1
.text:00014B10                 jz      short loc_14B1E
.text:00014B12                 mov     ecx, [ebp+var_4]
.text:00014B15                 push    ecx             ; void *
.text:00014B16                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00014B1B                 add     esp, 4
.text:00014B1E
.text:00014B1E loc_14B1E:                              ; CODE XREF: NArchive::NParser::CParseItem::`scalar deleting destructor'(uint)+1Cj
.text:00014B1E                 mov     eax, [ebp+var_4]
.text:00014B21                 add     esp, 4
.text:00014B24                 cmp     ebp, esp
.text:00014B26                 call    __RTC_CheckEsp
.text:00014B2B                 mov     esp, ebp
.text:00014B2D                 pop     ebp
.text:00014B2E                 retn    4
.text:00014B2E ??_GCParseItem@NParser@NArchive@@QAEPAXI@Z endp
.text:00014B2E
.text:00014B2E ; ---------------------------------------------------------------------------
.text:00014B31                 align 4
.text:00014B31 _text           ends
.text:00014B31
.text:00014B34 ; ===========================================================================
.text:00014B34
.text:00014B34 ; Segment type: Pure code
.text:00014B34 ; Segment permissions: Read/Execute
.text:00014B34 _text           segment para public 'CODE' use32
.text:00014B34                 assume cs:_text
.text:00014B34                 ;org 14B34h
.text:00014B34 ; COMDAT (pick any)
.text:00014B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014B34
.text:00014B34 ; =============== S U B R O U T I N E =======================================
.text:00014B34
.text:00014B34 ; Attributes: bp-based frame
.text:00014B34
.text:00014B34 ; public: __thiscall CArcErrorInfo::CArcErrorInfo(struct CArcErrorInfo const &)
.text:00014B34                 public ??0CArcErrorInfo@@QAE@ABU0@@Z
.text:00014B34 ??0CArcErrorInfo@@QAE@ABU0@@Z proc near ; CODE XREF: CArc::CArc(CArc const &)+8Fp
.text:00014B34                                         ; CArc::CArc(CArc const &)+A5p
.text:00014B34
.text:00014B34 var_10          = dword ptr -10h
.text:00014B34 var_C           = dword ptr -0Ch
.text:00014B34 var_4           = dword ptr -4
.text:00014B34 arg_0           = dword ptr  8
.text:00014B34
.text:00014B34                 push    ebp
.text:00014B35                 mov     ebp, esp
.text:00014B37                 push    0FFFFFFFFh
.text:00014B39                 push    offset __ehhandler$??0CArcErrorInfo@@QAE@ABU0@@Z
.text:00014B3E                 mov     eax, large fs:0
.text:00014B44                 push    eax
.text:00014B45                 push    ecx
.text:00014B46                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00014B4D                 mov     eax, dword ptr ds:___security_cookie
.text:00014B52                 xor     eax, ebp
.text:00014B54                 push    eax
.text:00014B55                 lea     eax, [ebp+var_C]
.text:00014B58                 mov     large fs:0, eax
.text:00014B5E                 mov     [ebp+var_10], ecx
.text:00014B61                 mov     eax, [ebp+var_10]
.text:00014B64                 mov     ecx, [ebp+arg_0]
.text:00014B67                 mov     dl, [ecx]
.text:00014B69                 mov     [eax], dl
.text:00014B6B                 mov     eax, [ebp+var_10]
.text:00014B6E                 mov     ecx, [ebp+arg_0]
.text:00014B71                 mov     dl, [ecx+1]
.text:00014B74                 mov     [eax+1], dl
.text:00014B77                 mov     eax, [ebp+var_10]
.text:00014B7A                 mov     ecx, [ebp+arg_0]
.text:00014B7D                 mov     dl, [ecx+2]
.text:00014B80                 mov     [eax+2], dl
.text:00014B83                 mov     eax, [ebp+var_10]
.text:00014B86                 mov     ecx, [ebp+arg_0]
.text:00014B89                 mov     dl, [ecx+3]
.text:00014B8C                 mov     [eax+3], dl
.text:00014B8F                 mov     eax, [ebp+var_10]
.text:00014B92                 mov     ecx, [ebp+arg_0]
.text:00014B95                 mov     edx, [ecx+4]
.text:00014B98                 mov     [eax+4], edx
.text:00014B9B                 mov     eax, [ebp+var_10]
.text:00014B9E                 mov     ecx, [ebp+arg_0]
.text:00014BA1                 mov     edx, [ecx+8]
.text:00014BA4                 mov     [eax+8], edx
.text:00014BA7                 mov     eax, [ebp+var_10]
.text:00014BAA                 mov     ecx, [ebp+arg_0]
.text:00014BAD                 mov     edx, [ecx+0Ch]
.text:00014BB0                 mov     [eax+0Ch], edx
.text:00014BB3                 mov     eax, [ebp+var_10]
.text:00014BB6                 mov     ecx, [ebp+arg_0]
.text:00014BB9                 mov     edx, [ecx+10h]
.text:00014BBC                 mov     [eax+10h], edx
.text:00014BBF                 mov     ecx, [ecx+14h]
.text:00014BC2                 mov     [eax+14h], ecx
.text:00014BC5                 mov     edx, [ebp+arg_0]
.text:00014BC8                 add     edx, 18h
.text:00014BCB                 push    edx
.text:00014BCC                 mov     ecx, [ebp+var_10]
.text:00014BCF                 add     ecx, 18h
.text:00014BD2                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00014BD7                 mov     [ebp+var_4], 0
.text:00014BDE                 mov     eax, [ebp+arg_0]
.text:00014BE1                 add     eax, 24h ; '$'
.text:00014BE4                 push    eax
.text:00014BE5                 mov     ecx, [ebp+var_10]
.text:00014BE8                 add     ecx, 24h ; '$'
.text:00014BEB                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00014BF0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00014BF7                 mov     eax, [ebp+var_10]
.text:00014BFA                 mov     ecx, [ebp+var_C]
.text:00014BFD                 mov     large fs:0, ecx
.text:00014C04                 pop     ecx
.text:00014C05                 add     esp, 10h
.text:00014C08                 cmp     ebp, esp
.text:00014C0A                 call    __RTC_CheckEsp
.text:00014C0F                 mov     esp, ebp
.text:00014C11                 pop     ebp
.text:00014C12                 retn    4
.text:00014C12 ??0CArcErrorInfo@@QAE@ABU0@@Z endp
.text:00014C12
.text:00014C12 ; ---------------------------------------------------------------------------
.text:00014C15                 align 4
.text:00014C15 _text           ends
.text:00014C15
.text$x:00014C18 ; ===========================================================================
.text$x:00014C18
.text$x:00014C18 ; Segment type: Pure code
.text$x:00014C18 ; Segment permissions: Read/Execute
.text$x:00014C18 _text$x         segment para public 'CODE' use32
.text$x:00014C18                 assume cs:_text$x
.text$x:00014C18                 ;org 14C18h
.text$x:00014C18 ; COMDAT (pick associative to section at 14B34)
.text$x:00014C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00014C18
.text$x:00014C18 ; =============== S U B R O U T I N E =======================================
.text$x:00014C18
.text$x:00014C18
.text$x:00014C18 __unwindfunclet$??0CArcErrorInfo@@QAE@ABU0@@Z$0 proc near
.text$x:00014C18                                         ; DATA XREF: .xdata$x:00014C44o
.text$x:00014C18                 mov     ecx, [ebp-10h]
.text$x:00014C1B                 add     ecx, 18h        ; this
.text$x:00014C1E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00014C1E __unwindfunclet$??0CArcErrorInfo@@QAE@ABU0@@Z$0 endp
.text$x:00014C1E
.text$x:00014C23
.text$x:00014C23 ; =============== S U B R O U T I N E =======================================
.text$x:00014C23
.text$x:00014C23
.text$x:00014C23 __ehhandler$??0CArcErrorInfo@@QAE@ABU0@@Z proc near
.text$x:00014C23                                         ; DATA XREF: CArcErrorInfo::CArcErrorInfo(CArcErrorInfo const &)+5o
.text$x:00014C23
.text$x:00014C23 arg_4           = dword ptr  8
.text$x:00014C23
.text$x:00014C23                 mov     edx, [esp+arg_4]
.text$x:00014C27                 lea     eax, [edx+0Ch]
.text$x:00014C2A                 mov     ecx, [edx-8]
.text$x:00014C2D                 xor     ecx, eax
.text$x:00014C2F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00014C34                 mov     eax, offset __ehfuncinfo$??0CArcErrorInfo@@QAE@ABU0@@Z
.text$x:00014C39                 jmp     ___CxxFrameHandler3
.text$x:00014C39 __ehhandler$??0CArcErrorInfo@@QAE@ABU0@@Z endp
.text$x:00014C39
.text$x:00014C39 ; ---------------------------------------------------------------------------
.text$x:00014C3E                 align 10h
.text$x:00014C3E _text$x         ends
.text$x:00014C3E
.xdata$x:00014C40 ; ===========================================================================
.xdata$x:00014C40
.xdata$x:00014C40 ; Segment type: Pure data
.xdata$x:00014C40 ; Segment permissions: Read
.xdata$x:00014C40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00014C40                 assume cs:_xdata$x
.xdata$x:00014C40                 ;org 14C40h
.xdata$x:00014C40 ; COMDAT (pick associative to section at 14B34)
.xdata$x:00014C40 __unwindtable$??0CArcErrorInfo@@QAE@ABU0@@Z db 0FFh
.xdata$x:00014C40                                         ; DATA XREF: .xdata$x:00014C50o
.xdata$x:00014C41                 db 0FFh
.xdata$x:00014C42                 db 0FFh
.xdata$x:00014C43                 db 0FFh
.xdata$x:00014C44                 dd offset __unwindfunclet$??0CArcErrorInfo@@QAE@ABU0@@Z$0
.xdata$x:00014C48 __ehfuncinfo$??0CArcErrorInfo@@QAE@ABU0@@Z db  22h ; "
.xdata$x:00014C48                                         ; DATA XREF: __ehhandler$??0CArcErrorInfo@@QAE@ABU0@@Z+11o
.xdata$x:00014C49                 db    5
.xdata$x:00014C4A                 db  93h ; ô
.xdata$x:00014C4B                 db  19h
.xdata$x:00014C4C                 db    1
.xdata$x:00014C4D                 db    0
.xdata$x:00014C4E                 db    0
.xdata$x:00014C4F                 db    0
.xdata$x:00014C50                 dd offset __unwindtable$??0CArcErrorInfo@@QAE@ABU0@@Z
.xdata$x:00014C54                 db    0
.xdata$x:00014C55                 db    0
.xdata$x:00014C56                 db    0
.xdata$x:00014C57                 db    0
.xdata$x:00014C58                 db    0
.xdata$x:00014C59                 db    0
.xdata$x:00014C5A                 db    0
.xdata$x:00014C5B                 db    0
.xdata$x:00014C5C                 db    0
.xdata$x:00014C5D                 db    0
.xdata$x:00014C5E                 db    0
.xdata$x:00014C5F                 db    0
.xdata$x:00014C60                 db    0
.xdata$x:00014C61                 db    0
.xdata$x:00014C62                 db    0
.xdata$x:00014C63                 db    0
.xdata$x:00014C64                 db    0
.xdata$x:00014C65                 db    0
.xdata$x:00014C66                 db    0
.xdata$x:00014C67                 db    0
.xdata$x:00014C68                 db    1
.xdata$x:00014C69                 db    0
.xdata$x:00014C6A                 db    0
.xdata$x:00014C6B                 db    0
.xdata$x:00014C6B _xdata$x        ends
.xdata$x:00014C6B
.text:00014C6C ; ===========================================================================
.text:00014C6C
.text:00014C6C ; Segment type: Pure code
.text:00014C6C ; Segment permissions: Read/Execute
.text:00014C6C _text           segment para public 'CODE' use32
.text:00014C6C                 assume cs:_text
.text:00014C6C                 ;org 14C6Ch
.text:00014C6C ; COMDAT (pick any)
.text:00014C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014C6C
.text:00014C6C ; =============== S U B R O U T I N E =======================================
.text:00014C6C
.text:00014C6C ; Attributes: bp-based frame
.text:00014C6C
.text:00014C6C ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00014C6C                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00014C6C ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00014C6C                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(void)+11p
.text:00014C6C                                         ; CObjectVector<NArchive::NParser::CParseItem>::CObjectVector<NArchive::NParser::CParseItem>(void)+11p ...
.text:00014C6C
.text:00014C6C var_4           = dword ptr -4
.text:00014C6C
.text:00014C6C                 push    ebp
.text:00014C6D                 mov     ebp, esp
.text:00014C6F                 push    ecx
.text:00014C70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014C77                 mov     [ebp+var_4], ecx
.text:00014C7A                 mov     eax, [ebp+var_4]
.text:00014C7D                 mov     dword ptr [eax], 0
.text:00014C83                 mov     ecx, [ebp+var_4]
.text:00014C86                 mov     dword ptr [ecx+4], 0
.text:00014C8D                 mov     edx, [ebp+var_4]
.text:00014C90                 mov     dword ptr [edx+8], 0
.text:00014C97                 mov     eax, [ebp+var_4]
.text:00014C9A                 mov     esp, ebp
.text:00014C9C                 pop     ebp
.text:00014C9D                 retn
.text:00014C9D ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00014C9D
.text:00014C9D ; ---------------------------------------------------------------------------
.text:00014C9E                 align 10h
.text:00014C9E _text           ends
.text:00014C9E
.text:00014CA0 ; ===========================================================================
.text:00014CA0
.text:00014CA0 ; Segment type: Pure code
.text:00014CA0 ; Segment permissions: Read/Execute
.text:00014CA0 _text           segment para public 'CODE' use32
.text:00014CA0                 assume cs:_text
.text:00014CA0                 ;org 14CA0h
.text:00014CA0 ; COMDAT (pick any)
.text:00014CA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014CA0
.text:00014CA0 ; =============== S U B R O U T I N E =======================================
.text:00014CA0
.text:00014CA0 ; Attributes: bp-based frame
.text:00014CA0
.text:00014CA0 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00014CA0                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00014CA0 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00014CA0                                         ; CODE XREF: CObjectVector<UString>::Size(void)+11p
.text:00014CA0                                         ; CObjectVector<UString>::Back(void)+11p ...
.text:00014CA0
.text:00014CA0 var_4           = dword ptr -4
.text:00014CA0
.text:00014CA0                 push    ebp
.text:00014CA1                 mov     ebp, esp
.text:00014CA3                 push    ecx
.text:00014CA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014CAB                 mov     [ebp+var_4], ecx
.text:00014CAE                 mov     eax, [ebp+var_4]
.text:00014CB1                 mov     eax, [eax+4]
.text:00014CB4                 mov     esp, ebp
.text:00014CB6                 pop     ebp
.text:00014CB7                 retn
.text:00014CB7 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00014CB7
.text:00014CB7 _text           ends
.text:00014CB7
.text:00014CB8 ; ===========================================================================
.text:00014CB8
.text:00014CB8 ; Segment type: Pure code
.text:00014CB8 ; Segment permissions: Read/Execute
.text:00014CB8 _text           segment para public 'CODE' use32
.text:00014CB8                 assume cs:_text
.text:00014CB8                 ;org 14CB8h
.text:00014CB8 ; COMDAT (pick any)
.text:00014CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014CB8
.text:00014CB8 ; =============== S U B R O U T I N E =======================================
.text:00014CB8
.text:00014CB8 ; Attributes: bp-based frame
.text:00014CB8
.text:00014CB8 ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:00014CB8                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:00014CB8 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:00014CB8                                         ; CODE XREF: CObjectVector<UString>::IsEmpty(void)+11p
.text:00014CB8                                         ; CObjectVector<CArcExtInfo>::IsEmpty(void)+11p ...
.text:00014CB8
.text:00014CB8 var_4           = dword ptr -4
.text:00014CB8
.text:00014CB8                 push    ebp
.text:00014CB9                 mov     ebp, esp
.text:00014CBB                 push    ecx
.text:00014CBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014CC3                 mov     [ebp+var_4], ecx
.text:00014CC6                 mov     eax, [ebp+var_4]
.text:00014CC9                 xor     ecx, ecx
.text:00014CCB                 cmp     dword ptr [eax+4], 0
.text:00014CCF                 setz    cl
.text:00014CD2                 mov     al, cl
.text:00014CD4                 mov     esp, ebp
.text:00014CD6                 pop     ebp
.text:00014CD7                 retn
.text:00014CD7 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:00014CD7
.text:00014CD7 _text           ends
.text:00014CD7
.text:00014CD8 ; ===========================================================================
.text:00014CD8
.text:00014CD8 ; Segment type: Pure code
.text:00014CD8 ; Segment permissions: Read/Execute
.text:00014CD8 _text           segment para public 'CODE' use32
.text:00014CD8                 assume cs:_text
.text:00014CD8                 ;org 14CD8h
.text:00014CD8 ; COMDAT (pick any)
.text:00014CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014CD8
.text:00014CD8 ; =============== S U B R O U T I N E =======================================
.text:00014CD8
.text:00014CD8 ; Attributes: bp-based frame
.text:00014CD8
.text:00014CD8 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00014CD8                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00014CD8 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00014CD8                                         ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+9Cp
.text:00014CD8                                         ; __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0+3j ...
.text:00014CD8
.text:00014CD8 var_8           = dword ptr -8
.text:00014CD8 var_4           = dword ptr -4
.text:00014CD8
.text:00014CD8                 push    ebp
.text:00014CD9                 mov     ebp, esp
.text:00014CDB                 sub     esp, 8
.text:00014CDE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00014CE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014CEC                 mov     [ebp+var_4], ecx
.text:00014CEF                 mov     eax, [ebp+var_4]
.text:00014CF2                 mov     ecx, [eax]
.text:00014CF4                 mov     [ebp+var_8], ecx
.text:00014CF7                 mov     edx, [ebp+var_8]
.text:00014CFA                 push    edx             ; void *
.text:00014CFB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00014D00                 add     esp, 4
.text:00014D03                 add     esp, 8
.text:00014D06                 cmp     ebp, esp
.text:00014D08                 call    __RTC_CheckEsp
.text:00014D0D                 mov     esp, ebp
.text:00014D0F                 pop     ebp
.text:00014D10                 retn
.text:00014D10 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00014D10
.text:00014D10 ; ---------------------------------------------------------------------------
.text:00014D11                 align 4
.text:00014D11 _text           ends
.text:00014D11
.text:00014D14 ; ===========================================================================
.text:00014D14
.text:00014D14 ; Segment type: Pure code
.text:00014D14 ; Segment permissions: Read/Execute
.text:00014D14 _text           segment para public 'CODE' use32
.text:00014D14                 assume cs:_text
.text:00014D14                 ;org 14D14h
.text:00014D14 ; COMDAT (pick any)
.text:00014D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014D14
.text:00014D14 ; =============== S U B R O U T I N E =======================================
.text:00014D14
.text:00014D14 ; Attributes: bp-based frame
.text:00014D14
.text:00014D14 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00014D14                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00014D14 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00014D14                                         ; CODE XREF: CObjectVector<UString>::Clear(void)+6Fp
.text:00014D14                                         ; CObjectVector<NArchive::NParser::CParseItem>::Clear(void)+6Fp ...
.text:00014D14
.text:00014D14 var_4           = dword ptr -4
.text:00014D14
.text:00014D14                 push    ebp
.text:00014D15                 mov     ebp, esp
.text:00014D17                 push    ecx
.text:00014D18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014D1F                 mov     [ebp+var_4], ecx
.text:00014D22                 mov     eax, [ebp+var_4]
.text:00014D25                 mov     dword ptr [eax+4], 0
.text:00014D2C                 mov     esp, ebp
.text:00014D2E                 pop     ebp
.text:00014D2F                 retn
.text:00014D2F ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00014D2F
.text:00014D2F _text           ends
.text:00014D2F
.text:00014D30 ; ===========================================================================
.text:00014D30
.text:00014D30 ; Segment type: Pure code
.text:00014D30 ; Segment permissions: Read/Execute
.text:00014D30 _text           segment para public 'CODE' use32
.text:00014D30                 assume cs:_text
.text:00014D30                 ;org 14D30h
.text:00014D30 ; COMDAT (pick any)
.text:00014D30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014D30
.text:00014D30 ; =============== S U B R O U T I N E =======================================
.text:00014D30
.text:00014D30 ; Attributes: bp-based frame
.text:00014D30
.text:00014D30 ; public: void __thiscall CRecordVector<void *>::DeleteBack(void)
.text:00014D30                 public ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ
.text:00014D30 ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00014D30                                         ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+58p
.text:00014D30                                         ; CObjectVector<CArc>::DeleteBack(void)+58p ...
.text:00014D30
.text:00014D30 var_4           = dword ptr -4
.text:00014D30
.text:00014D30                 push    ebp
.text:00014D31                 mov     ebp, esp
.text:00014D33                 push    ecx
.text:00014D34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014D3B                 mov     [ebp+var_4], ecx
.text:00014D3E                 mov     eax, [ebp+var_4]
.text:00014D41                 mov     ecx, [eax+4]
.text:00014D44                 sub     ecx, 1
.text:00014D47                 mov     edx, [ebp+var_4]
.text:00014D4A                 mov     [edx+4], ecx
.text:00014D4D                 mov     esp, ebp
.text:00014D4F                 pop     ebp
.text:00014D50                 retn
.text:00014D50 ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ endp
.text:00014D50
.text:00014D50 ; ---------------------------------------------------------------------------
.text:00014D51                 align 4
.text:00014D51 _text           ends
.text:00014D51
.text:00014D54 ; ===========================================================================
.text:00014D54
.text:00014D54 ; Segment type: Pure code
.text:00014D54 ; Segment permissions: Read/Execute
.text:00014D54 _text           segment para public 'CODE' use32
.text:00014D54                 assume cs:_text
.text:00014D54                 ;org 14D54h
.text:00014D54 ; COMDAT (pick any)
.text:00014D54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014D54
.text:00014D54 ; =============== S U B R O U T I N E =======================================
.text:00014D54
.text:00014D54 ; Attributes: bp-based frame
.text:00014D54
.text:00014D54 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00014D54                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00014D54 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00014D54                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+7Fp
.text:00014D54                                         ; CObjectVector<CArc>::Add(CArc const &)+82p ...
.text:00014D54
.text:00014D54 var_8           = dword ptr -8
.text:00014D54 var_4           = dword ptr -4
.text:00014D54 arg_0           = dword ptr  8
.text:00014D54
.text:00014D54                 push    ebp
.text:00014D55                 mov     ebp, esp
.text:00014D57                 sub     esp, 8
.text:00014D5A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00014D61                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014D68                 mov     [ebp+var_4], ecx
.text:00014D6B                 mov     ecx, [ebp+var_4]
.text:00014D6E                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00014D73                 mov     eax, [ebp+var_4]
.text:00014D76                 mov     ecx, [eax+4]
.text:00014D79                 mov     edx, [ebp+var_4]
.text:00014D7C                 mov     eax, [edx]
.text:00014D7E                 mov     edx, [ebp+arg_0]
.text:00014D81                 mov     [eax+ecx*4], edx
.text:00014D84                 mov     eax, [ebp+var_4]
.text:00014D87                 mov     ecx, [eax+4]
.text:00014D8A                 mov     [ebp+var_8], ecx
.text:00014D8D                 mov     edx, [ebp+var_4]
.text:00014D90                 mov     eax, [edx+4]
.text:00014D93                 add     eax, 1
.text:00014D96                 mov     ecx, [ebp+var_4]
.text:00014D99                 mov     [ecx+4], eax
.text:00014D9C                 mov     eax, [ebp+var_8]
.text:00014D9F                 add     esp, 8
.text:00014DA2                 cmp     ebp, esp
.text:00014DA4                 call    __RTC_CheckEsp
.text:00014DA9                 mov     esp, ebp
.text:00014DAB                 pop     ebp
.text:00014DAC                 retn    4
.text:00014DAC ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00014DAC
.text:00014DAC ; ---------------------------------------------------------------------------
.text:00014DAF                 align 10h
.text:00014DAF _text           ends
.text:00014DAF
.text:00014DB0 ; ===========================================================================
.text:00014DB0
.text:00014DB0 ; Segment type: Pure code
.text:00014DB0 ; Segment permissions: Read/Execute
.text:00014DB0 _text           segment para public 'CODE' use32
.text:00014DB0                 assume cs:_text
.text:00014DB0                 ;org 14DB0h
.text:00014DB0 ; COMDAT (pick any)
.text:00014DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014DB0
.text:00014DB0 ; =============== S U B R O U T I N E =======================================
.text:00014DB0
.text:00014DB0 ; Attributes: bp-based frame
.text:00014DB0
.text:00014DB0 ; public: void __thiscall CRecordVector<void *>::Insert(unsigned int, void * const)
.text:00014DB0                 public ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
.text:00014DB0 ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z proc near
.text:00014DB0                                         ; CODE XREF: CObjectVector<UString>::Insert(uint,UString const &)+83p
.text:00014DB0                                         ; CObjectVector<NArchive::NParser::CParseItem>::Insert(uint,NArchive::NParser::CParseItem const &)+83p
.text:00014DB0
.text:00014DB0 var_4           = dword ptr -4
.text:00014DB0 arg_0           = dword ptr  8
.text:00014DB0 arg_4           = dword ptr  0Ch
.text:00014DB0
.text:00014DB0                 push    ebp
.text:00014DB1                 mov     ebp, esp
.text:00014DB3                 push    ecx
.text:00014DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014DBB                 mov     [ebp+var_4], ecx
.text:00014DBE                 mov     ecx, [ebp+var_4]
.text:00014DC1                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00014DC6                 mov     eax, [ebp+arg_0]
.text:00014DC9                 push    eax
.text:00014DCA                 mov     ecx, [ebp+arg_0]
.text:00014DCD                 add     ecx, 1
.text:00014DD0                 push    ecx
.text:00014DD1                 mov     ecx, [ebp+var_4]
.text:00014DD4                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:00014DD9                 mov     edx, [ebp+var_4]
.text:00014DDC                 mov     eax, [edx]
.text:00014DDE                 mov     ecx, [ebp+arg_0]
.text:00014DE1                 mov     edx, [ebp+arg_4]
.text:00014DE4                 mov     [eax+ecx*4], edx
.text:00014DE7                 mov     eax, [ebp+var_4]
.text:00014DEA                 mov     ecx, [eax+4]
.text:00014DED                 add     ecx, 1
.text:00014DF0                 mov     edx, [ebp+var_4]
.text:00014DF3                 mov     [edx+4], ecx
.text:00014DF6                 add     esp, 4
.text:00014DF9                 cmp     ebp, esp
.text:00014DFB                 call    __RTC_CheckEsp
.text:00014E00                 mov     esp, ebp
.text:00014E02                 pop     ebp
.text:00014E03                 retn    8
.text:00014E03 ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z endp
.text:00014E03
.text:00014E03 ; ---------------------------------------------------------------------------
.text:00014E06                 align 4
.text:00014E06 _text           ends
.text:00014E06
.text:00014E08 ; ===========================================================================
.text:00014E08
.text:00014E08 ; Segment type: Pure code
.text:00014E08 ; Segment permissions: Read/Execute
.text:00014E08 _text           segment para public 'CODE' use32
.text:00014E08                 assume cs:_text
.text:00014E08                 ;org 14E08h
.text:00014E08 ; COMDAT (pick any)
.text:00014E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014E08
.text:00014E08 ; =============== S U B R O U T I N E =======================================
.text:00014E08
.text:00014E08 ; Attributes: bp-based frame
.text:00014E08
.text:00014E08 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00014E08                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00014E08 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00014E08                                         ; CODE XREF: CObjectVector<CArcExtInfo>::operator[](uint)+15p
.text:00014E08                                         ; CObjectVector<CBuffer<uchar>>::operator[](uint)+15p ...
.text:00014E08
.text:00014E08 var_4           = dword ptr -4
.text:00014E08 arg_0           = dword ptr  8
.text:00014E08
.text:00014E08                 push    ebp
.text:00014E09                 mov     ebp, esp
.text:00014E0B                 push    ecx
.text:00014E0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014E13                 mov     [ebp+var_4], ecx
.text:00014E16                 mov     eax, [ebp+var_4]
.text:00014E19                 mov     ecx, [eax]
.text:00014E1B                 mov     edx, [ebp+arg_0]
.text:00014E1E                 lea     eax, [ecx+edx*4]
.text:00014E21                 mov     esp, ebp
.text:00014E23                 pop     ebp
.text:00014E24                 retn    4
.text:00014E24 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00014E24
.text:00014E24 ; ---------------------------------------------------------------------------
.text:00014E27                 align 4
.text:00014E27 _text           ends
.text:00014E27
.text:00014E28 ; ===========================================================================
.text:00014E28
.text:00014E28 ; Segment type: Pure code
.text:00014E28 ; Segment permissions: Read/Execute
.text:00014E28 _text           segment para public 'CODE' use32
.text:00014E28                 assume cs:_text
.text:00014E28                 ;org 14E28h
.text:00014E28 ; COMDAT (pick any)
.text:00014E28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014E28
.text:00014E28 ; =============== S U B R O U T I N E =======================================
.text:00014E28
.text:00014E28 ; Attributes: bp-based frame
.text:00014E28
.text:00014E28 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00014E28                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00014E28 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00014E28                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:00014E28                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+64p ...
.text:00014E28
.text:00014E28 var_4           = dword ptr -4
.text:00014E28 arg_0           = dword ptr  8
.text:00014E28
.text:00014E28                 push    ebp
.text:00014E29                 mov     ebp, esp
.text:00014E2B                 push    ecx
.text:00014E2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014E33                 mov     [ebp+var_4], ecx
.text:00014E36                 mov     eax, [ebp+var_4]
.text:00014E39                 mov     ecx, [eax]
.text:00014E3B                 mov     edx, [ebp+arg_0]
.text:00014E3E                 lea     eax, [ecx+edx*4]
.text:00014E41                 mov     esp, ebp
.text:00014E43                 pop     ebp
.text:00014E44                 retn    4
.text:00014E44 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00014E44
.text:00014E44 ; ---------------------------------------------------------------------------
.text:00014E47                 align 4
.text:00014E47 _text           ends
.text:00014E47
.text:00014E48 ; ===========================================================================
.text:00014E48
.text:00014E48 ; Segment type: Pure code
.text:00014E48 ; Segment permissions: Read/Execute
.text:00014E48 _text           segment para public 'CODE' use32
.text:00014E48                 assume cs:_text
.text:00014E48                 ;org 14E48h
.text:00014E48 ; COMDAT (pick any)
.text:00014E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014E48
.text:00014E48 ; =============== S U B R O U T I N E =======================================
.text:00014E48
.text:00014E48 ; Attributes: bp-based frame
.text:00014E48
.text:00014E48 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(class CMyComPtr<struct IInStream> const &)
.text:00014E48                 public ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z
.text:00014E48 ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z proc near
.text:00014E48                                         ; CODE XREF: CArc::CArc(CArc const &)+4Dp
.text:00014E48
.text:00014E48 var_4           = dword ptr -4
.text:00014E48 arg_0           = dword ptr  8
.text:00014E48
.text:00014E48                 push    ebp
.text:00014E49                 mov     ebp, esp
.text:00014E4B                 push    ecx
.text:00014E4C                 push    esi
.text:00014E4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014E54                 mov     [ebp+var_4], ecx
.text:00014E57                 mov     eax, [ebp+var_4]
.text:00014E5A                 mov     ecx, [ebp+arg_0]
.text:00014E5D                 mov     edx, [ecx]
.text:00014E5F                 mov     [eax], edx
.text:00014E61                 mov     eax, [ebp+var_4]
.text:00014E64                 cmp     dword ptr [eax], 0
.text:00014E67                 jz      short loc_14E84
.text:00014E69                 mov     ecx, [ebp+var_4]
.text:00014E6C                 mov     edx, [ecx]
.text:00014E6E                 mov     eax, [ebp+var_4]
.text:00014E71                 mov     ecx, [eax]
.text:00014E73                 mov     edx, [edx]
.text:00014E75                 mov     esi, esp
.text:00014E77                 push    ecx
.text:00014E78                 mov     eax, [edx+4]
.text:00014E7B                 call    eax
.text:00014E7D                 cmp     esi, esp
.text:00014E7F                 call    __RTC_CheckEsp
.text:00014E84
.text:00014E84 loc_14E84:                              ; CODE XREF: CMyComPtr<IInStream>::CMyComPtr<IInStream>(CMyComPtr<IInStream> const &)+1Fj
.text:00014E84                 mov     eax, [ebp+var_4]
.text:00014E87                 pop     esi
.text:00014E88                 add     esp, 4
.text:00014E8B                 cmp     ebp, esp
.text:00014E8D                 call    __RTC_CheckEsp
.text:00014E92                 mov     esp, ebp
.text:00014E94                 pop     ebp
.text:00014E95                 retn    4
.text:00014E95 ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z endp
.text:00014E95
.text:00014E95 _text           ends
.text:00014E95
.text:00014E98 ; ===========================================================================
.text:00014E98
.text:00014E98 ; Segment type: Pure code
.text:00014E98 ; Segment permissions: Read/Execute
.text:00014E98 _text           segment para public 'CODE' use32
.text:00014E98                 assume cs:_text
.text:00014E98                 ;org 14E98h
.text:00014E98 ; COMDAT (pick any)
.text:00014E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014E98
.text:00014E98 ; =============== S U B R O U T I N E =======================================
.text:00014E98
.text:00014E98 ; Attributes: bp-based frame
.text:00014E98
.text:00014E98 ; private: void __thiscall CRecordVector<unsigned int>::MoveItems(unsigned int, unsigned int)
.text:00014E98                 public ?MoveItems@?$CRecordVector@I@@AAEXII@Z
.text:00014E98 ?MoveItems@?$CRecordVector@I@@AAEXII@Z proc near
.text:00014E98                                         ; CODE XREF: CRecordVector<uint>::Insert(uint,uint)+24p
.text:00014E98
.text:00014E98 var_4           = dword ptr -4
.text:00014E98 arg_0           = dword ptr  8
.text:00014E98 arg_4           = dword ptr  0Ch
.text:00014E98
.text:00014E98                 push    ebp
.text:00014E99                 mov     ebp, esp
.text:00014E9B                 push    ecx
.text:00014E9C                 push    esi
.text:00014E9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014EA4                 mov     [ebp+var_4], ecx
.text:00014EA7                 mov     eax, [ebp+var_4]
.text:00014EAA                 mov     ecx, [eax+4]
.text:00014EAD                 sub     ecx, [ebp+arg_4]
.text:00014EB0                 shl     ecx, 2
.text:00014EB3                 mov     esi, esp
.text:00014EB5                 push    ecx             ; Size
.text:00014EB6                 mov     edx, [ebp+var_4]
.text:00014EB9                 mov     eax, [edx]
.text:00014EBB                 mov     ecx, [ebp+arg_4]
.text:00014EBE                 lea     edx, [eax+ecx*4]
.text:00014EC1                 push    edx             ; Src
.text:00014EC2                 mov     eax, [ebp+var_4]
.text:00014EC5                 mov     ecx, [eax]
.text:00014EC7                 mov     edx, [ebp+arg_0]
.text:00014ECA                 lea     eax, [ecx+edx*4]
.text:00014ECD                 push    eax             ; Dst
.text:00014ECE                 call    dword ptr ds:__imp__memmove
.text:00014ED4                 add     esp, 0Ch
.text:00014ED7                 cmp     esi, esp
.text:00014ED9                 call    __RTC_CheckEsp
.text:00014EDE                 pop     esi
.text:00014EDF                 add     esp, 4
.text:00014EE2                 cmp     ebp, esp
.text:00014EE4                 call    __RTC_CheckEsp
.text:00014EE9                 mov     esp, ebp
.text:00014EEB                 pop     ebp
.text:00014EEC                 retn    8
.text:00014EEC ?MoveItems@?$CRecordVector@I@@AAEXII@Z endp
.text:00014EEC
.text:00014EEC ; ---------------------------------------------------------------------------
.text:00014EEF                 align 10h
.text:00014EEF _text           ends
.text:00014EEF
.text:00014EF0 ; ===========================================================================
.text:00014EF0
.text:00014EF0 ; Segment type: Pure code
.text:00014EF0 ; Segment permissions: Read/Execute
.text:00014EF0 _text           segment para public 'CODE' use32
.text:00014EF0                 assume cs:_text
.text:00014EF0                 ;org 14EF0h
.text:00014EF0 ; COMDAT (pick any)
.text:00014EF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014EF0
.text:00014EF0 ; =============== S U B R O U T I N E =======================================
.text:00014EF0
.text:00014EF0 ; Attributes: bp-based frame
.text:00014EF0
.text:00014EF0 ; private: void __thiscall CRecordVector<unsigned int>::ReserveOnePosition(void)
.text:00014EF0                 public ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
.text:00014EF0 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ proc near
.text:00014EF0                                         ; CODE XREF: CRecordVector<uint>::Add(uint)+1Ap
.text:00014EF0                                         ; CRecordVector<uint>::Insert(uint,uint)+11p
.text:00014EF0
.text:00014EF0 var_14          = dword ptr -14h
.text:00014EF0 var_10          = dword ptr -10h
.text:00014EF0 Dst             = dword ptr -0Ch
.text:00014EF0 var_8           = dword ptr -8
.text:00014EF0 var_4           = dword ptr -4
.text:00014EF0
.text:00014EF0                 push    ebp
.text:00014EF1                 mov     ebp, esp
.text:00014EF3                 sub     esp, 14h
.text:00014EF6                 mov     eax, 0CCCCCCCCh
.text:00014EFB                 mov     [ebp+var_14], eax
.text:00014EFE                 mov     [ebp+var_10], eax
.text:00014F01                 mov     [ebp+Dst], eax
.text:00014F04                 mov     [ebp+var_8], eax
.text:00014F07                 mov     [ebp+var_4], eax
.text:00014F0A                 mov     [ebp+var_4], ecx
.text:00014F0D                 mov     eax, [ebp+var_4]
.text:00014F10                 mov     ecx, [ebp+var_4]
.text:00014F13                 mov     edx, [eax+4]
.text:00014F16                 cmp     edx, [ecx+8]
.text:00014F19                 jnz     loc_14FA4
.text:00014F1F                 mov     eax, [ebp+var_4]
.text:00014F22                 mov     ecx, [eax+8]
.text:00014F25                 shr     ecx, 2
.text:00014F28                 mov     edx, [ebp+var_4]
.text:00014F2B                 mov     eax, [edx+8]
.text:00014F2E                 lea     ecx, [eax+ecx+1]
.text:00014F32                 mov     [ebp+var_8], ecx
.text:00014F35                 xor     ecx, ecx
.text:00014F37                 mov     eax, [ebp+var_8]
.text:00014F3A                 mov     edx, 4
.text:00014F3F                 mul     edx
.text:00014F41                 seto    cl
.text:00014F44                 neg     ecx
.text:00014F46                 or      ecx, eax
.text:00014F48                 push    ecx             ; unsigned int
.text:00014F49                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00014F4E                 add     esp, 4
.text:00014F51                 mov     [ebp+var_10], eax
.text:00014F54                 mov     eax, [ebp+var_10]
.text:00014F57                 mov     [ebp+Dst], eax
.text:00014F5A                 mov     ecx, [ebp+var_4]
.text:00014F5D                 cmp     dword ptr [ecx+4], 0
.text:00014F61                 jz      short loc_14F7F
.text:00014F63                 mov     edx, [ebp+var_4]
.text:00014F66                 mov     eax, [edx+4]
.text:00014F69                 shl     eax, 2
.text:00014F6C                 push    eax             ; Size
.text:00014F6D                 mov     ecx, [ebp+var_4]
.text:00014F70                 mov     edx, [ecx]
.text:00014F72                 push    edx             ; Src
.text:00014F73                 mov     eax, [ebp+Dst]
.text:00014F76                 push    eax             ; Dst
.text:00014F77                 call    _memcpy
.text:00014F7C                 add     esp, 0Ch
.text:00014F7F
.text:00014F7F loc_14F7F:                              ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+71j
.text:00014F7F                 mov     ecx, [ebp+var_4]
.text:00014F82                 mov     edx, [ecx]
.text:00014F84                 mov     [ebp+var_14], edx
.text:00014F87                 mov     eax, [ebp+var_14]
.text:00014F8A                 push    eax             ; void *
.text:00014F8B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00014F90                 add     esp, 4
.text:00014F93                 mov     ecx, [ebp+var_4]
.text:00014F96                 mov     edx, [ebp+Dst]
.text:00014F99                 mov     [ecx], edx
.text:00014F9B                 mov     eax, [ebp+var_4]
.text:00014F9E                 mov     ecx, [ebp+var_8]
.text:00014FA1                 mov     [eax+8], ecx
.text:00014FA4
.text:00014FA4 loc_14FA4:                              ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+29j
.text:00014FA4                 add     esp, 14h
.text:00014FA7                 cmp     ebp, esp
.text:00014FA9                 call    __RTC_CheckEsp
.text:00014FAE                 mov     esp, ebp
.text:00014FB0                 pop     ebp
.text:00014FB1                 retn
.text:00014FB1 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ endp
.text:00014FB1
.text:00014FB1 ; ---------------------------------------------------------------------------
.text:00014FB2                 align 4
.text:00014FB2 _text           ends
.text:00014FB2
.text:00014FB4 ; ===========================================================================
.text:00014FB4
.text:00014FB4 ; Segment type: Pure code
.text:00014FB4 ; Segment permissions: Read/Execute
.text:00014FB4 _text           segment para public 'CODE' use32
.text:00014FB4                 assume cs:_text
.text:00014FB4                 ;org 14FB4h
.text:00014FB4 ; COMDAT (pick any)
.text:00014FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00014FB4
.text:00014FB4 ; =============== S U B R O U T I N E =======================================
.text:00014FB4
.text:00014FB4 ; Attributes: bp-based frame
.text:00014FB4
.text:00014FB4 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:00014FB4                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:00014FB4 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: CBuffer<uchar>::Alloc(uint)+25p
.text:00014FB4
.text:00014FB4 var_8           = dword ptr -8
.text:00014FB4 var_4           = dword ptr -4
.text:00014FB4
.text:00014FB4                 push    ebp
.text:00014FB5                 mov     ebp, esp
.text:00014FB7                 sub     esp, 8
.text:00014FBA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00014FC1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00014FC8                 mov     [ebp+var_4], ecx
.text:00014FCB                 mov     eax, [ebp+var_4]
.text:00014FCE                 cmp     dword ptr [eax], 0
.text:00014FD1                 jz      short loc_14FF0
.text:00014FD3                 mov     ecx, [ebp+var_4]
.text:00014FD6                 mov     edx, [ecx]
.text:00014FD8                 mov     [ebp+var_8], edx
.text:00014FDB                 mov     eax, [ebp+var_8]
.text:00014FDE                 push    eax             ; void *
.text:00014FDF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00014FE4                 add     esp, 4
.text:00014FE7                 mov     ecx, [ebp+var_4]
.text:00014FEA                 mov     dword ptr [ecx], 0
.text:00014FF0
.text:00014FF0 loc_14FF0:                              ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:00014FF0                 mov     edx, [ebp+var_4]
.text:00014FF3                 mov     dword ptr [edx+4], 0
.text:00014FFA                 add     esp, 8
.text:00014FFD                 cmp     ebp, esp
.text:00014FFF                 call    __RTC_CheckEsp
.text:00015004                 mov     esp, ebp
.text:00015006                 pop     ebp
.text:00015007                 retn
.text:00015007 ?Free@?$CBuffer@E@@QAEXXZ endp
.text:00015007
.text:00015007 _text           ends
.text:00015007
.text:00015008 ; ===========================================================================
.text:00015008
.text:00015008 ; Segment type: Pure code
.text:00015008 ; Segment permissions: Read/Execute
.text:00015008 _text           segment para public 'CODE' use32
.text:00015008                 assume cs:_text
.text:00015008                 ;org 15008h
.text:00015008 ; COMDAT (pick any)
.text:00015008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015008
.text:00015008 ; =============== S U B R O U T I N E =======================================
.text:00015008
.text:00015008 ; Attributes: bp-based frame
.text:00015008
.text:00015008 ; public: __thiscall CMyComPtr<struct IInArchive>::CMyComPtr<struct IInArchive>(class CMyComPtr<struct IInArchive> const &)
.text:00015008                 public ??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z
.text:00015008 ??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z proc near
.text:00015008                                         ; CODE XREF: CArc::CArc(CArc const &)+34p
.text:00015008
.text:00015008 var_4           = dword ptr -4
.text:00015008 arg_0           = dword ptr  8
.text:00015008
.text:00015008                 push    ebp
.text:00015009                 mov     ebp, esp
.text:0001500B                 push    ecx
.text:0001500C                 push    esi
.text:0001500D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00015014                 mov     [ebp+var_4], ecx
.text:00015017                 mov     eax, [ebp+var_4]
.text:0001501A                 mov     ecx, [ebp+arg_0]
.text:0001501D                 mov     edx, [ecx]
.text:0001501F                 mov     [eax], edx
.text:00015021                 mov     eax, [ebp+var_4]
.text:00015024                 cmp     dword ptr [eax], 0
.text:00015027                 jz      short loc_15044
.text:00015029                 mov     ecx, [ebp+var_4]
.text:0001502C                 mov     edx, [ecx]
.text:0001502E                 mov     eax, [ebp+var_4]
.text:00015031                 mov     ecx, [eax]
.text:00015033                 mov     edx, [edx]
.text:00015035                 mov     esi, esp
.text:00015037                 push    ecx
.text:00015038                 mov     eax, [edx+4]
.text:0001503B                 call    eax
.text:0001503D                 cmp     esi, esp
.text:0001503F                 call    __RTC_CheckEsp
.text:00015044
.text:00015044 loc_15044:                              ; CODE XREF: CMyComPtr<IInArchive>::CMyComPtr<IInArchive>(CMyComPtr<IInArchive> const &)+1Fj
.text:00015044                 mov     eax, [ebp+var_4]
.text:00015047                 pop     esi
.text:00015048                 add     esp, 4
.text:0001504B                 cmp     ebp, esp
.text:0001504D                 call    __RTC_CheckEsp
.text:00015052                 mov     esp, ebp
.text:00015054                 pop     ebp
.text:00015055                 retn    4
.text:00015055 ??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z endp
.text:00015055
.text:00015055 _text           ends
.text:00015055
.text:00015058 ; ===========================================================================
.text:00015058
.text:00015058 ; Segment type: Pure code
.text:00015058 ; Segment permissions: Read/Execute
.text:00015058 _text           segment para public 'CODE' use32
.text:00015058                 assume cs:_text
.text:00015058                 ;org 15058h
.text:00015058 ; COMDAT (pick any)
.text:00015058                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015058
.text:00015058 ; =============== S U B R O U T I N E =======================================
.text:00015058
.text:00015058 ; Attributes: bp-based frame
.text:00015058
.text:00015058 ; public: __thiscall CMyComPtr<struct IArchiveGetRawProps>::CMyComPtr<struct IArchiveGetRawProps>(class CMyComPtr<struct IArchiveGetRawProps> const &)
.text:00015058                 public ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@ABV0@@Z
.text:00015058 ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@ABV0@@Z proc near
.text:00015058                                         ; CODE XREF: CArc::CArc(CArc const &)+63p
.text:00015058
.text:00015058 var_4           = dword ptr -4
.text:00015058 arg_0           = dword ptr  8
.text:00015058
.text:00015058                 push    ebp
.text:00015059                 mov     ebp, esp
.text:0001505B                 push    ecx
.text:0001505C                 push    esi
.text:0001505D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00015064                 mov     [ebp+var_4], ecx
.text:00015067                 mov     eax, [ebp+var_4]
.text:0001506A                 mov     ecx, [ebp+arg_0]
.text:0001506D                 mov     edx, [ecx]
.text:0001506F                 mov     [eax], edx
.text:00015071                 mov     eax, [ebp+var_4]
.text:00015074                 cmp     dword ptr [eax], 0
.text:00015077                 jz      short loc_15094
.text:00015079                 mov     ecx, [ebp+var_4]
.text:0001507C                 mov     edx, [ecx]
.text:0001507E                 mov     eax, [ebp+var_4]
.text:00015081                 mov     ecx, [eax]
.text:00015083                 mov     edx, [edx]
.text:00015085                 mov     esi, esp
.text:00015087                 push    ecx
.text:00015088                 mov     eax, [edx+4]
.text:0001508B                 call    eax
.text:0001508D                 cmp     esi, esp
.text:0001508F                 call    __RTC_CheckEsp
.text:00015094
.text:00015094 loc_15094:                              ; CODE XREF: CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>(CMyComPtr<IArchiveGetRawProps> const &)+1Fj
.text:00015094                 mov     eax, [ebp+var_4]
.text:00015097                 pop     esi
.text:00015098                 add     esp, 4
.text:0001509B                 cmp     ebp, esp
.text:0001509D                 call    __RTC_CheckEsp
.text:000150A2                 mov     esp, ebp
.text:000150A4                 pop     ebp
.text:000150A5                 retn    4
.text:000150A5 ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@ABV0@@Z endp
.text:000150A5
.text:000150A5 _text           ends
.text:000150A5
.text:000150A8 ; ===========================================================================
.text:000150A8
.text:000150A8 ; Segment type: Pure code
.text:000150A8 ; Segment permissions: Read/Execute
.text:000150A8 _text           segment para public 'CODE' use32
.text:000150A8                 assume cs:_text
.text:000150A8                 ;org 150A8h
.text:000150A8 ; COMDAT (pick any)
.text:000150A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000150A8
.text:000150A8 ; =============== S U B R O U T I N E =======================================
.text:000150A8
.text:000150A8 ; Attributes: bp-based frame
.text:000150A8
.text:000150A8 ; public: __thiscall CMyComPtr<struct IArchiveGetRootProps>::CMyComPtr<struct IArchiveGetRootProps>(class CMyComPtr<struct IArchiveGetRootProps> const &)
.text:000150A8                 public ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@ABV0@@Z
.text:000150A8 ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@ABV0@@Z proc near
.text:000150A8                                         ; CODE XREF: CArc::CArc(CArc const &)+79p
.text:000150A8
.text:000150A8 var_4           = dword ptr -4
.text:000150A8 arg_0           = dword ptr  8
.text:000150A8
.text:000150A8                 push    ebp
.text:000150A9                 mov     ebp, esp
.text:000150AB                 push    ecx
.text:000150AC                 push    esi
.text:000150AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000150B4                 mov     [ebp+var_4], ecx
.text:000150B7                 mov     eax, [ebp+var_4]
.text:000150BA                 mov     ecx, [ebp+arg_0]
.text:000150BD                 mov     edx, [ecx]
.text:000150BF                 mov     [eax], edx
.text:000150C1                 mov     eax, [ebp+var_4]
.text:000150C4                 cmp     dword ptr [eax], 0
.text:000150C7                 jz      short loc_150E4
.text:000150C9                 mov     ecx, [ebp+var_4]
.text:000150CC                 mov     edx, [ecx]
.text:000150CE                 mov     eax, [ebp+var_4]
.text:000150D1                 mov     ecx, [eax]
.text:000150D3                 mov     edx, [edx]
.text:000150D5                 mov     esi, esp
.text:000150D7                 push    ecx
.text:000150D8                 mov     eax, [edx+4]
.text:000150DB                 call    eax
.text:000150DD                 cmp     esi, esp
.text:000150DF                 call    __RTC_CheckEsp
.text:000150E4
.text:000150E4 loc_150E4:                              ; CODE XREF: CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>(CMyComPtr<IArchiveGetRootProps> const &)+1Fj
.text:000150E4                 mov     eax, [ebp+var_4]
.text:000150E7                 pop     esi
.text:000150E8                 add     esp, 4
.text:000150EB                 cmp     ebp, esp
.text:000150ED                 call    __RTC_CheckEsp
.text:000150F2                 mov     esp, ebp
.text:000150F4                 pop     ebp
.text:000150F5                 retn    4
.text:000150F5 ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@ABV0@@Z endp
.text:000150F5
.text:000150F5 _text           ends
.text:000150F5
.text:000150F8 ; ===========================================================================
.text:000150F8
.text:000150F8 ; Segment type: Pure code
.text:000150F8 ; Segment permissions: Read/Execute
.text:000150F8 _text           segment para public 'CODE' use32
.text:000150F8                 assume cs:_text
.text:000150F8                 ;org 150F8h
.text:000150F8 ; COMDAT (pick any)
.text:000150F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000150F8
.text:000150F8 ; =============== S U B R O U T I N E =======================================
.text:000150F8
.text:000150F8 ; Attributes: bp-based frame
.text:000150F8
.text:000150F8 ; private: void __thiscall CRecordVector<int>::MoveItems(unsigned int, unsigned int)
.text:000150F8                 public ?MoveItems@?$CRecordVector@H@@AAEXII@Z
.text:000150F8 ?MoveItems@?$CRecordVector@H@@AAEXII@Z proc near
.text:000150F8                                         ; CODE XREF: CRecordVector<int>::Insert(uint,int)+24p
.text:000150F8
.text:000150F8 var_4           = dword ptr -4
.text:000150F8 arg_0           = dword ptr  8
.text:000150F8 arg_4           = dword ptr  0Ch
.text:000150F8
.text:000150F8                 push    ebp
.text:000150F9                 mov     ebp, esp
.text:000150FB                 push    ecx
.text:000150FC                 push    esi
.text:000150FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00015104                 mov     [ebp+var_4], ecx
.text:00015107                 mov     eax, [ebp+var_4]
.text:0001510A                 mov     ecx, [eax+4]
.text:0001510D                 sub     ecx, [ebp+arg_4]
.text:00015110                 shl     ecx, 2
.text:00015113                 mov     esi, esp
.text:00015115                 push    ecx             ; Size
.text:00015116                 mov     edx, [ebp+var_4]
.text:00015119                 mov     eax, [edx]
.text:0001511B                 mov     ecx, [ebp+arg_4]
.text:0001511E                 lea     edx, [eax+ecx*4]
.text:00015121                 push    edx             ; Src
.text:00015122                 mov     eax, [ebp+var_4]
.text:00015125                 mov     ecx, [eax]
.text:00015127                 mov     edx, [ebp+arg_0]
.text:0001512A                 lea     eax, [ecx+edx*4]
.text:0001512D                 push    eax             ; Dst
.text:0001512E                 call    dword ptr ds:__imp__memmove
.text:00015134                 add     esp, 0Ch
.text:00015137                 cmp     esi, esp
.text:00015139                 call    __RTC_CheckEsp
.text:0001513E                 pop     esi
.text:0001513F                 add     esp, 4
.text:00015142                 cmp     ebp, esp
.text:00015144                 call    __RTC_CheckEsp
.text:00015149                 mov     esp, ebp
.text:0001514B                 pop     ebp
.text:0001514C                 retn    8
.text:0001514C ?MoveItems@?$CRecordVector@H@@AAEXII@Z endp
.text:0001514C
.text:0001514C ; ---------------------------------------------------------------------------
.text:0001514F                 align 10h
.text:0001514F _text           ends
.text:0001514F
.text:00015150 ; ===========================================================================
.text:00015150
.text:00015150 ; Segment type: Pure code
.text:00015150 ; Segment permissions: Read/Execute
.text:00015150 _text           segment para public 'CODE' use32
.text:00015150                 assume cs:_text
.text:00015150                 ;org 15150h
.text:00015150 ; COMDAT (pick any)
.text:00015150                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015150
.text:00015150 ; =============== S U B R O U T I N E =======================================
.text:00015150
.text:00015150 ; Attributes: bp-based frame
.text:00015150
.text:00015150 ; private: void __thiscall CRecordVector<int>::ReserveOnePosition(void)
.text:00015150                 public ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ
.text:00015150 ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ proc near
.text:00015150                                         ; CODE XREF: CRecordVector<int>::Add(int)+1Ap
.text:00015150                                         ; CRecordVector<int>::Insert(uint,int)+11p
.text:00015150
.text:00015150 var_14          = dword ptr -14h
.text:00015150 var_10          = dword ptr -10h
.text:00015150 Dst             = dword ptr -0Ch
.text:00015150 var_8           = dword ptr -8
.text:00015150 var_4           = dword ptr -4
.text:00015150
.text:00015150                 push    ebp
.text:00015151                 mov     ebp, esp
.text:00015153                 sub     esp, 14h
.text:00015156                 mov     eax, 0CCCCCCCCh
.text:0001515B                 mov     [ebp+var_14], eax
.text:0001515E                 mov     [ebp+var_10], eax
.text:00015161                 mov     [ebp+Dst], eax
.text:00015164                 mov     [ebp+var_8], eax
.text:00015167                 mov     [ebp+var_4], eax
.text:0001516A                 mov     [ebp+var_4], ecx
.text:0001516D                 mov     eax, [ebp+var_4]
.text:00015170                 mov     ecx, [ebp+var_4]
.text:00015173                 mov     edx, [eax+4]
.text:00015176                 cmp     edx, [ecx+8]
.text:00015179                 jnz     loc_15204
.text:0001517F                 mov     eax, [ebp+var_4]
.text:00015182                 mov     ecx, [eax+8]
.text:00015185                 shr     ecx, 2
.text:00015188                 mov     edx, [ebp+var_4]
.text:0001518B                 mov     eax, [edx+8]
.text:0001518E                 lea     ecx, [eax+ecx+1]
.text:00015192                 mov     [ebp+var_8], ecx
.text:00015195                 xor     ecx, ecx
.text:00015197                 mov     eax, [ebp+var_8]
.text:0001519A                 mov     edx, 4
.text:0001519F                 mul     edx
.text:000151A1                 seto    cl
.text:000151A4                 neg     ecx
.text:000151A6                 or      ecx, eax
.text:000151A8                 push    ecx             ; unsigned int
.text:000151A9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000151AE                 add     esp, 4
.text:000151B1                 mov     [ebp+var_10], eax
.text:000151B4                 mov     eax, [ebp+var_10]
.text:000151B7                 mov     [ebp+Dst], eax
.text:000151BA                 mov     ecx, [ebp+var_4]
.text:000151BD                 cmp     dword ptr [ecx+4], 0
.text:000151C1                 jz      short loc_151DF
.text:000151C3                 mov     edx, [ebp+var_4]
.text:000151C6                 mov     eax, [edx+4]
.text:000151C9                 shl     eax, 2
.text:000151CC                 push    eax             ; Size
.text:000151CD                 mov     ecx, [ebp+var_4]
.text:000151D0                 mov     edx, [ecx]
.text:000151D2                 push    edx             ; Src
.text:000151D3                 mov     eax, [ebp+Dst]
.text:000151D6                 push    eax             ; Dst
.text:000151D7                 call    _memcpy
.text:000151DC                 add     esp, 0Ch
.text:000151DF
.text:000151DF loc_151DF:                              ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+71j
.text:000151DF                 mov     ecx, [ebp+var_4]
.text:000151E2                 mov     edx, [ecx]
.text:000151E4                 mov     [ebp+var_14], edx
.text:000151E7                 mov     eax, [ebp+var_14]
.text:000151EA                 push    eax             ; void *
.text:000151EB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000151F0                 add     esp, 4
.text:000151F3                 mov     ecx, [ebp+var_4]
.text:000151F6                 mov     edx, [ebp+Dst]
.text:000151F9                 mov     [ecx], edx
.text:000151FB                 mov     eax, [ebp+var_4]
.text:000151FE                 mov     ecx, [ebp+var_8]
.text:00015201                 mov     [eax+8], ecx
.text:00015204
.text:00015204 loc_15204:                              ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+29j
.text:00015204                 add     esp, 14h
.text:00015207                 cmp     ebp, esp
.text:00015209                 call    __RTC_CheckEsp
.text:0001520E                 mov     esp, ebp
.text:00015210                 pop     ebp
.text:00015211                 retn
.text:00015211 ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ endp
.text:00015211
.text:00015211 ; ---------------------------------------------------------------------------
.text:00015212                 align 4
.text:00015212 _text           ends
.text:00015212
.text:00015214 ; ===========================================================================
.text:00015214
.text:00015214 ; Segment type: Pure code
.text:00015214 ; Segment permissions: Read/Execute
.text:00015214 _text           segment para public 'CODE' use32
.text:00015214                 assume cs:_text
.text:00015214                 ;org 15214h
.text:00015214 ; COMDAT (pick any)
.text:00015214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015214
.text:00015214 ; =============== S U B R O U T I N E =======================================
.text:00015214
.text:00015214 ; Attributes: bp-based frame
.text:00015214
.text:00015214 ; public: int __thiscall CRecordVector<int>::FindInSorted(int, unsigned int, unsigned int)const
.text:00015214                 public ?FindInSorted@?$CRecordVector@H@@QBEHHII@Z
.text:00015214 ?FindInSorted@?$CRecordVector@H@@QBEHHII@Z proc near
.text:00015214                                         ; CODE XREF: CRecordVector<int>::FindInSorted(int)+1Ep
.text:00015214
.text:00015214 var_C           = dword ptr -0Ch
.text:00015214 var_8           = dword ptr -8
.text:00015214 var_4           = dword ptr -4
.text:00015214 arg_0           = dword ptr  8
.text:00015214 arg_4           = dword ptr  0Ch
.text:00015214 arg_8           = dword ptr  10h
.text:00015214
.text:00015214                 push    ebp
.text:00015215                 mov     ebp, esp
.text:00015217                 sub     esp, 0Ch
.text:0001521A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00015221                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00015228                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0001522F                 mov     [ebp+var_4], ecx
.text:00015232
.text:00015232 loc_15232:                              ; CODE XREF: CRecordVector<int>::FindInSorted(int,uint,uint):loc_1527Cj
.text:00015232                 mov     eax, [ebp+arg_4]
.text:00015235                 cmp     eax, [ebp+arg_8]
.text:00015238                 jz      short loc_1527E
.text:0001523A                 mov     ecx, [ebp+arg_4]
.text:0001523D                 add     ecx, [ebp+arg_8]
.text:00015240                 shr     ecx, 1
.text:00015242                 mov     [ebp+var_8], ecx
.text:00015245                 mov     edx, [ebp+var_8]
.text:00015248                 push    edx
.text:00015249                 mov     ecx, [ebp+var_4]
.text:0001524C                 call    ??A?$CRecordVector@H@@QBEABHI@Z ; CRecordVector<int>::operator[](uint)
.text:00015251                 mov     eax, [eax]
.text:00015253                 mov     [ebp+var_C], eax
.text:00015256                 mov     ecx, [ebp+arg_0]
.text:00015259                 cmp     ecx, [ebp+var_C]
.text:0001525C                 jnz     short loc_15263
.text:0001525E                 mov     eax, [ebp+var_8]
.text:00015261                 jmp     short loc_15281
.text:00015263 ; ---------------------------------------------------------------------------
.text:00015263
.text:00015263 loc_15263:                              ; CODE XREF: CRecordVector<int>::FindInSorted(int,uint,uint)+48j
.text:00015263                 mov     edx, [ebp+arg_0]
.text:00015266                 cmp     edx, [ebp+var_C]
.text:00015269                 jge     short loc_15273
.text:0001526B                 mov     eax, [ebp+var_8]
.text:0001526E                 mov     [ebp+arg_8], eax
.text:00015271                 jmp     short loc_1527C
.text:00015273 ; ---------------------------------------------------------------------------
.text:00015273
.text:00015273 loc_15273:                              ; CODE XREF: CRecordVector<int>::FindInSorted(int,uint,uint)+55j
.text:00015273                 mov     ecx, [ebp+var_8]
.text:00015276                 add     ecx, 1
.text:00015279                 mov     [ebp+arg_4], ecx
.text:0001527C
.text:0001527C loc_1527C:                              ; CODE XREF: CRecordVector<int>::FindInSorted(int,uint,uint)+5Dj
.text:0001527C                 jmp     short loc_15232
.text:0001527E ; ---------------------------------------------------------------------------
.text:0001527E
.text:0001527E loc_1527E:                              ; CODE XREF: CRecordVector<int>::FindInSorted(int,uint,uint)+24j
.text:0001527E                 or      eax, 0FFFFFFFFh
.text:00015281
.text:00015281 loc_15281:                              ; CODE XREF: CRecordVector<int>::FindInSorted(int,uint,uint)+4Dj
.text:00015281                 add     esp, 0Ch
.text:00015284                 cmp     ebp, esp
.text:00015286                 call    __RTC_CheckEsp
.text:0001528B                 mov     esp, ebp
.text:0001528D                 pop     ebp
.text:0001528E                 retn    0Ch
.text:0001528E ?FindInSorted@?$CRecordVector@H@@QBEHHII@Z endp
.text:0001528E
.text:0001528E ; ---------------------------------------------------------------------------
.text:00015291                 align 4
.text:00015291 _text           ends
.text:00015291
.text:00015294 ; ===========================================================================
.text:00015294
.text:00015294 ; Segment type: Pure code
.text:00015294 ; Segment permissions: Read/Execute
.text:00015294 _text           segment para public 'CODE' use32
.text:00015294                 assume cs:_text
.text:00015294                 ;org 15294h
.text:00015294 ; COMDAT (pick any)
.text:00015294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015294
.text:00015294 ; =============== S U B R O U T I N E =======================================
.text:00015294
.text:00015294 ; Attributes: bp-based frame
.text:00015294
.text:00015294 ; private: void __thiscall CRecordVector<void *>::MoveItems(unsigned int, unsigned int)
.text:00015294                 public ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
.text:00015294 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z proc near
.text:00015294                                         ; CODE XREF: CRecordVector<void *>::Insert(uint,void * const)+24p
.text:00015294
.text:00015294 var_4           = dword ptr -4
.text:00015294 arg_0           = dword ptr  8
.text:00015294 arg_4           = dword ptr  0Ch
.text:00015294
.text:00015294                 push    ebp
.text:00015295                 mov     ebp, esp
.text:00015297                 push    ecx
.text:00015298                 push    esi
.text:00015299                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000152A0                 mov     [ebp+var_4], ecx
.text:000152A3                 mov     eax, [ebp+var_4]
.text:000152A6                 mov     ecx, [eax+4]
.text:000152A9                 sub     ecx, [ebp+arg_4]
.text:000152AC                 shl     ecx, 2
.text:000152AF                 mov     esi, esp
.text:000152B1                 push    ecx             ; Size
.text:000152B2                 mov     edx, [ebp+var_4]
.text:000152B5                 mov     eax, [edx]
.text:000152B7                 mov     ecx, [ebp+arg_4]
.text:000152BA                 lea     edx, [eax+ecx*4]
.text:000152BD                 push    edx             ; Src
.text:000152BE                 mov     eax, [ebp+var_4]
.text:000152C1                 mov     ecx, [eax]
.text:000152C3                 mov     edx, [ebp+arg_0]
.text:000152C6                 lea     eax, [ecx+edx*4]
.text:000152C9                 push    eax             ; Dst
.text:000152CA                 call    dword ptr ds:__imp__memmove
.text:000152D0                 add     esp, 0Ch
.text:000152D3                 cmp     esi, esp
.text:000152D5                 call    __RTC_CheckEsp
.text:000152DA                 pop     esi
.text:000152DB                 add     esp, 4
.text:000152DE                 cmp     ebp, esp
.text:000152E0                 call    __RTC_CheckEsp
.text:000152E5                 mov     esp, ebp
.text:000152E7                 pop     ebp
.text:000152E8                 retn    8
.text:000152E8 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z endp
.text:000152E8
.text:000152E8 ; ---------------------------------------------------------------------------
.text:000152EB                 align 4
.text:000152EB _text           ends
.text:000152EB
.text:000152EC ; ===========================================================================
.text:000152EC
.text:000152EC ; Segment type: Pure code
.text:000152EC ; Segment permissions: Read/Execute
.text:000152EC _text           segment para public 'CODE' use32
.text:000152EC                 assume cs:_text
.text:000152EC                 ;org 152ECh
.text:000152EC ; COMDAT (pick any)
.text:000152EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000152EC
.text:000152EC ; =============== S U B R O U T I N E =======================================
.text:000152EC
.text:000152EC ; Attributes: bp-based frame
.text:000152EC
.text:000152EC ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:000152EC                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:000152EC ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:000152EC                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:000152EC                                         ; CRecordVector<void *>::Insert(uint,void * const)+11p
.text:000152EC
.text:000152EC var_14          = dword ptr -14h
.text:000152EC var_10          = dword ptr -10h
.text:000152EC Dst             = dword ptr -0Ch
.text:000152EC var_8           = dword ptr -8
.text:000152EC var_4           = dword ptr -4
.text:000152EC
.text:000152EC                 push    ebp
.text:000152ED                 mov     ebp, esp
.text:000152EF                 sub     esp, 14h
.text:000152F2                 mov     eax, 0CCCCCCCCh
.text:000152F7                 mov     [ebp+var_14], eax
.text:000152FA                 mov     [ebp+var_10], eax
.text:000152FD                 mov     [ebp+Dst], eax
.text:00015300                 mov     [ebp+var_8], eax
.text:00015303                 mov     [ebp+var_4], eax
.text:00015306                 mov     [ebp+var_4], ecx
.text:00015309                 mov     eax, [ebp+var_4]
.text:0001530C                 mov     ecx, [ebp+var_4]
.text:0001530F                 mov     edx, [eax+4]
.text:00015312                 cmp     edx, [ecx+8]
.text:00015315                 jnz     loc_153A0
.text:0001531B                 mov     eax, [ebp+var_4]
.text:0001531E                 mov     ecx, [eax+8]
.text:00015321                 shr     ecx, 2
.text:00015324                 mov     edx, [ebp+var_4]
.text:00015327                 mov     eax, [edx+8]
.text:0001532A                 lea     ecx, [eax+ecx+1]
.text:0001532E                 mov     [ebp+var_8], ecx
.text:00015331                 xor     ecx, ecx
.text:00015333                 mov     eax, [ebp+var_8]
.text:00015336                 mov     edx, 4
.text:0001533B                 mul     edx
.text:0001533D                 seto    cl
.text:00015340                 neg     ecx
.text:00015342                 or      ecx, eax
.text:00015344                 push    ecx             ; unsigned int
.text:00015345                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0001534A                 add     esp, 4
.text:0001534D                 mov     [ebp+var_10], eax
.text:00015350                 mov     eax, [ebp+var_10]
.text:00015353                 mov     [ebp+Dst], eax
.text:00015356                 mov     ecx, [ebp+var_4]
.text:00015359                 cmp     dword ptr [ecx+4], 0
.text:0001535D                 jz      short loc_1537B
.text:0001535F                 mov     edx, [ebp+var_4]
.text:00015362                 mov     eax, [edx+4]
.text:00015365                 shl     eax, 2
.text:00015368                 push    eax             ; Size
.text:00015369                 mov     ecx, [ebp+var_4]
.text:0001536C                 mov     edx, [ecx]
.text:0001536E                 push    edx             ; Src
.text:0001536F                 mov     eax, [ebp+Dst]
.text:00015372                 push    eax             ; Dst
.text:00015373                 call    _memcpy
.text:00015378                 add     esp, 0Ch
.text:0001537B
.text:0001537B loc_1537B:                              ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:0001537B                 mov     ecx, [ebp+var_4]
.text:0001537E                 mov     edx, [ecx]
.text:00015380                 mov     [ebp+var_14], edx
.text:00015383                 mov     eax, [ebp+var_14]
.text:00015386                 push    eax             ; void *
.text:00015387                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0001538C                 add     esp, 4
.text:0001538F                 mov     ecx, [ebp+var_4]
.text:00015392                 mov     edx, [ebp+Dst]
.text:00015395                 mov     [ecx], edx
.text:00015397                 mov     eax, [ebp+var_4]
.text:0001539A                 mov     ecx, [ebp+var_8]
.text:0001539D                 mov     [eax+8], ecx
.text:000153A0
.text:000153A0 loc_153A0:                              ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:000153A0                 add     esp, 14h
.text:000153A3                 cmp     ebp, esp
.text:000153A5                 call    __RTC_CheckEsp
.text:000153AA                 mov     esp, ebp
.text:000153AC                 pop     ebp
.text:000153AD                 retn
.text:000153AD ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:000153AD
.text:000153AD ; ---------------------------------------------------------------------------
.text:000153AE                 align 10h
.text:000153AE _text           ends
.text:000153AE
.text:000153B0 ; ===========================================================================
.text:000153B0
.text:000153B0 ; Segment type: Pure code
.text:000153B0 ; Segment permissions: Read/Execute
.text:000153B0 _text           segment para public 'CODE' use32
.text:000153B0                 assume cs:_text
.text:000153B0                 ;org 153B0h
.text:000153B0 ; COMDAT (pick any)
.text:000153B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000153B0
.text:000153B0 ; =============== S U B R O U T I N E =======================================
.text:000153B0
.text:000153B0 ; Attributes: bp-based frame
.text:000153B0
.text:000153B0 ; public: int const & __thiscall CRecordVector<int>::operator[](unsigned int)const
.text:000153B0                 public ??A?$CRecordVector@H@@QBEABHI@Z
.text:000153B0 ??A?$CRecordVector@H@@QBEABHI@Z proc near
.text:000153B0                                         ; CODE XREF: CRecordVector<int>::FindInSorted(int,uint,uint)+38p
.text:000153B0
.text:000153B0 var_4           = dword ptr -4
.text:000153B0 arg_0           = dword ptr  8
.text:000153B0
.text:000153B0                 push    ebp
.text:000153B1                 mov     ebp, esp
.text:000153B3                 push    ecx
.text:000153B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000153BB                 mov     [ebp+var_4], ecx
.text:000153BE                 mov     eax, [ebp+var_4]
.text:000153C1                 mov     ecx, [eax]
.text:000153C3                 mov     edx, [ebp+arg_0]
.text:000153C6                 lea     eax, [ecx+edx*4]
.text:000153C9                 mov     esp, ebp
.text:000153CB                 pop     ebp
.text:000153CC                 retn    4
.text:000153CC ??A?$CRecordVector@H@@QBEABHI@Z endp
.text:000153CC
.text:000153CC ; ---------------------------------------------------------------------------
.text:000153CF                 align 10h
.text:000153CF _text           ends
.text:000153CF
.text:000153D0 ; ===========================================================================
.text:000153D0
.text:000153D0 ; Segment type: Pure code
.text:000153D0 ; Segment permissions: Read/Execute
.text:000153D0 _text           segment para public 'CODE' use32
.text:000153D0                 assume cs:_text
.text:000153D0                 ;org 153D0h
.text:000153D0 ; COMDAT (pick any)
.text:000153D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000153D0
.text:000153D0 ; =============== S U B R O U T I N E =======================================
.text:000153D0
.text:000153D0 ; Attributes: bp-based frame
.text:000153D0
.text:000153D0 ; public: long __thiscall CMyComPtr<struct IInArchive>::QueryInterface<void>(struct _GUID const &, void * *)const
.text:000153D0                 public ??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z
.text:000153D0 ??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z proc near
.text:000153D0                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+C2p
.text:000153D0                                         ; CArc::OpenStream2(COpenOptions const &)+EA3p
.text:000153D0
.text:000153D0 var_4           = dword ptr -4
.text:000153D0 arg_0           = dword ptr  8
.text:000153D0 arg_4           = dword ptr  0Ch
.text:000153D0
.text:000153D0                 push    ebp
.text:000153D1                 mov     ebp, esp
.text:000153D3                 push    ecx
.text:000153D4                 push    esi
.text:000153D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000153DC                 mov     [ebp+var_4], ecx
.text:000153DF                 mov     esi, esp
.text:000153E1                 mov     eax, [ebp+arg_4]
.text:000153E4                 push    eax
.text:000153E5                 mov     ecx, [ebp+arg_0]
.text:000153E8                 push    ecx
.text:000153E9                 mov     edx, [ebp+var_4]
.text:000153EC                 mov     eax, [edx]
.text:000153EE                 mov     ecx, [ebp+var_4]
.text:000153F1                 mov     edx, [ecx]
.text:000153F3                 mov     eax, [eax]
.text:000153F5                 push    edx
.text:000153F6                 mov     ecx, [eax]
.text:000153F8                 call    ecx
.text:000153FA                 cmp     esi, esp
.text:000153FC                 call    __RTC_CheckEsp
.text:00015401                 pop     esi
.text:00015402                 add     esp, 4
.text:00015405                 cmp     ebp, esp
.text:00015407                 call    __RTC_CheckEsp
.text:0001540C                 mov     esp, ebp
.text:0001540E                 pop     ebp
.text:0001540F                 retn    8
.text:0001540F ??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z endp
.text:0001540F
.text:0001540F ; ---------------------------------------------------------------------------
.text:00015412                 align 4
.text:00015412 _text           ends
.text:00015412
.text:00015414 ; ===========================================================================
.text:00015414
.text:00015414 ; Segment type: Pure code
.text:00015414 ; Segment permissions: Read/Execute
.text:00015414 _text           segment para public 'CODE' use32
.text:00015414                 assume cs:_text
.text:00015414                 ;org 15414h
.text:00015414 ; COMDAT (pick any)
.text:00015414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015414
.text:00015414 ; =============== S U B R O U T I N E =======================================
.text:00015414
.text:00015414 ; Attributes: bp-based frame
.text:00015414
.text:00015414 ; public: long __thiscall CMyComPtr<struct IArchiveOpenCallback>::QueryInterface<struct ICryptoGetTextPassword>(struct _GUID const &, struct ICryptoGetTextPassword * *)const
.text:00015414                 public ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z
.text:00015414 ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z proc near
.text:00015414                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2E3Cp
.text:00015414
.text:00015414 var_4           = dword ptr -4
.text:00015414 arg_0           = dword ptr  8
.text:00015414 arg_4           = dword ptr  0Ch
.text:00015414
.text:00015414                 push    ebp
.text:00015415                 mov     ebp, esp
.text:00015417                 push    ecx
.text:00015418                 push    esi
.text:00015419                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00015420                 mov     [ebp+var_4], ecx
.text:00015423                 mov     esi, esp
.text:00015425                 mov     eax, [ebp+arg_4]
.text:00015428                 push    eax
.text:00015429                 mov     ecx, [ebp+arg_0]
.text:0001542C                 push    ecx
.text:0001542D                 mov     edx, [ebp+var_4]
.text:00015430                 mov     eax, [edx]
.text:00015432                 mov     ecx, [ebp+var_4]
.text:00015435                 mov     edx, [ecx]
.text:00015437                 mov     eax, [eax]
.text:00015439                 push    edx
.text:0001543A                 mov     ecx, [eax]
.text:0001543C                 call    ecx
.text:0001543E                 cmp     esi, esp
.text:00015440                 call    __RTC_CheckEsp
.text:00015445                 pop     esi
.text:00015446                 add     esp, 4
.text:00015449                 cmp     ebp, esp
.text:0001544B                 call    __RTC_CheckEsp
.text:00015450                 mov     esp, ebp
.text:00015452                 pop     ebp
.text:00015453                 retn    8
.text:00015453 ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z endp
.text:00015453
.text:00015453 ; ---------------------------------------------------------------------------
.text:00015456                 align 4
.text:00015456 _text           ends
.text:00015456
.text:00015458 ; ===========================================================================
.text:00015458
.text:00015458 ; Segment type: Pure code
.text:00015458 ; Segment permissions: Read/Execute
.text:00015458 _text           segment para public 'CODE' use32
.text:00015458                 assume cs:_text
.text:00015458                 ;org 15458h
.text:00015458 ; COMDAT (pick any)
.text:00015458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015458
.text:00015458 ; =============== S U B R O U T I N E =======================================
.text:00015458
.text:00015458 ; Attributes: bp-based frame
.text:00015458
.text:00015458 ; public: long __thiscall CMyComPtr<struct ISequentialInStream>::QueryInterface<struct IInStream>(struct _GUID const &, struct IInStream * *)const
.text:00015458                 public ??$QueryInterface@UIInStream@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUIInStream@@@Z
.text:00015458 ??$QueryInterface@UIInStream@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUIInStream@@@Z proc near
.text:00015458                                         ; CODE XREF: CArchiveLink::Open(COpenOptions &)+4D7p
.text:00015458
.text:00015458 var_4           = dword ptr -4
.text:00015458 arg_0           = dword ptr  8
.text:00015458 arg_4           = dword ptr  0Ch
.text:00015458
.text:00015458                 push    ebp
.text:00015459                 mov     ebp, esp
.text:0001545B                 push    ecx
.text:0001545C                 push    esi
.text:0001545D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00015464                 mov     [ebp+var_4], ecx
.text:00015467                 mov     esi, esp
.text:00015469                 mov     eax, [ebp+arg_4]
.text:0001546C                 push    eax
.text:0001546D                 mov     ecx, [ebp+arg_0]
.text:00015470                 push    ecx
.text:00015471                 mov     edx, [ebp+var_4]
.text:00015474                 mov     eax, [edx]
.text:00015476                 mov     ecx, [ebp+var_4]
.text:00015479                 mov     edx, [ecx]
.text:0001547B                 mov     eax, [eax]
.text:0001547D                 push    edx
.text:0001547E                 mov     ecx, [eax]
.text:00015480                 call    ecx
.text:00015482                 cmp     esi, esp
.text:00015484                 call    __RTC_CheckEsp
.text:00015489                 pop     esi
.text:0001548A                 add     esp, 4
.text:0001548D                 cmp     ebp, esp
.text:0001548F                 call    __RTC_CheckEsp
.text:00015494                 mov     esp, ebp
.text:00015496                 pop     ebp
.text:00015497                 retn    8
.text:00015497 ??$QueryInterface@UIInStream@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUIInStream@@@Z endp
.text:00015497
.text:00015497 ; ---------------------------------------------------------------------------
.text:0001549A                 align 4
.text:0001549A _text           ends
.text:0001549A
.text:0001549C ; ===========================================================================
.text:0001549C
.text:0001549C ; Segment type: Pure code
.text:0001549C ; Segment permissions: Read/Execute
.text:0001549C _text           segment para public 'CODE' use32
.text:0001549C                 assume cs:_text
.text:0001549C                 ;org 1549Ch
.text:0001549C ; COMDAT (pick any)
.text:0001549C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001549C
.text:0001549C ; =============== S U B R O U T I N E =======================================
.text:0001549C
.text:0001549C
.text:0001549C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{4}' (void)
.text:0001549C                 public ?Release@CCopyCoder@NCompress@@W3AGKXZ
.text:0001549C ?Release@CCopyCoder@NCompress@@W3AGKXZ proc near
.text:0001549C                                         ; DATA XREF: .rdata:0000DA28o
.text:0001549C
.text:0001549C arg_0           = dword ptr  4
.text:0001549C
.text:0001549C                 sub     [esp+arg_0], 4
.text:000154A1                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000154A1 ?Release@CCopyCoder@NCompress@@W3AGKXZ endp
.text:000154A1
.text:000154A1 ; ---------------------------------------------------------------------------
.text:000154A6                 align 4
.text:000154A6 _text           ends
.text:000154A6
.text:000154A8 ; ===========================================================================
.text:000154A8
.text:000154A8 ; Segment type: Pure code
.text:000154A8 ; Segment permissions: Read/Execute
.text:000154A8 _text           segment para public 'CODE' use32
.text:000154A8                 assume cs:_text
.text:000154A8                 ;org 154A8h
.text:000154A8 ; COMDAT (pick any)
.text:000154A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000154A8
.text:000154A8 ; =============== S U B R O U T I N E =======================================
.text:000154A8
.text:000154A8
.text:000154A8 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NParser::CHandler::Release`adjustor{4}' (void)
.text:000154A8                 public ?Release@CHandler@NParser@NArchive@@W3AGKXZ
.text:000154A8 ?Release@CHandler@NParser@NArchive@@W3AGKXZ proc near
.text:000154A8                                         ; DATA XREF: .rdata:0000EF10o
.text:000154A8
.text:000154A8 arg_0           = dword ptr  4
.text:000154A8
.text:000154A8                 sub     [esp+arg_0], 4
.text:000154AD                 jmp     ?Release@CHandler@NParser@NArchive@@UAGKXZ ; NArchive::NParser::CHandler::Release(void)
.text:000154AD ?Release@CHandler@NParser@NArchive@@W3AGKXZ endp
.text:000154AD
.text:000154AD ; ---------------------------------------------------------------------------
.text:000154B2                 align 4
.text:000154B2 _text           ends
.text:000154B2
.text:000154B4 ; ===========================================================================
.text:000154B4
.text:000154B4 ; Segment type: Pure code
.text:000154B4 ; Segment permissions: Read/Execute
.text:000154B4 _text           segment para public 'CODE' use32
.text:000154B4                 assume cs:_text
.text:000154B4                 ;org 154B4h
.text:000154B4 ; COMDAT (pick any)
.text:000154B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000154B4
.text:000154B4 ; =============== S U B R O U T I N E =======================================
.text:000154B4
.text:000154B4
.text:000154B4 ; [thunk]:public: virtual long __stdcall CExtractCallback_To_OpenCallback::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000154B4                 public ?QueryInterface@CExtractCallback_To_OpenCallback@@W3AGJABU_GUID@@PAPAX@Z
.text:000154B4 ?QueryInterface@CExtractCallback_To_OpenCallback@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000154B4                                         ; DATA XREF: .rdata:const CExtractCallback_To_OpenCallback::`vftable'{for `ICompressProgressInfo'}o
.text:000154B4
.text:000154B4 arg_0           = dword ptr  4
.text:000154B4
.text:000154B4                 sub     [esp+arg_0], 4
.text:000154B9                 jmp     ?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z ; CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *)
.text:000154B9 ?QueryInterface@CExtractCallback_To_OpenCallback@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000154B9
.text:000154B9 ; ---------------------------------------------------------------------------
.text:000154BE                 align 10h
.text:000154BE _text           ends
.text:000154BE
.text:000154C0 ; ===========================================================================
.text:000154C0
.text:000154C0 ; Segment type: Pure code
.text:000154C0 ; Segment permissions: Read/Execute
.text:000154C0 _text           segment para public 'CODE' use32
.text:000154C0                 assume cs:_text
.text:000154C0                 ;org 154C0h
.text:000154C0 ; COMDAT (pick any)
.text:000154C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000154C0
.text:000154C0 ; =============== S U B R O U T I N E =======================================
.text:000154C0
.text:000154C0
.text:000154C0 ; [thunk]:public: virtual unsigned long __stdcall CArchiveOpenCallback_Offset::AddRef`adjustor{4}' (void)
.text:000154C0                 public ?AddRef@CArchiveOpenCallback_Offset@@W3AGKXZ
.text:000154C0 ?AddRef@CArchiveOpenCallback_Offset@@W3AGKXZ proc near
.text:000154C0                                         ; DATA XREF: .rdata:0000FAA0o
.text:000154C0
.text:000154C0 arg_0           = dword ptr  4
.text:000154C0
.text:000154C0                 sub     [esp+arg_0], 4
.text:000154C5                 jmp     ?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ ; CArchiveOpenCallback_Offset::AddRef(void)
.text:000154C5 ?AddRef@CArchiveOpenCallback_Offset@@W3AGKXZ endp
.text:000154C5
.text:000154C5 ; ---------------------------------------------------------------------------
.text:000154CA                 align 4
.text:000154CA _text           ends
.text:000154CA
.text:000154CC ; ===========================================================================
.text:000154CC
.text:000154CC ; Segment type: Pure code
.text:000154CC ; Segment permissions: Read/Execute
.text:000154CC _text           segment para public 'CODE' use32
.text:000154CC                 assume cs:_text
.text:000154CC                 ;org 154CCh
.text:000154CC ; COMDAT (pick any)
.text:000154CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000154CC
.text:000154CC ; =============== S U B R O U T I N E =======================================
.text:000154CC
.text:000154CC
.text:000154CC ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{8}' (void)
.text:000154CC                 public ?Release@CCopyCoder@NCompress@@W7AGKXZ
.text:000154CC ?Release@CCopyCoder@NCompress@@W7AGKXZ proc near
.text:000154CC                                         ; DATA XREF: .rdata:0000DA14o
.text:000154CC
.text:000154CC arg_0           = dword ptr  4
.text:000154CC
.text:000154CC                 sub     [esp+arg_0], 8
.text:000154D1                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000154D1 ?Release@CCopyCoder@NCompress@@W7AGKXZ endp
.text:000154D1
.text:000154D1 ; ---------------------------------------------------------------------------
.text:000154D6                 align 4
.text:000154D6 _text           ends
.text:000154D6
.text:000154D8 ; ===========================================================================
.text:000154D8
.text:000154D8 ; Segment type: Pure code
.text:000154D8 ; Segment permissions: Read/Execute
.text:000154D8 _text           segment para public 'CODE' use32
.text:000154D8                 assume cs:_text
.text:000154D8                 ;org 154D8h
.text:000154D8 ; COMDAT (pick any)
.text:000154D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000154D8
.text:000154D8 ; =============== S U B R O U T I N E =======================================
.text:000154D8
.text:000154D8
.text:000154D8 ; [thunk]:public: virtual unsigned long __stdcall COpenCallbackImp::Release`adjustor{4}' (void)
.text:000154D8                 public ?Release@COpenCallbackImp@@W3AGKXZ
.text:000154D8 ?Release@COpenCallbackImp@@W3AGKXZ proc near ; DATA XREF: .rdata:00011030o
.text:000154D8
.text:000154D8 arg_0           = dword ptr  4
.text:000154D8
.text:000154D8                 sub     [esp+arg_0], 4
.text:000154DD                 jmp     ?Release@COpenCallbackImp@@UAGKXZ ; COpenCallbackImp::Release(void)
.text:000154DD ?Release@COpenCallbackImp@@W3AGKXZ endp
.text:000154DD
.text:000154DD ; ---------------------------------------------------------------------------
.text:000154E2                 align 4
.text:000154E2 _text           ends
.text:000154E2
.text:000154E4 ; ===========================================================================
.text:000154E4
.text:000154E4 ; Segment type: Pure code
.text:000154E4 ; Segment permissions: Read/Execute
.text:000154E4 _text           segment para public 'CODE' use32
.text:000154E4                 assume cs:_text
.text:000154E4                 ;org 154E4h
.text:000154E4 ; COMDAT (pick any)
.text:000154E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000154E4
.text:000154E4 ; =============== S U B R O U T I N E =======================================
.text:000154E4
.text:000154E4
.text:000154E4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{12}' (void)
.text:000154E4                 public ?Release@CCopyCoder@NCompress@@WM@AGKXZ
.text:000154E4 ?Release@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:000154E4                                         ; DATA XREF: .rdata:0000DA00o
.text:000154E4
.text:000154E4 arg_0           = dword ptr  4
.text:000154E4
.text:000154E4                 sub     [esp+arg_0], 0Ch
.text:000154E9                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000154E9 ?Release@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:000154E9
.text:000154E9 ; ---------------------------------------------------------------------------
.text:000154EE                 align 10h
.text:000154EE _text           ends
.text:000154EE
.text:000154F0 ; ===========================================================================
.text:000154F0
.text:000154F0 ; Segment type: Pure code
.text:000154F0 ; Segment permissions: Read/Execute
.text:000154F0 _text           segment para public 'CODE' use32
.text:000154F0                 assume cs:_text
.text:000154F0                 ;org 154F0h
.text:000154F0 ; COMDAT (pick any)
.text:000154F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000154F0
.text:000154F0 ; =============== S U B R O U T I N E =======================================
.text:000154F0
.text:000154F0
.text:000154F0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.text:000154F0                 public ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
.text:000154F0 ?AddRef@CCopyCoder@NCompress@@W3AGKXZ proc near ; DATA XREF: .rdata:0000DA24o
.text:000154F0
.text:000154F0 arg_0           = dword ptr  4
.text:000154F0
.text:000154F0                 sub     [esp+arg_0], 4
.text:000154F5                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000154F5 ?AddRef@CCopyCoder@NCompress@@W3AGKXZ endp
.text:000154F5
.text:000154F5 ; ---------------------------------------------------------------------------
.text:000154FA                 align 4
.text:000154FA _text           ends
.text:000154FA
.text:000154FC ; ===========================================================================
.text:000154FC
.text:000154FC ; Segment type: Pure code
.text:000154FC ; Segment permissions: Read/Execute
.text:000154FC _text           segment para public 'CODE' use32
.text:000154FC                 assume cs:_text
.text:000154FC                 ;org 154FCh
.text:000154FC ; COMDAT (pick any)
.text:000154FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000154FC
.text:000154FC ; =============== S U B R O U T I N E =======================================
.text:000154FC
.text:000154FC
.text:000154FC ; [thunk]:public: virtual unsigned long __stdcall NArchive::NParser::CHandler::AddRef`adjustor{4}' (void)
.text:000154FC                 public ?AddRef@CHandler@NParser@NArchive@@W3AGKXZ
.text:000154FC ?AddRef@CHandler@NParser@NArchive@@W3AGKXZ proc near
.text:000154FC                                         ; DATA XREF: .rdata:0000EF0Co
.text:000154FC
.text:000154FC arg_0           = dword ptr  4
.text:000154FC
.text:000154FC                 sub     [esp+arg_0], 4
.text:00015501                 jmp     ?AddRef@CHandler@NParser@NArchive@@UAGKXZ ; NArchive::NParser::CHandler::AddRef(void)
.text:00015501 ?AddRef@CHandler@NParser@NArchive@@W3AGKXZ endp
.text:00015501
.text:00015501 ; ---------------------------------------------------------------------------
.text:00015506                 align 4
.text:00015506 _text           ends
.text:00015506
.text:00015508 ; ===========================================================================
.text:00015508
.text:00015508 ; Segment type: Pure code
.text:00015508 ; Segment permissions: Read/Execute
.text:00015508 _text           segment para public 'CODE' use32
.text:00015508                 assume cs:_text
.text:00015508                 ;org 15508h
.text:00015508 ; COMDAT (pick any)
.text:00015508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015508
.text:00015508 ; =============== S U B R O U T I N E =======================================
.text:00015508
.text:00015508
.text:00015508 ; [thunk]:public: virtual unsigned long __stdcall COpenCallbackImp::Release`adjustor{8}' (void)
.text:00015508                 public ?Release@COpenCallbackImp@@W7AGKXZ
.text:00015508 ?Release@COpenCallbackImp@@W7AGKXZ proc near ; DATA XREF: .rdata:0001101Co
.text:00015508
.text:00015508 arg_0           = dword ptr  4
.text:00015508
.text:00015508                 sub     [esp+arg_0], 8
.text:0001550D                 jmp     ?Release@COpenCallbackImp@@UAGKXZ ; COpenCallbackImp::Release(void)
.text:0001550D ?Release@COpenCallbackImp@@W7AGKXZ endp
.text:0001550D
.text:0001550D ; ---------------------------------------------------------------------------
.text:00015512                 align 4
.text:00015512 _text           ends
.text:00015512
.text:00015514 ; ===========================================================================
.text:00015514
.text:00015514 ; Segment type: Pure code
.text:00015514 ; Segment permissions: Read/Execute
.text:00015514 _text           segment para public 'CODE' use32
.text:00015514                 assume cs:_text
.text:00015514                 ;org 15514h
.text:00015514 ; COMDAT (pick any)
.text:00015514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015514
.text:00015514 ; =============== S U B R O U T I N E =======================================
.text:00015514
.text:00015514
.text:00015514 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.text:00015514                 public ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
.text:00015514 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ proc near ; DATA XREF: .rdata:0000DA10o
.text:00015514
.text:00015514 arg_0           = dword ptr  4
.text:00015514
.text:00015514                 sub     [esp+arg_0], 8
.text:00015519                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:00015519 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ endp
.text:00015519
.text:00015519 ; ---------------------------------------------------------------------------
.text:0001551E                 align 10h
.text:0001551E _text           ends
.text:0001551E
.text:00015520 ; ===========================================================================
.text:00015520
.text:00015520 ; Segment type: Pure code
.text:00015520 ; Segment permissions: Read/Execute
.text:00015520 _text           segment para public 'CODE' use32
.text:00015520                 assume cs:_text
.text:00015520                 ;org 15520h
.text:00015520 ; COMDAT (pick any)
.text:00015520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015520
.text:00015520 ; =============== S U B R O U T I N E =======================================
.text:00015520
.text:00015520
.text:00015520 ; [thunk]:public: virtual long __stdcall CArchiveOpenCallback_Offset::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00015520                 public ?QueryInterface@CArchiveOpenCallback_Offset@@W3AGJABU_GUID@@PAPAX@Z
.text:00015520 ?QueryInterface@CArchiveOpenCallback_Offset@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00015520                                         ; DATA XREF: .rdata:const CArchiveOpenCallback_Offset::`vftable'{for `ICryptoGetTextPassword'}o
.text:00015520
.text:00015520 arg_0           = dword ptr  4
.text:00015520
.text:00015520                 sub     [esp+arg_0], 4
.text:00015525                 jmp     ?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z ; CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *)
.text:00015525 ?QueryInterface@CArchiveOpenCallback_Offset@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00015525
.text:00015525 ; ---------------------------------------------------------------------------
.text:0001552A                 align 4
.text:0001552A _text           ends
.text:0001552A
.text:0001552C ; ===========================================================================
.text:0001552C
.text:0001552C ; Segment type: Pure code
.text:0001552C ; Segment permissions: Read/Execute
.text:0001552C _text           segment para public 'CODE' use32
.text:0001552C                 assume cs:_text
.text:0001552C                 ;org 1552Ch
.text:0001552C ; COMDAT (pick any)
.text:0001552C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001552C
.text:0001552C ; =============== S U B R O U T I N E =======================================
.text:0001552C
.text:0001552C
.text:0001552C ; [thunk]:public: virtual unsigned long __stdcall COpenCallbackImp::Release`adjustor{12}' (void)
.text:0001552C                 public ?Release@COpenCallbackImp@@WM@AGKXZ
.text:0001552C ?Release@COpenCallbackImp@@WM@AGKXZ proc near ; DATA XREF: .rdata:00011008o
.text:0001552C
.text:0001552C arg_0           = dword ptr  4
.text:0001552C
.text:0001552C                 sub     [esp+arg_0], 0Ch
.text:00015531                 jmp     ?Release@COpenCallbackImp@@UAGKXZ ; COpenCallbackImp::Release(void)
.text:00015531 ?Release@COpenCallbackImp@@WM@AGKXZ endp
.text:00015531
.text:00015531 ; ---------------------------------------------------------------------------
.text:00015536                 align 4
.text:00015536 _text           ends
.text:00015536
.text:00015538 ; ===========================================================================
.text:00015538
.text:00015538 ; Segment type: Pure code
.text:00015538 ; Segment permissions: Read/Execute
.text:00015538 _text           segment para public 'CODE' use32
.text:00015538                 assume cs:_text
.text:00015538                 ;org 15538h
.text:00015538 ; COMDAT (pick any)
.text:00015538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015538
.text:00015538 ; =============== S U B R O U T I N E =======================================
.text:00015538
.text:00015538
.text:00015538 ; [thunk]:public: virtual unsigned long __stdcall COpenCallbackImp::AddRef`adjustor{4}' (void)
.text:00015538                 public ?AddRef@COpenCallbackImp@@W3AGKXZ
.text:00015538 ?AddRef@COpenCallbackImp@@W3AGKXZ proc near ; DATA XREF: .rdata:0001102Co
.text:00015538
.text:00015538 arg_0           = dword ptr  4
.text:00015538
.text:00015538                 sub     [esp+arg_0], 4
.text:0001553D                 jmp     ?AddRef@COpenCallbackImp@@UAGKXZ ; COpenCallbackImp::AddRef(void)
.text:0001553D ?AddRef@COpenCallbackImp@@W3AGKXZ endp
.text:0001553D
.text:0001553D ; ---------------------------------------------------------------------------
.text:00015542                 align 4
.text:00015542 _text           ends
.text:00015542
.text:00015544 ; ===========================================================================
.text:00015544
.text:00015544 ; Segment type: Pure code
.text:00015544 ; Segment permissions: Read/Execute
.text:00015544 _text           segment para public 'CODE' use32
.text:00015544                 assume cs:_text
.text:00015544                 ;org 15544h
.text:00015544 ; COMDAT (pick any)
.text:00015544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015544
.text:00015544 ; =============== S U B R O U T I N E =======================================
.text:00015544
.text:00015544
.text:00015544 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00015544                 public ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00015544 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00015544                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}o
.text:00015544
.text:00015544 arg_0           = dword ptr  4
.text:00015544
.text:00015544                 sub     [esp+arg_0], 4
.text:00015549                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00015549 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00015549
.text:00015549 ; ---------------------------------------------------------------------------
.text:0001554E                 align 10h
.text:0001554E _text           ends
.text:0001554E
.text:00015550 ; ===========================================================================
.text:00015550
.text:00015550 ; Segment type: Pure code
.text:00015550 ; Segment permissions: Read/Execute
.text:00015550 _text           segment para public 'CODE' use32
.text:00015550                 assume cs:_text
.text:00015550                 ;org 15550h
.text:00015550 ; COMDAT (pick any)
.text:00015550                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015550
.text:00015550 ; =============== S U B R O U T I N E =======================================
.text:00015550
.text:00015550
.text:00015550 ; [thunk]:public: virtual long __stdcall NArchive::NParser::CHandler::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00015550                 public ?QueryInterface@CHandler@NParser@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:00015550 ?QueryInterface@CHandler@NParser@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00015550                                         ; DATA XREF: .rdata:const NArchive::NParser::CHandler::`vftable'{for `IInArchiveGetStream'}o
.text:00015550
.text:00015550 arg_0           = dword ptr  4
.text:00015550
.text:00015550                 sub     [esp+arg_0], 4
.text:00015555                 jmp     ?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *)
.text:00015555 ?QueryInterface@CHandler@NParser@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00015555
.text:00015555 ; ---------------------------------------------------------------------------
.text:0001555A                 align 4
.text:0001555A _text           ends
.text:0001555A
.text:0001555C ; ===========================================================================
.text:0001555C
.text:0001555C ; Segment type: Pure code
.text:0001555C ; Segment permissions: Read/Execute
.text:0001555C _text           segment para public 'CODE' use32
.text:0001555C                 assume cs:_text
.text:0001555C                 ;org 1555Ch
.text:0001555C ; COMDAT (pick any)
.text:0001555C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001555C
.text:0001555C ; =============== S U B R O U T I N E =======================================
.text:0001555C
.text:0001555C
.text:0001555C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.text:0001555C                 public ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
.text:0001555C ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:0001555C                                         ; DATA XREF: .rdata:0000D9FCo
.text:0001555C
.text:0001555C arg_0           = dword ptr  4
.text:0001555C
.text:0001555C                 sub     [esp+arg_0], 0Ch
.text:00015561                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:00015561 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:00015561
.text:00015561 ; ---------------------------------------------------------------------------
.text:00015566                 align 4
.text:00015566 _text           ends
.text:00015566
.text:00015568 ; ===========================================================================
.text:00015568
.text:00015568 ; Segment type: Pure code
.text:00015568 ; Segment permissions: Read/Execute
.text:00015568 _text           segment para public 'CODE' use32
.text:00015568                 assume cs:_text
.text:00015568                 ;org 15568h
.text:00015568 ; COMDAT (pick any)
.text:00015568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015568
.text:00015568 ; =============== S U B R O U T I N E =======================================
.text:00015568
.text:00015568
.text:00015568 ; [thunk]:public: virtual unsigned long __stdcall COpenCallbackImp::AddRef`adjustor{8}' (void)
.text:00015568                 public ?AddRef@COpenCallbackImp@@W7AGKXZ
.text:00015568 ?AddRef@COpenCallbackImp@@W7AGKXZ proc near ; DATA XREF: .rdata:00011018o
.text:00015568
.text:00015568 arg_0           = dword ptr  4
.text:00015568
.text:00015568                 sub     [esp+arg_0], 8
.text:0001556D                 jmp     ?AddRef@COpenCallbackImp@@UAGKXZ ; COpenCallbackImp::AddRef(void)
.text:0001556D ?AddRef@COpenCallbackImp@@W7AGKXZ endp
.text:0001556D
.text:0001556D ; ---------------------------------------------------------------------------
.text:00015572                 align 4
.text:00015572 _text           ends
.text:00015572
.text:00015574 ; ===========================================================================
.text:00015574
.text:00015574 ; Segment type: Pure code
.text:00015574 ; Segment permissions: Read/Execute
.text:00015574 _text           segment para public 'CODE' use32
.text:00015574                 assume cs:_text
.text:00015574                 ;org 15574h
.text:00015574 ; COMDAT (pick any)
.text:00015574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015574
.text:00015574 ; =============== S U B R O U T I N E =======================================
.text:00015574
.text:00015574
.text:00015574 ; [thunk]:public: virtual unsigned long __stdcall CExtractCallback_To_OpenCallback::Release`adjustor{4}' (void)
.text:00015574                 public ?Release@CExtractCallback_To_OpenCallback@@W3AGKXZ
.text:00015574 ?Release@CExtractCallback_To_OpenCallback@@W3AGKXZ proc near
.text:00015574                                         ; DATA XREF: .rdata:0000F624o
.text:00015574
.text:00015574 arg_0           = dword ptr  4
.text:00015574
.text:00015574                 sub     [esp+arg_0], 4
.text:00015579                 jmp     ?Release@CExtractCallback_To_OpenCallback@@UAGKXZ ; CExtractCallback_To_OpenCallback::Release(void)
.text:00015579 ?Release@CExtractCallback_To_OpenCallback@@W3AGKXZ endp
.text:00015579
.text:00015579 ; ---------------------------------------------------------------------------
.text:0001557E                 align 10h
.text:0001557E _text           ends
.text:0001557E
.text:00015580 ; ===========================================================================
.text:00015580
.text:00015580 ; Segment type: Pure code
.text:00015580 ; Segment permissions: Read/Execute
.text:00015580 _text           segment para public 'CODE' use32
.text:00015580                 assume cs:_text
.text:00015580                 ;org 15580h
.text:00015580 ; COMDAT (pick any)
.text:00015580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015580
.text:00015580 ; =============== S U B R O U T I N E =======================================
.text:00015580
.text:00015580
.text:00015580 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00015580                 public ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00015580 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00015580                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}o
.text:00015580
.text:00015580 arg_0           = dword ptr  4
.text:00015580
.text:00015580                 sub     [esp+arg_0], 8
.text:00015585                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00015585 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00015585
.text:00015585 ; ---------------------------------------------------------------------------
.text:0001558A                 align 4
.text:0001558A _text           ends
.text:0001558A
.text:0001558C ; ===========================================================================
.text:0001558C
.text:0001558C ; Segment type: Pure code
.text:0001558C ; Segment permissions: Read/Execute
.text:0001558C _text           segment para public 'CODE' use32
.text:0001558C                 assume cs:_text
.text:0001558C                 ;org 1558Ch
.text:0001558C ; COMDAT (pick any)
.text:0001558C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0001558C
.text:0001558C ; =============== S U B R O U T I N E =======================================
.text:0001558C
.text:0001558C
.text:0001558C ; [thunk]:public: virtual long __stdcall COpenCallbackImp::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0001558C                 public ?QueryInterface@COpenCallbackImp@@W3AGJABU_GUID@@PAPAX@Z
.text:0001558C ?QueryInterface@COpenCallbackImp@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0001558C                                         ; DATA XREF: .rdata:const COpenCallbackImp::`vftable'{for `IArchiveOpenVolumeCallback'}o
.text:0001558C
.text:0001558C arg_0           = dword ptr  4
.text:0001558C
.text:0001558C                 sub     [esp+arg_0], 4
.text:00015591                 jmp     ?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z ; COpenCallbackImp::QueryInterface(_GUID const &,void * *)
.text:00015591 ?QueryInterface@COpenCallbackImp@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00015591
.text:00015591 ; ---------------------------------------------------------------------------
.text:00015596                 align 4
.text:00015596 _text           ends
.text:00015596
.text:00015598 ; ===========================================================================
.text:00015598
.text:00015598 ; Segment type: Pure code
.text:00015598 ; Segment permissions: Read/Execute
.text:00015598 _text           segment para public 'CODE' use32
.text:00015598                 assume cs:_text
.text:00015598                 ;org 15598h
.text:00015598 ; COMDAT (pick any)
.text:00015598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00015598
.text:00015598 ; =============== S U B R O U T I N E =======================================
.text:00015598
.text:00015598
.text:00015598 ; [thunk]:public: virtual unsigned long __stdcall COpenCallbackImp::AddRef`adjustor{12}' (void)
.text:00015598                 public ?AddRef@COpenCallbackImp@@WM@AGKXZ
.text:00015598 ?AddRef@COpenCallbackImp@@WM@AGKXZ proc near ; DATA XREF: .rdata:00011004o
.text:00015598
.text:00015598 arg_0           = dword ptr  4
.text:00015598
.text:00015598                 sub     [esp+arg_0], 0Ch
.text:0001559D                 jmp     ?AddRef@COpenCallbackImp@@UAGKXZ ; COpenCallbackImp::AddRef(void)
.text:0001559D ?AddRef@COpenCallbackImp@@WM@AGKXZ endp
.text:0001559D
.text:0001559D ; ---------------------------------------------------------------------------
.text:000155A2                 align 4
.text:000155A2 _text           ends
.text:000155A2
.text:000155A4 ; ===========================================================================
.text:000155A4
.text:000155A4 ; Segment type: Pure code
.text:000155A4 ; Segment permissions: Read/Execute
.text:000155A4 _text           segment para public 'CODE' use32
.text:000155A4                 assume cs:_text
.text:000155A4                 ;org 155A4h
.text:000155A4 ; COMDAT (pick any)
.text:000155A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000155A4
.text:000155A4 ; =============== S U B R O U T I N E =======================================
.text:000155A4
.text:000155A4
.text:000155A4 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:000155A4                 public ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:000155A4 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:000155A4                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:000155A4
.text:000155A4 arg_0           = dword ptr  4
.text:000155A4
.text:000155A4                 sub     [esp+arg_0], 0Ch
.text:000155A9                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:000155A9 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:000155A9
.text:000155A9 ; ---------------------------------------------------------------------------
.text:000155AE                 align 10h
.text:000155AE _text           ends
.text:000155AE
.text:000155B0 ; ===========================================================================
.text:000155B0
.text:000155B0 ; Segment type: Pure code
.text:000155B0 ; Segment permissions: Read/Execute
.text:000155B0 _text           segment para public 'CODE' use32
.text:000155B0                 assume cs:_text
.text:000155B0                 ;org 155B0h
.text:000155B0 ; COMDAT (pick any)
.text:000155B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000155B0
.text:000155B0 ; =============== S U B R O U T I N E =======================================
.text:000155B0
.text:000155B0
.text:000155B0 ; [thunk]:public: virtual long __stdcall COpenCallbackImp::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:000155B0                 public ?QueryInterface@COpenCallbackImp@@W7AGJABU_GUID@@PAPAX@Z
.text:000155B0 ?QueryInterface@COpenCallbackImp@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:000155B0                                         ; DATA XREF: .rdata:const COpenCallbackImp::`vftable'{for `IArchiveOpenSetSubArchiveName'}o
.text:000155B0
.text:000155B0 arg_0           = dword ptr  4
.text:000155B0
.text:000155B0                 sub     [esp+arg_0], 8
.text:000155B5                 jmp     ?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z ; COpenCallbackImp::QueryInterface(_GUID const &,void * *)
.text:000155B5 ?QueryInterface@COpenCallbackImp@@W7AGJABU_GUID@@PAPAX@Z endp
.text:000155B5
.text:000155B5 ; ---------------------------------------------------------------------------
.text:000155BA                 align 4
.text:000155BA _text           ends
.text:000155BA
.text:000155BC ; ===========================================================================
.text:000155BC
.text:000155BC ; Segment type: Pure code
.text:000155BC ; Segment permissions: Read/Execute
.text:000155BC _text           segment para public 'CODE' use32
.text:000155BC                 assume cs:_text
.text:000155BC                 ;org 155BCh
.text:000155BC ; COMDAT (pick any)
.text:000155BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000155BC
.text:000155BC ; =============== S U B R O U T I N E =======================================
.text:000155BC
.text:000155BC
.text:000155BC ; [thunk]:public: virtual unsigned long __stdcall CArchiveOpenCallback_Offset::Release`adjustor{4}' (void)
.text:000155BC                 public ?Release@CArchiveOpenCallback_Offset@@W3AGKXZ
.text:000155BC ?Release@CArchiveOpenCallback_Offset@@W3AGKXZ proc near
.text:000155BC                                         ; DATA XREF: .rdata:0000FAA4o
.text:000155BC
.text:000155BC arg_0           = dword ptr  4
.text:000155BC
.text:000155BC                 sub     [esp+arg_0], 4
.text:000155C1                 jmp     ?Release@CArchiveOpenCallback_Offset@@UAGKXZ ; CArchiveOpenCallback_Offset::Release(void)
.text:000155C1 ?Release@CArchiveOpenCallback_Offset@@W3AGKXZ endp
.text:000155C1
.text:000155C1 ; ---------------------------------------------------------------------------
.text:000155C6                 align 4
.text:000155C6 _text           ends
.text:000155C6
.text:000155C8 ; ===========================================================================
.text:000155C8
.text:000155C8 ; Segment type: Pure code
.text:000155C8 ; Segment permissions: Read/Execute
.text:000155C8 _text           segment para public 'CODE' use32
.text:000155C8                 assume cs:_text
.text:000155C8                 ;org 155C8h
.text:000155C8 ; COMDAT (pick any)
.text:000155C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000155C8
.text:000155C8 ; =============== S U B R O U T I N E =======================================
.text:000155C8
.text:000155C8
.text:000155C8 ; [thunk]:public: virtual unsigned long __stdcall CExtractCallback_To_OpenCallback::AddRef`adjustor{4}' (void)
.text:000155C8                 public ?AddRef@CExtractCallback_To_OpenCallback@@W3AGKXZ
.text:000155C8 ?AddRef@CExtractCallback_To_OpenCallback@@W3AGKXZ proc near
.text:000155C8                                         ; DATA XREF: .rdata:0000F620o
.text:000155C8
.text:000155C8 arg_0           = dword ptr  4
.text:000155C8
.text:000155C8                 sub     [esp+arg_0], 4
.text:000155CD                 jmp     ?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ ; CExtractCallback_To_OpenCallback::AddRef(void)
.text:000155CD ?AddRef@CExtractCallback_To_OpenCallback@@W3AGKXZ endp
.text:000155CD
.text:000155CD ; ---------------------------------------------------------------------------
.text:000155D2                 align 4
.text:000155D2 _text           ends
.text:000155D2
.text:000155D4 ; ===========================================================================
.text:000155D4
.text:000155D4 ; Segment type: Pure code
.text:000155D4 ; Segment permissions: Read/Execute
.text:000155D4 _text           segment para public 'CODE' use32
.text:000155D4                 assume cs:_text
.text:000155D4                 ;org 155D4h
.text:000155D4 ; COMDAT (pick any)
.text:000155D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000155D4
.text:000155D4 ; =============== S U B R O U T I N E =======================================
.text:000155D4
.text:000155D4
.text:000155D4 ; [thunk]:public: virtual long __stdcall COpenCallbackImp::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:000155D4                 public ?QueryInterface@COpenCallbackImp@@WM@AGJABU_GUID@@PAPAX@Z
.text:000155D4 ?QueryInterface@COpenCallbackImp@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:000155D4                                         ; DATA XREF: .rdata:const COpenCallbackImp::`vftable'{for `ICryptoGetTextPassword'}o
.text:000155D4
.text:000155D4 arg_0           = dword ptr  4
.text:000155D4
.text:000155D4                 sub     [esp+arg_0], 0Ch
.text:000155D9                 jmp     ?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z ; COpenCallbackImp::QueryInterface(_GUID const &,void * *)
.text:000155D9 ?QueryInterface@COpenCallbackImp@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:000155D9
.text:000155D9 _text           ends
.text:000155D9
UNDEF:000155E0 ; ===========================================================================
UNDEF:000155E0
UNDEF:000155E0 ; Segment type: Externs
UNDEF:000155E0 ; UNDEF
UNDEF:000155E0                 extrn __RTC_CheckEsp:near
UNDEF:000155E0                                         ; CODE XREF: NArchive::NParser::CHandler::FindInsertPos(NArchive::NParser::CParseItem const &)+13Dp
UNDEF:000155E0                                         ; NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+185p ...
UNDEF:000155E4                 extrn __RTC_Shutdown:near
UNDEF:000155E4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000155E8                 extrn __RTC_InitBase:near
UNDEF:000155E8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000155EC                 extrn ___security_cookie:near
UNDEF:000155EC                                         ; DATA XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+2Cr
UNDEF:000155EC                                         ; NArchive::NParser::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+1Dr ...
UNDEF:000155F0                 extrn ___CxxFrameHandler3:near
UNDEF:000155F0                                         ; CODE XREF: __ehhandler$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z+19j
UNDEF:000155F0                                         ; __ehhandler$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+16j ...
UNDEF:000155F4 ; __fastcall __security_check_cookie(x)
UNDEF:000155F4                 extrn @__security_check_cookie@4:near
UNDEF:000155F4                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2F9p
UNDEF:000155F4                                         ; CArc::CheckZerosTail(COpenOptions const &,unsigned __int64)+140p ...
UNDEF:000155F8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000155F8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000155F8                                         ; CODE XREF: NArchive::NParser::CHandler::AddUnknownItem(unsigned __int64)+16Ap
UNDEF:000155F8                                         ; NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2DFp ...
UNDEF:000155FC ; public: __thiscall UString::UString(void)
UNDEF:000155FC                 extrn ??0UString@@QAE@XZ:near
UNDEF:000155FC                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+75p
UNDEF:000155FC                                         ; CArc::OpenStream2(COpenOptions const &)+B2p ...
UNDEF:00015600 ; void __cdecl operator delete(void *)
UNDEF:00015600                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2+7p
UNDEF:00015600                                         ; __unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4+7p ...
UNDEF:00015604 ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:00015604                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:00015604                                         ; DATA XREF: NArchive::NParser::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:00015608 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:00015608                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:00015608                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+286p
UNDEF:0001560C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct _FILETIME const &)
UNDEF:0001560C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:near
UNDEF:0001560C                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+220p
UNDEF:00015610 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00015610                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00015610                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+184p
UNDEF:00015610                                         ; NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+19Bp ...
UNDEF:00015614 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class UString const &)
UNDEF:00015614                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:near
UNDEF:00015614                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+15Dp
UNDEF:00015614                                         ; NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+24Dp ...
UNDEF:00015618 ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:00015618                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:00015618                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+113p
UNDEF:00015618                                         ; NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+14Ep ...
UNDEF:0001561C ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:0001561C                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:0001561C                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+CEp
UNDEF:0001561C                                         ; CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+2B0p
UNDEF:00015620 ; void __stdcall ConvertUInt32ToString(unsigned int, wchar_t *)
UNDEF:00015620                 extrn ?ConvertUInt32ToString@@YGXIPA_W@Z:near
UNDEF:00015620                                         ; CODE XREF: NArchive::NParser::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+BFp
UNDEF:00015624 ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:00015624                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:00015624                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00015628 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00015628                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00015628                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:0001562C ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:0001562C                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:0001562C                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+39Fp
UNDEF:00015630 ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:00015630                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:00015630                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1CAp
UNDEF:00015634 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:00015634                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:00015634                                         ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+175p
UNDEF:00015638 ; void *__cdecl operator new(unsigned int)
UNDEF:00015638                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+148p
UNDEF:00015638                                         ; NArchive::NParser::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1D1p ...
UNDEF:0001563C ; const type_info::`vftable'
UNDEF:0001563C                 extrn ??_7type_info@@6B@:near
UNDEF:0001563C                                         ; DATA XREF: .data:NCompress::CCopyCoder `RTTI Type Descriptor'o
UNDEF:0001563C                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00015640 ; public: virtual long __stdcall NCompress::CCopyCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00015640                 extrn ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00015640                                         ; DATA XREF: .rdata:0000DA44o
UNDEF:00015644 ; public: virtual long __stdcall NCompress::CCopyCoder::SetInStream(struct ISequentialInStream *)
UNDEF:00015644                 extrn ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:00015644                                         ; DATA XREF: .rdata:0000DA2Co
UNDEF:00015648 ; public: virtual long __stdcall NCompress::CCopyCoder::ReleaseInStream(void)
UNDEF:00015648                 extrn ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:near
UNDEF:00015648                                         ; DATA XREF: .rdata:0000DA30o
UNDEF:0001564C ; public: virtual long __stdcall NCompress::CCopyCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:0001564C                 extrn ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:0001564C                                         ; DATA XREF: .rdata:0000DA18o
UNDEF:00015650 ; public: virtual long __stdcall NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:00015650                 extrn ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:near
UNDEF:00015650                                         ; DATA XREF: .rdata:0000DA04o
UNDEF:00015654                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00015654                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_DEF2o
UNDEF:00015658                 extrn _IID_ISequentialInStream:near
UNDEF:00015658                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_DEBEo
UNDEF:00015658                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *):loc_E310o ...
UNDEF:0001565C                 extrn _IID_ICompressSetInStream:near
UNDEF:0001565C                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_DE8Ao
UNDEF:00015660                 extrn _IID_ICompressCoder:near
UNDEF:00015660                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_DE6Bo
UNDEF:00015664 ; const IID IID_IUnknown
UNDEF:00015664                 extrn _IID_IUnknown:near
UNDEF:00015664                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00015664                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:00015668 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00015668                 extrn _memcmp:near      ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+1CECp
UNDEF:00015668                                         ; IsEqualGUID(x,x)+Dp
UNDEF:0001566C                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:0001566C                                         ; .rdata:0000E06Co ...
UNDEF:00015670 ; _DWORD __thiscall NCompress::CCopyCoder::~CCopyCoder(NCompress::CCopyCoder *__hidden this)
UNDEF:00015670                 extrn ??1CCopyCoder@NCompress@@QAE@XZ:near
UNDEF:00015670                                         ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+11p
UNDEF:00015674 ; public: virtual long __stdcall CLimitedSequentialInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:00015674                 extrn ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:near
UNDEF:00015674                                         ; DATA XREF: .rdata:0000E248o
UNDEF:00015678 ; public: virtual long __stdcall CLimitedSequentialOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:00015678                 extrn ?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z:near
UNDEF:00015678                                         ; DATA XREF: .rdata:0000E4B0o
UNDEF:0001567C                 extrn _IID_ISequentialOutStream:near
UNDEF:0001567C                                         ; DATA XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *):loc_E610o
UNDEF:00015680 ; __int32 __stdcall CreateLimitedInStream(struct IInStream *, unsigned __int64, unsigned __int64, struct ISequentialInStream **)
UNDEF:00015680                 extrn ?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z:near
UNDEF:00015680                                         ; CODE XREF: NArchive::NParser::CHandler::GetStream(uint,ISequentialInStream * *)+8Ap
UNDEF:00015684 ; int __thiscall UString::ReverseFind_PathSepar(UString *__hidden this)
UNDEF:00015684                 extrn ?ReverseFind_PathSepar@UString@@QBEHXZ:near
UNDEF:00015684                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+281p
UNDEF:00015688 ; void __thiscall UString::SetFromBstr(UString *__hidden this, wchar_t *)
UNDEF:00015688                 extrn ?SetFromBstr@UString@@QAEXPA_W@Z:near
UNDEF:00015688                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+19Dp
UNDEF:00015688                                         ; CArc::GetItemPath(uint,UString &)+1ACp ...
UNDEF:0001568C ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:0001568C                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:0001568C                                         ; CODE XREF: CArc::GetItemPathToParent(uint,uint,CObjectVector<UString> &)+104p
UNDEF:0001568C                                         ; CArc::GetItem(uint,CReadArcItem &)+369p ...
UNDEF:00015690 ; void __thiscall UString::ReAlloc2(UString *__hidden this, unsigned int)
UNDEF:00015690                 extrn ?ReAlloc2@UString@@AAEXI@Z:near
UNDEF:00015690                                         ; CODE XREF: UString::GetBuf(uint)+20p
UNDEF:00015694 ; public: class UString & __thiscall UString::operator+=(wchar_t const *)
UNDEF:00015694                 extrn ??YUString@@QAEAAV0@PB_W@Z:near
UNDEF:00015694                                         ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+FFp
UNDEF:00015698 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00015698                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00015698                                         ; CODE XREF: CArc::GetDefaultItemPath(uint,UString &)+82p
UNDEF:00015698                                         ; CArc::GetItem(uint,CReadArcItem &)+E9p ...
UNDEF:0001569C ; void __thiscall UString::Insert(UString *__hidden this, unsigned int, const wchar_t *)
UNDEF:0001569C                 extrn ?Insert@UString@@QAEXIPB_W@Z:near
UNDEF:0001569C                                         ; CODE XREF: CArc::GetItemPath2(uint,UString &)+86p
UNDEF:000156A0 ; void __stdcall SplitPathToParts(class UString const &, class CObjectVector<class UString> &)
UNDEF:000156A0                 extrn ?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z:near
UNDEF:000156A0                                         ; CODE XREF: CArc::GetItem(uint,CReadArcItem &)+4DAp
UNDEF:000156A4 ; __stdcall _CxxThrowException(x, x)
UNDEF:000156A4                 extrn __CxxThrowException@8:near
UNDEF:000156A4                                         ; CODE XREF: GetOpenArcErrorFlags(NWindows::NCOM::CPropVariant const &,bool *)+79p
UNDEF:000156A4                                         ; COpenCallbackImp::Init(UString const &,UString const &)+C0p
UNDEF:000156A8 ; long __stdcall SetProperties(struct IUnknown *, class CObjectVector<struct CProperty> const &)
UNDEF:000156A8                 extrn ?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z:near
UNDEF:000156A8                                         ; CODE XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+125p
UNDEF:000156AC                 extrn _IID_IArchiveAllowTail:near
UNDEF:000156AC                                         ; DATA XREF: CArc::PrepareToOpen(COpenOptions const &,uint,CMyComPtr<IInArchive> &)+BAo
UNDEF:000156B0 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:000156B0                 extrn __imp__memmove:near
UNDEF:000156B0                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+342Cp
UNDEF:000156B0                                         ; CArc::OpenStream2(COpenOptions const &)+351Fp ...
UNDEF:000156B4                 extrn _IID_ICryptoGetTextPassword:near
UNDEF:000156B4                                         ; DATA XREF: CArc::OpenStream2(COpenOptions const &)+2E2Eo
UNDEF:000156B4                                         ; CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *):loc_FD64o ...
UNDEF:000156B8 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000156B8                 extrn _memset:near      ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2962p
UNDEF:000156B8                                         ; CArc::OpenStream2(COpenOptions const &)+297Bp
UNDEF:000156BC                 extrn _IID_IArchiveOpenSeq:near
UNDEF:000156BC                                         ; DATA XREF: CArc::OpenStream2(COpenOptions const &)+E98o
UNDEF:000156C0 ; __int32 __stdcall ReadStream(struct ISequentialInStream *, void *, unsigned int *)
UNDEF:000156C0                 extrn ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:near
UNDEF:000156C0                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+4E2p
UNDEF:000156C0                                         ; CArc::OpenStream2(COpenOptions const &)+670p ...
UNDEF:000156C4 ; int __thiscall CArcInfoEx::FindExtension(CArcInfoEx *__hidden this, const struct UString *)
UNDEF:000156C4                 extrn ?FindExtension@CArcInfoEx@@QBEHABVUString@@@Z:near
UNDEF:000156C4                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+2A0p
UNDEF:000156C4                                         ; CArc::OpenStream2(COpenOptions const &)+1633p ...
UNDEF:000156C8 ; struct UString __stdcall __high ExtractFileNameFromPath(const struct UString *)
UNDEF:000156C8                 extrn ?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z:near
UNDEF:000156C8                                         ; CODE XREF: CArc::OpenStream2(COpenOptions const &)+A3p
UNDEF:000156C8                                         ; CArc::OpenStream(COpenOptions const &)+205p
UNDEF:000156CC ; bool __stdcall StringsAreEqual_Ascii(const wchar_t *, const char *)
UNDEF:000156CC                 extrn ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:near
UNDEF:000156CC                                         ; CODE XREF: UString::IsEqualTo(char const *)+18p
UNDEF:000156D0 ; int __thiscall UString::ReverseFind(UString *__hidden this, wchar_t)
UNDEF:000156D0                 extrn ?ReverseFind@UString@@QBEH_W@Z:near
UNDEF:000156D0                                         ; CODE XREF: UString::ReverseFind_Dot(void)+13p
UNDEF:000156D4 ; bool __stdcall StringsAreEqualNoCase_Ascii(const wchar_t *, const char *)
UNDEF:000156D4                 extrn ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:near
UNDEF:000156D4                                         ; CODE XREF: IsNameFromList(UString const &,char const * const * const,uint)+38p
UNDEF:000156D4                                         ; FindFormatForArchiveType(CCodecs *,CRecordVector<int>,char const *)+89p ...
UNDEF:000156D8                 extrn _IID_IInArchiveGetStream:near
UNDEF:000156D8                                         ; DATA XREF: CArchiveLink::Open(COpenOptions &)+3D9o
UNDEF:000156D8                                         ; NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *):loc_F148o
UNDEF:000156DC                 extrn _IID_IInArchive:near
UNDEF:000156DC                                         ; DATA XREF: NArchive::NParser::CHandler::QueryInterface(_GUID const &,void * *):loc_F12Co
UNDEF:000156E0 ; public: __thiscall UString::UString(class UString const &)
UNDEF:000156E0                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:000156E0                                         ; CODE XREF: CArcInfoEx::GetMainExt(void)+57p
UNDEF:000156E0                                         ; CObjectVector<UString>::Add(UString const &)+5Ap ...
UNDEF:000156E4                 extrn _IID_ICompressProgressInfo:near
UNDEF:000156E4                                         ; DATA XREF: CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *):loc_F86Co
UNDEF:000156E8                 extrn _IID_IArchiveExtractCallback:near
UNDEF:000156E8                                         ; DATA XREF: CExtractCallback_To_OpenCallback::QueryInterface(_GUID const &,void * *):loc_F850o
UNDEF:000156EC                 extrn _IID_IArchiveOpenCallback:near
UNDEF:000156EC                                         ; DATA XREF: CArchiveOpenCallback_Offset::QueryInterface(_GUID const &,void * *):loc_FD48o
UNDEF:000156F0 ; public: virtual long __stdcall CLimitedCachedInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:000156F0                 extrn ?Read@CLimitedCachedInStream@@UAGJPAXIPAI@Z:near
UNDEF:000156F0                                         ; DATA XREF: .rdata:00010024o
UNDEF:000156F4 ; public: virtual long __stdcall CLimitedCachedInStream::Seek(__int64, unsigned int, unsigned __int64 *)
UNDEF:000156F4                 extrn ?Seek@CLimitedCachedInStream@@UAGJ_JIPA_K@Z:near
UNDEF:000156F4                                         ; DATA XREF: .rdata:00010028o
UNDEF:000156F8                 extrn _IID_IInStream:near
UNDEF:000156F8                                         ; DATA XREF: CArchiveLink::Open(COpenOptions &)+4CCo
UNDEF:000156F8                                         ; CLimitedCachedInStream::QueryInterface(_GUID const &,void * *):loc_10170o ...
UNDEF:000156FC ; struct UString __stdcall __high GetDefaultName2(const struct UString *, const struct UString *, const struct UString *)
UNDEF:000156FC                 extrn ?GetDefaultName2@@YG?AVUString@@ABV1@00@Z:near
UNDEF:000156FC                                         ; CODE XREF: CArc::OpenStream(COpenOptions const &)+2E6p
UNDEF:000156FC                                         ; CArc::OpenStream(COpenOptions const &)+386p
UNDEF:00015700                 extrn _IID_IArchiveGetRootProps:near
UNDEF:00015700                                         ; DATA XREF: CArc::OpenStream(COpenOptions const &)+DBo
UNDEF:00015704                 extrn _IID_IArchiveGetRawProps:near
UNDEF:00015704                                         ; DATA XREF: CArc::OpenStream(COpenOptions const &)+A0o
UNDEF:00015708 ; DWORD __stdcall GetLastError()
UNDEF:00015708                 extrn __imp__GetLastError@0:near
UNDEF:00015708                                         ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+13Fp
UNDEF:00015708                                         ; CArchiveLink::ReOpen(COpenOptions &)+23Dp
UNDEF:00015708                                         ; DATA XREF: ...
UNDEF:0001570C ; _DWORD __thiscall CInFileStream::CInFileStream(CInFileStream *__hidden this)
UNDEF:0001570C                 extrn ??0CInFileStream@@QAE@XZ:near
UNDEF:0001570C                                         ; CODE XREF: CArc::OpenStreamOrFile(COpenOptions &)+E3p
UNDEF:0001570C                                         ; CArchiveLink::ReOpen(COpenOptions &)+1E0p
UNDEF:00015710 ; bool __thiscall NWindows::NFile::NIO::CInFile::Open(NWindows::NFile::NIO::CInFile *__hidden this, const wchar_t *)
UNDEF:00015710                 extrn ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:00015710                                         ; CODE XREF: CInFileStream::Open(wchar_t const *)+18p
UNDEF:00015714 ; public: virtual long __stdcall CStdInFileStream::Read(void *, unsigned int, unsigned int *)
UNDEF:00015714                 extrn ?Read@CStdInFileStream@@UAGJPAXIPAI@Z:near
UNDEF:00015714                                         ; DATA XREF: .rdata:00010544o
UNDEF:00015718 ; public: virtual void * __thiscall CStdInFileStream::`scalar deleting destructor'(unsigned int)
UNDEF:00015718                 extrn ??_GCStdInFileStream@@UAEPAXI@Z_0:near
UNDEF:0001571C ; public: virtual void * __thiscall CStdInFileStream::`vector deleting destructor'(unsigned int)
UNDEF:0001571C                 extrn ??_ECStdInFileStream@@UAEPAXI@Z:near ; weak
UNDEF:0001571C                                         ; DATA XREF: .rdata:00010548o
UNDEF:00015720                 extrn _IID_IArchiveKeepModeForNextOpen:near
UNDEF:00015720                                         ; DATA XREF: CArchiveLink::KeepModeForNextOpen(void)+91o
UNDEF:00015724                 extrn _IID_IArchiveOpenSetSubArchiveName:near
UNDEF:00015724                                         ; DATA XREF: CArchiveLink::Open(COpenOptions &)+664o
UNDEF:00015724                                         ; COpenCallbackImp::QueryInterface(_GUID const &,void * *):loc_1134Bo
UNDEF:00015728 ; class UString __stdcall operator+(class UString const &, class UString const &)
UNDEF:00015728                 extrn ??H@YG?AVUString@@ABV0@0@Z:near
UNDEF:00015728                                         ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+1F7p
UNDEF:00015728                                         ; COpenCallbackImp::Init(UString const &,UString const &)+63p
UNDEF:0001572C ; bool NWindows::NFile::NDir::GetFullPathAndSplit(NWindows::NFile::NDir *__hidden this, const wchar_t *, struct UString *, struct UString *)
UNDEF:0001572C                 extrn ?GetFullPathAndSplit@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@1@Z:near
UNDEF:0001572C                                         ; CODE XREF: CArchiveLink::Open2(COpenOptions &,IOpenCallbackUI *)+EFp
UNDEF:0001572C                                         ; CArchiveLink::ReOpen(COpenOptions &)+190p
UNDEF:00015730 ; public: virtual long __stdcall COpenCallbackImp::SetTotal(unsigned __int64 const *, unsigned __int64 const *)
UNDEF:00015730                 extrn ?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z:near
UNDEF:00015730                                         ; DATA XREF: .rdata:0001104Co
UNDEF:00015734 ; public: virtual long __stdcall COpenCallbackImp::SetCompleted(unsigned __int64 const *, unsigned __int64 const *)
UNDEF:00015734                 extrn ?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z:near
UNDEF:00015734                                         ; DATA XREF: .rdata:00011050o
UNDEF:00015738 ; public: virtual long __stdcall COpenCallbackImp::GetProperty(unsigned long, struct tagPROPVARIANT *)
UNDEF:00015738                 extrn ?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z:near
UNDEF:00015738                                         ; DATA XREF: .rdata:00011034o
UNDEF:0001573C ; public: virtual long __stdcall COpenCallbackImp::GetStream(wchar_t const *, struct IInStream * *)
UNDEF:0001573C                 extrn ?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z:near
UNDEF:0001573C                                         ; DATA XREF: .rdata:00011038o
UNDEF:00015740 ; public: virtual long __stdcall COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)
UNDEF:00015740                 extrn ?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z:near
UNDEF:00015740                                         ; DATA XREF: .rdata:0001100Co
UNDEF:00015744                 extrn _IID_IArchiveOpenVolumeCallback:near
UNDEF:00015744                                         ; DATA XREF: COpenCallbackImp::QueryInterface(_GUID const &,void * *):loc_112E3o
UNDEF:00015748 ; bool __thiscall NWindows::NFile::NFind::CFileInfo::Find(NWindows::NFile::NFind::CFileInfo *__hidden this, const wchar_t *)
UNDEF:00015748                 extrn ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:00015748                                         ; CODE XREF: COpenCallbackImp::Init(UString const &,UString const &)+87p
UNDEF:0001574C ; void __thiscall NWindows::NFile::NFind::CFileInfoBase::ClearBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
UNDEF:0001574C                 extrn ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ:near
UNDEF:0001574C                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(void)+11p
UNDEF:00015750 ; public: virtual long __stdcall CTailInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:00015750                 extrn ?Read@CTailInStream@@UAGJPAXIPAI@Z:near
UNDEF:00015750                                         ; DATA XREF: .rdata:000119D0o
UNDEF:00015754 ; public: virtual long __stdcall CTailInStream::Seek(__int64, unsigned int, unsigned __int64 *)
UNDEF:00015754                 extrn ?Seek@CTailInStream@@UAGJ_JIPA_K@Z:near
UNDEF:00015754                                         ; DATA XREF: .rdata:000119D4o
UNDEF:00015758 ; unsigned __int64 __stdcall ConvertStringToUInt64(const wchar_t *, const wchar_t **)
UNDEF:00015758                 extrn ?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z:near
UNDEF:00015758                                         ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+3Ep
UNDEF:0001575C                 extrn __allshl:near     ; CODE XREF: ParseComplexSize(wchar_t const *,unsigned __int64 &)+104p
UNDEF:0001575C                                         ; ParseComplexSize(wchar_t const *,unsigned __int64 &)+12Ep
UNDEF:00015760 ; int __thiscall CCodecs::FindFormatForArchiveType(CCodecs *__hidden this, const struct UString *)
UNDEF:00015760                 extrn ?FindFormatForArchiveType@CCodecs@@QBEHABVUString@@@Z:near
UNDEF:00015760                                         ; CODE XREF: ParseType(CCodecs &,UString const &,COpenType &)+B5p
UNDEF:00015764 ; private: __thiscall UString::UString(unsigned int, wchar_t const *)
UNDEF:00015764                 extrn ??0UString@@AAE@IPB_W@Z:near
UNDEF:00015764                                         ; CODE XREF: UString::Mid(uint,uint)+31p
UNDEF:00015768 ; private: __thiscall UString::UString(unsigned int, class UString const &)
UNDEF:00015768                 extrn ??0UString@@AAE@IABV0@@Z:near
UNDEF:00015768                                         ; CODE XREF: UString::Left(uint)+29p
UNDEF:0001576C ; int __stdcall FindCharPosInString(const wchar_t *, wchar_t)
UNDEF:0001576C                 extrn ?FindCharPosInString@@YGHPB_W_W@Z:near
UNDEF:0001576C                                         ; CODE XREF: UString::Find(wchar_t)+19p
UNDEF:0001576C                                         ; UString::Find(wchar_t,uint)+2Fp
UNDEF:00015770 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00015770                 extrn _memcpy:near      ; CODE XREF: CRecordVector<int>::CRecordVector<int>(CRecordVector<int> const &)+98p
UNDEF:00015770                                         ; CRecordVector<int>::operator=(CRecordVector<int> const &)+C3p ...
UNDEF:00015770
UNDEF:00015770
UNDEF:00015770                 end