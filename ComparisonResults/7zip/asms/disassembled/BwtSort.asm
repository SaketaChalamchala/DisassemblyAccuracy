.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 65BF42B629E9E3AD67BC723391A64325
.text:00000000 ; Input CRC32 : 1212D200
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BwtSort.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __fastcall SortGroup(x, x, x, x, x, x, x, x)
.text:00000000                 public @SortGroup@32
.text:00000000 @SortGroup@32   proc near               ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+485p
.text:00000000                                         ; SortGroup(x,x,x,x,x,x,x,x)+4B9p ...
.text:00000000
.text:00000000 var_74          = dword ptr -74h
.text:00000000 var_70          = dword ptr -70h
.text:00000000 var_6C          = dword ptr -6Ch
.text:00000000 var_68          = dword ptr -68h
.text:00000000 var_64          = dword ptr -64h
.text:00000000 var_60          = dword ptr -60h
.text:00000000 var_5C          = dword ptr -5Ch
.text:00000000 var_58          = dword ptr -58h
.text:00000000 var_54          = dword ptr -54h
.text:00000000 var_50          = dword ptr -50h
.text:00000000 var_4C          = dword ptr -4Ch
.text:00000000 var_48          = dword ptr -48h
.text:00000000 var_44          = dword ptr -44h
.text:00000000 var_40          = dword ptr -40h
.text:00000000 var_3C          = dword ptr -3Ch
.text:00000000 var_38          = dword ptr -38h
.text:00000000 var_34          = dword ptr -34h
.text:00000000 var_30          = dword ptr -30h
.text:00000000 var_2C          = dword ptr -2Ch
.text:00000000 var_28          = dword ptr -28h
.text:00000000 var_24          = dword ptr -24h
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000 arg_10          = dword ptr  18h
.text:00000000 arg_14          = dword ptr  1Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 74h
.text:00000006                 push    esi
.text:00000007                 push    edi
.text:00000008                 push    ecx
.text:00000009                 lea     edi, [ebp+var_74]
.text:0000000C                 mov     ecx, 1Dh
.text:00000011                 mov     eax, 0CCCCCCCCh
.text:00000016                 rep stosd
.text:00000018                 pop     ecx
.text:00000019                 mov     [ebp+var_8], edx
.text:0000001C                 mov     [ebp+var_4], ecx
.text:0000001F                 mov     eax, [ebp+arg_0]
.text:00000022                 mov     ecx, [ebp+arg_C]
.text:00000025                 lea     edx, [ecx+eax*4]
.text:00000028                 mov     [ebp+var_C], edx
.text:0000002B                 cmp     [ebp+arg_4], 1
.text:0000002F                 ja      short loc_38
.text:00000031                 xor     eax, eax
.text:00000033                 jmp     loc_4C1
.text:00000038 ; ---------------------------------------------------------------------------
.text:00000038
.text:00000038 loc_38:                                 ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+2Fj
.text:00000038                 mov     eax, [ebp+var_4]
.text:0000003B                 mov     ecx, [ebp+arg_C]
.text:0000003E                 lea     edx, [ecx+eax*4+40000h]
.text:00000045                 mov     [ebp+var_10], edx
.text:00000048                 mov     eax, 1
.text:0000004D                 mov     ecx, [ebp+arg_8]
.text:00000050                 shl     eax, cl
.text:00000052                 cmp     [ebp+arg_4], eax
.text:00000055                 ja      loc_26A
.text:0000005B                 mov     ecx, [ebp+arg_4]
.text:0000005E                 cmp     ecx, [ebp+arg_14]
.text:00000061                 ja      loc_26A
.text:00000067                 mov     edx, [ebp+var_4]
.text:0000006A                 mov     eax, [ebp+arg_C]
.text:0000006D                 lea     ecx, [eax+edx*4]
.text:00000070                 mov     [ebp+var_14], ecx
.text:00000073                 mov     [ebp+var_30], 0
.text:0000007A                 mov     edx, [ebp+var_C]
.text:0000007D                 mov     eax, [edx]
.text:0000007F                 add     eax, [ebp+var_8]
.text:00000082                 mov     [ebp+var_34], eax
.text:00000085                 mov     ecx, [ebp+var_34]
.text:00000088                 cmp     ecx, [ebp+var_4]
.text:0000008B                 jb      short loc_96
.text:0000008D                 mov     edx, [ebp+var_34]
.text:00000090                 sub     edx, [ebp+var_4]
.text:00000093                 mov     [ebp+var_34], edx
.text:00000096
.text:00000096 loc_96:                                 ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+8Bj
.text:00000096                 mov     eax, [ebp+var_34]
.text:00000099                 mov     ecx, [ebp+var_10]
.text:0000009C                 mov     edx, [ecx+eax*4]
.text:0000009F                 mov     [ebp+var_2C], edx
.text:000000A2                 mov     eax, [ebp+var_2C]
.text:000000A5                 mov     ecx, [ebp+arg_8]
.text:000000A8                 shl     eax, cl
.text:000000AA                 mov     ecx, [ebp+var_14]
.text:000000AD                 mov     [ecx], eax
.text:000000AF                 mov     [ebp+var_18], 1
.text:000000B6                 jmp     short loc_C1
.text:000000B8 ; ---------------------------------------------------------------------------
.text:000000B8
.text:000000B8 loc_B8:                                 ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+115j
.text:000000B8                 mov     edx, [ebp+var_18]
.text:000000BB                 add     edx, 1
.text:000000BE                 mov     [ebp+var_18], edx
.text:000000C1
.text:000000C1 loc_C1:                                 ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+B6j
.text:000000C1                 mov     eax, [ebp+var_18]
.text:000000C4                 cmp     eax, [ebp+arg_4]
.text:000000C7                 jnb     short loc_117
.text:000000C9                 mov     ecx, [ebp+var_18]
.text:000000CC                 mov     edx, [ebp+var_C]
.text:000000CF                 mov     eax, [edx+ecx*4]
.text:000000D2                 add     eax, [ebp+var_8]
.text:000000D5                 mov     [ebp+var_38], eax
.text:000000D8                 mov     ecx, [ebp+var_38]
.text:000000DB                 cmp     ecx, [ebp+var_4]
.text:000000DE                 jb      short loc_E9
.text:000000E0                 mov     edx, [ebp+var_38]
.text:000000E3                 sub     edx, [ebp+var_4]
.text:000000E6                 mov     [ebp+var_38], edx
.text:000000E9
.text:000000E9 loc_E9:                                 ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+DEj
.text:000000E9                 mov     eax, [ebp+var_38]
.text:000000EC                 mov     ecx, [ebp+var_10]
.text:000000EF                 mov     edx, [ecx+eax*4]
.text:000000F2                 mov     [ebp+var_3C], edx
.text:000000F5                 mov     eax, [ebp+var_3C]
.text:000000F8                 mov     ecx, [ebp+arg_8]
.text:000000FB                 shl     eax, cl
.text:000000FD                 or      eax, [ebp+var_18]
.text:00000100                 mov     ecx, [ebp+var_18]
.text:00000103                 mov     edx, [ebp+var_14]
.text:00000106                 mov     [edx+ecx*4], eax
.text:00000109                 mov     eax, [ebp+var_2C]
.text:0000010C                 xor     eax, [ebp+var_3C]
.text:0000010F                 or      eax, [ebp+var_30]
.text:00000112                 mov     [ebp+var_30], eax
.text:00000115                 jmp     short loc_B8
.text:00000117 ; ---------------------------------------------------------------------------
.text:00000117
.text:00000117 loc_117:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+C7j
.text:00000117                 cmp     [ebp+var_30], 0
.text:0000011B                 jnz     short loc_134
.text:0000011D                 mov     ecx, [ebp+arg_4]
.text:00000120                 push    ecx
.text:00000121                 mov     edx, [ebp+var_C]
.text:00000124                 push    edx
.text:00000125                 call    _SetGroupSize@8 ; SetGroupSize(x,x)
.text:0000012A                 mov     eax, 1
.text:0000012F                 jmp     loc_4C1
.text:00000134 ; ---------------------------------------------------------------------------
.text:00000134
.text:00000134 loc_134:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+11Bj
.text:00000134                 mov     eax, [ebp+arg_4]
.text:00000137                 push    eax
.text:00000138                 mov     ecx, [ebp+var_14]
.text:0000013B                 push    ecx
.text:0000013C                 call    _HeapSort@8     ; HeapSort(x,x)
.text:00000141                 mov     edx, 1
.text:00000146                 mov     ecx, [ebp+arg_8]
.text:00000149                 shl     edx, cl
.text:0000014B                 sub     edx, 1
.text:0000014E                 mov     [ebp+var_1C], edx
.text:00000151                 mov     [ebp+var_20], 0
.text:00000158                 mov     eax, [ebp+arg_0]
.text:0000015B                 mov     [ebp+var_24], eax
.text:0000015E                 mov     ecx, [ebp+var_14]
.text:00000161                 mov     edx, [ecx]
.text:00000163                 mov     ecx, [ebp+arg_8]
.text:00000166                 shr     edx, cl
.text:00000168                 mov     [ebp+var_28], edx
.text:0000016B                 mov     eax, [ebp+var_14]
.text:0000016E                 mov     ecx, [eax]
.text:00000170                 and     ecx, [ebp+var_1C]
.text:00000173                 mov     edx, [ebp+var_14]
.text:00000176                 mov     eax, [ebp+var_C]
.text:00000179                 mov     ecx, [eax+ecx*4]
.text:0000017C                 mov     [edx], ecx
.text:0000017E                 mov     [ebp+var_40], 0
.text:00000185                 mov     [ebp+var_18], 1
.text:0000018C                 jmp     short loc_197
.text:0000018E ; ---------------------------------------------------------------------------
.text:0000018E
.text:0000018E loc_18E:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+219j
.text:0000018E                 mov     edx, [ebp+var_18]
.text:00000191                 add     edx, 1
.text:00000194                 mov     [ebp+var_18], edx
.text:00000197
.text:00000197 loc_197:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+18Cj
.text:00000197                 mov     eax, [ebp+var_18]
.text:0000019A                 cmp     eax, [ebp+arg_4]
.text:0000019D                 jnb     short loc_21E
.text:0000019F                 mov     ecx, [ebp+var_18]
.text:000001A2                 mov     edx, [ebp+var_14]
.text:000001A5                 mov     eax, [edx+ecx*4]
.text:000001A8                 mov     [ebp+var_44], eax
.text:000001AB                 mov     edx, [ebp+var_44]
.text:000001AE                 mov     ecx, [ebp+arg_8]
.text:000001B1                 shr     edx, cl
.text:000001B3                 mov     [ebp+var_48], edx
.text:000001B6                 mov     eax, [ebp+var_48]
.text:000001B9                 cmp     eax, [ebp+var_28]
.text:000001BC                 jz      short loc_1EB
.text:000001BE                 mov     ecx, [ebp+var_48]
.text:000001C1                 mov     [ebp+var_28], ecx
.text:000001C4                 mov     edx, [ebp+arg_0]
.text:000001C7                 add     edx, [ebp+var_18]
.text:000001CA                 mov     [ebp+var_24], edx
.text:000001CD                 mov     eax, [ebp+var_18]
.text:000001D0                 sub     eax, [ebp+var_40]
.text:000001D3                 push    eax
.text:000001D4                 mov     ecx, [ebp+var_40]
.text:000001D7                 mov     edx, [ebp+var_14]
.text:000001DA                 lea     eax, [edx+ecx*4]
.text:000001DD                 push    eax
.text:000001DE                 call    _SetGroupSize@8 ; SetGroupSize(x,x)
.text:000001E3                 mov     ecx, [ebp+var_18]
.text:000001E6                 mov     [ebp+var_40], ecx
.text:000001E9                 jmp     short loc_1F2
.text:000001EB ; ---------------------------------------------------------------------------
.text:000001EB
.text:000001EB loc_1EB:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+1BCj
.text:000001EB                 mov     [ebp+var_20], 1
.text:000001F2
.text:000001F2 loc_1F2:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+1E9j
.text:000001F2                 mov     edx, [ebp+var_44]
.text:000001F5                 and     edx, [ebp+var_1C]
.text:000001F8                 mov     eax, [ebp+var_C]
.text:000001FB                 mov     ecx, [eax+edx*4]
.text:000001FE                 mov     [ebp+var_4C], ecx
.text:00000201                 mov     edx, [ebp+var_18]
.text:00000204                 mov     eax, [ebp+var_14]
.text:00000207                 mov     ecx, [ebp+var_4C]
.text:0000020A                 mov     [eax+edx*4], ecx
.text:0000020D                 mov     edx, [ebp+var_4C]
.text:00000210                 mov     eax, [ebp+var_10]
.text:00000213                 mov     ecx, [ebp+var_24]
.text:00000216                 mov     [eax+edx*4], ecx
.text:00000219                 jmp     loc_18E
.text:0000021E ; ---------------------------------------------------------------------------
.text:0000021E
.text:0000021E loc_21E:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+19Dj
.text:0000021E                 mov     edx, [ebp+var_18]
.text:00000221                 sub     edx, [ebp+var_40]
.text:00000224                 push    edx
.text:00000225                 mov     eax, [ebp+var_40]
.text:00000228                 mov     ecx, [ebp+var_14]
.text:0000022B                 lea     edx, [ecx+eax*4]
.text:0000022E                 push    edx
.text:0000022F                 call    _SetGroupSize@8 ; SetGroupSize(x,x)
.text:00000234                 mov     [ebp+var_18], 0
.text:0000023B                 jmp     short loc_246
.text:0000023D ; ---------------------------------------------------------------------------
.text:0000023D
.text:0000023D loc_23D:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+260j
.text:0000023D                 mov     eax, [ebp+var_18]
.text:00000240                 add     eax, 1
.text:00000243                 mov     [ebp+var_18], eax
.text:00000246
.text:00000246 loc_246:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+23Bj
.text:00000246                 mov     ecx, [ebp+var_18]
.text:00000249                 cmp     ecx, [ebp+arg_4]
.text:0000024C                 jnb     short loc_262
.text:0000024E                 mov     edx, [ebp+var_18]
.text:00000251                 mov     eax, [ebp+var_C]
.text:00000254                 mov     ecx, [ebp+var_18]
.text:00000257                 mov     esi, [ebp+var_14]
.text:0000025A                 mov     ecx, [esi+ecx*4]
.text:0000025D                 mov     [eax+edx*4], ecx
.text:00000260                 jmp     short loc_23D
.text:00000262 ; ---------------------------------------------------------------------------
.text:00000262
.text:00000262 loc_262:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+24Cj
.text:00000262                 mov     eax, [ebp+var_20]
.text:00000265                 jmp     loc_4C1
.text:0000026A ; ---------------------------------------------------------------------------
.text:0000026A
.text:0000026A loc_26A:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+55j
.text:0000026A                                         ; SortGroup(x,x,x,x,x,x,x,x)+61j
.text:0000026A                 mov     edx, [ebp+var_C]
.text:0000026D                 mov     eax, [edx]
.text:0000026F                 add     eax, [ebp+var_8]
.text:00000272                 mov     [ebp+var_58], eax
.text:00000275                 mov     ecx, [ebp+var_58]
.text:00000278                 cmp     ecx, [ebp+var_4]
.text:0000027B                 jb      short loc_286
.text:0000027D                 mov     edx, [ebp+var_58]
.text:00000280                 sub     edx, [ebp+var_4]
.text:00000283                 mov     [ebp+var_58], edx
.text:00000286
.text:00000286 loc_286:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+27Bj
.text:00000286                 mov     eax, [ebp+var_58]
.text:00000289                 mov     ecx, [ebp+var_10]
.text:0000028C                 mov     edx, [ecx+eax*4]
.text:0000028F                 mov     [ebp+var_50], edx
.text:00000292                 mov     [ebp+var_54], 1
.text:00000299                 jmp     short loc_2A4
.text:0000029B ; ---------------------------------------------------------------------------
.text:0000029B
.text:0000029B loc_29B:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x):loc_2DCj
.text:0000029B                 mov     eax, [ebp+var_54]
.text:0000029E                 add     eax, 1
.text:000002A1                 mov     [ebp+var_54], eax
.text:000002A4
.text:000002A4 loc_2A4:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+299j
.text:000002A4                 mov     ecx, [ebp+var_54]
.text:000002A7                 cmp     ecx, [ebp+arg_4]
.text:000002AA                 jnb     short loc_2DE
.text:000002AC                 mov     edx, [ebp+var_54]
.text:000002AF                 mov     eax, [ebp+var_C]
.text:000002B2                 mov     ecx, [eax+edx*4]
.text:000002B5                 add     ecx, [ebp+var_8]
.text:000002B8                 mov     [ebp+var_58], ecx
.text:000002BB                 mov     edx, [ebp+var_58]
.text:000002BE                 cmp     edx, [ebp+var_4]
.text:000002C1                 jb      short loc_2CC
.text:000002C3                 mov     eax, [ebp+var_58]
.text:000002C6                 sub     eax, [ebp+var_4]
.text:000002C9                 mov     [ebp+var_58], eax
.text:000002CC
.text:000002CC loc_2CC:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+2C1j
.text:000002CC                 mov     ecx, [ebp+var_58]
.text:000002CF                 mov     edx, [ebp+var_10]
.text:000002D2                 mov     eax, [edx+ecx*4]
.text:000002D5                 cmp     eax, [ebp+var_50]
.text:000002D8                 jz      short loc_2DC
.text:000002DA                 jmp     short loc_2DE
.text:000002DC ; ---------------------------------------------------------------------------
.text:000002DC
.text:000002DC loc_2DC:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+2D8j
.text:000002DC                 jmp     short loc_29B
.text:000002DE ; ---------------------------------------------------------------------------
.text:000002DE
.text:000002DE loc_2DE:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+2AAj
.text:000002DE                                         ; SortGroup(x,x,x,x,x,x,x,x)+2DAj
.text:000002DE                 mov     ecx, [ebp+var_54]
.text:000002E1                 cmp     ecx, [ebp+arg_4]
.text:000002E4                 jnz     short loc_2FD
.text:000002E6                 mov     edx, [ebp+arg_4]
.text:000002E9                 push    edx
.text:000002EA                 mov     eax, [ebp+var_C]
.text:000002ED                 push    eax
.text:000002EE                 call    _SetGroupSize@8 ; SetGroupSize(x,x)
.text:000002F3                 mov     eax, 1
.text:000002F8                 jmp     loc_4C1
.text:000002FD ; ---------------------------------------------------------------------------
.text:000002FD
.text:000002FD loc_2FD:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+2E4j
.text:000002FD                                         ; SortGroup(x,x,x,x,x,x,x,x):loc_42Fj
.text:000002FD                 cmp     [ebp+arg_14], 1
.text:00000301                 ja      short loc_31A
.text:00000303                 mov     ecx, [ebp+arg_4]
.text:00000306                 push    ecx
.text:00000307                 mov     edx, [ebp+var_C]
.text:0000030A                 push    edx
.text:0000030B                 call    _SetGroupSize@8 ; SetGroupSize(x,x)
.text:00000310                 mov     eax, 1
.text:00000315                 jmp     loc_4C1
.text:0000031A ; ---------------------------------------------------------------------------
.text:0000031A
.text:0000031A loc_31A:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+301j
.text:0000031A                 mov     eax, [ebp+arg_14]
.text:0000031D                 add     eax, 1
.text:00000320                 shr     eax, 1
.text:00000322                 add     eax, [ebp+arg_10]
.text:00000325                 mov     [ebp+var_60], eax
.text:00000328                 mov     ecx, [ebp+arg_4]
.text:0000032B                 mov     [ebp+var_64], ecx
.text:0000032E                 mov     [ebp+var_5C], 0
.text:00000335
.text:00000335 loc_335:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+3F8j
.text:00000335                 mov     edx, [ebp+var_5C]
.text:00000338                 mov     eax, [ebp+var_C]
.text:0000033B                 mov     ecx, [eax+edx*4]
.text:0000033E                 add     ecx, [ebp+var_8]
.text:00000341                 mov     [ebp+var_68], ecx
.text:00000344                 mov     edx, [ebp+var_68]
.text:00000347                 cmp     edx, [ebp+var_4]
.text:0000034A                 jb      short loc_355
.text:0000034C                 mov     eax, [ebp+var_68]
.text:0000034F                 sub     eax, [ebp+var_4]
.text:00000352                 mov     [ebp+var_68], eax
.text:00000355
.text:00000355 loc_355:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+34Aj
.text:00000355                 mov     ecx, [ebp+var_68]
.text:00000358                 mov     edx, [ebp+var_10]
.text:0000035B                 mov     eax, [edx+ecx*4]
.text:0000035E                 cmp     eax, [ebp+var_60]
.text:00000361                 jb      loc_3E9
.text:00000367                 mov     ecx, [ebp+var_64]
.text:0000036A                 sub     ecx, 1
.text:0000036D                 mov     [ebp+var_64], ecx
.text:00000370                 jmp     short loc_37B
.text:00000372 ; ---------------------------------------------------------------------------
.text:00000372
.text:00000372 loc_372:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x):loc_3DDj
.text:00000372                 mov     edx, [ebp+var_64]
.text:00000375                 sub     edx, 1
.text:00000378                 mov     [ebp+var_64], edx
.text:0000037B
.text:0000037B loc_37B:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+370j
.text:0000037B                 mov     eax, [ebp+var_64]
.text:0000037E                 cmp     eax, [ebp+var_5C]
.text:00000381                 jbe     short loc_3DF
.text:00000383                 mov     ecx, [ebp+var_64]
.text:00000386                 mov     edx, [ebp+var_C]
.text:00000389                 mov     eax, [edx+ecx*4]
.text:0000038C                 add     eax, [ebp+var_8]
.text:0000038F                 mov     [ebp+var_68], eax
.text:00000392                 mov     ecx, [ebp+var_68]
.text:00000395                 cmp     ecx, [ebp+var_4]
.text:00000398                 jb      short loc_3A3
.text:0000039A                 mov     edx, [ebp+var_68]
.text:0000039D                 sub     edx, [ebp+var_4]
.text:000003A0                 mov     [ebp+var_68], edx
.text:000003A3
.text:000003A3 loc_3A3:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+398j
.text:000003A3                 mov     eax, [ebp+var_68]
.text:000003A6                 mov     ecx, [ebp+var_10]
.text:000003A9                 mov     edx, [ecx+eax*4]
.text:000003AC                 cmp     edx, [ebp+var_60]
.text:000003AF                 jnb     short loc_3DD
.text:000003B1                 mov     eax, [ebp+var_5C]
.text:000003B4                 mov     ecx, [ebp+var_C]
.text:000003B7                 mov     edx, [ecx+eax*4]
.text:000003BA                 mov     [ebp+var_6C], edx
.text:000003BD                 mov     eax, [ebp+var_5C]
.text:000003C0                 mov     ecx, [ebp+var_C]
.text:000003C3                 mov     edx, [ebp+var_64]
.text:000003C6                 mov     esi, [ebp+var_C]
.text:000003C9                 mov     edx, [esi+edx*4]
.text:000003CC                 mov     [ecx+eax*4], edx
.text:000003CF                 mov     eax, [ebp+var_64]
.text:000003D2                 mov     ecx, [ebp+var_C]
.text:000003D5                 mov     edx, [ebp+var_6C]
.text:000003D8                 mov     [ecx+eax*4], edx
.text:000003DB                 jmp     short loc_3DF
.text:000003DD ; ---------------------------------------------------------------------------
.text:000003DD
.text:000003DD loc_3DD:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+3AFj
.text:000003DD                 jmp     short loc_372
.text:000003DF ; ---------------------------------------------------------------------------
.text:000003DF
.text:000003DF loc_3DF:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+381j
.text:000003DF                                         ; SortGroup(x,x,x,x,x,x,x,x)+3DBj
.text:000003DF                 mov     eax, [ebp+var_5C]
.text:000003E2                 cmp     eax, [ebp+var_64]
.text:000003E5                 jb      short loc_3E9
.text:000003E7                 jmp     short loc_3FE
.text:000003E9 ; ---------------------------------------------------------------------------
.text:000003E9
.text:000003E9 loc_3E9:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+361j
.text:000003E9                                         ; SortGroup(x,x,x,x,x,x,x,x)+3E5j
.text:000003E9                 mov     ecx, [ebp+var_5C]
.text:000003EC                 add     ecx, 1
.text:000003EF                 mov     [ebp+var_5C], ecx
.text:000003F2                 mov     edx, [ebp+var_5C]
.text:000003F5                 cmp     edx, [ebp+var_64]
.text:000003F8                 jb      loc_335
.text:000003FE
.text:000003FE loc_3FE:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+3E7j
.text:000003FE                 cmp     [ebp+var_5C], 0
.text:00000402                 jnz     short loc_41A
.text:00000404                 mov     eax, [ebp+var_60]
.text:00000407                 sub     eax, [ebp+arg_10]
.text:0000040A                 mov     ecx, [ebp+arg_14]
.text:0000040D                 sub     ecx, eax
.text:0000040F                 mov     [ebp+arg_14], ecx
.text:00000412                 mov     edx, [ebp+var_60]
.text:00000415                 mov     [ebp+arg_10], edx
.text:00000418                 jmp     short loc_42F
.text:0000041A ; ---------------------------------------------------------------------------
.text:0000041A
.text:0000041A loc_41A:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+402j
.text:0000041A                 mov     eax, [ebp+var_5C]
.text:0000041D                 cmp     eax, [ebp+arg_4]
.text:00000420                 jnz     short loc_42D
.text:00000422                 mov     ecx, [ebp+var_60]
.text:00000425                 sub     ecx, [ebp+arg_10]
.text:00000428                 mov     [ebp+arg_14], ecx
.text:0000042B                 jmp     short loc_42F
.text:0000042D ; ---------------------------------------------------------------------------
.text:0000042D
.text:0000042D loc_42D:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+420j
.text:0000042D                 jmp     short loc_434
.text:0000042F ; ---------------------------------------------------------------------------
.text:0000042F
.text:0000042F loc_42F:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+418j
.text:0000042F                                         ; SortGroup(x,x,x,x,x,x,x,x)+42Bj
.text:0000042F                 jmp     loc_2FD
.text:00000434 ; ---------------------------------------------------------------------------
.text:00000434
.text:00000434 loc_434:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x):loc_42Dj
.text:00000434                 mov     edx, [ebp+var_5C]
.text:00000437                 mov     [ebp+var_70], edx
.text:0000043A                 jmp     short loc_445
.text:0000043C ; ---------------------------------------------------------------------------
.text:0000043C
.text:0000043C loc_43C:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+462j
.text:0000043C                 mov     eax, [ebp+var_70]
.text:0000043F                 add     eax, 1
.text:00000442                 mov     [ebp+var_70], eax
.text:00000445
.text:00000445 loc_445:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+43Aj
.text:00000445                 mov     ecx, [ebp+var_70]
.text:00000448                 cmp     ecx, [ebp+arg_4]
.text:0000044B                 jnb     short loc_464
.text:0000044D                 mov     edx, [ebp+arg_0]
.text:00000450                 add     edx, [ebp+var_5C]
.text:00000453                 mov     eax, [ebp+var_70]
.text:00000456                 mov     ecx, [ebp+var_C]
.text:00000459                 mov     eax, [ecx+eax*4]
.text:0000045C                 mov     ecx, [ebp+var_10]
.text:0000045F                 mov     [ecx+eax*4], edx
.text:00000462                 jmp     short loc_43C
.text:00000464 ; ---------------------------------------------------------------------------
.text:00000464
.text:00000464 loc_464:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+44Bj
.text:00000464                 mov     edx, [ebp+var_60]
.text:00000467                 sub     edx, [ebp+arg_10]
.text:0000046A                 push    edx
.text:0000046B                 mov     eax, [ebp+arg_10]
.text:0000046E                 push    eax
.text:0000046F                 mov     ecx, [ebp+arg_C]
.text:00000472                 push    ecx
.text:00000473                 mov     edx, [ebp+arg_8]
.text:00000476                 push    edx
.text:00000477                 mov     eax, [ebp+var_5C]
.text:0000047A                 push    eax
.text:0000047B                 mov     ecx, [ebp+arg_0]
.text:0000047E                 push    ecx
.text:0000047F                 mov     edx, [ebp+var_8]
.text:00000482                 mov     ecx, [ebp+var_4]
.text:00000485                 call    @SortGroup@32   ; SortGroup(x,x,x,x,x,x,x,x)
.text:0000048A                 mov     [ebp+var_74], eax
.text:0000048D                 mov     edx, [ebp+var_60]
.text:00000490                 sub     edx, [ebp+arg_10]
.text:00000493                 mov     eax, [ebp+arg_14]
.text:00000496                 sub     eax, edx
.text:00000498                 push    eax
.text:00000499                 mov     ecx, [ebp+var_60]
.text:0000049C                 push    ecx
.text:0000049D                 mov     edx, [ebp+arg_C]
.text:000004A0                 push    edx
.text:000004A1                 mov     eax, [ebp+arg_8]
.text:000004A4                 push    eax
.text:000004A5                 mov     ecx, [ebp+arg_4]
.text:000004A8                 sub     ecx, [ebp+var_5C]
.text:000004AB                 push    ecx
.text:000004AC                 mov     edx, [ebp+arg_0]
.text:000004AF                 add     edx, [ebp+var_5C]
.text:000004B2                 push    edx
.text:000004B3                 mov     edx, [ebp+var_8]
.text:000004B6                 mov     ecx, [ebp+var_4]
.text:000004B9                 call    @SortGroup@32   ; SortGroup(x,x,x,x,x,x,x,x)
.text:000004BE                 or      eax, [ebp+var_74]
.text:000004C1
.text:000004C1 loc_4C1:                                ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+33j
.text:000004C1                                         ; SortGroup(x,x,x,x,x,x,x,x)+12Fj ...
.text:000004C1                 pop     edi
.text:000004C2                 pop     esi
.text:000004C3                 add     esp, 74h
.text:000004C6                 cmp     ebp, esp
.text:000004C8                 call    __RTC_CheckEsp
.text:000004CD                 mov     esp, ebp
.text:000004CF                 pop     ebp
.text:000004D0                 retn    18h
.text:000004D0 @SortGroup@32   endp
.text:000004D0
.text:000004D0 ; ---------------------------------------------------------------------------
.text:000004D3                 align 10h
.text:000004E0
.text:000004E0 ; =============== S U B R O U T I N E =======================================
.text:000004E0
.text:000004E0 ; Attributes: bp-based frame
.text:000004E0
.text:000004E0 ; __stdcall SetGroupSize(x, x)
.text:000004E0 _SetGroupSize@8 proc near               ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+125p
.text:000004E0                                         ; SortGroup(x,x,x,x,x,x,x,x)+1DEp ...
.text:000004E0
.text:000004E0 arg_0           = dword ptr  8
.text:000004E0 arg_4           = dword ptr  0Ch
.text:000004E0
.text:000004E0                 push    ebp
.text:000004E1                 mov     ebp, esp
.text:000004E3                 mov     eax, [ebp+arg_4]
.text:000004E6                 sub     eax, 1
.text:000004E9                 mov     [ebp+arg_4], eax
.text:000004EC                 jnz     short loc_4F0
.text:000004EE                 jmp     short loc_53A
.text:000004F0 ; ---------------------------------------------------------------------------
.text:000004F0
.text:000004F0 loc_4F0:                                ; CODE XREF: SetGroupSize(x,x)+Cj
.text:000004F0                 mov     ecx, [ebp+arg_4]
.text:000004F3                 and     ecx, 3FFh
.text:000004F9                 shl     ecx, 14h
.text:000004FC                 or      ecx, 80000000h
.text:00000502                 mov     edx, [ebp+arg_0]
.text:00000505                 or      ecx, [edx]
.text:00000507                 mov     eax, [ebp+arg_0]
.text:0000050A                 mov     [eax], ecx
.text:0000050C                 cmp     [ebp+arg_4], 400h
.text:00000513                 jb      short loc_53A
.text:00000515                 mov     ecx, [ebp+arg_0]
.text:00000518                 mov     edx, [ecx]
.text:0000051A                 or      edx, 40000000h
.text:00000520                 mov     eax, [ebp+arg_0]
.text:00000523                 mov     [eax], edx
.text:00000525                 mov     ecx, [ebp+arg_4]
.text:00000528                 shr     ecx, 0Ah
.text:0000052B                 shl     ecx, 14h
.text:0000052E                 mov     edx, [ebp+arg_0]
.text:00000531                 or      ecx, [edx+4]
.text:00000534                 mov     eax, [ebp+arg_0]
.text:00000537                 mov     [eax+4], ecx
.text:0000053A
.text:0000053A loc_53A:                                ; CODE XREF: SetGroupSize(x,x)+Ej
.text:0000053A                                         ; SetGroupSize(x,x)+33j
.text:0000053A                 pop     ebp
.text:0000053B                 retn    8
.text:0000053B _SetGroupSize@8 endp
.text:0000053B
.text:0000053B ; ---------------------------------------------------------------------------
.text:0000053E                 align 10h
.text:00000540
.text:00000540 ; =============== S U B R O U T I N E =======================================
.text:00000540
.text:00000540 ; Attributes: bp-based frame
.text:00000540
.text:00000540 ; __stdcall BlockSort(x, x, x)
.text:00000540                 public _BlockSort@12
.text:00000540 _BlockSort@12   proc near
.text:00000540
.text:00000540 var_44          = dword ptr -44h
.text:00000540 var_40          = dword ptr -40h
.text:00000540 var_3C          = dword ptr -3Ch
.text:00000540 var_38          = dword ptr -38h
.text:00000540 var_34          = dword ptr -34h
.text:00000540 var_30          = dword ptr -30h
.text:00000540 var_2C          = dword ptr -2Ch
.text:00000540 var_28          = dword ptr -28h
.text:00000540 var_24          = dword ptr -24h
.text:00000540 var_20          = dword ptr -20h
.text:00000540 var_1C          = dword ptr -1Ch
.text:00000540 var_18          = dword ptr -18h
.text:00000540 var_14          = dword ptr -14h
.text:00000540 var_10          = dword ptr -10h
.text:00000540 var_C           = dword ptr -0Ch
.text:00000540 var_8           = dword ptr -8
.text:00000540 var_4           = dword ptr -4
.text:00000540 arg_0           = dword ptr  8
.text:00000540 arg_4           = dword ptr  0Ch
.text:00000540 arg_8           = dword ptr  10h
.text:00000540
.text:00000540                 push    ebp
.text:00000541                 mov     ebp, esp
.text:00000543                 sub     esp, 44h
.text:00000546                 push    esi
.text:00000547                 push    edi
.text:00000548                 lea     edi, [ebp+var_44]
.text:0000054B                 mov     ecx, 11h
.text:00000550                 mov     eax, 0CCCCCCCCh
.text:00000555                 rep stosd
.text:00000557                 mov     eax, [ebp+arg_8]
.text:0000055A                 mov     ecx, [ebp+arg_0]
.text:0000055D                 lea     edx, [ecx+eax*4]
.text:00000560                 mov     [ebp+var_4], edx
.text:00000563                 mov     [ebp+var_8], 0
.text:0000056A                 jmp     short loc_575
.text:0000056C ; ---------------------------------------------------------------------------
.text:0000056C
.text:0000056C loc_56C:                                ; CODE XREF: BlockSort(x,x,x)+4Bj
.text:0000056C                 mov     eax, [ebp+var_8]
.text:0000056F                 add     eax, 1
.text:00000572                 mov     [ebp+var_8], eax
.text:00000575
.text:00000575 loc_575:                                ; CODE XREF: BlockSort(x,x,x)+2Aj
.text:00000575                 cmp     [ebp+var_8], 10000h
.text:0000057C                 jnb     short loc_58D
.text:0000057E                 mov     ecx, [ebp+var_8]
.text:00000581                 mov     edx, [ebp+var_4]
.text:00000584                 mov     dword ptr [edx+ecx*4], 0
.text:0000058B                 jmp     short loc_56C
.text:0000058D ; ---------------------------------------------------------------------------
.text:0000058D
.text:0000058D loc_58D:                                ; CODE XREF: BlockSort(x,x,x)+3Cj
.text:0000058D                 mov     [ebp+var_8], 0
.text:00000594                 jmp     short loc_59F
.text:00000596 ; ---------------------------------------------------------------------------
.text:00000596
.text:00000596 loc_596:                                ; CODE XREF: BlockSort(x,x,x)+A9j
.text:00000596                 mov     eax, [ebp+var_8]
.text:00000599                 add     eax, 1
.text:0000059C                 mov     [ebp+var_8], eax
.text:0000059F
.text:0000059F loc_59F:                                ; CODE XREF: BlockSort(x,x,x)+54j
.text:0000059F                 mov     ecx, [ebp+arg_8]
.text:000005A2                 sub     ecx, 1
.text:000005A5                 cmp     [ebp+var_8], ecx
.text:000005A8                 jnb     short loc_5EB
.text:000005AA                 mov     edx, [ebp+arg_4]
.text:000005AD                 add     edx, [ebp+var_8]
.text:000005B0                 movzx   eax, byte ptr [edx+1]
.text:000005B4                 mov     ecx, [ebp+arg_4]
.text:000005B7                 add     ecx, [ebp+var_8]
.text:000005BA                 movzx   edx, byte ptr [ecx]
.text:000005BD                 shl     edx, 8
.text:000005C0                 or      edx, eax
.text:000005C2                 mov     eax, [ebp+var_4]
.text:000005C5                 mov     ecx, [eax+edx*4]
.text:000005C8                 add     ecx, 1
.text:000005CB                 mov     edx, [ebp+arg_4]
.text:000005CE                 add     edx, [ebp+var_8]
.text:000005D1                 movzx   eax, byte ptr [edx+1]
.text:000005D5                 mov     edx, [ebp+arg_4]
.text:000005D8                 add     edx, [ebp+var_8]
.text:000005DB                 movzx   edx, byte ptr [edx]
.text:000005DE                 shl     edx, 8
.text:000005E1                 or      edx, eax
.text:000005E3                 mov     eax, [ebp+var_4]
.text:000005E6                 mov     [eax+edx*4], ecx
.text:000005E9                 jmp     short loc_596
.text:000005EB ; ---------------------------------------------------------------------------
.text:000005EB
.text:000005EB loc_5EB:                                ; CODE XREF: BlockSort(x,x,x)+68j
.text:000005EB                 mov     ecx, [ebp+arg_4]
.text:000005EE                 movzx   edx, byte ptr [ecx]
.text:000005F1                 mov     eax, [ebp+arg_4]
.text:000005F4                 add     eax, [ebp+var_8]
.text:000005F7                 movzx   ecx, byte ptr [eax]
.text:000005FA                 shl     ecx, 8
.text:000005FD                 or      ecx, edx
.text:000005FF                 mov     edx, [ebp+var_4]
.text:00000602                 mov     eax, [edx+ecx*4]
.text:00000605                 add     eax, 1
.text:00000608                 mov     ecx, [ebp+arg_4]
.text:0000060B                 movzx   edx, byte ptr [ecx]
.text:0000060E                 mov     ecx, [ebp+arg_4]
.text:00000611                 add     ecx, [ebp+var_8]
.text:00000614                 movzx   ecx, byte ptr [ecx]
.text:00000617                 shl     ecx, 8
.text:0000061A                 or      ecx, edx
.text:0000061C                 mov     edx, [ebp+var_4]
.text:0000061F                 mov     [edx+ecx*4], eax
.text:00000622                 mov     eax, [ebp+var_4]
.text:00000625                 add     eax, 40000h
.text:0000062A                 mov     [ebp+var_C], eax
.text:0000062D                 mov     [ebp+var_10], 0
.text:00000634                 mov     [ebp+var_8], 0
.text:0000063B                 jmp     short loc_646
.text:0000063D ; ---------------------------------------------------------------------------
.text:0000063D
.text:0000063D loc_63D:                                ; CODE XREF: BlockSort(x,x,x)+139j
.text:0000063D                 mov     ecx, [ebp+var_8]
.text:00000640                 add     ecx, 1
.text:00000643                 mov     [ebp+var_8], ecx
.text:00000646
.text:00000646 loc_646:                                ; CODE XREF: BlockSort(x,x,x)+FBj
.text:00000646                 cmp     [ebp+var_8], 10000h
.text:0000064D                 jnb     short loc_67B
.text:0000064F                 mov     edx, [ebp+var_8]
.text:00000652                 mov     eax, [ebp+var_4]
.text:00000655                 mov     ecx, [eax+edx*4]
.text:00000658                 mov     [ebp+var_14], ecx
.text:0000065B                 cmp     [ebp+var_14], 0
.text:0000065F                 jbe     short loc_66A
.text:00000661                 mov     edx, [ebp+var_10]
.text:00000664                 add     edx, [ebp+var_14]
.text:00000667                 mov     [ebp+var_10], edx
.text:0000066A
.text:0000066A loc_66A:                                ; CODE XREF: BlockSort(x,x,x)+11Fj
.text:0000066A                 mov     eax, [ebp+var_10]
.text:0000066D                 sub     eax, [ebp+var_14]
.text:00000670                 mov     ecx, [ebp+var_8]
.text:00000673                 mov     edx, [ebp+var_4]
.text:00000676                 mov     [edx+ecx*4], eax
.text:00000679                 jmp     short loc_63D
.text:0000067B ; ---------------------------------------------------------------------------
.text:0000067B
.text:0000067B loc_67B:                                ; CODE XREF: BlockSort(x,x,x)+10Dj
.text:0000067B                 mov     [ebp+var_8], 0
.text:00000682                 jmp     short loc_68D
.text:00000684 ; ---------------------------------------------------------------------------
.text:00000684
.text:00000684 loc_684:                                ; CODE XREF: BlockSort(x,x,x)+17Fj
.text:00000684                 mov     eax, [ebp+var_8]
.text:00000687                 add     eax, 1
.text:0000068A                 mov     [ebp+var_8], eax
.text:0000068D
.text:0000068D loc_68D:                                ; CODE XREF: BlockSort(x,x,x)+142j
.text:0000068D                 mov     ecx, [ebp+arg_8]
.text:00000690                 sub     ecx, 1
.text:00000693                 cmp     [ebp+var_8], ecx
.text:00000696                 jnb     short loc_6C1
.text:00000698                 mov     edx, [ebp+arg_4]
.text:0000069B                 add     edx, [ebp+var_8]
.text:0000069E                 movzx   eax, byte ptr [edx]
.text:000006A1                 shl     eax, 8
.text:000006A4                 mov     ecx, [ebp+arg_4]
.text:000006A7                 add     ecx, [ebp+var_8]
.text:000006AA                 movzx   edx, byte ptr [ecx+1]
.text:000006AE                 or      eax, edx
.text:000006B0                 mov     ecx, [ebp+var_8]
.text:000006B3                 mov     edx, [ebp+var_C]
.text:000006B6                 mov     esi, [ebp+var_4]
.text:000006B9                 mov     eax, [esi+eax*4]
.text:000006BC                 mov     [edx+ecx*4], eax
.text:000006BF                 jmp     short loc_684
.text:000006C1 ; ---------------------------------------------------------------------------
.text:000006C1
.text:000006C1 loc_6C1:                                ; CODE XREF: BlockSort(x,x,x)+156j
.text:000006C1                 mov     ecx, [ebp+arg_4]
.text:000006C4                 add     ecx, [ebp+var_8]
.text:000006C7                 movzx   edx, byte ptr [ecx]
.text:000006CA                 shl     edx, 8
.text:000006CD                 mov     eax, [ebp+arg_4]
.text:000006D0                 movzx   ecx, byte ptr [eax]
.text:000006D3                 or      edx, ecx
.text:000006D5                 mov     eax, [ebp+var_8]
.text:000006D8                 mov     ecx, [ebp+var_C]
.text:000006DB                 mov     esi, [ebp+var_4]
.text:000006DE                 mov     edx, [esi+edx*4]
.text:000006E1                 mov     [ecx+eax*4], edx
.text:000006E4                 mov     [ebp+var_8], 0
.text:000006EB                 jmp     short loc_6F6
.text:000006ED ; ---------------------------------------------------------------------------
.text:000006ED
.text:000006ED loc_6ED:                                ; CODE XREF: BlockSort(x,x,x)+227j
.text:000006ED                 mov     eax, [ebp+var_8]
.text:000006F0                 add     eax, 1
.text:000006F3                 mov     [ebp+var_8], eax
.text:000006F6
.text:000006F6 loc_6F6:                                ; CODE XREF: BlockSort(x,x,x)+1ABj
.text:000006F6                 mov     ecx, [ebp+arg_8]
.text:000006F9                 sub     ecx, 1
.text:000006FC                 cmp     [ebp+var_8], ecx
.text:000006FF                 jnb     short loc_769
.text:00000701                 mov     edx, [ebp+arg_4]
.text:00000704                 add     edx, [ebp+var_8]
.text:00000707                 movzx   eax, byte ptr [edx]
.text:0000070A                 shl     eax, 8
.text:0000070D                 mov     ecx, [ebp+arg_4]
.text:00000710                 add     ecx, [ebp+var_8]
.text:00000713                 movzx   edx, byte ptr [ecx+1]
.text:00000717                 or      eax, edx
.text:00000719                 mov     ecx, [ebp+var_4]
.text:0000071C                 mov     edx, [ecx+eax*4]
.text:0000071F                 mov     eax, [ebp+arg_0]
.text:00000722                 mov     ecx, [ebp+var_8]
.text:00000725                 mov     [eax+edx*4], ecx
.text:00000728                 mov     edx, [ebp+arg_4]
.text:0000072B                 add     edx, [ebp+var_8]
.text:0000072E                 movzx   eax, byte ptr [edx+1]
.text:00000732                 mov     ecx, [ebp+arg_4]
.text:00000735                 add     ecx, [ebp+var_8]
.text:00000738                 movzx   edx, byte ptr [ecx]
.text:0000073B                 shl     edx, 8
.text:0000073E                 or      edx, eax
.text:00000740                 mov     eax, [ebp+var_4]
.text:00000743                 mov     ecx, [eax+edx*4]
.text:00000746                 add     ecx, 1
.text:00000749                 mov     edx, [ebp+arg_4]
.text:0000074C                 add     edx, [ebp+var_8]
.text:0000074F                 movzx   eax, byte ptr [edx+1]
.text:00000753                 mov     edx, [ebp+arg_4]
.text:00000756                 add     edx, [ebp+var_8]
.text:00000759                 movzx   edx, byte ptr [edx]
.text:0000075C                 shl     edx, 8
.text:0000075F                 or      edx, eax
.text:00000761                 mov     eax, [ebp+var_4]
.text:00000764                 mov     [eax+edx*4], ecx
.text:00000767                 jmp     short loc_6ED
.text:00000769 ; ---------------------------------------------------------------------------
.text:00000769
.text:00000769 loc_769:                                ; CODE XREF: BlockSort(x,x,x)+1BFj
.text:00000769                 mov     ecx, [ebp+arg_4]
.text:0000076C                 add     ecx, [ebp+var_8]
.text:0000076F                 movzx   edx, byte ptr [ecx]
.text:00000772                 shl     edx, 8
.text:00000775                 mov     eax, [ebp+arg_4]
.text:00000778                 movzx   ecx, byte ptr [eax]
.text:0000077B                 or      edx, ecx
.text:0000077D                 mov     eax, [ebp+var_4]
.text:00000780                 mov     ecx, [eax+edx*4]
.text:00000783                 mov     edx, [ebp+arg_0]
.text:00000786                 mov     eax, [ebp+var_8]
.text:00000789                 mov     [edx+ecx*4], eax
.text:0000078C                 mov     ecx, [ebp+arg_4]
.text:0000078F                 movzx   edx, byte ptr [ecx]
.text:00000792                 mov     eax, [ebp+arg_4]
.text:00000795                 add     eax, [ebp+var_8]
.text:00000798                 movzx   ecx, byte ptr [eax]
.text:0000079B                 shl     ecx, 8
.text:0000079E                 or      ecx, edx
.text:000007A0                 mov     edx, [ebp+var_4]
.text:000007A3                 mov     eax, [edx+ecx*4]
.text:000007A6                 add     eax, 1
.text:000007A9                 mov     ecx, [ebp+arg_4]
.text:000007AC                 movzx   edx, byte ptr [ecx]
.text:000007AF                 mov     ecx, [ebp+arg_4]
.text:000007B2                 add     ecx, [ebp+var_8]
.text:000007B5                 movzx   ecx, byte ptr [ecx]
.text:000007B8                 shl     ecx, 8
.text:000007BB                 or      ecx, edx
.text:000007BD                 mov     edx, [ebp+var_4]
.text:000007C0                 mov     [edx+ecx*4], eax
.text:000007C3                 mov     [ebp+var_18], 0
.text:000007CA                 mov     [ebp+var_8], 0
.text:000007D1                 jmp     short loc_7DC
.text:000007D3 ; ---------------------------------------------------------------------------
.text:000007D3
.text:000007D3 loc_7D3:                                ; CODE XREF: BlockSort(x,x,x)+2B6j
.text:000007D3                                         ; BlockSort(x,x,x)+2D7j
.text:000007D3                 mov     eax, [ebp+var_8]
.text:000007D6                 add     eax, 1
.text:000007D9                 mov     [ebp+var_8], eax
.text:000007DC
.text:000007DC loc_7DC:                                ; CODE XREF: BlockSort(x,x,x)+291j
.text:000007DC                 cmp     [ebp+var_8], 10000h
.text:000007E3                 jnb     short loc_819
.text:000007E5                 mov     ecx, [ebp+var_8]
.text:000007E8                 mov     edx, [ebp+var_4]
.text:000007EB                 mov     eax, [edx+ecx*4]
.text:000007EE                 sub     eax, [ebp+var_18]
.text:000007F1                 mov     [ebp+var_1C], eax
.text:000007F4                 jnz     short loc_7F8
.text:000007F6                 jmp     short loc_7D3
.text:000007F8 ; ---------------------------------------------------------------------------
.text:000007F8
.text:000007F8 loc_7F8:                                ; CODE XREF: BlockSort(x,x,x)+2B4j
.text:000007F8                 mov     ecx, [ebp+var_1C]
.text:000007FB                 push    ecx
.text:000007FC                 mov     edx, [ebp+var_18]
.text:000007FF                 mov     eax, [ebp+arg_0]
.text:00000802                 lea     ecx, [eax+edx*4]
.text:00000805                 push    ecx
.text:00000806                 call    _SetGroupSize@8 ; SetGroupSize(x,x)
.text:0000080B                 mov     edx, [ebp+var_8]
.text:0000080E                 mov     eax, [ebp+var_4]
.text:00000811                 mov     ecx, [eax+edx*4]
.text:00000814                 mov     [ebp+var_18], ecx
.text:00000817                 jmp     short loc_7D3
.text:00000819 ; ---------------------------------------------------------------------------
.text:00000819
.text:00000819 loc_819:                                ; CODE XREF: BlockSort(x,x,x)+2A3j
.text:00000819                 mov     [ebp+var_20], 0
.text:00000820                 jmp     short loc_82B
.text:00000822 ; ---------------------------------------------------------------------------
.text:00000822
.text:00000822 loc_822:                                ; CODE XREF: BlockSort(x,x,x)+2FAj
.text:00000822                 mov     edx, [ebp+var_20]
.text:00000825                 add     edx, 1
.text:00000828                 mov     [ebp+var_20], edx
.text:0000082B
.text:0000082B loc_82B:                                ; CODE XREF: BlockSort(x,x,x)+2E0j
.text:0000082B                 mov     eax, [ebp+arg_8]
.text:0000082E                 sub     eax, 1
.text:00000831                 mov     ecx, [ebp+var_20]
.text:00000834                 shr     eax, cl
.text:00000836                 test    eax, eax
.text:00000838                 jz      short loc_83C
.text:0000083A                 jmp     short loc_822
.text:0000083C ; ---------------------------------------------------------------------------
.text:0000083C
.text:0000083C loc_83C:                                ; CODE XREF: BlockSort(x,x,x)+2F8j
.text:0000083C                 mov     ecx, 20h ; ' '
.text:00000841                 sub     ecx, [ebp+var_20]
.text:00000844                 mov     [ebp+var_20], ecx
.text:00000847                 cmp     [ebp+var_20], 0Ch
.text:0000084B                 jle     short loc_854
.text:0000084D                 mov     [ebp+var_20], 0Ch
.text:00000854
.text:00000854 loc_854:                                ; CODE XREF: BlockSort(x,x,x)+30Bj
.text:00000854                 mov     [ebp+var_24], 2
.text:0000085B                 jmp     short loc_865
.text:0000085D ; ---------------------------------------------------------------------------
.text:0000085D
.text:0000085D loc_85D:                                ; CODE XREF: BlockSort(x,x,x):loc_AACj
.text:0000085D                 mov     edx, [ebp+var_24]
.text:00000860                 shl     edx, 1
.text:00000862                 mov     [ebp+var_24], edx
.text:00000865
.text:00000865 loc_865:                                ; CODE XREF: BlockSort(x,x,x)+31Bj
.text:00000865                 mov     [ebp+var_28], 0
.text:0000086C                 mov     [ebp+var_2C], 0
.text:00000873                 mov     [ebp+var_8], 0
.text:0000087A
.text:0000087A loc_87A:                                ; CODE XREF: BlockSort(x,x,x)+4DBj
.text:0000087A                                         ; BlockSort(x,x,x)+55Fj
.text:0000087A                 mov     eax, [ebp+var_8]
.text:0000087D                 cmp     eax, [ebp+arg_8]
.text:00000880                 jnb     loc_AA4
.text:00000886                 mov     ecx, [ebp+var_8]
.text:00000889                 mov     edx, [ebp+arg_0]
.text:0000088C                 mov     eax, [edx+ecx*4]
.text:0000088F                 and     eax, 3FFFFFFFh
.text:00000894                 shr     eax, 14h
.text:00000897                 mov     [ebp+var_30], eax
.text:0000089A                 mov     ecx, [ebp+var_8]
.text:0000089D                 mov     edx, [ebp+arg_0]
.text:000008A0                 mov     eax, [edx+ecx*4]
.text:000008A3                 and     eax, 80000000h
.text:000008A8                 neg     eax
.text:000008AA                 sbb     eax, eax
.text:000008AC                 add     eax, 1
.text:000008AF                 mov     [ebp+var_34], eax
.text:000008B2                 mov     ecx, [ebp+var_8]
.text:000008B5                 mov     edx, [ebp+arg_0]
.text:000008B8                 mov     eax, [edx+ecx*4]
.text:000008BB                 and     eax, 40000000h
.text:000008C0                 jz      short loc_8F1
.text:000008C2                 mov     ecx, [ebp+var_8]
.text:000008C5                 mov     edx, [ebp+arg_0]
.text:000008C8                 mov     eax, [edx+ecx*4+4]
.text:000008CC                 shr     eax, 14h
.text:000008CF                 shl     eax, 0Ah
.text:000008D2                 add     eax, [ebp+var_30]
.text:000008D5                 mov     [ebp+var_30], eax
.text:000008D8                 mov     ecx, [ebp+var_8]
.text:000008DB                 mov     edx, [ebp+arg_0]
.text:000008DE                 mov     eax, [edx+ecx*4+4]
.text:000008E2                 and     eax, 0FFFFFh
.text:000008E7                 mov     ecx, [ebp+var_8]
.text:000008EA                 mov     edx, [ebp+arg_0]
.text:000008ED                 mov     [edx+ecx*4+4], eax
.text:000008F1
.text:000008F1 loc_8F1:                                ; CODE XREF: BlockSort(x,x,x)+380j
.text:000008F1                 mov     eax, [ebp+var_8]
.text:000008F4                 mov     ecx, [ebp+arg_0]
.text:000008F7                 mov     edx, [ecx+eax*4]
.text:000008FA                 and     edx, 0FFFFFh
.text:00000900                 mov     eax, [ebp+var_8]
.text:00000903                 mov     ecx, [ebp+arg_0]
.text:00000906                 mov     [ecx+eax*4], edx
.text:00000909                 mov     edx, [ebp+var_30]
.text:0000090C                 add     edx, 1
.text:0000090F                 mov     [ebp+var_30], edx
.text:00000912                 cmp     [ebp+var_34], 0
.text:00000916                 jnz     short loc_922
.text:00000918                 cmp     [ebp+var_30], 1
.text:0000091C                 jnz     loc_A20
.text:00000922
.text:00000922 loc_922:                                ; CODE XREF: BlockSort(x,x,x)+3D6j
.text:00000922                 mov     eax, [ebp+var_8]
.text:00000925                 sub     eax, [ebp+var_28]
.text:00000928                 mov     ecx, [ebp+arg_0]
.text:0000092B                 mov     edx, [ecx+eax*4]
.text:0000092E                 and     edx, 0FFFFFh
.text:00000934                 mov     eax, [ebp+var_8]
.text:00000937                 sub     eax, [ebp+var_28]
.text:0000093A                 mov     ecx, [ebp+arg_0]
.text:0000093D                 mov     [ecx+eax*4], edx
.text:00000940                 cmp     [ebp+var_28], 1
.text:00000944                 jbe     short loc_966
.text:00000946                 mov     edx, [ebp+var_8]
.text:00000949                 sub     edx, [ebp+var_28]
.text:0000094C                 mov     eax, [ebp+arg_0]
.text:0000094F                 mov     ecx, [eax+edx*4+4]
.text:00000953                 and     ecx, 0FFFFFh
.text:00000959                 mov     edx, [ebp+var_8]
.text:0000095C                 sub     edx, [ebp+var_28]
.text:0000095F                 mov     eax, [ebp+arg_0]
.text:00000962                 mov     [eax+edx*4+4], ecx
.text:00000966
.text:00000966 loc_966:                                ; CODE XREF: BlockSort(x,x,x)+404j
.text:00000966                 mov     ecx, [ebp+var_30]
.text:00000969                 add     ecx, [ebp+var_28]
.text:0000096C                 mov     [ebp+var_38], ecx
.text:0000096F                 mov     edx, [ebp+var_8]
.text:00000972                 mov     eax, [ebp+arg_0]
.text:00000975                 lea     ecx, [eax+edx*4]
.text:00000978                 mov     edx, [ebp+var_28]
.text:0000097B                 shl     edx, 2
.text:0000097E                 sub     ecx, edx
.text:00000980                 mov     eax, [ebp+var_38]
.text:00000983                 sub     eax, 1
.text:00000986                 and     eax, 3FFh
.text:0000098B                 shl     eax, 14h
.text:0000098E                 or      eax, [ecx]
.text:00000990                 mov     ecx, [ebp+var_28]
.text:00000993                 shl     ecx, 2
.text:00000996                 mov     edx, [ebp+var_8]
.text:00000999                 mov     esi, [ebp+arg_0]
.text:0000099C                 lea     edx, [esi+edx*4]
.text:0000099F                 sub     edx, ecx
.text:000009A1                 mov     [edx], eax
.text:000009A3                 cmp     [ebp+var_38], 400h
.text:000009AA                 jbe     short loc_A0C
.text:000009AC                 mov     eax, [ebp+var_8]
.text:000009AF                 mov     ecx, [ebp+arg_0]
.text:000009B2                 lea     edx, [ecx+eax*4]
.text:000009B5                 mov     eax, [ebp+var_28]
.text:000009B8                 shl     eax, 2
.text:000009BB                 sub     edx, eax
.text:000009BD                 mov     ecx, [edx]
.text:000009BF                 or      ecx, 40000000h
.text:000009C5                 mov     edx, [ebp+var_28]
.text:000009C8                 shl     edx, 2
.text:000009CB                 mov     eax, [ebp+var_8]
.text:000009CE                 mov     esi, [ebp+arg_0]
.text:000009D1                 lea     eax, [esi+eax*4]
.text:000009D4                 sub     eax, edx
.text:000009D6                 mov     [eax], ecx
.text:000009D8                 mov     ecx, [ebp+var_8]
.text:000009DB                 mov     edx, [ebp+arg_0]
.text:000009DE                 lea     eax, [edx+ecx*4]
.text:000009E1                 mov     ecx, [ebp+var_28]
.text:000009E4                 shl     ecx, 2
.text:000009E7                 sub     eax, ecx
.text:000009E9                 mov     edx, [ebp+var_38]
.text:000009EC                 sub     edx, 1
.text:000009EF                 shr     edx, 0Ah
.text:000009F2                 shl     edx, 14h
.text:000009F5                 or      edx, [eax+4]
.text:000009F8                 mov     eax, [ebp+var_28]
.text:000009FB                 shl     eax, 2
.text:000009FE                 mov     ecx, [ebp+var_8]
.text:00000A01                 mov     esi, [ebp+arg_0]
.text:00000A04                 lea     ecx, [esi+ecx*4]
.text:00000A07                 sub     ecx, eax
.text:00000A09                 mov     [ecx+4], edx
.text:00000A0C
.text:00000A0C loc_A0C:                                ; CODE XREF: BlockSort(x,x,x)+46Aj
.text:00000A0C                 mov     edx, [ebp+var_38]
.text:00000A0F                 mov     [ebp+var_28], edx
.text:00000A12                 mov     eax, [ebp+var_8]
.text:00000A15                 add     eax, [ebp+var_30]
.text:00000A18                 mov     [ebp+var_8], eax
.text:00000A1B                 jmp     loc_87A
.text:00000A20 ; ---------------------------------------------------------------------------
.text:00000A20
.text:00000A20 loc_A20:                                ; CODE XREF: BlockSort(x,x,x)+3DCj
.text:00000A20                 mov     [ebp+var_28], 0
.text:00000A27                 mov     ecx, [ebp+var_24]
.text:00000A2A                 cmp     ecx, [ebp+arg_8]
.text:00000A2D                 jb      short loc_A68
.text:00000A2F                 mov     [ebp+var_3C], 0
.text:00000A36                 jmp     short loc_A41
.text:00000A38 ; ---------------------------------------------------------------------------
.text:00000A38
.text:00000A38 loc_A38:                                ; CODE XREF: BlockSort(x,x,x)+524j
.text:00000A38                 mov     edx, [ebp+var_3C]
.text:00000A3B                 add     edx, 1
.text:00000A3E                 mov     [ebp+var_3C], edx
.text:00000A41
.text:00000A41 loc_A41:                                ; CODE XREF: BlockSort(x,x,x)+4F6j
.text:00000A41                 mov     eax, [ebp+var_3C]
.text:00000A44                 cmp     eax, [ebp+var_30]
.text:00000A47                 jnb     short loc_A66
.text:00000A49                 mov     ecx, [ebp+var_8]
.text:00000A4C                 add     ecx, [ebp+var_3C]
.text:00000A4F                 mov     [ebp+var_40], ecx
.text:00000A52                 mov     edx, [ebp+var_40]
.text:00000A55                 mov     eax, [ebp+arg_0]
.text:00000A58                 mov     ecx, [eax+edx*4]
.text:00000A5B                 mov     edx, [ebp+var_C]
.text:00000A5E                 mov     eax, [ebp+var_40]
.text:00000A61                 mov     [edx+ecx*4], eax
.text:00000A64                 jmp     short loc_A38
.text:00000A66 ; ---------------------------------------------------------------------------
.text:00000A66
.text:00000A66 loc_A66:                                ; CODE XREF: BlockSort(x,x,x)+507j
.text:00000A66                 jmp     short loc_A96
.text:00000A68 ; ---------------------------------------------------------------------------
.text:00000A68
.text:00000A68 loc_A68:                                ; CODE XREF: BlockSort(x,x,x)+4EDj
.text:00000A68                 mov     ecx, [ebp+arg_8]
.text:00000A6B                 push    ecx
.text:00000A6C                 push    0
.text:00000A6E                 mov     edx, [ebp+arg_0]
.text:00000A71                 push    edx
.text:00000A72                 mov     eax, [ebp+var_20]
.text:00000A75                 push    eax
.text:00000A76                 mov     ecx, [ebp+var_30]
.text:00000A79                 push    ecx
.text:00000A7A                 mov     edx, [ebp+var_8]
.text:00000A7D                 push    edx
.text:00000A7E                 mov     edx, [ebp+var_24]
.text:00000A81                 mov     ecx, [ebp+arg_8]
.text:00000A84                 call    @SortGroup@32   ; SortGroup(x,x,x,x,x,x,x,x)
.text:00000A89                 test    eax, eax
.text:00000A8B                 jz      short loc_A96
.text:00000A8D                 mov     eax, [ebp+var_8]
.text:00000A90                 add     eax, [ebp+var_30]
.text:00000A93                 mov     [ebp+var_2C], eax
.text:00000A96
.text:00000A96 loc_A96:                                ; CODE XREF: BlockSort(x,x,x):loc_A66j
.text:00000A96                                         ; BlockSort(x,x,x)+54Bj
.text:00000A96                 mov     ecx, [ebp+var_8]
.text:00000A99                 add     ecx, [ebp+var_30]
.text:00000A9C                 mov     [ebp+var_8], ecx
.text:00000A9F                 jmp     loc_87A
.text:00000AA4 ; ---------------------------------------------------------------------------
.text:00000AA4
.text:00000AA4 loc_AA4:                                ; CODE XREF: BlockSort(x,x,x)+340j
.text:00000AA4                 cmp     [ebp+var_2C], 0
.text:00000AA8                 jnz     short loc_AAC
.text:00000AAA                 jmp     short loc_AB1
.text:00000AAC ; ---------------------------------------------------------------------------
.text:00000AAC
.text:00000AAC loc_AAC:                                ; CODE XREF: BlockSort(x,x,x)+568j
.text:00000AAC                 jmp     loc_85D
.text:00000AB1 ; ---------------------------------------------------------------------------
.text:00000AB1
.text:00000AB1 loc_AB1:                                ; CODE XREF: BlockSort(x,x,x)+56Aj
.text:00000AB1                 mov     [ebp+var_8], 0
.text:00000AB8
.text:00000AB8 loc_AB8:                                ; CODE XREF: BlockSort(x,x,x)+604j
.text:00000AB8                 mov     edx, [ebp+var_8]
.text:00000ABB                 cmp     edx, [ebp+arg_8]
.text:00000ABE                 jnb     loc_B49
.text:00000AC4                 mov     eax, [ebp+var_8]
.text:00000AC7                 mov     ecx, [ebp+arg_0]
.text:00000ACA                 mov     edx, [ecx+eax*4]
.text:00000ACD                 and     edx, 3FFFFFFFh
.text:00000AD3                 shr     edx, 14h
.text:00000AD6                 mov     [ebp+var_44], edx
.text:00000AD9                 mov     eax, [ebp+var_8]
.text:00000ADC                 mov     ecx, [ebp+arg_0]
.text:00000ADF                 mov     edx, [ecx+eax*4]
.text:00000AE2                 and     edx, 40000000h
.text:00000AE8                 jz      short loc_B1A
.text:00000AEA                 mov     eax, [ebp+var_8]
.text:00000AED                 mov     ecx, [ebp+arg_0]
.text:00000AF0                 mov     edx, [ecx+eax*4+4]
.text:00000AF4                 shr     edx, 14h
.text:00000AF7                 shl     edx, 0Ah
.text:00000AFA                 add     edx, [ebp+var_44]
.text:00000AFD                 mov     [ebp+var_44], edx
.text:00000B00                 mov     eax, [ebp+var_8]
.text:00000B03                 mov     ecx, [ebp+arg_0]
.text:00000B06                 mov     edx, [ecx+eax*4+4]
.text:00000B0A                 and     edx, 0FFFFFh
.text:00000B10                 mov     eax, [ebp+var_8]
.text:00000B13                 mov     ecx, [ebp+arg_0]
.text:00000B16                 mov     [ecx+eax*4+4], edx
.text:00000B1A
.text:00000B1A loc_B1A:                                ; CODE XREF: BlockSort(x,x,x)+5A8j
.text:00000B1A                 mov     edx, [ebp+var_8]
.text:00000B1D                 mov     eax, [ebp+arg_0]
.text:00000B20                 mov     ecx, [eax+edx*4]
.text:00000B23                 and     ecx, 0FFFFFh
.text:00000B29                 mov     edx, [ebp+var_8]
.text:00000B2C                 mov     eax, [ebp+arg_0]
.text:00000B2F                 mov     [eax+edx*4], ecx
.text:00000B32                 mov     ecx, [ebp+var_44]
.text:00000B35                 add     ecx, 1
.text:00000B38                 mov     [ebp+var_44], ecx
.text:00000B3B                 mov     edx, [ebp+var_8]
.text:00000B3E                 add     edx, [ebp+var_44]
.text:00000B41                 mov     [ebp+var_8], edx
.text:00000B44                 jmp     loc_AB8
.text:00000B49 ; ---------------------------------------------------------------------------
.text:00000B49
.text:00000B49 loc_B49:                                ; CODE XREF: BlockSort(x,x,x)+57Ej
.text:00000B49                 mov     eax, [ebp+var_C]
.text:00000B4C                 mov     eax, [eax]
.text:00000B4E                 pop     edi
.text:00000B4F                 pop     esi
.text:00000B50                 add     esp, 44h
.text:00000B53                 cmp     ebp, esp
.text:00000B55                 call    __RTC_CheckEsp
.text:00000B5A                 mov     esp, ebp
.text:00000B5C                 pop     ebp
.text:00000B5D                 retn    0Ch
.text:00000B5D _BlockSort@12   endp
.text:00000B5D
.text:00000B5D _text           ends
.text:00000B5D
.rtc$TMZ:00000B60 ; ===========================================================================
.rtc$TMZ:00000B60
.rtc$TMZ:00000B60 ; Segment type: Pure data
.rtc$TMZ:00000B60 ; Segment permissions: Read
.rtc$TMZ:00000B60 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000B60                 assume cs:_rtc$TMZ
.rtc$TMZ:00000B60                 ;org 0B60h
.rtc$TMZ:00000B60 ; COMDAT (pick any)
.rtc$TMZ:00000B60 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000B60 _rtc$TMZ        ends
.rtc$TMZ:00000B60
.rtc$IMZ:00000B64 ; ===========================================================================
.rtc$IMZ:00000B64
.rtc$IMZ:00000B64 ; Segment type: Pure data
.rtc$IMZ:00000B64 ; Segment permissions: Read
.rtc$IMZ:00000B64 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000B64                 assume cs:_rtc$IMZ
.rtc$IMZ:00000B64                 ;org 0B64h
.rtc$IMZ:00000B64 ; COMDAT (pick any)
.rtc$IMZ:00000B64 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000B64 _rtc$IMZ        ends
.rtc$IMZ:00000B64
UNDEF:00000B70 ; ===========================================================================
UNDEF:00000B70
UNDEF:00000B70 ; Segment type: Externs
UNDEF:00000B70 ; UNDEF
UNDEF:00000B70 ; __stdcall HeapSort(x, x)
UNDEF:00000B70                 extrn _HeapSort@8:near  ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+13Cp
UNDEF:00000B74                 extrn __RTC_CheckEsp:near
UNDEF:00000B74                                         ; CODE XREF: SortGroup(x,x,x,x,x,x,x,x)+4C8p
UNDEF:00000B74                                         ; BlockSort(x,x,x)+615p
UNDEF:00000B78                 extrn __RTC_Shutdown:near
UNDEF:00000B78                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000B7C                 extrn __RTC_InitBase:near
UNDEF:00000B7C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000B7C
UNDEF:00000B7C
UNDEF:00000B7C                 end