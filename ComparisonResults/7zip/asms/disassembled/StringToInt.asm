.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 88ECDC1E567BA5D4DA61E8DAD3D4FE1F
.text:00000000 ; Input CRC32 : B3956D09
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\StringToInt.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; unsigned int __stdcall ConvertStringToUInt32(const char *, const char **)
.text:00000000                 public ?ConvertStringToUInt32@@YGIPBDPAPBD@Z
.text:00000000 ?ConvertStringToUInt32@@YGIPBDPAPBD@Z proc near
.text:00000000
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 0Ch
.text:00000006                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000000D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000014                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000001B                 cmp     [ebp+arg_4], 0
.text:0000001F                 jz      short loc_29
.text:00000021                 mov     eax, [ebp+arg_4]
.text:00000024                 mov     ecx, [ebp+arg_0]
.text:00000027                 mov     [eax], ecx
.text:00000029
.text:00000029 loc_29:                                 ; CODE XREF: ConvertStringToUInt32(char const *,char const * *)+1Fj
.text:00000029                 mov     [ebp+var_4], 0
.text:00000030                 jmp     short loc_3B
.text:00000032 ; ---------------------------------------------------------------------------
.text:00000032
.text:00000032 loc_32:                                 ; CODE XREF: ConvertStringToUInt32(char const *,char const * *)+A0j
.text:00000032                 mov     edx, [ebp+arg_0]
.text:00000035                 add     edx, 1
.text:00000038                 mov     [ebp+arg_0], edx
.text:0000003B
.text:0000003B loc_3B:                                 ; CODE XREF: ConvertStringToUInt32(char const *,char const * *)+30j
.text:0000003B                 mov     eax, [ebp+arg_0]
.text:0000003E                 mov     cl, [eax]
.text:00000040                 mov     byte ptr [ebp+var_8+3], cl
.text:00000043                 movzx   edx, byte ptr [ebp+var_8+3]
.text:00000047                 cmp     edx, 30h ; '0'
.text:0000004A                 jl      short loc_55
.text:0000004C                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00000050                 cmp     eax, 39h ; '9'
.text:00000053                 jle     short loc_68
.text:00000055
.text:00000055 loc_55:                                 ; CODE XREF: ConvertStringToUInt32(char const *,char const * *)+4Aj
.text:00000055                 cmp     [ebp+arg_4], 0
.text:00000059                 jz      short loc_63
.text:0000005B                 mov     ecx, [ebp+arg_4]
.text:0000005E                 mov     edx, [ebp+arg_0]
.text:00000061                 mov     [ecx], edx
.text:00000063
.text:00000063 loc_63:                                 ; CODE XREF: ConvertStringToUInt32(char const *,char const * *)+59j
.text:00000063                 mov     eax, [ebp+var_4]
.text:00000066                 jmp     short loc_A2
.text:00000068 ; ---------------------------------------------------------------------------
.text:00000068
.text:00000068 loc_68:                                 ; CODE XREF: ConvertStringToUInt32(char const *,char const * *)+53j
.text:00000068                 cmp     [ebp+var_4], 19999999h
.text:0000006F                 jbe     short loc_75
.text:00000071                 xor     eax, eax
.text:00000073                 jmp     short loc_A2
.text:00000075 ; ---------------------------------------------------------------------------
.text:00000075
.text:00000075 loc_75:                                 ; CODE XREF: ConvertStringToUInt32(char const *,char const * *)+6Fj
.text:00000075                 mov     eax, [ebp+var_4]
.text:00000078                 imul    eax, 0Ah
.text:0000007B                 mov     [ebp+var_4], eax
.text:0000007E                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00000082                 sub     ecx, 30h ; '0'
.text:00000085                 mov     [ebp+var_C], ecx
.text:00000088                 or      edx, 0FFFFFFFFh
.text:0000008B                 sub     edx, [ebp+var_C]
.text:0000008E                 cmp     [ebp+var_4], edx
.text:00000091                 jbe     short loc_97
.text:00000093                 xor     eax, eax
.text:00000095                 jmp     short loc_A2
.text:00000097 ; ---------------------------------------------------------------------------
.text:00000097
.text:00000097 loc_97:                                 ; CODE XREF: ConvertStringToUInt32(char const *,char const * *)+91j
.text:00000097                 mov     eax, [ebp+var_4]
.text:0000009A                 add     eax, [ebp+var_C]
.text:0000009D                 mov     [ebp+var_4], eax
.text:000000A0                 jmp     short loc_32
.text:000000A2 ; ---------------------------------------------------------------------------
.text:000000A2
.text:000000A2 loc_A2:                                 ; CODE XREF: ConvertStringToUInt32(char const *,char const * *)+66j
.text:000000A2                                         ; ConvertStringToUInt32(char const *,char const * *)+73j ...
.text:000000A2                 mov     esp, ebp
.text:000000A4                 pop     ebp
.text:000000A5                 retn    8
.text:000000A5 ?ConvertStringToUInt32@@YGIPBDPAPBD@Z endp
.text:000000A5
.text:000000A5 ; ---------------------------------------------------------------------------
.text:000000A8                 align 10h
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; unsigned int __stdcall ConvertStringToUInt32(const wchar_t *, const wchar_t **)
.text:000000B0                 public ?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z
.text:000000B0 ?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z proc near
.text:000000B0                                         ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+58p
.text:000000B0
.text:000000B0 var_C           = dword ptr -0Ch
.text:000000B0 var_8           = dword ptr -8
.text:000000B0 var_4           = dword ptr -4
.text:000000B0 arg_0           = dword ptr  8
.text:000000B0 arg_4           = dword ptr  0Ch
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 sub     esp, 0Ch
.text:000000B6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000000BD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000000C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000CB                 cmp     [ebp+arg_4], 0
.text:000000CF                 jz      short loc_D9
.text:000000D1                 mov     eax, [ebp+arg_4]
.text:000000D4                 mov     ecx, [ebp+arg_0]
.text:000000D7                 mov     [eax], ecx
.text:000000D9
.text:000000D9 loc_D9:                                 ; CODE XREF: ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+1Fj
.text:000000D9                 mov     [ebp+var_4], 0
.text:000000E0                 jmp     short loc_EB
.text:000000E2 ; ---------------------------------------------------------------------------
.text:000000E2
.text:000000E2 loc_E2:                                 ; CODE XREF: ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+A2j
.text:000000E2                 mov     edx, [ebp+arg_0]
.text:000000E5                 add     edx, 2
.text:000000E8                 mov     [ebp+arg_0], edx
.text:000000EB
.text:000000EB loc_EB:                                 ; CODE XREF: ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+30j
.text:000000EB                 mov     eax, [ebp+arg_0]
.text:000000EE                 mov     cx, [eax]
.text:000000F1                 mov     word ptr [ebp+var_8], cx
.text:000000F5                 movzx   edx, word ptr [ebp+var_8]
.text:000000F9                 cmp     edx, 30h ; '0'
.text:000000FC                 jl      short loc_107
.text:000000FE                 movzx   eax, word ptr [ebp+var_8]
.text:00000102                 cmp     eax, 39h ; '9'
.text:00000105                 jle     short loc_11A
.text:00000107
.text:00000107 loc_107:                                ; CODE XREF: ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+4Cj
.text:00000107                 cmp     [ebp+arg_4], 0
.text:0000010B                 jz      short loc_115
.text:0000010D                 mov     ecx, [ebp+arg_4]
.text:00000110                 mov     edx, [ebp+arg_0]
.text:00000113                 mov     [ecx], edx
.text:00000115
.text:00000115 loc_115:                                ; CODE XREF: ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+5Bj
.text:00000115                 mov     eax, [ebp+var_4]
.text:00000118                 jmp     short loc_154
.text:0000011A ; ---------------------------------------------------------------------------
.text:0000011A
.text:0000011A loc_11A:                                ; CODE XREF: ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+55j
.text:0000011A                 cmp     [ebp+var_4], 19999999h
.text:00000121                 jbe     short loc_127
.text:00000123                 xor     eax, eax
.text:00000125                 jmp     short loc_154
.text:00000127 ; ---------------------------------------------------------------------------
.text:00000127
.text:00000127 loc_127:                                ; CODE XREF: ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+71j
.text:00000127                 mov     eax, [ebp+var_4]
.text:0000012A                 imul    eax, 0Ah
.text:0000012D                 mov     [ebp+var_4], eax
.text:00000130                 movzx   ecx, word ptr [ebp+var_8]
.text:00000134                 sub     ecx, 30h ; '0'
.text:00000137                 mov     [ebp+var_C], ecx
.text:0000013A                 or      edx, 0FFFFFFFFh
.text:0000013D                 sub     edx, [ebp+var_C]
.text:00000140                 cmp     [ebp+var_4], edx
.text:00000143                 jbe     short loc_149
.text:00000145                 xor     eax, eax
.text:00000147                 jmp     short loc_154
.text:00000149 ; ---------------------------------------------------------------------------
.text:00000149
.text:00000149 loc_149:                                ; CODE XREF: ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+93j
.text:00000149                 mov     eax, [ebp+var_4]
.text:0000014C                 add     eax, [ebp+var_C]
.text:0000014F                 mov     [ebp+var_4], eax
.text:00000152                 jmp     short loc_E2
.text:00000154 ; ---------------------------------------------------------------------------
.text:00000154
.text:00000154 loc_154:                                ; CODE XREF: ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+68j
.text:00000154                                         ; ConvertStringToUInt32(wchar_t const *,wchar_t const * *)+75j ...
.text:00000154                 mov     esp, ebp
.text:00000156                 pop     ebp
.text:00000157                 retn    8
.text:00000157 ?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z endp
.text:00000157
.text:00000157 ; ---------------------------------------------------------------------------
.text:0000015A                 align 10h
.text:00000160
.text:00000160 ; =============== S U B R O U T I N E =======================================
.text:00000160
.text:00000160 ; Attributes: bp-based frame
.text:00000160
.text:00000160 ; unsigned __int64 __stdcall ConvertStringToUInt64(const char *, const char **)
.text:00000160                 public ?ConvertStringToUInt64@@YG_KPBDPAPBD@Z
.text:00000160 ?ConvertStringToUInt64@@YG_KPBDPAPBD@Z proc near
.text:00000160
.text:00000160 var_18          = dword ptr -18h
.text:00000160 var_14          = dword ptr -14h
.text:00000160 var_10          = dword ptr -10h
.text:00000160 var_C           = dword ptr -0Ch
.text:00000160 var_8           = dword ptr -8
.text:00000160 var_4           = dword ptr -4
.text:00000160 arg_0           = dword ptr  8
.text:00000160 arg_4           = dword ptr  0Ch
.text:00000160
.text:00000160                 push    ebp
.text:00000161                 mov     ebp, esp
.text:00000163                 sub     esp, 18h
.text:00000166                 mov     eax, 0CCCCCCCCh
.text:0000016B                 mov     [ebp+var_18], eax
.text:0000016E                 mov     [ebp+var_14], eax
.text:00000171                 mov     [ebp+var_10], eax
.text:00000174                 mov     [ebp+var_C], eax
.text:00000177                 mov     [ebp+var_8], eax
.text:0000017A                 mov     [ebp+var_4], eax
.text:0000017D                 cmp     [ebp+arg_4], 0
.text:00000181                 jz      short loc_18B
.text:00000183                 mov     eax, [ebp+arg_4]
.text:00000186                 mov     ecx, [ebp+arg_0]
.text:00000189                 mov     [eax], ecx
.text:0000018B
.text:0000018B loc_18B:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+21j
.text:0000018B                 mov     [ebp+var_8], 0
.text:00000192                 mov     [ebp+var_4], 0
.text:00000199                 jmp     short loc_1A4
.text:0000019B ; ---------------------------------------------------------------------------
.text:0000019B
.text:0000019B loc_19B:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+F2j
.text:0000019B                 mov     edx, [ebp+arg_0]
.text:0000019E                 add     edx, 1
.text:000001A1                 mov     [ebp+arg_0], edx
.text:000001A4
.text:000001A4 loc_1A4:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+39j
.text:000001A4                 mov     eax, [ebp+arg_0]
.text:000001A7                 mov     cl, [eax]
.text:000001A9                 mov     byte ptr [ebp+var_C+3], cl
.text:000001AC                 movzx   edx, byte ptr [ebp+var_C+3]
.text:000001B0                 cmp     edx, 30h ; '0'
.text:000001B3                 jl      short loc_1BE
.text:000001B5                 movzx   eax, byte ptr [ebp+var_C+3]
.text:000001B9                 cmp     eax, 39h ; '9'
.text:000001BC                 jle     short loc_1D7
.text:000001BE
.text:000001BE loc_1BE:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+53j
.text:000001BE                 cmp     [ebp+arg_4], 0
.text:000001C2                 jz      short loc_1CC
.text:000001C4                 mov     ecx, [ebp+arg_4]
.text:000001C7                 mov     edx, [ebp+arg_0]
.text:000001CA                 mov     [ecx], edx
.text:000001CC
.text:000001CC loc_1CC:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+62j
.text:000001CC                 mov     eax, [ebp+var_8]
.text:000001CF                 mov     edx, [ebp+var_4]
.text:000001D2                 jmp     loc_257
.text:000001D7 ; ---------------------------------------------------------------------------
.text:000001D7
.text:000001D7 loc_1D7:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+5Cj
.text:000001D7                 cmp     [ebp+var_4], 19999999h
.text:000001DE                 jb      short loc_1F1
.text:000001E0                 ja      short loc_1EB
.text:000001E2                 cmp     [ebp+var_8], 99999999h
.text:000001E9                 jbe     short loc_1F1
.text:000001EB
.text:000001EB loc_1EB:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+80j
.text:000001EB                 xor     eax, eax
.text:000001ED                 xor     edx, edx
.text:000001EF                 jmp     short loc_257
.text:000001F1 ; ---------------------------------------------------------------------------
.text:000001F1
.text:000001F1 loc_1F1:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+7Ej
.text:000001F1                                         ; ConvertStringToUInt64(char const *,char const * *)+89j
.text:000001F1                 push    0
.text:000001F3                 push    0Ah
.text:000001F5                 mov     eax, [ebp+var_4]
.text:000001F8                 push    eax
.text:000001F9                 mov     ecx, [ebp+var_8]
.text:000001FC                 push    ecx
.text:000001FD                 call    __allmul
.text:00000202                 mov     [ebp+var_8], eax
.text:00000205                 mov     [ebp+var_4], edx
.text:00000208                 movzx   edx, byte ptr [ebp+var_C+3]
.text:0000020C                 sub     edx, 30h ; '0'
.text:0000020F                 mov     [ebp+var_10], edx
.text:00000212                 mov     eax, [ebp+var_10]
.text:00000215                 xor     ecx, ecx
.text:00000217                 or      edx, 0FFFFFFFFh
.text:0000021A                 sub     edx, eax
.text:0000021C                 mov     eax, 0FFFFFFFFh
.text:00000221                 sbb     eax, ecx
.text:00000223                 mov     [ebp+var_18], edx
.text:00000226                 mov     [ebp+var_14], eax
.text:00000229                 mov     ecx, [ebp+var_4]
.text:0000022C                 cmp     ecx, [ebp+var_14]
.text:0000022F                 jb      short loc_241
.text:00000231                 ja      short loc_23B
.text:00000233                 mov     edx, [ebp+var_8]
.text:00000236                 cmp     edx, [ebp+var_18]
.text:00000239                 jbe     short loc_241
.text:0000023B
.text:0000023B loc_23B:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+D1j
.text:0000023B                 xor     eax, eax
.text:0000023D                 xor     edx, edx
.text:0000023F                 jmp     short loc_257
.text:00000241 ; ---------------------------------------------------------------------------
.text:00000241
.text:00000241 loc_241:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+CFj
.text:00000241                                         ; ConvertStringToUInt64(char const *,char const * *)+D9j
.text:00000241                 mov     eax, [ebp+var_10]
.text:00000244                 xor     ecx, ecx
.text:00000246                 add     eax, [ebp+var_8]
.text:00000249                 adc     ecx, [ebp+var_4]
.text:0000024C                 mov     [ebp+var_8], eax
.text:0000024F                 mov     [ebp+var_4], ecx
.text:00000252                 jmp     loc_19B
.text:00000257 ; ---------------------------------------------------------------------------
.text:00000257
.text:00000257 loc_257:                                ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+72j
.text:00000257                                         ; ConvertStringToUInt64(char const *,char const * *)+8Fj ...
.text:00000257                 add     esp, 18h
.text:0000025A                 cmp     ebp, esp
.text:0000025C                 call    __RTC_CheckEsp
.text:00000261                 mov     esp, ebp
.text:00000263                 pop     ebp
.text:00000264                 retn    8
.text:00000264 ?ConvertStringToUInt64@@YG_KPBDPAPBD@Z endp
.text:00000264
.text:00000264 ; ---------------------------------------------------------------------------
.text:00000267                 align 10h
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; unsigned __int64 __stdcall ConvertStringToUInt64(const wchar_t *, const wchar_t **)
.text:00000270                 public ?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z
.text:00000270 ?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z proc near
.text:00000270
.text:00000270 var_18          = dword ptr -18h
.text:00000270 var_14          = dword ptr -14h
.text:00000270 var_10          = dword ptr -10h
.text:00000270 var_C           = dword ptr -0Ch
.text:00000270 var_8           = dword ptr -8
.text:00000270 var_4           = dword ptr -4
.text:00000270 arg_0           = dword ptr  8
.text:00000270 arg_4           = dword ptr  0Ch
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 sub     esp, 18h
.text:00000276                 mov     eax, 0CCCCCCCCh
.text:0000027B                 mov     [ebp+var_18], eax
.text:0000027E                 mov     [ebp+var_14], eax
.text:00000281                 mov     [ebp+var_10], eax
.text:00000284                 mov     [ebp+var_C], eax
.text:00000287                 mov     [ebp+var_8], eax
.text:0000028A                 mov     [ebp+var_4], eax
.text:0000028D                 cmp     [ebp+arg_4], 0
.text:00000291                 jz      short loc_29B
.text:00000293                 mov     eax, [ebp+arg_4]
.text:00000296                 mov     ecx, [ebp+arg_0]
.text:00000299                 mov     [eax], ecx
.text:0000029B
.text:0000029B loc_29B:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+21j
.text:0000029B                 mov     [ebp+var_8], 0
.text:000002A2                 mov     [ebp+var_4], 0
.text:000002A9                 jmp     short loc_2B4
.text:000002AB ; ---------------------------------------------------------------------------
.text:000002AB
.text:000002AB loc_2AB:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+F4j
.text:000002AB                 mov     edx, [ebp+arg_0]
.text:000002AE                 add     edx, 2
.text:000002B1                 mov     [ebp+arg_0], edx
.text:000002B4
.text:000002B4 loc_2B4:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+39j
.text:000002B4                 mov     eax, [ebp+arg_0]
.text:000002B7                 mov     cx, [eax]
.text:000002BA                 mov     word ptr [ebp+var_C], cx
.text:000002BE                 movzx   edx, word ptr [ebp+var_C]
.text:000002C2                 cmp     edx, 30h ; '0'
.text:000002C5                 jl      short loc_2D0
.text:000002C7                 movzx   eax, word ptr [ebp+var_C]
.text:000002CB                 cmp     eax, 39h ; '9'
.text:000002CE                 jle     short loc_2E9
.text:000002D0
.text:000002D0 loc_2D0:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+55j
.text:000002D0                 cmp     [ebp+arg_4], 0
.text:000002D4                 jz      short loc_2DE
.text:000002D6                 mov     ecx, [ebp+arg_4]
.text:000002D9                 mov     edx, [ebp+arg_0]
.text:000002DC                 mov     [ecx], edx
.text:000002DE
.text:000002DE loc_2DE:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+64j
.text:000002DE                 mov     eax, [ebp+var_8]
.text:000002E1                 mov     edx, [ebp+var_4]
.text:000002E4                 jmp     loc_369
.text:000002E9 ; ---------------------------------------------------------------------------
.text:000002E9
.text:000002E9 loc_2E9:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+5Ej
.text:000002E9                 cmp     [ebp+var_4], 19999999h
.text:000002F0                 jb      short loc_303
.text:000002F2                 ja      short loc_2FD
.text:000002F4                 cmp     [ebp+var_8], 99999999h
.text:000002FB                 jbe     short loc_303
.text:000002FD
.text:000002FD loc_2FD:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+82j
.text:000002FD                 xor     eax, eax
.text:000002FF                 xor     edx, edx
.text:00000301                 jmp     short loc_369
.text:00000303 ; ---------------------------------------------------------------------------
.text:00000303
.text:00000303 loc_303:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+80j
.text:00000303                                         ; ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+8Bj
.text:00000303                 push    0
.text:00000305                 push    0Ah
.text:00000307                 mov     eax, [ebp+var_4]
.text:0000030A                 push    eax
.text:0000030B                 mov     ecx, [ebp+var_8]
.text:0000030E                 push    ecx
.text:0000030F                 call    __allmul
.text:00000314                 mov     [ebp+var_8], eax
.text:00000317                 mov     [ebp+var_4], edx
.text:0000031A                 movzx   edx, word ptr [ebp+var_C]
.text:0000031E                 sub     edx, 30h ; '0'
.text:00000321                 mov     [ebp+var_10], edx
.text:00000324                 mov     eax, [ebp+var_10]
.text:00000327                 xor     ecx, ecx
.text:00000329                 or      edx, 0FFFFFFFFh
.text:0000032C                 sub     edx, eax
.text:0000032E                 mov     eax, 0FFFFFFFFh
.text:00000333                 sbb     eax, ecx
.text:00000335                 mov     [ebp+var_18], edx
.text:00000338                 mov     [ebp+var_14], eax
.text:0000033B                 mov     ecx, [ebp+var_4]
.text:0000033E                 cmp     ecx, [ebp+var_14]
.text:00000341                 jb      short loc_353
.text:00000343                 ja      short loc_34D
.text:00000345                 mov     edx, [ebp+var_8]
.text:00000348                 cmp     edx, [ebp+var_18]
.text:0000034B                 jbe     short loc_353
.text:0000034D
.text:0000034D loc_34D:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+D3j
.text:0000034D                 xor     eax, eax
.text:0000034F                 xor     edx, edx
.text:00000351                 jmp     short loc_369
.text:00000353 ; ---------------------------------------------------------------------------
.text:00000353
.text:00000353 loc_353:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+D1j
.text:00000353                                         ; ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+DBj
.text:00000353                 mov     eax, [ebp+var_10]
.text:00000356                 xor     ecx, ecx
.text:00000358                 add     eax, [ebp+var_8]
.text:0000035B                 adc     ecx, [ebp+var_4]
.text:0000035E                 mov     [ebp+var_8], eax
.text:00000361                 mov     [ebp+var_4], ecx
.text:00000364                 jmp     loc_2AB
.text:00000369 ; ---------------------------------------------------------------------------
.text:00000369
.text:00000369 loc_369:                                ; CODE XREF: ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+74j
.text:00000369                                         ; ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+91j ...
.text:00000369                 add     esp, 18h
.text:0000036C                 cmp     ebp, esp
.text:0000036E                 call    __RTC_CheckEsp
.text:00000373                 mov     esp, ebp
.text:00000375                 pop     ebp
.text:00000376                 retn    8
.text:00000376 ?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z endp
.text:00000376
.text:00000376 ; ---------------------------------------------------------------------------
.text:00000379                 align 10h
.text:00000380
.text:00000380 ; =============== S U B R O U T I N E =======================================
.text:00000380
.text:00000380 ; Attributes: bp-based frame
.text:00000380
.text:00000380 ; int __stdcall ConvertStringToInt32(const wchar_t *, const wchar_t **)
.text:00000380                 public ?ConvertStringToInt32@@YGHPB_WPAPB_W@Z
.text:00000380 ?ConvertStringToInt32@@YGHPB_WPAPB_W@Z proc near
.text:00000380
.text:00000380 var_14          = dword ptr -14h
.text:00000380 var_10          = dword ptr -10h
.text:00000380 var_C           = dword ptr -0Ch
.text:00000380 var_8           = dword ptr -8
.text:00000380 var_4           = dword ptr -4
.text:00000380 arg_0           = dword ptr  8
.text:00000380 arg_4           = dword ptr  0Ch
.text:00000380
.text:00000380                 push    ebp
.text:00000381                 mov     ebp, esp
.text:00000383                 sub     esp, 14h
.text:00000386                 mov     eax, 0CCCCCCCCh
.text:0000038B                 mov     [ebp+var_14], eax
.text:0000038E                 mov     [ebp+var_10], eax
.text:00000391                 mov     [ebp+var_C], eax
.text:00000394                 mov     [ebp+var_8], eax
.text:00000397                 mov     [ebp+var_4], eax
.text:0000039A                 cmp     [ebp+arg_4], 0
.text:0000039E                 jz      short loc_3A8
.text:000003A0                 mov     eax, [ebp+arg_4]
.text:000003A3                 mov     ecx, [ebp+arg_0]
.text:000003A6                 mov     [eax], ecx
.text:000003A8
.text:000003A8 loc_3A8:                                ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+1Ej
.text:000003A8                 mov     edx, [ebp+arg_0]
.text:000003AB                 mov     [ebp+var_4], edx
.text:000003AE                 mov     eax, [ebp+arg_0]
.text:000003B1                 movzx   ecx, word ptr [eax]
.text:000003B4                 cmp     ecx, 2Dh ; '-'
.text:000003B7                 jnz     short loc_3C2
.text:000003B9                 mov     edx, [ebp+var_4]
.text:000003BC                 add     edx, 2
.text:000003BF                 mov     [ebp+var_4], edx
.text:000003C2
.text:000003C2 loc_3C2:                                ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+37j
.text:000003C2                 mov     eax, [ebp+var_4]
.text:000003C5                 movzx   ecx, word ptr [eax]
.text:000003C8                 test    ecx, ecx
.text:000003CA                 jnz     short loc_3D0
.text:000003CC                 xor     eax, eax
.text:000003CE                 jmp     short loc_42B
.text:000003D0 ; ---------------------------------------------------------------------------
.text:000003D0
.text:000003D0 loc_3D0:                                ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+4Aj
.text:000003D0                 lea     edx, [ebp+var_C]
.text:000003D3                 push    edx             ; wchar_t **
.text:000003D4                 mov     eax, [ebp+var_4]
.text:000003D7                 push    eax             ; wchar_t *
.text:000003D8                 call    ?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z ; ConvertStringToUInt32(wchar_t const *,wchar_t const * *)
.text:000003DD                 mov     [ebp+var_14], eax
.text:000003E0                 mov     ecx, [ebp+arg_0]
.text:000003E3                 movzx   edx, word ptr [ecx]
.text:000003E6                 cmp     edx, 2Dh ; '-'
.text:000003E9                 jnz     short loc_3FA
.text:000003EB                 cmp     [ebp+var_14], 80000000h
.text:000003F2                 jbe     short loc_3F8
.text:000003F4                 xor     eax, eax
.text:000003F6                 jmp     short loc_42B
.text:000003F8 ; ---------------------------------------------------------------------------
.text:000003F8
.text:000003F8 loc_3F8:                                ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+72j
.text:000003F8                 jmp     short loc_408
.text:000003FA ; ---------------------------------------------------------------------------
.text:000003FA
.text:000003FA loc_3FA:                                ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+69j
.text:000003FA                 mov     eax, [ebp+var_14]
.text:000003FD                 and     eax, 80000000h
.text:00000402                 jz      short loc_408
.text:00000404                 xor     eax, eax
.text:00000406                 jmp     short loc_42B
.text:00000408 ; ---------------------------------------------------------------------------
.text:00000408
.text:00000408 loc_408:                                ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *):loc_3F8j
.text:00000408                                         ; ConvertStringToInt32(wchar_t const *,wchar_t const * *)+82j
.text:00000408                 cmp     [ebp+arg_4], 0
.text:0000040C                 jz      short loc_416
.text:0000040E                 mov     ecx, [ebp+arg_4]
.text:00000411                 mov     edx, [ebp+var_C]
.text:00000414                 mov     [ecx], edx
.text:00000416
.text:00000416 loc_416:                                ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+8Cj
.text:00000416                 mov     eax, [ebp+arg_0]
.text:00000419                 movzx   ecx, word ptr [eax]
.text:0000041C                 cmp     ecx, 2Dh ; '-'
.text:0000041F                 jnz     short loc_428
.text:00000421                 mov     eax, [ebp+var_14]
.text:00000424                 neg     eax
.text:00000426                 jmp     short loc_42B
.text:00000428 ; ---------------------------------------------------------------------------
.text:00000428
.text:00000428 loc_428:                                ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+9Fj
.text:00000428                 mov     eax, [ebp+var_14]
.text:0000042B
.text:0000042B loc_42B:                                ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+4Ej
.text:0000042B                                         ; ConvertStringToInt32(wchar_t const *,wchar_t const * *)+76j ...
.text:0000042B                 push    edx
.text:0000042C                 mov     ecx, ebp
.text:0000042E                 push    eax
.text:0000042F                 lea     edx, $LN14
.text:00000435                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000043A                 pop     eax
.text:0000043B                 pop     edx
.text:0000043C                 add     esp, 14h
.text:0000043F                 cmp     ebp, esp
.text:00000441                 call    __RTC_CheckEsp
.text:00000446                 mov     esp, ebp
.text:00000448                 pop     ebp
.text:00000449                 retn    8
.text:00000449 ?ConvertStringToInt32@@YGHPB_WPAPB_W@Z endp
.text:00000449
.text:00000449 ; ---------------------------------------------------------------------------
.text:0000044C $LN14           dd 1                    ; DATA XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+AFo
.text:00000450                 dd offset $LN13
.text:00000454 $LN13           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000450o
.text:0000045C                 dd offset $LN12         ; "end2"
.text:00000460 $LN12           db 'end2',0             ; DATA XREF: .text:0000045Co
.text:00000465                 align 10h
.text:00000470
.text:00000470 ; =============== S U B R O U T I N E =======================================
.text:00000470
.text:00000470 ; Attributes: bp-based frame
.text:00000470
.text:00000470 ; unsigned int __stdcall ConvertOctStringToUInt32(const char *, const char **)
.text:00000470                 public ?ConvertOctStringToUInt32@@YGIPBDPAPBD@Z
.text:00000470 ?ConvertOctStringToUInt32@@YGIPBDPAPBD@Z proc near
.text:00000470
.text:00000470 var_8           = dword ptr -8
.text:00000470 var_4           = dword ptr -4
.text:00000470 arg_0           = dword ptr  8
.text:00000470 arg_4           = dword ptr  0Ch
.text:00000470
.text:00000470                 push    ebp
.text:00000471                 mov     ebp, esp
.text:00000473                 sub     esp, 8
.text:00000476                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000047D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000484                 cmp     [ebp+arg_4], 0
.text:00000488                 jz      short loc_492
.text:0000048A                 mov     eax, [ebp+arg_4]
.text:0000048D                 mov     ecx, [ebp+arg_0]
.text:00000490                 mov     [eax], ecx
.text:00000492
.text:00000492 loc_492:                                ; CODE XREF: ConvertOctStringToUInt32(char const *,char const * *)+18j
.text:00000492                 mov     [ebp+var_4], 0
.text:00000499                 jmp     short loc_4A4
.text:0000049B ; ---------------------------------------------------------------------------
.text:0000049B
.text:0000049B loc_49B:                                ; CODE XREF: ConvertOctStringToUInt32(char const *,char const * *)+80j
.text:0000049B                 mov     edx, [ebp+arg_0]
.text:0000049E                 add     edx, 1
.text:000004A1                 mov     [ebp+arg_0], edx
.text:000004A4
.text:000004A4 loc_4A4:                                ; CODE XREF: ConvertOctStringToUInt32(char const *,char const * *)+29j
.text:000004A4                 mov     eax, [ebp+arg_0]
.text:000004A7                 movzx   ecx, byte ptr [eax]
.text:000004AA                 mov     [ebp+var_8], ecx
.text:000004AD                 cmp     [ebp+var_8], 30h ; '0'
.text:000004B1                 jb      short loc_4B9
.text:000004B3                 cmp     [ebp+var_8], 37h ; '7'
.text:000004B7                 jbe     short loc_4CC
.text:000004B9
.text:000004B9 loc_4B9:                                ; CODE XREF: ConvertOctStringToUInt32(char const *,char const * *)+41j
.text:000004B9                 cmp     [ebp+arg_4], 0
.text:000004BD                 jz      short loc_4C7
.text:000004BF                 mov     edx, [ebp+arg_4]
.text:000004C2                 mov     eax, [ebp+arg_0]
.text:000004C5                 mov     [edx], eax
.text:000004C7
.text:000004C7 loc_4C7:                                ; CODE XREF: ConvertOctStringToUInt32(char const *,char const * *)+4Dj
.text:000004C7                 mov     eax, [ebp+var_4]
.text:000004CA                 jmp     short loc_4F2
.text:000004CC ; ---------------------------------------------------------------------------
.text:000004CC
.text:000004CC loc_4CC:                                ; CODE XREF: ConvertOctStringToUInt32(char const *,char const * *)+47j
.text:000004CC                 mov     ecx, [ebp+var_4]
.text:000004CF                 and     ecx, 0E0000000h
.text:000004D5                 jz      short loc_4DB
.text:000004D7                 xor     eax, eax
.text:000004D9                 jmp     short loc_4F2
.text:000004DB ; ---------------------------------------------------------------------------
.text:000004DB
.text:000004DB loc_4DB:                                ; CODE XREF: ConvertOctStringToUInt32(char const *,char const * *)+65j
.text:000004DB                 mov     edx, [ebp+var_4]
.text:000004DE                 shl     edx, 3
.text:000004E1                 mov     [ebp+var_4], edx
.text:000004E4                 mov     eax, [ebp+var_8]
.text:000004E7                 sub     eax, 30h ; '0'
.text:000004EA                 or      eax, [ebp+var_4]
.text:000004ED                 mov     [ebp+var_4], eax
.text:000004F0                 jmp     short loc_49B
.text:000004F2 ; ---------------------------------------------------------------------------
.text:000004F2
.text:000004F2 loc_4F2:                                ; CODE XREF: ConvertOctStringToUInt32(char const *,char const * *)+5Aj
.text:000004F2                                         ; ConvertOctStringToUInt32(char const *,char const * *)+69j
.text:000004F2                 mov     esp, ebp
.text:000004F4                 pop     ebp
.text:000004F5                 retn    8
.text:000004F5 ?ConvertOctStringToUInt32@@YGIPBDPAPBD@Z endp
.text:000004F5
.text:000004F5 ; ---------------------------------------------------------------------------
.text:000004F8                 align 10h
.text:00000500
.text:00000500 ; =============== S U B R O U T I N E =======================================
.text:00000500
.text:00000500 ; Attributes: bp-based frame
.text:00000500
.text:00000500 ; unsigned __int64 __stdcall ConvertOctStringToUInt64(const char *, const char **)
.text:00000500                 public ?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z
.text:00000500 ?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z proc near
.text:00000500
.text:00000500 var_14          = dword ptr -14h
.text:00000500 var_10          = dword ptr -10h
.text:00000500 var_C           = dword ptr -0Ch
.text:00000500 var_8           = dword ptr -8
.text:00000500 var_4           = dword ptr -4
.text:00000500 arg_0           = dword ptr  8
.text:00000500 arg_4           = dword ptr  0Ch
.text:00000500
.text:00000500                 push    ebp
.text:00000501                 mov     ebp, esp
.text:00000503                 sub     esp, 14h
.text:00000506                 mov     eax, 0CCCCCCCCh
.text:0000050B                 mov     [ebp+var_14], eax
.text:0000050E                 mov     [ebp+var_10], eax
.text:00000511                 mov     [ebp+var_C], eax
.text:00000514                 mov     [ebp+var_8], eax
.text:00000517                 mov     [ebp+var_4], eax
.text:0000051A                 cmp     [ebp+arg_4], 0
.text:0000051E                 jz      short loc_528
.text:00000520                 mov     eax, [ebp+arg_4]
.text:00000523                 mov     ecx, [ebp+arg_0]
.text:00000526                 mov     [eax], ecx
.text:00000528
.text:00000528 loc_528:                                ; CODE XREF: ConvertOctStringToUInt64(char const *,char const * *)+1Ej
.text:00000528                 mov     [ebp+var_8], 0
.text:0000052F                 mov     [ebp+var_4], 0
.text:00000536                 jmp     short loc_541
.text:00000538 ; ---------------------------------------------------------------------------
.text:00000538
.text:00000538 loc_538:                                ; CODE XREF: ConvertOctStringToUInt64(char const *,char const * *)+B6j
.text:00000538                 mov     edx, [ebp+arg_0]
.text:0000053B                 add     edx, 1
.text:0000053E                 mov     [ebp+arg_0], edx
.text:00000541
.text:00000541 loc_541:                                ; CODE XREF: ConvertOctStringToUInt64(char const *,char const * *)+36j
.text:00000541                 mov     eax, [ebp+arg_0]
.text:00000544                 movzx   ecx, byte ptr [eax]
.text:00000547                 mov     [ebp+var_C], ecx
.text:0000054A                 cmp     [ebp+var_C], 30h ; '0'
.text:0000054E                 jb      short loc_556
.text:00000550                 cmp     [ebp+var_C], 37h ; '7'
.text:00000554                 jbe     short loc_56C
.text:00000556
.text:00000556 loc_556:                                ; CODE XREF: ConvertOctStringToUInt64(char const *,char const * *)+4Ej
.text:00000556                 cmp     [ebp+arg_4], 0
.text:0000055A                 jz      short loc_564
.text:0000055C                 mov     edx, [ebp+arg_4]
.text:0000055F                 mov     eax, [ebp+arg_0]
.text:00000562                 mov     [edx], eax
.text:00000564
.text:00000564 loc_564:                                ; CODE XREF: ConvertOctStringToUInt64(char const *,char const * *)+5Aj
.text:00000564                 mov     eax, [ebp+var_8]
.text:00000567                 mov     edx, [ebp+var_4]
.text:0000056A                 jmp     short loc_5B8
.text:0000056C ; ---------------------------------------------------------------------------
.text:0000056C
.text:0000056C loc_56C:                                ; CODE XREF: ConvertOctStringToUInt64(char const *,char const * *)+54j
.text:0000056C                 mov     ecx, [ebp+var_8]
.text:0000056F                 and     ecx, 0
.text:00000572                 mov     edx, [ebp+var_4]
.text:00000575                 and     edx, 0E0000000h
.text:0000057B                 mov     [ebp+var_14], ecx
.text:0000057E                 mov     [ebp+var_10], edx
.text:00000581                 mov     eax, [ebp+var_14]
.text:00000584                 or      eax, [ebp+var_10]
.text:00000587                 jz      short loc_58F
.text:00000589                 xor     eax, eax
.text:0000058B                 xor     edx, edx
.text:0000058D                 jmp     short loc_5B8
.text:0000058F ; ---------------------------------------------------------------------------
.text:0000058F
.text:0000058F loc_58F:                                ; CODE XREF: ConvertOctStringToUInt64(char const *,char const * *)+87j
.text:0000058F                 mov     eax, [ebp+var_8]
.text:00000592                 mov     edx, [ebp+var_4]
.text:00000595                 mov     cl, 3
.text:00000597                 call    __allshl
.text:0000059C                 mov     [ebp+var_8], eax
.text:0000059F                 mov     [ebp+var_4], edx
.text:000005A2                 mov     ecx, [ebp+var_C]
.text:000005A5                 sub     ecx, 30h ; '0'
.text:000005A8                 xor     edx, edx
.text:000005AA                 or      ecx, [ebp+var_8]
.text:000005AD                 or      edx, [ebp+var_4]
.text:000005B0                 mov     [ebp+var_8], ecx
.text:000005B3                 mov     [ebp+var_4], edx
.text:000005B6                 jmp     short loc_538
.text:000005B8 ; ---------------------------------------------------------------------------
.text:000005B8
.text:000005B8 loc_5B8:                                ; CODE XREF: ConvertOctStringToUInt64(char const *,char const * *)+6Aj
.text:000005B8                                         ; ConvertOctStringToUInt64(char const *,char const * *)+8Dj
.text:000005B8                 add     esp, 14h
.text:000005BB                 cmp     ebp, esp
.text:000005BD                 call    __RTC_CheckEsp
.text:000005C2                 mov     esp, ebp
.text:000005C4                 pop     ebp
.text:000005C5                 retn    8
.text:000005C5 ?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z endp
.text:000005C5
.text:000005C5 ; ---------------------------------------------------------------------------
.text:000005C8                 align 10h
.text:000005D0
.text:000005D0 ; =============== S U B R O U T I N E =======================================
.text:000005D0
.text:000005D0 ; Attributes: bp-based frame
.text:000005D0
.text:000005D0 ; unsigned int __stdcall ConvertHexStringToUInt32(const char *, const char **)
.text:000005D0                 public ?ConvertHexStringToUInt32@@YGIPBDPAPBD@Z
.text:000005D0 ?ConvertHexStringToUInt32@@YGIPBDPAPBD@Z proc near
.text:000005D0
.text:000005D0 var_C           = dword ptr -0Ch
.text:000005D0 var_8           = dword ptr -8
.text:000005D0 var_4           = dword ptr -4
.text:000005D0 arg_0           = dword ptr  8
.text:000005D0 arg_4           = dword ptr  0Ch
.text:000005D0
.text:000005D0                 push    ebp
.text:000005D1                 mov     ebp, esp
.text:000005D3                 sub     esp, 0Ch
.text:000005D6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000005DD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005EB                 cmp     [ebp+arg_4], 0
.text:000005EF                 jz      short loc_5F9
.text:000005F1                 mov     eax, [ebp+arg_4]
.text:000005F4                 mov     ecx, [ebp+arg_0]
.text:000005F7                 mov     [eax], ecx
.text:000005F9
.text:000005F9 loc_5F9:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+1Fj
.text:000005F9                 mov     [ebp+var_4], 0
.text:00000600                 jmp     short loc_60B
.text:00000602 ; ---------------------------------------------------------------------------
.text:00000602
.text:00000602 loc_602:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+BDj
.text:00000602                 mov     edx, [ebp+arg_0]
.text:00000605                 add     edx, 1
.text:00000608                 mov     [ebp+arg_0], edx
.text:0000060B
.text:0000060B loc_60B:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+30j
.text:0000060B                 mov     eax, [ebp+arg_0]
.text:0000060E                 movzx   ecx, byte ptr [eax]
.text:00000611                 mov     [ebp+var_8], ecx
.text:00000614                 cmp     [ebp+var_8], 30h ; '0'
.text:00000618                 jb      short loc_62B
.text:0000061A                 cmp     [ebp+var_8], 39h ; '9'
.text:0000061E                 ja      short loc_62B
.text:00000620                 mov     edx, [ebp+var_8]
.text:00000623                 sub     edx, 30h ; '0'
.text:00000626                 mov     [ebp+var_C], edx
.text:00000629                 jmp     short loc_66C
.text:0000062B ; ---------------------------------------------------------------------------
.text:0000062B
.text:0000062B loc_62B:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+48j
.text:0000062B                                         ; ConvertHexStringToUInt32(char const *,char const * *)+4Ej
.text:0000062B                 cmp     [ebp+var_8], 41h ; 'A'
.text:0000062F                 jb      short loc_642
.text:00000631                 cmp     [ebp+var_8], 46h ; 'F'
.text:00000635                 ja      short loc_642
.text:00000637                 mov     eax, [ebp+var_8]
.text:0000063A                 sub     eax, 37h ; '7'
.text:0000063D                 mov     [ebp+var_C], eax
.text:00000640                 jmp     short loc_66C
.text:00000642 ; ---------------------------------------------------------------------------
.text:00000642
.text:00000642 loc_642:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+5Fj
.text:00000642                                         ; ConvertHexStringToUInt32(char const *,char const * *)+65j
.text:00000642                 cmp     [ebp+var_8], 61h ; 'a'
.text:00000646                 jb      short loc_659
.text:00000648                 cmp     [ebp+var_8], 66h ; 'f'
.text:0000064C                 ja      short loc_659
.text:0000064E                 mov     ecx, [ebp+var_8]
.text:00000651                 sub     ecx, 57h ; 'W'
.text:00000654                 mov     [ebp+var_C], ecx
.text:00000657                 jmp     short loc_66C
.text:00000659 ; ---------------------------------------------------------------------------
.text:00000659
.text:00000659 loc_659:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+76j
.text:00000659                                         ; ConvertHexStringToUInt32(char const *,char const * *)+7Cj
.text:00000659                 cmp     [ebp+arg_4], 0
.text:0000065D                 jz      short loc_667
.text:0000065F                 mov     edx, [ebp+arg_4]
.text:00000662                 mov     eax, [ebp+arg_0]
.text:00000665                 mov     [edx], eax
.text:00000667
.text:00000667 loc_667:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+8Dj
.text:00000667                 mov     eax, [ebp+var_4]
.text:0000066A                 jmp     short loc_692
.text:0000066C ; ---------------------------------------------------------------------------
.text:0000066C
.text:0000066C loc_66C:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+59j
.text:0000066C                                         ; ConvertHexStringToUInt32(char const *,char const * *)+70j ...
.text:0000066C                 mov     ecx, [ebp+var_4]
.text:0000066F                 and     ecx, 0F0000000h
.text:00000675                 jz      short loc_67B
.text:00000677                 xor     eax, eax
.text:00000679                 jmp     short loc_692
.text:0000067B ; ---------------------------------------------------------------------------
.text:0000067B
.text:0000067B loc_67B:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+A5j
.text:0000067B                 mov     edx, [ebp+var_4]
.text:0000067E                 shl     edx, 4
.text:00000681                 mov     [ebp+var_4], edx
.text:00000684                 mov     eax, [ebp+var_4]
.text:00000687                 or      eax, [ebp+var_C]
.text:0000068A                 mov     [ebp+var_4], eax
.text:0000068D                 jmp     loc_602
.text:00000692 ; ---------------------------------------------------------------------------
.text:00000692
.text:00000692 loc_692:                                ; CODE XREF: ConvertHexStringToUInt32(char const *,char const * *)+9Aj
.text:00000692                                         ; ConvertHexStringToUInt32(char const *,char const * *)+A9j
.text:00000692                 mov     esp, ebp
.text:00000694                 pop     ebp
.text:00000695                 retn    8
.text:00000695 ?ConvertHexStringToUInt32@@YGIPBDPAPBD@Z endp
.text:00000695
.text:00000695 ; ---------------------------------------------------------------------------
.text:00000698                 align 10h
.text:000006A0
.text:000006A0 ; =============== S U B R O U T I N E =======================================
.text:000006A0
.text:000006A0 ; Attributes: bp-based frame
.text:000006A0
.text:000006A0 ; unsigned __int64 __stdcall ConvertHexStringToUInt64(const char *, const char **)
.text:000006A0                 public ?ConvertHexStringToUInt64@@YG_KPBDPAPBD@Z
.text:000006A0 ?ConvertHexStringToUInt64@@YG_KPBDPAPBD@Z proc near
.text:000006A0
.text:000006A0 var_18          = dword ptr -18h
.text:000006A0 var_14          = dword ptr -14h
.text:000006A0 var_10          = dword ptr -10h
.text:000006A0 var_C           = dword ptr -0Ch
.text:000006A0 var_8           = dword ptr -8
.text:000006A0 var_4           = dword ptr -4
.text:000006A0 arg_0           = dword ptr  8
.text:000006A0 arg_4           = dword ptr  0Ch
.text:000006A0
.text:000006A0                 push    ebp
.text:000006A1                 mov     ebp, esp
.text:000006A3                 sub     esp, 18h
.text:000006A6                 mov     eax, 0CCCCCCCCh
.text:000006AB                 mov     [ebp+var_18], eax
.text:000006AE                 mov     [ebp+var_14], eax
.text:000006B1                 mov     [ebp+var_10], eax
.text:000006B4                 mov     [ebp+var_C], eax
.text:000006B7                 mov     [ebp+var_8], eax
.text:000006BA                 mov     [ebp+var_4], eax
.text:000006BD                 cmp     [ebp+arg_4], 0
.text:000006C1                 jz      short loc_6CB
.text:000006C3                 mov     eax, [ebp+arg_4]
.text:000006C6                 mov     ecx, [ebp+arg_0]
.text:000006C9                 mov     [eax], ecx
.text:000006CB
.text:000006CB loc_6CB:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+21j
.text:000006CB                 mov     [ebp+var_8], 0
.text:000006D2                 mov     [ebp+var_4], 0
.text:000006D9                 jmp     short loc_6E4
.text:000006DB ; ---------------------------------------------------------------------------
.text:000006DB
.text:000006DB loc_6DB:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+EFj
.text:000006DB                 mov     edx, [ebp+arg_0]
.text:000006DE                 add     edx, 1
.text:000006E1                 mov     [ebp+arg_0], edx
.text:000006E4
.text:000006E4 loc_6E4:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+39j
.text:000006E4                 mov     eax, [ebp+arg_0]
.text:000006E7                 movzx   ecx, byte ptr [eax]
.text:000006EA                 mov     [ebp+var_C], ecx
.text:000006ED                 cmp     [ebp+var_C], 30h ; '0'
.text:000006F1                 jb      short loc_704
.text:000006F3                 cmp     [ebp+var_C], 39h ; '9'
.text:000006F7                 ja      short loc_704
.text:000006F9                 mov     edx, [ebp+var_C]
.text:000006FC                 sub     edx, 30h ; '0'
.text:000006FF                 mov     [ebp+var_10], edx
.text:00000702                 jmp     short loc_748
.text:00000704 ; ---------------------------------------------------------------------------
.text:00000704
.text:00000704 loc_704:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+51j
.text:00000704                                         ; ConvertHexStringToUInt64(char const *,char const * *)+57j
.text:00000704                 cmp     [ebp+var_C], 41h ; 'A'
.text:00000708                 jb      short loc_71B
.text:0000070A                 cmp     [ebp+var_C], 46h ; 'F'
.text:0000070E                 ja      short loc_71B
.text:00000710                 mov     eax, [ebp+var_C]
.text:00000713                 sub     eax, 37h ; '7'
.text:00000716                 mov     [ebp+var_10], eax
.text:00000719                 jmp     short loc_748
.text:0000071B ; ---------------------------------------------------------------------------
.text:0000071B
.text:0000071B loc_71B:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+68j
.text:0000071B                                         ; ConvertHexStringToUInt64(char const *,char const * *)+6Ej
.text:0000071B                 cmp     [ebp+var_C], 61h ; 'a'
.text:0000071F                 jb      short loc_732
.text:00000721                 cmp     [ebp+var_C], 66h ; 'f'
.text:00000725                 ja      short loc_732
.text:00000727                 mov     ecx, [ebp+var_C]
.text:0000072A                 sub     ecx, 57h ; 'W'
.text:0000072D                 mov     [ebp+var_10], ecx
.text:00000730                 jmp     short loc_748
.text:00000732 ; ---------------------------------------------------------------------------
.text:00000732
.text:00000732 loc_732:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+7Fj
.text:00000732                                         ; ConvertHexStringToUInt64(char const *,char const * *)+85j
.text:00000732                 cmp     [ebp+arg_4], 0
.text:00000736                 jz      short loc_740
.text:00000738                 mov     edx, [ebp+arg_4]
.text:0000073B                 mov     eax, [ebp+arg_0]
.text:0000073E                 mov     [edx], eax
.text:00000740
.text:00000740 loc_740:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+96j
.text:00000740                 mov     eax, [ebp+var_8]
.text:00000743                 mov     edx, [ebp+var_4]
.text:00000746                 jmp     short loc_794
.text:00000748 ; ---------------------------------------------------------------------------
.text:00000748
.text:00000748 loc_748:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+62j
.text:00000748                                         ; ConvertHexStringToUInt64(char const *,char const * *)+79j ...
.text:00000748                 mov     ecx, [ebp+var_8]
.text:0000074B                 and     ecx, 0
.text:0000074E                 mov     edx, [ebp+var_4]
.text:00000751                 and     edx, 0F0000000h
.text:00000757                 mov     [ebp+var_18], ecx
.text:0000075A                 mov     [ebp+var_14], edx
.text:0000075D                 mov     eax, [ebp+var_18]
.text:00000760                 or      eax, [ebp+var_14]
.text:00000763                 jz      short loc_76B
.text:00000765                 xor     eax, eax
.text:00000767                 xor     edx, edx
.text:00000769                 jmp     short loc_794
.text:0000076B ; ---------------------------------------------------------------------------
.text:0000076B
.text:0000076B loc_76B:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+C3j
.text:0000076B                 mov     eax, [ebp+var_8]
.text:0000076E                 mov     edx, [ebp+var_4]
.text:00000771                 mov     cl, 4
.text:00000773                 call    __allshl
.text:00000778                 mov     [ebp+var_8], eax
.text:0000077B                 mov     [ebp+var_4], edx
.text:0000077E                 mov     ecx, [ebp+var_10]
.text:00000781                 xor     edx, edx
.text:00000783                 or      ecx, [ebp+var_8]
.text:00000786                 or      edx, [ebp+var_4]
.text:00000789                 mov     [ebp+var_8], ecx
.text:0000078C                 mov     [ebp+var_4], edx
.text:0000078F                 jmp     loc_6DB
.text:00000794 ; ---------------------------------------------------------------------------
.text:00000794
.text:00000794 loc_794:                                ; CODE XREF: ConvertHexStringToUInt64(char const *,char const * *)+A6j
.text:00000794                                         ; ConvertHexStringToUInt64(char const *,char const * *)+C9j
.text:00000794                 add     esp, 18h
.text:00000797                 cmp     ebp, esp
.text:00000799                 call    __RTC_CheckEsp
.text:0000079E                 mov     esp, ebp
.text:000007A0                 pop     ebp
.text:000007A1                 retn    8
.text:000007A1 ?ConvertHexStringToUInt64@@YG_KPBDPAPBD@Z endp
.text:000007A1
.text:000007A1 _text           ends
.text:000007A1
.rtc$TMZ:000007A4 ; ===========================================================================
.rtc$TMZ:000007A4
.rtc$TMZ:000007A4 ; Segment type: Pure data
.rtc$TMZ:000007A4 ; Segment permissions: Read
.rtc$TMZ:000007A4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000007A4                 assume cs:_rtc$TMZ
.rtc$TMZ:000007A4                 ;org 7A4h
.rtc$TMZ:000007A4 ; COMDAT (pick any)
.rtc$TMZ:000007A4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000007A4 _rtc$TMZ        ends
.rtc$TMZ:000007A4
.rtc$IMZ:000007A8 ; ===========================================================================
.rtc$IMZ:000007A8
.rtc$IMZ:000007A8 ; Segment type: Pure data
.rtc$IMZ:000007A8 ; Segment permissions: Read
.rtc$IMZ:000007A8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000007A8                 assume cs:_rtc$IMZ
.rtc$IMZ:000007A8                 ;org 7A8h
.rtc$IMZ:000007A8 ; COMDAT (pick any)
.rtc$IMZ:000007A8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000007A8 _rtc$IMZ        ends
.rtc$IMZ:000007A8
UNDEF:000007B0 ; ===========================================================================
UNDEF:000007B0
UNDEF:000007B0 ; Segment type: Externs
UNDEF:000007B0 ; UNDEF
UNDEF:000007B0                 extrn __RTC_Shutdown:near
UNDEF:000007B0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000007B4                 extrn __RTC_InitBase:near
UNDEF:000007B4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000007B8                 extrn __RTC_CheckEsp:near
UNDEF:000007B8                                         ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+FCp
UNDEF:000007B8                                         ; ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+FEp ...
UNDEF:000007BC                 extrn __allmul:near     ; CODE XREF: ConvertStringToUInt64(char const *,char const * *)+9Dp
UNDEF:000007BC                                         ; ConvertStringToUInt64(wchar_t const *,wchar_t const * *)+9Fp
UNDEF:000007C0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000007C0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000007C0                                         ; CODE XREF: ConvertStringToInt32(wchar_t const *,wchar_t const * *)+B5p
UNDEF:000007C4                 extrn __allshl:near     ; CODE XREF: ConvertOctStringToUInt64(char const *,char const * *)+97p
UNDEF:000007C4                                         ; ConvertHexStringToUInt64(char const *,char const * *)+D3p
UNDEF:000007C4
UNDEF:000007C4
UNDEF:000007C4                 end